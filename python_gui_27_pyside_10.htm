<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu s využitím frameworku PySide: rastrové operace, vykreslování textů</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu s využitím frameworku PySide: rastrové operace, vykreslování textů</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V desátém článku o frameworku PySide dokončíme popis vykreslovacích technik nabízených třídou QPainter. Nejdříve si ukážeme způsob určení oblastí vykreslování a použití bitových masek. Dále se budeme zabývat tzv. ROPs a závěr bude věnován popisu vykreslování textů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba GUI v&times;Pythonu s&nbsp;využitím frameworku PySide: rastrové operace, vykreslování textů</a></p>
<p><a href="#k02">2. Určení oblasti (regionu), která se může překreslit</a></p>
<p><a href="#k03">3. První demonstrační příklad: vykreslování do oblasti ohraničené obdélníkem</a></p>
<p><a href="#k04">4. Maskování vykreslování s&nbsp;využitím bitmapy (stencil)</a></p>
<p><a href="#k05">5. Druhý demonstrační příklad: vykreslování do pixelů specifikovaných bitovou maskou</a></p>
<p><a href="#k06">6. Množinové operace prováděné nad regiony</a></p>
<p><a href="#k07">7. Třetí demonstrační příklad: vytvoření nového regionu s&nbsp;využitím operace nonekvivalence</a></p>
<p><a href="#k08">8. Rastrové operace vykonávané při vykreslování dvourozměrných entit</a></p>
<p><a href="#k09">9. Čtvrtý demonstrační příklad: vzorník základních rastrových operací</a></p>
<p><a href="#k10">10. Pokročilejší rastrové operace a role alfa kanálu při provádění těchto operací</a></p>
<p><a href="#k11">11. Pátý demonstrační příklad: vzorník vybraných pokročilejších rastrových operací</a></p>
<p><a href="#k12">12. Vykreslení textů</a></p>
<p><a href="#k13">13. Osmý demonstrační příklad: vykreslení vycentrovaného textu</a></p>
<p><a href="#k14">14. Devátý demonstrační příklad: nastavení stylu a velikosti fontu</a></p>
<p><a href="#k15">15. Desátý demonstrační příklad: načtení fontu ze specifikované rodiny</a></p>
<p><a href="#k16">16. Obsah následující části seriálu</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: rastrové operace, vykreslování textů</h2>

<p>Dnes dokončíme popis možností frameworku <i>PySide</i> v&nbsp;oblasti
vykreslování dvourozměrné grafiky. Ukážeme si zejména způsob konfigurace
vykreslování jednotlivých dvourozměrných entit, a to na úrovni pixelů tvořících
hranici popř.&nbsp;i vnitřek entity. Při vykreslování se totiž postupuje zhruba
následujícím způsobem:</p>

<ol>

<li>Vrcholy popř.&nbsp;řídicí body dvourozměrných entit jsou podrobeny vybrané
lineární transformaci (zvětšení, zmenšení, otočení, zkosení, posun atd.).</li>

<li>Zjistí se, zda je entita vůbec viditelná, tj.&nbsp;zda transformované
vrcholy leží ve viditelné oblasti.</li>

<li>Dále se provede takzvaná rasterizace, tj.&nbsp;výpočet barev pixelů
ležících na hranici entity (pero) a popř.&nbsp;i v&nbsp;ploše, kterou entita
tvoří (štětec).</li>

<li>V&nbsp;průběhu rasterizace se s&nbsp;každým vypočteným pixelem provádí
další operace, což je téma dnešního článku.</li>

</ol>

<p>Mezi prováděné rastrové operace patří:</p>

<ol>

<li>Test vůči masce, zda se má pixel vykreslit. Maska může být představována
bitmapou, tj.&nbsp;její funkce odpovídá jedné konfigurovatelné vlastnosti
<i>stencil bufferu</i> v&nbsp;OpenGL.</li>

<li>Dále se zkombinuje původní barva pixelu na plátně s&nbsp;barvou vypočtenou.
Kombinací těchto dvou barev vznikne barva třetí, která je na plátno zapsána.
Výchozí operací je pouhé přepsání staré barvy, ovšem je možné zvolit i jiné
metody.</li>

</ol>



<p><a name="k02"></a></p>
<h2 id="k02">2. Určení oblasti (regionu), která se může překreslit</h2>

<p>První operací, kterou si dnes popíšeme, je určení oblasti (neboli regionu),
která se může překreslit. Všechny pixely, které by se měly vykreslit mimo
stanovenou oblast, budou ignorovány, tj.&nbsp;nijak neovlivní již nakreslenou
scénu. Region je možné vytvořit například z&nbsp;obyčejného obdélníku, což je
pravděpodobně nejčastěji používaná varianta. Nejprve se vytvoří instance
objektu typu <strong>QRegion</strong> a posléze se tento objekt
(resp.&nbsp;přesněji řečeno reference na něj) předá metodě
<strong>QPainter.setClipRegion()</strong>:</p>

<pre>
<i># vytvoření objektu typu QPainter s předáním</i>
<i># reference na "pokreslovaný" objekt</i>
qPainter = QtGui.QPainter(self.image)
&nbsp;
<i># nastavení oblasti omezující vykreslování</i>
region = QtGui.QRegion(QtCore.QRect(x, y, šířka, výška))
qPainter.setClipRegion(region)
</pre>

<p>Ve skutečnosti je samozřejmě možné, aby měl region i jiné tvary.
V&nbsp;takovém případě namísto <strong>QRect</strong> použijte instanci třídy
typu <strong>QPolygon</strong> či dále popsanou bitmapu
(<strong>QBitmap</strong>).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad: vykreslování do oblasti ohraničené obdélníkem</h2>

<p>Dnešní první demonstrační příklad je založen na příkladu, s&nbsp;nímž jsme
se již seznámili v&nbsp;předchozích částech tohoto seriálu. Po jeho spuštění se
vykreslí vzorník štětců, které jsou součástí frameworku <i>PySide</i> a které
tedy můžeme použít bez nutnosti jejich explicitní deklarace:</p>

<pre>
<i># vykreslení obdélníků různým stylem</i>
drawRectangleUsingBrush(qp, YELLOW, 10, 10, 50, 50, QtCore.Qt.SolidPattern)
drawRectangleUsingBrush(qp, YELLOW, 70, 10, 50, 50, QtCore.Qt.HorPattern)
...
...
...
</pre>

<p>Ovšem ve skutečnosti se vykreslí pouze vybraná oblast kreslicí plochy,
protože před zahájením vlastního vykreslování nastavíme oblast, do které se má
vykreslování provést. Okolní pixely, které do oblasti nezasahují, nebudou nijak
modifikovány:</p>

<pre>
<i># nastavení oblasti omezující vykreslování</i>
region = QtGui.QRegion(QtCore.QRect(20, 20, MainWindow.IMAGE_WIDTH-40, MainWindow.IMAGE_HEIGHT-50))
qp.setClipRegion(region)
</pre>

<p>Výsledek můžeme vidět na následujícím screenshotu:</p>

<img src="https://i.iinfo.cz/images/533/pyside10-1.png" class="image-319405" alt="&#160;" height="207" width="442" />
<p><i>Obrázek 1: Screenshot okna prvního demonstračního příkladu.</i></p>

<p>Následuje výpis zdrojového kódu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingBrush</strong>(qPainter, color, x, y, width, height, brush_style, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    brush = QtGui.QBrush(QtGui.QColor(*color))
    brush.setStyle(brush_style)
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 440
    IMAGE_HEIGHT = 140
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># nastavení oblasti omezující vykreslování</i>
        region = QtGui.QRegion(QtCore.QRect(20, 20, MainWindow.IMAGE_WIDTH-40, MainWindow.IMAGE_HEIGHT-50))
        qp.setClipRegion(region)
&nbsp;
        <i># vykreslení obdélníků různým stylem</i>
        drawRectangleUsingBrush(qp, YELLOW, 10, 10, 50, 50, QtCore.Qt.SolidPattern)
        drawRectangleUsingBrush(qp, YELLOW, 70, 10, 50, 50, QtCore.Qt.HorPattern)
        drawRectangleUsingBrush(qp, YELLOW, 130, 10, 50, 50, QtCore.Qt.VerPattern)
        drawRectangleUsingBrush(qp, YELLOW, 190, 10, 50, 50, QtCore.Qt.CrossPattern)
        drawRectangleUsingBrush(qp, YELLOW, 250, 10, 50, 50, QtCore.Qt.BDiagPattern)
        drawRectangleUsingBrush(qp, YELLOW, 310, 10, 50, 50, QtCore.Qt.FDiagPattern)
        drawRectangleUsingBrush(qp, YELLOW, 370, 10, 50, 50, QtCore.Qt.DiagCrossPattern)
&nbsp;
        drawRectangleUsingBrush(qp, WHITE, 10, 70, 50, 50, QtCore.Qt.Dense1Pattern)
        drawRectangleUsingBrush(qp, WHITE, 70, 70, 50, 50, QtCore.Qt.Dense2Pattern)
        drawRectangleUsingBrush(qp, WHITE, 130, 70, 50, 50, QtCore.Qt.Dense3Pattern)
        drawRectangleUsingBrush(qp, WHITE, 190, 70, 50, 50, QtCore.Qt.Dense4Pattern)
        drawRectangleUsingBrush(qp, WHITE, 250, 70, 50, 50, QtCore.Qt.Dense5Pattern)
        drawRectangleUsingBrush(qp, WHITE, 310, 70, 50, 50, QtCore.Qt.Dense6Pattern)
        drawRectangleUsingBrush(qp, WHITE, 370, 70, 50, 50, QtCore.Qt.Dense7Pattern)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Maskování vykreslování s&nbsp;využitím bitmapy (stencil)</h2>

<p>Mnohem zajímavější je použití běžné bitmapy pro určení těch pixelů, které je
možné vykreslit, a těch, které jsou naopak maskovány. Jen pro připomínku
&ndash; termínem <i>bitmapa</i> se v&nbsp;PySide označují rastrové obrázky,
v&nbsp;nichž je každý pixel reprezentován jediným bitem, takže vidíme, že se
skutečně jedná o bitovou masku. Již <a href="#k01">v&nbsp;úvodní kapitole</a>
jsme si řekli, že tato bitmapa bude pracovat jako takzvaný <i>stencil
buffer</i> známý například z&nbsp;knihovny OpenGL (ve skutečnosti má stencil
buffer větší možnosti konfigurace, ovšem toto téma již nezapadá do kontextu
tohoto článku).</p>

<img src="https://i.iinfo.cz/images/533/pyside10-2.png" class="image-319406" alt="&#160;" height="240" width="336" />
<p><i>Obrázek 2: Bitmapa, která bude sloužit jako maska ve druhém
příkladu.</i></p>

<p>Nastavení bitmapy ve funkci masky je poměrně snadné, pouze stačí bitmapu
načíst a použít ji jako argument do konstruktoru třídy
<strong>QRegion</strong>:</p>

<pre>
<i># vytvoření objektu typu QPainter s předáním</i>
<i># reference na "pokreslovaný" objekt</i>
qPainter = QtGui.QPainter(self.image)
&nbsp;
<i># bitmapa tvořící masku regionu</i>
bitmap = QtGui.QBitmap(cesta_k_bitmapě)
region = QtGui.QRegion(bitmap)
&nbsp;
<i># nastavení oblasti vykreslování</i>
qPainter.setClipRegion(region)
</pre>

<img src="https://i.iinfo.cz/images/533/pyside10-3.png" class="image-319407" alt="&#160;" height="317" width="342" />
<p><i>Obrázek 3: Toto není text, ale obdélník vyplněný gradientním přechodem.
Při vykreslování byla použita bitová maska ze druhého obrázku.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Druhý demonstrační příklad: vykreslování do pixelů specifikovaných bitovou maskou</h2>

<p>Ve druhém demonstračním příkladu vykreslíme do okna (prakticky přes celou
jeho plochu) obdélník vyplněný opakujícím se gradientním přechodem od žluté
barvy do barvy černé:</p>

<pre>
<i># výplň obdélníku</i>
brush = createBrushFromGradient(YELLOW, BLACK)
&nbsp;
<i># vykreslení obdélníku</i>
drawRectangleUsingCustomBrush(qp, BLACK, 0, 0, 340, 240, brush)
</pre>

<p>Ovšem před vlastním vykreslením vyplněného obdélníku nastavíme bitovou
masku, která vykreslení omezí pouze na vybrané pixely:</p>

<pre>
<i># bitmapa tvořící masku regionu</i>
bitmap = QtGui.QBitmap("bitmaps/clip.xbm")
region = QtGui.QRegion(bitmap)
&nbsp;
<i># nastavení oblasti vykreslování</i>
qp.setClipRegion(region)
</pre>

<p>Výsledek jste mohli vidět na obrázcích uvedených <a
href="#k04">v&nbsp;předchozí kapitole</a>. Opět následuje výpis zdrojového kódu
tohoto demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># vytvoření štětce z gradientního přechodu</i>
def <strong>createBrushFromGradient</strong>(color1, color2):
    gradient = QtGui.QLinearGradient(100, 100, 100, 160)
    gradient.setColorAt(0.2, QtGui.QColor(*color1))
    gradient.setColorAt(1.0, QtGui.QColor(*color2))
    gradient.setSpread(QtGui.QGradient.Spread.ReflectSpread)
    return QtGui.QBrush(gradient)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingCustomBrush</strong>(qPainter, color, x, y, width, height, brush, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 340
    IMAGE_HEIGHT = 250
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># bitmapa tvořící masku regionu</i>
        bitmap = QtGui.QBitmap("bitmaps/clip.xbm")
        region = QtGui.QRegion(bitmap)
&nbsp;
        <i># nastavení oblasti vykreslování</i>
        qp.setClipRegion(region)
&nbsp;
        <i># výplň obdélníku</i>
        brush = createBrushFromGradient(YELLOW, BLACK)
&nbsp;
        <i># vykreslení obdélníku</i>
        drawRectangleUsingCustomBrush(qp, BLACK, 0, 0, 340, 240, brush)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Množinové operace prováděné nad regiony</h2>

<p>V&nbsp;případě, že máme dvě instance třídy <strong>QRegion</strong>,
tj.&nbsp;dvě oblasti vykreslování, můžeme z&nbsp;nich vytvořit třetí oblast
s&nbsp;využitím vybrané množinové operace. Tyto operace se podobají množinovým
operacím, s&nbsp;nimiž jsme se seznámili při popisování cest:</p>

<table>
<tr><th>Operace</th><th>Metoda</th><th>Přetížený operátor</th><th>Alternativní operátor</th></tr>
<tr><td>sjednocení</td><td><strong>united</strong></td><td>|, |=</td><td>+, +=</td></tr>
<tr><td>průnik</td><td><strong>intersected</strong></td><td>&amp;, &amp;=</td><td>&nbsp;</td></tr>
<tr><td>rozdíl</td><td><strong>subtracted</strong></td><td>-, -=</td><td>&nbsp;</td></tr>
<tr><td>nonekvivalence</td><td><strong>xored</strong></td><td>^, ^=</td><td>&nbsp;</td></tr>
</table>

<p>Vidíme, že je k&nbsp;dispozici ještě čtvrtá operace, kterou si ukážeme hned
v&nbsp;dalším příkladu popsaném v&nbsp;navazující kapitole.</p>

<img src="https://i.iinfo.cz/images/533/pyside10-4.png" class="image-319408" alt="&#160;" height="317" width="342" />
<p><i>Obrázek 4: Tento obrázek vznikl jednoduše &ndash; zkombinovali jsme dva
regiony, první ve tvaru obdélníku a druhý reprezentovaný nám již známou bitovou
maskou. Kombinace byla provedena operací XOR, která vedla k&nbsp;inverzi bitové
masky v&nbsp;levé třetině obrázku.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Třetí demonstrační příklad: vytvoření nového regionu s&nbsp;využitím operace nonekvivalence</h2>

<p>Ve třetím příkladu si ukážeme použití množinových operací provedených nad
dvěma regiony. První region je tvořen pečlivě vybranou obdélníkovou oblastí,
která zasahuje zhruba do levé třetiny plochy:</p>

<pre>
region1 = QtGui.QRegion(QtCore.QRect(0, 0, 110, MainWindow.IMAGE_HEIGHT))
</pre>

<p>Druhý region je tvořen bitmapou, resp.&nbsp;přesněji řečeno bitovou
maskou:</p>

<pre>
<i># bitmapa tvořící masku regionu</i>
bitmap = QtGui.QBitmap("bitmaps/clip.xbm")
&nbsp;
region2 = QtGui.QRegion(bitmap)
</pre>

<p>Oblast vykreslování je určena třetím regionem, který vznikne
z&nbsp;předchozích dvou regionů jejich zkombinováním operací nonekvivalence
(XOR):</p>

<pre>
<i># nastavení oblasti vykreslování s využitím operace XOR</i>
qp.setClipRegion(region1 ^ region2)
</pre>

<p>Opět následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># vytvoření štětce z gradientního přechodu</i>
def <strong>createBrushFromGradient</strong>(color1, color2):
    gradient = QtGui.QLinearGradient(100, 100, 100, 160)
    gradient.setColorAt(0.2, QtGui.QColor(*color1))
    gradient.setColorAt(1.0, QtGui.QColor(*color2))
    gradient.setSpread(QtGui.QGradient.Spread.ReflectSpread)
    return QtGui.QBrush(gradient)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingCustomBrush</strong>(qPainter, color, x, y, width, height, brush, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 340
    IMAGE_HEIGHT = 250
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># bitmapa tvořící masku regionu</i>
        bitmap = QtGui.QBitmap("bitmaps/clip.xbm")
&nbsp;
        <i># vytvoření dvou regionů</i>
        region1 = QtGui.QRegion(QtCore.QRect(0, 0, 110, MainWindow.IMAGE_HEIGHT))
        region2 = QtGui.QRegion(bitmap)
&nbsp;
        <i># nastavení oblasti vykreslování s využitím operace XOR</i>
        qp.setClipRegion(region1 ^ region2)
&nbsp;
        <i># výplň obdélníku</i>
        brush = createBrushFromGradient(YELLOW, BLACK)
&nbsp;
        <i># vykreslení obdélníku</i>
        drawRectangleUsingCustomBrush(qp, BLACK, 0, 0, MainWindow.IMAGE_WIDTH, MainWindow.IMAGE_HEIGHT, brush)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Rastrové operace vykonávané při vykreslování dvourozměrných entit</h2>

<p>Již <a href="#k01">v&nbsp;úvodní kapitole</a> jsme si řekli, že při
vykreslování dvourozměrných entit jsou v&nbsp;průběhu rasterizace aplikovány
rastrové operace, které kombinují barvu již uloženého (vykresleného) pixelu a
pixelu vykreslovaného. Podporovány jsou následující operace:</p>

<table>
<tr><th>Konstanta pro metodu <strong>setCompositionMode</strong></th><th>Význam</th></tr>
<tr><td>QPainter.RasterOp_SourceOrDestination</td><td>bitová operace OR</td></tr>
<tr><td>QPainter.RasterOp_SourceAndDestination</td><td>bitová operace AND</td></tr>
<tr><td>QPainter.RasterOp_SourceXorDestination</td><td>bitová operace XOR</td></tr>
<tr><td>QPainter.RasterOp_NotSourceAndNotDestination</td><td>bitová operace NOR</td></tr>
<tr><td>QPainter.RasterOp_NotSourceOrNotDestination</td><td>bitová operace NAND</td></tr>
<tr><td>QPainter.RasterOp_NotSourceXorDestination</td><td>(NOT src) XOR dst</td></tr>
<tr><td>QPainter.RasterOp_NotSource</td><td>negace hodnoty původního pixelu</td></tr>
<tr><td>QPainter.RasterOp_NotSourceAndDestination</td><td>(NOT src) AND dst</td></tr>
<tr><td>QPainter.RasterOp_SourceAndNotDestination</td><td>src AND (NOT dst)</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Čtvrtý demonstrační příklad: vzorník základních rastrových operací</h2>

<p>Dnešní čtvrtý demonstrační příklad je poněkud delší, než příklady předchozí.
Po jeho spuštění se na obrazovku vykreslí vzorník základních rastrových
operací. Samotné vykreslování je založeno na uživatelské funkci nazvané
<strong>twoOverlappingSquares</strong>, která skutečně vykreslí dva vyplněné
čtverce, ovšem navíc před vykreslením druhého čtverce nastaví vybranou
ROPs:</p>

<pre>
def <strong>twoOverlappingSquares</strong>(qPainter, color1, color2, x, y, compositionMode):
    <i># nastavení výchozího režimu míchání barev</i>
    qPainter.setCompositionMode(QtGui.QPainter.CompositionMode_SourceOver)
&nbsp;
    <i># první čtverec</i>
    drawRectangleUsingBrush(qPainter, color1, x, y, 100, 100,
                            QtCore.Qt.SolidPattern)
&nbsp;
    <i># nastavení režimu míchání barev</i>
    qPainter.setCompositionMode(compositionMode)
&nbsp;
    <i># druhý čtverec</i>
    drawRectangleUsingBrush(qPainter, color2, x+50, y+50, 100, 100,
                            QtCore.Qt.SolidPattern)
</pre>

<p>Tato funkce je volána pro různé rastrové operace, takže na obrazovce
skutečně uvidíme různé varianty kombinací barev pixelů dvou obdélníků:</p>

<pre>
<i># vykreslení sady překrývajících se čtverců</i>
twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_1, ROW_1, QtGui.QPainter.CompositionMode_SourceOver)
twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_1, ROW_2, QtGui.QPainter.RasterOp_SourceOrDestination)
twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_2, ROW_2, QtGui.QPainter.RasterOp_SourceAndDestination)
twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_3, ROW_2, QtGui.QPainter.RasterOp_SourceXorDestination)
twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_1, ROW_3, QtGui.QPainter.RasterOp_NotSourceAndNotDestination)
twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_2, ROW_3, QtGui.QPainter.RasterOp_NotSourceOrNotDestination)
twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_3, ROW_3, QtGui.QPainter.RasterOp_NotSourceXorDestination)
twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_1, ROW_4, QtGui.QPainter.RasterOp_NotSource)
twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_2, ROW_4, QtGui.QPainter.RasterOp_NotSourceAndDestination)
twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_3, ROW_4, QtGui.QPainter.RasterOp_SourceAndNotDestination)
</pre>

<img src="https://i.iinfo.cz/images/533/pyside10-5.png" class="image-319409" alt="&#160;" height="867" width="602" />
<p><i>Obrázek 5: Vzorník základních rastrových operací.</i></p>

<p>Opět se podívejme na úplný zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingBrush</strong>(qPainter, color, x, y, width, height, brush_style,
                            pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    brush = QtGui.QBrush(QtGui.QColor(*color))
    brush.setStyle(brush_style)
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
def <strong>twoOverlappingSquares</strong>(qPainter, color1, color2, x, y, compositionMode):
    <i># nastavení výchozího režimu míchání barev</i>
    qPainter.setCompositionMode(QtGui.QPainter.CompositionMode_SourceOver)
&nbsp;
    <i># první čtverec</i>
    drawRectangleUsingBrush(qPainter, color1, x, y, 100, 100,
                            QtCore.Qt.SolidPattern)
&nbsp;
    <i># nastavení režimu míchání barev</i>
    qPainter.setCompositionMode(compositionMode)
&nbsp;
    <i># druhý čtverec</i>
    drawRectangleUsingBrush(qPainter, color2, x+50, y+50, 100, 100,
                            QtCore.Qt.SolidPattern)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 600
    IMAGE_HEIGHT = 800
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># vykreslení sady překrývajících se čtverců</i>
        self.drawOverlappingSquares(qp)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>drawOverlappingSquares</strong>(self, qPainter):
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># umístění čtverců na kreslicí ploše</i>
        HORIZONTAL_DISTANCE = 200
        VERTICAL_DISTANCE = 200
&nbsp;
        COLUMN_1 = 10
        COLUMN_2 = COLUMN_1 + HORIZONTAL_DISTANCE
        COLUMN_3 = COLUMN_2 + HORIZONTAL_DISTANCE
&nbsp;
        ROW_1 = 10
        ROW_2 = ROW_1 + HORIZONTAL_DISTANCE
        ROW_3 = ROW_2 + HORIZONTAL_DISTANCE
        ROW_4 = ROW_3 + HORIZONTAL_DISTANCE
&nbsp;
        <i># vykreslení sady překrývajících se čtverců</i>
        twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_1, ROW_1,
                              QtGui.QPainter.CompositionMode_SourceOver)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_1, ROW_2,
                              QtGui.QPainter.RasterOp_SourceOrDestination)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_2, ROW_2,
                              QtGui.QPainter.RasterOp_SourceAndDestination)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_3, ROW_2,
                              QtGui.QPainter.RasterOp_SourceXorDestination)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_1, ROW_3,
                              QtGui.QPainter.RasterOp_NotSourceAndNotDestination)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_2, ROW_3,
                              QtGui.QPainter.RasterOp_NotSourceOrNotDestination)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_3, ROW_3,
                              QtGui.QPainter.RasterOp_NotSourceXorDestination)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_1, ROW_4,
                              QtGui.QPainter.RasterOp_NotSource)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_2, ROW_4,
                              QtGui.QPainter.RasterOp_NotSourceAndDestination)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN, BLUE, COLUMN_3, ROW_4,
                              QtGui.QPainter.RasterOp_SourceAndNotDestination)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Pokročilejší rastrové operace a role alfa kanálu při provádění těchto operací</h2>

<p>Při rasterizaci se kromě bitových operací zmíněných <a
href="#k08">v&nbsp;osmé kapitole</a> mohou použít i pokročilejí operace
podporované frameworkem PySide. Jedná se o operace, které většinou používají
alfa kanál zdrojových a/nebo cílových pixelů. Tento kanál typicky slouží pro
určení míry smíchání barev zdrojového pixelu (tj.&nbsp;pixelu, který se bude
vykreslovat) a pixelu cílového. Kódy těchto operací jsou reprezentovány
konstantami <strong>QPainter.CompositionMode_*</strong> a význam některých
z&nbsp;nich uvidíme v&nbsp;dnešním pátém demonstračním příkladu popsaném <a
href="#k11">v&nbsp;navazující kapitole</a>.</p>

<img src="https://i.iinfo.cz/images/533/pyside10-6.png" class="image-319410" alt="&#160;" height="867" width="602" />
<p><i>Obrázek 6: Vzorník rastrových operací vykreslený pátým demonstračním
příkladem.</i></p>

<p>Ve skutečnosti je však možné alfa kanál použít i u klasických bitových ROPs,
což je ukázáno na následujících dvou screenshotech, které vznikly nepatrnou
úpravou čtvrtého příkladu:</p>

<img src="https://i.iinfo.cz/images/533/pyside10-7.png" class="image-319411" alt="&#160;" height="867" width="602" />
<p><i>Obrázek 7: Modré čtverce mají nastavenou poloviční průhlednost
(vykresleno variantou čtvrtého příkladu).</i></p>

<img src="https://i.iinfo.cz/images/533/pyside10-8.png" class="image-319412" alt="&#160;" height="867" width="602" />
<p><i>Obrázek 8: Modré i zelené čtverce mají nastavenou poloviční průhlednost
(vykresleno variantou čtvrtého příkladu).</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pátý demonstrační příklad: vzorník vybraných pokročilejších rastrových operací</h2>

<p>V&nbsp;tomto příkladu jsou ukázány některé pokročilejší rastrové operace. Ze
všech nabízených operací jsem vybral ty, které dávají zajímavé výsledky:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingBrush</strong>(qPainter, color, x, y, width, height, brush_style,
                            pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    brush = QtGui.QBrush(QtGui.QColor(*color))
    brush.setStyle(brush_style)
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
def <strong>twoOverlappingSquares</strong>(qPainter, color1, color2, x, y, compositionMode):
    <i># nastavení výchozího režimu míchání barev</i>
    qPainter.setCompositionMode(QtGui.QPainter.CompositionMode_SourceOver)
&nbsp;
    <i># první čtverec</i>
    drawRectangleUsingBrush(qPainter, color1, x, y, 100, 100,
                            QtCore.Qt.SolidPattern)
&nbsp;
    <i># nastavení režimu míchání barev</i>
    qPainter.setCompositionMode(compositionMode)
&nbsp;
    <i># druhý čtverec</i>
    drawRectangleUsingBrush(qPainter, color2, x+50, y+50, 100, 100,
                            QtCore.Qt.SolidPattern)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 600
    IMAGE_HEIGHT = 800
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># vykreslení sady překrývajících se čtverců</i>
        self.drawOverlappingSquares(qp)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>drawOverlappingSquares</strong>(self, qPainter):
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        BLUE_50_ALPHA = (0, 0, 255, 128)
        GREEN_50_ALPHA = (0, 255, 0, 128)
&nbsp;
        <i># umístění čtverců na kreslicí ploše</i>
        HORIZONTAL_DISTANCE = 200
        VERTICAL_DISTANCE = 200
&nbsp;
        COLUMN_1 = 10
        COLUMN_2 = COLUMN_1 + HORIZONTAL_DISTANCE
        COLUMN_3 = COLUMN_2 + HORIZONTAL_DISTANCE
&nbsp;
        ROW_1 = 10
        ROW_2 = ROW_1 + HORIZONTAL_DISTANCE
        ROW_3 = ROW_2 + HORIZONTAL_DISTANCE
        ROW_4 = ROW_3 + HORIZONTAL_DISTANCE
&nbsp;
        <i># vykreslení sady překrývajících se čtverců</i>
        twoOverlappingSquares(qPainter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_1,
                              QtGui.QPainter.CompositionMode_SourceOver)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_2,
                              QtGui.QPainter.CompositionMode_Source)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_2, ROW_2,
                              QtGui.QPainter.CompositionMode_DestinationIn)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_3, ROW_2,
                              QtGui.QPainter.CompositionMode_SourceOut)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_3,
                              QtGui.QPainter.CompositionMode_Xor)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_2, ROW_3,
                              QtGui.QPainter.CompositionMode_Plus)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_3, ROW_3,
                              QtGui.QPainter.CompositionMode_Screen)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_4,
                              QtGui.QPainter.CompositionMode_HardLight)
&nbsp;
        twoOverlappingSquares(qPainter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_2, ROW_4,
                              QtGui.QPainter.CompositionMode_SoftLight)
&nbsp;
        twoOverlappingSquares(qPainter, WHITE, BLUE_50_ALPHA, COLUMN_3, ROW_4,
                              QtGui.QPainter.CompositionMode_ColorBurn)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vykreslení textů</h2>

<p>Vykreslení textu, přesněji řečeno textového řetězce, na plochu spravovanou
třídou <i>QPainter</i>, je v&nbsp;tom nejjednodušším případě snadné. Stačí
totiž nastavit barvu vykreslování (vlastnost kreslicího pera), získat instanci
třídy <strong>QFont</strong> a následně text vykreslit metodou
<strong>QPainter.drawText(x, y, text)</strong>.</p>

<p>Většinou ale potřebujeme přesněji určit oblast, do které se text vypíše.
V&nbsp;tomto případě použijeme odlišnou variantu metody
<strong>QPainter.drawText()</strong>. Tentokrát budou při volání této metody
použity tři parametry:</p>

<ol>

<li>obdélník (<strong>QtCore.QRect</strong>), do něhož se má text
vykreslit.</li>

<li>celočíselný parametr se specifikací horizontálního i vertikálního
zarovnání. Jedná se o kombinaci celočíselných konstant
<strong>QtCore.Qt.Align*</strong>.</li>

<li>posledním parametrem je pochopitelně vlastní text.</li>

</ol>

<p>Podívejme se na příklad:</p>

<pre>
<i># vytvoření pera a nastavení barvy kreslení</i>
pen = QtGui.QPen(QtGui.QColor(255, 128, 128))
&nbsp;
<i># kreslit se bude právě vytvořeným perem</i>
qp.setPen(pen)
&nbsp;
<i># obdélník, do kterého se text vypíše</i>
rect = QtCore.QRect(0, 0, MainWindow.IMAGE_WIDTH, MainWindow.IMAGE_HEIGHT)
&nbsp;
<i># zarovnání textu</i>
<i># - horizontální i vertikální vycentrování v rámci obdélníku</i>
align = QtCore.Qt.AlignHCenter | QtCore.Qt.AlignCenter
&nbsp;
<i># vykreslení textu</i>
qp.drawText(rect, align, "PySide")
</pre>

<p>Nejdůležitější vlastností textu je použitý font. Ten je možné získat různými
způsoby, například přečtením reference na výchozí font přiřazený
<strong>QPainteru</strong>:</p>

<pre>
<i># nastavení fontu</i>
font = qPainter.font()
font.setBold(True)
font.setPointSize(54)
qPainter.setFont(font)
</pre>

<p>Užitečnější bývá explicitní určení rodiny fontů, velikosti textu
(v&nbsp;typografických bodech), váhy (0 až 100%, určují se jí šířky tahů, tedy
laicky &bdquo;tučnost&ldquo;) a příznaku, zda chceme použít kurzívu nebo
skloněný text (pokud daná rodina kurzívu nemá):</p>

<pre>
<i># nastavení fontu</i>
font = QtGui.QFont("monospace", pointSize=54, weight=90, italic=True)
qp.setFont(font)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Osmý demonstrační příklad: vykreslení vycentrovaného textu</h2>

<p>V&nbsp;šestém příkladu je ukázán postup použitý pro vykreslení
vycentrovaného textu, resp.&nbsp;přesněji řečeno textu vycentrovaného
v&nbsp;zadaném obdélníku jak vertikálně, tak i horizontálně. Postup již známe,
takže jen velmi stručně (povšimněte si, že nenastavujeme styl ani velikost
fontu; budou použity výchozí hodnoty):</p>

<pre>
<i># obdélník, do kterého se text vypíše</i>
rect = QtCore.QRect(0, 0, MainWindow.IMAGE_WIDTH, MainWindow.IMAGE_HEIGHT)
&nbsp;
<i># zarovnání textu</i>
<i># - horizontální i vertikální vycentrování v rámci obdélníku</i>
align = QtCore.Qt.AlignHCenter | QtCore.Qt.AlignCenter
&nbsp;
<i># vykreslení textu</i>
qp.drawText(rect, align, "PySide")
</pre>

<img src="https://i.iinfo.cz/images/533/pyside10-9.png" class="image-319413" alt="&#160;" height="307" width="322" />
<p><i>Obrázek 9: Vycentrovaný text vykreslený do okna osmého příkladu.</i></p>

<p>Opět podle očekávání následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 320
    IMAGE_HEIGHT = 240
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># vykreslení textu</i>
&nbsp;
        <i># vytvoření pera a nastavení barvy kreslení</i>
        pen = QtGui.QPen(QtGui.QColor(255, 128, 128))
&nbsp;
        <i># změna šířky pera</i>
        pen.setWidth(1)
&nbsp;
        <i># kreslit se bude právě vytvořeným perem</i>
        qp.setPen(pen)
&nbsp;
        <i># obdélník, do kterého se text vypíše</i>
        rect = QtCore.QRect(0, 0,
                            MainWindow.IMAGE_WIDTH, MainWindow.IMAGE_HEIGHT)
&nbsp;
        <i># zarovnání textu</i>
        <i># - horizontální i vertikální vycentrování v rámci obdélníku</i>
        align = QtCore.Qt.AlignHCenter | QtCore.Qt.AlignCenter
&nbsp;
        <i># vykreslení textu</i>
        qp.drawText(rect, align, "PySide")
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Devátý demonstrační příklad: nastavení stylu a velikosti fontu</h2>

<p>V&nbsp;předposledním příkladu je ukázán způsob nastavení stylu a velikosti
fontu. Není to nic těžkého, pouze potřebujeme získat výchozí font a následně
změnit jeho vlastnosti. Konkrétně budeme požadovat tučný text a font o
velikosti 54 bodů (nikoli pixelů):</p>

<pre>
<i># nastavení fontu</i>
font = qp.font()
font.setBold(True)
font.setPointSize(54)
qp.setFont(font)
</pre>

<img src="https://i.iinfo.cz/images/533/pyside10-10.png" class="image-319414" alt="&#160;" height="307" width="322" />
<p><i>Obrázek 10: Vycentrovaný tučný text o velikosti 54 bodů vykreslený do
okna devátého příkladu.</i></p>

<p>Podívejme se na zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 320
    IMAGE_HEIGHT = 240
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># vykreslení textu</i>
&nbsp;
        <i># vytvoření pera a nastavení barvy kreslení</i>
        pen = QtGui.QPen(QtGui.QColor(255, 128, 128))
&nbsp;
        <i># změna šířky pera</i>
        pen.setWidth(1)
&nbsp;
        <i># kreslit se bude právě vytvořeným perem</i>
        qp.setPen(pen)
&nbsp;
        <i># nastavení fontu</i>
        font = qp.font()
        font.setBold(True)
        font.setPointSize(54)
        qp.setFont(font)
&nbsp;
        <i># obdélník, do kterého se text vypíše</i>
        rect = QtCore.QRect(0, 0,
                            MainWindow.IMAGE_WIDTH, MainWindow.IMAGE_HEIGHT)
&nbsp;
        <i># zarovnání textu</i>
        <i># - horizontální i vertikální vycentrování v rámci obdélníku</i>
        align = QtCore.Qt.AlignHCenter | QtCore.Qt.AlignCenter
&nbsp;
        <i># vykreslení textu</i>
        qp.drawText(rect, align, "PySide")
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Desátý demonstrační příklad: načtení fontu ze specifikované rodiny</h2>

<p>V&nbsp;posledním příkladu, který se dnes ukážeme, vytvoříme novou instanci
třídy <strong>QFont</strong>, přičemž v&nbsp;konstruktoru specifikujeme jak
rodinu fontu (zde &bdquo;monospace&ldquo;), tak i požadovanou velikost, váhu
(90%) a taktéž to, že budeme chtít použít kurzívu (pokud ji rodina fontů
nabízí) nebo skloněný text:</p>

<pre>
<i># nastavení fontu</i>
font = QtGui.QFont("monospace", pointSize=54, weight=90, italic=True)
qp.setFont(font)
</pre>

<img src="https://i.iinfo.cz/images/533/pyside10-11.png" class="image-319415" alt="&#160;" height="307" width="322" />
<p><i>Obrázek 11: Příklad použití fontu vybraného výše zmíněným
konstruktorem.</i></p>

<p>Opět se podívejme na zdrojový kód příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 320
    IMAGE_HEIGHT = 240
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># vykreslení textu</i>
&nbsp;
        <i># vytvoření pera a nastavení barvy kreslení</i>
        pen = QtGui.QPen(QtGui.QColor(255, 128, 128))
&nbsp;
        <i># změna šířky pera</i>
        pen.setWidth(1)
&nbsp;
        <i># kreslit se bude právě vytvořeným perem</i>
        qp.setPen(pen)
&nbsp;
        <i># nastavení fontu</i>
        font = QtGui.QFont("monospace", pointSize=54, weight=90, italic=True)
        qp.setFont(font)
&nbsp;
        <i># obdélník, do kterého se text vypíše</i>
        rect = QtCore.QRect(0, 0,
                            MainWindow.IMAGE_WIDTH, MainWindow.IMAGE_HEIGHT)
&nbsp;
        <i># zarovnání textu</i>
        <i># - horizontální i vertikální vycentrování v rámci obdélníku</i>
        align = QtCore.Qt.AlignHCenter | QtCore.Qt.AlignCenter
&nbsp;
        <i># vykreslení textu</i>
        qp.drawText(rect, align, "PySide")
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Obsah následující části seriálu</h2>

<p>V&nbsp;navazující části seriálu o tvorbě grafického uživatelského rozhraní
v&nbsp;Pythonu již opustíme téma 2D grafiky. Popíšeme si totiž další widgety,
jejichž chování je složitější, než chování základní sady widgetů (tlačítko,
seznam, textové pole, položka menu atd.). Framework PySide totiž programátorům
nabízí celou sadu komplikovanějších ovládacích prvků využitelných především
v&nbsp;klasických desktopových aplikacích.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech deseti dnes popsaných demonstračních příkladů byly opět,
podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>83_rectagonal_clip_region.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/83_rectagonal_clip_region.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/83_rectagonal_clip_region.py</a></td></tr>
<tr><td>84_bitmap_as_clip_region.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/84_bitmap_as_clip_region.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/84_bitmap_as_clip_region.py</a></td></tr>
<tr><td>85_region_set_ops.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/85_region_set_ops.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/85_region_set_ops.py</a></td></tr>
<tr><td>86_raster_ops.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/86_raster_ops.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/86_raster_ops.py</a></td></tr>
<tr><td>87_raster_ops_alpha.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/87_raster_ops_alpha.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/87_raster_ops_alpha.py</a></td></tr>
<tr><td>88_raster_ops_alpha_2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/88_raster_ops_alpha_2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/88_raster_ops_alpha_2.py</a></td></tr>
<tr><td>89_composition_mode.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/89_composition_mode.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/89_composition_mode.py</a></td></tr>
<tr><td>90_draw_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/90_draw_text.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/90_draw_text.py</a></td></tr>
<tr><td>91_font_style.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/91_font_style.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/91_font_style.py</a></td></tr>
<tr><td>92_font_constructor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/92_font_constructor.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/92_font_constructor.py</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

