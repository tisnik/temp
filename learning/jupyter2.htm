<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba grafů v Jupyter Notebooku s využitím knihovny Matplotlib</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba grafů v Jupyter Notebooku s využitím knihovny Matplotlib</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Jupyter Notebook, s nímž jsme se ve stručnosti seznámili v úterním článku, lze použít pro mnoho činností. Využívá se mj. i pro přípravu dat a tvorbu grafů. A právě přípravou grafů se budeme zabývat dnes.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba grafů v&nbsp;Jupyter Notebooku s využitím knihovny Matplotlib</a></p>
<p><a href="#k02">2. Vykreslení průběhů dvou funkcí do jediného grafu</a></p>
<p><a href="#k03">3. Změna stylu vykreslování a přidání legendy</a></p>
<p><a href="#k04">4. Vyplnění plochy pod funkcí</a></p>
<p><a href="#k05">5. Kombinace různých stylů vykreslování grafů</a></p>
<p><a href="#k06">6. Zobrazení mřížky a nastavení rozsahů na obou osách</a></p>
<p><a href="#k07">7. Přidání popisků do grafů</a></p>
<p><a href="#k08">8. Základní polární graf</a></p>
<p><a href="#k09">9. Vykreslení průběhů většího množství funkcí v&nbsp;polárním grafu</a></p>
<p><a href="#k10">10. Vyplnění plochy pod funkcí v&nbsp;polárním grafu</a></p>
<p><a href="#k11">11. Graf používající &bdquo;schodky&ldquo;</a></p>
<p><a href="#k12">12. Jednoduchý sloupcový graf</a></p>
<p><a href="#k13">13. Sloupcový graf se dvěma skupinami sloupců</a></p>
<p><a href="#k14">14. Zobrazení histogramu</a></p>
<p><a href="#k15">15. Koláčový graf</a></p>
<p><a href="#k16">16. Změna stylu vykreslování koláčových grafů</a></p>
<p><a href="#k17">17. Sloupcový graf se zobrazením odchylek (či chyb)</a></p>
<p><a href="#k18">18. Pokročilejší nastavení způsobu vykreslení odchylek</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady (diáři)</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba grafů v&nbsp;Jupyter Notebooku</h2>

<p>Na <a
href="https://github.com/asciidoctor/asciidoctor/blob/master/lib/asciidoctor/parser.rb">úvodní
článek</a> o nástroji <i>Jupyter Notebook</i> dnes navážeme. Ukážeme si totiž,
jakým způsobem je možné v&nbsp;tomto velmi užitečném nástroji vytvářet různé
typy grafů zobrazujících jak průběhy funkcí (výuka), tak i grafy založené na
načtených datech. A právě kombinace Jupyter Notebooku (interaktivita, možnost
opravit či upravit již zapsané příkazy v&nbsp;buňkách, vytváření slajdů)
společně s&nbsp;možností zobrazení grafů přímo ve vytvářeném diáři je velmi
silnou zbraní tohoto nástroje. Pro samotné vytvoření grafů se používá několik
knihoven, ovšem primární knihovnou (zejména pokud jsou diáře založeny na
programovacím jazyku Python) je stále knihovna nazvaná <i>Matplotlib</i>, která
se velmi dobře doplňuje s&nbsp;knihovnou <i>Numpy</i>, jež podporuje mj.&nbsp;i
efektivní operace s&nbsp;vektory a maticemi (grafy je možné i animovat, to však
vyžaduje poněkud více úsilí a jedná se o téma mimo rozsah dnešního článku).</p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-1.png" class="image-408046" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 1: Jeden typ grafu podporovaný knihovnou Matplotlib &ndash;
Funkce typu z=f(x,y) zobrazená formou vrstevnic.</i></p>

<p>Právě vzájemnou kombinací obou výše zmíněných knihoven, tedy
<i>Numpy+Matplotlib</i> lze relativně snadno dosáhnout velmi pěkných výsledků
plně porovnatelných s&nbsp;výsledky vytvořenými komerčními balíky.
V&nbsp;dnešním článku se seznámíme pouze se základy práce s&nbsp;knihovnou
<i>Matplotlib</i>. Nejprve si ukážeme tvorbu klasických grafů funkcí jedné
proměnné, následně do grafu přidáme průběh další funkce, popisky os, legendu,
popisky vlastních průběhů atd. V&nbsp;závěru si pak ukážeme další typy grafů,
zejména polární grafy, koláčové grafy, histogramy apod.</p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-2.png" class="image-408047" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 2: Podporována je i relativně široká skupina 3D grafů, což je
téma navazujícího článku.</i></p>

<p>V&nbsp;navazující části si pak ukážeme tvorbu grafů s&nbsp;konturami, 3D
grafů funkcí se dvěma nezávislými proměnnými, 3D grafů funkcí typu
<i>x,y=f(t)</i>, <i>x,y,z=f(t)</i> apod. Přesvědčíme se, že možnosti knihovny
<i>Matplotlib</i> jsou skutečně široké a přitom je její použití poměrně
jednoduché a snadno pochopitelné (pokud samozřejmě vynecháme některé
pokročilejší operace, popř.&nbsp;snahy o vyladění vzhledu grafu &ndash; to je
již mnohdy komplikovanější činnost).</p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-3.png" class="image-408048" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 3: Slavný Lorenzův atraktor vykreslený knihovnou Matplotlib.</i></p>

<p>Na úvod a jako malou rozcvičku si ukážeme velmi jednoduchý diář
(naprogramovaný v&nbsp;Pythonu 3), který po svém spuštění vykreslí graf
s&nbsp;průběhem funkce sinus. V&nbsp;diáři nalezneme pouze několik programových
řádků (ty lze rozdělit do buněk podle přání programátora). Nejprve je nutné
naimportovat hlavní modul knihovny <i>Numpy</i> nazvaný <strong>numpy</strong>
a následně i submodul <strong>plt</strong> z&nbsp;knihovny <i>Matplotlib</i>.
Většina aplikací, ale i demonstračních diářů, s&nbsp;nimiž se setkáte, používá
pro importované moduly zkratky <strong>np</strong> a <strong>plt</strong>,
čehož se z&nbsp;důvodu zachování konzistence budeme držet i my. Následně je
s&nbsp;využitím funkce <strong>numpy.linspace()</strong> vytvořeno pole sta
prvků s&nbsp;hodnotami od 0 do 2&pi;. Na toto pole je aplikována funkce
<strong>numpy.sin()</strong>, jejímž výsledkem je nové stoprvkové pole (hodnoty
prvků leží v&nbsp;rozsahu od -1 do 1). Funkcí
<strong>matplotlib.pyplot.plot()</strong> je vykreslen průběh funkce, ovšem
graf ještě není zobrazen, takže do něj můžeme přidat popis obou os a graf
následně zobrazit příkazem <strong>matplotlib.pyplot.show()</strong>.</p>

<a href="https://www.root.cz/obrazek/408028/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-1-prev.png" class="image-408028" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 4: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-4.png" class="image-408049" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 5: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># První demonstrační příklad:</i>
<i># - vykreslení průběhu funkce sin</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose</i>
y = np.sin(x)
&nbsp;
<i># vykreslit průběh funkce</i>
plt.plot(x, y)
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sin(x)")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vykreslení průběhů dvou funkcí do jediného grafu</h2>

<p>Velmi často se můžeme setkat i s&nbsp;požadavkem vložení průběhů několika
funkcí do jediného grafu. V&nbsp;tomto ohledu knihovna <i>Matplotlib</i> svým
uživatelům nabízí větší množství řešení. Je například možné do jednoho obrázku
či dokumentu vložit více grafů s&nbsp;totožnou x-ovou osou (a většinou odlišným
měřítkem na y-ových osách), popř.&nbsp;lze skutečně sloučit větší množství
průběhů v&nbsp;jediném grafu. Ukažme si nejdříve druhou zmiňovanou možnost,
tj.&nbsp;vytvoření grafu se dvěma funkcemi, ovšem s&nbsp;totožnými x-ovými a
y-ovými osami (to není vždy ideální řešení). I u takto vytvořeného grafu můžeme
použít již zmíněnou funkci <strong>matplotlib.pyplot.plot()</strong>, které se
ovšem předají čtyři pole: hodnoty na ose x, hodnoty první funkce, opět hodnoty
na ose x (pro nás stejné pole) a hodnoty druhé funkce. Žádné další operace
nejsou zapotřebí, což je ostatně patrné i při pohledu na zdrojový kód dalšího
jednoduchého diáře:</p>

<a href="https://www.root.cz/obrazek/408029/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-2-prev.png" class="image-408029" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 5: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-5.png" class="image-408050" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 6: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Druhý demonstrační příklad:</i>
<i># - vykreslení průběhů funkcí sin a cos</i>
<i>#   do jediného grafu</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose: první funkce</i>
y1 = np.sin(x)
&nbsp;
<i># hodnoty na y-ové ose: druhá funkce</i>
y2 = np.cos(x)
&nbsp;
<i># vykreslit průběh obou funkcí</i>
plt.plot(x, y1, x, y2)
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sin(x) a cos(x)")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Změna stylu vykreslování a přidání legendy</h2>

<p>Při pohledu na graf vykreslený na předchozím diáři je patrné, že knihovna
<i>Matplotlib</i> automaticky zvolila pro průběh každé funkce odlišnou barvu,
ovšem styl vykreslení (šířka čáry atd.) zůstal stejný. Pokud budeme potřebovat
ovlivnit styl vykreslování průběhů funkcí, lze to samozřejmě zařídit a to
poměrně jednoduše. Funkci <strong>matplotlib.pyplot.plot()</strong> je totiž
možné předat nepovinný (a nepojmenovaný) parametr typu řetězec, v&nbsp;němž je
&bdquo;zakódována&ldquo; jak barva (první písmeno anglického názvu barvy), tak
i styl vykreslování (-- je plná čára, - čárkovaná čára, . tečkovaná čára
apod.). Dalším nepovinným parametrem, tentokrát již pojmenovaným, je parametr
&bdquo;label&ldquo;, pomocí něhož je možné libovolný průběh funkce označit
jménem. Toto jméno se následně použije například v&nbsp;legendě přidané do
grafu funkcí <strong>matplotlib.pyplot.legend()</strong>. Nepovinným
pojmenovaným parametrem <strong>loc</strong> se popíše, do kterého místa grafu
se má legenda vložit:</p>

<a href="https://www.root.cz/obrazek/408030/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-3-prev.png" class="image-408030" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 7: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-6.png" class="image-408051" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 8: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Třetí demonstrační příklad:</i>
<i># - vykreslení průběhů funkcí sin a cos a sinc</i>
<i>#   do jediného grafu</i>
<i># - změna stylu vykreslování průběhů funkcí</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0.01, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose: první funkce</i>
y1 = np.sin(x)
&nbsp;
<i># hodnoty na y-ové ose: druhá funkce</i>
y2 = np.cos(x)
&nbsp;
<i># hodnoty na y-ové ose: třetí funkce</i>
y3 = np.sin(x)/x
&nbsp;
<i># vykreslit průběh všech tří funkcí</i>
<i># se změnou stylu vykreslování</i>
plt.plot(x, y1, "b-", label="sin")
plt.plot(x, y2, "r.", label="cos")
plt.plot(x, y3, "g--", label="sinc")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="lower left")
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sin(x), cos(x) a sinc(x)")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vyplnění plochy pod funkcí</h2>

<p>V&nbsp;případě, že se namísto funkce
<strong>matplotlib.pyplot.plot()</strong> použije pro vykreslení grafu funkce
pojmenovaná <strong>matplotlib.pyplot.fill()</strong>, změní se poměrně
zásadním způsobem styl vykreslení. Namísto (lomené) čáry se totiž plocha pod
funkcí vyplní konstantní barvou. Tu je možné zadat slovně, například "red",
"yellow" atd. Ovšem ve chvíli, kdy se funkce překrývají, by dříve vykreslený
průběh nebyl viditelný, protože by jedna barevná plocha překreslila plochu
druhou. Abychom tomuto problému předešli, stačí knihovně <i>matplotlib</i>
předepsat průhlednost barvy v&nbsp;rozsahu 0.0 až 1.0. Konkrétně to znamená, že
při požadavku na vykreslení dvou funkcí a použití barev s&nbsp;průhledností 30%
můžeme zadat příkaz <strong>plt.fill(x, y1, "red", x, y2, "yellow",
alpha=0.3)</strong>. Podívejme se na úplné znění zdrojového kódu dalšího diáře,
v&nbsp;němž je tento příkaz použit:</p>

<a href="https://www.root.cz/obrazek/408031/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-4-prev.png" class="image-408031" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 9: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-7.png" class="image-408052" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 10: Výsledný graf.</i></p>

<p><div class="rs-tip-major">Poznámka: kromě průhlednosti je možné pořadí
vykreslování funkcí otočit.</div></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Čtvrtý demonstrační příklad:</i>
<i># - vykreslení průběhů funkcí sin a sinc</i>
<i>#   do jediného grafu</i>
<i>#   s vyplněním plochy pod průběhu</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose: první funkce</i>
y1 = np.sin(x)
&nbsp;
<i># hodnoty na y-ové ose: druhá funkce</i>
y2 = np.sin(3*x)/(x+1)
&nbsp;
<i># vykreslit průběh obou funkcí</i>
<i># se změnou stylu vykreslování</i>
plt.fill(x, y1, "red", x, y2, "yellow", alpha=0.3)
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sin(x) a sinc(3x)")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Kombinace různých stylů vykreslování grafů</h2>

<p>V&nbsp;knihovně <i>Matplotlib</i> je v&nbsp;případě potřeby možné jednotlivé
příkazy pro vykreslení funkcí vzájemně kombinovat. V&nbsp;dalším demonstračním
diáři je vykreslena funkce <i>sinus</i>, dále pak známá funkce <i>sinc</i>
(s&nbsp;posunutou osou) a následně dva průběhy funkcí, které vlastně tvoří
obálku <i>sinc</i>. Funkce <i>sinus</i> i <i>sinc</i> jsou vykresleny takovým
(vhodně naaranžovaným) způsobem, že je plocha pod průběhem funkce vyplněna,
zatímco obálky jsou pouze naznačeny čárkovanými čarami. Legenda se navíc
přesunula do pravého horního rohu, kde je pro ni mnohem více místa, což je více
patrné na zvětšeném grafu:</p>

<a href="https://www.root.cz/obrazek/408032/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-5-prev.png" class="image-408032" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 11: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-8.png" class="image-408053" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 12: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Pátý demonstrační příklad:</i>
<i># - vykreslení průběhů čtyř různých funkcí</i>
<i>#   do jediného grafu</i>
<i>#   s vyplněním plochy pod průběhu</i>
<i># - kombinace různých stylů vykreslení</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0.001, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose: první funkce</i>
y1 = np.sin(5*x)
&nbsp;
<i># hodnoty na y-ové ose: druhá funkce</i>
y2 = np.sin(5*x)/(x+1/2)
&nbsp;
<i># hodnoty na y-ové ose: třetí čtvrtá funkce</i>
y3 = 1/(x+1/2)
y4 = -y3
&nbsp;
<i># vykreslit průběh obou funkcí</i>
<i># se změnou stylu vykreslování</i>
plt.fill(x, y1, "yellow", alpha=0.3, label="sin x")
plt.fill(x, y2, "r.", alpha=1.0, label="sinc 5x")
plt.plot(x, y3, "g--", label="obalka sinc")
plt.plot(x, y4, "g--", label="obalka sinc")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper right")
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sin(x) a sinc(3x)")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení mřížky a nastavení rozsahů na obou osách</h2>

<p>Doposud nakreslené grafy ve skutečnosti nevypadaly příliš profesionálně, a
to mj.&nbsp;i proto, že bylo poměrně obtížné rozeznat počátek souřadnic
(souřadného systému) atd. Poměrně snadno je možné tento nedostatek napravit, a
to konkrétně přidáním mřížky příkazem
<strong>matplotlib.pyplot.grid(True)</strong>. Navíc ještě můžeme zvětšit
oblast grafu s&nbsp;využitím <strong>matplotlib.pyplot.axis([-1, 8, -1.5,
1.5])</strong>, kde čtveřice čísel značí postupně x<sub>min</sub>,
x<sub>max</sub>, y<sub>min</sub> a y<sub>max</sub> (přesněji řečeno se nezvětší
samotný obrázek s&nbsp;grafem, ale dojde ke změně jeho měřítka). Vlastní průběh
funkce tedy přestane zasahovat do samotných hranic grafu, takže nový výsledek
vypadá mnohem lépe:</p>

<a href="https://www.root.cz/obrazek/408033/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-6-prev.png" class="image-408033" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 13: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-9.png" class="image-408054" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 14: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Šestý demonstrační příklad:</i>
<i># - vykreslení průběhů funkcí sin a cos</i>
<i># - nastavení mřížky</i>
<i># - nastavení rozsahů na obou osách</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose: první funkce</i>
y1 = np.sin(x)
&nbsp;
<i># hodnoty na y-ové ose: druhá funkce</i>
y2 = np.cos(x)
&nbsp;
<i># vykreslit průběh obou funkcí</i>
<i># se změnou stylu vykreslování</i>
plt.plot(x, y1, "b-", label="sin")
plt.plot(x, y2, "r-", label="cos")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="lower left")
&nbsp;
<i># nastavení rozsahů na obou osách</i>
plt.axis([-1, 8, -1.5, 1.5])
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sin(x) a cos(x)")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Přidání popisků do grafů</h2>

<p>Nyní se již dostáváme k&nbsp;poněkud složitějšímu úkolu. Předpokládejme, že
je do grafu se dvěma funkcemi zapotřebí přidat popisky se šipkami ukazujícími
na určité místo na křivce. Výsledek by měl vypadat nějak takto:</p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-10.png" class="image-408055" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 15: Graf s&nbsp;přidanými popiskami.</i></p>

<p>Průběhy obou funkcí si necháme vykreslit nám již známým způsobem, zde tedy
k&nbsp;žádné podstatné změně nedojde. Ovšem pro přidání popisků již musíme
použít novou funkci, konkrétně funkci pojmenovanou
<strong>matplotlib.pyplot.annotate()</strong>. Této funkci se předá jeden
nepojmenovaný parametr s&nbsp;popiskem, tj.&nbsp;například "maximální hodnota
sin(x)". Dále budou následovat pojmenované parametry, konkrétně parametr se
jménem <strong>xy</strong> a přesnou souřadnicí vrcholu šipky (tj.&nbsp;místa,
kam šipka míří), dále pak parametr se jménem <strong>xytext</strong>, jehož
hodnotou je souřadnice umístění textu (n-tice) a posledním parametrem je
parametr s&nbsp;názvem <strong>arrowprops</strong> (<i>properties</i>), přes
nějž nastavíme styl vykreslené šipky.</p>

<p>Do grafu ve skutečnosti vložíme dva popisky, což je ostatně patrné
z&nbsp;výpisu zdrojového kódu tohoto diáře:</p>

<a href="https://www.root.cz/obrazek/408034/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-7-prev.png" class="image-408034" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 16: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Sedmý demonstrační příklad:</i>
<i># - vykreslení průběhů funkcí sin a cos</i>
<i># - nastavení mřížky</i>
<i># - nastavení rozsahů na obou osách</i>
<i># - přidání popisku přímo do grafu</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose: první funkce</i>
y1 = np.sin(x)
&nbsp;
<i># hodnoty na y-ové ose: druhá funkce</i>
y2 = np.cos(x)
&nbsp;
<i># vykreslit průběh obou funkcí</i>
<i># se změnou stylu vykreslování</i>
plt.plot(x, y1, "b-", label="sin")
plt.plot(x, y2, "r-", label="cos")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="lower left")
&nbsp;
<i># nastavení rozsahů na obou osách</i>
plt.axis([-1, 8, -1.5, 1.5])
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sin(x) a cos(x)")
&nbsp;
<i># vložit první popisek do grafu</i>
plt.annotate("maximální hodnota sin(x)",
             xy=(np.pi/2, 1.0),
             xytext=(1, 1.3),
             arrowprops=dict(arrowstyle="->"))
&nbsp;
<i># vložit druhý popisek do grafu</i>
plt.annotate("minimální hodnota cos(x)",
             xy=(np.pi, -1.0),
             xytext=(2, -1.3),
             arrowprops=dict(arrowstyle="->"))
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Základní polární graf</h2>

<p>Pokud je zapotřebí vykreslit polární graf, je možné postupovat následujícím
způsobem. Nejprve se plocha obrázku či dokumentu určená pro vykreslení grafu
rozdělí do pomyslné mřížky o velikosti 1&times;1 buňka. Do této mřížky se
funkcí <strong>matplotlib.pyplot.subplot()</strong> vloží
&bdquo;podgraf&ldquo;, u něhož se pojmenovaným parametrem
<strong>projection</strong> specifikuje použitá projekce. Magická konstanta 111
při volání této funkce značí, že se skutečně má vytvořit mřížka 1&times;1 buňka
a podgraf se má vložit do této buňky (ta má index 1). Další vykreslování již
vlastně známe, ovšem s&nbsp;tím nepatrným rozdílem, že se nevolá funkce
<strong>matplotlib.pyplot.plot()</strong>, ale metoda objektu získaného výše
zmíněnou funkcí <strong>matplotlib.pyplot.subplot()</strong>. Dále si
povšimněte toho, že namísto polí pojmenovaných <strong>x</strong> a
<strong>y</strong> používáme pole hodnot se jmény <strong>theta</strong> a
<strong>radius</strong>, což se pro tento typ grafu hodí mnohem více:</p>

<a href="https://www.root.cz/obrazek/408035/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-8-prev.png" class="image-408035" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 17: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-11.png" class="image-408056" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 18: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Osmý demonstrační příklad:</i>
<i># - základní polární graf</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># úhel v polárním grafu</i>
theta = np.linspace(0.01, 2*np.pi, 150)
&nbsp;
<i># vzdálenost od středu</i>
radius = np.log(theta)
&nbsp;
ax = plt.subplot(111, projection="polar")
&nbsp;
<i># vykreslit průběh funkce</i>
<i># v polárním grafu</i>
ax.plot(theta, radius)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vykreslení průběhů většího množství funkcí v&nbsp;polárním grafu</h2>

<p>Podobně, jako tomu bylo u normálního grafu se dvěma na sebe kolmými osami, i
v&nbsp;polárním grafu je možné současně zobrazit větší množství průběhů funkcí;
postačuje pouze volat několikrát metodu <strong>plot</strong> objektu získaného
voláním funkce <strong>matplotlib.pyplot.subplot()</strong>. Taktéž je možné
specifikovat styl zobrazení průběhu jednotlivých funkcí, pojmenovat daný průběh
(resp.&nbsp;přesněji řečeno mu přiřadit jméno) apod. V&nbsp;dnešním
předposledním demonstračním příkladu jsou v&nbsp;polárním grafu zobrazeny
průběhy tří funkcí &ndash; dvě funkce vytvoří spirálu (první je lineární, druhá
pak logaritmická), třetí funkce má v&nbsp;polárním grafu tvar srdce. Podívejme
se na zdrojový kód tohoto diáře:</p>

<a href="https://www.root.cz/obrazek/408036/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-9-prev.png" class="image-408036" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 19: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-12.png" class="image-408057" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 20: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Devátý demonstrační příklad:</i>
<i># - vykreslení průběhů několika funkcí</i>
<i># - do polárního grafu</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># úhel v polárním grafu</i>
theta = np.linspace(0.01, 2*np.pi, 150)
&nbsp;
<i># první funkce: vzdálenost od středu</i>
radius1 = theta
&nbsp;
<i># druhá funkce: vzdálenost od středu</i>
radius2 = 2*np.abs(theta-np.pi)
&nbsp;
<i># třetí funkce: vzdálenost od středu</i>
radius3 = 2*np.log(theta)
&nbsp;
ax = plt.subplot(111, projection="polar")
&nbsp;
<i># vykreslit průběh první funkce</i>
<i># v polárním grafu</i>
ax.plot(theta, radius1, "r.", label="f1")
&nbsp;
<i># vykreslit průběh druhé funkce</i>
<i># v polárním grafu</i>
ax.plot(theta, radius2, "g", label="f2")
&nbsp;
<i># vykreslit průběh třetí funkce</i>
<i># v polárním grafu</i>
ax.plot(theta, radius3, "b--", label="f3")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="lower left")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vyplnění plochy pod funkcí v&nbsp;polárním grafu</h2>

<p>I funkce, jejichž průběh má být vykreslen v&nbsp;polárním grafu, mohou být
pod svou křivkou vyplněny, postačuje pouze namísto metody nazvané
<strong>plot()</strong> zavolat metodu pojmenovanou <strong>fill()</strong>.
Většinou je navíc nutné u vyplněného průběhu funkce specifikovat kromě barvy i
průhlednost vykreslované plochy (v&nbsp;našem případě bude nastavena na 30%).
V&nbsp;dalším diáři jsou vykresleny dvě funkce, jedna s&nbsp;použitím metody
<strong>plot()</strong>, druhá pak pomocí <strong>fill()</strong>. Navíc si
povšimněte další zajímavé vlastnosti &ndash; pole <strong>theta</strong>
obsahující úhly je naplněno prvky s&nbsp;hodnotami od 0 až do 4&pi;. Co to
znamená v&nbsp;praxi? &ndash; z&nbsp;pohledu na obrázek s&nbsp;grafem je
patrné, že jsou zobrazeny dvě celé otočky spirály, protože 4&pi; rad odpovídá
720&deg;:</p>

<a href="https://www.root.cz/obrazek/408037/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-10-prev.png" class="image-408037" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 21: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-13.png" class="image-408058" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 22: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Desátý demonstrační příklad:</i>
<i># - vykreslení průběhů několika funkcí</i>
<i># - do polárního grafu</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># úhel v polárním grafu</i>
theta = np.linspace(0.01, 4*np.pi, 150)
&nbsp;
<i># první funkce: vzdálenost od středu</i>
radius1 = theta
&nbsp;
<i># druhá funkce: vzdálenost od středu</i>
radius2 = 3*np.abs(theta-2*np.pi)
&nbsp;
ax = plt.subplot(111, projection="polar")
&nbsp;
<i># vykreslit průběh první funkce</i>
<i># v polárním grafu</i>
ax.plot(theta, radius2, "b", label="f1")
&nbsp;
<i># vykreslit průběh druhé funkce</i>
<i># v polárním grafu</i>
ax.fill(theta, radius1, "yellow", alpha=0.3, label="f1")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="lower left")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Graf používající &bdquo;schodky&ldquo;</h2>

<p>V&nbsp;některých případech nám nemusí výše popsaný způsob vykreslení průběhů
funkcí vyhovovat. Knihovna <i>Matplotlib</i> nám samozřejmě vychází vstříc,
protože nabízí i další styly vykreslování, přičemž poměrně zajímavý a užitečný
styl je založen na vykreslení &bdquo;schodů&ldquo;. Jedná se vlastně o
přechodový typ grafu, v&nbsp;němž se sice stále vykresluje (spojitá) křivka,
ovšem její tvar se již začíná podobat sloupcovému grafu (to je někdy poměrně
důležité, protože můžeme naznačit například vzorkování apod.). Použití
&bdquo;schodků&ldquo; je vlastně velmi jednoduché, protože do příkazu pro
vykreslení průběhu jedné funkce postačuje doplnit pojmenovaný parametr
<strong>drawstyle</strong> a přiřadit mu hodnotu <strong>default</strong>:</p>

<p>Podívejme se na jednoduchý demonstrační příklad, v&nbsp;němž se
v&nbsp;jednom grafu kombinují oba dva způsoby vykreslování &ndash; obálky
funkce <i>sinc</i> jsou vykresleny lomenou čarou zatímco samotná funkce
<i>sinc</i> je vykreslena s&nbsp;využitím &bdquo;schodů&ldquo;. Parametr
<strong>drawstyle</strong> lze samozřejmě vynechat ve chvíli, kdy je mu
přiřazena hodnota &bdquo;default&ldquo;:</p>

<a href="https://www.root.cz/obrazek/408038/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-11-prev.png" class="image-408038" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 23: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-14.png" class="image-408059" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 24: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Dvanáctý demonstrační příklad:</i>
<i># - vykreslení průběhu funkce sinc</i>
<i># - při vykreslování se použijí "schodky"</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0.2, 2*np.pi, 100)
&nbsp;
<i># hodnoty na y-ové ose</i>
y = np.sin(5*x)/x
y2 = 1/x
y3 = -y2
&nbsp;
<i># vykreslit průběh funkce</i>
plt.plot(x, y2, color='red',  label='obalka sinc', drawstyle='default')
plt.plot(x, y3, color='red',  label='obalka sinc', drawstyle='default')
plt.plot(x, y,  color='blue', label='sinc(x)',     drawstyle='steps')
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># popis os</i>
plt.xlabel("x")
plt.ylabel("sinc(x)")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="lower right")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Jednoduchý sloupcový graf</h2>

<p>Nyní se již dostáváme k&nbsp;dalšímu populárnímu a velmi často používanému
typu grafu. Jedná se o sloupcový graf, přičemž sloupce (odpovídající naměřeným
nebo vypočteným hodnotám) mohou být buď vodorovné nebo &ndash; a to častěji
&ndash; svislé. Pro tvorbu sloupcového grafu se používají funkce
<strong>matplotlib.pyplot.bar()</strong> (sloupce jsou svislé)
popř.&nbsp;<strong>matplotlib.pyplot.barh()</strong> (sloupce jsou vodorovné).
První dva parametry těchto funkcí jsou povinné &ndash; v&nbsp;obou případech se
jedná o pole, přičemž první pole obsahuje x-ové souřadnice sloupců (většinou se
tedy jedná o pole vytvořené příkazem
<strong>numpy.arange(počet_prvků)</strong>) a pole druhé obsahuje výšky
sloupců. Třetí parametr je nepovinný, ovšem poměrně důležitý, protože obsahuje
relativní šířku sloupců. Tu můžeme zadat buď skalární hodnotou (což je obvyklé
řešení) nebo taktéž pomocí pole. To znamená, že je možné vykreslit graf se
sloupci, které mají rozdílnou šířku.</p>

<p>Pro demonstrační příklad na vykreslení sloupcového grafu jsem vybral reálná
data. Konkrétně se jedná o (v&nbsp;době vydaní článku již historické) ceny ropy
uvedené v&nbsp;dolarech za barel (předevčírem by graf musel zobrazit záporné
hodnoty). Při vykreslování byly funkci <strong>matplotlib.pyplot.bar()</strong>
předány tři nepovinné parametry určující barvu výplně sloupců, barvu okrajů
sloupců a popisek datové řady:</p>

<a href="https://www.root.cz/obrazek/408039/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-12-prev.png" class="image-408039" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 25: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-15.png" class="image-408060" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 26: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Třináctý demonstrační příklad:</i>
<i># - jednoduchý sloupcový graf</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># historické ceny ropy</i>
cena_ropy = [
    46.68, 44.68, 46.90, 47.15, 44.59, 44.00, 44.63, 45.92, 44.15, 45.94,
    46.05, 46.75, 46.25, 45.41, 49.20, 45.22, 42.56, 38.60, 39.31, 38.24,
    40.45, 41.32, 40.80, 42.62, 41.87, 42.50, 42.23, 43.30, 43.08, 44.96,
    43.87, 44.66, 45.15, 47.12, 48.52, 48.79, 47.98, 47.39, 48.14, 48.45]
&nbsp;
<i># počet prvků</i>
N = len(cena_ropy)
&nbsp;
<i># indexy prvků</i>
indexes = np.arange(N)
&nbsp;
<i># šířka sloupců</i>
width = 1.00
&nbsp;
<i># sloupcový graf</i>
plt.bar(indexes, cena_ropy, width, color='yellow', edgecolor='black',
        label='Cena ropy')
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="lower right")
nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Sloupcový graf se dvěma skupinami sloupců</h2>

<p>Popišme si, co se stane ve chvíli, kdy se pokusíme do jediného grafu
vykreslit dvě datové řady. Předpokládejme, že hodnoty první datové řady jsou
uloženy v&nbsp;poli <strong>vals1</strong>, hodnoty řady druhé pak v&nbsp;poli
pojmenovaném <strong>vals2</strong>. Indexy, tj.&nbsp;vlastně x-ové souřadnice
sloupců, jsou shodné. Takto navržený graf nám v&nbsp;mnoha případech
pochopitelně nebude vyhovovat. Řešení je však jednoduché &ndash; postačuje
posunout sloupce pro druhou (třetí, čtvrtou ...) řadu doprava. To se provede
jednoduše přičtením skalární hodnoty k&nbsp;poli <strong>indexes</strong>. Proč
toto řešení bude funkční? V&nbsp;knihovně <i>Numpy</i> byl pro operace
s&nbsp;poli (vektory, maticemi) přetížen operátor +, který zadanou skalární
hodnotu přičte ke všem prvkům.</p>

<a href="https://www.root.cz/obrazek/408040/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-13-prev.png" class="image-408040" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 27: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-16.png" class="image-408061" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 28: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Čtrnáctý demonstrační příklad:</i>
<i># - sloupcový graf se dvěma skupinami sloupců</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># první pole hodnot</i>
vals1 = [10, 15, 20, 12, 14, 8]
&nbsp;
<i># druhé pole hodnot</i>
vals2 = [19, 18,  6, 11,  6, 14]
&nbsp;
<i># počet prvků</i>
N = len(vals1)
&nbsp;
<i># indexy prvků</i>
indexes = np.arange(N)
&nbsp;
<i># šířka sloupců</i>
width = 0.30
&nbsp;
<i># sloupcový graf se dvěma skupinami sloupců</i>
plt.bar(indexes, vals1, width, color='gray', edgecolor='black', label='CPU#1')
<i># posunuté sloupce</i>
plt.bar(indexes+width, vals2, width, color='red', edgecolor='black',
        label='CPU#2')
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="lower right")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zobrazení histogramu</h2>

<p>Dalším typem grafu, který je možné při použití knihovny <i>Matplotlib</i>
použít, je histogram. Ten se vykresluje funkcí pojmenovanou logicky
<strong>matplotlib.pyplot.hist()</strong>. Povinným parametrem jsou podle
očekávání data, která se mají do histogramu vykreslit, ovšem funkce
<strong>matplotlib.pyplot.hist()</strong> podporuje i další nepovinné
parametry, zejména parametr <strong>normed</strong> řídicí normalizaci
histogramu. Dalším mnohdy důležitým nepovinným parametrem je
<strong>bins</strong>, jehož hodnotou se řídí šířka intervalů (tříd),
tj.&nbsp;nepřímo počet sloupců v&nbsp;histogramu. Podívejme se na několik
ukázek, z&nbsp;nichž bude použití nepovinného parametru <strong>bins</strong>
patrné:</p>

<a href="https://www.root.cz/obrazek/408041/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-14-prev.png" class="image-408041" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 29: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-17.png" class="image-408062" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 30: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Patnáctý demonstrační příklad:</i>
<i># - jednoduchý histogram</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># náhodné hodnoty</i>
y = np.random.normal(0, 0.1, 10000)
&nbsp;
plt.hist(y, bins=30, range=None, density=True)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Koláčový graf</h2>

<p>Dalším typem grafu, s&nbsp;nímž se v&nbsp;dnešním článku seznámíme, jsou
takzvané koláčové grafy, které již každý čtenář zcela jistě viděl. Tyto typy
grafů se používají v&nbsp;případě, že nás nezajímají absolutní hodnoty, ale
hodnoty relativní, konkrétně vzájemné poměry. Nejprve se podívejme, jak může
koláčový graf vykreslený knihovnou Matplotlib vypadat. V&nbsp;grafu je
zobrazeno zastoupení skriptovacích jazyků, přičemž nás nyní nezajímá,
v&nbsp;kolika projektech se jednotlivé jazyky použily, ale jaké jsou poměry
tohoto zastoupení:</p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-18.png" class="image-408063" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 31: Výsledný graf.</i></p>

<p>Při vykreslení koláčového grafu můžeme použít přímo funkci
<strong>matplotlib.pyplot.pie()</strong>, popř.&nbsp;lze použít podobný postup,
jakým jsme o několik kapitol výše vykreslili polární graf. Důležitý je
především fakt, že koláčovému grafu můžeme předat pole s&nbsp;libovolnými
hodnotami, nemusí se tedy jednat ani o procentuální poměry (se součtem 100%)
ani o relativní hodnoty (se součtem 1.00). Knihovna Matplotlib si
z&nbsp;předaných hodnot poměry vypočte automaticky. Dále si povšimněte použití
nepovinného pojmenovaného parametru <strong>labels</strong> (s&nbsp;popisem
jednotlivých výřezů) a parametru <strong>shadow</strong>, kterým se povoluje či
zakazuje zobrazení 3D stínu:</p>

<a href="https://www.root.cz/obrazek/408042/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-15-prev.png" class="image-408042" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 32: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Šestnáctý demonstrační příklad:</i>
<i># - koláčový graf</i>
&nbsp;
from matplotlib import pyplot as plt
from matplotlib import font_manager as fm
&nbsp;
<i># make a square figure and axes</i>
fig = plt.figure(1, figsize=(6, 6), dpi=50)
ax = fig.add_axes([0.16, 0.16, 0.68, 0.68])
&nbsp;
plt.title("Scripting languages")
ax.title.set_fontsize(30)
&nbsp;
<i># popisky jednotlivých výřezů</i>
labels = ['Perl', 'Python', 'Ruby']
&nbsp;
<i># šířky jednotlivých výřezů</i>
fracs = [90, 150, 70]
&nbsp;
<i># vytvoření koláčového grafu</i>
ax.pie(fracs, labels=labels, autopct='%1.1f%%', shadow=True)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Změna stylu vykreslování koláčových grafů</h2>

<p>Koláčové grafy je samozřejmě možné upravovat. V&nbsp;této kapitole si
ukážeme, jak se v&nbsp;grafu změní barvy jednotlivých výřezů a jak se jeden
(nebo v&nbsp;případě potřeby i větší množství) výřezů &bdquo;vysune&ldquo; od
středové osy. Výsledkem bude následující obrázek:</p>

<p>Změnu velikosti nadpisu zařizuje metoda <strong>set_fontsize()</strong>,
změnu stylu písma pak kombinace <strong>set_size()</strong> společně
s&nbsp;nastavením vlastností (<i>properties</i>) písma. Pravděpodobně
nejdůležitější je však nepovinný parametr <strong>explode</strong> funkce
<strong>matplotlib.pyplot.pie()</strong>, kterému se předá pole
s&nbsp;relativními hodnotami určujícími míru vysunutí jednotlivých řezů:</p>

<a href="https://www.root.cz/obrazek/408043/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-16-prev.png" class="image-408043" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 33: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-19.png" class="image-408064" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 34: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Sedmnáctý demonstrační příklad:</i>
<i># - změna stylu koláčových grafů</i>
&nbsp;
from matplotlib import pyplot as plt
from matplotlib import font_manager as fm
&nbsp;
&nbsp;
<i># make a square figure and axes</i>
fig = plt.figure(1, figsize=(6, 6), dpi=50)
ax = fig.add_axes([0.16, 0.16, 0.68, 0.68])
&nbsp;
plt.title("Scripting languages")
ax.title.set_fontsize(30)
&nbsp;
<i># popisky jednotlivých výřezů</i>
labels = ['Perl', 'Python', 'Ruby']
&nbsp;
<i># šířky jednotlivých výřezů</i>
fracs = [90, 150, 70]
&nbsp;
<i># vytáhnutí výřezů</i>
explode = (0.0, 0.0, 0.15)
&nbsp;
<i># barvy</i>
colors = ('yellow', '#60ff60', 'red')
&nbsp;
<i># vytvoření koláčového grafu</i>
patches, texts, autotexts = ax.pie(fracs, explode=explode, colors=colors,
                                   labels=labels, autopct='%1.1f%%',
                                   shadow=True)
&nbsp;
<i># změna stylu písma</i>
proptease = fm.FontProperties()
proptease.set_size('xx-large')
plt.setp(autotexts, fontproperties=proptease)
plt.setp(texts, fontproperties=proptease)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Sloupcový graf se zobrazením odchylek (či chyb)</h2>

<p>Vraťme se ještě na chvíli ke sloupcovým grafům. V&nbsp;některých případech
je nutné ke sloupcům přidat i povolené odchylky či chyby. I to je samozřejmě
možné, a to díky existenci nepovinného pojmenovaného parametru
<strong>yerr</strong>, kterému se předá buď skalární hodnota nebo pole o stejné
délce, jakou má samotné vstupní pole hodnot. Podívejme se na způsob úpravy
sloupcového grafu se dvěma datovými řadami o zobrazení odchylek. Tyto odchylky
jsou uloženy v&nbsp;polích <strong>delta1</strong> a
<strong>delta2</strong>:</p>

<a href="https://www.root.cz/obrazek/408044/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-17-prev.png" class="image-408044" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 35: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-20.png" class="image-408065" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 36: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Osmnáctý demonstrační příklad:</i>
<i># - sloupcový graf se dvěma skupinami sloupců</i>
<i>#   a se zobrazením odchylek</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># první pole hodnot a pole odchylek</i>
vals1 = [10, 15, 20, 12, 14, 8]
delta1 = [1, 2, 3, 4, 5, 0]
&nbsp;
<i># druhé pole hodnot a pole odchylek</i>
vals2 = [19, 18,  6, 11,  6, 14]
delta2 = [4, 2, 3, 2, 2, 4]
&nbsp;
<i># počet prvků</i>
N = len(vals1)
&nbsp;
<i># indexy prvků</i>
indexes = np.arange(N)
&nbsp;
<i># šířka sloupců</i>
width = 0.30
&nbsp;
<i># sloupcový graf se dvěma skupinami sloupců</i>
plt.bar(indexes, vals1, width, color='gray', edgecolor='black', label='CPU#1',
        yerr=delta1)
&nbsp;
<i># posunuté sloupce</i>
plt.bar(indexes+width, vals2, width, color='red', edgecolor='black',
        label='CPU#2', yerr=delta2)
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="lower right")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Pokročilejší nastavení způsobu vykreslení odchylek</h2>

<p>Pokud budeme potřebovat změnit styl vykreslení odchylek/chyb, záhy zjistíme,
že funkce <strong>matplotlib.pyplot.pie()</strong> nemá žádné povinné ani
nepovinné parametry, které by bylo pro tento účel možné přímo použít! Ve
skutečnosti se totiž všechny podobné parametry ukládají do slovníku
(<i>dictionary</i>) předaného v&nbsp;pojmenovaném parametru
<strong>error_kw</strong>. Podívejme se tedy, jak se změní barva a šířka úsečky
vykreslených odchylek (přímo při vytváření slovníku ho i inicializujeme):</p>

<a href="https://www.root.cz/obrazek/408045/"><img src="https://i.iinfo.cz/images/291/jupyter2-diary-18-prev.png" class="image-408045" alt="&#160;" width="341" height="270" /></a>
<p><i>Obrázek 37: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-21.png" class="image-408066" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 38: Výsledný graf.</i></p>

<p>Úplný skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Devatenáctý demonstrační příklad:</i>
<i># - sloupcový graf se dvěma skupinami sloupců</i>
<i>#   a se zobrazením odchylek</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># první pole hodnot a pole odchylek</i>
vals1 = [10, 15, 20, 12, 14, 8]
delta1 = [1, 2, 3, 4, 5, 0]
&nbsp;
<i># druhé pole hodnot a pole odchylek</i>
vals2 = [19, 18,  6, 11,  6, 14]
delta2 = [4, 2, 3, 2, 2, 4]
&nbsp;
<i># počet prvků</i>
N = len(vals1)
&nbsp;
<i># indexy prvků</i>
indexes = np.arange(N)
&nbsp;
<i># šířka sloupců</i>
width = 0.30
&nbsp;
<i># sloupcový graf se dvěma skupinami sloupců</i>
plt.bar(indexes, vals1, width, color='gray', edgecolor='black', label='CPU#1',
        yerr=delta1, error_kw=dict(elinewidth=2, ecolor='red'))
&nbsp;
<i># posunuté sloupce</i>
plt.bar(indexes+width, vals2, width, color='red', edgecolor='black',
        label='CPU#2',
        yerr=delta2, error_kw=dict(elinewidth=2, ecolor='black'))
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="lower right")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady (diáři)</h2>

<p>Všechny demonstrační příklady (resp.&nbsp;přesněji řečeno diáře),
s&nbsp;nimiž jsme se seznámili v&nbsp;předchozích kapitolách, byly uloženy do
Git repositáře umístěného na GitHubu (<a
href="https://github.com/tisnik/jupyter-notebook-examples/">https://github.com/tisnik/jupyter-notebook-examples/</a>).
Poslední verze souborů s&nbsp;diáři naleznete pod odkazy uvedenými
v&nbsp;tabulce pod tímto odstavcem. Diář by se měl otevřít přímo v&nbsp;rámci
stránky GitHubu:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis</th><th>Zdrojový kód</th></tr>
<tr><td> 1</td><td>graph1.ipynb</td><td>vykreslení průběhů jedné funkce</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph1.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph1.ipynb</a></td></tr>
<tr><td> 2</td><td>graph2.ipynb</td><td>vykreslení průběhů dvou funkcí do jediného grafu</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph2.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph2.ipynb</a></td></tr>
<tr><td> 3</td><td>graph3.ipynb</td><td>změna stylu vykreslování a přidání legendy</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph3.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph3.ipynb</a></td></tr>
<tr><td> 4</td><td>graph4.ipynb</td><td>vyplnění plochy pod funkcí</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph4.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph4.ipynb</a></td></tr>
<tr><td> 5</td><td>graph5.ipynb</td><td>kombinace různých stylů vykreslování grafů</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph5.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph5.ipynb</a></td></tr>
<tr><td> 6</td><td>graph6.ipynb</td><td>zobrazení mřížky a nastavení rozsahů na obou osách</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph6.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph6.ipynb</a></td></tr>
<tr><td> 7</td><td>graph7.ipynb</td><td>přidání popisků do grafů</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph7.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph7.ipynb</a></td></tr>
<tr><td> 8</td><td>graph8.ipynb</td><td>základní polární graf</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph8.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph8.ipynb</a></td></tr>
<tr><td> 9</td><td>graph9.ipynb</td><td>vykreslení průběhů většího množství funkcí v&nbsp;polárním grafu</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph9.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph9.ipynb</a></td></tr>
<tr><td>10</td><td>graph10.ipynb</td><td>vyplnění plochy pod funkcí v&nbsp;polárním grafu</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph10.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph10.ipynb</a></td></tr>
<tr><td>11</td><td>graph11.ipynb</td><td>graf používající &bdquo;schodky&ldquo;</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph11.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph11.ipynb</a></td></tr>
<tr><td>12</td><td>graph12.ipynb</td><td>jednoduchý sloupcový graf</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph12.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph12.ipynb</a></td></tr>
<tr><td>13</td><td>graph13.ipynb</td><td>sloupcový graf se dvěma skupinami sloupců</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph13.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph13.ipynb</a></td></tr>
<tr><td>14</td><td>graph14.ipynb</td><td>zobrazení histogramu</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph14.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph14.ipynb</a></td></tr>
<tr><td>15</td><td>graph15.ipynb</td><td>koláčový graf</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph15.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph15.ipynb</a></td></tr>
<tr><td>16</td><td>graph16.ipynb</td><td>změna stylu vykreslování koláčových grafů</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph16.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph16.ipynb</a></td></tr>
<tr><td>17</td><td>graph17.ipynb</td><td>sloupcový graf se zobrazením odchylek (či chyb)</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph17.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph17.ipynb</a></td></tr>
<tr><td>18</td><td>graph18.ipynb</td><td>pokročilejší nastavení způsobu vykreslení odchylek</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph18.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph18.ipynb</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Notebook interface<br />
<a href="https://en.wikipedia.org/wiki/Notebook_interface">https://en.wikipedia.org/wiki/Notebook_interface</a>
</li>

<li>Jypyter: open source, interactive data science and scientific computing across over 40 programming languages<br />
<a href="https://jupyter.org/">https://jupyter.org/</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

<li>showcase example code: xkcd.py<br />
<a href="https://matplotlib.org/xkcd/examples/showcase/xkcd.html">https://matplotlib.org/xkcd/examples/showcase/xkcd.html</a>
</li>

<li>Customising contour plots in matplotlib<br />
<a href="https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/">https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/</a>
</li>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

<li>The IPython Notebook<br />
<a href="http://ipython.org/notebook.html">http://ipython.org/notebook.html</a>
</li>

<li>nbviewer: a simple way to share Jupyter Notebooks<br />
<a href="https://nbviewer.jupyter.org/">https://nbviewer.jupyter.org/</a>
</li>

<li>Back to the Future: Lisp as a Base for a Statistical Computing System<br />
<a href="https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf">https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf</a>
</li>

<li>gg4clj: a simple wrapper for using R's ggplot2 in Clojure and Gorilla REPL<br />
<a href="https://github.com/JonyEpsilon/gg4clj">https://github.com/JonyEpsilon/gg4clj</a>
</li>

<li>Analemma: a Clojure-based SVG DSL and charting library<br />
<a href="http://liebke.github.io/analemma/">http://liebke.github.io/analemma/</a>
</li>

<li>Clojupyter: a Jupyter kernel for Clojure<br />
<a href="https://github.com/roryk/clojupyter">https://github.com/roryk/clojupyter</a>
</li>

<li>Incanter is a Clojure-based, R-like platform for statistical computing and graphics.<br />
<a href="http://incanter.org/">http://incanter.org/</a>
</li>

<li>Evolution of incanter (Gource Visualization)<br />
<a href="https://www.youtube.com/watch?v=TVfL5nPELr4">https://www.youtube.com/watch?v=TVfL5nPELr4</a>
</li>

<li>Questions tagged [incanter] (na Stack Overflow)<br />
<a href="https://stackoverflow.com/questions/tagged/incanter?sort=active">https://stackoverflow.com/questions/tagged/incanter?sort=active</a>
</li>

<li>Data Sorcery with Clojure<br />
<a href="https://data-sorcery.org/contents/">https://data-sorcery.org/contents/</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>R Markdown: The Definitive Guide<br />
<a href="https://bookdown.org/yihui/rmarkdown/">https://bookdown.org/yihui/rmarkdown/</a>
</li>

<li>Single-page application<br />
<a href="https://en.wikipedia.org/wiki/Single-page_application">https://en.wikipedia.org/wiki/Single-page_application</a>
</li>

<li>Video streaming in the Jupyter Notebook<br />
<a href="https://towardsdatascience.com/video-streaming-in-the-jupyter-notebook-635bc5809e85">https://towardsdatascience.com/video-streaming-in-the-jupyter-notebook-635bc5809e85</a>
</li>

<li>How IPython and Jupyter Notebook work<br />
<a href="https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html">https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html</a>
</li>

<li>Jupyter kernels<br />
<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels">https://github.com/jupyter/jupyter/wiki/Jupyter-kernels</a>
</li>

<li>Keras: The Python Deep Learning library<br />
<a href="https://keras.io/">https://keras.io/</a>
</li>

<li>TensorFlow<br />
<a href="https://www.tensorflow.org/">https://www.tensorflow.org/</a>
</li>

<li>PyTorch<br />
<a href="https://pytorch.org/">https://pytorch.org/</a>
</li>

<li>Seriál Torch: framework pro strojové učení<br />
<a href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/</a>
</li>

<li>Scikit-learn<br />
<a href="https://scikit-learn.org/stable/">https://scikit-learn.org/stable/</a>
</li>

<li>Java Interop (Clojure)<br />
<a href="https://clojure.org/reference/java_interop">https://clojure.org/reference/java_interop</a>
</li>

<li>Obrazy s&nbsp;balíčky Jupyter Notebooku pro Docker<br />
<a href="https://hub.docker.com/u/jupyter/#!">https://hub.docker.com/u/jupyter/#!</a>
</li>

<li>Správce balíčků Conda (dokumentace)<br />
<a href="https://docs.conda.io/en/latest/">https://docs.conda.io/en/latest/</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03</a>
</li>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

