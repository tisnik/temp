<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba grafů v Jupyter Notebooku s využitím knihovny Matplotlib (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba grafů v Jupyter Notebooku s využitím knihovny Matplotlib (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části miniseriálu o projektu Jupyter Notebook dokončíme téma vykreslování grafů s&nbsp;využitím knihoven Numpy a Matplotlib. Ukážeme si další typy grafů, některé triky a dokonce i způsob tvorby animací.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Popisky os grafu</a></p>
<p><a href="#k02">2. Natočení popisek a další triky</a></p>
<p><a href="#k03">3. Změna velikosti grafu</a></p>
<p><a href="#k04">4. Použití funkce <strong>numpy.meshgrid()</strong></a></p>
<p><a href="#k05">5. Graf s&nbsp;konturami funkce z=f(x,y)</a></p>
<p><a href="#k06">6. Přidání popisků k&nbsp;jednotlivým &bdquo;vrstevnicím&ldquo;</a></p>
<p><a href="#k07">7. Další vylepšení grafu s&nbsp;konturami &ndash; legenda s&nbsp;výškami</a></p>
<p><a href="#k08">8. Jednoduchý trojrozměrný graf funkce z=f(x,y) &ndash; drátový model</a></p>
<p><a href="#k09">9. Od drátového modelu k&nbsp;vyplněné ploše</a></p>
<p><a href="#k10">10. Zobrazení legendy &ndash; colorbaru</a></p>
<p><a href="#k11">11. Promítnutí grafu na plochy kolmé na osy</a></p>
<p><a href="#k12">12. Zobrazení 3D grafu funkce typu [x,y,z]=f(t)</a></p>
<p><a href="#k13">13. Lorenzův atraktor</a></p>
<p><a href="#k14">14. Animované grafy</a></p>
<p><a href="#k15">15. Animace grafu jedné funkce</a></p>
<p><a href="#k16">16. Animace průběhů dvou funkcí</a></p>
<p><a href="#k17">17. Postupná změna kontury grafu</a></p>
<p><a href="#k18">18. Obsah následujícího článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady (diáři)</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Popisky os grafu</h2>

<p>Na <a
href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">předchozí
článek</a> s&nbsp;popisem některých možností nabízených knihovnou
<i>Matplotlib</i> dnes navážeme, protože si ukážeme některé další funkce a
grafy touto knihovnou nabízené. Nejdříve si vysvětlíme, jakým způsobem lze do
grafů s&nbsp;průběhy funkcí popř.&nbsp;do sloupcových grafů přidat další
potřebné informace. Titulek se přidá snadno:</p>

<pre>
<i># titulek grafu</i>
plt.title("Sloupcový graf se dvěma skupinami sloupců")
</pre>

<p>Dále můžeme přidat popisky vodorovné i svislé osy (popř.&nbsp;více svislých
os, což knihovna Matplotlib taktéž umožňuje):</p>

<pre>
<i># popisek vodorovné osy</i>
plt.xlabel("Měsíc")
&nbsp;
<i># popisek svislé osy</i>
plt.ylabel("Zisk pobočky")
</pre>

<p>A konečně do grafu lze přidat i legendu a zvolit si, do které oblasti grafu
má být umístěna:</p>

<pre>
<i># přidání legendy</i>
plt.legend(loc="upper right")
</pre>

<p>V&nbsp;prvním diáři je ukázán způsob vykreslení grafu s&nbsp;titulkem,
popiskem u obou os i s&nbsp;legendou:</p>

*** image ***
<p><i>Obrázek 1: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<p>A takto vypadá výsledný graf vykreslený kódem v&nbsp;diáři:</p>

*** image ***
<p><i>Obrázek 2: Výsledný graf.</i></p>

<p>Úplný skript pro vykreslení grafu nalezneme na adrese <a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example19.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example19.py</a>:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Devatenáctý demonstrační příklad:</i>
<i># - sloupcový graf se dvěma skupinami sloupců</i>
<i># - přidání popisů os, titulku aj.</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># první pole hodnot</i>
vals1 = [10, 15, 20, 12, 14, 8]
&nbsp;
<i># druhé pole hodnot</i>
vals2 = [19, 18,  6, 11,  6, 14]
&nbsp;
<i># počet prvků</i>
N = len(vals1)
&nbsp;
<i># indexy prvků</i>
indexes = np.arange(N)
&nbsp;
<i># šířka sloupců</i>
width = 0.30
&nbsp;
<i># titulek grafu</i>
plt.title("Sloupcový graf se dvěma skupinami sloupců")
&nbsp;
<i># sloupcový graf se dvěma skupinami sloupců</i>
plt.bar(indexes, vals1, width, color='gray', edgecolor='black', label='Pobočka 1')
&nbsp;
<i># posunuté sloupce</i>
plt.bar(indexes+width, vals2, width, color='red', edgecolor='black',
        label='Pobočka 2')
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># popisek vodorovné osy</i>
plt.xlabel("Měsíc")
&nbsp;
<i># popisek svislé osy</i>
plt.ylabel("Zisk pobočky")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper right")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Natočení popisek a další triky</h2>

<p>Předchozí graf nebyl ještě dokonalý, protože v&nbsp;něm například chybí
správné popisky na vodorovné ose. Ty lze ovšem velmi snadno doplnit a to
konkrétně následujícím způsobem:</p>

<pre>
<i># popisky</i>
plt.xticks([0, 1, 2, 3, 4, 5], ['Leden', 'Únor', 'Březen', 'Duben', 'Květen', 'Červen'])
</pre>

<p>Zajistit lze, pokud je to pochopitelně nutné, natočení těchto popisek o
libovolný úhel:</p>

<pre>
<i># popisky</i>
plt.xticks([0, 1, 2, 3, 4, 5], ['Leden', 'Únor', 'Březen', 'Duben', 'Květen', 'Červen'], rotation=20)
</pre>

<p>Při natočení popisek (zejména o 90&deg;) se ovšem může stát, že se samotné
popisky do plochy grafu již nevlezou. Tento problém se většinou může vyřešit
změnou pozic jednotlivých prvků popř.&nbsp;změnou velikosti plátna:</p>

<pre>
<i># změna pozic jednotlivých prvků grafu</i>
plt.tight_layout()
</pre>

<p>Diář se skriptem, který zajistí výše uvedené kroky:</p>

*** image ***
<p><i>Obrázek 3: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<p>Nový tvar grafu bude vypadat takto:</p>

*** image ***
<p><i>Obrázek 4: Výsledný graf.</i></p>

<p>Úplný skript pro vykreslení grafu lze najít na adrese <a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example20.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example20.py</a>:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Dvacátý demonstrační příklad:</i>
<i># - sloupcový graf se dvěma skupinami sloupců</i>
<i># - přidání popisů os, titulku aj.</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># první pole hodnot</i>
vals1 = [10, 15, 20, 12, 14, 8]
&nbsp;
<i># druhé pole hodnot</i>
vals2 = [19, 18,  6, 11,  6, 14]
&nbsp;
<i># počet prvků</i>
N = len(vals1)
&nbsp;
<i># indexy prvků</i>
indexes = np.arange(N)
&nbsp;
<i># šířka sloupců</i>
width = 0.30
&nbsp;
<i># titulek grafu</i>
plt.title("Sloupcový graf se dvěma skupinami sloupců")
&nbsp;
<i># sloupcový graf se dvěma skupinami sloupců</i>
plt.bar(indexes, vals1, width, color='gray', edgecolor='black', label='Pobočka 1')
&nbsp;
<i># posunuté sloupce</i>
plt.bar(indexes+width, vals2, width, color='red', edgecolor='black',
        label='Pobočka 2')
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># popisek vodorovné osy</i>
plt.xlabel("Měsíc")
&nbsp;
<i># popisek svislé osy</i>
plt.ylabel("Zisk pobočky")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper right")
&nbsp;
<i># popisky</i>
plt.xticks([0, 1, 2, 3, 4, 5], ['Leden', 'Únor', 'Březen', 'Duben', 'Květen', 'Červen'], rotation=20)
&nbsp;
<i># změna pozic jednotlivých prvků grafu</i>
plt.tight_layout()
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Změna velikosti grafu</h2>

<p>Nyní si ukažme, jak lze změnit velikost grafu, resp.&nbsp;rozlišení
rastrového obrázku, do kterého se graf vykreslí. Nejprve původní diář bez změny
velikosti grafu:</p>

*** image ***
<p><i>Obrázek 5: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<p>Samotný obrázek s&nbsp;grafem je relativně malý:</p>

*** image ***
<p><i>Obrázek 6: Výsledný graf.</i></p>

<p>Lze ho však zvětšit, konkrétně vypnutím tzv.&nbsp;<i>bounding boxů</i> a
nastavením <a
href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.figure.html">velikosti
v&nbsp;palcích</a>:</p>

<pre>
plt.figure(1, figsize=(8,6), dpi=100)
</pre>

*** image ***
<p><i>Obrázek 7: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

*** image ***
<p><i>Obrázek 8: Výsledný graf.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Použití funkce <strong>numpy.meshgrid()</strong></h2>

<p>Před popisem grafů zobrazujících drátové modely a popř.&nbsp;i kontury
funkcí typu z=f(x,y) se musíme seznámit s&nbsp;jednou velmi užitečnou funkcí
z&nbsp;knihovny <i>Numpy</i> nazvanou <strong>numpy.meshgrid()</strong>. Tato
funkce má sice poměrně univerzální možnosti použití, my se však v&nbsp;dnešním
článku spokojíme s&nbsp;tím, že pokud se funkci
<strong>numpy.meshgrid()</strong> předá dvojice jednorozměrných polí (vektorů)
představujících hodnoty nezávislých x-ových a y-ových souřadnic, vytvoří se
jako výsledek dvě dvourozměrné matice, které dohromady tvoří mřížku souřadnic
[x<sub>i</sub>, y<sub>i</sub>] (první matice obsahuje x-ové souřadnice, druhá
souřadnice y-ové). Počet řádků těchto 2D matic odpovídá délce druhého pole,
počet sloupců pak délce pole prvního. Podívejme se nejprve na velmi jednoduchý
příklad:</p>

<pre>
<i># vytvoření vektoru [1..10]</i>
<strong>x=np.arange(1, 11, 1)</strong>
&nbsp;
<i># vytvoření vektoru [101..105]</i>
<strong>y=np.arange(101, 106, 1)</strong>
&nbsp;
<i># zobrazení prvního vektoru</i>
<strong>x</strong>
array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
&nbsp;
<i># zobrazení druhého vektoru</i>
<strong>y</strong>
array([101, 102, 103, 104, 105])
&nbsp;
<i># zavolání funkce numpy.meshgrid</i>
<strong>np.meshgrid(x,y)</strong>
[array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10]]),
 array([[101, 101, 101, 101, 101, 101, 101, 101, 101, 101],
       [102, 102, 102, 102, 102, 102, 102, 102, 102, 102],
       [103, 103, 103, 103, 103, 103, 103, 103, 103, 103],
       [104, 104, 104, 104, 104, 104, 104, 104, 104, 104],
       [105, 105, 105, 105, 105, 105, 105, 105, 105, 105]])]
</pre>

<p>Většinou se první i druhá matice uloží do samostatné proměnné, a to
následujícím způsobem (povšimněte si, že výsledné matice jsou uloženy do
proměnných označených verzálkami):</p>

<pre>
<i># uložení první matice do proměnné X</i>
<i># a současně</i>
<i># uložení druhé matice do proměnné Y</i>
<strong>X,Y=np.meshgrid(x,y)</strong>
&nbsp;
<i># zobrazení první matice</i>
<strong>X</strong>
array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10]])
&nbsp;
<i># zobrazení druhé matice</i>
<strong>Y</strong>
array([[101, 101, 101, 101, 101, 101, 101, 101, 101, 101],
       [102, 102, 102, 102, 102, 102, 102, 102, 102, 102],
       [103, 103, 103, 103, 103, 103, 103, 103, 103, 103],
       [104, 104, 104, 104, 104, 104, 104, 104, 104, 104],
       [105, 105, 105, 105, 105, 105, 105, 105, 105, 105]])
</pre>

<p>S&nbsp;maticemi je při použití knihovny <i>Numpy</i> možné mj.&nbsp;provádět
i základní operace typu součet matic, rozdíl matic, maticový součin atd. Taktéž
je možné na prvky matice aplikovat logaritmické či goniometrické funkce, takže
například následující zápis je zcela korektní a plně podporovaný:</p>

<pre>
<i># součet matic a následně aplikace goniometrické funkce sin</i>
<i># na každý prvek výsledné matice</i>
<strong>Z=np.sin(X+Y)</strong>
&nbsp;
<i># podívejme se na výslednou matici</i>
<strong>Z</strong>
array([[ 0.99482679,  0.62298863, -0.3216224 , -0.97053528, -0.7271425 ,
         0.18478174,  0.92681851,  0.81674261, -0.04424268, -0.86455145],
       [ 0.62298863, -0.3216224 , -0.97053528, -0.7271425 ,  0.18478174,
         0.92681851,  0.81674261, -0.04424268, -0.86455145, -0.8899956 ],
       [-0.3216224 , -0.97053528, -0.7271425 ,  0.18478174,  0.92681851,
         0.81674261, -0.04424268, -0.86455145, -0.8899956 , -0.09718191],
       [-0.97053528, -0.7271425 ,  0.18478174,  0.92681851,  0.81674261,
        -0.04424268, -0.86455145, -0.8899956 , -0.09718191,  0.78498039],
       [-0.7271425 ,  0.18478174,  0.92681851,  0.81674261, -0.04424268,
        -0.86455145, -0.8899956 , -0.09718191,  0.78498039,  0.94543533]])
</pre>

<p>Funkci <strong>numpy.meshgrid</strong> využijeme v&nbsp;dalších
demonstračních příkladech.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Graf s&nbsp;konturami funkce z=f(x,y)</h2>

<p>První způsob zobrazení funkce typu <i>z=f(x,y)</i> spočívá ve vykreslení
takzvaných <i>kontur</i>, které si pro zjednodušení můžeme představit jako
vrstevnice na mapě &ndash; body spojené konturou/vrstevnicí mají stejnou
hodnotu funkce (tj.&nbsp;stejnou hodnotu z-ové souřadnice; řekněme výšky). Při
vyhodnocování a následném vykreslení funkce budeme postupovat následovně:</p>

<ol>
<li>Vytvoříme vektor s&nbsp;hodnotami nezávislé proměnné x.</li>
<li>Vytvoříme vektor s&nbsp;hodnotami nezávislé proměnné y.</li>
<li>S&nbsp;využitím výše popsané funkce <strong>numpy.meshgrid</strong> necháme vygenerovat dvojici matic souřadnic.</li>
<li>Necháme vypočítat body ležící na ploše funkce (z-ové souřadnice se uloží do matice Z).</li>
<li>Vlastní vykreslení kontur zajistí funkce <strong>matplotlib.pyplot.contour(X, Y, Z)</strong>.</li>
</ol>

<p>Podívejme se na úplný příklad diáře s&nbsp;jednoduchou konturou:</p>

*** image ***
<p><i>Obrázek 9: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

*** image ***
<p><i>Obrázek 10: Výsledný graf.</i></p>

*** image ***
<p><i>Obrázek 11: Pokud je hodnota &bdquo;delta&ldquo; příliš vysoká, vypočte
se menší počet bodů tvořících plochu funkce, takže i kontury budou vykresleny
velmi nepřesně (knihovna bude mít k&nbsp;dispozici jen málo bodů, které bude
moci spojit).</i></p>

<p><a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example22.py">Úplný
skript</a> pro vykreslení grafu vypadá následovně:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Dvacátý druhý demonstrační příklad:</i>
<i># - zobrazení kontur funkce typu z=f(x,y)</i>
&nbsp;
import matplotlib
import numpy as np
import matplotlib.cm as cm
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
delta = 0.1
&nbsp;
<i># průběh nezávislé proměnné x</i>
x = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y]</i>
X, Y = np.meshgrid(x, y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R1 = np.sqrt(X*X+Y*Y)
&nbsp;
<i># vzdálenost od bodu [3,3]</i>
R2 = np.sqrt((X-3)*(X-3)+(Y-3)*(Y-3))
&nbsp;
<i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
Z = np.sin(R1)-np.cos(R2)
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vytvoření grafu s konturami funkce z=f(x,y)</i>
plt.contour(X, Y, Z)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Přidání popisků k&nbsp;jednotlivým &bdquo;vrstevnicím&ldquo;</h2>

<p>Další vylepšení předchozího demonstračního příkladu spočívá v&nbsp;přidání
popisků (výšek) jednotlivých kontur/vrstevnic, což je opět způsob, který
čtenáři pravděpodobně znají z&nbsp;běžných map. Jakmile je graf funkce
vykreslen, postačuje zavolat funkci nazvanou <strong>plt.clabel()</strong>,
které se předá proměnná obsahující všechny informace o právě vytvořeném grafu.
Tato funkce taktéž akceptuje množství parametrů popsaných na stránce <a
href="http://matplotlib.org/api/pyplot_api.html?highlight=contour#matplotlib.pyplot.contour">http://matplotlib.org/api/pyplot_api.html?highlight=contour#matplotlib.pyplot.contour</a>.
My nastavíme parametr <strong>inline</strong> na hodnotu <strong>True</strong>
(pod textem se nezobrazí kontura, to by bylo poměrně nečitelné) a parametr
<strong>fontsize</strong> na požadovanou relativní velikost písma
s&nbsp;popisky:</p>

*** image ***
<p><i>Obrázek 12: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

*** image ***
<p><i>Obrázek 13: Výsledný graf &ndash; u jednotlivých &bdquo;vrstevnic&ldquo; je uvedena i jejich hodnota odpovídající hodnotě funkce v&nbsp;daném bodě..</i></p>

<p><a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example23.py">Úplný
skript</a> pro vykreslení grafu je následující:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Dvacátý třetí demonstrační příklad:</i>
<i># - zobrazení kontur funkce typu z=f(x,y)</i>
<i># - zobrazení hodnot u jednotlivých "vrstevnic"</i>
&nbsp;
import matplotlib
import numpy as np
import matplotlib.cm as cm
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
delta = 0.1
&nbsp;
<i># průběh nezávislé proměnné x</i>
x = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y] </i>
X, Y = np.meshgrid(x, y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R1 = np.sqrt(X*X+Y*Y)
&nbsp;
<i># vzdálenost od bodu [3,3]</i>
R2 = np.sqrt((X-3)*(X-3)+(Y-3)*(Y-3))
&nbsp;
<i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
Z = np.sin(R1)-np.cos(R2)
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vytvoření grafu s konturami funkce z=f(x,y)</i>
CS = plt.contour(X, Y, Z)
&nbsp;
<i># popisky "vrstevnic"</i>
plt.clabel(CS, inline=1, fontsize=10)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Další vylepšení grafu s&nbsp;konturami &ndash; legenda s&nbsp;výškami</h2>

<p>Další možné vylepšení, které může být výhodné zejména ve chvíli, kdy jsou
plochy s&nbsp;konturami vybarveny (pro vybarvení použijte funkci
<strong>matplotlib.pyplot.contourf</strong> namísto pouhého
<strong>matplotlib.pyplot.countour</strong> &ndash; rozdíl spočívá
v&nbsp;&bdquo;f&ldquo; na konci příslušné funkce) spočívá v&nbsp;přidání
legendy, na níž se zobrazují výšky jednotlivých kontur/vrstevnic. Přidání je
jednoduché, stačí pouze použít funkci nazvanou
<strong>matplotlib.pyplot.colorbar()</strong>, které se opět předá datová
struktura reprezentující graf funkce a několik nepovinných pojmenovaných
parametrů. Z&nbsp;těchto parametrů dnes použijeme pouze parametr nazvaný
<strong>shrink</strong> (relativní velikost popisku) a <strong>extend</strong>
(způsob vykreslení popisků vedle grafu). Podívejme se na úplný zdrojový kód
příkladu (diáře):</p>

*** image ***
<p><i>Obrázek 14: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

*** image ***
<p><i>Obrázek 15: Výsledný graf. Kromě vrstevnic a jejich hodnot se napravo od
grafu zobrazila i &bdquo;mapa výšek&ldquo;. Relativní velikost mapy vůči celému
grafu se řídí hodnotou <strong>shrink</strong>. Zde konkrétně má celá legenda
výšku jen 70% výšky celého grafu.</i></p>

<p><a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example24.py">Úplný
skript</a> pro vykreslení grafu z&nbsp;obrázku číslo 14:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Dvacátý čtvrtý demonstrační příklad:</i>
<i># - zobrazení kontur funkce typu z=f(x,y)</i>
<i># - zobrazení hodnot u jednotlivých "vrstevnic"</i>
<i># - přidání legendy</i>
&nbsp;
import matplotlib
import numpy as np
import matplotlib.cm as cm
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
delta = 0.1
&nbsp;
<i># průběh nezávislé proměnné x</i>
x = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y] </i>
X, Y = np.meshgrid(x, y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R1 = np.sqrt(X*X+Y*Y)
&nbsp;
<i># vzdálenost od bodu [3,3]</i>
R2 = np.sqrt((X-3)*(X-3)+(Y-3)*(Y-3))
&nbsp;
<i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
Z = np.sin(R1)-np.cos(R2)
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vytvoření grafu s konturami funkce z=f(x,y)</i>
CS = plt.contour(X, Y, Z)
&nbsp;
<i># přidání legendy (colorbar)</i>
CB = plt.colorbar(CS, shrink=0.7, extend='both')
&nbsp;
<i># popisky "vrstevnic"</i>
plt.clabel(CS, inline=1, fontsize=10)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Jednoduchý trojrozměrný graf funkce z=f(x,y) &ndash; drátový model</h2>

<p>Použití grafu s&nbsp;konturami sice může být v&nbsp;mnoha ohledech velmi
užitečné (například při zjišťování lokálních minim a maxim i při potřebě
nezkresleného pohledu na průběh funkce), v&nbsp;praxi se však spíše setkáme
s&nbsp;odlišným typem grafů zobrazujících funkce typu z=f(x,y). Jedná se o
trojrozměrné grafy, v&nbsp;nichž se zobrazuje plocha funkce. Nejjednodušším
typem tohoto grafu je takzvaný <i>drátový model</i>, který je spíše známý pod
svým anglickým názvem <i>wireframe</i>. V&nbsp;tomto typu grafu je zobrazena
série křivek či spíše lomených čar. Jedna série je vypočtena takovým způsobem,
že x-ová souřadnice se postupně mění v&nbsp;nastaveném intervalu zatímco y-ová
souřadnice je konstantní. Druhá série lomených čar se vykresluje kolmo na sérii
první, tj.&nbsp;x-ová souřadnice je konstantní a postupně se mění hodnota
y-ových souřadnic. Výsledkem je tedy plocha, která má při pohledu z&nbsp;osy z
tvar pravidelné mřížky. Pro vykreslení tohoto typu grafu se používá funkce
nazvaná <strong>plot_wireframe()</strong>, které se předá trojice polí
odpovídajících x-ovým, y-ovým a z-ovým souřadnicím bodů ležících na ploše
představujících obraz funkce:</p>

*** image ***
<p><i>Obrázek 16: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<p>Pojmenované parametry <strong>rstride</strong> a <strong>cstride</strong>
lze použít pro řízení hustoty vykreslované mřížky. Tyto parametry představují
krok použitý při změně x-ových a y-ových souřadnic, což znamená, že čím menší
hodnota se požije, tím bode vykreslená mřížka jemnější:</p>

<pre>
ax.plot_wireframe(X, Y, Z, rstride=3, cstride=3)
</pre>

*** image ***
<p><i>Obrázek 17: Výsledný graf. Drátový model vykreslený s&nbsp;využitím
funkce <strong>plot_wireframe(X, Y, Z, rstride=7, cstride=7)</strong></i></p>

<p><a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example25.py">Úplný
skript pro vykreslení grafu</a> vypadá následovně:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Dvacátý pátý demonstrační příklad:</i>
<i># - zobrazení 3D grafu funkce typu z=f(x,y)</i>
&nbsp;
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
&nbsp;
delta = 0.1
&nbsp;
<i># průběh nezávislé proměnné x</i>
x = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y] </i>
X, Y = np.meshgrid(x, y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R = np.sqrt(X*X+Y*Y)
&nbsp;
<i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
Z = np.sin(R)/R
&nbsp;
<i># zobrazení 3D grafu</i>
ax.plot_wireframe(X, Y, Z, rstride=7, cstride=7)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 18: Výsledný graf. Drátový model vykreslený s&nbsp;využitím
funkce <strong>plot_wireframe(X, Y, Z, rstride=3, cstride=3)</strong></i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Od drátového modelu k&nbsp;vyplněné ploše</h2>

<p>Drátový model je možné v&nbsp;případě potřeby nahradit vykreslením vyplněné
plochy namísto pouhé mřížky. V&nbsp;tomto případě je nutné namísto funkce
<strong>plot_wireframe()</strong> použít funkci pojmenovanou
<strong>plot_surface()</strong>. První tři povinné parametry obou zmíněných
funkcí jsou shodné, dokonce lze použít i stejně pojmenované parametry
<strong>cstride</strong> a <strong>rstride</strong>, o jejichž významu jsme se
taktéž zmiňovali v&nbsp;předchozích kapitolách. Kromě toho se však navíc
většinou používá i další pojmenovaný parametr <strong>cmap</strong>, kterému se
předá barvová paleta (či barvová mapa), která typicky definuje jeden gradientní
přechod i větší množství gradientních přechodů mezi různými odstíny. Pro účely
vytváření gradientních přechodů či pro použití již předem připravených
barvových map se používá specializovaný modul nazvaný
<strong>matplotlib.cm</strong> (<i>color map</i>). Seznam všech
předdefinovaných barvových map naleznete na adrese <a
href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>,
ukázky (palety) pak na adrese <a
href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>.
My využijeme barvovou mapu pojmenovanou &bdquo;coolwarm&ldquo;:</p>

*** image ***
<p><i>Obrázek 19: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

*** image ***
<p><i>Obrázek 20: Výsledný graf.</i></p>

<p><a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example26.py">Úplný
skript pro vykreslení 3D grafu</a> vypadá takto:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Dvacátý šestý demonstrační příklad:</i>
<i># - zobrazení 3D grafu funkce typu z=f(x,y)</i>
&nbsp;
from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
fig = plt.figure()
ax = fig.gca(projection='3d')
&nbsp;
delta = 0.1
&nbsp;
<i># průběh nezávislé proměnné x</i>
x = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y] </i>
X, Y = np.meshgrid(x, y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R = np.sqrt(X*X+Y*Y)
&nbsp;
<i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
Z = np.sin(R)/R
&nbsp;
<i># zobrazení 3D grafu formou plochy</i>
ax.plot_surface(X, Y, Z, rstride=2, cstride=2, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zobrazení legendy &ndash; colorbaru</h2>

<p>O způsobu zobrazení takzvaného <i>colorbaru</i> jsme se již zmínili <a
href="#k07">v&nbsp;sedmé kapitole</a> v&nbsp;souvislosti s&nbsp;grafem
zobrazujícím kontury nějaké funkce. Ovšem <i>colorbar</i> má svůj význam i
v&nbsp;případě trojrozměrných grafů, což ostatně uvidíme po spuštění
následujícího demonstračního příkladu, v&nbsp;němž se napravo od grafu
s&nbsp;plochou funkce z=f(x,y) zobrazí i &bdquo;mapa výšek&ldquo;. Povšimněte
si způsobu nastavení měřítka z-ové osy funkcí <strong>set_zlim()</strong> a
taktéž změny způsobu formátování výšek, tj.&nbsp;popisu z-ové osy
(<strong>set_major_locator()</strong> a
<strong>set_major_formatter()</strong>):</p>

*** image ***
<p><i>Obrázek 21: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

*** image ***
<p><i>Obrázek 22: Výsledný graf. Plocha funkce z=f(x,y) používající barvovou mapu pojmenovanou &bdquo;coolwarm&ldquo;.</i></p>

<p>Opět následuje <a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example27.py">výpis
úplného skriptu pro vykreslení grafu</a>:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Dvacátý sedmý demonstrační příklad:</i>
<i># - zobrazení 3D grafu funkce typu z=f(x,y)</i>
<i># - pomocná legenda - colorbar</i>
&nbsp;
from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm
import matplotlib.pyplot as plt
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import numpy as np
&nbsp;
fig = plt.figure()
ax = fig.gca(projection='3d')
&nbsp;
delta = 0.1
&nbsp;
<i># průběh nezávislé proměnné x</i>
x = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y]</i>
X, Y = np.meshgrid(x, y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R = np.sqrt(X*X+Y*Y)
&nbsp;
<i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
Z = np.sin(R)/R
&nbsp;
<i># zobrazení 3D grafu formou plochy</i>
surface = ax.plot_surface(X, Y, Z, rstride=2, cstride=2, cmap=cm.coolwarm,
                          linewidth=0, antialiased=False)
&nbsp;
ax.set_zlim(-1.01, 1.01)
&nbsp;
<i># styl formátování popisků</i>
ax.zaxis.set_major_locator(LinearLocator(10))
ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))
&nbsp;
<i># přidání pomocné legendy</i>
fig.colorbar(surface, shrink=0.7, aspect=5)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7175" src="http://mojefedora.cz/wp-content/uploads/2016/05/08-450x339.png" alt="08" width="450" height="339" />
<p><i>Obrázek 23: Plocha funkce z=f(x,y) používající barvovou mapu pojmenovanou
&bdquo;coolwarm&ldquo;. Vedle grafu je zobrazena i legenda.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Promítnutí grafu na plochy kolmé na osy</h2>

<p>Vzhledem k&nbsp;tomu, že se pro zobrazení trojrozměrného grafu na 2D
obrazovce musí používat axonometrické promítání popř.&nbsp;promítání
s&nbsp;perspektivou, nemusí být z&nbsp;výsledného obrázku s&nbsp;grafem na
první pohled zřejmé, jak přesně vlastně průběh funkce vypadá. Knihovna
<i>Matplotlib</i> nám však nabízí určité řešení tohoto problému &ndash; na
plochy (které jsou kolmé na osy souřadného systému) se promítnou kontury
průběhu funkce. Podívejme se nejdříve na to, jak vypadá výsledek:</p>

*** image ***
<p><i>Obrázek 24: Výsledný graf. Promítnutí kontur průběhu funkce na
plochy.</i></p>

<p>Samotná plocha představující funkci se vykreslí příkazem (přesněji řečeno
funkcí) <strong>matplotlib.pyplot.plot_surface()</strong>, podobně jako
v&nbsp;předchozím příkladu. Dále se metodou <strong>ax.contour()</strong> mohou
vykreslit kontury grafu na jednotlivé plochy, ve skutečnosti je však ještě
nutné korektně nastavit přesné umístění těchto kontur do grafu. K&nbsp;tomu
slouží explicitní nastavení rozsahů na jednotlivých osách
(<strong>set_xlim()</strong>, <strong>set_ylim()</strong>,
<strong>set_zlim()</strong>) a vlastní posun reprezentovaný pojmenovaným
parametrem <strong>offset</strong> předaným do metody
<strong>ax.contour()</strong>. Podívejme se na odladěný příklad:</p>

*** image ***
<p><i>Obrázek 25: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

<p>Následně si ukažme <a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example28.py">celý
skript pro vykreslení grafu</a>:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Dvacátý osmý demonstrační příklad:</i>
<i># - zobrazení 3D grafu funkce typu z=f(x,y)</i>
<i># - pomocná legenda - colorbar</i>
<i># - promítnutí grafu na ploch kolmých na osy</i>
&nbsp;
from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
fig = plt.figure()
ax = fig.gca(projection='3d')
&nbsp;
delta = 0.1
&nbsp;
<i># průběh nezávislé proměnné x</i>
x = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y]</i>
X, Y = np.meshgrid(x, y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R = np.sqrt(X*X+Y*Y)
&nbsp;
<i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
Z = np.sin(R)/R
&nbsp;
<i># zobrazení 3D grafu formou plochy</i>
surface = ax.plot_surface(X, Y, Z, rstride=2, cstride=2, cmap=cm.coolwarm,
                          linewidth=0, antialiased=False)
&nbsp;
<i># kontutra: průmět na rovinu x-y</i>
cset = ax.contour(X, Y, Z, zdir='z', offset=-5, cmap=cm.coolwarm)
&nbsp;
<i># kontutra: průmět na rovinu y-z</i>
cset = ax.contour(X, Y, Z, zdir='x', offset=-15, cmap=cm.coolwarm)
&nbsp;
<i># kontutra: průmět na rovinu x-z</i>
cset = ax.contour(X, Y, Z, zdir='y', offset=15, cmap=cm.coolwarm)
&nbsp;
<i># rozměry grafu ve směru osy x</i>
ax.set_xlabel('X')
ax.set_xlim(-15, 15)
&nbsp;
<i># rozměry grafu ve směru osy y</i>
ax.set_ylabel('Y')
ax.set_ylim(-15, 15)
&nbsp;
<i># rozměry grafu ve směru osy z</i>
ax.set_zlabel('Z')
ax.set_zlim(-5, 5)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7177" src="http://mojefedora.cz/wp-content/uploads/2016/05/10-450x339.png" alt="10" width="450" height="339" />
<p><i>Obrázek 26: Změna měřítka ve směru osy z. Při změně měřítka je současně
nutné posunout konturu pojmenovaným parametrem <strong>offset</strong>.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zobrazení 3D grafu funkce typu [x,y,z]=f(t)</h2>

<p>Další typ grafu, s&nbsp;nímž se v&nbsp;dnešním článku seznámíme, je
trojrozměrný graf, v&nbsp;němž se zobrazuje nějaká funkce typu
<i>[x,y,z]=f(t)</i> popř.&nbsp;složitější funkce <i>[x<sub>n</sub>,
y<sub>n</sub>, z<sub>n</sub>]=f(x<sub>n-1</sub>, y<sub>n-1</sub>,
z<sub>n-1</sub>)</i>. O zobrazení průběhů těchto funkcí se stará
<strong>matplotlib.pyplot.plot()</strong>, s&nbsp;níž jsme se již seznámili
v&nbsp;předchozí části tohoto seriálu. Tento příkaz automaticky zjistí potřebné
rozsahy na všech třech osách, což je dobře patrné ze screenshotu číslo 28.
Podívejme se tedy, jakým způsobem je možné zobrazit trojrozměrnou spirálu
(pokud budete potřebovat, aby se spirála nezužovala, postačuje proměnnou
<strong>r</strong> nastavit na konstantní hodnotu a nijak ji v&nbsp;programové
smyčce nemodifikovat):</p>

*** image ***
<p><i>Obrázek 27: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

*** image ***
<p><i>Obrázek 28: Výsledný graf. Spirála vykreslená předchozím demonstračním
příkladem.</i></p>

<p>Úplný skript pro vykreslení grafu je dostupný na adrese <a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example29.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example29.py</a>:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Dvacátý devátý demonstrační příklad:</i>
<i># - zobrazení 3D grafu funkce typu [x,y,z]=f(t)</i>
&nbsp;
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
<i># nezávislá proměnná</i>
t = np.arange(0, 8*np.pi, 0.1)
&nbsp;
<i># vzdálenost od osy spirály</i>
r = 10.0/(t+4)
&nbsp;
<i># výpočet souřadnic [x,y,z]) pro každé t</i>
x = r*np.cos(t)
y = r*np.sin(t)
z = t
&nbsp;
fig = plt.figure()
ax = fig.gca(projection='3d')
&nbsp;
<i># vykreslení grafu</i>
ax.plot(x, y, z)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Lorenzův atraktor</h2>

<p>Poměrně vděčným příkladem funkce zobrazené v&nbsp;3D prostoru je dynamický
systém s&nbsp;takzvaným <i>podivným atraktorem</i>, který je nazvaný
<i>Lorenzův atraktor</i> podle svého objevitele. Tento systém sestávající ze
tří dynamických rovnic použil Edward Lorenz v&nbsp;roce 1963 při simulaci
vývoje počasí (resp.&nbsp;ve velmi zjednodušeném modelu počasí). Na tomto
systému byla také numericky a analyticky ověřena velká citlivost na počáteční
podmínky (někdy také nazývaná &bdquo;motýlí efekt&ldquo;). Pro upřesnění je
však nutné říci, že při simulaci na počítači vlastně získáme atraktor, jenž je
periodický. Je to z&nbsp;toho důvodu, že pro zobrazení číselných hodnot je
použito konečného počtu bitů, z&nbsp;toho nutně vyplývá, že se po určitém počtu
kroků (který je však obrovský, takže tento jev mnohdy nezaregistrujeme) začne
dráha Lorenzova atraktoru překrývat. V&nbsp;matematicky přesném modelu však
tato situace nenastane, každá smyčka funkce bude mít unikátní tvar a dráhy se
nebudou překrývat, pouze protínat. Diferenciální rovnice Lorenzova atraktoru
mají po převodu na diferenční tvar následující formát:</p>

<pre>
dx/dt = &sigma; (y-x)
dy/dt = x(&rho; - z) - y
dz/dt = xy - &Beta;z
</pre>

<p>Takže pro iterativní (samozřejmě že nepřesný) výpočet můžeme pracovat
s&nbsp;následujícími vztahy, které pro dostatečně malé <i>dt</i> vedou
k&nbsp;výpočtu bodů ležících na Lorenzově atraktoru:</p>

<pre>
x<sub>n+1</sub>=x<sub>n</sub>+(&sigma; (y-x)) dt
y<sub>n+1</sub>=y<sub>n</sub>+(x(&rho; - z) - y) dt
z<sub>n+1</sub>=z<sub>n</sub>+(xy - &Beta;z) dt
</pre>

<p>Podívejme se nyní na způsob implementace této funkce v&nbsp;Pythonu, což je
snadné:</p>

<pre>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot
</pre>

<p>A výpočtu sekvence bodů ležících na atraktoru:</p>

<pre>
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0., 1., 1.05)
&nbsp;
<i># vlastní výpočet atraktoru (resp. bodů na něm ležících)</i>
for i in range(n-1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i+1] = x[i] + x_dot * dt
    y[i+1] = y[i] + y_dot * dt
    z[i+1] = z[i] + z_dot * dt
</pre>

<p>Vlastní zobrazení pak probíhá naprosto stejným způsobem, jako tomu bylo
v&nbsp;předchozím demonstračním příkladu:</p>

*** image ***
<p><i>Obrázek 29: Diář s&nbsp;kódem pro vykreslení grafu.</i></p>

*** image ***
<p><i>Obrázek 30: Výsledný graf. Lorenzův atraktor vykreslený předchozím demonstračním příkladem.</i></p>

<p><a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example30.py">Úplný
skript pro vykreslení Lorenzova atraktoru</a>:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Třicátý demonstrační příklad:</i>
<i># - Lorenzův atraktor</i>
&nbsp;
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0., 1., 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n-1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i+1] = x[i] + x_dot * dt
    y[i+1] = y[i] + y_dot * dt
    z[i+1] = z[i] + z_dot * dt
&nbsp;
fig = plt.figure()
ax = fig.gca(projection='3d')
&nbsp;
<i># vykreslení grafu</i>
ax.plot(x, y, z)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Animované grafy</h2>

<p>V&nbsp;závěrečné části dnešního článku si popíšeme způsob tvorby animovaných
grafů, pochopitelně opět s&nbsp;využitím možností nabízených Jupyter
Notebookem, knihovnou Numpy a Matplotlib. Animace budou převedeny do formátu
vhodného pro zobrazení na HTML stránce (tedy v&nbsp;rámci notebooku), ovšem
v&nbsp;případě potřeby je možné například vytvořit MPEG-4 apod. (vyžadován bude
v&nbsp;tomto případě nainstalovaný <i>ffmpeg</i>). Animace jsou založeny na
modulu <strong>matplotlib.animation</strong> a zobrazení na modulu
<strong>IPython.display</strong>.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Animace grafu jedné funkce</h2>

<p>Podívejme se nyní na způsob zajištění animace grafu jedné funkce typu
<i>y=f(x)</i>. Animovanou funkcí bude sin s&nbsp;proměnným offsetem, který
postupně poroste od hodnoty 0 do 2&pi;, takže poslední snímek naváže na snímek
první. Celkem vytvoříme sto snímků, které se mohou neustále opakovat. Samotnou
animaci zajistí následující kód:</p>

<pre>
anim = animation.FuncAnimation(fig, <strong>animate</strong>, init_func=<strong>init</strong>,
                               frames=100, interval=20, blit=True)
&nbsp;
HTML(anim.to_html5_video())
</pre>

<p>Povšimněte si specifikace dvou funkcí nazvaných <strong>animate</strong> a
<strong>init</strong>. Funkce <strong>init</strong> provede inicializaci grafu
před jeho vykreslením a může vypadat následovně:</p>

<pre>
<i># funkce zavolaná při inicializaci animace</i>
def <strong>init</strong>():
    function.set_data([], [])
    return (function,)
</pre>

<p><div class="rs-tip-major">Poznámka: tato funkce může ve skutečnosti vracet
libovolná data či (častěji) objekty, důležité je však nastavení atributu
objektu <strong>function</strong>:</div></p>

<pre>
function, = ax.plot([], [], lw=2)
</pre>

<p>Druhá funkce nazvaná <strong>animate</strong> je již složitější, neboť jejím
úkolem je vytvořit graf, z&nbsp;něhož se následně vyrendruje jeden snímek
animace. Povšimněte si, jak parametr <strong>i</strong> (což je číslo snímku)
transformujeme na posun při výpočtu vektoru <strong>y</strong>:</p>

<pre>
<i># funkce zavolaná pro vytvoření každého snímku</i>
def <strong>animate</strong>(i):
    <i># hodnoty na x-ové ose</i>
    x = np.linspace(0, 2*np.pi, 100)
&nbsp;
    <i># hodnoty na y-ové ose</i>
    y = np.sin(x + np.pi*i/50)
&nbsp;
    function.set_data(x, y)
    return (function,)
</pre>

<p>Výsledný diář s&nbsp;celým nastavením animace se již nevlezl do jediného
screenshotu:</p>

*** image ***
<p><i>Obrázek 31: První část diáře.</i></p>

*** image ***
<p><i>Obrázek 32: Druhá část diáře i s&nbsp;animací.</i></p>

<p>Následující skript zajistí vykreslení celé animace a její zobrazení
v&nbsp;Jupyter Notebooku:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Třicátý první demonstrační příklad:</i>
<i># - Jednoduchá animace</i>
&nbsp;
<i># import všech potřebných knihoven - Numpy a Matplotlibu</i>
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
from matplotlib import animation, rc
from IPython.display import HTML
&nbsp;
<i># příprava grafu</i>
fig, ax = plt.subplots()
&nbsp;
ax.set_xlim(( 0, 2*np.pi))
ax.set_ylim((-2, 2))
&nbsp;
function, = ax.plot([], [], lw=2)
&nbsp;
<i># funkce zavolaná při inicializaci animace</i>
def <strong>init</strong>():
    function.set_data([], [])
    return (function,)
&nbsp;
<i># funkce zavolaná pro vytvoření každého snímku</i>
def <strong>animate</strong>(i):
    <i># hodnoty na x-ové ose</i>
    x = np.linspace(0, 2*np.pi, 100)
&nbsp;
    <i># hodnoty na y-ové ose</i>
    y = np.sin(x + np.pi*i/50)
&nbsp;
    function.set_data(x, y)
    return (function,)
&nbsp;
anim = animation.FuncAnimation(fig, animate, init_func=init,
                               frames=100, interval=20, blit=True)
&nbsp;
HTML(anim.to_html5_video())
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Animace průběhů dvou funkcí</h2>

<p>Nepatrnou úpravou funkcí <strong>init</strong> a <strong>animate</strong>
lze dosáhnout toho, že se v&nbsp;jednom grafu zobrazí dvě animované funkce.
V&nbsp;<strong>init</strong> se vytvoří struktury pro dvě sady dat (dvojice
vektorů s&nbsp;x-ovými a y-ovými souřadnicemi ležícími na grafu funkce):</p>

<pre>
<i># funkce zavolaná při inicializaci animace</i>
def <strong>init</strong>():
    function.set_data([], [])
    function2.set_data([], [])
    return (function,function2,)
</pre>

<p>Ve funkci <strong>animate</strong> se vytvoří dva průběhy funkce, které
nastaví příslušné atributy objektu <strong>function</strong> a
<strong>function2</strong>:</p>

<pre>
<i># funkce zavolaná pro vytvoření každého snímku</i>
def <strong>animate</strong>(i):
    <i># hodnoty na x-ové ose</i>
    x = np.linspace(0, 2*np.pi, 100)
&nbsp;
    <i># hodnoty na y-ové ose: první funkce</i>
    y1 = np.sin(x + np.pi*i/50)
&nbsp;
    <i># hodnoty na y-ové ose: druhá funkce</i>
    y2 = np.cos(x + np.pi*i/25)
&nbsp;
    function.set_data(x, y1)
    function2.set_data(x, y2)
    return (function,function2,)
</pre>

*** image ***
<p><i>Obrázek 33: První část diáře.</i></p>

*** image ***
<p><i>Obrázek 34: Druhá část diáře i s&nbsp;animací.</i></p>

<p>Upravený skript vypadá následovně:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Třicátý druhý demonstrační příklad:</i>
<i># - Jednoduchá animace</i>
&nbsp;
<i># import všech potřebných knihoven - Numpy a Matplotlibu</i>
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
from matplotlib import animation, rc
from IPython.display import HTML
&nbsp;
<i># příprava grafu</i>
fig, ax = plt.subplots()
&nbsp;
ax.set_xlim(( 0, 2*np.pi))
ax.set_ylim((-2, 2))
&nbsp;
function, = ax.plot([], [], lw=2)
function2, = ax.plot([], [], lw=2)
&nbsp;
<i># funkce zavolaná při inicializaci animace</i>
def <strong>init</strong>():
    function.set_data([], [])
    function2.set_data([], [])
    return (function,function2,)
&nbsp;
<i># funkce zavolaná pro vytvoření každého snímku</i>
def <strong>animate</strong>(i):
    <i># hodnoty na x-ové ose</i>
    x = np.linspace(0, 2*np.pi, 100)
&nbsp;
    <i># hodnoty na y-ové ose: první funkce</i>
    y1 = np.sin(x + np.pi*i/50)
&nbsp;
    <i># hodnoty na y-ové ose: druhá funkce</i>
    y2 = np.cos(x + np.pi*i/25)
&nbsp;
    function.set_data(x, y1)
    function2.set_data(x, y2)
    return (function,function2,)
&nbsp;
anim = animation.FuncAnimation(fig, animate, init_func=init,
                               frames=100, interval=20, blit=True)
&nbsp;
&nbsp;
HTML(anim.to_html5_video())
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Postupná změna kontury grafu</h2>

<p>Podobným způsobem je možné animovat i postupnou změnu kontury funkce typu
z=f(x,y). Jeden krok (resp.&nbsp;přesněji řečeno příprava jednoho snímku
animace) může vypadat následovně:</p>

<pre>
<i># funkce zavolaná pro vytvoření každého snímku</i>
def <strong>animate</strong>(i):
    <i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
    Z = np.sin(R1)-np.cos(R2+2*np.pi*i/100)
&nbsp;
    <i># povolení zobrazení mřížk</i>y
    plt.grid(True)
&nbsp;
    <i># vytvoření grafu s konturami funkce z=f(x,y)</i>
    cnt = plt.contour(X, Y, Z)
&nbsp;
    return cnt
</pre>

<p>Kde <strong>plt</strong> je objekt představující celý graf:</p>

<pre>
<i># příprava grafu</i>
fig = plt.figure()
</pre>

<p>Problém ovšem spočívá v&nbsp;tom, že volání <strong>plt.contour</strong> do
grafu <i>přidá</i> další viditelné kontury, ovšem původní kontury nejsou
smazány, což vede mj.&nbsp;i k&nbsp;velmi pomalému výpočtu animace. Řešením,
resp.&nbsp;přesněji řečeno jedním z&nbsp;možných řešení, je vytvoření nového
grafu pro každý snímek.</p>

*** image ***
<p><i>Obrázek 35: Diář s&nbsp;deklarací celé animace.</i></p>

<p>Opět si &ndash; dnes již naposledy &ndash; ukážeme celý skript:</p>

<pre>
<i># Jupyter Notebook</i>
<i>#</i>
<i># Třicátý třetí demonstrační příklad:</i>
<i># - Animace grafu kontur</i>
&nbsp;
<i># import všech potřebných knihoven - Numpy a Matplotlibu</i>
import matplotlib
import numpy as np
import matplotlib.cm as cm
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
from matplotlib import animation, rc
from IPython.display import HTML
&nbsp;
<i># příprava grafu</i>
fig = plt.figure()
&nbsp;
delta = 0.1
&nbsp;
<i># průběh nezávislé proměnné x</i>
x = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y]</i>
X, Y = np.meshgrid(x, y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R1 = np.sqrt(X*X+Y*Y)
&nbsp;
<i># vzdálenost od bodu [3,3]</i>
R2 = np.sqrt((X-3)*(X-3)+(Y-3)*(Y-3))
&nbsp;
<i># funkce zavolaná pro vytvoření každého snímku</i>
def <strong>animate</strong>(i):
    <i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
    Z = np.sin(R1)-np.cos(R2+2*np.pi*i/100)
&nbsp;
    <i># povolení zobrazení mřížk</i>y
    plt.grid(True)
&nbsp;
    <i># vytvoření grafu s konturami funkce z=f(x,y)</i>
    cnt = plt.contour(X, Y, Z)
&nbsp;
    return cnt
&nbsp;
anim = animation.FuncAnimation(fig, animate,
                               frames=100, interval=20, blit=False)
&nbsp;
HTML(anim.to_html5_video())
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah následujícího článku</h2>

<p>Další část tohoto seriálu již nebude zaměřena na popis možností knihovny
<i>Matplotlib</i>. Namísto toho si ukážeme další důležitou oblast &ndash;
knihovny <i>Numpy</i> a <i>SciPy</i>, které se v&nbsp;souvislosti
s&nbsp;Jupyter Notebookem taktéž používají velmi často.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady (diáři)</h2>

<p>Všechny demonstrační příklady (resp.&nbsp;přesněji řečeno diáře),
s&nbsp;nimiž jsme se seznámili v&nbsp;předchozích kapitolách, byly uloženy do
Git repositáře umístěného na GitHubu (<a
href="https://github.com/tisnik/jupyter-notebook-examples/">https://github.com/tisnik/jupyter-notebook-examples/</a>).
Poslední verze souborů s&nbsp;diáři naleznete pod odkazy uvedenými
v&nbsp;tabulce pod tímto odstavcem. Diář by se měl otevřít přímo v&nbsp;rámci
stránky GitHubu:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis</th><th>Zdrojový kód</th></tr>
<tr><td> 1</td><td>graph19.ipynb</td><td>popisky os grafu, legenda i titulek</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph19.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph19.ipynb</a></td></tr>
<tr><td> 2</td><td>graph20.ipynb</td><td>popisky os grafu, legenda i titulek, hodnoty na x-ové ose</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph20.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph20.ipynb</a></td></tr>
<tr><td> 3</td><td>graph21.ipynb</td><td>zobrazení odchylek (příklad z&nbsp;minula)</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph21.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph21.ipynb</a></td></tr>
<tr><td> 4</td><td>graph22.ipynb</td><td>graf s&nbsp;konturami funkce z=f(x,y)</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph22.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph22.ipynb</a></td></tr>
<tr><td> 5</td><td>graph23.ipynb</td><td>přidání popisků k&nbsp;jednotlivým &bdquo;vrstevnicím&ldquo;</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph23.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph23.ipynb</a></td></tr>
<tr><td> 6</td><td>graph24.ipynb</td><td>zobrazení barev výšek u grafu s&nbsp;konturami</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph24.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph24.ipynb</a></td></tr>
<tr><td> 7</td><td>graph25.ipynb</td><td>jednoduchý trojrozměrný graf funkce z=f(x,y) &ndash; drátový model</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph25.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph25.ipynb</a></td></tr>
<tr><td> 8</td><td>graph26.ipynb</td><td>jednoduchý trojrozměrný graf funkce z=f(x,y) &ndash; vyplněné plochy</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph26.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph26.ipynb</a></td></tr>
<tr><td> 9</td><td>graph27.ipynb</td><td>zobrazení legendy &ndash; colorbaru</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph27.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph27.ipynb</a></td></tr>
<tr><td>10</td><td>graph28.ipynb</td><td>promítnutí grafu na plochy kolmé na osy</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph28.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph28.ipynb</a></td></tr>
<tr><td>11</td><td>graph29.ipynb</td><td>zobrazení 3D grafu funkce typu [x,y,z]=f(t)</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph29.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph29.ipynb</a></td></tr>
<tr><td>12</td><td>graph30.ipynb</td><td>zobrazení Lorenzova atraktoru</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph30.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph30.ipynb</a></td></tr>
<tr><td>13</td><td>graph31.ipynb</td><td>animace jedné funkce</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph31.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph31.ipynb</a></td></tr>
<tr><td>14</td><td>graph32.ipynb</td><td>animace dvou funkcí</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph32.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph32.ipynb</a></td></tr>
<tr><td>15</td><td>graph33.ipynb</td><td>animace změna kontury funkce</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph33.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/graph33.ipynb</a></td></tr>
</table>

<p>Skripty naprogramované v&nbsp;Pythonu pro přímé použití:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis</th><th>Zdrojový kód</th></tr>
<tr><td> 1</td><td>example19.py</td><td>popisky os grafu, legenda i titulek</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example19.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example19.py</a></td></tr>
<tr><td> 2</td><td>example20.py</td><td>popisky os grafu, legenda i titulek, hodnoty na x-ové ose</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example20.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example20.py</a></td></tr>
<tr><td> 3</td><td>example21.py</td><td>zobrazení odchylek</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example21.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example21.py</a></td></tr>
<tr><td> 4</td><td>example22.py</td><td>graf s&nbsp;konturami funkce z=f(x,y)</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example22.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example22.py</a></td></tr>
<tr><td> 5</td><td>example23.py</td><td>přidání popisků k&nbsp;jednotlivým &bdquo;vrstevnicím&ldquo;</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example23.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example23.py</a></td></tr>
<tr><td> 6</td><td>example24.py</td><td>zobrazení barev výšek u grafu s&nbsp;konturami</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example24.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example24.py</a></td></tr>
<tr><td> 7</td><td>example25.py</td><td>jednoduchý trojrozměrný graf funkce z=f(x,y) &ndash; drátový model</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example25.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example25.py</a></td></tr>
<tr><td> 8</td><td>example26.py</td><td>jednoduchý trojrozměrný graf funkce z=f(x,y) &ndash; vyplněné plochy</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example26.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example26.py</a></td></tr>
<tr><td> 9</td><td>example27.py</td><td>zobrazení legendy &ndash; colorbaru</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example27.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example27.py</a></td></tr>
<tr><td>10</td><td>example28.py</td><td>promítnutí grafu na plochy kolmé na osy</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example28.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example28.py</a></td></tr>
<tr><td>11</td><td>example29.py</td><td>zobrazení 3D grafu funkce typu [x,y,z]=f(t)</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example29.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example29.py</a></td></tr>
<tr><td>12</td><td>example30.py</td><td>zobrazení Lorenzova atraktoru</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example30.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example30.py</a></td></tr>
<tr><td>13</td><td>example31.py</td><td>animace jedné funkce</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example31.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example31.py</a></td></tr>
<tr><td>14</td><td>example32.py</td><td>animace dvou funkcí</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example32.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example32.py</a></td></tr>
<tr><td>15</td><td>example33.py</td><td>animace změna kontury funkce</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example33.py">https://github.com/tisnik/jupyter-notebook-examples/blob/master/matplotlib/example33.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Notebook interface<br />
<a href="https://en.wikipedia.org/wiki/Notebook_interface">https://en.wikipedia.org/wiki/Notebook_interface</a>
</li>

<li>Jypyter: open source, interactive data science and scientific computing across over 40 programming languages<br />
<a href="https://jupyter.org/">https://jupyter.org/</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

<li>showcase example code: xkcd.py<br />
<a href="https://matplotlib.org/xkcd/examples/showcase/xkcd.html">https://matplotlib.org/xkcd/examples/showcase/xkcd.html</a>
</li>

<li>Customising contour plots in matplotlib<br />
<a href="https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/">https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/</a>
</li>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

<li>The IPython Notebook<br />
<a href="http://ipython.org/notebook.html">http://ipython.org/notebook.html</a>
</li>

<li>nbviewer: a simple way to share Jupyter Notebooks<br />
<a href="https://nbviewer.jupyter.org/">https://nbviewer.jupyter.org/</a>
</li>

<li>Back to the Future: Lisp as a Base for a Statistical Computing System<br />
<a href="https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf">https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf</a>
</li>

<li>gg4clj: a simple wrapper for using R's ggplot2 in Clojure and Gorilla REPL<br />
<a href="https://github.com/JonyEpsilon/gg4clj">https://github.com/JonyEpsilon/gg4clj</a>
</li>

<li>Analemma: a Clojure-based SVG DSL and charting library<br />
<a href="http://liebke.github.io/analemma/">http://liebke.github.io/analemma/</a>
</li>

<li>Clojupyter: a Jupyter kernel for Clojure<br />
<a href="https://github.com/roryk/clojupyter">https://github.com/roryk/clojupyter</a>
</li>

<li>Incanter is a Clojure-based, R-like platform for statistical computing and graphics.<br />
<a href="http://incanter.org/">http://incanter.org/</a>
</li>

<li>Evolution of incanter (Gource Visualization)<br />
<a href="https://www.youtube.com/watch?v=TVfL5nPELr4">https://www.youtube.com/watch?v=TVfL5nPELr4</a>
</li>

<li>Questions tagged [incanter] (na Stack Overflow)<br />
<a href="https://stackoverflow.com/questions/tagged/incanter?sort=active">https://stackoverflow.com/questions/tagged/incanter?sort=active</a>
</li>

<li>Data Sorcery with Clojure<br />
<a href="https://data-sorcery.org/contents/">https://data-sorcery.org/contents/</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>R Markdown: The Definitive Guide<br />
<a href="https://bookdown.org/yihui/rmarkdown/">https://bookdown.org/yihui/rmarkdown/</a>
</li>

<li>Single-page application<br />
<a href="https://en.wikipedia.org/wiki/Single-page_application">https://en.wikipedia.org/wiki/Single-page_application</a>
</li>

<li>Video streaming in the Jupyter Notebook<br />
<a href="https://towardsdatascience.com/video-streaming-in-the-jupyter-notebook-635bc5809e85">https://towardsdatascience.com/video-streaming-in-the-jupyter-notebook-635bc5809e85</a>
</li>

<li>How IPython and Jupyter Notebook work<br />
<a href="https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html">https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html</a>
</li>

<li>Jupyter kernels<br />
<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels">https://github.com/jupyter/jupyter/wiki/Jupyter-kernels</a>
</li>

<li>Keras: The Python Deep Learning library<br />
<a href="https://keras.io/">https://keras.io/</a>
</li>

<li>TensorFlow<br />
<a href="https://www.tensorflow.org/">https://www.tensorflow.org/</a>
</li>

<li>PyTorch<br />
<a href="https://pytorch.org/">https://pytorch.org/</a>
</li>

<li>Seriál Torch: framework pro strojové učení<br />
<a href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/</a>
</li>

<li>Scikit-learn<br />
<a href="https://scikit-learn.org/stable/">https://scikit-learn.org/stable/</a>
</li>

<li>Java Interop (Clojure)<br />
<a href="https://clojure.org/reference/java_interop">https://clojure.org/reference/java_interop</a>
</li>

<li>Obrazy s&nbsp;balíčky Jupyter Notebooku pro Docker<br />
<a href="https://hub.docker.com/u/jupyter/#!">https://hub.docker.com/u/jupyter/#!</a>
</li>

<li>Správce balíčků Conda (dokumentace)<br />
<a href="https://docs.conda.io/en/latest/">https://docs.conda.io/en/latest/</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03</a>
</li>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

<li>Embedding Matplotlib Animations in Jupyter Notebooks<br />
<a href="http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/">http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

