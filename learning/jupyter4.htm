<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Jednou z největších předností Jupyter Notebooku je jeho schopnost integrovat v rámci diáře různé typy textů (včetně zdrojových kódů), rastrových obrázků i vektorových kreseb. Kromě grafů je tak možné pracovat přímo s rastrovými obrázky, ale například i s UML diagramy.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Jupyter Notebook &ndash; operace s&nbsp;rastrovými obrázky a UML diagramy, literate programming</a></p>
<p><a href="#k02">2. Konverze diáře do zdrojového kódu Pythonu</a></p>
<p><a href="#k03">3. Práce s&nbsp;rastrovými obrázky</a></p>
<p><a href="#k04">4. Změna velikosti obrázku</a></p>
<p><a href="#k05">5. Vykreslování na úrovni pixelů</a></p>
<p><a href="#k06">*** 6. Načtení obrázku z&nbsp;externího souboru</a></p>
<p><a href="#k07">*** 7. Vykreslování základních 2D primitiv</a></p>
<p><a href="#k08">*** 8. Aplikace jednoduchých konvolučních filtrů</a></p>
<p><a href="#k09">*** 9. Integrace Jupyter Notebooku s&nbsp;PlantUML</a></p>
<p><a href="#k10">*** 10. Diagram aktivit</a></p>
<p><a href="#k11">*** 11. Diagram tříd</a></p>
<p><a href="#k12">*** 12. Stavové diagramy</a></p>
<p><a href="#k13">*** 13. Hierarchické členění stavových diagramů</a></p>
<p><a href="#k14">*** 14. Tvorba sekvenčních diagramů v&nbsp;PlantUML</a></p>
<p><a href="#k15">*** 15. Složitější příklady</a></p>
<p><a href="#k16">*** 16. Jupyter Notebook a literate programming</a></p>
<p><a href="#k17">*** 17. Ukázka diáře s&nbsp;popisem všech kroků</a></p>
<p><a href="#k18">*** 18. Export diáře do dalších formátů</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Jupyter Notebook &ndash; operace s&nbsp;rastrovými obrázky a UML diagramy, literate programming</h2>

<p>Již v&nbsp;perexu dnešního článku jsme se zmínili o jedné velké přednosti
Jupyter Notebooku &ndash; o jeho schopnosti integrace textů popř. speciálních
textů (zdrojových kódů, MathML, Markdownu) s&nbsp;rastrovými obrázky (typicky
PNG a JPEG), s&nbsp;vektorovými kresbami (SVG) a v&nbsp;případě potřeby dokonce
i s&nbsp;animacemi. Tuto schopnost jsme si ukázali v&nbsp;dvojici článků [<a
href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">1</a>][<a
href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib-dokonceni/">2</a>]
o knihovně Matplotlib, ovšem ve skutečnosti jsou možnosti Jupyter Notebooku
v&nbsp;této oblasti mnohem rozsáhlejší a neomezené na &bdquo;pouhé grafy
funkcí&ldquo;. Dnes si ukážeme, jakým způsobem lze pracovat s&nbsp;rastrovými
obrázky, provádět přímo jejich úpravy (interaktivně) atd. Navíc lze
s&nbsp;vhodnými moduly do diářů integrovat i UML diagramy, které jsou
vykreslovány nástrojem <i>PlantUML</i>. Právě na příkladu integrace PlantUML je
patrné, že do diářů lze vkládat i vektorové kresby ve formátu SVG.</p>

<img src="https://i.iinfo.cz/images/171/jupyter3-graphs-12.png" class="image-408500" alt="*" width="812" height="612">
<p><i>Obrázek 1: Lorenzův atraktor vykreslený demonstračním příkladem popsaným
v&nbsp;předchozím článku, v&nbsp;němž jsme se zabývali převážně popisem
možností Matplotlibu.</i></p>

<p>V&nbsp;závěru článku se &ndash; prozatím ovšem jen ve stručnosti a nepříliš
přesně &ndash; seznámíme s&nbsp;termínem &bdquo;literate programming&ldquo; i
s&nbsp;tím, jak tento koncept souvisí s&nbsp;vlastním Jupyter Notebookem.</p>

<img src="https://i.iinfo.cz/images/171/jupyter3-graphs-8.png" class="image-408496" alt="" width="812" height="612">
<p><i>Obrázek 2: Plocha funkce z=f(x,y) používající barvovou mapu pojmenovanou
„coolwarm“. Opět se jedná o příklad vysvětlený minule.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Konverze diáře do zdrojového kódu Pythonu</h2>

<p>Před popisem použití rastrových obrázků a UML diagramů si však ještě ukažme,
jakým způsobem je možné vyexportovat obsah diáře do formy zdrojového kódu
(skriptu) v&nbsp;Pythonu. Takový skript lze v&nbsp;některých případech přímo
spustit z&nbsp;příkazové řádky (v&nbsp;závislosti na obsahu diáře &ndash; ne
vždy je to možné), popř.&nbsp;ho otevřít v&nbsp;IPythonu. Konverze do Pythonu
se provádí buď přímo z&nbsp;grafického uživatelského rozhraní Jupyter Notebooku
nebo &ndash; což bývá při práci na více diářích lepší &ndash; z&nbsp;příkazové
řádky:</p>

<pre>
$ <strong>jupyter nbconvert --to script raster_image.ipynb</strong>
</pre>

<p>Výsledek může <a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image.ipynb">pro
tento diář</a> vypadat následovně:</p>

<pre>
# coding: utf-8
&nbsp;
# In[36]:
&nbsp;
&nbsp;
import numpy as np
from matplotlib import pyplot as plt
&nbsp;
&nbsp;
# In[37]:
&nbsp;
&nbsp;
raster = np.zeros(shape=(450, 450, 3), dtype=np.uint8)
&nbsp;
&nbsp;
# In[38]:
&nbsp;
&nbsp;
plt.imshow(raster)
&nbsp;
&nbsp;
# In[39]:
&nbsp;
&nbsp;
plt.show()
</pre>

<p>Pro porovnání si ukažme obsah původního diáře:</p>

*** image ***
<p><i>Obrázek 3: Obsah původního diáře.</i></p>

<p>Můžeme vidět, že se samotné příkazy Pythonu převedly korektně a ostatní
informace (například názvy buňek) jsou zapsány v&nbsp;poznámkách.</p>

<p><div class="rs-tip-major">Poznámka: výše uvedený kód je plně spustitelný a
funkční i z&nbsp;příkazové řádky.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Práce s&nbsp;rastrovými obrázky</h2>

<p>Jak jsme si již řekli v&nbsp;úvodní kapitole, je možné v&nbsp;Jupyter
Notebooku zobrazit rastrové obrázky a to nejenom statické obrázky uložené na
lokálním disku (i to je však užitečné), ale především obrázky, které se získají
nějakým algoritmem. Ve skutečnosti existuje hned několik způsobů, jak toho
dosáhnout. Pravděpodobně nejjednodušší (i když nikoli nejrychlejší) je použití
knihovny Numpy v&nbsp;kombinaci s&nbsp;Matplotlibem. V&nbsp;Numpy totiž můžeme
vytvořit trojrozměrné pole reprezentující jednotlivé pixely obrázku. Prvky
tohoto pole mají typ <strong>uint8</strong> a samotné pole má formát
výška&times;šířka&times;3, kde 3 představuje tři barvové složky barvového
prostoru RGB. Zdroj pro prázdný (černý) obrázek o velikosti 450&times;450
pixelů se tedy vytvoří takto:</p>

<pre>
raster = np.zeros(shape=(450, 450, 3), dtype=np.uint8)
</pre>

<p>Barvové složky RGB mají hodnoty od 0 (nejnižší intenzita) do 255 (nejvyšší
intenzita).</p>

<p><div class="rs-tip-major">Poznámka: toto pole je v&nbsp;operační paměti
uloženo podobně, jako je tomu ve Fortranu nebo céčku (způsob uložení si lze
vybrat). Pole v&nbsp;Numpy jsou tedy v&nbsp;mnoha ohledech odlišná od vnořených
seznamů či n-tic Pythonu.</div></p>

<p>O zobrazení obsahu tohoto pole se postará knihovna Matplotlib, a to
například takto:</p>

<pre>
plt.imshow(raster)
&nbsp;
plt.show()
</pre>

*** image ***
<p><i>Obrázek 4: Toto je obrázek vložený do diáře.</i></p>

<p><div class="rs-tip-major">Poznámka: opět platí, že se jedná o nejjednodušší
způsob, který však v&nbsp;grafu ponechává souřadné osy a může obrázek zvětšit
či zmenšit (s&nbsp;volitelnou interpolací). Osobně se nám ale souřadné osy
zrovna v&nbsp;tomto kontextu mohou hodit.</div></p>

<p>Celý skript (obsah diáře) může vypadat takto:</p>

<pre>
import numpy as np
from matplotlib import pyplot as plt
&nbsp;
raster = np.zeros(shape=(450, 450, 3), dtype=np.uint8)
&nbsp;
plt.imshow(raster)
&nbsp;
plt.show()
</pre>

<p>Výsledný diář i s&nbsp;obrázkem je na adrese <a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image.ipynb</a>.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Změna velikosti obrázku</h2>

<p>Rastrový obrázek je možné na ploše Jupyter Notebooku do jisté míry zvětšit.
Trik spočívá v&nbsp;použití příkazu <strong>plt.figure</strong> (<a
href="https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.figure.html?highlight=pyplot%20figure#matplotlib.pyplot.figure">dokumentace</a>),
kterému se kromě ID grafu předají rozměry v&nbsp;palcích a popř.&nbsp;i
očekávané rozlišení výstupu (což pro obrazovku nebude přesné). Následně se na
ploše notebooku vytvoří potřebné místo a do něj se graf zobrazí:</p>

<pre>
plt.figure(1, figsize=(8,6), dpi=100)
plt.imshow(raster)
</pre>

<p>Na <a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_size.ipynb">výsledném
diáři</a> bude mít zobrazený obrázek velikost přibližně 500&times;500
pixelů.</p>

*** image ***
<p><i>Obrázek 5: Zvětšený obrázek vložený do diáře.</i></p>

<p>Celý skript, který je možné vložit do diáře:</p>

<pre>
import numpy as np
from matplotlib import pyplot as plt
&nbsp;
raster = np.zeros(shape=(450, 450, 3), dtype=np.uint8)
&nbsp;
plt.figure(1, figsize=(8,6), dpi=100)
plt.imshow(raster)
&nbsp;
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: i když se odstraní popisky os a spočítá
se rozlišení obrázku v&nbsp;palcích (z&nbsp;rozměru zadaného v&nbsp;pixelech),
může se stát, že kvůli zaokrouhlovacím chybám nebude mapování pixelů obrázku na
pixely obrazovky zcela přesné.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vykreslování na úrovni pixelů</h2>

<p>Hlavním důvodem, proč je rastrový obrázek reprezentován trojrozměrným polem
spravovaným knihovnou Numpy je fakt, že je v&nbsp;tomto případě velmi snadné
měnit barvy pixelů takového obrázku. Může se například jednat o výsledky
simulací apod. Ostatně podívejme se na jednoduchý příklad, v&nbsp;němž se do
obrázku vykreslí barevné přechody mezi zelenou a bílou barvou, přičemž se
v&nbsp;horizontální ose mění červená barvová složka a ve směru vertikální
složky barva modrá. Složka zelená je nastavena na nejvyšší intenzitu 255:</p>

<pre>
for y in range(HEIGHT):
    for x in range(WIDTH):
        raster[y][x][0] = x
        raster[y][x][1] = 255
        raster[y][x][2] = y
</pre>

*** image ***
<p><i>Obrázek 6: Vykreslený obrázek vložený do diáře.</i></p>

<p>Pro větší přehlednost je možné nadefinovat i indexy barvových složek:</p>

<pre>
RED = 0
GREEN = 1
BLUE = 2
&nbsp;
for y in range(HEIGHT):
    for x in range(WIDTH):
        raster[y][x][RED] = x
        raster[y][x][GREEN] = 255
        raster[y][x][BLUE] = y
</pre>

<p>Celý skript vložený do <a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_rendering.ipynb">tohoto
diáře</a> vypadá následovně:</p>

<pre>
import numpy as np
from matplotlib import pyplot as plt
&nbsp;
WIDTH = 256
HEIGHT = 256
raster = np.zeros(shape=(HEIGHT, WIDTH, 3), dtype=np.uint8)
&nbsp;
for y in range(HEIGHT):
    for x in range(WIDTH):
        raster[y][x][0] = x
        raster[y][x][1] = 255
        raster[y][x][2] = y
&nbsp;
plt.figure(1, figsize=(8,6), dpi=100)
plt.imshow(raster)
&nbsp;
plt.show()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Načtení obrázku z&nbsp;externího souboru</h2>

<p>Pro načtení obrázku z&nbsp;externího souboru je možné použít například knihovnu PIL/Pillow, která umožňuje práci s&nbsp;rastrovými obrázky uloženými v&nbsp;mnoha podporovaných formátech, aplikaci různých filtrů na obrázky, manipulaci s&nbsp;jednotlivými pixely, kreslení základních geometrických tvarů i textů do obrázků apod.</p>

<pre>
import numpy as np
from PIL import Image
from matplotlib import pyplot as plt

filename="house.png"
img = Image.open(filename)

plt.figure(1, figsize=(6,6), dpi=100)
plt.imshow(img)

plt.show()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vykreslování základních 2D primitiv</h2>

<pre>
import numpy as np
from PIL import Image, ImageDraw
from matplotlib import pyplot as plt

filename="house.png"
img = Image.open(filename)

draw = ImageDraw.Draw(img)
width, height = img.size[0], img.size[1]

for x in range(0, width, 16):
    draw.line((x, 0, x, height-1), fill=(255, 255, 255))

for y in range(0, height, 16):
    draw.line((0, y, width-1, y), fill=(255, 255, 255))

size = 2*width/72
plt.figure(1, figsize=(size,size), dpi=100)
plt.imshow(img, interpolation="none")

plt.show()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Aplikace jednoduchých konvolučních filtrů</h2>

<pre>
import numpy as np
from PIL import Image, ImageFilter
from matplotlib import pyplot as plt

filename="house.png"
img = Image.open(filename)

blurred = img.filter(ImageFilter.BLUR)

plt.figure(1, figsize=(8,6), dpi=100)
plt.imshow(blurred)

plt.show()
</pre>

<pre>
import numpy as np
from PIL import Image, ImageFilter
from matplotlib import pyplot as plt

filename="house.png"
img = Image.open(filename)

edges = img.filter(ImageFilter.FIND_EDGES)

plt.figure(1, figsize=(6,6), dpi=100)
plt.imshow(edges)

plt.show()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Integrace Jupyter Notebooku s&nbsp;PlantUML</h2>

<p>Nástroj <i>PlantUML</i> (<a
href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>)
dokáže na základě textového popisu UML diagramu vytvořit bitmapový obrázek či
SVG s&nbsp;tímto diagramem, přičemž uživatel může do jisté míry ovlivnit způsob
jeho vykreslení, přidat popis hran apod. V&nbsp;současné verzi <i>PlantUML</i>
je podporováno mnoho typů UML diagramů, zejména: diagram aktivit, stavový
diagram, diagram tříd, diagram objektů, diagram komponent, diagram užití a
sekvenční diagram. Ve skutečnosti sice UML popisuje i další typy diagramů,
ovšem <i>PlantUML</i> s&nbsp;velkou pravděpodobností dokáže pokrýt většinu
potřeb analytiků i programátorů, protože v&nbsp;nabídce podporovaných diagramů
jsou zastoupeny všechny tři kategorie: popis struktury informačního systému,
popis chování informačního systému a popis interakce či komunikace.
<i>PlantUML</i> je naprogramovaný v&nbsp;Javě, ovšem jedná se o relativně malý
program, který pro svůj běh nevyžaduje enormní množství zdrojů (diskový
prostor, RAM atd.). Pro uživatele <i>PlantUML</i> je na adrese <a
href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
k&nbsp;dispozici spustitelný Java archiv, dále je vhodné si stáhnout referenční
příručku k&nbsp;jazyku z&nbsp;adresy <a
href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti dokonce ani nemusí být
nutné PlantUML instalovat, protože je k&nbsp;dispozici server, který vykreslení
diagramu dokáže provést automaticky. Daní za tuto jednoduchost je fakt, že se
diagram (zdrojový kód) posílá do cizí služby.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Diagram aktivit</h2>

<p>Klasické vývojové diagramy sice nejsou v&nbsp;UML přímo podporovány, ale
existuje zde velmi podobný typ diagramu nazvaný <i>diagram aktivit</i>. Tímto
diagramem je možné do jisté míry nahradit vývojové diagramy s&nbsp;větvením i
programovými smyčkami. Diagram aktivit lze v&nbsp;<i>PlantUML</i> vytvořit
velmi jednoduchým způsobem, což si ostatně ukážeme na několika demonstračních
příkladech (diářích).</p>

<p>První příklad obsahuje definici diagramu aktivit, který obsahuje jen jedinou
akci, tj.&nbsp;uzel představující většinou dále nedělený krok, který se
v&nbsp;systému provádí. Diagram obsahuje symbol inicializace (černá tečka),
koncový bod (kružnice s&nbsp;černou tečkou uprostřed) a uzel s&nbsp;prováděným
krokem. Mezi symbolem inicializace a uzlem je nakreslena šipka, podobná šipka
je pak nakreslena mezi uzlem a koncovým bodem. V&nbsp;<i>PlantUML</i> je tento
diagram představován následujícím kódem (textovým souborem). Povšimněte si
použití symbolů (*) jak pro symbol inicializace, tak i pro koncový bod:</p>

<pre>
@startuml
(*) --&gt; "Aktivita"
"Aktivita" --&gt; (*)
@enduml
</pre>

<p>Deklarace začíná řádkem <strong>@startuml</strong> a končí řádkem
<strong>@enduml</strong>. Zajímavé je, že není nutné uvádět typ diagramu
&ndash; ten je odvozen z&nbsp;kontextu.</p>

<p>Jak již bylo řečeno v&nbsp;předchozí kapitole, je možné při tvorbě diagramů
s&nbsp;využitím nástroje <i>PlantUML</i> ovlivnit způsob vykreslení diagramu.
V&nbsp;mnoha případech se nevyhneme přidání popisu k&nbsp;jednotlivým šipkám
diagramu aktivit, což lze zajistit zápisem poznámky do hranatých závorek:</p>

<pre>
@startuml
(*) --&gt; [začátek procesu] "Aktivita1"
--&gt; [zpracování požadavku] "Aktivita2"
--&gt; [konec procesu] (*)
@enduml
</pre>

<p>Taktéž je možné změnit uspořádání uzlů (a tím pádem i směr šipek). Namísto
symbolu --&gt; představujícího šipku je možné alternativně použít:</p>

<ol>
<li>-down-&gt; odpovídá běžné šipce směřující (šikmo) dolů</li>
<li>-right-&gt; šipka orientovaná doprava</li>
<li>-&gt; stejný význam jako má předchozí symbol</li>
<li>-left-&gt; šipka orientovaná doleva</li>
<li>-up-&gt; šipka orientovaná nahoru</li>
</ol>

<p>Zkusme si nyní předchozí diagram změnit takovým způsobem, aby byly všechny
uzly umístěné v&nbsp;jedné horizontální rovině. Úprava je ve skutečnosti velmi
jednoduchá:</p>

<pre>
@startuml
(*) -right-&gt; [začátek procesu] "Aktivita1"
-right-&gt; [zpracování požadavku] "Aktivita2"
-right-&gt; [konec procesu] (*)
@enduml
</pre>

<p>Velmi důležitou součástí naprosté většiny diagramů aktivit je rozvětvení. To
je reprezentováno malým kosočtvercem, takže se tento prvek diagramu podobá
rozvětvení používaného v&nbsp;klasickém vývojovém diagramu, ovšem s&nbsp;tím
rozdílem, že se podmínka pro rozvětvení může (ale nemusí) psát do předchozího
kroku (zde si dovolím sémantiku diagramu aktivit nepatrně pozměnit, protože
samotné rozvětvení není v&nbsp;diagramu aktivit chápáno jako samostatný krok).
Pojďme si nyní ukázat, jak by se postupovalo při vytváření diagramu
analogickému známému vtípku o univerzálním návodu na opravu všeho: <a
href="http://joyreactor.com/post/287235">http://joyreactor.com/post/287235</a>.
Zde se již setkáme s&nbsp;potřebou větvení, které se do diagramu aktivit
zapisuje &ndash; což mnoho programátorů patrně potěší &ndash; pomocí slov
<strong>if</strong>, <strong>then</strong>, <strong>else</strong> a
<strong>endif</strong>. Jednoduché rozvětvení může být zapsáno následovně:</p>

<pre>
@startuml
(*) --&gt; "Does it move?"
if "" then
--&gt; [yes] "WD-40"
else
--&gt; [no] "Duct Tape"
endif
"WD-40" --&gt; (*)
"Duct Tape" --&gt; (*)
@enduml
</pre>

<p>Pro lepší názornost je možné jednotlivé podvětve zvýraznit odsazením, které
je samozřejmě taktéž podporováno:</p>

<pre>
@startuml
(*) --&gt; "Does it move?"
&nbsp;
if "" then
&nbsp;
    --&gt; [yes] "Should it?" as s1
    if "" then
        --&gt; [yes] "No problem" as np1
        np1 --&gt; (*)
    else
        --&gt; [no] "Use duct tape" as tape
        tape --&gt; (*)
    endif
&nbsp;
else
&nbsp;
    --&gt; [no] "Should it?" as s2
    if "" then
        --&gt; [yes] "Use WD-40" as wd40
        wd40 --&gt; (*)
    else
        --&gt; [no] "No problem" as np2
        np2 --&gt; (*)
    endif
&nbsp;
endif
&nbsp;
@enduml
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Diagram tříd</h2>

<p>Druhým velmi často používaným diagramem definovaným ve standardu UML je
diagram tříd (<i>class diagram</i>). V&nbsp;tomto typu diagramu je možné
zobrazit jednoduché i složitější vztahy mezi třídami, například fakt, že třída
<strong>Boolean</strong> je potomkem třídy <strong>Object</strong> (příklad je
převzatý z&nbsp;Javy):</p>

<pre>
@startuml
Object &lt;|-- Boolean
@enduml
</pre>

<p>Můžeme samozřejmě zobrazit i vazby mezi větším počtem tříd. Povšimněte si,
že nikde není zapotřebí specifikovat, že se má zobrazit diagram tříd a ne
diagram aktivit: toto rozhodnutí provede <i>PlantUML</i> automaticky:</p>

<pre>
@startuml
Object &lt;|-- Boolean
Object &lt;|-- String
Object &lt;|-- Number
Number &lt;|-- Integer
Number &lt;|-- Double
@enduml
</pre>

<p><div class="rs-tip-major">Poznámka: automatické rozhodnutí o typu grafu je
provedeno na základě jeho obsahu, tj.&nbsp;o jaké uzly se jedná a jak jsou mezi
sebou propojeny.</div></p>

<p>V&nbsp;případě, že je nutné zvýraznit i přístupová práva k&nbsp;atributům,
je vhodnější použít alternativní způsob zápisu metadat o třídě. Ten se podobá
zápisu deklarace třídy v&nbsp;C++ či Javě, přičemž znaky se speciálním významem
před názvem atributu určují viditelnost i přístupová práva:</p>

<pre>
@startuml
class TestClass {
-privateField
#protectedField
~packageProtectedField
+publicField
}
@enduml
</pre>

<p>Pro úplnost doplňme třídu i o metody s&nbsp;různými přístupovými právy:</p>

<pre>
@startuml
class TestClass {
-privateField
#protectedField
~packageProtectedField
+publicField
-privateMethod()
#protectedMethod()
~packageProtectedMethod()
+publicMethod()
}
@enduml
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Stavové diagramy</h2>

<p>Velmi často používaným typem UML diagramů jsou <i>stavové diagramy</i>
neboli <i>state diagrams</i>, které lze využít pro popis konečného počtu stavů
popisovaného systému a především pak přechodů mezi jednotlivými stavy (navíc se
zde objevuje koncept událostí). Ve své nejjednodušší podobě je možné stavovým
diagramem reprezentovat klasický stavový automat, ovšem možnosti UML jsou
v&nbsp;tomto případě ještě rozšířeny o takzvané pseudostavy. Příkladem
pseudostavu může být rozvětvení (<i>fork</i>) či naopak spojení (<i>join</i>)
popř.&nbsp;pseudostav rozhodování (ten však nemá stejný význam, jako rozvětvení
používané v&nbsp;případě výše popsaného <i>diagramu aktivit</i>).
V&nbsp;následujících kapitolách si ukážeme, jakým způsobem je možné <i>stavové
diagramy</i> vykreslovat v&nbsp;nástroji <i>PlantUML</i> i to, jak lze stavové
diagramy hierarchicky rozdělovat, což je v&nbsp;případě složitějších systémů
nezbytné pro zachování srozumitelnosti a současně i dostatečné podrobnosti
stavového diagramu.</p>

<p>V&nbsp;nástroji <i>PlantUML</i> se pro tvorbu stavových diagramů používá
především symbol <strong>--&gt;</strong>, jímž se značí přechod mezi dvěma
stavy systému. Na levé i pravé straně tohoto symbolu se může
v&nbsp;nejjednodušším případě nacházet jméno stavu popř.&nbsp;speciální symbol
[*] značící buď počáteční pseudostav (<i>initial state</i>) popř.&nbsp;koncový
pseudostav (<i>final state</i>). Podívejme se nyní na nejjednodušší možný
stavový diagram, který obsahuje jeden normální stav, počáteční pseudostav a
koncový pseudostav. Najdeme zde i dvojici přechodů. První přechod je vytvořen
mezi počátečním pseudostavem a jediným stavem automatu, další přechod pak mezi
tímto stavem a koncovým pseudostavem:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Stav
Stav --&gt; [*]
&nbsp;
@enduml
</pre>

<p><div class="rs-tip-major">Poznámka: na rozdíl od diagramu aktivit se zde
tedy používají symboly [*] a nikoli (*).</div></p>

<p>Stavový diagram samozřejmě můžeme dále rozšiřovat. Ve výchozím nastavení se
jednotlivé stavy kreslí pod sebe, ovšem ve chvíli, kdy se namísto symbolu
<strong>--&gt;</strong> použije symbol <strong>-&gt;</strong>, dokáže
<i>PlantUML</i> tyto stavy vykreslit vedle sebe:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Stav1
Stav1 --&gt; [*]
&nbsp;
Stav1 -&gt; Stav2
Stav2 --&gt; [*]
&nbsp;
@enduml
</pre>

<p>Podívejme se nyní na nepatrně složitější diagram se třemi různými stavy
reprezentujícími tři základní skupenství vody (za běžných podmínek). Tento
diagram nám bude v&nbsp;dalším textu sloužit jako základ pro další rozšiřování
a vylepšování (počáteční a koncový pseudostav je zde uveden pro úplnost a
taktéž proto, aby <i>PlantUML</i> korektně rozpoznal, jaký diagram má
nakreslit):</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Led
Led --&gt; Kapalina
Kapalina --&gt; Pára
Pára --&gt; Led
&nbsp;
@enduml
</pre>

<p>Diagram vytvořený předchozím příkladem ve skutečnosti není zcela korektní,
protože neobsahuje všechny fyzikálně možné přechody mezi třemi skupenstvími
vody. Musíme tedy diagram rozšířit i o další tři přechody. To je v&nbsp;našem
případě velmi snadné, což je ostatně patrné i při pohledu na následující
zdrojový kód. Povšimněte si, že každý stav je zde zmíněn několikrát:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Led
&nbsp;
Led --&gt; Kapalina
Kapalina --&gt; Led
&nbsp;
Kapalina --&gt; Pára
Pára --&gt; Kapalina
&nbsp;
Pára --&gt; Led
Led --&gt; Pára
&nbsp;
@enduml
</pre>

<p>K&nbsp;jednotlivým přechodům je možné přidat i popis, což je v&nbsp;praxi
velmi důležité. U našeho demonstračního příkladu je popis jednoduchý &ndash;
stavy představují skupenství vody, přechody pak proces vedoucí ke změně
skupenství &ndash; vypařování, zkapalnění, tání, tuhnutí, sublimace a
desublimace:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Led
&nbsp;
Led --&gt; Kapalina :tání
Kapalina --&gt; Led :tuhnutí
&nbsp;
Kapalina --&gt; Pára :vypařování
Pára --&gt; Kapalina :zkapalnění
&nbsp;
Pára --&gt; Led :desublimace
Led --&gt; Pára :sublimace
&nbsp;
@enduml
</pre>

<p>Vizuálně nepěkné vzájemné posunutí jednotlivých uzlů diagramu lze snadno (i
když ne zcela přesně) &bdquo;usměrnit&ldquo; pomocí symbolu
<strong>-&gt;</strong>, kterým se vedle sebe umístí uzly s&nbsp;názvy
&bdquo;Led&ldquo; a &bdquo;Kapalina&ldquo;:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Led
&nbsp;
Kapalina -&gt; Led :tuhnutí
Led -&gt; Kapalina :tání
&nbsp;
Kapalina --&gt; Pára :vypařování
Pára --&gt; Kapalina :zkapalnění
&nbsp;
Pára --&gt; Led :desublimace
Led --&gt; Pára :sublimace
&nbsp;
@enduml
</pre>

<p>Pro doplnění lze k&nbsp;jednotlivým uzlům (tedy stavům, skupenstvím)
přiřadit i další text. Nejjednodušeji to lze provést tak, jak je naznačeno
v&nbsp;dalším příkladu &ndash; uvedou se jména uzlů, dvojtečka a libovolný
text, který je do uzlů přidán:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Led
&nbsp;
Kapalina -&gt; Led :tuhnutí
Led -&gt; Kapalina :tání
&nbsp;
Kapalina --&gt; Pára :vypařování
Pára --&gt; Kapalina :zkapalnění
&nbsp;
Pára --&gt; Led :desublimace
Led --&gt; Pára :sublimace
&nbsp;
<strong>Kapalina: 0°C až 100°C</strong>
<strong>Led: &lt; 0°C</strong>
<strong>Pára: &gt; 100°C</strong>
&nbsp;
@enduml
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Hierarchické členění stavových diagramů</h2>

<p>Mnoho systémů je tak složitých, že jejich popis s&nbsp;využitím pouze
jediného &bdquo;plochého&ldquo; stavového diagramu by byl značně nepřehledný.
V&nbsp;tuto chvíli se však dá využít další vlastnost UML podporovaná i
nástrojem <i>PlantUML</i>. Jedná se o hierarchické rozčlenění stavového
diagramu na podcelky. Podívejme se na další demonstrační příklad, v&nbsp;němž
je první i druhý stav rozdělen na dva stavové poddiagramy. Ty jsou popsány
v&nbsp;samostatné sekci uzavřené do bloku začínajícího klíčovým slovem
<strong>state</strong>, za nímž následuje jméno stavu, který se má
rozložit:</p>

<pre>
@startuml
[*] --&gt; Stav1
Stav1 --&gt; Stav2
Stav2 --&gt; Stav1
&nbsp;
<strong>state</strong> Stav1 {
    [*] --&gt; Podstav11
    Podstav11 -&gt; Podstav12
    Podstav12 --&gt; Podstav13
    Podstav13 --&gt; [*]
}
&nbsp;
<strong>state</strong> Stav2 {
    [*] -&gt; Podstav21
    Podstav21 -&gt; Podstav22
    Podstav22 -&gt; [*]
}
&nbsp;
@enduml
</pre>

<p>Uveďme si ještě jeden příklad hierarchicky rozčleněného stavového diagramu.
Některé uzly hlavního diagramu i jeho podcelků jsou umístěny pod sebou, další
uzly pak vedle sebe. Toho lze dosáhnout, jak jsme si již řekli výše, vhodnou
kombinací symbolů <strong>-&gt;</strong> a <strong>--&gt;</strong>:</p>

<pre>
@startuml
[*] --&gt; Stav1
Stav1 --&gt; Stav2
Stav1 --&gt; Stav3
Stav2 -&gt; Stav3
Stav2 --&gt; Stav4
Stav3 --&gt; Stav4
Stav4 --&gt; [*]
&nbsp;
<strong>state</strong> Stav1 {
    [*] --&gt; Podstav11
    Podstav11 -&gt; Podstav12
    Podstav12 --&gt; Podstav13
    Podstav13 -left&gt; [*]
}
&nbsp;
<strong>state</strong> Stav2 {
    [*] --&gt; Podstav21
    Podstav21 --&gt; Podstav22
    Podstav22 --&gt; [*]
}
&nbsp;
<strong>state</strong> Stav3 {
    [*] --&gt; Podstav31
    Podstav31 --&gt; Podstav32
    Podstav32 --&gt; [*]
}
&nbsp;
<strong>state</strong> Stav4 {
    [*] -&gt; Podstav41
    Podstav41 -&gt; Podstav42
    Podstav42 -&gt; [*]
}
&nbsp;
@enduml
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Tvorba sekvenčních diagramů v&nbsp;PlantUML</h2>

<p><i>Stavové diagramy</i> popsané v&nbsp;předchozích kapitolách sice dokážou
názorně popsat stavy systému i možné přechody mezi jednotlivými stavy, ovšem
v&nbsp;mnoha případech vzniká potřeba podrobněji popsat i interakci mezi
popisovaným systémem a jeho okolím, interakci mezi dvěma nebo více moduly
systému či (na té nejpodrobnější úrovni) interakci probíhající mezi
jednotlivými objekty, z&nbsp;nichž se systém skládá. Pro tento účel slouží
v&nbsp;jazyku UML <i>sekvenční diagramy (sequence diagrams)</i>, v&nbsp;nichž
lze velmi názorným způsobem naznačit časovou posloupnost posílání zpráv mezi
různými typy objektů, popř.&nbsp;k&nbsp;zobrazené posloupnosti zpráv přidat
další komentáře a značky. Jeden z&nbsp;typických a poměrně často v&nbsp;praxi
používaných příkladů použití <i>sekvenčních diagramů</i> je popis komunikace
s&nbsp;využitím síťových i jiných protokolů. Ostatně právě na síťovém protokolu
(navázání spojení a zrušení spojení) si <i>sekvenční diagramy</i> ukážeme
prakticky v&nbsp;navazujícím textu.</p>

<p>Nejjednodušší sekvenční diagram je možné v&nbsp;nástroji <i>PlantUML</i>
deklarovat následujícím způsobem. Pomocí symbolu <strong>-&gt;</strong> je
naznačeno poslání zprávy mezi dvojicí objektů, v&nbsp;tomto případě mezi
klientem a serverem. Sekvenční diagram neobsahuje žádné počáteční ani koncové
pseudostavy, což je jeden z&nbsp;rozpoznávacích znaků mezi sekvenčním diagramem
a stavovým diagramem. Proto také při odstranění pseudostavů může
<i>PlantUML</i> automaticky změnit stavový diagram za diagram sekvenční, což je
samozřejmě chyba:</p>

<pre>
@startuml
&nbsp;
Client -&gt; Server: SYN
&nbsp;
@enduml
</pre>

<p>Druhý příklad je nepatrně složitější a ukazuje způsob navázání komunikace
v&nbsp;protokolu TCP (tzv. three-way handshake):</p>

<pre>
@startuml
&nbsp;
Client -&gt; Server: SYN
Server -&gt; Client: SYN-ACK
Client -&gt; Server: ACK
&nbsp;
@enduml
</pre>

<p>U sekvenčních diagramů se velmi často objevuje potřeba okomentovat
jednotlivé zprávy. To zajistí klíčové slovo <strong>note</strong> doplněné o
informaci, na které straně diagramu se má komentář objevit
(<strong>left</strong>, <strong>right</strong>).</p>

<pre>
@startuml
&nbsp;
<strong>autonumber</strong>
<strong>title</strong> TCP: Connection termination
&nbsp;
Client -[#red]&gt; Server: FIN
&nbsp;
<strong>note left</strong>: endpoint wishes to stop its half of the connection
&nbsp;
Client &lt;[#green]- Server: ACK
&nbsp;
<strong>note right</strong>: other end acknowledges with an ACK
&nbsp;
Client &lt;[#red]- Server: FIN
Client -[#green]&gt; Server: ACK
&nbsp;
@enduml
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Složitější příklady</h2>

<pre>
</pre>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Jupyter Notebook a literate programming</h2>

<p><i>&bdquo;"Změňme náš tradiční pohled na tvorbu programů. Místo toho abychom
předepsali počítači co má dělat, zkusme vysvětlovat lidským bytostem co chceme,
aby počítač dělal. 'Literární' programátor může být srovnáván s esejistou,
jehož hlavním cílem je srozumitelné vysvětlení a vybroušený styl. Takový autor
vybírá s tezaurem v ruce názvy proměnných a vysvětluje účel každé z nich. Snaží
se napsat program, který je srozumitelný, protože jeho principy jsou popsány
způsobem, který odpovídá lidskému myšlení a používá k tomu formální i
neformální prostředky, které se navzájem doplňují."&ldquo;<br />
Donald Knuth</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Ukázka diáře s&nbsp;popisem všech kroků</h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Export diáře do dalších formátů</h2>

<p>Diář, například ten zmíněný v&nbsp;předchozí kapitole, lze z&nbsp;Jupyter Notebooku v&nbsp;případě potřeby vyexportovat do dalších formátů. Můžeme se například pokusit o export do Markdownu, což bude úspěšné jen částečně, a to z&nbsp;toho důvodu, že standardní Markdown neobsahuje podporu pro tabulky. Ty tedy musí být vloženy pomocí HTML. Grafy jsou vyexportovány do rastrových obrázků uložených v&nbsp;samostatném podadresáři:</p>

<pre>
$ <strong>jupyter nbconvert --to markdown consumer_benchmarks.ipynb</strong>
</pre>

<p></p>

<pre>
$ <strong>jupyter nbconvert --to slides consumer_benchmarks.ipynb </strong>
</pre>

<p><div class="rs-tip-major">Poznámka: podporovány jsou i exporty do dalších formátů, včetně LaTeXu, PDF nebo AsciiDocu. Pro tyto typy exportů je však nutné mít nainstalován systém <a href="https://pandoc.org/">Pandoc</a></div>, jehož popisu bude věnován samostatný článek. Mimochodem &ndash; Pandoc je prakticky celý naprogramován v&nbsp;Haskellu.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady (resp.&nbsp;přesněji řečeno diáře),
s&nbsp;nimiž jsme se seznámili v&nbsp;předchozích kapitolách, byly uloženy do
Git repositáře umístěného na GitHubu (<a
href="https://github.com/tisnik/jupyter-notebook-examples/">https://github.com/tisnik/jupyter-notebook-examples/</a>).
Poslední verze souborů s&nbsp;diáři naleznete pod odkazy uvedenými
v&nbsp;tabulce pod tímto odstavcem. Diář by se měl otevřít přímo v&nbsp;rámci
stránky GitHubu:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis</th><th>Zdrojový kód</th></tr>
<tr><td> 1</td><td>raster_image.ipynb</td><td>vytvoření prázdného (černého) rastrového obrázku s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image.ipynb</a></td></tr>
<tr><td> 2</td><td>raster_image_size.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_size.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_size.ipynb</a></td></tr>
<tr><td> 3</td><td>raster_image_rendering.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_rendering.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_rendering.ipynb</a></td></tr>
<tr><td> 4</td><td>raster_image_load.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_load.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_load.ipynb</a></td></tr>
<tr><td> 5</td><td>raster_image_drawing.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_drawing.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_drawing.ipynb</a></td></tr>
<tr><td> 6</td><td>raster_image_filter.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_filter.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_filter.ipynb</a></td></tr>
<tr><td> 7</td><td>raster_image_filter_find_edges.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_filter_find_edges.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_image_filter_find_edges.ipynb</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>plantuml_activity_diagrams.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_activity_diagrams.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_activity_diagrams.ipynb</a></td></tr>
<tr><td> 9</td><td>plantuml_class_diagrams.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_class_diagrams.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_class_diagrams.ipynb</a></td></tr>
<tr><td>10</td><td>plantuml_state_diagrams.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_state_diagrams.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_state_diagrams.ipynb</a></td></tr>
<tr><td>11</td><td>plantuml_sequence_diagram.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_sequence_diagram.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_sequence_diagram.ipynb</a></td></tr>
<tr><td>12</td><td>plantuml_sequence_diagram_2.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_sequence_diagram_2.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_sequence_diagram_2.ipynb</a></td></tr>
<tr><td>13</td><td>plantuml_modules.ipynb</td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_modules.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/plantuml_modules.ipynb</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/">https://github.com/tisnik/jupyter-notebook-examples/blob/master/</a></td></tr>
</table>

<p>Skripty naprogramované v&nbsp;Pythonu pro přímé použití (spuštění):</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Popis</th><th>Zdrojový kód</th></tr>
<tr><td>1</td><td></td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_images/">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raaster_images/</a></td></tr>
<tr><td>2</td><td></td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_images/">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raaster_images/</a></td></tr>
<tr><td>3</td><td></td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_images/">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raaster_images/</a></td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_images/">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raaster_images/</a></td></tr>
<tr><td>5</td><td></td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_images/">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raaster_images/</a></td></tr>
<tr><td>6</td><td></td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_images/">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raaster_images/</a></td></tr>
<tr><td>7</td><td></td><td></td><td><a href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/raster_images/">https://github.com/tisnik/jupyter-notebook-examples/blob/master/raaster_images/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Notebook interface<br />
<a href="https://en.wikipedia.org/wiki/Notebook_interface">https://en.wikipedia.org/wiki/Notebook_interface</a>
</li>

<li>Jypyter: open source, interactive data science and scientific computing across over 40 programming languages<br />
<a href="https://jupyter.org/">https://jupyter.org/</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

<li>showcase example code: xkcd.py<br />
<a href="https://matplotlib.org/xkcd/examples/showcase/xkcd.html">https://matplotlib.org/xkcd/examples/showcase/xkcd.html</a>
</li>

<li>Customising contour plots in matplotlib<br />
<a href="https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/">https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/</a>
</li>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

<li>The IPython Notebook<br />
<a href="http://ipython.org/notebook.html">http://ipython.org/notebook.html</a>
</li>

<li>nbviewer: a simple way to share Jupyter Notebooks<br />
<a href="https://nbviewer.jupyter.org/">https://nbviewer.jupyter.org/</a>
</li>

<li>Back to the Future: Lisp as a Base for a Statistical Computing System<br />
<a href="https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf">https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf</a>
</li>

<li>gg4clj: a simple wrapper for using R's ggplot2 in Clojure and Gorilla REPL<br />
<a href="https://github.com/JonyEpsilon/gg4clj">https://github.com/JonyEpsilon/gg4clj</a>
</li>

<li>Analemma: a Clojure-based SVG DSL and charting library<br />
<a href="http://liebke.github.io/analemma/">http://liebke.github.io/analemma/</a>
</li>

<li>Clojupyter: a Jupyter kernel for Clojure<br />
<a href="https://github.com/roryk/clojupyter">https://github.com/roryk/clojupyter</a>
</li>

<li>Incanter is a Clojure-based, R-like platform for statistical computing and graphics.<br />
<a href="http://incanter.org/">http://incanter.org/</a>
</li>

<li>Evolution of incanter (Gource Visualization)<br />
<a href="https://www.youtube.com/watch?v=TVfL5nPELr4">https://www.youtube.com/watch?v=TVfL5nPELr4</a>
</li>

<li>Questions tagged [incanter] (na Stack Overflow)<br />
<a href="https://stackoverflow.com/questions/tagged/incanter?sort=active">https://stackoverflow.com/questions/tagged/incanter?sort=active</a>
</li>

<li>Data Sorcery with Clojure<br />
<a href="https://data-sorcery.org/contents/">https://data-sorcery.org/contents/</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>R Markdown: The Definitive Guide<br />
<a href="https://bookdown.org/yihui/rmarkdown/">https://bookdown.org/yihui/rmarkdown/</a>
</li>

<li>Single-page application<br />
<a href="https://en.wikipedia.org/wiki/Single-page_application">https://en.wikipedia.org/wiki/Single-page_application</a>
</li>

<li>Video streaming in the Jupyter Notebook<br />
<a href="https://towardsdatascience.com/video-streaming-in-the-jupyter-notebook-635bc5809e85">https://towardsdatascience.com/video-streaming-in-the-jupyter-notebook-635bc5809e85</a>
</li>

<li>How IPython and Jupyter Notebook work<br />
<a href="https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html">https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html</a>
</li>

<li>Jupyter kernels<br />
<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels">https://github.com/jupyter/jupyter/wiki/Jupyter-kernels</a>
</li>

<li>Keras: The Python Deep Learning library<br />
<a href="https://keras.io/">https://keras.io/</a>
</li>

<li>TensorFlow<br />
<a href="https://www.tensorflow.org/">https://www.tensorflow.org/</a>
</li>

<li>PyTorch<br />
<a href="https://pytorch.org/">https://pytorch.org/</a>
</li>

<li>Seriál Torch: framework pro strojové učení<br />
<a href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/</a>
</li>

<li>Scikit-learn<br />
<a href="https://scikit-learn.org/stable/">https://scikit-learn.org/stable/</a>
</li>

<li>Java Interop (Clojure)<br />
<a href="https://clojure.org/reference/java_interop">https://clojure.org/reference/java_interop</a>
</li>

<li>Obrazy s&nbsp;balíčky Jupyter Notebooku pro Docker<br />
<a href="https://hub.docker.com/u/jupyter/#!">https://hub.docker.com/u/jupyter/#!</a>
</li>

<li>Správce balíčků Conda (dokumentace)<br />
<a href="https://docs.conda.io/en/latest/">https://docs.conda.io/en/latest/</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03</a>
</li>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

<li>Embedding Matplotlib Animations in Jupyter Notebooks<br />
<a href="http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/">http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/</a>
</li>

<li>Literate programing, Kolokviální práce Pavla Starého<br />
<a href="https://www.fi.muni.cz/usr/jkucera/pv109/starylp.htm">https://www.fi.muni.cz/usr/jkucera/pv109/starylp.htm</a>
</li>

<li>PlantUML (home page)<br />
<a href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>
</li>

<li>PlantUML (download page)<br />
<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
</li>

<li>PlantUML (Language Reference Guide)<br />
<a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>
</li>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz - Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

