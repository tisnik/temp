<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V závěrečném článku o knihovně nanomsg se seznámíme s použitím této knihovny z dalších programovacích jazyků, zejména z Pythonu. Taktéž si ukážeme, že některé operace je možné provádět přímo z příkazové řádky s využitím nástrojů, které jsou dodávány přímo s knihovnou nanomsg.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Využití různých komunikačních strategií z&nbsp;příkazového řádku</a></p>
<p><a href="#k02">*** 2. Alternativní jména příkazů</a></p>
<p><a href="#k03">*** 3. Konfigurace adresy pro operace <strong>bind</strong> a <strong>connect</strong></a></p>
<p><a href="#k04">*** 4. Využití nástroje <strong>nanocat</strong> v&nbsp;praxi</a></p>
<p><a href="#k05">*** 5. Použití knihovny <strong>nanomsg</strong> v&nbsp;aplikacích naprogramovaných v&nbsp;Pythonu</a></p>
<p><a href="#k06">*** 6. Jednosměrná komunikace využívající strategii <strong>PUSH-PULL</strong> (<strong>PIPELINE</strong>)</a></p>
<p><a href="#k07">*** 7. Zpracování většího množství zpráv při použití strategie <strong>PUSH-PULL</strong></a></p>
<p><a href="#k08">*** 8. Jednosměrná komunikace mezi dvojicí uzlů s&nbsp;využitím strategie <strong>PAIR</strong></a></p>
<p><a href="#k09">*** 9. Obousměrná komunikace mezi dvojicí uzlů s&nbsp;využitím strategie <strong>PAIR</strong></a></p>
<p><a href="#k10">*** 10. Použití socketů ve funkci správce kontextu</a></p>
<p><a href="#k11">*** 11. Vytvoření klienta a serveru založených na strategii <strong>REQ-REP</strong></a></p>
<p><a href="#k12">*** 12. Chování serveru i klientů při vyšší zátěži</a></p>
<p><a href="#k13">*** 13. Implementace klasické komunikační strategie <strong>PUB-SUB</strong></a></p>
<p><a href="#k14">*** 14. Explicitní nastavení tématu (<i>topic</i>)</a></p>
<p><a href="#k15">*** 15. Příjemci s&nbsp;filtrací zpráv podle nastaveného tématu</a></p>
<p><a href="#k16">*** 16. Klient a server používající strategii <strong>SURVEY</strong></a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Odkazy na předchozí části seriálu o message brokerech</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Využití různých komunikačních strategií z&nbsp;příkazového řádku</h2>

<p>Nejprve si řekněme, jakým způsobem je možné knihovnu
<strong>nanomsg</strong> využít přímo na příkazovém řádku, tj.&nbsp;buď
v&nbsp;interaktivně zadávaných příkazech nebo ve skriptech naprogramovaných
například v&nbsp;BASHi. Součástí instalace knihovny <strong>nanomsg</strong> je
i nástroj nazvaný <strong>nanocat</strong>, který se spouští přímo na
příkazovém řádku a který lze nakonfigurovat takovým způsobem, že bude ve
vytvářené aplikaci zastupovat prakticky libovolný uzel (server, klient atd.).
Základní způsoby jeho použití jsou vypsány v&nbsp;příslušné manuálové stránce,
takže si jen v&nbsp;krátkosti uveďme, s&nbsp;jakými parametry je tuto utilitu
možné spustit:</p>

<pre>
nanocat --req {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC] [-AQ]
nanocat --rep {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-AQ]
nanocat --push {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC]
nanocat --pull {--connect ADDR|--bind ADDR} [-AQ]
nanocat --pub {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC]
nanocat --sub {--connect ADDR|--bind ADDR} [--subscribe PREFIX ...] [-AQ]
nanocat --surveyor {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC] [-AQ]
nanocat --respondent {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-AQ]
nanocat --bus {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC] [-AQ]
nanocat --pair {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC] [-AQ]
</pre>

<p>Povšimněte si, že první přepínač vždy uvádí režim, v&nbsp;jakém se uzel (ať
již ho budeme považovat za klienta či naopak za server) spustí. Podporováno je
všech šest komunikačních strategií, s&nbsp;nimiž jsme se již seznámili
v&nbsp;předchozích článcích, tj.:</p>

<table>
<tr><th>#</th><th>Strategie</th><th>Stručný popis</th><th>První typ uzlu</th><th>Druhý typ uzlu</th></tr>
<tr><td>1</td><td>PAIR</td><td>jedna z&nbsp;nejjednodušších komunikačních strategií s&nbsp;dvojicí uzlů a vazbou 1:1</td><td>nanocat --pair</td><td>nanocat --pair</td></tr>
<tr><td>2</td><td>PIPELINE</td><td>jednosměrná komunikace buď s&nbsp;vazbami 1:1 (jeden vysílač a jeden přijímač), popř.&nbsp;mezi více vysílači a několika přijímači</td><td>nanocat --push</td><td>nanocat --pull</td></tr>
<tr><td>3</td><td>PUBSUB</td><td>klasická komunikační strategie PUB-SUB neboli PUBLISH-SUBSCRIBE</td><td>nanocat --pub</td><td>nanocat --sub</td></tr>
<tr><td>4</td><td>REQREP</td><td>klasická komunikační strategie REQ-REP neboli REQUEST-RESPONSE</td><td>nanocat --req</td><td>nanocat --rep</td></tr>
<tr><td>5</td><td>SURVEY</td><td>speciální strategie umožňující získat stav více uzlů (procesů) jediným dotazem a mnoha odpovědmi</td><td>nanocat --surveyor</td><td>nanocat --respondent</td></tr>
<tr><td>6</td><td>BUS</td><td>složitější strategie, v&nbsp;níž se používá obecnější vazba M:N</td><td>nanocat --bus</td><td>nanocat --bus</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Alternativní jména příkazů</h2>

<p>V&nbsp;případě korektní instalace se kromě vlastního nástroje
<strong>nanocat</strong> vytvoří i řada symbolických odkazů (<i>symlinků</i>),
které všechny ukazují na binární soubor &bdquo;nanocat&ldquo;, ovšem již
nevyžadují použití prvního přepínače, jelikož funkce uzlu je plně patrná ze
jména symlinku:</p>

<pre>
nn_req {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC] [-AQ]
nn_rep {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-AQ]
nn_push {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC]
nn_pull {--connect ADDR|--bind ADDR} [-AQ]
nn_pub {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC]
nn_sub {--connect ADDR|--bind ADDR} [--subscribe PREFIX ...] [-AQ]
nn_surveyor {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC] [-AQ]
nn_respondent {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-AQ]
nn_bus {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC] [-AQ]
nn_pair {--connect ADDR|--bind ADDR} {--data DATA|--file PATH} [-i SEC] [-AQ]
</pre>

<p>Význam jednotlivých symbolických odkazů je pravděpodobně zřejmý:</p>

<table>
<tr><th>#</th><th>Přepínač pro <strong>nanocat</strong></th><th>Název symlinku</th><th>Typ socketu</th></tr>
<tr><td>1</td><td>--req</td><td>nn_req</td><td>NN_REQ</td></tr>
<tr><td>2</td><td>--rep</td><td>nn_rep</td><td>NN_REP</td></tr>
<tr><td>3</td><td>--push</td><td>nn_push</td><td>NN_PUSH</td></tr>
<tr><td>4</td><td>--pull</td><td>nn_pull</td><td>NN_PULL</td></tr>
<tr><td>5</td><td>--pub</td><td>nn_pub</td><td>NN_PUB</td></tr>
<tr><td>6</td><td>--sub</td><td>nn_sub</td><td>NN_SUB</td></tr>
<tr><td>7</td><td>--surveyor</td><td>nn_surveyor</td><td>NN_SURVEYOR</td></tr>
<tr><td>8</td><td>--respondent</td><td>nn_respondent</td><td>NN_RESPONDENT</td></tr>
<tr><td>9</td><td>--bus</td><td>nn_bus</td><td>NN_BUS</td></tr>
<tr><td>10</td><td>--pair</td><td>nn_pair</td><td>NN_PAIR</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Konfigurace adresy pro operace <strong>bind</strong> a <strong>connect</strong></h2>

<p>I význam dalšího přepínače zadaného na příkazovém řádku je zřejmý:</p>

<pre>
--connect ADDR
--bind ADDR
</pre>

<p>Tímto přepínačem se určuje režim otevření socketu. Buď se použije funkce
<strong>nn_bind()</strong>, která otevře port, na němž bude nástroj naslouchat
a čekat na připojení dalších uzlů. Nebo se naopak použije funkce
<strong>nn_connect()</strong> pro připojení k&nbsp;otevřenému portu. To, která
konkrétní metoda se použije, vyplývá z&nbsp;toho, které uzly považujeme za
&bdquo;servery&ldquo; a které za &bdquo;klienty&ldquo;. Typicky bývá serverem
ten uzel, který je z&nbsp;hlediska architektury celé aplikace stabilnější,
především z&nbsp;hlediska jeho dohledatelnosti a dostupnosti. Jak již víme
z&nbsp;předchozích dvou článků, není <strong>nanomsg</strong> plnohodnotným
message brokerem (i když je možné message brokera na <strong>nanomsg</strong>
postavit), takže funkci centrálního uzlu většinou přenášíme na uzly jiné.</p>

<p>Existují i další varianty těchto přepínačů, které se již vztahují
k&nbsp;jednotlivým typům podporovaných komunikačních kanálů. Připomeňme si, že
knihovna <i>nanomsg</i> podporuje následující způsoby komunikace jednotlivých
uzlů:</p>

<table>
<tr><th>#</th><th>Přenosový mechanismus</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>INPROC</td><td>komunikace v&nbsp;rámci jednoho procesu, například typizovaná komunikace mezi několika vlákny</td></tr>
<tr><td>2</td><td>IPC</td><td>komunikace mezi několika procesy běžícími na jednom počítači</td></tr>
<tr><td>3</td><td>TCP</td><td>komunikace mezi procesy běžícími na různých počítačích s&nbsp;využitím protokolu TCP</td></tr>
<tr><td>4</td><td>WS</td><td>komunikace mezi procesy běžícími na různých počítačích s&nbsp;využitím web socketů</td></tr>
</table>

<p>A právě pro dva velmi často používané komunikační kanály je možné použít
speciální formu přepínače, který současně volí jak typ komunikačního kanálu,
tak i příslušnou adresu (jejíž formát je pochopitelně konkrétně spjatý
s&nbsp;určitým kanálem):</p>

<table>
<tr><th>Typ kanálu</th><th>Přepínač pro <strong>nn_bind()</strong></th><th>Přepínač pro <strong>nn_connect()</strong></th></tr>
<tr><td>IPC</td><td>--bind-ipc,-X</td><td></td><td>--connect-ipc,-x</td></tr>
<tr><td>TCP na localhost</td><td>--bind-local,-L</td><td>--connect-local,-l</td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Využití nástroje <strong>nanocat</strong> v&nbsp;praxi</h2>

<p>Podívejme se nyní na způsob použití jednotlivých komunikačních strategií.
Příklady, které si uvedeme v&nbsp;dalším textu, budou zhruba odpovídat svým
céčkovým protějškům, které byly popsány <a
href="https://www.root.cz/clanky/dokonceni-popisu-komunikacnich-strategii-poskytovanych-knihovnou-nanomsg/">minule</a>
a <a
href="https://www.root.cz/clanky/implementace-ruznych-komunikacnich-strategii-s-vyuzitim-knihovny-nanomsg/">předminule</a>.</p>

<p>Spuštění serveru používajícího strategii PUSH-PULL:</p>

<pre>
$ <strong>nanocat --pull -Q -v --bind ipc:///tmp/example</strong>
</pre>

<p>Poslání (PUSH) zprávy na server:</p>

<pre>
$ <strong>nanocat --push --connect ipc:///tmp/example --data "test"</strong>
</pre>

<p>Poslání obsahu celého souboru na server:</p>

<pre>
$ <strong>nanocat --push --connect ipc:///tmp/example --file .bashrc</strong>
</pre>

<p>Spuštění příjemce zpráv založeného na strategii PUB-SUB:</p>

<pre>
$ <strong>nanocat --sub -Q -v --bind ipc:///tmp/example</strong>
</pre>

<p>Periodické posílání zprávy každou sekundu:</p>

<pre>
$ <strong>nanocat --pub --connect ipc:///tmp/example -i 1 --data "test"</strong>
</pre>

<p>Můžeme změnit i formát výpisu zpráv, namísto řetězců (uzavřených do
uvozovek) se může zapnout hexadecimální výstup:</p>

<pre>
$ <strong>nanocat --sub --hex -v --bind ipc:///tmp/example </strong>
&nbsp;
"\x74\x65\x73\x74"
"\x74\x65\x73\x74"
</pre>

<p>Výpis přijatých zpráv ve formě ASCII textů:</p>

<pre>
$ <strong>nanocat --sub --ascii -v --bind ipc:///tmp/example </strong>
&nbsp;
test
test
</pre>

<p>Podobný příklad, ovšem používající jednodušší komunikační strategii PAIR:</p>

<pre>
$ <strong>nanocat --pair -Q -v --bind ipc:///tmp/example</strong>
</pre>

<p>a:</p>

<pre>
$ <strong>nanocat --pair --connect ipc:///tmp/example -i 1 --data "test"</strong>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití knihovny <strong>nanomsg</strong> v&nbsp;aplikacích naprogramovaných v&nbsp;Pythonu</h2>

<p>Ve druhé části dnešního článku si popíšeme, jakým způsobem je možné použít
knihovnu <strong>nanomsg</strong> z&nbsp;programovacího jazyka Python. Python
pochopitelně není jediným programovacím jazykem, pro nějž vznikla knihovna
s&nbsp;rozhraním pro <strong>nanomsg</strong>, protože kromě nativního céčka
(<strong>nanomsg</strong> je psána v&nbsp;čistém C) existují rozhraní i pro
tyto programovací jazyky popř.&nbsp;platformy:</p>

<table>
<tr><th>Jazyk (platforma)</th><th>Knihovna/projekt s&nbsp;rozhraním</th></tr>
<tr><td>C</td><td>nanomsg</td></tr>
<tr><td>&nbsp;</td><td>NNG (nová reimplementace, viz poznámka v&nbsp;úvodní kapitole)</td></tr>
<tr><td>C++</td><td>nanomsgxx</td></tr>
<tr><td>&nbsp;</td><td>cppnanomsg</td></tr>
<tr><td>&nbsp;</td><td>nngpp (pro NNG)</td></tr>
<tr><td>Clojure</td><td>jnanomsg (voláno přes standardní Java interop)</td></tr>
<tr><td>D</td><td>nanomsg-wrapper</td></tr>
<tr><td>Dylan</td><td>nanomsg-dylan</td></tr>
<tr><td>Erlang</td><td>enm</td></tr>
<tr><td>Fortran</td><td>nanofort</td></tr>
<tr><td>Go</td><td>mangos (reimplementace v&nbsp;Go)</td></tr>
<tr><td>&nbsp;</td><td>mangos v2 (druhá verze)</td></tr>
<tr><td>&nbsp;</td><td>go-nanomsg</td></tr>
<tr><td>Haskell</td><td>nanomsg-haskell</td></tr>
<tr><td>&nbsp;</td><td>nanomsg</td></tr>
<tr><td>Haxe</td><td>hx-nanomsg</td></tr>
<tr><td>Swift</td><td>swiftc nanomsg</td></tr>
<tr><td>Java</td><td>jnano</td></tr>
<tr><td>&nbsp;</td><td>jnanomsg</td></tr>
<tr><td>&nbsp;</td><td>nngjvm (pro NNG)</td></tr>
<tr><td>JavaScript (Node.js)</td><td>node-nanomsg</td></tr>
<tr><td>Lua</td><td>lua-nanomsg</td></tr>
<tr><td>&nbsp;</td><td>luajit-nanomsg (pro systém <a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-8-zakladni-vlastnosti-trasovaciho-jitu/">LuaJIT</a>)</td></tr>
<tr><td>&nbsp;</td><td>luananomsg</td></tr>
<tr><td>.NET</td><td>NNanomsg</td></tr>
<tr><td>Ocaml</td><td>onanomsg</td></tr>
<tr><td>Perl</td><td>NanoMsg::Raw</td></tr>
<tr><td>PHP</td><td>php-nano</td></tr>
<tr><td>PicoLisp</td><td>picolisp-nanomsg FFI bindings</td></tr>
<tr><td>Python</td><td>nanomsg-python</td></tr>
<tr><td>&nbsp;</td><td>pynanomsg</td></tr>
<tr><td>&nbsp;</td><td>nnpy</td></tr>
<tr><td>&nbsp;</td><td>pynng (pro NNG, prozatím ve vývoji)</td></tr>
<tr><td>R</td><td>rnanomsg</td></tr>
<tr><td>Ruby</td><td>nn-core</td></tr>
<tr><td>&nbsp;</td><td>nanomsg</td></tr>
<tr><td>Rust</td><td>rust-nanomsg</td></tr>
<tr><td>&nbsp;</td><td>nng-rs (opět pro NNG)</td></tr>
<tr><td>Scheme (CHICKEN)</td><td>chicken-nanomsg</td></tr>
<tr><td>Smalltalk</td><td>NanoStrand</td></tr>
</table>

<p>V&nbsp;případě Pythonu existuje několik rozhraní mezi tímto programovacím
jazykem (přesněji řečeno mezi aplikacemi psanými v&nbsp;Pythonu) a knihovnou
<strong>nanomsg</strong>, ovšem nejvíce doporučovaná je knihovna nazvaná
jednoduše <strong>nanomsg-python</strong>, kterou naleznete na adrese <a
href="https://github.com/tonysimpson/nanomsg-python">https://github.com/tonysimpson/nanomsg-python</a>.
Tato knihovna je pochopitelně dostupná i na <a
href="https://pypi.org/project/nanomsg/">PyPi</a>, takže její instalace může
proběhnout naprosto stejným způsobem, jaký jsme si již popsali u jiných
Pythonních knihoven &ndash; pomocí nástroje <strong>pip</strong>
popř.&nbsp;<strong>pip3</strong>:</p>

<pre>
$ <strong>pip3 install nanomsg</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: před spuštěním demonstračních příkladů
popsaných v&nbsp;navazujících kapitolách je nutné zajistit, aby příklady našly
binární verzi knihovny <strong>nanomsg</strong>:</div></p>

<pre>
export LD_LIBRARY_PATH=/usr/local/lib64/
</pre>

<p><div class="rs-tip-major">Poznámka<sup>2</sup>:</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Jednosměrná komunikace využívající strategii <strong>PUSH-PULL</strong> (<strong>PIPELINE</strong>)</h2>

<p>Strategie nazvaná <strong>PIPELINE</strong> zajišťuje jednosměrný přenos
zpráv od vysílající aplikace (vlákna, procesu) k&nbsp;aplikaci přijímající.
V&nbsp;tom nejjednodušším případě existuje pouze jediný vysílač (neboli zdroj
zpráv, producent) a jediný přijímač (konzument). Nejprve se podívejme na
implementaci producenta, která je nepatrně jednodušší, zejména s&nbsp;ohledem
na to, že se nemusí pracovat s&nbsp;bufferem pro příjem zprávy.</p>

<p>Implementace zdroje zpráv je v&nbsp;případě Pythonu velmi jednoduchá (pokud ovšem prozatím vynecháme kontroly chybových stavů). Zdrojový kód naleznete na adrese <a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/01_sender_receiver/sender.py">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/01_sender_receiver/sender.py</a>:</p>

<pre>
from nanomsg import Socket, PUSH
&nbsp;
URL = "ipc:///tmp/example1"
&nbsp;
socket = Socket(PUSH)
print("Socket created")
&nbsp;
socket.connect(URL)
print("Connected to URL {}".format(URL))
&nbsp;
socket.send("Hello world!")
print("Message has been sent")
&nbsp;
socket.close()
print("Socket closed")
</pre>

<p></p>

<pre>
from nanomsg import Socket, PULL
&nbsp;
URL = "ipc:///tmp/example1"
&nbsp;
socket = Socket(PULL)
print("Socket created")
&nbsp;
socket.bind(URL)
print("Bound to URL {}".format(URL))
&nbsp;
message = socket.recv()
print("Received: {}".format(message))
&nbsp;
socket.close()
print("Socket closed")
</pre>

<pre>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;nanomsg/nn.h&gt;
#include &lt;nanomsg/pipeline.h&gt;
&nbsp;
const char *URL = "ipc:///tmp/example1";
&nbsp;
void <strong>sender</strong>(const char *url, const char *message)
{
    int message_size = strlen(message) + 1;
    int socket;
    int endpoint;
    int bytes;
&nbsp;
    socket = nn_socket(AF_SP, NN_PUSH);
    puts("Socket created");
&nbsp;
    endpoint = nn_connect(socket, url);
    puts("Remote endpoint added to the socket");
&nbsp;
    printf("Sending message '%s'\n", message);
    bytes = nn_send(socket, message, message_size, 0);
&nbsp;
    printf("Message with length %d bytes sent, flushing", bytes);
    sleep(1);
    puts("Done");
&nbsp;
    nn_shutdown(socket, endpoint);
}
&nbsp;
int <strong>main</strong>(const int argc, const char **argv)
{
    sender(URL, "Hello");
    sender(URL, "world");
    sender(URL, "!");
&nbsp;
    return 0;
}
</pre>

<pre>
#include &lt;stdio.h&gt;
#include &lt;nanomsg/nn.h&gt;
#include &lt;nanomsg/pipeline.h&gt;
&nbsp;
const char *URL = "ipc:///tmp/example1";
&nbsp;
void <strong>receiver</strong>(const char *url)
{
    int socket;
&nbsp;
    socket = nn_socket(AF_SP, NN_PULL);
    puts("Socket created");
&nbsp;
    nn_bind(socket, url);
    puts("Endpoint bound to socket");
&nbsp;
    puts("Waiting for messages...");
    while (1) {
        char *message = NULL;
        int bytes = nn_recv(socket, &amp;message, NN_MSG, 0);
        printf("Received message '%s' with length %d bytes\n", message, bytes); 
        nn_freemsg(message);
    }
}
&nbsp;
int <strong>main</strong>(int argc, char **argv)
{
    receiver(URL);
    return 0;
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zpracování většího množství zpráv při použití strategie <strong>PUSH-PULL</strong></h2>

<p>Samozřejmě si můžeme naprogramovat i klienta, který serveru pošle větší
množství zpráv s&nbsp;využitím strategie <strong>PUSH-PULL</strong>. Mezi
zprávy je vhodné vkládat nepatrné pauzy, aby se korektně vyprázdnily síťové
buffery a zpráva byla skutečně přenesena na server.</p>

<p>Zdrojový kód zdroje zpráv naleznete na adrese <a
href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/02_sender_receiver_more_messages/sender.py">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/02_sender_receiver_more_messages/sender.py</a>:</p>

<pre>
from nanomsg import Socket, PUSH
from time import sleep
&nbsp;
URL = "ipc:///tmp/example2"
&nbsp;
socket = Socket(PUSH)
print("Socket created")
&nbsp;
socket.connect(URL)
print("Connected to URL {}".format(URL))
&nbsp;
for i in range(10):
    socket.send("Hello world #{}".format(i+1))
    print("Message has been sent")
    sleep(0.1)
&nbsp;
socket.close()
print("Socket closed")
</pre>

<p>Server, který zprávy bude přijímat, lze naprogramovat například následujícím
způsobem. Povšimněte si, že zprávy jsou zpracovávány v&nbsp;nekonečné smyčce a
v&nbsp;jediném vláknu (což je pochopitelně nejjednodušší řešení).</p>

<p>Zdrojový kód příjemce zpráv je uložen na adrese <a
href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/02_sender_receiver_more_messages/receiver.py">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/02_sender_receiver_more_messages/receiver.py</a>:</p>

<pre>
from nanomsg import Socket, PULL
&nbsp;
URL = "ipc:///tmp/example2"
&nbsp;
socket = Socket(PULL)
print("Socket created")
&nbsp;
socket.bind(URL)
print("Bound to URL {}".format(URL))
&nbsp;
while True:
    message = socket.recv()
    print("Received: {}".format(message))
&nbsp;
socket.close()
print("Socket closed")
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Jednosměrná komunikace mezi dvojicí uzlů s&nbsp;využitím strategie <strong>PAIR</strong></h2>

<p>Druhá komunikační strategie se jmenuje <strong>PAIR</strong>. Tato strategie
umožňuje, aby mezi sebou jednotlivé uzly komunikovaly oboustranně, což nebylo
při použití strategie <strong>PIPELINE</strong> možné (přesněji možné bylo,
ovšem otevřením dvou komunikačních kanálů, což je velmi křehké řešení). I u
strategie <strong>PAIR</strong> vystupuje jeden z&nbsp;komunikujících uzlů ve
funkci serveru (otevírá svůj port a očekává, že se na něj připojí klient) a
druhý uzel ve funkci klienta. Ovšem až na tento rozdíl jsou si po navázání
spojení oba uzly rovnocenné, tj.&nbsp;každý z&nbsp;nich může vysílat i přijímat
zprávy, a to libovolným způsobem, který si zvolí sám programátor. Ten například
může implementovat jednoduchý systém typu dotaz-odpověď (což je ovšem lepší
realizovat strategií <strong>REQREP</strong>) či skutečně použít plnohodnotný
oboustranný komunikační kanál.</p>

<p>Opět se podívejme na <a
href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/03_pair_communication/node1.py">úplný
zdrojový kód prvního uzlu</a>, který po svém spuštění pošle zprávu uzlu druhému
a ihned poté se ukončí:</p>

<pre>
from nanomsg import Socket, PAIR
&nbsp;
URL = "ipc:///tmp/example3"
&nbsp;
socket = Socket(PAIR)
print("Socket created")
&nbsp;
socket.bind(URL)
print("Bound to URL {}".format(URL))
&nbsp;
socket.send("Hello world!")
print("Message has been sent")
&nbsp;
socket.close()
print("Socket closed")
</pre>

<p>Druhý uzel se pouze pokusí přijmout zprávu od uzlu prvního. Na tuto zprávu
nijak neodpovídá, pouze ji zobrazí na standardním výstupu. Následuje <a
href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/03_pair_communication/node2.py">výpis
zdrojového kódu druhého uzlu</a>:</p>

<pre>
from nanomsg import Socket, PAIR
&nbsp;
URL = "ipc:///tmp/example3"
&nbsp;
socket = Socket(PAIR)
print("Socket created")
&nbsp;
socket.connect(URL)
print("Connected to URL {}".format(URL))
&nbsp;
message = socket.recv()
print("Received: {}".format(message))
&nbsp;
socket.close()
print("Socket closed")
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Obousměrná komunikace mezi dvojicí uzlů s&nbsp;využitím strategie <strong>PAIR</strong></h2>

<p>Vzhledem k&nbsp;tomu, že v&nbsp;komunikační strategii <strong>PAIR</strong>
jsou si oba uzlu rovnocenné v&nbsp;tom, že každý může zprávy přijímat i
odesílat, můžeme předchozí příklad upravit takovým způsobem, že první uzel
nejdříve pošle zprávu o poté si přečte odpověď. Tento příklad naleznete na
adrese <a
href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/04_two_way_pair_communication/node1.py">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/04_two_way_pair_communication/node1.py</a>:</p>

<pre>
from nanomsg import Socket, PAIR
&nbsp;
URL = "ipc:///tmp/example4"
&nbsp;
socket = Socket(PAIR)
print("Socket created")
&nbsp;
socket.bind(URL)
print("Bound to URL {}".format(URL))
&nbsp;
socket.send("Hello world!")
print("Message has been sent")
&nbsp;
message = socket.recv()
print("Received response: {}".format(message))
&nbsp;
socket.close()
print("Socket closed")
</pre>

<p>Druhý uzel musí postupovat přesně naopak &ndash; nejdříve zprávu přijmout a
poté na ni odpovědět. V&nbsp;kódu tedy bude volání metod <strong>recv</strong>
a <strong>send</strong> prohozené, jak je to ostatně patrné již při pohledu <a
href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/04_two_way_pair_communication/node2.py">na
jeho zdrojový kód</a>:</p>

<pre>
from nanomsg import Socket, PAIR
&nbsp;
URL = "ipc:///tmp/example4"
&nbsp;
socket = Socket(PAIR)
print("Socket created")
&nbsp;
socket.connect(URL)
print("Connected to URL {}".format(URL))
&nbsp;
message = socket.recv()
print("Received: {}".format(message))
&nbsp;
socket.send("Thanks for your message '{}'".format(message))
print("Response has been sent")
&nbsp;
socket.close()
print("Socket closed")
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Použití socketů ve funkci správce kontextu</h2>

<pre>
from nanomsg import Socket, PAIR
&nbsp;
URL = "ipc:///tmp/example5"
&nbsp;
with Socket(PAIR) as socket:
    print("Socket created")
&nbsp;
    socket.bind(URL)
    print("Bound to URL {}".format(URL))
&nbsp;
    socket.send("Hello world!")
    print("Message has been sent")
&nbsp;
    message = socket.recv()
    print("Received response: {}".format(message))
&nbsp;
print("Socket closed")
</pre>

<pre>
from nanomsg import Socket, PAIR
&nbsp;
URL = "ipc:///tmp/example5"
&nbsp;
with Socket(PAIR) as socket:
    socket = Socket(PAIR)
    print("Socket created")
&nbsp;
    socket.connect(URL)
    print("Connected to URL {}".format(URL))
&nbsp;
    message = socket.recv()
    print("Received: {}".format(message))
&nbsp;
    socket.send("Thanks for your message '{}'".format(message))
    print("Response has been sent")
&nbsp;
print("Socket closed")
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vytvoření klienta a serveru založených na strategii <strong>REQ-REP</strong></h2>

<pre>
from nanomsg import Socket, REQ
&nbsp;
URL = "ipc:///tmp/example6"
&nbsp;
&nbsp;
def <strong>send_request</strong>(socket, request):
    socket.send(request)
&nbsp;
&nbsp;
def <strong>receive_response</strong>(socket):
    response = socket.recv()
    print("Received response: '{}'".format(response))
&nbsp;
&nbsp;
with Socket(REQ) as socket:
    print("Socket created")
&nbsp;
    socket.connect(URL)
    print("Connected to URL {}".format(URL))
&nbsp;
    send_request(socket, "Hello from 'first'!")
    print("Waiting for response...")
    receive_response(socket)
&nbsp;
print("Socket closed")
</pre>

<pre>
from nanomsg import Socket, REP
&nbsp;
URL = "ipc:///tmp/example6"
&nbsp;
&nbsp;
def <strong>receive_request</strong>(socket):
    request = socket.recv()
    print("Received request: '{}'".format(request))
&nbsp;
&nbsp;
def <strong>send_response</strong>(socket, response):
    socket.send(response)
&nbsp;
&nbsp;
with Socket(REP) as socket:
    print("Socket created")
&nbsp;
    socket.bind(URL)
    print("Bound to URL {}".format(URL))
&nbsp;
    print("Waiting for requests...")
    while True:
        receive_request(socket)
        send_response(socket, "ACK!")
&nbsp;
print("Socket closed")
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Chování serveru i klientů při vyšší zátěži</h2>

<pre>
from nanomsg import Socket, REP
&nbsp;
URL = "ipc:///tmp/example7"
&nbsp;
&nbsp;
def <strong>receive_request</strong>(socket):
    request = socket.recv()
    print("Received request: '{}'".format(request))
&nbsp;
&nbsp;
def <strong>send_response</strong>(socket, response):
    socket.send(response)
&nbsp;
&nbsp;
# pocitadlo pozadavku
received = 0
&nbsp;
with Socket(REP) as socket:
    print("Socket created")
&nbsp;
    socket.bind(URL)
    print("Bound to URL {}".format(URL))
&nbsp;
    print("Waiting for requests...")
    while True:
        receive_request(socket)
        received += 1
        print("Received {}th request".format(received))
        send_response(socket, "ACK!")
&nbsp;
print("Socket closed")
</pre>

<pre>
from nanomsg import Socket, REQ
&nbsp;
URL = "ipc:///tmp/example7"
&nbsp;
&nbsp;
def <strong>send_request</strong>(socket, request):
    socket.send(request)
&nbsp;
&nbsp;
def <strong>receive_response</strong>(socket):
    response = socket.recv()
    print("Received response: '{}'".format(response))
&nbsp;
&nbsp;
with Socket(REQ) as socket:
    print("Socket created")
&nbsp;
    socket.connect(URL)
    print("Connected to URL {}".format(URL))
&nbsp;
    for i in range(1000):
        send_request(socket, "Hello #{} from 'first'!".format(i))
        print("Waiting for response...")
        receive_response(socket)
&nbsp;
print("Socket closed")
</pre>

<pre>
from nanomsg import Socket, REQ
&nbsp;
URL = "ipc:///tmp/example7"
&nbsp;
&nbsp;
def <strong>send_request</strong>(socket, request):
    socket.send(request)
&nbsp;
&nbsp;
def <strong>receive_response</strong>(socket):
    response = socket.recv()
    print("Received response: '{}'".format(response))
&nbsp;
&nbsp;
with Socket(REQ) as socket:
    print("Socket created")
&nbsp;
    socket.connect(URL)
    print("Connected to URL {}".format(URL))
&nbsp;
    for i in range(1000):
        send_request(socket, "Hello #{} from 'second'!".format(i))
        print("Waiting for response...")
        receive_response(socket)
&nbsp;
print("Socket closed")
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Implementace klasické komunikační strategie <strong>PUB-SUB</strong></h2>

<p>V&nbsp;této kapitole si ukážeme způsob využití komunikační strategie
<strong>PUBSUB</strong>, s&nbsp;níž jsme se již v&nbsp;tomto seriálu mnohokrát
setkali. Tato strategie umožňuje rozesílat zprávy libovolnému množství
příjemců. Zdroj zpráv bude v&nbsp;tomto případě implementován jako server a typ
použitého socketu bude <strong>PUB</strong>. Podívejme se na <a
href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/08_pub_sub/publisher.py">zdrojový
kód producenta/zdroje zpráv</a>:</p>

<pre>
from time import sleep
from nanomsg import Socket, PUB
&nbsp;
URL = "ipc:///tmp/example8"
&nbsp;
&nbsp;
with Socket(PUB) as socket:
    print("Socket created")
&nbsp;
    socket.bind(URL)
    print("Bound to URL {}".format(URL))
&nbsp;
    for i in range(1, 1000):
        message = "Message #{}".format(i)
        print("Publishing message {}".format(message))
        socket.send(message)
        sleep(0.5)
&nbsp;
print("Socket closed")
</pre>

<p>Nejjednodušší, ovšem nefunkční :-) varianta příjemce zpráv se vytvoří
nepatrnou úpravou předchozích příkladů. Problém ovšem spočívá v&nbsp;tom, že u
komunikační strategie <strong>PUB-SUB</strong> je nutné specifikovat téma
(<i>topic</i>), protože v&nbsp;opačném případě budou všechny zprávy zahozeny.
Nicméně se podívejme na <a
href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/08_pub_sub/subscriber.py">úplný
zdrojový kód tohoto příkladu</a>:</p>

<pre>
from time import sleep
from nanomsg import Socket, SUB, SUB_SUBSCRIBE
&nbsp;
URL = "ipc:///tmp/example8"
&nbsp;
&nbsp;
def <strong>receive_message</strong>(socket):
    message = socket.recv()
    print("Received message: '{}'".format(message))
&nbsp;
&nbsp;
with Socket(SUB) as socket:
    print("Socket created")
&nbsp;
    socket.connect(URL)
    print("Connected to URL {}".format(URL))
&nbsp;
    while True:
        receive_message(socket)
&nbsp;
print("Socket closed")
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Explicitní nastavení tématu (<i>topic</i>)</h2>

<pre>
from time import sleep
from nanomsg import Socket, SUB, SUB_SUBSCRIBE
&nbsp;
URL = "ipc:///tmp/example9"
&nbsp;
&nbsp;
def <strong>receive_message</strong>(socket):
    message = socket.recv()
    print("Received message: '{}'".format(message))
&nbsp;
&nbsp;
with Socket(SUB) as socket:
    print("Socket created")
&nbsp;
    socket.connect(URL)
    socket.set_string_option(SUB, SUB_SUBSCRIBE, "")
    print("Connected to URL {}".format(URL))
&nbsp;
    while True:
        receive_message(socket)
&nbsp;
print("Socket closed")
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Příjemci s&nbsp;filtrací zpráv podle nastaveného tématu</h2>

<pre>
from time import sleep
from nanomsg import Socket, PUB
&nbsp;
URL = "ipc:///tmp/example10"
&nbsp;
&nbsp;
with Socket(PUB) as socket:
    print("Socket created")
&nbsp;
    socket.bind(URL)
    print("Bound to URL {}".format(URL))
&nbsp;
    for i in range(1, 1000):
        message = "Message A #{}".format(i)
        print("Publishing message {}".format(message))
        socket.send(message)
        sleep(0.5)
        message = "Message B #{}".format(i)
        print("Publishing message {}".format(message))
        socket.send(message)
        sleep(0.5)
&nbsp;
print("Socket closed")
</pre>

<pre>
from time import sleep
from nanomsg import Socket, SUB, SUB_SUBSCRIBE
&nbsp;
URL = "ipc:///tmp/example10"
&nbsp;
&nbsp;
def <strong>receive_message</strong>(socket):
    message = socket.recv()
    print("Received message: '{}'".format(message))
&nbsp;
&nbsp;
with Socket(SUB) as socket:
    print("Socket created")
&nbsp;
    socket.connect(URL)
    socket.set_string_option(SUB, SUB_SUBSCRIBE, "Message A")
    print("Connected to URL {}".format(URL))
&nbsp;
    while True:
        receive_message(socket)
&nbsp;
print("Socket closed")
</pre>

<pre>
from time import sleep
from nanomsg import Socket, SUB, SUB_SUBSCRIBE
&nbsp;
URL = "ipc:///tmp/example10"
&nbsp;
&nbsp;
def <strong>receive_message</strong>(socket):
    message = socket.recv()
    print("Received message: '{}'".format(message))
&nbsp;
&nbsp;
with Socket(SUB) as socket:
    print("Socket created")
&nbsp;
    socket.connect(URL)
    socket.set_string_option(SUB, SUB_SUBSCRIBE, "Message B")
    print("Connected to URL {}".format(URL))
&nbsp;
    while True:
        receive_message(socket)
&nbsp;
print("Socket closed")
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Klient a server používající strategii <strong>SURVEY</strong></h2>

<pre>
from nanomsg import Socket, SURVEYOR
from time import sleep
&nbsp;
URL = "ipc:///tmp/example11"
&nbsp;
&nbsp;
def <strong>send_survey</strong>(socket, message):
    socket.send(message)
&nbsp;
&nbsp;
def <strong>receive_answer</strong>(socket):
    answer = socket.recv()
    print("Received answer: '{}'".format(answer))
&nbsp;
&nbsp;
def <strong>wait_for_clients</strong>(seconds):
    print("Waiting for clients to connect...")
    for i in range(seconds, 0, -1):
        print(i)
        sleep(1)
&nbsp;
&nbsp;
with Socket(SURVEYOR) as socket:
    print("Socket created")
&nbsp;
    socket.bind(URL)
    print("Bound to URL {}".format(URL))
&nbsp;
    wait_for_clients(10)
&nbsp;
    send_survey(socket, "What do you get when you multiply six by nine?")
    print("Survey send, waiting for answers...")
&nbsp;
    answers = 0
&nbsp;
    while True:
        receive_answer(socket)
        answers += 1
        print("Processed {} answers so far".format(answers))
&nbsp;
print("Socket closed")
</pre>

<pre>
from nanomsg import Socket, RESPONDENT
from random import seed, randint
&nbsp;
URL = "ipc:///tmp/example11"
&nbsp;
&nbsp;
def <strong>receive_question</strong>(socket):
    question = socket.recv()
    print("Received question: '{}'".format(question))
&nbsp;
&nbsp;
def <strong>send_answer</strong>(socket, answer):
    print("Sending answer: '{}'".format(answer))
    socket.send(answer)
&nbsp;
&nbsp;
seed(None)
&nbsp;
with Socket(RESPONDENT) as socket:
    print("Socket created")
&nbsp;
    socket.connect(URL)
    print("Connected to URL {}".format(URL))
&nbsp;
    while True:
        receive_question(socket)
        print("Question received")
&nbsp;
        number = randint(0, 100)
        answer = "It must be {}".format(number)
&nbsp;
        send_answer(socket, answer)
        print("Answer sent")
&nbsp;
print("Socket closed")
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
from nanomsg import Socket, RESPONDENT
from random import seed, randint
&nbsp;
URL = "ipc:///tmp/example12"
&nbsp;
&nbsp;
def <strong>receive_question</strong>(socket):
    question = socket.recv()
    print("Received question: '{}'".format(question))
&nbsp;
&nbsp;
def <strong>send_answer</strong>(socket, answer):
    print("Sending answer: '{}'".format(answer))
    socket.send(answer)
&nbsp;
&nbsp;
seed(None)
&nbsp;
with Socket(RESPONDENT) as socket:
    print("Socket created")
&nbsp;
    socket.connect(URL)
    print("Connected to URL {}".format(URL))
&nbsp;
    while True:
        receive_question(socket)
        print("Question received")
&nbsp;
        number = randint(0, 100)
        answer = "Hello, I'm client #1. It must be {}".format(number)
&nbsp;
        send_answer(socket, answer)
        print("Answer sent")
&nbsp;
print("Socket closed")
</pre>

<pre>
from nanomsg import Socket, RESPONDENT
from random import seed, randint
&nbsp;
URL = "ipc:///tmp/example12"
&nbsp;
&nbsp;
def <strong>receive_question</strong>(socket):
    question = socket.recv()
    print("Received question: '{}'".format(question))
&nbsp;
&nbsp;
def <strong>send_answer</strong>(socket, answer):
    print("Sending answer: '{}'".format(answer))
    socket.send(answer)
&nbsp;
&nbsp;
seed(None)
&nbsp;
with Socket(RESPONDENT) as socket:
    print("Socket created")
&nbsp;
    socket.connect(URL)
    print("Connected to URL {}".format(URL))
&nbsp;
    while True:
        receive_question(socket)
        print("Question received")
&nbsp;
        number = randint(0, 100)
        answer = "Hello, I'm client #2. It must be {}".format(number)
&nbsp;
        send_answer(socket, answer)
        print("Answer sent")
&nbsp;
print("Socket closed")
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů vyvinutých
v&nbsp;programovacím jazyku Python byly uloženy do Git repositáře, který je
dostupný na adrese <a
href="https://github.com/tisnik/message-queues-examples">https://github.com/tisnik/message-queues-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce. Každý příklad se skládá
ze dvou samostatně překládaných a spouštěných souborů &ndash; producenta zpráv
a konzumenta zpráv:</p>

<table>
<tr><th>Příklad</th><th>Skript/kód</th><th>Popis</th><th>Cesta</th></tr>
<tr><td>1</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>1</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>2</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>3</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>5</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>6</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>7</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>8</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>8</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>9</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>9</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/">https://github.com/tisnik/message-queues-examples/blob/master/nanomsg-python/</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na předchozí části seriálu o message brokerech</h2>

<p>V&nbsp;této kapitole jsou uvedeny odkazy na všech sedmnáct předchozích <a
href="https://www.root.cz/serialy/message-brokery/">částí seriálu</a>,
v&nbsp;němž se zabýváme různými způsoby implementace front zpráv a k&nbsp;nim
přidružených technologií message brokerů:</p>

<ol>

<li>Použití nástroje RQ (Redis Queue) pro správu úloh zpracovávaných na pozadí<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/">https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/</a>
</li>

<li>Celery: systém implementující asynchronní fronty úloh pro Python<br />
<a href="https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python/">https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python/</a>
</li>

<li>Celery: systém implementující asynchronní fronty úloh pro Python (dokončení)<br />
<a href="https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python-dokonceni/">https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python-dokonceni/</a>
</li>

<li>RabbitMQ: jedna z nejúspěšnějších implementací brokera<br />
<a href="https://www.root.cz/clanky/rabbitmq-jedna-z-nejuspesnejsich-implementaci-brokera/">https://www.root.cz/clanky/rabbitmq-jedna-z-nejuspesnejsich-implementaci-brokera/</a>
</li>

<li>Pokročilejší operace nabízené systémem RabbitMQ<br />
<a href="https://www.root.cz/clanky/pokrocilejsi-operace-nabizene-systemem-rabbitmq/">https://www.root.cz/clanky/pokrocilejsi-operace-nabizene-systemem-rabbitmq/</a>
</li>

<li>ØMQ: knihovna pro asynchronní předávání zpráv<br />
<a href="https://www.root.cz/clanky/0mq-knihovna-pro-asynchronni-predavani-zprav/">https://www.root.cz/clanky/0mq-knihovna-pro-asynchronni-predavani-zprav/</a>
</li>

<li>Další možnosti poskytované knihovnou ØMQ<br />
<a href="https://www.root.cz/clanky/dalsi-moznosti-poskytovane-knihovnou-mq/">https://www.root.cz/clanky/dalsi-moznosti-poskytovane-knihovnou-mq/</a>
</li>

<li>Využití zařízení v knihovně ØMQ při tvorbě systému se složitější architekturou<br />
<a href="https://www.root.cz/clanky/vyuziti-zarizeni-v-knihovne-mq-pri-tvorbe-systemu-se-slozitejsi-architekturou/">https://www.root.cz/clanky/vyuziti-zarizeni-v-knihovne-mq-pri-tvorbe-systemu-se-slozitejsi-architekturou/</a>
</li>

<li>Další možnosti nabízené knihovnou ØMQ, implementace protokolů ØMQ v čisté Javě<br />
<a href="https://www.root.cz/clanky/dalsi-moznosti-nabizene-knihovnou-mq-implementace-protokolu-mq-v-ciste-jave/">https://www.root.cz/clanky/dalsi-moznosti-nabizene-knihovnou-mq-implementace-protokolu-mq-v-ciste-jave/</a>
</li>

<li>Apache ActiveMQ – další systém implementující message brokera<br />
<a href="https://www.root.cz/clanky/apache-activemq-dalsi-system-implementujici-message-brokera/">https://www.root.cz/clanky/apache-activemq-dalsi-system-implementujici-message-brokera/</a>
</li>

<li>Použití Apache ActiveMQ s protokolem STOMP<br />
<a href="https://www.root.cz/clanky/pouziti-apache-activemq-s-protokolem-stomp/">https://www.root.cz/clanky/pouziti-apache-activemq-s-protokolem-stomp/</a>
</li>

<li>Použití Apache ActiveMQ s protokolem AMQP, jazyk Go a message brokeři<br />
<a href="https://www.root.cz/clanky/pouziti-apache-activemq-s-protokolem-amqp-jazyk-go-a-message-brokeri/">https://www.root.cz/clanky/pouziti-apache-activemq-s-protokolem-amqp-jazyk-go-a-message-brokeri/</a>
</li>

<li>Komunikace s&nbsp;message brokery z&nbsp;programovacího jazyka Go<br />
<a href="https://www.root.cz/clanky/komunikace-s-message-brokery-z-programovaciho-jazyka-go/">https://www.root.cz/clanky/komunikace-s-message-brokery-z-programovaciho-jazyka-go/</a>
</li>

<li>Použití message brokeru NATS<br />
<a href="https://www.root.cz/clanky/pouziti-message-brokeru-nats/">https://www.root.cz/clanky/pouziti-message-brokeru-nats/</a>
</li>

<li>NATS Streaming Server<br />
<a href="https://www.root.cz/clanky/nats-streaming-server/">https://www.root.cz/clanky/nats-streaming-server/</a>
</li>

<li>Implementace různých komunikačních strategií s&nbsp;využitím knihovny nanomsg<br />
<a href="https://www.root.cz/clanky/implementace-ruznych-komunikacnich-strategii-s-vyuzitim-knihovny-nanomsg/">https://www.root.cz/clanky/implementace-ruznych-komunikacnich-strategii-s-vyuzitim-knihovny-nanomsg/</a>
</li>

<li>Dokončení popisu komunikačních strategií poskytovaných knihovnou nanomsg<br />
<a href="https://www.root.cz/clanky/dokonceni-popisu-komunikacnich-strategii-poskytovanych-knihovnou-nanomsg/">https://www.root.cz/clanky/dokonceni-popisu-komunikacnich-strategii-poskytovanych-knihovnou-nanomsg/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>nanomsg na GitHubu<br />
<a href="https://github.com/nanomsg/nanomsg">https://github.com/nanomsg/nanomsg</a>
</li>

<li>Referenční příručka knihovny <strong>nanomsg</strong><br />
<a href="https://nanomsg.org/v1.1.5/nanomsg.html">https://nanomsg.org/v1.1.5/nanomsg.html</a>
</li>

<li>nng (nanomsg-next-generation)<br />
<a href="https://github.com/nanomsg/nng">https://github.com/nanomsg/nng</a>
</li>

<li>Differences between nanomsg and ZeroMQ<br />
<a href="https://nanomsg.org/documentation-zeromq.html">https://nanomsg.org/documentation-zeromq.html</a>
</li>

<li>NATS<br />
<a href="https://nats.io/about/">https://nats.io/about/</a>
</li>

<li>NATS Streaming Concepts<br />
<a href="https://nats.io/documentation/streaming/nats-streaming-intro/">https://nats.io/documentation/streaming/nats-streaming-intro/</a>
</li>

<li>NATS Streaming Server<br />
<a href="https://nats.io/download/nats-io/nats-streaming-server/">https://nats.io/download/nats-io/nats-streaming-server/</a>
</li>

<li>NATS Introduction<br />
<a href="https://nats.io/documentation/">https://nats.io/documentation/</a>
</li>

<li>NATS Client Protocol<br />
<a href="https://nats.io/documentation/internals/nats-protocol/">https://nats.io/documentation/internals/nats-protocol/</a>
</li>

<li>NATS Messaging (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NATS_Messaging">https://en.wikipedia.org/wiki/NATS_Messaging</a>
</li>

<li>Stránka Apache Software Foundation<br />
<a href="http://www.apache.org/">http://www.apache.org/</a>
</li>

<li>Informace o portu 5672<br />
<a href="http://www.tcp-udp-ports.com/port-5672.htm">http://www.tcp-udp-ports.com/port-5672.htm</a>
</li>

<li>Třída MessagingHandler knihovny Qpid Proton<br />
<a href="https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._handlers.MessagingHandler-class.html">https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._handlers.MessagingHandler-class.html</a>
</li>

<li>Třída Event knihovny Qpid Proton<br />
<a href="https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._events.Event-class.html">https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._events.Event-class.html</a>
</li>

<li>package stomp (Go)<br />
<a href="https://godoc.org/github.com/go-stomp/stomp">https://godoc.org/github.com/go-stomp/stomp</a>
</li>

<li>Go language library for STOMP protocol<br />
<a href="https://github.com/go-stomp/stomp">https://github.com/go-stomp/stomp</a>
</li>

<li>python-qpid-proton 0.26.0 na PyPi<br />
<a href="https://pypi.org/project/python-qpid-proton/">https://pypi.org/project/python-qpid-proton/</a>
</li>

<li>Qpid Proton<br />
<a href="http://qpid.apache.org/proton/">http://qpid.apache.org/proton/</a>
</li>

<li>Using the AMQ Python Client<br />
<a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.1/html-single/using_the_amq_python_client/">https://access.redhat.com/documentation/en-us/red_hat_amq/7.1/html-single/using_the_amq_python_client/</a>
</li>

<li>Apache ActiveMQ<br />
<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>
</li>

<li>Apache ActiveMQ Artemis<br />
<a href="https://activemq.apache.org/artemis/">https://activemq.apache.org/artemis/</a>
</li>

<li>Apache ActiveMQ Artemis User Manual<br />
<a href="https://activemq.apache.org/artemis/docs/latest/index.html">https://activemq.apache.org/artemis/docs/latest/index.html</a>
</li>

<li>KahaDB<br />
<a href="http://activemq.apache.org/kahadb.html">http://activemq.apache.org/kahadb.html</a>
</li>

<li>Understanding the KahaDB Message Store<br />
<a href="https://access.redhat.com/documentation/en-US/Fuse_MQ_Enterprise/7.1/html/Configuring_Broker_Persistence/files/KahaDBOverview.html">https://access.redhat.com/documentation/en-US/Fuse_MQ_Enterprise/7.1/html/Configuring_Broker_Persistence/files/KahaDBOverview.html</a>
</li>

<li>Command Line Tools (Apache ActiveMQ)<br />
<a href="https://activemq.apache.org/activemq-command-line-tools-reference.html">https://activemq.apache.org/activemq-command-line-tools-reference.html</a>
</li>

<li>stomp.py 4.1.21 na PyPi<br />
<a href="https://pypi.org/project/stomp.py/">https://pypi.org/project/stomp.py/</a>
</li>

<li>Stomp Tutorial<br />
<a href="https://access.redhat.com/documentation/en-US/Fuse_Message_Broker/5.5/html/Connectivity_Guide/files/FMBConnectivityStompTelnet.html">https://access.redhat.com/documentation/en-US/Fuse_Message_Broker/5.5/html/Connectivity_Guide/files/FMBConnectivityStompTelnet.html</a>
</li>

<li>Heartbeat (computing)<br />
<a href="https://en.wikipedia.org/wiki/Heartbeat_(computing)">https://en.wikipedia.org/wiki/Heartbeat_(computing)</a>
</li>

<li>Apache Camel<br />
<a href="https://camel.apache.org/">https://camel.apache.org/</a>
</li>

<li>Red Hat Fuse<br />
<a href="https://developers.redhat.com/products/fuse/overview/">https://developers.redhat.com/products/fuse/overview/</a>
</li>

<li>Confusion between ActiveMQ and ActiveMQ-Artemis?<br />
<a href="https://serverfault.com/questions/873533/confusion-between-activemq-and-activemq-artemis">https://serverfault.com/questions/873533/confusion-between-activemq-and-activemq-artemis</a>
</li>

<li>Staré stránky projektu HornetQ<br />
<a href="http://hornetq.jboss.org/">http://hornetq.jboss.org/</a>
</li>

<li>Snapshot JeroMQ verze 0.4.4<br />
<a href="https://oss.sonatype.org/content/repositories/snapshots/org/zeromq/jeromq/0.4.4-SNAPSHOT/">https://oss.sonatype.org/content/repositories/snapshots/org/zeromq/jeromq/0.4.4-SNAPSHOT/</a>
</li>

<li>Difference between ActiveMQ vs Apache ActiveMQ Artemis<br />
<a href="http://activemq.2283324.n4.nabble.com/Difference-between-ActiveMQ-vs-Apache-ActiveMQ-Artemis-td4703828.html">http://activemq.2283324.n4.nabble.com/Difference-between-ActiveMQ-vs-Apache-ActiveMQ-Artemis-td4703828.html</a>
</li>

<li>Microservices communications. Why you should switch to message queues<br />
<a href="https://dev.to/matteojoliveau/microservices-communications-why-you-should-switch-to-message-queues--48ia">https://dev.to/matteojoliveau/microservices-communications-why-you-should-switch-to-message-queues--48ia</a>
</li>

<li>Stomp.py 4.1.19 documentation<br />
<a href="https://stomppy.readthedocs.io/en/stable/">https://stomppy.readthedocs.io/en/stable/</a>
</li>

<li>Repositář knihovny JeroMQ<br />
<a href="https://github.com/zeromq/jeromq/">https://github.com/zeromq/jeromq/</a>
</li>

<li>ØMQ &ndash; Distributed Messaging <br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>ØMQ Community<br />
<a href="http://zeromq.org/community">http://zeromq.org/community</a>
</li>

<li>Get The Software<br />
<a href="http://zeromq.org/intro:get-the-software">http://zeromq.org/intro:get-the-software</a>
</li>

<li>PyZMQ Documentation<br />
<a href="https://pyzmq.readthedocs.io/en/latest/">https://pyzmq.readthedocs.io/en/latest/</a>
</li>

<li>Module: zmq.decorators<br />
<a href="https://pyzmq.readthedocs.io/en/latest/api/zmq.decorators.html">https://pyzmq.readthedocs.io/en/latest/api/zmq.decorators.html</a>
</li>

<li>ZeroMQ is the answer, by Ian Barber<br />
<a href="https://vimeo.com/20605470">https://vimeo.com/20605470</a>
</li>

<li>ZeroMQ RFC<br />
<a href="https://rfc.zeromq.org/">https://rfc.zeromq.org/</a>
</li>

<li>ZeroMQ and Clojure, a brief introduction<br />
<a href="https://antoniogarrote.wordpress.com/2010/09/08/zeromq-and-clojure-a-brief-introduction/">https://antoniogarrote.wordpress.com/2010/09/08/zeromq-and-clojure-a-brief-introduction/</a>
</li>

<li>zeromq/czmq<br />
<a href="https://github.com/zeromq/czmq">https://github.com/zeromq/czmq</a>
</li>

<li>golang wrapper for CZMQ<br />
<a href="https://github.com/zeromq/goczmq">https://github.com/zeromq/goczmq</a>
</li>

<li>ZeroMQ version reporting in Python<br />
<a href="http://zguide.zeromq.org/py:version">http://zguide.zeromq.org/py:version</a>
</li>

<li>A Go interface to ZeroMQ version 4<br />
<a href="https://github.com/pebbe/zmq4">https://github.com/pebbe/zmq4</a>
</li>

<li>Broker vs. Brokerless<br />
<a href="http://zeromq.org/whitepapers:brokerless">http://zeromq.org/whitepapers:brokerless</a>
</li>

<li>Learning ØMQ with pyzmq<br />
<a href="https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/">https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/</a>
</li>

<li>Céčková funkce <strong>zmq_ctx_new</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-ctx-new">http://api.zeromq.org/4-2:zmq-ctx-new</a>
</li>

<li>Céčková funkce <strong>zmq_ctx_destroy</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-ctx-destroy">http://api.zeromq.org/4-2:zmq-ctx-destroy</a>
</li>

<li>Céčková funkce <strong>zmq_bind</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-bind">http://api.zeromq.org/4-2:zmq-bind</a>
</li>

<li>Céčková funkce <strong>zmq_unbind</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-unbind">http://api.zeromq.org/4-2:zmq-unbind</a>
</li>

<li>Céčková C funkce <strong>zmq_connect</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-connect">http://api.zeromq.org/4-2:zmq-connect</a>
</li>

<li>Céčková C funkce <strong>zmq_disconnect</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-disconnect">http://api.zeromq.org/4-2:zmq-disconnect</a>
</li>

<li>Céčková C funkce <strong>zmq_send</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-send">http://api.zeromq.org/4-2:zmq-send</a>
</li>

<li>Céčková C funkce <strong>zmq_recv</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-recv">http://api.zeromq.org/4-2:zmq-recv</a>
</li>

<li>Třída <strong>Context</strong> (Python)<br />
<a href="https://pyzmq.readthedocs.io/en/latest/api/zmq.html#context">https://pyzmq.readthedocs.io/en/latest/api/zmq.html#context</a>
</li>

<li>Třída <strong>Socket</strong> (Python)<br />
<a href="https://pyzmq.readthedocs.io/en/latest/api/zmq.html#socket">https://pyzmq.readthedocs.io/en/latest/api/zmq.html#socket</a>
</li>

<li>Python binding<br />
<a href="http://zeromq.org/bindings:python">http://zeromq.org/bindings:python</a>
</li>

<li>Why should I have written ZeroMQ in C, not C++ (part I)<br />
<a href="http://250bpm.com/blog:4">http://250bpm.com/blog:4</a>
</li>

<li>Why should I have written ZeroMQ in C, not C++ (part II) <br />
<a href="http://250bpm.com/blog:8">http://250bpm.com/blog:8</a>
</li>

<li>About Nanomsg<br />
<a href="https://nanomsg.org/">https://nanomsg.org/</a>
</li>

<li>Advanced Message Queuing Protocol<br />
<a href="https://www.amqp.org/">https://www.amqp.org/</a>
</li>

<li>Advanced Message Queuing Protocol na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol">https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol</a>
</li>

<li>Dokumentace k&nbsp;příkazu <strong>rabbitmqctl</strong><br />
<a href="https://www.rabbitmq.com/rabbitmqctl.8.html">https://www.rabbitmq.com/rabbitmqctl.8.html</a>
</li>

<li>RabbitMQ<br />
<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a>
</li>

<li>RabbitMQ Tutorials<br />
<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a>
</li>

<li>RabbitMQ: Clients and Developer Tools<br />
<a href="https://www.rabbitmq.com/devtools.html">https://www.rabbitmq.com/devtools.html</a>
</li>

<li>RabbitMQ na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/RabbitMQ">https://en.wikipedia.org/wiki/RabbitMQ</a>
</li>

<li>Streaming Text Oriented Messaging Protocol<br />
<a href="https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol">https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol</a>
</li>

<li>Message Queuing Telemetry Transport<br />
<a href="https://en.wikipedia.org/wiki/MQTT">https://en.wikipedia.org/wiki/MQTT</a>
</li>

<li>Erlang<br />
<a href="http://www.erlang.org/">http://www.erlang.org/</a>
</li>

<li>pika 0.12.0 na PyPi<br />
<a href="https://pypi.org/project/pika/">https://pypi.org/project/pika/</a>
</li>

<li>Introduction to Pika<br />
<a href="https://pika.readthedocs.io/en/stable/">https://pika.readthedocs.io/en/stable/</a>
</li>

<li>Langohr: An idiomatic Clojure client for RabbitMQ that embraces the AMQP 0.9.1 model<br />
<a href="http://clojurerabbitmq.info/">http://clojurerabbitmq.info/</a>
</li>

<li>AMQP 0-9-1 Model Explained<br />
<a href="http://www.rabbitmq.com/tutorials/amqp-concepts.html">http://www.rabbitmq.com/tutorials/amqp-concepts.html</a>
</li>

<li>Part 1: RabbitMQ for beginners - What is RabbitMQ?<br />
<a href="https://www.cloudamqp.com/blog/2015-05-18-part1-rabbitmq-for-beginners-what-is-rabbitmq.html">https://www.cloudamqp.com/blog/2015-05-18-part1-rabbitmq-for-beginners-what-is-rabbitmq.html</a>
</li>

<li>Downloading and Installing RabbitMQ<br />
<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a>
</li>

<li>celery na PyPi<br />
<a href="https://pypi.org/project/celery/">https://pypi.org/project/celery/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python <br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python (dokončení)<br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/</a>
</li>

<li>Redis Queue (RQ)<br />
<a href="https://www.fullstackpython.com/redis-queue-rq.html">https://www.fullstackpython.com/redis-queue-rq.html</a>
</li>

<li>Python Celery &amp; RabbitMQ Tutorial<br />
<a href="https://tests4geeks.com/python-celery-rabbitmq-tutorial/">https://tests4geeks.com/python-celery-rabbitmq-tutorial/</a>
</li>

<li>Flower: Real-time Celery web-monitor<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/monitoring.html#flower-real-time-celery-web-monitor">http://docs.celeryproject.org/en/latest/userguide/monitoring.html#flower-real-time-celery-web-monitor</a>
</li>

<li>Asynchronous Tasks With Django and Celery<br />
<a href="https://realpython.com/asynchronous-tasks-with-django-and-celery/">https://realpython.com/asynchronous-tasks-with-django-and-celery/</a>
</li>

<li>First Steps with Celery<br />
<a href="http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html">http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html</a>
</li>

<li>node-celery<br />
<a href="https://github.com/mher/node-celery">https://github.com/mher/node-celery</a>
</li>

<li>Full Stack Python: web development<br />
<a href="https://www.fullstackpython.com/web-development.html">https://www.fullstackpython.com/web-development.html</a>
</li>

<li>Introducing RQ<br />
<a href="https://nvie.com/posts/introducing-rq/">https://nvie.com/posts/introducing-rq/</a>
</li>

<li>Asynchronous Tasks with Flask and Redis Queue<br />
<a href="https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue">https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Stránky projektu Redis<br />
<a href="https://redis.io/">https://redis.io/</a>
</li>

<li>Introduction to Redis<br />
<a href="https://redis.io/topics/introduction">https://redis.io/topics/introduction</a>
</li>

<li>Try Redis<br />
<a href="http://try.redis.io/">http://try.redis.io/</a>
</li>

<li>Redis tutorial, April 2010 (starší, ale pěkně udělaný)<br />
<a href="https://static.simonwillison.net/static/2010/redis-tutorial/">https://static.simonwillison.net/static/2010/redis-tutorial/</a>
</li>

<li>Python Redis<br />
<a href="https://redislabs.com/lp/python-redis/">https://redislabs.com/lp/python-redis/</a>
</li>

<li>Redis: key-value databáze v paměti i na disku<br />
<a href="https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/">https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/</a>
</li>

<li>Praktický úvod do Redis (1): vaše distribuovaná NoSQL cache<br />
<a href="http://www.cloudsvet.cz/?p=253">http://www.cloudsvet.cz/?p=253</a>
</li>

<li>Praktický úvod do Redis (2): transakce<br />
<a href="http://www.cloudsvet.cz/?p=256">http://www.cloudsvet.cz/?p=256</a>
</li>

<li>Praktický úvod do Redis (3): cluster<br />
<a href="http://www.cloudsvet.cz/?p=258">http://www.cloudsvet.cz/?p=258</a>
</li>

<li>Connection pool<br />
<a href="https://en.wikipedia.org/wiki/Connection_pool">https://en.wikipedia.org/wiki/Connection_pool</a>
</li>

<li>Instant Redis Sentinel Setup<br />
<a href="https://github.com/ServiceStack/redis-config">https://github.com/ServiceStack/redis-config</a>
</li>

<li>How to install REDIS in Linux<br />
<a href="https://linuxtechlab.com/how-install-redis-server-linux/">https://linuxtechlab.com/how-install-redis-server-linux/</a>
</li>

<li>Redis RDB Dump File Format<br />
<a href="https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format">https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format</a>
</li>

<li>Lempel–Ziv–Welch<br />
<a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch">https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch</a>
</li>

<li>Redis Persistence<br />
<a href="https://redis.io/topics/persistence">https://redis.io/topics/persistence</a>
</li>

<li>Redis persistence demystified<br />
<a href="http://oldblog.antirez.com/post/redis-persistence-demystified.html">http://oldblog.antirez.com/post/redis-persistence-demystified.html</a>
</li>

<li>Redis reliable queues with Lua scripting<br />
<a href="http://oldblog.antirez.com/post/250">http://oldblog.antirez.com/post/250</a>
</li>

<li>Ost (knihovna)<br />
<a href="https://github.com/soveran/ost">https://github.com/soveran/ost</a>
</li>

<li>NoSQL<br />
<a href="https://en.wikipedia.org/wiki/NoSQL">https://en.wikipedia.org/wiki/NoSQL</a>
</li>

<li>Shard (database architecture)<br />
<a href="https://en.wikipedia.org/wiki/Shard_%28database_architecture%29">https://en.wikipedia.org/wiki/Shard_%28database_architecture%29</a>
</li>

<li>What is sharding and why is it important?<br />
<a href="https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important">https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important</a>
</li>

<li>What Is Sharding?<br />
<a href="https://btcmanager.com/what-sharding/">https://btcmanager.com/what-sharding/</a>
</li>

<li>Redis clients<br />
<a href="https://redis.io/clients">https://redis.io/clients</a>
</li>

<li>Category:Lua-scriptable software<br />
<a href="https://en.wikipedia.org/wiki/Category:Lua-scriptable_software">https://en.wikipedia.org/wiki/Category:Lua-scriptable_software</a>
</li>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Redis memory usage<br />
<a href="http://nosql.mypopescu.com/post/1010844204/redis-memory-usage">http://nosql.mypopescu.com/post/1010844204/redis-memory-usage</a>
</li>

<li>Ukázka konfigurace Redisu pro lokální testování<br />
<a href="https://github.com/tisnik/presentations/blob/master/redis/redis.conf">https://github.com/tisnik/presentations/blob/master/redis/redis.conf</a>
</li>

<li>Resque<br />
<a href="https://github.com/resque/resque">https://github.com/resque/resque</a>
</li>

<li>Nested transaction<br />
<a href="https://en.wikipedia.org/wiki/Nested_transaction">https://en.wikipedia.org/wiki/Nested_transaction</a>
</li>

<li>Publish–subscribe pattern<br />
<a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern</a>
</li>

<li>Messaging pattern<br />
<a href="https://en.wikipedia.org/wiki/Messaging_pattern">https://en.wikipedia.org/wiki/Messaging_pattern</a>
</li>

<li>Using pipelining to speedup Redis queries<br />
<a href="https://redis.io/topics/pipelining">https://redis.io/topics/pipelining</a>
</li>

<li>Pub/Sub<br />
<a href="https://redis.io/topics/pubsub">https://redis.io/topics/pubsub</a>
</li>

<li>ZeroMQ distributed messaging<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>ZeroMQ: Modern &amp; Fast Networking Stack<br />
<a href="https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/">https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/</a>
</li>

<li>Publish/Subscribe paradigm: Why must message classes not know about their subscribers?<br />
<a href="https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr">https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr</a>
</li>

<li>Python &amp; Redis PUB/SUB<br />
<a href="https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7">https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7</a>
</li>

<li>Message broker<br />
<a href="https://en.wikipedia.org/wiki/Message_broker">https://en.wikipedia.org/wiki/Message_broker</a>
</li>

<li>RESP Arrays<br />
<a href="https://redis.io/topics/protocol#array-reply">https://redis.io/topics/protocol#array-reply</a>
</li>

<li>Redis Protocol specification<br />
<a href="https://redis.io/topics/protocol">https://redis.io/topics/protocol</a>
</li>

<li>Redis Pub/Sub: Intro Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-intro/">https://www.redisgreen.net/blog/pubsub-intro/</a>
</li>

<li>Redis Pub/Sub: Howto Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-howto/">https://www.redisgreen.net/blog/pubsub-howto/</a>
</li>

<li>Comparing Publish-Subscribe Messaging and Message Queuing<br />
<a href="https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message">https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message</a>
</li>

<li>Apache Kafka<br />
<a href="https://kafka.apache.org/">https://kafka.apache.org/</a>
</li>

<li>Iron<br />
<a href="http://www.iron.io/mq">http://www.iron.io/mq</a>
</li>

<li>kue (založeno na Redisu, určeno pro node.js)<br />
<a href="https://github.com/Automattic/kue">https://github.com/Automattic/kue</a>
</li>

<li>Cloud Pub/Sub<br />
<a href="https://cloud.google.com/pubsub/">https://cloud.google.com/pubsub/</a>
</li>

<li>Introduction to Redis Streams<br />
<a href="https://redis.io/topics/streams-intro">https://redis.io/topics/streams-intro</a>
</li>

<li>glob (programming)<br />
<a href="https://en.wikipedia.org/wiki/Glob_(programming)">https://en.wikipedia.org/wiki/Glob_(programming)</a>
</li>

<li>Why and how Pricing Assistant migrated from Celery to RQ - Paris.py<br />
<a href="https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2">https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2</a>
</li>

<li>Enqueueing internals<br />
<a href="http://python-rq.org/contrib/">http://python-rq.org/contrib/</a>
</li>

<li>queue — A synchronized queue class<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Queue – A thread-safe FIFO implementation<br />
<a href="https://pymotw.com/2/Queue/">https://pymotw.com/2/Queue/</a>
</li>

<li>Queues<br />
<a href="http://queues.io/">http://queues.io/</a>
</li>

<li>Windows Subsystem for Linux Documentation<br />
<a href="https://docs.microsoft.com/en-us/windows/wsl/about">https://docs.microsoft.com/en-us/windows/wsl/about</a>
</li>

<li>RestMQ<br />
<a href="http://restmq.com/">http://restmq.com/</a>
</li>

<li>ActiveMQ<br />
<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>
</li>

<li>Amazon MQ<br />
<a href="https://aws.amazon.com/amazon-mq/">https://aws.amazon.com/amazon-mq/</a>
</li>

<li>Amazon Simple Queue Service<br />
<a href="https://aws.amazon.com/sqs/">https://aws.amazon.com/sqs/</a>
</li>

<li>Celery: Distributed Task Queue<br />
<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a>
</li>

<li>Disque, an in-memory, distributed job queue<br />
<a href="https://github.com/antirez/disque">https://github.com/antirez/disque</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Projekt RQ na PyPi<br />
<a href="https://pypi.org/project/rq/">https://pypi.org/project/rq/</a>
</li>

<li>rq-dashboard 0.3.12<br />
<a href="https://pypi.org/project/rq-dashboard/">https://pypi.org/project/rq-dashboard/</a>
</li>

<li>Job queue<br />
<a href="https://en.wikipedia.org/wiki/Job_queue">https://en.wikipedia.org/wiki/Job_queue</a>
</li>

<li>Why we moved from Celery to RQ<br />
<a href="https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq">https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq</a>
</li>

<li>Running multiple workers using Celery<br />
<a href="https://serverfault.com/questions/655387/running-multiple-workers-using-celery">https://serverfault.com/questions/655387/running-multiple-workers-using-celery</a>
</li>

<li>celery — Distributed processing<br />
<a href="http://docs.celeryproject.org/en/latest/reference/celery.html">http://docs.celeryproject.org/en/latest/reference/celery.html</a>
</li>

<li>Chains<br />
<a href="https://celery.readthedocs.io/en/latest/userguide/canvas.html#chains">https://celery.readthedocs.io/en/latest/userguide/canvas.html#chains</a>
</li>

<li>Routing<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/routing.html#automatic-routing">http://docs.celeryproject.org/en/latest/userguide/routing.html#automatic-routing</a>
</li>

<li>Celery Distributed Task Queue in Go<br />
<a href="https://github.com/gocelery/gocelery/">https://github.com/gocelery/gocelery/</a>
</li>

<li>Python Decorators<br />
<a href="https://wiki.python.org/moin/PythonDecorators">https://wiki.python.org/moin/PythonDecorators</a>
</li>

<li>Periodic Tasks<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html">http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html</a>
</li>

<li>celery.schedules<br />
<a href="http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab">http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab</a>
</li>

<li>Pros and cons to use Celery vs. RQ<br />
<a href="https://stackoverflow.com/questions/13440875/pros-and-cons-to-use-celery-vs-rq">https://stackoverflow.com/questions/13440875/pros-and-cons-to-use-celery-vs-rq</a>
</li>

<li>Priority queue<br />
<a href="https://en.wikipedia.org/wiki/Priority_queue">https://en.wikipedia.org/wiki/Priority_queue</a>
</li>

<li>Jupyter<br />
<a href="https://jupyter.org/">https://jupyter.org/</a>
</li>

<li>How IPython and Jupyter Notebook work<br />
<a href="https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html">https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html</a>
</li>

<li>Context Managers<br />
<a href="http://book.pythontips.com/en/latest/context_managers.html">http://book.pythontips.com/en/latest/context_managers.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

