<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Instalace serveru systému NATS</a></p>
<p><a href="#k03">*** 3. Instalace rozhraní NATSu pro aplikace vytvořené v&nbsp;programovacím jazyku Go</a></p>
<p><a href="#k04">*** 4. Nejjednodušší forma producenta zpráv</a></p>
<p><a href="#k05">*** 5. Malá odbočka &ndash; standardní balíček <strong>sync</strong></a></p>
<p><a href="#k06">*** 6. Konzument zpráv</a></p>
<p><a href="#k07">*** 7. Vylepšení producenta i konzumenta zpráv</a></p>
<p><a href="#k08">*** 8. Automatické odhlášení konzumenta po přijetí zadaného množství zpráv</a></p>
<p><a href="#k09">*** 9. Využití kanálů při posílání zpráv na straně producenta</a></p>
<p><a href="#k10">*** 10. Využití kanálů při příjmu zpráv na straně konzumenta</a></p>
<p><a href="#k11">*** 11. Implementace jednoduchého komunikačního protokolu</a></p>
<p><a href="#k12">*** 12. Komunikace přes dva kanály: producent zpráv</a></p>
<p><a href="#k13">*** 13. Komunikace přes dva kanály: konzument zpráv</a></p>
<p><a href="#k14">*** 14. Rozdělování zpráv mezi příjemce patřící do stejné skupiny (Queueing)</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Odkazy na předchozí části seriálu</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace serveru systému NATS</h2>

<p>Vzhledem k&nbsp;tomu, že si možnosti systému NATS nejprve popíšeme na klientských aplikacích naprogramovaných <a href="">v&nbsp;jazyce Go</a>, předpokládám, že máte tento jazyk (překladač, linker, základní balíčky a další nástroje) nainstalovaný způsobem, který byl popsán <a href="">v&nbsp;tomto článku</a>. V&nbsp;takovém případě je lepší server systému NATS nainstalovat naprosto stejným způsobem, jako jakýkoli jiný externí balíček jazyka Go. Nejprve přejdeme do adresáře, na nějž ukazuje proměnná <strong>GOPATH</strong>, což typicky bývá adresář <strong>~/go</strong>:</p>

<pre>
$ <strong>cd $GOPATH</strong>
</pre>

<p>Dále spustíme příkaz pro nainstalování balíčku, který obsahuje server NATSu:</p>

<pre>
</pre>

<p>Po instalaci by měla adresářová struktura začínající adresářem <strong>$GOPATH</strong> obsahovat mj.&nbsp;tyto podadresáře:</p>

<pre>
├── pkg
│   └── linux_amd64
│       └── github.com
│           └── <strong>nats-io</strong>
├── src
│   └── github.com
│       └── nats-io
│           ├── <strong>gnatsd</strong>
│           ├──
│           ├──
│           └──
</pre>

<p>Nejdůležitější však je, že se do podadresáře <strong>$GOPATH/bin</strong> nainstaloval spustitelný soubor <strong>gnatsd</strong>, který obsahuje celý NATS server. Můžeme si tedy otestovat jeho základní funkcionalitu. Nejprve přejdeme do adresáře <strong>$GOPATH/bin</strong>:</p>

<pre>
$ <strong>cd ~/go/bin</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: alternativně si můžete <strong>$GOPATH/bin</strong> přidat do proměnné <strong>PATH</strong>, takže spouštění všech binárních souborů vytvořených překladačem Go bude snadnější.</div></p>

<p>Poslední verze serveru NATS by měla být 2.0.0-RC-5, což si můžeme snadno ověřit:</p>

<pre>
$ <strong>./gnatsd --version</strong>
&nbsp;
nats-server: v2.0.0-RC5
</pre>

<p>K&nbsp;dispozici je samozřejmě nápověda se všemi podporovanými volbami, které lze předat přes příkazový řádek:</p>

<pre>
$ <strong>./gnatsd --help</strong>
&nbsp;
Usage: gnatsd [options]
&nbsp;
Server Options:
    -a, --addr &lt;host&gt;                Bind to host address (default: 0.0.0.0)
    -p, --port &lt;port&gt;                Use port for clients (default: 4222)
    -P, --pid &lt;file&gt;                 File to store PID
    -m, --http_port &lt;port&gt;           Use port for http monitoring
    -ms,--https_port &lt;port&gt;          Use port for https monitoring
    -c, --config &lt;file&gt;              Configuration file
    -sl,--signal &lt;signal&gt;[=&lt;pid&gt;]    Send signal to gnatsd process (stop, quit, reopen, reload)
&nbsp;
...
...
...
</pre>

<p>V&nbsp;tom nejjednodušším případě můžeme nechat server spuštěný s&nbsp;výchozími parametry:</p>

<pre>
$ <strong>./gnatsd</strong>
&nbsp;
[3918] 2019/03/16 16:40:26.554289 [INF] Starting nats-server version 2.0.0-RC5
[3918] 2019/03/16 16:40:26.554399 [INF] Git commit [not set]
[3918] 2019/03/16 16:40:26.554673 [INF] Listening for client connections on 0.0.0.0:4222
[3918] 2019/03/16 16:40:26.554707 [INF] Server id is NALRV2K2U77VDPICK3NM3XQV7TY4DM5UVG6FT6IJQWACUW3WA2BRM5SM
[3918] 2019/03/16 16:40:26.554726 [INF] Server is ready
</pre>

<p><div class="rs-tip-major">Poznámka: server NATSu si prozatím nechte spuštěný na pozadí popř.&nbsp;na jiném terminálu, protože ho budeme volat ve všech dnešních demonstračních příkladech.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace rozhraní NATSu pro aplikace vytvořené v&nbsp;programovacím jazyku Go</h2>

<p><a href="">Minule</a> jsme si mj.&nbsp;řekli, že existuje hned několik oficiálně podporovaných rozhraní NATSu pro klienty psané v&nbsp;různých programovacích jazycích popř.&nbsp;ekosystémech. Mezi tato rozhraní patří především:</p>

<table>
<tr><th> #</th><th>Programovací jazyk/ekosystém</th></tr>
<tr><td> 1</td><td>C</td></tr>
<tr><td> 2</td><td>C#</td></tr>
<tr><td> 3</td><td>Elixir</td></tr>
<tr><td> 4</td><td>Go</td></tr>
<tr><td> 5</td><td>Java</td></tr>
<tr><td> 6</td><td>NGINX</td></tr>
<tr><td> 7</td><td>Node.js</td></tr>
<tr><td> 8</td><td>Python Asyncio</td></tr>
<tr><td> 9</td><td>Python Tornado</td></tr>
<tr><td>10</td><td>Ruby</td></tr>
<tr><td>11</td><td>TypeScript</td></tr>
</table>

<p>Dnes si ukážeme použití rozhraní pro klienty naprogramované v&nbsp;jazyce Go. Samotná instalace tohoto rozhraní se prakticky nijak neliší od samotné instalace serveru, pouze se použije odlišný repositář s&nbsp;balíčkem:</p>

<pre>
</pre>

<p>Po instalaci by měla adresářová struktura začínající adresářem <strong>$GOPATH</strong> obsahovat mj.&nbsp;tyto podadresáře:</p>

<pre>
├── pkg
│   └── linux_amd64
│       └── github.com
│           └── <strong>nats-io</strong>
├── src
│   └── github.com
│       └── nats-io
│           ├── gnatsd
│           ├── <strong>go-nats</strong>
│           ├──
│           └──
</pre>

<p>Ve všech dalších příkladech tedy bude import balíčku nazvaného &bdquo;go-nats&ldquo; vypadat následovně:</p>

<pre>
import "github.com/nats-io/go-nats"
</pre>

<p>Popř.&nbsp;můžeme zvolit i jmenný alias <strong>nats</strong>:</p>

<pre>
import <strong>nats</strong> "github.com/nats-io/go-nats"
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nejjednodušší forma producenta zpráv</h2>

<p>Vytváření (resp.&nbsp;přesněji řečeno publikování) zpráv s&nbsp;jejich posláním na server NATS je relativně přímočaré. Nejprve se musíme připojit k&nbsp;serveru, což zajišťuje funkce <strong>Connect</strong>, které se předá URL serveru a výslednými hodnotami je buď struktura <strong>Conn</strong> představující připojení k&nbsp;serveru popř.&nbsp;objekt s&nbsp;popisem chyby, pokud se připojení z&nbsp;nějakého důvodu nepodařilo:</p>

<pre>
func <strong>Connect</strong>(url string, options ...Option) (*Conn, error)
</pre>

<p>Pro připojení k&nbsp;lokálně běžícímu serveru NATS můžeme použít konstantu nazvanou <strong>DefaultURL</strong>, která obsahuje tento řetězec:</p>

<pre>
"nats://localhost:4222"
</pre>

<p>Vlastní připojení bez kontroly případných chyb tedy může vypadat takto:</p>

<pre>
conn, _ := nats.Connect(nats.DefaultURL)
</pre>

<p>Jakmile je připojení navázáno, je možné zprávu poslat s&nbsp;využitím těchto metod datového typu <strong>Conn</strong>:</p>

<pre>
</pre>

<p>Nejjednodušší je použití první metody, která umožňuje poslat libovolnou sekvenci bajtů s&nbsp;určitým tématem (<i>topic</i>, <i>subject</i>):</p>

<pre>
conn.Publish(Subject, []byte("Hello World"))
</pre>

<p>Na konci pro jistotu zavoláme i metodu <strong>Flush</strong>, která zajistí skutečné poslání zprávy před odpojením klienta:</p>

<pre>
conn.Flush()
</pre>

<p><a href="">Celý zdrojový kód producenta</a>, který po svém spuštění pošle jednu zprávu s&nbsp;nastaveným tématem, vypadá takto:</p>

<pre>
package main
&nbsp;
import nats "github.com/nats-io/go-nats"
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, _ := nats.Connect(nats.DefaultURL)
&nbsp;
        conn.Publish(Subject, []byte("Hello World"))
&nbsp;
        conn.Flush()
}
</pre>

<p>Pokud tento příklad spustíte příkazem <strong>go run publisher.go</strong>, bude zpráva poslána serveru NATS, který se tuto zprávu bude snažit doručit případnému příjemci či více příjemcům (jejich počet není prakticky omezen). Ovšem v&nbsp;případě, že žádný příjemce nebude v&nbsp;daný okamžik připojen, bude zpráva zahozena, což je ovšem výchozí chování komunikační strategie typu <i>pub-sub</i>.</p>

<p><div class="rs-tip-major">Poznámka: předchozí příklad neprovádí korektní ukončení připojení ani nekontroluje případné chyby, ke kterým může dojít. Tento nedostatek odstraníme v&nbsp;rámci následujících kapitol.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Malá odbočka &ndash; standardní balíček <strong>sync</strong></h2>

<pre>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Konzument zpráv</h2>

<p>Nyní již známe všechny informace, které jsou zapotřebí pro implementaci jednoduchého konzumenta zpráv. Nejprve se opět musíme připojit k&nbsp;NATS serveru:</p>

<pre>
conn, _ := nats.Connect(nats.DefaultURL)
</pre>

<p>Následně vytvoříme synchronizační strukturu, která bude při zavolán metody <strong>Wait</strong> čekat na jedno volání metody <strong>Done</strong> (pochopitelně v&nbsp;jiné gorutině):</p>

<pre>
wg := sync.WaitGroup{}
wg.Add(1)
</pre>

<p>Nyní se již klient může přihlásit k&nbsp;odebrání zprávy s&nbsp;nastaveným tématem. Ve chvíli, kdy bude zpráva přijata, zavolá se specifikovaná anonymní funkce, která je druhým parametrem metody <strong>Subscribe</strong>:</p>

<pre>
conn.Subscribe(Subject, func(m *nats.Msg) {
        fmt.Printf("Received a message: %s\n", string(m.Data))
        wg.Done()
})
</pre>

<p>Povšimněte si, že po přijetí zprávy skutečně zavoláme metodu <strong>Done</strong>, čímž se sníží interní počitadlo v&nbsp;synchronizační struktuře.</p>

<p>Poslední volání ve funkci <strong>main</strong> zajistí čekání na příjem zprávy:</p>

<pre>
wg.Wait()
</pre>

<p><a href="">Úplný zdrojový kód producenta</a>, který po svém spuštění přijme jedinou zprávu s&nbsp;nastaveným tématem, vypadá následovně:</p>

<pre>
package main
&nbsp;
import (
        "fmt"
        nats "github.com/nats-io/go-nats"
        "sync"
)
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, _ := nats.Connect(nats.DefaultURL)
&nbsp;
        wg := sync.WaitGroup{}
        wg.Add(1)
&nbsp;
        conn.Subscribe(Subject, func(m *nats.Msg) {
                fmt.Printf("Received a message: %s\n", string(m.Data))
                wg.Done()
        })
        wg.Wait()
}
</pre>

<p>V&nbsp;této chvíli si můžeme zkusit ve dvou terminálech příjemce zpráv spustit:</p>

<pre>
$ <strong>go run subscriber.go</strong>
</pre>

<p>Oba příjemci by měli vyčkávat na doručení první zprávy.</p>

<p>V&nbsp;okamžiku, kdy se spustí producent zpráv:</p>

<pre>
$ <strong>go run publisher.go</strong>
</pre>

<p>...dostanou oba příjemci tu stejnou zprávu a automaticky se ukončí.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vylepšení producenta i konzumenta zpráv</h2>

<p>Naše první implementace producenta a konzumenta zcela jistě nebyla připravena pro produkční nasazení. Je tomu tak mj.&nbsp;i z&nbsp;toho důvodu, že nedocházelo ke korektní detekci chyb při připojení i při posílání zpráv a taktéž proto, že se spojení s&nbsp;NATS serverem automaticky neuzavíralo.</p>

<pre>
package main
&nbsp;
import (
        nats "github.com/nats-io/go-nats"
        "log"
)
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        println("Connected")
&nbsp;
        err2 := conn.Publish(Subject, []byte("Hello World"))
&nbsp;
        if err2 != nil {
                log.Fatal(err2)
        }
&nbsp;
        conn.Flush()
&nbsp;
        println("Message sent")
}
</pre>

<p></p>

<pre>
package main
&nbsp;
import (
        "fmt"
        nats "github.com/nats-io/go-nats"
        "log"
        "sync"
)
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        wg := sync.WaitGroup{}
        wg.Add(1)
&nbsp;
        sub, err2 := conn.Subscribe(Subject, func(m *nats.Msg) {
                fmt.Printf("Received a message: %s\n", string(m.Data))
                wg.Done()
        })
&nbsp;
        if err2 != nil {
                log.Fatal(err2)
        }
&nbsp;
        println("Subscribed", sub)
&nbsp;
        wg.Wait()
&nbsp;
        println("Finished waiting for message")
&nbsp;
        err3 := sub.Unsubscribe()
        if err3 != nil {
                log.Fatal(err3)
        }
&nbsp;
        println("Unsubscribed")
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Automatické odhlášení konzumenta po přijetí zadaného množství zpráv</h2>

<pre>
package main
&nbsp;
import (
        "fmt"
        nats "github.com/nats-io/go-nats"
        "log"
)
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        println("Connected")
&nbsp;
        for i := 1; i &lt; 10; i++ {
                message := fmt.Sprintf("Hello World #%d", i)
                err2 := conn.Publish(Subject, []byte(message))
                println("Published", message)
&nbsp;
                if err2 != nil {
                        log.Fatal(err2)
                }
&nbsp;
                conn.Flush()
        }
&nbsp;
        println("All messages sent")
}
</pre>

<pre>
package main
&nbsp;
import (
        "fmt"
        nats "github.com/nats-io/go-nats"
        "log"
        "sync"
)
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        wg := sync.WaitGroup{}
        wg.Add(5)
&nbsp;
        sub, err2 := conn.Subscribe(Subject, func(m *nats.Msg) {
                fmt.Printf("Received a message: %s\n", string(m.Data))
                wg.Done()
        })
&nbsp;
        if err2 != nil {
                log.Fatal(err2)
        }
&nbsp;
        println("Subscribed", sub)
&nbsp;
        err3 := sub.AutoUnsubscribe(5)
&nbsp;
        if err3 != nil {
                log.Fatal(err3)
        }
&nbsp;
        println("Automatic unsubscribe after 5 messages")
&nbsp;
        wg.Wait()
&nbsp;
        println("Finished waiting for messages")
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Využití kanálů při posílání zpráv na straně producenta</h2>

<pre>
package main
&nbsp;
import (
        nats "github.com/nats-io/go-nats"
        "log"
)
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        println("Connected")
&nbsp;
        econn, err2 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err2 != nil {
                log.Fatal(err)
        }
&nbsp;
        defer econn.Close()
&nbsp;
        channel := make(chan string)
        econn.BindSendChan(Subject, channel)
&nbsp;
        println("Channel created")
&nbsp;
        channel &lt;- "Hello World #1"
        channel &lt;- "Hello World #2"
        channel &lt;- "Hello World #3"
&nbsp;
        println("All messages sent")
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Využití kanálů při příjmu zpráv na straně konzumenta</h2>

<pre>
package main
&nbsp;
import (
        nats "github.com/nats-io/go-nats"
        "log"
)
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        econn, err2 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err2 != nil {
                log.Fatal(err)
        }
&nbsp;
        defer econn.Close()
&nbsp;
        channel := make(chan string)
        econn.BindRecvChan(Subject, channel)
&nbsp;
        println("Channel created")
&nbsp;
        println(&lt;-channel)
        println(&lt;-channel)
        println(&lt;-channel)
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Implementace jednoduchého komunikačního protokolu</h2>

<pre>
package main
&nbsp;
import (
        nats "github.com/nats-io/go-nats"
        "log"
)
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        println("Connected")
&nbsp;
        econn, err2 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err2 != nil {
                log.Fatal(err)
        }
&nbsp;
        defer econn.Close()
&nbsp;
        channel := make(chan string)
        econn.BindSendChan(Subject, channel)
&nbsp;
        println("Channel created")
&nbsp;
        channel &lt;- "Hello World #1"
        channel &lt;- "Hello World #2"
        channel &lt;- "Hello World #3"
        channel &lt;- "EXIT"
&nbsp;
        conn.Flush()
&nbsp;
        println("All messages sent")
}
</pre>

<pre>
package main
&nbsp;
import (
        nats "github.com/nats-io/go-nats"
        "log"
)
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        econn, err2 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err2 != nil {
                log.Fatal(err)
        }
&nbsp;
        defer econn.Close()
&nbsp;
        channel := make(chan string)
        econn.BindRecvChan(Subject, channel)
&nbsp;
        println("Channel created")
&nbsp;
        for {
                message := &lt;-channel
                println(message)
                if message == "EXIT" {
                        println("Received EXIT message...")
                        break
                }
        }
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Komunikace přes dva kanály: producent zpráv</h2>

<pre>
package main
&nbsp;
import (
        nats "github.com/nats-io/go-nats"
        "log"
        "time"
)
&nbsp;
const Subject = "test1"
const Control = "test2"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        println("Connected")
&nbsp;
        econn, err2 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err2 != nil {
                log.Fatal(err2)
        }
&nbsp;
        defer econn.Close()
&nbsp;
        cconn, err3 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err3 != nil {
                log.Fatal(err3)
        }
&nbsp;
        defer cconn.Close()
&nbsp;
        data_channel := make(chan string)
        econn.BindSendChan(Subject, data_channel)
&nbsp;
        println("Data channel created")
&nbsp;
        control_channel := make(chan string)
        cconn.BindSendChan(Control, control_channel)
&nbsp;
        println("Control channel created")
&nbsp;
        data_channel &lt;- "Hello World #1"
        data_channel &lt;- "Hello World #2"
        data_channel &lt;- "Hello World #3"
        data_channel &lt;- "EXIT"
        time.Sleep(2 * time.Second)
        control_channel &lt;- "EXIT"
&nbsp;
        conn.Flush()
&nbsp;
        println("All messages sent")
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Komunikace přes dva kanály: konzument zpráv</h2>

<pre>
package main
&nbsp;
import (
        nats "github.com/nats-io/go-nats"
        "log"
)
&nbsp;
const Subject = "test1"
const Control = "test2"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        econn, err2 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err2 != nil {
                log.Fatal(err2)
        }
&nbsp;
        defer econn.Close()
&nbsp;
        cconn, err3 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err3 != nil {
                log.Fatal(err3)
        }
&nbsp;
        defer cconn.Close()
&nbsp;
        data_channel := make(chan string)
        econn.BindRecvChan(Subject, data_channel)
&nbsp;
        println("Data channel created")
&nbsp;
        control_channel := make(chan string)
        cconn.BindRecvChan(Control, control_channel)
&nbsp;
        println("Control channel created")
&nbsp;
MESSAGE_LOOP:
        for {
                select {
                case message := &lt;-data_channel:
                        println("Received data message", message)
                case control := &lt;-control_channel:
                        println("Received control message", control)
                        if control == "EXIT" {
                                break MESSAGE_LOOP
                        }
                }
                println("--------")
        }
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Rozdělování zpráv mezi příjemce patřící do stejné skupiny (Queueing)</h2>

<pre>
package main
&nbsp;
import (
        "fmt"
        nats "github.com/nats-io/go-nats"
        "log"
)
&nbsp;
const Subject = "test1"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        println("Connected")
&nbsp;
        econn, err2 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err2 != nil {
                log.Fatal(err2)
        }
&nbsp;
        defer econn.Close()
&nbsp;
        channel := make(chan string)
        econn.BindSendChan(Subject, channel)
&nbsp;
        println("Channel created")
&nbsp;
        // poslat 100 zprav
        for i := 1; i &lt; 100; i++ {
                message := fmt.Sprintf("Hello World #%d", i)
                channel &lt;- message
                conn.Flush()
        }
&nbsp;
        println("All messages sent")
}
</pre>

<pre>
package main
&nbsp;
import (
        nats "github.com/nats-io/go-nats"
        "log"
)
&nbsp;
const Subject = "test1"
const Queue = "q1"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        econn, err2 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err2 != nil {
                log.Fatal(err2)
        }
&nbsp;
        defer econn.Close()
&nbsp;
        channel := make(chan string)
        econn.BindRecvQueueChan(Subject, Queue, channel)
&nbsp;
        println("Channel created")
&nbsp;
        for i := 1; i &lt; 20; i++ {
                println(&lt;-channel)
        }
}
</pre>

<pre>
package main
&nbsp;
import (
        nats "github.com/nats-io/go-nats"
        "log"
)
&nbsp;
const Subject = "test1"
const Queue = "X"
&nbsp;
func <strong>main</strong>() {
        conn, err := nats.Connect(nats.DefaultURL)
&nbsp;
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        defer conn.Close()
&nbsp;
        econn, err2 := nats.NewEncodedConn(conn, nats.DEFAULT_ENCODER)
&nbsp;
        if err2 != nil {
                log.Fatal(err2)
        }
&nbsp;
        defer econn.Close()
&nbsp;
        channel := make(chan string)
        econn.BindRecvQueueChan(Subject, Queue, channel)
&nbsp;
        println("Channel created")
&nbsp;
        for i := 1; i &lt; 20; i++ {
                println(&lt;-channel)
        }
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Chování systému po připojení pětice příjemců zpráv</h2>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naprogramovaných
v&nbsp;programovacím jazyku Go byly uloženy do Git repositáře, který je
dostupný na adrese <a
href="https://github.com/tisnik/message-queues-examples">https://github.com/tisnik/message-queues-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce.</p>

<table>
<tr><th>Příklad</th><th>Skript/kód</th><th>Popis</th><th>Cesta</th></tr>
<tr><td>1</td><td>publisher.go</td><td>producent jediné zprávy s&nbsp;využitím strategie <i>pub-sub</i></td><td><a href=""></a></td></tr>
<tr><td>1</td><td>subscriber.go</td><td>příjemce/konzument jediné zprávy s&nbsp;využitím strategie <i>pub-sub</i></td><td><a href=""></a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>publisher.go</td><td>vylepšení prvního příkladu: lepší kontrola chyb a reakce na ně</td><td><a href=""></a></td></tr>
<tr><td>2</td><td>subscriber.go</td><td>vylepšení prvního příkladu: lepší kontrola chyb a reakce na ně</td><td><a href=""></a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>publisher.go</td><td></td><td><a href=""></a></td></tr>
<tr><td>3</td><td>subscriber.go</td><td></td><td><a href=""></a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>publisher.go</td><td></td><td><a href=""></a></td></tr>
<tr><td>4</td><td>subscriber.go</td><td></td><td><a href=""></a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>publisher.go</td><td></td><td><a href=""></a></td></tr>
<tr><td>5</td><td>subscriber.go</td><td></td><td><a href=""></a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na předchozí části seriálu</h2>

<p>V&nbsp;této kapitole jsou uvedeny odkazy na všech dvanáct předchozích <a
href="https://www.root.cz/serialy/message-brokery/">částí seriálu</a>,
v&nbsp;němž se zabýváme různými způsoby implementace front zpráv a k&nbsp;nim
přidružených technologií:</p>

<ol>

<li>Použití nástroje RQ (Redis Queue) pro správu úloh zpracovávaných na pozadí<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/">https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/</a>
</li>

<li>Celery: systém implementující asynchronní fronty úloh pro Python<br />
<a href="https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python/">https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python/</a>
</li>

<li>Celery: systém implementující asynchronní fronty úloh pro Python (dokončení)<br />
<a href="https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python-dokonceni/">https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python-dokonceni/</a>
</li>

<li>RabbitMQ: jedna z nejúspěšnějších implementací brokera<br />
<a href="https://www.root.cz/clanky/rabbitmq-jedna-z-nejuspesnejsich-implementaci-brokera/">https://www.root.cz/clanky/rabbitmq-jedna-z-nejuspesnejsich-implementaci-brokera/</a>
</li>

<li>Pokročilejší operace nabízené systémem RabbitMQ<br />
<a href="https://www.root.cz/clanky/pokrocilejsi-operace-nabizene-systemem-rabbitmq/">https://www.root.cz/clanky/pokrocilejsi-operace-nabizene-systemem-rabbitmq/</a>
</li>

<li>ØMQ: knihovna pro asynchronní předávání zpráv<br />
<a href="https://www.root.cz/clanky/0mq-knihovna-pro-asynchronni-predavani-zprav/">https://www.root.cz/clanky/0mq-knihovna-pro-asynchronni-predavani-zprav/</a>
</li>

<li>Další možnosti poskytované knihovnou ØMQ<br />
<a href="https://www.root.cz/clanky/dalsi-moznosti-poskytovane-knihovnou-mq/">https://www.root.cz/clanky/dalsi-moznosti-poskytovane-knihovnou-mq/</a>
</li>

<li>Další možnosti nabízené knihovnou ØMQ, implementace protokolů ØMQ v čisté Javě<br />
<a href="https://www.root.cz/clanky/dalsi-moznosti-nabizene-knihovnou-mq-implementace-protokolu-mq-v-ciste-jave/">https://www.root.cz/clanky/dalsi-moznosti-nabizene-knihovnou-mq-implementace-protokolu-mq-v-ciste-jave/</a>
</li>

<li>Apache ActiveMQ – další systém implementující message brokera<br />
<a href="https://www.root.cz/clanky/apache-activemq-dalsi-system-implementujici-message-brokera/">https://www.root.cz/clanky/apache-activemq-dalsi-system-implementujici-message-brokera/</a>
</li>

<li>Použití Apache ActiveMQ s protokolem STOMP<br />
<a href="https://www.root.cz/clanky/pouziti-apache-activemq-s-protokolem-stomp/">https://www.root.cz/clanky/pouziti-apache-activemq-s-protokolem-stomp/</a>
</li>

<li>Použití Apache ActiveMQ s protokolem AMQP, jazyk Go a message brokeři<br />
<a href="https://www.root.cz/clanky/pouziti-apache-activemq-s-protokolem-amqp-jazyk-go-a-message-brokeri/">https://www.root.cz/clanky/pouziti-apache-activemq-s-protokolem-amqp-jazyk-go-a-message-brokeri/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>NATS<br />
<a href="https://nats.io/about/">https://nats.io/about/</a>
</li>

<li>NATS Streaming Concepts<br />
<a href="https://nats.io/documentation/streaming/nats-streaming-intro/">https://nats.io/documentation/streaming/nats-streaming-intro/</a>
</li>

<li>NATS Streaming Server<br />
<a href="https://nats.io/download/nats-io/nats-streaming-server/">https://nats.io/download/nats-io/nats-streaming-server/</a>
</li>

<li>NATS Introduction<br />
<a href="https://nats.io/documentation/">https://nats.io/documentation/</a>
</li>

<li>NATS Client Protocol<br />
<a href="https://nats.io/documentation/internals/nats-protocol/">https://nats.io/documentation/internals/nats-protocol/</a>
</li>

<li>NATS Messaging (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NATS_Messaging">https://en.wikipedia.org/wiki/NATS_Messaging</a>
</li>

<li>Stránka Apache Software Foundation<br />
<a href="http://www.apache.org/">http://www.apache.org/</a>
</li>

<li>Informace o portu 5672<br />
<a href="http://www.tcp-udp-ports.com/port-5672.htm">http://www.tcp-udp-ports.com/port-5672.htm</a>
</li>

<li>Třída MessagingHandler knihovny Qpid Proton<br />
<a href="https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._handlers.MessagingHandler-class.html">https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._handlers.MessagingHandler-class.html</a>
</li>

<li>Třída Event knihovny Qpid Proton<br />
<a href="https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._events.Event-class.html">https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._events.Event-class.html</a>
</li>

<li>package stomp (Go)<br />
<a href="https://godoc.org/github.com/go-stomp/stomp">https://godoc.org/github.com/go-stomp/stomp</a>
</li>

<li>Go language library for STOMP protocol<br />
<a href="https://github.com/go-stomp/stomp">https://github.com/go-stomp/stomp</a>
</li>

<li>python-qpid-proton 0.26.0 na PyPi<br />
<a href="https://pypi.org/project/python-qpid-proton/">https://pypi.org/project/python-qpid-proton/</a>
</li>

<li>Qpid Proton<br />
<a href="http://qpid.apache.org/proton/">http://qpid.apache.org/proton/</a>
</li>

<li>Using the AMQ Python Client<br />
<a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.1/html-single/using_the_amq_python_client/">https://access.redhat.com/documentation/en-us/red_hat_amq/7.1/html-single/using_the_amq_python_client/</a>
</li>

<li>Apache ActiveMQ<br />
<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>
</li>

<li>Apache ActiveMQ Artemis<br />
<a href="https://activemq.apache.org/artemis/">https://activemq.apache.org/artemis/</a>
</li>

<li>Apache ActiveMQ Artemis User Manual<br />
<a href="https://activemq.apache.org/artemis/docs/latest/index.html">https://activemq.apache.org/artemis/docs/latest/index.html</a>
</li>

<li>KahaDB<br />
<a href="http://activemq.apache.org/kahadb.html">http://activemq.apache.org/kahadb.html</a>
</li>

<li>Understanding the KahaDB Message Store<br />
<a href="https://access.redhat.com/documentation/en-US/Fuse_MQ_Enterprise/7.1/html/Configuring_Broker_Persistence/files/KahaDBOverview.html">https://access.redhat.com/documentation/en-US/Fuse_MQ_Enterprise/7.1/html/Configuring_Broker_Persistence/files/KahaDBOverview.html</a>
</li>

<li>Command Line Tools (Apache ActiveMQ)<br />
<a href="https://activemq.apache.org/activemq-command-line-tools-reference.html">https://activemq.apache.org/activemq-command-line-tools-reference.html</a>
</li>

<li>stomp.py 4.1.21 na PyPi<br />
<a href="https://pypi.org/project/stomp.py/">https://pypi.org/project/stomp.py/</a>
</li>

<li>Stomp Tutorial<br />
<a href="https://access.redhat.com/documentation/en-US/Fuse_Message_Broker/5.5/html/Connectivity_Guide/files/FMBConnectivityStompTelnet.html">https://access.redhat.com/documentation/en-US/Fuse_Message_Broker/5.5/html/Connectivity_Guide/files/FMBConnectivityStompTelnet.html</a>
</li>

<li>Heartbeat (computing)<br />
<a href="https://en.wikipedia.org/wiki/Heartbeat_(computing)">https://en.wikipedia.org/wiki/Heartbeat_(computing)</a>
</li>

<li>Apache Camel<br />
<a href="https://camel.apache.org/">https://camel.apache.org/</a>
</li>

<li>Red Hat Fuse<br />
<a href="https://developers.redhat.com/products/fuse/overview/">https://developers.redhat.com/products/fuse/overview/</a>
</li>

<li>Confusion between ActiveMQ and ActiveMQ-Artemis?<br />
<a href="https://serverfault.com/questions/873533/confusion-between-activemq-and-activemq-artemis">https://serverfault.com/questions/873533/confusion-between-activemq-and-activemq-artemis</a>
</li>

<li>Staré stránky projektu HornetQ<br />
<a href="http://hornetq.jboss.org/">http://hornetq.jboss.org/</a>
</li>

<li>Snapshot JeroMQ verze 0.4.4<br />
<a href="https://oss.sonatype.org/content/repositories/snapshots/org/zeromq/jeromq/0.4.4-SNAPSHOT/">https://oss.sonatype.org/content/repositories/snapshots/org/zeromq/jeromq/0.4.4-SNAPSHOT/</a>
</li>

<li>Difference between ActiveMQ vs Apache ActiveMQ Artemis<br />
<a href="http://activemq.2283324.n4.nabble.com/Difference-between-ActiveMQ-vs-Apache-ActiveMQ-Artemis-td4703828.html">http://activemq.2283324.n4.nabble.com/Difference-between-ActiveMQ-vs-Apache-ActiveMQ-Artemis-td4703828.html</a>
</li>

<li>Microservices communications. Why you should switch to message queues<br />
<a href="https://dev.to/matteojoliveau/microservices-communications-why-you-should-switch-to-message-queues--48ia">https://dev.to/matteojoliveau/microservices-communications-why-you-should-switch-to-message-queues--48ia</a>
</li>

<li>Stomp.py 4.1.19 documentation<br />
<a href="https://stomppy.readthedocs.io/en/stable/">https://stomppy.readthedocs.io/en/stable/</a>
</li>

<li>Repositář knihovny JeroMQ<br />
<a href="https://github.com/zeromq/jeromq/">https://github.com/zeromq/jeromq/</a>
</li>

<li>ØMQ &ndash; Distributed Messaging <br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>ØMQ Community<br />
<a href="http://zeromq.org/community">http://zeromq.org/community</a>
</li>

<li>Get The Software<br />
<a href="http://zeromq.org/intro:get-the-software">http://zeromq.org/intro:get-the-software</a>
</li>

<li>PyZMQ Documentation<br />
<a href="https://pyzmq.readthedocs.io/en/latest/">https://pyzmq.readthedocs.io/en/latest/</a>
</li>

<li>Module: zmq.decorators<br />
<a href="https://pyzmq.readthedocs.io/en/latest/api/zmq.decorators.html">https://pyzmq.readthedocs.io/en/latest/api/zmq.decorators.html</a>
</li>

<li>ZeroMQ is the answer, by Ian Barber<br />
<a href="https://vimeo.com/20605470">https://vimeo.com/20605470</a>
</li>

<li>ZeroMQ RFC<br />
<a href="https://rfc.zeromq.org/">https://rfc.zeromq.org/</a>
</li>

<li>ZeroMQ and Clojure, a brief introduction<br />
<a href="https://antoniogarrote.wordpress.com/2010/09/08/zeromq-and-clojure-a-brief-introduction/">https://antoniogarrote.wordpress.com/2010/09/08/zeromq-and-clojure-a-brief-introduction/</a>
</li>

<li>zeromq/czmq<br />
<a href="https://github.com/zeromq/czmq">https://github.com/zeromq/czmq</a>
</li>

<li>golang wrapper for CZMQ<br />
<a href="https://github.com/zeromq/goczmq">https://github.com/zeromq/goczmq</a>
</li>

<li>ZeroMQ version reporting in Python<br />
<a href="http://zguide.zeromq.org/py:version">http://zguide.zeromq.org/py:version</a>
</li>

<li>A Go interface to ZeroMQ version 4<br />
<a href="https://github.com/pebbe/zmq4">https://github.com/pebbe/zmq4</a>
</li>

<li>Broker vs. Brokerless<br />
<a href="http://zeromq.org/whitepapers:brokerless">http://zeromq.org/whitepapers:brokerless</a>
</li>

<li>Learning ØMQ with pyzmq<br />
<a href="https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/">https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/</a>
</li>

<li>Céčková funkce <strong>zmq_ctx_new</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-ctx-new">http://api.zeromq.org/4-2:zmq-ctx-new</a>
</li>

<li>Céčková funkce <strong>zmq_ctx_destroy</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-ctx-destroy">http://api.zeromq.org/4-2:zmq-ctx-destroy</a>
</li>

<li>Céčková funkce <strong>zmq_bind</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-bind">http://api.zeromq.org/4-2:zmq-bind</a>
</li>

<li>Céčková funkce <strong>zmq_unbind</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-unbind">http://api.zeromq.org/4-2:zmq-unbind</a>
</li>

<li>Céčková C funkce <strong>zmq_connect</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-connect">http://api.zeromq.org/4-2:zmq-connect</a>
</li>

<li>Céčková C funkce <strong>zmq_disconnect</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-disconnect">http://api.zeromq.org/4-2:zmq-disconnect</a>
</li>

<li>Céčková C funkce <strong>zmq_send</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-send">http://api.zeromq.org/4-2:zmq-send</a>
</li>

<li>Céčková C funkce <strong>zmq_recv</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-recv">http://api.zeromq.org/4-2:zmq-recv</a>
</li>

<li>Třída <strong>Context</strong> (Python)<br />
<a href="https://pyzmq.readthedocs.io/en/latest/api/zmq.html#context">https://pyzmq.readthedocs.io/en/latest/api/zmq.html#context</a>
</li>

<li>Třída <strong>Socket</strong> (Python)<br />
<a href="https://pyzmq.readthedocs.io/en/latest/api/zmq.html#socket">https://pyzmq.readthedocs.io/en/latest/api/zmq.html#socket</a>
</li>

<li>Python binding<br />
<a href="http://zeromq.org/bindings:python">http://zeromq.org/bindings:python</a>
</li>

<li>Why should I have written ZeroMQ in C, not C++ (part I)<br />
<a href="http://250bpm.com/blog:4">http://250bpm.com/blog:4</a>
</li>

<li>Why should I have written ZeroMQ in C, not C++ (part II) <br />
<a href="http://250bpm.com/blog:8">http://250bpm.com/blog:8</a>
</li>

<li>About Nanomsg<br />
<a href="https://nanomsg.org/">https://nanomsg.org/</a>
</li>

<li>Advanced Message Queuing Protocol<br />
<a href="https://www.amqp.org/">https://www.amqp.org/</a>
</li>

<li>Advanced Message Queuing Protocol na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol">https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol</a>
</li>

<li>Dokumentace k&nbsp;příkazu <strong>rabbitmqctl</strong><br />
<a href="https://www.rabbitmq.com/rabbitmqctl.8.html">https://www.rabbitmq.com/rabbitmqctl.8.html</a>
</li>

<li>RabbitMQ<br />
<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a>
</li>

<li>RabbitMQ Tutorials<br />
<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a>
</li>

<li>RabbitMQ: Clients and Developer Tools<br />
<a href="https://www.rabbitmq.com/devtools.html">https://www.rabbitmq.com/devtools.html</a>
</li>

<li>RabbitMQ na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/RabbitMQ">https://en.wikipedia.org/wiki/RabbitMQ</a>
</li>

<li>Streaming Text Oriented Messaging Protocol<br />
<a href="https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol">https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol</a>
</li>

<li>Message Queuing Telemetry Transport<br />
<a href="https://en.wikipedia.org/wiki/MQTT">https://en.wikipedia.org/wiki/MQTT</a>
</li>

<li>Erlang<br />
<a href="http://www.erlang.org/">http://www.erlang.org/</a>
</li>

<li>pika 0.12.0 na PyPi<br />
<a href="https://pypi.org/project/pika/">https://pypi.org/project/pika/</a>
</li>

<li>Introduction to Pika<br />
<a href="https://pika.readthedocs.io/en/stable/">https://pika.readthedocs.io/en/stable/</a>
</li>

<li>Langohr: An idiomatic Clojure client for RabbitMQ that embraces the AMQP 0.9.1 model<br />
<a href="http://clojurerabbitmq.info/">http://clojurerabbitmq.info/</a>
</li>

<li>AMQP 0-9-1 Model Explained<br />
<a href="http://www.rabbitmq.com/tutorials/amqp-concepts.html">http://www.rabbitmq.com/tutorials/amqp-concepts.html</a>
</li>

<li>Part 1: RabbitMQ for beginners - What is RabbitMQ?<br />
<a href="https://www.cloudamqp.com/blog/2015-05-18-part1-rabbitmq-for-beginners-what-is-rabbitmq.html">https://www.cloudamqp.com/blog/2015-05-18-part1-rabbitmq-for-beginners-what-is-rabbitmq.html</a>
</li>

<li>Downloading and Installing RabbitMQ<br />
<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a>
</li>

<li>celery na PyPi<br />
<a href="https://pypi.org/project/celery/">https://pypi.org/project/celery/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python <br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python (dokončení)<br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/</a>
</li>

<li>Redis Queue (RQ)<br />
<a href="https://www.fullstackpython.com/redis-queue-rq.html">https://www.fullstackpython.com/redis-queue-rq.html</a>
</li>

<li>Python Celery &amp; RabbitMQ Tutorial<br />
<a href="https://tests4geeks.com/python-celery-rabbitmq-tutorial/">https://tests4geeks.com/python-celery-rabbitmq-tutorial/</a>
</li>

<li>Flower: Real-time Celery web-monitor<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/monitoring.html#flower-real-time-celery-web-monitor">http://docs.celeryproject.org/en/latest/userguide/monitoring.html#flower-real-time-celery-web-monitor</a>
</li>

<li>Asynchronous Tasks With Django and Celery<br />
<a href="https://realpython.com/asynchronous-tasks-with-django-and-celery/">https://realpython.com/asynchronous-tasks-with-django-and-celery/</a>
</li>

<li>First Steps with Celery<br />
<a href="http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html">http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html</a>
</li>

<li>node-celery<br />
<a href="https://github.com/mher/node-celery">https://github.com/mher/node-celery</a>
</li>

<li>Full Stack Python: web development<br />
<a href="https://www.fullstackpython.com/web-development.html">https://www.fullstackpython.com/web-development.html</a>
</li>

<li>Introducing RQ<br />
<a href="https://nvie.com/posts/introducing-rq/">https://nvie.com/posts/introducing-rq/</a>
</li>

<li>Asynchronous Tasks with Flask and Redis Queue<br />
<a href="https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue">https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Stránky projektu Redis<br />
<a href="https://redis.io/">https://redis.io/</a>
</li>

<li>Introduction to Redis<br />
<a href="https://redis.io/topics/introduction">https://redis.io/topics/introduction</a>
</li>

<li>Try Redis<br />
<a href="http://try.redis.io/">http://try.redis.io/</a>
</li>

<li>Redis tutorial, April 2010 (starší, ale pěkně udělaný)<br />
<a href="https://static.simonwillison.net/static/2010/redis-tutorial/">https://static.simonwillison.net/static/2010/redis-tutorial/</a>
</li>

<li>Python Redis<br />
<a href="https://redislabs.com/lp/python-redis/">https://redislabs.com/lp/python-redis/</a>
</li>

<li>Redis: key-value databáze v paměti i na disku<br />
<a href="https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/">https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/</a>
</li>

<li>Praktický úvod do Redis (1): vaše distribuovaná NoSQL cache<br />
<a href="http://www.cloudsvet.cz/?p=253">http://www.cloudsvet.cz/?p=253</a>
</li>

<li>Praktický úvod do Redis (2): transakce<br />
<a href="http://www.cloudsvet.cz/?p=256">http://www.cloudsvet.cz/?p=256</a>
</li>

<li>Praktický úvod do Redis (3): cluster<br />
<a href="http://www.cloudsvet.cz/?p=258">http://www.cloudsvet.cz/?p=258</a>
</li>

<li>Connection pool<br />
<a href="https://en.wikipedia.org/wiki/Connection_pool">https://en.wikipedia.org/wiki/Connection_pool</a>
</li>

<li>Instant Redis Sentinel Setup<br />
<a href="https://github.com/ServiceStack/redis-config">https://github.com/ServiceStack/redis-config</a>
</li>

<li>How to install REDIS in LInux<br />
<a href="https://linuxtechlab.com/how-install-redis-server-linux/">https://linuxtechlab.com/how-install-redis-server-linux/</a>
</li>

<li>Redis RDB Dump File Format<br />
<a href="https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format">https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format</a>
</li>

<li>Lempel–Ziv–Welch<br />
<a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch">https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch</a>
</li>

<li>Redis Persistence<br />
<a href="https://redis.io/topics/persistence">https://redis.io/topics/persistence</a>
</li>

<li>Redis persistence demystified<br />
<a href="http://oldblog.antirez.com/post/redis-persistence-demystified.html">http://oldblog.antirez.com/post/redis-persistence-demystified.html</a>
</li>

<li>Redis reliable queues with Lua scripting<br />
<a href="http://oldblog.antirez.com/post/250">http://oldblog.antirez.com/post/250</a>
</li>

<li>Ost (knihovna)<br />
<a href="https://github.com/soveran/ost">https://github.com/soveran/ost</a>
</li>

<li>NoSQL<br />
<a href="https://en.wikipedia.org/wiki/NoSQL">https://en.wikipedia.org/wiki/NoSQL</a>
</li>

<li>Shard (database architecture)<br />
<a href="https://en.wikipedia.org/wiki/Shard_%28database_architecture%29">https://en.wikipedia.org/wiki/Shard_%28database_architecture%29</a>
</li>

<li>What is sharding and why is it important?<br />
<a href="https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important">https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important</a>
</li>

<li>What Is Sharding?<br />
<a href="https://btcmanager.com/what-sharding/">https://btcmanager.com/what-sharding/</a>
</li>

<li>Redis clients<br />
<a href="https://redis.io/clients">https://redis.io/clients</a>
</li>

<li>Category:Lua-scriptable software<br />
<a href="https://en.wikipedia.org/wiki/Category:Lua-scriptable_software">https://en.wikipedia.org/wiki/Category:Lua-scriptable_software</a>
</li>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Redis memory usage<br />
<a href="http://nosql.mypopescu.com/post/1010844204/redis-memory-usage">http://nosql.mypopescu.com/post/1010844204/redis-memory-usage</a>
</li>

<li>Ukázka konfigurace Redisu pro lokální testování<br />
<a href="https://github.com/tisnik/presentations/blob/master/redis/redis.conf">https://github.com/tisnik/presentations/blob/master/redis/redis.conf</a>
</li>

<li>Resque<br />
<a href="https://github.com/resque/resque">https://github.com/resque/resque</a>
</li>

<li>Nested transaction<br />
<a href="https://en.wikipedia.org/wiki/Nested_transaction">https://en.wikipedia.org/wiki/Nested_transaction</a>
</li>

<li>Publish–subscribe pattern<br />
<a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern</a>
</li>

<li>Messaging pattern<br />
<a href="https://en.wikipedia.org/wiki/Messaging_pattern">https://en.wikipedia.org/wiki/Messaging_pattern</a>
</li>

<li>Using pipelining to speedup Redis queries<br />
<a href="https://redis.io/topics/pipelining">https://redis.io/topics/pipelining</a>
</li>

<li>Pub/Sub<br />
<a href="https://redis.io/topics/pubsub">https://redis.io/topics/pubsub</a>
</li>

<li>ZeroMQ distributed messaging<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>ZeroMQ: Modern &amp; Fast Networking Stack<br />
<a href="https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/">https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/</a>
</li>

<li>Publish/Subscribe paradigm: Why must message classes not know about their subscribers?<br />
<a href="https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr">https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr</a>
</li>

<li>Python &amp; Redis PUB/SUB<br />
<a href="https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7">https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7</a>
</li>

<li>Message broker<br />
<a href="https://en.wikipedia.org/wiki/Message_broker">https://en.wikipedia.org/wiki/Message_broker</a>
</li>

<li>RESP Arrays<br />
<a href="https://redis.io/topics/protocol#array-reply">https://redis.io/topics/protocol#array-reply</a>
</li>

<li>Redis Protocol specification<br />
<a href="https://redis.io/topics/protocol">https://redis.io/topics/protocol</a>
</li>

<li>Redis Pub/Sub: Intro Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-intro/">https://www.redisgreen.net/blog/pubsub-intro/</a>
</li>

<li>Redis Pub/Sub: Howto Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-howto/">https://www.redisgreen.net/blog/pubsub-howto/</a>
</li>

<li>Comparing Publish-Subscribe Messaging and Message Queuing<br />
<a href="https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message">https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message</a>
</li>

<li>Apache Kafka<br />
<a href="https://kafka.apache.org/">https://kafka.apache.org/</a>
</li>

<li>Iron<br />
<a href="http://www.iron.io/mq">http://www.iron.io/mq</a>
</li>

<li>kue (založeno na Redisu, určeno pro node.js)<br />
<a href="https://github.com/Automattic/kue">https://github.com/Automattic/kue</a>
</li>

<li>Cloud Pub/Sub<br />
<a href="https://cloud.google.com/pubsub/">https://cloud.google.com/pubsub/</a>
</li>

<li>Introduction to Redis Streams<br />
<a href="https://redis.io/topics/streams-intro">https://redis.io/topics/streams-intro</a>
</li>

<li>glob (programming)<br />
<a href="https://en.wikipedia.org/wiki/Glob_(programming)">https://en.wikipedia.org/wiki/Glob_(programming)</a>
</li>

<li>Why and how Pricing Assistant migrated from Celery to RQ - Paris.py<br />
<a href="https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2">https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2</a>
</li>

<li>Enqueueing internals<br />
<a href="http://python-rq.org/contrib/">http://python-rq.org/contrib/</a>
</li>

<li>queue — A synchronized queue class<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Queue – A thread-safe FIFO implementation<br />
<a href="https://pymotw.com/2/Queue/">https://pymotw.com/2/Queue/</a>
</li>

<li>Queues<br />
<a href="http://queues.io/">http://queues.io/</a>
</li>

<li>Windows Subsystem for Linux Documentation<br />
<a href="https://docs.microsoft.com/en-us/windows/wsl/about">https://docs.microsoft.com/en-us/windows/wsl/about</a>
</li>

<li>RestMQ<br />
<a href="http://restmq.com/">http://restmq.com/</a>
</li>

<li>ActiveMQ<br />
<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>
</li>

<li>Amazon MQ<br />
<a href="https://aws.amazon.com/amazon-mq/">https://aws.amazon.com/amazon-mq/</a>
</li>

<li>Amazon Simple Queue Service<br />
<a href="https://aws.amazon.com/sqs/">https://aws.amazon.com/sqs/</a>
</li>

<li>Celery: Distributed Task Queue<br />
<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a>
</li>

<li>Disque, an in-memory, distributed job queue<br />
<a href="https://github.com/antirez/disque">https://github.com/antirez/disque</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Projekt RQ na PyPi<br />
<a href="https://pypi.org/project/rq/">https://pypi.org/project/rq/</a>
</li>

<li>rq-dashboard 0.3.12<br />
<a href="https://pypi.org/project/rq-dashboard/">https://pypi.org/project/rq-dashboard/</a>
</li>

<li>Job queue<br />
<a href="https://en.wikipedia.org/wiki/Job_queue">https://en.wikipedia.org/wiki/Job_queue</a>
</li>

<li>Why we moved from Celery to RQ<br />
<a href="https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq">https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq</a>
</li>

<li>Running multiple workers using Celery<br />
<a href="https://serverfault.com/questions/655387/running-multiple-workers-using-celery">https://serverfault.com/questions/655387/running-multiple-workers-using-celery</a>
</li>

<li>celery — Distributed processing<br />
<a href="http://docs.celeryproject.org/en/latest/reference/celery.html">http://docs.celeryproject.org/en/latest/reference/celery.html</a>
</li>

<li>Chains<br />
<a href="https://celery.readthedocs.io/en/latest/userguide/canvas.html#chains">https://celery.readthedocs.io/en/latest/userguide/canvas.html#chains</a>
</li>

<li>Routing<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/routing.html#automatic-routing">http://docs.celeryproject.org/en/latest/userguide/routing.html#automatic-routing</a>
</li>

<li>Celery Distributed Task Queue in Go<br />
<a href="https://github.com/gocelery/gocelery/">https://github.com/gocelery/gocelery/</a>
</li>

<li>Python Decorators<br />
<a href="https://wiki.python.org/moin/PythonDecorators">https://wiki.python.org/moin/PythonDecorators</a>
</li>

<li>Periodic Tasks<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html">http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html</a>
</li>

<li>celery.schedules<br />
<a href="http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab">http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab</a>
</li>

<li>Pros and cons to use Celery vs. RQ<br />
<a href="https://stackoverflow.com/questions/13440875/pros-and-cons-to-use-celery-vs-rq">https://stackoverflow.com/questions/13440875/pros-and-cons-to-use-celery-vs-rq</a>
</li>

<li>Priority queue<br />
<a href="https://en.wikipedia.org/wiki/Priority_queue">https://en.wikipedia.org/wiki/Priority_queue</a>
</li>

<li>Jupyter<br />
<a href="https://jupyter.org/">https://jupyter.org/</a>
</li>

<li>How IPython and Jupyter Notebook work<br />
<a href="https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html">https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html</a>
</li>

<li>Context Managers<br />
<a href="http://book.pythontips.com/en/latest/context_managers.html">http://book.pythontips.com/en/latest/context_managers.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

