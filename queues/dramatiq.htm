<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Dramatiq &ndash; další užitečná knihovna pro práci s frontami úloh v Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>


<body>

<h1>Dramatiq &ndash; další užitečná knihovna pro práci s frontami úloh v Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o systémech .... si popíšeme projekt nazvaný Dramatiq. Podobně jako v případě projektů Rq a Celery se jedná o systém pro správu front a úloh určený pro aplikace naprogramované v jazyku Python.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Dramatiq &ndash; další užitečná knihovna pro práci s&nbsp;frontami úloh v&nbsp;Pythonu</a></p>
<p><a href="#k02">*** 2. Koncept workerů a skriptů pro plánování úloh</a></p>
<p><a href="#k03">*** 3. Instalace nástroje Dramatiq</a></p>
<p><a href="#k04">*** 4. Implementace prvního skriptu pro naplánování úlohy</a></p>
<p><a href="#k05">*** 5. Implementace workera</a></p>
<p><a href="#k06">*** 6. Spuštění Redisu, naplánování úlohy a její zpracování workerem</a></p>
<p><a href="#k07">*** 7. Druhý demonstrační příklad &ndash; předání parametrů workerům</a></p>
<p><a href="#k08">*** 8. Spuštění druhého demonstračního příkladu</a></p>
<p><a href="#k09">*** 9. Třetí demonstrační příklad &ndash; worker vyhazující výjimku</a></p>
<p><a href="#k10">*** 10. Spuštění třetího demonstračního příkladu</a></p>
<p><a href="#k11">*** 11. Čtvrtý příklad &ndash; omezení počtu znovuposlaných zpráv do workera</a></p>
<p><a href="#k12">*** 12. Pátý příklad &ndash; nastavení minimálního a maximálního časového intervalu mezi znovuposláním zprávy</a></p>
<p><a href="#k13">*** 13. Konfigurace aplikace v&nbsp;případě použití většího množství workerů a front</a></p>
<p><a href="#k14">*** 14. Šestý demonstrační příklad &ndash; tři na sobě nezávislí workeři</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Nástroj dramatiq-dashboard pro sledování front</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Dramatiq &ndash; další užitečná knihovna pro práci s&nbsp;frontami úloh v&nbsp;Pythonu</h2>

<p><a href="">V&nbsp;seriálu o message brokerech a na nich založených technologiích</a> jsme se již setkali s&nbsp;několika projekty, které zprostředkovávají vysokoúrovňové rozhraní k&nbsp;message brokerům pro vývojáře používající programovací jazyk Python. Připomeňme si, že se jedná především o projekty <a href="">Rq (Redis Queue)</a> a <a href="">Celery</a>, ovšem existují i další podobné nástroje, například příště popsaný projekt s&nbsp;názvem <i>Huey</i>. Dnes se seznámíme s&nbsp;dalším podobně koncipovaným projektem, který se jmenuje <i>Dramatiq</i> a který je určen pro plánování úloh (<i>job</i>, <i>task</i>) pro samostatně běžící <i>workery</i>. Pokud worker nějakou úlohu nezpracuje (tj.&nbsp;vyhodí výjimku), je možné přesně specifikovat, co se má s&nbsp;úlohou dále udělat; může se například přeposlat znovu, uložit do <strong>DLQ</strong> apod. To však není vše, protože lze vytvářet skupiny (<i>groups</i>) workerů, čekat na jejich výsledky, tvořit <i>kolony</i> (<i>pipeline</i>) workerů s&nbsp;automatickým předáváním mezivýsledků atd.</p>

<p>Sám autor projektu <i>Dramatiq</i> píše, že je dlouholetým uživatelem systému <i>Celery</i> a že je frustrován některými jeho vlastnostmi. A právě z&nbsp;těchto důvodů vytvořil dnes popisovaný projekt <i>Dramatiq</i>, který by měl být oproti Celery v&nbsp;mnoha směrech vylepšen a/nebo zjednodušen. Do jaké míry se to podařilo by mohlo být patrné z&nbsp;demonstračních příkladů, které budou popsány v&nbsp;navazujících kapitolách.</p>

<p>V&nbsp;následující tabulce jsou pro přehlednost porovnány čtyři systémy s&nbsp;implementací front zpráv pro Python, samozřejmě včetně projektu <i>Dramatiq</i>:</p>

<table>
<tr><th>#</th><th></th><th></th><th></th><th></th><th></th></tr>
<tr><td>1</td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>2</td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>3</td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>4</td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>5</td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>6</td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>7</td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>8</td><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>9</td><td></td><td></td><td></td><td></td><td></td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Koncept workerů a skriptů pro plánování úloh</h2>

<p>Zprávy (či přesněji řečeno úlohy), s&nbsp;nimiž projekt <i>Dramatiq</i> pracuje, jsou interně spravovány nějakým obecným <i>brokerem</i>. Nativně jsou podporováni dva brokeři. První z&nbsp;nich je založen na databázi <i>Redis</i>, s&nbsp;níž jsme se seznámili v&nbsp;článku <a href=""></a>. Druhým standardně podporovaným brokerem je <i>RabbitMQ</i>. I ten již známe, viz též články <a href=""></a> a <a href=""></a>. To však není vše, protože v&nbsp;případě potřeby lze použít i další brokery a dokonce i služby s&nbsp;implementací front zpráv, zejména pak <i>SQS</i> neboli <i></i>, což je služba nabízená <a href="">jako součást</a> systému <a href="">Amazon Web Services</a> (<i>AWS</i>).</p>

<p><div class="rs-tip-major">Poznámka: ve všech dnešních demonstračních příkladech použijeme message brokera založeného na databázi <i>Redis</i>. Je tomu tak z&nbsp;toho důvodu, že samotný <i>Redis</i> je poměrně snadno konfigurovatelný i nasaditelný. Navíc existuje ještě užitečný projekt <i>dramatiq-dashboard</i>, jehož současná verze podporuje právě Redis (další message brokery prozatím nikoli).</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace nástroje Dramatiq</h2>

<p>Instalace celého systému <i>Dramatiq</i> se skládá ze dvou kroků. V&nbsp;prvním kroku je nutné nainstalovat zvoleného message brokera, který bude interně používán jak pro správu front, tak i pro případné ukládání výsledků práce jednotlivých workerů. V&nbsp;kroku druhém se nainstaluje samotný <i>Dramatiq</i>, a to s&nbsp;využitím nástroje <strong>pip</strong> nebo <strong>pip3</strong>.</p>

<p>Nejprve si popišme první krok, a to konkrétně instalaci <i>Redisu</i>.</p>

<p>Jak již víme z&nbsp;předchozího textu, bude následovat instalace samotného systému <i>Dramatiq</i>. Samotná instalace se provede s&nbsp;využitím nástroje <strong>pip</strong> resp.&nbsp;<strong>pip3</strong>, protože samotný <i>Dramatiq</i> je pochopitelně dostupný jako <a href="">balíček</a> na <a href="">PyPi</a>. Musíme si ovšem dát pozor na to, že instalaci nelze provést pouze takto:</p>

<pre>
$ <strong>pip3 install --user dramatiq</strong>
</pre>

<p>Musíme totiž specifikovat i to, na jakém brokerovi bude nástroj <i>Dramatiq</i> založen. Pokud použijeme <i>RabbitMQ</i>, mohl by příkaz pro instalaci vypadat takto:</p>

<pre>
</pre>

<p>My ovšem použijeme <i>Redis</i>, takže příkaz pro instalaci bude nepatrně odlišný:</p>

<pre>
$ <strong>pip3 install --user 'dramatiq[redis, watch]'</strong>
&nbsp;
Requirement already satisfied: dramatiq[redis,watch] in ./.local/lib/python3.6/site-packages
Requirement already satisfied: prometheus-client&lt;0.3,&gt;=0.2 in ./.local/lib/python3.6/site-packages (from dramatiq[redis,watch])
Requirement already satisfied: redis&lt;4.0,&gt;=2.0; extra == "redis" in ./.local/lib/python3.6/site-packages (from dramatiq[redis,watch])
Collecting watchdog&lt;0.9,&gt;=0.8; extra == "watch" (from dramatiq[redis,watch])
Collecting watchdog-gevent==0.1; extra == "watch" (from dramatiq[redis,watch])
  Using cached https://files.pythonhosted.org/packages/c1/85/14264c65d46c3e15d201dcf86722838a1d9d8b8443de8bfd8b19299f429b/watchdog_gevent-0.1.0-py3-none-any.whl
Collecting argh&gt;=0.24.1 (from watchdog&lt;0.9,&gt;=0.8; extra == "watch"-&gt;dramatiq[redis,watch])
  Using cached https://files.pythonhosted.org/packages/06/1c/e667a7126f0b84aaa1c56844337bf0ac12445d1beb9c8a6199a7314944bf/argh-0.26.2-py2.py3-none-any.whl
Collecting pathtools&gt;=0.1.1 (from watchdog&lt;0.9,&gt;=0.8; extra == "watch"-&gt;dramatiq[redis,watch])
Requirement already satisfied: PyYAML&gt;=3.10 in /usr/lib64/python3.6/site-packages (from watchdog&lt;0.9,&gt;=0.8; extra == "watch"-&gt;dramatiq[redis,watch])
Collecting gevent&gt;=1.1 (from watchdog-gevent==0.1; extra == "watch"-&gt;dramatiq[redis,watch])
  Using cached https://files.pythonhosted.org/packages/f2/ca/5b5962361ed832847b6b2f9a2d0452c8c2f29a93baef850bb8ad067c7bf9/gevent-1.4.0-cp36-cp36m-manylinux1_x86_64.whl
Requirement already satisfied: greenlet&gt;=0.4.14; platform_python_implementation == "CPython" in ./.local/lib/python3.6/site-packages (from gevent&gt;=1.1-&gt;watchdog-gevent==0.1; extra == "watch"-&gt;dramatiq[redis,watch])
Installing collected packages: argh, pathtools, watchdog, gevent, watchdog-gevent
Successfully installed argh-0.26.2 gevent-1.4.0 pathtools-0.1.2 watchdog-0.8.3 watchdog-gevent-0.1.0
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Implementace prvního skriptu pro naplánování úlohy</h2>

<p>Nyní již tedy máme nainstalovány a nakonfigurovány všechny potřebné balíčky a můžeme se pokusit vytvořit příklad, v&nbsp;němž bude implementován jak <i>worker</i>, tak i skript, který workerovi přiřadí nějakou úlohu (<i>job</i>, <i>task</i>). Příklady budou nepatrně zkomplikovány tím, že budeme používat <i>Redis</i> namísto výchozího <i>RabbitMQ</i>, takže bude nutné explicitně specifikovat, který broker bude použit (v&nbsp;případě <i>RabbitMQ</i> to není bezpodmínečně nutné).</p>

<p>Celá činnost prvního příkladu se dá shrnout takto:</p>

<ol>

<li>Skript naplánuje úlohu. Ta se přenese do brokera, v&nbsp;našem případě do Redisu.</li>

<li>Systém <i>Dramatiq</i> postupně vybírá úlohy/zprávy z&nbsp;brokera, které jsou určeny zvolenému workeru.</li>

<li>Pokud zprávu přijme, zavolá kód brokera a předá mu příslušný parametr/parametry uložené ve zprávě.</li>

<li>Worker může v&nbsp;případě potřeby uložit výsledky do <i>Redisu</i>.</li>

<li>V&nbsp;případě, že worker zhavaruje (což se může stát), může být zpráva/úloha zopakována popř.&nbsp;uložena do <strong>DLQ</strong> (<i>Dead Letter Queue</i>), kde implicitně vydrží týden.</li>

</ol>

<p>Podívejme se, jak může vypadat skript, který workerovi zadá úlohu. Opět si nejprve ukažme celý kód skriptu:</p>

<pre>
import time
import dramatiq
&nbsp;
from dramatiq.brokers.redis import RedisBroker
&nbsp;
from test_worker_1 import test_worker, setup_broker
&nbsp;
&nbsp;
setup_broker()
&nbsp;
test_worker.send()
</pre>

<p>Povšimněte si, že musíme importovat samotného workera, aby bylo možné pracovat s&nbsp;identifikátorem <strong></strong>. Zadání úlohy workerovi je snadné &ndash; vše se provede na tomto řádku:</p>

<pre>
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dalším textu se předpokládá, že systém <i>Redis</i> již běží a že používá výchozí port. Pokud tomu tak není, bude se při pokusech o spuštění dalších skriptů vypisovat chybové hlášení, že se není možné připojit na message brokera.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Implementace workera</h2>

<p>Dále se podívejme na implementaci workera. Celý skript s&nbsp;workerem může vypadat následovně:</p>

<pre>
import time
&nbsp;
import dramatiq
from dramatiq.brokers.redis import RedisBroker
&nbsp;
&nbsp;
def setup_broker():
    redis_broker = RedisBroker(host="localhost", port=6379)
    dramatiq.set_broker(redis_broker)
    return redis_broker
&nbsp;
&nbsp;
setup_broker()
&nbsp;
&nbsp;
@dramatiq.actor
def test_worker():
    print("Working")
    time.sleep(1)
    print("Done")
</pre>

<p>Povšimněte si především pomocné funkce <strong></strong> sloužící pro konfiguraci message brokera. V&nbsp;této funkci specifikujeme, na jaké adrese a na jakém portu je dostupné API message brokera; následně je broker nastaven jako výchozí message broker pro všechny dále specifikované workery:</p>

<pre>
</pre>

<p>Výše popsanou funkci <strong></strong> je nutné <i>zavolat</i> ještě předtím, než se bude interpretovat samotná implementace workera. Ta je prozatím velmi jednoduchá, protože se jedná o funkci s&nbsp;dekorátorem <strong></strong>. Vzhledem k&nbsp;tomu, že našemu prvnímu workeru nebudeme předávat žádné parametry, bude i funkce s&nbsp;jeho implementací bez argumentů:</p>

<pre>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Spuštění Redisu, naplánování úlohy a její zpracování workerem</h2>

<p>Workeři, kterým jsou předávány jednotlivé úlohy, pochopitelně nejsou spouštěni přímo zavoláním funkce, v&nbsp;níž jsou implementováni. Namísto toho je předávání úloh a plánování práce workerů ponecháno na nástroji <strong>dramatiq</strong>. Ten se spustí jednoduše &ndash; přesuneme se do adresáře se skriptem obsahujícím kód workera a napíšeme:</p>

<pre>
$ <strong>dramatiq test_worker_1</strong>
</pre>

<p>Povšimněte si, že se spustí celkem osm procesů s&nbsp;čekajícím workerem. Je tomu tak z&nbsp;toho důvodu, že na mém počítači je dostupných osm jader a nástroj <strong>dramatiq</strong> se snaží využít všechna dostupná jádra (toto nastavení je pochopitelně možné ovlivnit z&nbsp;příkazové řádky):</p>

<pre>
[2019-07-23 14:01:57,290] [PID 3229] [MainThread] [dramatiq.MainProcess] [INFO] Dramatiq '1.6.0' is booting up.
[2019-07-23 14:01:57,323] [PID 3235] [MainThread] [dramatiq.WorkerProcess(0)] [INFO] Worker process is ready for action.
[2019-07-23 14:01:57,324] [PID 3237] [MainThread] [dramatiq.WorkerProcess(1)] [INFO] Worker process is ready for action.
[2019-07-23 14:01:57,324] [PID 3238] [MainThread] [dramatiq.WorkerProcess(2)] [INFO] Worker process is ready for action.
[2019-07-23 14:01:57,330] [PID 3239] [MainThread] [dramatiq.WorkerProcess(3)] [INFO] Worker process is ready for action.
[2019-07-23 14:01:57,332] [PID 3240] [MainThread] [dramatiq.WorkerProcess(4)] [INFO] Worker process is ready for action.
[2019-07-23 14:01:57,332] [PID 3242] [MainThread] [dramatiq.WorkerProcess(6)] [INFO] Worker process is ready for action.
[2019-07-23 14:01:57,334] [PID 3241] [MainThread] [dramatiq.WorkerProcess(5)] [INFO] Worker process is ready for action.
[2019-07-23 14:01:57,348] [PID 3243] [MainThread] [dramatiq.WorkerProcess(7)] [INFO] Worker process is ready for action.
</pre>

<p>Náš worker by se měl spustit a vypsat na terminál informaci o tom, že začal zpracovávat (jedinou) úlohu a následně ji i ukončil:</p>

<pre>
Working
Done
</pre>

<p>Jakmile byla úloha zpracována, můžeme všechny procesy ukončit, například klávesovou zkratkou <strong>Ctrl+C</strong>:</p>

<pre>
[2019-07-23 14:02:51,893] [PID 3414] [MainThread] [dramatiq.MainProcess] [INFO] Sending signal 'SIGTERM' to worker processes...
[2019-07-23 14:02:51,895] [PID 3419] [MainThread] [dramatiq.WorkerProcess(0)] [INFO] Stopping worker process...
[2019-07-23 14:02:51,895] [PID 3420] [MainThread] [dramatiq.WorkerProcess(1)] [INFO] Stopping worker process...
[2019-07-23 14:02:51,895] [PID 3421] [MainThread] [dramatiq.WorkerProcess(2)] [INFO] Stopping worker process...
[2019-07-23 14:02:51,895] [PID 3422] [MainThread] [dramatiq.WorkerProcess(3)] [INFO] Stopping worker process...
[2019-07-23 14:02:51,895] [PID 3423] [MainThread] [dramatiq.WorkerProcess(4)] [INFO] Stopping worker process...
[2019-07-23 14:02:51,895] [PID 3424] [MainThread] [dramatiq.WorkerProcess(5)] [INFO] Stopping worker process...
[2019-07-23 14:02:51,895] [PID 3425] [MainThread] [dramatiq.WorkerProcess(6)] [INFO] Stopping worker process...
[2019-07-23 14:02:51,895] [PID 3426] [MainThread] [dramatiq.WorkerProcess(7)] [INFO] Stopping worker process...
[2019-07-23 14:02:52,741] [PID 3420] [MainThread] [dramatiq.worker.Worker] [INFO] Shutting down...
[2019-07-23 14:02:52,746] [PID 3421] [MainThread] [dramatiq.worker.Worker] [INFO] Shutting down...
[2019-07-23 14:02:52,750] [PID 3419] [MainThread] [dramatiq.worker.Worker] [INFO] Shutting down...
[2019-07-23 14:02:52,750] [PID 3422] [MainThread] [dramatiq.worker.Worker] [INFO] Shutting down...
[2019-07-23 14:02:52,750] [PID 3423] [MainThread] [dramatiq.worker.Worker] [INFO] Shutting down...
[2019-07-23 14:02:52,751] [PID 3424] [MainThread] [dramatiq.worker.Worker] [INFO] Shutting down...
[2019-07-23 14:02:52,751] [PID 3425] [MainThread] [dramatiq.worker.Worker] [INFO] Shutting down...
[2019-07-23 14:02:52,761] [PID 3426] [MainThread] [dramatiq.worker.Worker] [INFO] Shutting down...
[2019-07-23 14:02:53,990] [PID 3424] [MainThread] [dramatiq.worker.Worker] [INFO] Worker has been shut down.
[2019-07-23 14:02:54,052] [PID 3421] [MainThread] [dramatiq.worker.Worker] [INFO] Worker has been shut down.
[2019-07-23 14:02:54,082] [PID 3423] [MainThread] [dramatiq.worker.Worker] [INFO] Worker has been shut down.
[2019-07-23 14:02:54,114] [PID 3426] [MainThread] [dramatiq.worker.Worker] [INFO] Worker has been shut down.
[2019-07-23 14:02:54,154] [PID 3422] [MainThread] [dramatiq.worker.Worker] [INFO] Worker has been shut down.
[2019-07-23 14:02:54,202] [PID 3419] [MainThread] [dramatiq.worker.Worker] [INFO] Worker has been shut down.
[2019-07-23 14:02:54,283] [PID 3425] [MainThread] [dramatiq.worker.Worker] [INFO] Worker has been shut down.
[2019-07-23 14:02:54,744] [PID 3420] [MainThread] [dramatiq.worker.Worker] [INFO] Worker has been shut down.
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se korektně ukončilo všech osm procesů s&nbsp;workery.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Druhý demonstrační příklad &ndash; předání parametrů workerům</h2>

<p>První worker byl ve skutečnosti velmi primitivní, protože neakceptoval žádné parametry. Teoreticky by tedy měl při každém zavolání vykonat tu samou činnost &ndash; jinými slovy by měl být <i>idempotentní</i>. Můžeme se ovšem pochopitelně pokusit vytvořit workera, který akceptuje nějaký parametr či parametry. Prozatím se předaný parametr pouze vypíše na standardní výstup. Nová implementace workera může vypadat následovně:</p>

<pre>
</pre>

<p>Pochopitelně se změní i skript, který plánuje jednotlivé úlohy. Nyní tento skript musí generovat i parametry předané workeru. Celkem vytvoříme deset úloh:</p>

<pre>
</pre>

<p><div class="rs-tip-major">Poznámka: parametry, které mají být předány workeru, jsou součástí zprávy ukládané do message brokera. Z&nbsp;tohoto důvodu se musí jednat o hodnoty, které jsou serializovatelné do formátu JSON.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Spuštění druhého demonstračního příkladu</h2>

<p>Ihned po spuštění druhého demonstračního příkladu je zajímavé se podívat do logů. Můžeme zde vidět, že se nejprve spustilo osm úloh (protože na testovacím počítači je k&nbsp;dispozici osm jader), a další dvě úlohy mohly být spuštěny až ve chvíli, kdy byly předchozí úlohy dokončeny:</p>

<pre>
Working, received parameter: 10
Working, received parameter: 3
Working, received parameter: 4
Working, received parameter: 1
Working, received parameter: 5
Working, received parameter: 2
Working, received parameter: 8
Working, received parameter: 7
Done
Done
Done
Done
Done
Working, received parameter: 6
Done
Working, received parameter: 9
Done
Done
Done
Done
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Třetí demonstrační příklad &ndash; worker vyhazující výjimku</h2>

<p>Třetí demonstrační příklad se liší od druhého příkladu v&nbsp;tom, že worker pro některý vstupní parametr (konkrétně pro celočíselný parametr dělitelný třemi).</p>

<pre>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Spuštění třetího demonstračního příkladu</h2>

<p>Po spuštění workerů příkazem <strong>dramatiq</strong> uvidíme, jak workeři přijali jednotlivé úlohy, ovšem worker, který přijal úlohu s&nbsp;parametrem nastaveným na trojku posléze zhavaroval:</p>

<pre>
Working, received parameter: 10
Working, received parameter: 3
Working, received parameter: 4
Working, received parameter: 1
Working, received parameter: 5
Working, received parameter: 2
Working, received parameter: 8
Working, received parameter: 7
[2019-07-23 14:09:40,209] [PID 4347] [Thread-8] [dramatiq.worker.WorkerThread] [WARNING] <strong>Failed to process message test_worker(3) with unhandled exception</strong>.
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/worker.py", line 470, in process_message
    res = actor(*message.args, **message.kwargs)
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/actor.py", line 145, in __call__
    return self.fn(*args, **kwargs)
  File "./test_worker_3.py", line 20, in test_worker
    raise Exception("I don't like this parameter!")
Exception: I don't like this parameter!
</pre>

<p>Nástroj <i>Dramatiq</i> se havárii úlohy snaží vyřešit tím, že po určitém čase naplánuje tu samou úlohu, přičemž se časy mezi jednotlivými úlohami postupně zvětšují (protože nechceme dojít do okamžiku, kdy počítač stále dokola opakuje ty samé kroky vedoucí k&nbsp;chybě):</p>

<pre>
[2019-07-23 14:09:40,216] [PID 4347] [Thread-8] [dramatiq.middleware.retries.Retries] [INFO] <strong>Retrying message '73c0f344-b1ae-4601-852e-bab6dc77affb' in 13434 milliseconds</strong>.
Working, received parameter: 6
[2019-07-23 14:09:40,221] [PID 4347] [Thread-8] [dramatiq.worker.WorkerThread] [WARNING] <strong>Failed to process message test_worker(6) with unhandled exception</strong>.
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/worker.py", line 470, in process_message
    res = actor(*message.args, **message.kwargs)
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/actor.py", line 145, in __call__
    return self.fn(*args, **kwargs)
  File "./test_worker_3.py", line 20, in test_worker
    raise Exception("I don't like this parameter!")
Exception: I don't like this parameter!
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Čtvrtý příklad &ndash; omezení počtu znovuposlaných zpráv do workera</h2>

<pre>
Working, received parameter: 6
[2019-07-23 14:15:05,061] [PID 4946] [Thread-12] [dramatiq.worker.WorkerThread] [WARNING] <strong>Failed to process message test_worker(6) with unhandled exception</strong>.
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/worker.py", line 470, in process_message
    res = actor(*message.args, **message.kwargs)
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/actor.py", line 145, in __call__
    return self.fn(*args, **kwargs)
  File "./test_worker_4.py", line 20, in test_worker
    raise Exception("I don't like this parameter!")
Exception: I don't like this parameter!
[2019-07-23 14:15:05,065] [PID 4946] [Thread-12] [dramatiq.middleware.retries.Retries] [WARNING] <strong>Retries exceeded for message 'c59cf6e4-f226-4f91-9067-666d0ccd51a1'</strong>.
Working, received parameter: 3
[2019-07-23 14:15:14,667] [PID 4949] [Thread-5] [dramatiq.worker.WorkerThread] [WARNING] <strong>Failed to process message test_worker(3) with unhandled exception</strong>.
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/worker.py", line 470, in process_message
    res = actor(*message.args, **message.kwargs)
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/actor.py", line 145, in __call__
    return self.fn(*args, **kwargs)
  File "./test_worker_4.py", line 20, in test_worker
    raise Exception("I don't like this parameter!")
Exception: I don't like this parameter!
[2019-07-23 14:15:14,668] [PID 4949] [Thread-5] [dramatiq.middleware.retries.Retries] [WARNING] <strong>Retries exceeded for message 'c83ee481-47c1-4dd1-9bbb-c7a1e3083233'</strong>.
Working, received parameter: 9
[2019-07-23 14:15:24,905] [PID 4948] [Thread-5] [dramatiq.worker.WorkerThread] [WARNING] <strong>Failed to process message test_worker(9) with unhandled exception</strong>.
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/worker.py", line 470, in process_message
    res = actor(*message.args, **message.kwargs)
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/actor.py", line 145, in __call__
    return self.fn(*args, **kwargs)
  File "./test_worker_4.py", line 20, in test_worker
    raise Exception("I don't like this parameter!")
Exception: I don't like this parameter!
[2019-07-23 14:15:24,908] [PID 4948] [Thread-5] [dramatiq.middleware.retries.Retries] [WARNING] <strong>Retries exceeded for message 'e32d6343-5af0-4ab8-a7a7-b5ef6cd31ad7'</strong>.
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pátý příklad &ndash; nastavení minimálního a maximálního časového intervalu mezi znovuposláním zprávy</h2>

<pre>
Working, received parameter: 42
[2019-07-23 14:18:11,229] [PID 5604] [Thread-5] [dramatiq.worker.WorkerThread] [WARNING] <strong>Failed to process message test_worker(42) with unhandled exception</strong>.
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/worker.py", line 470, in process_message
    res = actor(*message.args, **message.kwargs)
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/actor.py", line 145, in __call__
    return self.fn(*args, **kwargs)
  File "./test_worker_5.py", line 19, in test_worker
    raise Exception("I don't like this parameter!")
Exception: I don't like this parameter!
[2019-07-23 14:18:11,233] [PID 5604] [Thread-5] [dramatiq.middleware.retries.Retries] [INFO] <strong>Retrying message '257d6c66-b798-47a6-bc44-2373d374eb14' in 70 milliseconds</strong>.
Working, received parameter: 42
[2019-07-23 14:18:11,333] [PID 5598] [Thread-5] [dramatiq.worker.WorkerThread] [WARNING] <strong>Failed to process message test_worker(42) with unhandled exception</strong>.
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/worker.py", line 470, in process_message
    res = actor(*message.args, **message.kwargs)
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/actor.py", line 145, in __call__
    return self.fn(*args, **kwargs)
  File "./test_worker_5.py", line 19, in test_worker
    raise Exception("I don't like this parameter!")
Exception: I don't like this parameter!
</pre>

<pre>
Working, received parameter: 42
[2019-07-23 14:18:41,865] [PID 5601] [Thread-7] [dramatiq.worker.WorkerThread] [WARNING] <strong>Failed to process message test_worker(42) with unhandled exception</strong>.
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/worker.py", line 470, in process_message
    res = actor(*message.args, **message.kwargs)
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/actor.py", line 145, in __call__
    return self.fn(*args, **kwargs)
  File "./test_worker_5.py", line 19, in test_worker
    raise Exception("I don't like this parameter!")
Exception: I don't like this parameter!
[2019-07-23 14:18:41,867] [PID 5601] [Thread-7] [dramatiq.middleware.retries.Retries] [INFO] <strong>Retrying message</strong> '257d6c66-b798-47a6-bc44-2373d374eb14' in 1562 milliseconds.
Working, received parameter: 42
[2019-07-23 14:18:43,740] [PID 5604] [Thread-7] [dramatiq.worker.WorkerThread] [WARNING] <strong>Failed to process message test_worker(42) with unhandled exception</strong>.
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/worker.py", line 470, in process_message
    res = actor(*message.args, **message.kwargs)
  File "/home/tester/.local/lib/python3.6/site-packages/dramatiq/actor.py", line 145, in __call__
    return self.fn(*args, **kwargs)
  File "./test_worker_5.py", line 19, in test_worker
    raise Exception("I don't like this parameter!")
Exception: I don't like this parameter!
[2019-07-23 14:18:43,741] [PID 5604] [Thread-7] [dramatiq.middleware.retries.Retries] [WARNING] <strong>Retries exceeded</strong> for message '257d6c66-b798-47a6-bc44-2373d374eb14'.
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Konfigurace aplikace v&nbsp;případě použití většího množství workerů a front</h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Šestý demonstrační příklad &ndash; tři na sobě nezávislí workeři</h2>

<pre>
Worker C: working, received parameter: 2
Worker B: working, received parameter: 1
Worker C: working, received parameter: 1
Worker A: working, received parameter: 1
Worker B: working, received parameter: 2
Worker A: working, received parameter: 2
Worker C: working, received parameter: 3
Worker B: working, received parameter: 3
Worker C: done
Worker B: done
Worker A: done
Worker C: done
Worker C: done
Worker B: done
Worker B: done
Worker A: done
Worker C: working, received parameter: 5
Worker A: working, received parameter: 5
Worker A: working, received parameter: 4
Worker B: working, received parameter: 4
Worker A: working, received parameter: 3
Worker B: working, received parameter: 5
Worker C: working, received parameter: 4
Worker C: done
Worker A: done
Worker B: done
Worker A: done
Worker A: done
Worker B: done
Worker C: done
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
for i in range(1, 6):
    g = dramatiq.group([
        test_worker_A.message(i),
        test_worker_B.message(i),
        test_worker_C.message(i)
    ]).run()
</pre>

<pre>
Worker A: working, received parameter: 3
Worker A: working, received parameter: 1
Worker C: working, received parameter: 2
Worker B: working, received parameter: 1
Worker C: working, received parameter: 1
Worker B: working, received parameter: 1
Worker B: working, received parameter: 2
Worker C: working, received parameter: 1
Worker C: working, received parameter: 5
Worker C: working, received parameter: 4
Worker A: working, received parameter: 4
Worker C: working, received parameter: 3
Worker C: working, received parameter: 4
Worker A: working, received parameter: 4
Worker B: working, received parameter: 4
Worker B: working, received parameter: 3
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p>Ještě se podívejme na rozdíl mezi použitím metody <strong>send</strong> a <strong>message</strong>. Pokud ve skupině workerů použijeme metodu <strong>send</strong>, bude ve skutečnosti každý worker zavolán dvakrát s&nbsp;tím stejným parametrem, což většinou je chování, které nám nebude vyhovovat:</p>

<pre>
for i in range(1, 6):
    print(i)
    g = dramatiq.group([
        test_worker_A.send(str(i)),
        test_worker_B.send(str(i)),
        test_worker_C.send(str(i))
    ]).run()
    g.wait(timeout=20000)
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
Worker C: working, received parameter: 1
Worker B: working, received parameter: 1
Worker B: done
Worker C: done
Worker C: working, received parameter: 1
Worker C: done
Worker A: working, received parameter: 1
Worker A: done
Worker B: working, received parameter: 1
Worker A: working, received parameter: 1
Worker A: done
Worker B: done
Worker C: working, received parameter: 2
Worker C: done
Worker A: working, received parameter: 2
Worker A: done
Worker C: working, received parameter: 2
Worker C: done
Worker A: working, received parameter: 2
Worker A: done
Worker B: working, received parameter: 2
Worker B: done
Worker B: working, received parameter: 2
Worker B: done
Worker C: working, received parameter: 3
Worker C: done
Worker B: working, received parameter: 3
Worker C: working, received parameter: 3
Worker A: working, received parameter: 3
</pre>

<p>Ovšem ve chvíli, kdy se zdrojový kód příkladu změní tak, že se namísto <strong>send</strong> použije <strong>message</strong>:</p>

<pre>
for i in range(1, 6):
    print(i)
    g = dramatiq.group([
        test_worker_A.message(str(i)),
        test_worker_B.message(str(i)),
        test_worker_C.message(str(i))
    ]).run()
    g.wait(timeout=20000)
</pre>

<p>Bude rozdílné i chování &ndash; nyní se vždy spustí všechny tři workery ve skupině a teprve poté se spustí další skupina workerů:</p>

<pre>
Worker C: working, received parameter: 1
Worker C: done
Worker B: working, received parameter: 1
Worker B: done
Worker A: working, received parameter: 1
Worker A: done
&nbsp;
Worker C: working, received parameter: 2
Worker B: working, received parameter: 2
Worker B: done
Worker C: done
Worker A: working, received parameter: 2
Worker A: done
&nbsp;
Worker C: working, received parameter: 3
Worker C: done
Worker B: working, received parameter: 3
Worker A: working, received parameter: 3
Worker A: done
Worker B: done
&nbsp;
Worker C: working, received parameter: 4
Worker B: working, received parameter: 4
Worker B: done
Worker A: working, received parameter: 4
Worker C: done
Worker A: done
&nbsp;
Worker C: working, received parameter: 5
Worker B: working, received parameter: 5
Worker B: done
Worker A: working, received parameter: 5
Worker A: done
Worker C: done
</pre>

<p><div class="rs-tip-major">Poznámka: pro větší přehlednost jsem jednotlivé zprávy vypisované workery rozdělil prázdným řádkem tam, kde došlo k&nbsp;dokončení celé skupiny úloh.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p>V&nbsp;předposledním demonstračním příkladu je ukázáno, jak lze vytvořit takzvanou <i>kolonu</i> (<i>pipeline</i>) složenou z&nbsp;více workerů. Nejprve je spuštěn první worker a jeho výsledek je předán workerovi druhému, výsledek druhého workera je předán workerovi třetímu atd. &ndash; zcela stejným způsobem, jako v&nbsp;klasické Unixové koloně (povšimněte si, že workeři nemusí vědět, kdo jim parametry předal a kdo zpracuje jejich výsledek, naprosto stejně, jako je tomu v&nbsp;Unixové pipeline):</p>

<pre>
p = dramatiq.pipeline([
    test_worker_A.message("!"),
    test_worker_B.message(),
    test_worker_C.message()
]).run()
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti je možné workerům předat i další parametry, ovšem výsledek předchozího workera je vždy předán v&nbsp;posledním parametru.</div></p>

<p>Implementace všech tří workerů je snadná; každý worker přečte parametr úlohy, přidá k&nbsp;němu jedno písmeno a vrátí jako výsledek:</p>

<pre>
import time
&nbsp;
import dramatiq
from dramatiq.brokers.redis import RedisBroker
from dramatiq.results.backends import RedisBackend
from dramatiq.results import Results
&nbsp;
&nbsp;
def setup_broker_and_backend():
    redis_broker = RedisBroker(host="localhost", port=6379)
    result_backend = RedisBackend()
    dramatiq.set_broker(redis_broker)
    redis_broker.add_middleware(Results(backend=result_backend))
    return redis_broker
&nbsp;
&nbsp;
setup_broker_and_backend()
&nbsp;
&nbsp;
def worker(name, parameter):
    print("Worker {w}: working, received parameter: {param}".format(w=name, param=parameter))
    print("Worker {w}: done".format(w=name))
&nbsp;
&nbsp;
@dramatiq.actor(store_results=True)
def test_worker_A(parameter):
    worker("A", parameter)
    return parameter + "A"
&nbsp;
&nbsp;
@dramatiq.actor(store_results=True)
def test_worker_B(parameter):
    worker("B", parameter)
    return parameter + "B"
&nbsp;
&nbsp;
@dramatiq.actor(store_results=True)
def test_worker_C(parameter):
    worker("C", parameter)
    return parameter + "C"
</pre>

<p>Úplný zdrojový kód skriptu, který spustí kolonu workerů, vypadá následovně:</p>

<pre>
import time
import dramatiq
&nbsp;
from dramatiq.brokers.redis import RedisBroker
&nbsp;
from test_worker_9 import test_worker_A, test_worker_B, test_worker_C, setup_broker_and_backend
&nbsp;
&nbsp;
setup_broker_and_backend()
&nbsp;
p = dramatiq.pipeline([
    test_worker_A.message("!"),
    test_worker_B.message(),
    test_worker_C.message()
]).run()
&nbsp;
print(p.get_result(block=True, timeout=5000))
</pre>

<p>Podívejme se nyní na to, jak bude vypadat výsledek spojení tří workerů do kolony:</p>

<pre>
Worker A: working, received parameter: !
Worker A: done
Worker B: working, received parameter: !A
Worker B: done
Worker C: working, received parameter: !AB
Worker C: done
</pre>

<p>V&nbsp;dnešním posledním demonstračním příkladu opět použijeme kolonu (pipeline) složenou ze tří workerů, tentokrát ovšem bude každá kolona spuštěna třikrát &ndash; pokaždé pro jiný vstup. Pro jednoduchost budou vstupy znaky "X", "Y" a "Z":</p>

<pre>
for parameter in "XYZ":
    p = dramatiq.pipeline([
        test_worker_A.message(parameter),
        test_worker_B.message(),
        test_worker_C.message(),
        test_worker_A.message(),
        test_worker_B.message(),
        test_worker_C.message()
    ]).run()
</pre>

<p>Úplný tvar skriptu, který úlohy naplánuje, bude vypadat takto:</p>

<pre>
import time
import dramatiq
&nbsp;
from dramatiq.brokers.redis import RedisBroker
&nbsp;
from test_worker_10 import test_worker_A, test_worker_B, test_worker_C, setup_broker_and_backend
&nbsp;
&nbsp;
setup_broker_and_backend()
&nbsp;
for parameter in "XYZ":
    p = dramatiq.pipeline([
        test_worker_A.message(parameter),
        test_worker_B.message(),
        test_worker_C.message(),
        test_worker_A.message(),
        test_worker_B.message(),
        test_worker_C.message()
    ]).run()
    print(p.get_result(block=True, timeout=5000))
</pre>

<p>Výsledky získané z&nbsp;jednotlivých kolon by tedy měly vypadat následovně:</p>

<pre>
XABCABC
YABCABC
ZABCABC
</pre>

<p><div class="rs-tip-major">Poznámka: teoreticky je ovšem možné, ze se výsledky uloží v&nbsp;jiném pořadí.</div></p>

<p>Pochopitelně můžeme sledovat i chování jednotlivých workerů při zpracovávání vstupů a generování výsledků:</p>

<pre>
Worker A: working, received parameter: X
Worker A: done
Worker B: working, received parameter: XA
Worker B: done
Worker C: working, received parameter: XAB
Worker C: done
Worker A: working, received parameter: XABC
Worker A: done
Worker B: working, received parameter: XABCA
Worker B: done
Worker C: working, received parameter: XABCAB
Worker C: done
Worker A: working, received parameter: Y
Worker A: done
Worker B: working, received parameter: YA
Worker B: done
Worker C: working, received parameter: YAB
Worker C: done
Worker A: working, received parameter: YABC
Worker A: done
Worker B: working, received parameter: YABCA
Worker B: done
Worker C: working, received parameter: YABCAB
Worker C: done
Worker A: working, received parameter: Z
Worker A: done
Worker B: working, received parameter: ZA
Worker B: done
Worker C: working, received parameter: ZAB
Worker C: done
Worker A: working, received parameter: ZABC
Worker A: done
Worker B: working, received parameter: ZABCA
Worker B: done
Worker C: working, received parameter: ZABCAB
Worker C: done
</pre>




<p><a name="k18"></a></p>
<h2 id="k18">18. Nástroj dramatiq-dashboard pro sledování front</h2>

<p>Jedním z&nbsp;pomocných nástrojů, o němž se v&nbsp;dnešním článku ve stručnosti zmíníme, je nástroj nazvaný <i>dramatiq_dashboard</i>. Jedná se o obdobu nástroje <i>rq-dashboard</i>, který byl vyvinut pro konkurenční systém <i>Redis Queue</i>. Nástroj <i>dramatiq_dashboard</i> je určen pro zobrazení webových stránek s&nbsp;informacemi o použitých frontách, připojených workerech atd. Zajímavé je, že <i>dramatiq_dashboard</i> je možné zabudovat do libovolné WSGI aplikace či WSGI webového serveru, nemusí se tedy jednat o další samostatně běžící webový server.</p>

<p>Instalaci nástroje (či možná lépe řečeno knihovny) <i>dramatiq_dashboard</i> opět provedeme pomocí <strong>pip</strong> nebo <strong>pip3</strong>:</p>

<pre>
$ <strong>pip3 install --user dramatiq_dashboard</strong>
&nbsp;
Collecting dramatiq_dashboard
  Downloading https://files.pythonhosted.org/packages/d9/f6/89bbc958546f18ab3207db3b52fef235528a1f87cc680ceea9001868941a/dramatiq_dashboard-0.2.2-py3-none-any.whl
Requirement already satisfied: redis&lt;4.0,&gt;=2.0 in ./.local/lib/python3.6/site-packages (from dramatiq_dashboard)
Requirement already satisfied: jinja2&lt;3,&gt;=2 in ./.local/lib/python3.6/site-packages (from dramatiq_dashboard)
Requirement already satisfied: dramatiq[redis]&lt;2.0,&gt;=1.6 in ./.local/lib/python3.6/site-packages (from dramatiq_dashboard)
Requirement already satisfied: MarkupSafe&gt;=0.23 in ./.local/lib/python3.6/site-packages (from jinja2&lt;3,&gt;=2-&gt;dramatiq_dashboard)
Requirement already satisfied: prometheus-client&lt;0.3,&gt;=0.2 in ./.local/lib/python3.6/site-packages (from dramatiq[redis]&lt;2.0,&gt;=1.6-&gt;dramatiq_dashboard)
Installing collected packages: dramatiq-dashboard
Successfully installed dramatiq-dashboard-0.2.2
</pre>

<p>Jak již bylo řečeno v&nbsp;předchozím odstavci, je možné <i>dramatiq_dashboard</i> integrovat do WSGI aplikace. Samotná integrace je popsána přímo na stránkách tohoto projektu a může vypadat následovně:</p>

<pre>
import bjoern
import dramatiq
from dramatiq.brokers.redis import RedisBroker
from dramatiq_dashboard import DashboardApp
&nbsp;
broker = RedisBroker(host="127.0.0.1", port=6379)
dramatiq.set_broker(broker)
&nbsp;
app = DashboardApp(broker=broker, prefix="")
bjoern.run(app, "127.0.0.1", 8080)
</pre>

<p><div class="rs-tip-major">Poznámka: zde se konkrétně používá projekt <a href="https://github.com/jonashaag/bjoern">Bjoern</a> a nikoli například <a href="https://gunicorn.org/">Gunicorn</a>.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naprogramovaných
v&nbsp;programovacím jazyku Python byly uloženy do Git repositáře, který je
dostupný na adrese <a
href="https://github.com/tisnik/message-queues-examples">https://github.com/tisnik/message-queues-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce.</p>

<table>
<tr><th>Příklad</th><th>Skript</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>1</td><td>example01/test_worker_1.py</td><td>worker přijímající úlohu bez parametrů</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example01/test_worker_1.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example01/test_worker_1.py</a></td></tr>
<tr><td>2</td><td>example01/enqueue_work.py</td><td>skript pro naplánování jedné úlohy pro workera</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example01/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example01/enqueue_work.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>example02/test_worker_2.py</td><td>worker přijímající úlohu s&nbsp;jedním parametrem</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example02/test_worker_2.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example02/test_worker_2.py</a></td></tr>
<tr><td>4</td><td>example02/enqueue_work.py</td><td>skript pro naplánování deseti úloh pro workera</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example02/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example02/enqueue_work.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>example03/test_worker_3.py</td><td>worker vyhazující výjimku pro některé úlohy</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example03/test_worker_3.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example03/test_worker_3.py</a></td></tr>
<tr><td>6</td><td>example03/enqueue_work.py</td><td>skript pro naplánování deseti úloh pro workera</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example03/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example03/enqueue_work.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>example04/test_worker_4.py</td><td>worker vyhazující výjimku pro některé úlohy</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example04/test_worker_4.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example04/test_worker_4.py</a></td></tr>
<tr><td>8</td><td>example04/enqueue_work.py</td><td>nastavení volby <i>max_retries</i> pro opakované posílání zprávy</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example04/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example04/enqueue_work.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>9</td><td>example05/test_worker_5.py</td><td>worker vyhazující výjimku pro některé úlohy</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example05/test_worker_5.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example05/test_worker_5.py</a></td></tr>
<tr><td>10</td><td>example05/enqueue_work.py</td><td>nastavení volby <i>min_backoff</i> a <i>max_backoff</i> pro opakované posílání zprávy</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example05/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example05/enqueue_work.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>example06/test_worker_6.py</td><td>implementace více workerů</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example06/test_worker_6.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example06/test_worker_6.py</a></td></tr>
<tr><td>12</td><td>example06/enqueue_work.py</td><td>spuštění většího množství workerů (asynchronně, současně)</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example06/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example06/enqueue_work.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>example07/test_worker_7.py</td><td>implementace více workerů</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example07/test_worker_7.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example07/test_worker_7.py</a></td></tr>
<tr><td>14</td><td>example07/enqueue_work.py</td><td>seskupení workerů (<i>groups</i>)</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example07/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example07/enqueue_work.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>example08/test_worker_8.py</td><td>implementace více workerů</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example08/test_worker_8.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example08/test_worker_8.py</a></td></tr>
<tr><td>16</td><td>example08/enqueue_work.py</td><td>nastavení úložiště pro výsledky workerů</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example08/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example08/enqueue_work.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>example09/test_worker_9.py</td><td>implementace více workerů</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example09/test_worker_9.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example09/test_worker_9.py</a></td></tr>
<tr><td>18</td><td>example09/enqueue_work.py</td><td>kolona workerů (<i>pipeline</i>)</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example09/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example09/enqueue_work.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>example10/test_worker_10.py</td><td>implementace více workerů</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example10/test_worker_10.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example10/test_worker_10.py</a></td></tr>
<tr><td>20</td><td>example10/enqueue_work.py</td><td>několikanásobné spuštění kolony workerů (<i>pipeline</i>)</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example10/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/dramatiq/example10/enqueue_work.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Dramatiq: simple task processing<br />
<a href="https://dramatiq.io/">https://dramatiq.io/</a>
</li>

<li>Cookbook (for Dramatiq)<br />
<a href="https://dramatiq.io/cookbook.html">https://dramatiq.io/cookbook.html</a>
</li>

<li>dramatiq na PyPi<br />
<a href="https://pypi.org/project/dramatiq/">https://pypi.org/project/dramatiq/</a>
</li>

<li>Dramatiq dashboard<br />
<a href="https://github.com/Bogdanp/dramatiq_dashboard">https://github.com/Bogdanp/dramatiq_dashboard</a>
</li>

<li>Dramatiq na Redditu<br />
<a href="https://www.reddit.com/r/dramatiq/">https://www.reddit.com/r/dramatiq/</a>
</li>

<li>A Dramatiq broker that can be used with Amazon SQS<br />
<a href="https://github.com/Bogdanp/dramatiq_sqs">https://github.com/Bogdanp/dramatiq_sqs</a>
</li>

<li>nanomsg na GitHubu<br />
<a href="https://github.com/nanomsg/nanomsg">https://github.com/nanomsg/nanomsg</a>
</li>

<li>Referenční příručka knihovny <strong>nanomsg</strong><br />
<a href="https://nanomsg.org/v1.1.5/nanomsg.html">https://nanomsg.org/v1.1.5/nanomsg.html</a>
</li>

<li>nng (nanomsg-next-generation)<br />
<a href="https://github.com/nanomsg/nng">https://github.com/nanomsg/nng</a>
</li>

<li>Differences between nanomsg and ZeroMQ<br />
<a href="https://nanomsg.org/documentation-zeromq.html">https://nanomsg.org/documentation-zeromq.html</a>
</li>

<li>NATS<br />
<a href="https://nats.io/about/">https://nats.io/about/</a>
</li>

<li>NATS Streaming Concepts<br />
<a href="https://nats.io/documentation/streaming/nats-streaming-intro/">https://nats.io/documentation/streaming/nats-streaming-intro/</a>
</li>

<li>NATS Streaming Server<br />
<a href="https://nats.io/download/nats-io/nats-streaming-server/">https://nats.io/download/nats-io/nats-streaming-server/</a>
</li>

<li>NATS Introduction<br />
<a href="https://nats.io/documentation/">https://nats.io/documentation/</a>
</li>

<li>NATS Client Protocol<br />
<a href="https://nats.io/documentation/internals/nats-protocol/">https://nats.io/documentation/internals/nats-protocol/</a>
</li>

<li>NATS Messaging (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NATS_Messaging">https://en.wikipedia.org/wiki/NATS_Messaging</a>
</li>

<li>Stránka Apache Software Foundation<br />
<a href="http://www.apache.org/">http://www.apache.org/</a>
</li>

<li>Informace o portu 5672<br />
<a href="http://www.tcp-udp-ports.com/port-5672.htm">http://www.tcp-udp-ports.com/port-5672.htm</a>
</li>

<li>Třída MessagingHandler knihovny Qpid Proton<br />
<a href="https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._handlers.MessagingHandler-class.html">https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._handlers.MessagingHandler-class.html</a>
</li>

<li>Třída Event knihovny Qpid Proton<br />
<a href="https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._events.Event-class.html">https://qpid.apache.org/releases/qpid-proton-0.27.0/proton/python/api/proton._events.Event-class.html</a>
</li>

<li>package stomp (Go)<br />
<a href="https://godoc.org/github.com/go-stomp/stomp">https://godoc.org/github.com/go-stomp/stomp</a>
</li>

<li>Go language library for STOMP protocol<br />
<a href="https://github.com/go-stomp/stomp">https://github.com/go-stomp/stomp</a>
</li>

<li>python-qpid-proton 0.26.0 na PyPi<br />
<a href="https://pypi.org/project/python-qpid-proton/">https://pypi.org/project/python-qpid-proton/</a>
</li>

<li>Qpid Proton<br />
<a href="http://qpid.apache.org/proton/">http://qpid.apache.org/proton/</a>
</li>

<li>Using the AMQ Python Client<br />
<a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.1/html-single/using_the_amq_python_client/">https://access.redhat.com/documentation/en-us/red_hat_amq/7.1/html-single/using_the_amq_python_client/</a>
</li>

<li>Apache ActiveMQ<br />
<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>
</li>

<li>Apache ActiveMQ Artemis<br />
<a href="https://activemq.apache.org/artemis/">https://activemq.apache.org/artemis/</a>
</li>

<li>Apache ActiveMQ Artemis User Manual<br />
<a href="https://activemq.apache.org/artemis/docs/latest/index.html">https://activemq.apache.org/artemis/docs/latest/index.html</a>
</li>

<li>KahaDB<br />
<a href="http://activemq.apache.org/kahadb.html">http://activemq.apache.org/kahadb.html</a>
</li>

<li>Understanding the KahaDB Message Store<br />
<a href="https://access.redhat.com/documentation/en-US/Fuse_MQ_Enterprise/7.1/html/Configuring_Broker_Persistence/files/KahaDBOverview.html">https://access.redhat.com/documentation/en-US/Fuse_MQ_Enterprise/7.1/html/Configuring_Broker_Persistence/files/KahaDBOverview.html</a>
</li>

<li>Command Line Tools (Apache ActiveMQ)<br />
<a href="https://activemq.apache.org/activemq-command-line-tools-reference.html">https://activemq.apache.org/activemq-command-line-tools-reference.html</a>
</li>

<li>stomp.py 4.1.21 na PyPi<br />
<a href="https://pypi.org/project/stomp.py/">https://pypi.org/project/stomp.py/</a>
</li>

<li>Stomp Tutorial<br />
<a href="https://access.redhat.com/documentation/en-US/Fuse_Message_Broker/5.5/html/Connectivity_Guide/files/FMBConnectivityStompTelnet.html">https://access.redhat.com/documentation/en-US/Fuse_Message_Broker/5.5/html/Connectivity_Guide/files/FMBConnectivityStompTelnet.html</a>
</li>

<li>Heartbeat (computing)<br />
<a href="https://en.wikipedia.org/wiki/Heartbeat_(computing)">https://en.wikipedia.org/wiki/Heartbeat_(computing)</a>
</li>

<li>Apache Camel<br />
<a href="https://camel.apache.org/">https://camel.apache.org/</a>
</li>

<li>Red Hat Fuse<br />
<a href="https://developers.redhat.com/products/fuse/overview/">https://developers.redhat.com/products/fuse/overview/</a>
</li>

<li>Confusion between ActiveMQ and ActiveMQ-Artemis?<br />
<a href="https://serverfault.com/questions/873533/confusion-between-activemq-and-activemq-artemis">https://serverfault.com/questions/873533/confusion-between-activemq-and-activemq-artemis</a>
</li>

<li>Staré stránky projektu HornetQ<br />
<a href="http://hornetq.jboss.org/">http://hornetq.jboss.org/</a>
</li>

<li>Snapshot JeroMQ verze 0.4.4<br />
<a href="https://oss.sonatype.org/content/repositories/snapshots/org/zeromq/jeromq/0.4.4-SNAPSHOT/">https://oss.sonatype.org/content/repositories/snapshots/org/zeromq/jeromq/0.4.4-SNAPSHOT/</a>
</li>

<li>Difference between ActiveMQ vs Apache ActiveMQ Artemis<br />
<a href="http://activemq.2283324.n4.nabble.com/Difference-between-ActiveMQ-vs-Apache-ActiveMQ-Artemis-td4703828.html">http://activemq.2283324.n4.nabble.com/Difference-between-ActiveMQ-vs-Apache-ActiveMQ-Artemis-td4703828.html</a>
</li>

<li>Microservices communications. Why you should switch to message queues<br />
<a href="https://dev.to/matteojoliveau/microservices-communications-why-you-should-switch-to-message-queues--48ia">https://dev.to/matteojoliveau/microservices-communications-why-you-should-switch-to-message-queues--48ia</a>
</li>

<li>Stomp.py 4.1.19 documentation<br />
<a href="https://stomppy.readthedocs.io/en/stable/">https://stomppy.readthedocs.io/en/stable/</a>
</li>

<li>Repositář knihovny JeroMQ<br />
<a href="https://github.com/zeromq/jeromq/">https://github.com/zeromq/jeromq/</a>
</li>

<li>ØMQ &ndash; Distributed Messaging <br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>ØMQ Community<br />
<a href="http://zeromq.org/community">http://zeromq.org/community</a>
</li>

<li>Get The Software<br />
<a href="http://zeromq.org/intro:get-the-software">http://zeromq.org/intro:get-the-software</a>
</li>

<li>PyZMQ Documentation<br />
<a href="https://pyzmq.readthedocs.io/en/latest/">https://pyzmq.readthedocs.io/en/latest/</a>
</li>

<li>Module: zmq.decorators<br />
<a href="https://pyzmq.readthedocs.io/en/latest/api/zmq.decorators.html">https://pyzmq.readthedocs.io/en/latest/api/zmq.decorators.html</a>
</li>

<li>ZeroMQ is the answer, by Ian Barber<br />
<a href="https://vimeo.com/20605470">https://vimeo.com/20605470</a>
</li>

<li>ZeroMQ RFC<br />
<a href="https://rfc.zeromq.org/">https://rfc.zeromq.org/</a>
</li>

<li>ZeroMQ and Clojure, a brief introduction<br />
<a href="https://antoniogarrote.wordpress.com/2010/09/08/zeromq-and-clojure-a-brief-introduction/">https://antoniogarrote.wordpress.com/2010/09/08/zeromq-and-clojure-a-brief-introduction/</a>
</li>

<li>zeromq/czmq<br />
<a href="https://github.com/zeromq/czmq">https://github.com/zeromq/czmq</a>
</li>

<li>golang wrapper for CZMQ<br />
<a href="https://github.com/zeromq/goczmq">https://github.com/zeromq/goczmq</a>
</li>

<li>ZeroMQ version reporting in Python<br />
<a href="http://zguide.zeromq.org/py:version">http://zguide.zeromq.org/py:version</a>
</li>

<li>A Go interface to ZeroMQ version 4<br />
<a href="https://github.com/pebbe/zmq4">https://github.com/pebbe/zmq4</a>
</li>

<li>Broker vs. Brokerless<br />
<a href="http://zeromq.org/whitepapers:brokerless">http://zeromq.org/whitepapers:brokerless</a>
</li>

<li>Learning ØMQ with pyzmq<br />
<a href="https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/">https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/</a>
</li>

<li>Céčková funkce <strong>zmq_ctx_new</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-ctx-new">http://api.zeromq.org/4-2:zmq-ctx-new</a>
</li>

<li>Céčková funkce <strong>zmq_ctx_destroy</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-ctx-destroy">http://api.zeromq.org/4-2:zmq-ctx-destroy</a>
</li>

<li>Céčková funkce <strong>zmq_bind</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-bind">http://api.zeromq.org/4-2:zmq-bind</a>
</li>

<li>Céčková funkce <strong>zmq_unbind</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-unbind">http://api.zeromq.org/4-2:zmq-unbind</a>
</li>

<li>Céčková C funkce <strong>zmq_connect</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-connect">http://api.zeromq.org/4-2:zmq-connect</a>
</li>

<li>Céčková C funkce <strong>zmq_disconnect</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-disconnect">http://api.zeromq.org/4-2:zmq-disconnect</a>
</li>

<li>Céčková C funkce <strong>zmq_send</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-send">http://api.zeromq.org/4-2:zmq-send</a>
</li>

<li>Céčková C funkce <strong>zmq_recv</strong><br />
<a href="http://api.zeromq.org/4-2:zmq-recv">http://api.zeromq.org/4-2:zmq-recv</a>
</li>

<li>Třída <strong>Context</strong> (Python)<br />
<a href="https://pyzmq.readthedocs.io/en/latest/api/zmq.html#context">https://pyzmq.readthedocs.io/en/latest/api/zmq.html#context</a>
</li>

<li>Třída <strong>Socket</strong> (Python)<br />
<a href="https://pyzmq.readthedocs.io/en/latest/api/zmq.html#socket">https://pyzmq.readthedocs.io/en/latest/api/zmq.html#socket</a>
</li>

<li>Python binding<br />
<a href="http://zeromq.org/bindings:python">http://zeromq.org/bindings:python</a>
</li>

<li>Why should I have written ZeroMQ in C, not C++ (part I)<br />
<a href="http://250bpm.com/blog:4">http://250bpm.com/blog:4</a>
</li>

<li>Why should I have written ZeroMQ in C, not C++ (part II) <br />
<a href="http://250bpm.com/blog:8">http://250bpm.com/blog:8</a>
</li>

<li>About Nanomsg<br />
<a href="https://nanomsg.org/">https://nanomsg.org/</a>
</li>

<li>Advanced Message Queuing Protocol<br />
<a href="https://www.amqp.org/">https://www.amqp.org/</a>
</li>

<li>Advanced Message Queuing Protocol na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol">https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol</a>
</li>

<li>Dokumentace k&nbsp;příkazu <strong>rabbitmqctl</strong><br />
<a href="https://www.rabbitmq.com/rabbitmqctl.8.html">https://www.rabbitmq.com/rabbitmqctl.8.html</a>
</li>

<li>RabbitMQ<br />
<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a>
</li>

<li>RabbitMQ Tutorials<br />
<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a>
</li>

<li>RabbitMQ: Clients and Developer Tools<br />
<a href="https://www.rabbitmq.com/devtools.html">https://www.rabbitmq.com/devtools.html</a>
</li>

<li>RabbitMQ na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/RabbitMQ">https://en.wikipedia.org/wiki/RabbitMQ</a>
</li>

<li>Streaming Text Oriented Messaging Protocol<br />
<a href="https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol">https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol</a>
</li>

<li>Message Queuing Telemetry Transport<br />
<a href="https://en.wikipedia.org/wiki/MQTT">https://en.wikipedia.org/wiki/MQTT</a>
</li>

<li>Erlang<br />
<a href="http://www.erlang.org/">http://www.erlang.org/</a>
</li>

<li>pika 0.12.0 na PyPi<br />
<a href="https://pypi.org/project/pika/">https://pypi.org/project/pika/</a>
</li>

<li>Introduction to Pika<br />
<a href="https://pika.readthedocs.io/en/stable/">https://pika.readthedocs.io/en/stable/</a>
</li>

<li>Langohr: An idiomatic Clojure client for RabbitMQ that embraces the AMQP 0.9.1 model<br />
<a href="http://clojurerabbitmq.info/">http://clojurerabbitmq.info/</a>
</li>

<li>AMQP 0-9-1 Model Explained<br />
<a href="http://www.rabbitmq.com/tutorials/amqp-concepts.html">http://www.rabbitmq.com/tutorials/amqp-concepts.html</a>
</li>

<li>Part 1: RabbitMQ for beginners - What is RabbitMQ?<br />
<a href="https://www.cloudamqp.com/blog/2015-05-18-part1-rabbitmq-for-beginners-what-is-rabbitmq.html">https://www.cloudamqp.com/blog/2015-05-18-part1-rabbitmq-for-beginners-what-is-rabbitmq.html</a>
</li>

<li>Downloading and Installing RabbitMQ<br />
<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a>
</li>

<li>celery na PyPi<br />
<a href="https://pypi.org/project/celery/">https://pypi.org/project/celery/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python <br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python (dokončení)<br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/</a>
</li>

<li>Redis Queue (RQ)<br />
<a href="https://www.fullstackpython.com/redis-queue-rq.html">https://www.fullstackpython.com/redis-queue-rq.html</a>
</li>

<li>Python Celery &amp; RabbitMQ Tutorial<br />
<a href="https://tests4geeks.com/python-celery-rabbitmq-tutorial/">https://tests4geeks.com/python-celery-rabbitmq-tutorial/</a>
</li>

<li>Flower: Real-time Celery web-monitor<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/monitoring.html#flower-real-time-celery-web-monitor">http://docs.celeryproject.org/en/latest/userguide/monitoring.html#flower-real-time-celery-web-monitor</a>
</li>

<li>Asynchronous Tasks With Django and Celery<br />
<a href="https://realpython.com/asynchronous-tasks-with-django-and-celery/">https://realpython.com/asynchronous-tasks-with-django-and-celery/</a>
</li>

<li>First Steps with Celery<br />
<a href="http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html">http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html</a>
</li>

<li>node-celery<br />
<a href="https://github.com/mher/node-celery">https://github.com/mher/node-celery</a>
</li>

<li>Full Stack Python: web development<br />
<a href="https://www.fullstackpython.com/web-development.html">https://www.fullstackpython.com/web-development.html</a>
</li>

<li>Introducing RQ<br />
<a href="https://nvie.com/posts/introducing-rq/">https://nvie.com/posts/introducing-rq/</a>
</li>

<li>Asynchronous Tasks with Flask and Redis Queue<br />
<a href="https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue">https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Stránky projektu Redis<br />
<a href="https://redis.io/">https://redis.io/</a>
</li>

<li>Introduction to Redis<br />
<a href="https://redis.io/topics/introduction">https://redis.io/topics/introduction</a>
</li>

<li>Try Redis<br />
<a href="http://try.redis.io/">http://try.redis.io/</a>
</li>

<li>Redis tutorial, April 2010 (starší, ale pěkně udělaný)<br />
<a href="https://static.simonwillison.net/static/2010/redis-tutorial/">https://static.simonwillison.net/static/2010/redis-tutorial/</a>
</li>

<li>Python Redis<br />
<a href="https://redislabs.com/lp/python-redis/">https://redislabs.com/lp/python-redis/</a>
</li>

<li>Redis: key-value databáze v paměti i na disku<br />
<a href="https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/">https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/</a>
</li>

<li>Praktický úvod do Redis (1): vaše distribuovaná NoSQL cache<br />
<a href="http://www.cloudsvet.cz/?p=253">http://www.cloudsvet.cz/?p=253</a>
</li>

<li>Praktický úvod do Redis (2): transakce<br />
<a href="http://www.cloudsvet.cz/?p=256">http://www.cloudsvet.cz/?p=256</a>
</li>

<li>Praktický úvod do Redis (3): cluster<br />
<a href="http://www.cloudsvet.cz/?p=258">http://www.cloudsvet.cz/?p=258</a>
</li>

<li>Connection pool<br />
<a href="https://en.wikipedia.org/wiki/Connection_pool">https://en.wikipedia.org/wiki/Connection_pool</a>
</li>

<li>Instant Redis Sentinel Setup<br />
<a href="https://github.com/ServiceStack/redis-config">https://github.com/ServiceStack/redis-config</a>
</li>

<li>How to install REDIS in LInux<br />
<a href="https://linuxtechlab.com/how-install-redis-server-linux/">https://linuxtechlab.com/how-install-redis-server-linux/</a>
</li>

<li>Redis RDB Dump File Format<br />
<a href="https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format">https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format</a>
</li>

<li>Lempel–Ziv–Welch<br />
<a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch">https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch</a>
</li>

<li>Redis Persistence<br />
<a href="https://redis.io/topics/persistence">https://redis.io/topics/persistence</a>
</li>

<li>Redis persistence demystified<br />
<a href="http://oldblog.antirez.com/post/redis-persistence-demystified.html">http://oldblog.antirez.com/post/redis-persistence-demystified.html</a>
</li>

<li>Redis reliable queues with Lua scripting<br />
<a href="http://oldblog.antirez.com/post/250">http://oldblog.antirez.com/post/250</a>
</li>

<li>Ost (knihovna)<br />
<a href="https://github.com/soveran/ost">https://github.com/soveran/ost</a>
</li>

<li>NoSQL<br />
<a href="https://en.wikipedia.org/wiki/NoSQL">https://en.wikipedia.org/wiki/NoSQL</a>
</li>

<li>Shard (database architecture)<br />
<a href="https://en.wikipedia.org/wiki/Shard_%28database_architecture%29">https://en.wikipedia.org/wiki/Shard_%28database_architecture%29</a>
</li>

<li>What is sharding and why is it important?<br />
<a href="https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important">https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important</a>
</li>

<li>What Is Sharding?<br />
<a href="https://btcmanager.com/what-sharding/">https://btcmanager.com/what-sharding/</a>
</li>

<li>Redis clients<br />
<a href="https://redis.io/clients">https://redis.io/clients</a>
</li>

<li>Category:Lua-scriptable software<br />
<a href="https://en.wikipedia.org/wiki/Category:Lua-scriptable_software">https://en.wikipedia.org/wiki/Category:Lua-scriptable_software</a>
</li>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Redis memory usage<br />
<a href="http://nosql.mypopescu.com/post/1010844204/redis-memory-usage">http://nosql.mypopescu.com/post/1010844204/redis-memory-usage</a>
</li>

<li>Ukázka konfigurace Redisu pro lokální testování<br />
<a href="https://github.com/tisnik/presentations/blob/master/redis/redis.conf">https://github.com/tisnik/presentations/blob/master/redis/redis.conf</a>
</li>

<li>Resque<br />
<a href="https://github.com/resque/resque">https://github.com/resque/resque</a>
</li>

<li>Nested transaction<br />
<a href="https://en.wikipedia.org/wiki/Nested_transaction">https://en.wikipedia.org/wiki/Nested_transaction</a>
</li>

<li>Publish–subscribe pattern<br />
<a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern</a>
</li>

<li>Messaging pattern<br />
<a href="https://en.wikipedia.org/wiki/Messaging_pattern">https://en.wikipedia.org/wiki/Messaging_pattern</a>
</li>

<li>Using pipelining to speedup Redis queries<br />
<a href="https://redis.io/topics/pipelining">https://redis.io/topics/pipelining</a>
</li>

<li>Pub/Sub<br />
<a href="https://redis.io/topics/pubsub">https://redis.io/topics/pubsub</a>
</li>

<li>ZeroMQ distributed messaging<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>ZeroMQ: Modern &amp; Fast Networking Stack<br />
<a href="https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/">https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/</a>
</li>

<li>Publish/Subscribe paradigm: Why must message classes not know about their subscribers?<br />
<a href="https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr">https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr</a>
</li>

<li>Python &amp; Redis PUB/SUB<br />
<a href="https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7">https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7</a>
</li>

<li>Message broker<br />
<a href="https://en.wikipedia.org/wiki/Message_broker">https://en.wikipedia.org/wiki/Message_broker</a>
</li>

<li>RESP Arrays<br />
<a href="https://redis.io/topics/protocol#array-reply">https://redis.io/topics/protocol#array-reply</a>
</li>

<li>Redis Protocol specification<br />
<a href="https://redis.io/topics/protocol">https://redis.io/topics/protocol</a>
</li>

<li>Redis Pub/Sub: Intro Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-intro/">https://www.redisgreen.net/blog/pubsub-intro/</a>
</li>

<li>Redis Pub/Sub: Howto Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-howto/">https://www.redisgreen.net/blog/pubsub-howto/</a>
</li>

<li>Comparing Publish-Subscribe Messaging and Message Queuing<br />
<a href="https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message">https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message</a>
</li>

<li>Apache Kafka<br />
<a href="https://kafka.apache.org/">https://kafka.apache.org/</a>
</li>

<li>Iron<br />
<a href="http://www.iron.io/mq">http://www.iron.io/mq</a>
</li>

<li>kue (založeno na Redisu, určeno pro node.js)<br />
<a href="https://github.com/Automattic/kue">https://github.com/Automattic/kue</a>
</li>

<li>Cloud Pub/Sub<br />
<a href="https://cloud.google.com/pubsub/">https://cloud.google.com/pubsub/</a>
</li>

<li>Introduction to Redis Streams<br />
<a href="https://redis.io/topics/streams-intro">https://redis.io/topics/streams-intro</a>
</li>

<li>glob (programming)<br />
<a href="https://en.wikipedia.org/wiki/Glob_(programming)">https://en.wikipedia.org/wiki/Glob_(programming)</a>
</li>

<li>Why and how Pricing Assistant migrated from Celery to RQ - Paris.py<br />
<a href="https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2">https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2</a>
</li>

<li>Enqueueing internals<br />
<a href="http://python-rq.org/contrib/">http://python-rq.org/contrib/</a>
</li>

<li>queue — A synchronized queue class<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Queue – A thread-safe FIFO implementation<br />
<a href="https://pymotw.com/2/Queue/">https://pymotw.com/2/Queue/</a>
</li>

<li>Queues<br />
<a href="http://queues.io/">http://queues.io/</a>
</li>

<li>Windows Subsystem for Linux Documentation<br />
<a href="https://docs.microsoft.com/en-us/windows/wsl/about">https://docs.microsoft.com/en-us/windows/wsl/about</a>
</li>

<li>RestMQ<br />
<a href="http://restmq.com/">http://restmq.com/</a>
</li>

<li>ActiveMQ<br />
<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>
</li>

<li>Amazon MQ<br />
<a href="https://aws.amazon.com/amazon-mq/">https://aws.amazon.com/amazon-mq/</a>
</li>

<li>Amazon Simple Queue Service<br />
<a href="https://aws.amazon.com/sqs/">https://aws.amazon.com/sqs/</a>
</li>

<li>Celery: Distributed Task Queue<br />
<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a>
</li>

<li>Disque, an in-memory, distributed job queue<br />
<a href="https://github.com/antirez/disque">https://github.com/antirez/disque</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Projekt RQ na PyPi<br />
<a href="https://pypi.org/project/rq/">https://pypi.org/project/rq/</a>
</li>

<li>rq-dashboard 0.3.12<br />
<a href="https://pypi.org/project/rq-dashboard/">https://pypi.org/project/rq-dashboard/</a>
</li>

<li>Job queue<br />
<a href="https://en.wikipedia.org/wiki/Job_queue">https://en.wikipedia.org/wiki/Job_queue</a>
</li>

<li>Why we moved from Celery to RQ<br />
<a href="https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq">https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq</a>
</li>

<li>Running multiple workers using Celery<br />
<a href="https://serverfault.com/questions/655387/running-multiple-workers-using-celery">https://serverfault.com/questions/655387/running-multiple-workers-using-celery</a>
</li>

<li>celery — Distributed processing<br />
<a href="http://docs.celeryproject.org/en/latest/reference/celery.html">http://docs.celeryproject.org/en/latest/reference/celery.html</a>
</li>

<li>Chains<br />
<a href="https://celery.readthedocs.io/en/latest/userguide/canvas.html#chains">https://celery.readthedocs.io/en/latest/userguide/canvas.html#chains</a>
</li>

<li>Routing<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/routing.html#automatic-routing">http://docs.celeryproject.org/en/latest/userguide/routing.html#automatic-routing</a>
</li>

<li>Celery Distributed Task Queue in Go<br />
<a href="https://github.com/gocelery/gocelery/">https://github.com/gocelery/gocelery/</a>
</li>

<li>Python Decorators<br />
<a href="https://wiki.python.org/moin/PythonDecorators">https://wiki.python.org/moin/PythonDecorators</a>
</li>

<li>Periodic Tasks<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html">http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html</a>
</li>

<li>celery.schedules<br />
<a href="http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab">http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab</a>
</li>

<li>Pros and cons to use Celery vs. RQ<br />
<a href="https://stackoverflow.com/questions/13440875/pros-and-cons-to-use-celery-vs-rq">https://stackoverflow.com/questions/13440875/pros-and-cons-to-use-celery-vs-rq</a>
</li>

<li>Priority queue<br />
<a href="https://en.wikipedia.org/wiki/Priority_queue">https://en.wikipedia.org/wiki/Priority_queue</a>
</li>

<li>Jupyter<br />
<a href="https://jupyter.org/">https://jupyter.org/</a>
</li>

<li>Context Managers<br />
<a href="http://book.pythontips.com/en/latest/context_managers.html">http://book.pythontips.com/en/latest/context_managers.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

