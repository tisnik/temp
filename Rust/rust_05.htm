<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Rust: metody a traity</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Rust: metody a traity</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V páté části seriálu o programovacím jazyce Rust se nejprve budeme zabývat způsobem deklarace funkcí a metod pro zvolenou datovou strukturu a posléze pak použitím takzvaných traitů (rysů).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Rust: metody a traity</a></p>
<p><a href="#k02">2. Implementace jedné metody pro zvolenou strukturu</a></p>
<p><a href="#k03">3. Způsoby implementace většího množství metod pro zvolenou strukturu</a></p>
<p><a href="#k04">4. Metoda vracející novou strukturu</a></p>
<p><a href="#k05">5. Metody s&nbsp;více parametry</a></p>
<p><a href="#k06">6. Funkce deklarovaná v&nbsp;kontextu vybrané struktury</a></p>
<p><a href="#k07">7. Konstruktory</a></p>
<p><a href="#k08">8. Traity</a></p>
<p><a href="#k09">9. Implementace traitu pro strukturu představující komplexní číslo</a></p>
<p><a href="#k10">10. Implementace většího množství traitů</a></p>
<p><a href="#k11">11. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Rust: metody a traity</h2>

<p><a
href="https://www.root.cz/clanky/rust-struktury-n-tice-a-vlastnictvi-objektu/">Ve
čtvrté části</a> <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">seriálu o
programovacím jazyce Rust</a> jsme si popsali dvě důležité a často používané
datové struktury. Jednalo se o n-tice (<i>tuple</i>) a taktéž o struktury
(<i>struct</i>). Následně jsme se zmínili o problematice vlastnictví objektů a
o sémantikách &bdquo;move&ldquo; a &bdquo;copy&ldquo;. Dnes na obě tato témata
navážeme, protože si ukážeme, jak lze pro zvolenou strukturu deklarovat funkce
a metody, samozřejmě včetně konstruktorů (resp.&nbsp;přesněji řečeno funkcí,
které se jako konstruktory mohou chovat). Ve druhé části článku si popíšeme
základní vlastnosti takzvaných <i>traitů</i> a způsob jejich použití pro
&bdquo;vynucení&ldquo; implementace funkcí a metod pro zvolenou strukturu
(použití traitů však bude prozatím pouze omezené, protože nedokážeme pracovat
s&nbsp;generickými datovými typy).</p>

<p>Všechny dále ukázané demonstrační příklady budou používat strukturu,
s&nbsp;níž jsme se již seznámili minule. Jedná se o prozatím velmi jednoduchou
a jednoúčelovou strukturu představující komplexní čísla:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
</pre>

<p>Ze sémantického hlediska se jedná o plnohodnotnou datovou strukturu, takže
je možné deklarovat funkce, které budou akceptovat parametry tohoto datového
typu popř.&nbsp;reference na týž typ:</p>

<pre>
fn <strong>print_complex</strong>(c:&amp;Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn <strong>abs</strong>(c:&amp;Complex) -&gt; f32 {
    (c.real * c.real + c.imag * c.imag).sqrt()
}
</pre>

<p>Taktéž je možné vytvářet a vracet hodnoty nového datového typu:</p>

<pre>
fn <strong>new_complex</strong>(real: f32, imag: f32) -&gt; Complex {
    Complex{real:real, imag:imag}
}
</pre>

<p>Způsob použití výše deklarovaných funkcí:</p>

<pre>
fn main() {
    let c1 = new_complex(3.0, 4.0);
    print_complex(&amp;c1);
    println!("absolute value: {}", abs(&amp;c1));
}
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Implementace jedné metody pro zvolenou strukturu</h2>

<p>Způsob zápisu volání funkcí, které jako svůj první či dokonce jediný
argument akceptují strukturu představující komplexní číslo, není příliš
čitelný, především pro programátory navyklé na používání objektů a tříd
v&nbsp;jazycích typu C++, Java či Python. Ovšem i v&nbsp;programovacím jazyce
Rust je možné vytvářet metody. Ty nejsou vázány na konkrétní třídu (tento pojem
se ostatně v&nbsp;Rustu už nepoužívá, i když se ve starších verzích třídy na
chvíli objevily), ale mohou být vázány ke struktuře. Metody jsou deklarovány
uvnitř bloku <strong>impl</strong> a jejich prvním argumentem je &amp;self,
tedy reference na konkrétní strukturu, s&nbsp;níž metoda pracuje. Podívejme se
na jednoduchý příklad. Výše uvedenou funkci <strong>abs()</strong> převedeme na
metodu se stejným jménem.</p>

<p>Původní tvar funkce:</p>

<pre>
fn abs(c:&amp;Complex) -&gt; f32 {
    (c.real * c.real + c.imag * c.imag).sqrt()
}
</pre>

<p>Metoda platná pro komplexní čísla umístěná v&nbsp;bloku
<strong>impl</strong>:</p>

<pre>
<strong>impl</strong> Complex {
    fn abs(<strong>&amp;self</strong>) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
}
</pre>

<p>Vidíme, že uvnitř metody můžeme přistupovat ke složkám struktury přes
operátor tečky, tedy nezávisle na tom, že se metodě předala reference.</p>

<p>Volání funkce a metody se syntakticky liší. Předpokládejme, že
v&nbsp;proměnné <strong>c1</strong> je uloženo komplexní číslo. Volání funkce
je provedeno na prvním řádku, volání metody na řádku druhém:</p>

<pre>
println!("absolute value: {}", abs(&amp;c1));
println!("absolute value: {}", c1.abs());
</pre>

<p>Povšimněte si, že se při volání metody před názvem proměnné nepoužívá znak
&amp;, který slouží pro získání reference.</p>

<p>Následuje úplný tvar příkladu, v&nbsp;němž je deklarována a následně použita
metoda <strong>abs</strong> platná pro komplexní čísla:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:&amp;Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
impl Complex {
    fn abs(&amp;self) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
}
&nbsp;
fn main() {
    let c1 = Complex{real:3.0, imag:4.0};
    print_complex(&amp;c1);
    println!("absolute value: {}", c1.abs());
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Způsoby implementace většího množství metod pro zvolenou strukturu</h2>

<p>V&nbsp;případě, že pro jednu strukturu, tedy pro nový datový typ,
potřebujeme deklarovat větší množství metod (což je zajisté v&nbsp;praxi velmi
častý požadavek), lze postupovat dvěma způsoby. Každou metodu je možné uložit
do vlastního bloku <strong>impl</strong>, takže výsledek může vypadat
následovně:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
<strong>impl</strong> Complex {
    fn abs(&amp;self) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
}
&nbsp;
<strong>impl</strong> Complex {
    fn print(&amp;self) {
        println!("complex number: {}+{}i", self.real, self.imag);
    }
}
&nbsp;
fn main() {
    let c1 = Complex{real:3.0, imag:4.0};
    c1.print();
    println!("absolute value: {}", c1.abs());
}
</pre>

<p>Většinou je však čitelnější všechny metody uvést v&nbsp;jediném bloku
<strong>impl</strong>, což vede k&nbsp;následujícímu zápisu programu:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
<strong>impl</strong> Complex {
    fn abs(&amp;self) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
&nbsp;
    fn print(&amp;self) {
        println!("complex number: {}+{}i", self.real, self.imag);
    }
}
&nbsp;
fn main() {
    let c1 = Complex{real:3.0, imag:4.0};
    c1.print();
    println!("absolute value: {}", c1.abs());
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Metoda vracející novou strukturu</h2>

<p>Velmi často se setkáme s&nbsp;požadavkem, aby metoda vrátila novou
strukturu. Příkladem může být metoda nazvaná <strong>sqr</strong>, která vrátí
nové komplexní číslo, konkrétně druhou mocninu svého argumentu. Připomeňme si,
že vytvoření nového komplexního čísla vypadá takto:</p>

<pre>
Complex{real: výraz_typu_f32, imag: výraz_typu_f32}
</pre>

<p>Metoda <strong>sqr</strong> tedy vrací hodnotu typu <strong>Complex</strong>
(jméno za šipkou) a uvnitř jejího těla je jediný výraz, jehož hodnota je po
vyčíslení vrácena:</p>

<pre>
fn sqr(&amp;self) -&gt; Complex {
    Complex{real: self.real * self.real - self.imag * self.imag,
            imag: 2.0*self.real * self.imag}
}
</pre>

<p>Alternativě (a zbytečně zdlouhavě) lze samozřejmě použít příkaz
<strong>return</strong>:</p>

<pre>
fn sqr(&amp;self) -&gt; Complex {
    <strong>return</strong> Complex{real: self.real * self.real - self.imag * self.imag,
                  imag: 2.0*self.real * self.imag};
}
</pre>

<p>Použití metody <strong>Complex.sqr()</strong> je jednoduché:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
impl Complex {
    fn abs(&amp;self) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
&nbsp;
    fn sqr(&amp;self) -&gt; Complex {
        Complex{real: self.real * self.real - self.imag * self.imag,
                imag: 2.0*self.real * self.imag}
    }
&nbsp;
    fn print(&amp;self) {
        println!("complex number: {}+{}i", self.real, self.imag);
    }
}
&nbsp;
fn main() {
    let c1 = Complex{real:1.0, imag:0.0};
    let c2 = Complex{real:0.0, imag:2.0};
    let c3 = Complex{real:2.0, imag:2.0};
    let c4 = <strong>c1.sqr()</strong>;
    let c5 = <strong>c2.sqr()</strong>;
    let c6 = <strong>c3.sqr()</strong>;
    c1.print();
    c2.print();
    c3.print();
    c4.print();
    c5.print();
    c6.print();
}
</pre>

<p>Volání metod je možné v&nbsp;případě potřeby &bdquo;zřetězit&ldquo; bez
explicitního uložení mezivýsledků do proměnných (ostatně právě zde je patrné,
že volání metod může být přehlednější, než vnořené volání funkcí):</p>

<pre>
fn main() {
    let c1 = Complex{real:1.0, imag:0.001};
    let c2 = <strong>c1.sqr().sqr().sqr().sqr()</strong>;
    c1.print();
    c2.print();
}
</pre>

<p>Otázka: jak a kdy jsou mezivýsledky odstraněny z&nbsp;operační paměti?</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Metody s&nbsp;více parametry</h2>

<p>Pro úplnost si ukažme, jak by se implementovala metoda, která kromě
parametru <strong>&amp;self</strong> akceptuje i další parametry. Příkladem
může být metoda nazvaná <strong>add</strong>, která jako svůj výsledek vrátí
součet dvou komplexních čísel. Není to nic těžkého. Povšimněte si, že u druhého
parametru explicitně zapisujeme jeho typ a samozřejmě jsme nuceni specifikovat
i typ výsledku:</p>

<pre>
fn add(&amp;self, c:&amp;Complex) -&gt; Complex {
    Complex{real: self.real + c.real, imag: self.imag + c.imag}
}
</pre>

<p>Poznámka: povšimněte si, jak nás programovací jazyk Rust nenápadně vede
k&nbsp;používání neměnných (<i>immutable</i>) struktur a funkcionálního stylu
programování. Metoda <strong>add</strong> je vlastně zapsána funkcionálním
stylem: ani jeden ze vstupních parametrů není měněn a toto chování je zaručeno
již hlavičkou metody (vůbec nemusíme zkoumat její tělo), i implicitní
<strong>return</strong> na konci těla metody je známé z&nbsp;mnoha FP
jazyků.</p>

<p>Následuje úplný tvar příkladu, v&nbsp;němž je deklarována a následně použita
metoda <strong>add</strong> platná pro komplexní čísla:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
impl Complex {
    fn abs(&amp;self) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
&nbsp;
    fn sqr(&amp;self) -&gt; Complex {
        Complex{real: self.real * self.real - self.imag * self.imag,
                imag: 2.0*self.real * self.imag}
    }
&nbsp;
    fn add(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real + c.real, imag: self.imag + c.imag}
    }
&nbsp;
    fn mul(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real * c.real - self.imag * c.imag, imag: self.real * c.imag + self.imag * c.real}
    }
&nbsp;
    fn print(&amp;self) {
        println!("complex number: {}+{}i", self.real, self.imag);
    }
}
&nbsp;
fn main() {
    let c1 = Complex{real:1.0, imag:2.0};
    let c2 = Complex{real:3.0, imag:4.0};
    let c3 = <strong>c1.add(&amp;c2)</strong>;
    let c4 = <strong>c1.mul(&amp;c1)</strong>;
    c1.print();
    c2.print();
    c3.print();
    c4.print();
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Funkce deklarovaná v&nbsp;kontextu vybrané struktury</h2>

<p>Do bloku <strong>impl</strong> se nemusí vkládat pouze deklarace metod.
Mohou se zde nacházet i běžné funkce. Příkladem mohou být funkce (vlastně
primitivní konstruktory) nazvané <strong>zero</strong> a <strong>one</strong>.
Tyto funkce neakceptují žádné parametry, tedy ani &amp;self, čímž se odlišují
od metod:</p>

<pre>
impl Complex {
    fn zero() -&gt; Complex {
        Complex{real:0.0, imag:0.0}
    }
&nbsp;
    fn one() -&gt; Complex {
        Complex{real:1.0, imag:0.0}
    }
}
</pre>

<p>Poznámka: samozřejmě je možné, aby takto deklarované funkce akceptovaly
nějaký parametr. Příklad bude ukázán v&nbsp;následující kapitole.</p>

<p>Volání takto deklarovaných funkcí je provedeno následovně, s&nbsp;použitím
rozlišovacího operátoru &bdquo;čtyřtečka&ldquo;:</p>

<pre>
let c1 = <strong>Complex::zero()</strong>;
let c2 = <strong>Complex::one()</strong>;
</pre>

<p>Opět se podívejme na rozsáhlejší demonstrační příklad, do něhož postupně
vkládáme nové a nové funkce a metody:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
impl Complex {
    fn zero() -&gt; Complex {
        Complex{real:0.0, imag:0.0}
    }
&nbsp;
    fn one() -&gt; Complex {
        Complex{real:1.0, imag:0.0}
    }
&nbsp;
    fn abs(&amp;self) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
&nbsp;
    fn sqr(&amp;self) -&gt; Complex {
        Complex{real: self.real * self.real - self.imag * self.imag,
                imag: 2.0*self.real * self.imag}
    }
&nbsp;
    fn add(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real + c.real, imag: self.imag + c.imag}
    }
&nbsp;
    fn mul(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real * c.real - self.imag * c.imag, imag: self.real * c.imag + self.imag * c.real}
    }
&nbsp;
    fn print(&amp;self) {
        println!("complex number: {}+{}i", self.real, self.imag);
    }
}
&nbsp;
fn main() {
    let c1 = Complex::zero();
    let c2 = Complex::one();
    let c3 = c1.add(&amp;c2);
    let c4 = c2.mul(&amp;c2);
    c1.print();
    c2.print();
    c3.print();
    c4.print();
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Konstruktory</h2>

<p>Konstrukce nového komplexního čísla zápisem Complex{real:real, imag:imag} je
sice jednoznačná, ale přece jen možná poněkud neobvyklá. Proto se
v&nbsp;některých zdrojových kódech setkáme s&nbsp;deklarací konstruktoru, což
je vlastně funkce umístěná do bloku <strong>impl</strong>, která akceptuje
obecně libovolné parametry a vrací strukturu zvoleného typu. Taková funkce je
většinou pojmenována <strong>new</strong> a v&nbsp;našem příkladu
s&nbsp;komplexními čísly může její deklarace vypadat například takto:</p>

<pre>
impl Complex {
    fn new(real: f32, imag: f32) -&gt; Complex {
        Complex{real:real, imag:imag}
    }
}
</pre>

<p>Volání konstruktoru pro komplexní čísla se vlastně nijak neliší od volání
již dříve deklarovaných funkcí <strong>zero</strong> a
<strong>one</strong>:</p>

<pre>
let c1 = Complex::new(1.0, 2.0);
let c2 = Complex::new(3.0, 4.0);
</pre>

<p>Poznámka: programovací jazyk Rust nepodporuje přetěžování funkcí ani metod,
takže není možné deklarovat dvě stejně pojmenované funkce <strong>new</strong>
s&nbsp;rozdílným typem a/nebo počtem parametrů. Toto chování je sice možné
obejít implementací několika traitů, nebývá to však obvyklé. Proto se někdy
setkáme s&nbsp;větším množstvím konstruktorů pojmenovaných například
<strong>new_t1</strong>, <strong>new_t2</strong> atd. Důvodem pro nezařazení
přetěžování metod jsou problémy související s&nbsp;typovou inferencí (příklady
si pravděpodobně ukážeme příště).</p>

<p>Podívejme se nyní, jak byl konstruktor zařazen do našeho demonstračního
příkladu:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
impl Complex {
    fn new(real: f32, imag: f32) -&gt; Complex {
        Complex{real:real, imag:imag}
    }
&nbsp;
    fn zero() -&gt; Complex {
        Complex{real:0.0, imag:0.0}
    }
&nbsp;
    fn one() -&gt; Complex {
        Complex{real:1.0, imag:0.0}
    }
&nbsp;
    fn abs(&amp;self) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
&nbsp;
    fn sqr(&amp;self) -&gt; Complex {
        Complex{real: self.real * self.real - self.imag * self.imag,
                imag: 2.0*self.real * self.imag}
    }
&nbsp;
    fn add(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real + c.real, imag: self.imag + c.imag}
    }
&nbsp;
    fn mul(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real * c.real - self.imag * c.imag, imag: self.real * c.imag + self.imag * c.real}
    }
&nbsp;
    fn print(&amp;self) {
        println!("complex number: {}+{}i", self.real, self.imag);
    }
}
&nbsp;
fn main() {
    let c1 = Complex::new(1.0, 2.0);
    let c2 = Complex::new(3.0, 4.0);
    let c3 = c1.add(&amp;c2);
    let c4 = c1.mul(&amp;c1);
    c1.print();
    c2.print();
    c3.print();
    c4.print();
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Traity</h2>

<p>S&nbsp;termínem <i>trait</i> jsme se již setkali v&nbsp;předchozím článku,
v&nbsp;němž jsme si mj.&nbsp;uvedli, že <i>trait</i> můžeme pokládat za
rozšířené rozhraní, které kromě hlaviček funkcí a metod obsahuje
(resp.&nbsp;může obsahovat) i jejich těla, ale už nikoli stavové informace. Je
to vlastně podobné rozhraním (<i>interface</i>) v&nbsp;Javě 8, které ovšem
nemají všechny vlastnosti traitů. To, že má nějaký typ či objekt určitý rys
(trait) tedy není zajištěno přímým děděním, což vlastně poměrně dobře odpovídá
objektovému systému programovacího jazyka Rust, který není primárně založen na
třídách a dědičnosti, ale na strukturách a traitech.</p>

<p>Deklarace traitu s&nbsp;jedinou metodou (přesněji řečeno jen
s&nbsp;hlavičkou metody) vypadá následovně. U metody musíme znát její jméno,
parametry (popř.&nbsp;jejich typy) a návratový typ. V&nbsp;následujícím
příkladu není návratový typ uveden:</p>

<pre>
trait Print {
    fn print(&amp;self);
}
</pre>

<p>Alternativně lze návratový typ uvést explicitně:</p>

<pre>
trait Print -&gt; () {
    fn print(&amp;self);
}
</pre>

<p>Trait samozřejmě může předepisovat větší množství metod či funkcí:</p>

<pre>
trait ComplexConstructors {
    fn new(real: f32, imag: f32) -&gt; Complex;
    fn zero() -&gt; Complex;
    fn one() -&gt; Complex;
}
</pre>

<p>Poznámka: povšimněte si, že zde neexistuje žádné podstatné rozlišení mezi
funkcí a metodou. Odlišné je až volání funkce či metody.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Implementace traitu pro strukturu představující komplexní číslo</h2>

<p>Trait, podobně jako rozhraní, můžeme implementovat. Následující blok
<strong>impl</strong> obsahuje implementaci traitu <strong>Print</strong>,
který byl uveden v&nbsp;předchozí kapitole:</p>

<pre>
<strong>impl</strong> Print <strong>for</strong> Complex {
    fn print(&amp;self) {
        println!("complex number: {}+{}i", self.real, self.imag);
    }
}
</pre>

<p>Poznámka: povšimněte si, že klíčové slovo <strong>for</strong> má
v&nbsp;Rustu více významů.</p>

<p>V&nbsp;následujícím příkladu je definován trait <strong>Print</strong>,
následně je implementován a po této implementaci následuje implementace dalších
metod (už v&nbsp;jiném bloku):</p>

<pre>
trait Print {
    fn print(&amp;self);
}
&nbsp;
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
impl Print for Complex {
    fn print(&amp;self) {
        println!("complex number: {}+{}i", self.real, self.imag);
    }
}
&nbsp;
impl Complex {
    fn new(real: f32, imag: f32) -&gt; Complex {
        Complex{real:real, imag:imag}
    }
&nbsp;
    fn zero() -&gt; Complex {
        Complex{real:0.0, imag:0.0}
    }
&nbsp;
    fn one() -&gt; Complex {
        Complex{real:1.0, imag:0.0}
    }
&nbsp;
    fn abs(&amp;self) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
&nbsp;
    fn sqr(&amp;self) -&gt; Complex {
        Complex{real: self.real * self.real - self.imag * self.imag,
                imag: 2.0*self.real * self.imag}
    }
&nbsp;
    fn add(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real + c.real, imag: self.imag + c.imag}
    }
&nbsp;
    fn mul(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real * c.real - self.imag * c.imag, imag: self.real * c.imag + self.imag * c.real}
    }
}
&nbsp;
fn main() {
    let c1 = Complex::new(1.0, 2.0);
    let c2 = Complex::new(3.0, 4.0);
    let c3 = c1.add(&amp;c2);
    let c4 = c1.mul(&amp;c1);
    c1.print();
    c2.print();
    c3.print();
    c4.print();
}
</pre>

<p>Podívejme se, co se stane, když &bdquo;zapomeneme&ldquo; implementovat
metodu či funkci předepsanou traitem:</p>

<pre>
trait Print {
    fn print(&amp;self);
}
&nbsp;
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
impl Print for Complex {
}
&nbsp;
impl Complex {
    fn new(real: f32, imag: f32) -&gt; Complex {
        Complex{real:real, imag:imag}
    }
&nbsp;
    fn zero() -&gt; Complex {
        Complex{real:0.0, imag:0.0}
    }
&nbsp;
    fn one() -&gt; Complex {
        Complex{real:1.0, imag:0.0}
    }
&nbsp;
    fn abs(&amp;self) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
&nbsp;
    fn sqr(&amp;self) -&gt; Complex {
        Complex{real: self.real * self.real - self.imag * self.imag,
                imag: 2.0*self.real * self.imag}
    }
&nbsp;
    fn add(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real + c.real, imag: self.imag + c.imag}
    }
&nbsp;
    fn mul(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real * c.real - self.imag * c.imag, imag: self.real * c.imag + self.imag * c.real}
    }
}
&nbsp;
fn main() {
    let c1 = Complex::new(1.0, 2.0);
    let c2 = Complex::new(3.0, 4.0);
    let c3 = c1.add(&amp;c2);
    let c4 = c1.mul(&amp;c1);
    c1.print();
    c2.print();
    c3.print();
    c4.print();
}
</pre>

<p>Překladač implementaci poměrně striktně vyžaduje:</p>

<pre>
error[E0046]: not all trait items implemented, missing: `print`
  --&gt; test.rs:10:1
   |
10 | impl Print for Complex {
   | ^ missing `print` in implementation
&nbsp;
error: aborting due to previous error
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Implementace většího množství traitů</h2>

<p>Pro zvolenou datovou strukturu je možné implementovat libovolné množství
traitů. Prozatím neznáme použití generických datových typů, takže následující
příklad bude trošku umělý. Deklarujeme dva traity:</p>

<pre>
trait Print {
    fn print(&amp;self);
}
</pre>

<p>a</p>

<pre>
trait ComplexConstructors {
    fn new(real: f32, imag: f32) -&gt; Complex;
    fn zero() -&gt; Complex;
    fn one() -&gt; Complex;
}
</pre>

<p>Tyto traity lze velmi snadno implementovat pro typ
<strong>Complex</strong>:</p>

<pre>
trait Print {
    fn print(&amp;self);
}
&nbsp;
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
trait ComplexConstructors {
    fn new(real: f32, imag: f32) -&gt; Complex;
    fn zero() -&gt; Complex;
    fn one() -&gt; Complex;
}
&nbsp;
impl Print for Complex {
    fn print(&amp;self) {
        println!("complex number: {}+{}i", self.real, self.imag);
    }
}
&nbsp;
impl ComplexConstructors for Complex {
    fn new(real: f32, imag: f32) -&gt; Complex {
        Complex{real:real, imag:imag}
    }
&nbsp;
    fn zero() -&gt; Complex {
        Complex{real:0.0, imag:0.0}
    }
&nbsp;
    fn one() -&gt; Complex {
        Complex{real:1.0, imag:0.0}
    }
}
&nbsp;
impl Complex {
    fn abs(&amp;self) -&gt; f32 {
        (self.real * self.real + self.imag * self.imag).sqrt()
    }
&nbsp;
    fn sqr(&amp;self) -&gt; Complex {
        Complex{real: self.real * self.real - self.imag * self.imag,
                imag: 2.0*self.real * self.imag}
    }
&nbsp;
    fn add(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real + c.real, imag: self.imag + c.imag}
    }
&nbsp;
    fn mul(&amp;self, c:&amp;Complex) -&gt; Complex {
        Complex{real: self.real * c.real - self.imag * c.imag, imag: self.real * c.imag + self.imag * c.real}
    }
}
&nbsp;
fn main() {
    let c1 = Complex::new(1.0, 2.0);
    let c2 = Complex::new(3.0, 4.0);
    let c3 = c1.add(&amp;c2);
    let c4 = c1.mul(&amp;c1);
    c1.print();
    c2.print();
    c3.print();
    c4.print();
}
</pre>

<p>Velký význam traitů v&nbsp;reálných aplikacích (celá standardní knihovna je
na traitech postavena) doceníme až při použití generických datových typů, což
bude poměrně obsáhlé téma, kterému se budeme věnovat příště.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes ukázané demonstrační příklady, resp.&nbsp;přesněji řečeno
jejich bezchybné varianty, byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již objemný) repositář:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>69_methods_0.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/69_methods_0.rs">https://github.com/tisnik/presentations/blob/master/rust/69_methods_0.rs</a></td></tr>
<tr><td>70_one_method.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/70_one_method.rs">https://github.com/tisnik/presentations/blob/master/rust/70_one_method.rs</a></td></tr>
<tr><td>71_two_methods.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/71_two_methods.rs">https://github.com/tisnik/presentations/blob/master/rust/71_two_methods.rs</a></td></tr>
<tr><td>72_two_methods.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/72_two_methods.rs">https://github.com/tisnik/presentations/blob/master/rust/72_two_methods.rs</a></td></tr>
<tr><td>73_methods_4.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/73_methods_4.rs">https://github.com/tisnik/presentations/blob/master/rust/73_methods_4.rs</a></td></tr>
<tr><td>74_methods_5.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/74_methods_5.rs">https://github.com/tisnik/presentations/blob/master/rust/74_methods_5.rs</a></td></tr>
<tr><td>75_struct_and_functions.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/75_struct_and_functions.rs">https://github.com/tisnik/presentations/blob/master/rust/75_struct_and_functions.rs</a></td></tr>
<tr><td>76_constructor.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/76_constructor.rs">https://github.com/tisnik/presentations/blob/master/rust/76_constructor.rs</a></td></tr>
<tr><td>77_trait.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/77_trait.rs">https://github.com/tisnik/presentations/blob/master/rust/77_trait.rs</a></td></tr>
<tr><td>78_traits.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/78_traits.rs">https://github.com/tisnik/presentations/blob/master/rust/78_traits.rs</a></td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Struct std::boxed::Box<br />
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">https://doc.rust-lang.org/std/boxed/struct.Box.html</a>
</li>

<li>Explore the ownership system in Rust<br />
<a href="https://nercury.github.io/rust/guide/2015/01/19/ownership.html">https://nercury.github.io/rust/guide/2015/01/19/ownership.html</a>
</li>

<li>Rust's ownership and move semantic<br/>
<a href="http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics">http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics</a>
</li>

<li>Trait std::marker::Copy<br/>
<a href="https://doc.rust-lang.org/stable/std/marker/trait.Copy.html">https://doc.rust-lang.org/stable/std/marker/trait.Copy.html</a>
</li>

<li>Trait std::clone::Clone<br />
<a href="https://doc.rust-lang.org/stable/std/clone/trait.Clone.html">https://doc.rust-lang.org/stable/std/clone/trait.Clone.html</a>
</li>

<li>The Stack and the Heap<br />
<a href="https://doc.rust-lang.org/book/the-stack-and-the-heap.html">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Why does this compile? Automatic dereferencing?<br />
<a href="https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183">https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183</a>
</li>

<li>Understanding Pointers, Ownership, and Lifetimes in Rust<br />
<a href="http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>

<li>Rust lang series episode #25 — pointers (#rust-series)<br />
<a href="https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series">https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>Destructuring and Pattern Matching<br />
<a href="https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/">https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Method Syntax<br />
<a href="https://doc.rust-lang.org/book/method-syntax.html">https://doc.rust-lang.org/book/method-syntax.html</a>
</li>

<li>Traits in Rust<br />
<a href="https://doc.rust-lang.org/book/traits.html">https://doc.rust-lang.org/book/traits.html</a>
</li>

<li>Functional Programming in Rust - Part 1 : Function Abstraction<br />
<a href="http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/">http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

