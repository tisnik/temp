<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Cargo: správce projektů a balíčků pro programovací jazyk Rust</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Cargo: správce projektů a balíčků pro programovací jazyk Rust</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Při vývoji aplikací v&nbsp;moderním programovacím jazyce Rust je možné ke správě projektů přistupovat různým způsobem. Někteří programátoři mohou dávat přednost použití vlastních skriptů určených pro překlad a spouštění projektů, další vývojáři mohou naopak použít například možnosti nabízené klasickým nástrojem make (soubory Makefile). V&nbsp;současnosti je ovšem, alespoň ve většině případů, mnohem lepší a současně i jednodušší využít služeb specializovaného a současně i velmi snadno použitelného správce projektů, který se jmenuje Cargo.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Cargo: správce projektů a balíčků pro programovací jazyk Rust</a></p>
<p><a href="#k02">2. Základní vlastnosti a možnosti nabízené nástrojem Cargo</a></p>
<p><a href="#k03">3. Vytvoření nového projektu</a></p>
<p><a href="#k04">4. Struktura adresáře s&nbsp;projektem</a></p>
<p><a href="#k05">5. Projektové soubory</a></p>
<p><a href="#k06">6. Překlad projektu a spuštění výsledného binárního souboru</a></p>
<p><a href="#k07">7. Spuštění jednotkových testů</a></p>
<p><a href="#k08">8. Příprava binárních souborů pro distribuci</a></p>
<p><a href="#k09">9. Vyčištění projektu &ndash; odstranění pracovních souborů</a></p>
<p><a href="#k10">10. Přidání knihovny používané projektem</a></p>
<p><a href="#k11">11. Vyhledání vhodné knihovny</a></p>
<p><a href="#k12">12. Stažení všech závislostí</a></p>
<p><a href="#k13">13. Spuštění projektu a lokální instalace projektu</a></p>
<p><a href="#k14">14. Repositář s&nbsp;demonstračními projekty</a></p>
<p><a href="#k15">15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Cargo: správce projektů a balíčků pro programovací jazyk Rust</h2>

<p>K&nbsp;poměrně velkému množství v&nbsp;současnosti používaných programovacích jazyků existují specializované nástroje určené pro správu projektů a/nebo pro instalaci balíčků evidovaných v&nbsp;nějakém centrálním repositáři. Připomeňme si například <i>Maven</i> pro Javu, <i>pip</i> pro Python, <i>RubyGems</i> pro programovací jazyk Ruby či <i>npm</i> pro JavaScriptové projekty. Podobný nástroj existuje i pro programovací jazyk Rust. Tento nástroj má velmi příhodné jméno <i>Cargo</i> a je možné ho použít pro tři hlavní oblasti: správu projektů (překlad, spuštění testů, spuštění benchmarků), instalaci závislých knihoven (balíčků) z&nbsp;centrálního repositáře a publikování vlastních balíčků do centrálního repositáře. V&nbsp;dnešním článku se zaměříme především na první dvě zmiňované oblasti, protože s&nbsp;nimi se programátor začínající pracovat v&nbsp;Rustu pravděpodobně setká nejčastěji.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní vlastnosti a možnosti nabízené nástrojem Cargo</h2>

<p>O některých vlastnostech nabízených nástrojem <i>Cargo</i> jsme se ve stručnosti zmínili již <a href="#k01">v&nbsp;předchozí kapitole</a>, zkusme si ovšem jeho základní vlastnosti postupně uvést v&nbsp;jednotlivých bodech:</p>

<ol>

<li>Vytvoření kostry nového projektu jediným příkazem.</li>

<li>Nový projekt může obsahovat i adresáře a soubory umožňující jeho snadnou správu a verzování s&nbsp;využitím SCM (současně je podporován Git a Mercurial).</li>

<li>Automatická kontrola, které soubory je zapotřebí přeložit (tj.&nbsp;které soubory byly pozměněny od posledního překladu).</li>

<li>Automatické stažení všech knihoven a jejich závislostí na základě konfigurace zapsané do souboru <strong>Cargo.toml</strong>.</li>

<li>Spuštění projektu s&nbsp;možností předání parametrů příkazového řádku.</li>

<li>Spuštění jednotkových testů, které mohou být vytvořeny společně s&nbsp;projektem.</li>

<li>Spuštění benchmarků, které mohou být vytvořeny společně s&nbsp;projektem.</li>

<li>Vyhledání knihovny v&nbsp;centrálním registru zaregistrovaných knihoven (či balíčků).</li>

<li>Publikování vlastního balíčku v&nbsp;centrálním registru (<i>crates.io</i>)</li>

</ol>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vytvoření nového projektu</h2>

<p>Pro vytvoření nového projektu stačí použít příkaz <strong>cargo new</strong>, kterému se předá jméno projektu (to je povinné). Pokud se má vytvořit projekt, jehož výsledkem bude spustitelná aplikace, je nutné navíc použít přepínač <strong>--bin</strong>. V&nbsp;opačném případě by se totiž vytvořil projekt s&nbsp;kostrou knihovny. Vytvořme si nyní jednoduchý projekt nazvaný &bdquo;project1&ldquo;, po jehož překladu získáme spustitelnou aplikaci (a nikoli knihovnu):</p>

<pre>
$ <strong>cargo new --bin project1</strong>
     Created binary (application) `project1` project
</pre>

<p>Po spuštění tohoto příkazu vytvoří nástroj <strong>cargo</strong> nový adresář pojmenovaný &bdquo;project1&ldquo;. V&nbsp;tomto adresáři nalezneme mj.&nbsp;i soubory a adresáře určené pro správce verzí <i>Git</i> (toto implicitní chování je však možné změnit):</p>

<pre>
$ <strong>cd project1</strong>

$ <strong>ls -la</strong>
total 28
drwxr-xr-x  4 tester tester 4096 lis 18 22:56 .
drwxr-xr-x 10 tester tester 4096 lis 19 16:02 ..
-rw-r--r--  1 tester tester   44 lis 18 22:55 Cargo.lock
-rw-r--r--  1 tester tester  114 lis 18 22:54 Cargo.toml
drwxr-xr-x  6 tester tester 4096 lis 19 16:02 .git
-rw-r--r--  1 tester tester    7 lis 18 22:54 .gitignore
drwxr-xr-x  2 tester tester 4096 lis 18 22:54 src
</pre>

<p>Pokud vám nevyhovuje, že se automaticky vytvořily soubory a adresáře určené pro <i>Git</i>, lze použít volbu <strong>--vcs none</strong>:</p>

<pre>
$ <strong>cd ..</strong>

$ <strong>cargo new --bin --vcs none project2</strong>
     Created binary (application) `project2` project
</pre>

<p>Struktura tohoto projektu vypadá nepatrně odlišně (vytvoří se vlastně jen dva soubory, přičemž zdrojový soubor je uložen v&nbsp;podadresáři <strong>src</strong>):</p>

<pre>
$ <strong>cd project2</strong>

$ <strong>ls -la</strong>
total 16
drwxr-xr-x  3 tester tester 4096 lis 19 16:11 .
drwxr-xr-x 11 tester tester 4096 lis 19 16:12 ..
-rw-r--r--  1 tester tester  114 lis 19 16:11 Cargo.toml
drwxr-xr-x  2 tester tester 4096 lis 19 16:11 src
</pre>

<p>Taktéž je možné specifikovat, že se při inicializaci projektu má vytvořit adresářová struktura kompatibilní s&nbsp;Mercurialem:</p>

<pre>
$ <strong>cd ..</strong>

$ <strong>cargo new --bin --vcs hg project3</strong>
     Created binary (application) `project3` project
</pre>

<pre>
$ <strong>cd project3</strong>

$ <strong>ls -la</strong>
total 24
drwxr-xr-x  4 tester tester 4096 lis 19 16:18 .
drwxr-xr-x 12 tester tester 4096 lis 19 16:18 ..
-rw-r--r--  1 tester tester  114 lis 19 16:18 Cargo.toml
drwxr-xr-x  3 tester tester 4096 lis 19 16:18 .hg
-rw-r--r--  1 tester tester    7 lis 19 16:18 .hgignore
drwxr-xr-x  2 tester tester 4096 lis 19 16:18 src
</pre>

<p>Poznámka: při vytváření projektů, které budou ukládány do Gitu či Mercurialu, je nutné mít tyto nástroje nainstalované, jinak vytváření projektů skončí s&nbsp;chybou. Pokud například nemáte nainstalovaný Mercurial, bude vytvoření projektu neúspěšné, ovšem samotný popis chyby může být poněkud kryptický:</p>

<pre>
$ <strong>cargo new --bin --vcs hg project4</strong>
error: Failed to create project `project4` at `/home/tester/temp/project4`

To learn more, run the command again with --verbose.

$ <strong>cargo new --bin --vcs hg project4 --verbose</strong>
error: Failed to create project `project4` at `/home/tester/temp/project4`

Caused by:
  Could not execute process `hg init /home/tester/temp/project4` (never executed)

Caused by:
  No such file or directory (os error 2)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Struktura adresáře s&nbsp;projektem</h2>

<p>Podívejme se, jak vlastně vypadá struktura adresáře, v&nbsp;němž je uložený celý projekt. Ihned po vytvoření projektu je struktura velmi jednoduchá a obsahuje pouze projektový soubor nazvaný <strong>Cargo.toml</strong> a kostru zdrojového kódu uloženou v&nbsp;souboru <strong>src/main.rs</strong>:</p>

<pre>
$ <strong>cd project1</strong>

$ <strong>tree</strong>
├── Cargo.toml
└── src
    └── main.rs

1 directory, 2 files
</pre>

<p>Ve skutečnosti jsme však tento projekt inicializovali takovým způsobem, že obsahuje i soubory a adresáře používané Gitem. Tyto soubory (.gitingore) a adresáře (.git) nejsou implicitně zobrazovány, protože začínají tečkou:</p>

<pre>
$ <strong>tree -a</strong>
.
├── Cargo.toml
├── .git
│   ├── config
│   ├── description
│   ├── HEAD
│   ├── hooks
│   │   ├── applypatch-msg.sample
│   │   ├── commit-msg.sample
│   │   ├── post-update.sample
│   │   ├── pre-applypatch.sample
│   │   ├── pre-commit.sample
│   │   ├── prepare-commit-msg.sample
│   │   ├── pre-push.sample
│   │   ├── pre-rebase.sample
│   │   └── update.sample
│   ├── info
│   │   └── exclude
│   ├── objects
│   │   ├── info
│   │   └── pack
│   └── refs
│       ├── heads
│       └── tags
├── .gitignore
└── src
    └── main.rs

10 directories, 17 files
</pre>

<p>Poznámka: v&nbsp;dalším textu budeme soubory používané Gitem popř.&nbsp;Mercurialem ignorovat, protože jejich existence či naopak neexistence nemá prakticky žádný vliv na další operace s&nbsp;projektem prováděné přes nástroj <i>Cargo</i>.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Projektové soubory</h2>

<p>Z&nbsp;hlediska nástroje <i>Cargo</i> je nejdůležitější projektový soubor nazvaný jednoduše <strong>Cargo.toml</strong>. Tento soubor je vytvořen automaticky při inicializaci projektu, ovšem předpokládá se, že ho bude programátor měnit v&nbsp;závislosti na potřebách konkrétního projektu. Originální podoba tohoto souboru pro projekt nazvaný &bdquo;project1&ldquo; vypadá následovně:</p>

<pre>
[package]
name = "project1"
version = "0.1.0"
authors = ["Pavel Tisnovsky &lt;ptisnovs@redhat.com&gt;"]

[dependencies]
</pre>

<p>Soubor <strong>Cargo.toml</strong> obsahuje metadata o projektu, z&nbsp;tohoto důvodu se mu také říká <i>Manifest</i>. Povšimněte si, že formát souboru vlastně odpovídá <a href="https://en.wikipedia.org/wiki/INI_file">INI souborům</a> známým z&nbsp;mnoha dalších aplikací (tyto soubory byly velmi často používány i ve starších verzích operačního systému Windows). Nástroj <i>Cargo</i> dokáže metadata zpracovat a v&nbsp;případě potřeby i vyexportovat do formátu JSON, a to následujícím příkazem:</p>

<pre>
$ <strong>cargo metadata</strong>

{"packages":[{"name":"project1","version":"0.1.0","id":"project1 0.1.0 (path+file:///home/tester/temp/project1)","source":null,"dependencies":[],"targets":[{"kind":["bin"],"name":"project1","src_path":"/home/tester/temp/project1/src/main.rs"}],"features":{},"manifest_path":"/home/tester/temp/project1/Cargo.toml"}],"resolve":{"root":"project1 0.1.0 (path+file:///home/tester/temp/project1)","nodes":[{"id":"project1 0.1.0 (path+file:///home/tester/temp/project1)","dependencies":[]}]},"version":1}
</pre>

<p>Výstup je určen pro zpracování dalšími nástroji, které dokážou pracovat s&nbsp;formátem JSON, ovšem pro lepší čitelnost lze použít on-line <a href="https://jsonformatter.curiousconcept.com/">pretty printer</a>:</p>

<pre>
{
    "packages":[
        {
            "name":"project1",
            "version":"0.1.0",
            "id":"project1 0.1.0 (path+file:///home/tester/temp/project1)",
            "source":null,
            "dependencies":[

            ],
            "targets":[
                {
                    "kind":[
                        "bin"
                    ],
                    "name":"project1",
                    "src_path":"/home/tester/temp/project1/src/main.rs"
                }
            ],
            "features":{

            },
            "manifest_path":"/home/tester/temp/project1/Cargo.toml"
        }
    ],
    "resolve":{
        "root":"project1 0.1.0 (path+file:///home/tester/temp/project1)",
        "nodes":[
            {
                "id":"project1 0.1.0 (path+file:///home/tester/temp/project1)",
                "dependencies":[

                ]
            }
        ]
    },
    "version":1
}
</pre>

<p>Po prvním překladu aplikace se kromě souboru <strong>Cargo.toml</strong> automaticky vytvoří i soubor <strong>Cargo.lock</strong>. Tento soubor se (většinou) neupravuje ručně, ale je spravován samotným <i>Cargem</i>, které si do tohoto souboru ukládá informace o knihovnách, na nichž projekt závisí apod. V&nbsp;našem jednoduchém projektu bude obsah souboru <strong>Cargo.lock</strong> minimalistický:</p>

<pre>
[root]
name = "project1"
version = "0.1.0"
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Překlad projektu a spuštění výsledného binárního souboru</h2>

<p>Překlad projektu se provede jednoduše příkazem <strong>cargo build</strong>. Pokud nejsou v&nbsp;projektu specifikovány žádné závislé knihovny (a to u našeho projektu nejsou), bude překlad na naprosté většině v&nbsp;současnosti používaných počítačů proveden prakticky okamžitě, což je ostatně patrné i z&nbsp;následujícího výpisu:</p>

<pre>
$ <strong>cd project1</strong>

$ <strong>cargo build</strong>
   Compiling project1 v0.1.0 (file:///home/tester/temp/project1)
    Finished debug [unoptimized + debuginfo] target(s) in 0.37 secs
</pre>

<p>V&nbsp;projektu se při překladu vytvoří nový adresář <strong>target</strong> s&nbsp;podadresářem <strong>debug</strong>. Právě do tohoto podadresáře se generují soubory při překladu a naleznete zde i výsledný spustitelný binární soubor:</p>

<pre>
$ <strong>tree</strong>
.
├── Cargo.lock
├── Cargo.toml
├── src
│   └── main.rs
└── target
    └── debug
        ├── build
        ├── deps
        ├── examples
        ├── native
        └── project1

7 directories, 4 files
</pre>

<p>Povšimněte si důležité vlastnosti &ndash; pokud nezměníte zdrojové soubory, bude další volání příkazu <strong>cargo build</strong> rychlejší, protože se vynechá fáze překladu. To se pozná jednoduše &ndash; nebude se vypisovat řádek začínající slovem &bdquo;Compile&ldquo;:</p>

<pre>
$ <strong>cargo build</strong>
    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
</pre>

<p>Nástroj <i>Cargo</i> tak prakticky okamžitě nabízí základní funkcionalitu, jako známý a dnes již klasický nástroj <i>make</i>, ovšem bez nutnosti psát soubory Makefile (ve skutečnosti nabízí <i>make</i> mnohem více možností, už jen díky schopnosti volat příkazy shellu, ovšem jeho základní funkce, tj.&nbsp;rozhodnutí, které soubory překládat, v&nbsp;<i>Cargo</i> implementovány jsou).</p>

<p>Spuštění výsledného nativního souboru je snadné:</p>

<pre>
$ <strong>cargo run</strong>
    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
     Running `target/debug/project1`
Hello, world!
</pre>

<p>Poznámka: ve skutečnosti můžete přímo spustit <strong>cargo run</strong> a neprovádět fázi překladu samostatně. <i>Cargo</i> sám zajistí, že se přeloží nová verze aplikace a teprve ta se následně spustí.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Spuštění jednotkových testů</h2>

<p>Nástroj <i>Cargo</i> podporuje i spouštění jednotkových testů. Příkaz pro spuštění této činnosti je snadno zapamatovatelný:</p>

<pre>
$ <strong>cargo test</strong>
   Compiling project1 v0.1.0 (file:///home/tester/temp/project1)
    Finished debug [unoptimized + debuginfo] target(s) in 0.43 secs
     Running target/debug/project1-b888664ab405e319

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
</pre>

<p>Vidíme, že se ve skutečnosti nespustil žádný test, a to z&nbsp;toho prostého důvodu, že v&nbsp;projektu žádné testy nemáme definovány. Vytvořme si tedy nový projekt a přidejme do něj (jen ukázkové) jednotkové testy:</p>

<pre>
$ <strong>cargo new --bin --vcs none project4</strong>

$ <strong>cd project4</strong>
$ <strong>mkdir tests</strong>
</pre>

<p>Následně vytvoříme zdrojový kód se dvěma testy:</p>

<pre>
$ <strong>cat &lt;&lt; END &gt; tests/test.rs</strong>
<strong>#[test]</strong>
<strong>fn ok_test() {</strong>
<strong>}</strong>

<strong>#[test]</strong>
<strong>fn failure() {</strong>
<strong>    assert!(false);</strong>
<strong>}</strong>
<strong>END</strong>
</pre>

<p>Nyní již bude spuštění testů maličkost:</p>

<pre>
$ <strong>cargo test</strong>
    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
     Running target/debug/project4-a361c5b0e038c111

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured

     Running target/debug/test-3800f163e9de7132

running 2 tests
test failure ... FAILED
test ok_test ... ok

failures:

---- failure stdout ----
        thread 'failure' panicked at 'assertion failed: false', tests/test.rs:7
note: Run with `RUST_BACKTRACE=1` for a backtrace.


failures:
    failure

test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured

error: test failed
</pre>

<p>Jeden z&nbsp;testů podle očekávání skončil v&nbsp;pořádku, druhý naopak skončil s&nbsp;chybou (viz řádek s&nbsp;makrem <strong>assert!</strong>).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Příprava binárních souborů pro distribuci</h2>

<p>Při sestavování projektu lze specifikovat, zda se má sestavit varianta určená pro ladění či naopak varianta pro distribuci. V&nbsp;průběhu sestavování varianty pro distribuci se obecně mohou provádět optimalizace, které nemají pro ladění větší význam a které by naopak mohly zbytečně sestavování prodloužit. Při přípravě finální verze se postupuje takto:</p>

<pre>
$ <strong>cargo build --release</strong>
   Compiling project1 v0.1.0 (file:///home/tester/temp/presentations/rust/projects/project1)
    Finished release [optimized] target(s) in 0.37 secs
</pre>

<p>V&nbsp;adresáři <strong>target</strong> se nyní budou nacházet dva podadresáře. Jeden z&nbsp;nich obsahuje běžnou verzi projektu určenou pro ladění, druhý pak finální optimalizovanou verzi:</p>

<pre>
.
├── Cargo.lock
├── Cargo.toml
├── src
│   └── main.rs
└── target
    ├── debug
    │   ├── build
    │   ├── deps
    │   ├── examples
    │   ├── native
    │   └── project1
    └── release
        ├── build
        ├── deps
        ├── examples
        ├── native
        └── project1

12 directories, 5 files
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vyčištění projektu &ndash; odstranění pracovních souborů</h2>

<p>Nejsnadnějším způsobem, jak adresář s&nbsp;projektem vyčistit od pracovních souborů, je spuštění příkazu:</p>

<pre>
$ <strong>cargo clean</strong>
</pre>

<p>Adresář s&nbsp;projektem by měl po spuštění tohoto příkazu vypadat prakticky totožně, jako po vytvoření projektu. Přibyl pouze soubor nazvaný <strong>Cargo.lock</strong>, o němž se zmíníme v&nbsp;dalších kapitolách:</p>

<pre>
.
├── Cargo.lock
├── Cargo.toml
└── src
    └── main.rs

1 directory, 3 files
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přidání knihovny používané projektem</h2>

<p>Nyní si vyzkoušejme, jak lze projekt nakonfigurovat takovým způsobem, aby bylo možné volat funkce z&nbsp;externí knihovny (balíčku). Nejprve si vytvořme nový projekt:</p>

<pre>
$ <strong>cargo new --bin --vcs none project5</strong>

$ <strong>cd project4</strong>
</pre>

<p>Následně upravme soubor <strong>src/main.rs</strong> tak, aby se v&nbsp;něm použily funkce a metody z&nbsp;balíčku <strong>rand</strong>. Program je vlastně velmi jednoduchý, protože po svém spuštění vypíše dva sloupce náhodných čísel, přičemž první sloupec bude obsahovat dekadická čísla v&nbsp;rozsahu -128 až 127 a sloupec druhý hexadecimální čísla 0x00 až 0xff:</p>

<pre>
extern crate rand;
use rand::Rng;

fn main() {
    let mut rng = rand::thread_rng();
    for _ in 1..11 {
        println!("{:&gt;5}  {:02x}", rng.gen::&lt;i8&gt;(), rng.gen::&lt;u8&gt;())
    }
}
</pre>

<p>Překlad a spuštění se však v&nbsp;tomto případě ihned nepovede, neboť příslušná knihovna prozatím nebude k&nbsp;dispozici:</p>

<pre>
$ <strong>cargo run</strong>
   Compiling project5 v0.1.0 (file:///home/tester/temp/project5)
error[E0425]: unresolved name `rand::thread_rng`
 --&gt; src/main.rs:5:19
  |
5 |     let mut rng = rand::thread_rng();
  |                   ^^^^^^^^^^^^^^^^

error: aborting due to previous error

error: Could not compile `project5`.

To learn more, run the command again with --verbose.
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vyhledání vhodné knihovny</h2>

<p>Nástroj <i>Cargo</i> obsahuje snadno použitelnou funkci pro vyhledání knihovny (balíčku) na základě zadaného slova či sousloví. Pokud například budeme chtít v&nbsp;našem programu použít generátor náhodných čísel (<i>random numbers</i>), můžeme se pokusit vyhledat balíčky, které ve svém jménu nebo popisu obsahují slovo &bdquo;rand&ldquo;:</p>

<pre>
$ <strong>cargo search rand</strong>

    Updating registry `https://github.com/rust-lang/crates.io-index`
rand (0.3.14)                    Random number generators and other randomness functionality. 
derive_rand (0.1.1)              `#[derive]`-like functionality for the `rand::Rand` trait. 
rand_derive (0.1.0)              Implementation of `derive(Rand)` for `custom_derive!{}`. Produces an implementation of `rand::Rand` automatically for enums and…
rand_macros (0.1.10)             `#[derive]`-like functionality for the `rand::Rand` trait. 
ndarray-rand (0.2.0)             Constructors for randomized arrays. `rand` integration for `ndarray`.
pcg_rand (0.7.0)                 An implementation of the PCG family of random number generators in pure Rust
rand-distributions (0.1.2)       Random number distributions for use with `rand`. 
rand-pop (0.1.1)                 Trait for random removal from containers.
rand-mersenne-twister (0.1.0)    Rust implementation of Mersenne Twister PRNG algorithm
xorshift (0.1.1)                 Implementation of the high performance xoroshiro128+, xorshift128+, xorshift1024*, and splitmix64 pseudo random number generato…
... and 14 crates more (use --limit N to see more)
</pre>

<p>Vidíme, že se našlo větší množství balíčků, standardně je jich však vypsáno jen deset. V&nbsp;nápovědě se dozvíme, jak zvýšit počet vypsaných balíčků nepovinným parametrem <strong>--limit</strong>:</p>

<pre>
$ <strong>cargo search rand --limit 10000</strong>
    Updating registry `https://github.com/rust-lang/crates.io-index`
rand (0.3.14)                      Random number generators and other randomness functionality. 
derive_rand (0.1.1)                `#[derive]`-like functionality for the `rand::Rand` trait. 
rand_derive (0.1.0)                Implementation of `derive(Rand)` for `custom_derive!{}`. Produces an implementation of `rand::Rand` automatically for enums and…
rand_macros (0.1.10)               `#[derive]`-like functionality for the `rand::Rand` trait. 
ndarray-rand (0.2.0)               Constructors for randomized arrays. `rand` integration for `ndarray`.
pcg_rand (0.7.0)                   An implementation of the PCG family of random number generators in pure Rust
rand-distributions (0.1.2)         Random number distributions for use with `rand`. 
rand-pop (0.1.1)                   Trait for random removal from containers.
rand-mersenne-twister (0.1.0)      Rust implementation of Mersenne Twister PRNG algorithm
xorshift (0.1.1)                   Implementation of the high performance xoroshiro128+, xorshift128+, xorshift1024*, and splitmix64 pseudo random number generato…
rfmt (0.1.0)                       Another Rust source code formatter. 
rdrand (0.1.5)                     An implementation of random number generator based on rdrand and rdseed instructions
ring (0.6.0-alpha)                 Safe, fast, small crypto using Rust.
cargo-tree (0.8.0)                 A Cargo subcommand that visualizes a crate's dependency graph in a tree-like format
mayda (0.2.1)                      Compression of integer arrays, favoring decompression speed.
pumpkin (1.0.1)                    A cryptographically secure prime number generator
roulette (0.1.0)                   An efficient implementation of roulette wheel selection
combid (0.5.0)                     Generate numeric identifiers
core_collections (0.3.20161028)    This is a copy of libstd::collections with all the parts that don't work in  core removed. Most importantly, it provides HashMa…
ascii_set (0.1.0)                  Fast membership of ASCII character classes.
capsicum (0.1.1)                   Simple intuitive Rust bindings for the FreeBSD capsicum framework 
cargo-ebuild (0.1.1)               Generates an ebuild for a package using the in-tree eclasses. 
tcod (0.10.0)                      The Rust bindings for the Doryen library (a.k.a. libtcod).
yyid (0.2.4)                       YYID generator (random tokens like UUIDv4) 
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Stažení všech závislostí</h2>

<p>Do našeho projektu budeme chtít přidat knihovnu <strong>rand</strong> vypsanou hned na začátku seznamu. Proto upravíme projektový soubor <strong>Cargo.toml</strong> následujícím způsobem (přidáme řádek se jménem a verzí knihovny):</p>

<pre>
[package]
name = "project5"
version = "0.1.0"
authors = ["Pavel Tisnovsky &lt;ptisnovs@redhat.com&gt;"]

[dependencies]
rand = "0.3.14"
</pre>

<p>Následně se při prvním pokusu o sestavení projektu nejprve stáhnou všechny závislé knihovny, tedy i ty, na nichž závisí funkce knihovny <strong>rand</strong>:</p>

<pre>
$ <strong>cargo build</strong>

    Updating registry `https://github.com/rust-lang/crates.io-index`
 Downloading rand v0.3.14
 Downloading libc v0.2.17
   Compiling libc v0.2.17
   Compiling rand v0.3.14
   Compiling project1 v0.1.0 (file:///home/tester/temp/project1)
    Finished debug [unoptimized + debuginfo] target(s) in 5.63 secs
</pre>

<p>Pokud budete chtít provést nový &bdquo;čistý&ldquo; překlad, není nic snazšího. Povšimněte si, že se externí knihovny již pouze překládají, ale nestahují:</p>

<pre>
$ <strong>cargo clean</strong>
$ <strong>cargo build</strong>
   Compiling libc v0.2.17
   Compiling rand v0.3.14
   Compiling project5 v0.1.0 (file:///home/tester/temp/project5)
    Finished debug [unoptimized + debuginfo] target(s) in 5.53 secs
</pre>

<p>Podívejme se ještě na obsah souboru <strong>Cargo.lock</strong>. Ten byl upraven nástrojem <i>Cargo</i> a obsahuje následující údaje:</p>

<pre>
[root]
name = "project5"
version = "0.1.0"
dependencies = [
 "rand 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)",
]

[[package]]
name = "libc"
version = "0.2.17"
source = "registry+https://github.com/rust-lang/crates.io-index"

[[package]]
name = "rand"
version = "0.3.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
dependencies = [
 "libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)",
]

[metadata]
"checksum libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)" = "044d1360593a78f5c8e5e710beccdc24ab71d1f01bc19a29bcacdba22e8475d8"
"checksum rand 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)" = "2791d88c6defac799c3f20d74f094ca33b9332612d9aef9078519c82e4fe04a5"
</pre>

<p>Co to znamená v&nbsp;praxi? Pokud je tento soubor součástí projektu a někdo spustí překlad na svém počítači, použije se <i>přesně ta samá</i> verze závislých knihoven, a to bez ohledu na to, zda se číslo verze skutečně zvýšilo či nikoli. Je tomu tak z&nbsp;toho důvodu, že se v&nbsp;tomto souboru pamatují i SHA otisky.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Spuštění projektu a lokální instalace projektu</h2>

<p>Spuštění projektu, jehož činnost závisí na externích knihovnách, je stejně snadná, jako spouštění jiného projektu. Ostatně se můžete přesvědčit sami:</p>

<pre>
$ <strong>cargo run</strong>
    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
     Running `target/debug/project5`
</pre>

<p>Na standardní výstup by se měly vypsat dva sloupce náhodných čísel, první sloupec bude obsahovat celá čísla se znaménkem (rozsah -128..127), druhý sloupec pak náhodné hexadecimální hodnoty s&nbsp;rozsahem 0x00 až 0xff:</p>

<pre>
    2  ff
    6  cf
   24  75
 -103  51
  -80  5b
   37  96
  -73  9e
   63  1b
  -32  1a
  118  ba
</pre>

<p>Lokální instalaci lze provést následovně:</p>

<pre>
$ <strong>cargo install</strong>
   Compiling libc v0.2.17
   Compiling rand v0.3.14
   Compiling project5 v0.1.0 (file:///home/tester/temp/project5)
    Finished release [optimized] target(s) in 5.88 secs
  Installing /home/tester/.cargo/bin/project5
warning: be sure to add `/home/tester/.cargo/bin` to your PATH to be able to run the installed binaries
</pre>

<p>V&nbsp;adresáři <strong>/home/tester/.cargo/bin</strong> (nahraďte &bdquo;tester&ldquo; za svůj login) se bude nacházet jediný spustitelný soubor:</p>

<pre>
$ <strong>ls -l ~/.cargo/bin</strong>
total 656
-rwxr-xr-x 1 tester tester 671103 lis 19 20:09 project5
</pre>

<p>Spuštění se provede buď přímým zadáním cesty nebo přidáním adresáře do proměnné <strong>$PATH</strong>:</p>

<pre>
$ <strong>export PATH=~/.cargo/bin:$PATH</strong>
$ <strong>project5</strong>
 -126  5f
   93  1e
   92  f6
  -16  b4
   41  05
  120  af
  -78  22
   87  83
  -77  71
  -41  e7
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Repositář s&nbsp;demonstračními projekty</h2>

<p>Jednoduché projekty spravované nástrojem <i>Cargo</i>, které jsme si popsali v&nbsp;předchozích kapitolách, byly uloženy do GIT repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations/">https://github.com/tisnik/presentations/</a>:</p>

<table>
<tr><th>Jméno</th><th>Popis projektu</th><th>Cesta k&nbsp;projektu</th></tr>
<tr><td>project1</td><td>kostra projektu s&nbsp;podporou Gitu</td><td><a href="https://github.com/tisnik/presentations/tree/master/rust/projects/project1">https://github.com/tisnik/presentations/tree/master/rust/projects/project1</a></td></tr>
<tr><td>project2</td><td>kostra projektu, který nepoužívá SCM</td><td><a href="https://github.com/tisnik/presentations/tree/master/rust/projects/project2">https://github.com/tisnik/presentations/tree/master/rust/projects/project2</a></td></tr>
<tr><td>project3</td><td>kostra projektu s&nbsp;podporou Mercurialu</td><td><a href="https://github.com/tisnik/presentations/tree/master/rust/projects/project3">https://github.com/tisnik/presentations/tree/master/rust/projects/project3</a></td></tr>
<tr><td>project4</td><td>projekt s&nbsp;jednotkovým testem</td><td><a href="https://github.com/tisnik/presentations/tree/master/rust/projects/project4">https://github.com/tisnik/presentations/tree/master/rust/projects/project4</a></td></tr>
<tr><td>project5</td><td>projekt s&nbsp;knihovnou, na níž závisí</td><td><a href="https://github.com/tisnik/presentations/tree/master/rust/projects/project5">https://github.com/tisnik/presentations/tree/master/rust/projects/project5</a></td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>Cargo, Rust's Package Manager<br />
<a href="http://doc.crates.io/index.html">http://doc.crates.io/index.html</a>
</li>

<li>Cargo Guide<br />
<a href="http://doc.crates.io/guide.html">http://doc.crates.io/guide.html</a>
</li>

<li>The Manifest Format<br />
<a href="http://doc.crates.io/manifest.html#the-profile-sections">http://doc.crates.io/manifest.html#the-profile-sections</a>
</li>

<li>Seriál Programovací jazyk Rust (Root.cz)<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Why do Rust programs use more memory than C? <br />
<a href="https://www.rust-lang.org/en-US/faq.html#why-do-rust-programs-use-more-memory-than-c">https://www.rust-lang.org/en-US/faq.html#why-do-rust-programs-use-more-memory-than-c</a>
</li>

<li>Why is a Rust executable large?<br />
<a href="https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html">https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html</a>
</li>

<li>A lightweight logging facade for Rust <br />
<a href="https://crates.io/crates/log">https://crates.io/crates/log</a>
</li>

<li>Random number generators and other randomness functionality<br />
<a href="https://crates.io/crates/rand">https://crates.io/crates/rand</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Git (home page)<br />
<a href="https://git-scm.com/">https://git-scm.com/</a>
</li>

<li>Mercurial (home page)<br />
<a href="https://www.mercurial-scm.org/">https://www.mercurial-scm.org/</a>
</li>

<li>Pretty printer pro JSON (online nástroj):<br />
<a href="https://jsonformatter.curiousconcept.com/">https://jsonformatter.curiousconcept.com/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

