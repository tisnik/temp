<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Rust: binární halda, použití TCP</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Rust: binární halda, použití TCP</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Poslední datovou strukturou ve standardní knihovně programovacího jazyka Rust je takzvaná binární halda, kterou si dnes podrobněji popíšeme. V&nbsp;závěru článku se navíc zmíníme o podpoře TCP v&nbsp;základní knihovně Rustu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Datová struktura BinaryHeap (binární halda)</a></p>
<p><a href="#k02">2. Interní implementace binární haldy</a></p>
<p><a href="#k03">3. Časová složitost základních operací s&nbsp;binární haldou</a></p>
<p><a href="#k04">4. Triviální příklad použití binární haldy</a></p>
<p><a href="#k05">5. Problematika uspořádání prvků</a></p>
<p><a href="#k06">6. Iterátor pro BinaryHeap versus funkce <strong>pop()</strong></a></p>
<p><a href="#k07">7. Převod prvků z&nbsp;binární haldy do vektoru</a></p>
<p><a href="#k08">8. Převod prvků do setříděného vektoru</a></p>
<p><a href="#k09">9. Postupný přesun prvků z&nbsp;binární haldy s&nbsp;použitím funkce <strong>drain()</strong></a></p>
<p><a href="#k10">10. Podpora TCP v&nbsp;základní knihovně programovacího jazyka Rust</a></p>
<p><a href="#k11">11. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Datová struktura BinaryHeap (binární halda)</h2>

<p>Poslední datovou strukturou, která je ve standardní knihovně programovacího
jazyka Rust zařazena mezi datové kolekce, je takzvaná <i>binární halda</i>
neboli <i>binary heap</i>. Interně je binární halda, jakožto konkrétní
implementace strukturovaného datového typu <i>haldy</i> (viz poznámka níže),
reprezentována speciálně uloženým binárním stromem, na nějž jsou vztažena další
dvě omezení:</p>

<ol>

<li>Až na poslední úroveň musí být binární strom vyvážený. Poslední úroveň může
být buď kompletní (potom je pochopitelně celý binární strom vyvážený) nebo
nekompletní.  V&nbsp;případě, že je poslední úroveň nekompletní, naplňují se
uzly na této úrovni zleva doprava.</li>

<li>Hodnota uložená v&nbsp;každém uzlu takového binárního stromu musí být
<strong>větší nebo rovna</strong> hodnotám uloženým v&nbsp;potomcích uzlu.
Naproti tomu tato vlastnost nijak přesněji nespecifikuje, jak (a zda vůbec)
musí být potomci daného uzlu uspořádány. Pokud například oba potomky nějakého
uzlu prohodíme, jedná se o zcela korektní operaci, která nijak toto pravidlo
(omezení) neporuší.</li>

</ol>

<p>Samozřejmě platí, že podmínka <strong>větší nebo rovna</strong> je
volitelná, resp.&nbsp;přesněji řečeno si programátor sám může zvolit funkci,
která tuto podmínku testuje. Pro tento účel se používá trait
<strong>str::cmp::Ord</strong> (<a
href="https://doc.rust-lang.org/std/cmp/trait.Ord.html">https://doc.rust-lang.org/std/cmp/trait.Ord.html</a>).</p>

<p>Poznámka: pojem <i>halda</i> (<i>heap</i>) má v&nbsp;kontextu programovacího
jazyka Rust minimálně dva významy. Označuje se jím jak datová struktura popsaná
výše, tak i ta část operační paměti, která je využívána pro alokaci dynamické
paměti (resp. dynamických proměnných).</p>

<p>Poznámka<sup>2</sup>: halda jakožto datová struktura musí splňovat takzvanou
<i>vlastnost haldy</i>: pokud je B potomek A, pak platí x(A) &gt;= x(B). To
znamená, že v&nbsp;kořenu stromu je vždy umístěn prvek s&nbsp;nejvyšším
klíčem.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Interní implementace binární haldy</h2>

<p>Existuje několik způsobů implementace binární haldy. Samozřejmě se skutečně
může jednat o klasický <i>binární strom</i>, tj.&nbsp;o datovou strukturu
obsahující uzly, přičemž každý uzel obsahuje ukazatele na své dva potomky.
Ovšem v&nbsp;praxi se setkáme spíše s&nbsp;implementací binární haldy pomocí
<i>pole</i> nebo v&nbsp;případě programovacího jazyka Rust s&nbsp;využitím
<i>vektoru</i>. To je umožněno díky prvnímu požadavku na binární strom
reprezentující haldu: až na poslední úroveň musí být binární strom vyvážený.
Tato alternativní reprezentace, v&nbsp;níž není nutné používat ukazatele ani
reference, s&nbsp;sebou samozřejmě přináší mnohé výhody, především pak menší
nároky na operační paměť, rychlejší přístup k&nbsp;prvkům haldy a lepší využití
L1 i L2 cache (což je možná dnes zdaleka nejdůležitější). Konkrétně
v&nbsp;Rustu je reprezentace binární haldy následující:</p>

<pre>
pub struct BinaryHeap&lt;T&gt; {
    data: Vec&lt;T&gt;,
}
</pre>

<p>Poznámka: počet uzlů se zjistí jednoduše použitím metody
<strong>len()</strong> pro vektor.</p>

<p>Jak však reprezentace binární haldy pomocí pole nebo vektoru vypadá? První
prvek v&nbsp;poli či vektoru obsahuje kořen, tj.&nbsp;prvek s&nbsp;maximální
hodnotou (podle druhé podmínky z&nbsp;předchozí kapitoly). Následující dva
prvky pole/vektoru obsahují přímé potomky kořenového prvku. Další maximálně
čtyři prvky pole/vektoru obsahují potomky předchozích dvou uzlů (potomků
kořene) a tak dále až do dosažení potřebného počtu prvků. Lze snadno zjistit,
že pro prvek uložený v&nbsp;poli/vektoru na indexu <i>n</i> budou jeho potomci
uloženi na pozici <i>2n+1</i> a <i>2n+2</i>. Pro kořen s&nbsp;indexem
<i>n=0</i> jsou jeho potomci skutečně uloženi na pozicích <i>2&times;0+1=1</i>
a <i>2&times;0+2=2</i>. První z&nbsp;těchto uzlů s&nbsp;indexem/pozicí
<i>n=1</i> má potomky na pozicích <i>2&times;1+1=3</i> a <i>2&times;1+2=4</i>
atd. Podívejme se ostatně na ilustrační obrázek:</p>

<a href="https://www.root.cz/obrazek/286157/"><img src="https://i.iinfo.cz/images/649/binary-heap-1.png" class="image-286157" alt="&#160;" width="370" height="93" /></a>
<p><i>Obrázek 1: Interní reprezentace haldy.<br />
Zdroj: Wikipedia</i></p>

<p>Poznámka: právě z&nbsp;tohoto způsobu uložení plyne nutnost naplňovat
poslední úroveň stromu zleva doprava.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Časová složitost základních operací s&nbsp;binární haldou</h2>

<p>Nejdůležitější praktickou vlastností binární haldy je zjištění prvku
s&nbsp;maximální hodnotou v&nbsp;konstantním čase, protože tento prvek musí být
uložen v&nbsp;kořenu stromu. Mj.&nbsp;i z&nbsp;tohoto důvodu se binární haldy
používají pro implementaci prioritních front a podobných užitečných struktur.
V&nbsp;následující tabulce jsou vypsány časové složitosti dalších často
používaných operací. Nejhorší složitost má operace pro sloučení dvou binárních
hald, zatímco vložení či vyjmutí prvku je operace se &bdquo;slušnou&ldquo;
logaritmickou složitostí (je tomu tak z&nbsp;toho důvodu, že <i>log n</i>
odpovídá výšce stromu):</p>

<table>
<tr><th>Operace</th><th>Časová složitost</th></tr>
<tr><td>Stavba haldy</td><td>O(n)</td></tr>
<tr><td>Získání hodnoty kořene</td><td>O(1)</td></tr>
<tr><td>Vyjmutí kořene z haldy</td><td>O(log n)</td></tr>
<tr><td>Vložení prvku do haldy</td><td>O(log n)</td></tr>
<tr><td>Odstranění prvku z haldy</td><td>O(log n)</td></tr>
<tr><td>Sloučení 2 hald</td><td>O(n1 + n2)</td></tr>
</table>

<p>Algoritmus pro vkládání prvku do binární haldy je <a
href="https://cs.wikipedia.org/wiki/Bin%C3%A1rn%C3%AD_halda#Vkl.C3.A1d.C3.A1n.C3.AD_do_haldy">popsán
na Wikipedii</a>.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Triviální příklad použití binární haldy</h2>

<p>Do binární haldy je možné ukládat jakékoli datové typy implementující již
výše zmíněný trait <strong>Ord</strong>. To se týká i řetězců, takže se
podívejme na velmi jednoduchý příklad, v&nbsp;němž do binární haldy vložíme
pětici řetězců (ve skutečnosti se vkládají reference na konstantní řetězce).
Povšimněte si, že podobně jako u dalších typů kolekcí, si typ prvků odvodí
překladač automaticky po první operaci <strong>heap.push()</strong>. Pro
jednoduchost prvky z&nbsp;haldy získáváme s&nbsp;využitím iterátoru:</p>

<pre>
use std::collections::BinaryHeap;
&nbsp;
fn main() {
    let mut heap = BinaryHeap::new();
&nbsp;
    heap.push("Trachta");
    heap.push("Hlavacek");
    heap.push("Bierhanzel");
    heap.push("Meyer");
    heap.push("Vaclav Kotek");
&nbsp;
    for item in &amp;heap {
        println!("{}", item);
    }
}
</pre>

<p>Po spuštění tohoto příkladu získáme následující výstup. Povšimněte si, že
pořadí prvků je (pseudo)náhodné:</p>

<pre>
Vaclav Kotek
Trachta
Bierhanzel
Hlavacek
Meyer
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Problematika uspořádání prvků</h2>

<p>V&nbsp;předchozí části tohoto seriálu <a
href="https://www.root.cz/clanky/programovaci-jazyk-rust-efektivni-prace-s-prvky-ulozenymi-v-kolekcich/#k12">zazněla
otázka</a>, jak by bylo možné uspořádat prvky představující komplexní čísla.
Pokud totiž budeme chtít komplexní čísla vložit do binární haldy, je vyžadována
implementace traitu <strong>Ord</strong>. Jedno z&nbsp;možných (špatných :-)
řešení může vypadat následovně. Implementujeme traity <strong>Ord</strong> a
<strong>PartialOrd</strong> (povšimněte si, jaké datové typy vrací metody
<strong>cmp</strong> a <strong>partial_cmp</strong>):</p>

<pre>
impl Ord for Complex {
    fn cmp(&amp;self, other: &amp;Complex) -&gt; Ordering {
        self.real.cmp(&amp;other.real)
    }
}
&nbsp;
impl PartialOrd for Complex {
    fn partial_cmp(&amp;self, other: &amp;Complex) -&gt; Option&lt;Ordering&gt; {
        Some(self.cmp(other))
    }
}
</pre>

<p>Volání <strong>self.real.cmp()</strong> je možné z&nbsp;toho důvodu, že tato
metoda (a trait <strong>Cmp</strong>) pro celá čísla existuje (pro čísla
s&nbsp;plovoucí řádovou čárkou však nikoli):</p>

<pre>
#[derive(Clone, Debug)]
struct Complex {
    real: i32,
    imag: i32,
}
</pre>

<p>Navíc ještě implementujeme trait <strong>Eq</strong> a
<strong>PartialEq</strong>:</p>

<pre>
impl PartialEq for Complex {
    fn eq(&amp;self, other: &amp;Complex) -&gt; bool {
        self.real == other.real
    }
}
&nbsp;
impl Eq for Complex {}
</pre>

<p>Program, který vloží několik komplexních čísel do binární haldy, může
vypadat následovně:</p>

<pre>
use std::collections::BinaryHeap;
use std::cmp::Ordering;
&nbsp;
#[derive(Clone, Debug)]
struct Complex {
    real: i32,
    imag: i32,
}
&nbsp;
impl Complex {
    fn new(real: i32, imag: i32) -&gt; Complex {
        Complex{real:real, imag:imag}
    }
    fn print(&amp;self) {
        println!("complex number: {:}+{:}i", self.real, self.imag);
    }
}
&nbsp;
impl Ord for Complex {
    fn cmp(&amp;self, other: &amp;Complex) -&gt; Ordering {
        self.real.cmp(&amp;other.real)
    }
}
&nbsp;
impl PartialOrd for Complex {
    fn partial_cmp(&amp;self, other: &amp;Complex) -&gt; Option&lt;Ordering&gt; {
        Some(self.cmp(other))
    }
}
&nbsp;
impl PartialEq for Complex {
    fn eq(&amp;self, other: &amp;Complex) -&gt; bool {
        self.real == other.real
    }
}
&nbsp;
impl Eq for Complex {}
&nbsp;
impl Drop for Complex {
    fn drop(&amp;mut self) {
        println!("Dropping complex number: {:}+{:}i", self.real, self.imag);
    }
}
&nbsp;
fn main() {
    let mut heap = BinaryHeap::new();
&nbsp;
    heap.push(Complex::new(0, 0));
    heap.push(Complex::new(1, 1));
    heap.push(Complex::new(0, 0));
    heap.push(Complex::new(1, 1));
    heap.push(Complex::new(2, 2));
&nbsp;
    println!("max: {:?}", <strong>heap.peek()</strong>);
    for item in &amp;heap {
        item.print();
    }
}
</pre>

<p>Povšimněte si, že zavoláním <strong>heap.peek()</strong> můžeme získat
maximální prvek v&nbsp;binární haldě, tj.&nbsp;vlastně kořen stromu:</p>

<pre>
max: Some(Complex { real: 2, imag: 2 })
complex number: 2+2i
complex number: 1+1i
complex number: 0+0i
complex number: 0+0i
complex number: 1+1i
Dropping complex number: 2+2i
Dropping complex number: 1+1i
Dropping complex number: 0+0i
Dropping complex number: 0+0i
Dropping complex number: 1+1i
</pre>

<p>Komplexní čísla jsou opět vrácena v&nbsp;obecně náhodném pořadí.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Iterátor pro BinaryHeap versus funkce <strong>pop()</strong></h2>

<p>Zkusme nyní do binární haldy ukládat celá čísla, pro něž je uspořádání
triviální. Nejprve do haldy vložíme devět hodnot v&nbsp;zadaném pořadí,
následně získáme prvek s&nbsp;maximální hodnotou, posléze vypíšeme prvky
v&nbsp;pořadí vráceném iterátorem a na závěr použijeme metodu
<strong>pop()</strong> pro postupné čtení prvků z&nbsp;haldy:</p>

<pre>
use std::collections::BinaryHeap;
&nbsp;
fn main() {
    let mut heap = BinaryHeap::new();
&nbsp;
    heap.push(1);
    heap.push(2);
    heap.push(3);
    heap.push(4);
    heap.push(100);
    heap.push(5);
    heap.push(6);
    heap.push(7);
    heap.push(8);
&nbsp;
    println!("max value: {:?}", heap.peek());
&nbsp;
    for item in &amp;heap {
        println!("{}", item);
    }
&nbsp;
    for _ in 0..heap.len()+1 {
        println!("{:?}", heap.pop());
    }
&nbsp;
}
</pre>

<p>Podívejme se na výstup tohoto programu. Maximální prvek je vrácen jako
hodnota typu <strong>Option</strong> (None/Some), následně přes iterátor
získáme prvky v&nbsp;obecně náhodném pořadí a metoda <strong>pop()</strong>
postupně vrátí prvky setříděné podle jejich velikosti. Pokud se dojde na konec
haldy, vrátí se hodnota <strong>None</strong> (nedojde však k&nbsp;žádné
výjimce):</p>

<pre>
max value: Some(100)
100
8
6
7
3
2
5
1
4
Some(100)
Some(8)
Some(7)
Some(6)
Some(5)
Some(4)
Some(3)
Some(2)
Some(1)
None
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Převod prvků z&nbsp;binární haldy do vektoru</h2>

<p>Binární halda implementuje metodu nazvanou <strong>into_vec()</strong>,
která dokáže převést haldu na vektor. Vzhledem k&nbsp;tomu, že již víme, že
halda <i>je</i> implementována vektorem, je tato operace pravděpodobně
provedena velmi rychle:</p>

<pre>
use std::collections::BinaryHeap;
&nbsp;
fn main() {
    let mut heap = BinaryHeap::new();
&nbsp;
    heap.push(1);
    heap.push(2);
    heap.push(3);
    heap.push(4);
    heap.push(100);
    heap.push(5);
    heap.push(6);
    heap.push(7);
    heap.push(8);
&nbsp;
    println!("max value: {:?}", heap.peek());
&nbsp;
    let vec = <strong>heap.into_vec()</strong>;
&nbsp;
    for item in &amp;vec {
        println!("{}", item);
    }
}
</pre>

<p>Prvky výsledného vektoru jsou obecně vráceny v&nbsp;náhodném pořadí.
Přesněji řečeno není pořadí zcela náhodné, protože první prvek bude mít
maximální hodnotu, ale další pořadí již není pevně dané:</p>

<pre>
max value: Some(100)
100
8
6
7
3
2
5
1
4
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Převod prvků do setříděného vektoru</h2>

<p>Mnohem častěji budeme vyžadovat převod binární haldy do vektoru, ovšem
takovým způsobem, aby byly jeho prvky vzestupně setříděny. K&nbsp;tomuto účelu
dobře poslouží metoda nazvaná <strong>into_sorted_vec()</strong>, jejíž
implementace však není tak triviální, jako tomu bylo u metody
<strong>into_vec()</strong>:</p>

<pre>
use std::collections::BinaryHeap;
&nbsp;
fn main() {
    let mut heap = BinaryHeap::new();
&nbsp;
    heap.push(1);
    heap.push(2);
    heap.push(3);
    heap.push(4);
    heap.push(100);
    heap.push(5);
    heap.push(6);
    heap.push(7);
    heap.push(8);
&nbsp;
    println!("max value: {:?}", heap.peek());
&nbsp;
    let vec = <strong>heap.into_sorted_vec()</strong>;
&nbsp;
    for item in &amp;vec {
        println!("{}", item);
    }
}
</pre>

<p>Z&nbsp;výsledného výpisu je patrné, že prvky jsou skutečně vráceny
setříděné:</p>

<pre>
max value: Some(100)
1
2
3
4
5
6
7
8
100
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Postupný přesun prvků z&nbsp;binární haldy s&nbsp;použitím funkce <strong>drain()</strong></h2>

<p>Již minule jsme se zmiňovali o funkci pojmenované <strong>drain()</strong>,
díky níž je možné postupně zpracovávat prvky z&nbsp;datových kolekcí bez
nutnosti jejich klonování. Tato funkce samozřejmě existuje i pro binární haldu,
takže se jen rychle podívejme na příklad jejího použití:</p>

<pre>
use std::collections::BinaryHeap;
&nbsp;
fn main() {
    let mut heap = BinaryHeap::new();
&nbsp;
    heap.push(1);
    heap.push(2);
    heap.push(3);
    heap.push(4);
    heap.push(100);
    heap.push(5);
    heap.push(6);
    heap.push(7);
    heap.push(8);
&nbsp;
    println!("max value: {:?}", heap.peek());
&nbsp;
    let iter = <strong>heap.drain()</strong>;
&nbsp;
    for item in iter {
        println!("{}", item);
    }
}
</pre>

<p>Výsledek bude shodný s&nbsp;použitím metody <strong>iter()</strong>, protože
prvky budou zpracovány v&nbsp;tom pořadí, v&nbsp;jakém jsou uloženy do
vektoru:</p>

<pre>
max value: Some(100)
100
8
6
7
3
2
5
1
4
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Podpora TCP v&nbsp;základní knihovně programovacího jazyka Rust</h2>

<p>Ve standardní knihovně programovacího jazyka Rust nalezneme i podporu pro
práci s&nbsp;TCP. To mj.&nbsp;znamená, že je možné relativně snadno tvořit
aplikace běžící v&nbsp;režimu serveru (s&nbsp;nasloucháním na zvoleném portu či
portech) či v&nbsp;režimu klienta (který se připojuje k&nbsp;serveru).
Základními datovými strukturami, které se v&nbsp;tomto případě používají, jsou
struktury <strong>TcpListener</strong> a <strong>TcpStream</strong>. Názvy
těchto struktur napovídají, jak se používají &ndash;
<strong>TcpListener</strong> slouží pro implementaci jednoduchého serveru,
<strong>TcpStream</strong> pak představuje objekt zajišťující obousměrný přenos
dat mezi klientem a serverem.</p>

<p>Podívejme se nyní na příklad velmi jednoduchého serveru, který naslouchá na
portu 1234 a který realizuje odpovědi v&nbsp;jediném vláknu (což může být
samozřejmě omezující). Číslo portu je větší než 1024, takže ho může otevřít i
aplikace bez rootovských práv. Listener se vytvoří triviálně (zejména
v&nbsp;porovnání s&nbsp;tím, co by se dělo v&nbsp;céčku):</p>

<pre>
let listener = TcpListener::bind("127.0.0.1:1234").unwrap();
</pre>

<p>Následně se získá nekonečný iterátor, který při každém požadavku o spojení
od klienta vrátí strukturu typu
<strong>Option&lt;Result&lt;TcpStream&gt;&gt;</strong>, která již reprezentuje
obousměrný komunikační kanál. Vzhledem k&nbsp;tomu, že je iterátor nekonečný,
bude nutné server ukončit jinak, například přes Ctrl+C z&nbsp;terminálu,
posláním signálu STOP příkazem <strong>kill</strong> atd.:</p>

<pre>
let tcp_stream_iter = listener.incoming();
</pre>

<p>Způsob realizace na požadavek o spojení může vypadat takto:</p>

<pre>
for tcp_stream in tcp_stream_iter {
    if tcp_stream.is_ok() {
        handler(tcp_stream.unwrap());
    } else {
        println!("connection failed");
    }
}
</pre>

<p>Handler je prozatím velmi primitivní, protože pouze klientovi pošle textovou
odpověď a následně spojení ukončí:</p>

<pre>
fn handler(mut stream:TcpStream) {
    println!("Accepted connection");
    stream.write(b"Server response...\r\n").unwrap();
}
</pre>

<p>Celý zdrojový kód vypadá následovně:</p>

<pre>
use std::io::Write;
use std::net::TcpListener;
use std::net::TcpStream;
&nbsp;
fn handler(mut stream:TcpStream) {
    println!("Accepted connection");
    stream.write(b"Server response...\r\n").unwrap();
}
&nbsp;
fn main() {
    let listener = TcpListener::bind("127.0.0.1:1234").unwrap();
&nbsp;
    let tcp_stream_iter = listener.incoming();
&nbsp;
    for tcp_stream in tcp_stream_iter {
        if tcp_stream.is_ok() {
            handler(tcp_stream.unwrap());
        } else {
            println!("connection failed");
        }
    }
}
</pre>

<p>Nejprve spustíme server:</p>

<pre>
$ <strong>./292_tcp_listener_1</strong>
</pre>

<p>Následně se z&nbsp;jiného terminálu pokusíme k&nbsp;serveru připojit. Měli
bysme přijmout zprávu &bdquo;Server response...&ldquo; a spojení by se mělo
automaticky ukončit:</p>

<pre>
$ <strong>telnet localhost 1234</strong>
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
<strong>Server response...</strong>
Connection closed by foreign host.
</pre>

<p>Vylepšení tohoto serveru si ukážeme příště.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly, podobně jako ve všech
předchozích částech tohoto seriálu, uloženy do Git repositáře dostupného na
adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý repositář:</p>

<table>
<tr><th>Příklad</th><th>Odkaz do GIT repositáře</th></tr>
<tr><td>286_sequences47.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/286_sequences47.rs">https://github.com/tisnik/presentations/blob/master/rust/286_sequences47.rs</a></td></tr>
<tr><td>287_sequences48.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/287_sequences48.rs">https://github.com/tisnik/presentations/blob/master/rust/287_sequences48.rs</a></td></tr>
<tr><td>288_sequences49.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/288_sequences49.rs">https://github.com/tisnik/presentations/blob/master/rust/288_sequences49.rs</a></td></tr>
<tr><td>289_sequences50.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/289_sequences50.rs">https://github.com/tisnik/presentations/blob/master/rust/289_sequences50.rs</a></td></tr>
<tr><td>290_sequences51.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/290_sequences51.rs">https://github.com/tisnik/presentations/blob/master/rust/290_sequences51.rs</a></td></tr>
<tr><td>291_sequences52.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/291_sequences52.rs">https://github.com/tisnik/presentations/blob/master/rust/291_sequences52.rs</a></td></tr>
</table>

<p>Již dopředu se můžete podívat na demonstrační příklady, s&nbsp;nimiž se
seznámíme v&nbsp;navazující části tohoto seriálu:</p>

<table>
<tr><th>Příklad</th><th>Odkaz do GIT repositáře</th></tr>
<tr><td>292_tcp_listener_1.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/292_tcp_listener_1.rs">https://github.com/tisnik/presentations/blob/master/rust/292_tcp_listener_1.rs</a></td></tr>
<tr><td>293_tcp_listener_2.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/293_tcp_listener_2.rs">https://github.com/tisnik/presentations/blob/master/rust/293_tcp_listener_2.rs</a></td></tr>
<tr><td>294_tcp_listener_3.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/294_tcp_listener_3.rs">https://github.com/tisnik/presentations/blob/master/rust/294_tcp_listener_3.rs</a></td></tr>
<tr><td>295_tcp_listener_4.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/295_tcp_listener_4.rs">https://github.com/tisnik/presentations/blob/master/rust/295_tcp_listener_4.rs</a></td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>TcpListener<br />
<a href="https://doc.rust-lang.org/std/net/struct.TcpListener.html">https://doc.rust-lang.org/std/net/struct.TcpListener.html</a>
</li>

<li>TcpStream<br />
<a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html">https://doc.rust-lang.org/std/net/struct.TcpStream.html</a>
</li>

<li>Binary heap (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Binary_heap">https://en.wikipedia.org/wiki/Binary_heap</a>
</li>

<li>Binární halda (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Bin%C3%A1rn%C3%AD_halda">https://cs.wikipedia.org/wiki/Bin%C3%A1rn%C3%AD_halda</a>
</li>

<li>Halda (datová struktura)<br />
<a href="https://cs.wikipedia.org/wiki/Halda_%28datov%C3%A1_struktura%29">https://cs.wikipedia.org/wiki/Halda_%28datov%C3%A1_struktura%29</a>
</li>

<li>Struct std::collections::HashSet<br />
<a href="https://doc.rust-lang.org/std/collections/struct.HashSet.html">https://doc.rust-lang.org/std/collections/struct.HashSet.html</a>
</li>

<li>Struct std::collections::BTreeSet<br />
<a href="https://doc.rust-lang.org/std/collections/struct.BTreeSet.html">https://doc.rust-lang.org/std/collections/struct.BTreeSet.html</a>
</li>

<li>Struct std::collections::BinaryHeap<br />
<a href="https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html">https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html</a>
</li>

<li>Set (abstract data type)<br />
<a href="https://en.wikipedia.org/wiki/Set_%28abstract_data_type%29#Language_support">https://en.wikipedia.org/wiki/Set_%28abstract_data_type%29#Language_support</a>
</li>

<li>Associative array<br />
<a href="https://en.wikipedia.org/wiki/Associative_array">https://en.wikipedia.org/wiki/Associative_array</a>
</li>

<li>Hash Table<br />
<a href="https://en.wikipedia.org/wiki/Hash_table">https://en.wikipedia.org/wiki/Hash_table</a>
</li>

<li>B-tree<br />
<a href="https://en.wikipedia.org/wiki/B-tree">https://en.wikipedia.org/wiki/B-tree</a>
</li>

<li>Pedro Celis: Robin Hood Hashing (naskenované PDF!)<br />
<a href="https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf">https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf</a>
</li>

<li>Robin Hood hashing<br />
<a href="http://codecapsule.com/2013/11/11/robin-hood-hashing/">http://codecapsule.com/2013/11/11/robin-hood-hashing/</a>
</li>

<li>Robin Hood hashing: backward shift deletion<br />
<a href="http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/">http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/</a>
</li>

<li>Module std::collections<br />
<a href="https://doc.rust-lang.org/std/collections/">https://doc.rust-lang.org/std/collections/</a>
</li>

<li>Module std::vec<br />
<a href="https://doc.rust-lang.org/nightly/std/vec/index.html">https://doc.rust-lang.org/nightly/std/vec/index.html</a>
</li>

<li>Struct std::collections::VecDeque<br />
<a href="https://doc.rust-lang.org/std/collections/struct.VecDeque.html">https://doc.rust-lang.org/std/collections/struct.VecDeque.html</a>
</li>

<li>Struct std::collections::LinkedList<br />
<a href="https://doc.rust-lang.org/std/collections/struct.LinkedList.html">https://doc.rust-lang.org/std/collections/struct.LinkedList.html</a>
</li>

<li>Module std::fmt<br />
<a href="https://doc.rust-lang.org/std/fmt/">https://doc.rust-lang.org/std/fmt/</a>
</li>

<li>Macro std::println<br />
<a href="https://doc.rust-lang.org/std/macro.println.html">https://doc.rust-lang.org/std/macro.println.html</a>
</li>

<li>Enum std::result::Result<br />
<a href="https://doc.rust-lang.org/std/result/enum.Result.html">https://doc.rust-lang.org/std/result/enum.Result.html</a>
</li>

<li>Module std::result<br />
<a href="https://doc.rust-lang.org/std/result/">https://doc.rust-lang.org/std/result/</a>
</li>

<li>Result<br />
<a href="http://rustbyexample.com/std/result.html">http://rustbyexample.com/std/result.html</a>
</li>

<li>Rust stdlib: Option<br />
<a href="https://doc.rust-lang.org/std/option/enum.Option.html">https://doc.rust-lang.org/std/option/enum.Option.html</a>
</li>

<li>Module std::option<br />
<a href="https://doc.rust-lang.org/std/option/index.html">https://doc.rust-lang.org/std/option/index.html</a>
</li>

<li>Rust by example: option<br />
<a href="http://rustbyexample.com/std/option.html">http://rustbyexample.com/std/option.html</a>
</li>

<li>Rust by example: if-let<br />
<a href="http://rustbyexample.com/flow_control/if_let.html">http://rustbyexample.com/flow_control/if_let.html</a>
</li>

<li>Rust by example: while let<br />
<a href="http://rustbyexample.com/flow_control/while_let.html">http://rustbyexample.com/flow_control/while_let.html</a>
</li>

<li>Rust by example: Option&lt;i32&gt;<br />
<a href="http://rustbyexample.com/std/option.html">http://rustbyexample.com/std/option.html</a>
</li>

<li>An Overview of Macros in Rust<br />
<a href="http://words.steveklabnik.com/an-overview-of-macros-in-rust">http://words.steveklabnik.com/an-overview-of-macros-in-rust</a>
</li>

<li>A Practical Intro to Macros in Rust 1.0<br />
<a href="https://danielkeep.github.io/practical-intro-to-macros.html">https://danielkeep.github.io/practical-intro-to-macros.html</a>
</li>

<li>The Rust Programming Language: macros<br />
<a href="https://doc.rust-lang.org/beta/book/macros.html">https://doc.rust-lang.org/beta/book/macros.html</a>
</li>

<li>Rust by example: 15 macro_rules!<br />
<a href="http://rustbyexample.com/macros.html">http://rustbyexample.com/macros.html</a>
</li>

<li>Primitive Type isize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">https://doc.rust-lang.org/nightly/std/primitive.isize.html</a>
</li>

<li>Primitive Type usize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">https://doc.rust-lang.org/nightly/std/primitive.usize.html</a>
</li>

<li>Primitive Type array<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.array.html">https://doc.rust-lang.org/nightly/std/primitive.array.html</a>
</li>

<li>Module std::slice<br />
<a href="https://doc.rust-lang.org/nightly/std/slice/">https://doc.rust-lang.org/nightly/std/slice/</a>
</li>

<li>Rust by Example: 2.3 Arrays and Slices<br />
<a href="http://rustbyexample.com/primitives/array.html">http://rustbyexample.com/primitives/array.html</a>
</li>

<li>What is the difference between Slice and Array (stackoverflow)<br />
<a href="http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array">http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array</a>
</li>

<li>Learning Rust With Entirely Too Many Linked Lists<br />
<a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/">http://cglab.ca/~abeinges/blah/too-many-lists/book/</a>
</li>

<li>Testcase: linked list<br />
<a href="http://rustbyexample.com/custom_types/enum/testcase_linked_list.html">http://rustbyexample.com/custom_types/enum/testcase_linked_list.html</a>
</li>

<li>Operators and Overloading<br />
<a href="https://doc.rust-lang.org/book/operators-and-overloading.html">https://doc.rust-lang.org/book/operators-and-overloading.html</a>
</li>

<li>Module std::ops<br />
<a href="https://doc.rust-lang.org/std/ops/index.html">https://doc.rust-lang.org/std/ops/index.html</a>
</li>

<li>Module std::cmp<br />
<a href="https://doc.rust-lang.org/std/cmp/index.html">https://doc.rust-lang.org/std/cmp/index.html</a>
</li>

<li>Trait std::ops::Add<br />
<a href="https://doc.rust-lang.org/stable/std/ops/trait.Add.html">https://doc.rust-lang.org/stable/std/ops/trait.Add.html</a>
</li>

<li>Trait std::ops::AddAssign<br />
<a href="https://doc.rust-lang.org/std/ops/trait.AddAssign.html">https://doc.rust-lang.org/std/ops/trait.AddAssign.html</a>
</li>

<li>Trait std::ops::Drop<br />
<a href="https://doc.rust-lang.org/std/ops/trait.Drop.html">https://doc.rust-lang.org/std/ops/trait.Drop.html</a>
</li>

<li>Trait std::cmp::Eq<br />
<a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">https://doc.rust-lang.org/std/cmp/trait.Eq.html</a>
</li>

<li>Struct std::boxed::Box<br />
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">https://doc.rust-lang.org/std/boxed/struct.Box.html</a>
</li>

<li>Explore the ownership system in Rust<br />
<a href="https://nercury.github.io/rust/guide/2015/01/19/ownership.html">https://nercury.github.io/rust/guide/2015/01/19/ownership.html</a>
</li>

<li>Rust's ownership and move semantic<br/>
<a href="http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics">http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics</a>
</li>

<li>Trait std::marker::Copy<br/>
<a href="https://doc.rust-lang.org/stable/std/marker/trait.Copy.html">https://doc.rust-lang.org/stable/std/marker/trait.Copy.html</a>
</li>

<li>Trait std::clone::Clone<br />
<a href="https://doc.rust-lang.org/stable/std/clone/trait.Clone.html">https://doc.rust-lang.org/stable/std/clone/trait.Clone.html</a>
</li>

<li>The Stack and the Heap<br />
<a href="https://doc.rust-lang.org/book/the-stack-and-the-heap.html">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Why does this compile? Automatic dereferencing?<br />
<a href="https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183">https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183</a>
</li>

<li>Understanding Pointers, Ownership, and Lifetimes in Rust<br />
<a href="http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>

<li>Rust lang series episode #25 — pointers (#rust-series)<br />
<a href="https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series">https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>Destructuring and Pattern Matching<br />
<a href="https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/">https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Method Syntax<br />
<a href="https://doc.rust-lang.org/book/method-syntax.html">https://doc.rust-lang.org/book/method-syntax.html</a>
</li>

<li>Traits in Rust<br />
<a href="https://doc.rust-lang.org/book/traits.html">https://doc.rust-lang.org/book/traits.html</a>
</li>

<li>Functional Programming in Rust - Part 1 : Function Abstraction<br />
<a href="http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/">http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Ti?novsk?</a> &nbsp; 2017</small></p>
</body>
</html>

