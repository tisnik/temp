<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Datový typ Option v programovacím jazyku Rust</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Datový typ Option v programovacím jazyku Rust</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtrnácté části seriálu o programovacím jazyku Rust si popíšeme práci s&nbsp;datovým typem Option, který se v&nbsp;programech poměrně často používá, protože zjednodušuje práci s&nbsp;&bdquo;neexistujícími&ldquo; hodnotami, volitelnými parametry funkcí, volitelnými členy struktur atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Datový typ Option v&nbsp;programovacím jazyku Rust</a></p>
<p><a href="#k02">2. Základní použití &ndash; funkce vracející hodnotu typu Option</a></p>
<p><a href="#k03">3. Metoda <strong>Option.unwrap()</strong></a></p>
<p><a href="#k04">4. Metoda <strong>Option.is_none()</strong></a></p>
<p><a href="#k05">5. Metoda <strong>Option.is_some()</strong></a></p>
<p><a href="#k06">6. Idiomatický kód &ndash; použití pattern matchingu</a></p>
<p><a href="#k07">7. Použití řídicí struktury <strong>if let</strong></a></p>
<p><a href="#k08">8. Řídicí struktura <strong>if let</strong> ve výrazu</a></p>
<p><a href="#k09">9. Řídicí struktura <strong>while let</strong></a></p>
<p><a href="#k10">10. Řetězení operací &ndash; metoda <strong>Option.or()</strong></a></p>
<p><a href="#k11">11. Řetězení operací &ndash; metoda <strong>Option.and_then()</strong></a></p>
<p><a href="#k12">12. Metoda <strong>Option.unwrap_or()</strong></a></p>
<p><a href="#k13">13. Odkazy <strong>null</strong> v&nbsp;Rustu?</a></p>
<p><a href="#k14">14. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k15">15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Datový typ Option v&nbsp;programovacím jazyku Rust</h2>

<p>V&nbsp;programovacím jazyku Rust se poměrně často používá datový typ
<strong>Option</strong>, a to ve chvílích, kdy je zapotřebí reprezentovat
neznámou hodnotu, chybovou hodnotu (ovšem bez vyvolání výjimky), vytvořit
funkci s&nbsp;volitelnými parametry či vytvořit typově bezpečnou obdobu odkazu
typu <strong>null</strong>. Dnes si ukážeme některé možnosti, které tento
datový typ programátorům nabízí (podobný typ ovšem nalezneme i v&nbsp;mnoha
dalších programovacích jazycích).</p>

<p>Deklarace datového typu <strong>Option</strong> je ve skutečnosti velmi
přímočará:</p>

<pre>
enum Option&lt;T&gt; {
    None,
    Some(T),
}
</pre>

<p>Vidíme, že se jedná o výčtový typ s&nbsp;pouhými dvěma hodnotami
<strong>None</strong> a <strong>Some</strong>, přičemž <strong>Some</strong>
&bdquo;obaluje&ldquo; vlastní hodnotu typu <strong>T</strong>, se kterou chceme
pracovat.</p>

<p>Základní význam datového typu <strong>Option</strong> si můžeme ukázat na
zcela typickém příkladu, který je mimochodem v&nbsp;poněkud upravené podobě
použit i v&nbsp;dokumentaci programovacího jazyka Rust. V&nbsp;tomto příkladu
je definovaná funkce <strong>div</strong> akceptující dva celočíselné parametry
a vracející jejich podíl. Naivní implementace takové funkce by mohla vypadat
následovně:</p>

<pre>
fn div(x: i32, y: i32) -&gt; i32 {
    x/y
}
</pre>

<p>Problém spočívá v&nbsp;tom, že tato funkce není dobře definována pro hodnotu
y==0, což si lze snadno ověřit:</p>

<pre>
fn main() {
    println!("{}", div(2, 1));
    println!("{}", div(2, 0));
}
</pre>

<p>S&nbsp;běhovou chybou:</p>

<pre>
2
thread 'main' panicked at 'attempt to divide by zero', test.rs:2
note: Run with `RUST_BACKTRACE=1` for a backtrace.
</pre>

<p>Výše uvedený problém je možné řešit různými způsoby, například vrácením
nějaké &bdquo;speciální&ldquo; předem vybrané celočíselné hodnoty nebo
vyhozením výjimky. U speciální celočíselné hodnoty je však nutné dobře
zdokumentovat, jak ji použít a samozřejmě tuto hodnotu nějak zvolit (-1?,
MAX_INT?, MIN_INT?), popř.&nbsp;použít typ s&nbsp;větší šířkou (viz
<strong>getc()</strong> v&nbsp;céčku). Výsledkem bude program plný podmínek
testujících tuto speciální hodnotu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní použití &ndash; funkce vracející hodnotu typu Option</h2>

<p>Výhodnější je použít datový typ <strong>Option</strong>, neboť jeho použitím
čtenářům našeho zdrojového kódu jasně naznačíme, že funkce v&nbsp;některých
případech nemusí nic vracet (na tento datový typ se tedy můžeme dívat i jako na
určitou formu samodokumentujícího se kódu). Funkci upravíme tak, že nebude
vracet <strong>i32</strong> (celé číslo), ale
<strong>Option&lt;i32&gt;</strong>. V&nbsp;této struktuře může být buď ono celé
číslo zabaleno (zavoláním <strong>Some(...)</strong> nebo je možné vrátit
speciální hodnotu <strong>None</strong>:</p>

<pre>
fn div(x: i32, y: i32) -&gt; <strong>Option&lt;i32&gt;</strong> {
    if y != 0 {
        <strong>Some(x/y)</strong>
    }
    else {
        <strong>None</strong>
    }
}
</pre>

<p>Nejjednodušší způsob volání vypadá následovně (je nutné použít {:?}):</p>

<pre>
fn main() {
    let z1 = div(2, 1);
    println!("{:?}", z1);
&nbsp;
    let z2 = div(2, 0);
    println!("{:?}", z2);
}
</pre>

<p>S&nbsp;následujícím výsledkem:</p>

<pre>
Some(2)
None
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Metoda <strong>Option.unwrap()</strong></h2>

<p>V&nbsp;předchozím příkladu jsme si trošku zjednodušili práci, protože pro
přečtení celočíselné hodnoty zabalené do typu <strong>Option</strong> jsme
použili makro <strong>println!</strong>. Pokud však potřebujeme explicitně
přistoupit k&nbsp;hodnotě uvnitř <strong>Option</strong>, je možné použít
metodu <strong>Option.unwrap()</strong>, ovšem jen tehdy, pokud jsme si jisti,
že nepracujeme s&nbsp;<strong>None</strong> (v&nbsp;případě, že by se zavolalo
<strong>None.unwrap()</strong>, vyhodila by se výjimka, což si můžete snadno
odzkoušet. Druhý příklad již explicitně rozlišuje mezi <strong>None</strong> a
<strong>Some(i32)</strong>, i když způsobem, který se příliš nepoužívá:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    }
    else {
        None
    }
}
&nbsp;
fn div_and_print(x: i32, y :i32) {
    let result = div(x, y);
    println!("{:?}", result);
&nbsp;
    if <strong>result == None</strong> {
        println!("Divide by zero");
    }
    else {
        println!("{} / {} = {}", x, y, <strong>result.unwrap()</strong>);
    }
&nbsp;
    println!("");
}
&nbsp;
fn main() {
    div_and_print(2, 1);
    div_and_print(2, 0);
}
</pre>

<p>Povšimněte si, že zde již můžeme celočíselnou hodnotu typu
<strong>i32</strong> vytisknout přímo formátovacím řetězcem {}:</p>

<pre>
println!("{} / {} = {}", x, y, <strong>result.unwrap()</strong>);
</pre>

<p>Výsledek běhu programu:</p>

<pre>
Some(2)
2 / 1 = 2
&nbsp;
None
Divide by zero
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Metoda <strong>Option.is_none()</strong></h2>

<p>Namísto testu proměnné či parametru typu <strong>Option</strong> na hodnotu
<strong>None</strong> je možné použít přímo metodu
<strong>Option.is_none()</strong> vracející pravdivostní hodnotu
<strong>true</strong> ve chvíli, kdy je metoda skutečné volána
s&nbsp;<strong>None</strong>; v&nbsp;opačném případě se vrací pravdivostní
hodnota <strong>false</strong>. Příklad lze tedy nepatrně upravit takto:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    }
    else {
        None
    }
}
&nbsp;
fn div_and_print(x: i32, y :i32) {
    let result = div(x, y);
    println!("{:?}", result);
&nbsp;
    if <strong>result.is_none()</strong> {
        println!("Divide by zero");
    }
    else {
        println!("{} / {} = {}", x, y, result.unwrap());
    }
&nbsp;
    println!("");
}
&nbsp;
fn main() {
    div_and_print(2, 1);
    div_and_print(2, 0);
}
</pre>

<p>Poznámka: tento zápis je jen o jediný znak kratší, než přímé porovnání a
opět se nejedná o příliš idiomatický kód. Ten si představíme <a
href="#k06">později</a>.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Metoda <strong>Option.is_some()</strong></h2>

<p>Opakem metody <strong>Option.is_none()</strong> je podle očekávání metoda
<strong>Option.is_some()</strong>, vracející <strong>true</strong> ve chvíli,
kdy <strong>Option</strong> obaluje reálnou hodnotu a <strong>false</strong> ve
chvíli, kdy se metoda volá nad <strong>None</strong>. Podmínku tedy můžeme
velmi snadno otočit:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    }
    else {
        None
    }
}
&nbsp;
fn div_and_print(x: i32, y :i32) {
    let result = div(x, y);
    println!("{:?}", result);
&nbsp;
    if <strong>result.is_some()</strong> {
        println!("{} / {} = {}", x, y, result.unwrap());
    }
    else {
        println!("Divide by zero");
    }
&nbsp;
    println!("");
}
&nbsp;
fn main() {
    div_and_print(2, 1);
    div_and_print(2, 0);
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Idiomatický kód &ndash; použití pattern matchingu</h2>

<p>V&nbsp;předchozích kapitolách jsem se několikrát zmínil o tom, že program,
v&nbsp;němž se mezi <strong>Some(T)</strong> a <strong>None</strong>
rozhodujeme pomocí řídicí struktury typu <i>if-then-else</i>, není
v&nbsp;programovacím jazyku Rust považován za příliš idiomatický, a to i
z&nbsp;toho důvodu, že se k&nbsp;obalené hodnotě musí přistupovat pomocí metody
<strong>Option.unwrap()</strong>. Namísto toho se preferuje využití pattern
matchingu umožňujícímu dostat se k&nbsp;obalené hodnotě vlastně zadarmo.
Rozhodovací konstrukce může vypadat takto:</p>

<pre>
<strong>match</strong> proměnná_typu_Option {
    <strong>None      =&gt;</strong> println!("Divide by zero"),
    <strong>Some(val) =&gt;</strong> println!("{} / {} = {}", x, y, <strong>val</strong>),
}
</pre>

<p>Povšimněte si, že ve druhé větvi můžeme přímo pracovat s&nbsp;hodnotou
<strong>val</strong>, aniž by se explicitně volala metoda
<strong>Option.unwrap</strong>.</p>

<p>Použití v&nbsp;našem příkladu s&nbsp;dělením celých čísel může vypadat
následovně:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    }
    else {
        None
    }
}
&nbsp;
fn div_and_print(x: i32, y :i32) {
    let result = div(x, y);
    println!("{:?}", result);
&nbsp;
    <strong>match</strong> result {
        <strong>None      =&gt;</strong> println!("Divide by zero"),
        <strong>Some(val) =&gt;</strong> println!("{} / {} = {}", x, y, <strong>val</strong>),
    }
&nbsp;
    println!("");
}
&nbsp;
fn main() {
    div_and_print(2, 1);
    div_and_print(2, 0);
}
</pre>

<p>Výsledek běhu programu:</p>

<pre>
Some(2)
2 / 1 = 2
&nbsp;
None
Divide by zero
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Použití řídicí struktury <strong>if let</strong></h2>

<p>Poměrně často se můžeme setkat i s&nbsp;řídicí strukturou <strong>if
let</strong>, která vlastně kombinuje podmínku s&nbsp;přiřazením, ovšem pouze
při splnění této podmínky. Tuto strukturu lze doplnit i o blok
<strong>else</strong>. Jedná se o speciální typ pattern matchingu, jenž lze
v&nbsp;našem příkladu uplatnit následovně:</p>

<pre>
<strong>if let</strong> Some(val) = result {
    println!("{} / {} = {}", x, y, val);
}
<strong>else</strong> {
    println!("Divide by zero");
}
</pre>

<p>Pokud je podmínka splněna, je v&nbsp;prvním bloku možné používat hodnotu
<strong>val</strong>, která byla původně obalena v&nbsp;proměnné
<strong>result</strong> typu <strong>Option</strong>.</p>

<p>Celý příklad můžeme upravit následujícím způsobem:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    }
    else {
        None
    }
}
&nbsp;
fn div_and_print(x: i32, y :i32) {
    let result = div(x, y);
    println!("{:?}", result);
&nbsp;
    if let Some(val) = result {
        println!("{} / {} = {}", x, y, val);
    }
    else {
        println!("Divide by zero");
    }
&nbsp;
    println!("");
}
&nbsp;
fn main() {
    div_and_print(2, 1);
    div_and_print(2, 0);
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Řídicí struktura <strong>if let</strong> ve výrazu</h2>

<p>V&nbsp;programovacím jazyku Rust se ve skutečnosti může většina řídicích
struktur použít i ve funkci výrazu, tj.&nbsp;ve chvíli, kdy očekáváme výslednou
hodnotu. Podívejme se na poněkud upravený příklad, v&nbsp;němž funkce
<strong>div_message()</strong> vydělí dvě čísla a následně vrátí řetězec
(konkrétně typu <strong>String</strong>) obsahující buď informaci o obou
vstupních operandech a výsledku podílu nebo hlášení o dělení nulou. Povšimněte
si, že <strong>if let</strong> je skutečně výrazem &ndash; každá větev obsahuje
jediný výraz (bez středníku na konci), jehož výsledná hodnota se stane
návratovou hodnotou celé funkce:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    }
    else {
        None
    }
}
&nbsp;
fn div_message(x: i32, y :i32) -&gt; String {
    let result = div(x, y);
&nbsp;
    if let Some(val) = result {
        format!("{} / {} = {}", x, y, val)
    }
    else {
        String::from("Divide by zero")
    }
}
&nbsp;
fn main() {
    println!("{}", div_message(2, 1));
    println!("{}", div_message(2, 0));
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Řídicí struktura <strong>while let</strong></h2>

<p>Podobným způsobem je možné použít strukturu <strong>while let</strong>,
kterou lze implementovat programovou smyčku, jež se zastaví ve chvíli, když se
detekuje hodnota <strong>None</strong>. Poněkud umělý příklad by mohl vypadat
takto:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    }
    else {
        None
    }
}
&nbsp;
fn main() {
    let array = [div(2,1), div(3,2), div(1,0), div(1,1)];
    let mut i = 0;
    while let Some(value) = array[i] {
        println!("{}", value);
        i = i + 1;
    }
}
</pre>

<p>Častěji se setkáme s&nbsp;tímto příkladem, protože metoda
<strong>Vec.pop()</strong> vrací (samozřejmě nikoli náhodou) právě typ
<strong>Option</strong> s&nbsp;hodnotou <strong>None</strong> ve chvíli, kdy je
již vektor prázdný:</p>

<pre>
fn main() {
    let mut v = vec![1, 2, 3, 4, 5];
    while let Some(x) = v.pop() {
        println!("{}", x);
    }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Řetězení operací &ndash; metoda <strong>Option.or()</strong></h2>

<p>V&nbsp;některých případech je výhodné namísto neustálého testování, zda
nějaká proměnná či parametr <strong>Option</strong> náhodou neobsahuje hodnotu
<strong>None</strong>, provést tento test implicitně s&nbsp;tím, že se
v&nbsp;případě neúspěchu vrátí jakákoli jiná programátorem zvolená hodnota.
Přesně k&nbsp;tomuto účelu slouží metoda
<strong>Option.or(zvolená_hodnota)</strong>, která vrací buď původní
proměnnou/parametr nebo zvolenou hodnotu ve chvíli, kdy je původní
proměnná/parametr rovna <strong>None</strong>. Nesmíme ovšem zapomenout na to,
aby nová hodnota byla správného typu, což je kontrolováno již při překladu.</p>

<p>Jeden z&nbsp;příkladů použití (ne příliš dobrý!) zajišťuje, že nezávisle na
tom, jak dopadlo dělení, bude možné vypočítat druhou mocninu výsledku dělení
(s&nbsp;tím, že při dělení nulou bude i druhá mocnina nulová):</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    }
    else {
        None
    }
}
&nbsp;
fn sqr(val: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; {
    let x = val.unwrap();
    Some(x*x)
}
&nbsp;
fn div_square(x: i32, y :i32) -&gt; String {
    let result = sqr(div(x, y).or(Some(0)));

    if let Some(val) = result {
        format!("({} / {}) ^ 2 = {}", x, y, val)
    }
    else {
        String::from("Divide by zero")
    }
}
&nbsp;
fn main() {
    println!("{}", div_square(2, 1));
    println!("{}", div_square(2, 0));
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Řetězení operací &ndash; metoda <strong>Option.and_then()</strong></h2>

<p>Mnohem elegantnější je použití metody <strong>Option.and_then()</strong>,
které se předá nějaká funkce či anonymní funkce. Tato funkce se zavolá pouze ve
chvíli, kdy platí <strong>hodnota != None</strong>. Pokud je původní hodnota
naopak rovna <strong>None</strong>, funkce se nezavolá a pouze se vrátí
<strong>None</strong>. Díky tomu, že volaná funkce vždy musí vracet typ
<strong>Option</strong>, lze metody <strong>and_then()</strong> bez problémů
řetězit stylem:</p>

<pre>
proměnná.and_then(fce1).and_then(fce2).and_then(fce3)
</pre>

<p>Podívejme se na příklad použití &ndash; počítá se zde druhá mocnina podílu
dvou celočíselných hodnot, ovšem ve chvíli, kdy dojde k&nbsp;dělení nulou,
druhá mocnina se vůbec nepočítá, což se posléze otestuje v&nbsp;podmínce
(pattern match):</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    }
    else {
        None
    }
}
&nbsp;
fn sqr(x: i32) -&gt; Option&lt;i32&gt; {
    Some(x*x)
}
&nbsp;
fn div_square(x: i32, y :i32) -&gt; String {
    let result = div(x, y).and_then(sqr);
&nbsp;
    if let Some(val) = result {
        format!("({} / {}) ^ 2 = {}", x, y, val)
    }
    else {
        String::from("Divide by zero")
    }
}
&nbsp;
fn main() {
    println!("{}", div_square(2, 1));
    println!("{}", div_square(2, 0));
}
</pre>

<p>Tento program po svém spuštění vypíše následující dva řádky textu:</p>

<pre>
(2 / 1) ^ 2 = 4
Divide by zero
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Metoda <strong>Option.unwrap_or()</strong></h2>

<p>Datový typ <strong>Option</strong> nám nabízí i další zajímavé a někdy i
užitečné metody, například metodu <strong>Option.unwrap_or()</strong>. Jedná se
vlastně o kombinaci metody <strong>Option.or()</strong> (vrácení zvolené, ovšem
obalené hodnoty) a metody <strong>Option.unwrap()</strong>. To nám může ušetřit
volání dvou metod &ndash; <strong>Some(...)</strong> a <strong>unwrap</strong>,
ostatně podívejme se opět na příklad:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    }
    else {
        None
    }
}
&nbsp;
fn div_print(x: i32, y :i32) -&gt; String {
    let result = div(x, y).<strong>unwrap_or(0)</strong>;

    format!("{} / {} = {}", x, y, result)
}
&nbsp;
fn main() {
    println!("{}", div_print(2, 1));
    println!("{}", div_print(2, 0));
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Odkazy <strong>null</strong> v&nbsp;Rustu?</h2>

<p>Programovací jazyk Rust sice umožňuje vytvářet odkazy na objekty umístěné na
haldě, ovšem tyto odkazy nikdy nemohou obsahovat hodnotu <strong>null</strong>,
<strong>nil</strong> atd. známou z&nbsp;jiných programovacích jazyků. To
většinou nepředstavuje žádný větší problém (právě naopak to mnoho problémů
řeší!), ovšem ve chvíli, kdy nějaká funkce za určitých podmínek nemůže vrátit
odkaz, je zapotřebí mít možnost oznámit volajícímu kódu &bdquo;teď namísto
odkazu nic nevracím&ldquo;. Řešením je samozřejmě opět použití datového typu
<strong>Option</strong>, konkrétně pak:</p>

<pre>
Option&lt;Box&lt;T&gt;&gt;
Option&lt;Rc&lt;T&gt;&gt;
Option&lt;Arc&lt;T&gt;&gt;
</pre>

<p>Potom můžeme psát:</p>

<pre>
let x: Option&lt;Box&lt;i32&gt;&gt; = None;
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly, podobně jako ve všech
předchozích částech tohoto seriálu, uloženy do Git repositáře dostupného na
adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý repositář:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>201_div_option.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/201_div_option.rs">https://github.com/tisnik/presentations/blob/master/rust/201_div_option.rs</a></td></tr>
<tr><td>202_option_unwrap.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/202_option_unwrap.rs">https://github.com/tisnik/presentations/blob/master/rust/202_option_unwrap.rs</a></td></tr>
<tr><td>203_option_is_none.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/203_option_is_none.rs">https://github.com/tisnik/presentations/blob/master/rust/203_option_is_none.rs</a></td></tr>
<tr><td>204_option_is_some.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/204_option_is_some.rs">https://github.com/tisnik/presentations/blob/master/rust/204_option_is_some.rs</a></td></tr>
<tr><td>205_option_matching.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/205_option_matching.rs">https://github.com/tisnik/presentations/blob/master/rust/205_option_matching.rs</a></td></tr>
<tr><td>206_option_if_let.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/206_option_if_let.rs">https://github.com/tisnik/presentations/blob/master/rust/206_option_if_let.rs</a></td></tr>
<tr><td>207_option_if_let_expr.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/207_option_if_let_expr.rs">https://github.com/tisnik/presentations/blob/master/rust/207_option_if_let_expr.rs</a></td></tr>
<tr><td>208_option_or.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/208_option_or.rs">https://github.com/tisnik/presentations/blob/master/rust/208_option_or.rs</a></td></tr>
<tr><td>209_option_and_then.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/209_option_and_then.rs">https://github.com/tisnik/presentations/blob/master/rust/209_option_and_then.rs</a></td></tr>
<tr><td>210_option_unwrap_or.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/210_option_unwrap_or.rs">https://github.com/tisnik/presentations/blob/master/rust/210_option_unwrap_or.rs</a></td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>Rust stdlib: Option<br />
<a href="https://doc.rust-lang.org/std/option/enum.Option.html">https://doc.rust-lang.org/std/option/enum.Option.html</a>
</li>

<li>Module std::option<br />
<a href="https://doc.rust-lang.org/std/option/index.html">https://doc.rust-lang.org/std/option/index.html</a>
</li>

<li>Rust by example: option<br />
<a href="http://rustbyexample.com/std/option.html">http://rustbyexample.com/std/option.html</a>
</li>

<li>Rust by example: if-let<br />
<a href="http://rustbyexample.com/flow_control/if_let.html">http://rustbyexample.com/flow_control/if_let.html</a>
</li>

<li>Rust by example: while let<br />
<a href="http://rustbyexample.com/flow_control/while_let.html">http://rustbyexample.com/flow_control/while_let.html</a>
</li>

<li>Rust by example: Option&lt;i32&gt;<br />
<a href="http://rustbyexample.com/std/option.html">http://rustbyexample.com/std/option.html</a>
</li>

<li>An Overview of Macros in Rust<br />
<a href="http://words.steveklabnik.com/an-overview-of-macros-in-rust">http://words.steveklabnik.com/an-overview-of-macros-in-rust</a>
</li>

<li>A Practical Intro to Macros in Rust 1.0<br />
<a href="https://danielkeep.github.io/practical-intro-to-macros.html">https://danielkeep.github.io/practical-intro-to-macros.html</a>
</li>

<li>The Rust Programming Language: macros<br />
<a href="https://doc.rust-lang.org/beta/book/macros.html">https://doc.rust-lang.org/beta/book/macros.html</a>
</li>

<li>Rust by example: 15 macro_rules!<br />
<a href="http://rustbyexample.com/macros.html">http://rustbyexample.com/macros.html</a>
</li>

<li>Module std::vec<br />
<a href="https://doc.rust-lang.org/nightly/std/vec/index.html">https://doc.rust-lang.org/nightly/std/vec/index.html</a>
</li>

<li>Primitive Type isize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">https://doc.rust-lang.org/nightly/std/primitive.isize.html</a>
</li>

<li>Primitive Type usize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">https://doc.rust-lang.org/nightly/std/primitive.usize.html</a>
</li>

<li>Primitive Type array<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.array.html">https://doc.rust-lang.org/nightly/std/primitive.array.html</a>
</li>

<li>Module std::slice<br />
<a href="https://doc.rust-lang.org/nightly/std/slice/">https://doc.rust-lang.org/nightly/std/slice/</a>
</li>

<li>Rust by Example: 2.3 Arrays and Slices<br />
<a href="http://rustbyexample.com/primitives/array.html">http://rustbyexample.com/primitives/array.html</a>
</li>

<li>What is the difference between Slice and Array (stackoverflow)<br />
<a href="http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array">http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array</a>
</li>

<li>Learning Rust With Entirely Too Many Linked Lists<br />
<a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/">http://cglab.ca/~abeinges/blah/too-many-lists/book/</a>
</li>

<li>Testcase: linked list<br />
<a href="http://rustbyexample.com/custom_types/enum/testcase_linked_list.html">http://rustbyexample.com/custom_types/enum/testcase_linked_list.html</a>
</li>

<li>Operators and Overloading<br />
<a href="https://doc.rust-lang.org/book/operators-and-overloading.html">https://doc.rust-lang.org/book/operators-and-overloading.html</a>
</li>

<li>Module std::ops<br />
<a href="https://doc.rust-lang.org/std/ops/index.html">https://doc.rust-lang.org/std/ops/index.html</a>
</li>

<li>Module std::cmp<br />
<a href="https://doc.rust-lang.org/std/cmp/index.html">https://doc.rust-lang.org/std/cmp/index.html</a>
</li>

<li>Trait std::ops::Add<br />
<a href="https://doc.rust-lang.org/stable/std/ops/trait.Add.html">https://doc.rust-lang.org/stable/std/ops/trait.Add.html</a>
</li>

<li>Trait std::ops::AddAssign<br />
<a href="https://doc.rust-lang.org/std/ops/trait.AddAssign.html">https://doc.rust-lang.org/std/ops/trait.AddAssign.html</a>
</li>

<li>Trait std::ops::Drop<br />
<a href="https://doc.rust-lang.org/std/ops/trait.Drop.html">https://doc.rust-lang.org/std/ops/trait.Drop.html</a>
</li>

<li>Trait std::cmp::Eq<br />
<a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">https://doc.rust-lang.org/std/cmp/trait.Eq.html</a>
</li>

<li>Struct std::boxed::Box<br />
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">https://doc.rust-lang.org/std/boxed/struct.Box.html</a>
</li>

<li>Explore the ownership system in Rust<br />
<a href="https://nercury.github.io/rust/guide/2015/01/19/ownership.html">https://nercury.github.io/rust/guide/2015/01/19/ownership.html</a>
</li>

<li>Rust's ownership and move semantic<br/>
<a href="http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics">http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics</a>
</li>

<li>Trait std::marker::Copy<br/>
<a href="https://doc.rust-lang.org/stable/std/marker/trait.Copy.html">https://doc.rust-lang.org/stable/std/marker/trait.Copy.html</a>
</li>

<li>Trait std::clone::Clone<br />
<a href="https://doc.rust-lang.org/stable/std/clone/trait.Clone.html">https://doc.rust-lang.org/stable/std/clone/trait.Clone.html</a>
</li>

<li>The Stack and the Heap<br />
<a href="https://doc.rust-lang.org/book/the-stack-and-the-heap.html">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Why does this compile? Automatic dereferencing?<br />
<a href="https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183">https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183</a>
</li>

<li>Understanding Pointers, Ownership, and Lifetimes in Rust<br />
<a href="http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>

<li>Rust lang series episode #25 — pointers (#rust-series)<br />
<a href="https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series">https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>Destructuring and Pattern Matching<br />
<a href="https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/">https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Method Syntax<br />
<a href="https://doc.rust-lang.org/book/method-syntax.html">https://doc.rust-lang.org/book/method-syntax.html</a>
</li>

<li>Traits in Rust<br />
<a href="https://doc.rust-lang.org/book/traits.html">https://doc.rust-lang.org/book/traits.html</a>
</li>

<li>Functional Programming in Rust - Part 1 : Function Abstraction<br />
<a href="http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/">http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

