<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Rust: vlákna a sdílení objektů mezi nimi</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Rust: vlákna a sdílení objektů mezi nimi</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V deváté části seriálu o programovacím jazyku Rust se budeme zabývat problematikou práce s&nbsp;vlákny (threads), s&nbsp;čímž do úzké míry souvisí i sdílení objektů mezi vlákny. I v této oblasti programátorům pomáhá k&nbsp;tvorbě korektních aplikací typový systém Rustu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Rust: vlákna a sdílení objektů mezi nimi</a></p>
<p><a href="#k02">2. Metoda <strong>thread::sleep</strong> a výpočet časového intervalu pro tuto metodu</a></p>
<p><a href="#k03">3. Vytvoření a spuštění nového vlákna</a></p>
<p><a href="#k04">4. Použití anonymní funkce představující tělo nového vlákna</a></p>
<p><a href="#k05">5. Uzávěry a problematika předání vlastnictví objektů</a></p>
<p><a href="#k06">6. Jak tedy do vláken předávat parametry?</a></p>
<p><a href="#k07">7. Korektní implementace uzávěru představujícího tělo nového vlákna</a></p>
<p><a href="#k08">8. Čekání na dokončení běhu vlákna</a></p>
<p><a href="#k09">9. Alokace objektů na haldě s&nbsp;atomickým počítáním referencí (thread-safe)</a></p>
<p><a href="#k10">10. Vytvoření několika threadů s&nbsp;referencemi na společný objekt</a></p>
<p><a href="#k11">11. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Rust: vlákna a sdílení objektů mezi nimi</h2>

<p>V&nbsp;dnešní části <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">seriálu o
programovacím jazyku Rust</a> se seznámíme se způsobem vytváření nových vláken
(<i>threads</i>), čekání na dokončení běhu vláken (tato operace se někdy nazývá
<i>join</i>) a taktéž s&nbsp;tím, jak lze mezi jednotlivými vlákny sdílet
objekty uložené na haldě (<i>heapu</i>). Uvidíme, že i v&nbsp;této oblasti se
pro zajištění korektnosti programu ve velké míře uplatňuje typový systém
Rustu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Metoda <strong>thread::sleep</strong> a výpočet časového intervalu pro tuto metodu</h2>

<p>Pro zahřátí si ukažme velmi jednoduchý příklad, v&nbsp;němž se sice žádná
vlákna nevytváří, ovšem modul <strong>std::thread</strong> je zde použit.
V&nbsp;tomto příkladu se desetkrát vypíše hodnota počitadla, přičemž mezi
každým výpisem je běh programu (resp.&nbsp;přesněji řečeno hlavního vlákna
programu) pozastaven na dobu přibližně jedné sekundy. Pozastavení zajišťuje
funkce <strong>thread::sleep()</strong>, které se předává objekt typu
<strong>Duration</strong> (ten obsahuje specifikaci časového intervalu
v&nbsp;sekundách a nanosekundách). Pro převod mezi milisekundami a typem
<strong>Duration</strong> se používá funkce
<strong>time::Duration::from_millis()</strong>. Důležité je, že tato funkce je
nezávislá na typu operačního systému (ovšem při převodu se může provést
zaokrouhlení časového intervalu podle možností konkrétního jádra):</p>

<pre>
use std::thread;
use std::time;
&nbsp;
fn delay(ms : u64) {
    let amount = time::Duration::from_millis(ms);
    thread::sleep(amount);
}
&nbsp;
fn main() {
    for i in 1..10 {
        println!("counting: {}", i);
        delay(1000);
    }
}
</pre>

<p>Příklad spuštění tohoto programu:</p>

<pre>
counting: 1
counting: 2
counting: 3
counting: 4
counting: 5
counting: 6
counting: 7
counting: 8
counting: 9
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vytvoření a spuštění nového vlákna</h2>

<p>Vytvoření a spuštění nového vlákna je v&nbsp;programovacím jazyku Rust velmi
jednoduché. Postačuje pouze použít funkci <strong>thread::spawn</strong>, které
se předá anonymní funkce, jenž tvoří tělo nového vlákna. Mezi dvojici znaků ||
se vkládají jména a popř.&nbsp;i typy parametrů (viz též <a
href="https://www.root.cz/clanky/rust-funkce-lambda-vyrazy-a-rozhodovaci-konstrukce-match/#k06">https://www.root.cz/clanky/rust-funkce-lambda-vyrazy-a-rozhodovaci-konstrukce-match/#k06</a>):</p>

<pre>
thread::spawn(|| print_hello());
</pre>

<p>Ukažme si příklad, který po svém spuštění vytvoří deset vláken, z&nbsp;nichž
každé vypíše na standardní výstup stejnou zprávu:</p>

<pre>
use std::thread;
&nbsp;
fn print_hello() {
    println!("Hello from a thread...");
}
&nbsp;
fn main() {
    println!("Starting");
    for i in 1..10 {
        thread::spawn(|| print_hello());
    }
    println!("Stopping");
}
</pre>

<p>Konkrétní chování programu závisí na tom, kolik vláken stihne vypsat zprávu
před ukončením hlavního vlákna, v&nbsp;němž je spuštěno tělo funkce
<strong>main</strong>:</p>

<pre>
Starting
Hello from a thread...
Hello from a thread...
Hello from a thread...
Hello from a thread...
Hello from a thread...
Stopping
</pre>

<p>Program si můžeme nepatrně upravit, aby bylo patrné, jak se prolíná běh
hlavního vlákna s&nbsp;ostatními vlákny:</p>

<pre>
use std::thread;
&nbsp;
fn print_hello() {
    println!("Hello from a thread...");
}
&nbsp;
fn main() {
    println!("Starting");
    for i in 1..10 {
        println!("{}", i);
        thread::spawn(|| print_hello());
    }
    println!("Stopping");
}
</pre>

<p>Jeden z&nbsp;příkladů spuštění programu (po každém spuštění se může pořadí
zpráv nepatrně lišit):</p>

<pre>
1
2
3
4
Hello from a thread...
5
Hello from a thread...
Hello from a thread...
6
Hello from a thread...
Hello from a thread...
7
8
9
Stopping
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Použití anonymní funkce představující tělo nového vlákna</h2>

<p>Vzhledem k&nbsp;tomu, že se do funkce <strong>thread::spawn()</strong>
předává kód, který se spustí v&nbsp;nově vytvořeném vlákně, můžeme na tomto
místě použít i anonymní funkci, s&nbsp;čímž se v&nbsp;praxi setkáme poměrně
často. Konkrétně to znamená, že namísto:</p>

<pre>
thread::spawn(|| print_hello());
</pre>

<p>je možné psát:</p>

<pre>
thread::spawn(|| {println!("Hello from a thread...");});
</pre>

<p>Celý program, který po svém spuštění vytvoří deset vláken, může být zkrácen
takto:</p>

<pre>
use std::thread;
&nbsp;
fn main() {
    println!("Starting");
    for i in 1..10 {
        thread::spawn(|| {println!("Hello from a thread...");});
    }
    println!("Stopping");
}
</pre>

<p>V&nbsp;kódu nikde nečekáme na ukončení vláken, což znamená, že jedno
spuštění programu může dopadnout dobře:</p>

<pre>
Starting
Hello from a thread...
Hello from a thread...
Hello from a thread...
Hello from a thread...
Hello from a thread...
Stopping
Hello from a thread...
Hello from a thread...
Hello from a thread...
</pre>

<p>Zatímco při dalším spuštění dojde k&nbsp;běhové chybě, protože se nějaké
vlákno bude snažit zapisovat do standardního výstupu, který je však již
uzavřen:</p>

<pre>
Starting
Hello from a thread...
Hello from a thread...
Hello from a thread...
Hello from a thread...
Hello from a thread...
Stopping
Hello from a thread...
Hello from a thread...
Hello from a thread...
thread '&lt;unnamed&gt;' panicked at 'cannot access stdout during shutdown', ../src/libcore/option.rs:700
note: Run with `RUST_BACKTRACE=1` for a backtrace.
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Uzávěry a problematika předání vlastnictví objektů</h2>

<p>Při vytvoření a spuštění nového vlákna nemusí být tělo vlákna tvořeno
&bdquo;pouhou&ldquo; funkcí, ale může se jednat o <i>uzávěr</i>
(<i>closure</i>). Uzávěry, s&nbsp;nimiž jsme se ve stručnosti seznámili ve
třetí části tohoto článku, jsou funkce (typicky anonymní), které na sebe mají
navázánu alespoň jednu tzv.&nbsp;volnou proměnnou. Ukažme si velmi jednoduchý
příklad použití. Budeme potřebovat, aby se do každého vlákna předalo
identifikační číslo vlákna, protože v&nbsp;těle vlákna budeme chtít vytisknout
jeho číslo:</p>

<pre>
{println!("Hello from a thread #{}", i);}
</pre>

<p>Intuitivně by se implementace pro deset vláken mohla napsat následovně:</p>

<pre>
use std::thread;
&nbsp;
fn main() {
    println!("Starting");
    for i in 1..10 {
        <strong>thread::spawn(|| {println!("Hello from a thread #{}", i);});</strong>
    }
    println!("Stopping");
}
</pre>

<p>Poznámka: znaky || již známe &ndash; lze do nich zapsat případné parametry
předávané do uzávěru, což ovšem v&nbsp;případě vláken nemá význam.</p>

<p>Ve skutečnosti ovšem toto řešení není korektní, protože program nebude možné
přeložit. Při pokusu o překlad se vypíše toto chybové hlášení:</p>

<pre>
error[E0373]: closure may outlive the current function, but it borrows `i`, which is owned by the current function
 --&gt; 112_thread_clojure_error.rs:6:23
  |
6 |         thread::spawn(|| {println!("Hello from a thread #{}", i);});
  |                       ^^                                      - `i` is borrowed here
  |                       |
  |                       may outlive borrowed value `i`
  |
help: to force the closure to take ownership of `i` (and any other referenced variables), use the `move` keyword, as shown:
  |         thread::spawn(move || {println!("Hello from a thread #{}", i);});
&nbsp;
error: aborting due to previous error
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Jak tedy do vláken předávat parametry?</h2>

<p>O co se jedná? Uzávěry skutečně mohou přistupovat k&nbsp;původně volným
proměnným, které jsou na ně navázány (tj.&nbsp;v&nbsp;našem případě konkrétně
k&nbsp;proměnné <strong>i</strong>), což většinou nezpůsobuje žádný problém. I
proto uzávěry přistupují k&nbsp;proměnným přes reference, tj.&nbsp;v&nbsp;těle
uzávěru vlastně máme k&nbsp;dispozici <strong>&amp;i</strong> a ne
<strong>i</strong> (toto je implementační vlastnost, se kterou se setkáme i
v&nbsp;mnoha dalších jazycích, i když většinou taktéž skrytě).</p>

<p>Právě zde ovšem leží jádro problému &ndash; ve chvíli, kdy je tělo uzávěru
spuštěno v&nbsp;jiném vlákně, může dojít k&nbsp;tomu, že oblast platnosti
proměnné <strong>i</strong> skončí dříve, než běh vlákna &ndash; jinými slovy
smyčka <strong>for i in 1..10</strong> úspěšně nastartuje všechna vlákna a
přejde k&nbsp;příkazu <strong>println!{"Stopping"};</strong>, zatímco vlákno
může stále běžet. To by vedlo ke vzniku takzvaného <i>dangling pointeru</i>
nebo <i>wild pointeru</i>, protože z&nbsp;vlákna by bylo možné přes referenci
na <strong>i</strong> přistupovat do paměti, která již původnímu
<strong>i</strong> nepatří (zde se sice bavíme o proměnné <strong>i</strong>,
ale vždy máme na mysli objekt, který je na <strong>i</strong> navázán).</p>

<p>Programovací jazyk Rust tuto skutečnost, která může vést k&nbsp;velmi špatně
detekovatelným chybám, které se dokonce ani nemusí projevit při testování,
kontroluje a proto vypsal zmíněné chybové hlášení.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Korektní implementace uzávěru představujícího tělo nového vlákna</h2>

<p>Korektní implementace uzávěru (resp.&nbsp;vlákna, kterému potřebujeme předat
parametry) musí být nepatrně změněna z&nbsp;:</p>

<pre>
thread::spawn(|| {println!("Hello from a thread #{}", i);});
</pre>

<p>na:</p>

<pre>
thread::spawn(<strong>move</strong> || {println!("Hello from a thread #{}", i);});
</pre>

<p>Modifikátorem <strong>move</strong> umístěným před |názvy_parametrů|
specifikujeme, že uzávěr nezíská pouze referenci na navázané proměnné, ale
přímo jejich vlastnictví (interně se pro uzávěr vytvoří vlastní rámec na
zásobníku). Teoreticky by tedy použití tohoto modifikátoru mělo vést
k&nbsp;chybě překladu, protože proměnná <strong>i</strong> je použita jako
počitadlo smyčky. Jenže zde se navíc projeví další vlastnost &ndash;
celočíselné datové typy (a nejenom ony) implementují trait
<strong>Copy</strong>, takže uzávěr sice skutečně získá vlastnictví, ovšem
vlastnictví kopie původní hodnoty. A to je přesně to chování, kterého
potřebujeme dosáhnout:</p>

<pre>
use std::thread;
&nbsp;
fn main() {
    println!("Starting");
    for i in 1..10 {
        thread::spawn(<strong>move</strong> || {println!("Hello from a thread #{}", i);});
    }
    println!("Stopping");
}
</pre>

<p>Poznámka: zde bych chtěl znovu upozornit na to, jak návrh typového systému
Rustu ovlivňuje i další vlastnosti tohoto jazyka. Díky typovému systému,
metodám pro předávání vlastnictví objektů a taktéž traitu <strong>Copy</strong>
nám Rust &bdquo;nutí&ldquo; korektní implementaci vláken, a to bez toho, aby
vznikaly problémy při přístupu ke sdíleným prostředkům. Pokud je totiž
zapotřebí skutečně sdílet společné objekty, jsme (většinou) donuceni využít
dále popsaný <strong>Arc</strong>.</p>

<p>Spuštění může vypadat například takto (ovšem chování se samozřejmě bude
odlišovat podle toho, jak přesně scheduler přepíná mezi vlákny):</p>

<pre>
Starting
Hello from a thread #3
Hello from a thread #2
Hello from a thread #1
Hello from a thread #4
Hello from a thread #6
Hello from a thread #7
Hello from a thread #5
Stopping
Hello from a thread #9
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Čekání na dokončení běhu vlákna</h2>

<p>Předchozí demonstrační příklady ve skutečnosti nebyly napsány příliš
korektně, protože po určitém počtu pokusů o spuštění dojde k&nbsp;běhové chybě
&ndash; nějaké vlákno se začne pokoušet o zápis na standardní výstup
v&nbsp;době, kdy už je tento výstup zavřený z&nbsp;hlavního vlákna, v&nbsp;němž
je spuštěna funkce <strong>main</strong>. Ovšem i při běžném programování se
setkáme se situacemi, kdy potřebujeme počkat na ukončení běhu jiného vlákna.
K&nbsp;docílení tohoto stavu lze využít hned několik technik, ovšem
nejjednodušší je zavolat metodu <strong>join()</strong> na objekt vrácený
funkcí <strong>thread::spawn()</strong>. Prozatím jsme tento objekt nijak
nevyužívali (a tudíž ani neukládali do proměnné), ale samozřejmě je to možné.
Typ tohoto objektu je <strong>std::thread::JoinHandle</strong>. Kód, který
vytvoří nové vlákno a ihned poté počká ne jeho dokončení, bude vypadat
následovně:</p>

<pre>
use std::thread;
&nbsp;
fn main() {
    println!("Starting");
    for i in 1..10 {
        let thr = thread::spawn(move || {println!("Hello from a thread #{}", i);});
        <strong>thr.join();</strong>
    }
    println!("Stopping");
}
</pre>

<p>Typ proměnné <strong>thr</strong> je Rustem odvozen automaticky, ale lze ho
samozřejmě napsat i explicitně. Nesmíme zapomenout na to, že se jedná o
generický typ (podle &bdquo;typu&ldquo; uzávěru), takže se používá zápis
Typ&lt;_&gt;:</p>

<pre>
use std::thread;
&nbsp;
fn main() {
    println!("Starting");
    for i in 1..10 {
        let thr : thread::JoinHandle&lt;_&gt; = thread::spawn(move || {println!("Hello from a thread #{}", i);});
        <strong>thr.join();</strong>
    }
    println!("Stopping");
}
</pre>

<p>Po spuštění zjistíme, že díky čekání na dokončení vlákna jsou jednotlivá
vlákna spouštěna sériově a nikoli paralelně:</p>

<pre>
Starting
Hello from a thread #1
Hello from a thread #2
Hello from a thread #3
Hello from a thread #4
Hello from a thread #5
Hello from a thread #6
Hello from a thread #7
Hello from a thread #8
Hello from a thread #9
Stopping
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Alokace objektů na haldě s&nbsp;atomickým počítáním referencí (thread-safe)</h2>

<p>S&nbsp;problematikou vláken velmi úzce souvisí i způsob vytváření objektů na
haldě se sdílením těchto objektů (resp.&nbsp;referencí na tyto objekty) mezi
více vlákny. <a
href="https://www.root.cz/clanky/sprava-pameti-v-programovacim-jazyku-rust-s-pocitanim-referenci/">V&nbsp;předchozím
článku</a> jsme se seznámili s&nbsp;počítáním referencí realizovaných přes
objekt typu <strong>Rc</strong>. Připomeňme si, že je možné vytvořit objekt na
haldě, &bdquo;zabalit&ldquo; ho do <strong>Rc</strong> a posléze na tento
objekt vytvořit libovolné množství referencí přes funkci
<strong>Rc::clone()</strong>. Díky zabalení objektu do <strong>Rc</strong> je
možné počítat reference na objekt na haldě s&nbsp;tím, že pokud počitadlo
referencí klesne na nulu, je možné objekt automaticky dealokovat (a předtím
zavolat jeho destruktor). To je sice pěkné a funkční řešení, jenže jak se bude
chovat počitadlo referencí v&nbsp;případě, že objekt bude sdílen mezi větším
množstvím vláken?</p>

<p>Odpověď na tuto otázku je jednoznačná &ndash; funkčnost není zaručena a je
nutné využít jiný mechanismus. Tento mechanismus spočívá v&nbsp;použití
datového typu <strong>Arc&lt;T&gt;</strong> namísto nám již známého typu
<strong>Rc&lt;T&gt;</strong>. Název <strong>Arc</strong> nemá nic společného
s&nbsp;obloukem, protože se jedná o zkratku názvu &bdquo;Atomic Reference
Counting&ldquo;. Slovo &bdquo;Atomic&ldquo; je zde důležité, protože podstatným
rozdílem mezi <strong>Rc&lt;T&gt;</strong> a <strong>Arc&lt;T&gt;</strong> je
použití počitadla, jehož hodnota se zvyšuje, snižuje a testuje na nulu
v&nbsp;atomické operaci, kterou nemohou ostatní vlákna přerušit a přístup mají
až k&nbsp;výsledku. To je sice poměrně neefektivní operace, která může (pokud
nemáme vhodně navržený hardware) dokonce vést k&nbsp;tomu, že budou ostatní
vlákna pozastavena, na druhou stranu se však jedná o jednu z&nbsp;mála
možností, jak zaručit, že nedojde například k&nbsp;přepsání jednoho výsledku
(hodnoty počitadla) výsledkem jiným (v&nbsp;mezním případě může dojít
k&nbsp;přetečení či častěji k&nbsp;podtečení hodnoty počitadla přes 0).</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vytvoření několika threadů s&nbsp;referencemi na společný objekt</h2>

<p>Podívejme se na jednoduché použití sdílení objektu mezi více vlákny
s&nbsp;použitím <strong>Arc&lt;T&gt;</strong>. Vrátíme se k&nbsp;našemu
příkladu s&nbsp;objektem (datovou strukturou) reprezentujícím komplexní číslo.
Konstrukce komplexního čísla a jeho alokace na haldu se provede následovně
(oproti demonstračnímu příkladu z&nbsp;předchozího článku jsme zde pouze
nahradili <strong>Rc</strong> a <strong>Arc</strong>):</p>

<pre>
let c = <strong>Arc::new</strong>(Complex::new(1.0, 1.0));
</pre>

<p>Aby se v&nbsp;demonstračním příkladu skutečně ukázalo, jakým způsobem se
řeší sdílení jednoho objektu mezi vlákny, vytvoříme novou datovou strukturu
<strong>ComplexNumberOwner</strong> i s&nbsp;pomocnou metodou. Opět zde došlo
k&nbsp;náhradě <strong>Rc</strong> za <strong>Arc</strong>:</p>

<pre>
struct ComplexNumberOwner {
    id: i32,
    value: <strong>Arc&lt;Complex&gt;</strong>
}
&nbsp;
impl ComplexNumberOwner {
    fn print(&amp;self) {
        println!("owner: number #{} with value {}+{}i", self.id, self.value.real, self.value.imag);
    }
}
</pre>

<p>Dále ve funkci <strong>start_threads()</strong> vytvoříme jeden objekt typu
komplexní číslo a umístíme ho na haldu:</p>

<pre>
let c = <strong>Arc::new</strong>(Complex::new(1.0, 1.0));
</pre>

<p>Posléze se v&nbsp;programové smyčce vytvoří deset samostatně běžících vláken
a každému vláknu se předá nový &bdquo;vlastník&ldquo; komplexního čísla, který
jako svůj prvek obsahuje referenci na objekt alokovaný na haldě. Důležité je,
že volání <strong>c.clone()</strong> vytvoří novou referenci a současně
atomicky zvýší počitadlo referencí. Vlákna skončí až po uplynutí přibližně 400
ms, aby bylo možné dobře sledovat práci alokátoru a dealokátoru:</p>

<pre>
fn start_threads() {
    let c = <strong>Arc::new</strong>(Complex::new(1.0, 1.0));
&nbsp;
    for id in 0..10 {
        let owner = ComplexNumberOwner{id:id, value: <strong>c.clone()</strong>};
&nbsp;
        thread::spawn(move || {
                owner.print();
                delay(400);
        });
    }
}
</pre>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
use std::sync::Arc;
use std::thread;
use std::time;
&nbsp;
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
impl Complex {
&nbsp;
    fn new(real: f32, imag: f32) -&gt; Complex {
        println!("Constructing complex number: {:}+{:}i", real, imag);
        Complex{real:real, imag:imag}
    }
&nbsp;
    fn print(&amp;self) {
        println!("complex number: {:?}+{:?}i", self.real, self.imag);
    }
&nbsp;
}
&nbsp;
impl Drop for Complex {
    fn drop(&amp;mut self) {
        println!("Dropping complex number: {:}+{:}i", self.real, self.imag);
    }
}
&nbsp;
struct ComplexNumberOwner {
    id: i32,
    value: Arc&lt;Complex&gt;
}
&nbsp;
impl ComplexNumberOwner {
    fn print(&amp;self) {
        println!("owner: number #{} with value {}+{}i", self.id, self.value.real, self.value.imag);
    }
}
&nbsp;
fn delay(ms : u64) {
    let amount = time::Duration::from_millis(ms);
    thread::sleep(amount);
}
&nbsp;
fn start_threads() {
    let c = Arc::new(Complex::new(1.0, 1.0));
&nbsp;
    for id in 0..10 {
        let owner = ComplexNumberOwner{id:id, value: c.clone()};
&nbsp;
        thread::spawn(move || {
                owner.print();
                delay(400);
        });
    }
}
&nbsp;
fn main() {
    println!("starting threads");
    start_threads();
    println!("all threads started");
    delay(2000);
}
</pre>

<p>Ukázka chování tohoto příkladu po jeho spuštění. Povšimněte si, že se
skutečně zavolá jen jediný konstruktor a po ukončení vláken i destruktor:</p>

<pre>
starting threads
Constructing complex number: 1+1i
owner: number #0 with value 1+1i
owner: number #2 with value 1+1i
owner: number #1 with value 1+1i
owner: number #3 with value 1+1i
owner: number #4 with value 1+1i
owner: number #5 with value 1+1i
owner: number #6 with value 1+1i
owner: number #7 with value 1+1i
all threads started
owner: number #8 with value 1+1i
owner: number #9 with value 1+1i
Dropping complex number: 1+1i
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly, podobně jako ve všech
předchozích částech tohoto seriálu, uloženy do Git repositáře dostupného na
adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý repositář:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>109_thread_sleep.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/109_thread_sleep.rs">https://github.com/tisnik/presentations/blob/master/rust/109_thread_sleep.rs</a></td></tr>
<tr><td>110_thread_spawn.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/110_thread_spawn.rs">https://github.com/tisnik/presentations/blob/master/rust/110_thread_spawn.rs</a></td></tr>
<tr><td>111_thread_lambda.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/111_thread_lambda.rs">https://github.com/tisnik/presentations/blob/master/rust/111_thread_lambda.rs</a></td></tr>
<tr><td>112_thread_clojure_error.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/112_thread_clojure_error.rs">https://github.com/tisnik/presentations/blob/master/rust/112_thread_clojure_error.rs</a></td></tr>
<tr><td>113_thread_clojure_correct.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/113_thread_clojure_correct.rs">https://github.com/tisnik/presentations/blob/master/rust/113_thread_clojure_correct.rs</a></td></tr>
<tr><td>114_thread_join.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/114_thread_join.rs">https://github.com/tisnik/presentations/blob/master/rust/114_thread_join.rs</a></td></tr>
<tr><td>115_thread_arc.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/115_thread_arc.rs">https://github.com/tisnik/presentations/blob/master/rust/115_thread_arc.rs</a></td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Concurrency<br />
<a href="https://doc.rust-lang.org/book/concurrency.html">https://doc.rust-lang.org/book/concurrency.html</a>
</li>

<li>Learning Rust With Entirely Too Many Linked Lists<br />
<a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/">http://cglab.ca/~abeinges/blah/too-many-lists/book/</a>
</li>

<li>Testcase: linked list<br />
<a href="http://rustbyexample.com/custom_types/enum/testcase_linked_list.html">http://rustbyexample.com/custom_types/enum/testcase_linked_list.html</a>
</li>

<li>Operators and Overloading<br />
<a href="https://doc.rust-lang.org/book/operators-and-overloading.html">https://doc.rust-lang.org/book/operators-and-overloading.html</a>
</li>

<li>Function std::thread::sleep<br />
<a href="https://doc.rust-lang.org/std/thread/fn.sleep.html">https://doc.rust-lang.org/std/thread/fn.sleep.html</a>
</li>

<li>Struct std::thread::JoinHandle<br />
<a href="https://doc.rust-lang.org/std/thread/struct.JoinHandle.html">https://doc.rust-lang.org/std/thread/struct.JoinHandle.html</a>
</li>

<li>Function std::thread::spawn<br />
<a href="https://doc.rust-lang.org/std/thread/fn.spawn.html">https://doc.rust-lang.org/std/thread/fn.spawn.html</a>
</li>

<li>Module std::ops<br />
<a href="https://doc.rust-lang.org/std/ops/index.html">https://doc.rust-lang.org/std/ops/index.html</a>
</li>

<li>Module std::cmp<br />
<a href="https://doc.rust-lang.org/std/cmp/index.html">https://doc.rust-lang.org/std/cmp/index.html</a>
</li>

<li>Trait std::ops::Add<br />
<a href="https://doc.rust-lang.org/stable/std/ops/trait.Add.html">https://doc.rust-lang.org/stable/std/ops/trait.Add.html</a>
</li>

<li>Trait std::ops::AddAssign<br />
<a href="https://doc.rust-lang.org/std/ops/trait.AddAssign.html">https://doc.rust-lang.org/std/ops/trait.AddAssign.html</a>
</li>

<li>Trait std::ops::Drop<br />
<a href="https://doc.rust-lang.org/std/ops/trait.Drop.html">https://doc.rust-lang.org/std/ops/trait.Drop.html</a>
</li>

<li>Trait std::cmp::Eq<br />
<a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">https://doc.rust-lang.org/std/cmp/trait.Eq.html</a>
</li>

<li>Struct std::boxed::Box<br />
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">https://doc.rust-lang.org/std/boxed/struct.Box.html</a>
</li>

<li>Explore the ownership system in Rust<br />
<a href="https://nercury.github.io/rust/guide/2015/01/19/ownership.html">https://nercury.github.io/rust/guide/2015/01/19/ownership.html</a>
</li>

<li>Rust's ownership and move semantic<br/>
<a href="http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics">http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics</a>
</li>

<li>Trait std::marker::Copy<br/>
<a href="https://doc.rust-lang.org/stable/std/marker/trait.Copy.html">https://doc.rust-lang.org/stable/std/marker/trait.Copy.html</a>
</li>

<li>Trait std::clone::Clone<br />
<a href="https://doc.rust-lang.org/stable/std/clone/trait.Clone.html">https://doc.rust-lang.org/stable/std/clone/trait.Clone.html</a>
</li>

<li>The Stack and the Heap<br />
<a href="https://doc.rust-lang.org/book/the-stack-and-the-heap.html">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Why does this compile? Automatic dereferencing?<br />
<a href="https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183">https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183</a>
</li>

<li>Understanding Pointers, Ownership, and Lifetimes in Rust<br />
<a href="http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>

<li>Rust lang series episode #25 — pointers (#rust-series)<br />
<a href="https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series">https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>Destructuring and Pattern Matching<br />
<a href="https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/">https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Method Syntax<br />
<a href="https://doc.rust-lang.org/book/method-syntax.html">https://doc.rust-lang.org/book/method-syntax.html</a>
</li>

<li>Traits in Rust<br />
<a href="https://doc.rust-lang.org/book/traits.html">https://doc.rust-lang.org/book/traits.html</a>
</li>

<li>Functional Programming in Rust - Part 1 : Function Abstraction<br />
<a href="http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/">http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

