<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Rust - slepá cesta vývoje či dlouho očekávaná náhrada céčka?</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Rust - slepá cesta vývoje či dlouho očekávaná náhrada céčka?</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Pro tvorbu firmware, systémového software (včetně jader operačních systémů), ale i aplikací, u nichž je vyžadován vysoký výkon, se již několik desetiletí používají programovací jazyky C a C++. Tyto jazyky však mají i několik problematických rysů, které se snaží odstranit moderní programovací jazyk Rust.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Rust &ndash; slepá cesta vývoje či dlouho očekávaná náhrada céčka?</a></p>
<p><a href="#k02">2. Základy, na nichž je postaven programovací jazyk Rust</a></p>
<p><a href="#k03">3. Rozdíly mezi Rustem a klasickými kompilovanými jazyky (C, C++)</a></p>
<p><a href="#k04">4. Rust versus vysokoúrovňové programovací jazyky</a></p>
<p><a href="#k05">5. Výkon aplikací naprogramovaných v&nbsp;Rustu</a></p>
<p><a href="#k06">6. Instalace Rustu v&nbsp;libovolné distribuci Linuxu z&nbsp;dodávaného tarballu</a></p>
<p><a href="#k07">7. Instalace Rustu na Fedoře z&nbsp;oficiálních balíčků</a></p>
<p><a href="#k08">8. Syntaxe a sémantika programů napsaných v&nbsp;Rustu</a></p>
<p><a href="#k09">9. Základní (primitivní) datové typy</a></p>
<p><a href="#k10">10. Řetězce aneb překvapivě rozsáhlá problematika</a></p>
<p><a href="#k11">11. Neměnitelné hodnoty a jejich význam při tvorbě a ladění aplikací</a></p>
<p><a href="#k12">12. Kontrola operací prováděných s&nbsp;proměnnými různých typů</a></p>
<p><a href="#k13">13. Základní řídicí struktury vs výrazy</a></p>
<p><a href="#k14">14. Programové smyčky <strong>loop</strong> a <strong>while</strong></a></p>
<p><a href="#k15">15. Programová smyčka <strong>for</strong> a iterátory</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Rust &ndash; slepá cesta vývoje či dlouho očekávaná náhrada céčka?</h2>

<p>Programovací jazyky C a C++ pravděpodobně není nutné čtenářům Roota
podrobněji představovat, protože se jedná o velmi populární a často používané
jazyky [<a href="http://www.tiobe.com/tiobe-index/">1</a>] [<a
href="https://www.openhub.net/languages/compare?&measure=commits&language_name[]=c&language_name[]=cpp&language_name[]=java&language_name[]=-1&language_name[]=-1&commit=Update">2</a>],
které jsou v&nbsp;současnosti využívány jak pro psaní firmware a systémového
software, tak i pro vývoj některých aplikací, u nichž vyžadujeme vysoký
výpočetní výkon popř.&nbsp;specifický přístup k&nbsp;paměti či
k&nbsp;periferním zařízením. Především jazyku C (céčku) se někdy přezdívá
&bdquo;čitelnější assembler&ldquo; či &bdquo;přenositelný assembler&ldquo;, což
je samozřejmě nadsázka, která ovšem vystihuje fakt, že v&nbsp;céčku (a tím
pádem i v&nbsp;C++) můžeme v&nbsp;případě potřeby využívat i dosti
nízkoúrovňové operace, například přímý přístup do paměti, používat bitová pole,
unie, datové typy, které korespondují se šířkou aritmeticko-logických jednotek
i datových sběrnic atd.</p>

<a href="https://www.root.cz/obrazek/269499/"><img src="https://i.iinfo.cz/images/162/lang-graph-1-prev.jpg" class="image-269499" alt="&#160;" width="370" height="208" /></a>
<p><i>Obrázek 1: Relativní počet commitů do open source projektů sledovaných na
OpenHubu. Modrý průběh: Go, červený průběh: D, rezavá barva: Rust. Pokud si
stejný graf zobrazíte přímo na stránkách OpenHubu, uvidíte výrazné skoky
v&nbsp;posledních dvou měsících, protože tento server se stává známý tím, jak
pomalu zpracovává statistické informace o sledovaných repositářích. Proto jsou
poslední dva měsíce ze zde zobrazeného grafu odstraněny. Jazyky C a C++ jsem
schválně nepřidával, ty mají totiž výrazně větší počet commitů, takže by se
zbývající tři jazyky krčily schovány na x-ové ose :-)</i></p>

<p>Velká volnost programátorů při použití C a C++ je samozřejmě pro některé
aplikace výhodná, na druhou stranu je však nutné, aby si programátor sám
zajistil korektní správu paměti, což se stává problematické zejména ve chvíli,
kdy se složitost aplikace a tím i provázanost všech komponent zvyšuje. Ovšem
nutnost zajištění korektní správy paměti i v&nbsp;tak základních situacích,
jako je práce s&nbsp;řetězci (alokace dostatečně velkého bloku, dealokace až ve
chvíli, kdy opravdu řetězec není nikde používán), vede k&nbsp;poměrně typickým
chybám, na které jsou programy psané v&nbsp;céčku (a částečně i C++) náchylné.
Problematických míst v&nbsp;návrhu jazyka je ovšem více; například vlastnost,
že se pro jediný příkaz v&nbsp;řídicí struktuře nemusí vytvářet blok {}, vedla
ke známému &bdquo;goto failu&ldquo; [<a
href="https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/">3</a>].</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základy, na nichž je postaven programovací jazyk Rust</h2>

<p>Cílem autorů programovacího jazyka Rust je vytvoření takového nástroje,
který by umožňoval efektivní běh aplikací a v&nbsp;případě potřeby i
nízkoúrovňový přístup k&nbsp;paměti a periferním zařízením, ovšem
s&nbsp;ohledem na bezpečnost aplikací, podporu pro paralelní běh částí kódu a
taktéž tak, aby měl vývojář co nejlepší možnosti při správě prostředků (sem
spadá jak paměť, tak například i otevřené soubory, připojení do databáze,
samozřejmě objekty atd.). Přitom je dbáno na to, aby žádný rys jazyka
nevyžadoval zbytečně složitou infrastrukturu &ndash; typickým příkladem by byl
<i>garbage collector</i>. Namísto plnohodnotného automatického správce paměti
(garbage collectoru) je tedy Rust založen na takovém typovém systému, který
zajistí správnou alokaci a dealokaci paměti odlišnými prostředky. Právě typový
systém a důraz na použití neměnných (<i>immutable</i>) hodnot jsou
nejvýraznějšími vlastnostmi Rustu.</p>

<p>Na rozdíl od některých dalších jazyků (Java je asi nejlepším příkladem) si
Rust nevynucuje použití OOP. Je to jen volitelná část jazyka, která je navíc
v&nbsp;některých ohledech od klasického třídního OOP odlišná. Podobně si Rust
nevynucuje použití FP, i když sám má mnohé funkcionální rysy.</p>

<p>Programovací jazyk Rust je v&nbsp;porovnání s&nbsp;dnes nejčastěji
používanými jazyky poměrně nový, protože jeho první verze se objevila teprve
v&nbsp;roce 2010 a první stabilní verze (1.0.0) loni (ve skutečnosti celý
projekt vznikl ještě o trošku dříve, konkrétně v&nbsp;roce 2006, ovšem
v&nbsp;dosti odlišné podobě). Samotný jazyk se navíc ještě poměrně aktivně
vyvíjí, přičemž se nejedná jen o nějaké kosmetické úpravy (přejmenování funkce
ze základní knihovny či přidání parametru do funkce), ale mnohdy o zásadní
změny v&nbsp;syntaxi i sémantice. Z&nbsp;tohoto důvodu budou všechny příklady
spolehlivě pracovat na verzi 1.11 (dostupná ve Fedoře 24) a taktéž ve verzi
1.12 (poslední stabilní verze vydaná před pouhými jedenácti dny).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Rozdíly mezi Rustem a klasickými kompilovanými jazyky (C, C++)</h2>

<p>Jazyk Rust je orientován na tvorbu podobných nástrojů a aplikací, pro něž se
v&nbsp;současnosti používá klasické céčko, C++ či (prozatím v&nbsp;mnohem menší
míře) jazyk D. Největším rozdílem mezi Rustem a C/C++ je již zmíněný typový
systém. Ten zajišťuje, že například nelze vytvořit neinicializovaný ukazatel,
v&nbsp;čase překladu je možné otestovat přístup k&nbsp;dealokované paměti, je
kontrolována správná inicializace proměnných atd. Na druhou stranu je ovšem
někdy nutné v&nbsp;nízkoúrovňovém kódu provádět potenciálně nebezpečné operace
(resp.&nbsp;operace, které pedantický překladač považuje za nebezpečné). I to
je umožněno, a to díky existenci bloku <strong>unsafe {}</strong>. Oproti C++
je vylepšena kontrola správnosti šablon, takže s&nbsp;Rustem pravděpodobně <a
href="http://codegolf.stackexchange.com/questions/1956/generate-the-longest-error-message-in-c">soutěž
o nejdelší chybové hlášení</a> nevyhrajete :-)</p>

<p>Došlo také ke zpřísnění základní syntaxe tam, kde to má smysl. Příkladem je
sice dobře míněný, ale špatně zapsaný kód s&nbsp;přebývajícím středníkem:</p>

<pre>
int main(void)
{
    int cnt = 0;
    for (int i = 0; i != 10; i++);
        cnt++;
    return cnt;
}
</pre>

<p>V&nbsp;Rustu je nutné ve strukturovaných konstrukcích použít vždy bloky, a
to i v&nbsp;případě, že je v&nbsp;nich jen jediný příkaz.</p>

<p>Došlo též k&nbsp;náhradě konstrukce <strong>switch-case</strong> za
obecnější konstrukci <strong>match</strong>, která, kromě jiného, nevyžaduje
pouhé porovnávání s&nbsp;konstantami, ale nabízí namísto toho plnohodnotný
pattern matching.</p>

<p>Další změny se týkají spíše sémantiky, kterou si podrobněji popíšeme
v&nbsp;dalším textu i v&nbsp;následujících pokračováních tohoto seriálu.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Rust versus vysokoúrovňové programovací jazyky</h2>

<p>Rust se sice nesnaží přímo konkurovat takovým jazykům, jako je Python či
Ruby, ovšem i přesto se k&nbsp;nim může přibližovat z&nbsp;pohledu produktivity
i obecně bezpečnějších výsledných aplikací, než je tomu u stále zmiňované
dvojice C/C++. To jsou samozřejmě jen poměrně obtížně měřitelné hodnoty, takže
je nutné podobná prohlášení brát poněkud s&nbsp;rezervou; osobně si myslím, že
například v&nbsp;Pythonu budete stále produktivnější (a to delší budou testy
:-). Mnohem blíže má Rust spíše k&nbsp;programovacímu jazyku Go, který čistě
náhodou vznikl ve zhruba stejné době, konkrétně v&nbsp;roce 2009 (lze jen
spekulovat o tom, že Rust i Go vznikly příhodně ve chvíli, kdy se díky IoT
dostala k&nbsp;nízkoúrovňovému programování skupina mladších vývojářů, kteří si
neprošli klasickým kolečkem Pascal-C). Oproti Rustu však Go obsahuje i
plnohodnotného automatického správce paměti se všemi výhodami ale i nevýhodami,
které to v&nbsp;praxi přináší. Podobně je tomu i při porovnání s&nbsp;Javou,
ovšem s&nbsp;tou podstatnou připomínkou, že nároky JVM jsou o několik řádů
vyšší, než runtime Rustu (což opět asi nebude velké překvapení).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Výkon aplikací naprogramovaných v&nbsp;Rustu</h2>

<p>Vzhledem k&nbsp;poměrně silnému tvrzení, že by Rust mohl nahradit C/C++ i
v&nbsp;těch aplikacích, kde je kritickým faktorem výkon a/nebo paměťové
požadavky, není divu, že si programátoři napsali benchmarky pro potvrzení
tohoto tvrzení, popř.&nbsp;rozšířili stávající sadu benchmarků právě o tento
jazyk. Naleznete je například na adresách:</p>

<ol>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Benchmarks of different languages<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

</ol>

<p>Při pohledu na tyto benchmarky je nutné mít na paměti, že se testují pouze
velmi krátké prográmky (mnohdy jen mikrobenchmarky), které nemusí mít mnoho
společného s&nbsp;rozsáhlejšími aplikacemi a už vůbec ne například
s&nbsp;dlouhodobě běžícími serverovými službami. Taktéž se zde neměří například
škálovatelnost nebo různé &bdquo;pozastavení&ldquo; aplikací kvůli práci
garbage collectoru (to se samozřejmě netýká Rustu, ale některých s&nbsp;ním
porovnávaných jazyků).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instalace Rustu v&nbsp;libovolné distribuci Linuxu z&nbsp;dodávaného tarballu</h2>

<p>V&nbsp;dalších kapitolách si již budeme ukazovat demonstrační příklady,
takže si alespoň ve stručnosti popišme, jakým způsobem je možné Rust
nainstalovat.</p>

<p>Překladač jazyka Rust i jeho podpůrné knihovny je sice možné přeložit pro
různé platformy (samozřejmě včetně ARMů) a operační systémy (včetně Androidu a
iOS), ovšem oficiálně dostupné jsou prozatím jen archivy (tarball atd.) či
instalační balíčky (.msi) určené pro Linux běžící na platformě i686 a x86-64,
Mac (na téže platformě) a MS Windows. Tyto archivy naleznete na adrese <a
href="https://www.rust-lang.org/en-US/downloads.html">https://www.rust-lang.org/en-US/downloads.html</a>.
Ukažme si lokální instalaci na 64bitovém Linuxu. Instalaci je zde možné provést
několika způsoby:</p>

<ol>
<li>Použitím skriptu <strong>rustup.sh</strong></li>
<li>Stažením tarballu, jeho rozbalením a ručním spuštěním instalace</li>
<li>Instalací z&nbsp;repositářů vaší distribuce (viz též popis v&nbsp;další
kapitole). Balíčky naleznete i pro další distribuce, například pro <a
href="https://tracker.debian.org/pkg/rustc">Debian</a> apod.</li>
</ol>

<p>Nejlepší je použít třetí možnost, ale jen za předpokladu, že vaše distribuce
nabízí Rust verze 1.11.x či 1.12.x. Starší verze tohoto jazyka totiž nemusí být
ve všech ohledech kompatibilní, neboť Rust se stále ještě poměrně bouřlivě
vyvíjí.</p>

<p>Instalace s&nbsp;využitím skriptu <strong>rustup.sh</strong> je snadná,
pokud tedy máte ve zvyku přímo a bez prohlédnutí spouštět skripty stažené
z&nbsp;Internetu :-).  Přepínače předané nástroji <strong>curl</strong>
zajistí, že interpret shellu dostane na vstupu skutečný skript a nikoli chybové
hlášení při nějakých problémech se síťovým připojením:</p>

<pre>
curl -sSf https://static.rust-lang.org/rustup.sh | sh
</pre>

<p>Druhá možnost je nepatrně, ale skutečně jen nepatrně pracnější a vyžaduje
tři kroky.</p>

<p>1. stažení příslušného tarballu, zde konkrétně pro 64bitový Linux:</p>

<pre>
wget https://static.rust-lang.org/dist/rust-1.12.1-x86_64-unknown-linux-gnu.tar.gz
</pre>

<p>2. rozbalení tarballu:</p>

<pre>
tar xvfz rust-1.12.1-x86_64-unknown-linux-gnu.tar.gz
</pre>

<p>3. spuštění instalačního skriptu. Zde je nutné mít práva pro zápis do
adresářů <strong>/usr/local</strong> a <strong>/etc</strong>, které patří
rootovi:</p>

<pre>
sudo install.sh
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Instalace Rustu na Fedoře z&nbsp;oficiálních balíčků</h2>

<p>Vzhledem k&nbsp;tomu, že se <a
href="https://mojefedora.cz/rust-oficialne-ve-fedore/">balíček s&nbsp;Rustem
dostal do repositářů Fedory</a>, je na této distribuci instalace velmi
jednoduchá a bezproblémová. Stačí využít nástroj <strong>dnf</strong>
(popř.&nbsp;pro staromilce <strong>yum</strong>), a to následujícím
způsobem:</p>

<pre>
# <strong>dnf install rust</strong>
</pre>

<p>Na čisté instalaci Fedory 24 se kromě Rustu (tedy překladače a podpůrných
knihoven) nainstalují i některé knihovny z&nbsp;projektu LLVM, žádné další
závislé balíčky by se neměly doinstalovávat:</p>

<pre>
Last metadata expiration check: 2:59:24 ago on Mon Oct 31 11:45:04 2016.
Dependencies resolved.
================================================================================
 Package          Arch          Version              Repository            Size
================================================================================
Installing:
 llvm-libs        x86_64        3.8.0-1.fc24         Fedora                11 M
 rust             x86_64        1.11.0-3.fc24        updates               40 M
&nbsp;
Transaction Summary
================================================================================
Install  2 Packages
&nbsp;
Total download size: 50 M
Installed size: 122 M
Is this ok [y/N]: 
</pre>

<p>Typický průběh instalace:</p>

<pre>
Downloading Packages:
(1/2): llvm-libs-3.8.0-1.fc24.x86_64.rpm        7.2 MB/s |  11 MB     00:01    
(2/2): rust-1.11.0-3.fc24.x86_64.rpm            2.8 MB/s |  40 MB     00:14    
--------------------------------------------------------------------------------
Total                                           3.2 MB/s |  50 MB     00:15     
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Installing  : llvm-libs-3.8.0-1.fc24.x86_64                               1/2 
  Installing  : rust-1.11.0-3.fc24.x86_64                                   2/2 
  Verifying   : rust-1.11.0-3.fc24.x86_64                                   1/2 
  Verifying   : llvm-libs-3.8.0-1.fc24.x86_64                               2/2 
&nbsp;
Installed:
  llvm-libs.x86_64 3.8.0-1.fc24            rust.x86_64 1.11.0-3.fc24           
&nbsp;
Complete!
</pre>

<p>Závěrečná rychlá kontrola, zda se překladač skutečně nainstaloval:</p>

<pre>
$ <strong>rustc --version</strong>
rustc 1.11.0
</pre>

<p>Povšimněte si, že se nainstalovala verze 1.11.0, zatímco poslední stabilní
verze dostupná na stránkách tohoto projektu je 1.12.1. Případné problémy tedy
mohou být způsobeny změnami v&nbsp;překladači či knihovnách, ke kterým mezi
oběma verzemi proběhlo.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Syntaxe a sémantika programů napsaných v&nbsp;Rustu</h2>

<p>V&nbsp;následujících kapitolách se seznámíme se základní syntaxí a
sémantikou programů napsaných v&nbsp;Rustu. Nebude se v&nbsp;žádném případě
jednat o referenční příručku, navíc některé oblasti (alespoň prozatím) zcela
přeskočíme a budeme se jim podrobněji věnovat v&nbsp;navazujících pokračováních
tohoto článku.</p>

<p>Pro začátek si ukažme typický školní příklad &bdquo;Hello world!&ldquo;
uložený v&nbsp;souboru <strong>hello_world.rs</strong>, v&nbsp;němž je
deklarována funkce <strong>main</strong> bez parametrů a bez uvedení
návratového typu. V&nbsp;této funkci se volá makro <strong>println!</strong>
pro výpis řetězce na standardní výstup:</p>

<pre>
fn main() {
    println!("Hello world!");
}
</pre>

<p>Překlad se provede příkazem:</p>

<pre>
rustc hello_world.rs
</pre>

<p>Výsledkem překladu je spustitelný soubor nazvaný
<strong>hello_world</strong> (nikoli tedy <strong>a.out</strong> či
<strong>a.exe</strong>, tohoto historického balastu se tvůrci Rustu
zbavili).</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Základní (primitivní) datové typy</h2>

<p>Termín &bdquo;primitivní datový typ&ldquo; může být pro mnoho čtenářů
zpočátku poněkud matoucí, protože jeho význam se v&nbsp;případě programovacího
jazyka Rust odlišuje například od Javy. V&nbsp;Javě se tímto termínem označují
celočíselné typy (<i>byte</i>, <i>short</i>, <i>int</i>, <i>long</i>), číselné
typy s&nbsp;plovoucí řádovou čárkou (<i>float</i>, <i>double</i>), pravdivostní
typ <i>boolean</i> a typ &bdquo;znak&ldquo; (<i>char</i>), tedy celkem pouze
osm typů. V&nbsp;jazyce Rust se naproti tomu pod termínem &bdquo;primitivní
datový typ&ldquo; rozumí jakýkoli typ, který je přímo zabudován a specifikován
v&nbsp;jazyce, takže záběr je zde větší (spadají sem například i funkce).</p>

<p>Všechny v&nbsp;současnosti podporované primitivní datové typy jsou vypsány
v&nbsp;následující tabulce. Povšimněte si především toho, jak se striktně a
nezávisle na platformě rozlišují celá čísla s&nbsp;různou bitovou šířkou, že
typ <i>char</i> zde má šířku 32 bitů (na rozdíl od Javy, kde je <i>char</i>
vlastně pro uložení kódu znaku nedostatečný a jde jen o &bdquo;půlznak&ldquo;)
a že mezi základní typy patří i pole, seznam pevné délky (tedy n-tice) a
funkce:</p>

<table>
<tr><th></th><th></th></tr>
<tr><td>bool</td><td>může (nepřekvapivě) nabývat hodnot true nebo false</td></tr>
<tr><td>char</td><td>reprezentuje znak v&nbsp;Unicode (interně má šířku čtyři bajty)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>i8   </td><td>celé číslo se znaménkem (<i>signed</i>) o šířce 8 bitů</td></tr>
<tr><td>i16  </td><td>celé číslo se znaménkem (<i>signed</i>) o šířce 16 bitů</td></tr>
<tr><td>i32  </td><td>celé číslo se znaménkem (<i>signed</i>) o šířce 32 bitů</td></tr>
<tr><td>i64  </td><td>celé číslo se znaménkem (<i>signed</i>) o šířce 64 bitů</td></tr>
<tr><td>u8   </td><td>celé číslo bez znaménka (<i>unsigned</i>) o šířce 8 bitů</td></tr>
<tr><td>u16  </td><td>celé číslo bez znaménka (<i>unsigned</i>) o šířce 16 bitů</td></tr>
<tr><td>u32  </td><td>celé číslo bez znaménka (<i>unsigned</i>) o šířce 32 bitů</td></tr>
<tr><td>u64  </td><td>celé číslo bez znaménka (<i>unsigned</i>) o šířce 64 bitů</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>isize</td><td>celé číslo se znaménkem odpovídající šířce ukazatele</td></tr>
<tr><td>usize</td><td>celé číslo bez znaménka odpovídající šířce ukazatele</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>f32  </td><td>32bitové číslo reprezentované v&nbsp;systému plovoucí řádové čárky (<i>single</i>, <i>float</i>)</td></tr>
<tr><td>f64  </td><td>64bitové číslo reprezentované v&nbsp;systému plovoucí řádové čárky (<i>double</i>)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>array </td><td>pole (implicitně neměnné)</td></tr>
<tr><td>slice </td><td>v podstatě &bdquo;pohled&ldquo; na vybranou část pole</td></tr>
<tr><td>str   </td><td>jeden z&nbsp;několika datových typů pro reprezentaci řetězců</td></tr>
<tr><td>tuple </td><td>seznam pevné délky, má v&nbsp;jazyku mnoho použití</td></tr>
<tr><td>funkce</td><td>funkce jsou zde plnohodnotným datovým typem</td></tr>
</table>

<p>Přesný význam posledních pěti typů, které jsou nejzajímavější, si řekneme
příště.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Řetězce aneb překvapivě rozsáhlá problematika</h2>

<p>V&nbsp;jazyku Rust jsou řetězce interně ukládány s&nbsp;využitím kódování
UTF-8, což sice může znít překvapivě, ovšem přináší to i některé výhody. Autoři
tohoto jazyka správně poukazují na to, že v&nbsp;současnosti prakticky všechny
webové služby, XML soubory, velká část HTML stránek atd. stejně kódování UTF-8
používají, takže nemá význam neustále provádět konverzi mezi tímto kódováním a
například UCS-4 (UTF-32). Navíc je při zpracování rozsáhlých XML souborů formát
UTF-8 výhodnější z&nbsp;hlediska spotřeby operační paměti. Největší nevýhodou
použití UTF-8 je nemožnost získat a vrátit n-tý znak v&nbsp;řetězci
v&nbsp;konstantním čase. Pokud by se tato operace prováděla velmi často, lze
samozřejmě použít vhodný objekt, který například &bdquo;obaluje&ldquo; pole
čtyřbajtových širokých znaků v&nbsp;UCS-4/UTF-32.</p>

<p>Mimochodem: řešení založené na formátu UTF-16, které <i>částečně</i> používá
například Java, je vlastně polovičaté a přináší ty horší vlastnosti z&nbsp;obou
světů &ndash; znaky jsou stále ukládány v&nbsp;proměnném počtu bajtů, ale
spotřeba paměti je u běžných řetězců (konfigurační soubory, angličtina...)
v&nbsp;porovnání s&nbsp;UTF-8 dvojnásobná.</p>

<p>Poznámka: existují i speciální typy nazvané <i>CStr</i>, <i>CString</i>,
<i>OsStr</i> a <i>OsString</i>, které nabízí reprezentaci řetězců ve formátu
kompatibilním s&nbsp;céčkem (což je nutné při použití FFI)
resp.&nbsp;s&nbsp;použitou platformou. Podrobnostem bude věnován samostatný
článek.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Neměnitelné hodnoty a jejich význam při tvorbě a ladění aplikací</h2>

<p>Jazyk Rust poměrně striktně rozlišuje mezi měnitelnými a neměnitelnými
proměnnými. Například následující kód je po syntaktické stránce naprosto
v&nbsp;pořádku, ale přesto se ho nepodaří přeložit. V&nbsp;kódu je deklarována
lokální <i>neměnitelná</i> proměnná <strong>i</strong>, s&nbsp;tím, že si její
typ odvodí překladač (<i>type inference</i>). Následně se v&nbsp;programové
smyčce snažíme postupně měnit hodnotu této proměnné a vypisovat ji na
standardní výstup makrem <strong>println!</strong>:</p>

<pre>
fn main() {
    let i = 0;
    while i&lt;10 {
        println!("pocitadlo: {}", i);
        i = i + 1;
    }
}
</pre>

<p>Pokusme se o překlad:</p>

<pre>
<strong>rustc while_loop.rs</strong>
</pre>

<p>Překladač by měl vypsat následující chybové hlášení:</p>

<pre>
while_loop.rs:5:9: 5:18 error: re-assignment of immutable variable `i` [E0384]
while_loop.rs:5         i = i + 1;
                        ^~~~~~~~~
while_loop.rs:5:9: 5:18 help: run `rustc --explain E0384` to see a detailed explanation
while_loop.rs:2:9: 2:10 note: prior assignment occurs here
while_loop.rs:2     let i = 0;
                        ^
error: aborting due to previous error
</pre>

<p>Pokud explicitně vyžadujeme použití měnitelné (<i>mutable</i>) proměnné, je
nutné deklaraci provést takto:</p>

<pre>
fn main() {
    let <strong>mut</strong> i = 0;
    while i&lt;10 {
        println!("pocitadlo: {}", i);
        i = i + 1;
    }
}
</pre>

<p>Poznámka: použití neměnitelných proměnných má svůj význam, protože
<i>immutable</i> proměnné lze bez problémů použít v&nbsp;jiném vláknu, program
se snadněji testuje (menší stavový prostor), překladač může provádět
agresivnější optimalizace atd. Zajímavé je, že &ndash; podobně jako
v&nbsp;některých FP jazycích &ndash; jsou v&nbsp;Rustu proměnné ve výchozím
stavu <i>immutable</i> a ne naopak.</p>

<p>Poznámka2: povšimněte si, že okolo podmínek se nemusí psát kulaté
závorky.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Kontrola operací prováděných s&nbsp;proměnnými různých typů</h2>

<p>Předchozí zdrojový kód byl přeložen v&nbsp;pořádku z&nbsp;toho důvodu, že si
překladač dovedl odvodit typ proměnné <strong>i</strong> z&nbsp;hodnoty, kterou
je proměnná inicializována. V&nbsp;případě potřeby je však možné typ uvést i
explicitně, například takto (použijeme 32bitové celé číslo se znaménkem):</p>

<pre>
fn main() {
    let mut i:i32 = 0;
    while i&lt;200 {
        println!("pocitadlo: {}", i);
        i = i + 1;
    }
}
</pre>

<p>Podívejme se nyní, co se stane, když ve zdrojovém kódu budeme specifikovat,
že typ proměnné <strong>i</strong> je osmibitové celé číslo se znaménkem:</p>

<pre>
fn main() {
    let mut i:i8 = 0;
    while i&lt;200 {
        println!("pocitadlo: {}", i);
        i = i + 1;
    }
}
</pre>

<p>Překladač není příliš spokojen, protože porovnáváme hodnotu -128..127
s&nbsp;konstantou 200:</p>

<pre>
while_loop.rs:3:11: 3:16 warning: comparison is useless due to type limits, #[warn(unused_comparisons)] on by default
while_loop.rs:3     while i&lt;200 {
                          ^~~~~
while_loop.rs:3:13: 3:16 warning: literal out of range for i8, #[warn(overflowing_literals)] on by default
while_loop.rs:3     while i&lt;200 {
</pre>

<p>Naproti tomu překladač céčka následující (sémanticky prakticky totožný)
zdrojový kód přeloží bez problémů:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
&nbsp;
int main(void)
{
    signed char i = 0;
    while (i&lt;200) {
        printf("%d\n", i);
        i++;
    }
    return 0;
</pre>

<p>Otázka pro čtenáře: jak se vlastně bude tento program chovat při překladu na
architektuře i386 či x86-64? Dá se předpokládat (za jakých okolností), že na
jiných architekturách bude chování odlišné? A specifikuje takové chování norma
ANSI C?</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Základní řídicí struktury vs výrazy</h2>

<p>Zajímavé je, že sémantika řídicí struktury <strong>if-else</strong> se
oproti C/C++ změnila, protože nyní je celá tato struktura <i>výrazem</i>, což
znamená, že její výsledek lze přiřadit do proměnné, předat volané funkci,
použít ve složitějším výrazu (což bude poněkud nepřehledné) atd. Jedná se tak
vlastně o alternativu k&nbsp;mnohdy ne příliš čitelnému ternárnímu operátoru
?:. Ostatně se podívejme na jednoduchý příklad, v&nbsp;němž se do lokální
proměnné <strong>value_type</strong> přiřazuje řetězec (typ proměnné je opět
automaticky odvozen překladačem):</p>

<pre>
fn if_expression(value:i32) {
    let value_type =
        if value &lt; 0 {
            "zaporna"
        }
        else {
            if value == 0 {
                "nulova"
            }
            else {
                "kladna"
            }
        };
    println!("Hodnota {} je {}", value, value_type);
}
&nbsp;
fn main() {
    if_expression(0);
    if_expression(10);
    if_expression(-10);
}
</pre>

<p>Po překladu a spuštění dostaneme očekávaný výsledek:</p>

<pre>
Hodnota 0 je nulova
Hodnota 10 je kladna
Hodnota -10 je zaporna
</pre>

<pre>
fn if_expression(value:u32) {
    let value_type =
        if value &lt; 0 {
            "zaporna"
        }
        else {
            if value == 0 {
                "nulova"
            }
            else {
                "kladna"
            }
        };
    println!("Hodnota {} je {}", value, value_type);
}
&nbsp;
fn main() {
    if_expression(0);
    if_expression(10);
    if_expression(-10);
}
</pre>

<pre>
if_expression.rs:20:19: 20:22 error: unary negation of unsigned integer
if_expression.rs:20     if_expression(-10);
                                      ^~~
error: aborting due to previous error
</pre>

<p>Zkusme nyní změnit typ parametru <strong>value</strong> z&nbsp;celého čísla
se znaménkem na číslo bez znaménka:</p>

<pre>
fn if_expression(value:u32) {
    let value_type =
    if value &lt; 0 {
        "zaporna"
    }
    else {
        if value == 0 {
            "nulova"
        }
        else {
            "kladna"
        }
    };
    println!("Hodnota {} je {}", value, value_type);
}
&nbsp;
fn main() {
    if_expression(0);
    if_expression(10);
    if_expression(-10);
}
</pre>

<p>Překladač nyní podle očekávání ohlásí chybu:</p>

<pre>
if_expression.rs:20:19: 20:22 error: unary negation of unsigned integer
if_expression.rs:20     if_expression(-10);
                                      ^~~
error: aborting due to previous error
</pre>

<p>Pokud pouze zakomentujeme zmíněný řádek:</p>

<pre>
fn main() {
    if_expression(0);
    if_expression(10);
    if_expression(-10);
}
</pre>

<p>Stále nebude překladač zcela spokojen, protože se v&nbsp;podmínce provádí
porovnání kladné (či nulové) hodnoty s&nbsp;nulou v&nbsp;relaci &bdquo;je ostře
menší než&ldquo;:</p>

<pre>
if_expression.rs:3:8: 3:17 warning: comparison is useless due to type limits, #[warn(unused_comparisons)] on by default
if_expression.rs:3     if value &lt; 0 {
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Programové smyčky <strong>loop</strong> a <strong>while</strong></h2>

<p>V&nbsp;jazyce Rust nalezneme několik typů programových smyček. Nejjednodušší
je smyčka <strong>loop</strong>, která je nekonečná, což znamená, že
v&nbsp;Rustu nemusíme provádět triky typu <strong>while(1)</strong> či
<strong>for (;;)</strong>. Nekonečnou smyčku lze opustit příkazem
<strong>break</strong>:</p>

<pre>
fn main() {
    let mut i = 0;
    loop {
        println!("pocitadlo: {}", i);
        i = i + 1;
        if i &gt;= 10 {
            break;
        }
    }
}
</pre>

<p>Druhá smyčka typu <strong>while</strong> s&nbsp;testem na začátku již byla
ukázána v&nbsp;předchozích kapitolách.</p>

<p>Poznámka: smyčka typu <strong>do-while</strong> sice v&nbsp;Rustu není
implementována, ale existují způsoby, jak ji v&nbsp;případě potřeby simulovat
smyčkou <strong>while</strong>. Celý trik spočívá v&nbsp;tom, že i blok {} je
výrazem (vrací se poslední vypočtená hodnota), takže lze vytvořit smyčku
s&nbsp;prázdným tělem a naopak podmínkou tvořenou programovým blokem. Vypadá to
divně, nikdo to pravděpodobně nepoužívá, ale ukazují se zde další vlastnosti
Rustu.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Programová smyčka <strong>for</strong> a iterátory</h2>

<p>Zajímavá a především užitečná je smyčka typu <strong>for</strong>, která se
syntakticky i sémanticky podobá podobně pojmenované smyčce z&nbsp;Pythonu. Tuto
smyčku lze využít pro iteraci nad libovolným <i>iterátorem</i>, což je objekt
s&nbsp;metodou <strong>.next()</strong> (k&nbsp;dispozici jsou ovšem i další
metody jako <strong>.skip(n)</strong> a <strong>.take(n)</strong>). Mezi
iterátory patří i typ <i>range</i>, který lze vytvořit zápisem <i>min..max</i>.
Podívejme se na velmi jednoduchý příklad se smyčkou typu
<strong>for</strong>:</p>

<pre>
fn main() {
    for i in 1..10 {
        println!("pocitadlo: {}", i)
    }
}
</pre>

<p>Po spuštění snadno zjistíme, že se smyčka provede pro hodnoty od <i>min</i>
(včetně) do <i>max</i> (kromě):</p>

<pre>
pocitadlo: 1
pocitadlo: 2
pocitadlo: 3
pocitadlo: 4
pocitadlo: 5
pocitadlo: 6
pocitadlo: 7
pocitadlo: 8
pocitadlo: 9
</pre>

<p>Prozatím jen experimentálně byla do jazyka přidána i podpora pro zápis
<i>min...max</i> (se třemi tečkami), specifikující iterátor procházející oběma
mezemi (tedy včetně <i>min</i> i <i>max</i>).</p>

<p>Iterovat lze ale například i přes všechny prvky vektoru:</p>

<pre>
let vektor = vec![1, 2, 3, 4];
&nbsp;
for i in &amp;vektor {
    println!("{}", i);
}
</pre>

<p>Nepatrnou úpravou zdrojového kódu lze metodou <strong>.iter()</strong>
získat iterátor i pro pole a procházet tak všemi prvky pole:</p>

<pre>
let array = [1, 2, 3, 4];
&nbsp;
for i in array.iter() {
    println!("{}", i);
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

