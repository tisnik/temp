<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Reakce na chyby v&nbsp;programovacím jazyku Rust</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Reakce na chyby v programovacím jazyku Rust</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;každém programu je nutné adekvátně reagovat na různé typy chyb. Programovací jazyk Rust nabízí dvě standardní metody reakcí na chyby: použití výjimek a oznámení o chybě s&nbsp;využitím návratové hodnoty. Ve druhém případě se používají typy Option a taktéž Result.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Reakce na chyby v&nbsp;programovacím jazyku Rust</a></p>
<p><a href="#k02">2. Když nelze vrátit žádnou rozumnou hodnotu: datový typ Option</a></p>
<p><a href="#k03">3. Oznámení o chybě formou návratové hodnoty: datový typ Result</a></p>
<p><a href="#k04">4. Příklad použití datového typu Result</a></p>
<p><a href="#k05">5. Predikáty <strong>is_ok()</strong> a <strong>is_err()</strong></a></p>
<p><a href="#k06">6. Datový typ Result a pattern matching</a></p>
<p><a href="#k07">7. Kontrola, zda jsou pokryty obě větve v&nbsp;konstrukci match</a></p>
<p><a href="#k08">8. Znak &bdquo;_&ldquo; použitý v&nbsp;konstrukci match</a></p>
<p><a href="#k09">9. Funkce vyššího řádu <strong>map</strong></a></p>
<p><a href="#k10">10. Funkce vyššího řádu <strong>map_err</strong></a></p>
<p><a href="#k11">11. Více variant chybových hlášení</a></p>
<p><a href="#k12">12. Použití výčtu pro chybová hlášení</a></p>
<p><a href="#k13">13. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Reakce na chyby v&nbsp;programovacím jazyku Rust</h2>

<p><a
href="https://www.root.cz/clanky/datovy-typ-option-v-programovacim-jazyku-rust/">V&nbsp;předchozí
části</a> <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">seriálu o
programovacím jazyku Rust</a> jsme se seznámili s&nbsp;užitečným datovým typem
<strong>Option</strong>, který se velmi často používá v&nbsp;těch situacích,
v&nbsp;nichž je zapotřebí vrátit (či naopak předat či alespoň reprezentovat)
nějakou speciální hodnotu. Příklad použití jsme si vysvětlili na velmi
jednoduché funkci, která vydělí dvě celá čísla a vrátí celočíselný podíl
&bdquo;zabalený&ldquo; právě v&nbsp;datovém typu <strong>Option</strong>. Ovšem
ve chvíli, kdy je druhé číslo nulové, vrací se namísto zabaleného výsledku
speciální hodnota <strong>None</strong>, takže volající funkce může a někdy
dokonce musí kdykoli zjistit, že namísto skutečného podílu získala tuto
speciální hodnotu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Když nelze vrátit žádnou rozumnou hodnotu: datový typ Option</h2>

<p>Funkce pro celočíselné dělení vypadala následovně:</p>

<pre>
fn div(x: i32, y: i32) -&gt; <strong>Option&lt;i32&gt;</strong> {
    if y != 0 {
        <strong>Some(x/y)</strong>
    } else {
        <strong>None</strong>
    }
}
</pre>

<p>Jednou z&nbsp;největších předností datového typu <strong>Option</strong> je
fakt, že jeho používání je v&nbsp;programovacím jazyku Rust do značné míry
standardní a navíc idiomatické, takže programátoři nemusí hledat, která
&bdquo;magická konstanta&ldquo; je pro danou funkci použita. Dále je zaručeno,
že pokud budeme chtít získat zabalenou hodnotu přes pattern matching, bude
nutné explicitně použít i druhou větev pracující s&nbsp;<strong>None</strong>.
Pro hodnoty typu <strong>Option</strong> je navíc možné volat různé více či
méně užitečné metody, například <strong>is_none()</strong>,
<strong>is_some()</strong>, <strong>expect()</strong>,
<strong>unwrap()</strong>, <strong>and_then()</strong>,
<strong>or_else()</strong> a různé varianty funkce vyššího řádu
<strong>map()</strong>. Mimochodem &ndash; tato struktura se používá i
v&nbsp;případě, že potřebujeme pracovat s&nbsp;referencemi, které
v&nbsp;některých situacích nemusí existovat (což nám jinak Rust nedovolí).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Oznámení o chybě formou návratové hodnoty: datový typ Result</h2>

<p>V&nbsp;mnoha případech však nemusí být použití datového typu
<strong>Option</strong> tím nejlepším řešením. Pro příklad nemusíme chodit
daleko &ndash; předpokládejme, že budeme chtít, aby naše funkce pro dělení
celých čísel vracela v&nbsp;případě pokusu o dělení nulou chybové hlášení a
nikoli nicneříkající hodnotu <strong>None</strong>. K&nbsp;tomuto účelu se
v&nbsp;programovacím jazyku Rust používá datová struktura nazvaná příhodně
<strong>Result</strong>. Tato datová struktura se podobá
<strong>Option</strong>, ovšem s&nbsp;tím rozdílem, že obaluje buď výsledek
(třeba návratovou hodnotu volané funkce) nebo informaci o chybě. Deklarace
struktury <strong>Result</strong> vypadá následovně:</p>

<pre>
enum Result&lt;T, E&gt; {
    Ok(T),
    Err(E),
}
</pre>

<p>což se liší od deklarace typu <strong>Option</strong>:</p>

<pre>
enum Option&lt;T&gt; {
    None,
    Some(T),
}
</pre>

<p>Povšimněte si, že se u datové struktury <strong>Result</strong> specifikují
dva typy &ndash; typ návratové hodnoty <strong>T</strong> a typ hodnoty
reprezentující chybu <strong>E</strong>. To je poměrně užitečná vlastnost,
protože se programátoři mohou sami rozhodnout, jakým způsobem budou
reprezentovat chybu &ndash; zda se bude jednat o jednoduchý řetězec či o
složitější datovou strukturu, v&nbsp;ní může být například uloženo jméno
otevíraného souboru a současně chybové hlášení systému při pokusu o jeho
otevření.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příklad použití datového typu Result</h2>

<p>Zkusme si nyní upravit naši funkci určenou pro dělení dvou celých čísel
takovým způsobem, aby se v&nbsp;případě dělení nulou namísto hodnoty
<strong>None</strong> vracelo plnohodnotné chybové hlášení ve formě řetězce.
Úprava je velmi snadná a může vypadat následovně:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
    if y != 0 {
        <strong>Ok(x/y)</strong>
    } else {
        <strong>Err("Divide by zero!")</strong>
    }
}
</pre>

<p>Prozatím si vypočtené hodnoty vytiskneme jednoduše makrem
<strong>println!()</strong> a formátovacím příkazem &bdquo;?:&ldquo;:</p>

<pre>
fn main() {
    let z1 = div(2, 1);
    println!("{:?}", z1);
&nbsp;
    let z2 = div(2, 0);
    println!("{:?}", z2);
}
</pre>

<p>Po spuštění tohoto příkladu se na prvním řádku vypíše vypočtená hodnota
obalená do &bdquo;Ok&ldquo; a na řádku druhém pak chybové hlášení, tentokrát
obalené do &bdquo;Err&ldquo;:</p>

<pre>
Ok(2)
Err("Divide by zero!")
</pre>

<p>Poznámka: v&nbsp;tomto případě se do <strong>Err</strong> uloží reference na
statický řetězec, který je neměnitelný a který je součástí výsledného
spustitelného binárního souboru. Konkrétně se tento řetězec nachází
v&nbsp;sekci nazvané <strong>.rodata</strong>, která má nastavená práva Exec a
Read, nikoli však Write (ostatně i proto se jedná o neměnitelný řetězec).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Predikáty <strong>is_ok()</strong> a <strong>is_err()</strong></h2>

<p>Zatímco u struktury <strong>Option</strong> bylo možné zjistit typ uložené
hodnoty, tedy rozlišit mezi <strong>Some</strong> a <strong>None</strong>,
pomocí predikátů <strong>is_some()</strong> a <strong>is_none()</strong>,
používají se u datové struktury <strong>Result</strong> predikáty nazvané
<strong>is_ok()</strong> a <strong>is_err()</strong>. Jejich použití je velmi
jednoduché, jak je ostatně ukázáno na dalších dvou příkladech.</p>

<h4>Použití predikátu is_ok()</h4>

<pre>
fn div(x: i32, y: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
    if y != 0 {
        Ok(x/y)
    } else {
        Err("Divide by zero!")
    }
}
&nbsp;
fn print_div_result(result: Result&lt;i32, &amp;'static str&gt;) {
    if <strong>result.is_ok()</strong> {
        println!("Result is correct");
    } else {
        println!("Result is incorrect");
    }
}
&nbsp;
fn main() {
    let z1 = div(2, 1);
    print_div_result(z1);
&nbsp;
    let z2 = div(2, 0);
    print_div_result(z2);
}
</pre>

<p>Po spuštění tohoto příkladu se vypíše:</p>

<pre>
Result is correct
Result is incorrect
</pre>

<h4>Použití predikátu is_err()</h4>

<pre>
fn div(x: i32, y: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
    if y != 0 {
        Ok(x/y)
    } else {
        Err("Divide by zero!")
    }
}
&nbsp;
fn print_div_result(result: Result&lt;i32, &amp;'static str&gt;) {
    if <strong>result.is_err()</strong> {
        println!("Result is incorrect");
    } else {
        println!("Result is correct");
    }
}
&nbsp;
fn main() {
    let z1 = div(2, 1);
    print_div_result(z1);
&nbsp;
    let z2 = div(2, 0);
    print_div_result(z2);
}
</pre>

<p>Po spuštění tohoto příkladu se vypíše:</p>

<pre>
Result is correct
Result is incorrect
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Datový typ Result a pattern matching</h2>

<p>Ve skutečnosti se často namísto predikátů a čtení zabalené hodnoty či
chybové zprávy používá pattern matching. Další příklad se nápadně podobá
příkladu, který již známe z&nbsp;předchozí části seriálu:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
    if y != 0 {
        Ok(x/y)
    } else {
        Err("Divide by zero!")
    }
}
&nbsp;
fn print_div_result(result: Result&lt;i32, &amp;'static str&gt;) {
    <strong>match result</strong> {
        <strong>Ok(value)  =&gt;</strong> println!("value: {}", value),
        <strong>Err(error) =&gt;</strong> println!("error: {}", error)
    }
}
&nbsp;
fn main() {
    let z1 = div(2, 1);
    print_div_result(z1);
&nbsp;
    let z2 = div(2, 0);
    print_div_result(z2);
}
</pre>

<p>Vidíme, že je díky pattern matchingu v&nbsp;konstrukci
<strong>match</strong> možné získat jak správnou hodnotu (pokud existuje), tak
i hodnotu reprezentující chybu.</p>

<p>Výsledek běhu tohoto příkladu:</p>

<pre>
value: 2
error: Divide by zero!
</pre>

<p>Pro připomenutí a porovnání si ukažme, jak byl pattern matching využit
společně s&nbsp;datovým typem <strong>Option</strong>:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    if y != 0 {
        Some(x/y)
    } else {
        None
    }
}
&nbsp;
fn div_and_print(x: i32, y :i32) {
    let result = div(x, y);
    println!("{:?}", result);
&nbsp;
    <strong>match</strong> result {
        <strong>None      =&gt;</strong> println!("Divide by zero"),
        <strong>Some(val) =&gt;</strong> println!("{} / {} = {}", x, y, <strong>val</strong>),
    }
&nbsp;
    println!("");
}
&nbsp;
fn main() {
    div_and_print(2, 1);
    div_and_print(2, 0);
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kontrola, zda jsou pokryty obě větve v&nbsp;konstrukci match</h2>

<p>O tom, že při pattern matchingu je v&nbsp;konstrukci <strong>match</strong>
nutné pokrýt všechny možnosti (větve) jsme se již <a
href="https://www.root.cz/clanky/rust-funkce-lambda-vyrazy-a-rozhodovaci-konstrukce-match/#k11">několikrát
zmiňovali</a>, takže si jen rychle zkontrolujme, zda to platí i pro strukturu
<strong>Result</strong>. V&nbsp;následujícím příkladu naschvál vynecháme jednu
z&nbsp;větví a zkontrolujeme průběh překladu:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
    if y != 0 {
        Ok(x/y)
    } else {
        Err("Divide by zero!")
    }
}
&nbsp;
fn print_div_result1(result: Result&lt;i32, &amp;'static str&gt;) {
    <strong>match result</strong> {
        //Ok(value)  =&gt; println!("value: {}", value),
        <strong>Err(error) =&gt;</strong> println!("error: {}", error)
    }
}
&nbsp;
fn print_div_result2(result: Result&lt;i32, &amp;'static str&gt;) {
    match result {
        Ok(value)  =&gt; println!("value: {}", value),
        <strong>//Err(error) =&gt;</strong> println!("error: {}", error)
    }
}
&nbsp;
fn main() {
    let z1 = div(2, 1);
    print_div_result1(z1);
&nbsp;
    let z2 = div(2, 0);
    print_div_result2(z2);
}
</pre>

<p>Překladač podle očekávání obě chyby snadno nalezne a vypíše přehledná
chybová hlášení:</p>

<pre>
error[E0004]: non-exhaustive patterns: `Ok(_)` not covered
  --&gt; 215_result_patern_matching_coverage.rs:10:11
   |
10 |     match result {
   |           ^^^^^^ pattern `Ok(_)` not covered
&nbsp;
error[E0004]: non-exhaustive patterns: `Err(_)` not covered
  --&gt; 215_result_patern_matching_coverage.rs:17:11
   |
17 |     match result {
   |           ^^^^^^ pattern `Err(_)` not covered
&nbsp;
error: aborting due to 2 previous errors
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Znak &bdquo;_&ldquo; použitý v&nbsp;konstrukci match</h2>

<p>V&nbsp;konstrukci <strong>match</strong> je možné namísto vzoru použít i
znak &bdquo;_&ldquo;, kterým je možné implementovat obdobu větve
<strong>default</strong> známou z&nbsp;céčkových jazyků, ale i z&nbsp;Javy či
JavaScriptu (konstrukce <strong>switch/case</strong>). Pokud tedy například
nepotřebujeme získat přesnou informaci o chybě, která vznikla, můžeme náš
skript upravit následujícím způsobem:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
    if y != 0 {
        Ok(x/y)
    } else {
        Err("Divide by zero!")
    }
}
&nbsp;
fn print_div_result(result: Result&lt;i32, &amp;'static str&gt;) {
<strong>    match result {</strong>
<strong>        Ok(value)  =&gt; println!("value: {}", value),</strong>
<strong>        _          =&gt; println!("some error")</strong>
    }
}
&nbsp;
fn main() {
    let z1 = div(2, 1);
    print_div_result(z1);
&nbsp;
    let z2 = div(2, 0);
    print_div_result(z2);
}
</pre>

<p>Výsledek běhu tohoto příkladu:</p>

<pre>
value: 2
some error
</pre>

<p>Pokud se vám pattern matching zalíbil (skutečně se jedná o velmi silnou část
Rustu), je možné upravit i funkci <strong>div</strong>, například
následovně:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
    <strong>match y</strong> {
        <strong>0 =&gt;</strong> Err("Divide by zero!"),
        <strong>_ =&gt;</strong> Ok(x / y)
    }
}
&nbsp;
fn print_div_result(result: Result&lt;i32, &amp;'static str&gt;) {
    match result {
        Ok(value)  =&gt; println!("value: {}", value),
        _          =&gt; println!("some error")
    }
}
&nbsp;
fn main() {
    let z1 = div(2, 1);
    print_div_result(z1);
&nbsp;
    let z2 = div(2, 0);
    print_div_result(z2);
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Funkce vyššího řádu <strong>map</strong></h2>

<p>Ve všech předchozích demonstračních příkladech jsme museli se strukturou
<strong>Result</strong> pracovat dosti nešikovným způsobem &ndash; při každém
přístupu bylo nutné kontrolovat, jestli je výsledek korektní
(<strong>Ok</strong>) nebo chybový (<strong>Err</strong>), což by však
v&nbsp;reálných programech bylo dosti nečitelné. Ve skutečnosti nám však
struktura <strong>Result</strong> nabízí i mnohé další možnosti. Velmi užitečná
je funkce <strong>map</strong>, která se aplikuje na výsledek, ovšem jen ve
chvíli, kdy je výsledek korektní (<strong>Ok</strong>). Díky tomu se obejdeme
bez nutnosti použití rozhodovací konstrukce či pattern matchingu.
V&nbsp;následujícím příkladu vypíšeme výsledek dělení i výsledek zvýšený o
jedničku. Povšimněte si, že do funkce <strong>map</strong> předáváme funkci
akceptující celé číslo a vracející taktéž celé číslo (o rozbalení a zabalení
výsledků se nemusíme vůbec starat):</p>

<pre>
fn div(x: i32, y: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
    if y != 0 {
        Ok(x/y)
    } else {
        Err("Divide by zero!")
    }
}
&nbsp;
fn print_div_result(result: Result&lt;i32, &amp;'static str&gt;) {
    match result {
        Ok(value)  =&gt; println!("value: {}", value),
        Err(error) =&gt; println!("error: {}", error)
    }
}
&nbsp;
fn inc(x: i32) -&gt; i32 {
    x+1
}
&nbsp;
fn main() {
    let z0 = div(0, 1);
    print_div_result(z0);
    print_div_result(z0.<strong>map(inc)</strong>);
&nbsp;
    let z1 = div(2, 1);
    print_div_result(z1);
    print_div_result(z1.<strong>map(inc)</strong>);
&nbsp;
    let z2 = div(2, 0);
    print_div_result(z2);
    print_div_result(z2.<strong>map(inc)</strong>);
}
</pre>

<p>Program bude plně funkční, a to i když použijeme <strong>map(inc)</strong>
na výsledek dělení nulou:</p>

<pre>
value: 0
value: 1
value: 2
value: 3
error: Divide by zero!
error: Divide by zero!
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Funkce vyššího řádu <strong>map_err</strong></h2>

<p>Obdobou funkce <strong>map</strong> je funkce <strong>map_err</strong>. Asi
jste již uhodli, že tato funkce vyššího řádu bude použita ve chvíli, kdy je ve
struktuře <strong>Result</strong> uložena chybová hodnota, nikoli hodnota
korektní. V&nbsp;následujícím příkladu budeme přes <strong>map_err</strong>
překládat chybová hlášení do češtiny (tento příklad je poněkud umělý). Základem
bude funkce <strong>translate</strong> transformující anglické řetězce:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
    if y != 0 {
        Ok(x/y)
    } else {
        Err("Divide by zero!")
    }
}
&nbsp;
fn print_div_result(result: Result&lt;i32, &amp;'static str&gt;) {
    match result {
        Ok(value)  =&gt; println!("value: {}", value),
        Err(error) =&gt; println!("error: {}", error)
    }
}
&nbsp;
fn translate(s: &amp;'static str) -&gt; &amp;'static str {
    if s == "Divide by zero!" {
        "Deleni nulou"
    } else {
        "Neznama chyba"
    }
}
&nbsp;
fn main() {
    let z0 = div(0, 1);
    print_div_result(z0);
    print_div_result(z0.<strong>map_err(translate)</strong>);
&nbsp;
    let z1 = div(2, 1);
    print_div_result(z1);
    print_div_result(z1.<strong>map_err(translate)</strong>);
&nbsp;
    let z2 = div(2, 0);
    print_div_result(z2);
    print_div_result(z2.<strong>map_err(translate)</strong>);
}
</pre>

<p>Výsledek běhu tohoto programu:</p>

<pre>
value: 0
value: 0
value: 2
value: 2
error: Divide by zero!
error: Deleni nulou
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Více variant chybových hlášení</h2>

<p>Díky tomu, že ve struktuře <strong>Result</strong> může být chybová hodnota
reprezentována libovolným datovým typem (na rozdíl od <strong>Option</strong>),
je možné pracovat s&nbsp;větším množstvím chybových hlášení. Můžeme si
představit funkci pro otevření souboru, načtení jeho obsahu a následné zavření
souboru &ndash; zde může dojít k&nbsp;celé řadě různých chyb (soubor nelze
otevřít, lze ho otevřít, ale ne přečíst, při čtení může dojít
k&nbsp;chybě/odpojení disku, soubor nemusí jít zavřít atd. atd.). Zkusme si
nepatrně upravit naši funkci pro dělení tak, aby rozpoznala speciální případ
0/0. Úprava se dotkne i funkce <strong>translate</strong>:</p>

<pre>
fn div(x: i32, y: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
    if <strong>y != 0</strong> {
        Ok(x/y)
    } else <strong>if x != 0</strong> {
        Err("Divide by zero!")
    } else {
        Err("Zero/zero!")
    }
}
&nbsp;
fn print_div_result(result: Result&lt;i32, &amp;'static str&gt;) {
    match result {
        Ok(value)  =&gt; println!("value: {}", value),
        Err(error) =&gt; println!("error: {}", error)
    }
}
&nbsp;
fn translate(s: &amp;'static str) -&gt; &amp;'static str {
    match s {
         "Divide by zero!" =&gt; "Deleni nulou",
         "Zero/zero!"      =&gt; "Nula delena nulou",
         _                 =&gt; "Neznama chyba"
    }
}
&nbsp;
fn main() {
    let z0 = div(0, 1);
    print_div_result(z0);
    print_div_result(z0.map_err(translate));
&nbsp;
    let z1 = div(2, 1);
    print_div_result(z1);
    print_div_result(z1.map_err(translate));
&nbsp;
    let z2 = div(2, 0);
    print_div_result(z2);
    print_div_result(z2.map_err(translate));
&nbsp;
    let z3 = div(0, 0);
    print_div_result(z3);
    print_div_result(z3.map_err(translate));
}
</pre>

<p>Podívejme se na výsledek spuštění tohoto programu:</p>

<pre>
value: 0
value: 0
value: 2
value: 2
error: Divide by zero!
error: Deleni nulou
error: Zero/zero!
error: Nula delena nulou
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Použití výčtu pro chybová hlášení</h2>

<p>Velmi často se můžeme setkat s&nbsp;programy, v&nbsp;nichž se pro
reprezentaci chybové hodnoty používá namísto pouhých řetězců výčet
(<strong>enum</strong>). Předností je snadnější práce s&nbsp;hodnotami typu
výčet a možnost tisku jmen jednotlivých prvků výčtu v&nbsp;případě, že se
použije <strong>#[derive(Debug)]</strong>. Ostatně podívejme se na příklad,
v&nbsp;němž nejprve deklarujeme výčtový typ se třemi prvky (hodnotami) a
následně ho použijeme pro reprezentaci chybových stavů. Povšimněte si, že
k&nbsp;jednotlivým prvkům/hodnotám se přistupuje s&nbsp;využitím operátoru
&bdquo;čtyřtečky&ldquo;:</p>

<pre>
#[derive(Debug)]
enum <strong>DivError</strong> {
    DivideByZero,
    DivideZeroByZero
}
&nbsp;
fn div(x: i32, y: i32) -&gt; Result&lt;i32, DivError&gt; {
    if y != 0 {
        Ok(x/y)
    } else if x != 0 {
        Err(<strong>DivError::DivideByZero</strong>)
    } else {
        Err(<strong>DivError::DivideZeroByZero</strong>)
    }
}
&nbsp;
fn print_div_result(result: Result&lt;i32, DivError&gt;) {
    match result {
        Ok(value)  =&gt; println!("value: {}", value),
        Err(error) =&gt; println!("error: {:?}", error)
    }
}
&nbsp;
fn main() {
    let z0 = div(0, 1);
    print_div_result(z0);
&nbsp;
    let z1 = div(2, 1);
    print_div_result(z1);
&nbsp;
    let z2 = div(2, 0);
    print_div_result(z2);
&nbsp;
    let z3 = div(0, 0);
    print_div_result(z3);
}
</pre>

<p>Výsledek běhu tohoto programu:</p>

<pre>
value: 0
value: 2
error: <strong>DivideByZero</strong>
error: <strong>DivideZeroByZero</strong>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly, podobně jako ve všech
předchozích částech tohoto seriálu, uloženy do Git repositáře dostupného na
adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý repositář:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>211_result_basic_usage.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/211_result_basic_usage.rs">https://github.com/tisnik/presentations/blob/master/rust/211_result_basic_usage.rs</a></td></tr>
<tr><td>212_result_is_ok.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/212_result_is_ok.rs">https://github.com/tisnik/presentations/blob/master/rust/212_result_is_ok.rs</a></td></tr>
<tr><td>213_result_is_err.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/213_result_is_err.rs">https://github.com/tisnik/presentations/blob/master/rust/213_result_is_err.rs</a></td></tr>
<tr><td>214_result_pattern_matching.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/214_result_pattern_matching.rs">https://github.com/tisnik/presentations/blob/master/rust/214_result_pattern_matching.rs</a></td></tr>
<tr><td>215_result_patern_matching_coverage.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/215_result_patern_matching_coverage.rs">https://github.com/tisnik/presentations/blob/master/rust/215_result_patern_matching_coverage.rs</a></td></tr>
<tr><td>216_result_pattern_matching_.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/216_result_pattern_matching_.rs">https://github.com/tisnik/presentations/blob/master/rust/216_result_pattern_matching_.rs</a></td></tr>
<tr><td>217_result_map.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/217_result_map.rs">https://github.com/tisnik/presentations/blob/master/rust/217_result_map.rs</a></td></tr>
<tr><td>218_result_map_err.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/218_result_map_err.rs">https://github.com/tisnik/presentations/blob/master/rust/218_result_map_err.rs</a></td></tr>
<tr><td>219_result_multiple_errors.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/219_result_multiple_errors.rs">https://github.com/tisnik/presentations/blob/master/rust/219_result_multiple_errors.rs</a></td></tr>
<tr><td>220_result_enum.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/220_result_enum.rs">https://github.com/tisnik/presentations/blob/master/rust/220_result_enum.rs</a></td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Enum std::result::Result<br />
<a href="https://doc.rust-lang.org/std/result/enum.Result.html">https://doc.rust-lang.org/std/result/enum.Result.html</a>
</li>

<li>Module std::result<br />
<a href="https://doc.rust-lang.org/std/result/">https://doc.rust-lang.org/std/result/</a>
</li>

<li>Result<br />
<a href="http://rustbyexample.com/std/result.html">http://rustbyexample.com/std/result.html</a>
</li>

<li>Rust stdlib: Option<br />
<a href="https://doc.rust-lang.org/std/option/enum.Option.html">https://doc.rust-lang.org/std/option/enum.Option.html</a>
</li>

<li>Module std::option<br />
<a href="https://doc.rust-lang.org/std/option/index.html">https://doc.rust-lang.org/std/option/index.html</a>
</li>

<li>Rust by example: option<br />
<a href="http://rustbyexample.com/std/option.html">http://rustbyexample.com/std/option.html</a>
</li>

<li>Rust by example: if-let<br />
<a href="http://rustbyexample.com/flow_control/if_let.html">http://rustbyexample.com/flow_control/if_let.html</a>
</li>

<li>Rust by example: while let<br />
<a href="http://rustbyexample.com/flow_control/while_let.html">http://rustbyexample.com/flow_control/while_let.html</a>
</li>

<li>Rust by example: Option&lt;i32&gt;<br />
<a href="http://rustbyexample.com/std/option.html">http://rustbyexample.com/std/option.html</a>
</li>

<li>An Overview of Macros in Rust<br />
<a href="http://words.steveklabnik.com/an-overview-of-macros-in-rust">http://words.steveklabnik.com/an-overview-of-macros-in-rust</a>
</li>

<li>A Practical Intro to Macros in Rust 1.0<br />
<a href="https://danielkeep.github.io/practical-intro-to-macros.html">https://danielkeep.github.io/practical-intro-to-macros.html</a>
</li>

<li>The Rust Programming Language: macros<br />
<a href="https://doc.rust-lang.org/beta/book/macros.html">https://doc.rust-lang.org/beta/book/macros.html</a>
</li>

<li>Rust by example: 15 macro_rules!<br />
<a href="http://rustbyexample.com/macros.html">http://rustbyexample.com/macros.html</a>
</li>

<li>Module std::vec<br />
<a href="https://doc.rust-lang.org/nightly/std/vec/index.html">https://doc.rust-lang.org/nightly/std/vec/index.html</a>
</li>

<li>Primitive Type isize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">https://doc.rust-lang.org/nightly/std/primitive.isize.html</a>
</li>

<li>Primitive Type usize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">https://doc.rust-lang.org/nightly/std/primitive.usize.html</a>
</li>

<li>Primitive Type array<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.array.html">https://doc.rust-lang.org/nightly/std/primitive.array.html</a>
</li>

<li>Module std::slice<br />
<a href="https://doc.rust-lang.org/nightly/std/slice/">https://doc.rust-lang.org/nightly/std/slice/</a>
</li>

<li>Rust by Example: 2.3 Arrays and Slices<br />
<a href="http://rustbyexample.com/primitives/array.html">http://rustbyexample.com/primitives/array.html</a>
</li>

<li>What is the difference between Slice and Array (stackoverflow)<br />
<a href="http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array">http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array</a>
</li>

<li>Learning Rust With Entirely Too Many Linked Lists<br />
<a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/">http://cglab.ca/~abeinges/blah/too-many-lists/book/</a>
</li>

<li>Testcase: linked list<br />
<a href="http://rustbyexample.com/custom_types/enum/testcase_linked_list.html">http://rustbyexample.com/custom_types/enum/testcase_linked_list.html</a>
</li>

<li>Operators and Overloading<br />
<a href="https://doc.rust-lang.org/book/operators-and-overloading.html">https://doc.rust-lang.org/book/operators-and-overloading.html</a>
</li>

<li>Module std::ops<br />
<a href="https://doc.rust-lang.org/std/ops/index.html">https://doc.rust-lang.org/std/ops/index.html</a>
</li>

<li>Module std::cmp<br />
<a href="https://doc.rust-lang.org/std/cmp/index.html">https://doc.rust-lang.org/std/cmp/index.html</a>
</li>

<li>Trait std::ops::Add<br />
<a href="https://doc.rust-lang.org/stable/std/ops/trait.Add.html">https://doc.rust-lang.org/stable/std/ops/trait.Add.html</a>
</li>

<li>Trait std::ops::AddAssign<br />
<a href="https://doc.rust-lang.org/std/ops/trait.AddAssign.html">https://doc.rust-lang.org/std/ops/trait.AddAssign.html</a>
</li>

<li>Trait std::ops::Drop<br />
<a href="https://doc.rust-lang.org/std/ops/trait.Drop.html">https://doc.rust-lang.org/std/ops/trait.Drop.html</a>
</li>

<li>Trait std::cmp::Eq<br />
<a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">https://doc.rust-lang.org/std/cmp/trait.Eq.html</a>
</li>

<li>Struct std::boxed::Box<br />
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">https://doc.rust-lang.org/std/boxed/struct.Box.html</a>
</li>

<li>Explore the ownership system in Rust<br />
<a href="https://nercury.github.io/rust/guide/2015/01/19/ownership.html">https://nercury.github.io/rust/guide/2015/01/19/ownership.html</a>
</li>

<li>Rust's ownership and move semantic<br/>
<a href="http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics">http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics</a>
</li>

<li>Trait std::marker::Copy<br/>
<a href="https://doc.rust-lang.org/stable/std/marker/trait.Copy.html">https://doc.rust-lang.org/stable/std/marker/trait.Copy.html</a>
</li>

<li>Trait std::clone::Clone<br />
<a href="https://doc.rust-lang.org/stable/std/clone/trait.Clone.html">https://doc.rust-lang.org/stable/std/clone/trait.Clone.html</a>
</li>

<li>The Stack and the Heap<br />
<a href="https://doc.rust-lang.org/book/the-stack-and-the-heap.html">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Why does this compile? Automatic dereferencing?<br />
<a href="https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183">https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183</a>
</li>

<li>Understanding Pointers, Ownership, and Lifetimes in Rust<br />
<a href="http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>

<li>Rust lang series episode #25 — pointers (#rust-series)<br />
<a href="https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series">https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>Destructuring and Pattern Matching<br />
<a href="https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/">https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Method Syntax<br />
<a href="https://doc.rust-lang.org/book/method-syntax.html">https://doc.rust-lang.org/book/method-syntax.html</a>
</li>

<li>Traits in Rust<br />
<a href="https://doc.rust-lang.org/book/traits.html">https://doc.rust-lang.org/book/traits.html</a>
</li>

<li>Functional Programming in Rust - Part 1 : Function Abstraction<br />
<a href="http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/">http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

