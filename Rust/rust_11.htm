<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Práce s poli v programovacím jazyku Rust</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Práce s poli v programovacím jazyku Rust</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;jedenácté části seriálu o programovacím jazyku Rust se budeme zabývat způsobem práce s&nbsp;poli, což je sice zdánlivě triviální téma, ovšem některé koncepty práce s&nbsp;poli jsou v&nbsp;Rustu specifické.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Konstruktor pro vytvoření pole</a></p>
<p><a href="#k02">2. Kontrola překročení mezí polí</a></p>
<p><a href="#k03">3. Vytvoření pole opakováním jediného prvku</a></p>
<p><a href="#k04">4. Změna prvku v&nbsp;poli: rozdíl mezi neměnitelným a měnitelným polem</a></p>
<p><a href="#k05">5. Použití iterátoru pro průchod všemi prvky pole</a></p>
<p><a href="#k06">6. Vytvoření &bdquo;řezu&ldquo; z&nbsp;pole</a></p>
<p><a href="#k07">7. Automatický výpočet horního či dolního indexu při tvorbě &bdquo;řezu&ldquo;</a></p>
<p><a href="#k08">8. Pokus o prohození horního a dolního indexu</a></p>
<p><a href="#k09">9. Výpočet &bdquo;řezu&ldquo; v&nbsp;době běhu programu</a></p>
<p><a href="#k10">10. Explicitní specifikace typů a počtu prvků v&nbsp;poli</a></p>
<p><a href="#k11">11. Specifikace pouze počtu prvků, automatické odvození jejich typů</a></p>
<p><a href="#k12">12. Alternativní možnost získání iterátoru pro krátké pole</a></p>
<p><a href="#k13">13. Dvourozměrná a vícerozměrná pole</a></p>
<p><a href="#k14">14. Použití indexů pro přístup k&nbsp;prvkům vícerozměrných polí</a></p>
<p><a href="#k15">15. Iterace přes prvky vícerozměrných polí</a></p>
<p><a href="#k16">16. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k17">17. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Konstruktor pro vytvoření pole</h2>

<p>Základní práce s&nbsp;poli není v&nbsp;Rustu nic těžkého, takže začněme
velmi jednoduchým příkladem, v&nbsp;němž si ukážeme způsob deklarace pole
s&nbsp;konstantním počtem prvků a následně výpis prvků z&nbsp;vytvořeného pole.
Nejjednodušším způsobem, jako pole vytvořit, je vypsat hodnoty všech jeho prvků
a umístit je mezi hranaté závorky. Pozor tedy na první podstatný rozdíl oproti
některým dalším céčkovým jazykům, v&nbsp;nichž se prvky uzavírají do složených
závorek. Toto pole má konstantní délku a je neměnné. Současně se jedná o
objekt, který lze bez problémů přiřadit do lokální proměnné, u které není nutné
uvádět žádný typ, protože se díky typové inferenci typ automaticky odvodí. Ve
druhé části příkladu se v&nbsp;počítané programové smyčce nastavuje hodnota
počitadla <strong>i</strong> na indexy prvků pole. Povšimněte si, jakým
způsobem se zjišťuje počet prvků pole metodou <strong>len()</strong> a jak se
přistupuje k&nbsp;<strong>i</strong>-tému prvku (zde se žádné větší překvapení
nekoná):</p>

<pre>
fn main() {
    let array = <strong>[10, 20, 30, 40]</strong>;
&nbsp;
    println!("array has {} items", <strong>array.len()</strong>);
&nbsp;
    for i in 0..<strong>array.len()</strong> {
        println!("item #{} = {}", i+1, <strong>array[i]</strong>);
    }
}
</pre>

<p>Výsledek spuštění tohoto příkladu:</p>

<pre>
array has 4 items
item #1 = 10
item #2 = 20
item #3 = 30
item #4 = 40
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Konstruktor pro vytvoření pole</h2>

<p>Jak je to s&nbsp;kontrolou mezí polí? Některé problémy zjistí již překladač,
například použití záporného indexu:</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&nbsp;
    println!("{}", array[2]);
    println!("{}", array[<strong>-1</strong>]);
}
</pre>

<p>Zde dojde k&nbsp;chybě při překladu, protože se snažíme z&nbsp;kladného
celého čísla získat číslo záporné bez přetypování:</p>

<pre>
error[E0080]: constant evaluation error
 --&gt; test.rs:5:26
  |
5 |     println!("{}", array[-1]);
  |                          ^^ unary negation of unsigned integer
&lt;std macros&gt;:2:27: 2:58 note: in this expansion of format_args!
&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)
test.rs:5:5: 5:31 note: in this expansion of println! (defined in &lt;std macros&gt;)
&nbsp;
error: aborting due to previous error
</pre>

<p>Zajímavější je situace při použití indexu, který překračuje meze pole. Index
může být známý v&nbsp;době překladu &ndash; potom překladač vypíše varování
(nikoli chybu!):</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&nbsp;
    println!("{}", array[2]);
    println!("{}", array[<strong>100</strong>]);
}
</pre>

<pre>
warning: this expression will panic at run-time
 --&gt; test.rs:5:20
  |
5 |     println!("{}", array[100]);
  |                    ^^^^^^^^^^ index out of bounds: the len is 10 but the index is 100
&lt;std macros&gt;:2:27: 2:58 note: in this expansion of format_args!
&lt;std macros&gt;:3:1: 3:54 note: in this expansion of print! (defined in &lt;std macros&gt;)
test.rs:5:5: 5:32 note: in this expansion of println! (defined in &lt;std macros&gt;)
</pre>

<p>Chyba v&nbsp;tomto případě nastane až při běhu programu:</p>

<pre>
thread 'main' panicked at 'index out of bounds: the len is 10 but the index is 100', test.rs:5
note: Run with `RUST_BACKTRACE=1` for a backtrace.
</pre>

<p>Někdy ovšem překladač neví a ani nemůže zjistit, jaký index vlastně
použijeme. V&nbsp;následujícím příkladu se index vypočte na základě počtu
proměnných prostředí (ve standardní knihovně není funkce pro náhodná čísla,
takže toto je pravděpodobně nejjednodušší způsob, jak získat hodnotu, která
není známá v&nbsp;době překladu):</p>

<pre>
use std::env;
&nbsp;
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&nbsp;
    let env_vars = env::vars_os();
&nbsp;
    let index = env_vars.count() + 100;
&nbsp;
    println!("{}", array[2]);
    println!("{}", array[index]);
}
</pre>

<p>Příklad běhové chyby (konkrétní použitý index se samozřejmě bude ve vašem
případě odlišovat):</p>

<pre>
thread 'main' panicked at 'index out of bounds: the len is 10 but the index is 174', test.rs:11
note: Run with `RUST_BACKTRACE=1` for a backtrace.
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vytvoření pole opakováním jediného prvku</h2>

<p>Existuje ještě jedna možnost vytvoření pole. Pokud potřebujeme pracovat
s&nbsp;polem, v&nbsp;němž se nachází prvky se shodnou hodnotou, je možné použít
tento zápis:</p>

<pre>
[hodnota_prvků; počet_prvků]
</pre>

<p>Pozor na rozdíl oproti dvouprvkovému pole (rozdíl spočívá v&nbsp;použití
středníku popř.&nbsp;čárky):</p>

<pre>
[prvek_1, prvek_2]
</pre>

<p>Přesvědčme se, že vytvořené pole skutečně obsahuje prvky se shodnou
hodnotou:</p>

<pre>
fn main() {
    let array = <strong>[1; 10]</strong>;
&nbsp;
    println!("array has {} items", array.len());
&nbsp;
    for i in 0..array.len() {
        println!("item #{} = {}", i+1, array[i]);
    }
}
</pre>

<p>Po překladu a spuštění dostaneme tento výsledek:</p>

<pre>
array has 10 items
item #1 = 1
item #2 = 1
item #3 = 1
item #4 = 1
item #5 = 1
item #6 = 1
item #7 = 1
item #8 = 1
item #9 = 1
item #10 = 1
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Změna prvku v&nbsp;poli: rozdíl mezi neměnitelným a měnitelným polem</h2>

<p>Z&nbsp;předchozích dvou příkladů je patrné, jak se přistupuje k&nbsp;prvkům
pole. Co se ovšem stane ve chvíli, kdy se namísto čtení prvku pokusíme nějaký
prvek změnit?</p>

<pre>
fn main() {
    let array = [10, 20, 30, 40];
&nbsp;
    <strong>array[1] = 42</strong>;
&nbsp;
    for i in 0..array.len() {
        println!("item #{} = {}", i+1, array[i]);
    }
}
</pre>

<p>Při pokusu o překlad dojde k&nbsp;chybě, která je vlastně pochopitelná, a to
z&nbsp;toho důvodu, že pole je, podobně jako další objekty, ve výchozím stavu
neměnitelné (stačí si vzpomenout, že jsme stejný problém řešili i našeho
objektu s&nbsp;komplexními čísly):</p>

<pre>
error: cannot assign to immutable indexed content `array[..]`
 --&gt; 134_immutable_array.rs:4:5
  |
4 |     array[1] = 42;
  |     ^^^^^^^^^^^^^
&nbsp;
error: aborting due to previous error
</pre>

<p>Náprava tohoto problému je velmi jednoduchá, stačí použít nám již známý
modifikátor <strong>mut</strong>:</p>

<pre>
fn main() {
    let <strong>mut</strong> array = [10, 20, 30, 40];
&nbsp;
    array[1] = 42;
&nbsp;
    for i in 0..array.len() {
        println!("item #{} = {}", i+1, array[i]);
    }
}
</pre>

<p>Nyní již zápis (modifikace) pole proběhne bez problémů:</p>

<pre>
item #1 = 10
item #2 = <strong>42</strong>
item #3 = 30
item #4 = 40
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití iterátoru pro průchod všemi prvky pole</h2>

<p>Pro pole je možné získat <i>iterátor</i>, a to pomocí metody
<strong>iter()</strong>. Typické použití iterátoru je při průchodu všemi prvky
pole:</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    let iterator = <strong>array.iter()</strong>;
&nbsp;
    for i in iterator {
        println!("{}", i);
    }
}
</pre>

<p>Většinou není nutné iterátor explicitně ukládat do proměnné, navíc by měla
mít proměnná <strong>iterator</strong> jinou oblast viditelnosti, než jsme
použili (pouze pro programovou smyčku). Následující kód je pro Rust
idiomatický:</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&nbsp;
    for i in <strong>array.iter()</strong> {
        println!("{}", i);
    }
}
</pre>

<p>Spuštění příkladu:</p>

<pre>
1
2
3
4
5
6
7
8
9
10
</pre>

<p>Iterátor vytvořený pro pole dokáže procházet jeho obsahem i pozpátku (to ale
nemusí platit pro všechny iterátory, někdy je povolen jen průchod jedním
směrem):</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&nbsp;
    for i in <strong>array.iter().rev()</strong> {
        println!("{}", i);
    }
}
</pre>

<p>Spuštění příkladu:</p>

<pre>
10
9
8
7
6
5
4
3
2
1
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření &bdquo;řezu&ldquo; z&nbsp;pole</h2>

<p>Samotná práce s&nbsp;polem tak, jak jsme si ji ukázali v&nbsp;předchozích
příkladech, vlastně kromě možnosti použití iterátoru nepřináší žádné podstatně
nové vlastnosti. V&nbsp;Rustu však můžeme z&nbsp;pole vytvořit
&bdquo;řez&ldquo;, a to podobným způsobem, s&nbsp;jakým jsme se setkali při
práci s&nbsp;řetězci. Způsob specifikace prvků, které mají být umístěny
v&nbsp;řezu, je následující:</p>

<pre>
pole[min..max]
</pre>

<p>Ovšem je nutné dát si pozor na to, že mezi řezem pole a samotným polem je
jeden podstatný rozdíl &ndash; u pole je nutné znát velikost při překladu
(mj.&nbsp;i proto, aby správně fungovala správa paměti), zatímco u řezu se tyto
informace mohou zjišťovat až při běhu programu. Proto následující příklad
nepůjde přeložit, i když je syntakticky správně:</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    let array2 = array[2..6];
&nbsp;
    for i in array2.iter() {
        println!("{}", i);
    }
}
</pre>

<p>Překladač vypíše toto chybové hlášení:</p>
<pre>
error[E0277]: the trait bound `[{integer}]: std::marker::Sized` is not satisfied
 --&gt; 138_array_slice_incorrect.rs:3:9
  |
3 |     let array2 = array[2..6];
  |         ^^^^^^
  |
  = note: `[{integer}]` does not have a constant size known at compile-time
  = note: all local variables must have a statically known size
&nbsp;
error: aborting due to previous error
</pre>

<p>Řešením je použití znaku &amp; (reference). Interně je totiž
&bdquo;řez&ldquo; reprezentován objektem obsahujícím ukazatel na pole
(resp.&nbsp;na první prvek v&nbsp;řezu) a délku řezu. Následující příklad je
již zapsán korektně a půjde přeložit:</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    let array2 = &amp;array[2..6];
&nbsp;
    for i in array2.iter() {
        println!("{}", i);
    }
}
</pre>

<p>Spuštění příkladu:</p>

<pre>
3
4
5
6
</pre>

<p>Díky tomu, že řez je vlastně jen pohled (<i>view</i>) do vlastního pole, je
vytvoření řezu velmi efektivní operace a samozřejmě je možné vytvářet řezy řezů
(nezapomeňte na to, že meze se vždy vztahují k&nbsp;té struktuře, ze které se
řez vytváří a nikoli k&nbsp;původnímu poli):</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    let array2 = &amp;array[2..8];
    let array3 = &amp;array2[2..4];
&nbsp;
    for i in array3.iter() {
        println!("{}", i);
    }
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Automatický výpočet horního či dolního indexu při tvorbě &bdquo;řezu&ldquo;</h2>

<p>Ve skutečnosti je možné při deklaraci &bdquo;řezu&ldquo; vynechat dolní mez,
horní mez či obě meze. V&nbsp;takovém případě se do dolní meze automaticky
dosadí nula a do horní meze <strong>pole.len()-1</strong>. Vše je velmi
jednoduché, ostatně se jedná o podobný koncept, který nalezneme i
v&nbsp;dalších programovacích jazycích, takže další tři příklady nebudou
vyžadovat delší povídání:</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    let array2 = &amp;array[5..];
&nbsp;
    for i in array2.iter() {
        println!("{}", i);
    }
}
</pre>

<p>Spuštění příkladu:</p>

<pre>
6
7
8
9
10
</pre>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    let array2 = &amp;array[..5];
&nbsp;
    for i in array2.iter() {
        println!("{}", i);
    }
}
</pre>

<p>Spuštění příkladu:</p>

<pre>
1
2
3
4
5
</pre>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    let array2 = &amp;array[..];
&nbsp;
    for i in array2.iter() {
        println!("{}", i);
    }
}
</pre>

<p>Spuštění příkladu:</p>

<pre>
1
2
3
4
5
6
7
8
9
10
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Pokus o prohození horního a dolního indexu</h2>

<p>Pokud se pokusíme prohodit horní a dolní index, nebude překladač nic
namítat, protože obecně platí, že meze řezů jsou zjišťovány až v&nbsp;čase běhu
programu. Následující příklad se tedy přeloží:</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    let array2 = &amp;array[8..2];
&nbsp;
    for i in array2.iter() {
        println!("{}", i);
    }
}
</pre>

<p>Ovšem při spuštění dojde k&nbsp;běhové chybě:</p>

<pre>
thread 'main' panicked at 'slice index starts at 8 but ends at 2', ../src/libcore/slice.rs:555
note: Run with `RUST_BACKTRACE=1` for a backtrace.
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výpočet &bdquo;řezu&ldquo; v&nbsp;době běhu programu</h2>

<p>V&nbsp;úvodní kapitole jsme si řekli, že velikost pole je známá již
v&nbsp;době překladu. Ovšem u řezů tomu tak být nemusí, takže dolní i horní mez
je možné vypočítat až v&nbsp;čase běhu programu. Následující demonstrační
příklad je poněkud umělý, a to opět z&nbsp;toho důvodu, že ve standardní
knihovně není obsažena funkce pro generování náhodných čísel a bylo by nutné
vytvářet projekt (což je u takto krátkých příkladů pravděpodobně zbytečné):</p>

<pre>
use std::env;
&nbsp;
fn main() {
    let env_vars = env::vars_os();
&nbsp;
    let min = env_vars.count() % 5;
    let max = min + 5;
&nbsp;
    println!("min: {}", min);
    println!("max: {}", max);
&nbsp;
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    let array2 = &amp;array[min..max];
&nbsp;
    for i in array2.iter() {
        println!("{}", i);
    }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Explicitní specifikace typů a počtu prvků v&nbsp;poli</h2>

<p>V&nbsp;některých případech je nutné specifikovat typ a popř.&nbsp;i počet
prvků v&nbsp;poli. Jedná se o úplné určení typu pole a používá se pro něj
zápis:</p>

<pre>
[typ_prvku; počet_prvků]))
</pre>

<p>Typ se zapisuje za jméno proměnné (či parametru funkce) a je od ní oddělen
dvojtečkou:</p>

<pre>
fn main() {
    let array : <strong>[i32; 10]</strong> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&nbsp;  
    for i in array.iter() {
        println!("{}", i);
    }
}
</pre>

<p>Pokud se kombinuje specifikace typu pole a současně i jeho inicializace, je
počet prvků kontrolován. Nemůže být ani menší:</p>

<pre>
fn main() {
    let array : [i32; 20] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&nbsp;
    for i in array.iter() {
        println!("{}", i);
    }
}
</pre>

<p>Chyba při překladu:</p>

<pre>
error[E0308]: mismatched types
 --&gt; 146_array_type_specifier_few_items.rs:2:29
  |
2 |     let array : [i32; 20] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an array with a fixed size of 20 elements, found one with 10 elements
  |
  = note: expected type `[i32; 20]`
  = note:    found type `[i32; 10]`
&nbsp;
error: aborting due to previous error
</pre>

<p>Ale nemůže být ani větší:</p>

<pre>
fn main() {
    let array : [i32; 5] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&nbsp;
    for i in array.iter() {
        println!("{}", i);
    }
}
</pre>

<p>Chyba při překladu:</p>

<pre>
error[E0308]: mismatched types
 --&gt; 147_array_type_specifier_more_items.rs:2:28
  |
2 |     let array : [i32; 5] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an array with a fixed size of 5 elements, found one with 10 elements
  |
  = note: expected type `[i32; 5]`
  = note:    found type `[i32; 10]`
&nbsp;
error: aborting due to previous error
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Specifikace pouze počtu prvků, automatické odvození jejich typů</h2>

<p>V&nbsp;některých případech je možné specifikovat pouze počet prvků a nechat
překladač, aby si sám odvodil typ prvků pole. Namísto uvedení typu se použije
znak podtržítka. Následující příklad je sice poněkud umělý, ale uvedený zápis
se může hodit například při deklaraci funkcí vracejících pole, jehož typ je
určen až ve chvíli, kdy je funkce volána:</p>

<pre>
fn main() {
    let array : [_; 10] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&nbsp;
    for i in array.iter() {
        println!("{}", i);
    }
}
</pre>

<p>Kdy se vůbec uvádí počet prvků? Příkladem může být vytvoření
&bdquo;prázdného&ldquo; pole, což je příklad, který se do značné míry podobá
céčkové alokaci dynamického pole:</p>

<pre>
use std::mem;
&nbsp;
fn main() {
    let mut array : [i32; 2] = unsafe{mem::uninitialized()};
&nbsp;
    array[0] = 100;
    array[1] = 200;
&nbsp;
    println!("{}", array[0]);
    println!("{}", array[1]);
}
</pre>

<p>S&nbsp;významem bloku &bdquo;unsafe&ldquo; se ještě seznámíme.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Alternativní možnost získání iterátoru pro krátké pole</h2>

<p>Zajímavé a v&nbsp;některých případech užitečné může být získání iterátoru
pro krátké pole pouze s&nbsp;použitím znaku &amp;. To je umožněno díky
implementaci traitu <i>IntoIterator</i>, ovšem kvůli omezení současných
překladačů je možné zkrácený zápis použít pouze u polí, které mají maximálně 32
prvků. Následující příklad tedy bude funkční:</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&nbsp;
    println!("array has {} items", array.len());
&nbsp;
    for i in &amp;array {
        println!("{}", i);
    }
}
</pre>

<p>V&nbsp;dalším příkladu již máme pole se čtyřiceti prvky, takže tento příklad
nepůjde přeložit:</p>

<pre>
fn main() {
    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
    ];
&nbsp;
    println!("array has {} items", array.len());
&nbsp;
    for i in &amp;array {
        println!("{}", i);
    }
}
</pre>

<p>Chyba při překladu:</p>

<pre>
error[E0277]: the trait bound `&amp;[{integer}; 40]: std::iter::Iterator` is not satisfied
  --&gt; 150_array_into_iterator_too_big.rs:10:5
   |
10 |     for i in &amp;array {
   |     ^
   |
   = note: `&amp;[{integer}; 40]` is not an iterator; maybe try calling `.iter()` or a similar method
   = note: required by `std::iter::IntoIterator::into_iter`
&nbsp;
error: aborting due to previous error
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Dvourozměrná a vícerozměrná pole</h2>

<p>V&nbsp;programovacím jazyku Rust je samozřejmě možné kromě běžných
jednorozměrných polí použít i pole s&nbsp;větším počtem rozměrů. Musí se však
jednat o matice, tj.&nbsp;počet prvků v&nbsp;každém řádku pole musí být
konstantní. Pokud tato vlastnost není vyhovující, je lepší namísto polí použít
objekty typu vektor (tyto objekty si popíšeme v&nbsp;navazujícím článku).</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Použití indexů pro přístup k&nbsp;prvkům vícerozměrných polí</h2>

<p>Inicializace dvourozměrného pole je velmi jednoduchá, nesmíme pouze
zapomenout na použití hranatých závorek. Ve druhé části příkladu je ukázáno,
jak je možné přistupovat k&nbsp;prvkům dvourozměrného pole (zde uvedený zápis
není pro Rust idiomatický). Přístup k&nbsp;prvkům dvourozměrného pole je
stejný, jak například v&nbsp;céčku:</p>

<pre>
fn main() {
    let array = [<strong>[1,2,3,4],</strong>
                 <strong>[5,6,7,8],</strong>
                 <strong>[9,10,11,12]</strong>];
&nbsp;
    println!("array has {} items", array.len());
&nbsp;
    for i in 0..<strong>array.len()</strong> {
        for j in 0..<strong>array[i].len()</strong> {
            print!("{}\t", <strong>array[i][j]</strong>);
        }
        println!("");
    }
}
</pre>

<p>Ověřme si, zda překladač kontroluje fakt, že je skutečně zadána matice.
Druhý řádek pole je delší:</p>

<pre>
fn main() {
    let array = [[1,2,3,4],
                 <strong>[5,6,7,8,0,0,0,0]</strong>,
                 [9,10,11,12]];
&nbsp;
    println!("array has {} items", array.len());
&nbsp;
    for i in 0..array.len() {
        for j in 0..array[i].len() {
            print!("{}\t", array[i][j]);
        }
        println!("");
    }
}
</pre>

<p>Tato chyba je skutečně nalezena:</p>

<pre>
error[E0308]: mismatched types
 --&gt; 151_matrix.rs:3:18
  |
3 |                  [5,6,7,8,0,0,0,0],
  |                  ^^^^^^^^^^^^^^^^^ expected an array with a fixed size of 4 elements, found one with 8 elements
  |
  = note: expected type `[{integer}; 4]`
  = note:    found type `[{integer}; 8]`
&nbsp;
error: aborting due to previous error
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Iterace přes prvky vícerozměrných polí</h2>

<p>V&nbsp;dnešním posledním příkladu je ukázáno, jakým způsobem se většinou
prochází prvky dvourozměrného pole s&nbsp;použitím iterátorů. Ve vnější
programové smyčce jsem použil zkrácený způsob získání iterátoru, který ovšem
platí pouze pro matice s&nbsp;maximálně 32 řádky. Ve vnitřní smyčce se již
používá explicitní získání iterátoru pro vybraný řádek:</p>

<pre>
fn main() {
    let array = [[1,2,3,4],
                 [5,6,7,8],
                 [9,10,11,12]];
&nbsp;
    println!("array has {} items", array.len());
&nbsp;
    for vector in <strong>&amp;array</strong> {
        for item in <strong>vector.iter()</strong> {
            print!("{}\t", item);
        }
        println!("");
    }
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly, podobně jako ve všech
předchozích částech tohoto seriálu, uloženy do Git repositáře dostupného na
adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý repositář:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>132_new_array.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/132_new_array.rs ">https://github.com/tisnik/presentations/blob/master/rust/132_new_array.rs</a></td></tr>
<tr><td>133_new_array_repeat_item.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/133_new_array_repeat_item.rs ">https://github.com/tisnik/presentations/blob/master/rust/133_new_array_repeat_item.rs</a></td></tr>
<tr><td>134_immutable_array.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/134_immutable_array.rs ">https://github.com/tisnik/presentations/blob/master/rust/134_immutable_array.rs</a></td></tr>
<tr><td>135_mutable_array.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/135_mutable_array.rs ">https://github.com/tisnik/presentations/blob/master/rust/135_mutable_array.rs</a></td></tr>
<tr><td>136_foreach_array.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/136_foreach_array.rs ">https://github.com/tisnik/presentations/blob/master/rust/136_foreach_array.rs</a></td></tr>
<tr><td>137_foreach_array_reverse.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/137_foreach_array_reverse.rs ">https://github.com/tisnik/presentations/blob/master/rust/137_foreach_array_reverse.rs</a></td></tr>
<tr><td>138_array_slice_incorrect.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/138_array_slice_incorrect.rs ">https://github.com/tisnik/presentations/blob/master/rust/138_array_slice_incorrect.rs</a></td></tr>
<tr><td>139_array_slice_correct.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/139_array_slice_correct.rs ">https://github.com/tisnik/presentations/blob/master/rust/139_array_slice_correct.rs</a></td></tr>
<tr><td>140_array_slice_no_upper_limit.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/140_array_slice_no_upper_limit.rs ">https://github.com/tisnik/presentations/blob/master/rust/140_array_slice_no_upper_limit.rs</a></td></tr>
<tr><td>141_array_slice_no_lower_limit.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/141_array_slice_no_lower_limit.rs ">https://github.com/tisnik/presentations/blob/master/rust/141_array_slice_no_lower_limit.rs</a></td></tr>
<tr><td>142_array_slice_no_limits.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/142_array_slice_no_limits.rs ">https://github.com/tisnik/presentations/blob/master/rust/142_array_slice_no_limits.rs</a></td></tr>
<tr><td>143_array_slice_reverse_limits.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/143_array_slice_reverse_limits.rs ">https://github.com/tisnik/presentations/blob/master/rust/143_array_slice_reverse_limits.rs</a></td></tr>
<tr><td>144_array_slice_limits_at_runtime.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/144_array_slice_limits_at_runtime.rs ">https://github.com/tisnik/presentations/blob/master/rust/144_array_slice_limits_at_runtime.rs</a></td></tr>
<tr><td>145_array_type_specifier.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/145_array_type_specifier.rs ">https://github.com/tisnik/presentations/blob/master/rust/145_array_type_specifier.rs</a></td></tr>
<tr><td>146_array_type_specifier_few_items.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/146_array_type_specifier_few_items.rs ">https://github.com/tisnik/presentations/blob/master/rust/146_array_type_specifier_few_items.rs</a></td></tr>
<tr><td>147_array_type_specifier_more_items.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/147_array_type_specifier_more_items.rs">https://github.com/tisnik/presentations/blob/master/rust/147_array_type_specifier_more_items.rs</a></td></tr>
<tr><td>148_array_infer_type.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/148_array_infer_type.rs ">https://github.com/tisnik/presentations/blob/master/rust/148_array_infer_type.rs</a></td></tr>
<tr><td>149_array_into_iterator.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/149_array_into_iterator.rs ">https://github.com/tisnik/presentations/blob/master/rust/149_array_into_iterator.rs</a></td></tr>
<tr><td>150_array_into_iterator_too_big.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/150_array_into_iterator_too_big.rs ">https://github.com/tisnik/presentations/blob/master/rust/150_array_into_iterator_too_big.rs</a></td></tr>
<tr><td>151_matrix.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/151_matrix.rs ">https://github.com/tisnik/presentations/blob/master/rust/151_matrix.rs</a></td></tr>
<tr><td>152_matrix_iterators.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/152_matrix_iterators.rs ">https://github.com/tisnik/presentations/blob/master/rust/152_matrix_iterators.rs</a></td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Odkazy na Internetu</h2>

<ol>

<li>Primitive Type array<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.array.html">https://doc.rust-lang.org/nightly/std/primitive.array.html</a>
</li>

<li>Module std::slice<br />
<a href="https://doc.rust-lang.org/nightly/std/slice/">https://doc.rust-lang.org/nightly/std/slice/</a>
</li>

<li>Rust by Example: 2.3 Arrays and Slices<br />
<a href="http://rustbyexample.com/primitives/array.html">http://rustbyexample.com/primitives/array.html</a>
</li>

<li>What is the difference between Slice and Array (stackoverflow)<br />
<a href="http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array">http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array</a>
</li>

<li>Learning Rust With Entirely Too Many Linked Lists<br />
<a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/">http://cglab.ca/~abeinges/blah/too-many-lists/book/</a>
</li>

<li>Testcase: linked list<br />
<a href="http://rustbyexample.com/custom_types/enum/testcase_linked_list.html">http://rustbyexample.com/custom_types/enum/testcase_linked_list.html</a>
</li>

<li>Operators and Overloading<br />
<a href="https://doc.rust-lang.org/book/operators-and-overloading.html">https://doc.rust-lang.org/book/operators-and-overloading.html</a>
</li>

<li>Module std::ops<br />
<a href="https://doc.rust-lang.org/std/ops/index.html">https://doc.rust-lang.org/std/ops/index.html</a>
</li>

<li>Module std::cmp<br />
<a href="https://doc.rust-lang.org/std/cmp/index.html">https://doc.rust-lang.org/std/cmp/index.html</a>
</li>

<li>Trait std::ops::Add<br />
<a href="https://doc.rust-lang.org/stable/std/ops/trait.Add.html">https://doc.rust-lang.org/stable/std/ops/trait.Add.html</a>
</li>

<li>Trait std::ops::AddAssign<br />
<a href="https://doc.rust-lang.org/std/ops/trait.AddAssign.html">https://doc.rust-lang.org/std/ops/trait.AddAssign.html</a>
</li>

<li>Trait std::ops::Drop<br />
<a href="https://doc.rust-lang.org/std/ops/trait.Drop.html">https://doc.rust-lang.org/std/ops/trait.Drop.html</a>
</li>

<li>Trait std::cmp::Eq<br />
<a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">https://doc.rust-lang.org/std/cmp/trait.Eq.html</a>
</li>

<li>Struct std::boxed::Box<br />
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">https://doc.rust-lang.org/std/boxed/struct.Box.html</a>
</li>

<li>Explore the ownership system in Rust<br />
<a href="https://nercury.github.io/rust/guide/2015/01/19/ownership.html">https://nercury.github.io/rust/guide/2015/01/19/ownership.html</a>
</li>

<li>Rust's ownership and move semantic<br/>
<a href="http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics">http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics</a>
</li>

<li>Trait std::marker::Copy<br/>
<a href="https://doc.rust-lang.org/stable/std/marker/trait.Copy.html">https://doc.rust-lang.org/stable/std/marker/trait.Copy.html</a>
</li>

<li>Trait std::clone::Clone<br />
<a href="https://doc.rust-lang.org/stable/std/clone/trait.Clone.html">https://doc.rust-lang.org/stable/std/clone/trait.Clone.html</a>
</li>

<li>The Stack and the Heap<br />
<a href="https://doc.rust-lang.org/book/the-stack-and-the-heap.html">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Why does this compile? Automatic dereferencing?<br />
<a href="https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183">https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183</a>
</li>

<li>Understanding Pointers, Ownership, and Lifetimes in Rust<br />
<a href="http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>

<li>Rust lang series episode #25 — pointers (#rust-series)<br />
<a href="https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series">https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>Destructuring and Pattern Matching<br />
<a href="https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/">https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Method Syntax<br />
<a href="https://doc.rust-lang.org/book/method-syntax.html">https://doc.rust-lang.org/book/method-syntax.html</a>
</li>

<li>Traits in Rust<br />
<a href="https://doc.rust-lang.org/book/traits.html">https://doc.rust-lang.org/book/traits.html</a>
</li>

<li>Functional Programming in Rust - Part 1 : Function Abstraction<br />
<a href="http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/">http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

