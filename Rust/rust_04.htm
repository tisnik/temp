<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Rust: struktury, n-tice a vlastnictví objektů</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Rust: struktury, n-tice a vlastnictví objektů</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Čtvrtá část seriálu o programovacím jazyce Rust je věnována popisu struktur (struct) a n-tic. Následně se budeme zabývat problematikou vlastnictví objektů a s&nbsp;ní souvisejících sémantik &bdquo;move&ldquo; a &bdquo;copy&ldquo;</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Struktury, přístup k&nbsp;prvkům struktur</a></p>
<p><a href="#k02">2. Pořadí inicializace prvků struktury</a></p>
<p><a href="#k03">3. Měnitelné a neměnitelné struktury</a></p>
<p><a href="#k04">4. Částečná kopie prvků struktury do struktury jiné</a></p>
<p><a href="#k05">5. N-tice (tuple)</a></p>
<p><a href="#k06">6. Destructuring n-tice a struktury</a></p>
<p><a href="#k07">7. Deklarace typu prvků n-tice</a></p>
<p><a href="#k08">8. Speciální případ &ndash; n-tice s&nbsp;jediným prvkem</a></p>
<p><a href="#k09">9. Předání struktury do funkce</a></p>
<p><a href="#k10">10. Předání struktury do funkce přes referenci</a></p>
<p><a href="#k11">11. Změna obsahu struktury ve funkci</a></p>
<p><a href="#k12">12. Vlastnictví objektů a sémantika &bdquo;move&ldquo;</a></p>
<p><a href="#k13">13. Sémantika &bdquo;copy&ldquo;</a></p>
<p><a href="#k14">14. Mutace naklonované struktury</a></p>
<p><a href="#k15">15. Pravidlo pro použití rysů copy a clone</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Struktury, přístup k&nbsp;prvkům struktur</h2>

<p>V&nbsp;programovacím jazyku Rust je možné deklarovat takzvané <i>struktury
(struct)</i>, které jsou někdy známé i pod jménem <i>záznamy (records)</i>.
Struktury obsahují datové položky, které jsou jednoznačně pojmenované
(v&nbsp;rámci jmenného prostoru struktury) a je pro ně definován i datový typ.
Zachováno je i pořadí položek ve struktuře, což může být v&nbsp;některých
případech důležité. Deklarací struktury vzniká nový uživatelský datový typ.
Zkusme si například vytvořit strukturu představující komplexní číslo,
v&nbsp;němž je reálná a imaginární složka tvořena hodnotami typu <i>f32</i>
(32bitové číslo s&nbsp;plovoucí řádovou čárkou):</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
</pre>

<p>Poté můžeme velmi snadno vytvořit hodnotu typu <strong>Complex</strong> a
přiřadit ji do proměnné <strong>c1</strong>. Následně je možné přistupovat
k&nbsp;položkám struktury pomocí zápisu <strong>proměnná.položka</strong>, což
se nijak neliší od dalších programovacích jazyků:</p>

<pre>
fn main() {
    let c1 = <strong>Complex{real:0.0, imag:0.0}</strong>;
    println!("complex number: {}+{}i", <strong>c1.real</strong>, <strong>c1.imag</strong>);
}
</pre>

<p>Samozřejmě je možné explicitně specifikovat typ proměnné (vyznačená část
kódu), jinak si typ překladač odvodí automaticky:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    let <strong>c1:Complex</strong> = Complex{real:0.0, imag:0.0};
    println!("complex number: {}+{}i", c1.real, c1.imag);
}
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Pořadí inicializace prvků struktury</h2>

<p>Vzhledem k&nbsp;tomu, že se při inicializaci prvků struktury musí jednotlivé
prvky explicitně pojmenovat, nezáleží na jejich pořadí. V&nbsp;následujícím
příkladu se nejprve inicializuje imaginární položka a poté položka reálná,
výsledkem ale bude stejný objekt, jako v&nbsp;předchozím příkladu:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    // nezalezi na poradi inicializace prvku
    let c1 = Complex{<strong>imag:0.0, real:0.0</strong>};
    println!("complex number: {}+{}i", c1.real, c1.imag);
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Měnitelné a neměnitelné struktury</h2>

<p>Podobně, jako je tomu i u dalších typů proměnných, jsou i struktury
implicitně neměnitelné. Pokud se pokusíme o změnu prvků struktury (tedy o
zápis), je tato operace odhalena už při překladu:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    let c1 = Complex{real:0.0, imag:0.0};
    c1.real = 10.0;
    c1.imag = 20.0;
    println!("complex number: {}+{}i", c1.real, c1.imag);
}
</pre>

<p>Překladač by měl vypsat přibližně toto chybové hlášení, z&nbsp;něhož je
jasně patrné, že se pokoušíme přepsat neměnitelnou (<i>immutable</i>)
hodnotu:</p>

<pre>
error: cannot assign to immutable field `c1.real`
 --&gt; 51_mutable_struct1_err.rs:8:5
  |
8 |     c1.real = 10.0;
  |     ^^^^^^^^^^^^^^
&nbsp;
error: cannot assign to immutable field `c1.imag`
 --&gt; 51_mutable_struct1_err.rs:9:5
  |
9 |     c1.imag = 20.0;
  |     ^^^^^^^^^^^^^^
&nbsp;
error: aborting due to 2 previous errors
</pre>

<p>Pokud se programátoři setkají s&nbsp;předchozím chybovým hlášením, mohou se
pokusit o úpravu deklarace struktury, konkrétně o přidání modifikátoru
<strong>mut</strong> k&nbsp;datovým položkám (k&nbsp;této úpravě mohou
&bdquo;lákat&ldquo; i chybová hlášení zobrazená před tímto odstavcem). Zkusme
si tedy příklad upravit:</p>

<pre>
struct Complex {
    <strong>mut</strong> real: f32,
    <strong>mut</strong> imag: f32,
}
&nbsp;
fn main() {
    let c1 = Complex{real:0.0, imag:0.0};
    c1.real = 10.0;
    c1.imag = 20.0;
    println!("complex number: {}+{}i", c1.real, c1.imag);
}
</pre>

<p>Tato úprava ovšem odporuje syntaxi programovacího jazyka Rust a je špatná i
sémanticky, protože rys měnitelnosti či neměnitelnosti
(<i>mutability/immutability</i>) se váže nikoli k&nbsp;datovému typu, ale
k&nbsp;proměnné. Ostatně ani překladač nebude příliš spokojený:</p>

<pre>
error: expected identifier, found keyword `mut`
 --&gt; 52_mutable_struct2_err.rs:2:5
  |
2 |     mut real: f32,
  |     ^^^
&nbsp;
error: expected `:`, found `real`
 --&gt; 52_mutable_struct2_err.rs:2:9
  |
2 |     mut real: f32,
  |         ^^^^
&nbsp;
error: aborting due to previous error
</pre>

<p>Korektní vytvoření měnitelné proměnné typu struktura vypadá následovně:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    <strong>let mut c1</strong> = Complex{real:0.0, imag:0.0};
    println!("complex number: {}+{}i", c1.real, c1.imag);
    c1.real = 10.0;
    c1.imag = 20.0;
    println!("complex number: {}+{}i", c1.real, c1.imag);
}
</pre>

<p>Samozřejmě je možné bez problémů vytvořit jak měnitelnou, tak i neměnitelnou
strukturu (což je jeden z&nbsp;důvodů, proč je vlastnost
měnitelnosti/neměnitelnosti vztažená k&nbsp;proměnným):</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    <strong>let mut c1</strong> = Complex{real:0.0, imag:0.0};
    <strong>let c2</strong> = Complex{real:2.0, imag:4.0};
    println!("complex number #1: {}+{}i", c1.real, c1.imag);
    println!("complex number #2: {}+{}i", c2.real, c2.imag);
    c1.real = 10.0;
    c1.imag = 20.0;
    println!("complex number: {}+{}i", c1.real, c1.imag);
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Částečná kopie prvků struktury do struktury jiné</h2>

<p>Programovací jazyk Rust podporuje i vytvoření nové struktury s&nbsp;tím, že
se hodnoty jednotlivých položek zkopírují ze struktury jiné. Syntaxe zápisu je
patrná z&nbsp;následujícího příkladu. Proměnná <strong>c2</strong> je navázána
na komplexní číslo, jehož reálná složka je určena explicitně a složka
imaginární je zkopírována. Proměnná <strong>c3</strong> vznikla kompletní kopií
<strong>c2</strong>:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    let c1 = Complex{real:0.0, imag:0.0};
    let c2 = Complex{real:2.0, <strong>..c1</strong>};
    let c3 = Complex{<strong>..c2</strong>};
    println!("complex number 1: {}+{}i", c1.real, c1.imag);
    println!("complex number 2: {}+{}i", c2.real, c2.imag);
    println!("complex number 3: {}+{}i", c3.real, c3.imag);
}
</pre>

<p>O tom, že se provede kopie položek, se snadno přesvědčíme:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    let <strong>mut</strong> c1 = Complex{real:0.0, imag:0.0};
    let <strong>mut</strong> c2 = Complex{real:2.0, ..c1};
    let <strong>mut</strong> c3 = Complex{..c2};
    println!("complex number 1: {}+{}i", c1.real, c1.imag);
    println!("complex number 2: {}+{}i", c2.real, c2.imag);
    println!("complex number 3: {}+{}i", c3.real, c3.imag);
    <strong>c1.imag = 100.0;</strong>
    println!("complex number 1: {}+{}i", c1.real, c1.imag);
    println!("complex number 2: {}+{}i", c2.real, c2.imag);
    println!("complex number 3: {}+{}i", c3.real, c3.imag);
}
</pre>

<p>Po spuštění:</p>

<pre>
complex number 1: 0+0i
complex number 2: 2+0i
complex number 3: 2+0i
complex number 1: 0+100i
complex number 2: 2+0i
complex number 3: 2+0i
</pre>

<p>Změna imaginární složky komplexního čísla <strong>c1</strong> nemá vliv na
čísla <strong>c2</strong> a <strong>c3</strong>.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. N-tice (tuple)</h2>

<p>Jedním ze základních strukturovaných datových typů podporovaných jazykem
Rust jsou n-tice (<i>tuple</i>). Prvky n-tice jsou uspořádány (v&nbsp;pořadí
jejich zápisu) a nemusí být stejného datového typu. Konstruktor pro vytvoření
n-tice je podobný zápisu známému z&nbsp;Pythonu &ndash; prvky n-tice se
zapisují do kulatých závorek a oddělují se čárkami (s&nbsp;jednou výjimkou
specifikovanou níže). Zajímavý je způsob přístupu k&nbsp;prvkům n-tice, protože
se používá zápis <strong>n_tice.index</strong> (s&nbsp;tečkou, nikoli
s&nbsp;hranatými závorkami), přičemž indexy začínají nulou, stejně jako u polí.
Podívejme se na jednoduchý příklad:</p>

<pre>
fn main() {
    let c1 = (1.0, 2.0);
    let c2 = (0.0, 0.0);
    println!("complex number 1: {}+{}i", c1.0, c1.1);
    println!("complex number 2: {}+{}i", c2.0, c2.1);
}
</pre>

<p>N-tice lze samozřejmě předávat jako parametry funkcí a funkce mohou n-tice
vracet jako svoji návratovou hodnotu. Jak se dozvíme v&nbsp;dalším textu,
podporují n-tice sémantiku Copy a rys Clone (to ovšem jen za předpokladu, že ji
podporují i všechny prvky n-tice, splněno je to pro primitivní datové typy
atd.).</p>

<p>Samozřejmě jsou podporovány i n-tice obsahující další n-tice. Při přístupu
k&nbsp;prvkům takové datové struktury je nutné si dát pozor na správné
uzávorkování (nestačí jen napsat x.1.3.1):</p>

<pre>
fn main() {
    let x = (1.0, (2, 3, 4, (true, false)));
    println!("{}", x.0);
    println!("{}", (x.1).1);
    println!("{}", ((x.1).3).1);
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Destructuring n-tice a struktury</h2>

<p>V&nbsp;některých programovacích jazycích se setkáme s&nbsp;termínem
<i>destructuring</i>, kterým se většinou označuje &bdquo;rozložení&ldquo;
nějaké datové struktury na položek a přiřazení těchto položek do proměnných
(viz například Python či Clojure). V&nbsp;programovacím jazyce Rust podobnou
funkcionalitu taktéž nalezneme; je součástí obecnějšího konceptu nazývaného
&bdquo;pattern matching&ldquo;, o němž jsme se již částečně zmínili
v&nbsp;úvodních článcích. Podívejme se, jak je možné nejprve vytvořit
dvouprvkovou n-tici, uložit ji do proměnné <strong>c1</strong> a následně tuto
n-tici rozložit na jednotlivé položky, které se uloží do proměnných
<strong>real</strong> a <strong>imag</strong> (Pythonisti by neměli zapomenout
na závorky):</p>

<pre>
fn main() {
    let c1 = (1.0, 2.0);
&nbsp;
    let (real, imag) = c1;
&nbsp;
    println!("complex number: {}+{}i", real, imag);
}
</pre>

<p>Destructuring pro struktury se zapisuje následovně (opět se jedná o součást
konceptu pattern matchingu). Povšimněte si, že nové proměnné se jmenují stejně,
jako položky struktury:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    let c1 = Complex{imag:0.0, real:0.0};
    let Complex{real,imag} = c1;
    println!("complex number: {}+{}i", real, imag);
}
</pre>

<p>Popř.&nbsp;je možné explicitně zapsat nová jména pro proměnné:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn main() {
    let c1 = Complex{imag:0.0, real:0.0};
    let Complex{real:r,imag:i} = c1;
    println!("complex number: {}+{}i", r, i);
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Deklarace typu prvků n-tice</h2>

<p>Pokud je to nutné, lze explicitně deklarovat typy prvků n-tice. Většinou to
sice není zapotřebí, protože si typy dokáže odvodit samotný překladač, ale
někdy může být vhodné se vyjádřit explicitně. V&nbsp;tomto případě vypadá zápis
následovně:</p>

<pre>
fn main() {
    let c1:(f32,f32) = (1.0, 2.0);
    let c2:(f32,f32) = (0.0, 0.0);
&nbsp;
    println!("complex number 1: {}+{}i", c1.0, c1.1);
    println!("complex number 2: {}+{}i", c2.0, c2.1);
}
</pre>

<p>Připomeňme si, že podobně (tedy za dvojtečkou zapsanou za jménem proměnné)
jsme zapisovali i specifikaci jiných datových typů, takže se v&nbsp;případě
n-tic vlastně nejedná o nic nového:</p>

<pre>
let mut i:i8 = 0;
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Speciální případ &ndash; n-tice s&nbsp;jediným prvkem</h2>

<p>Speciálním případem, který dobře znají například programátoři používající
programovací jazyk Python, je n-tice obsahující jediný prvek. Taková n-tice
není nijak zajímavá ze sémantického hlediska, ovšem z&nbsp;hlediska
sémantického ano, protože prvky n-tice se zapisují do kulatých závorek, které
mají v&nbsp;programovacím jazyku Rust i další významy. Aby se skutečně
zajistilo, že překladač pochopí zápis jednoprvkové n-tice, je nutné za tímto
prvkem zapsat čárku:</p>

<pre>
fn main() {
    let x = (1.0);
    let y = (1.0,);
&nbsp;
    println!("x {}", x);
    println!("y {}", y.0);
}
</pre>

<p>V&nbsp;tomto příkladu je do proměnné <strong>x</strong> přiřazena hodnota 10
(vypočtená výrazem v&nbsp;závorkách) a do proměnné <strong>y</strong> je
přiřazena jednoprvková n-tice.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Předání struktury do funkce</h2>

<p>Struktury je možné (zdánlivě bez problémů) předat nějaké funkci, což by
nemělo být příliš překvapivé, protože po deklaraci struktury se jedná o
plnohodnotný datový typ. V&nbsp;následujícím příkladu je ukázáno, jakým
způsobem se předání může provést:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn main() {
    let c1 = Complex{real:1.0, imag:2.0};
    println!("complex number: {}+{}i", c1.real, c1.imag);
    print_complex(c1);
}
</pre>

<p>Tento příklad bude fungovat bez problémů, takže by se mohlo zdát, že
předávání parametrů v&nbsp;Rustu pracuje stejně jako například v&nbsp;céčku. Ve
skutečnosti je však sémantika zásadně odlišná, protože pokud je nějaký objekt
předán funkci (nebo jen přiřazen k&nbsp;jiné proměnné), stává se tato funkce
vlastníkem objektu a současně původní vlastník objektu (ve funkci main) toto
vlastnictví ztrácí. Co to znamená v&nbsp;praxi ukazuje další příklad,
v&nbsp;němž zavoláme funkci <strong>print_complex()</strong>, která se stane
vlastníkem objektu navázaného na proměnnou <strong>c1</strong>. Z&nbsp;tohoto
důvodu poslední příkaz ve funkci main nepůjde přeložit:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn main() {
    let c1 = Complex{real:1.0, imag:2.0};
    println!("complex number: {}+{}i", c1.real, c1.imag);
    print_complex(c1);
    println!("complex number: {}+{}i", c1.real, c1.imag);
}
</pre>

<p>Z&nbsp;chybového hlášení jsem pro přehlednost odstranil nerelevantní řádky
týkající se expanze makra <strong>println!</strong>. Význam některých termínů
(&bdquo;move&ldquo;, &bdquo;Copy trait&ldquo;) bude vysvětlen
v&nbsp;navazujících kapitolách, konkrétně v&nbsp;kapitole <a href="#k12">12</a>
a <a href="#k13">13</a>:</p>

<pre>
error[E0382]: use of moved value: `c1.real`
  --&gt; 60_passing_struct_err.rs:14:40
   |
13 |     print_complex(c1);
   |                   -- value moved here
14 |     println!("complex number: {}+{}i", c1.real, c1.imag);
   |                                        ^^^^^^^ value used here after move
60_passing_struct_err.rs:14:5: 14:58 note: in this expansion of println! (defined in <std macros>)
   |
   = note: move occurs because `c1` has type `Complex`, which does not implement the `Copy` trait
&nbsp;
error[E0382]: use of moved value: `c1.imag`
  --&gt; 60_passing_struct_err.rs:14:49
   |
13 |     print_complex(c1);
   |                   -- value moved here
14 |     println!("complex number: {}+{}i", c1.real, c1.imag);
   |                                                 ^^^^^^^ value used here after move
60_passing_struct_err.rs:14:5: 14:58 note: in this expansion of println! (defined in <std macros>)
   |
   = note: move occurs because `c1` has type `Complex`, which does not implement the `Copy` trait
&nbsp;
error: aborting due to 2 previous errors
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Předání struktury do funkce přes referenci</h2>

<p>Předchozí problém je možné obejít předáním komplexního čísla referencí, což
je téma, kterému jsme se věnovali minule. Povšimněte si, že se ve funkci
<strong>print_complex</strong> stále přistupuje k&nbsp;prvkům struktury
s&nbsp;využitím operátoru tečky a nikoli přes operátor -&gt;, který čtenáři
pravděpodobně znají z&nbsp;céčka a C++:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:&amp;Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn main() {
    let c1 = Complex{real:1.0, imag:2.0};
    println!("complex number: {}+{}i", c1.real, c1.imag);
    print_complex(&amp;c1);
    println!("complex number: {}+{}i", c1.real, c1.imag);
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Změna obsahu struktury ve funkci</h2>

<p>Pokud budete potřebovat změnit obsah struktury ve funkci, musí se samozřejmě
použít modifikátor <strong>mut</strong>, a to jak při uložení struktury do
proměnné, tak i v&nbsp;deklaraci funkce. Překlad následujícího příkladu skončí
s&nbsp;chybou, protože se pokoušíme změnit položku neměnitelné hodnoty:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:&amp;Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn add_real(c:&amp;Complex,real:f32) {
    c.real += real;
}
&nbsp;
fn main() {
    let c1 = Complex{real:1.0, imag:2.0};
    print_complex(&amp;c1);
    add_real(&amp;c1, 41.);
    print_complex(&amp;c1);
}
</pre>

<pre>
error: cannot assign to immutable field `c.real`
  --&gt; test.rs:11:5
   |
11 |     c.real += real;
   |     ^^^^^^^^^^^^^^
&nbsp;
error: aborting due to previous error
</pre>

<p>Stačí však malá úprava spočívající v&nbsp;použití modifikátoru
<strong>mut</strong>:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:&amp;Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn add_real(<strong>c:&amp;mut</strong> Complex,real:f32) {
    c.real += real;
}
&nbsp;
fn main() {
    let <strong>mut c1</strong> = Complex{real:1.0, imag:2.0};
    print_complex(&amp;c1);
    add_real(<strong>&amp;mut</strong> c1, 41.);
    print_complex(&amp;c1);
}
</pre>

<p>Povšimněte si, že překladači nelze &bdquo;vnutit&ldquo;, aby neměnitelnou
strukturu začal považovat za strukturu měnitelnou:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:&amp;Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn add_real(c:&amp;mut Complex,real:f32) {
    c.real += real;
}
&nbsp;
fn main() {
    let c1 = Complex{real:1.0, imag:2.0};
    print_complex(&amp;c1);
    add_real(&amp;mut c1, 41.);
    print_complex(&amp;c1);
}
</pre>

<p>Překlad tohoto příkladu skončí s&nbsp;následující chybou:</p>

<pre>
error: cannot borrow immutable local variable `c1` as mutable
  --&gt; test.rs:17:19
   |
15 |     let c1 = Complex{real:1.0, imag:2.0};
   |         -- use `mut c1` here to make mutable
16 |     print_complex(&amp;c1);
17 |     add_real(&amp;mut c1, 41.);
   |                   ^^ cannot borrow mutably
&nbsp;
error: aborting due to previous error
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vlastnictví objektů a sémantika &bdquo;move&ldquo;</h2>

<p>Vraťme se ještě k&nbsp;problematice předávání a vypůjčování vlastnictví
objektů, s&nbsp;nímž jsme se již setkali <a href="#k09">v&nbsp;deváté
kapitole</a>. Zkusme si vytvořit jednodušší příklad, v&nbsp;němž vytvoříme
komplexní číslo, přiřadíme ho k&nbsp;proměnné <strong>c1</strong>, posléze ho
přiřadíme k&nbsp;proměnné <strong>c2</strong> a následně proměnnou
<strong>c2</strong> použijeme při volání funkce
<strong>print_complex</strong>:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn main() {
    let c1 = Complex{real:1.0, imag:2.0};
    let c2 = c1;
    print_complex(c2);
}
</pre>

<p>Tento příklad bude fungovat, protože se vlastnictví komplexního čísla
postupně předává od <strong>c1</strong> přes <strong>c2</strong> až do funkce
<strong>print_complex</strong>. Ovšem již při nepatrné změně dojde k&nbsp;chybě
při překladu, protože se pokoušíme přistoupit ke komplexnímu číslu přes
<strong>c1</strong>, které ho již nevlastní:</p>

<pre>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn main() {
    let c1 = Complex{real:1.0, imag:2.0};
    let c2 = c1;
    <strong>print_complex(c1);</strong>
}
</pre>

<p>V&nbsp;tomto případě překladač zobrazí následující chybové hlášení u
posledního programového řádku:</p>

<pre>
error[E0382]: use of moved value: `c1`
  --&gt; test.rs:13:19
   |
12 |     let c2 = c1;
   |         -- value moved here
13 |     print_complex(c1);
   |                   ^^ value used here after move
   |
   = note: move occurs because `c1` has type `Complex`, which does not implement the `Copy` trait
&nbsp;
error: aborting due to previous error
</pre>

<p>Důležité je si uvědomit, proč vlastně překladač hlídá vlastnictví objektů.
Předpokládejme, že namísto pouhých struktur pracujeme například s&nbsp;vektory.
Ty jsou představovány objekty se dvěma částmi &ndash; jedna část obsahuje prvky
vektoru, druhá část pak různé další atributy, například délku vektoru.
Přiřazení typu <strong>let v1=vec![1,2,3]; let v2=v1;</strong> musí
mj.&nbsp;zajistit, aby se při volání destruktorů (zde konkrétně na konci bloku)
vektor z&nbsp;paměti uvolnil jen jedenkrát, popř.&nbsp;aby přiřazení provedla
&bdquo;hlubokou kopii&ldquo; (<i>deep copy</i>) objektu (tím pádem se
destruktor zavolá pro každý objekt zvlášť, protože po provedení hluboké
kopie/naklonování získáme dva samostatné objekty). V&nbsp;jazyce Rust je
implicitně podporována takzvaná sémantika &bdquo;move&ldquo; znamenající, že po
přenesení vlastnictví již není možné původní proměnnou (či parametr) použít a
tudíž se ani nemusíme starat o to, kdo a v&nbsp;jakém okamžiku bude volat
destruktory.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Sémantika &bdquo;copy&ldquo;</h2>

<p>Kromě sémantiky &bdquo;move&ldquo; je možné (explicitně) použít takzvanou
sémantiku &bdquo;copy&ldquo;, která určuje, že se namísto předání vlastnictví,
například volané funkci, provede zkopírování hodnoty (ve skutečnosti se zde
ponechávají možnosti pro optimalizace na úrovni LLVM, ale tím se prozatím
nebudeme zabývat). Z&nbsp;pohledu programátora je zajištění takové
funkcionality pro struktury jednoduché &ndash; musí pouze specifikovat, že jeho
struktura má rys (<i>trait</i>) Copy a Clone:</p>

<pre>
<strong>#[derive(Copy, Clone)]</strong>
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn main() {
    let c1 = Complex{real:1.0, imag:2.0};
    print_complex(c1);
    let c2 = c1;
    print_complex(c2);
}
</pre>

<p>Poznámka: nejsem si jistý tím, jestli se <i>trait</i> má skutečně překládat
jako &bdquo;rys&ldquo; či zda vůbec oficiální překlad existuje, ovšem další
možnosti &bdquo;atribut&ldquo; či &bdquo;vlastnost&ldquo; už se používají
v&nbsp;odlišném významu (pro překlad slov <i>attribute</i> a <i>property</i>).
Prozatím můžeme <i>trait</i> pokládat za rozšířené rozhraní, které kromě
hlaviček metod obsahuje i jejich těla, ale už nikoli stavové informace (podobně
jako rozhraní v&nbsp;Javě 8, které ovšem nemá všechny vlastnosti traitů). To,
že má nějaký typ či objekt určitý rys (trait) tedy není zajištěno přímým
děděním.</p>

<p>Specifikací rysu Clone je specifikováno, že se má namísto předání
vlastnictví vytvořit hluboká kopie objektu (zde tedy našeho komplexního čísla).
Interně se hluboká kopie implementuje ve funkci <strong>.clone()</strong>.
Specifikace rysu Copy určuje již zmíněnou sémantiku &bdquo;copy&ldquo;. Je
nutné dávat pozor na to, že rys Copy vyžaduje i implementaci rysu Clone (naopak
to však neplatí). To znamená, že můžeme mít strukturu, která je klonovatelná,
ale nepoužije se pro ni sémantika &bdquo;copy&ldquo;.</p>

<p>Poznámka: základní datové typy implementují rys Clone, samotné přiřazení je
zde navíc jednodušší, protože postačuje mělká kopie.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Mutace naklonované struktury</h2>

<p>Pokud je objekt, resp.&nbsp;v&nbsp;našem případě datová struktura
naklonován, je umístěn do odlišné oblasti operační paměti, než původní objekt.
To je sice pro neměnitelné (<i>immutable</i>) datové struktury jen nepatrná
změna, ovšem v&nbsp;následujícím demonstračním příkladu je ukázáno, co se
stane, když použijeme měnitelné datové struktury. První struktura je
zkonstruována a přiřazena k&nbsp;proměnné <strong>c1</strong>
s&nbsp;modifikátorem <strong>mut</strong>, což umožní změnu datových položek.
Posléze je provedena hluboká kopie a přiřazení této kopie k&nbsp;proměnné
<strong>c2</strong>, taktéž s&nbsp;modifikátorem <strong>mut</strong>:</p>

<pre>
#[derive(Copy, Clone)]
struct Complex {
    real: f32,
    imag: f32,
}
&nbsp;
fn print_complex(c:Complex) {
    println!("complex number: {}+{}i", c.real, c.imag);
}
&nbsp;
fn main() {
    let mut c1 = Complex{real:1.0, imag:2.0};
    print_complex(c1);
    let mut c2 = c1;
    c1.real = 0.;
    c2.real = 1000.;
    print_complex(c1);
    print_complex(c2);
}
</pre>

<p>Po spuštění příkladu je patrné, že změna datové položky jedné struktury nemá
žádný vliv na stejně pojmenovanou datovou položku struktury druhé,
tj.&nbsp;struktury začaly být na sobě nezávislé (to je přesně ta sémantika,
kterou jsme vyžadovali):</p>

<pre>
complex number: 1+2i
complex number: 0+2i
complex number: 1000+2i
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Pravidlo pro použití rysů copy a clone</h2>

<p>Zkusme si nyní změnit naši datovou strukturu <strong>Complex</strong>
takovým způsobem, že její prvky nebudou typu <strong>f32</strong> (tedy
32bitové číslo s&nbsp;plovoucí řádovou čárkou), ale bude se jednat o další
uživatelsky definovanou strukturu nazvanou <strong>Coordinate</strong>. Tato
struktura obsahuje jen jedinou položku, která je typu <strong>f32</strong>.
Upravený program vypadá následovně:</p>

<pre>
struct Coordinate {
    value: f32
}
&nbsp;
#[derive(Copy, Clone)]
struct Complex {
    real: Coordinate,
    imag: Coordinate,
}
&nbsp;
fn main() {
}
</pre>

<p>Pokus o překlad se v&nbsp;tomto případě nepovede:</p>

<pre>
error[E0204]: the trait `Copy` may not be implemented for this type
 --&gt; 67_copy_trait_impossible.rs:5:10
  |
5 | #[derive(Copy, Clone)]
  |          ^^^^ field `real` does not implement `Copy`
67_copy_trait_impossible.rs:5:10: 5:14 note: in this expansion of #[derive(Copy)] (defined in 67_copy_trait_impossible.rs)
&nbsp;
error: aborting due to previous error
</pre>

<p>Je tomu tak z&nbsp;toho prostého důvodu, protože datová struktura
<strong>Complex</strong> je sice klonovatelná, ale její položky už nikoli, což
je jeden z&nbsp;předpokladů úspěšného vytvoření úplné kopie objektu. Náprava je
jednoduchá &ndash; vlastnosti Copy a Clone deklarujeme i pro strukturu
<strong>Coordinate</strong>:</p>

<pre>
#[derive(Copy, Clone)]
struct Coordinate {
    value: f32
}
&nbsp;
#[derive(Copy, Clone)]
struct Complex {
    real: Coordinate,
    imag: Coordinate,
}
&nbsp;
fn main() {
}
</pre>

<p>Důvod, proč překlad původní datové struktury:</p>

<pre>
#[derive(Copy, Clone)]
struct Complex {
    real: f32,
    imag: f32,
}
</pre>

<p>proběhl bez chybových hlášení spočívá v&nbsp;tom, že základní datové typy,
včetně <strong>f32</strong>, <a
href="https://doc.rust-lang.org/stable/std/primitive.f32.html">rys Clone
implementují</a>.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Explore the ownership system in Rust<br />
<a href="https://nercury.github.io/rust/guide/2015/01/19/ownership.html">https://nercury.github.io/rust/guide/2015/01/19/ownership.html</a>
</li>

<li>Rust's ownership and move semantic<br/>
<a href="http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics">http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics</a>
</li>

<li>Trait std::marker::Copy<br/>
<a href="https://doc.rust-lang.org/stable/std/marker/trait.Copy.html">https://doc.rust-lang.org/stable/std/marker/trait.Copy.html</a>
</li>

<li>Trait std::clone::Clone<br />
<a href="https://doc.rust-lang.org/stable/std/clone/trait.Clone.html">https://doc.rust-lang.org/stable/std/clone/trait.Clone.html</a>
</li>

<li>The Stack and the Heap<br />
<a href="https://doc.rust-lang.org/book/the-stack-and-the-heap.html">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Why does this compile? Automatic dereferencing?<br />
<a href="https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183">https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183</a>
</li>

<li>Understanding Pointers, Ownership, and Lifetimes in Rust<br />
<a href="http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>

<li>Rust lang series episode #25 — pointers (#rust-series)<br />
<a href="https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series">https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>Destructuring and Pattern Matching<br />
<a href="https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/">https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Functional Programming in Rust - Part 1 : Function Abstraction<br />
<a href="http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/">http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

