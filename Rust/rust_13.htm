<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Práce s makry v programovacím jazyku Rust</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Práce s makry v programovacím jazyku Rust</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Důležitou součástí programovacího jazyka Rust je jeho systém maker umožňující zjednodušení zápisu některých programových konstrukcí. Oproti makrosystému známému z C či C++ je makrosystém v&nbsp;Rustu bezpečnější, což si ostatně ukážeme na několika příkladech.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Práce s&nbsp;makry v&nbsp;programovacím jazyku Rust</a></p>
<p><a href="#k02">2. Makra ve vyšších programovacích jazycích</a></p>
<p><a href="#k03">3. Dvě varianty maker pro Rust 0.x a stabilní varianta pro Rust 1.x</a></p>
<p><a href="#k04">4. První makro: tisk zprávy na standardní výstup</a></p>
<p><a href="#k05">5. Za jakých okolností a jakým způsobem překladač hlásí chyby v&nbsp;makrech?</a></p>
<p><a href="#k06">6. Metaproměnné v&nbsp;makrech</a></p>
<p><a href="#k07">7. Rozdíl mezi textovými substitucemi a makry zapisovanými do AST</a></p>
<p><a href="#k08">8. Volání funkcí v&nbsp;makru (rozdíl mezi compile time a runtime)</a></p>
<p><a href="#k09">9. Pravidla pro určení, která větev makra se má expandovat</a></p>
<p><a href="#k10">10. Složitější pravidla a použití separátoru =&gt;</a></p>
<p><a href="#k11">11. Typický demonstrační příklad: makro pro trasování vyhodnocování výrazů</a></p>
<p><a href="#k12">12. Vylepšení trasovacího makra a použití <strong>stringify!</strong></a></p>
<p><a href="#k13">13. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Práce s&nbsp;makry v&nbsp;programovacím jazyku Rust</h2>

<p>Jedním z&nbsp;poměrně propracovaných konceptů programovacího jazyka Rust je
jeho systém maker, který programátorům umožňuje v&nbsp;případě potřeby vytvářet
i složitější programové konstrukce popř.&nbsp;si ušetřit práci a nechat si část
programového kódu vygenerovat. Je to umožněno především díky existenci takového
typu makrosystému, který je založen na nepřímé manipulaci se symboly, které
vzniknou až po <i>parsingu</i> zdrojového kódu a které tvoří AST (<i>Abstract
Syntax Tree</i>). Ovšem hned na tomto místě je vhodné poznamenat, že makra
používaná v&nbsp;jazyku Rust nemají mnoho společného s&nbsp;makry, které známe
například z&nbsp;jazyků C či C++, popř.&nbsp;s&nbsp;makry, na jejichž
zpracování je založen jazyk <i>m4</i> (ostatně některé typické a známé problémy
klasických céčkových maker si ukážeme v&nbsp;dalším textu).</p>

<p>Poznámka: i když se systém maker v C a Rustu v&nbsp;mnoha ohledech odlišuje,
mají jednu důležitou vlastnost společnou &ndash; jsou zpracována již
v&nbsp;čase překladu (<i>compile time</i>) a nikoli v&nbsp;čase běhu programu
(<i>runtime</i>).</p>

<p>S&nbsp;makry jsme se již setkali a ve zdrojovém kódu je poznáme velmi snadno
podle toho, že se za jejich jméno zapisuje vykřičník. To je užitečné, protože
použití makra se sice podobá volání funkce či metody, ovšem mechanismus použití
makra je zcela odlišný. V&nbsp;následujícím kódu jsou makra zvýrazněna tučným
písmem:</p>

<pre>
fn main() {
    let vector = <strong>vec!</strong>[1, 2, 3, 4, 5];
&nbsp;
    println!("vector has {} items", vector.len());
&nbsp;
    for i in 0..vector.len() {
        <strong>println!</strong>("item #{} = {}", i+1, vector[i]);
    }
}
</pre>

<pre>
fn main() {
    let vector = <strong>vec!</strong>[1; 10];
&nbsp;
    println!("vector has {} items", vector.len());
&nbsp;
    for i in 0..vector.len() {
        <strong>println!</strong>("item #{} = {}", i+1, vector[i]);
    }
}
</pre>

<p>Z&nbsp;těchto dvou ukázek je patrné, kde lze makra použít:</p>

<ul>

<li>&bdquo;Nové&ldquo; programové konstrukce, zde konkrétně možnost vytvoření
vektoru s&nbsp;použitím syntaxe vyhrazené původně pro pole.</li>

<li>Situace, kdy je zapotřebí přistupovat nejenom k&nbsp;vyhodnocenému výrazu,
ale i k&nbsp;jeho původní formě.</li>

</ul>



<p><a name="k02"></a></p>
<h2 id="k02">2. Makra ve vyšších programovacích jazycích</h2>

<p>V&nbsp;programovacích jazycích C, C++ i m4 se makra používají pro
&bdquo;pouhé&ldquo; provádění textových substitucí v&nbsp;průběhu načítání
zdrojových kódů, zatímco makrosystém implementovaný v&nbsp;jazyku Rust je
založen na modifikaci AST, což na jednu stranu umožňuje mnohem hlubší zásahy do
kódu, na stranu druhou jsou makra bezpečnější (&bdquo;hygienická&ldquo;).
V&nbsp;tomto ohledu má jazyk Rust poměrně blízko k&nbsp;LISPovským jazykům,
v&nbsp;nichž je většinou makrosystém prakticky nedílnou součástí programovacího
jazyka, protože jsou v&nbsp;něm realizovány mnohdy i základní programové
konstrukce (navíc je LISP homoikonickým jazykem, což situaci dále
zjednodušuje). Asi nejtypičtějším příkladem použití maker v&nbsp;LISPu je makro
<strong>loop</strong> použité v&nbsp;Common Lispu (na druhou stranu někteří
vývojáři soudí, že podobná makra zbytečně do Common Lispu přidávají imperativní
kód). Některé vlastnosti tohoto makra jsou popsány na stránce <a
href="http://www.ai.sri.com/pkarp/loop.html">http://www.ai.sri.com/pkarp/loop.html</a>.
Podobným způsobem se s&nbsp;makry pracuje i v&nbsp;dalších jazycích založených
na LISPu; příkladem je <a
href="https://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">Clojure</a>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Dvě varianty maker pro Rust 0.x a stabilní varianta pro Rust 1.x</h2>

<p>Ve starších verzích programovacího jazyka Rust bylo možné používat dva
paralelní makrosystémy. Jeden typ maker se nazývat běžně <i>makra</i>, druhý
typ pak <i>compiler plugins</i>. Každý z&nbsp;těchto systémů měl své přednosti
ale i zápory. Pravděpodobně největším záporem pluginů byl (a doposud je) fakt,
že je do jisté míry závislý na interních strukturách překladače. To znamená, že
by se mohl celý Rust stát závislým na jediném překladači, takže se tvůrci
tohoto jazyka rozhodli, že prozatím bude oficiálně podporován pouze jeden
makrosystém. Pokud ke stabilizaci <i>compiler plugins</i> nakonec dojde, bude
možné v&nbsp;těchto makrech přímo manipulovat s&nbsp;AST, což by mohlo vést
k&nbsp;tomu, že bude možné si upravit samotnou sémantiku Rustu (což má opět své
výhody, ale i mnohé zápory).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První makro: tisk zprávy na standardní výstup</h2>

<p>Ukažme si nejprve velmi jednoduché makro, které v&nbsp;místě svého použití
vygeneruje příkaz <strong>println!("Hello!");</strong>. Shodou okolností je i
tento příkaz makrem, to však ve skutečnosti vůbec nevadí, protože makra je
možné zpracovávat rekurzivně. Deklarace nového makra zpočátku vypadá poněkud
zvláštně, a to kvůli tomu, že jedno makro může mít ve skutečnosti několik podob
(viz další kapitoly). Makro je pojmenované <strong>hello_world</strong> a při
jeho použití se nevyžadují žádné parametry (to zajišťují první prázdné
závorky):</p>

<pre>
macro_rules! hello_world {
    () =&gt; (
        println!("Hello!");
    )
}
</pre>

<p>Použití takto jednoduchého makra vypadá podobně jako volání funkce, pouze
nesmíme zapomenout na přidání vykřičníku na konec jména makra:</p>

<pre>
fn main() {
    hello_world!();
}
</pre>

<p>Po překladu a spuštění se skutečně na standardní výstup vypíše řetězec
&bdquo;Hello!&ldquo;:</p>

<pre>
Hello!
</pre>

<p>Pokud budete někdy potřebovat zjistit, jak se makro v&nbsp;čase překladu
vašeho zdrojového kódu expanduje, je možné použít volbu
<strong>--pretty=expanded</strong>. Tato volba je prozatím takzvaně
&bdquo;nestabilní&ldquo; (výstup se může v&nbsp;budoucnosti změnit), což
vyžaduje použití další volby <strong>-Z unstable-options</strong> a navíc
musíme počítat s&nbsp;tím, že překladač vypíše varovná hlášení:</p>

<pre>
rustc --pretty=expanded -Z unstable-options 187_macro_hello.rs
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Za jakých okolností a jakým způsobem překladač hlásí chyby v&nbsp;makrech?</h2>

<p>Již v&nbsp;předchozích článcích jsme se přesvědčili o tom, že jednou
z&nbsp;velmi dobrých vlastností překladače Rustu jsou (relativně) srozumitelná
chybová hlášení, takže si vyzkoušejme, jak je tomu v&nbsp;případě použití maker
(protože například v&nbsp;případě céčka bývá složité najít skutečnou chybu).
V&nbsp;následujícím příkladu se v&nbsp;makru volá neexistující funkce
<strong>foobar</strong>:</p>

<pre>
macro_rules! hello_world {
    () =&gt; (
        <strong>foobar</strong>("Hello!");
    )
}
&nbsp;
fn main() {
    hello_world!();
}
</pre>

<p>V&nbsp;tomto velmi jednoduchém případě překladač velmi přesně určil, kde
k&nbsp;chybě došlo a navíc i zjistil, ve kterém místě programového kódu
nalezneme expanzi problémového makra (připomeňme si, že první číslo za názvem
souboru značí číslo řádku):</p>

<pre>
 --&gt; 188_error_in_expansion.rs:3:9
  |
3 |         foobar("Hello!");
  |         ^^^^^^
188_error_in_expansion.rs:8:5: 8:20 note: in this expansion of hello_world! (defined in 188_error_in_expansion.rs)
&nbsp;
error: aborting due to previous error
</pre>

<p>Pokud ovšem makro nikde nebudeme volat, k&nbsp;žádné chybě při překladu ani
v&nbsp;runtime nedojde. To je další rozdíl oproti běžným funkcím, které se
překládají a kontrolují vždy, i když ve skutečnosti nemusí být nikdy
volány:</p>

<pre>
macro_rules! hello_world {
    () =&gt; (
        <strong>foobar</strong>("Hello!");
    )
}
&nbsp;
fn main() {
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Metaproměnné v&nbsp;makrech</h2>

<p>Makro, které jsme si představili v&nbsp;předchozích dvou kapitolách, má ve
skutečnosti velmi omezené možnosti použití, protože mu nemůžeme předat žádné
parametry. Zkusme si tedy vytvořit nepatrně složitější makro akceptující jeden
parametr, který se bude jmenovat <strong>$expression</strong>. Někdy se tento
parametr označuje názvem metaproměnná (<i>metavariable</i>):</p>

<pre>
macro_rules! trace {
    (<strong>$expression</strong>:expr) =&gt; (
        println!("{:?}", <strong>$expression</strong>);
    )
}
&nbsp;
fn main() {
    trace!(1+2);
}
</pre>

<p>Povšimněte si, že za jménem parametru/metaproměnné se nachází označení
jejího druhu (<i>designator</i>). V&nbsp;současnosti jsou povoleny následující
označení jednotlivých typů uzlů v&nbsp;AST:</p>

<ol>
<li>expr (pravděpodobně nejčastěji používaný &ndash; výraz)</li>
<li>ident (taktéž často používaný &ndash; jméno proměnné či funkce)</li>
<li>block (programový blok umístěný ve složených závorkách)</li>
<li>item (funkce, struktura, modul atd.)</li>
<li>pat (pattern)</li>
<li>stmt (statement, celý příkaz)</li>
<li>path (například ::std::mem::replace)</li>
<li>stmt (statement)</li>
<li>tt (token tree)</li>
<li>ty (type)</li>
</ol>

<p>Tento příklad po svém spuštění vypíše výslednou hodnotu výrazu 1+2, ovšem do
makra se ve skutečnosti předává <i>celý výraz</i>, nikoli až jeho výsledek:</p>

<pre>
3
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Rozdíl mezi textovými substitucemi a makry zapisovanými do AST</h2>

<p>Již <a href="#k01">v&nbsp;úvodní kapitole</a> jsme si naznačili, že makra
v&nbsp;Rustu se odlišují od maker používaných v&nbsp;jazycích C a C++.
V&nbsp;céčku je totiž expanze maker součástí preprocesoru, který používá velmi
zjednodušený pohled na zdrojové kódy, takže může provádět pouze relativně
omezené textové substituce. To vede k&nbsp;některým známým problémům.
Podívejme se například na následující příklad, v&nbsp;němž máme naivní
deklaraci makra určeného pro výpočet druhé mocniny. Následně je toto makro
použito při výpočtu druhé mocniny hodnoty 10 a taktéž druhé mocniny výrazu
5+5:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
#define <strong>sqr(x) x*x</strong>
&nbsp;
int main(void)
{
    printf("%d\n", sqr(10));
    printf("%d\n", sqr(5+5));
    return 0;
}
</pre>

<p>Podle způsobu použití makra by bylo možné očekávat, že se dvakrát vypíše
hodnota 100, ve skutečnosti tomu tak ale není:</p>

<pre>
100
35
</pre>

<p>Celkem jednoduše zjistíme proč, a to použitím preprocesoru jazyka C:</p>

<pre>
cpp 191_expansion_in_c.c
</pre>

<p>Na konci výstupu preprocesoru nalezneme zdrojový kód funkce
<strong>main</strong> s&nbsp;expandovaným makrem. Z&nbsp;této expanze je ihned
patrné, kde nastal problém &ndash; namísto (5+5)*(5+5) se počítá 5+5*5+5, což
ovšem přesně odpovídá způsobu expanze makra a provedení pouhé textové
substituce &ndash; náhradě jména makra za jeho tělo:</p>

<pre>
int main(void)
{
    printf("%d\n", 10*10);
    printf("%d\n", 5+5*5+5);
    return 0;
}
</pre>

<p>Jedno z&nbsp;běžných řešení tohoto problému spočívá v&nbsp;použití závorek
okolo všech parametrů makra v&nbsp;jeho těle, tedy například takto:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
#define <strong>sqr(x) (x)*(x)</strong>
&nbsp;
int main(void)
{
    printf("%d\n", sqr(10));
    printf("%d\n", sqr(5+5));
&nbsp;   
    int x = 2;
    printf("%d\n", sqr(x));
    printf("%d\n", sqr(x++));
&nbsp;
    return 0;
}
</pre>

<p>Nyní již dostaneme v&nbsp;první části správné výsledky, ovšem poslední
volání se možná bude lišit od očekávání (funkce by se chovala jinak a vracela
by 9, nikoli 6):</p>

<pre>
100
100
4
6
</pre>

<p>Překladač (minimálně gcc) správně hlásí potenciální problémy:</p>

<pre>
gcc -Wall -ansi 192_expansion_in_c_2
192_expansion_in_c_2.c: In function ‘main’:
192_expansion_in_c_2.c:12:25: warning: operation on ‘x’ may be undefined [-Wsequence-point]
     printf("%d\n", sqr(x++));
&nbsp;                         ^
192_expansion_in_c_2.c:3:17: note: in definition of macro ‘sqr’
 #define sqr(x) (x)*(x)
</pre>

<p>Pro zajímavost se podívejme, jak expanze vypadá u
&bdquo;uzávorkovaných&ldquo; parametrů:</p>

<pre>
int main(void)
{
    printf("%d\n", (10)*(10));
    printf("%d\n", (5+5)*(5+5));
&nbsp;
    int x = 2;
    printf("%d\n", (x)*(x));
    printf("%d\n", (x++)*(x++));
&nbsp;
    return 0;
}
</pre>

<p>Naproti tomu v&nbsp;Rustu tento problém nemáme, neboť makra nejsou
implementována textovou expanzí, ale přímou modifikací AST. Povšimněte si, že
v&nbsp;těle makra žádné nadbytečné závorky není nutné zapisovat (operátor ++
v&nbsp;Rustu neexistuje):</p>

<pre>
macro_rules! sqr {
    ($expression:expr) =&gt; ($expression * $expression);
}
&nbsp;
fn main() {
    println!("{}", sqr!(10));
    println!("{}", sqr!(5+5));
&nbsp;
    let x = 2;
    println!("{}", sqr!(x));
    println!("{}", sqr!(x+1));
}
</pre>

<p>Výsledek po spuštění:</p>

<pre>
100
100
4
9
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Volání funkcí v&nbsp;makru (rozdíl mezi compile time a runtime)</h2>

<p>Makra se od běžných funkcí liší především v&nbsp;tom, že volání funkcí je
provedeno až v&nbsp;době běhu programu, tedy v&nbsp;runtime, zatímco expanze
maker probíhá již v&nbsp;době, kdy se program teprve překládá. V&nbsp;tomto
ohledu se od sebe C/C++ a Rust příliš neliší, což si můžeme názorně ukázat.
Opět začněme céčkovým kódem:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
#define sqr(x) (x)*(x)
&nbsp;
int getx(void)
{
    puts("getx() called");
    return 2;
}
&nbsp;
int main(void)
{
    printf("%d\n", sqr(getx()));
&nbsp;
    return 0;
}
</pre>

<p>Po překladu a spuštění můžeme vidět, že se funkce <strong>getx</strong> volá
dvakrát. Pokud by <strong>sqr</strong> byla normální funkce, vyhodnotil by se
její parametr (výraz volající <strong>getx</strong>) samozřejmě pouze
jedenkrát:</p>

<pre>
getx() called
getx() called
4
</pre>

<p>Prakticky totožným způsobem můžeme stejně pojmenované makro vytvořit a
použít v&nbsp;Rustu:</p>

<pre>
macro_rules! sqr {
    ($expression:expr) =&gt; ($expression * $expression);
}
&nbsp;
fn getx() -&gt; i32 {
    println!("getx() called");
    2
}
&nbsp;
fn main() {
    println!("{}", sqr!(getx()));
}
</pre>

<p>Po překladu a spuštění můžeme opět vidět, že se funkce <strong>getx</strong>
volá dvakrát:</p>

<pre>
getx() called
getx() called
4
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Pravidla pro určení, která větev makra se má expandovat</h2>

<p>Opusťme nyní porovnávání Rustu s&nbsp;céčkem a ukažme si nové možnosti maker
v&nbsp;Rustu. Jednou z&nbsp;nejzajímavějších vlastností maker je schopnost
překladače určit, která větev makra se má expandovat. Podobá se to pattern
matchingu, protože se porovnává jak počet parametrů makra, tak i jejich typ
(výraz, identifikátor atd.). Podívejme se na jednoduché makro nazvané
<strong>power</strong>, které v&nbsp;případě, že se mu předá jeden výraz, vrátí
druhou mocninu tohoto výrazu a v&nbsp;případě, že se mu předají výrazy dva,
provede výpočet base<sup>exponent</sup>. V&nbsp;tomto druhém případě voláme
metodu <strong>pow</strong> a tudíž musí dojít k&nbsp;přetypování (to nesouvisí
se samotným makrem, ale s&nbsp;typovým systémem Rustu):</p>

<pre>
macro_rules! power {
    ($base:expr)                 =&gt; ($base*$base);
    ($base:expr, $exponent:expr) =&gt; (($base as i32).pow($exponent));
}
&nbsp;
fn main() {
    for base in 0..10 {
         println!("{:4} {:4} {:4}", base, power!(base), power!(base, 3));
    }
}
</pre>

<p>Po překladu a spuštění tohoto příkladu získáme tři sloupce &ndash; hodnoty 0
až 9, druhé mocniny těchto hodnot a třetí mocniny:</p>

<pre>
   0    0    0
   1    1    1
   2    4    8
   3    9   27
   4   16   64
   5   25  125
   6   36  216
   7   49  343
   8   64  512
   9   81  729
</pre>

<p>Samozřejmě nejsme omezeni pouze na výpočet druhých a třetích mocnin:</p>

<pre>
macro_rules! power {
    ($base:expr)                 =&gt; ($base*$base);
    ($base:expr, $exponent:expr) =&gt; (($base as i32).pow($exponent));
}
&nbsp;
fn main() {
    for base in 0..10 {
        for exponent in 2..6 {
             print!("{:5}  ", power!(base, exponent));
        }
        println!("");
    }
}
</pre>

<p>Výsledek běhu tohoto příkladu:</p>

<pre>
    0      0      0      0  
    1      1      1      1  
    4      8     16     32  
    9     27     81    243  
   16     64    256   1024  
   25    125    625   3125  
   36    216   1296   7776  
   49    343   2401  16807  
   64    512   4096  32768  
   81    729   6561  59049  
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Složitější pravidla a použití separátoru =&gt;</h2>

<p>Možnosti &bdquo;pattern matchingu&ldquo; při výběru větví maker mohou jít
ještě dále, protože při volání makra se může použít separátor =&gt;, ale i
některé další znaky se speciálním významem (stačí si vzpomenout na makro
<strong>vec!</strong>). V&nbsp;následujícím příkladu máme vytvořeno makro
nazvané <strong>unifunc</strong> akceptující výraz a za ním separátor =&gt;
následovaný jedním ze slov zero, ident či sqr. Tato slova se skutečně zapisují
bez uvozovek:</p>

<pre>
macro_rules! unifunc {
    ($x:expr =&gt; zero )   =&gt; (0);
    ($x:expr =&gt; ident)   =&gt; ($x);
    ($x:expr =&gt; sqr  )   =&gt; ($x * $x);
}
&nbsp;
fn main() {
    println!("{}", unifunc!(2 =&gt; zero));
    println!("{}", unifunc!(2 =&gt; ident));
    println!("{}", unifunc!(2 =&gt; sqr));
&nbsp;
    println!("{}", unifunc!(10 =&gt; zero));
    println!("{}", unifunc!(10 =&gt; ident));
    println!("{}", unifunc!(10 =&gt; sqr));
}
</pre>

<p>Výsledek překladu a spuštění příkladu:</p>
<pre>
0
2
4
0
10
100
</pre>

<p>Vzhledem k&nbsp;tomu, že je očekáván výraz, můžeme namísto číselné konstanty
napsat například toto:</p>

<pre>
    println!("{}", unifunc!(10+2*3 =&gt; sqr));
    256
</pre>

<p>Nebo:</p>

<pre>
    println!("{}", unifunc!(if 10&lt;2 {10} else {100} =&gt; sqr));
    10000
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Typický demonstrační příklad: makro pro trasování vyhodnocování výrazů</h2>

<p>Na závěr si ukažme typický příklad použití maker &ndash; trasování
vyhodnocování výrazů. Budeme chtít, aby se u každého výrazu uzavřeného do makra
<strong>trace</strong> (či <strong>debug</strong>) vypsal jak původní výraz,
tak i jeho vypočtená hodnota, což se hodí například pro účely logování, pro
implementaci asercí atd. Připomeňme si, že funkcemi podobné funkcionality
nedosáhneme, protože těm se předává již vyhodnocený výraz. První verze makra
může vypadat takto (není plně funkční!):</p>

<pre>
macro_rules! trace {
    ($expression:expr) =&gt; (
        println!("{} = {}", $expression, $expression);
    )
}
&nbsp;
fn main() {
    trace!(1+2);
&nbsp;
    let x = 6;
    let y = 7;
&nbsp;
    trace!(x*y);
}
</pre>

<p>Výsledek nás ovšem příliš nepotěší, protože i když se samotnému makru
<strong>trace</strong> předají nevyhodnocené výrazy, dojde k&nbsp;jejich
vyhodnocení v&nbsp;rámci makra <strong>println</strong>:</p>

<pre>
3 = 3
42 = 42
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vylepšení trasovacího makra a použití <strong>stringify!</strong></h2>

<p>Jedním z&nbsp;řešení je použití dalšího makra nazvaného
<strong>stringify</strong>, které výraz nevyhodnotí, ale převede ho na
řetězec:</p>

<pre>
macro_rules! trace {
    ($expression:expr) =&gt; (
        println!("{:?} = {}", stringify!($expression), $expression);
    )
}
&nbsp;
fn main() {
    trace!(1+2);
&nbsp;
    let x = 6;
    let y = 7;
&nbsp;
    trace!(x*y);
    trace!(if x&lt;y {x*2} else {y/10});
}
</pre>

<p>Nyní se již skutečně vypíše jak původní výraz, tak i jeho výsledek:</p>

<pre>
"1 + 2" = 3
"x * y" = 42
"if x &lt; y { x * 2 } else { y / 10 }" = 12
</pre>

<p>Pokud vám nevyhovují uvozovky zobrazené okolo nevyhodnoceného výrazu,
postačuje makro upravit následovně:</p>

<pre>
macro_rules! trace {
    ($expression:expr) =&gt; (
        println!("{} = {}", stringify!($expression), $expression);
    )
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly, podobně jako ve všech
předchozích částech tohoto seriálu, uloženy do Git repositáře dostupného na
adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý repositář:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>187_macro_hello.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/187_macro_hello.rs">https://github.com/tisnik/presentations/blob/master/rust/187_macro_hello.rs</a></td></tr>
<tr><td>188_error_in_expansion.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/188_error_in_expansion.rs">https://github.com/tisnik/presentations/blob/master/rust/188_error_in_expansion.rs</a></td></tr>
<tr><td>189_no_expansion_no_error.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/189_no_expansion_no_error.rs">https://github.com/tisnik/presentations/blob/master/rust/189_no_expansion_no_error.rs</a></td></tr>
<tr><td>190_metavariable.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/190_metavariable.rs">https://github.com/tisnik/presentations/blob/master/rust/190_metavariable.rs</a></td></tr>
<tr><td>191_expansion_in_c.c</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/191_expansion_in_c.c">https://github.com/tisnik/presentations/blob/master/rust/191_expansion_in_c.c</a></td></tr>
<tr><td>192_expansion_in_c_2.c</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/192_expansion_in_c_2.c">https://github.com/tisnik/presentations/blob/master/rust/192_expansion_in_c_2.c</a></td></tr>
<tr><td>193_expansion_in_rust.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/193_expansion_in_rust.rs">https://github.com/tisnik/presentations/blob/master/rust/193_expansion_in_rust.rs</a></td></tr>
<tr><td>194_expansion_in_c_3.c</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/194_expansion_in_c_3.c">https://github.com/tisnik/presentations/blob/master/rust/194_expansion_in_c_3.c</a></td></tr>
<tr><td>195_expansion_in_rust_2.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/195_expansion_in_rust_2.rs">https://github.com/tisnik/presentations/blob/master/rust/195_expansion_in_rust_2.rs</a></td></tr>
<tr><td>196_matching_in_macro.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/196_matching_in_macro.rs">https://github.com/tisnik/presentations/blob/master/rust/196_matching_in_macro.rs</a></td></tr>
<tr><td>197_matching_in_macros2.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/197_matching_in_macros2.rs">https://github.com/tisnik/presentations/blob/master/rust/197_matching_in_macros2.rs</a></td></tr>
<tr><td>198_matching_in_macros3.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/198_matching_in_macros3.rs">https://github.com/tisnik/presentations/blob/master/rust/198_matching_in_macros3.rs</a></td></tr>
<tr><td>199_tracing_1.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/199_tracing_1.rs">https://github.com/tisnik/presentations/blob/master/rust/199_tracing_1.rs</a></td></tr>
<tr><td>200_tracing_2.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/200_tracing_2.rs">https://github.com/tisnik/presentations/blob/master/rust/200_tracing_2.rs</a></td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>An Overview of Macros in Rust<br />
<a href="http://words.steveklabnik.com/an-overview-of-macros-in-rust">http://words.steveklabnik.com/an-overview-of-macros-in-rust</a>
</li>

<li>A Practical Intro to Macros in Rust 1.0<br />
<a href="https://danielkeep.github.io/practical-intro-to-macros.html">https://danielkeep.github.io/practical-intro-to-macros.html</a>
</li>

<li>The Rust Programming Language: macros<br />
<a href="https://doc.rust-lang.org/beta/book/macros.html">https://doc.rust-lang.org/beta/book/macros.html</a>
</li>

<li>Rust by example: 15 macro_rules!<br />
<a href="http://rustbyexample.com/macros.html">http://rustbyexample.com/macros.html</a>
</li>

<li>Module std::vec<br />
<a href="https://doc.rust-lang.org/nightly/std/vec/index.html">https://doc.rust-lang.org/nightly/std/vec/index.html</a>
</li>

<li>Primitive Type isize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">https://doc.rust-lang.org/nightly/std/primitive.isize.html</a>
</li>

<li>Primitive Type usize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">https://doc.rust-lang.org/nightly/std/primitive.usize.html</a>
</li>

<li>Primitive Type array<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.array.html">https://doc.rust-lang.org/nightly/std/primitive.array.html</a>
</li>

<li>Module std::slice<br />
<a href="https://doc.rust-lang.org/nightly/std/slice/">https://doc.rust-lang.org/nightly/std/slice/</a>
</li>

<li>Rust by Example: 2.3 Arrays and Slices<br />
<a href="http://rustbyexample.com/primitives/array.html">http://rustbyexample.com/primitives/array.html</a>
</li>

<li>What is the difference between Slice and Array (stackoverflow)<br />
<a href="http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array">http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array</a>
</li>

<li>Learning Rust With Entirely Too Many Linked Lists<br />
<a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/">http://cglab.ca/~abeinges/blah/too-many-lists/book/</a>
</li>

<li>Testcase: linked list<br />
<a href="http://rustbyexample.com/custom_types/enum/testcase_linked_list.html">http://rustbyexample.com/custom_types/enum/testcase_linked_list.html</a>
</li>

<li>Operators and Overloading<br />
<a href="https://doc.rust-lang.org/book/operators-and-overloading.html">https://doc.rust-lang.org/book/operators-and-overloading.html</a>
</li>

<li>Module std::ops<br />
<a href="https://doc.rust-lang.org/std/ops/index.html">https://doc.rust-lang.org/std/ops/index.html</a>
</li>

<li>Module std::cmp<br />
<a href="https://doc.rust-lang.org/std/cmp/index.html">https://doc.rust-lang.org/std/cmp/index.html</a>
</li>

<li>Trait std::ops::Add<br />
<a href="https://doc.rust-lang.org/stable/std/ops/trait.Add.html">https://doc.rust-lang.org/stable/std/ops/trait.Add.html</a>
</li>

<li>Trait std::ops::AddAssign<br />
<a href="https://doc.rust-lang.org/std/ops/trait.AddAssign.html">https://doc.rust-lang.org/std/ops/trait.AddAssign.html</a>
</li>

<li>Trait std::ops::Drop<br />
<a href="https://doc.rust-lang.org/std/ops/trait.Drop.html">https://doc.rust-lang.org/std/ops/trait.Drop.html</a>
</li>

<li>Trait std::cmp::Eq<br />
<a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">https://doc.rust-lang.org/std/cmp/trait.Eq.html</a>
</li>

<li>Struct std::boxed::Box<br />
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">https://doc.rust-lang.org/std/boxed/struct.Box.html</a>
</li>

<li>Explore the ownership system in Rust<br />
<a href="https://nercury.github.io/rust/guide/2015/01/19/ownership.html">https://nercury.github.io/rust/guide/2015/01/19/ownership.html</a>
</li>

<li>Rust's ownership and move semantic<br/>
<a href="http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics">http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics</a>
</li>

<li>Trait std::marker::Copy<br/>
<a href="https://doc.rust-lang.org/stable/std/marker/trait.Copy.html">https://doc.rust-lang.org/stable/std/marker/trait.Copy.html</a>
</li>

<li>Trait std::clone::Clone<br />
<a href="https://doc.rust-lang.org/stable/std/clone/trait.Clone.html">https://doc.rust-lang.org/stable/std/clone/trait.Clone.html</a>
</li>

<li>The Stack and the Heap<br />
<a href="https://doc.rust-lang.org/book/the-stack-and-the-heap.html">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Why does this compile? Automatic dereferencing?<br />
<a href="https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183">https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183</a>
</li>

<li>Understanding Pointers, Ownership, and Lifetimes in Rust<br />
<a href="http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>

<li>Rust lang series episode #25 — pointers (#rust-series)<br />
<a href="https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series">https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>Destructuring and Pattern Matching<br />
<a href="https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/">https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Method Syntax<br />
<a href="https://doc.rust-lang.org/book/method-syntax.html">https://doc.rust-lang.org/book/method-syntax.html</a>
</li>

<li>Traits in Rust<br />
<a href="https://doc.rust-lang.org/book/traits.html">https://doc.rust-lang.org/book/traits.html</a>
</li>

<li>Functional Programming in Rust - Part 1 : Function Abstraction<br />
<a href="http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/">http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

