<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu s využitím frameworku PySide: grafické operace používající třídu QPainter</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu s využitím frameworku PySide: grafické operace používající třídu QPainter</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;sedmém článku věnovaném tvorbě grafického uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím frameworku PySide si ukážeme některé možnosti nabízené třídou QPainter při vytváření 2D grafiky použité v&nbsp;GUI.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: grafické operace používající třídu <strong>QPainter</strong></a></p>
<p><a href="#k02">2. Základní operace podporované třídou <strong>QPainter</strong></a></p>
<p><a href="#k03">3. Praktický postup při vykreslování</a></p>
<p><a href="#k04">4. První demonstrační příklad: použití metod <strong>QPainter.begin</strong> a <strong>QPainter.end</strong></a></p>
<p><a href="#k05">5. Použití &bdquo;chytrého&ldquo; konstruktoru objektu typu <strong>QPainter</strong></a></p>
<p><a href="#k06">6. Druhý demonstrační příklad: použití &bdquo;chytrého&ldquo; konstruktoru objektu typu <strong>QPainter</strong></a></p>
<p><a href="#k07">7. Modifikace barvy a šířky pera použitého při vykreslování</a></p>
<p><a href="#k08">8. Názvy barev s&nbsp;paletě knihovny PySide</a></p>
<p><a href="#k09">9. Třetí demonstrační příklad: modifikace barvy a šířky pera</a></p>
<p><a href="#k10">10. Čtvrtý demonstrační příklad: použití antialiasingu při vykreslování</a></p>
<p><a href="#k11">11. Čárkované a čerchované úsečky</a></p>
<p><a href="#k12">12. Pátý demonstrační příklad: kresba čárkovaných a čerchovaných úseček</a></p>
<p><a href="#k13">13. Použití štětců při kreslení vyplněných grafických objektů</a></p>
<p><a href="#k14">14. Šestý demonstrační příklad: vzorník standardních štětců</a></p>
<p><a href="#k15">15. Barva pozadí oblasti nevyplněné štětcem</a></p>
<p><a href="#k16">16. Sedmý demonstrační příklad: specifikace barvy pozadí a použití standardních štětců</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: grafické operace používající třídu <strong>QPainter</strong></h2>

<p>Na <a
href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-vyuzitim-frameworku-pyside-rastrova-a-vektorova-grafika/">předchozí
část</a> <a
href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-vyuzitim-frameworku-pyside-rastrova-a-vektorova-grafika/">seriálu
o tvorbě grafického uživatelského rozhraní v&nbsp;Pythonu</a>, v&nbsp;níž jsme
si popsali základní vlastnosti tříd <strong>QImage</strong>,
<strong>QPixmap</strong> a <strong>QBitmap</strong>, dnes navážeme. Ukážeme si
totiž, jakým způsobem je možné vykreslovat základní geometrické (2D) tvary
s&nbsp;využitím metod třídy <strong>QPainter</strong>. Tato třída totiž
programátorům nabízí možnost vykreslení následujících tvarů a objektů:</p>

<table>
<tr><th>Tvar/objekt</th><th>Metoda</th></tr>
<tr><td>bod</td><td>drawPoint()</td></tr>
<tr><td>sada bodů</td><td>drawPoints()</td></tr>
<tr><td>úsečka</td><td>drawLine()</td></tr>
<tr><td>sada úseček</td><td>drawLines()</td></tr>
<tr><td>obdélník</td><td>drawRect(), fillRect()</td></tr>
<tr><td>sada obdélníků</td><td>drawRects()</td></tr>
<tr><td>obdélník se zakulacenými rohy</td><td>drawRoundRect(), drawRoundedRect()</td></tr>
<tr><td>polyčára (lomená úsečka)</td><td>drawPolyline()</td></tr>
<tr><td>polygon</td><td>drawPolygon(), drawConvexPolygon()</td></tr>
<tr><td>oblouk</td><td>drawArc()</td></tr>
<tr><td>kruhová úseč</td><td>drawChord()</td></tr>
<tr><td>kruhová výseč</td><td>drawPie()</td></tr>
<tr><td>kružnice nebo elipsa</td><td>drawEllipse()</td></tr>
<tr><td>obecná cesta</td><td>drawPath(), fillPath()</td></tr>
<tr><td>text</td><td>drawText(), drawTextItem()</td></tr>
<tr><td>rastrový obrázek</td><td>drawImage(), drawPicture(), drawPixmap(), ...</td></tr>
</table>

<p>Podobně, jako je tomu například ve vektorovém formátu <a
href="https://www.root.cz/clanky/vektorovy-graficky-format-svg/">SVG</a>, <a
href="https://www.root.cz/clanky/graficky-metaformat-postscript/">PostScriptu</a>
či v&nbsp;knihovně <a
href="https://www.root.cz/clanky/pouziti-knihoven-openvg-a-egl-nejenom-na-raspberry-pi/">OpenVG</a>,
se i při použití <strong>QPainteru</strong> setkáme se třemi důležitými
pojmy:</p>

<ol>

<li>Pero (<i>pen</i>) je nástroj použitý při vykreslování obrysu tvarů a
samozřejmě i všech liniových tvarů (úsečky, oblouky, ...).</li>

<li>Štětec (<i>brush</i>) je nástroj použitý pro vyplnění uzavřených tvarů
(obdélník, polygon, elipsa, cesta).</li>

<li>Cesta (<i>path</i>) se používá k&nbsp;popisu složitějších tvarů složených
z&nbsp;úseček a oblouků. Nad cestami je definováno větší množství operací,
například test, zda bod leží uvnitř objektu popsaného cestou atd.</li>

</ol>

<p>Dnes se seznámíme především s&nbsp;použitím per a štětců.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní operace podporované třídou <strong>QPainter</strong>: kreslení do rastrového obrázku</h2>

<p>Samotný objekt <strong>QPainter</strong> provádí vykreslení na nějaké
&bdquo;plátno&ldquo;, což může být buď přímo hardwarové zařízení (grafický
subsystém), nebo rastrový obrázek. Podívejme se nyní na způsob vykreslení velmi
jednoduché grafiky na rastrový obrázek s&nbsp;využitím možností nabízených
třídou <strong>QPainter</strong>. Jeden z&nbsp;možných postupů je
následující:</p>

<ol>

<li>Vytvoření instance třídy <strong>QImage</strong>, která bude tvořit
&bdquo;plátno&ldquo; pro <strong>QPainter</strong>. Konstruktoru
<strong>QImage</strong> se předává rozlišení (počet sloupců a řádků) rastrového
obrázku i formát pixelů. Nejjednodušší (i když ne vždy nejrychlejší) je použít
formát <strong>QtGui.QImage.Format_RGB32</strong> pro plnobarevné obrázky.</li>

<li>Vytvoření objektu typu <strong>QPainter</strong> konstruktorem
<strong>QPainter()</strong> (tento konstruktor nemá v&nbsp;nejjednodušším
případě žádné parametry).</li>

<li>Informace instance třídy <strong>QPainter</strong> o začátku vykreslování
do instance třídy <strong>QImage</strong>. To se provede zavoláním metody
<strong>QPainter.begin()</strong>.</li>

<li>Provedení vlastního vykreslení (například barevné úsečky). Mezi příkazovými
závorkami <i>begin</i> a <i>end</i> můžete zavolat libovolné množství
vykreslovacích operací.</li>

<li>Informace <strong>QPainteru</strong> o ukončení vykreslování. To se provede
zavoláním metody <strong>QPainter.end()</strong>.</li>

<li>Konverze objektu typu <strong>QImage</strong> na <strong>QPixmap</strong>
(nebo <strong>QBitmap</strong>). Této problematice jsme se věnovali <a
href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-vyuzitim-frameworku-pyside-rastrova-a-vektorova-grafika/#k02">ve
druhé kapitole předchozího článku</a>.</li>

<li><strong>QPixmap</strong> či <strong>QBitmap</strong> lze již přímo
vykreslit, například umístěním na návěští. I touto problematikou jsme se
zabývali minule.</li>

</ol>



<p><a name="k03"></a></p>
<h2 id="k03">3. Praktický postup při vykreslování</h2>

<p>V&nbsp;praxi se jednotlivé body <a href="#k02">výše uvedeného</a> postupu
budou implementovat následujícím způsobem:</p>

<p>Nejprve vytvoříme rastrový obrázek, který bude představovat
&bdquo;plátno&ldquo;, na které bude třída <strong>QPainter</strong> vykreslovat
obrazce:</p>

<pre>
image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                     MainWindow.IMAGE_HEIGHT,
                     QtGui.QImage.Format_RGB32)
</pre>

<p>Dále vytvoříme objekt typu <strong>QPainter</strong>:</p>

<pre>
qp = QtGui.QPainter()
</pre>

<p>Informujeme tento objekt o začátku změn (vykreslování) do instance třídy
<strong>QImage</strong>:</p>

<pre>
qp.begin(self.image)
</pre>

<p>Provedeme vlastní vykreslování &ndash; nastavíme barvu pera a vykreslíme
tímto perem diagonální úsečku (povšimněte si, že se nemusíme nijak starat o to,
kdy zanikne platnost objektu typu <strong>QColor</strong> &ndash; některé jiné
toolkity totiž vyžadují explicitní uvolnění prostředků):</p>

<pre>
qp.setPen(QtGui.QColor(64, 255, 64))
qp.drawLine(10, 10, MainWindow.IMAGE_WIDTH-10, MainWindow.IMAGE_HEIGHT-10)
</pre>

<p>Informujeme objekt o konci změn (vykreslování):</p>

<pre>
qp.end()
</pre>

<p>V&nbsp;předposledním kroku se provede konverze objektu typu
<strong>QImage</strong> na <strong>QPixmap</strong>:</p>

<pre>
pixmap = QtGui.QPixmap.fromImage(image)
</pre>

<p>Někde v&nbsp;další části kódu již můžeme pixmapu bez problémů vložit na
navěští a tím ji vykreslit (resp.&nbsp;přesněji řečeno zobrazit uživateli):</p>

<pre>
label = QtGui.QLabel("test")
label.setPixmap(pixmap)
self.setCentralWidget(label)
</pre>

<img src="https://i.iinfo.cz/images/92/pyside7-1.png" class="image-317501" alt="&#160;" width="258" height="323" />
<p><i>Obrázek 1: Úsečka vykreslená příkazy popsanými v&nbsp;této
kapitole.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad: použití metod <strong>QPainter.begin</strong> a <strong>QPainter.end</strong></h2>

<p>Výše uvedený postup pro vykreslení grafiky používající třídy
<strong>QPainter</strong> a <strong>QImage</strong> je použit v&nbsp;dnešním
prvním demonstračním příkladu, jehož úplný zdrojový kód vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 256
    IMAGE_HEIGHT = 256
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vytvoření objektu typu QPainter</i>
        qp = QtGui.QPainter()
        <i># začátek změn</i>
        qp.begin(self.image)
        <i># nastavení barvy kreslení</i>
        qp.setPen(QtGui.QColor(64, 255, 64))
        <i># vykreslení úsečky</i>
        qp.drawLine(10, 10,
                    MainWindow.IMAGE_WIDTH-10, MainWindow.IMAGE_HEIGHT-10)
        <i># konec změn</i>
        qp.end()
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití &bdquo;chytrého&ldquo; konstruktoru objektu typu <strong>QPainter</strong></h2>

<p>Třídu <strong>QPainter</strong> jsme prozatím používali takovým způsobem, že
jsme nejprve vytvořili (zkonstruovali) instanci této třídy, následně jsme
zavolali metodu <strong>QPainter.begin()</strong> s&nbsp;předáním obrázku, na
který se bude kreslit, provedli jsme vlastní vykreslení a posléze jsme
vykreslení explicitně ukončili metodou <strong>QPainter.end()</strong>:</p>

<pre>
<i># vytvoření objektu typu QPainter</i>
qp = QtGui.QPainter()
<i># začátek změn</i>
qp.<strong>begin</strong>(self.image)
<i># nastavení barvy kreslení</i>
qp.setPen(QtGui.QColor(64, 255, 64))
<i># vykreslení úsečky</i>
qp.drawLine(10, 10,
            MainWindow.IMAGE_WIDTH-10, MainWindow.IMAGE_HEIGHT-10)
<i># konec změn</i>
qp.<strong>end</strong>()
</pre>

<p>Tento postup měl nevýhodu v&nbsp;tom, že si programátor musí sám ohlídat
použití metod <strong>QPainter.begin()</strong> a
<strong>QPainter.end()</strong>. Tyto metody se vždy musí vyskytovat
v&nbsp;páru a nesmí se překrývat, tj.&nbsp;nelze například dvakrát zavolat
<strong>QPainter.begin()</strong> pro různé obrázky bez předchozího zavolání
<strong>QPainter.end()</strong>. Navíc by se měla hlídat i návratová hodnota
z&nbsp;první uvedené metody (True/False), což je test, který jsme pro
jednoduchost vynechali. Tento poměrně nízkoúrovňový přístup můžeme obejít tak,
že už při konstrukci objektu <strong>QPainter</strong> předáme konstruktoru
rastrový obrázek, na který se má provést vlastní vykreslení:</p>

<pre>
<i># vytvoření objektu typu QPainter s předáním</i>
<i># reference na "pokreslovaný" objekt</i>
qp = <strong>QtGui.QPainter(self.image)</strong>
<i># nastavení barvy kreslení</i>
qp.setPen(QtGui.QColor(64, 255, 64))
<i># vykreslení úsečky</i>
qp.drawLine(10, 10,
            MainWindow.IMAGE_WIDTH-10, MainWindow.IMAGE_HEIGHT-10)
</pre>

<p>V&nbsp;tomto případě nemusíme explicitně volat metodu
<strong>QPainter.begin()</strong>, protože tato operace se provede automaticky.
Mnohem zajímavější je, že i metoda <strong>QPainter.end()</strong> se zavolá
automaticky, a to konkrétně v&nbsp;destruktoru objektu typu
<strong>QPainter</strong> (to mj.&nbsp;znamená, že by tento objekt neměl mít
lokální viditelnost &ndash; pro jednoduchost by se celé vykreslení mělo provést
v&nbsp;jediné metodě).</p>

<img src="https://i.iinfo.cz/images/92/pyside7-2.png" class="image-317502" alt="&#160;" width="258" height="323" />
<p><i>Obrázek 2: Výsledkem je naprosto stejné okno, jako v&nbsp;prvním
příkladu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý demonstrační příklad: použití &bdquo;chytrého&ldquo; konstruktoru objektu typu <strong>QPainter</strong></h2>

<p>Jakým způsobem je možné využít &bdquo;chytrý&ldquo; konstruktor objektu typu
<strong>QPainter</strong> je ukázáno v&nbsp;dnešním druhém demonstračním
příkladu, jehož úplný zdrojový kód je vypsán pod tímto odstavcem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 256
    IMAGE_HEIGHT = 256
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
        <i># nastavení barvy kreslení</i>
        qp.setPen(QtGui.QColor(64, 255, 64))
        <i># vykreslení úsečky</i>
        qp.drawLine(10, 10,
                    MainWindow.IMAGE_WIDTH-10, MainWindow.IMAGE_HEIGHT-10)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>




<p><a name="k07"></a></p>
<h2 id="k07">7. Modifikace barvy a šířky pera použitého při vykreslování</h2>

<p>Podívejme se nyní na modifikaci stylu vykreslovaných objektů. Již <a
href="#k01">v&nbsp;úvodní kapitole</a> jsme si řekli, že při kreslení obrysů
uzavřených objektů i všech liniových objektů se používá nástroj nazvaný pero
(<i>pen</i>) představovaný instancí třídy <strong>QPen</strong>. Při konstrukci
objektu typu <strong>QPen</strong> můžeme specifikovat mj.&nbsp;i barvu
kreslení. Následně se pero přiřadí instanci třídy <strong>QPainter</strong>.
Změna barvy kreslení tedy může v&nbsp;tom nejjednodušším případě vypadat
následovně:</p>

<pre>
pen = QtGui.QPen(barva)
<i># kreslit se bude právě vytvořeným perem</i>
qPainter.setPen(pen)
</pre>

<p>Barva je představována instancí třídy <strong>QColor</strong> a lze ji
specifikovat v&nbsp;konstruktoru této třídy následujícími způsoby:</p>

<table>
<tr><th>Parametry</th><th>Význam</th></tr>
<tr><td>rgb</td><td>jediná celočíselná hodnota (<i>long</i>) s&nbsp;kódem RGB</td></tr>
<tr><td>red, green, blue</td><td>tři barvové složky: červená, zelená, modrá</td></tr>
<tr><td>red, green, blue, alpha</td><td>tři barvové složky doplněné o průhlednost</td></tr>
<tr><td>name</td><td>jméno barvy (viz <a href="#k08">následující kapitolu</a>)</td></tr>
<tr><td>PySide.QtCore.Qt.GlobalColor</td><td>jedna z&nbsp;dvaceti globálních barev</td></tr>
</table>

<p>Pozor: pokud se barva explicitně nespecifikuje, je pro kreslení použita
černá barva, takže na implicitně černém obrázku nebude kresba viditelná!</p>

<p>Šířku kreslení (stopy) je možné zadat buď v&nbsp;konstruktoru třídy
<strong>QPen</strong> (ovšem potom nelze specifikovat barvu), nebo zavoláním
metody <strong>QPen.setWidth()</strong>:</p>

<pre>
pen = QtGui.QPen(barva)
<i># změna šířky pera</i>
pen.setWidth(width)
<i># kreslit se bude právě vytvořeným perem</i>
qPainter.setPen(pen)
</pre>

<p>Implicitně je šířka stopy nastavena na nulu; to odpovídá nejmenší možné
stopě kreslení (jeden pixel bez použití antialiasingu).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Názvy barev s&nbsp;paletě knihovny PySide</h2>

<p>Názvy všech barev uložených do standardní palety knihovny <i>PySide</i>
získáme velmi snadno zavoláním statické metody <a
href="https://pyside.github.io/docs/pyside/PySide/QtGui/QColor.html#PySide.QtGui.PySide.QtGui.QColor.colorNames">QtGui.QColor.colorNames()</a>,
která vrátí seznam názvů známých barev. Tento seznam si samozřejmě můžeme velmi
snadno vypsat, například následujícím jednořádkovým příkazem:</p>

<pre>
print("\n".join(QtGui.QColor.colorNames()))
</pre>

<p>Výstup by měl vypadat následovně (PySide 1.2.x):</p>

<pre>
aliceblue
antiquewhite
aqua
aquamarine
azure
beige
bisque
black
blanchedalmond
blue
blueviolet
brown
burlywood
cadetblue
chartreuse
chocolate
coral
cornflowerblue
cornsilk
crimson
cyan
darkblue
darkcyan
darkgoldenrod
darkgray
darkgreen
darkgrey
darkkhaki
darkmagenta
darkolivegreen
darkorange
darkorchid
darkred
darksalmon
darkseagreen
darkslateblue
darkslategray
darkslategrey
darkturquoise
darkviolet
deeppink
deepskyblue
dimgray
dimgrey
dodgerblue
firebrick
floralwhite
forestgreen
fuchsia
gainsboro
ghostwhite
gold
goldenrod
gray
green
greenyellow
grey
honeydew
hotpink
indianred
indigo
ivory
khaki
lavender
lavenderblush
lawngreen
lemonchiffon
lightblue
lightcoral
lightcyan
lightgoldenrodyellow
lightgray
lightgreen
lightgrey
lightpink
lightsalmon
lightseagreen
lightskyblue
lightslategray
lightslategrey
lightsteelblue
lightyellow
lime
limegreen
linen
magenta
maroon
mediumaquamarine
mediumblue
mediumorchid
mediumpurple
mediumseagreen
mediumslateblue
mediumspringgreen
mediumturquoise
mediumvioletred
midnightblue
mintcream
mistyrose
moccasin
navajowhite
navy
oldlace
olive
olivedrab
orange
orangered
orchid
palegoldenrod
palegreen
paleturquoise
palevioletred
papayawhip
peachpuff
peru
pink
plum
powderblue
purple
red
rosybrown
royalblue
saddlebrown
salmon
sandybrown
seagreen
seashell
sienna
silver
skyblue
slateblue
slategray
slategrey
snow
springgreen
steelblue
tan
teal
thistle
tomato
transparent
turquoise
violet
wheat
white
whitesmoke
yellow
yellowgreen
</pre>

<p>Příklad použití jména barvy:</p>

<pre>
<i># vytvoření pera a nastavení barvy kreslení</i>
pen = QtGui.QPen("gold")
&nbsp;
<i># kreslit se bude právě vytvořeným perem</i>
qPainter.setPen(pen)
&nbsp;
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Třetí demonstrační příklad: modifikace barvy a šířky pera</h2>

<p>V&nbsp;dnešním třetím příkladu je ukázáno, jak je možné kreslit různobarevné
úsečky s&nbsp;volitelnou šířkou stopy. O samotné kreslení úseček se stará
uživatelská funkce <strong>drawLine()</strong>:</p>

<pre>
<i># funkce pro vykreslení úsečky zadanou barvou</i>
def <strong>drawLine</strong>(qPainter, color, x1, y1, x2, y2, width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(width)
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
    <i># vykreslení úsečky</i>
    qPainter.drawLine(x1, y1, x2, y2)
</pre>

<p>Tato funkce v&nbsp;příkladu několikrát zavolána, takže vznikne následující
kresba:</p>

<img src="https://i.iinfo.cz/images/92/pyside7-3.png" class="image-317503" alt="&#160;" width="322" height="307" />
<p><i>Obrázek 3: Okno vykreslené třetím příkladem.</i></p>

<p>Následuje výpis úplného zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># funkce pro vykreslení úsečky zadanou barvou</i>
def <strong>drawLine</strong>(qPainter, color, x1, y1, x2, y2, width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(width)
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
    <i># vykreslení úsečky</i>
    qPainter.drawLine(x1, y1, x2, y2)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class MainWindow(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 320
    IMAGE_HEIGHT = 240
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># Vykreslení čar různou barvou</i>
        drawLine(qp, BLUE,    10, 10, 160, 20)
        drawLine(qp, CYAN,    10, 20, 160, 30)
        drawLine(qp, GREEN,   10, 30, 160, 40)
        drawLine(qp, YELLOW,  10, 40, 160, 50)
        drawLine(qp, RED,     10, 50, 160, 60)
        drawLine(qp, MAGENTA, 10, 60, 160, 70)
&nbsp;
        <i># Vykreslení čar s různým sklonem</i>
        for i in range(1, 90, 5):
            <i># převod ze stupňů na radiány</i>
            angle = math.radians(i)
            radius = 150
            <i># výpočet koncových bodů úseček</i>
            x = radius * math.sin(math.radians(i))
            y = radius * math.cos(math.radians(i))
            <i># vykreslení jedné úsečky</i>
            drawLine(qp, WHITE, MainWindow.IMAGE_WIDTH-1, 0,
                     MainWindow.IMAGE_WIDTH-x, y)
&nbsp;
        <i># vykreslení čar různou šířkou</i>
        for i in range(1, 10):
            drawLine(qp, WHITE, 10 + i*15, 90, 20 + i*15, 230, i)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Čtvrtý demonstrační příklad: použití antialiasingu při vykreslování</h2>

<p>Při kreslení objektů do rastrového obrázku je možné kdykoli zapnout či
naopak vypnout antialiasing (<i>aa</i>). To se provádí metodou
<strong>QPainter.setRenderHint()</strong>, které se předá konstanta
<strong>QPainter.Antialiasing</strong>, popř.&nbsp;kombinace konstant
<strong>QPainter.Antialiasing</strong>,
<strong>QPainter.TextAntialiasing</strong> a
<strong>QPainter.HighQualityAntialiasing</strong>:</p>

<pre>
<i># vytvoření objektu typu QPainter s předáním</i>
<i># reference na "pokreslovaný" objekt</i>
qp = QtGui.QPainter(self.image)
&nbsp;
qp.setRenderHint(QtGui.QPainter.Antialiasing)
</pre>

<p>V&nbsp;případě, že potřebujeme antialiasing vypnout (kresba různých schémat
atd.), předejte metodě <strong>QPainter.setRenderHint()</strong> pojmenovaný
parametr <strong>on=False</strong> (implicitně má totiž hodnotu
<strong>True</strong>):</p>

<pre>
<i># vypneme antialiasing</i>
qp.setRenderHint(QtGui.QPainter.Antialiasing, on=False)
</pre>

<img src="https://i.iinfo.cz/images/92/pyside7-4.png" class="image-317504" alt="&#160;" width="322" height="307" />
<p><i>Obrázek 4: Stejná scéna jako v&nbsp;předchozím příkladu, ovšem nyní
vykreslená s&nbsp;využitím antialiasingu.</i></p>

<p>Pro porovnání rozdílů mezi nepoužitím a použitím antialiasingu si porovnejte
následující dva obrázky:</p>

<img src="https://i.iinfo.cz/images/92/pyside7-5.png" class="image-317505" alt="&#160;" width="640" height="300" />
<p><i>Obrázek 5: Detail šikmých úseček vykreslených bez použití
antialiasingu (zvětšeno).</i></p>

<img src="https://i.iinfo.cz/images/92/pyside7-6.png" class="image-317506" alt="&#160;" width="640" height="300" />
<p><i>Obrázek 6: Detail šikmých úseček vykreslených s&nbsp;použitím
antialiasingu (zvětšeno).</i></p>

<p>Dnešní čtvrtý demonstrační příklad obsahuje ukázku zapnutí antialiasingu při
kreslení úseček:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># funkce pro vykreslení úsečky zadanou barvou</i>
def <strong>drawLine</strong>(qPainter, color, x1, y1, x2, y2, width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(width)
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
    <i># vykreslení úsečky</i>
    qPainter.drawLine(x1, y1, x2, y2)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class MainWindow(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 320
    IMAGE_HEIGHT = 240
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        qp.setRenderHint(QtGui.QPainter.Antialiasing)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># Vykreslení čar různou barvou</i>
        drawLine(qp, BLUE,    10, 10, 160, 20)
        drawLine(qp, CYAN,    10, 20, 160, 30)
        drawLine(qp, GREEN,   10, 30, 160, 40)
        drawLine(qp, YELLOW,  10, 40, 160, 50)
        drawLine(qp, RED,     10, 50, 160, 60)
        drawLine(qp, MAGENTA, 10, 60, 160, 70)
&nbsp;
        <i># Vykreslení čar s různým sklonem</i>
        for i in range(1, 90, 5):
            <i># převod ze stupňů na radiány</i>
            angle = math.radians(i)
            radius = 150
            <i># výpočet koncových bodů úseček</i>
            x = radius * math.sin(math.radians(i))
            y = radius * math.cos(math.radians(i))
            <i># vykreslení jedné úsečky</i>
            drawLine(qp, WHITE, MainWindow.IMAGE_WIDTH-1, 0,
                     MainWindow.IMAGE_WIDTH-x, y)
&nbsp;
        <i># vykreslení čar různou šířkou</i>
        for i in range(1, 10):
            drawLine(qp, WHITE, 10 + i*15, 90, 20 + i*15, 230, i)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Čárkované a čerchované úsečky</h2>

<p>Při kresbě liniových obrazců nebo okrajů plošných obrazců je možné zvolit
vzorek (styl) úseček &ndash; plná (výchozí nastavení), čárkovaná, čerchovaná,
střídavá apod. K&nbsp;nastavení vzorku vykreslení úsečky slouží metoda
<strong>QPen.setDashPattern()</strong>. Parametrem této metody je seznam délek
vykreslených segmentů prokládaných délkami segmentů nevykreslených. Podívejme
se na jednoduchý příklad. Nejprve si vytvoříme pomocnou funkci pro vykreslení
úsečky s&nbsp;volitelným vzorkem:</p>

<pre>
<i># funkce pro vykreslení úsečky zadanou barvou</i>
def <strong>drawDashedLine</strong>(qPainter, color, x1, y1, x2, y2, pattern):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna typu čáry</i>
    pen.setStyle(QtCore.Qt.CustomDashLine)
    pen.setDashPattern(pattern)
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
    <i># vykreslení úsečky</i>
    qPainter.drawLine(x1, y1, x2, y2)
</pre>

<p>Tuto funkci použijeme pro vykreslení čar s&nbsp;různým vzorkem:</p>

<pre>
<i># Vykreslení čar různým stylem</i>
drawDashedLine(qp, YELLOW, 10, 10, 160, 10, [1, 1])
drawDashedLine(qp, YELLOW, 10, 20, 160, 20, [1, 10])
drawDashedLine(qp, YELLOW, 10, 30, 160, 30, [10, 1])
drawDashedLine(qp, YELLOW, 10, 40, 160, 40, [10, 10])
drawDashedLine(qp, YELLOW, 10, 50, 160, 50, [10, 1, 10, 5])
drawDashedLine(qp, YELLOW, 10, 60, 160, 60, [5, 5])
</pre>

<p>Podívejme se nyní na výsledek:</p>

<img src="https://i.iinfo.cz/images/92/pyside7-7.png" class="image-317507" alt="&#160;" width="320" height="130" />
<p><i>Obrázek 7: Různé vzorky čar (zvětšeno 2&times;).</i></p>

<p>Při kreslení šikmých úseček je situace složitější, protože délky nebudou
přesně odpovídat (ty platí jen pro vodorovné či svislé tvary):</p>

<pre>
<i># Vykreslení čar s různým sklonem</i>
for i in range(1, 90, 5):
    <i># převod ze stupňů na radiány</i>
    angle = math.radians(i)
    radius = 150
    <i># výpočet koncových bodů úseček</i>
    x = radius * math.sin(math.radians(i))
    y = radius * math.cos(math.radians(i))
    <i># vykreslení jedné úsečky</i>
    drawDashedLine(qp, WHITE, MainWindow.IMAGE_WIDTH-1, 0,
                   MainWindow.IMAGE_WIDTH-x, y,
                   [5, 5])
</pre>

<img src="https://i.iinfo.cz/images/92/pyside7-8.png" class="image-317508" alt="&#160;" width="320" height="320" />
<p><i>Obrázek 8: Šikmé úsečky (zvětšeno 2&times;, používá se
antialiasing).</i></p>

<p>Zajímavé bude také sledovat, co se stane při změně šířky pera,
tj.&nbsp;šířky kreslené stopy. Výše uvedenou funkci si nepatrně upravíme tak,
aby akceptovala další nepovinný parametr s&nbsp;šířkou:</p>

<pre>
<i># funkce pro vykreslení úsečky zadanou barvou</i>
def <strong>drawDashedLine</strong>(qPainter, color, x1, y1, x2, y2, pattern, width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(width)
&nbsp;
    <i># změna typu čáry</i>
    pen.setStyle(QtCore.Qt.CustomDashLine)
    pen.setDashPattern(pattern)
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
    <i># vykreslení úsečky</i>
    qPainter.drawLine(x1, y1, x2, y2)
</pre>

<p>Zkusíme si vykreslit několik úseček s&nbsp;různou tloušťkou:</p>

<pre>
<i># vykreslení čar různou šířkou</i>
for i in range(1, 10):
    drawDashedLine(qp, WHITE, 10 + i*15, 90, 10 + i*15, 230, [5, 5], i)
</pre>

<p>Výsledek je možná překvapivý:</p>

<img src="https://i.iinfo.cz/images/92/pyside7-9.png" class="image-317509" alt="&#160;" width="288" height="318" />
<p><i>Obrázek 9: Šířka pera ovlivňuje i délku vzorků (zvětšeno
2&times;).</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pátý demonstrační příklad: kresba čárkovaných a čerchovaných úseček</h2>

<p>Postup při kreslení úseček s&nbsp;různým stylem je ukázán v&nbsp;dalším
&ndash; dnes již pátém &ndash; demonstračním příkladu, po jehož spuštění by se
měl vykreslit tento obrázek:</p>

<img src="https://i.iinfo.cz/images/92/pyside7-10.png" class="image-317510" alt="&#160;" width="322" height="307" />
<p><i>Obrázek 10: Okno vykreslené pátým demonstračním příkladem.</i></p>

<p>Následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># funkce pro vykreslení úsečky zadanou barvou</i>
def <strong>drawDashedLine</strong>(qPainter, color, x1, y1, x2, y2, pattern, width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(width)
&nbsp;
    <i># změna typu čáry</i>
    pen.setStyle(QtCore.Qt.CustomDashLine)
    pen.setDashPattern(pattern)
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
    <i># vykreslení úsečky</i>
    qPainter.drawLine(x1, y1, x2, y2)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 320
    IMAGE_HEIGHT = 240
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># Vykreslení čar různým stylem</i>
        drawDashedLine(qp, YELLOW, 10, 10, 160, 10, [1, 1])
        drawDashedLine(qp, YELLOW, 10, 20, 160, 20, [1, 10])
        drawDashedLine(qp, YELLOW, 10, 30, 160, 30, [10, 1])
        drawDashedLine(qp, YELLOW, 10, 40, 160, 40, [10, 10])
        drawDashedLine(qp, YELLOW, 10, 50, 160, 50, [10, 1, 10, 5])
        drawDashedLine(qp, YELLOW, 10, 60, 160, 60, [5, 5])
&nbsp;
        qp.setRenderHint(QtGui.QPainter.Antialiasing)
&nbsp;
        <i># Vykreslení čar s různým sklonem</i>
        for i in range(1, 90, 5):
            <i># převod ze stupňů na radiány</i>
            angle = math.radians(i)
            radius = 150
            <i># výpočet koncových bodů úseček</i>
            x = radius * math.sin(math.radians(i))
            y = radius * math.cos(math.radians(i))
            <i># vykreslení jedné úsečky</i>
            drawDashedLine(qp, WHITE, MainWindow.IMAGE_WIDTH-1, 0,
                           MainWindow.IMAGE_WIDTH-x, y,
                           [5, 5])
&nbsp;
        <i># vykreslení čar různou šířkou</i>
        for i in range(1, 10):
            drawDashedLine(qp, WHITE, 10 + i*15, 90, 10 + i*15, 230, [5, 5], i)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Použití štětců při kreslení vyplněných grafických objektů</h2>

<p><a href="#k01">V&nbsp;úvodní kapitole</a> jsme si řekli, že při kreslení
uzavřených tvarů (obdélník, polygon, elipsa, cesta) je možné takové tvary
vyplnit, přičemž pro vyplnění se používá nástroj nazvaný jednoduše štětec
(<i>brush</i>. Štětec může být představován bitmapou (je to jedna
z&nbsp;několika praktických možností použití bitmap ve frameworku PySide),
popř.&nbsp;je možné štětec vybrat z&nbsp;připraveného vzorníku. Dnes se pro
jednoduchost budeme zabývat právě existujícími vzorky štětců. Každý vzorek je
představován jednou z&nbsp;konstant:</p>

<pre>
QtCore.Qt.SolidPattern
QtCore.Qt.HorPattern
QtCore.Qt.VerPattern
QtCore.Qt.CrossPattern
QtCore.Qt.BDiagPattern
QtCore.Qt.FDiagPattern
QtCore.Qt.DiagCrossPattern
QtCore.Qt.Dense1Pattern
QtCore.Qt.Dense2Pattern
QtCore.Qt.Dense3Pattern
QtCore.Qt.Dense4Pattern
QtCore.Qt.Dense5Pattern
QtCore.Qt.Dense6Pattern
QtCore.Qt.Dense7Pattern
</pre>

<img src="https://i.iinfo.cz/images/92/pyside7-11.png" class="image-317511" alt="&#160;" width="442" height="207" />
<p><i>Obrázek 11: Vzorník výše vypsaných štětců (v&nbsp;daném pořadí).</i></p>

<p>Vzorky štětců se nastavují takto (podtržená část kódu):</p>

<pre>
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingBrush</strong>(qPainter, color, x, y, width, height, brush_style, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    <u>brush = QtGui.QBrush(QtGui.QColor(*color))</u>
    <u>brush.setStyle(brush_style)</u>
    <u>qPainter.setBrush(brush)</u>
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
</pre>

<p>Povšimněte si, že musíme specifikovat i barvu štětce, která se může lišit od
barvy pera.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Šestý demonstrační příklad: vzorník standardních štětců</h2>

<p>V&nbsp;šestém příkladu jsou ukázány základní vzorky štětců, které jsme si
popsali <a href="#k13">v&nbsp;předchozí kapitole</a>, takže se jen podívejme,
jak může vypadat kód, který vzorník po svém spuštění vytiskne:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingBrush</strong>(qPainter, color, x, y, width, height, brush_style, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    brush = QtGui.QBrush(QtGui.QColor(*color))
    brush.setStyle(brush_style)
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 440
    IMAGE_HEIGHT = 140
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># Vykreslení obdélníků různým stylem</i>
        drawRectangleUsingBrush(qp, YELLOW, 10, 10, 50, 50, QtCore.Qt.SolidPattern)
        drawRectangleUsingBrush(qp, YELLOW, 70, 10, 50, 50, QtCore.Qt.HorPattern)
        drawRectangleUsingBrush(qp, YELLOW, 130, 10, 50, 50, QtCore.Qt.VerPattern)
        drawRectangleUsingBrush(qp, YELLOW, 190, 10, 50, 50, QtCore.Qt.CrossPattern)
        drawRectangleUsingBrush(qp, YELLOW, 250, 10, 50, 50, QtCore.Qt.BDiagPattern)
        drawRectangleUsingBrush(qp, YELLOW, 310, 10, 50, 50, QtCore.Qt.FDiagPattern)
        drawRectangleUsingBrush(qp, YELLOW, 370, 10, 50, 50, QtCore.Qt.DiagCrossPattern)
&nbsp;
        drawRectangleUsingBrush(qp, WHITE, 10, 70, 50, 50, QtCore.Qt.Dense1Pattern)
        drawRectangleUsingBrush(qp, WHITE, 70, 70, 50, 50, QtCore.Qt.Dense2Pattern)
        drawRectangleUsingBrush(qp, WHITE, 130, 70, 50, 50, QtCore.Qt.Dense3Pattern)
        drawRectangleUsingBrush(qp, WHITE, 190, 70, 50, 50, QtCore.Qt.Dense4Pattern)
        drawRectangleUsingBrush(qp, WHITE, 250, 70, 50, 50, QtCore.Qt.Dense5Pattern)
        drawRectangleUsingBrush(qp, WHITE, 310, 70, 50, 50, QtCore.Qt.Dense6Pattern)
        drawRectangleUsingBrush(qp, WHITE, 370, 70, 50, 50, QtCore.Qt.Dense7Pattern)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Barva pozadí oblasti nevyplněné štětcem</h2>

<p>Při vyplňování uzavřených tvarů štětcem je možné si zvolit i barvu pozadí,
přičemž pozadím jsou v&nbsp;tomto kontextu myšleny ty pixely, které sice leží
uvnitř tvaru, ale štětec je při kreslení vynechá (nejedná se tedy o pozadí celé
kreslicí plochy &ndash; plátna). Barva pozadí je stavová veličina a je ji možné
kdykoli změnit (to ovlivní další vykreslování, nikoli však již vykreslené
objekty). Navíc nezapomeňte, že kromě barvy pozadí je nutné nastavit i režim
vykreslování pozadí na hodnotu <strong>QtCore.Qt.BGMode.OpaqueMode</strong>,
protože implicitně se používá průhledné pozadí (přesněji řečeno nejsou pixely
pozadí vůbec modifikovány). Podívejme se na příklad:</p>

<pre>
<i># vytvoření objektu typu QPainter s předáním</i>
<i># reference na "pokreslovaný" objekt</i>
qp = QtGui.QPainter(self.image)
&nbsp;
<i># barva pozadi a povoleni vykreslení pozadi (vyplne)</i>
qp.setBackgroundMode(QtCore.Qt.BGMode.OpaqueMode)
qp.setBackground(QtGui.QColor(red, green, blue))
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Sedmý demonstrační příklad: specifikace barvy pozadí a použití standardních štětců</h2>

<p>Sedmý a současně i dnešní poslední demonstrační příklad se od příkladu
šestého odlišuje jen tím, že je v&nbsp;něm explicitně specifikována barva
pozadí při použití standardních štětců. Vykreslený obrázek se tedy změní z:</p>

<img src="https://i.iinfo.cz/images/92/pyside7-11.png" class="image-317511" alt="&#160;" width="442" height="207" />
<br />
<img src="https://i.iinfo.cz/images/92/pyside7-12.png" class="image-317512" alt="&#160;" width="442" height="207" />
<p><i>Obrázek 12: Rozdíl mezi použitím a nepoužitím pozadí při vykreslování
plochy tvarů štětci.</i></p>

<p>Samozřejmě opět následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingBrush</strong>(qPainter, color, x, y, width, height, brush_style, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    brush = QtGui.QBrush(QtGui.QColor(*color))
    brush.setStyle(brush_style)
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 440
    IMAGE_HEIGHT = 140
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># barva pozadi a povoleni vykreslení pozadi (vyplne)</i>
        qp.setBackgroundMode(QtCore.Qt.BGMode.OpaqueMode)
        qp.setBackground(QtGui.QColor(*BLUE))
&nbsp;
        <i># Vykreslení obdélníků různým stylem</i>
        drawRectangleUsingBrush(qp, YELLOW, 10, 10, 50, 50, QtCore.Qt.SolidPattern)
        drawRectangleUsingBrush(qp, YELLOW, 70, 10, 50, 50, QtCore.Qt.HorPattern)
        drawRectangleUsingBrush(qp, YELLOW, 130, 10, 50, 50, QtCore.Qt.VerPattern)
        drawRectangleUsingBrush(qp, YELLOW, 190, 10, 50, 50, QtCore.Qt.CrossPattern)
        drawRectangleUsingBrush(qp, YELLOW, 250, 10, 50, 50, QtCore.Qt.BDiagPattern)
        drawRectangleUsingBrush(qp, YELLOW, 310, 10, 50, 50, QtCore.Qt.FDiagPattern)
        drawRectangleUsingBrush(qp, YELLOW, 370, 10, 50, 50, QtCore.Qt.DiagCrossPattern)
&nbsp;
        drawRectangleUsingBrush(qp, WHITE, 10, 70, 50, 50, QtCore.Qt.Dense1Pattern)
        drawRectangleUsingBrush(qp, WHITE, 70, 70, 50, 50, QtCore.Qt.Dense2Pattern)
        drawRectangleUsingBrush(qp, WHITE, 130, 70, 50, 50, QtCore.Qt.Dense3Pattern)
        drawRectangleUsingBrush(qp, WHITE, 190, 70, 50, 50, QtCore.Qt.Dense4Pattern)
        drawRectangleUsingBrush(qp, WHITE, 250, 70, 50, 50, QtCore.Qt.Dense5Pattern)
        drawRectangleUsingBrush(qp, WHITE, 310, 70, 50, 50, QtCore.Qt.Dense6Pattern)
        drawRectangleUsingBrush(qp, WHITE, 370, 70, 50, 50, QtCore.Qt.Dense7Pattern)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech sedmi dnes popsaných demonstračních příkladů byly opět,
podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>63_qpainter.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/63_qpainter.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/63_qpainter.py</a></td></tr>
<tr><td>64_qpainter_smart_constructor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/64_qpainter_smart_constructor.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/64_qpainter_smart_constructor.py</a></td></tr>
<tr><td>65_pen_color_and_width.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/65_pen_color_and_width.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/65_pen_color_and_width.py</a></td></tr>
<tr><td>66_qpainter_aa.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/66_qpainter_aa.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/66_qpainter_aa.py</a></td></tr>
<tr><td>67_dashed_line.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/67_dashed_line.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/67_dashed_line.py</a></td></tr>
<tr><td>68_brush_patterns.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/68_brush_patterns.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/68_brush_patterns.py</a></td></tr>
<tr><td>69_pattern_background.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/69_pattern_background.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/69_pattern_background.py</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

