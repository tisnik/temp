<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba grafického uživatelského rozhraní v Pythonu: widgety v knihovně appJar</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba grafického uživatelského rozhraní v Pythonu: widgety v knihovně appJar</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o knihovně appJar určené pro velmi snadnou tvorbu aplikací s&nbsp;grafickým uživatelským rozhraním se seznámíme se všemi základními ovládacími prvky (widgety), které tato knihovna svým uživatelům nabízí. Výklad bude doplněn dvanácti příklady.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba grafického uživatelského rozhraní v Pythonu: widgety v knihovně appJar</a></p>
<p><a href="#k02">2. Nastavení volného místa mezi widgety (padding)</a></p>
<p><a href="#k03">3. Ukázka konfigurace mezer mezi widgety v&nbsp;oknu</a></p>
<p><a href="#k04">4. Volné místo a umístění widgetů do mřížky</a></p>
<p><a href="#k05">5. Zaškrtávací pole (check box)</a></p>
<p><a href="#k06">6. Konfigurace zaškrtávacích polí</a></p>
<p><a href="#k07">7. Přepínače (radio buttons)</a></p>
<p><a href="#k08">8. Změna způsobu zobrazení přepínačů</a></p>
<p><a href="#k09">9. Implicitně vybraný přepínač</a></p>
<p><a href="#k10">10. Seznam (listbox)</a></p>
<p><a href="#k11">11. Seznam s&nbsp;možností výběru více prvků</a></p>
<p><a href="#k12">12. Rozbalovací seznam</a></p>
<p><a href="#k13">13. Widgety, které pracují se slovníkem stavů</a></p>
<p><a href="#k14">14. Rozbalovací seznam s&nbsp;výběrem většího množství prvků</a></p>
<p><a href="#k15">15. Ukázka použití rozbalovacího seznamu s&nbsp;možností výběru více prvků</a></p>
<p><a href="#k16">16. Widget se skupinou zaškrtávacích prvků</a></p>
<p><a href="#k17">17. Ukázka použití skupiny zaškrtávacích prvků</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba grafického uživatelského rozhraní v Pythonu: widgety v knihovně appJar</h2>

<p>Nejdříve se podívejme na způsob implicitního vkládání widgetů do oken či
dialogů. Jednoduchý projekt, který je zobrazen pod tímto odstavcem (a o kterém
jsme se již <a
href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/">bavili
minule</a>), po svém spuštění zobrazí okno s&nbsp;textovým návěštím, pod nímž
je umístěna dvojice tlačítek. Všechny tři zmíněné widgety jsou přitom
&bdquo;namačkány&ldquo; na sobě; mezera mezi nimi je jen minimální:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!")
&nbsp;
app.addButton("Ok", None)
app.addButton("Quit", None)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-4.png" class="image-305135" alt="&#160;" width="95" height="127" />
<p><i>Obrázek 1: Screenshot předchozího příkladu.</i></p>

<p>Totéž platí i ve chvíli, kdy budeme widgety umisťovat vedle sebe do pomyslné
mřížky &ndash; widgety stále budou implicitně &bdquo;namačkány&ldquo; vedle
sebe:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addButton("Ok", None, 1, 0)
app.addButton("Quit", None, 1, 1)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-5.png" class="image-305136" alt="&#160;" width="111" height="92" />
<p><i>Obrázek 2: Screenshot předchozího demonstračního příkladu.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nastavení volného místa mezi widgety (padding)</h2>

<p>Pro nastavení horizontálních a vertikálních mezer mezi jednotlivými widgety
se používají metody <strong>setPadX()</strong>, <strong>setPadY()</strong> a
<strong>setPadding()</strong>. Kromě toho je možné nastavit i interní
horizontální a vertikální mezery. Ty se umisťují mezi okraj widgetu (ten je
většinou viditelný, například u tlačítka) a vlastním textem a/nebo ovládací
částí widgetu. Většinou se velikost interních mezer ponechává na výchozí
hodnotě, ale samozřejmě vám nic nebrání laborovat i s&nbsp;těmito
parametry:</p>

<table>
<tr><th>Metoda</th><th>Význam</th></tr>
<tr><td>setPadX()</td><td>mezery mezi buňkami umístěnými vedle sebe</td></tr>
<tr><td>setPadY()</td><td>mezery mezi buňkami umístěnými nad sebou</td></tr>
<tr><td>setPadding()</td><td>kombinace předchozích dvou metod</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>setIPadX()</td><td>interní horizontální mezera mezi okrajem widgetu a jeho textem/ovládací částí</td></tr>
<tr><td>setIPadY()</td><td>interní vertikální mezera mezi okrajem widgetu a jeho textem/ovládací částí</td></tr>
<tr><td>setIPadding()</td><td>kombinace předchozích dvou metody</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>setInPadX()</td><td>totožné se setIPadX()</td></tr>
<tr><td>setInPadY()</td><td>totožné se setIPadY()</td></tr>
<tr><td>setInPadding()</td><td>totožné se setIPadding()</td></tr>
</table>

<img src="https://i.iinfo.cz/images/627/appjar2-1.png" class="image-306355" alt="&#160;" width="95" height="187" />
<p><i>Obrázek 3: Změna interní vertikální mezery mezi okrajem widgetu a jeho
textem.</i></p>

<p>Poznámka: ve skutečnosti je možné volat metodu <strong>setPadding()</strong>
dvěma způsoby &ndash; předáním dvojice hodnot představujících mezery či předání
pole či n-tice s&nbsp;dvojicí prvků, které taktéž představují mezery mezi
widgety.</p>

<p>První způsob:</p>

<pre>
app.setPadding(x_padding, y_padding)
</pre>

<p>Alernativní způsob:</p>

<pre>
app.setPadding([x_padding, y_padding])
app.setPadding((x_padding, y_padding))
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Ukázka konfigurace mezer mezi widgety v&nbsp;oknu</h2>

<p>Podívejme se nyní na použití metody <strong>setPadding()</strong>
v&nbsp;praxi. Mezi widgety budeme vkládat mezeru o šířce/výšce deseti
pixelů:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        app.infoBox("Ok, Ok", "Ok button pressed")
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
<strong>app.setPadding(10, 10)</strong>
&nbsp;
app.addLabel("title", "Hello world!")
&nbsp;
app.addButton("Ok", onButtonPress)
app.addButton("Quit", onButtonPress)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-2.png" class="image-306356" alt="&#160;" width="115" height="187" />
<p><i>Obrázek 4: Screenshot dnešního prvního demonstračního příkladu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Volné místo a umístění widgetů do mřížky</h2>

<p>Widgety jsou vždy umisťované do pomyslné mřížky, takže i při explicitním
nastavení buňky (buněk), do nichž se widgety mají vložit, se bude velikost
těchto buněk zvětšovat o nastavené mezery. Můžeme se o tom snadno přesvědčit po
spuštění následujícího příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        app.infoBox("Ok, Ok", "Ok button pressed")
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
<strong>app.setPadding(10, 10)</strong>
&nbsp;
app.addLabel("title", "Hello world!")
&nbsp;
app.addButton("Ok", onButtonPress, <strong>1, 1</strong>)
app.addButton("Quit", onButtonPress, <strong>2, 1</strong>)
&nbsp;
app.go()
</pre>

<p>Poznámka: v&nbsp;současné verzi knihovny <i>appJar</i> není možné
specifikovat různé velikosti mezer v&nbsp;různých směrech (na rozdíl od CCS,
kde to možné je).</p>

<img src="https://i.iinfo.cz/images/627/appjar2-3.png" class="image-306357" alt="&#160;" width="192" height="187" />
<p><i>Obrázek 5: Screenshot dnešního druhého demonstračního příkladu.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Zaškrtávací pole (check box)</h2>

<p>Dalším typem grafického ovládacího prvku (widgetu) je takzvaný
<strong>checkbox</strong> neboli zaškrtávací pole. Od obyčejného tlačítka se
tento widget liší především tím, že je vizuálně patrný jeho stav &ndash;
nastaveno/nenastaveno. Tento typ tlačítek je zobrazován různým způsobem,
typicky se však jedná o čtvereček, který je buď zatržený (znak &check; či
&times;) nebo prázdný; v&nbsp;některých GUI prostředích se však stav tlačítka
reprezentuje pouze jeho barvou. V&nbsp;nejjednodušším případě se přepínací
tlačítko vytvoří následovně:</p>

<pre>
app.addCheckBox("text checkboxu")
</pre>

<p>Stav zaškrtávacího tlačítka se zjišťuje metodou
<strong>getCheckBox()</strong>, které se předá text checkboxu. Vidíme tedy, že
text se současně používá jako identifikátor widgetu. Dejte si tedy pozor na to,
aby se v&nbsp;jednom okně či dialogu nevyskytl stejně pojmenovaný checkbox:</p>

<pre>
app.getCheckBox("text checkboxu")
</pre>

<p>Návratovou hodnotou této funkce je pravdivostní hodnota True či False.</p>

<p>V&nbsp;dalším demonstračním příkladu se po stlačení tlačítka Ok zobrazí stav
obou zaškrtávacích polí. Povšimněte si, že můžeme bez problémů používat znaky
Unicode; navíc dokáže <strong>infoBox</strong> zobrazit víceřádkový text.</p>

<img src="https://i.iinfo.cz/images/627/appjar2-4.png" class="image-306358" alt="&#160;" width="179" height="121" />
<p><i>Obrázek 6: Použití Unicode znaků ve víceřádkové zprávě.</i></p>

<p>Následuje zdrojový kód příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
CHECK_SYMBOL = "\u2713"
MULTIPLY_SYMBOL = "\u2715"
&nbsp;
&nbsp;
def state(choice):
    return CHECK_SYMBOL if choice else MULTIPLY_SYMBOL
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "1st choice: {c1}\n2nd choice: {c2}".format(
            c1=state(app.getCheckBox("1st choice")),
            c2=state(app.getCheckBox("2nd choice")))
        app.infoBox("Show choices:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 10)
&nbsp;
app.addCheckBox("1st choice", 1, 1)
app.addCheckBox("2nd choice", 2, 1)
app.addButton("Show choices", onButtonPress, 3, 1)
app.addButton("Quit", onButtonPress, 3, 2)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-5.png" class="image-306359" alt="&#160;" width="231" height="181" />
<p><i>Obrázek 7: Screenshot dnešního třetího demonstračního příkladu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Konfigurace zaškrtávacích polí</h2>

<p>Metodou <strong>setCheckBox()</strong> je možné nastavit ta zaškrtávací
pole, která mají být implicitně vybrána:</p>

<pre>
app.setCheckBox("1st choice", ticked=True)
</pre>

<p>Navíc je možné explicitně zavolat funkci navázanou na příslušný widget
(tímto tématem jsme se však ještě nezabývali):</p>

<pre>
app.setCheckBox("1st choice", callFunction=True)
</pre>

<p>V&nbsp;následujícím demonstračním příkladu je po jeho spuštění implicitně
vybráno první zaškrtávací pole:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
CHECK_SYMBOL = "\u2713"
MULTIPLY_SYMBOL = "\u2715"
&nbsp;
&nbsp;
def state(choice):
    return CHECK_SYMBOL if choice else MULTIPLY_SYMBOL
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "1st choice: {c1}\n2nd choice: {c2}".format(
            c1=state(app.getCheckBox("1st choice")),
            c2=state(app.getCheckBox("2nd choice")))
        app.infoBox("Show choices:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 10)
&nbsp;
<strong>app.addCheckBox("1st choice", 1, 1)</strong>
app.addCheckBox("2nd choice", 2, 1)
&nbsp;
app.setCheckBox("1st choice", ticked=True)
&nbsp;
app.addButton("Show choices", onButtonPress, 3, 1)
app.addButton("Quit", onButtonPress, 3, 2)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-6.png" class="image-306360" alt="&#160;" width="231" height="181" />
<p><i>Obrázek 8: Screenshot dnešního čtvrtého demonstračního příkladu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Přepínače (radio buttons)</h2>

<p>Dalším velmi často používaným ovládacím prvkem (přesněji řečeno
specializovanou variantou tlačítka) je takzvaný <strong>RadioButton</strong>
(přepínač). Tento typ widgetu se od předchozích dvou typů tlačítek
(<strong>Button</strong> a <strong>CheckBox</strong> odlišuje především tím, že
je používán ve větších skupinách. Z&nbsp;každé skupiny přitom může být vybrán
(nastaven) pouze jeden přepínač, od čehož je ostatně odvozen původní anglický
název tohoto ovládacího prvku, protože připomíná <a
href="https://en.wikipedia.org/wiki/Radio_button#Etymology">přepínač kanálů na
starších rádiích</a>.</p>

<p>Skupina přepínačů se vytvoří jednoduše &ndash; postačuje jim nastavit shodný
název, ale odlišný text (poslední dva parametry určují umístění widgetů do
mřížky):</p>

<pre>
app.addRadioButton("languages", "Assembler", 1, 1)
app.addRadioButton("languages", "C", 2, 1)
app.addRadioButton("languages", "C++", 3, 1)
app.addRadioButton("languages", "Perl", 4, 1)
app.addRadioButton("languages", "Python", 5, 1)
</pre>

<p>Aktuálně vybraný přepínač se zjistí snadno metodou
<strong>getRadioButton()</strong>. V&nbsp;našem konkrétním případě tedy:</p>

<pre>
volba = app.getRadioButton("languages")
</pre>

<p>Návratovou hodnotou je text zobrazený vedle vybraného přepínače.</p>

<p>Podívejme se na jednoduchý příklad, v&nbsp;němž je použita jedna skupina
pěti přepínačů:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice: {c}".format(c=app.getRadioButton("languages"))
        app.infoBox("Show choices:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
<strong>app.addRadioButton("languages", "Assembler", 1, 1)</strong>
<strong>app.addRadioButton("languages", "C", 2, 1)</strong>
<strong>app.addRadioButton("languages", "C++", 3, 1)</strong>
<strong>app.addRadioButton("languages", "Perl", 4, 1)</strong>
<strong>app.addRadioButton("languages", "Python", 5, 1)</strong>
&nbsp;
app.addButton("Show choice", onButtonPress, 6, 1)
app.addButton("Quit", onButtonPress, 6, 2)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-7.png" class="image-306361" alt="&#160;" width="223" height="226" />
<p><i>Obrázek 9: Screenshot dnešního pátého demonstračního příkladu.</i></p>

<img src="https://i.iinfo.cz/images/627/appjar2-8.png" class="image-306362" alt="&#160;" width="258" height="119" />
<p><i>Obrázek 10: Zobrazení uživatelem vybraného přepínače.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Změna způsobu zobrazení přepínačů</h2>

<p>Pokud metodou <strong>setRadioButton()</strong> nastavíme konfigurační
parametr <strong>tick</strong> na False, dojde ke změne zobrazení
přepínačů:</p>

<pre>
app.setRadioTick("languages", tick=False)
</pre>

<p>Přepínače se nyní podobají tlačítkům, z&nbsp;nichž vždy jen jedno je
implicitně vybráno:</p>

<img src="https://i.iinfo.cz/images/627/appjar2-9.png" class="image-306363" alt="&#160;" width="223" height="226" />
<p><i>Obrázek 11: Změna způsobu zobrazení přepínačů metodou
<strong>setRadioTick()</strong>.</i></p>

<p>Příklad z&nbsp;předchozí kapitoly upravíme snadno:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice: {c}".format(c=app.getRadioButton("languages"))
        app.infoBox("Show choices:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addRadioButton("languages", "Assembler", 1, 1)
app.addRadioButton("languages", "C", 2, 1)
app.addRadioButton("languages", "C++", 3, 1)
app.addRadioButton("languages", "Perl", 4, 1)
app.addRadioButton("languages", "Python", 5, 1)
&nbsp;
<strong>app.setRadioTick("languages", tick=False)</strong>
&nbsp;
app.addButton("Show choice", onButtonPress, 6, 1)
app.addButton("Quit", onButtonPress, 6, 2)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-10.png" class="image-306364" alt="&#160;" width="230" height="119" />
<p><i>Obrázek 12: Zobrazení vybraného přepínače.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Implicitně vybraný přepínač</h2>

<p>Podobně jako u zaškrtávacích tlačítek je možné i u přepínačů vybrat ten
přepínač, který je implicitně vybraný. V&nbsp;našem konkrétním případě můžeme
s&nbsp;využitím metody <strong>setRadioButton()</strong> implicitně vybrat
hodnotu/přepínač Python. Volání této metody je velmi snadné:</p>

<pre>
app.setRadioButton("languages", "Python")
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-11.png" class="image-306365" alt="&#160;" width="223" height="226" />
<p><i>Obrázek 13: Ihned po zobrazení hlavního okna je vybrán jazyk Python..</i></p>

<p>Upravený zdrojový kód demonstračního příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice: {c}".format(c=app.getRadioButton("languages"))
        app.infoBox("Show choices:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addRadioButton("languages", "Assembler", 1, 1)
app.addRadioButton("languages", "C", 2, 1)
app.addRadioButton("languages", "C++", 3, 1)
app.addRadioButton("languages", "Perl", 4, 1)
app.addRadioButton("languages", "Python", 5, 1)
&nbsp;
<strong>app.setRadioButton("languages", "Python")</strong>
&nbsp;
app.addButton("Show choice", onButtonPress, 6, 1)
app.addButton("Quit", onButtonPress, 6, 2)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-12.png" class="image-306366" alt="&#160;" width="230" height="119" />
<p><i>Obrázek 14: Zobrazení implicitně vybraného přepínače.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Seznam (listbox)</h2>

<p>Při výběru z&nbsp;většího množství položek se stává použití přepínačů
(<strong>RadioButton</strong>) neefektivní a většinou se namísto nich využívá
další ovládací prvek nazvaný jednoduše <strong>ListBox</strong> neboli seznam
(což je ovšem v&nbsp;kontextu programovacího jazyka Python poněkud matoucí
název). Tento ovládací prvek umožňuje, aby uživatel vybral jednu či několik
položek z&nbsp;prakticky libovolně dlouhého seznamu řetězců. Vzhledem
k&nbsp;tomu, že seznam/listbox je ovládacím prvkem obsahujícím větší množství
hodnot, pracuje se s&nbsp;ním dosti odlišným způsobem, než tomu bylo u
přepínačů. Nejprve si ukažme, jakým způsobem se <strong>ListBox</strong>
vytváří a jak se do něj vkládají jednotlivé řetězce (položky). Vše zajišťuje
jediná metoda, které se předá jméno ovládacího prvku a seznam hodnot:</p>

<pre>
app.addListBox("listbox", ["Assembler", "C", "C++", "Perl", "Python"])
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-13.png" class="image-306367" alt="&#160;" width="223" height="351" />
<p><i>Obrázek 15: Seznam neboli listbox s&nbsp;pěti prvky.</i></p>

<p>Pro získání vybrané hodnoty použijeme:</p>

<pre>
value = app.getListItems("listbox"))
</pre>

<p>Tato metoda se skutečně jmenuje <strong>getListItem<u>s</u>()</strong> a
nikoli jen <strong>getListItem()</strong>. Navíc tato metoda vrací seznam
hodnot, v&nbsp;tomto konkrétním případě jednoprvkový seznam. Důvod tohoto
chování si vysvětlíme později.</p>

<p>Opět se podívejme na příklad, v&nbsp;němž je listbox použit:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice: {c}".format(c=<strong>app.getListItems("listbox")</strong>)
        app.infoBox("Show choices:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
<strong>app.addListBox("listbox", ["Assembler", "C", "C++", "Perl", "Python"])</strong>
&nbsp;
app.addButton("Show choice", onButtonPress)
app.addButton("Quit", onButtonPress)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-14.png" class="image-306368" alt="&#160;" width="204" height="119" />
<p><i>Obrázek 16: Zobrazení prvku vybraného ze seznamu.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Seznam s&nbsp;možností výběru více prvků</h2>

<p>Pokud ihned po vytvoření seznamu zavoláme následující metodu:</p>

<pre>
app.setListBoxMulti("listbox", True)
</pre>

<p>změní se chování seznamu, neboť z&nbsp;něho nyní bude možné vybrat větší
množství prvků. Ostatně se můžeme podívat na další screenshot:</p>

<img src="https://i.iinfo.cz/images/627/appjar2-15.png" class="image-306369" alt="&#160;" width="223" height="351" />
<p><i>Obrázek 17: Seznam neboli listbox s&nbsp;pěti prvky. Listbox je
nakonfigurován tak, by umožnil výběr většího množství prvků.</i></p>

<p>V&nbsp;případě, že zavoláme nám již známou metodu
<strong>getListItems()</strong>:</p>

<pre>
value = app.getListItems("listbox"))
</pre>

<p>vrátí tato metoda seznam všech vybraných prvků. Právě toto je hlavní důvod,
proč je v&nbsp;názvu metody použit plurál:</p>

<img src="https://i.iinfo.cz/images/627/appjar2-16.png" class="image-306370" alt="&#160;" width="313" height="121" />
<p><i>Obrázek 18: Zobrazení všech tří prvků vybraných ze seznamu.</i></p>

<p>Opět si ukažme, jak bude vypadat upravený demonstrační příklad:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice: {c}".format(c=<strong>app.getListItems("listbox")</strong>)
        app.infoBox("Show choices:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
<strong>app.addListBox("listbox", ["Assembler", "C", "C++", "Perl", "Python"])</strong>
<strong>app.setListBoxMulti("listbox", True)</strong>
&nbsp;
app.addButton("Show choice", onButtonPress)
app.addButton("Quit", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Rozbalovací seznam</h2>

<p>Kromě klasického výběrového seznamu obsahuje knihovna <i>appJar</i> i velmi
podobný ovládací prvek nazvaný rozbalovací seznam. Ten se vytváří metodou
<strong>addOptionBox()</strong>, která má stejné parametry jako metoda
<strong>addListBox()</strong>:</p>

<pre>
app.addOptionBox("optionbox", ["Assembler", "C", "C++", "Perl", "Python"])
</pre>

<p>Vytvořený rozbalovací seznam vypadá z&nbsp;pohledu moderního desktopu trošku
zvláštně:</p>

<img src="https://i.iinfo.cz/images/627/appjar2-17.png" class="image-306371" alt="&#160;" width="150" height="149" />
<p><i>Obrázek 19: Rozbalovací seznam (OptionBox).</i></p>

<p>Ukažme si příklad, v&nbsp;němž je rozbalovací seznam použit. Můžeme vidět,
že se tento příklad prakticky neliší od předchozího příkladu, až na to, že
používáme odlišný widget:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice: {c}".format(c=<strong>app.getOptionBox("optionbox")</strong>)
        app.infoBox("Show choices:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
<strong>app.addOptionBox("optionbox", ["Assembler", "C", "C++", "Perl", "Python"])</strong>
&nbsp;
app.addButton("Show choice", onButtonPress)
app.addButton("Quit", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Widgety, které pracují se slovníkem stavů</h2>

<p>Widgety, které jsme si prozatím popsali, pracovaly buď s&nbsp;jedinou
hodnotou (vstupní textové pole, zaškrtávací pole) nebo se seznamem hodnot
(<strong>ListBox</strong>, <strong>OptionBox</strong>). V&nbsp;knihovně
<i>appJar</i> však najdeme i dva widgety, které pro reprezentaci svého stavu
používají slovník (<i>dictionary, dict</i>). Jedná se o rozbalovací seznam
umožňující výběr většího množství prvků a dále o widget nazvaný poněkud
neobvykle <strong>Properties</strong>. První zmíněný widget vrací vybrané prvky
ve formě slovníku, v&nbsp;němž je každý prvek klíčem a hodnotou je stav jeho
výběru (<strong>True</strong>/<strong>False</strong>). Naproti tomu widget
<strong>Properties</strong> používá slovník již při specifikaci těch prvků,
které se mají v&nbsp;tomto widgetu zobrazit. Podrobnosti si řekneme
v&nbsp;navazujících kapitolách.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Rozbalovací seznam s&nbsp;výběrem většího množství prvků</h2>

<p>Rozbalovací seznam, v&nbsp;němž je možné vybrat větší množství prvků, se
vytváří metodou <strong>addTickOptionBox()</strong>. Základní použití této
metody vypadá následovně:</p>

<pre>
app.addTickOptionBox("optionbox", ["Assembler", "C", "C++", "Perl", "Python"])
</pre>

<p>Povšimněte si, že běžný rozbalovací seznam se vytváří prakticky stejně:</p>

<pre>
app.addOptionBox("optionbox", ["Assembler", "C", "C++", "Perl", "Python"])
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-17.png" class="image-306371" alt="&#160;" width="150" height="149" />
<p><i>Obrázek 20: Rozbalovací seznam s&nbsp;možností výběru více prvků
(TickOptionBox) se podobá běžnému rozbalovacímu seznamu (OptionBox), ovšem u
jednotlivých prvků je zobrazen příznak výběru (&#10003;).</i></p>

<p>Jediným rozdílem je, že v&nbsp;prvním případě je možné prvky zaškrtávat.</p>

<p>Pokud zavoláme metodu:</p>

<pre>
app.getOptionBox("optionbox")
</pre>

<p>vrátí se slovník obsahující u jména každého prvku hodnotu
<strong>True</strong> či <strong>False</strong> podle toho, zda byl prvek
vybrán či nikoli:</p>

<img src="https://i.iinfo.cz/images/627/appjar2-18.png" class="image-306372" alt="&#160;" width="357" height="138" />
<p><i>Obrázek 21: Výsledek volání metody
<strong>app.getOptionBox("optionbox")</strong>.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Ukázka použití rozbalovacího seznamu s&nbsp;možností výběru více prvků</h2>

<p>Následuje příklad použití rozbalovacího seznamu s&nbsp;možností výběru více
prvků:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice: {c}".format(c=app.getOptionBox("optionbox"))
        app.infoBox("Show choices:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
<strong>app.addTickOptionBox("optionbox", ["Assembler", "C", "C++", "Perl", "Python"])</strong>
&nbsp;
app.addButton("Show choice", onButtonPress)
app.addButton("Quit", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Widget se skupinou zaškrtávacích prvků</h2>

<p>Poslední widget, který si dnes popíšeme, se jmenuje
<strong>Properties</strong>. Ve skutečnosti se jedná o skupinu zaškrtávacích
tlačítek, jenž je ovšem vytvořena jediným voláním metody
<strong>addProperties()</strong>:</p>

<pre>
app.addProperties("properties", {"Assembler": True,
                                 "C": True,
                                 "C++": False,
                                 "Perl": False,
                                 "Python": True})
</pre>

<p>Z&nbsp;ukázky je patrné, že se této metodě předává slovník s&nbsp;prvky (ty
zde vystupují jako klíče slovníku), přičemž u každého prvku lze specifikovat,
jestli má být implicitně vybrán či nikoli:</p>

<img src="https://i.iinfo.cz/images/627/appjar2-19.png" class="image-306373" alt="&#160;" width="146" height="274" />
<p><i>Obrázek 22: Widget pojmenovaný <strong>Properties</strong>.</i></p>

<p>Stav widgetu <strong>Properties</strong> se přečte metodou
<strong>getProperties()</strong>, která taktéž vrací slovník:</p>

<pre>
values = app.getProperties("properties")
</pre>

<img src="https://i.iinfo.cz/images/627/appjar2-20.png" class="image-306374" alt="&#160;" width="349" height="138" />
<p><i>Obrázek 23: Stav widgetu <strong>Properties</strong>.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Ukázka použití skupiny zaškrtávacích prvků</h2>

<p>Opět se podívejme na způsob použití widgetu <strong>Properties</strong>.
Není to nic těžkého:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choices: {c}".format(c=app.getProperties("properties"))
        app.infoBox("Show choices:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
<strong>app.addProperties("properties", {"Assembler": True,</strong>
<strong>                                 "C": True,</strong>
<strong>                                 "C++": False,</strong>
<strong>                                 "Perl": False,</strong>
<strong>                                 "Python": True})</strong>
&nbsp;
app.addButton("Show choice", onButtonPress)
app.addButton("Quit", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dvanácti dnes popsaných demonstračních příkladů
naleznete pod následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>12_button_padding.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/12_button_padding.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/12_button_padding.py</a></td></tr>
<tr><td>13_button_padding_grid.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/13_button_padding_grid.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/13_button_padding_grid.py</a></td></tr>
<tr><td>14_check_box.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/14_check_box.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/14_check_box.py</a></td></tr>
<tr><td>15_check_box_ticked.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/15_check_box_ticked.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/15_check_box_ticked.py</a></td></tr>
<tr><td>16_radio_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/16_radio_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/16_radio_button.py</a></td></tr>
<tr><td>17_radio_tick.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/17_radio_tick.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/17_radio_tick.py</a></td></tr>
<tr><td>18_default_radio_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/18_default_radio_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/18_default_radio_button.py</a></td></tr>
<tr><td>19_listbox.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/19_listbox.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/19_listbox.py</a></td></tr>
<tr><td>20_listbox_groups.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/20_listbox_groups.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/20_listbox_groups.py</a></td></tr>
<tr><td>21_option_box.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/21_option_box.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/21_option_box.py</a></td></tr>
<tr><td>22_tick_option_box.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/22_tick_option_box.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/22_tick_option_box.py</a></td></tr>
<tr><td>23_properties.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/23_properties.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/23_properties.py</a></td></tr>
</table>

<p>Poznámka: pro úspěšné spuštění těchto příkladů musíte mít v&nbsp;aktuálním
adresáři rozbalenou knihovnu <i>appJar</i>!. Podrobnosti jsme si řekli <a
href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/">v&nbsp;předchozím
článku</a>.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

