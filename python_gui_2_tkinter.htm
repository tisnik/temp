<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické uživatelské rozhraní v Pythonu: knihovna Tkinter</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické uživatelské rozhraní v Pythonu: knihovna Tkinter</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Prvním systémem pro tvorbu grafického uživatelského rozhraní v&nbsp;Pythonu, který si popíšeme, je Tkinter. Jedná se o standardní knihovnu pro GUI pro Python, ovšem její největší předností je velmi snadné použití a možnost rozšiřování sady widgetů o další ovládací prvky.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Grafické uživatelské rozhraní v Pythonu: knihovna Tkinter</a></p>
<p><a href="#k02">2. Widgety</a></p>
<p><a href="#k03">3. Kontejnery</a></p>
<p><a href="#k04">4. Základní typy widgetů v&nbsp;knihovně Tk/Tkinter</a></p>
<p><a href="#k05">5. Vlastnosti widgetů</a></p>
<p><a href="#k06">6. První příklad: zobrazení okna s&nbsp;textem &bdquo;Hello world!&ldquo;</a></p>
<p><a href="#k07">7. Události a reakce na ně</a></p>
<p><a href="#k08">8. Druhý příklad: tlačítko reagující na stisk</a></p>
<p><a href="#k09">9. Třetí příklad: použití anonymní funkce pro reakci na stlačení tlačítka</a></p>
<p><a href="#k10">10. Správci umístění (geometrie) widgetů</a></p>
<p><a href="#k11">11. Čtvrtý a pátý příklad: umístění čtyř tlačítek do mřížky</a></p>
<p><a href="#k12">12. Šestý a sedmý příklad: prázdná místa v&nbsp;mřížce</a></p>
<p><a href="#k13">13. &bdquo;Přilepení&ldquo; widgetů k&nbsp;okrajům buněk mřížky</a></p>
<p><a href="#k14">14. Příklady 8 až 11 &ndash; různé varianty &bdquo;přilepení&ldquo; tlačítek k&nbsp;mřížce</a></p>
<p><a href="#k15">*** 15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Grafické uživatelské rozhraní v Pythonu: knihovna Tkinter</h2>

<p>Standardní knihovnou pro tvorbu grafického uživatelského rozhraní
v&nbsp;Pythonu je <a
href="https://docs.python.org/3.6/library/tkinter.html">stále Tkinter</a>.
Ostatně i jedno ze základních IDE pro Python &ndash; <a
href="https://docs.python.org/3.6/library/idle.html">IDLE</a> &ndash; tuto
knihovnu používá (viz dva přiložené screenshoty). Interně se v&nbsp;knihovně
Tkinter inicializuje interpret jazyka Tcl sloužící pro ovládání knihovny Tk,
ovšem s&nbsp;tímto interním mechanismem se prakticky nemusíme setkat (snad jen
v&nbsp;chybových hlášeních, které mohou být z&nbsp;tohoto důvodu někdy dosti
kryptické). Největší předností Tkinteru je skutečně snadná a přímočará tvorba
grafického uživatelského rozhraní, která je navíc podpořena přímočaře
použitelnými správci rozmístění ovládacích prvků (taktéž se setkáme
s&nbsp;pojmenováním <i>správci geometrie</i>), což znamená, že se při použití
Tkinteru mnohdy obejdeme bez nutnosti používat GUI editory.</p>

*** image ***
<p><i>Obrázek 1: Jednoduché integrované vývojové prostředí IDLE používá
Tkinter.</i></p>

<p>Důležitá poznámka: na tomto místě je vhodné upozornit na to, že ovládací
prvky (widgety) nabízené Tkinterem (a interně tudíž knihovnou Tk), mohou
působit poněkud zastarale. Částečné řešení spočívá v&nbsp;náhradě původních
widgetů za Ttk (<i>Themed Tk</i>), což také budeme v&nbsp;demonstračních
příkladech dodržovat. Widgety nabízené Ttk se od původních widgetů odlišují
zejména v&nbsp;tom, že se snaží dodržet zvyklosti panující na konkrétním
operačním systému a desktopovém prostředí, kde je aplikace spuštěna. To
například znamená, že na Mac OS X se budou widgety chovat odlišně, než na
Microsoft Windows či na Linuxu s&nbsp;GNOME. Navíc se u Ttk změnil způsob
nastavování vlastností widgetů, který je více konzistentní a do určité míry se
podobá kaskádním stylům (CSS) známým z&nbsp;webového světa; naproti tomu
původní sada widgetů spíše připomíná explicitní nastavování stylů značek přímo
v&nbsp;HTML.</p>

*** image ***
<p><i>Obrázek 2: Další screenshot integrovaného vývojového prostředí
IDLE.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Widgety</h2>

<p>Základem prakticky všech v&nbsp;současnosti používaných grafických
uživatelských rozhraní jsou takzvané <strong>widgety</strong>, které jsou někdy
poněkud nepřesně označovány také jako <strong>komponenty</strong>.
Z&nbsp;pohledu uživatele aplikací s&nbsp;grafickým uživatelským rozhraním se
jedná o grafické prvky zobrazené na obrazovce, které mají předem známé chování
a předvídatelnou funkci. V&nbsp;mnoha případech je chování
<strong>widgetů</strong> standardizováno či alespoň doporučováno &ndash; viz
například doporučení pro (dnes již notně zastaralý) Motif, Microsoft Windows,
Mac OS a v&nbsp;neposlední řadě také doporučení pro GNOME a KDE. Velká část
widgetů se snaží svým vzhledem do jisté míry reflektovat objekty
z&nbsp;reálného světa (tlačítka, &bdquo;teploměry&ldquo;, přepínače programů,
objekty známé z&nbsp;papírových formulářů apod.). Z&nbsp;pohledu programátora
je naproti tomu <strong>widget</strong> objektem, kterému lze nastavit určitý
stav a který reaguje na události, které při své práci generuje uživatel
(přesouvání objektů na obrazovce, stlačování obrazů tlačítek pomocí myši či
stylusu, psaní textu, gesta na dotykové obrazovce atd.).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Kontejnery</h2>

<p>Samotné widgety nejsou na obrazovce prakticky nikdy zcela osamocené, ostatně
většina knihoven pro GUI by samostatný widget nedokázala zobrazit. Ve
skutečnosti se téměř vždy nachází v&nbsp;nějakém okně, dialogu či dalším
nadřazeném widgetu. Programátoři grafických uživatelských rozhraní se často
setkají s&nbsp;pojmem <strong>kontejner</strong>. Jedná se o komponentu, na
kterou lze vkládat různé <a href="#k02">widgety</a> a mnohdy i další
kontejnery.  Obecně tak interně vzniká stromová datová struktura jejíž kořen je
představován plochou na obrazovce, na které jsou umístěna okna aplikací (dnes
je ovšem i samotná plocha obrazovky součástí větší virtuální plochy zobrazované
obecně na více monitorech). V&nbsp;těchto oknech se dále nachází kontejnery a
widgety. V&nbsp;mnoha grafických uživatelských rozhraních přitom mohou být
vybrané widgety (zdaleka ne však všechny) současně i kontejnery. Kontejnery
kromě jiného řeší i rozmístění widgetů na své ploše.</p>

<p>Způsobů pro rozmisťování widgetů do kontejnerů existuje více. Základní
dělení je na kontejnery, kde jsou widgety umisťovány absolutně (do této
kategorie patří WinAPI, MFC, OWL a VCL) a naopak kontejnery, které widgety
většinou umisťují podle své velikosti a vzájemných vztahů (zde se nachází
javovské AWT, Swing, GTK, Qt, Tk/Tkinter a mnoho dalších). V&nbsp;toolkitu
<strong>Tk</strong> a tím pádem i v&nbsp;Tkinteru se mohou widgety umisťovat
několika různými způsoby (pack, place a grid).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základní typy widgetů v&nbsp;knihovně Tk/Tkinter</h2>

<p>V&nbsp;průběhu mnoha let se množina widgetů používaných v&nbsp;různých
grafických uživatelských rozhraních postupně rozšiřovala, ostatně postačí se
podívat na obrázky z&nbsp;prvních grafických rozhraní navržených ve společnosti
Xerox a porovnat je s&nbsp;moderním desktopem. Současně však také docházelo ke
sjednocování vzhledu jednotlivých widgetů i jejich chování na různých
platformách. Vzhled samozřejmě není na všech platformách přesně stejný, to však
pro uživatele většinou nemusí představovat významnější praktický problém, na
rozdíl od odlišného chování celého prostředí i jednotlivých widgetů.</p>

<p>V&nbsp;toolkitu <strong>Tk</strong> je k&nbsp;dispozici poměrně velké
množství widgetů, podobně jako v&nbsp;dalších moderních toolkitech. Navíc dnes
widgety existují ve dvou podobách &ndash; starší (původní) a novější (Ttk
neboli &bdquo;themed Tk&ldquo;), které lépe odpovídají požadavkům uživatelů
současných desktopových prostředí a jejichž vzhled a chování se může od
původních widgetů odlišovat. V&nbsp;následující tabulce je uveden seznam
základních typů widgetů. Pro mnoho aplikací je níže uvedená skupina widgetů
dostačující, avšak v&nbsp;případě, že aplikace potřebuje vytvořit nový widget,
je to samozřejmě možné, protože knihovna <strong>Tk</strong> je navržena tak,
že ji lze poměrně jednoduchým způsobem rozšiřovat. V&nbsp;následující tabulce
si také můžete všimnout toho, že některé widgety jsou pojmenovány odlišným
způsobem od dnes používané terminologie. Vychází to z&nbsp;faktu, že
<strong>Tcl/Tk</strong> je mnohem starší než většina dnešních toolkitů.</p>

<table>
<tr><th>Jméno widgetu</th><th>Význam a funkce</th></tr>
<tr><td><strong>label</strong></td><td>widget, který zobrazuje v&nbsp;okně či dialogu měnitelný text</td></tr>
<tr><td><strong>button</strong></td><td>graficky zobrazené tlačítko, které implicitně reaguje na levé tlačítko myši</td></tr>
<tr><td><strong>checkbutton</strong></td><td>dvoustavový přepínač, který implicitně reaguje na levé tlačítko myši</td></tr>
<tr><td><strong>radiobutton</strong></td><td>widget, jichž může být sdruženo větší množství, vždy pouze jeden je vybraný</td></tr>
<tr><td><strong>scale</strong></td><td>dnes nazýván pojmem slider atd., jedná se o widget s&nbsp;posuvnou částí a přidruženým textem, kde se zobrazuje hodnota v&nbsp;závislosti na poloze posuvné části</td></tr>
<tr><td><strong>entry</strong></td><td>widget, do kterého je možné zapisovat text, k&nbsp;tomu má přidruženo mnoho klávesových zkratek (jde o kombinaci staršího a novějšího standardu)</td></tr>
<tr><td><strong>spinbox</strong></td><td>widget určený pro zadávání číselných hodnot kombinací klávesnice a myši (i s&nbsp;kontrolou mezí)</td></tr>
<tr><td><strong>menu</strong></td><td>vertikální menu, které se skládá z&nbsp;více položek</td></tr>
<tr><td><strong>menubutton</strong></td><td>používá se spolu s&nbsp;<strong>menu</strong> pro vytváření jednotlivých položek</td></tr>
<tr><td><strong>listbox</strong></td><td>widget, jež nabízí na výběr libovolné množství řádků s&nbsp;textem</td></tr>
<tr><td><strong>scrollbar</strong></td><td>podobné widgetu <strong>scale</strong> s&nbsp;tím rozdílem, že zobrazuje posuvné šipky a naopak nezobrazuje přidruženou číselnou hodnotu</td></tr>
<tr><td><strong>frame</strong></td><td>jeden z&nbsp;několika nabízených kontejnerů; tento má tvar obdélníka (může být také neviditelný nebo může mít 3D rámeček)</td></tr>
<tr><td><strong>toplevel</strong></td><td>další z&nbsp;kontejnerů, tento se chová jako samostatné okno či dialog</td></tr>
<tr><td><strong>bitmap</strong></td><td>bitmapa, tj.&nbsp;rastrový obrázek</td></tr>
<tr><td><strong>photo/photoimage</strong></td><td>rastrový obrázek, jež může být načten z&nbsp;externího souboru v&nbsp;mnoha různých formátech</td></tr>
<tr><td><strong>canvas</strong></td><td>widget, na který lze programově vkládat další grafické komponenty (úsečky, oblouky, kružnice, polyčáry, text atd.)</td></tr>
</table>

<p>Výše zmíněné widgety budou podrobněji popsány v&nbsp;navazujícíh částech
tohoto seriálu. Zde se pouze chci zmínit o pěkně pojatých menu. Jednotlivá
vertikální menu se totiž mohou od mateřského okna &bdquo;odpoutat&ldquo; a
chovat se jako samostatné okno či dialog. Díky tomu lze celou aplikaci zachovat
po grafické stránce velmi kompaktní a nechat na uživateli, zda a kdy si
jednotlivá menu zobrazí v&nbsp;samostatných oknech. Aplikace přitom může
používat jak hlavní menu, tak i libovolné množství menu příručních
(kontextových, pop-up). Podobný způsob práce s&nbsp;menu je k&nbsp;vidění
například u textového editoru <a
href="http://www.vim.org/"><strong>Vim</strong></a> (ovšem pouze
v&nbsp;některých prostředích) nebo v&nbsp;grafickém editoru MtPaint.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vlastnosti widgetů</h2>

<p>Ke každému widgetu je možné nastavit mnoho různých vlastností, které mění
buď jeho vizuální vzhled na obrazovce počítače nebo jeho chování,
tj.&nbsp;způsob reakce widgetu na akce uživatele. Mezi tyto akce počítáme
například kliknutí tlačítkem myši, použití klávesových zkratek (<i>hot
keys</i>), přesunutí widgetu atd. Některé vlastnosti jsou všem widgetům
společné, další vlastnosti jsou však jedinečné pro jeden či pouze několik typů
widgetů. Je to ostatně logické, některé widgety mají speciální chování.
Vlastnosti lze nastavovat již při vytváření widgetů, na druhou stranu je také
možné vlastnosti měnit až při běhu aplikace. Způsob nastavení vlastností si
ukážeme na demonstračních příkladech. V&nbsp;následující tabulce jsou uvedeny
vlastnosti, které jsou společné prakticky všem widgetům (kromě speciálních
widgetů typu &bdquo;položka menu&ldquo;, které mají vlastnosti omezeny, stejně
tak jako jejich reakce na uživatelovu činnost). Pozor! &ndash; při použití Ttk
se nastavování vizuálních vlastností musí provádět přes styly, což si
samozřejmě taktéž ukážeme:</p>

<table>
<tr><th>Jméno vlastnosti</th><th>Popis vlastnosti</th></tr>
<tr><td><strong>background</strong></td><td>barva pozadí widgetu v&nbsp;případě, že widget není aktivní (vybraný)</td></tr>
<tr><td><strong>foreground</strong></td><td>barva popředí widgetu (například zobrazeného textu) v&nbsp;případě, že widget není aktivní (vybraný)</td></tr>
<tr><td><strong>borderwidth</strong></td><td>šířka okraje widgetu, která je zadaná v&nbsp;pixelech</td></tr>
<tr><td><strong>activebackground</strong></td><td>barva pozadí widgetu v&nbsp;případě, že je widget vybrán (typicky kurzorem myši)</td></tr>
<tr><td><strong>activeforeground</strong></td><td>barva popředí widgetu v&nbsp;případě, že je widget vybrán</td></tr>
<tr><td><strong>disabledforeground</strong></td><td>barva popředí widgetu v&nbsp;případě, že je ovládání widgetu zakázáno</td></tr>
<tr><td><strong>relief</strong></td><td>způsob prostorového zobrazení widgetu</td></tr>
<tr><td><strong>compound</strong></td><td>způsob umístění bitmapy či obrázku na widgetu</td></tr>
<tr><td><strong>bitmap</strong></td><td>bitmapa, která má být ve widgetu zobrazena</td></tr>
<tr><td><strong>image</strong></td><td>obrázek, který má být ve widgetu zobrazen (více o bitmapách a obrázcích bude uvedeno v dalších dílech)</td></tr>
<tr><td><strong>font</strong></td><td>jméno fontu, který je použit pro text uvnitř widgetu (font lze specifikovat platformově nezávislým způsobem)</td></tr>
<tr><td><strong>text</strong></td><td>text, který má být ve widgetu (tlačítko, položka menu atd.) zobrazen</td></tr>
<tr><td><strong>cursor</strong></td><td>jméno kurzoru myši, který bude použit v&nbsp;případě, že se kurzor nachází nad widgetem</td></tr>
<tr><td><strong>textvariable</strong></td><td>jméno proměnné, která je nastavována podle uživatelových manipulací s&nbsp;widgetem (StringVar v&nbsp;Tkinteru)</td></tr>
<tr><td><strong>justify</strong></td><td>zarovnání textu ve widgetu v&nbsp;případě, že se zobrazuje více řádků</td></tr>
<tr><td><strong>anchor</strong></td><td>způsob umístění textu či obrázku ve widgetu</td></tr>
</table>

<p>Vlastnosti se nastavují dvěma způsoby &ndash; u původních widgetů přímo
nastavením vlastnosti (například <i>background="red"</i>) u &bdquo;themed
Tk&ldquo; pak změnou takzvaných <i>stylů</i>, což je sice nepatrně složitější,
ovšem mnohem flexibilnější způsob.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. První příklad: zobrazení okna s&nbsp;textem &bdquo;Hello world!&ldquo;</h2>

<p>Prakticky nejjednodušším příkladem je zobrazení okna s&times;textovou
informací neboli návěštím (<i>label</i>). Tuto úlohu, kterou jsme si ostatně
již ukazovali v&nbsp;úvodním článku pro mnoho různých toolkitů, je možné řešit
tak, že se nejprve vytvoří okno (toplevel widget) a do něho se vloží widget
typu <strong>label</strong>, který požadovanou textovou informaci zobrazuje.
K&nbsp;dispozici přitom máme dva typy tohoto widgetu &ndash; jak původní
z&nbsp;knihovny Tk, tak i návěští z&nbsp;Ttk:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
root = Tk()
&nbsp;
label = ttk.Label(root, text="Hello world!")
&nbsp;
label.pack()
&nbsp;
root.mainloop()
</pre>

<p>Na řádku:</p>

<pre>
root = Tk()
</pre>

<p>je vytvořeno okno a současně je mu interně přiřazen interpret jazyka Tcl,
přes který se všechny GUI operace provádí (se samotným Tcl  však do styku
nemusíme přijít).</p>

<p>Na následujícím řádku:</p>

<pre>
label = ttk.Label(root, text="Hello world!")
</pre>

<p>je vytvořeno textové návěští a je přiřazeno k&nbsp;vytvořenému oknu.</p>

<p>Další řádek je velmi důležitý, protože se zde používá takzvaný <a
href="#k10">správce geometrie</a> <i>pack</i>. Správci geometrie jsou používáni
pro umisťování widgetů do okna. Konkrétně správce <i>pack</i> dokáže widgety
umisťovat horizontálně či vertikálně, takže je jeho použití velmi jednoduché (a
současně má tento správce hodně omezení).</p>

<p>Poslední řádek spustí interní smyčku, v&nbsp;níž se postupně získávají a
zpracovávají události z&nbsp;fronty událostí. Taková smyčka se většinou nazývá
<i>event loop</i>:</p>

<pre>
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 3: Spuštění příkladu v&nbsp;Linuxu (Fluxbox).</i></p>

<p>Příklad ve skutečnosti není úplný, protože není naprogramováno uzavření
okna. Tento problém vyřešíme tak, že do okna vložíme další widget, tentokrát
typu <strong>button</strong>. Po stlačení tohoto tlačítka se okno korektně
uzavře. Nejprve si však musíme vysvětlit koncept <i>událostí (events)</i></p>

*** image ***
<p><i>Obrázek 4: Díky tomu, že je toolkit Tk použitelný i v&nbsp;dnes již
zastaralých systémech, lze stejný příklad spustit například i na obstarožních
Windows XP.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Události a reakce na ně</h2>

<p>Při programování grafických uživatelských rozhraní je často používán pojem
události (<strong>event(s)</strong>). Událostmi řízené programování je ostatně
s&nbsp;programováním GUI prakticky neoddělitelně spojeno. Každý widget může
v&nbsp;průběhu svého života generovat nějaké události. Naprostá většina
událostí vzniká tak, že uživatel s&nbsp;widgetem interaktivně pracuje
(například stlačí tlačítko zobrazené na obrazovce). Ke každému widgetu je
příslušná jedna &bdquo;implicitní&ldquo; událost, na kterou reaguje. Tato
událost se nastavuje pomocí změny vlastnosti widgetu, což bude ukázáno
v&nbsp;demonstračních příkladech v&nbsp;následujících kapitolách. Kromě
implicitní události lze na widgety navázat i další události, například tlačítko
(<strong>button</strong>) může reagovat i na stlačení klávesy na klávesnici, na
pravé tlačítko myši či na rolování kolečkem myši. Toto navázání se provádí
pomocí příkazu <strong>bind</strong>, který obsahuje množství voleb. Musíme si
však uvědomit, že některé události se na různých operačních systémech a
desktopových prostředích mohou generovat různým způsobem &ndash; typicky se
jedná o přesun fokusu.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Druhý příklad: tlačítko reagující na stisk</h2>

<p>V&nbsp;dnešním druhém demonstračním příkladu přidáme do okna další ovládací
prvek (widget). Bude se jednat o tlačítko, které bude reagovat na svůj stisk,
což je jedna ze základních uživatelem vyvolaných událostí, které mohou
v&nbsp;GUI vzniknout. Při vytváření tlačítka můžeme přes nepovinný pojmenovaný
parametr <strong>command</strong> určit, která funkce se při stisku tlačítka
zavolá (jedná se tedy o takzvanou <i>callback funkci</i>):</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = Tk()
&nbsp;
label = ttk.Label(root, text="Hello world!")
button = ttk.Button(root, text="Close window", command=<strong>exit</strong>)
&nbsp;
label.pack()
button.pack()
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 5: Spuštění druhého příkladu ve Fluxboxu.</i></p>

*** image ***
<p><i>Obrázek 6: Běh na Windows.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Třetí příklad: použití anonymní funkce pro reakci na stlačení tlačítka</h2>

<p>Pozor si musíte dát na to, že se předává skutečně jen jméno funkce (zde
<strong>exit</strong>) a nikoli její parametry. Pokud byste za jméno zapsali
kulaté závorky s&nbsp;parametry, funkce by se již při konstrukci tlačítka
zavolala a použila by se její <i>návratová hodnota</i>, což většinou není
takové chování, jaké požadujeme.</p>

<p>Vzhledem k&nbsp;tomu, že mnoho reakcí na události je velmi jednoduchých,
vedlo by vytváření zvláštních funkcí pro každou událost ke zbytečně rozsáhlému
kódu. V&nbsp;Pythonu však můžeme použít i jednodušší formu anonymních funkcí
(oproti plnohodnotným anonymním funkcím mohou obsahovat výraz, nikoli však
řídicí bloky), takže předchozí příklad lze přepsat následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
label = ttk.Label(root, text="Hello world!")
button = ttk.Button(root, text="Close window", command=<strong>lambda: sys.exit(0)</strong>)
&nbsp;
label.pack()
button.pack()
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 7: Spuštění třetího příkladu ve Fluxboxu (screenshot by měl být
totožný s&nbsp;obrázkem číslo 3).</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Správci umístění (geometrie) widgetů</h2>

<p>Existují dva základní způsoby, jakými lze vkládat widgety do okna či
dialogu. První možností, která byla použita zejména v&nbsp;aplikacích tvořených
pomocí <i>WinAPI</i> (Windows API) a <i>MFC</i> (Microsoft Foundation Classes),
je absolutní umisťování, například specifikací souřadnic levého horního rohu
widgetu a jeho šířky a výšky. Tato možnost je dobře použitelná pouze pro ty
aplikace, které mají běžet na jedné platformě s&nbsp;jedním správcem oken. Pro
multiplatformní aplikace, u nichž není dopředu známá přesná velikost oken ani
rozlišení obrazovky, se často používá druhá možnost, při které jsou widgety
umisťováni buď relativně vůči sobě nebo do flexibilních mřížek či dalších tvarů
&ndash; tento způsob využívají prakticky všechny modernější knihovny widgetů,
jakými jsou <i>Qt</i>, <i>GTK</i> i <i>Swing</i>.</p>

<p>Oba dva výše zmíněné způsoby jsou v&nbsp;knihovně <i>Tkinter</i>
podporovány, používat by se však měl především způsob druhý, tj.&nbsp;relativní
umisťování widgetů. Pro umisťování jednotlivých widgetů do okna jsou
v&nbsp;<i>Tkinter</i> používáni takzvaní <i>správci (manažeři) geometrie</i>.
K&nbsp;dispozici je několik typů těchto správců. V&nbsp;předchozích příkladech
jsme používali správce <i>pack</i>, ovšem velmi užitečný je i správce
<i>grid</i>.</p>

<p>Poznámka: jméno manažeru <i>grid</i> sice může připomínat například
<i>GridLayout</i> z&nbsp;Javy, ovšem Tkinterovská varianta je mnohem
jednodušeji použitelná a současně i více flexibilní.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Čtvrtý a pátý příklad: umístění čtyř tlačítek do mřížky</h2>

<p>S&nbsp;použitím manažeru <i>grid</i> se widgety umisťují do neviditelné
mřížky. Velikost mřížky je automaticky měněna tak, aby se do ní všechny
vkládané widgety umístily v&nbsp;&bdquo;rozumné&ldquo; velikosti. Programově je
však možné měnit vzdálenost mezi jednotlivými widgety a tím také měnit velikost
mřížky. V&nbsp;dalším demonstračním příkladu jsou do okna umístěny čtyři
tlačítka (widgety typu <strong>button</strong>) do jedné mřížky 2&times;2
buňky:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="First button")
button2 = ttk.Button(root, text="Second button")
button3 = ttk.Button(root, text="Third button")
button4 = ttk.Button(root, text="Fourth button")
&nbsp;
button1.grid(column=1, row=1)
button2.grid(column=2, row=1)
button3.grid(column=1, row=2)
button4.grid(column=2, row=2)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 8: Čtvrtý demonstrační příklad.</i></p>

<p>Umístění tlačítek je patrné z&nbsp;dalšího screenshotu. Všimněte si, že bez
dalšího explicitního nastavení je každé tlačítko pouze tak velké, aby se do něj
vešel zadaný text.</p>

<p>K&nbsp;tlačítkům samozřejmě můžeme přiřadit nějakou akci vyvolanou jejich
stlačením:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="First button", command=lambda: sys.exit(0))
button2 = ttk.Button(root, text="Second button", command=lambda: sys.exit(0))
button3 = ttk.Button(root, text="Third button", command=lambda: sys.exit(0))
button4 = ttk.Button(root, text="Fourth button", command=lambda: sys.exit(0))
&nbsp;
button1.grid(column=1, row=1)
button2.grid(column=2, row=1)
button3.grid(column=1, row=2)
button4.grid(column=2, row=2)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 9: Čtvrtý demonstrační příklad.</i></p>

<p>Pokud bychom tlačítka umístili do okna manažerem <i>pack</i>, vypadal by
výsledek odlišně, i když by se aplikace chovala stejně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="First button")
button2 = ttk.Button(root, text="Second button with long text")
button3 = ttk.Button(root, text="Third button")
button4 = ttk.Button(root, text="Fourth button")
&nbsp;
button1.pack()
button2.pack()
button3.pack()
button4.pack()
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 10: Použití správce geometrie <strong>pack</strong>.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Šestý a sedmý příklad: prázdná místa v&nbsp;mřížce</h2>

<p>Můžeme si také vyzkoušet změnit umístění jednotlivých tlačítek
v&nbsp;mřížce. Pokud není do nějaké buňky mřížky vložen widget, je tato plocha
prázdná:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="First button")
button2 = ttk.Button(root, text="Second button")
button3 = ttk.Button(root, text="Third button")
button4 = ttk.Button(root, text="Fourth button")
&nbsp;
button1.grid(column=2, row=4)
button2.grid(column=3, row=1)
button3.grid(column=1, row=3)
button4.grid(column=4, row=2)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 11: Čtyři tlačítka v&nbsp;pomyslné mřížce 4&times;4
buňky.</i></p>

<p>Opět můžeme k&nbsp;tlačítkům přiřadit nějakou akci vyvolanou jejich
stlačením:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="First button", command=lambda: sys.exit(0))
button2 = ttk.Button(root, text="Second button", command=lambda: sys.exit(0))
button3 = ttk.Button(root, text="Third button", command=lambda: sys.exit(0))
button4 = ttk.Button(root, text="Fourth button", command=lambda: sys.exit(0))
&nbsp;
button1.grid(column=2, row=4)
button2.grid(column=3, row=1)
button3.grid(column=1, row=3)
button4.grid(column=4, row=2)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 12: Čtyři tlačítka v&nbsp;pomyslné mřížce 4&times;4
buňky.</i></p>

<p>Navíc lze widgety pomocí parametrů <strong>columnspan</strong> a
<strong>rowspan</strong> nastavit tak, aby obsadily více sousedních buněk
(pokud se ovšem widgety nezvětší na celou plochu buňky, nebude toto nastavení
vždy viditelné):</p>

<pre>
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="First button", command=lambda: sys.exit(0))
button2 = ttk.Button(root, text="Second button", command=lambda: sys.exit(0))
button3 = ttk.Button(root, text="Third button", command=lambda: sys.exit(0))
button4 = ttk.Button(root, text="Fourth button", command=lambda: sys.exit(0))
&nbsp;
button1.grid(column=1, row=1)
button2.grid(column=2, row=2)
button3.grid(column=1, row=3, columnspan=2)
button4.grid(column=4, row=1, rowspan=3)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 13: Tlačítka přesahující přes několik buněk.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. &bdquo;Přilepení&ldquo; widgetů k&nbsp;okrajům buněk mřížky</h2>

<p>Widget je možné &bdquo;přilepit&ldquo; k&nbsp;vybraným okrajům buňky (či
buněk), a to konkrétně pomocí vlastnosti nazvané <strong>sticky</strong>.
V&nbsp;nejjednodušším případě se této vlastnosti přiřazuje řetězec, který může
obsahovat libovolnou kombinaci písmen <strong>n</strong> (<i>north</i>),
<strong>s</strong> (<i>south</i>), <strong>e</strong> (<i>east</i>) nebo
<strong>w</strong> (<i>west</i>). Widget je po zadání této vlastnosti přilepen
ke specifikovaným okrajům buňky, což mj.&nbsp;může znamenat, že dojde
k&nbsp;jeho zvětšení.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Příklady 8 až 11 &ndash; různé varianty &bdquo;přilepení&ldquo; tlačítek k&nbsp;mřížce</h2>

<p>V&nbsp;této kapitole si ukážeme, jak lze modifikovat následující příklad,
v&nbsp;němž je zobrazena čtveřice tlačítek v&nbsp;mřížce 2&times;2 buňky:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="1st btn", command=lambda: sys.exit(0))
button2 = ttk.Button(root, text="Second button", command=lambda: sys.exit(0))
button3 = ttk.Button(root, text="Third button", command=lambda: sys.exit(0))
button4 = ttk.Button(root, text="This is fourth button, the last one",
                     command=lambda: sys.exit(0))
&nbsp;
button1.grid(column=1, row=1)
button2.grid(column=2, row=1)
button3.grid(column=1, row=2)
button4.grid(column=2, row=2)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 14: Implicitně jsou tlačítka v&nbsp;buňkách pouze
vycentrována.</i></p>

<p>Všechna tlačítka jsou &bdquo;přilepena&ldquo; k&nbsp;západnímu (tedy levému)
okraji svých buněk:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="1st btn", command=lambda: sys.exit(0))
button2 = ttk.Button(root, text="Second button", command=lambda: sys.exit(0))
button3 = ttk.Button(root, text="Third button", command=lambda: sys.exit(0))
button4 = ttk.Button(root, text="This is fourth button, the last one",
                     command=lambda: sys.exit(0))
&nbsp;
button1.grid(column=1, row=1, sticky="w")
button2.grid(column=2, row=1, sticky="w")
button3.grid(column=1, row=2, sticky="w")
button4.grid(column=2, row=2, sticky="w")
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 15: Přilepení tlačítek k&nbsp;západnímu (levému) okraji
buněk.</i></p>

<p>Všechna tlačítka jsou &bdquo;přilepena&ldquo; k&nbsp;východnímu (tedy
pravému) okraji svých buněk:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="1st btn", command=lambda: sys.exit(0))
button2 = ttk.Button(root, text="Second button", command=lambda: sys.exit(0))
button3 = ttk.Button(root, text="Third button", command=lambda: sys.exit(0))
button4 = ttk.Button(root, text="This is fourth button, the last one",
                     command=lambda: sys.exit(0))
&nbsp;
button1.grid(column=1, row=1, sticky="e")
button2.grid(column=2, row=1, sticky="e")
button3.grid(column=1, row=2, sticky="e")
button4.grid(column=2, row=2, sticky="e")
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 16: Přilepení tlačítek k&nbsp;východnímu (pravému) okraji
buněk.</i></p>

<p>Všechna tlačítka jsou &bdquo;přilepena&ldquo; jak k&nbsp;západnímu, tak i
k&nbsp;východnímu okraji, což mj.&nbsp;znamená, že pod sebou ležící tlačítka
mají shodnou šířku:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="1st btn", command=lambda: sys.exit(0))
button2 = ttk.Button(root, text="Second button", command=lambda: sys.exit(0))
button3 = ttk.Button(root, text="Third button", command=lambda: sys.exit(0))
button4 = ttk.Button(root, text="This is fourth button, the last one",
                     command=lambda: sys.exit(0))
&nbsp;
button1.grid(column=1, row=1, sticky="we")
button2.grid(column=2, row=1, sticky="we")
button3.grid(column=1, row=2, sticky="we")
button4.grid(column=2, row=2, sticky="we")
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 17: Výplň celé buňky tlačítky, které jsou přilepené
k&nbsp;západní i východní straně.</i></p>

<p>Poslední tlačítko obsazuje celý třetí sloupec mřížky a je navíc přilepeno
k&nbsp;severnímu (hornímu) i jižnímu (spodnímu) okraji:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="1st btn", command=lambda: sys.exit(0))
button2 = ttk.Button(root, text="Second button", command=lambda: sys.exit(0))
button3 = ttk.Button(root, text="Third button", command=lambda: sys.exit(0))
button4 = ttk.Button(root, text="This is fourth button, the last one",
                     command=lambda: sys.exit(0))
&nbsp;
button1.grid(column=1, row=1, sticky="we")
button2.grid(column=2, row=2, sticky="we")
button3.grid(column=1, row=3, sticky="we")
button4.grid(column=3, row=1, rowspan=4, sticky="nswe")
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 18: Čtvrté tlačítko používá &bdquo;přilepení&ldquo; ke všem
stranám spojené buňky.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnešních demonstračních příkladů naleznete pod
následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
<tr><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/</a></td></tr>
</table>

*** image ***
<p><i>Obrázek 19: Způsob změny stylu ovládacích prvků jak přímo, tak i
s&nbsp;využitím stylů si popíšeme příště.</i></p>

*** image ***
<p><i>Obrázek 20: Ukázka dalších základních widgetů.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

