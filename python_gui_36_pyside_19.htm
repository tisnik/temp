<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Práce s&nbsp;vektorovým formátem SVG ve frameworku PySide (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Práce s&nbsp;vektorovým formátem SVG ve frameworku PySide (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;dnešním článku o frameworku PySide se podruhé budeme zabývat způsobem použití formátu SVG (Scalable Vector Graphics). Minule jsme si řekli, jak se SVG vykresluje, dnes si ukážeme mj. i způsob jeho tvorby pomocí třídy QSvgGenerator.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Práce s&nbsp;vektorovým formátem SVG ve frameworku PySide (dokončení)</a></p>
<p><a href="#k02">2. &bdquo;Ruční&ldquo; tvorba SVG a nevýhody tohoto postupu</a></p>
<p><a href="#k03">3. Použití tříd <strong>QSvgGenerator</strong> a <strong>QPainter</strong> při tvorbě SVG</a></p>
<p><a href="#k04">4. První demonstrační příklad &ndash; pokus o vytvoření výkresu ve formátu SVG</a></p>
<p><a href="#k05">5. Druhý demonstrační příklad &ndash; vytvoření prázdného SVG bez entit a role značky &lt;g&gt;</a></p>
<p><a href="#k06">6. Třetí demonstrační příklad &ndash; nastavení titulku a popisku SVG výkresu</a></p>
<p><a href="#k07">7. Velikost výkresu a pohledový box</a></p>
<p><a href="#k08">8. Čtvrtý demonstrační příklad &ndash; nastavení velikosti a pohledového boxu výkresu</a></p>
<p><a href="#k09">9. Výsledky vygenerované čtvrtým příkladem</a></p>
<p><a href="#k10">10. Pátý příklad &ndash; vykreslení základních 2D entit do výkresu</a></p>
<p><a href="#k11">11. Výsledek vygenerovaný pátým příkladem</a></p>
<p><a href="#k12">12. Podpora rastrových operací prováděných při vykreslování 2D entit do SVG</a></p>
<p><a href="#k13">13. Šestý demonstrační příklad &ndash; klasické rastrové operace</a></p>
<p><a href="#k14">14. Sedmý demonstrační příklad &ndash; rastrové operace využívající alfa kanál</a></p>
<p><a href="#k15">15. Výsledky vytvořené šestým a sedmým příkladem</a></p>
<p><a href="#k16">16. Osmý demonstrační příklad &ndash; použití rastrového obrázku v&nbsp;SVG</a></p>
<p><a href="#k17">17. Výsledek vygenerovaný osmým demonstračním příkladem</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Články o možnostech a vlastnostech formátu SVG</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Práce s&nbsp;vektorovým formátem SVG ve frameworku PySide (dokončení)</h2>

<p><a
href="https://www.root.cz/clanky/prace-s-vektorovym-formatem-svg-ve-frameworku-pyside/">V&nbsp;předchozí
části</a> <a
href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">seriálu
o tvorbě aplikací s&nbsp;GUI v&nbsp;Pythonu</a> jsme se seznámili s&nbsp;tím,
jak je možné v&nbsp;knihovně PySide využívat výkresy či kresby uložené ve
formátu SVG (<i>Scalable Vector Graphics</i>), a to jak při zobrazování
jednotlivých ovládacích prvků (widgetů), tak i při rasterizaci SVG do
bitmapového obrázku (<strong>QBitmap</strong>, <strong>QPixmap</strong>). Dnes
na toto téma částečně navážeme, protože si ukážeme způsob vytváření nových
výkresů s&nbsp;využitím tříd <strong>QSvgGenerator</strong> a
<strong>QPainter</strong> (s&nbsp;touto třídou jsme se již v&nbsp;tomto seriálu
několikrát setkali, protože se jedná o základní třídu použitou pro práci
s&nbsp;2D grafikou v&nbsp;knihovně PySide a používá se i při tvorbě GUI).</p>

<p>Nejprve si však řekněme, jak vlastně vypadá základní struktura prakticky
každého SVG souboru. Jako v&nbsp;jakémkoli jiném XML dokumentu i v&nbsp;SVG
musí být na prvním řádku uveden takzvaný <i>prolog</i>, ve kterém je uvedena
použitá verze XML (prozatím typicky 1.0, méně často pak 1.1) a většinou také
použité kódování znaků (implicitně je předpokládáno UTF-8) či informace o tom,
zda dokument obsahuje reference na externí entity. Na následujícím řádku bývá
dobrým zvykem uvedení odkazu na externí DTD (<i>Document Type Declaration</i>).
Jmenný prostor SVG má identifikaci http://www.w3­.org/2000/svg (ta bude použita
u značky &lt;svg&gt;), veřejný identifikátor PUBLIC "-W3CDTD SVG 1.0EN" a
systémový identifikátor
http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd pro SVG verze 1.0
popř.&nbsp;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd pro verzi 1.1.</p>

<p>Samotný dokument s&nbsp;kresbou je celý obsažen ve značce &lt;svg&gt;, která
může mít uvedeno několik atributů. Typicky zde bývá umístěna minimálně
informace o velikosti obrázku, umístění obdélníku s&nbsp;pohledem na obrázek
(takzvaný <i>view box</i>) a jmenném prostoru pro značky SVG a popř.&nbsp;i
jmenném prostoru pro značky Xlink (použité pro vytváření jednosměrných i
oboustranných vazeb). Uvedením atributu xmlns se jmenným prostorem
odpovídajícím SVG je umožněno, aby se všechny značky SVG mohly uvádět bez
prefixu, který by celý zápis dokumentu prodloužil a také znepřehlednil. Dále se
většinou specifikuje verze SVG (1.0, 1.1, 1.2) a v&nbsp;případě verze &lt; 1 i
profil (tiny, basic, ...). Velmi často se setkáme se <a
href="https://www.w3.org/TR/SVGMobile/">SVG Tiny verze 1.2</a>. Pokud budeme
brát v&nbsp;úvahu všechny výše uvedené informace o prologu, DTD a značce
&lt;svg&gt;, můžeme zkonstruovat kostru použitelnou u prakticky každého SVG
dokumentu:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN"
"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"&gt;
&lt;svg width="100"
     height="100"
     viewBox="0 0 100 100"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
     version="1.2"
     baseProfile="tiny"
&lt;/svg&gt;
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. &bdquo;Ruční&ldquo; tvorba SVG a nevýhody tohoto postupu</h2>

<p>Vzhledem k&nbsp;tomu, že výkresy a kresby uložené ve formátu SVG jsou
založeny na XML, může být vygenerování takového souboru založeno na
primitivních I/O funkcích, například na přímém zápisu do textového souboru.
Tímto tématem jsme se již zabývali minule, takže si dnes pouze ukažme
jednoduchý skript (napsaný samozřejmě v&nbsp;Pythonu), který ukázkovou
vektorovou kresbu vytvoří. Tento skript nepoužívá žádnou specializovanou
knihovnu, ale generuje SVG řádek po řádku jen s&nbsp;využitím základních
nástrojů pro formátování řetězců. Následuje výpis zdrojového kódu tohoto
krátkého skriptu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from math import sin, cos
&nbsp;
&nbsp;
def <strong>main</strong>():
    size = 480
    with open("logo.svg", "w") as fout:
        fout.write("&lt;?xml version="1.0" encoding="UTF-8"?&gt;")
        fout.write("&lt;svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='{w}' height='{h}'&gt;\n".format(w=size, h=size))
        green = 255
        for i, r, red, blue in zip(range(0, 128), range(128, 0, -1), range(255, 0, -2), range(0, 256, 2)):
            a = i / 12.0
            b = i + 80.0
            x = size / 2 + b * cos(a)
            y = size / 2 + b * sin(a)
            p = "&lt;circle cx='{x}' cy='{y}' r='{r}' ".format(x=x, y=y, r=r)
            q = "fill='rgb({r}, {g}, {b})' style='fill-opacity:.06'/&gt;\n".format(r=red, g=green, b=blue)
            r = "fill='none' stroke='black'/&gt;\n"
            fout.write(p+q)
            fout.write(p+r)
&nbsp;
        fout.write("&lt;/svg&gt;\n")
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<img src="https://i.iinfo.cz/images/477/pyside18-1.png" class="image-324649" alt="&#160;" width="450" height="450" />
<p><i>Obrázek 1: Výsledná kresba vytvořená předchozím skriptem a uložená do
formátu SVG.</i></p>

<p>Soubor typu SVG vygenerovaný tímto skriptem by měl vypadat přibližně takto
(je zobrazen jen jeho začátek a konec):</p>

<pre>
&lt;svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='480' height='480'&gt;
&lt;circle cx='320.0' cy='240.0' r='128' fill='rgb(255, 255, 0)' style='fill-opacity:.06'/&gt;
&lt;circle cx='320.0' cy='240.0' r='128' fill='none' stroke='black'/&gt;
...
...
...
&lt;/svg&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;první verzi tohoto skriptu nebyla
do souboru přidána deklarace XML, což by však většině prohlížeček ani
grafických editorů nemělo nijak vadit při zpracování výsledné kresby.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Použití tříd <strong>QSvgGenerator</strong> a <strong>QPainter</strong> při tvorbě SVG</h2>

<p>Při tvorbě souborů typu SVG se v&nbsp;knihovně PySide používají dvě
spolupracující třídy &ndash; <strong>QSvgGenerator</strong> a
<strong>QPainter</strong>. Zatímco se třída <strong>QPainter</strong>
(resp.&nbsp;přesněji řečeno instance této třídy) stará o vykreslování 2D entit,
textu i rastrových obrázků, slouží instance třídy
<strong>QSvgGenerator</strong> jako &bdquo;plátno&ldquo; (<i>canvas</i>), na
něž se vykreslování provádí. Nyní již tedy známe minimálně dva typy plátna:</p>

<ol>

<li>Rastrový obrázek typu <strong>QImage</strong>, <strong>QPixmap</strong>
nebo <strong>QBitmap</strong></li>

<li>Generátor výkresů ve formátu SVG.</li>

</ol>

<p>Ve skutečnosti existují i další plátna, například driver tiskárny atd.</p>

<p>S&nbsp;třídou <strong>QPainter</strong> jsme se již v&nbsp;tomto seriálu
setkali. Připomeňme si, že samotný objekt <strong>QPainter</strong> (tedy
instance třídy tohoto jména) provádí vykreslení 2D entit a rastrových obrázků
na nějaké &bdquo;plátno&ldquo;, což může být buď přímo hardwarové zařízení
(grafický subsystém), rastrový obrázek nebo právě soubor SVG. Podívejme se nyní
na způsob vykreslení velmi jednoduché grafiky do rastrového obrázku
<strong>QImage</strong> s&nbsp;využitím možností nabízených třídou
<strong>QPainter</strong>. Jeden z&nbsp;klasických postupů je následující:</p>

<ol>

<li>Vytvoření instance třídy <strong>QImage</strong>, která bude tvořit
kreslicí &bdquo;plátno&ldquo; pro QPainter. Konstruktoru QImage se předává
rozlišení (počet sloupců a řádků) rastrového obrázku i formát pixelů.
Nejjednodušší (i když ne vždy nejrychlejší) je použít formát
<strong>QtGui.QImage.Format_RGB32</strong> pro plnobarevné obrázky.</li>

<li>Vytvoření objektu typu QPainter konstruktorem <strong>QPainter()</strong>
(tento konstruktor nemá v&nbsp;nejjednodušším případě žádné parametry).</li>

<li>Informace instance třídy QPainter o začátku vykreslování do instance třídy
QImage. To se provede zavoláním metody <strong>QPainter.begin()</strong>.</li>

<li>Provedení vlastního vykreslení (například barevné úsečky). Mezi
&bdquo;příkazovými závorkami&ldquo; <strong>begin</strong> a
<strong>end</strong> můžete zavolat libovolné množství vykreslovacích
operací.</li>

<li>Informace QPainteru o ukončení vykreslování. To se provede zavoláním metody
<strong>QPainter.end()</strong>.</li>

<li>Konverze objektu typu <strong>QImage</strong> na <strong>QPixmap</strong>
(nebo <strong>QBitmap</strong>).</li>

<li><strong>QPixmap</strong> či <strong>QBitmap</strong> lze již přímo
vykreslit na GUI, například umístěním na návěští.</li>

</ol>
 
<p>V&nbsp;případě, že se má vykreslování provést do souboru s&nbsp;formátem
SVG, změní se celý postup vlastně jen nepatrně:</p>

<ol>

<li>Vytvoření instance třídy <strong>QSvgGenerator</strong>, která bude tvořit
kreslicí &bdquo;plátno&ldquo; pro QPainter.</li>

<li>Specifikace jména výstupního souboru metodou
<strong>QSvgGenerator.setFileName()</strong></li>

<li>Vytvoření objektu typu QPainter konstruktorem <strong>QPainter()</strong>
(tento konstruktor nemá v&nbsp;nejjednodušším případě žádné parametry).</li>

<li>Informace instance třídy QPainter o začátku vykreslování do instance třídy
QSvgGenerator (&bdquo;plátno&ldquo;). To se provede zavoláním metody
<strong>QPainter.begin()</strong>, přičemž této metodě předáme referenci na
instanci třídy <strong>QSvgGenerator</strong>.</li>

<li>Provedení vlastního vykreslení (například barevné úsečky). Mezi
&bdquo;příkazovými závorkami&ldquo; <strong>begin</strong> a
<strong>end</strong> můžete zavolat libovolné množství vykreslovacích
operací.</li>

<li>Informace QPainteru o ukončení vykreslování. To se provede zavoláním metody
<strong>QPainter.end()</strong>.</li>

</ol>
 


<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad &ndash; pokus o vytvoření výkresu ve formátu SVG</h2>

<p>Pokusme se nyní použít třídu <strong>QSvgGenerator</strong> pro vytvoření
výkresu či kresby ve formátu SVG. Teoreticky by pro vytvoření souboru
s&nbsp;kostrou výkresu měl stačit tento program napsaný v&nbsp;Pythonu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from PySide import QtSvg
&nbsp;
<i># vytvoření instance třídy QSvgGenerator</i>
generator = QtSvg.QSvgGenerator()
&nbsp;
<i># určení typu výstupu a nastavení</i>
<i># jména výsledného souboru</i>
generator.setFileName("test1.svg")
</pre>

<p>Ve skutečnosti se po spuštění tohoto skriptu žádný soubor
&bdquo;test1.svg&ldquo; nevytvoří, a to z&nbsp;toho důvodu, že jsme vůbec
nezačali vykreslování.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Druhý demonstrační příklad &ndash; vytvoření prázdného SVG bez entit a role značky &lt;g&gt;</h2>

<p>Aby skutečně došlo k&nbsp;vytvoření souboru s&nbsp;kostrou výkresu, je nutné
zahájit vykreslování. Ve skutečnosti nemusí dojít k&nbsp;vykreslení žádné 2D
entity, protože zcela postačuje, když se vytvoří instance třídy
<strong>QPainter</strong> (<a
href="https://www.root.cz/clanky/tvorba-gui-v-pyside-graficke-operace-pouzivajici-tridu-qpainter/#k01">tu
již známe</a>) a použijí se &bdquo;příkazové závorky&ldquo;
<strong>QPainter.begin()</strong> a <strong>QPainter.end()</strong> společně
s&nbsp;určením, že výsledek vykreslování bude uložen do SVG:</p>

<pre>
<i># inicializace instance třídy QPainter</i>
painter = QtGui.QPainter()
&nbsp;
<i># začátek kreslení</i>
painter.begin(generator)
&nbsp;
<i># ihned poté ukončíme kreslení</i>
painter.end()
</pre>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from PySide import QtGui, QtSvg
&nbsp;
<i># vytvoření instance třídy QSvgGenerator</i>
generator = QtSvg.QSvgGenerator()
&nbsp;
<i># určení typu výstupu a nastavení</i>
<i># jména výsledného souboru</i>
generator.setFileName("test2.svg")
&nbsp;
<i># inicializace instance třídy QPainter</i>
painter = QtGui.QPainter()
&nbsp;
<i># začátek kreslení</i>
painter.begin(generator)
&nbsp;
<i># ihned poté ukončíme kreslení</i>
painter.end()
</pre>

<p>Pokud příklad spustíte, měl by se vytvořit soubor &bdquo;test2.svg&ldquo;
s&nbsp;následujícím obsahem:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  version="1.2" baseProfile="tiny"&gt;
&lt;title&gt;Qt Svg Document&lt;/title&gt;
&lt;desc&gt;Generated with Qt&lt;/desc&gt;
&lt;defs&gt;
&lt;/defs&gt;
&lt;g fill="none" stroke="black" stroke-width="1" fill-rule="evenodd" stroke-linecap="square" stroke-linejoin="bevel" &gt;
&nbsp;
&lt;/g&gt;
&lt;/svg&gt;
</pre>

<p>Povšimněte si použití párové značky &lt;g&gt;. Tu nalezneme v&nbsp;prakticky
každém SVG výkresu. Již <a href="#k01">v&nbsp;první kapitole</a> jsme se
dozvěděli, že formát SVG je založený na obecném značkovacím jazyku XML. To mimo
jiného znamená, že všechna data jsou uložena ve stromové struktuře. To je
ostatně patrné i z demonstračních příkladů &ndash; značka &lt;svg&gt; odpovídá
kořenu stromu, ostatní značky představují listy. Je však možné přidávat do
tohoto stromu i další uzly, které se mohou dále větvit? Ano, SVG to umožňuje a
důvod je jednoduchý: každému uzlu je možné přiřadit styl (například barvu
obrysu), který bude zděděn všemi poduzly i listy této části stromu. Uzel se
vytvoří právě s&nbsp;využitím párové značky nazvané &lt;g&gt; (od slova
<i>group</i>).</p>

<p>Všechny grafické objekty umístěné mezi počáteční a koncovou část značky
mohou mít nastavené společné vlastnosti, které jsou zapsány přímo jako atributy
značky &lt;g&gt;. A právě z&nbsp;tohoto důvodu vytváří
<strong>QSvgGenerator</strong> při kreslení jednu &bdquo;globální&ldquo;
skupinu s&nbsp;implicitním nastavením pera, štětce a režimu výplně.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Třetí demonstrační příklad &ndash; nastavení titulku a popisku SVG výkresu</h2>

<p>Dnešní třetí demonstrační příklad je již nepatrně složitější, protože si
v&nbsp;něm ukážeme nastavení metadat, která jsou přidružena k&nbsp;vlastní
kresbě. V&nbsp;případě SVG patří mezi metadata především titulek (<i>title</i>)
a popis. Tato metadata se nastavují metodami
<strong>QSvgGenerator.setTitle()</strong> a
<strong>QSvgGenerator.setDescription()</strong>. Kromě toho ještě nastavujeme
fyzické rozměry výkresu metodou <strong>QSvgGenerator.setSize()</strong> a
pohledový box s&nbsp;využitím metody
<strong>QSvgGenerator.setViewBox()</strong>. Význam těchto dvou metod bude
vysvětlen později. Úplný zdrojový kód příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from PySide import QtCore, QtGui, QtSvg
&nbsp;
<i># vytvoření instance třídy QSvgGenerator</i>
generator = QtSvg.QSvgGenerator()
&nbsp;
<i># určení typu výstupu a nastavení</i>
<i># jména výsledného souboru</i>
generator.setFileName("test3.svg")
&nbsp;
<i># specifikace rozměrů SVG obrázku</i>
generator.setSize(QtCore.QSize(320, 240))
&nbsp;
<i># viditelný výřez</i>
generator.setViewBox(QtCore.QRect(0, 0, 320, 240))
&nbsp;
<i># nastavení titulku SVG obrázku</i>
generator.setTitle("SVG: test 3")
&nbsp;
<i># popis SVG obrázku</i>
generator.setDescription("third SVG example")
&nbsp;
<i># inicializace instance třídy QPainter</i>
painter = QtGui.QPainter()
&nbsp;
<i># začátek kreslení</i>
painter.begin(generator)
&nbsp;
<i># ihned poté ukončíme kreslení</i>
painter.end()
</pre>

<p>Výsledkem činnosti tohoto skriptu bude soubor &bdquo;test3.svg&ldquo;
s&nbsp;následujícím obsahem. Povšimněte si, jaký je obsah značek &lt;title&gt;
a &lt;desc&gt;:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;svg width="112.889mm" height="84.6667mm"
 viewBox="0 0 320 240"
 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  version="1.2" baseProfile="tiny"&gt;
&lt;title&gt;SVG: test 3&lt;/title&gt;
&lt;desc&gt;third SVG example&lt;/desc&gt;
&lt;defs&gt;
&lt;/defs&gt;
&lt;g fill="none" stroke="black" stroke-width="1" fill-rule="evenodd" stroke-linecap="square" stroke-linejoin="bevel" &gt;
&nbsp;
&lt;/g&gt;
&lt;/svg&gt;
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Velikost výkresu a pohledový box</h2>

<p><a href="#k06">V&nbsp;předchozí kapitole</a> jsme se zmínili o rozměrech
výkresu a o pohledovém boxu. Jedná se o dva důležité údaje, které ovlivňují jak
způsob zobrazení SVG, tak i například rozměry SVG při tisku atd. Rozměry (nebo
též <i>viewport</i>) jsou určeny hodnotami atributů <strong>width</strong> a
<strong>height</strong>, přičemž za samotnými numerickými hodnotami můžeme
uvést i délkovou jednotku. V&nbsp;případě, že jednotka není určena, předpokládá
se, že jsou rozměry zapsány v&nbsp;pixelech. Podporované jednotky vychází
z&nbsp;HTML a CSS:</p>

<table>
<tr><th>Zkratka</th><th>Použitá jednotka</th></tr>
<tr><td>mm</td><td>milimetry</td></tr>
<tr><td>cm</td><td>centimetry</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>in</td><td>palce</td></tr>
<tr><td>pt</td><td>typografický &bdquo;bod&ldquo; neboli 1/72 palce</td></tr>
<tr><td>pc</td><td>typografická jednotka &bdquo;pica&ldquo; neboli 1/6 palce</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>px</td><td>pixely </td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>ex</td><td>výška písmena &bdquo;x&ldquo;</td></tr>
<tr><td>em</td><td>výška textového řádku (nepřesně šířka písmena &bdquo;M&ldquo;)</td></tr>
</table>

<p>Rozměry výkresu se uplatní při jeho umístění na HTML stránku, při tisku,
vkládání do vytvářených publikací apod. Další důležitou informací související
s&nbsp;použitými délkovými jednotkami je takzvaný pohledový box neboli
<i>viewbox</i> (neplést s&nbsp;<i>viewportem</i>). Pohledový box určuje výřez
z&nbsp;celé kreslicí plochy a současně i způsob přepočtu bezrozměrných jednotek
použitých v&nbsp;jednotlivých 2D entitách na fyzické délkové jednotky
popř.&nbsp;na relativní jednotky ve chvíli, kdy je šířka a výška specifikována
v&nbsp;% obsazené plochy stránky. Specifikován je čtyřmi hodnotami
<strong>minx</strong>, <strong>miny</strong>, <strong>width</strong> a
<strong>height</strong>.</p>

<p>Pokud například zadáme:</p>

<pre>
&lt;svg width="10cm"
        height="10cm"
        viewBox="0 0 100 100"&gt;
</pre>

<p>znamená to, že fyzické rozměry výkresu budou nastaveny na 10&times;10 cm a
na této ploše bude rozprostřena souřadná síť s&nbsp;rozsahem <strong>x</strong>
od 0 do 100 (bezrozměrných jednotek) a s&nbsp;rozsahem <strong>y</strong> také
od 0 do 100. Interně se při specifikaci pohledového boxu vytvoří transformační
matice, která je aplikována na všechny souřadnice.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Čtvrtý demonstrační příklad &ndash; nastavení velikosti a pohledového boxu výkresu</h2>

<p>Ve čtvrtém demonstračním příkladu vytvoříme tři výkresy, které sice budou
mít stejný obsah (bílý čtverec), ovšem rozdílné fyzické rozměry. Vykreslení
čtverce je snadné:</p>

<pre>
    <i># začátek kreslení</i>
    painter.begin(generator)
&nbsp;
    drawRectangle(painter, WHITE, 1, 1, VBOX_WIDTH-1, VBOX_HEIGHT-1)
&nbsp;
    <i># konec kreslení</i>
    painter.end()
</pre>

<p>Funkce nazvaná <strong>drawRectangle</strong> byla beze změn převzata
z&nbsp;předchozích demonstračních příkladů, v&nbsp;nichž jsme prováděli
vykreslování do GUI (a nikoli do SVG):</p>

<pre>
def <strong>drawRectangle</strong>(qPainter, color, x, y, width, height):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
</pre>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from PySide import QtCore, QtGui, QtSvg
&nbsp;
&nbsp;
<i># konstanty s n-ticemi představujícími základní barvy</i>
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
CYAN = (0, 255, 255)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)
RED = (255, 0, 0)
MAGENTA = (255, 0, 255)
WHITE = (255, 255, 255)
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou</i>
def <strong>drawRectangle</strong>(qPainter, color, x, y, width, height):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
def <strong>create_svg</strong>(name, width, height):
    VBOX_WIDTH = 100
    VBOX_HEIGHT = 100
&nbsp;
    <i># vytvoření instance třídy QSvgGenerator</i>
    generator = QtSvg.QSvgGenerator()
&nbsp;
    <i># určení typu výstupu a nastavení</i>
    <i># jména výsledného souboru</i>
    generator.setFileName(name)
&nbsp;
    <i># specifikace rozměrů SVG obrázku</i>
    generator.setSize(QtCore.QSize(width, height))
&nbsp;
    <i># viditelný výřez</i>
    generator.setViewBox(QtCore.QRect(0, 0, VBOX_WIDTH, VBOX_HEIGHT))
&nbsp;
    <i># nastavení titulku SVG obrázku</i>
    generator.setTitle("SVG: test 4")
&nbsp;
    <i># popis SVG obrázku</i>
    generator.setDescription("fourth SVG example")
&nbsp;
    <i># inicializace instance třídy QPainter</i>
    painter = QtGui.QPainter()
&nbsp;
    <i># začátek kreslení</i>
    painter.begin(generator)
&nbsp;
    drawRectangle(painter, WHITE, 1, 1, VBOX_WIDTH-1, VBOX_HEIGHT-1)
&nbsp;
    <i># konec kreslení</i>
    painter.end()
&nbsp;
&nbsp;
def <strong>main</strong>():
    create_svg("test4.svg", 10, 10)
    create_svg("test5.svg", 100, 100)
    create_svg("test6.svg", 1000, 1000)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výsledky vygenerované čtvrtým příkladem</h2>

<p>Podívejme se nyní, jak vypadají SVG soubory vygenerované čtvrtým
demonstračním příkladem. Samotné vykreslení čtverce vypadá vždy stejně:</p>

<pre>
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd" d="M1,1 L100,1 L100,100 L1,100 L1,1"/&gt;
</pre>

<p>Jedná se o deklaraci takzvané <i>cesty</i> (&bdquo;tahy štětcem&ldquo;).
Každá cesta je představována značkou &lt;path&gt;, která může mít nastaveno
velké množství atributů ovlivňujících tvar, styl či animaci cesty.
Nejdůležitější atributy této značky jsou vypsány v&nbsp;následující
tabulce:</p>

<table>
<tr><th>Atribut</th><th>Význam</th></tr>
<tr><td>d</td><td>vlastní geometrie cesty, bude podrobněji vysvětleno dále</td></tr>
<tr><td>class</td><td>třída, do které cesta spadá, může být použito například jako selektor pro styl</td></tr>
<tr><td>style</td><td>styl, kterým má být cesta vykreslena</td></tr>
<tr><td>id</td><td>identifikace cesty, může být použito například při programově řízené animaci či při změně vlastností cesty pomocí DOM</td></tr>
<tr><td>transform</td><td>lineární transformace aplikovaná na všechny specifikované vrcholy</td></tr>
</table>
 	
<p>Hodnota atributu <strong>d</strong> (od <i>data</i> či <i>definition</i>),
která je představována řetězcem obsahujícím znaky se speciálním významem a
numerické údaje, má velký význam, protože je pomocí ní zapsána celá geometrie
cesty, tj.&nbsp;koncové body úsečkových segmentů, parametry Bézierových
kvadratických i kubických křivek, parametry eliptických oblouků atd. Všechny
údaje, které se vztahují k&nbsp;souřadnicím, jsou zapisovány pomocí absolutního
či relativního pohybu grafického kurzoru.</p>

<p>Jednotlivé výkresy sice používají shodné cesty pro vytvoření čtverce, ovšem
liší se v&nbsp;nastavení fyzických rozměrů (šířky a výšky).</p>

<p>První varianta:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;svg <strong>width="3.52778mm"</strong> <strong>height="3.52778mm"</strong>
 viewBox="0 0 100 100"
 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  version="1.2" baseProfile="tiny"&gt;
&lt;title&gt;SVG: test 4&lt;/title&gt;
&lt;desc&gt;fourth SVG example&lt;/desc&gt;
&lt;defs&gt;
&lt;/defs&gt;
&lt;g fill="none" stroke="black" stroke-width="1" fill-rule="evenodd" stroke-linecap="square" stroke-linejoin="bevel" &gt;
&nbsp;
&lt;g fill="none" stroke="#ffffff" stroke-opacity="1" stroke-width="1" stroke-linecap="square" stroke-linejoin="bevel" transform="matrix(1,0,0,1,0,0)"
font-family="Helvetica" font-size="12" font-weight="400" font-style="normal" 
&gt;
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd" d="M1,1 L100,1 L100,100 L1,100 L1,1"/&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
</pre>

<p>Druhá varianta:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;svg <strong>width="35.2778mm"</strong> <strong>height="35.2778mm"</strong>
 viewBox="0 0 100 100"
 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  version="1.2" baseProfile="tiny"&gt;
&lt;title&gt;SVG: test 4&lt;/title&gt;
&lt;desc&gt;fourth SVG example&lt;/desc&gt;
&lt;defs&gt;
&lt;/defs&gt;
&lt;g fill="none" stroke="black" stroke-width="1" fill-rule="evenodd" stroke-linecap="square" stroke-linejoin="bevel" &gt;
&nbsp;
&lt;g fill="none" stroke="#ffffff" stroke-opacity="1" stroke-width="1" stroke-linecap="square" stroke-linejoin="bevel" transform="matrix(1,0,0,1,0,0)"
font-family="Helvetica" font-size="12" font-weight="400" font-style="normal" 
&gt;
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd" d="M1,1 L100,1 L100,100 L1,100 L1,1"/&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
</pre>

<p>Třetí varianta:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;svg <strong>width="352.778mm"</strong> <strong>height="352.778mm"</strong>
 viewBox="0 0 100 100"
 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  version="1.2" baseProfile="tiny"&gt;
&lt;title&gt;SVG: test 4&lt;/title&gt;
&lt;desc&gt;fourth SVG example&lt;/desc&gt;
&lt;defs&gt;
&lt;/defs&gt;
&lt;g fill="none" stroke="black" stroke-width="1" fill-rule="evenodd" stroke-linecap="square" stroke-linejoin="bevel" &gt;
&nbsp;
&lt;g fill="none" stroke="#ffffff" stroke-opacity="1" stroke-width="1" stroke-linecap="square" stroke-linejoin="bevel" transform="matrix(1,0,0,1,0,0)"
font-family="Helvetica" font-size="12" font-weight="400" font-style="normal" 
&gt;
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd" d="M1,1 L100,1 L100,100 L1,100 L1,1"/&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Pátý příklad &ndash; vykreslení základních 2D entit do výkresu</h2>

<p>Do souborů typu SVG je možné ukládat značky/tagy reprezentující šest typů
základních geometrických tvarů. Mezi tyto tvary patří úsečka (<i>line</i>),
obdélník (<i>rectangle</i>), kružnice (<i>circle</i>), elipsa (<i>ellipse</i>),
polyčára (<i>polyline</i>, lomená čára) a polygon (<i>polygon</i>). Všechny
tyto tvary je možné nahradit vhodně zapsanou cestou, ale z&nbsp;různých důvodů
(dodatečné informace pro grafické editory či další aplikace, jednodušší zápis i
čtení pomocí SAX i DOM) se můžeme často setkat i s&nbsp;přímým zápisem
základních geometrických tvarů. Definice tvarů pomocí cesty však většinou bývá
kompaktnější, což vede k&nbsp;menšímu objemu výsledného souboru (ovšem tento
rozdíl se viditelněji projeví až při velkých objemech dat, tedy při
složitějších výkresech).</p>

<p>Zkusme nyní zjistit, jestli dvojice tříd <strong>QSvgGenerator</strong> +
<strong>QPainter</strong> používá cesty nebo základní geometrické tvary. Způsob
generování SVG vyzkoušíme na příkladu, v&nbsp;němž vykreslíme různé typy 2D
entit. Výsledek by měl vypadat zhruba následovně (záleží na použité
prohlížečce):</p>

<img src="https://i.iinfo.cz/images/407/svggenerator-1.png" class="image-328727" alt="&#160;" height="812" width="520" />
<p><i>Obrázek 2: Výkres vytvořený dalším demonstračním příkladem.</i></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně.
Zdrojový kód je sice poněkud delší, ale není příliš složitý (pouze obsahuje
pomocné funkce pro vykreslení různých typů 2D entit):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from PySide import QtCore, QtGui, QtSvg
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># funkce pro vykreslení úsečky zadanou barvou</i>
def <strong>drawLine</strong>(qPainter, color, x1, y1, x2, y2):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení úsečky</i>
    qPainter.drawLine(x1, y1, x2, y2)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou</i>
def <strong>drawRectangle</strong>(qPainter, color, x, y, width, height):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se zaoblenými rohy</i>
def <strong>drawRoundedRectangle</strong>(qPainter, color, x, y, width, height, r):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRoundedRect(x, y, width, height, r, r)
&nbsp;
&nbsp;
<i># funkce pro vykreslení elipsy zadanou barvou</i>
def <strong>drawEllipse</strong>(qPainter, color, x, y, width, height):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
    qPainter.setPen(pen)
&nbsp;
    <i># vykreslení elipsy</i>
    qPainter.drawEllipse(x, y, width, height)
&nbsp;
&nbsp;
<i># funkce pro vykreslení kružnice zadanou barvou</i>
def <strong>drawCircle</strong>(qPainter, color, cx, cy, radius):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kružnice</i>
    qPainter.drawEllipse(cx-radius, cy-radius, 2*radius, 2*radius)
&nbsp;
&nbsp;
<i># funkce pro vykreslení oblouku zadanou barvou</i>
def <strong>drawArc</strong>(qPainter, color, cx, cy, radius, angle, span):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kružnice</i>
    qPainter.drawArc(cx-radius, cy-radius, 2*radius, 2*radius, 16*angle, 16*span)
&nbsp;
&nbsp;
<i># funkce pro vykreslení kruhové výseče zadanou barvou</i>
def <strong>drawPie</strong>(qPainter, color, cx, cy, radius, angle, span):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kruhové výseče</i>
    qPainter.drawPie(cx-radius, cy-radius, 2*radius, 2*radius, 16*angle, 16*span)
&nbsp;
&nbsp;
<i># funkce pro vykreslení kruhové úseče zadanou barvou</i>
def <strong>drawChord</strong>(qPainter, color, cx, cy, radius, angle, span):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kruhové úseče</i>
    qPainter.drawChord(cx-radius, cy-radius, 2*radius, 2*radius, 16*angle, 16*span)
&nbsp;
&nbsp;
def <strong>drawScene</strong>(painter):
    <i># konstanty s n-ticemi představujícími základní barvy</i>
    BLACK = (0, 0, 0)
    BLUE = (0, 0, 255)
    CYAN = (0, 255, 255)
    GREEN = (0, 255, 0)
    YELLOW = (255, 255, 0)
    RED = (255, 0, 0)
    MAGENTA = (255, 0, 255)
    WHITE = (255, 255, 255)
&nbsp;
    <i># okraje</i>
    drawRectangle(painter, WHITE, 0, 0, 330, 520)
&nbsp;
    <i># Vykreslení různých 2D entit</i>
    drawLine(painter, GREEN, 10, 10, 80, 80)
&nbsp;
    drawRectangle(painter, YELLOW, 10, 90, 70, 70)
    drawCircle(painter, RED, 125, 125, 35)
    drawEllipse(painter, CYAN, 170, 30+80, 70, 35)
    drawEllipse(painter, BLUE, 268, 10+80, 35, 70)
&nbsp;
    drawRoundedRectangle(painter, MAGENTA, 10, 170, 70, 70, 1)
    drawRoundedRectangle(painter, MAGENTA, 90, 170, 70, 70, 10)
    drawRoundedRectangle(painter, MAGENTA, 170, 170, 70, 70, 20)
    drawRoundedRectangle(painter, MAGENTA, 250, 170, 70, 70, 1000)
&nbsp;
    drawArc(painter, CYAN, 10+35, 260+35, 35, 0, 90)
    drawArc(painter, CYAN, 90+35, 260+35, 35, 45, 90)
    drawArc(painter, CYAN, 170+35, 260+35, 35, 45, 180)
    drawArc(painter, CYAN, 250+35, 260+35, 35, 45, 270)
&nbsp;
    drawPie(painter, YELLOW, 10+35, 350+35, 35, 0, 90)
    drawPie(painter, YELLOW, 90+35, 350+35, 35, 45, 90)
    drawPie(painter, YELLOW, 170+35, 350+35, 35, 45, 180)
    drawPie(painter, YELLOW, 250+35, 350+35, 35, 45, 270)
&nbsp;
    drawChord(painter, GREEN, 10+35, 440+35, 35, 0, 90)
    drawChord(painter, GREEN, 90+35, 440+35, 35, 45, 90)
    drawChord(painter, GREEN, 170+35, 440+35, 35, 45, 180)
    drawChord(painter, GREEN, 250+35, 440+35, 35, 45, 270)
&nbsp;
&nbsp;
def <strong>create_svg</strong>(name, width, height):
    <i># vytvoření instance třídy QSvgGenerator</i>
    generator = QtSvg.QSvgGenerator()
&nbsp;
    <i># určení typu výstupu a nastavení</i>
    <i># jména výsledného souboru</i>
    generator.setFileName(name)
&nbsp;
    <i># specifikace rozměrů SVG obrázku</i>
    generator.setSize(QtCore.QSize(width, height))
&nbsp;
    <i># viditelný výřez</i>
    generator.setViewBox(QtCore.QRect(0, 0, 330, 520))
&nbsp;
    <i># nastavení titulku SVG obrázku</i>
    generator.setTitle("SVG: test 7")
&nbsp;
    <i># popis SVG obrázku</i>
    generator.setDescription("fifth SVG example")
&nbsp;
    <i># inicializace instance třídy QPainter</i>
    painter = QtGui.QPainter()
&nbsp;
    <i># začátek kreslení</i>
    painter.begin(generator)
&nbsp;
    drawScene(painter)
&nbsp;
    <i># konec kreslení</i>
    painter.end()
&nbsp;
&nbsp;
def <strong>main</strong>():
    create_svg("test7.svg", 320, 320)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výsledek vygenerovaný pátým příkladem</h2>

<p>SVG soubor vytvořený pátým příkladem je již poněkud rozsáhlý, ovšem nás bude
zajímat jen způsob zápisu 2D entit, takže si uvedeme pouze vybrané části.</p>

<p>Úsečka je kupodivu zapsána jako polyčára se dvěma vrcholy:</p>

<pre>
&lt;polyline fill="none" vector-effect="non-scaling-stroke"
    points="10,10 80,80 " /&gt;
</pre>

<p>Obdélník/čtverec je reprezentován cestou (bez příkazu pro její
uzavření):</p>

<pre>
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd"
    d="M10,90 L80,90 L80,160 L10,160 L10,90"/&gt;
</pre>

<p>Kružnice je zapsána formou čtyř oblouků:</p>

<pre>
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd"
    d="M160,125 C160,144.33 144.33,160 125,160 C105.67,160 90,144.33 90,125 C90,105.67 105.67,90 125,90 C144.33,90 160,105.67 160,125 "/&gt;
</pre>

<p>Elipsa taktéž používá čtyři oblouky:</p>

<pre>
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd"
    d="M240,127.5 C240,137.165 224.33,145 205,145 C185.67,145 170,137.165 170,127.5 C170,117.835 185.67,110 205,110 C224.33,110 240,117.835 240,127.5 "/&gt;
</pre>

<p>Obdélník/čtverec se zaoblenými rohy je opět reprezentován cestou:</p>

<pre>
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd"
    d="M10,171 C10,170.448 10.4477,170 11,170 L79,170 C79.5523,170 80,170.448 80,171 L80,239 C80,239.552 79.5523,240 79,240 L11,240 C10.4477,240 10,239.552 10,239 L10,171"/&gt;
</pre>

<p>Kruhový oblouk je nutné zapsat jako cestu:</p>

<pre>
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd"
    d="M80,295 C80,275.67 64.33,260 45,260 "/&gt;
</pre>

<p>Kruhová výseč a kruhová úseč:</p>

<pre>
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd"
    d="M45,385 L80,385 C80,365.67 64.33,350 45,350 L45,385"/&gt;
&lt;path vector-effect="non-scaling-stroke" fill-rule="evenodd"
    d="M80,475 C80,455.67 64.33,440 45,440 L80,475"/&gt;
</pre>

<p>Vysvětlení jednotlivých jednoznakových příkazů v&nbsp;definicích cesty:</p>

<table>
<tr><th>Příkaz</th><th>Popis</th></tr>
<tr><td>M</td><td>absolutní pohyb bez kreslení</td></tr>
<tr><td>m</td><td>relativní pohyb bez kreslení</td></tr>
<tr><td>L</td><td>absolutní pohyb na souřadnice s kreslením úsečkového segmentu</td></tr>
<tr><td>l</td><td>relativní pohyb o souřadnice s kreslením úsečkového segmentu</td></tr>
<tr><td>H</td><td>horizontální posun (vykreslení vodorovné úsečky)</td></tr>
<tr><td>h</td><td>relativní posun v horizontálním směru (vykreslení vodorovné úsečky)</td></tr>
<tr><td>V</td><td>vertikální posun (vykreslení svislé úsečky)</td></tr>
<tr><td>v</td><td>relativní posun (vykreslení svislé úsečky)</td></tr>
<tr><td>Z</td><td>uzavření cesty úsečkovým segmentem</td></tr>
<tr><td>z</td><td>má stejný význam jako příkaz Z</td></tr>
<tr><td>Q</td><td>kvadratická Bézierova křivka zadaná trojicí řídicích bodů</td></tr>
<tr><td>q</td><td>stejný význam jako Q s tím rozdílem, že souřadnice řídicích bodů jsou zadány relativně</td></tr>
<tr><td>T</td><td>hladce navazující kvadratická Bézierova křivka</td></tr>
<tr><td>t</td><td>stejný význam jako T s tím rozdílem, že souřadnice koncového bodu kvadratické křivky jsou zadány relativně</td></tr>
<tr><td>C</td><td>kubická Bézierova křivka zadaná čtyřmi řídicími body</td></tr>
<tr><td>c</td><td>stejný význam jako C s tím rozdílem, že souřadnice řídicích bodů jsou zadány relativně</td></tr>
<tr><td>S</td><td>podobný příkazu T, ovšem s tím rozdílem, že se vytvoří kubická Bézierova křivka</td></tr>
<tr><td>s</td><td>podobné příkazu S, ale všechny souřadnice řídicích bodů jsou zadány relativně</td></tr>
<tr><td>A</td><td>eliptický oblouk zadaný absolutními souřadnicemi</td></tr>
<tr><td>a</td><td>eliptický oblouk zadaný relativními souřadnicemi</td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Podpora rastrových operací prováděných při vykreslování 2D entit do SVG</h2>

<p>Z&nbsp;předchozích částí tohoto seriálu již víme, že při vykreslování
(přesněji řečeno rasterizaci) 2D entit na plátno typu <strong>QImage</strong>
můžeme aplikovat různé operace prováděné nad jednotlivými pixely. Při
vykreslování se totiž postupuje zhruba následujícím způsobem:</p>

<ol>

<li>Vrcholy popř.&nbsp;řídicí body dvourozměrných entit jsou podrobeny vybrané
lineární transformaci (zvětšení, zmenšení, otočení, zkosení, posun atd.).</li>

<li>Zjistí se, zda je entita vůbec viditelná, tj.&nbsp;zda transformované
vrcholy leží ve viditelné oblasti.</li>

<li>Dále se provede takzvaná rasterizace, tj.&nbsp;výpočet barev pixelů
ležících na hranici entity (pero) a popř.&nbsp;i v&nbsp;ploše, kterou entita
tvoří (štětec).</li>

<li>V&nbsp;průběhu rasterizace se s&nbsp;každým vypočteným pixelem provádí
další operace, což je téma dnešního článku.</li>

</ol>

<p>Mezi prováděné rastrové operace patří:</p>

<ol>

<li>Test vůči masce, zda se má pixel vykreslit. Maska může být představována
bitmapou, tj.&nbsp;její funkce odpovídá jedné konfigurovatelné vlastnosti
<i>stencil bufferu</i> v&nbsp;OpenGL.</li>

<li>Dále se zkombinuje původní barva pixelu na plátně s&nbsp;barvou vypočtenou.
Kombinací těchto dvou barev vznikne barva třetí, která je na plátno zapsána.
Výchozí operací je pouhé přepsání staré barvy, ovšem je možné zvolit i jiné
metody.</li>

</ol>

<p>Problém spočívá v&nbsp;tom, že rasterizaci vektorového výkresu SVG neřídí
framework PySide, ale obecně libovolná SVG prohlížečka, která může být
zabudovaná například do webového browseru apod. Sice je možné při vykreslování
aplikovat <a href="https://www.w3.org/TR/SVG/filters.html">několik filtrů</a>,
ale tyto filtry neodpovídají klasickým rastrovým operacím. Proto bude zajímavé
zjistit, co se vlastně stane, pokud vezmeme skripty použité pro vykreslení
následujících obrázků a použijeme ho pro vygenerování SVG:</p>

<img src="https://i.iinfo.cz/images/533/pyside10-5.png" class="image-319409" alt="&#160;" height="867" width="602" />
<p><i>Obrázek 3: Vzorník základních rastrových operací.</i></p>

<img src="https://i.iinfo.cz/images/533/pyside10-6.png" class="image-319410" alt="&#160;" height="867" width="602" />
<p><i>Obrázek 4: Vzorník dalších rastrových operací.</i></p>

<img src="https://i.iinfo.cz/images/533/pyside10-7.png" class="image-319411" alt="&#160;" height="867" width="602" />
<p><i>Obrázek 5: Modré čtverce mají nastavenou poloviční průhlednost
(vykresleno variantou čtvrtého příkladu).</i></p>

<img src="https://i.iinfo.cz/images/533/pyside10-8.png" class="image-319412" alt="&#160;" height="867" width="602" />
<p><i>Obrázek 6: Modré i zelené čtverce mají nastavenou poloviční průhlednost
(vykresleno variantou čtvrtého příkladu).</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Šestý demonstrační příklad &ndash; klasické rastrové operace</h2>

<p>V&nbsp;šestém příkladu jsou použity základní rastrové operace podobné těm,
které jsou zobrazeny na obrázku 3 a 4. Ovšem nyní provedeme export do SVG,
nikoli vykreslení do rastrového obrázku (nad čímž má framework PySide mnohem
větší kontrolu):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from PySide import QtCore, QtGui, QtSvg
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou</i>
def <strong>drawRectangle</strong>(qPainter, color, x, y, width, height):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingBrush</strong>(qPainter, color, x, y, width, height, brush_style,
                            pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    brush = QtGui.QBrush(QtGui.QColor(*color))
    brush.setStyle(brush_style)
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
def <strong>twoOverlappingSquares</strong>(qPainter, color1, color2, x, y, compositionMode):
    <i># nastavení výchozího režimu míchání barev</i>
    qPainter.setCompositionMode(QtGui.QPainter.CompositionMode_SourceOver)
&nbsp;
    <i># první čtverec</i>
    drawRectangleUsingBrush(qPainter, color1, x, y, 100, 100,
                            QtCore.Qt.SolidPattern)
&nbsp;
    <i># nastavení režimu míchání barev</i>
    qPainter.setCompositionMode(compositionMode)
&nbsp;
    <i># druhý čtverec</i>
    drawRectangleUsingBrush(qPainter, color2, x+50, y+50, 100, 100,
                            QtCore.Qt.SolidPattern)
&nbsp;
&nbsp;
def <strong>drawScene</strong>(painter, width, height):
    <i># konstanty s n-ticemi představujícími základní barvy</i>
    BLACK = (0, 0, 0)
    BLUE = (0, 0, 255)
    CYAN = (0, 255, 255)
    GREEN = (0, 255, 0)
    YELLOW = (255, 255, 0)
    RED = (255, 0, 0)
    MAGENTA = (255, 0, 255)
    WHITE = (255, 255, 255)
&nbsp;
    <i># okraje</i>
    drawRectangle(painter, WHITE, 0, 0, width, height)
&nbsp;
    BLUE_50_ALPHA = (0, 0, 255, 128)
    GREEN_50_ALPHA = (0, 255, 0, 128)
&nbsp;
    <i># umístění čtverců na kreslicí ploše</i>
    HORIZONTAL_DISTANCE = 200
    VERTICAL_DISTANCE = 200
&nbsp;
    COLUMN_1 = 10
    COLUMN_2 = COLUMN_1 + HORIZONTAL_DISTANCE
    COLUMN_3 = COLUMN_2 + HORIZONTAL_DISTANCE
&nbsp;
    ROW_1 = 10
    ROW_2 = ROW_1 + HORIZONTAL_DISTANCE
    ROW_3 = ROW_2 + HORIZONTAL_DISTANCE
    ROW_4 = ROW_3 + HORIZONTAL_DISTANCE
&nbsp;
    <i># vykreslení sady překrývajících se čtverců</i>
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_1,
                          QtGui.QPainter.CompositionMode_SourceOver)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_2,
                          QtGui.QPainter.CompositionMode_Source)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_2, ROW_2,
                          QtGui.QPainter.CompositionMode_DestinationIn)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_3, ROW_2,
                          QtGui.QPainter.CompositionMode_SourceOut)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_3,
                          QtGui.QPainter.CompositionMode_Xor)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_2, ROW_3,
                          QtGui.QPainter.CompositionMode_Plus)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_3, ROW_3,
                          QtGui.QPainter.CompositionMode_Screen)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_4,
                          QtGui.QPainter.CompositionMode_HardLight)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_2, ROW_4,
                          QtGui.QPainter.CompositionMode_SoftLight)
&nbsp;
    twoOverlappingSquares(painter, WHITE, BLUE_50_ALPHA, COLUMN_3, ROW_4,
                          QtGui.QPainter.CompositionMode_ColorBurn)
&nbsp;
&nbsp;
def <strong>create_svg</strong>(name, width, height):
    VBOX_WIDTH = 600
    VBOX_HEIGHT = 800
    <i># vytvoření instance třídy QSvgGenerator</i>
    generator = QtSvg.QSvgGenerator()
&nbsp;
    <i># určení typu výstupu a nastavení</i>
    <i># jména výsledného souboru</i>
    generator.setFileName(name)
&nbsp;
    <i># specifikace rozměrů SVG obrázku</i>
    generator.setSize(QtCore.QSize(width, height))
&nbsp;
    <i># viditelný výřez</i>
    generator.setViewBox(QtCore.QRect(0, 0, VBOX_WIDTH, VBOX_HEIGHT))
&nbsp;
    <i># nastavení titulku SVG obrázku</i>
    generator.setTitle("SVG: test 8")
&nbsp;
    <i># popis SVG obrázku</i>
    generator.setDescription("sixth SVG example")
&nbsp;
    <i># inicializace instance třídy QPainter</i>
    painter = QtGui.QPainter()
&nbsp;
    <i># začátek kreslení</i>
    painter.begin(generator)
&nbsp;
    drawScene(painter, VBOX_WIDTH, VBOX_HEIGHT)
&nbsp;
    <i># konec kreslení</i>
    painter.end()
&nbsp;
&nbsp;
def <strong>main</strong>():
    create_svg("test8.svg", 320, 320)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Sedmý demonstrační příklad &ndash; rastrové operace využívající alfa kanál</h2>

<p>Příklad sedmý by měl vytvořit obrázky podobné těm ze screenshotu 5 či 6,
ovšem opět s&nbsp;omezením na možnosti SVG:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from PySide import QtCore, QtGui, QtSvg
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou</i>
def <strong>drawRectangle</strong>(qPainter, color, x, y, width, height):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingBrush</strong>(qPainter, color, x, y, width, height, brush_style,
                            pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    brush = QtGui.QBrush(QtGui.QColor(*color))
    brush.setStyle(brush_style)
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
def <strong>twoOverlappingSquares</strong>(qPainter, color1, color2, x, y, compositionMode):
    <i># nastavení výchozího režimu míchání barev</i>
    qPainter.setCompositionMode(QtGui.QPainter.CompositionMode_SourceOver)
&nbsp;
    <i># první čtverec</i>
    drawRectangleUsingBrush(qPainter, color1, x, y, 100, 100,
                            QtCore.Qt.SolidPattern)
&nbsp;
    <i># nastavení režimu míchání barev</i>
    qPainter.setCompositionMode(compositionMode)
&nbsp;
    <i># druhý čtverec</i>
    drawRectangleUsingBrush(qPainter, color2, x+50, y+50, 100, 100,
                            QtCore.Qt.SolidPattern)
&nbsp;
&nbsp;
def <strong>drawScene</strong>(painter, width, height):
    <i># konstanty s n-ticemi představujícími základní barvy</i>
    BLACK = (0, 0, 0)
    BLUE = (0, 0, 255)
    CYAN = (0, 255, 255)
    GREEN = (0, 255, 0)
    YELLOW = (255, 255, 0)
    RED = (255, 0, 0)
    MAGENTA = (255, 0, 255)
    WHITE = (255, 255, 255)
&nbsp;
    <i># okraje</i>
    drawRectangle(painter, WHITE, 0, 0, width, height)
&nbsp;
    BLUE_50_ALPHA = (0, 0, 255, 128)
    GREEN_50_ALPHA = (0, 255, 0, 128)
&nbsp;
    <i># umístění čtverců na kreslicí ploše</i>
    HORIZONTAL_DISTANCE = 200
    VERTICAL_DISTANCE = 200
&nbsp;
    COLUMN_1 = 10
    COLUMN_2 = COLUMN_1 + HORIZONTAL_DISTANCE
    COLUMN_3 = COLUMN_2 + HORIZONTAL_DISTANCE
&nbsp;
    ROW_1 = 10
    ROW_2 = ROW_1 + HORIZONTAL_DISTANCE
    ROW_3 = ROW_2 + HORIZONTAL_DISTANCE
    ROW_4 = ROW_3 + HORIZONTAL_DISTANCE
&nbsp;
    <i># vykreslení sady překrývajících se čtverců</i>
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_1,
                          QtGui.QPainter.CompositionMode_SourceOver)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_2,
                          QtGui.QPainter.RasterOp_SourceOrDestination)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_2, ROW_2,
                          QtGui.QPainter.RasterOp_SourceAndDestination)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_3, ROW_2,
                          QtGui.QPainter.RasterOp_SourceXorDestination)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_3,
                          QtGui.QPainter.RasterOp_NotSourceAndNotDestination)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_2, ROW_3,
                          QtGui.QPainter.RasterOp_NotSourceOrNotDestination)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_3, ROW_3,
                          QtGui.QPainter.RasterOp_NotSourceXorDestination)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_1, ROW_4,
                          QtGui.QPainter.RasterOp_NotSource)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_2, ROW_4,
                          QtGui.QPainter.RasterOp_NotSourceAndDestination)
&nbsp;
    twoOverlappingSquares(painter, GREEN_50_ALPHA, BLUE_50_ALPHA, COLUMN_3, ROW_4,
                          QtGui.QPainter.RasterOp_SourceAndNotDestination)
&nbsp;
&nbsp;
def <strong>create_svg</strong>(name, width, height):
    VBOX_WIDTH = 600
    VBOX_HEIGHT = 800
    <i># vytvoření instance třídy QSvgGenerator</i>
    generator = QtSvg.QSvgGenerator()
&nbsp;
    <i># určení typu výstupu a nastavení</i>
    <i># jména výsledného souboru</i>
    generator.setFileName(name)
&nbsp;
    <i># specifikace rozměrů SVG obrázku</i>
    generator.setSize(QtCore.QSize(width, height))
&nbsp;
    <i># viditelný výřez</i>
    generator.setViewBox(QtCore.QRect(0, 0, VBOX_WIDTH, VBOX_HEIGHT))
&nbsp;
    <i># nastavení titulku SVG obrázku</i>
    generator.setTitle("SVG: test 9")
&nbsp;
    <i># popis SVG obrázku</i>
    generator.setDescription("seventh SVG example")
&nbsp;
    <i># inicializace instance třídy QPainter</i>
    painter = QtGui.QPainter()
&nbsp;
    <i># začátek kreslení</i>
    painter.begin(generator)
&nbsp;
    drawScene(painter, VBOX_WIDTH, VBOX_HEIGHT)
&nbsp;
    <i># konec kreslení</i>
    painter.end()
&nbsp;
&nbsp;
def <strong>main</strong>():
    create_svg("test9.svg", 320, 320)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Výsledky vytvořené šestým a sedmým příkladem</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Osmý demonstrační příklad &ndash; použití rastrového obrázku v&nbsp;SVG</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
from PySide import QtCore, QtGui, QtSvg
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou</i>
def <strong>drawRectangle</strong>(qPainter, color, x, y, width, height):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
def <strong>drawScene</strong>(painter, width, height):
    <i># konstanty s n-ticemi představujícími základní barvy</i>
    WHITE = (255, 255, 255)
&nbsp;
    <i># okraje</i>
    drawRectangle(painter, WHITE, 0, 0, width, height)
&nbsp;
    image = QtGui.QImage("pixmaps/pysidelogo.png")
&nbsp;
    rect1 = QtCore.QRectF(10, 10, 199, 102)
    painter.drawImage(rect1, image)
&nbsp;
    rect2 = QtCore.QRectF(10, 120, 199*3, 102*3)
    painter.drawImage(rect2, image)
&nbsp;
&nbsp;
def <strong>create_svg</strong>(name, width, height):
    VBOX_WIDTH = 600
    VBOX_HEIGHT = 440
&nbsp;
    <i># vytvoření instance třídy QSvgGenerator</i>
    generator = QtSvg.QSvgGenerator()
&nbsp;
    <i># určení typu výstupu a nastavení</i>
    <i># jména výsledného souboru</i>
    generator.setFileName(name)
&nbsp;
    <i># specifikace rozměrů SVG obrázku</i>
    generator.setSize(QtCore.QSize(width, height))
&nbsp;
    <i># viditelný výřez</i>
    generator.setViewBox(QtCore.QRect(0, 0, VBOX_WIDTH, VBOX_HEIGHT))
&nbsp;
    <i># nastavení titulku SVG obrázku</i>
    generator.setTitle("SVG: test 10")
&nbsp;
    <i># popis SVG obrázku</i>
    generator.setDescription("eight SVG example")
&nbsp;
    <i># inicializace instance třídy QPainter</i>
    painter = QtGui.QPainter()
&nbsp;
    <i># začátek kreslení</i>
    painter.begin(generator)
&nbsp;
    drawScene(painter, VBOX_WIDTH, VBOX_HEIGHT)
&nbsp;
    <i># konec kreslení</i>
    painter.end()
&nbsp;
&nbsp;
def <strong>main</strong>():
    create_svg("test10.svg", 320, 320)
&nbsp;
&nbsp;
if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    main()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Výsledek vygenerovaný osmým demonstračním příkladem</h2>

<p>Zajímavé bude zjistit, jak se vlastně rastrový obrázek uloží do souboru typu
SVG, který je založen na XML a tudíž i na běžném (čitelném) textovém
formátu:</p>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech osmi dnes popsaných demonstračních příkladů společně
s&nbsp;vygenerovanými výkresy SVG byly, podobně jako tomu bylo i
v&nbsp;předchozích článcích, uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td>1</td><td>152_try_to_create_svg.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/152_try_to_create_svg.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/152_try_to_create_svg.py</a></td></tr>
<tr><td>2</td><td>153_create_empty_svg.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/153_create_empty_svg.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/153_create_empty_svg.py</a></td></tr>
<tr><td>3</td><td>154_svg_title_and_description.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/154_svg_title_and_description.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/154_svg_title_and_description.py</a></td></tr>
<tr><td>4</td><td>155_size_viewbox.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/155_size_viewbox.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/155_size_viewbox.py</a></td></tr>
<tr><td>5</td><td>156_draw_into_svg.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/156_draw_into_svg.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/156_draw_into_svg.py</a></td></tr>
<tr><td>6</td><td>157_compositing_modes.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/157_compositing_modes.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/157_compositing_modes.py</a></td></tr>
<tr><td>7</td><td>158_raster_ops.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/158_raster_ops.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/158_raster_ops.py</a></td></tr>
<tr><td>8</td><td>159_draw_image.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/159_draw_image.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/159_draw_image.py</a></td></tr>
</table>

<p>Výkresy ve formátu SVG, které byly vytvořeny dnešními demonstračními
příklady:</p>

<table>
<tr><th>#</th><th>Vygenerovaný SVG</th><th>Adresa</th></tr>
<tr><td>1</td><td>test2.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test2.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test2.svg</a></td></tr>
<tr><td>2</td><td>test3.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test3.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test3.svg</a></td></tr>
<tr><td>3</td><td>test4.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test4.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test4.svg</a></td></tr>
<tr><td>4</td><td>test5.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test5.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test5.svg</a></td></tr>
<tr><td>5</td><td>test6.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test6.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test6.svg</a></td></tr>
<tr><td>6</td><td>test7.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test7.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test7.svg</a></td></tr>
<tr><td>7</td><td>test8.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test8.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test8.svg</a></td></tr>
<tr><td>8</td><td>test9.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test9.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test9.svg</a></td></tr>
<tr><td>9</td><td>test10.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test10.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/test10.svg</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Články o možnostech a vlastnostech formátu SVG</h2>

<ol>

<li>Vektorový grafický formát SVG<br />
<a href="http://www.root.cz/clanky/vektorovy-graficky-format-svg/">http://www.root.cz/clanky/vektorovy-graficky-format-svg/</a>
</li>

<li>Cesty v souborech typu Scalable Vector Graphics<br />
<a href="http://www.root.cz/clanky/cesty-v-souborech-typu-scalable-vector-graphics/">http://www.root.cz/clanky/cesty-v-souborech-typu-scalable-vector-graphics/</a>
</li>

<li>Scalable Vector Graphics a základní geometrické tvary<br />
<a href="http://www.root.cz/clanky/scalable-vector-graphics-a-zakladni-geometricke-tvary/">http://www.root.cz/clanky/scalable-vector-graphics-a-zakladni-geometricke-tvary/</a>
</li>

<li>Vlastnosti cest a základních geometrických tvarů v SVG<br />
<a href="http://www.root.cz/clanky/vlastnosti-cest-a-zakladnich-geometrickych-tvaru-v-svg/">http://www.root.cz/clanky/vlastnosti-cest-a-zakladnich-geometrickych-tvaru-v-svg/</a>
</li>

<li>SVG - styly výplní a značky připojované ke křivkám<br />
<a href="http://www.root.cz/clanky/svg-styly-vyplni-a-znacky-pripojovane-ke-krivkam/">http://www.root.cz/clanky/svg-styly-vyplni-a-znacky-pripojovane-ke-krivkam/</a>
</li>

<li>Gradientní výplně a textové objekty v SVG<br />
<a href="http://www.root.cz/clanky/gradientni-vyplne-a-textove-objekty-v-svg/">http://www.root.cz/clanky/gradientni-vyplne-a-textove-objekty-v-svg/</a>
</li>

<li>Grafický formát SVG a animace<br />
<a href="http://www.root.cz/clanky/graficky-format-svg-a-animace/">http://www.root.cz/clanky/graficky-format-svg-a-animace/</a>
</li>

<li>Pokročilejší animace ve formátu SVG<br />
<a href="http://www.root.cz/clanky/pokrocilejsi-animace-ve-formatu-svg/">http://www.root.cz/clanky/pokrocilejsi-animace-ve-formatu-svg/</a>
</li>

<li>Podpora skriptování v grafickém formátu SVG<br />
<a href="http://www.root.cz/clanky/podpora-skriptovani-v-grafickem-formatu-svg/">http://www.root.cz/clanky/podpora-skriptovani-v-grafickem-formatu-svg/</a>
</li>

<li>Zpracování událostí při skriptování výkresů SVG<br />
<a href="http://www.root.cz/clanky/zpracovani-udalosti-pri-skriptovani-vykresu-svg/">http://www.root.cz/clanky/zpracovani-udalosti-pri-skriptovani-vykresu-svg/</a>
</li>

</ol>




<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>QSvgWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html">https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html</a>
</li>

<li>QByteArray<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html">https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html</a>
</li>

<li>Python Bytes, Bytearray<br />
<a href="https://www.w3resource.com/python/python-bytes.php">https://www.w3resource.com/python/python-bytes.php</a>
</li>

<li>psep-0101.txt (mj.&nbsp;popis mapování typů Pythonu na třídy v&nbsp;PySide)<br />
<a href="https://github.com/techtonik/pseps/blob/master/psep-0101.txt">https://github.com/techtonik/pseps/blob/master/psep-0101.txt</a>
</li>

<li>QSvgRenderer<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgRenderer.html">https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgRenderer.html</a>
</li>

<li>QSvgGenerator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgGenerator.html">https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgGenerator.html</a>
</li>

<li>QIcon<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIcon.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIcon.html</a>
</li>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyle.html</a>
</li>

<li>QCommonStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCommonStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCommonStyle.html</a>
</li>

<li>QPlastiqueStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPlastiqueStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPlastiqueStyle.html</a>
</li>

<li>QMacStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMacStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMacStyle.html</a>
</li>

<li>QCleanlooksStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCleanlooksStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCleanlooksStyle.html</a>
</li>

<li>QGtkStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGtkStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGtkStyle.html</a>
</li>

<li>QCDEStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCDEStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCDEStyle.html</a>
</li>

<li>QMotifStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMotifStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMotifStyle.html</a>
</li>

<li>QWindowsStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWindowsStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWindowsStyle.html</a>
</li>

<li>QStyleFactory<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleFactory.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleFactory.html</a>
</li>

<li>QStyleOptionHeader<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleOptionHeader.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleOptionHeader.html</a>
</li>

<li>QAbstractSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/AbstractSlider.html</a>
</li>

<li>QScrollBar<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QScrollBar.html">https://pyside.github.io/docs/pyside/PySide/QtGui/ScrollBar.html</a>
</li>

<li>QSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Slider.html</a>
</li>

<li>QDial<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDial.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Dial.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>QTableWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html</a>
</li>

<li>QTableWidgetItem<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html</a>
</li>

<li>QTreeWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html</a>
</li>

<li>QTreeWidgetItem <br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QErrorMessage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html</a>
</li>

<li>QInputDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html</a>
</li>

<li>QColorDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QLineEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html</a>
</li>

<li>QTextEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QIntValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html</a>
</li>

<li>QRegExpValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

