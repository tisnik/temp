<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Výpočty v systému pevné řádové tečky V</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=iso-8859-2" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Výpočty v systému pevné řádové tečky V</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;páté části seriálu věnovaného numerickým výpočtům prováděným s čísly uloženými ve formátu pevné i pohyblivé binární řádové čárky dokončíme část věnovanou formátům plovoucí řádové tečky. Popíšeme si, jakým způsobem je možné použít algoritmus CORDIC pro výpočet hodnot dalších matematických funkcí, například vyjádření hodnoty tangenty, arkustangenty, převodu bodu či vektoru z&nbsp;kartézských souřadnic do souřadnic polárních, výpočet délky vektoru atd.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Matematické funkce, jejichž hodnoty lze spočítat metodou CORDIC</a><br />
<a href="#k02">2. Výpočet tangenty pomocí algoritmu CORDIC</a><br />
<a href="#k03">3. První demonstrační příklad &ndash; výpočet tangenty</a><br />
<a href="#k04">4. Výpočet arkustangenty pomocí algoritmu CORDIC</a><br />
<a href="#k05">5. Druhý demonstrační příklad &ndash; výpočet arkustangenty</a><br />
<a href="#k06">6. Výpočet délky vektoru pomocí algoritmu CORDIC</a><br />
<a href="#k07">7. Třetí demonstrační příklad &ndash; výpočet délky vektoru</a><br />
<a href="#k08">8. Převod z&nbsp;kartézských do polárních souřadnic pomocí algoritmu CORDIC</a><br />
<a href="#k09">9. Obsah dalšího pokračování tohoto seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Matematické funkce, jejichž hodnoty lze spočítat metodou CORDIC</h1>

<p>V&nbsp;předchozím pokračování tohoto seriálu jsme si odvodili vztahy
používané iterační metodou CORDIC pro výpočet goniometrických i jiných
matematických funkcí. Jednalo se o upravené rovnice určené pro rotaci vektoru
okolo počátku souřadné soustavy o úhly, které jsou vybrány s&nbsp;ohledem na
hodnotu jejich tangenty (ta musí být rovna dvojce umocněné na záporný
celočíselný exponent). Po několika krocích úprav jsme došli ke vztahům:</p>

<p><i>x<sub>r</sub>=K<sub>i</sub> (x<sub>0</sub> - y<sub>0</sub> d<sub>i</sub> 2<sup>-i</sup>)</i><br />
<i>y<sub>r</sub>=K<sub>i</sub> (y<sub>0</sub> + x<sub>0</sub> d<sub>i</sub> 2<sup>-i</sup>)</i></p>

<p>kde:</p>

<p><i>K<sub>i</sub>=cos (arctan 2<sup>-i</sup>)=1/(1+2<sup>-2i</sup>)<sup>1/2</sup></i></p>

<p>Veškerá práce algoritmu CORDIC spočívá v&nbsp;tom, že se nastaví počáteční
souřadnice vektoru <strong>r</strong> a iterativně se provádí rotace o předem
známé úhly <i>&delta;<sub>1</sub>...&delta;<sub>n</sub></i> tak, aby se dosáhlo
požadované hodnoty rotace <i>&delta;</i>.</p>

<p>Také jsme si uvedli postup uplatňovaný při výpočtu goniometrických funkcí
sinus a kosinus. Na tento výpočet v&nbsp;dalších kapitolách navážeme a ukážeme
si, jakým způsobem je možné vypočítat další goniometrické a jiné matematické
funkce.</p>



<p><a name="k02"></a></p>
<h1>2. Výpočet tangenty pomocí algoritmu CORDIC</h1>

<p>Výpočet goniometrické funkce tangent je odvozen z&nbsp;minule popsaného
algoritmu pro výpočet funkcí <i>sin()</i> a <i>cos()</i>, jelikož je možné
použít známý vztah:</p>

<p><i>tan &alpha;=sin &alpha; / cos &alpha;</i></p>

<p>Funkce <i>sin()</i> a <i>cos()</i> se pomocí algoritmu CORDIC počítají
současně, výpočet dokonce není možné žádným způsobem rozdělit, neboť obě
hodnoty jsou na sobě závislé. To znamená, že tangentu je možné vypočítat
s&nbsp;podobnou složitostí, jako tyto dvě funkce. Jediný rozdíl spočívá
v&nbsp;tom, že není zapotřebí obě vypočtené hodnoty násobit konstantou
<i>K<sub>i</sub></i>, protože se hodnota této konstanty vzájemným vydělením
vypočtených hodnot vyruší. Na druhou stranu se musí aplikovat dělení, které se
v&nbsp;některých případech (jednodušší FPU bez děličky) opět řeší iteračními
metodami. Vzhledem k&nbsp;tomu, že se vzájemně dělí dvě obecně nepřesné
hodnoty, relativní chyba výsledku roste, přesněji řečeno, je součtem
relativních chyb obou mezivýsledků. Proto se při výpočtu tangenty používá větší
počet iterací, než je nutné pro samostatný výpočet funkcí <i>sin()</i> a
<i>cos()</i>. Praktický příklad na výpočet tangenty pomocí algoritmu CORDIC je
uveden ve <a href="#k03">třetí kapitole</a>.</p>



<p><a name="k03"></a></p>
<h1>3. První demonstrační příklad &ndash; výpočet tangenty</h1>

<p>V&nbsp;této kapitole je uveden výpis demonstračního příkladu, který slouží
pro výpočet goniometrické funkce tangent. Všimněte si, že před vlastním
iteračním výpočtem je proveden test na vstup nulové hodnoty. Je to z&nbsp;toho
důvodu, že pro nulový úhel (a také úhel blízký úhlu pravému) je relativní chyba
velká a test na nulovou vstupní hodnotu je implementačně velmi jednoduchý:
postačuje hradlo AND s&nbsp;více vstupy. Na konci iteračního výpočtu je ošetřen
stav, kdy je vypočtená tangenta nekonečná, tj.&nbsp;jedná se buď o úhel
+90&deg; nebo -90&deg; (&pi;/2 resp. -&pi;/2). V&nbsp;tomto případě je vrácena
hodnota +&infin; nebo -&infin; (jedná se o makra podle normy
<strong>C99</strong>).</p>

<code-area>

// --------------------------------------------------------
// Výpočet hodnot funkce tan() pomocí iteračního algoritmu
// CORDIC.
// --------------------------------------------------------

#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

// maximální počet iterací při běhu algoritmu
#define MAX_ITER 10

// "zesílení" při rotacích
#define K 0.6073

// tabulka arkustangentu úhlů
double atans[MAX_ITER];

// tabulka záporných celočíselných mocnin hodnoty 2
double pows[MAX_ITER];

// naplnění tabulek atans[] a pows[]
void createTables(void)
{
    int i;
    for (i=0; i&lt;MAX_ITER; i++) {
        double p=pow(2.0, -i);
        atans[i]=atan(p);
        pows[i]=p;
    }
}

// výpočet funkce tan() pro zadaný úhel delta
double tan_cordic(double delta)
{
    int i;
    double x0=1.0;                          // nastavení počátečních podmínek
    double y0=0.0;
    double xn;
    if (delta==0) return 0.0;               // ošetření nulového úhlu
    for (i=0; i&lt;MAX_ITER; i++) {            // iterační smyčka
        if (delta&lt;0) {                      // úhel je záporný =&gt; rotace doleva
            xn=x0+y0*pows[i];
            y0-=x0*pows[i];
            delta+=atans[i];
        }
        else {                              // úhel je kladný =&gt; rotace doprava
            xn=x0-y0*pows[i];
            y0+=x0*pows[i];
            delta-=atans[i];
        }
        x0=xn;
    }
    if (x0==0)                              // ošetření tangenty pravého úhlu
        if (y0&gt;0) return INFINITY;
        else return -INFINITY;
    else
        return y0/x0;
}

int main(void)
{
    int i;
    createTables();
    for (i=0; i&lt;90; i++) {                  // výpočetní smyčka
        double delta;                       // úhel, ze kterého se počítá tan
        double tanval;                      // vypočtené hodnoty
        double tanerr;                      // absolutní chyby
        delta=i*M_PI/180.0;                 // převod úhlu na radiány
        tanval=tan_cordic(delta);           // výpočet funkce tan
        tanerr=fabs(tanval-tan(delta));     // výpočet absolutních chyb
                                            // tisk výsledků
        printf("%02d\t%14.10f\t%14.10f\t%12.10f\t%8.3f%%\n",
                i,
                tanval,
                tan(delta),
                tanerr,
                tanerr==0 ? 0:100.0*tanerr/tan(delta));
    }
    return 0;
}

// finito

</code-area>

<p>Výsledky běhu prvního demonstračního příkladu jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>úhel</th><th>tan() podle CORDIC</th><th>tan() podle FPU</th><th>absolutní chyba</th><th>relativní chyba</th></tr>
<tr><th>00</th><td>  0,0000000000</td><td>  0,0000000000</td><td>0,0000000000</td><td>0,00%</td></tr>
<tr><th>01</th><td>  0,0167816929</td><td>  0,0174550649</td><td>0,0006733720</td><td>3,86%</td></tr>
<tr><th>02</th><td>  0,0363270120</td><td>  0,0349207695</td><td>0,0014062425</td><td>4,03%</td></tr>
<tr><th>03</th><td>  0,0519805611</td><td>  0,0524077793</td><td>0,0004272182</td><td>0,82%</td></tr>
<tr><th>04</th><td>  0,0715866282</td><td>  0,0699268119</td><td>0,0016598162</td><td>2,37%</td></tr>
<tr><th>05</th><td>  0,0861978187</td><td>  0,0874886635</td><td>0,0012908448</td><td>1,48%</td></tr>
<tr><th>06</th><td>  0,1059095535</td><td>  0,1051042353</td><td>0,0008053183</td><td>0,77%</td></tr>
<tr><th>07</th><td>  0,1217350391</td><td>  0,1227845609</td><td>0,0010495218</td><td>0,85%</td></tr>
<tr><th>08</th><td>  0,1415874009</td><td>  0,1405408347</td><td>0,0010465662</td><td>0,74%</td></tr>
<tr><th>09</th><td>  0,1575619507</td><td>  0,1583844403</td><td>0,0008224896</td><td>0,52%</td></tr>
<tr><th>10</th><td>  0,1776401275</td><td>  0,1763269807</td><td>0,0013131468</td><td>0,74%</td></tr>
<tr><th>11</th><td>  0,1938040418</td><td>  0,1943803091</td><td>0,0005762673</td><td>0,30%</td></tr>
<tr><th>12</th><td>  0,2140028799</td><td>  0,2125565617</td><td>0,0014463183</td><td>0,68%</td></tr>
<tr><th>13</th><td>  0,2303992887</td><td>  0,2308681911</td><td>0,0004689025</td><td>0,20%</td></tr>
<tr><th>14</th><td>  0,2510605756</td><td>  0,2493280028</td><td>0,0017325728</td><td>0,69%</td></tr>
<tr><th>15</th><td>  0,2677368774</td><td>  0,2679491924</td><td>0,0002123150</td><td>0,08%</td></tr>
<tr><th>16</th><td>  0,2887616814</td><td>  0,2867453858</td><td>0,0020162957</td><td>0,70%</td></tr>
<tr><th>17</th><td>  0,3057652260</td><td>  0,3057306815</td><td>0,0000345445</td><td>0,01%</td></tr>
<tr><th>18</th><td>  0,3229341180</td><td>  0,3249196962</td><td>0,0019855782</td><td>0,61%</td></tr>
<tr><th>19</th><td>  0,3437978423</td><td>  0,3443276133</td><td>0,0005297710</td><td>0,15%</td></tr>
<tr><th>20</th><td>  0,3657852506</td><td>  0,3639702343</td><td>0,0018150164</td><td>0,50%</td></tr>
<tr><th>21</th><td>  0,3836037852</td><td>  0,3838640350</td><td>0,0002602498</td><td>0,07%</td></tr>
<tr><th>22</th><td>  0,4061607605</td><td>  0,4040262258</td><td>0,0021345346</td><td>0,53%</td></tr>
<tr><th>23</th><td>  0,4244807446</td><td>  0,4244748162</td><td>0,0000059284</td><td>0,00%</td></tr>
<tr><th>24</th><td>  0,4430431000</td><td>  0,4452286853</td><td>0,0021855853</td><td>0,49%</td></tr>
<tr><th>25</th><td>  0,4666146246</td><td>  0,4663076582</td><td>0,0003069665</td><td>0,07%</td></tr>
<tr><th>26</th><td>  0,4856109365</td><td>  0,4877325886</td><td>0,0021216521</td><td>0,44%</td></tr>
<tr><th>27</th><td>  0,5099818506</td><td>  0,5095254495</td><td>0,0004564011</td><td>0,09%</td></tr>
<tr><th>28</th><td>  0,5298275522</td><td>  0,5317094317</td><td>0,0018818794</td><td>0,35%</td></tr>
<tr><th>29</th><td>  0,5550831516</td><td>  0,5543090515</td><td>0,0007741002</td><td>0,14%</td></tr>
<tr><th>30</th><td>  0,5757025789</td><td>  0,5773502692</td><td>0,0016476903</td><td>0,29%</td></tr>
<tr><th>31</th><td>  0,6020032089</td><td>  0,6008606190</td><td>0,0011425899</td><td>0,19%</td></tr>
<tr><th>32</th><td>  0,6234942951</td><td>  0,6248693519</td><td>0,0013750568</td><td>0,22%</td></tr>
<tr><th>33</th><td>  0,6493847795</td><td>  0,6494075932</td><td>0,0000228137</td><td>0,00%</td></tr>
<tr><th>34</th><td>  0,6718279437</td><td>  0,6745085168</td><td>0,0026805731</td><td>0,40%</td></tr>
<tr><th>35</th><td>  0,7005519564</td><td>  0,7002075382</td><td>0,0003444182</td><td>0,05%</td></tr>
<tr><th>36</th><td>  0,7241045321</td><td>  0,7265425280</td><td>0,0024379959</td><td>0,34%</td></tr>
<tr><th>37</th><td>  0,7542797006</td><td>  0,7535540501</td><td>0,0007256505</td><td>0,10%</td></tr>
<tr><th>38</th><td>  0,7790851887</td><td>  0,7812856265</td><td>0,0022004378</td><td>0,28%</td></tr>
<tr><th>39</th><td>  0,8109599430</td><td>  0,8097840332</td><td>0,0011759098</td><td>0,15%</td></tr>
<tr><th>40</th><td>  0,8369586757</td><td>  0,8390996312</td><td>0,0021409555</td><td>0,26%</td></tr>
<tr><th>41</th><td>  0,8707272570</td><td>  0,8692867378</td><td>0,0014405192</td><td>0,17%</td></tr>
<tr><th>42</th><td>  0,8985757825</td><td>  0,9004040443</td><td>0,0018282618</td><td>0,20%</td></tr>
<tr><th>43</th><td>  0,9345119814</td><td>  0,9325150861</td><td>0,0019968952</td><td>0,21%</td></tr>
<tr><th>44</th><td>  0,9641849623</td><td>  0,9656887748</td><td>0,0015038125</td><td>0,16%</td></tr>
<tr><th>45</th><td>  0,9974099032</td><td>  1,0000000000</td><td>0,0025900968</td><td>0,26%</td></tr>
<tr><th>46</th><td>  1,0371454016</td><td>  1,0355303138</td><td>0,0016150878</td><td>0,16%</td></tr>
<tr><th>47</th><td>  1,0700772381</td><td>  1,0723687100</td><td>0,0022914719</td><td>0,21%</td></tr>
<tr><th>48</th><td>  1,1128721912</td><td>  1,1106125148</td><td>0,0022596764</td><td>0,20%</td></tr>
<tr><th>49</th><td>  1,1484652535</td><td>  1,1503684072</td><td>0,0019031537</td><td>0,17%</td></tr>
<tr><th>50</th><td>  1,1948021199</td><td>  1,1917535926</td><td>0,0030485273</td><td>0,26%</td></tr>
<tr><th>51</th><td>  1,2331065284</td><td>  1,2348971565</td><td>0,0017906282</td><td>0,15%</td></tr>
<tr><th>52</th><td>  1,2835566823</td><td>  1,2799416322</td><td>0,0036150501</td><td>0,28%</td></tr>
<tr><th>53</th><td>  1,3257681457</td><td>  1,3270448216</td><td>0,0012766760</td><td>0,10%</td></tr>
<tr><th>54</th><td>  1,3810160766</td><td>  1,3763819205</td><td>0,0046341561</td><td>0,34%</td></tr>
<tr><th>55</th><td>  1,4274458745</td><td>  1,4281480067</td><td>0,0007021322</td><td>0,05%</td></tr>
<tr><th>56</th><td>  1,4884763418</td><td>  1,4825609685</td><td>0,0059153733</td><td>0,40%</td></tr>
<tr><th>57</th><td>  1,5399190611</td><td>  1,5398649638</td><td>0,0000540973</td><td>0,00%</td></tr>
<tr><th>58</th><td>  1,6038639132</td><td>  1,6003345290</td><td>0,0035293841</td><td>0,22%</td></tr>
<tr><th>59</th><td>  1,6611207136</td><td>  1,6642794824</td><td>0,0031587687</td><td>0,19%</td></tr>
<tr><th>60</th><td>  1,7370080258</td><td>  1,7320508076</td><td>0,0049572182</td><td>0,29%</td></tr>
<tr><th>61</th><td>  1,8015318914</td><td>  1,8040477553</td><td>0,0025158639</td><td>0,14%</td></tr>
<tr><th>62</th><td>  1,8874065642</td><td>  1,8807264653</td><td>0,0066800989</td><td>0,36%</td></tr>
<tr><th>63</th><td>  1,9608540947</td><td>  1,9626105055</td><td>0,0017564108</td><td>0,09%</td></tr>
<tr><th>64</th><td>  2,0592616947</td><td>  2,0503038416</td><td>0,0089578531</td><td>0,44%</td></tr>
<tr><th>65</th><td>  2,1430961381</td><td>  2,1445069205</td><td>0,0014107824</td><td>0,07%</td></tr>
<tr><th>66</th><td>  2,2571167455</td><td>  2,2460367739</td><td>0,0110799716</td><td>0,49%</td></tr>
<tr><th>67</th><td>  2,3558194635</td><td>  2,3558523658</td><td>0,0000329023</td><td>0,00%</td></tr>
<tr><th>68</th><td>  2,4620792981</td><td>  2,4750868534</td><td>0,0130075554</td><td>0,53%</td></tr>
<tr><th>69</th><td>  2,6068564457</td><td>  2,6050890647</td><td>0,0017673810</td><td>0,07%</td></tr>
<tr><th>70</th><td>  2,7338445118</td><td>  2,7474774195</td><td>0,0136329076</td><td>0,50%</td></tr>
<tr><th>71</th><td>  2,9086860855</td><td>  2,9042108777</td><td>0,0044752078</td><td>0,15%</td></tr>
<tr><th>72</th><td>  3,0966068440</td><td>  3,0776835372</td><td>0,0189233068</td><td>0,61%</td></tr>
<tr><th>73</th><td>  3,2704830864</td><td>  3,2708526185</td><td>0,0003695321</td><td>0,01%</td></tr>
<tr><th>74</th><td>  3,4630633646</td><td>  3,4874144438</td><td>0,0243510793</td><td>0,70%</td></tr>
<tr><th>75</th><td>  3,7350103188</td><td>  3,7320508076</td><td>0,0029595113</td><td>0,08%</td></tr>
<tr><th>76</th><td>  3,9831024743</td><td>  4,0107809335</td><td>0,0276784592</td><td>0,69%</td></tr>
<tr><th>77</th><td>  4,3402911778</td><td>  4,3314758743</td><td>0,0088153035</td><td>0,20%</td></tr>
<tr><th>78</th><td>  4,6728343111</td><td>  4,7046301095</td><td>0,0317957983</td><td>0,68%</td></tr>
<tr><th>79</th><td>  5,1598511079</td><td>  5,1445540160</td><td>0,0152970920</td><td>0,30%</td></tr>
<tr><th>80</th><td>  5,6293587144</td><td>  5,6712818196</td><td>0,0419231052</td><td>0,74%</td></tr>
<tr><th>81</th><td>  6,3467099468</td><td>  6,3137515147</td><td>0,0329584321</td><td>0,52%</td></tr>
<tr><th>82</th><td>  7,0627753134</td><td>  7,1153697224</td><td>0,0525944090</td><td>0,74%</td></tr>
<tr><th>83</th><td>  8,2145617824</td><td>  8,1443464280</td><td>0,0702153544</td><td>0,86%</td></tr>
<tr><th>84</th><td>  9,4420188415</td><td>  9,5143644542</td><td>0,0723456127</td><td>0,76%</td></tr>
<tr><th>85</th><td> 11,6012216411</td><td> 11,4300523028</td><td>0,1711693383</td><td>1,50%</td></tr>
<tr><th>86</th><td> 13,9690892768</td><td> 14,3006662567</td><td>0,3315769799</td><td>2,32%</td></tr>
<tr><th>87</th><td> 19,2379608497</td><td> 19,0811366877</td><td>0,1568241620</td><td>0,82%</td></tr>
<tr><th>88</th><td> 27,5277250976</td><td> 28,6362532829</td><td>1,1085281853</td><td>3,87%</td></tr>
<tr><th>89</th><td> 59,5887437442</td><td> 57,2899616308</td><td>2,2987821135</td><td>4,01%</td></tr>
</table>



<p><a name="k04"></a></p>
<h1>4. Výpočet arkustangenty pomocí algoritmu CORDIC</h1>

<p>Výpočet arkustangenty se provádí poněkud odlišným způsobem, než výše uvedený
výpočet sinu, kosinu či tangenty, stále se však jedná o aplikaci velmi
univerzálního principu, který CORDIC představuje. Využívá se zde takzvaný
<i>vektorový režim</i>, ve kterém se &ndash; narozdíl od výše popsaného
<i>rotačního režimu</i> &ndash; iterativně snažíme dosáhnout toho, aby se
vynulovala hodnota uložená v&nbsp;registru <i>y</i>, tj.&nbsp;aby rotovaný
vektor ležel na kladné či záporné horizontální poloose.</p>

<p>Výsledek běhu algoritmu CORDIC není v&nbsp;tomto případě uložen
v&nbsp;registrech <i>x</i> nebo <i>y</i> (ty mají jiný význam), ale naopak
v&nbsp;registru <i>delta</i>, který měl v&nbsp;rotačním režimu úlohu arbitru o
směru rotace (ve vektorovém režimu tuto úlohu převzala hodnota v&nbsp;registru
<i>y</i>, &nbsp;resp.&nbsp;znaménko hodnoty v&nbsp;tomto registru uložené).</p>

<p>Vstupem algoritmu jsou počáteční hodnoty <i>x</i> a <i>y</i> (ty byly u
předchozích metod nulové), přičemž se počítá arctan(y/x). To je velmi
praktické, protože takto je možné vypočítat i arkustangentu kladného a
záporného nekonečna (1/0 resp. -1/0), což jsou legální operace (stejným
způsobem tento problém řeší standardní céčkovská knihovní funkce
<i>atan2()</i>). Demonstrační příklad na výpočet arkustangenty je, spolu
s&nbsp;tabulkou výsledků, uveden v&nbsp;<a href="#k05">páté kapitole</a>.</p>



<p><a name="k05"></a></p>
<h1>5. Druhý demonstrační příklad &ndash; výpočet arkustangenty</h1>

<p>V&nbsp;této kapitole je uveden výpis demonstračního příkladu, který provádí
výpočet arkustangenty na základě čitatele a jmenovatele zlomku,
tj.&nbsp;provádí se stejná operace, jaká je představována céčkovskou funkcí
<i>atan2()</i>. Po překladu a spuštění příkladu se vypočte tabulka arkustangent
pro hodnoty z&nbsp;intervalu 0,0 &ndash; 1,0, které odpovídají úhlům 0&deg;
&ndash; 45&deg; (tj.&nbsp;0 &ndash; &pi;/4).</p>

<code-area>

// --------------------------------------------------------
// Výpočet hodnot funkce atan() pomocí iteračního algoritmu
// CORDIC.
// --------------------------------------------------------

#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

// maximální počet iterací při běhu algoritmu
#define MAX_ITER 20

// "zesílení" při rotacích
#define K 0.6073

// tabulka arkustangentu úhlů
double atans[MAX_ITER];

// tabulka záporných celočíselných mocnin hodnoty 2
double pows[MAX_ITER];

// naplnění tabulek atans[] a pows[]
void createTables(void)
{
    int i;
    for (i=0; i&lt;MAX_ITER; i++) {
        double p=pow(2.0, -i);
        atans[i]=atan(p);
        pows[i]=p;
    }
}

// výpočet funkce atan() pro zadané souřadnice x, y
double atan_cordic(double y, double x)
{
    int i;
    double x0=x;                            // nastavení počátečních podmínek
    double y0=y;
    double xn;
    double delta=0.0;
    for (i=0; i&lt;MAX_ITER; i++) {            // iterační smyčka
        if (y0&gt;0) {                         // kladná polorovina =&gt; rotace doleva
            xn=x0+y0*pows[i];
            y0-=x0*pows[i];
            delta+=atans[i];
        }
        else {                              // záporná polorovina =&gt; rotace doprava
            xn=x0-y0*pows[i];
            y0+=x0*pows[i];
            delta-=atans[i];
        }
        x0=xn;
    }
    return delta;                           // výsledek je uložen v akumulátoru úhlu
}

int main(void)
{
    double i;
    createTables();
    for (i=0.0; i&lt;1.05; i+=0.05) {          // výpočetní smyčka
        double atanval;                     // vypočtená hodnoty
        double atanerr;                     // absolutní chyba
        double atanfloat;

        atanval=atan_cordic((double)i, 1.0)*180.0/M_PI; // výpočet funkce atan
        atanfloat=atan(i)*180.0/M_PI;
        atanerr=fabs(atanval-atanfloat);    // výpočet absolutní chyby
                                            // tisk výsledků
        printf("%3.2f\t%14.10f\t%14.10f\t%12.10f\t%8.3f%%\n",
                i,
                atanval,
                atanfloat,
                atanerr,
                atanfloat==0 ? 0:100.0*atanerr/atanfloat);
    }
    // důkaz, že atan se spočte i pro nekonečno, tj. pravý úhel:
    printf("\natan nekonecna: %f\n", atan_cordic(1.0, 0.0)*180.0/M_PI);
    return 0;
}

// finito

</code-area>

<p>V&nbsp;následující tabulce je ukázán výstup z&nbsp;předchozího programu
spolu s&nbsp;absolutními a relativními chybami oproti hodnotě vypočtené pomocí
standardní céčkovské funkce <i>atan()</i>.</p>

<table>
<tr><th>Poměr x:y</th><th>arctan() podle CORDICu</th><th>arctan() podle FPU</th><th>absolutní chyba</th><th>relativní chyba</th></tr>
<tr><th>0,00</th><td>  0,0000245652</td><td>  0,0000000000</td><td>0,0000245652</td><td>   0,000%</td></tr>
<tr><th>0,05</th><td>  2,8624810370</td><td>  2,8624052261</td><td>0,0000758109</td><td>   0,003%</td></tr>
<tr><th>0,10</th><td>  5,7106811868</td><td>  5,7105931375</td><td>0,0000880493</td><td>   0,002%</td></tr>
<tr><th>0,15</th><td>  8,5307849790</td><td>  8,5307656099</td><td>0,0000193691</td><td>   0,000%</td></tr>
<tr><th>0,20</th><td> 11,3099067631</td><td> 11,3099324740</td><td>0,0000257109</td><td>   0,000%</td></tr>
<tr><th>0,25</th><td> 14,0362661842</td><td> 14,0362434679</td><td>0,0000227162</td><td>   0,000%</td></tr>
<tr><th>0,30</th><td> 16,6993302827</td><td> 16,6992442340</td><td>0,0000860487</td><td>   0,001%</td></tr>
<tr><th>0,35</th><td> 19,2900922095</td><td> 19,2900462192</td><td>0,0000459903</td><td>   0,000%</td></tr>
<tr><th>0,40</th><td> 21,8013622439</td><td> 21,8014094864</td><td>0,0000472424</td><td>   0,000%</td></tr>
<tr><th>0,45</th><td> 24,2277345631</td><td> 24,2277453180</td><td>0,0000107549</td><td>   0,000%</td></tr>
<tr><th>0,50</th><td> 26,5651577003</td><td> 26,5650511771</td><td>0,0001065233</td><td>   0,000%</td></tr>
<tr><th>0,55</th><td> 28,8107759334</td><td> 28,8107937430</td><td>0,0000178096</td><td>   0,000%</td></tr>
<tr><th>0,60</th><td> 30,9638184479</td><td> 30,9637565321</td><td>0,0000619158</td><td>   0,000%</td></tr>
<tr><th>0,65</th><td> 33,0238878305</td><td> 33,0238675558</td><td>0,0000202747</td><td>   0,000%</td></tr>
<tr><th>0,70</th><td> 34,9919291984</td><td> 34,9920201986</td><td>0,0000910002</td><td>   0,000%</td></tr>
<tr><th>0,75</th><td> 36,8699222111</td><td> 36,8698976458</td><td>0,0000245652</td><td>   0,000%</td></tr>
<tr><th>0,80</th><td> 38,6598324994</td><td> 38,6598082541</td><td>0,0000242453</td><td>   0,000%</td></tr>
<tr><th>0,85</th><td> 40,3645231324</td><td> 40,3645365731</td><td>0,0000134407</td><td>   0,000%</td></tr>
<tr><th>0,90</th><td> 41,9872306433</td><td> 41,9872124958</td><td>0,0000181475</td><td>   0,000%</td></tr>
<tr><th>0,95</th><td> 43,5312567540</td><td> 43,5311992856</td><td>0,0000574684</td><td>   0,000%</td></tr>
<tr><th>1,00</th><td> 44,9999061705</td><td> 45,0000000000</td><td>0,0000938295</td><td>   0,000%</td></tr>
</table>



<p><a name="k06"></a></p>
<h1>6. Výpočet délky vektoru pomocí algoritmu CORDIC</h1>

<p>Délka vektoru se kupodivu počítá naprosto stejným způsobem, jako funkce
arkustangenty. Je to z&nbsp;toho důvodu, že se arkustangenta iterativně
vypočítá pootočením vstupního vektoru do polohy, ve které má y-ovou souřadnici
nulovou. To však logicky znamená, že jeho x-ová souřadnice odpovídá délce
vektoru, protože platí:</p>

<p><i>d=sqrt(x<sup>2</sup>+y<sup>2</sup>)=sqrt(x<sup>2</sup>+0)=sqrt(x<sup>2</sup>)=x</i></p>

<p>Proto se výše uvedená funkce pro výpočet arkustangenty může upravit na
výpočet délky vektoru a to tak, že se výsledná hodnota <i>x<sub>i</sub></i>
(vzniklá po <i>i</i> iteracích) vynásobí konstantou <i>K<sub>i</sub></i>
stejným způsobem, jaký jsme prováděli u výpočtů funkcí <i>sin()</i> a
<i>cos()</i> v&nbsp;předchozím pokračování tohoto seriálu.</p>

<p>Vlastnosti CORDICu, díky které je možné jednoduše spočítat délku vektoru,
není široce známa, proto některé FPU pro tuto činnost ani neobsahují instrukci,
což je škoda, zejména při práci s&nbsp;grafikou, kde se délky velmi často
počítají a je pro ně nutné použít dvojici násobení, jedno sečítání a
k&nbsp;tomu ještě druhou odmocninu, tj.&nbsp;poměrně zdlouhavé a složité
operace.</p>



<p><a name="k07"></a></p>
<h1>7. Třetí demonstrační příklad &ndash; výpočet délky vektoru</h1>

<p>Po překladu a spuštění třetího demonstračního příkladu se zobrazí tabulka
s&nbsp;délkami vektorů, jejichž souřadnice postupně nabývají hodnot od nuly do
desíti. Všimněte si, že přesnost výpočtů je poměrně velká, například pro vektor
<i>(6,8)</i> je přesně vypočtena délka 10.</p>

<code-area>

// --------------------------------------------------------
// Výpočet velikosti vektoru pomocí iteračního algoritmu
// CORDIC.
// --------------------------------------------------------

#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

// maximální počet iterací při běhu algoritmu
#define MAX_ITER 20

// "zesílení" při rotacích
#define K 0.6073

// tabulka arkustangentu úhlů
double atans[MAX_ITER];

// tabulka záporných celočíselných mocnin hodnoty 2
double pows[MAX_ITER];

// naplnění tabulek atans[] a pows[]
void createTables(void)
{
    int i;
    for (i=0; i&lt;MAX_ITER; i++) {
        double p=pow(2.0, -i);
        atans[i]=atan(p);
        pows[i]=p;
    }
}

// výpočet velikosti vektoru pomocí algoritmu CORDIC
double mag_cordic(double y, double x)
{
    int i;
    double x0=x;                            // nastavení počátečních podmínek
    double y0=y;
    double xn;
    double delta=0.0;
    for (i=0; i&lt;MAX_ITER; i++) {            // iterační smyčka
        if (y0&gt;0) {                         // kladná polorovina =&gt; rotace doleva
            xn=x0+y0*pows[i];
            y0-=x0*pows[i];
            delta+=atans[i];
        }
        else {                              // záporná polorovina =&gt; rotace doprava
            xn=x0-y0*pows[i];
            y0+=x0*pows[i];
            delta-=atans[i];
        }
        x0=xn;
    }
    return x0*K;
}

int main(void)
{
    double x, y;
    createTables();
    printf("%f\n", mag_cordic(3, 4));       // výpočet Pythagorova trojúhelníka
    for (y=0.0; y&lt;=10.0; y+=1.0) {          // tabulka velikostí různých vektorů
        for (x=0.0; x&lt;=10.0; x+=1.0) {
            printf("%5.2f ", mag_cordic(x,y));
        }
        putchar('\n');
    }
    return 0;
}

// finito

</code-area>

<p></p>

<table>
<tr><th>d(x,y)</th><th> 0,00</th><th> 1,00</th><th> 2,00</th><th> 3,00</th><th> 4,00</th><th> 5,00</th><th> 6,00</th><th> 7,00</th><th> 8,00</th><th> 9,00</th><th>10,00</th></tr>
<tr><th> 0,00</th><td> 0,00</td><td> 1,00</td><td> 2,00</td><td> 3,00</td><td> 4,00</td><td> 5,00</td><td> 6,00</td><td> 7,00</td><td> 8,00</td><td> 9,00</td><td>10,00</td></tr>
<tr><th> 1,00</th><td> 1,00</td><td> 1,41</td><td> 2,24</td><td> 3,16</td><td> 4,12</td><td> 5,10</td><td> 6,08</td><td> 7,07</td><td> 8,06</td><td> 9,06</td><td>10,05</td></tr>
<tr><th> 2,00</th><td> 2,00</td><td> 2,24</td><td> 2,83</td><td> 3,61</td><td> 4,47</td><td> 5,39</td><td> 6,33</td><td> 7,28</td><td> 8,25</td><td> 9,22</td><td>10,20</td></tr>
<tr><th> 3,00</th><td> 3,00</td><td> 3,16</td><td> 3,61</td><td> 4,24</td><td> 5,00</td><td> 5,83</td><td> 6,71</td><td> 7,62</td><td> 8,54</td><td> 9,49</td><td>10,44</td></tr>
<tr><th> 4,00</th><td> 4,00</td><td> 4,12</td><td> 4,47</td><td> 5,00</td><td> 5,66</td><td> 6,40</td><td> 7,21</td><td> 8,06</td><td> 8,94</td><td> 9,85</td><td>10,77</td></tr>
<tr><th> 5,00</th><td> 5,00</td><td> 5,10</td><td> 5,39</td><td> 5,83</td><td> 6,40</td><td> 7,07</td><td> 7,81</td><td> 8,60</td><td> 9,43</td><td>10,30</td><td>11,18</td></tr>
<tr><th> 6,00</th><td> 6,00</td><td> 6,08</td><td> 6,33</td><td> 6,71</td><td> 7,21</td><td> 7,81</td><td> 8,49</td><td> 9,22</td><td>10,00</td><td>10,82</td><td>11,66</td></tr>
<tr><th> 7,00</th><td> 7,00</td><td> 7,07</td><td> 7,28</td><td> 7,62</td><td> 8,06</td><td> 8,60</td><td> 9,22</td><td> 9,90</td><td>10,63</td><td>11,40</td><td>12,21</td></tr>
<tr><th> 8,00</th><td> 8,00</td><td> 8,06</td><td> 8,25</td><td> 8,54</td><td> 8,94</td><td> 9,43</td><td>10,00</td><td>10,63</td><td>11,31</td><td>12,04</td><td>12,81</td></tr>
<tr><th> 9,00</th><td> 9,00</td><td> 9,06</td><td> 9,22</td><td> 9,49</td><td> 9,85</td><td>10,30</td><td>10,82</td><td>11,40</td><td>12,04</td><td>12,73</td><td>13,45</td></tr>
<tr><th>10,00</th><td>10,00</td><td>10,05</td><td>10,20</td><td>10,44</td><td>10,77</td><td>11,18</td><td>11,66</td><td>12,21</td><td>12,81</td><td>13,45</td><td>14,14</td></tr>
</table>



<p><a name="k08"></a></p>
<h1>8. Převod z&nbsp;kartézských do polárních souřadnic pomocí algoritmu CORDIC</h1>

<p>Vzhledem k&nbsp;tomu, že převod z&nbsp;kartézských souřadnic do souřadnic
polárních vyžaduje spočtení úhlu vektoru a jeho délky (popř.&nbsp;úhlu a délky
spojnice bodu s&nbsp;počátkem souřadné soustavy), je na tomto místě možné říci,
že převod již máme vyřešen, protože jediným iteračním postupem CORDICu
vyjádříme jak délku vektoru (ta je uložena v&nbsp;registru <i>x</i>), tak i
jeho úhel (ten je uložen v&nbsp;registru <i>delta</i>). Demonstrační příklad na
převod z&nbsp;kartézských souřadnic do souřadnic polárních zde proto nebudu
uvádět, čtenář může "spojit" obě výše uvedené céčkovské funkce
<strong>atan_cordic()</strong> a <strong>mag_cordic()</strong> do funkce jediné
a výsledkem bude zmíněná konverzní (mapovací) funkce.</p>



<p><a name="k09"></a></p>
<h1>9. Obsah dalšího pokračování tohoto seriálu</h1>

<p>V&nbsp;následujícím pokračování tohoto seriálu konečně obrátíme svoji
pozornost na formát pevné řádové binární čárky, protože si podrobně popíšeme
čtyři základní způsoby uložení čísel v&nbsp;tomto formátu, včetně vysvětlení
kódování záporných čísel. Také si popíšeme, jakým způsobem je možné
implementovat základní matematické operace s&nbsp;hodnotami uloženými ve
formátu pevné řádové binární čárky.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2006</small></p>
</body>
</html>

