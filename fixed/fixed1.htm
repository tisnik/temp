<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Fixed point arithmetic I</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=iso-8859-2" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Fixed point arithmetic I</h1>

<h3>Pavel Ti¹novský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dne¹ním dnem zaèíná na Rootu krátký seriál, který si klade za cíl pøiblí¾it ètenáøùm problematiku reprezentace (zpùsobu ulo¾ení) numerických hodnot v operaèní pamìti poèítaèe s mo¾ností jejich následného zpracování pomocí mikroprocesoru (CPU) popø. i matematického koprocesoru (FPU). Zamìøíme se pøedev¹ím na popis reprezentace pou¾ívající pevnou øádovou binární teèku. Tento zpùsob reprezentace se v anglické literatuøe oznaèuje termínem fixed point arithmetic a oproti dnes nejpou¾ívanìj¹í reprezentaci s pohyblivou øádovou binární teèkou pøiná¹í nìkteré nezanedbatelné výhody, zejména pøi praktické aplikaci v oblasti mikroøadièù, signálových procesorù a programovatelných obvodù FPGA.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Reprezentace numerických hodnot ve formátu pevné a plovoucí øádové (binární) teèky</a><br />
<a href="#k02">2. Jakými zpùsoby je mo¾né reprezentovat èíselné hodnoty v operaèní pamìti poèítaèe?</a><br />
<a href="#k03">3. Ulo¾ení èísel ve formátu pevné øádové binární teèky</a><br />
<a href="#k04">4. Pøednosti a zápory formátu pevné øádové teèky</a><br />
<a href="#k05">5. Ulo¾ení èísel ve formátu plovoucí øádové (binární) teèky</a><br />
<a href="#k06">6. Formát plovoucí øádové binární teèky a norma IEEE 754</a><br />
<a href="#k07">7. Pøednosti a zápory formátu plovoucí øádové teèky</a><br />
<a href="#k08">8. Literatura a odkazy na Internetu</a><br />
<a href="#k09">9. Obsah dal¹ího pokraèování tohoto seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Reprezentace numerických hodnot ve formátu pevné a plovoucí øádové (binární) teèky</h1>

<p>V&nbsp;tomto èlánku, na který bude navazovat i nìkolik pokraèování, si
popí¹eme nìkteré ze zpùsobù reprezentace (resp.&nbsp;zpùsobu ulo¾ení)
podmno¾iny racionálních numerických hodnot (zkrácenì èísel) v&nbsp;operaèní
pamìti poèítaèe a/nebo v&nbsp;registrech jeho mikroprocesoru (CPU) èi
matematického koprocesoru (FPU). Jedná se o takzvané ulo¾ení vybrané mno¾iny
numerických hodnot v&nbsp;systému <i>pevné øádové (binární) teèky</i>.
V&nbsp;tomto textu se budeme zámìrnì dopou¹tìt drobného prohøe¹ku oproti
stávající normì èeského jazyka, proto¾e budeme neustále psát o øádové,
desetinné a binární <strong>teèce</strong> a nikoli <strong>èárce</strong>
&ndash; z&nbsp;hlediska anglické terminologie to bude více konzistentní, i kdy¾
z&nbsp;èe¹tinského hlediska by bylo zcela jistì korektnìj¹í psát o øádové
<strong>èárce</strong>, proto¾e se v&nbsp;èe¹tinì celá èást èísla od èásti
desetinné oddìluje právì èárkou a nikoli teèkou, jak je tomu zvykem
v&nbsp;anglosaských zemích (programátoøi, kterým je tento èlánek urèen
pøedev¹ím, v¹ak tuto skuteènost zcela jistì znají).</p>

<p>V&nbsp;anglické literatuøe se zmínìná forma reprezentace èíselných hodnot
oznaèuje zkratkou <strong>FX</strong> nebo <strong>FXP</strong>
(<i><strong>f</strong>i<strong>x</strong>ed <strong>p</strong>oint</i>),
zatímco dnes èastìji pou¾ívaná
reprezentace v&nbsp;systému plovoucí øádové teèky se v¹eobecnì oznaèuje
zkratkou <strong>FP</strong> (<i>floating point</i>). V&nbsp;jednom èlánku jsem
dokonce místo zkratky <strong>FX</strong> vidìl i zkratku <strong>XP</strong>
(<i>fi<strong>x</strong>ed <strong>p</strong>oint</i>), ale to bylo pøed mnoha lety, v&nbsp;dobì
Windows 95 :-). Nejprve si vysvìtlíme princip obou metod pou¾itých pro ukládání
podmno¾iny racionálních èísel a posléze si také øekneme, jaké výhody a nevýhody
jednotlivé principy pøiná¹í v&nbsp;ka¾dodenní programátorské praxi a ve kterých
situacích je vhodnìj¹í pou¾ít pevnou øádovou èárku. V&nbsp;dal¹ím textu budeme
formát pevné binární øádové teèky zkracovat na <strong>FX formát</strong> a
formát pou¾ívající plovoucí øádovou teèku budeme zapisovat jako <strong>FP
formát</strong>.</p>



<p><a name="k02"></a></p>
<h1>2. Jakými zpùsoby je mo¾né reprezentovat èíselné hodnoty v operaèní pamìti poèítaèe?</h1>

<p>Pøi ukládání èíselných hodnot do operaèní pamìti poèítaèe záhy narazíme na
nìkteré problémy, z&nbsp;nich¾ nìkteré souvisí s&nbsp;koneèným poètem bitù,
které pro ulo¾ení dané hodnoty "obìtujeme" a dal¹í vycházejí ze zpùsobu
zpracování hodnot mikroprocesorem èi matematickým koprocesorem. V&nbsp;koneèném
poètu bitù je toti¾ mo¾né ulo¾it pouze <strong>koneèné</strong> mno¾ství
rùzných hodnot a je plnì v&nbsp;rukou programátora, jak efektivnì daný poèet
bitù vyu¾ije èi naopak promrhá ukládáním nepodstatných informací. Pomìrnì èasto
se toti¾ stává, ¾e i program vyu¾ívající dvojitou èi dokonce roz¹íøenou
pøesnost èísel pøi <strong>FP</strong> operacích (tj.&nbsp;datové typy
<i>double</i> a <i>extended/temporary</i>) dává nesprávné výsledky dané
nepochopením principu práce <strong>FP</strong> aritmetiky a pøitom je mo¾né se
pøesnìj¹ích výsledkù dobrat i pøi pou¾ití pouhých 32 bitù, ale s&nbsp;peèlivì
vyvá¾enými aritmetickými a bitovými operacemi.</p>

<p>Na druhou stranu nejsou dnes pou¾ívané mikroprocesory tak univerzálními
zaøízeními, jak by se na první pohled mohlo zdát. Mikroprocesory jsou toti¾
(vìt¹inou) navr¾eny tak, aby úèinnì, napøíklad v&nbsp;rámci jedné operace èi
instrukce, zpracovávaly pouze konstantní poèet bitù. Pøíkladem mohou být dnes
velmi roz¹íøené procesory øady x86, které jsou velmi dobré pøi práci s&nbsp;32
bitovými hodnotami, ale pøi po¾adavku na aritmetické výpoèty probíhající na
(øeknìme) 21 bitech se ve¹kerá jejich efektivita ztrácí a procesor se ¹irokými
vnitøními sbìrnicemi, matematickým koprocesorem atd. se potýká
s&nbsp;prohazováním jednotlivých bitù. Mnohem lep¹í situace nastane
v&nbsp;pøípadì, ¾e se nìjaká operace implementuje na programovatelném poli FPGA
&ndash; zde je mo¾né vytvoøit obvody provádìjící matematické a logické operace
s&nbsp;libovolným poètem bitù, èím¾ se oproti univerzálním øe¹ením
(napø.&nbsp;konstantní bitová ¹íøka sbìrnice a/nebo registrù) u¹etøí mnoho
plochy tìchto velmi zajímavých obvodù (FPGA mohou mimochodem znamenat i velkou
¹anci pro hnutí open source &ndash; pomocí nich by mohlo vznikat, a nìkde u¾
vzniká <strong>open hardware</strong>, které by mohlo odstranit závislost na
"uzavøených" sí»ových a grafických kartách apod.).</p>

<p>Vra»me se v¹ak ke zpùsobùm reprezentace èíselných hodnot v&nbsp;operaèní
pamìti. Nejprve pøedpokládejme, ¾e pro reprezentaci vlastností urèitého objektu
èi stavu z&nbsp;reálného svìta pou¾ijeme <i>N</i> binárních èíslic (bitù),
tj.&nbsp;základních jednotek informace, která mù¾e nabývat pouze jedné ze dvou
povolených hodnot (ty se znaèí napøíklad symboly <i>yes/no</i> nebo
<i>true</i>/<i>false</i>, ale my se budeme spí¹e dr¾et oznaèení <i>0</i> a
<i>1</i>). Pomocí této uspoøádané <i>N</i>-tice je mo¾né popsat celkem:</p>

<p><i>2<sub>0</sub>&times;2<sub>1</sub>&times;2<sub>2</sub> ... 2<sub>N-1</sub>=2<sup>N</sup></i></p>

<p>jednoznaèných, tj.&nbsp;navzájem odli¹ných, stavù. Mno¾ina tìchto stavù mù¾e
reprezentovat prakticky jakýkoliv abstraktní èi reálný objekt. Pøitom si musíme
uvìdomit, ¾e u této mno¾iny není implicitnì øeèeno ani my¹leno, ¾e se jedná
napøíklad o celá kladná èísla, to je pouze jedna z&nbsp;mnoha mo¾ných
interpretací zvolené <i>N</i>-tice (my programátoøi máme tendenci pova¾ovat
celá kladná èísla za pøirozenou interpretaci bitové <i>N</i>-tice, to v¹ak
vychází pouze z&nbsp;na¹eho pohledu na svìt a z&nbsp;na¹ich zku¹eností).
Reprezentaci momentálního stavu abstraktního èi reálného objektu si mù¾eme
pøedstavit jako zobrazení z&nbsp;mno¾iny binárních stavù na elementy vzorové (a
obecnì neuspoøádané) mno¾iny. Nejèastìji pou¾ívanými zobrazeními jsou zobrazení
mno¾iny binárních stavù na interval celých kladných èísel (<i>Unsigned
Integers</i>), popøípadì na interval celých èísel (<i>Signed Integers</i>).</p>



<p><a name="k03"></a></p>
<h1>3. Ulo¾ení èísel ve formátu pevné øádové binární teèky</h1>

<p>Numerické hodnoty zapsané ve&nbsp;formátu <i>pevné øádové binární teèky</i>
se chápou jako podmno¾ina racionálních èísel, co¾ jsou taková èísla, jejich¾
hodnoty lze vyjádøit vztahem:</p>

<p><i>x<sub>FX</sub>=a/b &nbsp;&nbsp; a,b le¾í v Z, b &ne; 0</i></p>

<p>Èíselné hodnoty z&nbsp;uva¾ované podmno¾iny jsou navíc omezeny
podmínkou:</p>

<p><i>b=2<sup>k</sup> &nbsp;&nbsp; b le¾í v Z, k le¾í v Z<sup>+</sup></i></p>

<p>Proto¾e <i>b</i> je celoèíselnou mocninou dvojky (a ne desítky èi jiného
základu), urèuje jeho hodnota <i>n</i> polohu <i>binární teèky</i>
v&nbsp;ulo¾eném èísle. Dal¹í podmínkou, která má v¹ak spí¹e implementaèní
charakter, je zachování stejného poètu binárních cifer v&nbsp;ka¾dém
reprezentovaném èísle, co¾ mimo jiné znamená, ¾e v¹echna èísla mají øádovou
binární teèku umístìnou na stejném místì &ndash; z&nbsp;této podmínky ostatnì
plyne i název popisovaného zpùsobu reprezentace vybrané podmno¾iny racionálních
èísel. Tak jako i v&nbsp;jiných reprezentacích èísel, jsou nulové èíslice pøed
první nenulovou cifrou a za poslední nenulovou cifrou nevýznamné, proto je není
zapotøebí uvádìt.</p>

<p>Prakticky mù¾e být èíselná hodnota v&nbsp;systému pevné øádové teèky ulo¾ena
na osmi bitech napøíklad následujícím zpùsobem (uva¾ujeme pouze kladné
hodnoty):</p>

<table>
<tr><td>Pozice bitu        </td><td>8&nbsp;&nbsp;&nbsp;&nbsp;</td><td>7&nbsp;&nbsp;&nbsp;&nbsp;</td><td>6&nbsp;&nbsp;&nbsp;&nbsp;</td><td>5&nbsp;&nbsp;&nbsp;&nbsp;</td><td>4&nbsp;&nbsp;&nbsp;&nbsp;</td><td>3&nbsp;&nbsp;&nbsp;&nbsp;</td><td>2&nbsp;&nbsp;&nbsp;&nbsp;</td><td>1&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td>Váha bitu          </td><td>2<sup>4</sup></td><td>2<sup>3</sup></td><td>2<sup>2</sup></td><td>2<sup>1</sup></td><td>2<sup>0</sup></td><td>2<sup>-1</sup></td><td>2<sup>-2</sup></td><td>2<sup>-3</sup></td></tr>
<tr><td>Desítková váha bitu</td><td>16</td><td>8</td><td>4</td><td>2</td><td>1</td><td>0,5</td><td>0,25</td><td>0,125</td></tr>
</table>



<p><a name="k04"></a></p>
<h1>4. Pøednosti a zápory formátu pevné øádové teèky</h1>

<p>Ve vý¹e uvedeném pøíkladu je binární øádová teèka umístìna v¾dy mezi tøetím
a ètvrtým bitem. Vzhledem k&nbsp;tomu, ¾e je tato skuteènost dopøedu známá
algoritmu, který provádí zpracování èísel, není zapotøebí spolu s&nbsp;èíslem
uchovávat i pozici binární teèky, co¾ výraznì sni¾uje poèet bitù, které je
zapotøebí rezervovat pro èísla ze zadaného rozsahu. To je tedy první pøednost
systému pevné øádové teèky &ndash; pokud programátor dopøedu zná rozsah v¹ech
zpracovávaných hodnot a po¾adovanou pøesnost, mù¾e být výhodné tento systém
pou¾ít. Programátor také díky explicitním urèení polohy øádové teèky mù¾e
urèit, ve kterém místì programu se musí pøesnost èi rozsah zvý¹it a kdy naopak
sní¾it. Lépe se tak vyu¾ije poèet bitù, které mù¾eme pro ulo¾ení jednoho èísla
obìtovat (typicky je tento poèet bitù roven délce slova mikroprocesoru,
popø.&nbsp;jeho celoèíselnému násobku èi naopak podílu).</p>

<p>Jak se dozvíme v&nbsp;následujícím pokraèování tohoto seriálu, je mo¾né
základní matematické operace (sèítání, odèítání, násobení a dìlení) pomìrnì
jednodu¹e implementovat i pøi pou¾ití formátu pevné øádové teèky.
V&nbsp;pøípadì, ¾e není k&nbsp;dispozici specializovaný (a souèasnì velmi
komplikovaný) matematický koprocesor, je mnohdy mnohem jednodu¹¹í a rychlej¹í
implementovat matematické operace v&nbsp;FX formátu. To je pøípad mnoha
jednoèipových mikroprocesorù (mikroøadièù), signálových procesorù, ale i
specializovaných zaøízení obsahujících programovatelné obvody CPLD èi FPGA.
Dnes sice mají komplikovanìj¹í (a dra¾¹í) FPGA implementovanou i jednotku FPU,
ale mnohdy je výhodnìj¹í pou¾ít FPGA bez této jednotky a potøebné operace si do
tohoto obvodu "vypálit" po svém.</p>

<p>Tøetí výhodou je fakt, ¾e u FX formátu mù¾e programátor navrhnout a posléze
také dodr¾et po¾adovanou pøesnost v¹ech provádìných výpoètù. To je velký rozdíl
oproti FP formátu (resp.&nbsp;jeho podmno¾inám, které se nejèastìji pou¾ívají).
Není vzácností narazit na programy, které pou¾ívají datové typy <i>float</i> èi
<i>double</i> a pøitom jsou výpoèty provádìné v&nbsp;tìchto programech zatí¾eny
velkou chybou, proto¾e si programátoøi plnì neuvìdomují nìkteré limity FP
formátu. Kritické jsou napøíklad výpoèty s&nbsp;penì¾ními hodnotami, ale i
pouhé sèítání èísel, je¾ se od sebe o mnoho øádù li¹í, vede k&nbsp;velkým
chybám, které dokonce mohou zapøíèinit vznik nekoneèných smyèek, populární
dìlení nulou atd.</p>

<p>FX formát má v¹ak i nìkteré nevýhody. První nevýhoda spoèívá v&nbsp;tom, ¾e
tento formát není pøíli¹ podporován, a to ani po programové stránce (podpora
v&nbsp;programovacích jazycích), ani výrobci mikroprocesorù pro poèítaèe PC.
Situace je v¹ak odli¹ná v&nbsp;oblasti jednoèipových mikropoèítaèù, signálových
procesorù (DSP), øídicích systémù, nebo napøíklad u IBM RS 6000, který kromì
jednotky FPU obsahuje i FXU &ndash; jednotku pro provádìní výpoètù v&nbsp;pevné
øádové binární èárce. Na platformì x86 je mo¾né pro FX formát pou¾ít instrukce
<strong>MMX</strong>.</p>

<p>Dále mù¾e být pou¾ití FX formátu nevýhodné v&nbsp;pøípadì, ¾e se mají
zpracovávat numerické hodnoty, které mají velkou dynamiku, tj.&nbsp;pomìr mezi
nejvy¹¹í a nejni¾¹í absolutní hodnotou. V&nbsp;takovém pøípadì by se mohlo
stát, ¾e by se pøi pou¾ití FX formátu muselo pro ka¾dé èíslo alokovat velké
mno¾ství bitù, které by mohlo dokonce pøekroèit poèet bitù nutných pro FP
formát. Také v&nbsp;pøípadì, kdy dopøedu nevíme, jaké hodnoty se budou
zpracovávat, mù¾e být výhodnìj¹í pou¾ití FP formátu. Zde se v¹ak nabízí otázka,
ve kterých pøípadech nevíme, jaké hodnoty mù¾eme na vstupu získat: vìt¹inou je
ji¾ z&nbsp;podstaty úlohy dopøedu známé, s&nbsp;èím je mo¾né poèítat a které
hodnoty jsou naprosto nesmyslné. Je v¹ak pravdou, ¾e takovou analýzu málokdo
dìlá a kdy¾ pøi výpoètech ve <i>floatech</i> dochází k&nbsp;chybám, tak se bez
pøemý¹lení program pøepí¹e na <i>doubly</i> a problém se tak buï odstraní, nebo
alespoò odsune na pozdìj¹í dobu, napøíklad do chvíle, kdy jsou programu
pøedlo¾ena reálná data a ne "pouze" data testovací.</p>



<p><a name="k05"></a></p>
<h1>5. Ulo¾ení èísel ve formátu plovoucí øádové (binární) teèky</h1>

<p>Ulo¾ení racionálních èísel ve formátu plovoucí øádové teèky (FP formát) se
od FX formátu odli¹uje pøedev¹ím v&nbsp;tom, ¾e si ka¾dá numerická hodnota sama
v&nbsp;sobì nese polohu øádové teèky. Z&nbsp;tohoto dùvodu je kromì bitù, které
jsou rezervovány pro ulo¾ení významných èíslic numerické hodnoty, nutné pro
ka¾dou numerickou hodnotu rezervovat i dal¹í bity, pomocí nich¾ je urèena
mocnina o nìjakém základu (typicky 2, 8, 10 èi 16), kterou musí být významné
èíslice vynásobeny resp.&nbsp;vydìleny. První èást èísla ulo¾eného v&nbsp;FP
formátu se nazývá <strong>mantisa</strong>, druhá èást
<strong>exponent</strong>. Obecný formát ulo¾ení a zpùsob získání pùvodního
èísla je následující:</p>

<p><i>x<sub>FP</sub>=b<sup>e</sup>&times;m</i></p>

<p>kde:</p>

<ol>
<li><i>x<sub>FX</sub></i> znaèí reprezentovanou numerickou hodnotu z&nbsp;podmno¾iny reálných èísel</li>
<li><i>b</i> je báze, nìkdy také nazývaná <i>radix</i></li>
<li><i>e</i> je hodnota exponentu (mù¾e být i záporná)</li>
<li><i>m</i> je mantisa, která mù¾e být i záporná</li>
</ol>

<p>Konkrétní formát numerických hodnot reprezentovaných v&nbsp;systému plovoucí
øádové teèky závisí pøedev¹ím na volbì báze (<strong>radixu</strong>) a také na
poètu bitù rezervovaných pro ulo¾ení mantisy a exponentu. V&nbsp;minulosti
existovalo mnoho rùzných formátù plovoucí øádové teèky (vzpomíná si nìkdo na
<strong>Turbo Pascal</strong> s&nbsp;jeho ¹estibytovým datovým typem
<i>real</i>?), dnes se v¹ak, ustálilo pou¾ití formátù specifikovaných
v&nbsp;normì IEEE 754.</p>



<p><a name="k06"></a></p>
<h1>6. Formát plovoucí øádové binární teèky a norma IEEE 754</h1>

<p>Norma IEEE 754 specifikuje nejenom vlastní formát ulo¾ení numerických hodnot
v&nbsp;systému pevné øádové teèky, ale (a to je celkem neznámá skuteènost) i
pravidla implementace operací s&nbsp;tìmito hodnotami, vèetnì konverzí.
Konkrétnì je v&nbsp;této normì popsáno:</p>

<ol>
<li>Základní (<i>basic</i>) a roz¹íøený (<i>extended</i>) formát ulo¾ení numerických hodnot.</li>
<li>Zpùsob provádìní základních matematických operací: sèítání, odeèítání, násobení, dìlení, zbytek po dìlení, druhá odmocnina a porovnání.</li>
<li>Pravidla konverze mezi celoèíselnými formáty (<i>integer</i>) a formáty s&nbsp;plovoucí øádovou teèkou.</li>
<li>Zpùsob konverze mezi rùznými formáty s&nbsp;plovoucí øádovou teèkou.</li>
<li>Zpùsob konverze základního formátu s&nbsp;plovoucí øádovou teèkou na øetìzec èíslic.</li>
<li>Práce s&nbsp;hodnotami NaN (<i>not a number</i>) a výjimkami.</li>
</ol>

<p>Touto normou se budeme podrobnìji zabývat ve druhé èásti tohoto seriálu,
zejména proto, ¾e bude zapotøebí provádìt pøevody mezi hodnotami v&nbsp;FP
formátu a hodnotami v&nbsp;FX formátu.</p>



<p><a name="k07"></a></p>
<h1>7. Pøednosti a zápory formátu plovoucí øádové teèky</h1>

<p>Vzhledem k&nbsp;tomu, ¾e je FP formát v&nbsp;souèasnosti velmi roz¹íøený a
pou¾ívaný, musí nutnì pøiná¹et nìkteré výhody, jinak by jeho roz¹íøení nebylo
zdaleka tak velké. První pøedností je podpora FP operací díky hardwarovým FPU
jednotkám, které jsou dostupné jak ve formì samostatného matematického
koprocesoru (Intel 8087, Intel i80287, Intel i80387, Intel i80487, Motorola
M68881, Motorola M68882), tak i jako pøímá souèást moderních mikroprocesorù
(øada x86 od "plnohodnotných" mikroprocesorù i486, Motorola M68040, Power PC,
nìkteré typy mikroøadièù a signálových procesorù atd.). Dal¹í pøedností je
existence normy IEEE 754, ve které je mimo jiné øeèeno i to, ¾e ka¾dá FPU
jednotka by mìla podporovat ideálnì dva formáty, napøíklad <i>basic single</i>
a <i>basic double</i>. To je velmi dùle¾ité, zejména pro pøenos numerických
údajù mezi rùznými zaøízeními. Pro mnoho programátorù je také výhodné to, ¾e
jeden základní datový typ (napøíklad <i>float</i>) je mo¾né pou¾ít pro
reprezentaci mnoha objektù èi vlastností (jak si v¹ak uká¾eme v&nbsp;dal¹í
èásti tohoto seriálu, ne v¾dy je tento pøedpoklad pravdivý). V¹echny tyto
skuteènosti vedly k&nbsp;tomu, ¾e FP formát (èi formáty) jsou v&nbsp;prakticky
v¹ech programovacích jazycích implementovány jako základní datové typy, co¾
pøedstavuje velký náskok pøed FX formátem, který je podporován pouze nìkolika
málo jazyky a programovými knihovnami.</p>

<p>FP formát v¹ak má i nìkteré zápory, které nás mohou v&nbsp;nìkterých
pøípadech "donutit" k&nbsp;pou¾ití formátu FX. První nevýhoda vychází
z&nbsp;velké komplexnosti vlastního formátu, tj.&nbsp;zpùsobu rozdìlení údajù
na mantisu a exponent. I taková základní matematická operace, jako je souèet,
je díky FP formátu pomìrnì slo¾itá a výsledek nemusí v¾dy odpovídat
intuitivnímu cítìní programátora, který má tendenci FP formát pokládat za
ekvivalent reálných èísel ("<strong>datový typ double je pøesný...</strong>").
Mnoho programátorù se napøíklad chybnì spoléhá na to, ¾e i pouhý pøevod mezi
typem <i>int</i> na <i>single/float</i> a zpìt na <i>int</i> je bezeztrátový
&ndash; pravý opak je pravdou a to vzhledem k&nbsp;tomu, ¾e se ztratí hodnoty
minimálnì osmi nejni¾¹ích bitù, které musely být vyhrazeny pro ulo¾ení
exponentu. FP formát, resp.&nbsp;formát specifikovaný normou IEEE 754, se
nehodí pro práci s&nbsp;penì¾ními hodnotami; z&nbsp;tohoto dùvodu se
v&nbsp;nìkterých vy¹¹ích programovacích jazycích zavádí speciální datový typ
<i>decimal</i> resp.&nbsp;<i>currency</i>, urèený specielnì pro penì¾ní
hodnoty.</p>

<p>Dal¹í nedostatek FP formátu souvisí s&nbsp;jeho znaènou komplexností.
Hardwarové jednotky FPU jsou velmi komplikované, co¾ limituje pou¾ití FP
operací v&nbsp;nìkterých vestavných &ndash; <i>embedded</i> &ndash; zaøízeních
(tìch je dnes øádovì více ne¾ osobních poèítaèù), ale i v&nbsp;dnes oblíbených
smartphonech atd. Tím neøíkám, ¾e nìkteré mikroprocesory pou¾ité ve
smartphonech FPU nemají, bylo by ale zajímavé zjistit, zda by ty statisíce
logických hradel pou¾itých na implementaci FPU ne¹ly vyu¾ít jiným zpùsobem.
Dále se komplikuje a pøedev¹ím zpomaluje pøevod mezi FP formáty a celoèíselnými
formáty dat (integer, long). Z&nbsp;tohoto dùvodu jsou napøíklad mnohé
signálové procesory zkonstruovány tak, aby podporovaly pouze FX aritmetiku,
proto¾e jak na vstupu signálového procesoru, tak i na jeho výstupu jsou
prakticky v¾dy celoèíselné hodnoty a pouze pøevody mezi vstupem, interní
reprezentací a výstupem by byly mnohdy komplikovanìj¹í ne¾ implementace
ve¹kerých výpoètù v&nbsp;FX reprezentaci.</p>



<p><a name="k08"></a></p>
<h1>8. Literatura a odkazy na Internetu</h1>

<ol>
<li>Yates Randy: <i>Fixed-Point Arithmetic: An Introduction</i>,<br />
    Digital Sound Labs, March 3, 2001</li>
<li>Hook Brian: <i>An Introduction to Fixed Point Math</i>,<br />
    Game Design and Review, 2003</li>
<li>P.&nbsp;Mikulec, M.&nbsp;Vojtí¹ek: <i>Procesor IBM RS 6000</i>,<br />
    <a href="http://petam.chytrak.cz/skola/RS6000">http://petam.chytrak.cz/skola/RS6000</a></li>
<li>Wikipedia: <i>Fixed-point arithmetic</i>,<br />
    <a href="http://en.wikipedia.org/wiki/Fixed-point_arithmetic">http://en.wikipedia.org/wiki/Fixed-point_arithmetic</a></li>
<li>Wikipedia: <i>Floating point</i>,<br />
    <a href="http://en.wikipedia.org/wiki/Floating_point">http://en.wikipedia.org/wiki/Floating_point</a></li>
<li>Wikipedia: <i>IEEE floating-point standard</i>,<br />
    <a href="http://en.wikipedia.org/wiki/IEEE_Floating_Point_Standard">http://en.wikipedia.org/wiki/IEEE_Floating_Point_Standard</a></li>
</ol>



<p><a name="k09"></a></p>
<h1>9. Obsah dal¹ího pokraèování tohoto seriálu</h1>

<p>V&nbsp;následujícím pokraèování tohoto seriálu si podrobnì popí¹eme formáty
ulo¾ení specifikované pomocí normy IEEE 754, vèetnì zpùsobu provádìní v¹ech
základních matematických operací.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Ti¹novský</a> &nbsp; 2006</small></p>
</body>
</html>

