<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Fixed point arithmetic I</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Fixed point arithmetic I</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnešním dnem začíná na Rootu krátký seriál, který si klade za cíl přiblížit čtenářům problematiku reprezentace (způsobu uložení) numerických hodnot v operační paměti počítače s možností jejich následného zpracování pomocí mikroprocesoru (CPU) popř. i matematického koprocesoru (FPU). Zaměříme se především na popis reprezentace používající pevnou řádovou binární tečku. Tento způsob reprezentace se v anglické literatuře označuje termínem fixed point arithmetic a oproti dnes nejpoužívanější reprezentaci s pohyblivou řádovou binární tečkou přináší některé nezanedbatelné výhody, zejména při praktické aplikaci v oblasti mikrořadičů, signálových procesorů a programovatelných obvodů FPGA.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Reprezentace numerických hodnot ve formátu pevné a plovoucí řádové (binární) tečky</a><br />
<a href="#k02">2. Jakými způsoby je možné reprezentovat číselné hodnoty v operační paměti počítače?</a><br />
<a href="#k03">3. Uložení čísel ve formátu pevné řádové binární tečky</a><br />
<a href="#k04">4. Přednosti a zápory formátu pevné řádové tečky</a><br />
<a href="#k05">5. Uložení čísel ve formátu plovoucí řádové (binární) tečky</a><br />
<a href="#k06">6. Formát plovoucí řádové binární tečky a norma IEEE 754</a><br />
<a href="#k07">7. Přednosti a zápory formátu plovoucí řádové tečky</a><br />
<a href="#k08">8. Literatura a odkazy na Internetu</a><br />
<a href="#k09">9. Obsah dalšího pokračování tohoto seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Reprezentace numerických hodnot ve formátu pevné a plovoucí řádové (binární) tečky</h1>

<p>V&nbsp;tomto článku, na který bude navazovat i několik pokračování, si
popíšeme některé ze způsobů reprezentace (resp.&nbsp;způsobu uložení)
podmnožiny racionálních numerických hodnot (zkráceně čísel) v&nbsp;operační
paměti počítače a/nebo v&nbsp;registrech jeho mikroprocesoru (CPU) či
matematického koprocesoru (FPU). Jedná se o takzvané uložení vybrané množiny
numerických hodnot v&nbsp;systému <i>pevné řádové (binární) tečky</i>.
V&nbsp;tomto textu se budeme záměrně dopouštět drobného prohřešku oproti
stávající normě českého jazyka, protože budeme neustále psát o řádové,
desetinné a binární <strong>tečce</strong> a nikoli <strong>čárce</strong>
&ndash; z&nbsp;hlediska anglické terminologie to bude více konzistentní, i když
z&nbsp;češtinského hlediska by bylo zcela jistě korektnější psát o řádové
<strong>čárce</strong>, protože se v&nbsp;češtině celá část čísla od části
desetinné odděluje právě čárkou a nikoli tečkou, jak je tomu zvykem
v&nbsp;anglosaských zemích (programátoři, kterým je tento článek určen
především, však tuto skutečnost zcela jistě znají).</p>

<p>V&nbsp;anglické literatuře se zmíněná forma reprezentace číselných hodnot
označuje zkratkou <strong>FX</strong> nebo <strong>FXP</strong>
(<i><strong>f</strong>i<strong>x</strong>ed <strong>p</strong>oint</i>),
zatímco dnes častěji používaná
reprezentace v&nbsp;systému plovoucí řádové tečky se všeobecně označuje
zkratkou <strong>FP</strong> (<i>floating point</i>). V&nbsp;jednom článku jsem
dokonce místo zkratky <strong>FX</strong> viděl i zkratku <strong>XP</strong>
(<i>fi<strong>x</strong>ed <strong>p</strong>oint</i>), ale to bylo před mnoha lety, v&nbsp;době
Windows 95 :-). Nejprve si vysvětlíme princip obou metod použitých pro ukládání
podmnožiny racionálních čísel a posléze si také řekneme, jaké výhody a nevýhody
jednotlivé principy přináší v&nbsp;každodenní programátorské praxi a ve kterých
situacích je vhodnější použít pevnou řádovou čárku. V&nbsp;dalším textu budeme
formát pevné binární řádové tečky zkracovat na <strong>FX formát</strong> a
formát používající plovoucí řádovou tečku budeme zapisovat jako <strong>FP
formát</strong>.</p>



<p><a name="k02"></a></p>
<h1>2. Jakými způsoby je možné reprezentovat číselné hodnoty v operační paměti počítače?</h1>

<p>Při ukládání číselných hodnot do operační paměti počítače záhy narazíme na
některé problémy, z&nbsp;nichž některé souvisí s&nbsp;konečným počtem bitů,
které pro uložení dané hodnoty "obětujeme" a další vycházejí ze způsobu
zpracování hodnot mikroprocesorem či matematickým koprocesorem. V&nbsp;konečném
počtu bitů je totiž možné uložit pouze <strong>konečné</strong> množství
různých hodnot a je plně v&nbsp;rukou programátora, jak efektivně daný počet
bitů využije či naopak promrhá ukládáním nepodstatných informací. Poměrně často
se totiž stává, že i program využívající dvojitou či dokonce rozšířenou
přesnost čísel při <strong>FP</strong> operacích (tj.&nbsp;datové typy
<i>double</i> a <i>extended/temporary</i>) dává nesprávné výsledky dané
nepochopením principu práce <strong>FP</strong> aritmetiky a přitom je možné se
přesnějších výsledků dobrat i při použití pouhých 32 bitů, ale s&nbsp;pečlivě
vyváženými aritmetickými a bitovými operacemi.</p>

<p>Na druhou stranu nejsou dnes používané mikroprocesory tak univerzálními
zařízeními, jak by se na první pohled mohlo zdát. Mikroprocesory jsou totiž
(většinou) navrženy tak, aby účinně, například v&nbsp;rámci jedné operace či
instrukce, zpracovávaly pouze konstantní počet bitů. Příkladem mohou být dnes
velmi rozšířené procesory řady x86, které jsou velmi dobré při práci s&nbsp;32
bitovými hodnotami, ale při požadavku na aritmetické výpočty probíhající na
(řekněme) 21 bitech se veškerá jejich efektivita ztrácí a procesor se širokými
vnitřními sběrnicemi, matematickým koprocesorem atd. se potýká
s&nbsp;prohazováním jednotlivých bitů. Mnohem lepší situace nastane
v&nbsp;případě, že se nějaká operace implementuje na programovatelném poli FPGA
&ndash; zde je možné vytvořit obvody provádějící matematické a logické operace
s&nbsp;libovolným počtem bitů, čímž se oproti univerzálním řešením
(např.&nbsp;konstantní bitová šířka sběrnice a/nebo registrů) ušetří mnoho
plochy těchto velmi zajímavých obvodů (FPGA mohou mimochodem znamenat i velkou
šanci pro hnutí open source &ndash; pomocí nich by mohlo vznikat, a někde už
vzniká <strong>open hardware</strong>, které by mohlo odstranit závislost na
"uzavřených" síťových a grafických kartách apod.).</p>

<p>Vraťme se však ke způsobům reprezentace číselných hodnot v&nbsp;operační
paměti. Nejprve předpokládejme, že pro reprezentaci vlastností určitého objektu
či stavu z&nbsp;reálného světa použijeme <i>N</i> binárních číslic (bitů),
tj.&nbsp;základních jednotek informace, která může nabývat pouze jedné ze dvou
povolených hodnot (ty se značí například symboly <i>yes/no</i> nebo
<i>true</i>/<i>false</i>, ale my se budeme spíše držet označení <i>0</i> a
<i>1</i>). Pomocí této uspořádané <i>N</i>-tice je možné popsat celkem:</p>

<p><i>2<sub>0</sub>&times;2<sub>1</sub>&times;2<sub>2</sub> ... 2<sub>N-1</sub>=2<sup>N</sup></i></p>

<p>jednoznačných, tj.&nbsp;navzájem odlišných, stavů. Množina těchto stavů může
reprezentovat prakticky jakýkoliv abstraktní či reálný objekt. Přitom si musíme
uvědomit, že u této množiny není implicitně řečeno ani myšleno, že se jedná
například o celá kladná čísla, to je pouze jedna z&nbsp;mnoha možných
interpretací zvolené <i>N</i>-tice (my programátoři máme tendenci považovat
celá kladná čísla za přirozenou interpretaci bitové <i>N</i>-tice, to však
vychází pouze z&nbsp;našeho pohledu na svět a z&nbsp;našich zkušeností).
Reprezentaci momentálního stavu abstraktního či reálného objektu si můžeme
představit jako zobrazení z&nbsp;množiny binárních stavů na elementy vzorové (a
obecně neuspořádané) množiny. Nejčastěji používanými zobrazeními jsou zobrazení
množiny binárních stavů na interval celých kladných čísel (<i>Unsigned
Integers</i>), popřípadě na interval celých čísel (<i>Signed Integers</i>).</p>



<p><a name="k03"></a></p>
<h1>3. Uložení čísel ve formátu pevné řádové binární tečky</h1>

<p>Numerické hodnoty zapsané ve&nbsp;formátu <i>pevné řádové binární tečky</i>
se chápou jako podmnožina racionálních čísel, což jsou taková čísla, jejichž
hodnoty lze vyjádřit vztahem:</p>

<p><i>x<sub>FX</sub>=a/b &nbsp;&nbsp; a,b leží v Z, b &ne; 0</i></p>

<p>Číselné hodnoty z&nbsp;uvažované podmnožiny jsou navíc omezeny
podmínkou:</p>

<p><i>b=2<sup>k</sup> &nbsp;&nbsp; b leží v Z, k leží v Z<sup>+</sup></i></p>

<p>Protože <i>b</i> je celočíselnou mocninou dvojky (a ne desítky či jiného
základu), určuje jeho hodnota <i>n</i> polohu <i>binární tečky</i>
v&nbsp;uloženém čísle. Další podmínkou, která má však spíše implementační
charakter, je zachování stejného počtu binárních cifer v&nbsp;každém
reprezentovaném čísle, což mimo jiné znamená, že všechna čísla mají řádovou
binární tečku umístěnou na stejném místě &ndash; z&nbsp;této podmínky ostatně
plyne i název popisovaného způsobu reprezentace vybrané podmnožiny racionálních
čísel. Tak jako i v&nbsp;jiných reprezentacích čísel, jsou nulové číslice před
první nenulovou cifrou a za poslední nenulovou cifrou nevýznamné, proto je není
zapotřebí uvádět.</p>

<p>Prakticky může být číselná hodnota v&nbsp;systému pevné řádové tečky uložena
na osmi bitech například následujícím způsobem (uvažujeme pouze kladné
hodnoty):</p>

<table>
<tr><td>Pozice bitu        </td><td>8&nbsp;&nbsp;&nbsp;&nbsp;</td><td>7&nbsp;&nbsp;&nbsp;&nbsp;</td><td>6&nbsp;&nbsp;&nbsp;&nbsp;</td><td>5&nbsp;&nbsp;&nbsp;&nbsp;</td><td>4&nbsp;&nbsp;&nbsp;&nbsp;</td><td>3&nbsp;&nbsp;&nbsp;&nbsp;</td><td>2&nbsp;&nbsp;&nbsp;&nbsp;</td><td>1&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td>Váha bitu          </td><td>2<sup>4</sup></td><td>2<sup>3</sup></td><td>2<sup>2</sup></td><td>2<sup>1</sup></td><td>2<sup>0</sup></td><td>2<sup>-1</sup></td><td>2<sup>-2</sup></td><td>2<sup>-3</sup></td></tr>
<tr><td>Desítková váha bitu</td><td>16</td><td>8</td><td>4</td><td>2</td><td>1</td><td>0,5</td><td>0,25</td><td>0,125</td></tr>
</table>



<p><a name="k04"></a></p>
<h1>4. Přednosti a zápory formátu pevné řádové tečky</h1>

<p>Ve výše uvedeném příkladu je binární řádová tečka umístěna vždy mezi třetím
a čtvrtým bitem. Vzhledem k&nbsp;tomu, že je tato skutečnost dopředu známá
algoritmu, který provádí zpracování čísel, není zapotřebí spolu s&nbsp;číslem
uchovávat i pozici binární tečky, což výrazně snižuje počet bitů, které je
zapotřebí rezervovat pro čísla ze zadaného rozsahu. To je tedy první přednost
systému pevné řádové tečky &ndash; pokud programátor dopředu zná rozsah všech
zpracovávaných hodnot a požadovanou přesnost, může být výhodné tento systém
použít. Programátor také díky explicitním určení polohy řádové tečky může
určit, ve kterém místě programu se musí přesnost či rozsah zvýšit a kdy naopak
snížit. Lépe se tak využije počet bitů, které můžeme pro uložení jednoho čísla
obětovat (typicky je tento počet bitů roven délce slova mikroprocesoru,
popř.&nbsp;jeho celočíselnému násobku či naopak podílu).</p>

<p>Jak se dozvíme v&nbsp;následujícím pokračování tohoto seriálu, je možné
základní matematické operace (sčítání, odčítání, násobení a dělení) poměrně
jednoduše implementovat i při použití formátu pevné řádové tečky.
V&nbsp;případě, že není k&nbsp;dispozici specializovaný (a současně velmi
komplikovaný) matematický koprocesor, je mnohdy mnohem jednodušší a rychlejší
implementovat matematické operace v&nbsp;FX formátu. To je případ mnoha
jednočipových mikroprocesorů (mikrořadičů), signálových procesorů, ale i
specializovaných zařízení obsahujících programovatelné obvody CPLD či FPGA.
Dnes sice mají komplikovanější (a dražší) FPGA implementovanou i jednotku FPU,
ale mnohdy je výhodnější použít FPGA bez této jednotky a potřebné operace si do
tohoto obvodu "vypálit" po svém.</p>

<p>Třetí výhodou je fakt, že u FX formátu může programátor navrhnout a posléze
také dodržet požadovanou přesnost všech prováděných výpočtů. To je velký rozdíl
oproti FP formátu (resp.&nbsp;jeho podmnožinám, které se nejčastěji používají).
Není vzácností narazit na programy, které používají datové typy <i>float</i> či
<i>double</i> a přitom jsou výpočty prováděné v&nbsp;těchto programech zatíženy
velkou chybou, protože si programátoři plně neuvědomují některé limity FP
formátu. Kritické jsou například výpočty s&nbsp;peněžními hodnotami, ale i
pouhé sčítání čísel, jež se od sebe o mnoho řádů liší, vede k&nbsp;velkým
chybám, které dokonce mohou zapříčinit vznik nekonečných smyček, populární
dělení nulou atd.</p>

<p>FX formát má však i některé nevýhody. První nevýhoda spočívá v&nbsp;tom, že
tento formát není příliš podporován, a to ani po programové stránce (podpora
v&nbsp;programovacích jazycích), ani výrobci mikroprocesorů pro počítače PC.
Situace je však odlišná v&nbsp;oblasti jednočipových mikropočítačů, signálových
procesorů (DSP), řídicích systémů, nebo například u IBM RS 6000, který kromě
jednotky FPU obsahuje i FXU &ndash; jednotku pro provádění výpočtů v&nbsp;pevné
řádové binární čárce. Na platformě x86 je možné pro FX formát použít instrukce
<strong>MMX</strong>.</p>

<p>Dále může být použití FX formátu nevýhodné v&nbsp;případě, že se mají
zpracovávat numerické hodnoty, které mají velkou dynamiku, tj.&nbsp;poměr mezi
nejvyšší a nejnižší absolutní hodnotou. V&nbsp;takovém případě by se mohlo
stát, že by se při použití FX formátu muselo pro každé číslo alokovat velké
množství bitů, které by mohlo dokonce překročit počet bitů nutných pro FP
formát. Také v&nbsp;případě, kdy dopředu nevíme, jaké hodnoty se budou
zpracovávat, může být výhodnější použití FP formátu. Zde se však nabízí otázka,
ve kterých případech nevíme, jaké hodnoty můžeme na vstupu získat: většinou je
již z&nbsp;podstaty úlohy dopředu známé, s&nbsp;čím je možné počítat a které
hodnoty jsou naprosto nesmyslné. Je však pravdou, že takovou analýzu málokdo
dělá a když při výpočtech ve <i>floatech</i> dochází k&nbsp;chybám, tak se bez
přemýšlení program přepíše na <i>doubly</i> a problém se tak buď odstraní, nebo
alespoň odsune na pozdější dobu, například do chvíle, kdy jsou programu
předložena reálná data a ne "pouze" data testovací.</p>



<p><a name="k05"></a></p>
<h1>5. Uložení čísel ve formátu plovoucí řádové (binární) tečky</h1>

<p>Uložení racionálních čísel ve formátu plovoucí řádové tečky (FP formát) se
od FX formátu odlišuje především v&nbsp;tom, že si každá numerická hodnota sama
v&nbsp;sobě nese polohu řádové tečky. Z&nbsp;tohoto důvodu je kromě bitů, které
jsou rezervovány pro uložení významných číslic numerické hodnoty, nutné pro
každou numerickou hodnotu rezervovat i další bity, pomocí nichž je určena
mocnina o nějakém základu (typicky 2, 8, 10 či 16), kterou musí být významné
číslice vynásobeny resp.&nbsp;vyděleny. První část čísla uloženého v&nbsp;FP
formátu se nazývá <strong>mantisa</strong>, druhá část
<strong>exponent</strong>. Obecný formát uložení a způsob získání původního
čísla je následující:</p>

<p><i>x<sub>FP</sub>=b<sup>e</sup>&times;m</i></p>

<p>kde:</p>

<ol>
<li><i>x<sub>FX</sub></i> značí reprezentovanou numerickou hodnotu z&nbsp;podmnožiny reálných čísel</li>
<li><i>b</i> je báze, někdy také nazývaná <i>radix</i></li>
<li><i>e</i> je hodnota exponentu (může být i záporná)</li>
<li><i>m</i> je mantisa, která může být i záporná</li>
</ol>

<p>Konkrétní formát numerických hodnot reprezentovaných v&nbsp;systému plovoucí
řádové tečky závisí především na volbě báze (<strong>radixu</strong>) a také na
počtu bitů rezervovaných pro uložení mantisy a exponentu. V&nbsp;minulosti
existovalo mnoho různých formátů plovoucí řádové tečky (vzpomíná si někdo na
<strong>Turbo Pascal</strong> s&nbsp;jeho šestibytovým datovým typem
<i>real</i>?), dnes se však, ustálilo použití formátů specifikovaných
v&nbsp;normě IEEE 754.</p>



<p><a name="k06"></a></p>
<h1>6. Formát plovoucí řádové binární tečky a norma IEEE 754</h1>

<p>Norma IEEE 754 specifikuje nejenom vlastní formát uložení numerických hodnot
v&nbsp;systému pevné řádové tečky, ale (a to je celkem neznámá skutečnost) i
pravidla implementace operací s&nbsp;těmito hodnotami, včetně konverzí.
Konkrétně je v&nbsp;této normě popsáno:</p>

<ol>
<li>Základní (<i>basic</i>) a rozšířený (<i>extended</i>) formát uložení numerických hodnot.</li>
<li>Způsob provádění základních matematických operací: sčítání, odečítání, násobení, dělení, zbytek po dělení, druhá odmocnina a porovnání.</li>
<li>Pravidla konverze mezi celočíselnými formáty (<i>integer</i>) a formáty s&nbsp;plovoucí řádovou tečkou.</li>
<li>Způsob konverze mezi různými formáty s&nbsp;plovoucí řádovou tečkou.</li>
<li>Způsob konverze základního formátu s&nbsp;plovoucí řádovou tečkou na řetězec číslic.</li>
<li>Práce s&nbsp;hodnotami NaN (<i>not a number</i>) a výjimkami.</li>
</ol>

<p>Touto normou se budeme podrobněji zabývat ve druhé části tohoto seriálu,
zejména proto, že bude zapotřebí provádět převody mezi hodnotami v&nbsp;FP
formátu a hodnotami v&nbsp;FX formátu.</p>



<p><a name="k07"></a></p>
<h1>7. Přednosti a zápory formátu plovoucí řádové tečky</h1>

<p>Vzhledem k&nbsp;tomu, že je FP formát v&nbsp;současnosti velmi rozšířený a
používaný, musí nutně přinášet některé výhody, jinak by jeho rozšíření nebylo
zdaleka tak velké. První předností je podpora FP operací díky hardwarovým FPU
jednotkám, které jsou dostupné jak ve formě samostatného matematického
koprocesoru (Intel 8087, Intel i80287, Intel i80387, Intel i80487, Motorola
M68881, Motorola M68882), tak i jako přímá součást moderních mikroprocesorů
(řada x86 od "plnohodnotných" mikroprocesorů i486, Motorola M68040, Power PC,
některé typy mikrořadičů a signálových procesorů atd.). Další předností je
existence normy IEEE 754, ve které je mimo jiné řečeno i to, že každá FPU
jednotka by měla podporovat ideálně dva formáty, například <i>basic single</i>
a <i>basic double</i>. To je velmi důležité, zejména pro přenos numerických
údajů mezi různými zařízeními. Pro mnoho programátorů je také výhodné to, že
jeden základní datový typ (například <i>float</i>) je možné použít pro
reprezentaci mnoha objektů či vlastností (jak si však ukážeme v&nbsp;další
části tohoto seriálu, ne vždy je tento předpoklad pravdivý). Všechny tyto
skutečnosti vedly k&nbsp;tomu, že FP formát (či formáty) jsou v&nbsp;prakticky
všech programovacích jazycích implementovány jako základní datové typy, což
představuje velký náskok před FX formátem, který je podporován pouze několika
málo jazyky a programovými knihovnami.</p>

<p>FP formát však má i některé zápory, které nás mohou v&nbsp;některých
případech "donutit" k&nbsp;použití formátu FX. První nevýhoda vychází
z&nbsp;velké komplexnosti vlastního formátu, tj.&nbsp;způsobu rozdělení údajů
na mantisu a exponent. I taková základní matematická operace, jako je součet,
je díky FP formátu poměrně složitá a výsledek nemusí vždy odpovídat
intuitivnímu cítění programátora, který má tendenci FP formát pokládat za
ekvivalent reálných čísel ("<strong>datový typ double je přesný...</strong>").
Mnoho programátorů se například chybně spoléhá na to, že i pouhý převod mezi
typem <i>int</i> na <i>single/float</i> a zpět na <i>int</i> je bezeztrátový
&ndash; pravý opak je pravdou a to vzhledem k&nbsp;tomu, že se ztratí hodnoty
minimálně osmi nejnižších bitů, které musely být vyhrazeny pro uložení
exponentu. FP formát, resp.&nbsp;formát specifikovaný normou IEEE 754, se
nehodí pro práci s&nbsp;peněžními hodnotami; z&nbsp;tohoto důvodu se
v&nbsp;některých vyšších programovacích jazycích zavádí speciální datový typ
<i>decimal</i> resp.&nbsp;<i>currency</i>, určený specielně pro peněžní
hodnoty.</p>

<p>Další nedostatek FP formátu souvisí s&nbsp;jeho značnou komplexností.
Hardwarové jednotky FPU jsou velmi komplikované, což limituje použití FP
operací v&nbsp;některých vestavných &ndash; <i>embedded</i> &ndash; zařízeních
(těch je dnes řádově více než osobních počítačů), ale i v&nbsp;dnes oblíbených
smartphonech atd. Tím neříkám, že některé mikroprocesory použité ve
smartphonech FPU nemají, bylo by ale zajímavé zjistit, zda by ty statisíce
logických hradel použitých na implementaci FPU nešly využít jiným způsobem.
Dále se komplikuje a především zpomaluje převod mezi FP formáty a celočíselnými
formáty dat (integer, long). Z&nbsp;tohoto důvodu jsou například mnohé
signálové procesory zkonstruovány tak, aby podporovaly pouze FX aritmetiku,
protože jak na vstupu signálového procesoru, tak i na jeho výstupu jsou
prakticky vždy celočíselné hodnoty a pouze převody mezi vstupem, interní
reprezentací a výstupem by byly mnohdy komplikovanější než implementace
veškerých výpočtů v&nbsp;FX reprezentaci.</p>



<p><a name="k08"></a></p>
<h1>8. Literatura a odkazy na Internetu</h1>

<ol>
<li>Yates Randy: <i>Fixed-Point Arithmetic: An Introduction</i>,<br />
    Digital Sound Labs, March 3, 2001</li>
<li>Hook Brian: <i>An Introduction to Fixed Point Math</i>,<br />
    Game Design and Review, 2003</li>
<li>P.&nbsp;Mikulec, M.&nbsp;Vojtíšek: <i>Procesor IBM RS 6000</i>,<br />
    <a href="http://petam.chytrak.cz/skola/RS6000">http://petam.chytrak.cz/skola/RS6000</a></li>
<li>Wikipedia: <i>Fixed-point arithmetic</i>,<br />
    <a href="http://en.wikipedia.org/wiki/Fixed-point_arithmetic">http://en.wikipedia.org/wiki/Fixed-point_arithmetic</a></li>
<li>Wikipedia: <i>Floating point</i>,<br />
    <a href="http://en.wikipedia.org/wiki/Floating_point">http://en.wikipedia.org/wiki/Floating_point</a></li>
<li>Wikipedia: <i>IEEE floating-point standard</i>,<br />
    <a href="http://en.wikipedia.org/wiki/IEEE_Floating_Point_Standard">http://en.wikipedia.org/wiki/IEEE_Floating_Point_Standard</a></li>
</ol>



<p><a name="k09"></a></p>
<h1>9. Obsah dalšího pokračování tohoto seriálu</h1>

<p>V&nbsp;následujícím pokračování tohoto seriálu si podrobně popíšeme formáty
uložení specifikované pomocí normy IEEE 754, včetně způsobu provádění všech
základních matematických operací.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2006</small></p>
</body>
</html>

