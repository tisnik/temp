<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Výpočty v systému pevné řádové tečky IV</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Výpočty v systému pevné řádové tečky IV - Výpočet goniometrických funkcí pomocí algoritmu CORDIC</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrté části seriálu věnovaného numerickým výpočtům prováděným s čísly uloženými ve formátu pevné i pohyblivé binární řádové čárky budeme směřovat k dokončení bloku, ve kterém se zabýváme numerickými formáty, jež používají plovoucí řádovou čárku. Dnes si podrobněji popíšeme princip algoritmu CORDIC, který je implementován v&nbsp;mnoha digitálních zařízeních, včetně kalkulaček, digitálních signálových procesorů a specializovaných obvodů vytvořených například v&nbsp;čipech FPGA.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Úvodní informace o algoritmu CORDIC</a><br />
<a href="#k02">2. Rotace vektoru r okolo počátku souřadného systému</a><br />
<a href="#k03">3. Úprava vztahu rotace vektoru pro algoritmus CORDIC</a><br />
<a href="#k04">4. Hodnoty úhlů, po kterých se provádí rotace</a><br />
<a href="#k05">5. Výpočet funkcí sinus a kosinus pomocí algoritmu CORDIC</a><br />
<a href="#k06">6. Literatura a odkazy na Internetu</a><br />
<a href="#k07">7. Obsah dalšího pokračování tohoto seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Úvodní informace o algoritmu CORDIC</h1>

<p>V&nbsp;předchozí části tohoto seriálu jsme si uvedli stručné informace o
algoritmu <strong>CORDIC</strong>, neboli <i><strong>CO</strong>ordinate
<strong>RO</strong>tation <strong>DI</strong>gital
<strong>C</strong>omputer</i>. Jedná se o výpočetní metodu využívající iteraci,
kterou pro účely jednoduchého a rychlého výpočtu goniometrických funkcí bez
použití násobiček a děliček navrhl a zpopularizoval Jack Volder už
v&nbsp;polovině minulého století (viz literatura uvedená v&nbsp;<a
href="#k06">šesté kapitole</a>). Později se ukázalo, že tuto metodu je možné po
malých úpravách použít i pro výpočty dalších matematických funkcí, například
arkustangenty, arkussinu, arkuskosinu, ale i pro vyčíslení délky vektoru či
jeho rychlou rotaci o libovolný úhel; včetně transformace bodu či vektoru
z&nbsp;polárních souřadnic do souřadnic kartézských. Již větší úpravy si
vyžádala aplikace metody CORDIC pro výpočet hyperbolických funkcí
(<i>sinh()</i>, <i>cosh()</i>, <i>tanh()</i>) a funkcí logaritmických, základní
myšlenka a princip práce však zůstává stejný.</p>

<p>Vzhledem k&nbsp;tomu, že se při aplikaci algoritmu CORDIC využívají pouze ty
nejzákladnější matematické operace (bitový posun doleva a doprava, sečítání,
odečítání a porovnání dvou hodnot), je možné CORDIC využít ve všech číslicových
systémech, ve kterých je zapotřebí šetřit použitými prostředky, tj.&nbsp;počtem
logických hradel, kapacitou obsazené paměti, možnostmi použitých čipů atd.
CORDIC tak byl implementován a s&nbsp;úspěchem používán například
v&nbsp;kalkulačkách, osmibitových mikrořadičích (řada Intel 8051 a Motorola
68HC11), osmibitových domácích počítačích (Atari, Sinclair ZX Spectrum atd.) a
mnoha specializovaných obvodech vytvořených pomocí programovatelných polí FPGA.
Zajímavá je implementace CORDICu na mikrořadičové stavebnici Basic STAMP.
V&nbsp;největší míře však bylo CORDICu využito v&nbsp;některých matematických
koprocesorech (FPU), protože bylo zjištěno, že některé funkční bloky
zabezpečující chod CORDICu zůstávají stále stejné, bez ohledu na to, jaká
funkce je počítána, což do značné míry zjednodušilo (a tím pádem i zlevnilo)
výrobu FPU. Samozřejmě se také snížil počet hradel nutných pro implementaci
goniometrických, hyperbolických a logaritmických funkcí.</p>



<p><a name="k02"></a></p>
<h1>2. Rotace vektoru r okolo počátku souřadného systému</h1>

<p>Princip práce algoritmu CORDIC vychází z&nbsp;vyjádření rotace vektoru o
určitý úhel <i>&delta;</i> a z&nbsp;následné úpravy vzorce pro rotaci tak, aby
se eliminovaly zbytečně složité a časově náročné multiplikativní operace.
Nejprve si napišme vzorce pro hodnoty funkcí sinus a kosinus součtu dvou úhlů.
Jedná se o známé středoškolské vztahy používané pro úpravu výrazů
s&nbsp;goniometrickými funkcemi:</p>

<p><i>sin(&alpha;+&beta;)=sin &alpha; cos &beta; + cos &alpha; sin &beta;</i><br />
<i>cos(&alpha;+&beta;)=cos &alpha; cos &beta; - sin &alpha; sin &beta;</i></p>

<p>Jak si ukážeme o několik odstavců níže, je možné tyto vzorečky použít pro
vyjádření rotace vektoru. Vektor <strong>r</strong>, kterým budeme rotovat,
může být vyjádřen souřadnicemi <i>[x<sub>0</sub>, y<sub>0</sub>]</i>, přičemž
je možné provést převod z&nbsp;kartézských souřadnic do souřadnic
polárních:</p>

<p><i>x<sub>0</sub>=r cos &phi;</i><br />
<i>y<sub>0</sub>=r sin &phi;</i></p>

<p>kde <i>r</i> představuje délku vektoru <strong>r</strong> a <i>&phi;</i> je
úhel vektoru měřený od kladné horizontální poloosy souřadného systému. Pokud
bude vektor <strong>r</strong> rotován o úhel <i>&delta;</i>, změní se koncový
bod vektoru tak, že bude ležet na kružnici o stejném poloměru <i>r</i>, ale
úhel vektoru (opět měřený od kladné horizontální poloosy) se zvětší o
<i>&delta;</i>. Tuto skutečnost je možné vyjádřit vztahy:</p>

<p><i>x<sub>r</sub>=r cos (&phi;+&delta;)</i><br />
<i>y<sub>r</sub>=r sin (&phi;+&delta;)</i></p>

<p>Dále je možné rozepsat výrazy <i>cos (&phi;+&delta;)</i> a <i>sin
(&phi;+&delta;)</i> podle prvních dvou uvedených vzorečků a následně zpětně
dosadit za výrazy <i>r cos &phi;</i> a <i>r sin &phi;</i> původní souřadnice
vektoru <strong>r</strong>, tj.&nbsp;<i>x<sub>0</sub></i> a
<i>y<sub>0</sub></i>:</p>

<p><i>x<sub>r</sub>=r (cos &phi; cos &delta; - sin &phi; sin &delta;)=x<sub>0</sub> cos &delta; - y<sub>0</sub> sin &delta;</i><br />
<i>y<sub>r</sub>=r (sin &phi; cos &delta; + cos &phi; sin &delta;)=x<sub>0</sub> sin &delta; + y<sub>0</sub> cos &delta;</i></p>

<p>Všimněte si, že se ve výsledných vztazích nevyskytuje ani hodnota <i>r</i>
ani úhel původního vektoru <i>&phi;</i>. To znamená, že převod na polární
souřadnice pro nás byl pouze matematickou pomůckou při odvozování vzorce pro
rotaci a ve skutečnosti se nebude nikdy provádět.</p>



<p><a name="k03"></a></p>
<h1>3. Úprava vztahu rotace vektoru pro algoritmus CORDIC</h1>

<p>V&nbsp;<a href="#k02">předchozí kapitole</a> jsme si odvodili, že rotaci
jakéhokoli vektoru o úhel <i>&delta;</i> je možné zapsat pomocí vztahů:</p>

<p><i>x<sub>r</sub>=x<sub>0</sub> cos &delta; - y<sub>0</sub> sin &delta;</i><br />
<i>y<sub>r</sub>=x<sub>0</sub> sin &delta; + y<sub>0</sub> cos &delta;</i></p>

<p>Pro účely algoritmu CORDIC se tento vztah dále upravuje. První úprava
spočívá v&nbsp;tom, že se obě rovnice vydělí hodnotou <i>cos &delta;</i>, takže
dostaneme vztahy:</p>

<p><i>x<sub>r</sub> /cos &delta;=x<sub>0</sub> - y<sub>0</sub> sin &delta;/cos &delta;</i><br />
<i>y<sub>r</sub> /cos &delta;=x<sub>0</sub> sin &delta;/cos &delta; + y<sub>0</sub></i></p>

<p>Pokud si uvědomíme skutečnost, že <i>sin &delta;/cos &delta;=tan
&delta;</i>, můžeme pokračovat v&nbsp;úpravách:</p>

<p><i>x<sub>r</sub> /cos &delta;=x<sub>0</sub> - y<sub>0</sub> tan &delta;</i><br />
<i>y<sub>r</sub> /cos &delta;=y<sub>0</sub> + x<sub>0</sub> tan &delta;</i></p>

<p>a následně:</p>

<p><i>x<sub>r</sub>=cos &delta;(x<sub>0</sub> - y<sub>0</sub> tan &delta;)</i><br />
<i>y<sub>r</sub>=cos &delta;(y<sub>0</sub> + x<sub>0</sub> tan &delta;)</i></p>

<p>Nyní přichází základní myšlenka, na které je CORDIC postaven. Pokud budeme
volit úhel <i>&delta;</i> takovým způsobem, aby jeho tangenta nabývala hodnot
<i>2<sup>-i</sup></i> (pro <i>i&gt;0</i>), je možné tangentu ve vzorci nahradit
násobením zvolenou hodnotou <i>2<sup>-i</sup></i>; v&nbsp;tomto případě je však
možné násobení nahradit jednoduchým a přitom rychlým bitovým posunem. Omezení
hodnoty tangenty na zvolenou sadu hodnot však znamená, že se vektor nemůže
rotovat o libovolný úhel, ale pouze o úhel odpovídající tangentě z&nbsp;dané
sady. To však není problém, protože rotaci o libovolný je možné zapsat pomocí
série rotací (doprava či doleva), například:</p>

<p><i>&delta;=&delta;<sub>1</sub>+&delta;<sub>2</sub>-&delta;<sub>3</sub>+...</i></p>

<p>Naproti tomu, že se parciální rotace mohou provádět v&nbsp;obou směrech
(tj.&nbsp;jak doprava, tak i doleva), můžeme místo hodnoty <i>cos &delta;</i>
dosadit konstantu <i>K<sub>i</sub></i>, protože platí <i>cos &delta;=cos
-&delta;</i>. Nakonec místo <i>tan &delta;</i> přímo dosadíme mocninu dvojky
<i>2<sup>-i</sup></i> a pomocí parametru <i>d<sub>i</sub></i> směr rotace
(parametr <i>d<sub>i</sub></i> nabývá pouze hodnot +1 a -1):</p>

<p><i>x<sub>r</sub>=K<sub>i</sub> (x<sub>0</sub> - y<sub>0</sub> d<sub>i</sub> 2<sup>-i</sup>)</i><br />
<i>y<sub>r</sub>=K<sub>i</sub> (y<sub>0</sub> + x<sub>0</sub> d<sub>i</sub> 2<sup>-i</sup>)</i></p>

<p>Zbývá nám zjistit hodnotu konstanty <i>K<sub>i</sub></i>. Platí:</p>

<p><i>K<sub>i</sub>=cos (arctan 2<sup>-i</sup>)=1/(1+2<sup>-2i</sup>)<sup>1/2</sup></i></p>

<p>Limitně se součin hodnot <i>K<sub>i</sub></i> (po nekonečně mnoha iteracích) blíží
k&nbsp;<strong>0,6073</strong>, to znamená, že touto hodnotou bude
v&nbsp;některých případech nutné vydělit výsledek (v&nbsp;jiných případech nám
naopak toto <i>zesílení</i> při rotaci vadit nebude).</p>

<p>Veškerá práce algoritmu CORDIC spočívá v&nbsp;tom, že se nastaví počáteční
souřadnice vektoru <strong>r</strong> a iterativně se provádí rotace o předem
známé úhly <i>&delta;<sub>1</sub>...&delta;<sub>n</sub></i> tak, aby se dosáhlo
požadované hodnoty rotace <i>&delta;</i>.</p>



<p><a name="k04"></a></p>
<h1>4. Hodnoty úhlů, po kterých se provádí rotace</h1>

<p>Jak jsme si uvedli v&nbsp;<a href="#k03">předchozí kapitole</a>, musí
tangenty úhlů použitých v&nbsp;CORDICu splňovat podmínku <i>tan
&delta;=2<sup>-i</sup></i>. Pokud budeme veškeré výpočty provádět v&nbsp;prvním
kvadrantu (ve skutečnosti však může počítat i ve čtvrtém kvadrantu), začíná se
s&nbsp;úhlem 45&deg;, tj.&nbsp;&pi;/4, protože <i>tan &pi;/4=1</i>. Další úhly
jsou samozřejmě menší; o jaké hodnoty se konkrétně jedná, nám dá přehled
následující jednoduchý program:</p>

<code-area>

#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

int main(void)
{
    double tan_value=1.0;
    double delta;
    int i;
    for (i=0; i&lt;10; i++) {
        delta=atan(tan_value)*180.0/M_PI;
        printf("%d\t%12.10f\t%12.9f\n", i+1, tan_value, delta);
        tan_value/=2.0;
    }
    return 0;
}

</code-area>

<p>Výsledek běhu předešlého programu nám ukazuje, že se hodnoty úhlů postupně
zmenšují a to vždy na více než polovinu předchozí hodnoty. Z&nbsp;toho také
vyplývá, že jakýkoli úhel v&nbsp;prvním a čtvrtém kvadrantu je opravdu možné
složit ze součtu těchto úhlů. Ideální by sice byly hodnoty odpovídající přesně
polovině hodnoty úhlu předchozího, tj.&nbsp;řada úhlů 45&deg;, 45/2&deg;,
45/4&deg;..., tím by se však porušila podmínka <i>tan
&delta;=2<sup>-i</sup></i>, díky níž je algoritmus CORDIC tak rychlý a přitom
jednoduchý.</p>

<code-area>

i       2<sup>1-i</sup>             úhel &delta;
1       1.0000000000    45.000000000
2       0.5000000000    26.565051177
3       0.2500000000    14.036243468
4       0.1250000000     7.125016349
5       0.0625000000     3.576334375
6       0.0312500000     1.789910608
7       0.0156250000     0.895173710
8       0.0078125000     0.447614171
9       0.0039062500     0.223810500
10      0.0019531250     0.111905677

</code-area>



<p><a name="k05"></a></p>
<h1>5. Výpočet funkcí sinus a kosinus pomocí algoritmu CORDIC</h1>

<p>Nyní si konečně na reálném příkladu ukážeme, jakým způsobem je možné
algoritmus CORDIC použít pro výpočet funkcí sinus a kosinus. Nejprve jsou
spočteny tabulky úhlů a hodnota druhých záporných mocnin hodnoty 2. Při
implementaci CORDICu na FPU či FPGA by se tyto tabulky samozřejmě znovu
nevytvářely: tabulka úhlů by byla uložena v&nbsp;paměti (či masce obvodu) a
tabulka mocnin hodnoty 2 by se implementovala pomocí bitových posunů. Po
vytvoření tabulek je již možné CORDIC spustit. Počáteční souřadnice vektoru
<strong>r</strong> jsou nastaveny na hodnotu <i>[1, 0]</i>. Vektor je posléze
v&nbsp;iterační smyčce rotován tak dlouho, dokud neproběhne daný počet iterací.
Úhel vektoru <strong>r</strong> se přitom neustále přibližuje k&nbsp;zadanému
úhlu <i>&delta;</i>, jelikož se v&nbsp;iterační smyčce adaptivně zadaný úhel
buď zmenšuje či zvětšuje o hodnotu uloženou v&nbsp;tabulce <i>atans[]</i>.
Výsledek, tj.&nbsp;hodnoty funkcí sinus a kosinus, je uložen v&nbsp;nových
souřadnicích vektoru <strong>r</strong> (vynásobený o konstantu K) a to
z&nbsp;toho důvodu, že vektor rotoval na jednotkové kružnici a souřadnice
jakéhokoli bodu ležícího na jednotkové kružnici přímo odpovídají hodnotám sinu
a kosinu úhlu tohoto bodu počítaného od kladné horizontální poloosy.</p>

<code-area>

// --------------------------------------------------------
// Výpočet hodnot funkcí sin() a cos() pomocí iteračního
// algoritmu CORDIC.
// --------------------------------------------------------

#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

// maximální počet iterací při běhu algoritmu
#define MAX_ITER 10

// "zesílení" při rotacích
#define K 0.6073

// tabulka arkustangentu úhlů
double atans[MAX_ITER];

// tabulka záporných celočíselných mocnin hodnoty 2
double pows[MAX_ITER];

// naplnění tabulek atans[] a pows[]
void createTables(void)
{
    int i;
    for (i=0; i&lt;MAX_ITER; i++) {
        double p=pow(2.0, -i);
        atans[i]=atan(p);
        pows[i]=p;
    }
}

// výpočet funkcí sin() a cos() pro zadaný úhel delta
void sincos(double delta, double *sinval, double *cosval)
{
    int i;
    double x0=1.0;                          // nastavení počátečních podmínek
    double y0=0.0;
    double xn;
    for (i=0; i&lt;MAX_ITER; i++) {            // iterační smyčka
        if (delta&lt;0) {                      // úhel je záporný =&gt; rotace doleva
            xn=x0+y0*pows[i];
            y0-=x0*pows[i];
            delta+=atans[i];
        }
        else {                              // úhel je kladný =&gt; rotace doprava
            xn=x0-y0*pows[i];
            y0+=x0*pows[i];
            delta-=atans[i];
        }
        x0=xn;
    }
    *sinval=y0*K;                           // opravit "zesílení" výsledku
    *cosval=x0*K;
}

int main(void)
{
    int i;
    createTables();
    for (i=0; i&lt;=90; i++) {                 // výpočetní smyčka
        double delta;                       // úhel, ze kterého se počítá sin a cos
        double sinval;                      // vypočtené hodnoty
        double cosval;
        double sinerr;                      // absolutní chyby
        double coserr;
        delta=i*M_PI/180.0;                 // převod úhlu na radiány
        sincos(delta, &amp;sinval, &amp;cosval);    // výpočet sinu a kosinu
        sinerr=fabs(sinval-sin(delta));     // výpočet absolutních chyb
        coserr=fabs(cosval-cos(delta));
                                            // tisk výsledků
        printf("%02d\t%12.10f\t%12.10f\t%12.10f\t%12.10f\t%8.3f%%\t%8.3f%%\n",
                i,
                sinval, cosval,
                sinerr, coserr,
                100.0*sinerr/sinval, 100.0*coserr/cosval);
    }
    return 0;
}

// finito

</code-area>

<p>Výsledek běhu předchozího programu je zobrazen v&nbsp;následující tabulce.
Kromě vypočtených hodnot sinů a kosinů zadaného úhlu je spočtena i absolutní a
relativní chyba, přičemž je zapotřebí upozornit na to, že relativní chyba pro
obě krajní hodnoty (ty by měly vyjít nulové) je poněkud zavádějící.
V&nbsp;každém případě však výsledky běhu algoritmu pro deset iterací nejsou
špatné, zvláště když si uvědomíme, že se v&nbsp;každé iteraci provádělo pouze
několik základních operací, konkrétně dva bitové posuvy a tři součty (či
rozdíly).</p>

<code-area>
--------------------------------------------------------------------------------------------------
vstupní   vypočtená       vypočtená       sin             cos              sin               cos
úhel    hodnota sin()   hodnota cos()   absolutní chyba absolutní chyba  rel.chyba       rel.chyba
--------------------------------------------------------------------------------------------------
00      0.0011726802    1.0000761814    0.0011726802    0.0000761814     100.000%          0.008%
01      0.0167806202    0.9999360752    0.0006717863    0.0000883801       4.003%          0.009%
02      0.0363058568    0.9994176447    0.0014063601    0.0000268177       3.874%          0.003%
03      0.0519144682    0.9987285075    0.0004214880    0.0000989728       0.812%          0.010%
04      0.0714093909    0.9975241564    0.0016529171    0.0000398938       2.315%          0.004%
05      0.0858859660    0.9963821278    0.0012697767    0.0001874297       1.478%          0.019%
06      0.1053286152    0.9945147694    0.0008001519    0.0000071260       0.760%          0.001%
07      0.1208522102    0.9927479474    0.0010171332    0.0002017957       0.842%          0.020%
08      0.1401999641    0.9902008452    0.0010268631    0.0000672235       0.732%          0.007%
09      0.1556537948    0.9878894877    0.0007806702    0.0002011471       0.502%          0.020%
10      0.1749154013    0.9846615389    0.0012672237    0.0001462141       0.724%          0.015%
11      0.1902784482    0.9818084619    0.0005305471    0.0001812785       0.279%          0.018%
12      0.2092807371    0.9779342089    0.0013690463    0.0002133919       0.654%          0.022%
13      0.2245344811    0.9745450275    0.0004165732    0.0001749627       0.186%          0.018%
14      0.2435223655    0.9699745364    0.0016004699    0.0003211899       0.657%          0.033%
15      0.2586475676    0.9660513338    0.0001714775    0.0001255075       0.066%          0.013%
16      0.2774481762    0.9608206145    0.0018108204    0.0004410814       0.653%          0.046%
17      0.2924243921    0.9563690285    0.0000526874    0.0000642725       0.018%          0.007%
18      0.3073310520    0.9516834391    0.0016859423    0.0006269228       0.549%          0.066%
19      0.3251452218    0.9457453825    0.0004229326    0.0002268069       0.130%          0.024%
20      0.3435512762    0.9392157709    0.0015311329    0.0004768498       0.446%          0.051%
21      0.3581836921    0.9337334665    0.0001842574    0.0001530400       0.051%          0.016%
22      0.3763350045    0.9265666237    0.0017284111    0.0006172309       0.459%          0.067%
23      0.3907657879    0.9205736488    0.0000346594    0.0000687953       0.009%          0.007%
24      0.4050994316    0.9143567106    0.0016372115    0.0008112530       0.404%          0.089%
25      0.4228792420    0.9062708704    0.0002609802    0.0000369167       0.062%          0.004%
26      0.4368623186    0.8996138385    0.0015088282    0.0008197922       0.345%          0.091%
27      0.4543481744    0.8909104782    0.0003576747    0.0000960460       0.079%          0.011%
28      0.4682106568    0.8837038670    0.0012609060    0.0007562742       0.269%          0.086%
29      0.4853645826    0.8743997745    0.0005549624    0.0002199326       0.114%          0.025%
30      0.4989670003    0.8667096840    0.0010329997    0.0006842803       0.207%          0.079%
31      0.5157967696    0.8568006981    0.0007586947    0.0003666026       0.147%          0.043%
32      0.5291205039    0.8486372819    0.0007987604    0.0005891857       0.151%          0.069%
33      0.5446674419    0.8387437758    0.0000284069    0.0000732079       0.005%          0.009%
34      0.5577055299    0.8301314870    0.0014873735    0.0010939144       0.267%          0.132%
35      0.5738098078    0.8190824429    0.0002333714    0.0000696014       0.041%          0.008%
36      0.5865371490    0.8100172323    0.0012481033    0.0010002379       0.213%          0.123%
37      0.6022307543    0.7984183504    0.0004157312    0.0002171596       0.069%          0.027%
38      0.6146302652    0.7889127841    0.0010312101    0.0009020305       0.168%          0.114%
39      0.6299202599    0.7767587849    0.0005998689    0.0003871766       0.095%          0.050%
40      0.6418729918    0.7669112114    0.0009146178    0.0008667682       0.142%          0.113%
41      0.6567280845    0.7542293861    0.0006690555    0.0004801942       0.102%          0.064%
42      0.6684306187    0.7438778473    0.0006999876    0.0007330218       0.105%          0.099%
43      0.6828308344    0.7306817333    0.0008324743    0.0006719683       0.122%          0.092%
44      0.6941513412    0.7199358716    0.0005070292    0.0005960713       0.073%          0.083%
45      0.7062435465    0.7080775359    0.0008632347    0.0009707547       0.122%          0.137%
46      0.7199358716    0.6941513412    0.0005960713    0.0005070292       0.083%          0.073%
47      0.7306817333    0.6828308344    0.0006719683    0.0008324743       0.092%          0.122%
48      0.7438778473    0.6684306187    0.0007330218    0.0006999876       0.099%          0.105%
49      0.7542293861    0.6567280845    0.0004801942    0.0006690555       0.064%          0.102%
50      0.7669112114    0.6418729918    0.0008667682    0.0009146178       0.113%          0.142%
51      0.7767587849    0.6299202599    0.0003871766    0.0005998689       0.050%          0.095%
52      0.7889127841    0.6146302652    0.0009020305    0.0010312101       0.114%          0.168%
53      0.7984183504    0.6022307543    0.0002171596    0.0004157312       0.027%          0.069%
54      0.8100172323    0.5865371490    0.0010002379    0.0012481033       0.123%          0.213%
55      0.8190824429    0.5738098078    0.0000696014    0.0002333714       0.008%          0.041%
56      0.8301314870    0.5577055299    0.0010939144    0.0014873735       0.132%          0.267%
57      0.8387437758    0.5446674419    0.0000732079    0.0000284069       0.009%          0.005%
58      0.8486372819    0.5291205039    0.0005891857    0.0007987604       0.069%          0.151%
59      0.8568006981    0.5157967696    0.0003666026    0.0007586947       0.043%          0.147%
60      0.8667096840    0.4989670003    0.0006842803    0.0010329997       0.079%          0.207%
61      0.8743997745    0.4853645826    0.0002199326    0.0005549624       0.025%          0.114%
62      0.8837038670    0.4682106568    0.0007562742    0.0012609060       0.086%          0.269%
63      0.8909104782    0.4543481744    0.0000960460    0.0003576747       0.011%          0.079%
64      0.8996138385    0.4368623186    0.0008197922    0.0015088282       0.091%          0.345%
65      0.9062708704    0.4228792420    0.0000369167    0.0002609802       0.004%          0.062%
66      0.9143567106    0.4050994316    0.0008112530    0.0016372115       0.089%          0.404%
67      0.9205736488    0.3907657879    0.0000687953    0.0000346594       0.007%          0.009%
68      0.9265666237    0.3763350045    0.0006172309    0.0017284111       0.067%          0.459%
69      0.9337334665    0.3581836921    0.0001530400    0.0001842574       0.016%          0.051%
70      0.9392157709    0.3435512762    0.0004768498    0.0015311329       0.051%          0.446%
71      0.9457453825    0.3251452218    0.0002268069    0.0004229326       0.024%          0.130%
72      0.9516834391    0.3073310520    0.0006269228    0.0016859423       0.066%          0.549%
73      0.9563690285    0.2924243921    0.0000642725    0.0000526874       0.007%          0.018%
74      0.9608206145    0.2774481762    0.0004410814    0.0018108204       0.046%          0.653%
75      0.9660513338    0.2586475676    0.0001255075    0.0001714775       0.013%          0.066%
76      0.9699745364    0.2435223655    0.0003211899    0.0016004699       0.033%          0.657%
77      0.9745450275    0.2245344811    0.0001749627    0.0004165732       0.018%          0.186%
78      0.9779342089    0.2092807371    0.0002133919    0.0013690463       0.022%          0.654%
79      0.9818084619    0.1902784482    0.0001812785    0.0005305471       0.018%          0.279%
80      0.9846615389    0.1749154013    0.0001462141    0.0012672237       0.015%          0.724%
81      0.9878894877    0.1556537948    0.0002011471    0.0007806702       0.020%          0.502%
82      0.9902008452    0.1401999641    0.0000672235    0.0010268631       0.007%          0.732%
83      0.9927479474    0.1208522102    0.0002017957    0.0010171332       0.020%          0.842%
84      0.9945147694    0.1053286152    0.0000071260    0.0008001519       0.001%          0.760%
85      0.9963821278    0.0858859660    0.0001874297    0.0012697767       0.019%          1.478%
86      0.9975241564    0.0714093909    0.0000398938    0.0016529171       0.004%          2.315%
87      0.9987285075    0.0519144682    0.0000989728    0.0004214880       0.010%          0.812%
88      0.9994176447    0.0363058568    0.0000268177    0.0014063601       0.003%          3.874%
89      0.9999360752    0.0167806202    0.0000883801    0.0006717863       0.009%          4.003%
90      1.0000761814    0.0011726802    0.0000761814    0.0011726802       0.008%        100.000%
--------------------------------------------------------------------------------------------------

</code-area>



<p><a name="k06"></a></p>
<h1>6. Literatura a odkazy na Internetu</h1>

<ol>

<li>Andraka, Ray: <i>"A survey of CORDIC algorithms for FPGA based computers"</i>,<br />ACM, 1998</li>
<li>Despain, A.M.:<i>"Fourier Transform Computations Using CORDIC Iterations"</i>,<br />IEEE Transactions on Computers, Volume 23, strany 993-1001, 1974</li>
<li>Mazenc C., Merrheim, X., Muller, J.M.: <i>"Computing Functions Arccos and Arcsin Using CORDIC"</i>,<br />IEEE Transactions on Computers, Volume 42, strany 118-122, 1993</li>
<li>Volder, Jack: <i>"Binary computation algorithms for coordinate rotation and function generation"</i>,<br />Convair Report IAR-1, 1956</li>
<li>Volder, Jack: <i>"The CORDIC Trigonometric Computing Technique"</i>,<br />IRE Transactions on Electronic Computing, Vol EC-8, strany 330-334, 1959</li>
<li>NVIDIA Corporation: <i>"Floating-Point Specials on the GPU"</i>,<br />2005</li>
<li>Grant R. Griffin: <i>CORDIC FAQ</i>,<br />
<a href="http://www.dspguru.com/info/faqs/cordic.htm">http://www.dspguru.com/info/faqs/cordic.htm</a></li>
<li>Andraka Consulting Group, Inc.: <i>What is all this CORDIC stuff anyhow?</i>,<br />
<a href="http://www.andraka.com/cordic.htm">http://www.andraka.com/cordic.htm</a></li>
<li>Cyliax Ingo: <i>CORDIC (COordinate Rotation DIgital Computer), the swiss army knife for computing math functions...</i><br />
<a href="http://www.ee.ualberta.ca/courses/ee401/microboard/cordic_CCink.html">http://www.ee.ualberta.ca/courses/ee401/microboard/cordic_CCink.html</a></li>

</ol>



<p><a name="k07"></a></p>
<h1>7. Obsah dalšího pokračování tohoto seriálu</h1>

<p>V&nbsp;následujícím pokračování tohoto seriálu si ukážeme, jakým způsobem je
možné použít algoritmus CORDIC pro výpočet dalších matematických funkcí,
například vyjádření hodnoty arkustangenty, převodu bodu či vektoru
z&nbsp;kartézských souřadnic do souřadnic polárních, výpočet délky zadaného
vektoru atd.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2006</small></p>
</body>
</html>

