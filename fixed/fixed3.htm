<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Výpočty v systému pevné řádové čárky III</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Výpočty v systému pevné řádové čárky III - aritmetické operace s hodnotami uloženými ve formátu plovoucí řádové čárky</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části seriálu věnovaného matematickým výpočtům prováděným s číselnými hodnotami uloženými ve formátu pevné i plovoucí řádové binární čárky bude popsán způsob provádění základních aritmetických operací s formáty plovoucí čárky podle normy IEEE 754. Také si ukážeme implementaci výpočtů složitějších funkcí, například druhé odmocniny, goniometrických funkcí apod. Nezapomeneme ani na velmi významný algoritmus CORDIC, který byl použit i v některých matematických koprocesorech.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Operace prováděné s&nbsp;hodnotami v&nbsp;FP reprezentaci podle normy IEEE 754</a><br />
<a href="#k02">2. Součet a rozdíl dvou FP hodnot</a><br />
<a href="#k03">3. Součin dvou FP hodnot</a><br />
<a href="#k04">4. Podíl dvou FP hodnot</a><br />
<a href="#k05">5. Iterační výpočet druhé odmocniny</a><br />
<a href="#k06">6. Demonstrační příklad na výpočet druhé odmocniny</a><br />
<a href="#k07">7. Goniometrické funkce počítané pomocí číselných řad</a><br />
<a href="#k08">8. Úvodní informace o iteračním algoritmu CORDIC</a><br />
<a href="#k09">9. Obsah dalšího pokračování tohoto seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Operace prováděné s&nbsp;hodnotami v&nbsp;FP reprezentaci podle normy IEEE 754</h1>

<p>V&nbsp;předchozích dvou pokračováních tohoto seriálu jsme si podrobně
popsali formáty uložení číselných hodnot definovaných normou IEEE 754. Jednalo
se o formát jednoduché přesnosti (<strong>single</strong>), dvojité přesnosti
(<strong>double</strong>) a konečně o rozšířený formát
(<strong>temporary/extended</strong>), který je implementován zejména
v&nbsp;matematických koprocesorech firmy Intel řady i87 a samozřejmě také
v&nbsp;kompatibilních koprocesorech (AMD apod.). Dnešní část začneme popisem
provádění základních aritmetických operací, tj.&nbsp;operací sčítání a odčítání
(<a href="#k02">kapitola druhá</a>), násobení (<a href="#k03">třetí
kapitola</a>) a dělení (<a href="#k04">čtvrtá kapitola</a>). Po popisu těchto
operací si v&nbsp;<a href="#k05">páté</a> a <a href="#k06">šesté</a> kapitole
řekneme, jakým způsobem je možné implementovat výpočet druhé odmocniny kladných
reálných čísel. V&nbsp;<a href="#k07">sedmé kapitole</a> bude popsán princip
výpočtů goniometrických funkcí pomocí součtu členů číselných řad a nakonec si
v&nbsp;<a href="#k08">osmé kapitole</a> přiblížíme principy fungování algoritmu
<strong>CORDIC</strong>, pomocí nějž je možné zjednodušit, urychlit a/nebo
zpřesnit výpočty složitějších matematických funkcí, zejména funkcí
goniometrických.</p>



<p><a name="k02"></a></p>
<h1>2. Součet a rozdíl dvou FP hodnot</h1>

<p>Při sečítání dvou hodnot uložených ve formátu pohyblivé řádové binární čárky
podle normy IEEE 754 (může se přitom jednat o libovolný formát popsaný
v&nbsp;předchozí části tohoto seriálu, zejména však o formát jednoduché a
dvojité přesnosti) by se mělo postupovat podle následujícího algoritmu:</p>

<ol>

<li>Nejprve je zjištěno, zda se sečítání či odečítání neprovádí se speciálními
hodnotami, tj.&nbsp;s&nbsp;hodnotou <strong>NaN</strong> (not a number) či
s&nbsp;nekonečny. Výsledek součtu či rozdílu provedeného se speciálními
hodnotami je uveden v&nbsp;první tabulce (pod popisem algoritmu).</li>

<li>Poté je provedeno nalezení většího z&nbsp;obou sečítaných čísel.
Porovnávají se však pouze hodnoty exponentů, nikoli mantis (zde se ukazuje
výhodnost použití exponentů posunutých o <i>bias</i>, neboť při jejich
porovnávání nemusíme brát do úvahy znaménko). Pokud mají obě sčítaná či
odečítaná čísla stejné exponenty, přeskočí se následující bod.</li>

<li>Dále se vypočítá číselný rozdíl exponentů,
tj.&nbsp;<i>diff=e<sub>1</sub>-e<sub>2</sub></i>. Mantisu menšího čísla je
nutné posunout doprava o tolik bitů, kolik činí rozdíl exponentů (samozřejmě po
vydělení rozdílu hodnotou 2<sup>n</sup>, ve skutečnosti se pouze porovnávají
exponenty bez zbytečného převodu na jejich reálnou hodnotu). Bitový posun
mantisy odpovídá násobení či dělení dané hodnoty mocninou čísla 2, stejně tak
zvýšení či snížení hodnoty exponentu. Pro jiné báze (radixy) to však
neplatí.</li>

<li>Podle znaménkových bitů obou operandů je vyčíslen buď součet nebo rozdíl
jejich mantis. Zde se jedná o "klasický" součet pomocí vícebitové sčítačky
s&nbsp;postupným či zrychleným přenosem. Při odečítání je nutné vzít
v&nbsp;úvahu, že se <strong>nejedná</strong> o čísla uložená ve dvojkovém
doplňku, tj.&nbsp;odečítání je poněkud složitější než v&nbsp;případě příště
popsaných numerických hodnot uložených v&nbsp;FX formátu.</li>

<li>Pokud hodnota výsledku přeteče (tj.&nbsp;výsledek se nevleze do počtu bitů
mantisy), posunou se bity v&nbsp;mantise doprava o jeden bit a exponent se
zvýší o jedničku. Z&nbsp;toho vyplývá, že součet je nutné provádět na sčítačce
minimálně o jeden bit širší, než je bitová šířka mantisy (postačí přenos
CARRY).</li>

<li>V&nbsp;případě, že mantisa nemá nastaven nejvyšší bit na jedničku, posouvá
se (i několikrát) doleva a exponent se přitom snižuje. To je takzvaná
<strong>normalizace</strong>, která zajistí, že nejvyšší bit mantisy je vždy
jedničkový a tudíž nemusí být v&nbsp;mantise uložen &ndash; to platí zejména
pro formáty <i>single</i> a <i>double</i>, u formátu <i>temporary</i> je
nejvyšší bit mantisy uložen v&nbsp;bitu číslo 63.</li>

<li>Dále se musí vyjádřit znaménko výsledku: v&nbsp;případě FPU sčítání se
jednoduše zkopíruje znaménko většího čísla, u odečítání se musí vzít
v&nbsp;úvahu i pozice čísla v&nbsp;operaci, tj.&nbsp;zda se jedná o menšenec či
menšitel.</li>

<li>Po vyčíslení znaménka se provede <strong>zaokrouhlení</strong> hodnoty
podle právě nastaveného zaokrouhlovacího režimu. V&nbsp;normě jsou
specifikovány čtyři způsoby zaokrouhlení (tzv.&nbsp;<strong>rounding
modes</strong>): zaokrouhlení směrem k&nbsp;nule, zaokrouhlení směrem ke
kladnému nekonečnu, zaokrouhlení směrem k&nbsp;zápornému nekonečnu a konečně
zaokrouhlení k&nbsp;nejbližšímu sudému reprezentovatelnému číslu (pojmenování
posledního zaokrouhlovacího režimu není přesné, protože rozhodnutí, zda se
jedná o sudé číslo, je zapotřebí provést pouze pro hraniční hodnoty).</li>

<li>Pokud během výpočtu dojde k&nbsp;tomu, že exponent dosáhne své maximální
hodnoty, dojde k&nbsp;<strong>přetečení</strong> výsledku. To již není možné
nijak obejít, pouze zvýšením přesnosti a/nebo rozsahu, tj.&nbsp;volbou jiného
FP formátu. V&nbsp;každém případě je při přetečení jako výsledek operace
sčítání či odečítání vráceno kladné nebo záporné nekonečno, podle samostatně
vypočítaného znaménka.</li>

<li>Pokud naopak hodnota exponentu dosáhne své minimální hodnoty, dochází
k&nbsp;<strong>podtečení</strong>. Při něm se buď generuje výjimka, nebo se
hodnota výsledku nastaví na kladnou či zápornou nulu, opět podle samostatně
vypočítaného znaménka výsledku.</li>

</ol>

<p>Kvůli přetékání, podtékání a zaokrouhlování hodnot během sečítání/odečítání
přestávají platit některá matematická pravidla, například
<strong>A+B-A==B</strong> či <strong>(A+B)+C=A+(B+C)</strong> a naopak začínají
platit pravidla nová, třeba při reálném programování velmi nebezpečné a záludné
<strong>A+B=A</strong> (platí samozřejmě pouze pro některé hodnoty
<strong>A</strong> a <strong>B</strong>). V&nbsp;prvním bodu algoritmu pro
součet či rozdíl dvou FP hodnot je zjišťováno, zda se výpočet neprovádí se
speciálními hodnotami. Výsledek operace v&nbsp;případě použití speciálních
hodnot je ukázán v&nbsp;následující tabulce:</p>

<table>
<tr><th>Hodnota X</th><th>Hodnota Y</th><th>Výsledek operace X+Y</th></tr>
<tr><td>konečná</td><td>+&infin;</td><td>+&infin;</td></tr>
<tr><td>konečná</td><td>-&infin;</td><td>-&infin;</td></tr>
<tr><td>+&infin;</td><td>konečná</td><td>+&infin;</td></tr>
<tr><td>-&infin;</td><td>konečná</td><td>-&infin;</td></tr>
<tr><td>+&infin;</td><td>+&infin;</td><td>+&infin;</td></tr>
<tr><td>-&infin;</td><td>-&infin;</td><td>-&infin;</td></tr>
<tr><td>+&infin;</td><td>-&infin;</td><td>NaN</td></tr>
<tr><td>-&infin;</td><td>+&infin;</td><td>NaN</td></tr>
<tr><td>NaN</td><td>libovolná</td><td>NaN</td></tr>
<tr><td>libovolná</td><td>NaN</td><td>NaN</td></tr>
</table>



<p><a name="k03"></a></p>
<h1>3. Součin dvou FP hodnot</h1>

<p>Součin dvou numerických hodnot uložených ve formátu plovoucí řádové čárky je
opět &ndash; vzhledem k&nbsp;rozdělení hodnot na mantisu a exponent &ndash;
komplikovanější, než prosté poslání obsahů dvou registrů do násobičky. Nejprve
si teoreticky ukažme, jakým způsobem se vynásobí dvě hodnoty reprezentované
svou mantisou a exponentem. Vstupními hodnotami jsou čísla <i>x<sub>1</sub></i>
a <i>x<sub>2</sub></i>:</p>

<p>
<i>x<sub>1</sub>=(-1)<sup>s1</sup>&nbsp;&times;&nbsp;2<sup>e1</sup>&nbsp;&times;&nbsp;m<sub>1</sub></i><br />
<i>x<sub>2</sub>=(-1)<sup>s2</sup>&nbsp;&times;&nbsp;2<sup>e2</sup>&nbsp;&times;&nbsp;m<sub>2</sub></i><br />
</p>

<p>Součin těchto hodnot můžeme vyjádřit vzorcem:</p>

<p>
<i>x<sub>1</sub>x<sub>2</sub>=(-1)<sup>s1</sup>&times;(-1)<sup>s2</sup>&nbsp;&times;&nbsp;2<sup>e1+e2</sup>&nbsp;&times;&nbsp;m<sub>1</sub>&times;m<sub>2</sub></i>
</p>

<p>Prakticky to znamená, že (pokud nebudeme uvažovat nutnou normalizaci a
zaokrouhlení výsledků) se mantisy obou hodnot navzájem vynásobí a exponenty se
sečtou. Nejjednodušší je operace se znaménkovými bity &ndash; na ně se aplikuje
bitová operace nonekvivalence (<strong>XOR:</strong>&oplus;). Vzhledem
k&nbsp;tomu, že se musíme v&nbsp;co největší míře vyhnout přetečení, podtečení
a denormalizaci hodnot, je násobení dvou FP hodnot složitější a provádí se
následujícím postupem:</p>

<ol>

<li>Podobně jako u operace sečítání či odečítání, i při násobení je nejprve
zjištěno, zda do operace nevstupují speciální hodnoty. S&nbsp;těmi je zacházeno
tak, jak ukazuje druhá tabulka (umístěná pod popisem algoritmu).</li>

<li>Exponent výsledku se rovná součtu obou exponentů, tj.&nbsp;provede se
operace <i>e=e<sub>1</sub>+e<sub>2</sub></i>. Od tohoto výsledku je nutné
odečíst posun exponentů (<strong>bias</strong>), a to z&nbsp;toho důvodu, že
v&nbsp;mantise jsou uloženy hodnoty s&nbsp;binární čárkou umístěnou za prvním
bitem a prostým vynásobením mantis by vlastně vznikl výsledek posunutý o
několik (binárních) řádů směrem doleva.</li>

<li>Výsledná mantisa vznikne součinem obou mantis, tj.&nbsp;provede se operace
<i>m=m<sub>1</sub>&times;m<sub>2</sub></i>.</li>

<li>Pokud výsledná mantisa přeteče, je bitově posunuta doprava o
<strong>n</strong> bitů a exponent je o tuto hodnotu <strong>n</strong>
zvýšen.</li>

<li>Když nemá mantisa nejvyšší bit roven 1, posouvá se doleva a exponent se
naopak snižuje (<strong>normalizace</strong>). Tato operace se může provádět i
několikrát.</li>

<li>Pokud se po součtu exponentů překročí maximální hodnota (dojde
k&nbsp;<strong>přetečení</strong>), je výsledkem nekonečno (kladné či záporné,
to záleží na znaménkových bitech operandů).</li>

<li>Pokud se po součtu exponentů překročí minimální hodnota (dojde
k&nbsp;<strong>podtečení</strong>), je výsledkem nula (kladná či záporná, opět
záleží na znaménkových bitech obou operandů)</li>

<li>Výsledný znaménkový bit je vyjádřen nonekvivalencí obou znaménkových bitů,
tj.&nbsp;s=s<sub>1</sub> &oplus; s<sub>2</sub>.</li>

<li>Po vyčíslení znaménka se provede <strong>zaokrouhlení</strong> hodnoty
podle právě nastaveného zaokrouhlovacího režimu.</li>

</ol>

<table>
<tr><th>Hodnota X</th><th>Hodnota Y</th><th>Výsledek operace X+Y</th></tr>
<tr><td>nenulová kladná </td><td>+&infin;</td><td>+&infin;</td></tr>
<tr><td>nenulová kladná </td><td>-&infin;</td><td>-&infin;</td></tr>
<tr><td>nenulová záporná</td><td>+&infin;</td><td>-&infin;</td></tr>
<tr><td>nenulová záporná</td><td>-&infin;</td><td>+&infin;</td></tr>
<tr><td>nula (0,0) </td><td>+&infin;</td><td>NaN</td></tr>
<tr><td>nula (0,0) </td><td>-&infin;</td><td>NaN</td></tr>
<tr><td>+&infin;</td><td>nenulová kladná </td><td>+&infin;</td></tr>
<tr><td>-&infin;</td><td>nenulová kladná </td><td>-&infin;</td></tr>
<tr><td>+&infin;</td><td>nenulová záporná</td><td>-&infin;</td></tr>
<tr><td>-&infin;</td><td>nenulová záporná</td><td>+&infin;</td></tr>
<tr><td>+&infin;</td><td>nula (0,0) </td><td>NaN</td></tr>
<tr><td>-&infin;</td><td>nula (0,0) </td><td>NaN</td></tr>
<tr><td>+&infin;</td><td>+&infin;</td><td>+&infin;</td></tr>
<tr><td>+&infin;</td><td>-&infin;</td><td>-&infin;</td></tr>
<tr><td>-&infin;</td><td>+&infin;</td><td>-&infin;</td></tr>
<tr><td>-&infin;</td><td>-&infin;</td><td>+&infin;</td></tr>
<tr><td>NaN</td><td>libovolná</td><td>NaN</td></tr>
<tr><td>libovolná</td><td>NaN</td><td>NaN</td></tr>
</table>


<p><a name="k04"></a></p>
<h1>4. Podíl dvou FP hodnot</h1>

<p>Při výpočtu podílu dvou FP hodnot se využívá následující vztah:</p>

<p>
<i>x<sub>1</sub>/x<sub>2</sub>=(-1)<sup>s1</sup>&times;(-1)<sup>s2</sup>&nbsp;&times;&nbsp;2<sup>e1-e2</sup>&nbsp;&times;&nbsp;m<sub>1</sub>/m<sub>2</sub></i>
</p>

<p>Vlastní vydělení se může provádět buď jako samostatná operace (tak to činí
dnešní FPU), která vyžaduje děličku, nebo je &ndash; v&nbsp;případě nutnosti
šetření logickými obvody &ndash; možné použít postupné odečítání dělitele od
dělence (algoritmus známý ze základních škol). Třetí možností, kterou
implementují některé FPU a GPU, je výpočet převrácené hodnoty dělitele pomocí
specializovaných postupů a následné vynásobení dělence převrácenou hodnotou
dělitele. Všechny tři postupy však musí zaručit, že se při dělení nulou bude
zachovávat znaménko výsledku (tj.&nbsp;kladné či záporné nekonečno) a také se
zajistí, aby se detekovala nepovolená operace 0/0:</p>

<p>
<i>x/0<sup>+</sup>=+&infin;</i><br />
<i>x/0<sup>-</sup>=-&infin;</i><br />
<i>0/0=NaN</i>
</p>




<p><a name="k05"></a></p>
<h1>5. Iterační výpočet druhé odmocniny</h1>

<p>Výpočet druhé odmocniny je v&nbsp;praxi velmi často používaný, proto je
implementován ve většině FPU či GPU. My si zde ukážeme jednu z&nbsp;možností
implementace, která spočívá v&nbsp;iterativním zpřesňování odhadu výsledku.
Nyní se tedy povězme, jakým způsobem se může iterativní výpočet druhé odmocniny
provádět. Vstupní hodnotou algoritmu je původní číslo <strong>y</strong>,
výstupem je (po <strong>i</strong>-té iteraci) odhad výsledku
<strong>x<sub>i</sub></strong>. V&nbsp;každé iteraci se provádí poměrně
jednoduchá operace:</p>

<p><i>x<sub>i+1</sub>=1/2 (x<sub>i</sub>+y/x<sub>i</sub>)</i></p>

<p>Zbývá pouze nastavit počáteční odhad <i>x<sub>1</sub></i>. Většinou se volí
hodnota <i>x<sub>1</sub>=y/2</i>, protože je ji možné velmi jednoduše spočítat
prostým bitovým posunem mantisy nebo snížením hodnoty exponentu. Přesnější (a
tím pádem i rychlejší, jelikož se provede méně iterací) je však odhad vypočtený
z&nbsp;mantisy a exponentu vstupující hodnoty <i>y</i>:</p>

<p><i>x<sub>1</sub>=m&times;2<sup>e/2</sup></i></p>

<p>tj.&nbsp;hodnota exponentu se sníží na polovinu. Důkaz pro korektnost takto
vytvořeného prvního odhadu je poměrně přímočarý. Vstupní hodnota <i>y</i> může
být rozepsána na mantisu a exponent:</p>

<p><i>y=m&times;2<sup>e</sup></i></p>

<p>Znaménko můžeme ignorovat, protože odmocniny se počítají pouze pro kladné
hodnoty. Prvotní odhad vychází z&nbsp;aplikace odmocniny na výše uvedený
rozepsaný vztah:</p>

<p><i>y<sup>1/2</sup>=m<sup>1/2</sup>&times;2<sup>e/2</sup></i></p>

<p>Hodnotu mantisy je možné (resp.&nbsp;nutné) ignorovat, protože normalizovaná
mantisa představuje hodnoty z&nbsp;intervalu &lt;1, 2-&epsilon;&gt; a tento
interval se aplikací odmocniny nemění.</p>



<p><a name="k06"></a></p>
<h1>6. Demonstrační příklad na výpočet druhé odmocniny</h1>

<p>Pro ilustraci iterativního výpočtu druhé odmocniny a zejména faktu, že
řešení rychle spěje ke korektnímu výsledku, jsem vytvořil demonstrační příklad
v&nbsp;programovacím jazyku C. Po překladu a spuštění tohoto příkladu se
zobrazí tabulka s&nbsp;postupně zpřesňovaným výpočtem druhé odmocniny čísla
10&nbsp;000. Kromě průběžných výsledků je zobrazována i absolutní a relativní
chyba výpočtu. Všimněte si, že již po deseti iteracích klesá relativní chyba
pod setinu procenta (alespoň v&nbsp;rámci dané přesnosti FP formátu), takže
iterační metoda je zvolena vhodně, protože řešení konverguje velmi rychle.</p>

<pre>

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

// tato funkce provede jednu iteraci
// se zlepšeným odhadem výsledku x_i
float sqrt_step(float xi, float y)
{
    return 1.0/2.0*(xi+y/xi);
}

int main(void)
{
    // vstupní hodnota, ze které se počítá odmocnina
    double y=10000;
    // postupně zpřesňovaný odhad výsledku
    double xi=y;
    // hodnota pro porovnání výsledků
    double sqr=sqrt(y);
    // počitadlo iterací
    int i;
    for (i=0; i&lt;20; i++) {
        xi=sqrt_step(xi, y);
        printf("%d\t%11.5f\t%11.5f\t%10.2f%%\n",
                i+1,
                xi,                       // vypočtená hodnota
                fabs(xi-sqr),             // absolutní chyba
                100.0f*fabs(xi-sqr)/sqr); // relativní chyba
    }
    return 0;
}

// finito

</pre>

<pre>

iterace  odhad x_i       absolutní chyba   relativní chyba
1        5000.50000      4900.50000        4900.50%
2        2501.25000      2401.25000        2401.25%
3        1252.62402      1152.62402        1152.62%
4         630.30365       530.30365         530.30%
5         323.08450       223.08450         223.08%
6         177.01808        77.01808          77.02%
7         116.75475        16.75475          16.75%
8         101.20219         1.20219           1.20%
9         100.00714         0.00714           0.01%
10        100.00000         0.00000           0.00%
11        100.00000         0.00000           0.00%
12        100.00000         0.00000           0.00%
13        100.00000         0.00000           0.00%
14        100.00000         0.00000           0.00%
15        100.00000         0.00000           0.00%
16        100.00000         0.00000           0.00%
17        100.00000         0.00000           0.00%
18        100.00000         0.00000           0.00%
19        100.00000         0.00000           0.00%
20        100.00000         0.00000           0.00%

</pre>



<p><a name="k07"></a></p>
<h1>7. Goniometrické funkce počítané pomocí číselných řad</h1>

<p>Goniometrické funkce je možné počítat více způsoby. V&nbsp;další části
tohoto seriálu si ukážeme výpočet goniometrických funkcí pomocí algoritmu
CORDIC, dnes si řekneme, jakým způsobem je možné použít číselné řady. Uvažujme
funkci <i>sin()</i>, která je, jak víme už ze střední školy, funkcí periodickou
s&nbsp;periodou 2&pi; (pro další goniometrické funkce platí podobné vztahy a
závěry, tj.&nbsp;v&nbsp;dalším textu se jimi nebudu zabývat).</p>

<p>Na první pohled to vypadá, že se můžeme omezit pouze na výpočet této funkce
pro vstupní hodnoty z&nbsp;intervalu &lt;0, 2&pi;&gt;. Ve skutečnosti však
můžeme využít velké symetrie této funkce, a to dokonce dvakrát.
V&nbsp;intervalu &lt;&pi;, 2&pi;&gt; je funkce zrcadlově otočena vůči vzoru
z&nbsp;intervalu &lt;0, &pi;&gt;. Kromě toho je funkce na intervalu &lt;0,
&pi;/2&gt; vertikálně symetrická s&nbsp;intervalem &lt;&pi;/2, &pi;&gt;.
Z&nbsp;obou těchto symetrií vyplývá, že je zapotřebí přímým výpočtem zjistit
hodnoty funkce <i>sin()</i> pouze na intervalu &lt;0, &pi;/2&gt;, hodnoty
v&nbsp;ostatních intervalech se dopočítají buď změnou znaménka výsledku, nebo
změnou vstupní hodnoty. Daný interval "kvadrantu" má i další přednost: funkce
<i>sin()</i> je v&nbsp;něm neustále rostoucí bez nežádoucích zákmitů a
lokálních minim či maxim.</p>

<p>Všechny goniometrické funkce je možné na určitém intervalu (typicky
kvadrantu) rozepsat pomocí Taylorova rozvoje. V&nbsp;případě funkce
<i>sin()</i> dostaneme nekonečný rozvoj, který vypadá následovně:</p>

<p><strong>sin(x)=x<sup>1</sup>/1! - x<sup>3</sup>/3! + x<sup>5</sup>/5! - x<sup>7</sup>/7! + ...</strong></p>

<p>Tento rozvoj sice na první pohled vypadá výpočetně velmi náročně, ve
skutečnosti je však zapotřebí poměrně malého množství členů, o čemž nás
přesvědčí následující demonstrační příklad, který pro výpočet funkce
<i>sin()</i> na intervalu &lt;0, &pi;/2&gt; používá pouze první tři nenulové
členy posloupnosti:</p>

<pre>

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

#define EPSILON 10.0e-20

// tato funkce provede výpočet funkce
// sin() pomocí tří nenulových členů
// Taylorova rozvoje
double computeSin(double x)
{
    double t1=x/1.0;
    double t3=x*x*x/6.0;
    double t5=x*x*x*x*x/120.0;
    return t1-t3+t5;
}

int main(void)
{
    // počitadlo iterací
    double alfa;
    for (alfa=0.0; alfa&lt;=M_PI/2.0; alfa+=M_PI/40.0) {
        double sin1=sin(alfa);
        double sin2=computeSin(alfa);
        printf("%5.3f\t%8.6f\t%8.6f\t%8.6f\t%6.2f%%\n",
                alfa,
                sin1,
                sin2,
                fabs(sin2-sin1),
                fabs(sin1)&lt;EPSILON ? 0.0 : 100.0*fabs(sin2-sin1)/sin1);
    }
    return 0;
}

// finito

</pre>

<p>Po překladu a spuštění tohoto příkladu se zobrazí následující tabulka (bez
prvního řádku), s&nbsp;vyčíslenými hodnotami funkce <i>sin()</i> pro 21 úhlů
z&nbsp;prvního kvadrantu. Ve druhém sloupci je výsledek standardní matematické
operace <i>sin()</i>, třetí sloupec obsahuje hodnoty vypočtené pomocí tří členů
Taylorova rozvoje a v&nbsp;posledních dvou sloupcích je spočtena a zobrazena
absolutní a relativní chyba. Všimněte si, že chyba postupně stoupá od prakticky
nulové hodnoty (přesný výsledek) až po cca 0,5%. To je jedna z&nbsp;vlastností
Taylorova rozvoje; při vzdalování se od počáteční hodnoty chyba roste. Pokud by
bylo zapotřebí použít vyšší přesnosti, není nic jednoduššího, než přidat další
jeden či dva členy rozvoje.</p>

<pre>

úhel    sin()           Taylorův rozvoj absolutní chyba   relativní chyba
0.000	0.000000	0.000000	0.000000	  0.00%
0.079	0.078459	0.078459	0.000000	  0.00%
0.157	0.156434	0.156434	0.000000	  0.00%
0.236	0.233445	0.233445	0.000000	  0.00%
0.314	0.309017	0.309017	0.000000	  0.00%
0.393	0.382683	0.382684	0.000000	  0.00%
0.471	0.453990	0.453992	0.000001	  0.00%
0.550	0.522499	0.522502	0.000003	  0.00%
0.628	0.587785	0.587793	0.000008	  0.00%
0.707	0.649448	0.649465	0.000017	  0.00%
0.785	0.707107	0.707143	0.000036	  0.01%
0.864	0.760406	0.760477	0.000071	  0.01%
0.942	0.809017	0.809146	0.000129	  0.02%
1.021	0.852640	0.852866	0.000226	  0.03%
1.100	0.891007	0.891386	0.000379	  0.04%
1.178	0.923880	0.924493	0.000613	  0.07%
1.257	0.951057	0.952017	0.000961	  0.10%
1.335	0.972370	0.973834	0.001464	  0.15%
1.414	0.987688	0.989867	0.002178	  0.22%
1.492	0.996917	1.000088	0.003170	  0.32%
1.571	1.000000	1.004525	0.004525	  0.45%

</pre>



<p><a name="k08"></a></p>
<h1>8. Uvodní informace o iteračním algoritmu CORDIC</h1>

<p><strong>CORDIC</strong> neboli <i><strong>CO</strong>ordinate
<strong>RO</strong>tation <strong>DI</strong>gital
<strong>C</strong>omputer</i> je výpočetní metoda používající specializovaný
iterativní algoritmus, který slouží v&nbsp;první řadě k&nbsp;výpočtu
trigonometrických funkcí s&nbsp;předem známou přesností, tj.&nbsp;<i>sin()</i>,
<i>cos()</i>, <i>tan()</i> atd. Po malých úpravách je možné tento algoritmus
využít i pro další výpočty, například fáze (úhlu) a velikosti komplexních
čísel, vyčíslení logaritmických funkcí, hyperbolických funkcí (<i>sinh()</i>,
<i>cosh()</i>, <i>tanh()</i>) atd. Jednou ze základních vlastností metody
CORDIC, která se snad nejvíce v&nbsp;minulosti postarala o jeho velké
rozšíření, je jednoduchost operací, které se v&nbsp;každé iteraci provádí
&ndash; používá se pouze sečítání, odečítání a bitové posuny, žádné další
operace nejsou zapotřebí; dokonce není ani nutné implementovat násobičku
(přesněji řečeno, u některých "odvozených" funkcí, například <i>tan()</i> je
zapotřebí dělička k&nbsp;vydělení vypočtených hodnot <i>sin()</i> a
<i>cos()</i>). Díky této vlastnosti bylo možné CORDIC využít i ve velmi
omezených zařízeních, například kalkulačkách či osmibitových mikrořadičích
(omezením zde mám na mysli relativně malý počet logických členů). Podrobnější
informace o této velmi zajímavé metodě budou uvedeny v&nbsp;následujícím
pokračování seriálu.</p>



<p><a name="k09"></a></p>
<h1>9. Obsah dalšího pokračování tohoto seriálu</h1>

<p>Ve čtvrté části tohoto seriálu dokončíme tři díly věnované numerickým
formátům, které používají plovoucí řádovou čárku. Podrobněji si popíšeme
princip algoritmu CORDIC, který je implementován v&nbsp;mnoha digitálních
zařízeních, včetně kalkulaček, digitálních signálových procesorů a
specializovaných obvodů vytvořených například v&nbsp;FPGA.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2006</small></p>
</body>
</html>

