<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Výpočty v systému pevné řádové tečky II</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=iso-8859-2" />
<style type="text/css">
         body {color:#000000; background:#ffffff; font-family: arial, helvetica, sans-serif;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Výpočty v systému pevné řádové tečky II - IEEE 754 a její příbuzenstvo: formáty plovoucí řádové tečky</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části seriálu věnovaného matematickým výpočtům s numerickými hodnotami uloženými ve formátu pevné a pohyblivé řádové binární tečky si podrobněji popíšeme standardní formáty popsané v normě IEEE 754. Kromě toho se zmíníme o dalších FP formátech, například formátu Minifloat, Microfloat, Borlandském datovém typu real a také o formátu používaném na možná nejúspěšnějším osmibitovém domácím počítači: ZX Spectru.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Formáty plovoucí řádové tečky podle normy IEEE 754</a><br />
<a href="#k02">2. Základní formát single dle normy IEEE 754</a><br />
<a href="#k03">3. Základní formát double dle normy IEEE 754</a><br />
<a href="#k04">4. Rozšířený formát extended/temporary</a><br />
<a href="#k05">5. Plovoucí řádová čárka na ZX Spectru</a><br />
<a href="#k06">6. FP formát firmy Borland: real</a><br />
<a href="#k07">7. FP formát Minifloat</a><br />
<a href="#k08">8. FP formát Microfloat</a><br />
<a href="#k09">9. Obsah třetího pokračování tohoto seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Formáty plovoucí řádové tečky podle normy IEEE 754</h1>

<p>V&nbsp;předchozí části tohoto seriálu jsme si uvedli některé základní
rozdíly mezi formáty pevné řádové binární tečky (<strong>FX &ndash; Fixed
Point</strong>) a pohyblivé řádové binární tečky (<strong>FP &ndash; Floating
Point</strong>), včetně vyjmenování předností a záporů obou těchto formátů.
Dnes si podrobněji popíšeme některé často používané formáty pohyblivé řádové
tečky, z&nbsp;nichž některé jsou implementovány buď v&nbsp;matematických
koprocesorech (<i>FPU &ndash; Floating Point Unit</i>), nebo ve
specializovanějších číslicových obvodech, například na grafickém akcelerátoru
v&nbsp;<i>GPU</i> (<i>Graphics Processing Unit</i>) či v&nbsp;signálových
procesorech (<i>DSP &ndash; Digital Signal Processor</i>). Při práci
s&nbsp;formáty plovoucí řádové tečky dříve či později narazíme na mezinárodní
normu <strong>IEEE 754</strong>, ve které jsou standardizovány dva základní FP
formáty a dále jsou zde uvedeny možnosti rozšiřování těchto formátů pro
dosažení větší přesnosti a/nebo rozsahu zpracovávaných hodnot. Alespoň základní
znalost normy IEEE 754 nám umožní pochopit limity FP formátů a důvody, které
nás mohou v&nbsp;některých případech vést k&nbsp;volbě FX formátů.</p>

<p>V&nbsp;normě IEEE 754 (která je mimochodem v&nbsp;platnosti již od roku
1985) jsou specifikovány nejenom vlastní formáty uložení numerických hodnot
v&nbsp;systému pohyblivé řádové tečky (FP formátu), ale i pravidla implementace
aritmetických operací s&nbsp;těmito hodnotami, včetně některých konverzí.
Konkrétně je v&nbsp;této normě, jak již víme z&nbsp;první části seriálu,
popsáno:</p>

<ol>
<li>Základní (<i>basic</i>) a rozšířený (<i>extended</i>) formát uložení numerických hodnot.</li>
<li>Způsob provádění základních matematických operací:
    <ul>
    <li>součet</li>
    <li>rozdíl</li>
    <li>součin</li>
    <li>podíl</li>
    <li>zbytek po dělení</li>
    <li>druhá odmocnina</li>
    <li>porovnání</li>
    </ul></li>
<li>Pravidla konverze mezi celočíselnými formáty (<i>integer</i>) a formáty s&nbsp;plovoucí řádovou tečkou.</li>
<li>Způsob konverze mezi různými formáty s&nbsp;plovoucí řádovou tečkou (<i>single</i> &rarr; <i>double</i> atd.).</li>
<li>Způsob konverze základního formátu s&nbsp;plovoucí řádovou tečkou na řetězec číslic (včetně nekonečen a nečíselných hodnot).</li>
<li>Práce s&nbsp;hodnotami NaN (<i>not a number</i>) a výjimkami.</li>
</ol>

<p>Základní a rozšířené formáty pro uložení numerických hodnot podle normy IEEE
754 budou popsány ve <a href="#k02">druhé</a>, <a href="#k03">třetí</a> a <a
href="#k04">čtvrté kapitole</a>, zde si však uveďme podstatu reprezentace
těchto hodnot a způsob provádění základních i pokročilejších matematických
operací. Vybraná podmnožina racionálních čísel může být vyjádřena vztahem:</p>

<p><strong>X<sub>FP</sub>=(-1)<sup>s</sup>&nbsp;&times;&nbsp;2<sup>exp-bias</sup>&nbsp;&times;&nbsp;m</strong></p>

<p>kde:</p>

<ul>

<li><strong>X<sub>FP</sub></strong> značí reprezentovanou numerickou hodnotu
z&nbsp;podmnožiny racionálních čísel (ta je zase podmnožinou čísel reálných).
Díky vyhrazeným (speciálním) hodnotám je možné rozlišit kladnou a zápornou nulu
i kladné a záporné nekonečno. Také se může uložit nečíselná hodnota: <i>NaN
&ndash; (Not a Number)</i>, která je výsledkem některých matematicky
nedefinovaných operací, například 0/0 nebo 0<sup>0</sup>.</li>

<li><strong>2</strong> je <i>báze</i>, někdy také nazývaná <i>radix</i>, u IEEE
754 je to vždy dvojka, protože výpočty s&nbsp;bází dvě jsou pro číslicové
obvody nejjednodušší. V&nbsp;minulosti se používaly i jiné báze, například 8,
16 nebo i 10.</li>

<li><strong>exp</strong> je vždy kladná hodnota exponentu posunutého o hodnotu
<strong>bias</strong></li>

<li><strong>bias</strong> je hodnota, díky které je uložený exponent vždy
kladný. Tato hodnota se většinou volí dle vztahu:
<i>bias=2<sup>eb-1</sup>-1</i>, kde <i>eb</i> je počet bitů vyhrazených pro
exponent. Pro specifické účely je však možné zvolit i jinou hodnotu.</li>

<li><strong>m</strong> je mantisa, která je u formátů IEEE 754 vždy kladná</li>

<li><strong>s</strong> je znaménkový bit nabývající hodnoty 0 nebo 1. Pokud je
tento bit nulový, je reprezentovaná hodnota <strong>X<sub>FP</sub></strong>
kladná, v&nbsp;opačném případě se jedná o zápornou hodnotu. Vzhledem
k&nbsp;tomu, že je jeden bit vyhrazen na uložení znaménka, je možné rozlišit
kladnou a zápornou nulu.</li>

</ul>

<p>Podle bitové šířky čísel <strong>exp</strong>, <strong>bias</strong> a
<strong>m</strong> se rozlišují základní a rozšířené formáty FP čísel; norma
IEEE 754 přitom explicitně zmiňuje dva základní formáty: jednoduchá přesnost
(<a href="#k02">druhá kapitola</a>) a dvojitá přesnost (<a href="#k03">třetí
kapitola</a>). V&nbsp;těchto kapitolách se také zmíníme o normalizovaných,
nenormalizovaných a denormalizovaných číselných hodnotách.</p>



<p><a name="k02"></a></p>
<h1>2. Základní formát single dle normy IEEE 754</h1>

<p>Prakticky všechny v&nbsp;dnešní době používané matematické koprocesory
(<i>FPU</i>), programovatelné grafické procesory (<i>GPU</i>) nebo systémové i
aplikační knihovny, které pracují s&nbsp;číselnými hodnotami uloženými ve
formátu pohyblivé řádové binární tečky, podporují formát <strong>jednoduché
přesnosti</strong>, který také bývá nazýván <strong>single</strong>;
v&nbsp;některých programovacích jazycích (včetně stále populárního Céčka a
neméně populární Javy) pak <strong>float</strong>. Tento formát je
charakteristický tím, že se pro uložení numerické hodnoty používá třiceti dvou
bitů (4 byty), což pro mnoho aplikací představuje dobrý poměr mezi rozsahem
hodnot, přesností a nároky na úložný prostor, nehledě na to, že mnoho
architektur používá 32 bitové sběrnice. Oněch 32 bitů je rozděleno do třech
částí. V&nbsp;první části (představované nejvyšším bitem) je uloženo znaménko,
následuje osm bitů pro uložení posunutého exponentu a za nimi je zbývajících 23
bitů, které slouží pro uložení mantisy. Celé třiceti dvoubitové slovo s&nbsp;FP
hodnotou tedy vypadá následovně:</p>

<table>
<tr><th>bit</th><td>31</td><td>30 &nbsp; 29 ... 24 &nbsp; 23</td><td>22 &nbsp; 21 ... 3 &nbsp; 2 &nbsp; 1 &nbsp; 0</td></tr>
<tr><th>význam</th><td>s</td><td>exponent (8 bitů)</td><td>mantisa (23 bitů)</td></tr>
</table>

<p>Exponent je přitom posunutý o hodnotu <strong>bias</strong>, která je
nastavena na 127, protože je použit výše uvedený vztah:</p>

<p><i>bias=2<sup>eb-1</sup>-1</i></p>

<p>a po dosazení <i>eb=8 (bitů)</i> dostaneme:</p>

<p><i>bias=2<sup>8-1</sup>-1=2<sup>7</sup>-1=128-1=</i><strong>127</strong></p>

<p>Vzorec pro vyjádření reálné hodnoty vypadá následovně:</p>

<p><i>X<sub>single</sub>=(-1)<sup>s</sup>&nbsp;&times;&nbsp;2<sup>exp-127</sup>&nbsp;&times;&nbsp;m</i></p>

<p>Uložení znaménka číselné hodnoty je jednoduché: pokud je znaménkový bit
nastavený na jedničku, jedná se o zápornou hodnotu, v&nbsp;opačném případě jde
o hodnotu kladnou. Exponent je uložený v&nbsp;takzvané <strong>posunuté
formě</strong>, tj.&nbsp;jako binárně zakódované celé číslo v&nbsp;rozsahu
0..255. Po vyjádření neposunutého exponentu dostáváme rozsah -127..128, obě
krajní hodnoty jsou však použity pro speciální účely, proto dostáváme rozsah
exponentů -126..127 pro normalizovaná čísla (krajními hodnotami jsou takové
exponenty, které mají všechny bity buď jedničkové nebo naopak nulové). Ještě si
však musíme říci, jakým způsobem je uložena mantisa. Ta je totiž většinou (až
na velmi malá čísla) <strong>normalizovaná</strong>, což znamená, že se do
mantisy ukládají pouze hodnoty v&nbsp;rozsahu &lt;1,0;2,0-&epsilon;&gt;.
Vzhledem k&nbsp;tomu, že první bit umístěný před binární tečkou je u tohoto
rozsahu vždy nastavený na jedničku, není ho zapotřebí ukládat, což znamená, že
ušetříme jeden bit z&nbsp;třiceti dvoubitového slova. Pro normalizované hodnoty
platí následující vztah:</p>

<p><i>X<sub>single</sub>=(-1)<sup>s</sup>&nbsp;&times;&nbsp;2<sup>exp-127</sup>(1.M)<sub>2</sub></i></p>

<p>kde <strong>M</strong> je hodnota bitového vektoru mantisy, tj.:</p>

<p><i>M=m<sub>22</sub><sup>-1</sup>+m<sub>21</sub><sup>-2</sup>+m<sub>20</sub><sup>-3</sup>+...+m<sub>1</sub><sup>-22</sup>+m<sub>0</sub><sup>-23</sup></i></p>

<p>Rozsah hodnot, jež je možné reprezentovat pomocí jednoduché přesnosti
v&nbsp;normalizovaném tvaru je -3,4&times;10<sup>38</sup> až
3,4&times;10<sup>38</sup>. Nejnižší reprezentovatelná (normalizovaná) hodnota
je rovna 1,17549&times;10<sup>-38</sup>, denormalizovaná pak
1,40129&times;10<sup>-45</sup>. Jak jsme k&nbsp;těmto hodnotám došli? Zkuste se
podívat na následující vztahy:</p>

<table border="0">
<tr><th>hexadecimální hodnota</th><th>výpočet FP</th><th>dekadický výsledek</th><th>normalizováno</th></tr>
<tr><td>0x00000001 </td><td>2<sup>-126</sup>&times;2<sup>-23</sup></td><td>1,40129&times;10<sup>-45</sup></td><td>ne</td></tr>
<tr><td>0x00800000 </td><td>2<sup>-126</sup></td><td>1,17549&times;10<sup>-38</sup></td><td>ano</td></tr>
<tr><td>0x7F7FFFFF </td><td>(2-2<sup>-23</sup>)&times;2<sup>127</sup></td><td>3,4&times;10<sup>38</sup></td><td>ano</td></tr>
</table>

<p>Tyto hodnoty jsou pro provádění některých výpočtů, například pro porovnávání
FP hodnot, velmi užitečné, proto je například v&nbsp;programovacím jazyku C
možné použít následující konstanty umístěné v&nbsp;normou popsaném hlavičkovém
souboru:</p>

<pre>

#define FLT_MIN      1.17549435E-38F
#define FLT_MAX      3.40282347E+38F
#define FLT_EPSILON  1.19209290E-07F

</pre>

<p>Ještě si musíme vysvětlit význam těch exponentů, které mají minimální a
maximální hodnotu, tj.&nbsp;jsou buď nulové, nebo mají hodnotu 255 (obě
samozřejmě před posunem). Vše je přehledně uvedeno v&nbsp;následující
tabulce:</p>

<table>
<tr><th>s-bit</th><th>exponent</th><th>mantisa</th><th>význam</th><th>šestnáctkově</th></tr>
<tr><td>0</td><td>0&lt;e&lt;255</td><td>&gt;0</td><td>normalizované kladné číslo</td></tr>
<tr><td>1</td><td>0&lt;e&lt;255</td><td>&gt;0</td><td>normalizované záporné číslo</td></tr>
<tr><td>0</td><td>0</td><td>&gt;0</td><td>denormalizované kladné číslo</td></tr>
<tr><td>1</td><td>0</td><td>&gt;0</td><td>denormalizované záporné číslo</td></tr>
<tr><td>0</td><td>0</td><td>0</td><td>kladná nula</td><td>0x00000000</td></tr>
<tr><td>1</td><td>0</td><td>0</td><td>záporná nula</td><td>0x80000000</td></tr>
<tr><td>0</td><td>255</td><td>0</td><td>kladné nekonečno</td><td>0x7F800000</td></tr>
<tr><td>1</td><td>255</td><td>0</td><td>záporné nekonečno</td><td>0xFF800000</td></tr>
<tr><td>0</td><td>255</td><td>&gt;0</td><td>NaN &ndash; not a number</td></tr>
<tr><td>1</td><td>255</td><td>&gt;0</td><td>NaN &ndash; not a number</td></tr>
</table>

<p><strong>Denormalizovaná čísla</strong> jsou takové hodnoty, u kterých není
první (explicitně nevyjádřený) bit mantisy roven jedničce, ale naopak nule.
Výpočty s&nbsp;těmito velmi malými hodnotami nejsou přesné, zejména při
násobení a dělení. Při ukládání denormalizovaných čísel je exponent vždy
nastaven na nejnižší hodnotu, tj.&nbsp;-126 a nejvyšší (explicitně neukládaný)
bit mantisy je nulový, nikoli jedničkový, jak je tomu u normalizovaných hodnot.
Hodnota typu <strong>NaN</strong> vznikne v&nbsp;případě, že je použita operace
s&nbsp;nejasným výsledkem, například 0/0, 0<sup>0</sup> nebo, a to v&nbsp;praxi
snad nejčastěji, při odmocňování záporných čísel. Nekonečná hodnota vzniká
typicky při dělení nulou (zde je možné zjistit znaménko), nebo při vyjádření
funkcí typu <i>log(0)</i> atd.</p>

<p>Pro ilustraci uložení FP hodnot v&nbsp;třiceti dvoubitovém slově je možné
přeložit a spustit následující demonstrační program, který vypíše
hexadecimální, bitovou a také rozloženou formu zadaných FP čísel. Pro
programátory, kteří s&nbsp;céčkem nepracují, může být zajímavé použití dvojího
operátoru <strong>!!</strong> (dvojitá negace), který slouží k&nbsp;převodu
libovolné nenulové hodnoty na jedničku; dále pak idiomu
<strong>"+="[index]</strong>, kdy se pomocí indexu 0 či 1 vybere buď první nebo
druhý znak ze zadaného řetězce:</p>

<pre>

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define DELKA_SIG 1                     // bitová délka znaménka
#define DELKA_EXP 8                     // bitová délka exponentu
#define DELKA_MAN 23                    // bitová délka mantisy
#define DELKA (DELKA_SIG+DELKA_EXP+DELKA_MAN) // celková bitová délka FP hodnoty
#define BIAS      127                   // posun exponentu

// unie, které slouží k rozkladu FP hodnoty na její bitové složky
typedef union t_fp32 {
    float        fp;                    // hodnota uložená v FP formátu
    unsigned int uint;                  // 32 bitové slovo na stejném místě paměti
    struct {                            // rozklad 32 bitového slova na tři složky:
        unsigned int mantisa:DELKA_MAN; // - 23bitovou mantisu
        unsigned int exp:DELKA_EXP;     // - 8bitový exponent
        unsigned int signum:DELKA_SIG;  // - 1bitové znaménko
    } fp_deleny;
} t_fp32;

// funkce pro výpis vnitřní struktury FP hodnoty
void showFP(float fp)
{
    t_fp32 fp32;                        // unie s přiřazovanými FP hodnotami
    int i;                              // počitadlo smyčky
    int val;                            // FP hodnota převedená na 32bitové slovo

    fp32.fp=fp;                         // zapsat FP hodnotu do unionu
    val=fp32.uint;                      // získat slovo s FP hodnotou
    printf("%7.3f    %08x    ", fp32.fp, fp32.uint); // výpis FP hodnoty a příslušného slova
    for (i=0; i&lt;DELKA; i++) {           // převod na řetězec bitů (do dvojkové soustavy)
        putchar(!!(val &amp; (1&lt;&lt;(DELKA-1)))+'0'); // výpis hodnoty aktuálně nejvyššího bitu
        if (!i || i==DELKA_EXP) putchar(' ');  // po znaménku a za exponentem udělat mezeru
        val=val&lt;&lt;1;                     // posun na další (méně významný) bit
    }
    printf("   %c  %+4d  %f\n",
           "+-"[fp32.fp_deleny.signum], // zjištění znaménka podle nejvyššího bitu
           fp32.fp_deleny.exp-BIAS,     // posun exponentu o bias
           1.0+fp32.fp_deleny.mantisa/(float)(1&lt;&lt;DELKA_MAN)); // výpis mantisy (pouze pro normalizovaná čísla)
}

int main(void)
{
    float  values[]={+0, -0, 1.0, -1.0, 2.0, -2.0, 10, 100, 999, 0.1, 0.01};
    int    i;
    for (i=0; i&lt;11; i++)                // výpis vnitřní struktury všech zadaných hodnot
       showFP(values[i]);
    return 0;
}

// finito

</pre>

<p>Výsledek běhu programu pro zadané hodnoty (první dva řádky s&nbsp;nadpisy
sloupců byly dopsány ručně):</p>

<pre>
  FP       šestnáctkový   binární výstup                    decimální výstup
  hodnota  výstup      s exponent mantisa                   s   exp  mantisa
  0.000    00000000    0 00000000 00000000000000000000000   +  -127  1.000000
  0.000    00000000    0 00000000 00000000000000000000000   +  -127  1.000000
  1.000    3f800000    0 01111111 00000000000000000000000   +    +0  1.000000
 -1.000    bf800000    1 01111111 00000000000000000000000   -    +0  1.000000
  2.000    40000000    0 10000000 00000000000000000000000   +    +1  1.000000
 -2.000    c0000000    1 10000000 00000000000000000000000   -    +1  1.000000
 10.000    41200000    0 10000010 01000000000000000000000   +    +3  1.250000
100.000    42c80000    0 10000101 10010000000000000000000   +    +6  1.562500
999.000    4479c000    0 10001000 11110011100000000000000   +    +9  1.951172
  0.100    3dcccccd    0 01111011 10011001100110011001101   +    -4  1.600000
  0.010    3c23d70a    0 01111000 01000111101011100001010   +    -7  1.280000

</pre>

<p>Jak výsledky interpretovat? Zvolme si například číslo 10,000 (dekadicky).
Pro toto číslo má exponent po posunutí hodnotu 3 a mantisa po přidání jedničky
před binární tečku hodnotu 1,25. Proto provedeme operaci:</p>

<p>2<sup>3</sup>&times;1,25=8&times;1,25=10,000</p>



<p><a name="k03"></a></p>
<h1>3. Základní formát double dle normy IEEE 754</h1>

<p>FP formát dvojité přesnosti (<strong>double</strong>), jež je definovaný
taktéž normou IEEE 754, se v&nbsp;mnohém podobá formátu s&nbsp;jednoduchou
přesností (<strong>single</strong>), pouze se zdvojnásobil celkový počet bitů,
ve kterých je hodnota uložena, tj.&nbsp;místo 32 bitů se používá 64 bitů. Právě
to je příčinou, proč se tento formát nazývá double, ve skutečnosti je přesnost
více než dvojnásobná. 64 bitů alokovaných pro FP hodnotu je v&nbsp;tomto
případě rozděleno následujícím způsobem:</p>

<ol>
<li>1 bit pro znaménko</li>
<li>11 bitů pro exponent</li>
<li>52 bitů pro mantisu</li>
</ol>

<p>Bitově vypadá rozdělení následovně:</p>

<table>
<tr><th>bit</th><td>63</td><td>62 ... 52</td><td>51 ... 0</td></tr>
<tr><th>význam</th><td>s</td><td>exponent (11 bitů)</td><td>mantisa 52( bitů)</td></tr>
</table>

<p>Exponent je posunutý o hodnotu <strong>bias=2047</strong> a vzorec pro
výpočet reálné hodnoty vypadá takto:</p>

<p><i>X<sub>double</sub>=(-1)<sup>s</sup>&nbsp;&times;&nbsp;2<sup>exp-2047</sup>&nbsp;&times;&nbsp;m</i></p>

<p>Přičemž hodnotu mantisy je možné pro normalizované hodnoty získat pomocí vztahu:</p>

<p><i>m=1+m<sub>51</sub><sup>-1</sup>+m<sub>50</sub><sup>-2</sup>+m<sub>49</sub><sup>-3</sup>+...+m<sub>0</sub><sup>-52</sup></i></p>

<p>(<i>m<sub>x</sub></i> představuje <i>x</i>-tý bit mantisy)</p>

<p>Rozsah hodnot ukládaných ve dvojité přesnosti je
-1,7&times;10<sup>308</sup>..1,7&times;10<sup>308</sup>, nejmenší možná
nenulová hodnota je rovna 2,2&times;10<sup>-308</sup>. Minimální a maximální
hodnota exponentu má opět speciální význam, který je vysvětlen (spolu
s&nbsp;normalizovanými čísly) v&nbsp;následující tabulce:</p>

<table>
<tr><th>s-bit</th><th>exponent</th><th>mantisa</th><th>význam</th></tr>
<tr><td>0</td><td>0&lt;e&lt;2047</td><td>&gt;0</td><td>normalizované kladné číslo</td></tr>
<tr><td>1</td><td>0&lt;e&lt;2047</td><td>&gt;0</td><td>normalizované záporné číslo</td></tr>
<tr><td>0</td><td>0</td><td>&gt;0</td><td>denormalizované kladné číslo</td></tr>
<tr><td>1</td><td>0</td><td>&gt;0</td><td>denormalizované záporné číslo</td></tr>
<tr><td>0</td><td>0</td><td>0</td><td>kladná nula</td></tr>
<tr><td>1</td><td>0</td><td>0</td><td>záporná nula</td></tr>
<tr><td>0</td><td>2047</td><td>0</td><td>kladné nekonečno</td></tr>
<tr><td>1</td><td>2047</td><td>0</td><td>záporné nekonečno</td></tr>
<tr><td>0</td><td>2047</td><td>&gt;0</td><td>NaN &ndash; not a number</td></tr>
<tr><td>1</td><td>2047</td><td>&gt;0</td><td>NaN &ndash; not a number</td></tr>
</table>

<p>V&nbsp;programovacím jazyku C jsou ve standardních hlavičkových souborech
dostupné symbolické konstanty, které se často používají (resp.&nbsp;kvůli
přenositelnosti by se měly používat), při některých matematických
operacích:</p>

<pre>

#define DBL_MAX     1.7976931348623157E+308
#define DBL_MIN     2.2250738585072014E-308
#define DBL_EPSILON 2.2204460492503131E-016
   
</pre>
 


<p><a name="k04"></a></p>
<h1>4. Rozšířený formát extended/temporary</h1>

<p>Kromě obou základních formátů (tj.&nbsp;jednoduché i dvojité přesnosti) je
v&nbsp;normě IEEE 754 povoleno používat i rozšířené formáty. Na platformě x86
je při výpočtech prováděných v&nbsp;FPU používán rozšířený formát nazývaný
<strong>extended</strong> či <strong>temporary</strong>. Tento formát je
zajímavý tím, že pro uložení FP hodnot používá 80 bitů a je do něho možné beze
ztráty přesnosti uložit 64bitové hodnoty typu integer. Osmdesátibitový vektor
je rozdělený do třech částí následujícím způsobem:</p>

<ul>
<li>1 bit pro znaménko</li>
<li>15 bitů pro exponent (<i>BIAS</i> je roven 16383)</li>
<li>64 bitů pro mantisu (maximální hodnota přesahuje 10<sup>4932</sup>)</li>
</ul>

<p>U&nbsp;tohoto formátu je zajímavá funkce bitu s&nbsp;indexem 63. Podle
hodnoty tohoto bitu se rozlišují čísla normalizovaná a nenormalizovaná (tento
bit ve skutečnosti nahrazuje implicitně nastavovaný nejvyšší bit mantisy, jak
ho známe z&nbsp;předchozích formátů). Matematický koprocesor 8087 sice dokáže
pracovat s&nbsp;čísly nenormalizovanými, výsledkem jeho aritmetických operací
jsou však vždy hodnoty normalizované. Všechny možnosti, které mohou při
ukládání extended FP formátu nastat, jsou přehledně vypsány v&nbsp;následující
tabulce:</p>

<table>
<tr><th>s-bit</th><th>exponent</th><th>mantisa</th><th>m<sub>63</sub><th>význam</th></tr>
<tr><td>0</td><td>0&lt;e&lt;32767</td><td>&gt;0</td><td>1</td><td>normalizované kladné číslo</td></tr>
<tr><td>1</td><td>0&lt;e&lt;32767</td><td>&gt;0</td><td>1</td><td>normalizované záporné číslo</td></tr>
<tr><td>0</td><td>0&lt;e&lt;32767</td><td>&gt;0</td><td>0</td><td><strong>ne</strong>normalizované kladné číslo</td></tr>
<tr><td>1</td><td>0&lt;e&lt;32767</td><td>&gt;0</td><td>0</td><td><strong>ne</strong>normalizované záporné číslo</td></tr>
<tr><td>0</td><td>0</td><td>&gt;0</td><td>0</td><td><strong>de</strong>normalizované kladné číslo</td></tr>
<tr><td>1</td><td>0</td><td>&gt;0</td><td>0</td><td><strong>de</strong>normalizované záporné číslo</td></tr>
<tr><td>0</td><td>0</td><td>0</td><td>x</td><td>kladná nula</td></tr>
<tr><td>1</td><td>0</td><td>0</td><td>x</td><td>záporná nula</td></tr>
<tr><td>0</td><td>32767</td><td>0</td><td>x</td><td>kladné nekonečno</td></tr>
<tr><td>1</td><td>32767</td><td>0</td><td>x</td><td>záporné nekonečno</td></tr>
<tr><td>0</td><td>32767</td><td>&gt;0</td><td>x</td><td>NaN &ndash; not a number</td></tr>
<tr><td>1</td><td>32767</td><td>&gt;0</td><td>x</td><td>NaN &ndash; not a number</td></tr>
</table>

<p>Pro normalizované i nenormalizované hodnoty je možné uloženou hodnotu
vyjádřit pomocí vzorce (všimněte si, že bit 63 je umístěn před binární
tečkou):</p>

<p><i>X<sub>extended</sub>=(-1)<sup>s</sup>&nbsp;&times;&nbsp;2<sup>exp-16383</sup>&nbsp;&times;&nbsp;m</i></p>
<p><i>m=m<sub>63</sub><sup>0</sup>+m<sub>62</sub><sup>-1</sup>+m<sub>61</sub><sup>-2</sup>+...+m<sub>0</sub><sup>-63</sup></i></p>



<p><a name="k05"></a></p>
<h1>5. Plovoucí řádová čárka na ZX Spectru</h1>

<p>V&nbsp;této kapitole si stručně přiblížíme FP formát, který byl použit
v&nbsp;"kalkulačce" umístěné v&nbsp;ROM, tj.&nbsp;vlastně primitivního BIOSu
osmibitového domácího počítače ZX Spectrum. Operace s&nbsp;touto kalkulačkou
byly postavené na zásobníku (<i>stack</i>) &ndash; viz seriál o programovacím
jazyku Forth. Následují základní informace o použitém FP formátu:</p>

<table>
<tr><td><strong>Celkový počet bitů (bytů):       </strong></td><td>40 (5)</td></tr>
<tr><td><strong>Bitů pro znaménko:               </strong></td><td>1</td></tr>
<tr><td><strong>Bitů pro exponent:               </strong></td><td>8</td></tr>
<tr><td><strong>Bitů pro mantisu:                </strong></td><td>31</td></tr>
<tr><td><strong>BIAS:                            </strong></td><td>128</td></tr>
<tr><td><strong>Přesnost:                        </strong></td><td>9-10 číslic</td></tr>
<tr><td><strong>Maximální hodnota:               </strong></td><td>10<sup>38</sup></td></tr>
<tr><td><strong>Minimální hodnota:               </strong></td><td>-10<sup>38</sup></td></tr>
<tr><td><strong>Nejmenší kladná nenulová hodnota:</strong></td><td>4&times;10<sup>-39</sup></td></tr>
</table>



<p><a name="k06"></a></p>
<h1>6. FP formát firmy Borland: real</h1>

<p>Firma Borland pro svůj v&nbsp;minulosti známý a populární programovací jazyk
Turbo Pascal vytvořila vlastní implementaci FP formátu, který byl nazvaný
<i>real</i>. Tento datový typ byl šestibytový, což nám může z&nbsp;dnešního
pohledu připadat nelogické (zarovnání pouze na 16 bitů), na tehdejších
platformách se však jednalo o dobrý poměr počet bitů/přesnost/rychlost výpočtu,
nehledě na to, že pro přenos výsledků z&nbsp;funkcí se používala trojice
registrů a nikoli zásobník. Veškeré výpočty s&nbsp;tímto datovým typem se
prováděly na CPU, proto bylo pro počítače s&nbsp;FPU mnohem výhodnější používat
pro něj určené datové typy <i>single</i> a <i>double</i>.</p>

<table>
<tr><td><strong>Celkový počet bitů (bytů):       </strong></td><td>46 (6)</td></tr>
<tr><td><strong>Bitů pro znaménko:               </strong></td><td>1</td></tr>
<tr><td><strong>Bitů pro exponent:               </strong></td><td>8</td></tr>
<tr><td><strong>Bitů pro mantisu:                </strong></td><td>39</td></tr>
<tr><td><strong>BIAS:                            </strong></td><td>128</td></tr>
<tr><td><strong>Přesnost:                        </strong></td><td>11-12 číslic</td></tr>
<tr><td><strong>Maximální hodnota:               </strong></td><td>1,7&times;10<sup>39</sup></td></tr>
<tr><td><strong>Minimální hodnota:               </strong></td><td>1,7&times;10<sup>39</sup></td></tr>
<tr><td><strong>Nejmenší kladná nenulová hodnota:</strong></td><td>2,9&times;10<sup>-39</sup></td></tr>
</table>



<p><a name="k07"></a></p>
<h1>7. FP formát Minifloat</h1>

<p>Formát <strong>Minifloat</strong> je významný tím, že je implementován
v&nbsp;některých grafických procesorech GPU, například na nVidia GeForce FX či
Quadro FX3D. Tento formát, někdy (zejména v&nbsp;programovacím jazyku
<i>Cg</i>) také nazývaný <strong>half</strong> či jednoduše
<strong>fp16</strong>, používá pro ukládání FP hodnot pouhých šestnáct bitů,
tj.&nbsp;dva byty. Maximální hodnota je rovna 65504
(FFE0<sub>16</sub>=1111111111100000<sub>2</sub>), minimální hodnota přibližně
2,9&times;10<sup>-8</sup>. Předností tohoto formátu je malá bitová šířka
(umožňuje paralelní přenos po interních sběrnicích GPU) a také větší rychlost
zpracování základních operací, protože pro tak malou bitovou šířku mantisy je
možné některé operace "zadrátovat" a nepočítat pomocí ALU. Také některé
iterativní výpočty (sin, cos, sqrt) mohou být provedeny rychleji, než
v&nbsp;případě plnohodnotných typů <strong>float</strong> a
<strong>single</strong>.</p>

<table>
<tr><td><strong>Celkový počet bitů (bytů):       </strong></td><td>16 (2)</td></tr>
<tr><td><strong>Bitů pro znaménko:               </strong></td><td>1</td></tr>
<tr><td><strong>Bitů pro exponent:               </strong></td><td>5</td></tr>
<tr><td><strong>Bitů pro mantisu:                </strong></td><td>10</td></tr>
<tr><td><strong>BIAS:                            </strong></td><td>15</td></tr>
<tr><td><strong>Přesnost:                        </strong></td><td>5-6 číslic</td></tr>
<tr><td><strong>Maximální hodnota:               </strong></td><td>65504</td></tr>
<tr><td><strong>Minimální hodnota:               </strong></td><td>-65504</td></tr>
<tr><td><strong>Nejmenší kladná nenulová hodnota:</strong></td><td>2,9&times;10<sup>-8</sup></td></tr>
</table>



<p><a name="k08"></a></p>
<h1>8. FP formát Microfloat</h1>

<p>Prakticky nejmenším FP formátem, který je ještě možné prakticky použít, je
formát nazvaný <strong>Microfloat</strong>. Tento formát, ve kterém jsou
hodnoty uložené na pouhých osmi bitech, tj.&nbsp;jednom bytu, se používá
například při ukládání hodnot naměřených z&nbsp;nelineárních čidel, digitálních
průběhů apod.  Předností je značná úspora paměti a také snazší FP operace,
které je možné povětšinou zakódovat do vyhledávacích tabulek (na mikrořadičích
do paměti PROM). Nevýhodou je (logicky) malý rozsah i přesnost. Kromě
normalizovaných číselných hodnot (nejmenší hodnotou je 1/64) je možné ukládat i
hodnoty nenormalizované (zde je nejmenší hodnotou 1/512), přičemž je možné
odlišit kladnou a zápornou nulu a samozřejmě i kladné a záporné nekonečno.
Základní charakteristika tohoto opravdu minimalistického FP formátu je
zobrazena v&nbsp;následující tabulce:</p>

<table>
<tr><td><strong>Celkový počet bitů (bytů):       </strong></td><td>8 (1)</td></tr>
<tr><td><strong>Bitů pro znaménko:               </strong></td><td>1</td></tr>
<tr><td><strong>Bitů pro exponent:               </strong></td><td>4</td></tr>
<tr><td><strong>Bitů pro mantisu:                </strong></td><td>3</td></tr>
<tr><td><strong>BIAS:                            </strong></td><td>7</td></tr>
<tr><td><strong>Přesnost:                        </strong></td><td>2-3 číslice</td></tr>
<tr><td><strong>Maximální hodnota:               </strong></td><td>240</td></tr>
<tr><td><strong>Minimální hodnota:               </strong></td><td>-240</td></tr>
<tr><td><strong>Nejmenší kladná nenulová hodnota:</strong></td><td>1/512 (denormalizovaná hodnota)</td></tr>
</table>
<p></p>



<p><a name="k09"></a></p>
<h1>9. Obsah třetího pokračování tohoto seriálu</h1>

<p>V&nbsp;následujícím pokračování tohoto seriálu si popíšeme způsob provádění
základních aritmetických operací s&nbsp;hodnotami uloženými ve formátu plovoucí
řádové binární tečky podle normy IEEE 754. Také se ukážeme, jak je možné
implementovat i výpočet složitějších funkcí, například druhé odmocniny,
goniometrických funkcí atd. Nezapomeneme ani na velmi významný algoritmus
CORDIC, který byl použit v&nbsp;některých matematických koprocesorech.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2006</small></p>
</body>
</html>

