<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Výpoèty v systému pevné øádové teèky IX</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=iso-8859-2" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Výpoèty v systému pevné øádové teèky IX - Algoritmus CORDIC s&nbsp;hodnotami ulo¾enými ve formátu pevné øádové binární èárky</h1>

<h3>Pavel Ti¹novský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V deváté a souèasnì i pøedposlední èásti seriálu vìnovaného matematickým výpoètùm s numerickými hodnotami ulo¾enými ve formátu pevné i plovoucí øádové binární èárky si uká¾eme algoritmy realizované v programovacím jazyku C, ve kterých budou implementovány výpoèty nìkterých goniometrických funkcí pomocí algoritmu CORDIC. Ve¹keré výpoèty pøitom budou provádìny pouze s&nbsp;hodnotami ulo¾enými ve formátu pevné øádové binární èárky (FX).</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Algoritmus CORDIC s&nbsp;hodnotami ulo¾enými ve formátu pevné øádové binární èárky</a><br />
<a href="#k02">2. Datové typy, makra a pomocné funkce pro práci s&nbsp;formátem FX</a><br />
<a href="#k02">2. Funkce urèená pro naplnìní tabulky atans[]</a><br />
<a href="#k03">3. Výpoèet tangenty pomocí algoritmu CORDIC &ndash; neoptimalizovaná verze</a><br />
<a href="#k04">4. Výpoèet tangenty pomocí algoritmu CORDIC &ndash; optimalizovaná verze</a><br />
<a href="#k05">5. Výpis celého demonstraèního pøíkladu</a><br />
<a href="#k06">6. Obsah poslední èásti tohoto seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Algoritmus CORDIC s&nbsp;hodnotami ulo¾enými ve formátu pevné øádové binární èárky</h1>

<p>V&nbsp;pøedchozích èástech tohoto seriálu jsme si uvedli, jakým zpùsobem je
mo¾né algoritmus <strong>CORDIC</strong> (<i><strong>CO</strong>ordinate
<strong>RO</strong>tation <strong>DI</strong>gital
<strong>C</strong>omputer</i>) pou¾ít pro výpoèet goniometrických funkcí
s&nbsp;hodnotami ulo¾enými ve formátu plovoucí øádové binární èárky (FP).
Tentý¾ algoritmus je v¹ak po mírné modifikaci mo¾né pou¾ít i pøi práci
s&nbsp;formátem pevné øádové binární èárky (FX) a dá se øíci, ¾e teprve zde se
plnì ukazuje jeho implementaèní jednoduchost a souèasnì i velká vyjadøovací
síla &ndash; pomocí jednoho iteraèního postupu je mo¾né vypoèítat pomìrnì velké
mno¾ství navzájem znaènì odli¹ných funkcí, pøièem¾ pamì»ové nároky algoritmu
jsou minimální a rovnají se tabulce s&nbsp;cca deseti a¾ dvaceti prvky
s&nbsp;rozsahem 32 (popø.&nbsp;pouze 16) bitù. To je výhodné pøedev¹ím pøi
implementaci na mikroøadièích (oblíbená øada 8051, PICy, øada 68HC11 atd.) a
také pøi práci s&nbsp;programovatelnými obvody typu FPGA.</p>



<p><a name="k02"></a></p>
<h1>2. Datové typy, makra a pomocné funkce pro práci s&nbsp;formátem FX</h1>

<p>Pøed vlastním uvedením implementace algoritmu CORDIC s&nbsp;èísly ulo¾enými
ve formátu pevné øádové binární èárky je zapotøebí provést nále¾itou pøípravu,
proto¾e formát FX (vìt¹inou) není ani mikroprocesory ani pøekladaèi podporován.
Z&nbsp;tohoto dùvodu si v&nbsp;této kapitole pro pøipomenutí uvedeme v¹echny
základní aritmetické funkce urèené pro práci s&nbsp;formátem FX. Jedná se o
funkce <strong>fx_add()</strong>, <strong>fx_sub()</strong>,
<strong>fx_mul()</strong> a <strong>fx_div()</strong> (tyto funkce byly
podrobnìji vysvìtleny v&nbsp;pøedchozím díle). Kromì toho jsou uvedena i tìla
dal¹ích pomocných funkcí, zejména <strong>fx_print()</strong> i maker urèených
pro pøevod stupòù na radiány a naopak. Pomocí konstant <strong>A</strong> a
<strong>B</strong> je urèen rozsah a pøesnost numerických hodnot ulo¾ených ve
formátu <strong>fx</strong> &ndash; ten je v&nbsp;na¹í implementaci shodný
s&nbsp;tøicetidvoubitovým datovým typem <strong>signed int</strong>, jeliko¾
potøebujeme pracovat jak s&nbsp;kladnými, tak i se zápornými hodnotami.</p>

<pre>

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

/* poèet míst pøed a za binární øádovou teèkou */
#define A 16
#define B 16

/* Ludolfovo èíslo */
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

/* maximální poèet iterací pøi bìhu algoritmu */
#define MAX_ITER 16

/* "zesílení" pøi rotacích */
#define K 0.6073

/* pøevody mezi stupni a radiány */
#define rad2deg(rad) ((rad)*180.0/M_PI)
#define deg2rad(deg) ((deg)/180.0*M_PI)

/* datový typ, se kterým budeme pracovat */
typedef signed int fx;

/* hlavièky pou¾itých funkcí */
void   fx_print(fx x);
fx     fp2fx(double x);
double fx2fp(fx x);

/* tabulka arkustangentu úhlù */
fx atans[MAX_ITER];

/* tabulka záporných celoèíselných mocnin hodnoty 2 */
fx pows[MAX_ITER];

/*
 * Tisk numerické hodnoty ulo¾ené ve formátu pevné
 * øádové binární èárky (FX)
 */
void fx_print(fx x)
{
    int i;
    int val=x;                         /* pomocná promìnná pro pøevod do dvojkové soustavy */
    printf("bin: ");
    for (i=0; i&lt;A+B; i++) {            /* pøevod na øetìzec bitù (do dvojkové soustavy) */
        putchar(!!(val &amp; (1&lt;&lt;(A+B-1)))+'0'); /* výpis hodnoty aktuálnì nejvy¹¹ího bitu */
        if (i==B-1) putchar('.');      /* po øádové binární èárce vypsat znaèku */
        val=val&lt;&lt;1;                    /* posun na dal¹í (ménì významný) bit */
    }

    printf("   hex: %08x   fp: %+11.5f\n", x, fx2fp(x));
}

/*
 * Pøevod z formátu plovoucí øádové binární èárky (FP)
 * do formátu pevné øádové binární èárky (FX)
 */
fx fp2fx(double x)
{
    return (fx)(x*(2&lt;&lt;(B-1)));
}

/*
 * Pøevod z celoèíselného formátu (integer)
 * do formátu pevné øádové binární èárky (FX)
 */
fx int2fx(int x)
{
    return (fx)(x&lt;&lt;B);
}

/*
 * Pøevod z formátu pevné øádové binární èárky (FX)
 * do formátu plovoucí øádové binární èárky (FP)
 */
double fx2fp(fx x)
{
    return (double)x/(2&lt;&lt;(B-1));
}

/*
 * Souèet dvou hodnot ulo¾ených ve shodném formátu
 * pevné binární øádové èárky (FX)
 */
fx fx_add(fx x, fx y)
{
    return x+y;
}

/*
 * Rozdíl dvou hodnot ulo¾ených ve shodném formátu
 * pevné binární øádové èárky (FX)
 */
fx fx_sub(fx x, fx y)
{
    return x-y;
}

/*
 * Souèin dvou hodnot ulo¾ených ve shodném formátu
 * pevné binární øádové èárky (FX)
 */
fx fx_mul(fx x, fx y)
{
    fx result=(x&gt;&gt;(B/2))*(y&gt;&gt;(B/2));
    return result;
}

/*
 * Podíl dvou hodnot ulo¾ených ve shodném formátu
 * pevné binární øádové èárky (FX)
 */
fx fx_div(fx x, fx y)
{
    fx result=x/(y&gt;&gt;(B/2));
    return result&lt;&lt;(B/2);
}


</pre>



<p><a name="k03"></a></p>
<h1>3. Funkce urèená pro naplnìní tabulky atans[]</h1>

<p>Podobnì jako pøi implementaci algoritmu CORDIC pro hodnoty ve formátu FP, i
v&nbsp;pøípadì práce s&nbsp;formátem FX je nutné nìkteré hodnoty pøedpoèítat.
Opìt se jedná o tabulku <strong>atans[]</strong> obsahující arkustangenty
vybraných úhlù. Kromì toho naplníme i tabulku <strong>pows[]</strong>, ve které
jsou ulo¾eny záporné mocniny èísla 2. Jak v¹ak uvidíme v&nbsp;dal¹ím textu,
není v&nbsp;pøípadì FX výpoètù tato tabulka vyu¾ita a algoritmus CORDIC se
ponìkud zjednodu¹í. Funkce pro výpoèet obou zmiòovaných tabulek vypadá
následovnì:</p>

<pre>

/*
 * Vytvoøení tabulky pro výpoèet goniometrických
 * funkcí pomocí algoritmu CORDIC
 */
void fx_create_tables(void)
{
    int i;
    for (i=0; i&lt;MAX_ITER; i++) {
        double p=pow(2.0, -i);
        atans[i]=fp2fx(atan(p));
        pows[i]=fp2fx(p);
    }
}

</pre>

<p>To, zda je tabulka korektnì naplnìna, je mo¾né otestovat velmi jednodu¹e:</p>

<pre>

    /* kontrolní výpis tabulky atans[] */
    for (i=0; i&lt;MAX_ITER; i++)
        printf("%d\t%f\n", i, fx2fp(rad2deg(atans[i])));

</pre>

<p>Výsledkem bìhu pøedchozího testu je tabulka hodnot arkustangent úhlù
(zhruba) odpovídajících FP verzi:</p>

<table>
<tr><th>Index</th><th>Hodnota úhlu</th></tr>
<tr><td> 0</td><td>44.999252</td></tr>
<tr><td> 1</td><td>26.564514</td></tr>
<tr><td> 2</td><td>14.035431</td></tr>
<tr><td> 3</td><td> 7.124374</td></tr>
<tr><td> 4</td><td> 3.575729</td></tr>
<tr><td> 5</td><td> 1.789612</td></tr>
<tr><td> 6</td><td> 0.894363</td></tr>
<tr><td> 7</td><td> 0.446747</td></tr>
<tr><td> 8</td><td> 0.222931</td></tr>
<tr><td> 9</td><td> 0.111023</td></tr>
<tr><td>10</td><td> 0.055069</td></tr>
<tr><td>11</td><td> 0.027100</td></tr>
<tr><td>12</td><td> 0.013107</td></tr>
<tr><td>13</td><td> 0.006119</td></tr>
<tr><td>14</td><td> 0.002609</td></tr>
<tr><td>15</td><td> 0.000870</td></tr>
</table>

<p>S&nbsp;takto pøipravenou tabulkou je mo¾né pokraèovat v&nbsp;dal¹ích
výpoètech.</p>



<p><a name="k04"></a></p>
<h1>4. Výpoèet tangenty pomocí algoritmu CORDIC &ndash; neoptimalizovaná verze</h1>

<p>Pravdìpodobnì nejjednodu¹¹ím výpoètem, který je mo¾né pomocí algoritmu
CORDIC provést, je vyjádøení tangenty zadaného úhlu. Nejprve si uvedeme
neoptimalizovanou verzi, která vznikla v&nbsp;podstatì pøímým pøevodem døíve
uvedené implementace urèené pro FP reprezentaci. Pøevod spoèívá v&nbsp;náhradì
aritmetických funkcí jejich FX ekvivalenty:</p>

<pre>

/* výpoèet funkce tan() pro zadaný úhel delta */
// (neoptimalizovaná verze)
fx fx_tan_cordic(fx delta)
{
    int i;
    /* nastavení poèáteèních podmínek */
    fx x0=fp2fx(1.0);
    fx y0=fp2fx(0.0);
    fx xn;
    if (delta==0) return 0;                 /* o¹etøení nulového úhlu */
    for (i=0; i&lt;MAX_ITER; i++) {            /* iteraèní smyèka */
        if (delta&lt;0) {                      /* úhel je záporný =&gt; rotace doleva */
            xn=fx_add(x0, fx_mul(y0, pows[i]));
            y0=fx_sub(y0, fx_mul(x0, pows[i]));
            delta=fx_add(delta, atans[i]);
        }
        else {                              /* úhel je kladný =&gt; rotace doprava */
            xn=fx_sub(x0, fx_mul(y0, pows[i]));
            y0=fx_add(y0, fx_mul(x0, pows[i]));
            delta=fx_sub(delta, atans[i]);
        }
        x0=xn;
/*        printf("%i\t%+f\t%+f\t%+f\n", i, fx2fp(x0), fx2fp(y0), fx2fp(delta)); */
    }
    if (x0==0)                              /* o¹etøení tangenty pravého úhlu */
        if (y0&lt;0) return 0;
        else return 0;
    else
        return fx_div(y0,x0);               /* vrátit výsledek operace */
}

</pre>

<p>Tuto funkci si mù¾eme jednoduchým zpùsobem otestovat, postaèí pou¾ít smyèku,
ve které se poèítají tangenty úhlù v&nbsp;rozsahu 0&deg;..89&deg; spolu
s&nbsp;vyjádøením absolutních a relativních chyb vzniklých pou¾itím algoritmu
CORDIC a bitovì omezené FP reprezentace:</p>

<pre>

    /* výpis tabulky tangent úhlù v&nbsp;rozsahu 0..89&deg; */
    for (i=0; i&lt;90; i++) {                  /* výpoèetní smyèka */
        delta=deg2rad(i);                   /* pøevod úhlu na radiány */
        tanfx=fx_tan_cordic(fp2fx(delta));  /* aplikace algoritmu CORDIC */
        tanval=fx2fp(tanfx);                /* výpoèet funkce tan */
        tanerr=fabs(tanval-tan(delta));     /* výpoèet absolutních chyb */
                                            /* tisk výsledkù */
        printf("%02d\t%14.10f\t%14.10f\t%12.10f\t%8.3f%%\n",
                i,
                tanval,
                tan(delta),
                tanerr,
                tanerr==0 ? 0:100.0*tanerr/tan(delta));
    }

</pre>

<p>V&nbsp;tabulce s&nbsp;výsledky si v¹imnìte, ¾e pro nìkteré úhly je vzniklá
chyba rovna a¾ deseti procentùm. Je to zpùsobeno nízkým rozli¹ením pou¾itého FX
formátu, zejména hodnot arctat() tìch nejmen¹ích úhlù, a chybu ji¾ není mo¾né
sní¾it ani zvý¹ením poètu iterací (ten je nastaven na ¹estnáct, to odpovídá
poètu bitù za binární øádovou èárkou):</p>

<table>
<tr><th>Úhel</th><th>tan podle CORDIC</th><th>tan podle FPU</th><th>absolutní chyba</th><th>relativní chyba</th></tr>
<tr><td>00</td><td> 0.0000000000</td><td> 0.0000000000</td><td>  0.0000000000</td><td> 0.000%</td></tr>
<tr><td>01</td><td> 0.0156250000</td><td> 0.0174550649</td><td>  0.0018300649</td><td>10.484%</td></tr>
<tr><td>02</td><td> 0.0312500000</td><td> 0.0349207695</td><td>  0.0036707695</td><td>10.512%</td></tr>
<tr><td>03</td><td> 0.0468750000</td><td> 0.0524077793</td><td>  0.0055327793</td><td>10.557%</td></tr>
<tr><td>04</td><td> 0.0703125000</td><td> 0.0699268119</td><td>  0.0003856881</td><td> 0.552%</td></tr>
<tr><td>05</td><td> 0.0859375000</td><td> 0.0874886635</td><td>  0.0015511635</td><td> 1.773%</td></tr>
<tr><td>06</td><td> 0.1015625000</td><td> 0.1051042353</td><td>  0.0035417353</td><td> 3.370%</td></tr>
<tr><td>07</td><td> 0.1171875000</td><td> 0.1227845609</td><td>  0.0055970609</td><td> 4.558%</td></tr>
<tr><td>08</td><td> 0.1406250000</td><td> 0.1405408347</td><td>  0.0000841653</td><td> 0.060%</td></tr>
<tr><td>09</td><td> 0.1562500000</td><td> 0.1583844403</td><td>  0.0021344403</td><td> 1.348%</td></tr>
<tr><td>10</td><td> 0.1718750000</td><td> 0.1763269807</td><td>  0.0044519807</td><td> 2.525%</td></tr>
<tr><td>11</td><td> 0.1914062500</td><td> 0.1943803091</td><td>  0.0029740591</td><td> 1.530%</td></tr>
<tr><td>12</td><td> 0.2148437500</td><td> 0.2125565617</td><td>  0.0022871883</td><td> 1.076%</td></tr>
<tr><td>13</td><td> 0.2304687500</td><td> 0.2308681911</td><td>  0.0003994411</td><td> 0.173%</td></tr>
<tr><td>14</td><td> 0.2460937500</td><td> 0.2493280028</td><td>  0.0032342528</td><td> 1.297%</td></tr>
<tr><td>15</td><td> 0.2656250000</td><td> 0.2679491924</td><td>  0.0023241924</td><td> 0.867%</td></tr>
<tr><td>16</td><td> 0.2890625000</td><td> 0.2867453858</td><td>  0.0023171142</td><td> 0.808%</td></tr>
<tr><td>17</td><td> 0.3046875000</td><td> 0.3057306815</td><td>  0.0010431815</td><td> 0.341%</td></tr>
<tr><td>18</td><td> 0.3242187500</td><td> 0.3249196962</td><td>  0.0007009462</td><td> 0.216%</td></tr>
<tr><td>19</td><td> 0.3398437500</td><td> 0.3443276133</td><td>  0.0044838633</td><td> 1.302%</td></tr>
<tr><td>20</td><td> 0.3671875000</td><td> 0.3639702343</td><td>  0.0032172657</td><td> 0.884%</td></tr>
<tr><td>21</td><td> 0.3828125000</td><td> 0.3838640350</td><td>  0.0010515350</td><td> 0.274%</td></tr>
<tr><td>22</td><td> 0.4023437500</td><td> 0.4040262258</td><td>  0.0016824758</td><td> 0.416%</td></tr>
<tr><td>23</td><td> 0.4218750000</td><td> 0.4244748162</td><td>  0.0025998162</td><td> 0.612%</td></tr>
<tr><td>24</td><td> 0.4414062500</td><td> 0.4452286853</td><td>  0.0038224353</td><td> 0.859%</td></tr>
<tr><td>25</td><td> 0.4687500000</td><td> 0.4663076582</td><td>  0.0024423418</td><td> 0.524%</td></tr>
<tr><td>26</td><td> 0.4882812500</td><td> 0.4877325886</td><td>  0.0005486614</td><td> 0.112%</td></tr>
<tr><td>27</td><td> 0.5078125000</td><td> 0.5095254495</td><td>  0.0017129495</td><td> 0.336%</td></tr>
<tr><td>28</td><td> 0.5273437500</td><td> 0.5317094317</td><td>  0.0043656817</td><td> 0.821%</td></tr>
<tr><td>29</td><td> 0.5546875000</td><td> 0.5543090515</td><td>  0.0003784485</td><td> 0.068%</td></tr>
<tr><td>30</td><td> 0.5781250000</td><td> 0.5773502692</td><td>  0.0007747308</td><td> 0.134%</td></tr>
<tr><td>31</td><td> 0.5976562500</td><td> 0.6008606190</td><td>  0.0032043690</td><td> 0.533%</td></tr>
<tr><td>32</td><td> 0.6171875000</td><td> 0.6248693519</td><td>  0.0076818519</td><td> 1.229%</td></tr>
<tr><td>33</td><td> 0.6523437500</td><td> 0.6494075932</td><td>  0.0029361568</td><td> 0.452%</td></tr>
<tr><td>34</td><td> 0.6718750000</td><td> 0.6745085168</td><td>  0.0026335168</td><td> 0.390%</td></tr>
<tr><td>35</td><td> 0.6953125000</td><td> 0.7002075382</td><td>  0.0048950382</td><td> 0.699%</td></tr>
<tr><td>36</td><td> 0.7226562500</td><td> 0.7265425280</td><td>  0.0038862780</td><td> 0.535%</td></tr>
<tr><td>37</td><td> 0.7539062500</td><td> 0.7535540501</td><td>  0.0003521999</td><td> 0.047%</td></tr>
<tr><td>38</td><td> 0.7812500000</td><td> 0.7812856265</td><td>  0.0000356265</td><td> 0.005%</td></tr>
<tr><td>39</td><td> 0.8085937500</td><td> 0.8097840332</td><td>  0.0011902832</td><td> 0.147%</td></tr>
<tr><td>40</td><td> 0.8320312500</td><td> 0.8390996312</td><td>  0.0070683812</td><td> 0.842%</td></tr>
<tr><td>41</td><td> 0.8750000000</td><td> 0.8692867378</td><td>  0.0057132622</td><td> 0.657%</td></tr>
<tr><td>42</td><td> 0.8984375000</td><td> 0.9004040443</td><td>  0.0019665443</td><td> 0.218%</td></tr>
<tr><td>43</td><td> 0.9296875000</td><td> 0.9325150861</td><td>  0.0028275861</td><td> 0.303%</td></tr>
<tr><td>44</td><td> 0.9570312500</td><td> 0.9656887748</td><td>  0.0086575248</td><td> 0.897%</td></tr>
<tr><td>45</td><td> 0.9921875000</td><td> 1.0000000000</td><td>  0.0078125000</td><td> 0.781%</td></tr>
<tr><td>46</td><td> 1.0390625000</td><td> 1.0355303138</td><td>  0.0035321862</td><td> 0.341%</td></tr>
<tr><td>47</td><td> 1.0742187500</td><td> 1.0723687100</td><td>  0.0018500400</td><td> 0.173%</td></tr>
<tr><td>48</td><td> 1.1093750000</td><td> 1.1106125148</td><td>  0.0012375148</td><td> 0.111%</td></tr>
<tr><td>49</td><td> 1.1445312500</td><td> 1.1503684072</td><td>  0.0058371572</td><td> 0.507%</td></tr>
<tr><td>50</td><td> 1.2031250000</td><td> 1.1917535926</td><td>  0.0113714074</td><td> 0.954%</td></tr>
<tr><td>51</td><td> 1.2421875000</td><td> 1.2348971565</td><td>  0.0072903435</td><td> 0.590%</td></tr>
<tr><td>52</td><td> 1.2812500000</td><td> 1.2799416322</td><td>  0.0013083678</td><td> 0.102%</td></tr>
<tr><td>53</td><td> 1.3203125000</td><td> 1.3270448216</td><td>  0.0067323216</td><td> 0.507%</td></tr>
<tr><td>54</td><td> 1.3867187500</td><td> 1.3763819205</td><td>  0.0103368295</td><td> 0.751%</td></tr>
<tr><td>55</td><td> 1.4335937500</td><td> 1.4281480067</td><td>  0.0054457433</td><td> 0.381%</td></tr>
<tr><td>56</td><td> 1.4843750000</td><td> 1.4825609685</td><td>  0.0018140315</td><td> 0.122%</td></tr>
<tr><td>57</td><td> 1.5351562500</td><td> 1.5398649638</td><td>  0.0047087138</td><td> 0.306%</td></tr>
<tr><td>58</td><td> 1.6132812500</td><td> 1.6003345290</td><td>  0.0129467210</td><td> 0.809%</td></tr>
<tr><td>59</td><td> 1.6718750000</td><td> 1.6642794824</td><td>  0.0075955176</td><td> 0.456%</td></tr>
<tr><td>60</td><td> 1.7265625000</td><td> 1.7320508076</td><td>  0.0054883076</td><td> 0.317%</td></tr>
<tr><td>61</td><td> 1.7929687500</td><td> 1.8040477553</td><td>  0.0110790053</td><td> 0.614%</td></tr>
<tr><td>62</td><td> 1.9023437500</td><td> 1.8807264653</td><td>  0.0216172847</td><td> 1.149%</td></tr>
<tr><td>63</td><td> 1.9765625000</td><td> 1.9626105055</td><td>  0.0139519945</td><td> 0.711%</td></tr>
<tr><td>64</td><td> 2.0585937500</td><td> 2.0503038416</td><td>  0.0082899084</td><td> 0.404%</td></tr>
<tr><td>65</td><td> 2.1406250000</td><td> 2.1445069205</td><td>  0.0038819205</td><td> 0.181%</td></tr>
<tr><td>66</td><td> 2.2656250000</td><td> 2.2460367739</td><td>  0.0195882261</td><td> 0.872%</td></tr>
<tr><td>67</td><td> 2.3789062500</td><td> 2.3558523658</td><td>  0.0230538842</td><td> 0.979%</td></tr>
<tr><td>68</td><td> 2.4882812500</td><td> 2.4750868534</td><td>  0.0131943966</td><td> 0.533%</td></tr>
<tr><td>69</td><td> 2.6015625000</td><td> 2.6050890647</td><td>  0.0035265647</td><td> 0.135%</td></tr>
<tr><td>70</td><td> 2.7265625000</td><td> 2.7474774195</td><td>  0.0209149195</td><td> 0.761%</td></tr>
<tr><td>71</td><td> 2.9296875000</td><td> 2.9042108777</td><td>  0.0254766223</td><td> 0.877%</td></tr>
<tr><td>72</td><td> 3.0820312500</td><td> 3.0776835372</td><td>  0.0043477128</td><td> 0.141%</td></tr>
<tr><td>73</td><td> 3.2460937500</td><td> 3.2708526185</td><td>  0.0247588685</td><td> 0.757%</td></tr>
<tr><td>74</td><td> 3.4570312500</td><td> 3.4874144438</td><td>  0.0303831938</td><td> 0.871%</td></tr>
<tr><td>75</td><td> 3.7695312500</td><td> 3.7320508076</td><td>  0.0374804424</td><td> 1.004%</td></tr>
<tr><td>76</td><td> 4.0468750000</td><td> 4.0107809335</td><td>  0.0360940665</td><td> 0.900%</td></tr>
<tr><td>77</td><td> 4.3203125000</td><td> 4.3314758743</td><td>  0.0111633743</td><td> 0.258%</td></tr>
<tr><td>78</td><td> 4.6289062500</td><td> 4.7046301095</td><td>  0.0757238595</td><td> 1.610%</td></tr>
<tr><td>79</td><td> 5.2382812500</td><td> 5.1445540160</td><td>  0.0937272340</td><td> 1.822%</td></tr>
<tr><td>80</td><td> 5.7656250000</td><td> 5.6712818196</td><td>  0.0943431804</td><td> 1.664%</td></tr>
<tr><td>81</td><td> 6.3046875000</td><td> 6.3137515147</td><td>  0.0090640147</td><td> 0.144%</td></tr>
<tr><td>82</td><td> 7.0703125000</td><td> 7.1153697224</td><td>  0.0450572224</td><td> 0.633%</td></tr>
<tr><td>83</td><td> 8.3710937500</td><td> 8.1443464280</td><td>  0.2267473220</td><td> 2.784%</td></tr>
<tr><td>84</td><td> 9.7500000000</td><td> 9.5143644542</td><td>  0.2356355458</td><td> 2.477%</td></tr>
<tr><td>85</td><td>11.3476562500</td><td>11.4300523028</td><td>  0.0823960528</td><td> 0.721%</td></tr>
<tr><td>86</td><td>14.0117187500</td><td>14.3006662567</td><td>  0.2889475067</td><td> 2.021%</td></tr>
<tr><td>87</td><td>20.0468750000</td><td>19.0811366877</td><td>  0.9657383123</td><td> 5.061%</td></tr>
<tr><td>88</td><td>30.0937500000</td><td>28.6362532829</td><td>  1.4574967171</td><td> 5.090%</td></tr>
<tr><td>89</td><td>60.2109375000</td><td>57.2899616308</td><td>  2.9209758692</td><td> 5.099%</td></tr>
</table>



<p><a name="k05"></a></p>
<h1>5. Výpoèet tangenty pomocí algoritmu CORDIC &ndash; optimalizovaná verze</h1>

<p>Pokud se nad vý¹e uvedenou funkcí <strong>fx_tan_cordic()</strong>
zamyslíme, pravdìpodobnì zjistíme, ¾e se v&nbsp;ní zbyteènì provádí nìkteré
aritmetické operace. Zejména se jedná o prùbì¾né násobení koeficienty ulo¾enými
v&nbsp;tabulce <strong>pows[]</strong>. Tato tabulka mìla svùj význam pøi práci
s&nbsp;FP formátem, u formátu FX v¹ak ztrácí prakticky v¹echny své výhody,
proto¾e násobení zápornou mocninou èísla 2 je vlastnì toto¾né s&nbsp;bitovým
posunem doprava. Optimalizovaná funkce pro výpoèet tangenty úhlu algoritmem
CORDIC vypadá následovnì:</p>

<pre>

/* výpoèet funkce tan() pro zadaný úhel delta */
// (optimalizovaná verze)
fx fx_tan_cordic_optim(fx delta)
{
    int i;
    /* nastavení poèáteèních podmínek */
    fx x0=int2fx(1);
    fx y0=0;
    fx xn;
    if (delta==0) return 0;                 /* o¹etøení nulového úhlu */
    for (i=0; i&lt;MAX_ITER; i++) {            /* iteraèní smyèka */
        if (delta&lt;0) {                      /* úhel je záporný =&gt; rotace doleva */
            xn=fx_add(x0, y0&gt;&gt;i);           /* místo násobení bitový posuv */
            y0=fx_sub(y0, x0&gt;&gt;i);
            delta=fx_add(delta, atans[i]);
        }
        else {                              /* úhel je kladný =&gt; rotace doprava */
            xn=fx_sub(x0, y0&gt;&gt;i);
            y0=fx_add(y0, x0&gt;&gt;i);
            delta=fx_sub(delta, atans[i]);
        }
        x0=xn;
    }
    if (x0==0)                              /* o¹etøení tangenty pravého úhlu */
        if (y0&lt;0) return 0;
        else return 0;
    else
        return fx_div(y0,x0);               /* vrátit výsledek operace */
}

</pre>

<p>(Pokud by nìkdo pocítil potøebu provádìt dal¹í optimalizace, nabízí se zde
pou¾ití MMX instrukcí s&nbsp;paralelním výpoètem obou alternativních vìtví). Za
pov¹imnutí stojí fakt, ¾e se v&nbsp;iteraèní smyèce pou¾ívají pouze aritmetické
operace souètu, rozdílu a bitového posuvu. Kromì toho se i pøi inicializaci
hodnot <strong>x0</strong> a <strong>y0</strong> pou¾ívá pouze celoèíselná
aritmetika, tj.&nbsp;ve výpoètech se vùbec nevyskytuje volání instrukcí
matematického koprocesoru. Tato absence slo¾itých a implementaènì nároèných
operací pøedstavuje dal¹í z&nbsp;dùvodù velké oblíbenosti algoritmu CORDIC
v&nbsp;komunitì vývojáøù pro malé mikroøadièe a mikroprocesory.</p>

<p>Pokud vý¹e uvedenou funkci <strong>fx_tan_cordic_optim()</strong> podrobíme
stejnému testu, jako funkci <strong>fx_tan_cordic()</strong>, dostaneme
následující (do znaèné míry podobné) výsledky:</p>

<table>
<tr><th>Úhel</th><th>tan podle CORDIC</th><th>tan podle FPU</th><th>absolutní chyba</th><th>relativní chyba</th></tr>
<tr><td>00</td><td>  0.0000000000</td><td>  0.0000000000</td><td>0.0000000000</td><td>   0.000%</td></tr>
<tr><td>01</td><td>  0.0156250000</td><td>  0.0174550649</td><td>0.0018300649</td><td>  10.484%</td></tr>
<tr><td>02</td><td>  0.0312500000</td><td>  0.0349207695</td><td>0.0036707695</td><td>  10.512%</td></tr>
<tr><td>03</td><td>  0.0507812500</td><td>  0.0524077793</td><td>0.0016265293</td><td>   3.104%</td></tr>
<tr><td>04</td><td>  0.0664062500</td><td>  0.0699268119</td><td>0.0035205619</td><td>   5.035%</td></tr>
<tr><td>05</td><td>  0.0859375000</td><td>  0.0874886635</td><td>0.0015511635</td><td>   1.773%</td></tr>
<tr><td>06</td><td>  0.1015625000</td><td>  0.1051042353</td><td>0.0035417353</td><td>   3.370%</td></tr>
<tr><td>07</td><td>  0.1210937500</td><td>  0.1227845609</td><td>0.0016908109</td><td>   1.377%</td></tr>
<tr><td>08</td><td>  0.1406250000</td><td>  0.1405408347</td><td>0.0000841653</td><td>   0.060%</td></tr>
<tr><td>09</td><td>  0.1562500000</td><td>  0.1583844403</td><td>0.0021344403</td><td>   1.348%</td></tr>
<tr><td>10</td><td>  0.1757812500</td><td>  0.1763269807</td><td>0.0005457307</td><td>   0.309%</td></tr>
<tr><td>11</td><td>  0.1914062500</td><td>  0.1943803091</td><td>0.0029740591</td><td>   1.530%</td></tr>
<tr><td>12</td><td>  0.2109375000</td><td>  0.2125565617</td><td>0.0016190617</td><td>   0.762%</td></tr>
<tr><td>13</td><td>  0.2304687500</td><td>  0.2308681911</td><td>0.0003994411</td><td>   0.173%</td></tr>
<tr><td>14</td><td>  0.2460937500</td><td>  0.2493280028</td><td>0.0032342528</td><td>   1.297%</td></tr>
<tr><td>15</td><td>  0.2656250000</td><td>  0.2679491924</td><td>0.0023241924</td><td>   0.867%</td></tr>
<tr><td>16</td><td>  0.2851562500</td><td>  0.2867453858</td><td>0.0015891358</td><td>   0.554%</td></tr>
<tr><td>17</td><td>  0.3046875000</td><td>  0.3057306815</td><td>0.0010431815</td><td>   0.341%</td></tr>
<tr><td>18</td><td>  0.3242187500</td><td>  0.3249196962</td><td>0.0007009462</td><td>   0.216%</td></tr>
<tr><td>19</td><td>  0.3437500000</td><td>  0.3443276133</td><td>0.0005776133</td><td>   0.168%</td></tr>
<tr><td>20</td><td>  0.3632812500</td><td>  0.3639702343</td><td>0.0006889843</td><td>   0.189%</td></tr>
<tr><td>21</td><td>  0.3828125000</td><td>  0.3838640350</td><td>0.0010515350</td><td>   0.274%</td></tr>
<tr><td>22</td><td>  0.4023437500</td><td>  0.4040262258</td><td>0.0016824758</td><td>   0.416%</td></tr>
<tr><td>23</td><td>  0.4218750000</td><td>  0.4244748162</td><td>0.0025998162</td><td>   0.612%</td></tr>
<tr><td>24</td><td>  0.4453125000</td><td>  0.4452286853</td><td>0.0000838147</td><td>   0.019%</td></tr>
<tr><td>25</td><td>  0.4648437500</td><td>  0.4663076582</td><td>0.0014639082</td><td>   0.314%</td></tr>
<tr><td>26</td><td>  0.4882812500</td><td>  0.4877325886</td><td>0.0005486614</td><td>   0.112%</td></tr>
<tr><td>27</td><td>  0.5078125000</td><td>  0.5095254495</td><td>0.0017129495</td><td>   0.336%</td></tr>
<tr><td>28</td><td>  0.5312500000</td><td>  0.5317094317</td><td>0.0004594317</td><td>   0.086%</td></tr>
<tr><td>29</td><td>  0.5546875000</td><td>  0.5543090515</td><td>0.0003784485</td><td>   0.068%</td></tr>
<tr><td>30</td><td>  0.5742187500</td><td>  0.5773502692</td><td>0.0031315192</td><td>   0.542%</td></tr>
<tr><td>31</td><td>  0.5976562500</td><td>  0.6008606190</td><td>0.0032043690</td><td>   0.533%</td></tr>
<tr><td>32</td><td>  0.6250000000</td><td>  0.6248693519</td><td>0.0001306481</td><td>   0.021%</td></tr>
<tr><td>33</td><td>  0.6484375000</td><td>  0.6494075932</td><td>0.0009700932</td><td>   0.149%</td></tr>
<tr><td>34</td><td>  0.6718750000</td><td>  0.6745085168</td><td>0.0026335168</td><td>   0.390%</td></tr>
<tr><td>35</td><td>  0.6992187500</td><td>  0.7002075382</td><td>0.0009887882</td><td>   0.141%</td></tr>
<tr><td>36</td><td>  0.7265625000</td><td>  0.7265425280</td><td>0.0000199720</td><td>   0.003%</td></tr>
<tr><td>37</td><td>  0.7539062500</td><td>  0.7535540501</td><td>0.0003521999</td><td>   0.047%</td></tr>
<tr><td>38</td><td>  0.7812500000</td><td>  0.7812856265</td><td>0.0000356265</td><td>   0.005%</td></tr>
<tr><td>39</td><td>  0.8085937500</td><td>  0.8097840332</td><td>0.0011902832</td><td>   0.147%</td></tr>
<tr><td>40</td><td>  0.8398437500</td><td>  0.8390996312</td><td>0.0007441188</td><td>   0.089%</td></tr>
<tr><td>41</td><td>  0.8671875000</td><td>  0.8692867378</td><td>0.0020992378</td><td>   0.241%</td></tr>
<tr><td>42</td><td>  0.8984375000</td><td>  0.9004040443</td><td>0.0019665443</td><td>   0.218%</td></tr>
<tr><td>43</td><td>  0.9296875000</td><td>  0.9325150861</td><td>0.0028275861</td><td>   0.303%</td></tr>
<tr><td>44</td><td>  0.9648437500</td><td>  0.9656887748</td><td>0.0008450248</td><td>   0.088%</td></tr>
<tr><td>45</td><td>  1.0000000000</td><td>  1.0000000000</td><td>0.0000000000</td><td>   0.000%</td></tr>
<tr><td>46</td><td>  1.0351562500</td><td>  1.0355303138</td><td>0.0003740638</td><td>   0.036%</td></tr>
<tr><td>47</td><td>  1.0742187500</td><td>  1.0723687100</td><td>0.0018500400</td><td>   0.173%</td></tr>
<tr><td>48</td><td>  1.1093750000</td><td>  1.1106125148</td><td>0.0012375148</td><td>   0.111%</td></tr>
<tr><td>49</td><td>  1.1523437500</td><td>  1.1503684072</td><td>0.0019753428</td><td>   0.172%</td></tr>
<tr><td>50</td><td>  1.1953125000</td><td>  1.1917535926</td><td>0.0035589074</td><td>   0.299%</td></tr>
<tr><td>51</td><td>  1.2343750000</td><td>  1.2348971565</td><td>0.0005221565</td><td>   0.042%</td></tr>
<tr><td>52</td><td>  1.2812500000</td><td>  1.2799416322</td><td>0.0013083678</td><td>   0.102%</td></tr>
<tr><td>53</td><td>  1.3281250000</td><td>  1.3270448216</td><td>0.0010801784</td><td>   0.081%</td></tr>
<tr><td>54</td><td>  1.3789062500</td><td>  1.3763819205</td><td>0.0025243295</td><td>   0.183%</td></tr>
<tr><td>55</td><td>  1.4296875000</td><td>  1.4281480067</td><td>0.0015394933</td><td>   0.108%</td></tr>
<tr><td>56</td><td>  1.4843750000</td><td>  1.4825609685</td><td>0.0018140315</td><td>   0.122%</td></tr>
<tr><td>57</td><td>  1.5429687500</td><td>  1.5398649638</td><td>0.0031037862</td><td>   0.202%</td></tr>
<tr><td>58</td><td>  1.6015625000</td><td>  1.6003345290</td><td>0.0012279710</td><td>   0.077%</td></tr>
<tr><td>59</td><td>  1.6640625000</td><td>  1.6642794824</td><td>0.0002169824</td><td>   0.013%</td></tr>
<tr><td>60</td><td>  1.7382812500</td><td>  1.7320508076</td><td>0.0062304424</td><td>   0.360%</td></tr>
<tr><td>61</td><td>  1.8046875000</td><td>  1.8040477553</td><td>0.0006397447</td><td>   0.035%</td></tr>
<tr><td>62</td><td>  1.8867187500</td><td>  1.8807264653</td><td>0.0059922847</td><td>   0.319%</td></tr>
<tr><td>63</td><td>  1.9648437500</td><td>  1.9626105055</td><td>0.0022332445</td><td>   0.114%</td></tr>
<tr><td>64</td><td>  2.0585937500</td><td>  2.0503038416</td><td>0.0082899084</td><td>   0.404%</td></tr>
<tr><td>65</td><td>  2.1445312500</td><td>  2.1445069205</td><td>0.0000243295</td><td>   0.001%</td></tr>
<tr><td>66</td><td>  2.2500000000</td><td>  2.2460367739</td><td>0.0039632261</td><td>   0.176%</td></tr>
<tr><td>67</td><td>  2.3632812500</td><td>  2.3558523658</td><td>0.0074288842</td><td>   0.315%</td></tr>
<tr><td>68</td><td>  2.4882812500</td><td>  2.4750868534</td><td>0.0131943966</td><td>   0.533%</td></tr>
<tr><td>69</td><td>  2.6054687500</td><td>  2.6050890647</td><td>0.0003796853</td><td>   0.015%</td></tr>
<tr><td>70</td><td>  2.7500000000</td><td>  2.7474774195</td><td>0.0025225805</td><td>   0.092%</td></tr>
<tr><td>71</td><td>  2.9062500000</td><td>  2.9042108777</td><td>0.0020391223</td><td>   0.070%</td></tr>
<tr><td>72</td><td>  3.0820312500</td><td>  3.0776835372</td><td>0.0043477128</td><td>   0.141%</td></tr>
<tr><td>73</td><td>  3.2773437500</td><td>  3.2708526185</td><td>0.0064911315</td><td>   0.198%</td></tr>
<tr><td>74</td><td>  3.4921875000</td><td>  3.4874144438</td><td>0.0047730562</td><td>   0.137%</td></tr>
<tr><td>75</td><td>  3.7343750000</td><td>  3.7320508076</td><td>0.0023241924</td><td>   0.062%</td></tr>
<tr><td>76</td><td>  4.0468750000</td><td>  4.0107809335</td><td>0.0360940665</td><td>   0.900%</td></tr>
<tr><td>77</td><td>  4.3671875000</td><td>  4.3314758743</td><td>0.0357116257</td><td>   0.824%</td></tr>
<tr><td>78</td><td>  4.7382812500</td><td>  4.7046301095</td><td>0.0336511405</td><td>   0.715%</td></tr>
<tr><td>79</td><td>  5.1718750000</td><td>  5.1445540160</td><td>0.0273209840</td><td>   0.531%</td></tr>
<tr><td>80</td><td>  5.6835937500</td><td>  5.6712818196</td><td>0.0123119304</td><td>   0.217%</td></tr>
<tr><td>81</td><td>  6.4023437500</td><td>  6.3137515147</td><td>0.0885922353</td><td>   1.403%</td></tr>
<tr><td>82</td><td>  7.1953125000</td><td>  7.1153697224</td><td>0.0799427776</td><td>   1.124%</td></tr>
<tr><td>83</td><td>  8.2031250000</td><td>  8.1443464280</td><td>0.0587785720</td><td>   0.722%</td></tr>
<tr><td>84</td><td>  9.5273437500</td><td>  9.5143644542</td><td>0.0129792958</td><td>   0.136%</td></tr>
<tr><td>85</td><td> 11.6640625000</td><td> 11.4300523028</td><td>0.2340101972</td><td>   2.047%</td></tr>
<tr><td>86</td><td> 14.5000000000</td><td> 14.3006662567</td><td>0.1993337433</td><td>   1.394%</td></tr>
<tr><td>87</td><td> 19.1328125000</td><td> 19.0811366877</td><td>0.0516758123</td><td>   0.271%</td></tr>
<tr><td>88</td><td> 30.0898437500</td><td> 28.6362532829</td><td>1.4535904671</td><td>   5.076%</td></tr>
<tr><td>89</td><td> 60.2109375000</td><td> 57.2899616308</td><td>2.9209758692</td><td>   5.099%</td></tr>
</table>



<p><a name="k06"></a></p>
<h1>6. Výpis celého demonstraèního pøíkladu</h1>

<p>V&nbsp;této kapitole je uveden výpis celého demonstraèního pøíkladu, který
byl odladìn pro tøicetidvoubitové pøekladaèe jazyka C. Otestování bylo
provedeno pomocí GCC 3.4.2 (uznávám, je to ponìkud star¹í, zato v¹ak stabilní
verze) a Borland C++ Compileru 5.5 (pro Windows) bì¾ícím v&nbsp;re¾imu
pøekladaèe C:</p>

<pre>

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

/* poèet míst pøed a za binární øádovou teèkou */
#define A 16
#define B 16

/* Ludolfovo èíslo */
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

/* maximální poèet iterací pøi bìhu algoritmu */
#define MAX_ITER 16

/* "zesílení" pøi rotacích */
#define K 0.6073

/* pøevody mezi stupni a radiány */
#define rad2deg(rad) ((rad)*180.0/M_PI)
#define deg2rad(deg) ((deg)/180.0*M_PI)

/* datový typ, se kterým budeme pracovat */
typedef signed int fx;

/* hlavièky pou¾itých funkcí */
void   fx_print(fx x);
fx     fp2fx(double x);
double fx2fp(fx x);

/* tabulka arkustangentu úhlù */
fx atans[MAX_ITER];

/* tabulka záporných celoèíselných mocnin hodnoty 2 */
fx pows[MAX_ITER];

/*
 * Tisk numerické hodnoty ulo¾ené ve formátu pevné
 * øádové binární èárky (FX)
 */
void fx_print(fx x)
{
    int i;
    int val=x;                         /* pomocná promìnná pro pøevod do dvojkové soustavy */
    printf("bin: ");
    for (i=0; i&lt;A+B; i++) {            /* pøevod na øetìzec bitù (do dvojkové soustavy) */
        putchar(!!(val &amp; (1&lt;&lt;(A+B-1)))+'0'); /* výpis hodnoty aktuálnì nejvy¹¹ího bitu */
        if (i==B-1) putchar('.');      /* po øádové binární èárce vypsat znaèku */
        val=val&lt;&lt;1;                    /* posun na dal¹í (ménì významný) bit */
    }

    printf("   hex: %08x   fp: %+11.5f\n", x, fx2fp(x));
}

/*
 * Pøevod z formátu plovoucí øádové binární èárky (FP)
 * do formátu pevné øádové binární èárky (FX)
 */
fx fp2fx(double x)
{
    return (fx)(x*(2&lt;&lt;(B-1)));
}

/*
 * Pøevod z celoèíselného formátu (integer)
 * do formátu pevné øádové binární èárky (FX)
 */
fx int2fx(int x)
{
    return (fx)(x&lt;&lt;B);
}

/*
 * Pøevod z formátu pevné øádové binární èárky (FX)
 * do formátu plovoucí øádové binární èárky (FP)
 */
double fx2fp(fx x)
{
    return (double)x/(2&lt;&lt;(B-1));
}

/*
 * Souèet dvou hodnot ulo¾ených ve shodném formátu
 * pevné binární øádové èárky (FX)
 */
fx fx_add(fx x, fx y)
{
    return x+y;
}

/*
 * Rozdíl dvou hodnot ulo¾ených ve shodném formátu
 * pevné binární øádové èárky (FX)
 */
fx fx_sub(fx x, fx y)
{
    return x-y;
}

/*
 * Souèin dvou hodnot ulo¾ených ve shodném formátu
 * pevné binární øádové èárky (FX)
 */
fx fx_mul(fx x, fx y)
{
    fx result=(x&gt;&gt;(B/2))*(y&gt;&gt;(B/2));
    return result;
}

/*
 * Podíl dvou hodnot ulo¾ených ve shodném formátu
 * pevné binární øádové èárky (FX)
 */
fx fx_div(fx x, fx y)
{
    fx result=x/(y&gt;&gt;(B/2));
    return result&lt;&lt;(B/2);
}

/*
 * Vytvoøení tabulky pro výpoèet goniometrických
 * funkcí pomocí algoritmu CORDIC
 */
void fx_create_tables(void)
{
    int i;
    for (i=0; i&lt;MAX_ITER; i++) {
        double p=pow(2.0, -i);
        atans[i]=fp2fx(atan(p));
        pows[i]=fp2fx(p);
    }
}

/* výpoèet funkce tan() pro zadaný úhel delta */
/* (neoptimalizovaná verze) */
fx fx_tan_cordic(fx delta)
{
    int i;
    /* nastavení poèáteèních podmínek */
    fx x0=fp2fx(1.0);
    fx y0=fp2fx(0.0);
    fx xn;
    if (delta==0) return 0;                 /* o¹etøení nulového úhlu */
    for (i=0; i&lt;MAX_ITER; i++) {            /* iteraèní smyèka */
        if (delta&lt;0) {                      /* úhel je záporný =&gt; rotace doleva */
            xn=fx_add(x0, fx_mul(y0, pows[i]));
            y0=fx_sub(y0, fx_mul(x0, pows[i]));
            delta=fx_add(delta, atans[i]);
        }
        else {                              /* úhel je kladný =&gt; rotace doprava */
            xn=fx_sub(x0, fx_mul(y0, pows[i]));
            y0=fx_add(y0, fx_mul(x0, pows[i]));
            delta=fx_sub(delta, atans[i]);
        }
        x0=xn;
/*        printf("%i\t%+f\t%+f\t%+f\n", i, fx2fp(x0), fx2fp(y0), fx2fp(delta)); */
    }
    if (x0==0)                              /* o¹etøení tangenty pravého úhlu */
        if (y0&lt;0) return 0;
        else return 0;
    else
        return fx_div(y0,x0);               /* vrátit výsledek operace */
}

/* výpoèet funkce tan() pro zadaný úhel delta */
/* (optimalizovaná verze) */
fx fx_tan_cordic_optim(fx delta)
{
    int i;
    /* nastavení poèáteèních podmínek */
    fx x0=int2fx(1);
    fx y0=0;
    fx xn;
    if (delta==0) return 0;                 /* o¹etøení nulového úhlu */
    for (i=0; i&lt;MAX_ITER; i++) {            /* iteraèní smyèka */
        if (delta&lt;0) {                      /* úhel je záporný =&gt; rotace doleva */
            xn=fx_add(x0, y0&gt;&gt;i);           /* místo násobení bitový posuv */
            y0=fx_sub(y0, x0&gt;&gt;i);
            delta=fx_add(delta, atans[i]);
        }
        else {                              /* úhel je kladný =&gt; rotace doprava */
            xn=fx_sub(x0, y0&gt;&gt;i);
            y0=fx_add(y0, x0&gt;&gt;i);
            delta=fx_sub(delta, atans[i]);
        }
        x0=xn;
    }
    if (x0==0)                              /* o¹etøení tangenty pravého úhlu */
        if (y0&lt;0) return 0;
        else return 0;
    else
        return fx_div(y0,x0);               /* vrátit výsledek operace */
}


int main(void)
{
    int i;
    fx     tanfx;
    double delta;                       /* úhel, ze kterého se poèítá tan */
    double tanval;                      /* vypoètené hodnoty */
    double tanerr;                      /* absolutní chyby */

    fx_create_tables();

    /* kontrolní výpis tabulky atans[] */
    puts("\nHodnoty ulo¾ené v tabulce atans[]:");
    for (i=0; i&lt;MAX_ITER; i++)
        printf("%d\t%f\n", i, fx2fp(rad2deg(atans[i])));
        /*printf("%f\n", fx2fp(pows[i])); */

    /* výpoèet tan() neooptimalizovanou metodou CORDIC */
    puts("\nVýpoèet tan() neoptimalizovanou metodou CORDIC");
    for (i=0; i&lt;90; i++) {                  /* výpoèetní smyèka */
        delta=deg2rad(i);                   /* pøevod úhlu na radiány */
        tanfx=fx_tan_cordic(fp2fx(delta));  /* aplikace algoritmu CORDIC */
        tanval=fx2fp(tanfx);                /* výpoèet funkce tan */
        tanerr=fabs(tanval-tan(delta));     /* výpoèet absolutních chyb */
                                            /* tisk výsledkù */
        printf("%02d\t%14.10f\t%14.10f\t%12.10f\t%8.3f%%\n",
                i,
                tanval,
                tan(delta),
                tanerr,
                tanerr==0 ? 0:100.0*tanerr/tan(delta));
    }

    /* výpoèet tan() optimalizovanou metodou CORDIC */
    puts("\nVýpoèet tan() optimalizovanou metodou CORDIC");
    for (i=0; i&lt;90; i++) {                  /* výpoèetní smyèka */
        delta=deg2rad(i);                   /* pøevod úhlu na radiány */
        tanfx=fx_tan_cordic_optim(fp2fx(delta));  /* aplikace algoritmu CORDIC */
        tanval=fx2fp(tanfx);                /* výpoèet funkce tan */
        tanerr=fabs(tanval-tan(delta));     /* výpoèet absolutních chyb */
                                            /* tisk výsledkù */
        printf("%02d\t%14.10f\t%14.10f\t%12.10f\t%8.3f%%\n",
                i,
                tanval,
                tan(delta),
                tanerr,
                tanerr==0 ? 0:100.0*tanerr/tan(delta));
    }
    return 0;
}

</pre>



<p><a name="k07"></a></p>
<h1>7. Obsah poslední èásti tohoto seriálu</h1>

<p>Seriál o numerických formátech s&nbsp;pevou a plovoucí binární øádovou
èárkou se blí¾í ke svému závìru. V&nbsp;následujícím a souèasnì i posledním
dílu si uká¾eme implementaci dal¹ích goniometrických funkcí algoritmem CORDIC
pracujícím nad FX formátem.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Ti¹novský</a> &nbsp; 2006</small></p>
</body>
</html>

