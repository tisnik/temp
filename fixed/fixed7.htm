<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Výpočty v systému pevné řádové tečky VII</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=iso-8859-2" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Výpočty v systému pevné řádové čárky VII - Základní aritmetické operace prováděné v FX formátu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V sedmé části seriálu věnovaného matematickým výpočtům s čísly uloženými ve formátu pevné i plovoucí řádové binární čárky budou uvedeny postupy používané při aritmetických operacích prováděných s číselnými hodnotami reprezentovanými v systému pevné řádové binární čárky. Popíšeme si zejména základní aritmetické operace, tj. součet, rozdíl, součin a podíl. Také si ukážeme nejjednodušší způsob převodu hodnot z formátu FP do formátu FX a zpět.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Kvantitativní popis zvolené reprezentace numerických hodnot ve formátu FX</a><br />
&nbsp; &nbsp; &nbsp; <a href="#k011">1.1 Přesnost</a><br />
&nbsp; &nbsp; &nbsp; <a href="#k012">1.2 Rozlišení</a><br />
&nbsp; &nbsp; &nbsp; <a href="#k013">1.3 Rozsah</a><br />
&nbsp; &nbsp; &nbsp; <a href="#k014">1.4 Dynamický rozsah</a><br />
&nbsp; &nbsp; &nbsp; <a href="#k015">1.5 Zhodnocení</a><br />
<a href="#k02">2. Základní aritmetické operace prováděné ve formátu FX</a><br />
<a href="#k03">3. Součet</a><br />
<a href="#k04">4. Rozdíl</a><br />
<a href="#k05">5. Součin</a><br />
<a href="#k06">6. Podíl</a><br />
<a href="#k07">7. Převod z&nbsp;FP formátu do FX formátu</a><br />
<a href="#k08">8. Převod z&nbsp;FX formátu do FP formátu</a><br />
<a href="#k09">9. Obsah dalšího pokračování tohoto seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Kvantitativní popis zvolené reprezentace numerických hodnot ve formátu FX</h1>

<p><i>Back in the olden days of dragons and sorcerers, before floating point
coprocessors, computers could only directly manipulate whole numbers
(integers). Things like decimal points were new fangled technologies only used
by crazy mathematicians with slide rules and pen and paper. To overcome this
deficiency crufty old-school programmers, many of whom today are over 30 years
old, had to resort to various hacks and tricks in order to represent wacky
numerical concepts like "0.5" The most common technique was fixed point
math.</i></p>

<p>Při bližším pohledu na číselné hodnoty uložené v&nbsp;některém
ze&nbsp;systémů pevné řádové binární čárky (FX formátu) se mnohdy nevyhneme
nutnosti kvantitativního popisu číselných hodnot, jež je možné v&nbsp;zadaném
formátu ukládat. Vlastnosti množin všech možných hodnot, jichž mohou čísla
ve&nbsp;vybraném formátu nabývat, je možné popsat pomocí veličin popsaných
v&nbsp;následujících podkapitolách.</p>



<p><a name="k011"></a></p>
<h2>1.1 Přesnost</h2>

<p>Přesnost (<strong>precision</strong>) <i>X<sub>prec</sub></i> značí
maximální počet reprezentovatelných bitů, jež je možné nezávisle na ostatních
bitech měnit, tj.&nbsp;nejsou stále nastaveny na&nbsp;konstantní nulovou či
naopak jednotkovou hodnotu ani nejsou kopií předchozích či naopak následujících
bitů. U&nbsp;formátů numerických hodnot uložených v&nbsp;pevné řádové binární
čárce je přesnost rovna přímo délce bitového vektoru, tj.&nbsp;počtu bitů
ve&nbsp;slově, kterými je číselná hodnota jednoznačně popsána. To ovšem platí
pro čísla kladná nebo čísla uložená ve dvojkovém doplňku; v&nbsp;případě
jedničkového doplňku nikoli.</p>



<p><a name="k012"></a></p>
<h2>1.2 Rozlišení</h2>

<p>Rozlišení (<strong>resolution</strong>) <i>X<sub>res</sub></i> je možné
vyjádřit absolutní hodnotou nejmenšího reprezentovatelného nenulového čísla.
Příkladem může být formát <i>A(13,2)</i>, u&nbsp;něhož je rozlišení rovno
<i>1/2<sup>2</sup>=0,25<sub>(10)</sub></i>, nebo formát <i>A(15,0)</i>, kde je
rozlišení rovno <i>1/2<sup>0</sup>=1,00<sub>(10)</sub></i>. To znamená, že
v&nbsp;daném formátu <i>A(13,2)</i> od sebe nelze jednoznačně rozlišit dvě
navzájem rozdílné číselné hodnoty, které se od sebe liší o&nbsp;hodnotu menší
než <i>0,25</i> a formát <i>A(15,0)</i> uchovává pouze celočíselnou část
numerické hodnoty, tj.&nbsp;nerozliší například hodnoty
<i>123,4<sub>(10)</sub></i> a <i>123,5<sub>(10)</sub></i>.</p>



<p><a name="k013"></a></p>
<h2>1.3 Rozsah</h2>

<p>Rozsah (<strong>range</strong>) <i>X<sub>ran</sub></i> lze vyjádřit pomocí
rozdílu mezi nejvyšší a nejnižší reprezentovatelnou hodnotou, s&nbsp;uvažováním
znaménka reprezentovatelných hodnot, tj.</p>

<p><i>U<sub>ran</sub>=U<sub>max+</sub>-U<sub>max-</sub></i><br />
<i>A<sub>ran</sub>=A<sub>max+</sub>-A<sub>max-</sub></i></p>

<p>Příkladem budiž opět formát <i>A(13,2)</i>, jehož rozsah lze vypočítat následovně:</p>

<p><i>A<sub>ran</sub>=A<sub>max+</sub>-A<sub>max-</sub>=8191,75-(-8192,00)=16383,75<sub>(10)</sub></i></p>



<p><a name="k014"></a></p>
<h2>1.4 Dynamický rozsah</h2>

<p>Dynamický rozsah (<strong>dynamic range</strong>) <i>X<sub>dr</sub></i> je
dán poměrem mezi maximální absolutní hodnotou a minimální kladnou nenulovou
reprezentovanou hodnotou. Pro formát typu <i>A(a,b)</i> se dynamický rozsah
vyjádří následujícím vztahem:</p>

<p><i>A<sub>dr</sub>(a,b)=2&times;2<sup>a</sup>/2<sup>-b</sup>=2<sup>a+b+1</sup>=2<sup>N</sup></i></p>

<p>Obdobný vztah platí i pro formát <i>U(a,b)</i>:</p>

<p><i>U<sub>dr</sub>(a,b)=(2<sup>a</sup>-2<sup>-b</sup>)/2<sup>-b</sup>=2<sup>a+b</sup>-1=2<sup>N</sup>-1</i></p>

<p>Všimněte si zajímavého výsledku předchozích vztahů: dynamický rozsah není
závislý na poloze binární čárky, pouze na počtu bitů. To je ovšem logické,
protože při přímém dělení dvou čísel uložených v&nbsp;FX formátu
(tj.&nbsp;dělení bez ohledu na binární tečku) vlastně dochází k&nbsp;dělení
celočíselnému.</p>



<p><a name="k015"></a></p>
<h2>1.5 Zhodnocení</h2>

<p>Při provádění výpočtů s&nbsp;hodnotami uloženými v&nbsp;systému pevné řádové
binární čárky je nutné <strong>pro každou</strong> zpracovávanou veličinu či
bezrozměrnou hodnotu správně nastavit všechny zmíněné vlastnosti,
tj.&nbsp;přesnost <i>X<sub>pre</sub></i>, rozlišení <i>X<sub>res</sub></i>,
rozsah <i>X<sub>ran</sub></i> a dynamický rozsah <i>X<sub>dr</sub></i>. Již
z&nbsp;výše uvedeného popisu těchto vlastností je zřejmé, že se všechny
vlastnosti vzájemně ovlivňují, tj.&nbsp;například nastavení přesnosti a
rozlišení určuje další dvě vlastnosti apod.</p>

<p>V&nbsp;praxi se pro každou veličinu určí zejména rozsah a požadované
rozlišení a následně se provede zjištění, zda je možné hodnoty dané veličiny
ve&nbsp;vybraném formátu reprezentovat, či zda se musí provést redukce některé
z&nbsp;vlastností, například snížení přesnosti či rozsahu hodnot.</p>

<p>Vzhledem k&nbsp;tomu, že se všechny výpočty budou povětšinou provádět na
flexibilních čipech (CPU, DSP či FPGA), není nutné se omezit na pevně daný
formát pro všechny veličiny s&nbsp;nimiž se výpočty mají provádět, protože
každou část výpočtu lze provádět s&nbsp;hodnotami uloženými v&nbsp;jiném
formátu s&nbsp;velmi jednoduchým převodem mezi jednotlivými formáty.</p>

<p><strong>To je největší předností, ale současně i největší slabinou FX
formátu.</strong> Předností je tato flexibilita pro toho, kdo zpracovávaný
problém dokáže dobře analyzovat a následně pro jeho řešení navrhnout vhodné
algoritmy (se znalostí hardwaru, na kterém výpočty poběží); výrazná slabina pro
týmy preferující rychlý ("quick and dirty") vývoj &ndash; prototypování se
většinou provádí ve vyšších programovacích jazycích, často s&nbsp;dynamickým
typováním (Python, LISP), nebo netypových (Tcl, PHP) s&nbsp;podporou "velkých"
celočíselných a neceločíselných údajů. Při přenosu programu do jazyků
s&nbsp;datovými typy odpovídajícími použitému hardwaru (většinou se jedná o
typy <i>byte/short int/int/long long int</i>, <i>float/single</i> a
<i>double</i>) potom mohou vznikat těžko odhalitelné chyby.</p>



<p><a name="k02"></a></p>
<h1>2. Základní aritmetické operace prováděné ve formátu FX</h1>

<p>V&nbsp;dalších kapitolách si ukážeme způsob implementace základních
aritmetických operací s&nbsp;numerickými hodnotami uloženými v&nbsp;FX formátu.
Při praktických ukázkách budeme většinou používat formáty <i>U(16,16)</i>
resp.&nbsp;<i>A(15,16)</i>, a to zejména z&nbsp;toho důvodu, že pro zápis
jednotlivých bitů je možné v&nbsp;těchto formátech s&nbsp;výhodou využít
hexadecimálního zápisu. Ten bude odpovídat C-čkovské syntaxi, tj.&nbsp;každá
šestnáctková hodnota bude začínat znaky <strong>0x</strong>. Tyto formáty jsou
také využitelné na prakticky všech dnes používaných platformách, zejména na
třicetidvoubitových procesorech, ale i na mnoha digitálních signálových
procesorech či mikrořadičích. U&nbsp;obou zmiňovaných formátů je možné
jednotlivé bity zapsat následovně:</p>

<p><strong>0xWWWWFFFF</strong></p>

<p>kde horních šestnáct bitů představuje celou část čísla
(<i><strong>w</strong>hole part</i>) a dolních šestnáct bitů část zlomkovou
(<i><strong>f</strong>ractional part</i>). V&nbsp;případě formátu
<i>A(15,16)</i> je použit dvojkový doplněk, tj.&nbsp;čísla kladná mají nejvyšší
bit nulový, zatímco čísla záporná jsou tvořena inverzí své absolutní hodnoty a
přičtením jedničky &ndash; tím pádem je u záporných čísel nejvyšší bit vždy
nastavený na jedničku.</p>

<p>Na tomto místě je opět vhodné poznamenat, že volba konkrétního formátu úzce
souvisí se zpracovávaným problémem. Pokud bychom například potřebovali ukládat
hodnoty goniometrické funkce sinus, bylo by vhodnější zvolit místo formátu
<i>A(15,16)</i> spíše formát <i>A(2,29)</i>, čímž se zvýší jak rozlišení, tak i
využití všech bitů ve třicetidvoubitovém slově, protože hodnota funkce sinus
leží v&nbsp;intervalu -1,0<sub>(10)</sub>..+1,0<sub>(10)</sub>, pro
celočíselnou část tedy není zapotřebí rezervovat celých šestnáct bitů.</p>



<p><a name="k03"></a></p>
<h1>3. Součet</h1>

<p>Základní aritmetickou operací je nepochybně součet dvou číselných hodnot.
Ten je možné provádět pouze v&nbsp;případě, že obě hodnoty mají stejný formát,
tj.&nbsp;shodný počet bitů před a za binární řádovou čárkou. Pokud je tato
podmínka splněna, je možné součet dvou numerických hodnot <i>A</i> a <i>B</i>
zapsat následovně:</p>

<p><i>A&times;2<sup>b</sup>+B&times;2<sup>b</sup>=(A+B)&times;2<sup>b</sup></i></p>

<p>Vidíme, že není žádný rozdíl mezi součtem dvou celočíselných hodnot
(integer) a hodnot uložených v&nbsp;FX formátu. To je jistě výhodné, protože
při praktické implementaci je možné využít přímo instrukce nabízené použitým
mikroprocesorem resp.&nbsp;jeho aritmeticko-logickou jednotkou.
V&nbsp;předchozí části tohoto seriálu jsme si řekli, že bitovou délku výsledků
po aritmetické operaci dvou číselných hodnot uložených v&nbsp;FX formátech
<i>U(a,b)</i> a <i>A(a,b)</i> je možné vyjádřit pomocí vztahů:</p>

<p><i>U(a,b)+U(a,b)=U(a+1,b)</i><br />
<i>A(a,b)+A(a,b)=A(a+1,b)</i></p>

<p>tj.&nbsp;pro uložení výsledku je obecně zapotřebí vyhradit slovo širší právě
o jeden bit. Vzhledem k&nbsp;tomu, že se ve většině aplikací přesnost
nezvyšuje, může při součtu nastat přetečení (<i>overflow</i>), což je stav, kdy
se výsledná hodnota již nevejde do nastaveného počtu bitů. Přetečení je při
provádění aritmetické operace součtu v&nbsp;aritmeticko-logické jednotce (ALU)
většinou signalizováno nastavením příznaků <strong>CF</strong> (<i>carry
flag</i>, příznak přenosu) a <strong>OF</strong> (<i>overflow flag</i>, příznak
přetečení do znaménkového bitu). Příznak přenosu ve své podstatě nahrazuje
chybějící <i>N+1</i> bit výsledku a mnohdy se také k&nbsp;tomuto účelu používá,
například při víceslovním sčítání. Příznak přetečení signalizuje přetečení
výsledku do znaménkového (nejvyššího) bitu, což výsledek samozřejmě znehodnotí
(z&nbsp;kladného čísla se stane záporné a naopak). Při práci s&nbsp;formátem
<i>U(a,b)</i> postačí testovat pouze příznak přenosu, naopak formát
<i>A(a,b)</i> vyžaduje oba příznaky, protože zde je situace složitější díky
práci s&nbsp;dvojkovým doplňkem.</p>



<p><a name="k04"></a></p>
<h1>4. Rozdíl</h1>

<p>Aritmetická operace rozdílu se provádí naprosto stejným způsobem, jako
aritmetická operace součtu. Pokud mají obě hodnoty vstupující do operace stejný
počet bitů před a za binární řádovou čárkou, je splněna podmínka pro provedení
operace rozdílu, kterou je možné zapsat následovně:</p>

<p><i>A&times;2<sup>b</sup>-B&times;2<sup>b</sup>=(A-B)&times;2<sup>b</sup></i></p>

<p>Pokud se počty bitů před a za binární řádovou tečkou liší, je nutné provést
přepočet jedné nebo obou hodnot na stejný formát. Přepočet spočívá
v&nbsp;pouhém bitovém posunu doleva či doprava. Stejně jako v&nbsp;případě
součtu, i u rozdílu dvou hodnot je nutné počítat s&nbsp;tím, že výsledek
vyžaduje větší bitovou šířku (opět minimálně o jeden bit).</p>



<p><a name="k05"></a></p>
<h1>5. Součin</h1>

<p>Operace součinu je již poněkud složitější, než výše uvedené operace součtu a
rozdílu. Je to z&nbsp;toho důvodu, že se počet bitů výsledku rapidně zvyšuje,
což může na některých architekturách způsobovat problémy s&nbsp;malou bitovou
šířkou násobičky vestavěné v&nbsp;aritmeticko-logické jednotce. Formát výsledku
je možné vyjádřit následovně:</p>

<p><i>U(a<sub>1</sub>, b<sub>1</sub>) &times; U(a<sub>2</sub>, b<sub>2</sub>)=U(a<sub>1</sub>+a<sub>2</sub>, b<sub>1</sub>+b<sub>2</sub>)</i><br />
<i>A(a<sub>1</sub>,b<sub>1</sub>) &times; A(a<sub>2</sub>, b<sub>2</sub>)=A(a<sub>1</sub>+a<sub>2</sub>+1, b<sub>1</sub>+b<sub>2</sub>)</i></p>

<p>Přitom je možné násobit dvě hodnoty, jejichž formáty jsou rozdílné,
tj.&nbsp;počet bitů před a za binární řádovou čárkou může být rozdílný. Dokonce
je možné provést vynásobení celočíselné hodnoty hodnotou uloženou ve formátu FX
&ndash; to u operací součtu a rozdílu možné nebylo. Konkrétně, tj.&nbsp;pro
vybrané formáty <i>U(16,16)</i> a <i>A(15,16)</i> nabývá výsledek součinu
tvaru:</p>

<p><i>U(16,16) &times; U(16,16)=U(32,32)</i><br />
<i>A(15,16) &times; A(15,16)=A(31,32)</i></p>

<p>Z&nbsp;původně třicetidvoubitových slov se tedy stala slova
šedesátičtyřbitová. Na architektuře x86 to nezpůsobuje větší problémy, protože
operace násobení svůj výsledek ukládá do dvojice registrů, na některých DSP je
však bitová šířka výsledku menší. Z&nbsp;toho důvodu se může před operací
násobení uměle zmenšit přesnost hodnot vstupujících do této operace, například
tak, že se hodnota posune o <i>n</i> bitů doprava. To má samozřejmě za následek
nárůst chyby výpočtu. V&nbsp;případě, že je požadován stejný formát výsledku,
jako je formát obou operandů, musí dojít k&nbsp;bitovému posunu výsledku o
<i>b</i> bitů doprava a k&nbsp;odseknutí horních <i>a</i> bitů.</p>

<p>Pokud bychom například měli k&nbsp;dispozici pouze třicetidvoubitovou
násobičku, mohou se vstupující hodnoty upravit z&nbsp;formátu <i>U(16,16)</i>
na formát <i>U(24,8)</i> prostým posunem o 8 bitů doprava. Horních osm bitů je
přitom nastaveno na nulovou hodnotu, fyzicky se tedy jedná o formát
<i>U(24,8)</i>, logicky však o formát <i>U(16,8)</i>. Výsledek násobení dvou
hodnot bude nabývat tvaru <i>U(16+16,8+8)=U(32,16)</i>, ale vzhledem
k&nbsp;tomu, že násobička je pouze třicetidvoubitová, je výsledek ořezán do
formátu <i>U(16,16)</i>, tj.&nbsp;pro mnoho vstupujících hodnot je
pravděpodobné, že při násobení dojde k&nbsp;přetečení a tím pádem i
k&nbsp;znehodnocení výsledku.</p>

<p>Na to je zapotřebí při implementaci FX formátu neustále myslet, zejména u
operací, při kterých je sice výsledek poměrně malý (odpovídající vstupním
hodnotám), ale v&nbsp;průběhu výpočtu se pracuje s&nbsp;hodnotami mnohem
většími. Typickým příkladem je výpočet délky vektoru v&nbsp;ploše či prostoru,
při kterém se provádí umocňování jednotlivých složek (zde může dojít
k&nbsp;přetečení) a po součtu druhých mocnin dojde k&nbsp;odmocnění, takže
výsledek je sice řádově srovnatelný se vstupními údaji, ale uvnitř výpočtu se
pracuje s&nbsp;mnohem většími hodnotami.</p>



<p><a name="k06"></a></p>
<h1>6. Podíl</h1>

<p>Při podílu dvou hodnot se opět mohou pro dělence a dělitele použít rozdílné
FX formáty, včetně čísel celočíselných. Formát výsledku se určí podle
vztahů:</p>

<p><i>U(a<sub>1</sub>, b<sub>1</sub>)/U(a<sub>2</sub>,b<sub>2</sub>)=U(a<sub>1</sub>+b<sub>2</sub>, | log<sub>2</sub>(2<sup>a<sub>2</sub>+b<sub>1</sub></sup>-2<sup>b<sub>1</sub>-b<sub>2</sub></sup>)|)</i><br />
<i>A(a<sub>1</sub>, b<sub>1</sub>)/A(a<sub>2</sub>, b<sub>2</sub>)=A(a1+b2+1, a2+b1)</i></p>

<p>Což pro námi zvolené formáty <i>U(16,16)</i> a <i>A(15,16)</i> znamená:</p>

<p><i>U(16,16)/U(16,16)=U(16+16, |log<sub>2</sub>2<sup>16+16</sup>-2<sup>16-16</sup>|)=U(32,31)</i><br />
<i>A(15,16)/A(15,16)=A(32, 31)</i></p>

<p>O podílu platí téměř stejné údaje, jako u operace násobku, tj.&nbsp;na
některých architekturách mohou nastat problémy z&nbsp;důvodu malé bitové šířky
děličky. V&nbsp;těchto případech se (opět) může provést úprava dělence a
dělitele před vstupem do operace podílu. Buď se zabrání přetečení výsledku
(dělení dělencem bitově posunutým doleva), nebo se naopak zvýší přesnost
výsledku s&nbsp;tím rizikem, že může dojít k&nbsp;přetečení. Na architektuře
x86 je však dělení podporováno i pro dvojnásobně široké operandy (dvojice
registrů).</p>



<p><a name="k07"></a></p>
<h1>7. Převod z&nbsp;FP formátu do FX formátu</h1>

<p>Nejjednodušší (ale v&nbsp;některých případech i zdlouhavý) převod
numerických hodnot z&nbsp;formátu plovoucí řádové čárky do formátu pevné řádové
čárky je možné provést pomocí jednoduché operace:</p>

<p><i>X<sub>FX</sub>=X<sub>FP</sub>&times;2<sup>b</sup></i></p>

<p>Alternativně je možné provést programovou rotaci mantisy FP hodnoty tak, aby
hodnota exponentu odpovídala požadovanému počtu bitů <i>b</i>. Na tomto místě
je vhodné podotknout, že některé matematické koprocesory (FPU) přímo obsahují
instrukci násobení a dělení celočíselnou mocninou dvou, která je rychlejší, než
obecné násobení, takže programová rotace mantisy může být pomalejší než výše
uvedené násobení.</p>

<p>Pro převod celočíselné hodnoty (integer) do formátu pevné řádové tečky se
provede pouze bitový posun původní hodnoty o <i>b</i> bitů doleva, což je opět
podporovaná operace (tentokrát prováděná na CPU a nikoli na FPU):</p>

<p><i>X<sub>FX</sub>=X<sub>INT</sub>&lt;&lt;b</i></p>



<p><a name="k08"></a></p>
<h1>8. Převod z&nbsp;FX formátu do FP formátu</h1>

<p>Zpětný převod numerické hodnoty z&nbsp;formátu pevné řádové čárky do formátu
řádové čárky plovoucí, se v&nbsp;nejjednodušším případě provádí převrácením
postupu uvedeného v&nbsp;předchozí kapitole, tj:</p>

<p><i>X<sub>FP</sub>=X<sub>FX</sub>/2<sup>b</sup></i></p>

<p>Za povšimnutí však stojí fakt, že například FX formát <i>A(15,16)</i> či
<i>U(16,16)</i> <strong>není možné</strong> převést beze ztráty přesnosti na FP
formát <i>float/single</i>, i když mají oba formáty pro číselnou hodnotu
vyhrazen stejný počet bitů. Je tomu tak proto, že v&nbsp;FP formátu je část
bitů určena pro uložení exponentu, což samozřejmě u FX formátů
s&nbsp;implicitně umístěnou binární řádovou čárkou není nutné (binární tečka je
určena programově a není ji tedy zapotřebí ukládat spolu se zpracovávanou
hodnotou). Z&nbsp;tohoto důvodu se při převodu mezi FX formáty a FP formáty se
stejným počtem bitů počítá se ztrátou přesnosti a také je vhodné nastavit
vhodný způsob zaokrouhlení. Většinou jsou podporovány čtyři režimy
zaokrouhlení, jejich volba závisí na povaze řešeného (počítaného) problému:</p>

<ol>
<li><i>round to zero</i>: zaokrouhlení směrem k&nbsp;nule, tj.&nbsp;kladná čísla k&nbsp;pravému konci osy a záporná čísla k&nbsp;levému konci</li>
<li><i>round to +inf</i>: zaokrouhlení směrem k&nbsp;+&infin;, tj.&nbsp;k&nbsp;levému konci osy</li>
<li><i>round to -inf</i>: zaokrouhlení směrem k&nbsp;-&infin;, tj.&nbsp;k&nbsp;pravému konci osy</li>
<li><i>round to nearest</i>: zaokrouhlení k&nbsp;nejbližší reprezentovatelné hodnotě</li>
</ol>



<p><a name="k09"></a></p>
<h1>9. Obsah dalšího pokračování tohoto seriálu</h1>

<p>Příště si již ukážeme algoritmy (realizované v&nbsp;programovacím jazyce C),
ve kterých budou implementovány základní aritmetické operace s&nbsp;FX
formátem, samozřejmě včetně převodu z&nbsp;FP formátu do FX formátu a
naopak.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2006</small></p>
</body>
</html>

