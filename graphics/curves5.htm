<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Parametrické křivky používané v designu i při tvorbě animací</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Parametrické křivky používané v designu i při tvorbě animací</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Bézierovy křivky podrobněji</a></p>
<p><a href="#k02">2. Lineární interpolace</a></p>
<p><a href="#k03">3. Zobecnění lineární interpolace</a></p>
<p><a href="#k04">4. Binomická věta a Bernsteinovy polynomy</a></p>
<p><a href="#k05">5. Bernsteinovy polynomy stupně jedna až pět</a></p>
<p><a href="#k06">6. Ověření základních vlastností Bernsteinových polynomů</a></p>
<p><a href="#k07">7. Součet všech Bernsteinových polynomů stupně jedna až pět</a></p>
<p><a href="#k08">8. Jak je tomu v&nbsp;případě Coonsových kubik?</a></p>
<p><a href="#k09">9. Konstrukce křivky z&nbsp;několika na sebe navazujících segmentů</a></p>
<p><a href="#k10">10. Parametrická a geometrická spojitost C<sup>n</sup> a G<sup>n</sup></a></p>
<p><a href="#k11">11. Zajištění spojitosti C<sup>1</sup> nebo G<sup>1</sup> u Bézierových křivek</a></p>
<p><a href="#k12">12. Poznámka k&nbsp;Coonsovým kubikám a uniformním racionálním B-spline křivkám</a></p>
<p><a href="#k13">13. Křivky používané v&nbsp;animacích</a></p>
<p><a href="#k14">14. Catmul-Romovy spline</a></p>
<p><a href="#k15">15. Bázové polynomy Catmul-Romovy spline</a></p>
<p><a href="#k16">16. Výpočet a vykreslení jednoho segmentu Catmul-Romovy spline</a></p>
<p><a href="#k17">17. Vykreslení celé spline složené z&nbsp;většího množství segmentů</a></p>
<p><a href="#k18">18. Násobné koncové body Catmul-Romovy spline</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Bézierovy křivky podrobněji</h2>

<p>Na <a
href="https://www.root.cz/clanky/krivky-urcene-polynomem-nejpouzivanejsi-krivky-v-soucasnosti/">předchozí
část</a> <a
href="https://www.root.cz/serialy/krivky-nejen-v-pocitacove-grafice/">seriálu o
křivkách používaných (nejenom) v&nbsp;počítačové grafice</a> dnes navážeme.
Minule jsme si totiž &ndash; prozatím ovšem bez větších podrobností &ndash;
představili jeden velmi důležitý typ <i>parametrických křivek</i>. Jedná se o
<i>Bézierovy aproximační křivky</i>, jenž se dnes používají například při
popisu znaků (TrueType), dále <a
href="https://www.root.cz/clanky/vytvarime-krivky-v-postscriptu/">v&nbsp;PostScriptu</a>
(a odvozeně taktéž v&nbsp;PDF), <a
href="https://www.root.cz/clanky/cesty-v-souborech-typu-scalable-vector-graphics/">ve
formátu SVG</a>, taktéž v&nbsp;mnoha kreslicích programech (CorelDraw!, Adobe
Illustrator, <a
href="https://designbundles.net/design-school/how-to-use-the-bezier-curve-tool-in-inkscape">Inkscape</a>)
atd. (ovšem nenechme se unést, protože například v&nbsp;animacích se již
používají odlišné křivky, o čemž se dnes záhy taktéž přesvědčíme).</p>

<p>Bézierovy křivky jsou reprezentovány polynomem <i>n</i>-tého stupně, kde
<i>n</i> je volitelná celočíselná hodnota (typicky větší než jedna).
Z&nbsp;mnoha praktických důvodů (výpočetní složitost, lokalita změn, omezení
zákmitů, jednoduchost práce z&nbsp;pohledu uživatele) se ovšem setkáme zejména
z&nbsp;Bézierovými křivkami druhého a třetího stupně, tedy s&nbsp;kubikami a
kvadrikami. Tyto křivky lze na sebe navázat, popř.&nbsp;je zkombinovat
s&nbsp;lineárními segmenty, kruhovými oblouky atd.</p>

<p>Připomeňme si, jak je možné Bézierovy křivky vykreslit. Použijeme přitom
jednoduchý, ale současně i naivní algoritmus, který pro hodnoty
<strong>t</strong> v&nbsp;rozsahu 0 až 1 vypočte x-ové a y-ové souřadnice
křivky, které následně propojí. Nejprve je uveden příklad zobrazující Bézierovu
kvadriku, tedy parametrickou křivku stupně 2, která je z&nbsp;pohledu uživatele
specifikována třemi body &ndash; dvěma body koncovými (těmi křivka prochází) a
jedním řídicím bodem, jímž tato křivka obecně neprochází (jen pokud by všechny
body ležely na jedné přímce), ovšem poloha tohoto bodu ovlivňuje tvar
křivky:</p>

<pre>
<i>"""Parametrická křivka: Bézierova kvadrika."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.05)
&nbsp;
<i># řídicí body Bézierovy kubiky</i>
xc = (1, 2, 3)
yc = (1, 2.9, 1)
&nbsp;
<i># Bernsteinovy polynomy pro Bézierovu kvadriku</i>
B = [<strong>(1-t)**2</strong>,
     <strong>2*t*(1-t)</strong>,
     <strong>t**2</strong>]
&nbsp;
<i># výpočet bodů ležících na Bézierově kvadrice</i>
x = 0
y = 0
for i in range(0, 3):
    x += xc[i]*B[i]
    y += yc[i]*B[i]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Bézierova kvadrika', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 4)
ax.set_ylim(0, 3)
&nbsp;
<i># vrcholy na křivce pospojované úsečkami</i>
ax.plot(x, y, 'g-')
&nbsp;
<i># řídicí body Bézierovy kvadriky</i>
ax.plot(xc, yc, 'ro')
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("bezier_quadric.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<img src="https://i.iinfo.cz/images/488/curves4b-18.png" class="image-479711" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/legalcode.cs&quot;&gt;CC-BY&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 1: Bézierova kvadrika vykreslená předchozím demonstračním
příkladem.</i></p>

<p>Prakticky stejným způsobem, ovšem s&nbsp;využitím čtyř bodů (dvou koncových
a dvou řídicích) lze vykreslit Bézierovu kubickou křivku (neboli zkráceně
kubiku). Zdrojový kód demonstračního příkladu se liší zejména tím, že se
používají odlišné Bernsteinovy polynomu:</p>

<pre>
<i>"""Parametrická křivka: Bézierova kubika."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.05)
&nbsp;
<i># řídicí body Bézierovy kubiky</i>
xc = (1, 1, 3, 3)
yc = (1, 2.9, 0.1, 2)
&nbsp;
<i># Bernsteinovy polynomy</i>
B = [<strong>(1-t)**3</strong>,
     <strong>3*t*(1-t)**2</strong>,
     <strong>3*t**2*(1-t)</strong>,
     <strong>t**3</strong>]
&nbsp;
<i># výpočet bodů ležících na Bézierově kubice</i>
x = 0
y = 0
for i in range(0, 4):
    x += xc[i]*B[i]
    y += yc[i]*B[i]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Bézierova kubika', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 4)
ax.set_ylim(0, 3)
&nbsp;
<i># vrcholy na křivce pospojované úsečkami</i>
ax.plot(x, y, 'g-')
&nbsp;
<i># řídicí body Bézierovy kubiky</i>
ax.plot(xc, yc, 'ro')
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("bezier_cubic.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>Nyní by měl výsledek vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/488/curves4b-20.png" class="image-479713" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/legalcode.cs&quot;&gt;CC-BY&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 2: Bézierova kubika vykreslená předchozím demonstračním
příkladem.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Lineární interpolace</h2>

<p>Podívejme se ještě jednou podrobněji na to, jak se vlastně provádí výpočet
bodů ležících na Bézierově křivce. Konkrétně se jedná o tuto část programového
kódu, v&nbsp;níž se počítají souřadnice <strong>x,y</strong>:</p>

<pre>
<i># výpočet bodů ležících na Bézierově kubice</i>
x = 0
y = 0
for i in range(0, 4):
    x += xc[i]*B[i]
    y += yc[i]*B[i]
</pre>

<p><div class="rs-tip-major">Poznámka: tento zápis vlastně popisuje operace
prováděné nad všemi prvky vektorů hodnot uložených v&nbsp;objektu
<strong>B[i]</strong>. Výsledkem budou dva vektory, první obsahující x-ové
souřadnice, druhé souřadnice y-ové. Toto zkrácení zápisu &ndash; operací nad
všemi prvky vektorů &ndash; ovšem nic nemění na dalších úvahách.</div></p>

<p>Výše uvedený výpočet je jednou z&nbsp;forem <i>lineární kombinace</i>. Ovšem
pro demonstrační účely je lepší nepoužít ani Bézierovu kvadriku (stupně 2) či
kubiku (stupně 3), ale Bézierovu křivku stupně 1. Jedná se o křivku určenou
pouze dvěma body, jimiž tato křivka prochází (což odpovídá i kvadrikám a
kubikám, do nichž jsou přidány pouze další řídicí body). Tato parametrická
křivka je zcela jistě všem dobře známá &ndash; jedná se totiž o běžnou
<i>úsečku</i>. I tu lze pochopitelně vyjádřit parametricky a současně i formou
lineární kombinace dvou polynomů. Konkrétně se bude jednat o polynomy
<strong>1-t</strong> a <strong>t</strong>, kde <strong>t</strong> leží
v&nbsp;rozsahu 0 až 1. Bézierova křivka prvního stupně (tento název ovšem
prakticky nikdo pochopitelně nepoužívá) se tedy může vykreslit tímto
demonstračním příkladem:</p>

<pre>
<i>"""Parametrická křivka: lineární interpolace."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.05)
&nbsp;
<i># řídicí body</i>
xc = (1, 3)
yc = (1, 2)
&nbsp;
<i># Bernsteinovy polynomy pro lineární interpolaci</i>
B = [<strong>1 * (1-t)</strong>,
     <strong>1 * t</strong>]
&nbsp;
<i># výpočet bodů ležících na interpolační křivce</i>
x = 0
y = 0
for i in range(0, 2):
    x += xc[i]*B[i]
    y += yc[i]*B[i]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Lineární interpolace', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 4)
ax.set_ylim(0, 3)
&nbsp;
<i># vrcholy na křivce pospojované úsečkami</i>
ax.plot(x, y, 'g-')
&nbsp;
<i># řídicí body</i>
ax.plot(xc, yc, 'ro')
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("linear_interpolation.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 3: Bézierova křivka stupně 1 neboli úsečka.</i></p>

<p><div class="rs-tip-major">Poznámka: úsečka může mít jakýkoli sklon, tedy i
90&deg;, a to díky tomu, že je použito její parametrické vyjádření.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zobecnění lineární interpolace</h2>

<p>Pierre Bézier své křivky odvodil matematicky, na rozdíl od jeho současníka
Paula de Casteljau, který nezávisle na Bézierovi (vlastně již před ním) našel
geometrickou konstrukci těchto křivek. Ovšem nejdříve se podívejme na způsob
odvození, který zvolil Bézier. Ten se snažil zobecnit možnosti lineární
interpolace popsané <a href="#k02">v&nbsp;předchozí kapitole</a>. Ta je
založena, jak již víme, na použití dvou polynomů prvního stupně:</p>

<p><strong>f(t) = (1-t)</strong><br />
<strong>g(t) = t</strong></p>

<p>Bézier si uvědomil, že (triviálně) platí:</p>

<p><strong>f(t) + g(t) = 1</strong><br />
<strong>(1-t) + t = 1</strong></p>

<p>tedy že součet obou funkcí pro libovolné <strong>t</strong> v&nbsp;daném
rozsahu 0 až 1 je vždy roven jedné.</p>

<p>Dále Bézier umocnil obě strany předchozí rovnice:</p>

<p><strong>((1-t) + t)<sup>2</sup> = 1<sup>2</sup></strong></p>

<p>Po úpravě tedy:</p>

<p><strong>(1-t)<sup>2</sup> + 2t(1-t) + t<sup>2</sup> = 1</strong></p>

<p>Výsledkem jsou tedy nám již známé bázové polynomy křivky druhého stupně
(Bézierovy kvadriky):</p>

<p><strong>(1-t)<sup>2</sup><br />
2t(1-t)<br />
t<sup>2</sup></strong></p>

<p>Což přesně odpovídá vzorcům použitým v&nbsp;demonstračním příkladu uvedeného
<a href="#k01">v&nbsp;úvodní kapitole</a>.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Binomická věta a Bernsteinovy polynomy</h2>

<p>Naprosto stejným způsobem, tedy umocněním (na třetí, čtvrtou atd.), lze
odvodit bázové polynomy i pro Bézierovy křivky vyšších stupňů, tedy především
pro Bézierovu kubiku. Ovšem ve skutečnosti si můžeme pomoci jednoduchou
zkratkou &ndash; <a
href="https://cs.wikipedia.org/wiki/Binomick%C3%A1_v%C4%9Bta">binomickou
větou</a>, díky níž dokážeme jednoduše spočítat <strong>((1-t) +
t)<sup>n</sup></strong>. Jednotlivé členy rozvoje se nazývají Bernsteinovy
bázové polynomy. Každý takový polynom má tvar:</p>

<p><strong>b<sub>v,n</sub>(t) = C<sup>v</sup><sub>n</sub> t<sup>v</sup> (1-t)<sup>n-v</sup></strong></p>

<p>kde <strong>C<sup>v</sup><sub>n</sub></strong> je binomický koeficient
&bdquo;n nad v&ldquo;. Tento koeficient lze získat z&nbsp;Pascalova
trojúhelníku:</p>

<pre>
            1
          1   1
        1   2   1
      1   3   3   1
    1   4   6   4   1
  1   5  10  10   5   1
1   6  15  20  15   6   1
</pre>

<p>Uveďme si příklady Bernsteinových bázových polynomů.</p>

<p>Lineární případ <strong>n=1</strong> je triviální (druhý řádek
v&nbsp;trojúhelníku):</p>

<p><strong>1</strong> &times; (1-t)<br />
<strong>1</strong> &times; t</p>

<p>Bázové polynomy druhého stupně pro <strong>n=2</strong> (třetí řádek
v&nbsp;trojúhelníku):</p>

<p><strong>1</strong> &times; (1-t)<sup>2</sup><br />
<strong>2</strong> &times; t &times; (1-t)<br />
<strong>1</strong> &times; t<sup>2</sup></p>

<p>Bázové polynomy třetího stupně pro <strong>n=3</strong>:</p>

<p><strong>1</strong> &times; (1-t)<sup>3</sup><br />
<strong>3</strong> &times; t &times; (1-t)<sup>2</sup><br />
<strong>3</strong> &times; t<sup>2</sup> &times; (1-t)<br />
<strong>1</strong> &times; t<sup>3</sup></p>

<p>atd. atd.</p>

<p><div class="rs-tip-major">Poznámka: čistě náhodou se tedy setkáváme se dvěma
jmény začínajícími na &bdquo;B&ldquo; &ndash; Bézier a Bernstein. Aby se to
pletlo, používáme i B-spliny, jejichž jméno je ovšem odvozeno od slova
&bdquo;basis&ldquo;.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Bernsteinovy polynomy stupně jedna až pět</h2>

<p>Nyní již víme, jakým způsobem je možné vypočítat Bernsteinovy bázové
polynomy libovolného stupně. Ukažme si tedy jejich průběh graficky. Začneme
(prakticky triviálním) lineárním případem:</p>

<pre>
<i>"""Bázové polynomy pro lineární interpolaci."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.02)
&nbsp;
<i># Bernsteinovy polynomy pro lineární interpolaci</i>
B = [<strong>1 * (1-t)</strong>,
     <strong>1 * t</strong>]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Bázové polynomy', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
&nbsp;
<i># bázové polynomy</i>
ax.plot(t, B[0], 'r-', label='b0,1')
ax.plot(t, B[1], 'g-', label='b1,1')
&nbsp;
<i># zobrazení legendy</i>
ax.legend()
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("linear_basis.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 4: Bernsteinovy bázové polynomy stupně jedna.</i></p>

<p>Bernsteinovy bázové polynomy stupně dva použité pro Bézierovy kvadriky:</p>

<pre>
<i>"""Bázové polynomy Bézierovy kvadriky."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.02)
&nbsp;
<i># Bernsteinovy polynomy pro Bézierovu kvadriku</i>
B = [<strong>1 * (1-t)**2</strong>,
     <strong>2 * t * (1-t)</strong>,
     <strong>1 * t**2</strong>]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Bázové polynomy', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
&nbsp;
<i># bázové polynomy</i>
ax.plot(t, B[0], 'r-', label='b0,2')
ax.plot(t, B[1], 'g-', label='b1,2')
ax.plot(t, B[2], 'b-', label='b2,2')
&nbsp;
<i># zobrazení legendy</i>
ax.legend()
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("bezier_quadric_basis_.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 5: Bernsteinovy bázové polynomy stupně dva.</i></p>

<p>Bernsteinovy bázové polynomy stupně tři použité pro Bézierovy kubiky:</p>

<pre>
<i>"""Bázové polynomy Bézierovy kubiky."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.02)
&nbsp;
<i># Bernsteinovy polynomy</i>
B = [<strong>1 * (1-t)**3</strong>,
     <strong>3 * t * (1-t)**2</strong>,
     <strong>3 * t**2 * (1-t)</strong>,
     <strong>1 * t**3</strong>]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Bázové polynomy', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
&nbsp;
<i># bázové polynomy</i>
ax.plot(t, B[0], 'r-', label='b0,3')
ax.plot(t, B[1], 'g-', label='b1,3')
ax.plot(t, B[2], 'b-', label='b2,3')
ax.plot(t, B[3], 'k-', label='b3,3')
&nbsp;
<i># zobrazení legendy</i>
ax.legend()
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("bezier_cubic_basis.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 6: Bernsteinovy bázové polynomy stupně tři.</i></p>

<p>Ovšem můžeme jít i dále a zobrazit si polynomy stupně čtyři:</p>

<pre>
<i>"""Bázové polynomy Bézierovy kvartiky."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.02)
&nbsp;
<i># Bernsteinovy polynomy pro Bézierovu kvartiku</i>
B = [<strong>1 * (1-t)**4</strong>,
     <strong>4 * t * (1-t)**3</strong>,
     <strong>6 * t**2 * (1-t)**2</strong>,
     <strong>4 * t**3 * (1-t)</strong>,
     <strong>1 * t**4</strong>]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Bázové polynomy', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
&nbsp;
<i># bázové polynomy</i>
ax.plot(t, B[0], 'r-', label='b0,4')
ax.plot(t, B[1], 'g-', label='b1,4')
ax.plot(t, B[2], 'b-', label='b2,4')
ax.plot(t, B[3], 'k-', label='b3,4')
ax.plot(t, B[4], 'm-', label='b4,4')
&nbsp;
<i># zobrazení legendy</i>
ax.legend()
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("bezier_quartic_basis_.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 7: Bernsteinovy bázové polynomy stupně čtyři.</i></p>

<p>Pro úplnost bázové polynomy stupně pět, i když ty již v&nbsp;grafice
většinou neuvidíme:</p>

<pre>
<i>"""Bázové polynomy Bézierovy křivky stupně 5."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.02)
&nbsp;
<i># Bernsteinovy polynomy pro Bézierovu křivku stupně 5</i>
B = [<strong>1 * (1-t)**5</strong>,
     <strong>5 * t * (1-t)**4</strong>,
     <strong>10 * t**2 * (1-t)**3</strong>,
     <strong>10 * t**3 * (1-t)**2</strong>,
     <strong>5 * t**4 * (1-t)</strong>,
     <strong>1 * t**5</strong>]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Bázové polynomy', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
&nbsp;
<i># bázové polynomy</i>
ax.plot(t, B[0], 'r-', label='b0,5')
ax.plot(t, B[1], 'g-', label='b1,5')
ax.plot(t, B[2], 'b-', label='b2,5')
ax.plot(t, B[3], 'k-', label='b3,5')
ax.plot(t, B[4], 'm-', label='b4,5')
ax.plot(t, B[5], 'y-', label='b5,5')
&nbsp;
<i># zobrazení legendy</i>
ax.legend()
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("bezier_quintic_basis_.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 8: Bernsteinovy bázové polynomy stupně pět.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Ověření základních vlastností Bernsteinových polynomů</h2>

<p>Bernsteinovy polynomy, které jsou využity jako bázové polynomy Bézierových
křivek, splňují několik podmínek, které jsou při tvorbě křivek a jejich
využívání důležité. Jedná se o tyto podmínky:</p>

<ol>

<li>Pro <strong>t=0</strong> má první polynom hodnotu 1 a ostatní polynomy
hodnotu 0. Z&nbsp;geometrického hlediska to znamená, že je zaručeno, že křivka
prochází prvním koncovým bodem (protože ostatní členy při výpočtu jsou
vynulovány).</li>

<li>Podobně pro <strong>t=1</strong> mají všechny polynomy, až na polynom
poslední, nulovou hodnotu. Tudíž křivka prochází i svým posledním koncovým
bodem.</li>

<li>Součet hodnot všech Bernsteinových polynomů pro libovolné
<strong>t</strong> v&nbsp;rozsahu od 0 do 1 je vždy roven jedné, současně je
hodnota každého Bernsteinova polynomu vždy nezáporná. Z&nbsp;geometrického
hlediska to znamená, že se celá křivka nachází v&nbsp;konvexním obalu svých
řídicích bodů (tedy v&nbsp;mnohoúhelníku, který získáme propojením řídicích
bodů tak, že je mnohoúhelník konvexní).</li>

<li>Současně můžeme z&nbsp;grafů zobrazených v&nbsp;předchozí kapitole zjistit,
jak hodnoty Bernsteinových polynomů postupně (podle jejich indexu) rostou se
změnou <strong>t</strong> a posléze zase klesají k&nbsp;nule. Výjimkou je první
a poslední polynom, který jen klesá resp.&nbsp;jen roste. Geometricky to
znamená, že křivka se postupně přibližuje k&nbsp;jednotlivým řídicím
bodům.</li>

</ol>



<p><a name="k07"></a></p>
<h2 id="k07">7. Součet všech Bernsteinových polynomů stupně jedna až pět</h2>

<p>Základní a pro mnoho aplikací důležitá vlastnost Bernsteinových polynomů
&ndash; jejich součet je pro libovolné <strong>t</strong> z&nbsp;definičního
oboru vždy roven jedné &ndash; sice nemusí být z&nbsp;grafů přímo patrná, ale
můžeme si ji ověřit numericky, a to pro polynomy různého stupně.
V&nbsp;tabulkách, které jsou vypočteny a zobrazeny dále uvedenými
demonstračními příklady, by měly hodnoty v&nbsp;posledních sloupcích být vždy
jedničkové nebo alespoň v&nbsp;rámci přesnosti výpočtů velmi blízké
jedničce.</p>

<p>Polynom prvního stupně:</p>

<pre>
<i>"""Bázové polynomy lineární interpolace."""</i>
&nbsp;
import numpy as np
import pandas as pd
from tabulate import tabulate
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.01, 0.10)
&nbsp;
<i># Bernsteinovy polynomy pro lineární interpolaci</i>
B = [1 * (1-t),
     1 * t]
&nbsp;
<i># vytvoření datového rámce pro uložení hodnot Bernsteinových polynomů</i>
df = pd.DataFrame(index=t, columns=["b0,1", "b1,1", "sum"])
&nbsp;
<i># inicializace jednotlivých sloupců datového rámce</i>
df["b0,1"] = B[0]
df["b1,1"] = B[1]
&nbsp;
<i># součet hodnot Bernsteinových polynomů</i>
df["sum"] = B[0]+B[1]
&nbsp;
<i># vytištění obsahu datového rámce</i>
print(tabulate(df, headers = 'keys', tablefmt = 'psql'))
</pre>

<p>Výsledky:</p>

<pre>
+-----+--------+--------+-------+
|     |   b0,1 |   b1,1 |   sum |
|-----+--------+--------+-------|
| 0   |    1   |    0   |     1 |
| 0.1 |    0.9 |    0.1 |     1 |
| 0.2 |    0.8 |    0.2 |     1 |
| 0.3 |    0.7 |    0.3 |     1 |
| 0.4 |    0.6 |    0.4 |     1 |
| 0.5 |    0.5 |    0.5 |     1 |
| 0.6 |    0.4 |    0.6 |     1 |
| 0.7 |    0.3 |    0.7 |     1 |
| 0.8 |    0.2 |    0.8 |     1 |
| 0.9 |    0.1 |    0.9 |     1 |
| 1   |    0   |    1   |     1 |
+-----+--------+--------+-------+
</pre>

<p>Polynom druhého stupně:</p>

<pre>
<i>"""Bázové polynomy Bézierovy kvadriky."""</i>
&nbsp;
import numpy as np
import pandas as pd
from tabulate import tabulate
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.01, 0.10)
&nbsp;
<i># Bernsteinovy polynomy pro Bézierovu kvadriku</i>
B = [1 * (1-t)**2,
     2 * t * (1-t),
     1 * t**2]
&nbsp;
<i># vytvoření datového rámce pro uložení hodnot Bernsteinových polynomů</i>
df = pd.DataFrame(index=t, columns=["b0,2", "b1,2", "b2,2", "sum"])
&nbsp;
<i># inicializace jednotlivých sloupců datového rámce</i>
df["b0,2"] = B[0]
df["b1,2"] = B[1]
df["b2,2"] = B[2]
&nbsp;
<i># součet hodnot Bernsteinových polynomů</i>
df["sum"] = B[0]+B[1]+B[2]
&nbsp;
<i># vytištění obsahu datového rámce</i>
print(tabulate(df, headers = 'keys', tablefmt = 'psql'))
</pre>

<p>Výsledky:</p>

<pre>
+-----+--------+--------+--------+-------+
|     |   b0,2 |   b1,2 |   b2,2 |   sum |
|-----+--------+--------+--------+-------|
| 0   |   1    |   0    |   0    |     1 |
| 0.1 |   0.81 |   0.18 |   0.01 |     1 |
| 0.2 |   0.64 |   0.32 |   0.04 |     1 |
| 0.3 |   0.49 |   0.42 |   0.09 |     1 |
| 0.4 |   0.36 |   0.48 |   0.16 |     1 |
| 0.5 |   0.25 |   0.5  |   0.25 |     1 |
| 0.6 |   0.16 |   0.48 |   0.36 |     1 |
| 0.7 |   0.09 |   0.42 |   0.49 |     1 |
| 0.8 |   0.04 |   0.32 |   0.64 |     1 |
| 0.9 |   0.01 |   0.18 |   0.81 |     1 |
| 1   |   0    |   0    |   1    |     1 |
+-----+--------+--------+--------+-------+
</pre>

<p>Polynom třetího stupně:</p>

<pre>
<i>"""Bázové polynomy Bézierovy kubiky."""</i>
&nbsp;
import numpy as np
import pandas as pd
from tabulate import tabulate
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.01, 0.10)
&nbsp;
<i># Bernsteinovy polynomy pro Bézierovu kubiku</i>
B = [1 * (1-t)**3,
     3 * t * (1-t)**2,
     3 * t**2 * (1-t),
     1 * t**3]
&nbsp;
<i># vytvoření datového rámce pro uložení hodnot Bernsteinových polynomů</i>
df = pd.DataFrame(index=t, columns=["b0,3", "b1,3", "b2,3", "b3,3", "sum"])
&nbsp;
<i># inicializace jednotlivých sloupců datového rámce</i>
df["b0,3"] = B[0]
df["b1,3"] = B[1]
df["b2,3"] = B[2]
df["b3,3"] = B[3]
&nbsp;
<i># součet hodnot Bernsteinových polynomů</i>
df["sum"] = B[0]+B[1]+B[2]+B[3]
&nbsp;
<i># vytištění obsahu datového rámce</i>
print(tabulate(df, headers = 'keys', tablefmt = 'psql'))
</pre>

<p>Výsledky:</p>

<pre>
+-----+--------+--------+--------+--------+-------+
|     |   b0,3 |   b1,3 |   b2,3 |   b3,3 |   sum |
|-----+--------+--------+--------+--------+-------|
| 0   |  1     |  0     |  0     |  0     |     1 |
| 0.1 |  0.729 |  0.243 |  0.027 |  0.001 |     1 |
| 0.2 |  0.512 |  0.384 |  0.096 |  0.008 |     1 |
| 0.3 |  0.343 |  0.441 |  0.189 |  0.027 |     1 |
| 0.4 |  0.216 |  0.432 |  0.288 |  0.064 |     1 |
| 0.5 |  0.125 |  0.375 |  0.375 |  0.125 |     1 |
| 0.6 |  0.064 |  0.288 |  0.432 |  0.216 |     1 |
| 0.7 |  0.027 |  0.189 |  0.441 |  0.343 |     1 |
| 0.8 |  0.008 |  0.096 |  0.384 |  0.512 |     1 |
| 0.9 |  0.001 |  0.027 |  0.243 |  0.729 |     1 |
| 1   |  0     |  0     |  0     |  1     |     1 |
+-----+--------+--------+--------+--------+-------+
</pre>

<p>Polynom čtvrtého stupně:</p>

<pre>
<i>"""Bázové polynomy Bézierovy kvartiky."""</i>
&nbsp;
import numpy as np
import pandas as pd
from tabulate import tabulate
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.01, 0.10)
&nbsp;
<i># Bernsteinovy polynomy pro Bézierovu kvartiku</i>
B = [1 * (1-t)**4,
     4 * t * (1-t)**3,
     6 * t**2 * (1-t)**2,
     4 * t**3 * (1-t),
     1 * t**4]
&nbsp;
<i># vytvoření datového rámce pro uložení hodnot Bernsteinových polynomů</i>
df = pd.DataFrame(index=t, columns=["b0,4", "b1,4", "b2,4", "b3,4", "b4,4", "sum"])
&nbsp;
<i># inicializace jednotlivých sloupců datového rámce</i>
df["b0,4"] = B[0]
df["b1,4"] = B[1]
df["b2,4"] = B[2]
df["b3,4"] = B[3]
df["b4,4"] = B[4]
&nbsp;
<i># součet hodnot Bernsteinových polynomů</i>
df["sum"] = B[0]+B[1]+B[2]+B[3]+B[4]
&nbsp;
<i># vytištění obsahu datového rámce</i>
print(tabulate(df, headers = 'keys', tablefmt = 'psql'))
</pre>

<p>Výsledky:</p>

<pre>
+-----+--------+--------+--------+--------+--------+-------+
|     |   b0,4 |   b1,4 |   b2,4 |   b3,4 |   b4,4 |   sum |
|-----+--------+--------+--------+--------+--------+-------|
| 0   | 1      | 0      | 0      | 0      | 0      |     1 |
| 0.1 | 0.6561 | 0.2916 | 0.0486 | 0.0036 | 0.0001 |     1 |
| 0.2 | 0.4096 | 0.4096 | 0.1536 | 0.0256 | 0.0016 |     1 |
| 0.3 | 0.2401 | 0.4116 | 0.2646 | 0.0756 | 0.0081 |     1 |
| 0.4 | 0.1296 | 0.3456 | 0.3456 | 0.1536 | 0.0256 |     1 |
| 0.5 | 0.0625 | 0.25   | 0.375  | 0.25   | 0.0625 |     1 |
| 0.6 | 0.0256 | 0.1536 | 0.3456 | 0.3456 | 0.1296 |     1 |
| 0.7 | 0.0081 | 0.0756 | 0.2646 | 0.4116 | 0.2401 |     1 |
| 0.8 | 0.0016 | 0.0256 | 0.1536 | 0.4096 | 0.4096 |     1 |
| 0.9 | 0.0001 | 0.0036 | 0.0486 | 0.2916 | 0.6561 |     1 |
| 1   | 0      | 0      | 0      | 0      | 1      |     1 |
+-----+--------+--------+--------+--------+--------+-------+
</pre>

<p>A konečně polynom pátého stupně:</p>

<pre>
<i>"""Bázové polynomy Bézierovy křivky stupně 5."""</i>
&nbsp;
import numpy as np
import pandas as pd
from tabulate import tabulate
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.01, 0.10)
&nbsp;
<i># Bernsteinovy polynomy pro Bézierovu křivku stupně 5</i>
B = [1 * (1-t)**5,
     5 * t * (1-t)**4,
     10 * t**2 * (1-t)**3,
     10 * t**3 * (1-t)**2,
     5 * t**4 * (1-t),
     1 * t**5]
&nbsp;
<i># vytvoření datového rámce pro uložení hodnot Bernsteinových polynomů</i>
df = pd.DataFrame(index=t, columns=["b0,5", "b1,5", "b2,5", "b3,5", "b4,5", "b5,5", "sum"])
&nbsp;
<i># inicializace jednotlivých sloupců datového rámce</i>
df["b0,5"] = B[0]
df["b1,5"] = B[1]
df["b2,5"] = B[2]
df["b3,5"] = B[3]
df["b4,5"] = B[4]
df["b5,5"] = B[5]
&nbsp;
<i># součet hodnot Bernsteinových polynomů</i>
df["sum"] = B[0]+B[1]+B[2]+B[3]+B[4]+B[5]
&nbsp;
<i># vytištění obsahu datového rámce</i>
print(tabulate(df, headers = 'keys', tablefmt = 'psql'))
</pre>

<p>Výsledky:</p>

<pre>
+-----+---------+---------+--------+--------+---------+---------+-------+
|     |    b0,5 |    b1,5 |   b2,5 |   b3,5 |    b4,5 |    b5,5 |   sum |
|-----+---------+---------+--------+--------+---------+---------+-------|
| 0   | 1       | 0       | 0      | 0      | 0       | 0       |     1 |
| 0.1 | 0.59049 | 0.32805 | 0.0729 | 0.0081 | 0.00045 | 1e-05   |     1 |
| 0.2 | 0.32768 | 0.4096  | 0.2048 | 0.0512 | 0.0064  | 0.00032 |     1 |
| 0.3 | 0.16807 | 0.36015 | 0.3087 | 0.1323 | 0.02835 | 0.00243 |     1 |
| 0.4 | 0.07776 | 0.2592  | 0.3456 | 0.2304 | 0.0768  | 0.01024 |     1 |
| 0.5 | 0.03125 | 0.15625 | 0.3125 | 0.3125 | 0.15625 | 0.03125 |     1 |
| 0.6 | 0.01024 | 0.0768  | 0.2304 | 0.3456 | 0.2592  | 0.07776 |     1 |
| 0.7 | 0.00243 | 0.02835 | 0.1323 | 0.3087 | 0.36015 | 0.16807 |     1 |
| 0.8 | 0.00032 | 0.0064  | 0.0512 | 0.2048 | 0.4096  | 0.32768 |     1 |
| 0.9 | 1e-05   | 0.00045 | 0.0081 | 0.0729 | 0.32805 | 0.59049 |     1 |
| 1   | 0       | 0       | 0      | 0      | 0       | 1       |     1 |
+-----+---------+---------+--------+--------+---------+---------+-------+
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Jak je tomu v&nbsp;případě Coonsových kubik?</h2>

<p>V&nbsp;předchozím článku jsme se mj.&nbsp;seznámili i s&nbsp;takzvanými
<i>Coonsovými kubikami</i> resp.&nbsp;s&nbsp;<i>Coonsovými oblouky</i>
(<i>Coons arc</i>), které tvoří základ klasických (neracionálních uniformních)
B-spline křivek. Tyto kubiky se počítají a vykreslují naprosto stejným způsobem
jako kubiky Bézierovy, až na jednu &bdquo;maličkost&ldquo; &ndash; jejich
bázové polynomy jsou odlišné od Bernsteinovým polynomů. To má za následek
nejenom odlišný tvar křivky, ale i to, že B-spline neprochází svými koncovými
body. Tuto vlastnost můžeme vyčíst z&nbsp;grafu průběhu hodnot bázových
polynomů, protože zde není splněna podmínka, že pro <strong>t=0</strong> má
první polynom hodnotu 1 a ostatní polynomy hodnotu 0 a pro <strong>t=1</strong>
mají všechny polynomy, až na polynom poslední, hodnotu nulovou. Křivka tedy
začíná i končí v&nbsp;bodech, jejichž souřadnice jsou ovlivněny dalšími
řídicími body:</p>

*** image ***
<p><i>Obrázek 9: Bázové polynomy Coonsovy kubiky.</i></p>

<p>Průběhy jsou tedy dosti odlišné od Bernsteinových polynomů, které jsme mohli
vidět v&nbsp;předchozích kapitolách.</p>

<p>Předchozí graf byl vykreslen tímto skriptem:</p>

<pre>
<i>"""Bázové polynomy Coonsovy kubiky."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.02)
&nbsp;
<i># Coonsovy polynomy</i>
C = [<strong>(1-t)**3</strong>,
     <strong>3*t**3 - 6*t**2 + 4</strong>,
     <strong>-3*t**3 + 3*t**2 + 3*t + 1</strong>,
     <strong>t**3</strong>]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Bázové polynomy', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 1)
ax.set_ylim(0, 4)
&nbsp;
<i># bázové polynomy</i>
ax.plot(t, C[0]/6, 'r-')
ax.plot(t, C[1]/6, 'g-')
ax.plot(t, C[2]/6, 'b-')
ax.plot(t, C[3]/6, 'k-')
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("coons_basis.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Konstrukce křivky z&nbsp;několika na sebe navazujících segmentů</h2>

<p>Prozatím jsme se zabývali (a nutno dodat, že i nadále budeme zabývat)
parametrickými křivkami vytvořenými postupně z&nbsp;několika na sebe
navazujících <i>segmentů</i>, přičemž každý segment je popsán polynomem nízkého
stupně (typicky stupně tři nebo čtyři, jedná se tedy o kvadriku nebo kubiku).
Velmi důležité body v&nbsp;takovém případě vznikají v&nbsp;místě napojení
jednotlivých segmentů. Samozřejmě je možné segmenty napojit libovolným způsobem
(takže vznikne &bdquo;roh&ldquo; nebo dokonce mezera mezi segmenty), ale
většinou je požadováno hladké napojení. Přitom slovo &bdquo;hladké&ldquo; má
podle kontextu matematický nebo geometrický význam. Rozlišujeme parametrickou
spojitost třídy C<sup>n</sup> a taktéž geometrickou spojitost G<sup>n</sup>.
Různé aplikace, v&nbsp;nichž se křivky používají, přitom mají různé požadavky,
takže například nelze říci, že nám všude budou vyhovovat pouze křivky se
spojitostí G<sup>1</sup>. A naopak použití křivek se spojitostí C<sup>2</sup>
může být naopak značně limitující.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Parametrická a geometrická spojitost C<sup>n</sup> a G<sup>n</sup></h2>

<p>Dva segmenty jsou spojitě navázány (neboli mají spojitost třídy
C<sup>0</sup>) v&nbsp;případě, že je koncový bod prvního segmentu počátečním
bodem segmentu druhého &ndash; tudíž jsou dovoleny i výše zmíněné
&bdquo;rohy&ldquo;. Dva segmenty mají spojitost C<sup>1</sup> v&nbsp;případě,
že je tečný vektor v&nbsp;koncovém bodě segmentu Q<sub>1</sub>, roven tečnému
vektoru v&nbsp;jeho počátečním bodě navazujícího segmentu Q<sub>2</sub>.
Analogicky rovnost vektoru první a druhé derivace je požadována pro spojité
navázání třídy C<sup>2</sup>. Teoreticky je možné požadovat popř.&nbsp;i
zajistit totožnost třetí i vyšší derivace, ovšem konkrétně u polynomů nižších
stupňů to již postrádá praktický význam (derivace budou nulové).</p>

<p>Čím vyšší spojitost je požadována, tím delší &bdquo;dobu&ldquo; (ve smyslu
parametru <strong>t</strong>) se oba segmenty k&nbsp;sobě přimykají a tím pádem
je křivka tužší při snaze o změnu jejího tvaru. Ze spojitosti C<sup>0</sup>
dále plyne, že bod se pohybuje po spojité dráze, ale v&nbsp;uzlu může měnit
skokem směr pohybu, rychlost i zrychlení, což může vadit při animacích. Směr
pohybu se nemůže měnit skokem při spojitosti C<sup>1</sup> (ovšem může se
skokově změnit rychlost) a zrychlení zůstává nezměněné až při spojitosti
C<sup>2</sup> (což je ideální právě pro animační křivky).</p>

<p>V&nbsp;počítačové grafice se mnohdy setkáme spíše s&nbsp;termínem
<i>geometrické spojitosti</i> G<sup>n</sup>. Opticky zaručuje G<sup>1</sup>
spojitost dvou segmentů křivky s&nbsp;prakticky stejnou vizuální hladkostí,
jako je tomu u parametrické spojitosti C<sup>1</sup>. Důležitá je ovšem
praktická implementace, tj.&nbsp;programový kód, který spojitost G<sup>1</sup>
nebo C<sup>1</sup> zajišťuje. Z&nbsp;tohoto hlediska bývá daleko snazší zaručit
spojitost G<sup>1</sup> (dtto při požadavku na spojitost G<sup>2</sup> resp.
C<sup>2</sup>), protože případné tečné vektory nemusí být totožné, ale
&bdquo;pouze&ldquo; musí mít stejný směr, nikoli už velikost (jsou tedy
<i>kolineární</i>).</p>

<p>Jak již bylo napsáno v&nbsp;předchozím odstavci, je jednodušší dosažení
geometrické spojitosti G<sup>1</sup>, kde je nutné, mimo totožnosti posledního
řídicího bodu první křivky a prvního bodu druhé křivky, dodržet alespoň
kolinearitu tečného vektoru na konci první křivky a na začátku křivky druhé
(vektory tedy musí mít stejný směr, ale mohou mít různou velikost, jinými
slovy, tyto vektory jsou na sobě lineárně závislé). Geometrickou spojitost je
snazší dodržet i z&nbsp;toho důvodu, že volnost uživatele při zadávání řídicích
bodů je větší než v&nbsp;případě parametrické spojitosti, zejména při použití
Bézierových kvadratických a (méně kriticky) kubických křivek &ndash; viz
následující kapitolu.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zajištění spojitosti C<sup>1</sup> nebo G<sup>1</sup> u Bézierových křivek</h2>

<p>Podívejme se nyní, jak je tomu v&nbsp;případě Bézierových křivek. Pokud na
sebe mají jednotlivé segmenty křivky hladce navazovat, tj.&nbsp;pokud mají mít
parametrickou spojitost alespoň C<sup>1</sup>, musí být poslední bod první
křivky totožný s&nbsp;prvním bodem křivky druhé: P<sub>n</sub>=P'<sub>0</sub>
&ndash; tím je zajištěno napojení obou křivek,&nbsp;tj. spojitost
C<sup>0</sup>. Také tečný vektor na konci první křivky musí být stejný jako
tečný vektor na začátku druhé (navazující) křivky. Na dalším obrázku jsou
zobrazeny dvě Bézierovy kvadratické křivky, které jsou hladce navázány se
spojitostí C<sup>1</sup>. Vzhledem k&nbsp;tomu, že se jedná o kvadratické
křivky, je každá křivka specifikována počátečním bodem, jedním řídicím bodem a
koncovým bodem. Podobným způsobem jsou konstruovány obrysy písmen
v&nbsp;TrueType fontech.</p>

*** image ***
<p><i>Obrázek 10: Hladké navázání dvou Bézierových kvadratických
křivek.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, jak <i>omezující</i> je
v&nbsp;tomto případě požadavek na spojitost C<sup>1</sup> &ndash; uživatel
nemůže posunout řídicí bod jednoho segmentu, aniž by ovlivnil oba segmenty
okolní (což se kaskádovitě rozšíří po celé křivce). Proto se také typicky
v&nbsp;tomto případě zadávají jen koncové body dalších segmentů, protože řídicí
body se dopočítají automaticky.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Poznámka k&nbsp;Coonsovým kubikám a uniformním racionálním B-spline křivkám</h2>

<p>Minule jsme se zmínili i o Coonsových kubikách, které se taktéž někdy
nazývají Coonsovy oblouky. Tyto křivky začínají a končí v&nbsp;antitěžišti
trojúhelníků vytvořených z&nbsp;trojice řídicích bodů &ndash; jedná se tedy o
čisté aproximační křivky. Způsob vykreslení se až na rozdílné bázové polynomy
neliší od Bézierových kubik:</p>

<pre>
<i>"""Parametrická křivka: Coonsova kubika."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.05)
&nbsp;
<i># řídicí body Coonsovy kubiky</i>
xc = (1, 1, 3, 3)
yc = (1, 2, 2, 0.5)
&nbsp;
<i># Coonsovy polynomy</i>
C = [(1-t)**3,
     3*t**3 - 6*t**2 + 4,
     -3*t**3 + 3*t**2 + 3*t + 1,
     t**3]
&nbsp;
<i># výpočet bodů ležících na Coonsově kubice</i>
x = 0
y = 0
for i in range(0, 4):
    x += xc[i]*C[i]
    y += yc[i]*C[i]
&nbsp;
<i># konečná úprava sumy</i>
x /= 6
y /= 6
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Coonsova kubika', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 4)
ax.set_ylim(0, 3)
&nbsp;
<i># vrcholy na křivce pospojované úsečkami</i>
ax.plot(x, y, 'g-')
&nbsp;
<i># řídicí body Coonsovy kubiky</i>
ax.plot(xc, yc, 'ro')
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("coons.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/488/curves4b-17.png" class="image-479710" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/legalcode.cs&quot;&gt;CC-BY&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 11: Coonsova kubika pro čtyři řídicí body.</i></p>

<p>Tyto kubiky lze snadno navázat takovým způsobem, že se vždy tři řídicí body
opakují (resp.&nbsp;jsou společné pro dva na sebe navazující segmenty). Ovšem
co je důležité &ndash; po vyjádření prvních a druhých derivací polynomů lze
zjistit, že je zachována <strong>spojitost C<sup>2</sup></strong>, a to bez
jakýchkoli dalších podmínek:</p>

<pre>
<i>"""Parametrická křivka: B-spline složená z Coonsových oblouků."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.05)
&nbsp;
<i># řídicí body B-spline</i>
xc = (1, 1, 2, 2.5, 3, 2)
yc = (1, 2, 2, 0.1, 2.9, 2.9)
&nbsp;
<i># Coonsovy polynomy</i>
C = [(1-t)**3,
     3*t**3 - 6*t**2 + 4,
     -3*t**3 + 3*t**2 + 3*t + 1,
     t**3]
&nbsp;
&nbsp;
def <strong>draw_coons_arc</strong>(xc, yc, ax, style):
    <i>    # výpočet bodů ležících na Coonsově kubice</i>
    x = 0
    y = 0
    for i in range(0, 4):
        x += xc[i]*C[i]
        y += yc[i]*C[i]
&nbsp;
    <i>    # konečná úprava sumy</i>
    x /= 6
    y /= 6
&nbsp;
    <i>    # vrcholy na křivce pospojované úsečkami</i>
    ax.plot(x, y, style)
&nbsp;
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('B-spline', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 4)
ax.set_ylim(0, 3)
&nbsp;
<i># řídicí body B-spline</i>
ax.plot(xc, yc, 'k--', alpha=0.5)
ax.plot(xc, yc, 'ro')
&nbsp;
<i># první oblouk</i>
draw_coons_arc(xc[0:4], yc[0:4], ax, "r-")
&nbsp;
<i># druhý oblouk</i>
draw_coons_arc(xc[1:5], yc[1:5], ax, "b-")
&nbsp;
<i># třetí oblouk</i>
draw_coons_arc(xc[2:6], yc[2:6], ax, "g-")
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("B-spline_1.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/488/curves4b-21.png" class="image-479714" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/legalcode.cs&quot;&gt;CC-BY&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 12: B-spline vytvořená z&nbsp;Coonsových oblouků.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Křivky používané v&nbsp;animacích</h2>

<p>Konečně se dostáváme k&nbsp;další důležité oblasti počítačové grafiky,
v&nbsp;níž jsou využívány parametrické křivky, konkrétně křivky definované
s&nbsp;využitím polynomů nižších řádů. Jedná se o oblast animací, konkrétně
animací založených na takzvaných <i>klíčových snímcích</i> neboli
<i>keyframes</i>, mezi nimiž jsou automaticky dopočítány parametry mezisnímků,
kterých může být libovolný počet (například třicet mezisnímků mezi každým
klíčovým snímkem). Takový typ animací lze v&nbsp;případě potřeby vytvářet velmi
precizním způsobem, protože pozice kamery a její orientaci, stejně jako další
parametry vykreslované scény, je možné nastavit pomocí interaktivních metod
a/nebo dialogů a poté pouze zvolit, jak se má dopočítat přechod mezi
jednotlivými snímky.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Catmul-Romovy spline</h2>

<p>Při vytváření a úpravách animací je vhodné vědět, jak vlastně interně
pracuje algoritmus výpočtu mezisnímků, které jsou vkládány mezi jednotlivé
klíčové snímky. Nejprve si musíme uvědomit, jak je interně celá animace
reprezentována. Zjednodušeně řečeno se jedná o sadu neměnných parametrů a dále
o sadu parametrů, které se v&nbsp;čase (tj.&nbsp;mezi jednotlivými snímky)
mohou měnit (třeba pozice animované postavičky). Sadou neměnných parametrů se
nemusíme dále zabývat, protože ty jsou pro všechny snímky shodné. U proměnných
parametrů se většinou jedná o reálná čísla, ovšem v&nbsp;některých případech
(pozice a orientace kamery) se taktéž může jednat o vektory různé délky. Tyto
vektory se opět rozkládají na reálná čísla. Hodnoty všech parametrů jsou předem
známé v&nbsp;jednotlivých klíčových snímcích, takže by se mohlo zdát, že
postačuje mezihodnoty dopočítat tím nejprimitivnějším možným způsobem &ndash;
<i>lineární interpolací</i>, kterou již velmi dobře známe.</p>

<p>To sice skutečně možné je, protože výsledkem bude animace, ve které nebude
docházet ke skokové změně hodnot jednotlivých parametrů, ovšem bude docházet ke
změně rychlosti změny hodnot (což je zrychlení). Výhodnější je tedy proložení
hodnot nějakou vhodnou křivkou, která mj.&nbsp;zajistí, aby nedocházelo ani ke
skokovému rozdílu v&nbsp;rychlosti změny parametrů (takzvaná parametrická
spojitost C<sup>1</sup>, viz též předchozí kapitoly). V&nbsp;počítačové
grafice, především právě při tvorbě animací (pohyb kamery), se k&nbsp;tomuto
účelu používají křivky pojmenované podle svých tvůrců <i>Edwina Catmulla</i> a
<i>Raphaela Roma</i> <i>Catmull–Rom spline</i>. Alternativní křivkou je Akima
spline (<i>Akimova spline křivka</i>), která je opět pojmenovaná podle svého
tvůrce (<i>Hiroshi Akima</i>).</p>

<p><div class="rs-tip-major">Poznámka: názorný popis teorie stojící za
Catmull-Romovými spline křivkami naleznete na videu: <a
href="https://www.youtube.com/wat­ch?v=yRGXJL9r9bs">https://www.youtube.com/wat­ch?v=yRGXJL9r9bs</a>.</div></p>

<p>Catmul-Romovy spline lze, podobně jako B-spline, vyjádřit sekvencí na sebe
navazujících segmentů, přičemž každý segment je (opět) reprezentován kubikou.
Ovšem zatímco B-spline jsou aproximačními křivkami, které neprochází svými
řídicími body, Catmul-Romovy spline jsou interpolační křivky, tedy prochází
všemi svými řídicími body. To je ostatně logické, protože řídicí body
odpovídají hodnotám v&nbsp;klíčových snímcích a tyto snímky potřebujeme
v&nbsp;animaci zobrazit přesně tak, jak je grafik vytvořil. Ovšem současně to
&ndash; při požadavku na parametrickou spojitost &ndash; znamená, že tyto
křivky obecně neleží v&nbsp;konvexním obalu vytvořeného z&nbsp;řídicích bodů,
což může v&nbsp;některých případech způsobovat problémy.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Bázové polynomy Catmul-Romovy spline</h2>

<p>Podívejme se nyní na to, jak vypadají bázové polynomy Catmul-Romovy spline.
Vizualizaci provedeme tímto skriptem, ze kterého je patrné, jaké bázové
polynomy jsou použity:</p>

<pre>
<i>"""Bázové polynomy Catmul-Romovy spline."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.02)
&nbsp;
<i># koeficient Catmul-Romovy spline</i>
tau = 0.5
&nbsp;
<i># bázové polynomy</i>
Q = [-tau*t + 2*tau*t**2 - tau*t**3,
     1+(tau-3)*t**2+(2-tau)*t**3,
     tau*t + (3-2*tau)*t**2 + (tau-2)*t**3,
     -tau*t**2+tau*t**3]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Bázové polynomy', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 1)
ax.set_ylim(-0.25, 1)
&nbsp;
<i># bázové polynomy</i>
ax.plot(t, Q[0], 'r-')
ax.plot(t, Q[1], 'g-')
ax.plot(t, Q[2], 'b-')
ax.plot(t, Q[3], 'k-')
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("catmul-rom_basis.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>Výsledek:</p>

*** image ***
<p><i>Obrázek 13: Bázové polynomy Catmul-Romovy spline.</i></p>

<p>Vyjádřit můžeme i součet hodnot všech bázových polynomů:</p>

<pre>
<i>"""Bázové polynomy Catmul-Romovy spline."""</i>
&nbsp;
import numpy as np
import pandas as pd
from tabulate import tabulate
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.01, 0.10)
&nbsp;
<i># koeficient Catmul-Romovy spline</i>
tau = 0.5
&nbsp;
<i># bázové polynomy</i>
Q = [-tau*t + 2*tau*t**2 - tau*t**3,
     1+(tau-3)*t**2+(2-tau)*t**3,
     tau*t + (3-2*tau)*t**2 + (tau-2)*t**3,
     -tau*t**2+tau*t**3]
&nbsp;
<i># vytvoření datového rámce pro uložení hodnot polynomů</i>
df = pd.DataFrame(index=t, columns=["q0", "q1", "q2", "q3", "sum"])
&nbsp;
<i># inicializace jednotlivých sloupců datového rámce</i>
df["q0"] = Q[0]
df["q1"] = Q[1]
df["q2"] = Q[2]
df["q3"] = Q[3]
&nbsp;
<i># součet hodnot polynomů</i>
df["sum"] = Q[0]+Q[1]+Q[2]+Q[3]
&nbsp;
<i># vytištění obsahu datového rámce</i>
print(tabulate(df, headers = 'keys', tablefmt = 'psql'))
</pre>

<p>Součet hodnot všech polynomů v&nbsp;daném místě je roven jedné, ovšem
některé hodnoty konkrétních polynomů jsou záporné:</p>

<pre>
+-----+---------+--------+--------+---------+-------+
|     |      q0 |     q1 |     q2 |      q3 |   sum |
|-----+---------+--------+--------+---------+-------|
| 0   |  0      | 1      | 0      |  0      |     1 |
| 0.1 | -0.0405 | 0.9765 | 0.0685 | -0.0045 |     1 |
| 0.2 | -0.064  | 0.912  | 0.168  | -0.016  |     1 |
| 0.3 | -0.0735 | 0.8155 | 0.2895 | -0.0315 |     1 |
| 0.4 | -0.072  | 0.696  | 0.424  | -0.048  |     1 |
| 0.5 | -0.0625 | 0.5625 | 0.5625 | -0.0625 |     1 |
| 0.6 | -0.048  | 0.424  | 0.696  | -0.072  |     1 |
| 0.7 | -0.0315 | 0.2895 | 0.8155 | -0.0735 |     1 |
| 0.8 | -0.016  | 0.168  | 0.912  | -0.064  |     1 |
| 0.9 | -0.0045 | 0.0685 | 0.9765 | -0.0405 |     1 |
| 1   |  0      | 0      | 1      |  0      |     1 |
+-----+---------+--------+--------+---------+-------+
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Výpočet a vykreslení jednoho segmentu Catmul-Romovy spline</h2>

<p>Jeden segment Catmul-Romovy spline se vykresluje stejně, jako segment
Bézierovy křivky nebo Coonsova oblouku. Liší se pouze výpočet bodů na křivce na
základě bázových polynomů:</p>

<pre>
<i>"""Parametrická křivka: Catmul-Romova spline."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.05)
&nbsp;
<i># řídicí body</i>
xc = (1, 1, 3, 3)
yc = (1, 2.9, 0.1, 2)
&nbsp;
<i># koeficient Catmul-Romovy spline</i>
tau = 0.5
&nbsp;
<i># bázové polynomy</i>
Q = [-tau*t + 2*tau*t**2 - tau*t**3,
     1+(tau-3)*t**2+(2-tau)*t**3,
     tau*t + (3-2*tau)*t**2 + (tau-2)*t**3,
     -tau*t**2+tau*t**3]
&nbsp;
<i># výpočet bodů ležících na spline</i>
x = 0
y = 0
for i in range(0, 4):
    x += xc[i]*Q[i]
    y += yc[i]*Q[i]
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Catmul-Romova spline', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 4)
ax.set_ylim(0, 3)
&nbsp;
<i># vrcholy na křivce pospojované úsečkami</i>
ax.plot(x, y, 'g-')
&nbsp;
<i># řídicí body kubiky</i>
ax.plot(xc, yc, 'ro')
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("catmul-rom_cubic.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 14: Catmul-Romova spline složená z&nbsp;jednoho segmentu.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Vykreslení celé spline složené z&nbsp;většího množství segmentů</h2>

<p>Z&nbsp;na sebe navazujících segmentů Catmul-Romovy kubiky lze vytvořit celou
spline definovanou <strong>n</strong> řídicími body. Postup je snadný &ndash;
vždy čtyři po sobě jdoucí body vytváří jeden segment; celkově je nutné
vykreslit <strong>n-3</strong> takových oblouků. Přitom je zaručeno, že tyto
oblouky na sebe hladce navazují, což je ostatně ukázáno i v&nbsp;dalším (dnes
již předposledním posledním) demonstračním příkladu:</p>

<pre>
<i>"""Parametrická křivka: Catmul-Romova spline."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.05)
&nbsp;
<i># řídicí body B-spline</i>
xc = (1, 1, 2, 2.5, 3, 2)
yc = (1, 2, 2, 0.1, 2.9, 2.9)
&nbsp;
<i># koeficient Catmul-Romovy spline</i>
tau = 0.5
&nbsp;
<i># bázové polynomy</i>
Q = [-tau*t + 2*tau*t**2 - tau*t**3,
     1+(tau-3)*t**2+(2-tau)*t**3,
     tau*t + (3-2*tau)*t**2 + (tau-2)*t**3,
     -tau*t**2+tau*t**3]
&nbsp;
&nbsp;
def <strong>draw_catmul_rom_arc</strong>(xc, yc, ax, style):
    x = 0
    y = 0
    for i in range(0, 4):
        x += xc[i]*Q[i]
        y += yc[i]*Q[i]
&nbsp;
    <i># vrcholy na křivce pospojované úsečkami</i>
    ax.plot(x, y, style)
&nbsp;
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Catmul-Rom spline', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 4)
ax.set_ylim(0, 4)
&nbsp;
<i># řídicí body B-spline</i>
ax.plot(xc, yc, 'k--', alpha=0.5)
ax.plot(xc, yc, 'ro')
&nbsp;
<i># první oblouk</i>
draw_catmul_rom_arc(xc[0:4], yc[0:4], ax, "r-")
&nbsp;
<i># druhý oblouk</i>
draw_catmul_rom_arc(xc[1:5], yc[1:5], ax, "b-")
&nbsp;
<i># třetí oblouk</i>
draw_catmul_rom_arc(xc[2:6], yc[2:6], ax, "g-")
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("catmul-rom_spline_A.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 15: Catmul-Romova spline složená z&nbsp;několika segmentů.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Násobné koncové body Catmul-Romovy spline</h2>

<p>Při práci s&nbsp;Catmul-Rom spline se, podobně jako u B-spline, často
používají takzvané <i>násobné řídící body</i>, což jsou sousední řídící body,
které jsou umístěny na stejné souřadnici v&nbsp;ploše či v&nbsp;prostoru.
S&nbsp;využitím násobných řídících bodů lze na křivce vytvářet zlomy či úseky,
které se k&nbsp;řídícím bodům více přimykají (tím se částečně nahrazují váhy
řídících bodů). Také lze zajistit (což je důležitější), aby křivka procházela
svými krajními body:</p>

<pre>
<i>"""Parametrická křivka: Catmul-Romova spline s násobnými body."""</i>
&nbsp;
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty parametru t</i>
t = np.arange(0, 1.05, 0.05)
&nbsp;
<i># řídicí body B-spline</i>
xc = (1, 1, 2, 2.5, 3, 2)
yc = (1, 2, 2, 0.1, 2.9, 2.9)
&nbsp;
<i># koeficient Catmul-Romovy spline</i>
tau = 0.5
&nbsp;
<i># bázové polynomy</i>
Q = [-tau*t + 2*tau*t**2 - tau*t**3,
     1+(tau-3)*t**2+(2-tau)*t**3,
     tau*t + (3-2*tau)*t**2 + (tau-2)*t**3,
     -tau*t**2+tau*t**3]
&nbsp;
&nbsp;
def <strong>draw_catmul_rom_arc</strong>(xc, yc, ax, style):
    x = 0
    y = 0
    for i in range(0, 4):
        x += xc[i]*Q[i]
        y += yc[i]*Q[i]
&nbsp;
    <i># vrcholy na křivce pospojované úsečkami</i>
    ax.plot(x, y, style)
&nbsp;
&nbsp;
<i># rozměry grafu při uložení: 640x480 pixelů</i>
fig, ax = plt.subplots(1, figsize=(6.4, 4.8))
&nbsp;
<i># titulek grafu</i>
fig.suptitle('Catmul-Rom spline', fontsize=15)
&nbsp;
<i># určení rozsahů na obou souřadných osách</i>
ax.set_xlim(0, 4)
ax.set_ylim(0, 4)
&nbsp;
<i># řídicí body B-spline</i>
ax.plot(xc, yc, 'k--', alpha=0.5)
ax.plot(xc, yc, 'ro')
&nbsp;
<i># oblouk s násobnými body</i>
draw_catmul_rom_arc((xc[0], xc[0], xc[1], xc[2]),
               (yc[0], yc[0], yc[1], yc[2]), ax, "k-")
&nbsp;
<i># první oblouk</i>
draw_catmul_rom_arc(xc[0:4], yc[0:4], ax, "r-")
&nbsp;
<i># druhý oblouk</i>
draw_catmul_rom_arc(xc[1:5], yc[1:5], ax, "b-")
&nbsp;
<i># třetí oblouk</i>
draw_catmul_rom_arc(xc[2:6], yc[2:6], ax, "g-")
&nbsp;
<i># oblouk s násobnými body</i>
draw_catmul_rom_arc((xc[3], xc[4], xc[5], xc[5]),
               (yc[3], yc[4], yc[5], yc[5]), ax, "k-")
&nbsp;
<i># uložení grafu do rastrového obrázku</i>
plt.savefig("catmul-rom_spline_B.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 16: Catmul-Romova spline složená z&nbsp;několika segmentů, která
prochází svými krajními body.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny předminule, minule i dnes popisované demonstrační příklady určené
pro Python 3 a knihovnu Matplotlib byly uloženy do Git repositáře, který je
dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>line.py</td><td>úsečka</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/line.py">https://github.com/tisnik/presentations/blob/master/curves/line.py</a></td></tr>
<tr><td> 2</td><td>parabola.py</td><td>parabola</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parabola.py">https://github.com/tisnik/presentations/blob/master/curves/parabola.py</a></td></tr>
<tr><td> 3</td><td>hyperbola.py</td><td>hyperbola</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/hyperbola.py">https://github.com/tisnik/presentations/blob/master/curves/hyperbola.py</a></td></tr>
<tr><td> 4</td><td>ellipse_parametric.py</td><td>parametricky zadaná elipsa</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/ellipse_parametric.py">https://github.com/tisnik/presentations/blob/master/curves/ellipse_parametric.py</a></td></tr>
<tr><td> 5</td><td>ellipse_general.py</td><td>obecná elipsa</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/ellipse_general.py">https://github.com/tisnik/presentations/blob/master/curves/ellipse_general.py</a></td></tr>
<tr><td> 6</td><td>circle_parametric.py</td><td>parametricky zadaná kružnice</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/circle_parametric.py">https://github.com/tisnik/presentations/blob/master/curves/circle_parametric.py</a></td></tr>
<tr><td> 7</td><td>circle_polar.py</td><td>polární souřadnice při kreslení kružnice</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/circle_polar.py">https://github.com/tisnik/presentations/blob/master/curves/circle_polar.py</a></td></tr>
<tr><td> 8</td><td>archimedes_spiral.py</td><td>Archimédova spirála</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/archimedes_spiral.py">https://github.com/tisnik/presentations/blob/master/curves/archimedes_spiral.py</a></td></tr>
<tr><td> 9</td><td>fermats_spiral.py</td><td>Fermatova spirála</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/fermats_spiral.py">https://github.com/tisnik/presentations/blob/master/curves/fermats_spiral.py</a></td></tr>
<tr><td>10</td><td>hyperbolic_spiral.py</td><td>Hyperbolická spirála</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/hyperbolic_spiral.py">https://github.com/tisnik/presentations/blob/master/curves/hyperbolic_spiral.py</a></td></tr>
<tr><td>11</td><td>logarithmic_spiral.py</td><td>Logaritmická spirála</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/logarithmic_spiral.py">https://github.com/tisnik/presentations/blob/master/curves/logarithmic_spiral.py</a></td></tr>
<tr><td>12</td><td>parabola_catenary_1.py</td><td>parabola vs. řetězovka</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parabola_catenary_1.py">https://github.com/tisnik/presentations/blob/master/curves/parabola_catenary_1.py</a></td></tr>
<tr><td>13</td><td>parabola_catenary_2.py</td><td>parabola vs. řetězovka</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parabola_catenary_2.py">https://github.com/tisnik/presentations/blob/master/curves/parabola_catenary_2.py</a></td></tr>
<tr><td>14</td><td>cardioid.py</td><td>srdcovka</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/cardioid.py">https://github.com/tisnik/presentations/blob/master/curves/cardioid.py</a></td></tr>
<tr><td>15</td><td>catenary.py</td><td>řetězovka</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/catenary.py">https://github.com/tisnik/presentations/blob/master/curves/catenary.py</a></td></tr>
<tr><td>17</td><td>fresnel.py</td><td>Fresnelův integrál</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/fresnel.py">https://github.com/tisnik/presentations/blob/master/curves/fresnel.py</a></td></tr>
<tr><td>19</td><td>lissajous.py</td><td>Lissajousův obrazec</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/lissajous.py">https://github.com/tisnik/presentations/blob/master/curves/lissajous.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>superellipse1.py</td><td>superelipsa</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/superellipse1.py">https://github.com/tisnik/presentations/blob/master/curves/superellipse1.py</a></td></tr>
<tr><td>21</td><td>superellipse2.py</td><td>superelipsa, ovšem s&nbsp;odlišnými parametry</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/superellipse2.py">https://github.com/tisnik/presentations/blob/master/curves/superellipse2.py</a></td></tr>
<tr><td>22</td><td>cycloid.py</td><td>cykloida</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/cycloid.py">https://github.com/tisnik/presentations/blob/master/curves/cycloid.py</a></td></tr>
<tr><td>23</td><td>epicycloid1.py</td><td>epicykloida</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/epicycloid1.py">https://github.com/tisnik/presentations/blob/master/curves/epicycloid1.py</a></td></tr>
<tr><td>24</td><td>epicycloid2.py</td><td>epicykloida, ovšem s&nbsp;odlišnými parametry</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/epicycloid2.py">https://github.com/tisnik/presentations/blob/master/curves/epicycloid2.py</a></td></tr>
<tr><td>25</td><td>hypocycloid1.py</td><td>hypocykloida</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/hypocycloid1.py">https://github.com/tisnik/presentations/blob/master/curves/hypocycloid1.py</a></td></tr>
<tr><td>26</td><td>hypocycloid2.py</td><td>hypocykloida, ovšem s&nbsp;odlišnými parametry</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/hypocycloid2.py">https://github.com/tisnik/presentations/blob/master/curves/hypocycloid2.py</a></td></tr>
<tr><td>27</td><td>hypotrochoid1.py</td><td>hypotrochoida</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/hypotrochoid1.py">https://github.com/tisnik/presentations/blob/master/curves/hypotrochoid1.py</a></td></tr>
<tr><td>28</td><td>hypotrochoid2.py</td><td>hypotrochoida, ovšem s&nbsp;odlišnými parametry</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/hypotrochoid2.py">https://github.com/tisnik/presentations/blob/master/curves/hypotrochoid2.py</a></td></tr>
<tr><td>29</td><td>hypotrochoid3.py</td><td>hypotrochoida, ovšem s&nbsp;odlišnými parametry</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/hypotrochoid3.py">https://github.com/tisnik/presentations/blob/master/curves/hypotrochoid3.py</a></td></tr>
<tr><td>30</td><td>implicit/implicit.py</td><td>křivka zadaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/implicit.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/implicit.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>3d_plot/parabola1A.py</td><td>funkce pro parabolu ve 3D</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/3d_plot/parabola1A.py">https://github.com/tisnik/presentations/blob/master/curves/3d_plot/parabola1A.py</a></td></tr>
<tr><td>32</td><td>3d_plot/parabola1B.py</td><td>funkce pro parabolu ve 3D + kontury</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/3d_plot/parabola1B.py">https://github.com/tisnik/presentations/blob/master/curves/3d_plot/parabola1B.py</a></td></tr>
<tr><td>33</td><td>3d_plot/parabola2A.py</td><td>funkce pro parabolu ve 3D</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/3d_plot/parabola2A.py">https://github.com/tisnik/presentations/blob/master/curves/3d_plot/parabola2A.py</a></td></tr>
<tr><td>34</td><td>3d_plot/parabola2B.py</td><td>funkce pro parabolu ve 3D + kontury</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/3d_plot/parabola2B.py">https://github.com/tisnik/presentations/blob/master/curves/3d_plot/parabola2B.py</a></td></tr>
<tr><td>35</td><td>3d_plot/hyperbolaA.py</td><td>funkce pro hyperbolu ve 3D</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/3d_plot/hyperbolaA.py">https://github.com/tisnik/presentations/blob/master/curves/3d_plot/hyperbolaA.py</a></td></tr>
<tr><td>36</td><td>3d_plot/hyperbolaB.py</td><td>funkce pro hyperbolu ve 3D + kontury</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/3d_plot/hyperbolaB.py">https://github.com/tisnik/presentations/blob/master/curves/3d_plot/hyperbolaB.py</a></td></tr>
<tr><td>37</td><td>3d_plot/sin_cos_1.py</td><td>goniometrická funkce ve 3D</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/3d_plot/sin_cos_1.py">https://github.com/tisnik/presentations/blob/master/curves/3d_plot/sin_cos_1.py</a></td></tr>
<tr><td>38</td><td>3d_plot/sin_cos_2.py</td><td>goniometrická funkce ve 3D</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/3d_plot/sin_cos_2.py">https://github.com/tisnik/presentations/blob/master/curves/3d_plot/sin_cos_2.py</a></td></tr>
<tr><td>39</td><td>anim/cassini_anim.py</td><td>animace změny koeficientů Cassiniho oválu</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/anim/cassini_anim.py">https://github.com/tisnik/presentations/blob/master/curves/anim/cassini_anim.py</a></td></tr>
<tr><td>40</td><td>anim/spiric_anim.py</td><td>animace změny koeficientů průsečíku roviny s&nbsp;toroidem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/anim/spiric_anim.py">https://github.com/tisnik/presentations/blob/master/curves/anim/spiric_anim.py</a></td></tr>
<tr><td>41</td><td>implicit/cassini1.py</td><td>Cassiniho ovál</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/cassini1.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/cassini1.py</a></td></tr>
<tr><td>42</td><td>implicit/cassini2.py</td><td>Cassiniho ovál</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/cassini2.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/cassini2.py</a></td></tr>
<tr><td>43</td><td>implicit/cassini3.py</td><td>Cassiniho ovál</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/cassini3.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/cassini3.py</a></td></tr>
<tr><td>44</td><td>implicit/cassini4.py</td><td>Cassiniho ovál</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/cassini4.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/cassini4.py</a></td></tr>
<tr><td>45</td><td>implicit/circle1.py</td><td>kružnice specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/circle1.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/circle1.py</a></td></tr>
<tr><td>46</td><td>implicit/circle2.py</td><td>kružnice specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/circle2.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/circle2.py</a></td></tr>
<tr><td>47</td><td>implicit/ellipse1.py</td><td>elipsa specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/ellipse1.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/ellipse1.py</a></td></tr>
<tr><td>48</td><td>implicit/ellipse2.py</td><td>elipsa specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/ellipse2.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/ellipse2.py</a></td></tr>
<tr><td>49</td><td>implicit/ellipse3.py</td><td>elipsa specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/ellipse3.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/ellipse3.py</a></td></tr>
<tr><td>50</td><td>implicit/elliptic1.py</td><td>eliptická křivka</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/elliptic1.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/elliptic1.py</a></td></tr>
<tr><td>51</td><td>implicit/elliptic2.py</td><td>mřížka několika eliptických křivek</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/elliptic2.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/elliptic2.py</a></td></tr>
<tr><td>52</td><td>implicit/flower.py</td><td>křivka připomínající květ</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/flower.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/flower.py</a></td></tr>
<tr><td>53</td><td>implicit/hyperbola1.py</td><td>hyperbola specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/hyperbola1.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/hyperbola1.py</a></td></tr>
<tr><td>54</td><td>implicit/hyperbola2.py</td><td>hyperbola specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/hyperbola2.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/hyperbola2.py</a></td></tr>
<tr><td>55</td><td>implicit/line1.py</td><td>přímka specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/line1.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/line1.py</a></td></tr>
<tr><td>56</td><td>implicit/line2.py</td><td>přímka specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/line2.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/line2.py</a></td></tr>
<tr><td>57</td><td>implicit/parabola1.py</td><td>parabola specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/parabola1.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/parabola1.py</a></td></tr>
<tr><td>58</td><td>implicit/parabola2.py</td><td>parabola specifikovaná implicitní funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/parabola2.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/parabola2.py</a></td></tr>
<tr><td>59</td><td>implicit/sin_cos_1.py</td><td>implicitní funkce obsahující goniometrické funkce</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/sin_cos_1.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/sin_cos_1.py</a></td></tr>
<tr><td>60</td><td>implicit/sin_cos_2.py</td><td>implicitní funkce obsahující goniometrické funkce</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/sin_cos_2.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/sin_cos_2.py</a></td></tr>
<tr><td>61</td><td>implicit/spiric1.py</td><td>řez toroidu plochou</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/spiric1.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/spiric1.py</a></td></tr>
<tr><td>62</td><td>implicit/spiric2.py</td><td>řez toroidu plochou</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/spiric2.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/spiric2.py</a></td></tr>
<tr><td>63</td><td>implicit/spiric3.py</td><td>řez toroidu plochou</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/implicit/spiric3.py">https://github.com/tisnik/presentations/blob/master/curves/implicit/spiric3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>64</td><td>interpolation/lagrange_interpolation_1.py</td><td>interpolace Lagrangeovým polynomem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/interpolation/lagrange_interpolation_1.py">https://github.com/tisnik/presentations/blob/master/curves/interpolation/lagrange_interpolation_1.py</a></td></tr>
<tr><td>65</td><td>interpolation/lagrange_interpolation_2.py</td><td>interpolace Lagrangeovým polynomem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/interpolation/lagrange_interpolation_2.py">https://github.com/tisnik/presentations/blob/master/curves/interpolation/lagrange_interpolation_2.py</a></td></tr>
<tr><td>66</td><td>interpolation/lagrange_poly_1.py</td><td>konstrukce Lagrangeova polynomu</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/interpolation/lagrange_poly_1.py">https://github.com/tisnik/presentations/blob/master/curves/interpolation/lagrange_poly_1.py</a></td></tr>
<tr><td>67</td><td>interpolation/lagrange_poly_2.py</td><td>konstrukce Lagrangeova polynomu</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/interpolation/lagrange_poly_2.py">https://github.com/tisnik/presentations/blob/master/curves/interpolation/lagrange_poly_2.py</a></td></tr>
<tr><td>68</td><td>approximation/linear_regression_1.py</td><td>lineární regrese</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/linear_regression_1.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/linear_regression_1.py</a></td></tr>
<tr><td>68</td><td>approximation/linear_regression_2.py</td><td>lineární regrese</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/linear_regression_2.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/linear_regression_2.py</a></td></tr>
<tr><td>69</td><td>approximation/linear_regression_3.py</td><td>lineární regrese</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/linear_regression_3.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/linear_regression_3.py</a></td></tr>
<tr><td>70</td><td>approximation/poly_regression_1.py</td><td>aproximace polynomem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/poly_regression_1.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/poly_regression_1.py</a></td></tr>
<tr><td>71</td><td>approximation/poly_regression_2.py</td><td>aproximace polynomem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/poly_regression_2.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/poly_regression_2.py</a></td></tr>
<tr><td>72</td><td>approximation/random_data_linear.py</td><td>náhodná data pro lineární regresi</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/random_data_linear.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/random_data_linear.py</a></td></tr>
<tr><td>73</td><td>approximation/random_data_poly.py</td><td>náhodná data pro aproximaci polynomem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/random_data_poly.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/random_data_poly.py</a></td></tr>
<tr><td>74</td><td>approximation/taylor_sin_1.py</td><td>aproximace funkce sin Taylorovým rozvojem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/taylor_sin_1.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/taylor_sin_1.py</a></td></tr>
<tr><td>75</td><td>approximation/taylor_sin_2.py</td><td>aproximace funkce sin Taylorovým rozvojem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/taylor_sin_2.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/taylor_sin_2.py</a></td></tr>
<tr><td>76</td><td>approximation/taylor_sin_5.py</td><td>aproximace funkce sin Taylorovým rozvojem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/taylor_sin_5.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/taylor_sin_5.py</a></td></tr>
<tr><td>77</td><td>approximation/taylor_sin_9.py</td><td>aproximace funkce sin Taylorovým rozvojem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/taylor_sin_9.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/taylor_sin_9.py</a></td></tr>
<tr><td>78</td><td>approximation/taylor_sin_x.py</td><td>aproximace funkce sin Taylorovým rozvojem</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/approximation/taylor_sin_x.py">https://github.com/tisnik/presentations/blob/master/curves/approximation/taylor_sin_x.py</a></td></tr>
<tr><td>79</td><td>parametric/circle.py</td><td>parametricky zadaná kružnice</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/circle.py">https://github.com/tisnik/presentations/blob/master/curves/parametric/circle.py</a></td></tr>
<tr><td>80</td><td>parametric/Bezier_basis.py</td><td>Bernsteinovy polynomy</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/Bezier_basis.py">https://github.com/tisnik/presentations/blob/master/curves/parametric/Bezier_basis.py</a></td></tr>
<tr><td>81</td><td>parametric/Bezier_cubic.py</td><td>Bézierova kubika</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/Bezier_cubic.py">https://github.com/tisnik/presentations/blob/master/curves/parametric/Bezier_cubic.py</a></td></tr>
<tr><td>82</td><td>parametric/Bezier_kvadric.py</td><td>Bézierova kvadrika</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/Bezier_kvadric.py">https://github.com/tisnik/presentations/blob/master/curves/parametric/Bezier_kvadric.py</a></td></tr>
<tr><td>83</td><td>parametric/B-spline-1.py</td><td>B-spline křivka</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/B-spline-1.py">https://github.com/tisnik/presentations/blob/master/curves/parametric/B-spline-1.py</a></td></tr>
<tr><td>84</td><td>parametric/B-spline-2.py</td><td>B-spline křivka s&nbsp;násobnými body</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/B-spline-2.py">https://github.com/tisnik/presentations/blob/master/curves/parametric/B-spline-2.py</a></td></tr>
<tr><td>85</td><td>parametric/Coons_basis.py</td><td>Coonsovy bázové polynomy</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/Coons_basis.py">https://github.com/tisnik/presentations/blob/master/curves/parametric/Coons_basis.py</a></td></tr>
<tr><td>86</td><td>parametric/Coons.py</td><td>Coonsova křivka</td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/Coons.py">https://github.com/tisnik/presentations/blob/master/curves/parametric/Coons.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>87</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>88</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>89</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>90</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>91</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>92</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>93</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>94</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>95</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>96</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>97</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>98</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>99</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>100</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
<tr><td>101</td><td>parametric/</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/curves/parametric/">https://github.com/tisnik/presentations/blob/master/curves/parametric/</a></td></tr>
</table>

Bezier_cubic_basis.py
Bezier_cubic_basis_sum.py
Bezier_quadric_basis.py
Bezier_quadric_basis_sum.py
Bezier_quartic_basis.py
Bezier_quartic_basis_sum.py
Bezier_quintic_basis.py
Bezier_quintic_basis_sum.py
Catmul-Rom_basis.py
Catmul-Rom_basis_sum.py
Catmul-Rom_cubic.py
Catmul-Rom_spline_A.py
Catmul-Rom_spline_B.py
Coons_basis_2.py
Coons_basis_sum.py
linear_basis.py
linear_basis_sum.py
linear_interpolation.py


<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Famous Curves Index<br />
<a href="https://mathshistory.st-andrews.ac.uk/Curves/">https://mathshistory.st-andrews.ac.uk/Curves/</a>
</li>

<li>Curve (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Curve">https://en.wikipedia.org/wiki/Curve</a>
</li>

<li>Mathematical curves<br />
<a href="https://www.2dcurves.com/index.html">https://www.2dcurves.com/index.html</a>
</li>

<li>Curves (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/topics/Curves.html">https://mathworld.wolfram.com/topics/Curves.html</a>
</li>

<li>Smooth Curve (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/SmoothCurve.html">https://mathworld.wolfram.com/SmoothCurve.html</a>
</li>

<li>Spirals (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/topics/Spirals.html">https://mathworld.wolfram.com/topics/Spirals.html</a>
</li>

<li>An Interactive Introduction to Splines<br />
<a href="https://ibiblio.org/e-notes/Splines/Intro.htm">https://ibiblio.org/e-notes/Splines/Intro.htm</a>
</li>

<li>Parabola<br />
<a href="https://www.2dcurves.com/conicsection/conicsectionp.html">https://www.2dcurves.com/conicsection/conicsectionp.html</a>
</li>

<li>Hyperbola<br />
<a href="https://www.2dcurves.com/conicsection/conicsectionh.html">https://www.2dcurves.com/conicsection/conicsectionh.html</a>
</li>

<li>Dioklova kisoida<br />
<a href="https://cs.wikipedia.org/wiki/Dioklova_kisoida">https://cs.wikipedia.org/wiki/Dioklova_kisoida</a>
</li>

<li>Archimédova spirála<br />
<a href="https://cs.wikipedia.org/wiki/Archim%C3%A9dova_spir%C3%A1la">https://cs.wikipedia.org/wiki/Archim%C3%A9dova_spir%C3%A1la</a>
</li>

<li>Conchoid (mathematics)<br />
<a href="https://en.wikipedia.org/wiki/Conchoid_(mathematics)">https://en.wikipedia.org/wiki/Conchoid_(mathematics)</a>
</li>

<li>Algebraic curve<br />
<a href="https://en.wikipedia.org/wiki/Algebraic_curve">https://en.wikipedia.org/wiki/Algebraic_curve</a>
</li>

<li>Transcendental curve<br />
<a href="https://en.wikipedia.org/wiki/Transcendental_curve">https://en.wikipedia.org/wiki/Transcendental_curve</a>
</li>

<li>Spiral<br />
<a href="https://en.wikipedia.org/wiki/Spiral">https://en.wikipedia.org/wiki/Spiral</a>
</li>

<li>List of spirals<br />
<a href="https://en.wikipedia.org/wiki/List_of_spirals">https://en.wikipedia.org/wiki/List_of_spirals</a>
</li>

<li>Hyperbolická spirála<br />
<a href="https://cs.wikipedia.org/wiki/Hyperbolick%C3%A1_spir%C3%A1la">https://cs.wikipedia.org/wiki/Hyperbolick%C3%A1_spir%C3%A1la</a>
</li>

<li>Hyperbolic Spiral<br />
<a href="https://mathworld.wolfram.com/HyperbolicSpiral.html">https://mathworld.wolfram.com/HyperbolicSpiral.html</a>
</li>

<li>Lituus (mathematics)<br />
<a href="https://en.wikipedia.org/wiki/Lituus_(mathematics)">https://en.wikipedia.org/wiki/Lituus_(mathematics)</a>
</li>

<li>Spiral of Spirals Fractals 2 with Python Turtle (Source Code)<br />
<a href="https://pythonturtle.academy/spiral-of-spirals-fractals-2-with-python-turtle-source-code/">https://pythonturtle.academy/spiral-of-spirals-fractals-2-with-python-turtle-source-code/</a>
</li>

<li>Cornu Spiral<br />
<a href="http://hyperphysics.gsu.edu/hbase/phyopt/cornu.html">http://hyperphysics.gsu.edu/hbase/phyopt/cornu.html</a>
</li>

<li>Spiral<br />
<a href="https://www.2dcurves.com/spiral/spiral.html">https://www.2dcurves.com/spiral/spiral.html</a>
</li>

<li>Algebraic Curves<br />
<a href="https://mathworld.wolfram.com/topics/AlgebraicCurves.html">https://mathworld.wolfram.com/topics/AlgebraicCurves.html</a>
</li>

<li>Elliptic Curves<br />
<a href="https://mathworld.wolfram.com/topics/EllipticCurves.html">https://mathworld.wolfram.com/topics/EllipticCurves.html</a>
</li>

<li>Eukleidovská konstrukce<br />
<a href="https://cs.wikipedia.org/wiki/Eukleidovsk%C3%A1_konstrukce">https://cs.wikipedia.org/wiki/Eukleidovsk%C3%A1_konstrukce</a>
</li>

<li>Euclidean Constructions<br />
<a href="http://www.cs.cas.cz/portal/AlgoMath/Geometry/PlaneGeometry/GeometricConstructions/EuclideanConstructions.htm">http://www.cs.cas.cz/portal/AlgoMath/Geometry/PlaneGeometry/GeometricConstructions/EuclideanConstructions.htm</a>
</li>

<li>Kvadratura kruhu<br />
<a href="https://cs.wikipedia.org/wiki/Kvadratura_kruhu">https://cs.wikipedia.org/wiki/Kvadratura_kruhu</a>
</li>

<li>Trisekce úhlu<br />
<a href="https://cs.wikipedia.org/wiki/Trisekce_%C3%BAhlu">https://cs.wikipedia.org/wiki/Trisekce_%C3%BAhlu</a>
</li>

<li>Straightedge and compass construction<br />
<a href="https://en.wikipedia.org/wiki/Straightedge_and_compass_construction">https://en.wikipedia.org/wiki/Straightedge_and_compass_construction</a>
</li>

<li>C.a.R.<br />
<a href="http://car.rene-grothmann.de/doc_en/index.html">http://car.rene-grothmann.de/doc_en/index.html</a>
</li>

<li>CaRMetal (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/C.a.R.">https://en.wikipedia.org/wiki/C.a.R.</a>
</li>

<li>CaRMetal (Španělsky a Francouzsky)<br />
<a href="http://carmetal.org/index.php/fr/">http://carmetal.org/index.php/fr/</a>
</li>

<li>CaRMetal (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/CaRMetal">https://en.wikipedia.org/wiki/CaRMetal</a>
</li>

<li>Regular Polygon<br />
<a href="http://mathforum.org/dr.math/faq/formulas/faq.regpoly.html">http://mathforum.org/dr.math/faq/formulas/faq.regpoly.html</a>
</li>

<li>Geometric Construction with the Compass Alone<br />
<a href="http://www.cut-the-knot.org/do_you_know/compass.shtml">http://www.cut-the-knot.org/do_you_know/compass.shtml</a>
</li>

<li>Kvadratura kruhu (Wikipedie)<br />
<a href="https://cs.wikipedia.org/wiki/Kvadratura_kruhu">https://cs.wikipedia.org/wiki/Kvadratura_kruhu</a>
</li>

<li>Compass equivalence theorem<br />
<a href="https://en.wikipedia.org/wiki/Compass_equivalence_theorem">https://en.wikipedia.org/wiki/Compass_equivalence_theorem</a>

<li>Curves we (mostly) don't learn in high school (and applications)<br />
<a href="https://www.youtube.com/watch?v=3izFMB91K_Q">https://www.youtube.com/watch?v=3izFMB91K_Q</a>
</li>

<li>Can You Really Derive Conic Formulae from a Cone? - Menaechmus' Constructions<br />
<a href="https://www.maa.org/press/periodicals/convergence/can-you-really-derive-conic-formulae-from-a-cone-menaechmus-constructions">https://www.maa.org/press/periodicals/convergence/can-you-really-derive-conic-formulae-from-a-cone-menaechmus-constructions</a>
</li>

<li>Apollonius of Perga<br />
<a href="https://en.wikipedia.org/wiki/Apollonius_of_Perga">https://en.wikipedia.org/wiki/Apollonius_of_Perga</a>
</li>

<li>Catenary arch<br />
<a href="https://en.wikipedia.org/wiki/Catenary_arch">https://en.wikipedia.org/wiki/Catenary_arch</a>
</li>

<li>Parabolic arch<br />
<a href="https://en.wikipedia.org/wiki/Parabolic_arch">https://en.wikipedia.org/wiki/Parabolic_arch</a>
</li>

<li>Wattova křivka<br />
<a href="https://www.geogebra.org/m/gNh4bW9r">https://www.geogebra.org/m/gNh4bW9r</a>
</li>

<li>Model stegosaura byl získán na stránce<br />
<a href="http://www.tur­bosquid.com/HTMLCli­ent/FullPrevi­ew/Index.cfm/ID/1710­71/Action/FullPreview">http://www.tur­bosquid.com/HTMLCli­ent/FullPrevi­ew/Index.cfm/ID/1710­71/Action/FullPreview</a>
</li>

<li>Obrázek nohy dinosaura byl získán na adrese<br />
<a href="http://perso.wa­nadoo.fr/rimas­son/3d/leg.htm">http://perso.wa­nadoo.fr/rimas­son/3d/leg.htm</a>
</li>

<li>Spirograph<br />
<a href="https://en.wikipedia.org/wiki/Spirograph">https://en.wikipedia.org/wiki/Spirograph</a>
</li>

<li>Epicykloida<br />
<a href="https://cs.wikipedia.org/wiki/Epicykloida">https://cs.wikipedia.org/wiki/Epicykloida</a>
</li>

<li>Hypocykloida<br />
<a href="https://cs.wikipedia.org/wiki/Hypocykloida">https://cs.wikipedia.org/wiki/Hypocykloida</a>
</li>

<li>Hypotrochoida<br />
<a href="https://cs.wikipedia.org/wiki/Hypotrochoida">https://cs.wikipedia.org/wiki/Hypotrochoida</a>
</li>

<li>Superelipsoidy a kvadriky v POV-Rayi<br />
<a href="https://www.root.cz/clanky/superelipsoidy-a-kvadriky-v-pov-rayi/">https://www.root.cz/clanky/superelipsoidy-a-kvadriky-v-pov-rayi/</a>
</li>

<li>Fifty Famous Curves, Lots of Calculus Questions, And a Few Answers<br />
<a href="https://elepa.files.wordpress.com/2013/11/fifty-famous-curves.pdf">https://elepa.files.wordpress.com/2013/11/fifty-famous-curves.pdf</a>
</li>

<li>Barr, A.H.: Superquadrics and Angle Preserving Transformations,<br />
IEEE Computer Graphics and Applications, January 1981
</li>

<li>Bourke Paul: Quadrics,<br />
July 1996
</li>

<li>Bourke Paul: Superellipse and Superellipsoid,<br />
January 1990
</li>

<li>Faux, I.D. a Pratt, M.J.: Computational Geometry for Design and Manufacture,<br />
Ellis Horwood Ltd., Wiley &amp; Sons, 1979
</li>

<li>Wallace A.: Differential Topology,<br />
Benjamin/Cummings Co., Reading, Massachussetts, USA, 1968
</li>

<li>Glossary of Bridge Terminology<br />
<a href="http://sdrc.lib.uiowa.edu/eng/bridges/WaddellGlossary/GlossC.htm">http://sdrc.lib.uiowa.edu/eng/bridges/WaddellGlossary/GlossC.htm</a>
</li>

<li>Brachistochrona<br />
<a href="https://cs.wikipedia.org/wiki/Brachistochrona">https://cs.wikipedia.org/wiki/Brachistochrona</a>
</li>

<li>Missions: Cassini<br />
<a href="https://solarsystem.nasa.gov/missions/cassini/overview/">https://solarsystem.nasa.gov/missions/cassini/overview/</a>
</li>

<li>Giovanni Domenico Cassini<br />
<a href="https://en.wikipedia.org/wiki/Giovanni_Domenico_Cassini">https://en.wikipedia.org/wiki/Giovanni_Domenico_Cassini</a>
</li>

<li>Cassini Ovals<br />
<a href="https://mathworld.wolfram.com/CassiniOvals.html">https://mathworld.wolfram.com/CassiniOvals.html</a>
</li>

<li>Geocentrismus<br />
<a href="https://cs.wikipedia.org/wiki/Geocentrismus">https://cs.wikipedia.org/wiki/Geocentrismus</a>
</li>

<li>Who was Giovanni Cassini?<br />
<a href="https://www.universetoday.com/130823/who-was-giovanni-cassini/">https://www.universetoday.com/130823/who-was-giovanni-cassini/</a>
</li>

<li>Special plane curves<br />
<a href="http://xahlee.info/SpecialPlaneCurves_dir/ConicSections_dir/conicSections.html">http://xahlee.info/SpecialPlaneCurves_dir/ConicSections_dir/conicSections.html</a>
</li>

<li>Why Does Slicing a Cone Give an Ellipse?<br />
<a href="https://infinityisreallybig.com/2019/02/08/why-does-slicing-a-cone-give-an-ellipse/">https://infinityisreallybig.com/2019/02/08/why-does-slicing-a-cone-give-an-ellipse/</a>
</li>

<li>Interpolace<br />
<a href="https://mathonline.fme.vutbr.cz/pg/Algoritmy/05_APROX_KRIVKY.htm">https://mathonline.fme.vutbr.cz/pg/Algoritmy/05_APROX_KRIVKY.htm</a>
</li>

<li>Lagrange Polynomial Interpolation<br />
<a href="https://pythonnumericalmethods.berkeley.edu/notebooks/chapter17.04-Lagrange-Polynomial-Interpolation.html">https://pythonnumericalmethods.berkeley.edu/notebooks/chapter17.04-Lagrange-Polynomial-Interpolation.html</a>
</li>

<li>Python Program for Lagrange Interpolation Method (with Output)<br />
<a href="https://www.codesansar.com/numerical-methods/python-program-lagrange-interpolation-method.htm">https://www.codesansar.com/numerical-methods/python-program-lagrange-interpolation-method.htm</a>
</li>

<li>Smooth Paths Using Catmull-Rom Splines<br />
<a href="https://qroph.github.io/2018/07/30/smooth-paths-using-catmull-rom-splines.html">https://qroph.github.io/2018/07/30/smooth-paths-using-catmull-rom-splines.html</a>
</li>

<li>Lecture 11: Linear Interpolation Again - Bézier Curves<br />
<a href="http://www.math.kent.edu/~reichel/courses/intr.num.comp.1/fall09/lecture12/bez.pdf">http://www.math.kent.edu/~reichel/courses/intr.num.comp.1/fall09/lecture12/bez.pdf</a>
</li>

<li>Geometrie/Úvod do křivek<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/%C3%9Avod_do_k%C5%99ivek">https://cs.wikibooks.org/wiki/Geometrie/%C3%9Avod_do_k%C5%99ivek</a>
</li>

<li>B-Spline Curves and Surfaces (1)<br />
<a href="http://www.cad.zju.edu.cn/home/zhx/GM/006/00-bscs1.pdf">http://www.cad.zju.edu.cn/home/zhx/GM/006/00-bscs1.pdf</a>
</li>

<li>Praktické ukázky možností aplikace Mandelbulber při tvorbě animací <br />
<a href="https://www.root.cz/clanky/prakticke-ukazky-moznosti-aplikace-mandelbulber-pri-tvorbe-animaci/">https://www.root.cz/clanky/prakticke-ukazky-moznosti-aplikace-mandelbulber-pri-tvorbe-animaci/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

