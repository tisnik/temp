<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Lapce: kombinace Vimu, Helixu a Visual Studio Code</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Lapce: kombinace Vimu, Helixu a Visual Studio Code</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se setkáme se zajímavým a do budoucna (pravděpodobně) i užitečným projektem nazvaným Lapce. Z pohledu uživatele-programátora se jedná o kombinaci programátorských editorů Vim, Helix a Visual Studio Code.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Lapce: kombinace Vimu, Helixu a Visual Studio Code</a></p>
<p><a href="#k02">*** 2. Technologie, na níž je Lapce postaven</a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Lapce: kombinace Vimu, Helixu a Visual Studio Code</h2>

<p>V&nbsp;dnešním článku se ve stručnosti seznámíme s&nbsp;projektem nazvaným
<i>Lapce</i>. Jedná se o programátorský textový editor, který svým vzhledem a
základním chováním připomíná známé a populární Visual Studio Code. Navíc ovšem
umožňuje, a to zcela na přání uživatele, přepnout ovládání do režimu, který se
podobá Vimu (či NeoVimu). Lapce díky tomu můžeme zařadit mezi <i>modální</i>
textové editory. Navíc dokáže pracovat s&nbsp;větším množstvím dokumentů
zobrazených typicky v&nbsp;jednotlivých tabech (v&nbsp;rámci plochy okna
editoru) a samozřejmě podporuje zarovnání zdrojových kódů i zvýraznění syntaxe
a v&nbsp;neposlední míře je podporován i <i>Language Server Protokol</i>, jenž
umožňuje realizovat například automatické doplňování kódu, refaktoring atd.</p>

*** image ***
<p><i>Obrázek 1: Prostředí programátorského textového editoru Lapce.</i></p>

<p>Již v&nbsp;úvodní části dnešního článku je však nutné zdůraznit, že
<i>Lapce</i> není (i přes použité modální ovládání a mnohdy podobné klávesové
zkratky) &bdquo;pouhým&ldquo; dalším klonem textového editoru Vi či Vim
(zkratka &bdquo;Vim&ldquo; původně znamenala &bdquo;Vi iMitation&ldquo;, dnes
již pochopitelně &bdquo;Vi iMproved&ldquo;). Ve skutečnosti se jedná o zcela
novou aplikaci (jak na úrovni zdrojového kódu, tak i vnitřních datových
struktur a rozdělení ovládání), které přebírají dobré myšlenky modálního
editoru a současně používají i <i>některé</i> klávesové zkratky Vimu
popř.&nbsp;Vimovské příkazy. Příkladem rozšíření editačních schopností Lapce je
podpora pro větší množství kurzorů (tu lze do Vimu přidat formou pluginu, ovšem
není tak dobře integrovaná do rozhraní Vimu).</p>

<a href="https://www.root.cz/obrazek/355950/"><img src="https://i.iinfo.cz/images/695/kakoune-3-prev.png" class="image-355950" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 2: Prostředí známého textového editoru Vim v&nbsp;případě jeho
spuštění v&nbsp;terminálu. O rozdělení plochy terminálu do oken se stará Vim ve
vlastní režii.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Technologie, na níž je Lapce postaven</h2>

<p>V&nbsp;nadpisu dnešního článku je zmíněn i textový editor Helix (který byl
již na stránkách Roota popsán, viz poslední kapitolu s&nbsp;odkazy). Je tomu
tak z&nbsp;toho důvodu, že jak Helix, tak i Lapce je naprogramován
v&nbsp;programovacím jazyku <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">Rust</a>. I pro
grafické uživatelské rozhraní jsou použity knihovny Rustu, konkrétně knihovna
<a href="https://github.com/lapce/floem">floem</a> (a nikoli řešení založené na
webových technologiích). Výsledkem je velmi snadno instalovatelný a taktéž
velmi rychlý program, což lze ocenit při editaci obrovských souborů,
k&nbsp;čemuž se dnes ještě dostaneme.</p>

<p>Pro zpracování editovaných zdrojových textů, jejich formátování, refaktoring
atd. se používá technologie <i>LSP</i> (<i>Language Server Protocol</i>),
podobně jako v&nbsp;prakticky všech moderních programátorských editorech. To
znamená, že je pouze nutné nainstalovat plugin pro příslušný programovací jazyk
a mít k&nbsp;dispozici LSP pro něj. Poté je již daný jazyk integrován do
Lapce.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Krátké zopakování: LSP</h2>

<p>Language Server Protocol je otevřený standard navržený takovým způsobem, aby
umožňoval komunikaci mezi textovými editory popř.&nbsp;mezi integrovanými
vývojovými prostředími (IDE) na jedné straně a různými typy programátorských
nástrojů na straně druhé. Mezi nástroje, které je díky existenci LSP možné
z&nbsp;editoru/IDE použít, mohou patřit zejména různé <a
href="https://en.wikipedia.org/wiki/Lint_%28software%29">lintery</a>, statické
analyzátory kódu, programy pro kontrolu stylu zápisu programů, nástroje
umožňující refaktoring zdrojového kódu, teoreticky i profilery atd. Nesmíme
samozřejmě zapomenout na dnes již všemi programátory očekávané nástroje pro
automatické doplňování jmen funkcí, metod, objektů atd.,
&bdquo;inteligentní&ldquo; vyhledávání ve zdrojovém kódu, doskoky na definici
funkce, objektu nebo proměnné apod. Všechny tyto nástroje mohou komunikovat
s&nbsp;editorem/IDE přímo (pokud obsahují podporu pro LSP), nebo je možné
využít nějaký obecnější nástroj, který je většinou nazývaný Language Server a
který podporuje větší množství funkcí (typicky vyhledání definic, refaktoring a
automatické doplňování; samozřejmě v&nbsp;závislosti na konkrétní
implementaci).</p>

<img src="https://i.iinfo.cz/images/420/jedi2-17.png" class="image-337221" alt="&#160;" width="754" height="741" />
<p><i>Obrázek XX: Textový editor Emacs ve funkci integrovaného vývojového prostředí.</i></p>

<p><div class="rs-tip-major">Poznámka: samotný protokol je nezávislý na tom,
jestli Language Server běží na stejném počítači jako samotný editor/IDE, či zda
běží na nějakém vzdáleném serveru (jako služba). V&nbsp;prvním případě
samozřejmě budou odezvy rychlejší a doba odezvy by v&nbsp;ideálním případě
neměla být uživatelem vůbec zaznamenána (tj.&nbsp;prostředí musí reagovat do
max.&nbsp;jedné sekundy, spíše však rychleji). Ve druhém případě se může jednat
o sofistikovanější nástroje, které například používají vlastní databázi, AI
modul atd.</div></p>

<p>Myšlenka, na které je <i>language server protocol</i> postaven, samozřejmě
není nijak nová ani převratná, protože se podobný princip využíval již dříve,
například v&nbsp;textových editorech <a
href="https://www.root.cz/n/vim/">Vim</a> a <a
href="https://www.root.cz/n/emacs/">Emacs</a>, které takto mohly komunikovat
s&nbsp;nástroji běžícími na pozadí (daemons), viz též <a
href="https://github.com/Microsoft/language-server-protocol/wiki/Protocol-History">https://github.com/Microsoft/language-server-protocol/wiki/Protocol-History</a>.
Příkladem může být integrace nástroje Jedi do Vimu, o níž jsme se relativně
nedávno zmínili v&nbsp;článku <a
href="https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu/#k15">Knihovna
Jedi: doplňování kódu a statická analýza kódu v Pythonu</a>.</p>




<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

https://lapce.dev/


<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>
</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

