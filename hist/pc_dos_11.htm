<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nestandardní grafické režimy karty VGA</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nestandardní grafické režimy karty VGA</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Po popisu standardních textových i grafických režimů karty VGA se zaměříme na popis režimů nestandardních. Bude se z velké části jednat o různé úpravy standardního grafického režimu 13H s rozlišením 320&times;200 pixelů a s 256 barvami.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nestandardní grafické režimy karty VGA</a></p>
<p><a href="#k02">2. Použití DAC v&nbsp;grafickém režimu 13H</a></p>
<p><a href="#k03">3. První demonstrační příklad: vytvoření barvové palety přes DAC v&nbsp;režimu 13H</a></p>
<p><a href="#k04">4. Cesta k&nbsp;režimu X</a></p>
<p><a href="#k05">5. Pomocná makra pro změnu konfigurace karty VGA</a></p>
<p><a href="#k06">6. Vykreslení barevných bloků se zapnutým zřetězením bitových rovin</a></p>
<p><a href="#k07">7. Vypnutí zřetězení bitových rovin</a></p>
<p><a href="#k08">8. Vykreslení barevných bloků s&nbsp;vypnutým zřetězením bitových rovin</a></p>
<p><a href="#k09">*** 9. Vykreslení barevných bloků s&nbsp;výběrem bitových rovin, do nichž se provádí zápis</a></p>
<p><a href="#k10">10. Úplný zdrojový kód demonstračního příkladu</a></p>
<p><a href="#k11">*** 11. Nestandardní grafický režim s&nbsp;rozlišením 320&times;400 pixelů</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">13. Vykreslení rastrového obrázku ve standardních i nestandardních režimech s&nbsp;256 barvami</a></p>
<p><a href="#k14">*** 14. Rastrový obrázek ve standardním režimu 13h</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nestandardní grafické režimy karty VGA</h2>

<p>V&nbsp;předchozích dvou částech seriálu o tvorbě her a grafických dem na
platformě IBM PC jsme se zaměřili na popis <a
href="https://www.root.cz/clanky/od-ega-ke-grafickym-kartam-mcga-a-vga/">standardních
textových režimů karty VGA</a>, který byl následovaný popisem <a
href="https://www.root.cz/clanky/standardni-graficke-rezimy-karty-vga/">standardních
grafických režimů</a>. Ovšem grafická karta VGA byla z&nbsp;velké části
kompatibilní s&nbsp;předchozími kartami společnosti IBM,
tj.&nbsp;s&nbsp;kartami MDA, CGA i EGA. To ovšem znamenalo, že musela být
široce konfigurovatelná. Navíc VGA podporovala grafický režim s&nbsp;rozlišením
320&times;200 pixelů s&nbsp;256 barvami, jenž zvláštním způsobem kombinoval
(řetězil) jednotlivé bitové roviny. Přidán byl i DAC se svou vlastní barvovou
paletou. Výsledkem byla grafická karta, na níž bylo možné realizovat prakticky
neomezené množství nestandardních grafických režimů (a vlastně i režimů
textových). Dnes si ukážeme základy konfigurace těchto režimů.</p>

<p><div class="rs-tip-major">Poznámka: existuje mnoho důvodů pro použití
nestandardních režimů. Jedná se například o možnost použití vyššího rozlišení,
zobrazení čtvercových pixelů, podporu <i>double bufferingu</i> či dokonce
<i>tripple bufferingu</i>, hardwarový horizontální i vertikální scrolling atd.
Některé z&nbsp;těchto konceptů si pochopitelně postupně ukážeme.</div></p>

<img src="http://i.iinfo.cz/images/560/games121images-8.png" class="image-165494" width="320" height="200" alt="&#160;" />
<p><i>Obrázek 1: Hra Syndicate využívala jak grafický režim s&nbsp;256 barvami,
tak i režim pouze šestnáctibarevný (viz další screenshoty).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Použití DAC v&nbsp;grafickém režimu 13H</h2>

<p>V&nbsp;<a
href="https://www.root.cz/clanky/standardni-graficke-rezimy-karty-vga/">předchozím
článku</a> jsme si řekli, že v&nbsp;16barevných grafických režimech je práce
s&nbsp;barvami poněkud problematická, protože se interně provádí dvojí mapování
hodnot: hodnota pixelu je nejdříve převedena přes LUT tabulku s&nbsp;16 barvami
na barvové kódy a ty jsou následně poslány do DAC, kde je provedeno druhé
mapování. Výsledek je složitý na programování a většinou se řeší tak, že první
barvová paleta obsahuje hodnoty 0..15.</p>

<img src="http://i.iinfo.cz/images/560/games121images-12.png" class="image-165498" width="640" height="480" alt="&#160;" />
<p><i>Obrázek 2: Herní prostředí hry Syndicate v&nbsp;šestnáctibarevném režimu
640&times;480.</i></p>

<p>V&nbsp;grafickém režimu s&nbsp;256 barvami (to je jen režim 13H) je situace
snazší, protože se používá pouze DAC a mapování je snadné: hodnota pixelu
0..255 je v&nbsp;DAC převedena na trojici šestibitových hodnot R, G a B, které
jsou přímo poslány do monitoru. A změnu hodnot v&nbsp;DAC již dobře známe:</p>

<pre>
        mov ax, 0x1010      <i>; služba a podslužba VGA BIOSu</i>
        mov ch, xxx         <i>; hodnota zelené složky 0..63</i>
        mov cl, xxx         <i>; hodnota modré složky 0..63</i>
        mov dh, xxx         <i>; hodnota zelené složky 0..63</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
</pre>

<img src="http://i.iinfo.cz/images/560/games121images-13.png" class="image-165499" width="640" height="480" alt="&#160;" />
<p><i>Obrázek 3: Syndicate: futuristické stavby budoucnosti.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad: vytvoření barvové palety přes DAC v&nbsp;režimu 13H</h2>

<p>Dnešní první demonstrační příklad ukazuje využití DAC pro konfiguraci
barvové palety ve standardním grafickém režimu 13H. Paleta bude obsahovat
několik barvových gradientů, které jsou dobře patrné na následujícím obrázku
(každý gradient obsahuje 64 barev a každý obrazový řádek je vykreslen jednou
konstantní barvou):</p>

*** image ***
<p><i>Obrázek 3: Výsledek získaný po překladu a spuštění dnešního prvního demonstračního příkladu.</i></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Konfigurace barvove palety jedinym volanim prislusne sluzby.</i>
<i>; Zmena hodnot ulozenych v DAC a korektnim mapovanim barev.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_gfx_mode_dac_3.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_gfx_mode_dac_3.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 640x480 se sestnacti barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov dl, 0           <i>; pocitadlo radku</i>
<strong>opak</strong>:
        call draw_line      <i>; vykresleni radku barvou v DL</i>
        inc  dl             <i>; dalsi barva</i>
        cmp  dl, 199        <i>; posledni radek na obrazovce?</i>
        jne  opak           <i>; ne? opakujeme</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor cl, cl          <i>; hodnoty barvovych slozek</i>
        xor dh, dh          <i>; -//-</i>
<strong>next_dac</strong>:
        mov ch, bl          <i>; prvni barvova slozka</i>
        cmp bl, 64          <i>; nastavit i dalsi nebo ne?</i>
        ja  skip_g
        mov cl, ch          <i>; druha barvova slozka</i>
<strong>skip_g</strong>:
        cmp bl, 128         <i>; nastavit i dalsi nebo ne?</i>
        ja  skip_b
        mov dh, ch          <i>; treti barvova slozka</i>
<strong>skip_b</strong>:
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>draw_line</strong>:
        mov cx, 320         <i>; pocitadlo pixelu na radku</i>
        mov al, dl          <i>; barva</i>
        rep stosb           <i>; vyplnit cely radek</i>
        ret                 <i>; hotovo</i>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Cesta k&nbsp;režimu X</h2>

<p>V&nbsp;navazujících kapitolách se zaměříme na popis některých způsobů
modifikace standardního grafického režimu 13h (rozlišení 320&times;200, 256
barev) tak, aby vznikly další (nestandardní) režimy, které z&nbsp;různých
důvodů programátorům více vyhovovaly. O některých důvodech jsme se již
zmiňovali <a href="#k01">v&nbsp;úvodní kapitole</a>. Jedná se například o
možnost použití vyššího rozlišení, zobrazení čtvercových pixelů, podporu
<i>double bufferingu</i> či dokonce <i>tripple bufferingu</i>, hardwarový
horizontální i vertikální scrolling atd.</p>

<p>Modifikace grafického režimu 13h typicky vyžaduje provedení těchto kroků
(některé je nutné provést, jiné závisí na výsledném režimu):</p>

<ol>

<li>Vypnutí zřetězení bitových rovin, protože v&nbsp;opačném případě nelze
využít více, než 65536 pixelů.</li>

<li>Změnu způsobu adresování pixelů v&nbsp;bitových rovinách tak, aby zápis
jednoho bajtu odpovídal změně jednoho pixelu (256 barev) v&nbsp;předem vybrané
bitové rovině nebo bitových rovinách (zapisovat lze až 4 pixely současně
jedinou bajtovou operací, nebo 8 pixelů operací se 16bitovým slovem).</li>

<li>Vypnutí dvojího opakování zobrazení každého obrazového řádku. Tímto trikem
lze velmi snadno zvětšit vertikální rozlišení z&nbsp;200 pixelů na 400 pixelů
(nebo v&nbsp;režimu X z&nbsp;240 pixelů na 480 pixelů atd. atd.).</li>

<li>Modifikace adresy ve video RAM, od níž se provádí vykreslování. Tím můžeme
realizovat scrolling i double či tripple buffering.</li>

<li>Změna počtu bajtů na obrazovém řádku. Typicky nutné při realizaci
horizontálního scrollingu.</li>

<li>Modifikace registru, který umožňuje rozdělit obrazovku na dvě části,
z&nbsp;nichž jedna začíná na pevné adrese a druhá na modifikovatelné adrese.
Tímto trikem se realizuje režim <i>split screen</i>.</li>

<li>Modifikace registrů CRTC (čítače a komparátory), čímž můžeme měnit
horizontální i vertikální rozlišení, a to až do takové míry, kterou již
monitory nemusí dokázat zobrazit.</li>

<li>Výběr krystalu použitého pro generování <i>pixel clock</i> a nepřímo též
řádkové a snímkové frekvence.</li>

</ol>

<p>Pochopitelně budeme postupovat krok za krokem, protože i například realizace
režimu X (<i>Mode-X</i>, <i>X-mode</i>) vyžaduje hned několik různých operací,
které nemusí být na první pohled zcela pochopitelné.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pomocná makra pro změnu konfigurace karty VGA</h2>

<p>Nejprve si připravíme pomocná makra, která budeme volat při změně
konfigurace karty VGA. Prozatím se bude jednat o dvojici maker, jelikož je
nutné měnit jak řídicí registry sekvencéru, tak i registry CRTC (ty se snaží
být zpětně kompatibilní jak s&nbsp;kartou EGA, tak i CGA, i když ve VGA již
nenalezneme řadič Motorola 6845):</p>

<pre>
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
</pre>

<p>Připravíme si i adresy I/O portů sekvencéru a CRTC, ale i adresy některých
důležitých registrů, ke kterým budeme přistupovat:</p>

<pre>
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
</pre>

<p>A konečně poslední makro již známe &ndash; slouží pro výběr bitové roviny
nebo rovin, do kterých se bude provádět zápis barev pixelů:</p>

<pre>
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vykreslení barevných bloků se zapnutým zřetězením bitových rovin</h2>

<p>Vypnutí zřetězení bitových rovin budeme provádět postupně. Nejdříve si
připravíme kostru příkladu se všemi potřebnými makry určenými pro konfiguraci
grafické karty VGA. V&nbsp;tomto příkladu se nejprve nastaví standardní
grafický režim 13H a následně se do něj vykreslí dva barevné bloky, každý o
plné šířce 320 pixelů a výšce 25 pixelů. Výsledná obrazovka by měla vypadat
následovně:</p>

*** image ***
<p><i>Obrázek 4: Dva barevné bloky vykreslené s&nbsp;využitím standardního režimu 13H.</i></p>

<p>Následuje úplný zdrojový kód tohoto demonstračního příkladu:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_gfx_mode_unchained_step_1.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_gfx_mode_unchained_step_1.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        mov di, 0           <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov al, 3           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        mov al, 4           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
&nbsp;
<strong>fill_block</strong>:
        mov cx, 320*200/8   <i>; pocet zapisovanych pixelu (pixel==bajt)</i>
<strong>opak</strong>:
        stosb               <i>; zapis barvy pixelu</i>
        loop opak           <i>; opakujeme CX-krat</i>
        ret                 <i>; hotovo</i>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vypnutí zřetězení bitových rovin</h2>

<p>Naším druhým úkolem bude změna způsobu řetězení bitových rovin (tedy vlastně
vypnutí jejich zřetězení) a modifikace způsobu adresování pixelů v&nbsp;těchto
rovinách. Připomeňme si, že standardní režim 13h je zvláštní tím (a zcela se
vymyká ostatním podporovaným režimům), že barvy pixelů jsou z&nbsp;pohledu
programátora uloženy lineárně za sebou, tj.&nbsp;na adrese 0xa000:0000 je barva
pixelu v&nbsp;levém horním rohu, na adrese 0xa000:0001 je adresa druhého pixelu
na řádku atd. Interně je ovšem první pixel uložen v&nbsp;první bitové rovině,
druhý pixel ve druhé rovině, ... pátý pixel opět v&nbsp;první rovině atd.
Z&nbsp;každé bitové roviny je využita jen 1/4 jejich kapacity.</p>

<a href="https://i.iinfo.cz/images/577/pc86-14.png"><img src="https://i.iinfo.cz/images/577/pc86-14-prev.png" alt="pc86" width="360" height="270" /></a>
<p><i>Obrázek 5: Struktura obrazové paměti v&nbsp;grafickém režimu 13H.</i></p>

<p>Vypnutím zřetězení dosáhneme toho, že pixely již nebudou z&nbsp;pohledu
programátora uloženy lineárně za sebou, což znamená, že přímým adresováním bude
možné vybrat vždy čtyři pixely &bdquo;pod sebou&ldquo;, tj.&nbsp;podobně jako
v&nbsp;režimu 640&times;480 pixelů (podrobnosti si ukážeme). A navíc je nutné
ještě modifikovat způsob adresování modifikací dalších dvou registrů sekvencéru
karty VGA. Jedná se o registry <strong></strong> a <strong></strong>. Celá
operace &bdquo;vypnutí zřetězení&ldquo; se tedy realizuje následovně:</p>

<pre>
gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, jak nám definice
vlastních maker ulehčila programování.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vykreslení barevných bloků s&nbsp;vypnutým zřetězením bitových rovin</h2>

<p>Pokud se nyní pokusíme vykreslit dvojici barevných pruhů přesně tak, jako
tomu bylo <a href="#k06">v&nbsp;příkladu předchozím</a>, bude výsledek vypadat
zcela odlišně, protože každý zápis do obrazové paměti v&nbsp;takovém případě
změní čtyři pixely (vizuálně uložených vedle sebe, interně uložených &bdquo;pod
sebou&ldquo; ve čtyřech bitových rovinách). Nyní se tedy vyplní větší část
obrazovky, protože každý zápis změní čtyři pixely:</p>

*** image ***
<p><i>Obrázek 6: Nyní budou barevné pruhy zobrazeny přes celou obrazovku.</i></p>

<p>V&nbsp;dalším demonstračním příkladu je realizována výše popsaná operace
vypnutí zřetězení bitových rovin a změna způsobu adresování pixelů
v&nbsp;bitových rovinách:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_gfx_mode_unchained_step_2.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_gfx_mode_unchained_step_2.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
&nbsp;
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        mov di, 0           <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov al, 3           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        mov al, 4           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
&nbsp;
<strong>fill_block</strong>:
        mov cx, 320*200/8   <i>; pocet zapisovanych pixelu (pixel==bajt)</i>
<strong>opak</strong>:
        stosb               <i>; zapis barvy pixelu</i>
        loop opak           <i>; opakujeme CX-krat</i>
        ret                 <i>; hotovo</i>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vykreslení barevných bloků s&nbsp;výběrem bitových rovin, do nichž se provádí zápis</h2>

*** image ***
<p><i>Obrázek 7: </i></p>

*** image ***
<p><i>Obrázek 8: </i></p>

*** image ***
<p><i>Obrázek 9: </i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Úplný zdrojový kód demonstračního příkladu</h2>

<p>Opět si uveďme, jak vypadá úplný zdrojový kód příkladu, který po svém
překladu a spuštění vykreslí barevné pruhy do vybraných bitových rovin (mezi
jednotlivými kroky je zapotřebí stisknout klávesu):</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_gfx_mode_unchained_step_3.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_gfx_mode_unchained_step_3.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
&nbsp;
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        mov di, 0           <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov al, 3           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        select_bitplane 1   <i>; zapis jen do jedine bitove roviny</i>
&nbsp;
        mov al, 4           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        sub di, 320*200/8   <i>; posun zpet</i>
        select_bitplane 7   <i>; zapis jen do tri bitovych rovin</i>
        mov al, 5           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        sub di, 320*200/8   <i>; posun zpet</i>
        select_bitplane 15  <i>; zapis jen vsech ctyr bitovych rovin</i>
        mov al, 6           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
&nbsp;
<strong>fill_block</strong>:
        mov cx, 320*200/8   <i>; pocet zapisovanych pixelu (pixel==bajt)</i>
<strong>opak</strong>:
        stosb               <i>; zapis barvy pixelu</i>
        loop opak           <i>; opakujeme CX-krat</i>
        ret                 <i>; hotovo</i>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Nestandardní grafický režim s&nbsp;rozlišením 320&times;400 pixelů</h2>

<p></p>

<pre>
set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
</pre>

<table>
<tr><th>Bit</th><th>Stručný popis</th></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
</table>

<pre>
set_crtc_register MAXIMUM_SCAN_LINE, 0x40         <i>; 400 grafickych radku</i>
</pre>

*** image ***
<p><i>Obrázek 10: Barevné pruhy zobrazené v&nbsp;grafickém režimu
s&nbsp;rozlišením 320&times;400 pixelů.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Demonstrační příklad: nastavení a použití nestandardního grafického režimu s&nbsp;rozlišením 320&times;400 pixelů.</h2>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x400 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_gfx_mode_320x400.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_gfx_mode_320x400.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
MAXIMUM_SCAN_LINE    equ 0x09   <i>; CRTC</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
&nbsp;
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
        set_crtc_register MAXIMUM_SCAN_LINE, 0x40         <i>; 400 grafickych radku</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        mov di, 0           <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov al, 3           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        select_bitplane 1   <i>; zapis jen do jedine bitove roviny</i>
&nbsp;
        mov al, 4           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        sub di, 320*200/8   <i>; posun zpet</i>
        select_bitplane 7   <i>; zapis jen do tri bitovych rovin</i>
        mov al, 5           <i>; kod barvy pixelu</i>
        call fill_block
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
&nbsp;
<strong>fill_block</strong>:
        mov cx, 320*200/8   <i>; pocet zapisovanych pixelu (pixel==bajt)</i>
<strong>opak</strong>:
        stosb               <i>; zapis barvy pixelu</i>
        loop opak           <i>; opakujeme CX-krat</i>
        ret                 <i>; hotovo</i>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vykreslení rastrového obrázku ve standardních i nestandardních režimech s&nbsp;256 barvami</h2>

<p>V&nbsp;předchozích demonstračních příkladech jsme po modifikaci původního
standardního grafického režimu 13h pouze vykreslili barevné pruhy. To je sice
velmi jednoduchá operace, ale nijak nám neumožňuje si lépe uvědomit, jaká je
vlastně organizace video paměti. Proto si ukážeme poněkud sofistikovanější
postup, který spočívá v&nbsp;tom, že do obrazové paměti vykreslíme předem
připravený rastrový obrázek. Ten bude mít rozlišení přesně 320&times;200 pixelů
a využívá barvovou paletu se stupni šedi (což je opět zjednodušení, abychom
nemuseli barvovou paletu načítat z&nbsp;paměti, ale mohli ji přímo programově
vygenerovat). Samotný rastrový obrázek je v&nbsp;době překladu uložen
v&nbsp;binárním souboru <strong>image_320x200.bin</strong> a do programového
kódu ho přidáme nám již známou volbou:</p>

<pre>
<i>; pridani binarnich dat s rastrovym obrazkem</i>
<strong>image</strong>:
    incbin "image_320x200.bin"
</pre>

<p><div class="rs-tip-major">Poznámka: zde je vhodné upozornit na to, že celý
<a
href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/image_320x200.bin">rastrový
obrázek</a> s&nbsp;rozlišením 320&times;200 pixelů má velikost 64000 bajtů a do
kódového segmentu souborů COM lze uložit jen 65536 bajtů (prakticky vlastně
ještě o 256 bajtů méně kvůli tomu, kde začíná programový kód). To znamená, že
pro vlastní program nám přibližně zbývá &bdquo;pouhý&ldquo; jeden kilobajt;
ovšem jeden kilobajt pro assembler (strojový kód) znamená hodně velký prostor
&ndash; dokonce existují například šachové algoritmy, které se do něj vejdou (a
celá řada dem-inter s&nbsp;velikostí 128 bajtů, 256 bajtů nebo právě onen jeden
kilobajt). My sice tak sofistikované algoritmy pochopitelně dělat nebudeme, ale
bez problémů si s&nbsp;dostupnou pamětí vystačíme.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Rastrový obrázek ve standardním režimu 13h</h2>

<p>V&nbsp;prvním demonstračním příkladu, v&nbsp;němž se pokusíme o zobrazení
rastrového obrázku, využijeme standardní grafický režim 13h. Prováděné operace
budou v&nbsp;tomto případě velmi jednoduché, protože je již všechny dobře známe
(pouze se adaptujeme na jiný formát uložení pixelů):</p>

<ol>

<li>Nastavení grafického režimu 13h zavoláním příslušné služby BIOSu</li>

<li>Modifikace barvové palety, a to v&nbsp;tomto případě přímo přes DAC, tedy
změnou obsahu tabulky s&nbsp;256 záznamy, přičemž každý záznam má šest bitů pro
každou barvovou složku (tedy jedná se o organizaci 256&times;18 bitů).</li>

<li>Inicializace registrů použitých při blokovém přenosu obrázku. Jedná se o
segmentové registry, registry použité při adresování a taktéž o programový
čítač.</li>

<li>Vlastní přenos hodnot pixelů. Lze provádět po bajtech nebo po
šestnáctibitových slovech. Přenos po bajtech využijeme později
v&nbsp;nezřetězených grafických režimech. Samozřejmě je však rychlejší přenos
po slovech (a teoreticky po 32bitových slovech, což ovšem naráží na omezenou
šířku sběrnice ISA).</li>

</ol>

<p>Výsledek by měl vypadat následovně:</p>

*** image ***
<p><i>Obrázek 11: Rastrový obrázek vykreslený ve standardním grafickém režimu
13h.</i></p>

<p>Následuje výpis celého zdrojového kódu tohoto příkladu:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vykresleni rastroveho obrazku.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_image.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_image.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; paleta ve stupnich sedi</i>
%macro <strong>grayscale_palette</strong> 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
<strong>next_dac</strong>:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 se sestnacti barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>
&nbsp;
        mov ax, cs
        mov ds, ax
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov cx, 320*200/2   <i>; pocet zapisovanych bajtu (=pixelu)</i>
        rep movsw           <i>; prenos celeho obrazku</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<i>; pridani binarnich dat s rastrovym obrazkem</i>
<strong>image</strong>:
    incbin "image_320x200.bin"
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p>Nyní navážeme na předchozí demonstrační příklad, ovšem ještě před vykreslením rastrového obrázku (tj.&nbsp;před blokovým přenosem) vypneme zřetězení bitových rovin a nastavíme korektní způsob adresování pixelů v&nbsp;bitových rovinách. V&nbsp;tomto případě již víme, jak dopadneme &ndash; vždy čtyři sousední pixely budou obsahovat stejnou barvu (zápis je proveden do všech bitových rovin), což pochopitelně vede k&nbsp;nekorektnímu výsledku. Nicméně nám to umožňuje si ověřit, že obrazová paměť je nyní skutečně z&nbsp;pohledu programátora organizována zcela odlišným způsobem, který má svoje výhody, ale i nevýhody.</p>

<p>Korektní vykreslení rastrového obrázku s&nbsp;lineárně uloženými pixely v&nbsp;grafickém režimu s&nbsp;nezřetězenými rovinami ovšem vyžaduje odlišný přístup.</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>; Vykresleni rastroveho obrazku do vsech bitovych rovin.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_unchained_image_1.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_unchained_image_1.asm</i>


<i>;-----------------------------------------------------------------------------</i>

<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; nastaveni jednoho registru sekvenceru</i>
%macro set_sequencer_register 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro

<i>; nastaveni jednoho CRTC registru</i>
%macro set_crtc_register 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro

<i>; vyber bitove roviny</i>
%macro select_bitplane 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 se sestnacti barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

                            <i>; mod 320x200 bez zretezeni rovin</i>
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>

        mov ax, cs
        mov ds, ax          <i>; zajistit, ze bude mozne adresovat cely obrazek</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax

        xor ax, ax          <i>; offset pixelu</i>
        call move_image_part; prenest obrazek

        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>

move_image_part:
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
        add si, ax          <i>; offset pixelu</i>
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        mov cx, 320*200/4   <i>; pocet zapisovanych bajtu (=pixelu)</i>
bitblt:
        lodsb               <i>; nacist bajt z obrazku</i>
        add si, 3           <i>; celkove posun o 4 pixely v obrazku </i>
        stosb               <i>; ulozit do obrazove pameti</i>
        loop bitblt         <i>; presunout CX pixelu</i>
        ret

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>; Vykresleni rastroveho obrazku postupne do vsech bitovych rovin.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_unchained_image_2.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_unchained_image_2.asm</i>


<i>;-----------------------------------------------------------------------------</i>

<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; nastaveni jednoho registru sekvenceru</i>
%macro set_sequencer_register 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro

<i>; nastaveni jednoho CRTC registru</i>
%macro set_crtc_register 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro

<i>; vyber bitove roviny</i>
%macro select_bitplane 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 se sestnacti barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

                            <i>; mod 320x200 bez zretezeni rovin</i>
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>

        mov ax, cs
        mov ds, ax          <i>; zajistit, ze bude mozne adresovat cely obrazek</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax

        select_bitplane 1   <i>; prvni bitplane</i>
        xor ax, ax          <i>; offset pixelu</i>
        call move_image_part; prenest obrazek
        wait_key            <i>; cekani na klavesu</i>

        select_bitplane 2   <i>; druha bitplane</i>
        mov ax, 1
        call move_image_part; prenest obrazek
        wait_key            <i>; cekani na klavesu</i>

        select_bitplane 4   <i>; treti bitplane</i>
        mov ax, 2
        call move_image_part; prenest obrazek
        wait_key            <i>; cekani na klavesu</i>

        select_bitplane 8   <i>; ctvrta bitplane</i>
        mov ax, 3
        call move_image_part; prenest obrazek
        wait_key            <i>; cekani na klavesu</i>

        exit                <i>; navrat do DOSu</i>

move_image_part:
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
        add si, ax          <i>; offset pixelu</i>
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        mov cx, 320*200/4   <i>; pocet zapisovanych bajtu (=pixelu)</i>
bitblt:
        lodsb               <i>; nacist bajt z obrazku</i>
        add si, 3           <i>; celkove posun o 4 pixely v obrazku </i>
        stosb               <i>; ulozit do obrazove pameti</i>
        loop bitblt         <i>; presunout CX pixelu</i>
        ret

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x400 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>; Vykresleni rastroveho obrazku postupne do vsech bitovych rovin.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x400_unchained_image.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x400_unchained_image.asm</i>


<i>;-----------------------------------------------------------------------------</i>

<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
MAXIMUM_SCAN_LINE    equ 0x09   <i>; CRTC</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; nastaveni jednoho registru sekvenceru</i>
%macro set_sequencer_register 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro

<i>; nastaveni jednoho CRTC registru</i>
%macro set_crtc_register 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro

<i>; vyber bitove roviny</i>
%macro select_bitplane 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 se sestnacti barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

                            <i>; mod 320x200 bez zretezeni rovin</i>
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
        set_crtc_register MAXIMUM_SCAN_LINE, 0x40         <i>; 400 grafickych radku</i>

        mov ax, cs
        mov ds, ax          <i>; zajistit, ze bude mozne adresovat cely obrazek</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax

        select_bitplane 1   <i>; prvni bitplane</i>
        xor ax, ax          <i>; offset pixelu</i>
        call move_image_part; prenest obrazek
        wait_key            <i>; cekani na klavesu</i>

        select_bitplane 2   <i>; druha bitplane</i>
        mov ax, 1
        call move_image_part; prenest obrazek
        wait_key            <i>; cekani na klavesu</i>

        select_bitplane 4   <i>; treti bitplane</i>
        mov ax, 2
        call move_image_part; prenest obrazek
        wait_key            <i>; cekani na klavesu</i>

        select_bitplane 8   <i>; ctvrta bitplane</i>
        mov ax, 3
        call move_image_part; prenest obrazek
        wait_key            <i>; cekani na klavesu</i>

        exit                <i>; navrat do DOSu</i>

move_image_part:
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
        add si, ax          <i>; offset pixelu</i>
        mov di, 320*100/4   <i>; nyni ES:DI obsahuje adresu pixelu ve video RAM</i>

        mov cx, 320*200/4   <i>; pocet zapisovanych bajtu (=pixelu)</i>
bitblt:
        lodsb               <i>; nacist bajt z obrazku</i>
        add si, 3           <i>; celkove posun o 4 pixely v obrazku </i>
        stosb               <i>; ulozit do obrazove pameti</i>
        loop bitblt         <i>; presunout CX pixelu</i>
        ret

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad pomocí assembleru <strong>NASM</strong>, byly uložen do Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>hello.asm</td><td>program typu &bdquo;Hello world&ldquo; naprogramovaný v&nbsp;assembleru pro systém DOS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm</a></td></tr>
<tr><td> 2</td><td>hello_shorter.asm</td><td>kratší varianta výskoku z&nbsp;procesu zpět do DOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm</a></td></tr>
<tr><td> 3</td><td>hello_wait.asm</td><td>čekání na stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm</a></td></tr>
<tr><td> 4</td><td>hello_macros.asm</td><td>realizace jednotlivých částí programu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>gfx_4_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm</a></td></tr>
<tr><td> 6</td><td>gfx_6_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm</a></td></tr>
<tr><td> 7</td><td>gfx_4_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm</a></td></tr>
<tr><td> 8</td><td>gfx_6_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>gfx_6_fill_1.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm</a></td></tr>
<tr><td>10</td><td>gfx_6_fill_2.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, varianta s&nbsp;instrukcí <strong>LOOP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm</a></td></tr>
<tr><td>11</td><td>gfx_6_fill_3.asm</td><td>vyplnění obrazovky instrukcí <strong>REP STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm</a></td></tr>
<tr><td>12</td><td>gfx_6_fill_4.asm</td><td>vyplnění obrazovky, synchronizace vykreslování s&nbsp;paprskem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>gfx_4_image_1.asm</td><td>vykreslení rastrového obrázku získaného z&nbsp;binárních dat, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm</a></td></tr>
<tr><td>14</td><td>gfx_4_image_2.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm</a></td></tr>
<tr><td>15</td><td>gfx_4_image_3.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm</a></td></tr>
<tr><td>16</td><td>gfx_4_image_4.asm</td><td>korektní vykreslení všech sudých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm</a></td></tr>
<tr><td>17</td><td>gfx_4_image_5.asm</td><td>korektní vykreslení všech sudých i lichých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>gfx_4_image_6.asm</td><td>nastavení barvové palety před vykreslením obrázku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm</a></td></tr>
<tr><td>19</td><td>gfx_4_image_7.asm</td><td>nastavení barvové palety před vykreslením obrázku, snížená intenzita barev</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm</a></td></tr>
<tr><td>20</td><td>gfx_4_image_8.asm</td><td>postupná změna barvy pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>gfx_6_putpixel_1.asm</td><td>vykreslení pixelu, základní varianta se 16bitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm</a></td></tr>
<tr><td>22</td><td>gfx_6_putpixel_2.asm</td><td>vykreslení pixelu, varianta s&nbsp;osmibitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm</a></td></tr>
<tr><td>23</td><td>gfx_6_putpixel_3.asm</td><td>vykreslení pixelu, varianta bez násobení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm</a></td></tr>
<tr><td>24</td><td>gfx_6_putpixel_4.asm</td><td>vykreslení pixelu přes obrázek, nekorektní chování (přepis obrázku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm</a></td></tr>
<tr><td>25</td><td>gfx_6_putpixel_5.asm</td><td>vykreslení pixelu přes obrázek, korektní varianta pro bílé pixely</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>cga_text_mode_1.asm</td><td>standardní textový režim s&nbsp;rozlišením 40&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm</a></td></tr>
<tr><td>27</td><td>cga_text_mode_3.asm</td><td>standardní textový režim s&nbsp;rozlišením 80&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm</a></td></tr>
<tr><td>28</td><td>cga_text_mode_intensity.asm</td><td>změna významu nejvyššího bitu atributového bajtu: vyšší intenzita namísto blikání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm</a></td></tr>
<tr><td>29</td><td>cga_text_mode_cursor.asm</td><td>změna tvaru textového kurzoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm</a></td></tr>
<tr><td>30</td><td>cga_text_gfx_1.asm</td><td>zobrazení &bdquo;rastrové mřížky&ldquo;: pseudografický režim 160&times;25 pixelů (interně textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm</a></td></tr>
<tr><td>31</td><td>cga_text_mode_char_height.asm</td><td>změna výšky znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm</a></td></tr>
<tr><td>32</td><td>cga_text_160x100.asm</td><td>grafický režim 160&times;100 se šestnácti barvami (interně upravený textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>hercules_text_mode_1.asm</td><td>využití standardního textového režimu společně s&nbsp;kartou Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm</a></td></tr>
<tr><td>34</td><td>hercules_text_mode_2.asm</td><td>zákaz blikání v&nbsp;textových režimech</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm</a></td></tr>
<tr><td>35</td><td>hercules_turn_off.asm</td><td>vypnutí generování video signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm</a></td></tr>
<tr><td>36</td><td>hercules_gfx_mode_1.asm</td><td>přepnutí karty Hercules do grafického režimu (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm</a></td></tr>
<tr><td>37</td><td>hercules_gfx_mode_2.asm</td><td>přepnutí karty Hercules do grafického režimu (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm</a></td></tr>
<tr><td>38</td><td>hercules_putpixel.asm</td><td>subrutina pro vykreslení jediného pixelu na kartě Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>ega_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm</a></td></tr>
<tr><td>40</td><td>ega_text_mode_80x43.asm</td><td>zobrazení 43 textových řádků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm</a></td></tr>
<tr><td>41</td><td>ega_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm</a></td></tr>
<tr><td>42</td><td>ega_gfx_mode_640x200.asm</td><td>přepnutí do grafického režimu 640&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm</a></td></tr>
<tr><td>43</td><td>ega_gfx_mode_640x350.asm</td><td>přepnutí do grafického režimu 640&times;350 pixelů se čtyřmi nebo šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm</a></td></tr>
<tr><td>44</td><td>ega_gfx_mode_bitplanes_1.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (základní způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm</a></td></tr>
<tr><td>45</td><td>ega_gfx_mode_bitplanes_2.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (rychlejší způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>ega_320x200_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm</a></td></tr>
<tr><td>47</td><td>ega_640x350_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 640&times;350 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>48</td><td>ega_standard_font.asm</td><td>použití standardního fontu grafické karty EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm</a></td></tr>
<tr><td>49</td><td>ega_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>ega_palette_1.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 320&times;200 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm</a></td></tr>
<tr><td>51</td><td>ega_palette_2.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 640&times;350 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm</a></td></tr>
<tr><td>52</td><td>ega_palette_3.asm</td><td>změna všech barev v&nbsp;barvové paletě s&nbsp;využitím programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm</a></td></tr>
<tr><td>53</td><td>ega_palette_4.asm</td><td>změna všech barev, včetně barvy okraje, v&nbsp;barvové paletě voláním funkce BIOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>vga_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm</a></td></tr>
<tr><td>55</td><td>vga_text_mode_80x50.asm</td><td>zobrazení 50 a taktéž 28 textových řádků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm</a></td></tr>
<tr><td>56</td><td>vga_text_mode_intensity_1.asm</td><td>změna chování atributového bitu pro blikání (nebezpečná varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm</a></td></tr>
<tr><td>57</td><td>vga_text_mode_intensity_2.asm</td><td>změna chování atributového bitu pro blikání (bezpečnější varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm</a></td></tr>
<tr><td>58</td><td>vga_text_mode_9th_column.asm</td><td>modifikace způsobu zobrazení devátého sloupce ve znakových režimech (720 pixelů na řádku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm</a></td></tr>
<tr><td>59</td><td>vga_text_mode_cursor_shape.asm</td><td>změna tvaru textového kurzoru na grafické kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm</a></td></tr>
<tr><td>60</td><td>vga_text_mode_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>vga_gfx_mode_640x480.asm</td><td>přepnutí do grafického režimu 640&times;480 pixelů se šestnácti barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm</a></td></tr>
<tr><td>62</td><td>vga_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů s&nbsp;256 barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm</a></td></tr>
<tr><td>63</td><td>vga_gfx_mode_palette.asm</td><td>změna všech barev v&nbsp;barvové paletě grafické karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm</a></td></tr>
<tr><td>64</td><td>vga_gfx_mode_dac_1.asm</td><td>využití DAC (neočekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm</a></td></tr>
<tr><td>65</td><td>vga_gfx_mode_dac_2.asm</td><td>využití DAC (očekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>66</td><td>vga_640x480_putpixel.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 640&times;480 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm</a></td></tr>
<tr><td>67</td><td>vga_320x200_putpixel_1.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm</a></td></tr>
<tr><td>68</td><td>vga_320x200_putpixel_2.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (rychlejší varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>69</td><td>vga_gfx_mode_dac_3.asm</td><td>přímé využití DAC v&nbsp;grafickém režimu 13H</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>70</td><td>vga_gfx_mode_unchained_step_1.asm</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm</a></td></tr>
<tr><td>71</td><td>vga_gfx_mode_unchained_step_2.asm</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm</a></td></tr>
<tr><td>72</td><td>vga_gfx_mode_unchained_step_3.asm</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>73</td><td>vga_gfx_mode_320x400.asm</td><td>nestandardní grafický režim s&nbsp;rozlišením 320&times;400 pixelů a 256 barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm</a></td></tr>
<tr><td>74</td><td>vga_320x200_image.asm</td><td>zobrazení rastrového obrázku ve standardním grafickém režimu 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm</a></td></tr>
<tr><td>75</td><td>vga_320x200_unchained_image_1.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm</a></td></tr>
<tr><td>76</td><td>vga_320x200_unchained_image_2.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm</a></td></tr>
<tr><td>77</td><td>vga_320x400_unchained_image.asm</td><td>zobrazení rastrového obrázku v&nbsp;nestandardním režimu 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>6845 - Motorola CRT Controller<br />
<a href="https://stanislavs.org/helppc/6845.html">https://stanislavs.org/helppc/6845.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>DOSBox<br />
<a href="https://www.dosbox.com/">https://www.dosbox.com/</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Hercules Graphics Card (HCG)<br />
<a href="https://en.wikipedia.org/wiki/Hercules_Graphics_Card">https://en.wikipedia.org/wiki/Hercules_Graphics_Card</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf">https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://yassinebridi.github.io/asm-docs/8086_instruction_set.html">https://yassinebridi.github.io/asm-docs/8086_instruction_set.html</a>
</li>

<li>8088 MPH by Hornet + CRTC + DESiRE (final version)<br />
<a href="https://www.youtube.com/watch?v=hNRO7lno_DM">https://www.youtube.com/watch?v=hNRO7lno_DM</a>
</li>

<li>Area 5150 by CRTC &amp; Hornet (Party Version) / IBM PC+CGA Demo, Hardware Capture<br />
<a href="https://www.youtube.com/watch?v=fWDxdoRTZPc">https://www.youtube.com/watch?v=fWDxdoRTZPc</a>
</li>

<li>80x86 Integer Instruction Set Timings (8088 - Pentium)<br />
<a href="http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf">http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf</a>
</li>

<li>Colour Graphics Adapter: Notes<br />
<a href="https://www.seasip.info/VintagePC/cga.html">https://www.seasip.info/VintagePC/cga.html</a>
</li>

<li>Restoring A Vintage CGA Card With Homebrew HASL<br />
<a href="https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/">https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/</a>
</li>

<li>Demoing An 8088<br />
<a href="https://hackaday.com/2015/04/10/demoing-an-8088/">https://hackaday.com/2015/04/10/demoing-an-8088/</a>
</li>

<li>Video Memory Layouts<br />
<a href="http://www.techhelpmanual.com/89-video_memory_layouts.html">http://www.techhelpmanual.com/89-video_memory_layouts.html</a>
</li>

<li>Screen Attributes<br />
<a href="http://www.techhelpmanual.com/87-screen_attributes.html">http://www.techhelpmanual.com/87-screen_attributes.html</a>
</li>

<li>IBM PC Family  -  BIOS Video Modes<br />
<a href="https://www.minuszerodegrees.net/video/bios_video_modes.htm">https://www.minuszerodegrees.net/video/bios_video_modes.htm</a>
</li>

<li>EGA Functions<br />
<a href="https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega">https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega</a>
</li>

<li>Why the EGA can only use 16 of its 64 colours in 200-line modes<br />
<a href="https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/">https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/</a>
</li>

<li>How 16 colors saved PC gaming - the story of EGA graphics<br />
<a href="https://www.custompc.com/retro-tech/ega-graphics">https://www.custompc.com/retro-tech/ega-graphics</a>
</li>

<li>List of 16-bit computer color palettes<br />
<a href="https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes">https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes</a>
</li>

<li>Why were those colors chosen to be the default palette for 256-color VGA?<br />
<a href="https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga">https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga</a>
</li>

<li>VGA Color Palettes<br />
<a href="https://www.fountainware.com/EXPL/vga_color_palettes.htm">https://www.fountainware.com/EXPL/vga_color_palettes.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page<br />
<a href="http://www.osdever.net/FreeVGA/vga/vga.htm">http://www.osdever.net/FreeVGA/vga/vga.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page - sequencer<br />
<a href="http://www.osdever.net/FreeVGA/vga/seqreg.htm">http://www.osdever.net/FreeVGA/vga/seqreg.htm</a>
</li>

<li>VGA Basics<br />
<a href="http://www.brackeen.com/vga/basics.html">http://www.brackeen.com/vga/basics.html</a>
</li>

<li>Introduction to VGA Mode 'X'<br />
<a href="https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html">https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html</a>
</li>

<li>VGA Mode-X<br />
<a href="https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp">https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp</a>
</li>

<li>Mode-X: 256-Color VGA Magic<br />
<a href="https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf">https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

