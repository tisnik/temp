<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Zvuky a hudba na platformě IBM PC (3)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Zvuky a hudba na platformě IBM PC (3)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku o tvorbě aplikací na platformě IBM PC si ukážeme, jak lze využít čip OPL2 pro tvorbu složitějších zvuků. Taktéž si popíšeme způsob práce s klávesnicí a ovládání přehrávání zvuků z klávesnice v reálném čase.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Pojmenování řídicích registrů čipu OPL2</a></p>
<p><a href="#k02">2. Offsety kanálů a operátorů</a></p>
<p><a href="#k03">3. Přepis tabulky s&nbsp;obsahy registrů pro přehrání komorního A</a></p>
<p><a href="#k04">4. První demonstrační příklad: upravené přehrání komorního A</a></p>
<p><a href="#k05">5. Problematika bitů KEY ON </a></p>
<p><a href="#k06">6. Klávesnice IBM PC, čtení scan kódů kláves</a></p>
<p><a href="#k07">7. Realizace aktivního čekání na stisk klávesy</a></p>
<p><a href="#k08">8. Poznámka na okraj: rozeskok podle kódu stisknuté klávesy</a></p>
<p><a href="#k09">9. Druhý demonstrační příklad &ndash; aktivní čekání na stisk klávesy ESC</a></p>
<p><a href="#k10">10. Ovládání bitu KEY ON z&nbsp;klávesnice</a></p>
<p><a href="#k11">11. Třetí demonstrační příklad: přímé ovládání bitu KEY ON mezerníkem</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Pojmenování řídicích registrů čipu OPL2</h2>

<p>Dnes navážeme na předchozí článek, v&nbsp;němž jsme si vysvětlili především
způsob tvorby zvuků s&nbsp;využitím frekvenční resp.&nbsp;v&nbsp;tomto případě
přesněji fázové syntézy, popsali jsme si základní vlastnosti čipu OPL2 a taktéž
jsme ho naprogramovali tak, aby dokázal přehrát komorní A. Nyní se pokusíme
využít OPL2 pro tvorbu složitějších zvuků. Nejprve ale bude vhodné si
z&nbsp;důvodu větší čitelnosti zdrojových kódů pojmenovat všechny řídicí
registry čipu OPL2. Jak již víme, je těchto registrů velké množství a mnohé
z&nbsp;nich jsou určeny pro ovládání konkrétních operátorů či celých
kanálů:</p>

<table>
<tr><th>Registr/registry</th><th>Oficiální jméno</th></tr>
<tr><td>01    </td><td>Test LSI / Enable waveform control</td></tr>
<tr><td>02    </td><td>Timer 1 data (viz kapitolu 5)</td></tr>
<tr><td>03    </td><td>Timer 2 data (viz kapitolu 5)</td></tr>
<tr><td>04    </td><td>Timer control flags  (viz kapitolu 5)</td></tr>
<tr><td>08    </td><td>Speech synthesis mode / Keyboard split note select</td></tr>
<tr><td>20..35</td><td>Amp Mod / Vibrato / EG type / Key Scaling / Multiple</td></tr>
<tr><td>40..55</td><td>Key scaling level / Operator output level</td></tr>
<tr><td>60..75</td><td>Attack Rate / Decay Rate</td></tr>
<tr><td>80..95</td><td>Sustain Level / Release Rate</td></tr>
<tr><td>A0..A8</td><td>Frequency (low 8 bits)</td></tr>
<tr><td>B0..B8</td><td>Key On / Octave / Frequency (high 2 bits)</td></tr>
<tr><td>BD    </td><td>AM depth / Vibrato depth / Rhythm control</td></tr>
<tr><td>C0..C8</td><td>Feedback strength / Connection type</td></tr>
<tr><td>E0..F5</td><td>Wave Select</td></tr>
</table>

<p>Nadefinujme si tedy nejprve konstanty pro pojmenování všech registrů tak,
jak to odpovídá prvnímu kanálu popř.&nbsp;prvnímu operátoru tohoto kanálu
(tj.&nbsp;budeme vždy používat dolní mez z&nbsp;rozsahu z&nbsp;předchozí
tabulky). Tato jména zkombinujeme s&nbsp;offsety kanálů popř.&nbsp;operátorů,
což je ovšem téma <a href="#k02">navazující kapitoly</a>:</p>

<pre>
<i>; ridici registry OPL2</i>
OPL_TEST_LSI          equ 0x01
OPL_TIMER_1           equ 0x02
OPL_TIMER_2           equ 0x03
OPL_TIMER_CTRL        equ 0x04
OPL_KBSPLIT           equ 0x08
OPL_AMP_VIBRATO_EG    equ 0x20
OPL_LEVEL             equ 0x40
OPL_ATTACK_DECAY      equ 0x60
OPL_SUSTAIN_RELEASE   equ 0x80
OPL_FREQUENCY_LOW     equ 0xa0
OPL_KEY_ON            equ 0xb0
OPL_AM_VIBRATO_RHYTHM equ 0xbd
OPL_FEEDBACK          equ 0xc0
OPL_WAVE_SELECT       equ 0xe0
</pre>

<p><div class="rs-tip-major">Poznámka: prvních pět registrů není vztaženo ke
kanálu ani operátoru, existují tedy v&nbsp;celé sadě registrů jen v&nbsp;jediné
kopii. Totéž platí i pro registr, který jsem pojmenoval
<strong>OPL_AM_VIBRATO_RHYTHM</strong>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Offsety kanálů a operátorů</h2>

<p>Nyní si nadefinujeme offsety kanálů, což je snadné, protože tyto offsety
tvoří souvislou řadu:</p>

<pre>
<i>; indexy kanalu</i>
CHANNEL_1 equ 0
CHANNEL_2 equ 1
CHANNEL_3 equ 2
CHANNEL_4 equ 3
CHANNEL_5 equ 4
CHANNEL_6 equ 5
CHANNEL_7 equ 6
CHANNEL_8 equ 7
CHANNEL_9 equ 8
</pre>

<p>Příkladem registru (registrů), které jsou určeny pro řízení celých kanálů,
je registr <strong>OPL_FREQUENCY_LOW</strong> (spodních osm bitů frekvence).
Tento registr existuje celkem devětkrát (pro každý kanál zvlášť &ndash; kanálů
je devět) a jeho adresu získáme snadno:</p>

<pre>
OPL_FREQUENCY_LOW + CHANNEL_1
OPL_FREQUENCY_LOW + CHANNEL_2
OPL_FREQUENCY_LOW + CHANNEL_3
OPL_FREQUENCY_LOW + CHANNEL_4
OPL_FREQUENCY_LOW + CHANNEL_5
OPL_FREQUENCY_LOW + CHANNEL_6
OPL_FREQUENCY_LOW + CHANNEL_7
OPL_FREQUENCY_LOW + CHANNEL_8
OPL_FREQUENCY_LOW + CHANNEL_9
</pre>

<p>A poslední sadou offsetů jsou offsety pro jednotlivé operátory. Zde již není
situace tak přehledná, protože mapování mezi kanálem a jeho prvním nebo druhým
operátorem netvoří souvislou řadu, což je patrné z&nbsp;následující
tabulky:</p>

<pre>
<i>; offsety pro jednotlive operatory</i>
<i>; --------------------------------------------------</i>
<i>;  Channel        1   2   3   4   5   6   7   8   9</i>
<i>;  Operator 1    00  01  02  08  09  0A  10  11  12</i>
<i>;  Operator 2    03  04  05  0B  0C  0D  13  14  15</i>
<i>; --------------------------------------------------</i>
</pre>

<p>Opět si tedy jednotlivé offsety nadefinujeme:</p>

<pre>
CHANNEL_1_OPERATOR_1 equ 0x00
CHANNEL_1_OPERATOR_2 equ 0x03
CHANNEL_2_OPERATOR_1 equ 0x01
CHANNEL_2_OPERATOR_2 equ 0x04
CHANNEL_3_OPERATOR_1 equ 0x02
CHANNEL_3_OPERATOR_2 equ 0x05
CHANNEL_4_OPERATOR_1 equ 0x08
CHANNEL_4_OPERATOR_2 equ 0x0b
CHANNEL_5_OPERATOR_1 equ 0x09
CHANNEL_5_OPERATOR_2 equ 0x0c
CHANNEL_6_OPERATOR_1 equ 0x0a
CHANNEL_6_OPERATOR_2 equ 0x0d
CHANNEL_7_OPERATOR_1 equ 0x10
CHANNEL_7_OPERATOR_2 equ 0x13
CHANNEL_8_OPERATOR_1 equ 0x11
CHANNEL_8_OPERATOR_2 equ 0x14
CHANNEL_9_OPERATOR_1 equ 0x12
CHANNEL_9_OPERATOR_2 equ 0x15
</pre>

<p>Následuje příklad použití pro registr <strong>OPL_LEVEL</strong>, jenž
existuje celkem osmnáckrát (devět kanálů krát dva operátory):</p>

<pre>
OPL_LEVEL + CHANNEL_1_OPERATOR_1
OPL_LEVEL + CHANNEL_1_OPERATOR_2
...
...
...
OPL_LEVEL + CHANNEL_9_OPERATOR_1
OPL_LEVEL + CHANNEL_9_OPERATOR_2
</pre>

<p><div class="rs-tip-major">Poznámka: &bdquo;díry&ldquo; mezi registry nejsou
vyplněny, takže například použití offsetů 6 a 7 (i dalších) nedává
význam.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Přepis tabulky s&nbsp;obsahy registrů pro přehrání komorního A</h2>

<p>Tabulku s&nbsp;hodnotami registrů, které je nutné naplnit tak, aby čip OPL2
přehrál komorní A (440 Hz), si můžeme přepsat do nepatrně čitelnější podoby,
kdy konkrétní adresy registrů OPL2 nahradíme za jejich jména. Připomeňme si, že
původní podoba této tabulky vypadala následovně:</p>

<pre>
<strong>tone1</strong>:  <i>; tabulka s tonem pro prvni kanal</i>
        db 0x20, 0x01    <i>; nastaveni modulatoru: nasobeni frekvence jednickou</i>
        db 0x40, 0x10    <i>; uroven vystupu 40 dB</i>
        db 0x60, 0xF0    <i>; modulator: rychly nastup zvuku + pomale doznivani</i>
        db 0x80, 0x77    <i>; urovne sustain a release pro modulator</i>
        db 0xA0, 0x41    <i>; frekvence zvuku (komorni A = 440 Hz)</i>
        db 0x23, 0x01    <i>; nastaveni nosne: nasobeni frekvence jednickou</i>
        db 0x43, 0x00    <i>; nastavni urovne vystupu nosne na 47 dB</i>
        db 0x63, 0xF0    <i>; nosna: rychly nastup + pomale doznivani</i>
        db 0x83, 0x77    <i>; urovne sustain a release pro nosnou</i>
        db 0xB0, 0x32    <i>; zapnuti/povoleni zvuku + nastaveni oktavy a vyssich bitu frekvence</i>
        db 0, 0          <i>; zarazka</i>
</pre>

<p>Po přepisu s&nbsp;využitím adres registrů a offsetů kanálů
resp.&nbsp;operátorů dostaneme:</p>

<pre>
tone1:  <i>; tabulka s tonem pro prvni kanal</i>
        db CHANNEL_1_OPERATOR_1 + OPL_AMP_VIBRATO_EG,  0x01  <i>; nastaveni modulatoru: nasobeni frekvence jednickou</i>
        db CHANNEL_1_OPERATOR_1 + OPL_LEVEL,           0x10  <i>; uroven vystupu 40 dB</i>
        db CHANNEL_1_OPERATOR_1 + OPL_ATTACK_DECAY,    0xF0  <i>; modulator: rychly nastup zvuku + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_1 + OPL_SUSTAIN_RELEASE, 0x77  <i>; urovne sustain a release pro modulator</i>
        db CHANNEL_1_OPERATOR_1 + OPL_FREQUENCY_LOW,   0x41  <i>; frekvence zvuku (komorni A = 440 Hz)</i>
        db CHANNEL_1_OPERATOR_2 + OPL_AMP_VIBRATO_EG,  0x01  <i>; nastaveni nosne: nasobeni frekvence jednickou</i>
        db CHANNEL_1_OPERATOR_2 + OPL_LEVEL,           0x00  <i>; nastaveni urovne vystupu nosne na 47 dB</i>
        db CHANNEL_1_OPERATOR_2 + OPL_ATTACK_DECAY,    0xF0  <i>; nosna: rychly nastup + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_2 + OPL_SUSTAIN_RELEASE, 0x77  <i>; urovne sustain a release pro nosnou</i>
        db CHANNEL_1 + OPL_KEY_ON,                     0x32  <i>; zapnuti/povoleni zvuku + nastaveni oktavy a vyssich bitu frekvence</i>
        db 0, 0                                              <i>; zarazka</i>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad: upravené přehrání komorního A</h2>

<p>A takto vypadá dnešní první demonstrační příklad, který obsahuje upravenou
podobu tabulky s&nbsp;hodnotami registrů, které jsou pojmenovány:</p>

<pre>
<i>; Prehrani zakladniho tonu na kartach s cipem OPL2.</i>
<i>; Pojmenovani registru OPL2.</i>
<i>;</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o sound_opl2_table.com sound_opl2_table_2.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o sound_opl2_table.com sound_opl2_table_2.asm</i>
&nbsp;
 &nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karet s cipem OPL2</i>
OPL_ADDRESS equ 0x388
OPL_DATA    equ 0x389
&nbsp;
<i>; ridici registry OPL2</i>
OPL_TEST_LSI          equ 0x01
OPL_TIMER_1           equ 0x02
OPL_TIMER_2           equ 0x03
OPL_TIMER_CTRL        equ 0x04
OPL_KBSPLIT           equ 0x08
OPL_AMP_VIBRATO_EG    equ 0x20
OPL_LEVEL             equ 0x40
OPL_ATTACK_DECAY      equ 0x60
OPL_SUSTAIN_RELEASE   equ 0x80
OPL_FREQUENCY_LOW     equ 0xa0
OPL_KEY_ON            equ 0xb0
OPL_AM_VIBRATO_RHYTHM equ 0xbd
OPL_FEEDBACK          equ 0xc0
OPL_WAVE_SELECT       equ 0xe0
&nbsp;
<i>; indexy kanalu</i>
CHANNEL_1 equ 0
CHANNEL_2 equ 1
CHANNEL_3 equ 2
CHANNEL_4 equ 3
CHANNEL_5 equ 4
CHANNEL_6 equ 5
CHANNEL_7 equ 6
CHANNEL_8 equ 7
CHANNEL_9 equ 8
&nbsp;
<i>; offsety pro jednotlive operatory</i>
<i>; --------------------------------------------------</i>
<i>;  Channel        1   2   3   4   5   6   7   8   9</i>
<i>;  Operator 1    00  01  02  08  09  0A  10  11  12</i>
<i>;  Operator 2    03  04  05  0B  0C  0D  13  14  15</i>
<i>; --------------------------------------------------</i>
<i>;  Channel        1   2   3   4   5   6   7   8   9</i>
CHANNEL_1_OPERATOR_1 equ 0x00
CHANNEL_1_OPERATOR_2 equ 0x03
CHANNEL_2_OPERATOR_1 equ 0x01
CHANNEL_2_OPERATOR_2 equ 0x04
CHANNEL_3_OPERATOR_1 equ 0x02
CHANNEL_3_OPERATOR_2 equ 0x05
CHANNEL_4_OPERATOR_1 equ 0x08
CHANNEL_4_OPERATOR_2 equ 0x0b
CHANNEL_5_OPERATOR_1 equ 0x09
CHANNEL_5_OPERATOR_2 equ 0x0c
CHANNEL_6_OPERATOR_1 equ 0x0a
CHANNEL_6_OPERATOR_2 equ 0x0d
CHANNEL_7_OPERATOR_1 equ 0x10
CHANNEL_7_OPERATOR_2 equ 0x13
CHANNEL_8_OPERATOR_1 equ 0x11
CHANNEL_8_OPERATOR_2 equ 0x14
CHANNEL_9_OPERATOR_1 equ 0x12
CHANNEL_9_OPERATOR_2 equ 0x15
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; makro pro zapis do registru OPL2</i>
%macro <strong>write_opl_register</strong> 2
        mov     al, %1
        mov     ah, %2
        call    perform_write_to_opl_register
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        push cs
        pop  ds                          <i>; DS==CS</i>
&nbsp;
        mov  si, tone1                   <i>; zacatek tabulky</i>
        call write_table_to_opl2         <i>; zapis obsahu tabulky do OPL2</i>
&nbsp;
        wait_key
        exit
&nbsp;
<strong>write_table_to_opl2</strong>:
        lodsb                            <i>; nacist bajt z tabulky (cislo registru)</i>
        or  al, al                       <i>; test na nulu</i>
        jnz .write_register
        ret                              <i>; dosahli jsme konce tabulky</i>
<strong>.write_register</strong>:
        mov ah, al
        lodsb                            <i>; nacist dalsi bajt z tabulky (hodnota registru)</i>
        xchg al, ah                      <i>; podprogram vyzaduje opacne poradi AL, AH</i>
        call perform_write_to_opl_register
        jmp  write_table_to_opl2         <i>; muzeme prejit na dalsi registr</i>
&nbsp;
&nbsp;
<strong>tone1</strong>:  <i>; tabulka s tonem pro prvni kanal</i>
        db CHANNEL_1_OPERATOR_1 + OPL_AMP_VIBRATO_EG,  0x01  <i>; nastaveni modulatoru: nasobeni frekvence jednickou</i>
        db CHANNEL_1_OPERATOR_1 + OPL_LEVEL,           0x10  <i>; uroven vystupu 40 dB</i>
        db CHANNEL_1_OPERATOR_1 + OPL_ATTACK_DECAY,    0xF0  <i>; modulator: rychly nastup zvuku + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_1 + OPL_SUSTAIN_RELEASE, 0x77  <i>; urovne sustain a release pro modulator</i>
        db CHANNEL_1_OPERATOR_1 + OPL_FREQUENCY_LOW,   0x41  <i>; frekvence zvuku (komorni A = 440 Hz)</i>
        db CHANNEL_1_OPERATOR_2 + OPL_AMP_VIBRATO_EG,  0x01  <i>; nastaveni nosne: nasobeni frekvence jednickou</i>
        db CHANNEL_1_OPERATOR_2 + OPL_LEVEL,           0x00  <i>; nastaveni urovne vystupu nosne na 47 dB</i>
        db CHANNEL_1_OPERATOR_2 + OPL_ATTACK_DECAY,    0xF0  <i>; nosna: rychly nastup + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_2 + OPL_SUSTAIN_RELEASE, 0x77  <i>; urovne sustain a release pro nosnou</i>
        db CHANNEL_1 + OPL_KEY_ON,                     0x32  <i>; zapnuti/povoleni zvuku + nastaveni oktavy a vyssich bitu frekvence</i>
        db 0, 0                                              <i>; zarazka</i>
&nbsp;
&nbsp;
<strong>perform_write_to_opl_register</strong>:
        <i>; zapis do vybraneho registru OPL2</i>
        <i>; AL - registr</i>
        <i>; AH - hodnota</i>
        mov dx, OPL_ADDRESS   <i>; vyber registru pro modifikaci</i>
        out dx, al
&nbsp;
        <i>; cekani priblizne 3.3 mikrosekundy</i>
        mov cl, 6
<strong>.delay1</strong>:
        in  al, dx
        loop .delay1
&nbsp;
        mov al, ah            <i>; zapis hodnoty do vybraneho registru</i>
        mov dx, OPL_DATA
        out dx, al
&nbsp;
        <i>; cekani priblizne 23 mikrosekund</i>
        mov cl, 35
<strong>.delay2</strong>:
        in  al, dx
        loop .delay2
&nbsp;
        ret
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Problematika bitů KEY ON</h2>

<p>Zvuky, které jsou přehrávané jednotlivými kanály čipu OPL2, nejsou obecně
tvořeny čistě periodickým signálem. Je tomu tak především z&nbsp;toho důvodu,
že na generovaný primární signál (sinusovka, poloviční sinusovka atd.) je
aplikována obálka ADSR, o níž se ještě zmíníme dále. Ovšem uplatnit se může i
zpětná vazba (<i>feedback</i>), která je taktéž pro každý operátor
konfigurovatelná. Pokud tedy například budeme chtít přehrát zvuk, jehož první
a/nebo druhý operátor bude mít nastavenou netriviální obálku (triviální obálkou
je konstantní hodnota), bude nutné nějakým způsobem specifikovat začátek
přehrávání a po požadované době i ukončení fáze <i>sustain</i>:</p>

*** image ***
<p><i>Obrázek 1: Obálka ovlivňující signál z&nbsp;libovolného operátoru.</i></p>

<p>Jak je z&nbsp;tohoto obrázku patrné, je celé řízení generování signálu
s&nbsp;obálkou řízeno pomocí bitu KEY ON. Tento bit lze nezávisle nastavit pro
každý kanál zvlášť, k&nbsp;tomuto účelu slouží vždy jeden bit registru
<strong>B0</strong> až <strong>B8</strong>. Pojďme si tedy ukázat způsob
nastavení tohoto bitu přímo přes klávesnici IBM PC.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Klávesnice IBM PC, čtení scan kódů kláves</h2>

<p>Bit KEY ON budeme nastavovat ve čase, kdy je <i>stisknut</i> mezerník. IBM
PC neumožňuje provádět přímý test, zda je nějaká klávesa stisknuta, ale musíme
korektně zareagovat na její stisk (změnu stavu) a poté uvolnění (opět změna
stavu). Jak to provést? Využijeme faktu, že takzvané scan kódy kláves je možné
přečíst z&nbsp;portu 60H, ovšem za předpokladu, že sedmý bit portu 61H je
nastavený na jedničku. Již v&nbsp;článku o PC Speakeru jsme se dozvěděli, že
tyto porty ovládají čip 8255 (PPI); konkrétně 60H odpovídá PORTU A tohoto čipu
a 61H portu B čipu 8255 (jedná se o HW porty, zatímco 60H/61H je pouze koncept
generování adres pro I/O obvody). Po stisku klávesy lze přečíst její přímý scan
kód, po uvolnění klávesy naopak kód zvýšený o 80H (tedy s&nbsp;nastaveným
sedmým bitem).</p>

*** image ***
<p><i>Obrázek 2: Scan kódy kláves IBM PC. Povšimněte si kódu klávesy ESC a
SPACE, které později využijeme.</i></p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti je situace mnohem
složitější, protože existují celkem tři sady scan kódů (platforma PC není tak
vzájemně kompatibilní, jak bývalo prezentováno). Ovšem prozatím si vystačíme
s&nbsp;výše uvedenými informacemi.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Realizace aktivního čekání na stisk klávesy</h2>

<p>Podívejme se nyní na přímé čtení scan kódů stisknutých kláves. Nejprve si
nadefinujeme adresy portů 60h a 61h, což je v&nbsp;assembleru velmi snadné:</p>

<pre>
<i>; registry PPI</i>
PPI_PORT_A equ 0x60
PPI_PORT_B equ 0x61
</pre>

<p>Následně si nadefinujeme kódy kláves, jejichž stisk budeme testovat.
K&nbsp;tomu je přidána definice konstanty, která je ke kódu klávesy přičtena ve
chvíli, kdy je klávesa puštěna (<strong>KEY_RELEASE</strong>):</p>

<pre>
<i>; kody klaves</i>
KEY_ESC     equ 0x01
KEY_SPACE   equ 0x39
KEY_RELEASE equ 0x80
</pre>

<p>Před vlastním čtením scan kódů kláves přenastavíme režim portu A obvodu
8255. Budeme totiž chtít, aby se na tomto portu objevovaly právě scan kódy a
nikoli jiné informace:</p>

<pre>
        in  al, PPI_PORT_B   <i>; port B s rizenim zarizeni</i>
        or  al, 0b1000000    <i>; nastaveni bitu cislo 7 na jednicku</i>
        out PPI_PORT_B, al   <i>; zapis zpet na port B</i>
</pre>

<p>Nyní se již konečně můžeme pokusit o přečtení scan kódu stisknuté/puštěné
klávesy s&nbsp;testem, zda se jedná o klávesu, jejíž stav nás zajímá:</p>

<pre>
        in  al, PPI_PORT_A   <i>; cteni stisknute klavesy</i>
        cmp al, KEY_ESC      <i>; test stisknute klavesy</i>
        jeq esc_stisknuta    <i>; pokud je naše klávesa stisknuta, skok</i>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Poznámka na okraj: rozeskok podle kódu stisknuté klávesy</h2>

<p>V&nbsp;assembleru lze snadno reprezentovat tabulku rozeskoků, přesněji
řečeno tabulku s&nbsp;adresami podprogramů, které se mají zavolat na základě
stisknuté klávesy. Pokusím se uvést praktický příklad získaný z&nbsp;textového
editoru <strong>e.com</strong>, což je plnohodnotný DOSový editor, jehož
celková velikost je jen 6kB a využívá různé assemblerovské triky.</p>

<p>V&nbsp;tomto editoru jsou definovány podprogramy pro přesun kurzoru doleva,
pro skok na další stranu atd. atd. Aktuální funkce těchto podprogramů nás
nezajímá; důležitá je pouze instrukce <strong>RET</strong> na jejich konci:</p>

<pre>
<strong>Left</strong>:
    ...
    ...
    ...
    ret
&nbsp;
<strong>PageDown</strong>:
    ...
    ...
    ...
    ret
</pre>

<p>Srdcem tohoto textového editoru je tabulka se šestnáctibitovými adresami
těchto podprogramů, která je vhodně uspořádána podle kódů kláves (CTRL+A má
vyvolat subrutinu <strong>WordLeft</strong> atd.):</p>

<pre>
<i>;Jump tables:   ^ = Ctrl</i>
<strong>ctrlTable</strong>       dw na           <i>;Undefined</i>
                dw WordLeft     <i>;^A</i>
                dw na           <i>;^B</i>
                dw PageDown     <i>;^C</i>
                dw Right        <i>;^D</i>
                dw Up           <i>;^E</i>
                dw WordRight    <i>;^F</i>
                dw na           <i>;^G or BEL</i>
                dw BackSpace    <i>;^H or BS</i>
                dw Tab          <i>;^I or HT</i>
                dw na           <i>;^J or LF</i>
                dw na           <i>;^K or VT</i>
                dw na           <i>;^L or FF</i>
                dw CRet         <i>;^M or CR</i>
                dw na           <i>;^N or SO</i>
                dw na           <i>;^O or SI</i>
                dw na           <i>;^P</i>
                dw na           <i>;^Q or DC1</i>
                dw PageUp       <i>;^R or DC2</i>
                dw Left         <i>;^S or DC3</i>
                dw DeleteWordR  <i>;^T or DC4</i>
                dw na           <i>;^U</i>
                dw na           <i>;^V</i>
                dw na           <i>;^W</i>
                dw Down         <i>;^X or CAN</i>
                dw DeleteLine   <i>;^Y</i>
                dw na           <i>;^Z</i>
                dw DeleteWordL  <i>;^[</i>
                dw DeleteToEOL  <i>;^\</i>
                dw DeleteWordR  <i>;^]</i>
                dw UndeleteLine <i>;^^</i>
                dw DeleteLine   <i>;^-</i>
</pre>

<p>Nyní přečteme kód klávesy a zjistíme, jestli byla stlačena CTRL (kód již
bude upravený tak, že Ctrl+A vrátí nulu atd.):</p>

<pre>
<strong>IsCtrl</strong>:
  mov si, OFFSET ctrlTable      <i>;Jump to routine through table</i>
  sub ah, ah
  jmp DoTableJump
</pre>

<p>Posledním krokem je vlastní zavolání subrutiny. Hodnotu v&nbsp;AX vynásobíme
dvěma (jedná se o offset adresy), přičteme offset k&nbsp;počáteční adrese
tabulky a nakonec provedeme nepřímý skok (který je vlastně základem celého
triku):</p>

<pre>
<strong>DoTableJump</strong>:
  shl ax, 1
  add si, ax
  call [WORD si]
  jmp NextKey
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Druhý demonstrační příklad &ndash; aktivní čekání na stisk klávesy ESC</h2>

<p>V&nbsp;dnešním druhém demonstračním příkladu je ukázáno, jakým způsobem je
možné realizovat čekání na stisk vybrané klávesy, v&nbsp;tomto případě
konkrétně klávesy <strong>ESC</strong>. Po stisku klávesy je program bez
dalších operací ihned ukončen (ale sami si můžete doplnit zobrazení zprávy na
začátku i na konci &ndash; příslušné makro je k&nbsp;dispozici):</p>

<pre>
<i>; Zaklad prace s klavesnici</i>
<i>;</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o keyboard_basic.com keyboard_basic.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o keyboard_basic.com keyboard_basic.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry PPI</i>
PPI_PORT_A equ 0x60
PPI_PORT_B equ 0x61
&nbsp;
<i>; kody klaves</i>
KEY_ESC     equ 0x01
KEY_SPACE   equ 0x39
KEY_RELEASE equ 0x80
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        in  al, PPI_PORT_B   <i>; port B s rizenim zarizeni</i>
        or  al, 0b1000000    <i>; nastaveni bitu cislo 7 na jednicku</i>
        out PPI_PORT_B, al   <i>; zapis zpet na port B</i>
&nbsp;
<strong>.opak</strong>:
        in  al, PPI_PORT_A   <i>; cteni stisknute klavesy</i>
        cmp al, KEY_ESC      <i>; test stisknute klavesy</i>
        jne .opak            <i>; neni stisknuta? -> zkusme znovu</i>
&nbsp;
        exit
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Ovládání bitu KEY ON z&nbsp;klávesnice</h2>

<p>Nyní již máme k&nbsp;dispozici všechny informace nutné k&nbsp;tomu, abychom
mohli bit KEY ON (pro první kanál) ovládat přímo z&nbsp;klávesnice, například
mezerníkem. Pokud bude klávesa stisknuta, bit KEY ON nastavíme, v&nbsp;případě,
že bude puštěna, naopak tento bit vynulujeme. Do registrů OPL2 je možný jen
zápis, takže budeme muset přímo zapisovat nových osm bitů příslušného registru
OPL2, což je konkrétně registr, který jsme pojmenovali
<strong>OPL_KEY_ON</strong>:</p>

<pre>
<strong>.opak</strong>:
        in  al, PPI_PORT_A               <i>; cteni stisknute klavesy</i>
        cmp al, KEY_SPACE                <i>; test na stisk mezerniku</i>
        jne .next_test_1                 <i>; neni stisknut -> preskok</i>
        write_opl_register CHANNEL_1 + OPL_KEY_ON, 0x32    <i>; povoleni KEY ON bitu</i>
        jmp .opak
<strong>.next_test_1</strong>:
        cmp al, KEY_SPACE + KEY_RELEASE  <i>; test na pusteni mezerniku</i>
        jne .next_test_2                 <i>; neni pusten -> dalsi test</i>
        write_opl_register CHANNEL_1 + OPL_KEY_ON, 0x12    <i>; zakaz KEY ON bitu</i>
        jmp .opak
</pre>

<p>Nakonec ještě přidáme test na stisk klávesy ESC, která program ukončí:</p>

<pre>
<strong>.next_test_2</strong>:
        cmp al, KEY_ESC                  <i>; test stisknute klavesy ESC</i>
        jne .opak                        <i>; neni stisknuta? -> zkusme znovu</i>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Třetí demonstrační příklad: přímé ovládání bitu KEY ON mezerníkem</h2>

<p>V&nbsp;dnešním třetím demonstračním příkladu je ukázán způsob ovládání
přehrávání zvuku z&nbsp;prvního kanálu přes mezerník. Po stisku mezerníku se
nastaví bit KEY ON pro první kanál, po puštění klávesy se naopak tento bit
vynuluje:</p>

<pre>
<i>; Prehrani zakladniho tonu na kartach s cipem OPL2.</i>
<i>; Pojmenovani registru OPL2.</i>
<i>; Ovladani KEY ON mezernikem</i>
<i>; Ukonceni aplikace stiskem ESC</i>
<i>;</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o sound_key_on.com sound_key_on.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o sound_key_on.com sound_key_on.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karet s cipem OPL2</i>
OPL_ADDRESS equ 0x388
OPL_DATA    equ 0x389
&nbsp;
<i>; ridici registry OPL2</i>
OPL_TEST_LSI          equ 0x01
OPL_TIMER_1           equ 0x02
OPL_TIMER_2           equ 0x03
OPL_TIMER_CTRL        equ 0x04
OPL_KBSPLIT           equ 0x08
OPL_AMP_VIBRATO_EG    equ 0x20
OPL_LEVEL             equ 0x40
OPL_ATTACK_DECAY      equ 0x60
OPL_SUSTAIN_RELEASE   equ 0x80
OPL_FREQUENCY_LOW     equ 0xa0
OPL_KEY_ON            equ 0xb0
OPL_AM_VIBRATO_RHYTHM equ 0xbd
OPL_FEEDBACK          equ 0xc0
OPL_WAVE_SELECT       equ 0xe0
&nbsp;
<i>; indexy kanalu</i>
CHANNEL_1 equ 0
CHANNEL_2 equ 1
CHANNEL_3 equ 2
CHANNEL_4 equ 3
CHANNEL_5 equ 4
CHANNEL_6 equ 5
CHANNEL_7 equ 6
CHANNEL_8 equ 7
CHANNEL_9 equ 8
&nbsp;
<i>; offsety pro jednotlive operatory</i>
<i>; --------------------------------------------------</i>
<i>;  Channel        1   2   3   4   5   6   7   8   9</i>
<i>;  Operator 1    00  01  02  08  09  0A  10  11  12</i>
<i>;  Operator 2    03  04  05  0B  0C  0D  13  14  15</i>
<i>; --------------------------------------------------</i>
<i>;  Channel        1   2   3   4   5   6   7   8   9</i>
CHANNEL_1_OPERATOR_1 equ 0x00
CHANNEL_1_OPERATOR_2 equ 0x03
CHANNEL_2_OPERATOR_1 equ 0x01
CHANNEL_2_OPERATOR_2 equ 0x04
CHANNEL_3_OPERATOR_1 equ 0x02
CHANNEL_3_OPERATOR_2 equ 0x05
CHANNEL_4_OPERATOR_1 equ 0x08
CHANNEL_4_OPERATOR_2 equ 0x0b
CHANNEL_5_OPERATOR_1 equ 0x09
CHANNEL_5_OPERATOR_2 equ 0x0c
CHANNEL_6_OPERATOR_1 equ 0x0a
CHANNEL_6_OPERATOR_2 equ 0x0d
CHANNEL_7_OPERATOR_1 equ 0x10
CHANNEL_7_OPERATOR_2 equ 0x13
CHANNEL_8_OPERATOR_1 equ 0x11
CHANNEL_8_OPERATOR_2 equ 0x14
CHANNEL_9_OPERATOR_1 equ 0x12
CHANNEL_9_OPERATOR_2 equ 0x15
&nbsp;
<i>; registry PPI</i>
PPI_PORT_A equ 0x60
PPI_PORT_B equ 0x61
&nbsp;
<i>; kody klaves</i>
KEY_ESC     equ 0x01
KEY_SPACE   equ 0x39
KEY_RELEASE equ 0x80
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; makro pro zapis do registru OPL2</i>
%macro <strong>write_opl_register</strong> 2
        mov     al, %1
        mov     ah, %2
        call    perform_write_to_opl_register
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        push cs
        pop  ds                          <i>; DS==CS</i>
&nbsp;
        mov  si, tone1                   <i>; zacatek tabulky</i>
        call write_table_to_opl2         <i>; zapis obsahu tabulky do OPL2</i>
&nbsp;
        in  al, PPI_PORT_B               <i>; port B s rizenim zarizeni</i>
        or  al, 0b1000000                <i>; nastaveni bitu cislo 7 na jednicku</i>
        out PPI_PORT_B, al               <i>; zapis zpet na port B</i>
&nbsp;
<strong>.opak</strong>:
        in  al, PPI_PORT_A               <i>; cteni stisknute klavesy</i>
        cmp al, KEY_SPACE                <i>; test na stisk mezerniku</i>
        jne .next_test_1                 <i>; neni stisknut -> preskok</i>
        write_opl_register CHANNEL_1 + OPL_KEY_ON, 0x32    <i>; povoleni KEY ON bitu</i>
        jmp .opak
<strong>.next_test_1</strong>:
        cmp al, KEY_SPACE + KEY_RELEASE  <i>; test na pusteni mezerniku</i>
        jne .next_test_2                 <i>; neni pusten -> dalsi test</i>
        write_opl_register CHANNEL_1 + OPL_KEY_ON, 0x12    <i>; zakaz KEY ON bitu</i>
        jmp .opak
<strong>.next_test_2</strong>:
        cmp al, KEY_ESC                  <i>; test stisknute klavesy ESC</i>
        jne .opak                        <i>; neni stisknuta? -> zkusme znovu</i>
&nbsp;
        exit
&nbsp;
<strong>write_table_to_opl2</strong>:
        lodsb                            <i>; nacist bajt z tabulky (cislo registru)</i>
        or  al, al                       <i>; test na nulu</i>
        jnz .write_register
        ret                              <i>; dosahli jsme konce tabulky</i>
<strong>.write_register</strong>:
        mov ah, al
        lodsb                            <i>; nacist dalsi bajt z tabulky (hodnota registru)</i>
        xchg al, ah                      <i>; podprogram vyzaduje opacne poradi AL, AH</i>
        call perform_write_to_opl_register
        jmp  write_table_to_opl2         <i>; muzeme prejit na dalsi registr</i>
&nbsp;
&nbsp;
<strong>tone1</strong>:  <i>; tabulka s tonem pro prvni kanal</i>
        db CHANNEL_1_OPERATOR_1 + OPL_AMP_VIBRATO_EG,  0x01  <i>; nastaveni modulatoru: nasobeni frekvence jednickou</i>
        db CHANNEL_1_OPERATOR_1 + OPL_LEVEL,           0x10  <i>; uroven vystupu 40 dB</i>
        db CHANNEL_1_OPERATOR_1 + OPL_ATTACK_DECAY,    0xF0  <i>; modulator: rychly nastup zvuku + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_1 + OPL_SUSTAIN_RELEASE, 0x77  <i>; urovne sustain a release pro modulator</i>
        db CHANNEL_1_OPERATOR_1 + OPL_FREQUENCY_LOW,   0x41  <i>; frekvence zvuku (komorni A = 440 Hz)</i>
        db CHANNEL_1_OPERATOR_2 + OPL_AMP_VIBRATO_EG,  0x01  <i>; nastaveni nosne: nasobeni frekvence jednickou</i>
        db CHANNEL_1_OPERATOR_2 + OPL_LEVEL,           0x00  <i>; nastaveni urovne vystupu nosne na 47 dB</i>
        db CHANNEL_1_OPERATOR_2 + OPL_ATTACK_DECAY,    0xF0  <i>; nosna: rychly nastup + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_2 + OPL_SUSTAIN_RELEASE, 0x77  <i>; urovne sustain a release pro nosnou</i>
        db CHANNEL_1 + OPL_KEY_ON,                     0x12  <i>; zapnuti/povoleni zvuku + nastaveni oktavy a vyssich bitu frekvence</i>
        db 0, 0                                              <i>; zarazka</i>
&nbsp;
&nbsp;
<strong>perform_write_to_opl_register</strong>:
        <i>; zapis do vybraneho registru OPL2</i>
        <i>; AL - registr</i>
        <i>; AH - hodnota</i>
        mov dx, OPL_ADDRESS   <i>; vyber registru pro modifikaci</i>
        out dx, al
&nbsp;
        <i>; cekani priblizne 3.3 mikrosekundy</i>
        mov cl, 6
<strong>.delay1</strong>:
        in  al, dx
        loop .delay1
&nbsp;
        mov al, ah            <i>; zapis hodnoty do vybraneho registru</i>
        mov dx, OPL_DATA
        out dx, al
&nbsp;
        <i>; cekani priblizne 23 mikrosekund</i>
        mov cl, 35
<strong>.delay2</strong>:
        in  al, dx
        loop .delay2
&nbsp;
        ret
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Nastavení obálky pro tón přehrávaný prvním kanálem</h2>

<p></p>

<pre>
        db CHANNEL_1_OPERATOR_1 + OPL_ATTACK_DECAY,    0x44  <i>; modulator: pomaly nastup zvuku + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_1 + OPL_SUSTAIN_RELEASE, 0x7f  <i>; urovne sustain a release pro modulator</i>
</pre>

<p></p>

<pre>
        db CHANNEL_1_OPERATOR_2 + OPL_ATTACK_DECAY,    0xa2  <i>; nosna: rychly nastup + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_2 + OPL_SUSTAIN_RELEASE, 0x77  <i>; urovne sustain a release pro nosnou</i>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
<i>; Prehrani zakladniho tonu na kartach s cipem OPL2.</i>
<i>; Pojmenovani registru OPL2.</i>
<i>; Ovladani KEY ON mezernikem</i>
<i>; Ukonceni aplikace stiskem ESC</i>
<i>;</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o sound_adsr.com sound_adsr.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o sound_adsr.com sound_adsr.asm</i>

 
<i>;-----------------------------------------------------------------------------</i>

<i>; registry karet s cipem OPL2</i>
OPL_ADDRESS equ 0x388
OPL_DATA    equ 0x389

<i>; ridici registry OPL2</i>
OPL_TEST_LSI          equ 0x01
OPL_TIMER_1           equ 0x02
OPL_TIMER_2           equ 0x03
OPL_TIMER_CTRL        equ 0x04
OPL_KBSPLIT           equ 0x08
OPL_AMP_VIBRATO_EG    equ 0x20
OPL_LEVEL             equ 0x40
OPL_ATTACK_DECAY      equ 0x60
OPL_SUSTAIN_RELEASE   equ 0x80
OPL_FREQUENCY_LOW     equ 0xa0
OPL_KEY_ON            equ 0xb0
OPL_AM_VIBRATO_RHYTHM equ 0xbd
OPL_FEEDBACK          equ 0xc0
OPL_WAVE_SELECT       equ 0xe0

<i>; indexy kanalu</i>
CHANNEL_1 equ 0
CHANNEL_2 equ 1
CHANNEL_3 equ 2
CHANNEL_4 equ 3
CHANNEL_5 equ 4
CHANNEL_6 equ 5
CHANNEL_7 equ 6
CHANNEL_8 equ 7
CHANNEL_9 equ 8

<i>; offsety pro jednotlive operatory</i>
<i>; --------------------------------------------------</i>
<i>;  Channel        1   2   3   4   5   6   7   8   9</i>
<i>;  Operator 1    00  01  02  08  09  0A  10  11  12</i>
<i>;  Operator 2    03  04  05  0B  0C  0D  13  14  15</i>
<i>; --------------------------------------------------</i>
<i>;  Channel        1   2   3   4   5   6   7   8   9</i>
CHANNEL_1_OPERATOR_1 equ 0x00
CHANNEL_1_OPERATOR_2 equ 0x03
CHANNEL_2_OPERATOR_1 equ 0x01
CHANNEL_2_OPERATOR_2 equ 0x04
CHANNEL_3_OPERATOR_1 equ 0x02
CHANNEL_3_OPERATOR_2 equ 0x05
CHANNEL_4_OPERATOR_1 equ 0x08
CHANNEL_4_OPERATOR_2 equ 0x0b
CHANNEL_5_OPERATOR_1 equ 0x09
CHANNEL_5_OPERATOR_2 equ 0x0c
CHANNEL_6_OPERATOR_1 equ 0x0a
CHANNEL_6_OPERATOR_2 equ 0x0d
CHANNEL_7_OPERATOR_1 equ 0x10
CHANNEL_7_OPERATOR_2 equ 0x13
CHANNEL_8_OPERATOR_1 equ 0x11
CHANNEL_8_OPERATOR_2 equ 0x14
CHANNEL_9_OPERATOR_1 equ 0x12
CHANNEL_9_OPERATOR_2 equ 0x15

<i>; registry PPI</i>
PPI_PORT_A equ 0x60
PPI_PORT_B equ 0x61

<i>; kody klaves</i>
KEY_ESC     equ 0x01
KEY_SPACE   equ 0x39
KEY_RELEASE equ 0x80


<i>;-----------------------------------------------------------------------------</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        ret
%endmacro

<i>; makro pro zapis do registru OPL2</i>
%macro write_opl_register 2
        mov     al, %1
        mov     ah, %2
        call    perform_write_to_opl_register
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        push cs
        pop  ds                          <i>; DS==CS</i>

        mov  si, tone1                   <i>; zacatek tabulky</i>
        call write_table_to_opl2         <i>; zapis obsahu tabulky do OPL2</i>

        in  al, PPI_PORT_B               <i>; port B s rizenim zarizeni</i>
        or  al, 0b1000000                <i>; nastaveni bitu cislo 7 na jednicku</i>
        out PPI_PORT_B, al               <i>; zapis zpet na port B</i>

.opak:
        in  al, PPI_PORT_A               <i>; cteni stisknute klavesy</i>
        cmp al, KEY_SPACE                <i>; test na stisk mezerniku</i>
        jne .next_test_1                 <i>; neni stisknut -> preskok</i>
        write_opl_register CHANNEL_1 + OPL_KEY_ON, 0x32    <i>; povoleni KEY ON bitu</i>
        jmp .opak
.next_test_1:
        cmp al, KEY_SPACE + KEY_RELEASE  <i>; test na pusteni mezerniku</i>
        jne .next_test_2                 <i>; neni pusten -> dalsi test</i>
        write_opl_register CHANNEL_1 + OPL_KEY_ON, 0x12    <i>; zakaz KEY ON bitu</i>
        jmp .opak
.next_test_2:
        cmp al, KEY_ESC                  <i>; test stisknute klavesy ESC</i>
        jne .opak                        <i>; neni stisknuta? -> zkusme znovu</i>

        exit

write_table_to_opl2:
        lodsb                            <i>; nacist bajt z tabulky (cislo registru)</i>
        or  al, al                       <i>; test na nulu</i>
        jnz .write_register
        ret                              <i>; dosahli jsme konce tabulky</i>
.write_register:
        mov ah, al
        lodsb                            <i>; nacist dalsi bajt z tabulky (hodnota registru)</i>
        xchg al, ah                      <i>; podprogram vyzaduje opacne poradi AL, AH</i>
        call perform_write_to_opl_register
        jmp  write_table_to_opl2         <i>; muzeme prejit na dalsi registr</i>


tone1:  <i>; tabulka s tonem pro prvni kanal</i>
        db CHANNEL_1_OPERATOR_1 + OPL_AMP_VIBRATO_EG,  0x01  <i>; nastaveni modulatoru: nasobeni frekvence jednickou</i>
        db CHANNEL_1_OPERATOR_1 + OPL_LEVEL,           0x10  <i>; uroven vystupu 40 dB</i>
        db CHANNEL_1_OPERATOR_1 + OPL_ATTACK_DECAY,    0x44  <i>; modulator: pomaly nastup zvuku + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_1 + OPL_SUSTAIN_RELEASE, 0x7f  <i>; urovne sustain a release pro modulator</i>
        db CHANNEL_1_OPERATOR_1 + OPL_FREQUENCY_LOW,   0x41  <i>; frekvence zvuku (komorni A = 440 Hz)</i>
        db CHANNEL_1_OPERATOR_2 + OPL_AMP_VIBRATO_EG,  0x01  <i>; nastaveni nosne: nasobeni frekvence jednickou</i>
        db CHANNEL_1_OPERATOR_2 + OPL_LEVEL,           0x00  <i>; nastaveni urovne vystupu nosne na 47 dB</i>
        db CHANNEL_1_OPERATOR_2 + OPL_ATTACK_DECAY,    0xa2  <i>; nosna: rychly nastup + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_2 + OPL_SUSTAIN_RELEASE, 0x77  <i>; urovne sustain a release pro nosnou</i>
        db CHANNEL_1 + OPL_KEY_ON,                     0x12  <i>; zapnuti/povoleni zvuku + nastaveni oktavy a vyssich bitu frekvence</i>
        db 0, 0                                              <i>; zarazka</i>


perform_write_to_opl_register:
        <i>; zapis do vybraneho registru OPL2</i>
        <i>; AL - registr</i>
        <i>; AH - hodnota</i>
        mov dx, OPL_ADDRESS   <i>; vyber registru pro modifikaci</i>
        out dx, al

        <i>; cekani priblizne 3.3 mikrosekundy</i>
        mov cl, 6
.delay1:
        in  al, dx
        loop .delay1

        mov al, ah            <i>; zapis hodnoty do vybraneho registru</i>
        mov dx, OPL_DATA
        out dx, al

        <i>; cekani priblizne 23 mikrosekund</i>
        mov cl, 35
.delay2:
        in  al, dx
        loop .delay2

        ret
</pre>









<pre>
<i>; Prehrani zakladniho tonu na kartach s cipem OPL2.</i>
<i>; Pojmenovani registru OPL2.</i>
<i>; Ovladani KEY ON mezernikem</i>
<i>; Frekvence modulatoru rizena klavesami 1 az 0</i>
<i>; Ukonceni aplikace stiskem ESC</i>
<i>;</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o sound_modulation.com sound_modulation.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o sound_modulation.com sound_modulation.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karet s cipem OPL2</i>
OPL_ADDRESS equ 0x388
OPL_DATA    equ 0x389
&nbsp;
<i>; ridici registry OPL2</i>
OPL_TEST_LSI          equ 0x01
OPL_TIMER_1           equ 0x02
OPL_TIMER_2           equ 0x03
OPL_TIMER_CTRL        equ 0x04
OPL_KBSPLIT           equ 0x08
OPL_AMP_VIBRATO_EG    equ 0x20
OPL_LEVEL             equ 0x40
OPL_ATTACK_DECAY      equ 0x60
OPL_SUSTAIN_RELEASE   equ 0x80
OPL_FREQUENCY_LOW     equ 0xa0
OPL_KEY_ON            equ 0xb0
OPL_AM_VIBRATO_RHYTHM equ 0xbd
OPL_FEEDBACK          equ 0xc0
OPL_WAVE_SELECT       equ 0xe0
&nbsp;
<i>; indexy kanalu</i>
CHANNEL_1 equ 0
CHANNEL_2 equ 1
CHANNEL_3 equ 2
CHANNEL_4 equ 3
CHANNEL_5 equ 4
CHANNEL_6 equ 5
CHANNEL_7 equ 6
CHANNEL_8 equ 7
CHANNEL_9 equ 8
&nbsp;
<i>; offsety pro jednotlive operatory</i>
<i>; --------------------------------------------------</i>
<i>;  Channel        1   2   3   4   5   6   7   8   9</i>
<i>;  Operator 1    00  01  02  08  09  0A  10  11  12</i>
<i>;  Operator 2    03  04  05  0B  0C  0D  13  14  15</i>
<i>; --------------------------------------------------</i>
<i>;  Channel        1   2   3   4   5   6   7   8   9</i>
CHANNEL_1_OPERATOR_1 equ 0x00
CHANNEL_1_OPERATOR_2 equ 0x03
CHANNEL_2_OPERATOR_1 equ 0x01
CHANNEL_2_OPERATOR_2 equ 0x04
CHANNEL_3_OPERATOR_1 equ 0x02
CHANNEL_3_OPERATOR_2 equ 0x05
CHANNEL_4_OPERATOR_1 equ 0x08
CHANNEL_4_OPERATOR_2 equ 0x0b
CHANNEL_5_OPERATOR_1 equ 0x09
CHANNEL_5_OPERATOR_2 equ 0x0c
CHANNEL_6_OPERATOR_1 equ 0x0a
CHANNEL_6_OPERATOR_2 equ 0x0d
CHANNEL_7_OPERATOR_1 equ 0x10
CHANNEL_7_OPERATOR_2 equ 0x13
CHANNEL_8_OPERATOR_1 equ 0x11
CHANNEL_8_OPERATOR_2 equ 0x14
CHANNEL_9_OPERATOR_1 equ 0x12
CHANNEL_9_OPERATOR_2 equ 0x15
&nbsp;
<i>; registry PPI</i>
PPI_PORT_A equ 0x60
PPI_PORT_B equ 0x61
&nbsp;
<i>; kody klaves</i>
KEY_ESC     equ 0x01
KEY_SPACE   equ 0x39
KEY_RELEASE equ 0x80
KEY_1       equ 0x02
KEY_0       equ KEY_1 + 9
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; makro pro zapis do registru OPL2</i>
%macro <strong>write_opl_register</strong> 2
        mov     al, %1
        mov     ah, %2
        call    perform_write_to_opl_register
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        push cs
        pop  ds                          <i>; DS==CS</i>
&nbsp;
        mov  si, tone1                   <i>; zacatek tabulky</i>
        call write_table_to_opl2         <i>; zapis obsahu tabulky do OPL2</i>
&nbsp;
        in  al, PPI_PORT_B               <i>; port B s rizenim zarizeni</i>
        or  al, 0b1000000                <i>; nastaveni bitu cislo 7 na jednicku</i>
        out PPI_PORT_B, al               <i>; zapis zpet na port B</i>
&nbsp;
<strong>.opak</strong>:
        in  al, PPI_PORT_A               <i>; cteni stisknute klavesy</i>
        cmp al, KEY_SPACE                <i>; test na stisk mezerniku</i>
        jne .next_test_1                 <i>; neni stisknut -&gt; preskok</i>
        write_opl_register CHANNEL_1 + OPL_KEY_ON, 0x32    <i>; povoleni KEY ON bitu</i>
        jmp .opak
<strong>.next_test_1</strong>:
        cmp al, KEY_SPACE + KEY_RELEASE  <i>; test na pusteni mezerniku</i>
        jne .next_test_2                 <i>; neni pusten -&gt; dalsi test</i>
        write_opl_register CHANNEL_1 + OPL_KEY_ON, 0x12    <i>; zakaz KEY ON bitu</i>
        jmp .opak
<strong>.next_test_2</strong>:
        cmp al, KEY_1                    <i>; test na numericke klavesy</i>
        jb  .next_test_3                 <i>; hodnota "pod" kodem klavesy 1</i>
        cmp al, KEY_0
        ja  .next_test_3                 <i>; hodnota "nad" kodem klavesy 0</i>
        mov bl, al                       <i>; makro prepisue AL -> nemuzeme ho primo pouzit</i>
        write_opl_register CHANNEL_1_OPERATOR_1 + OPL_LEVEL, bl
.next_test_3:
        cmp al, KEY_ESC                  <i>; test stisknute klavesy ESC</i>
        jne .opak                        <i>; neni stisknuta? -> zkusme znovu</i>

        exit

write_table_to_opl2:
        lodsb                            <i>; nacist bajt z tabulky (cislo registru)</i>
        or  al, al                       <i>; test na nulu</i>
        jnz .write_register
        ret                              <i>; dosahli jsme konce tabulky</i>
.write_register:
        mov ah, al
        lodsb                            <i>; nacist dalsi bajt z tabulky (hodnota registru)</i>
        xchg al, ah                      <i>; podprogram vyzaduje opacne poradi AL, AH</i>
        call perform_write_to_opl_register
        jmp  write_table_to_opl2         <i>; muzeme prejit na dalsi registr</i>


tone1:  <i>; tabulka s tonem pro prvni kanal</i>
        db CHANNEL_1_OPERATOR_1 + OPL_AMP_VIBRATO_EG,  0x01  <i>; nastaveni modulatoru: nasobeni frekvence jednickou</i>
        db CHANNEL_1_OPERATOR_1 + OPL_LEVEL,           0x00  <i>; uroven vystupu 40 dB</i>
        db CHANNEL_1_OPERATOR_1 + OPL_ATTACK_DECAY,    0x41  <i>; modulator: pomaly nastup zvuku + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_1 + OPL_SUSTAIN_RELEASE, 0x7f  <i>; urovne sustain a release pro modulator</i>
        db CHANNEL_1_OPERATOR_1 + OPL_FREQUENCY_LOW,   0x41  <i>; frekvence zvuku (komorni A = 440 Hz)</i>
        db CHANNEL_1_OPERATOR_2 + OPL_AMP_VIBRATO_EG,  0x01  <i>; nastaveni nosne: nasobeni frekvence jednickou</i>
        db CHANNEL_1_OPERATOR_2 + OPL_LEVEL,           0x00  <i>; nastaveni urovne vystupu nosne na 47 dB</i>
        db CHANNEL_1_OPERATOR_2 + OPL_ATTACK_DECAY,    0xa2  <i>; nosna: rychly nastup + pomale doznivani</i>
        db CHANNEL_1_OPERATOR_2 + OPL_SUSTAIN_RELEASE, 0x77  <i>; urovne sustain a release pro nosnou</i>
        db CHANNEL_1 + OPL_KEY_ON,                     0x12  <i>; zapnuti/povoleni zvuku + nastaveni oktavy a vyssich bitu frekvence</i>
        db 0, 0                                              <i>; zarazka</i>



perform_write_to_opl_register:
        <i>; zapis do vybraneho registru OPL2</i>
        <i>; AL - registr</i>
        <i>; AH - hodnota</i>
        mov dx, OPL_ADDRESS   <i>; vyber registru pro modifikaci</i>
        out dx, al

        <i>; cekani priblizne 3.3 mikrosekundy</i>
        mov cl, 6
.delay1:
        in  al, dx
        loop .delay1

        mov al, ah            <i>; zapis hodnoty do vybraneho registru</i>
        mov dx, OPL_DATA
        out dx, al

        <i>; cekani priblizne 23 mikrosekund</i>
        mov cl, 35
.delay2:
        in  al, dx
        loop .delay2

        ret
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad s&nbsp;využitím assembleru <strong>NASM</strong>, byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>hello.asm</td><td>program typu &bdquo;Hello world&ldquo; naprogramovaný v&nbsp;assembleru pro systém DOS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm</a></td></tr>
<tr><td> 2</td><td>hello_shorter.asm</td><td>kratší varianta výskoku z&nbsp;procesu zpět do DOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm</a></td></tr>
<tr><td> 3</td><td>hello_wait.asm</td><td>čekání na stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm</a></td></tr>
<tr><td> 4</td><td>hello_macros.asm</td><td>realizace jednotlivých částí programu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>gfx_4_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm</a></td></tr>
<tr><td> 6</td><td>gfx_6_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm</a></td></tr>
<tr><td> 7</td><td>gfx_4_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm</a></td></tr>
<tr><td> 8</td><td>gfx_6_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>gfx_6_fill_1.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm</a></td></tr>
<tr><td>10</td><td>gfx_6_fill_2.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, varianta s&nbsp;instrukcí <strong>LOOP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm</a></td></tr>
<tr><td>11</td><td>gfx_6_fill_3.asm</td><td>vyplnění obrazovky instrukcí <strong>REP STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm</a></td></tr>
<tr><td>12</td><td>gfx_6_fill_4.asm</td><td>vyplnění obrazovky, synchronizace vykreslování s&nbsp;paprskem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>gfx_4_image_1.asm</td><td>vykreslení rastrového obrázku získaného z&nbsp;binárních dat, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm</a></td></tr>
<tr><td>14</td><td>gfx_4_image_2.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm</a></td></tr>
<tr><td>15</td><td>gfx_4_image_3.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm</a></td></tr>
<tr><td>16</td><td>gfx_4_image_4.asm</td><td>korektní vykreslení všech sudých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm</a></td></tr>
<tr><td>17</td><td>gfx_4_image_5.asm</td><td>korektní vykreslení všech sudých i lichých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>gfx_4_image_6.asm</td><td>nastavení barvové palety před vykreslením obrázku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm</a></td></tr>
<tr><td>19</td><td>gfx_4_image_7.asm</td><td>nastavení barvové palety před vykreslením obrázku, snížená intenzita barev</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm</a></td></tr>
<tr><td>20</td><td>gfx_4_image_8.asm</td><td>postupná změna barvy pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>gfx_6_putpixel_1.asm</td><td>vykreslení pixelu, základní varianta se 16bitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm</a></td></tr>
<tr><td>22</td><td>gfx_6_putpixel_2.asm</td><td>vykreslení pixelu, varianta s&nbsp;osmibitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm</a></td></tr>
<tr><td>23</td><td>gfx_6_putpixel_3.asm</td><td>vykreslení pixelu, varianta bez násobení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm</a></td></tr>
<tr><td>24</td><td>gfx_6_putpixel_4.asm</td><td>vykreslení pixelu přes obrázek, nekorektní chování (přepis obrázku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm</a></td></tr>
<tr><td>25</td><td>gfx_6_putpixel_5.asm</td><td>vykreslení pixelu přes obrázek, korektní varianta pro bílé pixely</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>cga_text_mode_1.asm</td><td>standardní textový režim s&nbsp;rozlišením 40&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm</a></td></tr>
<tr><td>27</td><td>cga_text_mode_3.asm</td><td>standardní textový režim s&nbsp;rozlišením 80&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm</a></td></tr>
<tr><td>28</td><td>cga_text_mode_intensity.asm</td><td>změna významu nejvyššího bitu atributového bajtu: vyšší intenzita namísto blikání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm</a></td></tr>
<tr><td>29</td><td>cga_text_mode_cursor.asm</td><td>změna tvaru textového kurzoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm</a></td></tr>
<tr><td>30</td><td>cga_text_gfx_1.asm</td><td>zobrazení &bdquo;rastrové mřížky&ldquo;: pseudografický režim 160&times;25 pixelů (interně textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm</a></td></tr>
<tr><td>31</td><td>cga_text_mode_char_height.asm</td><td>změna výšky znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm</a></td></tr>
<tr><td>32</td><td>cga_text_160x100.asm</td><td>grafický režim 160&times;100 se šestnácti barvami (interně upravený textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>hercules_text_mode_1.asm</td><td>využití standardního textového režimu společně s&nbsp;kartou Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm</a></td></tr>
<tr><td>34</td><td>hercules_text_mode_2.asm</td><td>zákaz blikání v&nbsp;textových režimech</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm</a></td></tr>
<tr><td>35</td><td>hercules_turn_off.asm</td><td>vypnutí generování video signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm</a></td></tr>
<tr><td>36</td><td>hercules_gfx_mode_1.asm</td><td>přepnutí karty Hercules do grafického režimu (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm</a></td></tr>
<tr><td>37</td><td>hercules_gfx_mode_2.asm</td><td>přepnutí karty Hercules do grafického režimu (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm</a></td></tr>
<tr><td>38</td><td>hercules_putpixel.asm</td><td>subrutina pro vykreslení jediného pixelu na kartě Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>ega_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm</a></td></tr>
<tr><td>40</td><td>ega_text_mode_80x43.asm</td><td>zobrazení 43 textových řádků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm</a></td></tr>
<tr><td>41</td><td>ega_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm</a></td></tr>
<tr><td>42</td><td>ega_gfx_mode_640x200.asm</td><td>přepnutí do grafického režimu 640&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm</a></td></tr>
<tr><td>43</td><td>ega_gfx_mode_640x350.asm</td><td>přepnutí do grafického režimu 640&times;350 pixelů se čtyřmi nebo šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm</a></td></tr>
<tr><td>44</td><td>ega_gfx_mode_bitplanes_1.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (základní způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm</a></td></tr>
<tr><td>45</td><td>ega_gfx_mode_bitplanes_2.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (rychlejší způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>ega_320x200_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm</a></td></tr>
<tr><td>47</td><td>ega_640x350_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 640&times;350 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>48</td><td>ega_standard_font.asm</td><td>použití standardního fontu grafické karty EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm</a></td></tr>
<tr><td>49</td><td>ega_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>ega_palette_1.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 320&times;200 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm</a></td></tr>
<tr><td>51</td><td>ega_palette_2.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 640&times;350 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm</a></td></tr>
<tr><td>52</td><td>ega_palette_3.asm</td><td>změna všech barev v&nbsp;barvové paletě s&nbsp;využitím programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm</a></td></tr>
<tr><td>53</td><td>ega_palette_4.asm</td><td>změna všech barev, včetně barvy okraje, v&nbsp;barvové paletě voláním funkce BIOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>vga_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm</a></td></tr>
<tr><td>55</td><td>vga_text_mode_80x50.asm</td><td>zobrazení 50 a taktéž 28 textových řádků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm</a></td></tr>
<tr><td>56</td><td>vga_text_mode_intensity_1.asm</td><td>změna chování atributového bitu pro blikání (nebezpečná varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm</a></td></tr>
<tr><td>57</td><td>vga_text_mode_intensity_2.asm</td><td>změna chování atributového bitu pro blikání (bezpečnější varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm</a></td></tr>
<tr><td>58</td><td>vga_text_mode_9th_column.asm</td><td>modifikace způsobu zobrazení devátého sloupce ve znakových režimech (720 pixelů na řádku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm</a></td></tr>
<tr><td>59</td><td>vga_text_mode_cursor_shape.asm</td><td>změna tvaru textového kurzoru na grafické kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm</a></td></tr>
<tr><td>60</td><td>vga_text_mode_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>vga_gfx_mode_640x480.asm</td><td>přepnutí do grafického režimu 640&times;480 pixelů se šestnácti barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm</a></td></tr>
<tr><td>62</td><td>vga_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů s&nbsp;256 barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm</a></td></tr>
<tr><td>63</td><td>vga_gfx_mode_palette.asm</td><td>změna všech barev v&nbsp;barvové paletě grafické karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm</a></td></tr>
<tr><td>64</td><td>vga_gfx_mode_dac_1.asm</td><td>využití DAC (neočekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm</a></td></tr>
<tr><td>65</td><td>vga_gfx_mode_dac_2.asm</td><td>využití DAC (očekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>66</td><td>vga_640x480_putpixel.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 640&times;480 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm</a></td></tr>
<tr><td>67</td><td>vga_320x200_putpixel_1.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm</a></td></tr>
<tr><td>68</td><td>vga_320x200_putpixel_2.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (rychlejší varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>69</td><td>vga_gfx_mode_dac_3.asm</td><td>přímé využití DAC v&nbsp;grafickém režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>70</td><td>vga_gfx_mode_unchained_step_1.asm</td><td>zobrazení barevných pruhů v&nbsp;režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm</a></td></tr>
<tr><td>71</td><td>vga_gfx_mode_unchained_step_2.asm</td><td>vypnutí zřetězení bitových rovin a změna způsobu adresování pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm</a></td></tr>
<tr><td>72</td><td>vga_gfx_mode_unchained_step_3.asm</td><td>vykreslení barevných pruhů do vybraných bitových rovin</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>73</td><td>vga_gfx_mode_320x400.asm</td><td>nestandardní grafický režim s&nbsp;rozlišením 320&times;400 pixelů a 256 barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm</a></td></tr>
<tr><td>74</td><td>vga_320x200_image.asm</td><td>zobrazení rastrového obrázku ve standardním grafickém režimu 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm</a></td></tr>
<tr><td>75</td><td>vga_320x200_unchained_image_1.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm</a></td></tr>
<tr><td>76</td><td>vga_320x200_unchained_image_2.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm</a></td></tr>
<tr><td>77</td><td>vga_320x400_unchained_image.asm</td><td>zobrazení rastrového obrázku v&nbsp;nestandardním režimu 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>78</td><td>vga_vertical_scroll_1.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm</a></td></tr>
<tr><td>79</td><td>vga_vertical_scroll_2.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm</a></td></tr>
<tr><td>80</td><td>vga_split_screen_1.asm</td><td>režim split-screen a scrolling, nefunční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm</a></td></tr>
<tr><td>81</td><td>vga_split_screen_2.asm</td><td>režim split-screen a scrolling, plně funkční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm</a></td></tr>
<tr><td>82</td><td>vga_horizontal_scroll_1.asm</td><td>horizontální scrolling bez rozšíření počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm</a></td></tr>
<tr><td>83</td><td>vga_horizontal_scroll_2.asm</td><td>horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm</a></td></tr>
<tr><td>84</td><td>vga_horizontal_scroll_3.asm</td><td>jemný horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>85</td><td>vga_320x240_image.asm</td><td>nastavení grafického režimu Mode-X, načtení a vykreslení obrázku, scrolling</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>86</td><td>io.asm</td><td>knihovna maker pro I/O operace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm</a></td></tr>
<tr><td>87</td><td>vga_lib.asm</td><td>knihovna maker a podprogramů pro programování karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_lib.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_lib.asm</a></td></tr>
<tr><td>88</td><td>vga_320x240_lib.asm</td><td>nastavení grafického režimu Mode-X, tentokrát knihovními funkcemi</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_lib.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_lib.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>89</td><td>vga_bitblt_1.asm</td><td>první (naivní) implementace operace <i>BitBLT</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_1.asm</a></td></tr>
<tr><td>90</td><td>vga_bitblt_2.asm</td><td>operace <i>BitBLT</i> s&nbsp;výběrem bitových rovin pro zápis</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_2.asm</a></td></tr>
<tr><td>91</td><td>vga_bitblt_3.asm</td><td>operace <i>BitBLT</i> s&nbsp;výběrem bitových rovin pro čtení i zápis</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_3.asm</a></td></tr>
<tr><td>92</td><td>vga_bitblt_4.asm</td><td>korektní <i>BitBLT</i> pro 16barevný režim, realizace makry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_4.asm</a></td></tr>
<tr><td>93</td><td>vga_bitblt_5.asm</td><td>korektní <i>BitBLT</i> pro 16barevný režim, realizace podprogramem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>94</td><td>vga_bitblt_rotate.asm</td><td>zápisový režim s&nbsp;rotací bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_rotate.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_rotate.asm</a></td></tr>
<tr><td>95</td><td>vga_bitblt_fast.asm</td><td>rychlá korektní 32bitová operace typu <i>BitBLT</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_fast.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_fast.asm</a></td></tr>
<tr><td>96</td><td>vga_320x400_bitblt_1.asm</td><td>přenos obrázku v&nbsp;režimu 320&times;400 operací <i>BitBLT</i> (neúplná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_1.asm</a></td></tr>
<tr><td>97</td><td>vga_320x400_bitblt_2.asm</td><td>přenos obrázku v&nbsp;režimu 320&times;400 operací <i>BitBLT</i> (úplná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_2.asm</a></td></tr>
<tr><td>98</td><td>vga_write_modes_1.asm</td><td>volitelné zápisové režimy grafické karty VGA, zápis bez úpravy latche</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_1.asm</a></td></tr>
<tr><td>99</td><td>vga_write_modes_2.asm</td><td>volitelné zápisové režimy grafické karty VGA, zápis s&nbsp;modifikací latche</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_2.asm</a></td></tr>
<tr><td>100</td><td>vga_write_modes_3.asm</td><td>volitelné zápisové režimy grafické karty VGA, cílená modifikace latche vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>101</td><td>instruction_jump.asm</td><td>použití instrukce <strong>JMP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jump.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jump.asm</a></td></tr>
<tr><td>102</td><td>instruction_jnz.asm</td><td>použití instrukce <strong>JNZ</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jnz.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jnz.asm</a></td></tr>
<tr><td>103</td><td>instruction_jz_jmp.asm</td><td>použití instrukcí <strong>JZ</strong> a <strong>JMP</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jz_jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jz_jmp.asm</a></td></tr>
<tr><td>104</td><td>instruction_loop.asm</td><td>použití instrukce <strong>LOOP</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_loop.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>105</td><td>instruction_template.asm</td><td>šablona všech následujících demonstračních příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_template.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_template.asm</a></td></tr>
<tr><td>106</td><td>instruction_print_hex.asm</td><td>tisk osmibitové hexadecimální hodnoty</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_print_hex.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_print_hex.asm</a></td></tr>
<tr><td>107</td><td>instruction_xlat.asm</td><td>využití instrukce <strong>XLAT</strong> pro získání tisknutelné hexadecimální cifry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_xlat.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_xlat.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>6845 - Motorola CRT Controller<br />
<a href="https://stanislavs.org/helppc/6845.html">https://stanislavs.org/helppc/6845.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>DOSBox<br />
<a href="https://www.dosbox.com/">https://www.dosbox.com/</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Hercules Graphics Card (HCG)<br />
<a href="https://en.wikipedia.org/wiki/Hercules_Graphics_Card">https://en.wikipedia.org/wiki/Hercules_Graphics_Card</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf">https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://yassinebridi.github.io/asm-docs/8086_instruction_set.html">https://yassinebridi.github.io/asm-docs/8086_instruction_set.html</a>
</li>

<li>8088 MPH by Hornet + CRTC + DESiRE (final version)<br />
<a href="https://www.youtube.com/watch?v=hNRO7lno_DM">https://www.youtube.com/watch?v=hNRO7lno_DM</a>
</li>

<li>Area 5150 by CRTC &amp; Hornet (Party Version) / IBM PC+CGA Demo, Hardware Capture<br />
<a href="https://www.youtube.com/watch?v=fWDxdoRTZPc">https://www.youtube.com/watch?v=fWDxdoRTZPc</a>
</li>

<li>80x86 Integer Instruction Set Timings (8088 - Pentium)<br />
<a href="http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf">http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf</a>
</li>

<li>Colour Graphics Adapter: Notes<br />
<a href="https://www.seasip.info/VintagePC/cga.html">https://www.seasip.info/VintagePC/cga.html</a>
</li>

<li>Restoring A Vintage CGA Card With Homebrew HASL<br />
<a href="https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/">https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/</a>
</li>

<li>Demoing An 8088<br />
<a href="https://hackaday.com/2015/04/10/demoing-an-8088/">https://hackaday.com/2015/04/10/demoing-an-8088/</a>
</li>

<li>Video Memory Layouts<br />
<a href="http://www.techhelpmanual.com/89-video_memory_layouts.html">http://www.techhelpmanual.com/89-video_memory_layouts.html</a>
</li>

<li>Screen Attributes<br />
<a href="http://www.techhelpmanual.com/87-screen_attributes.html">http://www.techhelpmanual.com/87-screen_attributes.html</a>
</li>

<li>IBM PC Family  -  BIOS Video Modes<br />
<a href="https://www.minuszerodegrees.net/video/bios_video_modes.htm">https://www.minuszerodegrees.net/video/bios_video_modes.htm</a>
</li>

<li>EGA Functions<br />
<a href="https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega">https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega</a>
</li>

<li>Why the EGA can only use 16 of its 64 colours in 200-line modes<br />
<a href="https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/">https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/</a>
</li>

<li>How 16 colors saved PC gaming - the story of EGA graphics<br />
<a href="https://www.custompc.com/retro-tech/ega-graphics">https://www.custompc.com/retro-tech/ega-graphics</a>
</li>

<li>List of 16-bit computer color palettes<br />
<a href="https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes">https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes</a>
</li>

<li>Why were those colors chosen to be the default palette for 256-color VGA?<br />
<a href="https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga">https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga</a>
</li>

<li>VGA Color Palettes<br />
<a href="https://www.fountainware.com/EXPL/vga_color_palettes.htm">https://www.fountainware.com/EXPL/vga_color_palettes.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page<br />
<a href="http://www.osdever.net/FreeVGA/vga/vga.htm">http://www.osdever.net/FreeVGA/vga/vga.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page - sequencer<br />
<a href="http://www.osdever.net/FreeVGA/vga/seqreg.htm">http://www.osdever.net/FreeVGA/vga/seqreg.htm</a>
</li>

<li>VGA Basics<br />
<a href="http://www.brackeen.com/vga/basics.html">http://www.brackeen.com/vga/basics.html</a>
</li>

<li>Introduction to VGA Mode 'X'<br />
<a href="https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html">https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html</a>
</li>

<li>VGA Mode-X<br />
<a href="https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp">https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp</a>
</li>

<li>Mode-X: 256-Color VGA Magic<br />
<a href="https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf">https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf</a>
</li>

<li>Instruction Format in 8086 Microprocessor<br />
<a href="https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx">https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx</a>
</li>

<li>How to use "AND," "OR," and "XOR" modes for VGA Drawing<br />
<a href="https://retrocomputing.stackexchange.com/questions/21936/how-to-use-and-or-and-xor-modes-for-vga-drawing">https://retrocomputing.stackexchange.com/questions/21936/how-to-use-and-or-and-xor-modes-for-vga-drawing</a>
</li>

<li>VGA Hardware<br />
<a href="https://wiki.osdev.org/VGA_Hardware">https://wiki.osdev.org/VGA_Hardware</a>
</li>

<li>Programmer's Guide to Yamaha YMF 262/OPL3 FM Music Synthesizer<br />
<a href="https://moddingwiki.shikadi.net/wiki/OPL_chip">https://moddingwiki.shikadi.net/wiki/OPL_chip</a>
</li>

<li>Does anybody understand how OPL2 percussion mode works?<br />
<a href="https://forum.vcfed.org/index.php?threads/does-anybody-understand-how-opl2-percussion-mode-works.60925/">https://forum.vcfed.org/index.php?threads/does-anybody-understand-how-opl2-percussion-mode-works.60925/</a>
</li>

<li>Yamaha YMF262 OPL3 music - MoonDriver for OPL3 DEMO [Oscilloscope View]<br />
<a href="https://www.youtube.com/watch?v=a7I-QmrkAak">https://www.youtube.com/watch?v=a7I-QmrkAak</a>
</li>

<li>Yamaha OPL vs OPL2 vs OPL3 comparison<br />
<a href="https://www.youtube.com/watch?v=5knetge5Gs0">https://www.youtube.com/watch?v=5knetge5Gs0</a>
</li>

<li>OPL3 Music Crockett's Theme<br />
<a href="https://www.youtube.com/watch?v=HXS008pkgSQ">https://www.youtube.com/watch?v=HXS008pkgSQ</a>
</li>

<li>Bad Apple (Adlib Tracker - OPL3)<br />
<a href="https://www.youtube.com/watch?v=2lEPH6Y3Luo">https://www.youtube.com/watch?v=2lEPH6Y3Luo</a>
</li>

<li>FM Synthesis Chips, Codecs and DACs<br />
<a href="https://www.dosdays.co.uk/topics/fm_synthesizers.php">https://www.dosdays.co.uk/topics/fm_synthesizers.php</a>
</li>

<li>The Zen Challenge - YMF262 OPL3 Original (For an upcoming game)<br />
<a href="https://www.youtube.com/watch?v=6JlFIFz1CFY">https://www.youtube.com/watch?v=6JlFIFz1CFY</a>
</li>

<li>[adlib tracker II techno music - opl3] orbit around alpha andromedae I<br />
<a href="https://www.youtube.com/watch?v=YqxJCu_WFuA">https://www.youtube.com/watch?v=YqxJCu_WFuA</a>
</li>

<li>[adlib tracker 2 music - opl3 techno] hybridisation process on procyon-ii<br />
<a href="https://www.youtube.com/watch?v=daSV5mN0sJ4">https://www.youtube.com/watch?v=daSV5mN0sJ4</a>
</li>

<li>Hyper Duel - Black Rain (YMF262 OPL3 Cover)<br />
<a href="https://www.youtube.com/watch?v=pu_mzRRq8Ho">https://www.youtube.com/watch?v=pu_mzRRq8Ho</a>
</li>

<li>IBM 5155-5160 Technical Reference<br />
<a href="https://www.minuszerodegrees.net/manuals/IBM/IBM_5155_5160_Technical_Reference_6280089_MAR86.pdf">https://www.minuszerodegrees.net/manuals/IBM/IBM_5155_5160_Technical_Reference_6280089_MAR86.pdf</a>
</li>

<li>a ymf262/opl3+pc speaker thing i made<br />
<a href="https://www.youtube.com/watch?v=E-Mx0lEmnZ0">https://www.youtube.com/watch?v=E-Mx0lEmnZ0</a>
</li>

<li>[OPL3] Like a Thunder<br />
<a href="https://www.youtube.com/watch?v=MHf06AGr8SU">https://www.youtube.com/watch?v=MHf06AGr8SU</a>
</li>

<li>(PC SPEAKER) bad apple<br />
<a href="https://www.youtube.com/watch?v=LezmKIIHyUg">https://www.youtube.com/watch?v=LezmKIIHyUg</a>
</li>

<li>Powering devices from PC parallel port<br />
<a href="http://www.epanorama.net/circuits/lptpower.html">http://www.epanorama.net/circuits/lptpower.html</a>
</li>

<li>Magic Mushroom (demo pro PC s DOSem)<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards//mushroom.rar">http://www.crossfire-designs.de/download/articles/soundcards//mushroom.rar</a>
</li>

<li>Píseň Magic Mushroom - originál<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_converted.mp3">http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_converted.mp3</a>
</li>

<li>Píseň Magic Mushroom - hráno na PC Speakeru<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_speaker.mp3">http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_speaker.mp3</a>
</li>

<li>Pulse Width Modulation (PWM) Simulation Example<br />
<a href="http://decibel.ni.com/content/docs/DOC-4599">http://decibel.ni.com/content/docs/DOC-4599</a>
</li>

<li>Resistor/Pulse Width Modulation DAC<br />
<a href="http://www.k9spud.com/traxmod/pwmdac.php">http://www.k9spud.com/traxmod/pwmdac.php</a>
</li>

<li>Class D Amplifier<br />
<a href="http://en.wikipedia.org/wiki/Electronic_amplifier#Class_D">http://en.wikipedia.org/wiki/Electronic_amplifier#Class_D</a>
</li>

<li>Covox Speech Thing / Disney Sound Source (1986)<br />
<a href="http://www.crossfire-designs.de/index.php?lang=en&amp;what=articles&amp;name=showarticle.htm&amp;article=soundcards/&amp;page=5">http://www.crossfire-designs.de/index.php?lang=en&amp;what=articles&amp;name=showarticle.htm&amp;article=soundcards/&amp;page=5</a>
</li>

<li>Covox Digital-Analog Converter (Rusky, obsahuje schémata)<br />
<a href="http://phantom.sannata.ru/konkurs/netskater002.shtml">http://phantom.sannata.ru/konkurs/netskater002.shtml</a>
</li>

<li>PC-GPE on the Web<br />
<a href="http://bespin.org/~qz/pc-gpe/">http://bespin.org/~qz/pc-gpe/</a>
</li>

<li>Keyboard Synthesizer<br />
<a href="http://www.solarnavigator.net/music/instruments/keyboards.htm">http://www.solarnavigator.net/music/instruments/keyboards.htm</a>
</li>

<li>FMS - Fully Modular Synthesizer<br />
<a href="http://fmsynth.sourceforge.net/">http://fmsynth.sourceforge.net/</a>
</li>

<li>Javasynth<br />
<a href="http://javasynth.sourceforge.net/">http://javasynth.sourceforge.net/</a>
</li>

<li>Software Sound Synthesis &amp; Music Composition Packages<br />
<a href="http://www.linux-sound.org/swss.html">http://www.linux-sound.org/swss.html</a>
</li>

<li>Mx44.1 Download Page (software synthesizer for linux)<br />
<a href="http://hem.passagen.se/ja_linux/">http://hem.passagen.se/ja_linux/</a>
</li>

<li>Software synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Software_synthesizer">http://en.wikipedia.org/wiki/Software_synthesizer</a>
</li>

<li>Frequency modulation synthesis<br />
<a href="http://en.wikipedia.org/wiki/Frequency_modulation_synthesis">http://en.wikipedia.org/wiki/Frequency_modulation_synthesis</a>
</li>

<li>Yamaha DX7<br />
<a href="http://en.wikipedia.org/wiki/Yamaha_DX7">http://en.wikipedia.org/wiki/Yamaha_DX7</a>
</li>

<li>Wave of the Future<br />
<a href="http://www.wired.com/wired/archive/2.03/waveguides_pr.html">http://www.wired.com/wired/archive/2.03/waveguides_pr.html</a>
</li>

<li>Analog synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Analog_synthesizer">http://en.wikipedia.org/wiki/Analog_synthesizer</a>
</li>

<li>Minimoog<br />
<a href="http://en.wikipedia.org/wiki/Minimoog">http://en.wikipedia.org/wiki/Minimoog</a>
</li>

<li>Moog synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Moog_synthesizer">http://en.wikipedia.org/wiki/Moog_synthesizer</a>
</li>

<li>Tutorial for Frequency Modulation Synthesis<br />
<a href="http://www.sfu.ca/~truax/fmtut.html">http://www.sfu.ca/~truax/fmtut.html</a>
</li>

<li>An Introduction To FM<br />
<a href="http://ccrma.stanford.edu/software/snd/snd/fm.html">http://ccrma.stanford.edu/software/snd/snd/fm.html</a>
</li>

<li>John Chowning<br />
<a href="http://en.wikipedia.org/wiki/John_Chowning">http://en.wikipedia.org/wiki/John_Chowning</a>
</li>

<li>I'm Impressed, Adlib Music is AMAZING!<br />
<a href="https://www.youtube.com/watch?v=PJNjQYp1ras">https://www.youtube.com/watch?v=PJNjQYp1ras</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

