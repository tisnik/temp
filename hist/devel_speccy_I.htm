<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vykreslování spritů a animací na ZX Spectru</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vykreslování spritů a animací na ZX Spectru</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Vykreslování spritů a animací na ZX Spectru</a></p>
<p><a href="#k02">*** 2. Sprity na osmibitových mikropočítačích</a></p>
<p><a href="#k03">*** 3. Synchronizace animace s&nbsp;generovaným obrazem</a></p>
<p><a href="#k04">*** 4. Vykreslení statického spritu</a></p>
<p><a href="#k05">*** 5. Úplný zdrojový kód dnešního prvního demonstračního příkladu</a></p>
<p><a href="#k06">*** 6. Definice spritu</a></p>
<p><a href="#k07">*** 7. Zápis definice spritu v&nbsp;assembleru</a></p>
<p><a href="#k08">*** 8. Úplný zdrojový kód dnešního druhého demonstračního příkladu</a></p>
<p><a href="#k09">*** 9. Načtení definice spritu z&nbsp;&bdquo;include&ldquo;souboru</a></p>
<p><a href="#k10">*** 10. Úplný zdrojový kód dnešního třetího demonstračního příkladu</a></p>
<p><a href="#k11">*** 11. Načtení spritu z&nbsp;binárního souboru v&nbsp;době překladu</a></p>
<p><a href="#k12">*** 12. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</a></p>
<p><a href="#k13">*** 13. Je mezi oběma způsoby načtení spritu v&nbsp;době překladu nějaký rozdíl?</a></p>
<p><a href="#k14">*** 14. Jemný posun spritu po jednotlivých pixelech</a></p>
<p><a href="#k15">*** 15. Hrubá výpočetní síla vs. předpočítání dat</a></p>
<p><a href="#k16">*** 16. Pomocný nástroj pro předpočítání jemného posunu spritu po jednotlivých pixelech</a></p>
<p><a href="#k17">*** 17. Zobrazení spritu s&nbsp;jemným posunem po obrazovce</a></p>
<p><a href="#k18">*** 18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vykreslování spritů a animací na ZX Spectru</h2>

<p>V&nbsp;dnešní části <a
href="https://www.root.cz/clanky/prace-s-klavesnici-na-zx-spectru/">seriálu o
tvorbě her i dalších aplikací určených pro slavné ZX Spectrum</a> se začneme
zabývat velmi zajímavou, ale o to složitější oblastí. Jedná se o vykreslování
takzvaných spritů a taktéž o tvorbu animací na ZX Spectru. Může se jednat o
animaci postavičky ve hře či v&nbsp;extrémním případě o postupnou změnu celé
herní scény. Sprity a animace (resp.&nbsp;zkombinováno do animovaných spritů)
jsou tedy nedílnou součástí většiny (akčních) her a liší se podle toho, jak
vlastně vypadá herní scéna (2D střílečka, skákačka, isometrické zobrazení, 3D
zobrazení atd.). Na ZX Spectru je vše poměrně komplikované (a z&nbsp;pohledu
programátora tedy i zajímavé), a to zejména z&nbsp;těchto důvodů:</p>

<ol>

<li>Na původním ZX Spectru 48k není k&nbsp;dispozici zadní buffer (<i>back
buffer</i>) určený pro vykreslování, takže se většinou vše přímo vykresluje na
obrazovku, což může tvořit viditelné artefakty.</li>

<li>Kvůli specifické struktuře obrazové paměti jsou výpočty adres pixelů
složitější, než by to bylo nutné při lineárním adresování.</li>

<li>Nejsou podporovány hardwarové sprity. Tím pádem nejsou podporovány ani
detekce kolizí atd. (ale to již opouštíme oblast animací).</li>

<li>A konečně: opět kvůli specifické struktuře obrazové paměti při dotyku a
překryvu objektů dochází k&nbsp;porušení barvových atributů (<i>attribute
clash</i>), čemuž se nevyhnula prakticky žádná hra na ZX Spectru (až na
specifické případy, kdy se například postavička pohybuje tak, aby nepřekročila
velikost atributu a i pozadí je dobře zvolené).</li>

</ol>

<p>I přes tato omezení nalezneme na ZX Spectru mnoho her, v&nbsp;nichž jsou
animace (typicky herních postaviček) řešeny velmi uspokojivým způsobem.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Sprity na osmibitových mikropočítačích</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Synchronizace animace s&nbsp;generovaným obrazem</h2>

<p>Prakticky všechny demonstrační příklady, které jsme si až doposud ukázali, nemusely synchronizovat svou činnost s&nbsp;generovaným obrazem; dokonce jsme většinou ani nepotřebovali zajistit, že příklady poběží nějakou předem určenou rychlostí. U animací (a her obecně) je to však nutné.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vykreslení statického spritu</h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. Úplný zdrojový kód dnešního prvního demonstračního příkladu</h2>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld b, 15                 <i>; x-ová souřadnice</i>
        ld c, 12                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        call draw_sprite
&nbsp;
        ld b, 31                 <i>; x-ová souřadnice</i>
        ld c, 23                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
finish:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
calc_sprite_address:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; DE - adresa pro zápis bloku</i>
        <i>;</i>
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y4 Y3 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111            <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rrca
        rrca
        rrca                     <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                    <i>; připočítat x-ovou souřadnici</i>
        ld  e, a                 <i>; máme spodní bajt adresy</i>
                                 <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
&nbsp;
        ld  a, c                 <i>; y-ová souřadnice</i>
        and %00011000            <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000            <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  d, a                 <i>; máme horní bajt adresy</i>
                                 <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
draw_sprite:
        ld hl, SPRITE_ADR        <i>; adresa, od níž začíná maska spritu</i>
&nbsp;
        ld b, 8                  <i>; počitadlo zapsaných bajtů</i>
&nbsp;
loop:
        ld   a,(hl)              <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc  l                   <i>; posun na další bajt masky (nemusíme řešit přetečení do vyššího bajtu)</i>
        inc  d                   <i>; posun na definici dalšího obrazového řádku</i>
        djnz loop                <i>; vnitřní smyčka: blok s osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
SPRITE_ADR db 24, 60, 126, 219, 255, 36, 90, 165
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:060F       LD B, 0F
8002:0E0C       LD C, 0C
8004:CD1680     CALL 8016
8007:CD2580     CALL 8025
800A:061F       LD B, 1F
800C:0E17       LD C, 17
800E:CD1680     CALL 8016
8011:CD2580     CALL 8025
8014:           label finish
8014:18FE       JR 8014
8016:           label calc_sprite_address
8016:79         LD A, C
8017:E607       AND 07
8019:0F         RRCA
801A:0F         RRCA
801B:0F         RRCA
801C:B0         OR B
801D:5F         LD E, A
801E:79         LD A, C
801F:E618       AND 18
8021:F640       OR 40
8023:57         LD D, A
8024:C9         RET
8025:           label draw_sprite
8025:213180     LD HL, 8031
8028:0608       LD B, 08
802A:           label loop
802A:7E         LD A, (HL)
802B:12         LD (DE), A
802C:2C         INC L
802D:14         INC D
802E:10FA       DJNZ 802A
8030:C9         RET
8031:           label SPRITE_ADR
8031:183C7EDB   DEFB of 8 bytes
8035:FF245AA5
8039:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8038
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Definice spritu</h2>

<pre>
                        
                        
       #####       #    
      ##  ###      #    
     # ### # ###   #    
     # ###  ##     #    
     # #  ##       #    
     #  ##  #      #    
     ###  ## ##    #    
    ##  #######   ###   
   ##########           
                  ##    
      ########### ##    
     # ######## ###     
    ### ###### ###      
   ##   ######          
   ##                   
       ######           
      ########          
       ## ##            
      #     ##          
     ###    ###         
   ####      ####       
                        
                        
</pre>

<pre>
000000000000000000000000
000000000000000000000000
000000011111000000010000
000000110011100000010000
000001011101011100010000
000001011100110000010000
000001010011000000010000
000001001100100000010000
000001110011011000010000
000011001111111000111000
000111111111100000000000
000000000000000000110000
000000111111111110110000
000001011111111011100000
000011101111110111000000
000110001111110000000000
000110000000000000000000
000000011111100000000000
000000111111110000000000
000000011011000000000000
000000100000110000000000
000001110000111000000000
000111100000011110000000
000000000000000000000000
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zápis definice spritu v&nbsp;assembleru</h2>

<pre>
SPRITE_ADR
        db %00000000, %00000000, %00000000
        db %00000000, %00000000, %00000000
        db %00000001, %11110000, %00010000
        db %00000011, %00111000, %00010000
        db %00000101, %11010111, %00010000
        db %00000101, %11001100, %00010000
        db %00000101, %00110000, %00010000
        db %00000100, %11001000, %00010000
        db %00000111, %00110110, %00010000
        db %00001100, %11111110, %00111000
        db %00011111, %11111000, %00000000
        db %00000000, %00000000, %00110000
        db %00000011, %11111111, %10110000
        db %00000101, %11111110, %11100000
        db %00001110, %11111101, %11000000
        db %00011000, %11111100, %00000000
        db %00011000, %00000000, %00000000
        db %00000001, %11111000, %00000000
        db %00000011, %11111100, %00000000
        db %00000001, %10110000, %00000000
        db %00000010, %00001100, %00000000
        db %00000111, %00001110, %00000000
        db %00011110, %00000111, %10000000
        db %00000000, %00000000, %00000000
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód dnešního druhého demonstračního příkladu</h2>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld b, 15                 <i>; x-ová souřadnice</i>
        ld c, 3                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        call draw_sprite
&nbsp;
        ld b, 29                 <i>; x-ová souřadnice</i>
        ld c, 21                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
finish:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
calc_sprite_address:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        ;
        <i>; návratové hodnoty:</i>
        <i>; DE - adresa pro zápis bloku</i>
        ;
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y4 Y3 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111            <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rrca
        rrca
        rrca                     <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                    <i>; připočítat x-ovou souřadnici</i>
        ld  e, a                 <i>; máme spodní bajt adresy</i>
                                 <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
&nbsp;
        ld  a, c                 <i>; y-ová souřadnice</i>
        and %00011000            <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000            <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  d, a                 <i>; máme horní bajt adresy</i>
                                 <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
add_e MACRO n                    <i>; zvýšení hodnoty regitru E</i>
        ld   a, e
        add  a, n
        ld   e, a
endm
&nbsp;
draw_sprite:
        ld hl, SPRITE_ADR        <i>; adresa, od níž začíná maska spritu</i>
        push de
        call draw_8_lines        <i>; vykreslit prvních 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        push de
        call draw_8_lines        <i>; vykreslit druhých 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        call draw_8_lines        <i>; vykreslit třetích 8 řádků spritu</i>
&nbsp;
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
draw_8_lines:
        ld b, 8                  <i>; počitadlo zapsaných řádků</i>
&nbsp;
loop:
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
&nbsp;
        inc d                    <i>; posun na definici dalšího obrazového řádku</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; dtto</i>
        djnz loop                <i>; vnitřní smyčka: blok s 3x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
SPRITE_ADR
        db %00000000, %00000000, %00000000
        db %00000000, %00000000, %00000000
        db %00000001, %11110000, %00010000
        db %00000011, %00111000, %00010000
        db %00000101, %11010111, %00010000
        db %00000101, %11001100, %00010000
        db %00000101, %00110000, %00010000
        db %00000100, %11001000, %00010000
        db %00000111, %00110110, %00010000
        db %00001100, %11111110, %00111000
        db %00011111, %11111000, %00000000
        db %00000000, %00000000, %00110000
        db %00000011, %11111111, %10110000
        db %00000101, %11111110, %11100000
        db %00001110, %11111101, %11000000
        db %00011000, %11111100, %00000000
        db %00011000, %00000000, %00000000
        db %00000001, %11111000, %00000000
        db %00000011, %11111100, %00000000
        db %00000001, %10110000, %00000000
        db %00000010, %00001100, %00000000
        db %00000111, %00001110, %00000000
        db %00011110, %00000111, %10000000
        db %00000000, %00000000, %00000000
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:060F       LD B, 0F
8002:0E03       LD C, 03
8004:CD1680     CALL 8016
8007:CD2580     CALL 8025
800A:061D       LD B, 1D
800C:0E15       LD C, 15
800E:CD1680     CALL 8016
8011:CD2580     CALL 8025
8014:           label finish
8014:18FE       JR 8014
8016:           label calc_sprite_address
8016:79         LD A, C
8017:E607       AND 07
8019:0F         RRCA
801A:0F         RRCA
801B:0F         RRCA
801C:B0         OR B
801D:5F         LD E, A
801E:79         LD A, C
801F:E618       AND 18
8021:F640       OR 40
8023:57         LD D, A
8024:C9         RET
Defining MACRO add_e
Params: n
8025:           label draw_sprite
8025:215180     LD HL, 8051
8028:D5         PUSH DE
8029:CD3E80     CALL 803E
802C:D1         POP DE
Expanding MACRO add_e
n= 0020 
LD A , E 
802D:7B         LD A, E
ADD A , n 
802E:C620       ADD A, 20
LD E , A 
8030:5F         LD E, A
ENDM 
                ENDM
End of MACRO add_e
8031:D5         PUSH DE
8032:CD3E80     CALL 803E
8035:D1         POP DE
Expanding MACRO add_e
n= 0020 
LD A , E 
8036:7B         LD A, E
ADD A , n 
8037:C620       ADD A, 20
LD E , A 
8039:5F         LD E, A
ENDM 
                ENDM
End of MACRO add_e
803A:CD3E80     CALL 803E
803D:C9         RET
803E:           label draw_8_lines
803E:0608       LD B, 08
8040:           label loop
8040:7E         LD A, (HL)
8041:12         LD (DE), A
8042:23         INC HL
8043:1C         INC E
8044:7E         LD A, (HL)
8045:12         LD (DE), A
8046:23         INC HL
8047:1C         INC E
8048:7E         LD A, (HL)
8049:12         LD (DE), A
804A:23         INC HL
804B:14         INC D
804C:1D         DEC E
804D:1D         DEC E
804E:10F0       DJNZ 8040
8050:C9         RET
8051:           label SPRITE_ADR
8051:000000     DEFB of 3 bytes
8054:000000     DEFB of 3 bytes
8057:01F010     DEFB of 3 bytes
805A:033810     DEFB of 3 bytes
805D:05D710     DEFB of 3 bytes
8060:05CC10     DEFB of 3 bytes
8063:053010     DEFB of 3 bytes
8066:04C810     DEFB of 3 bytes
8069:073610     DEFB of 3 bytes
806C:0CFE38     DEFB of 3 bytes
806F:1FF800     DEFB of 3 bytes
8072:000030     DEFB of 3 bytes
8075:03FFB0     DEFB of 3 bytes
8078:05FEE0     DEFB of 3 bytes
807B:0EFDC0     DEFB of 3 bytes
807E:18FC00     DEFB of 3 bytes
8081:180000     DEFB of 3 bytes
8084:01F800     DEFB of 3 bytes
8087:03FC00     DEFB of 3 bytes
808A:01B000     DEFB of 3 bytes
808D:020C00     DEFB of 3 bytes
8090:070E00     DEFB of 3 bytes
8093:1E0780     DEFB of 3 bytes
8096:000000     DEFB of 3 bytes
8099:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8098
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Načtení definice spritu z&nbsp;&bdquo;include&ldquo;souboru</h2>

<pre>
        db %00000000, %00000000, %00000000
        db %00000000, %00000000, %00000000
        db %00000001, %11110000, %00010000
        db %00000011, %00111000, %00010000
        db %00000101, %11010111, %00010000
        db %00000101, %11001100, %00010000
        db %00000101, %00110000, %00010000
        db %00000100, %11001000, %00010000
        db %00000111, %00110110, %00010000
        db %00001100, %11111110, %00111000
        db %00011111, %11111000, %00000000
        db %00000000, %00000000, %00110000
        db %00000011, %11111111, %10110000
        db %00000101, %11111110, %11100000
        db %00001110, %11111101, %11000000
        db %00011000, %11111100, %00000000
        db %00011000, %00000000, %00000000
        db %00000001, %11111000, %00000000
        db %00000011, %11111100, %00000000
        db %00000001, %10110000, %00000000
        db %00000010, %00001100, %00000000
        db %00000111, %00001110, %00000000
        db %00011110, %00000111, %10000000
        db %00000000, %00000000, %00000000
</pre>

<pre>
SPRITE_ADR
        include "sprite.asm"
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Úplný zdrojový kód dnešního třetího demonstračního příkladu</h2>

<p></p>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld b, 15                 <i>; x-ová souřadnice</i>
        ld c, 3                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        call draw_sprite
&nbsp;
        ld b, 29                 <i>; x-ová souřadnice</i>
        ld c, 21                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
finish:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
calc_sprite_address:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        ;
        <i>; návratové hodnoty:</i>
        <i>; DE - adresa pro zápis bloku</i>
        ;
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y4 Y3 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111            <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rrca
        rrca
        rrca                     <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                    <i>; připočítat x-ovou souřadnici</i>
        ld  e, a                 <i>; máme spodní bajt adresy</i>
                                 <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
&nbsp;
        ld  a, c                 <i>; y-ová souřadnice</i>
        and %00011000            <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000            <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  d, a                 <i>; máme horní bajt adresy</i>
                                 <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
add_e MACRO n                    <i>; zvýšení hodnoty regitru E</i>
        ld   a, e
        add  a, n
        ld   e, a
endm
&nbsp;
draw_sprite:
        ld hl, SPRITE_ADR        <i>; adresa, od níž začíná maska spritu</i>
        push de
        call draw_8_lines        <i>; vykreslit prvních 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        push de
        call draw_8_lines        <i>; vykreslit druhých 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        call draw_8_lines        <i>; vykreslit třetích 8 řádků spritu</i>
&nbsp;
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
draw_8_lines:
        ld b, 8                  <i>; počitadlo zapsaných řádků</i>
&nbsp;
loop:
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
&nbsp;
        inc d                    <i>; posun na definici dalšího obrazového řádku</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; dtto</i>
        djnz loop                <i>; vnitřní smyčka: blok s 3x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
SPRITE_ADR
        include "sprite.asm"
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:060F       LD B, 0F
8002:0E03       LD C, 03
8004:CD1680     CALL 8016
8007:CD2580     CALL 8025
800A:061D       LD B, 1D
800C:0E15       LD C, 15
800E:CD1680     CALL 8016
8011:CD2580     CALL 8025
8014:           label finish
8014:18FE       JR 8014
8016:           label calc_sprite_address
8016:79         LD A, C
8017:E607       AND 07
8019:0F         RRCA
801A:0F         RRCA
801B:0F         RRCA
801C:B0         OR B
801D:5F         LD E, A
801E:79         LD A, C
801F:E618       AND 18
8021:F640       OR 40
8023:57         LD D, A
8024:C9         RET
Defining MACRO add_e
Params: n
8025:           label draw_sprite
8025:215180     LD HL, 8051
8028:D5         PUSH DE
8029:CD3E80     CALL 803E
802C:D1         POP DE
Expanding MACRO add_e
n= 0020 
LD A , E 
802D:7B         LD A, E
ADD A , n 
802E:C620       ADD A, 20
LD E , A 
8030:5F         LD E, A
ENDM 
                ENDM
End of MACRO add_e
8031:D5         PUSH DE
8032:CD3E80     CALL 803E
8035:D1         POP DE
Expanding MACRO add_e
n= 0020 
LD A , E 
8036:7B         LD A, E
ADD A , n 
8037:C620       ADD A, 20
LD E , A 
8039:5F         LD E, A
ENDM 
                ENDM
End of MACRO add_e
803A:CD3E80     CALL 803E
803D:C9         RET
803E:           label draw_8_lines
803E:0608       LD B, 08
8040:           label loop
8040:7E         LD A, (HL)
8041:12         LD (DE), A
8042:23         INC HL
8043:1C         INC E
8044:7E         LD A, (HL)
8045:12         LD (DE), A
8046:23         INC HL
8047:1C         INC E
8048:7E         LD A, (HL)
8049:12         LD (DE), A
804A:23         INC HL
804B:14         INC D
804C:1D         DEC E
804D:1D         DEC E
804E:10F0       DJNZ 8040
8050:C9         RET
8051:           label SPRITE_ADR
                INCLUDE sprite.asm
8051:000000     DEFB of 3 bytes
8054:000000     DEFB of 3 bytes
8057:01F010     DEFB of 3 bytes
805A:033810     DEFB of 3 bytes
805D:05D710     DEFB of 3 bytes
8060:05CC10     DEFB of 3 bytes
8063:053010     DEFB of 3 bytes
8066:04C810     DEFB of 3 bytes
8069:073610     DEFB of 3 bytes
806C:0CFE38     DEFB of 3 bytes
806F:1FF800     DEFB of 3 bytes
8072:000030     DEFB of 3 bytes
8075:03FFB0     DEFB of 3 bytes
8078:05FEE0     DEFB of 3 bytes
807B:0EFDC0     DEFB of 3 bytes
807E:18FC00     DEFB of 3 bytes
8081:180000     DEFB of 3 bytes
8084:01F800     DEFB of 3 bytes
8087:03FC00     DEFB of 3 bytes
808A:01B000     DEFB of 3 bytes
808D:020C00     DEFB of 3 bytes
8090:070E00     DEFB of 3 bytes
8093:1E0780     DEFB of 3 bytes
8096:000000     DEFB of 3 bytes
                End of INCLUDE
8099:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8098
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Načtení spritu z&nbsp;binárního souboru v&nbsp;době překladu</h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</h2>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld b, 15                 <i>; x-ová souřadnice</i>
        ld c, 3                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        call draw_sprite
&nbsp;
        ld b, 29                 <i>; x-ová souřadnice</i>
        ld c, 21                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
finish:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
calc_sprite_address:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; DE - adresa pro zápis bloku</i>
        <i>;</i>
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y4 Y3 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111            <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rrca
        rrca
        rrca                     <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                    <i>; připočítat x-ovou souřadnici</i>
        ld  e, a                 <i>; máme spodní bajt adresy</i>
                                 <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
&nbsp;
        ld  a, c                 <i>; y-ová souřadnice</i>
        and %00011000            <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000            <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  d, a                 <i>; máme horní bajt adresy</i>
                                 <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
add_e MACRO n                    <i>; zvýšení hodnoty regitru E</i>
        ld   a, e
        add  a, n
        ld   e, a
endm
&nbsp;
draw_sprite:
        ld hl, SPRITE_ADR        <i>; adresa, od níž začíná maska spritu</i>
        push de
        call draw_8_lines        <i>; vykreslit prvních 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        push de
        call draw_8_lines        <i>; vykreslit druhých 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        call draw_8_lines        <i>; vykreslit třetích 8 řádků spritu</i>
&nbsp;
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
draw_8_lines:
        ld b, 8                  <i>; počitadlo zapsaných řádků</i>
&nbsp;
loop:
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
&nbsp;
        inc d                    <i>; posun na definici dalšího obrazového řádku</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; dtto</i>
        djnz loop                <i>; vnitřní smyčka: blok s 3x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
SPRITE_ADR
        incbin "sprite.bin"
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:060F       LD B, 0F
8002:0E03       LD C, 03
8004:CD1680     CALL 8016
8007:CD2580     CALL 8025
800A:061D       LD B, 1D
800C:0E15       LD C, 15
800E:CD1680     CALL 8016
8011:CD2580     CALL 8025
8014:           label finish
8014:18FE       JR 8014
8016:           label calc_sprite_address
8016:79         LD A, C
8017:E607       AND 07
8019:0F         RRCA
801A:0F         RRCA
801B:0F         RRCA
801C:B0         OR B
801D:5F         LD E, A
801E:79         LD A, C
801F:E618       AND 18
8021:F640       OR 40
8023:57         LD D, A
8024:C9         RET
Defining MACRO add_e
Params: n
8025:           label draw_sprite
8025:215180     LD HL, 8051
8028:D5         PUSH DE
8029:CD3E80     CALL 803E
802C:D1         POP DE
Expanding MACRO add_e
n= 0020 
LD A , E 
802D:7B         LD A, E
ADD A , n 
802E:C620       ADD A, 20
LD E , A 
8030:5F         LD E, A
ENDM 
                ENDM
End of MACRO add_e
8031:D5         PUSH DE
8032:CD3E80     CALL 803E
8035:D1         POP DE
Expanding MACRO add_e
n= 0020 
LD A , E 
8036:7B         LD A, E
ADD A , n 
8037:C620       ADD A, 20
LD E , A 
8039:5F         LD E, A
ENDM 
                ENDM
End of MACRO add_e
803A:CD3E80     CALL 803E
803D:C9         RET
803E:           label draw_8_lines
803E:0608       LD B, 08
8040:           label loop
8040:7E         LD A, (HL)
8041:12         LD (DE), A
8042:23         INC HL
8043:1C         INC E
8044:7E         LD A, (HL)
8045:12         LD (DE), A
8046:23         INC HL
8047:1C         INC E
8048:7E         LD A, (HL)
8049:12         LD (DE), A
804A:23         INC HL
804B:14         INC D
804C:1D         DEC E
804D:1D         DEC E
804E:10F0       DJNZ 8040
8050:C9         RET
8051:           label SPRITE_ADR
                INCBIN sprite.bin
8099:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8098
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Je mezi oběma způsoby načtení spritu v&nbsp;době překladu nějaký rozdíl?</h2>

<pre>
$ <strong>od -t x1 122.tap </strong>
&nbsp;
0000000 13 00 00 00 6c 6f 61 64 65 72 20 20 20 20 47 00
0000020 0a 00 47 00 1b 49 00 ff 00 0a 0d 00 fd 33 32 37
0000040 36 37 0e 00 00 ff 7f 00 0d 00 14 17 00 f4 32 33
0000060 36 31 30 0e 00 00 3a 5c 00 2c 32 35 35 0e 00 00
0000100 ff 00 00 0d 00 1e 05 00 ef 22 22 af 0d 00 28 0e
0000120 00 f9 c0 33 32 37 36 38 0e 00 00 00 80 00 0d 08
0000140 13 00 00 03 31 32 32 2e 74 61 70 20 20 20 99 00
0000160 00 80 00 80 c0 9b 00 ff 06 0f 0e 03 cd 16 80 cd
0000200 25 80 06 1d 0e 15 cd 16 80 cd 25 80 18 fe 79 e6
0000220 07 0f 0f 0f b0 5f 79 e6 18 f6 40 57 c9 21 51 80
0000240 d5 cd 3e 80 d1 7b c6 20 5f d5 cd 3e 80 d1 7b c6
0000260 20 5f cd 3e 80 c9 06 08 7e 12 23 1c 7e 12 23 1c
0000300 7e 12 23 14 1d 1d 10 f0 c9 00 00 00 00 00 00 01
0000320 f0 10 03 38 10 05 d7 10 05 cc 10 05 30 10 04 c8
0000340 10 07 36 10 0c fe 38 1f f8 00 00 00 30 03 ff b0
0000360 05 fe e0 0e fd c0 18 fc 00 18 00 00 01 f8 00 03
0000400 fc 00 01 b0 00 02 0c 00 07 0e 00 1e 07 80 00 00
0000420 00 59
0000422
</pre>

<pre>
$ make 122.hex
$ make 123.hex
</pre>

<p></p>

<pre>
$ od -t x1 122.tap >122.hex
$ od -t x1 123.tap >123.hex
</pre>

<pre>
$ diff -y 122.hex 123.hex
<pre>

<pre>
0000000 13 00 00 00 6c 6f 61 64 65 72 20 20 20 20 47 00         0000000 13 00 00 00 6c 6f 61 64 65 72 20 20 20 20 47 00
0000020 0a 00 47 00 1b 49 00 ff 00 0a 0d 00 fd 33 32 37         0000020 0a 00 47 00 1b 49 00 ff 00 0a 0d 00 fd 33 32 37
0000040 36 37 0e 00 00 ff 7f 00 0d 00 14 17 00 f4 32 33         0000040 36 37 0e 00 00 ff 7f 00 0d 00 14 17 00 f4 32 33
0000060 36 31 30 0e 00 00 3a 5c 00 2c 32 35 35 0e 00 00         0000060 36 31 30 0e 00 00 3a 5c 00 2c 32 35 35 0e 00 00
0000100 ff 00 00 0d 00 1e 05 00 ef 22 22 af 0d 00 28 0e         0000100 ff 00 00 0d 00 1e 05 00 ef 22 22 af 0d 00 28 0e
0000120 00 f9 c0 33 32 37 36 38 0e 00 00 00 80 00 0d 08         0000120 00 f9 c0 33 32 37 36 38 0e 00 00 00 80 00 0d 08
0000140 13 00 00 03 31 32*32*2e 74 61 70 20 20 20 99 00       | 0000140 13 00 00 03 31 32*33*2e 74 61 70 20 20 20 99 00
0000160 00 80 00 80*c0*9b 00 ff 06 0f 0e 03 cd 16 80 cd       | 0000160 00 80 00 80*c1*9b 00 ff 06 0f 0e 03 cd 16 80 cd
0000200 25 80 06 1d 0e 15 cd 16 80 cd 25 80 18 fe 79 e6         0000200 25 80 06 1d 0e 15 cd 16 80 cd 25 80 18 fe 79 e6
0000220 07 0f 0f 0f b0 5f 79 e6 18 f6 40 57 c9 21 51 80         0000220 07 0f 0f 0f b0 5f 79 e6 18 f6 40 57 c9 21 51 80
0000240 d5 cd 3e 80 d1 7b c6 20 5f d5 cd 3e 80 d1 7b c6         0000240 d5 cd 3e 80 d1 7b c6 20 5f d5 cd 3e 80 d1 7b c6
0000260 20 5f cd 3e 80 c9 06 08 7e 12 23 1c 7e 12 23 1c         0000260 20 5f cd 3e 80 c9 06 08 7e 12 23 1c 7e 12 23 1c
0000300 7e 12 23 14 1d 1d 10 f0 c9 00 00 00 00 00 00 01         0000300 7e 12 23 14 1d 1d 10 f0 c9 00 00 00 00 00 00 01
0000320 f0 10 03 38 10 05 d7 10 05 cc 10 05 30 10 04 c8         0000320 f0 10 03 38 10 05 d7 10 05 cc 10 05 30 10 04 c8
0000340 10 07 36 10 0c fe 38 1f f8 00 00 00 30 03 ff b0         0000340 10 07 36 10 0c fe 38 1f f8 00 00 00 30 03 ff b0
0000360 05 fe e0 0e fd c0 18 fc 00 18 00 00 01 f8 00 03         0000360 05 fe e0 0e fd c0 18 fc 00 18 00 00 01 f8 00 03
0000400 fc 00 01 b0 00 02 0c 00 07 0e 00 1e 07 80 00 00         0000400 fc 00 01 b0 00 02 0c 00 07 0e 00 1e 07 80 00 00
0000420 00 59                                                   0000420 00 59
0000422                                                         0000422
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Jemný posun spritu po jednotlivých pixelech</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Hrubá výpočetní síla vs. předpočítání dat</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Pomocný nástroj pro předpočítání jemného posunu spritu po jednotlivých pixelech</h2>

<pre>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Zobrazení spritu s&nbsp;jemným posunem po obrazovce</h2>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
&nbsp;
draw_shifted_sprite MACRO offset
        ld hl, SPRITE_ADR+(offset*24*4) <i>; adresa, od níž začíná maska spritu</i>
        call draw_sprite
endm
&nbsp;
&nbsp;
start:
        ld b, 0                  <i>; x-ová souřadnice</i>
        ld c, 2                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        draw_shifted_sprite 0
&nbsp;
        ld b, 0                  <i>; x-ová souřadnice</i>
        ld c, 5                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        draw_shifted_sprite 1
&nbsp;
        ld b, 0                  <i>; x-ová souřadnice</i>
        ld c, 9                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        draw_shifted_sprite 2
&nbsp;
        ld b, 0                  <i>; x-ová souřadnice</i>
        ld c, 12                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        draw_shifted_sprite 3
&nbsp;
        ld b, 0                  <i>; x-ová souřadnice</i>
        ld c, 16                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        draw_shifted_sprite 4
&nbsp;
        ld b, 0                  <i>; x-ová souřadnice</i>
        ld c, 19                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        draw_shifted_sprite 5
&nbsp;
finish:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
calc_sprite_address:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        ;
        <i>; návratové hodnoty:</i>
        <i>; DE - adresa pro zápis bloku</i>
        ;
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y4 Y3 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111            <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rrca
        rrca
        rrca                     <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                    <i>; připočítat x-ovou souřadnici</i>
        ld  e, a                 <i>; máme spodní bajt adresy</i>
                                 <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
&nbsp;
        ld  a, c                 <i>; y-ová souřadnice</i>
        and %00011000            <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000            <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  d, a                 <i>; máme horní bajt adresy</i>
                                 <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
add_e MACRO n                    <i>; zvýšení hodnoty regitru E</i>
        ld   a, e
        add  a, n
        ld   e, a
endm
&nbsp;
&nbsp;
draw_sprite:
        push de
        call draw_8_lines        <i>; vykreslit prvních 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        push de
        call draw_8_lines        <i>; vykreslit druhých 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        call draw_8_lines        <i>; vykreslit třetích 8 řádků spritu</i>
&nbsp;
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
draw_8_lines:
        ld b, 8                  <i>; počitadlo zapsaných řádků</i>
&nbsp;
loop:
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
&nbsp;
        inc d                    <i>; posun na definici dalšího obrazového řádku</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; dtto</i>
        dec e                    <i>; dtto</i>
        djnz loop                <i>; vnitřní smyčka: blok s 4x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
SPRITE_ADR
        incbin "sprites.bin0"
        incbin "sprites.bin1"
        incbin "sprites.bin2"
        incbin "sprites.bin3"
        incbin "sprites.bin4"
        incbin "sprites.bin5"
        incbin "sprites.bin6"
        incbin "sprites.bin7"
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
                ORG 8000
Defining MACRO draw_shifted_sprite
Params: offset
8000:           label start
8000:0600       LD B, 00
8002:0E02       LD C, 02
8004:CD5080     CALL 8050
Expanding MACRO draw_shifted_sprite
offset= 0000 
LD HL , SPRITE_ADR + ( offset * 0018 * 0004 ) 
8007:218D80     LD HL, 808D
CALL draw_sprite 
800A:CD5F80     CALL 805F
ENDM 
                ENDM
End of MACRO draw_shifted_sprite
800D:0600       LD B, 00
800F:0E05       LD C, 05
8011:CD5080     CALL 8050
Expanding MACRO draw_shifted_sprite
offset= 0001 
LD HL , SPRITE_ADR + ( offset * 0018 * 0004 ) 
8014:21ED80     LD HL, 80ED
CALL draw_sprite 
8017:CD5F80     CALL 805F
ENDM 
                ENDM
End of MACRO draw_shifted_sprite
801A:0600       LD B, 00
801C:0E09       LD C, 09
801E:CD5080     CALL 8050
Expanding MACRO draw_shifted_sprite
offset= 0002 
LD HL , SPRITE_ADR + ( offset * 0018 * 0004 ) 
8021:214D81     LD HL, 814D
CALL draw_sprite 
8024:CD5F80     CALL 805F
ENDM 
                ENDM
End of MACRO draw_shifted_sprite
8027:0600       LD B, 00
8029:0E0C       LD C, 0C
802B:CD5080     CALL 8050
Expanding MACRO draw_shifted_sprite
offset= 0003 
LD HL , SPRITE_ADR + ( offset * 0018 * 0004 ) 
802E:21AD81     LD HL, 81AD
CALL draw_sprite 
8031:CD5F80     CALL 805F
ENDM 
                ENDM
End of MACRO draw_shifted_sprite
8034:0600       LD B, 00
8036:0E10       LD C, 10
8038:CD5080     CALL 8050
Expanding MACRO draw_shifted_sprite
offset= 0004 
LD HL , SPRITE_ADR + ( offset * 0018 * 0004 ) 
803B:210D82     LD HL, 820D
CALL draw_sprite 
803E:CD5F80     CALL 805F
ENDM 
                ENDM
End of MACRO draw_shifted_sprite
8041:0600       LD B, 00
8043:0E13       LD C, 13
8045:CD5080     CALL 8050
Expanding MACRO draw_shifted_sprite
offset= 0005 
LD HL , SPRITE_ADR + ( offset * 0018 * 0004 ) 
8048:216D82     LD HL, 826D
CALL draw_sprite 
804B:CD5F80     CALL 805F
ENDM 
                ENDM
End of MACRO draw_shifted_sprite
804E:           label finish
804E:18FE       JR 804E
8050:           label calc_sprite_address
8050:79         LD A, C
8051:E607       AND 07
8053:0F         RRCA
8054:0F         RRCA
8055:0F         RRCA
8056:B0         OR B
8057:5F         LD E, A
8058:79         LD A, C
8059:E618       AND 18
805B:F640       OR 40
805D:57         LD D, A
805E:C9         RET
Defining MACRO add_e
Params: n
805F:           label draw_sprite
805F:D5         PUSH DE
8060:CD7580     CALL 8075
8063:D1         POP DE
Expanding MACRO add_e
n= 0020 
LD A , E 
8064:7B         LD A, E
ADD A , n 
8065:C620       ADD A, 20
LD E , A 
8067:5F         LD E, A
ENDM 
                ENDM
End of MACRO add_e
8068:D5         PUSH DE
8069:CD7580     CALL 8075
806C:D1         POP DE
Expanding MACRO add_e
n= 0020 
LD A , E 
806D:7B         LD A, E
ADD A , n 
806E:C620       ADD A, 20
LD E , A 
8070:5F         LD E, A
ENDM 
                ENDM
End of MACRO add_e
8071:CD7580     CALL 8075
8074:C9         RET
8075:           label draw_8_lines
8075:0608       LD B, 08
8077:           label loop
8077:7E         LD A, (HL)
8078:12         LD (DE), A
8079:23         INC HL
807A:1C         INC E
807B:7E         LD A, (HL)
807C:12         LD (DE), A
807D:23         INC HL
807E:1C         INC E
807F:7E         LD A, (HL)
8080:12         LD (DE), A
8081:23         INC HL
8082:1C         INC E
8083:7E         LD A, (HL)
8084:12         LD (DE), A
8085:23         INC HL
8086:14         INC D
8087:1D         DEC E
8088:1D         DEC E
8089:1D         DEC E
808A:10EB       DJNZ 8077
808C:C9         RET
808D:           label SPRITE_ADR
                INCBIN sprites.bin0
                INCBIN sprites.bin1
                INCBIN sprites.bin2
                INCBIN sprites.bin3
                INCBIN sprites.bin4
                INCBIN sprites.bin5
                INCBIN sprites.bin6
                INCBIN sprites.bin7
838D:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 838C
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</h2>

<pre>
ASSEMBLER := pasmo
&nbsp;
all: 01.tap 02.tap 03.tap 04.tap 05.tap 06.tap 07.tap 08.tap 09.tap 10.tap \
    11.tap 12.tap 13.tap 14.tap 15.tap 16.tap 17.tap 18.tap 19.tap 20.tap \
    21.tap 22.tap 23.tap 24.tap 25.tap 26.tap 27.tap 28.tap 29.tap 30.tap \
    31.tap 32.tap 33.tap 34.tap 35.tap 36.tap 37.tap 38.tap 39.tap 40.tap \
    41.tap 42.tap 43.tap 44.tap 45.tap 46.tap 47.tap 48.tap 49.tap 50.tap \
    51.tap 52.tap 53.tap 54.tap 55.tap 56.tap 57.tap 58.tap 59.tap 60.tap \
    61.tap 62.tap 63.tap 64.tap 65.tap 66.tap 67.tap 68.tap 69.tap 70.tap \
    71.tap 72.tap 73.tap 74.tap 75.tap 76.tap 77.tap 78.tap 79.tap 80.tap \
    81.tap 82.tap 83.tap 84.tap 85.tap 86.tap 87.tap 88.tap 80.tap 90.tap \
    91.tap 92.tap 93.tap 94.tap 95.tap 96.tap 97.tap 98.tap 99.tap 100.tap \
    101.tap 102.tap 103.tap 104.tap 105.tap 106.tap 107.tap 108.tap 109.tap \
    110.tap 111.tap 112.tap 113.tap 114.tap 115.tap 116.tap 117.tap 118.tap \
    119.tap 120.tap 121.tap 122.tap 123.tap 124.tap 125.tap
&nbsp;
clean:
        rm -f *.tap
&nbsp;
.PHONY: all clean
&nbsp;
&nbsp;
01.tap: 01-color-attribute.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 01-color-attribute.lst
&nbsp;
02.tap: 02-blinking-attribute.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 02-blinking-attribute.lst
&nbsp;
03.tap: 03-symbolic-names.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 03-symbolic-names.lst
&nbsp;
04.tap: 04-operators.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 04-operators.lst
&nbsp;
05.tap: 05-better-symbols.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 05-better-symbols.lst
&nbsp;
06.tap: 06-tapbas-v1.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 06-tapbas-v1.lst
&nbsp;
07.tap: 07-tapbas-v2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 07-tapbas-v2.lst
&nbsp;
08.tap: 08-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 08-loop.lst
&nbsp;
09.tap: 09-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 09-loop.lst
&nbsp;
10.tap: 10-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 10-loop.lst
&nbsp;
11.tap: 11-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 11-loop.lst
&nbsp;
12.tap: 12-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 12-loop.lst
&nbsp;
13.tap: 13-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 13-loop.lst
&nbsp;
14.tap: 14-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 14-loop.lst
&nbsp;
15.tap: 15-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 15-loop.lst
&nbsp;
16.tap: 16-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 16-loop.lst
&nbsp;
17.tap: 17-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 17-loop.lst
&nbsp;
18.tap: 18-cls.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 18-cls.lst
&nbsp;
19.tap: 19-print-char-call.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 19-print-char-call.lst
&nbsp;
20.tap: 20-print-char-rst.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 20-print-char-rst.lst
&nbsp;
21.tap: 21-print-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 21-print-char.lst
&nbsp;
22.tap: 22-print-all-chars.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 22-print-all-chars.lst
&nbsp;
23.tap: 23-print-all-chars.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 23-print-all-chars.lst
&nbsp;
24.tap: 24-change-color.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 24-change-color.lst
&nbsp;
25.tap: 25-change-flash.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 25-change-flash.lst
&nbsp;
26.tap: 26-print-at.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 26-print-at.lst
&nbsp;
27.tap: 27-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 27-print-string.lst
&nbsp;
28.tap: 28-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 28-print-string.lst
&nbsp;
29.tap: 29-print-colorized-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 29-print-colorized-string.lst
&nbsp;
30.tap: 30-print-string-ROM.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 30-print-string-ROM.lst
&nbsp;
31.tap: 31-attributes.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 31-attributes.lst
&nbsp;
32.tap: 32-fill-in-vram.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 32-fill-in-vram.lst
&nbsp;
33.tap: 33-fill-in-vram-no-ret.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 33-fill-in-vram-no-ret.lst
&nbsp;
34.tap: 34-fill-in-vram-pattern.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 34-fill-in-vram-pattern.lst
&nbsp;
35.tap: 35-slow-fill-in-vram.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 35-slow-fill-in-vram.lst
&nbsp;
36.tap: 36-slow-fill-in-vram-no-ret.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 36-slow-fill-in-vram-no-ret.lst
&nbsp;
37.tap: 37-fill-block.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 37-fill-block.lst
&nbsp;
38.tap: 38-fill-block-with-pattern.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 38-fill-block-with-pattern.lst
&nbsp;
39.tap: 39-fill-block-optimized.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 39-fill-block-optimized.lst
&nbsp;
40.tap: 40-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 40-draw-char.lst
&nbsp;
41.tap: 41-draw-any-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 41-draw-any-char.lst
&nbsp;
42.tap: 42-block-anywhere.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 42-block-anywhere.lst
&nbsp;
43.tap: 43-block-anywhere-rrca.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 43-block-anywhere-rrca.lst
&nbsp;
44.tap: 44-better-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 44-better-draw-char.lst
&nbsp;
45.tap: 45-even-better-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 45-even-better-draw-char.lst
&nbsp;
46.tap: 46-draw-char-at.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 46-draw-char-at.lst
&nbsp;
47.tap: 47-draw-char-at-unrolled.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 47-draw-char-at-unrolled.lst
&nbsp;
48.tap: 48-incorrect-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 48-incorrect-print-string.lst
&nbsp;
49.tap: 49-correct-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 49-correct-print-string.lst
&nbsp;
50.tap: 50-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 50-ascii-table.lst
&nbsp;
51.tap: 51-plot-block.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 51-plot-block.lst
&nbsp;
52.tap: 52-plot-pixel.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 52-plot-pixel.lst
&nbsp;
53.tap: 53-plot-pixel.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 53-plot-pixel.lst
&nbsp;
54.tap: 54-plot-pixel-on-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 54-plot-pixel-on-background.lst
&nbsp;
55.tap: 55-plot-pixel-on-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 55-plot-pixel-on-background.lst
&nbsp;
56.tap: 56-inverse-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 56-inverse-ascii-table.lst
&nbsp;
57.tap: 57-plot-pixel-on-inverse-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 57-plot-pixel-on-inverse-background.lst
&nbsp;
58.tap: 58-plot-inverse-pixel-on-inverse-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 58-plot-inverse-pixel-on-inverse-background.lst
&nbsp;
59.tap: 59-configurable-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 59-configurable-ascii-table.lst
&nbsp;
60.tap: 60-plot-over.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 60-plot-over.lst
&nbsp;
61.tap: 61-print-number-A.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 61-print-number-A.lst
&nbsp;
62.tap: 62-print-number-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 62-print-number-B.lst
&nbsp;
63.tap: 63-print-number-C.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 63-print-number-C.lst
&nbsp;
64.tap: 64-print-number-D.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 64-print-number-D.lst
&nbsp;
65.tap: 65-more-numbers-A.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 65-more-numbers-A.lst
&nbsp;
66.tap: 66-more-numbers-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 66-more-numbers-B.lst
&nbsp;
67.tap: 67-print-flags-1.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 67-print-flags-1.lst
&nbsp;
68.tap: 68-print-flags-2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 68-print-flags-2.lst
&nbsp;
69.tap: 69-print-flags-3.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 69-print-flags-3.lst
&nbsp;
70.tap: 70-print-flags-4.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 70-print-flags-4.lst
&nbsp;
71.tap: 71-print-flags-5.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 71-print-flags-5.lst
&nbsp;
72.tap: 72-print-flags-6.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 72-print-flags-6.lst
&nbsp;
73.tap: 73-print-flags-7.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 73-print-flags-7.lst
&nbsp;
74.tap: 74-print-hex-number.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 74-print-hex-number.lst
&nbsp;
75.tap: 75-print-hex-number.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 75-print-hex-number.lst
&nbsp;
76.tap: 76-print-hex-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 76-print-hex-numbers.lst
&nbsp;
77.tap: 77-add-hex-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 77-add-hex-numbers.lst
&nbsp;
78.tap: 78-add-bcd-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 78-add-bcd-numbers.lst
&nbsp;
79.tap: 79-print-hex-digit-jmp.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 79-print-hex-digit-jmp.lst
&nbsp;
80.tap: 80-print-hex-digit-overflow.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 80-print-hex-digit-overflow.lst
&nbsp;
81.tap: 81-print-hex-digit-daa.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 81-print-hex-digit-daa.lst
&nbsp;
82.tap: 82-print-hex-numbers-daa.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 82-print-hex-numbers-daa.lst
&nbsp;
83.tap: 83-print-fp-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 83-print-fp-numbers.lst
&nbsp;
84.tap: 84-print-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 84-print-ascii-table.lst
&nbsp;
85.tap: 85-copy-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 85-copy-ascii-table.lst
&nbsp;
86.tap: 86-copy-ascii-table-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 86-copy-ascii-table-B.lst
&nbsp;
87.tap: 87-copy-ascii-table-C.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 87-copy-ascii-table-C.lst
&nbsp;
88.tap: 88-copy-ascii-table-D.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 88-copy-ascii-table-D.lst
&nbsp;
89.tap: 89-copy-ascii-table-E.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 89-copy-ascii-table-E.lst
&nbsp;
90.tap: 90-copy-ascii-table-F.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 90-copy-ascii-table-F.lst
&nbsp;
91.tap: 91-copy-ascii-table-G.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 91-copy-ascii-table-G.lst
&nbsp;
92.tap: 92-copy-ascii-table-H.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 92-copy-ascii-table-H.lst
&nbsp;
93.tap: 93-copy-ascii-table-I.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 93-copy-ascii-table-I.lst
&nbsp;
94.tap: 94-color-attribute.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 94-color-attribute.lst
&nbsp;
95.tap: 95-keypress.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 95-keypress.lst
&nbsp;
96.tap: 96-keypress-row.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 96-keypress-row.lst
&nbsp;
97.tap: 97-keypress-all-rows.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 97-keypress-all-rows.lst
&nbsp;
98.tap: 98-game-character.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 98-game-character.lst
&nbsp;
99.tap: 99-game-character-2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 99-game-character-2.lst
&nbsp;
100.tap:        100-cursor-joystick.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 100-cursor-joystick.lst
&nbsp;
101.tap:        101-sinclair-joystick.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 101-sinclair-joystick.lst
&nbsp;
102.tap:        102-kempston-joystick.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 102-kempston-joystick.lst
&nbsp;
103.tap:        103-beep.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 103-beep.lst
&nbsp;
104.tap:        104-music-scale.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 104-music-scale.lst
&nbsp;
105.tap:        105-direct-speaker.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 105-direct-speaker.lst
&nbsp;
106.tap:        106-direct-speaker-di.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 106-direct-speaker-di.lst
&nbsp;
107.tap:        107-direct-speaker-border.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 107-direct-speaker-border.lst
&nbsp;
108.tap:        108-direct-speaker-border-di.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 108-direct-speaker-border-di.lst
&nbsp;
109.tap:        109-ay-note-a.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 109-ay-note-a.lst
&nbsp;
110.tap:        110-ay-note-a.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 110-ay-note-a.lst
&nbsp;
111.tap:        111-ay-two-notes.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 111-ay-two-notes.lst
&nbsp;
112.tap:        112-ay-noise.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 112-ay-noise.lst
&nbsp;
113.tap:        113-ay-low-frequency.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 113-ay-low-frequency.lst
&nbsp;
114.tap:        114-ay-high-frequency.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 114-ay-high-frequency.lst
&nbsp;
115.tap:        115-ay-low-noise.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 115-ay-low-noise.lst
&nbsp;
116.tap:        116-ay-envelope.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 116-ay-envelope.lst
&nbsp;
117.tap:        117-ay-envelope.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 117-ay-envelope.lst
&nbsp;
118.tap:        118-ay-envelope.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 118-ay-envelope.lst
&nbsp;
119.tap:        119-noise-envelope.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 119-noise-envelope.lst
&nbsp;
120.tap:        120-8x8-sprite.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 120-8x8-sprite.lst
&nbsp;
121.tap:        121-24x24-sprite.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 121-24x24-sprite.lst
&nbsp;
122.tap:        122-24x24-sprite.asm sprite.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 122-24x24-sprite.lst
&nbsp;
123.tap:        123-24x24-sprite.asm sprite.bin
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 123-24x24-sprite.lst
&nbsp;
124.tap:        124-shifted-sprite.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 124-shifted-sprite.lst
&nbsp;
125.tap:        125-shifted-sprite.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 125-shifted-sprite.lst
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
prozatím popsané demonstrační příklady určené pro překlad a spuštění na
osmibitovém domácím mikropočítači ZX Spectrum (libovolný model či jeho klon),
které jsou psány v&nbsp;assembleru mikroprocesoru Zilog Z80. Pro překlad těchto
demonstračních příkladů je možné použít například assembler <i>Pasmo</i> (viz
též <a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">úvodní
článek</a>):</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01-color-attribute.asm</td><td>modifikace jednoho barvového atributu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm</a></td></tr>
<tr><td> 2</td><td>02-blinking-attribute.asm</td><td>barvový atribut s&nbsp;nastavením bitů pro blikání a vyšší intenzitu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm</a></td></tr>
<tr><td> 3</td><td>03-symbolic-names.asm</td><td>symbolická jména v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm</a></td></tr>
<tr><td> 4</td><td>04-operators.asm</td><td>operátory a operace se symbolickými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm</a></td></tr>
<tr><td> 5</td><td>05-better-symbols.asm</td><td>tradičnější symbolická jména</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm</a></td></tr>
<tr><td> 6</td><td>06-tapbas-v1.asm</td><td>vygenerování BASICovského loaderu (neúplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm</a></td></tr>
<tr><td> 7</td><td>07-tapbas-v2.asm</td><td>vygenerování BASICovského loaderu (úplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm</a></td></tr>
<tr><td> 8</td><td>08-loop.asm</td><td>jednoduchá počítaná programová smyčka: naivní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm</a></td></tr>
<tr><td> 9</td><td>09-loop.asm</td><td>programová smyčka: zkrácení kódu pro vynulování použitých pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm</a></td></tr>
<tr><td>10</td><td>10-loop.asm</td><td>programová smyčka: optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm</a></td></tr>
<tr><td>11</td><td>11-loop.asm</td><td>programová smyčka: optimalizace využití pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm</a></td></tr>
<tr><td>12</td><td>12-loop.asm</td><td>programová smyčka: použití pracovního registru IX</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm</a></td></tr>
<tr><td>13</td><td>13-loop.asm</td><td>programová smyčka: použití pracovního registru IY</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm</a></td></tr>
<tr><td>14</td><td>14-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm</a></td></tr>
<tr><td>15</td><td>15-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm</a></td></tr>
<tr><td>16</td><td>16-loop.asm</td><td>použití relativního skoku a nikoli skoku absolutního</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm</a></td></tr>
<tr><td>17</td><td>17-loop.asm</td><td>programová smyčka: <strong>inc l</strong> namísto <strong>inc hl</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>18-cls.asm</td><td>smazání obrazovky a otevření kanálu číslo 2 (screen) přes funkci v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm</a></td></tr>
<tr><td>19</td><td>19-print-char-call.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce CALL)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm</a></td></tr>
<tr><td>20</td><td>20-print-char-rst.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce RST)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm</a></td></tr>
<tr><td>21</td><td>21-print-char.asm</td><td>pouze výpis jednoho znaku na obrazovku bez jejího smazání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm</a></td></tr>
<tr><td>22</td><td>22-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (nekorektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm</a></td></tr>
<tr><td>23</td><td>23-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (korektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm</a></td></tr>
<tr><td>24</td><td>24-change-color.asm</td><td>změna barvových atributů (popředí a pozadí) vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm</a></td></tr>
<tr><td>25</td><td>25-change-flash.asm</td><td>povolení či zákaz blikání vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm</a></td></tr>
<tr><td>26</td><td>26-print-at.asm</td><td>výpis znaku či znaků na určené místo na obrazovce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm</a></td></tr>
<tr><td>27</td><td>27-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm</a></td></tr>
<tr><td>28</td><td>28-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm</a></td></tr>
<tr><td>29</td><td>29-print-colorized-string.asm</td><td>výpis řetězce, který obsahuje i řídicí znaky pro změnu barvy atd.</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm</a></td></tr>
<tr><td>30</td><td>30-print-string-ROM.asm</td><td>výpis řetězce s&nbsp;využitím služby/subrutiny uložené v&nbsp;ROM ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>31-attributes.asm</td><td>modifikace atributů pro tisk řetězce subrutinou uloženou v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm</a></td></tr>
<tr><td>32</td><td>32-fill-in-vram.asm</td><td>vyplnění celé bitmapy barvou popředí, návrat do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm</a></td></tr>
<tr><td>33</td><td>33-fill-in-vram-no-ret.asm</td><td>vyplnění celé bitmapy barvou popředí, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>34</td><td>34-fill-in-vram-pattern.asm</td><td>vyplnění celé bitmapy zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm</a></td></tr>
<tr><td>35</td><td>35-slow-fill-in-vram.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm</a></td></tr>
<tr><td>36</td><td>36-slow-fill-in-vram-no-ret.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>37</td><td>37-fill-block.asm</td><td>vykreslení bloku 8&times;8 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm</a></td></tr>
<tr><td>38</td><td>38-fill-block-with-pattern.asm</td><td>vykreslení bloku 8&times;8 pixelů zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm</a></td></tr>
<tr><td>39</td><td>39-fill-block-optimized.asm</td><td>optimalizace předchozího příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm</a></td></tr>
<tr><td>40</td><td>40-draw-char.asm</td><td>vykreslení znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm</a></td></tr>
<tr><td>41</td><td>41-draw-any-char.asm</td><td>podprogram pro vykreslení libovolně zvoleného znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm</a></td></tr>
<tr><td>42</td><td>42-block-anywhere.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>43-block-anywhere-rrca.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm</a></td></tr>
<tr><td>44</td><td>44-better-draw-char.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm</a></td></tr>
<tr><td>45</td><td>45-even-better-draw-char.asm</td><td>posun offsetu pro vykreslení dalšího znaku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm</a></td></tr>
<tr><td>46</td><td>46-draw-char-at.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm</a></td></tr>
<tr><td>47</td><td>47-draw-char-at-unrolled.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm</a></td></tr>
<tr><td>48</td><td>48-incorrect-print-string.asm</td><td>tisk řetězce, nekorektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm</a></td></tr>
<tr><td>49</td><td>49-correct-print-string.asm</td><td>tisk řetězce, korektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>50-ascii-table.asm</td><td>tisk několika bloků ASCII tabulky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm</a></td></tr>
<tr><td>51</td><td>51-plot-block.asm</td><td>vykreslení pixelu verze 1: zápis celého bajtu na pozici pixelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm</a></td></tr>
<tr><td>52</td><td>52-plot-pixel.asm</td><td>vykreslení pixelu verze 2: korektní vykreslení jednoho pixelu, ovšem překreslení celého bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm</a></td></tr>
<tr><td>53</td><td>53-plot-pixel.asm</td><td>vykreslení pixelu verze 3: vylepšená verze předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm</a></td></tr>
<tr><td>54</td><td>54-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (nekorektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm</a></td></tr>
<tr><td>55</td><td>55-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (korektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>56</td><td>56-inverse-ascii-table.asm</td><td>vykreslení ASCII tabulky inverzní barvou (inkoust vs. papír)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm</a></td></tr>
<tr><td>57</td><td>57-plot-pixel-on-inverse-background.asm</td><td>vykreslení pixelů barvou papíru proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm</a></td></tr>
<tr><td>58</td><td>58-plot-inverse-pixel-on-inverse-background.asm</td><td>vykreslení pixelů inverzní barvou proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/58-plot-inverse-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm58-plot-inverse-pixel-on-inverse-background.asm/</a></td></tr>
<tr><td>59</td><td>59-configurable-ascii-table.asm</td><td>vykreslení ASCII tabulky buď přímo inkoustem nebo inverzně</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/59-configurable-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/59-configurable-ascii-table.asm</a></td></tr>
<tr><td>60</td><td>60-plot-over.asm</td><td>přibližná implementace příkazu <strong>PLOT OVER</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/60-plot-over.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/60-plot-over.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>61-print-number-A.asm</td><td>ukázka použití podprogramu pro tisk celého čísla</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/61-print-number-A.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/61-print-number-A.asm</a></td></tr>
<tr><td>62</td><td>62-print-number-B.asm</td><td>pokus o vytištění záporných čísel</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/62-print-number-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/62-print-number-B.asm</a></td></tr>
<tr><td>63</td><td>63-print-number-C.asm</td><td>tisk maximální podporované hodnoty 9999</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/63-print-number-C.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/63-print-number-C.asm</a></td></tr>
<tr><td>64</td><td>64-print-number-D.asm</td><td>tisk vyšší než podporované hodnoty 10000</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/64-print-number-D.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/64-print-number-D.asm</a></td></tr>
<tr><td>65</td><td>65-more-numbers-A.asm</td><td>vytištění číselné řady</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/65-more-numbers-A.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/65-more-numbers-A.asm</a></td></tr>
<tr><td>66</td><td>66-more-numbers-B.asm</td><td>kombinace tisku celočíselných hodnot s&nbsp;dalšími subrutinami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/66-more-numbers-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/66-more-numbers-B.asm</a></td></tr>
<tr><td>67</td><td>67-print-flags-1.asm</td><td>příznakové bity po provedení celočíselné operace 1+2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/67-print-flags-1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/67-print-flags-1.asm</a></td></tr>
<tr><td>68</td><td>68-print-flags-2.asm</td><td>příznakové bity po provedení celočíselné operace 0+0</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/68-print-flags-2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/68-print-flags-2.asm</a></td></tr>
<tr><td>69</td><td>69-print-flags-3.asm</td><td>příznakové bity po provedení operace 255+1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/69-print-flags-3.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/69-print-flags-3.asm</a></td></tr>
<tr><td>70</td><td>70-print-flags-4.asm</td><td>příznakové bity po provedení operace 254+1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/70-print-flags-4.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/70-print-flags-4.asm</a></td></tr>
<tr><td>71</td><td>71-print-flags-5.asm</td><td>příznakové bity po provedení operace 255+255</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/71-print-flags-5.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/71-print-flags-5.asm</a></td></tr>
<tr><td>72</td><td>72-print-flags-6.asm</td><td>výsledek operace 100+100, nastavení příznakových bitů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/72-print-flags-6.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/72-print-flags-6.asm</a></td></tr>
<tr><td>73</td><td>73-print-flags-7.asm</td><td>výsledek operace 128+128, nastavení příznakových bitů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/73-print-flags-7.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/73-print-flags-7.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>74</td><td>74-print-hex-number.asm</td><td>tisk hexadecimálního čísla v&nbsp;rozsahu 0x00 až 0xff (neoptimalizovaná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/74-print-hex-number.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/74-print-hex-number.asm</a></td></tr>
<tr><td>75</td><td>75-print-hex-number.asm</td><td>tisk hexadecimálního čísla v&nbsp;rozsahu 0x00 až 0xff (optimalizovaná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/75-print-hex-number.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/75-print-hex-number.asm</a></td></tr>
<tr><td>76</td><td>76-print-hex-numbers.asm</td><td>tisk několika hexadecimálních hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/76-print-hex-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/76-print-hex-numbers.asm</a></td></tr>
<tr><td>77</td><td>77-add-hex-numbers.asm</td><td>součet dvou osmibitových hexadecimálních hodnot s&nbsp;tiskem všech výsledků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/77-add-hex-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/77-add-hex-numbers.asm</a></td></tr>
<tr><td>78</td><td>78-add-bcd-numbers.asm</td><td>součet dvou osmibitových BCD hodnot s&nbsp;tiskem všech výsledků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/78-add-bcd-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/78-add-bcd-numbers.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>79</td><td>79-print-hex-digit-jmp.asm</td><td>tisk jedné hexadecimální cifry s&nbsp;využitím podmíněného skoku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/79-print-hex-digit-jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/79-print-hex-digit-jmp.asm</a></td></tr>
<tr><td>80</td><td>80-print-hex-digit-overflow.asm</td><td>otestování, jaký znak je vytištěn pro hodnoty větší než 15</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/80-print-hex-digit-overflow.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/80-print-hex-digit-overflow.asm</a></td></tr>
<tr><td>81</td><td>81-print-hex-digit-daa.asm</td><td>tisk jedné hexadecimální cifry s&nbsp;využitím instrukce DAA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/81-print-hex-digit-daa.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/81-print-hex-digit-daa.asm</a></td></tr>
<tr><td>82</td><td>82-print-hex-numbers-daa.asm</td><td>tisk série hexadecimálních hodnot s&nbsp;využitím instrukce DAA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/82-print-hex-numbers-daa.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/82-print-hex-numbers-daa.asm</a></td></tr>
<tr><td>83</td><td>83-print-fp-numbers.asm</td><td>tisk numerických hodnot reprezentovaných v&nbsp;systému plovoucí řádové tečky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/83-print-fp-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/83-print-fp-numbers.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>84</td><td>84-print-ascii-table.asm</td><td>tisk jednoho bloku s&nbsp;ASCII tabulkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/84-print-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/84-print-ascii-table.asm</a></td></tr>
<tr><td>85</td><td>85-copy-ascii-table.asm</td><td>kopie bloku bajt po bajtu založená na naivní programové smyčce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/85-copy-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/85-copy-ascii-table.asm</a></td></tr>
<tr><td>86</td><td>86-copy-ascii-table-B.asm</td><td>kopie bloku s&nbsp;využitím instrukce <strong>LDIR</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/86-copy-ascii-table-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/86-copy-ascii-table-B.asm</a></td></tr>
<tr><td>87</td><td>87-copy-ascii-table-C.asm</td><td>kopie bloku bajt po bajtu založená na programové smyčce a instrukci <strong>LDI</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/87-copy-ascii-table-C.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/87-copy-ascii-table-C.asm</a></td></tr>
<tr><td>88</td><td>88-copy-ascii-table-D.asm</td><td>rozbalení programové smyčky s&nbsp;instrukcí <strong>LDI</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/88-copy-ascii-table-D.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/88-copy-ascii-table-D.asm</a></td></tr>
<tr><td>89</td><td>89-copy-ascii-table-E.asm</td><td>korektní smyčka pro všechny možné velikosti bloků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/89-copy-ascii-table-E.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/89-copy-ascii-table-E.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>90</td><td>90-copy-ascii-table-F.asm</td><td>kostra programu, který pro kopii bloků (16 bajtů) využívá zásobník</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/90-copy-ascii-table-F.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/90-copy-ascii-table-F.asm</a></td></tr>
<tr><td>91</td><td>91-copy-ascii-table-G.asm</td><td>definice makra a několikeré použití (aplikace) tohoto makra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/91-copy-ascii-table-G.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/91-copy-ascii-table-G.asm</a></td></tr>
<tr><td>92</td><td>92-copy-ascii-table-H.asm</td><td>opakování makra založené na <strong>REPT</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/92-copy-ascii-table-H.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/92-copy-ascii-table-H.asm</a></td></tr>
<tr><td>93</td><td>93-copy-ascii-table-I.asm</td><td>vícenásobná kopie části obrazovky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/93-copy-ascii-table-I.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/93-copy-ascii-table-I.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>94</td><td>94-color-attribute.asm</td><td>modifikace jednoho barvového atributu na obrazovce ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/94-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/94-color-attribute.asm</a></td></tr>
<tr><td>95</td><td>95-keypress.asm</td><td>detekce stisku jedné klávesy s&nbsp;vizualizací stisku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm</a></td></tr>
<tr><td>96</td><td>96-keypress-row.asm</td><td>detekce stisku kláves v&nbsp;jednom fyzickém řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm</a></td></tr>
<tr><td>97</td><td>97-keypress-all-rows.asm</td><td>detekce stisku všech kláves klávesnice ZX Spectra 48k</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>98</td><td>98-game-character.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně s&nbsp;využitím klávesnice</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/98-game-character.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/98-game-character.asm</a></td></tr>
<tr><td>99</td><td>99-game-character-2.asm</td><td>vylepšení předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/99-game-character-2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/99-game-character-2.asm</a></td></tr>
<tr><td>100</td><td>100-cursor-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně kurzorovým joystickem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/100-cursor-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/100-cursor-joystick.asm</a></td></tr>
<tr><td>101</td><td>101-sinclair-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně joystickem připojeným přes Interface 2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/101-sinclair-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/101-sinclair-joystick.asm</a></td></tr>
<tr><td>102</td><td>102-kempston-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně joystickem připojeným přes rozhraní Kempston</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/102-kempston-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/102-kempston-joystick.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>103</td><td>103-beep.asm</td><td>využití subrutiny v&nbsp;ROM s&nbsp;implementací příkazu <strong>BEEP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/103-beep.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/103-beep.asm</a></td></tr>
<tr><td>104</td><td>104-music-scale.asm</td><td>přehrání celé stupnice</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/104-music-scale.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/104-music-scale.asm</a></td></tr>
<tr><td>105</td><td>105-direct-speaker.asm</td><td>přímé programové ovládání beeperu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/105-direct-speaker.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/105-direct-speaker.asm</a></td></tr>
<tr><td>106</td><td>106-direct-speaker-di.asm</td><td>zakázání přerušení při přehrávání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/106-direct-speaker-di.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/106-direct-speaker-di.asm</a></td></tr>
<tr><td>107</td><td>107-direct-speaker-border.asm</td><td>vizualizace frekvence přehrávání změnou okraje v&nbsp;reálném čase</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/107-direct-speaker-border.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/107-direct-speaker-border.asm</a></td></tr>
<tr><td>108</td><td>108-direct-speaker-border-di.asm</td><td>vizualizace frekvence přehrávání změnou okraje v&nbsp;reálném čase</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/108-direct-speaker-border-di.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/108-direct-speaker-border-di.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>109</td><td>109-ay-note-a.asm</td><td>přehrání komorního A na čipu AY-3-8912 na ZX Spectru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/109-ay-note-a.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/109-ay-note-a.asm</a></td></tr>
<tr><td>110</td><td>110-ay-note-a.asm</td><td>přehrání komorního A na čipu AY-3-8912 na ZX Spectru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/110-ay-note-a.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/110-ay-note-a.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>111</td><td>111-ay-two-notes.asm</td><td>souběžné přehrání dvojice not</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/111-ay-two-notes.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/111-ay-two-notes.asm</a></td></tr>
<tr><td>112</td><td>112-ay-noise.asm</td><td>vygenerování šumu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/112-ay-noise.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/112-ay-noise.asm</a></td></tr>
<tr><td>113</td><td>113-ay-low-frequency.asm</td><td>čistý tón s&nbsp;nízkou frekvencí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/113-ay-low-frequency.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/113-ay-low-frequency.asm</a></td></tr>
<tr><td>114</td><td>114-ay-high-frequency.asm</td><td>čistý tón s&nbsp;vysokou frekvencí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/114-ay-high-frequency.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/114-ay-high-frequency.asm</a></td></tr>
<tr><td>115</td><td>115-ay-low-noise.asm</td><td>vygenerování šumu s&nbsp;nízkou frekvencí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/115-ay-low-noise.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/115-ay-low-noise.asm</a></td></tr>
<tr><td>116</td><td>116-ay-envelope.asm</td><td>použití obálky založené na trojúhelníkovém signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/116-ay-envelope.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/116-ay-envelope.asm</a></td></tr>
<tr><td>117</td><td>117-ay-envelope.asm</td><td>použití obálky založené na trojúhelníkovém signálu s&nbsp;vysokou frekvencí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/117-ay-envelope.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/117-ay-envelope.asm</a></td></tr>
<tr><td>118</td><td>118-ay-envelope.asm</td><td>použití obálky založené na trojúhelníkovém signálu s&nbsp;nízkou frekvencí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/118-ay-envelope.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/118-ay-envelope.asm</a></td></tr>
<tr><td>119</td><td>119-noise-envelope.asm</td><td>použití obálky společně se šumem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/119-noise-envelope.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/119-noise-envelope.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>120</td><td>120-8x8-sprite.asm</td><td>vykreslení spritu o velikosti 8&times;8 pixelů na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/120-8x8-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/120-8x8-sprite.asm</a></td></tr>
<tr><td>121</td><td>121-24x24-sprite.asm</td><td>vykreslení spritu o velikosti 24&times;24 pixelů na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/121-24x24-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/121-24x24-sprite.asm</a></td></tr>
<tr><td>122</td><td>122-24x24-sprite.asm</td><td>načtení spritu o velikosti 24&times;24 pixelů z&nbsp;include souboru a jeho vykreslení na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/122-24x24-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/122-24x24-sprite.asm</a></td></tr>
<tr><td>123</td><td>123-24x24-sprite.asm</td><td>načtení spritu o velikosti 24&times;24 pixelů z&nbsp;binárního souboru a jeho vykreslení na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/123-24x24-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/123-24x24-sprite.asm</a></td></tr>
<tr><td>124</td><td>124-shifted-sprite.asm</td><td>načtení spritů posunutých o 0 až 7 pixelů z&nbsp;binárních souborů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/124-shifted-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/124-shifted-sprite.asm</a></td></tr>
<tr><td>125</td><td>125-shifted-sprite.asm</td><td>načtení spritů posunutých o 0 až 7 pixelů z&nbsp;include souborů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/125-shifted-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/125-shifted-sprite.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>126</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech demonstračních příkladů do podoby obrazu magnetické pásky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>The system variables<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html</a>
</li>

<li>ZX Spectrum manual: chapter #17 Graphics<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Plovoucí řádová čárka na ZX Spectru<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>1A1B: THE 'REPORT AND LINE NUMBER PRINTING' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/1A1B.html">https://skoolkid.github.io/rom/asm/1A1B.html</a>
</li>

<li>2DE3: THE 'PRINT A FLOATING-POINT NUMBER' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/2DE3.html">https://skoolkid.github.io/rom/asm/2DE3.html</a>
</li>

<li>5C63: STKBOT - Address of bottom of calculator stack<br />
<a href="https://skoolkid.github.io/rom/asm/5C63.html">https://skoolkid.github.io/rom/asm/5C63.html</a>
</li>

<li>5C65: STKEND - Address of start of spare space<br />
<a href="https://skoolkid.github.io/rom/asm/5C65.html">https://skoolkid.github.io/rom/asm/5C65.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Chapter 24: The memory<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap24.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap24.html</a>
</li>

<li>Survey of Floating-Point Formats  <br />
<a href="https://mrob.com/pub/math/floatformats.html">https://mrob.com/pub/math/floatformats.html</a>
</li>

<li>Convert an 8bit number to hex in z80 assembler<br />
<a href="https://stackoverflow.com/questions/22838444/convert-an-8bit-number-to-hex-in-z80-assembler">https://stackoverflow.com/questions/22838444/convert-an-8bit-number-to-hex-in-z80-assembler</a>
</li>

<li>80 MICROPROCESSOR Instruction Set Summary<br />
<a href="http://www.textfiles.com/programming/CARDS/z80">http://www.textfiles.com/programming/CARDS/z80</a>
</li>

<li>Extended Binary Coded Decimal Interchange Code<br />
<a href="http://en.wikipedia.org/wiki/EBCDIC">http://en.wikipedia.org/wiki/EBCDIC</a>
</li>

<li>ASCII/EBCDIC Conversion Table<br />
<a href="http://docs.hp.com/en/32212-90008/apcs01.html">http://docs.hp.com/en/32212-90008/apcs01.html</a>
</li>

<li>EBCDIC<br />
<a href="http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php">http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php</a>
</li>

<li>EBCDIC tables<br />
<a href="http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm">http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm</a>
</li>

<li>The Mainframe Blog<br />
<a href="http://mainframe.typepad.com/blog/2006/11/my_personal_mai.html">http://mainframe.typepad.com/blog/2006/11/my_personal_mai.html</a>
</li>

<li>Binary-coded decimal<br />
<a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">https://en.wikipedia.org/wiki/Binary-coded_decimal</a>
</li>

<li>BCD<br />
<a href="https://cs.wikipedia.org/wiki/BCD">https://cs.wikipedia.org/wiki/BCD</a>
</li>

<li>Z80 heaven: Floating Point<br />
<a href="http://z80-heaven.wikidot.com/floating-point">http://z80-heaven.wikidot.com/floating-point</a>
</li>

<li>Z80, the 8-bit Number Cruncher<br />
<a href="http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html">http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html</a>
</li>

<li>Floating-point library for Z80<br />
<a href="https://github.com/DW0RKiN/Floating-point-Library-for-Z80">https://github.com/DW0RKiN/Floating-point-Library-for-Z80</a>
</li>

<li>z80float<br />
<a href="https://github.com/Zeda/z80float">https://github.com/Zeda/z80float</a>
</li>

<li>Fixed point arithmetic<br />
<a href="https://www.root.cz/clanky/fixed-point-arithmetic/">https://www.root.cz/clanky/fixed-point-arithmetic/</a>
</li>

<li>ZX Spectrum BASIC Programming - 2nd Edition<br />
<a href="https://archive.org/details/zx-spectrum-basic-programming/page/n167/mode/2up">https://archive.org/details/zx-spectrum-basic-programming/page/n167/mode/2up</a>
</li>

<li>ZX Spectrum BASIC Programming - 2nd Edition<br />
<a href="https://archive.org/details/zx-spectrum-basic-programming/page/n169/mode/2up">https://archive.org/details/zx-spectrum-basic-programming/page/n169/mode/2up</a>
</li>

<li>How fast is memcpy on the Z80?<br />
<a href="https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80">https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80</a>
</li>

<li>How do Z80 Block Transfer instructions work?<br />
<a href="https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work">https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work</a>
</li>

<li>Retro Programming Made Simple: Keyboard<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/keyboard">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/keyboard</a>
</li>

<li>How ZX Spectrum avoided key ghosting<br />
<a href="https://retrocomputing.stackexchange.com/questions/16235/how-zx-spectrum-avoided-key-ghosting">https://retrocomputing.stackexchange.com/questions/16235/how-zx-spectrum-avoided-key-ghosting</a>
</li>

<li>ZX Spectrum Keyboard Visualized<br />
<a href="http://www.kameli.net/marq/?p=2055">http://www.kameli.net/marq/?p=2055</a>
</li>

<li>Sinclair ZX Spectrum Joysticks Explained<br />
<a href="https://www.retroisle.com/general/spectrum_joysticks.php">https://www.retroisle.com/general/spectrum_joysticks.php</a>
</li>

<li>When A Single Bit Was Enough, Into The Sound Of The ZX Spectrum<br />
<a href="https://hackaday.com/2022/01/20/when-a-single-bit-was-enough-into-the-sound-of-the-zx-spectrum/">https://hackaday.com/2022/01/20/when-a-single-bit-was-enough-into-the-sound-of-the-zx-spectrum/</a>
</li>

<li>03B5: THE 'BEEPER' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/03B5.html">https://skoolkid.github.io/rom/asm/03B5.html</a>
</li>

<li>How To Write ZX Spectrum Games – Chapter 3<br />
<a href="https://chuntey.wordpress.com/2013/02/28/how-to-write-zx-spectrum-games-chapter-3/">https://chuntey.wordpress.com/2013/02/28/how-to-write-zx-spectrum-games-chapter-3/</a>
</li>

<li>Understanding computer sound<br />
<a href="https://www.youtube.com/playlist?list=PL0qES-IQZC8w4vqeQhxHxKgxYYqs3CEOx">https://www.youtube.com/playlist?list=PL0qES-IQZC8w4vqeQhxHxKgxYYqs3CEOx</a>
</li>

<li>Understanding Computer Sound. 5. ZX Spectrum<br />
<a href="https://www.youtube.com/watch?v=N5ACJd2LvbY">https://www.youtube.com/watch?v=N5ACJd2LvbY</a>
</li>

<li>Dark Fusion (Gremlin Graphics, 1988)<br />
<a href="https://www.youtube.com/watch?v=ADL3mdRMzoA">https://www.youtube.com/watch?v=ADL3mdRMzoA</a>
</li>

<li>Arkanoid Spectrum Title Music<br />
<a href="https://www.youtube.com/watch?v=TymO0Lj7Vp8">https://www.youtube.com/watch?v=TymO0Lj7Vp8</a>
</li>

<li>Tim Follin - "Chronos" (ZX Spectrum) [Oscilloscope Visualization]<br />
<a href="https://www.youtube.com/watch?v=yJy45MHrPjc">https://www.youtube.com/watch?v=yJy45MHrPjc</a>
</li>

<li>[60 FPS] Wally Beben - "Sanxion Loader" [ZX Spectrum (Beeper)] (Oscilloscope View)<br />
<a href="https://www.youtube.com/watch?v=JwMxOfQVl7A">https://www.youtube.com/watch?v=JwMxOfQVl7A</a>
</li>

<li>Understanding Computer Sound<br />
<a href="http://forgottencomputer.com/retro/sound/">http://forgottencomputer.com/retro/sound/</a>
</li>

<li>AY-3-8912<br />
<a href="https://sinclair.wiki.zxnet.co.uk/wiki/AY-3-8912">https://sinclair.wiki.zxnet.co.uk/wiki/AY-3-8912</a>
</li>

<li>AY-3-8912<br />
<a href="https://github.com/topics/ay-3-8912">https://github.com/topics/ay-3-8912</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php?noui=1">https://www.chibiakumas.com/z80/ZXSpectrum.php?noui=1</a>
</li>

<li>AY-3-8910<br />
<a href="http://vgmpf.com/Wiki/index.php/AY-3-8910">http://vgmpf.com/Wiki/index.php/AY-3-8910</a>
</li>

<li>AY-3-8910/8912 Programmable sound generator data manual<br />
<a href="https://f.rdw.se/AY-3-8910-datasheet.pdf">https://f.rdw.se/AY-3-8910-datasheet.pdf</a>
</li>

<li>Sprite (computer graphics)<br />
<a href="https://en.wikipedia.org/wiki/Sprite_(computer_graphics)">https://en.wikipedia.org/wiki/Sprite_(computer_graphics)</a>
</li>

<li>Piskel is a free online editor for animated sprites &amp; pixel art<br />
<a href="https://www.piskelapp.com/">https://www.piskelapp.com/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

