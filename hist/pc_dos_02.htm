<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vývoj her a grafických dem pro oslavovanou i nenáviděnou platformu PC (vražedná kombinace 8088 a CGA)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vývoj her a grafických dem pro oslavovanou i nenáviděnou platformu PC (vražedná kombinace 8088 a CGA)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Vývoj grafických dem a her pro některé platformy (Atari ST, Amiga) může být zábavný, protože vývojář většinou měl pocit, že je HW navržený &bdquo;příčetně&ldquo;. Ovšem v IBM PC, kde se kombinuje čip Intel 8088 s grafickou kartou CGA, je opačným případem.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Vývoj her a grafických dem pro oslavovanou i nenáviděnou platformu PC (vražedná kombinace 8088 a CGA)</a></p>
<p><a href="#k02">2. Role maker v&nbsp;assemblerech: makroassemblery</a></p>
<p><a href="#k03">3. Realizace jednotlivých částí programu s&nbsp;využitím maker</a></p>
<p><a href="#k04">4. Výsledná &bdquo;funkce main&ldquo; i celý zdrojový kód programu</a></p>
<p><a href="#k05">5. Programátorský model mikroprocesoru Intel 8086</a></p>
<p><a href="#k06">6. Instrukční sada 8086</a></p>
<p><a href="#k07">7. Grafická karta MDA &ndash; Monochrome Display Adapter</a></p>
<p><a href="#k08">8. Standardní textový režim karty MDA</a></p>
<p><a href="#k09">9. Grafická karta CGA &ndash; Color Graphics Adapter</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vývoj her a grafických dem pro oslavovanou i nenáviděnou platformu PC (vražedná kombinace 8088 a CGA)</h2>

<p>Při vývoji aplikací pro originální IBM PC museli programátoři překonávat
různé překážky, i když se na druhou stranu jednalo o dosti minimalisticky
pojatou platformu, v&nbsp;níž byl každý použitý čip dobře zdokumentovaný (dnes
sice máme k&nbsp;dispozici mnohem pokročilejší nástroje, zato ani zdaleka ne
takovou hlubokou znalost používaných technologií). V&nbsp;případě IBM PC byl
první překážkou samotný mikroprocesor Intel 8088 (8086), což byl čip
s&nbsp;instrukční sadou CISC, v&nbsp;níž měl každý z&nbsp;pracovních registrů
jak univerzální funkci, tak i nějaký speciální význam. I kódování instrukcí
bylo typicky CISCové, takže například operace s&nbsp;registrem AX/AL byly
zakódovány kratší sekvencí bajtů, než stejná instrukce s&nbsp;registrem BX/BL.
Navíc bylo nutné řešit problém <i>segmentace</i> paměti, k&nbsp;němuž se
pochopitelně ještě vrátíme.</p>

<p>A problematický byl (vlastně již od začátku) taktéž video subsystém IBM PC,
protože k&nbsp;dispozici byly hned dvě vzájemně nekompatibilní video karty
&ndash; <i>MDA</i> (pro textový výstup s&nbsp;rozumným rozlišením, ovšem zcela
postrádající bitmapové režimy) a <i>CGA</i> (pro grafický výstup, ovšem
s&nbsp;menším rozlišením a &bdquo;divnou&ldquo; barvovou paletou, která je pro
CGA zcela typická a nezaměnitelná). A aby toho nebylo málo, tak rok po vydání
IBM PC, tedy konkrétně v&nbsp;roce 1982, začala být prodávána grafická karta
<i>Hercules</i>, která nabízela grafický režim s&nbsp;vysokým rozlišením (na
dobu vzniku), ale nebyla s&nbsp;CGA kompatibilní a navíc ho firma IBM
v&nbsp;BIOSech ostentativně ignorovala. K&nbsp;této problematice se samozřejmě
ještě vrátíme.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Role maker v&nbsp;assemblerech: makroassemblery</h2>

<p>Překážkou či určitou komplikací při vývoji mohl být i samotný assembler. Zde
ovšem máme k&nbsp;dispozici minimálně dvě techniky umožňující tvorbu
rozsáhlejších aplikací. První technikou je tvorba procedur (nebo, chcete-li,
funkcí), druhou technikou pak podpora maker. A právě s&nbsp;makry, konkrétně
s&nbsp;makry realizovanými v&nbsp;assembleru <i>NASM</i>, se ve stručnosti
seznámíme v&nbsp;dalším textu.</p>

<p>Nástroje typu &bdquo;assembler&ldquo; je možné podle principu jejich práce
rozdělit do několika kategorií. Do první kategorie spadají assemblery
<i>interaktivní</i>, které uživateli nabízejí poměrně komfortní vývojové
prostředí, v&nbsp;němž je v&nbsp;případě potřeby možné zapisovat jednotlivé
instrukce, spouštět programy, krokovat je, vypisovat obsahy pracovních registrů
mikroprocesoru, prohlížet si obsah operační paměti, zásobníku atd. Velkou
výhodou byla nezávislost těchto assemblerů na rychlém externím paměťovém médiu,
proto jsme se s&nbsp;nimi mohli setkat například na osmibitových domácích
mikropočítačích či dnes na různých zařízeních typu IoT (i když zde úlohu
pouhého interaktivního assembleru mnohdy přebírá interaktivní debugger).</p>

<p>Druhý typ assemblerů je široce používán dodnes &ndash; jedná se vlastně o
běžné překladače, kterým se na vstupu předloží zdrojový kód a po překladu se
výsledný nativní kód taktéž uloží na paměťové médium (odkud ho lze přímo
spustit, což se dělo například v&nbsp;operačním systému DOS, popř.&nbsp;ho
ještě před spuštěním slinkovat, což je případ Linuxu a dalších moderních
operačních systémů).</p>

<p>Assemblery spadající do druhé kategorie jsou mnohdy vybaveny více či méně
sofistikovaným systémem maker; odtud ostatně pochází i jejich často používané
označení <i>macroassembler</i>. Makra, která se většinou aplikují na zdrojový
kód v&nbsp;první fázi překladu, je možné použít pro různé činnosti, ať již se
jedná o zjednodušení zápisu kódu či o jeho zkrácení a zpřehlednění. Existují
například sady poměrně složitých maker, která do assembleru přidávají některé
konstrukce známé z&nbsp;vyšších programovacích jazyků &ndash; rozvětvení,
programové smyčky, deklaraci objektů atd. <i>Netwide assembler</i>, podobně
jako prakticky všechny další moderní assemblery, práci s&nbsp;makry podporují,
i když se způsob zápisu maker i jejich základní vlastnosti od sebe
odlišují.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Realizace jednotlivých částí programu s&nbsp;využitím maker</h2>

<p>Pokusme se nyní přepsat náš program typu &bdquo;Hello, world!&ldquo; do
podoby, v&nbsp;níž se využijí makra. Původní program, který na obrazovku vypsal
zprávu a následně čekal na stisk klávesy, vypadal následovně:</p>

<pre>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
start:
        <i>; tisk retezce na obrazovku</i>
        mov     dx, message
        mov     ah, 9
        int     0x21
&nbsp;
        <i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
        xor     ax, ax
        int     0x16
&nbsp;
        <i>; ukonceni procesu a navrat do DOSu</i>
        mov     ah, 0x4c
        int     0x21
&nbsp;
        <i>; retezec ukonceny znakem $</i>
message db "Hello, world!", 0x0d, 0x0a, "$"
</pre>

<p>Tři části programu přepíšeme do podoby maker. Začneme druhou částí, kterou
lze přepsat do makra bez parametrů:</p>

<pre>
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
</pre>

<p><div class="rs-tip-major">Poznámka: hodnota 0 za jménem makra určuje počet
parametrů.</div></p>

<p>Stejným způsobem vytvoříme makro pro poslední části s&nbsp;voláním funkcí
DOSu pro ukončení procesu:</p>

<pre>
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
</pre>

<p>Makro pro tisk zprávy na obrazovku je složitější, neboť vyžaduje jeden
parametr &ndash; adresu zprávy, která se má vypsat. Samotný parametr je
v&nbsp;těle makra reprezentován symbolem <strong>%1</strong>:</p>

<pre>
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výsledná &bdquo;funkce main&ldquo; i celý zdrojový kód programu</h2>

<p>Celá hlavní část programu se díky použití maker zmenšila na pouhou expanzi
tří maker, z&nbsp;nichž první makro akceptuje parametr &ndash; adresu zprávy,
která se má vypsat. Další dvě makra žádné parametry nemají:</p>

<pre>
<strong>start</strong>:
        print message
        wait_key
        exit
</pre>

<p>Takto vypadá celý zdrojový kód programu typu &bdquo;Hello, world&ldquo; po
přepisu do podoby založené na použití maker:</p>

<pre>
<i>; Program typu "Hello, world!" urceny pro DOS a prelozitelny assemblerem NASM</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o hello.com hello_macros.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o hello.com hello_macros.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        print message
        wait_key
        exit
&nbsp;
        <i>; retezec ukonceny znakem $</i>
message db "Hello, world!", 0x0d, 0x0a, "$"
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Programátorský model mikroprocesoru Intel 8086</h2>

<p>Programátorský model mikroprocesoru Intel 8086 do určité míry vychází
z&nbsp;jeho předchůdců, tedy z&nbsp;čipů 8080 a 8085. Došlo ovšem
k&nbsp;rozšíření sady registrů, k&nbsp;určité unifikaci jejich role (což
zjednodušilo instrukční sadu) a k&nbsp;rozšíření pracovních registrů na šířku
šestnácti bitů. Navíc se rozšířily adresovací režimy a při adresování se kromě
základní 16bitové adresy počítá i adresa segmentu získaná z&nbsp;registrů CS,
DS, ES či SS. Oproti 8080 je zde tedy výrazný skok vpřed, ovšem
v&nbsp;porovnání s&nbsp;dalšími mikroprocesory této éry patří 8086 spíše mezi
jednodušší mikroprocesory (což ovšem nemusí být vždy špatně).</p>

<p>Pracovat je možné s&nbsp;těmito čtrnácti registry:</p>

<table>
<tr><th>#</th><th>Typ registrů</th><th>Počet registrů</th><th>Bitová šířka registru</th><th>Názvy registrů</th></tr>
<tr><td>1</td><td>Univerzální registry</td><td>4</td><td>16 bitů</td><td>AX, BX, CX, DX</td></tr>
<tr><td>2</td><td>Indexové registry   </td><td>2</td><td>16 bitů</td><td>SI, DI</td></tr>
<tr><td>3</td><td>Bázové registry     </td><td>2</td><td>16 bitů</td><td>BP, SP</td></tr>
<tr><td>4</td><td>Segmentové registry </td><td>4</td><td>16 bitů</td><td>CS, DS, ES, SS</td></tr>
<tr><td>5</td><td>Příznakový registr  </td><td>1</td><td>16 bitů</td><td>FLAGS</td></tr>
<tr><td>6</td><td>Programový čítač    </td><td>1</td><td>16 bitů</td><td>IP</td></tr>
</table>

<p>První čtyři registry jsou sice nazvány <i>univerzální</i>, ovšem jejich role
není zcela zaměnitelná. Každý z&nbsp;těchto registrů má totiž kromě své
základní role ještě další roli/role a vystupuje jako implicitní operand u mnoha
instrukcí (instrukční sada není v&nbsp;žádném případě ortogonální, naopak se
jedná o snad nejméně ortogonální sadu v&nbsp;oblasti 16bitových čipů):</p>

<table>
<tr><th>Registr</th><th>Rozdělení</th><th>Význam</th></tr>
<tr><td>AX</td><td>AH/AL</td><td>akumulátor</td></tr>
<tr><td>BX</td><td>BH/BL</td><td>bázová adresa</td></tr>
<tr><td>CX</td><td>CH/CL</td><td>čítač (counter)</td></tr>
<tr><td>DX</td><td>DH/DL</td><td>data, rozšíření akumulátoru</td></tr>
</table>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instrukční sada 8086</h2>

<p>Dnešní čipy řady x86 a x86-64 obsahují stovky instrukcí, ovšem původní čip
8086 podporoval cca 120 instrukcí, které jsou vypsány v&nbsp;následující
tabulce:</p>

<pre>
AAA      CMPSB     JA        JNC     LAHF      MUL      REP     SCASB
AAD      CMPSW     JAE       JNE     LDS       NEG      REPE    SCASW
AAM      CWD       JB        JNG     LEA       NOP      REPNE   SHL
AAS      DAA       JBE       JNGE    LES       NOT      REPNZ   SHR
ADC      DAS       JC        JNL     LODSB     OR       REPZ    STC
ADD      DEC       JCXZ      JNLE    LODSW     OUT      RET     STD
AND      DIV       JE        JNO     LOOP      POP      RETF    STI
CALL     HLT       JG        JNP     LOOPE     POPA     ROL     STOSB
CBW      IDIV      JGE       JNS     LOOPNE    POPF     ROR     STOSW
CLC      IMUL      JL        JNZ     LOOPNZ    PUSH     SAHF    SUB
CLD      IN        JLE       JO      LOOPZ     PUSHA    SAL     TEST
CLI      INC       JMP       JP      MOV       PUSHF    SAR     XCHG
CMC      INT       JNA       JPE     MOVSB     RCL      SBB     XLATB
CMP      INTO      JNAE      JPO     MOVSW     RCR              XOR
         IRET      JNB       JS
                   JNBE      JZ
</pre>

<p><div class="rs-tip-major">Poznámka: s&nbsp;mnoha těmito instrukcemi se
setkáme v&nbsp;následujícím textu, ovšem některé z&nbsp;nich jsou pro většinu
operací příliš obskurní a tak je vynecháme (například <strong>AAA</strong>,
<strong>AAM</strong>, ...). A některé jiné instrukce jsou velmi pomalé, takže
se vyplatí je nahradit sekvencí instrukcí jiných (<strong>MUL</strong>,
<strong>DIV</strong>).</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Grafická karta MDA &ndash; Monochrome Display Adapter</h2>

<p>Jak jsme si již řekli <a
href="https://www.root.cz/clanky/vyvoj-her-a-grafickych-dem-pro-oslavovanou-i-nenavidenou-platformu-pc-prvni-kroky/">v&nbsp;úvodním
článku</a>, nabízela společnost IBM do svých prvních osobních počítačů (IBM) PC
buď grafickou kartu <i>MDA</i> (<i>Monochrome Display Adapter</i>), nebo
grafickou kartu <i>CGA</i> (<i>Color Graphics Adapter</i>). Dokonce bylo možné,
aby byly v&nbsp;jednom počítači současně nainstalovány obě zmíněné karty,
protože ani adresy jejich řídicích registrů &ndash; portů, ani adresní rozsah
video paměti, se nepřekrývaly &ndash; což ovšem byla v&nbsp;tehdejší době
konfigurace z&nbsp;říše snů vyžadující dva odlišné monitory. Počátek výroby
obou zmíněných typů karet se datuje do roku 1981, na což je důležité myslet
především při snaze o porovnání s&nbsp;počítači, které vyšly v&nbsp;roce 1984 a
1985: Atari ST, Amiga a Macintosh a které tedy musely nabídnout mnohem lepší
grafické možnosti (je ostatně typické, že jen IBM PC mělo skutečný textový
režim).</p>

<a href="http://i.iinfo.cz/images/559/pc83-3.jpg"><img src="http://i.iinfo.cz/images/559/pc83-3-prev.jpg" alt="pc83" height="185" width="370" /></a>
<p><i>Obrázek X: Grafická karta MDA s&nbsp;čipem MC6845.</i></p>

<p>Grafická karta <i>MDA</i> se od prakticky všech dalších grafických adaptérů
vyráběných pro počítače IBM PC odlišovala především v&nbsp;tom, že
<strong>ne</strong>umožňovala vykreslování rastrové grafiky (označení termínem
&bdquo;grafická karta&ldquo; je tedy poněkud nepřesné nebo minimálně
zavádějící), jelikož podporovala pouze textový režim 80&times;25 znaků, který
je používán například při startu počítače či v&nbsp;operačním systému MS-DOS.
Teoreticky by však mělo být možné pracovat s&nbsp;graficko-textovou :-) kartou
<i>MDA</i> i pod systémy Linux či Open/Free BSD, například pro řízení
zobrazování na druhém monitoru u starších systémů vybavených sběrnicí ISA
(v&nbsp;moderních PC se pro zobrazení na více monitorech využívá poněkud
odlišná technologie, takže se dnes již jedná jen o teorii). V&nbsp;minulosti se
&ndash; zejména právě v&nbsp;dobách kralování DOSu &ndash; pro tuto činnost
nejčastěji používaly výprodejové karty typu <i>Hercules</i>, protože i ty byly
navrženy takovým způsobem, aby jejich řídicí porty ani adresy video paměti
nekolidovaly s&nbsp;primární grafickou kartou.</p>

<a href="http://i.iinfo.cz/images/354/pc120-1.jpg"><img src="http://i.iinfo.cz/images/354/pc120-1-prev.jpg" width="360" height="270" alt=" " /></a>
<p><i>Obrázek X: Fotografie obrazovky počítače IBM PC se spuštěným
interpretrem BASICu, v&nbsp;němž je napsán velmi jednoduchý program.</i></p>

<p>Jednoznačnou (a kromě slušného rozlišení vlastně i jedinou) předností této
grafické karty je způsob namapování do adresního prostoru procesoru. Karta
totiž využívala segment začínající adresou <strong>b000:0000</strong> (používám
zde známé Intelovské šestnáctibitové adresování typu segment:offset), který
nebyl na dalších grafických kartách využit. Proto bylo možné tuto kartu
kombinovat s&nbsp;kartou jinou a vytvořit tak vícemonitorový systém, který
využívaly aplikace jako <strong>AutoCAD</strong> (grafická plocha a terminál
s&nbsp;příkazovým řádkem), <strong>Turbo Pascal</strong> (vývojové prostředí
zobrazené spolu s&nbsp;laděnou aplikací), <strong>Turbo C++</strong>,
<strong>Lotus 1-2-3</strong> apod. V&nbsp;praxi bylo možné použít například
kombinace grafických karet <i>CGA+MDA</i>, <i>EGA+MDA</i> a později i
<i>VGA+MDA</i>. Vzhledem k&nbsp;tomu, že firma IBM tuto kartu přestala po
několika letech vyrábět, převzal úlohu sekundární grafické karty její konkurent
<i>Hercules</i> (viz navazující článek), který kromě zobrazení textového režimu
podporoval i režim grafický.</p>

<a href="http://i.iinfo.cz/images/354/pc120-4.png"><img src="http://i.iinfo.cz/images/354/pc120-4-prev.png" width="370" height="231" alt=" " /></a>
<p><i>Obrázek X: Úvodní obrazovka GW-BASICu po jeho spuštění v&nbsp;emulátoru
PC (zde se konkrétně jedná o DOSBOX).</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Standardní textový režim karty MDA</h2>

<p>Při zobrazování znaků v&nbsp;textovém režimu <strong>80&times;25</strong>
znaků byl každý znak definovaný v&times;masce 9&times;14 pixelů, což znamená,
že rozlišení obrazovky bylo rovno 720&times;350 pixelům (samozřejmě ovšem
nebylo možné pixely přímo adresovat). Poměrně velké horizontální rozlišení (a
tím i velmi dobře čitelný text) bylo dále použito až u grafických karet
<i>Hercules</i> a <i>VGA</i> o několik let později (grafické karty <i>CGA</i> a
<i>EGA</i> byly v&nbsp;tomto ohledu zklamáním, zejména pro uživatele pracující
převážně v&nbsp;textovém režimu). Znaková sada byla na grafické kartě uložena
v&nbsp;paměti ROM, což znamená, že se při požadavku na zobrazení textů
v&nbsp;jazycích s&nbsp;nabodeníčky (jedná se o prakticky všechny jazyky kromě
angličtiny) musela tato paměť vyměnit za EPROM (typ 2764 případně 27C64)
s&nbsp;vypálenou národní znakovou sadou (původní znaková sada dodávaná firmou
IBM odpovídá kódové stránce 437, tj.&nbsp;jedná se o &bdquo;rozšířenou&ldquo;
ASCII tabulku). Každý znak na obrazovce měl k&nbsp;dispozici i svůj atributový
byte, ve kterém bylo specifikováno, zda se má tento znak zobrazit normálně,
zvýrazněně (větší intenzita), s&nbsp;podtržením, inverzně či zda by měl blikat;
dokonce bylo možné nastavit i některé kombinace těchto atributů. Barevné
atributy znaků byly použity (i když s&nbsp;poněkud jiným významem) i u dalších
grafických karet na PC.</p>

<a href="http://i.iinfo.cz/images/192/gui10-10.png"><img src="http://i.iinfo.cz/images/192/gui10-10-prev.png" width="370" height="231" alt=" " /></a>
<p><i>Obrázek X: Tabulkový procesor VisiCalc spuštěný v&nbsp;DOSu
(resp.&nbsp;přesněji řečeno v&nbsp;jeho emulátoru). Jednalo se o jednu
z&nbsp;takzvaných &bdquo;killer application&ldquo; pro PC, která plně
podporovala i kartu MDA.</i></p>

<p>Kapacita video paměti (tedy vlastně &bdquo;textové&ldquo; paměti) na této
kartě byla rovna čtyřem kilobajtům, přičemž přesně 2000 bytů bylo zapotřebí pro
uložení všech 80&times;25 znaků a dalších 2000 bytů pro uložení jejich atributů
(z&nbsp;pohledu programátora se ukládala vždy dvojice znak-atribut,
tj.&nbsp;jednalo se o souvislou oblast paměti, i když fyzicky byly použity dva
oddělené paměťové čipy), zbylých 96 bytů bylo nevyužito. Zajímavé jsou
signálové poměry, kterými se musely řídit připojené monitory. Snímková
frekvence byla rovna 50&nbsp;Hz, řádková frekvence 18,432&nbsp;kHz
(tj.&nbsp;tato frekvence byla poněkud vyšší než u dále popisované grafické
karty <i>CGA</i>). Při prvním pohledu na údaj o snímkovém kmitočtu to může
vypadat tak, že 50&nbsp;Hz je pro práci na počítači naprosto nedostatečné,
musíme si však uvědomit, že se ponejvíce používalo tmavé pozadí, na kterém není
poblikávání obrazu tak patrné, jako na pozadí světlém či dokonce bílém.</p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-13.png" class="image-214393" width="640" height="400" alt="&#160;" />
<p><i>Obrázek X: Textový editor SpeedScript pro IBM PC (DOS).</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Grafická karta CGA &ndash; Color Graphics Adapter</h2>

<p>První dostupnou grafickou kartou s&nbsp;oficiální podporou zobrazování
rastrové grafiky na osobních počítačích typu IBM PC byla grafická karta
<i>CGA</i>, což je označení, které vzniklo z&nbsp;celého názvu <i>Color
Graphics Adapter</i>. Tato karta, jež byla jako druhý standard uvedena (spolu
s&nbsp;výše popsanou kartou <i>MDA</i>) v&nbsp;roce 1981, oficiálně podporuje
celkem dva grafické režimy a dva režimy textové. Kromě toho je však pro
televizní výstup použit třetí grafický režim a vhodnou manipulací
s&nbsp;řídicími registry lze vytvořit i další textové, grafické či smíšené
režimy (v&nbsp;nichž je modifikovaný textový režim použitý pro zobrazení
rastrového obrazu, pochopitelně se sníženým horizontálním i vertikálním
rozlišením.</p>

<img src="http://i.iinfo.cz/images/559/pc83-4.png" alt="pc83" height="200" width="320" />
<p><i>Obrázek X: Grafický režim 320&times;200 se čtyřmi barvami (známá hra
King's Quest). Jak je z&nbsp;tohoto obrázku patrné, je malý počet barev
kompenzován ditheringem, který ovšem při relativně malém rozlišení situaci snad
ještě více zhoršuje. Poněkud paradoxní je, že většina rozšířených osmibitových
počítačů dokáže &ndash; a to dokonce s&nbsp;poloviční velikostí obrazové paměti
&ndash; tento obrázek zobrazit mnohem lépe.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad pomocí assembleru <strong>NASM</strong>, byly uložen do Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>hello.asm</td><td>program typu &bdquo;Hello world&ldquo; naprogramovaný v&nbsp;assembleru pro systém DOS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm</a></td></tr>
<tr><td>2</td><td>hello_shorter.asm</td><td>kratší varianta výskoku z&nbsp;procesu zpět do DOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm</a></td></tr>
<tr><td>3</td><td>hello_wait.asm</td><td>čekání na stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm</a></td></tr>
<tr><td>4</td><td>hello_macros.asm</td><td>realizace jednotlivých částí programu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>gfx_4_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm</a></td></tr>
<tr><td>6</td><td>gfx_6_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm</a></td></tr>
<tr><td>7</td><td>gfx_4_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm</a></td></tr>
<tr><td>8</td><td>gfx_6_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>6845 - Motorola CRT Controller<br />
<a href="https://stanislavs.org/helppc/6845.html">https://stanislavs.org/helppc/6845.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>DOSBox<br />
<a href="https://www.dosbox.com/">https://www.dosbox.com/</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Hercules Graphics Card (HCG)<br />
<a href="https://en.wikipedia.org/wiki/Hercules_Graphics_Card">https://en.wikipedia.org/wiki/Hercules_Graphics_Card</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf">https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://yassinebridi.github.io/asm-docs/8086_instruction_set.html">https://yassinebridi.github.io/asm-docs/8086_instruction_set.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

