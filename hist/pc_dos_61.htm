<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Funkce vestavěné v GCC pro provádění nízkoúrovňových bitových operací a rotací</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Funkce vestavěné v GCC pro provádění nízkoúrovňových bitových operací a rotací</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Funkce vestavěné v&nbsp;GCC pro provádění nízkoúrovňových bitových operací a rotací</a></p>
<p><a href="#k02">*** 2. Bitová rotace doprava i doleva</a></p>
<p><a href="#k03">3. Způsob překladu operace rotace doleva do strojového kódu</a></p>
<p><a href="#k04">4. Překlad volání funkce <strong>__builtin_stdc_rotate_left</strong> pro platformu x86-64</a></p>
<p><a href="#k05">*** 5. Analýza vygenerovaného strojového kódu pro platformu x86-64</a></p>
<p><a href="#k06">6. Překlad volání funkce <strong>__builtin_stdc_rotate_left</strong> pro 32bitové ARMy</a></p>
<p><a href="#k07">*** 7. Analýza vygenerovaného strojového kódu pro platformu ARM32</a></p>
<p><a href="#k08">8. Překlad volání funkce <strong>__builtin_stdc_rotate_left</strong> pro 64bitové ARMy (AArch64)</a></p>
<p><a href="#k09">*** 9. Analýza vygenerovaného strojového kódu pro platformu AArch64</a></p>
<p><a href="#k10">*** 10. Rozdíl mezi operací rotace doleva a doprava</a></p>
<p><a href="#k11">*** 11. Překlad operace rotace doprava pro všechny analyzované platformy</a></p>
<p><a href="#k12">*** 12. Funkce pro výpočet parity v&nbsp;bajtu či vícebajtovém slovu</a></p>
<p><a href="#k13">*** 13. Volání vestavěných funkcí <strong>__builtin_parity</strong>, <strong>__builtin_parityl</strong> a <strong>__builtin_parityll</strong></a></p>
<p><a href="#k14">*** 14. Realizace výpočtu parity na platformě x86-64</a></p>
<p><a href="#k15">*** 15. Realizace výpočtu parity na platformě ARM32</a></p>
<p><a href="#k16">*** 16. Realizace výpočtu parity na platformě ARM64 (AArch64)</a></p>
<p><a href="#k17">*** 17. Výpočet parity a celočíselné datové typy se znaménkem</a></p>
<p><a href="#k18">*** 18. Další bitové operace podporované vestavěnými funkcemi GCC</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Funkce vestavěné v&nbsp;GCC pro provádění nízkoúrovňových bitových operací a rotací</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Bitová rotace doprava i doleva</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Způsob překladu operace rotace doleva do strojového kódu</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je volána vestavěná funkce
nazvaná <strong>__builtin_stdc_rotate_left</strong>, která je určena pro rotaci
svého prvního parametru doleva o takový počet bitů, který je uložen ve druhém
parametru.  První parametr musí být typu celé číslo bez znaménka
(<i>unsigned</i>), druhý parametr může být i typu celé číslo se znaménkem
(<i>signed</i>) i bez znaménka. Ovšem chování této funkce není definováno pro
záporné hodnoty druhého parametru!  V&nbsp;demonstračním příkladu postupně
provádíme rotaci bajtu, 16bitového slova, 32bitového slova i 64bitového
slova:</p>

<pre>
#include &lt;stdint.h&gt;
&nbsp;
uint8_t <strong>rotate_left_8bit</strong>(uint8_t x, uint8_t y) {
    uint8_t z;
    z = <u>__builtin_stdc_rotate_left(x, y)</u>;
    return z;
}
&nbsp;
uint16_t <strong>rotate_left_16bit</strong>(uint16_t x, uint16_t y) {
    uint16_t z;
    z = <u>__builtin_stdc_rotate_left(x, y)</u>;
    return z;
}
&nbsp;
uint32_t <strong>rotate_left_32bit</strong>(uint32_t x, uint32_t y) {
    uint32_t z;
    z = <u>__builtin_stdc_rotate_left(x, y)</u>;
    return z;
}
&nbsp;
uint64_t <strong>rotate_left_64bit</strong>(uint64_t x, uint64_t y) {
    uint64_t z;
    z = <u>__builtin_stdc_rotate_left(x, y)</u>;
    return z;
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Překlad volání funkce <strong>__builtin_stdc_rotate_left</strong> pro platformu x86-64</h2>

<p>Překlad <a href="#k03">výše uvedeného</a> příkladu pro platformu x86-64 bez
povolení optimalizací dopadne následovně (<a
href="https://godbolt.org/z/7cnnj63Yx">projekt v&nbsp;Compiler
Exploreru</a>):</p>

<pre>
<strong>rotate_left_8bit</strong>:
        push    rbp
        mov     rbp, rsp
        mov     edx, edi
        mov     eax, esi
        mov     BYTE PTR [rbp-20], dl
        mov     BYTE PTR [rbp-24], al
        movzx   edx, BYTE PTR [rbp-20]
        movzx   eax, BYTE PTR [rbp-24]
        movzx   eax, al
        and     eax, 7
        mov     ecx, eax
        rol     dl, cl
        mov     eax, edx
        mov     BYTE PTR [rbp-1], al
        movzx   eax, BYTE PTR [rbp-1]
        pop     rbp
        ret
&nbsp;
<strong>rotate_left_16bit</strong>:
        push    rbp
        mov     rbp, rsp
        mov     edx, edi
        mov     eax, esi
        mov     WORD PTR [rbp-20], dx
        mov     WORD PTR [rbp-24], ax
        movzx   edx, WORD PTR [rbp-20]
        movzx   eax, WORD PTR [rbp-24]
        movzx   eax, ax
        and     eax, 15
        mov     ecx, eax
        rol     dx, cl
        mov     eax, edx
        mov     WORD PTR [rbp-2], ax
        movzx   eax, WORD PTR [rbp-2]
        pop     rbp
        ret
&nbsp;
<strong>rotate_left_32bit</strong>:
        push    rbp
        mov     rbp, rsp
        mov     DWORD PTR [rbp-20], edi
        mov     DWORD PTR [rbp-24], esi
        mov     edx, DWORD PTR [rbp-20]
        mov     eax, DWORD PTR [rbp-24]
        and     eax, 31
        mov     ecx, eax
        rol     edx, cl
        mov     eax, edx
        mov     DWORD PTR [rbp-4], eax
        mov     eax, DWORD PTR [rbp-4]
        pop     rbp
        ret
&nbsp;
<strong>rotate_left_64bit</strong>:
        push    rbp
        mov     rbp, rsp
        mov     QWORD PTR [rbp-24], rdi
        mov     QWORD PTR [rbp-32], rsi
        mov     rdx, QWORD PTR [rbp-24]
        mov     rax, QWORD PTR [rbp-32]
        and     eax, 63
        mov     ecx, eax
        rol     rdx, cl
        mov     rax, rdx
        mov     QWORD PTR [rbp-8], rax
        mov     rax, QWORD PTR [rbp-8]
        pop     rbp
        ret
</pre>

<p>Naopak, pokud při překladu povolíme plné optimalizace, dosáhneme <a
href="https://godbolt.org/z/aYc34feqd">následujícího výsledku</a>, který je již
velmi dobře čitelný a pochopitelný:</p>

<pre>
<strong>rotate_left_8bit</strong>:
        mov     eax, edi
        mov     ecx, esi
        rol     al, cl
        ret
&nbsp;
<strong>rotate_left_16bit</strong>:
        mov     eax, edi
        mov     ecx, esi
        rol     ax, cl
        ret
&nbsp;
<strong>rotate_left_32bit</strong>:
        mov     eax, edi
        mov     ecx, esi
        rol     eax, cl
        ret
&nbsp;
<strong>rotate_left_64bit</strong>:
        mov     rax, rdi
        mov     ecx, esi
        rol     rax, cl
        ret
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Analýza vygenerovaného strojového kódu pro platformu x86-64</h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. Překlad volání funkce <strong>__builtin_stdc_rotate_left</strong> pro 32bitové ARMy</h2>

<p>Nyní se podívejme na způsob překladu stejného céčkovského zdrojového kódu se
stejnou funkcí <strong>__builtin_stdc_rotate_left</strong> (<a
href="#k03">třetí kapitola</a>), nyní ovšem pro 32bitovou architekturu ARM
(minimálně ARMv7, což je dnes již naprostý standard). Při povolení optimalizací
<a href="https://godbolt.org/z/6oGW1vaWo">bude výsledek vypadat takto</a>:</p>

<pre>
<strong>rotate_left_8bit</strong>:
        and     r1, r1, #7
        rsb     r3, r1, #0
        and     r3, r3, #7
        lsr     r3, r0, r3
        orr     r0, r3, r0, lsl r1
        and     r0, r0, #255
        bx      lr
&nbsp;
<strong>rotate_left_16bit</strong>:
        and     r1, r1, #15
        rsb     r3, r1, #0
        and     r3, r3, #15
        lsr     r3, r0, r3
        orr     r0, r3, r0, lsl r1
        lsl     r0, r0, #16
        lsr     r0, r0, #16
        bx      lr
&nbsp;
<strong>rotate_left_32bit</strong>:
        and     r1, r1, #31
        rsb     r1, r1, #32
        ror     r0, r0, r1
        bx      lr
&nbsp;
<strong>rotate_left_64bit</strong>:
        push    {r4, lr}
        mov     lr, r1
        and     r2, r2, #63
        sub     r4, r2, #32
        rsb     r3, r2, #0
        lsl     r1, r1, r2
        and     r3, r3, #63
        orr     r1, r1, r0, lsl r4
        rsb     ip, r2, #32
        orr     r1, r1, r0, lsr ip
        rsb     r4, r3, #32
        lsr     ip, r0, r3
        orr     r1, r1, lr, lsr r3
        orr     ip, ip, lr, lsl r4
        sub     r3, r3, #32
        orr     ip, ip, lr, lsr r3
        orr     r0, ip, r0, lsl r2
        pop     {r4, lr}
        bx      lr
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Analýza vygenerovaného strojového kódu pro platformu ARM32</h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Překlad volání funkce <strong>__builtin_stdc_rotate_left</strong> pro 64bitové ARMy (AArch64)</h2>

<p>Pro mikroprocesory a mikrořadiče s&nbsp;architekturou AArch64 je překlad
proveden zcela odlišným způsobem, než je tomu u 32bitových ARMů. Je to ostatně
patrné i při pohledu na výsledek překladu, který bude (v&nbsp;případě povolení
optimalizací) <a href="https://godbolt.org/z/bfxh93YnG">vypadat
následovně</a>:</p>

<pre>
<strong>rotate_left_8bit</strong>:
        and     w1, w1, 7
        and     w0, w0, 255
        neg     w2, w1
        and     w2, w2, 7
        lsl     w1, w0, w1
        lsr     w0, w0, w2
        orr     w0, w1, w0
        ret
&nbsp;
<strong>rotate_left_16bit</strong>:
        and     w1, w1, 15
        and     w0, w0, 65535
        neg     w2, w1
        and     w2, w2, 15
        lsl     w1, w0, w1
        lsr     w0, w0, w2
        orr     w0, w1, w0
        ret
&nbsp;
<strong>rotate_left_32bit</strong>:
        neg     w1, w1
        ror     w0, w0, w1
        ret
&nbsp;
<strong>rotate_left_64bit</strong>:
        neg     w1, w1
        ror     x0, x0, x1
        ret
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Analýza vygenerovaného strojového kódu pro platformu AArch64</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rozdíl mezi operací rotace doleva a doprava</h2>

<p></p>

<pre>
#include &lt;stdint.h&gt;
&nbsp;
uint8_t <strong>rotate_right_8bit</strong>(uint8_t x, uint8_t y) {
    uint8_t z;
    z = <u>__builtin_stdc_rotate_right</u>(x, y);
    return z;
}
&nbsp;
uint16_t <strong>rotate_right_16bit</strong>(uint16_t x, uint16_t y) {
    uint16_t z;
    z = <u>__builtin_stdc_rotate_right</u>(x, y);
    return z;
}
&nbsp;
uint32_t <strong>rotate_right_32bit</strong>(uint32_t x, uint32_t y) {
    uint32_t z;
    z = <u>__builtin_stdc_rotate_right</u>(x, y);
    return z;
}
&nbsp;
uint64_t <strong>rotate_right_64bit</strong>(uint64_t x, uint64_t y) {
    uint64_t z;
    z = <u>__builtin_stdc_rotate_right</u>(x, y);
    return z;
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Překlad operace rotace doprava pro všechny analyzované platformy</h2>

<p></p>

<pre>
<strong>rotate_right_8bit</strong>:
        push    rbp
        mov     rbp, rsp
        mov     edx, edi
        mov     eax, esi
        mov     BYTE PTR [rbp-20], dl
        mov     BYTE PTR [rbp-24], al
        movzx   edx, BYTE PTR [rbp-20]
        movzx   eax, BYTE PTR [rbp-24]
        movzx   eax, al
        and     eax, 7
        mov     ecx, eax
        ror     dl, cl
        mov     eax, edx
        mov     BYTE PTR [rbp-1], al
        movzx   eax, BYTE PTR [rbp-1]
        pop     rbp
        ret
&nbsp;
<strong>rotate_right_16bit</strong>:
        push    rbp
        mov     rbp, rsp
        mov     edx, edi
        mov     eax, esi
        mov     WORD PTR [rbp-20], dx
        mov     WORD PTR [rbp-24], ax
        movzx   edx, WORD PTR [rbp-20]
        movzx   eax, WORD PTR [rbp-24]
        movzx   eax, ax
        and     eax, 15
        mov     ecx, eax
        ror     dx, cl
        mov     eax, edx
        mov     WORD PTR [rbp-2], ax
        movzx   eax, WORD PTR [rbp-2]
        pop     rbp
        ret
&nbsp;
<strong>rotate_right_32bit</strong>:
        push    rbp
        mov     rbp, rsp
        mov     DWORD PTR [rbp-20], edi
        mov     DWORD PTR [rbp-24], esi
        mov     edx, DWORD PTR [rbp-20]
        mov     eax, DWORD PTR [rbp-24]
        and     eax, 31
        mov     ecx, eax
        ror     edx, cl
        mov     eax, edx
        mov     DWORD PTR [rbp-4], eax
        mov     eax, DWORD PTR [rbp-4]
        pop     rbp
        ret
&nbsp;
<strong>rotate_right_64bit</strong>:
        push    rbp
        mov     rbp, rsp
        mov     QWORD PTR [rbp-24], rdi
        mov     QWORD PTR [rbp-32], rsi
        mov     rdx, QWORD PTR [rbp-24]
        mov     rax, QWORD PTR [rbp-32]
        and     eax, 63
        mov     ecx, eax
        ror     rdx, cl
        mov     rax, rdx
        mov     QWORD PTR [rbp-8], rax
        mov     rax, QWORD PTR [rbp-8]
        pop     rbp
        ret
</pre>

<pre>
rotate_right_8bit:
        mov     eax, edi
        mov     ecx, esi
        ror     al, cl
        ret

rotate_right_16bit:
        mov     eax, edi
        mov     ecx, esi
        ror     ax, cl
        ret

rotate_right_32bit:
        mov     eax, edi
        mov     ecx, esi
        ror     eax, cl
        ret

rotate_right_64bit:
        mov     rax, rdi
        mov     ecx, esi
        ror     rax, cl
        ret
</pre>

<pre>
rotate_right_8bit:
        and     r1, r1, #7
        rsb     r3, r1, #0
        and     r3, r3, #7
        lsl     r3, r0, r3
        orr     r0, r3, r0, lsr r1
        and     r0, r0, #255
        bx      lr

rotate_right_16bit:
        and     r1, r1, #15
        rsb     r3, r1, #0
        and     r3, r3, #15
        lsl     r3, r0, r3
        orr     r0, r3, r0, lsr r1
        lsl     r0, r0, #16
        lsr     r0, r0, #16
        bx      lr

rotate_right_32bit:
        and     r1, r1, #31
        ror     r0, r0, r1
        bx      lr

rotate_right_64bit:
        push    {r4, lr}
        mov     lr, r0
        and     r2, r2, #63
        rsb     r4, r2, #32
        rsb     r3, r2, #0
        lsr     r0, r0, r2
        and     r3, r3, #63
        orr     r0, r0, r1, lsl r4
        sub     ip, r2, #32
        orr     r0, r0, r1, lsr ip
        sub     r4, r3, #32
        lsl     ip, r1, r3
        orr     r0, r0, lr, lsl r3
        orr     ip, ip, lr, lsl r4
        rsb     r3, r3, #32
        orr     ip, ip, lr, lsr r3
        orr     r1, ip, r1, lsr r2
        pop     {r4, lr}
        bx      lr
</pre>

<pre>
rotate_right_8bit:
        and     w1, w1, 7
        and     w0, w0, 255
        neg     w2, w1
        and     w2, w2, 7
        lsr     w1, w0, w1
        lsl     w0, w0, w2
        orr     w0, w1, w0
        ret

rotate_right_16bit:
        and     w1, w1, 15
        and     w0, w0, 65535
        neg     w2, w1
        and     w2, w2, 15
        lsr     w1, w0, w1
        lsl     w0, w0, w2
        orr     w0, w1, w0
        ret

rotate_right_32bit:
        ror     w0, w0, w1
        ret

rotate_right_64bit:
        ror     x0, x0, x1
        ret
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Funkce pro výpočet parity v&nbsp;bajtu či vícebajtovém slovu</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Volání vestavěných funkcí <strong>__builtin_parity</strong>, <strong>__builtin_parityl</strong> a <strong>__builtin_parityll</strong></h2>

<pre>
int parity_char(unsigned char x) {
    return __builtin_parity(x);
}

int parity_int(unsigned int x) {
    return __builtin_parity(x);
}

int parity_long(unsigned long x) {
    return __builtin_parityl(x);
}

int parity_long_long(unsigned long long x) {
    return __builtin_parityll(x);
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Realizace výpočtu parity na platformě x86-64</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Realizace výpočtu parity na platformě ARM32</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Realizace výpočtu parity na platformě ARM64 (AArch64)</h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Výpočet parity a celočíselné datové typy se znaménkem</h2>

<pre>
int parity_char(signed char x) {
    return __builtin_parity(x);
}

int parity_int(signed int x) {
    return __builtin_parity(x);
}

int parity_long(signed long x) {
    return __builtin_parityl(x);
}

int parity_long_long(signed long long x) {
    return __builtin_parityll(x);
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Další bitové operace podporované vestavěnými funkcemi GCC</h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyku C, které jsou určené pro překlad
s&nbsp;využitím překladače <strong>gcc</strong>, byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>rotate_left.c</td><td>volání vestavěné funkce v&nbsp;C (GCC) realizující rotaci doleva</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_left.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_left.c</a></td></tr>
<tr><td> 2</td><td>rotate_left_x86_00.asm</td><td>překlad volání funkce <strong>__builtin_stdc_rotate_left</strong> na platformě x86-64 bez aplikace optimalizací</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_left_x86_00.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_left_x86_00.asm</a></td></tr>
<tr><td> 3</td><td>rotate_left_x86_09.asm</td><td>překlad volání funkce <strong>__builtin_stdc_rotate_left</strong> na platformě x86-64 s&nbsp;aplikací optimalizací</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_left_x86_09.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_left_x86_09.asm</a></td></tr>
<tr><td> 4</td><td>rotate_left_arm32.asm</td><td>překlad volání funkce <strong>__builtin_stdc_rotate_left</strong> pro 32bitové ARMy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_left_arm32.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_left_arm32.asm</a></td></tr>
<tr><td> 5</td><td>rotate_left_arm64.asm</td><td>překlad volání funkce <strong>__builtin_stdc_rotate_left</strong> pro 64bitové ARMy (AArch64)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_left_arm64.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_left_arm64.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>rotate_right.c</td><td>volání vestavěné funkce v&nbsp;C (GCC) realizující rotaci doleva</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_right.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_right.c</a></td></tr>
<tr><td> 7</td><td>rotate_right_x86_00.asm</td><td>překlad volání funkce <strong>__builtin_stdc_rotate_right</strong> na platformě x86-64 bez aplikace optimalizací</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_right_x86_00.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_right_x86_00.asm</a></td></tr>
<tr><td> 8</td><td>rotate_right_x86_09.asm</td><td>překlad volání funkce <strong>__builtin_stdc_rotate_right</strong> na platformě x86-64 s&nbsp;aplikací optimalizací</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_right_x86_09.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_right_x86_09.asm</a></td></tr>
<tr><td> 9</td><td>rotate_right_arm32.asm</td><td>překlad volání funkce <strong>__builtin_stdc_rotate_right</strong> pro 32bitové ARMy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_right_arm32.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_right_arm32.asm</a></td></tr>
<tr><td>10</td><td>rotate_right_arm64.asm</td><td>překlad volání funkce <strong>__builtin_stdc_rotate_right</strong> pro 64bitové ARMy (AArch64)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_right_arm64.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rotate_right_arm64.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/</a></td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>

<p>Všechny demonstrační příklady z&nbsp;článku <a
href="https://www.root.cz/clanky/funkce-vestavene-v-gcc-pro-provadeni-nizkourovnovych-aritmetickych-operaci/">Funkce
vestavěné v&nbsp;GCC pro provádění nízkoúrovňových aritmetických operací</a>
jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>add_overflow.c</td><td>volání vestavěné funkce <strong>__builtin_add_overflow</strong> s&nbsp;předáním operandů různých typů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_overflow.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_overflow.c</a></td></tr>
<tr><td> 2</td><td>add_overflow_x86_64_O0.asm</td><td>překlad volání funkce <strong>__builtin_add_overflow</strong> na platformě x86-64 bez aplikace optimalizací</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_overflow_x86_64_O0.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_overflow_x86_64_O0.asm</a></td></tr>
<tr><td> 3</td><td>add_overflow_x86_64_Os.asm</td><td>překlad volání funkce <strong>__builtin_add_overflow</strong> na platformě x86-64 s&nbsp;aplikací optimalizací</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_overflow_x86_64_Os.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_overflow_x86_64_Os.asm</a></td></tr>
<tr><td> 4</td><td>add_overflow_arm_32.asm</td><td>překlad volání funkce <strong>__builtin_add_overflow</strong> pro 32bitové ARMy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_overflow_arm_32.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_overflow_arm_32.asm</a></td></tr>
<tr><td> 5</td><td>add_overflow_arm_64.asm</td><td>překlad volání funkce <strong>__builtin_add_overflow</strong> pro 64bitové ARMy (AArch64)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_overflow_arm_64.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_overflow_arm_64.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>add_diff_types.c</td><td>součet s&nbsp;využitím různých kombinací hodnot typu <strong>char</strong> a <strong>int</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_diff_types.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_diff_types.c</a></td></tr>
<tr><td> 7</td><td>add_diff_types_x86_64.asm</td><td>překlad volání funkce <strong>__builtin_add_overflow</strong> na platformě x86-64 s&nbsp;aplikací optimalizací</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_diff_types_x86_64.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_diff_types_x86_64.asm</a></td></tr>
<tr><td> 8</td><td>add_diff_types_arm32.asm</td><td>překlad volání funkce <strong>__builtin_add_overflow</strong> pro 32bitové ARMy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_diff_types_arm32.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_diff_types_arm32.asm</a></td></tr>
<tr><td> 9</td><td>add_diff_types_arm64.asm</td><td>překlad volání funkce <strong>__builtin_add_overflow</strong> pro 64bitové ARMy (AArch64)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_diff_types_arm64.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/add_diff_types_arm64.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>sub_overflow.c</td><td>operace rozdílu s&nbsp;využitím funkce <strong>__builtin_sub_overflow</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/sub_overflow.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/sub_overflow.c</a></td></tr>
<tr><td>11</td><td>sub_overflow.asm</td><td>překlad volání funkce <strong>__builtin_sub_overflow</strong> na platformě x86-64</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/sub_overflow.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/sub_overflow.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>addc_subc.c</td><td>operace součtu tří hodnot a operace rozdílu: s&nbsp;výpůjčkou nebo s&nbsp;přetečením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/addc_subc.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/addc_subc.asm</a></td></tr>
</table>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>rdrand_support.asm</td><td>test, jestli je instrukce <strong>RDRAND</strong> mikroprocesorem podporována</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-linux/rdrand_support.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-linux/rdrand_support.asm</a></td></tr>
<tr><td>2</td><td>rdrand_read.asm</td><td>přečtení jedné 32bitové hodnoty instrukcí <strong>RDRAND</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-linux/rdrand_read.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-linux/rdrand_read.asm</a></td></tr>
<tr><td>3</td><td>rdrand_read_loop.asm</td><td>přečtení sekvence 32bitových hodnot instrukcí <strong>RDRAND</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-linux/rdrand_read_loop.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-linux/rdrand_read_loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>rdrand_read.c</td><td>přečtení náhodné 32bitové hodnoty, realizace s&nbsp;využitím vestavěné funkce GCC</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rdrand_read.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rdrand_read.c</a></td></tr>
<tr><td>5</td><td>rdrand_read.asm</td><td>výsledek překladu předchozího zdrojového kódu do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rdrand_read.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rdrand_read.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>rand_gen.c</td><td>vygenerování binárního souboru s&nbsp;pseudonáhodnými 32bitovými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rand_gen.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rand_gen.c</a></td></tr>
<tr><td>7</td><td>rdrand_gen.c</td><td>vygenerování binárního souboru s&nbsp;hodnotami vrácenými instrukcí <strong>RDRAND</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rdrand_gen.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-builtins/rdrand_gen.c</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Funkce vestavěné v&nbsp;GCC pro provádění nízkoúrovňových aritmetických operací<br />
<a href="https://www.root.cz/clanky/funkce-vestavene-v-gcc-pro-provadeni-nizkourovnovych-aritmetickych-operaci/">https://www.root.cz/clanky/funkce-vestavene-v-gcc-pro-provadeni-nizkourovnovych-aritmetickych-operaci/</a>
</li>

<li>Generátor náhodných čísel založený na instrukcích RDSEED a RDRAND<br />
<a href="https://www.root.cz/clanky/generator-nahodnych-cisel-zalozeny-na-instrukcich-rdseed-a-rdrand/">https://www.root.cz/clanky/generator-nahodnych-cisel-zalozeny-na-instrukcich-rdseed-a-rdrand/</a>
</li>

<li>Circular shift (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Bitwise_operation#Circular_shift">https://en.wikipedia.org/wiki/Bitwise_operation#Circular_shift</a>
</li>

<li>Parity bit (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Parity_bit">https://en.wikipedia.org/wiki/Parity_bit</a>
</li>

<li>Parity function (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Parity_function">https://en.wikipedia.org/wiki/Parity_function</a>
</li>

<li>RDRAND (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/RDRAND">https://en.wikipedia.org/wiki/RDRAND</a>
</li>

<li>RDRAND instruction<br />
<a href="https://www.felixcloutier.com/x86/rdrand">https://www.felixcloutier.com/x86/rdrand</a>
</li>

<li>Random Number Generator<br />
<a href="https://wiki.osdev.org/Random_Number_Generator">https://wiki.osdev.org/Random_Number_Generator</a>
</li>

<li>GCC documentation: Extensions to the C Language Family<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions">https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions</a>
</li>

<li>GCC documentation: Using Vector Instructions through Built-in Functions<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html">https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html</a>
</li>

<li>SSE (Streaming SIMD Extentions)<br />
<a href="http://www.songho.ca/misc/sse/sse.html">http://www.songho.ca/misc/sse/sse.html</a>
</li>

<li>Timothy A. Chagnon: SSE and SSE2<br />
<a href="http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf">http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf</a>
</li>

<li>CPU design (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/CPU_design">http://en.wikipedia.org/wiki/CPU_design</a>
</li>

<li>GCC Compiler Intrinsics<br />
<a href="https://iq.opengenus.org/gcc-compiler-intrinsics/">https://iq.opengenus.org/gcc-compiler-intrinsics/</a>
</li>

<li>Other Built-in Functions Provided by GCC<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html">https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html</a>
</li>

<li>GCC: 6.60 Built-in Functions Specific to Particular Target Machines<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html#Target-Builtins">https://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html#Target-Builtins</a>
</li>

<li>Additional Builtins for Numeric Operations<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Numeric-Builtins.html">https://gcc.gnu.org/onlinedocs/gcc/Numeric-Builtins.html</a>
</li>

<li>Bit Operation Builtins<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Bit-Operation-Builtins.html">https://gcc.gnu.org/onlinedocs/gcc/Bit-Operation-Builtins.html</a>
</li>

<li>Stránka projektu Compiler Explorer<br />
<a href="https://godbolt.org/">https://godbolt.org/</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="https://llvm.org/">https://llvm.org/</a>
</li>

<li>GCC, the GNU Compiler Collection<br />
<a href="https://gcc.gnu.org/">https://gcc.gnu.org/</a>
</li>

<li>Clang<br />
<a href="https://clang.llvm.org/">https://clang.llvm.org/</a>
</li>

<li>Clang: Assembling a Complete Toolchain<br />
<a href="https://clang.llvm.org/docs/Toolchain.html">https://clang.llvm.org/docs/Toolchain.html</a>
</li>

<li>Integer overflow<br />
<a href="https://en.wikipedia.org/wiki/Integer_overflow">https://en.wikipedia.org/wiki/Integer_overflow</a>
</li>

<li>SETcc — Set Byte on Condition<br />
<a href="https://www.felixcloutier.com/x86/setcc">https://www.felixcloutier.com/x86/setcc</a>
</li>

<li>The ARMv8 instruction sets<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>A64 Instruction Set<br />
<a href="https://developer.arm.com/products/architecture/instruction-sets/a64-instruction-set">https://developer.arm.com/products/architecture/instruction-sets/a64-instruction-set</a>
</li>

<li>Switching between the instruction sets<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>The A64 instruction set<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>Introduction to ARMv8 64-bit Architecture<br />
<a href="https://quequero.org/2014/04/introduction-to-arm-architecture/">https://quequero.org/2014/04/introduction-to-arm-architecture/</a>
</li>

<li>Undefined behavior (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Undefined_behavior">https://en.wikipedia.org/wiki/Undefined_behavior</a>
</li>

<li>Is signed integer overflow still undefined behavior in C++?<br />
<a href="https://stackoverflow.com/questions/16188263/is-signed-integer-overflow-still-undefined-behavior-in-c">https://stackoverflow.com/questions/16188263/is-signed-integer-overflow-still-undefined-behavior-in-c</a>
</li>

<li>Allowing signed integer overflows in C/C++<br />
<a href="https://stackoverflow.com/questions/4240748/allowing-signed-integer-overflows-in-c-c">https://stackoverflow.com/questions/4240748/allowing-signed-integer-overflows-in-c-c</a>
</li>

<li>SXTB, SXTH, SXTW<br />
<a href="https://www.scs.stanford.edu/~zyedidia/arm64/sxtb_z_p_z.html">https://www.scs.stanford.edu/~zyedidia/arm64/sxtb_z_p_z.html</a>
</li>

<li>BX, BXNS<br />
<a href="https://developer.arm.com/documentation/100076/0200/a32-t32-instruction-set-reference/a32-and-t32-instructions/bx--bxns?lang=en">https://developer.arm.com/documentation/100076/0200/a32-t32-instruction-set-reference/a32-and-t32-instructions/bx--bxns?lang=en</a>
</li>

<li>Carry and Borrow Principles<br />
<a href="https://www.tpub.com/neets/book13/53a.htm">https://www.tpub.com/neets/book13/53a.htm</a>
</li>

<li>In binary subtraction, how do you handle a borrow when there are no bits left to borrow form<br />
<a href="https://stackoverflow.com/questions/68629408/in-binary-subtraction-how-do-you-handle-a-borrow-when-there-are-no-bits-left-to">https://stackoverflow.com/questions/68629408/in-binary-subtraction-how-do-you-handle-a-borrow-when-there-are-no-bits-left-to</a>
</li>

<li>Is there any legitimate use for Intel's RDRAND?<br />
<a href="https://stackoverflow.com/questions/26771329/is-there-any-legitimate-use-for-intels-rdrand">https://stackoverflow.com/questions/26771329/is-there-any-legitimate-use-for-intels-rdrand</a>
</li>

<li>Intel® Digital Random Number Generator (DRNG) Software Implementation Guide<br />
<a href="https://www.intel.com/content/www/us/en/developer/articles/guide/intel-digital-random-number-generator-drng-software-implementation-guide.html">https://www.intel.com/content/www/us/en/developer/articles/guide/intel-digital-random-number-generator-drng-software-implementation-guide.html</a>
</li>

<li>Hardware random number generator<br />
<a href="https://en.wikipedia.org/wiki/Hardware_random_number_generator">https://en.wikipedia.org/wiki/Hardware_random_number_generator</a>
</li>

<li>Random number generator attack<br />
<a href="https://en.wikipedia.org/wiki/Random_number_generator_attack">https://en.wikipedia.org/wiki/Random_number_generator_attack</a>
</li>

<li>random_r.c (Glibc)<br />
<a href="https://github.com/lattera/glibc/blob/master/stdlib/random_r.c#L341">https://github.com/lattera/glibc/blob/master/stdlib/random_r.c#L341</a>
</li>

<li>Xorshift<br />
<a href="https://en.wikipedia.org/wiki/Xorshift">https://en.wikipedia.org/wiki/Xorshift</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

