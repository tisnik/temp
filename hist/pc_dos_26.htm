<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vývoj mikroprocesorů z rodiny 80x86: od Intelu 8086 k čipu 80286</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vývoj mikroprocesorů z rodiny 80x86: od Intelu 8086 k čipu 80286</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Většina příkladů, které jsme si až doposud v seriálu o tvorbě aplikací pro IBM PC a operační systém DOS ukazovali, využívala pouze instrukce a registry dostupné na původních mikroprocesorech 8086 a 8088. Ovšem možnosti instrukčních sad se postupně s příchodem dalších čipů řady x86 rozšiřovaly, což je i téma dnešního článku.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Kvantitativní a kvalitativní vývoj mikroprocesorů z&nbsp;rodiny 80x86</a></p>
<p><a href="#k02">2. První čtyři generace: od původního Intelu 8086 až k&nbsp;80486DX4</a></p>
<p><a href="#k03">3. Splňuje rodina 80x86 Moorův zákon?</a></p>
<p><a href="#k04">4. Interní optimalizace: zlepšující se rychlost vykonávání instrukcí</a></p>
<p><a href="#k05">5. Nové instrukce podporované čipem Intel 80186</a></p>
<p><a href="#k06">6. Instrukce <strong>PUSH konstanta</strong></a></p>
<p><a href="#k07">7. Ukázka použití instrukce <strong>PUSH konstanta</strong></a></p>
<p><a href="#k08">8. Instrukce <strong>PUSHA</strong> a <strong>POPA</strong></a></p>
<p><a href="#k09">9. Ukázka použití instrukcí <strong>PUSHA</strong> a POPA</a></p>
<p><a href="#k10">10. Znaménkové násobení konstantou</a></p>
<p><a href="#k11">11. Použití instrukce pro znaménkové násobení konstantou</a></p>
<p><a href="#k12">12. Krátká odbočka: instrukce <strong>INTO</strong></a></p>
<p><a href="#k13">13. Provedení aritmetické operace s&nbsp;testem na přetečení výsledku</a></p>
<p><a href="#k14">14. Instrukce <strong>BOUND</strong> pro test, zda index nepřesahuje meze pole</strong></a></p>
<p><a href="#k15">15. Naivní, ovšem nekorektní přerušovací rutina pro instrukci <strong>BOUND</strong></a></p>
<p><a href="#k16">16. Korektní varianta přerušovací rutiny pro instrukci <strong>BOUND</strong></a></p>
<p><a href="#k17">17. Bitové posuny a rotace o konstantu větší než 1</a></p>
<p><a href="#k18">18. Nepodporované instrukce: <strong>POP CS</strong></a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Kvantitativní a kvalitativní vývoj mikroprocesorů z&nbsp;rodiny 80x86</h2>

<p>Prozatím jsme <a
href="https://www.root.cz/serialy/vyvoj-her-a-grafickych-dem-pro-platformu-pc/">v&nbsp;tomto
seriálu</a> v&nbsp;naprosté většině demonstračních příkladů využívali
instrukční sadu původních šestnáctibitových mikroprocesorů <i>Intel 8086</i> a
<i>Intel 8088</i> (ty jsou z&nbsp;hlediska instrukcí i jejich délky prakticky
totožné). Připomeňme si, že se dnes jedná o historické čipy, které byly na trh
uvedeny v&nbsp;letech 1978 a 1979. O přibližně dva roky později použila
společnost IBM mikroprocesor Intel 8088 jako základní prvek osobního
mikropočítače IBM PC, z&nbsp;něhož se postupně vyvinula celá platforma PC, jež
se dodnes vyvíjí a používá (se všemi výhodami a zápornými vlastnostmi tohoto
vývoje).</p>

<p>Ovšem postupně se vyvíjely i mikroprocesory odvozené od původního poměrně
primitivního Intelu 8086 (resp.&nbsp;jeho ořezané varianty Intel 8088).
Rozšiřovala se instrukční sada o nové instrukce a adresovací režimy, přidávaly
se nové pracovní registry, přidávaly se nové režimy činnosti mikroprocesoru
(chráněný režim 286, odlišný chráněný režim 386, virtuální režim) atd. Ovšem
současně se kromě těchto kvantitativních změn vylepšovala i interní
architektura mikroprocesorů, což například vedlo k&nbsp;urychlení instrukcí. U
řady instrukcí jsme tak postupně došli od jejich vykonání v&nbsp;několika
desítkách strojových cyklů například na jediný strojový cyklus a poté na
možnost dokončit v&nbsp;jednom cyklu více souběžně prováděných instrukcí.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. První čtyři generace: od původního Intelu 8086 až k&nbsp;80486DX4</h2>

<p>V&nbsp;řadě x86 nalezneme několik desítek (dnes možná i několik set) různých
mikroprocesorů. Zaměřme se tedy nejprve na první čtyři generace řady x86, která
začíná již výše zmíněným mikroprocesorem Intel 8086 a končí mikroprocesorem
80486DX4, jenž je z&nbsp;pohledu frekvence přibližně dvacetkrát rychlejší, než
původní 8086, ovšem díky optimalizacím ve skutečnosti dosahuje více než
osmdesátinásobného(!) výpočetního výkonu v&nbsp;porovnání s&nbsp;první verzí
8086 (nehledě na to, že v&nbsp;80486DX4 je i matematický koprocesor a rapidně
se zvýšilo i množství adresovatelné paměti).</p>

<p>Podívejme se na následující tabulku, v&nbsp;níž jsou vypsány všechny
důležité mikroprocesory řady x86 (neboli, pokud použijeme alternativní
označení, rodiny 80x86) vyráběné společností Intel a patřící do prvních čtyř
generací:</p>

<table>
<tr><th>Mikroprocesor</th><th>Rok uvedení</th><th>Frekvence (MHz)</th><th>Tranzistorů</th><th>Poznámka</th></tr>
<tr><td>8086    </td><td>1978</td><td>5, 8, 10</td><td>  29000</td><td>praotec celé rodiny 80x86</td></tr>
<tr><td>8088    </td><td>1979</td><td>4,77 a 8</td><td>  29000</td><td>byl použit v&nbsp;původním IBM PC</td></tr>
<tr><td>80186   </td><td>1982</td><td>6</td><td>  55000</td><td>využíván jako mikrořadič, nikoli jako procesor v&nbsp;počítačích</td></tr>
<tr><td>80188   </td><td>1982</td><td>6</td><td>  55000</td><td>varianta 80186 s&nbsp;osmibitovou vnější sběrnicí</td></tr>
<tr><td>80286   </td><td>1982</td><td>6, 8, 12,5, 16, 20, 25</td><td> 134000</td><td>použit v&nbsp;PC AT</td></tr>
<tr><td>80386DX </td><td>1985</td><td>16, 20, 25, 33</td><td> 275000</td><td>první 32bitový čip z&nbsp;rodiny 80x86</td></tr>
<tr><td>80386SX </td><td>1988</td><td>16, 20, 25, 33</td><td> 275000</td><td>varianta 80386DX se šestnáctibitovou datovou sběrnicí</td></tr>
<tr><td>80386SL </td><td>1990</td><td>20, 25</td><td> 855000</td><td>obsahuje i cache a řadiče sběrnice a paměti</td></tr>
<tr><td>80486DX </td><td>1989</td><td>25, 33, 50</td><td>1200000</td><td>cca 50&times; výkonnější, než původní 8088</td></tr>
<tr><td>80486SX </td><td>1991</td><td>16, 20, 25, 33</td><td>1185000</td><td>bez povoleného matematického koprocesoru (nebo zcela bez FPU)</td></tr>
<tr><td>80486DX2</td><td>1992</td><td>40, 50, 66</td><td>1185000</td><td>dvojnásobná interní frekvence oproti frekvenci externí</td></tr>
<tr><td>80486SL </td><td>1992</td><td>20, 25, 33</td><td>1400000</td><td>určeno pro notebooky</td></tr>
<tr><td>80486DX4</td><td>1994</td><td>75, 100</td><td>1600000</td><td>trojnásobná (!) interní frekvence oproti frekvenci externí</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: DX4 tedy neznamená čtyřnásobnou
frekvenci oproti původnímu DX (což platilo jen u DX2).</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Splňuje rodina 80x86 Moorův zákon?</h2>

<p>Do tabulky uvedené <a href="#k02">v&nbsp;předchozí kapitole</a> byly zapsány
i přibližné počty tranzistorů u jednotlivých typů mikroprocesorů. Vzhledem
k&nbsp;tomu, že se jedná o mikroprocesory společnosti Intel, jejímž
zakladatelem je <i>Gordon Moore</i>, bude zajímavé zjistit, jestli i
mikroprocesory řady x86 dobře odpovídají Moorovu zákonu, který říká (říkal), že
každé dva roky dochází ke zdvojnásobení počtu tranzistorů na čipech
s&nbsp;velkou integrací (a sem mikroprocesory pochopitelně spadají). Zkusme si
tedy vykreslit grafy s&nbsp;počty tranzistorů u prvních čtyř generací
mikroprocesorů řady x86 a současně teoretické počty tranzistorů odpovídajících
Moorovu zákonu v&nbsp;případě, že v&nbsp;roce 1978 začneme s&nbsp;10000
tranzistory resp.&nbsp;s&nbsp;25000 tranzistory (začneme tedy o něco níže, než
29000 tranzistorů u původního Intelu 8086).</p>

<p>Zobrazíme si jak graf s&nbsp;lineárním měřítkem na vertikální ose, tak i
přehlednější graf, který má na vertikální ose měřítko logaritmické:</p>

<img src="https://i.iinfo.cz/images/44/moore-law-1.webp" class="image-1157754" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Počet tranzistorů na mikroprocesorech rodiny 80x86 vs. Moorův zákon (lineární měřítko na y-ové ose).</i></p>

<img src="https://i.iinfo.cz/images/44/moore-law-2.webp" class="image-1157757" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 2: Počet tranzistorů na mikroprocesorech rodiny 80x86 vs. Moorův zákon (logaritmické měřítko na y-ové ose).</i></p>

<p><div class="rs-tip-major">Poznámka: na konci je patrné
&bdquo;zpoždění&ldquo; řady x86, což je ovšem poněkud zavádějící, protože
současně s&nbsp;nejvýkonnějšími čipy DX4 bylo vydáno i první Pentinum
s&nbsp;přibližně třemi miliony tranzistorů. Z&nbsp;tohoto pohledu je DX4 jen
pokusem o co největší &bdquo;vytěžení&ldquo; možností této čtvrté generace,
protože Pentium už představovalo v&nbsp;některých ohledech nově koncipovaný čip
(i když původní P5 toho mělo s&nbsp;řadou 486 mnoho společného).</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Interní optimalizace: zlepšující se rychlost vykonávání instrukcí</h2>

<p>Postupně rostoucí počet tranzistorů sám o sobě ovšem nic nevypovídá o
skutečné rychlosti mikroprocesoru, protože do značné míry záleží na tom, jakým
způsobem jsou tyto tranzistory využity. Postupně rostoucí kvalita implementace
instrukcí (například přidáním nové specializované sčítačky pro výpočty adres,
přidání fronty instrukcí, možnost takzvaného <i>prefetchingu</i> instrukcí,
implementace RISCové pipeline atd.) vedla k&nbsp;tomu, že se postupně snižoval
počet cyklů nutných pro dokončení instrukcí. To tedy znamená, že i když mohl
být jak mikroprocesor Intel 8086, tak i Intel 80286 provozován na stejné
frekvenci 8MHz, bude 80286 ve skutečnosti rychlejší. Ukažme si to například na
základní instrukci součtu dvou osmibitových nebo šestnáctibitových hodnot
&ndash; <strong>ADD</strong>. Délka výpočtů se odlišuje podle typů operandů a
taktéž podle typu mikroprocesoru (čím menší číslo je v&nbsp;tabulce uvedeno,
tím lépe):</p>

<table>
<tr><th>Operandy</th><th>8086/88</th><th>186</th><th>286</th><th>386</th><th>486</th><th>Pentium</th></tr>
<tr><td>reg, reg</td><td>3    </td><td>3 </td><td>2</td><td>2</td><td>1</td><td>1</td></tr>
<tr><td>mem, reg</td><td>24+EA</td><td>10</td><td>7</td><td>7</td><td>3</td><td>3</td></tr>
<tr><td>reg, mem</td><td>13+EA</td><td>10</td><td>7</td><td>6</td><td>2</td><td>2</td></tr>
<tr><td>reg, imm</td><td>4    </td><td>4 </td><td>3</td><td>2</td><td>1</td><td>1</td></tr>
<tr><td>mem, imm</td><td>23+EA</td><td>16</td><td>7</td><td>7</td><td>3</td><td>3</td></tr>
<tr><td>acc, imm</td><td>4    </td><td>4 </td><td>3</td><td>2</td><td>1</td><td>1</td></tr>
</table>

<p>Přičemž u čipů 8086/8088 se přidává několik cyklů pro <i>EA</i> neboli pro
výpočet efektivní adresy:</p>

<table>
<tr><th>Adresování</th><th>Počet cyklů EA</th></tr>
<tr><td>reg+offset</td><td>5</td></tr>
<tr><td>přímá adresa</td><td>6</td></tr>
<tr><td>BP+DI nebo BX+SI</td><td>7</td></tr>
<tr><td>BX+DI nebo BP+SI</td><td>8</td></tr>
<tr><td>BP+DI+disp nebo BX+SI+disp</td><td>11</td></tr>
<tr><td>BX+DI+disp nebo BP+SI+disp</td><td>12</td></tr>
</table>
      
<p>Navíc, pokud se mění (explicitně specifikuje) segmentový registr, je nutné
přičíst další dva hodinové cykly.</p>
      
<p><div class="rs-tip-major">Poznámka: už u čipu 186 byla přidána samostatná
sčítačka pro výpočty adresy, takže se nemusela používat universální ALU. Díky
tomu už výpočet efektivní adresy nebyl tak pomalý.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nové instrukce podporované čipem Intel 80186</h2>

<p>Po mikroprocesorech Intel 8086 a Intel 8088 (1978 a 1979) následoval
v&nbsp;roce 1982 mikroprocesor Intel 80186. Ten se používal spíše ve funkci
mikrořadiče, takže z&nbsp;pohledu vývoje IBM PC je poněkud méně zajímavý. Ovšem
důležité je, že právě do 80186 byly přidány některé instrukce, které
v&nbsp;původní instrukční sadě relativně citelně chyběly. Jedná se o instrukce,
o nichž se stále (chybně) píše jako o instrukcích přidaných až v&nbsp;80286.
Ovšem ve skutečnosti byly do 80286 přidány &bdquo;jen&ldquo; instrukce
související s&nbsp;chráněným režimem.</p>

<p>V&nbsp;následující tabulce jsou vypsány ty instrukce, které bylo možné
použít již v&nbsp;mikroprocesoru 80186:</p>

<table>
<tr><th>Instrukce</th><th>Operandy</th><th>Stručný popis</th></tr>
<tr><td>IMUL</td><td>konstanta</td><td>násobení se znaménkem se specifikací konstanty jako druhého operandu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>PUSH</td><td>konstanta</td><td>uložení šestnáctibitové hodnoty na zásobník</td></tr>
<tr><td>PUSHA</td><td>&nbsp;</td><td>uložení pracovních registrů na zásobník</td></tr>
<tr><td>POPA</td><td>&nbsp;</td><td>obnovení pracovních registrů ze zásobníku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>INS</td><td>(implicitní DX)</td><td>přečtení bajtu nebo slova z&nbsp;portu do ES:[DI], zvýšení DI</td></tr>
<tr><td>OUTS</td><td>(implicitní DX)</td><td>zápis bajtu nebo slova z&nbsp;DS:[SI] na port, zvýšení SI</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>ENTER</td><td>size, počet</td><td>nastavení zásobníkového rámce</td></tr>
<tr><td>LEAVE</td><td>&nbsp;</td><td>obnovení SP a BP do doby před instrukcí ENTER</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BOUND</td><td>registr, paměť</td><td>kontrola, zda hodnota uložená v&nbsp;registru nepřesahuje limity</td></tr>
<tr><td>RCL/RCR/ROL/ROR/SHL/SHR/SAL/SAR</td><td>registr, konstanta</td><td>rotace nebo bitový posun o zadaný počet bitů doleva nebo doprava</td></tr>
</table>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instrukce <strong>PUSH konstanta</strong></h2>

<p>První novou instrukcí, s&nbsp;níž se dnes setkáme, je instrukce <strong>PUSH
konstanta</strong>, což je varianta instrukce určené pro uložení nějaké hodnoty
na zásobník. Původní čipy 8086/8088 podporovaly uložení obsahu libovolného
šestnáctibitového registru, uložení obsahu segmentového registru nebo uložení
šestnáctibitové hodnoty přečtené z&nbsp;paměti. Nová forma podporuje i uložení
šestnáctibitové konstanty.</p>

<p>Instrukci <strong>PUSH</strong>, která dokáže na zásobník uložit
šestnáctibitovou konstantu, můžeme použít například ve chvíli, kdy je zapotřebí
konstantu přenést do nějakého segmentového registru. Taková operace by se mohla
provést instrukcí <strong>MOV</strong>, jenže varianta <strong>MOV
segment_registr, konstanta</strong> není dostupná, a to ani v&nbsp;dalších
třech generacích čipů rodiny 80x86.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Ukázka použití instrukce <strong>PUSH konstanta</strong></h2>

<p>Podívejme se na příklad, který jsme si již v&nbsp;tomto seriálu ukazovali.
Tento příklad po svém spuštění naplní obrazovou paměť v&nbsp;textovém režimu
různými hodnotami znaků+atributů. Přitom se obrazová paměť adresuje přes
segmentový registr <strong>ES</strong>. V&nbsp;původní variantě jsme prováděli
naplnění <strong>ES</strong> takto:</p>

<pre>
        mov ax, 0xb800     <i>; video RAM v textovem rezimu</i>
        mov es, ax
</pre>

<p>Nyní provedeme odlišnou sekvenci operací a nezničíme si tak obsah registru
<strong>AX</strong> (ovšem na úkor rychlosti &ndash; tato varianta trvá delší
počet cyklů):</p>

<pre>
        push 0xb800     <i>; video RAM v textovem rezimu</i>
        pop  es
</pre>

<p>Délka obou řešení je rozdílná, protože druhé řešení je o jeden bajt
kratší:</p>

<pre>
B800B8      mov ax, 0xb800
8EC0        mov es, ax
&nbsp;
6800B8      push 0xb800
07          pop  es
</pre>

<p>Upravený zdrojový kód demonstračního příkladu vypadá následovně:</p>

<pre>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 286         <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 3      <i>; nastaveni standardniho textoveho rezimu 80x25 znaku</i>
&nbsp;
        push 0xb800     <i>; video RAM v textovem rezimu</i>
        pop  es
        mov di, 0       <i>; nyni ES:DI obsahuje adresu prvniho znaku ve video RAM</i>
&nbsp;
        mov cx, 80*25   <i>; pocet zapisovanych znaku</i>
        mov al, 0       <i>; kod zapisovaneho znaku</i>
opak:
        stosb           <i>; zapis znaku + atributu</i>
        stosb
        inc al          <i>; dalsi znak/atribut</i>
        loop opak       <i>; opakujeme CX-krat</i>
&nbsp;
        mov dx, 0x3d8   <i>; port s rizenim graficke palety</i>
        mov al, 0x18    <i>; pozadi neblika, meni se intenzita</i>
        out dx, al      <i>; pres port 0x3d9</i>
&nbsp;
        wait_key
&nbsp;
        mov dx, 0x3d8   <i>; port s rizenim graficke palety</i>
        mov al, 0x38    <i>; pozadi opet blika, nizka intenzita</i>
        out dx, al      <i>; pres port 0x3d9</i>
&nbsp;
        wait_key
&nbsp;
        wait_key        <i>; cekani na klavesu</i>
        exit            <i>; navrat do DOSu</i>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Instrukce <strong>PUSHA</strong> a <strong>POPA</strong></h2>

<p>V&nbsp;mnoha situacích se setkáme s&nbsp;nutností uložení většího množství
registrů na zásobník. Tato operace trvá na 80186 deset cyklů a na 80286 tři
cykly. Pokud je zapotřebí uložit více registrů, použije se více těchto
instrukcí a časy se pochopitelně sčítají. Instrukce <strong>PUSHA</strong>
naproti tomu uloží všechny pracovní registry v&nbsp;pořadí AX, CX, DX, BX, SP,
BP, SI, DI a celková doba jejího trvání je 36 resp.&nbsp;17 cyklů
(v&nbsp;dalších generacích ještě méně).</p>

<p>Podobně instrukce <strong>POP</strong> jednoho registru trvá 10 resp.&nbsp;5
cyklů pro každý registr, zatímco <strong>POPA</strong> provede obnovení
registrů v&nbsp;pořadí DI, SI, BP, SP, BX, DX, CX, AX a celková doba jejího
trvání je 51 resp.&nbsp;19 cyklů. To znamená, že pokud ukládáme/obnovujeme
čtyři nebo více registrů, je výhodnější použít <strong>PUSHA+POPA</strong>, což
je i mnohem kratší řešení z&nbsp;pohledu délky strojového kódu.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Ukázka použití instrukcí <strong>PUSHA</strong> a POPA</h2>

<p>S&nbsp;instrukcemi <strong>PUSHA</strong> a <strong>POPA</strong> jsme se
setkali při programování obsluhy nějakého přerušení. Typická přerušovací rutina
totiž na svém začátku uloží všechny v&nbsp;ní použité registry na zásobník a na
konci je zase obnoví. V&nbsp;případě, že se nám nechce sledovat, které registry
uložit (a poté obnovit) sekvencí instrukcí <strong>PUSH</strong> a posléze
<strong>POP</strong>, nebo pokud je registrů větší množství, použijeme právě
<strong>PUSHA</strong> a <strong>POPA</strong>. Připomeňme si, jak taková
rutina může vypadat:</p>

<pre>
<strong>int8_handler</strong>:                   <i>; nova obsluha preruseni</i>
        pusha                   <i>; ulozit vsechny registry</i>
        print_char 't'          <i>; t=tick</i>
&nbsp;
        mov al, 0x20
        out 0x20, al            <i>; oznameni, ze preruseni je u konce radici preruseni </i>
&nbsp;
        popa                    <i>; obnovit vsechny registry</i>
        sti                     <i>; povoleni maskovatelnych preruseni</i>
        iret                    <i>; navrat z preruseni</i>
</pre>

<p>Způsob překladu do strojového kódu naznačuje, jak krátké (z&nbsp;pohledu
obsazení paměti) tyto instrukce ve skutečnosti jsou:</p>

<pre>
        int8_handler:                   <i>; nova obsluha preruseni</i>
60              pusha                   <i>; ulozit vsechny registry</i>
                print_char 't'          <i>; t=tick</i>
B402            mov ah, 0x02
B274            mov dl, %1
CD21            int 0x21
&nbsp;
B020            mov al, 0x20
E620            out 0x20, al            <i>; oznameni, ze preruseni je u konce radici preruseni </i>
&nbsp;
61              popa                    <i>; obnovit vsechny registry</i>
FB              sti                     <i>; povoleni maskovatelnych preruseni</i>
CF              iret                    <i>; navrat z preruseni</i>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Znaménkové násobení konstantou</h2>

<p>Další nová varianta instrukce, se kterou jsme se mohli setkat u čipů Intel
80186 (a samozřejmě i u všech mikroprocesorů, které následovaly) je násobení se
znaménkem, v&nbsp;podobě, kdy je druhým operandem konstanta a kdy je
specifikován i registr, do kterého se má uložit výsledek. Jedná se o instrukci
<strong>IMUL</strong>, která má velké množství variant. Vypišme si jen
osmibitové a šestnáctibitové varianty. V&nbsp;poznámce je uvedeno, od jakého
čipu jsou tyto varianty dostupné:</p>

<pre>
IMUL reg8
IMUL reg16
IMUL mem8
IMUL mem16
IMUL reg16, konstanta         <i>; od 286</i>
IMUL reg16, reg16, konstanta  <i>; od 186</i>
IMUL reg16, mem16, konstanta  <i>; od 186</i>
IMUL reg16, reg16             <i>; od 386</i>
IMUL reg16, mem16             <i>; od 386</i>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Použití instrukce pro znaménkové násobení konstantou</h2>

<p>Vlastní použití instrukce <strong>IMUL reg16, reg16, konstanta</strong> je
snadné, jak je to ostatně patrné i z&nbsp;následujícího demonstračního
příkladu, v&nbsp;němž vynásobíme obsah registru BX dvěma, takže výsledkem bude
hexadecimální hodnota 0x06:</p>

<pre>
<i>; Instrukcni soubor mikroprocesoru Intel 80286.</i>
<i>; Test instrukce IMUL s konstantnim operandem.</i>
<i>;</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 286         <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>; tisk hexadecimalni hodnoty</i>
%macro <strong>print_hex</strong> 1
        mov     bx, hex_digits
        mov     cl, %1                <i>; zapamatovat si predanou hodnotu</i>
&nbsp;
        mov     al, cl                <i>; do AL se vlozi horni hexa cifra</i>
        and     al, 0xf0
        shr     al, 1
        shr     al, 1
        shr     al, 1
        shr     al, 1
&nbsp;
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message], al         <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        mov     al, cl                <i>; do BL se vlozi dolni hexa cifra</i>
        and     al, 0x0f
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message + 1], al     <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        print   message
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        xor  ax, ax        <i>; výsledný registr</i>
        mov  bx, 0x03      <i>; první operand</i>
        imul ax, bx, 2     <i>; násobení konstantou</i>
        print_hex al       <i>; výsledek je v AX</i>
&nbsp;
        wait_key
        exit
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>message</strong> db 0x01, 0x01, 0x0d, 0x0a, "$"
&nbsp;
        <i>; prevodni tabulka hodnoty 0-15 na ASCII znak</i>
<strong>hex_digits</strong> db "0123456789abcdef"
</pre>

<p>Výše uvedená varianta <strong>IMUL</strong> je přeložena do tříbajtové
sekvence:</p>

<pre>
    58 00000000 31C0        xor  ax, ax        <i>; výsledný registr</i>
    59 00000002 BB0300      mov  bx, 0x03      <i>; první operand</i>
    60 00000005 6BC302      imul ax, bx, 2     <i>; násobení konstantou</i>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Krátká odbočka: instrukce <strong>INTO</strong></h2>

<p>Ještě před popisem dalších instrukcí, které byly přidány do instrukčního
souboru mikroprocesoru Intel 80186 se na chvíli zastavme u instrukce původního
Intelu 8086, kterou jsme si ještě nepopsali. Jedná se o instrukci nazvanou
<strong>INTO</strong>, což je instrukce, jejíž mnemotechnická zkratka vznikla
ze slov &bdquo;(call) <strong>int</strong>errupt procedure if
<strong>o</strong>verflow&ldquo;. Tato instrukce zkontroluje obsah příznakového
bitu <i>overflow (OF)</i> a pokud je tento bit nastaven, vyvolá se přerušení
číslo 4, tj.&nbsp;provede se vlastně instrukce <strong>INT 4</strong>. Tuto
instrukci tedy může do programového kódu vkládat například překladač vyššího
programovacího jazyka ve chvíli, kdy je povolena kontrola přetečení výsledků
(příkladem může být Pascal atd.) a kdy se má vždy vyvolat stejná přerušovací
rutina. Není tedy nutné provádět instrukce <strong>JO/JNO</strong>, které jsou
zbytečně dlouhé, protože instrukce <strong>INTO</strong> je zakódována do
jediného bajtu.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Provedení aritmetické operace s&nbsp;testem na přetečení výsledku</h2>

<p>Vyzkoušejme si nyní, jak vlastně může vypadat obsluha přerušení, která
vypíše nějaké hlášení ve chvíli, kdy při výpočtech dojde k&nbsp;přetečení:</p>

<pre>
<strong>int4_handler</strong>:                   <i>; obsluha preruseni cislo 4</i>
        pusha                   <i>; ulozit vsechny registry</i>
        print overflow_msg
        popa                    <i>; obnovit vsechny registry</i>
        sti                     <i>; povoleni maskovatelnych preruseni</i>
        iret                    <i>; navrat z preruseni</i>
</pre>

<p>Tuto přerušovací rutinu musíme pochopitelně zapsat do tabulky vektorů
přerušení:</p>

<pre>
INT_4_VECTOR equ 4*4 ; adresa vektoru preruseni
&nbsp;
        xor  ax, ax
        mov  es, ax
        mov  di, INT_4_VECTOR   <i>; ES:DI obsahuje adresu, na ktere je adresa obsluhy preruseni 4</i>
&nbsp;
        cli                     <i>; zakaz preruseni</i>
        lea  ax, int4_handler   <i>; zmena offsetove casti adresy</i>
        mov  es:[di], ax
&nbsp;
        mov  ax, cs             <i>; zmena segmentove casti adresy</i>
        mov  es:[di+2], ax
        sti                     <i>; povoleni preruseni</i>
</pre>

<p>A následně již můžeme po výpočtech použít instrukci <strong>INTO</strong>
pro test, zda došlo k&nbsp;přetečení či nikoli:</p>

<pre>
        mov  al, 10
        add  al, al             <i>; soucet dvou hodnot</i>
        into                    <i>; test na preteceni -> vyvolani preruseni</i>
</pre>

<p>popř.&nbsp;</p>

<pre>
        mov  al, 100
        add  al, al             <i>; soucet dvou hodnot</i>
        into                    <i>; test na preteceni -> vyvolani preruseni</i>
</pre>

<p><div class="rs-tip-major">Poznámka: úplné zdrojové kódy demonstračních
příkladů pro provedení součtu s&nbsp;následným testováním přetečení naleznete
na adresách <a
href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_1.asm</a>
(bez přetečení) a <a
href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_2.asm</a>
(s&nbsp;přetečením).</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Instrukce <strong>BOUND</strong> pro test, zda index nepřesahuje meze pole</h2>

<p>Další instrukcí určenou primárně pro strojový kód generovaný překladači
vyšších programovacích jazyků je instrukce nazvaná <strong>BOUND</strong>. Tato
instrukce kontroluje, zda nějaký šestnáctibitový index uložený
v&nbsp;libovolném pracovním registru nepřesahuje dolní nebo horní mez rozsahu
pole, přičemž tento rozsah je uložen v&nbsp;operační paměti na specifikované
adrese (první dva bajty obsahují dolní index, další dva bajty obsahují index
horní). Představme si například zdrojový kód napsaný v&nbsp;Pascalu,
v&nbsp;němž je možné specifikovat horní i dolní meze indexů polí:</p>

<pre>
arr : Array[10..20] Of Integer;
</pre>

<p>Povolené indexy tedy začínají od 10 a končí u 20. Pokud je pole
v&nbsp;operační paměti uloženo takovým způsobem, že první čtyři bajty obsahují
meze indexů polí (což je poměrně triviální a přitom praktický způsob uložení
pole) a pokud je index, s&nbsp;nímž pracujeme, uložen například v&nbsp;registru
AX, můžeme zkontrolovat, jestli je index korektní, takto:</p>

<pre>
     bound ax, [pole]
</pre>

<p>V&nbsp;případě, že index leží v&nbsp;potřebném rozsahu, instrukce po 35(!)
taktech skončí. Pokud však index leží mimo rozsah, vyvolá se přerušení INT 5
(nikoli INT 4, jako u <strong>INTO</strong>). A samozřejmě i na tuto skutečnost
můžeme potřebným způsobem reagovat vlastní přerušovací rutinou.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Naivní, ovšem nekorektní přerušovací rutina pro instrukci <strong>BOUND</strong></h2>

<p>Zkusme si nyní zaregistrovat rutinu nazvanou <strong>int5_handler</strong>,
která bude zavolána ve chvíli, kdy dojde k&nbsp;přerušení číslo 5, ať již
vlivem instrukce <strong>INT 5</strong> nebo nepřímo přes instrukci
<strong>BOUND</strong>. Samotná registrace takové rutiny se nijak neliší od
registrace rutiny pro přerušení číslo 4, pochopitelně se však bude provádět
zápis na jiné místo tabulky přerušovacích vektorů:</p>

<pre>
INT_5_VECTOR equ 5*4 <i>; adresa vektoru preruseni</i>
&nbsp;
        xor  ax, ax
        mov  es, ax
        mov  di, INT_5_VECTOR   <i>; ES:DI obsahuje adresu, na ktere je adresa obsluhy preruseni 5</i>
&nbsp;
        cli                     <i>; zakaz preruseni</i>
        lea  ax, int5_handler   <i>; zmena offsetove casti adresy</i>
        mov  es:[di], ax
&nbsp;
        mov  ax, cs             <i>; zmena segmentove casti adresy</i>
        mov  es:[di+2], ax
        sti                     <i>; povoleni preruseni</i>
</pre>

<p>První verze rutiny s&nbsp;obsluhou přerušení může vypadat následovně &ndash;
pouze vypíšeme zprávu &bdquo;index out of bounds!&ldquo; a subrutinu následně
ukončíme:</p>

<pre>
<strong>int5_handler</strong>:                   <i>; obsluha preruseni cislo 5</i>
        pusha                   <i>; ulozit vsechny registry</i>
        print index_out_of_bounds_msg
        popa                    <i>; obnovit vsechny registry</i>
        sti                     <i>; povoleni maskovatelnych preruseni</i>
        iret                    <i>; navrat z preruseni -> nyni se vracime zpet na instrukci BOUND</i>
</pre>

<p>Pokusme se nyní tuto subrutinu zavolat &ndash; index 100 leží mimo povolený
rozsah 0 až 99:</p>

<pre>
        mov  ax, 100            <i>; nacteni indexu</i>
        bound ax, [bounds]      <i>; test indexu</i>
&nbsp;
<strong>bounds</strong>  dw 0, 99
</pre>

<p>Pokud takto upravený demonstrační příklad přeložíme a spustíme, začne se na
terminál neustále dokola vypisovat zpráva:</p>

<pre>
index out of bounds!
index out of bounds!
index out of bounds!
...
...
...
</pre>

<p>Proč tomu tak je a jak bude možné tento příklad opravit, si řekneme
v&nbsp;navazující kapitole. Nyní bude pro úplnost ukázán celý zdrojový kód
tohoto demonstračního příkladu:</p>

<pre>
<i>; Instrukcni soubor mikroprocesoru Intel 80286.</i>
<i>; Instrukce BOUND - nekorektni verze programu.</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 286         <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
INT_5_VECTOR equ 5*4 <i>; adresa vektoru preruseni</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        xor  ax, ax
        mov  es, ax
        mov  di, INT_5_VECTOR   <i>; ES:DI obsahuje adresu, na ktere je adresa obsluhy preruseni 5</i>
&nbsp;
        cli                     <i>; zakaz preruseni</i>
        lea  ax, int5_handler   <i>; zmena offsetove casti adresy</i>
        mov  es:[di], ax
&nbsp;
        mov  ax, cs             <i>; zmena segmentove casti adresy</i>
        mov  es:[di+2], ax
        sti                     <i>; povoleni preruseni</i>
&nbsp;
        mov  ax, 100            <i>; nacteni indexu</i>
        bound ax, [bounds]      <i>; test indexu</i>
&nbsp;
        print done_msg          <i>; vypis zpravy, ze koncime</i>
&nbsp;
        wait_key
        exit                    <i>; a skutecne skoncime</i>
&nbsp;
<strong>int5_handler</strong>:                   <i>; obsluha preruseni cislo 5</i>
        pusha                   <i>; ulozit vsechny registry</i>
        print index_out_of_bounds_msg
        popa                    <i>; obnovit vsechny registry</i>
        sti                     <i>; povoleni maskovatelnych preruseni</i>
        iret                    <i>; navrat z preruseni -> nyni se vracime zpet na instrukci BOUND</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
<strong>bounds</strong>  dw 0, 99
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>index_out_of_bounds_msg</strong> db "index out of bounds!", 13, 10, "$"
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>done_msg</strong>     db "done.", 13, 10, "$"
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Korektní varianta přerušovací rutiny pro instrukci <strong>BOUND</strong></h2>

<p>Důvod, proč jsme se ocitli de facto v&nbsp;nekonečné smyčce, spočívá
v&nbsp;tom, že instrukce <strong>BOUND</strong> před vyvoláním přerušovací
rutiny uloží na zásobník adresu instrukce <strong>BOUND</strong> a nikoli
adresu následující instrukce. To znamená, že po dokončení přerušovací rutiny
instrukcí <strong>IRET</strong> se znovu provede test indexu 100 na meze 0..99
a znovu se vyvolá ta stejná subrutina. Musíme se tedy vrátit nikoli přímo na
instrukci <strong>BOUND</strong>, ale <i>za</i> ni. Tato instrukce má délku
čtyř bajtů (operační kód + bajt s&nbsp;určením registru + dva bajty
s&nbsp;adresou), takže musíme ze zásobníku získat původní adresu a tu zvýšit o
hodnotu 4. Jedno z&nbsp;možných řešení může vypadat následovně:</p>

<pre>
<strong>int5_handler</strong>:                   <i>; obsluha preruseni cislo 5</i>
        pusha                   <i>; ulozit vsechny registry</i>
        print index_out_of_bounds_msg
        popa                    <i>; obnovit vsechny registry</i>
        pop ax
        add ax, 4               <i>; preskocit samotnou instrukci BOUND</i>
        push ax
        sti                     <i>; povoleni maskovatelnych preruseni</i>
        iret                    <i>; navrat z preruseni -> nyni se ovsem vracime ZA instrukci BOUND</i>
</pre>

<p>Nyní už by se při spuštění programu mělo na terminálu objevit pouze:</p>

<pre>
index out of bounds!
done.
</pre>

<p>Následuje úplný výpis zdrojového kódu tohoto demonstračního příkladu:</p>

<pre>
<i>; Instrukcni soubor mikroprocesoru Intel 80286.</i>
<i>; Instrukce BOUND - korektni verze programu.</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 286         <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
INT_5_VECTOR equ 5*4 ; adresa vektoru preruseni
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        xor  ax, ax
        mov  es, ax
        mov  di, INT_5_VECTOR   <i>; ES:DI obsahuje adresu, na ktere je adresa obsluhy preruseni 5</i>
&nbsp;
        cli                     <i>; zakaz preruseni</i>
        lea  ax, int5_handler   <i>; zmena offsetove casti adresy</i>
        mov  es:[di], ax
&nbsp;
        mov  ax, cs             <i>; zmena segmentove casti adresy</i>
        mov  es:[di+2], ax
        sti                     <i>; povoleni preruseni</i>
&nbsp;
        mov  ax, 99             <i>; nacteni indexu</i>
        bound ax, [bounds]      <i>; test indexu</i>
&nbsp;
        mov  ax, 100            <i>; nacteni indexu</i>
        bound ax, [bounds]      <i>; test indexu</i>
&nbsp;
        mov  ax, 101            <i>; nacteni indexu</i>
        bound ax, [bounds]      <i>; test indexu</i>
&nbsp;
        print done_msg          <i>; vypis zpravy, ze koncime</i>
&nbsp;
        wait_key
        exit                    <i>; a skutecne skoncime</i>
&nbsp;
<strong>int5_handler</strong>:                   <i>; obsluha preruseni cislo 5</i>
        pusha                   <i>; ulozit vsechny registry</i>
        print index_out_of_bounds_msg
        popa                    <i>; obnovit vsechny registry</i>
        pop ax
        add ax, 4               <i>; preskocit samotnou instrukci BOUND</i>
        push ax
        sti                     <i>; povoleni maskovatelnych preruseni</i>
        iret                    <i>; navrat z preruseni -> nyni se ovsem vracime ZA instrukci BOUND</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
<strong>bounds</strong>  dw 0, 99
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>index_out_of_bounds_msg</strong> db "index out of bounds!", 13, 10, "$"
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>done_msg</strong>     db "done.", 13, 10, "$"
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Bitové posuny a rotace o konstantu větší než 1</h2>

<p>Mikroprocesory Intel 8086 a Intel 8088 podporovaly úplnou sadu instrukcí pro
bitové posuny a rotace:</p>

<table>
<tr><th>Instrukce</th><th>Význam</th></tr>
<tr><td>SHL</td><td>posun bitů doleva</td></tr>
<tr><td>SAL</td><td>aritmetický posun bitů doleva (stejné jako předchozí instrukce)</td></tr>
<tr><td>SHR</td><td>bitový posun doprava</td></tr>
<tr><td>SAR</td><td>aritmetický posun doprava</td></tr>
<tr><td>ROL</td><td>rotace doleva</td></tr>
<tr><td>ROR</td><td>rotace doprava</td></tr>
<tr><td>RCL</td><td>rotace doleva přes Carry</td></tr>
<tr><td>RCR</td><td>rotace doprava přes Carry</td></tr>
</table>

<p>Posun či rotace je přitom provedena o jeden bit nebo o CL bitů (CL je
spodních osm bitů registru CX). U mikroprocesorů 80186 byla navíc přidána
možnost posunů a rotací o <i>n</i> bitů, kde <i>n</i> je celočíselná konstanta.
Program je tedy možné zkrátit, ovšem pozor je nutné dát na to, že zatímco
rotace/posun o jeden bit trvá 2 takty, rotace/posun o <i>n</i> bitů trvá 5+n
taktů, což například v&nbsp;praxi znamená, že posun doprava o dva bity je
výhodnější provést dvojicí instrukci <strong>SHR registr, 1</strong> a nikoli
jedinou instrukcí <strong>SHR registr, 2</strong>.</p>

<p>Podívejme se nyní na úpravu subrutiny pro obarvení pixelu v&nbsp;režimu
320&times;200&times;256, v&nbsp;níž namísto několika posunů o jeden bit
použijeme posuny o větší počet bitů:</p>

<pre>
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice (staci len BL)</i>
<i>; CL - barva</i>
<strong>putpixel</strong>:
        mov dx, 0xa000     <i>; zacatek stranky video RAM</i>
        mov es, dx         <i>; nyni obsahuje ES stranku video RAM</i>
&nbsp;
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
&nbsp;
        mov ax, bx         <i>; y-ova souradnice</i>
        shl ax, 6          <i>; y*64</i>
        add di, ax         <i>; pricist cast y-oveho posunu</i>
        shl ax, 2          <i>; y*256</i>
        add di, ax         <i>; pricist zbytek y-oveho posunu</i>
                           <i>; -> y*64 + y*256 = y*320</i>
&nbsp;
        mov [es:di], cl     <i>; vlastni vykresleni pixelu</i>
&nbsp;
        ret
</pre>

<p><div class="rs-tip-major">Poznámka: druhé <strong>SHL</strong> je vhodné
rozepsat na dvojici <strong>SHL AX, 1</strong>.</div></p>

<p>Celý program, který nastaví grafický režim 320&times;200&times;256 a
následně vykreslí několik úseček, lze upravit následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Pouziti predpocitane tabulky.</i>
<i>; Vykresleni barevnych usecek.</i>
<i>; Urceno pro 80286 a vyssi.</i>
<i>;</i>
&nbsp;
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 286         <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        push 0xa000         <i>; video RAM v textovem rezimu</i>
        pop  es
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov ax, 0
<strong>opak</strong>:
        mov bx, ax          <i>; y-ová souřadnice</i>
&nbsp;
        push ax
        mov cl, al          <i>; barva</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        push ax
        mov cl, al          <i>; barva</i>
        add ax, 10          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        push ax
        mov cl, al          <i>; barva</i>
        add ax, 20          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        inc ax              <i>; pusun x+=1, y+=1</i>
        cmp ax, 200         <i>; hranice obrazovky?</i>
        jne opak            <i>; ne-opakujeme</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice (staci len BL)</i>
<i>; CL - barva</i>
<strong>putpixel</strong>:
        mov dx, 0xa000     <i>; zacatek stranky video RAM</i>
        mov es, dx         <i>; nyni obsahuje ES stranku video RAM</i>
&nbsp;
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
&nbsp;
        mov ax, bx         <i>; y-ova souradnice</i>
        shl ax, 6          <i>; y*64</i>
        add di, ax         <i>; pricist cast y-oveho posunu</i>
        shl ax, 2          <i>; y*256</i>
        add di, ax         <i>; pricist zbytek y-oveho posunu</i>
                           <i>; -> y*64 + y*256 = y*320</i>
&nbsp;
        mov [es:di], cl     <i>; vlastni vykresleni pixelu</i>
&nbsp;
        ret
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Nepodporované instrukce: <strong>POP CS</strong></h2>

<p>V&nbsp;rámci postupného rozšiřování instrukční sady mikroprocesorů rodiny
80x86 se ukázalo, že některé instrukce nejsou užitečné a je tak možné jejich
instrukční kód použít pro odlišné účely. Při přechodu z&nbsp;Intelu 8086/8088
na 80186/80286 došlo k&nbsp;jediné takové úpravě, která se konkrétně týkala
instrukce <strong>POP CS</strong> s&nbsp;operačním kódem 0x0F. Tato instrukce
ze zásobníku přečte šestnáctibitovou hodnotu a tu vloží do segmentového
registru CS, čímž se ovlivní i adresa další instrukce, která se má přečíst
z&nbsp;adresy CS:IP. <strong>POP CS</strong> sama o sobě <i>prakticky</i>
nedává smysl, protože většinou bude na zásobníku plná adresa segment:offset a
v&nbsp;tomto případě lze použít plnohodnotný &bdquo;dlouhý&ldquo;
<strong>RET</strong>. Proto byla instrukce <strong>POP CS</strong> odstraněna a
její operační kód je v&nbsp;novějších typech mikroprocesorů použit pro odlišné
účely.</p>

<pre>
<i>; Instrukcni soubor mikroprocesoru Intel 80386.</i>
<i>;</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 286         <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        push cs
        push ds
        push ss
        push es
&nbsp;
        pop  es
        pop  ss
        pop  ds
        pop  cs
&nbsp;
        wait_key
        exit
</pre>

<pre>
    35 00000007 0F                              pop  cs
</pre>

<pre>
    35          ******************       warning: instruction obsolete and removed from the target CPU [-w+obsolete-removed]
</pre>

<pre>
     1                                  <i>; Instrukcni soubor mikroprocesoru Intel 80386.</i>
     2                                  <i>;</i>
     7                                  <i>;-----------------------------------------------------------------------------</i>
     8                                  
     9                                  BITS 16         <i>; 16bitovy vystup pro DOS</i>
    10                                  CPU 286         <i>; specifikace pouziteho instrukcniho souboru</i>
    11                                  
    12                                  <i>; ukonceni procesu a navrat do DOSu</i>
    13                                  %macro exit 0
    14                                          ret
    15                                  %endmacro
    16                                  
    17                                  <i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
    18                                  %macro wait_key 0
    19                                          xor     ax, ax
    20                                          int     0x16
    21                                  %endmacro
    22                                  
    23                                  <i>;-----------------------------------------------------------------------------</i>
    24                                  org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
    25                                  
    26                                  start:
    27 00000000 0E                              push cs
    28 00000001 1E                              push ds
    29 00000002 16                              push ss
    30 00000003 06                              push es
    31                                  
    32 00000004 07                              pop  es
    33 00000005 17                              pop  ss
    34 00000006 1F                              pop  ds
    35 00000007 0F                              pop  cs
    35          ******************       warning: instruction obsolete and removed from the target CPU [-w+obsolete-removed]
    36                                  
    37                                          wait_key
    19 00000008 31C0                <1>  xor ax, ax
    20 0000000A CD16                <1>  int 0x16
    38
    14 0000000C C3                  <1>  ret
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad s&nbsp;využitím assembleru <strong>NASM</strong>, byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>hello.asm</td><td>program typu &bdquo;Hello world&ldquo; naprogramovaný v&nbsp;assembleru pro systém DOS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm</a></td></tr>
<tr><td> 2</td><td>hello_shorter.asm</td><td>kratší varianta výskoku z&nbsp;procesu zpět do DOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm</a></td></tr>
<tr><td> 3</td><td>hello_wait.asm</td><td>čekání na stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm</a></td></tr>
<tr><td> 4</td><td>hello_macros.asm</td><td>realizace jednotlivých částí programu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>gfx_4_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm</a></td></tr>
<tr><td> 6</td><td>gfx_6_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm</a></td></tr>
<tr><td> 7</td><td>gfx_4_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm</a></td></tr>
<tr><td> 8</td><td>gfx_6_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>gfx_6_fill_1.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm</a></td></tr>
<tr><td>10</td><td>gfx_6_fill_2.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, varianta s&nbsp;instrukcí <strong>LOOP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm</a></td></tr>
<tr><td>11</td><td>gfx_6_fill_3.asm</td><td>vyplnění obrazovky instrukcí <strong>REP STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm</a></td></tr>
<tr><td>12</td><td>gfx_6_fill_4.asm</td><td>vyplnění obrazovky, synchronizace vykreslování s&nbsp;paprskem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>gfx_4_image_1.asm</td><td>vykreslení rastrového obrázku získaného z&nbsp;binárních dat, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm</a></td></tr>
<tr><td>14</td><td>gfx_4_image_2.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm</a></td></tr>
<tr><td>15</td><td>gfx_4_image_3.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm</a></td></tr>
<tr><td>16</td><td>gfx_4_image_4.asm</td><td>korektní vykreslení všech sudých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm</a></td></tr>
<tr><td>17</td><td>gfx_4_image_5.asm</td><td>korektní vykreslení všech sudých i lichých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>gfx_4_image_6.asm</td><td>nastavení barvové palety před vykreslením obrázku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm</a></td></tr>
<tr><td>19</td><td>gfx_4_image_7.asm</td><td>nastavení barvové palety před vykreslením obrázku, snížená intenzita barev</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm</a></td></tr>
<tr><td>20</td><td>gfx_4_image_8.asm</td><td>postupná změna barvy pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>gfx_6_putpixel_1.asm</td><td>vykreslení pixelu, základní varianta se 16bitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm</a></td></tr>
<tr><td>22</td><td>gfx_6_putpixel_2.asm</td><td>vykreslení pixelu, varianta s&nbsp;osmibitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm</a></td></tr>
<tr><td>23</td><td>gfx_6_putpixel_3.asm</td><td>vykreslení pixelu, varianta bez násobení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm</a></td></tr>
<tr><td>24</td><td>gfx_6_putpixel_4.asm</td><td>vykreslení pixelu přes obrázek, nekorektní chování (přepis obrázku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm</a></td></tr>
<tr><td>25</td><td>gfx_6_putpixel_5.asm</td><td>vykreslení pixelu přes obrázek, korektní varianta pro bílé pixely</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>cga_text_mode_1.asm</td><td>standardní textový režim s&nbsp;rozlišením 40&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm</a></td></tr>
<tr><td>27</td><td>cga_text_mode_3.asm</td><td>standardní textový režim s&nbsp;rozlišením 80&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm</a></td></tr>
<tr><td>28</td><td>cga_text_mode_intensity.asm</td><td>změna významu nejvyššího bitu atributového bajtu: vyšší intenzita namísto blikání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm</a></td></tr>
<tr><td>29</td><td>cga_text_mode_cursor.asm</td><td>změna tvaru textového kurzoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm</a></td></tr>
<tr><td>30</td><td>cga_text_gfx_1.asm</td><td>zobrazení &bdquo;rastrové mřížky&ldquo;: pseudografický režim 160&times;25 pixelů (interně textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm</a></td></tr>
<tr><td>31</td><td>cga_text_mode_char_height.asm</td><td>změna výšky znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm</a></td></tr>
<tr><td>32</td><td>cga_text_160x100.asm</td><td>grafický režim 160&times;100 se šestnácti barvami (interně upravený textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>hercules_text_mode_1.asm</td><td>využití standardního textového režimu společně s&nbsp;kartou Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm</a></td></tr>
<tr><td>34</td><td>hercules_text_mode_2.asm</td><td>zákaz blikání v&nbsp;textových režimech</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm</a></td></tr>
<tr><td>35</td><td>hercules_turn_off.asm</td><td>vypnutí generování video signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm</a></td></tr>
<tr><td>36</td><td>hercules_gfx_mode_1.asm</td><td>přepnutí karty Hercules do grafického režimu (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm</a></td></tr>
<tr><td>37</td><td>hercules_gfx_mode_2.asm</td><td>přepnutí karty Hercules do grafického režimu (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm</a></td></tr>
<tr><td>38</td><td>hercules_putpixel.asm</td><td>subrutina pro vykreslení jediného pixelu na kartě Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>ega_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm</a></td></tr>
<tr><td>40</td><td>ega_text_mode_80x43.asm</td><td>zobrazení 43 textových řádků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm</a></td></tr>
<tr><td>41</td><td>ega_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm</a></td></tr>
<tr><td>42</td><td>ega_gfx_mode_640x200.asm</td><td>přepnutí do grafického režimu 640&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm</a></td></tr>
<tr><td>43</td><td>ega_gfx_mode_640x350.asm</td><td>přepnutí do grafického režimu 640&times;350 pixelů se čtyřmi nebo šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm</a></td></tr>
<tr><td>44</td><td>ega_gfx_mode_bitplanes_1.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (základní způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm</a></td></tr>
<tr><td>45</td><td>ega_gfx_mode_bitplanes_2.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (rychlejší způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>ega_320x200_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm</a></td></tr>
<tr><td>47</td><td>ega_640x350_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 640&times;350 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>48</td><td>ega_standard_font.asm</td><td>použití standardního fontu grafické karty EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm</a></td></tr>
<tr><td>49</td><td>ega_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>ega_palette_1.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 320&times;200 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm</a></td></tr>
<tr><td>51</td><td>ega_palette_2.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 640&times;350 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm</a></td></tr>
<tr><td>52</td><td>ega_palette_3.asm</td><td>změna všech barev v&nbsp;barvové paletě s&nbsp;využitím programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm</a></td></tr>
<tr><td>53</td><td>ega_palette_4.asm</td><td>změna všech barev, včetně barvy okraje, v&nbsp;barvové paletě voláním funkce BIOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>vga_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm</a></td></tr>
<tr><td>55</td><td>vga_text_mode_80x50.asm</td><td>zobrazení 50 a taktéž 28 textových řádků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm</a></td></tr>
<tr><td>56</td><td>vga_text_mode_intensity_1.asm</td><td>změna chování atributového bitu pro blikání (nebezpečná varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm</a></td></tr>
<tr><td>57</td><td>vga_text_mode_intensity_2.asm</td><td>změna chování atributového bitu pro blikání (bezpečnější varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm</a></td></tr>
<tr><td>58</td><td>vga_text_mode_9th_column.asm</td><td>modifikace způsobu zobrazení devátého sloupce ve znakových režimech (720 pixelů na řádku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm</a></td></tr>
<tr><td>59</td><td>vga_text_mode_cursor_shape.asm</td><td>změna tvaru textového kurzoru na grafické kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm</a></td></tr>
<tr><td>60</td><td>vga_text_mode_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>vga_gfx_mode_640x480.asm</td><td>přepnutí do grafického režimu 640&times;480 pixelů se šestnácti barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm</a></td></tr>
<tr><td>62</td><td>vga_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů s&nbsp;256 barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm</a></td></tr>
<tr><td>63</td><td>vga_gfx_mode_palette.asm</td><td>změna všech barev v&nbsp;barvové paletě grafické karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm</a></td></tr>
<tr><td>64</td><td>vga_gfx_mode_dac_1.asm</td><td>využití DAC (neočekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm</a></td></tr>
<tr><td>65</td><td>vga_gfx_mode_dac_2.asm</td><td>využití DAC (očekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>66</td><td>vga_640x480_putpixel.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 640&times;480 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm</a></td></tr>
<tr><td>67</td><td>vga_320x200_putpixel_1.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm</a></td></tr>
<tr><td>68</td><td>vga_320x200_putpixel_2.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (rychlejší varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>69</td><td>vga_gfx_mode_dac_3.asm</td><td>přímé využití DAC v&nbsp;grafickém režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>70</td><td>vga_gfx_mode_unchained_step_1.asm</td><td>zobrazení barevných pruhů v&nbsp;režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm</a></td></tr>
<tr><td>71</td><td>vga_gfx_mode_unchained_step_2.asm</td><td>vypnutí zřetězení bitových rovin a změna způsobu adresování pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm</a></td></tr>
<tr><td>72</td><td>vga_gfx_mode_unchained_step_3.asm</td><td>vykreslení barevných pruhů do vybraných bitových rovin</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>73</td><td>vga_gfx_mode_320x400.asm</td><td>nestandardní grafický režim s&nbsp;rozlišením 320&times;400 pixelů a 256 barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm</a></td></tr>
<tr><td>74</td><td>vga_320x200_image.asm</td><td>zobrazení rastrového obrázku ve standardním grafickém režimu 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm</a></td></tr>
<tr><td>75</td><td>vga_320x200_unchained_image_1.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm</a></td></tr>
<tr><td>76</td><td>vga_320x200_unchained_image_2.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm</a></td></tr>
<tr><td>77</td><td>vga_320x400_unchained_image.asm</td><td>zobrazení rastrového obrázku v&nbsp;nestandardním režimu 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>78</td><td>vga_vertical_scroll_1.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm</a></td></tr>
<tr><td>79</td><td>vga_vertical_scroll_2.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm</a></td></tr>
<tr><td>80</td><td>vga_split_screen_1.asm</td><td>režim split-screen a scrolling, nefunční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm</a></td></tr>
<tr><td>81</td><td>vga_split_screen_2.asm</td><td>režim split-screen a scrolling, plně funkční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm</a></td></tr>
<tr><td>82</td><td>vga_horizontal_scroll_1.asm</td><td>horizontální scrolling bez rozšíření počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm</a></td></tr>
<tr><td>83</td><td>vga_horizontal_scroll_2.asm</td><td>horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm</a></td></tr>
<tr><td>84</td><td>vga_horizontal_scroll_3.asm</td><td>jemný horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>85</td><td>vga_320x240_image.asm</td><td>nastavení grafického režimu Mode-X, načtení a vykreslení obrázku, scrolling</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>86</td><td>io.asm</td><td>knihovna maker pro I/O operace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm</a></td></tr>
<tr><td>87</td><td>vga_lib.asm</td><td>knihovna maker a podprogramů pro programování karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_lib.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_lib.asm</a></td></tr>
<tr><td>88</td><td>vga_320x240_lib.asm</td><td>nastavení grafického režimu Mode-X, tentokrát knihovními funkcemi</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_lib.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_lib.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>89</td><td>vga_bitblt_1.asm</td><td>první (naivní) implementace operace <i>BitBLT</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_1.asm</a></td></tr>
<tr><td>90</td><td>vga_bitblt_2.asm</td><td>operace <i>BitBLT</i> s&nbsp;výběrem bitových rovin pro zápis</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_2.asm</a></td></tr>
<tr><td>91</td><td>vga_bitblt_3.asm</td><td>operace <i>BitBLT</i> s&nbsp;výběrem bitových rovin pro čtení i zápis</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_3.asm</a></td></tr>
<tr><td>92</td><td>vga_bitblt_4.asm</td><td>korektní <i>BitBLT</i> pro 16barevný režim, realizace makry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_4.asm</a></td></tr>
<tr><td>93</td><td>vga_bitblt_5.asm</td><td>korektní <i>BitBLT</i> pro 16barevný režim, realizace podprogramem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>94</td><td>vga_bitblt_rotate.asm</td><td>zápisový režim s&nbsp;rotací bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_rotate.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_rotate.asm</a></td></tr>
<tr><td>95</td><td>vga_bitblt_fast.asm</td><td>rychlá korektní 32bitová operace typu <i>BitBLT</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_fast.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_fast.asm</a></td></tr>
<tr><td>96</td><td>vga_320x400_bitblt_1.asm</td><td>přenos obrázku v&nbsp;režimu 320&times;400 operací <i>BitBLT</i> (neúplná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_1.asm</a></td></tr>
<tr><td>97</td><td>vga_320x400_bitblt_2.asm</td><td>přenos obrázku v&nbsp;režimu 320&times;400 operací <i>BitBLT</i> (úplná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_2.asm</a></td></tr>
<tr><td>98</td><td>vga_write_modes_1.asm</td><td>volitelné zápisové režimy grafické karty VGA, zápis bez úpravy latche</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_1.asm</a></td></tr>
<tr><td>99</td><td>vga_write_modes_2.asm</td><td>volitelné zápisové režimy grafické karty VGA, zápis s&nbsp;modifikací latche</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_2.asm</a></td></tr>
<tr><td>100</td><td>vga_write_modes_3.asm</td><td>volitelné zápisové režimy grafické karty VGA, cílená modifikace latche vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>101</td><td>instruction_jump.asm</td><td>použití instrukce <strong>JMP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jump.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jump.asm</a></td></tr>
<tr><td>102</td><td>instruction_jnz.asm</td><td>použití instrukce <strong>JNZ</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jnz.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jnz.asm</a></td></tr>
<tr><td>103</td><td>instruction_jz_jmp.asm</td><td>použití instrukcí <strong>JZ</strong> a <strong>JMP</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jz_jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jz_jmp.asm</a></td></tr>
<tr><td>104</td><td>instruction_loop.asm</td><td>použití instrukce <strong>LOOP</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_loop.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>105</td><td>instruction_template.asm</td><td>šablona všech následujících demonstračních příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_template.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_template.asm</a></td></tr>
<tr><td>106</td><td>instruction_print_hex.asm</td><td>tisk osmibitové hexadecimální hodnoty</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_print_hex.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_print_hex.asm</a></td></tr>
<tr><td>107</td><td>instruction_xlat.asm</td><td>využití instrukce <strong>XLAT</strong> pro získání tisknutelné hexadecimální cifry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_xlat.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_xlat.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>108</td><td>instruction_daa.asm</td><td>operace součtu s&nbsp;využitím binární i BCD aritmetiky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa.asm</a></td></tr>
<tr><td>109</td><td>instruction_daa_sub.asm</td><td>instrukce <strong>DAA</strong> po provedení operace rozdílu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa_sub.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa_sub.asm</a></td></tr>
<tr><td>110</td><td>instruction_das.asm</td><td>instrukce <strong>DAS</strong> po provedení operace rozdílu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_das.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_das.asm</a></td></tr>
<tr><td>111</td><td>instruction_aaa.asm</td><td>korekce výsledku na jedinou BCD cifru operací <strong>AAA</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aaa.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aaa.asm</a></td></tr>
<tr><td>112</td><td>instruction_mul.asm</td><td>ukázka výpočtu součinu dvou osmibitových hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_mul.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_mul.asm</a></td></tr>
<tr><td>113</td><td>instruction_aam.asm</td><td>BCD korekce po výpočtu součinu instrukcí <strong>AAM</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aam.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aam.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>114</td><td>instruction_stosb.asm</td><td>blokový zápis dat instrukcí <strong>STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_stosb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_stosb.asm</a></td></tr>
<tr><td>115</td><td>instruction_rep_stosb.asm</td><td>opakované provádění instrukce <strong>STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_stosb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_stosb.asm</a></td></tr>
<tr><td>116</td><td>instruction_lodsb.asm</td><td>čtení dat instrukcí <strong>LODSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_lodsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_lodsb.asm</a></td></tr>
<tr><td>117</td><td>instruction_movsb.asm</td><td>přenos jednoho bajtu instrukcí <strong>MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_movsb.asm</a></td></tr>
<tr><td>118</td><td>instruction_rep_movsb.asm</td><td>blokový přenos po bajtech instrukcí <strong>MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_movsb.asm</a></td></tr>
<tr><td>119</td><td>instruction_rep_scas.asm</td><td>vyhledávání v&nbsp;řetězci instrukcí <strong>SCAS</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_scas.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_scas.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>120</td><td>vga_320x200_image_0B.asm</td><td>výsledek blokového přenosu ve chvíli, kdy je <strong>CX=0</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_0B.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_0B.asm</a></td></tr>
<tr><td>121</td><td>vga_320x200_image_64kB.asm</td><td>výsledek blokového přenosu ve chvíli, kdy je <strong>CX=0xffff</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_64kB.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_64kB.asm</a></td></tr>
<tr><td>122</td><td>vga_320x200_image_movsb.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb.asm</a></td></tr>
<tr><td>123</td><td>vga_320x200_image_movsw.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsw.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsw.asm</a></td></tr>
<tr><td>124</td><td>vga_320x200_image_movsd.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSD</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsd.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsd.asm</a></td></tr>
<tr><td>125</td><td>vga_320x200_image_movsb_forward.asm</td><td>blokový přenos překrývajících se bloků paměti (zvyšující se adresy)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_forward.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_forward.asm</a></td></tr>
<tr><td>126</td><td>vga_320x200_image_movsb_backward_1.asm</td><td>blokový přenos překrývajících se bloků paměti (snižující se adresy, nekorektní nastavení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_1.asm</a></td></tr>
<tr><td>127</td><td>vga_320x200_image_movsb_backward_2.asm</td><td>blokový přenos překrývajících se bloků paměti (snižující se adresy, korektní nastavení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>128</td><td>sound_bell.asm</td><td>přehrání zvuku pomocí tisku ASCII znaku BELL</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_bell.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_bell.asm</a></td></tr>
<tr><td>129</td><td>sound_beep.asm</td><td>přehrání zvuku o zadané frekvenci na PC Speakeru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_beep.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_beep.asm</a></td></tr>
<tr><td>130</td><td>sound_play_pitch.asm</td><td>přehrání zvuku o zadané frekvenci na PC Speakeru, použití maker</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_play_pitch.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_play_pitch.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>131</td><td>sound_opl2_basic.asm</td><td>přehrání komorního A na OPL2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_basic.asm</a></td></tr>
<tr><td>132</td><td>sound_opl2_table.asm</td><td>přehrání komorního A na OPL2, použití tabulky s&nbsp;hodnotami registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>133</td><td>sound_opl2_table_2.asm</td><td>přepis tabulky s&nbsp;obsahy registrů pro přehrání komorního A</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table_2.asm</a></td></tr>
<tr><td>134</td><td>sound_key_on.asm</td><td>přímé ovládání bitu KEY ON mezerníkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_key_on.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_key_on.asm</a></td></tr>
<tr><td>135</td><td>sound_adsr.asm</td><td>nastavení obálky pro tón přehrávaný prvním kanálem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_adsr.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_adsr.asm</a></td></tr>
<tr><td>136</td><td>sound_modulation.asm</td><td>řízení frekvence modulátoru klávesami 1 a 0</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_modulation.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_modulation.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>137</td><td>keyboard_basic.asm</td><td>přímá práce s&nbsp;klávesnicí IBM PC</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/keyboard_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/keyboard_basic.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>138</td><td>sound_stereo_opl2.asm</td><td>stereo zvuk v&nbsp;konfiguraci DualOPL2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_stereo_opl2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_stereo_opl2.asm</a></td></tr>
<tr><td>139</td><td>sound_opl2_multichannel.asm</td><td>vícekanálový zvuk na OPL2 (klávesy), delší varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel.asm</a></td></tr>
<tr><td>140</td><td>sound_opl2_multichannel_2.asm</td><td>vícekanálový zvuk na OPL2 (klávesy), kratší varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel_2.asm</a></td></tr>
<tr><td>141</td><td>sound_opl3_stereo_1.asm</td><td>stereo výstup na OPL3 (v&nbsp;kompatibilním režimu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_1.asm</a></td></tr>
<tr><td>142</td><td>sound_opl3_stereo_2.asm</td><td>stereo výstup na OPL3 (v&nbsp;režimu OPL3)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_2.asm</a></td></tr>
<tr><td>143</td><td>sound_opl3_multichannel.asm</td><td>vícekanálový zvuk na OPL3 (klávesy)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_multichannel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_multichannel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>144</td><td>sound_opl3_waveform_1.asm</td><td>interaktivní modifikace tvaru vlny u prvního operátoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_1.asm</a></td></tr>
<tr><td>145</td><td>sound_opl3_waveform_2.asm</td><td>oprava chyby: povolení režimu kompatibilního s&nbsp;OPL3</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_2.asm</a></td></tr>
<tr><td>146</td><td>sound_opl3_waveform_3.asm</td><td>vliv tvaru vln na zvukový kanál s&nbsp;FM syntézou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_3.asm</a></td></tr>
<tr><td>147</td><td>sound_opl3_waveform_4.asm</td><td>modifikace tvaru vlny nosné vlny i modulátoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_4.asm</a></td></tr>
<tr><td>148</td><td>sound_opl3_4operators_1.asm</td><td>výběr AM/FM režimu ve čtyřoperátorovém nastavení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_1.asm</a></td></tr>
<tr><td>149</td><td>sound_opl3_4operators_2.asm</td><td>výběr AM/FM režimu ve čtyřoperátorovém nastavení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>150</td><td>timer_basic.asm</td><td>základní obsluha přerušení od časovače/čítače</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_basic.asm</a></td></tr>
<tr><td>151</td><td>timer_restore.asm</td><td>obnovení původní obsluhy přerušení při ukončování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore.asm</a></td></tr>
<tr><td>152</td><td>timer_restore_better_structure.asm</td><td>refaktoring předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore_better_structure.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore_better_structure.asm</a></td></tr>
<tr><td>153</td><td>timer_faster_clock.asm</td><td>zrychlení čítače na 100 přerušení za sekundu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_faster_clock.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_faster_clock.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>154</td><td>instruction_push_imm.asm</td><td>instrukce <strong>PUSH</strong> s&nbsp;konstantou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_imm.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_imm.asm</a></td></tr>
<tr><td>155</td><td>instruction_imul_imm.asm</td><td>instrukce <strong>IMUL</strong> s&nbsp;konstantou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_imul_imm.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_imul_imm.asm</a></td></tr>
<tr><td>156</td><td>instruction_into_1.asm</td><td>instrukce <strong>INTO</strong> s&nbsp;obsluhou přerušení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_1.asm</a></td></tr>
<tr><td>157</td><td>instruction_into_2.asm</td><td>instrukce <strong>INTO</strong> s&nbsp;obsluhou přerušení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_2.asm</a></td></tr>
<tr><td>158</td><td>instruction_bound_1.asm</td><td>instrukce <strong>BOUND</strong> s&nbsp;obsluhou přerušení (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_1.asm</a></td></tr>
<tr><td>159</td><td>instruction_bound_2.asm</td><td>instrukce <strong>BOUND</strong> s&nbsp;obsluhou přerušení (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_2.asm</a></td></tr>
<tr><td>160</td><td>vga_320x200_putpixel_286.asm</td><td>instrukce bitového posunu s&nbsp;konstantou větší než 1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_286.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_286.asm</a></td></tr>
<tr><td>161</td><td>instruction_push_pop.asm</td><td>instrukce <strong>PUSH</strong> a <strong>POP</strong> se všemi pracovními registry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop.asm</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>DOSBox<br />
<a href="https://www.dosbox.com/">https://www.dosbox.com/</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Hercules Graphics Card (HCG)<br />
<a href="https://en.wikipedia.org/wiki/Hercules_Graphics_Card">https://en.wikipedia.org/wiki/Hercules_Graphics_Card</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf">https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://yassinebridi.github.io/asm-docs/8086_instruction_set.html">https://yassinebridi.github.io/asm-docs/8086_instruction_set.html</a>
</li>

<li>8088 MPH by Hornet + CRTC + DESiRE (final version)<br />
<a href="https://www.youtube.com/watch?v=hNRO7lno_DM">https://www.youtube.com/watch?v=hNRO7lno_DM</a>
</li>

<li>Area 5150 by CRTC &amp; Hornet (Party Version) / IBM PC+CGA Demo, Hardware Capture<br />
<a href="https://www.youtube.com/watch?v=fWDxdoRTZPc">https://www.youtube.com/watch?v=fWDxdoRTZPc</a>
</li>

<li>80x86 Integer Instruction Set Timings (8088 - Pentium)<br />
<a href="http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf">http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf</a>
</li>

<li>Colour Graphics Adapter: Notes<br />
<a href="https://www.seasip.info/VintagePC/cga.html">https://www.seasip.info/VintagePC/cga.html</a>
</li>

<li>Restoring A Vintage CGA Card With Homebrew HASL<br />
<a href="https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/">https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/</a>
</li>

<li>Demoing An 8088<br />
<a href="https://hackaday.com/2015/04/10/demoing-an-8088/">https://hackaday.com/2015/04/10/demoing-an-8088/</a>
</li>

<li>Video Memory Layouts<br />
<a href="http://www.techhelpmanual.com/89-video_memory_layouts.html">http://www.techhelpmanual.com/89-video_memory_layouts.html</a>
</li>

<li>Screen Attributes<br />
<a href="http://www.techhelpmanual.com/87-screen_attributes.html">http://www.techhelpmanual.com/87-screen_attributes.html</a>
</li>

<li>IBM PC Family  -  BIOS Video Modes<br />
<a href="https://www.minuszerodegrees.net/video/bios_video_modes.htm">https://www.minuszerodegrees.net/video/bios_video_modes.htm</a>
</li>

<li>EGA Functions<br />
<a href="https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega">https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega</a>
</li>

<li>Why the EGA can only use 16 of its 64 colours in 200-line modes<br />
<a href="https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/">https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/</a>
</li>

<li>How 16 colors saved PC gaming - the story of EGA graphics<br />
<a href="https://www.custompc.com/retro-tech/ega-graphics">https://www.custompc.com/retro-tech/ega-graphics</a>
</li>

<li>List of 16-bit computer color palettes<br />
<a href="https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes">https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes</a>
</li>

<li>Why were those colors chosen to be the default palette for 256-color VGA?<br />
<a href="https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga">https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga</a>
</li>

<li>VGA Color Palettes<br />
<a href="https://www.fountainware.com/EXPL/vga_color_palettes.htm">https://www.fountainware.com/EXPL/vga_color_palettes.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page<br />
<a href="http://www.osdever.net/FreeVGA/vga/vga.htm">http://www.osdever.net/FreeVGA/vga/vga.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page - sequencer<br />
<a href="http://www.osdever.net/FreeVGA/vga/seqreg.htm">http://www.osdever.net/FreeVGA/vga/seqreg.htm</a>
</li>

<li>VGA Basics<br />
<a href="http://www.brackeen.com/vga/basics.html">http://www.brackeen.com/vga/basics.html</a>
</li>

<li>Introduction to VGA Mode 'X'<br />
<a href="https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html">https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html</a>
</li>

<li>VGA Mode-X<br />
<a href="https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp">https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp</a>
</li>

<li>Mode-X: 256-Color VGA Magic<br />
<a href="https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf">https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf</a>
</li>

<li>Instruction Format in 8086 Microprocessor<br />
<a href="https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx">https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx</a>
</li>

<li>How to use "AND," "OR," and "XOR" modes for VGA Drawing<br />
<a href="https://retrocomputing.stackexchange.com/questions/21936/how-to-use-and-or-and-xor-modes-for-vga-drawing">https://retrocomputing.stackexchange.com/questions/21936/how-to-use-and-or-and-xor-modes-for-vga-drawing</a>
</li>

<li>VGA Hardware<br />
<a href="https://wiki.osdev.org/VGA_Hardware">https://wiki.osdev.org/VGA_Hardware</a>
</li>

<li>Programmer's Guide to Yamaha YMF 262/OPL3 FM Music Synthesizer<br />
<a href="https://moddingwiki.shikadi.net/wiki/OPL_chip">https://moddingwiki.shikadi.net/wiki/OPL_chip</a>
</li>

<li>Does anybody understand how OPL2 percussion mode works?<br />
<a href="https://forum.vcfed.org/index.php?threads/does-anybody-understand-how-opl2-percussion-mode-works.60925/">https://forum.vcfed.org/index.php?threads/does-anybody-understand-how-opl2-percussion-mode-works.60925/</a>
</li>

<li>Yamaha YMF262 OPL3 music - MoonDriver for OPL3 DEMO [Oscilloscope View]<br />
<a href="https://www.youtube.com/watch?v=a7I-QmrkAak">https://www.youtube.com/watch?v=a7I-QmrkAak</a>
</li>

<li>Yamaha OPL vs OPL2 vs OPL3 comparison<br />
<a href="https://www.youtube.com/watch?v=5knetge5Gs0">https://www.youtube.com/watch?v=5knetge5Gs0</a>
</li>

<li>OPL3 Music Crockett's Theme<br />
<a href="https://www.youtube.com/watch?v=HXS008pkgSQ">https://www.youtube.com/watch?v=HXS008pkgSQ</a>
</li>

<li>Bad Apple (Adlib Tracker - OPL3)<br />
<a href="https://www.youtube.com/watch?v=2lEPH6Y3Luo">https://www.youtube.com/watch?v=2lEPH6Y3Luo</a>
</li>

<li>FM Synthesis Chips, Codecs and DACs<br />
<a href="https://www.dosdays.co.uk/topics/fm_synthesizers.php">https://www.dosdays.co.uk/topics/fm_synthesizers.php</a>
</li>

<li>The Zen Challenge - YMF262 OPL3 Original (For an upcoming game)<br />
<a href="https://www.youtube.com/watch?v=6JlFIFz1CFY">https://www.youtube.com/watch?v=6JlFIFz1CFY</a>
</li>

<li>[adlib tracker II techno music - opl3] orbit around alpha andromedae I<br />
<a href="https://www.youtube.com/watch?v=YqxJCu_WFuA">https://www.youtube.com/watch?v=YqxJCu_WFuA</a>
</li>

<li>[adlib tracker 2 music - opl3 techno] hybridisation process on procyon-ii<br />
<a href="https://www.youtube.com/watch?v=daSV5mN0sJ4">https://www.youtube.com/watch?v=daSV5mN0sJ4</a>
</li>

<li>Hyper Duel - Black Rain (YMF262 OPL3 Cover)<br />
<a href="https://www.youtube.com/watch?v=pu_mzRRq8Ho">https://www.youtube.com/watch?v=pu_mzRRq8Ho</a>
</li>

<li>IBM 5155-5160 Technical Reference<br />
<a href="https://www.minuszerodegrees.net/manuals/IBM/IBM_5155_5160_Technical_Reference_6280089_MAR86.pdf">https://www.minuszerodegrees.net/manuals/IBM/IBM_5155_5160_Technical_Reference_6280089_MAR86.pdf</a>
</li>

<li>a ymf262/opl3+pc speaker thing i made<br />
<a href="https://www.youtube.com/watch?v=E-Mx0lEmnZ0">https://www.youtube.com/watch?v=E-Mx0lEmnZ0</a>
</li>

<li>[OPL3] Like a Thunder<br />
<a href="https://www.youtube.com/watch?v=MHf06AGr8SU">https://www.youtube.com/watch?v=MHf06AGr8SU</a>
</li>

<li>(PC SPEAKER) bad apple<br />
<a href="https://www.youtube.com/watch?v=LezmKIIHyUg">https://www.youtube.com/watch?v=LezmKIIHyUg</a>
</li>

<li>Powering devices from PC parallel port<br />
<a href="http://www.epanorama.net/circuits/lptpower.html">http://www.epanorama.net/circuits/lptpower.html</a>
</li>

<li>Magic Mushroom (demo pro PC s DOSem)<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards//mushroom.rar">http://www.crossfire-designs.de/download/articles/soundcards//mushroom.rar</a>
</li>

<li>Píseň Magic Mushroom - originál<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_converted.mp3">http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_converted.mp3</a>
</li>

<li>Píseň Magic Mushroom - hráno na PC Speakeru<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_speaker.mp3">http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_speaker.mp3</a>
</li>

<li>Pulse Width Modulation (PWM) Simulation Example<br />
<a href="http://decibel.ni.com/content/docs/DOC-4599">http://decibel.ni.com/content/docs/DOC-4599</a>
</li>

<li>Resistor/Pulse Width Modulation DAC<br />
<a href="http://www.k9spud.com/traxmod/pwmdac.php">http://www.k9spud.com/traxmod/pwmdac.php</a>
</li>

<li>Class D Amplifier<br />
<a href="http://en.wikipedia.org/wiki/Electronic_amplifier#Class_D">http://en.wikipedia.org/wiki/Electronic_amplifier#Class_D</a>
</li>

<li>Covox Speech Thing / Disney Sound Source (1986)<br />
<a href="http://www.crossfire-designs.de/index.php?lang=en&amp;what=articles&amp;name=showarticle.htm&amp;article=soundcards/&amp;page=5">http://www.crossfire-designs.de/index.php?lang=en&amp;what=articles&amp;name=showarticle.htm&amp;article=soundcards/&amp;page=5</a>
</li>

<li>Covox Digital-Analog Converter (Rusky, obsahuje schémata)<br />
<a href="http://phantom.sannata.ru/konkurs/netskater002.shtml">http://phantom.sannata.ru/konkurs/netskater002.shtml</a>
</li>

<li>PC-GPE on the Web<br />
<a href="http://bespin.org/~qz/pc-gpe/">http://bespin.org/~qz/pc-gpe/</a>
</li>

<li>Keyboard Synthesizer<br />
<a href="http://www.solarnavigator.net/music/instruments/keyboards.htm">http://www.solarnavigator.net/music/instruments/keyboards.htm</a>
</li>

<li>FMS - Fully Modular Synthesizer<br />
<a href="http://fmsynth.sourceforge.net/">http://fmsynth.sourceforge.net/</a>
</li>

<li>Javasynth<br />
<a href="http://javasynth.sourceforge.net/">http://javasynth.sourceforge.net/</a>
</li>

<li>Software Sound Synthesis &amp; Music Composition Packages<br />
<a href="http://www.linux-sound.org/swss.html">http://www.linux-sound.org/swss.html</a>
</li>

<li>Mx44.1 Download Page (software synthesizer for linux)<br />
<a href="http://hem.passagen.se/ja_linux/">http://hem.passagen.se/ja_linux/</a>
</li>

<li>Software synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Software_synthesizer">http://en.wikipedia.org/wiki/Software_synthesizer</a>
</li>

<li>Frequency modulation synthesis<br />
<a href="http://en.wikipedia.org/wiki/Frequency_modulation_synthesis">http://en.wikipedia.org/wiki/Frequency_modulation_synthesis</a>
</li>

<li>Yamaha DX7<br />
<a href="http://en.wikipedia.org/wiki/Yamaha_DX7">http://en.wikipedia.org/wiki/Yamaha_DX7</a>
</li>

<li>Wave of the Future<br />
<a href="http://www.wired.com/wired/archive/2.03/waveguides_pr.html">http://www.wired.com/wired/archive/2.03/waveguides_pr.html</a>
</li>

<li>Analog synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Analog_synthesizer">http://en.wikipedia.org/wiki/Analog_synthesizer</a>
</li>

<li>Minimoog<br />
<a href="http://en.wikipedia.org/wiki/Minimoog">http://en.wikipedia.org/wiki/Minimoog</a>
</li>

<li>Moog synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Moog_synthesizer">http://en.wikipedia.org/wiki/Moog_synthesizer</a>
</li>

<li>Tutorial for Frequency Modulation Synthesis<br />
<a href="http://www.sfu.ca/~truax/fmtut.html">http://www.sfu.ca/~truax/fmtut.html</a>
</li>

<li>An Introduction To FM<br />
<a href="http://ccrma.stanford.edu/software/snd/snd/fm.html">http://ccrma.stanford.edu/software/snd/snd/fm.html</a>
</li>

<li>John Chowning<br />
<a href="http://en.wikipedia.org/wiki/John_Chowning">http://en.wikipedia.org/wiki/John_Chowning</a>
</li>

<li>I'm Impressed, Adlib Music is AMAZING!<br />
<a href="https://www.youtube.com/watch?v=PJNjQYp1ras">https://www.youtube.com/watch?v=PJNjQYp1ras</a>
</li>

<li>Milinda- Diode Milliampere ( OPL3 )<br />
<a href="https://www.youtube.com/watch?v=oNhazT5HG0E">https://www.youtube.com/watch?v=oNhazT5HG0E</a>
</li>

<li>Dune 2 - Roland MT-32 Soundtrack <br />
<a href="https://www.youtube.com/watch?v=kQADZeB-z8M">https://www.youtube.com/watch?v=kQADZeB-z8M</a>
</li>

<li>Interrupts<br />
<a href="https://wiki.osdev.org/Interrupts#Types_of_Interrupts">https://wiki.osdev.org/Interrupts#Types_of_Interrupts</a>
</li>

<li>Assembly8086SoundBlasterDmaSingleCycleMode<br />
<a href="https://github.com/leonardo-ono/Assembly8086SoundBlasterDmaSingleCycleMode/blob/master/sbsc.asm">https://github.com/leonardo-ono/Assembly8086SoundBlasterDmaSingleCycleMode/blob/master/sbsc.asm</a>
</li>

<li>Interrupts in 8086 microprocessor<br />
<a href="https://www.geeksforgeeks.org/interrupts-in-8086-microprocessor/">https://www.geeksforgeeks.org/interrupts-in-8086-microprocessor/</a>
</li>

<li>Interrupt Structure of 8086<br />
<a href="https://www.eeeguide.com/interrupt-structure-of-8086/">https://www.eeeguide.com/interrupt-structure-of-8086/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

