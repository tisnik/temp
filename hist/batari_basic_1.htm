<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba her pro Atari 2600 v Batari BASICu: úkol pro hardcode programátory</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba her pro Atari 2600 v Batari BASICu: úkol pro hardcode programátory</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Okolo některých osmibitových herních konzolí (zejména se to týká legendárních konzolí Atari 2600 a Nintendo Entertainment System - NES) existuje komunita vývojářů, z nichž někteří pro tyto stroje dodnes vytváří nové hry. V případě Atari 2600 lze využít assembler nebo velmi dobře použitelný Batari BASIC.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba her pro Atari 2600 v&nbsp;Batari BASICu: úkol pro hardcode programátory</a></p>
<p><a href="#k02">2. Základní technické parametry herní konzole Atari 2600</a></p>
<p><a href="#k03">3. Komplikovaný vývoj her pro osmibitové herní konzole</a></p>
<p><a href="#k04">4. Oficiální vývojové prostředí pro konzole Atari 2600 a Atari 7800</a></p>
<p><a href="#k05">5. Vývoj her pro konzoli Atari 2600 v&nbsp;současnosti aneb kouzlo minimalizmu</a></p>
<p><a href="#k06">6. Současné vývojové a testovací nástroje používané pro vývoj homebrew her pro Atari 2600: hardcore varianta</a></p>
<p><a href="#k07">7. Je možné pro Atari 2600 programovat i ve vyšších programovacích jazycích?</a></p>
<p><a href="#k08">8. Projekt Batari BASIC</a></p>
<p><a href="#k09">9. Překlad Batari BASICu</a></p>
<p><a href="#k10">10. Příprava assembleru <strong>dasm</strong></a></p>
<p><a href="#k11">11. Instalace emulátoru herní konzole Atari 2600</a></p>
<p><a href="#k12">12. Překlad a spuštění demonstračního programu</a></p>
<p><a href="#k13">13. Vytvoření vlastního programu &ndash; vykreslení textu na pozadí</a></p>
<p><a href="#k14">14. Změna barvy herní plochy modifikací řídicího registru</a></p>
<p><a href="#k15">15. Zobrazení střely</a></p>
<p><a href="#k16">16. Posun střely joystickem</a></p>
<p><a href="#k17">17. Změna barvy střely tlačítkem joysticku</a></p>
<p><a href="#k18">18. Čísla řádků ve zdrojových kódech</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba her pro Atari 2600 v&nbsp;Batari BASICu: úkol pro hardcode programátory</h2>

<p><i>&bdquo;A minimum is required to program the beast.&ldquo;</i></p>

<p>Okolo některých osmibitových herních konzolí (zejména se to týká
legendárních konzolí <i>Atari 2600</i> a <i>Nintendo Entertainment System
&ndash; NES</i>) se vytvořila komunita vývojářů, z&nbsp;nichž někteří dodnes
vytváří nové hry, které jsou většinou dostupné ve zdrojové a binární podobě
(určeno především pro emulátory herních konzolí), tak i v&nbsp;některých
případech ve formě paměťové cartridge (určeno pro původní hardware, zde se
samozřejmě již musí za cartridge i za její doručení platit &ndash; ovšem
vlastnit fyzický HW je něco, co mnozí lidé oceňují, podobně jako například
vlastnictví hudebního nosiče). Zajímavý je i fakt, že se tyto herní konzole
používaly popř.&nbsp;dodnes používají pro výuku programování, především
s&nbsp;orientací na počítačovou grafiky. Propagátorem tohoto netradičního
způsobu výuky je dnes <i>Ian Bogost</i>, který na téma programování a návrhu
her napsal i několik článků a knih. Důvody, proč i v&nbsp;současnosti mají
osmibitové konzole své (mnohdy skalní) zastánce, si řekneme za chvíli.</p>

<a href="http://i.iinfo.cz/images/207/70hist1-1.png"><img src="http://i.iinfo.cz/images/207/70hist1-1-prev.png" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 1: Herní konzole Atari 2600 byla navržena tak, aby dokázala
provozovat jednoduché hry typu Combat. Později se ovšem objevily i 3D hry atd.,
které z&nbsp;dostupného hardware vyždímaly téměř nemožné.</i></p>

<p>Proč by se však měl někdo vůbec zajímat o tak &bdquo;předpotopní&ldquo; věc,
jako je konzole Atari 2600 nebo (můj druhý tip &ndash; poněkud překvapivě)
například ZX Spectrum? Může se jednat o souběh několika zájmů. V&nbsp;první
řadě je programování osmibitových čipů mnohdy skutečná &bdquo;challenge&ldquo;,
na rozdíl od některých jiných výzev, které mohou vypadat více uměle. A ve druhé
řadě můžeme v&nbsp;poslední době vidět poměrně velkou popularitu retro her a
knihoven určených pro tvorbu takových her. Takže pokud má vývojář pocit, že
programovat hru v&nbsp;Pythonu, která vyžaduje pro svůj běh i5 a 500 MB RAM a
nabízí &bdquo;retro vzhled&ldquo;, je do určité míry obelhávání sebe sama, může
si otestovat své schopnosti právě vytvořením nějaké jednoduché hry pro Atari
2600, složitější hry pro ZX Spectrum (či jiný oblíbený osmibit) popř.&nbsp;již
komplexní hry určené například pro Atari ST či Amigu (nebo klidně i PC a DOS).
Ve výsledku se sice nebude jednat o komerční trhák, ovšem minimálně několik
tisícovek stejně zapálených lidí bude moci takový SW spustit a uznale pokývat
hlavou.</p>

<p>V&nbsp;následující tabulce jsou pro ilustraci vypsány základní technické
parametry herní konzole <i>Atari 2600</i>, z&nbsp;nichž je patrné,
s&nbsp;jakými zásadními překážkami se potenciální vývojář setká:</p>

<table>
<tr><td>Mikroprocesor</td><td>MOS 6507</td></tr>
<tr><td>Grafický řadič</td><td>TIA</td></tr>
<tr><td>Počet barev</td><td>128 NTSC, 104 PAL, pouze 8 SECAM</td></tr>
<tr><td>Zvuková syntéza</td><td>TIA</td></tr>
<tr><td>Hodinová frekvence</td><td>1,19 MHz</td></tr>
<tr><td>Adresový rozsah</td><td>8192 bajtů</td></tr>
<tr><td>Kapacita RAM</td><td>128 bajtů</td></tr>
<tr><td>Kapacita ROM</td><td>0 bajtů</td></tr>
<tr><td>Kapacita ROM/EPROM na cartridge</td><td>standardně 4 kB, s&nbsp;bankou i 64 kB</td></tr>
<tr><td>Vstupy</td><td>2&times; digitální joystick, 2&times; paddle</td></tr>
<tr><td>Výstup</td><td>televizní signál (úpravou lze získat i kompozitní video)</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: samostatnou kapitolou je grafický
subsystém, který sám o sobě může vývojářům způsobit velké bolení hlavy. Jak
uvidíme dále, je tento problém částečně řešen Batari BASICem, který pro tento
účel nabízí již naprogramované <i>kernely</i>.</div></p>

<a href="http://i.iinfo.cz/images/207/70hist1-2.png"><img src="http://i.iinfo.cz/images/207/70hist1-2-prev.png" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 2: Hra Outlaw se dočkala konverze snad na všechny počítačové
platformy. Její princip je jednoduchý a přitom se jedná o zábavnou hru.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní technické parametry herní konzole Atari 2600</h2>

<p>Při návrhu herní konzole <i>Atari 2600</i> se její konstruktéři snažili o
vytvoření co nejjednoduššího hardware, protože (v&nbsp;kontextu doby zcela
správně) předpokládali, že většinu funkcionality by mělo zařídit programové
vybavení a nikoli složitý a především drahý hardware. Navíc jednodušší hardware
samozřejmě znamenal snížení výsledné ceny herní konzole na úroveň dostupnou i
pro průměrné americké rodiny, což se ukázalo být velmi důležité.</p>

<a href="http://i.iinfo.cz/images/320/70hist2-5.png"><img src="http://i.iinfo.cz/images/320/70hist2-5-prev.png" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 3: Grafika hry Breakout je velmi jednoduchá a dosti hrubá
(číslice se skóre, počtem životů a úrovní jsou pravděpodobně přímo vykreslovány
do pozadí, které má nízké horizontální rozlišení).</i></p>

<p>Původní prototypy sice byly zkonstruovány s&nbsp;využitím většího množství
čipů o poměrně nízké integraci, ovšem výsledná verze konzole se &ndash; kromě
přibližně třiceti diskrétních součástek &ndash; skládala pouze z&nbsp;trojice
čipů s&nbsp;vyšší mírou integrace. Jednalo se především o samotný osmibitový
mikroprocesor <i>MOS 6507</i> s&nbsp;taktovací frekvencí 1,2 MHz, jenž byl
umístěný v&nbsp;28pinovém pouzdru (i díky tomu byla jeho cena nižší, než cena
za plnohodnotný čtyřicetipinový <i>MOS 6502</i>, ovšem standardní kapacita
EPROM byla kvůli tomu omezena na pouhé čtyři kilobajty). K&nbsp;mikroprocesoru
byl připojen čip <i>MOS 6532</i>, jenž v&nbsp;sobě kombinoval operační paměť o
kapacitě pouhých 128 bajtů (nikoli kilobajtů a už vůbec ne megabajtů) a taktéž
dvojici osmibitových paralelních portů, k&nbsp;nimž byly mj.&nbsp;připojeny i
oba digitální joysticky.</p>

<a href="http://i.iinfo.cz/images/450/70hist3-6.png"><img src="http://i.iinfo.cz/images/450/70hist3-6-prev.png" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 4: Obrazovka hry Video Chess &ndash; šachy využívající pouhých
128 bajtů RAM!</i></p>

<p><div class="rs-tip-major">Poznámka: pokud se vám 128 bajtů zdá jako nízká
kapacita RAM, pak je dobré vědět, že původní návrh obsahoval dokonce jen 64
bajtů! Konzole totiž měla odpovídat nárokům her typu Pong! To, co se nakonec
podařilo z&nbsp;konzole určené pro běh Pongu &bdquo;vytáhnout&ldquo; (například
hra Solaris) ovšem více vypovídá nikoli o vizionářství původních autorů, ale
spíše o umu tehdejších programátorů.</div></p>

<a href="http://i.iinfo.cz/images/74/hry11-6.png" style="background-color: rgb(225, 232, 241); "><img src="http://i.iinfo.cz/images/74/hry11-6-prev.png" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 5: Hru Solaris (technicky jednu z&nbsp;nejdokonalejších her na
Atari 2600 vůbec) vytvořil stejný autor, jako hru Star Raiders.</i></p>

<p>Třetím čipem, který se velkou mírou podílel na úspěchu herní konzole
<i>Atari 2800</i>, byl čip nazvaný <i>TIA</i>, neboli <i>Television Interface
Adaptor</i>. Jednalo se o čip navržený <i>Jayem Minerem</i>, který se kromě
práce na <i>TIA</i> později proslavil svým podílem na vývoji čipů <i>ANTIC</i>
a <i>GTIA</i> určených pro osmibitové domácí počítače <i>Atari</i> a dále pak
na vývoji čipové sady pro slavné počítače <i>Amiga</i>. Jay Miner ve svém čipu
<i>TIA</i>, který byl postaven na bázi dvou prototypů navržených <i>Joem
Decuirem</i> a <i>Ronem Milnerem</i> (jeden z&nbsp;prototypů se nazýval
<i>Stella</i>, později se tak začal označovat i čip <i>TIA</i> a dokonce i celá
konzole), implementoval jak jednoduchý ale překvapivě výkonný grafický řadič,
tak i generátor zvuků. Jedním z&nbsp;typických znaků čipu <i>TIA</i> i
některých dalších integrovaných obvodů navržených <i>Jayem Minerem</i> bylo
použití polynomických čítačů (založených na posuvném registru se zpětnou
vazbou) namísto běžných čítačů binárních. Předností polynomických čítačů je to,
že na čipu zaberou přibližně čtvrtinu plochy v&nbsp;porovnání s&nbsp;binárními
čítači, nevýhodou pak fakt, že se jejich hodnota nemění o jedničku, ale
generuje se pseudonáhodná sekvence čísel. Nicméně pro potřeby generování obrazu
i zvuků byly polynomické čítače díky své jednoduchosti výhodnější.</p>

<p><div class="rs-tip-major">Poznámka: možnosti nabízené čipem TIA si popíšeme
postupně u jednotlivých demonstračních příkladů.</div></p>

<a href="http://i.iinfo.cz/images/74/hry11-7.png" style="background-color: rgb(225, 232, 241); "><img src="http://i.iinfo.cz/images/74/hry11-7-prev.png" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 6: Další screenshot získaný ze hry Solaris.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Komplikovaný vývoj her pro osmibitové herní konzole</h2>

<p>První podpůrné nástroje určené pro vývoj her a dalších aplikací pro herní
konzoli <i>Atari 2600</i> byly vyvinuty přímo ve společnosti Atari (za vývojem
stál Dave Crane a jeho kolegové), a to původně pro známý minipočítač <i>DEC
PDP-11</i>. Jednalo se zejména o cross assembler spouštěný přímo na
minipočítači, jímž produkovaný binární kód se přes sériovou linku (klasickou
RS-232) přenášel do speciální cartridge umístěné v&nbsp;herní konzoli,
konkrétně v&nbsp;konektoru určenému pro běžné herní cartridge. Tato vývojová
cartridge kromě paměti RAM obsahovala i jednoduché rozhraní pro řádkový
debugger spouštěný taktéž na minipočítači. Vývojová cartridge emulovala běžnou
paměťovou cartridge s&nbsp;pamětí ROM či EPROM. Tímto způsobem se postupně hra
vyvíjela a testovala, což byl v&nbsp;porovnání s&nbsp;dneškem poměrně zdlouhavý
proces, který byl navíc drahý &ndash; zejména pro nově založené společnosti
zaměřené pouze na vývoj her (nikoli na prodej hardware) bylo problematické si
zaplatit potřebný strojový čas minipočítače.</p>

<img src="http://i.iinfo.cz/images/515/hist6812.jpg" width="251" height="125" alt=" " />
<p><i>Obrázek 7: Barvová paleta herní konzole Atari 2600 při použití
televizního systému NTSC (tyto barvy využijeme později v&nbsp;demonstračních
příkladech).</i></p>

<p>Z&nbsp;tohoto důvodu se někteří programátoři alespoň zpočátku museli
spokojit s&nbsp;jednodušším &bdquo;hardcode&ldquo; systémem: ručním překladem
kódu z&nbsp;assembleru do strojového kódu, &bdquo;vypálením&ldquo; binárního
obrazu hry do čipu EPROM a následným použitím této EPROM v&nbsp;cartridgi,
která se v&nbsp;tomto případě prakticky nelišila od cartridgí, na nichž se
prodávaly komerční hry (jediným rozdílem byl chybějící obal a umístění EPROM do
patice a nikoli přímo na plošný spoj). Tento styl programování a testování byl
v&nbsp;některých případech aplikován i při vývoji her pro herní konzoli
<i>Nintendo Entertainment System (NES)</i>; jeden vývojář vzpomíná, že celý
cyklus překlad+naprogramování EPROM+přenos paměťového čipu+spuštění hry na
konzoli trval většinou patnáct minut (což může být dobré ponaučení pro nás
dnešní vývojáře, kteří někdy nadáváme na to, že spuštění nového kódu z&nbsp;IDE
trvá i několik sekund :-).</p>

<a href="http://i.iinfo.cz/images/100/games112-1.jpg"><img src="http://i.iinfo.cz/images/100/games112-1-prev.jpg" class="image-159782" width="370" height="173" alt="&#160;" /></a>
<p><i>Obrázek 8: O tomto modulu se prozatím definitivně neví, zda se jedná o
originální vývojový modul hry River Raid (Activision), nebo jde o pirátskou
kopii původní hry.</i></p>

<a href="http://i.iinfo.cz/images/23/69games8-19.png"><img src="http://i.iinfo.cz/images/23/69games8-19-prev.png" width="370" height="243" alt=" " /></a>
<p><i>Obrázek 9: První úroveň hry River Raid.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Oficiální vývojové prostředí pro konzole Atari 2600 a Atari 7800</h2>

<p>Později, především po úspěšné revoluci v&nbsp;oblasti domácích a později i
osobních počítačů, se vývoj her a dalších aplikací určených pro herní konzole
postupně přenesl na tyto relativně (skutečně však <i>relativně</i>) levné
počítače, což mj.&nbsp;znamenalo, že se o vývoj her mohli pokusit i jednotlivci
a společnosti s&nbsp;nízkým počátečním rozpočtem. Názorným příkladem takto
pojatého &bdquo;vývojového prostředí&ldquo; může být vývojové prostředí
nabízené společností Atari pro její herní konzole <i>Atari 7800</i> a taktéž
<i>Atari 2600</i> (díky prakticky stoprocentní zpětné kompatibilitě 7800
s&nbsp;2600). Tento vývojový nástroj byl určen pro běh na osobních počítačích
<i>Atari 520ST</i>, <i>Atari 1040ST</i> či pro řadu <i>Mega ST</i>; pro plnou
činnost byl vyžadován i pevný disk (nejenom disketová jednotka). Tyto počítače
byly přes paralelní port propojeny se speciální cartridgí s&nbsp;pamětí RAM,
která dokázala emulovat běžnou paměťovou cartridge (s&nbsp;ROM) a navíc
podporovala i komunikaci používanou debuggerem (ovládání probíhalo přes
emulátor terminálu). Tato cartridge byla přes standardní konektor připojena do
herní konzole 7800 (původní verze navíc vyžadovala úpravu ROM) či do původní
konzole 2600.</p>

<img src="http://i.iinfo.cz/images/100/games112-2.jpg" class="image-159783" width="272" height="449" alt="&#160;" >
<p><i>Obrázek 10: Pohled na další typ vývojového modulu pro herní konzoli Atari
2600 (zde ještě není osazen paměťovými čipy).</i></p>

<p>Mezi reálným modulem se hrou a vývojovou cartridgí samozřejmě existovalo
několik nepatrných rozdílů, které se týkaly zejména obsazení paměťových banků a
jejich přepínání. Navíc první dvě instrukce na vývojové cartridge musely
provádět její inicializaci (tím se vyplýtvaly celé čtyři cenné bajty :-).</p>

<img src="http://i.iinfo.cz/images/100/games112-3.png" class="image-159784" width="445" height="101" alt="&#160;" />
<p><i>Obrázek 11: Jednoduchý program napsaný v&nbsp;assembleru mikroprocesoru
MOS 6502.</i></p>

<p>Softwarová část takto pojatého vývojového prostředí se skládala
z&nbsp;několika nástrojů: programátorského editoru (upravená verze
<i>MicroEMACSu</i>), cross assembleru, konvertoru objektových souborů
generovaných assemblerem do formátu vhodného pro přímé uložení do RAM či EPROM
na cartridgi a mj.&nbsp;i z&nbsp;debuggeru, který podporoval trasování,
nastavování breakpointů, změnu obsahu RAM, změnu řídicích registrů atd.
Z&nbsp;tohoto popisu je zřejmé, že i přesto, že vývoj her probíhal na osobním
počítači (a ne minipočítači), základní nástroje a postupy zůstaly zachovány
&ndash; vývoj stále probíhal s&nbsp;využitím assembleru a (pravděpodobně) jen
minimum her využívalo kód napsaný v&nbsp;některém vyšším programovacím
jazyku.</p>

<p><div class="rs-tip-major">Poznámka: prakticky stejné nástroje jsou
pochopitelně dostupné i dnes, protože vývoj pro Atari 2600 stále
láká.</div></p>

<img src="http://i.iinfo.cz/images/100/games112-4.png" class="image-159785" width="383" height="694" alt="&#160;" />
<p><i>Obrázek 12: Část výukového programu pro herní konzoli Atari 2600, která
je taktéž naprogramovaná v&nbsp;assembleru mikroprocesoru MOS 6502.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vývoj her pro konzoli Atari 2600 v&nbsp;současnosti aneb kouzlo minimalizmu</h2>

<p>Jak jsme si již řekli v&nbsp;úvodních kapitolách, existuje i
v&nbsp;současnosti skupina vývojářů-amatérů (vlastně i polo-profesionálů,
protože některé hry jsou prodávány), jejichž koníčkem je vytváření her pro
staré osmibitové herní konzole. Někteří z&nbsp;těchto programátorů tvrdí, že
osmibitové herní konzole a konkrétně právě <i>Atari 2600</i>, jsou pro
nekomerční hry ideální platformou, protože takovou hru může vytvořit skutečně
pouze jeden člověk, podobně jako v&nbsp;osmdesátých letech minulého století.
Navíc jsou grafické možnosti těchto konzolí na tak nízké úrovni
(v&nbsp;porovnání nejenom se současnými standardy), že hra musí zaujmout
především hratelností a nikoli dechberoucí grafikou či pokročilými, ale mnohdy
jen prvoplánovými grafickými efekty. Další programátoři navíc vyzdvihují
skutečnost, že na osmibitových herních konzolích (a samozřejmě i na
osmibitových domácích mikropočítačích) se programuje jen o jednu úroveň nad
hardware. Nejsou zde tedy žádné další mezivrstvy, knihovny a frameworky; záleží
jen na umu programátora, jak bude výsledný produkt vypadat.</p>

<img src="http://i.iinfo.cz/images/100/games112-5.png" class="image-159786" width="600" height="446" alt="&#160;" />
<p><i>Obrázek 13: Jedna z&nbsp;novějších homebrew her, která se snaží napodobit
původní styl počítačových her.</i></p>

<p>Jak vlastně vývoj hry pro konzoli <i>Atari 2600</i> může vypadat dnes?
K&nbsp;dispozici je zapotřebí pouze minimum vývojových nástrojů (opět návrat
k&nbsp;minimalismu, zejména v&nbsp;porovnání se současnými IDE doplněnými o
mnohdy monstrózní frameworky, pro které prakticky každý den vychází opravné
verze), ovšem na druhou stranu je dnes snadnost vývoje pro 2600 na tak vysoké
úrovni, o níž se mohlo na konci sedmdesátých a v&nbsp;první polovině
osmdesátých let minulého století programátorům jenom zdát a to především díky
existenci kvalitních emulátorů herní konzolí. Díky nim je možné celý vývoj i
testování provést na osobním počítači s&nbsp;tím, že pouze finální produkt se
otestuje na reálném hardware herní konzole (mnohdy ani to není striktně
zapotřebí).</p>

<img src="http://i.iinfo.cz/images/100/games112-6.png" class="image-159787" width="600" height="446" alt="&#160;" />
<p><i>Obrázek 14: Další snímek ze stejné hry.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Současné vývojové a testovací nástroje používané pro vývoj homebrew her pro Atari 2600: hardcore varianta</h2>

<p>Pro vývoj nové hry či pro úpravu starší hry určené pro herní konzoli
<i>Atari 2600</i> dostačuje překvapivě pouze několik aplikací.
V&nbsp;&bdquo;hardcode&ldquo; variantě (tedy pro ty, kdo se nebojí assembleru a
především pak neustálé &bdquo;honby za elektronovým paprskem&ldquo;) se jedná
v&nbsp;první řadě o vhodný (cross) assembler, který dokáže zpracovat programy
určené pro osmibitový mikroprocesor MOS 6502. Jedná se například o makro
assembler <i>DASM</i>, který je takzvaným cross assemblerem, tj.&nbsp;běží na
moderních desktopech (není ho tedy nutné provozovat na reálném MOS 6502). Dále
se používá disassembler, který může být součástí emulátoru herní konzole.
Pochopitelně se používá i programátorský textový editor popř.&nbsp;může být
vhodný i hexa editor pro úpravy výsledného binárního souboru. A samozřejmě
nesmíme zapomenout na samotný emulátor herní konzole:</p>

<ol>
<li>Cross assembler (většinou se používá <i>DASM</i>)</li>
<li>Disassembler (<i>DiStella</i>)</li>
<li>Textový editor (samozřejmě <i>Vim</i> a pro skutečné fajnšmekry <i>Notepad</i> :-) </li>
<li>Hexa editor (<i>Beye</i>, <i>hexedit</i>, <i>xxd</i>, <i>hiew</i> apod.)</li>
<li>Emulátor herní konzole (pravděpodobně nejpoužívanější je <i>Stella</i> či <i>z26</i>)</li>
</ol>

<img src="http://i.iinfo.cz/images/682/112-14.png" class="image-159805" width="640" height="500" alt="&#160;" />
<p><i>Obrázek 14: Homebrew hra AVCSTec Challenge.</i></p>

<p>Existují však i další specializované nástroje, například:</p>

<ol>
<li>Atari 2600 BASIC Compiler (překladač z&nbsp;jednoduchého BASICu do strojového kódu, viz další text)</li>
<li>TIA Playfield Painter (jednoduchý editor pro tvorbu pozadí v maximálním rozlišení 80&times;192 pixelů)</li>
</ol>

<img src="http://i.iinfo.cz/images/248/112-15.png" class="image-159804" width="640" height="500" alt="&#160;" />
<p><i>Obrázek 15: Homebrew hra AVCSTec Challenge.</i></p>

<p>Nejdůležitější z&nbsp;těchto nástrojů je cross assembler <i>DASM</i> (<a
href="http://sourceforge.net/projects/dasm-dillon/">http://sourceforge.net/projects/dasm-dillon/</a>),
tj.&nbsp;takový assembler, který sice může být spuštěn na dnešním běžném
osobním počítači, ale generuje objektový soubor pro jiný typ mikroprocesoru.
První verze assembleru <i>DASM</i> vznikla už v&nbsp;období let 1987 až 1988 a
jejím autorem je Matt Dillon. Později došlo k&nbsp;mnoha úpravám tohoto
assembleru a v&nbsp;současnosti se jedná o produkt využitelný pro produkování
objektového kódu pro mnoho různých osmibitových mikroprocesorů: MOS 6502, MOS
6507 (v&nbsp;podstatě to samé až na jinou šířku adresové sběrnice), Motorola
řady 6800, Motorola řady 68HC11 či Fairchild F8. Existují ovšem i další nativní
a cross assemblery pro procesory MOS 6502, jejich seznam lze nalézt zde: <a
href="http://en.wikipedia.org/wiki/Comparison_of_assemblers#6502_assemblers">http://en.wikipedia.org/wiki/Comparison_of_assemblers#6502_assemblers</a>.</p>

<img src="http://i.iinfo.cz/images/499/112-16.png" class="image-159803" width="640" height="500" alt="&#160;" />
<p><i>Obrázek 16: Homebrew hra AVCSTec Challenge.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Je možné pro Atari 2600 programovat i ve vyšších programovacích jazycích?</h2>

<p>Na osmibitových domácích mikropočítačích se typicky používal BASIC ve funkci
vyššího programovacího jazyka a assembler pro nízkoúrovňové operace (viz odkazy
uvedené níže). Ovšem herní konzole Atari 2600 nabízí mnohem méně prostředků,
než i ten nejmenší (ještě prakticky použitelný) mikropočítač (kterým je
pravděpodobně ZX80 a ZX81), nehledě na problémy související s&nbsp;generováním
obrazu pro jeho zobrazení na televizoru. Z&nbsp;tohoto důvodu se hry pro Atari
2600 psaly v&nbsp;assembleru. V&nbsp;současnosti se sice laboruje
s&nbsp;využitím céčka (viz například <a
href="https://atariage.com/forums/topic/283441-attemping-to-code-the-atari-2600-in-c-with-cc65/">https://atariage.com/forums/topic/283441-attemping-to-code-the-atari-2600-in-c-with-cc65/</a>),
ovšem problém spočívá v&nbsp;tom, jak rozumným způsobem napsat <i>kernel</i>
zajišťující vykreslení herní scény, protože je nutné explicitně generovat každý
obrazový řádek.</p>

<ol>

<li>Programovací jazyky a vývojové nástroje pro mikropočítače společnosti Sinclair Research<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-a-vyvojove-nastroje-pro-mikropocitace-spolecnosti-sinclair-research/">https://www.root.cz/clanky/programovaci-jazyky-a-vyvojove-nastroje-pro-mikropocitace-spolecnosti-sinclair-research/</a>
</li>

<li>Vývojové nástroje používané v&nbsp;dobách osmibitových mikropočítačů<br />
<a href="https://www.root.cz/clanky/vyvojove-nastroje-pouzivane-v-dobach-osmibitovych-mikropocitacu/">https://www.root.cz/clanky/vyvojove-nastroje-pouzivane-v-dobach-osmibitovych-mikropocitacu/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/</a>
</li>

</ol>

<a href="http://i.iinfo.cz/images/74/hry11-14.png"><img src="http://i.iinfo.cz/images/74/hry11-14-prev.png" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 17: Hra Frogger vytvořená firmou Parker Bros pro herní konzoli
Atari 2600. Jedná se o konverzi z&nbsp;herního automatu postaveného na
mikroprocesoru Zilog Z80.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Projekt Batari BASIC</h2>

<p>Problém kernelu a současně i vyššího programovacího jazyka řeší například
dnes popisovaný <i>Batari BASIC</i>. Ten obsahuje již připravené kernely, které
jsou napsány v&nbsp;assembleru, jsou konfigurovatelné a volají se automaticky.
Programátor tedy &bdquo;pouze&ldquo; musí napsat logiku hry a posléze
instruovat kernel, jakým způsobem má vykreslit herní scénu, která je interně
složena z&nbsp;pozadí, herního pole, dvou hráčů, dvou střel a takzvaného míče.
Ve výsledku je tak program psaný v&nbsp;Batari BASICu směsí vysokoúrovňového
kódu s&nbsp;logikou hry popř.&nbsp;ovládáním pozice střel atd. a
nízkoúrovňového kódu, který řeší ovládání čipu TIA přes jeho řídicí registry.
V&nbsp;případě potřeby je však možné použít i assembler, který je plně
integrován do zdrojového kódu.</p>

<p>Samotný kernel Batari BASICu umožňuje pracovat s&nbsp;celým herním polem,
jako by se jednalo o 2D bitmapu. Podobně je možné pracovat se sprity hráčů,
jakoby se jednalo o 2D sprity a nikoli o jednořádkové vzorky. Příklady si
ukážeme jak dnes (herní pole), tak příště (sprity hráčů).</p>

<p>V&nbsp;programu lze používat několik desítek pseudoproměnných (které jsou
mnohdy mapovány na řídicí registry) a 26 proměnných nazvaných
<strong>a</strong> až <strong>z</strong>. Proč je však počet proměnných omezen?
Nesmíme zapomenout, že jak stav kernelu, tak i zásobník a všechny proměnné se
musí vejít do pouhých 128 bajtů RAM!</p>

<p>Přímo ovládat lze tyto řídicí registry čipu TIA:</p>

<table>
<tr><th>Registry</th><th>Stručný popis</th></tr>
<tr><td>AUDV0/AUDC0/AUDF0</td><td>řízení prvního zvukového kanálu</td></tr>
<tr><td>AUDV1/AUDC1/AUDF1</td><td>řízení druhého zvukového kanálu</td></tr>
<tr><td>COLUBK</td><td>barva pozadí obrazovky</td></tr>
<tr><td>COLUPF</td><td>barva herního pole a &bdquo;míčku&ldquo;</td></tr>
<tr><td>COLUP0/COLUP1</td><td>barva hráčů a střel</td></tr>
<tr><td>REFP0/REFP1</td><td>řízení způsobu zobrazení hráčů a střel</td></tr>
<tr><td>NUSIZ0/NUSIZ1</td><td>řízení způsobu zobrazení hráčů a střel</td></tr>
<tr><td>CTRLPF</td><td>řízení grafických efektů hráčů, herního pole a míče</td></tr>
<tr><td>PF0</td><td>vzorek herního pole</td></tr>
</table>

<p>Samotný překlad zdrojového kódu napsaného v&nbsp;Batari BASICu je proveden
v&nbsp;několika průchodech:</p>

<ol>
<li>Preprocesing + tokenizace</li>
<li>Překlad (přesněji řečeno transpřeklad) do assembleru, výsledkem je čitelný kód v assembleru</li>
<li>Slinkování na úrovni assembleru se zvoleným vykreslovacím kernelem</li>
<li>Optimalizace s&nbsp;odstraněním nepoužívaného kódu</li>
<li>Překlad z&nbsp;assembleru do binárního nativního kódu</li>
</ol>



<p><a name="k09"></a></p>
<h2 id="k09">9. Překlad Batari BASICu</h2>

<p>Batari BASIC sice nebývá běžnou součástí repositářů distribucí Linuxu, ovšem
jeho překlad ve skutečnosti není nijak složitý. Potřebujete pouze překladač
céčka (resp.&nbsp;celý <i>GNU toolchain</i>) a taktéž nástroj Lex. Celý postup
zabere jen několik minut:</p>

<p>Získání poslední verze zdrojových kódů Batari BASICu:</p>

<pre>
$ <strong>git clone git@github.com:batari-Basic/batari-Basic.git</strong>
&nbsp;
Cloning into 'batari-Basic'...
remote: Enumerating objects: 298, done.
remote: Counting objects: 100% (93/93), done.
remote: Compressing objects: 100% (42/42), done.
remote: Total 298 (delta 61), reused 51 (delta 51), pack-reused 205
Receiving objects: 100% (298/298), 510.74 KiB | 1.46 MiB/s, done.
Resolving deltas: 100% (139/139), done.
</pre>

<p>Přechod do adresáře s&nbsp;naklonovaným projektem:</p>

<pre>
$ <strong>cd batari-Basic</strong>
</pre>

<p>Vlastní překlad (s&nbsp;několika varováními):</p>

<pre>
$ <strong>make</strong>
&nbsp;
cc -O2 -o 2600basic 2600bas.c statements.c keywords.c
In file included from /usr/include/string.h:495,
                 from 2600bas.c:5:
In function ‘strncpy’,
    inlined from ‘main’ at 2600bas.c:158:7:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: warning: ‘__builtin___strncpy_chk’ specified bound depends on the length of the source argument [-Wstringop-overflow=]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2600bas.c: In function ‘main’:
2600bas.c:158:34: note: length computed here
  158 |       strncpy(finalcode, mycode, strlen(mycode) - strlen(codeadd));
      |                                  ^~~~~~~~~~~~~~
lex -t&lt;preprocess.lex&gt;lex.yy.c
cc -O2 -o preprocess lex.yy.c
rm -f lex.yy.c
cc -O2 -o postprocess postprocess.c
lex -t -i&lt;optimize.lex&gt;lex.yy.c
cc -O2 -o optimize lex.yy.c
rm -f lex.yy.c
cc -O2 -o bbfilter bbfilter.c
</pre>

<p>Výsledkem překladu by měl být tento soubor:</p>

<pre>
$ <strong>ls -l 2600basic</strong>
&nbsp;
-rwxrwxr-x 1 ptisnovs ptisnovs 113480 Apr 22 15:55 2600basic
&nbsp;
&nbsp;
$ <strong>./2600basic -version</strong>
batari Basic v1.6-SNAPSHOT (c)2021
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Příprava assembleru <strong>dasm</strong></h2>

<p>Batari BASIC je, jak již víme, transpřekladačem, který provádí překlad
zdrojového kódu z&nbsp;BASICu do assembleru. Následně je nutné tento
vygenerovaný assembler přeložit do strojového kódu, jenž bude následně poslán
do emulátoru herní konzole Atari 2600 popř.&nbsp;nahrán na cartridge. Takovým
assemblerem je <strong>dasm</strong>, o němž jsme se již krátce zmínili <a
href="#k06">v&nbsp;šesté kapitole</a>. Ani tento assembler nebývá standardní
součástí repositářů distribucí Linuxu, ovšem jeho spustitelnou podobu lze
získat snadno. V&nbsp;adresáři s&nbsp;Batari BASICem se totiž nachází
podadresář nazvaný <strong>contrib</strong>, jenž obsahuje skript, který
<strong>dasm</strong> stáhne pro konkrétní architekturu procesoru:</p>

<pre>
$ <strong>pushd contrib</strong>
$ <strong>./fetch_dasm.sh</strong>
$ <strong>popd</strong>
</pre>

<p><strong>dasm</strong> sice v&nbsp;rámci dalších kapitol nebudeme používat
přímo, ovšem je vhodné si ověřit, zda je alespoň spustitelný:</p>

<pre>
$ <strong>./dasm.Linux.x64 </strong>
&nbsp;
DASM 2.20.14.1
Copyright (c) 1988-2020 by the DASM team.
License GPLv2+: GNU GPL version 2 or later (see file LICENSE).
DASM is free software: you are free to change and redistribute it.
There is ABSOLUTELY NO WARRANTY, to the extent permitted by law.
&nbsp;
Usage: dasm sourcefile [options]
&nbsp;
-f#      output format 1-3 (default 1)
-oname   output file name (else a.out)
-lname   list file name (else none generated)
-Lname   list file, containing all passes
-sname   symbol dump file name (else none generated)
-v#      verboseness 0-4 (default 0)
-d       debug mode (for developers)
-Dsymbol              define symbol, set to 0
-Dsymbol=expression   define symbol, set to expression
-Msymbol=expression   define symbol using EQM (same as -D)
-Idir    search directory for INCLUDE and INCBIN
-p#      maximum number of passes
-P#      maximum number of passes, with fewer checks
-T#      symbol table sorting (default 0 = alphabetical, 1 = address/value)
-E#      error format (default 0 = MS, 1 = Dillon, 2 = GNU)
-S       strict syntax checking
-R       remove binary output-file in case of errors
-m#      safety barrier to abort on recursions, max. allowed file-size in kB
&nbsp;
Report bugs on https://github.com/dasm-assembler/dasm please!
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Instalace emulátoru herní konzole Atari 2600</h2>

<p>Emulátor herní konzole Atari 2600 se jmenuje <i>Stella</i>. Na rozdíl od
předchozích nástrojů je balíček se <i>Stellou</i> běžnou součástí distribucí
Linuxu, takže je jeho instalace snadná:</p>

<pre>
$ <strong>sudo apt-get install stella</strong>
&nbsp;
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  evemu-tools evtest joystick libevemu3
The following NEW packages will be installed:
  evemu-tools evtest joystick libevemu3 stella
0 upgraded, 5 newly installed, 0 to remove and 0 not upgraded.
Need to get 1 654 kB of archives.
After this operation, 7 254 kB of additional disk space will be used.
Do you want to continue? [Y/n] y
</pre>

<p>Tento emulátor budeme používat v&nbsp;dalších kapitolách:</p>

*** image ***
<p><i>Obrázek 18: Výběr programu pro spuštění v&nbsp;emulátoru Stella.</i></p>

*** image ***
<p><i>Obrázek 19: Nastavení vlastností emulátoru.</i></p>

*** image ***
<p><i>Obrázek 20: Nastavení pro vývojáře, které využijeme příště.</i></p>

*** image ***
<p><i>Obrázek 21: Nastavení pro vývojáře (běžící hra Adventure), které
využijeme příště.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Překlad a spuštění demonstračního programu</h2>

<p>Součástí Batari BASICu je i několik demonstračních programů, na nichž je
možné si otestovat, zda je Batari BASIC, DASM i emulátor herní konzole korektně
nainstalován a nakonfigurován. Před pokusem o překlad demonstračního příkladu
je nutné nastavit resp.&nbsp;přenastavit tyto proměnné prostředí:</p>

<pre>
$ <strong>export PATH=.:$PATH</strong>
&nbsp;
$ <strong>export bB=.</strong>
</pre>

<p>V&nbsp;dalším kroku se můžeme pokusit o překlad demonstračního příkladu
nazvaného <strong>bbstarfield.bas</strong>, jenž ukazuje některé grafické
možnosti čipu TIA:</p>

<pre>
$ <strong>./2600basic.sh bbstarfield.bas</strong>
&nbsp;
Found dasm version: DASM 2.20.14.1
Starting build of bbstarfield.bas
batari Basic v1.6-SNAPSHOT (c)2021
2600 Basic compilation complete.
      2373 bytes of ROM space left
&nbsp;
Complete. (0)
Build complete.
</pre>

<p>V&nbsp;průběhu překladu vznikne několik souborů, z&nbsp;nichž pro nás
nejdůležitější je soubor s&nbsp;koncovkou <strong>.bin</strong>, jehož velikost
by měla být přesně 4kB:</p>

<pre>
$ <strong>ls -la bbstarfield*</strong>
&nbsp;
-rw-rw-r-- 1 ptisnovs ptisnovs   2446 Apr 22 15:54 bbstarfield.bas
-rw-rw-r-- 1 ptisnovs ptisnovs  45033 Apr 22 16:06 bbstarfield.bas.asm
-rw-rw-r-- 1 ptisnovs ptisnovs   4096 Apr 22 16:06 bbstarfield.bas.bin
-rw-rw-r-- 1 ptisnovs ptisnovs 163820 Apr 22 16:06 bbstarfield.bas.lst
-rw-rw-r-- 1 ptisnovs ptisnovs  21947 Apr 22 16:06 bbstarfield.bas.sym
</pre>

<p>Tento soubor spustíme v&nbsp;emulátoru:</p>

<pre>
$ <strong>stella bbstarfield.bas.bin</strong>
</pre>

<p>S&nbsp;následujícím (animovaným) výsledkem:</p>

*** image ***
<p><i>Obrázek 22: Takto by mělo demo vypadat po spuštění v&nbsp;emulátoru.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vytvoření vlastního programu &ndash; vykreslení textu na pozadí</h2>

<p>Pokusme se nyní o vytvoření vlastního příkladu, který vykreslí na obrazovku
řetězec &bdquo;Root&ldquo;. Využijeme přitom standardní vykreslovací
<i>kernel</i> Batari BASICu, který umožňuje definici tzv.&nbsp;herního pole o
rozlišení (spíše tedy o &bdquo;rozlišení&ldquo;) 32&times;11 bloků
(&bdquo;pixelů&ldquo;). Bitmapu s&nbsp;herním polem lze definovat příkazem
<strong>playfield</strong>. Vykreslení je provedeno příkazem
<strong>drawscreen</strong>:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
  drawscreen
</pre>

<p>Tento program sice půjde přeložit, ale již nikoli spustit, a to z&nbsp;toho
důvodu, že se <strong>drawscreen</strong> musí neustále volat dokola. Pokud
takovou smyčku nevytvoříme, dojde emulovaný mikroprocesor dříve či později
k&nbsp;neznámé instrukci (popř.&nbsp;častěji k&nbsp;instrukci
<strong>BRK</strong> a program je v&nbsp;emulátoru ukončen:</p>

*** image ***
<p><i>Obrázek 23: Pád programu po přechodu na neznámou instrukci.</i></p>

<p>Oprava je snadná &ndash; použijeme <a
href="http://www.david.tribble.com/text/goto.html">oblíbený příkaz
<strong>goto</strong></a>:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
<strong>mainloop</strong>
    <strong>drawscreen</strong>
    <strong>goto mainloop</strong>
</pre>

<p>Nyní již program bude přeložitelný i spustitelný. No není to krása?:</p>

*** image ***
<p><i>Obrázek 24: První program, který jsme přeložili a spustili na emulaci HW
starého 45 let!</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Změna barvy herní plochy modifikací řídicího registru</h2>

<p>V&nbsp;dalším demonstračním příkladu je ukázáno, jakým způsobem je možné
změnit barvu herní plochy. Tato barva je ukládána do řídicího registru
nazvaného <strong>COLUPF</strong> (<i>COLor PlayField</i>). Barva se vybírá
z&nbsp;palety resp.&nbsp;přesněji řečeno z&nbsp;několika palet, které jsou sice
neměnné, ale liší se podle použitého televizního standardu. Ostatně se
podívejte sami na stránku s&nbsp;těmito paletami, kterou lze nalézt na adrese
<a
href="http://www.qotile.net/minidig/docs/tia_color.html">http://www.qotile.net/minidig/docs/tia_color.html</a>.</p>

<p><div class="rs-tip-major">Poznámka: emulátor konzole Stella používá ve
výchozím nastavení NTSC, což znamená, že je k&nbsp;dispozici větší počet
barev.</div></p>

<p>Změna barvy zápisem do řídicího registru <strong>COLUPF</strong> je
v&nbsp;Batari BASICu snadná:</p>

<pre>
  <strong>COLUPF = 14</strong>
</pre>

<p>Můžeme si to vyzkoušet modifikací předchozího příkladu:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
  <strong>COLUPF = 14</strong>
&nbsp;
mainloop
    drawscreen
    goto mainloop
</pre>

<p>Po spuštění tohoto příkladu by měl na začátku &bdquo;problinkout&ldquo; text
v&nbsp;barvě číslo 14. Ihned poté ovšem dojde k&nbsp;překreslení zpět na barvu
bílou. Proč tomu tak je? Standardní kernel Batari BASICu totiž dokáže ve spodní
části obrazovky vykreslit skóre (vytvářené hry) a pro tento účel pochopitelně
používá jak herní pole, tak i další grafické objekty konzole TIA. A u těch je
implicitně (pro skóre) nastavena černá resp.&nbsp;bílá barva a proto interně
dojde mj.&nbsp;i k&nbsp;přepisu registru <strong>COLUPF</strong>.</p>

<p>Úprava resp.&nbsp;přesněji řečeno oprava je snadná &ndash; přesunutí
nastavení registru <strong>COLUPF</strong> do programové smyčky:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
mainloop
    <strong>COLUPF = 14</strong>
    drawscreen
    goto mainloop
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 25: Text vykreslený odlišnou barvou.</i></p>

<p>S&nbsp;využitím proměnné <strong>a</strong> lze snadno docílit postupné
změny barvy herního pole:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
  a = 0
&nbsp;
mainloop
    drawscreen
    COLUPF = a
    a = a + 1
    goto mainloop
</pre>

<p><div class="rs-tip-major">Poznámka: po spuštění tohoto dema si povšimněte,
že se barvy mění relativně pomalu.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zobrazení střely</h2>

<p>Jak uvidíme příště, dokáže čip TIA zobrazit kromě herního pole i další tři
typy objektů. Tyto objekty se nazývají hráči (<i>players</i>), střely
(<i>missiles</i>) a míč (<i>ball</i>). Na rozdíl od herního pole jsou tyto
objekty pohyblivé &ndash; lze je v&nbsp;rámci obrazového řádku umístit na
libovolné místo (tedy jimi pohybovat doleva a doprava). Podívejme se nejdříve
na možnosti střel. Existují dva objekty tohoto typu &ndash;
<strong>mossile0</strong> a <strong>missile1</strong>. Nastavit lze jejich
pozici jak na obrazovém řádku, tak i číslo obrazového řádku (toto je ovšem
možnost zajištěná kernelem, protože čip TIA pracuje striktně vždy
s&nbsp;jediným obrazovým řádkem):</p>

<pre>
  missile0x = 64
  missile0y = 64
</pre>

<p>Kernel umožňuje nastavit i výšku střely měřenou počtem obrazových řádků:</p>

<pre>
  missile0height = 8
</pre>

<p>Šířka střely (v&nbsp;pixelech) se nastavuje v&nbsp;řídicím registru
<strong>NUSIZ0</strong>, a to výběrem hodnoty <strong>m</strong> <a
href="https://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html#nusiz">z&nbsp;této
tabulky</a>. Pokud tedy budeme chtít, aby byla střela široká 8 pixelů,
použijeme <strong>m=3</strong>:</p>

<pre>
    NUSIZ0 = $30
</pre>

<p><div class="rs-tip-major">Poznámka: střela tedy není definována žádnou
bitmapou; má jen šířku 1, 2, 4 či 8 pixelů a výšku definovanou v&nbsp;počtu
obrazových řádků.</div></p>

<p>Zbývá nám nastavit barvu střely číslo 0. Tato barva je totožná s&nbsp;barvou
hráče číslo 0 a specifikuje se zápisem do řídicího registru
<strong>COLUP0</strong>:</p>

<pre>
    COLUP0 = $1E
</pre>

<p>Celý demonstrační příklad tedy bude vypadat následovně:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
  missile0x = 64
  missile0y = 64
  missile0height = 8
&nbsp;
mainloop
    NUSIZ0 = $30
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    drawscreen
    goto mainloop
</pre>

<p>Zobrazený výsledek získaný po spuštění příkladu by měl vypadat takto:</p>

*** image ***
<p><i>Obrázek 26: Text vykreslený do herního pole a střela vykreslená nad
textem.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Posun střely joystickem</h2>

<p>Velkou předností Batari BASICu je jeho schopnost manipulovat
s&nbsp;pseudoproměnnými, které reprezentují například stav joysticku či
grafických objektů. Například v&nbsp;pseudoproměnných <strong>joy0up</strong>,
<strong>joy0down</strong>, <strong>joy0left</strong> a
<strong>joy0right</strong> jsou uloženy příznaky, že je první joystick nakloněn
v&nbsp;daném směru. Tyto příznaky je možné přímo použít v&nbsp;podmínce, takže
se ušetří kód (i čas) pro dekódování stavu joysticku atd. Navíc je možné přímo
ovlivnit pseudoproměnné <strong>missile0x</strong> a <strong>missile0y</strong>
představující pozici první střely na obrazovce. Zajištění posunu střely
joystickem (ve všech osmi směrech) je tedy až triviálně jednoduché:</p>

<pre>
    if joy0up then missile0y = missile0y - 1
    if joy0down then missile0y = missile0y + 1
    if joy0left then missile0x = missile0x - 1
    if joy0right then missile0x = missile0x + 1
</pre>

<p>Úplný zdrojový kód takto upraveného programu bude vypadat následovně:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
&nbsp;
  missile0x = 64
  missile0y = 64
  missile0height = 8
&nbsp;
mainloop
    NUSIZ0 = $30
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    <strong>if joy0up then missile0y = missile0y - 1</strong>
    <strong>if joy0down then missile0y = missile0y + 1</strong>
    <strong>if joy0left then missile0x = missile0x - 1</strong>
    <strong>if joy0right then missile0x = missile0x + 1</strong>
&nbsp;
    drawscreen
    goto mainloop
</pre>

<p>Po spuštění dema je možné střelou posouvat po obrazovce joystickem:</p>

*** image ***
<p><i>Obrázek 27: Přesun pozice střely joystickem.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Změna barvy střely tlačítkem joysticku</h2>

<p>Stejně snadné je programově zajistit, aby se po stisku tlačítka joysticku
postupně měnila barva střely (resp.&nbsp;přesněji řečeno čtverce, který střelu
představuje na obrazovce). Postačuje použít proměnnou (například
<strong>a</strong>) pro uložení barvy střely s&nbsp;tím, že se po stisku
tlačítka joysticku zvýší index barvy v&nbsp;barvové paletě o jedničku:</p>

<pre>
  a = $1E
&nbsp;
mainloop
    COLUP0 = a
    ...
    ...
    ...
    if joy0fire then a = a + 1
    ...
    ...
    ...
    goto mainloop
</pre>

<p><div class="rs-tip-major">Poznámka: pomocnou proměnnou musíme použít
z&nbsp;toho důvodu, že čtení z&nbsp;řídicího registru <strong>COLUP0</strong>
není podporováno &ndash; jedná se o <a
href="https://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html#glossary_write_only_registers">write-only
registr</a>.</div></p>

<p>Úplný zdrojový kód upraveného demonstračního příkladu:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
&nbsp;
  missile0x = 64
  missile0y = 64
  missile0height = 8
&nbsp;
  a = $1E
&nbsp;
mainloop
    NUSIZ0 = $30
    COLUPF = $7F
    COLUP0 = a
&nbsp;
    if joy0up then missile0y = missile0y - 1
    if joy0down then missile0y = missile0y + 1
    if joy0left then missile0x = missile0x - 1
    if joy0right then missile0x = missile0x + 1
    if joy0fire then a = a + 1
&nbsp;
    drawscreen
    goto mainloop
</pre>

*** image ***
<p><i>Obrázek 28: Pohyb střely se změnou její barvy.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Čísla řádků ve zdrojových kódech</h2>

<p>Batari BASIC podporuje i využití čísel řádků namísto textových návěští, což
může vyhovovat pamětníkům, kteří používali BASIC v&nbsp;dobách jeho největší
slávy, tj.&nbsp;zhruba v&nbsp;osmdesátých letech minulého století. Podívejme
se, jak by mohl zápis předchozího programu vypadat v&nbsp;případě použití čísel
řádků. Povšimněte si zejména skoku na začátek vykreslovací smyčky (text je
označen tučně):</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
&nbsp;
10 missile0x = 64
20 missile0y = 64
30 missile0height = 8
&nbsp;
40 a = $1E
&nbsp;
50
51  NUSIZ0 = $30
52  COLUPF = $7F
53  COLUP0 = a
&nbsp;
54  if joy0up then missile0y = missile0y - 1
55  if joy0down then missile0y = missile0y + 1
56  if joy0left then missile0x = missile0x - 1
57  if joy0right then missile0x = missile0x + 1
58  if joy0fire then a = a + 1
&nbsp;
59  drawscreen
<strong>60  goto 50</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: funkčně se jedná o shodný program, jako
tomu bylo <a href="#k18">v&nbsp;předchozí kapitole</a>.</div></p>

*** image ***
<p><i>Obrázek 29: Scéna ze hry H.E.R.O. jak ji vidí hráč.</i></p>

*** image ***
<p><i>Obrázek 30: A takto je scéna rozdělena na sprity a herní pole.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady určené pro překlad
Batari-BASICem byly uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>playfield_1.bas</td><td>zobrazení herního pole, bez smyčky kernelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_1.bas</a></td></tr>
<tr><td>2</td><td>playfield_2.bas</td><td>ukázka smyčky kernelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_2.bas</a></td></tr>
<tr><td>3</td><td>playfield_3.bas</td><td>změna barvy herního pole mimo smyčku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_3.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_3.bas</a></td></tr>
<tr><td>4</td><td>playfield_4.bas</td><td>změna barvy herního pole uvnitř smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_4.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_4.bas</a></td></tr>
<tr><td>5</td><td>playfield_5.bas</td><td>postupná změna barvy herního pole</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_5.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_5.bas</a></td></tr>
<tr><td>6</td><td>missile_1.bas</td><td>zobrazení střely nad herním polem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_1.bas</a></td></tr>
<tr><td>7</td><td>missile_2.bas</td><td>pohyb střelou pomocí joysticku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_2.bas</a></td></tr>
<tr><td>8</td><td>missile_3.bas</td><td>změna barvy střely tlačítkem joysticku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_3.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_3.bas</a></td></tr>
<tr><td>9</td><td>missile_4.bas</td><td>předchozí příklad, ale s&nbsp;čísly řádků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_4.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_4.bas</a></td></tr>
<table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Batari BASIC GitHub repositář<br />
<a href="https://github.com/batari-Basic/batari-Basic">https://github.com/batari-Basic/batari-Basic</a>
</li>

<li>Programming Tutorial<br />
<a href="https://atariage.com/forums/topic/111938-programming-tutorial/">https://atariage.com/forums/topic/111938-programming-tutorial/</a>
</li>

<li>batari Basic Commands<br />
<a href="https://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html">https://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html</a>
</li>

<li>About batari Basic<br />
<a href="https://bataribasic.com/">https://bataribasic.com/</a>
</li>

<li>Rationale<br />
<a href="https://bataribasic.com/rationale.html">https://bataribasic.com/rationale.html</a>
</li>

<li>Games That Push The Limits of the Atari 2600<br />
<a href="https://www.youtube.com/watch?v=zM0IsWdIc_g">https://www.youtube.com/watch?v=zM0IsWdIc_g</a>
</li>

<li>Vývojové nástroje používané v&nbsp;dobách osmibitových mikropočítačů<br />
<a href="https://www.root.cz/clanky/vyvojove-nastroje-pouzivane-v-dobach-osmibitovych-mikropocitacu/">https://www.root.cz/clanky/vyvojove-nastroje-pouzivane-v-dobach-osmibitovych-mikropocitacu/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/</a>
</li>

<li>Barvové palety čipu TIA<br />
<a href="http://www.qotile.net/minidig/docs/tia_color.html">http://www.qotile.net/minidig/docs/tia_color.html</a>
</li>

<li>Crazy Limit Pushing Games From the Last Years of the Atari 2600!<br />
<a href="https://www.youtube.com/watch?v=ADy1F8v59YU">https://www.youtube.com/watch?v=ADy1F8v59YU</a>
</li>

<li>Atari 2600 VCS Top 100 Games Hits (past week)<br />
<a href="http://www.atarimania.com/top-atari-atari-2600-vcs-_G_2_7.html">http://www.atarimania.com/top-atari-atari-2600-vcs-_G_2_7.html</a>
</li>

<li>Tobikomi - The Sound Of Thunder [Atari TIA Chip]<br />
<a href="https://www.youtube.com/watch?v=j0w-IZ6nAMQ">https://www.youtube.com/watch?v=j0w-IZ6nAMQ</a>
</li>

<li>TIA Visual Objects<br />
<a href="https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Visual_Objects.md">https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Visual_Objects.md</a>
</li>

<li>TIA Sound<br />
<a href="https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Sound.md">https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Sound.md</a>
</li>

<li>How To Make An Atari Game<br />
<a href="https://www.youtube.com/watch?v=Ww3her2zk_I">https://www.youtube.com/watch?v=Ww3her2zk_I</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 1<br />
<a href="https://www.youtube.com/watch?v=Iqo_oARxjEg">https://www.youtube.com/watch?v=Iqo_oARxjEg</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 2<br />
<a href="https://www.youtube.com/watch?v=hFFQjwFbzV8">https://www.youtube.com/watch?v=hFFQjwFbzV8</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 3<br />
<a href="https://www.youtube.com/watch?v=lZ0AL6jCBXY">https://www.youtube.com/watch?v=lZ0AL6jCBXY</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 4 - Title screens and challenges<br />
<a href="https://www.youtube.com/watch?v=-G2kmsmqk-E">https://www.youtube.com/watch?v=-G2kmsmqk-E</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 5 - Sound<br />
<a href="https://www.youtube.com/watch?v=9rX2eo20xq8">https://www.youtube.com/watch?v=9rX2eo20xq8</a>
</li>

<li>Let's Make an Atari 2600 game! 6 - Realtime RPG combat<br />
<a href="https://www.youtube.com/watch?v=alRGuQ9gjRA">https://www.youtube.com/watch?v=alRGuQ9gjRA</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 7 - Monsters<br />
<a href="https://www.youtube.com/watch?v=vaAlYC_8YSA">https://www.youtube.com/watch?v=vaAlYC_8YSA</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 8 - 3D Engine<br />
<a href="https://www.youtube.com/watch?v=c1dPY1ROZe4">https://www.youtube.com/watch?v=c1dPY1ROZe4</a>
</li>

<li>Let's Make an Atari 2600 Game - Part 9 - Homemade cartridge<br />
<a href="https://www.youtube.com/watch?v=xKlMohF_9Cc">https://www.youtube.com/watch?v=xKlMohF_9Cc</a>
</li>

<li>Bird Poop! - Atari 2600 Homebrew - batari Basic<br />
<a href="https://www.youtube.com/watch?v=-m4gKis0vBg">https://www.youtube.com/watch?v=-m4gKis0vBg</a>
</li>

<li>DP Interviews: Bob Whitehead (By Scott Stilphen)<br />
<a href="http://www.digitpress.com/library/interviews/interview_bob_whitehead.html">http://www.digitpress.com/library/interviews/interview_bob_whitehead.html</a>
</li>

<li>The dasm macro assembler<br />
<a href="http://dasm-dillon.sourceforge.net/">http://dasm-dillon.sourceforge.net/</a>
</li>

<li>Official home of dasm, a versatile macro assembler<br />
<a href="https://dasm-assembler.github.io/">https://dasm-assembler.github.io/</a>
</li>

<li>Dokumentace k&nbsp;DASMu<br />
<a href="https://raw.githubusercontent.com/dasm-assembler/dasm/master/docs/dasm.pdf">https://raw.githubusercontent.com/dasm-assembler/dasm/master/docs/dasm.pdf</a>
</li>

<li>Atari Programming Workshop Chapter links<br />
<a href="http://atariage.com/forums/viewtopic.php?t=47479">http://atariage.com/forums/viewtopic.php?t=47479</a>
</li>

<li>Various Development Kits<br />
<a href="http://devkits.handheldmuseum.com/">http://devkits.handheldmuseum.com/</a>
</li>

<li>Classic Console Development<br />
<a href="http://sebastianmihai.com/ccd/">http://sebastianmihai.com/ccd/</a>
</li>

<li>Atari 2600 development - Snappy (batari basic)<br />
<a href="http://sebastianmihai.com/main.php?t=47">http://sebastianmihai.com/main.php?t=47</a>
</li>

<li>Atari VCS (Atari 2600) - fotografie<br />
<a href="http://oldcomputers.net/atari-vcs.html">http://oldcomputers.net/atari-vcs.html</a>
</li>

<li>History of Consoles: Atari VCS/2600 (1977)<br />
<a href="http://gamester81.com/history-of-consoles-atari-vcs2600-1977/">http://gamester81.com/history-of-consoles-atari-vcs2600-1977/</a>
</li>

<li>Iag Bogost: Racing the Beam<br />
<a href="http://www.bogost.com/books/video_computer_system.shtml">http://www.bogost.com/books/video_computer_system.shtml</a>
</li>

<li>Atari 2600 Programming Tutorial<br />
<a href="http://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-01.html">http://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-01.html</a>
</li>

<li>Atari 2600 Development Cartridge *Super Deluxe*~!<br />
<a href="http://jazz-disassemblies.blogspot.cz/2013/09/atari-2600-development-cartridge-super.html">http://jazz-disassemblies.blogspot.cz/2013/09/atari-2600-development-cartridge-super.html</a>
</li>

<li>Atari "Alpine" Devkit (pro Atari Jaguar)<br />
<a href="http://justclaws.atari.org/devcats/hardware/ataridev.htm">http://justclaws.atari.org/devcats/hardware/ataridev.htm</a>
</li>

<li>6502 compatible assembler and emulator in javascript<br />
<a href="http://www.6502asm.com/">http://www.6502asm.com/</a>
</li>

<li>Atari 2600 Programming<br />
<a href="http://atariage.com/2600/programming/">http://atariage.com/2600/programming/</a>
</li>

<li>Retrozone - Brand new original homebrew games by current programmers<br />
<a href="http://www.retrousb.com/index.php?cPath=30">http://www.retrousb.com/index.php?cPath=30</a>
</li>

<li>ATARI VCS/2600 TIA CHIPS<br />
<a href="http://www.ataricompendium.com/faq/vcs_tia/vcs_tia.html">http://www.ataricompendium.com/faq/vcs_tia/vcs_tia.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://www.vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next">https://www.vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next</a>
</li>

<li>ZX Spectrum development with modern tools<br />
<a href="http://www.breakintoprogram.co.uk/software_development/zx-spectrum-development-with-modern-tools">http://www.breakintoprogram.co.uk/software_development/zx-spectrum-development-with-modern-tools</a>
</li>

<li>Z80 Development Toolchain<br />
<a href="http://www.breakintoprogram.co.uk/computers/zx-spectrum/assembly-language/z80-development-toolchain">http://www.breakintoprogram.co.uk/computers/zx-spectrum/assembly-language/z80-development-toolchain</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
