<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Základní technické parametry herní konzole Atari 2600</a></p>
<p><a href="#k03">*** 3. Komplikovaný vývoj her pro osmibitové herní konzole</a></p>
<p><a href="#k04">4. Oficiální vývojové prostředí pro konzole Atari 2600 a Atari 7800</a></p>
<p><a href="#k05">5. Vývoj her pro konzoli Atari 2600 v&nbsp;současnosti aneb kouzlo minimalizmu</a></p>
<p><a href="#k06">6. Současné vývojové a testovací nástroje používané pro vývoj homebrew her pro Atari 2600: hardcore varianta</a></p>
<p><a href="#k07">*** 7. Je možné pro Atari 2600 programovat i ve vyšších programovacích jazycích?</a></p>
<p><a href="#k08">*** 8. Projekt Batari BASIC</a></p>
<p><a href="#k09">9. Překlad Batari BASICu</a></p>
<p><a href="#k10">10. Příprava assembleru <strong>dasm</strong></a></p>
<p><a href="#k11">*** 11. Instalace emulátoru herní konzole Atari 2600</a></p>
<p><a href="#k12">*** 12. Překlad a spuštění demonstračního programu</a></p>
<p><a href="#k13">*** 13. Vytvoření vlastního programu &ndash; vykreslení textu na pozadí</a></p>
<p><a href="#k14">*** 14. Změna barvy herní plochy modifikací řídicího registru</a></p>
<p><a href="#k15">*** 15. Zobrazení střely</a></p>
<p><a href="#k16">*** 16. Posun střely joystickem</a></p>
<p><a href="#k17">*** 17. Změna barvy střely tlačítkem joysticku</a></p>
<p><a href="#k18">*** 18. Obsah druhého článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p><i>&bdquo;A minimum is required to program the beast.&ldquo;</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní technické parametry herní konzole Atari 2600</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Komplikovaný vývoj her pro osmibitové herní konzole</h2>

<p>První podpůrné nástroje pro vývoj her a dalších aplikací pro herní konzoli <i>Atari 2600</i> byly vyvinuty přímo ve společnosti Atari (Dave Crane a jeho kolegové), a to původně pro známý minipočítač <i>DEC PDP-11</i>. Jednalo se zejména o cross assembler spouštěný přímo na minipočítači, jímž produkovaný binární kód se přes sériovou linku (RS-232) přenášel do speciální cartridge umístěné v&nbsp;herní konzoli, konkrétně v&nbsp;konektoru určenému pro běžné herní cartridge. Tato vývojová cartridge kromě paměti RAM obsahovala i jednoduché rozhraní pro řádkový debugger spouštěný taktéž na minipočítači.  Vývojová cartridge emulovala běžnou paměťovou cartridge s&nbsp;pamětí ROM či EPROM. Tímto způsobem se postupně hra vyvíjela a testovala, což byl v&nbsp;porovnání s&nbsp;dneškem poměrně zdlouhavý proces, který byl navíc drahý &ndash; zejména pro nově založené společnosti zaměřené pouze na vývoj her (nikoli na prodej hardware) bylo problematické si zaplatit potřebný strojový čas minipočítače.</p>

<img src="http://i.iinfo.cz/images/515/hist6812.jpg" width="251" height="125" alt=" " />
<p><i>Obrázek 7: Barvová paleta herní konzole Atari 2600 při použití
televizního systému NTSC (tyto barvy využijeme později v&nbsp;demonstračních
příkladech).</i></p>

<p>Z&nbsp;tohoto důvodu se někteří programátoři alespoň zpočátku museli spokojit s&nbsp;jednodušším systémem: ručním překladem kódu z&nbsp;assembleru do strojového kódu, &bdquo;vypálením&ldquo; binárního obrazu hry do čipu EPROM a následným použitím této EPROM v&nbsp;cartridgi, která se v&nbsp;tomto případě prakticky nelišila od cartridgí, na nichž se prodávaly komerční hry (jediným rozdílem byl chybějící obal a umístění EPROM do patice a nikoli přímo na plošný spoj). Tento styl programování a testování byl v&nbsp;některých případech aplikován i při vývoji her pro herní konzoli <i>Nintendo Entertainment System (NES)</i>; jeden vývojář vzpomíná, že celý cyklus překlad+naprogramování EPROM+přenos paměťového čipu+spuštění hry na konzoli trval většinou patnáct minut (což může být dobré ponaučení pro nás dnešní vývojáře, kteří někdy nadáváme na to, že spuštění nového kódu z&nbsp;IDE trvá i několik sekund :-).</p>

<a href="http://i.iinfo.cz/images/100/games112-1.jpg"><img src="http://i.iinfo.cz/images/100/games112-1-prev.jpg" class="image-159782" width="370" height="173" alt="&#160;" /></a>
<p><i>Obrázek 7: O tomto modulu se prozatím definitivně neví, zda se jedná o originální vývojový modul hry River Raid (Activision), nebo jde o pirátskou kopii původní hry.</i></p>

<a href="http://i.iinfo.cz/images/23/69games8-19.png"><img src="http://i.iinfo.cz/images/23/69games8-19-prev.png" width="370" height="243" alt=" " /></a>
<p><i>Obrázek 8: První úroveň hry River Raid.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Oficiální vývojové prostředí pro konzole Atari 2600 a Atari 7800</h2>

<p>Později, především po úspěšné revoluci v&nbsp;oblasti domácích a později i
osobních počítačů, se vývoj her a dalších aplikací určených pro herní konzole
postupně přenesl na tyto relativně (skutečně však <i>relativně</i>) levné
počítače, což mj.&nbsp;znamenalo, že se o vývoj her mohli pokusit i jednotlivci
a společnosti s&nbsp;nízkým počátečním rozpočtem. Názorným příkladem takto
pojatého &bdquo;vývojového prostředí&ldquo; může být vývojové prostředí
nabízené společností Atari pro její herní konzole <i>Atari 7800</i> a taktéž
<i>Atari 2600</i> (díky prakticky stoprocentní zpětné kompatibilitě 7800
s&nbsp;2600). Tento vývojový nástroj byl určen pro běh na osobních počítačích
<i>Atari 520ST</i>, <i>Atari 1040ST</i> či pro řadu <i>Mega ST</i>; pro plnou
činnost byl vyžadován i pevný disk (nejenom disketová jednotka). Tyto počítače
byly přes paralelní port propojeny se speciální cartridgí s&nbsp;pamětí RAM,
která dokázala emulovat běžnou paměťovou cartridge (s&nbsp;ROM) a navíc
podporovala i komunikaci používanou debuggerem (ovládání probíhalo přes
emulátor terminálu). Tato cartridge byla přes standardní konektor připojena do
herní konzole 7800 (původní verze navíc vyžadovala úpravu ROM) či do původní
konzole 2600.</p>

<img src="http://i.iinfo.cz/images/100/games112-2.jpg" class="image-159783" width="272" height="449" alt="&#160;" >
<p><i>Obrázek 10: Pohled na další typ vývojového modulu pro herní konzoli Atari
2600 (zde ještě není osazen paměťovými čipy).</i></p>

<p>Mezi reálným modulem se hrou a vývojovou cartridgí samozřejmě existovalo
několik nepatrných rozdílů, které se týkaly zejména obsazení paměťových banků a
jejich přepínání. Navíc první dvě instrukce na vývojové cartridge musely
provádět její inicializaci (tím se vyplýtvaly celé čtyři cenné bajty :-).</p>

<img src="http://i.iinfo.cz/images/100/games112-3.png" class="image-159784" width="445" height="101" alt="&#160;" />
<p><i>Obrázek 11: Jednoduchý program napsaný v&nbsp;assembleru mikroprocesoru
MOS 6502.</i></p>

<p>Softwarová část takto pojatého vývojového prostředí se skládala
z&nbsp;několika nástrojů: programátorského editoru (upravená verze
<i>MicroEMACSu</i>), cross assembleru, konvertoru objektových souborů
generovaných assemblerem do formátu vhodného pro přímé uložení do RAM či EPROM
na cartridgi a mj.&nbsp;i z&nbsp;debuggeru, který podporoval trasování,
nastavování breakpointů, změnu obsahu RAM, změnu řídicích registrů atd.
Z&nbsp;tohoto popisu je zřejmé, že i přesto, že vývoj her probíhal na osobním
počítači (a ne minipočítači), základní nástroje a postupy zůstaly zachovány
&ndash; vývoj stále probíhal s&nbsp;využitím assembleru a (pravděpodobně) jen
minimum her využívalo kód napsaný v&nbsp;některém vyšším programovacím
jazyku.</p>

<p><div class="rs-tip-major">Poznámka: prakticky stejné nástroje jsou
pochopitelně dostupné i dnes, protože vývoj pro Atari 2600 stále
láká.</div></p>

<img src="http://i.iinfo.cz/images/100/games112-4.png" class="image-159785" width="383" height="694" alt="&#160;" />
<p><i>Obrázek 12: Část výukového programu pro herní konzoli Atari 2600, která
je taktéž naprogramovaná v&nbsp;assembleru mikroprocesoru MOS 6502.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vývoj her pro konzoli Atari 2600 v&nbsp;současnosti aneb kouzlo minimalizmu</h2>

<p>Jak jsme si již řekli v&nbsp;úvodních kapitolách, existuje i
v&nbsp;současnosti skupina vývojářů-amatérů (vlastně i polo-profesionálů,
protože některé hry jsou prodávány), jejichž koníčkem je vytváření her pro
staré osmibitové herní konzole. Někteří z&nbsp;těchto programátorů tvrdí, že
osmibitové herní konzole a konkrétně právě <i>Atari 2600</i>, jsou pro
nekomerční hry ideální platformou, protože takovou hru může vytvořit skutečně
pouze jeden člověk, podobně jako v&nbsp;osmdesátých letech minulého století.
Navíc jsou grafické možnosti těchto konzolí na tak nízké úrovni
(v&nbsp;porovnání nejenom se současnými standardy), že hra musí zaujmout
především hratelností a nikoli dechberoucí grafikou či pokročilými, ale mnohdy
jen prvoplánovými grafickými efekty. Další programátoři navíc vyzdvihují
skutečnost, že na osmibitových herních konzolích (a samozřejmě i na
osmibitových domácích mikropočítačích) se programuje jen o jednu úroveň nad
hardware. Nejsou zde tedy žádné další mezivrstvy, knihovny a frameworky; záleží
jen na umu programátora, jak bude výsledný produkt vypadat.</p>

<img src="http://i.iinfo.cz/images/100/games112-5.png" class="image-159786" width="600" height="446" alt="&#160;" />
<p><i>Obrázek 13: Jedna z&nbsp;novějších homebrew her, která se snaží napodobit
původní styl počítačových her.</i></p>

<p>Jak vlastně vývoj hry pro konzoli <i>Atari 2600</i> může vypadat dnes?
K&nbsp;dispozici je zapotřebí pouze minimum vývojových nástrojů (opět návrat
k&nbsp;minimalismu, zejména v&nbsp;porovnání se současnými IDE doplněnými o
mnohdy monstrózní frameworky, pro které prakticky každý den vychází opravné
verze), ovšem na druhou stranu je dnes snadnost vývoje pro 2600 na tak vysoké
úrovni, o níž se mohlo na konci sedmdesátých a v&nbsp;první polovině
osmdesátých let minulého století programátorům jenom zdát a to především díky
existenci kvalitních emulátorů herní konzolí. Díky nim je možné celý vývoj i
testování provést na osobním počítači s&nbsp;tím, že pouze finální produkt se
otestuje na reálném hardware herní konzole (mnohdy ani to není striktně
zapotřebí).</p>

<img src="http://i.iinfo.cz/images/100/games112-6.png" class="image-159787" width="600" height="446" alt="&#160;" />
<p><i>Obrázek 14: Další snímek ze stejné hry.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Současné vývojové a testovací nástroje používané pro vývoj homebrew her pro Atari 2600: hardcore varianta</h2>

<p>Pro vývoj nové hry či pro úpravu starší hry určené pro herní konzoli
<i>Atari 2600</i> dostačuje překvapivě pouze několik aplikací.
V&nbsp;&bdquo;hardcode&ldquo; variantě (tedy pro ty, kdo se nebojí assembleru a
především pak neustálé &bdquo;honby za elektronovým paprskem&ldquo;) se jedná
v&nbsp;první řadě o vhodný (cross) assembler, který dokáže zpracovat programy
určené pro osmibitový mikroprocesor MOS 6502. Jedná se například o makro
assembler <i>DASM</i>, který je takzvaným cross assemblerem, tj.&nbsp;běží na
moderních desktopech (není ho tedy nutné provozovat na reálném MOS 6502). Dále
se používá disassembler, který může být součástí emulátoru herní konzole.
Pochopitelně se používá i programátorský textový editor popř.&nbsp;může být
vhodný i hexa editor pro úpravy výsledného binárního souboru. A samozřejmě
nesmíme zapomenout na samotný emulátor herní konzole:</p>

<ol>
<li>Cross assembler (většinou se používá <i>DASM</i>)</li>
<li>Disassembler (<i>DiStella</i>)</li>
<li>Textový editor (samozřejmě <i>Vim</i> a pro skutečné fajnšmekry <i>Notepad</i> :-) </li>
<li>Hexa editor (<i>Beye</i>, <i>hexedit</i>, <i>xxd</i>, <i>hiew</i> apod.)</li>
<li>Emulátor herní konzole (pravděpodobně nejpoužívanější je <i>Stella</i> či <i>z26</i>)</li>
</ol>

<img src="http://i.iinfo.cz/images/682/112-14.png" class="image-159805" width="640" height="500" alt="&#160;" />
<p><i>Obrázek 14: Homebrew hra AVCSTec Challenge.</i></p>

<p>Existují však i další specializované nástroje, například:</p>

<ol>
<li>Atari 2600 BASIC Compiler (překladač z&nbsp;jednoduchého BASICu do strojového kódu, viz další text)</li>
<li>TIA Playfield Painter (jednoduchý editor pro tvorbu pozadí v maximálním rozlišení 80&times;192 pixelů)</li>
</ol>

<img src="http://i.iinfo.cz/images/248/112-15.png" class="image-159804" width="640" height="500" alt="&#160;" />
<p><i>Obrázek 15: Homebrew hra AVCSTec Challenge.</i></p>

<p>Nejdůležitější z&nbsp;těchto nástrojů je cross assembler <i>DASM</i> (<a
href="http://sourceforge.net/projects/dasm-dillon/">http://sourceforge.net/projects/dasm-dillon/</a>),
tj.&nbsp;takový assembler, který sice může být spuštěn na dnešním běžném
osobním počítači, ale generuje objektový soubor pro jiný typ mikroprocesoru.
První verze assembleru <i>DASM</i> vznikla už v&nbsp;období let 1987 až 1988 a
jejím autorem je Matt Dillon. Později došlo k&nbsp;mnoha úpravám tohoto
assembleru a v&nbsp;současnosti se jedná o produkt využitelný pro produkování
objektového kódu pro mnoho různých osmibitových mikroprocesorů: MOS 6502, MOS
6507 (v&nbsp;podstatě to samé až na jinou šířku adresové sběrnice), Motorola
řady 6800, Motorola řady 68HC11 či Fairchild F8. Existují ovšem i další nativní
a cross assemblery pro procesory MOS 6502, jejich seznam lze nalézt zde: <a
href="http://en.wikipedia.org/wiki/Comparison_of_assemblers#6502_assemblers">http://en.wikipedia.org/wiki/Comparison_of_assemblers#6502_assemblers</a>.</p>

<img src="http://i.iinfo.cz/images/499/112-16.png" class="image-159803" width="640" height="500" alt="&#160;" />
<p><i>Obrázek 16: Homebrew hra AVCSTec Challenge.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Je možné pro Atari 2600 programovat i ve vyšších programovacích jazycích?</h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Projekt Batari BASIC</h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. Překlad Batari BASICu</h2>

<p>Batari BASIC sice nebývá běžnou součástí repositářů distribucí Linuxu, ovšem
jeho překlad ve skutečnosti není nijak složitý. Potřebujete pouze překladač
céčka (resp.&nbsp;celý <i>GNU toolchain</i>) a taktéž nástroj Lex. Celý postup
zabere jen několik minut:</p>

<p>Získání poslední verze zdrojových kódů Batari BASICu:</p>

<pre>
$ <strong>git clone git@github.com:batari-Basic/batari-Basic.git</strong>
&nbsp;
Cloning into 'batari-Basic'...
remote: Enumerating objects: 298, done.
remote: Counting objects: 100% (93/93), done.
remote: Compressing objects: 100% (42/42), done.
remote: Total 298 (delta 61), reused 51 (delta 51), pack-reused 205
Receiving objects: 100% (298/298), 510.74 KiB | 1.46 MiB/s, done.
Resolving deltas: 100% (139/139), done.
</pre>

<p>Přechod do adresáře s&nbsp;naklonovaným projektem:</p>

<pre>
$ <strong>cd batari-Basic</strong>
</pre>

<p>Vlastní překlad (s&nbsp;několika varováními):</p>

<pre>
$ <strong>make</strong>
&nbsp;
cc -O2 -o 2600basic 2600bas.c statements.c keywords.c
In file included from /usr/include/string.h:495,
                 from 2600bas.c:5:
In function ‘strncpy’,
    inlined from ‘main’ at 2600bas.c:158:7:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: warning: ‘__builtin___strncpy_chk’ specified bound depends on the length of the source argument [-Wstringop-overflow=]
  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2600bas.c: In function ‘main’:
2600bas.c:158:34: note: length computed here
  158 |       strncpy(finalcode, mycode, strlen(mycode) - strlen(codeadd));
      |                                  ^~~~~~~~~~~~~~
lex -t&lt;preprocess.lex&gt;lex.yy.c
cc -O2 -o preprocess lex.yy.c
rm -f lex.yy.c
cc -O2 -o postprocess postprocess.c
lex -t -i&lt;optimize.lex&gt;lex.yy.c
cc -O2 -o optimize lex.yy.c
rm -f lex.yy.c
cc -O2 -o bbfilter bbfilter.c
</pre>

<p>Výsledkem překladu by měl být tento soubor:</p>

<pre>
$ <strong>ls -l 2600basic</strong>
&nbsp;
-rwxrwxr-x 1 ptisnovs ptisnovs 113480 Apr 22 15:55 2600basic
&nbsp;
&nbsp;
$ <strong>./2600basic -version</strong>
batari Basic v1.6-SNAPSHOT (c)2021
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Příprava assembleru <strong>dasm</strong></h2>

<p>Batari BASIC je, jak již víme, transpřekladačem, který provádí překlad
zdrojového kódu z&nbsp;BASICu do assembleru. Následně je nutné tento
vygenerovaný assembler přeložit do strojového kódu, jenž bude následně poslán
do emulátoru herní konzole Atari 2600 popř.&nbsp;nahrán na cartridge. Takovým
assemblerem je <strong>dasm</strong>, o němž jsme se již krátce zmínili <a
href="#k06">v&nbsp;šesté kapitole</a>. Ani tento assembler nebývá standardní
součástí repositářů distribucí Linuxu, ovšem jeho spustitelnou podobu lze
získat snadno. V&nbsp;adresáři s&nbsp;Batari BASICem se totiž nachází
podadresář nazvaný <strong>contrib</strong>, jenž obsahuje skript, který
<strong>dasm</strong> stáhne pro konkrétní architekturu procesoru:</p>

<pre>
$ <strong>pushd contrib</strong>
$ <strong>./fetch_dasm.sh</strong>
$ <strong>popd</strong>
</pre>

<p><strong>dasm</strong> sice v&nbsp;rámci dalších kapitol nebudeme používat
přímo, ovšem je vhodné si ověřit, zda je alespoň spustitelný:</p>

<pre>
$ <strong>./dasm.Linux.x64 </strong>
&nbsp;
DASM 2.20.14.1
Copyright (c) 1988-2020 by the DASM team.
License GPLv2+: GNU GPL version 2 or later (see file LICENSE).
DASM is free software: you are free to change and redistribute it.
There is ABSOLUTELY NO WARRANTY, to the extent permitted by law.
&nbsp;
Usage: dasm sourcefile [options]
&nbsp;
-f#      output format 1-3 (default 1)
-oname   output file name (else a.out)
-lname   list file name (else none generated)
-Lname   list file, containing all passes
-sname   symbol dump file name (else none generated)
-v#      verboseness 0-4 (default 0)
-d       debug mode (for developers)
-Dsymbol              define symbol, set to 0
-Dsymbol=expression   define symbol, set to expression
-Msymbol=expression   define symbol using EQM (same as -D)
-Idir    search directory for INCLUDE and INCBIN
-p#      maximum number of passes
-P#      maximum number of passes, with fewer checks
-T#      symbol table sorting (default 0 = alphabetical, 1 = address/value)
-E#      error format (default 0 = MS, 1 = Dillon, 2 = GNU)
-S       strict syntax checking
-R       remove binary output-file in case of errors
-m#      safety barrier to abort on recursions, max. allowed file-size in kB
&nbsp;
Report bugs on https://github.com/dasm-assembler/dasm please!
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Instalace emulátoru herní konzole Atari 2600</h2>

<pre>
$ <strong>sudo apt-get install stella</strong>
&nbsp;
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  evemu-tools evtest joystick libevemu3
The following NEW packages will be installed:
  evemu-tools evtest joystick libevemu3 stella
0 upgraded, 5 newly installed, 0 to remove and 0 not upgraded.
Need to get 1 654 kB of archives.
After this operation, 7 254 kB of additional disk space will be used.
Do you want to continue? [Y/n] y
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Překlad a spuštění demonstračního programu</h2>

<pre>
$ <strong>export PATH=.:$PATH</strong>
&nbsp;
$ <strong>export bB=.</strong>
</pre>

<pre>
$ <strong>./2600basic.sh bbstarfield.bas</strong>
&nbsp;
Found dasm version: DASM 2.20.14.1
Starting build of bbstarfield.bas
batari Basic v1.6-SNAPSHOT (c)2021
2600 Basic compilation complete.
      2373 bytes of ROM space left
&nbsp;
Complete. (0)
Build complete.
</pre>

<pre>
$ <strong>ls -la bbstarfield*</strong>
&nbsp;
-rw-rw-r-- 1 ptisnovs ptisnovs   2446 Apr 22 15:54 bbstarfield.bas
-rw-rw-r-- 1 ptisnovs ptisnovs  45033 Apr 22 16:06 bbstarfield.bas.asm
-rw-rw-r-- 1 ptisnovs ptisnovs   4096 Apr 22 16:06 bbstarfield.bas.bin
-rw-rw-r-- 1 ptisnovs ptisnovs 163820 Apr 22 16:06 bbstarfield.bas.lst
-rw-rw-r-- 1 ptisnovs ptisnovs  21947 Apr 22 16:06 bbstarfield.bas.sym
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vytvoření vlastního programu &ndash; vykreslení textu na pozadí</h2>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
  drawscreen
</pre>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
mainloop
    drawscreen
    goto mainloop
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Změna barvy herní plochy modifikací řídicího registru</h2>

<p>V&nbsp;dalším demonstračním příkladu je ukázáno, jakým způsobem je možné změnit barvu herní plochy. Tato barva je ukládána do řídicího registru nazvaného <strong>COLUPF</strong> (<i>COLor PlayField</i>). Barva se vybírá z&nbsp;palety resp.&nbsp;přesněji řečeno z&nbsp;několika palet, které jsou sice neměnné, ale liší se podle použitého televizního standardu. Ostatně se podívejte sami na stránku s&nbsp;těmito paletami, kterou lze nalézt na adrese <a href="http://www.qotile.net/minidig/docs/tia_color.html">http://www.qotile.net/minidig/docs/tia_color.html</a>.</p>

<p><div class="rs-tip-major">Poznámka: emulátor konzole Stella používá ve výchozím nastavení NTSC, což znamená, že je k&nbsp;dispozici větší počet barev.</div></p>

<p>Změna barvy zápisem do řídicího registru <strong>COLUPF</strong> je v&nbsp;Batari BASICu snadná:</p>

<pre>
  COLUPF = 14
</pre>

<p>Můžeme si to vyzkoušet modifikací předchozího příkladu:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
  COLUPF = 14
&nbsp;
mainloop
    drawscreen
    goto mainloop
</pre>

<p>Po spuštění tohoto příkladu by měl na začátku &bdquo;problinkout&ldquo; text v&nbsp;barvě číslo 14. Ihned poté ovšem dojde k&nbsp;překreslení zpět na barvu bílou. Proč tomu tak je? Standardní kernel Batari BASICu totiž dokáže ve spodní části obrazovky vykreslit skóre (vytvářené hry) a pro tento účel pochopitelně používá jak herní pole, tak i další grafické objekty konzole TIA. A u těch je implicitně (pro skóre) nastavena černá resp.&nbsp;bílá barva a proto interně dojde mj.&nbsp;i k&nbsp;přepisu registru <strong>COLUPF</strong>.</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end

mainloop
    COLUPF = 14
    drawscreen
    goto mainloop
</pre>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
  COLUPF = 14
&nbsp;
  a = 0
&nbsp;
mainloop
    drawscreen
    COLUPF = a
    a = a + 1
    goto mainloop
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zobrazení střely</h2>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end

  missile0x = 64
  missile0y = 64
  missile0height = 8

mainloop
    NUSIZ0 = $30
    COLUPF = 14
    COLUP0 = $1E

    drawscreen
    goto mainloop
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Posun střely joystickem</h2>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end


  missile0x = 64
  missile0y = 64
  missile0height = 8

mainloop
    NUSIZ0 = $30
    COLUPF = 14
    COLUP0 = $1E

    if joy0up then missile0y = missile0y - 1
    if joy0down then missile0y = missile0y + 1
    if joy0left then missile0x = missile0x - 1
    if joy0right then missile0x = missile0x + 1

    drawscreen
    goto mainloop
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Změna barvy střely tlačítkem joysticku</h2>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ...XXXX....XXX.....XXX...XXXXX..
 ...X...X..X...X...X...X....X....
 ...XXXX...X...X...X...X....X....
 ...X.X....X...X...X...X....X....
 ...X..X...X...X...X...X....X....
 ...X...X...XXX.....XXX.....X....
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end


  missile0x = 64
  missile0y = 64
  missile0height = 8

  a = $1E

mainloop
    NUSIZ0 = $30
    COLUPF = $7F
    COLUP0 = a

    if joy0up then missile0y = missile0y - 1
    if joy0down then missile0y = missile0y + 1
    if joy0left then missile0x = missile0x - 1
    if joy0right then missile0x = missile0x + 1
    if joy0fire then a = a + 1

    drawscreen
    goto mainloop
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah druhého článku</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady určené pro překlad
Batari-BASICem byly uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>playfield_1.bas</td><td>zobrazení herního pole, bez smyčky kernelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_1.bas</a></td></tr>
<tr><td>2</td><td>playfield_2.bas</td><td>ukázka smyčky kernelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_2.bas</a></td></tr>
<tr><td>3</td><td>playfield_3.bas</td><td>změna barvy herního pole mimo smyčku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_3.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_3.bas</a></td></tr>
<tr><td>4</td><td>playfield_4.bas</td><td>změna barvy herního pole uvnitř smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_4.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_4.bas</a></td></tr>
<tr><td>5</td><td>playfield_5.bas</td><td>postupná změna barvy herního pole</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_5.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_5.bas</a></td></tr>
<tr><td>6</td><td>missile_1.bas</td><td>zobrazení střely nad herním polem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_1.bas</a></td></tr>
<tr><td>7</td><td>missile_2.bas</td><td>pohyb střelou pomocí joysticku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_2.bas</a></td></tr>
<tr><td>8</td><td>missile_3.bas</td><td>změna barvy střely tlačítkem joysticku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_3.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_3.bas</a></td></tr>
<table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Batari BASIC GitHub repositář<br />
<a href="https://github.com/batari-Basic/batari-Basic">https://github.com/batari-Basic/batari-Basic</a>
</li>

<li>Programming Tutorial<br />
<a href="https://atariage.com/forums/topic/111938-programming-tutorial/">https://atariage.com/forums/topic/111938-programming-tutorial/</a>
</li>

<li>batari Basic Commands<br />
<a href="https://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html">https://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html</a>
</li>

<li>About batari Basic<br />
<a href="https://bataribasic.com/">https://bataribasic.com/</a>
</li>

<li>Rationale<br />
<a href="https://bataribasic.com/rationale.html">https://bataribasic.com/rationale.html</a>
</li>

<li>Games That Push The Limits of the Atari 2600<br />
<a href="https://www.youtube.com/watch?v=zM0IsWdIc_g">https://www.youtube.com/watch?v=zM0IsWdIc_g</a>
</li>

<li>Vývojové nástroje používané v&nbsp;dobách osmibitových mikropočítačů<br />
<a href="https://www.root.cz/clanky/vyvojove-nastroje-pouzivane-v-dobach-osmibitovych-mikropocitacu/">https://www.root.cz/clanky/vyvojove-nastroje-pouzivane-v-dobach-osmibitovych-mikropocitacu/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/</a>
</li>

<li>Barvové palety čipu TIA<br />
<a href="http://www.qotile.net/minidig/docs/tia_color.html">http://www.qotile.net/minidig/docs/tia_color.html</a>
</li>

<li>Crazy Limit Pushing Games From the Last Years of the Atari 2600!<br />
<a href="https://www.youtube.com/watch?v=ADy1F8v59YU">https://www.youtube.com/watch?v=ADy1F8v59YU</a>
</li>

<li>Atari 2600 VCS Top 100 Games Hits (past week)<br />
<a href="http://www.atarimania.com/top-atari-atari-2600-vcs-_G_2_7.html">http://www.atarimania.com/top-atari-atari-2600-vcs-_G_2_7.html</a>
</li>

<li>Tobikomi - The Sound Of Thunder [Atari TIA Chip]<br />
<a href="https://www.youtube.com/watch?v=j0w-IZ6nAMQ">https://www.youtube.com/watch?v=j0w-IZ6nAMQ</a>
</li>

<li>TIA Visual Objects<br />
<a href="https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Visual_Objects.md">https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Visual_Objects.md</a>
</li>

<li>TIA Sound<br />
<a href="https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Sound.md">https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Sound.md</a>
</li>

<li>How To Make An Atari Game<br />
<a href="https://www.youtube.com/watch?v=Ww3her2zk_I">https://www.youtube.com/watch?v=Ww3her2zk_I</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 1<br />
<a href="https://www.youtube.com/watch?v=Iqo_oARxjEg">https://www.youtube.com/watch?v=Iqo_oARxjEg</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 2<br />
<a href="https://www.youtube.com/watch?v=hFFQjwFbzV8">https://www.youtube.com/watch?v=hFFQjwFbzV8</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 3<br />
<a href="https://www.youtube.com/watch?v=lZ0AL6jCBXY">https://www.youtube.com/watch?v=lZ0AL6jCBXY</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 4 - Title screens and challenges<br />
<a href="https://www.youtube.com/watch?v=-G2kmsmqk-E">https://www.youtube.com/watch?v=-G2kmsmqk-E</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 5 - Sound<br />
<a href="https://www.youtube.com/watch?v=9rX2eo20xq8">https://www.youtube.com/watch?v=9rX2eo20xq8</a>
</li>

<li>Let's Make an Atari 2600 game! 6 - Realtime RPG combat<br />
<a href="https://www.youtube.com/watch?v=alRGuQ9gjRA">https://www.youtube.com/watch?v=alRGuQ9gjRA</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 7 - Monsters<br />
<a href="https://www.youtube.com/watch?v=vaAlYC_8YSA">https://www.youtube.com/watch?v=vaAlYC_8YSA</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 8 - 3D Engine<br />
<a href="https://www.youtube.com/watch?v=c1dPY1ROZe4">https://www.youtube.com/watch?v=c1dPY1ROZe4</a>
</li>

<li>Let's Make an Atari 2600 Game - Part 9 - Homemade cartridge<br />
<a href="https://www.youtube.com/watch?v=xKlMohF_9Cc">https://www.youtube.com/watch?v=xKlMohF_9Cc</a>
</li>

<li>Bird Poop! - Atari 2600 Homebrew - batari Basic<br />
<a href="https://www.youtube.com/watch?v=-m4gKis0vBg">https://www.youtube.com/watch?v=-m4gKis0vBg</a>
</li>

<li>DP Interviews: Bob Whitehead (By Scott Stilphen)<br />
<a href="http://www.digitpress.com/library/interviews/interview_bob_whitehead.html">http://www.digitpress.com/library/interviews/interview_bob_whitehead.html</a>
</li>

<li>The dasm macro assembler<br />
<a href="http://dasm-dillon.sourceforge.net/">http://dasm-dillon.sourceforge.net/</a>
</li>

<li>Official home of dasm, a versatile macro assembler<br />
<a href="https://dasm-assembler.github.io/">https://dasm-assembler.github.io/</a>
</li>

<li>Dokumentace k&nbsp;DASMu<br />
<a href="https://raw.githubusercontent.com/dasm-assembler/dasm/master/docs/dasm.pdf">https://raw.githubusercontent.com/dasm-assembler/dasm/master/docs/dasm.pdf</a>
</li>

<li>Atari Programming Workshop Chapter links<br />
<a href="http://atariage.com/forums/viewtopic.php?t=47479">http://atariage.com/forums/viewtopic.php?t=47479</a>
</li>

<li>Various Development Kits<br />
<a href="http://devkits.handheldmuseum.com/">http://devkits.handheldmuseum.com/</a>
</li>

<li>Classic Console Development<br />
<a href="http://sebastianmihai.com/ccd/">http://sebastianmihai.com/ccd/</a>
</li>

<li>Atari 2600 development - Snappy (batari basic)<br />
<a href="http://sebastianmihai.com/main.php?t=47">http://sebastianmihai.com/main.php?t=47</a>
</li>

<li>Atari VCS (Atari 2600) - fotografie<br />
<a href="http://oldcomputers.net/atari-vcs.html">http://oldcomputers.net/atari-vcs.html</a>
</li>

<li>History of Consoles: Atari VCS/2600 (1977)<br />
<a href="http://gamester81.com/history-of-consoles-atari-vcs2600-1977/">http://gamester81.com/history-of-consoles-atari-vcs2600-1977/</a>
</li>

<li>Iag Bogost: Racing the Beam<br />
<a href="http://www.bogost.com/books/video_computer_system.shtml">http://www.bogost.com/books/video_computer_system.shtml</a>
</li>

<li>Atari 2600 Programming Tutorial<br />
<a href="http://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-01.html">http://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-01.html</a>
</li>

<li>Atari 2600 Development Cartridge *Super Deluxe*~!<br />
<a href="http://jazz-disassemblies.blogspot.cz/2013/09/atari-2600-development-cartridge-super.html">http://jazz-disassemblies.blogspot.cz/2013/09/atari-2600-development-cartridge-super.html</a>
</li>

<li>Atari "Alpine" Devkit (pro Atari Jaguar)<br />
<a href="http://justclaws.atari.org/devcats/hardware/ataridev.htm">http://justclaws.atari.org/devcats/hardware/ataridev.htm</a>
</li>

<li>6502 compatible assembler and emulator in javascript<br />
<a href="http://www.6502asm.com/">http://www.6502asm.com/</a>
</li>

<li>Atari 2600 Programming<br />
<a href="http://atariage.com/2600/programming/">http://atariage.com/2600/programming/</a>
</li>

<li>Retrozone - Brand new original homebrew games by current programmers<br />
<a href="http://www.retrousb.com/index.php?cPath=30">http://www.retrousb.com/index.php?cPath=30</a>
</li>

<li>ATARI VCS/2600 TIA CHIPS<br />
<a href="http://www.ataricompendium.com/faq/vcs_tia/vcs_tia.html">http://www.ataricompendium.com/faq/vcs_tia/vcs_tia.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

