<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Small Basic: moderní reinkarnace BASICu určená pro výuku programování</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Small Basic: moderní reinkarnace BASICu určená pro výuku programování</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na stránkách Roota jsme se již několikrát zmínili o jazycích navržených pro výuku programování. Příkladem je například projekt Scratch atd. Do této kategorie spadá i Small Basic, jehož jméno se sice odkazuje na klasické BASICy, ovšem jedná se o značně rozdílný dialekt.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Jazyky určené (a někdy i vhodné) pro výuku programování</a></p>
<p><a href="#k02">2. Když je &bdquo;vizuální&ldquo; programování již náročné: projekt Small Basic</a></p>
<p><a href="#k03">3. První seznámení se Small Basicem &ndash; program typu &bdquo;Hello, world!&ldquo;</a></p>
<p><a href="#k04">4. Práce s&nbsp;proměnnými, základní datové typy</a></p>
<p><a href="#k05">5. Předpřipravené objekty, manipulace s&nbsp;řetězci</a></p>
<p><a href="#k06">6. Interaktivní vstup dat</a></p>
<p><a href="#k07">7. Podmínky, strukturovaný příkaz typu <strong>if-then-else</strong></a></p>
<p><a href="#k08">8. Vnořené konstrukce <strong>if-then</strong></a></p>
<p><a href="#k09">9. Počítaná programová smyčka typu <strong>FOR-NEXT</strong></a></p>
<p><a href="#k10">10. Programová smyčka typu <strong>WHILE</strong></a></p>
<p><a href="#k11">11. Výpočet největšího společného dělitele &ndash; realizace v&nbsp;GW-BASICu a Small Basicu</a></p>
<p><a href="#k12">12. Podprogramy</a></p>
<p><a href="#k13">13. Převod programu postaveného na podprogramech z&nbsp;GW-BASICu do Small Basicu</a></p>
<p><a href="#k14">14. Příkaz <strong>GOTO</strong> aneb vaříme špagety</a></p>
<p><a href="#k15">15. Převod programu postaveného na <strong>GOTO</strong> z&nbsp;GW-BASICu do Small Basicu</a></p>
<p><a href="#k16">16. Pole a mapy &ndash; překvapivě snadné téma</a></p>
<p><a href="#k17">17. Pasti připravené ve Small Basicu</a></p>
<p><a href="#k18">18. Obsah druhého článku o Small Basicu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Jazyky určené (a někdy i vhodné) pro výuku programování</h2>

<p><i>It's a bit like learning natural languages: the earlier the better.<br />
Michael Kölling</i></p>

<p>V&nbsp;současnosti existuje a je aktivně používáno několik desítek
programovacích jazyků, ať již jazyků interpretovaných či překládaných do
nativního kódu nebo bajtkódu. Až na několik výjimek se však jedná o takové
jazyky, které nejsou příliš vhodné pro první seznámení dětí s&nbsp;návrhem
algoritmů a jednoduchých aplikací. Z&nbsp;tohoto důvodu vzniklo a stále ještě
vzniká poměrně velké množství projektů, jejichž cílem je seznámit děti
předškolního věku či děti na prvním stupni ZŠ se základem algoritmizace a
mnohdy i s&nbsp;tvorbou počítačové grafiky (protože grafický výstup či dokonce
animace jsou nepochybně atraktivní). Jmenujme například projekty Logo, Scratch,
BYOB, Snap!, Alice, Android App Inventor, Starlogo, Etoys, DesignBlocks, Pocket
Code, Hopscotch, Blockly, Greenfoot, Processing, GameMaker nebo právě
<i>Microsoft Small Basic</i>, kterým se budeme zabývat dnes.</p>

*** image ***
<p><i>Obrázek 1: Moderní integrovaná vývojová prostředí jsou sice pro amatérské
i profesionální programátory velmi užitečná, ovšem při výuce může jejich velká
variabilita být v&nbsp;některých ohledech spíše kontraproduktivní.</i></p>

<p>Některé v&nbsp;praxi používané programovací jazyky (například <i>Python</i>
či možná spíše <i>Lua</i>) je sice možné použít pro výuku programování, ovšem
pro děti předškolního věku nebo pro děti na prvním stupni základních škol se
podle mého názoru příliš nehodí, a to hned z&nbsp;několika důvodů. Jedním
z&nbsp;těchto důvodů je nutnost zápisu algoritmů pomocí více či méně
strukturovaného textu, jehož syntaxe je hlídána buď interpretrem či
překladačem. Jedná se o nejdéle používaný způsob programování, jehož počátky
můžeme hledat v&nbsp;hluboké počítačové minulosti, protože první překladač
pracující se strojovým textem byl vytvořen již v&nbsp;rozmezí let 1951 až 1952
<i>Grace Hopperovou</i> v&nbsp;rámci projektu <i>A-0 (Arithmetic Language
version 0)</i>, který byl později následován známým <i>FORTRANem</i> navrženým
<i>Johnem W. Backusem</i> a jeho vývojovým týmem. Ovšem v&nbsp;průběhu oněch
cca šedesáti let se znovu a znovu objevovaly více či méně úspěšné pokusy o
vizuální návrh algoritmů, tj.&nbsp;o tvorbu programů nikoli zápisem
strukturovaného zdrojového textu, ale návrhem algoritmů pomocí diagramů
vytvářených například s&nbsp;využitím myši, gesty či v&nbsp;minulosti pomocí
světelného pera.</p>

*** image ***
<p><i>Obrázek 2: Bloky, z&nbsp;nichž se programy tvořené ve Scratchi skládají,
jsou na základě své funkce rozděleny do osmi kategorií. Povšimněte si, že
prostředí Scratche bylo téměř kompletně počeštěno; jedna z&nbsp;mála částí
ponechaná v&nbsp;angličtině je nápověda k&nbsp;jednotlivým příkazům (i když i
tato část se pravděpodobně brzy přeloží).</i></p>

<p>Poměrně dobře známé jsou například pokusy o přímý &bdquo;překlad&ldquo;
klasických vývojových diagramů, využití takzvaných kopenogramů atd.
V&nbsp;současnosti někteří analytici a vývojáři využívají vizuální/grafický
jazyk <i>UML</i> (což je ovšem jen pomůcka) či <i>BPM</i> (návrh business
procesů, ovšem s&nbsp;vhodně zvolenými bloky se vlastně jedná o plnohodnotný
jazyk). V&nbsp;oblasti software určeného pro výuku programování se využívá
podobný princip, jako v&nbsp;případě vývojových diagramů &ndash; možnost zápisu
(či možná lépe řečeno deklarace) algoritmů s&nbsp;využitím bloků
představujících jednotlivé příkazy či volané funkce, které jsou doplněny o
základní strukturované příkazy určené pro tvorbu rozhodovacích podmínek a
programových smyček. Na tomto principu, tj.&nbsp;na vylepšených a vizuálně
přitažlivějších vývojových diagramech, je postaven i projekt <i>Scratch</i>,
v&nbsp;němž jsou uživatelům nabídnuty základní stavební <i>bloky</i>,
z&nbsp;nichž se program skládá, přičemž je ponecháno pouze na uživateli, jakým
způsobem tyto bloky využije ve svých programech.</p>

*** image ***
<p><i>Obrázek 3: Programy se ve Scratchi tvoří přetahováním příkazových bloků
z&nbsp;oblasti umístěné v&nbsp;levé části okna do střední oblasti, zde
nadepsané &bdquo;Skripty&ldquo; (nová verze Scratche používá nepatrně odlišný
design grafického uživatelského rozhraní).</i></p>

<p>Díky způsobu implementace skládání bloků pod sebe, popř.&nbsp;do sebe
(s&nbsp;využitím &bdquo;zámků&ldquo;, podobně jako u puzzle) je zajištěno, že
program bude po syntaktické stránce vždy v&nbsp;pořádku, což je důležité,
protože odpadá pro děti nudná oprava překlepů, hledání chybějících středníků,
hlídání párovosti závorek i další činnosti spojené s&nbsp;prací s&nbsp;běžnými
programovacími jazyky. Uživatel se tedy musí starat o to podstatné &ndash; o
sémantiku navrhované aplikace.</p>

*** image ***
<p><i>Obrázek 4: Editor bitmapových spritů zabudovaný přímo ve Scratchi.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Když je &bdquo;vizuální&ldquo; programování již náročné: projekt Small Basic</h2>

<p><i>&bdquo;BASIC used to be on every computer a child touched -- but today
there's no easy way for kids to get hooked on programming.&ldquo;</i></p>

<p>Scratch a od něj odvozené projekty je velmi populárním vývojovým nástrojem,
ovšem s&nbsp;rostoucí délkou programů se stává jeho používání poměrně
neefektivní, stejně jako v&nbsp;případě úpravy programů (zejména zápisy
výrazů). Proto je &ndash; alespoň podle mého názoru &ndash; vhodné po dosažení
určité úrovně přejít na standardnější typ tvorby programů &ndash; a to
založeného na zápisu zdrojových kódů lety ověřeným způsobem a s&nbsp;případnou
dopomocí formou nápovědy, kontextových nabídek atd. A právě tímto směrem se
vydal i <i>Small Basic</i>, což je projekt založený na myšlenkách uveřejněných
ve známém článku <a
href="https://web.archive.org/web/20130918213750/http://www.salon.com/2006/09/14/basic_2/singleton/">Why
Johnny can’t code</a>. <i>Small Basic</i> v&nbsp;současnosti existuje jak ve
formě běžné aplikace pro Windows, tak i ve formě &bdquo;webového integrovaného
vývojového prostředí&ldquo;, které je dostupné na adrese <a
href="smallbasic-publicwebsite.azurewebsites.net/">smallbasic-publicwebsite.azurewebsites.net/</a>.</p>

<p><div class="rs-tip-major">Poznámka: webové prostředí kupodivu funguje bez
problémů i ve Firefoxu běžícího v&nbsp;Linuxu.</div></p>

<p>Samotný <i>Small Basic</i> je navržen poměrně minimalisticky, protože
rozpoznává pouze čtrnáct klíčových slov a dva operátory zapsané slovy; další
funkcionalita je &bdquo;schována&ldquo; v&nbsp;jednotlivých modulech:</p>

<table>
<tr><th> #</th><th>Klíčové slovo</th><th>Stručný popis klíčového slova</th></tr>
<tr><td> 1</td><td><strong>If</strong></td><td>začátek rozhodovací konstrukce</td></tr>
<tr><td> 2</td><td><strong>Then</strong></td><td>podmíněná větev v&nbsp;rozhodovací konstrukci</td></tr>
<tr><td> 3</td><td><strong>Else</strong></td><td>alternativní (nepovinná) větev v&nbsp;rozhodovací konstrukci</td></tr>
<tr><td> 4</td><td><strong>ElseIf</strong></td><td>další podmínka (opět nepovinná) v&nbsp;rozhodovací konstrukci</td></tr>
<tr><td> 5</td><td><strong>EndIf</strong></td><td>konec rozhodovací konstrukce</td></tr>
<tr><td> 6</td><td><strong>For</strong></td><td>začátek počítané programové smyčky <strong>for</strong></td></tr>
<tr><td> 7</td><td><strong>To</strong></td><td>specifikace druhé limitní hodnoty počítané programové smyčky <strong>for</strong></td></tr>
<tr><td> 8</td><td><strong>Step</strong></td><td>specifikace kroku (změny) počitadla v&nbsp;programové smyčce <strong>for</strong></td></tr>
<tr><td> 9</td><td><strong>EndFor</strong></td><td>konec těla programové smyčky typu <strong>for</strong></td></tr>
<tr><td>10</td><td><strong>While</strong></td><td>začátek programové smyčky typu <strong>while</strong> se specifikací podmínky</td></tr>
<tr><td>11</td><td><strong>EndWhile</strong></td><td>konec těla programové smyčky typu <strong>while</strong></td></tr>
<tr><td>12</td><td><strong>Sub</strong></td><td>začátek podprogramu se specifikací jeho jména</td></tr>
<tr><td>13</td><td><strong>EndSub</strong></td><td>konec podprogramu začínajícího klíčovým slovem <strong>sub</strong></td></tr>
<tr><td>14</td><td><strong>Goto</strong></td><td>nestrukturovaný skok na jiné místo programu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td><strong>And</strong></td><td>logická spojka &ndash; součin</td></tr>
<tr><td>16</td><td><strong>Or</strong></td><td>logická spojka &ndash; součet</td></tr>
</table>

<p><i>Small Basic</i> podporuje jen globální proměnné (což zásadním způsobem
omezuje jeho použití ve větších projektech!) a umožňuje zápis podprogramů,
ovšem bez možnosti předání parametrů v&nbsp;argumentech. Další vlastnosti a
omezení jsou zmíněny v&nbsp;dalším textu.</p>

*** image ***
<p><i>Obrázek 5: Uživatelské prostředí Small Basicu je navrženo takovým
způsobem, aby obsahovalo pouze ty nejnutnější operace.</i></p>

<p><div class="rs-tip-major">Poznámka: označení &bdquo;Small&ldquo; se týká
počtu klíčových slov jazyka a částečně i jeho vyjadřovací schopnosti. Samotná
implementace &bdquo;Small&ldquo; Basicu ovšem není v&nbsp;žádném případě
&bdquo;malá&ldquo;, zejména v&nbsp;porovnání s&nbsp;klasickými BASICy,
z&nbsp;nichž většina byla implementována v&nbsp;osmi kilobajtech ROM, některé
větší pak v&nbsp;šestnácti kilobajtech (existují však i BASICy pro 2kB a 4kB
ROM).</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První seznámení se Small Basicem &ndash; program typu &bdquo;Hello, world!&ldquo;</h2>

<p><i>Small Basic</i> je možné začít používat přímo z&nbsp;webového prohlížeče.
Webové integrované vývojové prostředí je dostupné na adrese <a
href="https://smallbasic-publicwebsite.azurewebsites.net/">https://smallbasic-publicwebsite.azurewebsites.net/</a>.
Samotné grafické uživatelské rozhraní je pojato minimalisticky, ale přesto zde
nalezneme například i jednoduchý debugger a taktéž (pro začátečníky důležité)
kontextové doplňování funkcí a metod, které jsou rozděleny do několika
modulů:</p>

*** image ***
<p><i>Obrázek 6: Kontextové doplňování (resp.&nbsp;nabídka) názvů funkcí,
atributů i metod (ty si, kromě dvou základních metod, popíšeme příště).</i></p>

<p>Po zápisu alespoň jednoho znaku z&nbsp;názvu funkce/metody/atributu se
pochopitelně nabídka zúží:</p>

*** image ***
<p><i>Obrázek 7: Zúžení kontextové nabídky.</i></p>

*** image ***
<p><i>Obrázek 8: Automaticky se zobrazí i nápověda k&nbsp;vybranému
identifikátoru, ale v&nbsp;mnoha prohlížečích je text nápovědy
rozházen.</i></p>

<p>Případné chyby jsou okamžitě hlášeny již při zápisu jednotlivých řádků:</p>

*** image ***
<p><i>Obrázek 9: Nahlášená chyba.</i></p>

<p>Nyní si ukažme standardní program typu &bdquo;Hello, world!&ldquo;
v&nbsp;jeho variantě pro <i>Small Basic</i>. Ve standardním BASICu by tento
program vypadal takto:</p>

<pre>
PRINT "Hello, world!"
</pre>

<p>Ovšem ve <i>Small Basicu</i> klíčové slovo <strong>PRINT</strong>
neexistuje. Namísto toho musíme použít metodu <strong>WriteLine</strong>
objektu <strong>TextWindow</strong> (i když začátečníkům není nutné pojmy
&bdquo;objekt&ldquo; a &bdquo;metoda&ldquo; vysvětlovat a ani nikde
v&nbsp;oficiální dokumentaci uvedeny nejsou):</p>

<pre>
TextWindow.WriteLine("Hello, world!")
</pre>

<p>Po spuštění tohoto programu by se měla otevřít textová konzole (ve stejném
okně prohlížeče), do ní by se měla vypsat příslušná zpráva a za ní ještě
informace o tom, že byl program úspěšně ukončen:</p>

*** image ***
<p><i>Obrázek 10: Zpráva vypsaná programem typu &bdquo;Hello, world!&ldquo;
současně s&nbsp;informací o úspěšném ukončení programu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Práce s&nbsp;proměnnými, základní datové typy</h2>

<p>Proměnné se vytvoří automaticky při jejich prvním použití v&nbsp;programu.
Typicky se jedná o přiřazení hodnoty do proměnné. Přitom lze použít jak
numerické hodnoty, tak i řetězce, a to bez explicitního uvedení typu proměnné
(typ je přiřazen k&nbsp;hodnotě):</p>

<pre>
message = "Hello, world!"
TextWindow.WriteLine(message)
</pre>

<p><div class="rs-tip-major">Poznámka: na rozdíl od klasických BASICů se tedy
zcela obejdeme bez příkazu <strong>DIM</strong> a nepoužívají se ani suffixy
<strong>$</strong> pro označení proměnných obsahujících řetězce.</div></p>

<p>Pochopitelně je podporována i práce s&nbsp;proměnnými obsahujícími numerické
hodnoty. K&nbsp;dispozici je i standardní pětice aritmetických operátorů:</p>

<pre>
x = 10
y = 20
z = x + y
TextWindow.WriteLine(z)
</pre>

<p>Pro <i>Small Basic</i> je typické, že lze kombinovat numerické hodnoty
s&nbsp;řetězci, což je ovšem na druhou stranu zdroj častých problémů:</p>

<pre>
message = "Result: "
x = 10
y = 20
z = x + y
TextWindow.WriteLine(message + z)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Předpřipravené objekty, manipulace s&nbsp;řetězci</h2>

<p>Již v&nbsp;předchozím textu jsme se zmínili o předpřipravených objektech a
jejich metodách popř.&nbsp;i o atributech. Tímto způsobem jsou řešeny například
i operace s&nbsp;řetězci. V&nbsp;původních BASICech od společnosti Microsoft se
například pro získání podřetězce daly použít vestavěné funkce pojmenované
<strong>LEFT$</strong>, <strong>RIGHT$</strong> a <strong>MID$</strong>:</p>

<pre>
1 REM *****************************
2 REM Prace s retezci, manipulace
3 REM s obsahem retezcu.
4 REM 
5 REM Uprava pro GW-BASIC
6 REM
7 REM *****************************
8 REM
9 REM
30 A$="HELLO WORLD!"
40 PRINT A$
50 PRINT LEFT$(A$, 5)
60 PRINT RIGHT$(A$, 6)
70 PRINT MID$(A$, 7, 5)
999 END
</pre>

<p>Ve <i>Small Basicu</i> je namísto toho nutné použít funkce (nebo, chcete-li,
třídní metody) objektu <strong>Text</strong>. Pro získání podřetězce se použije
<strong>GetSubText</strong>:</p>

<pre>
txt = "www.root.cz"
message = Text.GetSubText(txt, 5, 4)
TextWindow.WriteLine(message)
</pre>

<p><div class="rs-tip-major">Poznámka: na jednu stranu ve Small Basicu musíme
používat dlouhé kombinace názvů objektů a metod, na stranu druhou se využitím
&bdquo;tečkové notace&ldquo; vyřešily dva problémy: již zmíněná kontextová
nápověda a taktéž logické rozdělení funkcí podle jejich významu. Taktéž je nyní
možné mít více funkcí se stejným jménem, ale s&nbsp;odlišným významem &ndash;
postačuje, aby byly definovány jako metody v&nbsp;jiném objektu, který zde
současně slouží jako jmenný prostor. Příkladem může být funkce/metoda nazvaná
<strong>Show</strong>, která je použita několikrát, pokaždé ovšem v&nbsp;jiném
kontextu a tím pádem i s&nbsp;odlišným chováním.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Interaktivní vstup dat</h2>

<p>Pro ruční zadávání číselných údajů nebo textu (řetězců) slouží
v&nbsp;klasických verzích BASICu příkaz nazvaný <strong>INPUT</strong>. Ten
ovšem ve Small Basicu nenajdeme. Namísto toho je nutné použít některou funkci
ze jmenného prostoru <strong>TextWindow</strong>. Konkrétně pro ruční zadání
číselných údajů slouží funkce nazvaná <strong>ReadNumber</strong>, která
dokonce ani neumožní zápis jiných než numerických znaků. Použití této důležité
funkce (která mimochodem v&nbsp;mnoha jiných jazycích v&nbsp;takto jednoduše
použitelné formě ani neexistuje!) je triviální:</p>

<pre>
TextWindow.Write("Circle radius = ")
r = <strong>TextWindow.ReadNumber()</strong>
&nbsp;
area = Math.Pi * r * r
&nbsp;
TextWindow.WriteLine("Circle area = " + area)
</pre>

<p><div class="rs-tip-major">Poznámka: díky tomu, že se skutečně jedná o
funkci, nebylo nutné do Small Basicu přidávat v&nbsp;mnoha ohledech nekoncepční
příkaz <strong>INPUT</strong>.</div></p>

<p>Praktické použití této funkce je patrné z&nbsp;následující dvojice
screenshotů:</p>

*** image ***
<p><i>Obrázek 11: Čekání na zápis čísla.</i></p>

*** image ***
<p><i>Obrázek 12: Výsledek výpočtu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Podmínky, strukturovaný příkaz typu <strong>if-then-else</strong></h2>

<p>Součástí prakticky jakéhokoli Turingovsky kompletního programovacího jazyka
je nějaká forma rozhodovací konstrukce popř.&nbsp;speciální formy se stejným
významem. Výjimkou pochopitelně není ani <i>Small Basic</i>, který obsahuje
strukturovaný příkaz typu <strong>if-then-else</strong>, jenž lze ovšem
rozšířit i o další zřetězené podmínky. Základní tvar tohoto příkazu neobsahuje
větev <strong>else</strong>:</p>

<pre>
TextWindow.Write("Circle radius = ")
r = TextWindow.ReadNumber()
&nbsp;
<strong>if</strong> r &lt; 0 <strong>then</strong>
    TextWindow.WriteLine("Negative radius?!")
<strong>endif</strong>
&nbsp;
area = Math.Pi * r * r
&nbsp;
TextWindow.WriteLine("Circle area = " + area)
</pre>

<p><div class="rs-tip-major">Poznámka: jak uvidíme dále, všechny příkazy, které
tvoří bloky, končí klíčovým slovem začínajícím na <strong>end</strong>,
v&nbsp;tomto případě konkrétně slovem <strong>endif</strong>.</div></p>

<p>Úplné rozvětvení do dvou nezávislých větví se provede takto:</p>

<pre>
TextWindow.Write("Circle radius = ")
r = TextWindow.ReadNumber()
&nbsp;
<strong>if</strong> r &lt; 0 <strong>then</strong>
    TextWindow.WriteLine("Negative radius?!")
<strong>else</strong>
    area = Math.Pi * r * r
&nbsp;
    TextWindow.WriteLine("Circle area = " + area)
<strong>endif</strong>
</pre>

<p>Ve skutečnosti mnohdy potřebujeme vytvořit několik větví, každou vykonanou
po splnění určité podmínky. Takové zřetězení podmínek zajišťuje konstrukce
obsahující klíčové slovo <strong>elseif</strong> (psáno dohromady):</p>

<pre>
TextWindow.Write("Circle radius = ")
r = TextWindow.ReadNumber()
&nbsp;
<strong>if</strong> r &lt; 0 <strong>then</strong>
    TextWindow.WriteLine("Negative radius?!")
<strong>elseif</strong> r = 0 <strong>then</strong>
    TextWindow.WriteLine("Zero radius -&gt; zero area")
<strong>else</strong>
    area = Math.Pi * r * r
    TextWindow.WriteLine("Circle area = " + area)
<strong>endif</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: větví <strong>elseif</strong> může být
libovolné množství.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vnořené konstrukce <strong>if-then</strong></h2>

<p>Ve <i>Small Basicu</i> je možné &ndash; na rozdíl od mnoha starších dialektů
programovacího jazyka BASIC &ndash; vnořit prakticky libovolné množství
rozhodovacích konstrukcí <strong>if-then</strong>. Tuto možnost si ukážeme na
nepatrně upraveném předchozím demonstračním příkladu, který ve
&bdquo;vnější&ldquo; podmínce testuje, zda je zadaná hodnota záporná a pokud ne
(tedy když je kladná či nulová), provede další rozvětvení. Mimochodem &ndash;
díky tomu, že za klíčovým slovem <strong>then</strong> se automaticky vytvoří
nový programový blok, by v&nbsp;tomto jazyku nemělo tak snadno dojít
k&nbsp;chybám typu <a
href="https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/">goto
fail</a> (k&nbsp;těm dochází u těch programovacích jazyků, kde je blok
volitelný):</p>

<pre>
TextWindow.Write("Circle radius = ")
r = TextWindow.ReadNumber()
&nbsp;
<strong>if</strong> r &lt; 0 <strong>then</strong>
    TextWindow.WriteLine("Negative radius?!")
<strong>else</strong>
    if r = 0 <strong>then</strong>
        TextWindow.WriteLine("Zero radius -&gt; zero area")
    <strong>else</strong>
        area = Math.Pi * r * r
        TextWindow.WriteLine("Circle area = " + area)
    <strong>endif</strong>
<strong>endif</strong>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Počítaná programová smyčka typu <strong>FOR-NEXT</strong></h2>

<p><i>GW-BASIC</i>, tedy poslední zástupce klasických BASICů, podporuje dva
formáty strukturovaných programových smyček. Prvním typem smyčky je smyčka typu
<strong>FOR-NEXT</strong>, která je použita v&nbsp;prakticky všech BASICech
&ndash; ovšem její chování není všude stejné! A druhým typem smyčky je
<strong>WHILE-WEND</strong>. Posléze byla do <i>QBasicu</i> (nástupce
GW-BASICu) přidána i univerzální smyčka <strong>DO-LOOP</strong>, u níž lze
zvolit test na začátku a/nebo i na konci. <i>Small Basic</i> se vrací
v&nbsp;historii k&nbsp;<i>GW-BASICu</i>, protože opět podporuje jen dva typy
programových smyček. Nejdříve se zmíníme o počítané programové smyčce typu
<strong>FOR-NEXT</strong>.</p>

<p><div class="rs-tip-major">Poznámka: <strong>FOR-NEXT</strong> píšu schválně
jako odkaz na klasické BASICy. Ve Small Basicu se namísto <strong>NEXT</strong>
používá klíčové slovo <strong>endfor</strong>.</div></p>

<p>Základní typ této smyčky postupně počítá hodnoty od 1 do 10 včetně. Lze
ovšem použít i čísla s&nbsp;desetinnou tečkou:</p>

<pre>
<strong>for</strong> i = 1 <strong>to</strong> 10
    TextWindow.WriteLine(i)
<strong>endfor</strong>
</pre>

<p>Následující smyčka bude vykonána přesně jednou (některé další BASICy ji
ovšem nevykonají ani jednou!):</p>

<pre>
<strong>for</strong> i = 1 <strong>to</strong> 1
    TextWindow.WriteLine(i)
<strong>endfor</strong>
</pre>

<p>Naopak následující smyčka nebude vykonána ani jednou, na rozdíl od Atari
BASICu, který chybně smyčku zavolá s&nbsp;hodnotou jedna:</p>

<pre>
<strong>for</strong> i = 1 <strong>to</strong> 0
    TextWindow.WriteLine(i)
<strong>endfor</strong>
</pre>

<p>Zvolit lze i krok, který může být záporný:</p>

<pre>
<strong>for</strong> i = 10 <strong>to</strong> 1 <strong>step</strong> -1
    TextWindow.WriteLine(i)
<strong>endfor</strong>
</pre>

<p>Nejsme ovšem (na rozdíl od například Pascalu) omezeni jen na celočíselné
hodnoty:</p>

<pre>
<strong>for</strong> i = 0 <strong>to</strong> 5.5 <strong>step</strong> 0.5
    TextWindow.WriteLine(i)
<strong>endfor</strong>
</pre>

<p>Dokonce je možné průběžně měnit limit smyčky, počítat se bude s&nbsp;novým
limitem (mnoho klasických BASICů naproti tou výraz s&nbsp;limitami spočítá
pouze jednou na začátku):</p>

<pre>
limit = 2
<strong>for</strong> i = 0 <strong>to</strong> limit <strong>step</strong> 0.7
    TextWindow.WriteLine(i + " catching up " + limit)
    limit = limit + 0.6
<strong>endfor</strong>
</pre>

<p>Příklad postupně změny kroku, což je taktéž umožněno:</p>

<pre>
delta = 1
<strong>for</strong> i = 0 <strong>to</strong> 1000 <strong>step</strong> delta
    TextWindow.WriteLine(i)
    delta = delta * 2
<strong>endfor</strong>
</pre>

<p>A další příklad, tentokrát počítající druhé mocniny dvojky poněkud
neobvyklým způsobem:</p>

<pre>
delta = 1
<strong>for</strong> i = 1 <strong>to</strong> 1000 <strong>step</strong> delta
    TextWindow.WriteLine(i)
    delta = i
<strong>endfor</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: smyčka <strong>FOR-NEXT</strong> je díky
tomu, že jsou limity i krok počítány znovu v&nbsp;každé iteraci, velmi
flexibilní (což zdaleka neplatí pro ostatní implementace BASICu).</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Programová smyčka typu <strong>WHILE</strong></h2>

<p>Druhým a současně i posledním typem programové smyčky je smyčka typu
<strong>WHILE</strong>, která opakovaně vykoná tělo funkce jen v&nbsp;případě,
že je splněna zapsaná podmínka. Tato smyčka je ve Small Basicu zapisována
dvojicí klíčových slov <strong>while</strong> a <strong>endwhile</strong>, čímž
se podařilo odstranit dosti škaredé klíčové slovo <strong>WEND</strong>. Ukažme
si nyní typický příklad použití této programové smyčky pro zobrazení mocninné
řady o základu 2:</p>

<pre>
pwr = 1
<strong>while</strong> pwr &lt;= 1024
    TextWindow.WriteLine(pwr)
    pwr = pwr * 2
<strong>endwhile</strong>
</pre>

<p>Pokud není podmínka splněna již na začátku, nebude tělo smyčky vykonáno ani
jednou:</p>

<pre>
pwr = 1
<strong>while</strong> pwr &gt; 1024
    TextWindow.WriteLine(pwr)
    pwr = pwr * 2
<strong>endwhile</strong>
</pre>

<p>Poměrně často se ovšem setkáme s&nbsp;horší situací &ndash;
s&nbsp;nekonečnou smyčkou, která není ve webové verzi Small Basicu dobře
ošetřena, protože ji není možné snadno ukončit:</p>

<pre>
pwr = 1
<strong>while</strong> pwr &lt; 1024
    TextWindow.WriteLine(pwr)
<strong>endwhile</strong>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výpočet největšího společného dělitele &ndash; realizace v&nbsp;GW-BASICu a Small Basicu</h2>

<p>V&nbsp;dnešním článku se několikrát setkáme s&nbsp;programem zapsaným ve
starším <i>GW-BASICu</i>, což je zastánce klasických BASICů, a ve <i>Small
Basicu</i>. Porovnáním stylu zápisů obou variant lze zjistit kam (a zda vůbec)
se vývoj v&nbsp;oblasti BASICu za posledních 38 let posunul.</p>

<p>Začneme jednou variantou algoritmu určeného pro výpočet největšího
společného dělitele dvou celých kladných čísel. Jeho realizace založená na
programové smyčce typu <strong>WHILE</strong> může v&nbsp;GW-BASICu vypadat
následovně:</p>

<pre>
1 REM *****************************
2 REM Výpočet největšího společného
3 REM dělitele postavený na smyčce
4 REM typu WHILE-WEND.
5 REM 
6 REM Uprava pro GW-BASIC
7 REM *****************************
8 REM
9 REM
10 PRINT "X=";
20 INPUT X
30 PRINT "Y=";
40 INPUT Y
50 WHILE X&lt;&gt;Y
60   IF X&gt;Y THEN X=X-Y
70   IF X&lt;Y THEN Y=Y-X
80 WEND 
90 PRINT "GCD: ";X
91 END 
</pre>

<p>Přepis tohoto programu do Small Basicu je prakticky doslovný a ukazuje jen
minimální rozdíly &ndash; zejména &bdquo;blokový&ldquo; zápis příkazů, které se
mají provést při splnění dané podmínky:</p>

<pre>
<i>' *****************************</i>
<i>' Výpočet největšího společného</i>
<i>' dělitele postavený na smyčce</i>
<i>' typu WHILE.</i>
<i>' </i>
<i>' Úprava pro Small Basic</i>
<i>' *****************************</i>
&nbsp;
TextWindow.Write("X = ")
x = TextWindow.ReadNumber()
&nbsp;
TextWindow.Write("Y = ")
y = TextWindow.ReadNumber()
&nbsp;
<strong>while</strong> x&lt;&gt;y
    <strong>if</strong> x&gt;y <strong>then</strong>
        x=x-y
    <strong>endif</strong>
    <strong>if</strong> x&lt;y <strong>then</strong>
        y=y-x
    <strong>endif</strong>
<strong>endwhile</strong>
&nbsp;
TextWindow.WriteLine("GCD = " + x)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Podprogramy</h2>

<p><i>Small Basic</i> podporuje tvorbu podprogramů, podobně jako prakticky
všechny starší implementace BASICu. Připomeňme si, že v&nbsp;klasických
nestrukturovaných BASICech nebyl začátek podprogramu nijak označen &ndash;
prostě se jednalo o programový řádek, na který se skákalo příkazem
<strong>GOSUB</strong> (podprogram tedy ani nebyl pojmenován). Návrat
z&nbsp;podprogramu byl řešen příkazem <strong>RETURN</strong>. V&nbsp;případě
Small Basicu je zvolen odlišný přístup, který byl představen v&nbsp;Q-Basicu.
Podprogram je pojmenován příkazem <strong>Sub</strong>, za kterým na dalších
řádcích následuje tělo podprogramu. Celý podprogram je ukončen příkazem
<strong>endsub</strong>. Pro volání podprogramu se ve Small Basicu nepoužívá
příkaz <strong>GOSUB</strong>, ale přímo název podprogramu, za kterým následují
prázdné kulaté závorky:</p>

<pre>
<strong>Sub</strong> Foobar
    TextWindow.WriteLine("Foobar")
<strong>endsub</strong>
&nbsp;
Foobar()
</pre>

<p><div class="rs-tip-major">Poznámka: i když prázdné závorky naznačují, že by
bylo možné podprogramu předat nějaké parametry, není to ve skutečnosti pravda.
Všechny proměnné (a parametry lze považovat za formu proměnných) jsou totiž ve
Small Basicu globální. Kulaté závorky jsou použity jen pro jednoznačné určení,
že se jedná o volání podprogramu. Mimochodem &ndash; nemožnost používat
klasické argumenty a parametry omezuje prakticky zvládnutelnou velikost
programů psaných ve Small Basicu.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Převod programu postaveného na podprogramech z&nbsp;GW-BASICu do Small Basicu</h2>

<p>S&nbsp;podprogramy jsme se setkali již <a
href="https://www.root.cz/clanky/pc-basic-reinkarnace-popularniho-i-zatracovaneho-gw-basicu/">v&nbsp;článku
věnovanému GW-BASICu</a>, kde jsme si kromě mnoha dalších příkladů ukázali i
program pro výpočet přibližné hodnoty konstanty &pi;. V&nbsp;tomto algoritmu je
uvnitř programové smyčky volán podprogram. Celý výpočet realizovaný
v&nbsp;původním GW-BASICu vypadá následovně:</p>

<pre>
1 REM *****************************
2 REM Výpočet hodnoty konstanty PI
3 REM postavený na smyčce
4 REM typu WHILE-WEND.
5 REM 
6 REM Uprava pro GW-BASIC
7 REM *****************************
8 REM
9 REM
10 N=1
20 WHILE N&lt;=2000
25   GOSUB 1000: REM COMPUTE_PI
30   PRINT N,PI
35   N=N*2
40 WEND 
999 END 
1000 REM
1001 REM SUBRUTINA PRO VYPOCET PI
1010   PI=4
1015   J=3
1020   WHILE J&lt;=N+2
1030     PI=PI*(J-1)/J*(J+1)/J
1040     J=J+2
1050   WEND 
1060 RETURN
</pre>

<p>Převod do Small Basicu je poměrně přímočarý a výsledek vypadá takto:</p>

<pre>
<i>' *****************************</i>
<i>' Výpočet hodnoty konstanty PI</i>
<i>' postavený na smyčce</i>
<i>' typu WHILE</i>
<i>' </i>
<i>' Uprava pro Small Basic</i>
<i>' *****************************</i>
<i>'</i>
<i>'</i>
N=1
<strong>while</strong> N &lt;= 2000
   computePi()
   TextWindow.Writeline("N=" + N + " PI=" + PI)
   N = N * 2
<strong>endwhile</strong>
&nbsp;
<strong>sub</strong> computePi
    PI = 4
    J = 3
    <strong>while</strong> J &lt;= N + 2
      PI=PI*(J-1)/J*(J+1)/J
      J=J+2
    <strong>endwhile</strong>
<strong>endsub</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: jak již víme z&nbsp;předchozího textu,
bylo by možné první programovou smyčku přepsat takovým způsobem, že by se
použila konstrukce <strong>for-next</strong>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Příkaz <strong>GOTO</strong> aneb vaříme špagety</h2>

<p>Ve Small Basicu nalezneme i nestrukturovaný příkaz <strong>GOTO</strong>,
který slouží pro skok do jiného místa v&nbsp;daném programovém bloku a dokonce
i do programové smyčky (což jiné BASICy typicky nedovolují). Cíl skoku je
označen návěštím (<i>label</i>), což je identifikátor, za nímž je zapsána
dvojtečka (Small Basic se tedy i přes všechny snahy nezbavil všech speciálních
znaků). Podívejme se nyní na základní způsob použití tohoto (mnohými teoretiky
po právu odsuzovanému) příkazu, zde použitému pro implementaci programové
smyčky, v&nbsp;níž se podmínka testuje na konci smyčky:</p>

<pre>
i = 1
&nbsp;
LOOP:
    TextWindow.WriteLine(i)
    i = i + 1
    <strong>if</strong> i &lt;= 10 <strong>then</strong>
        <strong>goto</strong> LOOP
    <strong>endif</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: příkaz <strong>GOTO</strong> je možné
použít i pro implementaci konstrukcí, pro něž se v&nbsp;jiných jazycích
používají klíčová slova <strong>break</strong> a <strong>continue</strong>.
Taktéž pochopitelně umožňuje výskok z&nbsp;vnořených smyček atd.</div></p>

<p>Je povolen skok do smyčky:</p>

<pre>
<strong>GOTO</strong> target
&nbsp;
<strong>for</strong> i = 1 <strong>to</strong> 10
target:
    TextWindow.WriteLine(i)
<strong>endfor</strong>
</pre>

<p>Ze smyčky lze pochopitelně vyskočit:</p>

<pre>
<strong>for</strong> i = 1 <strong>to</strong> 10
    TextWindow.WriteLine(i)
    <strong>if</strong> i &gt; 5 <strong>then</strong>
        <strong>GOTO</strong> end
    <strong>endif</strong>
<strong>endfor</strong>
&nbsp;
end:
</pre>

<p>Ovšem skok do podprogramu již není povolen:</p>

<pre>
<strong>sub</strong> foo
    target:
    TextWindow.WriteLine(i)
<strong>endsub</strong>
&nbsp;
foo()
<strong>GOTO</strong> target
</pre>

<p><div class="rs-tip-major">Poznámka: implementace příkazu
<strong>GOTO</strong> není tak přímočará, jako je tomu v&nbsp;jiných BASICech.
V&nbsp;případě starších BASICů bylo nutné při výskoku ze smyčky (nebo i
podprogramu!) odstranit ze zásobníku pomocné automaticky vytvořené hodnoty
&ndash; limity smyčky, čísla řádků pro návrat z&nbsp;podprogramu/návrat na
začátek smyčky atd. příkazem <strong>pop</strong>. To ve Small Basicu není
nutné.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Převod programu postaveného na <strong>GOTO</strong> z&nbsp;GW-BASICu do Small Basicu</h2>

<p>Opět si ukážeme převod algoritmu postaveného na příkazu
<strong>GOTO</strong> z&nbsp;již <a
href="https://www.root.cz/clanky/pc-basic-reinkarnace-popularniho-i-zatracovaneho-gw-basicu/">popsaného
GW-BASICu</a> do Small Basicu. Bude se jednat o algoritmus výpočtu největšího
společného dělitele dvou celých kladných čísel (podmínka kladnosti ovšem není
kontrolována), kde se na základě porovnání dvou mezihodnot explicitně skáče na
začátek programové smyčky:</p>

<pre>
1 REM *****************************
2 REM Vypocet nejvetsiho spolecneho
3 REM delitele.
4 REM 
5 REM Uprava pro GW-BASIC
6 REM 
7 REM *****************************
8 REM
9 REM
10 PRINT "X=";
20 INPUT X
30 PRINT "Y=";
40 INPUT Y
50 IF X=Y THEN PRINT "GCD: ";X:END 
60 IF X&gt;Y THEN X=X-Y:GOTO 50
70 IF X&lt;Y THEN Y=Y-X:GOTO 50
999 END
</pre>

<p>Převod tohoto algoritmu do Small Basicu je přímočarý a výsledek je díky
použití návěští namísto čísel řádků čitelnější:</p>

<pre>
<i>' *****************************</i>
<i>' Vypocet nejvetsiho spolecneho</i>
<i>' delitele.</i>
<i>' </i>
<i>' Uprava pro Small Basic</i>
<i>' </i>
<i>' *****************************</i>
<i>'</i>
<i>'</i>
&nbsp;
TextWindow.Write("X = ")
x = TextWindow.ReadNumber()
&nbsp;
TextWindow.Write("Y = ")
y = TextWindow.ReadNumber()
&nbsp;
LOOP:
<strong>if</strong> x = y <strong>then</strong>
    TextWindow.WriteLine("GCD = " + x)
    <strong>goto</strong> END
<strong>endif</strong>
&nbsp;
<strong>if</strong> x &gt; y <strong>then</strong>
    x = x -y
    <strong>goto</strong> LOOP
<strong>endif</strong>
&nbsp;
<strong>if</strong> x &lt; y <strong>then</strong>
    y = y -x
    <strong>goto</strong> LOOP
<strong>endif</strong>
&nbsp;
END:
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Pole a mapy &ndash; překvapivě snadné téma</h2>

<p>Součástí jazyka <i>Small Basic</i> jsou i pole. Ve starších dialektech
programovacího jazyka BASIC bylo nutné pole před přístupem do něho alokovat, a
to typicky příkazem <strong>DIM</strong>. Navíc se různé dialekty BASICu lišily
v&nbsp;tom, zda první prvek pole má mít index roven nule či jedničce. Snaha o
sjednocení vedla k&nbsp;tomu, že některé novější BASICy nabízí možnost volby
hodnoty indexu prvního prvku &ndash; například příkazem <strong>OPTION
BASE</strong> (což je případ <i>GW-BASICu</i> nebo taktéž <i>Q-Basicu</i>).
V&nbsp;případě <i>Small Basicu</i> je situace jednodušší a méně matoucí,
zejména pro začínající uživatele, protože pole lze začít používat bez nutnosti
jeho alokace a indexy prvků mohou být (prakticky) libovolné. Celé pole lze
navíc vypsat jako celek:</p>

<pre>
values[0] = 10
values[1] = 20
&nbsp;
TextWindow.WriteLine(values)
</pre>

<p>Naprosto stejná syntaxe je použita i při práci s&nbsp;mapami. Ve skutečnosti
jsou běžná pole jen speciálním případem map neboli asociativních polí. Opět si
ukažme, jak lze mapu začít používat, a to bez nutnosti její alokace či jakékoli
definice:</p>

<pre>
users["Rich"] = "Hickey"
users["Rob"] = "Pike"
users["Guido"] = "van Rossum"
users["John"] = "Kemeny"
users["Niklaus"] = "Wirth"
users["Kenneth"] = "Iverson"
&nbsp;
TextWindow.WriteLine(users)
</pre>

<p><div class="rs-tip-major">Poznámka: do pole lze přidávat nové prvky,
modifikovat prvky stávající a samozřejmě zjišťovat hodnoty prvků. Pro další
operace s&nbsp;poli jsou určeny funkce, které lze najít ve jmenném prostoru
<strong>Array</strong>, o němž se pochopitelně zmíníme příště.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Pasti připravené ve Small Basicu</h2>

<p>Na návrhu <i>Small Basicu</i> je patrné, že se jeho tvůrci snažili o
maximální zjednodušení tohoto jazyka pro začátečníky. Ovšem některé snahy o
zjednodušení mohou vést k&nbsp;problematickému a mnohdy i těžko vysvětlitelnému
chování. Například následující demonstrační příklad korektně vypíše zprávu
říkající:</p>

<pre>
10 added to 20 is equal to 30
Program has ended.
</pre>

<p>Kód tohoto příkladu vypadá takto a vidíme v&nbsp;něm kombinaci (spojení)
numerických hodnot s&nbsp;řetězci:</p>

<pre>
x = 10
y = 20
z = x + y
TextWindow.WriteLine(x + " added to " + y + " is equal to " + z)
</pre>

<p>Co se však stane v&nbsp;případě, kdy budeme chtít vypsat zprávu &bdquo;10 +
20 = 30&ldquo;? Takový program by mělo být možné (analogicky) zapsat tímto
způsobem:</p>

<pre>
x = 10
y = 20
z = x + y
TextWindow.WriteLine(x + " + " + y + " = " + z)
</pre>

<p>Ve skutečnosti se ovšem vypíše:</p>

<pre>
30 = 30
Program has ended.
</pre>

<p>V&nbsp;tomto případě byl interpret Small Basicu až příliš
&bdquo;chytrý&ldquo;, protože rozpoznal zapsaný výraz (ignoroval zde přitom
uvozovky), který vyhodnotil.</p>

<p><div class="rs-tip-major">Poznámka: některá další úskalí plynoucí
z&nbsp;příliš &bdquo;chytrého&ldquo; typového systému Small Basicu si ukážeme
příště.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah druhého článku o Small Basicu</h2>

<p>V&nbsp;navazujícím (a současně pravděpodobně i posledním) článku o <i>Small
Basicu</i> si přiblížíme některé <i>jmenné prostory</i> (nebo chcete-li
<i>moduly</i>), které je možné a mnohdy nutné použít při tvorbě aplikací
v&nbsp;tomto jazyku. Výběr modulů je relativně velký, ovšem i jejich základní
sada je užitečná &ndash; kromě vstupu a výstupu nabízí i práci s&nbsp;poli,
matematické funkce, kreslení do k&nbsp;tomu vytvořeného okna, želví grafiku,
operaci s&nbsp;grafickými objekty, tvorbu formulářů se základními ovládacími
prvky, operace se soubory, práci se zvukem, síťové operace atd. atd.
Rozšiřující moduly umožňují například komunikaci s&nbsp;Arduinem, microbitem či
Raspberry Pi (ovšem ne všechny zmíněné moduly jsou použitelné ve webové
variantě Small Basicu).</p>

*** image ***
<p><i>Obrázek 13: Nápověda k&nbsp;jednotlivým modulům.</i></p>

*** image ***
<p><i>Obrázek 14: Obsah vybraného modulu.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady určené pro Small Basic (a
z&nbsp;tohoto důvodu nekompatibilní s&nbsp;žádným jiným BASICem) byly uloženy
do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Tyto příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez
nutnosti klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01_hello_world.bas</td><td>implementace programy typu "Hello, world!" ve Small Basicu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/01_hello_world.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/01_hello_world.bas</a></td></tr>
<tr><td> 2</td><td>02_string_variable.bas</td><td>základní manipulace s&nbsp;řetězci uloženými do proměnných</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/02_string_variable.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/02_string_variable.bas</a></td></tr>
<tr><td> 3</td><td>03_numeric_variables.bas</td><td>základní manipulace s&nbsp;numerickými hodnotami uloženými do proměnných</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/03_numeric_variables.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/03_numeric_variables.bas</a></td></tr>
<tr><td> 4</td><td>04_string_and_int.bas</td><td>kombinace řetězců a numerických hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/04_string_and_int.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/04_string_and_int.bas</a></td></tr>
<tr><td> 5</td><td>05_string_subtext.bas</td><td>získání podřetězce, využití tečkové notace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/05_string_subtext.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/05_string_subtext.bas</a></td></tr>
<tr><td> 6</td><td>06_input.bas</td><td>interaktivní vstup numerických údajů z&nbsp;konzole</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/06_input.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/06_input.bas</a></td></tr>
<tr><td> 7</td><td>07_if_then.bas</td><td>programová rozhodovací konstrukce <strong>if-then</strong> v&nbsp;základní podobě</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/07_if_then.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/07_if_then.bas</a></td></tr>
<tr><td> 8</td><td>08_if_then_else.bas</td><td>programová rozhodovací konstrukce <strong>if-then-else</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/08_if_then_else.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/08_if_then_else.bas</a></td></tr>
<tr><td> 9</td><td>09_if_elseif_then_else.bas</td><td>rozšíření <strong>if-then-else</strong> o větvi <strong>elseif</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/09_if_elseif_then_else.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/09_if_elseif_then_else.bas</a></td></tr>
<tr><td>10</td><td>10_nested_ifs.bas</td><td>vnořené bloky <strong>if-then</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/10_nested_ifs.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/10_nested_ifs.bas</a></td></tr>
<tr><td>11</td><td>11_for_next.bas</td><td>programová smyčka typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/11_for_next.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/11_for_next.bas</a></td></tr>
<tr><td>12</td><td>12_for_next_same_limits.bas</td><td>nastavení shodného horního i dolního limitu ve smyčce <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/12_for_next_same_limits.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/12_for_next_same_limits.bas</a></td></tr>
<tr><td>13</td><td>13_for_next_no_loop.bas</td><td>programová smyčka, jejíž tělo neproběhne ani jednou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/13_for_next_no_loop.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/13_for_next_no_loop.bas</a></td></tr>
<tr><td>14</td><td>14_for_next_downward.bas</td><td>nastavení záporného kroku smyčky typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/14_for_next_downward.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/14_for_next_downward.bas</a></td></tr>
<tr><td>15</td><td>15_for_next_step.bas</td><td>neceločíselný krok v&nbsp;programové smyčce typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/15_for_next_step.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/15_for_next_step.bas</a></td></tr>
<tr><td>16</td><td>16_for_next_variable_limit.bas</td><td>změna horního limitu programové smyčky typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/16_for_next_variable_limit.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/16_for_next_variable_limit.bas</a></td></tr>
<tr><td>17</td><td>17_for_next_variable_step.bas</td><td>průběžná modifikace kroku programové smyčky typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/17_for_next_variable_step.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/17_for_next_variable_step.bas</a></td></tr>
<tr><td>18</td><td>18_for_next_variable_step.bas</td><td>průběžná modifikace kroku programové smyčky typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/18_for_next_variable_step.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/18_for_next_variable_step.bas</a></td></tr>
<tr><td>19</td><td>19_while.bas</td><td>standardní programová smyčka typu <strong>while</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/19_while.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/19_while.bas</a></td></tr>
<tr><td>20</td><td>20_while_never.bas</td><td>programová smyčka typu <strong>while</strong>, jejíž tělo neproběhne ani jednou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/20_while_never.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/20_while_never.bas</a></td></tr>
<tr><td>21</td><td>21_while_endless.bas</td><td>nekonečná programová smyčka</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/21_while_endless.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/21_while_endless.bas</a></td></tr>
<tr><td>22</td><td>22_GCD.bas</td><td>implementace algoritmu NSD realizovaná smyčkou typu <strong>while</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/22_GCD.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/22_GCD.bas</a></td></tr>
<tr><td>23</td><td>23_sub.bas</td><td>subrutiny/podprogramy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/23_sub.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/23_sub.bas</a></td></tr>
<tr><td>24</td><td>24_pi.bas</td><td>výpočet konstanty Pi založená na použití podprogramů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/24_pi.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/24_pi.bas</a></td></tr>
<tr><td>25</td><td>25_goto.bas</td><td>nestrukturovaný příkaz <strong>GOTO</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/25_goto.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/25_goto.bas</a></td></tr>
<tr><td>26</td><td>26_goto_GCD.bas</td><td>implementace algoritmu NSD realizovaná příkazy <strong>GOTO</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/26_goto_GCD.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/26_goto_GCD.bas</a></td></tr>
<tr><td>27</td><td>27_array.bas</td><td>pole ve Small Basicu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/27_array.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/27_array.bas</a></td></tr>
<tr><td>28</td><td>28_maps.bas</td><td>mapy (asociativní pole) ve Small Basicu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/28_maps.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/28_maps.bas</a></td></tr>
<tr><td>29</td><td>29_trap_1_bas</td><td>problémy Small Basicu, první část</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/29_trap_1_bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/29_trap_1_bas</a></td></tr>
<tr><td>30</td><td>30_trap_2.bas</td><td>problémy Small Basicu, druhá část</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/30_trap_2.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/30_trap_2.bas</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránka projektu Small Basic<br />
<a href="https://smallbasic-publicwebsite.azurewebsites.net/">https://smallbasic-publicwebsite.azurewebsites.net/</a>
</li>

<li>List of Programs Made with Small Basic<br />
<a href="https://social.technet.microsoft.com/wiki/contents/articles/14013.list-of-programs-made-with-small-basic.aspx">https://social.technet.microsoft.com/wiki/contents/articles/14013.list-of-programs-made-with-small-basic.aspx</a>
</li>

<li>Expert to Expert: The Basics of SmallBasic<br />
<a href="https://channel9.msdn.com/blogs/charles/expert-to-expert-the-basics-of-smallbasic">https://channel9.msdn.com/blogs/charles/expert-to-expert-the-basics-of-smallbasic</a>
</li>

<li>The Developer’s Reference Guide to Small Basic<br />
<a href="https://social.technet.microsoft.com/wiki/contents/articles/16767.the-developers-reference-guide-to-small-basic.aspx">https://social.technet.microsoft.com/wiki/contents/articles/16767.the-developers-reference-guide-to-small-basic.aspx</a>
</li>

<li>Small Basic - Talking to Raspberry Pi<br />
<a href="https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-talking-to-raspberry-pi/ba-p/337844">https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-talking-to-raspberry-pi/ba-p/337844</a>
</li>

<li>Small Basic - Arduino<br />
<a href="https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-arduino/ba-p/337762">https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-arduino/ba-p/337762</a>
</li>

<li>Small Basic + micro:bit<br />
<a href="https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-micro-bit/ba-p/1968424">https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-micro-bit/ba-p/1968424</a>
</li>

<li>#1 Learn Small Basic Programming - Introduction<br />
<a href="https://www.youtube.com/watch?v=e_BaEPCa8OQ">https://www.youtube.com/watch?v=e_BaEPCa8OQ</a>
</li>

<li>#2 Learn Small Basic Programming - Input, Output &amp; Variables<br />
<a href="https://www.youtube.com/watch?v=VWekYLa33OI">https://www.youtube.com/watch?v=VWekYLa33OI</a>
</li>

<li>#3 Learn Small Basic Programming - String Concatenation<br />
<a href="https://www.youtube.com/watch?v=iWvIaOaT474">https://www.youtube.com/watch?v=iWvIaOaT474</a>
</li>

<li>Small Basic - The Programmer's Guide<br />
<a href="https://www.i-programmer.info/programming/other-languages/5196-small-basic-the-programmers-guide.html">https://www.i-programmer.info/programming/other-languages/5196-small-basic-the-programmers-guide.html</a>
</li>

<li>Rosetta Code: Category:Microsoft Small Basic<br />
<a href="https://rosettacode.org/wiki/Category:Microsoft_Small_Basic">https://rosettacode.org/wiki/Category:Microsoft_Small_Basic</a>
</li>

<li>Fifty Years of BASIC, the Programming Language That Made Computers Personal<br />
<a href="https://time.com/69316/basic/">https://time.com/69316/basic/</a>
</li>

<li>BBC BASIC i QBasic oslavují svá kulatá výročí<br />
<a href="https://www.root.cz/clanky/bbc-basic-i-qbasic-oslavuji-sva-kulata-vyroci/">https://www.root.cz/clanky/bbc-basic-i-qbasic-oslavuji-sva-kulata-vyroci/</a>
</li>

<li>What are the best BASIC-like programming languages?<br />
<a href="https://www.slant.co/topics/9807/~basic-like-programming-languages">https://www.slant.co/topics/9807/~basic-like-programming-languages</a>
</li>

<li>List of BASIC dialects<br />
<a href="https://en.wikipedia.org/wiki/List_of_BASIC_dialects">https://en.wikipedia.org/wiki/List_of_BASIC_dialects</a>
</li>

<li>GW-BASIC Documentation<br />
<a href="https://hwiegman.home.xs4all.nl/gwbasic.html">https://hwiegman.home.xs4all.nl/gwbasic.html</a>
</li>

<li>Microsoft Open-Sources GW-BASIC<br />
<a href="https://devblogs.microsoft.com/commandline/microsoft-open-sources-gw-basic/">https://devblogs.microsoft.com/commandline/microsoft-open-sources-gw-basic/</a>
</li>

<li>GW-BASIC na GitHubu<br />
<a href="https://github.com/microsoft/GW-BASIC">https://github.com/microsoft/GW-BASIC</a>
</li>

<li>Welcome to GW-BASIC<br />
<a href="http://www.antonis.de/qbebooks/gwbasman/">http://www.antonis.de/qbebooks/gwbasman/</a>
</li>

<li>GWBASIC User's Manual<br />
<a href="http://www.antonis.de/qbebooks/gwbasman/index2.html">http://www.antonis.de/qbebooks/gwbasman/index2.html</a>
</li>

<li>The basics of BASIC, the programming language of the 1980s<br />
<a href="https://www.youtube.com/watch?v=seM9SqTsRG4">https://www.youtube.com/watch?v=seM9SqTsRG4</a>
</li>

<li>GW-BASIC User's Guide<br />
<a href="https://hwiegman.home.xs4all.nl/gw-man/index.html">https://hwiegman.home.xs4all.nl/gw-man/index.html</a>
</li>

<li>PC-BASIC 1.2.14 documentation<br />
<a href="http://robhagemans.github.io/pcbasic/doc/1.2/">http://robhagemans.github.io/pcbasic/doc/1.2/</a>
</li>

<li>PEEK and POKE<br />
<a href="https://en.wikipedia.org/wiki/PEEK_and_POKE">https://en.wikipedia.org/wiki/PEEK_and_POKE</a>
</li>

<li>GW-BASIC | DRAW Statement (video na Youtube)<br />
<a href="https://www.youtube.com/watch?v=4I1CELY13M4">https://www.youtube.com/watch?v=4I1CELY13M4</a>
</li>

<li>Rozdíly mezi GW-BASIC a QBasicem<br />
<a href="https://hwiegman.home.xs4all.nl/extern/Differences%20Between%20GW-BASIC%20and%20QBasic.htm">https://hwiegman.home.xs4all.nl/extern/Differences%20Between%20GW-BASIC%20and%20QBasic.htm</a>
</li>

<li>GW-Basic Programs<br />
<a href="https://gwbasicprograms.blogspot.com/p/gw-basic-programs.html">https://gwbasicprograms.blogspot.com/p/gw-basic-programs.html</a>
</li>

<li>GW-BASIC Resource<br />
<a href="https://gw-basic.netlify.app/">https://gw-basic.netlify.app/</a>
</li>

<li>A page about GWBASIC Games &amp; Other Programs<br />
<a href="http://peyre.x10.mx/GWBASIC/">http://peyre.x10.mx/GWBASIC/</a>
</li>

<li>Basic BASIC, 2nd Edition, James S. Coan<br />
<a href="https://drive.google.com/uc?export=download&amp;id=1Z12L7SO_gfNg3Ma_0eH2_Kz15YM-9dHl">https://drive.google.com/uc?export=download&amp;id=1Z12L7SO_gfNg3Ma_0eH2_Kz15YM-9dHl</a>
</li>

<li>Advanced BASIC, James S. Coan<br />
<a href="https://drive.google.com/uc?export=download&amp;id=1JafSpV_BLylWHMd16rDPorwv9wV9bLcy">https://drive.google.com/uc?export=download&amp;id=1JafSpV_BLylWHMd16rDPorwv9wV9bLcy</a>
</li>

<li>Structured BASIC, 2nd Edition, James F. Clark (naskenovaná kniha)<br />
<a href="https://drive.google.com/uc?export=download&amp;id=1pT8y-8yJYS_SqvxF0fBHm6S-dlAt-Uy2">https://drive.google.com/uc?export=download&amp;id=1pT8y-8yJYS_SqvxF0fBHm6S-dlAt-Uy2</a>
</li>

<li>Last Book of GW-Basic<br />
<a href="https://www.geocities.ws/joseph_sixpack/btoc.html">https://www.geocities.ws/joseph_sixpack/btoc.html</a>
</li>

<li>SCIENTIFIC PROGRAMS WRITTEN IN BASIC (for PCs)<br />
<a href="https://web.archive.org/web/20160323064356/http://www.scn.org/~bh162/basic_programs.html">https://web.archive.org/web/20160323064356/http://www.scn.org/~bh162/basic_programs.html</a>
</li>

<li>Why I love programming on FreeDOS with GW-BASIC<br />
<a href="https://opensource.com/article/21/6/freedos-gw-basic">https://opensource.com/article/21/6/freedos-gw-basic</a>
</li>

<li>Quite BASIC (web-based classic BASIC online programming environmen)<br />
<a href="http://www.quitebasic.com/">http://www.quitebasic.com/</a>
</li>

<li>GFA-BASIC<br />
<a href="http://sites.google.com/site/gfabasic16/">http://sites.google.com/site/gfabasic16/</a>
</li>

<li>E-mail od tvůrce GW-Basicu<br />
<a href="http://www.classiccmp.org/pipermail/cctech/2005-April/042999.html">http://www.classiccmp.org/pipermail/cctech/2005-April/042999.html</a>
</li>

<li>General Electric GE-400<br />
<a href="http://www.feb-patrimoine.com/PROJET/ge400/ge-400.htm">http://www.feb-patrimoine.com/PROJET/ge400/ge-400.htm</a>
</li>

<li>GE-400 Time-sharing information systems: <br />
<a href="http://www.computerhistory.org/collections/accession/102646147">http://www.computerhistory.org/collections/accession/102646147</a>
</li>

<li>A brief history of the development of BASIC (pravděpodobně již nefunkční odkaz)<br />
<a href="http://www.phys.uu.nl/~bergmann/history.html">http://www.phys.uu.nl/~bergmann/history.html</a>
</li>

<li>History of BASIC (PDF)<br />
<a href="http://www.q7basic.org/History%20of%20BASIC.pdf">http://www.q7basic.org/History%20of%20BASIC.pdf</a>
</li>

<li>Dartmouth College Computation Center. 1964.-The original Dartmouth BASIC manual<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf</a>
</li>

<li>The Original BASIC<br />
<a href="http://www.truebasic.com/">http://www.truebasic.com/</a>
</li>

<li>BASIC - Beginners All-purpose Symbolic Instruction Code<br />
<a href="http://hopl.murdoch.edu.au/showlanguage.prx?exp=176">http://hopl.murdoch.edu.au/showlanguage.prx?exp=176</a>
</li>

<li>The History of the Mainframe Computer<br />
<a href="http://www.vikingwaters.com/htmlpages/MFHistory.htm">http://www.vikingwaters.com/htmlpages/MFHistory.htm</a>
</li>

<li>Dartmouth Time Sharing System<br />
<a href="http://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System">http://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System</a>
</li>

<li>General Electric (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/General_Electric">http://en.wikipedia.org/wiki/General_Electric</a>
</li>

<li>GE 225 vs. IBM 1401<br />
<a href="http://ed-thelen.org/GE225-IBM1401.html">http://ed-thelen.org/GE225-IBM1401.html</a>
</li>

<li>A GE-225 is found<br />
<a href="http://ed-thelen.org/comp-hist/GE225.html">http://ed-thelen.org/comp-hist/GE225.html</a>
</li>

<li>G.E. 200 Series Computers<br />
<a href="http://www.smecc.org/g_e__200_series_computers.htm">http://www.smecc.org/g_e__200_series_computers.htm</a>
</li>

<li>DTSS - Dartmouth Time Sharing System<br />
<a href="http://dtss.dartmouth.edu/index.php">http://dtss.dartmouth.edu/index.php</a>
</li>

<li>John G. Kemeny: BASIC and DTSS: Everyone a Programmer<br />
<a href="http://dtss.dartmouth.edu/everyoneaprogrammer.php">http://dtss.dartmouth.edu/everyoneaprogrammer.php</a>
</li>

<li>GE-200 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-200_series">http://en.wikipedia.org/wiki/GE-200_series</a>
</li>

<li>GE-400 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-400_series">http://en.wikipedia.org/wiki/GE-400_series</a>
</li>

<li>GE-600 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-600_series">http://en.wikipedia.org/wiki/GE-600_series</a>
</li>

<li>ZX Basic Manual<br />
<a href="http://www.worldofspectrum.org/ZXBasicManual/">http://www.worldofspectrum.org/ZXBasicManual/</a>
</li>

<li>ZX81 BASIC Programming<br />
<a href="http://www.worldofspectrum.org/ZX81BasicProgramming/">http://www.worldofspectrum.org/ZX81BasicProgramming/</a>
</li>

<li>Sinclair BASIC History<br />
<a href="http://scratchpad.wikia.com/wiki/Sinclair_BASIC_History">http://scratchpad.wikia.com/wiki/Sinclair_BASIC_History</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Sinclair BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Sinclair_BASIC">http://en.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Beta_BASIC">http://en.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Beta_BASIC">http://cs.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>BETA BASIC NEWSLETTER No 8<br />
<a href="http://spectrum128.ru/help/BetaBasicNewsletter8.pdf">http://spectrum128.ru/help/BetaBasicNewsletter8.pdf</a>
</li>

<li>R. T. RUSSELL: The home of BBC BASIC<br />
<a href="http://www.rtrussell.co.uk/">http://www.rtrussell.co.uk/</a>
</li>

<li>R. T. RUSSELL: A History of BBC BASIC<br />
<a href="http://www.cix.co.uk/~rrussell/bbcbasic/history.html">http://www.cix.co.uk/~rrussell/bbcbasic/history.html</a>
</li>

<li>SuperBASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/SuperBASIC">http://en.wikipedia.org/wiki/SuperBASIC</a>
</li>

<li>SuperBASIC (Wikipedia CZ)<br />
<a href="http://en.wikipedia.org/wiki/SuperBASIC">http://en.wikipedia.org/wiki/SuperBASIC</a>
</li>

<li>Laser Basic/Laser Compiler<br />
<a href="http://www.sincuser.f9.co.uk/049/laser.htm">http://www.sincuser.f9.co.uk/049/laser.htm</a>
</li>

<li>Laser BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Laser_BASIC">http://cs.wikipedia.org/wiki/Laser_BASIC</a>
</li>

<li>BBC BASIC<br />
<a href="http://www.bbcbasic.co.uk/bbcbasic.html">http://www.bbcbasic.co.uk/bbcbasic.html</a>
</li>

<li>BBC BASIC<br />
<a href="http://mdfs.net/Software/BBCBasic/">http://mdfs.net/Software/BBCBasic/</a>
</li>

<li>BBC BASIC (Z80) for the ZX Spectrum<br />
<a href="http://mdfs.net/Software/BBCBasic/Spectrum/">http://mdfs.net/Software/BBCBasic/Spectrum/</a>
</li>

<li>BBC BASIC (Wikipedia CZ)<br />
<a href="http://en.wikipedia.org/wiki/BBC_BASIC">http://en.wikipedia.org/wiki/BBC_BASIC</a>
</li>

<li>BeebWiki &ndash; 8-bit Acorn Computer Wiky<br />
<a href="http://beebwiki.jonripley.com/Main_Page">http://beebwiki.jonripley.com/Main_Page</a>
</li>

<li>Porovnání osmibitů<br />
<a href="http://porovnani8bitu.spaces.live.com/">http://porovnani8bitu.spaces.live.com/</a>
</li>

<li>Rosetta Code &ndash; Main Page<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Rosetta Code &ndash; Category Basic<br />
<a href="http://rosettacode.org/wiki/Category:BASIC">http://rosettacode.org/wiki/Category:BASIC</a>
</li>

<li>QBasicJedi<br />
<a href="http://www.freewebs.com/qbasicjedi/">http://www.freewebs.com/qbasicjedi/</a>
</li>

<li>QBasic/QuickBasic Downloads<br />
<a href="http://www.freewebs.com/qbasicjedi/qbdownloads.html">http://www.freewebs.com/qbasicjedi/qbdownloads.html</a>
</li>

<li>QuickBASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/QuickBASIC">http://cs.wikipedia.org/wiki/QuickBASIC</a>
</li>

<li>QBasic.com<br />
<a href="http://www.qbasic.com/">http://www.qbasic.com/</a>
</li>

<li>QBasic (Wikipedia)<br />
<a href="http://cs.wikipedia.org/wiki/QBasic">http://cs.wikipedia.org/wiki/QBasic</a>
</li>

<li>Dialling with QBASIC<br />
<a href="http://www.mysundial.ca/tsp/qbasic.html">http://www.mysundial.ca/tsp/qbasic.html</a>
</li>

<li>BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/BASIC">http://en.wikipedia.org/wiki/BASIC</a>
</li>

<li>BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/BASIC">http://cs.wikipedia.org/wiki/BASIC</a>
</li>

<li>Turbo BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Turbo_BASIC">http://cs.wikipedia.org/wiki/Turbo_BASIC</a>
</li>

<li>More BASIC Computer Games<br />
<a href="http://www.atariarchives.org/morebasicgames/">http://www.atariarchives.org/morebasicgames/</a>
</li>

<li>How to build an interpreter in Java, Part 1: The BASICs<br />
<a href="http://www.javaworld.com/jw-05-1997/jw-05-indepth.html">http://www.javaworld.com/jw-05-1997/jw-05-indepth.html</a>
</li>

<li>INTEGER BASIC Reference<br />
<a href="http://www.landsnail.com/a2ref2.htm">http://www.landsnail.com/a2ref2.htm</a>
</li>

<li>APPLESOFT Reference<br />
<a href="http://www.landsnail.com/a2ref.htm">http://www.landsnail.com/a2ref.htm</a>
</li>

<li>Applesoft Lite: Applesoft BASIC for the Replica-1<br />
<a href="http://cowgod.org/replica1/applesoft/">http://cowgod.org/replica1/applesoft/</a>
</li>

<li>Simons' BASIC<br />
<a href="http://en.wikipedia.org/wiki/Simons'_BASIC">http://en.wikipedia.org/wiki/Simons'_BASIC</a>
</li>

<li>Simon's Basic<br />
<a href="http://www.lemon64.com/?mainurl=http%3A//www.lemon64.com/museum/list.php%3Flineoffset%3D54%26genre%3Dmanualmisc">http://www.lemon64.com/?mainurl=http%3A//www.lemon64.com/museum/list.php%3Flineoffset%3D54%26genre%3Dmanualmisc</a>
</li>

<li>BASIC<br />
<a href="http://www.c64-wiki.com/index.php/BASIC">http://www.c64-wiki.com/index.php/BASIC</a>
</li>

<li>C64 Wiki: Simons Basic<br />
<a href="http://www.c64-wiki.de/index.php/Simons_Basic">http://www.c64-wiki.de/index.php/Simons_Basic</a>
</li>

<li>Simons' Basic (evaluation)<br />
<a href="http://www.atarimagazines.com/creative/v9n11/60_Simons_Basic.php">http://www.atarimagazines.com/creative/v9n11/60_Simons_Basic.php</a>
</li>

<li>Bill Gates' Personal Easter Eggs in 8 Bit BASIC
<a href="http://www.pagetable.com/?p=43">http://www.pagetable.com/?p=43</a>
</li>

<li>Třicet let od vydání revolučního Turbo Pascalu 5.5<br />
<a href="https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/">https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/</a>
</li>

<li>Let's make a small and simple GW-BASIC program!<br />
<a href="https://www.youtube.com/watch?v=OyPUn74nj-s">https://www.youtube.com/watch?v=OyPUn74nj-s</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

