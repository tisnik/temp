<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">2. Slavné ZX Spectrum a ZX Spectrum+</a></p>
<p><a href="#k03">3. Základní parametry ZX Spectra</a></p>
<p><a href="#k04">4. ZX Spectrum 128K+</a></p>
<p><a href="#k05">5. NES a ZX Spectrum: dvě naprosto odlišné platformy</a></p>
<p><a href="#k06">6. Mapa paměti ZX Spectra</a></p>
<p><a href="#k07">7. Grafický režim ZX Spectra</a></p>
<p><a href="#k08">*** 8. Slavný osmibitový mikroprocesor Zilog Z80</a></p>
<p><a href="#k09">9. Assemblery a cross assemblery pro ZX Spectrum a jeho následovníky</a></p>
<p><a href="#k10">10. Instalace assembleru a emulátoru ZX Spectra</a></p>
<p><a href="#k11">*** 11. První program v&nbsp;assembleru: změna barvového atributu v&nbsp;levém horním rohu obrazovky</a></p>
<p><a href="#k12">12. Překlad do strojového kódu a uložení výsledku ve formátu <i>tap</i></a></p>
<p><a href="#k13">*** 13. Načtení a spuštění příkladu v&nbsp;emulátoru ZX Spectra</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Slavné ZX Spectrum a ZX Spectrum+</h2>

<p>Pravděpodobně nejslavnějším počítačem navrženým a vyráběným společností
<i>Sinclair Research</i> je <i>ZX Spectrum</i> a jeho následovníci,
tj.&nbsp;modely <i>ZX Spectrum+</i> a <i>ZX Spectrum 128K+</i> i jejich rozličné
varianty (i ty určené pro trh v&nbsp;USA, které se u některých modelů od
původního Spectra odlišují). Původní <i>ZX Spectrum</i> (v&nbsp;tuzemsku lidově
označovaný jako &bdquo;gumák&ldquo; podle své klávesnice) bylo nabízeno ve dvou
variantách. Levnější varianta, která byla prodávána za 125 liber, obsahovala
16 kB operační paměti, zatímco varianta dražší (nabízená za 175 liber) měla
celých 48 kB RAM (i tak se však jednalo o velmi levný mikropočítač). Levnější
model bylo možné za přibližně šedesát liber upgradovat, tj.&nbsp;rozšířit paměť
o 32 kB RAM. Dalším modelem bylo <i>ZX Spectrum+</i>, které bylo vybaveno
klávesnicí s&nbsp;kurzorovými tlačítky, klávesou <strong>Extend Mode</strong>,
která zjednodušovala zápis některých BASICovských příkazů i Resetem.</p>

<img src="https://i.iinfo.cz/images/565/speccya-4.jpg" class="image-449670" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="350" height="255" />
<p><i>Obrázek 3: Slavný &bdquo;gumák&ldquo; ZX Spectrum.</i></p>

<p>Udává se, že po uvedení ZX Spectra na trh se každý týden prodalo až 15 tisíc
kusů tohoto počítače. Velká popularita mezi uživateli se samozřejmě odrazila
i v&nbsp;počtu aplikací &ndash; v&nbsp;době největší slávy ZX Spectra bylo
vytvořeno více než 10000 her a dalších programů, ovšem aplikace pro něj
vznikají i nyní. Především se jedná o nové hry (například existuje
i <i>Doom</i> pro Spectrum) a dema. Většinu her a nástrojů (ale i dobové
dokumentace) k&nbsp;ZX Spectru lze nalézt na stránkách <a
href="https://worldofspectrum.org/archive">https://worldofspectrum.org/archive</a>.</p>

*** image ***
<p><i>Obrázek 4: ZX Spectrum+ s&nbsp;odlišnou klávesnicí (a novou klávesou
<strong>Extend Mode</strong> zjednodušující zápis některých příkazů a funkcí
Sinclair BASICu).</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Základní parametry ZX Spectra</h2>

<p>Všechny typy počítačů <i>ZX Spectrum</i> se v&nbsp;několika ohledech lišily
od původních modelů <i>ZX80</i> a <i>ZX81</i>, i když základ,
tj.&nbsp;osmibitový mikroprocesor Zilog Z80, byl použitý ve všech počítačích
firmy <i>Sinclair</i> (zde se jeho frekvence zvýšila na 3,5 MHz). Především
došlo k&nbsp;rozšíření kapacity paměti ROM na 16 kB, takže bylo možné použít
vylepšenou verzi Sinclair Basicu, která (kromě dalších vylepšení) obsahovala
nové příkazy i funkce. Taktéž byl vylepšený způsob záznamu dat na magnetofon.
Ale největší novinkou, která velkou měrou přispěla k&nbsp;popularitě <i>ZX
Spectra</i>, byla upravená verze čipu <i>ULA</i>, jež se mimo dalších operací
starala i o generování obrazu, které již bylo ve větší míře nezávislé na
mikroprocesoru, než tomu bylo u počítačů <i>ZX80</i> a <i>ZX81</i> (takže
mj.&nbsp;odpadla potřeba příkazů <strong>SLOW</strong> a <strong>FAST</strong>.
Počítače ZX Spectrum taktéž začaly používat klasický framebuffer
s&nbsp;jeho &ndash; pro tento počítač tak typickým a mnoho let nezměněným
&ndash; rozdělením na dvě poloviny: <i>bitmapu</i> o rozlišení 256&times;192
pixelů a <i>atributovou paměť</i> s&nbsp;32&times;24 bloky, v&nbsp;nichž bylo
možné, nezávisle na ostatních blocích, měnit barvu popředí a pozadí (viz též <a
href="#k07">sedmou kapitolu</a>). Zvukový subsystém se stále skládal pouze
z&nbsp;&bdquo;beeperu&ldquo; programově ovládaného jediným bitem.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-10.png" class="image-449687" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 5: Obchodní část hry Elite přepsaná do Sinclair BASICu. Ukazuje
se, že i poměrně složité aplikace lze vytvořit v&nbsp;na dnešní dobu
primitivním a v&nbsp;mnoha ohledech omezeném programovacím jazyku.</i></p>

<p>Paměťový prostor ZX Spectra, tj.&nbsp;64 přímo adresovatelných kilobajtů,
byl rozdělen na tři části. Na začátku se nacházela oblast paměti ROM
o velikosti 16 kB s&nbsp;interpreterem jazyka Sinclair Basic, rutinami pro
výpočty s&nbsp;hodnotami reprezentované v&nbsp;pohyblivé řádové čárce apod. Za
pamětí ROM bylo 16 kB RAM, do které měl přístup jak mikroprocesor, tak i čip
ULA (který zde měl uložený framebuffer) a poslední oblast o kapacitě 32 kB byla
dostupná pouze mikroprocesoru. V&nbsp;dalším textu se budeme zabývat pouze
šestnáctikilobajtovou oblastí paměti RAM, do které měl přístup jak
mikroprocesor, tak i čip ULA. Z&nbsp;hlediska programátora byla tato paměť
&bdquo;pomalejší&ldquo; než zbylých 32 kB, což mj.&nbsp;znamenalo, že se do
této oblasti neumisťovaly časově náročné rutiny, například podprogramy pro
přehrávání zvuků či práci s&nbsp;magnetofonem. Čip ULA si totiž postupně
načítal hodnoty jednotlivých pixelů i příslušné barvové atributy těchto pixelů
při generování video signálu. Bližší informace budou uvedeny <a
href="#k06">v&nbsp;šesté kapitole</a>.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-11.png" class="image-449688" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 6: Další screenshot získaný z&nbsp;obchodní části hry Elite
přepsané do Sinclair BASICu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. ZX Spectrum+ 128</h2>

<p>Následovníkem klasického ZX Spectra 48k a ZX Spectra+ byl model pojmenovaný
ZX Spectrum 128 (resp.&nbsp;ZX Spectrum+ 128). Zatímco vzhledově se tento
počítač příliš nelišil od svých předchůdců, zejména ZX Spectra+ (na pravou
stranu byl ovšem přidán typický chladič), celková architektura počítače byla
v&nbsp;několika směrech vylepšena. Především byl zvukový subsystém počítače
(tj.&nbsp;původně pouze jednobitový &bdquo;beeper&ldquo; napojený na
reproduktor) rozšířen o hudební čip <i>AY-3–8910</i>, přesněji řečeno o jeho
variantu <i>AY-8912</i>, která kromě zvukového výstupu obsahovala i jeden
osmibitový port použitý pro připojení MIDI zařízení a externí klávesnice. Dále
byla zvýšena kapacita paměti ROM ze 16 kB na 32 kB, což například umožnilo
použití vylepšeného interpretru Basicu i jeho editoru, včetně menu zobrazeného
po startu počítače. Kapacita paměti RAM je zakódována v&nbsp;samotném názvu
počítače &ndash; má tedy velikost celých 128 kB.</p>

<img src="https://i.iinfo.cz/images/565/speccya-5.jpg" class="image-449671" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="344" height="158" />
<p><i>Obrázek 7: ZX Spectrum+ 128K s&nbsp;typickým chladičem na pravé
straně.</i></p>

<p>Částečné vylepšení doznal také grafický subsystém. Největší změnou (spíše
rozšířením) bylo to, že se framebuffer mohl nacházet na dvou místech
v&nbsp;operační paměti. To znamenalo, že se dal velmi snadno implementovat
například takzvaný <i>double buffering</i>, tj.&nbsp;technika, při které se do
jednoho (neviditelného) bufferu provádělo vykreslování, zatímco obsah druhého
bufferu byl zobrazován (vykreslování tedy nevedlo například k&nbsp;nežádoucímu
&bdquo;sněžení&ldquo;). Po vykreslení scény se funkce obou bufferů prohodily.
Dva buffery bylo možné použít i pro implementaci triku GigaScreen, při kterém
se na obrazovce rychle mění dva speciálně upravené obrázky.</p>

*** image ***
<p><i>Obrázek 8: Nově přidané menu zobrazené po startu </i></p>

<p><div class="rs-tip-major">Poznámka: všechny modely a podmodely ZX Spectra
jsou podrobně popsány na stránce <a
href="https://spectrumforeveryone.com/technical/zx-spectrum-models/">https://spectrumforeveryone.com/technical/zx-spectrum-models/</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. NES a ZX Spectrum: dvě naprosto odlišné platformy</h2>

<p>Vzhledem k&nbsp;tomu, že tento článek ideově navazuje na seriál <a
href="https://www.root.cz/serialy/vyvoj-her-pro-herni-konzoli-nes/">Vývoj her
pro herní konzoli NES</a>, bude zajímavé si alespoň ve stručnosti (a
z&nbsp;důvodu této stručnosti možná ne vždy zcela přesně) porovnat základní
parametry NESu a ZX Spectra. Jedná se o dvě osmibitová zařízení vydaná
v&nbsp;přibližně stejné době (1982 resp.&nbsp;1983), ovšem pro zcela odlišný
segment trhu (což paradoxně nakonec nebyla pravda, protože mnozí používali ZX
Spectrum jako dostupnou herní konzoli, i když se jednalo o univerzální
stroj):</p>

<table>
<tr><th>Vlastnost</th><th>NES</th><th>ZX Spectrum</th></tr>
<tr><td>Typ zařízení</td><td>herní konzole</td><td>univerzální domácí mikropočítač</td></tr>
<tr><td>Rok uvedení na trh</td><td>1983</td><td>1982</td></tr>
<tr><td>Popularita</td><td>62 milionů, cca 50 klonů</td><td>5 milionů originálu i navazujících modelů, cca 60 klonů (pravděpodobně i více)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Mikroprocesor</td><td>varianta MOS 6502</td><td>původní Zilog Z80</td></tr>
<tr><td>Architektura CPU</td><td>akumulátorový, čistě osmibitový</td><td>registrový, kombinace 8/16 bitů, ALU operace s&nbsp;registrem A</td></tr>
<tr><td>Hodinová frekvence</td><td>1,66 nebo 1,79 MHz</td><td>3,5 MHz</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Programy uloženy v</td><td>ROM (cartridge)</td><td>RAM (načtení z kazety/diskety)</td></tr>
<tr><td>ROM se systémem</td><td>ne</td><td>16 kB (BASIC+systém)</td></tr>
<tr><td>Kapacita RAM</td><td>2kB prg+2kB video</td><td>16kB, 48kB, 128kB (některé klony 80kB)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Video výstup na</td><td>TV</td><td>TV</td></tr>
<tr><td>Norma</td><td>PAL i NTSC</td><td>PAL (Timex měl model s&nbsp;podporou NTSC)</td></tr>
<tr><td>Rozlišení grafiky</td><td>256&times;240</td><td>256&times;192</td></tr>
<tr><td>Počet barev</td><td>25 z 54</td><td>15 z 15</td></tr>
<tr><td>Způsob uložení grafických dat</td><td>dlaždice v ROM + mapování dlaždic ve VRAM</td><td>bitmapa i atributy v RAM</td></tr>
<tr><td>Přístup CPU ke grafickým datům</td><td>nepřímo přes registry PPU</td><td>přímo mapováno do adresního prostoru CPU</td></tr>
<tr><td>Bitmapová grafika</td><td>ne</td><td>ano (+ &bdquo;blokové&ldquo; atributy)</td></tr>
<tr><td>Libovolné pozadí scény</td><td>ne (dlaždice v ROM)</td><td>ano s&nbsp;omezeními atributů</td></tr>
<tr><td>Sprity</td><td>64 nezávislých spritů</td><td>ne (pouze SW sprity)</td></tr>
<tr><td>Scrolling</td><td>jemný HW scrolling</td><td>ne (pouze SW řešení)</td></tr>
<tr><td>Double buffering</td><td>ano, ale nepotřebný</td><td>ne (původní model 48k), ano (model 128k)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Zvukový subsystém</td><td>Ricoh 2A03/2A07, MIDI (přes doplněk)</td><td>beeper, AY-3-8910 (128+), MIDI (128+)</td></tr>
<tr><td>Kanály</td><td>2 obdélníkové signály, 1 trojúhelníkový, 1 šum, 1 D/A</td><td>1 kanál beeperu (1bit), 3 kanály (obdélník/šum) ayčka</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Klávesnice</td><td>ne (lze přikoupit, prakticky nepodporováno)</td><td>ano</td></tr>
<tr><td>Herní ovladače</td><td>ano (standard)</td><td>ano (více de facto standardů), myš</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Externí paměťová zařízení</td><td>cartridge</td><td>kazetový magnetofon, disketová jednotka</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Vývojové nástroje</td><td>cross assemblery a překladače</td><td>interaktivní nástroje, cross assemblery a překladače</td></tr>
<tr><td>Přístup k&nbsp;vývoji</td><td>omezený HW (ochrana cartridge)</td><td>zcela volný</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto miniseriálu se budeme
zabývat především grafickým subsystémem ZX Spectra. Na první pohled jsou si
subystémy NESu a Spectra podobné (shodné horizontální rozlišení, podobné
rozlišení vertikální, atd.), ovšem programují se zcela rozdílným způsobem a i
výsledky jsou vizuálně zcela odlišné. ZX Spectrum nabízí mnohem větší
variabilitu grafického výstupu (například není problém si nechat vykreslit
grafy), ovšem naprosto všechny grafické operace je nutné provádět programově
&ndash; HW podpora prakticky neexistuje (sprity, scrolling, double buffering).
I z&nbsp;tohoto důvodu se vizuální styl her pro NES a ZX Spectrum v&nbsp;mnoha
směrech odlišuje (například na ZX Spectru vzniklo mnoho her s&nbsp;isometrickou
grafikou, kdežto u NESu je jasně vidět snaha o využití &bdquo;dlaždic&ldquo;
v&nbsp;prakticky všech hrách).</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Mapa paměti ZX Spectra</h2>

<p><a
href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/memory-map">Paměťový
prostor původního ZX Spectra</a>, tj. 64 přímo adresovatelných kilobajtů, byl
rozdělen na tři části. Na začátku se nacházela oblast paměti ROM o velikosti
16 kB, která obsahovala interpret programovacího jazyka Sinclair Basic, rutiny
pro práci v&nbsp;pohyblivé řádové čárce apod. Za pamětí ROM byla do adresního
prostoru mikroprocesoru namapována 16 kB RAM, do které měl přístup jak
mikroprocesor, tak i čip ULA (který zde měl uložený framebuffer) a poslední
oblast o kapacitě 32 kB byla dostupná pouze mikroprocesoru.</p>

<p>Na ZX Spectru 128+ byla situace složitější, jelikož bylo nutné
v&nbsp;paměťovém rozsahu 64 kB přepínat jak mezi dvěma ROM a dvěma oblastmi pro
uložení grafiky (6144+768 bajtů), tak i nějakým způsobem zajistit přístup
k&nbsp;celkovým 128 kilobajtům RAM. Z&nbsp;tohoto důvodu se používal přístup
známý i z&nbsp;dalších typů počítačů: ROM i RAM byly rozděleny do takzvaných
bank, z&nbsp;nichž každá měla kapacitu 16 kB. A tyto banky se mapovaly do čtyř
adresovatelných oblastí, a to takovým způsobem, aby byla zajištěna
kompatibilita s&nbsp;původním ZX Spectrem 48k. Podobně byly paměťové stránky
využity i na dalších klonech ZX Spectra, například na Didaktiku Gama apod.</p>

<p>Konkrétně vypadá mapování z&nbsp;pohledu mikroprocesoru následovně:</p>

<p>ZX Spectrum 48k:</p>

<pre>
16kB ROM
16kB RAM (s&nbsp;Video RAM)
32kB RAM
</pre>

<p>ZX Spectrum 128K:</p>

<pre>
16kB originální ROM nebo 16kB 128 ROM
16kB RAM stránka 5 (s&nbsp;Video RAM)
16kB RAM stránka 2
16kB RAM stránka 0 až 7 (podle výběru)
</pre>

<p><div class="rs-tip-major">Poznámka: zde tedy přepínání stránek probíhalo po
16kB, což je (zdá se) ideální hodnota.</div></p>

<p>Video RAM je buď umístěna na stránce 5 nebo na stránce 7 (může být tedy
přesunuta &bdquo;výše&ldquo; z&nbsp;pohledu adresního režimu
mikroprocesoru)..</p>

<p>Didaktik Gama:</p>

<pre>
16kB ROM
16kB RAM (s&nbsp;Video RAM)
32kB RAM stránky 1+2 nebo stránky 3+4
</pre>

<p><div class="rs-tip-major">Poznámka: zde přepínání stránek probíhalo po
celých 32kB, což je již příliš velká granularita, která navíc mohla způsobovat
problémy při programování v&nbsp;BASICu.</div></p>

<p>Existují i další možnosti rozšíření paměti, například podle Lamače (až do
528 kB) nebo podle Trollera (dalších 32 kB). My se však budeme minimálně
v&nbsp;úvodních článcích soustředit pouze na původní ZX Spectrum 48k.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Grafický režim ZX Spectra</h2>

<p>Obraz zobrazený na televizoru se skládal z&nbsp;okraje (<i>border</i>) a
bitmapy. U okraje bylo možné pouze měnit jeho barvu, ale nemohl obsahovat žádné
další grafické informace (což nebyla zcela pravda, protože rychlá změna barvy
dokázala na okraji &bdquo;vykouzlit&ldquo; pruhy). Zobrazovaná bitmapa měla
rozlišení 256&times;192 pixelů, což znamená, že její paměťové požadavky lze
snadno vypočítat: 256&times;192/8=6144 bajtů. Každý pixel byl v&nbsp;této
bitmapě reprezentován jediným bitem, kterým se volilo, zda se jedná o pixel
patřící k&nbsp;popředí (<i>ink</i>) či k&nbsp;pozadí (<i>paper</i>). Barvy
popředí a pozadí nemohly být nastaveny pro každý pixel zvlášť, ale pouze pro
celý blok 8&times;8 pixelů. Pro tento blok se v&nbsp;jednom bajtu zvaném
<i>atribut</i> ukládaly jak informace o popředí a pozadí (k&nbsp;dispozici bylo
osm základních barev, tj.&nbsp;jejich indexy bylo možné uložit ve třech
bitech), tak i intenzita barev (vyšší/nižší) a příznak, zda má celý blok
blikat, tj.&nbsp;periodicky měnit barvu popředí a pozadí.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-14.png" class="image-449691" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 19: Na obrázku hry Barbarian je poměrně dobře patrné, jakým
způsobem je obrazová paměť organizovaná, především omezení daná atributy
o velikosti 8&times;8 pixelů.</i></p>

<p>Atributů bylo celkem 32&times;24=768, takže celková kapacita paměti pro
uložení celého obrázku byla rovna 6144+768=6912 bajtům, což zhruba odpovídá
typické kapacitě framebufferů u domácích osmibitových počítačů (větší
framebuffery byly nepraktické, protože zabíraly velkou část drahé operační
paměti a taktéž by tehdejší mikroprocesory musely provádět přesuny objemnějších
bloků dat při změně obrazu, menší framebuffery pak vedly k&nbsp;omezenému
rozlišení a/nebo počtu barev). Frekvence mikroprocesoru Zilog Z80,
tj.&nbsp;3,5 MHz nebyla zvolena náhodně. Přesně totiž odpovídá počtu taktů
nutných pro generování video signálu pro televize pracující
v&nbsp;normě PAL.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-15.png" class="image-449692" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 20: Při pečlivé práci je možné omezení představovaná atributy do
značné míry obejít, jak dokazuje tato bitmapa pro ZX Spectrum.</i></p><div
class="promo-in-article clear">

<p><div class="rs-tip-major">Poznámka: způsob uspořádání grafické paměti do
značné míry ovlivnil vzhled i chování her naprogramovaných pro ZX Spectrum.
Můžeme zde vidět značnou odlišnost v&nbsp;porovnání s&nbsp;hrami pro Atari či
Commodore C64 způsobenou nutnosti softwarově řízeného scrollování, absencí
spritů či pseudografických režimů 12 a 13 známých a používaných u Atari.
Rozdíly jsou ovšem patrné i při pohledu na zcela statické obrázky
z&nbsp;některých textovek:</div></p>

*** image ***
<p><i>Obrázek XX: Textovka Red Moon pro ZX Spectrum.</i></p>

*** image ***
<p><i>Obrázek XX: Textovka Red Moon pro osmibitová Atari.</i></p>

<p>Některé důležité adresy, které souvisí s&nbsp;grafickou pamětí ZX Spectra
(všechny adresy jsou uvedeny hexadecimálně, délka dekadicky):</p>

<table>
<tr><th>Od</th><th>Do</th><th>Délka</th><th>Stručný popis</th></tr>
<tr><td>4000</td><td>47ff</td><td>2048</td><td>prvních 64 obrazových řádků</td></tr>
<tr><td>4800</td><td>5000</td><td>2048</td><td>obrazové řádky 64-127</td></tr>
<tr><td>5000</td><td>57ff</td><td>2048</td><td>obrazové řádky 128-191</td></tr>
<tr><td>5800</td><td>5aff</td><td>768</td><td>32&times;24=768 atributů</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: obrazové řádky v&nbsp;každé skupině
nejsou uloženy za sebou, ale v&nbsp;prokládaném formátu vyžadovaném čipem ULA
při vykreslování na obrazovku (ULA totiž musí provést přístup jak do bitmapy,
tak i do atributové paměti). Tento formát si podrobně popíšeme příště a je
dobře viditelný při (pomalém) nahrávání obsahu obrazové paměti <a
href="https://www.youtube.com/watch?v=MtBoRp_cSxQ">z&nbsp;kazety</a>.</div></p>

*** image ***
<p><i>Obrázek XX: Známá textovka Adventure pro ZX Spectrum.</i></p>

*** image ***
<p><i>Obrázek XX: Známá textovka Adventure pro osmibitová Atari.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Slavný osmibitový mikroprocesor Zilog Z80</h2>

<p></p>

<p>V&nbsp;roce 1972, tj.&nbsp;pouhých pět měsíců po uvedení 4004 (to se nám to
zrychluje) představila společnost Intel jeho osmibitového nástupce. Jednalo se
o mikroprocesor <i>Intel 8008</i>. V&nbsp;jeho instrukční sadě se již mnoho
programátorů bez problému vyzná, protože po rozšíření se s&nbsp;ní můžeme
setkat i v&nbsp;8080 a Z80. Tento čip již při použití stejné desetimikronové
technologie obsahoval 3500 tranzistorů, pracoval na frekvenci 800 kHz a mohl
adresovat až 16 kB paměti (kombinace ROM se statickou RAM). Samotný výpočetní
výkon byl oproti 4004 skoro dvojnásobný, především však byla použita osmibitová
sběrnice a řada podpůrných obvodů, se kterými se můžeme setkat i u pozdějších
procesorů.</p>

<p>Za dva roky poté, tj.&nbsp;v&nbsp;roce 1974, Intel uvedl další procesor
nazvaný <i>Intel 8080</i>. Ten již pracoval s&nbsp;hodinovou frekvencí 2 MHz,
obsahoval cca 4500 tranzistorů a mohl adresovat až 64 kB paměti (+ periferie
adresované mimo hlavní RAM+ROM). Jednou z&nbsp;předností tohoto procesoru bylo
použití nové třímikronové technologie výroby. Intel 8080 byl použit
v&nbsp;mnoha počítačích (Altair 8800), i když ke své práci potřeboval kromě
standardního pětivoltového napájení ještě jedno vyšší napětí (pro oscilátory) a
také dva podpůrné obvody &ndash; 8224 a 8228. Jednou ze zajímavostí je, že se
tento mikroprocesor vyráběl i v&nbsp;naší Tesle pod označením <i>MHB 8080A</i>
(dlužno ovšem říci, že v&nbsp;době, kdy se ve světě přecházelo na
šestnáctibitové a třicetidvoubitové mikroprocesory).</p>

<p></p>

<p>Co se týče popularity, tak byl mikroprocesor Zilog Z80 více než úspěšným
soupeřem MOS 6502. Jeho tvůrcem není nikdo jiný než <i>Federico Faggin</i>,
který opustil Intel (podobně jako <i>Chuck Peddle</i> opustil Motorolu) a
založil s&nbsp;několika kolegy novou firmu nazvanou <i>Zilog</i>. Mikroprocesor
Z80 je vlastně podstatně vylepšenou variantou čipu Intel 8080, se kterou byl
zpětně kompatibilní, což bylo v&nbsp;té době docela nezvyklé, ovšem o to
užitečnější. Oproti původnímu čipu Intel 8080 byla rozšířena jak instrukční
sada (blokové operace, operace s&nbsp;šestnáctibitovými operandy, bitové
instrukce), tak i sada pracovních registrů, bylo použito pouze jedno napájecí
napětí (už to dokázalo podstatně snížit cenu a zvýšit spolehlivost celého
počítače) a především sám procesor dokázal obnovovat dynamické paměti bez
pomoci dalších obvodů. Spolu s&nbsp;poměrně vysokou rychlostí (originál
pracoval na 2,5 MHz, pozdější verze mohly být taktovány až 8 MHz a CMOS verze
10 MHz) a rozumnou cenou se jednalo o mikroprocesor, který byl použit
v&nbsp;mnoha osobních i domácích počítačích, například TRS-80 a především
legendárních počítačích ZX-80, ZX-81 a ZX-Spectru (speccy).</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Assemblery a cross assemblery pro ZX Spectrum a jeho následovníky</h2>

<p>Vraťme se nyní zpět k&nbsp;ZX Spectru a k&nbsp;vývojovým prostředkům, které
pro tento velmi populární domácí mikropočítač vznikly. Zajímat nás budou
především assemblery. Těch přímo pro ZX Spectrum vzniklo minimálně několik
desítek a lišily se od sebe jak svými možnostmi, tak i způsobem zápisu
(popř.&nbsp;i ladění programů), ale například i tím, zda bylo možné vlastní
assembler (a editor) přesunout v&nbsp;operační paměti na jiné místo.
Z&nbsp;těch známějších assemblerů jmenujme například Zeus, HiSoft Assembler či
propracovaný tuzemský Prometheus od Proximy.</p>

<a href="http://www.root.cz/obrazek/210818/"><img src="http://i.iinfo.cz/images/462/dev-8bit-14-prev.png" class="image-210818" width="283" height="270" alt="&#160;" /></a>
<p><i>Obrázek X: Obal na kazetu se Zeus Assemblerem určeným pro slavné ZX
Spectrum.</i></p>

<p>Tyto assemblery, které byly provozovány přímo na ZX Spectru, samozřejmě
poněkud omezovaly tvůrce &bdquo;v&nbsp;rozletu&ldquo;, protože paměť obsazená
assemblerem a zdrojovým kódem nebyla využitelná výsledným programem. A
pochopitelně vývoj a ladění na obrazovce s&nbsp;24 textovými řádky a 32 znaky
na řádku taktéž nemusí každému vyhovovat, zejména v&nbsp;současnosti, kdy máme
k&nbsp;dispozici mnohdy obrovské monitory. A konečně &ndash; pád aplikace či
její nekorektní chování mohly přepsat samotný assembler a editovaný program,
takže se muselo začít od začátku (či od posledního &bdquo;save&ldquo;).</p>

*** image ***
<p><i>Obrázek X: Vývojové prostředí Zeus Assembleru.</i></p>

<p>Z&nbsp;tohoto důvodu použijeme <i>cross assembler</i>, tj.&nbsp;assembler
běžící přímo na PC, který produkuje buď obraz paměti ZX Spectra nebo obraz
záznamu na magnetofonové pásce. Ten bude možné načíst do emulátoru či nahrát na
reálné ZX Spectrum (stále se dá pořídit).</p>

*** image ***
<p><i>Obrázek X: Uvítací obrazovka HiSoft Assembleru.</i></p>

*** image ***
<p><i>Obrázek X: HiSoft Assembler.</i></p>

*** image ***
<p><i>Obrázek X: Slavný Prometheus od Proximy.</i></p>

*** image ***
<p><i>Obrázek X: Slavný Prometheus od Proximy.</i></p>

*** image ***
<p><i>Obrázek X: Verze Promethea pro ZX Spectrum 128k.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Instalace assembleru a emulátoru ZX Spectra</h2>

<p>Pro vývoj pro ZX Spectrum je zapotřebí minimum prostředků:</p>

<ol>
<li>Programátorský textový editor (libovolný)</li>
<li>Cross assembler</li>
<li>Emulátor ZX Spectra</li>
<li>Debugger (bývá součástí emulátoru)</li>
</ol>

<p>Cross assemblerů pro ZX Spectrum existuje větší množství. V&nbsp;tomto
(mini)seriálu použijeme assembler nazvaný <a
href="https://pasmo.speccy.org/">Pasmo</a>, mezi jehož užitečné vlastnosti
patří fakt, že dokáže generovat přímo obrazy programu tak, jak jsou uloženy na
kazetě a dokonce pro programátora dokáže připravit BASICovský
&bdquo;loader&ldquo;, jenž zajistí automatické načtení a popř.&nbsp;i spuštění
programu.</p>

<p>Assembler <i>Pasmo</i> je možné nalézt ve standardních balíčcích, takže jeho
instalace je přímočará (zde uvádím instalaci pro Linux Mint, ovšem na jiných
distribucích bude průběh podobný):</p>

<pre>
$ <strong>sudo apt-get install pasmo</strong>
&nbsp;
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  pasmo
0 upgraded, 1 newly installed, 0 to remove and 4 not upgraded.
Need to get 124 kB of archives.
After this operation, 380 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu focal/universe amd64 pasmo amd64 0.5.3-6build2 [124 kB]
Fetched 124 kB in 1s (117 kB/s)
Selecting previously unselected package pasmo.
(Reading database ... 293573 files and directories currently installed.)
Preparing to unpack .../pasmo_0.5.3-6build2_amd64.deb ...
Unpacking pasmo (0.5.3-6build2) ...
Setting up pasmo (0.5.3-6build2) ...
Processing triggers for man-db (2.9.1-1) ...
Processing triggers for doc-base (0.10.9) ...
Processing 1 added doc-base file...
</pre>

<p>Nainstalujeme si i emulátor ZX Spectra. Těch opět existuje velké množství.
Z&nbsp;této velké nabídky jsem vybral <i>Fuse</i> neboli <i>Free Unix Spectrum
Emulator</i> (<a href="https://fuse-emulator.sourceforge.net/">Fuse</a>), který
mj.&nbsp;obsahuje i vestavěný debugger. Fuse bývá doplněn o GUI vytvořené
v&nbsp;Gnome nebo zobrazované přímo přes SDL. Nainstalujme si druhou variantu,
tedy Fuse, jehož GUI je naprogramováno v&nbsp;SDL:</p>

<pre>
$ <strong>sudo apt-get install fuse-emulator-sdl</strong>
&nbsp;
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  fuse-emulator-common libaudiofile1 libspectrum8 opense-basic
Suggested packages:
  spectrum-roms fuse-emulator-utils
The following NEW packages will be installed:
  fuse-emulator-common fuse-emulator-sdl libaudiofile1 libspectrum8
  opense-basic
0 upgraded, 5 newly installed, 0 to remove and 4 not upgraded.
Need to get 898 kB of archives.
After this operation, 2 482 kB of additional disk space will be used.
Do you want to continue? [Y/n] y
</pre>

<p><div class="rs-tip-major">Poznámka: emulátor obsahuje i <a
href="https://zxdesign.itch.io/opense">OpenSE BASIC</a>, který nahrazuje
originální licencovaný hardware (viz <a
href="https://archive.org/details/zx-roms-fuse-roms">1</a>). To znamená, že i
přes určité rozdíly bude možné naše demonstrační programy načíst a
spustit.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. První program v&nbsp;assembleru: změna barvového atributu v&nbsp;levém horním rohu obrazovky</h2>

<pre>
        org $8000

start:
        ld a,%00010000
        ld ($5800),a
        ret
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Překlad do strojového kódu a uložení výsledku ve formátu <i>tap</i></h2>

<p>Překlad <a href="#k11">výše uvedeného</a> kódu napsaného v&nbsp;assembleru
do strojového kódu je snadný. K&nbsp;tomuto účelu použijeme assembler
<i>pasmo</i>, kterému předáme přepínač <strong>--tap</strong>, aby výsledkem
překladu byl soubor s&nbsp;obrazem magnetofonového záznamu, který bude mít
koncovku &bdquo;.tap&ldquo;. Současně si necháme &bdquo;vylistovat&ldquo;
výsledek do souboru s&nbsp;koncovkou &bdquo;.lst&ldquo;:</p>

<pre>
$ <strong>pasmo -v -d --tap 01-color-attribute.asm 01.tap &gt;01.lst</strong>
</pre>

<p>Assembler vypíše průběh překladu, z&nbsp;něhož je patrné, že se použily dva
průchody &ndash; první pro zjištění adres s&nbsp;vygenerováním mezikódu, druhý
pro doplnění všech adres do výsledného binárního kódu:</p>

<pre>
Loading file: 01-color-attribute.asm in 0
Finished loading file: 01-color-attribute.asm in 6
Entering pass 1
Pass 1 finished
Entering pass 2
Pass 2 finished
</pre>

<p>A takto vypadá soubor &bdquo;01.lst&ldquo;, který obsahuje výsledek překladu
v&nbsp;čitelné podobě, a to již s&nbsp;expandovanými makry, doplněnými symboly
a vypočtenými adresami. U každého řádku je rovněž v&nbsp;hexadecimální podobě
vypsán odpovídající strojový kód:</p>

<pre>
                ORG 8000
8000:           label start
8000:3E10       LD A, 10
8002:320058     LD (5800), A
8005:C9         RET
Emiting TAP from 8000 to 8005
</pre>

<p><div class="rs-tip-major">Poznámka: délka výsledného strojového kódu je tedy
rovna šesti bajtům.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Načtení a spuštění příkladu v&nbsp;emulátoru ZX Spectra</h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
        org $8000

start:
        ld a,%11010110
        ld ($5800),a
        ret
</pre>

<p></p>

<pre>
                ORG 8000
8000:           label start
8000:3ED6       LD A, D6
8002:320058     LD (5800), A
8005:C9         RET
Emiting TAP from 8000 to 8005
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
attribute_adr equ $5800
entry_point   equ $8000


        org entry_point

start:
        ld a,%11010110
        ld (attribute_adr),a
        ret
</pre>

<p></p>

<pre>
attribute_adr   EQU 5800
entry_point     EQU 8000
                ORG 8000
8000:           label start
8000:3ED6       LD A, D6
8002:320058     LD (5800), A
8005:C9         RET
Emiting TAP from 8000 to 8005
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
attribute_adr equ $5800
entry_point   equ $8000

blink_bit     equ %10000000
intensity_bit equ %01000000
black_color   equ %000
blue_color    equ %001
red_color     equ %010
magenta_color equ %011
green_color   equ %100
cyan_color    equ %101
yellow_color  equ %110
white_color   equ %111


        org entry_point

start:
        ld a,blink_bit | intensity_bit | (blue_color << 3) | white_color
        ld (attribute_adr),a
        ret
</pre>

<p></p>

<pre>
attribute_adr   EQU 5800
entry_point     EQU 8000
blink_bit       EQU 0080
intensity_bit   EQU 0040
black_color     EQU 0000
blue_color      EQU 0001
red_color       EQU 0002
magenta_color   EQU 0003
green_color     EQU 0004
cyan_color      EQU 0005
yellow_color    EQU 0006
white_color     EQU 0007
                ORG 8000
8000:           label start
8000:3ECF       LD A, CF
8002:320058     LD (5800), A
8005:C9         RET
Emiting TAP from 8000 to 8005
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000

BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111


        org ENTRY_POINT

start:
        ld a,BLINK_BIT | INTENSITY_BIT | (BLUE_COLOR << 3) | WHITE_COLOR
        ld (ATTRIBUTE_ADR),a
        ret
</pre>

<p></p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
                ORG 8000
8000:           label start
8000:3ECF       LD A, CF
8002:320058     LD (5800), A
8005:C9         RET
Emiting TAP from 8000 to 8005
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>

<pre>
ASSEMBLER := pasmo
&nbsp;
all: 01.tap 02.tap 03.tap 04.tap 05.tap 06.tap 07.tap
&nbsp;
clean:
        rm -f *.tap
&nbsp;
.PHONY: all clean
&nbsp;
01.tap: 01-color-attribute.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 01-color-attribute.lst
&nbsp;
02.tap: 02-blinking-attribute.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 02-blinking-attribute.lst
&nbsp;
03.tap: 03-symbolic-names.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 03-symbolic-names.lst
&nbsp;
04.tap: 04-operators.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 04-operators.lst
&nbsp;
05.tap: 05-better-symbols.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 05-better-symbols.lst
&nbsp;
06.tap: 06-tapbas-v1.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 06-tapbas-v1.lst
&nbsp;
07.tap: 07-tapbas-v2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 07-tapbas-v2.lst
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
prozatím popsané demonstrační příklady určené pro překlad a spuštění na
osmibitovém domácím mikropočítači ZX Spectrum (libovolný model či jeho klon),
které jsou psány v&nbsp;assembleru mikroprocesoru Zilog Z80. Pro překlad těchto
demonstračních příkladů je možné použít například assembler <i>Pasmo</i>:</p>

<table>
<tr><th>#</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>01-color-attribute.asm</td><td>modifikace jednoho barvového atributu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm</a></td></tr>
<tr><td>2</td><td>02-blinking-attribute.asm</td><td>barvový atribut s&nbsp;nastavením bitů pro blikání a vyšší intenzitu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm</a></td></tr>
<tr><td>3</td><td>03-symbolic-names.asm</td><td>symbolická jména v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm</a></td></tr>
<tr><td>4</td><td>04-operators.asm</td><td>operátory a operace se symbolickými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm</a></td></tr>
<tr><td>5</td><td>05-better-symbols.asm</td><td>tradičnější symbolická jména</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm</a></td></tr>
<tr><td>6</td><td>06-tapbas-v1.asm</td><td>vygenerování BASICovského loaderu (neúplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm</a></td></tr>
<tr><td>7</td><td>07-tapbas-v2.asm</td><td>vygenerování BASICovského loaderu (úplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>8</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>Z80 Assembly Language for the ZX Spectrum Tutorial, Episode 1: The Basics<br />
<a href="https://www.youtube.com/watch?v=_J4ahkWtNYw">https://www.youtube.com/watch?v=_J4ahkWtNYw</a>
</li>

<li>Z80 assembly resources when starting programming in assembler<br />
<a href="https://www.youtube.com/watch?v=mjLHSnQmHV4">https://www.youtube.com/watch?v=mjLHSnQmHV4</a>
</li>

<li>Setting up Visual Studio Code with Pasmo, Sprite Example ZX Spectrum Next<br />
<a href="https://www.youtube.com/watch?v=lKDaFWPObLY">https://www.youtube.com/watch?v=lKDaFWPObLY</a>
</li>

<li>RetroCoder ZX Spectrum development (Z80 Assembly)- Day 1 - Hello World.asm<br />
<a href="https://www.youtube.com/watch?v=Xv6NAC--x24">https://www.youtube.com/watch?v=Xv6NAC--x24</a>
</li>

<li>Rozšíření paměti<br />
<a href="https://wiki.ilnx.cz/doku.php/lnxspectrum:memorymap">https://wiki.ilnx.cz/doku.php/lnxspectrum:memorymap</a>
</li>

<li>ZX-Spectrum 48K video memory map<br />
<a href="https://www.reddit.com/r/zxspectrum/comments/phi7lt/zxspectrum_48k_video_memory_map/">https://www.reddit.com/r/zxspectrum/comments/phi7lt/zxspectrum_48k_video_memory_map/</a>
</li>

<li>Memory Map: 48K Spectrum<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/memory-map">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/memory-map</a>
</li>

<li>ZX Basic: Git repository<br />
<a href="https://github.com/boriel/zxbasic">https://github.com/boriel/zxbasic</a>
</li>

<li>ZX Basic Wiki<br />
<a href="https://zxbasic.readthedocs.io/en/docs/">https://zxbasic.readthedocs.io/en/docs/</a>
</li>

<li>ZX Spectrum Games: svět osmibitové herní legendy<br />
<a href="https://www.zx-spectrum.cz/">https://www.zx-spectrum.cz/</a>
</li>

<li>TAP format<br />
<a href="https://sinclair.wiki.zxnet.co.uk/wiki/TAP_format">https://sinclair.wiki.zxnet.co.uk/wiki/TAP_format</a>
</li>

<li>Contended memory<br />
<a href="https://worldofspectrum.org/faq/reference/48kreference.htm#Contention">https://worldofspectrum.org/faq/reference/48kreference.htm#Contention</a>
</li>

<li>Screen Memory Layout<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/screen-memory-layout">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/screen-memory-layout</a>
</li>

<li>OpenSE BASIC<br />
<a href="https://zxdesign.itch.io/opense">https://zxdesign.itch.io/opense</a>
</li>

<li>Domácí a školní mikropočítače řady Didaktik<br />
<a href="https://www.root.cz/clanky/domaci-a-skolni-mikropocitace-rady-didaktik/">https://www.root.cz/clanky/domaci-a-skolni-mikropocitace-rady-didaktik/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

