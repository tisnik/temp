<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Matematické koprocesory na platformě x86: vše se komplikuje</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Matematické koprocesory na platformě x86: vše se komplikuje</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Práce s hodnotami s plovoucí řádovou čárkou sice může vypadat jednoduše, ovšem není tomu tak, protože se musí pracovat s nekonečny, hodnotami NaN atd. A navíc musí FPU nějakým způsobem spolupracovat se samotným mikroprocesorem. To jsou témata dnešního článku.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Matematické koprocesory na platformě x86: vše se komplikuje</a></p>
<p><a href="#k02">2. Příznaky a výjimky při provádění celočíselných operací</a></p>
<p><a href="#k03">3. Výjimky, které mohou nastat při manipulaci s&nbsp;hodnotami s&nbsp;plovoucí řádovou čárkou</a></p>
<p><a href="#k04">4. Výjimky a příznaky uložené ve stavovém slově matematického koprocesoru</a></p>
<p><a href="#k05">5. První demonstrační příklad: výjimky <strong>IE</strong> a <strong>ZO</strong></a></p>
<p><a href="#k06">6. Druhý demonstrační příklad: výjimka <strong>OE</strong></a></p>
<p><a href="#k07">7. Příznakové bity <strong>C0</strong>, <strong>C1</strong>, <strong>C2</strong> a <strong>C3</strong></a></p>
<p><a href="#k08">8. Třetí demonstrační příklad: instrukce <strong>FTST</strong></a></p>
<p><a href="#k09">9. Čtvrtý demonstrační příklad: instrukce <strong>FXAM</strong></a></p>
<p><a href="#k10">10. Varianty instrukce <strong>FCOM</strong> pro porovnání dvou operandů</a></p>
<p><a href="#k11">11. Pátý demonstrační příklad: porovnání dvou hodnot instrukcí <strong>FCOM(PP)</strong></a></p>
<p><a href="#k12">12. Vztah mezi příznakovými bity FPU a CPU</a></p>
<p><a href="#k13">13. Mapování mezi stavovými bity matematického koprocesoru a příznakovými bity CPU</a></p>
<p><a href="#k14">14. Kopie příznakových bitů FPU do registru FLAGS s&nbsp;následným rozeskokem</a></p>
<p><a href="#k15">15. Zrychlené provedení kopie příznakových bitů matematickým koprocesorem Intel 80287</a></p>
<p><a href="#k16">16. Šestý demonstrační příklad: výsledek testu hodnoty uložené na vrcholu zásobníku</a></p>
<p><a href="#k17">17. Sedmý demonstrační příklad: plné porovnání dvojice hodnot na zásobníku</a></p>
<p><a href="#k18">18. Příloha: seznam všech instrukcí matematických koprocesorů řady 80x87</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Matematické koprocesory na platformě x86: vše se komplikuje</h2>

<p>Na předchozí dvojici článků o matematických koprocesorech na platformě x86
[<a
href="https://www.root.cz/clanky/matematicke-koprocesory-na-80-86-pro-vypocty-s-plovouci-radovou-carkou/">1</a>]
[<a
href="https://www.root.cz/clanky/matematicke-koprocesory-na-platforme-80x86-prakticky/">2</a>]
dnes navážeme. Prozatím již víme, jaké formáty numerických hodnot mohou
matematické koprocesory zpracovávat a taktéž známe základní instrukce pro
provádění různých aritmetických operací i pro výpočet transcendentních funkcí
(viz tabulka umístěná <a href="#k18">v&nbsp;příloze</a>). Ovšem při provádění
těchto operací může dojít k&nbsp;různým situacím, na které je vhodné určitým
způsobem reagovat. Může například nastat dělení nulou, může dojít
k&nbsp;přetečení či podtečení výsledné hodnoty, výsledkem může být
denormalizovaná hodnota (příliš blízko nuly) nebo dokonce může být samotná
prováděná operace nevalidní. I na takové situace je vhodné myslet.
S&nbsp;nadsázkou je totiž možné říct, že kvalita návrhu IEEE 754 (autorem je
profesor Kahan z&nbsp;Berkeley ve spolupráci s&nbsp;firmou Intel[*]) vede
k&nbsp;tomu, že se problémy buď vůbec neobjeví, nebo se objeví příliš
pozdě.</p>

<p><div class="rs-tip-major">[*] na tomto místě je vhodné znovu upozornit na
to, že celá platforma x86 je od začátku doprovázena různými berličkami a
narovnáváky na ohýbáky. To se týká i matematického koprocesoru (z&nbsp;pohledu
jeho komunikace se systémem), ovšem nikoli samotných formátů hodnot, provádění
matematických operací a reakcí na mezní stavy &ndash; zde je vidět kvalita
návrhu profesora Kahana a jeho studentů.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Příznaky a výjimky při provádění celočíselných operací</h2>

<p>Na chvíli se vraťme k&nbsp;&bdquo;jednoduchým&ldquo; celočíselným operacím,
například k&nbsp;operacím prováděným se šestnáctibitovými hodnotami uloženými
ve formátu dvojkového doplňku (<i>two's complement</i>). Při provádění takových
operací se nastavuje několik příznaků (<i>flags</i>) a může taktéž dojít
k&nbsp;výjimkám (<i>exceptions</i>). Připomeňme si nejprve, o jaké příznaky se
jedná právě na platformě x86:</p>

<table>
<tr><th>#</th><th>Příznak</th><th>Stručný popis příznaku</th></tr>
<tr><td>1</td><td>OF</td><td>příznak přetečení (<i>overflow</i>) do nejvyššího bitu</td></tr>
<tr><td>2</td><td>CF</td><td>příznak přenosu (<i>carry</i>) z&nbsp;nejvyššího bitu</td></tr>
<tr><td>3</td><td>AF</td><td>příznak přenosu ze třetího do čtvrtého bitu (<i>auxiliary carry</i>)</td></tr>
<tr><td>4</td><td>ZF</td><td>příznak nulovosti (<i>zero</i>)</td></tr>
<tr><td>5</td><td>SF</td><td>příznak znaménka (<i>sign</i>), tedy hodnota nejvyššího bitu</td></tr>
<tr><td>6</td><td>PF</td><td>příznak (bitové) parity</td></tr>
</table>

<p>Nastat taktéž mohou tři výjimky, které vedou k&nbsp;vyvolání přerušení
(<i>interrupt</i>). Na prvním místě je dělení nulou, s&nbsp;nímž se patrně
setkala většina vývojářů (ve vyšších programovacích jazycích je totiž většinou
vyvolána právě výjimka). Druhá výjimka může vzniknout po provedení instrukce
<strong>INTO</strong>, která testuje, zda nějaká předchozí instrukce nevedla
k&nbsp;přetečení výsledku. A třetí výjimka vznikne po provedení instrukce
<strong>BOUNDS</strong>, která zjišťuje, zda se testovaná hodnota nachází
v&nbsp;intervalu specifikovaném dolní a horní mezí. Tyto dvě instrukce byly na
platformě x86 implementovány proto, aby umožnily snadný překlad programů
v&nbsp;jazycích typu Pascal atd., v&nbsp;nichž se (obecně) meze kontrolují.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Výjimky, které mohou nastat při manipulaci s&nbsp;hodnotami s&nbsp;plovoucí řádovou čárkou</h2>

<p>Matematický koprocesor má taktéž svoji sadu příznaků a výjimek. Navíc je
možné výjimky maskovat, tj.&nbsp;specifikovat, jestli se má při vzniku výjimky
vyvolat přerušení či nikoli. Podívejme se nejdříve na všechny výjimky, které
jsou matematickým koprocesorem detekovány při manipulaci s&nbsp;hodnotami
s&nbsp;plovoucí řádovou čárkou:</p>

<table>
<tr><th>#</th><th>Označení</th><th>Význam</th></tr>
<tr><td>1</td><td>IE</td><td>výjimka Invalid Operation</td></tr>
<tr><td>2</td><td>DE</td><td>výjimka Denormalized Operand</td></tr>
<tr><td>3</td><td>ZE</td><td>výjimka Zero Divide</td></tr>
<tr><td>4</td><td>OE</td><td>výjimka Overflow</td></tr>
<tr><td>5</td><td>UE</td><td>výjimka Underflow</td></tr>
<tr><td>6</td><td>PE</td><td>výjimka Precision</td></tr>
</table>

<p>Výjimka <strong>IE</strong> (<i>Invalid Operation</i>) vznikne ve chvíli,
kdy dojde buď k&nbsp;přetečení nebo podtečení zásobníku. Ovšem taktéž k&nbsp;ní
může dojít v&nbsp;případě, že je výsledkem hodnota <strong>NaN</strong>, což je
například výpočet druhé odmocniny ze záporné hodnoty.</p>

<p>Výjimka <strong>DE</strong> (<i>Denormalized Error</i>) vznikne tehdy, pokud
je jeden z&nbsp;operandů prováděné operace <i>denormalizovaný</i> nebo pokud je
denormalizovaný výsledek (tedy blízký nule). To v&nbsp;důsledku znamená
sníženou přesnost výpočtů.</p>

<p>Výjimka <strong>ZE</strong> (<i>Zero Error</i>) vznikne při dělení nenulové
hodnoty nulou, což do jisté míry odpovídá i příslušné celočíselné výjimce
(ovšem na FPU dostaneme rozumný očekávaný výsledek &ndash; kladné nebo záporné
nekonečno).</p>

<p>Výjimka <strong>OE</strong> (<i>Overflow Error</i>) vznikne v&nbsp;případě,
že výsledek je příliš velký pro daný formát hodnot. Pokud je tato výjimka
maskována, bude výsledkem kladné či záporné nekonečno.</p>

<p>Naopak výjimka <strong>UE</strong> (<i>Underflow Error</i>) vznikne
v&nbsp;případě, že je výsledek operace naopak příliš malý a musí se provést
jeho denormalizace nebo je dokonce výsledkem nula.</p>

<p>Výjimka <strong>PE</strong> (<i>Precision Error</i>) vznikne tehdy, pokud je
výsledek nepřesný, tj.&nbsp;nelze přesně uložit do zvoleného formátu (zdaleka
ne všechny hodnoty je možné reprezentovat systémem
mantisa&times;2<sup>exponent</sup>).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výjimky a příznaky uložené ve stavovém slově matematického koprocesoru</h2>

<p>Potřetí a již naposledy si v&nbsp;tomto seriálu uvedeme tabulku
s&nbsp;popisem jednotlivých bitů stavového slova matematického koprocesoru.
Zajímat nás bude zejména prvních šest bitů, které obsahují právě indikaci toho,
že při provádění matematických operací došlo k&nbsp;nějaké výjimce popsané <a
href="#k03">v&nbsp;předchozí kapitole</a>. Ovšem zajímavý je i osmý bit
<strong>ES</strong>, který je nastaven na jedničku tehdy, pokud došlo
k&nbsp;libovolné výjimce (z&nbsp;předchozích šesti):</p>

<table>
<tr><th> #</th><th>Označení</th><th>Význam</th></tr>
<tr><td> 0</td><td>IE</td><td>výjimka Invalid Operation</td></tr>
<tr><td> 1</td><td>DE</td><td>výjimka Denormalized Operand</td></tr>
<tr><td> 2</td><td>ZE</td><td>výjimka Zero Divide</td></tr>
<tr><td> 3</td><td>OE</td><td>výjimka Overflow</td></tr>
<tr><td> 4</td><td>UE</td><td>výjimka Underflow</td></tr>
<tr><td> 5</td><td>PE</td><td>výjimka Precision</td></tr>
<tr><td> 6</td><td>SF</td><td>špatná manipulace se zásobníkem operandů</td></tr>
<tr><td> 7</td><td>ES</td><td>Error summary</td></tr>
<tr><td> 8</td><td>C0</td><td>výsledek porovnání (příznakový bit)</td></tr>
<tr><td> 9</td><td>C1</td><td>výsledek porovnání (příznakový bit)</td></tr>
<tr><td>10</td><td>C2</td><td>výsledek porovnání (příznakový bit)</td></tr>
<tr><td>11</td><td>ST0</td><td>ukazatel vrcholu zásobníku</td></tr>
<tr><td>12</td><td>ST1</td><td>ukazatel vrcholu zásobníku</td></tr>
<tr><td>13</td><td>ST2</td><td>ukazatel vrcholu zásobníku</td></tr>
<tr><td>14</td><td>C3</td><td>výsledek porovnání (příznakový bit)</td></tr>
<tr><td>15</td><td>B</td><td>busy bit (provádí se operace)</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: prozatím jsme se nezmínili o stavových
bitech, které jsou pojmenovány <strong>C0</strong> až <strong>C3</strong>. Je
tomu tak z&nbsp;toho důvodu, že význam těchto bitů se liší podle toho, jaká
operace (resp.&nbsp;přesněji řečeno instrukce) se provedla. K&nbsp;těmto bitům
se vrátíme v&nbsp;navazujících kapitolách.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. První demonstrační příklad: výjimky <strong>IE</strong> a <strong>ZE</strong></h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu si otestujeme chování
matematického koprocesoru v&nbsp;případě, že se provádí aritmetická operace
podílu a taktéž výpočet druhé odmocniny. Konkrétně při testování operace podílu
budeme postupně dělit hodnoty 0/1, 1/1, 1/0 a 0/0. A v&nbsp;případě výpočtu
druhé odmocniny budou do výpočtu vstupovat hodnoty 0, 1 a -1. Před každou
takovou operací navíc zavoláme (pomalou) instrukci <strong>FNINIT</strong>,
která matematický koprocesor nastaví do výchozího stavu:</p>

<pre>
<i>; Precteni stavoveho slova matematickeho koprocesoru</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        jmp main                   <i>; skok na zacatek kodu</i>
&nbsp;
%include "io.asm"                  <i>; nacist symboly, makra a podprogramy</i>
%include "print.asm"               <i>; nacist symboly, makra a podprogramy</i>
&nbsp;
<strong>main</strong>:
        fninit                     <i>; inicializace koprocesoru</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fdiv                       <i>; podíl 0/1</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fdiv                       <i>; podíl 1/1</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fdiv                       <i>; podíl 1/0</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fdiv                       <i>; podíl 0/0</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fldz
        fsqrt                      <i>; odmocnina z 0</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fsqrt                      <i>; odmocnina z 1</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fchs                       <i>; změna znaménka</i>
        fsqrt                      <i>; odmocnina z -1</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        wait_key                   <i>; cekani na klavesu</i>
        exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<strong>print_status_word</strong>:
        fnstsw word [test_word]    <i>; ulozeni stavoveho slova</i>
        mov ax, word [test_word]
        and ax, 0xff               <i>; zamaskovat bity, ktere neobsahuji priznaky chyb</i>
        print_hex_16 ax            <i>; tisk stavoveho slova v hexadecimalnim formatu</i>
        ret
&nbsp;
<i>; datova cast</i>
<strong>test_word</strong>: dw 0
</pre>

<p><div class="rs-tip-major">Poznámka: <strong>fnstsw</strong> vkládá před
instrukci ještě <strong>fwait</strong>.</div></p>

<p>Po spuštění tohoto demonstračního příkladu se vypíše obsah dolních osmi bitů
stavového slova mikroprocesoru, protože provádíme maskování instrukcí
<strong>and ax, 0xff</strong>). Podívejme se tedy nejenom na výsledné bity, ale
i na jejich význam resp.&nbsp;interpretaci:</p>

<table>
<tr><th>#</th><th>Provedená operace</th><th>Stavové slovo</th><th>Nastavené výjimky</th></tr>
<tr><td>1</td><td>0/1</td><td>0x0000</td><td>bez výjimek</td></tr>
<tr><td>2</td><td>1/1</td><td>0x0000</td><td>bez výjimek</td></tr>
<tr><td>3</td><td>1/0</td><td>0x0004</td><td><strong>ZE</strong> &ndash; Zero (Divide) Error</td></tr>
<tr><td>4</td><td>0/0</td><td>0x0001</td><td><strong>IE</strong> &ndash; Invalid Operation Error</td></tr>
<tr><td>5</td><td>&radic;0</td><td>0x0000</td><td>bez výjimek</td></tr>
<tr><td>6</td><td>&radic;1</td><td>0x0000</td><td>bez výjimek</td></tr>
<tr><td>7</td><td>&radic;-1</td><td>0x0001</td><td><strong>IE</strong> &ndash; Invalid Operation Error</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že při dělení 1/0 a
zejména 0/0 je nastavena jen jedna výjimka. Ve druhém případě (0/0) není
nastavena výjimka <strong>ZE</strong>, ale pouze <strong>IE</strong>, což
přesně odpovídá popisu výjimek.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý demonstrační příklad: výjimka <strong>OE</strong></h2>

<p>Dnešní druhý demonstrační příklad je v&nbsp;porovnání s&nbsp;předchozím
demonstračním příkladem nepatrně složitější. Budeme v&nbsp;něm zjišťovat,
jestli se nastavuje výjimka <strong>OE</strong>, která by měla indikovat takový
stav, kdy výsledná hodnota přesahuje rozsah daného formátu (single, double,
extended). Jak takového stavu dosáhneme? Budeme neustále opakovat programovou
smyčku, ve které se hodnota uložená na vrcholu zásobníku bude umocňovat. Na
začátku, tj.&nbsp;ještě před vstupem do programové smyčky, umístíme na zásobník
konstantu 2 a v&nbsp;každé iteraci tuto konstantu umocníme (na druhou) a
výsledek uložíme zpět na zásobník. Postupně se tedy bude pracovat
s&nbsp;hodnotami 2, 4, 16, 256, ..., což poměrně rychle vede k&nbsp;situaci,
kdy dojde k&nbsp;přetečení dostupného rozsahu.</p>

<p>Inicializace konstanty na vrcholu zásobníku:</p>

<pre>
fninit                     <i>; inicializace koprocesoru</i>
&nbsp;
fld1                       <i>; uložení konstanty 0 na zásobník</i>
fld1                       <i>; uložení konstanty 0 na zásobník</i>
faddp                      <i>; nyní je na zásobníku uložena hodnota 2</i>
</pre>

<p>Zajímavá je implementace programové smyčky, protože v&nbsp;ní vyžadujeme
výpočet druhé mocniny. Musíme tedy buď násobit hodnotu na vrcholu zásobníku
toutéž hodnotou (což je možné &ndash; druhý operand lze adresovat), nebo se
nejprve tato hodnota zduplikuje a poté se provede klasický součin. Vzhledem
k&nbsp;tomu, že matematický koprocesor (kupodivu) nemá instrukci pro duplikaci
hodnoty, použijeme trik &ndash; instrukci <strong>FLD ST(0)</strong>, která na
zásobník uloží nový prvek obsahující hodnotu přečtenou z&nbsp;původního vrcholu
zásobníku:</p>

<pre>
<strong>smycka1</strong>:
        fld st0                    <i>; duplikace hodnoty na vrcholu zásobníku</i>
        fmulp                      <i>; výpočet druhé mocniny</i>
        call print_status_word     <i>; tisk stavového slova</i>
        loop smycka1
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;assembleru NASM, který používáme,
se namísto zápisu <strong>ST(0)</strong> musí použít pouze
<strong>ST0</strong>, ovšem význam je stejný.</div></p>

<p>Podívejme se na úplný zdrojový kód tohoto demonstračního příkladu:</p>

<pre>
<i>; Precteni stavoveho slova matematickeho koprocesoru</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        jmp main                   <i>; skok na zacatek kodu</i>
&nbsp;
%include "io.asm"                  <i>; nacist symboly, makra a podprogramy</i>
%include "print.asm"               <i>; nacist symboly, makra a podprogramy</i>
&nbsp;
<strong>main</strong>:
        fninit                     <i>; inicializace koprocesoru</i>
&nbsp;
        fld1                       <i>; uložení konstanty 0 na zásobník</i>
        fld1                       <i>; uložení konstanty 0 na zásobník</i>
        faddp                      <i>; nyní je na zásobníku uložena hodnota 2</i>
&nbsp;
        mov cx, 20                 <i>; počet opakování smyčky</i>
<strong>smycka1</strong>:
        fld st0                    <i>; duplikace hodnoty na vrcholu zásobníku</i>
        fmulp                      <i>; výpočet druhé mocniny</i>
        call print_status_word     <i>; tisk stavového slova</i>
        loop smycka1
&nbsp;
        wait_key                   <i>; cekani na klavesu</i>
        exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<strong>print_status_word</strong>:
        fnstsw word [test_word]    <i>; ulozeni stavoveho slova</i>
        mov ax, word [test_word]
        and ax, 0xff               <i>; zamaskovat bity, ktere neobsahuji priznaky chyb</i>
        print_hex_16 ax            <i>; tisk stavoveho slova v hexadecimalnim formatu</i>
        ret
&nbsp;
<i>; datova cast</i>
<strong>test_word</strong>: dw 0
</pre>

<p>Po spuštění tohoto demonstračního příkladu se do DOSového okna vypíše
sekvence hodnot 0x00, která je následována hodnotou 0x28. Jaký je jejich
význam?</p>

<table>
<tr><th>#</th><th>Hodnota</th><th>Stavové slovo</th><th>Nastavené příznaky</th></tr>
<tr><td>1</td><td></td><td>0x00</td><td>bez výjimek</td></tr>
<tr><td>2</td><td></td><td>0x28</td><td>výjimka <strong>OE</strong> + nastavení příznakového bitu <strong>C1</strong></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: podobně by bylo možné získat i výjimku
v&nbsp;případě podtečení výsledku. Například lze na zásobník uložit nějakou
dostatečně malou konstantu a tu postupně dělit stejnými hodnotami, jaké jsme
vypočetli v&nbsp;tomto příkladu (2, 4, 16, ...).</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Příznakové bity <strong>C0</strong>, <strong>C1</strong>, <strong>C2</strong> a <strong>C3</strong></h2>

<p>Matematický koprocesor neobsahuje příznakové bity, které by přímo odpovídaly
příznakovým bitům hlavního procesoru &ndash; tedy zejména <strong>ZF</strong>,
<strong>OF</strong> a <strong>SF</strong> (postupně: příznak nulovosti, příznak
přenosu a příznak znaménka). Namísto toho mají programátoři k&nbsp;dispozici
čtveřici příznakových bitů s&nbsp;nicneříkajícími zkratkami
<strong>C0</strong>, <strong>C1</strong>, <strong>C2</strong> a
<strong>C3</strong>. Proč tomu tak je? Tyto příznaky totiž mají odlišný význam,
který závisí na tom, jaká instrukce je nastavuje. Ukažme si to na trojici
instrukcí.</p>

<p>První instrukcí je instrukce nazvaná <strong>FTST</strong>, která testuje
obsah hodnoty uložené na vrcholu zásobníku a nastavuje příznakové bity
následovně:</p>

<table>
<tr><th>C3</th><th>C2</th><th>C0</th><th>odpovídá stavu</th></tr>
<tr><td>0</td><td>0</td><td>0</td><td>ST(0) &gt; 0</td></tr>
<tr><td>0</td><td>0</td><td>1</td><td>ST(0) &lt; 0</td></tr>
<tr><td>1</td><td>0</td><td>0</td><td>ST(0) = 0</td></tr>
<tr><td>1</td><td>1</td><td>1</td><td>ST(0) ? 0 (neporovnatelné hodnoty)</td></tr>
</table>

<p>Podobně se chová instrukce <strong>FCOM</strong>, která porovnává dvojici
hodnot:</p>

<table>
<tr><th>C3</th><th>C2</th><th>C0</th><th>odpovídá stavu</th></tr>
<tr><td>0</td><td>0</td><td>0</td><td>ST(0) &gt; druhý operand</td></tr>
<tr><td>0</td><td>0</td><td>1</td><td>ST(0) &lt; druhý operand</td></tr>
<tr><td>1</td><td>0</td><td>0</td><td>ST(0) = druhý operand</td></tr>
<tr><td>1</td><td>1</td><td>1</td><td>ST(0) ? druhý operand (neporovnatelné hodnoty)</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: pokud je C2==1, tak jsou vždy i další
dva příznaky nastaveny; proto jsou tabulky kratší.</div></p>

<p>Naprosto odlišný je ovšem význam těchto bitů u instrukce
<strong>FXAM</strong>, která opět (podobně jako <strong>FTST</strong>) testuje
hodnotu uloženou na vrcholu zásobníku. Nyní může nastat sedm kombinací:</p>

<table>
<tr><th>C3</th><th>C2</th><th>C0</th><th>odpovídá stavu</th></tr>
<tr><td>0</td><td>0</td><td>0</td><td>nepodporováno</td></tr>
<tr><td>0</td><td>0</td><td>1</td><td>ST(0) obsahuje NaN</td></tr>
<tr><td>0</td><td>1</td><td>0</td><td>běžná hodnota (normalizovaná)</td></tr>
<tr><td>0</td><td>1</td><td>1</td><td>libovolné nekonečno</td></tr>
<tr><td>1</td><td>0</td><td>0</td><td>ST(0) obsahuje nulu</td></tr>
<tr><td>1</td><td>0</td><td>1</td><td>prázdný zásobník</td></tr>
<tr><td>1</td><td>1</td><td>0</td><td>denormalizovaná hodnota</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: navíc příznakový bit <strong>C1</strong>
obsahuje znaménko testované hodnoty, pokud se tedy nejedná o NaN, prázdný
zásobník nebo o nepodporovanou operaci.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Třetí demonstrační příklad: instrukce <strong>FTST</strong></h2>

<p>Vyzkoušejme si nyní chování instrukce <strong>FTST</strong>, tedy konkrétně
to, jaké nastavuje příznakové bity v&nbsp;závislosti na testované hodnotě.
Samotný zdrojový kód tohoto demonstračního příkladu je jednoduchý:</p>

<pre>
<i>; Precteni stavoveho slova matematickeho koprocesoru</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        jmp main                   <i>; skok na zacatek kodu</i>
&nbsp;
%include "io.asm"                  <i>; nacist symboly, makra a podprogramy</i>
%include "print.asm"               <i>; nacist symboly, makra a podprogramy</i>
&nbsp;
<strong>main</strong>:
        fninit                     <i>; inicializace koprocesoru</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        ftst
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        ftst
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fldpi                      <i>; uložení konstanty Pi na zásobník</i>
        ftst
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fchs                       <i>; změna znaménka původní konstanty 1</i>
        ftst
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fldz
        fdiv                       <i>; podíl 1/0</i>
        ftst
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fldz
        fldz
        fdiv                       <i>; podíl 0/0</i>
        ftst
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fchs                       <i>; změna znaménka</i>
        fsqrt                      <i>; odmocnina z -1</i>
        ftst
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        wait_key                   <i>; cekani na klavesu</i>
        exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<strong>print_status_word</strong>:
        fnstsw word [test_word]    <i>; ulozeni stavoveho slova</i>
        mov ax, word [test_word]
        print_hex_16 ax            <i>; tisk stavoveho slova v hexadecimalnim formatu</i>
        ret
&nbsp;
<i>; datova cast</i>
<strong>test_word</strong>: dw 0
</pre>

<p>Podívejme se nyní na to, jaké výsledky získáme po spuštění tohoto
příkladu a jak je lze vlastně interpretovat:</p>

<table>
<tr><th>Testovaná hodnota</th><th>Stavové slovo</th><th>C3</th><th>C2</th><th>C0</th><th>Interpretace</th></tr>
<tr><td>0.0      </td><td>0x7800</td><td>1</td><td>0</td><td>0</td><td>ST(0) = 0</td></tr>
<tr><td>1.0      </td><td>0x3800</td><td>0</td><td>0</td><td>0</td><td>ST(0) &gt; 0</td></tr>
<tr><td>&pi;     </td><td>0x3800</td><td>0</td><td>0</td><td>0</td><td>ST(0) &gt; 0</td></tr>
<tr><td>-1.0     </td><td>0x3900</td><td>0</td><td>0</td><td>1</td><td>ST(0) &lt; 0</td></tr>
<tr><td>1/0      </td><td>0x3804</td><td>0</td><td>0</td><td>0</td><td>ST(0) &gt; 0</td></tr>
<tr><td>0/0      </td><td>0x7D01</td><td>1</td><td>1</td><td>1</td><td>ST(0) ? 0 (neporovnatelné hodnoty)</td></tr>
<tr><td>&radic;-1</td><td>0x7D01</td><td>1</td><td>1</td><td>1</td><td>ST(0) ? 0 (neporovnatelné hodnoty)</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že nekonečno je
v&nbsp;tomto případě chápáno jako běžná hodnota, která je buď menší nebo naopak
větší než nula.</div></p>

<p><div class="rs-tip-major">Poznámka: dále stojí za povšimnutí, že některé
instrukce taktéž nastavují bity s&nbsp;informacemi o výjimkách, které vznikly.
To se týká především dvou posledních řádků s&nbsp;neporovnatelnými
hodnotami.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Čtvrtý demonstrační příklad: instrukce <strong>FXAM</strong></h2>

<p>Čtvrtý demonstrační příklad se do jisté míry podobá příkladu <a
href="#k08">předchozímu</a>, protože v&nbsp;něm taktéž testujeme hodnotu
uloženou na vrcholu zásobníku. Nyní ovšem pro test hodnoty použijeme namísto
instrukce <strong>FTST</strong> instrukci <strong>FXAM</strong>, která
nastavuje příznakové bity zcela odlišným způsobem dle tabulky uvedené <a
href="#07">v&nbsp;sedmé kapitole</a>. Nejdříve se podívejme na zdrojový kód
tohoto příkladu:</p>

<pre>
<i>; Precteni stavoveho slova matematickeho koprocesoru</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        jmp main                   <i>; skok na zacatek kodu</i>
&nbsp;
%include "io.asm"                  <i>; nacist symboly, makra a podprogramy</i>
%include "print.asm"               <i>; nacist symboly, makra a podprogramy</i>
&nbsp;
<strong>main</strong>:
        fninit                     <i>; inicializace koprocesoru</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fxam
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fxam
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fldpi                      <i>; uložení konstanty Pi na zásobník</i>
        fxam
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fchs                       <i>; změna znaménka původní konstanty 1</i>
        fxam
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fldz
        fdiv                       <i>; podíl 1/0</i>
        fxam
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fldz
        fldz
        fdiv                       <i>; podíl 0/0</i>
        fxam
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fchs                       <i>; změna znaménka</i>
        fsqrt                      <i>; odmocnina z -1</i>
        fxam
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        wait_key                   <i>; cekani na klavesu</i>
        exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
print_status_word:
        fnstsw word [test_word]    <i>; ulozeni stavoveho slova</i>
        mov ax, word [test_word]
        print_hex_16 ax            <i>; tisk stavoveho slova v hexadecimalnim formatu</i>
        ret
&nbsp;
<i>; datova cast</i>
<strong>test_word</strong>: dw 0
</pre>

<p>Podívejme se nyní opět na to, jaké výsledky získáme po spuštění tohoto
příkladu a jak je lze vlastně interpretovat:</p>

<table>
<tr><th>Testovaná hodnota</th><th>Stavové slovo</th><th>C3</th><th>C2</th><th>C1</th><th>C0</th><th>Interpretace</th></tr>
<tr><td>0.0      </td><td>0x7800</td><td>1</td><td>0</td><td>0</td><td>0</td><td>ST(0) obsahuje nulu</td></tr>
<tr><td>1.0      </td><td>0x3C00</td><td>0</td><td>1</td><td>0</td><td>0</td><td>běžná hodnota (normalizovaná)</td></tr>
<tr><td>&pi;     </td><td>0x3C00</td><td>0</td><td>1</td><td>0</td><td>0</td><td>běžná hodnota (normalizovaná)</td></tr>
<tr><td>-1.0     </td><td>0x3E00</td><td>0</td><td>1</td><td>1</td><td>0</td><td>běžná záporná hodnota</td></tr>
<tr><td>1/0      </td><td>0x3D04</td><td>0</td><td>1</td><td>0</td><td>1</td><td>libovolné nekonečno</td></tr>
<tr><td>0/0      </td><td>0x3B01</td><td>0</td><td>0</td><td>1</td><td>1</td><td>ST(0) obsahuje NaN</td></tr>
<tr><td>&radic;-1</td><td>0x3B01</td><td>0</td><td>0</td><td>1</td><td>1</td><td>ST(0) obsahuje NaN</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: z&nbsp;výsledků je patrné, že se
instrukce <strong>FXAM</strong> chová podle její specifikace. A taktéž
připomínám, že poslední tři řádky obsahují výsledky, v&nbsp;nichž jsou
nastaveny i bity s&nbsp;informacemi o výjimce, která nastala (a které jsme
neresetovali na nulu).</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Varianty instrukce <strong>FCOM</strong> pro porovnání dvou operandů</h2>

<p>V&nbsp;pořadí již pátém demonstračním příkladu si ukážeme použití jedné
varianty instrukce <strong>FCOM</strong>, která porovná dva operandy (získané
ze zásobníku nebo z ST0 a jiného zdroje) a nastaví příslušné příznakové bity.
Pokud ovšem využíváme pracovní registry matematického koprocesoru opravdu ve
významu zásobníku, budeme mnohdy potřebovat, aby se tato instrukce chovala
třemi různými způsoby:</p>

<ol>
<li>Oba porovnávané operandy budou na zásobníku ponechány</li>
<li>Jeden z&nbsp;operandů je odstraněn</li>
<li>Oba operandy jsou odstraněny (nezajímají nás jiné výsledky, než výsledky relační operace).</li>
</ol>

<p>Z&nbsp;tohoto důvodu instrukce <strong>FCOM</strong> existuje ve třech
variantách, které postupně odpovídají všem třem očekávaným způsobům chování:
<strong>FCOM</strong>, <strong>FCOMP</strong> a <strong>FCOMPP</strong>. Navíc
ještě dokáže matematický koprocesor pracovat i s&nbsp;celočíselnými hodnotami,
a to včetně jejich porovnání. Proto v&nbsp;instrukčním souboru najdeme i
instrukce pro celočíselné porovnávání: <strong>FICOM</strong> a
<strong>FICOMP</strong>. Později navíc byly přidány varianty pro porovnání
operandů, které mohou mít hodnotu QNAN (&bdquo;tiché NaN&ldquo;, tedy takové
hodnoty, které lze předávat do dalších instrukcí, aniž by došlo
k&nbsp;signalizaci výjimky).</p>

<p>Na pozdějších variantách matematických koprocesorů (od 80387) tedy máme
k&nbsp;dispozici celou řadu funkcí pro porovnání operandů. Tyto funkce ovšem
nastavují stejné příznakové bity s&nbsp;jejich totožným významem:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Operandy</th><th>Odstranění ze zásobníku</th><th>Podpora QNaN</th></tr>
<tr><td> 1</td><td>FCOM   </td><td>s&nbsp;plovoucí čárkou</td><td>žádný</td><td>ne</td></tr>
<tr><td> 2</td><td>FCOMP  </td><td>s&nbsp;plovoucí čárkou</td><td>jeden</td><td>ne</td></tr>
<tr><td> 3</td><td>FCOMPP </td><td>s&nbsp;plovoucí čárkou</td><td>oba dva</td><td>ne</td></tr>
<tr><td> 4</td><td>FUCOM  </td><td>s&nbsp;plovoucí čárkou</td><td>žádný</td><td>ano</td></tr>
<tr><td> 5</td><td>FUCOMP </td><td>s&nbsp;plovoucí čárkou</td><td>jeden</td><td>ano</td></tr>
<tr><td> 6</td><td>FUCOMPP</td><td>s&nbsp;plovoucí čárkou</td><td>oba dva</td><td>ano</td></tr>
<tr><td> 7</td><td>FICOM  </td><td>celočíselný první operand</td><td>žádný</td><td>ne</td></tr>
<tr><td> 8</td><td>FICOMP </td><td>celočíselný první operand</td><td>jeden</td><td>ne</td></tr>
<tr><td> 9</td><td>FUCOMI </td><td>celočíselný první operand</td><td>žádný</td><td>ano</td></tr>
<tr><td>10</td><td>FUCOMIP</td><td>celočíselný první operand</td><td>jeden<td><td>ano</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: jaký to rozdíl v&nbsp;porovnání
s&nbsp;jedinou celočíselnou porovnávací operací <strong>CMP</strong>!</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pátý demonstrační příklad: porovnání dvou hodnot instrukcí <strong>FCOM(PP)</strong></h2>

<p>V&nbsp;dalším demonstračním příkladu si ukážeme použití instrukce
<strong>FCOM</strong>, přesněji řečeno její varianty <strong>FCOMPP</strong>,
která ze zásobníku odstraňuje oba porovnávané operandy. V&nbsp;programu vždy
provedeme inicializaci matematického koprocesoru, následně na zásobník uložíme
dvě hodnoty, porovnáme je instrukcí <strong>FCOMPP</strong> a necháme si vypsat
stavové slovo koprocesoru. Opět se bude jednat o typické i
&bdquo;zajímavé&ldquo; hodnoty:</p>

<pre>
<i>; Precteni stavoveho slova matematickeho koprocesoru</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        jmp main                   <i>; skok na zacatek kodu</i>
&nbsp;
%include "io.asm"                  <i>; nacist symboly, makra a podprogramy</i>
%include "print.asm"               <i>; nacist symboly, makra a podprogramy</i>
&nbsp;
<strong>main</strong>:
        fninit                     <i>; inicializace koprocesoru</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich následným odstraněním ze zásobníku</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich následným odstraněním ze zásobníku</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich následným odstraněním ze zásobníku</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich následným odstraněním ze zásobníku</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fdivp                      <i>; na zásobník se uloží nekonečno</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich následným odstraněním ze zásobníku</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fchs                       <i>; změna znaménka</i>
        fsqrt                      <i>; odmocnina z -1</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich následným odstraněním ze zásobníku</i>
        call print_status_word     <i>; tisk stavového slova</i>
&nbsp;
        wait_key                   <i>; cekani na klavesu</i>
        exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<strong>print_status_word</strong>:
        fnstsw word [test_word]    <i>; ulozeni stavoveho slova</i>
        mov ax, word [test_word]
        print_hex_16 ax            <i>; tisk stavoveho slova v hexadecimalnim formatu</i>
        ret
&nbsp;
<i>; datova cast</i>
<strong>test_word</strong>: dw 0
</pre>

<p>Výsledky i jejich interpretace jsou vypsány v&nbsp;tabulce:</p>

<table>
<tr><th>Pravý operand</th><th>Levý operand</th><th>Stavové slovo</th><th>C3</th><th>C2</th><th>C0</th><th>Interpretace</th></tr>
<tr><td>0        </td><td>0</td><td>0x4000</td><td>1</td><td>0</td><td>0</td><td>0 = 0</td></tr>
<tr><td>1        </td><td>1</td><td>0x4000</td><td>1</td><td>0</td><td>0</td><td>0 = 0</td></tr>
<tr><td>1        </td><td>0</td><td>0x0100</td><td>0</td><td>0</td><td>1</td><td>0 &lt; 1</td></tr>
<tr><td>0        </td><td>1</td><td>0x0000</td><td>0</td><td>0</td><td>0</td><td>1 &gt; 0</td></tr>
<tr><td>1/0      </td><td>1</td><td>0x0104</td><td>0</td><td>0</td><td>1</td><td>1 &lt; nekonečno</td></tr>
<tr><td>&radic;-1</td><td>0</td><td>0x4501</td><td>1</td><td>1</td><td>1</td><td>neporovnatelné hodnoty</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: opět si povšimněte, že se
v&nbsp;posledních dvou případech nastavují i příznaky výjimek.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vztah mezi příznakovými bity FPU a CPU</h2>

<p>Pokud se podíváte na tabulku s&nbsp;příznakovými bity uloženými ve stavovém
slově matematického koprocesoru (<a href="#k04">čtvrtá kapitola</a>), asi se
ptáte, proč jsou vlastně tyto příznakové bity uloženy &bdquo;zpřeházeně&ldquo;
s&nbsp;dalšími bitovými poli, které již s&nbsp;příznaky hodnot a operací
nesouvisí. Rozmístění těchto příznakových bitů není náhodné, protože souvisí
s&nbsp;příznakovým registrem samotného mikroprocesoru. Tento registr se jmenuje
<strong>FLAGS</strong>, má šířku šestnácti bitů a jednotlivé bity mají
následující význam:</p>

<table>
<tr><th>Bit</th><th>Příznak</th><th>Stručný popis příznaku</th></tr>
<tr><td> 0</td><td>CF</td><td>příznak přenosu (<i>carry</i>)</td></tr>
<tr><td> 1</td><td>&times;</td><td>rezervováno</td></tr>
<tr><td> 2</td><td>PF</td><td>příznak (bitové) parity</td></tr>
<tr><td> 3</td><td>&times;</td><td>rezervováno</td></tr>
<tr><td> 4</td><td>AF</td><td>příznak přenosu ze třetího do čtvrtého bitu (<i>auxiliary carry</i>)</td></tr>
<tr><td> 5</td><td>&times;</td><td>rezervováno</td></tr>
<tr><td> 6</td><td>ZF</td><td>příznak nulovosti (<i>zero</i>)</td></tr>
<tr><td> 7</td><td>SF</td><td>příznak znaménka (<i>sign</i>)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>TF</td><td>příznak nastavený při krokování</td></tr>
<tr><td> 9</td><td>IF</td><td>povolení či zákaz reakce na přerušení</td></tr>
<tr><td>10</td><td>DF</td><td>směr změny adres při blokových (řetězcových) operacích</td></tr>
<tr><td>11</td><td>OF</td><td>příznak přetečení (<i>overflow</i>)</td></tr>
<tr><td>12</td><td>&times;</td><td>na 8086 rezervováno, použito až v&nbsp;286</td></tr>
<tr><td>13</td><td>&times;</td><td>na 8086 rezervováno, použito až v&nbsp;286</td></tr>
<tr><td>14</td><td>&times;</td><td>na 8086 rezervováno, použito až v&nbsp;286</td></tr>
<tr><td>15</td><td>&times;</td><td>na 8086 rezervováno, použito až v&nbsp;286</td></tr>
</table>

<p>Ve výše vypsané tabulce jsem schválně oddělil dolních osm bitů a horních osm
bitů. Je totiž dobré si uvědomit, že spodní polovina registru
<strong>FLAGS</strong> obsahuje pouze bitové příznaky a horní polovina naopak
řídicí bity (a příznak přetečení &ndash; důslednost nemůžeme od platformy x86
očekávat). Co to znamená? V&nbsp;případě, že nezasáhneme do horních osmi bitů,
nezměníme chování mikroprocesoru (a například zákaz přerušení je velký zásah do
toho, jak se mikroprocesor chová). A naopak &ndash; modifikace do dolních bitů
vlastně ovlivní (velmi zjednodušeně řečeno) jen nejbližší podmíněný skok,
protože jakákoli aritmetická nebo logická instrukce hodnoty těchto příznaků
stejně přepíše.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Mapování mezi stavovými bity matematického koprocesoru a příznakovými bity CPU</h2>

<p>Jaká situace nastane ve chvíli, kdy se pokusíme nějakým způsobem přenést
horních osm bitů stavového slova matematického koprocesoru do horních osmi bitů
příznakového registru <strong>FLAGS</strong>. To je naznačeno v&nbsp;další
tabulce:</p>

<table>
<tr><th>#</th><th>FPU SW</th><th>FLAGS</th></tr>
<tr><td>0</td><td>C0 </td><td>CF</td></tr>
<tr><td>1</td><td>C1 </td><td>&nbsp;</td></tr>
<tr><td>2</td><td>C2 </td><td>PF</td></tr>
<tr><td>3</td><td>ST0</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>ST1</td><td>AF</td></tr>
<tr><td>5</td><td>ST2</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>C3 </td><td>ZF</td></tr>
<tr><td>7</td><td>B  </td><td>SF</td></tr>
</table>

<p>V&nbsp;případě, že vynecháme nepodstatné bity, tedy na straně mikroprocesoru
index vrcholu zásobníku a příznak <i>busy</i> a na straně mikroprocesoru
neobsazené příznaky, získáme mnohem přehlednější tabulku, která již začíná
dávat smysl:</p>

<table>
<tr><th>#</th><th>FPU SW</th><th>FLAGS</th></tr>
<tr><td>0</td><td>C0</td><td>CF</td></tr>
<tr><td>2</td><td>C2</td><td>PF</td></tr>
<tr><td>6</td><td>C3</td><td>ZF</td></tr>
</table>

<p>Toto mapování je z&nbsp;velké části logické, protože například při porovnání
hodnot instrukcí <strong>FCOM</strong> skutečně příznak C3 odpovídá stavu
&bdquo;je rovno&ldquo; a u instrukce <strong>FTST</strong> pak stavu
&bdquo;nulová hodnota&ldquo; &ndash; a to je vlastně i význam příznaku
nulovosti u mikroprocesoru. A příznakový bit <strong>C0</strong> mapovaný na
<strong>CF</strong> rozlišuje mezi výsledky &bdquo;je menší&ldquo; a &bdquo;je
větší&ldquo;. Poslední bit <strong>C2</strong> mapovaný na <strong>PF</strong>
slouží pro detekci NaN a s&nbsp;nimi souvisejících problémů.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Kopie příznakových bitů FPU do registru FLAGS s&nbsp;následným rozeskokem</h2>

<p>To znamená, že pokud dokážeme horních osm bitů příznakového slova
matematického koprocesoru přenést do dolních osmi bitů příznakového registru
<strong>FLAGS</strong> (bez modifikace jeho horních osmi bitů!), máme vyhráno.
Původní matematický koprocesor Intel 8087 dokázal stavové slovo uložit do
paměti (pochopitelně do dvou bajtů). Poté je možné toto slovo načíst do
registru AX popř.&nbsp;načíst jen horních osm bitů slova do registru AH. A
následně existuje specializovaná instrukce nazvaná <strong>SAHF</strong>, která
obsah registru AH uloží do spodních osmi bitů příznakového registru &ndash; což
je přesně to, co vyžadujeme. A posléze již můžeme provést rozeskok na základě
příznaků ve <strong>FLAGS</strong>:</p>

<pre>
fnstsw word [test_word]    <i>; ulozeni stavoveho slova do paměti</i>
mov ax, word [test_word]   <i>; načtení obsahu stavového slova do registru AX</i>
sahf                       <i>; horních osm bitů se uloží do spodních osmi bitů FLAGS</i>
j???                       <i>; provedení rozeskoku na základě nastaveného příznaku či příznaků</i>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zrychlené provedení kopie příznakových bitů matematickým koprocesorem Intel 80287</h2>

<p>Matematický koprocesor Intel 80287 přišel s&nbsp;novinkou: instrukcí
<strong>fnstws ax</strong>, která dokázala uložit stavové slovo matematického
koprocesoru přímo do registru AX. To na první pohled vypadá jako jednoduché a
logické rozšíření instrukčního souboru, ovšem ve skutečnosti to znamenalo
citelný zásah do toho, jak vlastně funguje kooperace mezi FPU a CPU. Pokud tato
instrukce byla detekována (oběma čipy), převzal řízení FPU, který přes vlastní
DMA provedl vlastní přenos a následně řízení předal zpět mikroprocesoru (zcela
tedy ovládal řídicí sběrnici). Byla to první snaha o zrychlení a zjednodušení
přenosu dat mezi matematickým koprocesorem a mikroprocesorem.
V&nbsp;současnosti rozdíl mezi CPU a FPU prakticky zcela zmizel, protože
registry mezi těmito dvěma subsystémy jsou sdílené (a navíc význam původního
FPU resp.&nbsp;jeho instrukcí, již není velký, protože máme k&nbsp;dispozici
rozšíření instrukčních sad SSEx a AVX-xx, k&nbsp;čemuž se ještě dostaneme).</p>

<p>Ovšem vraťme se k&nbsp;výše zmíněné instrukci <strong>fnstsw ax</strong>. Tu
bylo možné využít takto:</p>

<pre>
fnstsw ax    <i>; ulozeni stavoveho slova do registru AX</i>
fwait        <i>; čekání na dokončení</i>
sahf         <i>; horních osm bitů se uloží do spodních osmi bitů FLAGS</i>
j???         <i>; provedení rozeskoku na základě nastaveného příznaku či příznaků</i>
</pre>

<p><div class="rs-tip-major">Poznámka: stále se tedy nejedná o kombinaci
test+podmíněný skok, ovšem jsme k&nbsp;tomuto řešení již blíže.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Šestý demonstrační příklad: výsledek testu hodnoty uložené na vrcholu zásobníku</h2>

<p>Poměrně snadno lze vytvořit kód, který pomocí instrukce
<strong>FTST</strong> otestuje hodnotu uloženou na vrcholu zásobníku a poté
příznaky převede do registru FLAGS. Poté je již možné na základě příznaků
<strong>PF</strong>, <strong>ZF</strong> a <strong>CF</strong> zjistit typ
uložené hodnoty. Nejdříve je nutné testovat <strong>PF</strong> pro hodnoty NaN
a až poté zbylé dva příznaky pro rozeskok do čtyř možných větví:</p>

<pre>
        jnp not_unordered
        ...
        ret
<strong>not_unordered</strong>:
        jnz not_zero
        ...
        ret
<strong>not_zero</strong>:
        jnc positive_value
        ...
        ret
<strong>positive_value</strong>:
        ...
        ret
</pre>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
<i>; Precteni stavoveho slova matematickeho koprocesoru</i>
<i>; Zapis do registru FLAGS.</i>
<i>; Rozliseni hodnot otestovanych pomoci FTST</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        jmp main                   <i>; skok na zacatek kodu</i>
&nbsp;
%include "io.asm"                  <i>; nacist symboly, makra a podprogramy</i>
%include "print.asm"               <i>; nacist symboly, makra a podprogramy</i>
&nbsp;
<strong>main</strong>:
        fninit                     <i>; inicializace koprocesoru</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        ftst
        call print_test_result     <i>; tisk výsledku testu</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        ftst
        call print_test_result     <i>; tisk výsledku testu</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fldpi                      <i>; uložení konstanty Pi na zásobník</i>
        ftst
        call print_test_result     <i>; tisk výsledku testu</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fchs                       <i>; změna znaménka původní konstanty 1</i>
        ftst
        call print_test_result     <i>; tisk výsledku testu</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fldz
        fdiv                       <i>; podíl 1/0</i>
        ftst
        call print_test_result     <i>; tisk výsledku testu</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fldz
        fldz
        fdiv                       <i>; podíl 0/0</i>
        ftst
        call print_test_result     <i>; tisk výsledku testu</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fchs                       <i>; změna znaménka</i>
        fsqrt                      <i>; odmocnina z -1</i>
        ftst
        call print_test_result     <i>; tisk výsledku testu</i>
&nbsp;
        wait_key                   <i>; cekani na klavesu</i>
        exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; | ZF PF CF  stav</i>
<i>; |  0  0  0 ST(0) > 0                         | </i>
<i>; |  0  0  1 ST(0) < 0                         | </i>
<i>; |  1  0  0 ST(0) = 0                         | </i>
<i>; |  1  1  1 ST(0) ? 0 (neporovnatelné hodnoty)| </i>
&nbsp;
<strong>print_test_result</strong>:
        fnstsw word [test_word]    <i>; ulozeni stavoveho slova</i>
        mov ax, word [test_word]
        sahf                       <i>; uložení do příznakového registru</i>
        jnp not_unordered
        print_string msg_unordered
        ret
<strong>not_unordered</strong>:
        jnz not_zero
        print_string msg_zero_value
        ret
<strong>not_zero</strong>:
        jnc positive_value
        print_string msg_negative_value
        ret
<strong>positive_value</strong>:
        print_string msg_positive_value
        ret
&nbsp;
<i>; datova cast</i>
<strong>msg_positive_value</strong>: db "Positive value", 0x0d, 0x0a, "$"
<strong>msg_negative_value</strong>: db "Negative value", 0x0d, 0x0a, "$"
<strong>msg_zero_value</strong>:     db "Zero value", 0x0d, 0x0a, "$"
<strong>msg_unordered</strong>:      db "Unordered values!", 0x0d, 0x0a, "$"
&nbsp;
<strong>test_word</strong>: dw 0
</pre>

<p>Zprávy, které se po spuštění tohoto příkladu vypíšou, jsme doplnil o
hodnoty, které se vlastně testovaly:</p>

<table>
<tr><th>Hodnota</th><th>Vypsaná zpráva</th></tr>
<tr><td>0</td><td>Zero value</td></tr>
<tr><td>1</td><td>Positive value</td></tr>
<tr><td>&pi;</td><td>Positive value</td></tr>
<tr><td>-1</td><td>Negative value</td></tr>
<tr><td>&infin;</td><td>Positive value</td></tr>
<tr><td>0/0</td><td>Unordered values!</td></tr>
<tr><td>&radic;-1</td><td>Unordered values!</td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Sedmý demonstrační příklad: plné porovnání dvojice hodnot na zásobníku</h2>

<p>Sedmý a současně i dnešní poslední demonstrační příklad používá podobnou
techniku jako <a href="#k16">příklad předchozí</a>. Rozdíl spočívá v&nbsp;tom,
že se nyní porovnávají dvě hodnoty uložené na dvou nejvyšších místech zásobníku
operandů, poté se příznaky přesunou do registru FLAGS a následně se provede
jejich zpracování &ndash; rozeskok do čtyř různých větví:</p>

<pre>
<i>; Precteni stavoveho slova matematickeho koprocesoru</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        jmp main                   <i>; skok na zacatek kodu</i>
&nbsp;
%include "io.asm"                  <i>; nacist symboly, makra a podprogramy</i>
%include "print.asm"               <i>; nacist symboly, makra a podprogramy</i>
&nbsp;
<strong>main</strong>:
        fninit                     <i>; inicializace koprocesoru</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich odstraněním ze zásobníku</i>
        call print_comparison_results     <i>; tisk výsledku porovnání</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich odstraněním ze zásobníku</i>
        call print_comparison_results     <i>; tisk výsledku porovnání</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich odstraněním ze zásobníku</i>
        call print_comparison_results     <i>; tisk výsledku porovnání</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich odstraněním ze zásobníku</i>
        call print_comparison_results     <i>; tisk výsledku porovnání</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fdivp                      <i>; na zásobník se uloží nekonečno</i>
        fld1                       <i>; uložení konstanty 1 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich odstraněním ze zásobníku</i>
        call print_comparison_results     <i>; tisk výsledku porovnání</i>
&nbsp;
        fninit                     <i>; inicializace koprocesoru</i>
        fld1
        fchs                       <i>; změna znaménka</i>
        fsqrt                      <i>; odmocnina z -1</i>
        fldz                       <i>; uložení konstanty 0 na zásobník</i>
        fcompp                     <i>; porovnání dvou hodnot s jejich odstraněním ze zásobníku</i>
        call print_comparison_results     <i>; tisk výsledku porovnání</i>
&nbsp;
        wait_key                   <i>; cekani na klavesu</i>
        exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<strong>print_comparison_results</strong>:
        fnstsw word [test_word]    <i>; ulozeni stavoveho slova</i>
        mov ax, word [test_word]
        sahf                       <i>; uložení do příznakového registru</i>
&nbsp;
        jnp not_unordered
        print_string msg_unordered
        ret
<strong>not_unordered</strong>:
        jnz not_equal
        print_string msg_equal_values
        ret
<strong>not_equal</strong>:
        jnc greater_than
        print_string msg_less_than
        ret
<strong>greater_than</strong>:
        print_string msg_greater_than
        ret
&nbsp;
<i>; datova cast</i>
<strong>msg_greater_than</strong>: db "Greater than", 0x0d, 0x0a, "$"
<strong>msg_less_than</strong>:    db "Less than", 0x0d, 0x0a, "$"
<strong>msg_equal_values</strong>: db "Equal values", 0x0d, 0x0a, "$"
<strong>msg_unordered</strong>:    db "Unordered values!", 0x0d, 0x0a, "$"
&nbsp;
<i>; datova cast</i>
<strong>test_word</strong>: dw 0
</pre>

<p>Opět se podívejme na zprávy vypsané tímto příkladem:</p>

<table>
<tr><th>Pravý operand</th><th>Levý operand</th><th>Vypsaná zpráva</th></tr>
<tr><td>0        </td><td>0</td><td>Equal values</td></tr>
<tr><td>1        </td><td>1</td><td>Equal values</td></tr>
<tr><td>1        </td><td>0</td><td>Less than</td></tr>
<tr><td>0        </td><td>1</td><td>Greater than</td></tr>
<tr><td>1/0      </td><td>1</td><td>Less than</td></tr>
<tr><td>&radic;-1</td><td>0</td><td>Unordered values!</td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: seznam všech instrukcí matematických koprocesorů řady 80x87</h2>

<p>Instrukční soubor matematických koprocesorů se postupně rozšiřoval, takže si
vypišme všechny instrukce, které v&nbsp;této řadě postupně vznikly. Některé
instrukce (ty nejdůležitější) již známe, další jsou přímým rozšířením
existujících (goniometrické funkce) a jiné souvisí spíše s&nbsp;celočíselnými
operacemi:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Stručný popis instrukce</th></tr>
<tr><td> 1</td><td>FADD</td><td>součet</td></tr>
<tr><td> 2</td><td>FADDP</td><td>součet s&nbsp;odstraněním původního operandu</td></tr>
<tr><td> 3</td><td>FSUB</td><td>rozdíl</td></tr>
<tr><td> 4</td><td>FSUBP</td><td>rozdíl s&nbsp;odstraněním původního operandu</td></tr>
<tr><td> 5</td><td>FSUBR</td><td>rozdíl, ale operandy jsou prohozeny</td></tr>
<tr><td> 6</td><td>FSUBRP</td><td>kombinace FSUBR a FSUBP</td></tr>
<tr><td> 7</td><td>FMUL</td><td>součin</td></tr>
<tr><td> 8</td><td>FMULP</td><td>součin s&nbsp;odstraněním původního operandu</td></tr>
<tr><td> 9</td><td>FDIV</td><td>podíl</td></tr>
<tr><td>10</td><td>FDIVP</td><td>podíl s&nbsp;odstraněním původního operandu</td></tr>
<tr><td>11</td><td>FDIVR</td><td>podíl, ale operandy jsou prohozeny</td></tr>
<tr><td>12</td><td>FDIVRP</td><td>kombinace FDIVR a FDIVP</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>FIADD</td><td>součet celočíselných hodnot</td></tr>
<tr><td>14</td><td>FISUB</td><td>rozdíl celočíselných hodnot</td></tr>
<tr><td>15</td><td>FISUBR</td><td>rozdíl celočíselných hodnot s&nbsp;prohozenými operandy</td></tr>
<tr><td>16</td><td>FIMUL</td><td>součin celočíselných hodnot</td></tr>
<tr><td>17</td><td>FIDIV</td><td>podíl celočíselných hodnot</td></tr>
<tr><td>18</td><td>FIDIVR</td><td>podíl celočíselných hodnot s&nbsp;prohozenými operandy</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>FABS</td><td>výpočet absolutní hodnoty</td></tr>
<tr><td>20</td><td>FSQRT</td><td>výpočet druhé odmocniny</td></tr>
<tr><td>21</td><td>FPREM</td><td>výpočet modulo</td></tr>
<tr><td>22</td><td>FPREM1</td><td>výpočet modulo, odlišné výsledky na zásobníku</td></tr>
<tr><td>22</td><td>FPTAN</td><td>tangens pro úhel v&nbsp;rozmezí &pm; &pi;/4</td></tr>
<tr><td>23</td><td>FPATAN</td><td>arkus tangens</td></tr>
<tr><td>24</td><td>FSCALE</td><td>násobení či dělení mocninou 2</td></tr>
<tr><td>25</td><td>F2XM1</td><td>2<sup>x</sup>-1</td></tr>
<tr><td>26</td><td>FYL2X</td><td>y log<sub>2</sub>x</td></tr>
<tr><td>27</td><td>FYL2XP1</td><td>y log<sub>2</sub>(x+1)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>29</td><td>FCOM   </td><td>porovnání operandů s&nbsp;plovoucí čárkou, na zásobníku jsou oba operandy zachovány</td></tr>
<tr><td>30</td><td>FCOMP  </td><td>porovnání operandů s&nbsp;plovoucí čárkou, ze zásobníku se odstraní druhý operand</td></tr>
<tr><td>31</td><td>FCOMPP </td><td>porovnání operandů s&nbsp;plovoucí čárkou, ze zásobníku se odstraní oba operandy</td></tr>
<tr><td>32</td><td>FUCOM  </td><td>jako FCOM, ovšem podporuje hodnoty Quiet NaN</td></tr>
<tr><td>33</td><td>FUCOMP </td><td>jako FCOMP, ovšem podporuje hodnoty Quiet NaN</td></tr>
<tr><td>34</td><td>FUCOMPP</td><td>jako FCOMPP, ovšem podporuje hodnoty Quiet NaN</td></tr>
<tr><td>35</td><td>FICOM  </td><td>porovnání: první operand je celočíselný, na zásobníku jsou oba operandy zachovány</td></tr>
<tr><td>36</td><td>FICOMP </td><td>porovnání: první operand je celočíselný, ze zásobníku se odstraní druhý operand</td></tr>
<tr><td>37</td><td>FUCOMI </td><td>porovnání: první operand je celočíselný, podpora Quiet NaN</td></tr>
<tr><td>38</td><td>FUCOMIP</td><td>porovnání: první operand je celočíselný, podpora Quiet NaN</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>FLD   </td><td>načtení FPU hodnoty z&nbsp;paměti</td></tr>
<tr><td>40</td><td>FLDZ  </td><td>načtení konstanty 0</td></tr>
<tr><td>41</td><td>FLD1  </td><td>načtení konstanty 1</td></tr>
<tr><td>42</td><td>FLDPI </td><td>načtení konstanty &pi;</td></tr>
<tr><td>43</td><td>FLDL2E</td><td>načtení konstanty log<sub>2</sub>e (e=Eulerovo číslo)</td></tr>
<tr><td>44</td><td>FLDL2T</td><td>načtení konstanty log<sub>2</sub>10</td></tr>
<tr><td>45</td><td>FLDLG2</td><td>načtení konstanty log<sub>10</sub>2</td></tr>
<tr><td>46</td><td>FLDLN2</td><td>načtení konstanty log<sub>e</sub>2</td></tr>
<tr><td>47</td><td>FST   </td><td>uložení FPU hodnoty do paměti</td></tr>
<tr><td>48</td><td>FSTP  </td><td>uložení FPU hodnoty + odstranění operandu ze zásobníku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>49</td><td>FILD  </td><td>načtení celočíselné hodnoty z&nbsp;paměti</td></tr>
<tr><td>50</td><td>FIST  </td><td>uložení celočíselné hodnoty do paměti</td></tr>
<tr><td>51</td><td>FISTP </td><td>uložení celočíselné hodnoty do paměti + odstranění operandu ze zásobníku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>49</td><td>FLDCW </td><td>načtení řídicího slova</td></tr>
<tr><td>50</td><td>FSTCW </td><td>uložení řídicího slova (bez čekání)</td></tr>
<tr><td>51</td><td>FNSTCW</td><td>uložení řídicího slova</td></tr>
<tr><td>52</td><td>FSTSW </td><td>uložení stavového slova</td></tr>
<tr><td>53</td><td>FNSTSW </td><td>uložení stavového slova (bez čekání)</td></tr>
<tr><td>54</td><td>FLDENV</td><td>načtení 28 bajtů se stavem FPU (bez zásobníku)</td></tr>
<tr><td>55</td><td>FSTENV</td><td>uložení 28 bajtů se stavem FPU (bez zásobníku)</td></tr>
<tr><td>56</td><td>FNSTENV</td><td>uložení celého prostředí FPU (bez čekání)</td></tr>
<tr><td>57</td><td>FSAVE </td><td>uložení celého stavu FPU včetně zásobníku (108 bajtů)</td></tr>
<tr><td>58</td><td>FNSAVE</td><td>uložení celého stavu FPU včetně zásobníku (108 bajtů) bez čekání</td></tr>
<tr><td>59</td><td>FRSTOR</td><td>obnovení celého stavu FPU</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>60</td><td>FINCSTP</td><td>zvýšení indexu vrcholu zásobníku</td></tr>
<tr><td>61</td><td>FDECSTP</td><td>snížení indexu vrcholu zásobníku</td></tr>
<tr><td>61</td><td>FINIT  </td><td>inicializace matematického koprocesoru</td></tr>
<tr><td>63</td><td>FNINIT </td><td>inicializace matematického koprocesoru (bez čekání)</td></tr>
<tr><td>64</td><td>FBLD   </td><td>načtení BCD hodnoty z&nbsp;paměti</td></tr>
<tr><td>65</td><td>FBSTP  </td><td>uložení BCD hodnoty do paměti</td></tr>
<tr><td>66</td><td>FCHS   </td><td>změna znaménka operandu na vrcholu zásobníku</td></tr>
<tr><td>67</td><td>FCLEX  </td><td>vymazání všech výjimek</td></tr>
<tr><td>68</td><td>FCMOVcc</td><td>přenos na základě splněné podmínky</td></tr>
<tr><td>69</td><td>FSIN   </td><td>výpočet sinu</td></tr>
<tr><td>70)</td><td>FCOS   </td><td>výpočet kosinu</td></tr>
<tr><td>71)</td><td>FSINCOS</td><td>výpočet sinu i kosinu (užitečné při transformacích)</td></tr>
<tr><td>72)</td><td>FFREE  </td><td>uvolnění zvoleného datového registru</td></tr>
<tr><td>73)</td><td>FNCLEX </td><td>vymazání všech výjimek (bez čekání)</td></tr>
<tr><td>74</td><td>FNOP   </td><td>klasická no-op</td></tr>
<tr><td>75</td><td>FRNDINT</td><td>zaokrouhlení hodnoty na vrcholu zásobníku</td></tr>
<tr><td>76</td><td>FRNDINT</td><td>převod FP hodnoty na celé číslo</td></tr>
<tr><td>77</td><td>FTST   </td><td>testování obsahu vrcholu zásobníku s&nbsp;nulou</td></tr>
<tr><td>78</td><td>FWAIT  </td><td>čekání na dokončení operace FPU (typicky vkládáno automaticky assemblerem)</td></tr>
<tr><td>79</td><td>FXAM   </td><td>prozkoumání hodnoty uložené na vrcholu zásobníku</td></tr>
<tr><td>80</td><td>FXCH   </td><td>prohození vrcholu zásobníku s&nbsp;jiným registrem</td></tr>
<tr><td>81</td><td>FXTRACT</td><td>získání exponentu a mantisy (zjednodušeně řečeno)</td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad s&nbsp;využitím assembleru <strong>NASM</strong>, byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>hello.asm</td><td>program typu &bdquo;Hello world&ldquo; naprogramovaný v&nbsp;assembleru pro systém DOS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm</a></td></tr>
<tr><td> 2</td><td>hello_shorter.asm</td><td>kratší varianta výskoku z&nbsp;procesu zpět do DOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm</a></td></tr>
<tr><td> 3</td><td>hello_wait.asm</td><td>čekání na stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm</a></td></tr>
<tr><td> 4</td><td>hello_macros.asm</td><td>realizace jednotlivých částí programu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>gfx_4_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm</a></td></tr>
<tr><td> 6</td><td>gfx_6_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm</a></td></tr>
<tr><td> 7</td><td>gfx_4_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm</a></td></tr>
<tr><td> 8</td><td>gfx_6_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>gfx_6_fill_1.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm</a></td></tr>
<tr><td>10</td><td>gfx_6_fill_2.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, varianta s&nbsp;instrukcí <strong>LOOP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm</a></td></tr>
<tr><td>11</td><td>gfx_6_fill_3.asm</td><td>vyplnění obrazovky instrukcí <strong>REP STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm</a></td></tr>
<tr><td>12</td><td>gfx_6_fill_4.asm</td><td>vyplnění obrazovky, synchronizace vykreslování s&nbsp;paprskem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>gfx_4_image_1.asm</td><td>vykreslení rastrového obrázku získaného z&nbsp;binárních dat, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm</a></td></tr>
<tr><td>14</td><td>gfx_4_image_2.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm</a></td></tr>
<tr><td>15</td><td>gfx_4_image_3.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm</a></td></tr>
<tr><td>16</td><td>gfx_4_image_4.asm</td><td>korektní vykreslení všech sudých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm</a></td></tr>
<tr><td>17</td><td>gfx_4_image_5.asm</td><td>korektní vykreslení všech sudých i lichých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>gfx_4_image_6.asm</td><td>nastavení barvové palety před vykreslením obrázku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm</a></td></tr>
<tr><td>19</td><td>gfx_4_image_7.asm</td><td>nastavení barvové palety před vykreslením obrázku, snížená intenzita barev</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm</a></td></tr>
<tr><td>20</td><td>gfx_4_image_8.asm</td><td>postupná změna barvy pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>gfx_6_putpixel_1.asm</td><td>vykreslení pixelu, základní varianta se 16bitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm</a></td></tr>
<tr><td>22</td><td>gfx_6_putpixel_2.asm</td><td>vykreslení pixelu, varianta s&nbsp;osmibitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm</a></td></tr>
<tr><td>23</td><td>gfx_6_putpixel_3.asm</td><td>vykreslení pixelu, varianta bez násobení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm</a></td></tr>
<tr><td>24</td><td>gfx_6_putpixel_4.asm</td><td>vykreslení pixelu přes obrázek, nekorektní chování (přepis obrázku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm</a></td></tr>
<tr><td>25</td><td>gfx_6_putpixel_5.asm</td><td>vykreslení pixelu přes obrázek, korektní varianta pro bílé pixely</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>cga_text_mode_1.asm</td><td>standardní textový režim s&nbsp;rozlišením 40&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm</a></td></tr>
<tr><td>27</td><td>cga_text_mode_3.asm</td><td>standardní textový režim s&nbsp;rozlišením 80&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm</a></td></tr>
<tr><td>28</td><td>cga_text_mode_intensity.asm</td><td>změna významu nejvyššího bitu atributového bajtu: vyšší intenzita namísto blikání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm</a></td></tr>
<tr><td>29</td><td>cga_text_mode_cursor.asm</td><td>změna tvaru textového kurzoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm</a></td></tr>
<tr><td>30</td><td>cga_text_gfx_1.asm</td><td>zobrazení &bdquo;rastrové mřížky&ldquo;: pseudografický režim 160&times;25 pixelů (interně textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm</a></td></tr>
<tr><td>31</td><td>cga_text_mode_char_height.asm</td><td>změna výšky znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm</a></td></tr>
<tr><td>32</td><td>cga_text_160x100.asm</td><td>grafický režim 160&times;100 se šestnácti barvami (interně upravený textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>hercules_text_mode_1.asm</td><td>využití standardního textového režimu společně s&nbsp;kartou Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm</a></td></tr>
<tr><td>34</td><td>hercules_text_mode_2.asm</td><td>zákaz blikání v&nbsp;textových režimech</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm</a></td></tr>
<tr><td>35</td><td>hercules_turn_off.asm</td><td>vypnutí generování video signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm</a></td></tr>
<tr><td>36</td><td>hercules_gfx_mode_1.asm</td><td>přepnutí karty Hercules do grafického režimu (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm</a></td></tr>
<tr><td>37</td><td>hercules_gfx_mode_2.asm</td><td>přepnutí karty Hercules do grafického režimu (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm</a></td></tr>
<tr><td>38</td><td>hercules_putpixel.asm</td><td>subrutina pro vykreslení jediného pixelu na kartě Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>ega_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm</a></td></tr>
<tr><td>40</td><td>ega_text_mode_80x43.asm</td><td>zobrazení 43 textových řádků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm</a></td></tr>
<tr><td>41</td><td>ega_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm</a></td></tr>
<tr><td>42</td><td>ega_gfx_mode_640x200.asm</td><td>přepnutí do grafického režimu 640&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm</a></td></tr>
<tr><td>43</td><td>ega_gfx_mode_640x350.asm</td><td>přepnutí do grafického režimu 640&times;350 pixelů se čtyřmi nebo šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm</a></td></tr>
<tr><td>44</td><td>ega_gfx_mode_bitplanes_1.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (základní způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm</a></td></tr>
<tr><td>45</td><td>ega_gfx_mode_bitplanes_2.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (rychlejší způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>ega_320x200_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm</a></td></tr>
<tr><td>47</td><td>ega_640x350_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 640&times;350 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>48</td><td>ega_standard_font.asm</td><td>použití standardního fontu grafické karty EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm</a></td></tr>
<tr><td>49</td><td>ega_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>ega_palette_1.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 320&times;200 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm</a></td></tr>
<tr><td>51</td><td>ega_palette_2.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 640&times;350 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm</a></td></tr>
<tr><td>52</td><td>ega_palette_3.asm</td><td>změna všech barev v&nbsp;barvové paletě s&nbsp;využitím programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm</a></td></tr>
<tr><td>53</td><td>ega_palette_4.asm</td><td>změna všech barev, včetně barvy okraje, v&nbsp;barvové paletě voláním funkce BIOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>vga_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm</a></td></tr>
<tr><td>55</td><td>vga_text_mode_80x50.asm</td><td>zobrazení 50 a taktéž 28 textových řádků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm</a></td></tr>
<tr><td>56</td><td>vga_text_mode_intensity_1.asm</td><td>změna chování atributového bitu pro blikání (nebezpečná varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm</a></td></tr>
<tr><td>57</td><td>vga_text_mode_intensity_2.asm</td><td>změna chování atributového bitu pro blikání (bezpečnější varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm</a></td></tr>
<tr><td>58</td><td>vga_text_mode_9th_column.asm</td><td>modifikace způsobu zobrazení devátého sloupce ve znakových režimech (720 pixelů na řádku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm</a></td></tr>
<tr><td>59</td><td>vga_text_mode_cursor_shape.asm</td><td>změna tvaru textového kurzoru na grafické kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm</a></td></tr>
<tr><td>60</td><td>vga_text_mode_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>vga_gfx_mode_640x480.asm</td><td>přepnutí do grafického režimu 640&times;480 pixelů se šestnácti barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm</a></td></tr>
<tr><td>62</td><td>vga_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů s&nbsp;256 barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm</a></td></tr>
<tr><td>63</td><td>vga_gfx_mode_palette.asm</td><td>změna všech barev v&nbsp;barvové paletě grafické karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm</a></td></tr>
<tr><td>64</td><td>vga_gfx_mode_dac_1.asm</td><td>využití DAC (neočekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm</a></td></tr>
<tr><td>65</td><td>vga_gfx_mode_dac_2.asm</td><td>využití DAC (očekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>66</td><td>vga_640x480_putpixel.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 640&times;480 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm</a></td></tr>
<tr><td>67</td><td>vga_320x200_putpixel_1.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm</a></td></tr>
<tr><td>68</td><td>vga_320x200_putpixel_2.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (rychlejší varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>69</td><td>vga_gfx_mode_dac_3.asm</td><td>přímé využití DAC v&nbsp;grafickém režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>70</td><td>vga_gfx_mode_unchained_step_1.asm</td><td>zobrazení barevných pruhů v&nbsp;režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm</a></td></tr>
<tr><td>71</td><td>vga_gfx_mode_unchained_step_2.asm</td><td>vypnutí zřetězení bitových rovin a změna způsobu adresování pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm</a></td></tr>
<tr><td>72</td><td>vga_gfx_mode_unchained_step_3.asm</td><td>vykreslení barevných pruhů do vybraných bitových rovin</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>73</td><td>vga_gfx_mode_320x400.asm</td><td>nestandardní grafický režim s&nbsp;rozlišením 320&times;400 pixelů a 256 barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm</a></td></tr>
<tr><td>74</td><td>vga_320x200_image.asm</td><td>zobrazení rastrového obrázku ve standardním grafickém režimu 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm</a></td></tr>
<tr><td>75</td><td>vga_320x200_unchained_image_1.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm</a></td></tr>
<tr><td>76</td><td>vga_320x200_unchained_image_2.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm</a></td></tr>
<tr><td>77</td><td>vga_320x400_unchained_image.asm</td><td>zobrazení rastrového obrázku v&nbsp;nestandardním režimu 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>78</td><td>vga_vertical_scroll_1.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm</a></td></tr>
<tr><td>79</td><td>vga_vertical_scroll_2.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm</a></td></tr>
<tr><td>80</td><td>vga_split_screen_1.asm</td><td>režim split-screen a scrolling, nefunční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm</a></td></tr>
<tr><td>81</td><td>vga_split_screen_2.asm</td><td>režim split-screen a scrolling, plně funkční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm</a></td></tr>
<tr><td>82</td><td>vga_horizontal_scroll_1.asm</td><td>horizontální scrolling bez rozšíření počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm</a></td></tr>
<tr><td>83</td><td>vga_horizontal_scroll_2.asm</td><td>horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm</a></td></tr>
<tr><td>84</td><td>vga_horizontal_scroll_3.asm</td><td>jemný horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>85</td><td>vga_320x240_image.asm</td><td>nastavení grafického režimu Mode-X, načtení a vykreslení obrázku, scrolling</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>86</td><td>io.asm</td><td>knihovna maker pro I/O operace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm</a></td></tr>
<tr><td>87</td><td>vga_lib.asm</td><td>knihovna maker a podprogramů pro programování karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_lib.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_lib.asm</a></td></tr>
<tr><td>88</td><td>vga_320x240_lib.asm</td><td>nastavení grafického režimu Mode-X, tentokrát knihovními funkcemi</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_lib.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_lib.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>89</td><td>vga_bitblt_1.asm</td><td>první (naivní) implementace operace <i>BitBLT</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_1.asm</a></td></tr>
<tr><td>90</td><td>vga_bitblt_2.asm</td><td>operace <i>BitBLT</i> s&nbsp;výběrem bitových rovin pro zápis</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_2.asm</a></td></tr>
<tr><td>91</td><td>vga_bitblt_3.asm</td><td>operace <i>BitBLT</i> s&nbsp;výběrem bitových rovin pro čtení i zápis</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_3.asm</a></td></tr>
<tr><td>92</td><td>vga_bitblt_4.asm</td><td>korektní <i>BitBLT</i> pro 16barevný režim, realizace makry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_4.asm</a></td></tr>
<tr><td>93</td><td>vga_bitblt_5.asm</td><td>korektní <i>BitBLT</i> pro 16barevný režim, realizace podprogramem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>94</td><td>vga_bitblt_rotate.asm</td><td>zápisový režim s&nbsp;rotací bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_rotate.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_rotate.asm</a></td></tr>
<tr><td>95</td><td>vga_bitblt_fast.asm</td><td>rychlá korektní 32bitová operace typu <i>BitBLT</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_fast.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_fast.asm</a></td></tr>
<tr><td>96</td><td>vga_320x400_bitblt_1.asm</td><td>přenos obrázku v&nbsp;režimu 320&times;400 operací <i>BitBLT</i> (neúplná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_1.asm</a></td></tr>
<tr><td>97</td><td>vga_320x400_bitblt_2.asm</td><td>přenos obrázku v&nbsp;režimu 320&times;400 operací <i>BitBLT</i> (úplná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_2.asm</a></td></tr>
<tr><td>98</td><td>vga_write_modes_1.asm</td><td>volitelné zápisové režimy grafické karty VGA, zápis bez úpravy latche</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_1.asm</a></td></tr>
<tr><td>99</td><td>vga_write_modes_2.asm</td><td>volitelné zápisové režimy grafické karty VGA, zápis s&nbsp;modifikací latche</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_2.asm</a></td></tr>
<tr><td>100</td><td>vga_write_modes_3.asm</td><td>volitelné zápisové režimy grafické karty VGA, cílená modifikace latche vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>101</td><td>instruction_jump.asm</td><td>použití instrukce <strong>JMP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jump.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jump.asm</a></td></tr>
<tr><td>102</td><td>instruction_jnz.asm</td><td>použití instrukce <strong>JNZ</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jnz.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jnz.asm</a></td></tr>
<tr><td>103</td><td>instruction_jz_jmp.asm</td><td>použití instrukcí <strong>JZ</strong> a <strong>JMP</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jz_jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jz_jmp.asm</a></td></tr>
<tr><td>104</td><td>instruction_loop.asm</td><td>použití instrukce <strong>LOOP</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_loop.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>105</td><td>instruction_template.asm</td><td>šablona všech následujících demonstračních příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_template.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_template.asm</a></td></tr>
<tr><td>106</td><td>instruction_print_hex.asm</td><td>tisk osmibitové hexadecimální hodnoty</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_print_hex.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_print_hex.asm</a></td></tr>
<tr><td>107</td><td>instruction_xlat.asm</td><td>využití instrukce <strong>XLAT</strong> pro získání tisknutelné hexadecimální cifry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_xlat.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_xlat.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>108</td><td>instruction_daa.asm</td><td>operace součtu s&nbsp;využitím binární i BCD aritmetiky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa.asm</a></td></tr>
<tr><td>109</td><td>instruction_daa_sub.asm</td><td>instrukce <strong>DAA</strong> po provedení operace rozdílu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa_sub.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa_sub.asm</a></td></tr>
<tr><td>110</td><td>instruction_das.asm</td><td>instrukce <strong>DAS</strong> po provedení operace rozdílu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_das.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_das.asm</a></td></tr>
<tr><td>111</td><td>instruction_aaa.asm</td><td>korekce výsledku na jedinou BCD cifru operací <strong>AAA</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aaa.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aaa.asm</a></td></tr>
<tr><td>112</td><td>instruction_mul.asm</td><td>ukázka výpočtu součinu dvou osmibitových hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_mul.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_mul.asm</a></td></tr>
<tr><td>113</td><td>instruction_aam.asm</td><td>BCD korekce po výpočtu součinu instrukcí <strong>AAM</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aam.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aam.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>114</td><td>instruction_stosb.asm</td><td>blokový zápis dat instrukcí <strong>STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_stosb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_stosb.asm</a></td></tr>
<tr><td>115</td><td>instruction_rep_stosb.asm</td><td>opakované provádění instrukce <strong>STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_stosb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_stosb.asm</a></td></tr>
<tr><td>116</td><td>instruction_lodsb.asm</td><td>čtení dat instrukcí <strong>LODSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_lodsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_lodsb.asm</a></td></tr>
<tr><td>117</td><td>instruction_movsb.asm</td><td>přenos jednoho bajtu instrukcí <strong>MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_movsb.asm</a></td></tr>
<tr><td>118</td><td>instruction_rep_movsb.asm</td><td>blokový přenos po bajtech instrukcí <strong>MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_movsb.asm</a></td></tr>
<tr><td>119</td><td>instruction_rep_scas.asm</td><td>vyhledávání v&nbsp;řetězci instrukcí <strong>SCAS</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_scas.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_scas.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>120</td><td>vga_320x200_image_0B.asm</td><td>výsledek blokového přenosu ve chvíli, kdy je <strong>CX=0</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_0B.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_0B.asm</a></td></tr>
<tr><td>121</td><td>vga_320x200_image_64kB.asm</td><td>výsledek blokového přenosu ve chvíli, kdy je <strong>CX=0xffff</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_64kB.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_64kB.asm</a></td></tr>
<tr><td>122</td><td>vga_320x200_image_movsb.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb.asm</a></td></tr>
<tr><td>123</td><td>vga_320x200_image_movsw.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsw.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsw.asm</a></td></tr>
<tr><td>124</td><td>vga_320x200_image_movsd.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSD</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsd.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsd.asm</a></td></tr>
<tr><td>125</td><td>vga_320x200_image_movsb_forward.asm</td><td>blokový přenos překrývajících se bloků paměti (zvyšující se adresy)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_forward.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_forward.asm</a></td></tr>
<tr><td>126</td><td>vga_320x200_image_movsb_backward_1.asm</td><td>blokový přenos překrývajících se bloků paměti (snižující se adresy, nekorektní nastavení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_1.asm</a></td></tr>
<tr><td>127</td><td>vga_320x200_image_movsb_backward_2.asm</td><td>blokový přenos překrývajících se bloků paměti (snižující se adresy, korektní nastavení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>128</td><td>sound_bell.asm</td><td>přehrání zvuku pomocí tisku ASCII znaku BELL</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_bell.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_bell.asm</a></td></tr>
<tr><td>129</td><td>sound_beep.asm</td><td>přehrání zvuku o zadané frekvenci na PC Speakeru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_beep.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_beep.asm</a></td></tr>
<tr><td>130</td><td>sound_play_pitch.asm</td><td>přehrání zvuku o zadané frekvenci na PC Speakeru, použití maker</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_play_pitch.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_play_pitch.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>131</td><td>sound_opl2_basic.asm</td><td>přehrání komorního A na OPL2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_basic.asm</a></td></tr>
<tr><td>132</td><td>sound_opl2_table.asm</td><td>přehrání komorního A na OPL2, použití tabulky s&nbsp;hodnotami registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>133</td><td>sound_opl2_table_2.asm</td><td>přepis tabulky s&nbsp;obsahy registrů pro přehrání komorního A</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table_2.asm</a></td></tr>
<tr><td>134</td><td>sound_key_on.asm</td><td>přímé ovládání bitu KEY ON mezerníkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_key_on.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_key_on.asm</a></td></tr>
<tr><td>135</td><td>sound_adsr.asm</td><td>nastavení obálky pro tón přehrávaný prvním kanálem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_adsr.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_adsr.asm</a></td></tr>
<tr><td>136</td><td>sound_modulation.asm</td><td>řízení frekvence modulátoru klávesami 1 a 0</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_modulation.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_modulation.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>137</td><td>keyboard_basic.asm</td><td>přímá práce s&nbsp;klávesnicí IBM PC</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/keyboard_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/keyboard_basic.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>138</td><td>sound_stereo_opl2.asm</td><td>stereo zvuk v&nbsp;konfiguraci DualOPL2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_stereo_opl2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_stereo_opl2.asm</a></td></tr>
<tr><td>139</td><td>sound_opl2_multichannel.asm</td><td>vícekanálový zvuk na OPL2 (klávesy), delší varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel.asm</a></td></tr>
<tr><td>140</td><td>sound_opl2_multichannel_2.asm</td><td>vícekanálový zvuk na OPL2 (klávesy), kratší varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel_2.asm</a></td></tr>
<tr><td>141</td><td>sound_opl3_stereo_1.asm</td><td>stereo výstup na OPL3 (v&nbsp;kompatibilním režimu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_1.asm</a></td></tr>
<tr><td>142</td><td>sound_opl3_stereo_2.asm</td><td>stereo výstup na OPL3 (v&nbsp;režimu OPL3)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_2.asm</a></td></tr>
<tr><td>143</td><td>sound_opl3_multichannel.asm</td><td>vícekanálový zvuk na OPL3 (klávesy)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_multichannel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_multichannel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>144</td><td>sound_opl3_waveform_1.asm</td><td>interaktivní modifikace tvaru vlny u prvního operátoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_1.asm</a></td></tr>
<tr><td>145</td><td>sound_opl3_waveform_2.asm</td><td>oprava chyby: povolení režimu kompatibilního s&nbsp;OPL3</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_2.asm</a></td></tr>
<tr><td>146</td><td>sound_opl3_waveform_3.asm</td><td>vliv tvaru vln na zvukový kanál s&nbsp;FM syntézou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_3.asm</a></td></tr>
<tr><td>147</td><td>sound_opl3_waveform_4.asm</td><td>modifikace tvaru vlny nosné vlny i modulátoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_4.asm</a></td></tr>
<tr><td>148</td><td>sound_opl3_4operators_1.asm</td><td>výběr AM/FM režimu ve čtyřoperátorovém nastavení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_1.asm</a></td></tr>
<tr><td>149</td><td>sound_opl3_4operators_2.asm</td><td>výběr AM/FM režimu ve čtyřoperátorovém nastavení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>150</td><td>timer_basic.asm</td><td>základní obsluha přerušení od časovače/čítače</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_basic.asm</a></td></tr>
<tr><td>151</td><td>timer_restore.asm</td><td>obnovení původní obsluhy přerušení při ukončování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore.asm</a></td></tr>
<tr><td>152</td><td>timer_restore_better_structure.asm</td><td>refaktoring předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore_better_structure.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore_better_structure.asm</a></td></tr>
<tr><td>153</td><td>timer_faster_clock.asm</td><td>zrychlení čítače na 100 přerušení za sekundu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_faster_clock.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_faster_clock.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>154</td><td>instruction_push_imm.asm</td><td>instrukce <strong>PUSH</strong> s&nbsp;konstantou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_imm.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_imm.asm</a></td></tr>
<tr><td>155</td><td>instruction_imul_imm.asm</td><td>instrukce <strong>IMUL</strong> s&nbsp;konstantou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_imul_imm.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_imul_imm.asm</a></td></tr>
<tr><td>156</td><td>instruction_into_1.asm</td><td>instrukce <strong>INTO</strong> s&nbsp;obsluhou přerušení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_1.asm</a></td></tr>
<tr><td>157</td><td>instruction_into_2.asm</td><td>instrukce <strong>INTO</strong> s&nbsp;obsluhou přerušení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_2.asm</a></td></tr>
<tr><td>158</td><td>instruction_bound_1.asm</td><td>instrukce <strong>BOUND</strong> s&nbsp;obsluhou přerušení (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_1.asm</a></td></tr>
<tr><td>159</td><td>instruction_bound_2.asm</td><td>instrukce <strong>BOUND</strong> s&nbsp;obsluhou přerušení (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_2.asm</a></td></tr>
<tr><td>160</td><td>vga_320x200_putpixel_286.asm</td><td>instrukce bitového posunu s&nbsp;konstantou větší než 1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_286.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_286.asm</a></td></tr>
<tr><td>161</td><td>instruction_push_pop.asm</td><td>instrukce <strong>PUSH</strong> a <strong>POP</strong> se všemi pracovními registry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>162</td><td>instruction_push_pop_B.asm</td><td>instrukce s&nbsp;novými segmentovými registry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop_B.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop_B.asm</a></td></tr>
<tr><td>163</td><td>instruction_near_jz_jmp.asm</td><td>blízké skoky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_near_jz_jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_near_jz_jmp.asm</a></td></tr>
<tr><td>164</td><td>instruction_bsf.asm</td><td>nová instrukce <strong>BSF</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsf.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsf.asm</a></td></tr>
<tr><td>165</td><td>instruction_bsr.asm</td><td>nová instrukce <strong>BSR</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsr.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsr.asm</a></td></tr>
<tr><td>166</td><td>instruction_add_32bit.asm</td><td>32bitový součet</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_add_32bit.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_add_32bit.asm</a></td></tr>
<tr><td>167</td><td>instruction_inc_32bit.asm</td><td>32bitová instrukce <strong>INC</strong> v&nbsp;šestnáctibitovém režimu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit.asm</a></td></tr>
<tr><td>168</td><td>instruction_inc_32bit_B.asm</td><td>32bitová instrukce <strong>INC</strong> v&nbsp;32bitovém režimu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit_B.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit_B.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>169</td><td>ems_status.asm</td><td>zjištění stavu (emulace) paměti EMS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_status.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_status.asm</a></td></tr>
<tr><td>170</td><td>ems_total_mem.asm</td><td>získání celkové kapacity paměti EMS v&nbsp;blocích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_total_mem.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_total_mem.asm</a></td></tr>
<tr><td>171</td><td>ems_free_mem.asm </td><td>získání volné kapacity paměti EMS v&nbsp;blocích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_free_mem.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_free_mem.asm</a></td></tr>
<tr><td>172</td><td>xms_free_mem.asm </td><td>získání volné kapacity paměti XMS v&nbsp;blocích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/xms_free_mem.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/xms_free_mem.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>173</td><td>vga_320x200_short_address_1.asm</td><td>blokový přenos provedený v&nbsp;rámci prostoru segmentu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_1.asm</a></td></tr>
<tr><td>174</td><td>vga_320x200_short_address_2.asm</td><td>rozepsaný blokový přenos provedený v&nbsp;rámci prostoru segmentu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_2.asm</a></td></tr>
<tr><td>175</td><td>vga_320x200_short_address_3.asm</td><td>přenos nelze provést přes hranici offsetu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_3.asm</a></td></tr>
<tr><td>176</td><td>vga_320x200_short_address_4.asm</td><td>přenos nelze provést přes hranici offsetu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_4.asm</a></td></tr>
<tr><td>177</td><td>vga_320x200_long_address_1.asm</td><td>32bitový blokový přenos</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_1.asm</a></td></tr>
<tr><td>178</td><td>vga_320x200_long_address_2.asm</td><td>rozepsaný 32bitový blokový přenos provedený v&nbsp;rámci prostoru segmentu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_2.asm</a></td></tr>
<tr><td>179</td><td>vga_320x200_long_address_3.asm</td><td>přístup do obrazové paměti přes segment 0x0000 a 32bitový offset</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_3.asm</a></td></tr>
<tr><td>180</td><td>vga_320x200_long_address_4.asm</td><td>otestování, jak lze přenášet data s&nbsp;využitím 32bitového offsetu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>181</td><td>print_msw.asm</td><td>přečtení a zobrazení obsahu speciálního registru MSW</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/print_msw.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/print_msw.asm</a></td></tr>
<tr><td>182</td><td>print_cr0.asm</td><td>přečtení a zobrazení obsahu speciálního registru <strong>CR0</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/print_cr0.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/print_cr0.asm</a></td></tr>
<tr><td>183</td><td>prot_mode_286.asm</td><td>přechod do chráněného režimu na čipech Intel 80286</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_286.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_286.asm</a></td></tr>
<tr><td>184</td><td>prot_mode_386.asm</td><td>přechod do chráněného režimu na čipech Intel 80386</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_386.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_386.asm</a></td></tr>
<tr><td>185</td><td>prot_mode_back_to_real_mode_286.asm</td><td>přechod mezi reálným režimem a chráněným režimem i zpět na čipech Intel 80286</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_back_to_real_mode_286.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_back_to_real_mode_286.asm</a></td></tr>
<tr><td>186</td><td>prot_mode_back_to_real_mode_386.asm</td><td>přechod mezi reálným režimem a chráněným režimem i zpět na čipech Intel 80386</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_back_to_real_mode_386.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_back_to_real_mode_386.asm</a></td></tr>
<tr><td>187</td><td>prot_mode_check.asm</td><td>test, zda se mikroprocesor již nachází v&nbsp;chráněném režimu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_check.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_check.asm</a></td></tr>
<tr><td>188</td><td>unreal_mode.asm</td><td>nastavení nereálného režimu (platné pro Intel 80386)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/unreal_mode.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/unreal_mode.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>189</td><td>float32_constants.asm</td><td>vytištění základních FP konstant typu <i>single</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/float32_constants.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/float32_constants.asm</a></td></tr>
<tr><td>190</td><td>float64_constants.asm</td><td>vytištění základních FP konstant typu <i>double</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/float64_constants.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/float64_constants.asm</a></td></tr>
<tr><td>191</td><td>fpu_arithmetic.asm</td><td>základní aritmetické operace prováděné matematickým koprocesorem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_arithmetic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_arithmetic.asm</a></td></tr>
<tr><td>192</td><td>fpu_divide_by_zero.asm</td><td>dělení nulou matematickým koprocesorem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide_by_zero.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide_by_zero.asm</a></td></tr>
<tr><td>193</td><td>fpu_divide_by_neg_zero.asm </td><td>dělení záporné hodnoty nulou matematickým koprocesorem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide_by_neg_zero.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide_by_neg_zero.asm</a></td></tr>
<tr><td>194</td><td>fpu_divide_by_neg_zero_2.asm </td><td>dělení hodnoty zápornou nulou matematickým koprocesorem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide_by_neg_zero_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide_by_neg_zero_2.asm</a></td></tr>
<tr><td>195</td><td>fpu_divide_zero_by_zero.asm</td><td>výpočet 0/0 matematickým koprocesorem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide_zero_by_zero.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide_zero_by_zero.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>196</td><td>io.asm</td><td>pomocná makra pro komunikaci s&nbsp;DOSem a BIOSem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm</a></td></tr>
<tr><td>197</td><td>print.asm</td><td>pomocná makra pro tisk FPU hodnot typu <i>single</i> a <i>double</i> v&nbsp;hexadecimálním tvaru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/print.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/print.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>198</td><td>fpu_divide.asm</td><td>operace podílu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide.asm</a></td></tr>
<tr><td>199</td><td>fpu_divide_r.asm</td><td>operace podílu s&nbsp;prohozenými operandy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide_r.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_divide_r.asm</a></td></tr>
<tr><td>200</td><td>fpu_sqrt.asm</td><td>výpočet druhé odmocniny</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_sqrt.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_sqrt.asm</a></td></tr>
<tr><td>201</td><td>fpu_sqrt_neg_value.asm</td><td>výpočet druhé odmocniny ze záporné hodnoty</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_sqrt_neg_value.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_sqrt_neg_value.asm</a></td></tr>
<tr><td>202</td><td>fpu_check.asm</td><td>detekce typu matematického koprocesoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_check.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_check.asm</a></td></tr>
<tr><td>203</td><td>fpu_compare.asm</td><td>porovnání dvou hodnot s&nbsp;vyhodnocením výsledku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_compare.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_compare.asm</a></td></tr>
<tr><td>204</td><td>fpu_status_word.asm</td><td>tisk obsahu stavového slova koprocesoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_status_word.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_status_word.asm</a></td></tr>
<tr><td>205</td><td>fpu_status_word_stack.asm</td><td>tisk obsahu stavového slova koprocesoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_status_word_stack.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_status_word_stack.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>206</td><td>fpu_exceptions_IE_ZO.asm</td><td>detekce výjimek IE a ZE matematickým koprocesorem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_exceptions_IE_ZO.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_exceptions_IE_ZO.asm</a></td></tr>
<tr><td>207</td><td>fpu_exceptions_OE.asm</td><td>detekce výjimky OE matematickým koprocesorem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_exceptions_OE.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_exceptions_OE.asm</a></td></tr>
<tr><td>208</td><td>fpu_fxam.asm</td><td>analýza hodnoty na vrcholu zásobníku instrukcí <strong>FXAM</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_fxam.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_fxam.asm</a></td></tr>
<tr><td>209</td><td>fpu_ftst.asm</td><td>analýza hodnoty na vrcholu zásobníku instrukcí <strong>FTST</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_ftst.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_ftst.asm</a></td></tr>
<tr><td>210</td><td>fpu_fcompp.asm</td><td>porovnání dvou hodnot instrukcí <strong>FCOMPP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_fcompp.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_fcompp.asm</a></td></tr>
<tr><td>211</td><td>fpu_test.asm</td><td>test hodnoty uložené na vrcholu zásobníku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_test.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/fpu_test.asm</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>DOSBox<br />
<a href="https://www.dosbox.com/">https://www.dosbox.com/</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Hercules Graphics Card (HCG)<br />
<a href="https://en.wikipedia.org/wiki/Hercules_Graphics_Card">https://en.wikipedia.org/wiki/Hercules_Graphics_Card</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf">https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://yassinebridi.github.io/asm-docs/8086_instruction_set.html">https://yassinebridi.github.io/asm-docs/8086_instruction_set.html</a>
</li>

<li>8088 MPH by Hornet + CRTC + DESiRE (final version)<br />
<a href="https://www.youtube.com/watch?v=hNRO7lno_DM">https://www.youtube.com/watch?v=hNRO7lno_DM</a>
</li>

<li>Area 5150 by CRTC &amp; Hornet (Party Version) / IBM PC+CGA Demo, Hardware Capture<br />
<a href="https://www.youtube.com/watch?v=fWDxdoRTZPc">https://www.youtube.com/watch?v=fWDxdoRTZPc</a>
</li>

<li>80x86 Integer Instruction Set Timings (8088 - Pentium)<br />
<a href="http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf">http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf</a>
</li>

<li>Colour Graphics Adapter: Notes<br />
<a href="https://www.seasip.info/VintagePC/cga.html">https://www.seasip.info/VintagePC/cga.html</a>
</li>

<li>Restoring A Vintage CGA Card With Homebrew HASL<br />
<a href="https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/">https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/</a>
</li>

<li>Demoing An 8088<br />
<a href="https://hackaday.com/2015/04/10/demoing-an-8088/">https://hackaday.com/2015/04/10/demoing-an-8088/</a>
</li>

<li>Video Memory Layouts<br />
<a href="http://www.techhelpmanual.com/89-video_memory_layouts.html">http://www.techhelpmanual.com/89-video_memory_layouts.html</a>
</li>

<li>Screen Attributes<br />
<a href="http://www.techhelpmanual.com/87-screen_attributes.html">http://www.techhelpmanual.com/87-screen_attributes.html</a>
</li>

<li>IBM PC Family  -  BIOS Video Modes<br />
<a href="https://www.minuszerodegrees.net/video/bios_video_modes.htm">https://www.minuszerodegrees.net/video/bios_video_modes.htm</a>
</li>

<li>EGA Functions<br />
<a href="https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega">https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega</a>
</li>

<li>Why the EGA can only use 16 of its 64 colours in 200-line modes<br />
<a href="https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/">https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/</a>
</li>

<li>How 16 colors saved PC gaming - the story of EGA graphics<br />
<a href="https://www.custompc.com/retro-tech/ega-graphics">https://www.custompc.com/retro-tech/ega-graphics</a>
</li>

<li>List of 16-bit computer color palettes<br />
<a href="https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes">https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes</a>
</li>

<li>Why were those colors chosen to be the default palette for 256-color VGA?<br />
<a href="https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga">https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga</a>
</li>

<li>VGA Color Palettes<br />
<a href="https://www.fountainware.com/EXPL/vga_color_palettes.htm">https://www.fountainware.com/EXPL/vga_color_palettes.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page<br />
<a href="http://www.osdever.net/FreeVGA/vga/vga.htm">http://www.osdever.net/FreeVGA/vga/vga.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page - sequencer<br />
<a href="http://www.osdever.net/FreeVGA/vga/seqreg.htm">http://www.osdever.net/FreeVGA/vga/seqreg.htm</a>
</li>

<li>VGA Basics<br />
<a href="http://www.brackeen.com/vga/basics.html">http://www.brackeen.com/vga/basics.html</a>
</li>

<li>Introduction to VGA Mode 'X'<br />
<a href="https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html">https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html</a>
</li>

<li>VGA Mode-X<br />
<a href="https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp">https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp</a>
</li>

<li>Mode-X: 256-Color VGA Magic<br />
<a href="https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf">https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf</a>
</li>

<li>Instruction Format in 8086 Microprocessor<br />
<a href="https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx">https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx</a>
</li>

<li>How to use "AND," "OR," and "XOR" modes for VGA Drawing<br />
<a href="https://retrocomputing.stackexchange.com/questions/21936/how-to-use-and-or-and-xor-modes-for-vga-drawing">https://retrocomputing.stackexchange.com/questions/21936/how-to-use-and-or-and-xor-modes-for-vga-drawing</a>
</li>

<li>VGA Hardware<br />
<a href="https://wiki.osdev.org/VGA_Hardware">https://wiki.osdev.org/VGA_Hardware</a>
</li>

<li>Programmer's Guide to Yamaha YMF 262/OPL3 FM Music Synthesizer<br />
<a href="https://moddingwiki.shikadi.net/wiki/OPL_chip">https://moddingwiki.shikadi.net/wiki/OPL_chip</a>
</li>

<li>Does anybody understand how OPL2 percussion mode works?<br />
<a href="https://forum.vcfed.org/index.php?threads/does-anybody-understand-how-opl2-percussion-mode-works.60925/">https://forum.vcfed.org/index.php?threads/does-anybody-understand-how-opl2-percussion-mode-works.60925/</a>
</li>

<li>Yamaha YMF262 OPL3 music - MoonDriver for OPL3 DEMO [Oscilloscope View]<br />
<a href="https://www.youtube.com/watch?v=a7I-QmrkAak">https://www.youtube.com/watch?v=a7I-QmrkAak</a>
</li>

<li>Yamaha OPL vs OPL2 vs OPL3 comparison<br />
<a href="https://www.youtube.com/watch?v=5knetge5Gs0">https://www.youtube.com/watch?v=5knetge5Gs0</a>
</li>

<li>OPL3 Music Crockett's Theme<br />
<a href="https://www.youtube.com/watch?v=HXS008pkgSQ">https://www.youtube.com/watch?v=HXS008pkgSQ</a>
</li>

<li>Bad Apple (Adlib Tracker - OPL3)<br />
<a href="https://www.youtube.com/watch?v=2lEPH6Y3Luo">https://www.youtube.com/watch?v=2lEPH6Y3Luo</a>
</li>

<li>FM Synthesis Chips, Codecs and DACs<br />
<a href="https://www.dosdays.co.uk/topics/fm_synthesizers.php">https://www.dosdays.co.uk/topics/fm_synthesizers.php</a>
</li>

<li>The Zen Challenge - YMF262 OPL3 Original (For an upcoming game)<br />
<a href="https://www.youtube.com/watch?v=6JlFIFz1CFY">https://www.youtube.com/watch?v=6JlFIFz1CFY</a>
</li>

<li>[adlib tracker II techno music - opl3] orbit around alpha andromedae I<br />
<a href="https://www.youtube.com/watch?v=YqxJCu_WFuA">https://www.youtube.com/watch?v=YqxJCu_WFuA</a>
</li>

<li>[adlib tracker 2 music - opl3 techno] hybridisation process on procyon-ii<br />
<a href="https://www.youtube.com/watch?v=daSV5mN0sJ4">https://www.youtube.com/watch?v=daSV5mN0sJ4</a>
</li>

<li>Hyper Duel - Black Rain (YMF262 OPL3 Cover)<br />
<a href="https://www.youtube.com/watch?v=pu_mzRRq8Ho">https://www.youtube.com/watch?v=pu_mzRRq8Ho</a>
</li>

<li>IBM 5155-5160 Technical Reference<br />
<a href="https://www.minuszerodegrees.net/manuals/IBM/IBM_5155_5160_Technical_Reference_6280089_MAR86.pdf">https://www.minuszerodegrees.net/manuals/IBM/IBM_5155_5160_Technical_Reference_6280089_MAR86.pdf</a>
</li>

<li>a ymf262/opl3+pc speaker thing i made<br />
<a href="https://www.youtube.com/watch?v=E-Mx0lEmnZ0">https://www.youtube.com/watch?v=E-Mx0lEmnZ0</a>
</li>

<li>[OPL3] Like a Thunder<br />
<a href="https://www.youtube.com/watch?v=MHf06AGr8SU">https://www.youtube.com/watch?v=MHf06AGr8SU</a>
</li>

<li>(PC SPEAKER) bad apple<br />
<a href="https://www.youtube.com/watch?v=LezmKIIHyUg">https://www.youtube.com/watch?v=LezmKIIHyUg</a>
</li>

<li>Powering devices from PC parallel port<br />
<a href="http://www.epanorama.net/circuits/lptpower.html">http://www.epanorama.net/circuits/lptpower.html</a>
</li>

<li>Magic Mushroom (demo pro PC s DOSem)<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards//mushroom.rar">http://www.crossfire-designs.de/download/articles/soundcards//mushroom.rar</a>
</li>

<li>Píseň Magic Mushroom - originál<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_converted.mp3">http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_converted.mp3</a>
</li>

<li>Píseň Magic Mushroom - hráno na PC Speakeru<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_speaker.mp3">http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_speaker.mp3</a>
</li>

<li>Pulse Width Modulation (PWM) Simulation Example<br />
<a href="http://decibel.ni.com/content/docs/DOC-4599">http://decibel.ni.com/content/docs/DOC-4599</a>
</li>

<li>Resistor/Pulse Width Modulation DAC<br />
<a href="http://www.k9spud.com/traxmod/pwmdac.php">http://www.k9spud.com/traxmod/pwmdac.php</a>
</li>

<li>Class D Amplifier<br />
<a href="http://en.wikipedia.org/wiki/Electronic_amplifier#Class_D">http://en.wikipedia.org/wiki/Electronic_amplifier#Class_D</a>
</li>

<li>Covox Speech Thing / Disney Sound Source (1986)<br />
<a href="http://www.crossfire-designs.de/index.php?lang=en&amp;what=articles&amp;name=showarticle.htm&amp;article=soundcards/&amp;page=5">http://www.crossfire-designs.de/index.php?lang=en&amp;what=articles&amp;name=showarticle.htm&amp;article=soundcards/&amp;page=5</a>
</li>

<li>Covox Digital-Analog Converter (Rusky, obsahuje schémata)<br />
<a href="http://phantom.sannata.ru/konkurs/netskater002.shtml">http://phantom.sannata.ru/konkurs/netskater002.shtml</a>
</li>

<li>PC-GPE on the Web<br />
<a href="http://bespin.org/~qz/pc-gpe/">http://bespin.org/~qz/pc-gpe/</a>
</li>

<li>Keyboard Synthesizer<br />
<a href="http://www.solarnavigator.net/music/instruments/keyboards.htm">http://www.solarnavigator.net/music/instruments/keyboards.htm</a>
</li>

<li>FMS - Fully Modular Synthesizer<br />
<a href="http://fmsynth.sourceforge.net/">http://fmsynth.sourceforge.net/</a>
</li>

<li>Javasynth<br />
<a href="http://javasynth.sourceforge.net/">http://javasynth.sourceforge.net/</a>
</li>

<li>Software Sound Synthesis &amp; Music Composition Packages<br />
<a href="http://www.linux-sound.org/swss.html">http://www.linux-sound.org/swss.html</a>
</li>

<li>Mx44.1 Download Page (software synthesizer for linux)<br />
<a href="http://hem.passagen.se/ja_linux/">http://hem.passagen.se/ja_linux/</a>
</li>

<li>Software synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Software_synthesizer">http://en.wikipedia.org/wiki/Software_synthesizer</a>
</li>

<li>Frequency modulation synthesis<br />
<a href="http://en.wikipedia.org/wiki/Frequency_modulation_synthesis">http://en.wikipedia.org/wiki/Frequency_modulation_synthesis</a>
</li>

<li>Yamaha DX7<br />
<a href="http://en.wikipedia.org/wiki/Yamaha_DX7">http://en.wikipedia.org/wiki/Yamaha_DX7</a>
</li>

<li>Wave of the Future<br />
<a href="http://www.wired.com/wired/archive/2.03/waveguides_pr.html">http://www.wired.com/wired/archive/2.03/waveguides_pr.html</a>
</li>

<li>Analog synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Analog_synthesizer">http://en.wikipedia.org/wiki/Analog_synthesizer</a>
</li>

<li>Minimoog<br />
<a href="http://en.wikipedia.org/wiki/Minimoog">http://en.wikipedia.org/wiki/Minimoog</a>
</li>

<li>Moog synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Moog_synthesizer">http://en.wikipedia.org/wiki/Moog_synthesizer</a>
</li>

<li>Tutorial for Frequency Modulation Synthesis<br />
<a href="http://www.sfu.ca/~truax/fmtut.html">http://www.sfu.ca/~truax/fmtut.html</a>
</li>

<li>An Introduction To FM<br />
<a href="http://ccrma.stanford.edu/software/snd/snd/fm.html">http://ccrma.stanford.edu/software/snd/snd/fm.html</a>
</li>

<li>John Chowning<br />
<a href="http://en.wikipedia.org/wiki/John_Chowning">http://en.wikipedia.org/wiki/John_Chowning</a>
</li>

<li>I'm Impressed, Adlib Music is AMAZING!<br />
<a href="https://www.youtube.com/watch?v=PJNjQYp1ras">https://www.youtube.com/watch?v=PJNjQYp1ras</a>
</li>

<li>Milinda- Diode Milliampere ( OPL3 )<br />
<a href="https://www.youtube.com/watch?v=oNhazT5HG0E">https://www.youtube.com/watch?v=oNhazT5HG0E</a>
</li>

<li>Dune 2 - Roland MT-32 Soundtrack <br />
<a href="https://www.youtube.com/watch?v=kQADZeB-z8M">https://www.youtube.com/watch?v=kQADZeB-z8M</a>
</li>

<li>Interrupts<br />
<a href="https://wiki.osdev.org/Interrupts#Types_of_Interrupts">https://wiki.osdev.org/Interrupts#Types_of_Interrupts</a>
</li>

<li>Assembly8086SoundBlasterDmaSingleCycleMode<br />
<a href="https://github.com/leonardo-ono/Assembly8086SoundBlasterDmaSingleCycleMode/blob/master/sbsc.asm">https://github.com/leonardo-ono/Assembly8086SoundBlasterDmaSingleCycleMode/blob/master/sbsc.asm</a>
</li>

<li>Interrupts in 8086 microprocessor<br />
<a href="https://www.geeksforgeeks.org/interrupts-in-8086-microprocessor/">https://www.geeksforgeeks.org/interrupts-in-8086-microprocessor/</a>
</li>

<li>Interrupt Structure of 8086<br />
<a href="https://www.eeeguide.com/interrupt-structure-of-8086/">https://www.eeeguide.com/interrupt-structure-of-8086/</a>
</li>

<li>A20 line<br />
<a href="https://en.wikipedia.org/wiki/A20_line">https://en.wikipedia.org/wiki/A20_line</a>
</li>

<li>Extended memory<br />
<a href="https://en.wikipedia.org/wiki/Extended_memory#eXtended_Memory_Specification_(XMS)">https://en.wikipedia.org/wiki/Extended_memory#eXtended_Memory_Specification_(XMS)</a>
</li>

<li>Expanded memory<br />
<a href="https://en.wikipedia.org/wiki/Expanded_memory">https://en.wikipedia.org/wiki/Expanded_memory</a>
</li>

<li>Protected mode<br />
<a href="https://en.wikipedia.org/wiki/Protected_mode">https://en.wikipedia.org/wiki/Protected_mode</a>
</li>

<li>Virtual 8086 mode<br />
<a href="https://en.wikipedia.org/wiki/Virtual_8086_mode">https://en.wikipedia.org/wiki/Virtual_8086_mode</a>
</li>

<li>Unreal mode<br />
<a href="https://en.wikipedia.org/wiki/Unreal_mode">https://en.wikipedia.org/wiki/Unreal_mode</a>
</li>

<li>DOS memory management<br />
<a href="https://en.wikipedia.org/wiki/DOS_memory_management">https://en.wikipedia.org/wiki/DOS_memory_management</a>
</li>

<li>Upper memory area<br />
<a href="https://en.wikipedia.org/wiki/Upper_memory_area">https://en.wikipedia.org/wiki/Upper_memory_area</a>
</li>

<li>Removing the Mystery from SEGMENT : OFFSET Addressing<br />
<a href="https://thestarman.pcministry.com/asm/debug/Segments.html">https://thestarman.pcministry.com/asm/debug/Segments.html</a>
</li>

<li>Segment descriptor<br />
<a href="https://en.wikipedia.org/wiki/Segment_descriptor">https://en.wikipedia.org/wiki/Segment_descriptor</a>
</li>

<li>When using a 32-bit register to address memory in the real mode, contents of the register must never exceed 0000FFFFH. Why?<br />
<a href="https://stackoverflow.com/questions/45094696/when-using-a-32-bit-register-to-address-memory-in-the-real-mode-contents-of-the">https://stackoverflow.com/questions/45094696/when-using-a-32-bit-register-to-address-memory-in-the-real-mode-contents-of-the</a>
</li>

<li>A Brief History of Unreal Mode<br />
<a href="https://www.os2museum.com/wp/a-brief-history-of-unreal-mode/">https://www.os2museum.com/wp/a-brief-history-of-unreal-mode/</a>
</li>

<li>Segment Limits<br />
<a href="https://wiki.osdev.org/Segment_Limits">https://wiki.osdev.org/Segment_Limits</a>
</li>

<li>How do 32 bit addresses in real mode work?<br />
<a href="https://forum.osdev.org/viewtopic.php?t=30642">https://forum.osdev.org/viewtopic.php?t=30642</a>
</li>

<li>The LOADALL Instruction by Robert Collins<br />
<a href="https://www.rcollins.org/articles/loadall/tspec_a3_doc.html">https://www.rcollins.org/articles/loadall/tspec_a3_doc.html</a>
</li>

<li>How do you put a 286 in Protected Mode?<br />
<a href="https://retrocomputing.stackexchange.com/questions/7683/how-do-you-put-a-286-in-protected-mode">https://retrocomputing.stackexchange.com/questions/7683/how-do-you-put-a-286-in-protected-mode</a>
</li>

<li>Control register<br />
<a href="https://en.wikipedia.org/wiki/Control_register">https://en.wikipedia.org/wiki/Control_register</a>
</li>

<li>CPU Registers x86<br />
<a href="https://wiki.osdev.org/CPU_Registers_x86">https://wiki.osdev.org/CPU_Registers_x86</a>
</li>

<li>x86 Assembly/Protected Mode<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Protected_Mode">https://en.wikibooks.org/wiki/X86_Assembly/Protected_Mode</a>
</li>

<li>MSW: Machine Status Word<br />
<a href="https://web.itu.edu.tr/kesgin/mul06/intel/intel_msw.html">https://web.itu.edu.tr/kesgin/mul06/intel/intel_msw.html</a>
</li>

<li>80x87 Floating Point Opcodes<br />
<a href="http://www.techhelpmanual.com/876-80x87_floating_point_opcodes.html">http://www.techhelpmanual.com/876-80x87_floating_point_opcodes.html</a>
</li>

<li>Page Translation<br />
<a href="https://pdos.csail.mit.edu/6.828/2005/readings/i386/s05_02.htm">https://pdos.csail.mit.edu/6.828/2005/readings/i386/s05_02.htm</a>
</li>

<li>80386 Paging and Segmenation<br />
<a href="https://stackoverflow.com/questions/38229741/80386-paging-and-segmenation">https://stackoverflow.com/questions/38229741/80386-paging-and-segmenation</a>
</li>

<li>80386 Memory Management<br />
<a href="https://tldp.org/LDP/khg/HyperNews/get/memory/80386mm.html">https://tldp.org/LDP/khg/HyperNews/get/memory/80386mm.html</a>
</li>

<li>DOSEMU<br />
<a href="http://www.dosemu.org/">http://www.dosemu.org/</a>
</li>

<li>Intel 80386, a revolutionary CPU<br />
<a href="https://www.xtof.info/intel80386.html">https://www.xtof.info/intel80386.html</a>
</li>

<li>PAI Unit 3 Paging in 80386 Microporcessor<br />
<a href="https://www.slideshare.net/KanchanPatil34/pai-unit-3-paging-in-80386-microporcessor">https://www.slideshare.net/KanchanPatil34/pai-unit-3-paging-in-80386-microporcessor</a>
</li>

<li>64 Terabytes of virtual memory for 32-bit x86 using segmentation: how?<br />
<a href="https://stackoverflow.com/questions/5444984/64-terabytes-of-virtual-memory-for-32-bit-x86-using-segmentation-how">https://stackoverflow.com/questions/5444984/64-terabytes-of-virtual-memory-for-32-bit-x86-using-segmentation-how</a>
</li>

<li>Pi in the Pentium: reverse-engineering the constants in its floating-point unit<br />
<a href="http://www.righto.com/2025/01/pentium-floating-point-ROM.html">http://www.righto.com/2025/01/pentium-floating-point-ROM.html</a>
</li>

<li>Simply FPU<br />
<a href="http://www.website.masmforum.com/tutorials/fptute/">http://www.website.masmforum.com/tutorials/fptute/</a>
</li>

<li>Art of Assembly language programming: The 80x87 Floating Point Coprocessors<br />
<a href="https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-3.html">https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-3.html</a>
</li>

<li>Art of Assembly language programming: The FPU Instruction Set<br />
<a href="https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-4.html">https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-4.html</a>
</li>

<li>INTEL 80387 PROGRAMMER'S REFERENCE MANUAL<br />
<a href="http://www.ragestorm.net/downloads/387intel.txt">http://www.ragestorm.net/downloads/387intel.txt</a>
</li>

<li>x86 Instruction Set Reference: FLD<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_100.html">http://x86.renejeschke.de/html/file_module_x86_id_100.html</a>
</li>

<li>x86 Instruction Set Reference: FLD1/FLDL2T/FLDL2E/FLDPI/FLDLG2/FLDLN2/FLDZ<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_101.html">http://x86.renejeschke.de/html/file_module_x86_id_101.html</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>8087 Numeric Data Processor<br />
<a href="https://www.eeeguide.com/8087-numeric-data-processor/">https://www.eeeguide.com/8087-numeric-data-processor/</a>
</li>

<li>Data Types and Instruction Set of 8087 co-processor<br />
<a href="https://www.eeeguide.com/data-types-and-instruction-set-of-8087-co-processor/">https://www.eeeguide.com/data-types-and-instruction-set-of-8087-co-processor/</a>
</li>

<li>8087 instruction set and examples<br />
<a href="https://studylib.net/doc/5625221/8087-instruction-set-and-examples">https://studylib.net/doc/5625221/8087-instruction-set-and-examples</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

