<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        print message

        push cs
        pop  es   <i>; ES:DI obsahuje adresu prvniho znaku ve zprave</i>
        mov  di, message

        push cs
        pop  ds   <i>; DS:SI obsahuje adresu prvniho znaku ve zprave</i>
        mov  si, replacement

        mov  cx, 12 <i>; pocet prepisovanych znaku</i>
opak:
        lodsb     <i>; precteni znaku a posun adresy</i>
        stosb     <i>; zapis znaku a posun adresy</i>
        loop opak

        print message

        wait_key
        exit

        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
message     db "Hello, world!", 0x0d, 0x0a, "$"
replacement db "Zdravim svet"
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        print message

        push cs
        pop  es   <i>; ES:DI obsahuje adresu prvniho znaku ve zprave</i>
        mov  di, message

        push cs
        pop  ds   <i>; DS:SI obsahuje adresu prvniho znaku ve zprave</i>
        mov  si, replacement

        mov  cx, 12 <i>; pocet prepisovanych znaku</i>
opak:
        movsb     <i>; precteni znaku a posun adresy</i>
                  <i>; zapis znaku a posun adresy</i>
        loop opak

        print message

        wait_key
        exit

        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
message     db "Hello, world!", 0x0d, 0x0a, "$"
replacement db "Zdravim svet"
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        print message

        push cs
        pop  es   <i>; ES:DI obsahuje adresu prvniho znaku ve zprave</i>
        mov  di, message

        push cs
        pop  ds   <i>; DS:SI obsahuje adresu prvniho znaku ve zprave</i>
        mov  si, replacement

        mov  cx, 12 <i>; pocet prepisovanych znaku</i>
        rep movsb   <i>; precteni znaku a posun adresy</i>
                    <i>; zapis znaku a posun adresy</i>

        print message

        wait_key
        exit

        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
message     db "Hello, world!", 0x0d, 0x0a, "$"
replacement db "Zdravim svet"
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

        mov ax, cs
        mov ds, ax
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        mov cx, 320*200/2   <i>; pocet zapisovanych bajtu (=pixelu)</i>
        rep movsw           <i>; prenos celeho obrazku</i>

        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>


<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vykresleni rastroveho obrazku: prenos 65535 bajtu/pixelu</i>

<i>;-----------------------------------------------------------------------------</i>

BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>

<i>;-----------------------------------------------------------------------------</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

        mov ax, cs
        mov ds, ax
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        mov cx, 65535       <i>; pocet zapisovanych bajtu (=pixelu)</i>
        rep movsb           <i>; prenos celeho obrazku</i>

        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>


<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vykresleni rastroveho obrazku, prenos 0 bajtu.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_image_0B.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_image_0B.asm</i>


<i>;-----------------------------------------------------------------------------</i>

BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>

<i>;-----------------------------------------------------------------------------</i>


<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

        mov ax, cs
        mov ds, ax
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        xor cx, cx          <i>; pocet zapisovanych bajtu (=pixelu)</i>
        rep movsb           <i>; prenos celeho obrazku</i>

        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vykresleni rastroveho obrazku: prenos po slovech.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_image_movsw.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_image_movsw.asm</i>

<i>;-----------------------------------------------------------------------------</i>

BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>

<i>;-----------------------------------------------------------------------------</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

        mov ax, cs
        mov ds, ax
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        mov cx, 320*200/2   <i>; pocet zapisovanych slov (=dvoupixelu)</i>
        rep movsw           <i>; prenos celeho obrazku</i>

        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>


<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vykresleni rastroveho obrazku: prenos po 32bitovych slovech.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_image_movsd.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_image_movsd.asm</i>

<i>;-----------------------------------------------------------------------------</i>

BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 386         <i>; specifikace pouziteho instrukcniho souboru</i>

<i>;-----------------------------------------------------------------------------</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

        mov ax, cs
        mov ds, ax
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        mov cx, 320*200/4   <i>; pocet zapisovanych 32bitovych slov (=ctyrpixelu)</i>
        rep movsd           <i>; prenos celeho obrazku</i>

        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>


<pre>
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        print message

        push cs
        pop  es   <i>; ES:DI obsahuje adresu prvniho znaku ve zprave</i>
        mov  di, message

        mov al, " "   <i>; hledani mezery v retezci</i>
        repne scasb

        mov al, "*"   <i>; prepis mezery za hvezdicku</i>
        dec di
        stosb

        print message <i>; tisk upravene zpravy</i>

        wait_key
        exit

        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
message     db "Hello, world!", 0x0d, 0x0a, "$"
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vykresleni rastroveho obrazku: prenos po bajtech prekryvajici se oblasti.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_image_movsb_forward.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_image_movsb_forward.asm</i>

<i>;-----------------------------------------------------------------------------</i>

BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>

<i>;-----------------------------------------------------------------------------</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

        mov ax, cs
        mov ds, ax
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        mov cx, 320*100     <i>; pocet zapisovanych bajtu (=pixelu) odpovida 100 radkum</i>
        rep movsb           <i>; prenos celeho obrazku</i>

        wait_key            <i>; cekani na klavesu</i>

        <i>; nyni provedeme prenos bloku, kdyz se bude zdroj a cil prekryvat</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov ds, ax
        xor si, si          <i>; DS:SI ukazuje na zacatek video RAM (source)</i>

        mov es, ax
        mov di, 320*10      <i>; ES:DI ukazuje na zacatek radku cislo 10 ve video RAM (destination)</i>

        mov cx, 320*100     <i>; pocet zapisovanych bajtu (=pixelu) odpovida 100 radkum</i>
        rep movsb           <i>; prenos celeho obrazku</i>

        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>


<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vykresleni rastroveho obrazku: prenos po bajtech prekryvajici se oblasti.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_image_movsb_backward_1.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_image_movsb_backward_1.asm</i>

<i>;-----------------------------------------------------------------------------</i>

BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>

<i>;-----------------------------------------------------------------------------</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

        mov ax, cs
        mov ds, ax
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        mov cx, 320*100     <i>; pocet zapisovanych bajtu (=pixelu) odpovida 100 radkum</i>
        rep movsb           <i>; prenos celeho obrazku</i>

        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
        mov byte es:[di], 0 <i>; oznacime si levy horni roh cernym pixelem</i>

        wait_key            <i>; cekani na klavesu</i>

        <i>; nyni provedeme prenos bloku, kdyz se bude zdroj a cil prekryvat</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov ds, ax
        mov si, 320*100     <i>; konec bloku, ktery se ma prenest</i>
                            <i>; DS:SI ukazuje na zacatek video RAM (source)</i>

        mov es, ax
        mov di, 320*(100+10) <i>; ES:DI ukazuje na konec bloku, ktery se ma prenest (destination)</i>

        mov cx, 320*100     <i>; pocet zapisovanych bajtu (=pixelu) odpovida 100 radkum</i>
        std                 <i>; zmena smeru prenosu!</i>
        rep movsb           <i>; prenos celeho obrazku</i>

        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>


<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vykresleni rastroveho obrazku: prenos po bajtech prekryvajici se oblasti.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_image_movsb_backward_2.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_image_movsb_backward_2.asm</i>

<i>;-----------------------------------------------------------------------------</i>

BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>

<i>;-----------------------------------------------------------------------------</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>; paleta ve stupnich sedi</i>
%macro grayscale_palette 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
next_dac:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>

        mov ax, cs
        mov ds, ax
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>

        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        mov cx, 320*100     <i>; pocet zapisovanych bajtu (=pixelu) odpovida 100 radkum</i>
        rep movsb           <i>; prenos celeho obrazku</i>

        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
        mov byte es:[di], 0 <i>; oznacime si levy horni roh cernym pixelem</i>

        wait_key            <i>; cekani na klavesu</i>

        <i>; nyni provedeme prenos bloku, kdyz se bude zdroj a cil prekryvat</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov ds, ax
        mov si, 320*100-1   <i>; konec bloku, ktery se ma prenest</i>
                            <i>; DS:SI ukazuje na zacatek video RAM (source)</i>

        mov es, ax
        mov di, 320*(100+10)-1 <i>; ES:DI ukazuje na konec bloku, ktery se ma prenest (destination)</i>

        mov cx, 320*100     <i>; pocet zapisovanych bajtu (=pixelu) odpovida 100 radkum</i>
        std                 <i>; zmena smeru prenosu!</i>
        rep movsb           <i>; prenos celeho obrazku</i>

        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>

<i>; pridani binarnich dat s rastrovym obrazkem</i>
image:
    incbin "image_320x200.bin"
</pre>


<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>6845 - Motorola CRT Controller<br />
<a href="https://stanislavs.org/helppc/6845.html">https://stanislavs.org/helppc/6845.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>[adlib tracker II techno music - opl3] orbit around alpha andromedae I<br />
<a href="https://www.youtube.com/watch?v=YqxJCu_WFuA">https://www.youtube.com/watch?v=YqxJCu_WFuA</a>
</li>

<li>[adlib tracker 2 music - opl3 techno] hybridisation process on procyon-ii<br />
<a href="https://www.youtube.com/watch?v=daSV5mN0sJ4">https://www.youtube.com/watch?v=daSV5mN0sJ4</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

