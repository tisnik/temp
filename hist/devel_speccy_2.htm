<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Krátké zopakování z&nbsp;minula: symboly zastupující konkrétní hodnoty</a></p>
<p><a href="#k02">*** 2. Kódy barev a bitové operace podporované assemblerem <i>Pasmo</i></a></p>
<p><a href="#k03">*** 3. Automatické vygenerování &bdquo;loaderu&ldquo; pro obraz magnetofonové pásky</a></p>
<p><a href="#k04">*** 4. Mikroprocesor Zilog Z80 z&nbsp;pohledu programátora</a></p>
<p><a href="#k05">*** 5. Sada univerzálních a speciálních registrů</a></p>
<p><a href="#k06">*** 6. Sada instrukcí mikroprocesoru Z80</a></p>
<p><a href="#k07">*** 7. Proč se jména instrukcí na Z80 odlišují od Intel 8080?</a></p>
<p><a href="#k08">*** 8. Adresovací režimy a všudypřítomná instrukce <strong>LD</strong></a></p>
<p><a href="#k09">*** 9. Osmibitové aritmetické a logické operace</a></p>
<p><a href="#k10">*** 10. Šestnáctibitové operace</a></p>
<p><a href="#k11">*** 11. Jednoduchá počítaná programová smyčka: naivní varianta</a></p>
<p><a href="#k12">*** 12. Celková délka kódu, časování instrukcí</a></p>
<p><a href="#k13">*** 13. Zkrácení kódu pro vynulování použitých pracovních registrů</a></p>
<p><a href="#k14">*** 14. Optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</a></p>
<p><a href="#k15">*** 15. Optimalizace využití pracovních registrů</a></p>
<p><a href="#k16">*** 16. Náhrada registrového páru HL za index registry IX nebo IY?</a></p>
<p><a href="#k17">*** 17. Programová smyčka se šestnáctibitovým počitadlem: naivní varianta</a></p>
<p><a href="#k18">*** 18. Dosažení prakticky stejné rychlosti, jako v&nbsp;případě smyčky s&nbsp;osmibitovým počitadlem</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Krátké zopakování z&nbsp;minula: symboly zastupující konkrétní hodnoty</h2>

<pre>
        org <strong>$8000</strong>
&nbsp;
start:
        ld a,<strong>%11010110</strong>
        ld (<strong>$5800</strong>),a
        ret
</pre>

<pre>
attribute_adr equ $5800
entry_point   equ $8000
&nbsp;
&nbsp;
        org <strong>entry_point</strong>
&nbsp;
start:
        ld a,%11010110
        ld (<strong>attribute_adr</strong>),a
        ret
</pre>

<img src="https://i.iinfo.cz/images/342/devel-speccy-1-26.png" class="image-763288" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 1: Blikající atribut v&nbsp;levém horním rohu obrazovky.</i></p>

<img src="https://i.iinfo.cz/images/342/devel-speccy-1-27.png" class="image-763289" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 2: Blikající atribut v&nbsp;levém horním rohu obrazovky.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Kódy barev a bitové operace podporované assemblerem <i>Pasmo</i></h2>

<p></p>

<pre>
attribute_adr equ $5800
entry_point   equ $8000

blink_bit     equ %10000000
intensity_bit equ %01000000
black_color   equ %000
blue_color    equ %001
red_color     equ %010
magenta_color equ %011
green_color   equ %100
cyan_color    equ %101
yellow_color  equ %110
white_color   equ %111


        org entry_point

start:
        ld a,blink_bit | intensity_bit | (blue_color << 3) | white_color
        ld (attribute_adr),a
        ret
</pre>

<p></p>

<pre>
attribute_adr   EQU 5800
entry_point     EQU 8000
blink_bit       EQU 0080
intensity_bit   EQU 0040
black_color     EQU 0000
blue_color      EQU 0001
red_color       EQU 0002
magenta_color   EQU 0003
green_color     EQU 0004
cyan_color      EQU 0005
yellow_color    EQU 0006
white_color     EQU 0007
                ORG 8000
8000:           label start
8000:3ECF       LD A, CF
8002:320058     LD (5800), A
8005:C9         RET
Emiting TAP from 8000 to 8005
</pre>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000

BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111


        org ENTRY_POINT

start:
        ld a,BLINK_BIT | INTENSITY_BIT | (BLUE_COLOR << 3) | WHITE_COLOR
        ld (ATTRIBUTE_ADR),a
        ret
</pre>

<p></p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
                ORG 8000
8000:           label start
8000:3ECF       LD A, CF
8002:320058     LD (5800), A
8005:C9         RET
Emiting TAP from 8000 to 8005
</pre>

<img src="http://i.iinfo.cz/images/206/jones-1.png" class="image-177655" width="320" height="256" alt="&#160;" />
<p><i>Obrázek 2: Loading screen hry Indiana Jones a Chrám zkázy.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Automatické vygenerování &bdquo;loaderu&ldquo; pro obraz magnetofonové pásky</h2>

<p></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Mikroprocesor Zilog Z80 z&nbsp;pohledu programátora</h2>

<p></p>

<img src="http://i.iinfo.cz/images/206/jones-7.png" class="image-177661" width="320" height="256" alt="&#160;" />
<p><i>Obrázek 2: Tento obrázek jsem viděl dosti často.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Sada univerzálních a speciálních registrů</h2>

<p></p>

<table>
<tr><th></th><th></th></tr>
<tr><td></td><td></td></tr>
</table>

<img src="http://i.iinfo.cz/images/619/belegost-zx-1.png" class="image-177651" width="320" height="256" alt="&#160;" />
<p><i>Obrázek 3: Belegost pro ZX Spectrum &ndash; loading screen.</i></p>

<img src="http://i.iinfo.cz/images/619/belegost-zx-4.png" class="image-177654" width="320" height="256" alt="&#160;" />
<p><i>Obrázek 4: Belegost pro ZX Spectrum &ndash; grafické uživatelské
rozhraní hry.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Sada instrukcí mikroprocesoru Z80</h2>

<p></p>

<table>
<tr><th></th></tr>
<tr><td></td></tr>
<tr><td></td></tr>
<tr><td></td></tr>
<tr><td></td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Proč se jména instrukcí na Z80 odlišují od Intel 8080?</h2>

<p></p>

<table>
<tr><th>Zápis podle Intel 8080</th><th>Zápis podle Zilog Z80</th><th>Poznámka</th></tr>
<tr><td>MOV  A,A    </td><td>LD   A,A</td><td></td></tr>
<tr><td>MOV  A,B    </td><td>LD   A,B</td><td></td></tr>
<tr><td>MOV  A,M    </td><td>LD   A,(HL)</td><td></td></tr>
<tr><td>LDAX B      </td><td>LD   A,(BC)</td><td></td></tr>
<tr><td>LDAX D      </td><td>LD   A,(DE)</td><td></td></tr>
<tr><td>LDA  word   </td><td>LD   A,(word)</td><td></td></tr>
<tr><td>MOV  M,A    </td><td>LD   (HL),A</td><td></td></tr>
<tr><td>MVI  A,byte </td><td>LD   A,byte</td><td></td></tr>
<tr><td>STAX B      </td><td>LD   (BC),A</td><td></td></tr>
<tr><td>STAX D      </td><td>LD   (DE),A</td><td></td></tr>
<tr><td>LXI  B,word </td><td>LD   BC,word</td><td></td></tr>
<tr><td>LXI  SP,word</td><td>LD   SP,word</td><td></td></tr>
<tr><td>LHLD word   </td><td>LD   HL,(word)</td><td></td></tr>
<tr><td>SHLD word   </td><td>LD   (word),HL</td><td></td></tr>
<tr><td>SPHL        </td><td>LD   SP,HL</td><td></td></tr>
<tr><td>XCHG        </td><td>EX   DE,HL</td><td></td></tr>
<tr><td>XTHL        </td><td>EX   (SP),HL</td><td></td></tr>
<tr><td>ADD  A      </td><td>ADD  A,A</td><td></td></tr>
<tr><td>ADD  B      </td><td>ADD  A,B</td><td></td></tr>
<tr><td>ADD  M      </td><td>ADD  A,(HL)</td><td></td></tr>
<tr><td>SBB  A      </td><td>SBC  A</td><td></td></tr>
<tr><td>SBB  B      </td><td>SBC  B</td><td></td></tr>
<tr><td>SBB  M      </td><td>SBC  (HL)</td><td></td></tr>
<tr><td>DAD  B      </td><td>ADD  HL,BC</td><td></td></tr>
<tr><td>DAD  D      </td><td>ADD  HL,DE</td><td></td></tr>
<tr><td>DAD  H      </td><td>ADD  HL,HL</td><td></td></tr>
<tr><td>DAD  SP     </td><td>ADD  HL,SP</td><td></td></tr>
<tr><td>INR  A      </td><td>INC  A</td><td></td></tr>
<tr><td>INR  B      </td><td>INC  B</td><td></td></tr>
<tr><td>INR  M      </td><td>INC  (HL)</td><td></td></tr>
<tr><td>DCR  A      </td><td>DEC  A</td><td></td></tr>
<tr><td>DCR  B      </td><td>DEC  B</td><td></td></tr>
<tr><td>DCR  M      </td><td>DEC  (HL)</td><td></td></tr>
<tr><td>INX  B      </td><td>INC  BC</td><td></td></tr>
<tr><td>INX  D      </td><td>INC  DE</td><td></td></tr>
<tr><td>INX  H      </td><td>INC  HL</td><td></td></tr>
<tr><td>INX  SP     </td><td>INC  SP</td><td></td></tr>
<tr><td>DCX  B      </td><td>DEC  BC</td><td></td></tr>
<tr><td>DCX  D      </td><td>DEC  DE</td><td></td></tr>
<tr><td>DCX  H      </td><td>DEC  HL</td><td></td></tr>
<tr><td>DCX  SP     </td><td>DEC  SP</td><td></td></tr>
<tr><td>RLC         </td><td>RLCA</td><td></td></tr>
<tr><td>RRC         </td><td>RRCA</td><td></td></tr>
<tr><td>RAL         </td><td>RLA</td><td></td></tr>
<tr><td>RAR         </td><td>RRA</td><td></td></tr>
<tr><td>ANA  A      </td><td>AND  A</td><td></td></tr>
<tr><td>ANA  B      </td><td>AND  B</td><td></td></tr>
<tr><td>ANA  M      </td><td>AND (HL)</td><td></td></tr>
<tr><td>ANI  byte   </td><td>AND  byte</td><td></td></tr>
<tr><td>XRA  A      </td><td>XOR  A</td><td></td></tr>
<tr><td>XRA  B      </td><td>XOR  B</td><td></td></tr>
<tr><td>XRA  M      </td><td>XOR  (HL)</td><td></td></tr>
<tr><td>XRI  byte   </td><td>XOR  byte</td><td></td></tr>
<tr><td>ORA  A      </td><td>OR   A</td><td></td></tr>
<tr><td>ORA  B      </td><td>OR   B</td><td></td></tr>
<tr><td>ORA  M      </td><td>OR   (HL)</td><td></td></tr>
<tr><td>ORI  byte   </td><td>OR   byte</td><td></td></tr>
<tr><td>CMP  A      </td><td>CP   A</td><td></td></tr>
<tr><td>CMP  B      </td><td>CP   B</td><td></td></tr>
<tr><td>CMP  M      </td><td>CP   (HL)</td><td></td></tr>
<tr><td>CPI  byte   </td><td>CP   byte</td><td></td></tr>
<tr><td>JMP  address</td><td>JP   address</td><td></td></tr>
<tr><td>JNZ  address</td><td>JP   NZ,address</td><td></td></tr>
<tr><td>JZ   address</td><td>JP   Z,address</td><td></td></tr>
<tr><td>JNC  address</td><td>JP   NC,address</td><td></td></tr>
<tr><td>JC   address</td><td>JP   C,address</td><td></td></tr>
<tr><td>JPO  address</td><td>JP   PO,address</td><td></td></tr>
<tr><td>JPE  address</td><td>JP   PE,address</td><td></td></tr>
<tr><td>JP   address</td><td>JP   P,address</td><td></td></tr>
<tr><td>JM   address</td><td>JP   M,address</td><td></td></tr>
<tr><td>PCHL        </td><td>JP   (HL)</td><td></td></tr>
<tr><td>CALL address</td><td>CALL address</td><td></td></tr>
<tr><td>CNZ  address</td><td>CALL NZ,address</td><td></td></tr>
<tr><td>CZ   address</td><td>CALL Z,address</td><td></td></tr>
<tr><td>CNC  address</td><td>CALL NC,address</td><td></td></tr>
<tr><td>CC   address</td><td>CALL C,address</td><td></td></tr>
<tr><td>CPO  address</td><td>CALL PO,address</td><td></td></tr>
<tr><td>CPE  address</td><td>CALL PE,address</td><td></td></tr>
<tr><td>CP   address</td><td>CALL P,address</td><td></td></tr>
<tr><td>CM   address</td><td>CALL M,address</td><td></td></tr>
<tr><td>RNZ         </td><td>RET  NZ</td><td></td></tr>
<tr><td>RZ          </td><td>RET  Z</td><td></td></tr>
<tr><td>RNC         </td><td>RET  NC</td><td></td></tr>
<tr><td>RC          </td><td>RET  C</td><td></td></tr>
<tr><td>RPO         </td><td>RET  PO</td><td></td></tr>
<tr><td>RPE         </td><td>RET  PE</td><td></td></tr>
<tr><td>RP          </td><td>RET  P</td><td></td></tr>
<tr><td>RM          </td><td>RET  M</td><td></td></tr>
<tr><td>RST  0      </td><td>RST  0</td><td></td></tr>
<tr><td>RST  1      </td><td>RST  8</td><td></td></tr>
<tr><td>RST  2      </td><td>RST  10H</td><td></td></tr>
<tr><td>RST  3      </td><td>RST  18H</td><td></td></tr>
<tr><td>RST  4      </td><td>RST  20H</td><td></td></tr>
<tr><td>RST  5      </td><td>RST  28H</td><td></td></tr>
<tr><td>RST  6      </td><td>RST  30H</td><td></td></tr>
<tr><td>RST  7      </td><td>RST  38H</td><td></td></tr>
<tr><td>PUSH B      </td><td>PUSH BC</td><td></td></tr>
<tr><td>PUSH D      </td><td>PUSH DE</td><td></td></tr>
<tr><td>PUSH H      </td><td>PUSH HL</td><td></td></tr>
<tr><td>PUSH PSW    </td><td>PUSH AF</td><td></td></tr>
<tr><td>POP  B      </td><td>POP  BC</td><td></td></tr>
<tr><td>POP  D      </td><td>POP  DE</td><td></td></tr>
<tr><td>POP  H      </td><td>POP  HL</td><td></td></tr>
<tr><td>POP  PSW    </td><td>POP  AF</td><td></td></tr>
<tr><td>IN   byte   </td><td>IN   A,(byte)</td><td></td></tr>
<tr><td>OUT  byte   </td><td>OUT  (byte),A</td><td></td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Adresovací režimy a všudypřítomná instrukce <strong>LD</strong></h2>

<p></p>

<table>
<tr><th></th><th></th></tr>
<tr><td></td><td></td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Osmibitové aritmetické a logické operace</h2>

<p></p>

<table>
<tr><th>Instrukce</th><th>Operandy</th><th>Stručný popis instrukce</th></tr>
<tr><td></td><td></td><td></td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Šestnáctibitové operace</h2>

<p></p>

<table>
<tr><th>Instrukce</th><th>Operandy</th><th>Stručný popis instrukce</th></tr>
<tr><td></td><td></td><td></td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Jednoduchá počítaná programová smyčka: naivní varianta</h2>

<p></p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000

        org ENTRY_POINT

start:
        ld hl, ATTRIBUTE_ADR  <i>; adresa pro zápis</i>
        ld a, 0               <i>; zapisovaná hodnota</i>
        ld b, 0               <i>; počitadlo smyčky</i>

loop:
        ld (hl),a             <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy</i>
        inc a                 <i>; zvýšení zapisované hodnoty</i>
        dec b                 <i>; snížení hodnoty počitadla</i>
        jp NZ, loop           <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret

end ENTRY_POINT
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Celková délka kódu, časování instrukcí</h2>

<p></p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:210058     LD HL, 5800
8003:3E00       LD A, 00
8005:0600       LD B, 00
8007:           label loop
8007:77         LD (HL), A
8008:23         INC HL
8009:3C         INC A
800A:05         DEC B
800B:C20780     JP NZ, 8007
800E:C9         RET
800F:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800E
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zkrácení kódu pro vynulování použitých pracovních registrů</h2>

<p></p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000

        org ENTRY_POINT

start:
        ld hl, ATTRIBUTE_ADR  <i>; adresa pro zápis</i>
        xor a                 <i>; zapisovaná hodnota</i>
        ld b, a               <i>; počitadlo smyčky</i>

loop:
        ld (hl),a             <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy</i>
        inc a                 <i>; zvýšení zapisované hodnoty</i>
        dec b                 <i>; snížení hodnoty počitadla</i>
        jp NZ, loop           <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret

end ENTRY_POINT
</pre>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:210058     LD HL, 5800
8003:AF         XOR A
8004:47         LD B, A
8005:           label loop
8005:77         LD (HL), A
8006:23         INC HL
8007:3C         INC A
8008:05         DEC B
8009:C20580     JP NZ, 8005
800C:C9         RET
800D:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800C
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</h2>

<p></p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000

        org ENTRY_POINT

start:
        ld hl, ATTRIBUTE_ADR  <i>; adresa pro zápis</i>
        xor a                 <i>; zapisovaná hodnota</i>
        ld b, a               <i>; počitadlo smyčky</i>

loop:
        ld (hl),a             <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy</i>
        inc a                 <i>; zvýšení zapisované hodnoty</i>
        djnz loop             <i>; kombinace dec b + jp NZ, loop</i>
                              <i>; snížení hodnoty počitadla</i>
                              <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret

end ENTRY_POINT
</pre>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:210058     LD HL, 5800
8003:AF         XOR A
8004:47         LD B, A
8005:           label loop
8005:77         LD (HL), A
8006:23         INC HL
8007:3C         INC A
8008:10FB       DJNZ 8005
800A:C9         RET
800B:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800A
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Optimalizace využití pracovních registrů</h2>

<p></p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000

        org ENTRY_POINT

start:
        ld hl, ATTRIBUTE_ADR  <i>; adresa pro zápis</i>
        ld b, l               <i>; zapisovaná hodnota + počitadlo smyčky</i>

loop:
        ld (hl),l             <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy i zapisované hodnoty</i>
        djnz loop             <i>; kombinace dec b + jp NZ, loop</i>
                              <i>; snížení hodnoty počitadla</i>
                              <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret

end ENTRY_POINT
</pre>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:210058     LD HL, 5800
8003:45         LD B, L
8004:           label loop
8004:75         LD (HL), L
8005:23         INC HL
8006:10FC       DJNZ 8004
8008:C9         RET
8009:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8008
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Náhrada registrového páru HL za index registry IX nebo IY?</h2>

<p></p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000

        org ENTRY_POINT

start:
        ld ix, ATTRIBUTE_ADR  <i>; adresa pro zápis</i>
        xor a                 <i>; zapisovaná hodnota</i>
        ld b, a               <i>; počitadlo smyčky</i>

loop:
        ld (ix),a             <i>; zápis hodnoty na adresu (HL)</i>
        inc ix                <i>; zvýšení adresy</i>
        inc a                 <i>; zvýšení zapisované hodnoty</i>
        djnz loop             <i>; kombinace dec b + jp NZ, loop</i>
                              <i>; snížení hodnoty počitadla</i>
                              <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret

end ENTRY_POINT
</pre>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:DD210058   LD IX, 5800
8004:AF         XOR A
8005:47         LD B, A
8006:           label loop
8006:DD7700     LD (IX+00), A
8009:3C         INC A
800A:DD23       INC IX
800C:10F8       DJNZ 8006
800E:C9         RET
800F:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800E
</pre>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000

        org ENTRY_POINT

start:
        ld iy, ATTRIBUTE_ADR  <i>; adresa pro zápis</i>
        xor a                 <i>; zapisovaná hodnota</i>
        ld b, a               <i>; počitadlo smyčky</i>

loop:
        ld (iy),a             <i>; zápis hodnoty na adresu (HL)</i>
        inc iy                <i>; zvýšení adresy</i>
        inc a                 <i>; zvýšení zapisované hodnoty</i>
        djnz loop             <i>; kombinace dec b + jp NZ, loop</i>
                              <i>; snížení hodnoty počitadla</i>
                              <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret

end ENTRY_POINT
</pre>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:FD210058   LD IY, 5800
8004:AF         XOR A
8005:47         LD B, A
8006:           label loop
8006:FD7700     LD (IY+00), A
8009:FD23       INC IY
800B:3C         INC A
800C:10F8       DJNZ 8006
800E:C9         RET
800F:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800E
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Programová smyčka se šestnáctibitovým počitadlem: naivní varianta</h2>

<p></p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000

        org ENTRY_POINT

start:
        ld hl, ATTRIBUTE_ADR  <i>; adresa pro zápis</i>
        ld bc, 512            <i>; počitadlo smyčky</i>

loop:
        ld (hl),l             <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy i zapisované hodnoty</i>
        dec bc                <i>; snížení hodnoty počitadla</i>
        ld a,b
        or c
        jp NZ, loop           <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret

end ENTRY_POINT
</pre>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:210058     LD HL, 5800
8003:010002     LD BC, 0200
8006:           label loop
8006:75         LD (HL), L
8007:23         INC HL
8008:0B         DEC BC
8009:78         LD A, B
800A:B1         OR C
800B:C20680     JP NZ, 8006
800E:C9         RET
800F:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800E
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Dosažení prakticky stejné rychlosti, jako v&nbsp;případě smyčky s&nbsp;osmibitovým počitadlem</h2>

<p></p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000

        org ENTRY_POINT

start:
        ld hl, ATTRIBUTE_ADR  <i>; adresa pro zápis</i>
        ld a, 2               <i>; počet opakování bloku s 256 zápisy</i>
        ld b, 0

loop:
        ld (hl),l             <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy i zapisované hodnoty</i>
        djnz loop             <i>; vnitřní smyčka: blok s 256 zápisy</i>
        dec a                 <i>; počitadlo vnější smyčky</i>
        jp NZ, loop           <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret

end ENTRY_POINT
</pre>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:210058     LD HL, 5800
8003:3E02       LD A, 02
8005:0600       LD B, 00
8007:           label loop
8007:75         LD (HL), L
8008:23         INC HL
8009:10FC       DJNZ 8007
800B:3D         DEC A
800C:C20780     JP NZ, 8007
800F:C9         RET
8010:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800F
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
prozatím popsané demonstrační příklady určené pro překlad a spuštění na
osmibitovém domácím mikropočítači ZX Spectrum (libovolný model či jeho klon),
které jsou psány v&nbsp;assembleru mikroprocesoru Zilog Z80. Pro překlad těchto
demonstračních příkladů je možné použít například assembler <i>Pasmo</i>:</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01-color-attribute.asm</td><td>modifikace jednoho barvového atributu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm</a></td></tr>
<tr><td> 2</td><td>02-blinking-attribute.asm</td><td>barvový atribut s&nbsp;nastavením bitů pro blikání a vyšší intenzitu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm</a></td></tr>
<tr><td> 3</td><td>03-symbolic-names.asm</td><td>symbolická jména v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm</a></td></tr>
<tr><td> 4</td><td>04-operators.asm</td><td>operátory a operace se symbolickými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm</a></td></tr>
<tr><td> 5</td><td>05-better-symbols.asm</td><td>tradičnější symbolická jména</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm</a></td></tr>
<tr><td> 6</td><td>06-tapbas-v1.asm</td><td>vygenerování BASICovského loaderu (neúplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm</a></td></tr>
<tr><td> 7</td><td>07-tapbas-v2.asm</td><td>vygenerování BASICovského loaderu (úplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm</a></td></tr>
<tr><td> 8</td><td>08-loop.asm</td><td>jednoduchá počítaná programová smyčka: naivní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm</a></td></tr>
<tr><td> 9</td><td>09-loop.asm</td><td>programová smyčka: zkrácení kódu pro vynulování použitých pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm</a></td></tr>
<tr><td>10</td><td>10-loop.asm</td><td>programová smyčka: optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm</a></td></tr>
<tr><td>11</td><td>11-loop.asm</td><td>programová smyčka: optimalizace využití pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm</a></td></tr>
<tr><td>12</td><td>12-loop.asm</td><td>programová smyčka: použití pracovního registru IX</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm</a></td></tr>
<tr><td>13</td><td>13-loop.asm</td><td>programová smyčka: použití pracovního registru IY</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>Z80 Assembly Language for the ZX Spectrum Tutorial, Episode 1: The Basics<br />
<a href="https://www.youtube.com/watch?v=_J4ahkWtNYw">https://www.youtube.com/watch?v=_J4ahkWtNYw</a>
</li>

<li>Z80 assembly resources when starting programming in assembler<br />
<a href="https://www.youtube.com/watch?v=mjLHSnQmHV4">https://www.youtube.com/watch?v=mjLHSnQmHV4</a>
</li>

<li>Setting up Visual Studio Code with Pasmo, Sprite Example ZX Spectrum Next<br />
<a href="https://www.youtube.com/watch?v=lKDaFWPObLY">https://www.youtube.com/watch?v=lKDaFWPObLY</a>
</li>

<li>RetroCoder ZX Spectrum development (Z80 Assembly)- Day 1 - Hello World.asm<br />
<a href="https://www.youtube.com/watch?v=Xv6NAC--x24">https://www.youtube.com/watch?v=Xv6NAC--x24</a>
</li>

<li>Rozšíření paměti<br />
<a href="https://wiki.ilnx.cz/doku.php/lnxspectrum:memorymap">https://wiki.ilnx.cz/doku.php/lnxspectrum:memorymap</a>
</li>

<li>ZX-Spectrum 48K video memory map<br />
<a href="https://www.reddit.com/r/zxspectrum/comments/phi7lt/zxspectrum_48k_video_memory_map/">https://www.reddit.com/r/zxspectrum/comments/phi7lt/zxspectrum_48k_video_memory_map/</a>
</li>

<li>Memory Map: 48K Spectrum<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/memory-map">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/memory-map</a>
</li>

<li>ZX Basic: Git repository<br />
<a href="https://github.com/boriel/zxbasic">https://github.com/boriel/zxbasic</a>
</li>

<li>ZX Basic Wiki<br />
<a href="https://zxbasic.readthedocs.io/en/docs/">https://zxbasic.readthedocs.io/en/docs/</a>
</li>

<li>ZX Spectrum Games: svět osmibitové herní legendy<br />
<a href="https://www.zx-spectrum.cz/">https://www.zx-spectrum.cz/</a>
</li>

<li>TAP format<br />
<a href="https://sinclair.wiki.zxnet.co.uk/wiki/TAP_format">https://sinclair.wiki.zxnet.co.uk/wiki/TAP_format</a>
</li>

<li>Contended memory<br />
<a href="https://worldofspectrum.org/faq/reference/48kreference.htm#Contention">https://worldofspectrum.org/faq/reference/48kreference.htm#Contention</a>
</li>

<li>Screen Memory Layout<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/screen-memory-layout">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/screen-memory-layout</a>
</li>

<li>OpenSE BASIC<br />
<a href="https://zxdesign.itch.io/opense">https://zxdesign.itch.io/opense</a>
</li>

<li>Domácí a školní mikropočítače řady Didaktik<br />
<a href="https://www.root.cz/clanky/domaci-a-skolni-mikropocitace-rady-didaktik/">https://www.root.cz/clanky/domaci-a-skolni-mikropocitace-rady-didaktik/</a>
</li>

<li>Z80 Assembler for Dummies<br />
<a href="https://www.msx.org/wiki/Z80_Assembler_for_Dummies">https://www.msx.org/wiki/Z80_Assembler_for_Dummies</a>
</li>

<li>Z80 Resources<br />
<a href="https://www.assemblytutorial.com/z80/">https://www.assemblytutorial.com/z80/</a>
</li>

<li>How do Z80 Block Transfer instructions work?<br />
<a href="https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work">https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work</a>
</li>

<li>How fast is memcpy on the Z80?<br />
<a href="https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80">https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80</a>
</li>

<li>Comparing Datapoint 2200, 8008, 8080 and Z80 Instruction Sets<br />
<a href="https://bread80.com/comparing-datapoint-2200-8008-8080-and-z80-instruction-sets/">https://bread80.com/comparing-datapoint-2200-8008-8080-and-z80-instruction-sets/</a>
</li>

<li>8080/Z80 Instruction Set<br />
<a href="https://retroprogramming.it/2021/02/8080-z80-instruction-set/">https://retroprogramming.it/2021/02/8080-z80-instruction-set/</a>
</li>

<li>Zilog Z80A Technical Information<br />
<a href="https://worldofspectrum.org/faq/reference/z80reference.htm">https://worldofspectrum.org/faq/reference/z80reference.htm</a>
</li>

<li>Z80 programming techniques - Loops<br />
<a href="http://map.grauw.nl/articles/fast_loops.php">http://map.grauw.nl/articles/fast_loops.php</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

