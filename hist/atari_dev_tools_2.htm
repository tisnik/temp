<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku budeme pokračovat v tématu, kterému jsme se začali věnovat minulý týden. Popíšeme si totiž některé další významné programovací jazyky a programátorské pomůcky dostupné pro osmibitové domácí mikropočítače Atari.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari</a></p>
<p><a href="#k02">2. Stručná historie společnosti Optimized Systems Software (OSS)</a></p>
<p><a href="#k03">3. Debugger BUG/65</a></p>
<p><a href="#k04">4. BASIC A+</a></p>
<p><a href="#k05">5. BASIC XL</a></p>
<p><a href="#k06">6. BASIC XE</a></p>
<p><a href="#k07">7. Atari Microsoft BASIC</a></p>
<p><a href="#k08">8. Atari Microsoft BASIC II</a></p>
<p><a href="#k09">9. Doplnění: grafika na mikropočítačích Atari založená na čipech ANTIC a GTIA</a></p>
<p><a href="#k10">10. Porovnání rychlosti některých interpretrů jazyka BASIC pro osmibitová Atari</a></p>
<p><a href="#k11">11. Výsledek prvního benchmarku</a></p>
<p><a href="#k12">12. Výsledek druhého benchmarku</a></p>
<p><a href="#k13">13. Fast BASIC</a></p>
<p><a href="#k14">14. Překladače vyšších programovacích jazyků pro osmibitová Atari</a></p>
<p><a href="#k15">15. Programovací jazyk Pascal</a></p>
<p><a href="#k16">16. Kyan Pascal</a></p>
<p><a href="#k17">17. Cross compilery a cross assemblery</a></p>
<p><a href="#k18">18. Obsah závěrečného článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari</h2>

<p><a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">V&nbsp;úvodním
článku</a> o vývojových nástrojích dostupných na osmibitových domácích
mikropočítačích Atari jsme si popsali některé významné assemblery, zejména pak
<a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/#k03">Atari
Assembler Editor</a> a taktéž <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/#k04">MAC/65</a>.
Poté jsme se zabývali popisem dvou důležitých interpretrů programovacího jazyka
BASIC; konkrétně se jednalo o <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/#k05">Atari
BASIC</a> a taktéž o slavný <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/#k07">Turbo
BASIC XL</a>.</p>

<img src="https://i.iinfo.cz/images/360/atari-devtools-26.png" class="image-445937" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 1: Úvodní obrazovka Turbo-BASICu XL.</i></p>

<p>Zmínili jsme se i o dalších interpretovaných programovacích jazycích,
konkrétně o <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/#k12">Interlispu/65</a>
a taktéž o programovacím jazyku <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/#k10">Atari
LOGO</a>. Nezapomněli jsme ovšem ani na programovací jazyk <a
href="https://www.root.cz/serialy/programovaci-jazyk-forth/">Forth</a>,
konkrétně na jeho dialekt pojmenovaný <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/#k17">FIG
Forth</a>. A nakonec jsme se zmínili o překladačích, konkrétně o programovacím
jazyku <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/#k14">Action!</a>,
který vznikl pouze pro počítače Atari a přes jeho přednosti se nakonec příliš
neprosadil.</p>

<img src="https://i.iinfo.cz/images/360/atari-devtools-21.png" class="image-445932" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 2: Pracovní (kreslicí) plocha v&nbsp;Atari LOGu.</i></p>

<p>Na článek s&nbsp;výše uvedeným stručným obsahem dnes navážeme. V&nbsp;první
části se ve stručnosti zmíníme o historii společnosti <i>OSS</i>, druhá část
bude věnována popisu dalších důležitých interpretrů programovacího jazyka
BASIC, v&nbsp;části třetí porovnáme tyto interpretry s&nbsp;vyžitím značně
zjednodušených benchmarků a konečně v&nbsp;části čtvrté se zmíníme o některých
překladačích určených pro osmibitová Atari (navážeme tak na část věnovanou
jazyku Action!).</p>

<img src="https://i.iinfo.cz/images/360/atari-devtools-14.png" class="image-445925" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 3: Interpret Interlispu/65.</i></p>

<p><div class="rs-tip-major">Poznámka na úvod: tento článek je, stejně jako <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">článek
úvodní</a>, zkrácenou verzí rozsáhlejšího článku, který vyjde <a
href="http://flop.atariportal.cz/">v&nbsp;magazínu (přesněji řečeno
<i>diskmagu</i>) FLOP</a> určeného (nejenom) pro skalní Ataristy. Všechny
předchozí díly FLOPu je možné spustit v&nbsp;prakticky libovolném emulátoru
osmibitových Atari, například v&nbsp;multiplatformním emulátoru <a
href="https://github.com/atari800/atari800">atari800</a>.</div></p>

<img src="https://i.iinfo.cz/images/502/atari-devtools-2-1.png" class="image-445939" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 4: Prostředí programovacího jazyka Action!</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Stručná historie společnosti Optimized Systems Software (OSS)</h2>

<p>Zastavme se ještě na chvíli u assembleru <i>MAC/65</i> a programovacího
jazyka <i>Action!</i>, které byly zmíněny <a href="#k01">v&nbsp;úvodní
kapitole</a>. Za vznikem těchto vývojářských nástrojů stála jediná firma
<i>OSS</i> neboli plným jménem <i>Optimized Systems Software</i>. Tato
společnost se orientovala převážně na vývoj nástrojů užitečných pro vývojáře, a
to jak pro amatéry (v&nbsp;kladném smyslu tohoto slova), tak i pro
profesionální společnosti. Tato firma vznikla v&nbsp;roce 1981, takže by letos
oslavila (pokud by ovšem existovala &ndash; ovšem jen málo firem přežilo
hektickou dobu IT mezi lety 1980 až přibližně 1995) kulaté výročí svého
vzniku.</p>

<img src="https://i.iinfo.cz/images/488/mac65-1.png" class="image-446023" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 5: Úvodní obrazovka assembleru MAC/65 verze 1.02.</i></p>

<p>Historie společnosti <i>OSS</i> se začala psát vlastně již se vznikem Atari
BASICu. Víme, že Atari BASIC vlastně vznikl až poté, co se ukázalo, že
společnost Micro-Soft nedokáže svůj Atari Microsoft BASIC &bdquo;nacpat&ldquo;
do požadované kapacity ROM &ndash; osmi kilobajtů (ovšem Atari Microsoft BASIC
byl nakonec vydán, a to dokonce ve dvou verzích, jak uvidíme dále). Za vznikem
OSS stáli Bill Wilkinson, Mike Peters, Paul Laughton a Kathleen O'Brien,
přičemž třetí jmenovaný vydal Atari BASIC a jeho žena Kathleen pracovala
mj.&nbsp;i na FP rutinách operačního systému Atari. Původní Atari BASIC a
taktéž první verze DOSu byla odkoupena od společnosti <i>Shepardson
Microsystems</i>, která ukončila svoji existenci právě v&nbsp;roce 1981 a kde
původně zakladatelé OSS pracovali. V&nbsp;dalších letech se OSS věnovala jak
rozšiřování možností původních produktů (řada DOS, řada BASICů), tak i dalším
projektům, mj.&nbsp;i jazyku Action!</p>

<img src="https://i.iinfo.cz/images/488/mac65-4.png" class="image-446026" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 6: Debugger <strong>DDT</strong> vestavěný do assembleru MAC/65.</i></p>

<p>Příkladem produktu OSS je OS/A+, tedy dosový systém založený na systému
menu. Později vznikl DOS XL, který podporoval diskety s&nbsp;dvojnásobnou
hustotou a kromě menu se ovládal i příkazovou řádkou nazývanou CP neboli
<i>command processor</i>. OSS vyvinula i takzvanou <i>supercartridge</i>
s&nbsp;kapacitou 16kB.</p>

<p>Příklad menu z&nbsp;DOSu XL:</p>

<pre>
 C - Copy Files            P - Protect Files
 D - Duplicate Disk        Q - Quit to DOS XL
 E - Erase Files           R - Rename File
 F - Files on Disk         S - Save Binary
 G - Go to Address         T - To Cartridge
 I - Initialize Disk       U - Unprotect Files
 L - Load Binary           X - Xtended Command
</pre>

<p>Na příkazovém řádku byly podporovány interní příkazy, mezi něž patří
například <strong>D1:</strong> (přepnutí disků), <strong>DIR</strong>,
<strong>END</strong>, <strong>ERA</strong> atd. A většinou byly
k&nbsp;dispozici i příkazy externí: <strong>COPY</strong>,
<strong>DUPDSK</strong>, <strong>VERIFY</strong> atd.</p>

<img src="https://i.iinfo.cz/images/360/atari-devtools-10.png" class="image-445921" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 7: DOS dodávaný společně s&nbsp;jazykem Action! Konkrétně se
jedná o DOS XL.</i></p>

<p>Z&nbsp;portfolia společnosti OSS stojí za zmínku především:</p>

<ul>

<li>Interpretry BASICu rozšiřující a zrychlující původní Atari BASIC: BASIC A+,
BASIC XL a BASIC XE</li>

<li>Assemblery a debuggery: EASMD (Edit/ASseMble/Debug) vydaný již v&nbsp;roce
1981, MAC/65, BUG/65</li>

<li>Další programovací jazyky či jejich překladače: Action!, C/65, Tiny C
interpretr subsetu jazyka C, Personal Pascal pro Atari ST 1987</li>

</ul>

<img src="https://i.iinfo.cz/images/502/atari-devtools-2-1.png" class="image-445939" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 8: Jednoduchý program s&nbsp;procedurou <strong>INIT</strong>,
která odpovídá céčkovskému <strong>main</strong>, zde ovšem používající syntaxi
jazyka Action!</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Debugger BUG/65</h2>

<p><a href="#k01">V&nbsp;úvodní kapitole</a> jsme se zmínili mj.&nbsp;o tom, že
společnost <i>OSS</i> vyvinula mj.&nbsp;i programátorský nástroj nazvaný
<i>BUG/65</i> (což je mimochodem zajímavé jméno, podobně jako kdyby výrobce
automobilů pojmenoval svůj model <i>Šrot</i>). Jedná se o poměrně pokročilý
debugger, který ovšem obsahuje i možnosti <i>monitoru</i> a současně i
jednoduchého <i>assembleru</i> s&nbsp;interaktivním zápisem instrukcí a dalších
jazykových konstrukcí. Původně měl být <i>BUG/65</i> dodáván společně
s&nbsp;assemblerem <i>MAC/65</i>, ovšem nakonec byl dodáván samostatně, a to
jak ve verzi pro cartridge, tak i v&nbsp;disketové verzi (společně s&nbsp;DOSem
od stejné společnosti; existuje ovšem i kombinace <i>MAC/65+BUG/65</i>).</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-1.png" class="image-446423" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 9: Jeden z&nbsp;prodávaných &bdquo;bundlů&ldquo; &ndash; DOS XL +
MAC/65 + BUG/65.</i></p>

<p><div class="rs-tip-major">Poznámka: mimochodem, možnosti debuggeru BUG/65
jsou skutečně na dobu vzniku poměrně velké. Ostatně i samotná firma OSS se
v&nbsp;manuálu omlouvá zákazníkům, že kvůli velkému množství funkcí obsadí
BUG/65 velké množství operační paměti &ndash; celých osm kilobajtů!</div></p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-2.png" class="image-446424" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 10: Úvodní obrazovka debuggeru BUG/65 (barvy jsou na tomto
screenshotu pravé).</i></p>

<p>BUG/65 podporuje přibližně čtyřicet operací. Patří mezi ně operace, které
očekáváme od monitorů: práce s&nbsp;operační pamětí, tj.&nbsp;zobrazení obsahu
vybraného bloku, zápis do paměti, zápis řetězce do paměti, porovnání dvou bloků
paměti či výplň vybraného bloku. Blok paměti je možné zapsat na disketu,
připojit k&nbsp;existujícímu souboru či ho pochopitelně nahrát zpět
z&nbsp;diskety do paměti. Podporována je i nízkoúrovňová práce
s&nbsp;disketovými sektory. BUG/65 taktéž obsahuje disassembler, dokáže
nastavovat breakpointy, specifikovat počet opakování průchodu breakpointem,
trasovat (krokovat) programy po jednotlivých instrukcích, provádět krokování
s&nbsp;přeskokem subrutin (<strong>JSR</strong>); zobrazit je pochopitelně i
obsah pracovních registrů mikroprocesoru MOS 6502 i jeho příznakových bitů
NV-BDIZC. Při všech těchto operacích lze samotný BUG/65 ochránit před přepisem.
Třetí částí je assembler, který je řádkově orientovaný &ndash; každý řádek se
zkontroluje a přeloží do strojového kódu.</p>

<p><div class="rs-tip-major">Poznámka: trasování/krokování jen  poskytováno jen
pro RAM, protože BUG/65 musí neustále do strojového kódu vkládat instrukce
<strong>BRK</strong> a to v&nbsp;ROM (či EPROM v&nbsp;cartridge) není
možné.</div></p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-3.png" class="image-446425" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 11: Porovnání dvou bloků operační paměti.</i></p>

<p>BUG/65 obsahuje vlastní ovladač bufferu příkazového řádku, takže není
podporován celoobrazovkový editor dostupný v&nbsp;OS. Lze vkládat více příkazů
na řádek, poslední řádek je možné opakovat stiskem ENTER, u zadávání adres atd.
jsou podporovány základní aritmetické operátory a vkládání hodnot lze
realizovat jak v&nbsp;desítkové, tak i v&nbsp;hexadecimální soustavě.
Nejzajímavější příkazy jsou:</p>

<pre>
A zápis ASCII řetězce do paměti na zadanou adresu
C porovnání dvou bloků paměti (start, end, start)
D zobrazení obsahu bloku paměti
F výplň bloku paměti
G skok na adresu
L vyhledání sekvence hexa čísel v paměti
T trace - krokování/trasování
TS krokováni s&nbsp;přeskokem subrutin
Y disassembler (start, end)
V zobrazení obsahu registrů
Z assembler
</pre>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-4.png" class="image-446426" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 12: Disassembler podporovaný nástrojem BUG/65.</i></p>

<p>Zápis více příkazů na řádku:</p>

<pre>
D 1000 1010  D 2000 2010
</pre>

<p>Vzhledem k&nbsp;tomu, že druhý parametr u příkazu D je volitelný, musí se
zkrácený zápis provést takto:</p>

<pre>
D 1000, D 2000 2010
</pre>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-5.png" class="image-446427" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 13: Zobrazení obsahu pracovních registrů.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. BASIC A+</h2>

<p>V&nbsp;roce 1983 byl společností <i>OSS</i> vydán dialekt BASICu pojmenovaný
<i>BASIC A+</i>. Tento dialekt obsahoval opravy a vylepšení původního Atari
BASICu a navíc byl tento interpret rychlejší, než původní BASIC (viz též
výsledky benchmarků uvedených <a href="#k11">v&nbsp;jedenácté</a> a <a
href="#k12">dvanácté kapitole</a>). Zajímavé je, že BASIC A+ nebyl dodáván na
cartridge, ale na disketě, a to společně se systémem OS/A+ a EASMD
(Editor/Assembler). Celková cena za tyto tři programy byla 80 dolarů, takže je
patrné že se jednalo o jiný segment trhu, než tomu bylo v&nbsp;případě
profesionálnějších nástrojů BUG/65 a MAC/65. Samotný interpret zabral dalších
15 kB RAM. Byl (jak již víme) rychlejší než původní Atari BASIC, obsahoval
základní podporu pro PMG (sprity) a taktéž základní podporu pro ladění
programů.</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-6.png" class="image-446428" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 14: Úvodní obrazovka BASIC A+.</i></p>

<p>Díky přímé podpoře OS/A+ došlo k&nbsp;úpravám (resp.&nbsp;k&nbsp;vylepšením)
následujících příkazů jazyka BASIC, přičemž některé příkazy (konkrétně poslední
čtyři) byly nově přidány:</p>

<pre>
CLOSE
ENTER
GET
INPUT
LIST
LOAD
NOTE
OPEN
POINT
PRINT
PUT
SAVE
PROTECT (XIO 35)
UNPROTECT (XIO 36)
RENAME (XIO 32)
ERASE (XIO 33)
</pre>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-7.png" class="image-446429" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 15: Samotný interpret zabral dalších 15 kB RAM a nepracoval
s&nbsp;odklopenou ROM, což je zde jasně patrné.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. BASIC XL</h2>

<p>O další rok později, tedy v&nbsp;roce 1984, vydala společnost <i>OSS</i>
další interpret programovacího jazyka BASIC, který byl pojmenován <i>BASIC
XL</i>, a to podle toho, že běžel na systémech Atari XL (s&nbsp;plnou RAM) a
pochopitelně taktéž na Atari XE. Opět se jednalo o poměrně významné vylepšení a
rozšíření možností původního BASICu, k&nbsp;dispozici byly i metody
k&nbsp;urychlení výsledných (interpretovaných) programů.</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-8.png" class="image-446430" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 16: Úvodní obrazovka BASICu XL.</i></p>

<p>První vylepšení spočívá v&nbsp;možnosti příkazem <strong>FAST</strong>
provést přepočet cílů skoků, což má za následek citelné urychlení běhu
programů. Dále byla přidána podpora pro dvourozměrné pole řetězců:</p>

<pre>
DIM A$(10,100)
</pre>

<p>K&nbsp;přístupu k&nbsp;první a druhé dimenzi se používá středník, protože
čárka je již v&nbsp;Atari BASICu použita pro přístup k&nbsp;podřetězcům:</p>

<pre>
A$(1;)="TEST"
</pre>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-9.png" class="image-446431" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 17: Verze na cartridge nabízí stejnou volnou kapacitu RAM, jako
původní Atari BASIC.</i></p>

<p>Přidán byl i příkaz <strong>MOVE</strong> pro rychlé přesuny bloku paměti.
K&nbsp;dispozici je i několik příkazů pro práci se sprity/PMG:</p>

<pre>
PMGRAPHICS - povolení PMG
PMMOVE - přesun hráče
BUMP - detekce kolize
MISSILE - pozicování střely na y ové souřadnici
PMMOVE - posun hráče -1,0,+1 - podle joysticku
PMWIDTH - šířka hráče
PMCOLOR - barva hráče
PMADR/PMCLR - práce s paměti alokované pro PMG
</pre>

<p><div class="rs-tip-major">Poznámka: doplnění informací o spritové grafice
bude uvedeno <a href="#k09">v&nbsp;deváté kapitole</a>.</div></p>

<p>Užitečné jsou i příkazy <strong>VSTICK</strong> a <strong>HSTICK</strong>,
které podle náklonu joysticku vrací hodnoty -1, 0 nebo 1, takže není nutné
provádět ruční dekódování polohy z&nbsp;čísel 0-15.</p>

<p>Chování interpretru lze ovlivnit příkazem <strong>SET</strong>, podporováno
je trasování (výpis čísel řádků) i automatické číslování řádků. Zapomenout
nesmíme ani na chybové zprávy, v&nbsp;nichž se kromě číselných kódů vypisuje i
podrobnější informace o typu chyby. A nakonec jsou podporovány další příkazy
určené pro strukturované programování:</p>

<pre>
IF/ELSE/ENDIF
WHILE/ENDWHILE
</pre>

<p><div class="rs-tip-major">Poznámka: jedná se o jiné konstrukce, než nabízí
Turbo BASIC XL.</div></p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-10.png" class="image-446432" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 18: Automatické odsazení bloků kódu a použití malých písmen
v&nbsp;příkazech.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. BASIC XE</h2>

<p>V&nbsp;roce 1985 společnost <i>OSS</i> vydala svoji poslední verzi
interpretru programovacího jazyka BASIC pro osmibitová Atari. Tato varianta se
jmenovala <i>BASIC XE</i>, a to z&nbsp;toho důvodu, že byl podporován přístup
do rozšířené paměti počítačů Atari 130 XE (celkem neuvěřitelných 128 kB RAM)
&ndash; program bylo možné oddělit do dat, přičemž program byl umístěn ve druhé
bance RAM. BASIC XE nabízel i rychlejší matematické operace a oproti <i>BASICu
XL</i> nabízel i několik dalších vylepšení (ovšem ne mnoho).</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-11.png" class="image-446433" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 19: Úvodní opbrazovka BASICu XE.</i></p>

<p>Vzhledem k&nbsp;roku vzniku je patrné, že BASIC XE byl přímou konkurencí
k&nbsp;již popsanému Turbo BASICu XL, který byl navíc nabízen ve formě freeware
(a nakonec i open source v&nbsp;původním významu tohoto sousloví). Turbo BASIC
sice v&nbsp;některých ohledech nedosahoval možností BASICu XL (PMG apod.),
ovšem byl rychlejší, podporoval všechny strukturované jazykové konstrukce a
samozřejmě v&nbsp;neposlední řadě rozhodovala cena. Ve výsledku byl BASIC XE
ztrátovým projektem.</p>

<p><div class="rs-tip-major">Poznámka: několik čísel o prodejích produktů OSS
(různé zdroje se ovšem liší i o desítky procent!): prodalo se 12000 kopií
BASICu XL, překladače jazyka Action! pak přibližně 4500 kopií. MAC/65 bylo
prodáno cca 6500 kopií.</div></p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-12.png" class="image-446434" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 20: Práce s&nbsp;PMG &ndash; černá čárka uprostřed obrazovky je
hráč, který je zobrazen nezávisle na pozadí.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Atari Microsoft BASIC</h2>

<p>Dalším interpretrem programovacího jazyka BASIC, s&nbsp;nímž se
v&nbsp;dnešním článku ve stručnosti seznámíme, je <i>Atari Microsoft BASIC</i>.
Na historii jeho vzniku jsme již upozornili v&nbsp;předchozím článku &ndash;
původně totiž měly být domácí osmibitové mikropočítače Atari skutečně dodávány
s&nbsp;Microsoft BASICem uloženým v&nbsp;ROM, ovšem nakonec nebylo možné tento
interpret umístit do požadovaných osmi kilobajtů ROM, takže jako vhodnější
alternativa vznikl Atari BASIC. Nicméně společnost Micro-soft skutečně Atari
Microsoft BASIC vydala, a to již v&nbsp;roce 1981. Z&nbsp;několika pohledů se
však jedná o dosti rozdílný interpret, než je tomu v&nbsp;(ideové) řadě Atari
BASIC &rarr; BASIC A+ &rarr; BASIC XL &rarr; BASIC XE &rarr; Turbo BASIC.</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-13.png" class="image-446435" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 21: Atari Microsoft BASIC ponechává programátorům
k&nbsp;dispozici pouze 21022 bajtů paměti, což je oproti jiným intepretrům
velmi malá hodnota.</i></p>

<p>Poměrně velký rozdíl spočívá v&nbsp;tom, že se pro výpočty používají odlišné
datové typy. Microsoft BASIC totiž podporuje šestnáctibitová celá čísla se
znaménkem, hodnoty typu <i>single</i> (s&nbsp;plovoucí řádovou čárkou) uložené
ve čtyřech bajtech, hodnoty typu <i>double</i> (taktéž s&nbsp;plovoucí řádovou
čárkou) uložené v&nbsp;osmi bajtech a pochopitelně taktéž řetězce. Zcela jsou
tedy vynechány šestibajtové hodnoty s&nbsp;plovoucí řádovou čárkou a
s&nbsp;nechvalně známými pomalými subrutinami pro výpočty. A navíc &ndash; díky
použití datových typů <i>single</i> a <i>double</i> je do poměrně velké míry
zachována kompatibilita s&nbsp;ostatními interpretry Microsoft BASICu na
některých dalších platformách, především na tehdy vznikající platformě IBM PC
(a to tehdy s&nbsp;velkou pravděpodobností nikdo ani netušil, jak tato
platforma pomůže společnosti Micro-Soft, později Microsoft, v&nbsp;dalším
rozvoji).</p>

<p>Typ proměnné bylo možné určit postfixovým znakem:</p>

<ul>
<li># - typ double</li>
<li>% - typ int</li>
<li>$ - typ string</li>
</ul>

<p>Alternativně bylo možné příkazy <strong>DEFSNG</strong>,
<strong>DEFDBL</strong>, <strong>DEFINT</strong> či <strong>DEFSTR</strong>
určit typ pro všechny proměnné začínající určitým znakem.</p>

<p>Dalším rozdílem je podpora polí s&nbsp;větším počtem dimenzí. Připomeňme si,
že Atari BASIC i Turbo BASIC podporovaly jednorozměrné či dvourozměrné pole
s&nbsp;číselnými hodnotami (tedy vlastně vektory a matice) a řetězce považované
za jednorozměrná pole znaků. Naproti tomu v&nbsp;Microsoft BASICu mohly mít
pole libovolný typ a teoretický počet dimenzí byl omezen na 255 (takže vlastně
neomezen, když vezmeme v&nbsp;úvahu pouze cca 21kB volné RAM). Ovšem
s&nbsp;touto vlastností souvisí i odlišný přístup k&nbsp;podřetězcům, neboť
&bdquo;atarácký&ldquo; zápis <strong>A$(od, do)</strong> není možné použít
&ndash; znamená něco jiného, totiž přístup do dvourozměrného znakového pole.
Namísto toho jsou dostupné funkce <strong>LEFT$</strong>,
<strong>RIGHT$</strong> a <strong>MID$</strong>, které v&nbsp;Microsoftích
interpretrech přežily pravděpodobně až do současnosti.</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-14.png" class="image-446436" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 22: Základní funkce pro práci s&nbsp;řetězci.</i></p>

<p>V&nbsp;Microsoft BASICu nalezneme i příkaz <strong>OPTION</strong>, který
mění chování interpretru popř.&nbsp;práci s&nbsp;pamětí. Dostupné jsou tyto
varianty tohoto příkazu:</p>

<ol>
<li><strong>OPTION BASE 0-1</strong>: změna indexování polí od nuly nebo jedničky</li>
<li><strong>OPTION PLM0,1,2</strong>: rezervace paměti pro PMG (sprity)</li>
<li><strong>OPTION CHR0,1,2</strong>: rezervace paměti pro znakovou sadu</li>
<li><strong>OPTION RESERVE </strong>: rezervace bloku paměti o specifikované délce</li>
</ol>

<p>V&nbsp;Microsoft BASICu se objevily i příkazy <strong>INKEY$</strong> (čtení
klávesy), <strong>TIME$</strong>, <strong>PRINT USING</strong> (formátovaný
výstup), <strong>PRINT AT</strong> (výstup na zadané místo), <strong>LINE
INPUT</strong> atd.</p>

<p>Nakonec nesmíme zapomenout na možnost definice jednoduchých jednořádkových
funkcí:</p>

<pre>
DEF AVG(X,Y)=(X+Y)/2
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Atari Microsoft BASIC II</h2>

<p>O rok později po vydání původního Atari Microsoft BASICu (tedy v&nbsp;roce
1982) byla vydána jeho druhá verze s&nbsp;několika opravami a taktéž
s&nbsp;několika novými příkazy. Jedná se zejména o příkaz <strong>AUTO</strong>
zajišťující automatické generování čísel řádků a dále o velmi užitečný příkaz
<strong>MOVE</strong> určený pro přesuny paměťových bloků (o dva až tři řády
rychlejší, než v&nbsp;samotném BASICu). Příkazem <strong>COMMON</strong> bylo
možné specifikovat ty proměnné, které &bdquo;přežijí&ldquo; samotný program a
bude je možné využít v&nbsp;dalším kódu &ndash; to teoreticky umožňuje vytvářet
moduly, minimálně při použití disketové jednotky.</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-15.png" class="image-446437" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 23: Úvodní obrazovka Microsoft BASICu II.</i></p>

<p>Další příkazy do jisté míry umožňují programování založené na zachytávání a
zpracování událostí. Příkazem <strong>AFTER</strong> se deklaruje později
spouštěný kód; jeho případné vedlejší efekty odstraňuje příkaz <strong>CLEAR
STACK</strong> (navíc existuje i příkaz <strong>PRINT STACK</strong>). A
nejzajímavější je příkaz <strong>WAIT ... AND</strong>, který čeká na změnu
provedenou v&nbsp;operační paměti (například rutinou volanou z&nbsp;přerušení)
a reaguje na ni.</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-16.png" class="image-446438" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 24: Definice nové funkce na řádku 30, použití této funkce
v&nbsp;následujících řádcích.</i></p>

<p>Teoreticky by měl být interpret Atari Microsoft BASICu II rychlejší, než
jeho původní varianta, ovšem z&nbsp;benchmarků vychází spíše opačné výsledky
(viz navazující kapitoly).</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Doplnění: grafika na mikropočítačích Atari založená na čipech ANTIC a GTIA</h2>

<p>V&nbsp;předchozích kapitolách jsme se několikrát setkali s&nbsp;termínem
<i>sprity</i> a <i>PMG</i>, takže si je nyní ve stručnosti vysvětlíme. Na
osmibitových počítačích Atari se grafika skládala ze dvou částí: pozadí (hrací
pole, <i>playfield</i>) a pohyblivých rastrových obrázků (<i>spritů</i>,
<i>PMG</i>). Pro nastavení grafického režimu pozadí (playfield) byl určen obvod
<i>ANTIC</i> (<i>Alpha-Numeric Television Interface Circuit</i>), který umožnil
pro každý vykreslovaný řádek (scanline) programově nastavit jeden ze čtrnácti
grafických režimů, které se lišily svým rozlišením, počtem současně
zobrazitelných barev a velikostí alokované paměti.</p>

<p>S&nbsp;obvodem ANTIC úzce spolupracoval číslicový obvod <i>GTIA</i>
(<i>Graphics Television Interface Adapter</i> nebo také <i>George's Television
Interface Adapter</i>), který zaváděl podporu pro další tři šestnáctibarevné
grafické režimy s&nbsp;horizontálním rozlišením 80 pixelů na řádek, a především
umožňoval vykreslování spritů. Současně bylo možné vykreslit čtyři sprity
s&nbsp;rozlišením maximálně 8&times;256 pixelů a další čtyři sprity
s&nbsp;rozlišením 2&times;256 pixelů, které bylo možno spojit do jednoho
většího (pátého) spritu s&nbsp;rozlišením 8&times;256 pixelů.</p>

<p>Sprity široké 8 pixelů se v&nbsp;literatuře nazývají hráči (<i>players</i>),
úzké dvoupixelové sprity střely (<i>missiles</i>).</p>

<p>Sprity byly jednobarevné, více barev bylo možno dosáhnout logickými
operacemi nad překrývajícími se sprity (počítače Commodore C64 naproti tomu
nabízely i sprity v&nbsp;režimu <i>multicolor</i>). Každý sprite mohl pomocí
jedné instrukce měnit svoji horizontální velikost i horizontální pozici,
přičemž polohy spritů byly navzájem nezávislé.</p>

<p>Vertikální pozice spritů se měnila přesunem bitmapy spritu v&nbsp;operační
paměti. Bylo také možné definovat priority vykreslování spritů vůči sobě
navzájem i vůči pozadí. Na následujícím obrázku je zobrazen způsob vykreslování
grafiky s&nbsp;použitím obvodů ANTIC a GTIA:</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-17.png" class="image-446439" alt="&#160;" width="400" height="350" />
<p><i>Obrázek 25: Základní role čipů ANTIC a GTIA v&nbsp;osmibitových domácích
mikropočítačích Atari.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Porovnání rychlosti některých interpretrů jazyka BASIC pro osmibitová Atari</h2>

<p>Rychlost jednotlivých interpretrů programovacího jazyka BASIC zjistíme
s&nbsp;využitím dvojice jednoduchých benchmarků. U obou benchmarků se bude
měřit čas běhu části programu, přičemž pro měření použijeme časovač dostupný na
adresách 18, 19 a 20. Tento časovač lze programově vynulovat:</p>

<pre>
10 REM VYMAZANI CASOVACE
11 POKE 18,0
12 POKE 19,0
13 POKE 20,0
</pre>

<p>Na konci programu zjistíme stav časovače a převedeme ho na sekundy podělením
půlsnímkovou frekvencí (50 či 60 Hz podle použité televizní normy):</p>

<pre>
40 REM PRECTENI CASOVACE
41 REM (PLATNE PRO PAL)
42 T=((PEEK(18)*65536+PEEK(19)*256+PEEK(20))/50)
50 PRINT "FINISHED IN ";T;" SECONDS"
</pre>

<p><div class="rs-tip-major">Poznámka: více info o časovači je možné najít
například <a
href="https://retrocomputing.stackexchange.com/questions/269/how-can-you-measure-time-using-basic-on-atari-xl-computers">v&nbsp;tomto
článku</a>.</div></p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-18.png" class="image-446440" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 26: Část prvního benchmarku v&nbsp;prostředí Atari
BASICu.</i></p>

<p>První benchmark je založen na měření doby setřídění padesáti čísel
algoritmem <i>bubble sort</i>:</p>

<pre>
1 REM *****************************
2 REM BUBBLE SORT
3 REM IMPLEMENTACE PRO ATARI BASIC
4 REM UPRAVENO DO PODOBY BENCHMARKU
5 REM *****************************
6 REM
7 REM
8 REM
9 REM
10 REM VYMAZANI CASOVACE
11 POKE 18,0
12 POKE 19,0
13 POKE 20,0
20 REM VLASTNI BENCHMARK
21 MAX=50
22 DIM A(MAX)
23 FOR I=0 TO MAX
24 A(I)=INT(100*RND(0))
25 NEXT I
26 GOSUB 100:REM TISK OBSAHU POLE
27 FOR I=MAX-1 TO 0 STEP -1
28 PRINT ".";
29 FOR J=0 TO I
30 IF A(J)&lt;A(J+1) THEN X=A(J):A(J)=A(J+1):A(J+1)=X
31 NEXT J
32 NEXT I
33 PRINT ""
34 PRINT "SORTED:"
35 GOSUB 100:REM TISK OBSAHU POLE
40 REM PRECTENI CASOVACE
41 REM (PLATNE PRO PAL)
42 T=((PEEK(18)*65536+PEEK(19)*256+PEEK(20))/50)
50 PRINT "FINISHED IN ";T;" SECONDS"
99 END 
100 REM TISK OBSAHU POLE
101 FOR I=0 TO MAX
102 PRINT I,A(I)
103 NEXT I
104 RETURN 
</pre>

<p>Program je nutné převést z&nbsp;čitelné (textové) podoby do ATASCII,
například takto:</p>

<pre>
tr "\n" "\233" &lt; bench_s.bas &gt; B.BAS
</pre>

<p>Načtení do interpretru:</p>

<pre>
ENTER "H:B.BAS"
</pre>

<p>V&nbsp;případě Microsoft BASICu není příkaz <strong>ENTER</strong> dostupný,
takže se použije:</p>

<pre>
LOAD "H:B.BAS"
</pre>

<p><div class="rs-tip-major">Poznámka: časy běhu se mohou lišit podle toho,
jaké náhodné hodnoty byly do pole vloženy. Proto byl program spuštěn několikrát
a časy byly zaokrouhleny.</div></p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-19.png" class="image-446441" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 27: Část prvního benchmarku v&nbsp;prostředí Atari
BASICu.</i></p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-20.png" class="image-446442" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 28: Výsledek běhu prvního benchmarku.</i></p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-21.png" class="image-446443" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 29: Část prvního benchmarku v&nbsp;prostředí Turbo BASICu
XL.</i></p>

<p>Druhý benchmark je jednodušší a testuje rychlost smyček a přístupu do
paměti. Program po svém spuštění zaplní obrazovou paměť náhodnými hodnotami a
simuluje tak &bdquo;sněžení&ldquo; analogového televizoru bez antény:</p>

<pre>
1 REM *****************************
2 REM VYPLNENI OBRAZOVKY NAHODNYM VZOREM
3 REM IMPLEMENTACE PRO ATARI BASIC
4 REM UPRAVENO DO PODOBY BENCHMARKU
5 REM *****************************
6 REM
7 REM
8 REM
9 REM
10 REM VYMAZANI CASOVACE
11 POKE 18,0
12 POKE 19,0
13 POKE 20,0
20 REM VLASTNI BENCHMARK
21 GRAPHICS 8
22 START=PEEK(88)+256*PEEK(89)
23 FINAL=START+320*160/8
30 FOR I=START TO FINAL
35 REM 17BITOVY POLY CITAC = RND
40 POKE I,PEEK(53770)
50 NEXT I
60 REM PRECTENI CASOVACE
70 REM (PLATNE PRO PAL)
80 T=((PEEK(18)*65536+PEEK(19)*256+PEEK(20))/50)
90 PRINT "FINISHED IN ";T;" SECONDS"
99 END 
</pre>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-22.png" class="image-446444" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 30: Druhý benchmark v&nbsp;prostředí Atari BASICu.</i></p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-23.png" class="image-446445" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 31: Výsledek běhu druhého benchmarku.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výsledek prvního benchmarku</h2>

<p>Podívejme se nyní na výsledky prvního benchmarku, který byl prakticky beze
změn v&nbsp;programovém kódu spuštěn ve všech osmi klasických interpretrech
programovacího jazyka BASIC dostupných na osmibitových Atari. Provedli jsme
pouze jedinou změnu, a to na pátém řádku, kdy byl doplněn příkaz
<strong>FAST</strong>, jenž umožňuje přepočítat čísla řádků do podoby
umožňující rychlejší (přímé) skoky. A tato změna skutečně způsobila nepatrné
vylepšení výsledků (pro BASIC XE se již v&nbsp;případě příkazu
<strong>FAST</strong> vyžaduje 128kB RAM, takže by byl použitelný jen na Atari
130 XE):</p>

<table>
<tr><th>Interpret</th><th>Čas</th></tr>
<tr><td>Atari BASIC</td><td>33.46</td></tr>
<tr><td>BASIC A+</td><td>30.10</td></tr>
<tr><td>Turbo BASIC XL</td><td>15.86</td></tr>
<tr><td>BASIC XL</td><td>18.90</td></tr>
<tr><td>BASIC XL (FAST)</td><td>16.32</td></tr>
<tr><td>BASIC XE</td><td>20.9</td></tr>
<tr><td>Microsoft Atari BASIC</td><td>30.10</td></tr>
<tr><td>Microsoft Atari BASIC II</td><td>31.36</td></tr>
</table>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-24.png" class="image-446446" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 32: Výsledek prvního benchmarku se zvýrazněním nejlepšího a
nejhoršího výsledku.</i></p>

<p>Z&nbsp;výsledků je patrné, že nejrychlejší je Turbo BASIC XL, jehož název
tedy v&nbsp;žádném případě nelže. Nejpomalejší je původní Atari BASIC, ovšem
Microsoft Atari BASIC mu svou &bdquo;pomalostí&ldquo; zdárně sekunduje.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti je možné program přepsat
tak, aby byl v&nbsp;Microsoft BASICu proveden rychleji. Jedná se o náhradu
některých proměnných za jejich celočíselné varianty. Po této změně
(modifikovaný kód je zvýrazněn) je dosaženo časů 25.87 a 26.96 sekundy (MS
BASIC I a II), tedy stále dosti daleko od výkonnosti Turbo BASICu XL:</div></p>

<pre>
1 REM ********************************
2 REM BUBBLE SORT PRO POLE TYPU SINGLE
3 REM IMPLEMENTACE PRO MICROSOFT BASIC
4 REM UPRAVENO DO PODOBY BENCHMARKU
5 REM ********************************
6 REM
7 REM
8 REM
9 REM
10 REM VYMAZANI CASOVACE
11 POKE 18,0
12 POKE 19,0
13 POKE 20,0
20 REM VLASTNI BENCHMARK
21 <strong>MAX%</strong>=50
22 DIM A(<strong>MAX%</strong>)
23 FOR <strong>I%</strong>=0 TO <strong>MAX%</strong>
24 A(<strong>I%</strong>)=INT(100*RND(0))
25 NEXT <strong>I%</strong>
26 GOSUB 100:REM TISK OBSAHU POLE
27 FOR <strong>I%</strong>=<strong>MAX%</strong>-1 TO 0 STEP -1
28 PRINT ".";
29 FOR <strong>J%</strong>=0 TO I%
30 IF A(<strong>J%</strong>)&lt;A(<strong>J%</strong>+1) THEN X=A(<strong>J%</strong>):A(<strong>J%</strong>)=A(<strong>J%</strong>+1):A(<strong>J%</strong>+1)=X
31 NEXT <strong>J%</strong>
32 NEXT <strong>I%</strong>
33 PRINT ""
34 PRINT "SORTED:"
35 GOSUB 100:REM TISK OBSAHU POLE
40 REM PRECTENI CASOVACE
41 REM (PLATNE PRO PAL)
42 T=((PEEK(18)*65536+PEEK(19)*256+PEEK(20))/50)
50 PRINT "FINISHED IN ";T;" SECONDS"
99 END 
100 REM TISK OBSAHU POLE
101 FOR <strong>I%</strong>=0 TO <strong>MAX%</strong>
102 PRINT <strong>I%</strong>,A(<strong>I%</strong>)
103 NEXT <strong>I%</strong>
104 RETURN
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Výsledek druhého benchmarku</h2>

<p>Nyní si zobrazme výsledky druhého benchmarku, tedy vyplnění obrazové paměti
náhodnými hodnotami:</p>

<table>
<tr><th>Interpret</th><th>Čas</th></tr>
<tr><td>Atari BASIC</td><td>73.28</td></tr>
<tr><td>BASIC A+</td><td>45.88</td></tr>
<tr><td>Turbo BASIC XL</td><td>17.14</td></tr>
<tr><td>BASIC XL</td><td>34.38</td></tr>
<tr><td>BASIC XL (FAST)</td><td>27.06<td></td></tr>
<tr><td>BASIC XE</td><td>63.14</td></tr>
<tr><td>Microsoft Atari BASIC</td><td>65.18</td></tr>
<tr><td>Microsoft Atari BASIC II</td><td>65.22</td></tr>
</table>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-25.png" class="image-446447" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 33: Výsledek druhého benchmarku se zvýrazněním nejlepšího a
nejhoršího výsledku.</i></p>

<p>Vítěz je v&nbsp;tomto případě opět jasný &ndash; je jím Turbo BASIC XL.
Druhý nejrychlejší čas dosažený BASICem XL s&nbsp;příkazem
<strong>FAST</strong> je mnohem horší (o celých deset sekund). Nejpomalejší je
opět původní Atari BASIC.</p>

<p><div class="rs-tip-major">Poznámka: druhou variantu pro Microsoft Atari
BASIC využívající celá čísla nelze jednoduše vytvořit, i když by to
pravděpodobně vedlo k&nbsp;velkému urychlení výpočtů. Důvod je jasný &ndash;
šestnáctibitové hodnoty se znaménkem nelze použít pro adresování oblasti paměti
nad adresou 32767. Řešením by byl posun grafické paměti pod tuto
hodnotu.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Fast BASIC</h2>

<p>Nejnovějším BASICem navrženým a implementovaným pro domácí osmibitové
mikropočítače Atari je Fast BASIC. Jedná se projekt, který je v&nbsp;mnoha
ohledech odlišný od klasických BASICů &ndash; namísto překladu zdrojového kódu
do sekvence tokenů se používá překladač do bajtkódu. To je koncept, který známe
například z&nbsp;Pythonu, jazyka Lua, Javy atd. (ale i z&nbsp;původního
Pascalu). Při běhu programu (tedy v&nbsp;<i>runtime</i>) je bajtkód konvertován
na instrukce mikroprocesoru. Výsledek je v&nbsp;každém případě rychlejší, než
interpretace tokenizovaného kódu.</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-26.png" class="image-446448" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 34: Vývojové prostředí Fast BASICu.</i></p>

<p>Mezi další vylepšení patří například podpora pro pole s&nbsp;osmibitovými a
16bitovými hodnotami, což je velmi praktické a pochopitelně to vede i
k&nbsp;úsporám operační paměti. Taktéž je možné používat proměnné obsahující
celá čísla a tím pádem obejít pomalé FP operace. Změnilo se i vývojové
prostředí, protože se již nepoužívá klasický obrazovkový editor s&nbsp;čísly
řádků, ale editor, který připomíná Vim &ndash; podporován je scrolling atd.
(ostatně problematický či nepodporovaný scrolling je jedním z&nbsp;důvodů, proč
byla čísla řádků vůbec zavedena).</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-27.png" class="image-446449" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 35: Vývojové prostředí Fast BASICu.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Překladače vyšších programovacích jazyků pro osmibitová Atari</h2>

<p>Mezi nejpoužívanější jazyky populární v&nbsp;dobách osmibitových domácích
mikropočítačů skutečně patřily zejména assemblery a interpretry BASICu,
tj.&nbsp;jazyky zmíněné v&nbsp;předchozích kapitolách i <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">v&nbsp;předchozím
článku</a>. To ovšem neznamená, že by nabídka programovacích jazyků byla takto
omezená. Ve skutečnosti bylo na osmibitové mikropočítače portováno velké
množství překladačů vyšších programovacích jazyků, zejména jazyků podporujících
procedurální paradigma, tj.&nbsp;skládání programů z&nbsp;procedur (subrutin),
v&nbsp;nichž se používají strukturované konstrukce pro tvorbu rozeskoků a
programových smyček.</p>

<img src="http://i.iinfo.cz/images/365/gamesc3.jpg" class="image-161781" width="450" height="259" alt="&#160;" />
<p><i>Obrázek 36: Logo překladačů Aztec C.</i></p>

<p>Z&nbsp;těchto jazyků byl populární především <i>Pascal</i>, a to díky tomu,
že tento jazyk byl navržen takovým způsobem, aby byl překlad programů proveden
jednoprůchodově a tudíž velmi rychle v&nbsp;porovnání s&nbsp;víceprůchodovými
překladači. Ovšem existovaly i další jazyky, například i populární céčko. Zde
je nutné zmínit především známý překladač <i>Aztec C</i> portovaný na velké
množství různých typů mikropočítačů, zapomenout nesmíme ani na <i>Deep Blue
C</i> pro počítače Atari (zde se autoři museli vyrovnat s&nbsp;faktem, že
znaková sada neobsahovala složené závorky). V&nbsp;navazujícím textu se
zaměříme především na Pascal, konkrétně na Kyan Pascal.</p>

<img src="http://i.iinfo.cz/images/15/gamesc4.jpg" class="image-161782" width="450" height="265" alt="&#160;" />
<p><i>Obrázek 37: Jeden z&nbsp;konkurenčních překladačů k&nbsp;Aztec C byl
Lattice C (ovšem až v&nbsp;pozdější době).</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Programovací jazyk Pascal</h2>

<p>O programovacím jazyku <i>Pascal</i> jsme se již zmínili <a
href="#k14">v&nbsp;předchozí kapitole</a>, takže se zde seznámíme
s&nbsp;některými technickými zajímavostmi. Překladače <i>Pascalu</i> se typicky
používaly na počítačích vybavených buď disketovou jednotkou nebo alespoň
paměťovým modulem (s&nbsp;Pascalem) a kazetovým magnetofonem. Disketová
jednotka umožňovala relativně rychlé přepínání mezi editorem, překladačem (a
linkerem) a spuštěním vytvářené aplikace, tj.&nbsp;vlastně ten styl práce,
který se v&nbsp;mnoha případech používá dodnes. Alternativní způsob založený na
použití paměťového modulu s&nbsp;ROM či EPROM obsahující editor, překladač i
linker, kladlo větší omezení na velikost vytvářené aplikace, protože
v&nbsp;jedné chvíli byl (alespoň většinou) v&nbsp;operační paměti uložen jak
zdrojový text, tak i přeložená binární aplikace.</p>

<a href="http://www.root.cz/obrazek/210844/"><img src="http://i.iinfo.cz/images/462/dev-8bit-40-prev.jpg" class="image-210844" width="193" height="270" alt="&#160;" /></a>
<p><i>Obrázek 38: Manuál k&nbsp;Pascalu určeného pro mikropočítače Commodore
C64.</i></p>

<p><div class="rs-tip-major">Poznámka: zajímavá je jedna z&nbsp;verzí Pascalu
pro československé mikropočítače PMD-85, která se vyznačovala tím, že prakticky
všechny texty, kromě samotných klíčových slov jazyka, byly vypisovány česky či
slovensky (autor článku se setkal jen s&nbsp;SK verzí). To samozřejmě
usnadňovalo použití tohoto jazyka například na školách, protože znalosti a
výuka angličtiny nebyla před rokem 1989 z&nbsp;pochopitelných důvodů tou
oblastí, na něž by se tehdejší školství zaměřovalo (dokonce existovaly varianty
Pascalu s&nbsp;přeloženými klíčovými slovy, screenshot však nemám
k&nbsp;dispozici).</div></p>

<a href="http://www.root.cz/obrazek/210845/"><img src="http://i.iinfo.cz/images/462/dev-8bit-41-prev.jpg" class="image-210845" width="370" height="202" alt="&#160;" /></a>
<p><i>Obrázek 39: Paměťový modul s&nbsp;Pascalem pro československé osmibitové
mikropočítače PMD-85.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Kyan Pascal</h2>

<p>Pro osmibitová Atari a taktéž pro počítače Apple II vzniklo několik
překladačů Pascalu. Dnes se zmíníme o Kyan Pascalu. Jednalo se o jazyk vydaný
až v&nbsp;roce 1987; jde tedy o jeden z&nbsp;nejnovějších nástrojů zmíněných
v&nbsp;dnešním článku. Kyan Pascal byl dodáván na disketě a jeho jednotlivé
části se musely postupně zavádět a spouštět právě z&nbsp;diskety.
K&nbsp;dispozici byl editor, překladač, nástroj pro použití tiskárny atd. atd.
Samotný překlad byl prováděn v&nbsp;jednom průchodu (což Pascal ve většině
případů umožňuje), takže samotná fáze překladu byla relativně rychlá.
Podporována byla většina standardních jazykových konstrukcí. Ke Kyan Pascalu
vznikly i různé knihovny, například pro grafiku, práci se želvou, fonty
atd.</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-28.png" class="image-446450" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 40: Úvodní obrazovka Kyan Pascalu.</i></p>

<p>Na disketě byla dodávána i kontextová nápověda:</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-29.png" class="image-446451" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 41: Nápověda.</i></p>

<p>Zajímavý byl editor použitý v&nbsp;Kyan Pascalu. Ten totiž pracoval jinak,
než standardní celoobrazovkový editor (byl blíže chování dnešních editorů)
&ndash; pokud byl kurzor na konci zapsaného příkazu, znamenal stisk šipky
doprava přechod na nový řádek a naopak stisk šipky doleva na začátku řádku
převedl kurzor na konec předchozího řádku.</p>

<img src="https://i.iinfo.cz/images/692/atari-devtools-3-30.png" class="image-446452" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 42: Editor Kyan Pascalu.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Cross compilery a cross assemblery</h2>

<p>V&nbsp;článku o vývojových prostředích a nástrojích určených pro osmibitové
domácí mikropočítače Atari pochopitelně nemůžeme zapomenout ani na cross
compilery a cross assemblery (viz poznámka o českém překladu tohoto názvu).
Tyto typy nástrojů jsou velmi často používané i dnes, zejména v&nbsp;oblasti
mikrořadičů, digitálních signálových procesorů nebo mobilních telefonů (viz
například <a href="http://scratchbox.org/">Scratchbox</a>). Ovšem tato
technologie se používala již na začátku osmibitové éry. Například vývoj her pro
herní konzoli Atari 2600 (Atari Video Computer System neboli Atari VCS) byl
prováděn na minipočítači. Ovšem i později některé firmy vyvíjely profesionální
software pro Atari i další osmibitové mikropočítače na výkonnějších strojích,
kde se prováděl i překlad.</p>

<p><div class="rs-tip-major">Poznámka: existuje i český termín <i>křížový
překladač</i>, ale musím se přiznat, že mi připadá jako výsledek otrockého
překladu a navíc se slovo &bdquo;cross&ldquo; přeložilo ve špatném
kontextu.</div></p>

<p>Dobrým a možná i typickým příkladem jsou cross překladače programovacího
jazyka C. Tvorbou těchto cross překladačů se zabývala například společnost
<i>Manx Software Systems</i>, jejíž překladače céčka (Aztec C) určené pro <a
href="https://www.root.cz/clanky/ctyricet-let-existence-oslavovane-i-nenavidene-platformy-pc/">IBM
PC</a> s&nbsp;DOSem i pro osobní mikropočítače Macintosh dokázaly provádět
cross překlad na osmibitové mikropočítače Commodore C64 a Apple II. Na chvíli
se u Aztec C zastavme, i když přímo nesouvisí s&nbsp;osmibitovými Atari.</p>

<p><i>Aztec C</i> totiž byl ve své době velmi úspěšný překladač, jenž existoval
jak ve verzi pro osmibitové mikroprocesory (MOS 6502, Zilog Z-80), tak i pro
mikroprocesory 16bitové a 32bitové. Tento překladač byl velmi úspěšný právě na
Amize, kde byl používán, společně s&nbsp;<i>Lattice C</i>, prakticky až do
faktického zániku této platformy. Ovšem na IBM PC jeho sláva netrvala dlouho,
především z&nbsp;toho důvodu, že firma Microsoft považovala segment překladačů
za poměrně důležitý a snažila se vytlačit jakoukoli konkurenci z&nbsp;trhu (i
když ve skutečnosti v&nbsp;té době ještě neměla vlastní céčkový překladač.
Společnosti <i>Manx Software Systems</i> se postupně zmenšoval počet platforem,
na něž bylo možné překladač prodávat a přechod na podporu vestavěných systémů
již přišel dosti pozdě. A právě pro cross překlad se Aztec C může používat
dodnes (běží v&nbsp;DOSu, takže dnes vlastně taktéž v&nbsp;emulovaném
prostředí).</p>

<p><div class="rs-tip-major">Poznámka: další informace o překladačích i cross
překladačích Aztec C lze najít na stránce <a
href="http://aztecmuseum.ca/compilers.htm">http://aztecmuseum.ca/compilers.htm</a>.</div></p>

<p>Podobným stylem byl řešen i Microsoft C původně vytvořený společností, která
stála za slavným Lattice C. Ostatně Lattice C byl s&nbsp;velkou
pravděpodobností vůbec prvním překladačem céčka pro IBM PC (pochází z&nbsp;roku
1982). Ten byl později převeden i na Amigu, dále se rozšířil i na minipočítače
a mainframy společnosti IBM. Firma Microsoft překladač <i>Lattice C</i>
nabízela pod svým názvem <i>MSC (Microsoft C)</i> a teprve verze <i>MSC 4.0</i>
byla skutečně vytvořena přímo programátory z&nbsp;Microsoftu. <i>Lattice C</i>
byl používán i při portaci aplikací z&nbsp;operačního systému <i>CP/M</i> na
DOS (dnes je však možné pouze odhadnout, kolik kódu bylo skutečně napsáno
v&nbsp;céčku a kolik kódu vzniklo transformací assembleru).</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah závěrečného článku</h2>

<p>Ve třetím a současně i posledním článku z&nbsp;tohoto miniseriálku se
zaměříme především na popis <a href="#k17">výše zmíněných</a> cross překladačů
a cross assemblerů určených pro osmibitové domácí mikropočítače Atari. Zmíníme
se například o projektu <i>ATasm</i>, který je používán dodnes, podobně jako
cross překladač programovacího jazyka C.</p>

<p><div class="rs-tip-major">Poznámka: seriál bude poněkud nepravidelně
pokračovat, ovšem zaměříme se přitom na další dobové platformy.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy dnes i minule ukázaných příkladů byly zveřejněny
v&nbsp;repositáři <a
href="https://github.com/tisnik/8bit-fame/">https://github.com/tisnik/8bit-fame/</a>.
Vzhledem k&nbsp;odlišnostem mezi ASCII a ATASCII (tedy znakovou sadou
používanou v&nbsp;osmibitových mikropočítačích Atari) byly zdrojové kódy
převedeny do čitelné podoby, což prakticky znamená, že došlo k&nbsp;převodu
znaku pro konec řádku a k&nbsp;dalším nepatrným úpravám (některé emulátory
dokážou načíst i takto upravené soubory s&nbsp;využitím zařízení
<strong>H5</strong>):</p>

<h3>Příklady pro původní a originální Atari BASIC</h3>

<table>
<tr><th> #</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td> 1</td><td>1d_array.bas</td><td>práce s&nbsp;jednorozměrnými poli v&nbsp;Atari BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/1d_array.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/1d_array.bas</a></td></tr>
<tr><td> 2</td><td>2d_array.bas</td><td>práce s&nbsp;dvourozměrnými poli v&nbsp;Atari BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/2d_array.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/2d_array.bas</a></td></tr>
<tr><td> 3</td><td>bubble_sort.bas</td><td>algoritmus bublinkového třídění prvků v&nbsp;poli v&nbsp;Atari BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/bubble_sort.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/bubble_sort.bas</a></td></tr>
<tr><td> 4</td><td>factorial.bas</td><td>výpočet faktoriálu v&nbsp;Atari BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/factorial.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/factorial.bas</a></td></tr>
<tr><td> 5</td><td>function1.bas</td><td>vykreslení průběhu nespojité funkce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/function1.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/function1.bas</a></td></tr>
<tr><td> 6</td><td>function2.bas</td><td>vykreslení průběhu funkce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/function2.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/function2.bas</a></td></tr>
<tr><td> 7</td><td>game.bas</td><td>jednoduchá hra naprogramovaná na dvou řádcích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/game.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/game.bas</a></td></tr>
<tr><td> 8</td><td>GCD.bas</td><td>výpočet největšího společného dělitele v&nbsp;Atari BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/GCD.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/GCD.bas</a></td></tr>
<tr><td> 9</td><td>harmonic.bas</td><td>zjištění limitů FP hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/harmonic.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/harmonic.bas</a></td></tr>
<tr><td>10</td><td>moire1.bas</td><td>moaré v&nbsp;grafickém režimu 7</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/moire1.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/moire1.bas</a></td></tr>
<tr><td>11</td><td>moire2.bas</td><td>moaré v&nbsp;grafickém režimu 9</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/moire2.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/moire2.bas</a></td></tr>
<tr><td>12</td><td>moire3.bas</td><td>moaré v&nbsp;grafickém režimu 11</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/moire3.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/moire3.bas</a></td></tr>
<tr><td>13</td><td>PI.bas</td><td>výpočet Pi v&nbsp;Atari BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/PI.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/PI.bas</a></td></tr>
<tr><td>14</td><td>PMG1.bas</td><td>zobrazení spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/PMG1.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/PMG1.bas</a></td></tr>
<tr><td>15</td><td>PMG2.bas</td><td>zobrazení spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/PMG2.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/PMG2.bas</a></td></tr>
<tr><td>16</td><td>printed1.bas</td><td>problematika proměnné pojmenované <strong>PRINTED</strong> (zadáno uživatelem)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/printed1.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/printed1.bas</a></td></tr>
<tr><td>17</td><td>printed2.bas</td><td>problematika proměnné pojmenované <strong>PRINTED</strong> (pochopeno překladačem)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/printed2.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/printed2.bas</a></td></tr>
<tr><td>18</td><td>slides.bas</td><td>náhrada za neohrabaný PowerPoint</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/slides.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/slides.bas</a></td></tr>
<tr><td>19</td><td>snowcrash.bas</td><td>simulace &bdquo;sněhu&ldquo; na televizoru bez příjmu signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/snowcrash.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/snowcrash.bas</a></td></tr>
<tr><td>20</td><td>strings.bas</td><td>zpracování řetězců v&nbsp;Atari BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/strings.bas">https://github.com/tisnik/8bit-fame/blob/master/Atari%20BASIC/strings.bas</a></td></tr>
</table>

<h3>Příklady pro Turbo BASIC XL</h3>

<table>
<tr><th> #</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td> 1</td><td>1d_array.bas</td><td>práce s&nbsp;jednorozměrnými poli v&nbsp;Turbo BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/1d_array.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/1d_array.bas</a></td></tr>
<tr><td> 2</td><td>2d_array.bas</td><td>práce s&nbsp;dvourozměrnými poli v&nbsp;Turbo BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/2d_array.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/2d_array.bas</a></td></tr>
<tr><td> 3</td><td>bubble_sort.bas</td><td>algoritmus bublinkového třídění prvků v&nbsp;poli v&nbsp;Turbo BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/bubble_sort.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/bubble_sort.bas</a></td></tr>
<tr><td> 4</td><td>done.bas</td><td>problém použití proměnné nazvané <strong>DONE</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/done.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/done.bas</a></td></tr>
<tr><td> 5</td><td>factorial1.bas</td><td>výpočet faktoriálu v&nbsp;Turbo BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/factorial1.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/factorial1.bas</a></td></tr>
<tr><td> 6</td><td>factorial2.bas</td><td>použití speciálních konstant nabízených Turbo BASICem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/factorial2.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/factorial2.bas</a></td></tr>
<tr><td> 7</td><td>function1.bas</td><td>vykreslení průběhu nespojité funkce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/function1.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/function1.bas</a></td></tr>
<tr><td> 8</td><td>function2.bas</td><td>vykreslení průběhu funkce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/function2.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/function2.bas</a></td></tr>
<tr><td> 9</td><td>game.bas</td><td>jednoduchá hra naprogramovaná na dvou řádcích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/game.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/game.bas</a></td></tr>
<tr><td>10</td><td>GCD.bas</td><td>výpočet největšího společného dělitele v&nbsp;Turbo BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/GCD.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/GCD.bas</a></td></tr>
<tr><td>31</td><td>harmonic.bas</td><td>zjištění limitů FP hodnot v&nbsp;Turbo BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/harmonic.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/harmonic.bas</a></td></tr>
<tr><td>32</td><td>moire1.bas</td><td>moaré v&nbsp;grafickém režimu 7</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/moire1.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/moire1.bas</a></td></tr>
<tr><td>33</td><td>moire2.bas</td><td>moaré v&nbsp;grafickém režimu 9</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/moire2.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/moire2.bas</a></td></tr>
<tr><td>34</td><td>moire3.bas</td><td>moaré v&nbsp;grafickém režimu 11</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/moire3.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/moire3.bas</a></td></tr>
<tr><td>35</td><td>PI.bas</td><td>výpočet Pi v&nbsp;Turbo BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/PI.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/PI.bas</a></td></tr>
<tr><td>36</td><td>PMG1.bas</td><td>zobrazení spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/PMG1.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/PMG1.bas</a></td></tr>
<tr><td>37</td><td>PMG2.bas</td><td>zobrazení spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/PMG2.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/PMG2.bas</a></td></tr>
<tr><td>38</td><td>snowcrash.bas</td><td>simulace &bdquo;sněhu&ldquo; na televizoru bez příjmu signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/snowcrash.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/snowcrash.bas</a></td></tr>
<tr><td>39</td><td>strings.bas</td><td>zpracování řetězců v&nbsp;Turbo BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/strings.bas">https://github.com/tisnik/8bit-fame/blob/master/Turbo-Basic%20XL/strings.bas</a></td></tr>
</table>

<h3>Příklady pro Microsoft BASIC</h3>

<table>
<tr><th>#</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>strings.bas</td><td>zpracování řetězců v&nbsp;Microsoft BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Microsoft%20BASIC/strings.bas">https://github.com/tisnik/8bit-fame/blob/master/Microsoft%20BASIC/strings.bas</a></td></tr>
<tr><td>2</td><td>def_func.bas</td><td>definice funkcí v&nbsp;Microsoft BASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Microsoft%20BASIC/def_func.bas">https://github.com/tisnik/8bit-fame/blob/master/Microsoft%20BASIC/def_func.bas</a></td></tr>
<tr><td>3</td><td>sort.bas</td><td>setřídění pole bubble sortem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Microsoft%20BASIC/sort.bas">https://github.com/tisnik/8bit-fame/blob/master/Microsoft%20BASIC/sort.bas</a></td></tr>
<tr><td>4</td><td>sort_int.bas</td><td>setřídění pole bubble sortem, použití celočíselných indexů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Microsoft%20BASIC/sort_int.bas">https://github.com/tisnik/8bit-fame/blob/master/Microsoft%20BASIC/sort_int.bas</a></td></tr>
<tr><td>5</td><td>sort_int_int.bas</td><td>setřídění pole celých čísel bubble sortem, použití celočíselných indexů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Microsoft%20BASIC/sort_int_int.bas">https://github.com/tisnik/8bit-fame/blob/master/Microsoft%20BASIC/sort_int_int.bas</a></td></tr>
</table>

<h3>Benchmarky</h3>

<table>
<tr><th>#</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>bubble_sort.bas</td><td>první benchmark: bubble sort</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/benchmarks/bubble_sort.bas">https://github.com/tisnik/8bit-fame/blob/master/benchmarks/bubble_sort.bas</a></td></tr>
<tr><td>2</td><td>bubble_sort.csv</td><td>výsledek benchmarku v&nbsp;CSV formátu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/benchmarks/bubble_sort.csv">https://github.com/tisnik/8bit-fame/blob/master/benchmarks/bubble_sort.csv</a></td></tr>
<tr><td>3</td><td>bubble_sort.png</td><td>výsledek benchmarku ve formě sloupcového grafu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/benchmarks/bubble_sort.png">https://github.com/tisnik/8bit-fame/blob/master/benchmarks/bubble_sort.png</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>snowcrash.bas</td><td>druhý benchmark: vykreslení šumu na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/benchmarks/snowcrash.bas">https://github.com/tisnik/8bit-fame/blob/master/benchmarks/snowcrash.bas</a></td></tr>
<tr><td>5</td><td>snowcrash.csv</td><td>výsledek benchmarku v&nbsp;CSV formátu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/benchmarks/snowcrash.csv">https://github.com/tisnik/8bit-fame/blob/master/benchmarks/snowcrash.csv</a></td></tr>
<tr><td>6</td><td>snowcrash.png</td><td>výsledek benchmarku ve formě sloupcového grafu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/benchmarks/snowcrash.png">https://github.com/tisnik/8bit-fame/blob/master/benchmarks/snowcrash.png</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>plot_benchmark_results.py</td><td>skript pro vykreslení grafů s&nbsp;výsledkem benchmarků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/benchmarks/plot_benchmark_results.py">https://github.com/tisnik/8bit-fame/blob/master/benchmarks/plot_benchmark_results.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na herní konzoli Atari 2600<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-herni-konzoli-atari-2600/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-herni-konzoli-atari-2600/</a>
</li>

<li>Stránka magazínu (diskmagu) FLOP<br />
<a href="http://flop.atariportal.cz/">http://flop.atariportal.cz/</a>
</li>

<li>Action (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Action">https://atariwiki.org/wiki/Wiki.jsp?page=Action</a>
</li>

<li>Assembler (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Assembler">https://atariwiki.org/wiki/Wiki.jsp?page=Assembler</a>
</li>

<li>Basic (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Basic">https://atariwiki.org/wiki/Wiki.jsp?page=Basic</a>
</li>

<li>C (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=C">https://atariwiki.org/wiki/Wiki.jsp?page=C</a>
</li>

<li>Forth (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Forth">https://atariwiki.org/wiki/Wiki.jsp?page=Forth</a>
</li>

<li>Fortran (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Fortran">https://atariwiki.org/wiki/Wiki.jsp?page=Fortran</a>
</li>

<li>Lisp (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Lisp">https://atariwiki.org/wiki/Wiki.jsp?page=Lisp</a>
</li>

<li>Logo (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Logo">https://atariwiki.org/wiki/Wiki.jsp?page=Logo</a>
</li>

<li>Pascal (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Pascal">https://atariwiki.org/wiki/Wiki.jsp?page=Pascal</a>
</li>

<li>Pilot (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Pilot">https://atariwiki.org/wiki/Wiki.jsp?page=Pilot</a>
</li>

<li>PL65 (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=PL65">https://atariwiki.org/wiki/Wiki.jsp?page=PL65</a>
</li>

<li>Quick (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Quick">https://atariwiki.org/wiki/Wiki.jsp?page=Quick</a>
</li>

<li>WSFN (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=WSFN">https://atariwiki.org/wiki/Wiki.jsp?page=WSFN</a>
</li>

<li>MAC/65 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MAC/65">https://en.wikipedia.org/wiki/MAC/65</a>
</li>

<li>Atari Assembler Editor<br />
<a href="https://en.wikipedia.org/wiki/Atari_Assembler_Editor#AMAC">https://en.wikipedia.org/wiki/Atari_Assembler_Editor#AMAC</a>
</li>

<li>cc65<br />
<a href="https://cc65.github.io/">https://cc65.github.io/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="http://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">http://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Stránky RetroFestu<br />
<a href="http://retrofest.cz/">http://retrofest.cz/</a>
</li>

<li>RetroHerna<br />
<a href="http://retroherna.cz/">http://retroherna.cz/</a>
</li>

<li>BASIC<br />
<a href="http://cs.wikipedia.org/wiki/BASIC">http://cs.wikipedia.org/wiki/BASIC</a>
</li>

<li>BASIC<br />
<a href="http://en.wikipedia.org/wiki/BASIC">http://en.wikipedia.org/wiki/BASIC</a>
</li>

<li>Rosetta Code &ndash; Category Basic<br />
<a href="http://rosettacode.org/wiki/Category:BASIC">http://rosettacode.org/wiki/Category:BASIC</a>
</li>

<li>Dartmouth College Computation Center: 1964 &ndash; The original Dartmouth BASIC manual<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf</a>
</li>

<li>The Original BASIC<br />
<a href="http://www.truebasic.com/">http://www.truebasic.com/</a>
</li>

<li>BASIC - Beginners All-purpose Symbolic Instruction Code<br />
<a href="http://hopl.murdoch.edu.au/showlanguage.prx?exp=176">http://hopl.murdoch.edu.au/showlanguage.prx?exp=176</a>
</li>

<li>Turbo BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Turbo_BASIC">http://cs.wikipedia.org/wiki/Turbo_BASIC</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Action!<br />
<a href="https://atari8bitbot.com/action/">https://atari8bitbot.com/action/</a>
</li>

<li>Atari Logo<br />
<a href="https://atari8bitbot.com/atari-logo/">https://atari8bitbot.com/atari-logo/</a>
</li>

<li>Atari PILOT &amp; Super PILOT<br />
<a href="https://atari8bitbot.com/atari-pilot/">https://atari8bitbot.com/atari-pilot/</a>
</li>

<li>Turbo-BASIC XL<br />
<a href="https://atari8bitbot.com/turbo-basic-xl/">https://atari8bitbot.com/turbo-basic-xl/</a>
</li>

<li>Atari Assembler/Editor<br />
<a href="https://atari8bitbot.com/atari-assembler-editor/">https://atari8bitbot.com/atari-assembler-editor/</a>
</li>

<li>Strings in Atari BASIC<br />
<a href="http://www.cyberroach.com/analog/an11/strings.htm">http://www.cyberroach.com/analog/an11/strings.htm</a>
</li>

<li>String Arrays in Atari BASIC<br />
<a href="http://www.atarimagazines.com/compute/issue11/52_1_STRING_ARRAYS_IN_ATARI_BASIC.php">http://www.atarimagazines.com/compute/issue11/52_1_STRING_ARRAYS_IN_ATARI_BASIC.php</a>
</li>

<li>An Atari BASIC Tutorial<br />
<a href="http://www.cyberroach.com/analog/an25/basictutorial.htm">http://www.cyberroach.com/analog/an25/basictutorial.htm</a>
</li>

<li>Atari Logo<br />
<a href="https://en.wikipedia.org/wiki/Atari_Logo">https://en.wikipedia.org/wiki/Atari_Logo</a>
</li>

<li>Computer art and animation : a user's guide to Atari logo<br />
<a href="https://archive.org/details/Computer_Art_and_Animation">https://archive.org/details/Computer_Art_and_Animation</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 1 – Hello World!<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-1-hello-world/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-1-hello-world/</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 2 – Graphics<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-2-graphics/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-2-graphics/</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 3 – More Variables, Memory and Pointers (ugh!)<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-3-more-variables-memory-and-pointers-ugh/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-3-more-variables-memory-and-pointers-ugh/</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 4 – Using VSCode and Action! with syntax highlighting<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-4-using-vscode-and-action-with-syntax-highlighting/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-4-using-vscode-and-action-with-syntax-highlighting/</a>
</li>

<li>Atari800 (emulátor)<br />
<a href="https://github.com/atari800/atari800">https://github.com/atari800/atari800</a>
</li>

<li>Atari MAC/65 Tutorial<br />
<a href="https://www.youtube.com/watch?v=RyBsGDJBXD0">https://www.youtube.com/watch?v=RyBsGDJBXD0</a>
</li>

<li>MAC/65 Manual<br />
<a href="http://www.mixinc.net/atari/mac65.htm">http://www.mixinc.net/atari/mac65.htm</a>
</li>

<li>BASIC 10 Liner Contest 2021<br />
<a href="https://atariage.com/forums/topic/316645-basic-10-liner-contest-2021/">https://atariage.com/forums/topic/316645-basic-10-liner-contest-2021/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Deep Blue C<br />
<a href="https://en.wikipedia.org/wiki/Deep_Blue_C">https://en.wikipedia.org/wiki/Deep_Blue_C</a>
</li>

<li>Deep Blue C Compiler<br />
<a href="https://www.atariarchives.org/APX/showinfo.php?cat=20166">https://www.atariarchives.org/APX/showinfo.php?cat=20166</a>
</li>

<li>Historie vývoje počítačových her: simulace a strategické hry naprogramované Chrisem Crawfordem<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-simulace-a-strategicke-hry-naprogramovane-chrisem-crawfordem/">https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-simulace-a-strategicke-hry-naprogramovane-chrisem-crawfordem/</a>
</li>

<li>Explore BASIC Programming Languages for the Atari 8-Bit Computers (30-60 mins)<br />
<a href="http://atariprojects.org/2020/08/29/explore-different-basic-programming-languages-for-the-atari-8-bit-computers-30-60-mins/">http://atariprojects.org/2020/08/29/explore-different-basic-programming-languages-for-the-atari-8-bit-computers-30-60-mins/</a>
</li>

<li>Learn How to Make a Game in BASIC XE (30-60 mins)<br />
<a href="http://atariprojects.org/2019/12/21/learn-how-to-make-a-game-in-basic-xe-30-60-mins/">http://atariprojects.org/2019/12/21/learn-how-to-make-a-game-in-basic-xe-30-60-mins/</a>
</li>

<li>Atari BASIC XL (manuál)<br />
<a href="http://www.atarimania.com/8bit/files/BASIC%20XL%20%C2%A4%20Second%20Edition.pdf">http://www.atarimania.com/8bit/files/BASIC%20XL%20%C2%A4%20Second%20Edition.pdf</a>
</li>

<li>BASIC XE For Atari XL &amp; XE<br />
<a href="https://www.atarimagazines.com/compute/issue67/318_1_Reviews_BASIC_XE_For_Atari_XL_XE.php">https://www.atarimagazines.com/compute/issue67/318_1_Reviews_BASIC_XE_For_Atari_XL_XE.php</a>
</li>

<li>BUG/65 (Reference manual)<br />
<a href="https://atariwiki.org/wiki/attach/Bug65/BUG-65%20Version%202.0%20manual-final%20with%20errorpage.pdf">https://atariwiki.org/wiki/attach/Bug65/BUG-65%20Version%202.0%20manual-final%20with%20errorpage.pdf</a>
</li>

<li>Cross compiler<br />
<a href="https://en.wikipedia.org/wiki/Cross_compiler">https://en.wikipedia.org/wiki/Cross_compiler</a>
</li>

<li>Křížový překladač<br />
<a href="https://cs.wikipedia.org/wiki/K%C5%99%C3%AD%C5%BEov%C3%BD_p%C5%99eklada%C4%8D">https://cs.wikipedia.org/wiki/K%C5%99%C3%AD%C5%BEov%C3%BD_p%C5%99eklada%C4%8D</a>
</li>

<li>ATasm<br />
<a href="https://atari.miribilist.com/atasm/">https://atari.miribilist.com/atasm/</a>
</li>

<li>ATasm v1.09 ("Global Pandemic Release")<br />
<a href="https://atari.miribilist.com/atasm/atasm.pdf">https://atari.miribilist.com/atasm/atasm.pdf</a>
</li>

<li>DOS XL<br />
<a href="https://en.wikipedia.org/wiki/DOS_XL">https://en.wikipedia.org/wiki/DOS_XL</a>
</li>

<li>Aztec C online Museum<br />
<a href="https://www.clipshop.ca/Aztec/index.htm">https://www.clipshop.ca/Aztec/index.htm</a>
</li>

<li>Aztec C Compilers<br />
<a href="http://aztecmuseum.ca/compilers.htm">http://aztecmuseum.ca/compilers.htm</a>
</li>

<li>Scratchbox<br />
<a href="http://scratchbox.org/">http://scratchbox.org/</a>
</li>

<li>History of PC based C-compilers<br />
<a href="https://web.archive.org/web/20071215083657/http://www.itee.uq.edu.au/~csmweb/decompilation/hist-c-pc.html">https://web.archive.org/web/20071215083657/http://www.itee.uq.edu.au/~csmweb/decompilation/hist-c-pc.html</a>
</li>

<li>PAL/NTSC Upgrade<br />
<a href="https://www.myatari.com/nirdary.html">https://www.myatari.com/nirdary.html</a>
</li>

<li>How can you measure time using BASIC on Atari XL computers?<br />
<a href="https://retrocomputing.stackexchange.com/questions/269/how-can-you-measure-time-using-basic-on-atari-xl-computers">https://retrocomputing.stackexchange.com/questions/269/how-can-you-measure-time-using-basic-on-atari-xl-computers</a>
</li>

<li>Atari Microsoft Basic manual<br />
<a href="http://www.atarimania.com/8bit/files/Atari_Microsoft_Basic.pdf">http://www.atarimania.com/8bit/files/Atari_Microsoft_Basic.pdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

