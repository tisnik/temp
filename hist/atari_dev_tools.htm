<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Assemblery, interpretry a překladače</a></p>
<p><a href="#k03">*** 3. Atari Assembler Editor</a></p>
<p><a href="#k04">*** 4. MAC/65</a></p>
<p><a href="#k05">*** 5. Atari BASIC</a></p>
<p><a href="#k06">*** 6. Přednosti a zápory Atari BASICu</a></p>
<p><a href="#k07">*** 7. Slavný Turbo-BASIC XL</a></p>
<p><a href="#k08">*** 8. Strukturované programování v&nbsp;Turbo-BASICu</a></p>
<p><a href="#k09">*** 9. Pomůcky při vývoji a ladění programů v&nbsp;Turbo-BASICu</a></p>
<p><a href="#k10">*** 10. Atari LOGO</a></p>
<p><a href="#k11">*** 11. Unikátní vlastnosti Atari Loga</a></p>
<p><a href="#k12">*** 12. Interlisp/65</a></p>
<p><a href="#k13">*** 13. Specifika Intelispu/65</a></p>
<p><a href="#k14">*** 14. Programovací jazyk Action!</a></p>
<p><a href="#k15">*** 15. Datové typy v&nbsp;jazyku Action!</a></p>
<p><a href="#k16">*** 16. Programové konstrukce v&nbsp;jazyku Action!</a></p>
<p><a href="#k17">*** 17. FIG-Forth</a></p>
<p><a href="#k18">*** 18. FastBASIC</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p><div class="rs-tip-major">Poznámka: </div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Assemblery, interpretry a překladače</h2>

<p>Programování na úrovni strojového kódu je samozřejmě velmi pracné, zejména ve chvíli, kdy je nutné existující program modifikovat a tím pádem měnit cílové adresy skoků, adresy globálních proměnných atd. Mnohem civilizovanější způsob představovalo použití takzvaných <i>assemblerů</i>, což byly nástroje schopné překládat programy zapsané v&nbsp;jazyku symbolických adres/instrukcí do strojového kódu. Na osmibitových domácích mikropočítačích se používaly dva typy <i>assemblerů</i>.</p>

<p>Prvním typem byly assemblery interaktivní, které uživateli nabízely poměrně komfortní vývojové prostředí, v&nbsp;němž bylo možné zapisovat jednotlivé instrukce, spouštět programy, krokovat je, vypisovat obsahy registrů atd. Výhodou takto pojatého řešení byla nezávislost těchto assemblerů na rychlém externím paměťovém médiu. Druhý typ assemblerů je používán dodnes &ndash; jedná se vlastně o běžné překladače, kterým se na vstupu předloží zdrojový kód (uložený na kazetě či disketě) a po překladu se výsledný nativní kód taktéž uloží na paměťové médium (odkud ho lze spustit). Tyto assemblery byly mnohdy vybaveny více či méně dokonalým systémem maker (odtud název <i>macroassembler</i>).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Atari Assembler Editor</h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. MAC/65</h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. Atari BASIC</h2>

<p>Popis vývojových nástrojů a programovacích jazyků pro osmibitové mikropočítače Atari by samozřejmě nebyl úplný, pokud by nebyl zmíněn <i>BASIC</i>, jehož více či méně kvalitní dialekty existovaly prakticky pro všechny typy domácích (ale i profesionálních) osmibitových počítačů. Jedná se samozřejmě o jazyk <i>BASIC</i> (<i>Beginner's All-purpose Symbolic Instruction Code</i>), jehož syntaxe a především sémantika pozitivně ale i negativně ovlivnily celou jednu generaci programátorů (včetně autora tohoto článku :-). Ovšem tento programovací jazyk je z&nbsp;historického hlediska zajímavý i proto, že se v&nbsp;souvislosti s&nbsp;jeho vývojem poprvé objevují jména Bill Gates a Paul Allen spolu s&nbsp;jejich společností původně nazývanou <i>Micro-Soft</i>.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Přednosti a zápory Atari BASICu</h2>

<p>V&nbsp;Atari BASICu, přesněji řečeno v&nbsp;subrutinách uložených v&nbsp;ROM, které se staraly o výpočty nad reálnými čísly, se používal formát odlišný od prakticky všech předchozích formátů. Stále se sice jedná o hodnoty s&nbsp;plovoucí řádovou čárkou, ovšem báze není rovna dvěma (většina strojů) ani šestnácti (IBM/360), ale stu! Navíc není mantisa uložená binárně, ale používá se BCD, což konkrétně znamená, že v&nbsp;pěti bajtech je uloženo přesně deset číslic (procesor 6502 dokázal s&nbsp;BCD pracovat nativně). To není úplně špatné řešení, protože ho najdeme například na mnoha kalkulačkách. Zjednodušují se převody řetězců na čísla a naopak, na druhou stranu jsou však veškeré výpočty značně pomalejší a přesnost ani rozsah hodnot není tak vysoký, jako při použití binárního kódu.</p>

<p>Zajímavým způsobem je v&nbsp;Atari BASICu realizováno uložení řetězců, což je vedle jednorozměrných a dvourozměrných polí jediná datová struktura (na rozdíl od jediného primitivního typu &ndash; čísel s&nbsp;plovoucí řádovou tečkou). V&nbsp;tomto dialektu BASICu je totiž nutné velikost řetězce předem určit příkazem <strong>DIM</strong>, který současně i provede alokaci paměti pro řetězec. V&nbsp;operační paměti jsou přitom uloženy dvě struktury, které řetězec plně popisují &ndash; jedná se především o sekvenci znaků v&nbsp;kódování ATASCII (odvozeno od ASCII doplněním spodních 32 znaků a změnou několika běžných znaků) a taktéž o strukturu o délce osmi bajtů, která obsahuje typ proměnné (první bajt), index jména proměnné s&nbsp;řetězcem (druhý bajt), adresu začátku řetězce (přesněji řečeno offset), alokovanou délku řetězce (maximálně 32767 znaků) a aktuální délku řetězce (opět maximálně 32767 znaků). To znamená, že i když je například provedena alokace pro řetězec o délce 1000 znaků, může v&nbsp;něm být reálně uloženo jen deset znaků.</p>

<img src="https://i.iinfo.cz/images/644/retezce-4.png" class="image-303820" alt="&#160;" width="640" height="384" />
<p><i>Obrázek 12: Po inicializaci interpretru Atari Basicu je k&nbsp;dispozici 37902 volných bajtů. Po alokaci řetězce o délce deseti znaků přijdeme celkem o 20 bajtů &ndash; dva bajty zabere název proměnné, osm bajtů struktura popsaná výše (typ+index proměnné, adresa řetězce, jeho maximální délka a aktuální délka) a zbylých 10 bajtů je vyhrazeno pro vlastní řetězec.</i></p>

<p>Veškeré operace s&nbsp;řetězci jsou zcela bezpečné, protože nikdy nedojde
k&nbsp;překročení jeho délky (přepisu jiné paměti); při spojování řetězců dojde
k&nbsp;ukončení na předem stanoveném limitu.  Mimochodem: poměrně častým trikem
bylo uložení strojových instrukcí do řetězce, zjištění adresy řetězce funkcí
<strong>ADR</strong> a &bdquo;spuštění řetězce&ldquo; další funkcí
<strong>USR</strong>.</p>

<img src="https://i.iinfo.cz/images/644/retezce-5.png" class="image-303821" alt="&#160;" width="640" height="384" />
<p><i>Obrázek 13: Pokud alokujeme další řetězec o maximální kapacitě 100 znaků,
přijdeme o 110 bajtů. Opět platí, že &bdquo;chybějících&ldquo; deset bajtů bylo
použito pro jméno proměnné, její typ, adresu+délku+maximální délku
řetězce.</i></p>

<p>Vzhledem k&nbsp;tomu, že Atari BASIC neumožňuje ukládat řetězce do polí, bylo možné operátor indexování () &bdquo;přetížit&ldquo; takovým způsobem, že je možné přistupovat jak k&nbsp;jednotlivým znakům řetězce, tak i k&nbsp;podřetězci (jedná se tedy o slicing). Tento operátor je možné použít i na levé straně přiřazovacího příkazu pro změnu vybrané části řetězce, což je velmi užitečný přístup k&nbsp;řetězcům:</p>

<pre>
10 DIM S$(15),T$(15),Q$(15)      vypíše se
20 S$="ATASIC":PRINT S$          ATASIC
30 Q$=S$(3,5):PRINT Q$           ASI
40 T$="RI_BA":PRINT T$           RI_BA
50 S$(7,13)="T$:PRINT S$         ATASICRI_BA
60 S$=S$(1,6):PRINT S$           ATASIC
70 T$(6,9)=S$(4,6):PRINT T$      RI_BASIC
80 S$(4)=T$:PRINT S$             ATARI_BASIC
90 Q$=S$(1):PRINT Q$             ATARI_BASIC
100 Q$=S$(1,1):PRINT Q$          A
</pre>

<img src="https://i.iinfo.cz/images/644/retezce-6.png" class="image-303822" alt="&#160;" width="640" height="384" />
<p><i>Obrázek 14: Z&nbsp;výpisu adres řetězců je zřejmé, že jsou v&nbsp;paměti uloženy těsně za sebou (první řetězec má délku 10 znaků) a že se nepočítá s&nbsp;žádným ukončovacím znakem.</i></p>

<img src="https://i.iinfo.cz/images/644/retezce-7.png" class="image-303823" alt="&#160;" width="640" height="384" />
<p><i>Obrázek 15: Do řetězce A$ o kapacitě deseti znaků můžeme uložit kratší text a zjistit jeho délku. Při snaze o uložení delšího textu nedojde k&nbsp;žádné chybě a už vůbec ne k&nbsp;přepisu cizí paměti &ndash; řetězec se pouze na příslušném místě odřízne.</i></p>

<img src="https://i.iinfo.cz/images/644/retezce-8.png" class="image-303824" alt="&#160;" width="640" height="384" />
<p><i>Obrázek 16: Pokus o alokaci řetězce, který se již nevejde do volné operační paměti samozřejmě skončí s&nbsp;chybou a proměnná nebude vytvořena.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Slavný Turbo-BASIC XL</h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Strukturované programování v&nbsp;Turbo-BASICu</h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. Pomůcky při vývoji a ladění programů v&nbsp;Turbo-BASICu</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. Atari LOGO</h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Unikátní vlastnosti Atari Loga</h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. Interlisp/65</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Specifika Intelispu/65</h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Programovací jazyk Action!</h2>

<p>Velmi zajímavým vyšším programovacím jazykem, který byl optimalizován pro použití na osmibitových mikropočítačích, byl jazyk nazvaný <i>Action!</i>.  Tento jazyk byl určen pro osmibitové mikropočítače Atari a od ostatních (obecnějších) jazyků se odlišoval zejména tím, že jeho možnosti odrážely schopnosti těchto mikropočítačů (datové typy omezeny na bajt, 16bitový integer se znaménkem a bez znaménka atd.). Syntaxe jazyka <i>Action!</i> je odvozena od Algolu (resp.&nbsp;od Algolské větve jazyků, kam spadá i Pascal), což se týká zejména způsobu zápisu programových smyček a podmínek (<strong>IF-FI</strong>, <strong>DO-OD</strong>). <i>Action!</i> podporoval strukturované programování, uživatelé mohli vytvářet lokální proměnné, ovšem ne na zásobníku, jehož velikost i možnosti adresování byly na MOS 6502 omezeny. Zajímavě bylo vyřešeno rozhraní jazyka <i>Action!</i>, protože uživatelé měli k&nbsp;dispozici plnohodnotný textový editor, jednoprůchodový (a tedy rychlý) překladač a <i>monitor</i>, v&nbsp;němž bylo možné provádět i ladění vyvíjené aplikace. Zdrojový text mohl být neustále uložen v&nbsp;operační paměti současně s&nbsp;přeloženou (nativní) aplikací, což bylo umožněno tím, že samotný <i>Action!</i> byl umístěn na přídavném paměťovém modulu.</p>

<a href="http://www.root.cz/obrazek/210850/"><img src="http://i.iinfo.cz/images/462/dev-8bit-46-prev.png" class="image-210850" width="370" height="221" alt="&#160;" /></a>
<p><i>Obrázek 48: Zdrojový kód části programu napsaného v&nbsp;jazyce </i>Action!</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Datové typy v&nbsp;jazyku Action!</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Programové konstrukce v&nbsp;jazyku Action!</h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. FIG-Forth</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. FastBASIC</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Na GitHubu nalezneme &ndash; pochopitelně vedle zdrojových kódů psaných v&nbsp;moderních programovacích jazycích &ndash; mnohdy i vyložené obskurnosti, takže pravděpodobně nebude na škodu zveřejnit několik kódů naprogramovaných v&nbsp;Atari BASICu a taktéž v&nbsp;Turbo-BASICu XL. Vzhledem k&nbsp;odlišnostem mezi ASCII a ATASCII (tedy znakovou sadou používanou v&nbsp;osmibitových mikropočítačích Atari) byly zdrojové kódy převedeny do čitelné podoby, což prakticky znamená, že došlo k&nbsp;převodu znaku pro konec řádku a k&nbsp;dalším nepatrným úpravám.</p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na herní konzoli Atari 2600<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-herni-konzoli-atari-2600/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-herni-konzoli-atari-2600/</a>
</li>

<li>Action (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Action">https://atariwiki.org/wiki/Wiki.jsp?page=Action</a>
</li>

<li>Assembler (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Assembler">https://atariwiki.org/wiki/Wiki.jsp?page=Assembler</a>
</li>

<li>Basic (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Basic">https://atariwiki.org/wiki/Wiki.jsp?page=Basic</a>
</li>

<li>C (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=C">https://atariwiki.org/wiki/Wiki.jsp?page=C</a>
</li>

<li>Forth (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Forth">https://atariwiki.org/wiki/Wiki.jsp?page=Forth</a>
</li>

<li>Fortran (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Fortran">https://atariwiki.org/wiki/Wiki.jsp?page=Fortran</a>
</li>

<li>Lisp (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Lisp">https://atariwiki.org/wiki/Wiki.jsp?page=Lisp</a>
</li>

<li>Logo (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Logo">https://atariwiki.org/wiki/Wiki.jsp?page=Logo</a>
</li>

<li>Pascal (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Pascal">https://atariwiki.org/wiki/Wiki.jsp?page=Pascal</a>
</li>

<li>Pilot (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Pilot">https://atariwiki.org/wiki/Wiki.jsp?page=Pilot</a>
</li>

<li>PL65 (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=PL65">https://atariwiki.org/wiki/Wiki.jsp?page=PL65</a>
</li>

<li>Quick (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Quick">https://atariwiki.org/wiki/Wiki.jsp?page=Quick</a>
</li>

<li>WSFN (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=WSFN">https://atariwiki.org/wiki/Wiki.jsp?page=WSFN</a>
</li>

<li>MAC/65 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MAC/65">https://en.wikipedia.org/wiki/MAC/65</a>
</li>

<li>Atari Assembler Editor<br />
<a href="https://en.wikipedia.org/wiki/Atari_Assembler_Editor#AMAC">https://en.wikipedia.org/wiki/Atari_Assembler_Editor#AMAC</a>
</li>

<li>cc65<br />
<a href="https://cc65.github.io/">https://cc65.github.io/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="http://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">http://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Stránky RetroFestu<br />
<a href="http://retrofest.cz/">http://retrofest.cz/</a>
</li>

<li>RetroHerna<br />
<a href="http://retroherna.cz/">http://retroherna.cz/</a>
</li>

<li>BASIC<br />
<a href="http://cs.wikipedia.org/wiki/BASIC">http://cs.wikipedia.org/wiki/BASIC</a>
</li>

<li>BASIC<br />
<a href="http://en.wikipedia.org/wiki/BASIC">http://en.wikipedia.org/wiki/BASIC</a>
</li>

<li>Rosetta Code &ndash; Category Basic<br />
<a href="http://rosettacode.org/wiki/Category:BASIC">http://rosettacode.org/wiki/Category:BASIC</a>
</li>

<li>Dartmouth College Computation Center: 1964 &ndash; The original Dartmouth BASIC manual<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf</a>
</li>

<li>The Original BASIC<br />
<a href="http://www.truebasic.com/">http://www.truebasic.com/</a>
</li>

<li>BASIC - Beginners All-purpose Symbolic Instruction Code<br />
<a href="http://hopl.murdoch.edu.au/showlanguage.prx?exp=176">http://hopl.murdoch.edu.au/showlanguage.prx?exp=176</a>
</li>

<li>Turbo BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Turbo_BASIC">http://cs.wikipedia.org/wiki/Turbo_BASIC</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Action!<br />
<a href="https://atari8bitbot.com/action/">https://atari8bitbot.com/action/</a>
</li>

<li>Atari Logo<br />
<a href="https://atari8bitbot.com/atari-logo/">https://atari8bitbot.com/atari-logo/</a>
</li>

<li>Atari PILOT &amp; Super PILOT<br />
<a href="https://atari8bitbot.com/atari-pilot/">https://atari8bitbot.com/atari-pilot/</a>
</li>

<li>Turbo-BASIC XL<br />
<a href="https://atari8bitbot.com/turbo-basic-xl/">https://atari8bitbot.com/turbo-basic-xl/</a>
</li>

<li>Atari Assembler/Editor<br />
<a href="https://atari8bitbot.com/atari-assembler-editor/">https://atari8bitbot.com/atari-assembler-editor/</a>
</li>

<li>Strings in Atari BASIC<br />
<a href="http://www.cyberroach.com/analog/an11/strings.htm">http://www.cyberroach.com/analog/an11/strings.htm</a>
</li>

<li>String Arrays in Atari BASIC<br />
<a href="http://www.atarimagazines.com/compute/issue11/52_1_STRING_ARRAYS_IN_ATARI_BASIC.php">http://www.atarimagazines.com/compute/issue11/52_1_STRING_ARRAYS_IN_ATARI_BASIC.php</a>
</li>

<li>An Atari BASIC Tutorial<br />
<a href="http://www.cyberroach.com/analog/an25/basictutorial.htm">http://www.cyberroach.com/analog/an25/basictutorial.htm</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

