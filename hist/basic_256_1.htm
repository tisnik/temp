<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Basic-256: další moderní reinkarnace BASICu určená pro výuku programování</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Basic-256: další moderní reinkarnace BASICu určená pro výuku programování</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Prozatím poslední moderní reinkarnací programovacího jazyka BASIC, s níž se seznámíme, je Basic-256. Opět se jedná o jazyk (a současně i vývojové prostředí) určené primárně pro výuku programování, které navíc podporuje i práci s grafikou.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Basic-256: další moderní reinkarnace BASICu určená pro výuku programování</a></p>
<p><a href="#k02">2. Instalace Basicu-256</a></p>
<p><a href="#k03">3. První seznámení s&nbsp;Basicem-256</a></p>
<p><a href="#k04">4. Operace s&nbsp;proměnnými, aritmetické výrazy</a></p>
<p><a href="#k05">5. Operace s&nbsp;řetězci</a></p>
<p><a href="#k06">6. Vstupně-výstupní operace</a></p>
<p><a href="#k07">7. Rozhodovací konstrukce <strong>if-then</strong> a její varianty</a></p>
<p><a href="#k08">8. Rozhodovací konstrukce <strong>case</strong></a></p>
<p><a href="#k09">9. Počítaná programová smyčka typu <strong>for-next</strong></a></p>
<p><a href="#k10">10. Programové smyčky typu <strong>while</strong> a <strong>do-until</strong></a></p>
<p><a href="#k11">11. Předčasný výskok z&nbsp;programových smyček, skok na začátek další iterace</a></p>
<p><a href="#k12">12. Výpočet největšího společného dělitele realizovaný v&nbsp;Basicu-256</a></p>
<p><a href="#k13">13. Příkaz <strong>goto</strong> a návěští (labels)</a></p>
<p><a href="#k14">14. Podprogramy realizované příkazy <strong>gosub</strong> a <strong>return</strong></a></p>
<p><a href="#k15">15. Definice nových uživatelských funkcí</a></p>
<p><a href="#k16">16. Definice a volání podprogramů (subrutin)</a></p>
<p><a href="#k17">17. Základy práce s&nbsp;poli v&nbsp;Basicu-256</a></p>
<p><a href="#k18">18. Popsané příkazy (klíčová slova) Basicu-256</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Basic-256: další moderní reinkarnace BASICu určená pro výuku programování</h2>

<p>Již <a
href="https://www.root.cz/clanky/vestavene-objekty-small-basicu-prace-s-grafikou-casovacem-reakce-na-udalosti/">v&nbsp;předchozím
článku</a> jsme se zmínili o existenci několika moderních dialektů
programovacího jazyka BASIC, které mnohdy nemají s&nbsp;původním BASICem (až na
jméno) příliš společného. A právě takovým poměrně moderním dialektem BASICu je
<i>Basic-256</i> zmíněný v&nbsp;dnešním článku. Důvod, proč je zde tato
aplikace zmíněna je jednoduchý &ndash; v&nbsp;<i>Basicu-256</i> se velmi snadno
pracuje s&nbsp;grafikou, což je samozřejmě pro potřeby výuky ideální (je
například velmi snadné vytvořit si programovou pomůcku pro výuku matematiky či
geometrie). Může se tak jednat o poměrně zajímavou alternativu k&nbsp;minule a
předminule popsanému <i>Small Basicu</i> (a to i díky použité licenci).
Paradoxně je <i>Basic-256</i> v&nbsp;praxi mnohem lepším jazykem pro delší
programy, než <i>Small Basic</i>, a to díky tomu, že podporuje rozdělení celého
problému na podprogramy (subrutiny) a funkce.</p>

<p><i>Basic-256</i> ve skutečnosti není &bdquo;pouze&ldquo; programovacím
jazykem, ale jedná se o desktopovou aplikaci, která obsahuje i jednoduše
použitelné a přehledné integrované vývojové prostředí, jež zahrnuje editor
zdrojových kódů, okno zajišťující textový vstup a výstup (což znamená, že se
jedná o formu textového terminálu), okno určené pro grafický vstup a výstup
(grafickým vstupem je myšlena reakce na pohyb myši a stisk tlačítek myši) a
v&nbsp;neposlední řadě podporuje toto integrované vývojové prostředí i
krokování vytvářeného programu. Oproti dříve popsanému <i>Small Basicu</i> se
však zapsaný zdrojový kód nekontroluje ihned při zápisu, ale až při jeho
spuštění popř.&nbsp;při krokování. To znamená, že reakce na případné chyby
v&nbsp;zápisu zdrojového kódu jsou odhaleny později, než by to bylo pro
začátečníky žádoucí. Chybová hlášení většinou obsahují přesné informace nejenom
o řádku, na kterém je chyba, ale i o znaku, kde se nalezená chyba
vyskytuje.</p>

<a href="https://www.root.cz/obrazek/491059/"><img src="https://i.iinfo.cz/images/181/basic-256-1-1-prev.png" class="image-491059" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="347" height="270" /></a>
<p><i>Obrázek 1: Přehledné integrované vývojové prostředí Basicu-256, které
obsahuje jak podporu pro textový výstup, tak i okno, do kterého je možné
vykreslit grafický výstup prováděný vytvářenou aplikací. Toto vývojové
prostředí podporuje i krokování vyvíjeným programem.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace Basicu-256</h2>

<p>Na rozdíl od <i>Microsoft Small Basicu</i> je nutné <i>Basic-256</i>
nainstalovat. Instalační soubory pro Windows, popř.&nbsp;přímo spustitelná
verze pro Windows, je dostupná přímo z&nbsp;úvodní stránky <a
href="https://basic256.org/">https://basic256.org/</a>. V&nbsp;případě Linuxu
je situace (většinou) ještě snazší, neboť <i>Basic-256</i> je možné
nainstalovat přímo z&nbsp;repositáře dané distribuce. Takže například:</p>

<pre>
$ <strong>sudo apt-get install basic256</strong>
&nbsp;
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following additional packages will be installed:
  espeak-data libespeak1 libportaudio2 libqt5multimedia5 libqt5printsupport5
  libqt5serialport5 libqt5sql5 libqt5sql5-sqlite
The following NEW packages will be installed:
  basic256 espeak-data libespeak1 libportaudio2 libqt5multimedia5
  libqt5printsupport5 libqt5serialport5 libqt5sql5 libqt5sql5-sqlite
0 upgraded, 9 newly installed, 0 to remove and 0 not upgraded.
Need to get 2 875 kB of archives.
After this operation, 16,7 MB of additional disk space will be used.
Do you want to continue? [<strong>Y</strong>/n] 
</pre>

<p>Po instalaci by měl být dostupný příkaz <strong>basic256</strong>:</p>

<pre>
$ <strong>which basic256</strong>
&nbsp;
/usr/bin/basic256
</pre>

<p>I (krátká) manuálová stránka:</p>

<pre>
$ <strong>man basic256</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: po spuštění vývojového prostředí
<i>Basicu-256</i> je vhodné si ověřit, jaká verze byla nainstalována. Mnoho
Linuxových distribucí totiž obsahuje starší verze, v&nbsp;nichž některé příkazy
nebudou plně funkční! Na rozdíly upozorním v&nbsp;dalším textu (není jich ovšem
mnoho).</div></p>

<img src="https://i.iinfo.cz/images/181/basic-256-1-2.png" class="image-491060" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="506" height="327" />
<p><i>Obrázek 2: Ověření, která verze Basicu-256 byla nainstalována.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První seznámení s&nbsp;Basicem-256</h2>

<p>Program typu &bdquo;Hello, world!&ldquo; zapsaný v&nbsp;klasických BASICech
pocházejících z&nbsp;osmdesátých let minulého století vypadá takto:</p>

<pre>
<strong>PRINT</strong> "Hello, world!"
</pre>

<p>V&nbsp;případě <i>Basicu-256</i> je možné příkazy psát i malými písmeny,
takže by tentýž program mohl vypadat následovně:</p>

<pre>
<strong>print</strong> "Hello, world!"
</pre>

<p>Komentáře lze zapisovat příkazem <strong>rem</strong>:</p>

<pre>
<strong>rem</strong> <i>Ukázka komentářů v Basicu-256</i>
<strong>rem</strong> <i>Program typu "Hello, world!"</i>
&nbsp;
<strong>print</strong> "Hello, world!"
</pre>

<p>Nebo zkráceně pomocí znaku &bdquo;#&ldquo;:</p>

<pre>
# <i>Ukázka komentářů v Basicu-256</i>
# <i>Program typu "Hello, world!"</i>
&nbsp;
<strong>print</strong> "Hello, world!"
</pre>

<p>V&nbsp;současnosti, kdy je prakticky každý osobní počítač současně i
multimediální stanicí, by však měla moderní varianta programu typu
&bdquo;Hello, world!&ldquo; vypadat odlišně &ndash; počítač by tento pozdrav
mohl říci. I to je v&nbsp;případě Basicu-256 možné, postačuje pouze namísto
příkazu <strong>print</strong> zavolat funkci <strong>say</strong>:</p>

<pre>
<strong>say</strong>("Hello, world!")
</pre>

<p><div class="rs-tip-major">Poznámka: tímto způsobem si současně ověříte, zda
jsou nainstalovány i všechny potřebné podpůrné knihovny.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Operace s&nbsp;proměnnými, aritmetické výrazy</h2>

<p>V&nbsp;Basicu-256 je možné pracovat s&nbsp;běžnými skalárními datovými typy,
konkrétně s&nbsp;numerickými hodnotami (s&nbsp;plovoucí řádovou čárkou,
podmnožinou jsou pak celá čísla) i s&nbsp;řetězci. Proměnné není zapotřebí
deklarovat, protože se vytvoří automaticky při prvním přiřazení:</p>

<pre>
<strong>rem</strong> <i>Základní práce s proměnnými</i>
<strong>rem</strong> <i>(numerické proměnné)</i>
&nbsp;
a = 42
<strong>print</strong> a
</pre>

<p><div class="rs-tip-major">Poznámka: na rozdíl od mnoha klasických BASICů i
od Small Basicu není možné pracovat s&nbsp;proměnnou, do které nebyla přiřazena
hodnota. Naproti tomu Small Basic v&nbsp;takovém případě proměnnou vytvořil a
současně i inicializoval na nulu &ndash; což je například v&nbsp;případě
špatného opisu jména proměnné chyba neodhalená interpretrem.</div></p>

<p>Řetězcové proměnné musí končit znakem dolaru, čímž se Basic-256 v&nbsp;tomto
ohledu přiblížil ke klasickým BASICům (a možná se pro začátečníky jedná o dobré
řešení). Paměť pro řetězce se ovšem nemusí explicitně alokovat, což je u
programovacího jazyku určeného pro začátečníky jen dobře:</p>

<pre>
<strong>rem</strong> <i>Základní práce s proměnnými</i>
<strong>rem</strong> <i>(řetězcové proměnné)</i>
&nbsp;
a$ = "Hello, world!"
<strong>print</strong> a$
</pre>

<p>Pochopitelně je dodržena priorita základních aritmetických operátorů, což si
lze ostatně snadno ověřit na následujícím demonstračním příkladu:</p>

<pre>
<strong>rem</strong> <i>Aritmetické výrazy, priority základní operátorů</i>
&nbsp;
x = 10
y = 20
<strong>print</strong> (x + y) * 2
<strong>print</strong> x + (y * 2)
<strong>print</strong> x + y*2
</pre>

<p><div class="rs-tip-major">Poznámka: kromě čtveřice základních aritmetických
operátorů lze použít operátor \ pro celočíselné dělení, % pro dělení modulo,
postfixové a prefixové operátory ++ a -- a dokonce i všechny tři bitové
operátory převzaté z&nbsp;céčka.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Operace s&nbsp;řetězci</h2>

<p>Řetězce je možné snadno spojit operátorem + (který je tedy přetížený). Opět
si povšimněte, že řetězce resp.&nbsp;paměť pro řetězce není zapotřebí
explicitně alokovat:</p>

<pre>
<strong>rem</strong> <i>Operace s řetězci</i>
<strong>rem</strong> <i>Alokace a spojování řetězců</i>
&nbsp;
a$ = "Hello"
b$ = "world"
&nbsp;
greeting$ = a$ + " " + b$ + "!"
<strong>print</strong> greeting$
</pre>

<p>Pro získání podřetězce se používají funkce nazvané <strong>left</strong>,
<strong>right</strong> a <strong>mid</strong>, které byly (i když
s&nbsp;dolarem na konci) zavedeny v&nbsp;Microsoft Basicu již před přibližně
čtyřiceti lety:</p>

<pre>
<strong>rem</strong> <i>Operace s řetězci</i>
<strong>rem</strong> <i>Získání podřetězců</i>
&nbsp;
a$ = "Hello, world!"
&nbsp;
<strong>print</strong> left(a$, 5)
<strong>print</strong> right(a$, 6)
<strong>print</strong> mid(a$, 8, 5)
</pre>

<p><div class="rs-tip-major">Poznámka: u funkce <strong>mid</strong> je nutné
brát v&nbsp;úvahu, že první znak řetězce má index roven jedné! U ostatních dvou
funkcí jsme od této &bdquo;drobnosti&ldquo; zcela odstíněni.</div></p>

<p>Většina funkcí pro modifikaci řetězce ve skutečnosti vrací nový řetězec:</p>

<pre>
<strong>rem</strong> <i>Operace s řetězci</i>
<strong>rem</strong> <i>Náhrada části řetězce za jiný řetězec</i>
&nbsp;
a$ = "Hello, world!"
&nbsp;
<strong>print</strong> replace(a$, "world", "root.cz")
</pre>

<p>Konkrétně funkce <strong>replace</strong> ve výchozím nastavení nahrazuje
všechny nalezené podřetězce, tedy odpovídá chováním spíše funkci
<strong>replaceAll</strong>:</p>

<pre>
<strong>rem</strong> <i>Operace s řetězci</i>
<strong>rem</strong> <i>Opakovaná náhrada části řetězce za jiný řetězec</i>
&nbsp;
a$ = "Hello, world!"
&nbsp;
<strong>print</strong> replace(a$, "o", "*")
</pre>

<p>Velikosti písmen hrají v&nbsp;Basicu-256 roli pouze při práci
s&nbsp;řetězci:</p>

<pre>
<strong>rem</strong> <i>Operace s řetězci</i>
<strong>rem</strong> <i>Vliv velikosti znaků na operaci pro nahrazení</i>
&nbsp;
a$ = "Hello, world!"
&nbsp;
<strong>print</strong> replace(a$, "O", "*")
</pre>

<p>Nahrazení lze ovšem provést bez ohledu na velikost písmen, a to použitím
nepovinného čtvrtého parametru funkce <strong>replace</strong>:</p>

<pre>
<strong>rem</strong> <i>Operace s řetězci</i>
<strong>rem</strong> <i>Vliv velikosti znaků na operaci pro nahrazení</i>
&nbsp;
a$ = "Hello, world!"
&nbsp;
<strong>print</strong> replace(a$, "O", "*", true)
</pre>

<p><div class="rs-tip-major">Poznámka: z&nbsp;tohoto demonstračního příkladu je
patrné, že u již vytvořených funkcí je v&nbsp;některých případech podporován
proměnný počet parametrů.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vstupně-výstupní operace</h2>

<p>Pro ruční zadávání číselných údajů nebo textu (řetězců) slouží
v&nbsp;klasických verzích BASICu příkaz nazvaný <strong>INPUT</strong>. Ten
ovšem například v&nbsp;minule zmíněném Small Basicu nenajdeme. Z&nbsp;tohoto
pohledu se <i>Basic-256</i> více přibližuje klasickým dialektům programovacího
jazyka BASIC, protože příkaz <strong>INPUT</strong> (klidně i psaný malými
písmeny) opět podporuje, jak je to ostatně patrné i z&nbsp;dalšího
demonstračního příkladu:</p>

<pre>
<strong>rem</strong> <i>Základní vstupně-výstupní operace</i>
&nbsp;
<strong>input</strong> "x = ", x
<strong>input</strong> "y = ", y
&nbsp;
<strong>print</strong> "Result = ";
<strong>print</strong> x+y
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že bude zadán nečíselný
údaj, dosadí se do příslušné proměnné nulová hodnota!</div></p>

<p>Zajistit lze i vstup řetězců:</p>

<pre>
<strong>rem</strong> <i>Základní vstupně-výstupní operace</i>
&nbsp;
<strong>input</strong> "jméno: ", name$
<strong>input</strong> "příjmení: ", surname$
&nbsp;
<strong>print</strong> "Zadáno: " + name$ + " " + surname$
</pre>

<p>Základní výstupní operaci už známe &ndash; je zajištěna příkazem
<strong>print</strong>, který dokáže vypsat jednu hodnotu či větší množství
hodnot uspořádaných do sloupců. Tento příkaz lze zkrátit, ostatně podobně jako
v&nbsp;klasických interpretrech BASICu, na jediný znak <strong>?</strong> (tato
možnost byla ovšem přidána až ve verzi 2.0).</p>

<p><div class="rs-tip-major">Poznámka: kromě toho je do Basicu-256 plně
integrován i grafický výstup, což je však téma, kterému se budeme věnovat až
v&nbsp;navazujícím článku.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Rozhodovací konstrukce <strong>if-then</strong> a její varianty</h2>

<p>Součástí prakticky jakéhokoli Turingovsky kompletního programovacího jazyka
je nějaká forma rozhodovací konstrukce popř.&nbsp;speciální formy se stejným
významem. Výjimkou pochopitelně není ani dnes popisovaný <i>Basic-256</i>,
který obsahuje strukturovaný příkaz typu <strong>if-then-else</strong>, jenž je
doplněn o další užitečnou konstrukci <strong>case</strong>. Základní tvar
tohoto příkazu neobsahuje větev <strong>else</strong>, skládá se tedy
z&nbsp;klíčových slov <strong>if</strong>, <strong>then</strong> a
<strong>endif</strong>:</p>

<pre>
<strong>rem</strong> <i>Rozhodovací konstrukce if-then</i>
<strong>rem</strong> <i>Základní varianta s jedinou větví</i>
&nbsp;
<strong>print</strong> "x = "
<strong>input</strong> x
&nbsp;
<strong>if</strong> x &lt; 0 <strong>then</strong>
    <strong>print</strong> "Negative value"
<strong>endif</strong>
</pre>

<p>Takzvané úplné rozvětvení do dvou nezávislých větví se provede takto:</p>

<pre>
<strong>rem</strong> <i>Rozhodovací konstrukce if-then</i>
<strong>rem</strong> <i>Rozšířená varianta s oběma větvemi</i>
&nbsp;
<strong>print</strong> "x = "
<strong>input</strong> x
&nbsp;
<strong>if</strong> x &lt; 0 <strong>then</strong>
    <strong>print</strong> "Negative value"
<strong>else</strong>
    <strong>print</strong> "Zero or positive value"
<strong>endif</strong>
</pre>

<p>V&nbsp;<i>Basicu-256</i> je možné &ndash; na rozdíl od mnoha starších
dialektů programovacího jazyka BASIC &ndash; vnořit prakticky libovolné
množství rozhodovacích konstrukcí <strong>if-then</strong>. Tuto možnost si
ukážeme na demonstračním příkladu, který ve &bdquo;vnější&ldquo; podmínce
testuje, zda je zadaná hodnota záporná a pokud ne (tedy když je kladná či
nulová), provede další rozvětvení. Mimochodem &ndash; díky tomu, že za klíčovým
slovem <strong>then</strong> se automaticky vytvoří nový programový blok, by
v&nbsp;tomto jazyku nemělo tak snadno dojít k&nbsp;chybám typu <a
href="https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/">goto
fail</a> (k&nbsp;těm dochází u těch programovacích jazyků, kde je blok
volitelný):</p>

<pre>
<strong>rem</strong> <i>Rozhodovací konstrukce if-then</i>
<strong>rem</strong> <i>Vnořené příkazy if-then</i>
&nbsp;
<strong>print</strong> "x = "
<strong>input</strong> x
&nbsp;
<strong>if</strong> x &lt; 0 <strong>then</strong>
    <strong>print</strong> "Negative value"
<strong>else</strong>
    <strong>if</strong> x &gt; 0 <strong>then</strong>
        <strong>print</strong> "Positive value"
    <strong>else</strong>
        <strong>print</strong> "Zero"
    <strong>endif</strong>
<strong>endif</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: jsou podporovány i jednořádkové
konstrukce <strong>if-then-else</strong>, ovšem ty nejsou v&nbsp;praxi příliš
přehledné.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Rozhodovací konstrukce <strong>case</strong></h2>

<p>Ve skutečnosti mnohdy potřebujeme vytvořit několik větví, každou vykonanou
po splnění určité podmínky. Takové zřetězení podmínek v&nbsp;mnoha jiných
programovacích jazycích zajišťuje konstrukce obsahující klíčové slovo
<strong>elseif</strong> (psáno dohromady) nebo <strong>else if</strong>.
Naproti tomu v&nbsp;Basicu-256 je podporována odlišná konstrukce založená na
zápisu většího množství podmínek za klíčové slovo <strong>case</strong>.
Výsledek je (podle mého názoru) čitelnější, protože opticky nepreferuje první
podmínku tak, jako je tomu v&nbsp;řetězci
<strong>if-elseif-elseif...</strong>:</p>

<pre>
<strong>rem</strong> <i>Rozhodovací konstrukce case</i>
&nbsp;
<strong>print</strong> "x = "
<strong>input</strong> x
&nbsp;
<strong>begin case</strong>
    <strong>case</strong> x &lt; 0
        <strong>print</strong> "Negative value"
    <strong>case</strong> x &gt; 0
        <strong>print</strong> "Positive value"
    <strong>else</strong>
        <strong>print</strong> "Zero"
<strong>endcase</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: poslední větev <strong>else</strong>
odpovídá větvi <strong>default</strong> z&nbsp;podobné konstrukce
<strong>switch-case</strong> známé z&nbsp;céčkovské větve programovacích jazyků
(ovšem tato konstrukce je více omezená, než je tomu v&nbsp;případě
Basicu-256).</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Počítaná programová smyčka typu <strong>for-next</strong></h2>

<p>Prakticky všechny dialekty programovacího jazyka BASIC podporují počítanou
programovou smyčku typu <strong>for-next</strong>. Určitou výjimkou byl minule
popsaný <i>Small Basic</i>, v&nbsp;němž bylo klíčové slovo
<strong>next</strong> nahrazeno za nicneříkající <strong>endfor</strong> bez
specifikovaného kontextu (tedy jména řídicí proměnné smyčky). <i>Basic-256</i>
se v&nbsp;tomto ohledu vrací ke kořenům, což je ostatně patrné i na
následujícím programu s&nbsp;počítanou smyčkou:</p>

<pre>
<strong>rem</strong> <i>Základní podoba programové smyčky for-next</i>
&nbsp;
<strong>for</strong> i = 1 <strong>to</strong> 10
    <strong>print</strong> i
<strong>next</strong> i
</pre>

<p>Specifikovat je možné i krok, tedy hodnotu, o kterou se bude měnit počitadlo
smyčky po každé iteraci:</p>

<pre>
<strong>rem</strong> <i>Základní podoba programové smyčky for-next</i>
<strong>rem</strong> <i>se specifikací kroku</i>
&nbsp;
<strong>for</strong> i = 1 <strong>to</strong> 10 <strong>step</strong> 2
    <strong>print</strong> i
<strong>next</strong> i
</pre>

<p>V&nbsp;případě, že jsou oba limity nastaveny na shodnou hodnotu, proběhne
tělo smyčky přesně jednou (na rozdíl od některých starších interpretrů, které
se v&nbsp;tomto ohledu chovají chybně):</p>

<pre>
<strong>rem</strong> <i>Základní podoba programové smyčky for-next</i>
<strong>rem</strong> <i>s oběma limitami nastavenými na shodnou hodnotu</i>
&nbsp;
<strong>for</strong> i = 0 <strong>to</strong> 0
    <strong>print</strong> i
<strong>next</strong> i
</pre>

<p>Již minule jsme si ukazovali příklad, ve kterém má dolní limit vyšší hodnotu
než limit horní. <i>Basic-256</i> na tuto situaci reaguje korektně, a to tak,
že smyčka neproběhne ani jednou:</p>

<pre>
<strong>rem</strong> <i>Základní podoba programové smyčky for-next</i>
<strong>rem</strong> <i>s dolním limitem vyšším než horní limit</i>
&nbsp;
<strong>for</strong> i = 1 <strong>to</strong> 0
    <strong>print</strong> i
<strong>next</strong> i
</pre>

<p>Na rozdíl od (například) Pascalu je možné v&nbsp;BASICech měnit hodnotu
počitadla o neceločíselný krok:</p>

<pre>
<strong>rem</strong> <i>Základní podoba programové smyčky for-next</i>
<strong>rem</strong> <i>se záporným krokem.</i>
&nbsp;
<strong>for</strong> i = 1 <strong>to</strong> 0 <strong>step</strong> -0.3
    <strong>print</strong> i
<strong>next</strong> i
</pre>

<p>Následující demonstrační příklad ukazuje jeden z&nbsp;problematických rysů
<i>Basicu-256</i>: i když lze limity počítané programové smyčky specifikovat
proměnnou, nebude případná změna této proměnné uvnitř smyčky reflektována, což
je chování odlišné od <i>Small Basicu</i>. To mj.&nbsp;znamená, že zdaleka ne
všechny algoritmy jsou jednoduše přenositelné na <i>sémantické</i> úrovni
(syntaxe odlišná je, ale je snadné ji upravit):</p>

<pre>
<strong>rem</strong> <i>Programová smyčka for-next</i>
<strong>rem</strong> <i>s postupně modifikovaným horním limitem</i>
&nbsp;
max = 5
<strong>for</strong> i = 1 <strong>to</strong> max
    <strong>print</strong> i
    max = max + 2
<strong>next</strong> i
</pre>

<p>Totéž platí i při snaze modifikovat hodnotu kroku &ndash; opět nebude nová
hodnota korektně reflektována:</p>

<pre>
<strong>rem</strong> <i>Programová smyčka for-next</i>
<strong>rem</strong> <i>s postupně modifikovaným krokem</i>
&nbsp;
s = 1
<strong>for</strong> i = 1 <strong>to</strong> 10 <strong>step</strong> s
    <strong>print</strong> i
    s = s / 2.0
<strong>next</strong> i
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Programové smyčky typu <strong>while</strong> a <strong>do-until</strong></h2>

<p>Dalším typem programové smyčky je smyčka typu <strong>while</strong>. Ta
například v&nbsp;<i>GW-BASICu</i> existuje ve variantě založené na klíčových
slovech <strong>WHILE</strong> a <strong>WEND</strong>.
V&nbsp;<i>Basicu-256</i> je začátek smyčky (a podmínka) zapsána za klíčovým
slovem <strong>while</strong> a konec smyčky je označen souslovím <strong>end
while</strong>:</p>

<pre>
<strong>rem</strong> <i>Základní podoba programové smyčky typu while</i>
&nbsp;
i = 1
&nbsp;
<strong>while</strong> i &lt; 1000
    <strong>print</strong> i
    i = i * 2
<strong>end while</strong>
</pre>

<p>Existuje i programová smyčka, v&nbsp;níž se podmínka pro ukončení testuje až
po provedení těla smyčky. V&nbsp;<i>Basicu-256</i> je tato smyčka
reprezentována klíčovými slovy <strong>do</strong> a
<strong>until</strong>:</p>

<pre>
<strong>rem</strong> <i>Základní podoba programové smyčky typu do-until</i>
&nbsp;
i = 1
&nbsp;
<strong>do</strong>
    <strong>print</strong> i
    i = i * 2
<strong>until</strong> i &gt; 1000
</pre>

<p><div class="rs-tip-major">Poznámka: tyto smyčky lze pochopitelně různým
způsobem vnořovat. Praktické příklady si ukážeme příště.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Předčasný výskok z&nbsp;programových smyček, skok na začátek další iterace</h2>

<p>Předčasný výskok z&nbsp;programové smyčky typu <strong>for-next</strong> se
provádí příkazem <strong>exit for</strong>, který tedy odpovídá příkazu
<strong>break</strong> z&nbsp;céčkovské větve programovacích jazyků:</p>

<pre>
<strong>for</strong> i = 1 <strong>to</strong> 100
    <strong>print</strong> i
    <strong>if</strong> i &gt; 17 <strong>then</strong>
        <strong>exit for</strong>
    <strong>endif</strong>
<strong>next</strong> i
</pre>

<p>Podobným způsobem je možné vyskočit i z&nbsp;dalších typů programových
smyček.</p>

<p>Existuje i příkaz typu <strong>continue</strong>, který provede okamžitý
přeskok na podmínky určující, zda se má provést další iterace či nikoli:</p>

<pre>
<strong>for</strong> i = 1 <strong>to</strong> 20
    <strong>if</strong> i % 2 = 0 <strong>then</strong>
        <strong>continue for</strong>
    <strong>endif</strong>
    <strong>print</strong> i
<strong>next</strong> i
</pre>

<p>Varianta příkazu <strong>continue</strong> pro další typy programových smyček:</p>

<pre>
i = 0
&nbsp;
<strong>while</strong> i &lt;= 20
    i = i + 1
    <strong>if</strong> i % 2 = 0 <strong>then</strong>
        <strong>continue while</strong>
    <strong>endif</strong>
    <strong>print</strong> i
<strong>end while</strong>
</pre>

<p>A konečně varianta <strong>continue</strong>, tentokrát pro smyčku
<strong>do-until</strong>:</p>

<pre>
i = 0
&nbsp;
<strong>do</strong>
    i = i + 1
    <strong>if</strong> i % 2 = 0 <strong>then</strong>
        <strong>continue do</strong>
    <strong>endif</strong>
    <strong>print</strong> i
<strong>until</strong> i &gt;= 20
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Výpočet největšího společného dělitele realizovaný v&nbsp;Basicu-256</h2>

<p>V&nbsp;článcích o <i>GW-BASICu (PC-Basicu)</i> i o <i>Small Basicu</i> jsme
si ukázali program pro výpočet největšího společného dělitele dvou celých
kladných čísel. Tento výpočet je možné s&nbsp;využitím programové smyčky typu
<strong>while</strong> realizovat i v&nbsp;<i>Basicu-256</i>, a to například
následujícím způsobem:</p>

<pre>
<strong>rem</strong> Výpočet největšího společného dělitele
&nbsp;
<strong>print</strong> "x = "
<strong>input</strong> x
&nbsp;
<strong>print</strong> "y = "
<strong>input</strong> y
&nbsp;
<strong>while</strong> x&lt;&gt;y
    <strong>if</strong> x&gt;y <strong>then</strong>
        x=x-y
    <strong>endif</strong>
    <strong>if</strong> x&lt;y <strong>then</strong>
        y=y-x
    <strong>endif</strong>
<strong>end while</strong>
&nbsp;
<strong>print</strong> "gcd = "
<strong>print</strong> x
</pre>

<p><div class="rs-tip-major">Poznámka: lze použít i kratší verzi programu,
v&nbsp;níž jsou podmínky zapsány na jediném řádku a celé tělo programové smyčky
se tak zmenší na pouhé dva řádky. To je ovšem na úkor čitelnosti.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Příkaz <strong>goto</strong> a návěští (labels)</h2>

<p><i>Basic-256</i> by nebyl pravým BASICem, kdyby neobsahoval příkaz
<strong>GOTO</strong>. Ovšem vzhledem k&nbsp;tomu, že se v&nbsp;tomto dialektu
BASICu nepoužívají čísla řádků, je nutné cíl skoku definovat takzvaným
<i>návěštím</i> neboli <i>label</i>. V&nbsp;naprosté většině algoritmů se
příkazu <strong>goto</strong> snadno vyhneme, ovšem pro úplnost si ukažme
příklad jeho použití:</p>

<pre>
i = 1
&nbsp;
LOOP:
    print i
    i = i + 1
    <strong>if</strong> i &lt;= 10 <strong>then</strong>
        <strong>goto</strong> LOOP
    <strong>endif</strong>
</pre>

<p>Přepis algoritmu pro výpočet největšího společného dělitele lze přepsat
nestrukturovaným způsobem tak, aby se použil právě příkaz
<strong>goto</strong>:</p>

<pre>
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong> <i>Výpočet největšího společného</i>
<strong>rem</strong> <i>dělitele.</i>
<strong>rem</strong> 
<strong>rem</strong> <i>Úprava pro Basic-256</i>
<strong>rem</strong> 
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong>
<strong>rem</strong>
&nbsp;
<strong>print</strong> "X = "
<strong>input</strong> x
&nbsp;
<strong>print</strong> "Y = "
<strong>input</strong> y
&nbsp;
LOOP:
<strong>if</strong> x = y <strong>then</strong>
    <strong>print</strong> x
    <strong>goto</strong> DONE
endif
&nbsp;
<strong>if</strong> x &gt; y <strong>then</strong>
    x = x -y
    <strong>goto</strong> LOOP
endif
&nbsp;
<strong>if</strong> x &lt; y <strong>then</strong>
    y = y -x
    <strong>goto</strong> LOOP
<strong>endif</strong>
&nbsp;
DONE:
</pre>

<p>Je však nutné si dát pozor na to, aby jméno návěští nebylo shodné
s&nbsp;nějakým klíčovým slovem (což je jedna z&nbsp;největších nevýhod těchto
moderních BASICů &ndash; mají příliš velké množství klíčových slov, do kterých
se lze relativně snadno &bdquo;trefit&ldquo;):</p>

<pre>
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong> <i>Výpočet největšího společného</i>
<strong>rem</strong> <i>dělitele.</i>
<strong>rem</strong> 
<strong>rem</strong> <i>Úprava pro Basic-256</i>
<strong>rem</strong>
<strong>rem</strong> <i>Nekorektní název cíle skoku</i>
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong>
<strong>rem</strong>
&nbsp;
<strong>print</strong> "X = "
<strong>input</strong> x
&nbsp;
<strong>print</strong> "Y = "
<strong>input</strong> y
&nbsp;
LOOP:
<strong>if</strong> x = y <strong>then</strong>
    <strong>print</strong> x
    <strong>goto</strong> END
endif
&nbsp;
<strong>if</strong> x &gt; y <strong>then</strong>
    x = x -y
    <strong>goto</strong> LOOP
endif
&nbsp;
<strong>if</strong> x &lt; y <strong>then</strong>
    y = y -x
    <strong>goto</strong> LOOP
<strong>endif</strong>
&nbsp;
END:
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Podprogramy realizované příkazy <strong>gosub</strong> a <strong>return</strong></h2>

<p><i>Basic-256</i> pochopitelně podporuje tvorbu podprogramů, podobně jako
prakticky všechny starší implementace BASICu. Připomeňme si, že
v&nbsp;klasických nestrukturovaných BASICech nebyl začátek podprogramu nijak
označen &ndash; prostě se jednalo o jakýkoli programový řádek, na který se
skákalo příkazem <strong>GOSUB</strong> (podprogram tedy ani nebyl pojmenován).
Návrat z&nbsp;podprogramu byl řešen příkazem <strong>RETURN</strong>.
V&nbsp;případě Basicu-256 lze tento postup stále použít, ovšem namísto čísla
řádku se pochopitelně použije návěští. Alternativně lze ovšem deklarovat i
plnohodnotné funkce a podprogramy, což si ukážeme v&nbsp;navazujících
kapitolách. Nejdříve se však podívejme na jednoduchý demonstrační příklad,
v&nbsp;němž jsou použita klíčová slova <strong>gosub</strong> a
<strong>return</strong>:</p>

<pre>
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong> <i>Výpočet faktoriálu</i>
<strong>rem</strong> 
<strong>rem</strong> <i>Úprava pro Basic-256</i>
<strong>rem</strong>
<strong>rem</strong> <i>Použití programové konstrukce</i>
<strong>rem</strong> <i>GOSUB-RETURN</i>
<strong>rem</strong> 
<strong>rem</strong> <i>*****************************</i>
&nbsp;
<strong>for</strong> n=1 <strong>to</strong> 20
    <strong>gosub</strong> FACTORIAL
    <strong>print</strong> fact
<strong>next</strong> n
<strong>end</strong>
&nbsp;
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong> <i>Výpočet faktoriálu</i>
<strong>rem</strong> <i>*****************************</i>
&nbsp;
FACTORIAL:
    fact=1
    <strong>for</strong> i=n <strong>to</strong> 1 <strong>step</strong> -1
        fact=fact*i
    <strong>next</strong> i
    <strong>return </strong>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Definice nových uživatelských funkcí</h2>

<p>Mnohem silnější programovací technikou je ovšem definice nových
uživatelských funkcí. Díky podpoře uživatelských funkcí je možné celý problém
rozdělit na jednodušeji implementovatelné a testovatelné jednotky &ndash; a
právě tvorba programů stylem &bdquo;rozděl a panuj&ldquo; by se měla učit již
v&nbsp;prvních nepatrně složitějších algoritmech. Podívejme se nyní na to, jak
lze funkce použít v&nbsp;Basicu-256:</p>

<pre>
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong> <i>Výpočet faktoriálu</i>
<strong>rem</strong> 
<strong>rem</strong> <i>Úprava pro Basic-256</i>
<strong>rem</strong>
<strong>rem</strong> <i>Použití definované uživatelské</i>
<strong>rem</strong> <i>funkce</i>
<strong>rem</strong> 
<strong>rem</strong> <i>*****************************</i>
&nbsp;
<strong>for</strong> n=1 <strong>to</strong> 20
    <strong>print</strong> factorial(n)
<strong>next</strong> n
<strong>end</strong>
&nbsp;
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong> <i>Výpočet faktoriálu</i>
<strong>rem</strong> <i>*****************************</i>
&nbsp;
<strong>function</strong> factorial(n)
    fact=1
    <strong>for</strong> i=n <strong>to</strong> 1 <strong>step</strong> -1
        fact=fact*i
    <strong>next</strong> i
    <strong>return</strong> fact
<strong>end function</strong>
</pre>

<p>Vidíme, že pro návrat hodnoty z&nbsp;funkce je použito klíčové slovo
<strong>return</strong>. Alternativně je však možné použít zápis, který více
odpovídá původním &bdquo;strukturovaným&ldquo; BASICům, tedy přiřazením
návratové hodnoty do jména funkce:</p>

<pre>
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong> <i>Výpočet faktoriálu</i>
<strong>rem</strong> 
<strong>rem</strong> <i>Úprava pro Basic-256</i>
<strong>rem</strong>
<strong>rem</strong> <i>Použití definované uživatelské</i>
<strong>rem</strong> <i>funkce</i>
<strong>rem</strong> 
<strong>rem</strong> <i>*****************************</i>
&nbsp;
<strong>for</strong> n=1 <strong>to</strong> 20
    print factorial(n)
<strong>next</strong> n
<strong>end </strong>
&nbsp;
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong> <i>Výpočet faktoriálu</i>
<strong>rem</strong> <i>*****************************</i>
&nbsp;
<strong>function</strong> factorial(n)
    fact=1
    <strong>for</strong> i=n <strong>to</strong> 1 <strong>step</strong> -1
        fact=fact*i
    <strong>next</strong> i
    <u>factorial = fact</u>
<strong>end function</strong>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Definice a volání podprogramů (subrutin)</h2>

<p><i>Basic-256</i> podporuje i tvorbu plnohodnotných (pojmenovaných)
podprogramů, a to dokonce podprogramů s&nbsp;parametry. Nesmíme však zapomenout
na to, že volání podprogramů je realizováno klíčovým slovem
<strong>call</strong>, tedy odlišným způsobem, než volání funkcí:</p>

<pre>
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong> <i>Výpočet faktoriálu</i>
<strong>rem</strong> 
<strong>rem</strong> <i>Úprava pro Basic-256</i>
<strong>rem</strong>
<strong>rem</strong> <i>Použití podprogramu.</i>
<strong>rem</strong> 
<strong>rem</strong> <i>*****************************</i>
&nbsp;
<strong>for</strong> n=1 <strong>to</strong> 20
    <strong>call</strong> factorial(n)
<strong>next</strong> n
end 
&nbsp;
<strong>rem</strong> <i>*****************************</i>
<strong>rem</strong> <i>Výpočet faktoriálu</i>
<strong>rem</strong> <i>*****************************</i>
&nbsp;
<strong>subroutine</strong> factorial(n)
    fact=1
    <strong>for</strong> i=n <strong>to</strong> 1 <strong>step</strong> -1
        fact=fact*i
    <strong>next</strong> i
    <strong>print</strong> fact
<strong>end subroutine</strong>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Základy práce s&nbsp;poli v&nbsp;Basicu-256</h2>

<p>Vyzkoušejme si ještě práci s&nbsp;poli. Pole je &ndash; na rozdíl od řetězců
&ndash; nutné alokovat, a to příkazem <strong>dim</strong>. Délku pole lze
získat zcela unikátně &ndash; výrazem <strong>jméno_pole[?]</strong>:</p>

<pre>
<strong>rem</strong> <i>Alokace pole a výpis délky pole</i>
&nbsp;
<strong>dim</strong> a(10)
&nbsp;
<strong>print</strong> a[?]
</pre>

<p>Prvky pole lze procházet standardní počítanou smyčkou
<strong>for-next</strong>:</p>

<pre>
<strong>rem</strong> <i>Procházení prvky pole</i>
<strong>rem</strong> <i>S využitím standardní smyčky FOR-NEXT</i>
&nbsp;
<strong>dim</strong> a(10)
&nbsp;
<strong>for</strong> i = 0 <strong>to</strong> a[?]-1
    a[i] = 1/(i+1)
<strong>next</strong> i
&nbsp;
<strong>for</strong> i = 0 <strong>to</strong> a[?]-1
    <strong>print</strong> a[i]
<strong>next</strong> i
</pre>

<p>Nebo je možné použít specializovanou smyčku <strong>for-each</strong>:</p>

<pre>
<strong>rem</strong> <i>Procházení prvky pole</i>
<strong>rem</strong> <i>S využitím smyčky FOR-EACH</i>
&nbsp;
<strong>dim</strong> a(10)
&nbsp;
<strong>for</strong> i = 0 <strong>to</strong> a[?]-1
    a[i] = 1/(i+1)
<strong>next</strong> i
&nbsp;
<strong>for</strong> <strong>each</strong> item <strong>in</strong> a
    <strong>print</strong> item
<strong>next</strong> item
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti podporuje
<i>Basic-256</i> i práci s&nbsp;mapami, což si ukážeme příště.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Popsané příkazy (klíčová slova) Basicu-256</h2>

<p>Jak je u různých dialektů programovacího jazyka BASIC zvykem, je struktura
programů určována do velké míry použitými klíčovými slovy (neboli příkazy) a
nikoli množstvím různých dalších znaků.</p>

<p>V&nbsp;dnešním článku jsme si popsali následující příkazy:</p>

<table>
<tr><th> #</th><th>Příkaz</th><th>Stručný popis příkazu</th></tr>
<tr><td> 1</td><td>print</td><td>tisk hodnoty na textovou konzoli</td></tr>
<tr><td> 2</td><td>say</td><td>hlasité přečtení obsahu řetězce</td></tr>
<tr><td> 3</td><td>rem</td><td>poznámka (lze nahradit znakem #)</td></tr>
<tr><td> 4</td><td>input</td><td>interaktivní vstup (číslo nebo řetězec)</td></tr>
<tr><td> 5</td><td>if</td><td>příkaz, za kterým následuje podmínka</td></tr>
<tr><td> 6</td><td>then</td><td>začátek větve vykonané při splnění podmínky</td></tr>
<tr><td> 7</td><td>endif</td><td>konec rozhodovacího příkazu <strong>if</strong></td></tr>
<tr><td> 8</td><td>else</td><td>začátek větve vykonané při nesplnění podmínky</td></tr>
<tr><td> 9</td><td>begin case</td><td>začátek rozhodovací konstrukce s&nbsp;více podmínkami</td></tr>
<tr><td>10</td><td>case</td><td>začátek větve se specifikovanou podmínkou</td></tr>
<tr><td>11</td><td>endcase</td><td>konec rozhodovacího příkazu <strong>case</strong></td></tr>
<tr><td>12</td><td>for</td><td>začátek počítané programové smyčky</td></tr>
<tr><td>13</td><td>to</td><td>klíčové slovo, za nímž následuje horní mez smyčky</td></tr>
<tr><td>14</td><td>step</td><td>klíčové slovo, za nímž následuje krok smyčky</td></tr>
<tr><td>15</td><td>next</td><td>konec počítané programové smyčky</td></tr>
<tr><td>16</td><td>while</td><td>začátek programové smyčky s&nbsp;testem na začátku</td></tr>
<tr><td>17</td><td>end while</td><td>konec programové smyčky s&nbsp;testem na začátku</td></tr>
<tr><td>18</td><td>do</td><td>začátek programové smyčky s&nbsp;testem na konci</td></tr>
<tr><td>19</td><td>until</td><td>konec programové smyčky s&nbsp;testem na konci</td></tr>
<tr><td>20</td><td>goto</td><td>nestrukturovaný skok na určené návěští (<i>label</i>)</td></tr>
<tr><td>21</td><td>gosub</td><td>skok do podprogramu realizovaný návěštím</td></tr>
<tr><td>22</td><td>return</td><td>návrat z&nbsp;podprogramu</td></tr>
<tr><td>23</td><td>function</td><td>začátek definice funkce</td></tr>
<tr><td>24</td><td>end function</td><td>konec definice funkce</td></tr>
<tr><td>25</td><td>subroutine</td><td>začátek definice podprogramu</td></tr>
<tr><td>26</td><td>end subroutine</td><td>konec definice podprogramu</td></tr>
<tr><td>27</td><td>call</td><td>volání podprogramu</td></tr>
<tr><td>28</td><td>dim</td><td>alokace pole</td></tr>
<tr><td>29</td><td>end</td><td>ukončení celého programu</td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady určené pro Basic-256 (a tudíž
nekompatibilní s&nbsp;žádným jiným BASICem) byly uloženy do Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Tyto příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez
nutnosti klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis příkladu</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01_hello_world.bas</td><td>program typu &bdquo;Hello, world!&ldquo; v&nbsp;Basicu-256</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/01_hello_world.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/01_hello_world.bas</a></td></tr>
<tr><td> 2</td><td>02_comment.bas</td><td>zápis komentářů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/02_comment.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/02_comment.bas</a></td></tr>
<tr><td> 3</td><td>03_int_variable.bas</td><td>práce s&nbsp;celočíselnými proměnnými</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/03_int_variable.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/03_int_variable.bas</a></td></tr>
<tr><td> 4</td><td>04_string_variable.bas</td><td>práce s&nbsp;řetězcovými proměnnými</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/04_string_variable.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/04_string_variable.bas</a></td></tr>
<tr><td> 5</td><td>05_expressions.bas</td><td>základní aritmetické výrazy, priorita operátorů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/05_expressions.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/05_expressions.bas</a></td></tr>
<tr><td> 6</td><td>06_string_concatenation.bas</td><td>operace spojení řetězců</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/06_string_concatenation.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/06_string_concatenation.bas</a></td></tr>
<tr><td> 7</td><td>07_substring.bas</td><td>získání podřetězce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/07_substring.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/07_substring.bas</a></td></tr>
<tr><td> 8</td><td>08_string_replace.bas</td><td>náhrada části řetězce jiným řetězcem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/08_string_replace.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/08_string_replace.bas</a></td></tr>
<tr><td> 9</td><td>09_string_replace.bas</td><td>vícenásobná náhrada podřetězce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/09_string_replace.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/09_string_replace.bas</a></td></tr>
<tr><td>10</td><td>10_string_replace.bas</td><td>vliv velikosti znaků při nahrazování</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/10_string_replace.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/10_string_replace.bas</a></td></tr>
<tr><td>11</td><td>11_string_replace.bas</td><td>vliv velikosti znaků při nahrazování</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/11_string_replace.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/11_string_replace.bas</a></td></tr>
<tr><td>12</td><td>12_input_output.bas</td><td>základní vstupně-výstupní operace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/12_input_output.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/12_input_output.bas</a></td></tr>
<tr><td>13</td><td>13_if_then.bas</td><td>rozhodovací konstrukce typu <strong>if-then</strong> (jedna větev)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/13_if_then.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/13_if_then.bas</a></td></tr>
<tr><td>14</td><td>14_if_then_else.bas</td><td>rozhodovací konstrukce typu <strong>if-then-else</strong> (obě větve)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/14_if_then_else.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/14_if_then_else.bas</a></td></tr>
<tr><td>15</td><td>15_nested_ifs.bas</td><td>vnořené rozhodovací konstrukce typu <strong>if-then-else</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/15_nested_ifs.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/15_nested_ifs.bas</a></td></tr>
<tr><td>16</td><td>16_case.bas</td><td>rozhodovací konstrukce typu <strong>case</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/16_case.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/16_case.bas</a></td></tr>
<tr><td>17</td><td>17_for_next.bas</td><td>počítaná programová smyčka typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/17_for_next.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/17_for_next.bas</a></td></tr>
<tr><td>18</td><td>18_for_next_step.bas</td><td>počítaná programová smyčka typu <strong>for-next</strong> s&nbsp;počitadlem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/18_for_next_step.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/18_for_next_step.bas</a></td></tr>
<tr><td>19</td><td>19_for_next_same_limits.bas</td><td>oba shodné limity v&nbsp;programové smyčce <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/19_for_next_same_limits.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/19_for_next_same_limits.bas</a></td></tr>
<tr><td>20</td><td>20_for_next_illegal.bas</td><td>dolní limit větší než horní limit</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/20_for_next_illegal.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/20_for_next_illegal.bas</a></td></tr>
<tr><td>21</td><td>21_for_next_count_down.bas</td><td>počítání směrem dolů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/21_for_next_count_down.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/21_for_next_count_down.bas</a></td></tr>
<tr><td>22</td><td>22_for_next_variable_max.bas</td><td>postupná modifikace horního limitu ve smyčce <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/22_for_next_variable_max.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/22_for_next_variable_max.bas</a></td></tr>
<tr><td>23</td><td>23_for_next_variable_step.bas</td><td>postupná modifikace kroku ve smyčce <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/23_for_next_variable_step.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/23_for_next_variable_step.bas</a></td></tr>
<tr><td>24</td><td>24_while.bas</td><td>programová smyčka typu <strong>while</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/24_while.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/24_while.bas</a></td></tr>
<tr><td>25</td><td>25_do_until.bas</td><td>programová smyčka typu <strong>do-until</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/25_do_until.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/25_do_until.bas</a></td></tr>
<tr><td>26</td><td>26_exit_for.bas</td><td>předčasný výskok ze smyčky <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/26_exit_for.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/26_exit_for.bas</a></td></tr>
<tr><td>27</td><td>27_continue_for.bas</td><td>příkaz <strong>continue for</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/27_continue_for.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/27_continue_for.bas</a></td></tr>
<tr><td>28</td><td>28_continue_while.bas</td><td>příkaz <strong>continue while</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/28_continue_while.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/28_continue_while.bas</a></td></tr>
<tr><td>29</td><td>29_continue_do.bas</td><td>příkaz <strong>continue do</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/29_continue_do.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/29_continue_do.bas</a></td></tr>
<tr><td>30</td><td>30_gcd.bas</td><td>výpočet největšího společného dělitele</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/30_gcd.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/30_gcd.bas</a></td></tr>
<tr><td>31</td><td>31_goto.bas</td><td>nestrukturovaný příkaz <strong>goto</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/31_goto.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/31_goto.bas</a></td></tr>
<tr><td>32</td><td>32_goto_GCD.bas</td><td>využití příkazu <strong>goto</strong> při výpočtu největšího společného dělitele</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/32_goto_GCD.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/32_goto_GCD.bas</a></td></tr>
<tr><td>33</td><td>33_goto_GCD_error.bas</td><td>problematické použití klíčového slova v&nbsp;jiném kontextu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/33_goto_GCD_error.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/33_goto_GCD_error.bas</a></td></tr>
<tr><td>34</td><td>34_factorial.bas</td><td>výpočet faktoriálu, konstrukce <strong>gosub</strong> a <strong>return</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/34_factorial.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/34_factorial.bas</a></td></tr>
<tr><td>35</td><td>35_factorial_function.bas</td><td>definice funkce pro výpočet faktoriálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/35_factorial_function.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/35_factorial_function.bas</a></td></tr>
<tr><td>36</td><td>36_factorial_function.bas</td><td>definice funkce pro výpočet faktoriálu, alternativní výstup z&nbsp;funkce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/36_factorial_function.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/36_factorial_function.bas</a></td></tr>
<tr><td>37</td><td>37_factorial_subroutine.bas</td><td>definice podprogramu pro výpočet faktoriálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/37_factorial_subroutine.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/37_factorial_subroutine.bas</a></td></tr>
<tr><td>38</td><td>38_arrays.bas</td><td>alokace pole a výpis délky pole</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/38_arrays.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/38_arrays.bas</a></td></tr>
<tr><td>39</td><td>39_arrays.bas</td><td>procházení prvky pole standardní smyčkou <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/39_arrays.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/39_arrays.bas</a></td></tr>
<tr><td>40</td><td>40_arrays.bas</td><td>procházení prvky pole konstrukcí <strong>for-each</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Basic-256/40_arrays.bas">https://github.com/tisnik/8bit-fame/blob/master/Basic-256/40_arrays.bas</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránka projektu Basic-256<br />
<a href="https://basic256.org/">https://basic256.org/</a>
</li>

<li>So You Want to Learn to Program – BASIC-256 (Third Edition)<br />
<a href="http://syw2l.org/?page_id=407">http://syw2l.org/?page_id=407</a>
</li>

<li>Why Another BASIC?<br />
<a href="https://basic256.org/2019/06/27/why-another-basic/">https://basic256.org/2019/06/27/why-another-basic/</a>
</li>

<li>Stránka projektu Small Basic<br />
<a href="https://smallbasic-publicwebsite.azurewebsites.net/">https://smallbasic-publicwebsite.azurewebsites.net/</a>
</li>

<li>List of Programs Made with Small Basic<br />
<a href="https://social.technet.microsoft.com/wiki/contents/articles/14013.list-of-programs-made-with-small-basic.aspx">https://social.technet.microsoft.com/wiki/contents/articles/14013.list-of-programs-made-with-small-basic.aspx</a>
</li>

<li>Expert to Expert: The Basics of SmallBasic<br />
<a href="https://channel9.msdn.com/blogs/charles/expert-to-expert-the-basics-of-smallbasic">https://channel9.msdn.com/blogs/charles/expert-to-expert-the-basics-of-smallbasic</a>
</li>

<li>The Developer’s Reference Guide to Small Basic<br />
<a href="https://social.technet.microsoft.com/wiki/contents/articles/16767.the-developers-reference-guide-to-small-basic.aspx">https://social.technet.microsoft.com/wiki/contents/articles/16767.the-developers-reference-guide-to-small-basic.aspx</a>
</li>

<li>Small Basic - Talking to Raspberry Pi<br />
<a href="https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-talking-to-raspberry-pi/ba-p/337844">https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-talking-to-raspberry-pi/ba-p/337844</a>
</li>

<li>Small Basic - Arduino<br />
<a href="https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-arduino/ba-p/337762">https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-arduino/ba-p/337762</a>
</li>

<li>Small Basic + micro:bit<br />
<a href="https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-micro-bit/ba-p/1968424">https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-micro-bit/ba-p/1968424</a>
</li>

<li>#1 Learn Small Basic Programming - Introduction<br />
<a href="https://www.youtube.com/watch?v=e_BaEPCa8OQ">https://www.youtube.com/watch?v=e_BaEPCa8OQ</a>
</li>

<li>#2 Learn Small Basic Programming - Input, Output &amp; Variables<br />
<a href="https://www.youtube.com/watch?v=VWekYLa33OI">https://www.youtube.com/watch?v=VWekYLa33OI</a>
</li>

<li>#3 Learn Small Basic Programming - String Concatenation<br />
<a href="https://www.youtube.com/watch?v=iWvIaOaT474">https://www.youtube.com/watch?v=iWvIaOaT474</a>
</li>

<li>Small Basic - The Programmer's Guide<br />
<a href="https://www.i-programmer.info/programming/other-languages/5196-small-basic-the-programmers-guide.html">https://www.i-programmer.info/programming/other-languages/5196-small-basic-the-programmers-guide.html</a>
</li>

<li>Rosetta Code: Category:Microsoft Small Basic<br />
<a href="https://rosettacode.org/wiki/Category:Microsoft_Small_Basic">https://rosettacode.org/wiki/Category:Microsoft_Small_Basic</a>
</li>

<li>Fifty Years of BASIC, the Programming Language That Made Computers Personal<br />
<a href="https://time.com/69316/basic/">https://time.com/69316/basic/</a>
</li>

<li>BBC BASIC i QBasic oslavují svá kulatá výročí<br />
<a href="https://www.root.cz/clanky/bbc-basic-i-qbasic-oslavuji-sva-kulata-vyroci/">https://www.root.cz/clanky/bbc-basic-i-qbasic-oslavuji-sva-kulata-vyroci/</a>
</li>

<li>What are the best BASIC-like programming languages?<br />
<a href="https://www.slant.co/topics/9807/~basic-like-programming-languages">https://www.slant.co/topics/9807/~basic-like-programming-languages</a>
</li>

<li>List of BASIC dialects<br />
<a href="https://en.wikipedia.org/wiki/List_of_BASIC_dialects">https://en.wikipedia.org/wiki/List_of_BASIC_dialects</a>
</li>

<li>GW-BASIC Documentation<br />
<a href="https://hwiegman.home.xs4all.nl/gwbasic.html">https://hwiegman.home.xs4all.nl/gwbasic.html</a>
</li>

<li>Microsoft Open-Sources GW-BASIC<br />
<a href="https://devblogs.microsoft.com/commandline/microsoft-open-sources-gw-basic/">https://devblogs.microsoft.com/commandline/microsoft-open-sources-gw-basic/</a>
</li>

<li>GW-BASIC na GitHubu<br />
<a href="https://github.com/microsoft/GW-BASIC">https://github.com/microsoft/GW-BASIC</a>
</li>

<li>Welcome to GW-BASIC<br />
<a href="http://www.antonis.de/qbebooks/gwbasman/">http://www.antonis.de/qbebooks/gwbasman/</a>
</li>

<li>GWBASIC User's Manual<br />
<a href="http://www.antonis.de/qbebooks/gwbasman/index2.html">http://www.antonis.de/qbebooks/gwbasman/index2.html</a>
</li>

<li>The basics of BASIC, the programming language of the 1980s<br />
<a href="https://www.youtube.com/watch?v=seM9SqTsRG4">https://www.youtube.com/watch?v=seM9SqTsRG4</a>
</li>

<li>GW-BASIC User's Guide<br />
<a href="https://hwiegman.home.xs4all.nl/gw-man/index.html">https://hwiegman.home.xs4all.nl/gw-man/index.html</a>
</li>

<li>PC-BASIC 1.2.14 documentation<br />
<a href="http://robhagemans.github.io/pcbasic/doc/1.2/">http://robhagemans.github.io/pcbasic/doc/1.2/</a>
</li>

<li>PEEK and POKE<br />
<a href="https://en.wikipedia.org/wiki/PEEK_and_POKE">https://en.wikipedia.org/wiki/PEEK_and_POKE</a>
</li>

<li>GW-BASIC | DRAW Statement (video na Youtube)<br />
<a href="https://www.youtube.com/watch?v=4I1CELY13M4">https://www.youtube.com/watch?v=4I1CELY13M4</a>
</li>

<li>Rozdíly mezi GW-BASIC a QBasicem<br />
<a href="https://hwiegman.home.xs4all.nl/extern/Differences%20Between%20GW-BASIC%20and%20QBasic.htm">https://hwiegman.home.xs4all.nl/extern/Differences%20Between%20GW-BASIC%20and%20QBasic.htm</a>
</li>

<li>GW-Basic Programs<br />
<a href="https://gwbasicprograms.blogspot.com/p/gw-basic-programs.html">https://gwbasicprograms.blogspot.com/p/gw-basic-programs.html</a>
</li>

<li>GW-BASIC Resource<br />
<a href="https://gw-basic.netlify.app/">https://gw-basic.netlify.app/</a>
</li>

<li>A page about GWBASIC Games &amp; Other Programs<br />
<a href="http://peyre.x10.mx/GWBASIC/">http://peyre.x10.mx/GWBASIC/</a>
</li>

<li>Basic BASIC, 2nd Edition, James S. Coan<br />
<a href="https://drive.google.com/uc?export=download&amp;id=1Z12L7SO_gfNg3Ma_0eH2_Kz15YM-9dHl">https://drive.google.com/uc?export=download&amp;id=1Z12L7SO_gfNg3Ma_0eH2_Kz15YM-9dHl</a>
</li>

<li>Advanced BASIC, James S. Coan<br />
<a href="https://drive.google.com/uc?export=download&amp;id=1JafSpV_BLylWHMd16rDPorwv9wV9bLcy">https://drive.google.com/uc?export=download&amp;id=1JafSpV_BLylWHMd16rDPorwv9wV9bLcy</a>
</li>

<li>Structured BASIC, 2nd Edition, James F. Clark (naskenovaná kniha)<br />
<a href="https://drive.google.com/uc?export=download&amp;id=1pT8y-8yJYS_SqvxF0fBHm6S-dlAt-Uy2">https://drive.google.com/uc?export=download&amp;id=1pT8y-8yJYS_SqvxF0fBHm6S-dlAt-Uy2</a>
</li>

<li>Last Book of GW-Basic<br />
<a href="https://www.geocities.ws/joseph_sixpack/btoc.html">https://www.geocities.ws/joseph_sixpack/btoc.html</a>
</li>

<li>SCIENTIFIC PROGRAMS WRITTEN IN BASIC (for PCs)<br />
<a href="https://web.archive.org/web/20160323064356/http://www.scn.org/~bh162/basic_programs.html">https://web.archive.org/web/20160323064356/http://www.scn.org/~bh162/basic_programs.html</a>
</li>

<li>Why I love programming on FreeDOS with GW-BASIC<br />
<a href="https://opensource.com/article/21/6/freedos-gw-basic">https://opensource.com/article/21/6/freedos-gw-basic</a>
</li>

<li>Quite BASIC (web-based classic BASIC online programming environmen)<br />
<a href="http://www.quitebasic.com/">http://www.quitebasic.com/</a>
</li>

<li>GFA-BASIC<br />
<a href="http://sites.google.com/site/gfabasic16/">http://sites.google.com/site/gfabasic16/</a>
</li>

<li>E-mail od tvůrce GW-Basicu<br />
<a href="http://www.classiccmp.org/pipermail/cctech/2005-April/042999.html">http://www.classiccmp.org/pipermail/cctech/2005-April/042999.html</a>
</li>

<li>General Electric GE-400<br />
<a href="http://www.feb-patrimoine.com/PROJET/ge400/ge-400.htm">http://www.feb-patrimoine.com/PROJET/ge400/ge-400.htm</a>
</li>

<li>GE-400 Time-sharing information systems: <br />
<a href="http://www.computerhistory.org/collections/accession/102646147">http://www.computerhistory.org/collections/accession/102646147</a>
</li>

<li>A brief history of the development of BASIC (pravděpodobně již nefunkční odkaz)<br />
<a href="http://www.phys.uu.nl/~bergmann/history.html">http://www.phys.uu.nl/~bergmann/history.html</a>
</li>

<li>History of BASIC (PDF)<br />
<a href="http://www.q7basic.org/History%20of%20BASIC.pdf">http://www.q7basic.org/History%20of%20BASIC.pdf</a>
</li>

<li>Dartmouth College Computation Center. 1964.-The original Dartmouth BASIC manual<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf</a>
</li>

<li>The Original BASIC<br />
<a href="http://www.truebasic.com/">http://www.truebasic.com/</a>
</li>

<li>BASIC - Beginners All-purpose Symbolic Instruction Code<br />
<a href="http://hopl.murdoch.edu.au/showlanguage.prx?exp=176">http://hopl.murdoch.edu.au/showlanguage.prx?exp=176</a>
</li>

<li>Dartmouth Time Sharing System<br />
<a href="http://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System">http://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System</a>
</li>

<li>General Electric (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/General_Electric">http://en.wikipedia.org/wiki/General_Electric</a>
</li>

<li>GE 225 vs. IBM 1401<br />
<a href="http://ed-thelen.org/GE225-IBM1401.html">http://ed-thelen.org/GE225-IBM1401.html</a>
</li>

<li>A GE-225 is found<br />
<a href="http://ed-thelen.org/comp-hist/GE225.html">http://ed-thelen.org/comp-hist/GE225.html</a>
</li>

<li>G.E. 200 Series Computers<br />
<a href="http://www.smecc.org/g_e__200_series_computers.htm">http://www.smecc.org/g_e__200_series_computers.htm</a>
</li>

<li>DTSS - Dartmouth Time Sharing System<br />
<a href="http://dtss.dartmouth.edu/index.php">http://dtss.dartmouth.edu/index.php</a>
</li>

<li>John G. Kemeny: BASIC and DTSS: Everyone a Programmer<br />
<a href="http://dtss.dartmouth.edu/everyoneaprogrammer.php">http://dtss.dartmouth.edu/everyoneaprogrammer.php</a>
</li>

<li>GE-200 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-200_series">http://en.wikipedia.org/wiki/GE-200_series</a>
</li>

<li>GE-400 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-400_series">http://en.wikipedia.org/wiki/GE-400_series</a>
</li>

<li>GE-600 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-600_series">http://en.wikipedia.org/wiki/GE-600_series</a>
</li>

<li>ZX Basic Manual<br />
<a href="http://www.worldofspectrum.org/ZXBasicManual/">http://www.worldofspectrum.org/ZXBasicManual/</a>
</li>

<li>ZX81 BASIC Programming<br />
<a href="http://www.worldofspectrum.org/ZX81BasicProgramming/">http://www.worldofspectrum.org/ZX81BasicProgramming/</a>
</li>

<li>Sinclair BASIC History<br />
<a href="http://scratchpad.wikia.com/wiki/Sinclair_BASIC_History">http://scratchpad.wikia.com/wiki/Sinclair_BASIC_History</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Sinclair BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Sinclair_BASIC">http://en.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Beta_BASIC">http://en.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Beta_BASIC">http://cs.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>BETA BASIC NEWSLETTER No 8<br />
<a href="http://spectrum128.ru/help/BetaBasicNewsletter8.pdf">http://spectrum128.ru/help/BetaBasicNewsletter8.pdf</a>
</li>

<li>R. T. RUSSELL: The home of BBC BASIC<br />
<a href="http://www.rtrussell.co.uk/">http://www.rtrussell.co.uk/</a>
</li>

<li>R. T. RUSSELL: A History of BBC BASIC<br />
<a href="http://www.cix.co.uk/~rrussell/bbcbasic/history.html">http://www.cix.co.uk/~rrussell/bbcbasic/history.html</a>
</li>

<li>SuperBASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/SuperBASIC">http://en.wikipedia.org/wiki/SuperBASIC</a>
</li>

<li>SuperBASIC (Wikipedia CZ)<br />
<a href="http://en.wikipedia.org/wiki/SuperBASIC">http://en.wikipedia.org/wiki/SuperBASIC</a>
</li>

<li>Laser Basic/Laser Compiler<br />
<a href="http://www.sincuser.f9.co.uk/049/laser.htm">http://www.sincuser.f9.co.uk/049/laser.htm</a>
</li>

<li>Laser BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Laser_BASIC">http://cs.wikipedia.org/wiki/Laser_BASIC</a>
</li>

<li>BBC BASIC<br />
<a href="http://www.bbcbasic.co.uk/bbcbasic.html">http://www.bbcbasic.co.uk/bbcbasic.html</a>
</li>

<li>BBC BASIC<br />
<a href="http://mdfs.net/Software/BBCBasic/">http://mdfs.net/Software/BBCBasic/</a>
</li>

<li>BBC BASIC (Z80) for the ZX Spectrum<br />
<a href="http://mdfs.net/Software/BBCBasic/Spectrum/">http://mdfs.net/Software/BBCBasic/Spectrum/</a>
</li>

<li>BBC BASIC (Wikipedia CZ)<br />
<a href="http://en.wikipedia.org/wiki/BBC_BASIC">http://en.wikipedia.org/wiki/BBC_BASIC</a>
</li>

<li>BeebWiki &ndash; 8-bit Acorn Computer Wiky<br />
<a href="http://beebwiki.jonripley.com/Main_Page">http://beebwiki.jonripley.com/Main_Page</a>
</li>

<li>Porovnání osmibitů<br />
<a href="http://porovnani8bitu.spaces.live.com/">http://porovnani8bitu.spaces.live.com/</a>
</li>

<li>Rosetta Code &ndash; Main Page<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Rosetta Code &ndash; Category Basic<br />
<a href="http://rosettacode.org/wiki/Category:BASIC">http://rosettacode.org/wiki/Category:BASIC</a>
</li>

<li>QBasicJedi<br />
<a href="http://www.freewebs.com/qbasicjedi/">http://www.freewebs.com/qbasicjedi/</a>
</li>

<li>QBasic/QuickBasic Downloads<br />
<a href="http://www.freewebs.com/qbasicjedi/qbdownloads.html">http://www.freewebs.com/qbasicjedi/qbdownloads.html</a>
</li>

<li>QuickBASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/QuickBASIC">http://cs.wikipedia.org/wiki/QuickBASIC</a>
</li>

<li>QBasic.com<br />
<a href="http://www.qbasic.com/">http://www.qbasic.com/</a>
</li>

<li>QBasic (Wikipedia)<br />
<a href="http://cs.wikipedia.org/wiki/QBasic">http://cs.wikipedia.org/wiki/QBasic</a>
</li>

<li>Dialling with QBASIC<br />
<a href="http://www.mysundial.ca/tsp/qbasic.html">http://www.mysundial.ca/tsp/qbasic.html</a>
</li>

<li>BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/BASIC">http://en.wikipedia.org/wiki/BASIC</a>
</li>

<li>BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/BASIC">http://cs.wikipedia.org/wiki/BASIC</a>
</li>

<li>Turbo BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Turbo_BASIC">http://cs.wikipedia.org/wiki/Turbo_BASIC</a>
</li>

<li>More BASIC Computer Games<br />
<a href="http://www.atariarchives.org/morebasicgames/">http://www.atariarchives.org/morebasicgames/</a>
</li>

<li>How to build an interpreter in Java, Part 1: The BASICs<br />
<a href="http://www.javaworld.com/jw-05-1997/jw-05-indepth.html">http://www.javaworld.com/jw-05-1997/jw-05-indepth.html</a>
</li>

<li>INTEGER BASIC Reference<br />
<a href="http://www.landsnail.com/a2ref2.htm">http://www.landsnail.com/a2ref2.htm</a>
</li>

<li>APPLESOFT Reference<br />
<a href="http://www.landsnail.com/a2ref.htm">http://www.landsnail.com/a2ref.htm</a>
</li>

<li>Applesoft Lite: Applesoft BASIC for the Replica-1<br />
<a href="http://cowgod.org/replica1/applesoft/">http://cowgod.org/replica1/applesoft/</a>
</li>

<li>Simons' BASIC<br />
<a href="http://en.wikipedia.org/wiki/Simons'_BASIC">http://en.wikipedia.org/wiki/Simons'_BASIC</a>
</li>

<li>Simon's Basic<br />
<a href="http://www.lemon64.com/?mainurl=http%3A//www.lemon64.com/museum/list.php%3Flineoffset%3D54%26genre%3Dmanualmisc">http://www.lemon64.com/?mainurl=http%3A//www.lemon64.com/museum/list.php%3Flineoffset%3D54%26genre%3Dmanualmisc</a>
</li>

<li>BASIC<br />
<a href="http://www.c64-wiki.com/index.php/BASIC">http://www.c64-wiki.com/index.php/BASIC</a>
</li>

<li>C64 Wiki: Simons Basic<br />
<a href="http://www.c64-wiki.de/index.php/Simons_Basic">http://www.c64-wiki.de/index.php/Simons_Basic</a>
</li>

<li>Simons' Basic (evaluation)<br />
<a href="http://www.atarimagazines.com/creative/v9n11/60_Simons_Basic.php">http://www.atarimagazines.com/creative/v9n11/60_Simons_Basic.php</a>
</li>

<li>Bill Gates' Personal Easter Eggs in 8 Bit BASIC
<a href="http://www.pagetable.com/?p=43">http://www.pagetable.com/?p=43</a>
</li>

<li>Třicet let od vydání revolučního Turbo Pascalu 5.5<br />
<a href="https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/">https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/</a>
</li>

<li>Let's make a small and simple GW-BASIC program!<br />
<a href="https://www.youtube.com/watch?v=OyPUn74nj-s">https://www.youtube.com/watch?v=OyPUn74nj-s</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

