<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>EndBASIC: moderní reinkarnace klasického BASICu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>EndBASIC: moderní reinkarnace klasického BASICu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. EndBASIC: moderní reinkarnace klasického BASICu</a></p>
<p><a href="#k02">2. Specifické vlastnosti klasických BASICů</a></p>
<p><a href="#k03">3. Přepis algoritmu do EndBASICu</a></p>
<p><a href="#k04">4. Od špagetového kódu ke strukturovanému programování</a></p>
<p><a href="#k05">5. GOTO a výpočet největšího společného dělitele</a></p>
<p><a href="#k06">6. Strukturované příkazy pro programové smyčky</a></p>
<p><a href="#k07">7. Počítaná programová smyčka <strong>FOR-NEXT</strong></a></p>
<p><a href="#k08">8. Smyčka typu <strong>WHILE-WEND</strong> s&nbsp;podmínkou na začátku</a></p>
<p><a href="#k09">9. Výpočet konstanty &pi; varianta s&nbsp;<strong>FOR-NEXT</strong> i <strong>WHILE-WEND</strong></a></p>
<p><a href="#k10">10. Alokace polí</a></p>
<p><a href="#k11">*** 11. Řetězce</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. EndBASIC: moderní reinkarnace klasického BASICu</h2>

<p>Na <a
href="https://www.root.cz/clanky/programovani-v-jazyce-basic-je-zivotnim-stylem-jiz-sedesat-let/">úterní
článek</a>, v&nbsp;němž jsme se mj.&nbsp;věnovali i moderním reinkarnacím
klasického BASICu v&nbsp;podobě, v&nbsp;jaké si ho mnozí pamatujeme z&nbsp;dob
kralování osmibitových domácích mikropočítačů, dnes částečně navážeme. Ukážeme
si totiž některé možnosti, ale nutno dodat, že taktéž omezení <i>EndBASICu</i>,
což je interpret BASICu naprogramovaný v&nbsp;Rustu. To je dosti neobvyklá
kombinace technologií, protože původní BASICy byly psány většinou v&nbsp;čistém
assembleru. <i>EndBASIC</i> se do jisté míry snaží napodobit chování klasických
interpretrů BASICu, ovšem nabízí i některá vylepšení. Na druhou stranu však
uvidíme, že některé jazykové konstrukce nejsou v&nbsp;EndBASICu povoleny nebo
se chovají odlišně, což je škoda, protože se v&nbsp;mnoha ohledech jedná o
poměrně zajímavý (nostalgický) projekt, který však není zpětně kompatibilní asi
s&nbsp;žádným klasickým BASICem.</p>

<img src="https://i.iinfo.cz/images/488/basic-5.webp" class="image-1122546" width="531" height="164" alt="&#160;" title="Autor: tisnik, other authors, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Online varianta EndBASICu.</i></p>

<p><i>EndBASIC</i> si můžete stáhnout pro váš operační systém ze stránky <a
href="https://www.endbasic.dev/">https://www.endbasic.dev/</a> a spouštět ho
lokálně. Aby vše pracovalo korektně, tedy i grafické příkazy, je nutné mít
nainstalovánu knihovnu <i>SDL2</i>; bez ní sice bude <i>EndBASIC</i> funkční,
ale bez grafického výstupu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Specifické vlastnosti klasických BASICů</h2>

<p>Ještě před vlastním popisem <i>EndBASICu</i> si krátce připomeňme, jak
vlastně vypadaly programy psané pro interpretry BASICů běžících na osmibitových
domácích mikropočítačích. Příkladem může být program pro seřazení prvků
v&nbsp;poli pomalým a naivním algoritmem bublinkového řazení (<i>bubble
sort</i>). Realizace tohoto programu v&nbsp;Atari BASICu může vypadat například
následovně:</p>

<pre>
1 REM *****************************
2 REM Bubble sort
3 REM 
4 REM Uprava pro Atari BASIC
5 REM 
6 REM *****************************
7 REM
8 REM
9 REM
10 DIM A(20)
11 FOR I=0 TO 20
12 A(I)=INT(100*RND(0))
13 NEXT I
14 GOSUB 100:REM TISK OBSAHU POLE
20 FOR I=19 TO 0 STEP -1
21 PRINT ".";
25 FOR J=0 TO I
30 IF A(J)&lt;A(J+1) THEN X=A(J):A(J)=A(J+1):A(J+1)=X
35 NEXT J
40 NEXT I
49 PRINT ""
50 PRINT "SORTED:"
60 GOSUB 100:REM TISK OBSAHU POLE
99 STOP
100 REM TISK OBSAHU POLE
101 FOR I=0 TO 20
102 PRINT I,A(I)
103 NEXT I
104 RETURN 
998 REM finito
999 STOP
</pre>

<p>Povšimněte si několika faktů:</p>

<ul>
<li>Čísla řádků jsou povinná</li>
<li>Všechny proměnné jsou globální a automaticky definované při prvním použití</li>
<li>Jedinými datovými typy jsou reálná čísla, řetězce (zde nepoužité) a 1D či 2D pole reálných čísel</li>
<li>Pole jsou indexována od nuly</li>
<li>Indexy prvků polí končí až stanoveného limitu (tedy v&nbsp;našem případě včetně 20)</li>
<li>Podmínka <strong>IF</strong> je nestrukturovaným příkazem platným do konce řádku (a nelze rozdělit na více řádků)</li>
<li>Jedinými strukturovanými příkazy je smyčka <strong>FOR-NEXT</strong> a dvojice příkazů <strong>GOSUB</strong> a <strong>RETURN</strong></li>
<li>Počítané smyčky mění počitadlo od dolní meze až do horní meze včetně (zde tedy při tisku pole od 0 do 20 včetně)</li>
</ul>

<p>Výše uvedené chování při alokaci polí i při tvorbě počítané programové
smyčky zamezuje mnoha typických chybám &plusm;1 (naproti tomu C a od něj
odvozené jazyky se chovají odlišně a poněkud méně intuitivně).</p>

<p>Realizace téhož algoritmu, tentokrát v&nbsp;TurboBASICu XL (tedy pro stejnou
platformu), je poněkud odlišná. Opět se nejdříve podívejme na zdrojový kód,
který posléze krátce okomentujeme:</p>

<pre>
1 REM BUBBLE SORT
2 REM IMPLEMENTACE PRO TURBO-BASIC XL
3 REM 
4 REM ----------------------------
5 REM 
9 SIZE=20
10 DIM A(SIZE)
11 FOR I=0 TO SIZE
12   A(I)=RAND(100)
13 NEXT I
14 EXEC PRINT_ARRAY
20 FOR I=SIZE-1 TO 0 STEP -1
21   PRINT ".";
25   FOR J=0 TO I
30     IF A(J)&lt;A(J+1)
31       X=A(J):A(J)=A(J+1):A(J+1)=X
32     ENDIF 
35   NEXT J
40 NEXT I
49 PRINT ""
50 PRINT "SORTED:"
60 EXEC PRINT_ARRAY
99 END 
100 ------------------------------
101 REM TISK OBSAHU POLE
102 PROC PRINT_ARRAY
103   FOR I=0 TO SIZE
104     PRINT I,A(I)
105   NEXT I
106 ENDPROC 
</pre>

<p>Oproti původnímu kódu můžeme najít mnoho užitečných změn:</p>

<ul>
<li>Strukturovaný kód je odsazen</li>
<li>Je podporován strukturovaný příkaz <strong>IF-(THEN)-ENDIF</strong></li>
<li>Existuje zde podpora pro pojmenované procedury (podprogramy): <strong>PROC</strong> a <strong>ENDPROC</strong></li>
<li>Je podporován &bdquo;speciální komentář&ldquo; zobrazený jako řada ----------, ovšem interně reprezentovaný jediným tokenem</li>
</ul>

<p>Další úprava byla provedena pro Microsoft BASIC. Jedná se o program, který
je teoreticky nezávislý na HW (měl by běžet i na jiných strojích), ovšem kvůli
použití HW časovače je zdrojový kód jako celek opět nepřenosný na jiné
platformy. Důležitou změnou typickou právě pro Microsoft BASIC, je podpora
celočíselného datového typu, který je použit tehdy, pokud se za jméno proměnné
vloží znak procenta. Výsledný běh programu je díky tomu mnohonásobně rychlejší
(někdy i řádově rychlejší) oproti použití reálných čísel (na HW bez
matematického koprocesoru):</p>

<pre>
1 REM ********************************
2 REM Bubble sort pro pole typu single
3 REM 
4 REM Uprava pro Microsoft BASIC
5 REM
6 REM ********************************
7 REM
8 REM
9 REM
10 REM VYMAZANI CASOVACE
11 POKE 18,0
12 POKE 19,0
13 POKE 20,0
20 REM VLASTNI BENCHMARK
21 MAX%=50
22 DIM A(MAX%)
23 FOR I%=0 TO MAX%
24 A(I%)=INT(100*RND(0))
25 NEXT I%
26 GOSUB 100:REM TISK OBSAHU POLE
27 FOR I%=MAX%-1 TO 0 STEP -1
28 PRINT ".";
29 FOR J%=0 TO I%
30 IF A(J%)&lt;A(J%+1) THEN X=A(J%):A(J%)=A(J%+1):A(J%+1)=X
31 NEXT J%
32 NEXT I%
33 PRINT ""
34 PRINT "SORTED:"
35 GOSUB 100:REM TISK OBSAHU POLE
40 REM PRECTENI CASOVACE
41 REM (PLATNE PRO PAL)
42 T=((PEEK(18)*65536+PEEK(19)*256+PEEK(20))/50)
50 PRINT "FINISHED IN ";T;" SECONDS"
99 END 
100 REM TISK OBSAHU POLE
101 FOR I%=0 TO MAX%
102 PRINT I%,A(I%)
103 NEXT I%
104 RETURN 
</pre>

<p>V&nbsp;případě přepisu na slavné ZX Spectrum bylo nutné provést několik
úprav. Především se to týká polí, které jsou indexovány od jedničky (u
některých BASICů existuje volba indexování od 0 nebo od 1). Taktéž se funkce
<strong>RND</strong> volá bez závorek a je nutné používat příkaz
<strong>LET</strong> pro přiřazení:</p>

*** image ***
<p><i>Obrázek 2: Inicializace pole a tisk pole; realizace v&nbsp;BASICu pro ZX
Spectrum (používám emulaci 128k a nikoli původního 48k vlastně jen z&nbsp;toho
důvodu, protože můj notebook nemá na klávesnici napsané původní Sinclairovské
příkazy :-).</i></p>

*** image ***
<p><i>Obrázek 3: Hlavní část algoritmu bublinkového řazení. Prohození hodnot
jsem zde realizoval na více řádků kvůli větší čitelnosti.</i></p>

<p>Přecházíme na platformu IBM PC a slavný GW-BASIC. Úprava pro tento ve své
době oblíbený dialekt BASICu může vypadat takto:</p>

<pre>
1 REM *****************************
2 REM Bubble sort
3 REM 
4 REM Uprava pro GW-BASIC
5 REM
6 REM *****************************
7 REM
8 REM
9 REM
10 DIM A(20)
11 FOR I=0 TO 20
12   A(I)=INT(100*RND(1))
13 NEXT I
14 GOSUB 100:REM TISK OBSAHU POLE
20 FOR I=19 TO 0 STEP -1
21   PRINT ".";
25   FOR J=0 TO I
30     IF A(J)&lt;A(J+1) THEN X=A(J):A(J)=A(J+1):A(J+1)=X
35   NEXT J
40 NEXT I
49 PRINT ""
50 PRINT "SORTED:"
60 GOSUB 100:REM TISK OBSAHU POLE
99 END 
100 REM TISK OBSAHU POLE
101 FOR I=0 TO 20
102   PRINT I,A(I)
103 NEXT I
104 RETURN 
</pre>

<p>Opět si povšimněte odsazení strukturovaných příkazů (programové smyčky).
Jinak se toto řešení do značné míry podobá TurboBASICu či Microsoft BASICu.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Přepis algoritmu do EndBASICu</h2>

<p>Přímý přepis algoritmu bublinkového řazení do EndBASICu je, ač je to
s&nbsp;podivem, relativně složitý, protože se změnila především
<i>sémantika</i> některých operací (syntaxe taktéž, ovšem to lze poměrně snadno
překonat). První změnou je fakt, že pole se alokují podobně jako
v&nbsp;jazycích odvozených od céčka: specifikuje se kapacita pole a nikoli
index posledního prvku (kapacita tedy musí být o jedničku vyšší). Dále se
používají strukturované podmínky <strong>if-then-end if</strong> a u počítaných
programových smyček <strong>for</strong> se u klíčového slova
<strong>next</strong> <i>nesmí</i> použít jméno proměnné (to je podle mého
názoru škoda, byla to skvělá kontrola korektnosti zápisu). A navíc je možné
namísto čísel řádků používat pojmenovaná návěští, podobně jako v&nbsp;mnoha
dalších programovacích jazycích i v&nbsp;assemblerech:</p>

<pre>
rem *****************************
rem Algoritmus bubble sort
rem 
rem Úprava pro EndBASIC
rem 
rem *****************************
&nbsp;
dim a(21)
&nbsp;
for i=0 to 20
  a(i)=int(100*rnd(1))
next
&nbsp;
gosub @PRINT_ARRAY
&nbsp;
for i=19 to 0 step -1
  print ".";
  for j=0 to i
    if a(j)&lt;a(j+1) then
        x=a(j)
        a(j)=a(j+1)
        a(j+1)=x
    end if
  next
next
print ""
print "sorted:"
&nbsp;
gosub @PRINT_ARRAY
end
&nbsp;
@PRINT_ARRAY
rem Tisk obsahu pole
for i=0 to 20
  print i,a(i)
next
return
</pre>

<p><div class="rs-tip-major">Poznámka: takto realizovaný program by měl být
dobře čitelný i pro programátory, kteří BASIC neznají. V&nbsp;určitých ohledech
je čitelnější než Python :-), například se to týká realizace počítaných
programových smyček.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Od špagetového kódu ke strukturovanému programování</h2>

<p>V&nbsp;klasických interpretrech BASICu se striktně používala čísla řádků
(jen tak se daly odlišit přímé příkazy od zápisu programu), nestrukturované
jazykové konstrukce založené na příkazu <strong>GOTO</strong> a globální
proměnné. Mnohdy ani nebylo možné definovat vlastní procedury nebo funkce.
<i>EndBASIC</i> představuje poměrně masivní odklon od tohoto stylu
programování. Nicméně si ukažme, jak vypadá použití příkazů
<strong>GOTO</strong> a <strong>GOSUB</strong>, protože ty jsou esencemi
klasického BASICu (<a
href="https://www.dartmouth.edu/basicfifty/commands.html">první BASIC vůbec měl
jen 15 příkazů</a> a mezi nimi <strong>GOTO</strong> a <strong>GOSUB</strong>
pochopitelně figurovalo). <i>EndBASIC</i> čísla řádků podporuje (ale
nevyžaduje) a podporuje i původní sémantiku příkazu <strong>GOTO</strong>:</p>

<p>Použití čísel řádků a příkazu <strong>GOTO</strong> pro skok na konkrétní
řádek:</p>

<pre>
rem *****************************
rem
rem Klasický příkaz GOTO s čísly
rem řádků
rem
rem Úprava pro EndBASIC
rem 
rem *****************************
&nbsp;
&nbsp;
&nbsp;
10 print "hello"
20 goto 10
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/labels1.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/labels1.bas</a></div></p>

<p>Namísto čísel řádků je možné použít pojmenované návěští, což jsme si již
ostatně ukázali na příkladu algoritmu bublinkového řazení. Specialitou
EndBASICu je, že návěští musí začínat znakem @:</p>

<pre>
rem *****************************
rem
rem Příkaz GOTO a textové návěští
rem
rem Úprava pro EndBASIC
rem 
rem *****************************
&nbsp;
&nbsp;
&nbsp;
@opak
print "hello"
goto @opak
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/labels2.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/labels2.bas</a></div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. GOTO a výpočet největšího společného dělitele</h2>

<p>Podobně lze realizovat výpočet největšího společného dělitele bez čísel
řádků. Povšimněte si strukturované konstrukce <strong>if-then</strong>, kterou
se EndBASIC odlišuje od starších variant klasických BASICů:</p>

<pre>
rem *****************************
rem
rem Výpočet největšího společného
rem dělitele.
rem 
rem Úprava pro EndBASIC
rem (využití GOTO)
rem 
rem *****************************
&nbsp;
&nbsp;
&nbsp;
print "x=";
input x
print "y=";
input y
rem "Vypocet"
&nbsp;
@loop
if x=y then
    print "gcd:"; x
end if
if x&gt;y then
    x=x-y
    goto @loop
end if
if x&lt;y then
    y=y-x
    goto @loop
end if
&nbsp;
end
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/gcd_goto.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/gcd_goto.bas</a></div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Strukturované příkazy pro programové smyčky</h2>

<p><i>EndBASIC</i> podporuje dva formáty strukturovaných programových smyček.
Prvním typem smyčky je smyčka <strong>FOR-NEXT</strong>, která je použita
v&nbsp;prakticky všech BASICech &ndash; ovšem její chování není všude stejné! A
druhým typem smyčky je smyčka <strong>WHILE-WEND</strong>. Posléze byla do
<i>QBasicu</i> přidána i univerzální smyčka <strong>DO-LOOP</strong>, u níž lze
zvolit test na začátku a/nebo i na konci, tu však v&nbsp;<i>EndBASICu</i>
nenajdeme, takže si musíme vystačit je s&nbsp;<strong>FOR-NEXT</strong> a
<strong>WHILE-WEND</strong>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Počítaná programová smyčka <strong>FOR-NEXT</strong></h2>

<p>Nejtypičtější příklad použití počítané smyčky <strong>FOR-NEXT</strong>.
Povšimněte si, jak se pracuje s&nbsp;počáteční a koncovou hodnotou
počitadla:</p>

<pre>
rem *****************************
rem
rem Smyčka typu FOR-NEXT
rem v základní formě.
rem 
rem Úprava pro EndBASIC
rem
rem *****************************
&nbsp;
&nbsp;
&nbsp;
for i=0 to 10
  print i
next
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_basic.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_basic.bas</a></div></p>

<p>Výsledky ukazují, že počitadlo dosáhlo obou mezních hodnot:</p>

<pre>
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
</pre>

<p>Specifikovat je v&nbsp;případě potřeby možné i krok určující změnu počitadla
smyčky po každé iteraci:</p>

<pre>
rem *****************************
rem
rem Smyčka typu FOR-NEXT
rem se specifikací kroku.
rem 
rem Úprava pro EndBASIC
rem
rem *****************************
&nbsp;
&nbsp;
&nbsp;
for i=0 to 10 step 2
  print i
next
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_step.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_step.bas</a></div></p>

<p>Výsledky:</p>

<pre>
 0
 2
 4
 6
 8
 10
</pre>

<p>Některé BASICy v&nbsp;dalším programu do smyčky vstoupí a vypíšou hodnotu
10, což je nekorektní chování (příkladem je například již zmiňovaný Atari
BASIC). <i>EndBASIC</i>, ostatně podobně jako <i>GW-BASIC</i>, v&nbsp;tomto
případě korektně nevypíše nic:</p>

<pre>
rem *****************************
rem
rem Smyčka typu FOR-NEXT
rem ve formě, kdy je horní limit
rem menší než limit horní.
rem 
rem Úprava pro EndBASIC
rem
rem *****************************
&nbsp;
&nbsp;
&nbsp;
for i=10 to 0
  print i
next
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_swapped_limits.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_swapped_limits.bas</a></div></p>

<p>EndBASIC ovšem do smyčky nevstoupí a tudíž ani nevypíše počáteční hodnotu
počitadla.</p>

<p>Otestujme si ještě, kdy a jak se kontroluje mezní hodnota počitadla. Některé
BASICy jsou v&nbsp;tomto ohledu velmi flexibilní a umožňují změnu mezí
v&nbsp;každé iteraci. <i>EndBASIC</i> ovšem tuto flexibilitu postrádá (a těžko
rozhodnout, zda je to dobře nebo špatně):</p>

<pre>
rem *****************************
rem
rem Smyčka typu FOR-NEXT
rem s průběžnou změnou horního
rem limitu.
rem 
rem Úprava pro EndBASIC
rem
rem *****************************
&nbsp;
&nbsp;
&nbsp;
max=10
for i=0 to max
  print i,max
  max=max+1
next
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_max_variable.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_max_variable.bas</a></div></p>

<p>Tato konstrukce není v&nbsp;EndBASICu korektní:</p>

<pre>
endbasic: 13:1: Cannot redefine max as a variable
</pre>

<p>Totéž platí pro pokus o změnu kroku:</p>

<pre>
rem *****************************
rem
rem Smyčka typu FOR-NEXT
rem s průběžnou změnou kroku
rem změny počitadla smyčky.
rem 
rem Úprava pro EndBASIC
rem
rem *****************************
&nbsp;
&nbsp;
&nbsp;
s=1
for i=0 to 20 step s
  print i,s
  s=s+1
next i
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_step_variable.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_step_variable.bas</a></div></p>

<p>Opět se nejedná o platný zápis:</p>

<pre>
endbasic: 14:20: STEP needs a literal number
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Smyčka typu <strong>WHILE-WEND</strong> s&nbsp;podmínkou na začátku</h2>

<p>V&nbsp;mnoha klasických BASICech byl podporován pouze jeden typ programové
smyčky, a to konkrétně počítané smyčky typu <strong>FOR-NEXT</strong>; ostatní
typy smyček bylo nutné simulovat kombinací příkazů <strong>IF</strong> a
<strong>GOTO</strong>. Později byla přidána podpora pro další strukturované
příkazy, což mj.&nbsp;znamenalo přidání syntaxe pro programovou smyčku
<strong>WHILE</strong>, jejíž ukončující příkaz se jmenoval
<strong>WEND</strong>. I tento typ smyčky je v&nbsp;EndBASICu podporován, takže
si můžeme upravit program pro výpočet největšího společného dělitele takovým
způsobem, aby tuto smyčku využíval:</p>

<pre>
rem *****************************
rem
rem Výpočet největšího společného
rem dělitele.
rem 
rem Úprava pro EndBASIC
rem (využití smyčky WHILE-WEND)
rem 
rem *****************************
&nbsp;
&nbsp;
&nbsp;
print "x=";
input x
print "y=";
input y
&nbsp;
while x&lt;&gt;y
  if x&gt;y then x=x-y
  if x&lt;y then y=y-x
wend
&nbsp;
print "gcd: ";x
&nbsp;
end
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/gcd_while.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/gcd_while.bas</a></div></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, jakým způsobem se
zapisuje nerovnost. Tento styl zápisu mimochodem podporovaly i první verze
programovacího jazyka Python.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výpočet konstanty &pi; varianta s&nbsp;<strong>FOR-NEXT</strong> i <strong>WHILE-WEND</strong></h2>

<p>Následuje nepatrně složitější příklad s&nbsp;dvojicí nepřímo vnořených
smyček pro výpočet konstanty &pi;. Nejprve si uveďme variantu s&nbsp;počítanou
programovou smyčkou <strong>FOR-NEXT</strong>:</p>

<pre>
rem *****************************
rem
rem Výpočet konstanty Pi.
rem 
rem Uprava pro EndBASIC
rem 
rem *****************************
&nbsp;
&nbsp;
&nbsp;
n=1
for i=1 to 10
  gosub @calc_pi
  print i,n,pi_approx
  n=n*2
next
end
&nbsp;
@calc_pi
rem 
rem Subrutina pro výpočet Pi
rem 
pi_approx=4.0
for j=3 to n+2 step 2
    pi_approx=pi_approx*(j-1)/j*(j+1)/j
next
return
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/PI.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/PI.bas</a></div></p>

<p>Postupně se zlepšující výsledek:</p>

<pre>
 1             1             3.5555555555555554
 2             2             3.5555555555555554
 3             4             3.4133333333333327
 4             8             3.3023935500125976
 5             16            3.230036466411717
 6             32            3.188127169447139
 7             64            3.165482060034797
 8             128           3.1536988490958007
 9             256           3.147686899556424
 10            512           3.1446501625172125
</pre>

<p>Podobným způsobem ovšem můžeme použít strukturovanou programovou smyčku
<strong>WHILE-END</strong>. Tentokrát ovšem nebudeme muset používat pomocné
počitadlo <strong>i</strong>; smyčka bude řízena přímo hodnotou uloženou
v&nbsp;proměnné <strong>n</strong>:</p>

<pre>
REM *****************************
REM
REM Výpočet hodnoty konstanty PI
REM postavený na smyčce
REM typu WHILE-WEND.
REM 
rem Úprava pro EndBASIC
REM
REM *****************************
&nbsp;
&nbsp;
&nbsp;
n=1
while n&lt;=2000
   gosub @calc_pi
   print n,pi_approx
   n=n*2
wend 
end
&nbsp;
rem
rem Subrutina pro vypocet pi
rem 
@calc_pi
pi_approx=4.0
j=3
while j&lt;=n+2
  pi_approx=pi_approx*(j-1)/j*(j+1)/j
  j=j+2
wend 
return
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/while_wend_pi.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/while_wend_pi.bas</a></div></p>

<p>Výsledky by měly odpovídat předchozímu řešení:</p>

<pre>
 1             3.5555555555555554
 2             3.5555555555555554
 4             3.4133333333333327
 8             3.3023935500125976
 16            3.230036466411717
 32            3.188127169447139
 64            3.165482060034797
 128           3.1536988490958007
 256           3.147686899556424
 512           3.1446501625172125
 1024          3.143124017028201
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Alokace polí</h2>

<p>V&nbsp;EndBASICu se pole alokují příkazem <strong>DIM</strong>, podobně jako
v&nbsp;klasických BASICech. Ovšem je nutné si dát pozor na to, že se zadává
velikost pole v&nbsp;každém rozměru a nikoli index posledního prvku v&nbsp;dané
dimenzi. To znamená, že je zde sémantický rozdíl v&nbsp;příkazu:</p>

<pre>
DIM A(10)
</pre>

<p>Tento zápis má tři možné sémantiky lišící se podle použitého BASICu:</p>

<ol>
<li>pole, jehož prvky mají indexy 0, 1, ... 10 (jedenáct prvků)</li>
<li>pole, jehož prvky mají indexy 1, 2, ... 10 (deset prvků)</li>
<li>pole, jehož prvky mají indexy 0, 1, ... 9 (deset prvků) &ndash; případ EndBASICu</li>
</ol>

<p>V&nbsp;EndBASICu je taktéž možné používat vícerozměrná pole; nejsme zde tedy
omezeni na jednu až dvě dimenze tak, jako v&nbsp;mnoha klasických BASICech:</p>

<pre>
dim a(10)
dim b(10, 10)
dim c(10, 10, 20)
dim d(10, 20, 30, 40)
rem atd.
</pre>

<p>Příklad práce s&nbsp;jedenáctiprvkovým jednorozměrným polem:</p>

<pre>
rem *****************************
rem 
rem Práce s jednorozměrnými poli
rem 
rem Úprava pro EndBASIC
rem 
rem *****************************
&nbsp;
&nbsp;
&nbsp;
rem Definice pole
dim a(11)
&nbsp;
rem Naplnění pole
for i=0 to 10
  a(i)=10*i
next
&nbsp;
rem Tisk pole
for i=0 to 10
  print a(i)
next
&nbsp;
end
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/1d_array.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/1d_array.bas</a></div></p>

<p>Výsledky:</p>

<pre>
 0
 10
 20
 30
 40
 50
 60
 70
 80
 90
 100
</pre>

<p>Dtto, ale s&nbsp;dvourozměrným polem:</p>

<pre>
rem *****************************
rem
rem Práce s dvourozměrnymi poli
rem 
rem Úprava pro EndBASIC
rem 
rem *****************************
&nbsp;
&nbsp;
&nbsp;
rem Deklarace pole
dim m(6,6)
&nbsp;
rem Naplnění pole
for i=0 to 5
  for j=0 to 5
    m(i,j)=i*j
  next
next
&nbsp;
rem Tisk pole
for i=0 to 5
  for j=0 to 5
    print m(i,j),
    next
  print 
next
&nbsp;
end
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/2d_array.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/2d_array.bas</a></div></p>

<p>Opět si ukažme výsledky:</p>

<pre>
 0             0             0             0             0             0            
 0             1             2             3             4             5            
 0             2             4             6             8             10           
 0             3             6             9             12            15           
 0             4             8             12            16            20           
 0             5             10            15            20            25
</pre>

<p>Navíc je možné použít funkce <strong>lbound%</strong> a
<strong>ubound%</strong> pro zjištění nejmenšího a největšího indexu
v&nbsp;dané dimenzi (nebo v&nbsp;jediné dimenzi jednorozměrného pole):</p>

<pre>
dim A(10)
&nbsp;
rem vypíše 0
print lbound%(A)
&nbsp;
rem vypíše 9
print ubound%(A)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Řetězce</h2>

<p>Po cca čtyřiceti letech, které uplynuly od doby kralování klasických BASICů,
se poněkud pozměnily řetězce. Namísto ASCII znaků (či spíše podmnožiny ASCII
znaků) nyní mohou řetězce obsahovat Unicode znaky a interně používají kódování
UTF-8. Jinak ovšem v&nbsp;EndBASICu nalezneme běžnou sadu funkcí pro zpracování
řetězců. Programátorům jsou k&nbsp;dispozici tři &bdquo;klasické&ldquo; funkce
určené pro převody mezi znaky, řetězci a číselnými hodnotami &ndash;
<strong>ASC%</strong> (převod znaku na jeho Unicode hodnotu &ndash; sic),
<strong>CHR$</strong> (opak <strong>ASC%</strong>) a <strong>STR$</strong>
(opak <strong>VAL</strong>, převod čísla na řetězec).</p>

<p>Navíc jsou i v&nbsp;EndBASICu dostupné funkce <strong>LEFT$</strong>,
<strong>RIGHT$</strong> a <strong>MID$</strong> přidané do BASICu původně
Microsoftem, které v&nbsp;Microsoftích interpretrech přežily pravděpodobně až
do současnosti.</p>

<pre>
rem *****************************
rem
rem Práce s řetězci, manipulace
rem s obsahem řetězců.
rem 
rem Úprava pro EndBASIC
rem
rem *****************************
&nbsp;
&nbsp;
&nbsp;
A$="HELLO WORLD!"
print A$
print left$(A$, 5)
print right$(A$, 6)
print mid$(A$, 7, 5)
end
</pre>

<p><div class="rs-tip-major">Zdroj: <a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/strings.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/strings.bas</a></div></p>

<pre>
HELLO WORLD!
HELLO
WORLD!
ORLD!
</pre>




<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady určené pro spuštění
v&nbsp;EndBASICu byly uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>labels1.bas</td><td>použití čísel řádků a příkaz <strong>GOTO</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/labels1.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/labels1.bas</a></td></tr>
<tr><td> 2</td><td>labels2.bas</td><td>příkaz <strong>GOTO</strong> a skok na pojmenované návěští</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/labels2.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/labels2.bas</a></td></tr>
<tr><td> 3</td><td>gcd_goto.bas</td><td>výpočet největšího společného dělitele, založeno na příkazech <strong>GOTO</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/gcd_goto.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/gcd_goto.bas</a></td></tr>
<tr><td> 4</td><td>gcd_while.bas</td><td>výpočet největšího společného dělitele, založeno na smyčce <strong>WHILE-WEND</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/gcd_while.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/gcd_while.bas</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>for_next_basic.bas</td><td>základní forma počítané smyčky <strong>FOR</strong>-<strong>NEXT</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_basic.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_basic.bas</a></td></tr>
<tr><td> 6</td><td>for_next_step.bas</td><td>specifikace kroku v&nbsp;počítané programové smyčce, modifikátor <strong>STEP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_step.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_step.bas</a></td></tr>
<tr><td> 7</td><td>for_next_swapped_limits.bas</td><td>prohození mezí smyčky (nemělo by se do ní vstoupit)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_swapped_limits.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_swapped_limits.bas</a></td></tr>
<tr><td> 8</td><td>for_next_max_variable.bas</td><td>pokus o modifikaci horního limitu počítané programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_max_variable.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_max_variable.bas</a></td></tr>
<tr><td> 9</td><td>for_next_step_variable.bas</td><td>pokus o modifikaci kroku počítané programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_step_variable.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/for_next_step_variable.bas</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>PI.bas</td><td>výpočet konstanty &pi;, založeno na smyčce <strong>FOR-NEXT</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/PI.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/PI.bas</a></td></tr>
<tr><td>11</td><td>while_wend_pi.bas</td><td>výpočet konstanty &pi;, založeno na smyčce <strong>WHILE-WEND</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/while_wend_pi.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/while_wend_pi.bas</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>1d_array.bas</td><td>jednorozměrná pole v&nbsp;EndBASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/1d_array.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/1d_array.bas</a></td></tr>
<tr><td>13</td><td>2d_array.bas</td><td>dvourozměrná pole v&nbsp;EndBASICu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/2d_array.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/2d_array.bas</a></td></tr>

<tr><td> 3</td><td>bubble_sort.bas            </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/bubble_sort.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/bubble_sort.bas</a></td></tr>
<tr><td> 4</td><td>data1.bas                  </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/data1.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/data1.bas</a></td></tr>
<tr><td> 5</td><td>data2.bas                  </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/data2.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/data2.bas</a></td></tr>
<tr><td>13</td><td>gfx_test.bas               </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/gfx_test.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/gfx_test.bas</a></td></tr>
<tr><td>16</td><td>moire_no_mod.bas           </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/moire_no_mod.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/moire_no_mod.bas</a></td></tr>
<tr><td>17</td><td>moire_with_mod.bas         </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/moire_with_mod.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/moire_with_mod.bas</a></td></tr>
<tr><td>19</td><td>select_case_1.bas          </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/select_case_1.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/select_case_1.bas</a></td></tr>
<tr><td>20</td><td>select_case_2.bas          </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/select_case_2.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/select_case_2.bas</a></td></tr>
<tr><td>21</td><td>select_case_3.bas          </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/select_case_3.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/select_case_3.bas</a></td></tr>
<tr><td>22</td><td>strings.bas                </td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/strings.bas">https://github.com/tisnik/8bit-fame/blob/master/EndBASIC/strings.bas</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>BASIC oslavil 60 let (zprávička)<br />
<a href="https://www.root.cz/zpravicky/basic-oslavil-60-let/">https://www.root.cz/zpravicky/basic-oslavil-60-let/</a>
</li>

<li>Online IDE s&nbsp;interpretrem BASICu<br />
<a href="https://8bitworkshop.com/v3.11.0/">https://8bitworkshop.com/v3.11.0/</a>
</li>

<li>gotBASIC.com<br />
<a href="https://gotbasic.com/atari.html">https://gotbasic.com/atari.html</a>
</li>

<li>Informace o GW-Basicu<br />
<a href="https://gw-basic.com/">https://gw-basic.com/</a>
</li>

<li>Stránka s&nbsp;živým EndBASICem<br />
<a href="https://repl.endbasic.dev/">https://repl.endbasic.dev/</a>
</li>

<li>EndBASIC: BASIC interpreter + DOS environment, reimagined<br />
<a href="https://www.endbasic.dev/">https://www.endbasic.dev/</a>
</li>

<li>GWBASIC User's Manual<br />
<a href="http://www.antonis.de/qbebooks/gwbasman/index2.html">http://www.antonis.de/qbebooks/gwbasman/index2.html</a>
</li>

<li>GFA-BASIC<br />
<a href="http://sites.google.com/site/gfabasic16/">http://sites.google.com/site/gfabasic16/</a>
</li>

<li>E-mail od tvůrce GW-Basicu<br />
<a href="http://www.classiccmp.org/pipermail/cctech/2005-April/042999.html">http://www.classiccmp.org/pipermail/cctech/2005-April/042999.html</a>
</li>

<li>General Electric GE-400<br />
<a href="http://www.feb-patrimoine.com/PROJET/ge400/ge-400.htm">http://www.feb-patrimoine.com/PROJET/ge400/ge-400.htm</a>
</li>

<li>GE-400 Time-sharing information systems: <br />
<a href="http://www.computerhistory.org/collections/accession/102646147">http://www.computerhistory.org/collections/accession/102646147</a>
</li>

<li>A brief history of the development of BASIC (pravděpodobně již nefunkční odkaz)<br />
<a href="http://www.phys.uu.nl/~bergmann/history.html">http://www.phys.uu.nl/~bergmann/history.html</a>
</li>

<li>History of BASIC (PDF)<br />
<a href="http://www.q7basic.org/History%20of%20BASIC.pdf">http://www.q7basic.org/History%20of%20BASIC.pdf</a>
</li>

<li>Dartmouth College Computation Center. 1964.-The original Dartmouth BASIC manual<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf</a>
</li>

<li>The Original BASIC<br />
<a href="http://www.truebasic.com/">http://www.truebasic.com/</a>
</li>

<li>BASIC - Beginners All-purpose Symbolic Instruction Code<br />
<a href="http://hopl.murdoch.edu.au/showlanguage.prx?exp=176">http://hopl.murdoch.edu.au/showlanguage.prx?exp=176</a>
</li>

<li>The History of the Mainframe Computer<br />
<a href="http://www.vikingwaters.com/htmlpages/MFHistory.htm">http://www.vikingwaters.com/htmlpages/MFHistory.htm</a>
</li>

<li>Dartmouth Time Sharing System<br />
<a href="http://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System">http://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System</a>
</li>

<li>General Electric (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/General_Electric">http://en.wikipedia.org/wiki/General_Electric</a>
</li>

<li>GE 225 vs. IBM 1401<br />
<a href="http://ed-thelen.org/GE225-IBM1401.html">http://ed-thelen.org/GE225-IBM1401.html</a>
</li>

<li>A GE-225 is found<br />
<a href="http://ed-thelen.org/comp-hist/GE225.html">http://ed-thelen.org/comp-hist/GE225.html</a>
</li>

<li>G.E. 200 Series Computers<br />
<a href="http://www.smecc.org/g_e__200_series_computers.htm">http://www.smecc.org/g_e__200_series_computers.htm</a>
</li>

<li>DTSS - Dartmouth Time Sharing System<br />
<a href="http://dtss.dartmouth.edu/index.php">http://dtss.dartmouth.edu/index.php</a>
</li>

<li>John G. Kemeny: BASIC and DTSS: Everyone a Programmer<br />
<a href="http://dtss.dartmouth.edu/everyoneaprogrammer.php">http://dtss.dartmouth.edu/everyoneaprogrammer.php</a>
</li>

<li>GE-200 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-200_series">http://en.wikipedia.org/wiki/GE-200_series</a>
</li>

<li>GE-400 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-400_series">http://en.wikipedia.org/wiki/GE-400_series</a>
</li>

<li>GE-600 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-600_series">http://en.wikipedia.org/wiki/GE-600_series</a>
</li>

<li>ZX Basic Manual<br />
<a href="http://www.worldofspectrum.org/ZXBasicManual/">http://www.worldofspectrum.org/ZXBasicManual/</a>
</li>

<li>ZX81 BASIC Programming<br />
<a href="http://www.worldofspectrum.org/ZX81BasicProgramming/">http://www.worldofspectrum.org/ZX81BasicProgramming/</a>
</li>

<li>Sinclair BASIC History<br />
<a href="http://scratchpad.wikia.com/wiki/Sinclair_BASIC_History">http://scratchpad.wikia.com/wiki/Sinclair_BASIC_History</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Sinclair BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Sinclair_BASIC">http://en.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Beta_BASIC">http://en.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Beta_BASIC">http://cs.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>BETA BASIC NEWSLETTER No 8<br />
<a href="http://spectrum128.ru/help/BetaBasicNewsletter8.pdf">http://spectrum128.ru/help/BetaBasicNewsletter8.pdf</a>
</li>

<li>R. T. RUSSELL: The home of BBC BASIC<br />
<a href="http://www.rtrussell.co.uk/">http://www.rtrussell.co.uk/</a>
</li>

<li>R. T. RUSSELL: A History of BBC BASIC<br />
<a href="http://www.cix.co.uk/~rrussell/bbcbasic/history.html">http://www.cix.co.uk/~rrussell/bbcbasic/history.html</a>
</li>

<li>SuperBASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/SuperBASIC">http://en.wikipedia.org/wiki/SuperBASIC</a>
</li>

<li>SuperBASIC (Wikipedia CZ)<br />
<a href="http://en.wikipedia.org/wiki/SuperBASIC">http://en.wikipedia.org/wiki/SuperBASIC</a>
</li>

<li>Laser Basic/Laser Compiler<br />
<a href="http://www.sincuser.f9.co.uk/049/laser.htm">http://www.sincuser.f9.co.uk/049/laser.htm</a>
</li>

<li>Laser BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Laser_BASIC">http://cs.wikipedia.org/wiki/Laser_BASIC</a>
</li>

<li>BBC BASIC<br />
<a href="http://www.bbcbasic.co.uk/bbcbasic.html">http://www.bbcbasic.co.uk/bbcbasic.html</a>
</li>

<li>BBC BASIC<br />
<a href="http://mdfs.net/Software/BBCBasic/">http://mdfs.net/Software/BBCBasic/</a>
</li>

<li>BBC BASIC (Z80) for the ZX Spectrum<br />
<a href="http://mdfs.net/Software/BBCBasic/Spectrum/">http://mdfs.net/Software/BBCBasic/Spectrum/</a>
</li>

<li>BBC BASIC (Wikipedia CZ)<br />
<a href="http://en.wikipedia.org/wiki/BBC_BASIC">http://en.wikipedia.org/wiki/BBC_BASIC</a>
</li>

<li>BeebWiki &ndash; 8-bit Acorn Computer Wiky<br />
<a href="http://beebwiki.jonripley.com/Main_Page">http://beebwiki.jonripley.com/Main_Page</a>
</li>

<li>Porovnání osmibitů<br />
<a href="http://porovnani8bitu.spaces.live.com/">http://porovnani8bitu.spaces.live.com/</a>
</li>

<li>Rosetta Code &ndash; Main Page<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Rosetta Code &ndash; Category Basic<br />
<a href="http://rosettacode.org/wiki/Category:BASIC">http://rosettacode.org/wiki/Category:BASIC</a>
</li>

<li>QBasicJedi<br />
<a href="http://www.freewebs.com/qbasicjedi/">http://www.freewebs.com/qbasicjedi/</a>
</li>

<li>QBasic/QuickBasic Downloads<br />
<a href="http://www.freewebs.com/qbasicjedi/qbdownloads.html">http://www.freewebs.com/qbasicjedi/qbdownloads.html</a>
</li>

<li>QuickBASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/QuickBASIC">http://cs.wikipedia.org/wiki/QuickBASIC</a>
</li>

<li>QBasic.com<br />
<a href="http://www.qbasic.com/">http://www.qbasic.com/</a>
</li>

<li>QBasic (Wikipedia)<br />
<a href="http://cs.wikipedia.org/wiki/QBasic">http://cs.wikipedia.org/wiki/QBasic</a>
</li>

<li>Dialling with QBASIC<br />
<a href="http://www.mysundial.ca/tsp/qbasic.html">http://www.mysundial.ca/tsp/qbasic.html</a>
</li>

<li>BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/BASIC">http://en.wikipedia.org/wiki/BASIC</a>
</li>

<li>BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/BASIC">http://cs.wikipedia.org/wiki/BASIC</a>
</li>

<li>Turbo BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Turbo_BASIC">http://cs.wikipedia.org/wiki/Turbo_BASIC</a>
</li>

<li>More BASIC Computer Games<br />
<a href="http://www.atariarchives.org/morebasicgames/">http://www.atariarchives.org/morebasicgames/</a>
</li>

<li>How to build an interpreter in Java, Part 1: The BASICs<br />
<a href="http://www.javaworld.com/jw-05-1997/jw-05-indepth.html">http://www.javaworld.com/jw-05-1997/jw-05-indepth.html</a>
</li>

<li>Apple I<br />
<a href="http://applemuseum.bott.org/sections/computers/a1.html">http://applemuseum.bott.org/sections/computers/a1.html</a>
</li>

<li>The Apple 1 history<br />
<a href="http://apple2history.org/history/ah02.html">http://apple2history.org/history/ah02.html</a>
</li>

<li>The Apple 2 history<br />
<a href="http://apple2history.org/history/ah03.html">http://apple2history.org/history/ah03.html</a>
</li>

<li>INTEGER BASIC Reference<br />
<a href="http://www.landsnail.com/a2ref2.htm">http://www.landsnail.com/a2ref2.htm</a>
</li>

<li>APPLESOFT Reference<br />
<a href="http://www.landsnail.com/a2ref.htm">http://www.landsnail.com/a2ref.htm</a>
</li>

<li>Apple II Programming<br />
<a href="http://home.swbell.net/rubywand/csa2pfaq.html">http://home.swbell.net/rubywand/csa2pfaq.html</a>
</li>

<li>Applesoft Lite: Applesoft BASIC for the Replica-1<br />
<a href="http://cowgod.org/replica1/applesoft/">http://cowgod.org/replica1/applesoft/</a>
</li>

<li>Simons' BASIC<br />
<a href="http://en.wikipedia.org/wiki/Simons'_BASIC">http://en.wikipedia.org/wiki/Simons'_BASIC</a>
</li>

<li>Simon's Basic<br />
<a href="http://www.lemon64.com/?mainurl=http%3A//www.lemon64.com/museum/list.php%3Flineoffset%3D54%26genre%3Dmanualmisc">http://www.lemon64.com/?mainurl=http%3A//www.lemon64.com/museum/list.php%3Flineoffset%3D54%26genre%3Dmanualmisc</a>
</li>

<li>BASIC<br />
<a href="http://www.c64-wiki.com/index.php/BASIC">http://www.c64-wiki.com/index.php/BASIC</a>
</li>

<li>C64 Wiki: Simons Basic<br />
<a href="http://www.c64-wiki.de/index.php/Simons_Basic">http://www.c64-wiki.de/index.php/Simons_Basic</a>
</li>

<li>Simons' Basic (evaluation)<br />
<a href="http://www.atarimagazines.com/creative/v9n11/60_Simons_Basic.php">http://www.atarimagazines.com/creative/v9n11/60_Simons_Basic.php</a>
</li>

<li>Bill Gates' Personal Easter Eggs in 8 Bit BASIC
<a href="http://www.pagetable.com/?p=43">http://www.pagetable.com/?p=43</a>
</li>

<li>Kladivo na programy (je tam třeba popsán způsob nahrávání a ochran programů protí kopírování a crackování)<br />
<a href="http://www.grandjihlava.cz/tmp/kladivo.pdf">http://www.grandjihlava.cz/tmp/kladivo.pdf</a>
</li>

<li>Didaktik Gama návod k obsluze<br />
<a href="http://www.grandjihlava.cz/tmp/navod.pdf">http://www.grandjihlava.cz/tmp/navod.pdf</a>
</li>

<li>Můj přítel Didaktik Gama<br />
<a href="http://www.grandjihlava.cz/tmp/priteldidaktik.pdf">http://www.grandjihlava.cz/tmp/priteldidaktik.pdf</a>
</li>

<li>Tip &amp; trip pro Didaktik<br />
<a href="http://www.grandjihlava.cz/tmp/tiptrikdidaktik.pdf">http://www.grandjihlava.cz/tmp/tiptrikdidaktik.pdf</a>
</li>

<li>Muzeum československých mikropočítačů<br />
<a href="http://cs-pocitace.ic.cz/">http://cs-pocitace.ic.cz/</a>
</li>

<li>Popis modulů a aplikací pro IQ-151<br />
<a href="http://cs.felk.cvut.cz/~bily/iq151/">http://cs.felk.cvut.cz/~bily/iq151/</a>
</li>

<li>IQ 151<br />
<a href="http://osmi.tarbik.com/cssr/iq151.html">http://osmi.tarbik.com/cssr/iq151.html</a>
</li>

<li>&bdquo;Domácí počítače&ldquo; nedávné minulosti<br />
<a href="http://www.fi.muni.cz/usr/jkucera/pv109/xkrejcir.htm">http://www.fi.muni.cz/usr/jkucera/pv109/xkrejcir.htm</a>
</li>

<li>ZPA: IQ-151<br />
<a href="http://www.homecomputer.de/pages/easteurope_cz.html#iq151">http://www.homecomputer.de/pages/easteurope_cz.html#iq151</a>
</li>

<li>Zrození IQ-151<br />
<a href="http://www.iq151.net/index.htm">http://www.iq151.net/index.htm</a>
</li>

<li>Stručná historie počítače IQ150/IQ151<br />
<a href="http://www.iq151.net/history.htm">http://www.iq151.net/history.htm</a>
</li>

<li>Old Computers &ndash; IQ 151<br />
<a href="http://www.old-computers.com/MUSEUM/computer.asp?st=1&c=1045">http://www.old-computers.com/MUSEUM/computer.asp?st=1&c=1045</a>
</li>

<li>Wikipedia EN: IQ 151<br />
<a href="http://en.wikipedia.org/wiki/IQ_151">http://en.wikipedia.org/wiki/IQ_151</a>
</li>

<li>Wikipedia CZ: IQ 151<br />
<a href="http://cs.wikipedia.org/wiki/IQ_151">http://cs.wikipedia.org/wiki/IQ_151</a>
</li>

<li>JtyOne Online ZX81 Emulator<br />
<a href="http://www.zx81stuff.org.uk/zx81/jtyone.html">http://www.zx81stuff.org.uk/zx81/jtyone.html</a>
</li>

<li>OpenSE BASIC<br />
<a href="https://zxdesign.itch.io/opense">https://zxdesign.itch.io/opense</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

