<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyky a vývojové nástroje pro mikropočítače společnosti Sinclair Research</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyky a vývojové nástroje pro mikropočítače společnosti Sinclair Research</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnešní článek, jenž tematicky navazuje na trojici článků o programovacích jazycích a vývojových nástrojích pro osmibitové počítače Atari, je věnován programovacím jazykům pro počítače firmy Sinclair Research, tedy zejména ZX80, ZX81 a pochopitelně i pro slavné ZX Spectrum.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyky a vývojové nástroje pro mikropočítače společnosti Sinclair Research</a></p>
<p><a href="#k02">2. První mikropočítače společnosti Sinclair Research</a></p>
<p><a href="#k03">3. ZX80</a></p>
<p><a href="#k04">4. ZX81</a></p>
<p><a href="#k05">5. Slavné ZX Spectrum a ZX Spectrum+</a></p>
<p><a href="#k06">6. Základní parametry ZX Spectra</a></p>
<p><a href="#k07">7. ZX Spectrum 128</a></p>
<p><a href="#k08">8. Grafický režim ZX Spectra</a></p>
<p><a href="#k09">9. Vliv ZX80 a jeho následovníků na další vývoj IT</a></p>
<p><a href="#k10">10. Vývoj programovacího jazyka Sinclair BASIC</a></p>
<p><a href="#k11">11. Specifické vlastnosti Sinclair BASICu</a></p>
<p><a href="#k12">12. Seznam příkazů Sinclair BASICu a odlišnosti mezi jeho jednotlivými verzemi</a></p>
<p><a href="#k13">13. Laser BASIC</a></p>
<p><a href="#k14">14. Grafické příkazy, předávání parametrů grafickým příkazům</a></p>
<p><a href="#k15">15. Laser Compiler</a></p>
<p><a href="#k16">16. Editor spritů</a></p>
<p><a href="#k17">17. Dema</a></p>
<p><a href="#k18">18. Obsah navazujícího článku</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyky a vývojové nástroje pro mikropočítače společnosti Sinclair Research</h2>

<p>V&nbsp;dnešním článku se postupně zaměříme na tři témata. Nejprve si alespoň
ve stručnosti popíšeme hardwarové a softwarové konfigurace osmibitových
domácích mikropočítačů navržených a prodávaných společností <i>Sinclair
Research</i> (vynecháme tedy modely prodávané až firmou <i>Amstrad</i>,
například <i>ZX Spectrum +2</i> atd.). Druhým tématem bude programovací jazyk,
se kterým se setkal prakticky každý uživatel ZX Spectra a který musel umět
alespoň minimálně používat, například pro nahrání her příkazem
<strong>LOAD</strong> (až ZX Spectrum 128 nabídlo načítání aplikací přímo
z&nbsp;hlavního menu). Jedná se o Sinclair BASIC, který se postupně vyvíjel
tak, aby jeho možnosti odpovídaly příslušnému typu mikropočítače. A konečně
třetím tématem dnešního článku jsou další interpretry a překladače
programovacího jazyka BASIC určené pro počítače ZX Spectrum 48k i pro jeho
pokračovatele (v&nbsp;této části tedy již budeme ignorovat slavné, i když
poněkud minimalisticky navržené mikropočítače ZX80 a ZX81).</p>

<img src="https://i.iinfo.cz/images/565/speccya-1.jpg" class="image-449667" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="553" height="800" />
<p><i>Obrázek 1: Dobová reklama na počítač ZX80.<br />
Zdroj: https://nosher.net/archives/computers/adve_026</i></p>

<p>Po hardwarové stránce jsou osmibitové domácí mikropočítače ZX80, ZX81 i ZX
Spectrum zcela odlišné od mikropočítačů Atari, s&nbsp;jejichž vývojářským
software jsme se setkali v&nbsp;článcích [<a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">1</a>]
[<a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/">2</a>]
a [<a
href="https://www.root.cz/clanky/cross-assemblery-a-cross-prekladace-pro-platformu-osmibitovych-domacich-mikropocitacu-atari/">3</a>].
Ovšem z&nbsp;hlediska vývojářských nástrojů jsou si naopak tyto dvě platformy
podobné, což ovšem není překvapující, protože vznikly a byly používány ve
stejném časovém období, určeny byly pro podobný trh a měly podobná hardwarová
omezení (kapacita RAM, kapacita ROM, dostupné externí paměti). Primárním
jazykem tedy byl dialekt programovacího jazyka BASIC, a to na obou platformách
v&nbsp;relativně primitivní podobě. K&nbsp;dispozici byly i monitory a více či
méně sofistikované assemblery, a to jak s&nbsp;podporou maker, tak i bez této
podpory. Kromě toho i na Spectru nalezneme větší množství překladačů vyšších
programovacích jazyků, a to včetně Pascalu, céčka (nabízených například firmou
HiSoft). S&nbsp;některými vývojovými nástroji, které spadají do této kategorie,
se seznámíme v&nbsp;navazujícím článku.</p>

<img src="https://i.iinfo.cz/images/565/speccya-2.jpg" class="image-449668" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="396" height="513" />
<p><i>Obrázek 2: Dobová reklama na mikropočítač ZX81, pokračovatele ZX80. Jeho
cena (bez periferních zařízení) byla menší než 100 liber, takže se spolu se
ZX80 jednalo o nejlevnější skutečně programovatelný počítač na trhu. I přes
některé nedostatky se tento mikropočítač stal velmi oblíbený a připravil cestu
pro svého slavného nástupce &ndash; ZX Spectrum.</i></p>

<p><div class="rs-tip-major">Poznámka na úvod: všechny screenshoty jsou
zvětšeny na dvojnásobné rozlišení, tj.&nbsp;namísto bitmap o rozlišení
256&times;192 pixelů jsou použity rastrové obrázky s&nbsp;rozlišením
512&times;384 pixelů, což (alespoň co se týká velikosti) bude více odpovídat
tomu, co mohli vidět uživatelé reálného ZX80, ZX81 či ZX Spectra.</div></p>

<img src="https://i.iinfo.cz/images/645/speccyb-1.png" class="image-449678" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 3: Některé hry (především ty modernější) dokázaly i přes omezení
grafického režimu ZX Spectra vykreslit vícebarevné objekty, i když při jejich
překryvu docházelo k&nbsp;nežádoucím změnám barev.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. První mikropočítače společnosti Sinclair Research</h2>

<p>Společnost Sinclair Research v&nbsp;průběhu své existence navrhla a vyráběla
různé typy mikropočítačů. Prvním zařízením, které už lze skutečně označit
slovem &bdquo;počítač&ldquo; resp.&nbsp;přesněji &bdquo;mikropočítač&ldquo;,
byl <i>MK14</i> neboli celým názvem <i>Microcomputer Kit 14</i>. Jednalo se o
stroj postavený nad čipem National Semiconductor SC/MP, který obsahoval 256
bajtů RAM (rozšiřitelná na 640 bajtů) a 512 bajtů ROM. Tento mikropočítač bylo
nutné po dodání sestavit (dodáván byl skutečně jako kit, jak již ostatně jeho
název naznačuje), takže spadal do oblasti zákazníků znalých konstrukce
elektronických zařízení. S&nbsp;dalšími mikropočítači společnosti Sinclair však
nemá prakticky nic společného (snad jen snahu dodat co nejlepší výkon za co
nejmenší náklady).</p>

<img src="https://i.iinfo.cz/images/645/speccyb-2.png" class="image-449679" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 4: Úvodní obrazovka ZX Spectra 48k s&nbsp;názvem společnosti.</i></p>

<p><div class="rs-tip-major">Poznámka: jméno firmy <i>Sinclair Research</i>
budu v&nbsp;tomto článku používat i v&nbsp;situaci, kdy měla stejná společnost
jiný název. Zcela původní jméno pocházející z&nbsp;roku 1961 totiž znělo <i>
Sinclair Radionics</i>. V&nbsp;roce 1975 došlo k&nbsp;přejmenování na
<i>Ablesdeal</i> a ještě v&nbsp;témže roce došlo k&nbsp;přejmenování na
<i>Sinclair Instrument</i>. V&nbsp;roce 1977 došlo k&nbsp;další změně jména na
<i>Science of Cambridge</i>, v&nbsp;roce 1979 na <i>Sinclair Computers</i> a
konečně v&nbsp;roce 1981 na <i>Sinclair Research</i>, což je ostatně i jméno,
které se objevuje v&nbsp;úvodní zprávě zobrazené po spuštění ZX
Spectra.</div></p>

<img src="https://i.iinfo.cz/images/645/speccyb-3.png" class="image-449680" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 5: Úvodní obrazovka ZX Spectra 128 s&nbsp;názvem
společnosti.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. ZX80</h2>

<p>Prvním skutečným domácím počítačem vyráběným firmou <i>Sinclair Research</i>
byl osmibitový počítač <i>ZX80</i>, jenž byl na trh uveden v&nbsp;lednu 1980
&ndash; odtud je ostatně odvozen i jeho název. Cena počítače v&nbsp;základní
výbavě s&nbsp;1 kB RAM byla rovna 79,95 librám (jednalo se o cenu stavebnice,
protože již sestavený počítač překročil svou cenou 99 liber). Po hardwarové
stránce se jednalo o velmi jednoduchý systém s&nbsp;pouhými osmnácti čipy,
včetně slavného mikroprocesoru Zilog Z80 a pamětí DRAM i ROM. V&nbsp;základní
konfiguraci byl <i>ZX80</i> vybaven pouhým jedním kilobajtem operační paměti,
kterou bylo možné rozšířit až na 16 kB, pamětí ROM o kapacitě 4 kB, jenž
obsahovala interpret poměrně jednoduchého jazyka Basic (viz další kapitoly) a
již zmíněným mikroprocesorem Zilog Z80A s&nbsp;hodinovou frekvencí 3,25 MHz (od
této frekvence je odvozeno generování video signálu). Program bylo možné
zaznamenat na kazetu či pásku přes externí magnetofon, podobně jako u dalších
osmibitových počítačů (disketové jednotky byly na začátku osmdesátých let
minulého století poměrně drahé, nepočítáme-li ovšem slavnou disketovou jednotku
pro <i>Apple-II</i> zkonstruovanou <span class="rs-person">Stevem
Wozniakem</span>).</p>

<img src="https://i.iinfo.cz/images/565/speccya-3.jpg" class="image-449669" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="400" height="182" />
<p><i>Obrázek 6: Nová folie na klávesnici počítače ZX80.</i></p>

<p>Osmibitové domácí mikropočítače <i>Sinclair ZX80</i> a <a
href="#k04">v&nbsp;následující kapitole popsaný</a> <i>Sinclair ZX81</i>
pracovaly pouze v&nbsp;textovém režimu, v&nbsp;němž bylo na jedné textové řádce
uloženo maximálně 32 znaků a celkový počet textových řádků byl roven 24 (slovo
&bdquo;maximálně&ldquo; jsem použil záměrně, protože se délka jednotlivých
řádků mohla lišit, jak si ostatně řekneme v&nbsp;navazujících odstavcích).
Vzhledem k&nbsp;tomu, že prvních osm znaků ze speciální znakové sady tohoto
počítače obsahovalo čtverce a obdélníky se stranou rovnou jedné polovině šířky
znaku a k&nbsp;dispozici byly i inverzní varianty znaků (viz další screenshot),
bylo možné z&nbsp;těchto šestnácti znaků poměrně jednoduše sestavit bitmapu
o rozlišení 64&times;48 &bdquo;čtverečků&ldquo; (ve skutečnosti byl každý
&bdquo;čtvereček&ldquo; představován maticí o velikosti 4&times;4 pixely).
Potřebná kapacita paměti pro takto vytvořenou &bdquo;bitmapu&ldquo; dosahovala
až 768 bajtů, což představuje celé tři čtvrtiny kapacity operační paměti
původního mikropočítače <i>ZX80</i>, které bylo, jak jsme si již řekli
v&nbsp;předchozím odstavci, ve své základní verzi vybaveno pouhým jedním
kilobajtem operační paměti.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-4.png" class="image-449681" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 7: Znaková sada používaná u počítače Sinclair ZX80.
Z&nbsp;prvních osmi znaků a jejich inverzních variant lze vytvářet jednoduché
černobílé obrazce s&nbsp;rozlišením 64&times;48 pixelů.</i></p>

<p>Programátoři však záhy přišli na způsob, jakým je možné programově ovládat
vykreslování a teoreticky tak dosáhnout maximálního hardwarově podporovaného
rozlišení na tomto počítači &ndash; plných 256&times;192 pixelů (ovšem
zobrazovala se pouze černá a šedá barva, podpora pro barevný výstup byla až
doménou slavného <i>ZX Spectra</i>). V&nbsp;následujícím textu si proto ve
stručnosti popíšeme jak způsob &bdquo;standardního&ldquo; vytváření obrazu na
tomto počítači, tak i různé triky, které je možné se <i>ZX80</i> provádět.
Způsob vykreslování je u počítače <i>ZX80</i> velmi poměrně nápaditý, neboť se
návrhářům tohoto systému podařilo snížit počet nutných integrovaných obvodů na
naprosté minimum a navíc je jak pro uložení zobrazovaných dat, tak i vlastního
programu (psaného většinou v&nbsp;Sinclair BASICu, resp.&nbsp;přesněji řečeno
v&nbsp;jeho první verzi) využito pouze nepatrné množství paměti &ndash; a to
pouhý jeden kilobajt. Myšlenka uložení obrazových dat je poměrně jednoduchá:
vzhledem k&nbsp;tomu, že výpis zdrojového kódu BASICového programu většinou
nezabere celý textový řádek (32 znaků), jsou jednotlivé řádky uloženy
v&nbsp;paměti za sebou jako řetězce o různé délce (samotný BASICový program je
dokonce ještě mnohem kratší, neboť v paměti jsou uloženy pouze tokeny
jednotlivých příkazů, ve své podstatě jde o předchůdce dnešních bajtkódů).</p>

<img src="https://i.iinfo.cz/images/645/speccyb-5.png" class="image-449682" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 8: Všechny objekty v této hře jsou vykresleny pomocí
semigrafických znaků nabízených mikropočítačem ZX80. Například kola děl jsou
vytvořena z&nbsp;inverzních nul, střely jsou představovány čtverečkem
o rozměrech 4&times;4 pixely (viz první znaky ve znakové sadě) apod.</i></p>

<p>Kódy znaků uložených v&nbsp;řetězcích různé délky (každý řetězec byl od
dalšího řádku oddělen znakem NEWLINE) byly ve vykreslovací rutině postupně
načítány mikroprocesorem a na základě právě aktuálního vykreslovaného
obrazového mikrořádku (znaky byly vysoké přesně osm mikrořádků, termínem
mikrořádek je zde myšlena jedna obrazová linka na televizní obrazovce &ndash;
což není přesné, neboť se vykreslují půlsnímky) byl z&nbsp;paměti ROM načten
bajt představující osm pixelů daného znaku. Výpočet adresy s&nbsp;uloženým
bitovým vzorkem byl jednoduchý &ndash; kód znaku se vynásobil 64 (což lze
provést bitovým posunem) a k&nbsp;této hodnotě se přičetlo číslo vykreslovaného
mikrořádku modulo 8. Samotné načtení bitů sice inicioval mikroprocesor
(vystavil na adresovou sběrnici adresu vypočtenou výše uvedeným způsobem),
ovšem skutečný obsah získaný z&nbsp;paměti ROM byl přenesen do pomocných
obvodů, které tyto bity zpracovaly. Konkrétně celou osmici bitů převedly na
video signál, tj.&nbsp;černou či bílou (šedou barvu). Tímto způsobem se načetly
a vykreslily všechny osmice bitů ležících na jednom mikrořádku. Vzhledem
k&nbsp;tomu, že na jednom textovém řádku je uloženo 32 znaků, je jeden
mikrořádek tvořen 32&times;8=256 bity (pixely).</p>

<img src="https://i.iinfo.cz/images/645/speccyb-6.png" class="image-449683" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 9: Další hra využívající originální znakovou sadu
počítače ZX80.</i></p>

<p>Vzhledem ke konstrukci <i>ZX80</i> sice nebylo možné, aby adresa, ze které
se bity představující mikrořádek znaku načítají, ukazovala do paměti RAM (nelze
si tedy vytvořit uživatelsky definovanou sadu znaků), ale s&nbsp;využitím
šikovné manipulace s&nbsp;registrem <strong>I</strong>, který ukazoval na
tabulku znaků, mohl být každý mikrořádek znaku přečten z&nbsp;jiné oblasti ROM,
čehož některé hry využívaly pro zvýšení rozlišení při vykreslování bitmap až na
teoretickou hodnotu 256&times;192 pixelů. Ovšem ne všechny bitové kombinace lze
tímto způsobem zobrazit, protože znaková sada obsahuje pouze 64 znaků a jejich
inverzních protějšků &ndash; na každém mikrořádku lze tedy zvolit pouze jednu
ze 128 kombinací, i když pro osm bitů (pixelů) existuje kombinací 256.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-7.png" class="image-449684" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 10: Většina screenshotů těchto her byla získána pomocí emulátorů
ZX81 – viz odkazy uvedené <a href="#k20">v&nbsp;poslední kapitole</a>.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. ZX81</h2>

<p>Následovníkem výše popsaného domácího počítače <i>ZX80</i> byl mikropočítač
<i>ZX81</i>, který byl na trh uveden počátkem roku 1981 (jméno tedy opět
&bdquo;sedí&ldquo;). Tento mikropočítač byl obchodně velmi úspěšný, protože jen
za prvních deset měsíců se prodalo čtvrt milionu kusů; celkově bylo vyrobeno a
prodáno dokonce přes jeden milion těchto systémů (a to na samotném začátku
osmdesátých let minulého století, kdy větší část veřejnosti měla jen značně
mlhavé představy o tom, co že počítač vlastně je a k&nbsp;čemu by mohl být
dobrý). Ve své podstatě se jedná o vylepšení <i>ZX80</i>, protože základní
funkcionalita zůstala zachována. Osmnáct samostatných integrovaných obvodů se
sloučilo do jediného čipu <i>ULA</i> (<i>Uncomitted Logic Array</i>), kapacita
paměti ROM se zdvojnásobila na 8 kB (zejména došlo k&nbsp;přidání rutin pro
výpočty v systému pohyblivé řádové čárky &ndash; viz další kapitoly) a i
kapacita operační paměti dosahovala namísto původního jednoho kilobajtu 16 kB
až 64 kB (ovšem adresovatelných bylo maximálně 56 kB, neboť zbylá část
adresového prostoru byla vyhrazena pro paměť ROM, která nešla
&bdquo;odklopit&ldquo; tak, jak je to možné například na Atari). Taktéž byla
vylepšena klávesnice i samotný obal, ve kterém je mikropočítač umístěn. Princip
zobrazování sice zůstal stejný, jako v případě <i>ZX80</i>, ale uživatelé se
dočkali jednoho poměrně zásadního vylepšení.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-8.png" class="image-449685" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 11: Domácí osmibitový mikropočítač ZX81.</i></p>

<p>Tímto vylepšením bylo zavedení takzvaného režimu <strong>SLOW</strong>.
Původní režim zobrazování (<strong>FAST</strong>) popsaný <a
href="#k03">v&nbsp;předchozí kapitole</a> měl jednu nevýhodu &ndash; vzhledem
k&nbsp;tomu, že zobrazování řídil samotný mikroprocesor, byla v&nbsp;době běhu
programu obrazovka černá, protože celý jeho výpočetní výkon byl spotřebován pro
interpretaci a spouštění jednotlivých příkazů. Taktéž stisk klávesy znamenal
přerušení vykreslovací rutiny, které se projevilo viditelným poblikáváním.
Zavedením režimu <strong>SLOW</strong> se cca 75% strojového času spotřebovalo
na vykreslování obrazu a pouze zbylých 25% bylo možné využít pro běh
programu &ndash; volné strojové cykly se nacházely pouze v&nbsp;čase
vykreslování horního a spodního černého okraje. Mezi režimy
<strong>FAST</strong> a <strong>SLOW</strong> se bylo možné přepínat, mnoho
uživatelů dokonce používalo téměř výhradně režim <strong>FAST</strong>, a to
i v&nbsp;době psaní programu (právě tehdy docházelo k&nbsp;nepříjemnému
poblikávání).</p>

<a href="https://i.iinfo.cz/images/597/pc6708.png"><img src="https://i.iinfo.cz/images/597/pc6708-prev.png" alt="pc6708" width="271" height="270"></a>
<p><i>Obrázek 12: Osazený plošný spoj mikropočítače ZX81. Počet čipů je zde
skutečně minimální.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Slavné ZX Spectrum a ZX Spectrum+</h2>

<p>Pravděpodobně nejslavnějším počítačem navrženým a vyráběným společností
<i>Sinclair Research</i> je <i>ZX Spectrum</i> a jeho následovníci,
tj.&nbsp;modely <i>ZX Spectrum+</i> a <i>ZX Spectrum 128</i> i jejich rozličné
varianty. Původní <i>ZX Spectrum</i> (&bdquo;gumák&ldquo;) bylo nabízeno ve
dvou variantách. Levnější varianta, která byla prodávána za 125 liber,
obsahovala 16 kB operační paměti, zatímco varianta dražší (nabízená za
175 liber) měla celých 48 kB RAM. Levnější model bylo možné za cca 60 liber
upgradovat, tj. rozšířit paměť o 32 kB RAM. Dalším modelem bylo <i>ZX
Spectrum+</i>, které bylo vybaveno klávesnicí s&nbsp;kurzorovými tlačítky
i Resetem. Udává se, že po uvedení ZX Spectra na trh se každý týden prodalo až
15 tisíc kusů tohoto počítače. Velká popularita mezi uživateli se samozřejmě
odrazila i v&nbsp;počtu aplikací &ndash; v&nbsp;době největší slávy ZX Spectra
bylo vytvořeno více než 10000 her a dalších programů, ovšem aplikace pro něj
vznikají i nyní. Především se jedná o nové hry (například existuje
i <i>Doom</i> pro Spectrum) a dema.</p>

<img src="https://i.iinfo.cz/images/565/speccya-4.jpg" class="image-449670" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="350" height="255" />
<p><i>Obrázek 13: Slavný &bdquo;gumák&ldquo; ZX Spectrum.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Základní parametry ZX Spectra</h2>

<p>Všechny typy počítačů <i>ZX Spectrum</i> se v&nbsp;několika ohledech lišily
od původních <i>ZX80</i> a <i>ZX81</i>, i když základ, tj.&nbsp;mikroprocesor
Zilog Z80, byl použitý ve všech počítačích firmy <i>Sinclair</i> (zde se jeho
frekvence zvýšila na 3,5 MHz). Především došlo k&nbsp;rozšíření paměti ROM na
16 kB, takže bylo možné použít vylepšenou verzi Sinclair Basicu, která
obsahovala nové příkazy i funkce. Taktéž byl vylepšený způsob záznamu dat na
magnetofon. Ale největší novinkou, která velkou měrou přispěla
k&nbsp;popularitě <i>ZX Spectra</i>, byla upravená verze čipu <i>ULA</i>, jenž
se mimo dalších operací starala i o generování obrazu, které již bylo ve větší
míře nezávislé na mikroprocesoru, než tomu bylo u počítačů <i>ZX80</i> a
<i>ZX81</i>. ZX Spectra taktéž začaly používat klasický framebuffer
s&nbsp;jeho &ndash; pro tento počítač tak typickým &ndash; rozdělením na dvě
poloviny: <i>bitmapu</i> o rozlišení 256&times;192 pixelů a <i>atributovou
paměť</i> s&nbsp;32&times;24 bloky, v&nbsp;nichž bylo možné, nezávisle na
ostatních blocích, měnit barvu popředí a pozadí.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-10.png" class="image-449687" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 14: Obchodní část hry Elite přepsaná do Sinclair BASICu.</i></p>

<p>Paměťový prostor ZX Spectra, tj.&nbsp;64 přímo adresovatelných kilobajtů,
byl rozdělen na tři části. Na začátku se nacházela oblast paměti ROM
o velikosti 16 kB s&nbsp;interpreterem jazyka Sinclair Basic, rutinami pro
výpočty s&nbsp;hodnotami reprezentované v&nbsp;pohyblivé řádové čárce apod. Za
pamětí ROM bylo 16 kB RAM, do které měl přístup jak mikroprocesor, tak i čip
ULA (který zde měl uložený framebuffer) a poslední oblast o kapacitě 32 kB byla
dostupná pouze mikroprocesoru. V&nbsp;dalším textu se budeme zabývat pouze
šestnáctikilobajtovou oblastí paměti RAM, do které měl přístup jak
mikroprocesor, tak i čip ULA. Z&nbsp;hlediska programátora byla tato paměť
&bdquo;pomalejší&ldquo; než zbylých 32 kB, což mj.&nbsp;znamenalo, že se do
této oblasti neumisťovaly časově náročné rutiny, například podprogramy pro
přehrávání zvuků či práci s&nbsp;magnetofonem. Čip ULA si totiž postupně
načítal hodnoty jednotlivých pixelů i příslušné barvové atributy těchto pixelů
při generování video signálu.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-11.png" class="image-449688" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 15: Obchodní část hry Elite přepsaná do Sinclair BASICu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. ZX Spectrum 128</h2>

<p>Následovníkem klasického ZX Spectra 48k a ZX Spectra+ byl model pojmenovaný
ZX Spectrum 128. Zatímco vzhledově se tento počítač příliš nelišil od svých
předchůdců, zejména ZX Spectra+, celková architektura počítače byla
v&nbsp;několika směrech vylepšena. Především byl zvukový systém počítače
(tj.&nbsp;jednobitový &bdquo;beeper&ldquo; napojený na reproduktor) rozšířen o
hudební čip <i>AY-3–8910</i>, přesněji řečeno o jeho variantu <i>AY-8912</i>,
která kromě zvukového výstupu obsahovala i jeden osmibitový port použitý pro
připojení MIDI zařízení a externí klávesnice. Dále byla zvýšena kapacita paměti
ROM ze 16 kB na 32 kB, což například umožnilo použití vylepšeného interpretru
Basicu i jeho editoru, včetně menu zobrazeného po startu počítače. Kapacita
paměti RAM je zakódována v&nbsp;samotném názvu počítače &ndash; má tedy
velikost celých 128 kB.</p>

<img src="https://i.iinfo.cz/images/565/speccya-5.jpg" class="image-449671" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="344" height="158" />
<p><i>Obrázek 16: ZX Spectrum +128K.</i></p>

<p>Částečné vylepšení doznal také grafický subsystém. Největší změnou (spíše
rozšířením) bylo to, že se framebuffer mohl nacházet na dvou místech
v&nbsp;operační paměti. To znamenalo, že se dal velmi snadno implementovat
například takzvaný <i>double buffering</i>, tj.&nbsp;technika, při které se do
jednoho (neviditelného) bufferu provádělo vykreslování, zatímco obsah druhého
bufferu byl zobrazován (vykreslování tedy nevedlo například k&nbsp;nežádoucímu
&bdquo;sněžení&ldquo;). Po vykreslení scény se funkce obou bufferů prohodily.
Dva buffery bylo možné použít i pro implementaci triku GigaScreen, při kterém
se na obrazovce rychle mění dva speciálně upravené obrázky.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-12.png" class="image-449689" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 17: Další ukázka z&nbsp;BASICové zjednodušené hry Elite.</i></p>

<p>Dalšího vylepšení grafického subsystému se však programátoři ani uživatelé
nedočkali (pravděpodobně kvůli snaze o co největší zpětnou kompatibilitu)
&ndash; podpora pro skutečný textový režim, sprity či plynulý scrolling
obrazovky neexistovala, tyto efekty musely být naprogramovány, na rozdíl od
některých jiných osmibitových počítačů, které pro tyto činnosti obsahovaly
specializované čipy.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-13.png" class="image-449690" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 18: U protihráčů ve hře Starquake se objevuje známé
&bdquo;překrývání&ldquo; barev u postaviček, které jsou blízko sebe. Viz dva
protihráči zobrazení vpravo uprostřed.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Grafický režim ZX Spectra</h2>

<p>Zobrazovaná bitmapa měla rozlišení 256&times;192 pixelů, tj. její velikost
lze snadno vypočítat: 256&times;192/8=6144 bajtů. Každý pixel byl v&nbsp;této
bitmapě reprezentován jediným bitem, kterým se volilo, zda se jedná o pixel
patřící k&nbsp;popředí či k&nbsp;pozadí. Barvy popředí a pozadí nemohly být
nastaveny pro každý pixel zvlášť, ale pouze pro celý blok 8&times;8 pixelů. Pro
tento blok se v&nbsp;jednom bajtu zvaném <i>atribut</i> ukládaly jak informace
o popředí a pozadí (k&nbsp;dispozici bylo osm základních barev, tj.&nbsp;jejich
indexy bylo možné uložit ve třech bitech), tak i intenzita barev (vyšší/nižší)
a příznak, zda má celý blok blikat, tj.&nbsp;měnit barvu popředí a pozadí.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-14.png" class="image-449691" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 19: Na obrázku hry Barbarian je patrné, jakým způsobem je
obrazová paměť organizovaná, především omezení daná atributy o velikosti
8&times;8 pixelů.</i></p>

<p>Atributů bylo celkem 32&times;24=768, takže celková kapacita paměti pro
uložení celého obrázku byla rovna 6144+768=6912 bajtům, což zhruba odpovídá
typické kapacitě framebufferů u domácích osmibitových počítačů (větší
framebuffery byly nepraktické, protože zabíraly velkou část drahé operační
paměti a taktéž by tehdejší mikroprocesory musely provádět přesuny objemnějších
bloků dat při změně obrazu). Frekvence mikroprocesoru Zilog Z80,
tj.&nbsp;3,5 MHz nebyla zvolena náhodně. Přesně totiž odpovídá počtu taktů
nutných pro generování video signálu pro televize pracující
v&nbsp;normě PAL.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-15.png" class="image-449692" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 20: Při pečlivé práci je možné omezení představovaná atributy do
značné míry obejít, jak dokazuje tato bitmapa pro ZX Spectrum.</i></p><div
class="promo-in-article clear">

<p><div class="rs-tip-major">Poznámka: způsob uspořádání grafické paměti do
značné míry ovlivnil vzhled i chování her naprogramovaných pro ZX Spectrum.
Můžeme zde vidět značnou odlišnost v&nbsp;porovnání s&nbsp;hrami pro Atari či
Commodore C64 způsobenou nutnosti softwarově řízeného scrollování, absencí
spritů či pseudografických režimů 12 a 13 známých a používaných u
Atari.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vliv ZX80 a jeho následovníků na vývoj IT</h2>

<p>Osmibitové domácí mikropočítače firmy <i>Sinclair Research</i> způsobily po
svém uvedení na trh poměrně významnou revoluci v&nbsp;chápání výpočetní
techniky. Byly to totiž &ndash; alespoň v&nbsp;Evropě a posléze (díky klonům) i
v&nbsp;Jižní Americe a SSSR &ndash; počítače, které si mohl díky své nízké ceně
pořídit téměř každý a právě na základě popularity těchto systémů přestali lidé
vnímat počítače jako drahé, velké a nepraktické skříně umístěné ve výpočetních
centrech. Navíc se po hardwarové stránce jednalo o relativně jednoduché, i
když, především co se týče poskytované funkcionality, poměrně sofistikované
systémy, takže je bylo velmi snadné &bdquo;klonovat&ldquo; (vyrábět kopie), což
sice nebylo ve všech případech legální, ale zcela jistě to zapříčinilo velkou
popularitu těchto mikropočítačů i programátorskou podporu prakticky po celém
vyspělém světě, a to včetně tehdejšího východního bloku.</p>

<img src="https://i.iinfo.cz/images/565/speccya-6.jpg" class="image-449672" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="720" height="335" />
<p><i>Obrázek 21: Klávesnice počítače Didaktik M.</i></p>

<p>V&nbsp;bývalé ČSSR se vyráběly minimálně tři klony <i>ZX Spectra</i>:
<i>Didaktik Gama</i> (s&nbsp;větší kapacitou paměti a originální ULA) a
<i>Didaktik M</i> (paměť stejná jako původní Spectrum, ovšem se Sovětským ULA)
a <i>Didaktik Kompakt</i>, které byly dokonce oproti originálu vylepšené,
například vyšší kapacitou operační paměti, snáze použitelnou klávesnicí či
zabudováním disketové jednotky. Dále u nás vzniklo několik dalších variant ZX
Spectra, které ovšem nebyly masově vyráběny: <i>Mistrum</i> a <i>Krišpín</i>
(čip ULA nahrazen diskrétními integrovanými obvody ze série MH7400).</p>

<img src="https://i.iinfo.cz/images/565/speccya-7.jpg" class="image-449673" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="400" height="300" />
<p><i>Obrázek 22: Část plošného spoje počítače Didaktik M.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vývoj programovacího jazyka Sinclair BASIC</h2>

<p>Na začátku osmdesátých let minulého století byl v&nbsp;oblasti domácích
osmibitových mikropočítačů prakticky vždy nabízen interpret nějakého dialektu
programovacího jazyka BASIC; typicky se nacházel přímo v&nbsp;ROM. Počítač
<i>ZX80</i>, s&nbsp;nímž jsme se již seznámili v&nbsp;úvodní části dnešního
článku, byl i přes své velmi skrovné technologické parametry vybaven takřka
plnohodnotným interpretrem <i>BASICu</i> (ovšem omezeným na práci s&nbsp;celými
čísly), který byl naprogramován <i>Johnem Grantem</i> ze společnosti firmy
<i>Nine Tiles</i>. <i>Clive Sinclair</i> nepoužil (na rozdíl od firmy
<i>Apple</i>) pro svůj počítač <i>ZX80</i> interpret MS BASICu licencovaný
firmou Microsoft, a to hned ze dvou důvodů. Prvním důvodem bylo to, že MS BASIC
vyžadoval své uložení do paměti ROM o minimální kapacitě 8 kB, což se zdálo při
požadavku na co nejnižší cenu celého počítače poměrně mnoho (a víme již, že
ZX80 nakonec obsahoval pouze 4kB ROM). Druhý důvod vycházel z&nbsp;toho, že
<i>Clive Sinclair</i> nechtěl platil licenční poplatky za každý prodaný
počítač, protože by to zvyšovalo jeho cenu a/nebo profit firmy. Z&nbsp;tohoto
důvodu zadal vytvoření interpretru jazyka BASIC již zmíněné firmě <i>Nine
Tiles</i>, kde se zadaného úkolu zhostil <i>John Grant</i>.</p>

<p><div class="rs-tip-major">Poznámka: z&nbsp;rozšířenějších domácích
osmibitových počítačů obsahoval MS BASIC zejména Commodore C64. Naproti tomu si
i společnost Atari nechala vytvořit vlastní interpret s&nbsp;multimediálními
příkazy.</div></p>

<img src="https://i.iinfo.cz/images/645/speccyb-16.png" class="image-449693" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 23: Jedna z&nbsp;možností, jak do jisté míry obejít problém
s&nbsp;barvovými atributy spočívá ve vytvoření velkých postaviček, takže se
překryvné plochy zvětší (ideálně na velikost 8&times;8 pixelů).</i></p>

<p>Původní Grantův interpret BASICu, který vznikl již v&nbsp;průběhu června a
července roku 1979, měl sice délku okolo pěti kilobajtů, ovšem po cca jednom
měsíci věnovaném optimalizacím a ladění se podařilo splnit zadání a vytvořit
interpret programovacího jazyka BASIC uloženého v&nbsp;pouhých 4 kB ROM (spolu
s&nbsp;editorem a dalšími strojovými rutinami), který pro svoji činnost
vyžadoval jen 1 kB paměti RAM. Zajímavé bylo využití operační paměti, protože
do již zmíněného jednoho kilobajtu bylo nutné ukládat jak tokenizovaný BASICový
program, tak i obrazovou paměť, zásobník pro vyhodnocování výrazů, proměnné
operačního systému aj. Myšlenka uložení obrazových dat je poměrně
jednoduchá &ndash; vzhledem k&nbsp;tomu, že výpis zdrojového kódu BASICového
programu většinou nezabere celý textový řádek (32 znaků), jsou jednotlivé řádky
uloženy v&nbsp;operační paměti za sebou jako řetězce o různé délce (samotný
BASICový program je dokonce ještě mnohem kratší, neboť v&nbsp;paměti jsou
uloženy pouze tokeny jednotlivých příkazů). Spolu s&nbsp;rostoucí velikostí
tokenizovaného programu se zmenšuje počet zobrazených řádků. Tento způsob práce
s&nbsp;pamětí byl v&nbsp;následující řadě počítačů <i>Sinclair</i> (počínaje
slavným <i>ZX Spectrem</i>) opuštěn, protože u větších kapacit operačních
pamětí postrádal smysl.</p>

<img src="https://i.iinfo.cz/images/565/speccya-8.jpg" class="image-449674" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="600" height="840" />
<p><i>Obrázek 24: Přebal jedné z&nbsp;mnoha knih o Sinclair BASICu.</i></p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti není rozdíl ve velikosti
zdrojového kódu a tokenizovaného kódu příliš velký, o čemž se ostatně můžeme
snadno přesvědčit v&nbsp;emulátoru při uložení zdrojového kódu v&nbsp;čitelné
podobě následované uložením kódu tokenizovaného.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Specifické vlastnosti Sinclair BASICu</h2>

<p>Sinclair BASIC je v&nbsp;některých ohledech poměrně specifickým jazykem,
který se odlišuje například od již popsaného <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/#k05">Atari
BASICu</a>, <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/#k07">Turbo
BASICu XL</a> či <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/#k07">Microsoft
BASICu</a>. Již v&nbsp;původní verzi <i>Sinclair BASICu</i> naprogramované
Johnem Grantem byl použit způsob zápisu programu, který byl později použit
i v&nbsp;dalších interpretrech BASICu využívaných na počítačích firmy
<i>Sinclair Research</i>. Jednotlivé BASICové příkazy a funkce se totiž
nevypisovaly znak po znaku (jak je to běžné dnes nebo jak to bylo běžné na
dalších osmibitových počítačích), ale vkládaly se do editovaného programu vždy
po celých slovech či symbolech. K&nbsp;tomuto účelu měla každá ze čtyřiceti
kláves na klávesnici počítačů <i>Sinclair</i> vždy několik funkcí &ndash;
většinou tři až pět. V&nbsp;závislosti na právě aktivním režimu kurzoru bylo
možné do programu vložit celý vybraný příkaz nebo funkci, což bylo po relativně
krátkém zaučení poměrně rychlé a navíc se tím zamezilo vzniku mnoha
syntaktických chyb &ndash; které navíc interpret nemusel kontrolovat.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-17.png" class="image-449694" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 25: Další screenshot ze hry B-ELITE naprogramované
v&nbsp;Sinclair BASICU.</i></p>

<p>Tento způsob editace programů měl ještě jednu přednost, protože uživatelé
měli přímo na klávesnici vypsány všechny příkazy dostupné v&nbsp;dané verzi
<i>Sinclair BASICu</i>, takže odpadlo zdlouhavé listování v&nbsp;příručkách a
navíc prozatím &bdquo;tajemná&ldquo; slova napsaná na klávesnici lákala
uživatele, aby si příslušné příkazy vyzkoušeli a naučili se je (poznamenejme
jen, že jednotlivé příkazy byly interně ukládány jako osmibitové tokeny
s&nbsp;hodnotami ležícími mezi 165 až 255).</p>

<p>Zatímco interpret BASICu implementovaný na počítači <i>ZX80</i> umožňoval
práci pouze s&nbsp;celými čísly (více funkcionality se prostě do pouhých 4kB
ROM nevešlo), bylo možné ve všech dalších verzích <i>Sinclair BASICu</i>
používat i čísla uložená ve formátu plovoucí řádové čárky, sdružovat více
hodnot do polí atd. Samozřejmě bylo možné pracovat i s&nbsp;řetězci, ovšem
u proměnných uchovávajících řetězce se rozlišoval pouze jeden znak
v&nbsp;jejich názvu, takže počet současně zpracovávaných řetězcových proměnných
byl roven počtu znaků v&nbsp;abecedě (za jména těchto proměnných se přidávat
znak $, ostatně jako snad ve všech dialektech &bdquo;klasického&ldquo;
BASICu).</p>

<img src="https://i.iinfo.cz/images/565/speccya-9.jpg" class="image-449675" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="450" height="682" />
<p><i>Obrázek 26: Přebal další knihy o Sinclair BASICu.</i></p>

<p>Mimochodem: při přístupu k&nbsp;podřetězcům se využíval zápis, který je
sémanticky velmi podobný způsobu přístupu k&nbsp;podseznamům v&nbsp;jazyku
<i>Python</i>: <i>Sinclair BASIC</i> umožňoval zpracovávat výrazy typu:
<strong>A$(1 TO 10)</strong> (podřetězec s&nbsp;uvedením počátečního
i koncového indexu), <strong>A$( TO 10)</strong> (počáteční index je dosazen
automaticky), <strong>A$(2 TO )</strong> (koncový index je roven délce
řetězce), <strong>A$(3)</strong> (výběr jednoho znaku) atd., což je podle mého
názoru lepší řešení, než použití funkcí <strong>LEFT$</strong>,
<strong>RIGHT$</strong> a <strong>MID$</strong> využívaných (nejenom) Microsoft
BASICem.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-18.png" class="image-449695" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 27: R-type ve verzi pro ZX Spectrum.</i></p>

<p>Další zajímavostí <i>Sinclair BASICu</i> bylo to, že funkce
<strong>VAL</strong> (sloužící pro převod řetězce na odpovídající číselnou
hodnotu), dokázala zpracovat a vyčíslit jakýkoli BASICový výraz, takže se ve
skutečnosti jednalo o funkci <strong>EVAL.</strong>  Kromě funkce
<strong>VAL</strong> byly programátorům k&nbsp;dispozici i další tři
&bdquo;klasické&ldquo; funkce určené pro převody mezi znaky, řetězci a
číselnými hodnotami &ndash; <strong>ASC</strong> (převod znaku na jeho ASCII
hodnotu), <strong>CHR$</strong> (opak <strong>ASC</strong>) a
<strong>STR$</strong> (opak <strong>VAL</strong>, převod čísla na řetězec).
Mezi unikátní příkazy, s&nbsp;nimiž se u jiných typů mikropočítačů nesetkáme,
patřily především příkazy sloužící pro práci s&nbsp;obrazovkou a k&nbsp;ní
příslušející atributovou pamětí. Jedná se například o příkazy
<strong>BORDER</strong>, <strong>BRIGHT</strong>, <strong>FLASH</strong>
(skutečně nejde o spuštění Flashové animace), <strong>INVERSE</strong>,
<strong>PAPER</strong> atd.</p>

<a href="http://i.iinfo.cz/images/105/pc117-4.png"><img src="http://i.iinfo.cz/images/105/pc117-4-prev.png" width="370" height="162" alt=" " /></a>
<p><i>Obrázek 28: Klávesnice počítače ZX80 s&nbsp;popiskami příkazů Sinclair
BASICu.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Seznam příkazů Sinclair BASICu a odlišnosti mezi jeho jednotlivými verzemi</h2>

<p>Originální <i>Sinclair BASIC</i> obsahoval přes osmdesát různých příkazů
(včetně funkcí a logických operátorů), které byly navíc doplněny aritmetickými
operátory. V&nbsp;následující tabulce jsou vypsány všechny příkazy společné pro
interpretry dostupné na počítačích <i>ZX80</i>, <i>ZX81</i>, <i>ZX Spectrum</i>
i na jejich klonech a následovnících. Jedinou výjimkou ve zpětné kompatibilitě
jsou dvojslovní příkazy <strong>GO TO</strong> a <strong>GO SUB</strong>, které
byly v&nbsp;některých interpretrech nahrazeny jednoslovními příkazy
<strong>GOTO</strong> a <strong>GOSUB</strong>:</p>

<table>
<tr><td>ABS     </td><td>DEF FN </td><td>LLIST    </td><td>READ   </td></tr>
<tr><td>ACS     </td><td>DIM    </td><td>LN       </td><td>REM    </td></tr>
<tr><td>AND     </td><td>DRAW   </td><td>LOAD     </td><td>RESTORE</td></tr>
<tr><td>ASN     </td><td>ERASE  </td><td>LPRINT   </td><td>RETURN </td></tr>
<tr><td>AT      </td><td>EXP    </td><td>MERGE    </td><td>RND    </td></tr>
<tr><td>ATN     </td><td>FLASH  </td><td>MOVE     </td><td>RUN    </td></tr>
<tr><td>ATTR    </td><td>FN     </td><td>NEW      </td><td>SAVE   </td></tr>
<tr><td>BEEP    </td><td>FOR    </td><td>NEXT     </td><td>SCREEN$</td></tr>
<tr><td>BIN     </td><td>FORMAT </td><td>NOT      </td><td>SGN    </td></tr>
<tr><td>BORDER  </td><td>GO SUB </td><td>OPEN#    </td><td>SIN    </td></tr>
<tr><td>BRIGHT  </td><td>GO TO  </td><td>OR       </td><td>SQR    </td></tr>
<tr><td>CAT     </td><td>IF     </td><td>OUT      </td><td>STEP   </td></tr>
<tr><td>CHR$    </td><td>IN     </td><td>OVER     </td><td>STR$   </td></tr>
<tr><td>CIRCLE  </td><td>INK    </td><td>PAPER    </td><td>TAB    </td></tr>
<tr><td>CLEAR   </td><td>INKEY$ </td><td>PAUSE    </td><td>TAN    </td></tr>
<tr><td>CLOSE#  </td><td>INPUT  </td><td>PEEK     </td><td>THEN   </td></tr>
<tr><td>CLS     </td><td>INT    </td><td>PI       </td><td>TO     </td></tr>
<tr><td>CODE    </td><td>INVERSE</td><td>PLOT     </td><td>USR    </td></tr>
<tr><td>CONTINUE</td><td>LEN    </td><td>POINT    </td><td>VAL    </td></tr>
<tr><td>COPY    </td><td>LET    </td><td>POKE     </td><td>VAL$   </td></tr>
<tr><td>COS     </td><td>LINE   </td><td>PRINT    </td><td>VERIFY </td></tr>
<tr><td>DATA    </td><td>LIST   </td><td>RANDOMIZE</td><td>&nbsp;</td></tr>
</table>

<img src="https://i.iinfo.cz/images/645/speccyb-19.png" class="image-449696" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 29: R-type ve verzi pro ZX Spectrum.</i></p>

<table>
<tr><th>Nové příkazy počítače ZX81</th></tr>
<tr><td>FAST</td></tr>
<tr><td>SLOW</td></tr>
<tr><td>SCROLL</td></tr>
<tr><td>UNPLOT</td></tr>
<tr><td>GOTO</td></tr>
<tr><td>GOSUB</td></tr>
</table>

<p>Počítač <i>Timex 2068</i>, který představoval variantu <i>ZX Spectra</i>
prodávanou především v&nbsp;USA, nabízel uživatelům a programátorům
používajícím Sinclair BASIC další příkazy, vypsané v&nbsp;následující tabulce.
Na tomto místě je však nutné říci, že počítače <i>Timex</i> nebyly vzhledem
k&nbsp;úpravám zapojení a modifikacím obsahu paměti ROM zcela kompatibilní se
<i>ZX Spectrem</i>, což způsobovalo poměrně velké problémy například při
převodu her či komplikovanějších aplikací:</p>

<table>
<tr><th>Nové příkazy počítače Timex 2068</th></tr>
<tr><td>DELETE</td></tr>
<tr><td>FREE  </td></tr>
<tr><td>ON ERR</td></tr>
<tr><td>RESET </td></tr>
<tr><td>SOUND </td></tr>
<tr><td>STICK </td></tr>
</table>

<p>Mikropočítač <i>ZX Spectrum+ 128k</i>, který byl mj.&nbsp;vybaven i známým
zvukovým čipem <i>AY-3-8912</i>, měl Sinclair BASIC rozšířen o dva nové
příkazy. První příkaz sloužil pro přehrávání zvuků na čipu <i>AY-3-8912</i>,
druhý pro přepnutí BASICu do původního režimu <i>ZX Spectra</i>:</p>

<table>
<tr><th>Nové příkazy počítače ZX Spectrum+ 128k</th></tr>
<tr><td>PLAY</td></tr>
<tr><td>SPECTRUM</td></tr>
</table>



<p><a name="k13"></a></p>
<h2 id="k13">13. Laser BASIC</h2>

<p>Na osmibitových domácích mikropočítačích vyráběných firmou <i>Sinclair
Research</i> se kromě originálního <i>Sinclair BASICu</i> (uloženého přímo
v&nbsp;paměti ROM) samozřejmě používaly i další dialekty programovacího jazyka
BASIC. V&nbsp;některých případech se jednalo o interpretry, které zdrojový
program nejprve transformovaly do tokenizovaného tvaru (který je obdobou
dnešních bajtkódů) s&nbsp;jeho postupnou interpretací, v&nbsp;případech dalších
pak o skutečné překladače programů zapsaných v&nbsp;BASICu přímo do strojového
kódu mikroprocesoru <i>Z80</i>. Jednou z&nbsp;poměrně známých alternativ
k&nbsp;<i>Sinclair BASICu</i> je <i>Laser BASIC</i> vytvořený spolu
s&nbsp;<i>Laser Compilerem</i> firmou Oasis Software.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-20.png" class="image-449697" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 29: Načítání Laser BASICu.</i></p>

<p>Jedná se o nadstavbu původního <i>Sinclair BASICu</i>, která využívá velké
množství rutin obsažených v&nbsp;paměti ROM ZX Spectra, včetně původního
textového editoru používaného <i>Sinclair BASICem</i>. Díky tomu <i>Laser
BASIC</i> v&nbsp;operační paměti obsadil pouze 8 kB (byl umístěn na nejvyšších
adresách paměti) i přesto, že programátorům nabízel 138 nových příkazů
(zapisovaných ručně, tj.&nbsp;nikoli pomocí klávesových zkratek). Tyto nové
příkazy sloužily k&nbsp;manipulacím s&nbsp;rastrovými obrázky a především pro
práci se sprity, což jsou v&nbsp;tomto kontextu rastrové obrázky, které se
mohou pohybovat po obrazovce a mít průhledné pixely (vše se pochopitelně
vykresluje programově).</p>

<img src="https://i.iinfo.cz/images/645/speccyb-21.png" class="image-449698" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 30: Na to, že se jednalo o vývojářský software, bylo v&nbsp;Laser
BASICu použito mnoho multimediálních prvků (na této obrazovce například houká
siréna).</i></p>

<p>Vzhledem k&nbsp;tomu, že nové příkazy nemohly být spouštěny přímo
interpretrem původního Sinclair BASICu, obsahoval <i>Laser BASIC</i> i
překladač, který celý program, tj.&nbsp;jak původní BASICové příkazy, tak i
příkazy &bdquo;grafické&ldquo; přeložil do strojového kódu a následně připojil
k&nbsp;vygenerovanému kódu i runtime knihovnu a data s&nbsp;definicemi
spritů.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-22.png" class="image-449699" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 31: Hlavní menu Laser BASICu.</i></p>

<p><div class="rs-tip-major">Poznámka: mimochodem &ndash; Laser BASIC obsahoval
i příkazy <strong>.TRON</strong> a <strong>.TROF</strong> (opět s&nbsp;tečkami
na začátku) použitelné pro sledování programu v&nbsp;době jeho běhu, samozřejmě
za tu cenu, že rychlost bude značně snížena.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Grafické příkazy, předávání parametrů grafickým příkazům</h2>

<p>Nové příkazy Laser BASICu se zapisovaly s&nbsp;tečkou na začátku, tedy tak,
jak je to patrné na dalším screenshotu:</p>

<img src="https://i.iinfo.cz/images/645/speccyb-23.png" class="image-449700" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 32: Jednoduchý program demonstrující schopnost několika příkazy
nastavit část obrazovky na inverzní barvu.</i></p>

<p>S&nbsp;tímto výsledkem:</p>

<img src="https://i.iinfo.cz/images/645/speccyb-24.png" class="image-449701" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 33: Výsledek po spuštění předchozího skriptu.</i></p>

<p>Mezi nové příkazy patří například:</p>

<table>
<tr><th>Příkaz</th><th>Stručný popis příkazu</th></tr>
<tr><td>.SPRT</td><td>vytvoření nového spritu (těch může být teoreticky až 255)</td></tr>
<tr><td>.ISPR</td><td>dtto, ovšem alokace se provádí odlišným způsobem</td></tr>
<tr><td>.WSPR</td><td>vymazání spritu (<i>wipe out?</i>)</td></tr>
<tr><td>.DSPR</td><td>dtto, ovšem dealokace se provádí odlišným způsobem</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>.WL1V</td><td>posun/scroll obrazovky o jeden pixel doleva</td></tr>
<tr><td>.WL4V</td><td>posun/scroll obrazovky o čtyři pixely doleva</td></tr>
<tr><td>.SR8V</td><td>posun/scroll obrazovky o osm pixelů doprava (+ další možné kombinace)</td></tr>
<tr><td>.WCRV</td><td>vertikální posun obrazovky, s&nbsp;wrappingem nahoře/dole</td></tr>
<tr><td>.SCRV</td><td>vertikální posun obrazovky, bez wrappingu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>.WL1M</td><td>posun/scroll spritu o jeden pixel doleva, bez wrappingu</td></tr>
<tr><td>.SR8M</td><td>posun/scroll spritu o osm pixelů doprava, bez wrappingu (+ další možné kombinace)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>.GTBL</td><td>přesun části okna do paměti spritu</td></tr>
<tr><td>.GTOR</td><td>dtto, ovšem s&nbsp;operací OR</td></tr>
<tr><td>.GTXR</td><td>dtto, ovšem s&nbsp;operací XOR</td></tr>
<tr><td>.GTND</td><td>dtto, ovšem s&nbsp;operací AND</td></tr>
<tr><td>.PTBL</td><td>přesun spritu na obrazovku (tj.&nbsp;klasická operace typu <strong>bitblt</strong>)</td></tr>
<tr><td>.PTOR</td><td>dtto, ovšem s&nbsp;operací OR</td></tr>
<tr><td>.PTXR</td><td>dtto, ovšem s&nbsp;operací XOR</td></tr>
<tr><td>.PTND</td><td>dtto, ovšem s&nbsp;operací AND</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: příkazů je ve skutečnosti ještě více,
toto je jen výběr na ukázku, jaké nové možnosti Laser BASIC programátorům
nabízel.</div></p>

<p>Grafické příkazy obecně vyžadují velké množství parametrů. Tento problém byl
v&nbsp;Laser BASICu řešen takovým způsobem, že se namísto parametrů používalo
160 specializovaných proměnných, které byly příkazy využívány. Tyto proměnné
byly rozděleny do šestnácti skupin po deseti; pro výběr skupiny se používal
příkaz <strong>.SET</strong>:</p>

<table>
<tr><th>Proměnná</th><th>Stručný popis proměnné</th></tr>
<tr><td>COL</td><td>x-ová souřadnice v&nbsp;rozsahu 0-31 (reprezentovaná v&nbsp;násobcích osmi)</td></tr>
<tr><td>ROW</td><td>y-ová souřadnice v&nbsp;rozsahu 0-23 (reprezentovaná jako číslo řádku)</td></tr>
<tr><td>LEN</td><td>šířka okna (1-32)</td></tr>
<tr><td>HGT</td><td>výška okna (1-24)</td></tr>
<tr><td>SCL</td><td>x-ová souřadnice měřená v&nbsp;rámci spritu</td></tr>
<tr><td>SRW</td><td>y-ová souřadnice měřená v&nbsp;rámci spritu</td></tr>
<tr><td>NPX</td><td>použito při vertikálním posunu (scrollingu); nabývá hodnot -128 až 127</td></tr>
<tr><td>SPN</td><td>číslo spritu v&nbsp;rozsahu 1 až 255</td></tr>
<tr><td>SP1</td><td>využito pro určení spritu, který neobsahuje okno (pro některé operace)</td></tr>
<tr><td>SP2</td><td>využito pro určení spritu, který obsahuje okno (pro některé operace)</td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Laser Compiler</h2>

<p>Samotný překladač (<i>Laser Compiler</i>) byl poměrně jednoduchý &ndash;
prováděl překlad v&nbsp;jednom průchodu bez aplikace větších optimalizací
&ndash; proto také urychlení běhu programů bylo pouze přibližně dvojnásobně
rychlejší oproti jejich interpretaci (pro <i>ZX Spectrum</i> existovaly mnohem
lepší překladače). Ovšem hlavní přednost <i>Laser BASICu</i> tkví především
v&nbsp;jeho nabídce &bdquo;grafických&ldquo; příkazů a editoru spritů, takže
například tvorba her byla s&nbsp;využitím této utility mnohem snazší než při
použití původního <i>Sinclair BASICu</i>. Překlad mohl být proveden na
Microdrive nebo na kazetu.</p>

<img src="https://i.iinfo.cz/images/645/speccyb-25.png" class="image-449702" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 34: Logo Laser BASICu.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Editor spritů</h2>

<p>Jednou z&nbsp;nejdůležitějších součástí Laser BASICu byl i editor spritů,
přesněji řečeno softwarových spritů, protože specializovaný hardware určený pro
vykreslování spritů na ZX Spectru neexistoval. Sprity se editovaly ve zvětšené
mřížce, která je zobrazena na dalším screenshotu:</p>

<img src="https://i.iinfo.cz/images/645/speccyb-26.png" class="image-449703" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 35: Důležitá součást Laser BASICu &ndash; editor spritů.</i></p>

<p>Sprite bylo možné uložit na disk (typicky do samostatného souboru) a
následně ho využít ve vytvářené aplikaci a vykreslit s&nbsp;využitím příkazů,
s&nbsp;nimiž jsme se (alespoň ve stručnosti) seznámili v&nbsp;rámci <a
href="#k15">předchozí kapitoly</a>.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Dema</h2>

<p>K&nbsp;Laser BASICu bylo na druhé kazetě dodáváno i několik dem, které
ukazovaly možnosti nabízené díky použití softwarově vykreslovaných spritů
zkombinovaných s&nbsp;horizontálním popř.&nbsp;vertikálním posunem obrazovky
popř.&nbsp;její části (okna):</p>

<img src="https://i.iinfo.cz/images/645/speccyb-27.png" class="image-449704" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 36: První demo dodávané s&nbsp;Laser BASICem s&nbsp;pohybujícím
se spritem.</i></p>

<img src="https://i.iinfo.cz/images/645/speccyb-28.png" class="image-449705" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 37: První demo dodávané s&nbsp;Laser BASICem s&nbsp;pohybujícím
se spritem.</i></p>

<p><div class="rs-tip-major">Poznámka: další možnosti Laser BASICu je možné
díky modernějším technologiím, než je ZX Spetrum, nalézt na Youtube, konkrétně
na adresách <a
href="https://www.youtube.com/watch?v=rMgRjOMLYGw">https://www.youtube.com/watch?v=rMgRjOMLYGw</a>
a <a
href="https://www.youtube.com/watch?v=ODwP0PKnPfI">https://www.youtube.com/watch?v=ODwP0PKnPfI</a>.</div></p>

<img src="https://i.iinfo.cz/images/645/speccyb-29.png" class="image-449706" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="512" height="384" />
<p><i>Obrázek 38: Druhé demo dodávané s&nbsp;Laser BASICem..</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah navazujícího článku</h2>

<p>Ve druhém článku o vývojových prostředích dostupných pro domácí osmibitové
mikropočítače ZX Spectrum nejprve dokončíme téma, kterému jsme se věnovali
dnes. Popíšeme si totiž vybrané další interpretry a překladače programovacího
jazyka BASIC určené pro tento typ mikropočítačů. Jedná se v&nbsp;první řadě o
slavný Beta BASIC. Dále si popíšeme některé známé assemblery popř.&nbsp;ucelená
vývojová prostředí určená pro vývoj aplikací v&nbsp;assembleru mikroprocesoru
Zilog Z80. Ve třetím článku se pak budeme zabývat vyššími programovacími
jazyky, které byly pro Speccy dostupné.</p>

<img src="https://i.iinfo.cz/images/565/speccya-10.png" class="image-449676" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="614" height="540" />
<p><i>Obrázek 39: Schéma zapojení počítače ZX81. Povšimněte si, jakým způsobem
je propojen mikroprocesor s čipem ULA i paměťmi RAM a ROM. Na sběrnici je
napojena i osmice rezistorů, které nahrazují řadič sběrnice &ndash; ULA tak
může snadno číst kódy znaků z&nbsp;paměti ROM, aniž by bylo zapotřebí procesor
fyzicky odpojit od sběrnice.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>ZX80 – fotka plošného spoje<br>
<a href="http://www.nvg.ntnu.no/sinclair/computers/zx80/images/zx80_pcb_jpg.jpg">http://www.nvg­.ntnu.no/sincla­ir/computers/zx80/i­mages/zx80_pcb­_jpg.jpg</a></li>

<li>ZX80 Circuit Diagram (fotografie)<br>
<a href="http://woodworths.com/EBay_Auctions/Auction11.htm">http://woodwor­ths.com/EBay_Au­ctions/Auction11­.htm</a></li>

<li>ZX80 Circuit Diagram (lepší kvalita než na předchozím odkazu)<br>
<a href="http://www.nvg.ntnu.no/sinclair/computers/zx80/images/zx80_circuit.gif">http://www.nvg­.ntnu.no/sincla­ir/computers/zx80/i­mages/zx80_cir­cuit.gif</a></li>

<li>ZX80 Photos<br>
<a href="http://www.nvg.ntnu.no/sinclair/computers/zx80/zx80_photos.htm">http://www.nvg­.ntnu.no/sincla­ir/computers/zx80/zx80_­photos.htm</a></li>

<li>Emulátor ZX Spectra napsaný v Javě<br>
<a href="http://www.zzspectrum.org/">http://www.zzspec­trum.org/</a></li>

<li>ZX81/ZX80 Emulator napsaný v Javě<br>
<a href="http://www.zx81stuff.org.uk/zx81/jtyone.html">http://www.zx81stuf­f.org.uk/zx81/jty­one.html</a></li>

<li>Daves Old Computers – Sinclair ZX80/81 – Timex 1000<br>
<a href="http://www.classiccmp.org/dunfield/sinclair/index.htm">http://www.clas­siccmp.org/dun­field/sinclair/in­dex.htm</a></li>

<li>New games for ZX81<br>
<a href="http://www.armchairarcade.com/neo/taxonomy/term/233">http://www.ar­mchairarcade.com/ne­o/taxonomy/ter­m/233</a></li>

<li>RetroThing – ZX81<br>
<a href="http://www.retrothing.com/2008/04/build-your-ow-2.html">http://www.re­trothing.com/2008/04­/build-your-ow-2.html</a></li>

<li>Sinclair ZX81 Chopperdrop 3000<br>
<a href="http://www.youtube.com/watch?v=MY6TGQEvvX4">http://www.you­tube.com/watch?v=MY6TGQEv­vX4</a></li>

<li>DOOM game on ZX Spectrum<br>
<a href="http://www.youtube.com/watch?v=3v7cFGneuaw&amp;feature=related">http://www.you­tube.com/watch?v=3v7cFGn­euaw&amp;feature=re­lated</a></li>

<li>Trader ZX81 part 1<br>
<a href="http://www.youtube.com/watch?v=FhElddXeLDU&amp;feature=fvsr">http://www.you­tube.com/watch?v=FhEl­ddXeLDU&amp;featu­re=fvsr</a></li>

<li>ZX81 forever<br>
<a href="http://www.zx-team.de/andre/">http://www.zx-team.de/andre/</a></li>

<li>ZX81 Caverns – předělávka hry pro ZX81<br>
<a href="http://www.martinruffe.co.uk/view.aspx?id=36">http://www.mar­tinruffe.co.uk/vi­ew.aspx?id=36</a></li>

<li>Steven's ZX81 Computer – ukázky programů pro ZX81 a další informace<br>
<a href="http://www.geocities.com/CapeCanaveral/Hangar/1969/zx81/">http://www.ge­ocities.com/Ca­peCanaveral/Han­gar/1969/zx81/</a></li>

<li>Sinclair ZX81 FAQ<br>
<a href="http://www.honneamise.u-net.com/zx81/zx81faq.html">http://www.hon­neamise.u-net.com/zx81/zx­81faq.html</a></li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>boriel / zxbasic<br />
<a href="https://github.com/boriel/zxbasic">https://github.com/boriel/zxbasic"</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Programovací jazyk BASIC na herní konzoli Atari 2600<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-herni-konzoli-atari-2600/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-herni-konzoli-atari-2600/</a>
</li>

<li>A Tour of 6502 Cross-Assemblers<br />
<a href="https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/">https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/</a>
</li>

<li>Which cross assembler/compiler do you use?<br />
<a href="https://atariage.com/forums/topic/195253-which-cross-assemblercompiler-do-you-use/">https://atariage.com/forums/topic/195253-which-cross-assemblercompiler-do-you-use/</a>
</li>

<li>Stránka magazínu (diskmagu) FLOP<br />
<a href="http://flop.atariportal.cz/">http://flop.atariportal.cz/</a>
</li>

<li>Madass<br />
<a href="https://mads.atari8.info/">https://mads.atari8.info/</a>
</li>

<li>MAD-ASSEMBLER 1.9.5<br />
<a href="https://mads.atari8.info/mads_eng.html">https://mads.atari8.info/mads_eng.html</a>
</li>

<li>Action (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Action">https://atariwiki.org/wiki/Wiki.jsp?page=Action</a>
</li>

<li>Assembler (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Assembler">https://atariwiki.org/wiki/Wiki.jsp?page=Assembler</a>
</li>

<li>Basic (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Basic">https://atariwiki.org/wiki/Wiki.jsp?page=Basic</a>
</li>

<li>C (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=C">https://atariwiki.org/wiki/Wiki.jsp?page=C</a>
</li>

<li>Forth (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Forth">https://atariwiki.org/wiki/Wiki.jsp?page=Forth</a>
</li>

<li>Fortran (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Fortran">https://atariwiki.org/wiki/Wiki.jsp?page=Fortran</a>
</li>

<li>Lisp (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Lisp">https://atariwiki.org/wiki/Wiki.jsp?page=Lisp</a>
</li>

<li>Logo (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Logo">https://atariwiki.org/wiki/Wiki.jsp?page=Logo</a>
</li>

<li>Pascal (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Pascal">https://atariwiki.org/wiki/Wiki.jsp?page=Pascal</a>
</li>

<li>Pilot (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Pilot">https://atariwiki.org/wiki/Wiki.jsp?page=Pilot</a>
</li>

<li>PL65 (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=PL65">https://atariwiki.org/wiki/Wiki.jsp?page=PL65</a>
</li>

<li>Quick (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Quick">https://atariwiki.org/wiki/Wiki.jsp?page=Quick</a>
</li>

<li>WSFN (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=WSFN">https://atariwiki.org/wiki/Wiki.jsp?page=WSFN</a>
</li>

<li>MAC/65 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MAC/65">https://en.wikipedia.org/wiki/MAC/65</a>
</li>

<li>Atari Assembler Editor<br />
<a href="https://en.wikipedia.org/wiki/Atari_Assembler_Editor#AMAC">https://en.wikipedia.org/wiki/Atari_Assembler_Editor#AMAC</a>
</li>

<li>cc65<br />
<a href="https://cc65.github.io/">https://cc65.github.io/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="http://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">http://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Stránky RetroFestu<br />
<a href="http://retrofest.cz/">http://retrofest.cz/</a>
</li>

<li>RetroHerna<br />
<a href="http://retroherna.cz/">http://retroherna.cz/</a>
</li>

<li>BASIC<br />
<a href="http://cs.wikipedia.org/wiki/BASIC">http://cs.wikipedia.org/wiki/BASIC</a>
</li>

<li>BASIC<br />
<a href="http://en.wikipedia.org/wiki/BASIC">http://en.wikipedia.org/wiki/BASIC</a>
</li>

<li>Rosetta Code &ndash; Category Basic<br />
<a href="http://rosettacode.org/wiki/Category:BASIC">http://rosettacode.org/wiki/Category:BASIC</a>
</li>

<li>Dartmouth College Computation Center: 1964 &ndash; The original Dartmouth BASIC manual<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf</a>
</li>

<li>The Original BASIC<br />
<a href="http://www.truebasic.com/">http://www.truebasic.com/</a>
</li>

<li>BASIC - Beginners All-purpose Symbolic Instruction Code<br />
<a href="http://hopl.murdoch.edu.au/showlanguage.prx?exp=176">http://hopl.murdoch.edu.au/showlanguage.prx?exp=176</a>
</li>

<li>Turbo BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Turbo_BASIC">http://cs.wikipedia.org/wiki/Turbo_BASIC</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Action!<br />
<a href="https://atari8bitbot.com/action/">https://atari8bitbot.com/action/</a>
</li>

<li>Atari Logo<br />
<a href="https://atari8bitbot.com/atari-logo/">https://atari8bitbot.com/atari-logo/</a>
</li>

<li>Atari PILOT &amp; Super PILOT<br />
<a href="https://atari8bitbot.com/atari-pilot/">https://atari8bitbot.com/atari-pilot/</a>
</li>

<li>Turbo-BASIC XL<br />
<a href="https://atari8bitbot.com/turbo-basic-xl/">https://atari8bitbot.com/turbo-basic-xl/</a>
</li>

<li>Atari Assembler/Editor<br />
<a href="https://atari8bitbot.com/atari-assembler-editor/">https://atari8bitbot.com/atari-assembler-editor/</a>
</li>

<li>Strings in Atari BASIC<br />
<a href="http://www.cyberroach.com/analog/an11/strings.htm">http://www.cyberroach.com/analog/an11/strings.htm</a>
</li>

<li>String Arrays in Atari BASIC<br />
<a href="http://www.atarimagazines.com/compute/issue11/52_1_STRING_ARRAYS_IN_ATARI_BASIC.php">http://www.atarimagazines.com/compute/issue11/52_1_STRING_ARRAYS_IN_ATARI_BASIC.php</a>
</li>

<li>An Atari BASIC Tutorial<br />
<a href="http://www.cyberroach.com/analog/an25/basictutorial.htm">http://www.cyberroach.com/analog/an25/basictutorial.htm</a>
</li>

<li>Atari Logo<br />
<a href="https://en.wikipedia.org/wiki/Atari_Logo">https://en.wikipedia.org/wiki/Atari_Logo</a>
</li>

<li>Computer art and animation: a user's guide to Atari logo<br />
<a href="https://archive.org/details/Computer_Art_and_Animation">https://archive.org/details/Computer_Art_and_Animation</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 1 – Hello World!<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-1-hello-world/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-1-hello-world/</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 2 – Graphics<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-2-graphics/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-2-graphics/</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 3 – More Variables, Memory and Pointers (ugh!)<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-3-more-variables-memory-and-pointers-ugh/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-3-more-variables-memory-and-pointers-ugh/</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 4 – Using VSCode and Action! with syntax highlighting<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-4-using-vscode-and-action-with-syntax-highlighting/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-4-using-vscode-and-action-with-syntax-highlighting/</a>
</li>

<li>Atari800 (emulátor)<br />
<a href="https://github.com/atari800/atari800">https://github.com/atari800/atari800</a>
</li>

<li>Atari MAC/65 Tutorial<br />
<a href="https://www.youtube.com/watch?v=RyBsGDJBXD0">https://www.youtube.com/watch?v=RyBsGDJBXD0</a>
</li>

<li>MAC/65 Manual<br />
<a href="http://www.mixinc.net/atari/mac65.htm">http://www.mixinc.net/atari/mac65.htm</a>
</li>

<li>BASIC 10 Liner Contest 2021<br />
<a href="https://atariage.com/forums/topic/316645-basic-10-liner-contest-2021/">https://atariage.com/forums/topic/316645-basic-10-liner-contest-2021/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Deep Blue C<br />
<a href="https://en.wikipedia.org/wiki/Deep_Blue_C">https://en.wikipedia.org/wiki/Deep_Blue_C</a>
</li>

<li>Deep Blue C Compiler<br />
<a href="https://www.atariarchives.org/APX/showinfo.php?cat=20166">https://www.atariarchives.org/APX/showinfo.php?cat=20166</a>
</li>

<li>Historie vývoje počítačových her: simulace a strategické hry naprogramované Chrisem Crawfordem<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-simulace-a-strategicke-hry-naprogramovane-chrisem-crawfordem/">https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-simulace-a-strategicke-hry-naprogramovane-chrisem-crawfordem/</a>
</li>

<li>Explore BASIC Programming Languages for the Atari 8-Bit Computers (30-60 mins)<br />
<a href="http://atariprojects.org/2020/08/29/explore-different-basic-programming-languages-for-the-atari-8-bit-computers-30-60-mins/">http://atariprojects.org/2020/08/29/explore-different-basic-programming-languages-for-the-atari-8-bit-computers-30-60-mins/</a>
</li>

<li>Learn How to Make a Game in BASIC XE (30-60 mins)<br />
<a href="http://atariprojects.org/2019/12/21/learn-how-to-make-a-game-in-basic-xe-30-60-mins/">http://atariprojects.org/2019/12/21/learn-how-to-make-a-game-in-basic-xe-30-60-mins/</a>
</li>

<li>Atari BASIC XL (manuál)<br />
<a href="http://www.atarimania.com/8bit/files/BASIC%20XL%20%C2%A4%20Second%20Edition.pdf">http://www.atarimania.com/8bit/files/BASIC%20XL%20%C2%A4%20Second%20Edition.pdf</a>
</li>

<li>BASIC XE For Atari XL &amp; XE<br />
<a href="https://www.atarimagazines.com/compute/issue67/318_1_Reviews_BASIC_XE_For_Atari_XL_XE.php">https://www.atarimagazines.com/compute/issue67/318_1_Reviews_BASIC_XE_For_Atari_XL_XE.php</a>
</li>

<li>BUG/65 (Reference manual)<br />
<a href="https://atariwiki.org/wiki/attach/Bug65/BUG-65%20Version%202.0%20manual-final%20with%20errorpage.pdf">https://atariwiki.org/wiki/attach/Bug65/BUG-65%20Version%202.0%20manual-final%20with%20errorpage.pdf</a>
</li>

<li>Cross compiler<br />
<a href="https://en.wikipedia.org/wiki/Cross_compiler">https://en.wikipedia.org/wiki/Cross_compiler</a>
</li>

<li>Křížový překladač<br />
<a href="https://cs.wikipedia.org/wiki/K%C5%99%C3%AD%C5%BEov%C3%BD_p%C5%99eklada%C4%8D">https://cs.wikipedia.org/wiki/K%C5%99%C3%AD%C5%BEov%C3%BD_p%C5%99eklada%C4%8D</a>
</li>

<li>ATasm<br />
<a href="https://atari.miribilist.com/atasm/">https://atari.miribilist.com/atasm/</a>
</li>

<li>ATasm v1.09 ("Global Pandemic Release")<br />
<a href="https://atari.miribilist.com/atasm/atasm.pdf">https://atari.miribilist.com/atasm/atasm.pdf</a>
</li>

<li>DOS XL<br />
<a href="https://en.wikipedia.org/wiki/DOS_XL">https://en.wikipedia.org/wiki/DOS_XL</a>
</li>

<li>Aztec C online Museum<br />
<a href="https://www.clipshop.ca/Aztec/index.htm">https://www.clipshop.ca/Aztec/index.htm</a>
</li>

<li>Aztec C Compilers<br />
<a href="http://aztecmuseum.ca/compilers.htm">http://aztecmuseum.ca/compilers.htm</a>
</li>

<li>Scratchbox<br />
<a href="http://scratchbox.org/">http://scratchbox.org/</a>
</li>

<li>History of PC based C-compilers<br />
<a href="https://web.archive.org/web/20071215083657/http://www.itee.uq.edu.au/~csmweb/decompilation/hist-c-pc.html">https://web.archive.org/web/20071215083657/http://www.itee.uq.edu.au/~csmweb/decompilation/hist-c-pc.html</a>
</li>

<li>PAL/NTSC Upgrade<br />
<a href="https://www.myatari.com/nirdary.html">https://www.myatari.com/nirdary.html</a>
</li>

<li>How can you measure time using BASIC on Atari XL computers?<br />
<a href="https://retrocomputing.stackexchange.com/questions/269/how-can-you-measure-time-using-basic-on-atari-xl-computers">https://retrocomputing.stackexchange.com/questions/269/how-can-you-measure-time-using-basic-on-atari-xl-computers</a>
</li>

<li>Atari Microsoft Basic manual<br />
<a href="http://www.atarimania.com/8bit/files/Atari_Microsoft_Basic.pdf">http://www.atarimania.com/8bit/files/Atari_Microsoft_Basic.pdf</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>A86/A386 assembler and D86/D386 debugger<br />
<a href="http://eji.com/a86/">http://eji.com/a86/</a>
</li>

<li>FASM<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>NASM<br />
<a href="https://www.nasm.us/">https://www.nasm.us/</a>
</li>

<li>High Level Assembly (home page)<br />
<a href="http://plantation-productions.com/Webster/">http://plantation-productions.com/Webster/</a>
</li>

<li>High Level Assembly (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/High_Level_Assembly">https://en.wikipedia.org/wiki/High_Level_Assembly</a>
</li>

<li>A86/A386 Features<br />
<a href="http://eji.com/a86/features.htm#FeaturesA86">http://eji.com/a86/features.htm#FeaturesA86</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>ZX81 BASIC Programming<br />
<a href="http://www.worldofspectrum.org/ZX81BasicProgramming/">http://www.worldofspectrum.org/ZX81BasicProgramming/</a>
</li>

<li>Beta BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Beta_BASIC">http://en.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Beta_BASIC">http://cs.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>BETA BASIC NEWSLETTER No 8<br />
<a href="http://spectrum128.ru/help/BetaBasicNewsletter8.pdf">http://spectrum128.ru/help/BetaBasicNewsletter8.pdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

