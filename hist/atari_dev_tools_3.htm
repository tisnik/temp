<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Cross assemblery a cross překladače pro platformu osmibitových domácích mikropočítačů Atari</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Cross assemblery a cross překladače pro platformu osmibitových domácích mikropočítačů Atari</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetím a současně i posledním článku z miniseriálu o vývojových prostředcích určených pro osmibitová Atari se zaměříme na popis cross překladačů a cross assemblerů. Zmíníme se například o projektu Mad-Assembler, který je používán dodnes, podobně jako cross překladač programovacího jazyka C.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Cross assemblery a cross překladače pro platformu osmibitových domácích mikropočítačů Atari</a></p>
<p><a href="#k02">2. Vznik moderních assemblerů má kořeny v&nbsp;padesátých letech</a></p>
<p><a href="#k03">3. První makroassemblery</a></p>
<p><a href="#k04">4. Svět cross assemblerů</a></p>
<p><a href="#k05">5. Cross assemblery pro mikroprocesor 6502, </a></p>
<p><a href="#k06">6. Jednoprůchodové versus víceprůchodové assemblery</a></p>
<p><a href="#k07">7. Specifika počítačů Atari z&nbsp;hlediska cross assemblerů</a></p>
<p><a href="#k08">8. Cross assembler ATasm</a></p>
<p><a href="#k09">9. Makra aneb první krok k&nbsp;vysokoúrovňovým jazykům</a></p>
<p><a href="#k10">10. Cross assembler ca65</a></p>
<p><a href="#k11">11. Cross assembler xa65</a></p>
<p><a href="#k12">12. To nejlepší na konec &ndash; Mad-Assembler (MADS)</a></p>
<p><a href="#k13">13. Svět cross překladačů</a></p>
<p><a href="#k14">14. cc65</a></p>
<p><a href="#k15">15. Atalan</a></p>
<p><a href="#k16">16. Doplnění: makro assemblery pro osobní mikropočítače s&nbsp;mikroprocesorem Motorola 68000</a></p>
<p><a href="#k17">17. Příloha 1: instalace cross assembleru ATasm</a></p>
<p><a href="#k18">18. Příloha 2: instalace cross assembleru xa (xa65)</a></p>
<p><a href="#k19">19. Příloha 3: instalace MAD Assembleru na Linuxu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Cross assemblery a cross překladače pro platformu osmibitových domácích mikropočítačů Atari</h2>

<p>V&nbsp;článcích o vývojových prostředích a nástrojích určených pro
osmibitové domácí mikropočítače Atari [<a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">1</a>]
[<a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/">2</a>]
pochopitelně nemůžeme zapomenout ani na takzvané <i>cross compilery</i> a
<i>cross assemblery</i> (viz poznámka o českém překladu tohoto názvu umístěná
na konci této kapitoly). Tyto typy vývojových nástrojů jsou velmi často
používané i dnes, zejména v&nbsp;oblasti mikrořadičů, digitálních signálových
procesorů nebo mobilních telefonů (viz například projekt <a
href="http://scratchbox.org/">Scratchbox</a>). Ovšem tato technologie se ve
skutečnosti používala již na samotném začátku osmibitové éry (a to nejenom na
osmibitových domácích mikropočítačích, ale i na počítačích určených pro
průmyslová použití, což je zcela odlišná kategorie strojů, které ovšem mnohdy
používaly totožné typy mikroprocesorů).</p>

<img src="https://i.iinfo.cz/images/690/datasoft2-22.png" class="image-410812" alt="&#160;" width="672" height="480" />
<p><i>Obrázek 1: Platformovka Cohen's Towers ve variantě pro osmibitové
mikropočítače Atari.</i></p>

<p>Například vývoj her pro herní konzoli <i>Atari 2600</i> (<i>Atari Video
Computer System</i> neboli <i>Atari VCS</i>) byl ve skutečnosti prováděn na
minipočítači (a podle pamětníků se jednalo o poměrně propracované vývojové
nástroje &ndash; samozřejmě s&nbsp;ohledem na dobové možnosti). Ovšem i později
některé firmy vyvíjely profesionální software určený pro osmibitová Atari i pro
další osmibitové mikropočítače na výkonnějších strojích, kde se prováděl i
překlad, slinkování a příprava výsledného binárního obrazu pro cartridge či
dokonce přímo příprava disket (nebo jejich binárních obrazů). Poněkud
předběhněme: přesně tento princip je používán i v&nbsp;moderních cross
assemblerech a cross překladačích pro osmibitová Atari, které budou zmíněny
v&nbsp;navazujících kapitolách.</p>

<img src="https://i.iinfo.cz/images/690/datasoft2-37.png" class="image-410827" alt="&#160;" width="672" height="480" />
<p><i>Obrázek 2: Obrazovka ze hry Mr.Do! po konverzi na osmibitové domácí
mikropočítače. Původně se jednalo o hru určenou pro herní automaty, později
vyšla i pro prakticky všechny typy osmibitových mikropočítačů a to mj.&nbsp;i
díky možnosti cross překladu pro různé platformy.</i></p>

<p><div class="rs-tip-major">Poznámka: již minule jsme si řekli, že existuje i
český termín <i>křížový překladač</i>, ale musím se přiznat, že mi připadá jako
výsledek otrockého překladu a navíc se slovo &bdquo;cross&ldquo; přeložilo ve
špatném kontextu.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vznik moderních assemblerů má kořeny v&nbsp;padesátých letech</h2>

<p>Vývoj assemblerů je poměrně úzce spjatý s&nbsp;prvními počítači (tehdy
většinou mainframy), které používaly pro uložení programů nějakou formu
zapisovatelné či dokonce přepisovatelné paměti [<a
href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">3</a>].
Dobrým příkladem může být počítač <i>EDSAC</i> neboli <i>Electronic Delay
Storage Automatic Calculator</i>. Pro tento počítač byl v&nbsp;roce 1949, tedy
před sedmdesáti lety, vytvořen velmi jednoduchý assembler, v&nbsp;němž byly
mnemotechnické zkratky instrukcí zkráceny na jediný znak. Tento koncept byl
později rozšířen, takže se v&nbsp;pozdějších assemblerech setkáme
s&nbsp;mnemotechnickými zkratkami instrukcí se dvěma, třemi, čtyřmi či
s&nbsp;proměnným počtem znaků. Ovšem poměrně často se i u pozdějších assemblerů
setkáme s&nbsp;třípísmennými zkratkami; například u assemblerů pro
mikroprocesory Intel 8080, Intel 8086, MOS 6502 atd. (a tedy i u cross
assemblerů zmíněných v&nbsp;dnešním článku).</p>

<img src="http://i.iinfo.cz/images/587/pc-hist-62-1.jpg" width="116" height="102" alt="&#160;" />
<p><i>Obrázek 3: Telefonní volič pocházející zhruba z&nbsp;doby vzniku hry
OXO.</i></p>

<p><div class="rs-tip-major">Poznámka: s&nbsp;počítačem EDSAC zmíněným
v&nbsp;předchozím odstavci jsme se již na stránkách Rootu kdysi setkali. Právě
na tomto počítači totiž vznikla první skutečná počítačová hra. V&nbsp;tomto
roce 1952 totiž dopsal <i>Alexander S.&nbsp;Douglas</i> (tehdy student na
univerzitě v&nbsp;Cambridge) svoji disertační práci na téma problematiky
interakce člověka s&nbsp;počítačem (což tehdy pochopitelně byla dosti žhavá
novinka). V&nbsp;rámci své práce naprogramoval Douglas na počítači <i>EDSAC</i>
jednu z&nbsp;prvních skutečných počítačových her pojmenovanou <i>OXO</i>.
Jednalo se o zjednodušenou variantu piškvorků hranou na herní ploše mající
rozměry 3&times;3 políčka. Tato hra je v&nbsp;anglosaském světě známá právě pod
názvem OXO (název je samozřejmě složen z&nbsp;tvarů symbolů používaných ve
hře), popř.&nbsp;Tic-Tac-Toe nebo Noughts and Crosses. Zajímavé bylo ovládání
této hry, protože se jako ovladač využíval otočný telefonní volič, který si
pravděpodobně pamatujete z&nbsp;relativně nedávné éry používání telefonů (a
dálnopisů) s&nbsp;pulsní volbou.</div></p>

<a href="http://www.root.cz/obrazek/210817/"><img src="http://i.iinfo.cz/images/462/dev-8bit-13-prev.png" class="image-210817" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek 4: Assembler na mikropočítači Commodore C64 je již ukázkou
moderně pojatého assembleru. Povšimněte si třípísmenných mnemotechnických jmen
instrukcí, o nichž jsme se zmínili výše.</i></p>

<p>Ovšem vraťme se zpátky k&nbsp;prvním nástrojům, které dnes nazýváme
assemblery. V&nbsp;roce 1955 vznikl pro počítače řady IBM 650 systém
<i>SOAP</i> neboli celým jménem <i>Symbolic Optimal Assembly Program</i> (ať
již slovo &bdquo;optimal&ldquo; mělo znamenat cokoli). Autorem tohoto systému,
kde se již objevuje slovo <i>assembler</i>, byl Stan Poley. Právě v&nbsp;této
době, tj.&nbsp;zhruba v&nbsp;polovině padesátých let minulého století, se
assemblery rozšířily i na prakticky všechny ostatní typy mainframů vyráběných
osmi nejvýznamnějšími společnostmi v&nbsp;této oblasti (kterým se přezdívalo
&bdquo;IBM a sedm trpaslíků&ldquo;). Mezi tyto společnosti patřily firmy
Borroughs, UNIVAC, NCR, Control Data Corporation (CDC), Honeywell, RCA a
General Electric (GE).</p>

<a href="http://www.root.cz/obrazek/210818/"><img src="http://i.iinfo.cz/images/462/dev-8bit-14-prev.png" class="image-210818" width="283" height="270" alt="&#160;" /></a>
<p><i>Obrázek 5: Obal na kazetu se Zeus Assemblerem pro ZX Spectrum. Jedná se o
klasický nativní assembler &ndash; překlad probíhal na stejném stroji, pro
který byl určen samotný assembler.</i></p>

<p><div class="rs-tip-major">Poznámka: IBM 650, který začal být nabízen
v&nbsp;roce 1954, se stal velmi populárním počítačem a používal se i ve
školství. Tento počítač používal dekadický kód instrukcí i dat, což
zjednodušovalo práci na nízké úrovni (assembler, monitor atd.) a vybaven byl
pamětí založenou na magnetickém bubnu s&nbsp;kapacitou 1000 slov, 2000 slov či
při použití nejvyšší konfigurace 4000 slov.</div></p>

<a href="http://www.root.cz/obrazek/210819/"><img src="http://i.iinfo.cz/images/462/dev-8bit-15-prev.png" class="image-210819" width="360" height="270" alt="&#160;" /></a>
<p><i>Obrázek 6: Vývojové prostředí Zeus Assembleru (vývojovými prostředky
určenými pro ZX Spectrum se budeme zabývat v&nbsp;samostatném článku, který na
tento miniseriál navazuje).</i></p>

<p>Původní assemblery prováděly pouze základní činnost &ndash; překlad
mnemotechnických kódů instrukcí do strojového kódu. Takový překlad bylo možné
provést v&nbsp;jednom průchodu, což mj.&nbsp;znamenalo, že zdrojový kód mohl
být uložen na děrných štítcích nebo děrných páskách a výsledek opět mohl být
zaznamenán na stejná datová média. Spotřeba paměti pro překlad
(v&nbsp;angličtině se používá <i>assembly</i> neboli sestavení) byla
v&nbsp;tomto případě minimální a nebyla ani závislá na objemu zdrojového kódu.
Ovšem současně byly tyto assemblery dosti omezené, například neumožňovaly
použití návěstí (<i>label</i>) u cílů skoků. Tento nedostatek byl odstraněn u
další generace assemblerů podporujících takzvané <i>symbolické adresy</i>.
Proto se někdy assemblery nazývaly <i>jazyk symbolických adres</i> &ndash;
<i>JSA</i>.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti je možné i při jednom
průchodu vytvořit binární tvar programu, který však v&nbsp;některých případech
nebude přímo spustitelný, protože vyžaduje <i>linker</i>, který mj.&nbsp;doplní
chybějící cílové adresy skoků, volaných subrutin atd.</div></p>

<a href="http://www.root.cz/obrazek/210820/"><img src="http://i.iinfo.cz/images/462/dev-8bit-16-prev.png" class="image-210820" width="370" height="247" alt="&#160;" /></a>
<p><i>Obrázek 7: Jak se programovalo v&nbsp;assembleru si můžete vyzkoušet na
stránce <a href="http://6502asm.com">http://6502asm.com</a>. Zde je
implementován assembler i emulátor počítače založeného na osmibitovém
mikroprocesoru MOS 6502.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První makroassemblery</h2>

<p>Programům zmíněným <a href="#k02">ve druhé kapitole</a>, jejichž možnosti se
postupně vylepšovaly (například do nich přibyla podpora textových maker, řízení
víceprůchodového překladu, překlad využívající podmínky pro výběr větví kódu,
vytváření výstupních sestav s&nbsp;překládanými symboly, později i skutečné
linkování s&nbsp;knihovnami atd.), se začalo obecně říkat <i>assemblery</i> a
jazyku pro symbolický zápis programů pak <i>jazyk symbolických instrukcí</i> či
<i>jazyk symbolických adres</i> &ndash; <i>assembly language</i> (někdy též
zkráceně nazývaný assembler, takže toto slovo má vlastně dodnes oba dva
významy). Jednalo se o svým způsobem převratnou myšlenku: sám počítač byl
použit pro tvorbu programů, čímž odpadla namáhavá práce s&nbsp;tužkou a
papírem.</p>

<a href="http://www.root.cz/obrazek/211570/"><img src="http://i.iinfo.cz/images/80/a1-prev.png" class="image-211570" alt="&#160;" height="264" width="370" /></a>
<p><i>Obrázek 8: Úvodní obrazovka Atari Macro Assembleru. Tímto nástrojem jsme
se již v&nbsp;tomto seriálu zabývali, a to konkrétně <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">v&nbsp;tomto
článku</a>.</i></p>

<p>Zapomenout v&nbsp;tomto kontextu nesmíme ani na počítač <i>GE-635</i> a pro
něj vyvinutý makroassembler <i>GEMAP</i>, protože právě s&nbsp;využitím tohoto
prostředku vznikla první verze UNIXu. Vývoj tohoto operačního systému začal na
<i>PDP-7</i>, ovšem hardwarové možnosti tohoto počítače byly velmi omezené,
například kapacita operační paměti dosahovala pouze 8192 osmnáctibitových slov,
tj.&nbsp;osmnácti kilobajtů. Z&nbsp;tohoto důvodu byl originální UNIX (který
ovšem toto jméno ještě neměl) naprogramován v&nbsp;assembleru počítače
<i>PDP-7</i>, přičemž je zajímavé, že vlastní vývoj byl prováděn na jiném
(výkonnějším a taktéž mnohem dražším) počítači: již zmíněném 36bitovém
<i>GE-635</i> s&nbsp;využitím makroassembleru GEMAP. Po vytvoření objektového
kódu tímto assemblerem se (stále ještě na počítači <i>GE-635</i>) zapsalo
přeložené jádro i další pomocné programy na děrnou pásku, která se následně
vložila do čtecího zařízení na počítači <i>PDP-7</i>, odkud se systém
&bdquo;nabootoval&ldquo; patřičným příkazem zadaným z&nbsp;řídicího panelu
&ndash; máme zde tedy pěkný praktický příklad použití jak cross assembleru, tak
i cross překladače.</p>

<a href="http://www.root.cz/obrazek/211571/"><img src="http://i.iinfo.cz/images/322/a2-prev.png" class="image-211571" alt="&#160;" height="264" width="370" /></a>
<p><i>Obrázek 9: Vývojové prostředí Atari Macro Assembleru. Opět si povšimněte
použití třípísmenných mnemotechnických názvů instrukcí.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Svět cross assemblerů</h2>

<p>Svět cross assemblerů je poměrně rozsáhlý a má za sebou již několik desítek
let vývoje. Cross assemblery se typicky používají (a s&nbsp;velkou
pravděpodobností i budou nadále používat) pro vývoj aplikací pro čtyřbitové a
osmibitové mikrořadiče, zejména v&nbsp;případě čipů s&nbsp;malým množstvím
paměti RAM i ROM. Týká se to například některých řad mikrořadičů PIC a taktéž
(zdá se) nesmrtelnému čipu 8051 či řadě 68HC (to je však dáno především
historickými důvody, protože na trhu již existují mikrořadiče, které mají větší
výkon resp.&nbsp;menší spotřebu při použití stejné výrobní technologie).</p>

<a href="https://i.iinfo.cz/images/197/pc127-1.png"><img src="https://i.iinfo.cz/images/197/pc127-1-prev.png" width="338" height="270" alt="PIC"></a>
<p><i>Obrázek 10: Pro vývoj aplikací určených pro osmibitové mikrořadiče PIC
lze použít i mnoho open source nástrojů. Na tomto screenshotu jsou zobrazena
některá okna nástroje gpsim (simulátoru mikrořadičů). Už z&nbsp;principu
činnosti těchto nástrojů se jedná o cross assemblery.</i></p>

<p>U mikrořadičů, které obsahují více RAM/ROM je ovšem stále zřetelněji vidět
příklon k&nbsp;použití vyšších programovacích jazyků (u osmibitových čipů řady
<a
href="https://www.root.cz/clanky/osmibitove-mikroradice-s-jadry-s08-a-rs08/">S08
a RS08</a> nalezneme běžné C, u šestnáctibitových čipů <a
href="https://www.root.cz/clanky/sestnactibitove-mikroradice-ti-rady-msp430/">MSP430</a>
je <a
href="https://doc.rust-lang.org/nightly/rustc/platform-support.html">dokonce
podporován Rust</a>, a u 32bitových mikrořadičů, kde dnes jasně vede
architektura ARM, konkrétně v&nbsp;případě malých mikrořadičů <a
href="https://www.root.cz/clanky/architektura-mikroradicu-s-jadry-arm-cortex-m0-a-arm-cortex-m0/">Cortex-M0
a Cortex-M0+</a>, lze použít i mnohé další jazyky). V&nbsp;takovém případě se
používají <i>cross compilery</i>; vývoj tedy neprobíhá přímo na daném
čipu/mikrořadiči).</p>

<img src="https://i.iinfo.cz/images/47/arm5.jpg" class="image-222279" alt="Cortex-M0" height="234" width="390">
<p><i>Obrázek 11: Čipy XMC4000 založené na jádru Cortex-M0.<br> Autor původní
fotky: Davewave88.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Cross assemblery pro mikroprocesor 6502</h2>

<p>V&nbsp;následujících kapitolách se budeme věnovat cross assemblerům, které
je možné použít pro tvorbu aplikací určených pro osmibitové domácí
mikropočítače Atari. Ve skutečnosti jsou však některé dále zmíněné assemblery
pojaty obecněji, protože mnohé z&nbsp;nich je možné použít i například pro
aplikace určené pro konkurenční mikropočítače Commodore C64 či C128, osobní
mikropočítače Apple II (někdy dokonce i Apple IIgs), osmibitové mikropočítače
vyráběné společností Acorn, osmibitové herní konzole atd. Důvod takové
univerzálnosti těchto assemblerů je prostý &ndash; všechny zmíněné
mikropočítače obsahují nějakou variantu osmibitového mikroprocesoru <i>MOS
6502</i> popř.&nbsp;8/16bitového mikroprocesoru <i>65816</i>, takže assemblery
mohou produkovat &bdquo;kompatibilní strojový kód&ldquo;. Ten pochopitelně
nebude kompatibilní se všemi ostatními podpůrnými čipy, které jsou mezi
zmíněnými počítači a herními konzolami naprosto rozdílné, ovšem assemblery
stejně uživatele od HW daného počítače neodstiňují a ani odstiňovat nemají
(tj.&nbsp;například kód určený pro práci s&nbsp;čipem ANTIC bude použitelný jen
v&nbsp;počítačích Atari, dtto pro VIC-II a počítače Commodore).</p>

<img src="https://i.iinfo.cz/images/657/8203.jpg" alt="" height="289" width="450">
<p><i>Obrázek 12: Osmibitová herní konzole Nintendo Entertainment System (NES)
je přímým předchůdcem SNESu a obsahuje čip do značné míry kompatibilní
s&nbsp;MOS 6502.</i></p>

<p><div class="rs-tip-major">Poznámka: u dále popsaných cross assemblerů se
skutečně setkáme s&nbsp;tím, že jsou podporovány různé cílové architektury.
Typicky se jedná o kombinaci osmibitové Atari + herní konzole Atari 5200, dále
je mnohdy podporována i herní konzole Atari 2600, ovšem mnohdy jsou podporovány
i počítače Commodore, Acorn BBC Micro a popř.&nbsp;i různé herní
konzole.</div></p>

<img src="https://i.iinfo.cz/images/605/pc118sada1-2.jpg" alt="" height="463" width="400">
<p><i>Obrázek 13: Dobový plakát s počítačem Acorn BBC Micro, což byl předchůdce
počítače Acorn Archimedes. I tento počítač byl vybaven mikroprocesorem MOS
6502.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Jednoprůchodové versus víceprůchodové assemblery</h2>

<p>Assemblery (dnes v&nbsp;naprosté většině případů pochopitelně
makroassemblery) můžeme rozdělit podle mnoha hledisek. Zejména v&nbsp;minulosti
existovalo jedno důležité rozdělení, a to konkrétně na assemblery s&nbsp;jedním
průchodem (<i>one pass</i>) a na assemblery se dvěma průchody (<i>two pass</i>)
popř.&nbsp;i větším množstvím průchodů (<i>multi pass</i>). Interně se
jednoprůchodové a víceprůchodové assemblery odlišují, protože musí být
postaveny na odlišné logice práce se symboly a adresami.</p>

<p>Nejčastěji se setkáme s&nbsp;dvouprůchodovými překladači. V&nbsp;prvním
průchodu se čte zdrojový kód a interně se vytváří tabulka symbolů a
popř.&nbsp;i tabulka literálů (u symbolů, které prozatím nejsou definovány, se
zapisuje pouze jejich název a nikoli adresa &ndash; ta se doplní později). Při
této činnosti se neustále pracuje s&nbsp;čítačem lokací (což je vlastně obdoba
PC v&nbsp;runtime). A u makroassemblerů se provádí další činnosti &ndash;
expanze maker, rozhodnutí, která část kódu se prochází atd. Ve druhém průchodu
se již za symboly doplňují jejich konkrétní adresy a s&nbsp;využitím tabulky
operačních kódů se generuje výsledný objektový kód popř.&nbsp;přímo strojový
(spustitelný) kód.</p>

<p><div class="rs-tip-major">Poznámka: často se setkáme s&nbsp;tvrzením, že
první fáze provádí <i>analýzu</i> a druhá <i>syntézu</i>, což je pěkné
shrnutí.</div></p>

<p>Assemblery jednoprůchodové naopak již při prvním čtení zdrojového kódu
vytváří kód strojový. Ovšem u těch symbolů, u nichž není známá adresa, se opět
vytváří tabulka, tentokrát adres, kde je symbol použit. Tato tabulka je při
nalezení konkrétní adresy symbolu procházena a assembler se musí vrátit ve
strojovém kódu zpět a doplnit tuto adresu. Interně se tedy jedná o poněkud
složitější operaci, která vyžaduje použití několika triků a není tak
univerzální, jako překladače dvouprůchodové.</p>

<p>Proč však bylo dělení na jednoprůchodové a víceprůchodové assemblery tak
důležité? Souviselo to s&nbsp;tím, že (zejména u nativních assemblerů, tedy
nikoli u cross assemblerů) bylo nutné zdrojový kód postupně načítat
z&nbsp;úložného zařízení (typicky z&nbsp;diskety) a mezivýsledek překladu
mnohdy taktéž ukládat na disketu a ve druhém průchodu znovu tento mezivýsledek
načítat. To byla pochopitelně časově náročná operace, kterou se u
jednoprůchodových assemblerů podařilo zredukovat.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Specifika počítačů Atari z&nbsp;hlediska cross assemblerů</h2>

<p>Všechny dále zmíněné assemblery dokážou ze zdrojového kódu (ten se pro větší
zmatek nazývá taktéž <i>assembler</i>) vytvořit takzvaný <i>strojový kód</i>,
který může programátor nějakým způsobem dále využít, například ve formě
podprogramu volaného z&nbsp;jiné aplikace atd. (pozor je ovšem nutné dát na to,
že v&nbsp;případě mikroprocesoru MOS 6502 bude tento strojový kód nutné umístit
na konkrétní adresu v&nbsp;paměti &ndash; nejde snadno <i>realokovat</i>). To
ovšem není vše, protože cross assemblery by měly v&nbsp;co největší možné míře
usnadnit a samozřejmě taktéž urychlit vývoj. Proto mnohé z&nbsp;těchto nástrojů
kromě strojového kódu dokážou upravit <i>obraz diskety</i> (přidají do obrazu
nový soubor s&nbsp;přeloženým objektovým kódem) popř.&nbsp;přímo <i>obraz stavu
počítače</i> (viz obě poznámky pod tímto odstavcem).</p>

<p><div class="rs-tip-major">Poznámka<sup>1</sup>: <i>obrazem diskety</i> se ve
světě emulátorů osmibitových mikropočítačů Atari rozumí soubory, které skutečně
obsahují binární obraz diskety. Disketová jednotka, resp.&nbsp;přesněji řečeno
i více disketových jednotek, je totiž v&nbsp;emulátorech počítačů Atari
představována právě těmito soubory. Jen na okraj &ndash; právě z&nbsp;tohoto
důvodu má většina obrazů disket totožnou velikost, protože obsahují binární
obraz všech sektorů, tedy i sektorů prázdných. Pokud daný assembler dokáže
zapsat strojový kód na obraz diskety, bude tento kód představován novým
souborem, který lze v&nbsp;DOSu načíst příkazem <strong>L</strong> (nebo ho
jinak využít přímo v&nbsp;rámci dané aplikace &ndash; všechny aplikace mají
přístup k&nbsp;zařízení <strong>D1</strong> až <strong>D8</strong> a mohou tedy
přistupovat k&nbsp;obsahu diskety).</div></p>

*** image ***
<p><i>Obrázek 14: Namapování souborů s&nbsp;obrazy disket na konkrétní diskety
v&nbsp;emulovaných disketových jednotkách.</i></p>

<p><div class="rs-tip-major">Poznámka<sup>2</sup>: <i>obraz stavu počítače</i>
je další typ souboru, který skutečně obsahuje stav emulovaného počítače Atari
v&nbsp;daný časový okamžik. Do značné míry se tento soubor podobá souboru,
který se vytvoří na běžném PC v&nbsp;případě hibernace. Emulátory počítačů
Atari umožňují vytvořit stavový soubor kdykoli, například během hry před
obtížnou pasáží, popř.&nbsp;při vývoji pro snadný návrat k&nbsp;danému stavu
(při použití BASICu se samozřejmě zachová i zdrojový kód atd.). A vzhledem
k&nbsp;tomu, že strojový kód vytvořený assemblerem je umístěn na konkrétní
adresu (řekněme na šestou stránku paměti, tj.&nbsp;od adresy 1536 do adresy
1791), může assembler přímo změnit příslušnou oblast paměti ve stavovém souboru
a po obnovení stavu bude tento strojový kód ihned dostupný a funkční &ndash;
vlastně se jedná o <i>hot-plug</i> na steroidech :-)</div></p>

*** image ***
<p><i>Obrázek 15: Uložení stavu počítače lze v&nbsp;emulátoru skutečně provést
naprosto kdykoli.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Cross assembler ATasm</h2>

<p>Prvním cross assemblerem, s&nbsp;nímž se dnes seznámíme, je makro assembler
nazvaný <i>ATasm</i>. Tento assembler je navržen takovým způsobem, aby byl
v&nbsp;co největší možné míře kompatibilní s&nbsp;Mac/65 (viz první článek).
<i>ATasm</i> je naprogramovaný v&nbsp;jazyku C a ovládá se z&nbsp;příkazové
řádky, tak jako běžné assemblery a překladače. Mj.&nbsp;i z&nbsp;tohoto důvodu
ho je možné přeložit a používat na jakékoli platformě vybavené překladačem ANSI
C (dokumentace zmiňuje GNU C, ovšem použít je možné i další překladače).
Důležité je, že soubory se strojovým kódem, které <i>ATasm</i> produkuje, lze
použít několika možnými způsoby. Základem je samozřejmě klasický objektový
soubor, který je dále použitelný například při uložení na určitou (předem
známou) adresu v&nbsp;počítači. Příkladem mohou být podprogramy typicky
ukládané do šesté stránky paměti.</p>

<img src="https://i.iinfo.cz/images/488/mac65-1.png" class="image-446023" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 16: Úvodní obrazovka MAC/65 verze 1.02.</i></p>

<p>Ovšem kromě toho je možné výsledek překladu uložit na obraz diskety pod
určitým jménem (strojový kód se pak zobrazí v&nbsp;DOSu a lze ho načíst
příkazem <strong>L</strong>). Podporovány jsou dva formáty &ndash; XFD i ATR
(oba podporované většinou současných emulátorů). A navíc dokáže <i>Atasm</i>
upravit přímo <i>stavový soubor počítače</i>, což je asi nejrychlejší způsob,
jak výsledek překladu otestovat. Jako každý moderní assembler podporuje
<i>Atasm</i> makra a podmíněný překlad.</p>

<img src="https://i.iinfo.cz/images/488/mac65-6.png" class="image-446028" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 17: MAC/65 &ndash; po opuštění debuggeru příkazem
<strong>Q</strong> je možné pokračovat ve vývoji, například si nechat vypsat
uživatelem zapsaný kód příkazem <strong>PRINT</strong>, zde bez čísel
řádků.</i></p>

<p>Příklad zdrojového textu kompatibilního s&nbsp;ATasmem:</p>

<pre>
        symbol .= table
        value = 10
        wsync = $D40A

        *=$600
DLI
        pha                     ; this is a test of comments
        lda #8+3*2
        sta WSYNC
        sta $d000
        pla
        rti

         .MACRO VDLI 
         ldy # &lt;%1
         ldx # &gt;%1
         lda #$c0
         sty $0200
         stx $0201
         sta $d40e
         .ENDM 
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Makra aneb první krok k&nbsp;vysokoúrovňovým jazykům</h2>

<p>Díky knihovním makrům ovšem může text zapsaný v&nbsp;assembleru <i>ATasm</i>
vypadat vysokoúrovňově:</p>

<pre>
1000     .TITLE "A SAMPLE PROGRAM USING IOMAC.LIB"
1010     .OPT NO LIST
1020     .INCLUDE sysequ.m65
1030     .INCLUDE iomac.lib
1040     .OPT LIST
1050     .PAGE "   [end of equates and libraries...begin code]"
1060     .OPT NO MLIST
1070     *=  $7000   ; an arbitrary location
1080 ;
1090 SAMPLE
1100     JMP AROUND  ; skip buffers, etc.
1110 ;
1120 BUFFER *= *+256
1130 ;
1140 MESSAGE1 .BYTE +$80," This is a test of the sample program  Type your name here : "
1150     .BYTE " "
1160 M1LENGTH = *-MESSAGE1
1170 MESSAGE2 .BYTE "Hi there, "
1180 M2LENGTH = *-MESSAGE2
1190 ;
1200 ; BEGIN ACTUAL CODE
1210 ;
1220 AROUND
1230      OPEN  3,8,0,"P:"
1240      BPUT  0,MESSAGE1,M1LENGTH
1250      INPUT  0,BUFFER
1260      PRINT  0
1270      BPUT  0,MESSAGE2,M2LENGTH
1280      PRINT  0,BUFFER
1290      PRINT  3,"Also, we send it to the printer..."
1280      BPUT  3,MESSAGE2,M2LENGTH
1310      PRINT  3,BUFFER
1320      PRINT  0,"That's all folks"
1330      CLOSE  3
1340     RTS 
1350     .OPT NO LIST
1360     .END 
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto zdrojovém kódu vlastně není
přímo použita ani jedna instrukce!</div></p>

<p>Vše je zajištěno díky knihovnímu souboru <strong>iomac.lib</strong>
s&nbsp;mnoha užitečnými makry, například:</p>

<pre>
2310 ; MACRO:  OPEN
2320 ;
2330 ;  FORM:  OPEN ch,aux1,aux2,filespec
2340 ;
2350 ; ch is given as in the @CH macro
2360 ; aux1 and aux2 are given as in the @CV macro
2370 ; filespec is given as in the @FL macro
2380 ;
2390 ; will attempt to open the given file name on
2400 ; the given channel, using the open "modes"
2410 ; specified by aux1 and aux2
2420 ;
2430     .MACRO OPEN 
2440     .IF %0&lt;&gt;4
2450       .ERROR "OPEN: wrong number of arguments"
2460       .ELSE 
2470       .IF %4&lt;256
2480          XIO  COPN,%1,%2,%3,%$4
2490         .ELSE 
2500          XIO  COPN,%1,%2,%3,%4
2510         .ENDIF 
2520       .ENDIF 
2530     .ENDM 
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si podmínek, což jsou
konstrukce vyhodnocované v&nbsp;době překladu.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Cross assembler ca65</h2>

<p>Dalším cross assemblerem, s&nbsp;nímž se dnes alespoň ve stručnosti
seznámíme, je assembler nazvaný <i>ca65</i>. Jedná se o assembler, který je
součástí projektu <i>cc65</i>, tedy překladače programovacího jazyka C pro
mikroprocesory MOS 6502, 65C02 i pro šestnáctibitový procesor 65816 (který
ovšem nabízí režim zpětné kompatibility s&nbsp;MOS 6502). Ve skutečnosti je
ovšem možné <i>ca65</i> použít samostatně &ndash; na <i>cc65</i> závislý není
(ve skutečnosti je závislost právě opačná). Opět se jedná o makro assembler,
jenž je zajímavý tím, že je jednoprůchodový, na rozdíl od přece jen častějších
dvouprůchodových assemblerů.</p>

<p>Následuje příklad rutiny naprogramované pro ca65:</p>

<pre>
Label:                          ; A label and a comment
        lda     #$20            ; A 6502 instruction plus comment
L1:     ldx     #$20            ; Same with label
L2:     .byte   "Hello world"   ; Label plus control command
        mymac   $20             ; Macro expansion
        MySym = 3*L1            ; Symbol definition
MaSym   = Label                 ; Another symbol
</pre>

<p>V&nbsp;režimu 65816 je k&nbsp;dispozici několik jmenných aliasů instrukcí,
které se snaží sblížit původní jmenné konvence s&nbsp;novými instrukcemi, které
v&nbsp;MOS 6502 neexistují:</p>

<table>
<tr><td>CPA</td><td>CMP</td></tr>
<tr><td>DEA</td><td>DEC A</td></tr>
<tr><td>INA</td><td>INC A</td></tr>
<tr><td>SWA</td><td>XBA</td></tr>
<tr><td>TAD</td><td>TCD</td></tr>
<tr><td>TAS</td><td>TCS</td></tr>
<tr><td>TDA</td><td>TDC</td></tr>
<tr><td>TSA</td><td>TSC</td></tr>
</table>

<p>Podporovány jsou i některé nedokumentované či nesmyslné instrukce, které
ovšem MOS 6502 zpracovává, neboť jeho dekodér instrukcí nezachytí nesmyslné
operační znaky:</p>

<table>
<tr><td>ALR</td><td>A:=(A and #{imm})/2</td></tr>
<tr><td>ANC</td><td>A:=A and #{imm}</td></tr>
<tr><td>ARR</td><td>A:=(A and #{imm})/2</td></tr>
<tr><td>AXS</td><td>X:=A and X-#{imm}</td></tr>
<tr><td>DCP</td><td>{adr}:={adr}-1; A-{adr}</td></tr>
<tr><td>ISC</td><td>{adr}:={adr}+1; A:=A-{adr}</td></tr>
<tr><td>LAS</td><td>A,X,S:={adr} and S</td></tr>
<tr><td>LAX</td><td>A,X:={adr}</td></tr>
<tr><td>RLA</td><td>{adr}:={adr}rol; A:=A and {adr}</td></tr>
<tr><td>RRA</td><td>{adr}:={adr}ror; A:=A adc {adr}</td></tr>
<tr><td>SAX</td><td>{adr}:=A and X</td></tr>
<tr><td>SLO</td><td>{adr}:={adr}*2; A:=A or {adr}</td></tr>
<tr><td>SRE</td><td>{adr}:={adr}/2; A:=A xor {adr}</td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Cross assembler xa65</h2>

<p>Dalším cross assemblerem, jenž si dnes popíšeme, je nástroj nazvaný
jednoduše <i>xa</i> popř.&nbsp;<i>xa65</i>. Jedná se o univerzální assembler
podporující všechny varianty mikroprocesorů MOS 6502 a taktéž šestnáctibitový
čip 65816. Vzhledem k&nbsp;tomu, že se jedná o univerzální assembler, je
použitelný například i pro tvorbu aplikací pro herní konzole osazené čipem 6502
atd. &ndash; na druhou stranu ovšem postrádá specializované vlastnosti, které
by ocenili programátoři s&nbsp;cílem tvorby aplikací pro osmibitová Atari
&ndash; není tedy podporován ani zápis výsledného kódu na obraz diskety, ani
například přímá úprava stavového souboru.</p>

<p>Mezi zajímavé vlastnosti assembleru <i>xa</i> patří preprocesing odvozený od
céčka (resp.&nbsp;jeho preprocesoru), podpora pro pseudoinstrukce, možnost
generování objektového kódu, který je možné dále slinkovat například
s&nbsp;výsledkem překladu céčkem a dokonce i bloková struktura, která ovlivňuje
viditelnost lokálních symbolů (vhodné pro rozsáhlejší aplikace).
K&nbsp;assembleru <i>xa</i> nepřímo patří i nástroj <i>dxa</i>, což je
disassembler.</p>

<p>Příkazy preprocesoru podporované <i>xa</i>:</p>

<table>
<tr><td>#include "filename"</td></tr>
<tr><td>#echo comment</td></tr>
<tr><td>#print expression</td></tr>
<tr><td>#printdef DEFINED</td></tr>
<tr><td>#define DEF text</td></tr>
<tr><td>#ifdef DEF</td></tr>
<tr><td>#else</td></tr>
<tr><td>#endif</td></tr>
<tr><td>#ifndef DEF</td></tr>
<tr><td>#if expression</td></tr>
<tr><td>#iflused label</td></tr>
<tr><td>#ifldef label</td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. To nejlepší na konec &ndash; Mad-Assembler (MADS)</h2>

<p>Nejlepším cross assemblerem pro domácí osmibitové mikropočítače Atari je
<i>MAD Assembler</i>. Ten je naprogramován &ndash; na rozdíl od všech
assemblerů zmíněných v&nbsp;předchozích kapitolách &ndash; v&nbsp;Delphi a
nikoli v&nbsp;jazyku C. Ovšem  díky tomu, že projekt <i>Free Pascal</i> dokáže
překládat i zdrojový kód naprogramovaný v&nbsp;Delphi (což je rozšíření
původního Object Pascalu, který vznikl z&nbsp;dialektu Pascalu společnosti
Borland), je možné <i>MAD Assembler</i> přeložit a zcela bez problémů používat
i na Linuxu. Způsobu překladu tohoto assembleru právě pro Linux se ostatně
věnujeme <a href="#k19">ve třetím dodatku</a> k&nbsp;dnešnímu článku. MAD
Assembler se volá z&nbsp;příkazového řádku, ovšem existuje pro něj například <a
href="https://www.wudsn.com/index.php/ide">plugin pro Eclipse</a>, který
umožňuje většinu operací provádět přímo z&nbsp;tohoto integrovaného vývojového
prostředí.</p>

<p>MAD Assembler dokáže gnerovat různé formáty souborů s&nbsp;přeloženým
strojovým kódem. Užitečný je především formát XEX, který je přímo zpracovatelný
prakticky všemi současnými emulátory počítačů Atari &ndash; tvořený program je
tedy možné velmi rychle spustit a otestovat.</p>

<p>I MAD Assembler, podobně jako ca65, podporuje některé nelegální
instrukce:</p>

<pre>
ASO   RLN   LSE   RRD   SAX   LAX   DCP   ISB
ANC   ALR   ARR   ANE   ANX   SBX   LAS   SHA
SHS   SHX   SHY   NPO   CIM
</pre>

<p>Popř.&nbsp;instrukce specifické pro 16bitový mikroprocesor 65816:</p>

<pre>
STZ   SEP   REP   TRB   TSB   BRA   COP   MVN  
MVP   PEA   PHB   PHD   PHK   PHX   PHY   PLB  
PLD   PLX   PLY   RTL   STP   TCD   TCS   TDC  
TSC   TXY   TYX   WAI   WDM   XBA   XCE   INA
DEA   BRL   JSL   JML
</pre>

<p>Příklad maker:</p>

<pre>
.macro instLO inst, src
    .if (.match (.left (1, {src}), #))
        inst #&lt;(.right (.tcount ({src})-1, {src}))
    .else
        inst src
    .endif
.endmacro
&nbsp;
&nbsp;
&nbsp;
.macro stax dst
        sta dst
        stx dst+1
.endmacro
</pre>

<p>Příklad části programu napsaného v&nbsp;MADsu:</p>

<pre>
.proc gr8
        ldx #$60
        lda #CLOSE
        jsr xcio
&nbsp;
        lda #8+16
        sta ioaux2,x
        lda #0
        sta ioaux1,x
        mwa #devstr ioadr,x
        lda #OPEN
        jsr xcio
&nbsp;
        lda SAVMSC
        ldx SAVMSC+1
        ldy #0
&nbsp;
loop:
        sta grLinL,y
        clc
        adc #40
        pha
        txa
        sta grLinH,y
        adc #0
        tax
        pla
&nbsp;
        iny
        cpy #192
        bne loop
&nbsp;
        ldy #0
        lda #128
        ldx #0
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Svět cross překladačů</h2>

<p>Kromě cross assemblerů vzniklo pro domácí osmibitové mikropočítače Atari i
několik cross překladačů (<i>cross compiler</i>). Konceptem se cross překladače
neliší od cross assemblerů, protože cíl je stále stejný &ndash; umožnit vývoj
aplikací na počítačích s&nbsp;většími možnostmi (dostupná paměť, výpočetní
výkon, ...), než mají cílové počítače, až výsledný strojový kód bude přenesen a
spuštěn na Atari. Zatímco u cross assemblerů je důvodem pro jejich existenci
zejména mnohem větší rychlost překladu (a samozřejmě možnost používat textové
editory a IDE s&nbsp;vyšším rozlišením, než poskytuje čip Antic), u cross
překladačů je mnohdy jejich existence nutná z&nbsp;toho důvodu, že samotný
překladač je tak složitý a velký, že se nemusí vejít do operační paměti
osmibitových Atari, popř.&nbsp;se do paměti nevejdou tabulky symbolů (<i>symbol
tables</i>) vytvářené v&nbsp;čase překladu (<i>compile time</i>).</p>

<p>Dobrou ukázku rozdílu mezi možnostmi nativních překladačů a cross překladačů
můžeme vidět na příkladu programovacího jazyka C. Nativní překladač jazyka C
pro osmibitová Atari (tento překladač se jmenuje <i>Deep Blue C</i>) je nejenom
relativně pomalý, ale navíc je jeho použití na počítačích Atari limitováno jak
poskytovanými vlastnostmi (ne všechny konstrukce z&nbsp;C jsou implementovány
nebo implementovány plně), tak i tím, že ve standardní znakové sadě Atari se
nevyskytují znaky pro složené závorky &bdquo;{&ldquo; a &bdquo;}&ldquo;, které
se nahrazují jinými znaky. Namísto toho cross překladač C již může být plně
kompatibilní s&nbsp;ANSI C (C89) popř.&nbsp;dokonce s&nbsp;C99 (teoreticky,
protože tohoto cíle nebylo dosaženo).</p>

<p><div class="rs-tip-major">Poznámka: namísto znaků &bdquo;{&ldquo; a
&bdquo;}&ldquo; se v&nbsp;Deep Blue C používaly sekvence &bdquo;$(&ldquo; a
&bdquo;$)&ldquo;, takže se program typu Hello world zapisoval takto:</div></p>

<pre>
main()
$(
    printf("Hello World!");
$)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. cc65</h2>

<p>Prvním cross překladačem, s&nbsp;nímž se v&nbsp;dnešním článku seznámíme, je
překladač programovacího jazyka C, který se jmenuje <i>cc65</i>. Ve skutečnosti
se však nejedná pouze o čistý překladač céčka, ale o sadu dalších vývojářských
nástrojů, mezi něž patří i <a href="#k10">výše zmíněný</a> cross assembler
<i>ca65</i>, dále linker <i>ld65</i>, disassembler <i>da65</i>, simulátor
procesorů 6502 <i>sim65</i> atd. Tento překladač je možné použít nejenom pro
tvorbu aplikací pro osmibitové mikropočítače Atari, ale i pro Commodore (VIC20,
C64, C128 atd.), osmibitové mikropočítače řady Apple II, herní konzoli NES,
TurboGrafx-16 atd.</p>

<p>cc65 do určité míry odpovídá ISO standardu jazyka C (a tím pádem i původnímu
ANSI standardu, dokonce je podporováno několik vlastností z&nbsp;C99); standard
je vnucen přepínačem <strong>--standard</strong>.  Existuje však několik
rozdílů a nedostatků cc65, mezi něž patří neexistence datových typů
<i>float</i> a <i>double</i> (a tím pádem i celá část céčka, která předepisuje
konverze atd.). Dále existuje omezení funkcí &ndash; funkce nemohou vracet
struktury ani unie; struktury dokonce není možné předávat hodnotou (což ale
většinou nevadí, právě naopak). Kromě toho je sice možné použít modifikátor
<strong>volatile</strong>, ovšem ten nemá žádný podstatný význam (což je
v&nbsp;případě mikroprocesorů MOS 6502 a jejich možností pochopitelné).</p>

<p>Naopak mezi rozšíření cc65 oproti standardu patří podpora bloků psaných
v&nbsp;assembleru, podpora pseudoproměnných A a AX (což je primární registr
mikroprocesoru, tedy akumulátor, v&nbsp;případě AX rozšířený na šestnáct bitů
přes registr X). Podporovány jsou konstanty zapsané ve dvojkové soustavě
(0b101) a použít lze i počítaná <strong>goto</strong> (což je částečně převzato
z&nbsp;GCC).</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Atalan</h2>

<p>Dalším cross překladačem, o němž se musíme v&nbsp;rámci popisu vývojových
nástrojů pro osmibitová Atari zmínit, je překladač programovacího jazyka
<i>Atalan</i>, jehož autorem je kamarád atarista <i>Rudla Kudla</i>. Atalan je,
ostatně jak již jeho název naznačuje, jazyk určený primárně pro použití na
osmibitových Atari (pro počítače vybavené MOS 6502), ve skutečnosti ovšem navíc
dokáže generovat strojový kód pro mikroprocesory Z80. Jedná se o poměrně
rozsáhlý a propracovaný programovací jazyk (navíc jednoduchý na naučení), jemuž
bude kvůli rozsahu věnován samostatný článek.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Doplnění: makro assemblery pro osobní mikropočítače s&nbsp;mikroprocesorem Motorola 68000</h2>

<p>Zastavme se na chvíli u makro assemblerů určených pro počítače
s&nbsp;mikroprocesorem Motorola 68000. Mikropočítače <i>Amiga</i> se, podobně
jako například i konkurenční počítače <i>Atari ST</i>, velmi často používaly
jako herní stroje a navíc se zde rozvinula i &bdquo;subkultura&ldquo; vývojářů,
kteří se zabývali programováním audiovizuálních dem. U těchto typů aplikací
bylo velmi důležité, aby bylo například vykreslovací jádro co nejrychlejší,
takže se programátoři velmi často uchylovali k&nbsp;použití assembleru. Tímto
termínem se, jak již víme, poněkud nepřesně označuje jak příslušný jazyk
&ndash; česky jazyk symbolických adres nebo jazyk symbolických instrukcí, tak i
překladač, který zápis v&nbsp;assembleru převede do (binárního) strojového kódu
cílového procesoru.</p></p>

<p>Assemblery byly na počítačích <i>Amiga</i> a <i>Atari ST</i> mezi
programátory poměrně populární i díky tomu, že instrukční kód mikroprocesorů
<i>Motorola 68000</i> byl do velké míry ortogonální, obsahoval relativně velké
množství registrů (univerzální datové registry D0 až D7 a adresové registry A0
až A7) a navíc bylo možné používat i takové adresovací režimy, které
korespondovaly s&nbsp;konstrukcemi používanými ve vyšších programovacích
jazycích (přístupy k&nbsp;prvkům polí, přístup k&nbsp;lokálním proměnným
umístěných v&nbsp;zásobníkovém rámci, autoinkrementace adresy atd.). Podívejme
se na jednoduchý příklad rutiny (originál najdete <a
href="http://www.virtualdub.org/blog/pivot/entry.php?id=84">zde</a>, která
sečte všechny prvky (16bitové integery &ndash; načítá se vždy jen 16bitové
slovo) v&nbsp;poli. V&nbsp;tomto příkladu se používá autoinkrementace adresy
při adresování prvků polí a taktéž instrukce <strong>DBRA</strong> provádí dvě
činnosti &ndash; snížení hodnoty registru o jedničku a skok v&nbsp;případě, že
je výsledek nenulový:</p>

<pre>
    moveq #0, d0      ; potřebujeme vynulovat horních 16 bitů d0
    moveq #0, d1      ; mezivýsledek
loop:
    move.w (a0)+, d0  ; horních 16 bitů d0 je pořád nastaveno na 0
    add.l d0, d1
    dbra d2, loop     ; d2 je použit jako počitadlo
</pre>

<p>Jedním z&nbsp;populárních assemblerů dostupných pro mikropočítače
<i>Amiga</i> byl assembler nazvaný <i>ASM-One Macro Assembler</i>. Autorem
tohoto assembleru je <i>Rune-Gram Madsen</i>, který tento nástroj
v&nbsp;průběhu roku 1990 vytvořil za pouhé čtyři týdny. Jednalo se o komerčně
dostupný nástroj prodávaný společností <i>DMV Verlag</i> (Německo) za přibližně
139 marek. Ovšem počet reálně prodaných kusů tohoto nástroje byl poměrně nízký
&ndash; prodalo se pouze přibližně 500 kopií první verze; ovšem na tomto místě
je nutné poznamenat, že <i>ASM-One</i> nebyl jedinou aplikací, která měla
problémy s&nbsp;prodejem. Podobný osud totiž potkal například i mnoho her, což
je jeden z&nbsp;důvodů, proč některé softwarové firmy postupně přešly na jiné
platformy.</p>

<p>Dnes si většinou pod pojmem &bdquo;assembler&ldquo;, představujeme nástroj
spouštěný z&nbsp;příkazového řádku, který překládá zdrojové kódy napsané
v&nbsp;jazyku symbolických adres do objektového (binárního) kódu,
popř.&nbsp;přímo vytváří spustitelné soubory. Ovšem <i>ASM-One Macro
Assembler</i> se od tohoto chápání assemblerů liší, protože se jednalo o
plnohodnotné integrované vývojové prostředí vybavené textovým editorem,
samotným assemblerem, monitorem a taktéž debuggerem. Celé prostředí bylo přitom
naprogramované taktéž v&nbsp;assembleru a velikost binárního balíčku
nepřesahovala devadesát kilobajtů.</p>

<p>I pro Atari ST vznikla celá řada assemblerů, například A-SEKA, Macro
Assembler, DevpacST, GST-ASM atd. Nejrychlejším assemblerem je A-SEKA, který
dokáže přeložit přibližně 30000 řádků kódu za sekundu (a to na čipu
s&nbsp;taktovací frekvencí osm MHz &ndash; nikoli GHz). Naproti tomu GST-ASM je
doplněn o programátorský editor, podporuje pochopitelně makra, připojování
dalších souborů (<strong>include</strong>) atd.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Příloha 1: instalace cross assembleru ATasm</h2>

<p>Výše zmíněné cross assemblery a cross překladače většinou nejsou dostupné
v&nbsp;repositářích linuxových distribucí, takže je nutné jejich ruční překlad
a instalace. Je to však většinou jednoduchá a naprosto bezproblémová
operace.</p>

<p>Nejprve si ukažme překlad a instalaci ATasmu na Linuxu.</p>

<p>Stažení archivu se zdrojovými kódy ATasmu verze 1.09:</p>

<pre>
$ <strong>wget https://atari.miribilist.com/atasm/atasm109.zip</strong>
&nbsp;
--2021-05-07 18:21:57--  https://atari.miribilist.com/atasm/atasm109.zip
Resolving atari.miribilist.com (atari.miribilist.com)... 64.90.43.178
Connecting to atari.miribilist.com (atari.miribilist.com)|64.90.43.178|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 397661 (388K) [application/zip]
Saving to: ‘atasm109.zip’
&nbsp;
atasm109.zip   100%[==============================================================================&gt;] 388.34K   108KB/s    in 3.6s    
&nbsp;
2021-05-07 18:22:02 (108 KB/s) - ‘atasm109.zip’ saved [397661/397661]
</pre>

<p>Rozbalení archivu:</p>

<pre>
$ <strong>unzip atasm109.zip </strong>
&nbsp;
Archive:  atasm109.zip
   creating: atasm109/
  inflating: atasm109/atasm.exe      
   creating: atasm109/docs/
  inflating: atasm109/docs/atasm.blurb  
  ...
  ...
  ...
</pre>

<p>Samotný překlad a slinkování:</p>

<pre>
$ <strong>cd atasm109/src/</strong>
$ <strong>make</strong>
&nbsp;
gcc -Wall -DZLIB_CAPABLE -I../zlib  -DUNIX -O3 -fomit-frame-pointer  -c asm.c
gcc -Wall -DZLIB_CAPABLE -I../zlib  -DUNIX -O3 -fomit-frame-pointer  -c symbol.c
gcc -Wall -DZLIB_CAPABLE -I../zlib  -DUNIX -O3 -fomit-frame-pointer  -c parser.c
gcc -Wall -DZLIB_CAPABLE -I../zlib  -DUNIX -O3 -fomit-frame-pointer  -c setparse.c
gcc -Wall -DZLIB_CAPABLE -I../zlib  -DUNIX -O3 -fomit-frame-pointer  -c state.c
gcc -Wall -DZLIB_CAPABLE -I../zlib  -DUNIX -O3 -fomit-frame-pointer  -c dimage.c
gcc -Wall -DZLIB_CAPABLE -I../zlib  -DUNIX -O3 -fomit-frame-pointer  -c inc_path.c
gcc -Wall -DZLIB_CAPABLE -I../zlib  -DUNIX -O3 -fomit-frame-pointer  -c crc32.c
gcc -Wall -DZLIB_CAPABLE -I../zlib  -DUNIX -O3 -fomit-frame-pointer  -c atasm_err.c
gcc -Wall -DZLIB_CAPABLE -I../zlib  -DUNIX -O3 -fomit-frame-pointer  -c state2.c
gcc -o atasm asm.o symbol.o parser.o setparse.o state.o dimage.o inc_path.o crc32.o atasm_err.o state2.o -L../zlib -lz 
</pre>

<p>Otestování, zda je assembler správně přeložen a zda je spustitelný:</p>

<pre>
$ <strong>./atasm --version</strong>
&nbsp;
ATasm 1.09 (A mostly Mac65 compatible 6502 cross-assembler)
</pre>

<p>Překlad testovacího příkladu:</p>

<pre>
$ <strong>./atasm test.m65 </strong>
&nbsp;
ATasm 1.09 (A mostly Mac65 compatible 6502 cross-assembler)
Pass 1: Success. (0 warnings)
Pass 2: Success. (0 warnings)
&nbsp;
Assembly successful
  Compiled 289 bytes (~0k)
    Block: 0600-071a (283 bytes)
    Block: 072b-0730 (6 bytes)
&nbsp;
Compiled to binary file 'test.65o'
</pre>

<p>Úprava stavového souboru:</p>

<pre>
$ <strong>./atasm test.m65 -mstatefile.a8s</strong>
&nbsp;
ATasm 1.09 (A mostly Mac65 compatible 6502 cross-assembler)
Pass 1: Success. (0 warnings)
Pass 2: Success. (0 warnings)
&nbsp;
Assembly successful
  Compiled 289 bytes (~0k)
    Block: 0600-071a (283 bytes)
    Block: 072b-0730 (6 bytes)
&nbsp;
Compiled to binary file 'test.65o'
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha 2: instalace cross assembleru xa (xa65)</h2>

<p>Dále si ukažme překlad a instalaci xa65, opět na Linuxu.</p>

<p>Stažení archivu se zdrojovými kódy xa65:</p>

<pre>
$ <strong>wget https://www.floodgap.com/retrotech/xa/dists/xa-2.3.11.tar.gz</strong>
&nbsp;
--2021-05-08 08:41:38--  https://www.floodgap.com/retrotech/xa/dists/xa-2.3.11.tar.gz
Resolving www.floodgap.com (www.floodgap.com)... 66.166.122.164
Connecting to www.floodgap.com (www.floodgap.com)|66.166.122.164|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 153864 (150K) [application/x-gzip]
Saving to: ‘xa-2.3.11.tar.gz’
&nbsp;
xa-2.3.11.tar.gz    100%[===================&rarr;] 150.26K  36.7KB/s    in 4.1s
&nbsp;
2021-05-08 08:41:44 (36.7 KB/s) - ‘xa-2.3.11.tar.gz’ saved [153864/153864]
</pre>

<p>Rozbalení archivu:</p>

<pre>
$ <strong>tar xvfz xa-2.3.11.tar.gz</strong>
&nbsp;
xa-2.3.11/
xa-2.3.11/COPYING
xa-2.3.11/ChangeLog
...
...
...
</pre>

<p>Překlad a slinkování:</p>

<pre>
$ <strong>cd xa-2.3.11</strong>
&nbsp;
$ <strong>make</strong>
&nbsp;
rm -f xa
(cd src &amp;&amp; LD=gcc CC="gcc -O2" make)
make[1]: Entering directory '/tmp/ramdisk/xa-2.3.11/src'
gcc -O2    -c -o xa.o xa.c
gcc -O2    -c -o xaa.o xaa.c
gcc -O2    -c -o xal.o xal.c
gcc -O2    -c -o xap.o xap.c
gcc -O2    -c -o xat.o xat.c
gcc -O2    -c -o xar.o xar.c
gcc -O2    -c -o xar2.o xar2.c
gcc -O2    -c -o xao.o xao.c
gcc -O2    -c -o xau.o xau.c
gcc -O2    -c -o xam.o xam.c
gcc -O2    -c -o xacharset.o xacharset.c
gcc -o ../xa xa.o xaa.o xal.o xap.o xat.o xar.o xar2.o xao.o xau.o xam.o xacharset.o
make[1]: Leaving directory '/tmp/ramdisk/xa-2.3.11/src'
(cd misc &amp;&amp; CC="gcc -O2" make)
make[1]: Entering directory '/tmp/ramdisk/xa-2.3.11/misc'
cp mkrom.sh ../mkrom.sh
gcc -O2 -O2 uncpk.c -o ../uncpk
gcc -O2 -O2 printcbm.c -o ../printcbm
gcc -O2 -O2 file65.c -o ../file65
gcc -O2 -O2 reloc65.c -o ../reloc65
gcc -O2 -O2 ldo65.c -o ../ldo65
make[1]: Leaving directory '/tmp/ramdisk/xa-2.3.11/misc'
</pre>

<p>První spuštění xa65:</p>

<pre>
$ <strong>./xa</strong>
&nbsp;
Usage: xa [options] file
Cross-assembler for 65xx/R65C02/65816
&nbsp;
 -v           verbose output
 -C           no CMOS-opcodes
 -W           no 65816-opcodes (default)
 -w           allow 65816-opcodes
 -B           show lines with block open/close
 -c           produce `o65' object instead of executable files (i.e. don't link)
 -o filename  sets output filename, default is `a.o65'
                A filename of `-' sets stdout as output file
 -e filename  sets errorlog filename, default is none
 -l filename  sets labellist filename, default is none
 -r           adds crossreference list to labellist (if `-l' given)
 -M           allow ``:'' to appear in comments for MASM compatibility
 -R           start assembler in relocating mode
 -Llabel      defines `label' as absolute, undefined label even when linking
 -b? addr     set segment base address to integer value addr
                `?' stands for t(ext), d(ata), b(ss) and z(ero) segment
                (address can be given more than once, last one is used)
 -A addr      make text segment start at an address that when the _file_
                starts at addr, relocation is not necessary. Overrides -bt
                Other segments must be specified with `-b?'
 -G           suppress list of exported globals
 -p?          set preprocessor character to ?, default is #
 -DDEF=TEXT   defines a preprocessor replacement
 -Ocharset    set output charset (PETSCII, ASCII, etc.), case-sensitive
 -Idir        add directory `dir' to include path (before XAINPUT)
  --version   output version information and exit
  --help      display this help and exit
== These options are deprecated and will be removed in 2.4+! ==
 -x           old filename behaviour (overrides `-o', `-e', `-l')
 -S           allow preprocessor substitution within strings
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Příloha 3: instalace MAD Assembleru na Linuxu</h2>

<p><i>MAD Assembler</i> se od předchozích assemblerů odlišuje v&nbsp;tom, že je
naprogramovaný v&nbsp;<i>Delphi</i>. Ve skutečnosti se ovšem stále jedná o
nástroj ovládaný z&nbsp;příkazové řádky, a dialekt Delphi je podporován
v&nbsp;projektu/překladači <i>Free Pascal</i>. To znamená, že překlad
<i>MADSu</i> lze provést i na Linuxu, ovšem s&nbsp;jedním přídavným krokem
&ndash; instalací <i>Free Pascalu</i>.</p>

<p>Instalace překladače Free Pascal na Fedoře popř.&nbsp;na systému založeném
na balíčcích RPM:</p>

<pre>
$ <strong>sudo dnf install fpc</strong>

Last metadata expiration check: 0:53:44 ago on Fri 07 May 2021 03:17:18 AM EDT.
Dependencies resolved.
================================================================================
 Package             Arch     Version          Repository                  Size
================================================================================
Installing:
 fpc                 x86_64   3.2.0-1.fc32     updates                     46 M
Installing dependencies:
 SDL2                x86_64   2.0.12-1.fc32    beaker-Fedora-Everything   518 k
 binutils            x86_64   2.34-6.fc32      updates                    5.4 M
 binutils-gold       x86_64   2.34-6.fc32      updates                    852 k
 gpm                 x86_64   1.20.7-21.fc32   beaker-Fedora-Everything   185 k
 info                x86_64   6.7-6.fc32       beaker-Fedora-Everything   228 k
 linuxconsoletools   x86_64   1.7.1-1.fc32     updates                     84 k
&nbsp;
Transaction Summary
================================================================================
Install  7 Packages
&nbsp;
Total download size: 53 M
Installed size: 372 M
Is this ok [y/N]: 
</pre>

<p>Kontrola instalace &ndash; zda je překladač dostupný a spustitelný:</p>

<pre>
$ <strong>fpc</strong>
&nbsp;
Free Pascal Compiler version 3.2.0 [2020/06/21] for x86_64
Copyright (c) 1993-2020 by Florian Klaempfl and others
/usr/bin/fpc [options] <inputfile> [options]
 Only options valid for the default or selected platform are listed.
</pre>

<p>Naklonování repositáře se zdrojovými kódy MAD assembleru:</p>

<pre>
$ <strong>git clone https://github.com/tebe6502/Mad-Assembler</strong>
&nbsp;
Cloning into 'Mad-Assembler'...
remote: Enumerating objects: 779, done.
remote: Counting objects: 100% (42/42), done.
remote: Compressing objects: 100% (42/42), done.
remote: Total 779 (delta 22), reused 0 (delta 0), pack-reused 737
Receiving objects: 100% (779/779), 7.71 MiB | 11.49 MiB/s, done.
Resolving deltas: 100% (158/158), done.
</pre>

<p>Překlad MAD Assembleru:</p>

<pre>
$ <strong>fpc -Mdelphi -vh -O3 mads.pas</strong>
&nbsp;
Hint: Start of reading config file /etc/fpc.cfg
Hint: End of reading config file /etc/fpc.cfg
Free Pascal Compiler version 3.2.0 [2020/06/21] for x86_64
Copyright (c) 1993-2020 by Florian Klaempfl and others
Target OS: Linux for x86-64
Compiling mads.pas
mads.pas(1095,5) Note: Local variable "i" is assigned but never used
mads.pas(3684,29) Hint: Local variable "par" of a managed type does not seem to be initialized
mads.pas(4633,28) Warning: Local variable "tmp" of a managed type does not seem to be initialized
mads.pas(6222,10) Warning: Local variable "par" of a managed type does not seem to be initialized
mads.pas(8255,49) Warning: Local variable "str" of a managed type does not seem to be initialized
mads.pas(8856,46) Warning: Local variable "all" does not seem to be initialized
mads.pas(9757,26) Hint: Local variable "par" of a managed type does not seem to be initialized
mads.pas(12703,47) Hint: Local variable "txt" of a managed type does not seem to be initialized
mads.pas(10235,27) Hint: Local variable "par" of a managed type does not seem to be initialized
mads.pas(12703,51) Hint: Local variable "tmp" of a managed type does not seem to be initialized
mads.pas(11683,52) Warning: Local variable "idx" does not seem to be initialized
mads.pas(11683,51) Warning: Local variable "idx" does not seem to be initialized
mads.pas(12703,53) Hint: Local variable "v" does not seem to be initialized
mads.pas(12823,54) Hint: Local variable "r" does not seem to be initialized
mads.pas(13211,29) Hint: Local variable "tmpZM" of a managed type does not seem to be initialized
Linking mads
15772 lines compiled, 0.6 sec
6 warning(s) issued
10 hint(s) issued
1 note(s) issued
</pre>

<p>Nyní by měl být MAD Assembler spustitelný z&nbsp;příkazové řádky:</p>

<pre>
$ <strong>./mads</strong>
&nbsp;
mads 2.1.3
Syntax: mads source [switches]
-b:address      Generate binary file at specific address
-bc             Branch condition test
-c              Label case sensitivity
-d:label=value  Define a label
-f              CPU command at first column
-fv:value       Set raw binary fill byte to [value]
-hc[:filename]  Header file for CC65
-hm[:filename]  Header file for MADS
-i:path         Additional include directories
-l[:filename]   Generate listing
-m:filename     File with macro definition
-ml:value       margin-left property
-o:filename     Set object file name
-p              Print fully qualified file names in listing and error messages
-s              Suppress info messages
-t[:filename]   List label table
-u              Warn of unused labels
-vu             Verify code inside unreferenced procedures
-x              Exclude unreferenced procedures
</pre>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na herní konzoli Atari 2600<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-herni-konzoli-atari-2600/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-herni-konzoli-atari-2600/</a>
</li>

<li>A Tour of 6502 Cross-Assemblers<br />
<a href="https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/">https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/</a>
</li>

<li>Which cross assembler/compiler do you use?<br />
<a href="https://atariage.com/forums/topic/195253-which-cross-assemblercompiler-do-you-use/">https://atariage.com/forums/topic/195253-which-cross-assemblercompiler-do-you-use/</a>
</li>

<li>Stránka magazínu (diskmagu) FLOP<br />
<a href="http://flop.atariportal.cz/">http://flop.atariportal.cz/</a>
</li>

<li>Madass<br />
<a href="https://mads.atari8.info/">https://mads.atari8.info/</a>
</li>

<li>MAD-ASSEMBLER 1.9.5<br />
<a href="https://mads.atari8.info/mads_eng.html">https://mads.atari8.info/mads_eng.html</a>
</li>

<li>Action (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Action">https://atariwiki.org/wiki/Wiki.jsp?page=Action</a>
</li>

<li>Assembler (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Assembler">https://atariwiki.org/wiki/Wiki.jsp?page=Assembler</a>
</li>

<li>Basic (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Basic">https://atariwiki.org/wiki/Wiki.jsp?page=Basic</a>
</li>

<li>C (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=C">https://atariwiki.org/wiki/Wiki.jsp?page=C</a>
</li>

<li>Forth (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Forth">https://atariwiki.org/wiki/Wiki.jsp?page=Forth</a>
</li>

<li>Fortran (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Fortran">https://atariwiki.org/wiki/Wiki.jsp?page=Fortran</a>
</li>

<li>Lisp (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Lisp">https://atariwiki.org/wiki/Wiki.jsp?page=Lisp</a>
</li>

<li>Logo (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Logo">https://atariwiki.org/wiki/Wiki.jsp?page=Logo</a>
</li>

<li>Pascal (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Pascal">https://atariwiki.org/wiki/Wiki.jsp?page=Pascal</a>
</li>

<li>Pilot (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Pilot">https://atariwiki.org/wiki/Wiki.jsp?page=Pilot</a>
</li>

<li>PL65 (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=PL65">https://atariwiki.org/wiki/Wiki.jsp?page=PL65</a>
</li>

<li>Quick (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=Quick">https://atariwiki.org/wiki/Wiki.jsp?page=Quick</a>
</li>

<li>WSFN (AtariWiki.org)<br />
<a href="https://atariwiki.org/wiki/Wiki.jsp?page=WSFN">https://atariwiki.org/wiki/Wiki.jsp?page=WSFN</a>
</li>

<li>MAC/65 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MAC/65">https://en.wikipedia.org/wiki/MAC/65</a>
</li>

<li>Atari Assembler Editor<br />
<a href="https://en.wikipedia.org/wiki/Atari_Assembler_Editor#AMAC">https://en.wikipedia.org/wiki/Atari_Assembler_Editor#AMAC</a>
</li>

<li>cc65<br />
<a href="https://cc65.github.io/">https://cc65.github.io/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="http://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">http://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Stránky RetroFestu<br />
<a href="http://retrofest.cz/">http://retrofest.cz/</a>
</li>

<li>RetroHerna<br />
<a href="http://retroherna.cz/">http://retroherna.cz/</a>
</li>

<li>BASIC<br />
<a href="http://cs.wikipedia.org/wiki/BASIC">http://cs.wikipedia.org/wiki/BASIC</a>
</li>

<li>BASIC<br />
<a href="http://en.wikipedia.org/wiki/BASIC">http://en.wikipedia.org/wiki/BASIC</a>
</li>

<li>Rosetta Code &ndash; Category Basic<br />
<a href="http://rosettacode.org/wiki/Category:BASIC">http://rosettacode.org/wiki/Category:BASIC</a>
</li>

<li>Dartmouth College Computation Center: 1964 &ndash; The original Dartmouth BASIC manual<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf</a>
</li>

<li>The Original BASIC<br />
<a href="http://www.truebasic.com/">http://www.truebasic.com/</a>
</li>

<li>BASIC - Beginners All-purpose Symbolic Instruction Code<br />
<a href="http://hopl.murdoch.edu.au/showlanguage.prx?exp=176">http://hopl.murdoch.edu.au/showlanguage.prx?exp=176</a>
</li>

<li>Turbo BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Turbo_BASIC">http://cs.wikipedia.org/wiki/Turbo_BASIC</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Action!<br />
<a href="https://atari8bitbot.com/action/">https://atari8bitbot.com/action/</a>
</li>

<li>Atari Logo<br />
<a href="https://atari8bitbot.com/atari-logo/">https://atari8bitbot.com/atari-logo/</a>
</li>

<li>Atari PILOT &amp; Super PILOT<br />
<a href="https://atari8bitbot.com/atari-pilot/">https://atari8bitbot.com/atari-pilot/</a>
</li>

<li>Turbo-BASIC XL<br />
<a href="https://atari8bitbot.com/turbo-basic-xl/">https://atari8bitbot.com/turbo-basic-xl/</a>
</li>

<li>Atari Assembler/Editor<br />
<a href="https://atari8bitbot.com/atari-assembler-editor/">https://atari8bitbot.com/atari-assembler-editor/</a>
</li>

<li>Strings in Atari BASIC<br />
<a href="http://www.cyberroach.com/analog/an11/strings.htm">http://www.cyberroach.com/analog/an11/strings.htm</a>
</li>

<li>String Arrays in Atari BASIC<br />
<a href="http://www.atarimagazines.com/compute/issue11/52_1_STRING_ARRAYS_IN_ATARI_BASIC.php">http://www.atarimagazines.com/compute/issue11/52_1_STRING_ARRAYS_IN_ATARI_BASIC.php</a>
</li>

<li>An Atari BASIC Tutorial<br />
<a href="http://www.cyberroach.com/analog/an25/basictutorial.htm">http://www.cyberroach.com/analog/an25/basictutorial.htm</a>
</li>

<li>Atari Logo<br />
<a href="https://en.wikipedia.org/wiki/Atari_Logo">https://en.wikipedia.org/wiki/Atari_Logo</a>
</li>

<li>Computer art and animation: a user's guide to Atari logo<br />
<a href="https://archive.org/details/Computer_Art_and_Animation">https://archive.org/details/Computer_Art_and_Animation</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 1 – Hello World!<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-1-hello-world/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-1-hello-world/</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 2 – Graphics<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-2-graphics/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-2-graphics/</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 3 – More Variables, Memory and Pointers (ugh!)<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-3-more-variables-memory-and-pointers-ugh/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-3-more-variables-memory-and-pointers-ugh/</a>
</li>

<li>Going into Action! with Atari XL/XE – Part 4 – Using VSCode and Action! with syntax highlighting<br />
<a href="https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-4-using-vscode-and-action-with-syntax-highlighting/">https://vintageisthenewold.com/going-into-action-with-atari-xl-xe-part-4-using-vscode-and-action-with-syntax-highlighting/</a>
</li>

<li>Atari800 (emulátor)<br />
<a href="https://github.com/atari800/atari800">https://github.com/atari800/atari800</a>
</li>

<li>Atari MAC/65 Tutorial<br />
<a href="https://www.youtube.com/watch?v=RyBsGDJBXD0">https://www.youtube.com/watch?v=RyBsGDJBXD0</a>
</li>

<li>MAC/65 Manual<br />
<a href="http://www.mixinc.net/atari/mac65.htm">http://www.mixinc.net/atari/mac65.htm</a>
</li>

<li>BASIC 10 Liner Contest 2021<br />
<a href="https://atariage.com/forums/topic/316645-basic-10-liner-contest-2021/">https://atariage.com/forums/topic/316645-basic-10-liner-contest-2021/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Deep Blue C<br />
<a href="https://en.wikipedia.org/wiki/Deep_Blue_C">https://en.wikipedia.org/wiki/Deep_Blue_C</a>
</li>

<li>Deep Blue C Compiler<br />
<a href="https://www.atariarchives.org/APX/showinfo.php?cat=20166">https://www.atariarchives.org/APX/showinfo.php?cat=20166</a>
</li>

<li>Historie vývoje počítačových her: simulace a strategické hry naprogramované Chrisem Crawfordem<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-simulace-a-strategicke-hry-naprogramovane-chrisem-crawfordem/">https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-simulace-a-strategicke-hry-naprogramovane-chrisem-crawfordem/</a>
</li>

<li>Explore BASIC Programming Languages for the Atari 8-Bit Computers (30-60 mins)<br />
<a href="http://atariprojects.org/2020/08/29/explore-different-basic-programming-languages-for-the-atari-8-bit-computers-30-60-mins/">http://atariprojects.org/2020/08/29/explore-different-basic-programming-languages-for-the-atari-8-bit-computers-30-60-mins/</a>
</li>

<li>Learn How to Make a Game in BASIC XE (30-60 mins)<br />
<a href="http://atariprojects.org/2019/12/21/learn-how-to-make-a-game-in-basic-xe-30-60-mins/">http://atariprojects.org/2019/12/21/learn-how-to-make-a-game-in-basic-xe-30-60-mins/</a>
</li>

<li>Atari BASIC XL (manuál)<br />
<a href="http://www.atarimania.com/8bit/files/BASIC%20XL%20%C2%A4%20Second%20Edition.pdf">http://www.atarimania.com/8bit/files/BASIC%20XL%20%C2%A4%20Second%20Edition.pdf</a>
</li>

<li>BASIC XE For Atari XL &amp; XE<br />
<a href="https://www.atarimagazines.com/compute/issue67/318_1_Reviews_BASIC_XE_For_Atari_XL_XE.php">https://www.atarimagazines.com/compute/issue67/318_1_Reviews_BASIC_XE_For_Atari_XL_XE.php</a>
</li>

<li>BUG/65 (Reference manual)<br />
<a href="https://atariwiki.org/wiki/attach/Bug65/BUG-65%20Version%202.0%20manual-final%20with%20errorpage.pdf">https://atariwiki.org/wiki/attach/Bug65/BUG-65%20Version%202.0%20manual-final%20with%20errorpage.pdf</a>
</li>

<li>Cross compiler<br />
<a href="https://en.wikipedia.org/wiki/Cross_compiler">https://en.wikipedia.org/wiki/Cross_compiler</a>
</li>

<li>Křížový překladač<br />
<a href="https://cs.wikipedia.org/wiki/K%C5%99%C3%AD%C5%BEov%C3%BD_p%C5%99eklada%C4%8D">https://cs.wikipedia.org/wiki/K%C5%99%C3%AD%C5%BEov%C3%BD_p%C5%99eklada%C4%8D</a>
</li>

<li>ATasm<br />
<a href="https://atari.miribilist.com/atasm/">https://atari.miribilist.com/atasm/</a>
</li>

<li>ATasm v1.09 ("Global Pandemic Release")<br />
<a href="https://atari.miribilist.com/atasm/atasm.pdf">https://atari.miribilist.com/atasm/atasm.pdf</a>
</li>

<li>DOS XL<br />
<a href="https://en.wikipedia.org/wiki/DOS_XL">https://en.wikipedia.org/wiki/DOS_XL</a>
</li>

<li>Aztec C online Museum<br />
<a href="https://www.clipshop.ca/Aztec/index.htm">https://www.clipshop.ca/Aztec/index.htm</a>
</li>

<li>Aztec C Compilers<br />
<a href="http://aztecmuseum.ca/compilers.htm">http://aztecmuseum.ca/compilers.htm</a>
</li>

<li>Scratchbox<br />
<a href="http://scratchbox.org/">http://scratchbox.org/</a>
</li>

<li>History of PC based C-compilers<br />
<a href="https://web.archive.org/web/20071215083657/http://www.itee.uq.edu.au/~csmweb/decompilation/hist-c-pc.html">https://web.archive.org/web/20071215083657/http://www.itee.uq.edu.au/~csmweb/decompilation/hist-c-pc.html</a>
</li>

<li>PAL/NTSC Upgrade<br />
<a href="https://www.myatari.com/nirdary.html">https://www.myatari.com/nirdary.html</a>
</li>

<li>How can you measure time using BASIC on Atari XL computers?<br />
<a href="https://retrocomputing.stackexchange.com/questions/269/how-can-you-measure-time-using-basic-on-atari-xl-computers">https://retrocomputing.stackexchange.com/questions/269/how-can-you-measure-time-using-basic-on-atari-xl-computers</a>
</li>

<li>Atari Microsoft Basic manual<br />
<a href="http://www.atarimania.com/8bit/files/Atari_Microsoft_Basic.pdf">http://www.atarimania.com/8bit/files/Atari_Microsoft_Basic.pdf</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>A86/A386 assembler and D86/D386 debugger<br />
<a href="http://eji.com/a86/">http://eji.com/a86/</a>
</li>

<li>FASM<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>NASM<br />
<a href="https://www.nasm.us/">https://www.nasm.us/</a>
</li>

<li>High Level Assembly (home page)<br />
<a href="http://plantation-productions.com/Webster/">http://plantation-productions.com/Webster/</a>
</li>

<li>High Level Assembly (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/High_Level_Assembly">https://en.wikipedia.org/wiki/High_Level_Assembly</a>
</li>

<li>A86/A386 Features<br />
<a href="http://eji.com/a86/features.htm#FeaturesA86">http://eji.com/a86/features.htm#FeaturesA86</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html">https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html</a>
</li>

<li>Linux Assembly website<br />
<a href="http://asm.sourceforge.net/">http://asm.sourceforge.net/</a>
</li>

<li>Using Assembly Language in Linux<br />
<a href="http://asm.sourceforge.net/articles/linasm.html">http://asm.sourceforge.net/articles/linasm.html</a>
</li>

<li>Borland Turbo Assembler<br />
<a href="https://web.archive.org/web/20101023185143/http://info.borland.com/borlandcpp/cppcomp/tasmfact.html">https://web.archive.org/web/20101023185143/http://info.borland.com/borlandcpp/cppcomp/tasmfact.html</a>
</li>

<li>Microsoft Macro Assembler Reference<br />
<a href="https://docs.microsoft.com/en-us/cpp/assembler/masm/microsoft-macro-assembler-reference?view=vs-2019">https://docs.microsoft.com/en-us/cpp/assembler/masm/microsoft-macro-assembler-reference?view=vs-2019</a>
</li>

<li>ASM-One Macro Assembler<br />
<a href="http://en.wikipedia.org/wiki/ASM-One_Macro_Assembler">http://en.wikipedia.org/wiki/ASM-One_Macro_Assembler</a>
</li>

<li>ASM-One pages<br />
<a href="http://www.theflamearrows.info/documents/asmone.html">http://www.theflamearrows.info/documents/asmone.html</a>
</li>

<li>Základní informace o ASM-One<br />
<a href="http://www.theflamearrows.info/documents/asminfo.html">http://www.theflamearrows.info/documents/asminfo.html</a>
</li>

<li>xa65<br />
<a href="https://www.floodgap.com/retrotech/xa/">https://www.floodgap.com/retrotech/xa/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>Introduction of Assembler<br />
<a href="https://www.geeksforgeeks.org/introduction-of-assembler/">https://www.geeksforgeeks.org/introduction-of-assembler/</a>
</li>

<li>Two Pass Assemblers Tutorial<br />
<a href="https://www.youtube.com/watch?v=BUZycVrWPa4">https://www.youtube.com/watch?v=BUZycVrWPa4</a>
</li>

<li>ST ASSEMBLERS A START COMPARISON<br />
<a href="https://www.atarimagazines.com/startv1n1/STAssemblers.html">https://www.atarimagazines.com/startv1n1/STAssemblers.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

