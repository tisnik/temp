<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vývoj pro osmibitovou herní konzoli NES s využitím překladače jazyka C (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vývoj pro osmibitovou herní konzoli NES s využitím překladače jazyka C (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V jedenácté a současně i poslední části seriálu o vývoji her pro historickou osmibitovou herní konzoli NES dokončíme popis tvorby her a dalších aplikací pro NES s využitím překladače programovacího jazyka C společně s knihovnou NESlib.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Vývoj pro osmibitovou herní konzoli NES s&nbsp;využitím překladače jazyka C (dokončení)</a></p>
<p><a href="#k02">2. Definice pozadí a atributové mapy přímo v&nbsp;jazyku C</a></p>
<p><a href="#k03">3. Výsledek překladu do assembleru</a></p>
<p><a href="#k04">4. Výpis řetězce na obrazovku NESu</a></p>
<p><a href="#k05">5. Výsledek překladu do assembleru</a></p>
<p><a href="#k06">6. Zobrazení spritů kódem psaným v&nbsp;céčku</a></p>
<p><a href="#k07">7. Výsledek překladu do assembleru</a></p>
<p><a href="#k08">8. Definice a použití metaspritů</a></p>
<p><a href="#k09">9. Výsledek překladu do assembleru</a></p>
<p><a href="#k10">10. Atributy spritů a metaspritů</a></p>
<p><a href="#k11">11. Výsledek překladu do assembleru</a></p>
<p><a href="#k12">12. Herní ovladač NESu: D-pad</a></p>
<p><a href="#k13">13. Ovládání (meta)spritů D-padem</a></p>
<p><a href="#k14">14. Výsledek překladu do assembleru</a></p>
<p><a href="#k15">15. Scrolling pozadí u herní konzole NES</a></p>
<p><a href="#k16">*** 16. Realizace scrollingu celého pozadí</a></p>
<p><a href="#k17">*** 17. Výsledek překladu do assembleru</a></p>
<p><a href="#k18">18. C či assembler?</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vývoj pro osmibitovou herní konzoli NES s&nbsp;využitím překladače jazyka C (dokončení)</h2>

<p>V&nbsp;jedenácté a současně i poslední části <a
href="https://www.root.cz/serialy/vyvoj-her-pro-herni-konzoli-nes/">seriálu o
vývoji her pro historickou osmibitovou herní konzoli NES</a> dokončíme popis
tvorby aplikací a her pro NES s&nbsp;využitím překladače programovacího jazyka
C společně s&nbsp;knihovnou NESlib (namísto použití přece jen v&nbsp;této
oblasti obvyklejšího assembleru). Konkrétně budeme, ostatně podobně jako <a
href="https://www.root.cz/clanky/vyvoj-pro-osmibitovou-herni-konzoli-nes-s-vyuzitim-prekladace-jazyka-c/">minule</a>,
používat překladač <i>CC65</i>, jehož specifickými vlastnostmi jsme se zabývali
v&nbsp;článcích <a
href="https://www.root.cz/clanky/prekladace-jazyka-c-pro-historicke-osmibitove-mikroprocesory/">[1]</a>
a <a
href="https://www.root.cz/clanky/prekladace-programovaciho-jazyka-c-pro-historicke-osmibitove-mikroprocesory-2/">[2]</a>,
v&nbsp;nichž jsme si mj.&nbsp;řekli, v&nbsp;jakých ohledech se <i>CC65</i>
odlišuje od ANSI či ISO C. Tento překladač je doplněn o assembler <i>CA65</i>,
linker <i>LD65</i> a disasembler <i>DA65</i>.</p>

<a href="https://www.root.cz/obrazek/734862/"><img src="https://i.iinfo.cz/images/392/nes-devel-10-4-prev.png" class="image-734862" data-prev-filename="https://i.iinfo.cz/images/392/nes-devel-10-4-prev.png" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/392/nes-devel-10-4-large.png" data-large-width="524" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="270" height="270" /></a>
<p><i>Obrázek 1: Scéna vykreslená jednoduchým programem napsaným v&nbsp;C,
který jsme si <a
href="https://www.root.cz/clanky/vyvoj-pro-osmibitovou-herni-konzoli-nes-s-vyuzitim-prekladace-jazyka-c/#k13">ukázali
minule</a>. Všechny dostupné dlaždice zobrazené postupně ve čtyřech kombinacích
barev. Tyto dlaždice jsou určeny pro sprity.</i></p>

<p><a href="#k02">V&nbsp;úvodní části</a> dnešního článku dokončíme téma,
kterému jsme se začali věnovat již minule. Ukážeme si totiž, jak lze (relativně
snadno) vykreslit pozadí herního světa, tj.&nbsp;většinou statickou část scény,
kterou je možné v&nbsp;případě potřeby posouvat (<i>scrollovat</i>). <a
href="#k04">Dále</a> si ukážeme způsob výpisu zpráv (tedy řetězců) na pozadí;
pochopitelně opět s&nbsp;využitím dlaždic. <a href="#k06">Třetí část</a> článku
je věnována způsobu zobrazení pohyblivých objektů (<i>spritů</i>) a využití
takzvaných <i>metaspritů</i> podporovaných knihovnou NESlib. <a
href="#k12">Poté</a> si ukážeme čtení stavů D-padu, tj.&nbsp;herního ovladače
NESu a <a href="#15">scrolling</a> celého pozadí, opět s&nbsp;využitím
ovladače.</p>

<a href="https://www.root.cz/obrazek/734863/"><img src="https://i.iinfo.cz/images/392/nes-devel-10-5-prev.png" class="image-734863" data-prev-filename="https://i.iinfo.cz/images/392/nes-devel-10-5-prev.png" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/392/nes-devel-10-5-large.png" data-large-width="524" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="270" height="270" /></a>
<p><i>Obrázek 2: Výsledek získaný po spuštění <a
href="https://www.root.cz/clanky/vyvoj-pro-osmibitovou-herni-konzoli-nes-s-vyuzitim-prekladace-jazyka-c/#k15">tohoto
příkladu</a>. Všechny dostupné dlaždice zobrazené postupně ve čtyřech
kombinacích barev. Tyto dlaždice jsou určeny pro pozadí.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Definice pozadí a atributové mapy přímo v&nbsp;jazyku C</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu se pokusíme napsat program, po
jehož spuštění se vykreslí tato obrazovka:</p>

<a href="https://www.root.cz/obrazek/734864/"><img src="https://i.iinfo.cz/images/392/nes-devel-10-6-prev.png" class="image-734864" data-prev-filename="https://i.iinfo.cz/images/392/nes-devel-10-6-prev.png" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/392/nes-devel-10-6-large.png" data-large-width="524" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="270" height="270" /></a>
<p><i>Obrázek 3: Upravená úvodní obrazovka ze světa Maria vykreslená
demonstračním příkladem, který je popsán v&nbsp;této kapitole.</i></p>

<p>Všechny důležité informace už nyní máme k&nbsp;dispozici z&nbsp;minula
&ndash; musíme nejprve nadeklarovat barvovou paletu pozadí, dále vyplnit
<i>nametable</i>, což je 960 bajtů obsahujících indexy dlaždic tvořících pozadí
o rozměrech 32&times;30 dlaždic a posléze vyplnit tabulku s&nbsp;barvovými
atributy. Tato druhá tabulka má velikost pouze 32&times;30/2/2/4=60 bajtů a je
uložena za <i>nametable</i>.</p>

<p>Specifikací barvové palety se dnes již nebudeme zabývat, protože jsme si
toto téma dopodrobna popsali minule. Zajímavější bude vyplnění
<i>nametable</i>, což je provedeno kopií již zmíněných 960 bajtů a taktéž
vyplnění atributové tabulky, což vyžaduje kopii 60 bajtů (my budeme kopírovat
celých 64 bajtů, ovšem poslední čtyři bajty zůstanou nevyužity.</p>

<p>Podívejme se nejprve na funkci, která vyplní 32&times;24 dlaždic na základě
dat uložených v&nbsp;poli <strong>nametable</strong>. Zbylá část pozadí,
tj.&nbsp;plocha 32&times;6 dlaždic, je vyplněna dlaždicí s&nbsp;indexem 0x24,
což je prázdná dlaždice (tedy &bdquo;mezera&ldquo;). Tato funkce mimochodem
využívá pomocnou globální proměnnou <strong>i</strong> deklarovanou
v&nbsp;nulté stránce paměti a tedy garantující velmi rychlý přístup k&nbsp;této
proměnné:</p>

<pre>
void <strong>fill_in_ppu_ram</strong>(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 24; i++) {
        vram_put(nametable[i]);
    }
    for (i = 0; i &lt; 32 * 6; i++) {
        vram_put(0x24);
    }
}
</pre>

<p>Vyplnění tabulky atributů je podobně jednoduché, pouze zde použijeme
zdrojová data uložená v&nbsp;poli <strong>attributes</strong>:</p>

<pre>
void <strong>fill_in_attributes</strong>(void)
{
    vram_adr(ATTRIBUTE_TABLE);
&nbsp;
    for (i = 0; i &lt; 8 * 8; i++) {
        vram_put(attributes[i]);
    }
}
</pre>

<p>Funkce <strong>main</strong> spuštěná po inicializaci kódu
<strong>Crt0</strong> (viz předchozí článek) je přímočará a pravděpodobně již
nevyžaduje podrobnější popis:</p>

<pre>
void <strong>main</strong>(void)
{
    ppu_off();
    pal_bg(palette);
    bank_bg(1);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();
&nbsp;
    game_loop();
}
</pre>

<p>Podívejme se nyní na úplný zdrojový kód (resp.&nbsp;přesněji řečeno na
&bdquo;céčkovou část&ldquo;) tohoto demonstračního příkladu:</p>

<pre>
<i>#include "neslib.h"</i>
&nbsp;
<i>#define ATTRIBUTE_TABLE 0x23c0</i>
&nbsp;
<i>#pragma bss-name(push, "ZEROPAGE")</i>
int i;
int address;
&nbsp;
const unsigned char <strong>palette</strong>[32] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F, 0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F,     <i>// barvy pozadí</i>
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27, 0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17,     <i>// barvy spritů</i>
};
&nbsp;
const unsigned char <strong>nametable</strong>[] = {
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xD0, 0xE8, 0xD1, 0xD0, 0xD1, 0xDE,
        0xD1, 0xD8, 0xD0, 0xD1, 0x26, 0x29, 0x29, 0xDE, 0xD1, 0xD0, 0xD1,
        0xD0, 0xD1, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0x42, 0x42, 0xDB, 0x42, 0xDB,
        0x42, 0xDB, 0xDB, 0x42, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0x42,
        0xDB, 0x42, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDE,
        0xDF, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDE, 0xDF, 0xDB, 0xDB,
        0xE4, 0xE5, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDE, 0x43, 0xDB,
        0x42, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0xDB,
        0xE6, 0xE3, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0x42, 0xDB,
        0xDB, 0xDB, 0xD4, 0xD9, 0x26, 0x29, 0x29, 0xDB, 0xDB, 0xD4, 0xD9,
        0xD4, 0xD9, 0xE7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
        0x95, 0x95, 0x97, 0x98, 0x78, 0x78, 0x78, 0x95, 0x95, 0x97, 0x98,
        0x97, 0x98, 0x95, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
&nbsp;
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xD0, 0xE8, 0xD1, 0xD0, 0xD1, 0xDE,
        0xD1, 0xD8, 0xD0, 0xD1, 0x26, 0x29, 0x29, 0xDE, 0xD1, 0xD0, 0xD1,
        0xD0, 0xD1, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0x42, 0x42, 0xDB, 0x42, 0xDB,
        0x42, 0xDB, 0xDB, 0x42, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0x42,
        0xDB, 0x42, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDE,
        0xDF, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDE, 0xDF, 0xDB, 0xDB,
        0xE4, 0xE5, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDE, 0x43, 0xDB,
        0x42, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0xDB,
        0xE6, 0xE3, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0x42, 0xDB,
        0xDB, 0xDB, 0xD4, 0xD9, 0x26, 0x29, 0x29, 0xDB, 0xDB, 0xD4, 0xD9,
        0xD4, 0xD9, 0xE7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
        0x95, 0x95, 0x97, 0x98, 0x78, 0x78, 0x78, 0x95, 0x95, 0x97, 0x98,
        0x97, 0x98, 0x95, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
&nbsp;
    0x24, 0x1b, 0x18, 0x18, 0x1d, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x53, 0x54, 0x24, 0x24, 0x24, 0xa7, 0xa8, 0x24, 0x45, 0x45, 0x24,
        0x24, 0x45, 0x45, 0x45, 0x45, 0x53, 0x54, 0x24, 0x24,
    0x24, 0x24, 0xa7, 0xa8, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47,
        0x55, 0x56, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x53, 0x54, 0x24, 0x24, 0x24, 0xa7, 0xa8, 0x24, 0x45, 0x45, 0x24,
        0x24, 0x45, 0x45, 0x45, 0x45, 0x53, 0x54, 0x24, 0x24,
    0x24, 0x24, 0xa7, 0xa8, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47,
        0x55, 0x56, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,
};
&nbsp;
const unsigned char <strong>attributes</strong>[64] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xaa, 0xaa, 0xaa, 0xbf, 0xff, 0xaa, 0xff, 0xaa,
    0x55, 0xaa, 0x55, 0xef, 0xff, 0x55, 0xff, 0x55,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
&nbsp;
void <strong>fill_in_ppu_ram</strong>(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 24; i++) {
        vram_put(nametable[i]);
    }
    for (i = 0; i &lt; 32 * 6; i++) {
        vram_put(0x24);
    }
}
&nbsp;
void <strong>fill_in_attributes</strong>(void)
{
    vram_adr(ATTRIBUTE_TABLE);
&nbsp;
    for (i = 0; i &lt; 8 * 8; i++) {
        vram_put(attributes[i]);
    }
}
&nbsp;
void <strong>game_loop</strong>(void)
{
    while (1) {
    }
}
&nbsp;
void <strong>main</strong>(void)
{
    ppu_off();
    pal_bg(palette);
    bank_bg(1);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();
&nbsp;
    game_loop();
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Výsledek překladu do assembleru</h2>

<p>Po překladu <a href="#k02">výše uvedeného kódu</a> do assembleru získáme kód
s&nbsp;několika zajímavými vlastnostmi, které je vhodné alespoň ve stručnosti
okomentovat. První zajímavá vlastnost spočívá v&nbsp;tom, že všechna zdrojová
data pro tabulky (paletu, nametable i atributovou tabulku) jsou uloženy
v&nbsp;segmentu nazvaném <strong>RODATA</strong> neboli <i>read only
data</i>:</p>

<pre>
.segment        "RODATA"
&nbsp;
_palette:
        .byte   $22
        .byte   $29
&nbsp;
_nametable:
        .byte   $24
        .byte   $24
_attributes:
        .byte   $FF
</pre>

<p>V&nbsp;konfiguraci linkeru (soubor <strong>nrom_32k_vert.cfg</strong>) je
tento segment definován takto:</p>

<pre>
RODATA:   load = PRG,            type = ro,  define = yes;
</pre>

<p>Dále v&nbsp;kódu máme definován prostor pro dvě pomocné globální proměnné
<strong>_i</strong> a <strong>_address</strong>. Ty nalezneme v&nbsp;segmentu
s&nbsp;všeříkajícím názvem <strong>ZEROPAGE</strong>:</p>

<pre>
.segment        "ZEROPAGE"
_i:
        .res    2,$00
_address:
        .res    2,$00
</pre>

<p>A konečně se podívejme na to, jak kvalitně (resp.&nbsp;zde ve skutečnosti
nepříliš kvalitně) je přeložen kód, jenž přenáší data z&nbsp;ROM do PPU,
konkrétně do <i>nametable</i>:</p>

<pre>
<i>; for (i = 0; i &lt; 32 * 24; i++) {</i>
<i>;</i>
        lda     #$00           <i>; inicializace počitadla na nulu</i>
        sta     _i
        sta     _i+1
L036C:  lda     _i             <i>; kontrola na koncovou hodnotu</i>
        cmp     #$00           <i>; 0x300 = 768 (32*24)</i>
        lda     _i+1
        sbc     #$03
        bvc     L0373
        eor     #$80
L0373:  asl     a
        lda     #$00
        bcc     L03A5
<i>;</i>
<i>; vram_put(nametable[i]);</i>
<i>;</i>
        lda     #&lt;(_nametable)
        sta     ptr1
        lda     #&gt;(_nametable)
        clc
        adc     _i+1            <i>; horní bajt počitadla</i>
        sta     ptr1+1
        ldy     _i              <i>; dolní bajt počitadla</i>
        lda     (ptr1),y        <i>; načtení hodnoty z adresy [ptr1]</i>
        jsr     _vram_put       <i>; tato hodnota se zapíše do paměti PPU</i>
&nbsp;
L03A5:  ...
        ...
        ...
</pre>

<p>Z&nbsp;tohoto výpisu je patrné, že se manipuluje s&nbsp;proměnnou
<strong>_i</strong>, která zde funguje jako šestnáctibitové počitadlo
programové smyčky (mimochodem &ndash; bylo by výhodnější ho definovat jako typ
<strong>unsigned int</strong> &ndash; schválně si porovnejte vygenerované
kódy). Navíc se zde pracuje s&nbsp;pomocným ukazatelem <strong>ptr1</strong>,
jenž je taktéž plně šestnáctibitový (dokonce se zde používá adresovací režim
<strong>(ptr1),y</strong>.</p>

<p>Úplný kód v&nbsp;assembleru vygenerovaný překladačem <strong>cc65</strong>
vypadá následovně:</p>

<pre>
<i>;</i>
<i>; File generated by cc65 v 2.18 - Ubuntu 2.18-1</i>
<i>;</i>
        .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
        .setcpu         "6502"
        .smart          on
        .autoimport     on
        .case           on
        .debuginfo      off
        .importzp       sp, sreg, regsave, regbank
        .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
        .macpack        longbranch
        .forceimport    __STARTUP__
        .import         _pal_bg
        .import         _ppu_off
        .import         _ppu_on_all
        .import         _bank_bg
        .import         _vram_adr
        .import         _vram_put
        .export         _i
        .export         _address
        .export         _palette
        .export         _nametable
        .export         _attributes
        .export         _fill_in_ppu_ram
        .export         _fill_in_attributes
        .export         _game_loop
        .export         _main
&nbsp;
.segment        "RODATA"
&nbsp;
_palette:
        .byte   $22
        .byte   $29
        .byte   $1A
        .byte   $0F
        .byte   $22
        .byte   $36
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $30
        .byte   $21
        .byte   $0F
        .byte   $22
        .byte   $27
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $16
        .byte   $27
        .byte   $18
        .byte   $22
        .byte   $1A
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $16
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $0F
        .byte   $36
        .byte   $17
_nametable:
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $D0
        .byte   $E8
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $DE
        .byte   $D1
        .byte   $D8
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $42
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $E4
        .byte   $E5
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $43
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $E6
        .byte   $E3
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $D4
        .byte   $D9
        .byte   $E7
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $78
        .byte   $78
        .byte   $78
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $97
        .byte   $98
        .byte   $95
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $D0
        .byte   $E8
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $DE
        .byte   $D1
        .byte   $D8
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $42
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $E4
        .byte   $E5
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $43
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $E6
        .byte   $E3
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $D4
        .byte   $D9
        .byte   $E7
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $78
        .byte   $78
        .byte   $78
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $97
        .byte   $98
        .byte   $95
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $1B
        .byte   $18
        .byte   $18
        .byte   $1D
        .byte   $24
        .byte   $25
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $24
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $47
        .byte   $47
        .byte   $24
        .byte   $24
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $24
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $47
        .byte   $47
        .byte   $24
        .byte   $24
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
_attributes:
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $AA
        .byte   $AA
        .byte   $AA
        .byte   $BF
        .byte   $FF
        .byte   $AA
        .byte   $FF
        .byte   $AA
        .byte   $55
        .byte   $AA
        .byte   $55
        .byte   $EF
        .byte   $FF
        .byte   $55
        .byte   $FF
        .byte   $55
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
&nbsp;
.segment        "BSS"
&nbsp;
.segment        "ZEROPAGE"
_i:
        .res    2,$00
_address:
        .res    2,$00
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_ppu_ram (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_ppu_ram: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(NTADR_A(0, 0));</i>
<i>;</i>
        ldx     #$20
        lda     #$00
        jsr     _vram_adr
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 24; i++) {</i>
<i>;</i>
        lda     #$00
        sta     _i
        sta     _i+1
L036C:  lda     _i
        cmp     #$00
        lda     _i+1
        sbc     #$03
        bvc     L0373
        eor     #$80
L0373:  asl     a
        lda     #$00
        bcc     L03A5
<i>;</i>
<i>; vram_put(nametable[i]);</i>
<i>;</i>
        lda     #<(_nametable)
        sta     ptr1
        lda     #>(_nametable)
        clc
        adc     _i+1
        sta     ptr1+1
        ldy     _i
        lda     (ptr1),y
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 24; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0375
        inx
L0375:  sta     _i
        stx     _i+1
        jmp     L036C
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 6; i++) {</i>
<i>;</i>
L03A5:  sta     _i
        sta     _i+1
L0379:  lda     _i
        cmp     #$C0
        lda     _i+1
        sbc     #$00
        bvc     L0380
        eor     #$80
L0380:  bpl     L037A
<i>;</i>
<i>; vram_put(0x24);</i>
<i>;</i>
        lda     #$24
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 6; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0382
        inx
L0382:  sta     _i
        stx     _i+1
        jmp     L0379
<i>;</i>
<i>; }</i>
<i>;</i>
L037A:  rts
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_attributes (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_attributes: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(ATTRIBUTE_TABLE);</i>
<i>;</i>
        ldx     #$23
        lda     #$C0
        jsr     _vram_adr
<i>;</i>
<i>; for (i = 0; i &lt; 8 * 8; i++) {</i>
<i>;</i>
        lda     #$00
        sta     _i
        sta     _i+1
L0388:  lda     _i
        cmp     #$40
        lda     _i+1
        sbc     #$00
        bvc     L038F
        eor     #$80
L038F:  bpl     L0389
<i>;</i>
<i>; vram_put(attributes[i]);</i>
<i>;</i>
        lda     #<(_attributes)
        sta     ptr1
        lda     #>(_attributes)
        clc
        adc     _i+1
        sta     ptr1+1
        ldy     _i
        lda     (ptr1),y
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 8 * 8; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0391
        inx
L0391:  sta     _i
        stx     _i+1
        jmp     L0388
<i>;</i>
<i>; }</i>
<i>;</i>
L0389:  rts
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ game_loop (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _game_loop: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; while (1) {</i>
<i>;</i>
L03A6:  jmp     L03A6
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ main (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _main: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_off();</i>
<i>;</i>
        jsr     _ppu_off
<i>;</i>
<i>; pal_bg(palette);</i>
<i>;</i>
        lda     #&lt;(_palette)
        ldx     #&gt;(_palette)
        jsr     _pal_bg
<i>;</i>
<i>; bank_bg(1);</i>
<i>;</i>
        lda     #$01
        jsr     _bank_bg
<i>;</i>
<i>; fill_in_ppu_ram();</i>
<i>;</i>
        jsr     _fill_in_ppu_ram
<i>;</i>
<i>; fill_in_attributes();</i>
<i>;</i>
        jsr     _fill_in_attributes
<i>;</i>
<i>; ppu_on_all();</i>
<i>;</i>
        jsr     _ppu_on_all
<i>;</i>
<i>; game_loop();</i>
<i>;</i>
        jmp     _game_loop
&nbsp;
.endproc
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výpis řetězce na obrazovku NESu</h2>

<p>Dnešní druhý demonstrační příklad bude kratší než příklad předchozí. Namísto
vykreslení celého herního světa se omezíme na maličkost &ndash; vykreslení
řetězce &bdquo;Hello world!&ldquo; doprostřed obrazovky. Budeme tedy potřebovat
definici dlaždic obsahující znakovou sadu (ideálně podmnožinu ASCII). Takové
dlaždice jsou uloženy v&nbsp;souboru <strong>Alpha.chr</strong>, přičemž
jednotlivé definice znaků jsou umístěny přímo na své ASCII pozice. Jinými slovy
to znamená, že například dlaždice s&nbsp;tvarem znaku &bdquo;A&ldquo; je
umístěna na indexu 65, tedy naprosto stejně jako v&nbsp;ASCII.</p>

<p>To nám umožňuje celé vykreslení obrazovky (pozadí) maximálně
zjednodušit:</p>

<pre>
const unsigned char <strong>text</strong>[] = "Hello World!";
&nbsp;
void <strong>print_on_screen</strong>(void)
{
    vram_adr(NTADR_A(10, 14));
&nbsp;
    i = 0;
    while (text[i]) {
        vram_put(text[i]);   <i>// dlaždice na pozici X obsahuje tvar znaku X</i>
        i++;
    }
}
</pre>

<p>Výsledek by měl vypadat následovně:</p>

*** image ***
<p><i>Obrázek 4: Řetězec &bdquo;Hello world!&ldquo; vykreslený do pozadí scény
NESu.</i></p>

<p>Nepatrnou modifikací si můžeme nechat zobrazit celou znakovou sadu:</p>

*** image ***
<p><i>Obrázek 5: Celá znaková sada uložená v&nbsp;binárním souboru Alpha.chr.
Povšimněte si, že je definováno všech 95 znaků ASCII.</i></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
<i>#include "neslib.h"</i>
&nbsp;
<i>#pragma bss-name(push, "ZEROPAGE")</i>
&nbsp;
unsigned char i;
&nbsp;
const unsigned char <strong>text</strong>[] = "Hello World!";
&nbsp;
const unsigned char <strong>palette</strong>[] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F, 0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F,     <i>// barvy pozadí</i>
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27, 0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17,     <i>// barvy spritů</i>
};
&nbsp;
void <strong>game_loop</strong>(void)
{
    while (1) {
    }
}
&nbsp;
void <strong>print_on_screen</strong>(void)
{
    vram_adr(NTADR_A(10, 14));
&nbsp;
    i = 0;
    while (text[i]) {
        vram_put(text[i]);
        i++;
    }
}
&nbsp;
void <strong>main</strong>(void)
{
    ppu_off();
    pal_bg(palette);
    bank_bg(0);
    print_on_screen();
    ppu_on_all();
&nbsp;
    game_loop();
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Výsledek překladu do assembleru</h2>

<p>Po překladu céčkového příkladu <a href="#k04">ze čtvrté kapitoly</a> nás
bude pochopitelně zajímat především to, jakým způsobem se přeloží programová
smyčka vykreslující na pozadí dlaždice s&nbsp;jednotlivými znaky. Nutno říci,
že překlad (opět) není příliš optimální a vypadá následovně. Všechny poznámky
vedle instrukcí byly pochopitelně doplněny ručně:</p>

<pre>
<i>; i = 0;</i>
<i>;</i>
        lda     #$00
        sta     _i          <i>; inicializace počitadla uloženého v nulté stránce paměti</i>
<i>;</i>
<i>; while (text[i]) {</i>
<i>;</i>
        jmp     L0034
<i>;</i>
<i>; vram_put(text[i]);</i>
<i>;</i>
L0032:  ldy     _i          <i>; počitadlo bude současně použito jako offset při adresaci prvků pole</i>
        lda     _text,y     <i>; načtení znaku z&nbsp;pole</i>
        jsr     _vram_put
<i>;</i>
<i>; i++;</i>
<i>;</i>
        inc     _i          <i>; prosté zvýšení hodnoty počitadla</i>
<i>;</i>
<i>; while (text[i]) {</i>
<i>;</i>
L0034:  ldy     _i
        lda     _text,y     <i>; opětovné načtení znaku(!) s kontrolou, zda se již dosáhlo konce řetězce</i>
        bne     L0032       <i>; test na nulový znak</i>
<i>;</i>
<i>; }</i>
<i>;</i>
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že v&nbsp;tomto případě
překladač používá pouze osmibitové počitadlo, takže je kód kratší,než tomu bylo
v&nbsp;úvodním příkladu.</div></p>

<p>Úplný kód v&nbsp;assembleru vygenerovaný překladačem <strong>cc65</strong>
vypadá následovně:</p>

<pre>
<i>;</i>
<i>; File generated by cc65 v 2.18 - Ubuntu 2.18-1</i>
<i>;</i>
        .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
        .setcpu         "6502"
        .smart          on
        .autoimport     on
        .case           on
        .debuginfo      off
        .importzp       sp, sreg, regsave, regbank
        .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
        .macpack        longbranch
        .forceimport    __STARTUP__
        .import         _pal_bg
        .import         _ppu_off
        .import         _ppu_on_all
        .import         _bank_bg
        .import         _vram_adr
        .import         _vram_put
        .export         _i
        .export         _text
        .export         _palette
        .export         _game_loop
        .export         _print_on_screen
        .export         _main
&nbsp;
.segment        "RODATA"
&nbsp;
_text:
        .byte   $48,$65,$6C,$6C,$6F,$20,$57,$6F,$72,$6C,$64,$21,$00
_palette:
        .byte   $22
        .byte   $29
        .byte   $1A
        .byte   $0F
        .byte   $22
        .byte   $36
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $30
        .byte   $21
        .byte   $0F
        .byte   $22
        .byte   $27
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $16
        .byte   $27
        .byte   $18
        .byte   $22
        .byte   $1A
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $16
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $0F
        .byte   $36
        .byte   $17
&nbsp;
.segment        "BSS"
&nbsp;
.segment        "ZEROPAGE"
_i:
        .res    1,$00
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ game_loop (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _game_loop: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; while (1) {</i>
<i>;</i>
L0046:  jmp     L0046
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ print_on_screen (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _print_on_screen: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(NTADR_A(10, 14));</i>
<i>;</i>
        ldx     #$21
        lda     #$CA
        jsr     _vram_adr
<i>;</i>
<i>; i = 0;</i>
<i>;</i>
        lda     #$00
        sta     _i
<i>;</i>
<i>; while (text[i]) {</i>
<i>;</i>
        jmp     L0034
<i>;</i>
<i>; vram_put(text[i]);</i>
<i>;</i>
L0032:  ldy     _i
        lda     _text,y
        jsr     _vram_put
<i>;</i>
<i>; i++;</i>
<i>;</i>
        inc     _i
<i>;</i>
<i>; while (text[i]) {</i>
<i>;</i>
L0034:  ldy     _i
        lda     _text,y
        bne     L0032
<i>;</i>
<i>; }</i>
<i>;</i>
        rts
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ main (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _main: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_off();</i>
<i>;</i>
        jsr     _ppu_off
<i>;</i>
<i>; pal_bg(palette);</i>
<i>;</i>
        lda     #&lt;(_palette)
        ldx     #&gt;(_palette)
        jsr     _pal_bg
<i>;</i>
<i>; bank_bg(0);</i>
<i>;</i>
        lda     #$00
        jsr     _bank_bg
<i>;</i>
<i>; print_on_screen();</i>
<i>;</i>
        jsr     _print_on_screen
<i>;</i>
<i>; ppu_on_all();</i>
<i>;</i>
        jsr     _ppu_on_all
<i>;</i>
<i>; game_loop();</i>
<i>;</i>
        jmp     _game_loop
&nbsp;
.endproc
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení spritů kódem psaným v&nbsp;céčku</h2>

<p>Způsob vytváření pozadí, o němž jsme se zmínili v&nbsp;předchozích
kapitolách, je poměrně složitý (i když výhody spočívající v&nbsp;relativně
malém zatížení procesoru, většinou převažovaly).  Se sprity, tedy pohyblivými
objekty, je však situace poněkud jednodušší. Základem při vykreslování spritů
je opět tabulka vzorků, ta je ovšem doplněna pomocnou pamětí o kapacitě 256
bajtů, která je umístěna přímo na čipu <i>PPU</i>. Programátor měl k&nbsp;této
paměti přístup buď přes řídicí registry <i>PPU</i>, alternativně pak přes DMA.
Ve zmíněných 256 bajtech jsou umístěny informace o 64 spritech, tj.&nbsp;pro
každý sprite jsou vyhrazeny čtyři bajty. V&nbsp;těchto bajtech se nachází
horizontální pozice spritu, vertikální pozice spritu, horní dva bity barvy
(spodní bity jsou přímo v&nbsp;tabulce vzorků), index do tabulky vzorků
(ukazuje na tvar spritu) a konečně taktéž bitové příznaky: horizontální
zrcadlení, vertikální zrcadlení a priorita spritu (před/za pozadím).</p>

<p>Kvůli dalším technologickým omezením čipu <i>PPU</i> mohlo být na jednom
obrazovém řádku (tj.&nbsp;vedle sebe) zobrazeno pouze omezené množství spritů,
tj.&nbsp;nebylo například možné všechny sprity umístit vedle sebe. Taktéž počet
celkově zobrazovaných barev nedosáhl hodnoty 32 (16 pro pozadí, 16 pro sprity),
ale pouze 25, přičemž barvová paleta obsahovala 48 barev a pět odstínů šedi
(konkrétní způsob zobrazení barev byl na obou televizních normách poněkud
odlišný).</p>

<p><div class="rs-tip-major">Poznámka: na originální konzoli lze zobrazit jen
osm spritů na obrazovém řádku, ovšem mnohé emulátory toto omezení
neobsahují.</div></p>

<p>V&nbsp;jazyce C můžeme s&nbsp;jednotlivými sprity manipulovat individuálně.
Postačuje neustále (v&nbsp;herní smyčce, ideálně při zobrazení každého
obrazového snímku) zavolat funkci <strong>oam_clear</strong> pro vynulování
počitadla spritů <strong>sprid</strong> následovanou funkcí/funkcemi
<strong>oam_spr</strong>, kde každé volání nastaví pozici a další atributy
jednoho ze spritů:</p>

<pre>
<i>//clear OAM buffer, all the sprites are hidden</i>
<i>// Note: changed. Now also changes sprid (index to buffer) to zero</i>
void __fastcall__ <strong>oam_clear</strong>(void);
&nbsp;
<i>//set sprite in OAM buffer, chrnum is tile, attr is attribute</i>
void __fastcall__ <strong>oam_spr</strong>(unsigned char x,unsigned char y,unsigned char chrnum,unsigned char attr);
</pre>

<p>Takto vypadá herní smyčka, ve které se nastaví x-ové souřadnice, y-ové
souřadnice, číslo dlaždice a atributy prvních osmi spritů:</p>

<pre>
void <strong>game_loop</strong>(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
        oam_spr(10, 10, 0, 0);
        oam_spr(18, 10, 1, 0);
        oam_spr(10, 18, 2, 0);
        oam_spr(18, 18, 3, 0);
        oam_spr(10, 20, 4, 0);
        oam_spr(18, 20, 5, 0);
        oam_spr(10, 28, 6, 0);
        oam_spr(18, 28, 7, 0);
    }
}
</pre>

<p>Výsledek po překladu a spuštění příkladu:</p>

*** image ***
<p><i>Obrázek 6: Herní scéna, ve které je postavička vykreslena s&nbsp;využitím osmi spritů.</i></p>

<p>Úplný zdrojový kód tohoto příkladu je velmi krátký:</p>

<pre>
<i>#include "neslib.h"</i>
&nbsp;
<i>#define ATTRIBUTE_TABLE 0x23c0</i>
&nbsp;
<i>#pragma bss-name(push, "ZEROPAGE")</i>
int i;
int address;
&nbsp;
<i>// barvy pozadí</i>
const unsigned char <strong>background_palette</strong>[] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F,
    0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F
};
&nbsp;
<i>// barvy spritů</i>
const unsigned char <strong>sprite_palette</strong>[] = {
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27,
    0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17
};

&nbsp;
void <strong>fill_in_ppu_ram</strong>(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 30; i++) {
        vram_put(36);
    }
}
&nbsp;
void <strong>fill_in_attributes</strong>(void)
{
    vram_adr(ATTRIBUTE_TABLE);
&nbsp;
    vram_fill(0, 16);
    vram_fill(0x55, 16);
    vram_fill(0xAA, 16);
    vram_fill(0xFF, 16);
}
&nbsp;
void <strong>game_loop</strong>(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
        oam_spr(10, 10, 0, 0);
        oam_spr(18, 10, 1, 0);
        oam_spr(10, 18, 2, 0);
        oam_spr(18, 18, 3, 0);
        oam_spr(10, 20, 4, 0);
        oam_spr(18, 20, 5, 0);
        oam_spr(10, 28, 6, 0);
        oam_spr(18, 28, 7, 0);
    }
}
&nbsp;
void <strong>main</strong>(void)
{
    ppu_off();
    pal_bg(background_palette);
    pal_spr(sprite_palette);
    bank_bg(1);
    bank_spr(0);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();
&nbsp;
    game_loop();
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výsledek překladu do assembleru</h2>

<p>Ve vygenerovaném kódu v&nbsp;assembleru nalezneme především volání subrutiny
<strong>_oam_clear</strong>:</p>

<pre>
<i>; oam_clear();</i>
<i>;</i>
        jsr     _oam_clear
</pre>

<p>Která zejména vynuluje čítač spritů <strong>sprid</strong> a taktéž paměť
pro sprity (256 bajtů pro 64 spritů):</p>

<pre>
_oam_clear:

        ldx #0
        stx SPRID ; automatically sets sprid to zero
        lda #$ff
@1:
        sta OAM_BUF,x
        inx
        inx
        inx
        inx
        bne @1
        rts
</pre>

<p>Dále se podívejme, jak se přeloží volání funkce <strong>_oam_spr</strong>
pro přenos dat o jednom spritu:</p>

<pre>
<i>; oam_spr(10, 10, 0, 0);</i>
<i>;</i>
        jsr     decsp3
        lda     #$0A
        ldy     #$02
        sta     (sp),y
        dey
        sta     (sp),y
        lda     #$00
        dey
        sta     (sp),y
        jsr     _oam_spr
</pre>

<p>Samotná funkce <strong>_oam_spr</strong> je implementována takto &ndash;
velmi neefektivním způsobem:</p>

<pre>
_oam_spr:
&nbsp;
        ldx SPRID
        <i>;a = chrnum</i>
        sta OAM_BUF+2,x
&nbsp;
        ldy #0          <i>;3 popa calls replacement</i>
        lda (sp),y
        iny
        sta OAM_BUF+1,x
        lda (sp),y
        iny
        sta OAM_BUF+0,x
        lda (sp),y
        sta OAM_BUF+3,x
&nbsp;
        lda &lt;sp
        clc
        adc #3 ;4
        sta @lt;sp
        bcc @1
        inc &lt;sp+1
&nbsp;
@1:
&nbsp;
        txa
        clc
        adc #4
        sta SPRID
        rts
</pre>

<p><div class="rs-tip-major">Poznámka: ukazuje se, že tvorba univerzálních
knihoven pro MOS 6502 je dosti složitá kvůli problematické práci se
zásobníkovými rámci (<i>stack frame</i>).</div></p>

<p>Úplný kód v&nbsp;assembleru vygenerovaný překladačem <strong>cc65</strong>
vypadá následovně:</p>

<pre>
<i>;</i>
<i>; File generated by cc65 v 2.18 - Ubuntu 2.18-1</i>
<i>;</i>
        .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
        .setcpu         "6502"
        .smart          on
        .autoimport     on
        .case           on
        .debuginfo      off
        .importzp       sp, sreg, regsave, regbank
        .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
        .macpack        longbranch
        .forceimport    __STARTUP__
        .import         _pal_bg
        .import         _pal_spr
        .import         _ppu_wait_nmi
        .import         _ppu_off
        .import         _ppu_on_all
        .import         _oam_clear
        .import         _oam_spr
        .import         _bank_spr
        .import         _bank_bg
        .import         _vram_adr
        .import         _vram_put
        .import         _vram_fill
        .export         _i
        .export         _address
        .export         _background_palette
        .export         _sprite_palette
        .export         _fill_in_ppu_ram
        .export         _fill_in_attributes
        .export         _game_loop
        .export         _main
&nbsp;
.segment        "RODATA"
&nbsp;
_background_palette:
        .byte   $22
        .byte   $29
        .byte   $1A
        .byte   $0F
        .byte   $22
        .byte   $36
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $30
        .byte   $21
        .byte   $0F
        .byte   $22
        .byte   $27
        .byte   $17
        .byte   $0F
_sprite_palette:
        .byte   $22
        .byte   $16
        .byte   $27
        .byte   $18
        .byte   $22
        .byte   $1A
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $16
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $0F
        .byte   $36
        .byte   $17
&nbsp;
.segment        "BSS"
&nbsp;
.segment        "ZEROPAGE"
_i:
        .res    2,$00
_address:
        .res    2,$00
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_ppu_ram (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_ppu_ram: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(NTADR_A(0, 0));</i>
<i>;</i>
        ldx     #$20
        lda     #$00
        jsr     _vram_adr
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 30; i++) {</i>
<i>;</i>
        lda     #$00
        sta     _i
        sta     _i+1
L002A:  lda     _i
        cmp     #$C0
        lda     _i+1
        sbc     #$03
        bvc     L0031
        eor     #$80
L0031:  bpl     L002B
<i>;</i>
<i>; vram_put(36);</i>
<i>;</i>
        lda     #$24
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 30; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0033
        inx
L0033:  sta     _i
        stx     _i+1
        jmp     L002A
<i>;</i>
<i>; }</i>
<i>;</i>
L002B:  rts
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_attributes (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_attributes: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(ATTRIBUTE_TABLE);</i>
<i>;</i>
        ldx     #$23
        lda     #$C0
        jsr     _vram_adr
<i>;</i>
<i>; vram_fill(0, 16);</i>
<i>;</i>
        lda     #$00
        jsr     pusha
        tax
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0x55, 16);</i>
<i>;</i>
        lda     #$55
        jsr     pusha
        ldx     #$00
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0xAA, 16);</i>
<i>;</i>
        lda     #$AA
        jsr     pusha
        ldx     #$00
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0xFF, 16);</i>
<i>;</i>
        lda     #$FF
        jsr     pusha
        ldx     #$00
        lda     #$10
        jmp     _vram_fill
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ game_loop (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _game_loop: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_wait_nmi();</i>
<i>;</i>
L0046:  jsr     _ppu_wait_nmi
<i>;</i>
<i>; oam_clear();</i>
<i>;</i>
        jsr     _oam_clear
<i>;</i>
<i>; oam_spr(10, 10, 0, 0);</i>
<i>;</i>
        jsr     decsp3
        lda     #$0A
        ldy     #$02
        sta     (sp),y
        dey
        sta     (sp),y
        lda     #$00
        dey
        sta     (sp),y
        jsr     _oam_spr
<i>;</i>
<i>; oam_spr(18, 10, 1, 0);</i>
<i>;</i>
        jsr     decsp3
        lda     #$12
        ldy     #$02
        sta     (sp),y
        lda     #$0A
        dey
        sta     (sp),y
        tya
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
<i>;</i>
<i>; oam_spr(10, 18, 2, 0);</i>
<i>;</i>
        jsr     decsp3
        lda     #$0A
        ldy     #$02
        sta     (sp),y
        lda     #$12
        dey
        sta     (sp),y
        lda     #$02
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
<i>;</i>
<i>; oam_spr(18, 18, 3, 0);</i>
<i>;</i>
        jsr     decsp3
        lda     #$12
        ldy     #$02
        sta     (sp),y
        dey
        sta     (sp),y
        lda     #$03
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
<i>;</i>
<i>; oam_spr(10, 20, 4, 0);</i>
<i>;</i>
        jsr     decsp3
        lda     #$0A
        ldy     #$02
        sta     (sp),y
        lda     #$14
        dey
        sta     (sp),y
        lda     #$04
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
<i>;</i>
<i>; oam_spr(18, 20, 5, 0);</i>
<i>;</i>
        jsr     decsp3
        lda     #$12
        ldy     #$02
        sta     (sp),y
        lda     #$14
        dey
        sta     (sp),y
        lda     #$05
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
<i>;</i>
<i>; oam_spr(10, 28, 6, 0);</i>
<i>;</i>
        jsr     decsp3
        lda     #$0A
        ldy     #$02
        sta     (sp),y
        lda     #$1C
        dey
        sta     (sp),y
        lda     #$06
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
<i>;</i>
<i>; oam_spr(18, 28, 7, 0);</i>
<i>;</i>
        jsr     decsp3
        lda     #$12
        ldy     #$02
        sta     (sp),y
        lda     #$1C
        dey
        sta     (sp),y
        lda     #$07
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
<i>;</i>
<i>; while (1) {</i>
<i>;</i>
        jmp     L0046
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ main (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _main: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_off();</i>
<i>;</i>
        jsr     _ppu_off
<i>;</i>
<i>; pal_bg(background_palette);</i>
<i>;</i>
        lda     #&lt;(_background_palette)
        ldx     #&gt;(_background_palette)
        jsr     _pal_bg
<i>;</i>
<i>; pal_spr(sprite_palette);</i>
<i>;</i>
        lda     #&lt;(_sprite_palette)
        ldx     #&gt;(_sprite_palette)
        jsr     _pal_spr
<i>;</i>
<i>; bank_bg(1);</i>
<i>;</i>
        lda     #$01
        jsr     _bank_bg
<i>;</i>
<i>; bank_spr(0);</i>
<i>;</i>
        lda     #$00
        jsr     _bank_spr
<i>;</i>
<i>; fill_in_ppu_ram();</i>
<i>;</i>
        jsr     _fill_in_ppu_ram
<i>;</i>
<i>; fill_in_attributes();</i>
<i>;</i>
        jsr     _fill_in_attributes
<i>;</i>
<i>; ppu_on_all();</i>
<i>;</i>
        jsr     _ppu_on_all
<i>;</i>
<i>; game_loop();</i>
<i>;</i>
        jmp     _game_loop
&nbsp;
.endproc
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Definice a použití metaspritů</h2>

<p>Velmi často se při tvorbě aplikací pro herní konzoli NES setkáme s&nbsp;tím,
že herní postavička či jiný pohyblivý objekt není složen z&nbsp;jediného spritu
(8&times;8 pixelů), ale hned z&nbsp;několika spritů, které se pohybují
současně. Z&nbsp;tohoto důvodu podporuje knihovna <i>NESlib</i> takzvané
<i>metasprity</i>, tj.&nbsp;skupinu po sobě jdoucích spritů, s&nbsp;nimiž lze
později manipulovat jako s&nbsp;jediným (velkým) grafickým objektem. Definice
metaspritu je z&nbsp;pohledu céčkového programátora jednoduchá &ndash; jedná se
o pole obsahující pro každý sprite čtyři bajty (x, y, dlaždice, atributy). Pole
je ukončeno speciální hodnotou 128:</p>

<pre>
<i>// definice metaspritu</i>
const unsigned char <strong>metasprite</strong>[] = {
    10, 10, 0, 0,
    18, 10, 1, 0,
    10, 18, 2, 0,
    18, 18, 3, 0,
    10, 20, 4, 0,
    18, 20, 5, 0,
    10, 28, 6, 0,
    18, 28, 7, 0,
    128,
};
</pre>

<p>V&nbsp;herní smyčce se uvádí pozice celého metaspritu zavoláním funkce
<strong>oam_meta_spr</strong>:</p>

<pre>
void <strong>game_loop</strong>(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
        oam_meta_spr(10, 10, metasprite);
    }
}
</pre>

<p>Výsledná scéna bude vypadat podobně, jako tomu bylo v&nbsp;předchozím
příkladu:</p>

*** image ***
<p><i>Obrázek 7: Herní scéna, ve které je postavička vykreslena s&nbsp;využitím
osmi spritů reprezentovaných jako jediný metasprite (scéna vypadá prakticky
stejně, jako na obrázku 6).</i></p>

<p>Opět se podívejme na úplný zdrojový kód tohoto demonstračního příkladu:</p>

<pre>
<i>#include "neslib.h"</i>
&nbsp;
<i>#define ATTRIBUTE_TABLE 0x23c0</i>
&nbsp;
<i>#pragma bss-name(push, "ZEROPAGE")</i>
int i;
int address;
&nbsp;
<i>// barvy pozadí</i>
const unsigned char <strong>background_palette</strong>[] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F,
    0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F
};
&nbsp;
<i>// barvy spritů</i>
const unsigned char <strong>sprite_palette</strong>[] = {
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27,
    0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17
};
&nbsp;
<i>// definice metaspritu</i>
const unsigned char <strong>metasprite</strong>[] = {
    10, 10, 0, 0,
    18, 10, 1, 0,
    10, 18, 2, 0,
    18, 18, 3, 0,
    10, 20, 4, 0,
    18, 20, 5, 0,
    10, 28, 6, 0,
    18, 28, 7, 0,
    128,
};
&nbsp;
void <strong>fill_in_ppu_ram</strong>(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 30; i++) {
        vram_put(36);
    }
}
&nbsp;
void <strong>fill_in_attributes</strong>(void)
{
    vram_adr(ATTRIBUTE_TABLE);

    vram_fill(0, 16);
    vram_fill(0x55, 16);
    vram_fill(0xAA, 16);
    vram_fill(0xFF, 16);
}
&nbsp;
void <strong>game_loop</strong>(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
        oam_meta_spr(10, 10, metasprite);
    }
}
&nbsp;
void <strong>main</strong>(void)
{
    ppu_off();
    pal_bg(background_palette);
    pal_spr(sprite_palette);
    bank_bg(1);
    bank_spr(0);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();
&nbsp;
    game_loop();
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výsledek překladu do assembleru</h2>

<p>Překlad <a href="#k08">výše popsaného</a> kódu do assembleru je
přímočarý:</p>

<pre>
<i>;</i>
<i>; File generated by cc65 v 2.18 - Ubuntu 2.18-1</i>
<i>;</i>
        .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
        .setcpu         "6502"
        .smart          on
        .autoimport     on
        .case           on
        .debuginfo      off
        .importzp       sp, sreg, regsave, regbank
        .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
        .macpack        longbranch
        .forceimport    __STARTUP__
        .import         _pal_bg
        .import         _pal_spr
        .import         _ppu_wait_nmi
        .import         _ppu_off
        .import         _ppu_on_all
        .import         _oam_clear
        .import         _oam_meta_spr
        .import         _bank_spr
        .import         _bank_bg
        .import         _vram_adr
        .import         _vram_put
        .import         _vram_fill
        .export         _i
        .export         _address
        .export         _background_palette
        .export         _sprite_palette
        .export         _metasprite
        .export         _fill_in_ppu_ram
        .export         _fill_in_attributes
        .export         _game_loop
        .export         _main
&nbsp;
.segment        "RODATA"
&nbsp;
_background_palette:
        .byte   $22
        .byte   $29
        .byte   $1A
        .byte   $0F
        .byte   $22
        .byte   $36
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $30
        .byte   $21
        .byte   $0F
        .byte   $22
        .byte   $27
        .byte   $17
        .byte   $0F
_sprite_palette:
        .byte   $22
        .byte   $16
        .byte   $27
        .byte   $18
        .byte   $22
        .byte   $1A
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $16
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $0F
        .byte   $36
        .byte   $17
_metasprite:
        .byte   $0A
        .byte   $0A
        .byte   $00
        .byte   $00
        .byte   $12
        .byte   $0A
        .byte   $01
        .byte   $00
        .byte   $0A
        .byte   $12
        .byte   $02
        .byte   $00
        .byte   $12
        .byte   $12
        .byte   $03
        .byte   $00
        .byte   $0A
        .byte   $14
        .byte   $04
        .byte   $00
        .byte   $12
        .byte   $14
        .byte   $05
        .byte   $00
        .byte   $0A
        .byte   $1C
        .byte   $06
        .byte   $00
        .byte   $12
        .byte   $1C
        .byte   $07
        .byte   $00
        .byte   $80
&nbsp;
.segment        "BSS"
&nbsp;
.segment        "ZEROPAGE"
_i:
        .res    2,$00
_address:
        .res    2,$00
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_ppu_ram (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_ppu_ram: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(NTADR_A(0, 0));</i>
<i>;</i>
        ldx     #$20
        lda     #$00
        jsr     _vram_adr
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 30; i++) {</i>
<i>;</i>
        lda     #$00
        sta     _i
        sta     _i+1
L004B:  lda     _i
        cmp     #$C0
        lda     _i+1
        sbc     #$03
        bvc     L0052
        eor     #$80
L0052:  bpl     L004C
<i>;</i>
<i>; vram_put(36);</i>
<i>;</i>
        lda     #$24
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 30; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0054
        inx
L0054:  sta     _i
        stx     _i+1
        jmp     L004B
<i>;</i>
<i>; }</i>
<i>;</i>
L004C:  rts
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_attributes (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_attributes: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(ATTRIBUTE_TABLE);</i>
<i>;</i>
        ldx     #$23
        lda     #$C0
        jsr     _vram_adr
<i>;</i>
<i>; vram_fill(0, 16);</i>
<i>;</i>
        lda     #$00
        jsr     pusha
        tax
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0x55, 16);</i>
<i>;</i>
        lda     #$55
        jsr     pusha
        ldx     #$00
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0xAA, 16);</i>
<i>;</i>
        lda     #$AA
        jsr     pusha
        ldx     #$00
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0xFF, 16);</i>
<i>;</i>
        lda     #$FF
        jsr     pusha
        ldx     #$00
        lda     #$10
        jmp     _vram_fill
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ game_loop (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _game_loop: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_wait_nmi();</i>
<i>;</i>
L0067:  jsr     _ppu_wait_nmi
<i>;</i>
<i>; oam_clear();</i>
<i>;</i>
        jsr     _oam_clear
<i>;</i>
<i>; oam_meta_spr(10, 10, metasprite);</i>
<i>;</i>
        jsr     decsp2
        lda     #$0A
        ldy     #$01
        sta     (sp),y
        dey
        sta     (sp),y
        lda     #&lt;(_metasprite)
        ldx     #&gt;(_metasprite)
        jsr     _oam_meta_spr
<i>;</i>
<i>; while (1) {</i>
<i>;</i>
        jmp     L0067
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ main (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _main: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_off();</i>
<i>;</i>
        jsr     _ppu_off
<i>;</i>
<i>; pal_bg(background_palette);</i>
<i>;</i>
        lda     #&lt;(_background_palette)
        ldx     #&gt;(_background_palette)
        jsr     _pal_bg
<i>;</i>
<i>; pal_spr(sprite_palette);</i>
<i>;</i>
        lda     #&lt;(_sprite_palette)
        ldx     #&gt;(_sprite_palette)
        jsr     _pal_spr
<i>;</i>
<i>; bank_bg(1);</i>
<i>;</i>
        lda     #$01
        jsr     _bank_bg
<i>;</i>
<i>; bank_spr(0);</i>
<i>;</i>
        lda     #$00
        jsr     _bank_spr
<i>;</i>
<i>; fill_in_ppu_ram();</i>
<i>;</i>
        jsr     _fill_in_ppu_ram
<i>;</i>
<i>; fill_in_attributes();</i>
<i>;</i>
        jsr     _fill_in_attributes
<i>;</i>
<i>; ppu_on_all();</i>
<i>;</i>
        jsr     _ppu_on_all
<i>;</i>
<i>; game_loop();</i>
<i>;</i>
        jmp     _game_loop
&nbsp;
.endproc
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Atributy spritů a metaspritů</h2>

<p>Připomeňme si, jak vypadala definice metaspritu složeného z&nbsp;osmi
běžných spritů, z&nbsp;nichž každý má na obrazovce rozměry 8&times;8
pixelů:</p>

<pre>
<i>// definice prvního metaspritu</i>
const unsigned char <strong>metasprite1</strong>[] = {
    10, 10, 0, 3,
    18, 10, 1, 3,
    10, 18, 2, 3,
    18, 18, 3, 3,
    10, 20, 4, 3,
    18, 20, 5, 3,
    10, 28, 6, 3,
    18, 28, 7, 3,
    128,
};
</pre>

<p>Každý sprite je v&nbsp;tomto poli reprezentován čtveřicí hodnot: x-ová
souřadnice, y-ová souřadnice, index dlaždice/spritu (0..255) a konečně atributy
spritu. Nyní se zaměřme na atributy každého spritu. Jedná se o bajt obsahující
dva bity vybírající jednu ze čtyřech palet a taktéž tři bity, jimiž lze řídit
zrcadlení spritu popř.&nbsp;to, zda se má sprite zobrazit před pozadím nebo za
pozadím. Tyto speciální bity jsou definovány v&nbsp;souboru
<strong>neslib.h</strong>:</p>

<pre>
#define OAM_FLIP_V              0x80
#define OAM_FLIP_H              0x40
#define OAM_BEHIND              0x20
</pre>

<p>Jejich použití je snadné &ndash; můžeme využít jak součet, tak i operátor
pro logický součet bit po bitu. Vytvořme tedy druhou postavičku:</p>

<pre>
<i>// definice druhého metaspritu</i>
const unsigned char <strong>metasprite2</strong>[] = {
    18, 10, 8, 3 | OAM_FLIP_H,
    10, 10, 9, 3 | OAM_FLIP_H,
    18, 18, 10, 3 | OAM_FLIP_H,
    10, 18, 11, 3 | OAM_FLIP_H,
    18, 20, 12, 3 | OAM_FLIP_H,
    10, 20, 13, 3 | OAM_FLIP_H,
    18, 28, 14, 3 | OAM_FLIP_H,
    10, 28, 15, 3 | OAM_FLIP_H,
    128,
};
</pre>

<p>Změnit se pochopitelně musí i vykreslovací smyčka, a to následovně:</p>

<pre>
void <strong>game_loop</strong>(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
        oam_meta_spr(10, 10, metasprite1);
        oam_meta_spr(40, 10, metasprite2);
    }
}
</pre>

<p>Výsledek bude vypadat odlišně od předchozího příkladu, neboť je použita
odlišná barvová paleta a navíc jsou všechny sprity ve druhém metaspritu
horizontálně zrcadleny:</p>

*** image ***
<p><i>Obrázek 8: Dva metasprity, z&nbsp;nichž každý je složen z&nbsp;osmi
běžných spritů. Všechny sprity v&nbsp;pravém metaspritu jsou horizonálně
zrcadleny.</i></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
<i>#include "neslib.h"</i>
&nbsp;
<i>#define ATTRIBUTE_TABLE 0x23c0</i>
&nbsp;
<i>#pragma bss-name(push, "ZEROPAGE")</i>
int i;
int address;
&nbsp;
<i>// barvy pozadí</i>
const unsigned char <strong>background_palette</strong>[] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F,
    0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F
};
&nbsp;
<i>// barvy spritů</i>
const unsigned char <strong>sprite_palette</strong>[] = {
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27,
    0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17
};
&nbsp;
<i>// definice prvního metaspritu</i>
const unsigned char <strong>metasprite1</strong>[] = {
    10, 10, 0, 3,
    18, 10, 1, 3,
    10, 18, 2, 3,
    18, 18, 3, 3,
    10, 20, 4, 3,
    18, 20, 5, 3,
    10, 28, 6, 3,
    18, 28, 7, 3,
    128,
};
&nbsp;
<i>// definice druhého metaspritu</i>
const unsigned char <strong>metasprite2</strong>[] = {
    18, 10, 8, 3 | OAM_FLIP_H,
    10, 10, 9, 3 | OAM_FLIP_H,
    18, 18, 10, 3 | OAM_FLIP_H,
    10, 18, 11, 3 | OAM_FLIP_H,
    18, 20, 12, 3 | OAM_FLIP_H,
    10, 20, 13, 3 | OAM_FLIP_H,
    18, 28, 14, 3 | OAM_FLIP_H,
    10, 28, 15, 3 | OAM_FLIP_H,
    128,
};
&nbsp;
void <strong>fill_in_ppu_ram</strong>(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 30; i++) {
        vram_put(36);
    }
}
&nbsp;
void <strong>fill_in_attributes</strong>(void)
{
    vram_adr(ATTRIBUTE_TABLE);
&nbsp;
    vram_fill(0, 16);
    vram_fill(0x55, 16);
    vram_fill(0xAA, 16);
    vram_fill(0xFF, 16);
}
&nbsp;
void <strong>game_loop</strong>(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
        oam_meta_spr(10, 10, metasprite1);
        oam_meta_spr(40, 10, metasprite2);
    }
}
&nbsp;
void <strong>main</strong>(void)
{
    ppu_off();
    pal_bg(background_palette);
    pal_spr(sprite_palette);
    bank_bg(1);
    bank_spr(0);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();
&nbsp;
    game_loop();
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výsledek překladu do assembleru</h2>

<pre>
<i>;</i>
<i>; File generated by cc65 v 2.18 - Ubuntu 2.18-1</i>
<i>;</i>
        .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
        .setcpu         "6502"
        .smart          on
        .autoimport     on
        .case           on
        .debuginfo      off
        .importzp       sp, sreg, regsave, regbank
        .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
        .macpack        longbranch
        .forceimport    __STARTUP__
        .import         _pal_bg
        .import         _pal_spr
        .import         _ppu_wait_nmi
        .import         _ppu_off
        .import         _ppu_on_all
        .import         _oam_clear
        .import         _oam_meta_spr
        .import         _bank_spr
        .import         _bank_bg
        .import         _vram_adr
        .import         _vram_put
        .import         _vram_fill
        .export         _i
        .export         _address
        .export         _background_palette
        .export         _sprite_palette
        .export         _metasprite1
        .export         _metasprite2
        .export         _fill_in_ppu_ram
        .export         _fill_in_attributes
        .export         _game_loop
        .export         _main
&nbsp;
.segment        "RODATA"
&nbsp;
_background_palette:
        .byte   $22
        .byte   $29
        .byte   $1A
        .byte   $0F
        .byte   $22
        .byte   $36
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $30
        .byte   $21
        .byte   $0F
        .byte   $22
        .byte   $27
        .byte   $17
        .byte   $0F
_sprite_palette:
        .byte   $22
        .byte   $16
        .byte   $27
        .byte   $18
        .byte   $22
        .byte   $1A
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $16
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $0F
        .byte   $36
        .byte   $17
_metasprite1:
        .byte   $0A
        .byte   $0A
        .byte   $00
        .byte   $03
        .byte   $12
        .byte   $0A
        .byte   $01
        .byte   $03
        .byte   $0A
        .byte   $12
        .byte   $02
        .byte   $03
        .byte   $12
        .byte   $12
        .byte   $03
        .byte   $03
        .byte   $0A
        .byte   $14
        .byte   $04
        .byte   $03
        .byte   $12
        .byte   $14
        .byte   $05
        .byte   $03
        .byte   $0A
        .byte   $1C
        .byte   $06
        .byte   $03
        .byte   $12
        .byte   $1C
        .byte   $07
        .byte   $03
        .byte   $80
_metasprite2:
        .byte   $12
        .byte   $0A
        .byte   $08
        .byte   $43
        .byte   $0A
        .byte   $0A
        .byte   $09
        .byte   $43
        .byte   $12
        .byte   $12
        .byte   $0A
        .byte   $43
        .byte   $0A
        .byte   $12
        .byte   $0B
        .byte   $43
        .byte   $12
        .byte   $14
        .byte   $0C
        .byte   $43
        .byte   $0A
        .byte   $14
        .byte   $0D
        .byte   $43
        .byte   $12
        .byte   $1C
        .byte   $0E
        .byte   $43
        .byte   $0A
        .byte   $1C
        .byte   $0F
        .byte   $43
        .byte   $80
&nbsp;
.segment        "BSS"
&nbsp;
.segment        "ZEROPAGE"
_i:
        .res    2,$00
_address:
        .res    2,$00
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_ppu_ram (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_ppu_ram: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(NTADR_A(0, 0));</i>
<i>;</i>
        ldx     #$20
        lda     #$00
        jsr     _vram_adr
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 30; i++) {</i>
<i>;</i>
        lda     #$00
        sta     _i
        sta     _i+1
L006C:  lda     _i
        cmp     #$C0
        lda     _i+1
        sbc     #$03
        bvc     L0073
        eor     #$80
L0073:  bpl     L006D
<i>;</i>
<i>; vram_put(36);</i>
<i>;</i>
        lda     #$24
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 30; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0075
        inx
L0075:  sta     _i
        stx     _i+1
        jmp     L006C
<i>;</i>
<i>; }</i>
<i>;</i>
L006D:  rts
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_attributes (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_attributes: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(ATTRIBUTE_TABLE);</i>
<i>;</i>
        ldx     #$23
        lda     #$C0
        jsr     _vram_adr
<i>;</i>
<i>; vram_fill(0, 16);</i>
<i>;</i>
        lda     #$00
        jsr     pusha
        tax
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0x55, 16);</i>
<i>;</i>
        lda     #$55
        jsr     pusha
        ldx     #$00
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0xAA, 16);</i>
<i>;</i>
        lda     #$AA
        jsr     pusha
        ldx     #$00
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0xFF, 16);</i>
<i>;</i>
        lda     #$FF
        jsr     pusha
        ldx     #$00
        lda     #$10
        jmp     _vram_fill

.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ game_loop (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _game_loop: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_wait_nmi();</i>
<i>;</i>
L0088:  jsr     _ppu_wait_nmi
<i>;</i>
<i>; oam_clear();</i>
<i>;</i>
        jsr     _oam_clear
<i>;</i>
<i>; oam_meta_spr(10, 10, metasprite1);</i>
<i>;</i>
        jsr     decsp2
        lda     #$0A
        ldy     #$01
        sta     (sp),y
        dey
        sta     (sp),y
        lda     #&lt;(_metasprite1)
        ldx     #&gt;(_metasprite1)
        jsr     _oam_meta_spr
<i>;</i>
<i>; oam_meta_spr(40, 10, metasprite2);</i>
<i>;</i>
        jsr     decsp2
        lda     #$28
        ldy     #$01
        sta     (sp),y
        lda     #$0A
        dey
        sta     (sp),y
        lda     #&lt;(_metasprite2)
        ldx     #&gt;(_metasprite2)
        jsr     _oam_meta_spr
<i>;</i>
<i>; while (1) {</i>
<i>;</i>
        jmp     L0088
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ main (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _main: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_off();</i>
<i>;</i>
        jsr     _ppu_off
<i>;</i>
<i>; pal_bg(background_palette);</i>
<i>;</i>
        lda     #&lt;(_background_palette)
        ldx     #&gt;(_background_palette)
        jsr     _pal_bg
<i>;</i>
<i>; pal_spr(sprite_palette);</i>
<i>;</i>
        lda     #&lt;(_sprite_palette)
        ldx     #&gt;(_sprite_palette)
        jsr     _pal_spr
<i>;</i>
<i>; bank_bg(1);</i>
<i>;</i>
        lda     #$01
        jsr     _bank_bg
<i>;</i>
<i>; bank_spr(0);</i>
<i>;</i>
        lda     #$00
        jsr     _bank_spr
<i>;</i>
<i>; fill_in_ppu_ram();</i>
<i>;</i>
        jsr     _fill_in_ppu_ram
<i>;</i>
<i>; fill_in_attributes();</i>
<i>;</i>
        jsr     _fill_in_attributes
<i>;</i>
<i>; ppu_on_all();</i>
<i>;</i>
        jsr     _ppu_on_all
<i>;</i>
<i>; game_loop();</i>
<i>;</i>
        jmp     _game_loop
&nbsp;
.endproc
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Herní ovladač NESu: D-pad</h2>

<p>Ovladač pro herní konzoli NES vypadá odlišně než klasický joystick. Najdeme
zde D-pad pro určení čtyř směrů (nebo jejich kombinací) a taktéž čtveřici
tlačítek označených Select, Start, A a B:</p>

<img src="https://i.iinfo.cz/images/388/nes-devel-6-2.jpg" class="image-579693" alt="&#160;" title="Autor: Wikipedia, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="400" height="246" />
<p><i>Obrázek 9: Ovladač pro herní konzoli NES.</i></p>

<p>Vlastní realizace čtení stavu tlačítek na ovladačích NESu není (a to ani
v&nbsp;assembleru) ve skutečnosti nijak složitá. Čtení lze provádět pro oba
ovladače zvlášť; přitom si vystačíme s&nbsp;pouhými dvěma osmibitovými řídicími
registry na adresách $4016 a $4017 (znak $ označuje hexadecimální
konstanty):</p>

<pre>
<i>; Ovladače</i>
JOYPAD1         = $4016
JOYPAD2         = $4017
</pre>

<p>Před čtením stavu tlačítek musíme zachytit jejich stav a uložit ho do
posuvného registru. Budeme tedy vlastně provádět <i>bit banging</i> &ndash;
pomocí SW budeme generovat řídicí signály, zde konkrétně signál
<i>latch</i>:</p>

<pre>
        lda #$01
        sta JOYPAD1        <i>; načtení stavu všech osmi tlačítek do záchytného registru</i>
        lda #$00
        sta JOYPAD1        <i>; začátek načítání jednotlivých bitů se stavy tlačítek v tomto pořadí:</i>
</pre>

<p>Nyní již můžeme postupně přečíst stav jednotlivých tlačítek v&nbsp;pořadí,
které naznačuje následující kód. Pořadí nelze změnit (je dáno pořadím bitů
v&nbsp;posuvném registru):</p>

<pre>
        lda JOYPAD1        <i>; stav tlačítka A jen načteme a ingorujeme</i>
        ...
&nbsp;
        lda JOYPAD1        <i>; stav tlačítka B jen načteme a ingorujeme</i>
        ...
&nbsp;
        lda JOYPAD1        <i>; stav tlačítka Select jen načteme a ingorujeme</i>
        ...
&nbsp;
        lda JOYPAD1        <i>; stav tlačítka Start jen načteme a ingorujeme</i>
        ...
&nbsp;
        lda JOYPAD1        <i>; stav tlačítka Up</i>
        ...
&nbsp;
        lda JOYPAD1        <i>; stav tlačítka Down</i>
        ...
&nbsp;
        lda JOYPAD1        <i>; stav tlačítka Left</i>
        ...
&nbsp;
        lda JOYPAD1        <i>; stav tlačítka Right</i>
        ...
</pre>

<p><div class="rs-tip-major">Poznámka: stejnou operaci lze použít i pro druhý
ovladač.</div></p>

<p>V&nbsp;programovacím jazyku C a při použití knihovny <i>NESlib</i> můžeme
stav ovladače načíst jedinou funkcí nazvanou <strong>pad_poll</strong>, které
se předá index ovladače (tedy 0 nebo 1). Poté již postačuje testovat stav
jednotlivých bitů s&nbsp;využitím těchto konstant:</p>

<pre>
#define PAD_A                   0x80
#define PAD_B                   0x40
#define PAD_SELECT              0x20
#define PAD_START               0x10
#define PAD_UP                  0x08
#define PAD_DOWN                0x04
#define PAD_LEFT                0x02
#define PAD_RIGHT               0x01
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Ovládání (meta)spritů D-padem</h2>

<p>V&nbsp;jazyce C je čtení ovladačů (resp.&nbsp;prvního ovladače) snadné
&ndash; použijeme výše zmíněnou funkci <strong>pad_poll</strong> a budeme
postupně testovat jednotlivé bity reprezentující zvolený směr nebo kombinaci
směrů (&bdquo;šikmo doleva nahoru&ldquo;). Následně na základě této informace
změníme hodnoty globálních proměnných <strong>x</strong> a <strong>y</strong>
použitých pro změnu pozice metaspritu na obrazovce. Celá logika (která navíc
čeká na vykreslení snímků) vypadá takto:</p>

<pre>
#pragma bss-name(push, "ZEROPAGE")
char pad;
int x1 = 10;
int y1 = 20;
int x2 = 20;
&nbsp;
&nbsp;
&nbsp;
void <strong>game_loop</strong>(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
&nbsp;
        pad = pad_poll(0);
&nbsp;
        <i>// úprava pozice prvního metaspritu</i>
        if (pad &amp; PAD_LEFT) {
            x1--;
        }
        if (pad &amp; PAD_RIGHT) {
            x1++;
        }
        if (pad &amp; PAD_UP) {
            y1--;
        }
        if (pad &amp; PAD_DOWN) {
            y1++;
        }
&nbsp;
        <i>// pozice druhého smetapritu &ndash; posun nezávisle na ovladači</i>
        x2--;
        if (x2 == 0) {
            x2 = 256;
        }
&nbsp;
        <i>// změna pozice metaspritů</i>
        oam_meta_spr(x1, y1, metasprite1);
        oam_meta_spr(x2, 10, metasprite2);
    }
}
</pre>

<p>Výsledky mohou vypadat takto:</p>

*** image ***
<p><i>Obrázek 10: První metasprite je ovládán hráčem, druhý metasprite se
pohybuje automaticky.</i></p>

*** image ***
<p><i>Obrázek 11: Takto řeší hardware NESu (PPU) situaci, kdy se sprity nachází
na okraji obrazovky.</i></p>

<p>Celý zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
#include "neslib.h"
&nbsp;
#define ATTRIBUTE_TABLE 0x23c0
&nbsp;
#pragma bss-name(push, "ZEROPAGE")
int i;
int address;
char pad;
int x1 = 10;
int y1 = 20;
int x2 = 20;
&nbsp;
<i>// barvy pozadí</i>
const unsigned char <strong>background_palette</strong>[] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F,
    0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F
};
&nbsp;
<i>// barvy spritů</i>
const unsigned char <strong>sprite_palette</strong>[] = {
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27,
    0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17
};
&nbsp;
<i>// definice prvního metaspritu</i>
const unsigned char <strong>metasprite1</strong>[] = {
    10, 10, 0, 0,
    18, 10, 1, 0,
    10, 18, 2, 0,
    18, 18, 3, 0,
    10, 20, 4, 0,
    18, 20, 5, 0,
    10, 28, 6, 0,
    18, 28, 7, 0,
    128,
};
&nbsp;
<i>// definice druhého metaspritu</i>
const unsigned char <strong>metasprite2</strong>[] = {
    18, 10, 8, 3 | OAM_FLIP_H,
    10, 10, 9, 3 | OAM_FLIP_H,
    18, 18, 10, 3 | OAM_FLIP_H,
    10, 18, 11, 3 | OAM_FLIP_H,
    18, 20, 12, 3 | OAM_FLIP_H,
    10, 20, 13, 3 | OAM_FLIP_H,
    18, 28, 14, 3 | OAM_FLIP_H,
    10, 28, 15, 3 | OAM_FLIP_H,
    128,
};
&nbsp;
void <strong>fill_in_ppu_ram</strong>(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 30; i++) {
        vram_put(36);
    }
}
&nbsp;
void <strong>fill_in_attributes</strong>(void)
{
    vram_adr(ATTRIBUTE_TABLE);

    vram_fill(0, 16);
    vram_fill(0x55, 16);
    vram_fill(0xAA, 16);
    vram_fill(0xFF, 16);
}
&nbsp;
void <strong>game_loop</strong>(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
&nbsp;
        pad = pad_poll(0);
        if (pad &amp; PAD_LEFT) {
            x1--;
        }
        if (pad &amp; PAD_RIGHT) {
            x1++;
        }
        if (pad &amp; PAD_UP) {
            y1--;
        }
        if (pad &amp; PAD_DOWN) {
            y1++;
        }
&nbsp;
        x2--;
        if (x2 == 0) {
            x2 = 256;
        }
&nbsp;
        oam_meta_spr(x1, y1, metasprite1);
        oam_meta_spr(x2, 10, metasprite2);
    }
}
&nbsp;
void <strong>main</strong>(void)
{
    ppu_off();
    pal_bg(background_palette);
    pal_spr(sprite_palette);
    bank_bg(1);
    bank_spr(0);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();
&nbsp;
    game_loop();
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Výsledek překladu do assembleru</h2>

<p>Podívejme se, jak se přeloží tyto tři programové řádky:</p>

<pre>
if (pad &amp; PAD_LEFT) {
    x1--;
}
</pre>

<p>Globální proměnná <strong>x1</strong> je definována jako šestnáctibitová
hodnota, což vede k&nbsp;velmi neoptimálnímu kódu s&nbsp;šestnáctibitovými
aritmetickými operacemi:</p>

<pre>
<i>;</i>
<i>; if (pad &amp; PAD_LEFT) {</i>
<i>;</i>
        and     #$02
        beq     L00C1
<i>;</i>
<i>; x1--;</i>
<i>;</i>
        lda     _x1
        ldx     _x1+1
        sec
        sbc     #$01
        bcs     L0097
        dex
L0097:  sta     _x1
        stx     _x1+1
</pre>

<p><div class="rs-tip-major">Poznámka: po změně <strong>x1</strong> na typ
<strong>unsigned char</strong> je výsledek mnohem lepší:</div></p>

<pre>
<i>;</i>
<i>; if (pad &amp; PAD_LEFT) {</i>
<i>;</i>
        and     #$02
        beq     L00BB
<i>;</i>
<i>; x1--;</i>
<i>;</i>
        dec     _x1
</pre>

<p>Celý kód v&nbsp;assembleru vypadá takto:</p>

<pre>
<i>;</i>
<i>; File generated by cc65 v 2.18 - Ubuntu 2.18-1</i>
<i>;</i>
        .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
        .setcpu         "6502"
        .smart          on
        .autoimport     on
        .case           on
        .debuginfo      off
        .importzp       sp, sreg, regsave, regbank
        .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
        .macpack        longbranch
        .forceimport    __STARTUP__
        .import         _pal_bg
        .import         _pal_spr
        .import         _ppu_wait_nmi
        .import         _ppu_off
        .import         _ppu_on_all
        .import         _oam_clear
        .import         _oam_meta_spr
        .import         _pad_poll
        .import         _bank_spr
        .import         _bank_bg
        .import         _vram_adr
        .import         _vram_put
        .import         _vram_fill
        .export         _i
        .export         _address
        .export         _pad
        .export         _x1
        .export         _y1
        .export         _x2
        .export         _background_palette
        .export         _sprite_palette
        .export         _metasprite1
        .export         _metasprite2
        .export         _fill_in_ppu_ram
        .export         _fill_in_attributes
        .export         _game_loop
        .export         _main
&nbsp;
.segment        "DATA"
&nbsp;
_x1:
        .word   $000A
_y1:
        .word   $0014
_x2:
        .word   $0014
&nbsp;
.segment        "RODATA"
&nbsp;
_background_palette:
        .byte   $22
        .byte   $29
        .byte   $1A
        .byte   $0F
        .byte   $22
        .byte   $36
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $30
        .byte   $21
        .byte   $0F
        .byte   $22
        .byte   $27
        .byte   $17
        .byte   $0F
_sprite_palette:
        .byte   $22
        .byte   $16
        .byte   $27
        .byte   $18
        .byte   $22
        .byte   $1A
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $16
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $0F
        .byte   $36
        .byte   $17
_metasprite1:
        .byte   $0A
        .byte   $0A
        .byte   $00
        .byte   $00
        .byte   $12
        .byte   $0A
        .byte   $01
        .byte   $00
        .byte   $0A
        .byte   $12
        .byte   $02
        .byte   $00
        .byte   $12
        .byte   $12
        .byte   $03
        .byte   $00
        .byte   $0A
        .byte   $14
        .byte   $04
        .byte   $00
        .byte   $12
        .byte   $14
        .byte   $05
        .byte   $00
        .byte   $0A
        .byte   $1C
        .byte   $06
        .byte   $00
        .byte   $12
        .byte   $1C
        .byte   $07
        .byte   $00
        .byte   $80
_metasprite2:
        .byte   $12
        .byte   $0A
        .byte   $08
        .byte   $43
        .byte   $0A
        .byte   $0A
        .byte   $09
        .byte   $43
        .byte   $12
        .byte   $12
        .byte   $0A
        .byte   $43
        .byte   $0A
        .byte   $12
        .byte   $0B
        .byte   $43
        .byte   $12
        .byte   $14
        .byte   $0C
        .byte   $43
        .byte   $0A
        .byte   $14
        .byte   $0D
        .byte   $43
        .byte   $12
        .byte   $1C
        .byte   $0E
        .byte   $43
        .byte   $0A
        .byte   $1C
        .byte   $0F
        .byte   $43
        .byte   $80
&nbsp;
.segment        "BSS"
&nbsp;
.segment        "ZEROPAGE"
_i:
        .res    2,$00
_address:
        .res    2,$00
_pad:
        .res    1,$00
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_ppu_ram (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_ppu_ram: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(NTADR_A(0, 0));</i>
<i>;</i>
        ldx     #$20
        lda     #$00
        jsr     _vram_adr
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 30; i++) {</i>
<i>;</i>
        lda     #$00
        sta     _i
        sta     _i+1
L006F:  lda     _i
        cmp     #$C0
        lda     _i+1
        sbc     #$03
        bvc     L0076
        eor     #$80
L0076:  bpl     L0070
<i>;</i>
<i>; vram_put(36);</i>
<i>;</i>
        lda     #$24
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 30; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0078
        inx
L0078:  sta     _i
        stx     _i+1
        jmp     L006F
<i>;</i>
<i>; }</i>
<i>;</i>
L0070:  rts
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_attributes (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_attributes: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(ATTRIBUTE_TABLE);</i>
<i>;</i>
        ldx     #$23
        lda     #$C0
        jsr     _vram_adr
<i>;</i>
<i>; vram_fill(0, 16);</i>
<i>;</i>
        lda     #$00
        jsr     pusha
        tax
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0x55, 16);</i>
<i>;</i>
        lda     #$55
        jsr     pusha
        ldx     #$00
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0xAA, 16);</i>
<i>;</i>
        lda     #$AA
        jsr     pusha
        ldx     #$00
        lda     #$10
        jsr     _vram_fill
<i>;</i>
<i>; vram_fill(0xFF, 16);</i>
<i>;</i>
        lda     #$FF
        jsr     pusha
        ldx     #$00
        lda     #$10
        jmp     _vram_fill
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ game_loop (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _game_loop: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_wait_nmi();</i>
<i>;</i>
L008B:  jsr     _ppu_wait_nmi
<i>;</i>
<i>; oam_clear();</i>
<i>;</i>
        jsr     _oam_clear
<i>;</i>
<i>; pad = pad_poll(0);</i>
<i>;</i>
        lda     #$00
        jsr     _pad_poll
        sta     _pad
<i>;</i>
<i>; if (pad &amp; PAD_LEFT) {</i>
<i>;</i>
        and     #$02
        beq     L00C1
<i>;</i>
<i>; x1--;</i>
<i>;</i>
        lda     _x1
        ldx     _x1+1
        sec
        sbc     #$01
        bcs     L0097
        dex
L0097:  sta     _x1
        stx     _x1+1
<i>;</i>
<i>; if (pad &amp; PAD_RIGHT) {</i>
<i>;</i>
L00C1:  lda     _pad
        and     #$01
        beq     L00C2
<i>;</i>
<i>; x1++;</i>
<i>;</i>
        lda     _x1
        ldx     _x1+1
        clc
        adc     #$01
        bcc     L009B
        inx
L009B:  sta     _x1
        stx     _x1+1
<i>;</i>
<i>; if (pad &amp; PAD_UP) {</i>
<i>;</i>
L00C2:  lda     _pad
        and     #$08
        beq     L00C3
<i>;</i>
<i>; y1--;</i>
<i>;</i>
        lda     _y1
        ldx     _y1+1
        sec
        sbc     #$01
        bcs     L009F
        dex
L009F:  sta     _y1
        stx     _y1+1
<i>;</i>
<i>; if (pad &amp; PAD_DOWN) {</i>
<i>;</i>
L00C3:  lda     _pad
        and     #$04
        beq     L00A0
<i>;</i>
<i>; y1++;</i>
<i>;</i>
        lda     _y1
        ldx     _y1+1
        clc
        adc     #$01
        bcc     L00A3
        inx
L00A3:  sta     _y1
        stx     _y1+1
<i>;</i>
<i>; x2--;</i>
<i>;</i>
L00A0:  lda     _x2
        ldx     _x2+1
        sec
        sbc     #$01
        bcs     L00A5
        dex
L00A5:  sta     _x2
        stx     _x2+1
<i>;</i>
<i>; if (x2 == 0) {</i>
<i>;</i>
        lda     _x2
        ora     _x2+1
        bne     L00A6
<i>;</i>
<i>; x2 = 256;</i>
<i>;</i>
        ldx     #$01
        sta     _x2
        stx     _x2+1
<i>;</i>
<i>; oam_meta_spr(x1, y1, metasprite1);</i>
<i>;</i>
L00A6:  jsr     decsp2
        lda     _x1
        ldy     #$01
        sta     (sp),y
        lda     _y1
        dey
        sta     (sp),y
        lda     #&lt;(_metasprite1)
        ldx     #&gt;(_metasprite1)
        jsr     _oam_meta_spr
<i>;</i>
<i>; oam_meta_spr(x2, 10, metasprite2);</i>
<i>;</i>
        jsr     decsp2
        lda     _x2
        ldy     #$01
        sta     (sp),y
        lda     #$0A
        dey
        sta     (sp),y
        lda     #&lt;(_metasprite2)
        ldx     #&gt;(_metasprite2)
        jsr     _oam_meta_spr
<i>;</i>
<i>; while (1) {</i>
<i>;</i>
        jmp     L008B
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ main (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _main: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_off();</i>
<i>;</i>
        jsr     _ppu_off
<i>;</i>
<i>; pal_bg(background_palette);</i>
<i>;</i>
        lda     #&lt;(_background_palette)
        ldx     #&gt;(_background_palette)
        jsr     _pal_bg
<i>;</i>
<i>; pal_spr(sprite_palette);</i>
<i>;</i>
        lda     #&lt;(_sprite_palette)
        ldx     #&gt;(_sprite_palette)
        jsr     _pal_spr
<i>;</i>
<i>; bank_bg(1);</i>
<i>;</i>
        lda     #$01
        jsr     _bank_bg
<i>;</i>
<i>; bank_spr(0);</i>
<i>;</i>
        lda     #$00
        jsr     _bank_spr
<i>;</i>
<i>; fill_in_ppu_ram();</i>
<i>;</i>
        jsr     _fill_in_ppu_ram
<i>;</i>
<i>; fill_in_attributes();</i>
<i>;</i>
        jsr     _fill_in_attributes
<i>;</i>
<i>; ppu_on_all();</i>
<i>;</i>
        jsr     _ppu_on_all
<i>;</i>
<i>; game_loop();</i>
<i>;</i>
        jmp     _game_loop
&nbsp;
.endproc
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Scrolling pozadí u herní konzole NES</h2>

<p>Mnohé hry vytvořené pro osmibitovou herní konzoli NES dokážou plynule
pohybovat celým herním pozadím &ndash; <i>scrollovat</i>. Scrolling je prováděn
v&nbsp;horizontálním a/nebo i ve vertikálním směru. Příkladem jsou různé
střílečky, ale i například populární hra Castlevania.</p>

<img src="https://i.iinfo.cz/images/129/nes-devel-9a-1.png" class="image-580438" alt="&#160;" title="Autor: nes, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="512" height="448" />
<p><i>Obrázek 12: Úvodní obrazovka hry Castlevania I na NESu.</i></p>

<p>Nejjednodušší je &bdquo;skokový&ldquo; posun pozadí o šestnáct pixelů
jakýmkoli směrem, protože v&nbsp;tomto případě stačí jen přepsat hodnoty
v&nbsp;tabulce jmen i tabulce atributů (blokový přenos cca 1kB dat). Ovšem již
posun o osm pixelů může kolidovat s&nbsp;tabulkami atributů, protože atributy
jsou uloženy vždy pro čtyři sousední dlaždice. Nás ovšem bude zajímat plynulý
posun pozadí o jednotlivé pixely, což je hardwarem herní konzole NES taktéž
umožněno.</p>

<img src="https://i.iinfo.cz/images/129/nes-devel-9a-2.png" class="image-580439" alt="&#160;" title="Autor: nes, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="512" height="448" />
<p><i>Obrázek 13: Pěkně navržená grafika hry Castlevania I (obrázek má
v&nbsp;tomto případě pouze 15 barev).</i></p>

<p>Jeden z&nbsp;řídicích registrů čipu PPU (tedy grafického řadiče NESu) je
registr nazvaný <strong>SCROLL</strong>, jenž z&nbsp;pohledu mikroprocesoru
leží na adrese $2005. Do tohoto řídicího registru je možné před vykreslením
snímku zapsat dvě po sobě jdoucí hodnoty. První hodnotou je horizontální posun
pozadí v&nbsp;pixelech, druhou hodnotou vertikální posun pozadí, taktéž měřený
v&nbsp;pixelech. Pokud tedy scrolling nechceme používat, měl by konec rutiny
NMI (volané v&nbsp;průběhu VBLANKu, jak již dobře víme), vypadat takto:</p>

<pre>
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení)</i>
&nbsp;
.proc <strong>nmi</strong>
        <strong>lda #</strong>0
        <strong>sta SCROLL</strong>        <i>; zákaz scrollingu</i>
        <strong>sta SCROL</strong>L
        lda #$02          <i>; horní bajt adresy pro přenos + zahájení přenosu</i>
        sta OAM_DMA
        rti               <i>; návrat z přerušení</i>
.endproc
</pre>

<p>V&nbsp;navazujícím textu je ukázáno, jak se scrolling realizuje (a to velmi
snadno) v&nbsp;céčku s&nbsp;využitím knihovny <i>NESlib</i>.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Realizace scrollingu celého pozadí</h2>


*** image ***
<p><i>Obrázek 14: </i></p>

*** image ***
<p><i>Obrázek 15: </i></p>

*** image ***
<p><i>Obrázek 16: </i></p>

*** image ***
<p><i>Obrázek 17: </i></p>

<pre>
<i>#include "neslib.h"</i>

<i>#define ATTRIBUTE_TABLE 0x23c0</i>

<i>#pragma bss-name(push, "ZEROPAGE")</i>
int i;
int address;
char pad;
int scroll_x = 0;
int scroll_y = 0;

const unsigned char <strong>palette</strong>[32] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F, 0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F,     // barvy pozadí
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27, 0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17,     // barvy spritů
};

const unsigned char <strong>nametable</strong>[] = {
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xD0, 0xE8, 0xD1, 0xD0, 0xD1, 0xDE,
    0xD1, 0xD8, 0xD0, 0xD1, 0x26, 0x29, 0x29, 0xDE, 0xD1, 0xD0, 0xD1,
    0xD0, 0xD1, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0x42, 0x42, 0xDB, 0x42, 0xDB,
    0x42, 0xDB, 0xDB, 0x42, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0x42,
    0xDB, 0x42, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDE,
    0xDF, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDE, 0xDF, 0xDB, 0xDB,
    0xE4, 0xE5, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDE, 0x43, 0xDB,
    0x42, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0xDB,
    0xE6, 0xE3, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0x42, 0xDB,
    0xDB, 0xDB, 0xD4, 0xD9, 0x26, 0x29, 0x29, 0xDB, 0xDB, 0xD4, 0xD9,
    0xD4, 0xD9, 0xE7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
    0x95, 0x95, 0x97, 0x98, 0x78, 0x78, 0x78, 0x95, 0x95, 0x97, 0x98,
    0x97, 0x98, 0x95, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,

    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xD0, 0xE8, 0xD1, 0xD0, 0xD1, 0xDE,
    0xD1, 0xD8, 0xD0, 0xD1, 0x26, 0x29, 0x29, 0xDE, 0xD1, 0xD0, 0xD1,
    0xD0, 0xD1, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0x42, 0x42, 0xDB, 0x42, 0xDB,
    0x42, 0xDB, 0xDB, 0x42, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0x42,
    0xDB, 0x42, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDE,
    0xDF, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDE, 0xDF, 0xDB, 0xDB,
    0xE4, 0xE5, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDE, 0x43, 0xDB,
    0x42, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0xDB,
    0xE6, 0xE3, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0x42, 0xDB,
    0xDB, 0xDB, 0xD4, 0xD9, 0x26, 0x29, 0x29, 0xDB, 0xDB, 0xD4, 0xD9,
    0xD4, 0xD9, 0xE7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
    0x95, 0x95, 0x97, 0x98, 0x78, 0x78, 0x78, 0x95, 0x95, 0x97, 0x98,
    0x97, 0x98, 0x95, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,

    0x24, 0x1b, 0x18, 0x18, 0x1d, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x53, 0x54, 0x24, 0x24, 0x24, 0xa7, 0xa8, 0x24, 0x45, 0x45, 0x24,
    0x24, 0x45, 0x45, 0x45, 0x45, 0x53, 0x54, 0x24, 0x24,
    0x24, 0x24, 0xa7, 0xa8, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47,
    0x55, 0x56, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x53, 0x54, 0x24, 0x24, 0x24, 0xa7, 0xa8, 0x24, 0x45, 0x45, 0x24,
    0x24, 0x45, 0x45, 0x45, 0x45, 0x53, 0x54, 0x24, 0x24,
    0x24, 0x24, 0xa7, 0xa8, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47,
    0x55, 0x56, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,
};

const unsigned char <strong>attributes</strong>[64] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xaa, 0xaa, 0xaa, 0xbf, 0xff, 0xaa, 0xff, 0xaa,
    0x55, 0xaa, 0x55, 0xef, 0xff, 0x55, 0xff, 0x55,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

void <strong>fill_in_ppu_ram</strong>(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 24; i++) {
        vram_put(nametable[i]);
    }
    for (i = 0; i &lt; 32 * 6; i++) {
        vram_put(0x24);
    }
    for (i = 0; i &lt; 32 * 24; i++) {
        vram_put(i);
    }
}

void <strong>fill_in_attributes</strong>(void)
{
    vram_adr(ATTRIBUTE_TABLE);

    for (i = 0; i &lt; 8 * 8; i++) {
        vram_put(attributes[i]);
    }
}

void <strong>game_loop</strong>(void)
{
    while (1) {
        ppu_wait_nmi();
        pad = pad_poll(0);
        if (pad &amp; PAD_LEFT) {
            scroll_x--;
        }
        if (pad &amp; PAD_RIGHT) {
            scroll_x++;
        }
        if (pad &amp; PAD_UP) {
            scroll_y--;
        }
        if (pad &amp; PAD_DOWN) {
            scroll_y++;
        }
        scroll(scroll_x, scroll_y);
    }
}

void <strong>main</strong>(void)
{
    ppu_off();
    pal_bg(palette);
    bank_bg(1);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();

    game_loop();
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Výsledek překladu do assembleru</h2>

<p></p>

<pre>
.segment        "ZEROPAGE"
_i:
        .res    2,$00
_address:
        .res    2,$00
_pad:
        .res    1,$00
</pre>

<p></p>

<pre>
<i>;</i>
<i>; pad = pad_poll(0);</i>
<i>;</i>
        lda     #$00
        jsr     _pad_poll
        sta     _pad
</pre>

<p></p>

<pre>
<i>; if (pad &amp; PAD_LEFT) {</i>
<i>;</i>
        and     #$02
        beq     L03CD
<i>;</i>
<i>; scroll_x--;</i>
<i>;</i>
        lda     _scroll_x
        ldx     _scroll_x+1
        sec
        sbc     #$01
        bcs     L03AF
        dex
L03AF:  sta     _scroll_x
        stx     _scroll_x+1
</pre>

<p></p>

<pre>
<i>;</i>
<i>; if (pad &amp; PAD_LEFT) {</i>
<i>;</i>
        and     #$02
        beq     L03D1
<i>;</i>
<i>; scroll_x--;</i>
<i>;</i>
        dec     _scroll_x
</pre>

<pre>
<i>;</i>
<i>; scroll(scroll_x, scroll_y);</i>
<i>;</i>
L03B8:  lda     _scroll_x
        ldx     _scroll_x+1
        jsr     pushax
        lda     _scroll_y
        ldx     _scroll_y+1
        jsr     _scroll
</pre>

<p></p>

<pre>
<i>;</i>
<i>; File generated by cc65 v 2.18 - Ubuntu 2.18-1</i>
<i>;</i>
        .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
        .setcpu         "6502"
        .smart          on
        .autoimport     on
        .case           on
        .debuginfo      off
        .importzp       sp, sreg, regsave, regbank
        .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
        .macpack        longbranch
        .forceimport    __STARTUP__
        .import         _pal_bg
        .import         _ppu_wait_nmi
        .import         _ppu_off
        .import         _ppu_on_all
        .import         _pad_poll
        .import         _scroll
        .import         _bank_bg
        .import         _vram_adr
        .import         _vram_put
        .export         _i
        .export         _address
        .export         _pad
        .export         _scroll_x
        .export         _scroll_y
        .export         _palette
        .export         _nametable
        .export         _attributes
        .export         _fill_in_ppu_ram
        .export         _fill_in_attributes
        .export         _game_loop
        .export         _main
&nbsp;
.segment        "DATA"
&nbsp;
_scroll_x:
        .word   $0000
_scroll_y:
        .word   $0000
&nbsp;
.segment        "RODATA"
&nbsp;
_palette:
        .byte   $22
        .byte   $29
        .byte   $1A
        .byte   $0F
        .byte   $22
        .byte   $36
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $30
        .byte   $21
        .byte   $0F
        .byte   $22
        .byte   $27
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $16
        .byte   $27
        .byte   $18
        .byte   $22
        .byte   $1A
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $16
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $0F
        .byte   $36
        .byte   $17
_nametable:
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $D0
        .byte   $E8
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $DE
        .byte   $D1
        .byte   $D8
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $42
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $E4
        .byte   $E5
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $43
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $E6
        .byte   $E3
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $D4
        .byte   $D9
        .byte   $E7
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $78
        .byte   $78
        .byte   $78
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $97
        .byte   $98
        .byte   $95
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $D0
        .byte   $E8
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $DE
        .byte   $D1
        .byte   $D8
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $42
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $E4
        .byte   $E5
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $43
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $E6
        .byte   $E3
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $D4
        .byte   $D9
        .byte   $E7
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $78
        .byte   $78
        .byte   $78
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $97
        .byte   $98
        .byte   $95
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $1B
        .byte   $18
        .byte   $18
        .byte   $1D
        .byte   $24
        .byte   $25
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $24
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $47
        .byte   $47
        .byte   $24
        .byte   $24
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $24
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $47
        .byte   $47
        .byte   $24
        .byte   $24
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
_attributes:
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $AA
        .byte   $AA
        .byte   $AA
        .byte   $BF
        .byte   $FF
        .byte   $AA
        .byte   $FF
        .byte   $AA
        .byte   $55
        .byte   $AA
        .byte   $55
        .byte   $EF
        .byte   $FF
        .byte   $55
        .byte   $FF
        .byte   $55
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
&nbsp;
.segment        "BSS"
&nbsp;
.segment        "ZEROPAGE"
_i:
        .res    2,$00
_address:
        .res    2,$00
_pad:
        .res    1,$00
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_ppu_ram (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_ppu_ram: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(NTADR_A(0, 0));</i>
<i>;</i>
        ldx     #$20
        lda     #$00
        jsr     _vram_adr
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 24; i++) {</i>
<i>;</i>
        lda     #$00
        sta     _i
        sta     _i+1
L036E:  lda     _i
        cmp     #$00
        lda     _i+1
        sbc     #$03
        bvc     L0375
        eor     #$80
L0375:  asl     a
        lda     #$00
        bcc     L03CA
<i>;</i>
<i>; vram_put(nametable[i]);</i>
<i>;</i>
        lda     #&lt;(_nametable)
        sta     ptr1
        lda     #&gt;(_nametable)
        clc
        adc     _i+1
        sta     ptr1+1
        ldy     _i
        lda     (ptr1),y
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 24; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0377
        inx
L0377:  sta     _i
        stx     _i+1
        jmp     L036E
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 6; i++) {</i>
<i>;</i>
L03CA:  sta     _i
        sta     _i+1
L037B:  lda     _i
        cmp     #$C0
        lda     _i+1
        sbc     #$00
        bvc     L0382
        eor     #$80
L0382:  asl     a
        lda     #$00
        bcc     L03CC
<i>;</i>
<i>; vram_put(0x24);</i>
<i>;</i>
        lda     #$24
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 6; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0384
        inx
L0384:  sta     _i
        stx     _i+1
        jmp     L037B
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 24; i++) {</i>
<i>;</i>
L03CC:  sta     _i
        sta     _i+1
L0387:  lda     _i
        cmp     #$00
        lda     _i+1
        sbc     #$03
        bvc     L038E
        eor     #$80
L038E:  bpl     L0388
<i>;</i>
<i>; vram_put(i);</i>
<i>;</i>
        lda     _i
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 32 * 24; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0390
        inx
L0390:  sta     _i
        stx     _i+1
        jmp     L0387
<i>;</i>
<i>; }</i>
<i>;</i>
L0388:  rts
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ fill_in_attributes (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _fill_in_attributes: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; vram_adr(ATTRIBUTE_TABLE);</i>
<i>;</i>
        ldx     #$23
        lda     #$C0
        jsr     _vram_adr
<i>;</i>
<i>; for (i = 0; i &lt; 8 * 8; i++) {</i>
<i>;</i>
        lda     #$00
        sta     _i
        sta     _i+1
L0396:  lda     _i
        cmp     #$40
        lda     _i+1
        sbc     #$00
        bvc     L039D
        eor     #$80
L039D:  bpl     L0397
<i>;</i>
<i>; vram_put(attributes[i]);</i>
<i>;</i>
        lda     #&lt;(_attributes)
        sta     ptr1
        lda     #&gt;(_attributes)
        clc
        adc     _i+1
        sta     ptr1+1
        ldy     _i
        lda     (ptr1),y
        jsr     _vram_put
<i>;</i>
<i>; for (i = 0; i &lt; 8 * 8; i++) {</i>
<i>;</i>
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L039F
        inx
L039F:  sta     _i
        stx     _i+1
        jmp     L0396
<i>;</i>
<i>; }</i>
<i>;</i>
L0397:  rts
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ game_loop (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _game_loop: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_wait_nmi();</i>
<i>;</i>
L03A4:  jsr     _ppu_wait_nmi
<i>;</i>
<i>; pad = pad_poll(0);</i>
<i>;</i>
        lda     #$00
        jsr     _pad_poll
        sta     _pad
<i>;</i>
<i>; if (pad &amp; PAD_LEFT) {</i>
<i>;</i>
        and     #$02
        beq     L03CD
<i>;</i>
<i>; scroll_x--;</i>
<i>;</i>
        lda     _scroll_x
        ldx     _scroll_x+1
        sec
        sbc     #$01
        bcs     L03AF
        dex
L03AF:  sta     _scroll_x
        stx     _scroll_x+1
<i>;</i>
<i>; if (pad &amp; PAD_RIGHT) {</i>
<i>;</i>
L03CD:  lda     _pad
        and     #$01
        beq     L03CE
<i>;</i>
<i>; scroll_x++;</i>
<i>;</i>
        lda     _scroll_x
        ldx     _scroll_x+1
        clc
        adc     #$01
        bcc     L03B3
        inx
L03B3:  sta     _scroll_x
        stx     _scroll_x+1
<i>;</i>
<i>; if (pad &amp; PAD_UP) {</i>
<i>;</i>
L03CE:  lda     _pad
        and     #$08
        beq     L03CF
<i>;</i>
<i>; scroll_y--;</i>
<i>;</i>
        lda     _scroll_y
        ldx     _scroll_y+1
        sec
        sbc     #$01
        bcs     L03B7
        dex
L03B7:  sta     _scroll_y
        stx     _scroll_y+1
<i>;</i>
<i>; if (pad &amp; PAD_DOWN) {</i>
<i>;</i>
L03CF:  lda     _pad
        and     #$04
        beq     L03B8
<i>;</i>
<i>; scroll_y++;</i>
<i>;</i>
        lda     _scroll_y
        ldx     _scroll_y+1
        clc
        adc     #$01
        bcc     L03BB
        inx
L03BB:  sta     _scroll_y
        stx     _scroll_y+1
<i>;</i>
<i>; scroll(scroll_x, scroll_y);</i>
<i>;</i>
L03B8:  lda     _scroll_x
        ldx     _scroll_x+1
        jsr     pushax
        lda     _scroll_y
        ldx     _scroll_y+1
        jsr     _scroll
<i>;</i>
<i>; while (1) {</i>
<i>;</i>
        jmp     L03A4
&nbsp;
.endproc
&nbsp;
<i>; ---------------------------------------------------------------</i>
<i>; void __near__ main (void)</i>
<i>; ---------------------------------------------------------------</i>
&nbsp;
.segment        "CODE"
&nbsp;
.proc   _main: near
&nbsp;
.segment        "CODE"
&nbsp;
<i>;</i>
<i>; ppu_off();</i>
<i>;</i>
        jsr     _ppu_off
<i>;</i>
<i>; pal_bg(palette);</i>
<i>;</i>
        lda     #&lt;(_palette)
        ldx     #&gt;(_palette)
        jsr     _pal_bg
<i>;</i>
<i>; bank_bg(1);</i>
<i>;</i>
        lda     #$01
        jsr     _bank_bg
<i>;</i>
<i>; fill_in_ppu_ram();</i>
<i>;</i>
        jsr     _fill_in_ppu_ram
<i>;</i>
<i>; fill_in_attributes();</i>
<i>;</i>
        jsr     _fill_in_attributes
<i>;</i>
<i>; ppu_on_all();</i>
<i>;</i>
        jsr     _ppu_on_all
<i>;</i>
<i>; game_loop();</i>
<i>;</i>
        jmp     _game_loop
&nbsp;
.endproc
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. C či assembler?</h2>

<p>Z&nbsp;demonstračních příkladů, které byly <a
href="https://www.root.cz/serialy/vyvoj-her-pro-herni-konzoli-nes/">v&nbsp;tomto
seriálu</a> představeny a jejichž seznam naleznete <a
href="#k19">v&nbsp;devatenácté kapitole</a>, je patrné, do jaké míry se liší
tvorba programů v&nbsp;čistém assembleru (navíc bez použití pomocných knihoven)
a v&nbsp;programovacím jazyku C doplněném o knihovnu <i>NESlib</i>. Aplikace
psané v&nbsp;C jsou nepochybně mnohem kratší, minimálně pokud se zaměříme na
délku zdrojových kódů. Ovšem vygenerovaný strojový kód není příliš optimální a
i při práci v&nbsp;C je nutné znát vlastnosti mikroprocesoru MOS 6502 i
vlastnosti překladače <strong>cc65</strong> &ndash; v&nbsp;opačném případě bude
výsledek jak pomalý, tak i poměrně velký (z&nbsp;pohledu obsazené ROM). Ukazuje
se, že v&nbsp;těchto specifických případech (tedy při tvorbě aplikací pro
osmibitový mikroprocesor, který <i>není</i> navržen pro potřeby vyšších
programovacích jazyků) je pravděpodobně nejlepší kombinace vysokoúrovňového
kódu psaného v&nbsp;C s&nbsp;knihovnami napsanými v&nbsp;assembleru (na
moderních CPU to naproti tomu již zdaleka neplatí, protože tyto čipy jsou
navrženy s&nbsp;ohledem na vlastnosti céčka).</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
demonstrační příklady určené pro překlad a spuštění na osmibitové herní konzoli
NES, které jsou psány v&nbsp;céčku. Vždy se jedná o ucelené a současně i
samostatně použitelné projekty, což mj.&nbsp;znamená, že každý příklad obsahuje
i svoji lokální verzi souboru <strong>crt0.s</strong> a
<strong>neslibu</strong>. Pro překlad je samozřejmě nutné mít nainstalován
překladač <strong>cc65</strong>, assembler <strong>ca65</strong> a linker
<strong>ld65</strong>:</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01_Intro/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/Makefile</a></td></tr>
<tr><td> 2</td><td>01_Intro/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/nrom_32k_vert.cfg</a></td></tr>
<tr><td> 3</td><td>01_Intro/Alpha.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/Alpha.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/Alpha.chr</a></td></tr>
<tr><td> 4</td><td>01_Intro/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/crt0.s</a></td></tr>
<tr><td> 5</td><td>01_Intro/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/neslib.h</a></td></tr>
<tr><td> 6</td><td>01_Intro/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/neslib.s</a></td></tr>
<tr><td> 7</td><td>01_Intro/intro.c</td><td>zdrojový kód prvního demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/intro.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/intro.c</a></td></tr>
<tr><td> 8</td><td>01_Intro/intro.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/intro.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/intro.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>02_PPU_RAM/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/Makefile</a></td></tr>
<tr><td>10</td><td>02_PPU_RAM/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/nrom_32k_vert.cfg</a></td></tr>
<tr><td>11</td><td>02_PPU_RAM/Alpha.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/Alpha.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/Alpha.chr</a></td></tr>
<tr><td>12</td><td>02_PPU_RAM/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/crt0.s</a></td></tr>
<tr><td>13</td><td>02_PPU_RAM/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/neslib.h</a></td></tr>
<tr><td>14</td><td>02_PPU_RAM/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/neslib.s</a></td></tr>
<tr><td>15</td><td>02_PPU_RAM/ppu_ram.c</td><td>zdrojový kód druhého demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/ppu_ram.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/ppu_ram.c</a></td></tr>
<tr><td>16</td><td>02_PPU_RAM/ppu_ram.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/ppu_ram.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/ppu_ram.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>03_Attributes/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/Makefile</a></td></tr>
<tr><td>18</td><td>03_Attributes/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/nrom_32k_vert.cfg</a></td></tr>
<tr><td>19</td><td>03_Attributes/Alpha.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/Alpha.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/Alpha.chr</a></td></tr>
<tr><td>20</td><td>03_Attributes/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/crt0.s</a></td></tr>
<tr><td>21</td><td>03_Attributes/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/neslib.h</a></td></tr>
<tr><td>22</td><td>03_Attributes/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/neslib.s</a></td></tr>
<tr><td>23</td><td>03_Attributes/attributes.c</td><td>zdrojový kód třetího demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/attributes.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/attributes.c</a></td></tr>
<tr><td>24</td><td>03_Attributes/attributes.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/attributes.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/attributes.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>04_Mario_world_A/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/Makefile</a></td></tr>
<tr><td>26</td><td>04_Mario_world_A/nrom_32k_vert.cfg</td>konfigurace paměťových regionů herní konzole NES<td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/nrom_32k_vert.cfg</a></td></tr>
<tr><td>27</td><td>04_Mario_world_A/mario.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario.chr</a></td></tr>
<tr><td>28</td><td>04_Mario_world_A/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/crt0.s</a></td></tr>
<tr><td>29</td><td>04_Mario_world_A/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/neslib.h</a></td></tr>
<tr><td>30</td><td>04_Mario_world_A/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/neslib.s</a></td></tr>
<tr><td>31</td><td>04_Mario_world_A/mario_world.c</td><td>zdrojový kód čtvrtého demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario_world.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario_world.c</a></td></tr>
<tr><td>32</td><td>04_Mario_world_A/mario_world.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario_world.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario_world.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>05_Mario_world_B/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/Makefile</a></td></tr>
<tr><td>34</td><td>05_Mario_world_B/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/nrom_32k_vert.cfg</a></td></tr>
<tr><td>35</td><td>05_Mario_world_B/mario.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario.chr</a></td></tr>
<tr><td>36</td><td>05_Mario_world_B/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/crt0.s</a></td></tr>
<tr><td>37</td><td>05_Mario_world_B/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/neslib.h</a></td></tr>
<tr><td>38</td><td>05_Mario_world_B/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/neslib.s</a></td></tr>
<tr><td>39</td><td>05_Mario_world_B/mario_world.c</td><td>zdrojový kód pátého demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario_world.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario_world.c</a></td></tr>
<tr><td>40</td><td>05_Mario_world_B/mario_world.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario_world.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario_world.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>41</td><td>06_Mario_world_C/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/Makefile</a></td></tr>
<tr><td>42</td><td>06_Mario_world_C/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/nrom_32k_vert.cfg</a></td></tr>
<tr><td>43</td><td>06_Mario_world_C/mario.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/mario.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/mario.chr</a></td></tr>
<tr><td>44</td><td>06_Mario_world_C/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/crt0.s</a></td></tr>
<tr><td>45</td><td>06_Mario_world_C/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/neslib.h</a></td></tr>
<tr><td>46</td><td>06_Mario_world_C/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/neslib.s</a></td></tr>
<tr><td>47</td><td>06_Mario_world_C/mario_world.c</td><td>zdrojový kód šestého demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/mario_world.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/mario_world.c</a></td></tr>
<tr><td>48</td><td>06_Mario_world_C/mario_world.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/mario_world.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/06_Mario_world_C/mario_world.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>49</td><td>07_Hello_world/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/Makefile</a></td></tr>
<tr><td>50</td><td>07_Hello_world/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/nrom_32k_vert.cfg</a></td></tr>
<tr><td>51</td><td>07_Hello_world/Alpha.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/Alpha.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/Alpha.chr</a></td></tr>
<tr><td>52</td><td>07_Hello_world/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/crt0.s</a></td></tr>
<tr><td>53</td><td>07_Hello_world/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/neslib.h</a></td></tr>
<tr><td>54</td><td>07_Hello_world/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/neslib.s</a></td></tr>
<tr><td>55</td><td>07_Hello_world/hello.c</td><td>zdrojový kód sedmého demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/hello.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/hello.c</a></td></tr>
<tr><td>56</td><td>07_Hello_world/hello.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/hello.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/07_Hello_world/hello.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>57</td><td>08_Sprites_A/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/Makefile</a></td></tr>
<tr><td>58</td><td>08_Sprites_A/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/nrom_32k_vert.cfg</a></td></tr>
<tr><td>59</td><td>08_Sprites_A/mario.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/mario.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/mario.chr</a></td></tr>
<tr><td>60</td><td>08_Sprites_A/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/crt0.s</a></td></tr>
<tr><td>61</td><td>08_Sprites_A/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/neslib.h</a></td></tr>
<tr><td>62</td><td>08_Sprites_A/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/neslib.s</a></td></tr>
<tr><td>63</td><td>08_Sprites_A/sprites.c</td><td>zdrojový kód osmého demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/sprites.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/sprites.c</a></td></tr>
<tr><td>64</td><td>08_Sprites_A/sprites.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/sprites.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/08_Sprites_A/sprites.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>65</td><td>09_Sprites_B/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/Makefile</a></td></tr>
<tr><td>66</td><td>09_Sprites_B/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/nrom_32k_vert.cfg</a></td></tr>
<tr><td>67</td><td>09_Sprites_B/mario.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/mario.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/mario.chr</a></td></tr>
<tr><td>68</td><td>09_Sprites_B/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/crt0.s</a></td></tr>
<tr><td>69</td><td>09_Sprites_B/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/neslib.h</a></td></tr>
<tr><td>70</td><td>09_Sprites_B/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/neslib.s</a></td></tr>
<tr><td>71</td><td>09_Sprites_B/sprites.c</td><td>zdrojový kód devátého demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/sprites.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/sprites.c</a></td></tr>
<tr><td>72</td><td>09_Sprites_B/sprites.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/sprites.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/09_Sprites_B/sprites.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>73</td><td>10_Sprites_C/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/Makefile</a></td></tr>
<tr><td>74</td><td>10_Sprites_C/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/nrom_32k_vert.cfg</a></td></tr>
<tr><td>75</td><td>10_Sprites_C/mario.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/mario.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/mario.chr</a></td></tr>
<tr><td>76</td><td>10_Sprites_C/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/crt0.s</a></td></tr>
<tr><td>77</td><td>10_Sprites_C/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/neslib.h</a></td></tr>
<tr><td>78</td><td>10_Sprites_C/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/neslib.s</a></td></tr>
<tr><td>79</td><td>10_Sprites_C/sprites.c</td><td>zdrojový kód desátého demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/sprites.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/sprites.c</a></td></tr>
<tr><td>80</td><td>10_Sprites_C/sprites.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/sprites.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/10_Sprites_C/sprites.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>81</td><td>11_D-pad/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/Makefile</a></td></tr>
<tr><td>82</td><td>11_D-pad/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/nrom_32k_vert.cfg</a></td></tr>
<tr><td>83</td><td>11_D-pad/mario.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/mario.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/mario.chr</a></td></tr>
<tr><td>84</td><td>11_D-pad/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/crt0.s</a></td></tr>
<tr><td>85</td><td>11_D-pad/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/neslib.h</a></td></tr>
<tr><td>86</td><td>11_D-pad/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/neslib.s</a></td></tr>
<tr><td>87</td><td>11_D-pad/d-pad.c</td><td>zdrojový kód jedenáctého demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/d-pad.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/d-pad.c</a></td></tr>
<tr><td>88</td><td>11_D-pad/d-pad.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/d-pad.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/11_D-pad/d-pad.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>89</td><td>12-Scroll/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/Makefile</a></td></tr>
<tr><td>90</td><td>12-Scroll/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/nrom_32k_vert.cfg</a></td></tr>
<tr><td>91</td><td>12-Scroll/mario.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/mario.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/mario.chr</a></td></tr>
<tr><td>92</td><td>12-Scroll/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/crt0.s</a></td></tr>
<tr><td>93</td><td>12-Scroll/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/neslib.h</a></td></tr>
<tr><td>94</td><td>12-Scroll/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/neslib.s</a></td></tr>
<tr><td>95</td><td>12-Scroll/scroll.c</td><td>zdrojový kód dvanáctého demonstračního příkladu psaný v&nbsp;jazyce C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/scroll.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/scroll.c</a></td></tr>
<tr><td>96</td><td>12-Scroll/scroll.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/scroll.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/12-Scroll/scroll.s</a></td></tr>
</table>

<p>Pro úplnost si ještě uveďme odkazy na demonstrační příklady napsané
v&nbsp;assembleru, které jsou určené pro překlad pomocí assembleru
<strong>ca65</strong> (jenž je součástí <strong>cc65</strong>), byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>example01.asm</td><td>zdrojový kód příkladu tvořeného kostrou aplikace pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm</a></td></tr>
<tr><td> 2</td><td>example02.asm</td><td>použití standardní konfigurace linkeru pro konzoli NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example02.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example02.asm</a></td></tr>
<tr><td> 3</td><td>example03.asm</td><td>symbolická jména řídicích registrů PPU</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example03.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example03.asm</a></td></tr>
<tr><td> 4</td><td>example04.asm</td><td>zjednodušený zápis lokálních smyček v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example04.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example04.asm</a></td></tr>
<tr><td> 5</td><td>example05.asm</td><td>zvukový výstup s&nbsp;využitím prvního &bdquo;square&ldquo; kanálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example05.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example05.asm</a></td></tr>
<tr><td> 6</td><td>example06.asm</td><td>použití maker bez parametrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example06.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example06.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>example07.asm</td><td>nastavení barvové palety, zvýšení intenzity zvolené barvové složky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm</a></td></tr>
<tr><td> 8</td><td>example08.asm</td><td>využití operátorů &lt; a &gt;</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm</a></td></tr>
<tr><td> 9</td><td>example09.asm</td><td>vymazání barvové palety realizované makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm</a></td></tr>
<tr><td>10</td><td>example10.asm</td><td>vymazání barvové palety realizované podprogramem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm</a></td></tr>
<tr><td>11</td><td>example11.asm</td><td>nastavení barvové palety pozadí i spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm</a></td></tr>
<tr><td>12</td><td>example12.asm</td><td>refaktoring předchozího příkladu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example12.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example12.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>example13.asm</td><td>zobrazení spritů tvořících Maria</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm</a></td></tr>
<tr><td>14</td><td>example14.asm</td><td>posun spritů, aby se zdůraznila jejich nezávislost</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm</a></td></tr>
<tr><td>15</td><td>example15.asm</td><td>větší množství spritů na obrazovce rozdělených do řádků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm</a></td></tr>
<tr><td>16</td><td>example16.asm</td><td>větší množství spritů na obrazovce na jediném řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example16.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example16.asm</a></td></tr>
<tr><td>17</td><td>example17.asm</td><td>pohyb jednoho spritu pomocí ovladače</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example17.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example17.asm</a></td></tr>
<tr><td>18</td><td>example18.asm</td><td>odvozeno z&nbsp;předchozího příkladu, symbolická jména adres</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example18.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example18.asm</a></td></tr>
<tr><td>19</td><td>example19.asm</td><td>odvozeno z&nbsp;předchozího příkladu, pomocná makra pro pohyb spritu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example19.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example19.asm</a></td></tr>
<tr><td>20</td><td>example20.asm</td><td>pohyb spritu je založen na instrukcích <strong>INC</strong> a <strong>DEC</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example20.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example20.asm</a></td></tr>
<tr><td>21</td><td>example21.asm</td><td>přesun celého Maria (8 spritů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example21.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example21.asm</a></td></tr>
<tr><td>22</td><td>example22.asm</td><td>(rychlá) změna barvové palety spritů tlačítkem A</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example22.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example22.asm</a></td></tr>
<tr><td>23</td><td>example23.asm</td><td>realizace čítače pro snížení frekvence změn barvové palety</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example23.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example23.asm</a></td></tr>
<tr><td>24</td><td>example24.asm</td><td>horizontální a vertikální zrcadlení spritů řízené hráčem stiskem tlačítek</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example24.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example24.asm</a></td></tr>
<tr><td>25</td><td>example25.asm</td><td>definice pozadí a zobrazení pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example25.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example25.asm</a></td></tr>
<tr><td>26</td><td>example26.asm</td><td>zobrazení pozadí i spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example26.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example26.asm</a></td></tr>
<tr><td>27</td><td>example27.asm</td><td>pohyb spritu řízený ovladačem, změna atributů spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example27.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example27.asm</a></td></tr>
<tr><td>28</td><td>example28.asm</td><td>definice pozadí přes téměř celou obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example28.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example28.asm</a></td></tr>
<tr><td>29</td><td>example29.asm</td><td>scrolling pozadí s&nbsp;využitím ovladače</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example29.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example29.asm</a></td></tr>
<tr><td>30</td><td>example30.asm</td><td>zobrazení hodnot offsetů pro pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example30.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example30.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>link.cfg</td><td>konfigurace segmentů pro linker <strong>ld65</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg</a></td></tr>
<tr><td>32</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile</a></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: pro slinkování a spuštění většiny těchto
demonstračních příkladů potřebujete i soubor <a
href="https://github.com/ericdigioia/6502-Assembly-NES-Game-Development-Playground/raw/main/mario.chr">mario.chr</a>.
Ten je stažen automaticky po zadání <strong>make example16</strong> až
<strong>make example30</strong>.</div></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Překladače jazyka C pro historické osmibitové mikroprocesory<br />
<a href="https://www.root.cz/clanky/prekladace-jazyka-c-pro-historicke-osmibitove-mikroprocesory/">https://www.root.cz/clanky/prekladace-jazyka-c-pro-historicke-osmibitove-mikroprocesory/</a>
</li>

<li>Překladače programovacího jazyka C pro historické osmibitové mikroprocesory (2)<br />
<a href="https://www.root.cz/clanky/prekladace-programovaciho-jazyka-c-pro-historicke-osmibitove-mikroprocesory-2/">https://www.root.cz/clanky/prekladace-programovaciho-jazyka-c-pro-historicke-osmibitove-mikroprocesory-2/</a>
</li>

<li>Program a NES game in C<br />
<a href="https://learncgames.com/program-a-nes-game-in-c/">https://learncgames.com/program-a-nes-game-in-c/</a>
</li>

<li>The Thirty Million Line Problem<br />
<a href="https://www.youtube.com/watch?v=kZRE7HIO3vk">https://www.youtube.com/watch?v=kZRE7HIO3vk</a>
</li>

<li>crt0<br />
<a href="https://en.wikipedia.org/wiki/Crt0">https://en.wikipedia.org/wiki/Crt0</a>
</li>

<li>NesDev.org<br />
<a href="https://www.nesdev.org/">https://www.nesdev.org/</a>
</li>

<li>The Sprite Attribute Byte<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-17/">https://www.patater.com/nes-asm-tutorials/day-17/</a>
</li>

<li>How to Program an NES game in C<br />
<a href="https://nesdoug.com/">https://nesdoug.com/</a>
</li>

<li>Cycle reference chart<br />
<a href="https://www.nesdev.org/wiki/Cycle_reference_chart">https://www.nesdev.org/wiki/Cycle_reference_chart</a>
</li>

<li>Getting Started Programming in C: Coding a Retro Game with C Part 2<br />
<a href="https://retrogamecoders.com/getting-started-with-c-cc65/">https://retrogamecoders.com/getting-started-with-c-cc65/</a>
</li>

<li>NES game development in 6502 assembly - Part 1<br />
<a href="https://kibrit.tech/en/blog/nes-game-development-part-1">https://kibrit.tech/en/blog/nes-game-development-part-1</a>
</li>

<li>NES (Nintendo Entertainment System) controller pinout<br />
<a href="https://pinoutguide.com/Game/NES_controller_pinout.shtml">https://pinoutguide.com/Game/NES_controller_pinout.shtml</a>
</li>

<li>NES Controller Shift Register<br />
<a href="https://www.allaboutcircuits.com/uploads/articles/nes-controller-arduino.png?v=1469416980041">https://www.allaboutcircuits.com/uploads/articles/nes-controller-arduino.png?v=1469416980041</a>
</li>

<li>"Game Development in Eight Bits" by Kevin Zurawel<br />
<a href="https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4">https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4</a>
</li>

<li>Game Development for the 8-bit NES: A class by Bob Rost<br />
<a href="http://bobrost.com/nes/">http://bobrost.com/nes/</a>
</li>

<li>Game Development for the 8-bit NES: Lecture Notes<br />
<a href="http://bobrost.com/nes/lectures.php">http://bobrost.com/nes/lectures.php</a>
</li>

<li>NES Graphics Explained<br />
<a href="https://www.youtube.com/watch?v=7Co_8dC2zb8">https://www.youtube.com/watch?v=7Co_8dC2zb8</a>
</li>

<li>NES GAME PROGRAMMING PART 1<br />
<a href="https://rpgmaker.net/tutorials/227/?post=240020">https://rpgmaker.net/tutorials/227/?post=240020</a>
</li>

<li>NES 6502 Programming Tutorial - Part 1: Getting Started<br />
<a href="https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/">https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/</a>
</li>

<li>Minimal NES example using ca65<br />
<a href="https://github.com/bbbradsmith/NES-ca65-example">https://github.com/bbbradsmith/NES-ca65-example</a>
</li>

<li>List of 6502-based Computers and Consoles<br />
<a href="https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/">https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/</a>
</li>

<li>History of video game consoles (second generation): Wikipedia<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)</a>
</li>

<li>6502 - the first RISC &micro;P<br />
<a href="http://ericclever.com/6500/">http://ericclever.com/6500/</a>
</li>

<li>3 Generations of Game Machine Architecture<br />
<a href="http://www.atariarchives.org/dev/CGEXPO99.html">http://www.atariarchives.org/dev/CGEXPO99.html</a>
</li>

<li>bee - The Multi-Console Emulator<br />
<a href="http://www.thebeehive.ws/">http://www.thebeehive.ws/</a>
</li>

<li>Nerdy Nights Mirror<br />
<a href="https://nerdy-nights.nes.science/">https://nerdy-nights.nes.science/</a>
</li>

<li>The Nerdy Nights ca65 Remix<br />
<a href="https://github.com/ddribin/nerdy-nights">https://github.com/ddribin/nerdy-nights</a>
</li>

<li>NES Development Day 1: Creating a ROM<br />
<a href="https://www.moria.us/blog/2018/03/nes-development">https://www.moria.us/blog/2018/03/nes-development</a>
</li>

<li>How to Start Making NES Games<br />
<a href="https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/">https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>cc65 Users Guide<br />
<a href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>
</li>

<li>ld65 Users Guide<br />
<a href="https://cc65.github.io/doc/ld65.html">https://cc65.github.io/doc/ld65.html</a>
</li>

<li>da65 Users Guide<br />
<a href="https://cc65.github.io/doc/da65.html">https://cc65.github.io/doc/da65.html</a>
</li>

<li>Nocash NES Specs<br />
<a href="http://nocash.emubase.de/everynes.htm">http://nocash.emubase.de/everynes.htm</a>
</li>

<li>Nintendo Entertainment System<br />
<a href="http://cs.wikipedia.org/wiki/NES">http://cs.wikipedia.org/wiki/NES</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>NesDev<br />
<a href="http://nesdev.parodius.com/">http://nesdev.parodius.com/</a>
</li>

<li>2A03 technical reference<br />
<a href="http://nesdev.parodius.com/2A03%20technical%20reference.txt">http://nesdev.parodius.com/2A03%20technical%20reference.txt</a>
</li>

<li>NES Dev wiki: 2A03<br />
<a href="http://wiki.nesdev.com/w/index.php/2A03">http://wiki.nesdev.com/w/index.php/2A03</a>
</li>

<li>Ricoh 2A03<br />
<a href="http://en.wikipedia.org/wiki/Ricoh_2A03">http://en.wikipedia.org/wiki/Ricoh_2A03</a>
</li>

<li>2A03 pinouts<br />
<a href="http://nesdev.parodius.com/2A03_pinout.txt">http://nesdev.parodius.com/2A03_pinout.txt</a>
</li>

<li>27c3: Reverse Engineering the MOS 6502 CPU (en)<br />
<a href="https://www.youtube.com/watch?v=fWqBmmPQP40">https://www.youtube.com/watch?v=fWqBmmPQP40</a>
</li>

<li>“Hello, world” from scratch on a 6502 — Part 1<br />
<a href="https://www.youtube.com/watch?v=LnzuMJLZRdU">https://www.youtube.com/watch?v=LnzuMJLZRdU</a>
</li>

<li>A Tour of 6502 Cross-Assemblers<br />
<a href="https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/">https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/</a>
</li>

<li>Nintendo Entertainment System (NES)<br />
<a href="https://8bitworkshop.com/docs/platforms/nes/">https://8bitworkshop.com/docs/platforms/nes/</a>
</li>

<li>Question about NES vectors and PPU<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t4154.xhtml">https://archive.nes.science/nesdev-forums/f10/t4154.xhtml</a>
</li>

<li>How do mapper chips actually work?<br />
<a href="https://archive.nes.science/nesdev-forums/f9/t13125.xhtml">https://archive.nes.science/nesdev-forums/f9/t13125.xhtml</a>
</li>

<li>INES<br />
<a href="https://www.nesdev.org/wiki/INES">https://www.nesdev.org/wiki/INES</a>
</li>

<li>NES Basics and Our First Game<br />
<a href="http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html">http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html</a>
</li>

<li>Where is the reset vector in a .nes file?<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t17413.xhtml">https://archive.nes.science/nesdev-forums/f10/t17413.xhtml</a>
</li>

<li>CPU memory map<br />
<a href="https://www.nesdev.org/wiki/CPU_memory_map">https://www.nesdev.org/wiki/CPU_memory_map</a>
</li>

<li>How to make NES music<br />
<a href="http://blog.snugsound.com/2008/08/how-to-make-nes-music.html">http://blog.snugsound.com/2008/08/how-to-make-nes-music.html</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>MIDINES<br />
<a href="http://www.wayfar.net/0xf00000_overview.php">http://www.wayfar.net/0xf00000_overview.php</a>
</li>

<li>FamiTracker<br />
<a href="http://famitracker.com/">http://famitracker.com/</a>
</li>

<li>nerdTracker II<br />
<a href="http://nesdev.parodius.com/nt2/">http://nesdev.parodius.com/nt2/</a>
</li>

<li>How NES Graphics work<br />
<a href="http://nesdev.parodius.com/nesgfx.txt">http://nesdev.parodius.com/nesgfx.txt</a>
</li>

<li>NES Technical/Emulation/Development FAQ<br />
<a href="http://nesdev.parodius.com/NESTechFAQ.htm">http://nesdev.parodius.com/NESTechFAQ.htm</a>
</li>

<li>Adventures with ca65<br />
<a href="https://atariage.com/forums/topic/312451-adventures-with-ca65/">https://atariage.com/forums/topic/312451-adventures-with-ca65/</a>
</li>

<li>example ca65 startup code<br />
<a href="https://atariage.com/forums/topic/209776-example-ca65-startup-code/">https://atariage.com/forums/topic/209776-example-ca65-startup-code/</a>
</li>

<li>6502 PRIMER: Building your own 6502 computer<br />
<a href="http://wilsonminesco.com/6502primer/">http://wilsonminesco.com/6502primer/</a>
</li>

<li>6502 Instruction Set<br />
<a href="https://www.masswerk.at/6502/6502_instruction_set.html">https://www.masswerk.at/6502/6502_instruction_set.html</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Single-board computer<br />
<a href="https://en.wikipedia.org/wiki/Single-board_computer">https://en.wikipedia.org/wiki/Single-board_computer</a>
</li>

<li>www.6502.org<br />
<a href="http://www.6502­.org/">http://www.6502­.org/</a>
</li>

<li>6502 PRIMER: Building your own 6502 computer &ndash; clock generator<br />
<a href="http://wilsonminesco.com/6502primer/ClkGen.html">http://wilsonminesco.com/6502primer/ClkGen.html</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://www.cpushack.com/CPU/cpu.html">http://www.cpushack.com/CPU/cpu.html</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Osmibitové mikroprocesory a mikrořadiče firmy Motorola (1)<br />
<a href="https://www.root.cz/clanky/osmibitove-mikroprocesory-a-mikroradice-firmy-motorola-1/">https://www.root.cz/clanky/osmibitove-mikroprocesory-a-mikroradice-firmy-motorola-1/</a>
</li>

<li>Mikrořadiče a jejich použití v jednoduchých mikropočítačích<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-pouziti-v-jednoduchych-mikropocitacich/">https://www.root.cz/clanky/mikroradice-a-jejich-pouziti-v-jednoduchych-mikropocitacich/</a>
</li>

<li>Mikrořadiče a jejich aplikace v jednoduchých mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/">https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Comparison of instruction set architectures<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures">https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures</a>
</li>

<li>Day 1 - Beginning NES Assembly<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-1/">https://www.patater.com/nes-asm-tutorials/day-1/</a>
</li>

<li>Day 2 - A Source Code File's Structure<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-2/">https://www.patater.com/nes-asm-tutorials/day-2/</a>
</li>

<li>Assembly Language Misconceptions<br />
<a href="https://www.youtube.com/watch?v=8_0tbkbSGRE">https://www.youtube.com/watch?v=8_0tbkbSGRE</a>
</li>

<li>How Machine Language Works<br />
<a href="https://www.youtube.com/watch?v=HWpi9n2H3kE">https://www.youtube.com/watch?v=HWpi9n2H3kE</a>
</li>

<li>Super Mario Bros. (1985) Full Walkthrough NES Gameplay [Nostalgia]<br />
<a href="https://www.youtube.com/watch?v=rLl9XBg7wSs">https://www.youtube.com/watch?v=rLl9XBg7wSs</a>
</li>

<li>[Longplay] Castlevania (NES) - All Secrets, No Deaths<br />
<a href="https://www.youtube.com/watch?v=mOTUVXrAOE8">https://www.youtube.com/watch?v=mOTUVXrAOE8</a>
</li>

<li>Herní série Castlevania<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-24-cast-hry-pro-konzoli-nes/#k07">https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-24-cast-hry-pro-konzoli-nes/#k07</a>
</li>

<li>Nestopia na Sourceforge<br />
<a href="https://nestopia.sourceforge.net/">https://nestopia.sourceforge.net/</a>
</li>

<li>Nestopia UE<br />
<a href="http://0ldsk00l.ca/nestopia/">http://0ldsk00l.ca/nestopia/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

