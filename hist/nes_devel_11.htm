<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vývoj pro osmibitovou herní konzoli NES s využitím překladače jazyka C (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vývoj pro osmibitovou herní konzoli NES s využitím překladače jazyka C (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Vývoj pro osmibitovou herní konzoli NES s&nbsp;využitím překladače jazyka C (dokončení)</a></p>
<p><a href="#k02">*** 2. Definice pozadí a atributové mapy přímo v&nbsp;jazyku C</a></p>
<p><a href="#k03">*** 3. Výsledek překladu do assembleru</a></p>
<p><a href="#k04">*** 4. Výpis řetězce na obrazovku NESu</a></p>
<p><a href="#k05">*** 5. Výsledek překladu do assembleru</a></p>
<p><a href="#k06">*** 6. Zobrazení spritů kódem psaným v&nbsp;céčku</a></p>
<p><a href="#k07">*** 7. Výsledek překladu do assembleru</a></p>
<p><a href="#k08">*** 8. Definice a použití metaspritů</a></p>
<p><a href="#k09">*** 9. Výsledek překladu do assembleru</a></p>
<p><a href="#k10">*** 10. Atributy spritů a metaspritů</a></p>
<p><a href="#k11">*** 11. Výsledek překladu do assembleru</a></p>
<p><a href="#k12">*** 12. Ovládání (meta)spritů D-padem</a></p>
<p><a href="#k13">*** 13. Výsledek překladu do assembleru</a></p>
<p><a href="#k14">*** 14. Scrolling celého pozadí</a></p>
<p><a href="#k15">*** 15. Výsledek překladu do assembleru</a></p>
<p><a href="#k16">*** 16. C či assembler?</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vývoj pro osmibitovou herní konzoli NES s&nbsp;využitím překladače jazyka C (dokončení)</h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Definice pozadí a atributové mapy přímo v&nbsp;jazyku C</h2>

<p></p>

<pre>
#include "neslib.h"

#define ATTRIBUTE_TABLE 0x23c0

#pragma bss-name(push, "ZEROPAGE")
int i;
int address;

const unsigned char palette[32] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F, 0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F,     // barvy pozadí
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27, 0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17,     // barvy spritů
};

const unsigned char nametable[] = {
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xD0, 0xE8, 0xD1, 0xD0, 0xD1, 0xDE,
        0xD1, 0xD8, 0xD0, 0xD1, 0x26, 0x29, 0x29, 0xDE, 0xD1, 0xD0, 0xD1,
        0xD0, 0xD1, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0x42, 0x42, 0xDB, 0x42, 0xDB,
        0x42, 0xDB, 0xDB, 0x42, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0x42,
        0xDB, 0x42, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDE,
        0xDF, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDE, 0xDF, 0xDB, 0xDB,
        0xE4, 0xE5, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDE, 0x43, 0xDB,
        0x42, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0xDB,
        0xE6, 0xE3, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0x42, 0xDB,
        0xDB, 0xDB, 0xD4, 0xD9, 0x26, 0x29, 0x29, 0xDB, 0xDB, 0xD4, 0xD9,
        0xD4, 0xD9, 0xE7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
        0x95, 0x95, 0x97, 0x98, 0x78, 0x78, 0x78, 0x95, 0x95, 0x97, 0x98,
        0x97, 0x98, 0x95, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,

    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xD0, 0xE8, 0xD1, 0xD0, 0xD1, 0xDE,
        0xD1, 0xD8, 0xD0, 0xD1, 0x26, 0x29, 0x29, 0xDE, 0xD1, 0xD0, 0xD1,
        0xD0, 0xD1, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0x42, 0x42, 0xDB, 0x42, 0xDB,
        0x42, 0xDB, 0xDB, 0x42, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0x42,
        0xDB, 0x42, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDE,
        0xDF, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDE, 0xDF, 0xDB, 0xDB,
        0xE4, 0xE5, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDE, 0x43, 0xDB,
        0x42, 0xDB, 0xDB, 0xDB, 0x26, 0x29, 0x29, 0xDB, 0x42, 0xDB, 0xDB,
        0xE6, 0xE3, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xDB, 0xDB, 0xDB, 0xDB, 0x42, 0xDB,
        0xDB, 0xDB, 0xD4, 0xD9, 0x26, 0x29, 0x29, 0xDB, 0xDB, 0xD4, 0xD9,
        0xD4, 0xD9, 0xE7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
        0x95, 0x95, 0x97, 0x98, 0x78, 0x78, 0x78, 0x95, 0x95, 0x97, 0x98,
        0x97, 0x98, 0x95, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,

    0x24, 0x1b, 0x18, 0x18, 0x1d, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x53, 0x54, 0x24, 0x24, 0x24, 0xa7, 0xa8, 0x24, 0x45, 0x45, 0x24,
        0x24, 0x45, 0x45, 0x45, 0x45, 0x53, 0x54, 0x24, 0x24,
    0x24, 0x24, 0xa7, 0xa8, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47,
        0x55, 0x56, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0xa5, 0xa6, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x53, 0x54, 0x24, 0x24, 0x24, 0xa7, 0xa8, 0x24, 0x45, 0x45, 0x24,
        0x24, 0x45, 0x45, 0x45, 0x45, 0x53, 0x54, 0x24, 0x24,
    0x24, 0x24, 0xa7, 0xa8, 0x47, 0x47, 0x24, 0x24, 0x47, 0x47, 0x47, 0x47,
        0x55, 0x56, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
        0x24, 0x24, 0x24, 0x24, 0x24, 0x55, 0x56, 0x24, 0x24,
};

const unsigned char attributes[64] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xaa, 0xaa, 0xaa, 0xbf, 0xff, 0xaa, 0xff, 0xaa,
    0x55, 0xaa, 0x55, 0xef, 0xff, 0x55, 0xff, 0x55,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

void fill_in_ppu_ram(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 24; i++) {
        vram_put(nametable[i]);
    }
    for (i = 0; i &lt; 32 * 6; i++) {
        vram_put(0x24);
    }
}

void fill_in_attributes(void)
{
    vram_adr(ATTRIBUTE_TABLE);

    for (i = 0; i &lt; 8 * 8; i++) {
        vram_put(attributes[i]);
    }
}

void game_loop(void)
{
    while (1) {
    }
}

void main(void)
{
    ppu_off();
    pal_bg(palette);
    bank_bg(1);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();

    game_loop();
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Výsledek překladu do assembleru</h2>

<p></p>

<pre>
;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
        .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
        .setcpu         "6502"
        .smart          on
        .autoimport     on
        .case           on
        .debuginfo      off
        .importzp       sp, sreg, regsave, regbank
        .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
        .macpack        longbranch
        .forceimport    __STARTUP__
        .import         _pal_bg
        .import         _ppu_off
        .import         _ppu_on_all
        .import         _bank_bg
        .import         _vram_adr
        .import         _vram_put
        .export         _i
        .export         _address
        .export         _palette
        .export         _nametable
        .export         _attributes
        .export         _fill_in_ppu_ram
        .export         _fill_in_attributes
        .export         _game_loop
        .export         _main

.segment        "RODATA"

_palette:
        .byte   $22
        .byte   $29
        .byte   $1A
        .byte   $0F
        .byte   $22
        .byte   $36
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $30
        .byte   $21
        .byte   $0F
        .byte   $22
        .byte   $27
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $16
        .byte   $27
        .byte   $18
        .byte   $22
        .byte   $1A
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $16
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $0F
        .byte   $36
        .byte   $17
_nametable:
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $D0
        .byte   $E8
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $DE
        .byte   $D1
        .byte   $D8
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $42
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $E4
        .byte   $E5
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $43
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $E6
        .byte   $E3
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $D4
        .byte   $D9
        .byte   $E7
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $78
        .byte   $78
        .byte   $78
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $97
        .byte   $98
        .byte   $95
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $D0
        .byte   $E8
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $DE
        .byte   $D1
        .byte   $D8
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $D0
        .byte   $D1
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $42
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $42
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DE
        .byte   $DF
        .byte   $DB
        .byte   $DB
        .byte   $E4
        .byte   $E5
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DE
        .byte   $43
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $E6
        .byte   $E3
        .byte   $26
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $42
        .byte   $DB
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $26
        .byte   $29
        .byte   $29
        .byte   $DB
        .byte   $DB
        .byte   $D4
        .byte   $D9
        .byte   $D4
        .byte   $D9
        .byte   $E7
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $78
        .byte   $78
        .byte   $78
        .byte   $95
        .byte   $95
        .byte   $97
        .byte   $98
        .byte   $97
        .byte   $98
        .byte   $95
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $1B
        .byte   $18
        .byte   $18
        .byte   $1D
        .byte   $24
        .byte   $25
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $24
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $47
        .byte   $47
        .byte   $24
        .byte   $24
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A5
        .byte   $A6
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $24
        .byte   $24
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $45
        .byte   $53
        .byte   $54
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $A7
        .byte   $A8
        .byte   $47
        .byte   $47
        .byte   $24
        .byte   $24
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $47
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $24
        .byte   $55
        .byte   $56
        .byte   $24
        .byte   $24
_attributes:
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $FF
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $AA
        .byte   $AA
        .byte   $AA
        .byte   $BF
        .byte   $FF
        .byte   $AA
        .byte   $FF
        .byte   $AA
        .byte   $55
        .byte   $AA
        .byte   $55
        .byte   $EF
        .byte   $FF
        .byte   $55
        .byte   $FF
        .byte   $55
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00
        .byte   $00

.segment        "BSS"

.segment        "ZEROPAGE"
_i:
        .res    2,$00
_address:
        .res    2,$00

; ---------------------------------------------------------------
; void __near__ fill_in_ppu_ram (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _fill_in_ppu_ram: near

.segment        "CODE"

;
; vram_adr(NTADR_A(0, 0));
;
        ldx     #$20
        lda     #$00
        jsr     _vram_adr
;
; for (i = 0; i < 32 * 24; i++) {
;
        lda     #$00
        sta     _i
        sta     _i+1
L036C:  lda     _i
        cmp     #$00
        lda     _i+1
        sbc     #$03
        bvc     L0373
        eor     #$80
L0373:  asl     a
        lda     #$00
        bcc     L03A5
;
; vram_put(nametable[i]);
;
        lda     #<(_nametable)
        sta     ptr1
        lda     #>(_nametable)
        clc
        adc     _i+1
        sta     ptr1+1
        ldy     _i
        lda     (ptr1),y
        jsr     _vram_put
;
; for (i = 0; i < 32 * 24; i++) {
;
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0375
        inx
L0375:  sta     _i
        stx     _i+1
        jmp     L036C
;
; for (i = 0; i < 32 * 6; i++) {
;
L03A5:  sta     _i
        sta     _i+1
L0379:  lda     _i
        cmp     #$C0
        lda     _i+1
        sbc     #$00
        bvc     L0380
        eor     #$80
L0380:  bpl     L037A
;
; vram_put(0x24);
;
        lda     #$24
        jsr     _vram_put
;
; for (i = 0; i < 32 * 6; i++) {
;
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0382
        inx
L0382:  sta     _i
        stx     _i+1
        jmp     L0379
;
; }
;
L037A:  rts

.endproc

; ---------------------------------------------------------------
; void __near__ fill_in_attributes (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _fill_in_attributes: near

.segment        "CODE"

;
; vram_adr(ATTRIBUTE_TABLE);
;
        ldx     #$23
        lda     #$C0
        jsr     _vram_adr
;
; for (i = 0; i < 8 * 8; i++) {
;
        lda     #$00
        sta     _i
        sta     _i+1
L0388:  lda     _i
        cmp     #$40
        lda     _i+1
        sbc     #$00
        bvc     L038F
        eor     #$80
L038F:  bpl     L0389
;
; vram_put(attributes[i]);
;
        lda     #<(_attributes)
        sta     ptr1
        lda     #>(_attributes)
        clc
        adc     _i+1
        sta     ptr1+1
        ldy     _i
        lda     (ptr1),y
        jsr     _vram_put
;
; for (i = 0; i < 8 * 8; i++) {
;
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0391
        inx
L0391:  sta     _i
        stx     _i+1
        jmp     L0388
;
; }
;
L0389:  rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _game_loop: near

.segment        "CODE"

;
; while (1) {
;
L03A6:  jmp     L03A6

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _main: near

.segment        "CODE"

;
; ppu_off();
;
        jsr     _ppu_off
;
; pal_bg(palette);
;
        lda     #<(_palette)
        ldx     #>(_palette)
        jsr     _pal_bg
;
; bank_bg(1);
;
        lda     #$01
        jsr     _bank_bg
;
; fill_in_ppu_ram();
;
        jsr     _fill_in_ppu_ram
;
; fill_in_attributes();
;
        jsr     _fill_in_attributes
;
; ppu_on_all();
;
        jsr     _ppu_on_all
;
; game_loop();
;
        jmp     _game_loop

.endproc
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výpis řetězce na obrazovku NESu</h2>

<p></p>

<pre>
#include "neslib.h"

#pragma bss-name(push, "ZEROPAGE")

unsigned char i;

const unsigned char text[] = "Hello World!";

const unsigned char palette[] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F, 0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F,     // barvy pozadí
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27, 0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17,     // barvy spritů
};

void game_loop(void)
{
    while (1) {
    }
}

void print_on_screen(void)
{
    vram_adr(NTADR_A(10, 14));

    i = 0;
    while (text[i]) {
        vram_put(text[i]);
        i++;
    }
}

void main(void)
{
    ppu_off();
    pal_bg(palette);
    bank_bg(0);
    print_on_screen();
    ppu_on_all();

    game_loop();
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Výsledek překladu do assembleru</h2>

<p></p>

<pre>
;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
        .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
        .setcpu         "6502"
        .smart          on
        .autoimport     on
        .case           on
        .debuginfo      off
        .importzp       sp, sreg, regsave, regbank
        .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
        .macpack        longbranch
        .forceimport    __STARTUP__
        .import         _pal_bg
        .import         _ppu_off
        .import         _ppu_on_all
        .import         _bank_bg
        .import         _vram_adr
        .import         _vram_put
        .export         _i
        .export         _text
        .export         _palette
        .export         _game_loop
        .export         _print_on_screen
        .export         _main

.segment        "RODATA"

_text:
        .byte   $48,$65,$6C,$6C,$6F,$20,$57,$6F,$72,$6C,$64,$21,$00
_palette:
        .byte   $22
        .byte   $29
        .byte   $1A
        .byte   $0F
        .byte   $22
        .byte   $36
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $30
        .byte   $21
        .byte   $0F
        .byte   $22
        .byte   $27
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $16
        .byte   $27
        .byte   $18
        .byte   $22
        .byte   $1A
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $16
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $0F
        .byte   $36
        .byte   $17

.segment        "BSS"

.segment        "ZEROPAGE"
_i:
        .res    1,$00

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _game_loop: near

.segment        "CODE"

;
; while (1) {
;
L0046:  jmp     L0046

.endproc

; ---------------------------------------------------------------
; void __near__ print_on_screen (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _print_on_screen: near

.segment        "CODE"

;
; vram_adr(NTADR_A(10, 14));
;
        ldx     #$21
        lda     #$CA
        jsr     _vram_adr
;
; i = 0;
;
        lda     #$00
        sta     _i
;
; while (text[i]) {
;
        jmp     L0034
;
; vram_put(text[i]);
;
L0032:  ldy     _i
        lda     _text,y
        jsr     _vram_put
;
; i++;
;
        inc     _i
;
; while (text[i]) {
;
L0034:  ldy     _i
        lda     _text,y
        bne     L0032
;
; }
;
        rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _main: near

.segment        "CODE"

;
; ppu_off();
;
        jsr     _ppu_off
;
; pal_bg(palette);
;
        lda     #<(_palette)
        ldx     #>(_palette)
        jsr     _pal_bg
;
; bank_bg(0);
;
        lda     #$00
        jsr     _bank_bg
;
; print_on_screen();
;
        jsr     _print_on_screen
;
; ppu_on_all();
;
        jsr     _ppu_on_all
;
; game_loop();
;
        jmp     _game_loop

.endproc
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení spritů kódem psaným v&nbsp;céčku</h2>

<p></p>

<pre>
#include "neslib.h"

#define ATTRIBUTE_TABLE 0x23c0

#pragma bss-name(push, "ZEROPAGE")
int i;
int address;

// barvy pozadí
const unsigned char background_palette[] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F,
    0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F
};

// barvy spritů
const unsigned char sprite_palette[] = {
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27,
    0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17
};


void fill_in_ppu_ram(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 30; i++) {
        vram_put(36);
    }
}

void fill_in_attributes(void)
{
    vram_adr(ATTRIBUTE_TABLE);

    vram_fill(0, 16);
    vram_fill(0x55, 16);
    vram_fill(0xAA, 16);
    vram_fill(0xFF, 16);
}

void game_loop(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
        oam_spr(10, 10, 0, 0);
        oam_spr(18, 10, 1, 0);
        oam_spr(10, 18, 2, 0);
        oam_spr(18, 18, 3, 0);
        oam_spr(10, 20, 4, 0);
        oam_spr(18, 20, 5, 0);
        oam_spr(10, 28, 6, 0);
        oam_spr(18, 28, 7, 0);
    }
}

void main(void)
{
    ppu_off();
    pal_bg(background_palette);
    pal_spr(sprite_palette);
    bank_bg(1);
    bank_spr(0);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();

    game_loop();
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výsledek překladu do assembleru</h2>

<p></p>

<pre>
;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
        .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
        .setcpu         "6502"
        .smart          on
        .autoimport     on
        .case           on
        .debuginfo      off
        .importzp       sp, sreg, regsave, regbank
        .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
        .macpack        longbranch
        .forceimport    __STARTUP__
        .import         _pal_bg
        .import         _pal_spr
        .import         _ppu_wait_nmi
        .import         _ppu_off
        .import         _ppu_on_all
        .import         _oam_clear
        .import         _oam_spr
        .import         _bank_spr
        .import         _bank_bg
        .import         _vram_adr
        .import         _vram_put
        .import         _vram_fill
        .export         _i
        .export         _address
        .export         _background_palette
        .export         _sprite_palette
        .export         _fill_in_ppu_ram
        .export         _fill_in_attributes
        .export         _game_loop
        .export         _main

.segment        "RODATA"

_background_palette:
        .byte   $22
        .byte   $29
        .byte   $1A
        .byte   $0F
        .byte   $22
        .byte   $36
        .byte   $17
        .byte   $0F
        .byte   $22
        .byte   $30
        .byte   $21
        .byte   $0F
        .byte   $22
        .byte   $27
        .byte   $17
        .byte   $0F
_sprite_palette:
        .byte   $22
        .byte   $16
        .byte   $27
        .byte   $18
        .byte   $22
        .byte   $1A
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $16
        .byte   $30
        .byte   $27
        .byte   $22
        .byte   $0F
        .byte   $36
        .byte   $17

.segment        "BSS"

.segment        "ZEROPAGE"
_i:
        .res    2,$00
_address:
        .res    2,$00

; ---------------------------------------------------------------
; void __near__ fill_in_ppu_ram (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _fill_in_ppu_ram: near

.segment        "CODE"

;
; vram_adr(NTADR_A(0, 0));
;
        ldx     #$20
        lda     #$00
        jsr     _vram_adr
;
; for (i = 0; i &lt; 32 * 30; i++) {
;
        lda     #$00
        sta     _i
        sta     _i+1
L002A:  lda     _i
        cmp     #$C0
        lda     _i+1
        sbc     #$03
        bvc     L0031
        eor     #$80
L0031:  bpl     L002B
;
; vram_put(36);
;
        lda     #$24
        jsr     _vram_put
;
; for (i = 0; i &lt; 32 * 30; i++) {
;
        lda     _i
        ldx     _i+1
        clc
        adc     #$01
        bcc     L0033
        inx
L0033:  sta     _i
        stx     _i+1
        jmp     L002A
;
; }
;
L002B:  rts

.endproc

; ---------------------------------------------------------------
; void __near__ fill_in_attributes (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _fill_in_attributes: near

.segment        "CODE"

;
; vram_adr(ATTRIBUTE_TABLE);
;
        ldx     #$23
        lda     #$C0
        jsr     _vram_adr
;
; vram_fill(0, 16);
;
        lda     #$00
        jsr     pusha
        tax
        lda     #$10
        jsr     _vram_fill
;
; vram_fill(0x55, 16);
;
        lda     #$55
        jsr     pusha
        ldx     #$00
        lda     #$10
        jsr     _vram_fill
;
; vram_fill(0xAA, 16);
;
        lda     #$AA
        jsr     pusha
        ldx     #$00
        lda     #$10
        jsr     _vram_fill
;
; vram_fill(0xFF, 16);
;
        lda     #$FF
        jsr     pusha
        ldx     #$00
        lda     #$10
        jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _game_loop: near

.segment        "CODE"

;
; ppu_wait_nmi();
;
L0046:  jsr     _ppu_wait_nmi
;
; oam_clear();
;
        jsr     _oam_clear
;
; oam_spr(10, 10, 0, 0);
;
        jsr     decsp3
        lda     #$0A
        ldy     #$02
        sta     (sp),y
        dey
        sta     (sp),y
        lda     #$00
        dey
        sta     (sp),y
        jsr     _oam_spr
;
; oam_spr(18, 10, 1, 0);
;
        jsr     decsp3
        lda     #$12
        ldy     #$02
        sta     (sp),y
        lda     #$0A
        dey
        sta     (sp),y
        tya
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
;
; oam_spr(10, 18, 2, 0);
;
        jsr     decsp3
        lda     #$0A
        ldy     #$02
        sta     (sp),y
        lda     #$12
        dey
        sta     (sp),y
        lda     #$02
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
;
; oam_spr(18, 18, 3, 0);
;
        jsr     decsp3
        lda     #$12
        ldy     #$02
        sta     (sp),y
        dey
        sta     (sp),y
        lda     #$03
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
;
; oam_spr(10, 20, 4, 0);
;
        jsr     decsp3
        lda     #$0A
        ldy     #$02
        sta     (sp),y
        lda     #$14
        dey
        sta     (sp),y
        lda     #$04
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
;
; oam_spr(18, 20, 5, 0);
;
        jsr     decsp3
        lda     #$12
        ldy     #$02
        sta     (sp),y
        lda     #$14
        dey
        sta     (sp),y
        lda     #$05
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
;
; oam_spr(10, 28, 6, 0);
;
        jsr     decsp3
        lda     #$0A
        ldy     #$02
        sta     (sp),y
        lda     #$1C
        dey
        sta     (sp),y
        lda     #$06
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
;
; oam_spr(18, 28, 7, 0);
;
        jsr     decsp3
        lda     #$12
        ldy     #$02
        sta     (sp),y
        lda     #$1C
        dey
        sta     (sp),y
        lda     #$07
        dey
        sta     (sp),y
        tya
        jsr     _oam_spr
;
; while (1) {
;
        jmp     L0046

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment        "CODE"

.proc   _main: near

.segment        "CODE"

;
; ppu_off();
;
        jsr     _ppu_off
;
; pal_bg(background_palette);
;
        lda     #<(_background_palette)
        ldx     #>(_background_palette)
        jsr     _pal_bg
;
; pal_spr(sprite_palette);
;
        lda     #<(_sprite_palette)
        ldx     #>(_sprite_palette)
        jsr     _pal_spr
;
; bank_bg(1);
;
        lda     #$01
        jsr     _bank_bg
;
; bank_spr(0);
;
        lda     #$00
        jsr     _bank_spr
;
; fill_in_ppu_ram();
;
        jsr     _fill_in_ppu_ram
;
; fill_in_attributes();
;
        jsr     _fill_in_attributes
;
; ppu_on_all();
;
        jsr     _ppu_on_all
;
; game_loop();
;
        jmp     _game_loop

.endproc
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Definice a použití metaspritů</h2>

<p></p>

<pre>
#include "neslib.h"

#define ATTRIBUTE_TABLE 0x23c0

#pragma bss-name(push, "ZEROPAGE")
int i;
int address;

// barvy pozadí
const unsigned char background_palette[] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F,
    0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F
};

// barvy spritů
const unsigned char sprite_palette[] = {
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27,
    0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17
};

// definice metaspritu
const unsigned char metasprite[] = {
    10, 10, 0, 0,
    18, 10, 1, 0,
    10, 18, 2, 0,
    18, 18, 3, 0,
    10, 20, 4, 0,
    18, 20, 5, 0,
    10, 28, 6, 0,
    18, 28, 7, 0,
    128,
};

void fill_in_ppu_ram(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 30; i++) {
        vram_put(36);
    }
}

void fill_in_attributes(void)
{
    vram_adr(ATTRIBUTE_TABLE);

    vram_fill(0, 16);
    vram_fill(0x55, 16);
    vram_fill(0xAA, 16);
    vram_fill(0xFF, 16);
}

void game_loop(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
        oam_meta_spr(10, 10, metasprite);
    }
}

void main(void)
{
    ppu_off();
    pal_bg(background_palette);
    pal_spr(sprite_palette);
    bank_bg(1);
    bank_spr(0);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();

    game_loop();
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výsledek překladu do assembleru</h2>

<p></p>

<pre>
;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_bank_spr
	.import		_bank_bg
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.export		_i
	.export		_address
	.export		_background_palette
	.export		_sprite_palette
	.export		_metasprite
	.export		_fill_in_ppu_ram
	.export		_fill_in_attributes
	.export		_game_loop
	.export		_main

.segment	"RODATA"

_background_palette:
	.byte	$22
	.byte	$29
	.byte	$1A
	.byte	$0F
	.byte	$22
	.byte	$36
	.byte	$17
	.byte	$0F
	.byte	$22
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$22
	.byte	$27
	.byte	$17
	.byte	$0F
_sprite_palette:
	.byte	$22
	.byte	$16
	.byte	$27
	.byte	$18
	.byte	$22
	.byte	$1A
	.byte	$30
	.byte	$27
	.byte	$22
	.byte	$16
	.byte	$30
	.byte	$27
	.byte	$22
	.byte	$0F
	.byte	$36
	.byte	$17
_metasprite:
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$0A
	.byte	$12
	.byte	$02
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$03
	.byte	$00
	.byte	$0A
	.byte	$14
	.byte	$04
	.byte	$00
	.byte	$12
	.byte	$14
	.byte	$05
	.byte	$00
	.byte	$0A
	.byte	$1C
	.byte	$06
	.byte	$00
	.byte	$12
	.byte	$1C
	.byte	$07
	.byte	$00
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	2,$00
_address:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ fill_in_ppu_ram (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fill_in_ppu_ram: near

.segment	"CODE"

;
; vram_adr(NTADR_A(0, 0));
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (i = 0; i < 32 * 30; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L004B:	lda     _i
	cmp     #$C0
	lda     _i+1
	sbc     #$03
	bvc     L0052
	eor     #$80
L0052:	bpl     L004C
;
; vram_put(36);
;
	lda     #$24
	jsr     _vram_put
;
; for (i = 0; i < 32 * 30; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0054
	inx
L0054:	sta     _i
	stx     _i+1
	jmp     L004B
;
; }
;
L004C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fill_in_attributes (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fill_in_attributes: near

.segment	"CODE"

;
; vram_adr(ATTRIBUTE_TABLE);
;
	ldx     #$23
	lda     #$C0
	jsr     _vram_adr
;
; vram_fill(0, 16);
;
	lda     #$00
	jsr     pusha
	tax
	lda     #$10
	jsr     _vram_fill
;
; vram_fill(0x55, 16);
;
	lda     #$55
	jsr     pusha
	ldx     #$00
	lda     #$10
	jsr     _vram_fill
;
; vram_fill(0xAA, 16);
;
	lda     #$AA
	jsr     pusha
	ldx     #$00
	lda     #$10
	jsr     _vram_fill
;
; vram_fill(0xFF, 16);
;
	lda     #$FF
	jsr     pusha
	ldx     #$00
	lda     #$10
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L0067:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(10, 10, metasprite);
;
	jsr     decsp2
	lda     #$0A
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #<(_metasprite)
	ldx     #>(_metasprite)
	jsr     _oam_meta_spr
;
; while (1) {
;
	jmp     L0067

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(background_palette);
;
	lda     #<(_background_palette)
	ldx     #>(_background_palette)
	jsr     _pal_bg
;
; pal_spr(sprite_palette);
;
	lda     #<(_sprite_palette)
	ldx     #>(_sprite_palette)
	jsr     _pal_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; fill_in_ppu_ram();
;
	jsr     _fill_in_ppu_ram
;
; fill_in_attributes();
;
	jsr     _fill_in_attributes
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; game_loop();
;
	jmp     _game_loop

.endproc

</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Atributy spritů a metaspritů</h2>

<p></p>

<pre>
#include "neslib.h"

#define ATTRIBUTE_TABLE 0x23c0

#pragma bss-name(push, "ZEROPAGE")
int i;
int address;

// barvy pozadí
const unsigned char background_palette[] = {
    0x22, 0x29, 0x1a, 0x0F, 0x22, 0x36, 0x17, 0x0F,
    0x22, 0x30, 0x21, 0x0F, 0x22, 0x27, 0x17, 0x0F
};

// barvy spritů
const unsigned char sprite_palette[] = {
    0x22, 0x16, 0x27, 0x18, 0x22, 0x1A, 0x30, 0x27,
    0x22, 0x16, 0x30, 0x27, 0x22, 0x0F, 0x36, 0x17
};

// definice prvního metaspritu
const unsigned char metasprite1[] = {
    10, 10, 0, 3,
    18, 10, 1, 3,
    10, 18, 2, 3,
    18, 18, 3, 3,
    10, 20, 4, 3,
    18, 20, 5, 3,
    10, 28, 6, 3,
    18, 28, 7, 3,
    128,
};

// definice druhého metaspritu
const unsigned char metasprite2[] = {
    18, 10, 8, 3 | OAM_FLIP_H,
    10, 10, 9, 3 | OAM_FLIP_H,
    18, 18, 10, 3 | OAM_FLIP_H,
    10, 18, 11, 3 | OAM_FLIP_H,
    18, 20, 12, 3 | OAM_FLIP_H,
    10, 20, 13, 3 | OAM_FLIP_H,
    18, 28, 14, 3 | OAM_FLIP_H,
    10, 28, 15, 3 | OAM_FLIP_H,
    128,
};

void fill_in_ppu_ram(void)
{
    vram_adr(NTADR_A(0, 0));
    for (i = 0; i &lt; 32 * 30; i++) {
        vram_put(36);
    }
}

void fill_in_attributes(void)
{
    vram_adr(ATTRIBUTE_TABLE);

    vram_fill(0, 16);
    vram_fill(0x55, 16);
    vram_fill(0xAA, 16);
    vram_fill(0xFF, 16);
}

void game_loop(void)
{
    while (1) {
        ppu_wait_nmi();
        oam_clear();
        oam_meta_spr(10, 10, metasprite1);
        oam_meta_spr(40, 10, metasprite2);
    }
}

void main(void)
{
    ppu_off();
    pal_bg(background_palette);
    pal_spr(sprite_palette);
    bank_bg(1);
    bank_spr(0);
    fill_in_ppu_ram();
    fill_in_attributes();
    ppu_on_all();

    game_loop();
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výsledek překladu do assembleru</h2>

<p></p>

<pre>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Ovládání (meta)spritů D-padem</h2>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Výsledek překladu do assembleru</h2>

<pre>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Scrolling celého pozadí</h2>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Výsledek překladu do assembleru</h2>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. C či assembler?</h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
demonstrační příklady určené pro překlad a spuštění na osmibitové herní konzoli
NES, které jsou psány v&nbsp;céčku. Vždy se jedná o ucelené a současně i
samostatně použitelné projekty, což mj.&nbsp;znamená, že každý příklad obsahuje
i svoji lokální verzi souboru <strong>crt0.s</strong> a
<strong>neslibu</strong>:</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01_Intro/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/Makefile</a></td></tr>
<tr><td> 2</td><td>01_Intro/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/nrom_32k_vert.cfg</a></td></tr>
<tr><td> 3</td><td>01_Intro/Alpha.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/Alpha.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/Alpha.chr</a></td></tr>
<tr><td> 4</td><td>01_Intro/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/crt0.s</a></td></tr>
<tr><td> 5</td><td>01_Intro/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/neslib.h</a></td></tr>
<tr><td> 6</td><td>01_Intro/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/neslib.s</a></td></tr>
<tr><td> 7</td><td>01_Intro/intro.c</td><td>zdrojový kód prvního demonstračního příkladu psaný v&nbsp;C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/intro.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/intro.c</a></td></tr>
<tr><td> 8</td><td>01_Intro/intro.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/intro.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/01_Intro/intro.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>02_PPU_RAM/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/Makefile</a></td></tr>
<tr><td>10</td><td>02_PPU_RAM/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/nrom_32k_vert.cfg</a></td></tr>
<tr><td>11</td><td>02_PPU_RAM/Alpha.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/Alpha.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/Alpha.chr</a></td></tr>
<tr><td>12</td><td>02_PPU_RAM/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/crt0.s</a></td></tr>
<tr><td>13</td><td>02_PPU_RAM/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/neslib.h</a></td></tr>
<tr><td>14</td><td>02_PPU_RAM/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/neslib.s</a></td></tr>
<tr><td>15</td><td>02_PPU_RAM/ppu_ram.c</td><td>zdrojový kód druhého demonstračního příkladu psaný v&nbsp;C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/ppu_ram.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/ppu_ram.c</a></td></tr>
<tr><td>16</td><td>02_PPU_RAM/ppu_ram.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/ppu_ram.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/02_PPU_RAM/ppu_ram.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>03_Attributes/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/Makefile</a></td></tr>
<tr><td>18</td><td>03_Attributes/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/nrom_32k_vert.cfg</a></td></tr>
<tr><td>19</td><td>03_Attributes/Alpha.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/Alpha.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/Alpha.chr</a></td></tr>
<tr><td>20</td><td>03_Attributes/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/crt0.s</a></td></tr>
<tr><td>21</td><td>03_Attributes/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/neslib.h</a></td></tr>
<tr><td>22</td><td>03_Attributes/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/neslib.s</a></td></tr>
<tr><td>23</td><td>03_Attributes/attributes.c</td><td>zdrojový kód třetího demonstračního příkladu psaný v&nbsp;C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/attributes.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/attributes.c</a></td></tr>
<tr><td>24</td><td>03_Attributes/attributes.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/attributes.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/03_Attributes/attributes.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>04_Mario_world_A/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/Makefile</a></td></tr>
<tr><td>26</td><td>04_Mario_world_A/nrom_32k_vert.cfg</td>konfigurace paměťových regionů herní konzole NES<td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/nrom_32k_vert.cfg</a></td></tr>
<tr><td>27</td><td>04_Mario_world_A/mario.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario.chr</a></td></tr>
<tr><td>28</td><td>04_Mario_world_A/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/crt0.s</a></td></tr>
<tr><td>29</td><td>04_Mario_world_A/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/neslib.h</a></td></tr>
<tr><td>30</td><td>04_Mario_world_A/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/neslib.s</a></td></tr>
<tr><td>31</td><td>04_Mario_world_A/mario_world.c</td><td>zdrojový kód čtvrtého demonstračního příkladu psaný v&nbsp;C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario_world.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario_world.c</a></td></tr>
<tr><td>32</td><td>04_Mario_world_A/mario_world.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario_world.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/04_Mario_world_A/mario_world.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>05_Mario_world_B/Makefile</td><td>Makefile pro překlad a slinkování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/Makefile</a></td></tr>
<tr><td>34</td><td>05_Mario_world_B/nrom_32k_vert.cfg</td><td>konfigurace paměťových regionů herní konzole NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/nrom_32k_vert.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/nrom_32k_vert.cfg</a></td></tr>
<tr><td>35</td><td>05_Mario_world_B/mario.chr</td><td>binární soubor obsahující definice dlaždic pozadí a spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario.chr">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario.chr</a></td></tr>
<tr><td>36</td><td>05_Mario_world_B/crt0.s</td><td>inicializační rutiny naprogramované v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/crt0.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/crt0.s</a></td></tr>
<tr><td>37</td><td>05_Mario_world_B/neslib.h</td><td>hlavičkový soubor s&nbsp;pomocnými funkcemi pro vývoj v&nbsp;C pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/neslib.h">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/neslib.h</a></td></tr>
<tr><td>38</td><td>05_Mario_world_B/neslib.s</td><td>implementace funkcí předběžně definovaných v&nbsp;hlavičkovém souboru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/neslib.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/neslib.s</a></td></tr>
<tr><td>39</td><td>05_Mario_world_B/mario_world.c</td><td>zdrojový kód pátého demonstračního příkladu psaný v&nbsp;C</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario_world.c">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario_world.c</a></td></tr>
<tr><td>40</td><td>05_Mario_world_B/mario_world.s</td><td>demonstrační příklad přeložený do assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario_world.s">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/05_Mario_world_B/mario_world.s</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>

<p>Pro úplnost si ještě uveďme odkazy na demonstrační příklady napsané
v&nbsp;assembleru, které jsou určené pro překlad pomocí assembleru
<strong>ca65</strong> (jenž je součástí <strong>cc65</strong>), byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>example01.asm</td><td>zdrojový kód příkladu tvořeného kostrou aplikace pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm</a></td></tr>
<tr><td> 2</td><td>example02.asm</td><td>použití standardní konfigurace linkeru pro konzoli NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example02.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example02.asm</a></td></tr>
<tr><td> 3</td><td>example03.asm</td><td>symbolická jména řídicích registrů PPU</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example03.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example03.asm</a></td></tr>
<tr><td> 4</td><td>example04.asm</td><td>zjednodušený zápis lokálních smyček v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example04.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example04.asm</a></td></tr>
<tr><td> 5</td><td>example05.asm</td><td>zvukový výstup s&nbsp;využitím prvního &bdquo;square&ldquo; kanálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example05.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example05.asm</a></td></tr>
<tr><td> 6</td><td>example06.asm</td><td>použití maker bez parametrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example06.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example06.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>example07.asm</td><td>nastavení barvové palety, zvýšení intenzity zvolené barvové složky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm</a></td></tr>
<tr><td> 8</td><td>example08.asm</td><td>využití operátorů &lt; a &gt;</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm</a></td></tr>
<tr><td> 9</td><td>example09.asm</td><td>vymazání barvové palety realizované makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm</a></td></tr>
<tr><td>10</td><td>example10.asm</td><td>vymazání barvové palety realizované podprogramem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm</a></td></tr>
<tr><td>11</td><td>example11.asm</td><td>nastavení barvové palety pozadí i spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm</a></td></tr>
<tr><td>12</td><td>example12.asm</td><td>refaktoring předchozího příkladu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example12.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example12.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>example13.asm</td><td>zobrazení spritů tvořících Maria</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm</a></td></tr>
<tr><td>14</td><td>example14.asm</td><td>posun spritů, aby se zdůraznila jejich nezávislost</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm</a></td></tr>
<tr><td>15</td><td>example15.asm</td><td>větší množství spritů na obrazovce rozdělených do řádků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm</a></td></tr>
<tr><td>16</td><td>example16.asm</td><td>větší množství spritů na obrazovce na jediném řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example16.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example16.asm</a></td></tr>
<tr><td>17</td><td>example17.asm</td><td>pohyb jednoho spritu pomocí ovladače</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example17.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example17.asm</a></td></tr>
<tr><td>18</td><td>example18.asm</td><td>odvozeno z&nbsp;předchozího příkladu, symbolická jména adres</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example18.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example18.asm</a></td></tr>
<tr><td>19</td><td>example19.asm</td><td>odvozeno z&nbsp;předchozího příkladu, pomocná makra pro pohyb spritu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example19.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example19.asm</a></td></tr>
<tr><td>20</td><td>example20.asm</td><td>pohyb spritu je založen na instrukcích <strong>INC</strong> a <strong>DEC</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example20.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example20.asm</a></td></tr>
<tr><td>21</td><td>example21.asm</td><td>přesun celého Maria (8 spritů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example21.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example21.asm</a></td></tr>
<tr><td>22</td><td>example22.asm</td><td>(rychlá) změna barvové palety spritů tlačítkem A</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example22.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example22.asm</a></td></tr>
<tr><td>23</td><td>example23.asm</td><td>realizace čítače pro snížení frekvence změn barvové palety</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example23.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example23.asm</a></td></tr>
<tr><td>24</td><td>example24.asm</td><td>horizontální a vertikální zrcadlení spritů řízené hráčem stiskem tlačítek</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example24.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example24.asm</a></td></tr>
<tr><td>25</td><td>example25.asm</td><td>definice pozadí a zobrazení pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example25.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example25.asm</a></td></tr>
<tr><td>26</td><td>example26.asm</td><td>zobrazení pozadí i spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example26.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example26.asm</a></td></tr>
<tr><td>27</td><td>example27.asm</td><td>pohyb spritu řízený ovladačem, změna atributů spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example27.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example27.asm</a></td></tr>
<tr><td>28</td><td>example28.asm</td><td>definice pozadí přes téměř celou obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example28.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example28.asm</a></td></tr>
<tr><td>29</td><td>example29.asm</td><td>scrolling pozadí s&nbsp;využitím ovladače</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example29.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example29.asm</a></td></tr>
<tr><td>30</td><td>example30.asm</td><td>zobrazení hodnot offsetů pro pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example30.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example30.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>link.cfg</td><td>konfigurace segmentů pro linker <strong>ld65</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg</a></td></tr>
<tr><td>32</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile</a></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: pro slinkování a spuštění většiny těchto
demonstračních příkladů potřebujete i soubor <a
href="https://github.com/ericdigioia/6502-Assembly-NES-Game-Development-Playground/raw/main/mario.chr">mario.chr</a>.
Ten je stažen automaticky po zadání <strong>make example16</strong> až
<strong>make example30</strong>.</div></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Překladače jazyka C pro historické osmibitové mikroprocesory<br />
<a href="https://www.root.cz/clanky/prekladace-jazyka-c-pro-historicke-osmibitove-mikroprocesory/">https://www.root.cz/clanky/prekladace-jazyka-c-pro-historicke-osmibitove-mikroprocesory/</a>
</li>

<li>Překladače programovacího jazyka C pro historické osmibitové mikroprocesory (2)<br />
<a href="https://www.root.cz/clanky/prekladace-programovaciho-jazyka-c-pro-historicke-osmibitove-mikroprocesory-2/">https://www.root.cz/clanky/prekladace-programovaciho-jazyka-c-pro-historicke-osmibitove-mikroprocesory-2/</a>
</li>

<li>Program a NES game in C<br />
<a href="https://learncgames.com/program-a-nes-game-in-c/">https://learncgames.com/program-a-nes-game-in-c/</a>
</li>

<li>The Thirty Million Line Problem<br />
<a href="https://www.youtube.com/watch?v=kZRE7HIO3vk">https://www.youtube.com/watch?v=kZRE7HIO3vk</a>
</li>

<li>crt0<br />
<a href="https://en.wikipedia.org/wiki/Crt0">https://en.wikipedia.org/wiki/Crt0</a>
</li>

<li>NesDev.org<br />
<a href="https://www.nesdev.org/">https://www.nesdev.org/</a>
</li>

<li>The Sprite Attribute Byte<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-17/">https://www.patater.com/nes-asm-tutorials/day-17/</a>
</li>

<li>How to Program an NES game in C<br />
<a href="https://nesdoug.com/">https://nesdoug.com/</a>
</li>

<li>Cycle reference chart<br />
<a href="https://www.nesdev.org/wiki/Cycle_reference_chart">https://www.nesdev.org/wiki/Cycle_reference_chart</a>
</li>

<li>Getting Started Programming in C: Coding a Retro Game with C Part 2<br />
<a href="https://retrogamecoders.com/getting-started-with-c-cc65/">https://retrogamecoders.com/getting-started-with-c-cc65/</a>
</li>

<li>NES game development in 6502 assembly - Part 1<br />
<a href="https://kibrit.tech/en/blog/nes-game-development-part-1">https://kibrit.tech/en/blog/nes-game-development-part-1</a>
</li>

<li>NES (Nintendo Entertainment System) controller pinout<br />
<a href="https://pinoutguide.com/Game/NES_controller_pinout.shtml">https://pinoutguide.com/Game/NES_controller_pinout.shtml</a>
</li>

<li>NES Controller Shift Register<br />
<a href="https://www.allaboutcircuits.com/uploads/articles/nes-controller-arduino.png?v=1469416980041">https://www.allaboutcircuits.com/uploads/articles/nes-controller-arduino.png?v=1469416980041</a>
</li>

<li>"Game Development in Eight Bits" by Kevin Zurawel<br />
<a href="https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4">https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4</a>
</li>

<li>Game Development for the 8-bit NES: A class by Bob Rost<br />
<a href="http://bobrost.com/nes/">http://bobrost.com/nes/</a>
</li>

<li>Game Development for the 8-bit NES: Lecture Notes<br />
<a href="http://bobrost.com/nes/lectures.php">http://bobrost.com/nes/lectures.php</a>
</li>

<li>NES Graphics Explained<br />
<a href="https://www.youtube.com/watch?v=7Co_8dC2zb8">https://www.youtube.com/watch?v=7Co_8dC2zb8</a>
</li>

<li>NES GAME PROGRAMMING PART 1<br />
<a href="https://rpgmaker.net/tutorials/227/?post=240020">https://rpgmaker.net/tutorials/227/?post=240020</a>
</li>

<li>NES 6502 Programming Tutorial - Part 1: Getting Started<br />
<a href="https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/">https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/</a>
</li>

<li>Minimal NES example using ca65<br />
<a href="https://github.com/bbbradsmith/NES-ca65-example">https://github.com/bbbradsmith/NES-ca65-example</a>
</li>

<li>List of 6502-based Computers and Consoles<br />
<a href="https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/">https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/</a>
</li>

<li>History of video game consoles (second generation): Wikipedia<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)</a>
</li>

<li>6502 - the first RISC &micro;P<br />
<a href="http://ericclever.com/6500/">http://ericclever.com/6500/</a>
</li>

<li>3 Generations of Game Machine Architecture<br />
<a href="http://www.atariarchives.org/dev/CGEXPO99.html">http://www.atariarchives.org/dev/CGEXPO99.html</a>
</li>

<li>bee - The Multi-Console Emulator<br />
<a href="http://www.thebeehive.ws/">http://www.thebeehive.ws/</a>
</li>

<li>Nerdy Nights Mirror<br />
<a href="https://nerdy-nights.nes.science/">https://nerdy-nights.nes.science/</a>
</li>

<li>The Nerdy Nights ca65 Remix<br />
<a href="https://github.com/ddribin/nerdy-nights">https://github.com/ddribin/nerdy-nights</a>
</li>

<li>NES Development Day 1: Creating a ROM<br />
<a href="https://www.moria.us/blog/2018/03/nes-development">https://www.moria.us/blog/2018/03/nes-development</a>
</li>

<li>How to Start Making NES Games<br />
<a href="https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/">https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>cc65 Users Guide<br />
<a href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>
</li>

<li>ld65 Users Guide<br />
<a href="https://cc65.github.io/doc/ld65.html">https://cc65.github.io/doc/ld65.html</a>
</li>

<li>da65 Users Guide<br />
<a href="https://cc65.github.io/doc/da65.html">https://cc65.github.io/doc/da65.html</a>
</li>

<li>Nocash NES Specs<br />
<a href="http://nocash.emubase.de/everynes.htm">http://nocash.emubase.de/everynes.htm</a>
</li>

<li>Nintendo Entertainment System<br />
<a href="http://cs.wikipedia.org/wiki/NES">http://cs.wikipedia.org/wiki/NES</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>NesDev<br />
<a href="http://nesdev.parodius.com/">http://nesdev.parodius.com/</a>
</li>

<li>2A03 technical reference<br />
<a href="http://nesdev.parodius.com/2A03%20technical%20reference.txt">http://nesdev.parodius.com/2A03%20technical%20reference.txt</a>
</li>

<li>NES Dev wiki: 2A03<br />
<a href="http://wiki.nesdev.com/w/index.php/2A03">http://wiki.nesdev.com/w/index.php/2A03</a>
</li>

<li>Ricoh 2A03<br />
<a href="http://en.wikipedia.org/wiki/Ricoh_2A03">http://en.wikipedia.org/wiki/Ricoh_2A03</a>
</li>

<li>2A03 pinouts<br />
<a href="http://nesdev.parodius.com/2A03_pinout.txt">http://nesdev.parodius.com/2A03_pinout.txt</a>
</li>

<li>27c3: Reverse Engineering the MOS 6502 CPU (en)<br />
<a href="https://www.youtube.com/watch?v=fWqBmmPQP40">https://www.youtube.com/watch?v=fWqBmmPQP40</a>
</li>

<li>“Hello, world” from scratch on a 6502 — Part 1<br />
<a href="https://www.youtube.com/watch?v=LnzuMJLZRdU">https://www.youtube.com/watch?v=LnzuMJLZRdU</a>
</li>

<li>A Tour of 6502 Cross-Assemblers<br />
<a href="https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/">https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/</a>
</li>

<li>Nintendo Entertainment System (NES)<br />
<a href="https://8bitworkshop.com/docs/platforms/nes/">https://8bitworkshop.com/docs/platforms/nes/</a>
</li>

<li>Question about NES vectors and PPU<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t4154.xhtml">https://archive.nes.science/nesdev-forums/f10/t4154.xhtml</a>
</li>

<li>How do mapper chips actually work?<br />
<a href="https://archive.nes.science/nesdev-forums/f9/t13125.xhtml">https://archive.nes.science/nesdev-forums/f9/t13125.xhtml</a>
</li>

<li>INES<br />
<a href="https://www.nesdev.org/wiki/INES">https://www.nesdev.org/wiki/INES</a>
</li>

<li>NES Basics and Our First Game<br />
<a href="http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html">http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html</a>
</li>

<li>Where is the reset vector in a .nes file?<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t17413.xhtml">https://archive.nes.science/nesdev-forums/f10/t17413.xhtml</a>
</li>

<li>CPU memory map<br />
<a href="https://www.nesdev.org/wiki/CPU_memory_map">https://www.nesdev.org/wiki/CPU_memory_map</a>
</li>

<li>How to make NES music<br />
<a href="http://blog.snugsound.com/2008/08/how-to-make-nes-music.html">http://blog.snugsound.com/2008/08/how-to-make-nes-music.html</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>MIDINES<br />
<a href="http://www.wayfar.net/0xf00000_overview.php">http://www.wayfar.net/0xf00000_overview.php</a>
</li>

<li>FamiTracker<br />
<a href="http://famitracker.com/">http://famitracker.com/</a>
</li>

<li>nerdTracker II<br />
<a href="http://nesdev.parodius.com/nt2/">http://nesdev.parodius.com/nt2/</a>
</li>

<li>How NES Graphics work<br />
<a href="http://nesdev.parodius.com/nesgfx.txt">http://nesdev.parodius.com/nesgfx.txt</a>
</li>

<li>NES Technical/Emulation/Development FAQ<br />
<a href="http://nesdev.parodius.com/NESTechFAQ.htm">http://nesdev.parodius.com/NESTechFAQ.htm</a>
</li>

<li>Adventures with ca65<br />
<a href="https://atariage.com/forums/topic/312451-adventures-with-ca65/">https://atariage.com/forums/topic/312451-adventures-with-ca65/</a>
</li>

<li>example ca65 startup code<br />
<a href="https://atariage.com/forums/topic/209776-example-ca65-startup-code/">https://atariage.com/forums/topic/209776-example-ca65-startup-code/</a>
</li>

<li>6502 PRIMER: Building your own 6502 computer<br />
<a href="http://wilsonminesco.com/6502primer/">http://wilsonminesco.com/6502primer/</a>
</li>

<li>6502 Instruction Set<br />
<a href="https://www.masswerk.at/6502/6502_instruction_set.html">https://www.masswerk.at/6502/6502_instruction_set.html</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Single-board computer<br />
<a href="https://en.wikipedia.org/wiki/Single-board_computer">https://en.wikipedia.org/wiki/Single-board_computer</a>
</li>

<li>www.6502.org<br />
<a href="http://www.6502­.org/">http://www.6502­.org/</a>
</li>

<li>6502 PRIMER: Building your own 6502 computer &ndash; clock generator<br />
<a href="http://wilsonminesco.com/6502primer/ClkGen.html">http://wilsonminesco.com/6502primer/ClkGen.html</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://www.cpushack.com/CPU/cpu.html">http://www.cpushack.com/CPU/cpu.html</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Osmibitové mikroprocesory a mikrořadiče firmy Motorola (1)<br />
<a href="https://www.root.cz/clanky/osmibitove-mikroprocesory-a-mikroradice-firmy-motorola-1/">https://www.root.cz/clanky/osmibitove-mikroprocesory-a-mikroradice-firmy-motorola-1/</a>
</li>

<li>Mikrořadiče a jejich použití v jednoduchých mikropočítačích<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-pouziti-v-jednoduchych-mikropocitacich/">https://www.root.cz/clanky/mikroradice-a-jejich-pouziti-v-jednoduchych-mikropocitacich/</a>
</li>

<li>Mikrořadiče a jejich aplikace v jednoduchých mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/">https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Comparison of instruction set architectures<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures">https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures</a>
</li>

<li>Day 1 - Beginning NES Assembly<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-1/">https://www.patater.com/nes-asm-tutorials/day-1/</a>
</li>

<li>Day 2 - A Source Code File's Structure<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-2/">https://www.patater.com/nes-asm-tutorials/day-2/</a>
</li>

<li>Assembly Language Misconceptions<br />
<a href="https://www.youtube.com/watch?v=8_0tbkbSGRE">https://www.youtube.com/watch?v=8_0tbkbSGRE</a>
</li>

<li>How Machine Language Works<br />
<a href="https://www.youtube.com/watch?v=HWpi9n2H3kE">https://www.youtube.com/watch?v=HWpi9n2H3kE</a>
</li>

<li>Super Mario Bros. (1985) Full Walkthrough NES Gameplay [Nostalgia]<br />
<a href="https://www.youtube.com/watch?v=rLl9XBg7wSs">https://www.youtube.com/watch?v=rLl9XBg7wSs</a>
</li>

<li>[Longplay] Castlevania (NES) - All Secrets, No Deaths<br />
<a href="https://www.youtube.com/watch?v=mOTUVXrAOE8">https://www.youtube.com/watch?v=mOTUVXrAOE8</a>
</li>

<li>Herní série Castlevania<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-24-cast-hry-pro-konzoli-nes/#k07">https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-24-cast-hry-pro-konzoli-nes/#k07</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
