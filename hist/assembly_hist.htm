<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Programování na úrovni strojového kódu</a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. Platforma IBM System/360 a vznik architektury CISC</a></p>
<p><a href="#k06">*** 6. Assemblery pro osmibitové domácí mikropočítače</a></p>
<p><a href="#k07">*** 7. Assemblery a86 a a386</a></p>
<p><a href="#k08">*** 8. Turbo Assembler a Microsoft Macro Assembler a vývojové prostředí ASM lab</a></p>
<p><a href="#k09">*** 9. Assemblery v&nbsp;Linuxu</a></p>
<p><a href="#k10">*** 10. GNU Assembler</a></p>
<p><a href="#k11">*** 11. Netwide Assembler (NASM)</a></p>
<p><a href="#k12">*** 12. Vybrané aplikace naprogramované (kompletně) v&nbsp;assembleru</a></p>
<p><a href="#k13">*** 13. VisiCalc</a></p>
<p><a href="#k14">*** 14. Lotus 1-2-3</a></p>
<p><a href="#k15">*** 15. Volkov Commander</a></p>
<p><a href="#k16">*** 16. SpeedScript (klasická verze)</a></p>
<p><a href="#k17">*** 17. Textový editor e (pro DOS)</a></p>
<p><a href="#k18">*** 18. Textový editor e3 (pro Linux)</a></p>
<p><a href="#k19">*** 19. Legendární textový editor WordStar</a></p>
<p><a href="#k20">*** 20. 137 000 řádků v&nbsp;assembleru: projekt s&nbsp;odhadovanou pracností 42 člověkoroků napsaný za deset měsíců</a></p>
<p><a href="#k21">*** 21. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p><i>&bdquo;Assembler is human-readable machine code.&ldquo;</i></p>

<p>Po dvojici článků o <a href="">třicátých narozeninách Turbo Pascalu 5.5</a> a <a href="">šedesátých narozeninách programovacího jazyka COBOL</a> se dnes ponoříme ještě o celou jednu dekádu zpět do minulosti, konkrétně do přelomu čtyřicátých a padesátých let minulého století. Letos totiž uplynulo celých sedmdesát let od vzniku nástroje, který dnes nazýváme <i>assembler</i>. Současně se jedná o pojmenování skupiny nízkoúrovňových programovacích jazyků, které leží na hranici mezi strojovým kódem na jedné straně a vyššími programovacími jazyky na straně druhé. A vzhledem k&nbsp;tomu, že jsou assemblery velmi těsně spjaty s&nbsp;určitým typem mikroprocesorů a navíc i používaným operačním systémem, nedošlo nikdy (a s&nbsp;velkou pravděpodobností ani nikdy nedojde) k&nbsp;unifikaci těchto nástrojů popř.&nbsp;ke vzniku dodržovaných standardů.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti určité standardy či de facto standardy existují i v&nbsp;oblasti assemblerů. Jedná se například o takzvanou <a href="http://www.sig9.com/articles/att-syntax">AT&amp;T syntax</a> určující způsob zápisu mnemotechnických jmen instrukcí a jejich operandů. Ovšem pochopitelně se nejedná o standardizaci instrukčního souboru, i když i takové snahy existovaly a jsou spjaty především s&nbsp;architekturami IBM System/360 a IBM System/370.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Programování na úrovni strojového kódu</h2>

<a href="http://www.root.cz/obrazek/210808/"><img src="http://i.iinfo.cz/images/462/dev-8bit-4-prev.png" class="image-210808" width="370" height="202" alt="&#160;" /></a>
<p><i>Obrázek x: Někteří programátoři dokázali i v&nbsp;primitivním monitoru naprogramovat rozsáhlé aplikace a to včetně her. V&nbsp;takovém případě se pro ruční převod assembleru do strojového kódu používaly takovéto tabulky (i když osobně znám člověka, který si dokázal zapamatovat kódy všech strojových instrukcí i jejich variant).</i></p>

<p>V&nbsp;některých případech se ruční překlad programu napsaného (na papíře) v&nbsp;assembleru do strojového kódu prováděl i na výkonnějších mikropočítačích. Strojové podprogramy (subrutiny) totiž bylo možné volat i z&nbsp;vyšších programovacích jazyků, typicky z&nbsp;BASICu. V&nbsp;tomto případě ovšem bylo nutné strojový program reprezentovat daty (hodnotami jednotlivých bajtů) a právě zde se mnohdy programátoři nevyhnuli ručnímu překladu, což je ukázáno na následujícím obrázku.</p>

<a href="http://www.root.cz/obrazek/210809/"><img src="http://i.iinfo.cz/images/462/dev-8bit-5-prev.jpg" class="image-210809" width="202" height="270" alt="&#160;" /></a>
<p><i>Obrázek x: Ruční překlad programu napsaného v&nbsp;assembleru (levá horní část tohoto skenu) na jednotlivé bajty, které jsou zapsány ve formě dat v&nbsp;BASICovém programu (pravá dolní část skenu).</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vyplnění sémantické mezery mezi mikroprocesorem a vyššími programovacími jazyky</h2>

<p>V&nbsp;roce 1962 se firma IBM rozhodla navrhnout do značné míry univerzální architekturu počítačů, která by pokrývala jak nároky jednodušších úloh (pro které stačily méně výkonné a tím pádem i levnější počítače), tak i nároky mnohem větší. Předností této architektury mělo být to, že systém &bdquo;rostl&ldquo; současně s&nbsp;rostoucími požadavky zákazníka bez nutnosti měnit programové vybavení. Výsledkem těchto snah firmy IBM byla platforma nazvaná <i>System/360</i>, resp. zkráceně <i>S/360</i>. Pro tuto platformu byla vytvořena poměrně rozsáhlá a složitá instrukční sada (<i>ISA</i>), která mimo běžné binární aritmetiky obsahovala i instrukce pro práci s&nbsp;textem, různé numerické formáty dat známé například z&nbsp;kalkulaček, ale i podporu BCD aritmetiky, která se dodnes používá například při výpočtech s&nbsp;měnou.  V&nbsp;té době totiž vládlo přesvědčení, že bohatší instrukční sada ulehčí práci překladačům z&nbsp;vyšších programovacích jazyků, vyplní takzvanou <i>sémantickou mezeru</i> mezi assemblerem a vyššími programovacími jazyky atd.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Platforma IBM System/360 a vznik architektury CISC</h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. Assemblery pro osmibitové domácí mikropočítače</h2>

<p>Programování na úrovni strojového kódu je samozřejmě velmi pracné, zejména ve chvíli, kdy je nutné existující program modifikovat a tím pádem měnit cílové adresy skoků, adresy globálních proměnných atd. Mnohem civilizovanější způsob představovalo právě použití <i>assemblerů</i>, což byly nástroje schopné překládat programy zapsané v&nbsp;jazyku symbolických adres/instrukcí do strojového kódu. Na osmibitových domácích mikropočítačích se používaly dva typy <i>assemblerů</i>.</p>

<a href="http://www.root.cz/obrazek/210813/"><img src="http://i.iinfo.cz/images/462/dev-8bit-9-prev.png" class="image-210813" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek XXX: Takto vypadá úryvek programu napsaný v&nbsp;assembleru
mikroprocesoru MOS 6502.</i></p>

<p>Prvním typem byly assemblery interaktivní, které uživateli nabízely poměrně komfortní vývojové prostředí, v&nbsp;němž bylo možné zapisovat jednotlivé instrukce, spouštět programy, krokovat je, vypisovat obsahy registrů atd.  Výhodou byla nezávislost těchto assemblerů na rychlém externím paměťovém médiu.  Druhý typ assemblerů je používán dodnes &ndash; jedná se vlastně o běžné překladače, kterým se na vstupu předloží zdrojový kód (uložený na kazetě či disketě) a po překladu se výsledný nativní kód taktéž uloží na paměťové médium (odkud ho lze spustit). Tyto assemblery byly mnohdy vybaveny více či méně dokonalým systémem maker (odtud název <i>macroassembler</i>).</p>

<a href="http://www.root.cz/obrazek/210817/"><img src="http://i.iinfo.cz/images/462/dev-8bit-13-prev.png" class="image-210817" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek XXX: Assembler na mikropočítači Commodore C64.</i></p>

<a href="http://www.root.cz/obrazek/210818/"><img src="http://i.iinfo.cz/images/462/dev-8bit-14-prev.png" class="image-210818" width="283" height="270" alt="&#160;" /></a>
<p><i>Obrázek XXX: Obal na kazetu se Zeus Assemblerem pro ZX Spectrum.</i></p>

<a href="http://www.root.cz/obrazek/210819/"><img src="http://i.iinfo.cz/images/462/dev-8bit-15-prev.png" class="image-210819" width="360" height="270" alt="&#160;" /></a>
<p><i>Obrázek XXX: Vývojové prostředí Zeus Assembleru.</i></p>

<a href="http://www.root.cz/obrazek/210820/"><img src="http://i.iinfo.cz/images/462/dev-8bit-16-prev.png" class="image-210820" width="370" height="247" alt="&#160;" /></a>
<p><i>Obrázek XXX: Jak se programovalo v&nbsp;assembleru si můžete vyzkoušet na
stránce <a href="http://6502asm.com">http://6502asm.com</a>. Zde je
implementován assembler i emulátor počítače založeného na osmibitovém
mikroprocesoru MOS 6502.</i></p>

<a href="http://www.root.cz/obrazek/211570/"><img src="http://i.iinfo.cz/images/80/a1-prev.png" class="image-211570" alt="&#160;" height="264" width="370" /></a>
<p><i>Obrázek XXX: Úvodní obrazovka Atari Macro Assembleru.</i></p>

<a href="http://www.root.cz/obrazek/211571/"><img src="http://i.iinfo.cz/images/322/a2-prev.png" class="image-211571" alt="&#160;" height="264" width="370" /></a>
<p><i>Obrázek XXX: Vývojové prostředí Atari Macro Assembleru.</i></p>

<a href="http://www.root.cz/obrazek/211572/"><img src="http://i.iinfo.cz/images/524/a3-prev.png" class="image-211572" alt="&#160;" height="264" width="370" /></a></p>
<p><i>Obrázek XXX: Vývojové prostředí Atari Macro Assembleru (výpis obsahu
pracovních registrů mikroprocesoru).</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Assemblery a86 a a386</h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Turbo Assembler a Microsoft Macro Assembler a vývojové prostředí ASM lab</h2>

<p></p>

<p></p>

<p>Dále se musíme zmínit o aplikaci <i>Asm Lab</i>. Jak již název tohoto IDE napovídá, byl tento nástroj určen pro programátory, kteří pracovali s&nbsp;assemblerem mikroprocesorů řady Intel x86. Úkolem <i>Asm Labu</i> bylo zpříjemnit tvorbu programů v&nbsp;assembleru a navíc vývojářům nabídnout různé doplňkové nástroje, například kalkulátor pro převod mezi různými číselnými soustavami, obligátní ASCII tabulku atd. <i>Asm Lab</i> bylo založeno na knihovně TurboVision, takže vlastně není překvapivé, že se jeho vzhled podobal dalším aplikacím s&nbsp;textovým uživatelským rozhraním, včetně dále popsaných integrovaných vývojových prostředí společnosti Borland. Editor, který používal mnoho zkratek kompatibilních s&nbsp;produkty Borlandu, byl propojen s&nbsp;dalšími moduly <i>Asm Labu</i>, takže uživatelé mohli například jednoduše přecházet mezi různými procedurami atd. Na klávesové zkratky byl napojen taktéž vlastní assembler (zde je míněn nástroj určený pro překlad do strojového kódu, nikoli jazyk).</p>

<a href="http://www.root.cz/obrazek/229446/"><img src="http://i.iinfo.cz/images/394/alab1-prev.png" class="image-229446" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek XXX: Úvodní obrazovka integrovaného vývojového prostředí ASM
Lab.</i></p>

<p>Velmi důležitou součástí <i>Asm Labu</i> byla nápověda, která obsahovala mj.&nbsp;i podrobný popis všech instrukcí mikroprocesorů řady Intel x86. U každé instrukce byla popsána její funkce, dostupné adresovací režimy, počet bajtů nutných pro uložení instrukce (a samozřejmě i operandů) do operační paměti a taktéž počet cyklů nutných pro provedení instrukce u různých variant mikroprocesorů.</p>

<a href="http://www.root.cz/obrazek/229447/"><img src="http://i.iinfo.cz/images/636/alab2-prev.png" class="image-229447" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek XXX: Programátorský editor integrovaný do Asm Labu.</i></p>

<a href="http://www.root.cz/obrazek/229448/"><img src="http://i.iinfo.cz/images/253/alab3-prev.png" class="image-229448" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek XXX: Přímo z&nbsp;Asm Labu je možné spustit i programátorskou kalkulačku.</i></p>

<a href="http://www.root.cz/obrazek/229449/"><img src="http://i.iinfo.cz/images/187/alab4-prev.png" class="image-229449" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek XXX: Podrobná nápověda k&nbsp;instrukci SAL (SHL).</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Assemblery v&nbsp;Linuxu</h2>

<p>V&nbsp;této kapitole budeme pod termínem &bdquo;assembler&ldquo; chápat programový nástroj určený pro transformaci zdrojového kódu naprogramovaného v&nbsp;jazyku symbolických adres do strojového kódu. Pro Linux vzniklo hned několik takových nástrojů, přičemž některé nástroje jsou komerční a jiné patří mezi open source. Z&nbsp;nekomerčních nástrojů, které nás samozřejmě na serveru <a href="https://www.root.cz">https://www.root.cz</a> zajímají především, se jedná o známý <i>GNU Assembler</i>, dále pak o nástroj nazvaný <i>Netwide assembler (NASM)</i>, nástroj <i>Yasm Modular Assembler</i> či až překvapivě výkonný <i>vasm</i>. <i>NASM</i> a <i>Yasm</i> jsou pro první krůčky v&nbsp;assembleru velmi dobře použitelné, neboť mají dobře zpracovaný mechanismus reakce na chyby, dají se v&nbsp;nich psát čitelné programy atd. Určitý problém nastává v&nbsp;případě, kdy je nutné vyvíjet aplikace určené pro jinou architekturu, než je 32bitová architektura i386 či dnes již převažující architektura x86_64, a to z&nbsp;toho důvodu, že ani <i>Netwide assembler</i> ani <i>Yasm</i> nedokážou pracovat s&nbsp;odlišnou instrukční sadou. Naproti tomu <i>GNU Assembler</i> tímto problémem ani zdaleka netrpí, takže se v&nbsp;následujících kapitolách budeme zabývat jak nástrojem <i>NASM</i>, tak i <i>GNU Assemblerem</i>.</p>

<p>Bližší informace o jednotlivých assemblerech pro Linux zmíněných v&nbsp;předchozím odstavci lze najít na jejich domovských stránkách, popř.&nbsp;v&nbsp;porovnávací tabulce:</p>

<ol>

<li>yasm<br />
<a href="https://yasm.tortall.net/">https://yasm.tortall.net/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>FASM<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>NASM<br />
<a href="https://www.nasm.us/">https://www.nasm.us/</a>
</li>

<li>GNU Binutils (včetně GNU assembleru)<br />
<a href="https://www.gnu.org/software/binutils/">https://www.gnu.org/software/binutils/</a>
</li>

<li>Open Watcom Assembler<br />
<a href="http://www.openwatcom.com/">http://www.openwatcom.com/</a>
</li>

<li>Porovnání assemblerů pro platformu x86-64<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_assemblers#x86-64_assemblers">https://en.wikipedia.org/wiki/Comparison_of_assemblers#x86-64_assemblers</a>
</li>

</ol>




<p><a name="k10"></a></p>
<h2 id="k10">10. GNU Assembler</h2>

<p><i>GNU Assembler</i> (<i>gas</i>) je součástí skupiny nástrojů nazvaných <i>GNU Binutils</i>. Jedná se o nástroje určené pro vytváření a správu binárních souborů obsahujících takzvaný &bdquo;objektový kód&ldquo;, dále nástrojů určených pro práci s&nbsp;knihovnami strojových funkcí i pro profilování. Mezi <i>GNU Binutils</i> patří vedle <i>GNU Assembleru</i> i linker <strong>ld</strong>, profiler <strong>gprof</strong>, správce archivů strojových funkcí <strong>ar</strong>, nástroj pro odstranění symbolů z&nbsp;objektových a spustitelných souborů <strong>strip</strong> a několik pomocných utilit typu <strong>nm</strong>, <strong>objdump</strong>, <strong>size</strong> a <strong>strings</strong>. <i>GNU Assembler</i> je možné použít buď pro překlad uživatelem vytvořených zdrojových kódů nebo pro zpracování kódů vygenerovaných překladači vyšších programovacích jazyků (<strong>GCC</strong> atd.). Zajímavé je, že všechny moderní verze <i>GNU Assembleru</i> podporují jak původní AT&amp;T syntaxi, tak i (podle mě čitelnější) syntaxi používanou společností Intel.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Netwide Assembler (NASM)</h2>

<p><i>Netwide Assembler (NASM)</i> vznikl v&nbsp;době, kdy začali na operační systém Linux přecházet programátoři znající operační systémy DOS a (16/32bit) Windows. Tito programátoři byli většinou dobře seznámeni s&nbsp;možnostmi assemblerů, které se na těchto platformách používaly nejčastěji &ndash; <i>Turbo Assembleru (TASM)</i> společnosti Borland i <i>Microsoft Macro Assembleru (MASM)</i> a tak jim možnosti <i>GNU Assembleru</i> (který má své kořeny na odlišných architekturách) příliš nevyhovovaly. Výsledkem snah o vytvoření nástroje podobnému <i>TASMu</i> či <i>MASMu</i> byl právě <i>NASM</i>, který podporuje stejný způsob zápisu operandů instrukcí a navíc ještě zjednodušuje zápis těch instrukcí, u nichž je jeden operand tvořen nepřímou adresou. <i>NASM</i> byl následován projektem <i>Yasm</i> (fork+přepis), ovšem základní vlastnosti a především pak vazba na platformu i386 a x86_64 zůstaly zachovány (to mj.&nbsp;znamená, že například na <i>Raspberry Pi</i> možnosti těchto dvou nástrojů plně nevyužijeme, což je určitě škoda).</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vybrané aplikace naprogramované (kompletně) v&nbsp;assembleru</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. VisiCalc</h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Lotus 1-2-3</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Volkov Commander</h2>

<p>Jedním z&nbsp;nejúspěšnějších programů, jejichž uživatelské rozhraní i nabízené funkce byly odvozeny od původního <i>Norton Commanderu</i>, byl program <i>Volkov Commander</i> z&nbsp;roku 1992, jehož autorem je <i>Vsevolod Volkov</i> z&nbsp;Ukrajiny. Jako mnoho dalších aplikací pocházejících z&nbsp;postsovětských zemí, je i <i>Volkov Commander</i> ukázkou perfektní znalosti práce s&nbsp;assemblerem &ndash; celý program včetně prohlížeče a editoru se nachází v&nbsp;jediném spustitelném souboru typu COM, jehož délka nepřesáhla (až do verze 4.0) 64 kB. Ve <i>Volkov Commanderu</i> měl prakticky každý dialog svoji lokální historii, bylo podporováno rozdělení souborů na více částí při kopiích na disketu (velmi užitečná pomůcka) a ve verzi 5.0 alfa (4.99.xxx) byla přidána například i podpora pro dlouhá jména souborů (LFN), ovšem pouze v&nbsp;případě, že se <i>Volkov Commander</i> spouštěl z&nbsp;Windows, které tuto podporu nabízely. Navíc se mohla při kopírování souborů využívat veškerá dostupná paměť, což kopírování urychlovalo, například při zápisu na diskety nebo práci s&nbsp;CD-ROM.</p>

<a href="http://i.iinfo.cz/images/192/gui10-7.png"><img src="http://i.iinfo.cz/images/192/gui10-7-prev.png" width="370" height="231" alt=" " /></a>
<p><i>Obrázek XXX: Textové uživatelské prostředí Volkov Commanderu je prakticky k&nbsp;nerozeznání podobné prostředí původního Norton Commanderu.</i></p>

<a href="http://i.iinfo.cz/images/192/gui10-8.png"><img src="http://i.iinfo.cz/images/192/gui10-8-prev.png" width="370" height="231" alt=" " /></a>
<p><i>Obrázek XXX: Nápověda k&nbsp;Volkov Commanderu 4.0 s&nbsp;hypertextovými odkazy je taktéž podobná nápovědě k&nbsp;Norton Commanderu.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. SpeedScript (klasická verze)</h2>

<p>Na domácích osmibitových mikropočítačích vybavených mikroprocesorem MOS 6502 (nebo jeho variantou MOS 6510) byl velmi populárním textovým procesorem program nazvaný <i>SpeedScript</i>, který byl naprogramován <a href="https://www.linkedin.com/pub/charles-brannon/0/55b/b27">Charlesem Brannonem</a>. První verze <i>SpeedScriptu</i> byla pod jménem <i>Scriptor</i> publikována časopisem Compute! již v&nbsp;roce 1983 ve formě zdrojového kódu (uživatelé si program museli sami opsat do počítače a případně nahrát na kazety/diskety). O rok později pak stejný autor vydal nový program již nazvaný <i>SpeedScript</i>, který byl původně určený pro mikropočítače <i>Commodore VIC-20</i> a <i>Commodore C64</i>, později však došlo k&nbsp;portaci i na osmibitové mikropočítače <i>Atari</i> a <i>Apple II</i>; <i>SpeedScript</i> se i díky tomu stal vůbec nejpopulárnějším programem publikovaným v&nbsp;časopise Compute!. Nejrozšířenější mezi uživateli byla verze 3 a 3.2 (1985, 1987).</p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-1.png" class="image-214381" width="304" height="433" alt="&#160;" />
<p><i>Obrázek XXX: Obal s&nbsp;paměťovým médiem nebo návodem ke SpeedScriptu.</i></p>

<p>Textový procesor <i>SpeedScript</i> se vyznačoval minimalisticky pojatým uživatelským rozhraním (stavový řádek kombinovaný s&nbsp;příkazovým řádkem), poměrně sofistikovanou sadou příkazů, existencí operace <i>undo</i> (podobně implementované jako v&nbsp;Emacsu, tj.&nbsp;přes &bdquo;kill buffer&ldquo;), operacemi prováděnými na úrovni slov, vět či odstavců (jako v&nbsp;editoru Vi) atd. Mimochodem, zdrojový kód SpeedScriptu 3.0 je dostupný například <a href="http://www.atariarchives.org/speedscript/ch3.php">zde</a>.</p>

<a href="http://www.root.cz/obrazek/214382/"><img src="http://i.iinfo.cz/images/173/editors-3-2-2-prev.png" class="image-214382" width="335" height="270" alt="&#160;" /></a>
<p><i>Obrázek XXX: Klávesové zkratky SpeedScriptu ve verzi pro počítače Apple II.</i></p>

<p>Zajímavé je zjistit, proč například operace pro smazání textu uměly smazat slovo, větu či odstavec nebo proč existovala operace na vložení 256 mezer &ndash; <i>SpeedScript</i> se totiž musel vyrovnat s&nbsp;tím, že běžel na relativně pomalých počítačích a (pravděpodobně) neimplementoval gap buffer, což znamenalo, že operace smazání či vložení jednoho znaku byla dosti pomalá, zejména u delších textů.</p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-3.png" class="image-214383" width="580" height="700" alt="&#160;" />
<p><i>Obrázek XXX: Klávesové zkratky SpeedScriptu ve verzi pro počítače Commodore VIC-20.</i></p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-4.png" class="image-214384" width="637" height="453" alt="&#160;" />
<p><i>Obrázek XXX: Klávesové zkratky SpeedScriptu ve variantě pro počítače Atari.</i></p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-5.png" class="image-214385" width="672" height="480" alt="&#160;" />
<p><i>Obrázek XXX: SpeedScript pro Atari: úvodní obrazovka původního programu (jeho binární obraz má velikost 8330 bajtů).</i></p>

<p>Textový procesor <i>SpeedScript</i> se dočkal i dalších variant. Zajímavá je například verze určená pro osmibitový mikropočítač <i>Commodore C128</i>, který se od původního slavného <i>Commodore C64</i> odlišoval jak dvojnásobnou kapacitou operační paměti (128kB oproti 64kB), tak zejména podporou horizontálního rozlišení 640 pixelů, což umožnilo na jednom řádku zobrazit 80 poměrně dobře čitelných znaků, samozřejmě za předpokladu, že je použit odpovídající monitor. <i>SpeedScript</i> byl pro tento nový grafický režim upraven a vydán pod názvem <i>SpeedScript 128</i>. Pořád se však jednalo o aplikaci naprogramovanou ve strojovém kódu mikroprocesoru MOS 6502.</p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-11.png" class="image-214391" width="640" height="400" alt="&#160;" />
<p><i>Obrázek XXX: SpeedScript pro Commodore C128 používá 80 znaků na řádek.</i></p>

<p>Další varianta <i>SpeedScriptu</i> je zcela odlišná. Jedná se o aplikaci určenou pro počítače IBM PC s&nbsp;DOSem, přičemž tato varianta textového procesoru byla přepsána do Pascalu a nemá tak s&nbsp;původním zdrojovým kódem prakticky nic společného (jen klávesové zkratky a logiku ovládání) a kvůli přepsání do vyššího programovacího jazyka pro nás ani není v&nbsp;kontextu dnešního článku zajímavý. Ovšem na IBM PC měl <i>SpeedScript</i> dosti velkou konkurenci a nebyl na této platformě tak oblíbený, jako na osmibitových mikropočítačích.</p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-12.png" class="image-214392" width="640" height="400" alt="&#160;" />
<p><i>Obrázek XXX: SpeedScript pro IBM PC (DOS).</i></p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-13.png" class="image-214393" width="640" height="400" alt="&#160;" />
<p><i>Obrázek XXX: SpeedScript pro IBM PC (DOS).</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Textový editor e (pro DOS)</h2>

<p>Další textový editor napsaný v&nbsp;assembleru, s&nbsp;nímž se dnes seznámíme, se jmenuje jednoduše <i>E</i>, ovšem je známý spíše pod názvem <i>E.COM</i>, což je název odvozený od jména spustitelného souboru s&nbsp;tímto editorem. Editor <i>E</i>, jehož autorem je David Nye, je kompletně naprogramován v&nbsp;assembleru (šestnáctibitový reálný režim procesorů Intel řady 80x86). Velikost tohoto textového editoru je přibližně šest kilobajtů, což mj.&nbsp;znamená, že screenshoty zobrazené pod tímto odstavcem jsou větší, než samotný editor. I přes malou velikost nabízí tento program velmi zajímavé možnosti &ndash; samozřejmě práci s&nbsp;bloky, ale i možnost spouštění externích programů po zadání klávesových zkratek, formátování odstavců, nastavení režimu automatického odsazení apod. Výjimečné jsou klávesové zkratky Ctrl+Home a Ctrl+End, kterými lze nastavit levý a pravý okraj odstavců (na základě aktuální pozice kurzoru), což vlastně znamená, že <strong>E.COM</strong> lze použít i jako jednoduchý textový procesor. Mezi nevýhody patří především fakt, že řádky delší než 80 znaků jsou automaticky a bez varování uříznuty na velikost pouze oněch 80 znaků. I přesto se však jedná o velmi zajímavý minimalisticky pojatý program, který je možné díky dostupnosti jeho zdrojového kódu dále upravovat a rozšiřovat.</p>

<a href="http://www.root.cz/obrazek/227819/"><img src="http://i.iinfo.cz/images/513/e1-prev.png" class="image-227819" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek XXX: Editace zdrojového souboru v&nbsp;editoru E. Tento zdrojový soubor je pro ilustraci otevřen i v&nbsp;dalších editorech popisovaných v&nbsp;navazujících kapitolách.</i></p>

<a href="http://www.root.cz/obrazek/227820/"><img src="http://i.iinfo.cz/images/194/e2-prev.png" class="image-227820" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek XXX: Integrovaná obrazovka s&nbsp;nápovědou k&nbsp;editoru E.</i></p>

<a href="http://www.root.cz/obrazek/227821/"><img src="http://i.iinfo.cz/images/564/e3-prev.png" class="image-227821" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek XXX: Tento editor podporuje i práci s&nbsp;vizuálními bloky.</i></p>

<a href="http://www.root.cz/obrazek/227822/"><img src="http://i.iinfo.cz/images/474/e4-prev.png" class="image-227822" alt="&#160;" height="231" width="370" /></a>
    <p><i>Obrázek XXX: Editor E.COM po malých úpravách provedených autorem tohoto článku. Nejviditelnější je změna atributů textu (modré pozadí, světlemodrý text) a taktéž podpora pro textové režimy 80&times;28, 80&times;43 a 80&times;50.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Textový editor e3 (pro Linux)</h2>

<p>Další aplikací naprogramovanou mj.&nbsp;i v&nbsp;assembleru, je textový editor, který se jmenuje <i>e3</i>. Již samotné pojmenování tohoto editoru naznačuje, že se jeho autor <i>Albrecht Kleine</i> snažil o vytvoření minimalistického nástroje, což se skutečně (alespoň podle mého názoru) povedlo. Textový editor <i>e3</i> je totiž naprogramován v&nbsp;assembleru mikroprocesorů řady x86. Zdrojový kód původní verze <i>e3</i> je uložen v&nbsp;jediném souboru s&nbsp;přibližně 6500 řádky optimalizovaného assembleru určeného pro překlad do 32bitového režimu (použít lze například známý assembler <i>NASM</i>). Pro 64bitový režim existuje jednoduchý skript, který zdrojový kód <i>e3</i> jednoduše transformuje (odlišná jména registrů apod.). Kromě toho existuje i šestnáctibitová verze editoru <i>e3</i> určená pro systém DOS či pro šestnáctibitové (real mode) zavaděče a různé utility.  Současně existuje i varianta <i>e3</i> přepsaná do programovacího jazyka C, aby bylo možné tento nepochybně zajímavý editor používat například na počítačích vybavených mikroprocesory ARM či MIPS. My se však v&nbsp;dalším textu budeme zabývat pouze originální 32bitovou a 64bitovou variantou <i>e3</i> naprogramovanou v&nbsp;assembleru.</p>

<a href="http://www.root.cz/obrazek/213730/"><img src="http://i.iinfo.cz/images/237/e17-prev.png" class="image-213730" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek xx: Spuštění editoru e3 v&nbsp;režimu emulace klávesových zkratek WordStaru.</i></p>

<p>Binární obraz <i>e3</i> je v&nbsp;porovnání s&nbsp;ostatními moderními textovými editory velmi malý &ndash; podle použitého režimu (32bit/64bit) je spustitelný soubor <strong>/usr/bin/e3</strong> velký přibližně 13 či 17 kB a žádné další soubory nejsou pro práci s&nbsp;<i>e3</i> zapotřebí. Textový editor <i>e3</i> přitom nabízí uživatelům poměrně velké množství funkcí. Asi nejzajímavější je existence několika režimů práce editoru &ndash; ten totiž dokáže napodobit editor <i>WordStar</i> (spuštěno přes link <strong>e3ws</strong>), <i>Emacs</i> (spuštěno přes link <strong>e3em</strong>), <i>Vi/Vim</i> (spuštěno přes link <strong>e3vi</strong>) <i>Pico/Nano</i> (spuštěno přes link <strong>e3pi</strong>) či <i>NEdit (Nirvana Editor)</i> (spuštěno přes <strong>e3ne</strong>). Režimy je možné dokonce přepínat i za běhu editoru a součástí je i obrazovka s&nbsp;klávesovými zkratkami (to vše je samozřejmě uloženo ve zmíněných 13 či 17 kB). <i>e3</i> nabízí dokonce i funkci &bdquo;undo&ldquo;, obsahuje kalkulačku (dokáže spočítat i složitý aritmetický výraz zapsaný v&nbsp;textu!) a &ndash; což je v&nbsp;našich podmínkách velmi důležité &ndash; podporuje plnohodnotný osmibitový vstup znaků. Režim kompatibility s&nbsp;editorem <i>vi</i> je překvapivě dobrý, ovšem například uživatele <i>Vimu</i> některé neexistující příkazy a režimy budou pravděpodobně mrzet (nejvíc asi absence plnohodnotného vizuálního režimu).</p>

<a href="http://www.root.cz/obrazek/213731/"><img src="http://i.iinfo.cz/images/335/e18-prev.png" class="image-213731" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek xx: Obrazovka s&nbsp;nápovědou je dostupná za všech okolností a přitom je vždy indikováno, jakou klávesovou zkratkou se nápověda zobrazí.</i></p>

<p>Vzhledem ke zcela minimální velikosti tohoto textového editoru asi nepřekvapí, že některé vlastnosti nejsou implementovány. Týká se to zejména podpory pro zarovnávání textu a automatického odřádkování i přerovnání odstavců, což je však funkce užitečná jen v&nbsp;některých případech, nikoli například při úpravách konfiguračních souborů či zdrojových kódů. Taktéž chybí podpora pro využití regulárních výrazů při hledání a nahrazování. To je však vyřešeno elegantním způsobem &ndash; funkcí pro poslání vybraného textu do filtru <strong>sed</strong>, což (znalým) uživatelům otevírá široké možnosti použití. <i>e3</i> se pravděpodobně nestane jediným textovým editorem, který by byl vhodný pro všechny příležitosti, ovšem ukazuje, že i velmi krátký program dokáže být překvapivě mocný a přitom rychlý a současně nenáročný na systémové zdroje.</p>

<a href="http://www.root.cz/obrazek/213733/"><img src="http://i.iinfo.cz/images/207/e19-prev.png" class="image-213733" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek xx: Editace zdrojového kódu napsaného v&nbsp;programovacím jazyce C.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Legendární textový editor WordStar</h2>

<p><i>"I actually have two computers. I have a computer I browse the Internet with and I get my email on, and I do my taxes on. And then I have my writing computer, which is a DOS machine, not connected to the Internet. I use WordStar 4.0 as my word processing system."<br />
George R. R. Martin, autor Písně ledu a ohně</i></p>

<p>Od konce sedmdesátých let až do zhruba první poloviny osmdesátých let minulého století byl nejznámějším a současně i nejprodávanějším komerčním textovým procesorem slavný <i>WordStar</i>. Historie tohoto &ndash; některými autory dodnes používaného &ndash; textového procesoru, který je například Johnem C. Dvorakem považován za jednu z&nbsp;nejlepších aplikací, která kdy byla vytvořena, sahá až do roku 1977, tj.&nbsp;vlastně do období předcházející boomu domácích osmibitových mikropočítačů. V&nbsp;tomto roce si totiž <i>Seymour Rubinstein</i> (jeden ze zaměstnanců firmy IMSAI) pročetl studii společnosti <i>Datapro</i>, která se zabývala již předminule zmíněnými specializovanými systémy s&nbsp;textovými procesory, a rozhodl se, že založí čistě softwarovou společnost orientovanou převážně na tento segment trhu. O rok později &ndash; konkrétně v&nbsp;roce 1978 &ndash; založil Rubinstein firmu nazvanou <i>MicroPro</i> a přesvědčil svého bývalého kolegu <i>Johna Robbinse Barnabyho</i>, aby se k&nbsp;nově založené firmě připojil a vyvíjel pro ni aplikace. Barnaby byl excelentní programátor orientovaný na vývoj v&nbsp;assembleru (v&nbsp;čem jiném v&nbsp;té době? :-) a o několik let později se stal jedním z&nbsp;nejznámějších programátorů celé éry vzestupu fenoménu zvaného &bdquo;mikropočítač&ldquo;.</p>

<img src="http://i.iinfo.cz/images/640/d4-2.png" class="image-215143" width="441" height="479" alt="&#160;" />
<p><i>Obrázek XXX: Dobová reklama na textový editor WordStar (první
část).</i></p>

<p>Prvním větším úkolem, kterým byl Barnaby pověřen, bylo naprogramování dvojice programů &ndash; relativně jednoduchého textového editoru nazvaného zpočátku <i>WordMaster</i> a dále pak programu <i>SuperSort</i>. Oba programy byly určeny pro operační systém CP/M pro osmibitové mikroprocesory Intel 8080 a Zilog Z80. Barnaby pracoval na vývoji obou programů současně (!), přičemž pro vytvoření <i>WordMasteru</i> použil svůj dřívější textový editor nazvaný <i>NED</i> (New EDitor, screenshot bohužel nemám k&nbsp;dispozici), psaný &ndash; jak bylo Barnabyho zvykem &ndash; v&nbsp;assembleru mikroprocesoru Intel 8080. <i>WordMaster</i> se jakožto komerční aplikace prodával poměrně dobře, ovšem uživatelé začali požadovat nové funkce, především podporu pro tisk a taktéž podporu pro (polo)automatické formátování a zalamování textu &ndash; ostatně právě tyto dvě funkce tvořily určitou hranici mezi textovými editory a textovými procesory, o čemž jsme se již zmínili minule. John Barnaby se tedy s&nbsp;velkým nasazením pustil do dalšího úkolu &ndash; vytvoření plnohodnotného textového procesoru s&nbsp;podporou tisku, aktivních okrajů textu a taktéž podporou pro automatický word wrapping (přeskládání slov v&nbsp;odstavci při jeho editaci, což umí i později naprogramované a výše zmíněné editory <i>D-Text</i> a <i>TextWriter</i>).</p>

<img src="http://i.iinfo.cz/images/640/d4-3.png" class="image-215144" width="445" height="134" alt="&#160;" />
<p><i>Obrázek XXX: Dobová reklama na textový editor WordStar (druhá část).</i></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. 137 000 řádků v&nbsp;assembleru: projekt s&nbsp;odhadovanou pracností 42 člověkoroků napsaný za deset měsíců</h2>

<p>Naprogramování textového procesoru nazvaného <i>WordStar</i> trvalo deset měsíců a nakonec bylo z&nbsp;původního kódu <i>WordMasteru</i> použito pouze necelých 10%, což mi na program napsaný v&nbsp;assembleru přijde překvapivě velké číslo. Johnu Barnabymu se podařil heroický a možná dodnes nepřekonaný výkon &ndash; za oněch deset měsíců napsal 137 tisíc řádků kvalitního a současně i otestovaného programového kódu v&nbsp;assembleru. Seymour Rubinstein a jeho přátelé ze společnosti IBM později vypočítali, že se jednalo o práci v&nbsp;rozsahu 42 člověkoroků! V&nbsp;roce 1979 byl zahájen prodej první komerční verze <i>WordStaru</i>, jehož cena byla 495 dolarů za samotný program a 40 dolarů za manuál (éra záměrně snižovaných cen SW přišla až později).  Jednalo se o velmi úspěšný produkt &ndash; jen za rok 1979 prodej přesáhl 500&nbsp;000 dolarů, v&nbsp;roce 1980 již 1,8 milionu dolarů a v&nbsp;roce 1981 dokonce 5,2 milionu dolarů. Největší obrat měla tato firma v&nbsp;roce 1984 &ndash; celých 70 milionů dolarů &ndash; což z&nbsp;ní činilo největší softwarovou firmu na světě! Druhá verze <i>WordStaru</i> (taktéž vydaná pro CP/M) měla zabudovanou ochranu proti kopírování, což se však odrazilo na menší oblibě. V&nbsp;dalších verzích byla tato ochrana zrušena.</p>

<p>U Johna Barnabyho, který pracoval velmi intenzivně mnoho hodin denně sedm dnů v&nbsp;týdnu, se však na konci roku 1979 začal projevoval syndrom vyhoření.  Z&nbsp;tohoto důvodu zažádal o čtyřměsíční volno, které mu Rubinstein skutečně dal, ostatně pravděpodobně mu ani nic jiného nezbývalo. Avšak ani na počátku roku 1980 Barnaby ještě nebyl připraven pokračovat v&nbsp;práci a nakonec firmu <i>MicroPro</i> opustil. Jako každý správný hrdina se však John Barnaby ještě jednou ukázal na scéně a to ve druhé polovině roku 1980. Firma <i>Epson</i> totiž zkonstruovala malý počítač <i>PX-8</i> se zabudovaným monochromatickým LCD. Společnost <i>Epson</i> si přála, aby v&nbsp;tomto počítači byla v&nbsp;paměti ROM uložena upravená verze <i>WordStaru</i> schopná pracovat s&nbsp;pouhými 48 kB RAM, což znamenalo přepsat část původního zdrojového kódu (psaného v&nbsp;assembleru, jak již víme z&nbsp;předchozího textu). Tehdejší programátoři, kteří ve firmě <i>MicroPro</i> pracovali, odhadli, že jim bude konverze <i>WordStaru</i> na <i>PX-8</i> trvat šest měsíců. Rubinstein na to odpověděl, že se přece jedná o pouhopouhou konverzi, která musí být na základě požadavků firmy <i>Epson</i> hotová za čtyři měsíce. Po dlouhých diskuzích nakonec Rubinstein znovu (a naposledy) přemluvil Barnabyho, aby portaci provedl samostatně. John Barnaby si řekl o 100 dolarů na hodinu a nakonec se mu podařilo portaci dodělat za pouhé dva týdny! (další týden si vyžádalo odladění a otestování).</p>

<img src="http://i.iinfo.cz/images/640/d4-4.png" class="image-215145" width="600" height="368" alt="&#160;" />
<p><i>Obrázek XXX: Počítač PX-8 se zabudovaným monochromatickým LCD a WordStarem.</i></p>

<p>V&nbsp;roce 1981 byl <i>WordStar</i> vydán pro operační systém <i>CP/M-86</i>, tj.&nbsp;pro mikropočítače postavené na mikroprocesorech <i>Intel 80x86</i>. Říká se, že programátoři firmy <i>MicroPro</i> nebyli schopni (nebo neměli dosti času) na pochopení původního optimalizovaného zdrojového kódu Johna Barnabyho, takže velkou část kódu prostě přepsali z&nbsp;instrukcí osmibitového mikroprocesoru <i>Intel 8080</i> na instrukce šestnáctibitového mikroprocesoru <i>Intel 8086</i> (výsledek &ndash; ještě první verze <i>WordStaru</i> pro DOS dokázala pracovat jen s&nbsp;64 kB RAM). I to je možná důvod, proč se o tři roky později společnost <i>MicroPro</i> rozhodla, že celý textový procesor přepíše znovu, tentokrát v&nbsp;programovacím jazyce C, ale to již poněkud předbíháme. Nicméně na konci roku 1981 byl <i>WordStar</i> bezpochyby nejslavnějším textovým procesorem provozovaným prakticky na všech počítačích s&nbsp;osmibitovým operačním systémem <i>CP/M</i> i s&nbsp;jeho šestnáctibitovou variantou <i>CP/M-86</i>.</p>

<p>Vzhledem k&nbsp;tomu, že <i>WordStar</i> byl úspěšně portován na operační systém <i>CP/M-86</i>, bylo jen otázkou času, kdy se firma <i>MicroPro</i> pokusí o vydání verze určené pro operační systém <i>MS-DOS</i>, čímž by se <i>WordStaru</i> otevřela cesta na potenciálně velmi rozsáhlý trh s&nbsp;programy pro počítače IBM PC. Již v&nbsp;dubnu 1982 se dalšímu hackerovi z&nbsp;firmy <i>MicroPro</i> &ndash; <i>Jimu Foxovi</i> &ndash; podařilo za jedinou noc upravit verzi <i>WordStaru</i> pro <i>CP/M-86</i> takovým způsobem, že tento textový procesor mohl být spuštěn v&nbsp;MS-DOSu. Jednalo se prozatím o technologické demo, které Jim Fox ukázal další ráno Rubinsteinovi, ovšem plnohodnotná portace byla provedena až skupinou irských programátorů, kteří pro vývoj používali vývojový systém firmy Intel, jenž pracoval s&nbsp;operačním systémem <i>ISIS II</i> a pro ukládání dat používal osmipalcové diskety (nikoli pevný disk). Vytvořené spustitelné soubory s&nbsp;<i>WordStarem</i> byly následně přeneseny na IBM PC s&nbsp;využitím sériového portu.</p>

<img src="http://i.iinfo.cz/images/111/gui11-13.jpg" width="350" height="497" alt=" " />
<p><i>Obrázek XXX: Další dobová reklama na textový procesor WordStar v&nbsp;podstatě ani moc nepřeháněla :-).<br />
Zdroj: www.old-computers.com</i></p>



<p><a name="k21"></a></p>
<h2 id="k21">21. Odkazy na Internetu</h2>

<ol>

<li>George R. R. Martin writes with a DOS word processor<br />
<a href="http://www.cnet.com/news/george-r-r-martin-writes-with-a-dos-word-processor/#!">http://www.cnet.com/news/george-r-r-martin-writes-with-a-dos-word-processor/#!</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>TIOBE Index for September 2019<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

<li>Assembly language on TIOBE Index<br />
<a href="https://www.tiobe.com/tiobe-index/assembly-language/">https://www.tiobe.com/tiobe-index/assembly-language/</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>A86/A386 assembler and D86/D386 debugger<br />
<a href="http://eji.com/a86/">http://eji.com/a86/</a>
</li>

<li>FASM<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>NASM<br />
<a href="https://www.nasm.us/">https://www.nasm.us/</a>
</li>

<li>High Level Assembly (home page)<br />
<a href="http://plantation-productions.com/Webster/">http://plantation-productions.com/Webster/</a>
</li>

<li>High Level Assembly (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/High_Level_Assembly">https://en.wikipedia.org/wiki/High_Level_Assembly</a>
</li>

<li>A86/A386 Features<br />
<a href="http://eji.com/a86/features.htm#FeaturesA86">http://eji.com/a86/features.htm#FeaturesA86</a>
</li>

<li>Sphinx C--<br />
<a href="http://c--sphinx.narod.ru/indexe.htm">http://c--sphinx.narod.ru/indexe.htm</a>
</li>

<li>OPEN SPHiNX C-- Compiler<br />
<a href="https://sourceforge.net/projects/c--/">https://sourceforge.net/projects/c--/</a>
</li>

<li>The Art of Assembly Language<br />
<a href="http://www.plantation-productions.com/Webster/www.artofasm.com/Windows/HTML/AoATOC.html">http://www.plantation-productions.com/Webster/www.artofasm.com/Windows/HTML/AoATOC.html</a>
</li>

<li>SpeedScript 3.2 for the Commodore 64<br />
<a href="http://www.atarimagazines.com/compute/gazette/198705-speedscript.html">http://www.atarimagazines.com/compute/gazette/198705-speedscript.html</a>
</li>

<li>SpeedScript source code<br />
<a href="http://www.atariarchives.org/speedscript/ch3.php">http://www.atariarchives.org/speedscript/ch3.php</a>
</li>

<li>SpeedScript 3.0: All Machine Language Word Processor For the Atari<br />
<a href="http://www.atariarchives.org/speedscript/ch1.php">http://www.atariarchives.org/speedscript/ch1.php</a>
</li>

<li>Textové editory pro mainframy<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?MainframeEditorFamily">http://texteditors.org/cgi-bin/wiki.pl?MainframeEditorFamily</a>
</li>

<li>Text editor (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Text_editor">https://en.wikipedia.org/wiki/Text_editor</a>
</li>

<li>Line editor (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Line_editor">https://en.wikipedia.org/wiki/Line_editor</a>
</li>

<li>Opravdoví programátoři nepoužívají Pascal<br />
<a href="http://www.logix.cz/michal/humornik/Pojidaci.Kolacu.xp">http://www.logix.cz/michal/humornik/Pojidaci.Kolacu.xp</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html">https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html</a>
</li>

<li>Linux Assembly website<br />
<a href="http://asm.sourceforge.net/">http://asm.sourceforge.net/</a>
</li>

<li>Using Assembly Language in Linux<br />
<a href="http://asm.sourceforge.net/articles/linasm.html">http://asm.sourceforge.net/articles/linasm.html</a>
</li>

<li>Borland Turbo Assembler<br />
<a href="https://web.archive.org/web/20101023185143/http://info.borland.com/borlandcpp/cppcomp/tasmfact.html">https://web.archive.org/web/20101023185143/http://info.borland.com/borlandcpp/cppcomp/tasmfact.html</a>
</li>

<li>Microsoft Macro Assembler Reference<br />
<a href="https://docs.microsoft.com/en-us/cpp/assembler/masm/microsoft-macro-assembler-reference?view=vs-2019">https://docs.microsoft.com/en-us/cpp/assembler/masm/microsoft-macro-assembler-reference?view=vs-2019</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

