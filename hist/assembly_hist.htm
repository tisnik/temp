<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Sedmdesátiny assemblerů</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Sedmdesátiny assemblerů</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Předchozí článek o historii IT byl věnován šedesátým narozeninám programovacího jazyka COBOL. Ovšem ještě před příchodem COBOLu a dalších vyšších programovacích jazyků se začaly používat assemblery, které slaví sedmdesátiny. A podobně jako COBOL, mají i assemblery stále svou oblast použití.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Sedmdesátiny assemblerů</a></p>
<p><a href="#k02">2. Programování na úrovni strojového kódu</a></p>
<p><a href="#k03">3. První generace assemblerů a jejich další vývoj</a></p>
<p><a href="#k04">4. Vyplnění sémantické mezery mezi mikroprocesorem a vyššími programovacími jazyky</a></p>
<p><a href="#k05">5. Platforma IBM System/360 a vznik architektury CISC</a></p>
<p><a href="#k06">6. Assemblery pro osmibitové domácí mikropočítače i pro osobní počítače</a></p>
<p><a href="#k07">7. Assemblery pro systém DOS: Turbo Assembler, Microsoft Macro Assembler, a86 a a386</a></p>
<p><a href="#k08">8. Vývojové prostředí ASM lab</a></p>
<p><a href="#k09">9. Assemblery v&nbsp;Linuxu</a></p>
<p><a href="#k10">10. GNU Assembler</a></p>
<p><a href="#k11">11. Netwide Assembler (NASM)</a></p>
<p><a href="#k12">12. Vybrané aplikace naprogramované (kompletně) v&nbsp;assembleru</a></p>
<p><a href="#k13">13. VisiCalc</a></p>
<p><a href="#k14">14. Lotus 1-2-3</a></p>
<p><a href="#k15">15. Volkov Commander</a></p>
<p><a href="#k16">16. SpeedScript (klasická verze)</a></p>
<p><a href="#k17">17. Textový editor e (pro DOS)</a></p>
<p><a href="#k18">18. Textový editor e3 (pro Linux)</a></p>
<p><a href="#k19">19. Legendární textový editor WordStar</a></p>
<p><a href="#k20">20. Hrdina používající assembler: 137 000 řádků v&nbsp;assembleru aneb projekt s&nbsp;odhadovanou pracností 42 člověkoroků napsaný za deset měsíců</a></p>
<p><a href="#k21">21. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Sedmdesátiny assemblerů</h2>

<p><i>&bdquo;Assembler is human-readable machine code.&ldquo;</i></p>

<p>Po dvojici článků o <a
href="https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/">třicátých
narozeninách Turbo Pascalu 5.5</a> a <a
href="https://www.root.cz/clanky/the-future-s-bright-the-future-s-cobol/">šedesátém
výročí vzniku programovacího jazyka COBOL</a> se dnes ponoříme ještě o celou
jednu dekádu zpět do minulosti, konkrétně do přelomu čtyřicátých a padesátých
let minulého století. Letos totiž uplynulo celých sedmdesát let od vzniku
nástroje, který dnes nazýváme <i>assembler</i>. Současně se jedná o pojmenování
skupiny nízkoúrovňových programovacích jazyků, které leží na hranici mezi
strojovým kódem na jedné straně a vyššími programovacími jazyky na straně druhé
(tyto jazyky se též nazývají <i>jazyky symbolických adres</i> nebo <i>jazyky
symbolických instrukcí</i>). A vzhledem k&nbsp;tomu, že jsou assemblery velmi
těsně spjaty s&nbsp;určitým typem mikroprocesorů a navíc i používaným operačním
systémem, nedošlo nikdy (a s&nbsp;velkou pravděpodobností ani nikdy nedojde)
k&nbsp;unifikaci těchto nástrojů popř.&nbsp;ke vzniku dodržovaných
standardů.</p>

<a href="http://i.iinfo.cz/images/22/ibm05.jpg"><img src="http://i.iinfo.cz/images/22/ibm05-prev.jpg" alt="ibm05" height="149" width="370" /></a>
<p><i>Obrázek 1: Sálový počítač IBM-702, který byl určený pro hromadné
zpracování dat. Tento počítač začal být vyráběn již v&nbsp;roce 1953. Programy
pro IBM-702 se zpočátku psaly klasicky na papír a posléze se ručně překládaly
bez použití programových prostředků.</i></p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti určité standardy či
v&nbsp;mnoha případech alespoň de facto standardy existují i v&nbsp;oblasti
assemblerů. Jedná se například o takzvanou <a
href="http://www.sig9.com/articles/att-syntax">AT&amp;T syntax</a> určující
způsob zápisu mnemotechnických jmen instrukcí a jejich operandů, včetně určení
bitové šířky operandů. Ovšem pochopitelně se nejedná o standardizaci
instrukčního souboru, i když i takové snahy existovaly a jsou spjaty především
s&nbsp;architekturami IBM System/360 a IBM System/370 zmíněnými v&nbsp;dalším
textu.</div></p>

<a href="http://i.iinfo.cz/images/118/ibm07.jpg"><img src="http://i.iinfo.cz/images/118/ibm07-prev.jpg" alt="ibm07" height="270" width="331" /></a>
<p><i>Obrázek 2: Sálový počítač IBM-704 určený pro vědeckotechnické výpočty.
Tento počítač byl vyráběn od roku 1954. Pro tento počítač vznikly dva důležité
vysokoúrovňové jazyky &ndash; Fortran a LISP. Ovšem v&nbsp;kontextu dnešního
článku je důležitější SAP assembler neboli Symbolic Assembly Program.</i></p>

<p>Ukázka části programu napsaného v&nbsp;assembleru 16bitových mikroprocesorů
kompatibilních s&nbsp;Intel 8086 a operační systém DOS (s&nbsp;grafickou kartou
VGA):</p>

<pre>
;-----------------------------------------------------------------------------
org     0x100
section .text
&nbsp;
Start:
&nbsp;
;------ Graficky rezim 320x200x256 -------
        mov     ax, 0x13
        int     0x10
&nbsp;
;------ Inicializace palety -------
        xor     ax, ax
        mov     di, paleta
        mov     cx, 256
        push    di                      ; adresa pocatku palety
        push    cx                      ; pocet barev
SetPaletteLoop:
        stosb                           ; red component
        stosb                           ; green component
        stosb                           ; blue component
        inc     ax
        loop    SetPaletteLoop
&nbsp;
;------ Nastaveni palety -------
        mov     ax, 0x1012
        pop     cx                      ; pocet barev
        pop     dx                      ; adresa pocatku palety
        xor     bx, bx
        int     0x10
&nbsp;
        mov     bx, 6                   ; offset pri pristupu do pole
;------ Nastaveni castic -------
        mov     cx, ParticleCount
        mov     si, particles
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Programování na úrovni strojového kódu</h2>

<p>V&nbsp;některých oblastech, zejména před rozšířením vyšších programovacích
jazyků se programy do počítače zadávaly přímo ve strojovém kódu. Týkalo se to
například mainframů vybavených řídicím panelem, do kterého bylo nutné
&bdquo;naťukat&ldquo; minimálně krátkou rutinu nazývanou <i>boot loader</i>,
která sloužila pro načtení zbytku operačního systému (či přímo spouštené
aplikace) z&nbsp;nějaké formy externí paměti, například z&nbsp;páskové
jednotky, z&nbsp;děrného pásku atd. Dodnes kolují historky o operátorech, kteří
byli schopni příslušné boot loadery zadat zcela zpaměti.</p>

<img src="http://i.iinfo.cz/images/214/sssr02.jpg" width="450" height="282" alt="sssr02" />
<p><i>Obrázek 3: Hlavní moduly počítače MESM včetně jeho řídicího
(operátorského) panelu.</i></p>

<p>Samotný boot loader byl vytvořen ve strojovém kódu, ovšem pochopitelně ho
bylo možné (ručně) napsat v&nbsp;assembleru a (taktéž ručně) přeložit instrukci
po instrukci do strojového kódu, což je u programu o délce maximálně několika
stovek bajtů sice pracné, ale stále ještě proveditelné. Později ovšem jak
nutnost ručního zadávání boot loaderů a nutnosti ručního překladu do strojového
kódu zcela pominula a již na začátku šedesátých let minulého století se
většinou jednalo o polozapomenuté umění.</p>

<a href="http://www.root.cz/obrazek/210808/"><img src="http://i.iinfo.cz/images/462/dev-8bit-4-prev.png" class="image-210808" width="370" height="202" alt="&#160;" /></a>
<p><i>Obrázek 4: Někteří programátoři dokázali i v&nbsp;primitivním monitoru
(program umožňující modifikaci paměti) naprogramovat rozsáhlé aplikace a to
včetně her. V&nbsp;takovém případě se pro ruční převod assembleru do strojového
kódu používaly takovéto tabulky (i když osobně znám člověka, který si dokázal
zapamatovat kódy všech strojových instrukcí i jejich variant).</i></p>

<p>Původně bylo programování ve strojovém kódu vynuceno omezenými technickými
prostředky, ovšem v&nbsp;určitých situacích se ruční překlad programu napsaného
(na papíře) v&nbsp;assembleru do strojového kódu prováděl i na výkonnějších
mikropočítačích, u nichž byly k&nbsp;dispozici lepší programové prostředky (jak
assembler, tak i vyšší programovací jazyky). Strojové podprogramy (subrutiny)
totiž bylo možné volat i z&nbsp;vyšších programovacích jazyků, typicky
z&nbsp;BASICu. V&nbsp;tomto případě ovšem bylo nutné strojový program
reprezentovat daty (hodnotami jednotlivých bajtů) a právě zde se mnohdy
programátoři nevyhnuli ručnímu překladu, což je ukázáno na následujícím
obrázku.</p>

<a href="http://www.root.cz/obrazek/210809/"><img src="http://i.iinfo.cz/images/462/dev-8bit-5-prev.jpg" class="image-210809" width="202" height="270" alt="&#160;" /></a>
<p><i>Obrázek 5: Ruční překlad programu napsaného v&nbsp;assembleru (levá horní
část tohoto skenu) na jednotlivé bajty, které jsou zapsány ve formě dat
v&nbsp;BASICovém programu (pravá dolní část skenu).</i></p>

<p>Program typu &bdquo;Hello world!&ldquo; pro MS DOS určený pro Turbo
Assembler:</p>

<pre>
ideal
model   tiny                    ;pametovy model CS=DS=SS mensi nez 64kB
p286                            ;povoleny instrukce procesoru 286+
&nbsp;
;-----------------------------------------------------------------------------
dataseg                         ;zacatek data-segmentu
&nbsp;
message   db      "Hello world!$"
&nbsp;
;-----------------------------------------------------------------------------
codeseg                         ;zacatek code-segmentu
org     0100h                   ;zacatek kodu pro programy typu COM
&nbsp;
start:
&nbsp;
;------ Tisk retezce na obrazovku
        mov     dx, offset message
        mov     ah, 9
        int     21h
&nbsp;
;------ Vyprazdnit buffer klavesnice a cekat na klavesu
        xor     ax, ax
        int     16h
&nbsp;
;------ Ukonceni procesu
        retn
&nbsp;
end start
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. První generace assemblerů a jejich další vývoj</h2>

<p>Vývoj assemblerů je poměrně úzce spjatý s&nbsp;prvními počítači (tehdy
většinou mainframy), které používaly pro uložení programů nějakou formu
zapisovatelné či dokonce přepisovatelné paměti. Dobrým příkladem může být
počítač <i>EDSAC</i> neboli <i>Electronic Delay Storage Automatic
Calculator</i>. Pro tento počítač byl v&nbsp;roce 1949, tedy před sedmdesáti
lety, vytvořen velmi jednoduchý assembler, v&nbsp;němž byly mnemotechnické
zkratky instrukcí zkráceny na jediný znak. Tento koncept byl později rozšířen,
takže se v&nbsp;pozdějších assemblerech setkáme s&nbsp;mnemotechnickými
zkratkami instrukcí se dvěma, třemi, čtyřmi či proměnným počtem znaků. Ovšem
poměrně často se i u pozdějších assemblerů setkáme s&nbsp;třípísmennými
zkratkami; například u assemblerů pro mikroprocesory Intel 8080, Intel 8086,
MOS 6502 atd.</p>

<p><div class="rs-tip-major">Poznámka: s&nbsp;počítačem EDSAC zmíněným
v&nbsp;předchozím odstavci jsme se již na stránkách Rootu kdysi setkali. Právě
na tomto počítači totiž vznikla první počítačová hra. V&nbsp;tomto roce 1952
totiž dopsal <i>Alexander S.&nbsp;Douglas</i> (tehdy student na univerzitě
v&nbsp;Cambridge) svoji disertační práci na téma problematiky interakce člověka
s&nbsp;počítačem. V&nbsp;rámci své práce naprogramoval Douglas na počítači
<i>EDSAC</i> jednu z&nbsp;prvních skutečných počítačových her pojmenovanou
<i>OXO</i>. Jednalo se o zjednodušenou variantu piškvorků hranou na herní ploše
mající rozměry 3&times;3 políčka. Tato hra je v&nbsp;anglosaském světě známá
právě pod názvem OXO (název je samozřejmě složen z&nbsp;tvarů symbolů
používaných ve hře), popř.&nbsp;Tic-Tac-Toe nebo Noughts and Crosses. Zajímavé
bylo ovládání této hry, protože se jako ovladač využíval otočný telefonní
volič, který si pravděpodobně pamatujete z&nbsp;relativně nedávné éry používání
telefonů (a dálnopisů) s&nbsp;pulsní volbou.</div></p>

<img src="http://i.iinfo.cz/images/587/pc-hist-62-1.jpg" width="116" height="102" alt="&#160;" />
<p><i>Obrázek 6: Telefonní volič pocházející zhruba z&nbsp;doby vzniku hry
OXO.</i></p>

<p>Ovšem vraťme se zpátky k&nbsp;prvním nástrojům, které dnes nazýváme
assemblery. V&nbsp;roce 1955 vznikl pro počítače řady IBM 650 systém
<i>SOAP</i> neboli celým jménem <i>Symbolic Optimal Assembly Program</i> (ať
již slovo &bdquo;optimal&ldquo; mělo znamenat cokoli). Autorem tohoto systému,
kde se již objevuje slovo <i>assembler</i>, byl Stan Poley. Právě v&nbsp;této
době, tj.&nbsp;zhruba v&nbsp;polovině padesátých let minulého století, se
assemblery rozšířily i na prakticky všechny ostatní typy mainframů vyráběných
osmi nejvýznamnějšími společnostmi v&nbsp;této oblasti (kterým se přezdívalo
&bdquo;IBM a sedm trpaslíků&ldquo;). Mezi tyto společnosti patřily firmy
Borroughs, UNIVAC, NCR, Control Data Corporation (CDC), Honeywell, RCA a
General Electric (GE).</p>

<p><div class="rs-tip-major">Poznámka: IBM 650, který začal být nabízen
v&nbsp;roce 1954, se stal velmi populárním počítačem a používal se i ve
školství. Tento počítač používal dekadický kód instrukcí i dat, což
zjednodušovalo práci na nízké úrovni (assembler, monitor atd.) a vybaven byl
pamětí založenou na magnetickém bubnu s&nbsp;kapacitou 1000 slov, 2000 slov či
4000 slov.</div></p>

<img src="http://i.iinfo.cz/images/580/ibm04.jpg" alt="ibm04" height="160" width="240" />
<p><i>Obrázek 7: Bubnová paměť je předchůdcem dnešních pevných disků. Na rozdíl
od nich se pro každou stopu využívala samostatná sada čtecích a zápisových
hlav, což zjednodušilo konstrukci paměti (nemusel se implementovat mechanismus
pro vystavení hlav) a umožnilo paralelní zápis/čtení ze všech stop současně.
Kvůli poměrně malému množství stop však byla kapacita bubnové paměti
malá.</i></p>

<p>Původní assemblery prováděly pouze základní činnost &ndash; překlad
mnemotechnických kódů instrukcí do strojového kódu. Takový překlad bylo možné
provést v&nbsp;jednom průchodu, což mj.&nbsp;znamenalo, že zdrojový kód mohl
být uložen na děrných štítcích nebo děrných páskách a výsledek opět mohl být
zaznamenán na stejná datová média. Spotřeba paměti pro překlad
(v&nbsp;angličtině se používá <i>assembly</i> neboli sestavení) byla
v&nbsp;tomto případě minimální a nebyla ani závislá na objemu zdrojového kódu.
Ovšem současně byly tyto assemblery dosti omezené, například neumožňovaly
použití návěstí (<i>label</i>) u cílů skoků. Tento nedostatek byl odstraněn u
další generace assemblerů podporujících takzvané <i>symbolické adresy</i>.
Proto se někdy assemblery nazývaly <i>jazyk symbolických adres</i> &ndash;
<i>JSA</i>.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti je možné i při jednom
průchodu vytvořit binární tvar programu, který však nebude přímo spustitelný,
protože vyžaduje <i>linker</i>, který mj.&nbsp;doplní chybějící cílové adresy
skoků, volaných subrutin atd.</div></p>

<p>Těmto programům, jejichž možnosti se postupně vylepšovaly (například do nich
přibyla podpora textových maker, řízení víceprůchodového překladu, vytváření
výstupních sestav s&nbsp;překládanými symboly, později i skutečné linkování
s&nbsp;knihovnami atd.), se začalo obecně říkat <i>assemblery</i> a jazyku pro
symbolický zápis programů pak <i>jazyk symbolických instrukcí</i> či <i>jazyk
symbolických adres</i> &ndash; <i>assembly language</i> (někdy též zkráceně
nazývaný assembler, takže toto slovo má vlastně dodnes oba dva významy).
Jednalo se o svým způsobem převratnou myšlenku: sám počítač byl použit pro
tvorbu programů, čímž odpadla namáhavá práce s&nbsp;tužkou a papírem.</p>

<p>Dalším důležitým mílníkem byl assembler pro IBM 709, který se nazýval
<i>FAP</i> neboli <i>FORTRAN Assembly Program</i>. Jednalo se o vylepšenou
verzi projektu <strong>SCAT</strong> (<i>SHARE
Compiler-Assembler-Translator</i>). Později byl FAP rozšířen o možnosti zápisu
maker, což bylo velké vylepšení.</p>    

<p>Posléze se pochopitelně zjistilo, že i programování přímo v&nbsp;assembleru
je většinou zbytečně pracné a zdlouhavé, takže se na mainframech začaly
používat různé vyšší programovací jazyky, zejména FORTRAN a COBOL. Použití
vyšších programovacích jazyků bylo umožněno relativně vysokým výpočetním
výkonem mainframů i (opět relativně) velkou kapacitou operační paměti; naopak
se díky vyšším programovacím jazykům mohly aplikace přenášet na různé typy
počítačů, což je nesporná výhoda.</p>

<a href="http://i.iinfo.cz/images/165/ibm03.jpg"><img src="http://i.iinfo.cz/images/165/ibm03-prev.jpg" alt="ibm03" height="270" width="202" /></a>
<p><i>Obrázek 8: Feritová paměť, která nahradila složitou a drahou paměť
vytvořenou pomocí katodových (Williamsových) trubic. Předností feritové paměti
je poměrně dlouhá doba udržení zapsané informace, takže obsah paměti většinou
úspěšně přestál i pád systému &ndash; nebylo zapotřebí implementovat core-dump
:-)</i></p>

<p>Zapomenout nesmíme ani na počítač <i>GE-635</i> a makroassembler
<i>GEMAP</i>, protože právě s&nbsp;využitím tohoto prostředku vznikla první
verze UNIXu. Vývoj tohoto operačního systému začal na <i>PDP-7</i>, ovšem
hardwarové možnosti tohoto počítače byly velmi omezené, například kapacita
operační paměti dosahovala pouze 8192 osmnáctibitových slov, tj.&nbsp;osmnácti
kilobajtů. Z&nbsp;tohoto důvodu byl originální UNIX (který ovšem toto jméno
ještě neměl) naprogramován v&nbsp;assembleru počítače <i>PDP-7</i>, přičemž je
zajímavé, že vlastní vývoj byl prováděn na jiném (výkonnějším a taktéž mnohem
dražším) počítači: již zmíněném 36bitovém <i>GE-635</i> s&nbsp;využitím
makroassembleru GEMAP. Po vytvoření objektového kódu tímto assemblerem se
(stále ještě na počítači <i>GE-635</i>) zapsalo přeložené jádro i další pomocné
programy na děrnou pásku, která se následně vložila do čtecího zařízení na
počítači <i>PDP-7</i>, odkud se systém &bdquo;nabootoval&ldquo; patřičným
příkazem zadaným z&nbsp;řídicího panelu.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vyplnění sémantické mezery mezi mikroprocesorem a vyššími programovacími jazyky</h2>

<p>V&nbsp;roce 1962 se firma IBM rozhodla navrhnout do značné míry univerzální
architekturu počítačů, která by pokrývala jak nároky jednodušších úloh (pro
které stačily méně výkonné a tím pádem i levnější počítače), tak i nároky
mnohem větší. Předností této architektury mělo být to, že systém
&bdquo;rostl&ldquo; současně s&nbsp;rostoucími požadavky zákazníka bez nutnosti
měnit programové vybavení. Výsledkem těchto snah firmy IBM byla platforma
nazvaná <i>System/360</i>, resp.&nbsp;zkráceně <i>S/360</i>. Pro tuto platformu
byla vytvořena poměrně rozsáhlá a složitá instrukční sada (<i>ISA</i>), která
mimo běžné binární aritmetiky obsahovala i instrukce pro práci s&nbsp;textem,
různé numerické formáty dat známé například z&nbsp;kalkulaček, ale i podporu
BCD aritmetiky, která se dodnes používá například při výpočtech s&nbsp;měnou.
V&nbsp;té době totiž vládlo přesvědčení, že bohatší instrukční sada ulehčí
práci překladačům z&nbsp;vyšších programovacích jazyků, vyplní takzvanou
<i>sémantickou mezeru</i> mezi assemblerem a vyššími programovacími jazyky
atd.</p>

<a href="http://i.iinfo.cz/images/503/ibm2-4.jpg"><img src="http://i.iinfo.cz/images/503/ibm2-4-prev.jpg" alt="ibm2" height="270" width="349" /></a>
<p><i>Obrázek 9: Jeden z&nbsp;prvních modelů počítače série
System/360.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Platforma IBM System/360 a vznik architektury CISC</h2>

<p>Procesorové jednotky počítačů <i>System/360</i> zpracovávaly poměrně složité
instrukce, protože se jednalo o klasickou architekturu CISC (v&nbsp;té době se
věřilo, že komplexní instrukční sada pomůže programátorům překonat již zmíněnou
&bdquo;sémantickou propast&ldquo; mezi strojovým kódem popř.&nbsp;assemblerem a
vyššími programovacími jazyky). Aby i jednodušší modely série <i>System/360</i>
mohly zpracovávat všechny instrukce, používaly jejich procesory mikrokód,
pomocí něhož se složitější instrukce rozdělily na sérii jednodušších
mikroinstrukcí (ty měly zcela jiný formát, protože se jimi přímo ovládaly
jednotlivé bloky v&nbsp;procesoru &ndash; ALU, registry, interní sběrnice
atd.). Jednalo se o 32bitovou architekturu se šestnácti 32bitovými registry
označovanými jmény <i>R0</i> až <i>R15</i> a čtyřmi 64bitovými registry
určenými pro práci s&nbsp;hodnotami uloženými ve formátu pohyblivé řádové
čárky. Kromě pracovních registrů procesor obsahoval i <strong>PSW</strong>
(processor status word), v&nbsp;němž byl uložen i čítač instrukcí
<strong>PC</strong>, příznak práce v&nbsp;superuživatelském režimu atd.</p>

<a href="http://i.iinfo.cz/images/503/ibm2-6.jpg"><img src="http://i.iinfo.cz/images/503/ibm2-6-prev.jpg" alt="ibm2" height="270" width="206" /></a>
<p><i>Obrázek 10: Úvodní stránka manuálu k&nbsp;assembleru počítačů
System/360.</i></p>

<p>Program typu &bdquo;Hello world!&ldquo; mohl být v&nbsp;assembleru počítačů
IBM System/360 zapsán takto (zdroj: <a
href="https://try-mts.com/system-360-assembly-language-introduction/">https://try-mts.com/system-360-assembly-language-introduction/</a>):</p>

<pre>
HELLO    START   0                 PROGRAM AT RELATIVE ADDRESS 0
         USING   HELLO,12          R12 WILL CONTAIN PROGRAM ADDR
         LR      12,15             LOAD R12 WITH ABSOLUTE ADDR
         L       3,RUNS            R3 COUNTS DOWN NUMBER OF RUNS
LOOP     SPRINT 'Hello, world!'    PRINT THE MESSAGE
         S       3,DECR            DECREMENT R3
         BP      LOOP              IF R3 POSITIVE, LOOP AGAIN
         SYSTEM                    EXIT PROGRAM
RUNS     DC      F'5'              NUMBER OF RUNS TO MAKE
DECR     DC      F'1'              DECREMENT FOR LOOP
         END     HELLO             END OF CODE
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Assemblery pro osmibitové domácí mikropočítače</h2>

<p>Oživení zájmu o programování v&nbsp;assembleru přinesl vznik minipočítačů
(například známé řady <i>PDP</i>) a na konci sedmdesátých let minulého století
pak zcela nového fenoménu, který nakonec přepsal celé dějiny výpočetní techniky
&ndash; domácích osmibitových mikropočítačů.</p>

<a href="http://www.root.cz/obrazek/210813/"><img src="http://i.iinfo.cz/images/462/dev-8bit-9-prev.png" class="image-210813" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek 11: Takto vypadá úryvek programu napsaný v&nbsp;assembleru
mikroprocesoru MOS 6502.</i></p>

<p>Mikropočítače bývaly vybaveny pamětí ROM s&nbsp;interpretrem BASICu, ovšem
pro profesionální vývoj byly k&nbsp;dispozici i assemblery, linkery, monitory a
debuggery. Prvním typem byly assemblery interaktivní, které uživateli nabízely
poměrně komfortní vývojové prostředí, v&nbsp;němž bylo možné zapisovat
jednotlivé instrukce, spouštět programy, krokovat je, vypisovat obsahy registrů
atd. Výhodou byla nezávislost těchto assemblerů na rychlém externím paměťovém
médiu.</p>

<a href="http://www.root.cz/obrazek/210817/"><img src="http://i.iinfo.cz/images/462/dev-8bit-13-prev.png" class="image-210817" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek 12: Assembler na domácím osmibitovém mikropočítači Commodore
C64.</i></p>

<p>Druhý typ assemblerů je používán dodnes &ndash; jedná se vlastně o běžné
překladače, kterým se na vstupu předloží zdrojový kód (uložený na kazetě či
disketě) a po překladu se výsledný nativní kód taktéž uloží na paměťové médium
(odkud ho lze spustit). Tyto assemblery byly mnohdy vybaveny více či méně
dokonalým systémem maker (odtud název <i>macroassembler</i>).</p>

<a href="http://www.root.cz/obrazek/210818/"><img src="http://i.iinfo.cz/images/462/dev-8bit-14-prev.png" class="image-210818" width="283" height="270" alt="&#160;" /></a>
<p><i>Obrázek 13: Obal na kazetu se Zeus Assemblerem určeným pro slavné ZX
Spectrum.</i></p>

<a href="http://www.root.cz/obrazek/210819/"><img src="http://i.iinfo.cz/images/462/dev-8bit-15-prev.png" class="image-210819" width="360" height="270" alt="&#160;" /></a>
<p><i>Obrázek 14: Vývojové prostředí Zeus Assembleru.</i></p>

<a href="http://www.root.cz/obrazek/210820/"><img src="http://i.iinfo.cz/images/462/dev-8bit-16-prev.png" class="image-210820" width="370" height="247" alt="&#160;" /></a>
<p><i>Obrázek 15: Jak se programovalo v&nbsp;assembleru si můžete vyzkoušet na
stránce <a href="http://6502asm.com">http://6502asm.com</a>. Zde je
implementován assembler i emulátor počítače založeného na osmibitovém
mikroprocesoru MOS 6502.</i></p>

<a href="http://www.root.cz/obrazek/211570/"><img src="http://i.iinfo.cz/images/80/a1-prev.png" class="image-211570" alt="&#160;" height="264" width="370" /></a>
<p><i>Obrázek 16: Úvodní obrazovka Atari Macro Assembleru.</i></p>

<a href="http://www.root.cz/obrazek/211571/"><img src="http://i.iinfo.cz/images/322/a2-prev.png" class="image-211571" alt="&#160;" height="264" width="370" /></a>
<p><i>Obrázek 17: Vývojové prostředí Atari Macro Assembleru.</i></p>

<a href="http://www.root.cz/obrazek/211572/"><img src="http://i.iinfo.cz/images/524/a3-prev.png" class="image-211572" alt="&#160;" height="264" width="370" /></a></p>
<p><i>Obrázek 18: Vývojové prostředí Atari Macro Assembleru (výpis obsahu
pracovních registrů mikroprocesoru).</i></p>

<a href="http://www.root.cz/obrazek/210810/"><img src="http://i.iinfo.cz/images/462/dev-8bit-6-prev.png" class="image-210810" width="370" height="254" alt="&#160;" /></a>
<p><i>Obrázek 19: Celoobrazovkové uživatelské rozhraní monitoru pro
mikropočítače Apple II.</i></p>

<p>Assemblery byly mezi programátory poměrně populární i na mnohem výkonnějších
osobních mikropočítačích <i>Amiga</i> a <i>Atari ST</i>, a to i díky tomu, že
instrukční kód mikroprocesorů <i>Motorola 68000</i> byl do značné míry
ortogonální, obsahoval relativně velké množství registrů (univerzální datové
registry D0 až D7 a adresové registry A0 až A7) a navíc bylo možné používat i
takové adresovací režimy, které korespondovaly s&nbsp;konstrukcemi používanými
ve vyšších programovacích jazycích (přístupy k&nbsp;prvkům polí, přístup
k&nbsp;lokálním proměnným umístěných v&nbsp;zásobníkovém rámci,
autoinkrementace adresy atd.). Podívejme se na jednoduchý příklad rutiny
(originál najdete <a
href="http://www.virtualdub.org/blog/pivot/entry.php?id=84">zde</a>), která
sečte všechny prvky (16bitové integery &ndash; načítá se vždy jen 16bitové
slovo) v&nbsp;poli. V&nbsp;tomto příkladu se používá autoinkrementace adresy
při adresování prvků polí a taktéž instrukce <strong>DBRA</strong> provádí dvě
činnosti &ndash; snížení hodnoty registru o jedničku a skok v&nbsp;případě, že
je výsledek nenulový:</p>

<pre>
    moveq #0, d0      ; potřebujeme vynulovat horních 16 bitů d0
    moveq #0, d1      ; mezivýsledek
loop:
    move.w (a0)+, d0  ; horních 16 bitů d0 je pořád nastaveno na 0
    add.l d0, d1
    dbra d2, loop     ; d2 je použit jako počitadlo
</pre>

<p>Pokud by nebyly k&nbsp;dispozici adresovací režimy s&nbsp;autoinkrementací a
instrukce pro snížení operandu a podmíněný skok, musel by být celý program
delší a současně ještě více nízkoúrovňový.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Assemblery pro systém DOS: Turbo Assembler, Microsoft Macro Assembler, a86 a a386</h2>

<p>Nyní se ve stručnosti seznámíme s&nbsp;nejznámějšími assemblery určenými pro
operační systém DOS. V&nbsp;první řadě se jednalo o <i>Turbo Assembler
(TASM)</i> vydaný společností Borland, s&nbsp;níž jsme se již seznámili
v&nbsp;souvislosti s&nbsp;Turbo Pascalem. Turbo Assembler podporoval dva
způsoby zápisu programů (vzájemně nekompatibilních) a byl poměrně široce
rozšířen, mj.&nbsp;i díky snadné instalaci (postačovalo mít nainstalován
samotný assembler <strong>tasm.exe</strong> a linker
<strong>tlink.exe</strong>). První verze Turbo Assembleru podporovaly pouze
reálný režim mikroprocesorů Intel 8086, další verze pak i chráněný režim.</p>

<p>Konkurentem Turbo Assembleru byl Microsoft Macro Assembler známý mj.&nbsp;i
pod zkratkou <i>MASM</i>. I tento assembler, který vznikl již v&nbsp;roce 1981,
byl původně určen pouze pro šestnáctibitový reálný režim mikroprocesorů,
později však došlo k&nbsp;jeho rozšíření pro chráněný režim (286 i 386). Dnes
dokonce existuje <i>ML64</i> určený pro 64bitové architektury x86-64. Jméno
tohoto assembleru naznačuje, že jsou podporována makra, ta však byla
k&nbsp;dispozici i uživatelům konkurenčního <i>TASMu</i>.</p>

<p>Zajímavou koncepci nalezneme u dvojice aplikací <i>a86</i> a <i>a386</i>.
Jedná se o pravděpodobně nejrychlejší assemblery pro DOS, které navíc dokážou
případná chybová hlášení assembleru přímo vložit do zdrojových kódů a patřičně
je označit. Při dalším průchodu se tato hlášení automaticky smažou. Jedná se o
poměrně elegantní způsob řešení, zejména při překladu dlouhých programů (musíme
si totiž uvědomit, že systém DOS neměl dobře vyřešenou podporu scrollingu
v&nbsp;terminálu, takže zápis chyb přímo do zdrojového kódu umožnil, aby si
programátor chyby dohledal s&nbsp;využitím možností samotného textového
editoru).</p>

<p>Část zdrojového kódu dále zmíněného textového editoru <strong>e</strong>
určeného pro sestavení Turbo Assemblerem:</p>

<pre>
Start:
  mov ax, cs
  mov [ProgramSegment], ax      ;Store current segment for EXEC function
  add ax, ((PROGLENGTH + ENDFBUFFER) SHR 4) + 1
  mov [heapStart], ax           ;Compute start of free memory in paragraphs
  mov [heapPtr], ax
  mov sp, OFFSET STACKTOP
  mov si, 80h                   ;Make pointer to command tail
  mov cl, [si]                  ;Get filename length
  sub ch, ch
  mov [fName?], cl              ;Save a copy
  mov al, ' '                   ;Skip leading blanks
@@L1:
  inc si
  cmp al, [si]
  loope @@L1
  inc cx
  mov di, OFFSET fName          ;Move command tail to FName
  rep movsb
  sub al, al                    ;Make ASCIIZ string
  stosb
  mov ax, 2523h                 ;Redirect Ctrl C handler
  mov dx, OFFSET Cancel
  int 21h
  mov [byte OtherFName], 0      ;Prevent Alt Shift O crash without prev. file
  mov ah, 0Fh                   ;Set defaults for color or mono adapter
  int 10h
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vývojové prostředí ASM lab</h2>

<p>Dále se musíme zmínit o aplikaci pojmenované <i>ASM Lab</i>. Jak již název
tohoto IDE napovídá, jednalo se o nástroj určený pro programátory, kteří
pracovali s&nbsp;assemblerem mikroprocesorů řady Intel x86. Úkolem <i>Asm
Labu</i> bylo zpříjemnit tvorbu programů v&nbsp;assembleru a navíc vývojářům
nabídnout různé doplňkové nástroje, například kalkulátor pro převod mezi
různými číselnými soustavami, obligátní ASCII tabulku atd. <i>Asm Lab</i> bylo
založeno na knihovně TurboVision, takže vlastně není překvapivé, že se jeho
vzhled podobal dalším aplikacím s&nbsp;textovým uživatelským rozhraním, včetně
<a
href="https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/">již
popsaných integrovaných vývojových prostředí společnosti Borland</a>. Editor,
který používal mnoho zkratek kompatibilních s&nbsp;produkty Borlandu, byl
propojen s&nbsp;dalšími moduly <i>ASM Labu</i>, takže uživatelé mohli například
jednoduše přecházet mezi různými procedurami atd. Na klávesové zkratky byl
napojen taktéž vlastní assembler (zde je míněn nástroj určený pro překlad do
strojového kódu, nikoli jazyk).</p>

<a href="http://www.root.cz/obrazek/229446/"><img src="http://i.iinfo.cz/images/394/alab1-prev.png" class="image-229446" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 20: Úvodní obrazovka integrovaného vývojového prostředí ASM
Lab.</i></p>

<p>Velmi důležitou součástí <i>ASM Labu</i> byla nápověda, která obsahovala
mj.&nbsp;i podrobný popis všech instrukcí mikroprocesorů řady Intel x86. U
každé instrukce byla popsána její funkce, dostupné adresovací režimy, počet
bajtů nutných pro uložení instrukce (a samozřejmě i operandů) do operační
paměti a taktéž počet cyklů nutných pro provedení instrukce u různých variant
mikroprocesorů.</p>

<a href="http://www.root.cz/obrazek/229447/"><img src="http://i.iinfo.cz/images/636/alab2-prev.png" class="image-229447" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 21: Programátorský editor integrovaný do ASM Labu.</i></p>

<a href="http://www.root.cz/obrazek/229448/"><img src="http://i.iinfo.cz/images/253/alab3-prev.png" class="image-229448" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 22: Přímo z&nbsp;ASM Labu je možné spustit i programátorskou
kalkulačku.</i></p>

<a href="http://www.root.cz/obrazek/229449/"><img src="http://i.iinfo.cz/images/187/alab4-prev.png" class="image-229449" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 23: Podrobná nápověda k&nbsp;instrukci SAL (SHL).</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Assemblery v&nbsp;Linuxu</h2>

<p>V&nbsp;této kapitole budeme pod termínem &bdquo;assembler&ldquo; chápat
programový nástroj určený pro transformaci zdrojového kódu naprogramovaného
v&nbsp;jazyku symbolických adres do strojového kódu (což je původní význam
tohoto slova). Pro Linux vzniklo hned několik takových nástrojů, přičemž
některé nástroje jsou komerční a jiné patří mezi open source.
Z&nbsp;nekomerčních nástrojů, které nás samozřejmě na serveru <a
href="https://www.root.cz">https://www.root.cz</a> zajímají především, se jedná
o známý <i>GNU Assembler</i>, dále pak o nástroj nazvaný <i>Netwide assembler
(NASM)</i>, nástroj <i>Yasm Modular Assembler</i> či až překvapivě výkonný
<i>vasm</i>. <i>NASM</i> a <i>Yasm</i> jsou pro první krůčky v&nbsp;assembleru
velmi dobře použitelné, neboť mají dobře zpracovaný mechanismus reakce na
chyby, dají se v&nbsp;nich psát čitelné programy atd. Určitý problém nastává
v&nbsp;případě, kdy je nutné vyvíjet aplikace určené pro jinou architekturu,
než je 32bitová architektura i386 či dnes již převažující architektura x86_64,
a to z&nbsp;toho důvodu, že ani <i>Netwide assembler</i> ani <i>Yasm</i>
nedokážou pracovat s&nbsp;odlišnou instrukční sadou. Naproti tomu <i>GNU
Assembler</i> tímto problémem ani zdaleka netrpí, takže se v&nbsp;následujících
kapitolách budeme zabývat jak nástrojem <i>NASM</i>, tak i <i>GNU
Assemblerem</i>.</p>

<p>Bližší informace o jednotlivých assemblerech pro Linux zmíněných
v&nbsp;předchozím odstavci lze najít na jejich domovských stránkách,
popř.&nbsp;v&nbsp;porovnávací tabulce:</p>

<ol>

<li>yasm<br />
<a href="https://yasm.tortall.net/">https://yasm.tortall.net/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>FASM<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>NASM<br />
<a href="https://www.nasm.us/">https://www.nasm.us/</a>
</li>

<li>GNU Binutils (včetně GNU assembleru)<br />
<a href="https://www.gnu.org/software/binutils/">https://www.gnu.org/software/binutils/</a>
</li>

<li>Open Watcom Assembler<br />
<a href="http://www.openwatcom.com/">http://www.openwatcom.com/</a>
</li>

<li>Porovnání assemblerů pro platformu x86-64<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_assemblers#x86-64_assemblers">https://en.wikipedia.org/wiki/Comparison_of_assemblers#x86-64_assemblers</a>
</li>

</ol>



<p><a name="k10"></a></p>
<h2 id="k10">10. GNU Assembler</h2>

<p><i>GNU Assembler</i> (<i>gas</i>) je součástí skupiny nástrojů nazvaných
<i>GNU Binutils</i>. Jedná se o nástroje určené pro vytváření a správu
binárních souborů obsahujících takzvaný &bdquo;objektový kód&ldquo;, dále
nástrojů určených pro práci s&nbsp;knihovnami strojových funkcí i pro
profilování. Mezi <i>GNU Binutils</i> patří vedle <i>GNU Assembleru</i> i
linker <strong>ld</strong>, profiler <strong>gprof</strong>, správce archivů
strojových funkcí <strong>ar</strong>, nástroj pro odstranění symbolů
z&nbsp;objektových a spustitelných souborů <strong>strip</strong> a několik
pomocných utilit typu <strong>nm</strong>, <strong>objdump</strong>,
<strong>size</strong> a <strong>strings</strong>. <i>GNU Assembler</i> je možné
použít buď pro překlad uživatelem vytvořených zdrojových kódů nebo pro
zpracování kódů vygenerovaných překladači vyšších programovacích jazyků
(<strong>GCC</strong> atd.). Zajímavé je, že všechny moderní verze <i>GNU
Assembleru</i> podporují jak původní AT&amp;T syntaxi, tak i (podle mě mnohem
čitelnější) syntaxi používanou společností Intel.</p>

<p>Podívejme se nyní na to, jak může vypadat kostra velmi jednoduché aplikace
naprogramované v&nbsp;GNU Assembleru pro procesory řady i386 či x86_64. Celý
zdrojový kód je rozdělen na řádky, přičemž na jednotlivých řádcích mohou být
komentáře, deklarace různých konstant a symbolů (<strong>sys_exit=1</strong>),
speciální direktivy (<strong>.section</strong>), návěští/labels
(<strong>_start</strong>) a samozřejmě i samotný kód reprezentovaný
mnemotechnickými názvy instrukcí a jejich operandů. Důležitý je symbol
<strong>_start</strong>, protože ten je používán i linkerem a specifikuje
vstupní bod do programu:</p>

<pre>
# Linux kernel system call table
sys_exit=1
&nbsp;
#-----------------------------------------------------------------------------
.section .data
&nbsp;
#-----------------------------------------------------------------------------
.section .bss
#-----------------------------------------------------------------------------
.section .text
        .global _start          # tento symbol ma byt dostupny i linkeru
&nbsp;
_start:
        movl  $sys_exit,%eax    # cislo sycallu pro funkci "exit"
        movl  $0,%ebx           # exit code = 0
        int   $0x80             # volani Linuxoveho kernelu
</pre>

<p>Povšimněte si rozdělení do sekcí &ndash; sekce pojmenované
<strong>.data</strong> a <strong>.bss</strong> jsou prázdné, samotný kód je
umístěn do sekce pojmenované <strong>.text</strong>, což může být matoucí,
protože ve výsledném binárním souboru tato sekce taktéž obsahuje binární data
(instrukce). Instrukce jsou v&nbsp;programu pouze tři a slouží pro naplnění
pracovních registrů <strong>eax</strong> a <strong>ebx</strong> (funkce číslo
1, návratová hodnota 0) a zavolání syscallu. Používáme zde původní AT&amp;T
syntaxi GNU Assembleru, proto se do instrukce <strong>movl</strong> operandy
zapisují v&nbsp;pořadí zdroj,cíl.</p>

<p>Překlad (assemblerem) a následné slinkování do spustitelného souboru se
provede následovně:</p>

<pre>
as template.s -o template.o
ld -s template.o
</pre>

<p>Další příklad kostry aplikace napsané v&nbsp;GNU Assembleru, tentokrát
určené pro Linux a pro mikroprocesory s&nbsp;32bitovou architekturou ARM
(nikoli AArch64):</p>

<pre>
# Linux kernel system call table
sys_exit=1
&nbsp;
#-----------------------------------------------------------------------------
.section .data
&nbsp;
#-----------------------------------------------------------------------------
.section .bss
&nbsp;
#-----------------------------------------------------------------------------
.section .text
        .global _start          @ tento symbol ma byt dostupny i z linkeru

_start:
        mov   r7,$sys_exit      @ cislo sycallu pro funkci "exit"
        mov   r0,#0             @ exit code = 0
        svc   0                 @ volani Linuxoveho kernelu
</pre>

<p>Překlad a slinkování se provede těmito dvěma příkazy:</p>

<pre>
as arm_32.s -o arm_32.o
ld -s arm_32.o
</pre>

<p>Výsledkem by měl být binární soubor o délce pouhých 311 bajtů:</p>

<pre>
0000000: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00  .ELF............
0000010: 02 00 28 00 01 00 00 00 54 80 00 00 34 00 00 00  ..(.....T...4...
0000020: 98 00 00 00 00 02 00 05 34 00 20 00 01 00 28 00  ........4. ...(.
0000030: 04 00 03 00 01 00 00 00 00 00 00 00 00 80 00 00  ................
0000040: 00 80 00 00 60 00 00 00 60 00 00 00 05 00 00 00  ....`...`.......
0000050: 00 80 00 00 01 70 a0 e3 00 00 a0 e3 00 00 00 ef  .....p..........
0000060: 41 13 00 00 00 61 65 61 62 69 00 01 09 00 00 00  A....aeabi......
0000070: 06 01 08 01 00 2e 73 68 73 74 72 74 61 62 00 2e  ......shstrtab..
0000080: 74 65 78 74 00 2e 41 52 4d 2e 61 74 74 72 69 62  text..ARM.attrib
0000090: 75 74 65 73 00 00 00 00 00 00 00 00 00 00 00 00  utes............
00000a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000c0: 0b 00 00 00 01 00 00 00 06 00 00 00 54 80 00 00  ............T...
00000d0: 54 00 00 00 0c 00 00 00 00 00 00 00 00 00 00 00  T...............
00000e0: 04 00 00 00 00 00 00 00 11 00 00 00 03 00 00 70  ...............p
00000f0: 00 00 00 00 00 00 00 00 60 00 00 00 14 00 00 00  ........`.......
0000100: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................
0000110: 01 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  ................
0000120: 74 00 00 00 21 00 00 00 00 00 00 00 00 00 00 00  t...!...........
0000130: 01 00 00 00 00 00 00 00                          ........
</pre>

<p>Pokud vás zajímá interní struktura tohoto souboru, opět pomůže nástroj
<strong>objdump</strong>:</p>

<pre>
objdump -f -d -t -h a.out
</pre>

<pre>
a.out:     file format elf32-littlearm
architecture: armv4, flags 0x00000102:
EXEC_P, D_PAGED
start address 0x00008054
&nbsp;
Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000000c  00008054  00008054  00000054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.attributes 00000014  00000000  00000000  00000060  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
no symbols
&nbsp;
&nbsp;
&nbsp;
Disassembly of section .text:
&nbsp;
00008054 &lt;.text&gt;:
    8054:       e3a07001        mov     r7, #1
    8058:       e3a00000        mov     r0, #0
    805c:       ef000000        svc     0x00000000
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Netwide Assembler (NASM)</h2>

<p><i>Netwide Assembler (NASM)</i> vznikl v&nbsp;době, kdy začali na operační
systém Linux přecházet programátoři znající a používající operační systémy DOS
a (16/32bit) Windows. Tito programátoři byli většinou dobře seznámeni
s&nbsp;možnostmi assemblerů, které se na těchto platformách používaly
nejčastěji &ndash; <i>Turbo Assembleru (TASM)</i> společnosti Borland i
<i>Microsoft Macro Assembleru (MASM)</i> a tak jim možnosti <i>GNU
Assembleru</i> (který má své kořeny na odlišných architekturách) příliš
nevyhovovaly. Výsledkem snah o vytvoření nástroje podobnému <i>TASMu</i> či
<i>MASMu</i> byl právě projekt pojmenovaný <i>NASM</i>, který podporuje stejný
způsob zápisu operandů instrukcí a navíc ještě zjednodušuje zápis těch
instrukcí, u nichž je jeden operand tvořen nepřímou adresou. <i>NASM</i> byl
následován projektem <i>Yasm</i> (fork+přepis), ovšem základní vlastnosti a
především pak vazba na platformu i386 a x86_64 zůstaly zachovány (to
mj.&nbsp;znamená, že například na <i>Raspberry Pi</i> možnosti těchto dvou
nástrojů plně nevyužijeme, což je určitě škoda, protože zrovna tento
mikropočítač se poměrně dobře hodí pro výuku assembleru).</p>

<p>Příklad kostry aplikace určené pro překlad Netwide assemblerem, opět
naprogramované pro operační systém Linux:</p>

<pre>
; Linux kernel system call table
sys_exit equ 1
&nbsp;
;-----------------------------------------------------------------------------
section .data
&nbsp;
;-----------------------------------------------------------------------------
section .bss
&nbsp;
;-----------------------------------------------------------------------------
section .text
        global _start           ; tento symbol ma byt dostupny i linkeru
&nbsp;
_start:
        mov   eax,sys_exit      ; cislo sycallu pro funkci "exit"
        mov   ebx,0             ; exit code = 0
        int   80h               ; volani Linuxoveho kernelu
</pre>

<p>Překlad se provede příkazem:</p>

<pre>
nasm -felf32 template.asm
ld -s template.o
</pre>

<p>popř.&nbsp;pro 64bitový systém příkazem:</p>

<pre>
nasm -felf64 template.asm
ld -s template.o
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vybrané aplikace naprogramované (kompletně) v&nbsp;assembleru</h2>

<p>Assembler se dnes stále používá, zejména na menších mikrořadičích, včetně
čtyřbitových mikrořadičů, s&nbsp;nimiž jsme se již na stránkách Rootu seznámili
[<a
href="https://www.root.cz/clanky/vznik-mikroradicu-ctyrbitovy-cip-tms-1000/">Vznik
mikrořadičů: čtyřbitový čip TMS 1000</a>] [<a
href="https://www.root.cz/clanky/vznik-mikroradicu-ctyrbitovy-mcu-atmel-marc4/">Vznik
mikrořadičů: čtyřbitový MCU Atmel MARC4</a>] [<a
href="https://www.root.cz/clanky/ctyrbitove-mikroradice-rady-epson-s1c60/">Čtyřbitové
mikrořadiče řady Epson S1C60</a>]. Ovšem pochopitelně dnes převážná část kódu
vzniká ve vyšších programovacích jazycích. V&nbsp;minulosti tomu tak nebylo, a
to z&nbsp;pochopitelných důvodů &ndash; relativně nízký výpočetní výkon i malá
kapacita operačních pamětí nutily vývojáře k&nbsp;tomu, aby své aplikace
optimalizovali, protože jinak by nebyly reálně použitelné. Týkalo se to nejenom
počítačových her, kde je důraz na optimalizace velký i dnes, ale i
&bdquo;běžných&ldquo; desktopových aplikací &ndash; textových editorů,
tabulkových editorů, grafických programů atd. V&nbsp;dalších kapitolách se ve
stručnosti s&nbsp;některými známějšími aplikacemi naprogramovanými
v&nbsp;assembleru seznámíme. Mnohdy se jednalo o přelomové aplikace patřící do
kategorie <i>killer app</i> &ndash; tedy aplikace, kvůli nimž samotným si mnozí
uživatelé pořizovali počítač.</p>

<img src="https://i.iinfo.cz/images/208/tms1000-1.jpg" class="image-284542" alt="tms1000" height="726" width="418">
<p><em>Obrázek 24: Typickým segmentem trhu pro čtyřbitový mikrořadič TMS 1000
(programovaný čistě v&nbsp;assembleru) jsou kapesní kalkulačky, ať již s
displeji založenými na LED, LCD či VFD.</em></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. VisiCalc</h2>

<p>Důležitým mezníkem pro využití počítačů v&nbsp;kancelářích se stal tabulkový
procesor <i>VisiCalc</i>. Jednalo se o první interaktivní aplikaci typu
&bdquo;tabulkový procesor&ldquo; (<i>spreadsheet</i>), která v&nbsp;době svého
vzniku bezesporu patřila mezi takzvané &bdquo;killer app&ldquo;, tj.&nbsp;mezi
programy, jenž samy o sobě některé uživatele přesvědčily k&nbsp;tomu, aby si
pořídili osobní mikropočítač (a to se bavíme o začátku osmdesátých let minulého
století, kdy byly mikropočítače velmi drahé) [<a
href="https://en.wikipedia.org/wiki/Killer_application">1</a>]. <i>VisiCalc</i>
byl portován na mnoho typů mikropočítačů, mj.&nbsp;i na slavné počítače Apple
II, na počítače kompatibilní s&nbsp;IBM PC atd. Oproti jiným nástrojům určeným
pro zpracování dat měl <i>VisiCalc</i> obrovskou výhodu &ndash; byl
interaktivní a používal paradigma, kterému mnoho uživatelů velmi dobře rozumělo
(data byla uložena v&nbsp;dvourozměrných tabulkách, ovšem bez nutnosti přesné
specifikace jejich struktury, navíc bylo umožněno jednotlivé buňky adresovat).
Původní verze VisiCalcu byla kompletně naprogramována v&nbsp;assembleru
osmibitových mikroprocesorů MOS 6502 a byla tedy dostupná na většině počítačů
založených na tomto čipu (Apple II, Atari, ...).</p>

<p><div class="rs-tip-major">Jen pro představu: i na kdysi malém IT trhu se
prodalo přes 700000 kopií VisiCalcu, nepočítaje v&nbsp;to samozřejmě pirátské
kopie.</div></p>

<a href="http://i.iinfo.cz/images/192/gui10-10.png"><img src="http://i.iinfo.cz/images/192/gui10-10-prev.png" width="370" height="231" alt=" " /></a>
<p><i>Obrázek 25: Tabulkový kalkulátor VisiCalc spuštěný v&nbsp;DOSu.</i></p>

<p><i>VisiCalc</i> byl natolik úspěšný, že jeho vydavatel, společnost
<i>Personal Software</i> později přejmenovaná na <i>VisiCorp</i>, měla
z&nbsp;prodeje <i>VisiCalcu</i> na svoji dobu takřka neuvěřitelné zisky, které
se snažila použít pro vývoj dalších softwarových produktů. Jednalo se například
o program <i>VisiPlot</i> (kreslení grafů) nebo o relativně jednoduchý textový
procesor <i>VisiWord</i>. V&nbsp;roce 1981 se vývojáři <i>VisiCorpu</i>
zamýšleli nad tím, jak zlepšit interoperabilitu svých jednotlivých produktů,
což by mohlo ve svém důsledku zvýšit jejich oblibu a tím pádem i prodejnost.
Došli k&nbsp;tomu, že by bylo vhodné provést tři poměrně zásadní změny:
vytvořit jednotné datové struktury, aby spolu programy mohly jednoduše
komunikovat (dříve se data musela například exportovat z&nbsp;<i>VisiCalcu</i>
a následně importovat do <i>VisiPlotu</i>), umožnit rychlejší přepínání mezi
jednotlivými programy bez nutnosti jeden program ukončit a nastartovat druhý a
taktéž sjednotit ovládání programů takovým způsobem, aby se uživatelé nemuseli
učit rozdílné klávesové zkratky, jiné názvy položek v&nbsp;menu atd.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Lotus 1-2-3</h2>

<p>Později byl tabulkový procesor <i>VisiCalc</i> překonán programy, které
uživatelům nabízely lepší uživatelské prostředí, popř.&nbsp;více funkcí či
větší výkonnost. Mezi tyto aplikace patřilo především <i>QuattroPro</i> a
taktéž slavný <i>Lotus 1-2-3</i>. Ten byl původně celý naprogramován
v&nbsp;makro assembleru, což se týkalo i verze 2.0. Až verze 3.0 byla kompletně
přepsána do programovacího jazyka C, což na jednu stranu vedlo ke sjednocení na
všech podporovaných platformách, na stranu druhou si přepis vyžádal více než
roční zpoždění této verze (to bylo poměrně kritické, protože Lotusu začal silně
konkurovat Microsoft).</p>

<a href="http://i.iinfo.cz/images/192/gui10-11.png"><img src="http://i.iinfo.cz/images/192/gui10-11-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 26: Slavný tabulkový kalkulátor Lotus 1-2-3.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Volkov Commander</h2>

<p>Jedním z&nbsp;nejúspěšnějších programů, jejichž uživatelské rozhraní i
nabízené funkce byly odvozeny od původního <i>Norton Commanderu</i>, byl
program <i>Volkov Commander</i> z&nbsp;roku 1992, jehož autorem je <i>Vsevolod
Volkov</i> z&nbsp;Ukrajiny. Jako mnoho dalších aplikací pocházejících
z&nbsp;postsovětských zemí, je i <i>Volkov Commander</i> ukázkou perfektní
znalosti práce s&nbsp;assemblerem &ndash; celý program včetně prohlížeče a
editoru se nachází v&nbsp;jediném spustitelném souboru typu COM (bez
relokačních tabulek atd.), jehož délka nepřesáhla (až do verze 4.0) pouhých 64
kB. Ve <i>Volkov Commanderu</i> měl prakticky každý dialog svoji lokální
historii, bylo podporováno rozdělení souborů na více částí při kopiích na
disketu (velmi užitečná pomůcka) a ve verzi 5.0 alfa (4.99.xxx) byla přidána
například i podpora pro dlouhá jména souborů (LFN), ovšem pouze v&nbsp;případě,
že se <i>Volkov Commander</i> spouštěl z&nbsp;Windows, které tuto podporu
nabízely. Navíc se mohla při kopírování souborů využívat veškerá dostupná
paměť, což kopírování urychlovalo, například při zápisu na diskety nebo práci
s&nbsp;CD-ROM.</p>

<a href="http://i.iinfo.cz/images/192/gui10-7.png"><img src="http://i.iinfo.cz/images/192/gui10-7-prev.png" width="370" height="231" alt=" " /></a>
<p><i>Obrázek 27: Textové uživatelské prostředí Volkov Commanderu je prakticky
k&nbsp;nerozeznání podobné prostředí původního Norton Commanderu.</i></p>

<a href="http://i.iinfo.cz/images/192/gui10-8.png"><img src="http://i.iinfo.cz/images/192/gui10-8-prev.png" width="370" height="231" alt=" " /></a>
<p><i>Obrázek 28: Nápověda k&nbsp;Volkov Commanderu 4.0 s&nbsp;hypertextovými
odkazy je taktéž podobná nápovědě k&nbsp;Norton Commanderu.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. SpeedScript (klasická verze)</h2>

<p>Na domácích osmibitových mikropočítačích vybavených mikroprocesorem MOS 6502
(nebo jeho variantou MOS 6510) byl velmi populárním textovým procesorem program
nazvaný <i>SpeedScript</i>, který byl naprogramován <a
href="https://www.linkedin.com/pub/charles-brannon/0/55b/b27">Charlesem
Brannonem</a>. První verze <i>SpeedScriptu</i> byla pod jménem <i>Scriptor</i>
publikována časopisem Compute! již v&nbsp;roce 1983 ve formě zdrojového kódu
v&nbsp;assembleru (uživatelé si program museli sami opsat do počítače a
případně nahrát na kazety/diskety). O rok později pak stejný autor vydal nový
program již nazvaný <i>SpeedScript</i>, který byl původně určený pro
mikropočítače <i>Commodore VIC-20</i> a <i>Commodore C64</i>, později však
došlo k&nbsp;portaci i na osmibitové mikropočítače <i>Atari</i> a <i>Apple
II</i>; <i>SpeedScript</i> se i díky tomu stal vůbec nejpopulárnějším programem
publikovaným v&nbsp;časopise Compute!. Nejrozšířenější mezi uživateli byla
verze 3 a 3.2 (1985, 1987).</p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-1.png" class="image-214381" width="304" height="433" alt="&#160;" />
<p><i>Obrázek 29: Obal s&nbsp;paměťovým médiem nebo návodem ke SpeedScriptu.</i></p>

<p>Textový procesor <i>SpeedScript</i> se vyznačoval minimalisticky pojatým
uživatelským rozhraním (stavový řádek kombinovaný s&nbsp;příkazovým řádkem),
poměrně sofistikovanou sadou příkazů, existencí operace <i>undo</i> (podobně
implementované jako v&nbsp;Emacsu, tj.&nbsp;přes &bdquo;kill buffer&ldquo;),
operacemi prováděnými na úrovni slov, vět či odstavců (jako v&nbsp;editoru Vi)
atd. Mimochodem, zdrojový kód SpeedScriptu 3.0 je dostupný například <a
href="http://www.atariarchives.org/speedscript/ch3.php">zde</a>.</p>

<a href="http://www.root.cz/obrazek/214382/"><img src="http://i.iinfo.cz/images/173/editors-3-2-2-prev.png" class="image-214382" width="335" height="270" alt="&#160;" /></a>
<p><i>Obrázek 30: Klávesové zkratky SpeedScriptu ve verzi pro počítače Apple
II.</i></p>

<p>Zajímavé je zjistit, proč například operace pro smazání textu uměly smazat
slovo, větu či odstavec nebo proč existovala operace na vložení 256 mezer
&ndash; <i>SpeedScript</i> se totiž musel vyrovnat s&nbsp;tím, že běžel na
relativně pomalých počítačích a (pravděpodobně) neimplementoval <i>gap
buffer</i>, což znamenalo, že operace smazání či vložení jednoho znaku byla
dosti pomalá, zejména u delších textů.</p>

<p><div class="rs-tip-major">Poznámka: verze 3.0 určená pro osmibitové počítače
Atari měla velikost pouhých 8330 bajtů.</div></p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-3.png" class="image-214383" width="580" height="700" alt="&#160;" />
<p><i>Obrázek 31: Klávesové zkratky SpeedScriptu ve verzi pro počítače
Commodore VIC-20.</i></p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-4.png" class="image-214384" width="637" height="453" alt="&#160;" />
<p><i>Obrázek 32: Klávesové zkratky SpeedScriptu ve variantě pro počítače
Atari.</i></p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-5.png" class="image-214385" width="672" height="480" alt="&#160;" />
<p><i>Obrázek 33: SpeedScript pro Atari: úvodní obrazovka původního programu
(jeho binární obraz má velikost 8330 bajtů).</i></p>

<p>Textový procesor <i>SpeedScript</i> se dočkal i dalších variant. Zajímavá je
například verze určená pro osmibitový mikropočítač <i>Commodore C128</i>, který
se od původního slavného <i>Commodore C64</i> odlišoval jak dvojnásobnou
kapacitou operační paměti (128kB oproti 64kB), tak zejména podporou
horizontálního rozlišení 640 pixelů, což umožnilo na jednom řádku zobrazit 80
poměrně dobře čitelných znaků, samozřejmě za předpokladu, že je použit
odpovídající monitor. <i>SpeedScript</i> byl pro tento nový grafický režim
upraven a vydán pod názvem <i>SpeedScript 128</i>. Pořád se však jednalo o
aplikaci naprogramovanou v&nbsp;assembleru mikroprocesoru MOS 6502.</p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-11.png" class="image-214391" width="640" height="400" alt="&#160;" />
<p><i>Obrázek 34: SpeedScript pro Commodore C128 používá 80 znaků na řádek.</i></p>

<p>Další varianta <i>SpeedScriptu</i> je zcela odlišná. Jedná se o aplikaci
určenou pro počítače IBM PC s&nbsp;DOSem, přičemž tato varianta textového
procesoru byla přepsána do Pascalu a nemá tak s&nbsp;původním zdrojovým kódem
prakticky nic společného (jen klávesové zkratky a logiku ovládání) a kvůli
přepsání do vyššího programovacího jazyka pro nás ani není v&nbsp;kontextu
dnešního článku zajímavá. Ovšem na IBM PC měl <i>SpeedScript</i> dosti velkou
konkurenci a nebyl na této platformě tak oblíbený, jako na osmibitových
mikropočítačích.</p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-12.png" class="image-214392" width="640" height="400" alt="&#160;" />
<p><i>Obrázek 35: SpeedScript pro IBM PC (DOS).</i></p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-13.png" class="image-214393" width="640" height="400" alt="&#160;" />
<p><i>Obrázek 36: SpeedScript pro IBM PC (DOS).</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Textový editor e (pro DOS)</h2>

<p>Další textový editor napsaný v&nbsp;assembleru, s&nbsp;nímž se dnes
seznámíme, se jmenuje jednoduše <i>E</i>, ovšem je známý spíše pod názvem
<i>E.COM</i>, což je název odvozený od jména spustitelného souboru s&nbsp;tímto
editorem. Editor <i>E</i>, jehož autorem je David Nye, je kompletně
naprogramován v&nbsp;assembleru (šestnáctibitový reálný režim procesorů Intel
řady 80x86). Velikost tohoto textového editoru je přibližně šest kilobajtů, což
mj.&nbsp;znamená, že každý screenshot zobrazený pod tímto odstavcem je větší,
než samotný editor. I přes malou velikost nabízí tento program velmi zajímavé
možnosti &ndash; samozřejmě práci s&nbsp;bloky, ale i možnost spouštění
externích programů po zadání klávesových zkratek, formátování odstavců,
nastavení režimu automatického odsazení apod. Výjimečné jsou klávesové zkratky
Ctrl+Home a Ctrl+End, kterými lze nastavit levý a pravý okraj odstavců (na
základě aktuální pozice kurzoru), což vlastně znamená, že
<strong>E.COM</strong> lze použít i jako jednoduchý textový procesor. Mezi
nevýhody patří především fakt, že řádky delší než 80 znaků jsou automaticky a
bez varování uříznuty na velikost pouze oněch 80 znaků. I přesto se však jedná
o velmi zajímavý minimalisticky pojatý program, který je možné díky dostupnosti
jeho zdrojového kódu dále upravovat a rozšiřovat (což nakonec udělal i autor
tohoto článku, v&nbsp;sadě <a
href="https://github.com/tisnik/presentations/blob/master/assembler/dos/e_my_cfg.patch">malých
patchů</a>).</p>

<a href="http://www.root.cz/obrazek/227819/"><img src="http://i.iinfo.cz/images/513/e1-prev.png" class="image-227819" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 37: Editace zdrojového souboru v&nbsp;editoru E. Tento zdrojový
soubor je pro ilustraci otevřen i v&nbsp;dalších editorech popisovaných
v&nbsp;navazujících kapitolách.</i></p>

<a href="http://www.root.cz/obrazek/227820/"><img src="http://i.iinfo.cz/images/194/e2-prev.png" class="image-227820" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 38: Integrovaná obrazovka s&nbsp;nápovědou k&nbsp;editoru
E.</i></p>

<a href="http://www.root.cz/obrazek/227821/"><img src="http://i.iinfo.cz/images/564/e3-prev.png" class="image-227821" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 39: Tento editor podporuje i práci s&nbsp;vizuálními
bloky.</i></p>

<a href="http://www.root.cz/obrazek/227822/"><img src="http://i.iinfo.cz/images/474/e4-prev.png" class="image-227822" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 40: Editor E.COM po malých úpravách provedených autorem tohoto
článku. Nejviditelnější je změna atributů textu (modré pozadí, světlemodrý
text) a taktéž podpora pro textové režimy 80&times;28, 80&times;43 a
80&times;50.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Textový editor e3 (pro Linux)</h2>

<p>Další aplikací naprogramovanou mj.&nbsp;i v&nbsp;assembleru, je textový
editor, který se jmenuje <i>e3</i>. Již samotné pojmenování tohoto editoru
naznačuje, že se jeho autor <i>Albrecht Kleine</i> snažil o vytvoření
minimalistického nástroje, což se skutečně (alespoň podle mého názoru) povedlo.
Textový editor <i>e3</i> je totiž naprogramován v&nbsp;assembleru
mikroprocesorů řady x86. Zdrojový kód původní verze <i>e3</i> je uložen
v&nbsp;jediném souboru s&nbsp;přibližně 6500 řádky optimalizovaného assembleru
určeného pro překlad do 32bitového režimu (použít lze například známý assembler
<i>NASM</i>). Pro 64bitový režim existuje jednoduchý skript, který zdrojový kód
<i>e3</i> jednoduše transformuje (odlišná jména registrů apod.). Kromě toho
existuje i šestnáctibitová verze editoru <i>e3</i> určená pro systém DOS či pro
šestnáctibitové (real mode) zavaděče a různé utility. Současně existuje i
varianta <i>e3</i> přepsaná do programovacího jazyka C, aby bylo možné tento
nepochybně zajímavý editor používat například na počítačích vybavených
mikroprocesory ARM či MIPS. My se však v&nbsp;dalším textu budeme zabývat pouze
originální 32bitovou a 64bitovou variantou <i>e3</i> naprogramovanou
v&nbsp;assembleru.</p>

<a href="http://www.root.cz/obrazek/213730/"><img src="http://i.iinfo.cz/images/237/e17-prev.png" class="image-213730" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 41: Spuštění editoru e3 v&nbsp;režimu emulace klávesových zkratek
WordStaru.</i></p>

<p>Binární obraz <i>e3</i> je v&nbsp;porovnání s&nbsp;ostatními moderními
textovými editory velmi malý &ndash; podle použitého režimu (32bit/64bit) je
spustitelný soubor <strong>/usr/bin/e3</strong> velký přibližně 13 či 17 kB a
žádné další soubory nejsou pro práci s&nbsp;<i>e3</i> zapotřebí. Textový editor
<i>e3</i> přitom nabízí uživatelům poměrně velké množství funkcí. Asi
nejzajímavější je existence několika režimů práce editoru &ndash; ten totiž
dokáže napodobit editor <i>WordStar</i> (spuštěno přes link
<strong>e3ws</strong>), <i>Emacs</i> (spuštěno přes link
<strong>e3em</strong>), <i>Vi/Vim</i> (spuštěno přes link
<strong>e3vi</strong>) <i>Pico/Nano</i> (spuštěno přes link
<strong>e3pi</strong>) či <i>NEdit (Nirvana Editor)</i> (spuštěno přes
<strong>e3ne</strong>). Režimy je možné dokonce přepínat i za běhu editoru a
součástí je i obrazovka s&nbsp;klávesovými zkratkami (to vše je samozřejmě
uloženo ve zmíněných 13 či 17 kB). <i>e3</i> nabízí dokonce i funkci
&bdquo;undo&ldquo;, obsahuje kalkulačku (dokáže spočítat i složitý aritmetický
výraz zapsaný v&nbsp;textu!) a &ndash; což je v&nbsp;našich podmínkách velmi
důležité &ndash; podporuje plnohodnotný osmibitový vstup znaků. Režim
kompatibility s&nbsp;editorem <i>vi</i> je překvapivě dobrý, ovšem například
uživatele <i>Vimu</i> některé neexistující příkazy a režimy budou pravděpodobně
mrzet (nejvíc asi absence plnohodnotného vizuálního režimu).</p>

<a href="http://www.root.cz/obrazek/213731/"><img src="http://i.iinfo.cz/images/335/e18-prev.png" class="image-213731" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 42: Obrazovka s&nbsp;nápovědou je dostupná za všech okolností a
přitom je vždy indikováno, jakou klávesovou zkratkou se nápověda
zobrazí.</i></p>

<p>Vzhledem ke zcela minimální velikosti tohoto textového editoru asi
nepřekvapí, že některé vlastnosti nejsou implementovány. Týká se to zejména
podpory pro zarovnávání textu a automatického odřádkování i přerovnání
odstavců, což je však funkce užitečná jen v&nbsp;některých případech, nikoli
například při úpravách konfiguračních souborů či zdrojových kódů. Taktéž chybí
podpora pro využití regulárních výrazů při hledání a nahrazování. To je však
vyřešeno elegantním způsobem &ndash; funkcí pro poslání vybraného textu do
filtru <strong>sed</strong>, což (znalým) uživatelům otevírá široké možnosti
použití. <i>e3</i> se pravděpodobně nestane jediným textovým editorem, který by
byl vhodný pro všechny příležitosti, ovšem ukazuje, že i velmi krátký program
dokáže být překvapivě mocný a přitom rychlý a současně nenáročný na systémové
zdroje.</p>

<a href="http://www.root.cz/obrazek/213733/"><img src="http://i.iinfo.cz/images/207/e19-prev.png" class="image-213733" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 43: Editace zdrojového kódu napsaného v&nbsp;programovacím jazyce
C v&nbsp;editoru e3.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Legendární textový editor WordStar</h2>

<p><i>"I actually have two computers. I have a computer I browse the Internet
with and I get my email on, and I do my taxes on. And then I have my writing
computer, which is a DOS machine, not connected to the Internet. I use WordStar
4.0 as my word processing system."<br />
George R. R. Martin, autor Písně ledu a ohně</i></p>

<p>Od konce sedmdesátých let až do zhruba první poloviny osmdesátých let
minulého století byl nejznámějším a současně i nejprodávanějším komerčním
textovým procesorem slavný <i>WordStar</i>. Historie tohoto &ndash; některými
autory dodnes používaného &ndash; textového procesoru, který je například
Johnem C. Dvorakem považován za jednu z&nbsp;nejlepších aplikací, která kdy
byla vytvořena, sahá až do roku 1977, tj.&nbsp;vlastně do období předcházející
boomu domácích osmibitových mikropočítačů. V&nbsp;tomto roce si totiž
<i>Seymour Rubinstein</i> (jeden ze zaměstnanců firmy IMSAI) pročetl studii
společnosti <i>Datapro</i>, která se zabývala specializovanými systémy
s&nbsp;textovými procesory, a rozhodl se, že založí čistě softwarovou
společnost orientovanou převážně na tento segment trhu. O rok později &ndash;
konkrétně v&nbsp;roce 1978 &ndash; založil Rubinstein firmu nazvanou
<i>MicroPro</i> a přesvědčil svého bývalého kolegu <i>Johna Robbinse
Barnabyho</i>, aby se k&nbsp;nově založené firmě připojil a vyvíjel pro ni
aplikace. Barnaby byl excelentní programátor orientovaný na vývoj
v&nbsp;assembleru (v&nbsp;čem jiném v&nbsp;té době? :-) a o několik let později
se stal jedním z&nbsp;nejznámějších programátorů celé éry vzestupu fenoménu
zvaného &bdquo;mikropočítač&ldquo;.</p>

<img src="http://i.iinfo.cz/images/640/d4-2.png" class="image-215143" width="441" height="479" alt="&#160;" />
<p><i>Obrázek 44: Dobová reklama na textový editor WordStar (první
část).</i></p>

<p>Prvním větším úkolem, kterým byl Barnaby pověřen, bylo naprogramování
dvojice programů &ndash; relativně jednoduchého textového editoru nazvaného
zpočátku <i>WordMaster</i> a dále pak programu <i>SuperSort</i>. Oba programy
byly určeny pro operační systém CP/M pro osmibitové mikroprocesory Intel 8080 a
Zilog Z80. Barnaby pracoval na vývoji obou programů současně (!), přičemž pro
vytvoření <i>WordMasteru</i> použil svůj dřívější textový editor nazvaný
<i>NED</i> (New EDitor, screenshot bohužel nemám k&nbsp;dispozici), psaný
&ndash; jak bylo Barnabyho zvykem &ndash; v&nbsp;assembleru mikroprocesoru
Intel 8080. <i>WordMaster</i> se jakožto komerční aplikace prodával poměrně
dobře, ovšem uživatelé začali požadovat nové funkce, především podporu pro tisk
a taktéž podporu pro (polo)automatické formátování a zalamování textu &ndash;
ostatně právě tyto dvě funkce tvořily určitou hranici mezi textovými editory a
textovými procesory. John Barnaby se tedy s&nbsp;velkým nasazením pustil do
dalšího úkolu &ndash; vytvoření plnohodnotného textového procesoru
s&nbsp;podporou tisku, aktivních okrajů textu a taktéž podporou pro automatický
word wrapping (přeskládání slov v&nbsp;odstavci při jeho editaci, což umí i
později naprogramované editory <i>D-Text</i> a <i>TextWriter</i>).</p>

<img src="http://i.iinfo.cz/images/640/d4-3.png" class="image-215144" width="445" height="134" alt="&#160;" />
<p><i>Obrázek 45: Dobová reklama na textový editor WordStar (druhá
část).</i></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Hrdina používající assembler: 137 000 řádků v&nbsp;assembleru aneb projekt s&nbsp;odhadovanou pracností 42 člověkoroků napsaný za deset měsíců</h2>

<p>Naprogramování textového procesoru nazvaného <i>WordStar</i> trvalo deset
měsíců a nakonec bylo z&nbsp;původního kódu <i>WordMasteru</i> použito pouze
necelých 10%, což mi na program napsaný v&nbsp;assembleru přijde překvapivě
velké číslo. Johnu Barnabymu se podařil heroický a možná dodnes nepřekonaný
výkon &ndash; za oněch deset měsíců napsal 137 tisíc řádků kvalitního a
současně i otestovaného programového kódu v&nbsp;assembleru. Seymour Rubinstein
a jeho přátelé ze společnosti IBM později vypočítali, že se jednalo o práci
v&nbsp;rozsahu 42 člověkoroků! V&nbsp;roce 1979 byl zahájen prodej první
komerční verze <i>WordStaru</i>, jehož cena byla 495 dolarů za samotný program
a 40 dolarů za manuál (éra záměrně snižovaných cen SW přišla až později).
Jednalo se o velmi úspěšný produkt &ndash; jen za rok 1979 prodej přesáhl
500&nbsp;000 dolarů, v&nbsp;roce 1980 již 1,8 milionu dolarů a v&nbsp;roce 1981
dokonce 5,2 milionu dolarů. Největší obrat měla tato firma v&nbsp;roce 1984
&ndash; celých 70 milionů dolarů &ndash; což z&nbsp;ní činilo největší
softwarovou firmu na světě! A to díky projektu naprogramovanému
v&nbsp;&bdquo;pouhém&ldquo; assembleru! Druhá verze <i>WordStaru</i> (taktéž
vydaná pro CP/M) měla zabudovanou ochranu proti kopírování, což se však
odrazilo na menší oblibě. V&nbsp;dalších verzích byla tato ochrana zrušena.</p>

<p>U Johna Barnabyho, který pracoval velmi intenzivně mnoho hodin denně sedm
dnů v&nbsp;týdnu, se však na konci roku 1979 začal projevoval syndrom vyhoření.
Z&nbsp;tohoto důvodu zažádal o čtyřměsíční volno, které mu Rubinstein skutečně
dal, ostatně pravděpodobně mu ani nic jiného nezbývalo. Avšak ani na počátku
roku 1980 Barnaby ještě nebyl připraven pokračovat v&nbsp;práci a nakonec firmu
<i>MicroPro</i> opustil. Jako každý správný hrdina se však John Barnaby ještě
jednou ukázal na scéně a to ve druhé polovině roku 1980. Firma <i>Epson</i>
totiž zkonstruovala malý počítač <i>PX-8</i> se zabudovaným monochromatickým
LCD. Společnost <i>Epson</i> si přála, aby v&nbsp;tomto počítači byla
v&nbsp;paměti ROM uložena upravená verze <i>WordStaru</i> schopná pracovat
s&nbsp;pouhými 48 kB RAM, což znamenalo přepsat část původního zdrojového kódu
(psaného v&nbsp;assembleru, jak již víme z&nbsp;předchozího textu).</p>

<p>Tehdejší programátoři, kteří ve firmě <i>MicroPro</i> pracovali, odhadli, že
jim bude konverze <i>WordStaru</i> na <i>PX-8</i> trvat šest měsíců. Rubinstein
na to odpověděl, že se přece jedná o pouhopouhou konverzi, která musí být na
základě požadavků firmy <i>Epson</i> hotová za čtyři měsíce. Po dlouhých
diskuzích nakonec Rubinstein znovu (a naposledy) přemluvil Barnabyho, aby
portaci provedl samostatně. John Barnaby si řekl o 100 dolarů na hodinu a
nakonec se mu podařilo portaci dodělat za pouhé dva týdny! (další týden si
vyžádalo odladění a otestování).</p>

<img src="http://i.iinfo.cz/images/640/d4-4.png" class="image-215145" width="600" height="368" alt="&#160;" />
<p><i>Obrázek 46: Počítač PX-8 se zabudovaným monochromatickým LCD a
WordStarem.</i></p>

<p>V&nbsp;roce 1981 byl <i>WordStar</i> vydán pro operační systém
<i>CP/M-86</i>, tj.&nbsp;pro mikropočítače postavené na mikroprocesorech
<i>Intel 80x86</i>. Říká se, že programátoři firmy <i>MicroPro</i> nebyli
schopni (nebo neměli dosti času) na pochopení původního optimalizovaného
zdrojového kódu Johna Barnabyho, takže velkou část kódu prostě přepsali
z&nbsp;instrukcí osmibitového mikroprocesoru <i>Intel 8080</i> na instrukce
šestnáctibitového mikroprocesoru <i>Intel 8086</i> (výsledek &ndash; ještě
první verze <i>WordStaru</i> pro DOS dokázala pracovat jen s&nbsp;64 kB RAM). I
to je možná důvod, proč se o tři roky později společnost <i>MicroPro</i>
rozhodla, že celý textový procesor přepíše znovu, tentokrát
v&nbsp;programovacím jazyce C, ale to již poněkud předbíháme. Nicméně na konci
roku 1981 byl <i>WordStar</i> bezpochyby nejslavnějším textovým procesorem
provozovaným prakticky na všech počítačích s&nbsp;osmibitovým operačním
systémem <i>CP/M</i> i s&nbsp;jeho šestnáctibitovou variantou
<i>CP/M-86</i>.</p>

<p>Vzhledem k&nbsp;tomu, že <i>WordStar</i> byl úspěšně portován na operační
systém <i>CP/M-86</i>, bylo jen otázkou času, kdy se firma <i>MicroPro</i>
pokusí o vydání verze určené pro operační systém <i>MS-DOS</i>, čímž by se
<i>WordStaru</i> otevřela cesta na potenciálně velmi rozsáhlý trh
s&nbsp;programy pro počítače IBM PC. Již v&nbsp;dubnu 1982 se dalšímu hackerovi
z&nbsp;firmy <i>MicroPro</i> &ndash; <i>Jimu Foxovi</i> &ndash; podařilo za
jedinou noc upravit verzi <i>WordStaru</i> pro <i>CP/M-86</i> takovým způsobem,
že tento textový procesor mohl být spuštěn v&nbsp;MS-DOSu. Jednalo se prozatím
o technologické demo, které Jim Fox ukázal další ráno Rubinsteinovi, ovšem
plnohodnotná portace byla provedena až skupinou irských programátorů, kteří pro
vývoj používali vývojový systém firmy Intel, jenž pracoval s&nbsp;operačním
systémem <i>ISIS II</i> a pro ukládání dat používal osmipalcové diskety (nikoli
pevný disk). Vytvořené spustitelné soubory s&nbsp;<i>WordStarem</i> byly
následně přeneseny na IBM PC s&nbsp;využitím sériového portu.</p>

<img src="http://i.iinfo.cz/images/111/gui11-13.jpg" width="350" height="497" alt=" " />
<p><i>Obrázek 47: Další dobová reklama na textový procesor WordStar
v&nbsp;podstatě ani moc nepřeháněla :-).<br />
Zdroj: www.old-computers.com</i></p>



<p><a name="k21"></a></p>
<h2 id="k21">21. Odkazy na Internetu</h2>

<ol>

<li>George R. R. Martin writes with a DOS word processor<br />
<a href="http://www.cnet.com/news/george-r-r-martin-writes-with-a-dos-word-processor/#!">http://www.cnet.com/news/george-r-r-martin-writes-with-a-dos-word-processor/#!</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>TIOBE Index for September 2019<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

<li>Assembly language on TIOBE Index<br />
<a href="https://www.tiobe.com/tiobe-index/assembly-language/">https://www.tiobe.com/tiobe-index/assembly-language/</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>A86/A386 assembler and D86/D386 debugger<br />
<a href="http://eji.com/a86/">http://eji.com/a86/</a>
</li>

<li>FASM<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>NASM<br />
<a href="https://www.nasm.us/">https://www.nasm.us/</a>
</li>

<li>High Level Assembly (home page)<br />
<a href="http://plantation-productions.com/Webster/">http://plantation-productions.com/Webster/</a>
</li>

<li>High Level Assembly (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/High_Level_Assembly">https://en.wikipedia.org/wiki/High_Level_Assembly</a>
</li>

<li>A86/A386 Features<br />
<a href="http://eji.com/a86/features.htm#FeaturesA86">http://eji.com/a86/features.htm#FeaturesA86</a>
</li>

<li>Sphinx C--<br />
<a href="http://c--sphinx.narod.ru/indexe.htm">http://c--sphinx.narod.ru/indexe.htm</a>
</li>

<li>OPEN SPHiNX C-- Compiler<br />
<a href="https://sourceforge.net/projects/c--/">https://sourceforge.net/projects/c--/</a>
</li>

<li>The Art of Assembly Language<br />
<a href="http://www.plantation-productions.com/Webster/www.artofasm.com/Windows/HTML/AoATOC.html">http://www.plantation-productions.com/Webster/www.artofasm.com/Windows/HTML/AoATOC.html</a>
</li>

<li>SpeedScript 3.2 for the Commodore 64<br />
<a href="http://www.atarimagazines.com/compute/gazette/198705-speedscript.html">http://www.atarimagazines.com/compute/gazette/198705-speedscript.html</a>
</li>

<li>SpeedScript source code<br />
<a href="http://www.atariarchives.org/speedscript/ch3.php">http://www.atariarchives.org/speedscript/ch3.php</a>
</li>

<li>SpeedScript 3.0: All Machine Language Word Processor For the Atari<br />
<a href="http://www.atariarchives.org/speedscript/ch1.php">http://www.atariarchives.org/speedscript/ch1.php</a>
</li>

<li>Textové editory pro mainframy<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?MainframeEditorFamily">http://texteditors.org/cgi-bin/wiki.pl?MainframeEditorFamily</a>
</li>

<li>Text editor (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Text_editor">https://en.wikipedia.org/wiki/Text_editor</a>
</li>

<li>Line editor (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Line_editor">https://en.wikipedia.org/wiki/Line_editor</a>
</li>

<li>Opravdoví programátoři nepoužívají Pascal<br />
<a href="http://www.logix.cz/michal/humornik/Pojidaci.Kolacu.xp">http://www.logix.cz/michal/humornik/Pojidaci.Kolacu.xp</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html">https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html</a>
</li>

<li>Linux Assembly website<br />
<a href="http://asm.sourceforge.net/">http://asm.sourceforge.net/</a>
</li>

<li>Using Assembly Language in Linux<br />
<a href="http://asm.sourceforge.net/articles/linasm.html">http://asm.sourceforge.net/articles/linasm.html</a>
</li>

<li>Borland Turbo Assembler<br />
<a href="https://web.archive.org/web/20101023185143/http://info.borland.com/borlandcpp/cppcomp/tasmfact.html">https://web.archive.org/web/20101023185143/http://info.borland.com/borlandcpp/cppcomp/tasmfact.html</a>
</li>

<li>Microsoft Macro Assembler Reference<br />
<a href="https://docs.microsoft.com/en-us/cpp/assembler/masm/microsoft-macro-assembler-reference?view=vs-2019">https://docs.microsoft.com/en-us/cpp/assembler/masm/microsoft-macro-assembler-reference?view=vs-2019</a>
</li>

<li>Tesla PMI-80<br />
<a href="http://osmi.tarbik.com/cssr/pmi80.html">http://osmi.tarbik.com/cssr/pmi80.html</a>
</li>

<li>PMI-80<br />
<a href="http://en.wikipedia.org/wiki/PMI-80">http://en.wikipedia.org/wiki/PMI-80</a>
</li>

<li>PMI-80<br />
<a href="http://www.old-computers.com/museum/computer.asp?st=1&amp;c=1016">http://www.old-computers.com/museum/computer.asp?st=1&amp;c=1016</a>
</li>

<li>IBM System 360/370 Compiler and Historical Documentation<br />
<a href="http://www.edelweb.fr/Simula/">http://www.edelweb.fr/Simula/</a>
</li>

<li>IBM 700/7000 series<br />
<a href="http://en.wikipedia.org/wiki/IBM_700/7000_series">http://en.wikipedia.org/wiki/IBM_700/7000_series</a>
</li>

<li>IBM System/360<br />
<a href="http://en.wikipedia.org/wiki/IBM_System/360">http://en.wikipedia.org/wiki/IBM_System/360</a>
</li>

<li>IBM System/370<br />
<a href="http://en.wikipedia.org/wiki/IBM_System/370">http://en.wikipedia.org/wiki/IBM_System/370</a>
</li>

<li>Mainframe family tree and chronology<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_FT1.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_FT1.html</a>
</li>

<li>704 Data Processing System<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP704.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP704.html</a>
</li>

<li>705 Data Processing System<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP705.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP705.html</a>
</li>

<li>The IBM 704<br />
<a href="http://www.columbia.edu/acis/history/704.html">http://www.columbia.edu/acis/history/704.html</a>
</li>

<li>IBM Mainframe album<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_album.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_album.html</a>
</li>

<li>ASM-One Macro Assembler<br />
<a href="http://en.wikipedia.org/wiki/ASM-One_Macro_Assembler">http://en.wikipedia.org/wiki/ASM-One_Macro_Assembler</a>
</li>

<li>ASM-One pages<br />
<a href="http://www.theflamearrows.info/documents/asmone.html">http://www.theflamearrows.info/documents/asmone.html</a>
</li>

<li>Základní informace o ASM-One<br />
<a href="http://www.theflamearrows.info/documents/asminfo.html">http://www.theflamearrows.info/documents/asminfo.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

