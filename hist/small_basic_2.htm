<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vestavěné objekty Small Basicu: práce s grafikou, časovačem, reakce na události</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vestavěné objekty Small Basicu: práce s grafikou, časovačem, reakce na události</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Vestavěné objekty Small Basicu: práce s&nbsp;grafikou, časovačem, reakce na události</a></p>
<p><a href="#k02">*** 2. Příklad volání metod objektů a změn jejich atributů</a></p>
<p><a href="#k03">3. Základní operace s&nbsp;řetězci realizovaná přes objekt <strong>Text</strong></a></p>
<p><a href="#k04">4. Malá odbočka &ndash; programovací jazyk Logo</a></p>
<p><a href="#k05">5. Želví grafika</a></p>
<p><a href="#k06">6. Želví grafika ve Small Basicu</a></p>
<p><a href="#k07">7. Další možnosti poskytované implementací želví grafiky</a></p>
<p><a href="#k08">8. Objekt <strong>GraphicsWindow</strong> pro grafický výstup</a></p>
<p><a href="#k09">*** 9. Základní příkazy pro vykreslování</a></p>
<p><a href="#k10">*** 10. Specifikace barvy pozadí i barvy vykreslovaných objektů</a></p>
<p><a href="#k11">*** 11. Práce s&nbsp;grafikou na úrovni jednotlivých pixelů</a></p>
<p><a href="#k12">12. Systém událostí &ndash; úvod do asynchronního programování</a></p>
<p><a href="#k13">*** 13. Reakce na stisk tlačítka myši nebo na stisk klávesy</a></p>
<p><a href="#k14">14. Reakce na tik časovače</a></p>
<p><a href="#k15">*** 15. Ladění programů v&nbsp;prostředí Small Basicu</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">17. Alternativní projekt s&nbsp;licencí GPL: Basic-256</a></p>
<p><a href="#k18">18. Příloha: seznam klíčových slov Atari BASICu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vestavěné objekty Small Basicu: práce s&nbsp;grafikou, časovačem, reakce na události</h2>

<p></p>

*** image ***
<p><i>Obrázek 1: V&nbsp;levé části uživatelského rozhraní Small Basicu se
zobrazuje seznam všech dostupných objektů.</i></p>

*** image ***
<p><i>Obrázek 2: Seznam metod vybraného objektu.</i></p>

*** image ***
<p><i>Obrázek 3: Seznam atributů vybraného objektu.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Příklad volání metod objektů a změn jejich atributů</h2>

<p></p>

<pre>
<i>' Program typu "Hello, world!" naprogramovaný ve Small Basicu</i>
&nbsp;
TextWindow.WriteLine("Hello, world!")
</pre>

<p></p>

<pre>
<i>' Program typu "Hello, world!" naprogramovaný ve Small Basicu</i>
<i>' doplněný o změnu vlastností textového okna</i>
&nbsp;
TextWindow.BackgroundColor = "darkblue"
TextWindow.ForegroundColor = "yellow"
TextWindow.WriteLine("Hello, world!")
</pre>

*** image ***
<p><i>Obrázek 4: Změna barvy pozadí i textu v&nbsp;textovém oknu.</i></p>

*** image ***
<p><i>Obrázek 5: I v&nbsp;tak malém a relativně moderním jazyku, jakým je Small
Basic, už nalezneme nepodporované metody a atributy.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Základní operace s&nbsp;řetězci realizovaná přes objekt <strong>Text</strong></h2>

<p>Jak jsme si již řekli minule, nepodporuje <i>Small Basic</i> ani základní
funkce pro zpracování řetězců; a to dokonce ani funkce <strong>LEFT$</strong>,
<strong>MID$</strong> a <strong>RIGHT$</strong> zavedené právě společností
Microsoft. Prakticky veškerou práci s&nbsp;řetězci obstarávají statické metody
dostupné v&nbsp;objektu <strong>Text</strong>. Nalezneme zde především podporu
spojování řetězců, převodu řetězce na velká či naopak malá písmena, získání
podřetězce atd. Viz též následující příklad:</p>

<pre>
<i>' Základní operace s řetězci realizovaná přes objekt Text</i>
&nbsp;
message = "Hello, world"
TextWindow.WriteLine(message)
&nbsp;
message = Text.Append(message, "!")
TextWindow.WriteLine(message)
&nbsp;
TextWindow.WriteLine(Text.ConvertToUpperCase(message))
&nbsp;
TextWindow.WriteLine(Text.GetSubText(<u>message, 8, 5</u>))
</pre>

<p><div class="rs-tip-major">Poznámka: podtržená část zdrojového kódu ukazuje
na zajímavou vlastnost <i>Small Basicu</i> &ndash; znaky řetězce začínají
indexem 1 a nikoli 0! Převod některých algoritmů do <i>Small Basicu</i> tedy
nebude zcela přímočarý.</div></p>

*** image ***
<p><i>Obrázek 6: Vybrané metody objektu <strong>Text</strong>.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Malá odbočka &ndash; programovací jazyk Logo</h2>

<p>Historicky jedním z&nbsp;prvních programovacích jazyků, který byl vyvinut
s&nbsp;ohledem na snadnou a efektivní výuku programování, je jazyk <i>Logo</i>,
jehož první verze vznikla již v&nbsp;roce 1967, tj.&nbsp;o celé desetiletí
dříve, než začaly být dostupné první typy domácích osmibitových počítačů,
jejichž vliv na výuku programování je značný. Někteří lidé sice považují tento
jazyk za pouhou dětskou hračku (určitou obdobu počítačových her), ovšem ve
skutečnosti se jedná o velmi zajímavý koncept, který je neustále zdokonalován a
používán, zejména na základních ale i středních školách, kde je využíván jak
pro výuku algoritmizace, tak i jako pomůcka při názorné výuce geometrie.</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-4.png" width="272" height="540" alt="&nbsp;" />
<p><i>Obrázek 7: UCB Logo je jedním z&nbsp;představitelů tradičních interpretrů
jazyka Logo, vybavený systémem pro práci se želví grafikou. Tento interpret je
dostupný pro většinu platforem, samozřejmě včetně Linuxu.</i></p>

<p>Programovací jazyk <i>Logo</i> je postaven na takzvané <i>konstruktivní
vzdělávací filozofií</i> a je navržen k&nbsp;podpoře <i>konstruktivního
učení</i>. Konstruktivismus vysvětluje znalosti a dovednosti, jak jsou
vytvořeny žáky v&nbsp;jejich vlastních myslích, prostřednictvím vzájemné
interakce s&nbsp;jinými lidmi a okolím. Tato zajímavá teorie je spojena
především se švýcarským psychologem <a
href="https://en.wikipedia.org/wiki/Jean_Piaget">Jeanem Piagetem</a>, který
strávil mnoho času studováním a zdokumentováním procesu učení malých dětí.
S&nbsp;Piagetem spolupracoval i <a
href="https://en.wikipedia.org/wiki/Seymour_Papert">Seymour Papert</a>, který
později stál u vzniku Loga.</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-5.png" width="400" height="400" alt="&nbsp;" />
<p><i>Obrázek 8: Obrazec vzniklý pomocí želví grafiky a programu obsahujícího
dvojici vnořených programových smyček typu &bdquo;repeat&ldquo; (což je
jednodušší obdoba cyklu <strong>FOR-NEXT</strong>).</i></p>

<p>Z&nbsp;programátorského hlediska je programovací jazyk <i>Logo</i> postaven
na podobných principech jako například jazyk <i>LISP</i> (ostatně není bez
zajímavosti, že první verze <i>Loga</i> byla implementována právě
v&nbsp;<i>LISPu</i>), ovšem jeho syntaxe je odlišná, což v&nbsp;případě
<i>Loga</i> vede k&nbsp;tvorbě čitelnějších programů, které se vizuálně
odlišují od Lispovského &bdquo;lesa závorek&ldquo;. Navíc se matematické a
logické výrazy v&nbsp;<i>Logu</i> zapisují v&nbsp;infixové podobě, na rozdíl od
formy prefixové používané <i>LISPem</i>. Tvorba programů v&nbsp;<i>Logu</i>
vede žáky k&nbsp;dekompozici problému na jednodušší podproblémy, ale i
k&nbsp;opačnému postupu &ndash; tvorbě nových slov (což jsou pouze jinak
pojmenované funkce), kterými se repertoár dostupných příkazů (slovník) postupně
rozšiřuje &ndash; jazyk se &bdquo;učí&ldquo; novým příkazům.</p>

<p><div class="rs-tip-major">Poznámka: právě <i>dekompozice</i> je v&nbsp;Logu
preferována zatímco ve <i>Small Basicu</i> je ji velmi těžké realizovat,
protože při volání podprogramů nelze použít ani parametry ani návratové
hodnoty.</div></p>

<p>Příklady zápisu programu používajícího programovou smyčku
<strong>repeat</strong>, dále zmíněnou želví grafiku a definici nových slov
příkazem <strong>to</strong>:</p>

<pre>
to kruznice :krok
    repeat 360 [
        forward :krok
        left 1
    ]
end
&nbsp;
to kvet :pocet
    repeat :pocet [
        kruznice 1
        left 360/:pocet
    ]
end
&nbsp;
draw
kvet 10
</pre>

<img src="http://i.iinfo.cz/images/402/lang-01-a-6.png" width="400" height="389" alt="&nbsp;" />
<p><i>Obrázek 9: Ukázka použití želví grafiky v&nbsp;Logu.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Želví grafika</h2>

<p>Jednou z&nbsp;nejznámějších a pro výuku algoritmizace taktéž
nejužitečnějších vlastností programovacího jazyka <i>Logo</i> je takzvaná
<strong>želví grafika</strong>, anglicky <strong>turtle graphics</strong>.
Právě želví grafika velkou mírou přispěla k&nbsp;poměrně značné oblíbenosti a
také rozšíření tohoto programovacího jazyka, především v&nbsp;zahraničním
školství. V&nbsp;USA se zpočátku <i>Logo</i> šířilo spolu s&nbsp;počítačem
Apple II a později Commodore C64 i Apple Macintosh, zatímco v&nbsp;Evropě se
děti poprvé s&nbsp;<i>Logem</i> seznámily na domácích osmibitových počítačích,
především na Atari, Spectru, v&nbsp;tuzemsku na PMD, Didaktiku, IQ 151 atd.</p>
Pojďme si nyní říci základní informace o této zajímavé součásti <i>Loga</i> a
také o začlenění želví grafiky do dalších programovacích jazyků a aplikací.</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-7.jpg" width="450" height="435" alt=" " />
<p><i>Obrázek 10: Další ukázka možností želví grafiky.</i></p>

<p>Základem želví grafiky je virtuální želva (<i>turtle</i>), která se na
základě poměrně malé množiny příkazů dodávaných napsaným programem (skriptem)
či přímo pomocí interaktivního zápisu příkazů, pohybuje po obrazovce a přitom
za sebou vykresluje stopu složenou z&nbsp;úseček. Tato virtuální želva se tedy
chová podobně jako reálná želva, která se pohybuje po hladké pískové pláži a
zanechává za sebou stopu. Původní <i>Logo</i> nedisponovalo pouze virtuální
(vykreslovanou) želvou, ale skutečným malým robotem ve tvaru želvy, který byl
radiovým spojením propojen s&nbsp;řídicím počítačem a reagoval na základní
příkazy: pohyb vpřed, pohyb vzad, otočení doleva a otočení doprava. Navíc uměl
tento robot reagovat i na jeden &bdquo;multimediální&ldquo; příkaz &ndash;
zapnutí zvonku. Je zřejmé, že pro výuku malých dětí je pohybující se reálný
předmět mnohem zajímavější než pouhý obrázek, na druhou stranu však byl (prý)
pohyb robota poměrně nepřesný, zejména při otáčení (což dnes již není problém,
ostatně řiditelných a programovatelných robotů dnes existuje velké
množství).</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-8.jpg" width="450" height="435" alt=" " />
<p><i>Obrázek 11: Při tvorbě tohoto obrázku se, na rozdíl od obrázků
předchozích, již musely používat proměnné. Ovšem zajímavé je, že v&nbsp;Logu je
možné programovat poměrně dlouho bez znalosti proměnných (protože jedinou
&bdquo;stavovou proměnnou&ldquo; je pozice a orientace želvy).</i></p>

<p>Dnešní implementace programovacího jazyka <i>Logo</i> většinou (kromě
několika komerčních distribucí, například LEGO/Loga a několika amatérských
projektů) touto možností již nedisponují, takže se budeme muset spokojit
s&nbsp;virtuální želvou pohybující se na obrazovce. V&nbsp;některých
implementacích Loga je želva zobrazena poměrně reálným obrázkem želvy viděné
z&nbsp;ptačí perspektivy (jedná se například o Atari Logo, Commenius Logo,
Imagine i dnes zmíněný modul <i>turtle</i>), většinou se však na obrazovce
zobrazuje pouhý rovnoramenný trojúhelník, podobně jako ve hrách typu Xpilot
nebo Asteroids. Jednotlivé implementace se od sebe také liší tím, zda za sebou
želva stopu vykresluje &bdquo;hlavičkou&ldquo;, svým středem či
&bdquo;zadečkem&ldquo;.</p>

<img src="https://i.iinfo.cz/images/491/appjar7-1.png" class="image-310741" alt="&#160;" width="400" height="322" />
<p><i>Obrázek 12: Zobecněný Pythagorův strom, jehož konstrukce je v&nbsp;Logu
relativně jednoduchá, ovšem dosti složitá ve Small Basicu, vzhledem
k&nbsp;problematickému volání podprogramů.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Želví grafika ve Small Basicu</h2>

<p>I ve <i>Small Basicu</i> lze želví grafiku využít (ostatně jinak by
předchozí dvě kapitoly postrádaly v&nbsp;tomto článku smysl). K&nbsp;tomuto
účelu slouží metody a atributy objektu nazvaného příhodně
<strong>Turtle</strong>. Zavoláním metody <strong>Show()</strong> se zobrazí
grafická plocha a na ní je umístěna želva. Ta dokáže reagovat na základní
příkazy, zejména na příkazy pro otočení a posun. Otočení želvy o 90&deg; se
provádí metodami <strong>TurnLeft</strong> a <strong>TurnRight</strong> (bez
parametrů), posun želvy o zadaný počet kroků je pak zajištěn zavoláním metody
<strong>Move</strong>.</p>

*** image ***
<p><i>Obrázek 13: Metody objektu <strong>Turtle</strong>.</i></p>

<p>Nyní již tedy známe všechny tři metody nutné pro vykreslení čtverce:</p>

<pre>
<i>' Kreslení s využitím želví grafiky</i>
&nbsp;
Turtle.Show()
&nbsp;
<strong>for</strong> i = 1 <strong>to</strong> 4
    Turtle.TurnLeft()
    Turtle.Move(100)
<strong>endfor</strong>
</pre>

*** image ***
<p><i>Obrázek 14: Výsledek předchozího příkladu.</i></p>

<p>Nepatrnou úpravou předchozího kódu vykreslíme hvězdu jedním tahem:</p>

<pre>
<i>' Kreslení s využitím želví grafiky</i>
&nbsp;
Turtle.Show()
&nbsp;
<strong>for</strong> i = 1 <strong>to</strong> 7
    Turtle.Turn(360*2/7)
    Turtle.Move(100)
<strong>endfor</strong>
</pre>

*** image ***
<p><i>Obrázek 15: Výsledek předchozího příkladu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Další možnosti poskytované implementací želví grafiky</h2>

<p>Pro urychlení vykreslení složitějších obrazců je vhodné želvu skrýt metodou
<strong>Turtle.Hide()</strong> a nastavit nejvyšší rychlost vykreslování
atributem <strong>Turtle.Speed</strong>. Viz též následující příklad:</p>

<pre>
<i>' Kreslení s využitím želví grafiky</i>
&nbsp;
Turtle.Show()
Turtle.Hide()
Turtle.Speed = 10
&nbsp;
vertexes = 9
&nbsp;
<strong>for</strong> i = 1 <strong>to</strong> vertexes
    Turtle.Turn(360*2/vertexes)
    Turtle.Move(100)
<strong>endfor</strong>
</pre>

<p>Výsledek:</p>

*** image ***
<p><i>Obrázek 16: Obrazec, který není zakrytý želvou, která byla skryta.</i></p>

<p>Dále je možné metodami pojmenovanými <strong>Turtle.PenUp()</strong> a
<strong>Turtle.PenDown()</strong> zvednout popř.&nbsp;spustit pomyslné kreslicí
pero nad kreslicí plochu. V&nbsp;případě, že je pero zvednuto, pouze se
přesouvá, ale nekreslí za sebou stopu (úsečku):</p>

<pre>
<i>' Kreslení s využitím želví grafiky</i>
&nbsp;
Turtle.Show()
Turtle.Hide()
Turtle.Speed = 10
&nbsp;
vertexes = 11
&nbsp;
<strong>for</strong> i = 1 <strong>to</strong> vertexes
    Turtle.Turn(360*3/vertexes)
    Turtle.PenDown()
    Turtle.Move(50)
    Turtle.PenUp()
    Turtle.Move(50)
    Turtle.PenDown()
    Turtle.Move(50)
<strong>endfor</strong>
</pre>

<p>Výsledkem je tento obrazec:</p>

*** image ***
<p><i>Obrázek 17: Vliv příkazů <strong>PenUp</strong> a
<strong>PenDown</strong> na tvar vykresleného obrazce.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Objekt <strong>GraphicsWindow</strong> pro grafický výstup</h2>

<p>V&nbsp;úvodních kapitolách jsme si představili objekt nazvaný
<strong>TextWindow</strong>. Již z&nbsp;názvu tohoto objektu je zřejmé, že
slouží pro vstupně-výstupní operace s&nbsp;textem
(popř.&nbsp;s&nbsp;numerickými hodnotami). Pro grafický výstup slouží objekt
pojmenovaný opět jednoznačně &ndash; <strong>GraphicsWindow</strong>. Grafické
okno není, na rozdíl od okna textového, automaticky zobrazeno při spuštění
programu, takže je nutné o jeho zobrazení požádat explicitně. Pro tento účel
slouží metoda <strong>Show()</strong>:</p>

<pre>
<i>' Grafický výstup</i>
&nbsp;
GraphicsWindow.Show()
</pre>

<p>Objekt typu <strong>GraphicsWindow</strong> nabízí metody pro kreslení
základních grafických tvarů, několik atributů (barva kreslení, výška a šířka
okna) atd.:</p>

*** image ***
<p><i>Obrázek 18: Metody objektu <strong>GraphicsWindow</strong>.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Základní příkazy pro vykreslování</h2>

<p>Do grafického okna je možné vykreslovat základní grafické obrazce, mezi než patří úsečky, obdélníky, ale i text.</p>

<pre>
<i>' Grafický výstup</i>
&nbsp;
GraphicsWindow.Show()
&nbsp;
GraphicsWindow.PenColor = "red"
GraphicsWindow.DrawRectangle(10, 10, 100, 100)
&nbsp;
GraphicsWindow.PenColor = "blue"
GraphicsWindow.DrawLine(60, 50, 60, 70)
GraphicsWindow.DrawLine(50, 60, 70, 60)
</pre>

*** image ***
<p><i>Obrázek 19: Výsledek vykreslení jednoho obdélníka a dvou úseček.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Specifikace barvy pozadí i barvy vykreslovaných objektů</h2>

<p></p>

<pre>
<i>' Grafický výstup</i>
&nbsp;
GraphicsWindow.Show()
GraphicsWindow.BackgroundColor = "#000000"
&nbsp;
GraphicsWindow.PenColor = "#80ffff"
GraphicsWindow.DrawRectangle(10, 10, 100, 100)
&nbsp;
GraphicsWindow.PenColor = "#ffff80"
GraphicsWindow.DrawLine(60, 50, 60, 70)
GraphicsWindow.DrawLine(50, 60, 70, 60)
</pre>

*** image ***
<p><i>Obrázek 20: Odlišné barvy pozadí i barvy vykreslovaných objektů.</i></p>

<pre>
<i>' Grafický výstup</i>
&nbsp;
GraphicsWindow.Show()
GraphicsWindow.BackgroundColor = GraphicsWindow.GetColorFromRGB(0,0,0)
&nbsp;
GraphicsWindow.PenColor = GraphicsWindow.GetColorFromRGB(255, 0, 0)
GraphicsWindow.DrawRectangle(10, 10, 100, 100)
&nbsp;
GraphicsWindow.PenColor = GraphicsWindow.GetColorFromRGB(0, 0, 255)
GraphicsWindow.DrawLine(60, 50, 60, 70)
GraphicsWindow.DrawLine(50, 60, 70, 60)
</pre>

*** image ***
<p><i>Obrázek 21: Opět odlišné barvy pozadí i barvy vykreslovaných
objektů.</i></p>

<p><div class="rs-tip-major">Poznámka: jen pro zajímavost se podívejme, jak je
práce s&nbsp;grafikou řešena v&nbsp;klasických BASICech. Ty většinou podporují
příkazy <strong>PLOT</strong> a <strong>DRAWTO</strong> (či
<strong>DRAW</strong>). První příkaz vykreslí jediný pixel, druhý příkaz
úsečku. Oba příkazy přitom změní souřadnice &bdquo;aktuálního bodu&ldquo;,
v&nbsp;němž začíná vykreslovaná úsečka. Průběh funkce lze vykreslit
následovně:</div></p>

<pre>
1 REM *****************************
2 REM Vykresleni prubehu funkce
3 REM 
4 REM Uprava pro Atari BASIC
5 REM 
6 REM *****************************
7 REM
8 REM
9 REM
10 GRAPHICS 8+16
11 COLOR 1
12 PLOT 0,0:DRAWTO 0,191
13 PLOT 0,95:DRAWTO 319,95
18 PLOT 0,95
20 FOR I=1 TO 319
21 X=I/16
22 Y=60*SIN(X)
25 DRAWTO I,95-Y
30 NEXT I
999 GOTO 999:REM ZUSTAT V GRAFICE
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Práce s&nbsp;grafikou na úrovni jednotlivých pixelů</h2>

<p></p>

<pre>
<i>' Práce s grafikou na úrovni jednotlivých pixelů</i>
&nbsp;
GraphicsWindow.Show()
GraphicsWindow.BackgroundColor = GraphicsWindow.GetColorFromRGB(0,0,0)
&nbsp;
for y = 0 to 255
    for x = 0 to 255
        color = GraphicsWindow.GetColorFromRGB(x, 0, y)
        GraphicsWindow.SetPixel(x, y, color)
    endfor
endfor
</pre>

*** image ***
<p><i>Obrázek 22: Plocha s&nbsp;modifikovanými barvami pixelů.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Systém událostí &ndash; úvod do asynchronního programování</h2>

<p>Některé rysy <i>Small Basicu</i> jsou velmi nízkoúrovňové a dokonce se tento
programovací jazyk z&nbsp;určitého pohledu nachází až pod assemblerem (pouze
globální proměnné atd.). Na druhou stranu zde však nalezneme vysokoúrovňové a
na dobu vzniku elegantní jazykové konstrukce. Jedna z&nbsp;těchto konstrukcí
slouží pro naprogramování reakce při vzniku nějaké asynchronní události.</p>

<p>Tento rys některých BASICů jsme si popsali v&nbsp;článku o <i>GW-BASICu</i>,
takže možná neuškodí si připomenout, jak je tato problematika řešena právě
v&nbsp;tomto dnes již historickém SW. Programová konstrukce pro obsluhu
události začíná slovem <strong>ON</strong>, za kterým následuje typ události a
poté buď příkaz skoku <strong>GOTO</strong> nebo skoku do podprogramu
<strong>GOSUB</strong>.</p>

<p>Příkladem může být reakce na vznik chyby v&nbsp;programu, tedy konstrukce,
která se v&nbsp;jiných BASICech řeší příkazem <strong>TRAP</strong> a
v&nbsp;některých moderních programovacích jazycích konstrukcí
<strong>try-catch</strong>. Při vzniku chyby se automaticky naplní proměnné
<strong>ERL</strong> a <strong>ERR</strong> na číslo řádku a číslo (kód)
chyby:</p>

<pre>
1 REM *****************************
2 REM Ukázka reakce na chybu
3 REM 
4 REM Uprava pro GW-BASIC
5 REM 
6 REM *****************************
7 REM
8 REM
9 REM
10 <strong>ON ERROR GOTO 1000</strong>
11 A = 10
12 PRINT A/0
999 END 
1000 REM
1001 REM error handler
1002 REM
1003 PRINT "Chyba na radku:"; <strong>ERL</strong>
1004 PRINT "Kod chyby:"; <strong>ERR</strong>
1005 RESUME NEXT
</pre>

<p>Zajímavější je reakce na &bdquo;tik&ldquo; časovače, přičemž frekvence tiků
je zadána v&nbsp;sekundách (časovač je navíc nutné povolit).
V&nbsp;následujícím programu je handler na řádku 1000 volán pravidelně každou
sekundu:</p>

<pre>
1 REM *****************************
2 REM Ukázka handleru udalosti
3 REM 
4 REM Uprava pro GW-BASIC
5 REM 
6 REM *****************************
7 REM
8 REM
9 REM
10 <strong>ON TIMER(1) GOSUB 1000</strong>
20 PRINT "Waiting for timer ticks..."
30 <strong>TIMER ON</strong>
40 GOTO 30
999 END 
1000 REM
1001 REM handler
1002 REM
1003 PRINT "tick"
1004 RETURN
</pre>

<p>Ve <i>Small Basicu</i> je systém událostí řešen &ndash; alespoň podle mého
názoru &ndash; mnohem elegantnějším způsobem. Pro některé typy objektů
(například pro grafickou obrazovku, časovač atd.) jsou totiž připraveny
atributy, kterým lze přiřadit podprogram (subrutinu), která se má při vzniku
dané události zavolat. Povolení zpracování událostí a současně i specifikace
<i>handleru</i> události je tedy provedena jediným přiřazením, jak ostatně
uvidíme v&nbsp;následujících dvou kapitolách na demonstračních příkladech.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Reakce na stisk tlačítka myši nebo na stisk klávesy</h2>

<p></p>

<pre>
<i>' Události</i>
&nbsp;
GraphicsWindow.MouseDown = MouseClick
&nbsp;
<strong>Sub</strong> MouseClick
    x = GraphicsWindow.MouseX
    y = GraphicsWindow.MouseY
    TextWindow.WriteLine("x: " + x + "   y: " +y)
<strong>EndSub</strong>
</pre>

<pre>
<i>' Události</i>
&nbsp;
GraphicsWindow.KeyDown = OnKeyDown
&nbsp;
<strong>Sub</strong> OnKeyDown
    key = GraphicsWindow.LastKey
    TextWindow.WriteLine(key)
<strong>EndSub</strong>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Reakce na tik časovače</h2>

<p>Často se setkáme s&nbsp;požadavkem nějakým způsobem reagovat na
&bdquo;tiknutí&ldquo; časovače. Časovač je ve <i>Small Basicu</i> představován
objektem <strong>Timer</strong>, který má dva důležité atributy. Atributem
<strong>Interval</strong> se určuje interval mezi jednotlivými tiky časovače,
přičemž daná hodnota je specifikována v&nbsp;milisekundách. A druhý atribut,
který se jmenuje <strong>Tick</strong> slouží k&nbsp;registraci podprogramu,
který bude pravidelně volán. Následující demonstrační příklad zobrazí aktuální
datum a čas a obnoví tuto informaci přibližně každou sekundu:</p>

<pre>
<i>' Události</i>
&nbsp;
Timer.Interval = 1000
Timer.Tick = OnTick
&nbsp;
<strong>Sub</strong> OnTick
    TextWindow.WriteLine(Clock.Date + " " + Clock.Time)
<strong>EndSub</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: časovač je možné v&nbsp;případě potřeby
i pozastavit. <i>Small Basic</i> však umožňuje používat pouze jediný časovač,
neboť objekt <strong>Timer</strong> nelze naklonovat.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Ladění programů v&nbsp;prostředí Small Basicu</h2>

<p></p>

<pre>
</pre>

*** image ***
<p><i>Obrázek 23: </i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

*** image ***
<p><i>Obrázek 24: </i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Alternativní projekt s&nbsp;licencí GPL: Basic-256</h2>

<p>Pod pojmem &bdquo;BASIC&ldquo; se může skrývat široké množství
programovacích jazyků, které mnohdy nemají s&nbsp;původním prakticky
nestrukturovaným BASICem známým z&nbsp;dob osmibitových mikropočítačů prakticky
nic společného. Mnohdy právě naopak: některé moderní jazyky, v&nbsp;jejichž
názvu se vyskytuje slovo &bdquo;BASIC&ldquo; jsou plně strukturované, některé
podporují objektově orientované programování (založené buď na třídách či na
posílání zpráv objektům), mnohé BASICy nabízí uživatelům i pokročilé datové
typy, jako jsou asociativní pole atd. A právě takovým poměrně moderním
dialektem BASICu je <i>Basic-256</i> zmíněný v&nbsp;tomto článku. Důvod, proč
je zde tato aplikace zmíněna je jednoduchý &ndash; v&nbsp;<i>Basic-256</i> se
velmi snadno pracuje s&nbsp;grafikou, což je samozřejmě pro potřeby výuky
ideální (je například velmi snadné vytvořit si programovou pomůcku pro výuku
matematiky či geometrie). Může se tak jednat o poměrně zajímavou alternativu
k&nbsp;výše popsanému <i>Small Basicu</i> (a to i díky použité licenci).</p>

<a href="https://www.root.cz/obrazek/417500/"><img src="https://i.iinfo.cz/images/100/pygame-zero-1-15-prev.png" class="image-417500" alt="&#160;" width="343" height="270" /></a>
<p><i>Obrázek 25: Informace o projektu Basic-256.</i></p>

<p>Jak již bylo napsáno v&nbsp;předchozím odstavci, <i>Basic-256</i> se od
klasické školy <i>BASICu</i> v&nbsp;mnoha ohledech odklání, což je ostatně jen
dobře. Jedná se o interpret doplněný o jednoduché vývojové prostředí
s&nbsp;grafickým uživatelským rozhraním, který byl navržen s&nbsp;ohledem na
to, aby se tento dialekt mohl použít při výuce programování, především na
středních školách (podle mého názoru se však hodí spíše na základní školy).
Tomu odpovídá jak jednoduchost a přehlednost vlastního vývojového prostředí,
tak i sémantika jazyka, která samozřejmě podporuje strukturované programování.
Na Internetu je dostupná cca 300stránková učebnice programování, v&nbsp;níž
jsou použity příklady naprogramované právě v&nbsp;<i>Basicu-256</i>. Nejedná se
však v&nbsp;žádném případě o učebnici, která by pouze popisovala syntaxi tohoto
jazyka, právě naopak &ndash; ukázána je například práce se základními datovými
strukturami (seznamy, zásobníkem, frontou) spolu s&nbsp;vysvětlením, jak jsou
tyto datové struktury a operace nad nimi interně implementovány. Kromě toho lze
v&nbsp;této učebnici najít i mnohé základní algoritmy, například řazení prvků
v&nbsp;posloupnosti.</p>

<a href="https://www.root.cz/obrazek/417501/"><img src="https://i.iinfo.cz/images/100/pygame-zero-1-16-prev.png" class="image-417501" alt="&#160;" width="343" height="270" /></a>
<p><i>Obrázek 26: Uživatelské rozhraní je velmi jednoduše ovladatelné, což je
pro tuto skupinu aplikací základní požadavek.</i></p>

<p><div class="rs-tip-major">Poznámka: zajímavé je, že i tento dialekt BASICu
vznikl na základě již minule zmíněného článku <a
href="https://web.archive.org/web/20130918213750/http://www.salon.com/2006/09/14/basic_2/singleton/">Why
Johnny can’t code</a>. To je další pojítko mezi <i>Basicem-256</i> na straně
jedné a <i>Small Basicem</i> na straně druhé.</div></p>

<a href="https://www.root.cz/obrazek/417502/"><img src="https://i.iinfo.cz/images/100/pygame-zero-1-17-prev.png" class="image-417502" alt="&#160;" width="343" height="270" /></a>
<p><i>Obrázek 27: Do bitmapy je možné vykreslit mřížku, což je velmi užitečné,
neboť se tak zvýrazní souřadnicový systém tvořící základ prakticky všech
grafických knihoven (minimálně těch 2D).</i></p>

<p>V&nbsp;<i>Basicu-256</i> jsou k&nbsp;dispozici prakticky všechny základní
příkazy určené pro tvorbu strukturovaných programů složených z&nbsp;funkcí,
subrutin (podprogramů), programových smyček a rozvětvení. Nalezneme zde i
typicky BASICovou smyčku typu <strong>For-Next</strong>, která je podle mého
názoru čitelnější, než podobně koncipovaná smyčka používaná v&nbsp;jazycích C,
C++, Java či JavaScript. Podívejme se jen ve stručnosti na základní
příklady:</p>

<pre>
i = 1
<strong>while</strong> i&lt;1000
   print i
   i=i*2
<strong>end while</strong>
&nbsp;
1
2
4
8
16
32
64
128
256
512
</pre>

<p>Specifikace kroku smyčky:</p>

<pre>
<strong>for</strong> i=10 <strong>to</strong> 0 <strong>step</strong> -2
   print i
<strong>next</strong> i
&nbsp;
10
8
6
4
2
0
</pre>

<p>Smyčka s&nbsp;testem na konci:</p>

<pre>
x=10
<strong>do</strong>
   print x
   x=x/2
<strong>until</strong> x&lt;0.1
&nbsp;
10
5
2.5
1.25
0.625
0.3125
0.15625
</pre>

<p>Strukturovaný rozeskok resp.&nbsp;rozvětvení:</p>

<pre>
<strong>for</strong> i=0 <strong>to</strong> 20
   print i;
   <strong>if</strong> i % 2 =0 <strong>then</strong>
      print " sude"
   <strong>else</strong>
      print " liche"
   <strong>endif</strong>
<strong>next</strong> i
&nbsp;
Zaciname
0 sude
1 liche
2 sude
3 liche
4 sude
5 liche
6 sude
7 liche
8 sude
9 liche
10 sude
11 liche
12 sude
13 liche
14 sude
15 liche
16 sude
17 liche
18 sude
19 liche
20 sude
</pre>

<a href="https://www.root.cz/obrazek/417503/"><img src="https://i.iinfo.cz/images/100/pygame-zero-1-18-prev.png" class="image-417503" alt="&#160;" width="351" height="270" /></a>
<p><i>Obrázek 28: Práce s&nbsp;rastrovou grafikou je v&nbsp;Basicu-256 skutečně
snadná.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: seznam klíčových slov Atari BASICu</h2>

<p>V&nbsp;úvodních kapitolách jsme se zmínili o tom, že zavedením objektů se
počet klíčových slov a příkazů <i>Small Basicu</i> podařilo zredukovat
prakticky na minimum &ndash; 14 příkazů a 2 operátory. Jen pro zajímavost si
uveďme klíčová slova (což jsou příkazy a vestavěné funkce) <i>Atari BASICu</i>
implementovaného v&nbsp;pouhých osmi kilobajtech ROM. Všechna tato klíčová
slova jsou vytvořena v&nbsp;globálním jmenném prostoru a mnohá z&nbsp;nich
nejsou kompatibilní s&nbsp;dalšími BASICy &ndash; v&nbsp;tom nejhorším případě
mají dokonce zcela odlišný význam (příkladem je příkaz <strong>CLR</strong>,
který v&nbsp;jiných BASICech maže obrazovku):</p>

<table>
<tr><th>Klíčové slovo</th><th>Typ/oblast</th><th>Stručný popis</th></tr>
<tr><td>BYE     </td><td>control </td><td>switch to built-in Self Test program                           </td></tr>
<tr><td>CLOAD   </td><td>I/O     </td><td>loads tokenized program from cassette tape (see CSAVE, LOAD)   </td></tr>
<tr><td>CLOSE   </td><td>I/O     </td><td>closes a given I/O channel with flush (see OPEN, PUT, GET)     </td></tr>
<tr><td>CLR     </td><td>memory  </td><td>clears variables from memory and stack as well                 </td></tr>
<tr><td>COLOR   </td><td>graphics</td><td>select/chooses logical color value for drawing                 </td></tr>
<tr><td>CONT    </td><td>control </td><td>continues program execution after STOP statement               </td></tr>
<tr><td>CSAVE   </td><td>I/O     </td><td>saves tokenized program into cassette tape (see CLOAD, SAVE)   </td></tr>
<tr><td>DATA    </td><td>memory  </td><td>used to store data as list of values (numeric, string)         </td></tr>
<tr><td>DEG     </td><td>control </td><td>switches internal state to enable degrees for trig.functions   </td></tr>
<tr><td>DIM     </td><td>memory  </td><td>defines and allocates an array or matrix                       </td></tr>
<tr><td>DOS     </td><td>control </td><td>switch to DOS (Disk Operating System) if available             </td></tr>
<tr><td>DRAWTO  </td><td>graphics</td><td>draws a line from current position (PLOT) to given coordinates </td></tr>
<tr><td>END     </td><td>control </td><td>finishes execution of the program and closes open I/O channels </td></tr>
<tr><td>ENTER   </td><td>I/O     </td><td>loads and merges into memory a plain text program (in ATASCII) </td></tr>
<tr><td>FOR     </td><td>control </td><td>beginning of a for loop (see TO, STEP, and NEXT)               </td></tr>
<tr><td>GET     </td><td>I/O     </td><td>reads one byte from a given I/O channel (see PUT)              </td></tr>
<tr><td>GOSUB   </td><td>control </td><td>jumps to a subroutine, put current line number onto stack      </td></tr>
<tr><td>GOTO    </td><td>control </td><td>jumps to given program line (can be stored in variable)        </td></tr>
<tr><td>GO TO   </td><td>control </td><td>dtto                                                           </td></tr>
<tr><td>GRAPHICS</td><td>graphics</td><td>sets the specified graphics node, clear screen for modes &lt;16</td></tr>
<tr><td>IF      </td><td>control </td><td>evaluate the condition and executes next commands if true      </td></tr>
<tr><td>INPUT   </td><td>I/O     </td><td>read stream from specified I/O channel, converts to num/string </td></tr>
<tr><td>LET     </td><td>control </td><td>assigns a value to a named variable. Fully optional on Atari.  </td></tr>
<tr><td>LIST    </td><td>I/O     </td><td>lists the program to screen, printer, or any other device      </td></tr>
<tr><td>LOAD    </td><td>I/O     </td><td>loads a tokenized program from specified device (see SAVE)     </td></tr>
<tr><td>LOCATE  </td><td>graphics</td><td>read color or character code from specified coordinates        </td></tr>
<tr><td>LPRINT  </td><td>I/O     </td><td>prints program source code onto a printer (see PRINT)          </td></tr>
<tr><td>NEW     </td><td>control </td><td>erase program source code, erase all variables too             </td></tr>
<tr><td>NEXT    </td><td>control </td><td>next iteration of a for loop for specified variable (see FOR)  </td></tr>
<tr><td>NOTE    </td><td>I/O     </td><td>returns the current position on a given I/O channel (see POINT)</td></tr>
<tr><td>ON      </td><td>control </td><td>used together with GOTO statement to perform computed jump     </td></tr>
<tr><td>OPEN    </td><td>I/O     </td><td>initializes and open I/O channel (see CLOSE, PUT, GET)         </td></tr>
<tr><td>PLOT    </td><td>graphics</td><td>draws a point (pixel) at given coordinates (see DRAWTO)        </td></tr>
<tr><td>POINT   </td><td>I/O     </td><td>sets the current position on a given I/O channel (see NOTE)    </td></tr>
<tr><td>POKE    </td><td>memory  </td><td>writes one byte of data into memory location (see DPOKE, PEEK) </td></tr>
<tr><td>POP     </td><td>control </td><td>removes return address from the stack (see GOSUB, RETURN)      </td></tr>
<tr><td>POSITION</td><td>graphics</td><td>sets the position of the graphics cursor (see PLOT, DRAWTO)    </td></tr>
<tr><td>PRINT   </td><td>I/O     </td><td>writes text to an I/O channel or onto screen if not specified  </td></tr>
<tr><td>PUT     </td><td>I/O     </td><td>writer one byte from a given I/O channel (see GET)             </td></tr>
<tr><td>RAD     </td><td>control </td><td>switches internal state to enable radians for trig.functions   </td></tr>
<tr><td>READ    </td><td>memory  </td><td>reads data from DATA statement, increment internal DATA ptr.   </td></tr>
<tr><td>REM     </td><td>comment </td><td>used to create a comment in a program (rest of line is ignored)</td></tr>
<tr><td>RESTORE </td><td>memory  </td><td>sets the position where to read data from a DATA statement     </td></tr>
<tr><td>RETURN  </td><td>control </td><td>ends a subroutine, return to statement following GOSUB         </td></tr>
<tr><td>RUN     </td><td>control </td><td>starts execution of a program; can be started from device too  </td></tr>
<tr><td>SAVE    </td><td>I/O     </td><td>writes a tokenized program to device (see LOAD)                </td></tr>
<tr><td>SETCOLOR</td><td>graphics</td><td>maps a logical color to physical color: hue + level (see COLOR)</td></tr>
<tr><td>SOUND   </td><td>sound   </td><td>starts or stops playing a tone on a sound channel (see END)    </td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny <a
href="https://www.root.cz/clanky/small-basic-moderni-reinkarnace-basicu-urcena-pro-vyuku-programovani/">minule</a>
i dnes popsané demonstrační příklady určené pro Small Basic (a tudíž
nekompatibilní s&nbsp;žádným jiným BASICem) byly uloženy do Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Tyto příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez
nutnosti klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01_hello_world.bas</td><td>implementace programy typu "Hello, world!" ve Small Basicu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/01_hello_world.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/01_hello_world.bas</a></td></tr>
<tr><td> 2</td><td>02_string_variable.bas</td><td>základní manipulace s&nbsp;řetězci uloženými do proměnných</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/02_string_variable.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/02_string_variable.bas</a></td></tr>
<tr><td> 3</td><td>03_numeric_variables.bas</td><td>základní manipulace s&nbsp;numerickými hodnotami uloženými do proměnných</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/03_numeric_variables.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/03_numeric_variables.bas</a></td></tr>
<tr><td> 4</td><td>04_string_and_int.bas</td><td>kombinace řetězců a numerických hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/04_string_and_int.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/04_string_and_int.bas</a></td></tr>
<tr><td> 5</td><td>05_string_subtext.bas</td><td>získání podřetězce, využití tečkové notace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/05_string_subtext.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/05_string_subtext.bas</a></td></tr>
<tr><td> 6</td><td>06_input.bas</td><td>interaktivní vstup numerických údajů z&nbsp;konzole</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/06_input.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/06_input.bas</a></td></tr>
<tr><td> 7</td><td>07_if_then.bas</td><td>programová rozhodovací konstrukce <strong>if-then</strong> v&nbsp;základní podobě</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/07_if_then.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/07_if_then.bas</a></td></tr>
<tr><td> 8</td><td>08_if_then_else.bas</td><td>programová rozhodovací konstrukce <strong>if-then-else</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/08_if_then_else.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/08_if_then_else.bas</a></td></tr>
<tr><td> 9</td><td>09_if_elseif_then_else.bas</td><td>rozšíření <strong>if-then-else</strong> o větvi <strong>elseif</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/09_if_elseif_then_else.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/09_if_elseif_then_else.bas</a></td></tr>
<tr><td>10</td><td>10_nested_ifs.bas</td><td>vnořené bloky <strong>if-then</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/10_nested_ifs.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/10_nested_ifs.bas</a></td></tr>
<tr><td>11</td><td>11_for_next.bas</td><td>programová smyčka typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/11_for_next.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/11_for_next.bas</a></td></tr>
<tr><td>12</td><td>12_for_next_same_limits.bas</td><td>nastavení shodného horního i dolního limitu ve smyčce <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/12_for_next_same_limits.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/12_for_next_same_limits.bas</a></td></tr>
<tr><td>13</td><td>13_for_next_no_loop.bas</td><td>programová smyčka, jejíž tělo neproběhne ani jednou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/13_for_next_no_loop.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/13_for_next_no_loop.bas</a></td></tr>
<tr><td>14</td><td>14_for_next_downward.bas</td><td>nastavení záporného kroku smyčky typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/14_for_next_downward.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/14_for_next_downward.bas</a></td></tr>
<tr><td>15</td><td>15_for_next_step.bas</td><td>neceločíselný krok v&nbsp;programové smyčce typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/15_for_next_step.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/15_for_next_step.bas</a></td></tr>
<tr><td>16</td><td>16_for_next_variable_limit.bas</td><td>změna horního limitu programové smyčky typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/16_for_next_variable_limit.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/16_for_next_variable_limit.bas</a></td></tr>
<tr><td>17</td><td>17_for_next_variable_step.bas</td><td>průběžná modifikace kroku programové smyčky typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/17_for_next_variable_step.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/17_for_next_variable_step.bas</a></td></tr>
<tr><td>18</td><td>18_for_next_variable_step.bas</td><td>průběžná modifikace kroku programové smyčky typu <strong>for-next</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/18_for_next_variable_step.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/18_for_next_variable_step.bas</a></td></tr>
<tr><td>19</td><td>19_while.bas</td><td>standardní programová smyčka typu <strong>while</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/19_while.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/19_while.bas</a></td></tr>
<tr><td>20</td><td>20_while_never.bas</td><td>programová smyčka typu <strong>while</strong>, jejíž tělo neproběhne ani jednou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/20_while_never.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/20_while_never.bas</a></td></tr>
<tr><td>21</td><td>21_while_endless.bas</td><td>nekonečná programová smyčka</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/21_while_endless.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/21_while_endless.bas</a></td></tr>
<tr><td>22</td><td>22_GCD.bas</td><td>implementace algoritmu NSD realizovaná smyčkou typu <strong>while</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/22_GCD.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/22_GCD.bas</a></td></tr>
<tr><td>23</td><td>23_sub.bas</td><td>subrutiny/podprogramy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/23_sub.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/23_sub.bas</a></td></tr>
<tr><td>24</td><td>24_pi.bas</td><td>výpočet konstanty Pi založená na použití podprogramů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/24_pi.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/24_pi.bas</a></td></tr>
<tr><td>25</td><td>25_goto.bas</td><td>nestrukturovaný příkaz <strong>GOTO</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/25_goto.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/25_goto.bas</a></td></tr>
<tr><td>26</td><td>26_goto_GCD.bas</td><td>implementace algoritmu NSD realizovaná příkazy <strong>GOTO</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/26_goto_GCD.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/26_goto_GCD.bas</a></td></tr>
<tr><td>27</td><td>27_array.bas</td><td>pole ve Small Basicu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/27_array.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/27_array.bas</a></td></tr>
<tr><td>28</td><td>28_maps.bas</td><td>mapy (asociativní pole) ve Small Basicu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/28_maps.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/28_maps.bas</a></td></tr>
<tr><td>29</td><td>29_trap_1.bas</td><td>problémy Small Basicu, první část</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/29_trap_1.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/29_trap_1.bas</a></td></tr>
<tr><td>30</td><td>30_trap_2.bas</td><td>problémy Small Basicu, druhá část</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/30_trap_2.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/30_trap_2.bas</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td></td></tr>
<tr><td>31</td><td>31_text_window.bas</td><td>objekt typu <strong>TextWindow</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/31_text_window.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/31_text_window.bas</a></td></tr>
<tr><td>32</td><td>32_foreground_background.bas</td><td>nastavení barvy popředí a pozadí textového okna</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/32_foreground_background.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/32_foreground_background.bas</a></td></tr>
<tr><td>33</td><td>33_text_object.bas</td><td>objekt typu <strong>Text</strong> a některé jeho metody</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/33_text_object.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/33_text_object.bas</a></td></tr>
<tr><td>34</td><td>34_turtle_square.bas</td><td>želví grafika: vykreslení čtverce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/34_turtle_square.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/34_turtle_square.bas</a></td></tr>
<tr><td>35</td><td>35_turtle_star.bas</td><td>želví grafika: vykreslení hvězdy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/35_turtle_star.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/35_turtle_star.bas</a></td></tr>
<tr><td>36</td><td>36_turtle_hide_speed.bas</td><td>želví grafika: schování želvy, nastavení největší rychlosti kreslení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/36_turtle_hide_speed.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/36_turtle_hide_speed.bas</a></td></tr>
<tr><td>37</td><td>37_turtle_pen_up_pen_down.bas</td><td>želví grafika: spuštění a zvednutí kreslicího pera</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/37_turtle_pen_up_pen_down.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/37_turtle_pen_up_pen_down.bas</a></td></tr>
<tr><td>38</td><td>38_graphics_window.bas</td><td>objekt typu <strong>GraphicsWindow</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/38_graphics_window.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/38_graphics_window.bas</a></td></tr>
<tr><td>39</td><td>39_graphics_draw.bas</td><td>kreslení do grafického okna</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/39_graphics_draw.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/39_graphics_draw.bas</a></td></tr>
<tr><td>40</td><td>40_hex_colors.bas</td><td>nastavení barvy šesticí hexadecimálních číslic</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/40_hex_colors.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/40_hex_colors.bas</a></td></tr>
<tr><td>41</td><td>41_rgb_colors.bas</td><td>nastavení barvy smícháním trojice základních barev</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/41_rgb_colors.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/41_rgb_colors.bas</a></td></tr>
<tr><td>42</td><td>42_set_pixel.bas</td><td>vybarvení jednotlivých pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/42_set_pixel.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/42_set_pixel.bas</a></td></tr>
<tr><td>43</td><td>43_mouse_click_event.bas</td><td>událost: kliknutí tlačítkem myši</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/43_mouse_click_event.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/43_mouse_click_event.bas</a></td></tr>
<tr><td>44</td><td>44_key_down_event.bas</td><td>událost: stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/44_key_down_event.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/44_key_down_event.bas</a></td></tr>
<tr><td>45</td><td>45_timer_tick_event.bas</td><td>událost: tik časovače</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/45_timer_tick_event.bas">https://github.com/tisnik/8bit-fame/blob/master/Small%20Basic/45_timer_tick_event.bas</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránka projektu Small Basic<br />
<a href="https://smallbasic-publicwebsite.azurewebsites.net/">https://smallbasic-publicwebsite.azurewebsites.net/</a>
</li>

<li>List of Programs Made with Small Basic<br />
<a href="https://social.technet.microsoft.com/wiki/contents/articles/14013.list-of-programs-made-with-small-basic.aspx">https://social.technet.microsoft.com/wiki/contents/articles/14013.list-of-programs-made-with-small-basic.aspx</a>
</li>

<li>Expert to Expert: The Basics of SmallBasic<br />
<a href="https://channel9.msdn.com/blogs/charles/expert-to-expert-the-basics-of-smallbasic">https://channel9.msdn.com/blogs/charles/expert-to-expert-the-basics-of-smallbasic</a>
</li>

<li>The Developer’s Reference Guide to Small Basic<br />
<a href="https://social.technet.microsoft.com/wiki/contents/articles/16767.the-developers-reference-guide-to-small-basic.aspx">https://social.technet.microsoft.com/wiki/contents/articles/16767.the-developers-reference-guide-to-small-basic.aspx</a>
</li>

<li>Small Basic - Talking to Raspberry Pi<br />
<a href="https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-talking-to-raspberry-pi/ba-p/337844">https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-talking-to-raspberry-pi/ba-p/337844</a>
</li>

<li>Small Basic - Arduino<br />
<a href="https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-arduino/ba-p/337762">https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-arduino/ba-p/337762</a>
</li>

<li>Small Basic + micro:bit<br />
<a href="https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-micro-bit/ba-p/1968424">https://techcommunity.microsoft.com/t5/small-basic-blog/small-basic-micro-bit/ba-p/1968424</a>
</li>

<li>#1 Learn Small Basic Programming - Introduction<br />
<a href="https://www.youtube.com/watch?v=e_BaEPCa8OQ">https://www.youtube.com/watch?v=e_BaEPCa8OQ</a>
</li>

<li>#2 Learn Small Basic Programming - Input, Output &amp; Variables<br />
<a href="https://www.youtube.com/watch?v=VWekYLa33OI">https://www.youtube.com/watch?v=VWekYLa33OI</a>
</li>

<li>#3 Learn Small Basic Programming - String Concatenation<br />
<a href="https://www.youtube.com/watch?v=iWvIaOaT474">https://www.youtube.com/watch?v=iWvIaOaT474</a>
</li>

<li>Small Basic - The Programmer's Guide<br />
<a href="https://www.i-programmer.info/programming/other-languages/5196-small-basic-the-programmers-guide.html">https://www.i-programmer.info/programming/other-languages/5196-small-basic-the-programmers-guide.html</a>
</li>

<li>Rosetta Code: Category:Microsoft Small Basic<br />
<a href="https://rosettacode.org/wiki/Category:Microsoft_Small_Basic">https://rosettacode.org/wiki/Category:Microsoft_Small_Basic</a>
</li>

<li>Fifty Years of BASIC, the Programming Language That Made Computers Personal<br />
<a href="https://time.com/69316/basic/">https://time.com/69316/basic/</a>
</li>

<li>BBC BASIC i QBasic oslavují svá kulatá výročí<br />
<a href="https://www.root.cz/clanky/bbc-basic-i-qbasic-oslavuji-sva-kulata-vyroci/">https://www.root.cz/clanky/bbc-basic-i-qbasic-oslavuji-sva-kulata-vyroci/</a>
</li>

<li>What are the best BASIC-like programming languages?<br />
<a href="https://www.slant.co/topics/9807/~basic-like-programming-languages">https://www.slant.co/topics/9807/~basic-like-programming-languages</a>
</li>

<li>List of BASIC dialects<br />
<a href="https://en.wikipedia.org/wiki/List_of_BASIC_dialects">https://en.wikipedia.org/wiki/List_of_BASIC_dialects</a>
</li>

<li>GW-BASIC Documentation<br />
<a href="https://hwiegman.home.xs4all.nl/gwbasic.html">https://hwiegman.home.xs4all.nl/gwbasic.html</a>
</li>

<li>Microsoft Open-Sources GW-BASIC<br />
<a href="https://devblogs.microsoft.com/commandline/microsoft-open-sources-gw-basic/">https://devblogs.microsoft.com/commandline/microsoft-open-sources-gw-basic/</a>
</li>

<li>GW-BASIC na GitHubu<br />
<a href="https://github.com/microsoft/GW-BASIC">https://github.com/microsoft/GW-BASIC</a>
</li>

<li>Welcome to GW-BASIC<br />
<a href="http://www.antonis.de/qbebooks/gwbasman/">http://www.antonis.de/qbebooks/gwbasman/</a>
</li>

<li>GWBASIC User's Manual<br />
<a href="http://www.antonis.de/qbebooks/gwbasman/index2.html">http://www.antonis.de/qbebooks/gwbasman/index2.html</a>
</li>

<li>The basics of BASIC, the programming language of the 1980s<br />
<a href="https://www.youtube.com/watch?v=seM9SqTsRG4">https://www.youtube.com/watch?v=seM9SqTsRG4</a>
</li>

<li>GW-BASIC User's Guide<br />
<a href="https://hwiegman.home.xs4all.nl/gw-man/index.html">https://hwiegman.home.xs4all.nl/gw-man/index.html</a>
</li>

<li>PC-BASIC 1.2.14 documentation<br />
<a href="http://robhagemans.github.io/pcbasic/doc/1.2/">http://robhagemans.github.io/pcbasic/doc/1.2/</a>
</li>

<li>PEEK and POKE<br />
<a href="https://en.wikipedia.org/wiki/PEEK_and_POKE">https://en.wikipedia.org/wiki/PEEK_and_POKE</a>
</li>

<li>GW-BASIC | DRAW Statement (video na Youtube)<br />
<a href="https://www.youtube.com/watch?v=4I1CELY13M4">https://www.youtube.com/watch?v=4I1CELY13M4</a>
</li>

<li>Rozdíly mezi GW-BASIC a QBasicem<br />
<a href="https://hwiegman.home.xs4all.nl/extern/Differences%20Between%20GW-BASIC%20and%20QBasic.htm">https://hwiegman.home.xs4all.nl/extern/Differences%20Between%20GW-BASIC%20and%20QBasic.htm</a>
</li>

<li>GW-Basic Programs<br />
<a href="https://gwbasicprograms.blogspot.com/p/gw-basic-programs.html">https://gwbasicprograms.blogspot.com/p/gw-basic-programs.html</a>
</li>

<li>GW-BASIC Resource<br />
<a href="https://gw-basic.netlify.app/">https://gw-basic.netlify.app/</a>
</li>

<li>A page about GWBASIC Games &amp; Other Programs<br />
<a href="http://peyre.x10.mx/GWBASIC/">http://peyre.x10.mx/GWBASIC/</a>
</li>

<li>Basic BASIC, 2nd Edition, James S. Coan<br />
<a href="https://drive.google.com/uc?export=download&amp;id=1Z12L7SO_gfNg3Ma_0eH2_Kz15YM-9dHl">https://drive.google.com/uc?export=download&amp;id=1Z12L7SO_gfNg3Ma_0eH2_Kz15YM-9dHl</a>
</li>

<li>Advanced BASIC, James S. Coan<br />
<a href="https://drive.google.com/uc?export=download&amp;id=1JafSpV_BLylWHMd16rDPorwv9wV9bLcy">https://drive.google.com/uc?export=download&amp;id=1JafSpV_BLylWHMd16rDPorwv9wV9bLcy</a>
</li>

<li>Structured BASIC, 2nd Edition, James F. Clark (naskenovaná kniha)<br />
<a href="https://drive.google.com/uc?export=download&amp;id=1pT8y-8yJYS_SqvxF0fBHm6S-dlAt-Uy2">https://drive.google.com/uc?export=download&amp;id=1pT8y-8yJYS_SqvxF0fBHm6S-dlAt-Uy2</a>
</li>

<li>Last Book of GW-Basic<br />
<a href="https://www.geocities.ws/joseph_sixpack/btoc.html">https://www.geocities.ws/joseph_sixpack/btoc.html</a>
</li>

<li>SCIENTIFIC PROGRAMS WRITTEN IN BASIC (for PCs)<br />
<a href="https://web.archive.org/web/20160323064356/http://www.scn.org/~bh162/basic_programs.html">https://web.archive.org/web/20160323064356/http://www.scn.org/~bh162/basic_programs.html</a>
</li>

<li>Why I love programming on FreeDOS with GW-BASIC<br />
<a href="https://opensource.com/article/21/6/freedos-gw-basic">https://opensource.com/article/21/6/freedos-gw-basic</a>
</li>

<li>Quite BASIC (web-based classic BASIC online programming environmen)<br />
<a href="http://www.quitebasic.com/">http://www.quitebasic.com/</a>
</li>

<li>GFA-BASIC<br />
<a href="http://sites.google.com/site/gfabasic16/">http://sites.google.com/site/gfabasic16/</a>
</li>

<li>E-mail od tvůrce GW-Basicu<br />
<a href="http://www.classiccmp.org/pipermail/cctech/2005-April/042999.html">http://www.classiccmp.org/pipermail/cctech/2005-April/042999.html</a>
</li>

<li>General Electric GE-400<br />
<a href="http://www.feb-patrimoine.com/PROJET/ge400/ge-400.htm">http://www.feb-patrimoine.com/PROJET/ge400/ge-400.htm</a>
</li>

<li>GE-400 Time-sharing information systems: <br />
<a href="http://www.computerhistory.org/collections/accession/102646147">http://www.computerhistory.org/collections/accession/102646147</a>
</li>

<li>A brief history of the development of BASIC (pravděpodobně již nefunkční odkaz)<br />
<a href="http://www.phys.uu.nl/~bergmann/history.html">http://www.phys.uu.nl/~bergmann/history.html</a>
</li>

<li>History of BASIC (PDF)<br />
<a href="http://www.q7basic.org/History%20of%20BASIC.pdf">http://www.q7basic.org/History%20of%20BASIC.pdf</a>
</li>

<li>Dartmouth College Computation Center. 1964.-The original Dartmouth BASIC manual<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf</a>
</li>

<li>The Original BASIC<br />
<a href="http://www.truebasic.com/">http://www.truebasic.com/</a>
</li>

<li>BASIC - Beginners All-purpose Symbolic Instruction Code<br />
<a href="http://hopl.murdoch.edu.au/showlanguage.prx?exp=176">http://hopl.murdoch.edu.au/showlanguage.prx?exp=176</a>
</li>

<li>Dartmouth Time Sharing System<br />
<a href="http://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System">http://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System</a>
</li>

<li>General Electric (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/General_Electric">http://en.wikipedia.org/wiki/General_Electric</a>
</li>

<li>GE 225 vs. IBM 1401<br />
<a href="http://ed-thelen.org/GE225-IBM1401.html">http://ed-thelen.org/GE225-IBM1401.html</a>
</li>

<li>A GE-225 is found<br />
<a href="http://ed-thelen.org/comp-hist/GE225.html">http://ed-thelen.org/comp-hist/GE225.html</a>
</li>

<li>G.E. 200 Series Computers<br />
<a href="http://www.smecc.org/g_e__200_series_computers.htm">http://www.smecc.org/g_e__200_series_computers.htm</a>
</li>

<li>DTSS - Dartmouth Time Sharing System<br />
<a href="http://dtss.dartmouth.edu/index.php">http://dtss.dartmouth.edu/index.php</a>
</li>

<li>John G. Kemeny: BASIC and DTSS: Everyone a Programmer<br />
<a href="http://dtss.dartmouth.edu/everyoneaprogrammer.php">http://dtss.dartmouth.edu/everyoneaprogrammer.php</a>
</li>

<li>GE-200 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-200_series">http://en.wikipedia.org/wiki/GE-200_series</a>
</li>

<li>GE-400 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-400_series">http://en.wikipedia.org/wiki/GE-400_series</a>
</li>

<li>GE-600 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-600_series">http://en.wikipedia.org/wiki/GE-600_series</a>
</li>

<li>ZX Basic Manual<br />
<a href="http://www.worldofspectrum.org/ZXBasicManual/">http://www.worldofspectrum.org/ZXBasicManual/</a>
</li>

<li>ZX81 BASIC Programming<br />
<a href="http://www.worldofspectrum.org/ZX81BasicProgramming/">http://www.worldofspectrum.org/ZX81BasicProgramming/</a>
</li>

<li>Sinclair BASIC History<br />
<a href="http://scratchpad.wikia.com/wiki/Sinclair_BASIC_History">http://scratchpad.wikia.com/wiki/Sinclair_BASIC_History</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Sinclair BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Sinclair_BASIC">http://en.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Beta_BASIC">http://en.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Beta_BASIC">http://cs.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>BETA BASIC NEWSLETTER No 8<br />
<a href="http://spectrum128.ru/help/BetaBasicNewsletter8.pdf">http://spectrum128.ru/help/BetaBasicNewsletter8.pdf</a>
</li>

<li>R. T. RUSSELL: The home of BBC BASIC<br />
<a href="http://www.rtrussell.co.uk/">http://www.rtrussell.co.uk/</a>
</li>

<li>R. T. RUSSELL: A History of BBC BASIC<br />
<a href="http://www.cix.co.uk/~rrussell/bbcbasic/history.html">http://www.cix.co.uk/~rrussell/bbcbasic/history.html</a>
</li>

<li>SuperBASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/SuperBASIC">http://en.wikipedia.org/wiki/SuperBASIC</a>
</li>

<li>SuperBASIC (Wikipedia CZ)<br />
<a href="http://en.wikipedia.org/wiki/SuperBASIC">http://en.wikipedia.org/wiki/SuperBASIC</a>
</li>

<li>Laser Basic/Laser Compiler<br />
<a href="http://www.sincuser.f9.co.uk/049/laser.htm">http://www.sincuser.f9.co.uk/049/laser.htm</a>
</li>

<li>Laser BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Laser_BASIC">http://cs.wikipedia.org/wiki/Laser_BASIC</a>
</li>

<li>BBC BASIC<br />
<a href="http://www.bbcbasic.co.uk/bbcbasic.html">http://www.bbcbasic.co.uk/bbcbasic.html</a>
</li>

<li>BBC BASIC<br />
<a href="http://mdfs.net/Software/BBCBasic/">http://mdfs.net/Software/BBCBasic/</a>
</li>

<li>BBC BASIC (Z80) for the ZX Spectrum<br />
<a href="http://mdfs.net/Software/BBCBasic/Spectrum/">http://mdfs.net/Software/BBCBasic/Spectrum/</a>
</li>

<li>BBC BASIC (Wikipedia CZ)<br />
<a href="http://en.wikipedia.org/wiki/BBC_BASIC">http://en.wikipedia.org/wiki/BBC_BASIC</a>
</li>

<li>BeebWiki &ndash; 8-bit Acorn Computer Wiky<br />
<a href="http://beebwiki.jonripley.com/Main_Page">http://beebwiki.jonripley.com/Main_Page</a>
</li>

<li>Porovnání osmibitů<br />
<a href="http://porovnani8bitu.spaces.live.com/">http://porovnani8bitu.spaces.live.com/</a>
</li>

<li>Rosetta Code &ndash; Main Page<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Rosetta Code &ndash; Category Basic<br />
<a href="http://rosettacode.org/wiki/Category:BASIC">http://rosettacode.org/wiki/Category:BASIC</a>
</li>

<li>QBasicJedi<br />
<a href="http://www.freewebs.com/qbasicjedi/">http://www.freewebs.com/qbasicjedi/</a>
</li>

<li>QBasic/QuickBasic Downloads<br />
<a href="http://www.freewebs.com/qbasicjedi/qbdownloads.html">http://www.freewebs.com/qbasicjedi/qbdownloads.html</a>
</li>

<li>QuickBASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/QuickBASIC">http://cs.wikipedia.org/wiki/QuickBASIC</a>
</li>

<li>QBasic.com<br />
<a href="http://www.qbasic.com/">http://www.qbasic.com/</a>
</li>

<li>QBasic (Wikipedia)<br />
<a href="http://cs.wikipedia.org/wiki/QBasic">http://cs.wikipedia.org/wiki/QBasic</a>
</li>

<li>Dialling with QBASIC<br />
<a href="http://www.mysundial.ca/tsp/qbasic.html">http://www.mysundial.ca/tsp/qbasic.html</a>
</li>

<li>BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/BASIC">http://en.wikipedia.org/wiki/BASIC</a>
</li>

<li>BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/BASIC">http://cs.wikipedia.org/wiki/BASIC</a>
</li>

<li>Turbo BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Turbo_BASIC">http://cs.wikipedia.org/wiki/Turbo_BASIC</a>
</li>

<li>More BASIC Computer Games<br />
<a href="http://www.atariarchives.org/morebasicgames/">http://www.atariarchives.org/morebasicgames/</a>
</li>

<li>How to build an interpreter in Java, Part 1: The BASICs<br />
<a href="http://www.javaworld.com/jw-05-1997/jw-05-indepth.html">http://www.javaworld.com/jw-05-1997/jw-05-indepth.html</a>
</li>

<li>INTEGER BASIC Reference<br />
<a href="http://www.landsnail.com/a2ref2.htm">http://www.landsnail.com/a2ref2.htm</a>
</li>

<li>APPLESOFT Reference<br />
<a href="http://www.landsnail.com/a2ref.htm">http://www.landsnail.com/a2ref.htm</a>
</li>

<li>Applesoft Lite: Applesoft BASIC for the Replica-1<br />
<a href="http://cowgod.org/replica1/applesoft/">http://cowgod.org/replica1/applesoft/</a>
</li>

<li>Simons' BASIC<br />
<a href="http://en.wikipedia.org/wiki/Simons'_BASIC">http://en.wikipedia.org/wiki/Simons'_BASIC</a>
</li>

<li>Simon's Basic<br />
<a href="http://www.lemon64.com/?mainurl=http%3A//www.lemon64.com/museum/list.php%3Flineoffset%3D54%26genre%3Dmanualmisc">http://www.lemon64.com/?mainurl=http%3A//www.lemon64.com/museum/list.php%3Flineoffset%3D54%26genre%3Dmanualmisc</a>
</li>

<li>BASIC<br />
<a href="http://www.c64-wiki.com/index.php/BASIC">http://www.c64-wiki.com/index.php/BASIC</a>
</li>

<li>C64 Wiki: Simons Basic<br />
<a href="http://www.c64-wiki.de/index.php/Simons_Basic">http://www.c64-wiki.de/index.php/Simons_Basic</a>
</li>

<li>Simons' Basic (evaluation)<br />
<a href="http://www.atarimagazines.com/creative/v9n11/60_Simons_Basic.php">http://www.atarimagazines.com/creative/v9n11/60_Simons_Basic.php</a>
</li>

<li>Bill Gates' Personal Easter Eggs in 8 Bit BASIC
<a href="http://www.pagetable.com/?p=43">http://www.pagetable.com/?p=43</a>
</li>

<li>Třicet let od vydání revolučního Turbo Pascalu 5.5<br />
<a href="https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/">https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/</a>
</li>

<li>Let's make a small and simple GW-BASIC program!<br />
<a href="https://www.youtube.com/watch?v=OyPUn74nj-s">https://www.youtube.com/watch?v=OyPUn74nj-s</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

