<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Zvuky a hudba na ZX Spectru</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Zvuky a hudba na ZX Spectru</a></p>
<p><a href="#k02">2. Beeper na ZX Spectru</a></p>
<p><a href="#k03">3. Využití subrutiny v&nbsp;ROM s&nbsp;implementací příkazu <strong>BEEP</strong></a></p>
<p><a href="#k04">4. Úplný zdrojový kód dnešního prvního demonstračního příkladu</a></p>
<p><a href="#k05">5. Přehrání celé stupnice</a></p>
<p><a href="#k06">6. Úplný zdrojový kód dnešního druhého demonstračního příkladu</a></p>
<p><a href="#k07">7. Přímé programové ovládání beeperu</a></p>
<p><a href="#k08">8. Úplný zdrojový kód dnešního třetího demonstračního příkladu</a></p>
<p><a href="#k09">9. Vliv přerušení na přesnost přehrávaného tónu</a></p>
<p><a href="#k10">10. Zakázání přerušení při přehrávání</a></p>
<p><a href="#k11">11. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</a></p>
<p><a href="#k12">12. Vizualizace frekvence přehrávání změnou okraje v&nbsp;reálném čase</a></p>
<p><a href="#k13">*** 13. Pruhy na okraji obrazovky při povolení či zákazu přerušení</a></p>
<p><a href="#k14">14. Zdrojové kódy pátého a šestého příkladu</a></p>
<p><a href="#k15">*** 15. Skutečné možnosti beeperu &ndash; PWM, vícehlasá hudba</a></p>
<p><a href="#k16">*** 16. Rozšíření ZX Spectra o další zvukové subsystémy</a></p>
<p><a href="#k17">17. Obsah navazujícího článku</a></p>
<p><a href="#k18">18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Zvuky a hudba na ZX Spectru</h2>

<p>Prakticky každý osobní počítač je v&nbsp;současnosti vybaven zvukovým
výstupem. Elektronický obvod, který se stará o vytváření zvuků a hudby je dnes
buď přímo součástí čipové sady základní desky nebo je v&nbsp;počítači
nainstalována zvuková karta určená pro interní či (méně často) externí
sběrnici. Cesta, která vedla od prvních programem či jednoduchým
multivibrátorem řízených reproduktorů (ZX Spectrum, IBM PC XT) k&nbsp;dnešním
výkonným zvukovým čipům umožňujícím tvorbu prostorových několikakanálových
zvuků a hudby založené na wavetable syntéze, byla poměrně dlouhá a především
zajímavá.</p>

<a href="http://i.iinfo.cz/images/23/69games8-20.png"><img src="http://i.iinfo.cz/images/23/69games8-20-prev.png" width="370" height="243" alt=" " /></a>
<p><i>Obrázek 1: První úspěšnou herní konzolí bylo Atari 2600 vybavené
grafickým a současně i zvukovým čipem TIA. Interně se zvuk generoval sérií
posuvných registrů se zpětnou vazbou.</i></p>

<p>Tak jako v&nbsp;případě grafických subsystémů počítačů, i pro tvorbu zvuků a
hudby zkoušeli návrháři čipů používat různé postupy a mnohdy tak vznikly zcela
unikátní obvody, které se později staly legendami. Mezi tyto čipy patří
například <i>SID</i> (<i>Sound Interface Device</i>) firmy Commodore,
<i>AY-3–8910/8912/8913</i> firmy General Instruments (později jej vyráběla i
firma Yamaha pod označením <i>YM2149</i>) ke kterému se ještě vrátíme,
<i>POKEY</i> firmy Atari, <i>PAULA</i> firmy Commodore či čipy OPL2 (<i>YM
3812</i>) a OPL3 (<i>YMF 262</i>) vyráběné firmou Yamaha. Každý z&nbsp;těchto
čipů je založen na odlišném způsobu vytváření hudby a jimi vytvářený zvuk je
(snad s&nbsp;výjimkou čipu PAULA) velmi charakteristický a originální.</p>

<img src="http://i.iinfo.cz/images/549/7712.jpg" width="270" height="123" alt="&#160;" />
<p><i>Obrázek 2: Zvukový čip AY-3-8910 ve čtyřicetipinovém pouzdře DIL
(originál od firmy General Instrument)</i></p>

<p>Některé osmibitové domácí počítače, například slavné <i>ZX Spectrum</i>,
byly vybaveny pouze velmi jednoduchým zvukovým rozhraním &ndash; reproduktorem
zapojeným přes zesilovač na logický (dvoustavový) výstup z&nbsp;mikroprocesoru
či jiného podpůrného obvodu (například multivibrátoru, v&nbsp;ZX Spectru se
jedná o čip ULA). Na reproduktor byl posílán obdélníkový signál u nějž bylo
možné programově měnit jeho střídu (poměr mezi logickým stavem jedna a nula),
ovšem nikoli amplitudu, což samozřejmě znamenalo, že výsledné zvuky získaly
charakteristické a snadno rozpoznatelné zabarvení.</p>

<a href="https://www.root.cz/obrazek/447489/"><img src="https://i.iinfo.cz/images/666/opl2-3-prev.jpg" class="image-447489" alt="&#160;" width="332" height="270" /></a>
<p><i>Obrázek 3: Složitější varianta COVOXu (osmibitový D/A převodník), která
zachovává průchozí paralelní port.</i></p>

<p>Někteří zkušení autoři byli kupodivu schopni i za těchto velmi skromných
podmínek vyprodukovat poměrně zajímavou hudbu, dokonce bylo možné rychlou
změnou přehrávaných frekvencí simulovat polyfonii či přehrávat samplované zvuky
(ve své podstatě simulovaly jednobitový digitálně-analogový převodník). Kromě
tvůrců her se například jednalo o autory Buzzcocks či Freshies, kteří použili
hudbu generovanou ZX Spectrem při tvorbě svých alb. Podobný princip tvorby
zvuků byl později použit i u osobního počítače IBM PC pod názvem PC-Speaker
(též známého jako squeezer, beeper atd.).</p>

<img src="https://i.iinfo.cz/images/666/opl2-4.png" class="image-447490" alt="&#160;" width="435" height="313" />
<p><i>Obrázek 4: Zvuková karta Adlib určená do osmibitové varianty sběrnice ISA
(PC BUS).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Beeper na ZX Spectru</h2>

<p><i>&bdquo;Who needs a SID when you have a Z80?&ldquo;</i></p>

<p>Zvukový výstup na původním ZX Spectru 48k je realizován tím nejsnadnějším a
taktéž nejlevnějším možným způsobem &ndash; binární výstup z&nbsp;pinu číslo 28
zákaznického obvodu ULA je přes zesilovač připojen k&nbsp;internímu
reproduktoru ZX Spectra a současně je přes oddělovací kondenzátor přiveden i na
konektor EAR, který je možné připojit k&nbsp;vnějšímu zesilovači a dále
zpracovat. Schéma zapojení je naznačeno na pátém obrázku:</p>

*** image ***
<p><i>Obrázek 5: Jednobitový zvukový výstup je realizován přes pin 28
zákaznického obvodu ULA.</i></p>

<p>A jak je ovládána logická úroveň výše zmíněného pinu 28? Je to snadné
&ndash; jedná se o hodnotu pátého bitu (v&nbsp;případě, že bity počítáme od
jedničky) osmibitové hodnoty zapsané na port 0xfe, který již dobře známe,
protože čtením tohoto portu se zjišťuje stav stisku kláves. ZX Spectrum je
interně skutečně velmi jednoduché, protože prakticky všechny vstupně/výstupní
operace provádíme přes tento jediný port. Programátor má naprostou svobodu
v&nbsp;tom, kdy a jakou logickou hodnotu na &bdquo;zvukový&ldquo; pin pošle,
takže je možné realizovat i velmi sofistikované přehrávací rutiny (které se
paradoxně špatně programují pro &bdquo;skutečné&ldquo; zvukové čipy). Na druhou
stranu je však nutné vše pečlivě načasovat, přičemž každé přerušení může
přehrávání zvuku narušit, což ostatně uvidíme v&nbsp;dalším textu. Ostatně
právě proto je poměrně složité realizovat hudbu společně s&nbsp;vykreslovacími
subrutinami u her.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Využití subrutiny v&nbsp;ROM s&nbsp;implementací příkazu <strong>BEEP</strong></h2>

<p>BASIC u ZX Spectra obsahuje i příkaz <strong>BEEP</strong>, který slouží pro
přehrání zvuku o zvolené výšce trvající určitou dobu. Tento příkaz akceptuje
dvě hodnoty &ndash; konstantu se zakódovanou délkou trvání a výškou. Interně se
přitom volá subrutina nazvaná <strong>BEEPER</strong>, která je v&nbsp;ROM
uložena od adresy 0x03B5 (viz též <a
href="https://skoolkid.github.io/rom/asm/03B5.html">popis této
subrutiny</a>):</p>

<pre>
BEEPER        equ $03B5
</pre>

<p>Tato subrutina očekává, že parametry jí budou předány v&nbsp;registrových
párech <strong>DE</strong> a <strong>HL</strong>, přičemž
v&nbsp;<strong>DE</strong> je uložena doba trvání tónu (frekvence
tónu&times;čas v&nbsp;sekundách) a v&nbsp;registrovém páru <strong>HL</strong>
hodnota získaná výpočtem <i>437500 / frekvence tónu - 30.125</i>:</p>

<pre>
<strong>beep</strong> MACRO pitch, duration
        ld   hl, pitch
        ld   de, duration
        call BEEPER
ENDM
</pre>

<p>Například frekvence komorního A je stanovena na 440 Hz, takže do
<strong>HL</strong> by se měla dosadit hodnota 437500/440-30 = 964:</p>

<pre>
<strong>start</strong>:
        beep 964, 1000                 <i>; přehrání noty</i>
        ret                            <i>; návrat do BASICu</i>
</pre>

<p><div class="rs-tip-major">Poznámka: kde se však vzala konstanta 437500? Je
to přesně frekvence 3,5MHz (tedy frekvence hodinového signálu) podělená
osmi.</div></p>

<p>Výsledný tón si můžeme nechat analyzovat a zobrazit spektrálním (sic)
analyzátorem. Získáme následující výsledek:</p>

*** image ***
<p><i>Obrázek 6: Výsledek spektrální analýzy zvuku produkovaného ZX Spectrem.</i></p>

<p>Povšimněte si, že obě osy jsou nelineární (jak je v&nbsp;tomto oboru zvykem,
což je nutné při pochopení rozdílů v&nbsp;amplitudách jednotlivých
&bdquo;peaků&ldquo;). Základní frekvence tónu byla změřena poměrně přesně: 439
Hz. Kromě toho ovšem můžeme vidět i další dva &bdquo;peaky&ldquo;, a to na
frekvencích přibližně 1320 Hz a 2200 Hz. Ovšem to by nemělo být příliš
překvapující, neboť se jedná o vyšší harmonické obdélníkového signálu
(resp.&nbsp;signálu, jehož tvar se alespoň částečně blíží obdélníku). Konkrétně
se jedná o frekvence 3&times;f a 5&times;f, což plně odpovídá teorii &ndash;
obdélníkový signál totiž obsahuje (teoreticky všechny) liché harmonické.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úplný zdrojový kód dnešního prvního demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního prvního demonstračního příkladu najdete na
adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/103-beep.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/103-beep.asm</a>:</p>

<pre>
ENTRY_POINT   equ $8000
BEEPER        equ $03B5
&nbsp;
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>beep</strong> MACRO pitch, duration
        ld   hl, pitch
        ld   de, duration
        call BEEPER
ENDM
&nbsp;
<strong>start</strong>:
        beep 964, 1000                 <i>; přehrání noty</i>
        ret                            <i>; návrat do BASICu</i>
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p>Překlad tohoto velmi jednoduchého demonstračního příkladu do strojového kódu
je zcela přímočarý, což je ostatně patrné i z&nbsp;následujícího výpisu:</p>

<pre>
ENTRY_POINT     EQU 8000
BEEPER          EQU 03B5
                ORG 8000
Defining MACRO beep
Params: pitch, duration
8000:           label start
Expanding MACRO beep
pitch= 03E2 
duration= 03E8 
LD HL , pitch 
8000:21C403     LD HL, 03C4
LD DE , duration 
8003:11E803     LD DE, 03E8
CALL BEEPER 
8006:CDB503     CALL 03B5
ENDM 
                ENDM
End of MACRO beep
8009:C9         RET
800A:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8009
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Přehrání celé stupnice</h2>

<p>Poměrně přímočarým způsobem si můžeme přehrát celou stupnici (základní tóny
v&nbsp;jedné oktávě). Pouze si musíme připravit tabulku s&nbsp;hodnotami
posílanými do rutiny <strong>BEEPER</strong> přes registrový pár
<strong>HL</strong>:</p>

<pre>
<strong>notes</strong>:
        <i>; nota  frekvence   437500 / frekvence – 30.125</i>
        <i>; C     261.63      1642</i>
        <i>; D     293.66      1459</i>
        <i>; E     329.63      1297</i>
        <i>; F     349.23      1222</i>
        <i>; G     392.00      1086</i>
        <i>; A     440.00      964</i>
        <i>; H     493.88      855</i>
        <i>; C     523.26      806</i>
        dw 1642, 1459, 1297, 1222, 1086, 964, 855, 806, 0
</pre>

<p>Nyní již postačuje načítat hodnoty z&nbsp;této tabulky a volat makro
<strong>BEEP</strong>, které jsme si vytvořili v&nbsp;rámci předchozího
příkladu. Mezi jednotlivé tóny je vložena pauza:</p>

<pre>
<strong>start</strong>:
        ld   BC, notes                 <i>; adresa 16bitových konstant</i>
<strong>next_note</strong>:
        ld   A, (BC)                   <i>; načíst spodní bajt 16bitové konstanty</i>
        ld   L, A                      <i>; uložit do L</i>
        inc  BC                        <i>; a zvýšit adresu v poli</i>
&nbsp;
        ld   A, (BC)                   <i>; načíst horní bajt 16bitové konstanty</i>
        ld   H, A                      <i>; uložit do H</i>
        inc  BC                        <i>; a zvýšit adresu v poli</i>
&nbsp;
        add  A, L                      <i>; test na 16bitovou nulu</i>
        ret  z                         <i>; návrat do BASICu pokud je načtená hodnota nulová</i>
&nbsp;
        ld   DE, DURATION              <i>; parametry pro BEEP jsou v HL a DE</i>
        push BC
        call BEEPER                    <i>; zavolat subrutinu z ROM</i>
        call delay                     <i>; doba bez tónu</i>
        pop  BC
        jr   next_note                 <i>; zahrát další notu</i>
</pre>

<p>Načítání not je možné upravit takovým způsobem, aby se použil odlišný způsob
adresování, protože adresování přes registrový pár BC vyžaduje použití
akumulátoru (využít se například může EX DE, HL a adresování přímo přes HL
atd.).</p>

<p><div class="rs-tip-major">Poznámka: jsou všechny tóny hrány po stejně
dlouhou dobu? Proč tomu tak je?</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Úplný zdrojový kód dnešního druhého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního druhého demonstračního příkladu najdete na
adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/104-music-scale.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/104-music-scale.asm</a>:</p>

<pre>
ENTRY_POINT   equ $8000
BEEPER        equ $03B5
DURATION      equ 200
&nbsp;
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
&nbsp;
<strong>start</strong>:
        ld   BC, notes                 <i>; adresa 16bitových konstant</i>
<strong>next_note</strong>:
        ld   A, (BC)                   <i>; načíst spodní bajt 16bitové konstanty</i>
        ld   L, A                      <i>; uložit do L</i>
        inc  BC                        <i>; a zvýšit adresu v poli</i>
&nbsp;
        ld   A, (BC)                   <i>; načíst horní bajt 16bitové konstanty</i>
        ld   H, A                      <i>; uložit do H</i>
        inc  BC                        <i>; a zvýšit adresu v poli</i>
&nbsp;
        add  A, L                      <i>; test na 16bitovou nulu</i>
        ret  z                         <i>; návrat do BASICu pokud je načtená hodnota nulová</i>
&nbsp;
        ld   DE, DURATION              <i>; parametry pro BEEP jsou v HL a DE</i>
        push BC
        call BEEPER                    <i>; zavolat subrutinu z ROM</i>
        call delay                     <i>; doba bez tónu</i>
        pop  BC
        jr   next_note                 <i>; zahrát další notu</i>
&nbsp;
&nbsp;
<strong>notes</strong>:
        <i>; nota  frekvence   437500 / frekvence – 30.125</i>
        <i>; C     261.63      1642</i>
        <i>; D     293.66      1459</i>
        <i>; E     329.63      1297</i>
        <i>; F     349.23      1222</i>
        <i>; G     392.00      1086</i>
        <i>; A     440.00      964</i>
        <i>; H     493.88      855</i>
        <i>; C     523.26      806</i>
        dw 1642, 1459, 1297, 1222, 1086, 964, 855, 806, 0
&nbsp;
<strong>delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; mění BC (což nám nevadí)</i>
        ld   b, 200                    <i>; počitadlo vnější zpožďovací smyčky</i>
<strong>outer_loop</strong>:
        ld   c, 0                      <i>; počitadlo vnitřní zpožďovací smyčky</i>
<strong>inner_loop</strong>:
        dec  c                         <i>; snížení hodnoty počitadla (v první iteraci 256->255)</i>
        jr   NZ, inner_loop            <i>; opakovat, dokud není dosaženo nuly</i>
        djnz outer_loop                <i>; opakovat vnější smyčku, nyní s počitadlem v B</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
end ENTRY_POINT
</pre>

<p>A opět si pochopitelně ukážeme i způsob překladu tohoto demonstračního
příkladu do strojového kódu:</p>

<pre>
ENTRY_POINT     EQU 8000
BEEPER          EQU 03B5
DURATION        EQU 00C8
                ORG 8000
8000:           label start
8000:011880     LD BC, 8018
8003:           label next_note
8003:0A         LD A, (BC)
8004:6F         LD L, A
8005:03         INC BC
8006:0A         LD A, (BC)
8007:67         LD H, A
8008:03         INC BC
8009:85         ADD A, L
800A:C8         RET Z
800B:11C800     LD DE, 00C8
800E:C5         PUSH BC
800F:CDB503     CALL 03B5
8012:CD2A80     CALL 802A
8015:C1         POP BC
8016:18EB       JR 8003
8018:           label notes
8018:6A06B305   DEFW of 9 words
801C:1105C604
8020:3E04C403
8024:57032603
8028:0000
802A:           label delay
802A:06C8       LD B, C8
802C:           label outer_loop
802C:0E00       LD C, 00
802E:           label inner_loop
802E:0D         DEC C
802F:20FD       JR NZ, 802E
8031:10F9       DJNZ 802C
8033:C9         RET
8034:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8033
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Přímé programové ovládání beeperu</h2>

<p>Rutina <strong>BEEPER</strong> uložená v&nbsp;paměti ROM, kterou jsme až
doposud používali, interně pochopitelně mění logickou úroveň na pinu 28 čipu
ULA tak, aby se generoval zvolený tón. Stejnou operaci pochopitelně můžeme
provést i my. Budeme v&nbsp;programové smyčce negovat pátý bit na portu 0xfe a
tím pádem i měnit logickou úroveň na pinu 28. V&nbsp;případě, že tato změna
bude probíhat s&nbsp;nějakým (vhodně zvoleným) zpožděním, měli bychom získat
čistý tón. Realizace takové smyčky je ve skutečnosti triviální (prozatím
nepočítáme přesné zpoždění, které je nutné použít):</p>

<pre>
        ld   A, %00000111              <i>; původní hodnota zapisovaná na port</i>
<strong>loop</strong>:
        xor  %00010000                 <i>; negace pátého bitu</i>
        out  (BEEPER_PORT), A          <i>; zápis na port</i>
        call short_delay               <i>; počkat</i>
        jr   loop                      <i>; a opakovat celé znovu</i>
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že na port 0xfe
zapisujeme i binární hodnotu 111 uloženou v&nbsp;nejnižších třech bitech. Jak
uvidíme dále, jedná se o barvu okraje (<i>border</i>) a tuto vlastnost &ndash;
možnost změny pozadí a současně i stavu reproduktoru jedinou instrukcí &ndash;
využijeme v&nbsp;dalších demonstračních příkladech.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód dnešního třetího demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního třetího demonstračního příkladu najdete na
adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/105-direct-speaker.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/105-direct-speaker.asm</a>:</p>

<pre>
ENTRY_POINT   equ $8000
BEEPER_PORT   equ $fe
&nbsp;
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
&nbsp;
<strong>start</strong>:
        ld   A, %00000111              <i>; původní hodnota zapisovaná na port</i>
<strong>loop</strong>:
        xor  %00010000                 <i>; negace pátého bitu</i>
        out  (BEEPER_PORT), A          <i>; zápis na port</i>
        call short_delay               <i>; počkat</i>
        jr   loop                      <i>; a opakovat celé znovu</i>
&nbsp;
&nbsp;
<strong>short_delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; mění B (což nám nevadí)</i>
        ld   b, 100                    <i>; počitadlo zpožďovací smyčky</i>
<strong>delay_loop</strong>:
        djnz delay_loop                <i>; opakovat smyčku s počitadlem v B</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
end ENTRY_POINT
</pre>

<p>A takto vypadá překlad tohoto demonstračního příkladu do strojového
kódu:</p>

<pre>
ENTRY_POINT     EQU 8000
BEEPER_PORT     EQU 00FE
                ORG 8000
8000:           label start
8000:3E07       LD A, 07
8002:           label loop
8002:EE10       XOR 10
8004:D3FE       OUT (FE), A
8006:CD0B80     CALL 800B
8009:18F7       JR 8002
800B:           label short_delay
800B:0664       LD B, 64
800D:           label delay_loop
800D:10FE       DJNZ 800D
800F:C9         RET
8010:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800F
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vliv přerušení na přesnost přehrávaného tónu</h2>

<p>Pokud jste si předchozí příklad přeložili a spustili, pravděpodobně jste
uslyšeli tón, který není čistý &ndash; nejedná se tedy o pravidelný obdélníkový
signál. Jak je to možné? Naše programová smyčka a zpožďovací rutina mohou být
(a jsou) pozastaveny, a to ve chvíli, kdy dojde k&nbsp;přerušení, které na ZX
Spectru nastává 50&times; za sekundu. O významu přerušení a jeho využití se
zmíníme v&nbsp;samostatném článku, ovšem již nyní je zřejmé, že při tvorbě
zvukových efektů (a taktéž některých efektů grafických) vede obsluha
přerušovací rutiny k&nbsp;tomu, že výsledný tón či obraz není
&bdquo;čistý&ldquo;. Z&nbsp;tohoto důvodu přerušení (prozatím) zakážeme, což má
sice vliv na činnost ZX Spectra (obsluha klávesnice atd.), ale tento problém
nás alespoň prozatím nemusí příliš trápit.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zakázání přerušení při přehrávání</h2>

<p>Mikroprocesor Zilog Z80 obsahuje dva piny, na které se přivádí signál
s&nbsp;informacemi o přerušení (oba signály mají inverzní logiku, jak je to
v&nbsp;této oblasti zvykem). Jedná se o NMI (nemaskovatelné přerušení), který
se však po RESETu už nepoužívá (viz schéma zapojení ZX Spectra) a INT, jenž je
připojen k&nbsp;ULA. A signál přivedený na pin INT lze maskovat instrukcí
<strong>DI</strong> neboli <i>disable interrupt</i>. Opakem je instrukce
<strong>EI</strong> neboli <i>enable interrupt</i>. V&nbsp;případě, že naši
přehrávací rutinu nepatrně upravíme, nebude již zpomalována přerušovací rutinou
a vytvářený zvuk tak bude zcela čistý:</p>

<pre>
        ld   A, %00000111              <i>; původní hodnota zapisovaná na port</i>
        <u>di</u>                             <i>; zakázat přerušení</i>
<strong>loop</strong>:
        xor  %00010000                 <i>; negace pátého bitu</i>
        out  (BEEPER_PORT), A          <i>; zápis na port</i>
        call short_delay               <i>; počkat</i>
        jr   loop                      <i>; a opakovat celé znovu</i>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu najdete na
adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/106-direct-speaker-di.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/106-direct-speaker-di.asm</a>:</p>

<pre>
ENTRY_POINT   equ $8000
BEEPER_PORT   equ $fe
&nbsp;
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
&nbsp;
<strong>start</strong>:
        ld   A, %00000111              <i>; původní hodnota zapisovaná na port</i>
        <u>di</u>                             <i>; zakázat přerušení</i>
<strong>loop</strong>:
        xor  %00010000                 <i>; negace pátého bitu</i>
        out  (BEEPER_PORT), A          <i>; zápis na port</i>
        call short_delay               <i>; počkat</i>
        jr   loop                      <i>; a opakovat celé znovu</i>
&nbsp;
&nbsp;
<strong>short_delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; mění B (což nám nevadí)</i>
        ld   b, 100                    <i>; počitadlo zpožďovací smyčky</i>
<strong>delay_loop</strong>:
        djnz delay_loop                <i>; opakovat smyčku s počitadlem v B</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
end ENTRY_POINT
</pre>

<p>A takto se čtvrtý příklad přeloží do strojového kódu:</p>

<pre>
ENTRY_POINT     EQU 8000
BEEPER_PORT     EQU 00FE
                ORG 8000
8000:           label start
8000:3E07       LD A, 07
8002:F3         DI
8003:           label loop
8003:EE10       XOR 10
8005:D3FE       OUT (FE), A
8007:CD0C80     CALL 800C
800A:18F7       JR 8003
800C:           label short_delay
800C:0664       LD B, 64
800E:           label delay_loop
800E:10FE       DJNZ 800E
8010:C9         RET
8011:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8010
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vizualizace frekvence přehrávání změnou okraje v&nbsp;reálném čase</h2>

<p>Na ZX Spectru se při nahrávání dat (například her) z&nbsp;kazety zobrazují
na okraji obrazovky pruhy (viz například <a
href="https://www.youtube.com/watch?v=MtBoRp_cSxQ">toto video</a>),
z&nbsp;nichž je možné při troše tréninku zjistit například kolísání rychlosti
otáčení motorku kazetového magnetofonu, přesnost nastavení hlavy magnetofonu na
čtenou stopu atd. Jak se však takové pruhy vůbec zobrazují a proč se vůbec
jedná o viditelné pruhy? Ve skutečnosti je to velmi jednoduché, protože
nejnižší tři bity zapisované na port 0xfe (tedy na stejný port, kterým se
ovládá reproduktor) obsahují index barvy pozadí; tedy hodnotu 0 až 7. A rychlým
přepisem tohoto indexu lze dosáhnout zobrazení oněch pruhů. Při nahrávání
z&nbsp;kazety se mohou zobrazovat skutečně načítaná data, tento trik je možné
použít pro vizualizaci časování nějaké rutiny atd. atd.</p>

<p>My se pokusíme o změnu barvy okraje při každé změně polohy membrány
reproduktoru. To znamená, že pro tón o frekvenci 1000 Hz by se barva okraje
měla změnit 1000&times; za sekundu, což při 50 snímcích za sekundu znamená
přibližně 1000/50=20 pruhů v&nbsp;každém snímku (ovšem skutečně jen přibližně,
protože jsme nezapočítali <i>vertical blank</i> atd.).</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Pruhy na okraji obrazovky při povolení či zákazu přerušení</h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zdrojové kódy pátého a šestého příkladu</h2>

<p>Pro úplnost si uveďme zdrojové kódy dnešního pátého i šestého demonstračního
příkladu. Tyto příklady byly popsány v&nbsp;předchozích kapitolách:</p>

<pre>
ENTRY_POINT   equ $8000
BEEPER_PORT   equ $fe
&nbsp;
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
&nbsp;
<strong>start</strong>:
        ld   A, %00000111              <i>; původní hodnota zapisovaná na port</i>
<strong>loop</strong>:
        xor  %00010001                 <i>; negace prvního a pátého bitu</i>
        out  (BEEPER_PORT), A          <i>; zápis na port</i>
        call short_delay               <i>; počkat</i>
        jr   loop                      <i>; a opakovat celé znovu</i>
&nbsp;
&nbsp;
<strong>short_delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; mění B (což nám nevadí)</i>
        ld   b, 98                    <i>; počitadlo zpožďovací smyčky</i>
<strong>delay_loop</strong>:
        djnz delay_loop                <i>; opakovat smyčku s počitadlem v B</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
end ENTRY_POINT
</pre>

<p>Překlad pátého příkladu do strojového kódu:</p>

<pre>
ENTRY_POINT     EQU 8000
BEEPER_PORT     EQU 00FE
                ORG 8000
8000:           label start
8000:3E07       LD A, 07
8002:           label loop
8002:EE11       XOR 11
8004:D3FE       OUT (FE), A
8006:CD0B80     CALL 800B
8009:18F7       JR 8002
800B:           label short_delay
800B:0662       LD B, 62
800D:           label delay_loop
800D:10FE       DJNZ 800D
800F:C9         RET
8010:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800F
</pre>

<pre>
ENTRY_POINT   equ $8000
BEEPER_PORT   equ $fe
&nbsp;
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
&nbsp;
<strong>start</strong>:
        ld   A, %00000111              <i>; původní hodnota zapisovaná na port</i>
        di                             <i>; zakázat přerušení</i>
<strong>loop</strong>:
        xor  %00010001                 <i>; negace prvního a pátého bitu</i>
        out  (BEEPER_PORT), A          <i>; zápis na port</i>
        call short_delay               <i>; počkat</i>
        jr   loop                      <i>; a opakovat celé znovu</i>
&nbsp;
&nbsp;
<strong>short_delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; mění B (což nám nevadí)</i>
        ld   b, 98                    <i>; počitadlo zpožďovací smyčky</i>
<strong>delay_loop</strong>:
        djnz delay_loop                <i>; opakovat smyčku s počitadlem v B</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
end ENTRY_POINT
</pre>

<p>Překlad šestého příkladu do strojového kódu:</p>

<pre>
ENTRY_POINT     EQU 8000
BEEPER_PORT     EQU 00FE
                ORG 8000
8000:           label start
8000:3E07       LD A, 07
8002:F3         DI
8003:           label loop
8003:EE11       XOR 11
8005:D3FE       OUT (FE), A
8007:CD0C80     CALL 800C
800A:18F7       JR 8003
800C:           label short_delay
800C:0663       LD B, 63
800E:           label delay_loop
800E:10FE       DJNZ 800E
8010:C9         RET
8011:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8010
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Skutečné možnosti beeperu &ndash; PWM, vícehlasá hudba</h2>

Knight Lore COVER (by Spidey)
https://www.youtube.com/watch?v=iSEnvkuiWsc

Vectron Music by Tim Follin - Captured from a real 48K ZX Spectrum
https://www.youtube.com/watch?v=FySV12aWGkg

[ZX Spectrum Beeper] Mister Beep - Rubber Love (Oscilloscope View)
https://www.youtube.com/watch?v=xfuWEoUehk0

Tim Follin - “Chronos (ZXS 48k)” [Oscilloscope View]
https://www.youtube.com/watch?v=wV9PfEFw78I

Modern ZX Spectrum 48K BEEPER music, Part 1
https://www.youtube.com/watch?v=QZnOd_f9YjQ

<p><i>Obrázek 7: Pulsní šířková modulace sinusové vlny (červená barva), která
je porovnávána s referenčním trojúhelníkovým signálem (modrá barva). Výsledný
binární signál je zobrazen žlutou barvou.</i></p>

<p><i>Obrázek 8: Pulsní šířková modulace &ndash; frekvence referenčního
trojúhelníkového signálu je dvojnásobná oproti signálu zobrazeném na čtvrtém
obrázku, výstup by však stále nebyl (při přehrání na reproduktoru) dostatečně
kvalitní.</i></p>

<p><i>Obrázek 9: Pulsní šířková modulace &ndash; frekvence referenčního
trojúhelníkového signálu je dvojnásobná oproti signálu zobrazeném na pátém
obrázku.</i></p>

<p><i>Obrázek 10: Na tomto grafu je frekvence referenční trojúhelníkové vlny
cca 10&times; vyšší, než frekvence převáděného signálu, což je již pro mnoho
aplikací dostatečné.</i></p>

<p><i>Obrázek 11: Další zdvojnásobení frekvence referenční trojúhelníkové vlny.
Výsledný graf je již částečně zkreslen vlivem převodu původních analogových
průběhů do rastrového obrázku (již se přibližujeme k hranici, při níž vzniká
obrazový alias).</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Rozšíření ZX Spectra o další zvukové subsystémy</h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah navazujícího článku</h2>

<p>V&nbsp;navazující části <a
href="https://www.root.cz/clanky/prace-s-klavesnici-na-zx-spectru/">seriálu o
tvorbě programů pro slavné ZX Spectrum</a> se opět budeme zabývat tvorbou zvuků
a hudby. Tentokrát se ovšem zaměříme především na použití čipu <i>AY-3-8912</i>
popř.&nbsp;na kombinaci &bdquo;ayčka&ldquo; s&nbsp;původním beeperem. Mnohé
původní 48k totiž prošly úpravami a nyní &bdquo;ayčko&ldquo; taktéž
obsahují.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</h2>

<p>Výše uvedené demonstrační příklady i příklady, které již byly popsány
v&nbsp;předchozích čtrnácti článcích [<a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">1</a>]
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-mikroprocesor-zilog-z80-a-smycky-v-assembleru/">2</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-vypis-informaci-na-obrazovku/">3</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-her-a-dem-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny/">4</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-her-a-dem-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny-podruhe/">5</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny-potreti/">6</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-dokonceni-realizace-prikazu-plot/">7</a>],
[<a
href="https://www.root.cz/clanky/zobrazeni-cisel-a-zpracovani-priznaku-mikroprocesoru-zilog-z80/">8</a>],
[<a
href="https://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ulozenymi-binarne-i-ve-formatu-bcd/">9</a>],
[<a
href="https://www.root.cz/clanky/tisk-hexadecimalnich-hodnot-s-vyuzitim-instrukce-daa-na-zx-spectru/">10</a>],
[<a
href="https://www.root.cz/clanky/kopie-datovych-bloku-na-zx-spectru-prenaseni-bajt-po-bajtu/">11</a>],
[<a
href="https://www.root.cz/clanky/kopie-datovych-bloku-na-zx-spectru-s-vyuzitim-zasobniku/">12</a>],
[<a
href="https://www.root.cz/clanky/prace-s-klavesnici-na-zx-spectru/">13</a>],
[<a
href="https://www.root.cz/clanky/ovladani-hracu-ve-hre-klavesnici-nebo-joystickem-na-zx-spectru/">14</a>],
je možné přeložit s&nbsp;využitím souboru Makefile, jehož aktuální verze vypadá
následovně (pro překlad a slinkování je použit assembler <i>Pasmo</i>):</p>

<pre>
ASSEMBLER := pasmo
&nbsp;
all: 01.tap 02.tap 03.tap 04.tap 05.tap 06.tap 07.tap 08.tap 09.tap 10.tap \
    11.tap 12.tap 13.tap 14.tap 15.tap 16.tap 17.tap 18.tap 19.tap 20.tap \
    21.tap 22.tap 23.tap 24.tap 25.tap 26.tap 27.tap 28.tap 29.tap 30.tap \
    31.tap 32.tap 33.tap 34.tap 35.tap 36.tap 37.tap 38.tap 39.tap 40.tap \
    41.tap 42.tap 43.tap 44.tap 45.tap 46.tap 47.tap 48.tap 49.tap 50.tap \
    51.tap 52.tap 53.tap 54.tap 55.tap 56.tap 57.tap 58.tap 59.tap 60.tap \
    61.tap 62.tap 63.tap 64.tap 65.tap 66.tap 67.tap 68.tap 69.tap 70.tap \
    71.tap 72.tap 73.tap 74.tap 75.tap 76.tap 77.tap 78.tap 79.tap 80.tap \
    81.tap 82.tap 83.tap 84.tap 85.tap 86.tap 87.tap 88.tap 80.tap 90.tap \
    91.tap 92.tap 93.tap 94.tap 95.tap 96.tap 97.tap 98.tap 99.tap 100.tap \
    101.tap 102.tap 103.tap 104.tap 105.tap 106.tap 107.tap 108.tap
&nbsp;
clean:
        rm -f *.tap
&nbsp;
.PHONY: all clean
&nbsp;
&nbsp;
01.tap: 01-color-attribute.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 01-color-attribute.lst
&nbsp;
02.tap: 02-blinking-attribute.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 02-blinking-attribute.lst
&nbsp;
03.tap: 03-symbolic-names.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 03-symbolic-names.lst
&nbsp;
04.tap: 04-operators.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 04-operators.lst
&nbsp;
05.tap: 05-better-symbols.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 05-better-symbols.lst
&nbsp;
06.tap: 06-tapbas-v1.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 06-tapbas-v1.lst
&nbsp;
07.tap: 07-tapbas-v2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 07-tapbas-v2.lst
&nbsp;
08.tap: 08-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 08-loop.lst
&nbsp;
09.tap: 09-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 09-loop.lst
&nbsp;
10.tap: 10-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 10-loop.lst
&nbsp;
11.tap: 11-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 11-loop.lst
&nbsp;
12.tap: 12-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 12-loop.lst
&nbsp;
13.tap: 13-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 13-loop.lst
&nbsp;
14.tap: 14-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 14-loop.lst
&nbsp;
15.tap: 15-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 15-loop.lst
&nbsp;
16.tap: 16-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 16-loop.lst
&nbsp;
17.tap: 17-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 17-loop.lst
&nbsp;
18.tap: 18-cls.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 18-cls.lst
&nbsp;
19.tap: 19-print-char-call.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 19-print-char-call.lst
&nbsp;
20.tap: 20-print-char-rst.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 20-print-char-rst.lst
&nbsp;
21.tap: 21-print-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 21-print-char.lst
&nbsp;
22.tap: 22-print-all-chars.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 22-print-all-chars.lst
&nbsp;
23.tap: 23-print-all-chars.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 23-print-all-chars.lst
&nbsp;
24.tap: 24-change-color.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 24-change-color.lst
&nbsp;
25.tap: 25-change-flash.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 25-change-flash.lst
&nbsp;
26.tap: 26-print-at.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 26-print-at.lst
&nbsp;
27.tap: 27-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 27-print-string.lst
&nbsp;
28.tap: 28-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 28-print-string.lst
&nbsp;
29.tap: 29-print-colorized-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 29-print-colorized-string.lst
&nbsp;
30.tap: 30-print-string-ROM.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 30-print-string-ROM.lst
&nbsp;
31.tap: 31-attributes.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 31-attributes.lst
&nbsp;
32.tap: 32-fill-in-vram.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 32-fill-in-vram.lst
&nbsp;
33.tap: 33-fill-in-vram-no-ret.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 33-fill-in-vram-no-ret.lst
&nbsp;
34.tap: 34-fill-in-vram-pattern.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 34-fill-in-vram-pattern.lst
&nbsp;
35.tap: 35-slow-fill-in-vram.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 35-slow-fill-in-vram.lst
&nbsp;
36.tap: 36-slow-fill-in-vram-no-ret.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 36-slow-fill-in-vram-no-ret.lst
&nbsp;
37.tap: 37-fill-block.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 37-fill-block.lst
&nbsp;
38.tap: 38-fill-block-with-pattern.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 38-fill-block-with-pattern.lst
&nbsp;
39.tap: 39-fill-block-optimized.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 39-fill-block-optimized.lst
&nbsp;
40.tap: 40-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 40-draw-char.lst
&nbsp;
41.tap: 41-draw-any-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 41-draw-any-char.lst
&nbsp;
42.tap: 42-block-anywhere.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 42-block-anywhere.lst
&nbsp;
43.tap: 43-block-anywhere-rrca.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 43-block-anywhere-rrca.lst
&nbsp;
44.tap: 44-better-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 44-better-draw-char.lst
&nbsp;
45.tap: 45-even-better-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 45-even-better-draw-char.lst
&nbsp;
46.tap: 46-draw-char-at.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 46-draw-char-at.lst
&nbsp;
47.tap: 47-draw-char-at-unrolled.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 47-draw-char-at-unrolled.lst
&nbsp;
48.tap: 48-incorrect-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 48-incorrect-print-string.lst
&nbsp;
49.tap: 49-correct-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 49-correct-print-string.lst
&nbsp;
50.tap: 50-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 50-ascii-table.lst
&nbsp;
51.tap: 51-plot-block.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 51-plot-block.lst
&nbsp;
52.tap: 52-plot-pixel.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 52-plot-pixel.lst
&nbsp;
53.tap: 53-plot-pixel.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 53-plot-pixel.lst
&nbsp;
54.tap: 54-plot-pixel-on-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 54-plot-pixel-on-background.lst
&nbsp;
55.tap: 55-plot-pixel-on-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 55-plot-pixel-on-background.lst
&nbsp;
56.tap: 56-inverse-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 56-inverse-ascii-table.lst
&nbsp;
57.tap: 57-plot-pixel-on-inverse-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 57-plot-pixel-on-inverse-background.lst
&nbsp;
58.tap: 58-plot-inverse-pixel-on-inverse-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 58-plot-inverse-pixel-on-inverse-background.lst
&nbsp;
59.tap: 59-configurable-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 59-configurable-ascii-table.lst
&nbsp;
60.tap: 60-plot-over.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 60-plot-over.lst
&nbsp;
61.tap: 61-print-number-A.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 61-print-number-A.lst
&nbsp;
62.tap: 62-print-number-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 62-print-number-B.lst
&nbsp;
63.tap: 63-print-number-C.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 63-print-number-C.lst
&nbsp;
64.tap: 64-print-number-D.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 64-print-number-D.lst
&nbsp;
65.tap: 65-more-numbers-A.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 65-more-numbers-A.lst
&nbsp;
66.tap: 66-more-numbers-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 66-more-numbers-B.lst
&nbsp;
67.tap: 67-print-flags-1.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 67-print-flags-1.lst
&nbsp;
68.tap: 68-print-flags-2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 68-print-flags-2.lst
&nbsp;
69.tap: 69-print-flags-3.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 69-print-flags-3.lst
&nbsp;
70.tap: 70-print-flags-4.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 70-print-flags-4.lst
&nbsp;
71.tap: 71-print-flags-5.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 71-print-flags-5.lst
&nbsp;
72.tap: 72-print-flags-6.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 72-print-flags-6.lst
&nbsp;
73.tap: 73-print-flags-7.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 73-print-flags-7.lst
&nbsp;
74.tap: 74-print-hex-number.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 74-print-hex-number.lst
&nbsp;
75.tap: 75-print-hex-number.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 75-print-hex-number.lst
&nbsp;
76.tap: 76-print-hex-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 76-print-hex-numbers.lst
&nbsp;
77.tap: 77-add-hex-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 77-add-hex-numbers.lst
&nbsp;
78.tap: 78-add-bcd-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 78-add-bcd-numbers.lst
&nbsp;
79.tap: 79-print-hex-digit-jmp.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 79-print-hex-digit-jmp.lst
&nbsp;
80.tap: 80-print-hex-digit-overflow.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 80-print-hex-digit-overflow.lst
&nbsp;
81.tap: 81-print-hex-digit-daa.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 81-print-hex-digit-daa.lst
&nbsp;
82.tap: 82-print-hex-numbers-daa.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 82-print-hex-numbers-daa.lst
&nbsp;
83.tap: 83-print-fp-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 83-print-fp-numbers.lst
&nbsp;
84.tap: 84-print-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 84-print-ascii-table.lst
&nbsp;
85.tap: 85-copy-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 85-copy-ascii-table.lst
&nbsp;
86.tap: 86-copy-ascii-table-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 86-copy-ascii-table-B.lst
&nbsp;
87.tap: 87-copy-ascii-table-C.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 87-copy-ascii-table-C.lst
&nbsp;
88.tap: 88-copy-ascii-table-D.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 88-copy-ascii-table-D.lst
&nbsp;
89.tap: 89-copy-ascii-table-E.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 89-copy-ascii-table-E.lst
&nbsp;
90.tap: 90-copy-ascii-table-F.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 90-copy-ascii-table-F.lst
&nbsp;
91.tap: 91-copy-ascii-table-G.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 91-copy-ascii-table-G.lst
&nbsp;
92.tap: 92-copy-ascii-table-H.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 92-copy-ascii-table-H.lst
&nbsp;
93.tap: 93-copy-ascii-table-I.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 93-copy-ascii-table-I.lst
&nbsp;
94.tap: 94-color-attribute.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 94-color-attribute.lst
&nbsp;
95.tap: 95-keypress.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 95-keypress.lst
&nbsp;
96.tap: 96-keypress-row.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 96-keypress-row.lst
&nbsp;
97.tap: 97-keypress-all-rows.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 97-keypress-all-rows.lst
&nbsp;
98.tap: 98-game-character.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 98-game-character.lst
&nbsp;
99.tap: 99-game-character-2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 99-game-character-2.lst
&nbsp;
100.tap:        100-cursor-joystick.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 100-cursor-joystick.lst
&nbsp;
101.tap:        101-sinclair-joystick.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 101-sinclair-joystick.lst
&nbsp;
102.tap:        102-kempston-joystick.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 102-kempston-joystick.lst
&nbsp;
103.tap:        103-beep.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 103-beep.lst
&nbsp;
104.tap:        104-music-scale.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 104-music-scale.lst
&nbsp;
105.tap:        105-direct-speaker.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 105-direct-speaker.lst
&nbsp;
106.tap:        106-direct-speaker-di.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 106-direct-speaker-di.lst
&nbsp;
107.tap:        107-direct-speaker-border.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 107-direct-speaker-border.lst
&nbsp;
108.tap:        108-direct-speaker-border-di.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 108-direct-speaker-border-di.lst
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
prozatím popsané demonstrační příklady určené pro překlad a spuštění na
osmibitovém domácím mikropočítači ZX Spectrum (libovolný model či jeho klon),
které jsou psány v&nbsp;assembleru mikroprocesoru Zilog Z80. Pro překlad těchto
demonstračních příkladů je možné použít například assembler <i>Pasmo</i> (viz
též <a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">úvodní
článek</a>):</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01-color-attribute.asm</td><td>modifikace jednoho barvového atributu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm</a></td></tr>
<tr><td> 2</td><td>02-blinking-attribute.asm</td><td>barvový atribut s&nbsp;nastavením bitů pro blikání a vyšší intenzitu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm</a></td></tr>
<tr><td> 3</td><td>03-symbolic-names.asm</td><td>symbolická jména v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm</a></td></tr>
<tr><td> 4</td><td>04-operators.asm</td><td>operátory a operace se symbolickými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm</a></td></tr>
<tr><td> 5</td><td>05-better-symbols.asm</td><td>tradičnější symbolická jména</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm</a></td></tr>
<tr><td> 6</td><td>06-tapbas-v1.asm</td><td>vygenerování BASICovského loaderu (neúplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm</a></td></tr>
<tr><td> 7</td><td>07-tapbas-v2.asm</td><td>vygenerování BASICovského loaderu (úplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm</a></td></tr>
<tr><td> 8</td><td>08-loop.asm</td><td>jednoduchá počítaná programová smyčka: naivní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm</a></td></tr>
<tr><td> 9</td><td>09-loop.asm</td><td>programová smyčka: zkrácení kódu pro vynulování použitých pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm</a></td></tr>
<tr><td>10</td><td>10-loop.asm</td><td>programová smyčka: optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm</a></td></tr>
<tr><td>11</td><td>11-loop.asm</td><td>programová smyčka: optimalizace využití pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm</a></td></tr>
<tr><td>12</td><td>12-loop.asm</td><td>programová smyčka: použití pracovního registru IX</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm</a></td></tr>
<tr><td>13</td><td>13-loop.asm</td><td>programová smyčka: použití pracovního registru IY</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm</a></td></tr>
<tr><td>14</td><td>14-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm</a></td></tr>
<tr><td>15</td><td>15-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm</a></td></tr>
<tr><td>16</td><td>16-loop.asm</td><td>použití relativního skoku a nikoli skoku absolutního</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm</a></td></tr>
<tr><td>17</td><td>17-loop.asm</td><td>programová smyčka: <strong>inc l</strong> namísto <strong>inc hl</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>18-cls.asm</td><td>smazání obrazovky a otevření kanálu číslo 2 (screen) přes funkci v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm</a></td></tr>
<tr><td>19</td><td>19-print-char-call.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce CALL)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm</a></td></tr>
<tr><td>20</td><td>20-print-char-rst.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce RST)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm</a></td></tr>
<tr><td>21</td><td>21-print-char.asm</td><td>pouze výpis jednoho znaku na obrazovku bez jejího smazání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm</a></td></tr>
<tr><td>22</td><td>22-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (nekorektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm</a></td></tr>
<tr><td>23</td><td>23-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (korektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm</a></td></tr>
<tr><td>24</td><td>24-change-color.asm</td><td>změna barvových atributů (popředí a pozadí) vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm</a></td></tr>
<tr><td>25</td><td>25-change-flash.asm</td><td>povolení či zákaz blikání vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm</a></td></tr>
<tr><td>26</td><td>26-print-at.asm</td><td>výpis znaku či znaků na určené místo na obrazovce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm</a></td></tr>
<tr><td>27</td><td>27-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm</a></td></tr>
<tr><td>28</td><td>28-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm</a></td></tr>
<tr><td>29</td><td>29-print-colorized-string.asm</td><td>výpis řetězce, který obsahuje i řídicí znaky pro změnu barvy atd.</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm</a></td></tr>
<tr><td>30</td><td>30-print-string-ROM.asm</td><td>výpis řetězce s&nbsp;využitím služby/subrutiny uložené v&nbsp;ROM ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>31-attributes.asm</td><td>modifikace atributů pro tisk řetězce subrutinou uloženou v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm</a></td></tr>
<tr><td>32</td><td>32-fill-in-vram.asm</td><td>vyplnění celé bitmapy barvou popředí, návrat do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm</a></td></tr>
<tr><td>33</td><td>33-fill-in-vram-no-ret.asm</td><td>vyplnění celé bitmapy barvou popředí, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>34</td><td>34-fill-in-vram-pattern.asm</td><td>vyplnění celé bitmapy zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm</a></td></tr>
<tr><td>35</td><td>35-slow-fill-in-vram.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm</a></td></tr>
<tr><td>36</td><td>36-slow-fill-in-vram-no-ret.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>37</td><td>37-fill-block.asm</td><td>vykreslení bloku 8&times;8 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm</a></td></tr>
<tr><td>38</td><td>38-fill-block-with-pattern.asm</td><td>vykreslení bloku 8&times;8 pixelů zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm</a></td></tr>
<tr><td>39</td><td>39-fill-block-optimized.asm</td><td>optimalizace předchozího příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm</a></td></tr>
<tr><td>40</td><td>40-draw-char.asm</td><td>vykreslení znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm</a></td></tr>
<tr><td>41</td><td>41-draw-any-char.asm</td><td>podprogram pro vykreslení libovolně zvoleného znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm</a></td></tr>
<tr><td>42</td><td>42-block-anywhere.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>43-block-anywhere-rrca.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm</a></td></tr>
<tr><td>44</td><td>44-better-draw-char.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm</a></td></tr>
<tr><td>45</td><td>45-even-better-draw-char.asm</td><td>posun offsetu pro vykreslení dalšího znaku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm</a></td></tr>
<tr><td>46</td><td>46-draw-char-at.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm</a></td></tr>
<tr><td>47</td><td>47-draw-char-at-unrolled.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm</a></td></tr>
<tr><td>48</td><td>48-incorrect-print-string.asm</td><td>tisk řetězce, nekorektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm</a></td></tr>
<tr><td>49</td><td>49-correct-print-string.asm</td><td>tisk řetězce, korektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>50-ascii-table.asm</td><td>tisk několika bloků ASCII tabulky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm</a></td></tr>
<tr><td>51</td><td>51-plot-block.asm</td><td>vykreslení pixelu verze 1: zápis celého bajtu na pozici pixelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm</a></td></tr>
<tr><td>52</td><td>52-plot-pixel.asm</td><td>vykreslení pixelu verze 2: korektní vykreslení jednoho pixelu, ovšem překreslení celého bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm</a></td></tr>
<tr><td>53</td><td>53-plot-pixel.asm</td><td>vykreslení pixelu verze 3: vylepšená verze předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm</a></td></tr>
<tr><td>54</td><td>54-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (nekorektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm</a></td></tr>
<tr><td>55</td><td>55-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (korektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>56</td><td>56-inverse-ascii-table.asm</td><td>vykreslení ASCII tabulky inverzní barvou (inkoust vs. papír)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm</a></td></tr>
<tr><td>57</td><td>57-plot-pixel-on-inverse-background.asm</td><td>vykreslení pixelů barvou papíru proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm</a></td></tr>
<tr><td>58</td><td>58-plot-inverse-pixel-on-inverse-background.asm</td><td>vykreslení pixelů inverzní barvou proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/58-plot-inverse-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm58-plot-inverse-pixel-on-inverse-background.asm/</a></td></tr>
<tr><td>59</td><td>59-configurable-ascii-table.asm</td><td>vykreslení ASCII tabulky buď přímo inkoustem nebo inverzně</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/59-configurable-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/59-configurable-ascii-table.asm</a></td></tr>
<tr><td>60</td><td>60-plot-over.asm</td><td>přibližná implementace příkazu <strong>PLOT OVER</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/60-plot-over.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/60-plot-over.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>61-print-number-A.asm</td><td>ukázka použití podprogramu pro tisk celého čísla</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/61-print-number-A.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/61-print-number-A.asm</a></td></tr>
<tr><td>62</td><td>62-print-number-B.asm</td><td>pokus o vytištění záporných čísel</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/62-print-number-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/62-print-number-B.asm</a></td></tr>
<tr><td>63</td><td>63-print-number-C.asm</td><td>tisk maximální podporované hodnoty 9999</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/63-print-number-C.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/63-print-number-C.asm</a></td></tr>
<tr><td>64</td><td>64-print-number-D.asm</td><td>tisk vyšší než podporované hodnoty 10000</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/64-print-number-D.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/64-print-number-D.asm</a></td></tr>
<tr><td>65</td><td>65-more-numbers-A.asm</td><td>vytištění číselné řady</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/65-more-numbers-A.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/65-more-numbers-A.asm</a></td></tr>
<tr><td>66</td><td>66-more-numbers-B.asm</td><td>kombinace tisku celočíselných hodnot s&nbsp;dalšími subrutinami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/66-more-numbers-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/66-more-numbers-B.asm</a></td></tr>
<tr><td>67</td><td>67-print-flags-1.asm</td><td>příznakové bity po provedení celočíselné operace 1+2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/67-print-flags-1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/67-print-flags-1.asm</a></td></tr>
<tr><td>68</td><td>68-print-flags-2.asm</td><td>příznakové bity po provedení celočíselné operace 0+0</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/68-print-flags-2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/68-print-flags-2.asm</a></td></tr>
<tr><td>69</td><td>69-print-flags-3.asm</td><td>příznakové bity po provedení operace 255+1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/69-print-flags-3.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/69-print-flags-3.asm</a></td></tr>
<tr><td>70</td><td>70-print-flags-4.asm</td><td>příznakové bity po provedení operace 254+1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/70-print-flags-4.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/70-print-flags-4.asm</a></td></tr>
<tr><td>71</td><td>71-print-flags-5.asm</td><td>příznakové bity po provedení operace 255+255</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/71-print-flags-5.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/71-print-flags-5.asm</a></td></tr>
<tr><td>72</td><td>72-print-flags-6.asm</td><td>výsledek operace 100+100, nastavení příznakových bitů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/72-print-flags-6.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/72-print-flags-6.asm</a></td></tr>
<tr><td>73</td><td>73-print-flags-7.asm</td><td>výsledek operace 128+128, nastavení příznakových bitů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/73-print-flags-7.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/73-print-flags-7.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>74</td><td>74-print-hex-number.asm</td><td>tisk hexadecimálního čísla v&nbsp;rozsahu 0x00 až 0xff (neoptimalizovaná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/74-print-hex-number.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/74-print-hex-number.asm</a></td></tr>
<tr><td>75</td><td>75-print-hex-number.asm</td><td>tisk hexadecimálního čísla v&nbsp;rozsahu 0x00 až 0xff (optimalizovaná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/75-print-hex-number.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/75-print-hex-number.asm</a></td></tr>
<tr><td>76</td><td>76-print-hex-numbers.asm</td><td>tisk několika hexadecimálních hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/76-print-hex-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/76-print-hex-numbers.asm</a></td></tr>
<tr><td>77</td><td>77-add-hex-numbers.asm</td><td>součet dvou osmibitových hexadecimálních hodnot s&nbsp;tiskem všech výsledků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/77-add-hex-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/77-add-hex-numbers.asm</a></td></tr>
<tr><td>78</td><td>78-add-bcd-numbers.asm</td><td>součet dvou osmibitových BCD hodnot s&nbsp;tiskem všech výsledků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/78-add-bcd-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/78-add-bcd-numbers.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>79</td><td>79-print-hex-digit-jmp.asm</td><td>tisk jedné hexadecimální cifry s&nbsp;využitím podmíněného skoku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/79-print-hex-digit-jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/79-print-hex-digit-jmp.asm</a></td></tr>
<tr><td>80</td><td>80-print-hex-digit-overflow.asm</td><td>otestování, jaký znak je vytištěn pro hodnoty větší než 15</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/80-print-hex-digit-overflow.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/80-print-hex-digit-overflow.asm</a></td></tr>
<tr><td>81</td><td>81-print-hex-digit-daa.asm</td><td>tisk jedné hexadecimální cifry s&nbsp;využitím instrukce DAA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/81-print-hex-digit-daa.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/81-print-hex-digit-daa.asm</a></td></tr>
<tr><td>82</td><td>82-print-hex-numbers-daa.asm</td><td>tisk série hexadecimálních hodnot s&nbsp;využitím instrukce DAA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/82-print-hex-numbers-daa.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/82-print-hex-numbers-daa.asm</a></td></tr>
<tr><td>83</td><td>83-print-fp-numbers.asm</td><td>tisk numerických hodnot reprezentovaných v&nbsp;systému plovoucí řádové tečky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/83-print-fp-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/83-print-fp-numbers.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>84</td><td>84-print-ascii-table.asm</td><td>tisk jednoho bloku s&nbsp;ASCII tabulkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/84-print-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/84-print-ascii-table.asm</a></td></tr>
<tr><td>85</td><td>85-copy-ascii-table.asm</td><td>kopie bloku bajt po bajtu založená na naivní programové smyčce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/85-copy-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/85-copy-ascii-table.asm</a></td></tr>
<tr><td>86</td><td>86-copy-ascii-table-B.asm</td><td>kopie bloku s&nbsp;využitím instrukce <strong>LDIR</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/86-copy-ascii-table-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/86-copy-ascii-table-B.asm</a></td></tr>
<tr><td>87</td><td>87-copy-ascii-table-C.asm</td><td>kopie bloku bajt po bajtu založená na programové smyčce a instrukci <strong>LDI</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/87-copy-ascii-table-C.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/87-copy-ascii-table-C.asm</a></td></tr>
<tr><td>88</td><td>88-copy-ascii-table-D.asm</td><td>rozbalení programové smyčky s&nbsp;instrukcí <strong>LDI</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/88-copy-ascii-table-D.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/88-copy-ascii-table-D.asm</a></td></tr>
<tr><td>89</td><td>89-copy-ascii-table-E.asm</td><td>korektní smyčka pro všechny možné velikosti bloků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/89-copy-ascii-table-E.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/89-copy-ascii-table-E.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>90</td><td>90-copy-ascii-table-F.asm</td><td>kostra programu, který pro kopii bloků (16 bajtů) využívá zásobník</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/90-copy-ascii-table-F.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/90-copy-ascii-table-F.asm</a></td></tr>
<tr><td>91</td><td>91-copy-ascii-table-G.asm</td><td>definice makra a několikeré použití (aplikace) tohoto makra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/91-copy-ascii-table-G.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/91-copy-ascii-table-G.asm</a></td></tr>
<tr><td>92</td><td>92-copy-ascii-table-H.asm</td><td>opakování makra založené na <strong>REPT</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/92-copy-ascii-table-H.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/92-copy-ascii-table-H.asm</a></td></tr>
<tr><td>93</td><td>93-copy-ascii-table-I.asm</td><td>vícenásobná kopie části obrazovky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/93-copy-ascii-table-I.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/93-copy-ascii-table-I.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>94</td><td>94-color-attribute.asm</td><td>modifikace jednoho barvového atributu na obrazovce ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/94-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/94-color-attribute.asm</a></td></tr>
<tr><td>95</td><td>95-keypress.asm</td><td>detekce stisku jedné klávesy s&nbsp;vizualizací stisku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm</a></td></tr>
<tr><td>96</td><td>96-keypress-row.asm</td><td>detekce stisku kláves v&nbsp;jednom fyzickém řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm</a></td></tr>
<tr><td>97</td><td>97-keypress-all-rows.asm</td><td>detekce stisku všech kláves klávesnice ZX Spectra 48k</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>98</td><td>98-game-character.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně s&nbsp;využitím klávesnice</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/98-game-character.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/98-game-character.asm</a></td></tr>
<tr><td>99</td><td>99-game-character-2.asm</td><td>vylepšení předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/99-game-character-2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/99-game-character-2.asm</a></td></tr>
<tr><td>100</td><td>100-cursor-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně kurzorovým joystickem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/100-cursor-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/100-cursor-joystick.asm</a></td></tr>
<tr><td>101</td><td>101-sinclair-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně joystickem připojeným přes Interface 2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/101-sinclair-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/101-sinclair-joystick.asm</a></td></tr>
<tr><td>102</td><td>102-kempston-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně joystickem připojeným přes rozhraní Kempston</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/102-kempston-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/102-kempston-joystick.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>103</td><td>103-beep.asm</td><td>využití subrutiny v&nbsp;ROM s&nbsp;implementací příkazu <strong>BEEP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/103-beep.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/103-beep.asm</a></td></tr>
<tr><td>104</td><td>104-music-scale.asm</td><td>přehrání celé stupnice</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/104-music-scale.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/104-music-scale.asm</a></td></tr>
<tr><td>105</td><td>105-direct-speaker.asm</td><td>přímé programové ovládání beeperu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/105-direct-speaker.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/105-direct-speaker.asm</a></td></tr>
<tr><td>106</td><td>106-direct-speaker-di.asm</td><td>zakázání přerušení při přehrávání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/106-direct-speaker-di.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/106-direct-speaker-di.asm</a></td></tr>
<tr><td>107</td><td>107-direct-speaker-border.asm</td><td>vizualizace frekvence přehrávání změnou okraje v&nbsp;reálném čase</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/107-direct-speaker-border.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/107-direct-speaker-border.asm</a></td></tr>
<tr><td>108</td><td>108-direct-speaker-border-di.asm</td><td>vizualizace frekvence přehrávání změnou okraje v&nbsp;reálném čase</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/108-direct-speaker-border-di.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/108-direct-speaker-border-di.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>103</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech demonstračních příkladů do podoby obrazu magnetické pásky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>The system variables<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html</a>
</li>

<li>ZX Spectrum manual: chapter #17 Graphics<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Plovoucí řádová čárka na ZX Spectru<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>1A1B: THE 'REPORT AND LINE NUMBER PRINTING' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/1A1B.html">https://skoolkid.github.io/rom/asm/1A1B.html</a>
</li>

<li>2DE3: THE 'PRINT A FLOATING-POINT NUMBER' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/2DE3.html">https://skoolkid.github.io/rom/asm/2DE3.html</a>
</li>

<li>5C63: STKBOT - Address of bottom of calculator stack<br />
<a href="https://skoolkid.github.io/rom/asm/5C63.html">https://skoolkid.github.io/rom/asm/5C63.html</a>
</li>

<li>5C65: STKEND - Address of start of spare space<br />
<a href="https://skoolkid.github.io/rom/asm/5C65.html">https://skoolkid.github.io/rom/asm/5C65.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Chapter 24: The memory<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap24.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap24.html</a>
</li>

<li>Survey of Floating-Point Formats  <br />
<a href="https://mrob.com/pub/math/floatformats.html">https://mrob.com/pub/math/floatformats.html</a>
</li>

<li>Convert an 8bit number to hex in z80 assembler<br />
<a href="https://stackoverflow.com/questions/22838444/convert-an-8bit-number-to-hex-in-z80-assembler">https://stackoverflow.com/questions/22838444/convert-an-8bit-number-to-hex-in-z80-assembler</a>
</li>

<li>80 MICROPROCESSOR Instruction Set Summary<br />
<a href="http://www.textfiles.com/programming/CARDS/z80">http://www.textfiles.com/programming/CARDS/z80</a>
</li>

<li>Extended Binary Coded Decimal Interchange Code<br />
<a href="http://en.wikipedia.org/wiki/EBCDIC">http://en.wikipedia.org/wiki/EBCDIC</a>
</li>

<li>ASCII/EBCDIC Conversion Table<br />
<a href="http://docs.hp.com/en/32212-90008/apcs01.html">http://docs.hp.com/en/32212-90008/apcs01.html</a>
</li>

<li>EBCDIC<br />
<a href="http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php">http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php</a>
</li>

<li>EBCDIC tables<br />
<a href="http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm">http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm</a>
</li>

<li>The Mainframe Blog<br />
<a href="http://mainframe.typepad.com/blog/2006/11/my_personal_mai.html">http://mainframe.typepad.com/blog/2006/11/my_personal_mai.html</a>
</li>

<li>Binary-coded decimal<br />
<a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">https://en.wikipedia.org/wiki/Binary-coded_decimal</a>
</li>

<li>BCD<br />
<a href="https://cs.wikipedia.org/wiki/BCD">https://cs.wikipedia.org/wiki/BCD</a>
</li>

<li>Z80 heaven: Floating Point<br />
<a href="http://z80-heaven.wikidot.com/floating-point">http://z80-heaven.wikidot.com/floating-point</a>
</li>

<li>Z80, the 8-bit Number Cruncher<br />
<a href="http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html">http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html</a>
</li>

<li>Floating-point library for Z80<br />
<a href="https://github.com/DW0RKiN/Floating-point-Library-for-Z80">https://github.com/DW0RKiN/Floating-point-Library-for-Z80</a>
</li>

<li>z80float<br />
<a href="https://github.com/Zeda/z80float">https://github.com/Zeda/z80float</a>
</li>

<li>Fixed point arithmetic<br />
<a href="https://www.root.cz/clanky/fixed-point-arithmetic/">https://www.root.cz/clanky/fixed-point-arithmetic/</a>
</li>

<li>ZX Spectrum BASIC Programming - 2nd Edition<br />
<a href="https://archive.org/details/zx-spectrum-basic-programming/page/n167/mode/2up">https://archive.org/details/zx-spectrum-basic-programming/page/n167/mode/2up</a>
</li>

<li>ZX Spectrum BASIC Programming - 2nd Edition<br />
<a href="https://archive.org/details/zx-spectrum-basic-programming/page/n169/mode/2up">https://archive.org/details/zx-spectrum-basic-programming/page/n169/mode/2up</a>
</li>

<li>How fast is memcpy on the Z80?<br />
<a href="https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80">https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80</a>
</li>

<li>How do Z80 Block Transfer instructions work?<br />
<a href="https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work">https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work</a>
</li>

<li>Retro Programming Made Simple: Keyboard<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/keyboard">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/keyboard</a>
</li>

<li>How ZX Spectrum avoided key ghosting<br />
<a href="https://retrocomputing.stackexchange.com/questions/16235/how-zx-spectrum-avoided-key-ghosting">https://retrocomputing.stackexchange.com/questions/16235/how-zx-spectrum-avoided-key-ghosting</a>
</li>

<li>ZX Spectrum Keyboard Visualized<br />
<a href="http://www.kameli.net/marq/?p=2055">http://www.kameli.net/marq/?p=2055</a>
</li>

<li>Sinclair ZX Spectrum Joysticks Explained<br />
<a href="https://www.retroisle.com/general/spectrum_joysticks.php">https://www.retroisle.com/general/spectrum_joysticks.php</a>
</li>

<li>When A Single Bit Was Enough, Into The Sound Of The ZX Spectrum<br />
<a href="https://hackaday.com/2022/01/20/when-a-single-bit-was-enough-into-the-sound-of-the-zx-spectrum/">https://hackaday.com/2022/01/20/when-a-single-bit-was-enough-into-the-sound-of-the-zx-spectrum/</a>
</li>

<li>03B5: THE 'BEEPER' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/03B5.html">https://skoolkid.github.io/rom/asm/03B5.html</a>
</li>

<li>How To Write ZX Spectrum Games – Chapter 3<br />
<a href="https://chuntey.wordpress.com/2013/02/28/how-to-write-zx-spectrum-games-chapter-3/">https://chuntey.wordpress.com/2013/02/28/how-to-write-zx-spectrum-games-chapter-3/</a>
</li>

<li>Understanding computer sound<br />
<a href="https://www.youtube.com/playlist?list=PL0qES-IQZC8w4vqeQhxHxKgxYYqs3CEOx">https://www.youtube.com/playlist?list=PL0qES-IQZC8w4vqeQhxHxKgxYYqs3CEOx</a>
</li>

<li>Understanding Computer Sound. 5. ZX Spectrum<br />
<a href="https://www.youtube.com/watch?v=N5ACJd2LvbY">https://www.youtube.com/watch?v=N5ACJd2LvbY</a>
</li>

<li>Dark Fusion (Gremlin Graphics, 1988)<br />
<a href="https://www.youtube.com/watch?v=ADL3mdRMzoA">https://www.youtube.com/watch?v=ADL3mdRMzoA</a>
</li>

<li>Arkanoid Spectrum Title Music<br />
<a href="https://www.youtube.com/watch?v=TymO0Lj7Vp8">https://www.youtube.com/watch?v=TymO0Lj7Vp8</a>
</li>

<li>Tim Follin - "Chronos" (ZX Spectrum) [Oscilloscope Visualization]<br />
<a href="https://www.youtube.com/watch?v=yJy45MHrPjc">https://www.youtube.com/watch?v=yJy45MHrPjc</a>
</li>

<li>[60 FPS] Wally Beben - "Sanxion Loader" [ZX Spectrum (Beeper)] (Oscilloscope View)<br />
<a href="https://www.youtube.com/watch?v=JwMxOfQVl7A">https://www.youtube.com/watch?v=JwMxOfQVl7A</a>
</li>

<li>Understanding Computer Sound<br />
<a href="http://forgottencomputer.com/retro/sound/">http://forgottencomputer.com/retro/sound/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

<!--
     7:00 -  8:00   10 
     8:00 -  9:00   11
     9:00 - 10:00   12
    10:00 - 11:00   13
    11:00 - 12:00   14
    12:00 - 13:00   15
    13:00 - 14:00   16
    14:00 - 15:00   17
    -->
