<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>640K by mělo stačit každému: skutečně?</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>640K by mělo stačit každému: skutečně?</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Billu Gatesovi se připisuje výrok &bdquo;640K ought to be enough for anybody&ldquo;, který ovšem pravděpodobně nikdy neřekl. Na počítačích IBM PC se skutečně dlouhou dobu bojovalo s omezenými možnostmi adresování většího paměťového rozsahu. Právě touto problematikou se budeme zabývat dnes.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. 640K by mělo stačit každému: skutečně?</a></p>
<p><a href="#k02">2. Maximální rozsah paměti IBM PC s&nbsp;mikroprocesorem 8086 či 8088</a></p>
<p><a href="#k03">3. Adresa uložená jako dvojice segment:offset</a></p>
<p><a href="#k04">4. Paměťový rozsah mikroprocesorů Intel 80286</a></p>
<p><a href="#k05">5. Limit 1MB v&nbsp;reálném režimu &ndash; jde ale skutečně o jeden megabajt?</a></p>
<p><a href="#k06">6. A20 Gate: hack, který byl podporován více než čtvrtstoletí</a></p>
<p><a href="#k07">7. HMA (<i>High Memory Area</i>)</a></p>
<p><a href="#k08">8. Využití větší kapacity RAM v&nbsp;reálném režimu</a></p>
<p><a href="#k09">9. EMS &ndash; Expanded Memory Specification</a></p>
<p><a href="#k10">10. XMS &ndash; Extended Memory Specification</a></p>
<p><a href="#k11">11. Chráněný režim na mikroprocesorech 80286</a></p>
<p><a href="#k12">12. Segmenty vs.&nbsp;deskriptory</a></p>
<p><a href="#k13">13. Vliv chráněného režimu na rychlost instrukcí</a></p>
<p><a href="#k14">14. Praktická část: základní funkce pamětí typu EMS a XMS</a></p>
<p><a href="#k15">15. Zjištění stavu (emulace) paměti typu EMS</a></p>
<p><a href="#k16">16. Detekce, kolik je k&nbsp;dispozici stránek paměti EMS</a></p>
<p><a href="#k17">17. Detekce počtu volných stránek paměti typu EMS</a></p>
<p><a href="#k18">18. Zjištění počtu volných paměťových bloků dostupných přes standard XMS</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. 640K by mělo stačit každému: skutečně?</h2>

<p>Jak již bylo napsáno v&nbsp;perexu, Billu Gatesovi (pro někoho se jedná <a
href="https://cesky.radio.cz/bill-gates-navstivil-prahu-8082662">o
vizionáře</a> a dokonce &bdquo;otce Internetu&ldquo;, pro další je to ten zlý
muž v&nbsp;IT) se často připisuje výrok &bdquo;640K ought to be enough for
anybody&ldquo;. Bill Gates to pravděpodobně nikdy neřekl, ovšem už samotná
existence této legendy napovídá, že na hodnotě 640K bude v&nbsp;kontextu
platformy IBM PC něco pravdivého. A skutečně, samotná platforma IBM PC
pochopitelně měla mnoho problémů, ostatně jako jakákoli pokročilejší
technologie, které se překonávaly jen postupně a s&nbsp;vynaložením velkých
prostředků.</p>

<p>Připomeňme si, že IBM PC se začal prodávat v&nbsp;srpnu roku 1981, tedy před
43 lety. Z&nbsp;dnešního pohledu se sice jednalo o velmi málo výkonný stroj,
ovšem v&nbsp;době vzniku IBM PC patřil tento mikropočítač v&nbsp;oblasti
osobních mikropočítačů mezi špičku, alespoň co se týká hrubého výpočetního
výkonu. Obsahoval šestnáctibitový mikroprocesor Intel 8088 (s&nbsp;vnější
sběrnicí zůženou na osm bitů) taktovaný na 4,77 MHz. Kapacita operační paměti
se pohybovala od 16 kB do 256 kB, takže se tehdy ani zdaleka nedotýkala
teoretické hranice 640 kB, na kterou se narazilo sice později, ale o to
tvrději.</p>

<p>A skutečně &ndash; o pár let později se jedním z&nbsp;největších problémů
stalo omezení maximální velikosti operační paměti (zde nazývané <i>konvenční
paměť</i>, <i>conventional memory</i>) na 640kB. Jakmile se tohoto limitu
dosáhlo, začali vývojáři i tvůrci HW pracovat na tom, jak tento limit
obejít.</p>

<p>V&nbsp;cestě jim přitom stálo mnoho překážek: hardwarová omezení
mikroprocesoru (původně malý počet adresových vodičů), omezení instrukční sady,
snaha o zpětnou kompatibilitu, omezení samotného DOSu atd. A právě cesty, které
postupně vedly k&nbsp;dostupnosti větší kapacity paměti více či méně
standardním způsobem pro uživatelské aplikace, si popíšeme v&nbsp;dnešním
článku.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Maximální rozsah paměti IBM PC s&nbsp;mikroprocesorem 8086 či 8088</h2>

<p>Nejprve se zaměřme na ústřední čip, na kterém byla celá platforma IBM
postavena. Pochopitelně se jedná o mikroprocesor Intel 8086 resp.&nbsp;přesněji
řečeno Intel 8088 (což je ořezaná varianta původního 8086, jak ostatně hned
uvidíme). Na následující dvojici obrázků jsou zobrazeny piny obou těchto
mikroprocesorů:</p>

<img src="https://i.iinfo.cz/images/202/80286-pins-1.webp" class="image-1159800" width="312" height="407" alt="&#160;" title="Autor: Intel, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Piny mikroprocesoru Intel 8086.</i></p>

<img src="https://i.iinfo.cz/images/202/80286-pins-2.gif" class="image-1159803" width="230" height="385" alt="&#160;" title="Autor: Intel, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Piny mikroprocesoru Intel 8088.</i></p>

<p>U čipu Intel 8086 nalezneme mj.&nbsp;i piny <strong>AD0</strong> až
<strong>AD15</strong> a taktéž piny <strong>A16</strong> až
<strong>A19</strong>. Naproti tomu u čipu Intel 8088 se jedná o piny
<strong>AD0</strong> až <strong>AD7</strong> následované piny
<strong>A8</strong> až <strong>A19</strong>. Žádné jiné rozdíly mezi oběma čipy
z&nbsp;externího HW pohledu neexistují. Piny začínající znaky
<strong>AD</strong> se přitom používají pro adresovou i datovou sběrnici (data
jsou multiplexována, což byl velmi často používaný způsob), zatímco piny
začínající jen znakem <strong>A</strong> značí vodiče pouze adresové sběrnice.
Co to znamená? Intel 8086 má externí datovou sběrnici se šestnácti vodiči a
adresovou sběrnici s&nbsp;dvaceti vodiči. Naproti tomu Intel 8088 má pouze
osmibitovou externí datovou sběrnici (zlevnění celého systému na úkor
rychlosti), ovšem adresová sběrnice má pořád dvacet vodičů.</p>

<p>Oba tyto mikroprocesory tedy mají vyvedeno dvacet adresových vodičů a
dokážou tak obsáhnout 2<sup>20</sup> adres. Vzhledem k&nbsp;tomu, že je
umožněno adresovat jednotlivé bajty (a nikoli 16bitová slova), je tedy celkový
rozsah adres roven přesně jednomu megabajtu. Mohlo by se zdát, že to umožňuje
použití 1MB bloku operační paměti, v&nbsp;IBM PC tomu tak ovšem nebylo, protože
společnost IBM se rozhodla, že kapacita operační paměti bude pouze maximálně
640kB, protože do zbývajících 384kB se bude mapovat obrazová paměť (64kB
resp.&nbsp;128kB), BIOS, VideoBIOS, paměťové buffery síťových karet atd. atd.
A přesně na těchto limitech byl navržen systém DOS, u nějž je zajímavé, že
nikdy tyto limity nepřekročil.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Adresa uložená jako dvojice segment:offset</h2>

<p>Nyní již víme, že na úrovni HW je adresovatelný rozsah čipů Intel 8086/Intel
8088 omezen na 1MB. Jak je tomu však z&nbsp;pohledu programátora?</p>

<p>Programátorský model mikroprocesoru Intel 8086 do určité míry vychází
z&nbsp;jeho předchůdců, tedy konkrétně z&nbsp;čipů 8080 a 8085. Došlo ovšem
k&nbsp;rozšíření sady registrů, k&nbsp;určité unifikaci jejich role (což
zjednodušilo instrukční sadu) a k&nbsp;rozšíření pracovních registrů na šířku
šestnácti bitů. Navíc se rozšířily adresovací režimy a při adresování se kromě
základní 16bitové adresy počítá i adresa segmentu získaná z&nbsp;registrů CS,
DS, ES či SS, což umožňuje adresovat 1MB paměti + necelých 64kB nad tímto
limitem (k&nbsp;tomu se ještě vrátíme). Oproti 8080 je zde tedy výrazný skok
vpřed, ovšem v&nbsp;porovnání s&nbsp;dalšími mikroprocesory této éry patří 8086
spíše mezi jednodušší mikroprocesory (což ovšem nemusí být vždy špatně).</p>

<p>Adresa buňky v&nbsp;paměti je uložena ve dvojici šestnáctibitových hodnot.
První hodnota se nazývá <i>segmentová část</i> (neboli zkráceně
<i>segment</i>), druhá hodnota je <i>offset</i>. Skutečná adresa se vypočítá
takto:</p>

<pre>
adresa = segment&times;16 + offset
</pre>

<p>Přičemž pochopitelně interně se namísto násobení šestnácti používá bitový
posun doleva. Zkusme si několik příkladů:</p>

<table>
<tr><th>Segment (16b)</th><th>Offset (16b)</th><th>Fyzická adresa (20b)</th></tr>
<tr><td>0000</td><td>0000</td><td>00000</td></tr>
<tr><td>0000</td><td>ffff</td><td>0ffff</td></tr>
<tr><td>1000</td><td>ffff</td><td>1ffff</td></tr>
<tr><td>923f</td><td>e2ff</td><td>a06ef</td></tr>
<tr><td>ffff</td><td>0000</td><td>ffff0</td></tr>
<tr><td>ffff</td><td>000f</td><td>fffff</td></tr>
<tr><td>f000</td><td>ffff</td><td>fffff</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: možná už nyní jste přišli na to, kde
spočívá určitá past tohoto způsobu výpočtu adresy. K&nbsp;této problematice se
hned dostaneme.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Paměťový rozsah mikroprocesorů Intel 80286</h2>

<p>Mikroprocesor Intel 80286, který představuje druhou generaci čipů
z&nbsp;rodiny 80x86, má oproti mikroprocesorům Intel 8086/8088 odlišně
koncipované piny, což je dobře patrné z&nbsp;následujícího obrázku:</p>

<a href="https://www.root.cz/obrazek/1159806/"><img src="https://i.iinfo.cz/images/202/80286-pins-3-prev.webp" class="image-1159806" width="274" height="270" data-prev-filename="https://i.iinfo.cz/images/202/80286-pins-3-prev.webp" data-prev-width="274" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/202/80286-pins-3-large.webp" data-large-width="532" data-large-height="525" alt="&#160;" title="Autor: Intel, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 3: Piny mikroprocesoru Intel 80286.</i></p>

<p>Vidíme zde dva důležité rozdíly. Prvním rozdílem je oddělení datové sběrnice
(která je mimochodem stále šestnáctibitová) od sběrnice adresové. To znamená,
že jsou vyvedeny samostatné vodiče <strong>D0</strong> až <strong>D15</strong>
pro obousměrné přenosy dat a není zapotřebí řešit multiplexing dat a adres. Pro
nás je ovšem dnes důležitější fakt, že adresových vodičů je nyní více;
konkrétně se jedná o piny <strong>A0</strong> až <strong>A23</strong>. To tedy
znamená, že lze adresovat 2<sup>24</sup> bajtů, protože lze opět pracovat
s&nbsp;jednotlivými bajty a nikoli jen s&nbsp;celými šestnáctibitovými slovy.
Fyzický paměťový rozsah mikroprocesorů Intel 80286 je tedy 16MB &ndash; o mnoho
více, než tomu bylo v&nbsp;případě původní první generace čipů z&nbsp;rodiny
80x86.</p>

<p>Aby bylo možné využít celý paměťový rozsah, podporují mikroprocesory 80286
takzvaný <i>chráněný režim</i>, v&nbsp;němž lze navíc (jak již jeho název
napovídá) na HW úrovni zajistit například to, že se nepřekročí nastavená
velikost zásobníku, že se nebude (například virem) modifikovat programový kód
atd. Ke konceptu chráněného režimu se ještě vrátíme. Jednalo se o důležitou
technologii, která však v&nbsp;případě 80286 nebyla plně využívána (a to hned
&nbsp;několika důvodů).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Limit 1MB v&nbsp;reálném režimu &ndash; jde ale skutečně o jeden megabajt?</h2>

<p>V&nbsp;reálném režimu mikroprocesorů 80286, což je mimochodem výchozí režim
používaný v&nbsp;DOSu, se stále používá adresace s&nbsp;využitím segmentového
registru a offsetu. Vraťme se nyní ještě jednou k&nbsp;výpočtu fyzické adresy,
který je realizován tímto zdánlivě jednoduchým výpočtem:</p>

<pre>
adresa = segment&times;16 + offset
</pre>

<p>Ve <a href="#03">třetí kapitole</a> jsme si uvedli tabulku s&nbsp;příklady
výpočtu fyzické adresy. Co se však stane na počítači vybaveném mikroprocesorem
80286 (s&nbsp;adresovým rozsahem 2<sup>24</sup> bajtů) v&nbsp;případě, že
výpočet přesáhne přes hranici jednoho megabajtu? To je totiž docela dobře
možné, což naznačuje i další tabulka:</p>

<table>
<tr><th>Segment (16b)</th><th>Offset (16b)</th><th>Fyzická adresa (24b)</th><th>Poznámka</th></tr>
<tr><td>ffff</td><td>0000</td><td>ffff0</td><td>jsme stále v&nbsp;rozsahu 1MB</td></tr>
<tr><td>ffff</td><td>000f</td><td>fffff</td><td>jsme stále v&nbsp;rozsahu 1MB</td></tr>
<tr><td>f000</td><td>ffff</td><td>fffff</td><td>jsme stále v&nbsp;rozsahu 1MB</td></tr>
<tr><td>ffff</td><td>0010</td><td>100000</td><td>první adresa, která se již nevejde do rozsahu 1MB</td></tr>
<tr><td>f001</td><td>ffff</td><td>100000</td><td>odlišná reprezentace stejné adresy</td></tr>
<tr><td>ffff</td><td>ffff</td><td>10ffef</td><td>přesáhli jsme rozsah 1MB &ndash; nejvyšší možná adresa</td></tr>
</table>

<p>Z&nbsp;této tabulky je patrné, že fyzická adresa skutečně může přesáhnout
rozsah 1MB, což na původních čipech 8086/8088 nebylo možné, už jen z&nbsp;toho
důvodu, že neexistovat adresový vodič A20 (tedy dvacátý první vodič, protože je
indexujeme od nuly).</p>

<p>O kolik bajtů (či adres) přesáhneme onu mýtickou hranici jednoho megabajtu
si můžeme snadno vypočítat:</p>

<pre>
0xffff0 + 0xffff - 0xfffff = 65520 bajtů/adres
</pre>

<p>K&nbsp;dispozici tedy máme prakticky celých 64kB navíc (kromě šestnácti
bajtů na konci). Dnes se to sice může zdát jako zanedbatelná hodnota, ale právě
kvůli oněm šedesáti čtyřem kilobajtů se komplikoval návrh PC i BIOSu až do cca
roku 2009.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. A20 Gate: hack, který byl podporován více než čtvrtstoletí</h2>

<p>Mikroprocesory 80286 byly navrženy takovým způsobem, aby byly zpětně
kompatibilní s&nbsp;původními čipy 8086/8088. Že tato zpětná kompatibilita není
stoprocentní, jsme mohli vidět již <a
href="https://www.root.cz/clanky/vyvoj-mikroprocesoru-z-rodiny-80x86-32bitove-cipy-80386-a-80486/">minule</a>,
konkrétně na příkladu instrukce <strong>POP CS</strong>, která dostala již na
mikroprocesoru 80186 (poněkud pozapomenutý čip) odlišný význam &ndash; její
operační kód je totiž nově použit jako instrukční prefix. Konkrétně
v&nbsp;případě této instrukce to však nebyla kritická nekompatibilita, protože
je těžké si představit její praktické použití.</p>

<p>Ovšem právě rozdíl v&nbsp;počtu adresovacích vodičů je další
nekompatibilitou, protože adresy nad 1MB jsou na čipech 8086/8088 ořezány na
dvacet bitů a tedy namísto adresy 0x100000 se ve skutečnosti vrátíme zpět do
nulté stránky paměti na adresu 0x00000. Totéž platí i pro dalších
&bdquo;přebývajících&ldquo; 65519 bajtů. To by se nemuselo zdát jako velký
problém, ostatně jaký &bdquo;šílenec&ldquo; by na 8086/8088 adresoval prvních
64kB paměti přes segment 0xffff? Jenže právě tato vlastnost čipů 8086/8088 byla
ve skutečnosti využita při automatické portaci programů ze systému CP/M do
DOSu. Tento trik pěkně zmiňuje například <i>Peter Norton</i> (tvůrce slavného
Norton Commanderu):</p>

<p><i>&bdquo;By a process too bizarre and complicated to explain, the segmented
address is set so that it serves two purposes. Not only does it point to the
DOS function dispatcher, but the offset part also indicates how much of the
code segment we can use (up to hex FFF0, 16 bytes short of 64K). The offset
part of the address, the part we are interested in, is located at offset 6
within the PSP, following the instruction's op-code at offset 5. The upshot of
this is that if DOS has less than 64K to give our programs, we can use this
field to learn how many bytes are available — a technique that should work with
most or all windowing and multitasking systems.&ldquo;</i></p>

<p>A právě z&nbsp;toho důvodu, aby se zachovalo zdání zpětné kompatibility
s&nbsp;8086/8088 se tvůrci IBM PC (resp.&nbsp;přesněji řečeno PC AT) rozhodli,
že do PC bude zabudováno logické hradlo, které bude (na základě konfigurace)
nulovat adresový vodič A20 a tím umožní, aby se emulovalo původní chování
8086/8088. Přes port pro ovládání klávesnice (kdo by to čekal) je tedy možné
povolit či naopak zakázat takzvané <i>A20 GATE</i>, což je ono hradlo. Pokud
hradlo nuluje hodnotu na vodiči A20, máme zaručenu zpětnou kompatibilitu (a
hodně divné chování při přístupu k&nbsp;ještě vyšším adresám v&nbsp;chráněném
režimu &ndash; to ovšem nikdo nedělá). Pokud naopak hradlo
&bdquo;propouští&ldquo; hodnotu na pinu A20, můžeme adresovat celých 16MB.</p>

<p><div class="rs-tip-major">Poznámka: toto chování je tedy zcela nezávislé na
mikroprocesoru a ten ho nemůže přímo ovlivnit.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. HMA (<i>High Memory Area</i>)</h2>

<p>V&nbsp;případě, že operační systém zakázal blokování adresového vodiče
<strong>A20</strong>, bylo na počítači pracujícího v&nbsp;reálném režimu
k&nbsp;dispozici výše zmíněných 65520 bajtů paměti &bdquo;navíc&ldquo; nad
očekávaných 640kB. Tato oblast paměti se nazývá <i>HMA</i> neboli <i>High
Memory Area</i>. Důležitá je z&nbsp;toho důvodu, že do ní bylo možné nahrát jak
část samotného operačního systému, tak i například některé ovladače (myši,
CD-ROM atd.). Jelikož se jednalo o běžnou paměť (možná jen s&nbsp;trochu
&bdquo;divným&ldquo; segmentem), tak většinou s&nbsp;využitím této paměti nebyl
žádný problém a navíc to umožnilo nahrávat do zbytku operační paměti (cca
640kB) například paměťově náročné hry.</p>

<p><div class="rs-tip-major">Poznámka: zajímavé je, že první program od
Microsoftu, který tuto paměť využíval, nebyl DOS, ale Windows 2.0 ve variantě
nazývané Windows/286.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Využití větší kapacity RAM v&nbsp;reálném režimu</h2>

<p>V&nbsp;dobách PC AT se začaly objevovat aplikace vyžadující poměrně velká
množství paměti. Jednalo se například o tabulkové procesory, databáze, ale
samozřejmě nesmíme zapomenout ani na hry. Operační systém DOS však podporoval
jen již výše zmíněných 640kB, ke kterým můžeme připočítat i HMA, tedy necelých
64kB navíc. V&nbsp;případě, že tato kapacita paměti nebyla dostačující, muselo
se přistoupit k&nbsp;využití dalších více či méně nestandardních technik,
z&nbsp;nichž některé byly později standardizovány. Mezi dva standardy, o nichž
se v&nbsp;dnešním článku musíme zmínit, patří <i>EMS</i> neboli <i>Expanded
Memory Specification</i> a <i>XMS</i> neboli <i>Extended Memory
Specification</i> (pak se nemají tyto zkratky plést). A později se u některých
aplikací prosadilo přepínání do chráněného režimu, který již umožňoval paměť
využít skutečně jako operační paměť. Všechny tyto tři techniky rozšíření paměti
budou v&nbsp;dnešním článku ve stručnosti popsány.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. EMS &ndash; Expanded Memory Specification</h2>

<p>Prvním standardem, který se snažil na platformě IBM PC zajistit aplikacím
větší množství dostupné paměti, byl standard <i>LIM-EMS</i> nebo zkráceně pouze
EMS (<i>Expanded Memory Specification</i>). Zajímavé je, že zkratka <i>LIM</i>
znamená &bdquo;Lotus, Intel, Microsoft&ldquo;, což ukazuje, jak byla společnost
Lotus tehdy důležitá (viz tabulkový procesor Lotus 1-2-3 atd.). Standard EMS
původně sloužil k&nbsp;unifikovanému přístupu k&nbsp;paměti, která byla
instalována na ISA kartách, jež byly do počítače instalovány jako jiné ISA
karty (grafické, karty s&nbsp;porty, zvukové karty, síťové karty atd.). Taková
paměť mohla být přes příslušný ovladač kompatibilní s&nbsp;EMS mapována do
dostupného adresního prostoru jednoho megabajtu, konkrétně do oblasti nad
640kB. Tato oblast je, jak víme, rezervována právě pro přídavné karty.</p>

<p>Pro EMS se typicky v&nbsp;adresním prostoru mikroprocesoru (1MB) rezervovala
oblast o velikosti 64kB, do které se mapovaly čtyři stránky (<i>page</i>)
z&nbsp;paměti EMS. To tedy znamenalo, že pokud bylo na kartě dostupných 512kB,
jednalo se o celkem 512/16=32 stránek, a libovolné čtyři vybrané stránky
(nemusely ležet za sebou) mohly být v&nbsp;jeden okamžik namapovány do
paměťového rozsahu mikroprocesoru. Jedná se tedy o techniku, kterou již známe
z&nbsp;doby osmibitových mikropočítačů. Samozřejmě takto přístupná paměť není
&bdquo;plnohodnotná&ldquo;, protože není v&nbsp;jeden okamžik přístupná jako
celek, ale aplikace sama si musí řídit, ke kterým stránkám potřebuje mít
v&nbsp;daný okamžik přístup.</p>

<p>Později byla EMS emulována, například ovladači EMM286 (s&nbsp;pomocí čipsetu
základní desky) nebo známějším EMM386. EMM286 byl složitější, ale u EMM386 se
používal virtuální režim 8086 (k&nbsp;němuž se ještě vrátíme) s&nbsp;tak vhodně
nastavenými <i>selektory</i>, aby se namísto fyzické EMS stránky používal
libovolný blok operační paměti nad 1MB.</p>

<p>Existovalo větší množství verzí standardu EMS, které se lišily mj.&nbsp;i
maximálním počtem stránek a tím pádem i maximální kapacitou EMS. Typické
hodnoty pro verzi 3.2 jsou 8MB a pro verzi 4.0 pak neuvěřitelných 32MB.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. XMS &ndash; Extended Memory Specification</h2>

<p>Druhý standard, jehož cílem bylo zpřístupnit větší množství paměti DOSovým
aplikacím, se jmenoval <i>XMS</i> neboli <i>Extended Memory Specification</i>.
A opět i tento standard existoval ve více verzích, viz například <a
href="https://www.phatcode.net/res/219/files/xms20.txt">verzi 2.0</a> a <a
href="https://www.phatcode.net/res/219/files/xms30.txt">verzi 3.0</a>. Tento
standard řešil situaci, kdy je v&nbsp;počítači nainstalována větší kapacita
operační paměti RAM (tj.&nbsp;běžné paměti) než 1MB. Samotný mikroprocesor
80286 a samozřejmě i 80386 atd. dokáže fyzicky k&nbsp;této paměti přistupovat,
ale DOSové aplikace v&nbsp;reálném režimu jsou stále omezeny na 1MB+65520 bajtů
navíc. Ovladač <i>XMS</i> zbývající paměť zpřístupňuje takovým způsobem, že se
přepne do chráněného režimu, překopíruje zvolenou oblast do oblasti pod jedním
megabajtem a následně s&nbsp;chráněného režimu přejde zpět do režimu reálného
(či naopak). Tyto operace pochopitelně nějakou dobu trvají, ovšem XMS bloky
mohou být v&nbsp;případě potřeby i poměrně malé (menší než 16kB bloky EMS),
takže zdržení nemusí být obrovské.</p>

<p>Opět se tedy nejedná striktně řečeno o &bdquo;plnohodnotnou&ldquo; paměť,
protože si sama aplikace musí řídit, které bloky XMS bude v&nbsp;daný okamžik
používat, nicméně to umožnilo, aby i aplikace psané v&nbsp;reálném režimu
dokázaly využít celou nainstalovanou RAM, i když neefektivně.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Chráněný režim na mikroprocesorech 80286</h2>

<p>Oba výše zmíněné standardy sice do určité míry pomáhaly aplikacím psaným
v&nbsp;reálném režimu využívat paměť přesahující rozsah jednoho megabajtu, ale
jak jsme mohli vidět, jednalo se o řešení, která tuto rozšířenou paměť
zpřístupňovala po stránkách nebo po blocích (a to ve druhém případě dokonce
s&nbsp;nutností kopií těchto bloků). Existovalo pochopitelně ještě jedno řešení
založené na prakticky jediné nové technologii, která byla do mikroprocesorů
80286 přidána. Jedná se o možnost přepnutí mikroprocesoru do takzvaného
chráněného režimu (<i>protected mode</i>), v&nbsp;němž se dosti podstatným
způsobem změní možnosti adresace paměti, ovšem současně se zpřístupní celý
fyzicky dostupný paměťový rozsah &ndash; teoreticky tedy až 16MB RAM. To však
není vše, protože jednotlivé části operační paměti mohly být různým způsobem
chráněny &ndash; proti přepisu, proti možnosti spuštění kódu v&nbsp;této
oblasti (skok do ní) atd. Navíc mohl být omezen (řízen) přístup k&nbsp;I/O
portům a tím pádem i přístup k&nbsp;hardware (časovače, zvukové karty,
klávesnice atd.)</p>

<p>Chráněný režim byl navržen takovým způsobem, aby umožnil vznik operačních
systémů s&nbsp;multitaskingem a ochrannými prvky mezi jednotlivými aplikacemi
resp.&nbsp;mezi aplikací a operačním systémem. Problém byl jediný &ndash;
DOSovské aplikace obecně tuto ochranu porušovaly (a musely porušovat):
přistupovaly přímo k&nbsp;HW, zapisovaly do kódových segmentů, spouštěly kód
z&nbsp;nekódových segmentů, používaly segmenty, které se překrývaly a dokonce
si takové aplikace dovolovaly volat služby DOSu a BIOSu (oba tyto systémy jsou
totiž psány pro reálný režim). Chráněný režim tedy bylo možné používat (a mnohé
aplikace ho i používaly), ale potřebovaly se buď přepínat zpět do reálného
režimu (na 286 složité a zdlouhavé) nebo využívaly takzvaných <i>extenderů</i>,
které se snažily zpřístupnit služby DOSu i z&nbsp;chráněného režimu (mnohdy
taktéž přepnutím do reálného režimu).</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Segmenty vs.&nbsp;deskriptory</h2>

<p>Z&nbsp;pohledu programátora v&nbsp;assembleru se i v&nbsp;chráněném režimu
mikroprocesoru 80286 pracuje s&nbsp;adresou, která je reprezentována dvojicí
segment+offset. Ovšem změnila se jak funkce segmentu, tak i způsob výpočtu
fyzické adresy. Nyní totiž hodnota uložená v&nbsp;segmentovém registru
nespecifikuje přímou adresu (resp.&nbsp;její část), ale (poněkud zjednodušeně
řečeno) index to tabulky deskriptorů (<i>descriptor table</i>). Tato tabulka
obsahuje takzvané <i>deskriptory</i>, přičemž pro každý deskriptor je vyhrazeno
osm bajtů, z&nbsp;nichž je ovšem na 80286 využito jen šest bajtů. Prozatím nás
nebudou zajímat podrobnosti, jak přesně jsou hodnoty v&nbsp;tabulce deskriptorů
uloženy, ale alespoň si řekněme, jaké informace každý deskriptor obsahuje:</p>

<table>
<tr><th>Označení</th><th>Počet bitů</th><th>Stručný popis</th></tr>
<tr><td>Base</td><td>24</td><td>adresa začátku segmentu kdekoli v&nbsp;prostoru 16MB</td></tr>
<tr><td>Limits</td><td>16</td><td>velikost segmentu (lze mít menší segment než 64kB)</td></tr>
<tr><td>Control bits</td><td>6</td><td>řízení práv k&nbsp;segmentu</td></tr>
<tr><td>DPL</td><td>2</td><td>úroveň oprávnění 0-3 (tzv.&nbsp;ring)</td></tr>
</table>

<p>Z&nbsp;pohledu využití operační paměti je nejdůležitější první položka
<i>Base</i>, která nám umožňuje umístit segment kamkoli v&nbsp;celém rozsahu
16MB operační paměti dosažitelné mikroprocesorem 80286. Fyzická adresa se tedy
již nepočítá jako součet posunuté hodnoty segmentu + offsetu, ale jako součet
bázové adresy segmentu (bez posunu) a offsetu. To mj.&nbsp;znamená, že přestává
platit &bdquo;segmentová aritmetika&ldquo;, která byla někdy zneužívána (jedna
stejná fyzická adresa lze zapsat jako více kombinací segment+offset).</p>

<p>Důležité taktéž je, že velikost takového segmentu lze omezit, přičemž při
překročení limitu dojde k&nbsp;výpadku, který může ošetřit například operační
systém. Můžeme tak v&nbsp;případě potřeby omezit například segment pro zásobník
(u driverů) atd.</p>

<p>Dvojice bitů DPL určuje oprávnění, které musí proces mít pro přístup do
segmentu. Existují čtyři úrovně oprávnění, od hodnoty 0 (jádro systému) pro
hodnotu 3 (uživatelské aplikace). S&nbsp;podrobnostmi se seznámíme příště.</p>

<p>Zbývá nám šest řídicích bitů, kterými se mj.&nbsp;určuje, zda je segment
systémový nebo datový (bit <strong>S</strong>), jestli segment obsahuje
spustitelný kód nebo data (bit <strong>X</strong>), jestli je povoleno čtení
dat ze segmentu (bit <strong>R</strong>) atd. Tyto bity jsou kontrolovány při
každém přístupu do segmentu a například aplikaci zakážou modifikovat kód za
běhu (ochrana před viry atd.), spouštět kód z&nbsp;datového segmentu atd.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vliv chráněného režimu na rychlost instrukcí</h2>

<p>Poměrně dlouho se tradovalo, že běh procesoru v&nbsp;chráněném režimu je
zásadně pomalejší, než je tomu v&nbsp;režimu reálném. Ve skutečnosti u naprosté
většiny instrukcí nezáleží na tom, zda probíhá v&nbsp;chráněném nebo reálném
režimu (pravděpodobně se prochází naprosto stejnými cestami). Výjimku tvoří
instrukce pro změnu segmentových registrů, protože ve skutečnosti se interně
musí načíst i <a href="#k12">výše zmíněná</a> šestice bajtů do interních
registrů mikroprocesoru. V&nbsp;praxi to znamená, že se zpomalí zejména
instrukce <strong>INT</strong> (mění CS), <strong>INTO</strong> (dtto),
<strong>MOV segment, xxx</strong>, <strong>OUT</strong>, <strong>POP
segment</strong> a &bdquo;dlouhé&ldquo; skoky resp.&nbsp;volání
podprogramů.</p>

<p>Nejdůležitější je v&nbsp;praxi zpomalení načtení hodnoty do segmentového registru:</p>

<table>
<tr><th>Instrukce</th><th>Cyklů (real)</th><th>Cyklů (protected)</th></tr>
<tr><td>mov seg, r16</td><td>2</td><td>17</td></tr>
<tr><td>mov seg, m16</td><td>5</td><td>19</td></tr>
</table>

<p>Zde je tedy zpomalení značné. Musíme si totiž uvědomit, že 80286 má stále
omezení na 16bitové segmenty, takže například součet dvou polí (matic), které
mají velikost do 64kB a kde každé z&nbsp;těchto polí leží v&nbsp;jiném segmentu
znamená, že i v&nbsp;interní programové smyčce budeme stále manipulovat
s&nbsp;obsahem segmentového registru <strong>DS</strong> a/nebo
<strong>ES</strong>, což může v&nbsp;praxi znamenat i zpomalení na 50%.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Praktická část: základní funkce pamětí typu EMS a XMS</h2>

<p>Ve druhé části dnešního článku si ukážeme čtveřici velmi jednoduchých
demonstračních příkladů, které ukazují to, jakým způsobem lze zjistit základní
údaje o pamětech typu XMS a EMS, resp.&nbsp;přesněji řečeno o jakékoli
&bdquo;nekonvenční&ldquo; paměti, která je pro programátora dostupná přes
standardní rozhraní XMS nebo EMS. Prozatím tedy v&nbsp;demonstračních
příkladech nebudeme tyto paměti aktivně používat a taktéž se (prozatím)
vyhýbáme chráněnému režimu.</p>

<p>Jednodušší je (možná překvapivě) použití paměti dostupné přes standard EMS,
a to nezávisle na tom, o jakou paměť se jedná. Na XT to mohou být ISA karty
osazené paměťovými čipy, na některých PC AT a na počítačích
s&nbsp;mikroprocesorem 80386 to většinou bude paměť nad 640kB, která je přes
<strong>EMM386</strong> či jiný ovladač dostupná i DOSovým programům.</p>

<p>Funkce, které se týkají paměti EMS, jsou dostupné přes služby vyvolávané
přerušením číslo 0x67. Tyto služby se volají stejně, jako služby standardního
BIOSu či VideoBIOSu &ndash; do registru <strong>AH</strong> se vloží číslo
služby, do dalších registrů případné další parametry a zavolá se <strong>INT
0x67</strong>. Při návratu z&nbsp;přerušení bude v&nbsp;<strong>AH</strong> kód
chyby (0=bez chyby) a v&nbsp;závislosti na konkrétní funkci se naplní i další
registry.</p>

<p>Paměť XMS se ovládá složitějším způsobem. K&nbsp;tomuto účelu slouží
přerušení číslo 0x15, které obsahuje i množství dalších služeb (je to takové
odložiště funkcí, které se jinam nevešly, například funkce pro zastavení motoru
magnetofonu na straně jedné a funkce pro přechod do chráněného režimu na straně
druhé). Co se týká XMS, jsou zde dvě důležité funkce. První zjišťuje počet
volných bloků XMS a druhá dokáže přesunout vybraný blok do adresovatelné paměti
pod 1MB. To však (kupodivu) vyžaduje základní znalosti o chráněném režimu,
protože se zde přímo pracuje s&nbsp;tabulkou deskriptorů.</p>

<p><div class="rs-tip-major">Poznámka: z&nbsp;důvodu co největší jednoduchosti
obsahují všechny dnes popsané demonstrační příklady makro určené pro tisk
osmibitové hexadecimální hodnoty (i když by se nám spíše hodila šestnáctibitová
dekadická hodnota). Prozatím si s&nbsp;tímto omezením vystačíme; navíc napsat
podprogram či makro pro tisk dekadické hodnoty není při existenci instrukce
<strong>DIV</strong> (vracející podíl i zbytek po dělení) ve skutečnosti příliš
složité.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zjištění stavu (emulace) paměti typu EMS</h2>

<p>Dnešní první demonstrační příklad je velmi jednoduchý. Je zde využita služba
číslo 0x40 dostupná přes přerušení číslo 0x67 (takže ji lze zavolat instrukcí
<strong>INT</strong>), která zjistí, v&nbsp;jakém stavu se v&nbsp;počítači
nachází paměť EMS, ať již ve formě fyzické karty, nebo v&nbsp;emulované podobě
(což podporoval DOS na čipech 80386 a některé počítače i s&nbsp;80286).
Výsledkem volání této služby je hodnota uložená do osmibitového registru
<strong>AH</strong>, kterou si v&nbsp;hexadecimální hodnotě vypíšeme.
V&nbsp;případě, že je paměť dostupná, měla by se vrátit hodnota 0,
v&nbsp;opačném případě se vrátí hodnota vyšší než 0x80. Následně je možné přes
službu 0x46 (a ne 0x40) zjistit verzi EMS atd.</p>

<p>Zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
<i>; Funkce EMS - zjisteni stavu EMS</i>
<i>;</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 386         <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>; tisk hexadecimalni hodnoty</i>
%macro <strong>print_hex</strong> 1
        mov     bx, hex_digits
        mov     cl, %1                <i>; zapamatovat si predanou hodnotu</i>
&nbsp;
        mov     al, cl                <i>; do AL se vlozi horni hexa cifra</i>
        and     al, 0xf0
        shr     al, 1
        shr     al, 1
        shr     al, 1
        shr     al, 1
&nbsp;
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message], al         <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        mov     al, cl                <i>; do BL se vlozi dolni hexa cifra</i>
        and     al, 0x0f
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message + 1], al     <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        print   message
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        mov  ah, 0x40  <i>; cislo sluzby -> stav EMS</i>
	int  0x67      <i>; zavolani sluzby EMS</i>
&nbsp;
        mov  al, ah    <i>; stav sluzby</i>
        print_hex al
&nbsp;
        wait_key
        exit
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>message</strong> db 0x01, 0x01, 0x0d, 0x0a, "$"
&nbsp;
        <i>; prevodni tabulka hodnoty 0-15 na ASCII znak</i>
<strong>hex_digits</strong> db "0123456789abcdef"
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Detekce, kolik je k&nbsp;dispozici stránek paměti EMS</h2>

<p>Ve druhém demonstračním příkladu, který si dnes ukážeme, se provádí
zjištění, kolik stránek paměti EMS je k&nbsp;dispozici. K&nbsp;tomuto účelu se
používá služba číslo 0x42 dostupná (opět) přes přerušení 0x67. V&nbsp;registru
<strong>AH</strong> se opět vrátí stav EMS a další hodnoty jsou platné jen
v&nbsp;případě, že je v&nbsp;tomto registru nulová hodnota. V&nbsp;registru
<strong>DX</strong> se vrátí celkový počet stránek EMS, přičemž každá stránka
má velikost 16kB. Teoreticky by tedy mohla kapacita EMS dosahovat 1GB (!), ve
skutečnosti ovšem specifikace EMS povoluje pouze 32MB (a i to bylo v&nbsp;době
uvedení normy EMS téměř nepředstavitelné množství).</p>

<p>V&nbsp;mém případě (emulace PC) tento program vypíše trojici hexadecimálních
hodnot:</p>

<pre>
00
04
00
</pre>

<p>První hodnotou je stav EMS (0=OK) a druhé dvě hodnoty tvoří hexadecimální
číslo 0x400 neboli decimálně 1024. K&nbsp;dispozici má tedy můj počítač 1024
stránek o velikosti 16kB, tedy celkem 16MB EMS, což odpovídá i výstupu příkazu
<strong>mem</strong>.</p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
<i>; Funkce EMS - zjisteni alokovane EMS</i>
<i>;</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 386         <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>; tisk hexadecimalni hodnoty</i>
%macro <strong>print_hex</strong> 1
        mov     bx, hex_digits
        mov     cl, %1                <i>; zapamatovat si predanou hodnotu</i>
&nbsp;
        mov     al, cl                <i>; do AL se vlozi horni hexa cifra</i>
        and     al, 0xf0
        shr     al, 1
        shr     al, 1
        shr     al, 1
        shr     al, 1
&nbsp;
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message], al         <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        mov     al, cl                <i>; do BL se vlozi dolni hexa cifra</i>
        and     al, 0x0f
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message + 1], al     <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        print   message
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        mov  ah, 0x42  <i>; cislo sluzby -> pocet stranek pameti</i>
	int  0x67      <i>; zavolani sluzby EMS</i>
&nbsp;
        push dx
	mov  al, ah
        print_hex al   <i>; stav EMS</i>
&nbsp;
	pop  dx
        push dx
	mov  al, dh    <i>; celkem stranek (vyssi bajt)</i>
        print_hex al
&nbsp;
	pop  dx
	mov  al, dl    <i>; celkem stranek (nizsi bajt)</i>
        print_hex al
&nbsp;
        wait_key
        exit
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>message</strong> db 0x01, 0x01, 0x0d, 0x0a, "$"
&nbsp;
        <i>; prevodni tabulka hodnoty 0-15 na ASCII znak</i>
<strong>hex_digits</strong> db "0123456789abcdef"
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Detekce počtu volných stránek paměti typu EMS</h2>

<p>Stejná služba, jaká byla použita <a href="#k16">v&nbsp;předchozím
demonstračním příkladu</a> navíc ještě vrátí i počet volných stránek paměti
typu EMS, což bude (podle očekávání) hodnota stejná nebo menší, než celkový
počet stránek. Tento údaj nalezneme v&nbsp;registru <strong>BX</strong>, takže
se podívejme, jak bude vypadat situace na mém počítači. Tento program po svém
překladu a spuštění vypíše:</p>

<pre>
00
01
7F
</pre>

<p>První hodnota 00 opět ukazuje stav EMS (ok) a druhé dvě hodnoty tvoří
hexadecimální číslo 0x17f neboli 383. Z&nbsp;celkově dostupné kapacity 1024
stránek je tedy pouze 383 stránek volných, což při velikosti stránky 16kB
odpovídá 6MB EMS.</p>

<p>Opět si pochopitelně uvedeme úplný zdrojový kód tohoto demonstračního
příkladu, který je vlastně prakticky stejný, jako příklad předchozí, ovšem
došlo k&nbsp;prohození registru <strong>DX</strong> za <strong>BX</strong>:</p>

<pre>
<i>; Funkce EMS - zjisteni volne EMS</i>
<i>;</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 386         <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>; tisk hexadecimalni hodnoty</i>
%macro <strong>print_hex</strong> 1
        mov     bx, hex_digits
        mov     cl, %1                <i>; zapamatovat si predanou hodnotu</i>
&nbsp;
        mov     al, cl                <i>; do AL se vlozi horni hexa cifra</i>
        and     al, 0xf0
        shr     al, 1
        shr     al, 1
        shr     al, 1
        shr     al, 1
&nbsp;
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message], al         <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        mov     al, cl                <i>; do BL se vlozi dolni hexa cifra</i>
        and     al, 0x0f
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message + 1], al     <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        print   message
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        mov  ah, 0x42  <i>; cislo sluzby -> pocet stranek pameti</i>
	int  0x67      <i>; zavolani sluzby EMS</i>
&nbsp;
        push bx
	mov  al, ah
        print_hex al   <i>; stav EMS</i>
&nbsp;
	pop  bx
        push bx
	mov  al, dh    <i>; volnych stranek (vyssi bajt)</i>
        print_hex al
&nbsp;
	pop  bx
	mov  al, dl    <i>; volnych stranek (nizsi bajt)</i>
        print_hex al
&nbsp;
        wait_key
        exit
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>message</strong> db 0x01, 0x01, 0x0d, 0x0a, "$"
&nbsp;
        <i>; prevodni tabulka hodnoty 0-15 na ASCII znak</i>
<strong>hex_digits</strong> db "0123456789abcdef"
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Zjištění počtu volných paměťových bloků dostupných přes standard XMS</h2>

<p><a href="#14">V&nbsp;úvodním textu praktické části</a> dnešního článku jsme
si řekli, že přes služby vyvolávané přerušením číslo 0x15 (tedy instrukcí
<strong>INT 0x15</strong>) můžeme mj.&nbsp;zjistit i počet volných paměťových
bloků, které lze využívat přes standard XMS. Použití této služby je ve
skutečnosti velmi jednoduché, protože postačuje do registru <strong>AH</strong>
vložit číslo služby 0x88 a vyvolat <strong>INT 0x15</strong>. V&nbsp;registru
<strong>AX</strong> se vrátí počet dostupných bloků paměti XMS, přičemž každý
blok má velikost 1kB. To teoreticky znamená, že maximální dostupná kapacita XMS
je rovna 64MB. To přesahuje možnosti čipu 80286 a jedná se spíše o teoretický
limit; v&nbsp;praxi byla kapacita XMS menší než 8MB &ndash; v&nbsp;dobách
dostupnosti více než 8MB RAM se již operační systém DOS na takových strojích
nepoužíval (mimochodem: na 486DX2 s&nbsp;8MB RAM již zcela bezproblémově běžel
Linux i se systémem X).</p>

<p><div class="rs-tip-major">Poznámka: prakticky se ovšem začaly používat
odlišné služby, jejichž adresu je však nutné zjistit přes službu 0x43 na INT
0x23. S&nbsp;podrobnostmi se seznámíme později.</div></p>

<p>Podívejme se však na úplný zdrojový kód příkladu, který získá počet volných
bloků XMS a vypíše ho (v&nbsp;hexadecimální podobě!) na terminál:</p>

<pre>
<i>; Funkce XMS - zjisteni volnych bloku.</i>
<i>;</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 386         <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>; tisk hexadecimalni hodnoty</i>
%macro <strong>print_hex</strong> 1
        mov     bx, hex_digits
        mov     cl, %1                <i>; zapamatovat si predanou hodnotu</i>
&nbsp;
        mov     al, cl                <i>; do AL se vlozi horni hexa cifra</i>
        and     al, 0xf0
        shr     al, 1
        shr     al, 1
        shr     al, 1
        shr     al, 1
&nbsp;
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message], al         <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        mov     al, cl                <i>; do BL se vlozi dolni hexa cifra</i>
        and     al, 0x0f
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message + 1], al     <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        print   message
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        mov  ah, 0x88  <i>; cislo sluzby -> pocet volnych bloku</i>
	int  0x15      <i>; zavolani sluzby XMS</i>
&nbsp;
        push ax
	mov  al, ah    <i>; zobrazit obsah vyssiho bajtu</i>
        print_hex al   <i>; pocet bloku (vyssi bajt)</i>
&nbsp;
	pop  ax        <i>; obnovit (mj.) i AL</i>
        print_hex al   <i>; pocet bloku (nizsi bajt)</i>
&nbsp;
        wait_key
        exit
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>message</strong> db 0x01, 0x01, 0x0d, 0x0a, "$"
&nbsp;
        <i>; prevodni tabulka hodnoty 0-15 na ASCII znak</i>
<strong>hex_digits</strong> db "0123456789abcdef"
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad s&nbsp;využitím assembleru <strong>NASM</strong>, byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>hello.asm</td><td>program typu &bdquo;Hello world&ldquo; naprogramovaný v&nbsp;assembleru pro systém DOS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm</a></td></tr>
<tr><td> 2</td><td>hello_shorter.asm</td><td>kratší varianta výskoku z&nbsp;procesu zpět do DOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm</a></td></tr>
<tr><td> 3</td><td>hello_wait.asm</td><td>čekání na stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm</a></td></tr>
<tr><td> 4</td><td>hello_macros.asm</td><td>realizace jednotlivých částí programu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>gfx_4_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm</a></td></tr>
<tr><td> 6</td><td>gfx_6_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm</a></td></tr>
<tr><td> 7</td><td>gfx_4_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm</a></td></tr>
<tr><td> 8</td><td>gfx_6_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>gfx_6_fill_1.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm</a></td></tr>
<tr><td>10</td><td>gfx_6_fill_2.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, varianta s&nbsp;instrukcí <strong>LOOP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm</a></td></tr>
<tr><td>11</td><td>gfx_6_fill_3.asm</td><td>vyplnění obrazovky instrukcí <strong>REP STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm</a></td></tr>
<tr><td>12</td><td>gfx_6_fill_4.asm</td><td>vyplnění obrazovky, synchronizace vykreslování s&nbsp;paprskem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>gfx_4_image_1.asm</td><td>vykreslení rastrového obrázku získaného z&nbsp;binárních dat, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm</a></td></tr>
<tr><td>14</td><td>gfx_4_image_2.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm</a></td></tr>
<tr><td>15</td><td>gfx_4_image_3.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm</a></td></tr>
<tr><td>16</td><td>gfx_4_image_4.asm</td><td>korektní vykreslení všech sudých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm</a></td></tr>
<tr><td>17</td><td>gfx_4_image_5.asm</td><td>korektní vykreslení všech sudých i lichých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>gfx_4_image_6.asm</td><td>nastavení barvové palety před vykreslením obrázku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm</a></td></tr>
<tr><td>19</td><td>gfx_4_image_7.asm</td><td>nastavení barvové palety před vykreslením obrázku, snížená intenzita barev</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm</a></td></tr>
<tr><td>20</td><td>gfx_4_image_8.asm</td><td>postupná změna barvy pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>gfx_6_putpixel_1.asm</td><td>vykreslení pixelu, základní varianta se 16bitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm</a></td></tr>
<tr><td>22</td><td>gfx_6_putpixel_2.asm</td><td>vykreslení pixelu, varianta s&nbsp;osmibitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm</a></td></tr>
<tr><td>23</td><td>gfx_6_putpixel_3.asm</td><td>vykreslení pixelu, varianta bez násobení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm</a></td></tr>
<tr><td>24</td><td>gfx_6_putpixel_4.asm</td><td>vykreslení pixelu přes obrázek, nekorektní chování (přepis obrázku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm</a></td></tr>
<tr><td>25</td><td>gfx_6_putpixel_5.asm</td><td>vykreslení pixelu přes obrázek, korektní varianta pro bílé pixely</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>cga_text_mode_1.asm</td><td>standardní textový režim s&nbsp;rozlišením 40&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm</a></td></tr>
<tr><td>27</td><td>cga_text_mode_3.asm</td><td>standardní textový režim s&nbsp;rozlišením 80&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm</a></td></tr>
<tr><td>28</td><td>cga_text_mode_intensity.asm</td><td>změna významu nejvyššího bitu atributového bajtu: vyšší intenzita namísto blikání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm</a></td></tr>
<tr><td>29</td><td>cga_text_mode_cursor.asm</td><td>změna tvaru textového kurzoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm</a></td></tr>
<tr><td>30</td><td>cga_text_gfx_1.asm</td><td>zobrazení &bdquo;rastrové mřížky&ldquo;: pseudografický režim 160&times;25 pixelů (interně textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm</a></td></tr>
<tr><td>31</td><td>cga_text_mode_char_height.asm</td><td>změna výšky znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm</a></td></tr>
<tr><td>32</td><td>cga_text_160x100.asm</td><td>grafický režim 160&times;100 se šestnácti barvami (interně upravený textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>hercules_text_mode_1.asm</td><td>využití standardního textového režimu společně s&nbsp;kartou Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm</a></td></tr>
<tr><td>34</td><td>hercules_text_mode_2.asm</td><td>zákaz blikání v&nbsp;textových režimech</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm</a></td></tr>
<tr><td>35</td><td>hercules_turn_off.asm</td><td>vypnutí generování video signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm</a></td></tr>
<tr><td>36</td><td>hercules_gfx_mode_1.asm</td><td>přepnutí karty Hercules do grafického režimu (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm</a></td></tr>
<tr><td>37</td><td>hercules_gfx_mode_2.asm</td><td>přepnutí karty Hercules do grafického režimu (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm</a></td></tr>
<tr><td>38</td><td>hercules_putpixel.asm</td><td>subrutina pro vykreslení jediného pixelu na kartě Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>ega_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm</a></td></tr>
<tr><td>40</td><td>ega_text_mode_80x43.asm</td><td>zobrazení 43 textových řádků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm</a></td></tr>
<tr><td>41</td><td>ega_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm</a></td></tr>
<tr><td>42</td><td>ega_gfx_mode_640x200.asm</td><td>přepnutí do grafického režimu 640&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm</a></td></tr>
<tr><td>43</td><td>ega_gfx_mode_640x350.asm</td><td>přepnutí do grafického režimu 640&times;350 pixelů se čtyřmi nebo šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm</a></td></tr>
<tr><td>44</td><td>ega_gfx_mode_bitplanes_1.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (základní způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm</a></td></tr>
<tr><td>45</td><td>ega_gfx_mode_bitplanes_2.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (rychlejší způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>ega_320x200_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm</a></td></tr>
<tr><td>47</td><td>ega_640x350_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 640&times;350 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>48</td><td>ega_standard_font.asm</td><td>použití standardního fontu grafické karty EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm</a></td></tr>
<tr><td>49</td><td>ega_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>ega_palette_1.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 320&times;200 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm</a></td></tr>
<tr><td>51</td><td>ega_palette_2.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 640&times;350 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm</a></td></tr>
<tr><td>52</td><td>ega_palette_3.asm</td><td>změna všech barev v&nbsp;barvové paletě s&nbsp;využitím programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm</a></td></tr>
<tr><td>53</td><td>ega_palette_4.asm</td><td>změna všech barev, včetně barvy okraje, v&nbsp;barvové paletě voláním funkce BIOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>vga_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm</a></td></tr>
<tr><td>55</td><td>vga_text_mode_80x50.asm</td><td>zobrazení 50 a taktéž 28 textových řádků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm</a></td></tr>
<tr><td>56</td><td>vga_text_mode_intensity_1.asm</td><td>změna chování atributového bitu pro blikání (nebezpečná varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm</a></td></tr>
<tr><td>57</td><td>vga_text_mode_intensity_2.asm</td><td>změna chování atributového bitu pro blikání (bezpečnější varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm</a></td></tr>
<tr><td>58</td><td>vga_text_mode_9th_column.asm</td><td>modifikace způsobu zobrazení devátého sloupce ve znakových režimech (720 pixelů na řádku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm</a></td></tr>
<tr><td>59</td><td>vga_text_mode_cursor_shape.asm</td><td>změna tvaru textového kurzoru na grafické kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm</a></td></tr>
<tr><td>60</td><td>vga_text_mode_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>vga_gfx_mode_640x480.asm</td><td>přepnutí do grafického režimu 640&times;480 pixelů se šestnácti barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm</a></td></tr>
<tr><td>62</td><td>vga_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů s&nbsp;256 barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm</a></td></tr>
<tr><td>63</td><td>vga_gfx_mode_palette.asm</td><td>změna všech barev v&nbsp;barvové paletě grafické karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm</a></td></tr>
<tr><td>64</td><td>vga_gfx_mode_dac_1.asm</td><td>využití DAC (neočekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm</a></td></tr>
<tr><td>65</td><td>vga_gfx_mode_dac_2.asm</td><td>využití DAC (očekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>66</td><td>vga_640x480_putpixel.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 640&times;480 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm</a></td></tr>
<tr><td>67</td><td>vga_320x200_putpixel_1.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm</a></td></tr>
<tr><td>68</td><td>vga_320x200_putpixel_2.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (rychlejší varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>69</td><td>vga_gfx_mode_dac_3.asm</td><td>přímé využití DAC v&nbsp;grafickém režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>70</td><td>vga_gfx_mode_unchained_step_1.asm</td><td>zobrazení barevných pruhů v&nbsp;režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm</a></td></tr>
<tr><td>71</td><td>vga_gfx_mode_unchained_step_2.asm</td><td>vypnutí zřetězení bitových rovin a změna způsobu adresování pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm</a></td></tr>
<tr><td>72</td><td>vga_gfx_mode_unchained_step_3.asm</td><td>vykreslení barevných pruhů do vybraných bitových rovin</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>73</td><td>vga_gfx_mode_320x400.asm</td><td>nestandardní grafický režim s&nbsp;rozlišením 320&times;400 pixelů a 256 barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm</a></td></tr>
<tr><td>74</td><td>vga_320x200_image.asm</td><td>zobrazení rastrového obrázku ve standardním grafickém režimu 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm</a></td></tr>
<tr><td>75</td><td>vga_320x200_unchained_image_1.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm</a></td></tr>
<tr><td>76</td><td>vga_320x200_unchained_image_2.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm</a></td></tr>
<tr><td>77</td><td>vga_320x400_unchained_image.asm</td><td>zobrazení rastrového obrázku v&nbsp;nestandardním režimu 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>78</td><td>vga_vertical_scroll_1.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm</a></td></tr>
<tr><td>79</td><td>vga_vertical_scroll_2.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm</a></td></tr>
<tr><td>80</td><td>vga_split_screen_1.asm</td><td>režim split-screen a scrolling, nefunční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm</a></td></tr>
<tr><td>81</td><td>vga_split_screen_2.asm</td><td>režim split-screen a scrolling, plně funkční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm</a></td></tr>
<tr><td>82</td><td>vga_horizontal_scroll_1.asm</td><td>horizontální scrolling bez rozšíření počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm</a></td></tr>
<tr><td>83</td><td>vga_horizontal_scroll_2.asm</td><td>horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm</a></td></tr>
<tr><td>84</td><td>vga_horizontal_scroll_3.asm</td><td>jemný horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>85</td><td>vga_320x240_image.asm</td><td>nastavení grafického režimu Mode-X, načtení a vykreslení obrázku, scrolling</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>86</td><td>io.asm</td><td>knihovna maker pro I/O operace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm</a></td></tr>
<tr><td>87</td><td>vga_lib.asm</td><td>knihovna maker a podprogramů pro programování karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_lib.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_lib.asm</a></td></tr>
<tr><td>88</td><td>vga_320x240_lib.asm</td><td>nastavení grafického režimu Mode-X, tentokrát knihovními funkcemi</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_lib.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_lib.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>89</td><td>vga_bitblt_1.asm</td><td>první (naivní) implementace operace <i>BitBLT</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_1.asm</a></td></tr>
<tr><td>90</td><td>vga_bitblt_2.asm</td><td>operace <i>BitBLT</i> s&nbsp;výběrem bitových rovin pro zápis</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_2.asm</a></td></tr>
<tr><td>91</td><td>vga_bitblt_3.asm</td><td>operace <i>BitBLT</i> s&nbsp;výběrem bitových rovin pro čtení i zápis</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_3.asm</a></td></tr>
<tr><td>92</td><td>vga_bitblt_4.asm</td><td>korektní <i>BitBLT</i> pro 16barevný režim, realizace makry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_4.asm</a></td></tr>
<tr><td>93</td><td>vga_bitblt_5.asm</td><td>korektní <i>BitBLT</i> pro 16barevný režim, realizace podprogramem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>94</td><td>vga_bitblt_rotate.asm</td><td>zápisový režim s&nbsp;rotací bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_rotate.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_rotate.asm</a></td></tr>
<tr><td>95</td><td>vga_bitblt_fast.asm</td><td>rychlá korektní 32bitová operace typu <i>BitBLT</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_fast.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_fast.asm</a></td></tr>
<tr><td>96</td><td>vga_320x400_bitblt_1.asm</td><td>přenos obrázku v&nbsp;režimu 320&times;400 operací <i>BitBLT</i> (neúplná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_1.asm</a></td></tr>
<tr><td>97</td><td>vga_320x400_bitblt_2.asm</td><td>přenos obrázku v&nbsp;režimu 320&times;400 operací <i>BitBLT</i> (úplná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_2.asm</a></td></tr>
<tr><td>98</td><td>vga_write_modes_1.asm</td><td>volitelné zápisové režimy grafické karty VGA, zápis bez úpravy latche</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_1.asm</a></td></tr>
<tr><td>99</td><td>vga_write_modes_2.asm</td><td>volitelné zápisové režimy grafické karty VGA, zápis s&nbsp;modifikací latche</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_2.asm</a></td></tr>
<tr><td>100</td><td>vga_write_modes_3.asm</td><td>volitelné zápisové režimy grafické karty VGA, cílená modifikace latche vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>101</td><td>instruction_jump.asm</td><td>použití instrukce <strong>JMP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jump.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jump.asm</a></td></tr>
<tr><td>102</td><td>instruction_jnz.asm</td><td>použití instrukce <strong>JNZ</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jnz.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jnz.asm</a></td></tr>
<tr><td>103</td><td>instruction_jz_jmp.asm</td><td>použití instrukcí <strong>JZ</strong> a <strong>JMP</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jz_jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jz_jmp.asm</a></td></tr>
<tr><td>104</td><td>instruction_loop.asm</td><td>použití instrukce <strong>LOOP</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_loop.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>105</td><td>instruction_template.asm</td><td>šablona všech následujících demonstračních příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_template.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_template.asm</a></td></tr>
<tr><td>106</td><td>instruction_print_hex.asm</td><td>tisk osmibitové hexadecimální hodnoty</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_print_hex.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_print_hex.asm</a></td></tr>
<tr><td>107</td><td>instruction_xlat.asm</td><td>využití instrukce <strong>XLAT</strong> pro získání tisknutelné hexadecimální cifry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_xlat.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_xlat.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>108</td><td>instruction_daa.asm</td><td>operace součtu s&nbsp;využitím binární i BCD aritmetiky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa.asm</a></td></tr>
<tr><td>109</td><td>instruction_daa_sub.asm</td><td>instrukce <strong>DAA</strong> po provedení operace rozdílu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa_sub.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa_sub.asm</a></td></tr>
<tr><td>110</td><td>instruction_das.asm</td><td>instrukce <strong>DAS</strong> po provedení operace rozdílu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_das.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_das.asm</a></td></tr>
<tr><td>111</td><td>instruction_aaa.asm</td><td>korekce výsledku na jedinou BCD cifru operací <strong>AAA</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aaa.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aaa.asm</a></td></tr>
<tr><td>112</td><td>instruction_mul.asm</td><td>ukázka výpočtu součinu dvou osmibitových hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_mul.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_mul.asm</a></td></tr>
<tr><td>113</td><td>instruction_aam.asm</td><td>BCD korekce po výpočtu součinu instrukcí <strong>AAM</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aam.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aam.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>114</td><td>instruction_stosb.asm</td><td>blokový zápis dat instrukcí <strong>STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_stosb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_stosb.asm</a></td></tr>
<tr><td>115</td><td>instruction_rep_stosb.asm</td><td>opakované provádění instrukce <strong>STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_stosb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_stosb.asm</a></td></tr>
<tr><td>116</td><td>instruction_lodsb.asm</td><td>čtení dat instrukcí <strong>LODSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_lodsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_lodsb.asm</a></td></tr>
<tr><td>117</td><td>instruction_movsb.asm</td><td>přenos jednoho bajtu instrukcí <strong>MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_movsb.asm</a></td></tr>
<tr><td>118</td><td>instruction_rep_movsb.asm</td><td>blokový přenos po bajtech instrukcí <strong>MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_movsb.asm</a></td></tr>
<tr><td>119</td><td>instruction_rep_scas.asm</td><td>vyhledávání v&nbsp;řetězci instrukcí <strong>SCAS</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_scas.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_scas.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>120</td><td>vga_320x200_image_0B.asm</td><td>výsledek blokového přenosu ve chvíli, kdy je <strong>CX=0</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_0B.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_0B.asm</a></td></tr>
<tr><td>121</td><td>vga_320x200_image_64kB.asm</td><td>výsledek blokového přenosu ve chvíli, kdy je <strong>CX=0xffff</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_64kB.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_64kB.asm</a></td></tr>
<tr><td>122</td><td>vga_320x200_image_movsb.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb.asm</a></td></tr>
<tr><td>123</td><td>vga_320x200_image_movsw.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsw.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsw.asm</a></td></tr>
<tr><td>124</td><td>vga_320x200_image_movsd.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSD</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsd.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsd.asm</a></td></tr>
<tr><td>125</td><td>vga_320x200_image_movsb_forward.asm</td><td>blokový přenos překrývajících se bloků paměti (zvyšující se adresy)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_forward.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_forward.asm</a></td></tr>
<tr><td>126</td><td>vga_320x200_image_movsb_backward_1.asm</td><td>blokový přenos překrývajících se bloků paměti (snižující se adresy, nekorektní nastavení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_1.asm</a></td></tr>
<tr><td>127</td><td>vga_320x200_image_movsb_backward_2.asm</td><td>blokový přenos překrývajících se bloků paměti (snižující se adresy, korektní nastavení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>128</td><td>sound_bell.asm</td><td>přehrání zvuku pomocí tisku ASCII znaku BELL</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_bell.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_bell.asm</a></td></tr>
<tr><td>129</td><td>sound_beep.asm</td><td>přehrání zvuku o zadané frekvenci na PC Speakeru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_beep.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_beep.asm</a></td></tr>
<tr><td>130</td><td>sound_play_pitch.asm</td><td>přehrání zvuku o zadané frekvenci na PC Speakeru, použití maker</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_play_pitch.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_play_pitch.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>131</td><td>sound_opl2_basic.asm</td><td>přehrání komorního A na OPL2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_basic.asm</a></td></tr>
<tr><td>132</td><td>sound_opl2_table.asm</td><td>přehrání komorního A na OPL2, použití tabulky s&nbsp;hodnotami registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>133</td><td>sound_opl2_table_2.asm</td><td>přepis tabulky s&nbsp;obsahy registrů pro přehrání komorního A</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table_2.asm</a></td></tr>
<tr><td>134</td><td>sound_key_on.asm</td><td>přímé ovládání bitu KEY ON mezerníkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_key_on.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_key_on.asm</a></td></tr>
<tr><td>135</td><td>sound_adsr.asm</td><td>nastavení obálky pro tón přehrávaný prvním kanálem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_adsr.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_adsr.asm</a></td></tr>
<tr><td>136</td><td>sound_modulation.asm</td><td>řízení frekvence modulátoru klávesami 1 a 0</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_modulation.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_modulation.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>137</td><td>keyboard_basic.asm</td><td>přímá práce s&nbsp;klávesnicí IBM PC</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/keyboard_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/keyboard_basic.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>138</td><td>sound_stereo_opl2.asm</td><td>stereo zvuk v&nbsp;konfiguraci DualOPL2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_stereo_opl2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_stereo_opl2.asm</a></td></tr>
<tr><td>139</td><td>sound_opl2_multichannel.asm</td><td>vícekanálový zvuk na OPL2 (klávesy), delší varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel.asm</a></td></tr>
<tr><td>140</td><td>sound_opl2_multichannel_2.asm</td><td>vícekanálový zvuk na OPL2 (klávesy), kratší varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel_2.asm</a></td></tr>
<tr><td>141</td><td>sound_opl3_stereo_1.asm</td><td>stereo výstup na OPL3 (v&nbsp;kompatibilním režimu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_1.asm</a></td></tr>
<tr><td>142</td><td>sound_opl3_stereo_2.asm</td><td>stereo výstup na OPL3 (v&nbsp;režimu OPL3)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_2.asm</a></td></tr>
<tr><td>143</td><td>sound_opl3_multichannel.asm</td><td>vícekanálový zvuk na OPL3 (klávesy)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_multichannel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_multichannel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>144</td><td>sound_opl3_waveform_1.asm</td><td>interaktivní modifikace tvaru vlny u prvního operátoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_1.asm</a></td></tr>
<tr><td>145</td><td>sound_opl3_waveform_2.asm</td><td>oprava chyby: povolení režimu kompatibilního s&nbsp;OPL3</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_2.asm</a></td></tr>
<tr><td>146</td><td>sound_opl3_waveform_3.asm</td><td>vliv tvaru vln na zvukový kanál s&nbsp;FM syntézou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_3.asm</a></td></tr>
<tr><td>147</td><td>sound_opl3_waveform_4.asm</td><td>modifikace tvaru vlny nosné vlny i modulátoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_4.asm</a></td></tr>
<tr><td>148</td><td>sound_opl3_4operators_1.asm</td><td>výběr AM/FM režimu ve čtyřoperátorovém nastavení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_1.asm</a></td></tr>
<tr><td>149</td><td>sound_opl3_4operators_2.asm</td><td>výběr AM/FM režimu ve čtyřoperátorovém nastavení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>150</td><td>timer_basic.asm</td><td>základní obsluha přerušení od časovače/čítače</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_basic.asm</a></td></tr>
<tr><td>151</td><td>timer_restore.asm</td><td>obnovení původní obsluhy přerušení při ukončování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore.asm</a></td></tr>
<tr><td>152</td><td>timer_restore_better_structure.asm</td><td>refaktoring předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore_better_structure.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore_better_structure.asm</a></td></tr>
<tr><td>153</td><td>timer_faster_clock.asm</td><td>zrychlení čítače na 100 přerušení za sekundu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_faster_clock.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_faster_clock.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>154</td><td>instruction_push_imm.asm</td><td>instrukce <strong>PUSH</strong> s&nbsp;konstantou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_imm.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_imm.asm</a></td></tr>
<tr><td>155</td><td>instruction_imul_imm.asm</td><td>instrukce <strong>IMUL</strong> s&nbsp;konstantou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_imul_imm.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_imul_imm.asm</a></td></tr>
<tr><td>156</td><td>instruction_into_1.asm</td><td>instrukce <strong>INTO</strong> s&nbsp;obsluhou přerušení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_1.asm</a></td></tr>
<tr><td>157</td><td>instruction_into_2.asm</td><td>instrukce <strong>INTO</strong> s&nbsp;obsluhou přerušení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_2.asm</a></td></tr>
<tr><td>158</td><td>instruction_bound_1.asm</td><td>instrukce <strong>BOUND</strong> s&nbsp;obsluhou přerušení (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_1.asm</a></td></tr>
<tr><td>159</td><td>instruction_bound_2.asm</td><td>instrukce <strong>BOUND</strong> s&nbsp;obsluhou přerušení (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_2.asm</a></td></tr>
<tr><td>160</td><td>vga_320x200_putpixel_286.asm</td><td>instrukce bitového posunu s&nbsp;konstantou větší než 1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_286.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_286.asm</a></td></tr>
<tr><td>161</td><td>instruction_push_pop.asm</td><td>instrukce <strong>PUSH</strong> a <strong>POP</strong> se všemi pracovními registry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>162</td><td>instruction_push_pop_B.asm</td><td>instrukce s&nbsp;novými segmentovými registry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop_B.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop_B.asm</a></td></tr>
<tr><td>163</td><td>instruction_near_jz_jmp.asm</td><td>blízké skoky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_near_jz_jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_near_jz_jmp.asm</a></td></tr>
<tr><td>164</td><td>instruction_bsf.asm</td><td>nová instrukce <strong>BSF</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsf.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsf.asm</a></td></tr>
<tr><td>165</td><td>instruction_bsr.asm</td><td>nová instrukce <strong>BSR</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsr.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsr.asm</a></td></tr>
<tr><td>166</td><td>instruction_add_32bit.asm</td><td>32bitový součet</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_add_32bit.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_add_32bit.asm</a></td></tr>
<tr><td>167</td><td>instruction_inc_32bit.asm</td><td>32bitová instrukce <strong>INC</strong> v&nbsp;šestnáctibitovém režimu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit.asm</a></td></tr>
<tr><td>168</td><td>instruction_inc_32bit_B.asm</td><td>32bitová instrukce <strong>INC</strong> v&nbsp;32bitovém režimu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit_B.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit_B.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>169</td><td>ems_status.asm</td><td>zjištění stavu (emulace) paměti EMS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_status.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_status.asm</a></td></tr>
<tr><td>170</td><td>ems_total_mem.asm</td><td>získání celkové kapacity paměti EMS v&nbsp;blocích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_total_mem.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_total_mem.asm</a></td></tr>
<tr><td>171</td><td>ems_free_mem.asm </td><td>získání volné kapacity paměti EMS v&nbsp;blocích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_free_mem.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_free_mem.asm</a></td></tr>
<tr><td>172</td><td>xms_free_mem.asm </td><td>získání volné kapacity paměti XMS v&nbsp;blocích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/xms_free_mem.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/xms_free_mem.asm</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>DOSBox<br />
<a href="https://www.dosbox.com/">https://www.dosbox.com/</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Hercules Graphics Card (HCG)<br />
<a href="https://en.wikipedia.org/wiki/Hercules_Graphics_Card">https://en.wikipedia.org/wiki/Hercules_Graphics_Card</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf">https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://yassinebridi.github.io/asm-docs/8086_instruction_set.html">https://yassinebridi.github.io/asm-docs/8086_instruction_set.html</a>
</li>

<li>8088 MPH by Hornet + CRTC + DESiRE (final version)<br />
<a href="https://www.youtube.com/watch?v=hNRO7lno_DM">https://www.youtube.com/watch?v=hNRO7lno_DM</a>
</li>

<li>Area 5150 by CRTC &amp; Hornet (Party Version) / IBM PC+CGA Demo, Hardware Capture<br />
<a href="https://www.youtube.com/watch?v=fWDxdoRTZPc">https://www.youtube.com/watch?v=fWDxdoRTZPc</a>
</li>

<li>80x86 Integer Instruction Set Timings (8088 - Pentium)<br />
<a href="http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf">http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf</a>
</li>

<li>Colour Graphics Adapter: Notes<br />
<a href="https://www.seasip.info/VintagePC/cga.html">https://www.seasip.info/VintagePC/cga.html</a>
</li>

<li>Restoring A Vintage CGA Card With Homebrew HASL<br />
<a href="https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/">https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/</a>
</li>

<li>Demoing An 8088<br />
<a href="https://hackaday.com/2015/04/10/demoing-an-8088/">https://hackaday.com/2015/04/10/demoing-an-8088/</a>
</li>

<li>Video Memory Layouts<br />
<a href="http://www.techhelpmanual.com/89-video_memory_layouts.html">http://www.techhelpmanual.com/89-video_memory_layouts.html</a>
</li>

<li>Screen Attributes<br />
<a href="http://www.techhelpmanual.com/87-screen_attributes.html">http://www.techhelpmanual.com/87-screen_attributes.html</a>
</li>

<li>IBM PC Family  -  BIOS Video Modes<br />
<a href="https://www.minuszerodegrees.net/video/bios_video_modes.htm">https://www.minuszerodegrees.net/video/bios_video_modes.htm</a>
</li>

<li>EGA Functions<br />
<a href="https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega">https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega</a>
</li>

<li>Why the EGA can only use 16 of its 64 colours in 200-line modes<br />
<a href="https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/">https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/</a>
</li>

<li>How 16 colors saved PC gaming - the story of EGA graphics<br />
<a href="https://www.custompc.com/retro-tech/ega-graphics">https://www.custompc.com/retro-tech/ega-graphics</a>
</li>

<li>List of 16-bit computer color palettes<br />
<a href="https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes">https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes</a>
</li>

<li>Why were those colors chosen to be the default palette for 256-color VGA?<br />
<a href="https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga">https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga</a>
</li>

<li>VGA Color Palettes<br />
<a href="https://www.fountainware.com/EXPL/vga_color_palettes.htm">https://www.fountainware.com/EXPL/vga_color_palettes.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page<br />
<a href="http://www.osdever.net/FreeVGA/vga/vga.htm">http://www.osdever.net/FreeVGA/vga/vga.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page - sequencer<br />
<a href="http://www.osdever.net/FreeVGA/vga/seqreg.htm">http://www.osdever.net/FreeVGA/vga/seqreg.htm</a>
</li>

<li>VGA Basics<br />
<a href="http://www.brackeen.com/vga/basics.html">http://www.brackeen.com/vga/basics.html</a>
</li>

<li>Introduction to VGA Mode 'X'<br />
<a href="https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html">https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html</a>
</li>

<li>VGA Mode-X<br />
<a href="https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp">https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp</a>
</li>

<li>Mode-X: 256-Color VGA Magic<br />
<a href="https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf">https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf</a>
</li>

<li>Instruction Format in 8086 Microprocessor<br />
<a href="https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx">https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx</a>
</li>

<li>How to use "AND," "OR," and "XOR" modes for VGA Drawing<br />
<a href="https://retrocomputing.stackexchange.com/questions/21936/how-to-use-and-or-and-xor-modes-for-vga-drawing">https://retrocomputing.stackexchange.com/questions/21936/how-to-use-and-or-and-xor-modes-for-vga-drawing</a>
</li>

<li>VGA Hardware<br />
<a href="https://wiki.osdev.org/VGA_Hardware">https://wiki.osdev.org/VGA_Hardware</a>
</li>

<li>Programmer's Guide to Yamaha YMF 262/OPL3 FM Music Synthesizer<br />
<a href="https://moddingwiki.shikadi.net/wiki/OPL_chip">https://moddingwiki.shikadi.net/wiki/OPL_chip</a>
</li>

<li>Does anybody understand how OPL2 percussion mode works?<br />
<a href="https://forum.vcfed.org/index.php?threads/does-anybody-understand-how-opl2-percussion-mode-works.60925/">https://forum.vcfed.org/index.php?threads/does-anybody-understand-how-opl2-percussion-mode-works.60925/</a>
</li>

<li>Yamaha YMF262 OPL3 music - MoonDriver for OPL3 DEMO [Oscilloscope View]<br />
<a href="https://www.youtube.com/watch?v=a7I-QmrkAak">https://www.youtube.com/watch?v=a7I-QmrkAak</a>
</li>

<li>Yamaha OPL vs OPL2 vs OPL3 comparison<br />
<a href="https://www.youtube.com/watch?v=5knetge5Gs0">https://www.youtube.com/watch?v=5knetge5Gs0</a>
</li>

<li>OPL3 Music Crockett's Theme<br />
<a href="https://www.youtube.com/watch?v=HXS008pkgSQ">https://www.youtube.com/watch?v=HXS008pkgSQ</a>
</li>

<li>Bad Apple (Adlib Tracker - OPL3)<br />
<a href="https://www.youtube.com/watch?v=2lEPH6Y3Luo">https://www.youtube.com/watch?v=2lEPH6Y3Luo</a>
</li>

<li>FM Synthesis Chips, Codecs and DACs<br />
<a href="https://www.dosdays.co.uk/topics/fm_synthesizers.php">https://www.dosdays.co.uk/topics/fm_synthesizers.php</a>
</li>

<li>The Zen Challenge - YMF262 OPL3 Original (For an upcoming game)<br />
<a href="https://www.youtube.com/watch?v=6JlFIFz1CFY">https://www.youtube.com/watch?v=6JlFIFz1CFY</a>
</li>

<li>[adlib tracker II techno music - opl3] orbit around alpha andromedae I<br />
<a href="https://www.youtube.com/watch?v=YqxJCu_WFuA">https://www.youtube.com/watch?v=YqxJCu_WFuA</a>
</li>

<li>[adlib tracker 2 music - opl3 techno] hybridisation process on procyon-ii<br />
<a href="https://www.youtube.com/watch?v=daSV5mN0sJ4">https://www.youtube.com/watch?v=daSV5mN0sJ4</a>
</li>

<li>Hyper Duel - Black Rain (YMF262 OPL3 Cover)<br />
<a href="https://www.youtube.com/watch?v=pu_mzRRq8Ho">https://www.youtube.com/watch?v=pu_mzRRq8Ho</a>
</li>

<li>IBM 5155-5160 Technical Reference<br />
<a href="https://www.minuszerodegrees.net/manuals/IBM/IBM_5155_5160_Technical_Reference_6280089_MAR86.pdf">https://www.minuszerodegrees.net/manuals/IBM/IBM_5155_5160_Technical_Reference_6280089_MAR86.pdf</a>
</li>

<li>a ymf262/opl3+pc speaker thing i made<br />
<a href="https://www.youtube.com/watch?v=E-Mx0lEmnZ0">https://www.youtube.com/watch?v=E-Mx0lEmnZ0</a>
</li>

<li>[OPL3] Like a Thunder<br />
<a href="https://www.youtube.com/watch?v=MHf06AGr8SU">https://www.youtube.com/watch?v=MHf06AGr8SU</a>
</li>

<li>(PC SPEAKER) bad apple<br />
<a href="https://www.youtube.com/watch?v=LezmKIIHyUg">https://www.youtube.com/watch?v=LezmKIIHyUg</a>
</li>

<li>Powering devices from PC parallel port<br />
<a href="http://www.epanorama.net/circuits/lptpower.html">http://www.epanorama.net/circuits/lptpower.html</a>
</li>

<li>Magic Mushroom (demo pro PC s DOSem)<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards//mushroom.rar">http://www.crossfire-designs.de/download/articles/soundcards//mushroom.rar</a>
</li>

<li>Píseň Magic Mushroom - originál<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_converted.mp3">http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_converted.mp3</a>
</li>

<li>Píseň Magic Mushroom - hráno na PC Speakeru<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_speaker.mp3">http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_speaker.mp3</a>
</li>

<li>Pulse Width Modulation (PWM) Simulation Example<br />
<a href="http://decibel.ni.com/content/docs/DOC-4599">http://decibel.ni.com/content/docs/DOC-4599</a>
</li>

<li>Resistor/Pulse Width Modulation DAC<br />
<a href="http://www.k9spud.com/traxmod/pwmdac.php">http://www.k9spud.com/traxmod/pwmdac.php</a>
</li>

<li>Class D Amplifier<br />
<a href="http://en.wikipedia.org/wiki/Electronic_amplifier#Class_D">http://en.wikipedia.org/wiki/Electronic_amplifier#Class_D</a>
</li>

<li>Covox Speech Thing / Disney Sound Source (1986)<br />
<a href="http://www.crossfire-designs.de/index.php?lang=en&amp;what=articles&amp;name=showarticle.htm&amp;article=soundcards/&amp;page=5">http://www.crossfire-designs.de/index.php?lang=en&amp;what=articles&amp;name=showarticle.htm&amp;article=soundcards/&amp;page=5</a>
</li>

<li>Covox Digital-Analog Converter (Rusky, obsahuje schémata)<br />
<a href="http://phantom.sannata.ru/konkurs/netskater002.shtml">http://phantom.sannata.ru/konkurs/netskater002.shtml</a>
</li>

<li>PC-GPE on the Web<br />
<a href="http://bespin.org/~qz/pc-gpe/">http://bespin.org/~qz/pc-gpe/</a>
</li>

<li>Keyboard Synthesizer<br />
<a href="http://www.solarnavigator.net/music/instruments/keyboards.htm">http://www.solarnavigator.net/music/instruments/keyboards.htm</a>
</li>

<li>FMS - Fully Modular Synthesizer<br />
<a href="http://fmsynth.sourceforge.net/">http://fmsynth.sourceforge.net/</a>
</li>

<li>Javasynth<br />
<a href="http://javasynth.sourceforge.net/">http://javasynth.sourceforge.net/</a>
</li>

<li>Software Sound Synthesis &amp; Music Composition Packages<br />
<a href="http://www.linux-sound.org/swss.html">http://www.linux-sound.org/swss.html</a>
</li>

<li>Mx44.1 Download Page (software synthesizer for linux)<br />
<a href="http://hem.passagen.se/ja_linux/">http://hem.passagen.se/ja_linux/</a>
</li>

<li>Software synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Software_synthesizer">http://en.wikipedia.org/wiki/Software_synthesizer</a>
</li>

<li>Frequency modulation synthesis<br />
<a href="http://en.wikipedia.org/wiki/Frequency_modulation_synthesis">http://en.wikipedia.org/wiki/Frequency_modulation_synthesis</a>
</li>

<li>Yamaha DX7<br />
<a href="http://en.wikipedia.org/wiki/Yamaha_DX7">http://en.wikipedia.org/wiki/Yamaha_DX7</a>
</li>

<li>Wave of the Future<br />
<a href="http://www.wired.com/wired/archive/2.03/waveguides_pr.html">http://www.wired.com/wired/archive/2.03/waveguides_pr.html</a>
</li>

<li>Analog synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Analog_synthesizer">http://en.wikipedia.org/wiki/Analog_synthesizer</a>
</li>

<li>Minimoog<br />
<a href="http://en.wikipedia.org/wiki/Minimoog">http://en.wikipedia.org/wiki/Minimoog</a>
</li>

<li>Moog synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Moog_synthesizer">http://en.wikipedia.org/wiki/Moog_synthesizer</a>
</li>

<li>Tutorial for Frequency Modulation Synthesis<br />
<a href="http://www.sfu.ca/~truax/fmtut.html">http://www.sfu.ca/~truax/fmtut.html</a>
</li>

<li>An Introduction To FM<br />
<a href="http://ccrma.stanford.edu/software/snd/snd/fm.html">http://ccrma.stanford.edu/software/snd/snd/fm.html</a>
</li>

<li>John Chowning<br />
<a href="http://en.wikipedia.org/wiki/John_Chowning">http://en.wikipedia.org/wiki/John_Chowning</a>
</li>

<li>I'm Impressed, Adlib Music is AMAZING!<br />
<a href="https://www.youtube.com/watch?v=PJNjQYp1ras">https://www.youtube.com/watch?v=PJNjQYp1ras</a>
</li>

<li>Milinda- Diode Milliampere ( OPL3 )<br />
<a href="https://www.youtube.com/watch?v=oNhazT5HG0E">https://www.youtube.com/watch?v=oNhazT5HG0E</a>
</li>

<li>Dune 2 - Roland MT-32 Soundtrack <br />
<a href="https://www.youtube.com/watch?v=kQADZeB-z8M">https://www.youtube.com/watch?v=kQADZeB-z8M</a>
</li>

<li>Interrupts<br />
<a href="https://wiki.osdev.org/Interrupts#Types_of_Interrupts">https://wiki.osdev.org/Interrupts#Types_of_Interrupts</a>
</li>

<li>Assembly8086SoundBlasterDmaSingleCycleMode<br />
<a href="https://github.com/leonardo-ono/Assembly8086SoundBlasterDmaSingleCycleMode/blob/master/sbsc.asm">https://github.com/leonardo-ono/Assembly8086SoundBlasterDmaSingleCycleMode/blob/master/sbsc.asm</a>
</li>

<li>Interrupts in 8086 microprocessor<br />
<a href="https://www.geeksforgeeks.org/interrupts-in-8086-microprocessor/">https://www.geeksforgeeks.org/interrupts-in-8086-microprocessor/</a>
</li>

<li>Interrupt Structure of 8086<br />
<a href="https://www.eeeguide.com/interrupt-structure-of-8086/">https://www.eeeguide.com/interrupt-structure-of-8086/</a>
</li>

<li>A20 line<br />
<a href="https://en.wikipedia.org/wiki/A20_line">https://en.wikipedia.org/wiki/A20_line</a>
</li>

<li>Extended memory<br />
<a href="https://en.wikipedia.org/wiki/Extended_memory#eXtended_Memory_Specification_(XMS)">https://en.wikipedia.org/wiki/Extended_memory#eXtended_Memory_Specification_(XMS)</a>
</li>

<li>Expanded memory<br />
<a href="https://en.wikipedia.org/wiki/Expanded_memory">https://en.wikipedia.org/wiki/Expanded_memory</a>
</li>

<li>Protected mode<br />
<a href="https://en.wikipedia.org/wiki/Protected_mode">https://en.wikipedia.org/wiki/Protected_mode</a>
</li>

<li>Virtual 8086 mode<br />
<a href="https://en.wikipedia.org/wiki/Virtual_8086_mode">https://en.wikipedia.org/wiki/Virtual_8086_mode</a>
</li>

<li>Unreal mode<br />
<a href="https://en.wikipedia.org/wiki/Unreal_mode">https://en.wikipedia.org/wiki/Unreal_mode</a>
</li>

<li>DOS memory management<br />
<a href="https://en.wikipedia.org/wiki/DOS_memory_management">https://en.wikipedia.org/wiki/DOS_memory_management</a>
</li>

<li>Upper memory area<br />
<a href="https://en.wikipedia.org/wiki/Upper_memory_area">https://en.wikipedia.org/wiki/Upper_memory_area</a>
</li>

<li>Removing the Mystery from SEGMENT : OFFSET Addressing<br />
<a href="https://thestarman.pcministry.com/asm/debug/Segments.html">https://thestarman.pcministry.com/asm/debug/Segments.html</a>
</li>

<li>Segment descriptor<br />
<a href="https://en.wikipedia.org/wiki/Segment_descriptor">https://en.wikipedia.org/wiki/Segment_descriptor</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

