<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Ovládání hráčů ve hře klávesnicí nebo joystickem na ZX Spectru</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Ovládání hráčů ve hře klávesnicí nebo joystickem na ZX Spectru</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Ovládání hráčů ve hře klávesnicí nebo joystickem na ZX Spectru</a></p>
<p><a href="#k02">*** 2. Testování stisku kláves Q, A, O a P použitých pro pohyb hráče</a></p>
<p><a href="#k03">*** 3. Realizace pohybu hráče &ndash; šestnáctibitová aritmetika</a></p>
<p><a href="#k04">4. Úplný zdrojový kód dnešního prvního demonstračního příkladu</a></p>
<p><a href="#k05">*** 5. Refaktoring: odstranění duplicitního kódu a test stisku kláves jednodušším způsobem</a></p>
<p><a href="#k06">6. Úplný zdrojový kód dnešního druhého demonstračního příkladu</a></p>
<p><a href="#k07">7. Ovládání hráče joystickem</a></p>
<p><a href="#k08">8. &bdquo;Kurzorový&ldquo; joystick</a></p>
<p><a href="#k09">9. Realizace čtení polohy kurzorového joysticku</a></p>
<p><a href="#k10">10. Úplný zdrojový kód dnešního třetího demonstračního příkladu</a></p>
<p><a href="#k11">11. Joystick připojený přes Sinclair / Interface 2</a></p>
<p><a href="#k12">*** 12. Realizace čtení polohy joysticku připojeného přes Interface 2</a></p>
<p><a href="#k13">13. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</a></p>
<p><a href="#k14">*** 14. Joystick připojený přes rozhraní Kempston</a></p>
<p><a href="#k15">*** 15. Realizace čtení polohy joysticku připojeného přes rozhraní Kempston</a></p>
<p><a href="#k16">*** 16. Úplný zdrojový kód dnešního pátého demonstračního příkladu</a></p>
<p><a href="#k17">17. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Ovládání hráčů ve hře klávesnicí nebo joystickem na ZX Spectru</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Testování stisku kláves Q, A, O a P použitých pro pohyb hráče</h2>

<pre>
        ld  c, $fe                     <i>; port, ze kterého se bude číst</i>
&nbsp;
        keypress KB_ROW_5_PORT, 1 &lt;&lt; 0 <i>; test stisku klávesy P</i>
        jr nz, p_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        ...
        ...
        ...
&nbsp;
<strong>p_not_pressed</strong>:
        keypress KB_ROW_5_PORT, 1 &lt;&lt; 1 <i>; test stisku klávesy O</i>
        jr nz, o_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        ...
        ...
        ...
&nbsp;
<strong>o_not_pressed</strong>:
        keypress KB_ROW_1_PORT, 1 &lt;&lt; 0 <i>; test stisku klávesy A</i>
        jr nz, a_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        ...
        ...
        ...
&nbsp;
<strong>a_not_pressed</strong>:
        keypress KB_ROW_2_PORT, 1 &lt;&lt; 0 <i>; test stisku klávesy Q</i>
        jr nz, q_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        ...
        ...
        ...
<strong>q_not_pressed</strong>:
        call delay                     <i>; Z80 je pro nás moc rychlý :-)</i>
        jr   repeat                    <i>; opakovat</i>
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Realizace pohybu hráče &ndash; šestnáctibitová aritmetika</h2>

<pre>
<strong>add_to_hl</strong> MACRO value
        ld b, 0
        ld c, value
        add hl, bc
ENDM
</pre>

<pre>
<strong>sub_from_hl</strong> MACRO value
        ld  b, 0
        ld  c, value
        or  a                          <i>; vynulovat carry</i>
        sbc hl, bc
ENDM
</pre>

<pre>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úplný zdrojový kód dnešního prvního demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního prvního demonstračního příkladu najdete na
adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/98-game-character.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/98-game-character.asm</a>:</p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111
&nbsp;
RED_BLOCK     equ INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
ORIG_BLOCK    equ WHITE_COLOR &lt;&lt; 3
&nbsp;
INIT_X        equ 15
INIT_Y        equ 12
INIT_POSITION equ ATTRIBUTE_ADR + INIT_X + 32*INIT_Y
&nbsp;
KB_ROW_0_PORT equ $fe
KB_ROW_1_PORT equ $fd
KB_ROW_2_PORT equ $fb
KB_ROW_3_PORT equ $f7
KB_ROW_4_PORT equ $ef
KB_ROW_5_PORT equ $df
KB_ROW_6_PORT equ $bf
KB_ROW_7_PORT equ $7f
&nbsp;
&nbsp;
<strong>changeAttribute</strong> MACRO attribute
        ld  (hl), attribute
ENDM
&nbsp;
<strong>keypress</strong> MACRO port, mask
        ld  b, port                    <i>; adresa portu, ze kterého budeme číst údaje</i>
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
        and mask
ENDM
&nbsp;
<strong>add_to_hl</strong> MACRO value
        ld b, 0
        ld c, value
        add hl, bc
ENDM
&nbsp;
<strong>sub_from_hl</strong> MACRO value
        ld  b, 0
        ld  c, value
        or  a                          <i>; vynulovat carry</i>
        sbc hl, bc
ENDM
&nbsp;
<strong>start</strong>:
        call ROM_CLS                   <i>; smazání obrazovky</i>
        ld   hl, INIT_POSITION
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na startovní pozici zhruba uprostřed obrazovky</i>
<strong>repeat</strong>:
        ld  c, $fe                     <i>; port, ze kterého se bude číst</i>
&nbsp;
        keypress KB_ROW_5_PORT, 1 &lt;&lt; 0 <i>; test stisku klávesy P</i>
        jr nz, p_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        inc hl                         <i>; posun doprava o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>p_not_pressed</strong>:
        keypress KB_ROW_5_PORT, 1 &lt;&lt; 1 <i>; test stisku klávesy O</i>
        jr nz, o_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        dec hl                         <i>; posun doleva o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>o_not_pressed</strong>:
        keypress KB_ROW_1_PORT, 1 &lt;&lt; 0 <i>; test stisku klávesy A</i>
        jr nz, a_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        add_to_hl 32                   <i>; posun dolů (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>a_not_pressed</strong>:
        keypress KB_ROW_2_PORT, 1 &lt;&lt; 0 <i>; test stisku klávesy Q</i>
        jr nz, q_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        sub_from_hl 32                 <i>; posun nahoru (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>q_not_pressed</strong>:
        call delay                     <i>; Z80 je pro nás moc rychlý :-)</i>
        jr   repeat                    <i>; opakovat</i>
&nbsp;
<strong>delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; mění BC (což nám nevadí)</i>
        ld   b, 30                     <i>; počitadlo vnější zpožďovací smyčky</i>
<strong>outer_loop</strong>:
        ld   c, 0                      <i>; počitadlo vnitřní zpožďovací smyčky</i>
<strong>inner_loop</strong>:
        dec  c                         <i>; snížení hodnoty počitadla (v první iteraci 256-&gt;255)</i>
        jr   NZ, inner_loop            <i>; opakovat, dokud není dosaženo nuly</i>
        djnz outer_loop                <i>; opakovat vnější smyčku, nyní s počitadlem v B</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p>Překlad tohoto demonstračního příkladu do strojového kódu vypadá
následovně:</p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
RED_BLOCK       EQU 0050
ORIG_BLOCK      EQU 0038
INIT_X          EQU 000F
INIT_Y          EQU 000C
INIT_POSITION   EQU 598F
KB_ROW_0_PORT   EQU 00FE
KB_ROW_1_PORT   EQU 00FD
KB_ROW_2_PORT   EQU 00FB
KB_ROW_3_PORT   EQU 00F7
KB_ROW_4_PORT   EQU 00EF
KB_ROW_5_PORT   EQU 00DF
KB_ROW_6_PORT   EQU 00BF
KB_ROW_7_PORT   EQU 007F
Defining MACRO changeAttribute
Params: attribute
Defining MACRO keypress
Params: port, mask
Defining MACRO add_to_hl
Params: value
Defining MACRO sub_from_hl
Params: value
8000:           label start
8000:CDAF0D     CALL 0DAF
8003:218F59     LD HL, 598F
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8006:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8008:           label repeat
8008:0EFE       LD C, FE
Expanding MACRO keypress
port= KB_ROW_5_PORT 
mask= 0001 &lt;&lt; 0000 
LD B , port 
800A:06DF       LD B, DF
IN A , ( C ) 
800C:ED78       IN A, (C)
AND mask 
800E:E601       AND 01
ENDM 
                ENDM
End of MACRO keypress
8010:2005       JR NZ, 8017
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8012:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
8014:23         INC HL
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8015:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8017:           label p_not_pressed
Expanding MACRO keypress
port= KB_ROW_5_PORT 
mask= 0001 &lt;&lt; 0001 
LD B , port 
8017:06DF       LD B, DF
IN A , ( C ) 
8019:ED78       IN A, (C)
AND mask 
801B:E602       AND 02
ENDM 
                ENDM
End of MACRO keypress
801D:2005       JR NZ, 8024
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
801F:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
8021:2B         DEC HL
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8022:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8024:           label o_not_pressed
Expanding MACRO keypress
port= KB_ROW_1_PORT 
mask= 0001 &lt;&lt; 0000 
LD B , port 
8024:06FD       LD B, FD
IN A , ( C ) 
8026:ED78       IN A, (C)
AND mask 
8028:E601       AND 01
ENDM 
                ENDM
End of MACRO keypress
802A:2009       JR NZ, 8035
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
802C:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
Expanding MACRO add_to_hl
value= 0020 
LD B , 0000 
802E:0600       LD B, 00
LD C , value 
8030:0E20       LD C, 20
ADD HL , BC 
8032:09         ADD HL, BC
ENDM 
                ENDM
End of MACRO add_to_hl
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8033:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8035:           label a_not_pressed
Expanding MACRO keypress
port= KB_ROW_2_PORT 
mask= 0001 &lt;&lt; 0000 
LD B , port 
8035:06FB       LD B, FB
IN A , ( C ) 
8037:ED78       IN A, (C)
AND mask 
8039:E601       AND 01
ENDM 
                ENDM
End of MACRO keypress
803B:200B       JR NZ, 8048
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
803D:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
Expanding MACRO sub_from_hl
value= 0020 
LD B , 0000 
803F:0600       LD B, 00
LD C , value 
8041:0E20       LD C, 20
OR A 
8043:B7         OR A
SBC HL , BC 
8044:ED42       SBC HL, BC
ENDM 
                ENDM
End of MACRO sub_from_hl
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8046:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8048:           label q_not_pressed
8048:CD4D80     CALL 804D
804B:18BB       JR 8008
804D:           label delay
804D:061E       LD B, 1E
804F:           label outer_loop
804F:0E00       LD C, 00
8051:           label inner_loop
8051:0D         DEC C
8052:20FD       JR NZ, 8051
8054:10F9       DJNZ 804F
8056:C9         RET
8057:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8056
</pre>

<p><div class="rs-tip-major">Poznámka: celková délka kódu dosahuje 86
bajtů</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Refaktoring: odstranění duplicitního kódu a test stisku kláves jednodušším způsobem</h2>

<pre>
<strong>keypress</strong> MACRO port
        ld  b, port                    <i>; adresa portu, ze kterého budeme číst údaje</i>
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
ENDM
</pre>

<pre>
        keypress KB_ROW_5_PORT         <i>; test stisku klávesy P a Q</i>
        rra                            <i>; nultý bit do příznaku carry</i>
        jr c, p_not_pressed            <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        inc hl                         <i>; posun doprava o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>p_not_pressed</strong>:
        rra                            <i>; první bit do příznaku carry</i>
        jr c, o_not_pressed            <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        dec hl                         <i>; posun doleva o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>o_not_pressed</strong>:
        keypress KB_ROW_1_PORT         <i>; test stisku klávesy A</i>
        rra                            <i>; nultý bit do příznaku carry</i>
        jr c, a_not_pressed            <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        add_to_hl 32                   <i>; posun dolů (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>a_not_pressed</strong>:
        keypress KB_ROW_2_PORT         <i>; test stisku klávesy Q</i>
        rra                            <i>; nultý bit do příznaku carry</i>
        jr c, q_not_pressed            <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        sub_from_hl 32                 <i>; posun nahoru (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Úplný zdrojový kód dnešního druhého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního druhého demonstračního příkladu najdete na
adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/99-game-character-2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/99-game-character-2.asm</a>:</p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111
&nbsp;
RED_BLOCK     equ INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
ORIG_BLOCK    equ WHITE_COLOR &lt;&lt; 3
&nbsp;
INIT_X        equ 15
INIT_Y        equ 12
INIT_POSITION equ ATTRIBUTE_ADR + INIT_X + 32*INIT_Y
&nbsp;
KB_ROW_0_PORT equ $fe
KB_ROW_1_PORT equ $fd
KB_ROW_2_PORT equ $fb
KB_ROW_3_PORT equ $f7
KB_ROW_4_PORT equ $ef
KB_ROW_5_PORT equ $df
KB_ROW_6_PORT equ $bf
KB_ROW_7_PORT equ $7f
&nbsp;
&nbsp;
<strong>changeAttribute</strong> MACRO attribute
        ld  (hl), attribute
ENDM
&nbsp;
<strong>keypress</strong> MACRO port
        ld  b, port                    <i>; adresa portu, ze kterého budeme číst údaje</i>
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
ENDM
&nbsp;
<strong>add_to_hl</strong> MACRO value
        ld  b, 0
        ld  c, value
        add hl, bc
ENDM
&nbsp;
<strong>sub_from_hl</strong> MACRO value
        ld  b, 0
        ld  c, value
        or  a                          <i>; vynulovat carry</i>
        sbc hl, bc
ENDM
&nbsp;
<strong>start</strong>:
        call ROM_CLS                   <i>; smazání obrazovky</i>
        ld   hl, INIT_POSITION
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na startovní pozici zhruba uprostřed obrazovky</i>
<strong>repeat</strong>:
        ld  c, $fe                     <i>; port, ze kterého se bude číst</i>
&nbsp;
        keypress KB_ROW_5_PORT         <i>; test stisku klávesy P a Q</i>
        rra                            <i>; nultý bit do příznaku carry</i>
        jr c, p_not_pressed            <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        inc hl                         <i>; posun doprava o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>p_not_pressed</strong>:
        rra                            <i>; první bit do příznaku carry</i>
        jr c, o_not_pressed            <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        dec hl                         <i>; posun doleva o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>o_not_pressed</strong>:
        keypress KB_ROW_1_PORT         <i>; test stisku klávesy A</i>
        rra                            <i>; nultý bit do příznaku carry</i>
        jr c, a_not_pressed            <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        add_to_hl 32                   <i>; posun dolů (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>a_not_pressed</strong>:
        keypress KB_ROW_2_PORT         <i>; test stisku klávesy Q</i>
        rra                            <i>; nultý bit do příznaku carry</i>
        jr c, q_not_pressed            <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        sub_from_hl 32                 <i>; posun nahoru (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>q_not_pressed</strong>:
        call delay                     <i>; Z80 je pro nás moc rychlý :-)</i>
        jr   repeat                    <i>; opakovat</i>
&nbsp;
<strong>delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; mění BC (což nám nevadí)</i>
        ld   b, 30                     <i>; počitadlo vnější zpožďovací smyčky</i>
<strong>outer_loop</strong>:
        ld   c, 0                      <i>; počitadlo vnitřní zpožďovací smyčky</i>
<strong>inner_loop</strong>:
        dec  c                         <i>; snížení hodnoty počitadla (v první iteraci 256-&gt;255)</i>
        jr   NZ, inner_loop            <i>; opakovat, dokud není dosaženo nuly</i>
        djnz outer_loop                <i>; opakovat vnější smyčku, nyní s počitadlem v B</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p>Překlad tohoto demonstračního příkladu do strojového kódu vypadá
následovně:</p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
RED_BLOCK       EQU 0050
ORIG_BLOCK      EQU 0038
INIT_X          EQU 000F
INIT_Y          EQU 000C
INIT_POSITION   EQU 598F
KB_ROW_0_PORT   EQU 00FE
KB_ROW_1_PORT   EQU 00FD
KB_ROW_2_PORT   EQU 00FB
KB_ROW_3_PORT   EQU 00F7
KB_ROW_4_PORT   EQU 00EF
KB_ROW_5_PORT   EQU 00DF
KB_ROW_6_PORT   EQU 00BF
KB_ROW_7_PORT   EQU 007F
Defining MACRO changeAttribute
Params: attribute
Defining MACRO keypress
Params: port
Defining MACRO add_to_hl
Params: value
Defining MACRO sub_from_hl
Params: value
8000:           label start
8000:CDAF0D     CALL 0DAF
8003:218F59     LD HL, 598F
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8006:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8008:           label repeat
8008:0EFE       LD C, FE
Expanding MACRO keypress
port= KB_ROW_5_PORT 
LD B , port 
800A:06DF       LD B, DF
IN A , ( C ) 
800C:ED78       IN A, (C)
ENDM 
                ENDM
End of MACRO keypress
800E:1F         RRA
800F:3805       JR C, 8016
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8011:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
8013:23         INC HL
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8014:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8016:           label p_not_pressed
8016:1F         RRA
8017:3805       JR C, 801E
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8019:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
801B:2B         DEC HL
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
801C:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
801E:           label o_not_pressed
Expanding MACRO keypress
port= KB_ROW_1_PORT 
LD B , port 
801E:06FD       LD B, FD
IN A , ( C ) 
8020:ED78       IN A, (C)
ENDM 
                ENDM
End of MACRO keypress
8022:1F         RRA
8023:3809       JR C, 802E
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8025:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
Expanding MACRO add_to_hl
value= 0020 
LD B , 0000 
8027:0600       LD B, 00
LD C , value 
8029:0E20       LD C, 20
ADD HL , BC 
802B:09         ADD HL, BC
ENDM 
                ENDM
End of MACRO add_to_hl
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
802C:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
802E:           label a_not_pressed
Expanding MACRO keypress
port= KB_ROW_2_PORT 
LD B , port 
802E:06FB       LD B, FB
IN A , ( C ) 
8030:ED78       IN A, (C)
ENDM 
                ENDM
End of MACRO keypress
8032:1F         RRA
8033:380B       JR C, 8040
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8035:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
Expanding MACRO sub_from_hl
value= 0020 
LD B , 0000 
8037:0600       LD B, 00
LD C , value 
8039:0E20       LD C, 20
OR A 
803B:B7         OR A
SBC HL , BC 
803C:ED42       SBC HL, BC
ENDM 
                ENDM
End of MACRO sub_from_hl
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
803E:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8040:           label q_not_pressed
8040:CD4580     CALL 8045
8043:18C3       JR 8008
8045:           label delay
8045:061E       LD B, 1E
8047:           label outer_loop
8047:0E00       LD C, 00
8049:           label inner_loop
8049:0D         DEC C
804A:20FD       JR NZ, 8049
804C:10F9       DJNZ 8047
804E:C9         RET
804F:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 804E
</pre>

<p><div class="rs-tip-major">Poznámka: velikost přeloženého strojového kódu
klesla na 78 bajtů oproti původním 86 bajtům.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Ovládání hráče joystickem</h2>

<p>Na ZX Spectru se pro ovládání her nemusí používat pouze klávesnice.
Prakticky u každé hry se setkáme i s&nbsp;nabídkou použití joysticku. Těch
existuje několik typů, přičemž se od sebe odlišují způsobem zapojení k&nbsp;ZX
Spectru a tím pádem i způsobem čtení jejich stavu (ovšem díky jednoduchosti HW
ZX Spectra i snahou o co nejmenší cenu joysticků je čtení jejich stavu
triviální). Setkáme se s&nbsp;de-facto standardy pojmenovanými Kempston,
Interface II (nebo též Sinclair), Protek, Fuller, Cursor atd.</p>

*** image ***
<p><i>Obrázek X: Slavná hra JetPac nabízí pouze jeden joystick, protože vyšla
jen několik měsíců po vydání samotného ZX Spectra, kdy nabídka rozhraní pro
připojení joysticků nebyla úplná.</i></p>

<p>Proč však existuje několik (pseudo) standardů? Na rozdíl od tehdejších
konkurenčních osmibitových domácích mikropočítačů (Atari od roku 1979,
Commodore C64 vyšel přibližně ve stejnou dobu jako ZX Spectrum) neexistoval na
původním ZX Spectru žádný konektor pro připojení joysticků. Výrobci periferních
zařízení ovšem záhy přišli s&nbsp;řešením &ndash; joysticky se budou připojovat
přes rozhraní připojené přímo na sběrnici mikroprocesoru, která byla vyvedena
z&nbsp;boxu počítače a tedy relativně snadno dostupná. A je logické, že
jednotliví výrobci prosazovali svoje řešení, kterých tak vzniklo hned několik
(každé se svými přednostmi a zápory, jak ostatně uvidíme v&nbsp;dalším
textu).</p>

*** image ***
<p><i>Obrázek X: Další hra od stejného výrobce již nabízí dva typy
joysticků.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. &bdquo;Kurzorový&ldquo; joystick</h2>

<p>Podívejme se ještě jednou na klávesnici ZX Spectra. Nad klávesami 5, 6, 7 a
8 jsou nakresleny kurzorové šipky &ndash; a tyto klávesy (s&nbsp;přeřaďovačem)
skutečně jako šipky fungují. Minimálně dvě společnosti (Protek a AGF) vyvinuly
rozhraní pro joysticky, které emuluje právě kurzorové šipky a střelba je
doplněna na klávesu 0. Předností je fakt, že i hry, které původně žádný
joystick nepodporovaly, ale nabízely redefinici ovládacích kláves, mohou
&bdquo;kurzorový&ldquo; joystick přímo používat. Nevýhoda (a původní
nelogičnost samotného ZX Spectra) spočívá v&nbsp;tom, že všech pět kláves 5, 6,
7, 8 a 0 <i>nelze</i> přečíst z&nbsp;jediného portu, takže se celý program může
nepatrně zesložitit.</p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-1.png" class="image-1091454" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="790" height="589" />
<p><i>Obrázek X: Klávesnice originálního ZX Spectra 48k (zobrazeno
v&nbsp;emulátoru Fuse).</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Realizace čtení polohy kurzorového joysticku</h2>

<p>Jak jsme si již řekli <a href="#k08">v&nbsp;předchozí kapitole</a>, není
možné náklon (a střelbu) kurzorového joysticku zjistit přečtením jediného
portu, ale je nutno číst stav kláves dvakrát &ndash; z&nbsp;fyzického řádku 3 a
4. Celá realizace rozeskoku může vypadat takto:</p>

<pre>
        keypress KB_ROW_3_PORT         <i>; test stisku klávesy 5 (joystick doleva)</i>
        and 1 &lt;&lt; 4                     <i>; test hodnoty pátého bitu</i>
        jr nz, left_not_pressed         <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        dec hl                         <i>; posun doleva o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>left_not_pressed</strong>:
        keypress KB_ROW_4_PORT         <i>; test stisku klávesy 6,7,8 (joystick dolů, nahoru a doprava)</i>
        rra                            <i>; třetí bit do příznaku carry</i>
        rra
        rra
        jr c, right_not_pressed        <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        inc hl                         <i>; posun doprava o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>right_not_pressed</strong>:
        rra                            <i>; čtvrtý bit do příznaku carry</i>
        jr c, down_not_pressed         <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        sub_from_hl 32                 <i>; posun nahoru (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>down_not_pressed</strong>:
        rra                            <i>; pátý bit do příznaku carry</i>
        jr c, up_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        add_to_hl 32                   <i>; posun dolů (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
</pre>

<p>Zbytek programu zůstává stejný, takže se zde otevírá možnost realizovat
výběr ovládání samomodifikujícím se kódem.</p>

<p><div class="rs-tip-major">Poznámka: relativně jednoduchým přeskládáním kódu
a modifikací instrukcí pro rotaci lze program nepatrně zkrátit i nepatrně
urychlit. Přijdete na to, v&nbsp;jakém místě kódu?</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Úplný zdrojový kód dnešního třetího demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního třetího demonstračního příkladu najdete na
adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/100-cursor-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/100-cursor-joystick.asm</a>:</p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111
&nbsp;
RED_BLOCK     equ INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
ORIG_BLOCK    equ WHITE_COLOR &lt;&lt; 3
&nbsp;
INIT_X        equ 15
INIT_Y        equ 12
INIT_POSITION equ ATTRIBUTE_ADR + INIT_X + 32*INIT_Y
&nbsp;
KB_ROW_0_PORT equ $fe
KB_ROW_1_PORT equ $fd
KB_ROW_2_PORT equ $fb
KB_ROW_3_PORT equ $f7
KB_ROW_4_PORT equ $ef
KB_ROW_5_PORT equ $df
KB_ROW_6_PORT equ $bf
KB_ROW_7_PORT equ $7f
&nbsp;
&nbsp;
<strong>changeAttribute</strong> MACRO attribute
        ld  (hl), attribute
ENDM
&nbsp;
<strong>keypress</strong> MACRO port
        ld  b, port                    <i>; adresa portu, ze kterého budeme číst údaje</i>
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
ENDM
&nbsp;
<strong>add_to_hl</strong> MACRO value
        ld  b, 0
        ld  c, value
        add hl, bc
ENDM
&nbsp;
<strong>sub_from_hl</strong> MACRO value
        ld  b, 0
        ld  c, value
        or  a                          <i>; vynulovat carry</i>
        sbc hl, bc
ENDM
&nbsp;
<strong>start</strong>:
        call ROM_CLS                   <i>; smazání obrazovky</i>
        ld   hl, INIT_POSITION
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na startovní pozici zhruba uprostřed obrazovky</i>
<strong>repeat</strong>:
        ld  c, $fe                     <i>; port, ze kterého se bude číst</i>
&nbsp;
        keypress KB_ROW_3_PORT         <i>; test stisku klávesy 5 (joystick doleva)</i>
        and 1 &lt;&lt; 4                     <i>; test hodnoty pátého bitu</i>
        jr nz, left_not_pressed         <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        dec hl                         <i>; posun doleva o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>left_not_pressed</strong>:
        keypress KB_ROW_4_PORT         <i>; test stisku klávesy 6,7,8 (joystick dolů, nahoru a doprava)</i>
        rra                            <i>; třetí bit do příznaku carry</i>
        rra
        rra
        jr c, right_not_pressed        <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        inc hl                         <i>; posun doprava o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>right_not_pressed</strong>:
        rra                            <i>; čtvrtý bit do příznaku carry</i>
        jr c, down_not_pressed         <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        sub_from_hl 32                 <i>; posun nahoru (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>down_not_pressed</strong>:
        rra                            <i>; pátý bit do příznaku carry</i>
        jr c, up_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        add_to_hl 32                   <i>; posun dolů (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>up_not_pressed</strong>:
        call delay                     <i>; Z80 je pro nás moc rychlý :-)</i>
        jr   repeat                    <i>; opakovat</i>
&nbsp;
<strong>delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; mění BC (což nám nevadí)</i>
        ld   b, 30                     <i>; počitadlo vnější zpožďovací smyčky</i>
<strong>outer_loop</strong>:
        ld   c, 0                      <i>; počitadlo vnitřní zpožďovací smyčky</i>
<strong>inner_loop</strong>:
        dec  c                         <i>; snížení hodnoty počitadla (v první iteraci 256-&gt;255)</i>
        jr   NZ, inner_loop            <i>; opakovat, dokud není dosaženo nuly</i>
        djnz outer_loop                <i>; opakovat vnější smyčku, nyní s počitadlem v B</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p>Překlad tohoto demonstračního příkladu do strojového kódu vypadá
následovně:</p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
RED_BLOCK       EQU 0050
ORIG_BLOCK      EQU 0038
INIT_X          EQU 000F
INIT_Y          EQU 000C
INIT_POSITION   EQU 598F
KB_ROW_0_PORT   EQU 00FE
KB_ROW_1_PORT   EQU 00FD
KB_ROW_2_PORT   EQU 00FB
KB_ROW_3_PORT   EQU 00F7
KB_ROW_4_PORT   EQU 00EF
KB_ROW_5_PORT   EQU 00DF
KB_ROW_6_PORT   EQU 00BF
KB_ROW_7_PORT   EQU 007F
Defining MACRO changeAttribute
Params: attribute
Defining MACRO keypress
Params: port
Defining MACRO add_to_hl
Params: value
Defining MACRO sub_from_hl
Params: value
8000:           label start
8000:CDAF0D     CALL 0DAF
8003:218F59     LD HL, 598F
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8006:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8008:           label repeat
8008:0EFE       LD C, FE
Expanding MACRO keypress
port= KB_ROW_3_PORT 
LD B , port 
800A:06F7       LD B, F7
IN A , ( C ) 
800C:ED78       IN A, (C)
ENDM 
                ENDM
End of MACRO keypress
800E:E610       AND 10
8010:2005       JR NZ, 8017
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8012:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
8014:2B         DEC HL
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8015:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8017:           label left_not_pressed
Expanding MACRO keypress
port= KB_ROW_4_PORT 
LD B , port 
8017:06EF       LD B, EF
IN A , ( C ) 
8019:ED78       IN A, (C)
ENDM 
                ENDM
End of MACRO keypress
801B:1F         RRA
801C:1F         RRA
801D:1F         RRA
801E:3805       JR C, 8025
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8020:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
8022:23         INC HL
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8023:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8025:           label right_not_pressed
8025:1F         RRA
8026:380B       JR C, 8033
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8028:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
Expanding MACRO sub_from_hl
value= 0020 
LD B , 0000 
802A:0600       LD B, 00
LD C , value 
802C:0E20       LD C, 20
OR A 
802E:B7         OR A
SBC HL , BC 
802F:ED42       SBC HL, BC
ENDM 
                ENDM
End of MACRO sub_from_hl
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8031:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8033:           label down_not_pressed
8033:1F         RRA
8034:3809       JR C, 803F
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8036:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
Expanding MACRO add_to_hl
value= 0020 
LD B , 0000 
8038:0600       LD B, 00
LD C , value 
803A:0E20       LD C, 20
ADD HL , BC 
803C:09         ADD HL, BC
ENDM 
                ENDM
End of MACRO add_to_hl
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
803D:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
803F:           label up_not_pressed
803F:CD4480     CALL 8044
8042:18C4       JR 8008
8044:           label delay
8044:061E       LD B, 1E
8046:           label outer_loop
8046:0E00       LD C, 00
8048:           label inner_loop
8048:0D         DEC C
8049:20FD       JR NZ, 8048
804B:10F9       DJNZ 8046
804D:C9         RET
804E:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 804D
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Joystick připojený přes Sinclair / Interface 2</h2>

<p>Další rozhraní pro joystick (resp.&nbsp;dokonce pro dva joysticky) se nazývá
buď <i>Interface 2</i> nebo (ve hrách) jednoduše <i>Sinclair</i>. Stav
joysticku (náklon a střelba) je mapován na klávesy 1-5 pro první joystick a 6-0
pro druhý joystick. Přednosti tohoto rozhraní jsou dvě &ndash; jednodušší čtení
každého joysticku (čtení z&nbsp;jediného portu pro všech pět bitů) a podpora
dvou joysticků. Nevýhodou je, že se nejedná o řešení kompatibilní
s&nbsp;kurzorovými šipkami (což ovšem v&nbsp;praxi nijak nevadí).</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Realizace čtení polohy joysticku připojeného přes Interface 2</h2>

<p>Čtení polohy a popř.&nbsp;i tlačítka joysticku připojeného přes Interface 2
je snadné, protože potřebujeme přečíst pouze stav jediného portu pro každý
joystick a test jednotlivých bitů již probíhá s&nbsp;využitím instrukce
<strong>rra</strong>, která vždy jeden z&nbsp;bitů vysune do příznaku
<i>carry</i>. Celý program tedy bude nepatrně kratší, než program předchozí (70
vs 73 bajtů):</p>




<p><a name="k13"></a></p>
<h2 id="k13">13. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu najdete na
adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/101-sinclair-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/101-sinclair-joystick.asm</a>:</p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111
&nbsp;
RED_BLOCK     equ INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
ORIG_BLOCK    equ WHITE_COLOR &lt;&lt; 3
&nbsp;
INIT_X        equ 15
INIT_Y        equ 12
INIT_POSITION equ ATTRIBUTE_ADR + INIT_X + 32*INIT_Y
&nbsp;
KB_ROW_0_PORT equ $fe
KB_ROW_1_PORT equ $fd
KB_ROW_2_PORT equ $fb
KB_ROW_3_PORT equ $f7
KB_ROW_4_PORT equ $ef
KB_ROW_5_PORT equ $df
KB_ROW_6_PORT equ $bf
KB_ROW_7_PORT equ $7f
&nbsp;
&nbsp;
<strong>changeAttribute</strong> MACRO attribute
        ld  (hl), attribute
ENDM
&nbsp;
<strong>keypress</strong> MACRO port
        ld  b, port                    <i>; adresa portu, ze kterého budeme číst údaje</i>
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
ENDM
&nbsp;
<strong>add_to_hl</strong> MACRO value
        ld  b, 0
        ld  c, value
        add hl, bc
ENDM
&nbsp;
<strong>sub_from_hl</strong> MACRO value
        ld  b, 0
        ld  c, value
        or  a                          <i>; vynulovat carry</i>
        sbc hl, bc
ENDM
&nbsp;
<strong>start</strong>:
        call ROM_CLS                   <i>; smazání obrazovky</i>
        ld   hl, INIT_POSITION
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na startovní pozici zhruba uprostřed obrazovky</i>
<strong>repeat</strong>:
        ld  c, $fe                     <i>; port, ze kterého se bude číst</i>
&nbsp;
        keypress KB_ROW_3_PORT         <i>; test stisku klávesy 1 (joystick doleva)</i>
        rra
        jr c, left_not_pressed         <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        dec hl                         <i>; posun doleva o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>left_not_pressed</strong>:
        rra
        jr c, right_not_pressed        <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        inc hl                         <i>; posun doprava o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>right_not_pressed</strong>:
        rra                            <i>; čtvrtý bit do příznaku carry</i>
        jr c, down_not_pressed         <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        add_to_hl 32                   <i>; posun dolů (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>down_not_pressed</strong>:
        rra                            <i>; pátý bit do příznaku carry</i>
        jr c, up_not_pressed           <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        sub_from_hl 32                 <i>; posun nahoru (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>up_not_pressed</strong>:
        call delay                     <i>; Z80 je pro nás moc rychlý :-)</i>
        jr   repeat                    <i>; opakovat</i>
&nbsp;
<strong>delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; mění BC (což nám nevadí)</i>
        ld   b, 30                     <i>; počitadlo vnější zpožďovací smyčky</i>
<strong>outer_loop</strong>:
        ld   c, 0                      <i>; počitadlo vnitřní zpožďovací smyčky</i>
<strong>inner_loop</strong>:
        dec  c                         <i>; snížení hodnoty počitadla (v první iteraci 256->255)</i>
        jr   NZ, inner_loop            <i>; opakovat, dokud není dosaženo nuly</i>
        djnz outer_loop                <i>; opakovat vnější smyčku, nyní s počitadlem v B</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p>Překlad tohoto demonstračního příkladu do strojového kódu vypadá
následovně:</p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
RED_BLOCK       EQU 0050
ORIG_BLOCK      EQU 0038
INIT_X          EQU 000F
INIT_Y          EQU 000C
INIT_POSITION   EQU 598F
KB_ROW_0_PORT   EQU 00FE
KB_ROW_1_PORT   EQU 00FD
KB_ROW_2_PORT   EQU 00FB
KB_ROW_3_PORT   EQU 00F7
KB_ROW_4_PORT   EQU 00EF
KB_ROW_5_PORT   EQU 00DF
KB_ROW_6_PORT   EQU 00BF
KB_ROW_7_PORT   EQU 007F
Defining MACRO changeAttribute
Params: attribute
Defining MACRO keypress
Params: port
Defining MACRO add_to_hl
Params: value
Defining MACRO sub_from_hl
Params: value
8000:           label start
8000:CDAF0D     CALL 0DAF
8003:218F59     LD HL, 598F
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8006:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8008:           label repeat
8008:0EFE       LD C, FE
Expanding MACRO keypress
port= KB_ROW_3_PORT 
LD B , port 
800A:06F7       LD B, F7
IN A , ( C ) 
800C:ED78       IN A, (C)
ENDM 
                ENDM
End of MACRO keypress
800E:1F         RRA
800F:3805       JR C, 8016
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8011:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
8013:2B         DEC HL
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8014:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8016:           label left_not_pressed
8016:1F         RRA
8017:3805       JR C, 801E
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8019:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
801B:23         INC HL
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
801C:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
801E:           label right_not_pressed
801E:1F         RRA
801F:3809       JR C, 802A
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8021:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
Expanding MACRO add_to_hl
value= 0020 
LD B , 0000 
8023:0600       LD B, 00
LD C , value 
8025:0E20       LD C, 20
ADD HL , BC 
8027:09         ADD HL, BC
ENDM 
                ENDM
End of MACRO add_to_hl
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8028:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
802A:           label down_not_pressed
802A:1F         RRA
802B:380B       JR C, 8038
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
802D:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
Expanding MACRO sub_from_hl
value= 0020 
LD B , 0000 
802F:0600       LD B, 00
LD C , value 
8031:0E20       LD C, 20
OR A 
8033:B7         OR A
SBC HL , BC 
8034:ED42       SBC HL, BC
ENDM 
                ENDM
End of MACRO sub_from_hl
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8036:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8038:           label up_not_pressed
8038:CD3D80     CALL 803D
803B:18CB       JR 8008
803D:           label delay
803D:061E       LD B, 1E
803F:           label outer_loop
803F:0E00       LD C, 00
8041:           label inner_loop
8041:0D         DEC C
8042:20FD       JR NZ, 8041
8044:10F9       DJNZ 803F
8046:C9         RET
8047:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8046
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Joystick připojený přes rozhraní Kempston</h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Realizace čtení polohy joysticku připojeného přes rozhraní Kempston</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Úplný zdrojový kód dnešního pátého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního pátého a současně i posledního demonstračního
příkladu najdete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/102-kempston-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/102-kempston-joystick.asm</a>:</p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111
&nbsp;
RED_BLOCK     equ INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
ORIG_BLOCK    equ WHITE_COLOR &lt;&lt; 3
&nbsp;
INIT_X        equ 15
INIT_Y        equ 12
INIT_POSITION equ ATTRIBUTE_ADR + INIT_X + 32*INIT_Y
&nbsp;
KEMPSTON_PORT equ 31
&nbsp;
&nbsp;
<strong>changeAttribute</strong> MACRO attribute
        ld  (hl), attribute
ENDM
&nbsp;
<strong>add_to_hl</strong> MACRO value
        ld  b, 0
        ld  c, value
        add hl, bc
ENDM
&nbsp;
<strong>sub_from_hl</strong> MACRO value
        ld  b, 0
        ld  c, value
        or  a
        sbc hl, bc
ENDM
&nbsp;
<strong>start</strong>:
        call ROM_CLS                   <i>; smazání obrazovky</i>
        ld   hl, INIT_POSITION
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na startovní pozici zhruba uprostřed obrazovky</i>
<strong>repeat</strong>:
        ld  bc, KEMPSTON_PORT          <i>; adresa portu</i>
        in  a, (c)                     <i>; čtení z portu</i>
        rra                            <i>; otestovat nejnižší bit</i>
        jr nc, right_not_pressed       <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        inc hl                         <i>; posun doprava o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>right_not_pressed</strong>:
        rra                            <i>; otestovat druhý bit</i>
        jr nc, left_not_pressed        <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        dec hl                         <i>; posun doleva o jeden bajt</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>left_not_pressed</strong>:
        rra                            <i>; třetí bit do příznaku carry</i>
        jr nc, up_not_pressed         <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        add_to_hl 32                   <i>; posun dolů (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>up_not_pressed</strong>:
        rra                            <i>; čtvrtý bit do příznaku carry</i>
        jr nc, down_not_pressed        <i>; přeskok dalších instrukcí, pokud klávesa není stisknuta</i>
        changeAttribute ORIG_BLOCK     <i>; smazat hráče na původní pozici</i>
        sub_from_hl 32                 <i>; posun nahoru (o 32 bajtů)</i>
        changeAttribute RED_BLOCK      <i>; vykreslit hráče na nové pozici</i>
&nbsp;
<strong>down_not_pressed</strong>:
        call delay                     <i>; Z80 je pro nás moc rychlý :-)</i>
        jr   repeat                    <i>; opakovat</i>
&nbsp;
<strong>delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; mění BC (což nám nevadí)</i>
        ld   b, 30                     <i>; počitadlo vnější zpožďovací smyčky</i>
<strong>outer_loop</strong>:
        ld   c, 0                      <i>; počitadlo vnitřní zpožďovací smyčky</i>
<strong>inner_loop</strong>:
        dec  c                         <i>; snížení hodnoty počitadla (v první iteraci 256->255)</i>
        jr   NZ, inner_loop            <i>; opakovat, dokud není dosaženo nuly</i>
        djnz outer_loop                <i>; opakovat vnější smyčku, nyní s počitadlem v B</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p>Překlad tohoto demonstračního příkladu do strojového kódu vypadá následovně:</p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
RED_BLOCK       EQU 0050
ORIG_BLOCK      EQU 0038
INIT_X          EQU 000F
INIT_Y          EQU 000C
INIT_POSITION   EQU 598F
KEMPSTON_PORT   EQU 001F
Defining MACRO changeAttribute
Params: attribute
Defining MACRO add_to_hl
Params: value
Defining MACRO sub_from_hl
Params: value
8000:           label start
8000:CDAF0D     CALL 0DAF
8003:218F59     LD HL, 598F
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8006:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8008:           label repeat
8008:011F00     LD BC, 001F
800B:ED78       IN A, (C)
800D:1F         RRA
800E:3005       JR NC, 8015
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8010:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
8012:23         INC HL
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8013:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8015:           label right_not_pressed
8015:1F         RRA
8016:3005       JR NC, 801D
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8018:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
801A:2B         DEC HL
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
801B:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
801D:           label left_not_pressed
801D:1F         RRA
801E:3009       JR NC, 8029
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
8020:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
Expanding MACRO add_to_hl
value= 0020 
LD B , 0000 
8022:0600       LD B, 00
LD C , value 
8024:0E20       LD C, 20
ADD HL , BC 
8026:09         ADD HL, BC
ENDM 
                ENDM
End of MACRO add_to_hl
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8027:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8029:           label up_not_pressed
8029:1F         RRA
802A:300B       JR NC, 8037
Expanding MACRO changeAttribute
attribute= ORIG_BLOCK 
LD ( HL ) , attribute 
802C:3638       LD (HL), 38
ENDM 
                ENDM
End of MACRO changeAttribute
Expanding MACRO sub_from_hl
value= 0020 
LD B , 0000 
802E:0600       LD B, 00
LD C , value 
8030:0E20       LD C, 20
OR A 
8032:B7         OR A
SBC HL , BC 
8033:ED42       SBC HL, BC
ENDM 
                ENDM
End of MACRO sub_from_hl
Expanding MACRO changeAttribute
attribute= RED_BLOCK 
LD ( HL ) , attribute 
8035:3650       LD (HL), 50
ENDM 
                ENDM
End of MACRO changeAttribute
8037:           label down_not_pressed
8037:CD3C80     CALL 803C
803A:18CC       JR 8008
803C:           label delay
803C:061E       LD B, 1E
803E:           label outer_loop
803E:0E00       LD C, 00
8040:           label inner_loop
8040:0D         DEC C
8041:20FD       JR NZ, 8040
8043:10F9       DJNZ 803E
8045:C9         RET
8046:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8045
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</h2>

<p>Výše uvedené demonstrační příklady i příklady, které již byly popsány
v&nbsp;předchozích třinácti článcích [<a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">1</a>]
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-mikroprocesor-zilog-z80-a-smycky-v-assembleru/">2</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-vypis-informaci-na-obrazovku/">3</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-her-a-dem-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny/">4</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-her-a-dem-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny-podruhe/">5</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny-potreti/">6</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-dokonceni-realizace-prikazu-plot/">7</a>],
[<a
href="https://www.root.cz/clanky/zobrazeni-cisel-a-zpracovani-priznaku-mikroprocesoru-zilog-z80/">8</a>],
[<a
href="https://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ulozenymi-binarne-i-ve-formatu-bcd/">9</a>],
[<a
href="https://www.root.cz/clanky/tisk-hexadecimalnich-hodnot-s-vyuzitim-instrukce-daa-na-zx-spectru/">10</a>],
[<a
href="https://www.root.cz/clanky/kopie-datovych-bloku-na-zx-spectru-prenaseni-bajt-po-bajtu/">11</a>],
[<a
href="https://www.root.cz/clanky/kopie-datovych-bloku-na-zx-spectru-s-vyuzitim-zasobniku/">12</a>],
[<a
href="https://www.root.cz/clanky/prace-s-klavesnici-na-zx-spectru/">13</a>],
je možné přeložit s&nbsp;využitím souboru Makefile, jehož aktuální verze vypadá
následovně (pro překlad a slinkování je použit assembler <i>Pasmo</i>):</p>

<pre>
ASSEMBLER := pasmo
&nbsp;
all: 01.tap 02.tap 03.tap 04.tap 05.tap 06.tap 07.tap 08.tap 09.tap 10.tap \
    11.tap 12.tap 13.tap 14.tap 15.tap 16.tap 17.tap 18.tap 19.tap 20.tap \
    21.tap 22.tap 23.tap 24.tap 25.tap 26.tap 27.tap 28.tap 29.tap 30.tap \
    31.tap 32.tap 33.tap 34.tap 35.tap 36.tap 37.tap 38.tap 39.tap 40.tap \
    41.tap 42.tap 43.tap 44.tap 45.tap 46.tap 47.tap 48.tap 49.tap 50.tap \
    51.tap 52.tap 53.tap 54.tap 55.tap 56.tap 57.tap 58.tap 59.tap 60.tap \
    61.tap 62.tap 63.tap 64.tap 65.tap 66.tap 67.tap 68.tap 69.tap 70.tap \
    71.tap 72.tap 73.tap 74.tap 75.tap 76.tap 77.tap 78.tap 79.tap 80.tap \
    81.tap 82.tap 83.tap 84.tap 85.tap 86.tap 87.tap 88.tap 80.tap 90.tap \
    91.tap 92.tap 93.tap 94.tap 95.tap 96.tap 97.tap 98.tap 99.tap 100.tap
&nbsp;
<strong>clean</strong>:
        rm -f *.tap
&nbsp;
.PHONY: all clean
&nbsp;
&nbsp;
01.tap: 01-color-attribute.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 01-color-attribute.lst
&nbsp;
02.tap: 02-blinking-attribute.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 02-blinking-attribute.lst
&nbsp;
03.tap: 03-symbolic-names.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 03-symbolic-names.lst
&nbsp;
04.tap: 04-operators.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 04-operators.lst
&nbsp;
05.tap: 05-better-symbols.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 05-better-symbols.lst
&nbsp;
06.tap: 06-tapbas-v1.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 06-tapbas-v1.lst
&nbsp;
07.tap: 07-tapbas-v2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 07-tapbas-v2.lst
&nbsp;
08.tap: 08-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 08-loop.lst
&nbsp;
09.tap: 09-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 09-loop.lst
&nbsp;
10.tap: 10-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 10-loop.lst
&nbsp;
11.tap: 11-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 11-loop.lst
&nbsp;
12.tap: 12-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 12-loop.lst
&nbsp;
13.tap: 13-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 13-loop.lst
&nbsp;
14.tap: 14-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 14-loop.lst
&nbsp;
15.tap: 15-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 15-loop.lst
&nbsp;
16.tap: 16-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 16-loop.lst
&nbsp;
17.tap: 17-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 17-loop.lst
&nbsp;
18.tap: 18-cls.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 18-cls.lst
&nbsp;
19.tap: 19-print-char-call.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 19-print-char-call.lst
&nbsp;
20.tap: 20-print-char-rst.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 20-print-char-rst.lst
&nbsp;
21.tap: 21-print-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 21-print-char.lst
&nbsp;
22.tap: 22-print-all-chars.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 22-print-all-chars.lst
&nbsp;
23.tap: 23-print-all-chars.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 23-print-all-chars.lst
&nbsp;
24.tap: 24-change-color.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 24-change-color.lst
&nbsp;
25.tap: 25-change-flash.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 25-change-flash.lst
&nbsp;
26.tap: 26-print-at.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 26-print-at.lst
&nbsp;
27.tap: 27-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 27-print-string.lst
&nbsp;
28.tap: 28-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 28-print-string.lst
&nbsp;
29.tap: 29-print-colorized-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 29-print-colorized-string.lst
&nbsp;
30.tap: 30-print-string-ROM.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 30-print-string-ROM.lst
&nbsp;
31.tap: 31-attributes.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 31-attributes.lst
&nbsp;
32.tap: 32-fill-in-vram.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 32-fill-in-vram.lst
&nbsp;
33.tap: 33-fill-in-vram-no-ret.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 33-fill-in-vram-no-ret.lst
&nbsp;
34.tap: 34-fill-in-vram-pattern.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 34-fill-in-vram-pattern.lst
&nbsp;
35.tap: 35-slow-fill-in-vram.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 35-slow-fill-in-vram.lst
&nbsp;
36.tap: 36-slow-fill-in-vram-no-ret.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 36-slow-fill-in-vram-no-ret.lst
&nbsp;
37.tap: 37-fill-block.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 37-fill-block.lst
&nbsp;
38.tap: 38-fill-block-with-pattern.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 38-fill-block-with-pattern.lst
&nbsp;
39.tap: 39-fill-block-optimized.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 39-fill-block-optimized.lst
&nbsp;
40.tap: 40-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 40-draw-char.lst
&nbsp;
41.tap: 41-draw-any-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 41-draw-any-char.lst
&nbsp;
42.tap: 42-block-anywhere.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 42-block-anywhere.lst
&nbsp;
43.tap: 43-block-anywhere-rrca.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 43-block-anywhere-rrca.lst
&nbsp;
44.tap: 44-better-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 44-better-draw-char.lst
&nbsp;
45.tap: 45-even-better-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 45-even-better-draw-char.lst
&nbsp;
46.tap: 46-draw-char-at.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 46-draw-char-at.lst
&nbsp;
47.tap: 47-draw-char-at-unrolled.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 47-draw-char-at-unrolled.lst
&nbsp;
48.tap: 48-incorrect-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 48-incorrect-print-string.lst
&nbsp;
49.tap: 49-correct-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 49-correct-print-string.lst
&nbsp;
50.tap: 50-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 50-ascii-table.lst
&nbsp;
51.tap: 51-plot-block.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 51-plot-block.lst
&nbsp;
52.tap: 52-plot-pixel.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 52-plot-pixel.lst
&nbsp;
53.tap: 53-plot-pixel.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 53-plot-pixel.lst
&nbsp;
54.tap: 54-plot-pixel-on-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 54-plot-pixel-on-background.lst
&nbsp;
55.tap: 55-plot-pixel-on-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 55-plot-pixel-on-background.lst
&nbsp;
56.tap: 56-inverse-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 56-inverse-ascii-table.lst
&nbsp;
57.tap: 57-plot-pixel-on-inverse-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 57-plot-pixel-on-inverse-background.lst
&nbsp;
58.tap: 58-plot-inverse-pixel-on-inverse-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 58-plot-inverse-pixel-on-inverse-background.lst
&nbsp;
59.tap: 59-configurable-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 59-configurable-ascii-table.lst
&nbsp;
60.tap: 60-plot-over.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 60-plot-over.lst
&nbsp;
61.tap: 61-print-number-A.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 61-print-number-A.lst
&nbsp;
62.tap: 62-print-number-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 62-print-number-B.lst
&nbsp;
63.tap: 63-print-number-C.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 63-print-number-C.lst
&nbsp;
64.tap: 64-print-number-D.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 64-print-number-D.lst
&nbsp;
65.tap: 65-more-numbers-A.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 65-more-numbers-A.lst
&nbsp;
66.tap: 66-more-numbers-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 66-more-numbers-B.lst
&nbsp;
67.tap: 67-print-flags-1.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 67-print-flags-1.lst
&nbsp;
68.tap: 68-print-flags-2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 68-print-flags-2.lst
&nbsp;
69.tap: 69-print-flags-3.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 69-print-flags-3.lst
&nbsp;
70.tap: 70-print-flags-4.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 70-print-flags-4.lst
&nbsp;
71.tap: 71-print-flags-5.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 71-print-flags-5.lst
&nbsp;
72.tap: 72-print-flags-6.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 72-print-flags-6.lst
&nbsp;
73.tap: 73-print-flags-7.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 73-print-flags-7.lst
&nbsp;
74.tap: 74-print-hex-number.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 74-print-hex-number.lst
&nbsp;
75.tap: 75-print-hex-number.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 75-print-hex-number.lst
&nbsp;
76.tap: 76-print-hex-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 76-print-hex-numbers.lst
&nbsp;
77.tap: 77-add-hex-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 77-add-hex-numbers.lst
&nbsp;
78.tap: 78-add-bcd-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 78-add-bcd-numbers.lst
&nbsp;
79.tap: 79-print-hex-digit-jmp.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 79-print-hex-digit-jmp.lst
&nbsp;
80.tap: 80-print-hex-digit-overflow.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 80-print-hex-digit-overflow.lst
&nbsp;
81.tap: 81-print-hex-digit-daa.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 81-print-hex-digit-daa.lst
&nbsp;
82.tap: 82-print-hex-numbers-daa.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 82-print-hex-numbers-daa.lst
&nbsp;
83.tap: 83-print-fp-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 83-print-fp-numbers.lst
&nbsp;
84.tap: 84-print-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 84-print-ascii-table.lst
&nbsp;
85.tap: 85-copy-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 85-copy-ascii-table.lst
&nbsp;
86.tap: 86-copy-ascii-table-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 86-copy-ascii-table-B.lst
&nbsp;
87.tap: 87-copy-ascii-table-C.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 87-copy-ascii-table-C.lst
&nbsp;
88.tap: 88-copy-ascii-table-D.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 88-copy-ascii-table-D.lst
&nbsp;
89.tap: 89-copy-ascii-table-E.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 89-copy-ascii-table-E.lst
&nbsp;
90.tap: 90-copy-ascii-table-F.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 90-copy-ascii-table-F.lst
&nbsp;
91.tap: 91-copy-ascii-table-G.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 91-copy-ascii-table-G.lst
&nbsp;
92.tap: 92-copy-ascii-table-H.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 92-copy-ascii-table-H.lst
&nbsp;
93.tap: 93-copy-ascii-table-I.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 93-copy-ascii-table-I.lst
&nbsp;
94.tap: 94-color-attribute.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 94-color-attribute.lst
&nbsp;
95.tap: 95-keypress.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 95-keypress.lst
&nbsp;
96.tap: 96-keypress-row.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 96-keypress-row.lst
&nbsp;
97.tap: 97-keypress-all-rows.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 97-keypress-all-rows.lst
&nbsp;
98.tap: 98-game-character.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 98-game-character.lst
&nbsp;
99.tap: 99-game-character-2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 99-game-character-2.lst
&nbsp;
100.tap:        100-cursor-joystick.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 100-cursor-joystick.lst
&nbsp;
101.tap:        101-sinclair-joystick.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 101-sinclair-joystick.lst
&nbsp;
102.tap:        102-kempston-joystick.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 102-kempston-joystick.lst
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
prozatím popsané demonstrační příklady určené pro překlad a spuštění na
osmibitovém domácím mikropočítači ZX Spectrum (libovolný model či jeho klon),
které jsou psány v&nbsp;assembleru mikroprocesoru Zilog Z80. Pro překlad těchto
demonstračních příkladů je možné použít například assembler <i>Pasmo</i> (viz
též <a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">úvodní
článek</a>):</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01-color-attribute.asm</td><td>modifikace jednoho barvového atributu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm</a></td></tr>
<tr><td> 2</td><td>02-blinking-attribute.asm</td><td>barvový atribut s&nbsp;nastavením bitů pro blikání a vyšší intenzitu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm</a></td></tr>
<tr><td> 3</td><td>03-symbolic-names.asm</td><td>symbolická jména v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm</a></td></tr>
<tr><td> 4</td><td>04-operators.asm</td><td>operátory a operace se symbolickými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm</a></td></tr>
<tr><td> 5</td><td>05-better-symbols.asm</td><td>tradičnější symbolická jména</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm</a></td></tr>
<tr><td> 6</td><td>06-tapbas-v1.asm</td><td>vygenerování BASICovského loaderu (neúplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm</a></td></tr>
<tr><td> 7</td><td>07-tapbas-v2.asm</td><td>vygenerování BASICovského loaderu (úplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm</a></td></tr>
<tr><td> 8</td><td>08-loop.asm</td><td>jednoduchá počítaná programová smyčka: naivní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm</a></td></tr>
<tr><td> 9</td><td>09-loop.asm</td><td>programová smyčka: zkrácení kódu pro vynulování použitých pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm</a></td></tr>
<tr><td>10</td><td>10-loop.asm</td><td>programová smyčka: optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm</a></td></tr>
<tr><td>11</td><td>11-loop.asm</td><td>programová smyčka: optimalizace využití pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm</a></td></tr>
<tr><td>12</td><td>12-loop.asm</td><td>programová smyčka: použití pracovního registru IX</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm</a></td></tr>
<tr><td>13</td><td>13-loop.asm</td><td>programová smyčka: použití pracovního registru IY</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm</a></td></tr>
<tr><td>14</td><td>14-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm</a></td></tr>
<tr><td>15</td><td>15-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm</a></td></tr>
<tr><td>16</td><td>16-loop.asm</td><td>použití relativního skoku a nikoli skoku absolutního</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm</a></td></tr>
<tr><td>17</td><td>17-loop.asm</td><td>programová smyčka: <strong>inc l</strong> namísto <strong>inc hl</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>18-cls.asm</td><td>smazání obrazovky a otevření kanálu číslo 2 (screen) přes funkci v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm</a></td></tr>
<tr><td>19</td><td>19-print-char-call.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce CALL)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm</a></td></tr>
<tr><td>20</td><td>20-print-char-rst.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce RST)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm</a></td></tr>
<tr><td>21</td><td>21-print-char.asm</td><td>pouze výpis jednoho znaku na obrazovku bez jejího smazání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm</a></td></tr>
<tr><td>22</td><td>22-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (nekorektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm</a></td></tr>
<tr><td>23</td><td>23-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (korektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm</a></td></tr>
<tr><td>24</td><td>24-change-color.asm</td><td>změna barvových atributů (popředí a pozadí) vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm</a></td></tr>
<tr><td>25</td><td>25-change-flash.asm</td><td>povolení či zákaz blikání vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm</a></td></tr>
<tr><td>26</td><td>26-print-at.asm</td><td>výpis znaku či znaků na určené místo na obrazovce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm</a></td></tr>
<tr><td>27</td><td>27-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm</a></td></tr>
<tr><td>28</td><td>28-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm</a></td></tr>
<tr><td>29</td><td>29-print-colorized-string.asm</td><td>výpis řetězce, který obsahuje i řídicí znaky pro změnu barvy atd.</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm</a></td></tr>
<tr><td>30</td><td>30-print-string-ROM.asm</td><td>výpis řetězce s&nbsp;využitím služby/subrutiny uložené v&nbsp;ROM ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>31-attributes.asm</td><td>modifikace atributů pro tisk řetězce subrutinou uloženou v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm</a></td></tr>
<tr><td>32</td><td>32-fill-in-vram.asm</td><td>vyplnění celé bitmapy barvou popředí, návrat do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm</a></td></tr>
<tr><td>33</td><td>33-fill-in-vram-no-ret.asm</td><td>vyplnění celé bitmapy barvou popředí, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>34</td><td>34-fill-in-vram-pattern.asm</td><td>vyplnění celé bitmapy zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm</a></td></tr>
<tr><td>35</td><td>35-slow-fill-in-vram.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm</a></td></tr>
<tr><td>36</td><td>36-slow-fill-in-vram-no-ret.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>37</td><td>37-fill-block.asm</td><td>vykreslení bloku 8&times;8 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm</a></td></tr>
<tr><td>38</td><td>38-fill-block-with-pattern.asm</td><td>vykreslení bloku 8&times;8 pixelů zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm</a></td></tr>
<tr><td>39</td><td>39-fill-block-optimized.asm</td><td>optimalizace předchozího příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm</a></td></tr>
<tr><td>40</td><td>40-draw-char.asm</td><td>vykreslení znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm</a></td></tr>
<tr><td>41</td><td>41-draw-any-char.asm</td><td>podprogram pro vykreslení libovolně zvoleného znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm</a></td></tr>
<tr><td>42</td><td>42-block-anywhere.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>43-block-anywhere-rrca.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm</a></td></tr>
<tr><td>44</td><td>44-better-draw-char.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm</a></td></tr>
<tr><td>45</td><td>45-even-better-draw-char.asm</td><td>posun offsetu pro vykreslení dalšího znaku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm</a></td></tr>
<tr><td>46</td><td>46-draw-char-at.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm</a></td></tr>
<tr><td>47</td><td>47-draw-char-at-unrolled.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm</a></td></tr>
<tr><td>48</td><td>48-incorrect-print-string.asm</td><td>tisk řetězce, nekorektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm</a></td></tr>
<tr><td>49</td><td>49-correct-print-string.asm</td><td>tisk řetězce, korektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>50-ascii-table.asm</td><td>tisk několika bloků ASCII tabulky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm</a></td></tr>
<tr><td>51</td><td>51-plot-block.asm</td><td>vykreslení pixelu verze 1: zápis celého bajtu na pozici pixelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm</a></td></tr>
<tr><td>52</td><td>52-plot-pixel.asm</td><td>vykreslení pixelu verze 2: korektní vykreslení jednoho pixelu, ovšem překreslení celého bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm</a></td></tr>
<tr><td>53</td><td>53-plot-pixel.asm</td><td>vykreslení pixelu verze 3: vylepšená verze předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm</a></td></tr>
<tr><td>54</td><td>54-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (nekorektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm</a></td></tr>
<tr><td>55</td><td>55-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (korektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>56</td><td>56-inverse-ascii-table.asm</td><td>vykreslení ASCII tabulky inverzní barvou (inkoust vs. papír)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm</a></td></tr>
<tr><td>57</td><td>57-plot-pixel-on-inverse-background.asm</td><td>vykreslení pixelů barvou papíru proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm</a></td></tr>
<tr><td>58</td><td>58-plot-inverse-pixel-on-inverse-background.asm</td><td>vykreslení pixelů inverzní barvou proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/58-plot-inverse-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm58-plot-inverse-pixel-on-inverse-background.asm/</a></td></tr>
<tr><td>59</td><td>59-configurable-ascii-table.asm</td><td>vykreslení ASCII tabulky buď přímo inkoustem nebo inverzně</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/59-configurable-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/59-configurable-ascii-table.asm</a></td></tr>
<tr><td>60</td><td>60-plot-over.asm</td><td>přibližná implementace příkazu <strong>PLOT OVER</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/60-plot-over.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/60-plot-over.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>61-print-number-A.asm</td><td>ukázka použití podprogramu pro tisk celého čísla</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/61-print-number-A.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/61-print-number-A.asm</a></td></tr>
<tr><td>62</td><td>62-print-number-B.asm</td><td>pokus o vytištění záporných čísel</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/62-print-number-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/62-print-number-B.asm</a></td></tr>
<tr><td>63</td><td>63-print-number-C.asm</td><td>tisk maximální podporované hodnoty 9999</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/63-print-number-C.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/63-print-number-C.asm</a></td></tr>
<tr><td>64</td><td>64-print-number-D.asm</td><td>tisk vyšší než podporované hodnoty 10000</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/64-print-number-D.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/64-print-number-D.asm</a></td></tr>
<tr><td>65</td><td>65-more-numbers-A.asm</td><td>vytištění číselné řady</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/65-more-numbers-A.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/65-more-numbers-A.asm</a></td></tr>
<tr><td>66</td><td>66-more-numbers-B.asm</td><td>kombinace tisku celočíselných hodnot s&nbsp;dalšími subrutinami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/66-more-numbers-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/66-more-numbers-B.asm</a></td></tr>
<tr><td>67</td><td>67-print-flags-1.asm</td><td>příznakové bity po provedení celočíselné operace 1+2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/67-print-flags-1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/67-print-flags-1.asm</a></td></tr>
<tr><td>68</td><td>68-print-flags-2.asm</td><td>příznakové bity po provedení celočíselné operace 0+0</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/68-print-flags-2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/68-print-flags-2.asm</a></td></tr>
<tr><td>69</td><td>69-print-flags-3.asm</td><td>příznakové bity po provedení operace 255+1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/69-print-flags-3.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/69-print-flags-3.asm</a></td></tr>
<tr><td>70</td><td>70-print-flags-4.asm</td><td>příznakové bity po provedení operace 254+1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/70-print-flags-4.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/70-print-flags-4.asm</a></td></tr>
<tr><td>71</td><td>71-print-flags-5.asm</td><td>příznakové bity po provedení operace 255+255</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/71-print-flags-5.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/71-print-flags-5.asm</a></td></tr>
<tr><td>72</td><td>72-print-flags-6.asm</td><td>výsledek operace 100+100, nastavení příznakových bitů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/72-print-flags-6.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/72-print-flags-6.asm</a></td></tr>
<tr><td>73</td><td>73-print-flags-7.asm</td><td>výsledek operace 128+128, nastavení příznakových bitů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/73-print-flags-7.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/73-print-flags-7.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>74</td><td>74-print-hex-number.asm</td><td>tisk hexadecimálního čísla v&nbsp;rozsahu 0x00 až 0xff (neoptimalizovaná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/74-print-hex-number.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/74-print-hex-number.asm</a></td></tr>
<tr><td>75</td><td>75-print-hex-number.asm</td><td>tisk hexadecimálního čísla v&nbsp;rozsahu 0x00 až 0xff (optimalizovaná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/75-print-hex-number.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/75-print-hex-number.asm</a></td></tr>
<tr><td>76</td><td>76-print-hex-numbers.asm</td><td>tisk několika hexadecimálních hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/76-print-hex-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/76-print-hex-numbers.asm</a></td></tr>
<tr><td>77</td><td>77-add-hex-numbers.asm</td><td>součet dvou osmibitových hexadecimálních hodnot s&nbsp;tiskem všech výsledků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/77-add-hex-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/77-add-hex-numbers.asm</a></td></tr>
<tr><td>78</td><td>78-add-bcd-numbers.asm</td><td>součet dvou osmibitových BCD hodnot s&nbsp;tiskem všech výsledků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/78-add-bcd-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/78-add-bcd-numbers.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>79</td><td>79-print-hex-digit-jmp.asm</td><td>tisk jedné hexadecimální cifry s&nbsp;využitím podmíněného skoku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/79-print-hex-digit-jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/79-print-hex-digit-jmp.asm</a></td></tr>
<tr><td>80</td><td>80-print-hex-digit-overflow.asm</td><td>otestování, jaký znak je vytištěn pro hodnoty větší než 15</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/80-print-hex-digit-overflow.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/80-print-hex-digit-overflow.asm</a></td></tr>
<tr><td>81</td><td>81-print-hex-digit-daa.asm</td><td>tisk jedné hexadecimální cifry s&nbsp;využitím instrukce DAA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/81-print-hex-digit-daa.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/81-print-hex-digit-daa.asm</a></td></tr>
<tr><td>82</td><td>82-print-hex-numbers-daa.asm</td><td>tisk série hexadecimálních hodnot s&nbsp;využitím instrukce DAA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/82-print-hex-numbers-daa.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/82-print-hex-numbers-daa.asm</a></td></tr>
<tr><td>83</td><td>83-print-fp-numbers.asm</td><td>tisk numerických hodnot reprezentovaných v&nbsp;systému plovoucí řádové tečky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/83-print-fp-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/83-print-fp-numbers.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>84</td><td>84-print-ascii-table.asm</td><td>tisk jednoho bloku s&nbsp;ASCII tabulkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/84-print-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/84-print-ascii-table.asm</a></td></tr>
<tr><td>85</td><td>85-copy-ascii-table.asm</td><td>kopie bloku bajt po bajtu založená na naivní programové smyčce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/85-copy-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/85-copy-ascii-table.asm</a></td></tr>
<tr><td>86</td><td>86-copy-ascii-table-B.asm</td><td>kopie bloku s&nbsp;využitím instrukce <strong>LDIR</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/86-copy-ascii-table-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/86-copy-ascii-table-B.asm</a></td></tr>
<tr><td>87</td><td>87-copy-ascii-table-C.asm</td><td>kopie bloku bajt po bajtu založená na programové smyčce a instrukci <strong>LDI</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/87-copy-ascii-table-C.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/87-copy-ascii-table-C.asm</a></td></tr>
<tr><td>88</td><td>88-copy-ascii-table-D.asm</td><td>rozbalení programové smyčky s&nbsp;instrukcí <strong>LDI</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/88-copy-ascii-table-D.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/88-copy-ascii-table-D.asm</a></td></tr>
<tr><td>89</td><td>89-copy-ascii-table-E.asm</td><td>korektní smyčka pro všechny možné velikosti bloků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/89-copy-ascii-table-E.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/89-copy-ascii-table-E.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>90</td><td>90-copy-ascii-table-F.asm</td><td>kostra programu, který pro kopii bloků (16 bajtů) využívá zásobník</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/90-copy-ascii-table-F.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/90-copy-ascii-table-F.asm</a></td></tr>
<tr><td>91</td><td>91-copy-ascii-table-G.asm</td><td>definice makra a několikeré použití (aplikace) tohoto makra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/91-copy-ascii-table-G.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/91-copy-ascii-table-G.asm</a></td></tr>
<tr><td>92</td><td>92-copy-ascii-table-H.asm</td><td>opakování makra založené na <strong>REPT</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/92-copy-ascii-table-H.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/92-copy-ascii-table-H.asm</a></td></tr>
<tr><td>93</td><td>93-copy-ascii-table-I.asm</td><td>vícenásobná kopie části obrazovky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/93-copy-ascii-table-I.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/93-copy-ascii-table-I.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>94</td><td>94-color-attribute.asm</td><td>modifikace jednoho barvového atributu na obrazovce ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/94-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/94-color-attribute.asm</a></td></tr>
<tr><td>95</td><td>95-keypress.asm</td><td>detekce stisku jedné klávesy s&nbsp;vizualizací stisku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm</a></td></tr>
<tr><td>96</td><td>96-keypress-row.asm</td><td>detekce stisku kláves v&nbsp;jednom fyzickém řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm</a></td></tr>
<tr><td>97</td><td>97-keypress-all-rows.asm</td><td>detekce stisku všech kláves klávesnice ZX Spectra 48k</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>98</td><td>98-game-character.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně s&nbsp;využitím klávesnice</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/98-game-character.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/98-game-character.asm</a></td></tr>
<tr><td>99</td><td>99-game-character-2.asm</td><td>vylepšení předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/99-game-character-2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/99-game-character-2.asm</a></td></tr>
<tr><td>100</td><td>100-cursor-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně kurzorovým joystickem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/100-cursor-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/100-cursor-joystick.asm</a></td></tr>
<tr><td>101</td><td>101-sinclair-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně joystickem připojeným přes Interface 2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/101-sinclair-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/101-sinclair-joystick.asm</a></td></tr>
<tr><td>102</td><td>102-kempston-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně joystickem připojeným přes rozhraní Kempston</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/102-kempston-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/102-kempston-joystick.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>103</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech demonstračních příkladů do podoby obrazu magnetické pásky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>The system variables<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html</a>
</li>

<li>ZX Spectrum manual: chapter #17 Graphics<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Plovoucí řádová čárka na ZX Spectru<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>1A1B: THE 'REPORT AND LINE NUMBER PRINTING' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/1A1B.html">https://skoolkid.github.io/rom/asm/1A1B.html</a>
</li>

<li>2DE3: THE 'PRINT A FLOATING-POINT NUMBER' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/2DE3.html">https://skoolkid.github.io/rom/asm/2DE3.html</a>
</li>

<li>5C63: STKBOT - Address of bottom of calculator stack<br />
<a href="https://skoolkid.github.io/rom/asm/5C63.html">https://skoolkid.github.io/rom/asm/5C63.html</a>
</li>

<li>5C65: STKEND - Address of start of spare space<br />
<a href="https://skoolkid.github.io/rom/asm/5C65.html">https://skoolkid.github.io/rom/asm/5C65.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Chapter 24: The memory<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap24.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap24.html</a>
</li>

<li>Survey of Floating-Point Formats  <br />
<a href="https://mrob.com/pub/math/floatformats.html">https://mrob.com/pub/math/floatformats.html</a>
</li>

<li>Convert an 8bit number to hex in z80 assembler<br />
<a href="https://stackoverflow.com/questions/22838444/convert-an-8bit-number-to-hex-in-z80-assembler">https://stackoverflow.com/questions/22838444/convert-an-8bit-number-to-hex-in-z80-assembler</a>
</li>

<li>80 MICROPROCESSOR Instruction Set Summary<br />
<a href="http://www.textfiles.com/programming/CARDS/z80">http://www.textfiles.com/programming/CARDS/z80</a>
</li>

<li>Extended Binary Coded Decimal Interchange Code<br />
<a href="http://en.wikipedia.org/wiki/EBCDIC">http://en.wikipedia.org/wiki/EBCDIC</a>
</li>

<li>ASCII/EBCDIC Conversion Table<br />
<a href="http://docs.hp.com/en/32212-90008/apcs01.html">http://docs.hp.com/en/32212-90008/apcs01.html</a>
</li>

<li>EBCDIC<br />
<a href="http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php">http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php</a>
</li>

<li>EBCDIC tables<br />
<a href="http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm">http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm</a>
</li>

<li>The Mainframe Blog<br />
<a href="http://mainframe.typepad.com/blog/2006/11/my_personal_mai.html">http://mainframe.typepad.com/blog/2006/11/my_personal_mai.html</a>
</li>

<li>Binary-coded decimal<br />
<a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">https://en.wikipedia.org/wiki/Binary-coded_decimal</a>
</li>

<li>BCD<br />
<a href="https://cs.wikipedia.org/wiki/BCD">https://cs.wikipedia.org/wiki/BCD</a>
</li>

<li>Z80 heaven: Floating Point<br />
<a href="http://z80-heaven.wikidot.com/floating-point">http://z80-heaven.wikidot.com/floating-point</a>
</li>

<li>Z80, the 8-bit Number Cruncher<br />
<a href="http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html">http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html</a>
</li>

<li>Floating-point library for Z80<br />
<a href="https://github.com/DW0RKiN/Floating-point-Library-for-Z80">https://github.com/DW0RKiN/Floating-point-Library-for-Z80</a>
</li>

<li>z80float<br />
<a href="https://github.com/Zeda/z80float">https://github.com/Zeda/z80float</a>
</li>

<li>Fixed point arithmetic<br />
<a href="https://www.root.cz/clanky/fixed-point-arithmetic/">https://www.root.cz/clanky/fixed-point-arithmetic/</a>
</li>

<li>ZX Spectrum BASIC Programming - 2nd Edition<br />
<a href="https://archive.org/details/zx-spectrum-basic-programming/page/n167/mode/2up">https://archive.org/details/zx-spectrum-basic-programming/page/n167/mode/2up</a>
</li>

<li>ZX Spectrum BASIC Programming - 2nd Edition<br />
<a href="https://archive.org/details/zx-spectrum-basic-programming/page/n169/mode/2up">https://archive.org/details/zx-spectrum-basic-programming/page/n169/mode/2up</a>
</li>

<li>How fast is memcpy on the Z80?<br />
<a href="https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80">https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80</a>
</li>

<li>How do Z80 Block Transfer instructions work?<br />
<a href="https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work">https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work</a>
</li>

<li>Retro Programming Made Simple: Keyboard<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/keyboard">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/keyboard</a>
</li>

<li>How ZX Spectrum avoided key ghosting<br />
<a href="https://retrocomputing.stackexchange.com/questions/16235/how-zx-spectrum-avoided-key-ghosting">https://retrocomputing.stackexchange.com/questions/16235/how-zx-spectrum-avoided-key-ghosting</a>
</li>

<li>ZX Spectrum Keyboard Visualized<br />
<a href="http://www.kameli.net/marq/?p=2055">http://www.kameli.net/marq/?p=2055</a>
</li>

<li>Sinclair ZX Spectrum Joysticks Explained<br />
<a href="https://www.retroisle.com/general/spectrum_joysticks.php">https://www.retroisle.com/general/spectrum_joysticks.php</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

