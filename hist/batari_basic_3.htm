<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba her pro Atari 2600 v Batari BASICu: úkol pro hardcode programátory (3)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba her pro Atari 2600 v Batari BASICu: úkol pro hardcode programátory (3)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Tvorba her pro Atari 2600 v Batari BASICu: úkol pro hardcode programátory (3)</a></p>
<p><a href="#k02">2. Hráči (<i>players</i>)</a></p>
<p><a href="#k03">3. Šířka vykreslování hráčů</a></p>
<p><a href="#k04">*** 4. Opakování vykreslení stejného hráče na jednom obrazovém řádku</a></p>
<p><a href="#k05">*** 5. Větší množství objektů ve vykreslované scéně</a></p>
<p><a href="#k06">*** 6. Zobrazení skóre</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">12. Generování zvuků čipem TIA</a></p>
<p><a href="#k13">13. Zvukový subsystém čipu TIA</a></p>
<p><a href="#k14">14. Řídicí registry určené pro nastavení zvuků</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba her pro Atari 2600 v Batari BASICu: úkol pro hardcode programátory (3)</h2>

<p></p>

<table>
<tr><th>#</th><th>Typ objektu</th><th>Orig.název</th><th>Objem paměti</th><th>Šířka reprezentovaná jedním bitem</th></tr>
<tr><td>1</td><td>Pozadí</td><td>Background</td><td> 0 bitů</td><td>&times;</td></tr>
<tr><td>2</td><td>Hrací plocha</td><td>Playground</td><td>20 bitů</td><td>4&times; základní šířka pixelu</td></tr>
<tr><td>3</td><td>Míč</td><td>Ball</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td>4</td><td>Hráč 0</td><td>Player 0</td><td> 8 bitů</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td>5</td><td>Střela 0</td><td>Missile 0</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td>6</td><td>Hráč 1</td><td>Player 1</td><td> 8 bitů</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td>7</td><td>Střela 1</td><td>Missile 1</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
</table>

<p>Ve druhé tabulce jsou vypsány vlastnosti jednotlivých grafických objektů,
které bylo možné měnit zápisem vhodných hodnot do řídicích registrů čipu
<i>TIA</i>:</p>

<table>
<tr><th>#</th><th>Typ objektu</th><th>Orig.název </th><th>Volba barvy</th><th>Další možnosti</th></tr>
<tr><td>1</td><td>Pozadí</td><td>Background</td><td>ano</td><td>&times;</td></tr>
<tr><td>2</td><td>Hrací plocha</td><td>Playground</td><td>pro jedničkové bity</td><td>opakování či zrcadlení v&nbsp;pravé polovině obrazu</td></tr>
<tr><td>3</td><td>Míč</td><td>Ball</td><td>= barva hrací plochy</td><td>posun, relativní posun, vertikální posun o jeden řádek, změna velikosti</td></tr>
<tr><td>4</td><td>Hráč 0</td><td>Player 0</td><td>pro jedničkové bity</td><td>posun, změna šířky, opakování 2&times;, 3&times;</td></tr>
<tr><td>5</td><td>Střela 0</td><td>Missile 0</td><td>= barva hráče 0</td><td>-//-</td></tr>
<tr><td>6</td><td>Hráč 1</td><td>Player 1</td><td>pro jedničkové bity</td><td>posun, změna šířky, opakování 2&times;, 3&times;</td></tr>
<tr><td>7</td><td>Střela 1</td><td>Missile 1</td><td>= barva hráče 1</td><td>-//-</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Hráči (<i>players</i>)</h2>

<p>Posledním typem grafických objektů poskytovaných resp.&nbsp;přesněji řečeno
vykreslovaných čipem TIA jsou hráči neboli <i>players</i>. Podporováno je
vykreslení dvou hráčů označovaných jako <strong>player0</strong> a
<strong>player1</strong>. Hráči mohou být, jak již ostatně víme <a
href="https://www.root.cz/clanky/tvorba-her-pro-atari-2600-v-batari-basicu-ovladani-cipu-tia/">z&nbsp;předchozího
článku</a>, širocí osm pixelů a jsou definováni bitovým vzorkem (neboli jedním
bajtem). V&nbsp;případě, že se bajt s&nbsp;definicí hráče nebude při
vykreslování snímku měnit, bude hráč vykreslen formou vertikálního vzorku,
který bude na všech obrazových řádcích totožný. Výška hráče může být
v&nbsp;Batari BASICu libovolná a definice jeho bitmapy je realizována ve
struktuře nazvané taktéž <strong>player0</strong> nebo
<strong>player1</strong>. Nastavovat lze pozici hráčů na obrazovce, barva hráčů
je určena registry <strong>COLUP0</strong> a <strong>COLUP1</strong>. A &ndash;
jak jsme si řekli minule &ndash; je možné změnit prioritu zobrazení hráčů (i
střel) vůči hernímu poli (<i>playfield</i>).</p>

<p>Podívejme se však nejdříve na velmi jednoduchý demonstrační příklad,
v&nbsp;němž je použit hráč, který pochází z&nbsp;jedné varianty slavné hry
Space Invaders. Bitmapa definující tvar hráče je zapsána bitovým vzorkem
(výška, tedy počet řádků, je proměnný):</p>

<pre>
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
</pre>

<p>Nastavení pozice hráče na obrazovce se provádí s&nbsp;využitím
pseudoproměnných:</p>

<pre>
  player0x = 80
  player0y = 48
</pre>

<p>Barva hráče i pozadí se potom nastavuje přímo ve vykreslovací smyčce:</p>

<pre>
mainloop
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    drawscreen
    goto mainloop
</pre>

*** image ***
<p><i>Obrázek 3: Scéna vykreslená dnešním prvním demonstračním
příkladem.</i></p>

<p>Podívejme se nyní na <a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_1.bas">úplný
zdrojový kód</a> tohoto demonstračního příkladu, který obsahuje i definici
herního pole (<i>playfield</i>):</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 80
  player0y = 48
&nbsp;
mainloop
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    drawscreen
    goto mainloop
</pre>

<p>Pohyb hráče po herním světě se realizuje snadno změnou obsahu
pseudoproměnných <strong>player0x</strong> a <strong>player0y</strong>, které
lze modifikovat například pohybem joysticku:</p>

<pre>
    if joy0up then player0y = player0y - 1
    if joy0down then player0y = player0y + 1
    if joy0left then player0x = player0x - 1
    if joy0right then player0x = player0x + 1
</pre>

<p>Tento způsob ovládání hráče je ukázán <a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_2.bas">v&nbsp;dnešním
druhém demonstračním příkladu</a>:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 80
  player0y = 48
&nbsp;
mainloop
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    if joy0up then player0y = player0y - 1
    if joy0down then player0y = player0y + 1
    if joy0left then player0x = player0x - 1
    if joy0right then player0x = player0x + 1
&nbsp;
    drawscreen
    goto mainloop
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Šířka vykreslování hráčů</h2>

<p>Minule jsme si řekli, že šířka střel se nastavuje v&nbsp;horních bitech
řídicích registrů nazvaných <strong>NUSIZ0</strong> (pro první střelu) a
<strong>NUSIZ1</strong> (pro střelu druhou). Existují čtyři podporované šířky
střel, jak je to ostatně patrné z&nbsp;následující tabulky:</p>

<table>
<tr><th>NUSIZ0/NUSIZ1</th><th>Stručný popis</th></tr>
<tr><td>$0x</td><td>střela s&nbsp;šířkou jednoho pixelu</td></tr>
<tr><td>$1x</td><td>střela s&nbsp;šířkou dvou pixelů</td></tr>
<tr><td>$2x</td><td>střela s&nbsp;šířkou čtyř pixelů</td></tr>
<tr><td>$3x</td><td>střela s&nbsp;šířkou osmi pixelů</td></tr>
</table>

<p>Spodní čtyři bity slouží k&nbsp;nastavení opakování zobrazení hráčů/střel a
taktéž ke zvětšení hráčů ve směru osy x (což je vlastně stejné, jako zvětšení
střel). Ovšem hráče je možné zvětšit pouze 2&times; a 4&times;, nikoli již
8&times;:</p>

<table>
<tr><th>NUSIZ0/NUSIZ1</th><th>Stručný popis</th></tr>
<tr><td>$x0</td><td>hráč v&nbsp;základním měřítku</td></tr>
<tr><td>$x5</td><td>hráč zvětšený dvojnásobně ve směru osy x</td></tr>
<tr><td>$x7</td><td>hráč zvětšený čtyřnásobně ve směru osy x</td></tr>
</table>

<p><a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_3.bas">V&nbsp;tomto
demonstračním příkladu</a> je hráč zvětšený 2&times;:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 80
  player0y = 48
&nbsp;
mainloop
    <strong>NUSIZ0 = $05</strong>
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    if joy0up then player0y = player0y - 1
    if joy0down then player0y = player0y + 1
    if joy0left then player0x = player0x - 1
    if joy0right then player0x = player0x + 1
&nbsp;
    drawscreen
    goto mainloop
</pre>

*** image ***
<p><i>Obrázek 4: Hráč zvětšený 2&times;.</i></p>

<p>A <a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_4.bas">v&nbsp;tomto
příkladu</a> je zvětšen 4&times; ve směru osy x a 2&times; ve směru osy y
(opakováním vzorku):</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %01000010
   %10000001
   %10000001
   %01011010
   %01011010
   %11111111
   %11111111
   %11011011
   %11011011
   %01111110
   %01111110
   %00111100
   %00111100
   %00011000
   %00011000
end
&nbsp;
  player0x = 80
  player0y = 48
&nbsp;
mainloop
    <strong>NUSIZ0 = $07</strong>
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    if joy0up then player0y = player0y - 1
    if joy0down then player0y = player0y + 1
    if joy0left then player0x = player0x - 1
    if joy0right then player0x = player0x + 1
&nbsp;
    drawscreen
    goto mainloop
</pre>

*** image ***
<p><i>Obrázek 5: Hráč zvětšený 4&times;.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Opakování vykreslení stejného hráče na jednom obrazovém řádku</h2>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %01000010
   %10000001
   %10000001
   %01011010
   %01011010
   %11111111
   %11111111
   %11011011
   %11011011
   %01111110
   %01111110
   %00111100
   %00111100
   %00011000
   %00011000
end
&nbsp;
  player0x = 80
  player0y = 48
&nbsp;
mainloop
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    if joy0up then player0y = player0y - 1
    if joy0down then player0y = player0y + 1
    if joy0left then player0x = player0x - 1
    if joy0right then player0x = player0x + 1
    if joy0fire then a = a + 1
&nbsp;
    rem Zpomaleni zmeny
    if a &gt; 8 then b = b + 1: a = 0
    if b = 5 then b = 6
    if b = 7 then b = 0
    NUSIZ0 = b
&nbsp;
    drawscreen
    goto mainloop
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
   player1:
   %10100101
   %01011010
   %00100100
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 20
  player0y = 20
&nbsp;
  player1x = 140
  player1y = 30
&nbsp;
  missile0x = 80
  missile0y = 40
  missile0height = 4
&nbsp;
  missile1x = 80
  missile1y = 60
  missile1height = 4
&nbsp;
  ballx = 80
  bally = 50
  ballheight = 8
&nbsp;
  rem Posun hrace #1 v horizontalnim smeru
  let a = 1
&nbsp;
  rem Posun hrace #2 v horizontalnim smeru
  let b = 1
&nbsp;
  rem Posun strely 0 v horizontalnim i vertikalnim smeru
  let c = 1
  let d = 1
&nbsp;
  rem Posun strely 1 v horizontalnim i vertikalnim smeru
  let e = 1
  let f = -1
&nbsp;
mainloop
    rem Sirka strel
    NUSIZ0 = $20
    NUSIZ1 = $20
&nbsp;
    rem Sirka mice
    CTRLPF = $31
&nbsp;
    rem Barvy pozadi i hracu
    COLUPF = 14
    COLUP0 = $1E
    COLUP1 = $4E
&nbsp;
    player0x = player0x + a
    if player0x &gt;= 152 then player0x = 152: a =- 1
    if player0x &lt;= 0 then player0x = 0: a = 1
&nbsp;
    player1x = player1x + b
    if player1x &gt;= 152 then player1x = 152: b =- 1
    if player1x &lt;= 1 then player1x = 1: b = 1
&nbsp;
    missile0x = missile0x + c
    if missile0x &gt;= 152 then missile0x = 152: c =- 1
    if missile0x &lt;= 1 then missile0x = 1: c = 1
    missile0y = missile0y + d
    if missile0y &gt;= 80 then missile0y = 80: d =- 1
    if missile0y &lt;= 10 then missile0y = 10: d = 1
&nbsp;
    missile1x = missile1x + e
    if missile1x &gt;= 152 then missile1x = 152: e =- 1
    if missile1x &lt;= 1 then missile1x = 1: e = 1
    missile1y = missile1y + f
    if missile1y &gt;= 80 then missile1y = 80: f =- 1
    if missile1y &lt;= 10 then missile1y = 10: f = 1
&nbsp;
    if joy0up then bally = bally - 1
    if joy0down then bally = bally + 1
    if joy0left then ballx = ballx - 1
    if joy0right then ballx = ballx + 1
&nbsp;
    drawscreen
    goto mainloop
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end

   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end

   player1:
   %10100101
   %01011010
   %00100100
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end

  player0x = 20
  player0y = 20

  player1x = 140
  player1y = 30

  missile0x = 80
  missile0y = 40
  missile0height = 4

  missile1x = 80
  missile1y = 60
  missile1height = 4

  ballx = 80
  bally = 50
  ballheight = 8

  rem Posun hrace #1 v horizontalnim smeru
  let a = 1

  rem Posun hrace #2 v horizontalnim smeru
  let b = 1

  rem Posun strely 0 v horizontalnim i vertikalnim smeru
  let c = 1
  let d = 1

  rem Posun strely 1 v horizontalnim i vertikalnim smeru
  let e = 1
  let f = -1

mainloop
    rem Sirka strel
    NUSIZ0 = $20
    NUSIZ1 = $20

    rem Sirka mice
    CTRLPF = $31

    rem Barvy pozadi i hracu
    COLUPF = 14
    COLUP0 = $1E
    COLUP1 = $4E

    player0x = player0x + a
    if player0x &gt;= 152 then player0x = 152: a =- 1
    if player0x &lt;= 0 then player0x = 0: a = 1
    
    player1x = player1x + b
    if player1x &gt;= 152 then player1x = 152: b =- 1
    if player1x &lt;= 1 then player1x = 1: b = 1
    
    missile0x = missile0x + c
    if missile0x &gt;= 152 then missile0x = 152: c =- 1
    if missile0x &lt;= 1 then missile0x = 1: c = 1
    missile0y = missile0y + d
    if missile0y &gt;= 80 then missile0y = 80: d =- 1
    if missile0y &lt;= 10 then missile0y = 10: d = 1
    
    missile1x = missile1x + e
    if missile1x &gt;= 152 then missile1x = 152: e =- 1
    if missile1x &lt;= 1 then missile1x = 1: e = 1
    missile1y = missile1y + f
    if missile1y &gt;= 80 then missile1y = 80: f =- 1
    if missile1y &lt;= 10 then missile1y = 10: f = 1
    
    if joy0up then bally = bally - 1
    if joy0down then bally = bally + 1
    if joy0left then ballx = ballx - 1
    if joy0right then ballx = ballx + 1

    if collision(missile0, player0) then COLUPF = $38
    if collision(missile0, player1) then COLUPF = $48
    if collision(missile1, player0) then COLUPF = $58
    if collision(missile1, player1) then COLUPF = $68
    if collision(missile0, missile1) then COLUPF = $78
    if collision(ball, player0) then COLUP0 = $48
    if collision(ball, player1) then COLUP1 = $48
    if collision(ball, missile0) then COLUP0 = $48
    if collision(ball, missile1) then COLUP1 = $48

    drawscreen
    goto mainloop
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p>Ve druhé části dnešního článku si (i když s&nbsp;několika zjednodušeními)
popíšeme zvukové možnosti čipu <i>TIA</i> neboli plným jménem <i>Television
Interface Adaptor</i>. Připomeňme si (již naposledy), že se jedná o jeden
z&nbsp;pouhých tří integrovaných obvodů tvořících ústřední prvky
v&nbsp;minulosti velmi populární osmibitové herní konzole <i>Atari 2600</i>
neboli též <i>Atari VCS</i> (k&nbsp;přejmenování došlo společně se vznikem
další herní konzole <i>Atari 5200</i>).</p>

<p>Čip TIA se kromě generování grafického obrazu, což bylo téma předchozího
textu, stará i o zvukovou syntézu. Ta je z&nbsp;dnešního pohledu dosti
zvláštní. Na jednu stranu je způsob zvukové syntézy velmi jednoduchý a
v&nbsp;některých ohledech připomíná způsob zvukové syntézy použité o několik
let později v&nbsp;čipu <i>POKEY</i> v&nbsp;osmibitových domácích
mikropočítačích Atari (ale i v&nbsp;relativně velkém množství herních
automatů). Jednoduchost spočívá v&nbsp;možnosti generování pouze obdélníkových
signálů (pravidelných popř.&nbsp;sice nepravidelných, ale periodických),
jejichž amplituda může být nastavena na hodnoty 0-15 (řídí se tedy čtyřmi bity
řídicího registru resp.&nbsp;dvojice řídicích registrů).</p>

<p>Na druhou stranu však způsob interního zapojení posuvných registrů se
zpětnou vazbou nabízí poměrně velké množství kombinací, které vlastně nenajdeme
ani u čipu <i>POKEY</i>, který je jinak možné v&nbsp;oblasti generování zvuků a
hudby považovat za nástupce čipu TIA (totéž platí o GTIA, ovšem v&nbsp;oblasti
grafiky). TIA se tak stále používá v&nbsp;některých aplikacích <i>chiptune</i>,
samozřejmě vedle dalších čipů (POKEY, pochopitelně SID, Texas Instruments
SN76489, Texas Instruments SN76496, SN76477 a Ricoh 2A03/2A07 z&nbsp;NESu).</p>

<p>Vzhledem k&nbsp;tomu, že se čip TIA stará jak o vytváření video signálu, tak
i pro syntézu zvuků a hudby, je v&nbsp;něm několik modulů společných pro oba
jinak rozličné subsystémy. Zejména se to týká způsobu generování základního
hodinového signálu (přesněji řečeno dvojice signálů), které vstupují do
zvukového systému a od jejichž frekvence se odvíjí i frekvence přehrávaných
tónů. Podrobnosti budou uvedeny <a href="#k13">v&nbsp;navazující
kapitole</a>.</p>



<p>Základem všech signálů řídicích celou herní konzoli Atari 2600 je oscilátor,
který u NTSC varianty této konzole generuje hodinový signál o frekvenci
3,579545 MHz a u PAL varianty poněkud nižší frekvenci 3,546894 MHz (což
mimochodem znamená, že některé hry běží poněkud odlišnou rychlostí
v&nbsp;závislosti na použité televizní normě). Tento základní signál se nazývá
<i>pixel clock</i> (v&nbsp;některých dokumentech též <i>color clock</i>),
protože kromě dalších činností řídí i generování pixelů na obrazových řádcích
(262 řádků a necelých 60 snímků za sekundu u normy NTSC, 312 řádků a necelých
50 snímků za sekundu u normy PAL). Současně se tento signál dělí třemi a
výsledek o frekvencích 1,193182 MHz (NTSC) popř. 1,182298 MHz (PAL) slouží jako
hlavní řídicí hodinový signál mikroprocesoru MOS 6507. Z&nbsp;tohoto důvodu se
tento signál nazývá <i>CPU clock</i> a proto se dočteme, že hodinová frekvence
konzole Atari 2600 je 1,19 MHz, což ovšem platí jen pro NTSC variantu.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny <a href="">předminule</a>, <a href="">minule</a> i dnes popisované demonstrační příklady určené pro překlad
Batari-BASICem byly uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>playfield_1.bas</td><td>zobrazení herního pole, bez smyčky kernelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_1.bas</a></td></tr>
<tr><td> 2</td><td>playfield_2.bas</td><td>ukázka smyčky kernelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_2.bas</a></td></tr>
<tr><td> 3</td><td>playfield_3.bas</td><td>změna barvy herního pole mimo smyčku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_3.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_3.bas</a></td></tr>
<tr><td> 4</td><td>playfield_4.bas</td><td>změna barvy herního pole uvnitř smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_4.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_4.bas</a></td></tr>
<tr><td> 5</td><td>playfield_5.bas</td><td>postupná změna barvy herního pole</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_5.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_5.bas</a></td></tr>
<tr><td> 6</td><td>missile_1.bas</td><td>zobrazení střely nad herním polem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_1.bas</a></td></tr>
<tr><td> 7</td><td>missile_2.bas</td><td>pohyb střelou pomocí joysticku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_2.bas</a></td></tr>
<tr><td> 8</td><td>missile_3.bas</td><td>změna barvy střely tlačítkem joysticku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_3.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_3.bas</a></td></tr>
<tr><td> 9</td><td>missile_4.bas</td><td>předchozí příklad, ale s&nbsp;čísly řádků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_4.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_4.bas</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>missile_5.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_5.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_5.bas</a></td></tr>
<tr><td>11</td><td>missile_6.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_6.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_6.bas</a></td></tr>
<tr><td>12</td><td>missile_7.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_7.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_7.bas</a></td></tr>
<tr><td>13</td><td>missile_8.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_8.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_8.bas</a></td></tr>
<tr><td>14</td><td>missile_9.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_9.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_9.bas</a></td></tr>
<tr><td>15</td><td>missile_A.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_A.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_A.bas</a></td></tr>
<tr><td>16</td><td>missile_B.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_B.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_B.bas</a></td></tr>
<tr><td>17</td><td>players_1.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_1.bas</a></td></tr>
<tr><td>18</td><td>players_2.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_2.bas</a></td></tr>
<tr><td>19</td><td>players_3.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_3.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_3.bas</a></td></tr>
<tr><td>20</td><td>players_4.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_4.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_4.bas</a></td></tr>
<tr><td>21</td><td>players_5.bas</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_5.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_5.bas</a></td></tr>
<tr><td>22</td><td>collisions_1.bas</td><td>kolize mezi různými typy grafických objektů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/collisions_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/collisions_1.bas</a></td></tr>
<tr><td>23</td><td>collisions_2.bas</td><td>kolize mezi různými typy grafických objektů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/collisions_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/collisions_2.bas</a></td></tr>
<tr><td>24</td><td>score.bas</td><td>zobrazení skóre s&nbsp;ladicími informacemi</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/score.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/score.bas</a></td></tr>
<tr><td>25</td><td>players_repeat_1.bas</td><td>zobrazení hráče v&nbsp;několika kopiích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_repeat_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_repeat_1.bas</a></td></tr>
<tr><td>26</td><td>summary2.bas</td><td>shrnutí &ndash; relativně složité demo využívajících necelé 2kB ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/summary2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/summary2.bas</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/</a></td></tr>
<table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>STELLA PROGRAMMER'S GUIDE<br />
<a href="https://alienbill.com/2600/101/docs/stella.html">https://alienbill.com/2600/101/docs/stella.html</a>
</li>

<li>Batari BASIC GitHub repositář<br />
<a href="https://github.com/batari-Basic/batari-Basic">https://github.com/batari-Basic/batari-Basic</a>
</li>

<li>Programming Tutorial<br />
<a href="https://atariage.com/forums/topic/111938-programming-tutorial/">https://atariage.com/forums/topic/111938-programming-tutorial/</a>
</li>

<li>batari Basic Commands<br />
<a href="https://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html">https://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html</a>
</li>

<li>About batari Basic<br />
<a href="https://bataribasic.com/">https://bataribasic.com/</a>
</li>

<li>Rationale<br />
<a href="https://bataribasic.com/rationale.html">https://bataribasic.com/rationale.html</a>
</li>

<li>Games That Push The Limits of the Atari 2600<br />
<a href="https://www.youtube.com/watch?v=zM0IsWdIc_g">https://www.youtube.com/watch?v=zM0IsWdIc_g</a>
</li>

<li>Vývojové nástroje používané v&nbsp;dobách osmibitových mikropočítačů<br />
<a href="https://www.root.cz/clanky/vyvojove-nastroje-pouzivane-v-dobach-osmibitovych-mikropocitacu/">https://www.root.cz/clanky/vyvojove-nastroje-pouzivane-v-dobach-osmibitovych-mikropocitacu/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/</a>
</li>

<li>Barvové palety čipu TIA<br />
<a href="http://www.qotile.net/minidig/docs/tia_color.html">http://www.qotile.net/minidig/docs/tia_color.html</a>
</li>

<li>Crazy Limit Pushing Games From the Last Years of the Atari 2600!<br />
<a href="https://www.youtube.com/watch?v=ADy1F8v59YU">https://www.youtube.com/watch?v=ADy1F8v59YU</a>
</li>

<li>Atari 2600 VCS Top 100 Games Hits (past week)<br />
<a href="http://www.atarimania.com/top-atari-atari-2600-vcs-_G_2_7.html">http://www.atarimania.com/top-atari-atari-2600-vcs-_G_2_7.html</a>
</li>

<li>Tobikomi - The Sound Of Thunder [Atari TIA Chip]<br />
<a href="https://www.youtube.com/watch?v=j0w-IZ6nAMQ">https://www.youtube.com/watch?v=j0w-IZ6nAMQ</a>
</li>

<li>TIA Visual Objects<br />
<a href="https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Visual_Objects.md">https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Visual_Objects.md</a>
</li>

<li>TIA Sound<br />
<a href="https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Sound.md">https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Sound.md</a>
</li>

<li>How To Make An Atari Game<br />
<a href="https://www.youtube.com/watch?v=Ww3her2zk_I">https://www.youtube.com/watch?v=Ww3her2zk_I</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 1<br />
<a href="https://www.youtube.com/watch?v=Iqo_oARxjEg">https://www.youtube.com/watch?v=Iqo_oARxjEg</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 2<br />
<a href="https://www.youtube.com/watch?v=hFFQjwFbzV8">https://www.youtube.com/watch?v=hFFQjwFbzV8</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 3<br />
<a href="https://www.youtube.com/watch?v=lZ0AL6jCBXY">https://www.youtube.com/watch?v=lZ0AL6jCBXY</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 4 - Title screens and challenges<br />
<a href="https://www.youtube.com/watch?v=-G2kmsmqk-E">https://www.youtube.com/watch?v=-G2kmsmqk-E</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 5 - Sound<br />
<a href="https://www.youtube.com/watch?v=9rX2eo20xq8">https://www.youtube.com/watch?v=9rX2eo20xq8</a>
</li>

<li>Let's Make an Atari 2600 game! 6 - Realtime RPG combat<br />
<a href="https://www.youtube.com/watch?v=alRGuQ9gjRA">https://www.youtube.com/watch?v=alRGuQ9gjRA</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 7 - Monsters<br />
<a href="https://www.youtube.com/watch?v=vaAlYC_8YSA">https://www.youtube.com/watch?v=vaAlYC_8YSA</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 8 - 3D Engine<br />
<a href="https://www.youtube.com/watch?v=c1dPY1ROZe4">https://www.youtube.com/watch?v=c1dPY1ROZe4</a>
</li>

<li>Let's Make an Atari 2600 Game - Part 9 - Homemade cartridge<br />
<a href="https://www.youtube.com/watch?v=xKlMohF_9Cc">https://www.youtube.com/watch?v=xKlMohF_9Cc</a>
</li>

<li>Bird Poop! - Atari 2600 Homebrew - batari Basic<br />
<a href="https://www.youtube.com/watch?v=-m4gKis0vBg">https://www.youtube.com/watch?v=-m4gKis0vBg</a>
</li>

<li>DP Interviews: Bob Whitehead (By Scott Stilphen)<br />
<a href="http://www.digitpress.com/library/interviews/interview_bob_whitehead.html">http://www.digitpress.com/library/interviews/interview_bob_whitehead.html</a>
</li>

<li>The dasm macro assembler<br />
<a href="http://dasm-dillon.sourceforge.net/">http://dasm-dillon.sourceforge.net/</a>
</li>

<li>Official home of dasm, a versatile macro assembler<br />
<a href="https://dasm-assembler.github.io/">https://dasm-assembler.github.io/</a>
</li>

<li>Dokumentace k&nbsp;DASMu<br />
<a href="https://raw.githubusercontent.com/dasm-assembler/dasm/master/docs/dasm.pdf">https://raw.githubusercontent.com/dasm-assembler/dasm/master/docs/dasm.pdf</a>
</li>

<li>Atari Programming Workshop Chapter links<br />
<a href="http://atariage.com/forums/viewtopic.php?t=47479">http://atariage.com/forums/viewtopic.php?t=47479</a>
</li>

<li>Various Development Kits<br />
<a href="http://devkits.handheldmuseum.com/">http://devkits.handheldmuseum.com/</a>
</li>

<li>Classic Console Development<br />
<a href="http://sebastianmihai.com/ccd/">http://sebastianmihai.com/ccd/</a>
</li>

<li>Atari 2600 development - Snappy (batari basic)<br />
<a href="http://sebastianmihai.com/main.php?t=47">http://sebastianmihai.com/main.php?t=47</a>
</li>

<li>Atari VCS (Atari 2600) - fotografie<br />
<a href="http://oldcomputers.net/atari-vcs.html">http://oldcomputers.net/atari-vcs.html</a>
</li>

<li>History of Consoles: Atari VCS/2600 (1977)<br />
<a href="http://gamester81.com/history-of-consoles-atari-vcs2600-1977/">http://gamester81.com/history-of-consoles-atari-vcs2600-1977/</a>
</li>

<li>Iag Bogost: Racing the Beam<br />
<a href="http://www.bogost.com/books/video_computer_system.shtml">http://www.bogost.com/books/video_computer_system.shtml</a>
</li>

<li>Atari 2600 Programming Tutorial<br />
<a href="http://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-01.html">http://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-01.html</a>
</li>

<li>Atari 2600 Development Cartridge *Super Deluxe*~!<br />
<a href="http://jazz-disassemblies.blogspot.cz/2013/09/atari-2600-development-cartridge-super.html">http://jazz-disassemblies.blogspot.cz/2013/09/atari-2600-development-cartridge-super.html</a>
</li>

<li>Atari "Alpine" Devkit (pro Atari Jaguar)<br />
<a href="http://justclaws.atari.org/devcats/hardware/ataridev.htm">http://justclaws.atari.org/devcats/hardware/ataridev.htm</a>
</li>

<li>6502 compatible assembler and emulator in javascript<br />
<a href="http://www.6502asm.com/">http://www.6502asm.com/</a>
</li>

<li>Atari 2600 Programming<br />
<a href="http://atariage.com/2600/programming/">http://atariage.com/2600/programming/</a>
</li>

<li>Retrozone - Brand new original homebrew games by current programmers<br />
<a href="http://www.retrousb.com/index.php?cPath=30">http://www.retrousb.com/index.php?cPath=30</a>
</li>

<li>ATARI VCS/2600 TIA CHIPS<br />
<a href="http://www.ataricompendium.com/faq/vcs_tia/vcs_tia.html">http://www.ataricompendium.com/faq/vcs_tia/vcs_tia.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://www.vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next">https://www.vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next</a>
</li>

<li>ZX Spectrum development with modern tools<br />
<a href="http://www.breakintoprogram.co.uk/software_development/zx-spectrum-development-with-modern-tools">http://www.breakintoprogram.co.uk/software_development/zx-spectrum-development-with-modern-tools</a>
</li>

<li>Z80 Development Toolchain<br />
<a href="http://www.breakintoprogram.co.uk/computers/zx-spectrum/assembly-language/z80-development-toolchain">http://www.breakintoprogram.co.uk/computers/zx-spectrum/assembly-language/z80-development-toolchain</a>
</li>

<li>Space Invaders Sprite Sheet<br />
<a href="https://www.deviantart.com/gooperblooper22/art/Space-Invaders-Sprite-Sheet-135338373">https://www.deviantart.com/gooperblooper22/art/Space-Invaders-Sprite-Sheet-135338373</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
