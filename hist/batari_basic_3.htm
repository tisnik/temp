<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba her pro Atari 2600 v Batari BASICu: úkol pro hardcode programátory (3)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba her pro Atari 2600 v Batari BASICu: úkol pro hardcode programátory (3)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části článku o programování her a dem pro herní konzoli Atari 2600 (VCS) nejprve dokončíme popis standardního kernelu Batari BASICu. Poté si řekneme, jak se na této herní konzoli pracuje se zvuky; pochopitelně přidáme i demonstrační příklady.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba her pro Atari 2600 v Batari BASICu: úkol pro hardcode programátory (3)</a></p>
<p><a href="#k02">2. Hráči (<i>players</i>)</a></p>
<p><a href="#k03">3. Šířka vykreslování hráčů</a></p>
<p><a href="#k04">4. Opakování vykreslení stejného hráče na jednom obrazovém řádku</a></p>
<p><a href="#k05">5. Větší množství objektů ve vykreslované scéně</a></p>
<p><a href="#k06">6. Zobrazení skóre</a></p>
<p><a href="#k07">7. Trik použitý při vykreslení skóre</a></p>
<p><a href="#k08">8. Detekce kolizí podruhé</a></p>
<p><a href="#k09">9. Úplný zdrojový kód demonstračního příkladu</a></p>
<p><a href="#k10">10. Generování zvuků čipem TIA</a></p>
<p><a href="#k11">11. Zvukový subsystém čipu TIA</a></p>
<p><a href="#k12">12. Řídicí registry určené pro nastavení zvuků</a></p>
<p><a href="#k13">13. Tabulka not</a></p>
<p><a href="#k14">14. Jednoduchý zvuk vytvořený v&nbsp;Batari BASICu</a></p>
<p><a href="#k15">15. Změna frekvence tónu modifikací dělitele</a></p>
<p><a href="#k16">16. Zvuky získané zpětnovazebními posuvnými registry</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba her pro Atari 2600 v Batari BASICu: úkol pro hardcode programátory (3)</h2>

<p>Připomeňme si nejdříve základní informace <a
href="https://www.root.cz/clanky/tvorba-her-pro-atari-2600-v-batari-basicu-ovladani-cipu-tia/">z&nbsp;předchozího
článku</a>. Čip TIA v&nbsp;herní konzoli Atari 2600 dokáže zobrazit pouhých
šest grafických objektů, k&nbsp;nimž se přidává pozadí realizované konstantní
barvou:</p>

<table>
<tr><th>#</th><th>Typ objektu</th><th>Orig.název</th><th>Objem paměti</th><th>Šířka reprezentovaná jedním bitem</th></tr>
<tr><td>1</td><td>Pozadí</td><td>Background</td><td> 0 bitů</td><td>&times;</td></tr>
<tr><td>2</td><td>Hrací plocha</td><td>Playground</td><td>20 bitů</td><td>4&times; základní šířka pixelu</td></tr>
<tr><td>3</td><td>Míč</td><td>Ball</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td>4</td><td>Hráč 0</td><td>Player 0</td><td> 8 bitů</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td>5</td><td>Střela 0</td><td>Missile 0</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td>6</td><td>Hráč 1</td><td>Player 1</td><td> 8 bitů</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td>7</td><td>Střela 1</td><td>Missile 1</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
</table>

<a href="http://i.iinfo.cz/images/74/hry11-20.png"><img src="http://i.iinfo.cz/images/74/hry11-20-prev.png" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 1: Screenshot ze hry Spy Hunter.</i></p>

<p>Ve druhé tabulce jsou vypsány vlastnosti jednotlivých grafických objektů,
které bylo možné měnit zápisem vhodných hodnot do řídicích registrů čipu
<i>TIA</i>:</p>

<table>
<tr><th>#</th><th>Typ objektu</th><th>Orig.název </th><th>Volba barvy</th><th>Další možnosti</th></tr>
<tr><td>1</td><td>Pozadí</td><td>Background</td><td>ano</td><td>&times;</td></tr>
<tr><td>2</td><td>Hrací plocha</td><td>Playground</td><td>pro jedničkové bity</td><td>opakování či zrcadlení v&nbsp;pravé polovině obrazu</td></tr>
<tr><td>3</td><td>Míč</td><td>Ball</td><td>= barva hrací plochy</td><td>posun, relativní posun, vertikální posun o jeden řádek, změna velikosti</td></tr>
<tr><td>4</td><td>Hráč 0</td><td>Player 0</td><td>pro jedničkové bity</td><td>posun, změna šířky, opakování 2&times;, 3&times;</td></tr>
<tr><td>5</td><td>Střela 0</td><td>Missile 0</td><td>= barva hráče 0</td><td>-//-</td></tr>
<tr><td>6</td><td>Hráč 1</td><td>Player 1</td><td>pro jedničkové bity</td><td>posun, změna šířky, opakování 2&times;, 3&times;</td></tr>
<tr><td>7</td><td>Střela 1</td><td>Missile 1</td><td>= barva hráče 1</td><td>-//-</td></tr>
</table>

<a href="http://i.iinfo.cz/images/74/hry11-17.png"><img src="http://i.iinfo.cz/images/74/hry11-17-prev.png" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 2: Úvodní obrazovka hry Jungle Hunt s&nbsp;prvním herním
prostředím.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Hráči (<i>players</i>)</h2>

<p>Posledním typem grafických objektů poskytovaných resp.&nbsp;přesněji řečeno
vykreslovaných čipem TIA jsou hráči neboli <i>players</i>. Podporováno je
vykreslení dvou hráčů označovaných jako <strong>player0</strong> a
<strong>player1</strong>. Hráči mohou být, jak již ostatně víme <a
href="https://www.root.cz/clanky/tvorba-her-pro-atari-2600-v-batari-basicu-ovladani-cipu-tia/">z&nbsp;předchozího
článku</a>, širocí osm pixelů a jsou definováni bitovým vzorkem (neboli jedním
bajtem). V&nbsp;případě, že se bajt s&nbsp;definicí hráče nebude při
vykreslování snímku měnit, bude hráč vykreslen formou vertikálního vzorku,
který bude na všech obrazových řádcích totožný. Výška hráče může být
v&nbsp;Batari BASICu libovolná a definice jeho bitmapy je realizována ve
struktuře nazvané taktéž <strong>player0</strong> nebo
<strong>player1</strong>. Nastavovat lze pozici hráčů na obrazovce, barva hráčů
je určena registry <strong>COLUP0</strong> a <strong>COLUP1</strong>. A &ndash;
jak jsme si řekli minule &ndash; je možné změnit prioritu zobrazení hráčů (i
střel) vůči hernímu poli (<i>playfield</i>).</p>

<p>Podívejme se však nejdříve na velmi jednoduchý demonstrační příklad,
v&nbsp;němž je použit hráč, který pochází z&nbsp;jedné varianty slavné hry
Space Invaders. Bitmapa definující tvar hráče je zapsána bitovým vzorkem
(výška, tedy počet řádků, je proměnný):</p>

<pre>
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
</pre>

<p>Nastavení pozice hráče na obrazovce se provádí s&nbsp;využitím
pseudoproměnných:</p>

<pre>
  player0x = 80
  player0y = 48
</pre>

<p>Barva hráče i pozadí se potom nastavuje přímo ve vykreslovací smyčce:</p>

<pre>
mainloop
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    drawscreen
    goto mainloop
</pre>

<a href="https://www.root.cz/obrazek/573638/"><img src="https://i.iinfo.cz/images/264/batari-basic-3-1-prev.png" class="image-573638" data-prev-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 3: Scéna vykreslená dnešním prvním demonstračním
příkladem.</i></p>

<p>Podívejme se nyní na <a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_1.bas">úplný
zdrojový kód</a> tohoto demonstračního příkladu, který obsahuje i definici
herního pole (<i>playfield</i>):</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 80
  player0y = 48
&nbsp;
mainloop
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    drawscreen
    goto mainloop
</pre>

<p>Pohyb hráče po herním světě se realizuje snadno změnou obsahu
pseudoproměnných <strong>player0x</strong> a <strong>player0y</strong>, které
lze modifikovat například pohybem joysticku:</p>

<pre>
    if joy0up then player0y = player0y - 1
    if joy0down then player0y = player0y + 1
    if joy0left then player0x = player0x - 1
    if joy0right then player0x = player0x + 1
</pre>

<p>Tento způsob ovládání hráče je ukázán <a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_2.bas">v&nbsp;dnešním
druhém demonstračním příkladu</a>:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 80
  player0y = 48
&nbsp;
mainloop
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    if joy0up then player0y = player0y - 1
    if joy0down then player0y = player0y + 1
    if joy0left then player0x = player0x - 1
    if joy0right then player0x = player0x + 1
&nbsp;
    drawscreen
    goto mainloop
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Šířka vykreslování hráčů</h2>

<p>Minule jsme si řekli, že šířka střel se nastavuje v&nbsp;horních bitech
řídicích registrů nazvaných <strong>NUSIZ0</strong> (pro první střelu) a
<strong>NUSIZ1</strong> (pro střelu druhou). Existují čtyři podporované šířky
střel, jak je to ostatně patrné z&nbsp;následující tabulky:</p>

<table>
<tr><th>NUSIZ0/NUSIZ1</th><th>Stručný popis</th></tr>
<tr><td>$0x</td><td>střela s&nbsp;šířkou jednoho pixelu</td></tr>
<tr><td>$1x</td><td>střela s&nbsp;šířkou dvou pixelů</td></tr>
<tr><td>$2x</td><td>střela s&nbsp;šířkou čtyř pixelů</td></tr>
<tr><td>$3x</td><td>střela s&nbsp;šířkou osmi pixelů</td></tr>
</table>

<p>Spodní čtyři bity slouží k&nbsp;nastavení opakování zobrazení hráčů/střel a
taktéž ke zvětšení hráčů ve směru osy x (což je vlastně stejné, jako zvětšení
střel). Ovšem hráče je možné zvětšit pouze 2&times; a 4&times;, nikoli již
8&times;:</p>

<table>
<tr><th>NUSIZ0/NUSIZ1</th><th>Stručný popis</th></tr>
<tr><td>$x0</td><td>hráč v&nbsp;základním měřítku</td></tr>
<tr><td>$x5</td><td>hráč zvětšený dvojnásobně ve směru osy x</td></tr>
<tr><td>$x7</td><td>hráč zvětšený čtyřnásobně ve směru osy x</td></tr>
</table>

<p><a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_3.bas">V&nbsp;tomto
demonstračním příkladu</a> je hráč zvětšený 2&times;:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 80
  player0y = 48
&nbsp;
mainloop
    <strong>NUSIZ0 = $05</strong>
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    if joy0up then player0y = player0y - 1
    if joy0down then player0y = player0y + 1
    if joy0left then player0x = player0x - 1
    if joy0right then player0x = player0x + 1
&nbsp;
    drawscreen
    goto mainloop
</pre>

<a href="https://www.root.cz/obrazek/573639/"><img src="https://i.iinfo.cz/images/264/batari-basic-3-2-prev.png" class="image-573639" data-prev-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 4: Hráč zvětšený 2&times;.</i></p>

<p>A <a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_4.bas">v&nbsp;tomto
příkladu</a> je zvětšen 4&times; ve směru osy x a 2&times; ve směru osy y
(opakováním vzorku):</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %01000010
   %10000001
   %10000001
   %01011010
   %01011010
   %11111111
   %11111111
   %11011011
   %11011011
   %01111110
   %01111110
   %00111100
   %00111100
   %00011000
   %00011000
end
&nbsp;
  player0x = 80
  player0y = 48
&nbsp;
mainloop
    <strong>NUSIZ0 = $07</strong>
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    if joy0up then player0y = player0y - 1
    if joy0down then player0y = player0y + 1
    if joy0left then player0x = player0x - 1
    if joy0right then player0x = player0x + 1
&nbsp;
    drawscreen
    goto mainloop
</pre>

<a href="https://www.root.cz/obrazek/573640/"><img src="https://i.iinfo.cz/images/264/batari-basic-3-3-prev.png" class="image-573640" data-prev-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 5: Hráč zvětšený 4&times;.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Opakování vykreslení stejného hráče na jednom obrazovém řádku</h2>

<p>Popišme si ještě další možné kombinace hodnot uložených v&nbsp;řídicích
registrech <strong>NUSIZ0</strong> a <strong>NUSIZ1</strong>. Kromě zvětšení
střel a/nebo hráčů lze docílit toho, že se tyto grafické objekty budou na
jednom řádku opakovat, a to buď dvakrát či třikrát. Měnit lze i relativní
vzdálenost těchto kopií od sebe:</p>

<table>
<tr><th>NUSIZ0/NUSIZ1</th><th>Stručný popis</th></tr>
<tr><td>$x0</td><td>hráč v&nbsp;základním měřítku</td></tr>
<tr><td>$x1</td><td>dvojnásobná kopie hráče i střely</td></tr>
<tr><td>$x2</td><td>dvojnásobná kopie hráče i střely ve větší vzdálenosti od sebe</td></tr>
<tr><td>$x3</td><td>trojnásobná kopie hráče i střely</td></tr>
<tr><td>$x4</td><td>dvojnásobná kopie hráče i střely s&nbsp;dvojnásobným zvětšením</td></tr>
<tr><td>$x6</td><td>trojnásobná kopie hráče i střely ve větší vzdálenosti od sebe</td></tr>
</table>

<p>Změnu způsobu zobrazení hráčů a střel lze realizovat například tlačítkem
joysticku, kterým budeme přepínat mezi výše uvedenými stavy, konkrétně mezi
hodnotami $00, $01, $02, $03, $04 a $06 (vynecháme tedy stav $05). Proměnná
<strong>a</strong> slouží pro &bdquo;zpomalení&ldquo; změny zobrazení
grafických objektů:</p>

<pre>
    if joy0fire then a = a + 1
&nbsp;
    rem Zpomaleni zmeny
    if a &gt; 8 then b = b + 1: a = 0
    if b = 5 then b = 6
    if b = 7 then b = 0
    NUSIZ0 = b
</pre>

<p>Některé možnosti zobrazení toho samého hráče ve scéně:</p>

<a href="https://www.root.cz/obrazek/573641/"><img src="https://i.iinfo.cz/images/264/batari-basic-3-4-prev.png" class="image-573641" data-prev-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 6: Zopakování hráče na stejném obrazovém řádku.</i></p>

<a href="https://www.root.cz/obrazek/573642/"><img src="https://i.iinfo.cz/images/264/batari-basic-3-5-prev.png" class="image-573642" data-prev-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 7: Zopakování hráče na stejném obrazovém řádku.</i></p>

<a href="https://www.root.cz/obrazek/573643/"><img src="https://i.iinfo.cz/images/264/batari-basic-3-6-prev.png" class="image-573643" data-prev-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 8: Zopakování hráče na stejném obrazovém řádku.</i></p>

<p><a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_repeat_1.bas">Úplný
zdrojový kód</a> takto upraveného demonstračního příkladu vypadá
následovně:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %01000010
   %10000001
   %10000001
   %01011010
   %01011010
   %11111111
   %11111111
   %11011011
   %11011011
   %01111110
   %01111110
   %00111100
   %00111100
   %00011000
   %00011000
end
&nbsp;
  player0x = 80
  player0y = 48
&nbsp;
mainloop
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    if joy0up then player0y = player0y - 1
    if joy0down then player0y = player0y + 1
    if joy0left then player0x = player0x - 1
    if joy0right then player0x = player0x + 1
    if joy0fire then a = a + 1
&nbsp;
    rem Zpomaleni zmeny
    if a &gt; 8 then b = b + 1: a = 0
    if b = 5 then b = 6
    if b = 7 then b = 0
    NUSIZ0 = b
&nbsp;
    drawscreen
    goto mainloop
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Větší množství objektů ve vykreslované scéně</h2>

<p>Standardní kernel implementovaný v&nbsp;jazyce Batari BASIC dokáže současně
zobrazit všech šest grafických objektů současně, tedy:</p>

<ol>
<li>Herní pole (<i>playfield</i>)</li>
<li>Míč (<i>ball</i>) ve stejné barvě jako herní pole</li>
<li>Dvojici hráčů (<i>players</i>)</li>
<li>Dvojici střel (<i>missiles</i>) ve stejné barvě, jako příslušní hráči</li>
</ol>

<p>Všechny zmíněné objekty s&nbsp;výjimkou herního pole jsou plně
polohovatelné, což je ukázáno i v&nbsp;dalším demonstračním příkladu, kde:</p>

<ol>
<li>Hráči se pohybují v&nbsp;horizontálním směru a odráží se od okrajů obrazovky</li>
<li>Střely se pohybují pod úhlem 45&deg; a taktéž se odráží od okrajů obrazovky</li>
<li>Míč se ovládá prvním joystickem ve všech osmi možných směrech</li>
</ol>

<p>Herní scéna vypadá následovně:</p>

<a href="https://www.root.cz/obrazek/573644/"><img src="https://i.iinfo.cz/images/264/batari-basic-3-7-prev.png" class="image-573644" data-prev-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 9: Větší množství objektů ve vykreslované scéně.</i></p>

<p>Zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_5.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_5.bas</a>
i pod tímto odstavcem:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
   player1:
   %10100101
   %01011010
   %00100100
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 20
  player0y = 20
&nbsp;
  player1x = 140
  player1y = 30
&nbsp;
  missile0x = 80
  missile0y = 40
  missile0height = 4
&nbsp;
  missile1x = 80
  missile1y = 60
  missile1height = 4
&nbsp;
  ballx = 80
  bally = 50
  ballheight = 8
&nbsp;
  rem Posun hrace #1 v horizontalnim smeru
  let a = 1
&nbsp;
  rem Posun hrace #2 v horizontalnim smeru
  let b = 1
&nbsp;
  rem Posun strely 0 v horizontalnim i vertikalnim smeru
  let c = 1
  let d = 1
&nbsp;
  rem Posun strely 1 v horizontalnim i vertikalnim smeru
  let e = 1
  let f = -1
&nbsp;
mainloop
    rem Sirka strel
    NUSIZ0 = $20
    NUSIZ1 = $20
&nbsp;
    rem Sirka mice
    CTRLPF = $31
&nbsp;
    rem Barvy pozadi i hracu
    COLUPF = 14
    COLUP0 = $1E
    COLUP1 = $4E
&nbsp;
    player0x = player0x + a
    if player0x &gt;= 152 then player0x = 152: a =- 1
    if player0x &lt;= 0 then player0x = 0: a = 1
&nbsp;
    player1x = player1x + b
    if player1x &gt;= 152 then player1x = 152: b =- 1
    if player1x &lt;= 1 then player1x = 1: b = 1
&nbsp;
    missile0x = missile0x + c
    if missile0x &gt;= 152 then missile0x = 152: c =- 1
    if missile0x &lt;= 1 then missile0x = 1: c = 1
    missile0y = missile0y + d
    if missile0y &gt;= 80 then missile0y = 80: d =- 1
    if missile0y &lt;= 10 then missile0y = 10: d = 1
&nbsp;
    missile1x = missile1x + e
    if missile1x &gt;= 152 then missile1x = 152: e =- 1
    if missile1x &lt;= 1 then missile1x = 1: e = 1
    missile1y = missile1y + f
    if missile1y &gt;= 80 then missile1y = 80: f =- 1
    if missile1y &lt;= 10 then missile1y = 10: f = 1
&nbsp;
    if joy0up then bally = bally - 1
    if joy0down then bally = bally + 1
    if joy0left then ballx = ballx - 1
    if joy0right then ballx = ballx + 1
&nbsp;
    drawscreen
    goto mainloop
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení skóre</h2>

<p>Standardní kernel Batari BASICu podporuje zobrazení skóre v&nbsp;dolní části
herní scény. Skóre je celočíselná hodnota s&nbsp;maximálním rozsahem šesti
číslic, které lze využít k&nbsp;více účelům. Ve finální hře se pochopitelně
může jednat o skutečné skóre, ovšem při vývoji zde je možné zobrazit různé
ladicí informace (protože jiný výstup textu není praktický).  Podívejme se nyní
na způsob zobrazení skóre v&nbsp;dolní části herní scény. Barva skóre je
odvozena od obsahu pseudoproměnné <strong>scorecolor</strong> (barvy PAL nebo
NTSC), vlastní obsah je pak uložen v&nbsp;další pseudoproměnné nazvané
<strong>score</strong>:</p>

<pre>
  <strong>scorecolor = $98</strong>
&nbsp;
  rem Pocatecni hodnota score
  <strong>score = 0</strong>
&nbsp;
mainloop
    <strong>if joy0fire then score = score + 1</strong>
    &nbsp;
    drawscreen
    goto mainloop
</pre>

<p><div class="rs-tip-major">Poznámka: právě kvůli zobrazení skóre je nutné
neustále obnovovat obsahy registrů čipu TIA, protože tyto jsou přepisovány
mj.&nbsp;při vykreslení skóre,</div></p>

<a href="https://www.root.cz/obrazek/573645/"><img src="https://i.iinfo.cz/images/264/batari-basic-3-8-prev.png" class="image-573645" data-prev-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 10: Postupně se měnící skóre zobrazené v&nbsp;dolní části herní
scény.</i></p>

<a href="https://www.root.cz/obrazek/573646/"><img src="https://i.iinfo.cz/images/264/batari-basic-3-9-prev.png" class="image-573646" data-prev-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/264/batari-basic-3-1-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 11: Postupně se měnící skóre zobrazené v&nbsp;dolní části herní
scény.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Trik použitý při vykreslení skóre</h2>

<p>Zajímavé bude zjistit, jakým trikem je vlastně skóre vykresleno. Jedná se
totiž o relativně složitý grafický vzor (složitý v&nbsp;kontextu čipu TIA),
takže bude vhodné se přiučit, jak kernel dokáže takový vzor vlastně
zobrazit:</p>

<a href="https://www.root.cz/obrazek/573647/"><img src="https://i.iinfo.cz/images/264/batari-basic-3-10-prev.png" class="image-573647" data-prev-filename="https://i.iinfo.cz/images/264/batari-basic-3-10-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/264/batari-basic-3-10-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 12: Trik použitý při vykreslení skóre.</i></p>

<p><div class="rs-tip-major">Poznámka: vidíme, že se používá dvojice hráčů,
přičemž kernel (a ani TIA) nemá dostatek času na změnu tvaru jediného hráče,
takže je nutné hráče postupně střídat. Jedná se o trik používaný v&nbsp;mnoha
hrách.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Detekce kolizí podruhé</h2>

<p>Nyní, když víme, jakým způsobem můžeme zobrazit skóre, se můžeme vrátit
k&nbsp;příkladu se všemi grafickými objekty, z&nbsp;nichž hráči i střely jsou
zobrazeny 3&times; (pouze u míče nelze tohoto triku docílit):</p>

<a href="https://www.root.cz/obrazek/573504/"><img src="https://i.iinfo.cz/images/213/batari-basic-2-b-1-prev.png" class="image-573504" data-prev-filename="https://i.iinfo.cz/images/213/batari-basic-2-b-1-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/213/batari-basic-2-b-1-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 13: Snímek získaný z&nbsp;dema.</i></p>

<p>Všechny objekty se ve scéně pohybují a srážejí (dochází tedy ke kolizím).
V&nbsp;takovém případě je změněna hodnota skóre, které se zde používá pro
ladicí účely:</p>

<pre>
if collision(missile0, player0) then COLUPF = $38:score = score + 1
if collision(missile0, player1) then COLUPF = $48:score = score + 10
if collision(missile1, player0) then COLUPF = $58:score = score + 100
if collision(missile1, player1) then COLUPF = $68:score = score + 1000
if collision(missile0, missile1) then COLUPF = $78:score = score + 10000
if collision(ball, player0) then COLUP0 = $48:score = score + 100000
if collision(ball, player1) then COLUP1 = $48:score = score + 100000
if collision(ball, missile0) then COLUP0 = $48:score = score + 100000
if collision(ball, missile1) then COLUP1 = $48
</pre>

<p>I přes relativně velké množství pohybujících se objektů je kód dema po
překladu menší než 2kB:</p>

<pre>
16:43 $ 2600basic.sh collisions_2.bas 
Found dasm version: DASM 2.20.14.1
Starting build of collisions_2.bas
batari Basic v1.6-SNAPSHOT (c)2021
2600 Basic compilation complete.
      <strong>2368 bytes of ROM space left</strong>
&nbsp;
Complete. (0)
Build complete.
</pre>

<a href="https://www.root.cz/obrazek/573505/"><img src="https://i.iinfo.cz/images/213/batari-basic-2-b-2-prev.png" class="image-573505" data-prev-filename="https://i.iinfo.cz/images/213/batari-basic-2-b-2-prev.png" data-prev-width="358" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/213/batari-basic-2-b-2-large.png" data-large-width="696" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="358" height="270" /></a>
<p><i>Obrázek 14: Další snímek získaný z&nbsp;dema.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Úplný zdrojový kód demonstračního příkladu</h2>

<p>Úplný zdrojový kód demonstračního příkladu popsaného <a
href="#k08">v&nbsp;předchozí kapitole</a> je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/score.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/score.bas</a>:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
   player1:
   %10100101
   %01011010
   %00100100
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 20
  player0y = 20
&nbsp;
  player1x = 140
  player1y = 30
&nbsp;
  missile0x = 80
  missile0y = 40
  missile0height = 4
&nbsp;
  missile1x = 80
  missile1y = 60
  missile1height = 4
&nbsp;
  ballx = 80
  bally = 50
  ballheight = 8
&nbsp;
  rem Posun hrace #1 v horizontalnim smeru
  let a = 1
&nbsp;
  rem Posun hrace #2 v horizontalnim smeru
  let b = 1
&nbsp;
  rem Posun strely 0 v horizontalnim i vertikalnim smeru
  let c = 1
  let d = 1
&nbsp;
  rem Posun strely 1 v horizontalnim i vertikalnim smeru
  let e = 1
  let f = -1
&nbsp;
mainloop
    rem Sirka strel
    NUSIZ0 = $20
    NUSIZ1 = $20
&nbsp;
    rem Sirka mice
    CTRLPF = $31
&nbsp;
    rem Barvy pozadi i hracu
    COLUPF = 14
    COLUP0 = $1E
    COLUP1 = $4E
&nbsp;
    player0x = player0x + a
    if player0x &gt;= 152 then player0x = 152: a =- 1
    if player0x &lt;= 0 then player0x = 0: a = 1
&nbsp;
    player1x = player1x + b
    if player1x &gt;= 152 then player1x = 152: b =- 1
    if player1x &lt;= 1 then player1x = 1: b = 1
 &nbsp;   
    missile0x = missile0x + c
    if missile0x &gt;= 152 then missile0x = 152: c =- 1
    if missile0x &lt;= 1 then missile0x = 1: c = 1
    missile0y = missile0y + d
    if missile0y &gt;= 80 then missile0y = 80: d =- 1
    if missile0y &lt;= 10 then missile0y = 10: d = 1
&nbsp;
    missile1x = missile1x + e
    if missile1x &gt;= 152 then missile1x = 152: e =- 1
    if missile1x &lt;= 1 then missile1x = 1: e = 1
    missile1y = missile1y + f
    if missile1y &gt;= 80 then missile1y = 80: f =- 1
    if missile1y &lt;= 10 then missile1y = 10: f = 1
&nbsp;
    if joy0up then bally = bally - 1
    if joy0down then bally = bally + 1
    if joy0left then ballx = ballx - 1
    if joy0right then ballx = ballx + 1
&nbsp;
    if collision(missile0, player0) then COLUPF = $38:score = score + 1
    if collision(missile0, player1) then COLUPF = $48:score = score + 10
    if collision(missile1, player0) then COLUPF = $58:score = score + 100
    if collision(missile1, player1) then COLUPF = $68:score = score + 1000
    if collision(missile0, missile1) then COLUPF = $78:score = score + 10000
    if collision(ball, player0) then COLUP0 = $48:score = score + 100000
    if collision(ball, player1) then COLUP1 = $48:score = score + 100000
    if collision(ball, missile0) then COLUP0 = $48:score = score + 100000
    if collision(ball, missile1) then COLUP1 = $48
&nbsp;
    drawscreen
    goto mainloop
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Generování zvuků čipem TIA</h2>

<p>Ve druhé části dnešního článku si (i když s&nbsp;několika zjednodušeními)
popíšeme zvukové možnosti čipu <i>TIA</i> neboli plným jménem <i>Television
Interface Adaptor</i>. Připomeňme si (již naposledy), že se jedná o jeden
z&nbsp;pouhých tří integrovaných obvodů tvořících ústřední prvky
v&nbsp;minulosti velmi populární osmibitové herní konzole <i>Atari 2600</i>
neboli též <i>Atari VCS</i> (k&nbsp;přejmenování došlo společně se vznikem
další herní konzole <i>Atari 5200</i>).</p>

<p>Čip TIA se kromě generování grafického obrazu, což bylo téma předchozího
textu, stará i o zvukovou syntézu. Ta je z&nbsp;dnešního pohledu dosti
zvláštní. Na jednu stranu je způsob zvukové syntézy velmi jednoduchý a
v&nbsp;některých ohledech připomíná způsob zvukové syntézy použité o několik
let později v&nbsp;čipu <i>POKEY</i> v&nbsp;osmibitových domácích
mikropočítačích Atari (ale i v&nbsp;relativně velkém množství herních
automatů). Jednoduchost spočívá v&nbsp;možnosti generování pouze obdélníkových
signálů (pravidelných popř.&nbsp;sice nepravidelných, ale periodických),
jejichž amplituda může být nastavena na hodnoty 0-15 (řídí se tedy čtyřmi bity
řídicího registru resp.&nbsp;dvojice řídicích registrů).</p>

<p>Na druhou stranu však způsob interního zapojení posuvných registrů se
zpětnou vazbou nabízí poměrně velké množství kombinací, které vlastně nenajdeme
ani u čipu <i>POKEY</i>, který je jinak možné v&nbsp;oblasti generování zvuků a
hudby považovat za nástupce čipu TIA (totéž platí o GTIA, ovšem v&nbsp;oblasti
grafiky). TIA se tak stále používá v&nbsp;některých aplikacích <i>chiptune</i>,
samozřejmě vedle dalších čipů (POKEY, pochopitelně SID, Texas Instruments
SN76489, Texas Instruments SN76496, SN76477 a Ricoh 2A03/2A07 z&nbsp;NESu).</p>

<p>Vzhledem k&nbsp;tomu, že se čip TIA stará jak o vytváření video signálu, tak
i pro syntézu zvuků a hudby, je v&nbsp;něm několik modulů společných pro oba
jinak rozličné subsystémy. Zejména se to týká způsobu generování základního
hodinového signálu (přesněji řečeno dvojice signálů), které vstupují do
zvukového systému a od jejichž frekvence se odvíjí i frekvence přehrávaných
tónů. Podrobnosti budou uvedeny <a href="#k13">v&nbsp;navazující
kapitole</a>.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zvukový subsystém čipu TIA</h2>

<p>Základem všech signálů řídicích celou herní konzoli Atari 2600 je oscilátor,
který u NTSC varianty této konzole generuje hodinový signál o frekvenci
3,579545 MHz a u PAL varianty poněkud nižší frekvenci 3,546894 MHz (což
mimochodem znamená, že některé hry běží poněkud odlišnou rychlostí
v&nbsp;závislosti na použité televizní normě). Tento základní signál se nazývá
<i>pixel clock</i> (v&nbsp;některých dokumentech též <i>color clock</i>),
protože kromě dalších činností řídí i generování pixelů na obrazových řádcích
(262 řádků a necelých 60 snímků za sekundu u normy NTSC, 312 řádků a necelých
50 snímků za sekundu u normy PAL). Současně se tento signál dělí třemi a
výsledek o frekvencích 1,193182 MHz (NTSC) popř. 1,182298 MHz (PAL) slouží jako
hlavní řídicí hodinový signál mikroprocesoru MOS 6507. Z&nbsp;tohoto důvodu se
tento signál nazývá <i>CPU clock</i> a proto se dočteme, že hodinová frekvence
konzole Atari 2600 je 1,19 MHz, což ovšem platí jen pro NTSC variantu.</p>

<p>Oba dva výše zmíněné signály, tj.&nbsp;jak <i>pixel clock</i>, tak i <i>CPU
clock</i>, jsou dále děleny konstantou 114 použitou mj.&nbsp;video subsystémem
pro vykreslení jednoho obrazového řádku (mimochodem: 114&times;2=228, což je
celkový počet pixelů + overscanu). Současně však takto vydělené signály
vstupují i do audio subsystému, který nás zajímá nyní. Jejich frekvence je
rovna, jak lze snadno vypočítat, 31399 Hz a 10466 Hz pro systém NTSC a 31113 Hz
a 10371 Hz pro systém PAL. V&nbsp;původních originálních materiálech je ovšem
jen lakonicky napsáno &bdquo;na vstupu audio systému je signál o frekvenci
přibližně 30 kHz&ldquo;, což je nepřesné a může se to negativně projevit při
volbě konstant při přehrávání not (&bdquo;rozladění&ldquo;). Proto mějte při
čtení dalšího textu na paměti, že vstupními frekvencemi zvukového subsystému je
dvojice 31399/10466 nebo 31113/10371 Hz.</p>

<img src="https://i.iinfo.cz/images/544/hist6817.png" alt="TIA"/>
<p><i>Obrázek 15: Zvukový subsystém čipu TIA.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Řídicí registry určené pro nastavení zvuků</h2>

<p>V&nbsp;případě integrovaného obvodu TIA jsou programátorům k&nbsp;dispozici
dva na sobě nezávislé programovatelné zvukové kanály. Každý z&nbsp;těchto
kanálů je řízen trojicí řídicích registrů, celkem tedy může programátor
modifikovat (pouze) šest řídicích registrů. Tyto registry mají názvy
<strong>AUDF0</strong>, <strong>AUDF1</strong>, <strong>AUDC0</strong>,
<strong>AUDC1</strong>, <strong>AUDV0</strong> a <strong>AUDV1</strong>.
Vzhledem k&nbsp;tomu, že možnosti obou zvukových kanálů jsou totožné (všechny
obvody zvukového subsystému jsou za děličkou vstupních signálů zdvojeny),
budeme v&nbsp;dalším textu popisovat pouze kanál první, který je řízený trojicí
registrů <strong>AUDF0</strong>, <strong>AUDC0</strong> a
<strong>AUDV0</strong>. Náhradou 0 za 1 pak bude totéž platit i pro druhý
zvukový kanál.</p>

<p>První řídicí registr zvukového kanálu (<strong>AUDF0</strong>), přesněji
řečeno pět bitů tohoto registru, určuje konstantu 1 až 32 použitou při dělení
vstupní frekvence. Buď se použije frekvence <i>pixel_clock/114</i> nebo
<i>CPU_clock/114</i>. Výsledkem tohoto vydělení je obdélníkový signál o
frekvenci přibližně 1 kHz až 30 kHz (popř.&nbsp;300 Hz až 10 kHz, ovšem opět
jen přibližně), který je přiváděn do dvojice konfigurovatelných posuvných
registrů (<i>LFSR</i>) <a
href="https://en.wikipedia.org/wiki/Linear-feedback_shift_register">se zpětnou
vazbou</a>. První registr má délku pěti bitů, druhý délku čtyř bitů, ovšem je
možné je spojit do jediného registru o délce devíti bitů (viz další text).</p>

<p>Tyto dva posuvné registry slouží jak pro generování čistého obdélníkového
signálu, tak i pro vytváření šumu (<i>noise generator</i>) s&nbsp;různou
charakteristikou. Konfigurace (způsob zapojení) obou posuvných registrů je
řízena registrem <strong>AUDC0</strong>, přičemž význam mají pouze čtyři spodní
bity. Jednotlivé kombinace určují jak zdroj signálu (tedy, jak již víme
<i>pixel_clock/114</i> či <i>CPU_clock/114</i>), tak i způsob zapojení zpětných
vazeb v&nbsp;obou posuvných registrech.</p>

<p>Jedna z&nbsp;kombinací umožňuje generovat konstantní signál o hodnotě 1, což
je výhodné, protože je možné zvuk jednoduše samplovat rychlou změnou obsahu
registru <strong>AUDV0</strong> (ovšem většinou je toto řešení poměrně náročné
na CPU cykly). Další dvě kombinace přepínají pětibitový posuvný registr do
režimu, v&nbsp;němž se stále opakuje sekvence 0101010..., tj.&nbsp;posuvný
registr zde slouží jako dělička vstupní frekvence dvěma (popř.&nbsp;šesti,
protože <i>CPU_clock=pixel_clock/3</i>). Právě tento režim se používal při
přehrávání čistých tónů (ovšem rozladěných).</p>

<p>Další dostupný režim taktéž používá posuvný registr, tentokrát ovšem takovým
způsobem, že se vstupní signál dělí hodnotou 31. Opakuje se v&nbsp;něm totiž
sekvence 31 bitů, z&nbsp;nichž 13 sousedních bitů je nulových, zbytek
jedničkových (to, že počet jedniček a nul není zcela totožný, se projeví ve
výsledném zvuku jen nepatrně). Opět platí, že <i>CPU_clock</i> má třetinovou
frekvenci, takže v&nbsp;oficiálních materiálech se hovoří o dělení konstantou
93; ve skutečnosti tato &bdquo;magická&ldquo; konstanta odpovídá výpočtu
3&times;31.</p>

<p>Další režimy již využívají oba posuvné registry pro tvorbu šumu. Pokud je
použit jen čtyřbitový registr, je perioda opakování pouze 15 bitů, což je opět
možné využít pro generování tónů, ovšem zkreslených. Podobně při použití
pětibitového <i>LFSR</i> s&nbsp;periodou opakování 31. Spojením obou dvou
registrů za sebe se generuje šum o periodě 511 bitů (podobného efektu lze
mimochodem docílit i u čipu <i>POKEY</i>).</p>

<p>Nejsložitější je režim, v&nbsp;němž pětibitový LFSR řídil čtyřbitový LFSR:
pokud se na výstupu prvního LFSR objeví jednička, provede se posun i ve
čtyřbitovém LFSR; v&nbsp;opačném případě se druhý LFSR ignoruje. Výsledkem je
pseudonáhodný signál s&nbsp;periodou 15&times;31=465 bitů (další
&bdquo;magická&ldquo; hodnota, která není v&nbsp;původních materiálech nijak
vysvětlena a musela být až mnohem později vydedukována ze schémat čipu
TIA).</p>

<p><div class="rs-tip-major">Poznámka: se čtyřbitovým, pětibitovým i
devítibitovým posuvným registrem se setkáme i v&nbsp;čipu POKEY, což není
náhoda (ostatně i z&nbsp;teorie LFSR vychází, že například osmibitový posuvný
registr vyžaduje mnohem složitější zapojení zpětné vazby, než registr
sedmibitový nebo devítibitový, Výhodné délky jsou 2-7 bitů, 9-11 bitů, 15 bitů
a 17 bitů). LFSR ale nalezneme i v&nbsp;dalších zvukových čipech.</div></p>

<p>Příklad posuvného registru se zpětnou vazbou:</p>

<pre>
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
 +---&gt; | 1| 0| 0| 0| 0| 0| 0| 0| 0| 0| 0| 0| 0| 0| 0| 0| -&gt; Output
 |     +--+--+--+--+--+--+--+--+--+--+--+--+-++--+--+-++
 |                                 ______  0 |        |
 |                             0  /     //---+        |
 +-------------------------------( XOR ((  0          |
                                  \_____\\------------+ 
</pre>

<img src="https://i.iinfo.cz/urs/pc_58_18-124042806062357.gif" alt="TIA">
<p><i>Obrázek 16: Princip práce čtyřbitového poly čítače generujícího binární pseudonáhodný šum.</i></p>

<p>Výsledný signál, nezávisle na tom, zda se jedná o čistý obdélníkový průběh
či o šum, je následně zesílen 1 až šestnáctkrát na základě hodnoty posledního
řídicího registru (<strong>AUDV0</strong>, <strong>AUDV1</strong>). Interně se
nejedná o nic složitého &ndash; čtyři bity, resp.&nbsp;přesněji řečeno čtyři
logické úrovně, jsou přivedeny na jednoduchou odporovou síť se čtyřmi rezistory
o hodnotách 3k7, 7k5, 15k a 30k (takže se vlastně nejedná o zesílení, ale
naopak o konfigurovatelné zeslabení). Výsledné napětí, které na rezistorech
vznikne, je vyvedeno na výstupní pin čipu TIA (ten tedy musí obsahovat dva piny
s&nbsp;analogovým zvukovým výstupem, každý zvukový kanál má vyhrazen jeden
pin).</p>

<p>Zvuk generovaný čipem TIA je možné poměrně jednoduše rozeznat od zvuku
dalších herních konzolí nebo domácích mikropočítačů, už jen z&nbsp;toho důvodu,
že prakticky všechny noty jsou kvůli velmi krátkému čítači, který je použitý
pro dělení vstupní frekvence, rozladěny. Avšak i přesto pro TIA dodnes vznikají
různá více či méně vážně míněná hudební díla, a to včetně poměrně úspěšných
pokusů o čtyřbitový sampling (což ovšem vyžaduje použití
&bdquo;supercartridgí&ldquo; s&nbsp;dostatečně velkou EPROM, protože interní
RAM o kapacitě celých 128 bajtů je samozřejmě pro tyto účely nepoužitelná).</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Tabulka not</h2>

<p>Pro přehrávání &bdquo;čistých&ldquo; tónů, tedy použití obdélníkového
signálu (a nikoli výstupu ze zpětnovazebních posuvných registrů), se používají
režimy 4 a 5 (totožné) a 12 a 13 (taktéž totožné, ovšem s&nbsp;třetinovou
frekvencí; důvody viz výše). Převod mezi hodnotami zapisovanými do registrů
<strong>AUDF0</strong> a <strong>AUDF1</strong> a notami byl získán
z&nbsp;informací dostupných na adrese <a
href="https://www.biglist.com/lists/stella/archives/199704/msg00007.html">https://www.biglist.com/lists/stella/archives/199704/msg00007.html</a>.
U každé noty je navíc uveden rozdíl <a
href="https://cs.wikipedia.org/wiki/Cent_(hudba)">v&nbsp;centech</a> oproti
čisté notě (zhruba platí, že rozdíl o více než deset centů je velmi dobře
rozeznatelný; hudba v&nbsp;podání čipu TIA je tedy prakticky vždy
rozladěna.</p>

<p>Tato tabulka platí pro režimy 4 a 5, tedy pro základní obdélníkový signál
získaný děličkou základní frekvence hodnotami 0 až 31:</p>

<table>
<tr><th>Hodnota</th><th>Nota</th><th>Rozdíl (cent)</th></tr>
<tr><td>00</td><td>&times;</td><td>&times;</td></tr>
<tr><td>01</td><td>B </td><td>?  </td></tr>
<tr><td>02</td><td>E </td><td>?  </td></tr>
<tr><td>03</td><td>B </td><td>?  </td></tr>
<tr><td>04</td><td>G </td><td>?  </td></tr>
<tr><td>05</td><td>E </td><td>?  </td></tr>
<tr><td>06</td><td>C#</td><td>?  </td></tr>
<tr><td>07</td><td>B </td><td>?  </td></tr>
<tr><td>08</td><td>A </td><td>?  </td></tr>
<tr><td>09</td><td>G </td><td>?  </td></tr>
<tr><td>10</td><td>F </td><td>+50</td></tr>
<tr><td>11</td><td>E </td><td>-20</td></tr>
<tr><td>12</td><td>D </td><td>0  </td></tr>
<tr><td>13</td><td>C#</td><td>+20</td></tr>
<tr><td>14</td><td>C </td><td>-5 </td></tr>
<tr><td>15</td><td>B </td><td>-15</td></tr>
<tr><td>16</td><td>A#</td><td>-20</td></tr>
<tr><td>17</td><td>A </td><td>-20</td></tr>
<tr><td>18</td><td>G#</td><td>-15</td></tr>
<tr><td>19</td><td>G </td><td>0  </td></tr>
<tr><td>20</td><td>F#</td><td>+15</td></tr>
<tr><td>21</td><td>F </td><td>+40</td></tr>
<tr><td>22</td><td>F </td><td>-50</td></tr>
<tr><td>23</td><td>E </td><td>-20</td></tr>
<tr><td>24</td><td>D#</td><td>+15</td></tr>
<tr><td>25</td><td>D </td><td>+50</td></tr>
<tr><td>26</td><td>D </td><td>-20</td></tr>
<tr><td>27</td><td>C#</td><td>+20</td></tr>
<tr><td>28</td><td>C#</td><td>-50</td></tr>
<tr><td>29</td><td>C </td><td>0  </td></tr>
<tr><td>30</td><td>B </td><td>+50</td></tr>
<tr><td>31</td><td>B </td><td>-15</td></tr>
</table>

<p>Následující tabulka platí pro režimy 12 a 13, které mají 3&times; nižší
frekvenci (pro stejné hodnoty) v&nbsp;porovnání s&nbsp;režimy 4 a 5:</p>

<table>
<tr><th>Hodnota</th><th>Nota</th><th>Rozdíl (cent)</th></tr>
<tr><td>00</td><td>A </td><td>-20?</td></tr>
<tr><td>01</td><td>E </td><td>-40?</td></tr>
<tr><td>02</td><td>A </td><td>-20 </td></tr>
<tr><td>03</td><td>E </td><td>-10?</td></tr>
<tr><td>04</td><td>C </td><td>0? </td></tr>
<tr><td>05</td><td>A </td><td>-40</td></tr>
<tr><td>06</td><td>F#</td><td>+10</td></tr>
<tr><td>07</td><td>E </td><td>-20</td></tr>
<tr><td>08</td><td>D </td><td>-20</td></tr>
<tr><td>09</td><td>C </td><td>0  </td></tr>
<tr><td>10</td><td>A#</td><td>+30</td></tr>
<tr><td>11</td><td>A </td><td>-20</td></tr>
<tr><td>12</td><td>G </td><td>+50</td></tr>
<tr><td>13</td><td>F#</td><td>+20</td></tr>
<tr><td>14</td><td>F </td><td>0? </td></tr>
<tr><td>15</td><td>E </td><td>-20</td></tr>
<tr><td>16</td><td>D#</td><td>-20</td></tr>
<tr><td>17</td><td>D </td><td>-20</td></tr>
<tr><td>18</td><td>C#</td><td>-15</td></tr>
<tr><td>19</td><td>C </td><td>0  </td></tr>
<tr><td>20</td><td>B </td><td>+15</td></tr>
<tr><td>21</td><td>A#</td><td>+32</td></tr>
<tr><td>22</td><td>A#</td><td>-50</td></tr>
<tr><td>23</td><td>A </td><td>-20</td></tr>
<tr><td>24</td><td>G#</td><td>+10</td></tr>
<tr><td>25</td><td>G </td><td>+50</td></tr>
<tr><td>26</td><td>G </td><td>-25</td></tr>
<tr><td>27</td><td>F#</td><td>+15</td></tr>
<tr><td>28</td><td>F#</td><td>-50</td></tr>
<tr><td>29</td><td>F </td><td>0  </td></tr>
<tr><td>30</td><td>E </td><td>+50</td></tr>
<tr><td>31</td><td>E </td><td>-20</td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Jednoduchý zvuk vytvořený v&nbsp;Batari BASICu</h2>

<p>Vyzkoušejme si nyní vygenerovat si jednoduchý zvuk. K&nbsp;tomuto účelu
postačuje nastavit trojici řídicích registrů, například pro první zvukový
kanál:</p>

<pre>
  rem Hlasitost
  AUDV0 = 15
&nbsp;
  rem Tvar zvukove vlny
  AUDC0 = 4
&nbsp;
  rem Frekvence: A4
  AUDF0 = 11
</pre>

<p>V&nbsp;demonstračním příkladu bude zvuk zapínán stiskem tlačítka joysticku.
Jak to ovšem provést? Po stisku tlačítka se nastaví hlasitost na 15, po puštění
se sníží zpět na nulu. Navíc zapnutí zvuku způsobí změnu barvy hráče (ostatně
proto je hráč vůbec zobrazen):</p>

<pre>
if joy0fire then COLUP0 = $48:AUDV0 = 15
if !joy0fire then AUDV0 = 0
</pre>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
  playfield:
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 ................................
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
end
&nbsp;
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 20
  player0y = 20
&nbsp;
  rem Hlasitost
  AUDV0 = 0
&nbsp;
  rem Tvar zvukove vlny
  AUDC0 = 4
&nbsp;
  rem Frekvence: A4
  AUDF0 = 11
&nbsp;
mainloop
    rem Barvy pozadi i hrace
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    if joy0fire then COLUP0 = $48:AUDV0 = 15
    if !joy0fire then AUDV0 = 0
&nbsp;
    drawscreen
    goto mainloop
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Změna frekvence tónu modifikací dělitele</h2>

<p>V&nbsp;dalším příkladu je možné frekvenci zvuku měnit pohybem joysticku
doleva a doprava. Vzhledem k&nbsp;tomu, že obsah řídicích registrů není možné
číst, použijeme pomocnou proměnnou <strong>f</strong> pro uložení dělitele
v&nbsp;rozsahu 0 až 31, kterou následně přiřadíme do registru
<strong>AUDF0</strong>:</p>

<pre>
if joy0left &amp;&amp; f &gt; 0 then f = f - 1
if joy0right &amp;&amp; f &lt; 31 then f = f + 1
&nbsp;
AUDF0 = f
</pre>

<p>Dělitel je zobrazen jako skóre a navíc je hráč posunut, takže jeho
horizontální pozice odpovídá zvolené frekvenci generovaného tónu:</p>

<pre>
player0x = 20 + f*4
score = f + 0
</pre>

<p><div class="rs-tip-major">Poznámka: trik <strong>f+0</strong> zajistí, že se
skóre zobrazí korektně a nikoli jako ASCII hodnota nuly (což je asi chyba
Batari BASICu).</div></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  player0x = 20 + 11
  player0y = 20
&nbsp;
  scorecolor = $98
&nbsp;
  rem Pocatecni hodnota score
  score = 11
&nbsp;
  rem Hlasitost
  AUDV0 = 15
&nbsp;
  rem Tvar zvukove vlny
  AUDC0 = 4
&nbsp;
  rem Frekvence
  f = 11
  AUDF0 = f
&nbsp;
mainloop
    rem Barvy pozadi i hrace
    COLUPF = 14
    COLUP0 = $1E
&nbsp;
    if joy0left &amp;&amp; f &gt; 0 then f = f - 1
    if joy0right &amp;&amp; f &lt; 31 then f = f + 1
&nbsp;
    AUDF0 = f
    player0x = 20 + f*4
    score = f + 0
&nbsp;   
    drawscreen
    goto mainloop
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Zvuky získané zpětnovazebními posuvnými registry</h2>

<p>V&nbsp;dnešním posledním demonstračním příkladu je možné joystickem měnit
nejenom frekvenci tónu, ale i způsob zapojení zpětnovazebních posuvných
registrů (což jsou hodnoty 0 až 15 zapisované do registru
<strong>AUDC0</strong>, z&nbsp;nichž některé mají totožný význam a další naopak
vedou k&nbsp;tomu, že se neozve žádný tón):</p>

<pre>
if joy0left &amp;&amp; f &gt; 0 then f = f - 1:score = score - 1
if joy0right &amp;&amp; f &lt; 31 then f = f + 1:score = score + 1
&nbsp;
if joy0up &amp;&amp; s &gt; 0 then s = s - 1:score = score - 1000
if joy0down &amp;&amp; s &lt; 15 then s = s + 1:score = score + 1000
&nbsp;
AUDF0 = f
AUDC0 = s
</pre>

<p>Vybrané hodnoty (dělitel i zapojení posuvných registrů) se zobrazí jak
v&nbsp;ukazateli skóre, tak i horizontální pozicí obou hráčů:</p>

<pre>
player0x = 20 + f*4
player1x = 20 + s*4
</pre>

<p><div class="rs-tip-major">Poznámka: využíváme zde tedy omezené možnosti
herní konzole Atari 2600 pro ladění, resp.&nbsp;přesněji řečeno pro zobrazení
stavu konzole/hry.</div></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
   player0:
   %01000010
   %10000001
   %01011010
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
   player1:
   %10100101
   %01011010
   %00100100
   %11111111
   %11011011
   %01111110
   %00111100
   %00011000
end
&nbsp;
  rem Hlasitost
  AUDV0 = 15
&nbsp;
  rem Tvar zvukove vlny
  s = 0
  AUDC0 = s
&nbsp;
  rem Frekvence
  f = 11
  AUDF0 = f
&nbsp;
  player0x = 20 + f * 4
  player0y = 20
&nbsp;
  player1x = 20 + s * 4
  player1y = 40
&nbsp;
  scorecolor = $98
&nbsp;
  rem Pocatecni hodnota score
  score = 0 + f
&nbsp;
mainloop
    rem Barva pozadi i hracu
    COLUPF = 14
    COLUP1 = $4E
&nbsp;
    if joy0left &amp;&amp; f &gt; 0 then f = f - 1:score = score - 1
    if joy0right &amp;&amp; f &lt; 31 then f = f + 1:score = score + 1
&nbsp;
    if joy0up &amp;&amp; s &gt; 0 then s = s - 1:score = score - 1000
    if joy0down &amp;&amp; s &lt; 15 then s = s + 1:score = score + 1000
&nbsp;
    AUDF0 = f
    AUDC0 = s
&nbsp;
    player0x = 20 + f*4
    player1x = 20 + s*4
&nbsp;
    drawscreen
    goto mainloop
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny <a
href="https://www.root.cz/clanky/tvorba-her-pro-atari-2600-v-batari-basicu-ukol-pro-hardcode-programatory/">předminule</a>,
<a
href="https://www.root.cz/clanky/tvorba-her-pro-atari-2600-v-batari-basicu-ovladani-cipu-tia/">minule</a>
i dnes popisované demonstrační příklady určené pro překlad Batari-BASICem byly
uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>playfield_1.bas</td><td>zobrazení herního pole, bez smyčky kernelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_1.bas</a></td></tr>
<tr><td> 2</td><td>playfield_2.bas</td><td>ukázka smyčky kernelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_2.bas</a></td></tr>
<tr><td> 3</td><td>playfield_3.bas</td><td>změna barvy herního pole mimo smyčku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_3.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_3.bas</a></td></tr>
<tr><td> 4</td><td>playfield_4.bas</td><td>změna barvy herního pole uvnitř smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_4.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_4.bas</a></td></tr>
<tr><td> 5</td><td>playfield_5.bas</td><td>postupná změna barvy herního pole</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_5.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/playfield_5.bas</a></td></tr>
<tr><td> 6</td><td>missile_1.bas</td><td>zobrazení střely nad herním polem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_1.bas</a></td></tr>
<tr><td> 7</td><td>missile_2.bas</td><td>pohyb střelou pomocí joysticku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_2.bas</a></td></tr>
<tr><td> 8</td><td>missile_3.bas</td><td>změna barvy střely tlačítkem joysticku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_3.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_3.bas</a></td></tr>
<tr><td> 9</td><td>missile_4.bas</td><td>předchozí demonstrační příklad, ale s&nbsp;čísly řádků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_4.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_4.bas</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>missile_5.bas</td><td>zobrazení dvojice střel</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_5.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_5.bas</a></td></tr>
<tr><td>11</td><td>missile_6.bas</td><td>střely s&nbsp;dvojnásobnou šířkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_6.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_6.bas</a></td></tr>
<tr><td>12</td><td>missile_7.bas</td><td>střely se čtyřnásobnou šířkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_7.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_7.bas</a></td></tr>
<tr><td>13</td><td>missile_8.bas</td><td>střely s&nbsp;osminásobnou šířkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_8.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_8.bas</a></td></tr>
<tr><td>14</td><td>missile_9.bas</td><td>střely překrývající herní pole</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_9.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_9.bas</a></td></tr>
<tr><td>15</td><td>missile_A.bas</td><td>herní pole překrývající střely</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_A.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_A.bas</a></td></tr>
<tr><td>16</td><td>missile_B.bas</td><td>vzájemný překryv střel</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_B.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/missile_B.bas</a></td></tr>
<tr><td>17</td><td>players_1.bas</td><td>zobrazení hráče</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_1.bas</a></td></tr>
<tr><td>18</td><td>players_2.bas</td><td>posun hráče joystickem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_2.bas</a></td></tr>
<tr><td>19</td><td>players_3.bas</td><td>hráč s&nbsp;dvojnásobnou šířkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_3.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_3.bas</a></td></tr>
<tr><td>20</td><td>players_4.bas</td><td>hráč se čtyřnásobnou šířkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_4.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_4.bas</a></td></tr>
<tr><td>21</td><td>players_5.bas</td><td>oba hráči, obě střely i míč v&nbsp;jediné scéně</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_5.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_5.bas</a></td></tr>
<tr><td>22</td><td>collisions_1.bas</td><td>kolize mezi různými typy grafických objektů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/collisions_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/collisions_1.bas</a></td></tr>
<tr><td>23</td><td>collisions_2.bas</td><td>kolize mezi různými typy grafických objektů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/collisions_2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/collisions_2.bas</a></td></tr>
<tr><td>24</td><td>score.bas</td><td>zobrazení skóre s&nbsp;ladicími informacemi</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/score.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/score.bas</a></td></tr>
<tr><td>25</td><td>players_repeat_1.bas</td><td>zobrazení hráče v&nbsp;několika kopiích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_repeat_1.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/players_repeat_1.bas</a></td></tr>
<tr><td>26</td><td>ball.bas</td><td>míč pohybující se ve scéně</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/ball.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/ball.bas</a></td></tr>
<tr><td>27</td><td>summary2.bas</td><td>shrnutí &ndash; relativně složité demo využívajících necelé 2kB ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/summary2.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/summary2.bas</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>score1.bas</td><td>zobrazení postupně se měnícího skóre</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/score.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/score.bas</a></td></tr>
<tr><td>29</td><td>sound_note.bas</td><td>přehrání čistého tónu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/sound_note.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/sound_note.bas</a></td></tr>
<tr><td>30</td><td>sound_frequency.bas</td><td>změna frekvence tónu pohybem joysticku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/sound_frequency.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/sound_frequency.bas</a></td></tr>
<tr><td>31</td><td>sound_noise.bas</td><td>změna frekvence tónu i tvaru vlny pohybem joysticku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/sound_noise.bas">https://github.com/tisnik/8bit-fame/blob/master/batari-Basic/sound_noise.bas</a></td></tr>
<table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>STELLA PROGRAMMER'S GUIDE<br />
<a href="https://alienbill.com/2600/101/docs/stella.html">https://alienbill.com/2600/101/docs/stella.html</a>
</li>

<li>Batari BASIC GitHub repositář<br />
<a href="https://github.com/batari-Basic/batari-Basic">https://github.com/batari-Basic/batari-Basic</a>
</li>

<li>Programming Tutorial<br />
<a href="https://atariage.com/forums/topic/111938-programming-tutorial/">https://atariage.com/forums/topic/111938-programming-tutorial/</a>
</li>

<li>batari Basic Commands<br />
<a href="https://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html">https://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html</a>
</li>

<li>About batari Basic<br />
<a href="https://bataribasic.com/">https://bataribasic.com/</a>
</li>

<li>Rationale<br />
<a href="https://bataribasic.com/rationale.html">https://bataribasic.com/rationale.html</a>
</li>

<li>Games That Push The Limits of the Atari 2600<br />
<a href="https://www.youtube.com/watch?v=zM0IsWdIc_g">https://www.youtube.com/watch?v=zM0IsWdIc_g</a>
</li>

<li>Vývojové nástroje používané v&nbsp;dobách osmibitových mikropočítačů<br />
<a href="https://www.root.cz/clanky/vyvojove-nastroje-pouzivane-v-dobach-osmibitovych-mikropocitacu/">https://www.root.cz/clanky/vyvojove-nastroje-pouzivane-v-dobach-osmibitovych-mikropocitacu/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari/</a>
</li>

<li>Programovací jazyky používané na platformě osmibitových domácích mikropočítačů Atari (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/">https://www.root.cz/clanky/programovaci-jazyky-pouzivane-na-platforme-osmibitovych-domacich-mikropocitacu-atari-2/</a>
</li>

<li>Barvové palety čipu TIA<br />
<a href="http://www.qotile.net/minidig/docs/tia_color.html">http://www.qotile.net/minidig/docs/tia_color.html</a>
</li>

<li>Crazy Limit Pushing Games From the Last Years of the Atari 2600!<br />
<a href="https://www.youtube.com/watch?v=ADy1F8v59YU">https://www.youtube.com/watch?v=ADy1F8v59YU</a>
</li>

<li>Atari 2600 VCS Top 100 Games Hits (past week)<br />
<a href="http://www.atarimania.com/top-atari-atari-2600-vcs-_G_2_7.html">http://www.atarimania.com/top-atari-atari-2600-vcs-_G_2_7.html</a>
</li>

<li>Tobikomi - The Sound Of Thunder [Atari TIA Chip]<br />
<a href="https://www.youtube.com/watch?v=j0w-IZ6nAMQ">https://www.youtube.com/watch?v=j0w-IZ6nAMQ</a>
</li>

<li>TIA Visual Objects<br />
<a href="https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Visual_Objects.md">https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Visual_Objects.md</a>
</li>

<li>TIA Sound<br />
<a href="https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Sound.md">https://github.com/jigo2600/jigo2600/blob/master/doc/TIA_Sound.md</a>
</li>

<li>How To Make An Atari Game<br />
<a href="https://www.youtube.com/watch?v=Ww3her2zk_I">https://www.youtube.com/watch?v=Ww3her2zk_I</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 1<br />
<a href="https://www.youtube.com/watch?v=Iqo_oARxjEg">https://www.youtube.com/watch?v=Iqo_oARxjEg</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 2<br />
<a href="https://www.youtube.com/watch?v=hFFQjwFbzV8">https://www.youtube.com/watch?v=hFFQjwFbzV8</a>
</li>

<li>Let's Make an Atari 2600 Game! - Part 3<br />
<a href="https://www.youtube.com/watch?v=lZ0AL6jCBXY">https://www.youtube.com/watch?v=lZ0AL6jCBXY</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 4 - Title screens and challenges<br />
<a href="https://www.youtube.com/watch?v=-G2kmsmqk-E">https://www.youtube.com/watch?v=-G2kmsmqk-E</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 5 - Sound<br />
<a href="https://www.youtube.com/watch?v=9rX2eo20xq8">https://www.youtube.com/watch?v=9rX2eo20xq8</a>
</li>

<li>Let's Make an Atari 2600 game! 6 - Realtime RPG combat<br />
<a href="https://www.youtube.com/watch?v=alRGuQ9gjRA">https://www.youtube.com/watch?v=alRGuQ9gjRA</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 7 - Monsters<br />
<a href="https://www.youtube.com/watch?v=vaAlYC_8YSA">https://www.youtube.com/watch?v=vaAlYC_8YSA</a>
</li>

<li>Let's Make an Atari 2600 Game! Part 8 - 3D Engine<br />
<a href="https://www.youtube.com/watch?v=c1dPY1ROZe4">https://www.youtube.com/watch?v=c1dPY1ROZe4</a>
</li>

<li>Let's Make an Atari 2600 Game - Part 9 - Homemade cartridge<br />
<a href="https://www.youtube.com/watch?v=xKlMohF_9Cc">https://www.youtube.com/watch?v=xKlMohF_9Cc</a>
</li>

<li>Bird Poop! - Atari 2600 Homebrew - batari Basic<br />
<a href="https://www.youtube.com/watch?v=-m4gKis0vBg">https://www.youtube.com/watch?v=-m4gKis0vBg</a>
</li>

<li>DP Interviews: Bob Whitehead (By Scott Stilphen)<br />
<a href="http://www.digitpress.com/library/interviews/interview_bob_whitehead.html">http://www.digitpress.com/library/interviews/interview_bob_whitehead.html</a>
</li>

<li>The dasm macro assembler<br />
<a href="http://dasm-dillon.sourceforge.net/">http://dasm-dillon.sourceforge.net/</a>
</li>

<li>Official home of dasm, a versatile macro assembler<br />
<a href="https://dasm-assembler.github.io/">https://dasm-assembler.github.io/</a>
</li>

<li>Dokumentace k&nbsp;DASMu<br />
<a href="https://raw.githubusercontent.com/dasm-assembler/dasm/master/docs/dasm.pdf">https://raw.githubusercontent.com/dasm-assembler/dasm/master/docs/dasm.pdf</a>
</li>

<li>Atari Programming Workshop Chapter links<br />
<a href="http://atariage.com/forums/viewtopic.php?t=47479">http://atariage.com/forums/viewtopic.php?t=47479</a>
</li>

<li>Various Development Kits<br />
<a href="http://devkits.handheldmuseum.com/">http://devkits.handheldmuseum.com/</a>
</li>

<li>Classic Console Development<br />
<a href="http://sebastianmihai.com/ccd/">http://sebastianmihai.com/ccd/</a>
</li>

<li>Atari 2600 development - Snappy (batari basic)<br />
<a href="http://sebastianmihai.com/main.php?t=47">http://sebastianmihai.com/main.php?t=47</a>
</li>

<li>Atari VCS (Atari 2600) - fotografie<br />
<a href="http://oldcomputers.net/atari-vcs.html">http://oldcomputers.net/atari-vcs.html</a>
</li>

<li>History of Consoles: Atari VCS/2600 (1977)<br />
<a href="http://gamester81.com/history-of-consoles-atari-vcs2600-1977/">http://gamester81.com/history-of-consoles-atari-vcs2600-1977/</a>
</li>

<li>Iag Bogost: Racing the Beam<br />
<a href="http://www.bogost.com/books/video_computer_system.shtml">http://www.bogost.com/books/video_computer_system.shtml</a>
</li>

<li>Atari 2600 Programming Tutorial<br />
<a href="http://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-01.html">http://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-01.html</a>
</li>

<li>Atari 2600 Development Cartridge *Super Deluxe*~!<br />
<a href="http://jazz-disassemblies.blogspot.cz/2013/09/atari-2600-development-cartridge-super.html">http://jazz-disassemblies.blogspot.cz/2013/09/atari-2600-development-cartridge-super.html</a>
</li>

<li>Atari "Alpine" Devkit (pro Atari Jaguar)<br />
<a href="http://justclaws.atari.org/devcats/hardware/ataridev.htm">http://justclaws.atari.org/devcats/hardware/ataridev.htm</a>
</li>

<li>6502 compatible assembler and emulator in javascript<br />
<a href="http://www.6502asm.com/">http://www.6502asm.com/</a>
</li>

<li>Atari 2600 Programming<br />
<a href="http://atariage.com/2600/programming/">http://atariage.com/2600/programming/</a>
</li>

<li>Retrozone - Brand new original homebrew games by current programmers<br />
<a href="http://www.retrousb.com/index.php?cPath=30">http://www.retrousb.com/index.php?cPath=30</a>
</li>

<li>ATARI VCS/2600 TIA CHIPS<br />
<a href="http://www.ataricompendium.com/faq/vcs_tia/vcs_tia.html">http://www.ataricompendium.com/faq/vcs_tia/vcs_tia.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://www.vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next">https://www.vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next</a>
</li>

<li>ZX Spectrum development with modern tools<br />
<a href="http://www.breakintoprogram.co.uk/software_development/zx-spectrum-development-with-modern-tools">http://www.breakintoprogram.co.uk/software_development/zx-spectrum-development-with-modern-tools</a>
</li>

<li>Z80 Development Toolchain<br />
<a href="http://www.breakintoprogram.co.uk/computers/zx-spectrum/assembly-language/z80-development-toolchain">http://www.breakintoprogram.co.uk/computers/zx-spectrum/assembly-language/z80-development-toolchain</a>
</li>

<li>Space Invaders Sprite Sheet<br />
<a href="https://www.deviantart.com/gooperblooper22/art/Space-Invaders-Sprite-Sheet-135338373">https://www.deviantart.com/gooperblooper22/art/Space-Invaders-Sprite-Sheet-135338373</a>
</li>

<li>[stella] PRECISE 2600 sound chart<br />
<a href="https://www.biglist.com/lists/stella/archives/199704/msg00007.html">https://www.biglist.com/lists/stella/archives/199704/msg00007.html</a>
</li>

<li>[stella] Frequency and Waveform Guide<br />
<a href="https://www.biglist.com/lists/stella/archives/199706/msg00048.html">https://www.biglist.com/lists/stella/archives/199706/msg00048.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
