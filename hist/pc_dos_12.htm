<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické operace přímo podporované čipy karty VGA</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické operace přímo podporované čipy karty VGA</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes si popíšeme pokročilejší grafické operace podporované grafickou kartou VGA, které dokáží ušetřit práci CPU. Jedná se o horizontální i vertikální scrolling, podporu pro double i tripple buffering a taktéž o podporu režimu rozdělené obrazovky (split screen).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Grafické operace přímo podporované čipy karty VGA</a></p>
<p><a href="#k02">2. Vertikální scrolling</a></p>
<p><a href="#k03">3. Čekání na dokončení vykreslení snímku</a></p>
<p><a href="#k04">4. První demonstrační příklad: vertikální scrolling v&nbsp;režimu s&nbsp;rozlišením 320&times;200 pixelů</a></p>
<p><a href="#k05">5. Scrolling v&nbsp;režimech s&nbsp;jiným rozlišením</a></p>
<p><a href="#k06">6. Druhý demonstrační příklad: scrolling v&nbsp;režimu s&nbsp;rozlišením 320&times;400 pixelů</a></p>
<p><a href="#k07">7. Double a tripple buffering</a></p>
<p><a href="#k08">8. Režim split-screen</a></p>
<p><a href="#k09">9. Konfigurace karty VGA pro použití split-screen</a></p>
<p><a href="#k10">10. Třetí demonstrační příklad: (neúspěšný) pokus o nastavení split-screen</a></p>
<p><a href="#k11">11. Korektní nastavení všech bitů hodnoty <strong>scan line compare</strong></a></p>
<p><a href="#k12">12. Čtvrtý demonstrační příklad: úspěšný pokus o nastavení split-screen</a></p>
<p><a href="#k13">13. Horizontální scrolling</a></p>
<p><a href="#k14">14. Pátý demonstrační příklad: horizontální scrolling o čtyři pixely beze změny délky řádků</a></p>
<p><a href="#k15">15. Změna počtu pixelů na obrazových řádcích bez změny rozlišení</a></p>
<p><a href="#k16">16. Šestý demonstrační příklad: horizontální scrolling při šířce řádků nastavených na 640 pixelů</a></p>
<p><a href="#k17">17. Jemný horizontální scrolling</a></p>
<p><a href="#k18">18. Sedmý demonstrační příklad: jemný horizontální scrolling</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Grafické operace přímo podporované čipy karty VGA</h2>

<p>Grafická karta VGA byla používána společně s&nbsp;mikroprocesory Intel 80286
a Intel 80386, což jsou z&nbsp;dnešního pohledu dosti pomalé čipy. Navíc byla
VGA v&nbsp;naprosté většině případů propojena přes (opět relativně pomalou)
sběrnici ISA. Bylo tedy velmi žádoucí, aby co největší množství grafických
operací bylo podporováno přímo kartou VGA, což umožnilo do značné míry omezit
datový tok mezi mikroprocesorem a grafickou kartou. Karta VGA skutečně byla
připravena pro provádění některých z&nbsp;těchto operací, zejména pak:</p>

<ol>
<li>Zápis většího množství pixelů se stejnou barvou (díky bitovým rovinám)</li>
<li>Blokové přenosy dat mezi částmi grafické paměti bez nutnosti jejich čtení/zápisu do CPU</li>
<li>Jemný vertikální scrolling obrazovky po jednotlivých obrazových řádcích</li>
<li>Hrubý i jemný horizontální scrolling obrazovky po bajtech nebo po pixelech</li>
<li>Takzvaný režim <i>split screen</i>, kdy jsou dvě části obrazovky uloženy na odlišných adresách a jedna část podporuje scrolling</li>
<li>Podpora pro double i tripple buffering umožňující vykreslování grafické scény na pozadí</li>
<li>Takzvaný <i>windowing</i>, v&nbsp;němž je obrazovka součástí větší plochy (souvisí se scrollingem)</li>
</ol>

<p>Některé z&nbsp;těchto operací již známe (zápis většího množství pixelů),
další si popíšeme v&nbsp;dnešním článku.</p>

<img src="https://i.iinfo.cz/images/683/pc-12-1.webp" class="image-1131076" width="700" height="437" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Některé dále popsané možnosti karty VGA jsou použity ve hře Pinball Dreams.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vertikální scrolling</h2>

<p>Začneme implementačně velmi jednoduchou grafickou operací &ndash;
vertikálním scrollingem. Ten umožňuje plynulý posun obrazu nahoru a dolů,
přičemž se na uvolněném místě zobrazí obsah dalších obrazových řádků.
V&nbsp;<i>nezřetězených</i> grafických režimech s&nbsp;horizontálním rozlišením
320 pixelů je k&nbsp;dispozici celkem:</p>

<pre>
256 &times; 1024 / 320 = 819
</pre>

<p>obrazových řádků, ovšem zobrazeno jich je většinou jen 200, 240, 400 nebo
480 (podle zvoleného režimu). Úpravou registrů CRTC můžeme docílit toho, že se
na prvním řádku monitoru zobrazí řádek od určené adresy (v&nbsp;segmentu
0xa000). Pokud budeme tuto adresu zvyšovat nebo snižovat o hodnotu 80 (počet
pixelů na řádku v&nbsp;nezřetězeném grafickém režimu), dosáhneme plynulého
vertikálního scrollingu.</p>

<p>Nejprve si připravíme potřebné konstanty a makra. Adresy I/O portů pro
registry CRTC již známe:</p>

<pre>
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
</pre>

<p>Pracovat budeme s&nbsp;registry s&nbsp;poměrně přesným názvem
<strong>START_ADDRESS_HIGH</strong> a <strong>START_ADDRESS_LOW</strong>, které
mají tyto indexy:</p>

<pre>
START_ADDRESS_HIGH   equ 0x0c   <i>; CRTC</i>
START_ADDRESS_LOW    equ 0x0d   <i>; CRTC</i>
</pre>

<p>Makro pro nastavení libovolného registru CRTC již taktéž známe, takže jen
pro úplnost:</p>

<pre>
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
</pre>

<p>Samotný vertikální posun je snadný. V&nbsp;případě, že bude adresa ve video
paměti, od níž se má provádět vykreslování, uložena v&nbsp;registru
<strong>BX</strong>, můžeme VGA nastavit tímto způsobem:</p>

<pre>
set_crtc_register START_ADDRESS_HIGH, bh
set_crtc_register START_ADDRESS_LOW, bl
</pre>

<p>Samotný postupný vertikální scrolling o 200 obrazových řádků lze realizovat
touto sekvencí instrukcí (které nepřenesou do video paměti ani jediný
bajt):</p>

<pre>
        mov cx, 200         <i>; pocet radku, o ktere budeme scrollovat</i>
        xor bx, bx          <i>; adresa zacatku vykreslovani</i>
&nbsp;
<strong>opak</strong>:
        add bx, 80          <i>; prechod na dalsi adresu, od ktere se bude vykreslovat</i>
        call wait_sync      <i>; cekani na sync.</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
</pre>

<img src="https://i.iinfo.cz/images/683/pc-12-2.webp" class="image-1131077" width="640" height="400" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 2: Další snímek ze hry Pinball Dreams.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Čekání na dokončení vykreslení snímku</h2>

<p>Výše uvedený příklad má dva problémy: může dojít
k&nbsp;&bdquo;roztržení&ldquo; obrazu, pokud se mezi změnou horní a dolní
poloviny adresy začne vykreslovat nový snímek. A problémy může způsobit taktéž
jiné přerušení (třeba po stisku klávesy). Musíme tedy zajistit, aby se změna
adresy provedla ve vhodný okamžik &ndash; a to konkrétně v&nbsp;čase mezi
vykreslením snímků (a ideálně i zakázat přerušení, což je však koncept, který
prozatím neznáme).</p>

<p>Realizace čekání na vertikální přerušení je sice &ndash; samozřejmě pokud
nám nevadí &bdquo;pálení strojového času&ldquo; &ndash; vlastně až primitivně
jednoduché. Postačuje nám totiž kontinuálně sledovat čtvrtý bit portu 0x3da.
Pokud je tento bit nastaven, probíhá vertikální přerušení (a změnu je tedy
možné provést); jinak neprobíhá. Jenže ono to v&nbsp;praxi není až tak
jednoduché, protože i když je tento bit nastaven, tak vlastně nevíme, zda
přerušení v&nbsp;dalším cyklu neskončí (nevíme, ve kterém okamžiku přerušení se
nacházíme). Musíme tedy provádět dvě operace: čekání na dokončení aktuálního
přerušení (pokud probíhá) a čekání na nové přerušení, tedy na jeho začátek.
Celá realizace čekání na <i>začátek</i> vertikálního přerušení vypadá
takto:</p>

<pre>
<strong>wait_sync</strong>:
        mov dx, INPUT_STATUS <i>; adresa stavoveho registru graficke karty CGA</i>
<strong>wait_sync_end</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jnz wait_sync_end   <i>; probiha - cekat na konec</i>
<strong>wait_sync_start</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jz wait_sync_start  <i>; neprobiha - cekat na zacatek</i>
        ret                 <i>; ok - synchronizacni kurz probiha, lze zapisovat do pameti</i>
</pre>

<p><div class="rs-tip-major">Poznámka: to má další důsledek &ndash; vertikální
scrolling bude stejně rychlý nezávisle na rychlosti počítače &ndash; dosáhne 70
řádků za sekundu.</div></p>

<p>Výsledkem bude plynulý vertikální scrolling:</p>

<a href="https://www.root.cz/obrazek/1131078/"><img src="https://i.iinfo.cz/images/683/pc-12-3-prev.webp"  class="image-1131078" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-3-prev.webp"  data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-3-large.webp"  data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 3: Obsah obrazovky přes začátkem scrollingu.</i></p>

<a href="https://www.root.cz/obrazek/1131079/"><img src="https://i.iinfo.cz/images/683/pc-12-4-prev.webp"  class="image-1131079" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-4-prev.webp"  data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-4-large.webp"  data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 4: Průběh vertikálního scrollingu.</i></p>

<a href="https://www.root.cz/obrazek/1131080/"><img src="https://i.iinfo.cz/images/683/pc-12-5-prev.webp"  class="image-1131080" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-5-prev.webp"  data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-5-large.webp"  data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 5: Průběh vertikálního scrollingu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad: vertikální scrolling v&nbsp;režimu s&nbsp;rozlišením 320&times;200 pixelů</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázána realizace
vertikálního scrollingu v&nbsp;grafickém režimu s&nbsp;rozlišením 320&times;200
pixelů. Musí se pochopitelně jednat o režim s&nbsp;nesřetězenými bitovými
rovinami, protože ve standardním režimu 13h není &bdquo;kam scrollovat&ldquo;
(maximálně o několik obrazových řádků na adresách 64000..65535, což není mnoho,
konkrétně jen čtyři obrazové řádky). Aby nebyl scrolling příliš rychlý a aby se
obraz netrhal, čeká se vždy na vykreslení celého snímku, což zajišťuje
frekvenci 70 snímků (posunů) za sekundu:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>; Vykresleni rastroveho obrazku postupne do vsech bitovych rovin.</i>
<i>; Vertikalni scrolling po stisku klavesy.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_vertical_scroll_1.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_vertical_scroll_1.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
INPUT_STATUS         equ 0x3da
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
START_ADDRESS_HIGH   equ 0x0c   <i>; CRTC</i>
START_ADDRESS_LOW    equ 0x0d   <i>; CRTC</i>
&nbsp;
<i>; bitove masky</i>
V_RETRACE            equ 0x08
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>; paleta ve stupnich sedi</i>
%macro <strong>grayscale_palette</strong> 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
<strong>next_dac</strong>:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>
&nbsp;
                            <i>; mod 320x200 bez zretezeni rovin</i>
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
&nbsp;
        mov ax, cs
        mov ds, ax          <i>; zajistit, ze bude mozne adresovat cely obrazek</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
&nbsp;
        select_bitplane 1   <i>; prvni bitplane</i>
        xor ax, ax          <i>; offset pixelu</i>
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 2   <i>; druha bitplane</i>
        mov ax, 1
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 4   <i>; treti bitplane</i>
        mov ax, 2
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 8   <i>; ctvrta bitplane</i>
        mov ax, 3
        call move_image_part; prenest obrazek
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        mov cx, 200         <i>; pocet radku, o ktere budeme scrollovat</i>
        xor bx, bx          <i>; adresa zacatku vykreslovani</i>
&nbsp;
<strong>opak</strong>:
        add bx, 80          <i>; prechod na dalsi adresu, od ktere se bude vykreslovat</i>
        call wait_sync      <i>; cekani na sync.</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>move_image_part</strong>:
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
        add si, ax          <i>; offset pixelu</i>
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov cx, 320*200/4   <i>; pocet zapisovanych bajtu (=pixelu)</i>
<strong>bitblt</strong>:
        lodsb               <i>; nacist bajt z obrazku</i>
        add si, 3           <i>; celkove posun o 4 pixely v obrazku </i>
        stosb               <i>; ulozit do obrazove pameti</i>
        loop bitblt         <i>; presunout CX pixelu</i>
        ret
&nbsp;
<strong>wait_sync</strong>:
        mov dx, INPUT_STATUS <i>; adresa stavoveho registru graficke karty CGA</i>
<strong>wait_sync_end</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jnz wait_sync_end   <i>; probiha - cekat na konec</i>
<strong>wait_sync_start</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jz wait_sync_start  <i>; neprobiha - cekat na zacatek</i>
        ret                 <i>; ok - synchronizacni kurz probiha, lze zapisovat do pameti</i>
&nbsp;
<i>; pridani binarnich dat s rastrovym obrazkem</i>
<strong>image</strong>:
    incbin "image_320x200.bin"
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Scrolling v&nbsp;režimech s&nbsp;jiným rozlišením</h2>

<p>Scrolling lze pochopitelně realizovat v&nbsp;prakticky jakémkoli grafickém
režimu, jak šestnáctibarevném, tak i 256barevném. Určitou výjimkou je
standardní režim 13h, kde již kvůli zřetězení bitových rovin nezbývá kapacita
video paměti. Velmi často se ovšem se scrollingem setkáme u nestandardních
grafických režimů s&nbsp;256 barvami, které z&nbsp;režimu 13h vychází. Zajímavé
bude zjistit, kolik plochy (měřené v&nbsp;obrazových řádcíc) nebo celých
obrazovkách) vlastně máme v&nbsp;různých režimech k&nbsp;dispozici.
V&nbsp;další tabulce jsou vypsány ty nejpoužívanější nestandardní grafické
režimy:</p>

<table>
<tr><th>Rozlišení</th><th>Obrazovka</th><th>Počet řádků celkem</th><th>Výška (obrazovek)</th><th>Poznámka</th></tr>
<tr><td>256&times;256</td><td> 65536</td><td>1024</td><td>4</td><td>známé jako Mode-Q: 256&times;256&times;256 neboli q(c)ube</td></tr>
<tr><td>320&times;200</td><td> 64000</td><td> 819</td><td>4</td><td>známé jako Mode-Y, vychází ze standardního grafického režimu 13h</td></tr>
<tr><td>320&times;240</td><td> 76800</td><td> 819</td><td>3</td><td>známé jako Mode-X</td></tr>
<tr><td>320&times;400</td><td>128000</td><td> 819</td><td>2</td><td>dvojnásobný počet řádků oproti Mode-Y</td></tr>
<tr><td>320&times;480</td><td>153600</td><td> 819</td><td>1</td><td>dvojnásobný počet řádků oproti Mode-X</td></tr>
<tr><td>360&times;240</td><td> 86400</td><td> 728</td><td>3</td><td>využití možnosti VGA zobrazit 720 (360) pixelů na řádku (vychází z textového režimu)</td></tr>
<tr><td>360&times;480</td><td>172800</td><td> 728</td><td>1</td><td>nejlepší rozlišení, které je kompatibilní se všemi monitory</td></tr>
<tr><td>400&times;300</td><td>120000</td><td> 655</td><td>2</td><td>nejlepší rozlišení 4:3, které je většinou kompatibilní s&nbsp;multisync monitory</td></tr>
</table>

<p>Můžeme si například vykoušet scrolling v&nbsp;režimu 320&times;400
s&nbsp;256 barvami. Nejdříve režim nastavíme, což je snadné:</p>

<pre>
gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
&nbsp;
<i>; mod 320x200 bez zretezeni rovin</i>
set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
set_crtc_register MAXIMUM_SCAN_LINE, 0x40         <i>; 400 grafickych radku</i>
</pre>

<p>Následně je již možné realizovat &bdquo;nasunutí&ldquo; obrázku na plochu
obrazovky:</p>

<pre>
        mov cx, 400         <i>; pocet radku, o ktere budeme scrollovat</i>
        xor bx, bx          <i>; adresa zacatku vykreslovani</i>
&nbsp;
<strong>opak</strong>:
        add bx, 80          <i>; prechod na dalsi adresu, od ktere se bude vykreslovat</i>
        call wait_sync      <i>; cekani na sync.</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
</pre>

<a href="https://www.root.cz/obrazek/1131081/"><img src="https://i.iinfo.cz/images/683/pc-12-6-prev.webp"  class="image-1131081" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-6-prev.webp"  data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-6-large.webp"  data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 6: Obsah obrazovky 320&times;400 přes začátkem scrollingu.</i></p>

<a href="https://www.root.cz/obrazek/1131082/"><img src="https://i.iinfo.cz/images/683/pc-12-7-prev.webp"  class="image-1131082" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-7-prev.webp"  data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-7-large.webp"  data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 7: Průběh vertikálního scrollingu.</i></p>

<a href="https://www.root.cz/obrazek/1131083/"><img src="https://i.iinfo.cz/images/683/pc-12-8-prev.webp"  class="image-1131083" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-8-prev.webp"  data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-8-large.webp"  data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 8: Průběh vertikálního scrollingu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý demonstrační příklad: scrolling v&nbsp;režimu s&nbsp;rozlišením 320&times;400 pixelů</h2>

<p>V&nbsp;dnešním druhém příkladu, který je vlastně do značné míry podobný
příkladu prvnímu, je taktéž realizován vertikální scrolling, tentokrát však
v&nbsp;grafickém režimu s&nbsp;rozlišením 320&times;400 pixelů. Úplný zdrojový
kód tohoto příkladu vypadá následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x400 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>; Vykresleni rastroveho obrazku postupne do vsech bitovych rovin.</i>
<i>; Vertikalni scrolling po stisku klavesy.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_vertical_scroll_2.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_vertical_scroll_2.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
INPUT_STATUS         equ 0x3da
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
MAXIMUM_SCAN_LINE    equ 0x09   <i>; CRTC</i>
START_ADDRESS_HIGH   equ 0x0c   <i>; CRTC</i>
START_ADDRESS_LOW    equ 0x0d   <i>; CRTC</i>
&nbsp;
<i>; bitove masky</i>
V_RETRACE            equ 0x08
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>; paleta ve stupnich sedi</i>
%macro <strong>grayscale_palette</strong> 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
<strong>next_dac</strong>:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>
&nbsp;
                            <i>; mod 320x200 bez zretezeni rovin</i>
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
        set_crtc_register MAXIMUM_SCAN_LINE, 0x40         <i>; 400 grafickych radku</i>
&nbsp;
        mov ax, cs
        mov ds, ax          <i>; zajistit, ze bude mozne adresovat cely obrazek</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
&nbsp;
        select_bitplane 1   <i>; prvni bitplane</i>
        xor ax, ax          <i>; offset pixelu</i>
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 2   <i>; druha bitplane</i>
        mov ax, 1
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 4   <i>; treti bitplane</i>
        mov ax, 2
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 8   <i>; ctvrta bitplane</i>
        mov ax, 3
        call move_image_part; prenest obrazek
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        mov cx, 400         <i>; pocet radku, o ktere budeme scrollovat</i>
        xor bx, bx          <i>; adresa zacatku vykreslovani</i>
&nbsp;
<strong>opak</strong>:
        add bx, 80          <i>; prechod na dalsi adresu, od ktere se bude vykreslovat</i>
        call wait_sync      <i>; cekani na sync.</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>move_image_part</strong>:
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
        add si, ax          <i>; offset pixelu</i>
        mov di, 320*100     <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
                            <i>; kam budeme chtit provest vykreslovani</i>
&nbsp;
        mov cx, 320*200/4   <i>; pocet zapisovanych bajtu (=pixelu)</i>
<strong>bitblt</strong>:
        lodsb               <i>; nacist bajt z obrazku</i>
        add si, 3           <i>; celkove posun o 4 pixely v obrazku </i>
        stosb               <i>; ulozit do obrazove pameti</i>
        loop bitblt         <i>; presunout CX pixelu</i>
        ret
&nbsp;
<strong>wait_sync</strong>:
        mov dx, INPUT_STATUS <i>; adresa stavoveho registru graficke karty CGA</i>
<strong>wait_sync_end</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jnz wait_sync_end   <i>; probiha - cekat na konec</i>
<strong>wait_sync_start</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jz wait_sync_start  <i>; neprobiha - cekat na zacatek</i>
        ret                 <i>; ok - synchronizacni kurz probiha, lze zapisovat do pameti</i>
&nbsp;
<i>; pridani binarnich dat s rastrovym obrazkem</i>
<strong>image</strong>:
    incbin "image_320x200.bin"
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Double a tripple buffering</h2>

<p>V&nbsp;nestandardních 256barevných režimech lze snadno realizovat další dvě
důležité grafické operace: double buffering a tripple buffering. Jedná se
vlastně o vertikální scrolling o celou výšku obrazovky (200, 240 atd. řádků).
Kolik takových obrazovek je k&nbsp;dispozici již vlastně víme z&nbsp;tabulky
uvedené <a href="#k05">v&nbsp;páté kapitole</a>:</p>

<table>
<tr><th>Rozlišení</th><th>Obrazovka</th><th>Výška (obrazovek)</th><th>Poznámka</th></tr>
<tr><td>256&times;256</td><td> 65536</td><td>4</td><td>známé jako Mode-Q: 256&times;256&times;256 neboli q(c)ube</td></tr>
<tr><td>320&times;200</td><td> 64000</td><td>4</td><td>známé jako Mode-Y, vychází ze standardního grafického režimu 13h</td></tr>
<tr><td>320&times;240</td><td> 76800</td><td>3</td><td>známé jako Mode-X</td></tr>
<tr><td>320&times;400</td><td>128000</td><td>2</td><td>dvojnásobný počet řádků oproti Mode-Y</td></tr>
<tr><td>320&times;480</td><td>153600</td><td>1</td><td>dvojnásobný počet řádků oproti Mode-X</td></tr>
<tr><td>360&times;240</td><td> 86400</td><td>3</td><td>využití možnosti VGA zobrazit 720 (360) pixelů na řádku (vychází z textového režimu)</td></tr>
<tr><td>360&times;480</td><td>172800</td><td>1</td><td>nejlepší rozlišení, které je kompatibilní se všemi monitory</td></tr>
<tr><td>400&times;300</td><td>120000</td><td>2</td><td>nejlepší rozlišení 4:3, které je většinou kompatibilní s&nbsp;multisync monitory</td></tr>
</table>

<p>K&nbsp;čemu tyto operace slouží? Double buffering umožňuje, aby se scéna
překreslila na pozadí (do zadního bufferu), přičemž zobrazená bude v&nbsp;tomto
čase předchozí verze scény (přední buffer). A teprve po překreslení celého
snímku se provede přepnutí: zadní buffer se stane bufferem předním a naopak.
Přepínání je vhodné provádět mezi vykreslením snímků, tedy v&nbsp;době
vertikálního přerušení.</p>

<p>Ovšem čekání na vertikální přerušení znamená, že se mikroprocesor
v&nbsp;tomto čase nebude věnovat užitečnější činnosti, tj.&nbsp;výpočtu další
scény. A právě v&nbsp;této chvíli lze využít tripple buffering, kdy jeden
buffer je zobrazen, další je již vykreslen a čeká se na vhodný čas pro přepnutí
bufferů a mezitím lze vykreslování provádět do třetího bufferu. Tripple
buffering je podporován například režimem X, ovšem ne již režimem
s&nbsp;rozlišením 320&times;400 řádků (zde nemáme k&nbsp;dispozici dostatek
video paměti).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Režim split-screen</h2>

<p>Se scrollingem souvisí i další zajímavá vlastnost grafické karty VGA. Tato
karta totiž podporuje režim <i>split-screen</i>. O co se jedná? Obrazovka je
logicky rozdělena na dvě části, přičemž první část je vykreslována od adresy
určené již známými CRTC registry <strong>START_ADDRESS_HIGH</strong>
a<strong>START_ADDRESS_LOW</strong> (což již známe), zatímco část druhá má
fixně nastavenou počáteční adresu na nulu (v&nbsp;segmentu 0xa000). Jedna část
obrazovky tedy může volně scrollovat, zatímco druhá nikoli, což například
umožňuje zobrazit pruh se skóre, instrukcemi atd. Nebo lze realizovat hry
s&nbsp;rozdělenou obrazovkou, kde pro prvního hráče získáme možnost scrollingu
&bdquo;zadarmo&ldquo; (bez nutnosti přenosu dat), zatímco pro část obrazovky
vyhrazené pro druhého hráče je již nutné scrolling realizovat programově
(přenosem z&nbsp;RAM nebo z&nbsp;neviditelné části video RAM).</p>

<p><div class="rs-tip-major">Poznámka: teoreticky lze split screen použít
v&nbsp;jakémkoli grafickém režimu, ale i v&nbsp;režimu textovém, protože
z&nbsp;pohledu CRTC registrů se tyto režimy vlastně chovají podobně.</div></p>

<a href="https://www.root.cz/obrazek/1131084/"><img src="https://i.iinfo.cz/images/683/pc-12-9-prev.webp"  class="image-1131084" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-9-prev.webp"  data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-9-large.webp"  data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 9: Rozdělení obsahu obrazovky v&nbsp;režimu split-screen.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Konfigurace karty VGA pro použití split-screen</h2>

<p>Pro nastavení split screenu nám vlastně postačuje maličkost &ndash; nastavit
hodnotu nazývanou <strong>scan line compare</strong>. Jedná se o hodnotu, se
kterou se porovnává aktuální hodnota počitadla řádků. Pokud se skutečně dosáhne
nastaveného limitu, provede karta VGA &bdquo;reset&ldquo; adresy dalšího pixelu
na nulu &ndash; tak snadné to interně je.</p>

<p>Praxe je pochopitelně složitější, protože hodnota <strong>scan line
compare</strong> je desetibitová (rozsah 0..1023) a registry CRTC jsou
osmibitové. Teoreticky by bylo možné tuto hodnotu rozdělit do dvou po sobě
jdoucích registrů, ale IBM se s&nbsp;programátory nemazlí &ndash; oněch deset
bitů je rozděleno do tří registrů (což by ještě nevadilo), jenže navíc obsahují
tyto tři registry i další bity, takže modifikace znamená bitové operace
atd.:</p>

<table>
<tr><th>Bit(y)</th><th>Registr</th><th>Index</th><th>Bit v registru</th></tr>
<tr><td>0-7</td><td>Line Compare</td><td>0x18</td><td>0-7</td></tr>
<tr><td>8</td><td>Overflow</td><td>0x07</td><td>4</td></tr>
<tr><td>9</td><td>Maximum scan line</td><td>0x09</td><td>6</td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Třetí demonstrační příklad: (neúspěšný) pokus o nastavení split-screen</h2>

<p>Pokusme se nyní modifikovat předchozí příklad pro vertikální scrolling tak,
že obrazovku rozdělíme na dvě části změnou registru
<strong>LINE_COMPARE</strong> obsahujícího spodních osm bitů hodnoty
<strong>scan line compare</strong>. Rozdělení obrazovky na přesné poloviny
znamená dosazení hodnoty 200, protože již víme, že v&nbsp;režimu 320&times;200
jsou řádky zdvojeny (každý je vykreslen dvakrát):</p>

<pre>
set_crtc_register LINE_COMPARE, 200               <i>; rezim split-screen na radku 200</i>
</pre>

<p>Bude to fungovat? Prozatím nikoli, o čemž se snadno přesvědčíme:</p>

<a href="https://www.root.cz/obrazek/1131085/"><img src="https://i.iinfo.cz/images/683/pc-12-10-prev.webp" class="image-1131085" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-10-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-10-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 10: Scrolluje celá obrazovka &ndash; režim split-screen nefunguje podle očekávání.</i></p>

<p>Pro úplnost si ukažme, jak vypadá celý zdrojový kód tohoto příkladu:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x400 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>; Nastaveni split screen.</i>
<i>; Vykresleni rastroveho obrazku postupne do vsech bitovych rovin.</i>
<i>; Vertikalni scrolling po stisku klavesy.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_split_screen_1.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_split_screen_1.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
INPUT_STATUS         equ 0x3da
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
OVERFLOW             equ 0x07   <i>; CRTC</i>
MAXIMUM_SCAN_LINE    equ 0x09   <i>; CRTC</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
LINE_COMPARE         equ 0x18   <i>; CRTC</i>
START_ADDRESS_HIGH   equ 0x0c   <i>; CRTC</i>
START_ADDRESS_LOW    equ 0x0d   <i>; CRTC</i>
&nbsp;
<i>; bitove masky</i>
V_RETRACE            equ 0x08
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>; paleta ve stupnich sedi</i>
%macro <strong>grayscale_palette</strong> 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
<strong>next_dac</strong>:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>
&nbsp;
                            <i>; mod 320x200 bez zretezeni rovin</i>
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
        set_crtc_register LINE_COMPARE, 200               <i>; rezim split-screen na radku 200</i>
&nbsp;
        mov ax, cs
        mov ds, ax          <i>; zajistit, ze bude mozne adresovat cely obrazek</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
&nbsp;
        select_bitplane 1   <i>; prvni bitplane</i>
        xor ax, ax          <i>; offset pixelu</i>
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 2   <i>; druha bitplane</i>
        mov ax, 1
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 4   <i>; treti bitplane</i>
        mov ax, 2
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 8   <i>; ctvrta bitplane</i>
        mov ax, 3
        call move_image_part; prenest obrazek
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        mov cx, 100         <i>; pocet radku, o ktere budeme scrollovat</i>
        xor bx, bx          <i>; adresa zacatku vykreslovani</i>
&nbsp;
<strong>opak</strong>:
        add bx, 80          <i>; prechod na dalsi adresu, od ktere se bude vykreslovat</i>
        call wait_sync      <i>; cekani na sync.</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>move_image_part</strong>:
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
        add si, ax          <i>; offset pixelu</i>
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov cx, 320*200/4   <i>; pocet zapisovanych bajtu (=pixelu)</i>
<strong>bitblt</strong>:
        lodsb               <i>; nacist bajt z obrazku</i>
        add si, 3           <i>; celkove posun o 4 pixely v obrazku </i>
        stosb               <i>; ulozit do obrazove pameti</i>
        loop bitblt         <i>; presunout CX pixelu</i>
        ret
&nbsp;
<strong>wait_sync</strong>:
        mov dx, INPUT_STATUS <i>; adresa stavoveho registru graficke karty CGA</i>
<strong>wait_sync_end</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jnz wait_sync_end   <i>; probiha - cekat na konec</i>
<strong>wait_sync_start</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jz wait_sync_start  <i>; neprobiha - cekat na zacatek</i>
        ret                 <i>; ok - synchronizacni kurz probiha, lze zapisovat do pameti</i>
&nbsp;
<i>; pridani binarnich dat s rastrovym obrazkem</i>
<strong>image</strong>:
    incbin "image_320x200.bin"
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Korektní nastavení všech bitů hodnoty <strong>scan line compare</strong></h2>

<p>Aby bylo možné korektně nastavit režim rozdělené obrazovky, je nutné
modifikovat všech deset bitů hodnoty <strong>max line compare</strong>, tedy
včetně osmého bitu (registr <strong>Overflow</strong>) a bitu devátého (registr
<strong>Maximum scan line</strong>). Budeme chtít obrazovku rozdělit
v&nbsp;režimu 320&times;200 pixelů v&nbsp;polovině, tj.&nbsp;na řádku 100.
Ovšem již víme, že v&nbsp;tomto režimu se každý řádek vykresluje dvakrát, takže
budeme muset nastavit hodnotu 200. Ukažme si jednotlivé kroky:</p>

<p>V&nbsp;prvním kroku nastavíme spodních osm bitů, což je nejsnadnější,
protože použijeme makro:</p>

<pre>
set_crtc_register LINE_COMPARE, 200
</pre>

<p>Dále vynulujeme devátý bit, jenž je umístěný v&nbsp;CRTC registru
<strong>Overflow</strong>. Zde musíme použít bitovou masku aplikovanou na
původní obsah registru (ostatní bity totiž nesmíme modifikovat):</p>

<pre>
mov dx, CRTC_INDEX
mov al, OVERFLOW
out dx, al
inc dx
in  al, dx
and al, 0xef
out dx, al
</pre>

<p>A nakonec vynulujeme bit desátý, který je umístěn v&nbsp;registru
<strong>Maximum scan line</strong>. Opět je nutné použít bitovou masku:</p>

<pre>
mov dx, CRTC_INDEX
mov al, MAXIMUM_SCAN_LINE
out dx, al
inc dx
in  al, dx
and al, 0xbf
out dx, al
</pre>

<p>Výsledek:</p>

<a href="https://www.root.cz/obrazek/1131086/"><img src="https://i.iinfo.cz/images/683/pc-12-11-prev.webp" class="image-1131086" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-11-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-11-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 11: Vertikální scrolling v&nbsp;režimu split screen.</i></p>

<a href="https://www.root.cz/obrazek/1131087/"><img src="https://i.iinfo.cz/images/683/pc-12-12-prev.webp" class="image-1131087" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-12-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-12-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 12: Vertikální scrolling v&nbsp;režimu split screen.</i></p>

<a href="https://www.root.cz/obrazek/1131088/"><img src="https://i.iinfo.cz/images/683/pc-12-13-prev.webp" class="image-1131088" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-13-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-13-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 13: Vertikální scrolling v&nbsp;režimu split screen.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Čtvrtý demonstrační příklad: úspěšný pokus o nastavení split-screen</h2>

<p>Upravené a již skutečně funkční nastavení režimu rozdělené obrazovky
(<i>split screen</i>) je ukázáno v&nbsp;dnešním čtvrtém demonstračním příkladu,
jehož úplný zdrojový kód vypadá následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>; Nastaveni split screen.</i>
<i>; Vykresleni rastroveho obrazku postupne do vsech bitovych rovin.</i>
<i>; Vertikalni scrolling po stisku klavesy.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_split_screen_2.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_split_screen_2.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
INPUT_STATUS         equ 0x3da
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
OVERFLOW             equ 0x07   <i>; CRTC</i>
MAXIMUM_SCAN_LINE    equ 0x09   <i>; CRTC</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
LINE_COMPARE         equ 0x18   <i>; CRTC</i>
START_ADDRESS_HIGH   equ 0x0c   <i>; CRTC</i>
START_ADDRESS_LOW    equ 0x0d   <i>; CRTC</i>
&nbsp;
<i>; bitove masky</i>
V_RETRACE            equ 0x08
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>; paleta ve stupnich sedi</i>
%macro <strong>grayscale_palette</strong> 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
<strong>next_dac</strong>:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>
&nbsp;
                            <i>; mod 320x200 bez zretezeni rovin</i>
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
        set_crtc_register LINE_COMPARE, 200
&nbsp;
        mov dx, CRTC_INDEX
        mov al, MAXIMUM_SCAN_LINE
        out dx, al
        inc dx
        in al, dx
        and al, 0xbf
        out dx, al
&nbsp;
        mov dx, CRTC_INDEX
        mov al, OVERFLOW
        out dx, al
        inc dx
        in al, dx
        and al, 0xef
        out dx, al
&nbsp;
        mov ax, cs
        mov ds, ax          <i>; zajistit, ze bude mozne adresovat cely obrazek</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
&nbsp;
        select_bitplane 1   <i>; prvni bitplane</i>
        xor ax, ax          <i>; offset pixelu</i>
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 2   <i>; druha bitplane</i>
        mov ax, 1
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 4   <i>; treti bitplane</i>
        mov ax, 2
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 8   <i>; ctvrta bitplane</i>
        mov ax, 3
        call move_image_part; prenest obrazek
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        mov cx, 100         <i>; pocet radku, o ktere budeme scrollovat</i>
        xor bx, bx          <i>; adresa zacatku vykreslovani</i>
&nbsp;
<strong>opak</strong>:
        add bx, 80          <i>; prechod na dalsi adresu, od ktere se bude vykreslovat</i>
        call wait_sync      <i>; cekani na sync.</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>move_image_part</strong>:
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
        add si, ax          <i>; offset pixelu</i>
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov cx, 320*200/4   <i>; pocet zapisovanych bajtu (=pixelu)</i>
<strong>bitblt</strong>:
        lodsb               <i>; nacist bajt z obrazku</i>
        add si, 3           <i>; celkove posun o 4 pixely v obrazku </i>
        stosb               <i>; ulozit do obrazove pameti</i>
        loop bitblt         <i>; presunout CX pixelu</i>
        ret
&nbsp;
<strong>wait_sync</strong>:
        mov dx, INPUT_STATUS <i>; adresa stavoveho registru graficke karty CGA</i>
<strong>wait_sync_end</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jnz wait_sync_end   <i>; probiha - cekat na konec</i>
<strong>wait_sync_start</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jz wait_sync_start  <i>; neprobiha - cekat na zacatek</i>
        ret                 <i>; ok - synchronizacni kurz probiha, lze zapisovat do pameti</i>
&nbsp;
<i>; pridani binarnich dat s rastrovym obrazkem</i>
<strong>image</strong>:
    incbin "image_320x200.bin"
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Horizontální scrolling</h2>

<p>Nyní si popišme způsob realizace horizontálního scrollingu. Jedná se o
poněkud složitější techniku, než scrolling vertikální, a to ze dvou důvodů:</p>

<ol>

<li>Obrazové řádky musí být delší (minimálně o jeden pixel) než šířka
obrazovky, aby se při horizontálním scrollingu na volné místo nepřesunovaly
pixely z&nbsp;jiných řádků.</li>

<li>Musíme umět zajistit posun ideálně o jednotlivé pixely popř.&nbsp;alespoň o
dva pixely. Ovšem v&nbsp;nezřetězených režimech je hrubý posun vždy o čtyři
pixely.</li>

</ol>

<p>Nicméně začněme prozatím tím nejjednodušším možným příkladem, v&nbsp;němž
nebudou obrazové řádky delší než šířka obrazovky a taktéž nebudeme provádět
&bdquo;jemný&ldquo; scrolling, ale scrolling o celé bajty (což v&nbsp;256
barevných režimech znamená posun o čtyři pixely &ndash; nesmíme zapomenout na
to, že roviny nejsou zřetězeny!).</p>

<p>Následující sekvence strojových instrukcí nám umožní realizovat horizontální
scrolling o celou šířku obrazovky (postupně), ovšem ve skocích po čtyřech
pixelech. Obrazovka se tak odskroluje celkem 80&times; (oproti vertikálnímu
scrollingu počáteční adresu pro zobrazování měníme po jedné a nikoli po
80):</p>

<pre>
        mov cx, 80          <i>; pocet bajtu(!), o ktere budeme scrollovat</i>
        xor bx, bx          <i>; adresa zacatku vykreslovani</i>
&nbsp;
<strong>opak</strong>:
        inc bx              <i>; posun o jediny pixel</i>
        call wait_sync      <i>; cekani na sync.</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
</pre>

<p>Výsledky mohou vypadat následovně &ndash; povšimněte si, jak se při
scrollingu na řádky nasouvá obsah následujících řádků (což ovšem v&nbsp;praxi
nebudeme chtít):</p>

<a href="https://www.root.cz/obrazek/1131089/"><img src="https://i.iinfo.cz/images/683/pc-12-14-prev.webp" class="image-1131089" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-14-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-14-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 14: Horizontální scrolling beze změny délky obrazových řádků.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Pátý demonstrační příklad: horizontální scrolling o čtyři pixely beze změny délky řádků</h2>

<p>Úplný zdrojový kód příkladu pro &bdquo;hrubý&ldquo; horizontální scrolling
může vypadat následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x400 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>; Vykresleni rastroveho obrazku postupne do vsech bitovych rovin.</i>
<i>; Horizontalni scrolling po stisku klavesy.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_horizontal_scroll_1.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_horizontal_scroll_1.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
INPUT_STATUS         equ 0x3da
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
MAXIMUM_SCAN_LINE    equ 0x09   <i>; CRTC</i>
START_ADDRESS_HIGH   equ 0x0c   <i>; CRTC</i>
START_ADDRESS_LOW    equ 0x0d   <i>; CRTC</i>
&nbsp;
<i>; bitove masky</i>
V_RETRACE            equ 0x08
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>; paleta ve stupnich sedi</i>
%macro <strong>grayscale_palette</strong> 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
<strong>next_dac</strong>:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>
&nbsp;
                            <i>; mod 320x200 bez zretezeni rovin</i>
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
        set_crtc_register MAXIMUM_SCAN_LINE, 0x40         <i>; 400 grafickych radku</i>
&nbsp;
        mov ax, cs
        mov ds, ax          <i>; zajistit, ze bude mozne adresovat cely obrazek</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
&nbsp;
        select_bitplane 1   <i>; prvni bitplane</i>
        xor ax, ax          <i>; offset pixelu</i>
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 2   <i>; druha bitplane</i>
        mov ax, 1
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 4   <i>; treti bitplane</i>
        mov ax, 2
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 8   <i>; ctvrta bitplane</i>
        mov ax, 3
        call move_image_part; prenest obrazek
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        mov cx, 80          <i>; pocet bajtu(!), o ktere budeme scrollovat</i>
        xor bx, bx          <i>; adresa zacatku vykreslovani</i>
&nbsp;
<strong>opak</strong>:
        inc bx              <i>; posun o jediny pixel</i>
        call wait_sync      <i>; cekani na sync.</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>move_image_part</strong>:
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
        add si, ax          <i>; offset pixelu</i>
        mov di, 320*25      <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
                            <i>; kam budeme chtit provest vykreslovani</i>
&nbsp;
        mov cx, 320*200/4   <i>; pocet zapisovanych bajtu (=pixelu)</i>
<strong>bitblt</strong>:
        lodsb               <i>; nacist bajt z obrazku</i>
        add si, 3           <i>; celkove posun o 4 pixely v obrazku </i>
        stosb               <i>; ulozit do obrazove pameti</i>
        loop bitblt         <i>; presunout CX pixelu</i>
        ret
&nbsp;
<strong>wait_sync</strong>:
        mov dx, INPUT_STATUS <i>; adresa stavoveho registru graficke karty CGA</i>
<strong>wait_sync_end</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jnz wait_sync_end   <i>; probiha - cekat na konec</i>
<strong>wait_sync_start</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jz wait_sync_start  <i>; neprobiha - cekat na zacatek</i>
        ret                 <i>; ok - synchronizacni kurz probiha, lze zapisovat do pameti</i>
&nbsp;
<i>; pridani binarnich dat s rastrovym obrazkem</i>
<strong>image</strong>:
    incbin "image_320x200.bin"
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Změna počtu pixelů na obrazových řádcích bez změny rozlišení</h2>

<p>Aby byl horizontální scrolling realizován korektně (a navíc bez nutnosti
přenosu obrazových dat z&nbsp;hlavní paměti do video paměti), musíme změnit
logickou délku obrazových řádků, tedy vlastně rozdíl mezi adresou prvního
pixelu na řádku <i>n+1</i> a <i>n</i>. Tento rozdíl je uložen v&nbsp;CRTC
registru <strong>OFFSET</strong>:</p>

<pre>
OFFSET               equ 0x13   <i>; CRTC</i>
</pre>

<p>Poněkud problematické je, že hodnota uložená v&nbsp;tomto registru
neodpovídá ve všech grafických režimech přímo offsetu. Výpočet konkrétní
hodnoty závisí na požadovaném offsetu (logicky), ale i na grafickém režimu i na
tom, jestli jsou bitové roviny zřetězeny či nikoli. Pokud budeme chtít
v&nbsp;<i>nezřetězeném</i> režimu s&nbsp;256 barvami používat řádky
s&nbsp;logickou délkou 640 pixelů (tedy 160 pixelů v&nbsp;každé bitové rovině),
musíme tuto hodnotu podělit 80</p>

<pre>
set_crtc_register OFFSET, 80                      <i>; 640 pixelu na radku (320 zobrazenych)</i>
</pre>

<p>Nyní již bude horizontální scrolling probíhat podle předpokladu, protože
obrazovka bude vlastně výřez z&nbsp;plochy dvojnásobně širší:</p>

<a href="https://www.root.cz/obrazek/1131090/"><img src="https://i.iinfo.cz/images/683/pc-12-15-prev.webp" class="image-1131090" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-15-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-15-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 15: Horizontální scrolling po modifikaci délky obrazových řádků.</i></p>

<a href="https://www.root.cz/obrazek/1131091/"><img src="https://i.iinfo.cz/images/683/pc-12-16-prev.webp" class="image-1131091" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-16-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-16-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 16: Horizontální scrolling po modifikaci délky obrazových řádků.</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto případě se ovšem logicky
sníží počet dostupných obrazových řádků na polovinu. To například znamená, že
nebude možné ho použít v&nbsp;režimech s&nbsp;rozlišením 320&times;480 ani
360&times;480 pixelů.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Šestý demonstrační příklad: horizontální scrolling při šířce řádků nastavených na 640 pixelů</h2>

<p>Korektní (i když prozatím pouze hrubý) horizontální scrolling při nastavení
logické šířky obrazových řádků na 640 pixelů, je realizován v&nbsp;dnešním
šestém demonstračním příkladu, jehož úplný zdrojový kód vypadá následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x400 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>; Vykresleni rastroveho obrazku postupne do vsech bitovych rovin.</i>
<i>; Nastaveni "sirokych" obrazovych radku.</i>
<i>; Horizontalni scrolling po stisku klavesy.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_horizontal_scroll_2.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_horizontal_scroll_2.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
INPUT_STATUS         equ 0x3da
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
OFFSET               equ 0x13   <i>; CRTC</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
MAXIMUM_SCAN_LINE    equ 0x09   <i>; CRTC</i>
START_ADDRESS_HIGH   equ 0x0c   <i>; CRTC</i>
START_ADDRESS_LOW    equ 0x0d   <i>; CRTC</i>
&nbsp;
<i>; bitove masky</i>
V_RETRACE            equ 0x08
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>; paleta ve stupnich sedi</i>
%macro <strong>grayscale_palette</strong> 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
<strong>next_dac</strong>:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>
&nbsp;
                            <i>; mod 320x200 bez zretezeni rovin</i>
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
        set_crtc_register MAXIMUM_SCAN_LINE, 0x40         <i>; 400 grafickych radku</i>
        set_crtc_register OFFSET, 80                      <i>; 640 pixelu na radku (320 zobrazenych)</i>
&nbsp;
        mov ax, cs
        mov ds, ax          <i>; zajistit, ze bude mozne adresovat cely obrazek</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
&nbsp;
        select_bitplane 1   <i>; prvni bitplane</i>
        xor ax, ax          <i>; offset pixelu</i>
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 2   <i>; druha bitplane</i>
        mov ax, 1
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 4   <i>; treti bitplane</i>
        mov ax, 2
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 8   <i>; ctvrta bitplane</i>
        mov ax, 3
        call move_image_part; prenest obrazek
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        mov cx, 80          <i>; pocet bajtu(!), o ktere budeme scrollovat</i>
        xor bx, bx          <i>; adresa zacatku vykreslovani</i>
&nbsp;
<strong>opak</strong>:
        inc bx              <i>; posun o jediny pixel</i>
        call wait_sync      <i>; cekani na sync.</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>move_image_part</strong>:
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
        add si, ax          <i>; offset pixelu</i>
        mov di, 320*50      <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
                            <i>; kam budeme chtit provest vykreslovani</i>
        add di, 80          <i>; posun zacatku tak, aby obrazek zacinal "za rohem"</i>
&nbsp;
        mov dl, 200         <i>; pocitadlo radku</i>
<strong>next_scan_line</strong>:
        mov cx, 320/4       <i>; pocet zapisovanych bajtu (=pixelu)</i>
<strong>bitblt</strong>:
        lodsb               <i>; nacist bajt z obrazku</i>
        add si, 3           <i>; celkove posun o 4 pixely v obrazku </i>
        stosb               <i>; ulozit do obrazove pameti</i>
        loop bitblt         <i>; presunout CX pixelu</i>
                            <i>; nyni je vykresleny jeden radek</i>
        add di, 80          <i>; preskocit zbytek obrazoveho radku</i>
        dec dl              <i>; dalsi radek?</i>
        jnz next_scan_line  <i>; ok, dalsi radek</i>
&nbsp;
        ret
&nbsp;
<strong>wait_sync</strong>:
        mov dx, INPUT_STATUS <i>; adresa stavoveho registru graficke karty CGA</i>
<strong>wait_sync_end</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jnz wait_sync_end   <i>; probiha - cekat na konec</i>
<strong>wait_sync_start</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jz wait_sync_start  <i>; neprobiha - cekat na zacatek</i>
        ret                 <i>; ok - synchronizacni kurz probiha, lze zapisovat do pameti</i>
&nbsp;
<i>; pridani binarnich dat s rastrovym obrazkem</i>
<strong>image</strong>:
    incbin "image_320x200.bin"
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Jemný horizontální scrolling</h2>

<p>Nyní nám zbývá realizovat poslední krok, a to konkrétně doplnit hrubý
horizontální scrolling (o čtyři pixely) o jemný scrolling realizující posun o
jeden až tři pixely. I tento trik grafická karta VGA podporuje, i když registr
ovládající jemný skrolling je poněkud nelogicky umístěn do sekce
s&nbsp;ovládáním atributového řadiče (evidentně se tento posun interně provádí
až v&nbsp;závěrečné fázi generování obrazu). Jedná se o registr s&nbsp;indexem
0x13, ovšem my již víme, že aby došlo ke změně, je nutné k&nbsp;indexu registru
ATC přičíst hodnotu 0x20, takže nový &bdquo;index&ldquo; bude mít hodnotu 0x33.
Zapisovat lze hodnoty 0 až 15, protože se využívají jen spodní čtyři bity
tohoto registru (proto je nutné po posunu o 4 pixely provést hrubý scrolling
atd.):</p>

<pre>
<strong>fine_scroll</strong>:
        mov dx, ATTRIBUTE_CONTROLLER
        mov al, 0x33        <i>; PEL panning</i>
        out dx, al          <i>; index registru</i>
        mov al, ah
        out dx, al          <i>; hodnota registru</i>
        ret
</pre>

<p>Kombinace hrubého a jemného horizontálního scrollingu vypadá například
takto:</p>

<pre>
<strong>opak</strong>:
        mov ah, 0           <i>; jemny posun</i>
<strong>fine_scroll_opak</strong>:
        call wait_sync      <i>; cekani na sync.</i>
        call fine_scroll    <i>; jemny posun o AH pixelu</i>
        inc ah
        cmp ah, 8           <i>; jak se posuneme o 8, muzeme jit o bajt dale</i>
        jne fine_scroll_opak
&nbsp;
        inc bx              <i>; posun o jediny pixel - ve skutecnosti posun o 4 pixely celkem</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
</pre>

<p>Je zde ovšem ještě jeden problém, a to konkrétně dělení hodnoty jemného
scrollingu dvěma v&nbsp;některých grafických režimech. Konkrétně tedy budeme
muset provést jemný scrolling o 0 až 7 &bdquo;půlpixelů&ldquo; a poté provést
hrubý scrolling (nebo raději provést jemný posun o sudé hodnoty, protože se
uvádí, že posun o liché hodnoty může vést k&nbsp;poškození obsahu obrazovky
&ndash; to jsem ovšem nikdy na reálném HW neviděl). Nicméně oprava příkladu by
měla být snadná (zdvojit instrukci <strong>INC</strong>).</p>

<a href="https://www.root.cz/obrazek/1131092/"><img src="https://i.iinfo.cz/images/683/pc-12-17-prev.webp" class="image-1131092" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-17-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-17-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 17: Jemný horizontální scrolling.</i></p>

<a href="https://www.root.cz/obrazek/1131093/"><img src="https://i.iinfo.cz/images/683/pc-12-18-prev.webp" class="image-1131093" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-18-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-18-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 18: Jemný horizontální scrolling.</i></p>

<a href="https://www.root.cz/obrazek/1131094/"><img src="https://i.iinfo.cz/images/683/pc-12-19-prev.webp" class="image-1131094" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/683/pc-12-19-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/683/pc-12-19-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 19: Jemný horizontální scrolling.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Sedmý demonstrační příklad: jemný horizontální scrolling</h2>

<p>Jemný vertikální scrolling, pochopitelně kombinovaný s&nbsp;hrubým
scrollingem, je realizován v&nbsp;dnešním sedmém a současně i posledním
demonstračním příkladu, jehož úplný zdrojový kód je vypsán pod tímto
odstavcem:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x400 pixelu.</i>
<i>; Vypnuti zretezeni bitovych rovin.</i>
<i>; Vykresleni rastroveho obrazku postupne do vsech bitovych rovin.</i>
<i>; Nastaveni "sirokych" obrazovych radku.</i>
<i>; Jemny horizontalni scrolling po stisku klavesy.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_horizontal_scroll_3.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_horizontal_scroll_3.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty VGA</i>
ATTRIBUTE_CONTROLLER equ 0x3c0
SEQUENCER_INDEX      equ 0x3c4
SEQUENCER_DATA       equ 0x3c5
CRTC_INDEX           equ 0x3d4
CRTC_DATA            equ 0x3d5
INPUT_STATUS         equ 0x3da
BITPLANE_SELECTOR    equ 0x02
MEMORY_MODE_REGISTER equ 0x04   <i>; sekvencer</i>
OFFSET               equ 0x13   <i>; CRTC</i>
UNDERLINE_LOCATION   equ 0x14   <i>; CRTC</i>
MODE_CONTROL         equ 0x17   <i>; CRTC</i>
MAXIMUM_SCAN_LINE    equ 0x09   <i>; CRTC</i>
START_ADDRESS_HIGH   equ 0x0c   <i>; CRTC</i>
START_ADDRESS_LOW    equ 0x0d   <i>; CRTC</i>
&nbsp;
<i>; bitove masky</i>
V_RETRACE            equ 0x08
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>; nastaveni jednoho registru sekvenceru</i>
%macro <strong>set_sequencer_register</strong> 2
        mov dx, SEQUENCER_INDEX
        mov al, %1    <i>; ridici registr</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; nastaveni jednoho CRTC registru</i>
%macro <strong>set_crtc_register</strong> 2
        mov dx, CRTC_INDEX
        mov al, %1    <i>; ridici registr (CRTC)</i>
        out dx, al
        inc dx
        mov al, %2    <i>; hodnota zapisovana do registru</i>
        out dx, al
%endmacro
&nbsp;
<i>; vyber bitove roviny</i>
%macro <strong>select_bitplane</strong> 1
        mov  al, %1         <i>; bitova rovina</i>
        mov  dx, SEQUENCER_INDEX
        mov  ah, BITPLANE_SELECTOR
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
%endmacro
&nbsp;
<i>; paleta ve stupnich sedi</i>
%macro <strong>grayscale_palette</strong> 0
        mov ax, 0x1010      <i>; cislo sluzby a podsluzby VGA BIOSu</i>
        xor bl, bl          <i>; index barvy</i>
<strong>next_dac</strong>:
        mov ch, bl          <i>; prvni barvova slozka</i>
        shr ch, 1
        shr ch, 1
        mov cl, ch          <i>; druha barvova slozka</i>
        mov dh, ch          <i>; treti barvova slozka</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        jnz next_dac        <i>; nastavit dalsi barvu, dokud nedosahneme hodnoty 256</i>
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        grayscale_palette   <i>; nastaveni palety se stupni sedi</i>
&nbsp;
                            <i>; mod 320x200 bez zretezeni rovin</i>
        set_sequencer_register MEMORY_MODE_REGISTER, 0x06 <i>; vypnuti zretezeni + povoleni 256 kB RAM</i>
        set_crtc_register UNDERLINE_LOCATION, 0x00        <i>; vypnuti double word rezimu</i>
        set_crtc_register MODE_CONTROL,  0xe3             <i>; zapnuti bytoveho rezimu</i>
        set_crtc_register MAXIMUM_SCAN_LINE, 0x40         <i>; 400 grafickych radku</i>
        set_crtc_register OFFSET, 80                      <i>; 640 pixelu na radku (320 zobrazenych)</i>
&nbsp;
        mov ax, cs
        mov ds, ax          <i>; zajistit, ze bude mozne adresovat cely obrazek</i>
&nbsp;
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
&nbsp;
        select_bitplane 1   <i>; prvni bitplane</i>
        xor ax, ax          <i>; offset pixelu</i>
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 2   <i>; druha bitplane</i>
        mov ax, 1
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 4   <i>; treti bitplane</i>
        mov ax, 2
        call move_image_part; prenest obrazek
&nbsp;
        select_bitplane 8   <i>; ctvrta bitplane</i>
        mov ax, 3
        call move_image_part; prenest obrazek
&nbsp;
        wait_key
&nbsp;
        mov cx, 80          <i>; pocet bajtu(!), o ktere budeme scrollovat</i>
        xor bx, bx          <i>; adresa zacatku vykreslovani</i>
&nbsp;
<strong>opak</strong>:
        mov ah, 0           <i>; jemny posun</i>
<strong>fine_scroll_opak</strong>:
        call wait_sync      <i>; cekani na sync.</i>
        call fine_scroll    <i>; jemny posun o AH pixelu</i>
        inc ah
        cmp ah, 8           <i>; jak se posuneme o 8, muzeme jit o bajt dale</i>
        jne fine_scroll_opak
&nbsp;
        inc bx              <i>; posun o jediny pixel</i>
                            <i>; zmena adresy</i>
        set_crtc_register START_ADDRESS_HIGH, bh
        set_crtc_register START_ADDRESS_LOW, bl
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>fine_scroll</strong>:
        mov dx, ATTRIBUTE_CONTROLLER
        mov al, 0x33        <i>; PEL panning</i>
        out dx, al          <i>; index registru</i>
        mov al, ah
        out dx, al          <i>; hodnota registru</i>
        ret
&nbsp;
<strong>move_image_part</strong>:
        mov si, image       <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
        add si, ax          <i>; offset pixelu</i>
        mov di, 320*50      <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
                            <i>; kam budeme chtit provest vykreslovani</i>
        add di, 80          <i>; posun zacatku tak, aby obrazek zacinal "za rohem"</i>
&nbsp;
        mov dl, 200         <i>; pocitadlo radku</i>
<strong>next_scan_line</strong>:
        mov cx, 320/4       <i>; pocet zapisovanych bajtu (=pixelu)</i>
<strong>bitblt</strong>:
        lodsb               <i>; nacist bajt z obrazku</i>
        add si, 3           <i>; celkove posun o 4 pixely v obrazku </i>
        stosb               <i>; ulozit do obrazove pameti</i>
        loop bitblt         <i>; presunout CX pixelu</i>
                            <i>; nyni je vykresleny jeden radek</i>
        add di, 80          <i>; preskocit zbytek obrazoveho radku</i>
        dec dl              <i>; dalsi radek?</i>
        jnz next_scan_line  <i>; ok, dalsi radek</i>
&nbsp;
        ret
&nbsp;
<strong>wait_sync</strong>:
        mov dx, INPUT_STATUS <i>; adresa stavoveho registru graficke karty CGA</i>
<strong>wait_sync_end</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jnz wait_sync_end   <i>; probiha - cekat na konec</i>
<strong>wait_sync_start</strong>:
        in al, dx           <i>; precteni hodnoty stavoveho registru</i>
        test al, V_RETRACE  <i>; odmaskovat priznak vertikalniho synchronizacniho pulsu</i>
        jz wait_sync_start  <i>; neprobiha - cekat na zacatek</i>
        ret                 <i>; ok - synchronizacni kurz probiha, lze zapisovat do pameti</i>
&nbsp;
<i>; pridani binarnich dat s rastrovym obrazkem</i>
<strong>image</strong>:
    incbin "image_320x200.bin"
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad pomocí assembleru <strong>NASM</strong>, byly uložen do Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>hello.asm</td><td>program typu &bdquo;Hello world&ldquo; naprogramovaný v&nbsp;assembleru pro systém DOS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm</a></td></tr>
<tr><td> 2</td><td>hello_shorter.asm</td><td>kratší varianta výskoku z&nbsp;procesu zpět do DOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm</a></td></tr>
<tr><td> 3</td><td>hello_wait.asm</td><td>čekání na stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm</a></td></tr>
<tr><td> 4</td><td>hello_macros.asm</td><td>realizace jednotlivých částí programu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>gfx_4_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm</a></td></tr>
<tr><td> 6</td><td>gfx_6_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm</a></td></tr>
<tr><td> 7</td><td>gfx_4_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm</a></td></tr>
<tr><td> 8</td><td>gfx_6_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>gfx_6_fill_1.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm</a></td></tr>
<tr><td>10</td><td>gfx_6_fill_2.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, varianta s&nbsp;instrukcí <strong>LOOP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm</a></td></tr>
<tr><td>11</td><td>gfx_6_fill_3.asm</td><td>vyplnění obrazovky instrukcí <strong>REP STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm</a></td></tr>
<tr><td>12</td><td>gfx_6_fill_4.asm</td><td>vyplnění obrazovky, synchronizace vykreslování s&nbsp;paprskem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>gfx_4_image_1.asm</td><td>vykreslení rastrového obrázku získaného z&nbsp;binárních dat, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm</a></td></tr>
<tr><td>14</td><td>gfx_4_image_2.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm</a></td></tr>
<tr><td>15</td><td>gfx_4_image_3.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm</a></td></tr>
<tr><td>16</td><td>gfx_4_image_4.asm</td><td>korektní vykreslení všech sudých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm</a></td></tr>
<tr><td>17</td><td>gfx_4_image_5.asm</td><td>korektní vykreslení všech sudých i lichých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>gfx_4_image_6.asm</td><td>nastavení barvové palety před vykreslením obrázku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm</a></td></tr>
<tr><td>19</td><td>gfx_4_image_7.asm</td><td>nastavení barvové palety před vykreslením obrázku, snížená intenzita barev</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm</a></td></tr>
<tr><td>20</td><td>gfx_4_image_8.asm</td><td>postupná změna barvy pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>gfx_6_putpixel_1.asm</td><td>vykreslení pixelu, základní varianta se 16bitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm</a></td></tr>
<tr><td>22</td><td>gfx_6_putpixel_2.asm</td><td>vykreslení pixelu, varianta s&nbsp;osmibitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm</a></td></tr>
<tr><td>23</td><td>gfx_6_putpixel_3.asm</td><td>vykreslení pixelu, varianta bez násobení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm</a></td></tr>
<tr><td>24</td><td>gfx_6_putpixel_4.asm</td><td>vykreslení pixelu přes obrázek, nekorektní chování (přepis obrázku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm</a></td></tr>
<tr><td>25</td><td>gfx_6_putpixel_5.asm</td><td>vykreslení pixelu přes obrázek, korektní varianta pro bílé pixely</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>cga_text_mode_1.asm</td><td>standardní textový režim s&nbsp;rozlišením 40&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm</a></td></tr>
<tr><td>27</td><td>cga_text_mode_3.asm</td><td>standardní textový režim s&nbsp;rozlišením 80&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm</a></td></tr>
<tr><td>28</td><td>cga_text_mode_intensity.asm</td><td>změna významu nejvyššího bitu atributového bajtu: vyšší intenzita namísto blikání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm</a></td></tr>
<tr><td>29</td><td>cga_text_mode_cursor.asm</td><td>změna tvaru textového kurzoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm</a></td></tr>
<tr><td>30</td><td>cga_text_gfx_1.asm</td><td>zobrazení &bdquo;rastrové mřížky&ldquo;: pseudografický režim 160&times;25 pixelů (interně textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm</a></td></tr>
<tr><td>31</td><td>cga_text_mode_char_height.asm</td><td>změna výšky znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm</a></td></tr>
<tr><td>32</td><td>cga_text_160x100.asm</td><td>grafický režim 160&times;100 se šestnácti barvami (interně upravený textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>hercules_text_mode_1.asm</td><td>využití standardního textového režimu společně s&nbsp;kartou Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm</a></td></tr>
<tr><td>34</td><td>hercules_text_mode_2.asm</td><td>zákaz blikání v&nbsp;textových režimech</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm</a></td></tr>
<tr><td>35</td><td>hercules_turn_off.asm</td><td>vypnutí generování video signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm</a></td></tr>
<tr><td>36</td><td>hercules_gfx_mode_1.asm</td><td>přepnutí karty Hercules do grafického režimu (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm</a></td></tr>
<tr><td>37</td><td>hercules_gfx_mode_2.asm</td><td>přepnutí karty Hercules do grafického režimu (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm</a></td></tr>
<tr><td>38</td><td>hercules_putpixel.asm</td><td>subrutina pro vykreslení jediného pixelu na kartě Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>ega_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm</a></td></tr>
<tr><td>40</td><td>ega_text_mode_80x43.asm</td><td>zobrazení 43 textových řádků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm</a></td></tr>
<tr><td>41</td><td>ega_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm</a></td></tr>
<tr><td>42</td><td>ega_gfx_mode_640x200.asm</td><td>přepnutí do grafického režimu 640&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm</a></td></tr>
<tr><td>43</td><td>ega_gfx_mode_640x350.asm</td><td>přepnutí do grafického režimu 640&times;350 pixelů se čtyřmi nebo šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm</a></td></tr>
<tr><td>44</td><td>ega_gfx_mode_bitplanes_1.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (základní způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm</a></td></tr>
<tr><td>45</td><td>ega_gfx_mode_bitplanes_2.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (rychlejší způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>ega_320x200_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm</a></td></tr>
<tr><td>47</td><td>ega_640x350_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 640&times;350 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>48</td><td>ega_standard_font.asm</td><td>použití standardního fontu grafické karty EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm</a></td></tr>
<tr><td>49</td><td>ega_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>ega_palette_1.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 320&times;200 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm</a></td></tr>
<tr><td>51</td><td>ega_palette_2.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 640&times;350 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm</a></td></tr>
<tr><td>52</td><td>ega_palette_3.asm</td><td>změna všech barev v&nbsp;barvové paletě s&nbsp;využitím programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm</a></td></tr>
<tr><td>53</td><td>ega_palette_4.asm</td><td>změna všech barev, včetně barvy okraje, v&nbsp;barvové paletě voláním funkce BIOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>vga_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm</a></td></tr>
<tr><td>55</td><td>vga_text_mode_80x50.asm</td><td>zobrazení 50 a taktéž 28 textových řádků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm</a></td></tr>
<tr><td>56</td><td>vga_text_mode_intensity_1.asm</td><td>změna chování atributového bitu pro blikání (nebezpečná varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm</a></td></tr>
<tr><td>57</td><td>vga_text_mode_intensity_2.asm</td><td>změna chování atributového bitu pro blikání (bezpečnější varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm</a></td></tr>
<tr><td>58</td><td>vga_text_mode_9th_column.asm</td><td>modifikace způsobu zobrazení devátého sloupce ve znakových režimech (720 pixelů na řádku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm</a></td></tr>
<tr><td>59</td><td>vga_text_mode_cursor_shape.asm</td><td>změna tvaru textového kurzoru na grafické kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm</a></td></tr>
<tr><td>60</td><td>vga_text_mode_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>vga_gfx_mode_640x480.asm</td><td>přepnutí do grafického režimu 640&times;480 pixelů se šestnácti barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm</a></td></tr>
<tr><td>62</td><td>vga_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů s&nbsp;256 barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm</a></td></tr>
<tr><td>63</td><td>vga_gfx_mode_palette.asm</td><td>změna všech barev v&nbsp;barvové paletě grafické karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm</a></td></tr>
<tr><td>64</td><td>vga_gfx_mode_dac_1.asm</td><td>využití DAC (neočekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm</a></td></tr>
<tr><td>65</td><td>vga_gfx_mode_dac_2.asm</td><td>využití DAC (očekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>66</td><td>vga_640x480_putpixel.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 640&times;480 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm</a></td></tr>
<tr><td>67</td><td>vga_320x200_putpixel_1.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm</a></td></tr>
<tr><td>68</td><td>vga_320x200_putpixel_2.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (rychlejší varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>69</td><td>vga_gfx_mode_dac_3.asm</td><td>přímé využití DAC v&nbsp;grafickém režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>70</td><td>vga_gfx_mode_unchained_step_1.asm</td><td>zobrazení barevných pruhů v&nbsp;režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm</a></td></tr>
<tr><td>71</td><td>vga_gfx_mode_unchained_step_2.asm</td><td>vypnutí zřetězení bitových rovin a změna způsobu adresování pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm</a></td></tr>
<tr><td>72</td><td>vga_gfx_mode_unchained_step_3.asm</td><td>vykreslení barevných pruhů do vybraných bitových rovin</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>73</td><td>vga_gfx_mode_320x400.asm</td><td>nestandardní grafický režim s&nbsp;rozlišením 320&times;400 pixelů a 256 barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm</a></td></tr>
<tr><td>74</td><td>vga_320x200_image.asm</td><td>zobrazení rastrového obrázku ve standardním grafickém režimu 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm</a></td></tr>
<tr><td>75</td><td>vga_320x200_unchained_image_1.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm</a></td></tr>
<tr><td>76</td><td>vga_320x200_unchained_image_2.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm</a></td></tr>
<tr><td>77</td><td>vga_320x400_unchained_image.asm</td><td>zobrazení rastrového obrázku v&nbsp;nestandardním režimu 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>78</td><td>vga_vertical_scroll_1.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm</a></td></tr>
<tr><td>79</td><td>vga_vertical_scroll_2.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm</a></td></tr>
<tr><td>80</td><td>vga_split_screen_1.asm</td><td>režim split-screen a scrolling, nefunční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm</a></td></tr>
<tr><td>81</td><td>vga_split_screen_2.asm</td><td>režim split-screen a scrolling, plně funkční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm</a></td></tr>
<tr><td>82</td><td>vga_horizontal_scroll_1.asm</td><td>horizontální scrolling bez rozšíření počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm</a></td></tr>
<tr><td>83</td><td>vga_horizontal_scroll_2.asm</td><td>horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm</a></td></tr>
<tr><td>84</td><td>vga_horizontal_scroll_3.asm</td><td>jemný horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>6845 - Motorola CRT Controller<br />
<a href="https://stanislavs.org/helppc/6845.html">https://stanislavs.org/helppc/6845.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>DOSBox<br />
<a href="https://www.dosbox.com/">https://www.dosbox.com/</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Hercules Graphics Card (HCG)<br />
<a href="https://en.wikipedia.org/wiki/Hercules_Graphics_Card">https://en.wikipedia.org/wiki/Hercules_Graphics_Card</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf">https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://yassinebridi.github.io/asm-docs/8086_instruction_set.html">https://yassinebridi.github.io/asm-docs/8086_instruction_set.html</a>
</li>

<li>8088 MPH by Hornet + CRTC + DESiRE (final version)<br />
<a href="https://www.youtube.com/watch?v=hNRO7lno_DM">https://www.youtube.com/watch?v=hNRO7lno_DM</a>
</li>

<li>Area 5150 by CRTC &amp; Hornet (Party Version) / IBM PC+CGA Demo, Hardware Capture<br />
<a href="https://www.youtube.com/watch?v=fWDxdoRTZPc">https://www.youtube.com/watch?v=fWDxdoRTZPc</a>
</li>

<li>80x86 Integer Instruction Set Timings (8088 - Pentium)<br />
<a href="http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf">http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf</a>
</li>

<li>Colour Graphics Adapter: Notes<br />
<a href="https://www.seasip.info/VintagePC/cga.html">https://www.seasip.info/VintagePC/cga.html</a>
</li>

<li>Restoring A Vintage CGA Card With Homebrew HASL<br />
<a href="https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/">https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/</a>
</li>

<li>Demoing An 8088<br />
<a href="https://hackaday.com/2015/04/10/demoing-an-8088/">https://hackaday.com/2015/04/10/demoing-an-8088/</a>
</li>

<li>Video Memory Layouts<br />
<a href="http://www.techhelpmanual.com/89-video_memory_layouts.html">http://www.techhelpmanual.com/89-video_memory_layouts.html</a>
</li>

<li>Screen Attributes<br />
<a href="http://www.techhelpmanual.com/87-screen_attributes.html">http://www.techhelpmanual.com/87-screen_attributes.html</a>
</li>

<li>IBM PC Family  -  BIOS Video Modes<br />
<a href="https://www.minuszerodegrees.net/video/bios_video_modes.htm">https://www.minuszerodegrees.net/video/bios_video_modes.htm</a>
</li>

<li>EGA Functions<br />
<a href="https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega">https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega</a>
</li>

<li>Why the EGA can only use 16 of its 64 colours in 200-line modes<br />
<a href="https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/">https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/</a>
</li>

<li>How 16 colors saved PC gaming - the story of EGA graphics<br />
<a href="https://www.custompc.com/retro-tech/ega-graphics">https://www.custompc.com/retro-tech/ega-graphics</a>
</li>

<li>List of 16-bit computer color palettes<br />
<a href="https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes">https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes</a>
</li>

<li>Why were those colors chosen to be the default palette for 256-color VGA?<br />
<a href="https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga">https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga</a>
</li>

<li>VGA Color Palettes<br />
<a href="https://www.fountainware.com/EXPL/vga_color_palettes.htm">https://www.fountainware.com/EXPL/vga_color_palettes.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page<br />
<a href="http://www.osdever.net/FreeVGA/vga/vga.htm">http://www.osdever.net/FreeVGA/vga/vga.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page - sequencer<br />
<a href="http://www.osdever.net/FreeVGA/vga/seqreg.htm">http://www.osdever.net/FreeVGA/vga/seqreg.htm</a>
</li>

<li>VGA Basics<br />
<a href="http://www.brackeen.com/vga/basics.html">http://www.brackeen.com/vga/basics.html</a>
</li>

<li>Introduction to VGA Mode 'X'<br />
<a href="https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html">https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html</a>
</li>

<li>VGA Mode-X<br />
<a href="https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp">https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp</a>
</li>

<li>Mode-X: 256-Color VGA Magic<br />
<a href="https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf">https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf</a>
</li>

<li>Instruction Format in 8086 Microprocessor<br />
<a href="https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx">https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

