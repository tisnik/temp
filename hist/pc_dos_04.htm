<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Krátké shrnutí předchozí části &ndash; korektní vykreslení všech sudých i lichých řádků rastrového obrázku</a></p>
<p><a href="#k02">2. Řízení způsobu zobrazení barev kartou CGA ovládáním portu 3D9</a></p>
<p><a href="#k03">3. Nastavení korektní barvové palety a vykreslení rastrového obrázku</a></p>
<p><a href="#k04">4. Úplný zdrojový kód aplikace, která zobrazí rastrový obrázek i s&nbsp;korektní barvovou paletou</a></p>
<p><a href="#k05">5. Změna intenzity všech barev na obrazovce</a></p>
<p><a href="#k06">6. Úplný zdrojový kód aplikace pro změnu intenzity barev na obrazovce</a></p>
<p><a href="#k07">7. Postupná změna barvy pozadí (16 různých možností)</a></p>
<p><a href="#k08">8. Úplný zdrojový kód příkladu pro postupnou změnu barev pozadí</a></p>
<p><a href="#k09">*** 9. Programové vykreslení jediného pixelu v&nbsp;monochromatickém barvovém režimu</a></p>
<p><a href="#k10">*** 10. Výpočet adresy pro zápis pixelu</a></p>
<p><a href="#k11">*** 11. Výpočet masky pixelu a vlastní vykreslení</a></p>
<p><a href="#k12">12. Úplný kód příkladu, který po svém spuštění vykreslí diagonální úsečku z&nbsp;jednotlivých pixelů</a></p>
<p><a href="#k13">*** 13. První optimalizace: realizace násobení 8&times;8 bitů namísto 16&times;16 bitů</a></p>
<p><a href="#k14">*** 14. Náhrada násobení za bitové posuny</a></p>
<p><a href="#k15">*** 15. Výsledný zdrojový kód</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Krátké shrnutí předchozí části &ndash; korektní vykreslení všech sudých i lichých řádků rastrového obrázku</h2>

<img src="https://i.iinfo.cz/images/132/pc-03-5.webp" class="image-1128193" width="640" height="400" alt="&#160;" title="Autor: tisnik, authors of Golden Axe, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Statický rastrový obrázek, který budeme postupně vykreslovat.</i></p>

<a href="https://www.root.cz/obrazek/1128196/"><img src="https://i.iinfo.cz/images/132/pc-03-8-prev.webp" class="image-1128196" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/132/pc-03-8-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/132/pc-03-8-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of Golden Axe, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 2: Korektní vykreslení jak lichých, tak i sudých řádků.</i></p>

<pre>
<i>; Vykresleni rastroveho obrazku ziskaneho z binarnich dat.</i>
<i>; Korektni vykresleni vsech sudych i lichych radku obrazku.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o gfx_4.com gfx_4_image.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o gfx_4.com gfx_4_image.asm</i>


<i>;-----------------------------------------------------------------------------</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

<strong>start</strong>:
        gfx_mode 4      <i>; nastaveni grafickeho rezimu 320x200 se ctyrmi barvami</i>

        mov ax, cs
        mov ds, ax
        mov si, image   <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>

        mov ax, 0xb800
        mov es, ax
        mov di, 0       <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        call move_half_image

        mov si, image+80; adresa prvniho pixelu na DRUHEM radku
        mov di, 8192    <i>; druha "stranka" video RAM</i>
        call move_half_image

        wait_key
        exit

move_half_image:
        mov bl, 100     <i>; pocitadlo radku</i>
outer_loop:
        mov cx, 80/2    <i>; velikost bloku ve slovech</i>
        rep movsw       <i>; prenest jeden obrazovy radek</i>
        add si, 80      <i>; preskocit lichy/sudy radek</i>
        dec bl
        jnz outer_loop  <i>; opakovat smycku BL-krat</i>
        ret


<strong>image</strong>:
    incbin "image.bin"
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Řízení způsobu zobrazení barev kartou CGA ovládáním portu 3D9</h2>

<p>Připomeňme si, že v&nbsp;grafickém režimu s&nbsp;rozlišením 320&times;200 a
čtyřmi barvami bylo možné zvolit barvovou paletu. Tato paleta však nemohla být
libovolná (naproti tomu v&nbsp;textovém režimu je možné použít šestnáct barev),
protože existovaly pouze dvě fixní barvové palety, přičemž při výběru barev se
IBM skutečně &bdquo;předvedla&ldquo;, protože její nevkusná barevná schémata
byla prakticky nepoužitelná :-) První paleta fixně obsahovala barvy zelenou,
červenou a hnědou (<i>red</i>, <i>green</i>, <i>brown</i> &ndash; ovšem již
víme, že hnědá byla tvořena speciálním obvodem v&nbsp;monitoru z&nbsp;tmavě
žluté), druhá paleta barvy azurovou, fialovou a bílou (<i>cyan</i>,
<i>magenta</i>, <i>white</i>). Je patrné, že obě palety se liší pouze přidáním
modré barvové složky.</p>

<p>Pozadí, tedy čtvrtá barva, mohla být zvolena libovolně,
resp.&nbsp;z&nbsp;nabídky CGA &ndash; tedy jedna z&nbsp;patnácti možných barev.
Navíc bylo možné ovlivnit i intenzitu barev popředí &ndash; zvýšit či snížit ji
o 33%.</p>

<p>Volba barvové palety, barvy pozadí i intenzity barev, se provádí zápisem na
port dostupný na adrese 3d9. Význam jednotlivých bitů je následující:</p>

<table>
<tr><th>Bit</th><th>Význam v&nbsp;textovém režimu</th><th>Význam v&nbsp;grafických režimech</th></tr>
<tr><td>0-3</td><td>barva okraje</td><td>barva pozadí (pro pixely s&nbsp;nulovou hodnotou)</td></tr>
<tr><td>4</td><td>intenzita pozadí</td><td>intenzita pixelů (pro rozlišení 320&times;200)</td></tr>
<tr><td>5</td><td>&times;</td><td>&nbsp;</td><td>&bdquo;modrá&ldquo; varianta barvové palety</td></tr>
<tr><td>6</td><td>&times;</td><td>&times;</td></tr>
<tr><td>7</td><td>&times;</td><td>&times;</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Nastavení korektní barvové palety a vykreslení rastrového obrázku</h2>

<p>Pro nastavení barvové palety bude nutné změnit hodnoty bitů řídicího
registru grafické karty CGA. Tyto bity jsou ovladatelné přes port dostupný
(z&nbsp;pohledu mikroprocesoru) na adrese 3d9. Pro zápis na tento port (ale
samozřejmě i na jakýkoli jiný port) se používá instrukce <strong>OUT</strong>.
Ta nabízí několik adresovacích režimů:</p>

<table>
<tr><th>Varianta</th><th>Stručný popis</th></tr>
<tr><td>imm8, al</td><td>zápis hodnoty uložené v&nbsp;registru AL na osmibitový port s&nbsp;uvedenou osmibitovou adresou</td></tr>
<tr><td>imm8, ax</td><td>zápis hodnoty uložené v&nbsp;registru AX na šestnáctibitový port s&nbsp;uvedenou osmibitovou adresou</td></tr>
<tr><td>dx, al  </td><td>zápis hodnoty uložené v&nbsp;registru AL na osmibitový port, jehož adresa je uložena v&nbsp;registru DX </td></tr>
<tr><td>dx, ax  </td><td>zápis hodnoty uložené v&nbsp;registru AX na šestnáctibitový port, jehož adresa je uložena v&nbsp;registru DX</td></tr>
</table>

<p>První dvě instrukce jsou sice kratší z&nbsp;pohledu velikosti kódu, ale
trvají delší dobu. To nás ale vlastně nemusí trápit, protože porty karty CGA
neleží v&nbsp;rozsahu 0-FF, ale výše (3d9), takže jsme stejně nuceni použít
variantu s&nbsp;registrem <strong>DX</strong>, ve kterém je adresa portu
uložena. Potřebujeme vynulovat pátý bit (tedy zakázat modrou složku
v&nbsp;barvách), takže celá sekvence instrukcí, která změní barvovou paletu,
bude vypadat následovně:</p>

<pre>
mov dx, 0x3d9   <i>; port s rizenim graficke palety</i>
mov al, 0x10    <i>; zmena barevne palety</i>
out dx, al      <i>; pres port 0x3d9</i>
</pre>

<p><div class="rs-tip-major">Poznámka: na porty 0-FF jsou mapovány řídicí a
stavové registry základních obvodů IBM PC, tedy například časovače, řadiče DMA,
nepřímo též ovládání klávesnice atd. Prozatím se jimi nebudeme zabývat, ale
později budeme tyto porty používat právě pro práci s&nbsp;klávesnicí a taktéž
pro ovládání PC Speakeru (abych vám trošku zkazil hudební sluch).</div></p>

<a href="https://www.root.cz/obrazek/1128197/"><img src="https://i.iinfo.cz/images/132/pc-03-9-prev.webp" class="image-1128197" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/132/pc-03-9-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/132/pc-03-9-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of Golden Axe, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 3: Obrázek s&nbsp;korektní barvovou paletou (porovnejte
s&nbsp;originálem &ndash; obrázkem číslo 1).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úplný zdrojový kód aplikace, která zobrazí rastrový obrázek i s&nbsp;korektní barvovou paletou</h2>

<p>Podobně, jako tomu bylo i v&nbsp;předchozích dvou částech tohoto seriálu, si
nyní ukážeme úplný zdrojový kód jednoduché aplikace, která po svém spuštění
vykreslí rastrový obrázek v&nbsp;rozlišení 320&times;200 pixelů a čtyřmi
barvami i s&nbsp;korektní barvovou paletou:</p>

<pre>
<i>; Vykresleni rastroveho obrazku ziskaneho z binarnich dat.</i>
<i>; Korektni vykresleni vsech sudych i lichych radku obrazku.</i>
<i>; Nastaveni barvove palety.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o gfx_4.com gfx_4_image.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o gfx_4.com gfx_4_image.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 4      <i>; nastaveni grafickeho rezimu 320x200 se ctyrmi barvami</i>
&nbsp;
        mov dx, 0x3d9   <i>; port s rizenim graficke palety</i>
        mov al, 0x10    <i>; zmena barevne palety</i>
        out dx, al      <i>; pres port 0x3d9</i>
&nbsp;
        mov ax, cs
        mov ds, ax
        mov si, image   <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
&nbsp;
        mov ax, 0xb800
        mov es, ax
        mov di, 0       <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        call move_half_image
&nbsp;
        mov si, image+80; adresa prvniho pixelu na DRUHEM radku
        mov di, 8192    <i>; druha "stranka" video RAM</i>
        call move_half_image
&nbsp;
        wait_key
        exit
&nbsp;
<strong>move_half_image</strong>:
        mov bl, 100     <i>; pocitadlo radku</i>
<strong>outer_loop</strong>:
        mov cx, 80/2    <i>; velikost bloku ve slovech</i>
        rep movsw       <i>; prenest jeden obrazovy radek</i>
        add si, 80      <i>; preskocit lichy/sudy radek</i>
        dec bl
        jnz outer_loop  <i>; opakovat smycku BL-krat</i>
        ret
&nbsp;
&nbsp;
<strong>image</strong>:
    incbin "image.bin"
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Změna intenzity všech barev na obrazovce</h2>

<p>Bitem číslo 4 na portu 3d9 se řídí intenzita všech barev na obrazovce. Jedná
se většinou o zbytečnou volbu, protože nízké intenzity všech barev
(v&nbsp;grafickém režimu) povedou k&nbsp;málo kontrastnímu obrazu, ovšem nic
nám pochopitelně nebrání v&nbsp;tom si tuto volbu otestovat:</p>

<pre>
mov dx, 0x3d9   <i>; port s rizenim graficke palety</i>
mov al, 0x00    <i>; zmena barevne palety, nizka intenzita</i>
out dx, al      <i>; pres port 0x3d9</i>
</pre>

<p>Výsledný obrázek by měl vypadat zhruba následovně:</p>

*** image ***
<p><i>Obrázek 4: Obrázek po přepnutí barvové palety tak, aby se používaly nízké
intenzity barev.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Úplný zdrojový kód aplikace pro změnu intenzity barev na obrazovce</h2>

<p>Opět si pro jistotu uvedeme úplný zdrojový kód příkladu, který po svém
spuštění zobrazí (stále stejný) rastrový obrázek, nyní ovšem s&nbsp;nízkou
intenzitou barev:</p>

<pre>
<i>; Vykresleni rastroveho obrazku ziskaneho z binarnich dat.</i>
<i>; Korektni vykresleni vsech sudych i lichych radku obrazku.</i>
<i>; Nastaveni barvove palety.</i>
<i>; Nastaveni nizke intenzity.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o gfx_4.com gfx_4_image.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o gfx_4.com gfx_4_image.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 4      <i>; nastaveni grafickeho rezimu 320x200 se ctyrmi barvami</i>
&nbsp;
        mov dx, 0x3d9   <i>; port s rizenim graficke palety</i>
        mov al, 0x00    <i>; zmena barevne palety, nizka intenzita</i>
        out dx, al      <i>; pres port 0x3d9</i>
&nbsp;
        mov ax, cs
        mov ds, ax
        mov si, image   <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
&nbsp;
        mov ax, 0xb800
        mov es, ax
        mov di, 0       <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        call move_half_image
&nbsp;
        mov si, image+80; adresa prvniho pixelu na DRUHEM radku
        mov di, 8192    <i>; druha "stranka" video RAM</i>
        call move_half_image
&nbsp;
        wait_key
        exit
&nbsp;
<strong>move_half_image</strong>:
        mov bl, 100     <i>; pocitadlo radku</i>
<strong>outer_loop</strong>:
        mov cx, 80/2    <i>; velikost bloku ve slovech</i>
        rep movsw       <i>; prenest jeden obrazovy radek</i>
        add si, 80      <i>; preskocit lichy/sudy radek</i>
        dec bl
        jnz outer_loop  <i>; opakovat smycku BL-krat</i>
        ret
&nbsp;
&nbsp;
<strong>image</strong>:
    incbin "image.bin"
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Postupná změna barvy pozadí (16 různých možností)</h2>

<p>Zajímavější jsou bity 0-3 portu 3d9. Těmito bity se totiž v&nbsp;grafických
režimech určuje barva pozadí (tedy barva pixelů s&nbsp;nulovou hodnotou),
nezávisle na ostatních třech barvách popředí (<i>foreground</i>).
V&nbsp;textových režimech se pomocí těchto bitů určuje pouze barva okraje
obrazovky, protože popředí i pozadí znaků je řešeno odlišnou technikou.</p>

<p>Vraťme se však ke grafickým režimům a barvě pozadí. Velmi jednoduchým
způsobem lze implementovat programovou smyčku, která po stisku libovolné
klávesy (přesněji řečeno <i>skoro</i> libovolné klávesy &ndash; Shift atd. se
nepočítá) změní barvu pozadí a umožní nám tak projít všemi šestnácti možnostmi.
Realizace této smyčky není ve skutečnosti příliš složitá, jak je to ostatně
patrné i z&nbsp;následující sekvence osmi programových řádků:</p>

<pre>
        mov cl, 0x10    <i>; zmena palety, vychozi intenzita barev</i>
        mov dx, 0x3d9   <i>; port s rizenim graficke palety</i>
<strong>opak</strong>:
        mov al, cl      <i>; hodnota zapisovana na port 0x3d9 do registru AL</i>
        inc cl          <i>; dalsi barva</i>
        out dx, al      <i>; pres port 0x3d9</i>
        wait_key        <i>; cekani na klavesu</i>
        jmp opak        <i>; opakovat cele znovu</i>
</pre>

<p><div class="rs-tip-major">Poznámka: bylo by navíc možné přidat podmínku pro
to, aby se po šestnáctém stisku klávesy aplikace vrátila do výchozího stavu, to
však pro naše jednoduché demo není zcela nutné.</div></p>

<p>Podívejme se na několik výsledných obrázků tak, jak je aplikace postupně
zobrazí:</p>

*** image ***
<p><i>Obrázek 5: Na pozadí je použita barva číslo 1.</i></p>

*** image ***
<p><i>Obrázek 6: Na pozadí je použita barva číslo 2.</i></p>

*** image ***
<p><i>Obrázek 7: Na pozadí je použita barva číslo 3.</i></p>

*** image ***
<p><i>Obrázek 8: Na pozadí je použita barva číslo 4.</i></p>

<p>...a tak dále...</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód příkladu pro postupnou změnu barev pozadí</h2>

<p>Opět se, nyní již bez dalšího podrobnějšího popisu, podívejme na výsledný
program:</p>

<pre>
<i>; Vykresleni rastroveho obrazku ziskaneho z binarnich dat.</i>
<i>; Korektni vykresleni vsech sudych i lichych radku obrazku.</i>
<i>; Nastaveni barvove palety.</i>
<i>; Nastaveni nizke intenzity.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o gfx_4.com gfx_4_image.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o gfx_4.com gfx_4_image.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 4      <i>; nastaveni grafickeho rezimu 320x200 se ctyrmi barvami</i>
&nbsp;
        mov ax, cs
        mov ds, ax
        mov si, image   <i>; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku</i>
&nbsp;
        mov ax, 0xb800
        mov es, ax
        mov di, 0       <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        call move_half_image
&nbsp;
        mov si, image+80; adresa prvniho pixelu na DRUHEM radku
        mov di, 8192    <i>; druha "stranka" video RAM</i>
        call move_half_image
&nbsp;
        mov cl, 0x10    <i>; zmena palety, vychozi intenzita barev</i>
        mov dx, 0x3d9   <i>; port s rizenim graficke palety</i>
<strong>opak</strong>:
        mov al, cl      <i>; hodnota zapisovana na port 0x3d9 do registru AL</i>
        inc cl          <i>; dalsi barva</i>
        out dx, al      <i>; pres port 0x3d9</i>
        wait_key        <i>; cekani na klavesu</i>
        jmp opak        <i>; opakovat cele znovu</i>
        exit            <i>; (sem se rizeni nedostane)</i>
&nbsp;
<strong>move_half_image</strong>:
        mov bl, 100     <i>; pocitadlo radku</i>
<strong>outer_loop</strong>:
        mov cx, 80/2    <i>; velikost bloku ve slovech</i>
        rep movsw       <i>; prenest jeden obrazovy radek</i>
        add si, 80      <i>; preskocit lichy/sudy radek</i>
        dec bl
        jnz outer_loop  <i>; opakovat smycku BL-krat</i>
        ret
&nbsp;
&nbsp;
<strong>image</strong>:
    incbin "image.bin"
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Programové vykreslení jediného pixelu v&nbsp;monochromatickém barvovém režimu</h2>

<pre>
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice (staci len BL)</i>
putpixel:
        ...
        ...
        ...
        ret
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Výpočet adresy pro zápis pixelu</h2>

<p></p>

<pre>
        mov dx, 0xb800     <i>; zacatek prvni stranky Video RAM</i>
        test bx, 1         <i>; test, zda se jedna o sudy nebo lichy radek na obrazovce</i>
        jz odd_line
        add dx, 8192/16    <i>; přechod na druhou stránku Video RAM</i>
odd_line:
        mov es, dx         <i>; nyni obsahuje ES bud prvni stranku Video RAM nebo stranku druhou</i>
</pre>

<pre>
        shr ax, 1
        shr ax, 1
        shr ax, 1          <i>; x/8</i>
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
</pre>

<pre>
        mov ax, bx         <i>; y-ova souradnice</i>
        shr ax, 1          <i>; ignorovat nejnizsi bit s lichym/sudym radkem</i>
        mov dx, 80         <i>; vynasobit delkou radku v bajtech</i>
        mul dx             <i>; AX - relativni posun v y-ovem smeru</i>
</pre>

<pre>
        add di, ax         <i>; pricist vertikalni posun k posunu horizontalnimu</i>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výpočet masky pixelu a vlastní vykreslení</h2>

<pre>
        mov cl, al
        and cl, 7          <i>; pouze spodni 3 bity x-ove souradnice</i>
</pre>

<pre>
        mov al, 0x80       <i>; vypocitat masku pixelu</i>
        shr al, cl
</pre>

<pre>
        stosb              <i>; vlastni vykresleni pixelu</i>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Úplný kód příkladu, který po svém spuštění vykreslí diagonální úsečku z&nbsp;jednotlivých pixelů</h2>

<pre>
<i>; Vykresleni pixelu, zakladni varianta se 16bitovym nasobenim.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o gfx_6.com gfx_6_putpixel_1.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o gfx_6.com gfx_6_putpixel_1.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 6      <i>; nastaveni grafickeho rezimu 320x200 se ctyrmi barvami</i>
&nbsp;
        mov ax, 0
<strong>opak</strong>:
        mov bx, ax      <i>; y-ová souřadnice</i>
        push ax
        call putpixel   <i>; vykreslení pixelu</i>
        pop ax
        inc ax          <i>; pusun x+=1, y+=1</i>
        cmp ax, 200     <i>; hranice obrazovky?</i>
        jne opak        <i>; ne-opakujeme</i>
&nbsp;
        wait_key
        exit
&nbsp;
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice (staci len BL)</i>
<strong>putpixel</strong>:
        mov dx, 0xb800     <i>; zacatek prvni stranky Video RAM</i>
        test bx, 1         <i>; test, zda se jedna o sudy nebo lichy radek na obrazovce</i>
        jz odd_line
        add dx, 8192/16
<strong>odd_line</strong>:
        mov es, dx         <i>; nyni obsahuje ES bud prvni stranku Video RAM nebo stranku druhou</i>
&nbsp;
        mov cl, al
        and cl, 7          <i>; pouze spodni 3 bity x-ove souradnice</i>
&nbsp;
        shr ax, 1
        shr ax, 1
        shr ax, 1          <i>; x/8</i>
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
&nbsp;
        mov ax, bx         <i>; y-ova souradnice</i>
        shr ax, 1          <i>; ignorovat nejnizsi bit s lichym/sudym radkem</i>
        mov dx, 80         <i>; vynasobit delkou radku v bajtech</i>
        mul dx             <i>; AX - relativni posun v y-ovem smeru</i>
&nbsp;
        add di, ax         <i>; pricist vertikalni posun k posunu horizontalnimu</i>
&nbsp;
        mov al, 0x80       <i>; vypocitat masku pixelu</i>
        shr al, cl
        stosb              <i>; vlastni vykresleni pixelu</i>
&nbsp;
        ret
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. První optimalizace: realizace násobení 8&times;8 bitů namísto 16&times;16 bitů</h2>

<pre>
        mov al, bl         <i>; y-ova souradnice</i>
        shr al, 1          <i>; ignorovat nejnizsi bit s lichym/sudym radkem</i>
        mov dl, 80         <i>; vynasobit delkou radku v bajtech</i>
        mul dl             <i>; AX - relativni posun v y-ovem smeru</i>
&nbsp;
        add di, ax         <i>; pricist vertikalni posun k posunu horizontalnimu</i>
</pre>

<pre>
<i>; Vykresleni pixelu, varianta s osmibitovym nasobenim.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o gfx_6.com gfx_6_putpixel_2.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o gfx_6.com gfx_6_putpixel_2.asm</i>


<i>;-----------------------------------------------------------------------------</i>

<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro

<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro

<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 6      <i>; nastaveni grafickeho rezimu 320x200 se ctyrmi barvami</i>

        mov ax, 0
opak:
        mov bx, ax      <i>; y-ová souřadnice</i>
        push ax
        call putpixel   <i>; vykreslení pixelu</i>
        pop ax
        inc ax          <i>; pusun x+=1, y+=1</i>
        cmp ax, 200     <i>; hranice obrazovky?</i>
        jne opak        <i>; ne-opakujeme</i>

        wait_key
        exit

<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice (staci len BL)</i>
putpixel:
        mov dx, 0xb800     <i>; zacatek prvni stranky Video RAM</i>
        test bx, 1         <i>; test, zda se jedna o sudy nebo lichy radek na obrazovce</i>
        jz odd_line
        add dx, 8192/16
odd_line:
        mov es, dx         <i>; nyni obsahuje ES bud prvni stranku Video RAM nebo stranku druhou</i>

        mov cl, al
        and cl, 7          <i>; pouze spodni 3 bity x-ove souradnice</i>

        shr ax, 1
        shr ax, 1
        shr ax, 1          <i>; x/8</i>
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>

        mov al, bl         <i>; y-ova souradnice</i>
        shr al, 1          <i>; ignorovat nejnizsi bit s lichym/sudym radkem</i>
        mov dl, 80         <i>; vynasobit delkou radku v bajtech</i>
        mul dl             <i>; AX - relativni posun v y-ovem smeru</i>

        add di, ax         <i>; pricist vertikalni posun k posunu horizontalnimu</i>

        mov al, 0x80       <i>; vypocitat masku pixelu</i>
        shr al, cl
        stosb              <i>; vlastni vykresleni pixelu</i>

        ret
</pre>


<p><a name="k14"></a></p>
<h2 id="k14">14. Náhrada násobení za bitové posuny</h2>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Výsledný zdrojový kód</h2>

<pre>
; Vykresleni pixelu, varianta bez nasobeni.
;
; preklad pomoci:
;     nasm -f bin -o gfx_6.com gfx_6_putpixel_3.asm
;
; nebo pouze:
;     nasm -o gfx_6.com gfx_6_putpixel_3.asm


;-----------------------------------------------------------------------------

; ukonceni procesu a navrat do DOSu
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

; vyprazdneni bufferu klavesnice a cekani na klavesu
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

; nastaveni grafickeho rezimu
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

;-----------------------------------------------------------------------------
org  0x100        ; zacatek kodu pro programy typu COM (vzdy se zacina na 256)

start:
        gfx_mode 6      ; nastaveni grafickeho rezimu 320x200 se ctyrmi barvami

        mov ax, 0
opak:
        mov bx, ax      ; y-ová souřadnice
        push ax
        call putpixel   ; vykreslení pixelu
        pop ax
        inc ax          ; pusun x+=1, y+=1
        cmp ax, 200     ; hranice obrazovky?
        jne opak        ; ne-opakujeme

        wait_key
        exit

; Vykresleni pixelu
; AX - x-ova souradnice
; BX - y-ova souradnice (staci len BL)
putpixel:
        mov dx, 0xb800     ; zacatek prvni stranky Video RAM
        test bx, 1         ; test, zda se jedna o sudy nebo lichy radek na obrazovce
        jz odd_line
        add dx, 8192/16
odd_line:
        mov es, dx         ; nyni obsahuje ES bud prvni stranku Video RAM nebo stranku druhou

        mov cl, al
        and cl, 7          ; pouze spodni 3 bity x-ove souradnice

        shr ax, 1
        shr ax, 1
        shr ax, 1          ; x/8
        mov di, ax         ; horizontalni posun pocitany v bajtech

        mov ax, bx         ; y-ova souradnice
        and al, 0xfe       ; nejnizsi bit urcuje lichy/sudy radek -> nyni ignorovat
        shl ax, 1          ; y*4
        shl ax, 1          ; y*8
        shl ax, 1          ; y*16
        add di, ax         ; pricist cast y-oveho posunu
        shl ax, 1          ; y*32
        shl ax, 1          ; y*64
        add di, ax         ; pricist zbytek y-oveho posunu
                           ; -> y*16 + y*64 = y*80

        mov al, 0x80       ; vypocitat masku pixelu
        shr al, cl
        stosb              ; vlastni vykresleni pixelu

        ret
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
; Vykresleni pixelu, varianta bez nasobeni.
; Pixely se prekresli pres obrazek.
;
; preklad pomoci:
;     nasm -f bin -o gfx_6.com gfx_6_putpixel_4.asm
;
; nebo pouze:
;     nasm -o gfx_6.com gfx_6_putpixel_4.asm


;-----------------------------------------------------------------------------

; ukonceni procesu a navrat do DOSu
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

; vyprazdneni bufferu klavesnice a cekani na klavesu
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

; nastaveni grafickeho rezimu
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

;-----------------------------------------------------------------------------
org  0x100        ; zacatek kodu pro programy typu COM (vzdy se zacina na 256)

start:
        gfx_mode 6      ; nastaveni grafickeho rezimu 320x200 se ctyrmi barvami

        mov ax, cs
        mov ds, ax
        mov si, image   ; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku

        mov ax, 0xb800
        mov es, ax
        mov di, 0       ; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM

        call move_half_image

        mov si, image+80; adresa prvniho pixelu na DRUHEM radku
        mov di, 8192    ; druha "stranka" video RAM
        call move_half_image

        mov ax, 0
opak:
        mov bx, ax      ; y-ová souřadnice
        push ax
        add ax, 30
        call putpixel   ; vykreslení pixelu
        pop ax
        inc ax          ; pusun x+=1, y+=1
        cmp ax, 200     ; hranice obrazovky?
        jne opak        ; ne-opakujeme

        wait_key
        exit

; Vykresleni pixelu
; AX - x-ova souradnice
; BX - y-ova souradnice (staci len BL)
putpixel:
        mov dx, 0xb800     ; zacatek prvni stranky Video RAM
        test bx, 1         ; test, zda se jedna o sudy nebo lichy radek na obrazovce
        jz odd_line
        add dx, 8192/16
odd_line:
        mov es, dx         ; nyni obsahuje ES bud prvni stranku Video RAM nebo stranku druhou

        mov cl, al
        and cl, 7          ; pouze spodni 3 bity x-ove souradnice

        shr ax, 1
        shr ax, 1
        shr ax, 1          ; x/8
        mov di, ax         ; horizontalni posun pocitany v bajtech

        mov ax, bx         ; y-ova souradnice
        and al, 0xfe       ; nejnizsi bit urcuje lichy/sudy radek -> nyni ignorovat
        shl ax, 1          ; y*4
        shl ax, 1          ; y*8
        shl ax, 1          ; y*16
        add di, ax         ; pricist cast y-oveho posunu
        shl ax, 1          ; y*32
        shl ax, 1          ; y*64
        add di, ax         ; pricist zbytek y-oveho posunu
                           ; -> y*16 + y*64 = y*80

        mov al, 0x80       ; vypocitat masku pixelu
        shr al, cl
        stosb              ; vlastni vykresleni pixelu

        ret


move_half_image:
        mov bl, 100     ; pocitadlo radku
outer_loop:
        mov cx, 80/2    ; velikost bloku ve slovech
        rep movsw       ; prenest jeden obrazovy radek
        add si, 80      ; preskocit lichy/sudy radek
        dec bl
        jnz outer_loop  ; opakovat smycku BL-krat
        ret


image:
    incbin "image.bin"
</pre>


<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
; Vykresleni pixelu, varianta bez nasobeni. Korektni maskovani.
; Pixely se prekresli pres obrazek.
;
; preklad pomoci:
;     nasm -f bin -o gfx_6.com gfx_6_putpixel_4.asm
;
; nebo pouze:
;     nasm -o gfx_6.com gfx_6_putpixel_4.asm


;-----------------------------------------------------------------------------

; ukonceni procesu a navrat do DOSu
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

; vyprazdneni bufferu klavesnice a cekani na klavesu
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

; nastaveni grafickeho rezimu
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

;-----------------------------------------------------------------------------
org  0x100        ; zacatek kodu pro programy typu COM (vzdy se zacina na 256)

start:
        gfx_mode 6      ; nastaveni grafickeho rezimu 320x200 se ctyrmi barvami

        mov ax, cs
        mov ds, ax
        mov si, image   ; nyni DS:SI obsahuje adresu prvniho bajtu v obrazku

        mov ax, 0xb800
        mov es, ax
        mov di, 0       ; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM

        call move_half_image

        mov si, image+80; adresa prvniho pixelu na DRUHEM radku
        mov di, 8192    ; druha "stranka" video RAM
        call move_half_image

        mov ax, 0
opak:
        mov bx, ax      ; y-ová souřadnice
        push ax
        add ax, 30
        call putpixel   ; vykreslení pixelu
        pop ax
        inc ax          ; pusun x+=1, y+=1
        cmp ax, 200     ; hranice obrazovky?
        jne opak        ; ne-opakujeme

        wait_key
        exit

; Vykresleni pixelu
; AX - x-ova souradnice
; BX - y-ova souradnice (staci len BL)
putpixel:
        mov dx, 0xb800     ; zacatek prvni stranky Video RAM
        test bx, 1         ; test, zda se jedna o sudy nebo lichy radek na obrazovce
        jz odd_line
        add dx, 8192/16
odd_line:
        mov es, dx         ; nyni obsahuje ES bud prvni stranku Video RAM nebo stranku druhou

        mov cl, al
        and cl, 7          ; pouze spodni 3 bity x-ove souradnice

        shr ax, 1
        shr ax, 1
        shr ax, 1          ; x/8
        mov di, ax         ; horizontalni posun pocitany v bajtech

        mov ax, bx         ; y-ova souradnice
        and al, 0xfe       ; nejnizsi bit urcuje lichy/sudy radek -> nyni ignorovat
        shl ax, 1          ; y*4
        shl ax, 1          ; y*8
        shl ax, 1          ; y*16
        add di, ax         ; pricist cast y-oveho posunu
        shl ax, 1          ; y*32
        shl ax, 1          ; y*64
        add di, ax         ; pricist zbytek y-oveho posunu
                           ; -> y*16 + y*64 = y*80

        mov al, 0x80       ; vypocitat masku pixelu
        shr al, cl
        or [es:di], al     ; vlastni vykresleni pixelu

        ret


move_half_image:
        mov bl, 100     ; pocitadlo radku
outer_loop:
        mov cx, 80/2    ; velikost bloku ve slovech
        rep movsw       ; prenest jeden obrazovy radek
        add si, 80      ; preskocit lichy/sudy radek
        dec bl
        jnz outer_loop  ; opakovat smycku BL-krat
        ret


image:
    incbin "image.bin"
</pre>


<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad pomocí assembleru <strong>NASM</strong>, byly uložen do Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>hello.asm</td><td>program typu &bdquo;Hello world&ldquo; naprogramovaný v&nbsp;assembleru pro systém DOS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm</a></td></tr>
<tr><td> 2</td><td>hello_shorter.asm</td><td>kratší varianta výskoku z&nbsp;procesu zpět do DOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm</a></td></tr>
<tr><td> 3</td><td>hello_wait.asm</td><td>čekání na stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm</a></td></tr>
<tr><td> 4</td><td>hello_macros.asm</td><td>realizace jednotlivých částí programu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>gfx_4_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm</a></td></tr>
<tr><td> 6</td><td>gfx_6_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm</a></td></tr>
<tr><td> 7</td><td>gfx_4_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm</a></td></tr>
<tr><td> 8</td><td>gfx_6_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>gfx_6_fill_1.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm</a></td></tr>
<tr><td>10</td><td>gfx_6_fill_2.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, varianta s&nbsp;instrukcí <strong>LOOP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm</a></td></tr>
<tr><td>11</td><td>gfx_6_fill_3.asm</td><td>vyplnění obrazovky instrukcí <strong>REP STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm</a></td></tr>
<tr><td>12</td><td>gfx_6_fill_4.asm</td><td>vyplnění obrazovky, synchronizace vykreslování s&nbsp;paprskem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>gfx_4_image_1.asm</td><td>vykreslení rastrového obrázku získaného z&nbsp;binárních dat, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm</a></td></tr>
<tr><td>14</td><td>gfx_4_image_2.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm</a></td></tr>
<tr><td>15</td><td>gfx_4_image_3.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm</a></td></tr>
<tr><td>16</td><td>gfx_4_image_4.asm</td><td>korektní vykreslení všech sudých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm</a></td></tr>
<tr><td>17</td><td>gfx_4_image_5.asm</td><td>korektní vykreslení všech sudých i lichých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>gfx_4_image_6.asm</td><td>nastavení barvové palety před vykreslením obrázku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm</a></td></tr>
<tr><td>19</td><td>gfx_4_image_7.asm</td><td>nastavení barvové palety před vykreslením obrázku, snížená intenzita barev</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm</a></td></tr>
<tr><td>20</td><td>gfx_4_image_8.asm</td><td>postupná změna barvy pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>gfx_6_putpixel_1.asm</td><td>vykreslení pixelu, základní varianta se 16bitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm</a></td></tr>
<tr><td>22</td><td>gfx_6_putpixel_2.asm</td><td>vykreslení pixelu, varianta s&nbsp;osmibitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm</a></td></tr>
<tr><td>23</td><td>gfx_6_putpixel_3.asm</td><td>vykreslení pixelu, varianta bez násobení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm</a></td></tr>
<tr><td>24</td><td>gfx_6_putpixel_4.asm</td><td>vykreslení pixelu přes obrázek, nekorektní chování (přepis obrázku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm</a></td></tr>
<tr><td>25</td><td>gfx_6_putpixel_5.asm</td><td>vykreslení pixelu přes obrázek, korektní varianta pro bílé pixely</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>6845 - Motorola CRT Controller<br />
<a href="https://stanislavs.org/helppc/6845.html">https://stanislavs.org/helppc/6845.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>DOSBox<br />
<a href="https://www.dosbox.com/">https://www.dosbox.com/</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Hercules Graphics Card (HCG)<br />
<a href="https://en.wikipedia.org/wiki/Hercules_Graphics_Card">https://en.wikipedia.org/wiki/Hercules_Graphics_Card</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf">https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://yassinebridi.github.io/asm-docs/8086_instruction_set.html">https://yassinebridi.github.io/asm-docs/8086_instruction_set.html</a>
</li>

<li>8088 MPH by Hornet + CRTC + DESiRE (final version)<br />
<a href="https://www.youtube.com/watch?v=hNRO7lno_DM">https://www.youtube.com/watch?v=hNRO7lno_DM</a>
</li>

<li>Area 5150 by CRTC &amp; Hornet (Party Version) / IBM PC+CGA Demo, Hardware Capture<br />
<a href="https://www.youtube.com/watch?v=fWDxdoRTZPc">https://www.youtube.com/watch?v=fWDxdoRTZPc</a>
</li>

<li>80x86 Integer Instruction Set Timings (8088 - Pentium)<br />
<a href="http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf">http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

