<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrté části seriálu o vývoji her a multimediálních dem určených pro slavnou a v mnoha ohledech přelomovou osmibitovou herní konzoli Nintendo Entertainment System (NES) se již (konečně) začneme zabývat jejími grafickými schopnostmi. Taktéž si ukážeme další možnosti poskytované assemblerem ca65.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. První seznámení s&nbsp;možnostmi PPU</a></p>
<p><a href="#k02">2. Řídicí registry PPU</a></p>
<p><a href="#k03">3. Nastavení barvové palety</a></p>
<p><a href="#k04">4. Zvýšení intenzity zvolené barvové složky</a></p>
<p><a href="#k05">5. Úplný zdrojový kód sedmého demonstračního příkladu</a></p>
<p><a href="#k06">6. Vylepšený zápis adresy barvové palety</a></p>
<p><a href="#k07">7. Úplný zdrojový kód osmého demonstračního příkladu</a></p>
<p><a href="#k08">8. Vymazání barvové palety ve formě makra</a></p>
<p><a href="#k09">9. Úplný zdrojový kód devátého demonstračního příkladu</a></p>
<p><a href="#k10">10. Vymazání barvové palety ve formě podprogramu</a></p>
<p><a href="#k11">11. Úplný zdrojový kód desátého demonstračního příkladu</a></p>
<p><a href="#k12">*** 12. Nastavení barev v&nbsp;barvové paletě z&nbsp;tabulkových dat</a></p>
<p><a href="#k13">13. Úplný zdrojový kód jedenáctého demonstračního příkladu</a></p>
<p><a href="#k14">*** 14. Refaktoring &ndash; specifikace adresy pro zápis barev s&nbsp;využitím makra</a></p>
<p><a href="#k15">*** 15. Úplný zdrojový kód dvanáctého demonstračního příkladu</a></p>
<p><a href="#k16">*** 16. Příprava pro zobrazení spritů</a></p>
<p><a href="#k17">17. Odkazy na předchozí části seriálu</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. První seznámení s&nbsp;možnostmi PPU</h2>

<p>Ve čtvrté části seriálu o vývoji her a multimediálních dem určených pro
slavnou a v&nbsp;mnoha ohledech přelomovou osmibitovou herní konzoli
<i>Nintendo Entertainment System</i> (<i>NES</i>) se již (konečně) začneme
zabývat jejími grafickými schopnostmi. Ukážeme si zejména práci
s&nbsp;barvovými paletami, ale taktéž si postupně připravíme kód napsaný
v&nbsp;assembleru, jenž bude určený pro vykreslení <i>spritů</i> &ndash;
protože právě pohyblivé sprity tvoří společně s&nbsp;pozadím
(<i>background</i>) celou grafickou herní scénu. Herní konzole NES totiž
neobsahuje podporu pro klasickou bitmapovou grafiku ani podporu textových
režimů &ndash; vše je nutné vykreslit přes sprity a pozadí, což jsou (velmi
zjednodušeně řečeno) indexy bitmapových &bdquo;dlaždic&ldquo; (<i>tiles</i>)
uložených v&nbsp;k&nbsp;tomu určených blocích paměti. Vše se navíc poněkud
komplikuje technologií mapování hodnot uložených v&nbsp;dlaždicích přes barvové
palety na výsledné barvy zobrazené na obrazovce.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Řídicí registry PPU</h2>

<p>Při práci s&nbsp;grafikou na herní konzoli NES je nutné nejprve provést
korektní inicializaci čipu PPU. Zejména je nutné nastavit barvovou paletu, což
nám umožní korektně navázat dalšími operacemi, například zobrazením pozadí,
zobrazením spritů atd. Čip PPU se ovládá přes několik řídicích registrů, které
jsou mapovány do adresového prostoru mikroprocesoru 6502. Všechny tyto řídicí
registry jsou pro přehlednost vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Registr</th><th>Adresa (CPU)</th><th>Stručný popis</th></tr>
<tr><td>PPUCTRL</td><td>$2000</td><td>povolení NMI, nastavení výšky spritů, nastavení dlaždic atd.</td></tr>
<tr><td>PPUMASK</td><td>$2001</td><td>zvýraznění vybrané barvy, povolení spritů, povolení pozadí atd.</td></tr>
<tr><td>PPUSTATUS</td><td>$2002</td><td>stav snímku (VBLANK), stav spritů (kolize)</td></tr>
<tr><td>OAMADDR</td><td>$2003</td><td>adresa pro čtení/zápis do OAM (Object Attribute Memory)</td></tr>
<tr><td>OAMDATA</td><td>$2004</td><td>zapisovaná/čtená data do/z OAM (Object Attribute Memory)</td></tr>
<tr><td>PPUSCROLL</td><td>$2005</td><td>použito pro horizontální i vertikální scrolling</td></tr>
<tr><td>PPUADDR</td><td>$2006</td><td>adresa pro čtení/zápis do paměti PPU</td></tr>
<tr><td>PPUDATA</td><td>$2007</td><td>zapisovaná/čtená data do/z paměti PPU</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: PPU se do určité míry podobá čipu ANTIC
použitého v&nbsp;osmibitových domácích mikropočítačích i herních konzolích
firmy Atari. Oba čipy totiž dokážou načítat data z&nbsp;paměti, což znamená, že
řídicí registry PPU mnohdy pouze obsahují ukazatele na tato data.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Nastavení barvové palety</h2>

<p>Jednou z&nbsp;prvních operací s&nbsp;PPU, kterou je nutné provést, je
nastavení barvové palety. Ve skutečnosti grafický subsystém NESu pracuje
s&nbsp;dvojicí palet, z&nbsp;nichž každá obsahuje šestnáct barev. První paleta
je určena pro pozadí, druhá pro sprity. Vzhledem k&nbsp;tomu, že každá barva je
zapsána v&nbsp;jednom bajtu, je celková velikost paměti pro uložení obou palet
rovna třiceti dvěma bajtům, které tvoří kontinuální blok, ovšem blok
v&nbsp;paměti dostupné PPU a nikoli mikroprocesoru.</p>

<img src="https://i.iinfo.cz/images/99/nes-architektura.png" class="image-576020" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="435" height="305" />
<p><i>Obrázek 1: Zjednodušené schéma architektury herní konzole NES.</i></p>

<p>Barvové palety jsou v&nbsp;paměti dostupné čipu PPU typicky uloženy na
adresách $3f00 až $3f1f. Ukažme si nyní, jakým způsobem se palety vynulují,
tj.&nbsp;jak se do nich uloží sekvence 32 kódů černých barev. Nejprve je nutné
čipu PPU sdělit, na jaké adresy se mají (v&nbsp;následujícím kroku) posílaná
data uložit &ndash; tato adresa se uloží do interního záchytného registru
(<i>latche</i>). Před vlastním posláním adresy je vhodné pro jistotu záchytný
registr inicializovat (aby PPU věděl, jak má zpracovat zápisy). Tato operace se
provede přečtením bajtu z&nbsp;řídicího registru <strong>PPUSTATUS</strong>,
což lze v&nbsp;assembleru realizovat snadno:</p>

<pre>
        <i>; vynulování barvové palety</i>
        lda PPUSTATUS <i>; reset záchytného registru</i>
</pre>

<p>Dále do čipu PPU pošleme adresu začátku barvových palet (tedy adresu bloku,
kde budou kódy barev uloženy). Adresu je nutné poslat jako sekvenci dvou bajtů
do řídicího registru <strong>PPUADDR</strong>, což vede k&nbsp;zápisu adresy do
již zmíněného interního záchytného registru (<i>latche</i>). Budeme požadovat,
aby palety začínaly na adrese $3f00, což znamená, že adresu pošleme systémem
vyšší bajt, nižší bajt:</p>

<pre>
        lda #$3f      <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #$00      <i>; nižší bajt adresy</i>
        sta PPUADDR
</pre>

<p>V&nbsp;posledním kroku pošleme do řídicího registru <strong>PPUDATA</strong>
sekvenci třiceti dvou bajtů. Ty budou čipem PPU korektně zpracovány, protože se
využije interní latch, jehož hodnota se po každém zápisu do
<strong>PPUDATA</strong> zvýší o jedničku. V&nbsp;kódu používáme nám již známé
instrukce mikroprocesoru MOS 6502 i anonymních návěští (<i>label</i>)
podporovaných assemblerem <i>ca65</i>, takže zde pravděpodobně není zapotřebí
dalšího podrobnějšího vysvětlování:</p>

<pre>
        ldx #$20      <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00      <i>; vynulování každé barvy</i>
</pre>

<p>Vlastní programová smyčka:</p>

<pre>
:
        sta PPUDATA   <i>; zápis barvy</i>
        dex           <i>; snížení hodnoty počitadla</i>
        bne :-
</pre>

<p><div class="rs-tip-major">Poznámka: tento způsob zápisu bloku dat nám může
připadat poměrně složitý, ovšem umožňuje, aby se veškeré přenosy posléze
realizovaly přes DMA, tedy do určité míry &bdquo;zadarmo&ldquo; (z&nbsp;pohledu
času stráveného mikroprocesorem). Navíc oddělením paměti pro PPU a CPU není CPU
příliš zdržován vykreslovacími operacemi tak, jako je tomu na mnoha jiných
platformách.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zvýšení intenzity zvolené barvové složky</h2>

<p>Zobrazování grafiky čipem PPU je řízeno přes registr nazvaný
<strong>PPUMASK</strong>. Jednotlivé bity tohoto registru mají následující
význam:</p>

<table>
<tr><th>Bit</th><th>Stručný popis</th></tr>
<tr><td>7</td><td>zvýraznění modré barvové složky</td></tr>
<tr><td>6</td><td>zvýraznění zelené barvové složky</td></tr>
<tr><td>5</td><td>zvýraznění červené barvové složky</td></tr>
<tr><td>4</td><td>povolení zobrazení spritů</td></tr>
<tr><td>3</td><td>povolení zobrazení pozadí</td></tr>
<tr><td>2</td><td>povolení/zákaz zobrazení spritů v&nbsp;levých osmi pixelech obrazovky</td></tr>
<tr><td>1</td><td>povolení/zákaz zobrazení pozadí v&nbsp;levých osmi pixelech obrazovky</td></tr>
<tr><td>0</td><td>barevný nebo monochromatický výstup</td></tr>
</table>

<p>Zajímavé jsou pro nás prozatím nejvyšší tři bity tohoto registru, protože ty
nám umožňují vykreslit na obrazovku &bdquo;alespoň něco&ldquo; kromě černé
barvy. Tyto bity totiž určují, že jedna z&nbsp;vybraných barvových složek RGB
se má v&nbsp;rámci celého obrazu zvýraznit na úkor obou zbývajících barvových
složek &ndash; to vlastně znamená, že má smysl nastavit pouze jediný
z&nbsp;těchto bitů.</p>

<p>Můžeme se například pokusit o zvýraznění modré barvové složky, a to
takto:</p>

<pre>
lda #%10000000 <i>; vysoká intenzita modré barvy</i>
sta PPUMASK
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 2: Zvýraznění modré barvové složky.</i></p>

<p>Dtto pro zelenou barvovou složku:</p>

<pre>
lda #%01000000 <i>; vysoká intenzita zelené barvy</i>
sta PPUMASK
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 3: Zvýraznění zelené barvové složky.</i></p>

<p>A konečně zvýraznění červené barvové složky celého obrazu:</p>

<pre>
lda #%00100000 <i>; vysoká intenzita červené barvy</i>
sta PPUMASK
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 4: Zvýraznění červené barvové složky.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Úplný zdrojový kód sedmého demonstračního příkladu</h2>

<p>Zdrojový kód v&nbsp;pořadí již sedmého demonstračního příkladu popsaného
v&nbsp;předchozích kapitolách je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm</a>
(pro překlad a slinkování tohoto demonstračního příkladu použijte <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">tento
Makefile</a>):</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.macro <strong>setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
.endmacro
&nbsp;
.macro <strong>wait_for_frame</strong>
:       bit PPUSTATUS          <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                 <i>; skok, pokud je příznak N nulový</i>
.endmacro
&nbsp;
.macro <strong>clear_ram</strong>
        lda #$00               <i>; vynulování registru A</i>
:       sta $000, x            <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x            <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                    <i>; přechod na další bajt</i>
        bne :-                 <i>; po přetečení 0xff -> 0x00 konec smyčky</i>
.endmacro
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 1
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
.proc <strong>nmi</strong>
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
.proc <strong>irq</strong>
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
.proc <strong>reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; vynulování barvové palety</i>
        lda PPUSTATUS <i>; reset záchytného registru</i>
        lda #$3f      <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #$00      <i>; nižší bajt adresy</i>
        sta PPUADDR
&nbsp;
        ldx #$20      <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00      <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA   <i>; zápis barvy</i>
        dex           <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        lda #%10000000 <i>; vysoká intenzita modré barvy</i>
        sta PPUMASK
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vylepšený zápis adresy barvové palety</h2>

<p>Podívejme se ještě jednou na tu část programového kódu, v&nbsp;níž do
řídicích registrů čipu PPU zapisujeme adresu začátku barvových palet:</p>

<pre>
        lda #$3f      <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #$00      <i>; nižší bajt adresy</i>
        sta PPUADDR
</pre>

<p>Tento kód má několik nectností. Zejména je v&nbsp;něm adresa
&bdquo;zadrátována&ldquo;, přičemž by bylo vhodnější použít pojmenovanou
konstantu (assembler je totiž &ndash; poněkud překvapivě &ndash;
v&nbsp;některých ohledech vyšším programovacím jazykem, než BASIC). A navíc by
bylo vhodné, aby se rozdělení 16bitové adresy na vyšší a nižší bajt provedlo
automaticky, ideálně s&nbsp;využitím možností assembleru &ndash; protože
rozdělení 16bitové hodnoty na dvě hodnoty osmibitové je v&nbsp;oblasti,
v&nbsp;níž se mikroprocesor MOS 6502 používá, velmi časté.</p>

<p>Nejprve tedy vytvořme symbolickou konstantu obsahující začátek paměťového
bloku s&nbsp;paletami. To je triviální operace:</p>

<pre>
<i>; Další důležité adresy</i>
PALETTE = $3f00
</pre>

<p>Následně jen musíme zajistit, aby se z&nbsp;této konstanty získal vyšší a
nižší bajt. Assembler <i>ca65</i> pro tyto účely obsahuje dvojici operátorů
zapisovaných znaky &lt; a &gt; Tyto operátory se vyhodnocují v&nbsp;čase
překladu, takže za jejich použití neplatíme žádným strojovým časem (při běhu
programu):</p>

<pre>
        lda #&gt;PALETTE <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE <i>; nižší bajt adresy</i>
        sta PPUADDR
</pre>

<p><div class="rs-tip-major">Poznámka: kromě operátorů &gt; a &lt; použitých
výše existuje i podobně koncipovaný operátor ^, jenž vrací (jednobajtovou)
adresu paměťové banky.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Úplný zdrojový kód osmého demonstračního příkladu</h2>

<p>Zdrojový kód v&nbsp;pořadí osmého demonstračního příkladu popsaného <a
href="#k06">v&nbsp;předchozích kapitole</a> je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm</a>
(pro překlad a slinkování tohoto demonstračního příkladu použijte <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">tento
Makefile</a>):</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.macro <strong>setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
.endmacro
&nbsp;
.macro <strong>wait_for_frame</strong>
:       bit PPUSTATUS            <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                   <i>; skok, pokud je příznak N nulový</i>
.endmacro
&nbsp;
.macro <strong>clear_ram</strong>
        lda #$00                <i>; vynulování registru A</i>
:       sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne :-                  <i>; po přetečení 0xff -> 0x00 konec smyčky</i>
.endmacro
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 1
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
.proc <strong>nmi</strong>
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
.proc <strong>irq</strong>
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
.proc <strong>reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; vynulování barvové palety</i>
        lda PPUSTATUS <i>; reset záchytného registru</i>
        lda #&gt;PALETTE <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE <i>; nižší bajt adresy</i>
        sta PPUADDR
&nbsp;
        ldx #$20      <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00      <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA   <i>; zápis barvy</i>
        dex           <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        lda #%10000000 <i>; vysoká intenzita modré barvy</i>
        sta PPUMASK
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vymazání barvové palety ve formě makra</h2>

<p>V&nbsp;předchozí dvojici demonstračních příkladů bylo nastavení
(resp.&nbsp;přesněji řečeno vynulování) barvové palety řešeno přímo
v&nbsp;hlavní proceduře <strong>reset</strong>. Pro větší přehlednost je však
vhodnější přenést tento kód buď do makra nebo do samostatného podprogramu
(subrutiny). Nejdříve se podívejme na řešení založené na použití makra. Kód pro
vynulování barvové palety překopírujeme do pojmenovaného makra:</p>

<pre>
<i>; vynulování barvové palety</i>
.macro <strong>clear_palette</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
.endmacro
</pre>

<p>Toto makro se velmi jednoduše použije (expanduje) následujícím způsobem:</p>

<pre>
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; vynulování barvové palety</i>
        <strong>clear_palette</strong>  <i>; expanze makra</i>
</pre>

<p>Makro je do kódu přímo vloženo, což je jasně patrné i při pohledu na
<i>listing</i>, což je assemblerem generovaný soubor, jenž pořizujeme
v&nbsp;době překladu:</p>

<pre>
00003Ar 1
00003Ar 1                       <i>; vynulování barvové palety</i>
00003Ar 1  AD 02 20 A9          <strong>clear_palette</strong>  <i>; expanze makra</i>
00003Er 1  3F 8D 06 20
000042r 1  A9 00 8D 06
000046r 1  20 A2 20 A9
00004Ar 1  00 8D 07 20
00004Er 1  CA D0 FA
000051r 1
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Úplný zdrojový kód devátého demonstračního příkladu</h2>

<p>Zdrojový kód v&nbsp;pořadí devátého demonstračního příkladu popsaného <a
href="#k08">v&nbsp;předchozích kapitole</a> je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm</a>
(pro překlad a slinkování tohoto demonstračního příkladu použijte <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">tento
Makefile</a>):</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>; Paleta je nastavena přes makro</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.macro <strong>setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
.endmacro
&nbsp;
.macro <strong>wait_for_frame</strong>
:       bit PPUSTATUS            <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                   <i>; skok, pokud je příznak N nulový</i>
.endmacro
&nbsp;
.macro <strong>clear_ram</strong>
        lda #$00                <i>; vynulování registru A</i>
:       sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne :-                  <i>; po přetečení 0xff -> 0x00 konec smyčky</i>
.endmacro
&nbsp;
<i>; vynulování barvové palety</i>
.macro <strong>clear_palette</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
.endmacro
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 1
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
.proc <strong>nmi</strong>
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
.proc <strong>irq</strong>
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
.proc <strong>reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; vynulování barvové palety</i>
        <strong>clear_palette</strong>  <i>; expanze makra</i>
&nbsp;
        lda #%10000000 <i>; vysoká intenzita modré barvy</i>
        sta PPUMASK
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vymazání barvové palety ve formě podprogramu</h2>

<p>V&nbsp;některých případech nám však nevyhovuje, že kód makra je vkládán
(expandován) při každém volání makra v&nbsp;programovém kódu. Mnohdy budeme
chtít, aby byl kód realizován formou podprogramu (subrutiny), která je skutečně
<i>volána</i>. Využijeme zde přitom trojici technik:</p>

<ol>
<li>Instrukci <strong>jsr</strong> neboli <i>Jump to SubRoutine</i> pro volání podprogramu</li>
<li>Instrukci <strong>rts</strong> neboli <i>ReTurn from Subroutine</i> pro návrat z&nbsp;podprogrammu</li>
<li>Syntaktickou konstrukci <strong></strong> a <strong></strong> assembleru ca65, jenž nám umožní subrutiny definovat ve zdrojovém kódu</li>
</ol>

<p>Volání subrutiny vypadá následovně:</p>

<pre>
        <i>; vynulování barvové palety</i>
        <strong>jsr clear_palette</strong>  <i>; zavolání subrutiny</i>
</pre>


<p>Což je rozdílné od expanze makra, které se zapisuje odlišně:</p>

<pre>
        <i>; vynulování barvové palety</i>
        <strong>clear_palette</strong>  <i>; expanze makra</i>
</pre>

<p>Kód samotné subrutiny se nepatrně odlišuje od makra, protože nesmíme
zapomenout na instrukci zajišťující návrat zpět do volaného kódu:</p>

<pre>
<i>; vynulování barvové palety</i>
.proc <strong>clear_palette</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
.endproc
</pre>

<p>Volaná subrutina není, na rozdíl od makra, přímo expandována, ale je
skutečně zavolána instrukcí <strong>jsr</strong>:</p>

<pre>
00003Ar 1
00003Ar 1                       <i>; vynulování barvové palety</i>
00003Ar 1  20 rr rr             <strong>jsr clear_palette</strong>  <i>; zavolání subrutiny</i>
00003Dr 1
</pre>

<p><div class="rs-tip-major">Poznámka: konkrétní adresa <strong>rr rr</strong>
je doplněna assemblerem v&nbsp;závěrečné fázi překladu a linkování.</div></p>

<p>Jedná se prozatím o velmi jednoduchý podprogram, kterému se nepředávají
žádné parametry a tudíž se ani nemusíme starat o to, jak vůbec tyto parametry
předávat &ndash; zda přes registry, zásobník apod.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Úplný zdrojový kód desátého demonstračního příkladu</h2>

<p>Zdrojový kód v&nbsp;pořadí desátého demonstračního příkladu popsaného <a
href="#k10">v&nbsp;předchozích kapitole</a> je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm</a>
(pro překlad a slinkování tohoto demonstračního příkladu použijte <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">tento
Makefile</a>):</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.macro <strong>setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
.endmacro
&nbsp;
.macro <strong>wait_for_frame</strong>
:       bit PPUSTATUS            <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                   <i>; skok, pokud je příznak N nulový</i>
.endmacro
&nbsp;
.macro <strong>clear_ram</strong>
        lda #$00                <i>; vynulování registru A</i>
:       sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne :-                  <i>; po přetečení 0xff -> 0x00 konec smyčky</i>
.endmacro
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 1
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
.proc <strong>nmi</strong>
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
.proc <strong>irq</strong>
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
.proc <strong>reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; vynulování barvové palety</i>
        <strong>jsr clear_palette</strong>  <i>; zavolání subrutiny</i>
&nbsp;
        lda #%10000000 <i>; vysoká intenzita modré barvy</i>
        sta PPUMASK
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; vynulování barvové palety</i>
.proc <strong>clear_palette</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Nastavení barev v&nbsp;barvové paletě z&nbsp;tabulkových dat</h2>

<p></p>

<pre>
<i>; samotná barvová paleta</i>
<strong>palette</strong>:
    .byte $22, $29, $1a, $0F, $22, $36, $17, $0F, $22, $30, $21, $0F, $22, $27, $17, $0F  <i>; barvy pozadí</i>
    .byte $22, $16, $27, $18, $22, $1A, $30, $27, $22, $16, $30, $27, $22, $0F, $36, $17  <i>; barvy spritů</i>
</pre>

<pre>
<i>; nastavení barvové palety</i>
.proc <strong>load_palette</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
&nbsp;
        <i>; $3f00-$3f0f - paleta pozadí</i>
        <i>; $3f10-$3f1f - paleta spritů</i>
&nbsp;
        ldx #$00        <i>; vynulovat počitadlo a offset</i>
&nbsp;
:
        lda palette, x  <i>; načíst bajt s offsetem</i>
        sta PPUDATA     <i>; zápis barvy do PPU</i>
        inx             <i>; zvýšit počitadlo/offset</i>
        cpx #32         <i>; limit počtu barev</i>
        bne :-          <i>; opakovat smyčku 32x</i>
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
.endproc
</pre>

<pre>
        <i>; nastavení barvové palety</i>
        jsr <strong>load_palette</strong>  <i>; zavolání subrutiny</i>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Úplný zdrojový kód jedenáctého demonstračního příkladu</h2>

<p>Zdrojový kód v&nbsp;pořadí jedenáctého demonstračního příkladu popsaného <a
href="#k12">v&nbsp;předchozích kapitole</a> je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm</a>
(pro překlad a slinkování tohoto demonstračního příkladu použijte <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">tento
Makefile</a>):</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.macro <strong>setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
.endmacro
&nbsp;
.macro <strong>wait_for_frame</strong>
:       bit PPUSTATUS            <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                   <i>; skok, pokud je příznak N nulový</i>
.endmacro
&nbsp;
.macro <strong>clear_ram</strong>
        lda #$00                <i>; vynulování registru A</i>
:       sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne :-                  <i>; po přetečení 0xff -> 0x00 konec smyčky</i>
.endmacro
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 1
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
.proc <strong>nmi</strong>
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
.proc <strong>irq</strong>
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
.proc <strong>reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; nastavení barvové palety</i>
        jsr <strong>load_palette</strong>  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; vynulování barvové palety</i>
.proc <strong>clear_palette</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; nastavení barvové palety</i>
.proc <strong>load_palette</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
&nbsp;
        <i>; $3f00-$3f0f - paleta pozadí</i>
        <i>; $3f10-$3f1f - paleta spritů</i>
&nbsp;
        ldx #$00        <i>; vynulovat počitadlo a offset</i>
&nbsp;
:
        lda palette, x  <i>; načíst bajt s offsetem</i>
        sta PPUDATA     <i>; zápis barvy do PPU</i>
        inx             <i>; zvýšit počitadlo/offset</i>
        cpx #32         <i>; limit počtu barev</i>
        bne :-          <i>; opakovat smyčku 32x</i>
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; samotná barvová paleta</i>
<strong>palette</strong>:
    .byte $22, $29, $1a, $0F, $22, $36, $17, $0F, $22, $30, $21, $0F, $22, $27, $17, $0F  <i>; barvy pozadí</i>
    .byte $22, $16, $27, $18, $22, $1A, $30, $27, $22, $16, $30, $27, $22, $0F, $36, $17  <i>; barvy spritů</i>
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Refaktoring &ndash; specifikace adresy pro zápis barev s&nbsp;využitím makra</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Úplný zdrojový kód dvanáctého demonstračního příkladu</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Příprava pro zobrazení spritů</h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Odkazy na předchozí části seriálu</h2>

<ol>

<li>Kouzlo minimalismu: vývoj her a demo programů pro herní konzoli NES<br />
<a href="https://www.root.cz/clanky/kouzlo-minimalismu-vyvoj-her-a-demo-programu-pro-herni-konzoli-nes/">https://www.root.cz/clanky/kouzlo-minimalismu-vyvoj-her-a-demo-programu-pro-herni-konzoli-nes/</a>
</li>

<li>Základy tvorby her pro herní konzoli NES: mikroprocesor 6502 a assembler ca65<br />
<a href="https://www.root.cz/clanky/zaklady-tvorby-her-pro-herni-konzoli-nes-mikroprocesor-6502-a-assembler-ca65/">https://www.root.cz/clanky/zaklady-tvorby-her-pro-herni-konzoli-nes-mikroprocesor-6502-a-assembler-ca65/</a>
</li>

<li>Základy tvorby her pro herní konzoli NES: triky nabízené assemblerem, tvorba zvuků a grafiky<br />
<a href="https://www.root.cz/clanky/zaklady-tvorby-her-pro-herni-konzoli-nes-triky-nabizene-assemblerem-tvorba-zvuku-a-grafiky/">https://www.root.cz/clanky/zaklady-tvorby-her-pro-herni-konzoli-nes-triky-nabizene-assemblerem-tvorba-zvuku-a-grafiky/</a>
</li>

</ol>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad pomocí assembleru <strong>ca65</strong> (jenž je součástí
<strong>cc65</strong>), byly uložen do Git repositáře, který je dostupný na
adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>example01.asm</td><td>zdrojový kód příkladu tvořeného kostrou aplikace pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm</a></td></tr>
<tr><td> 2</td><td>example02.asm</td><td>použití standardní konfigurace linkeru pro konzoli NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example02.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example02.asm</a></td></tr>
<tr><td> 3</td><td>example03.asm</td><td>symbolická jména řídicích registrů PPU</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example03.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example03.asm</a></td></tr>
<tr><td> 4</td><td>example04.asm</td><td>zjednodušený zápis lokálních smyček v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example04.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example04.asm</a></td></tr>
<tr><td> 5</td><td>example05.asm</td><td>zvukový výstup s&nbsp;využitím prvního &bdquo;square&ldquo; kanálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example05.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example05.asm</a></td></tr>
<tr><td> 6</td><td>example06.asm</td><td>použití maker bez parametrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example06.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example06.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>example07.asm</td><td>nastavení barvové palety, zvýšení intenzity zvolené barvové složky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm</a></td></tr>
<tr><td> 8</td><td>example08.asm</td><td>využití operátorů &lt; a &gt;</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm</a></td></tr>
<tr><td> 9</td><td>example09.asm</td><td>vymazání barvové palety realizované makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm</a></td></tr>
<tr><td>10</td><td>example10.asm</td><td>vymazání barvové palety realizované podprogramem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm</a></td></tr>
<tr><td>11</td><td>example11.asm</td><td>nastavení barvové palety pozadí i spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm</a></td></tr>
<tr><td>12</td><td>example12.asm</td><td>refaktoring předchozího příkladu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example12.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example12.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>link.cfg</td><td>konfigurace segmentů pro linker <strong>ld65</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg</a></td></tr>
<tr><td>14</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>NesDev.org<br />
<a href="https://www.nesdev.org/">https://www.nesdev.org/</a>
</li>

<li>How to Program an NES game in C<br />
<a href="https://nesdoug.com/">https://nesdoug.com/</a>
</li>

<li>Getting Started Programming in C: Coding a Retro Game with C Part 2<br />
<a href="https://retrogamecoders.com/getting-started-with-c-cc65/">https://retrogamecoders.com/getting-started-with-c-cc65/</a>
</li>

<li>NES game development in 6502 assembly - Part 1<br />
<a href="https://kibrit.tech/en/blog/nes-game-development-part-1">https://kibrit.tech/en/blog/nes-game-development-part-1</a>
</li>

<li>"Game Development in Eight Bits" by Kevin Zurawel<br />
<a href="https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4">https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4</a>
</li>

<li>Game Development for the 8-bit NES: A class by Bob Rost<br />
<a href="http://bobrost.com/nes/">http://bobrost.com/nes/</a>
</li>

<li>Game Development for the 8-bit NES: Lecture Notes<br />
<a href="http://bobrost.com/nes/lectures.php">http://bobrost.com/nes/lectures.php</a>
</li>

<li>NES Graphics Explained<br />
<a href="https://www.youtube.com/watch?v=7Co_8dC2zb8">https://www.youtube.com/watch?v=7Co_8dC2zb8</a>
</li>

<li>NES GAME PROGRAMMING PART 1<br />
<a href="https://rpgmaker.net/tutorials/227/?post=240020">https://rpgmaker.net/tutorials/227/?post=240020</a>
</li>

<li>NES 6502 Programming Tutorial - Part 1: Getting Started<br />
<a href="https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/">https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/</a>
</li>

<li>Minimal NES example using ca65<br />
<a href="https://github.com/bbbradsmith/NES-ca65-example">https://github.com/bbbradsmith/NES-ca65-example</a>
</li>

<li>List of 6502-based Computers and Consoles<br />
<a href="https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/">https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/</a>
</li>

<li>History of video game consoles (second generation): Wikipedia<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)</a>
</li>

<li>6502 - the first RISC &micro;P<br />
<a href="http://ericclever.com/6500/">http://ericclever.com/6500/</a>
</li>

<li>3 Generations of Game Machine Architecture<br />
<a href="http://www.atariarchives.org/dev/CGEXPO99.html">http://www.atariarchives.org/dev/CGEXPO99.html</a>
</li>

<li>bee - The Multi-Console Emulator<br />
<a href="http://www.thebeehive.ws/">http://www.thebeehive.ws/</a>
</li>

<li>Nerdy Nights Mirror<br />
<a href="https://nerdy-nights.nes.science/">https://nerdy-nights.nes.science/</a>
</li>

<li>The Nerdy Nights ca65 Remix<br />
<a href="https://github.com/ddribin/nerdy-nights">https://github.com/ddribin/nerdy-nights</a>
</li>

<li>NES Development Day 1: Creating a ROM<br />
<a href="https://www.moria.us/blog/2018/03/nes-development">https://www.moria.us/blog/2018/03/nes-development</a>
</li>

<li>How to Start Making NES Games<br />
<a href="https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/">https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>cc65 Users Guide<br />
<a href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>
</li>

<li>ld65 Users Guide<br />
<a href="https://cc65.github.io/doc/ld65.html">https://cc65.github.io/doc/ld65.html</a>
</li>

<li>da65 Users Guide<br />
<a href="https://cc65.github.io/doc/da65.html">https://cc65.github.io/doc/da65.html</a>
</li>

<li>Nocash NES Specs<br />
<a href="http://nocash.emubase.de/everynes.htm">http://nocash.emubase.de/everynes.htm</a>
</li>

<li>Nintendo Entertainment System<br />
<a href="http://cs.wikipedia.org/wiki/NES">http://cs.wikipedia.org/wiki/NES</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>NesDev<br />
<a href="http://nesdev.parodius.com/">http://nesdev.parodius.com/</a>
</li>

<li>2A03 technical reference<br />
<a href="http://nesdev.parodius.com/2A03%20technical%20reference.txt">http://nesdev.parodius.com/2A03%20technical%20reference.txt</a>
</li>

<li>NES Dev wiki: 2A03<br />
<a href="http://wiki.nesdev.com/w/index.php/2A03">http://wiki.nesdev.com/w/index.php/2A03</a>
</li>

<li>Ricoh 2A03<br />
<a href="http://en.wikipedia.org/wiki/Ricoh_2A03">http://en.wikipedia.org/wiki/Ricoh_2A03</a>
</li>

<li>2A03 pinouts<br />
<a href="http://nesdev.parodius.com/2A03_pinout.txt">http://nesdev.parodius.com/2A03_pinout.txt</a>
</li>

<li>27c3: Reverse Engineering the MOS 6502 CPU (en)<br />
<a href="https://www.youtube.com/watch?v=fWqBmmPQP40">https://www.youtube.com/watch?v=fWqBmmPQP40</a>
</li>

<li>“Hello, world” from scratch on a 6502 — Part 1<br />
<a href="https://www.youtube.com/watch?v=LnzuMJLZRdU">https://www.youtube.com/watch?v=LnzuMJLZRdU</a>
</li>

<li>A Tour of 6502 Cross-Assemblers<br />
<a href="https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/">https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/</a>
</li>

<li>Nintendo Entertainment System (NES)<br />
<a href="https://8bitworkshop.com/docs/platforms/nes/">https://8bitworkshop.com/docs/platforms/nes/</a>
</li>

<li>Question about NES vectors and PPU<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t4154.xhtml">https://archive.nes.science/nesdev-forums/f10/t4154.xhtml</a>
</li>

<li>How do mapper chips actually work?<br />
<a href="https://archive.nes.science/nesdev-forums/f9/t13125.xhtml">https://archive.nes.science/nesdev-forums/f9/t13125.xhtml</a>
</li>

<li>INES<br />
<a href="https://www.nesdev.org/wiki/INES">https://www.nesdev.org/wiki/INES</a>
</li>

<li>NES Basics and Our First Game<br />
<a href="http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html">http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html</a>
</li>

<li>Where is the reset vector in a .nes file?<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t17413.xhtml">https://archive.nes.science/nesdev-forums/f10/t17413.xhtml</a>
</li>

<li>CPU memory map<br />
<a href="https://www.nesdev.org/wiki/CPU_memory_map">https://www.nesdev.org/wiki/CPU_memory_map</a>
</li>

<li>How to make NES music<br />
<a href="http://blog.snugsound.com/2008/08/how-to-make-nes-music.html">http://blog.snugsound.com/2008/08/how-to-make-nes-music.html</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>MIDINES<br />
<a href="http://www.wayfar.net/0xf00000_overview.php">http://www.wayfar.net/0xf00000_overview.php</a>
</li>

<li>FamiTracker<br />
<a href="http://famitracker.com/">http://famitracker.com/</a>
</li>

<li>nerdTracker II<br />
<a href="http://nesdev.parodius.com/nt2/">http://nesdev.parodius.com/nt2/</a>
</li>

<li>How NES Graphics work<br />
<a href="http://nesdev.parodius.com/nesgfx.txt">http://nesdev.parodius.com/nesgfx.txt</a>
</li>

<li>NES Technical/Emulation/Development FAQ<br />
<a href="http://nesdev.parodius.com/NESTechFAQ.htm">http://nesdev.parodius.com/NESTechFAQ.htm</a>
</li>

<li>Adventures with ca65<br />
<a href="https://atariage.com/forums/topic/312451-adventures-with-ca65/">https://atariage.com/forums/topic/312451-adventures-with-ca65/</a>
</li>

<li>example ca65 startup code<br />
<a href="https://atariage.com/forums/topic/209776-example-ca65-startup-code/">https://atariage.com/forums/topic/209776-example-ca65-startup-code/</a>
</li>

<li>6502 PRIMER: Building your own 6502 computer<br />
<a href="http://wilsonminesco.com/6502primer/">http://wilsonminesco.com/6502primer/</a>
</li>

<li>6502 Instruction Set<br />
<a href="https://www.masswerk.at/6502/6502_instruction_set.html">https://www.masswerk.at/6502/6502_instruction_set.html</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Single-board computer<br />
<a href="https://en.wikipedia.org/wiki/Single-board_computer">https://en.wikipedia.org/wiki/Single-board_computer</a>
</li>

<li>www.6502.org<br />
<a href="http://www.6502­.org/">http://www.6502­.org/</a>
</li>

<li>6502 PRIMER: Building your own 6502 computer &ndash; clock generator<br />
<a href="http://wilsonminesco.com/6502primer/ClkGen.html">http://wilsonminesco.com/6502primer/ClkGen.html</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://www.cpushack.com/CPU/cpu.html">http://www.cpushack.com/CPU/cpu.html</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Osmibitové mikroprocesory a mikrořadiče firmy Motorola (1)<br />
<a href="https://www.root.cz/clanky/osmibitove-mikroprocesory-a-mikroradice-firmy-motorola-1/">https://www.root.cz/clanky/osmibitove-mikroprocesory-a-mikroradice-firmy-motorola-1/</a>
</li>

<li>Mikrořadiče a jejich použití v jednoduchých mikropočítačích<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-pouziti-v-jednoduchych-mikropocitacich/">https://www.root.cz/clanky/mikroradice-a-jejich-pouziti-v-jednoduchych-mikropocitacich/</a>
</li>

<li>Mikrořadiče a jejich aplikace v jednoduchých mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/">https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Comparison of instruction set architectures<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures">https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures</a>
</li>

<li>Day 1 - Beginning NES Assembly<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-1/">https://www.patater.com/nes-asm-tutorials/day-1/</a>
</li>

<li>Day 2 - A Source Code File's Structure<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-2/">https://www.patater.com/nes-asm-tutorials/day-2/</a>
</li>

<li>Assembly Language Misconceptions<br />
<a href="https://www.youtube.com/watch?v=8_0tbkbSGRE">https://www.youtube.com/watch?v=8_0tbkbSGRE</a>
</li>

<li>How Machine Language Works<br />
<a href="https://www.youtube.com/watch?v=HWpi9n2H3kE">https://www.youtube.com/watch?v=HWpi9n2H3kE</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

