<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na sérii článků o vývoji her (či spíše hříček) pro osmibitovou herní konzoli Atari 2600 s využitím Batari Basicu dnes nepřímo navážeme. Řekneme si totiž, jak lze vyvíjet hry a dema pro slavnou a přelomovou herní konzoli NES (Nintendo Entertainment System).</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. Základní technické parametry herní konzole NES</a></p>
<p><a href="#k05">*** 5. Osmibitový mikroprocesor Ricoh 2A03</a></p>
<p><a href="#k06">*** 6. Další podpůrné moduly integrované do čipu 2A03/2A07</a></p>
<p><a href="#k07">*** 7. Zvukový subsystém herní konzole NES</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. Základní programové vybavení pro vývoj her pro NE</a></p>
<p><a href="#k15">*** 15. Instalace <strong>ca65</strong> a <strong>cc65</strong></a></p>
<p><a href="#k16">*** 16. Instalace emulátoru NESu</a></p>
<p><a href="#k17">*** 17. Kostra programu pro NES vytvořená v&nbsp;céčku</a></p>
<p><a href="#k18">*** 18. Kostra programu pro NES vytvořená v&nbsp;assembleru</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p>V&nbsp;úvodní části článku se budeme zabývat popisem osmibitové herní konzole nazvané <i>Nintendo Entertainment System</i>, zkráceně <i>NES</i>, která byla navržena a následně vyráběna společností <i>Nintendo Corporation</i>. Tato firma se již před uvedením <i>NESu</i> na trh zabývala konstrukcí video automatů a taktéž jednoúčelových herních konzolí s&nbsp;jedním či dvěma LCD (v&nbsp;našich zemích jsou známější podobné konzole vyráběné v&nbsp;SSSR a mnohdy upravované pro místní podmínky &ndash; odlišné postavičky atd.).  Stejně jako herní konzole firmy <i>Sega</i>, i konzole <i>NES</i> pochází z&nbsp;Japonska, kde se prodávala pod názvem <i>Family Computer</i> neboli <i>Famicom</i> (pod stejným názvem se ostatně tato konzole prodávala i v&nbsp;některých dalších asijských zemích).</p>

<img src="http://i.iinfo.cz/images/657/8203.jpg" width="450" height="289" alt="&#160;" />
<p><i>Obrázek 1: Osmibitová herní konzole Nintendo Entertainment System (NES).</i></p>

<p>Jedná se o nejúspěšnější osmibitovou herní konzoli vůbec, a to jak z&nbsp;pohledu celkového počtu prodaných kusů, tak i při pohledu na časové období, kdy byla tato konzole vyráběna a prodávána, protože se odhaduje, že bylo prodáno téměř 62 milionů kusů tohoto zařízení a navíc vzniklo přibližně padesát více či méně kompatibilních klonů NESu. A navíc byly pro tuto herní konzoli vyvinuty herní série, které vlastně pokračují dodnes (například ...). Mimochodem je 62 milionů v&nbsp;dobovém srovnání velmi vysoké číslo, a to například i v&nbsp;porovnání s&nbsp;další (již popsanou) úspěšnou herní konzolí <i>Atari 2600</i>, jíž bylo prodáno celkem 30 milionů (do obou čísel nejsou započítány klony konzole, které většinou nebyly korektně licencovány).</p>

<img src="http://i.iinfo.cz/images/234/8402-1.jpg" width="450" height="320" alt="&#160;" />
<p><i>Obrázek 2: K&nbsp;herní konzoli NES postupně vzniklo velké množství
různých přídavných zařízení a doplňků, například rozhraní pro MIDI či disketová
jednotka používající speciální diskety o průměru dva palce. Zajímavý byl taktéž
modem prodávaný zejména v&nbsp;Japonsku, který měl být používán především pro
hraní loterií.</i></p>

<p>Zajímavá je i &bdquo;morální životnost&ldquo; <i>NESu</i>, protože tato konzole byla představena již v&nbsp;roce 1983 v&nbsp;Japonsku a i když byl oficiálně prodej <i>NESu</i> ukončen &bdquo;již&ldquo; v&nbsp;roce 1995 (tj.&nbsp;po dvanácti letech), ve skutečnosti výroba pokračovala až do roku 2003 a ještě do roku 2007 nabízela firma <i>Nintendo</i> možnost oprav <i>NESu</i> (posléze byla tato nabídka stažena, protože již nebyly k&nbsp;dispozici příslušné náhradní díly). Právě na příkladu <i>NESu</i> a taktéž herní konzole <i>Atari 2600</i> je možné ukázat, že se vývoj herních konzolí poměrně podstatným způsobem odlišuje od vývoje osobních počítačů a je v&nbsp;ostrém kontrastu například s&nbsp;překotným &bdquo;morálním zastaráváním&ldquo; mobilních telefonů (kde je rozdíl asi nejvíce patrný).</p>

<p><div class="rs-tip-major">Poznámka: prodej konzole s&nbsp;osmibitovým mikroprocesorem a pouhými dvěma kilobajty operační paměti RAM v&nbsp;roce 2003 se totiž může zdát z&nbsp;technologického hlediska vlastně docela nesmyslný, z&nbsp;ekonomického i herního hlediska tomu však může být úplně jinak.</div></p>

<img src="http://i.iinfo.cz/images/313/8403-1.jpg" width="450" height="360" alt="&#160;" />
<p><i>Obrázek 3: Rozhraní pro MIDI určené pro NES.</i></p>

<p>Není tedy divu, že i přes některé problematické rysy NESu (ochranné prvky a zpočátku i striktní politika prodeje her třetích stran) se dosti úspěšně rozvinula tvorba &bdquo;moderních retroher&ldquo; určených právě pro tuto herní konzoli.</p>

<p><div class="rs-tip-major">Poznámka: pod pojmem &bdquo;retrohra&ldquo; se může skrývat buď hra vyvinutá skutečně pro dobové konzole (Atari 2600, Atari 5200, NES, SNES, Sega Master System, GameBoy atd.) popř.&nbsp;pro osmibitové domácí mikropočítače (), nebo naopak hra běžící na moderním hardware a využívající všechny poslední výkřiky techniky z&nbsp;oblasti CPU+GPU (a typicky programovaná ve vyšším programovacím jazyku), která pouze simuluje starší vzhled grafiky popř.&nbsp;zvuků. V&nbsp;tomto článku i v&nbsp;článcích navazujících nebudeme klamat ani hráče ani sami sebe a použijeme buď reálnou konzoli nebo alespoň její emulátor.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p>Ještě předtím, než vykreslíme první snímek hry, je nutné alespoň do určité míry porozumět interní architektuře herní konzole NES. Interně se sice jedná o poměrně jednoduché zařízení s&nbsp;minimálním počtem čipů (což je s&nbsp;ohledem na tržní segment logické), ovšem zejména grafický subsystém může zpočátku vypadat poměrně komplikovaně, protože se v&nbsp;NESu nepoužívá přímočará bitmapová grafika, na jakou jsme zvyklí dnes například při použití knihoven SDL či SDL2. Samozřejmě je výsledkem činnosti grafického subsystému rastrový obrázek vykreslený na televizoru (či dnes spíše na monitoru připojeného k&nbsp;počítači s&nbsp;emulátorem NESu), ovšem tento rastrový obrázek vzniká interpretací (či zpracováním) několika tabulek, či možná lépe řečeno polí. Nicméně grafický subsystém NESu byl ve skutečnosti navržen velmi pečlivě a s&nbsp;ohledem na to, že se jedná o herní konzoli a nikoli o obecný domácí mikropočítač, který je sice univerzální, ovšem tato univerzalita znamená, že se prakticky v&nbsp;každém ohledu musely udělat ústupky (což je ovšem téma na samostatný článek).</p>

*** image ***
<p><i></i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základní technické parametry herní konzole NES</h2>

<p>Konstruktéři herní konzole <i>NES</i> stáli před podobným problémem, jako konstruktéři všech dalších osmibitových konzolí: jakým způsobem dosáhnout uspokojivého výpočetního výkonu, dobrých grafických i zvukových schopností, a to za co nejnižší výrobní cenu, která je samozřejmě ve velmi konkurenčním prostředí herních konzolí jedním z&nbsp;nejdůležitějších parametrů. Na jednu stranu bylo snahou ušetřit co nejvíce systémových prostředků, na stranu druhou měla být <i>NES</i> minimálně o třídu lepší (z&nbsp;pohledu grafiky i zvuků) než konkurenční herní konzole, tedy především dosluhující <i>Atari 2600</i>, ale především <i></i>, <i></i> a <i></i>.</p>

<p>Výsledkem výše zmíněné snahy o dobré vybalancování výrobní ceny a schopností konzole byl systém se čtyřmi (pouhými čtyřmi!) hlavními čipy: osmibitovým mikroprocesorem <i>Ricoh 2A03</i> (<a href="#k03">kapitola 3</a>) obsahujícím i zvukový generátor (<a href="#k04">kapitola 4</a>), dále čipem <i>RP2C02</i> resp. <i>RP2C07 (PPU)</i> zajišťujícím generování grafického obrazu (<a href="#k06">kapitola 6</a>) a dvojicí paměťových čipů. Jeden z&nbsp;těchto paměťových přitom čipů tvořil programovou a datovou RAM, druhý čip sloužil grafickému procesoru pro uložení vzorků, z&nbsp;nichž se skládalo herní pole (<i>playfield</i>, ovšem nenechte se zmást i termínem <i>background</i>) a sprity, popř.&nbsp;i další důležité informace nutné pro vygenerování grafického obrazu.</p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že na rozdíl o domácích osmibitových mikropočítačů nebyla zařazena například ROM s&nbsp;operačním systémem (vše si řešil paměťový modul se hrou), ani takové &bdquo;maličkosti&ldquo; jako znaková sada apod. Na jednu stranu jsou tedy začátky programování NESu jednodušší, neboť mezi programátorem a hardwarem není umístěna žádná mezivrstva, ovšem minimálně grafický subsystém tvoří určitou vstupní bariéru.</div></p>

<img src="http://i.iinfo.cz/images/7/8404-1.png" width="256" height="224" alt="&#160;" />
<p><i>Obrázek 4: Herní série The Legend of Zelda</i></p>

<p>Systém <i>Nintendo Entertainment System</i> samozřejmě podporoval (přesněji řečeno přímo vyžadoval) použití zásuvných modulů s&nbsp;hrami či jinými aplikacemi. Tyto moduly mohly obsahovat jak paměť ROM/EPROM s&nbsp;binárním kódem hry i se všemi statickými daty (maximální adresovatelná kapacita dosahovala 32 kB, zvýšit ji bylo možné klasicky přes paměťové banky), tak i paměť RAM, jejíž typická kapacita byla 8 kB. Pomocí zásuvného modulu bylo možné rozšířit i kapacitu video paměti. Schéma zapojení jedné z&nbsp;variant herní konzole <i>Nintendo Entertainment System</i> je dostupné například na této adrese: <a href="http://nesdev.parodius.com/Ntd_8bit.jpg">http://nesdev.parodius.com/Ntd_8bit.jpg</a>.  Povšimněte si především způsobu vzájemného propojení mikroprocesoru (<i>CPU</i>) s&nbsp;grafickým procesorem (<i>PPU</i>) pomocí datové sběrnice a šesti bitů adresové sběrnice i toho, jak jsou od sebe odděleny oba čipy RAM (ve druhém případě je adresa zachycena do latche <i>LS 373</i> s&nbsp;využitím signálu <strong>ALE</strong>).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Osmibitový mikroprocesor Ricoh 2A03</h2>

<p>Ústředním čipem, na němž je postavena herní konzole <i>NES</i>, je mikroprocesor <i>Ricoh 2A03</i>, popř.&nbsp;<i>Ricoh 2A07</i> (tyto čipy se od sebe liší především odlišným časováním a jsou určeny pro různé televizní normy). Konstruktéři v&nbsp;případě mikroprocesoru <i>2A03/2A07</i> vsadili na osvědčenou jistotu, protože tento čip je založen na jádru oblíbeného mikroprocesoru <i>MOS 6502</i>, jenž byl v&nbsp;různých variantách použit v&nbsp;několika dalších osmibitových herních konzolích (<i>Atari 2600</i>, <i>Atari 5200</i>, <i>Atari 7800</i>) a taktéž v&nbsp;mnoha domácích osmibitových mikropočítačích (<i>Atari 400/800/800XL/130XE</i> a varianty, <i>Apple I</i>, <i>Apple II</i>, <i>BBC Micro</i>, <i>Commodore C64</i>...).  V&nbsp;případě čipů <i>2A03/2A07</i> však došlo k&nbsp;určitému zjednodušení jádra původního MOS 6502; chyběl například nepříliš často používaný režim pro práci s&nbsp;BCD čísly, kdy se v&nbsp;jednom bajtu ukládaly dvě číslice 0-9, tj.&nbsp;rozsah ukládaných hodnot byl 00 až 99 a nikoli 0 a 255. Původní mikroprocesor MOS 6502 mohl být do tohoto režimu přepnut pomocí instrukce <strong>SED</strong>, bližší informace o tomto režimu lze najít na adrese <a href="http://www.6502.org/tutorials/decimal_mode.html">http://www.6502.org/tutorials/decimal_mode.html</a>.</p>

<p><div class="rs-tip-major">Poznámka: vynechání režimu BCD je poněkud zvláštní, protože se hodí například pro zobrazení skóre či počtu životů ve hře. Možná i z&nbsp;tohoto důvodu mnoho her pro NES zobrazuje počet životů ikonami (ovšem skóre a statistiku zobrazuje například Tetris).</div></p>

<img src="http://i.iinfo.cz/images/71/8408-1.jpg" width="422" height="156" alt="&#160;" />
<p><i>Obrázek 7: Mikroprocesor Ricoh 2A03.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Další podpůrné moduly integrované do čipu 2A03/2A07</h2>

<p>Zatímco jádro mikroprocesoru bylo nepatrně zjednodušeno, byly na čip <i>Ricoh 2A03/2A07</i> přidány další podpůrné moduly, díky jejichž existenci mohlo být redukováno celkové množství integrovaných obvodů, z&nbsp;nichž se herní konzole <i>NES</i> skládala. Jednalo se o následující moduly, z&nbsp;nichž některé budou popsány v&nbsp;navazujících kapitolách:</p>

<ul>

<li>Programovatelný &bdquo;pomalý&ldquo; časovač se základní frekvencí 240 Hz, z&nbsp;níž mohly být odvozeny další frekvence (48, 60, 96, 120 a 192 Hz).</li>

<li>Modul pro přímý přístup do paměti a přenosy dat (DMA).</li>

<li>Dva programovatelné generátory obdélníkového signálu používané pro tvorbu zvuků.</li>

<li>Jeden generátor trojúhelníkového signálu, taktéž používaný pro tvorbu zvuků.</li>

<li>Konfigurovatelný generátor šumu tvořený posuvným registrem se zpětnou vazbou.</li>

<li>Modul pro přehrávání samplů (D/A převodník).</li>

</ul>

<pre>
              ___  ___
             |o  \/   |
ROUT  &lt;--- 01]        [40 &lt;---  VCC
COUT  &lt;--- 02]        [39 ---&gt;  $4016W.0
/RES  ---&gt; 03]        [38 ---&gt;  $4016W.1
A0    &lt;--- 04]        [37 ---&gt;  $4016W.2
A1    &lt;--- 05]        [36 ---&gt;  /$4016R
A2    &lt;--- 06]        [35 ---&gt;  /$4017R
A3    &lt;--- 07]        [34 ---&gt;  R/W
A4    &lt;--- 08]        [33 &lt;---  /NMI
A5    &lt;--- 09]        [32 &lt;---  /IRQ
A6    &lt;--- 10]  2A03  [31 ---&gt;  PHI2
A7    &lt;--- 11]        [30 &lt;---  ---
A8    &lt;--- 12]        [29 &lt;---  CLK
A9    &lt;--- 13]        [28 &lt;---&gt;  D0
A10   &lt;--- 14]        [27 &lt;---&gt;  D1
A11   &lt;--- 15]        [26 &lt;---&gt;  D2
A12   &lt;--- 16]        [25 &lt;---&gt;  D3
A13   &lt;--- 17]        [24 &lt;---&gt;  D4
A14   &lt;--- 18]        [23 &lt;---&gt;  D5
A15   &lt;--- 19]        [22 &lt;---&gt;  D6
VEE   ---&gt; 20]        [21 &lt;---&gt;  D7
             |________|
</pre>

<p><i>Obrázek 8: Schéma pinů mikroprocesoru Ricoh 2A03.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zvukový subsystém herní konzole NES</h2>

<p>V&nbsp;této kapitole si řekneme základní informace o zvukovém subsystému herní konzole <i>NES</i>. Z&nbsp;předchozího textu již víme, že je tento subsystém přímo součástí integrovaného obvodu s&nbsp;mikroprocesorem <i>2A03/2A07</i>. Zvuk či melodie mohly být tvořeny v&nbsp;pěti na sobě nezávislých kanálech. Jedná se o dva generátory obdélníkového signálu s&nbsp;volitelnou amplitudou, frekvencí a střídou, dále o generátor trojúhelníkového signálu s&nbsp;volitelnou frekvencí a automaticky měněnou amplitudou, generátor šumu, u nějž bylo možné zvolit režim činnosti, amplitudu a frekvenci posunu a konečně o D/A převodník, který mohl být buď ovládán přímo programově, nebo bylo umožněno načítat zvukové vzorky (samply) uložené v&nbsp;paměti ROM či RAM. Zajímavé je, že zvukový subsystém neobsahoval žádné filtry, na rozdíl od (jednoduchých) filtrů nabízených čipem <i>POKEY (Atari)</i> či komplexnějších filtrů použitých v&nbsp;čipu <i>SID (Commodore C64</i>).</p>

<img src="http://i.iinfo.cz/images/544/8410-1.png" width="256" height="224" alt="&#160;" />
<p><i>Obrázek 10: Super Mario Bros ve verzi pro NES.</i></p>

<p>Taktéž podpora pro tvarování obálky generovaných signálů byla pouze dosti jednoduchá (tuto funkcionalitu však neměl ani <i>POKEY</i>, kde se musela řešit programovými cestami). Čip <i>2A03/2A07</i> obsahoval dva piny, na které byl přiváděn výstup ze všech pěti zvukových kanálů. Na pin číslo 1 (<strong>ROUT</strong>) byl přiváděn výstup z&nbsp;obou generátorů obdélníkových signálů, zatímco výstup z&nbsp;ostatních třech kanálů byl přiváděn na pin číslo 2 (<strong>COUT</strong>). V&nbsp;herní konzoli <i>NES</i> byl výstup z&nbsp;obou kanálů sloučen a analogově sečten s&nbsp;mikrofonním vstupem (ten se příliš často nepoužíval) a výsledný analogový signál byl zesílen a dále zpracován.</p>

<img src="http://i.iinfo.cz/images/630/8411-1.png" width="256" height="224" alt="&#160;" />
<p><i>Obrázek 11: Další screenshot hry Super Mario Bros.</i></p>


<img src="http://i.iinfo.cz/images/432/8412-1.png" width="256" height="240" alt="&#160;" />42
<p><i>Obrázek 12: Poslední screenshot ze hry The Legend of Zelda ve verzi pro
NES.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Assemblery a překladače pro konzoli NES</h2>

<p>Vzhledem k&nbsp;tomu, že se mikroprocesor herní konzole <i>NES</i> lišil od původního čipu <i>MOS 6502</i> jen v&nbsp;několika málo instrukcích, je možné pro vývoj her pro <i>NES</i> používat assembler nazvaný <i>DASM</i>, o němž jsme se zmínili v&nbsp;článcích o <i>Batari BASICu</i>. Tento assembler (přesněji řečeno cross assembler) je v&nbsp;současnosti pravděpodobně nejpoužívanější, a to i v&nbsp;oblasti dalších zařízení založených na procesorech řady <i>MOS 6502</i>. Existují či v&nbsp;nedávné minulosti existovaly však i další assemblery, například starší <i>FASM</i>, v&nbsp;minulosti poměrně populární <i>X816</i> či <i>P65</i>, který je zajímavý především tím, že je naprogramován v&nbsp;Perlu a nikoli v&nbsp;jazyku C, podobně jako mnoho dalších assemblerů. Musím též doplnit informaci o disassemblerech: 6502 Simulator, TRaCER či NESrev &ndash; ten je psaný v&nbsp;Javě (v&nbsp;souvislosti s&nbsp;osmibitovými konzolemi jde o poměrně bizarní technologii :-) a jeho autorem je Kent Hansen.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Základní programové vybavení pro vývoj her pro NES</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Instalace <strong>ca65</strong> a <strong>cc65</strong></h2>

<pre>
$ <strong>sudo apt-get install cc65</strong>
&nbsp;
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
  cc65-doc
The following NEW packages will be installed:
  cc65
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 2 162 kB of archives.
After this operation, 31,8 MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu focal/universe amd64 cc65 amd64 2.18-1 [2 162 kB]
Fetched 2 162 kB in 5s (423 kB/s)
Selecting previously unselected package cc65.
(Reading database ... 291820 files and directories currently installed.)
Preparing to unpack .../archives/cc65_2.18-1_amd64.deb ...
Unpacking cc65 (2.18-1) ...
Setting up cc65 (2.18-1) ...
</pre>

<pre>
$ <strong>cc65 --version</strong>
cc65 V2.18 - Ubuntu 2.18-1
</pre>

<pre>
$ <strong>ca65 --version</strong>
ca65 V2.18 - Ubuntu 2.18-1
</pre>

<pre>
$ <strong>ld65 --version</strong>
ld65 V2.18 - Ubuntu 2.18-1
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Instalace emulátoru NESu</h2>

<pre>
$ <strong>sudo apt-get install nestopia</strong>
&nbsp;
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  nestopia
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 885 kB of archives.
After this operation, 3 933 kB of additional disk space will be used.
0% [Working]y
Get:1 http://archive.ubuntu.com/ubuntu focal/universe amd64 nestopia amd64 1.50-1build1 [885 kB]
Fetched 885 kB in 7s (119 kB/s)
Selecting previously unselected package nestopia.
(Reading database ... 292411 files and directories currently installed.)
Preparing to unpack .../nestopia_1.50-1build1_amd64.deb ...
Unpacking nestopia (1.50-1build1) ...
Setting up nestopia (1.50-1build1) ...
update-alternatives: using /usr/games/nestopia to provide /usr/bin/nes (nes) in auto mode
Processing triggers for desktop-file-utils (0.24+linuxmint1) ...
Processing triggers for mime-support (3.64ubuntu1) ...
Processing triggers for hicolor-icon-theme (0.17-2) ...
Processing triggers for doc-base (0.10.9) ...
Processing 1 added doc-base file...
Processing triggers for gnome-menus (3.36.0-1ubuntu1) ...
Processing triggers for man-db (2.9.1-1) ...
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Kostra programu pro NES vytvořená v&nbsp;céčku</h2>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Kostra programu pro NES vytvořená v&nbsp;assembleru</h2>

<pre>
MEMORY {
    ZP:     start = $0000, size = $0100, type = rw;
    RAM:    start = $0300, size = $0400, type = rw;
    HEADER: start = $0000, size = $0010, type = rw,
            file = %O, fill = yes;
    PRG0:   start = $8000, size = $4000, type = ro,
            file = %O, fill = yes;
    CHR0a:  start = $0000, size = $1000, type = ro,
            file = %O, fill = yes;
    CHR0b:  start = $1000, size = $1000, type = ro,
            file = %O, fill = yes;
}

SEGMENTS {
    ZEROPAGE: load = ZP, type = zp;
    BSS:    load = RAM, type = bss;
    INES:   load = HEADER, type = ro, align = $10;
    CODE:   load = PRG0, type = ro;
    VECTOR: load = PRG0, type = ro, start = $BFFA;
    CHR0a:  load = CHR0a, type = ro;
    CHR0b:  load = CHR0b, type = ro;
}
</pre>

<pre>
; ---------------------------------------------------------------------
; Definice hlavičky obrazu ROM
; ---------------------------------------------------------------------

; Size of PRG in units of 16 KiB.
prg_npage = 1

; Size of CHR in units of 8 KiB.
chr_npage = 1

; INES mapper number.
mapper = 0

; Mirroring (0 = horizontal, 1 = vertical)
mirroring = 1

.segment "INES"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper & $0f) << 4) | (mirroring & 1)
        .byte mapper & $f0
.code



; ---------------------------------------------------------------------
; Blok paměti s definicí dlaždic 8x8 pixelů
; ---------------------------------------------------------------------

.segment "CHR0a"
.segment "CHR0b"



; ---------------------------------------------------------------------
; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU
;
; viz též https://www.pagetable.com/?p=410
; ---------------------------------------------------------------------

; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)

.proc nmi
        rti                     ; návrat z přerušení
.endproc



; Obslužná rutina pro IRQ (maskovatelné přerušení)

.proc irq
        rti                     ; návrat z přerušení
.endproc



; Obslužná rutina pro RESET

.proc reset
        ; nastavení stavu CPU
        sei                     ; zákaz přerušení
        cld                     ; vypnutí dekadického režimu (není podporován)

        ldx #$ff
        txs                     ; vrchol zásobníku nastaven na 0xff (první stránka)

        ; nastavení řídicích registrů
        ldx #$00
        stx $2000               ; nastavení PPUCTRL = 0
        stx $2001               ; nastavení PPUMASK = 0
        stx $4015               ; nastavení APUSTATUS = 0

        ; čekání na vnitřní inicializaci PPU (dva snímky)
wait1:  bit $2002               ; test obsahu registru PPUSTATUS 
        bpl wait1               ; skok, pokud je příznak N nulový
wait2:  bit $2002               ; test obsahu registru PPUSTATUS 
        bpl wait2               ; skok, pokud je příznak N nulový

        ; vymazání obsahu RAM
        lda #$00                ; vynulování registru A
loop:   sta $000, x             ; vynulování X-tého bajtu v nulté stránce
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             ; vynulování X-tého bajtu v sedmé stránce
        inx                     ; přechod na další bajt
        bne loop                ; po přetečení 0xff -> 0x00 konec smyčky

        ; čekání na dokončení dalšího snímku, potom může začít herní smyčka
wait3:  bit $2002               ; test obsahu registru PPUSTATUS 
        bpl wait3               ; skok, pokud je příznak N nulový

        ; vlastní herní smyčka je prozatím prázdná
game_loop:
        jmp game_loop           ; nekonečná smyčka (později rozšíříme)
.endproc



; ---------------------------------------------------------------------
; Tabulka vektorů CPU
; ---------------------------------------------------------------------

.segment "VECTOR"
.addr nmi
.addr reset
.addr irq



; ---------------------------------------------------------------------
; Finito
; ---------------------------------------------------------------------
</pre>

<pre>
ca65 example01.asm -o example01.o -l example01.list
</pre>

<pre>
ld65 -C link.x example01.o -o example01.nes
</pre>

<pre>
ca65 V2.18 - Ubuntu 2.18-1
Main file   : example01.asm
Current file: example01.asm

000000r 1               ; ---------------------------------------------------------------------
000000r 1               ; Definice hlavičky obrazu ROM
000000r 1               ; ---------------------------------------------------------------------
000000r 1               
000000r 1               ; Size of PRG in units of 16 KiB.
000000r 1               prg_npage = 1
000000r 1               
000000r 1               ; Size of CHR in units of 8 KiB.
000000r 1               chr_npage = 1
000000r 1               
000000r 1               ; INES mapper number.
000000r 1               mapper = 0
000000r 1               
000000r 1               ; Mirroring (0 = horizontal, 1 = vertical)
000000r 1               mirroring = 1
000000r 1               
000000r 1               .segment "INES"
000000r 1  4E 45 53 1A          .byte $4e, $45, $53, $1a
000004r 1  01                   .byte prg_npage
000005r 1  01                   .byte chr_npage
000006r 1  01                   .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
000007r 1  00                   .byte mapper &amp; $f0
000008r 1               .code
000000r 1               
000000r 1               
000000r 1               
000000r 1               ; ---------------------------------------------------------------------
000000r 1               ; Blok paměti s definicí dlaždic 8x8 pixelů
000000r 1               ; ---------------------------------------------------------------------
000000r 1               
000000r 1               .segment "CHR0a"
000000r 1               .segment "CHR0b"
000000r 1               
000000r 1               
000000r 1               
000000r 1               ; ---------------------------------------------------------------------
000000r 1               ; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU
000000r 1               ;
000000r 1               ; viz též https://www.pagetable.com/?p=410
000000r 1               ; ---------------------------------------------------------------------
000000r 1               
000000r 1               ; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)
000000r 1               
000000r 1               .proc nmi
000000r 1  40                   rti                     ; návrat z přerušení
000001r 1               .endproc
000001r 1               
000001r 1               
000001r 1               
000001r 1               ; Obslužná rutina pro IRQ (maskovatelné přerušení)
000001r 1               
000001r 1               .proc irq
000001r 1  40                   rti                     ; návrat z přerušení
000002r 1               .endproc
000002r 1               
000002r 1               
000002r 1               
000002r 1               ; Obslužná rutina pro RESET
000002r 1               
000002r 1               .proc reset
000002r 1                       ; nastavení stavu CPU
000002r 1  78                   sei                     ; zákaz přerušení
000003r 1  D8                   cld                     ; vypnutí dekadického režimu (není podporován)
000004r 1               
000004r 1  A2 FF                ldx #$ff
000006r 1  9A                   txs                     ; vrchol zásobníku nastaven na 0xff (první stránka)
000007r 1               
000007r 1                       ; nastavení řídicích registrů
000007r 1  A2 00                ldx #$00
000009r 1  8E 00 20             stx $2000               ; nastavení PPUCTRL = 0
00000Cr 1  8E 01 20             stx $2001               ; nastavení PPUMASK = 0
00000Fr 1  8E 15 40             stx $4015               ; nastavení APUSTATUS = 0
000012r 1               
000012r 1                       ; čekání na vnitřní inicializaci PPU (dva snímky)
000012r 1  2C 02 20     wait1:  bit $2002               ; test obsahu registru PPUSTATUS
000015r 1  10 FB                bpl wait1               ; skok, pokud je příznak N nulový
000017r 1  2C 02 20     wait2:  bit $2002               ; test obsahu registru PPUSTATUS
00001Ar 1  10 FB                bpl wait2               ; skok, pokud je příznak N nulový
00001Cr 1               
00001Cr 1                       ; vymazání obsahu RAM
00001Cr 1  A9 00                lda #$00                ; vynulování registru A
00001Er 1  95 00        loop:   sta $000, x             ; vynulování X-tého bajtu v nulté stránce
000020r 1  9D 00 01             sta $100, x
000023r 1  9D 00 02             sta $200, x
000026r 1  9D 00 03             sta $300, x
000029r 1  9D 00 04             sta $400, x
00002Cr 1  9D 00 05             sta $500, x
00002Fr 1  9D 00 06             sta $600, x
000032r 1  9D 00 07             sta $700, x             ; vynulování X-tého bajtu v sedmé stránce
000035r 1  E8                   inx                     ; přechod na další bajt
000036r 1  D0 E6                bne loop                ; po přetečení 0xff -> 0x00 konec smyčky
000038r 1               
000038r 1                       ; čekání na dokončení dalšího snímku, potom může začít herní smyčka
000038r 1  2C 02 20     wait3:  bit $2002               ; test obsahu registru PPUSTATUS
00003Br 1  10 FB                bpl wait3               ; skok, pokud je příznak N nulový
00003Dr 1               
00003Dr 1                       ; vlastní herní smyčka je prozatím prázdná
00003Dr 1               game_loop:
00003Dr 1  4C rr rr             jmp game_loop           ; nekonečná smyčka (později rozšíříme)
000040r 1               .endproc
000040r 1               
000040r 1               
000040r 1               
000040r 1               ; ---------------------------------------------------------------------
000040r 1               ; Tabulka vektorů CPU
000040r 1               ; ---------------------------------------------------------------------
000040r 1               
000040r 1               .segment "VECTOR"
000000r 1  rr rr        .addr nmi
000002r 1  rr rr        .addr reset
000004r 1  rr rr        .addr irq
000006r 1               
000006r 1               
000006r 1               
000006r 1               ; ---------------------------------------------------------------------
000006r 1               ; Finito
000006r 1               ; ---------------------------------------------------------------------
000006r 1               
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Oba dva dnes popsané demonstrační příklady určené pro překlad
<strong>ca65</strong> a <strong>cc65</strong> byly uloženy do Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/</a></td></tr>
<tr><td>2</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/">https://github.com/tisnik/8bit-fame/blob/master/NES-cc65/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>NesDev.org<br />
<a href="https://www.nesdev.org/">https://www.nesdev.org/</a>
</li>

<li>How to Program an NES game in C<br />
<a href="https://nesdoug.com/">https://nesdoug.com/</a>
</li>

<li>Getting Started Programming in C: Coding a Retro Game with C Part 2<br />
<a href="https://retrogamecoders.com/getting-started-with-c-cc65/">https://retrogamecoders.com/getting-started-with-c-cc65/</a>
</li>

<li>"Game Development in Eight Bits" by Kevin Zurawel<br />
<a href="https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4">https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4</a>
</li>

<li>Game Development for the 8-bit NES: A class by Bob Rost<br />
<a href="http://bobrost.com/nes/">http://bobrost.com/nes/</a>
</li>

<li>Game Development for the 8-bit NES: Lecture Notes<br />
<a href="http://bobrost.com/nes/lectures.php">http://bobrost.com/nes/lectures.php</a>
</li>

<li>NES Graphics Explained<br />
<a href="https://www.youtube.com/watch?v=7Co_8dC2zb8">https://www.youtube.com/watch?v=7Co_8dC2zb8</a>
</li>

<li>NES GAME PROGRAMMING PART 1<br />
<a href="https://rpgmaker.net/tutorials/227/?post=240020">https://rpgmaker.net/tutorials/227/?post=240020</a>
</li>

<li>NES 6502 Programming Tutorial - Part 1: Getting Started<br />
<a href="https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/">https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/</a>
</li>

<li>Minimal NES example using ca65<br />
<a href="https://github.com/bbbradsmith/NES-ca65-example">https://github.com/bbbradsmith/NES-ca65-example</a>
</li>

<li>List of 6502-based Computers and Consoles<br />
<a href="https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/">https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/</a>
</li>

<li>History of video game consoles (second generation): Wikipedia<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)</a>
</li>

<li>6502 - the first RISC &micro;P<br />
<a href="http://ericclever.com/6500/">http://ericclever.com/6500/</a>
</li>

<li>3 Generations of Game Machine Architecture<br />
<a href="http://www.atariarchives.org/dev/CGEXPO99.html">http://www.atariarchives.org/dev/CGEXPO99.html</a>
</li>

<li>bee - The Multi-Console Emulator<br />
<a href="http://www.thebeehive.ws/">http://www.thebeehive.ws/</a>
</li>

<li>Nerdy Nights Mirror<br />
<a href="https://nerdy-nights.nes.science/">https://nerdy-nights.nes.science/</a>
</li>

<li>NES Development Day 1: Creating a ROM<br />
<a href="https://www.moria.us/blog/2018/03/nes-development">https://www.moria.us/blog/2018/03/nes-development</a>
</li>

<li>How to Start Making NES Games<br />
<a href="https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/">https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>cc65 Users Guide<br />
<a href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>
</li>

<li>ld65 Users Guide<br />
<a href="https://cc65.github.io/doc/ld65.html">https://cc65.github.io/doc/ld65.html</a>
</li>

<li>da65 Users Guide<br />
<a href="https://cc65.github.io/doc/da65.html">https://cc65.github.io/doc/da65.html</a>
</li>

<li>Nocash NES Specs<br />
<a href="http://nocash.emubase.de/everynes.htm">http://nocash.emubase.de/everynes.htm</a>
</li>

<li>Nintendo Entertainment System<br />
<a href="http://cs.wikipedia.org/wiki/NES">http://cs.wikipedia.org/wiki/NES</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>NesDev<br />
<a href="http://nesdev.parodius.com/">http://nesdev.parodius.com/</a>
</li>

<li>2A03 technical reference<br />
<a href="http://nesdev.parodius.com/2A03%20technical%20reference.txt">http://nesdev.parodius.com/2A03%20technical%20reference.txt</a>
</li>

<li>NES Dev wiki: 2A03<br />
<a href="http://wiki.nesdev.com/w/index.php/2A03">http://wiki.nesdev.com/w/index.php/2A03</a>
</li>

<li>Ricoh 2A03<br />
<a href="http://en.wikipedia.org/wiki/Ricoh_2A03">http://en.wikipedia.org/wiki/Ricoh_2A03</a>
</li>

<li>2A03 pinouts<br />
<a href="http://nesdev.parodius.com/2A03_pinout.txt">http://nesdev.parodius.com/2A03_pinout.txt</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

