<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Kouzlo minimalismu: vývoj her a grafických i zvukových dem pro herní konzoli NES</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Kouzlo minimalismu: vývoj her a grafických i zvukových dem pro herní konzoli NES</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na sérii článků o vývoji her (či spíše hříček) pro osmibitovou herní konzoli Atari 2600 s využitím Batari Basicu dnes nepřímo navážeme. Řekneme si totiž, jak lze vyvíjet hry a dema pro slavnou a přelomovou herní konzoli NES (Nintendo Entertainment System).</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Kouzlo minimalismu: vývoj her a grafických i zvukových dem pro herní konzoli NES</a></p>
<p><a href="#k02">*** 2. Slavná osmibitová herní konzole NES</a></p>
<p><a href="#k03">3. Architektura herní konzole NES</a></p>
<p><a href="#k04">4. Základní technické parametry herní konzole NES</a></p>
<p><a href="#k05">5. Osmibitový mikroprocesor Ricoh 2A03</a></p>
<p><a href="#k06">6. Další podpůrné moduly integrované do čipu 2A03/2A07</a></p>
<p><a href="#k07">7. Zvukový subsystém herní konzole NES</a></p>
<p><a href="#k08">8. Generátory obdélníkových signálů a trojúhelníkového signálu</a></p>
<p><a href="#k09">9. Generátor šumu</a></p>
<p><a href="#k10">10. Adresy všech řídicích registrů zvukového subsystému</a></p>
<p><a href="#k11">11. Grafický subsystém NESu</a></p>
<p><a href="#k12">12. Assemblery a překladače pro NES</a></p>
<p><a href="#k13">13. Komplexní vývojová prostředí</a></p>
<p><a href="#k14">14. Základní programové vybavení pro vývoj her pro NE</a></p>
<p><a href="#k15">15. Instalace <strong>ca65</strong> a <strong>cc65</strong></a></p>
<p><a href="#k16">16. Instalace emulátoru NESu</a></p>
<p><a href="#k17">17. Kostra programu pro NES vytvořená v&nbsp;céčku</a></p>
<p><a href="#k18">*** 18. Kostra programu pro NES vytvořená v&nbsp;assembleru</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Kouzlo minimalismu: vývoj her a grafických i zvukových dem pro herní konzoli NES</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Slavná osmibitová herní konzole NES</h2>

<p>V&nbsp;úvodní části článku se budeme zabývat popisem osmibitové herní konzole nazvané <i>Nintendo Entertainment System</i>, zkráceně <i>NES</i>, která byla navržena a následně vyráběna společností <i>Nintendo Corporation</i>. Tato firma se již před uvedením <i>NESu</i> na trh zabývala konstrukcí video automatů a taktéž jednoúčelových herních konzolí s&nbsp;jedním či dvěma LCD (v&nbsp;našich zemích jsou známější podobné konzole vyráběné v&nbsp;SSSR a mnohdy upravované pro místní podmínky &ndash; odlišné postavičky atd.).  Stejně jako herní konzole firmy <i>Sega</i>, i konzole <i>NES</i> pochází z&nbsp;Japonska, kde se prodávala pod názvem <i>Family Computer</i> neboli <i>Famicom</i> (pod stejným názvem se ostatně tato konzole prodávala i v&nbsp;některých dalších asijských zemích).</p>

<img src="http://i.iinfo.cz/images/657/8203.jpg" width="450" height="289" alt="&#160;" />
<p><i>Obrázek 1: Osmibitová herní konzole Nintendo Entertainment System (NES).</i></p>

<p>Jedná se o nejúspěšnější osmibitovou herní konzoli vůbec, a to jak z&nbsp;pohledu celkového počtu prodaných kusů, tak i při pohledu na časové období, kdy byla tato konzole vyráběna a prodávána, protože se odhaduje, že bylo prodáno téměř 62 milionů kusů tohoto zařízení a navíc vzniklo přibližně padesát více či méně kompatibilních klonů NESu. A navíc byly pro tuto herní konzoli vyvinuty herní série, které vlastně pokračují dodnes (například ...). Mimochodem je 62 milionů v&nbsp;dobovém srovnání velmi vysoké číslo, a to například i v&nbsp;porovnání s&nbsp;další (již popsanou) úspěšnou herní konzolí <i>Atari 2600</i>, jíž bylo prodáno celkem 30 milionů (do obou čísel nejsou započítány klony konzole, které většinou nebyly korektně licencovány).</p>

<img src="http://i.iinfo.cz/images/234/8402-1.jpg" width="450" height="320" alt="&#160;" />
<p><i>Obrázek 2: K&nbsp;herní konzoli NES postupně vzniklo velké množství
různých přídavných zařízení a doplňků, například rozhraní pro MIDI či disketová
jednotka používající speciální diskety o průměru dva palce. Zajímavý byl taktéž
modem prodávaný zejména v&nbsp;Japonsku, který měl být používán především pro
hraní loterií.</i></p>

<p>Zajímavá je i &bdquo;morální životnost&ldquo; <i>NESu</i>, protože tato konzole byla představena již v&nbsp;roce 1983 v&nbsp;Japonsku a i když byl oficiálně prodej <i>NESu</i> ukončen &bdquo;již&ldquo; v&nbsp;roce 1995 (tj.&nbsp;po dvanácti letech), ve skutečnosti výroba pokračovala až do roku 2003 a ještě do roku 2007 nabízela firma <i>Nintendo</i> možnost oprav <i>NESu</i> (posléze byla tato nabídka stažena, protože již nebyly k&nbsp;dispozici příslušné náhradní díly). Právě na příkladu <i>NESu</i> a taktéž herní konzole <i>Atari 2600</i> je možné ukázat, že se vývoj herních konzolí poměrně podstatným způsobem odlišuje od vývoje osobních počítačů a je v&nbsp;ostrém kontrastu například s&nbsp;překotným &bdquo;morálním zastaráváním&ldquo; mobilních telefonů (kde je rozdíl asi nejvíce patrný).</p>

<p><div class="rs-tip-major">Poznámka: prodej konzole s&nbsp;osmibitovým mikroprocesorem a pouhými dvěma kilobajty operační paměti RAM v&nbsp;roce 2003 se totiž může zdát z&nbsp;technologického hlediska vlastně docela nesmyslný, z&nbsp;ekonomického i herního hlediska tomu však může být úplně jinak.</div></p>

<img src="http://i.iinfo.cz/images/313/8403-1.jpg" width="450" height="360" alt="&#160;" />
<p><i>Obrázek 3: Rozhraní pro MIDI určené pro NES.</i></p>

<p>Není tedy divu, že i přes některé problematické rysy NESu (ochranné prvky a zpočátku i striktní politika prodeje her třetích stran) se dosti úspěšně rozvinula tvorba &bdquo;moderních retroher&ldquo; určených právě pro tuto herní konzoli.</p>

<p><div class="rs-tip-major">Poznámka: pod pojmem &bdquo;retrohra&ldquo; se může skrývat buď hra vyvinutá skutečně pro dobové konzole (Atari 2600, Atari 5200, NES, SNES, Sega Master System, GameBoy atd.) popř.&nbsp;pro osmibitové domácí mikropočítače (), nebo naopak hra běžící na moderním hardware a využívající všechny poslední výkřiky techniky z&nbsp;oblasti CPU+GPU (a typicky programovaná ve vyšším programovacím jazyku), která pouze simuluje starší vzhled grafiky popř.&nbsp;zvuků. V&nbsp;tomto článku i v&nbsp;článcích navazujících nebudeme klamat ani hráče ani sami sebe a použijeme buď reálnou konzoli nebo alespoň její emulátor.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Architektura herní konzole NES</h2>

<p>Ještě předtím, než vykreslíme první snímek hry nebo zahrajeme první tón, je
nutné alespoň do určité míry porozumět interní architektuře herní konzole NES.
Interně se sice jedná o poměrně jednoduché zařízení s&nbsp;minimálním počtem
čipů (což je s&nbsp;ohledem na tržní segment logické), ovšem zejména grafický
subsystém může zpočátku vypadat poměrně komplikovaně, protože se v&nbsp;NESu
nepoužívá přímočará bitmapová grafika, na jakou jsme zvyklí dnes například při
použití knihoven SDL či SDL2. Samozřejmě je výsledkem činnosti grafického
subsystému rastrový obrázek vykreslený na televizoru (či dnes spíše na monitoru
připojeného k&nbsp;počítači s&nbsp;emulátorem NESu), ovšem tento rastrový
obrázek vzniká interpretací (či zpracováním) několika tabulek, či možná lépe
řečeno polí. Nicméně grafický subsystém NESu byl ve skutečnosti navržen velmi
pečlivě a s&nbsp;ohledem na to, že se jedná o herní konzoli a nikoli o obecný
domácí mikropočítač, který je sice univerzální, ovšem tato univerzalita
znamená, že se prakticky v&nbsp;každém ohledu musely udělat ústupky (což je
ovšem téma na samostatný článek).</p>

*** image ***
<p><i>Obrázek 4: Architektura herní konzole NES.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základní technické parametry herní konzole NES</h2>

<p>Konstruktéři herní konzole <i>NES</i> stáli před podobným problémem, jako
konstruktéři všech dalších osmibitových konzolí: jakým způsobem dosáhnout
uspokojivého výpočetního výkonu, dobrých grafických i zvukových schopností, a
to za co nejnižší výrobní cenu, která je samozřejmě ve velmi konkurenčním
prostředí herních konzolí jedním z&nbsp;nejdůležitějších parametrů. Na jednu
stranu bylo snahou ušetřit co nejvíce systémových prostředků, na stranu druhou
měla být <i>NES</i> minimálně o třídu lepší (z&nbsp;pohledu grafiky i zvuků)
než konkurenční herní konzole, tedy především dosluhující <i>Atari 2600</i>,
ale především konzole z&nbsp;třetí generace <i>Sega Master System</i>, <i>Atari
7800</i> a <i>SG-1000</i>.</p>

<p>Výsledkem výše zmíněné snahy o dobré vybalancování výrobní ceny a schopností
konzole byl systém se čtyřmi (pouhými čtyřmi!) hlavními čipy: osmibitovým
mikroprocesorem <i>Ricoh 2A03</i> (de facto upravený MOS 6502) obsahujícím i
zvukový generátor, dále čipem <i>RP2C02</i> resp. <i>RP2C07 (PPU)</i>
zajišťujícím generování grafického obrazu (nazývá se PPU) a dvojicí paměťových
čipů. Jeden z&nbsp;těchto paměťových čipů přitom tvořil programovou a datovou
RAM, druhý čip sloužil grafickému procesoru pro uložení vzorků, z&nbsp;nichž se
skládalo herní pole (<i>playfield</i>, ovšem nenechte se zmást i termínem
<i>background</i>) a sprity, popř.&nbsp;i další důležité informace nutné pro
vygenerování grafického obrazu.</p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že na rozdíl o domácích
osmibitových mikropočítačů nebyla zařazena například ROM s&nbsp;operačním
systémem (vše si řešil paměťový modul se hrou), ani takové
&bdquo;maličkosti&ldquo; jako znaková sada apod. Na jednu stranu jsou tedy
začátky programování NESu jednodušší, neboť mezi programátorem a hardwarem není
umístěna žádná mezivrstva, ovšem minimálně grafický subsystém tvoří určitou
vstupní bariéru &ndash; a tím pádem i výzvu!</div></p>

<img src="http://i.iinfo.cz/images/7/8404-1.png" width="256" height="224" alt="&#160;" />
<p><i>Obrázek 5: Herní série The Legend of Zelda</i></p>

<p>Systém <i>Nintendo Entertainment System</i> samozřejmě podporoval (přesněji
řečeno přímo vyžadoval) použití zásuvných modulů s&nbsp;hrami či jinými
aplikacemi. Tyto moduly mohly obsahovat jak paměť ROM/EPROM s&nbsp;binárním
kódem hry i se všemi statickými daty (maximální adresovatelná kapacita
dosahovala 32 kB, zvýšit ji bylo možné klasicky přes paměťové banky), tak i
paměť RAM, jejíž typická kapacita byla 8 kB. Pomocí zásuvného modulu bylo možné
rozšířit i kapacitu video paměti. Schéma zapojení jedné z&nbsp;variant herní
konzole <i>Nintendo Entertainment System</i> je dostupné například na této
adrese: <a
href="http://nesdev.parodius.com/Ntd_8bit.jpg">http://nesdev.parodius.com/Ntd_8bit.jpg</a>.
Povšimněte si především způsobu vzájemného propojení mikroprocesoru
(<i>CPU</i>) s&nbsp;grafickým procesorem (<i>PPU</i>) pomocí datové sběrnice a
šesti bitů adresové sběrnice i toho, jak jsou od sebe odděleny oba čipy RAM (ve
druhém případě je adresa zachycena do latche <i>LS 373</i> s&nbsp;využitím
signálu <strong>ALE</strong>).</p>

<p><div class="rs-tip-major">Poznámka: toto rozdělení RAM nás bude při
programování poněkud mást.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Osmibitový mikroprocesor Ricoh 2A03</h2>

<p>Ústředním čipem, na němž je postavena herní konzole <i>NES</i>, je
mikroprocesor <i>Ricoh 2A03</i>, popř.&nbsp;<i>Ricoh 2A07</i> (tyto čipy se od
sebe liší především odlišným časováním a jsou určeny pro různé televizní
normy). Konstruktéři v&nbsp;případě mikroprocesoru <i>2A03/2A07</i> vsadili na
osvědčenou jistotu, protože tento čip je založen na jádru oblíbeného
mikroprocesoru <i>MOS 6502</i>, jenž byl v&nbsp;různých variantách použit
v&nbsp;několika dalších osmibitových herních konzolích (<i>Atari 2600</i>,
<i>Atari 5200</i>, <i>Atari 7800</i>) a taktéž v&nbsp;mnoha domácích
osmibitových mikropočítačích (<i>Atari 400/800/800XL/130XE</i> a varianty,
<i>Apple I</i>, <i>Apple II</i>, <i>BBC Micro</i>, <i>Commodore C64</i>...)
&ndash; je to jeden ze tří nejúspěšnějších dobových mikroprocesorů.
V&nbsp;případě čipů <i>2A03/2A07</i> však došlo k&nbsp;určitému zjednodušení
jádra původního MOS 6502; chyběl například nepříliš často používaný režim pro
práci s&nbsp;BCD čísly, kdy se v&nbsp;jednom bajtu ukládaly dvě číslice 0-9,
tj.&nbsp;rozsah ukládaných hodnot byl 00 až 99 a nikoli 0 a 255. Původní
mikroprocesor MOS 6502 mohl být do tohoto režimu přepnut pomocí instrukce
<strong>SED</strong>, bližší informace o tomto režimu lze najít na adrese <a
href="http://www.6502.org/tutorials/decimal_mode.html">http://www.6502.org/tutorials/decimal_mode.html</a>.</p>

<p><div class="rs-tip-major">Poznámka: vynechání režimu BCD je poněkud
zvláštní, protože se hodí například pro zobrazení skóre či počtu životů ve hře.
Možná i z&nbsp;tohoto důvodu mnoho her pro NES zobrazuje počet životů ikonami
(ovšem skóre a statistiku zobrazuje například Tetris).</div></p>

<img src="http://i.iinfo.cz/images/71/8408-1.jpg" width="422" height="156" alt="&#160;" />
<p><i>Obrázek 6: Mikroprocesor Ricoh 2A03.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Další podpůrné moduly integrované do čipu 2A03/2A07</h2>

<p>Zatímco jádro mikroprocesoru bylo nepatrně zjednodušeno, byly na čip
<i>Ricoh 2A03/2A07</i> přidány další velmi důležité podpůrné moduly, díky
jejichž existenci mohlo být redukováno celkové množství integrovaných obvodů,
z&nbsp;nichž se herní konzole <i>NES</i> skládala (což významně snížilo cenu i
zmenšilo množství reklamací). Jednalo se o následující moduly, z&nbsp;nichž
některé budou popsány v&nbsp;navazujících kapitolách:</p>

<ul>

<li>Programovatelný &bdquo;pomalý&ldquo; časovač se základní frekvencí 240 Hz,
z&nbsp;níž mohly být odvozeny další frekvence (48, 60, 96, 120 a 192 Hz).</li>

<li>Modul pro přímý přístup do paměti a přenosy dat (DMA).</li>

<li>Dva programovatelné generátory obdélníkového signálu používané pro tvorbu
zvuků.</li>

<li>Jeden generátor trojúhelníkového signálu, taktéž používaný pro tvorbu
zvuků.</li>

<li>Konfigurovatelný generátor šumu tvořený posuvným registrem se zpětnou
vazbou.</li>

<li>Modul pro přehrávání samplů (D/A převodník).</li>

</ul>

<p>Jen pro zajímavost se podívejme na zapojení vývodů:</p>

<pre>
              ___  ___
             |o  \/   |
ROUT  &lt;--- 01]        [40 &lt;---  VCC
COUT  &lt;--- 02]        [39 ---&gt;  $4016W.0
/RES  ---&gt; 03]        [38 ---&gt;  $4016W.1
A0    &lt;--- 04]        [37 ---&gt;  $4016W.2
A1    &lt;--- 05]        [36 ---&gt;  /$4016R
A2    &lt;--- 06]        [35 ---&gt;  /$4017R
A3    &lt;--- 07]        [34 ---&gt;  R/W
A4    &lt;--- 08]        [33 &lt;---  /NMI
A5    &lt;--- 09]        [32 &lt;---  /IRQ
A6    &lt;--- 10]  2A03  [31 ---&gt;  PHI2
A7    &lt;--- 11]        [30 &lt;---  ---
A8    &lt;--- 12]        [29 &lt;---  CLK
A9    &lt;--- 13]        [28 &lt;---&gt;  D0
A10   &lt;--- 14]        [27 &lt;---&gt;  D1
A11   &lt;--- 15]        [26 &lt;---&gt;  D2
A12   &lt;--- 16]        [25 &lt;---&gt;  D3
A13   &lt;--- 17]        [24 &lt;---&gt;  D4
A14   &lt;--- 18]        [23 &lt;---&gt;  D5
A15   &lt;--- 19]        [22 &lt;---&gt;  D6
VEE   ---&gt; 20]        [21 &lt;---&gt;  D7
             |________|
</pre>

<p><i>Obrázek 7: Schéma pinů mikroprocesoru Ricoh 2A03.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zvukový subsystém herní konzole NES</h2>

<p>V&nbsp;této kapitole si řekneme základní informace o zvukovém subsystému
herní konzole <i>NES</i>. Z&nbsp;předchozího textu již víme, že je tento
subsystém přímo součástí integrovaného obvodu s&nbsp;mikroprocesorem
<i>2A03/2A07</i>. Zvuk či melodie mohly být tvořeny v&nbsp;pěti na sobě
nezávislých kanálech (což je s&nbsp;ohledem na dobu vzniku hodně). Jedná se o
dva generátory obdélníkového signálu s&nbsp;volitelnou amplitudou, frekvencí a
střídou, dále o generátor trojúhelníkového signálu s&nbsp;volitelnou frekvencí
a automaticky měněnou amplitudou, generátor šumu, u nějž bylo možné zvolit
režim činnosti, amplitudu a frekvenci posunu a konečně o D/A převodník, který
mohl být buď ovládán přímo programově, nebo bylo umožněno načítat zvukové
vzorky (samply) uložené v&nbsp;paměti ROM či RAM. Zajímavé je, že zvukový
subsystém neobsahoval žádné filtry, na rozdíl od (jednoduchých) filtrů
nabízených čipem <i>POKEY (Atari)</i> či komplexnějších filtrů použitých
v&nbsp;čipu <i>SID (Commodore C64</i>).</p>

<img src="http://i.iinfo.cz/images/544/8410-1.png" width="256" height="224" alt="&#160;" />
<p><i>Obrázek 8: Super Mario Bros ve verzi pro NES.</i></p>

<p>Taktéž podpora pro tvarování obálky generovaných signálů byla pouze dosti
jednoduchá (tuto funkcionalitu však neměl ani <i>POKEY</i>, kde se musela řešit
programovými cestami). Čip <i>2A03/2A07</i> obsahoval dva piny, na které byl
přiváděn výstup ze všech pěti zvukových kanálů. Na pin číslo 1
(<strong>ROUT</strong>) byl přiváděn výstup z&nbsp;obou generátorů
obdélníkových signálů, zatímco výstup z&nbsp;ostatních třech kanálů byl
přiváděn na pin číslo 2 (<strong>COUT</strong>). V&nbsp;herní konzoli
<i>NES</i> byl výstup z&nbsp;obou kanálů sloučen a analogově sečten
s&nbsp;mikrofonním vstupem (ten se příliš často nepoužíval) a výsledný
analogový signál byl zesílen a dále zpracován.</p>

<img src="http://i.iinfo.cz/images/630/8411-1.png" width="256" height="224" alt="&#160;" />
<p><i>Obrázek 9: Další screenshot hry Super Mario Bros.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Generátory obdélníkových signálů a trojúhelníkového signálu</h2>

<p>Na ovládání nejjednodušší byly oba generátory obdélníkových signálů, u nichž
bylo možné měnit zejména tři základní parametry: amplitudu (4 bity = 16
úrovní), frekvenci (přibližně 54,6 Hz až 12,4 kHz podle použité televizní
normy, frekvenci bylo možné měnit plynule) a střídu (1:8, 1:4, 1:2, 3:4). U
generátoru trojúhelníkového signálu se měnila jeho úroveň (4 bity = 16 úrovní)
automaticky, ale programově bylo možné nastavit frekvenci změn signálu
v&nbsp;rozsahu 27,3 Hz až 55,9 kHz (opět v&nbsp;závislosti na použité televizní
normě). Generátor šumu si popíšeme v&nbsp;následující kapitole, takže nám zbývá
už jen pátý kanál, jímž je D/A převodník. Ten bylo možné ovládat programově
změnou jednoho řídicího registru (sedmibitová hodnota), popř.&nbsp;byla
podporována funkce automatického přehrávání vzorků (samplů) z&nbsp;ROM, přičemž
při načítání samplu došlo k&nbsp;pozastavení mikroprocesoru. Při přehrávání
vzorků byla frekvence nastavitelná v&nbsp;rozsahu 4,2 kHz až 33,5 kHz (ovšem
zvolit bylo možné jen šestnáct přednastavených frekvencí).</p>

<img src="http://i.iinfo.cz/images/432/8412-1.png" width="256" height="240" alt="&#160;" />42
<p><i>Obrázek 10: Poslední screenshot ze hry The Legend of Zelda ve verzi pro
NES.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Generátor šumu</h2>

<p>Podobně jako zvukové čipy <i>POKEY</i> či <i>AY-3-8910</i>, obsahoval i
zvukový subsystém herní konzole <i>NES</i> generátor šumu. Ten byl vytvořen
pomocí patnáctibitového posuvného registru se zpětnou vazbou: vybrané dva bity
posuvného registru byly přes hradlo XOR přesunuty na jeho začátek, přičemž se
obsah registru mezitím posunul o jeden bit doleva. Zvukový výstup byl generován
na základě aktuálního obsahu bitu s&nbsp;indexem 14. Posuvný registr mohl
pracovat ve dvou režimech činnosti: &bdquo;krátkém&ldquo; a
&bdquo;dlouhém&ldquo;. Ve dlouhém režimu se generovala sekvence pseudonáhodných
bitů s&nbsp;periodou 32767 vzorků (zbývající 32768 stav nemohl být použit,
protože se jednalo o nulovou hodnotu spadající mimo generovanou sekvenci).
V&nbsp;krátkém režimu byla perioda pseudonáhodného signálu kratší: 93
bitů/vzorků. Samozřejmě bylo taktéž možné měnit frekvenci posunu, a to
přibližně v&nbsp;rozsahu 29,3 Hz až 447 kHz (opět v&nbsp;závislosti na tom,
jaká televizní norma byla použita).</p>

<pre>
                 &lt;=======================

+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
| 14 | 13 | 12 | 11 | 10 |  9 |  8 |  7 |  6 |  5 |  4 |  3 |  2 |  1 |  0 |
+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
   v    v        _____                                                   ^
   v    +-------| xor |--------------------------------------------------+
   +------------|_____|
</pre>

<p><i>Obrázek 11: Konfigurace generátoru šumu v&nbsp;&bdquo;dlouhém&ldquo;
režimu.</i></p>

<pre>
                 &lt;=======================

+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
| 14 | 13 | 12 | 11 | 10 |  9 |  8 |  7 |  6 |  5 |  4 |  3 |  2 |  1 |  0 |
+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
   v                             v        _____                          ^
   v                             +-------| xor |-------------------------+
   +-------------------------------------|_____|
</pre>

<p><i>Obrázek 12: Konfigurace generátoru šumu v&nbsp;&bdquo;krátkém&ldquo;
režimu.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Adresy všech řídicích registrů zvukového subsystému</h2>

<p>Na závěr si ještě uvedeme mapu všech 22 řídicích registrů ovlivňujících
funkci všech zvukových generátorů popsaných výše:</p>

<table>
<tr><th>Adresa</th><th>Název řídicího registru</th><th>Význam</th></tr>
<tr><td>$4000</td><td>SQ1_VOL</td><td>Duty and volume for square wave 1</td></tr>
<tr><td>$4001</td><td>SQ1_SWEEP</td><td>Sweep control register for square wave 1</td></tr>
<tr><td>$4002</td><td>SQ1_LO</td><td>Low byte of period for square wave 1</td></tr>
<tr><td>$4003</td><td>SQ1_HI</td><td>High byte of period and length counter value for square wave 1</td></tr>
<tr><td>$4004</td><td>SQ2_VOL</td><td>Duty and volume for square wave 2</td></tr>
<tr><td>$4005</td><td>SQ2_SWEEP </td><td>Sweep control register for square wave 2</td></tr>
<tr><td>$4006</td><td>SQ2_LO</td><td>Low byte of period for square wave 2</td></tr>
<tr><td>$4007</td><td>SQ2_HI</td><td>High byte of period and length counter value for square wave 2</td></tr>
<tr><td>$4008</td><td>TRI_LINEAR</td><td>Triangle wave linear counter</td></tr>
<tr><td>$4009</td><td>&nbsp;</td><td>Not used</td></tr>
<tr><td>$400A</td><td>TRI_LO</td><td>Low byte of period for triangle wave</td></tr>
<tr><td>$400B</td><td>TRI_HI</td><td>High byte of period and length counter value for triangle wave</td></tr>
<tr><td>$400C</td><td>NOISE_VOL</td><td>Volume for noise generator</td></tr>
<tr><td>$400D</td><td>&nbsp;</td><td>Not used</td></tr>
<tr><td>$400E</td><td>NOISE_LO</td><td>Period and waveform shape for noise generator</td></tr>
<tr><td>$400F</td><td>NOISE_HI</td><td>Length counter value for noise generator</td></tr>
<tr><td>$4010</td><td>DMC_FREQ</td><td>Play mode and frequency for DMC samples</td></tr>
<tr><td>$4011</td><td>DMC_RAW</td><td>7-bit DAC</td></tr>
<tr><td>$4012</td><td>DMC_START</td><td>Start of DMC waveform is at address $C000 + $40*$xx</td></tr>
<tr><td>$4013</td><td>DMC_LEN</td><td>Length of DMC waveform is $10*$xx + 1 bytes (128*$xx + 8 samples)</td></tr>
<tr><td>$4014</td><td>OAM_DMA</td><td>Writing $xx copies 256 bytes by reading from $xx00-$xxFF and writing to $2004 (OAM data)</td></tr>
<tr><td>$4015</td><td>SND_CHN</td><td>Sound channels enable and status</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: generování zvuků si ukážeme
příště.</div></p>

<img src="http://i.iinfo.cz/images/285/8415-1.png" width="450" height="378" alt="&#160;" />
<p><i>Obrázek 13: Jeden z&nbsp;trackerů pro herní konzoli NES: Nerd
Tracker.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Grafický subsystém NESu</h2>

<p>Grafický subsystém použitý v&nbsp;herní konzoli <i>Nintendo Entertainment
System</i> byl v&nbsp;mnoha ohledech ještě zajímavější než její zvukový
subsystém. Víme již, že herní konzole <i>NES</i> existovala ve variantě pro
televizní normu NTSC i pro normu PAL. Konzole určené pro televizní normu PAL
obsahovaly mikroprocesor <i>2A07</i> s&nbsp;hodinovou frekvencí 1,66 MHz,
zatímco pro normu NTSC byly určeny konzole s&nbsp;mikroprocesorem <i>2A03</i>
používající hodinovou frekvenci 1,79 MHz. I grafické čipy se lišily podle toho,
pro jakou televizní normu byly určeny. Pro normu NTSC se používal čip
<i>RP2C02</i> se vstupní hodinovou frekvencí 5,37 MHz, zatímco pro normu PAL
byl použit čip <i>RP2C07</i> s&nbsp;frekvencí 5,32 MHz. Tyto čipy, označované
taktéž zkratkou <i>PPU</i>, obsahovaly 256 interní paměti využívané systémem
pro zobrazení spritů. Kromě toho přistupoval <i>PPU</i> k&nbsp;samostatnému
čipu RAM o kapacitě dva kilobajty. V&nbsp;této paměti bylo uloženo větší
množství datových struktur nesoucích informace o pozadí scény, o barvové paletě
i o tvarech spritů. Ve skutečnosti však mohl <i>PPU</i> přistupovat i
k&nbsp;paměti ROM umístěné na paměťovém modulu se hrou.</p>

<p><div class="rs-tip-major">Poznámka: podrobnosti o grafickém subsystému,
které je nezbytně nutné znát pro tvorbu her, si popíšeme příště.</div></p>

<img src="http://i.iinfo.cz/images/357/8417-1.png" width="256" height="76" alt="&#160;" />
<p><i>Obrázek 14: Barvová paleta používaná herní konzolí NES.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Assemblery a překladače pro NES</h2>

<p>Vzhledem k&nbsp;tomu, že se mikroprocesor herní konzole <i>NES</i> lišil od
původního čipu <i>MOS 6502</i> jen v&nbsp;několika málo instrukcích, je možné
pro vývoj her pro <i>NES</i> používat assembler nazvaný <i>DASM</i>, o němž
jsme se zmínili v&nbsp;článcích o <i>Batari BASICu</i>. Tento assembler
(přesněji řečeno cross assembler) je v&nbsp;současnosti pravděpodobně
nejpoužívanější, a to i v&nbsp;oblasti dalších zařízení založených na
procesorech řady <i>MOS 6502</i>. Existují či v&nbsp;nedávné minulosti
existovaly však i další assemblery, například starší <i>FASM</i>,
v&nbsp;minulosti poměrně populární <i>X816</i> či <i>P65</i>, který je zajímavý
především tím, že je naprogramován v&nbsp;Perlu a nikoli v&nbsp;jazyku C,
podobně jako mnoho dalších assemblerů. Musím též doplnit informaci o
disassemblerech: 6502 Simulator, TRaCER či NESrev &ndash; ten je psaný
v&nbsp;Javě (v&nbsp;souvislosti s&nbsp;osmibitovými konzolemi jde o poměrně
bizarní technologii :-) a jeho autorem je Kent Hansen.</p>

<img src="http://i.iinfo.cz/images/205/games86-5.png" width="512" height="448" alt="&#160;" />
<p><i>Obrázek 15: Arkanoid pro herní konzoli NES &ndash; třetí
obtížnost.</i></p>

<p>Ovšem díky poměrně velké kapacitě paměti ROM umístěné na cartridgích
s&nbsp;hrami a taktéž díky tomu, že při programování grafického subsystému
<i>NESu</i> není nutné provádět optimalizace na úrovni jednotlivých strojových
cyklů (viz <i>Atari 2600</i>) se dnes mnoho vývojářů uchyluje k&nbsp;použití
programovacího jazyka C. V&nbsp;této oblasti se velmi často používá cross
compiler <i>CC65</i> doplněný o hlavičkové soubory obsahující jména a adresy
řídicích registrů NESu atd.</p>

<img src="http://i.iinfo.cz/images/205/games86-11.png" width="512" height="448" alt="&#160;" />
<p><i>Obrázek 16: První místnost ve hře Flappy (verze pro NES).</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Komplexní vývojová prostředí</h2>

<p>Pro vývoj lze alternativně použít i <i>nbasic</i> (doplněný o <i>nesasm</i>)
což je určitý hybrid mezi jazykem BASIC a assemblerem. Dialekt BASICu, který je
zde použitý, například nepodporuje dynamickou alokaci paměti, proměnné jsou
pouze lokální, pole se umisťují na zadanou absolutní adresu a je podporován
inline assembler. Díky těmto omezením je převod programu z&nbsp;BASICu do
assembleru MOS 6502 poměrně přímočarý, takže programátor může mít velmi dobrou
představu, jakým způsobem se jednotlivé jazykové konstrukce přeloží a využijí.
Mimochodem: <i>nbasic</i> a <i>nesasm</i> byl v&nbsp;roce 2004 dokonce využit i
v&nbsp;univerzitním kurzu pro výuku programování počítačových her
s&nbsp;využitím emulátoru <i>NESu</i>. Bližší informace a především informacemi
(i vtipem) nabité slajdy najdete na adrese <a
href="http://bobrost.com/nes/">http://bobrost.com/nes/</a>.</p>

<img src="http://i.iinfo.cz/images/656/8630.png" width="512" height="448" alt="&#160;" />
<p><i>Obrázek 17: Scrollující prostředí hry Final Fantasy.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Základní programové vybavení pro vývoj her pro NES</h2>

<p>Pro herní konzoli <i>NES</i> dokonce vzniklo i moderně pojaté integrované
vývojové prostředí nazvané <i>NESICIDE</i>. Autory tohoto vývojového prostředí
jsou Christopher Pow, Tim Sarbin a Benjamin Eriksson. V&nbsp;tomto IDE
nalezneme některé nástroje známé i z&nbsp;jiných současných integrovaných
vývojových prostředí, například správce projektů, programátorský editor apod.
Ovšem navíc jsou přidány nástroje, které úzce souvisejí s&nbsp;možnostmi herní
konzole <i>NES</i>. Příkladem může být integrovaný debugger, disassembler
(+code browser) a emulátor<i>NESu</i>, jenž je možné spustit přímo v&nbsp;okně
IDE. Vzhledem k&nbsp;poměrně komplikované struktuře grafické paměti popsané
v&nbsp;navazujícím článku je integrované vývojové prostředí <i>NESICIDE</i>
vybaveno i editorem a prohlížečem barvové palety NESu a taktéž možností
&bdquo;vizualizace&ldquo; obrazové paměti &ndash; je možné pracovat jak
s&nbsp;uživatelsky definovanými znaky (součást pozadí), tak i se sprity.  Díky
tomuto nástroji je možné <i>NESICIDE</i> relativně snadno použít i pro
modifikaci existujících her.</p>

<a href="http://i.iinfo.cz/images/44/174-01.png"><img src="http://i.iinfo.cz/images/44/174-01-prev.png" class="image-160491" width="367" height="270" alt="&#160;" /></a>
<p><i>Obrázek 18: Screenshot vývojového prostředí NESICIDE.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Instalace <strong>ca65</strong> a <strong>cc65</strong></h2>

<p>Instalace assembleru <strong>ca65</strong> i céčkového překladače
<strong>cc65</strong> je na většině distribucí Linuxu snadná, neboť se jedná o
balíčky umístěné přímo v&nbsp;repositářích dané distribuce. Příkladem může být
Linux Mint:</p>

<pre>
$ <strong>sudo apt-get install cc65</strong>
&nbsp;
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
  cc65-doc
The following NEW packages will be installed:
  cc65
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 2 162 kB of archives.
After this operation, 31,8 MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu focal/universe amd64 cc65 amd64 2.18-1 [2 162 kB]
Fetched 2 162 kB in 5s (423 kB/s)
Selecting previously unselected package cc65.
(Reading database ... 291820 files and directories currently installed.)
Preparing to unpack .../archives/cc65_2.18-1_amd64.deb ...
Unpacking cc65 (2.18-1) ...
Setting up cc65 (2.18-1) ...
</pre>

<p>Po dokončení instalace budou k&nbsp;dispozici tři nové nástroje (a několik
podpůrných nástrojů).</p>

<p>V&nbsp;první řadě se jedná o assembler:</p>

<pre>
$ <strong>cc65 --version</strong>
cc65 V2.18 - Ubuntu 2.18-1
</pre>

<p>Dále o překladač céčka:</p>

<pre>
$ <strong>ca65 --version</strong>
ca65 V2.18 - Ubuntu 2.18-1
</pre>

<p>A využijeme i samostatný linker:</p>

<pre>
$ <strong>ld65 --version</strong>
ld65 V2.18 - Ubuntu 2.18-1
</pre>

<p><div class="rs-tip-major">Poznámka: nainstalován je ale například i
disassembler atd.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Instalace emulátoru NESu</h2>

<p>V&nbsp;současnosti existuje několik (řádově desítka) podporovaných a stále
vyvíjených emulátorů konzole NES. Prozatím se spokojíme s&nbsp;jedním
z&nbsp;nejjednodušších emulátorů, kterým je <strong>Nestopia</strong>. Opět se
jedná o nástroj typicky dostupný ve standardních repositářích Linuxových
distribucí:</p>

<pre>
$ <strong>sudo apt-get install nestopia</strong>
&nbsp;
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  nestopia
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 885 kB of archives.
After this operation, 3 933 kB of additional disk space will be used.
0% [Working]y
Get:1 http://archive.ubuntu.com/ubuntu focal/universe amd64 nestopia amd64 1.50-1build1 [885 kB]
Fetched 885 kB in 7s (119 kB/s)
Selecting previously unselected package nestopia.
(Reading database ... 292411 files and directories currently installed.)
Preparing to unpack .../nestopia_1.50-1build1_amd64.deb ...
Unpacking nestopia (1.50-1build1) ...
Setting up nestopia (1.50-1build1) ...
update-alternatives: using /usr/games/nestopia to provide /usr/bin/nes (nes) in auto mode
Processing triggers for desktop-file-utils (0.24+linuxmint1) ...
Processing triggers for mime-support (3.64ubuntu1) ...
Processing triggers for hicolor-icon-theme (0.17-2) ...
Processing triggers for doc-base (0.10.9) ...
Processing 1 added doc-base file...
Processing triggers for gnome-menus (3.36.0-1ubuntu1) ...
Processing triggers for man-db (2.9.1-1) ...
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Kostra programu pro NES vytvořená v&nbsp;céčku</h2>

<p>Nyní, když již máme nainstalován jak assembler, tak i překladač
programovacího jazyka C pro mikroprocesor <i>MOS 6502</i> (a tím pádem i pro
<i>2A03/2A07</i>), si můžeme ukázat, jak by mohla vypadat kostra (základ) hry
naprogramované pro NES. Prozatím si bez dalšího podrobnějšího popisu ukažme
příklad, který byl vytvořen <i>Dougem Frakerem</i> a je dostupný na adrese <a
href="https://github.com/nesdoug/01_Hello/blob/master/hello.c">https://github.com/nesdoug/01_Hello/blob/master/hello.c</a>.
Jedná se o &bdquo;čisté céčko&ldquo;, ovšem celá funkcionalita je postavena na
již předpřipravených knihovnách, z&times;nichž některé části jsou
naprogramovány v&nbsp;assembleru (jedinou výjimkou je klauzule
<strong>#pragma</strong>):</p>

<pre>
<i>/*      simple Hello World, for cc65, for NES</i>
<i> *  writing to the screen with rendering disabled</i>
<i> *      using neslib</i>
<i> *      Doug Fraker 2018</i>
<i> */     </i>
&nbsp; 
&nbsp; 
 &nbsp; 
#include "LIB/neslib.h"
#include "LIB/nesdoug.h" 
&nbsp; 
#define BLACK 0x0f
#define DK_GY 0x00
#define LT_GY 0x10
#define WHITE 0x30
<i>// there's some oddities in the palette code, black must be 0x0f, white must be 0x30</i>
&nbsp; 
&nbsp; 
&nbsp; 
#pragma bss-name(push, "ZEROPAGE")
&nbsp; 
<i>// GLOBAL VARIABLES</i>
<i>// all variables should be global for speed</i>
<i>// zeropage global is even faster</i>
&nbsp; 
unsigned char i;
&nbsp; 
&nbsp; 
&nbsp; 
const unsigned char text[]="Hello World!"; // zero terminated c string
&nbsp; 
const unsigned char palette[]={
BLACK, DK_GY, LT_GY, WHITE,
0,0,0,0,
0,0,0,0,
0,0,0,0
}; 
&nbsp; 
&nbsp; 
&nbsp; 
&nbsp; 
&nbsp; 
void <strong>main</strong> (void) {
&nbsp; 
        ppu_off(); <i>// screen off</i>
&nbsp; 
        pal_bg(palette); <i>//load the BG palette</i>
&nbsp;  
        <i>// set a starting point on the screen</i>
        <i>// vram_adr(NTADR_A(x,y));</i>
        vram_adr(NTADR_A(10,14)); // screen is 32 x 30 tiles
&nbsp; 
        ppu_on_all(); <i>// turn on screen</i>
&nbsp; 
&nbsp; 
        while (1){
                <i>// infinite loop</i>
                <i>// game code can go here later.</i>
                
        }
}
</pre>

<p><div class="rs-tip-major">Poznámka: příště si ukážeme, jakým způsobem se
vlastně tento kód přeloží a jak (či zda vůbec) se bude lišit od programu
napsaného v&nbsp;assembleru.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Kostra programu pro NES vytvořená v&nbsp;assembleru</h2>

<p>V&nbsp;kontextu tohoto miniseriálu bude zajímavější kostra programu
vytvořená přímo v&nbsp;assembleru mikroprocesoru <i>MOS 6502</i>. Následující
program byl získán úpravou kódu popsaného na stránce <a
href="https://www.pagetable.com/?p=410">https://www.pagetable.com/?p=410</a>.
Prozatím si uvedeme jeho prakticky nejjednodušší možnou podobu, ovšem
v&nbsp;dalším článku budou uvedeny všechny možné úpravy a pochopitelně i
rozšíření. K&nbsp;samotnému zdrojovému kódu je dodáván i soubor
<strong>link.cfg</strong> (jméno může být libovolné a použijeme ho při volání
linkeru <strong>ld65</strong>), který obsahuje informaci o struktuře paměti
NESu i názvy jednotlivých segmentů. Právě tyto názvy následně použijeme ve
zdrojovém kódu assembleru, abychom nemuseli všude psát hexadecimální
adresy:</p>

<pre>
MEMORY {
    ZP:     start = $0000, size = $0100, type = rw;
    RAM:    start = $0300, size = $0400, type = rw;
    HEADER: start = $0000, size = $0010, type = rw,
            file = %O, fill = yes;
    PRG0:   start = $8000, size = $4000, type = ro,
            file = %O, fill = yes;
    CHR0a:  start = $0000, size = $1000, type = ro,
            file = %O, fill = yes;
    CHR0b:  start = $1000, size = $1000, type = ro,
            file = %O, fill = yes;
}
&nbsp;
SEGMENTS {
    ZEROPAGE: load = ZP, type = zp;
    BSS:    load = RAM, type = bss;
    INES:   load = HEADER, type = ro, align = $10;
    CODE:   load = PRG0, type = ro;
    VECTOR: load = PRG0, type = ro, start = $BFFA;
    CHR0a:  load = CHR0a, type = ro;
    CHR0b:  load = CHR0b, type = ro;
}
</pre>

<p><div class="rs-tip-major">Poznámka: podrobnější popis jednotlivých segmentů
bude opět uveden příště. Důležitý je zejména segment <strong>INES</strong>, což
je vlastně pseudosegment popisující strukturu vygenerovaného souboru pro NES
(nejedná se totiž o jednoduchý &bdquo;otisk paměti&ldquo; 1:1, ale o soubor
s&nbsp;interní strukturou a hlavičkou definovanou právě
v&nbsp;<strong>INES</strong>).</div></p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 1
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "INES"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
.code
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
.proc nmi
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
.proc irq
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
.proc reset
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx $2000               <i>; nastavení PPUCTRL = 0</i>
        stx $2001               <i>; nastavení PPUMASK = 0</i>
        stx $4015               <i>; nastavení APUSTATUS = 0</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
wait1:  bit $2002               <i>; test obsahu registru PPUSTATUS </i>
        bpl wait1               <i>; skok, pokud je příznak N nulový</i>
wait2:  bit $2002               <i>; test obsahu registru PPUSTATUS </i>
        bpl wait2               <i>; skok, pokud je příznak N nulový</i>
&nbsp;
        <i>; vymazání obsahu RAM</i>
        lda #$00                <i>; vynulování registru A</i>
loop:   sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne loop                <i>; po přetečení 0xff -&gt; 0x00 konec smyčky</i>
&nbsp;
        <i>; čekání na dokončení dalšího snímku, potom může začít herní smyčka</i>
wait3:  bit $2002               <i>; test obsahu registru PPUSTATUS </i>
        bpl wait3               <i>; skok, pokud je příznak N nulový</i>

        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTOR"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>

<p><div class="rs-tip-major">Poznámka: nenechte se vystrašit tím, jak je kód
dlouhý. Je to způsobeno tím, že mezi programem a reálným hardwarem není žádná
další mezivrstva typu ROM s&nbsp;BIOSem a už vůbec ne operační systém. Všechny
operace, včetně inicializace hardware, tedy musíme provádět
explicitně.</div></p>

<pre>
ca65 example01.asm -o example01.o -l example01.list
</pre>

<pre>
ld65 -C link.x example01.o -o example01.nes
</pre>

<pre>
ca65 V2.18 - Ubuntu 2.18-1
Main file   : example01.asm
Current file: example01.asm

000000r 1               ; ---------------------------------------------------------------------
000000r 1               ; Definice hlavičky obrazu ROM
000000r 1               ; ---------------------------------------------------------------------
000000r 1               
000000r 1               ; Size of PRG in units of 16 KiB.
000000r 1               prg_npage = 1
000000r 1               
000000r 1               ; Size of CHR in units of 8 KiB.
000000r 1               chr_npage = 1
000000r 1               
000000r 1               ; INES mapper number.
000000r 1               mapper = 0
000000r 1               
000000r 1               ; Mirroring (0 = horizontal, 1 = vertical)
000000r 1               mirroring = 1
000000r 1               
000000r 1               .segment "INES"
000000r 1  4E 45 53 1A          .byte $4e, $45, $53, $1a
000004r 1  01                   .byte prg_npage
000005r 1  01                   .byte chr_npage
000006r 1  01                   .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
000007r 1  00                   .byte mapper &amp; $f0
000008r 1               .code
000000r 1               
000000r 1               
000000r 1               
000000r 1               ; ---------------------------------------------------------------------
000000r 1               ; Blok paměti s definicí dlaždic 8x8 pixelů
000000r 1               ; ---------------------------------------------------------------------
000000r 1               
000000r 1               .segment "CHR0a"
000000r 1               .segment "CHR0b"
000000r 1               
000000r 1               
000000r 1               
000000r 1               ; ---------------------------------------------------------------------
000000r 1               ; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU
000000r 1               ;
000000r 1               ; viz též https://www.pagetable.com/?p=410
000000r 1               ; ---------------------------------------------------------------------
000000r 1               
000000r 1               ; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)
000000r 1               
000000r 1               .proc nmi
000000r 1  40                   rti                     ; návrat z přerušení
000001r 1               .endproc
000001r 1               
000001r 1               
000001r 1               
000001r 1               ; Obslužná rutina pro IRQ (maskovatelné přerušení)
000001r 1               
000001r 1               .proc irq
000001r 1  40                   rti                     ; návrat z přerušení
000002r 1               .endproc
000002r 1               
000002r 1               
000002r 1               
000002r 1               ; Obslužná rutina pro RESET
000002r 1               
000002r 1               .proc reset
000002r 1                       ; nastavení stavu CPU
000002r 1  78                   sei                     ; zákaz přerušení
000003r 1  D8                   cld                     ; vypnutí dekadického režimu (není podporován)
000004r 1               
000004r 1  A2 FF                ldx #$ff
000006r 1  9A                   txs                     ; vrchol zásobníku nastaven na 0xff (první stránka)
000007r 1               
000007r 1                       ; nastavení řídicích registrů
000007r 1  A2 00                ldx #$00
000009r 1  8E 00 20             stx $2000               ; nastavení PPUCTRL = 0
00000Cr 1  8E 01 20             stx $2001               ; nastavení PPUMASK = 0
00000Fr 1  8E 15 40             stx $4015               ; nastavení APUSTATUS = 0
000012r 1               
000012r 1                       ; čekání na vnitřní inicializaci PPU (dva snímky)
000012r 1  2C 02 20     wait1:  bit $2002               ; test obsahu registru PPUSTATUS
000015r 1  10 FB                bpl wait1               ; skok, pokud je příznak N nulový
000017r 1  2C 02 20     wait2:  bit $2002               ; test obsahu registru PPUSTATUS
00001Ar 1  10 FB                bpl wait2               ; skok, pokud je příznak N nulový
00001Cr 1               
00001Cr 1                       ; vymazání obsahu RAM
00001Cr 1  A9 00                lda #$00                ; vynulování registru A
00001Er 1  95 00        loop:   sta $000, x             ; vynulování X-tého bajtu v nulté stránce
000020r 1  9D 00 01             sta $100, x
000023r 1  9D 00 02             sta $200, x
000026r 1  9D 00 03             sta $300, x
000029r 1  9D 00 04             sta $400, x
00002Cr 1  9D 00 05             sta $500, x
00002Fr 1  9D 00 06             sta $600, x
000032r 1  9D 00 07             sta $700, x             ; vynulování X-tého bajtu v sedmé stránce
000035r 1  E8                   inx                     ; přechod na další bajt
000036r 1  D0 E6                bne loop                ; po přetečení 0xff -> 0x00 konec smyčky
000038r 1               
000038r 1                       ; čekání na dokončení dalšího snímku, potom může začít herní smyčka
000038r 1  2C 02 20     wait3:  bit $2002               ; test obsahu registru PPUSTATUS
00003Br 1  10 FB                bpl wait3               ; skok, pokud je příznak N nulový
00003Dr 1               
00003Dr 1                       ; vlastní herní smyčka je prozatím prázdná
00003Dr 1               game_loop:
00003Dr 1  4C rr rr             jmp game_loop           ; nekonečná smyčka (později rozšíříme)
000040r 1               .endproc
000040r 1               
000040r 1               
000040r 1               
000040r 1               ; ---------------------------------------------------------------------
000040r 1               ; Tabulka vektorů CPU
000040r 1               ; ---------------------------------------------------------------------
000040r 1               
000040r 1               .segment "VECTOR"
000000r 1  rr rr        .addr nmi
000002r 1  rr rr        .addr reset
000004r 1  rr rr        .addr irq
000006r 1               
000006r 1               
000006r 1               
000006r 1               ; ---------------------------------------------------------------------
000006r 1               ; Finito
000006r 1               ; ---------------------------------------------------------------------
000006r 1               
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklad napsaný v&nbsp;assembleru, jenž je určený pro překlad
pomocí <strong>ca65</strong>, byl uložen do Git repositáře, který je dostupný
na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Příklad si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>example01.asm</td><td>zdrojový kód příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm</a></td></tr>
<tr><td>2</td><td>link.cfg</td><td>konfigurace segmentů pro linker <strong>ld65</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg</a></td></tr>
<tr><td>3</td><td>Makefile</td><td>Makefile pro překlad prvního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>NesDev.org<br />
<a href="https://www.nesdev.org/">https://www.nesdev.org/</a>
</li>

<li>How to Program an NES game in C<br />
<a href="https://nesdoug.com/">https://nesdoug.com/</a>
</li>

<li>Getting Started Programming in C: Coding a Retro Game with C Part 2<br />
<a href="https://retrogamecoders.com/getting-started-with-c-cc65/">https://retrogamecoders.com/getting-started-with-c-cc65/</a>
</li>

<li>"Game Development in Eight Bits" by Kevin Zurawel<br />
<a href="https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4">https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4</a>
</li>

<li>Game Development for the 8-bit NES: A class by Bob Rost<br />
<a href="http://bobrost.com/nes/">http://bobrost.com/nes/</a>
</li>

<li>Game Development for the 8-bit NES: Lecture Notes<br />
<a href="http://bobrost.com/nes/lectures.php">http://bobrost.com/nes/lectures.php</a>
</li>

<li>NES Graphics Explained<br />
<a href="https://www.youtube.com/watch?v=7Co_8dC2zb8">https://www.youtube.com/watch?v=7Co_8dC2zb8</a>
</li>

<li>NES GAME PROGRAMMING PART 1<br />
<a href="https://rpgmaker.net/tutorials/227/?post=240020">https://rpgmaker.net/tutorials/227/?post=240020</a>
</li>

<li>NES 6502 Programming Tutorial - Part 1: Getting Started<br />
<a href="https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/">https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/</a>
</li>

<li>Minimal NES example using ca65<br />
<a href="https://github.com/bbbradsmith/NES-ca65-example">https://github.com/bbbradsmith/NES-ca65-example</a>
</li>

<li>List of 6502-based Computers and Consoles<br />
<a href="https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/">https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/</a>
</li>

<li>History of video game consoles (second generation): Wikipedia<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)</a>
</li>

<li>6502 - the first RISC &micro;P<br />
<a href="http://ericclever.com/6500/">http://ericclever.com/6500/</a>
</li>

<li>3 Generations of Game Machine Architecture<br />
<a href="http://www.atariarchives.org/dev/CGEXPO99.html">http://www.atariarchives.org/dev/CGEXPO99.html</a>
</li>

<li>bee - The Multi-Console Emulator<br />
<a href="http://www.thebeehive.ws/">http://www.thebeehive.ws/</a>
</li>

<li>Nerdy Nights Mirror<br />
<a href="https://nerdy-nights.nes.science/">https://nerdy-nights.nes.science/</a>
</li>

<li>NES Development Day 1: Creating a ROM<br />
<a href="https://www.moria.us/blog/2018/03/nes-development">https://www.moria.us/blog/2018/03/nes-development</a>
</li>

<li>How to Start Making NES Games<br />
<a href="https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/">https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>cc65 Users Guide<br />
<a href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>
</li>

<li>ld65 Users Guide<br />
<a href="https://cc65.github.io/doc/ld65.html">https://cc65.github.io/doc/ld65.html</a>
</li>

<li>da65 Users Guide<br />
<a href="https://cc65.github.io/doc/da65.html">https://cc65.github.io/doc/da65.html</a>
</li>

<li>Nocash NES Specs<br />
<a href="http://nocash.emubase.de/everynes.htm">http://nocash.emubase.de/everynes.htm</a>
</li>

<li>Nintendo Entertainment System<br />
<a href="http://cs.wikipedia.org/wiki/NES">http://cs.wikipedia.org/wiki/NES</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>NesDev<br />
<a href="http://nesdev.parodius.com/">http://nesdev.parodius.com/</a>
</li>

<li>2A03 technical reference<br />
<a href="http://nesdev.parodius.com/2A03%20technical%20reference.txt">http://nesdev.parodius.com/2A03%20technical%20reference.txt</a>
</li>

<li>NES Dev wiki: 2A03<br />
<a href="http://wiki.nesdev.com/w/index.php/2A03">http://wiki.nesdev.com/w/index.php/2A03</a>
</li>

<li>Ricoh 2A03<br />
<a href="http://en.wikipedia.org/wiki/Ricoh_2A03">http://en.wikipedia.org/wiki/Ricoh_2A03</a>
</li>

<li>2A03 pinouts<br />
<a href="http://nesdev.parodius.com/2A03_pinout.txt">http://nesdev.parodius.com/2A03_pinout.txt</a>
</li>

<li>27c3: Reverse Engineering the MOS 6502 CPU (en)<br />
<a href="https://www.youtube.com/watch?v=fWqBmmPQP40">https://www.youtube.com/watch?v=fWqBmmPQP40</a>
</li>

<li>“Hello, world” from scratch on a 6502 — Part 1<br />
<a href="https://www.youtube.com/watch?v=LnzuMJLZRdU">https://www.youtube.com/watch?v=LnzuMJLZRdU</a>
</li>

<li>A Tour of 6502 Cross-Assemblers<br />
<a href="https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/">https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/</a>
</li>

<li>Nintendo Entertainment System (NES)<br />
<a href="https://8bitworkshop.com/docs/platforms/nes/">https://8bitworkshop.com/docs/platforms/nes/</a>
</li>

<li>Question about NES vectors and PPU<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t4154.xhtml">https://archive.nes.science/nesdev-forums/f10/t4154.xhtml</a>
</li>

<li>How do mapper chips actually work?<br />
<a href="https://archive.nes.science/nesdev-forums/f9/t13125.xhtml">https://archive.nes.science/nesdev-forums/f9/t13125.xhtml</a>
</li>

<li>INES<br />
<a href="https://www.nesdev.org/wiki/INES">https://www.nesdev.org/wiki/INES</a>
</li>

<li>NES Basics and Our First Game<br />
<a href="http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html">http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html</a>
</li>

<li>Where is the reset vector in a .nes file?<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t17413.xhtml">https://archive.nes.science/nesdev-forums/f10/t17413.xhtml</a>
</li>

<li>CPU memory map<br />
<a href="https://www.nesdev.org/wiki/CPU_memory_map">https://www.nesdev.org/wiki/CPU_memory_map</a>
</li>

<li>How to make NES music<br />
<a href="http://blog.snugsound.com/2008/08/how-to-make-nes-music.html">http://blog.snugsound.com/2008/08/how-to-make-nes-music.html</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>MIDINES<br />
<a href="http://www.wayfar.net/0xf00000_overview.php">http://www.wayfar.net/0xf00000_overview.php</a>
</li>

<li>FamiTracker<br />
<a href="http://famitracker.com/">http://famitracker.com/</a>
</li>

<li>nerdTracker II<br />
<a href="http://nesdev.parodius.com/nt2/">http://nesdev.parodius.com/nt2/</a>
</li>

<li>How NES Graphics work<br />
<a href="http://nesdev.parodius.com/nesgfx.txt">http://nesdev.parodius.com/nesgfx.txt</a>
</li>

<li>NES Technical/Emulation/Development FAQ<br />
<a href="http://nesdev.parodius.com/NESTechFAQ.htm">http://nesdev.parodius.com/NESTechFAQ.htm</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

