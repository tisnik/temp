<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Jakými způsoby je možné reprezentovat číselné hodnoty v operační paměti počítače?</a></p>
<p><a href="#k03">*** 3. Uložení čísel ve formátu pevné řádové binární tečky</a></p>
<p><a href="#k04">*** 4. Přednosti a zápory formátu pevné řádové tečky</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>V&nbsp;seriálu o tvorbě her a dem na platformě IBM PC jsme si popsali základní aritmetické instrukce mikroprocesorů řady Intel 80x86. Taktéž jsme si podrobně popsali matematický koprocesor Intel 8087 i jeho následovníky. Pokud mělo PC tento koprocesor nainstalován, mohlo poměrně rychle provádět operace s&nbsp;hodnotami uloženými v&nbsp;systému plovoucí řádové čárky.</p>

<p>Jedná se o takzvané uložení vybrané množiny numerických hodnot v&nbsp;systému <i>pevné řádové (binární) tečky</i>.  V&nbsp;tomto textu se budeme záměrně dopouštět drobného prohřešku oproti stávající normě českého jazyka, protože budeme neustále psát o řádové, desetinné a binární <strong>tečce</strong> a nikoli <strong>čárce</strong> &ndash; z&nbsp;hlediska anglické terminologie to bude více konzistentní, i když z&nbsp;češtinského hlediska by bylo zcela jistě korektnější psát o řádové <strong>čárce</strong>, protože se v&nbsp;češtině celá část čísla od části desetinné odděluje právě čárkou a nikoli tečkou, jak je tomu zvykem v&nbsp;anglosaských zemích (programátoři, kterým je tento článek určen především, však tuto skutečnost zcela jistě znají).</p>

<p>V&nbsp;anglické literatuře se zmíněná forma reprezentace číselných hodnot označuje zkratkou <strong>FX</strong> nebo <strong>FXP</strong> (<i><strong>f</strong>i<strong>x</strong>ed <strong>p</strong>oint</i>), zatímco dnes častěji používaná reprezentace v&nbsp;systému plovoucí řádové tečky se všeobecně označuje zkratkou <strong>FP</strong> (<i>floating point</i>). V&nbsp;jednom článku jsem dokonce místo zkratky <strong>FX</strong> viděl i zkratku <strong>XP</strong> (<i>fi<strong>x</strong>ed <strong>p</strong>oint</i>), ale to bylo před mnoha lety, v&nbsp;době Windows 95 :-). Nejprve si vysvětlíme princip obou metod použitých pro ukládání podmnožiny racionálních čísel a posléze si také řekneme, jaké výhody a nevýhody jednotlivé principy přináší v&nbsp;každodenní programátorské praxi a ve kterých situacích je vhodnější použít pevnou řádovou čárku. V&nbsp;dalším textu budeme formát pevné binární řádové tečky zkracovat na <strong>FX formát</strong> a formát používající plovoucí řádovou tečku budeme zapisovat jako <strong>FP formát</strong>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Jakými způsoby je možné reprezentovat číselné hodnoty v operační paměti počítače?</h2>

<p>Při ukládání číselných hodnot do operační paměti počítače záhy narazíme na některé problémy, z&nbsp;nichž některé souvisí s&nbsp;konečným počtem bitů, které pro uložení dané hodnoty "obětujeme" a další vycházejí ze způsobu zpracování hodnot mikroprocesorem či matematickým koprocesorem. V&nbsp;konečném počtu bitů je totiž možné uložit pouze <strong>konečné</strong> množství různých hodnot a je plně v&nbsp;rukou programátora, jak efektivně daný počet bitů využije či naopak promrhá ukládáním nepodstatných informací. Poměrně často se totiž stává, že i program využívající dvojitou či dokonce rozšířenou přesnost čísel při <strong>FP</strong> operacích (tj.&nbsp;datové typy <i>double</i> a <i>extended/temporary</i>) dává nesprávné výsledky dané nepochopením principu práce <strong>FP</strong> aritmetiky a přitom je možné se přesnějších výsledků dobrat i při použití pouhých 32 bitů, ale s&nbsp;pečlivě vyváženými aritmetickými a bitovými operacemi.</p>

<p>Na druhou stranu nejsou dnes používané mikroprocesory tak univerzálními zařízeními, jak by se na první pohled mohlo zdát. Mikroprocesory jsou totiž (většinou) navrženy tak, aby účinně, například v&nbsp;rámci jedné operace či instrukce, zpracovávaly pouze konstantní počet bitů. Příkladem mohou být dnes velmi rozšířené procesory řady x86, které jsou velmi dobré při práci s&nbsp;32 bitovými hodnotami, ale při požadavku na aritmetické výpočty probíhající na (řekněme) 21 bitech se veškerá jejich efektivita ztrácí a procesor se širokými vnitřními sběrnicemi, matematickým koprocesorem atd. se potýká s&nbsp;prohazováním jednotlivých bitů. Mnohem lepší situace nastane v&nbsp;případě, že se nějaká operace implementuje na programovatelném poli FPGA &ndash; zde je možné vytvořit obvody provádějící matematické a logické operace s&nbsp;libovolným počtem bitů, čímž se oproti univerzálním řešením (např.&nbsp;konstantní bitová šířka sběrnice a/nebo registrů) ušetří mnoho plochy těchto velmi zajímavých obvodů (FPGA mohou mimochodem znamenat i velkou šanci pro hnutí open source &ndash; pomocí nich by mohlo vznikat, a někde už vzniká <strong>open hardware</strong>, které by mohlo odstranit závislost na "uzavřených" síťových a grafických kartách apod.).</p>

<p>Vraťme se však ke způsobům reprezentace číselných hodnot v&nbsp;operační paměti. Nejprve předpokládejme, že pro reprezentaci vlastností určitého objektu či stavu z&nbsp;reálného světa použijeme <i>N</i> binárních číslic (bitů), tj.&nbsp;základních jednotek informace, která může nabývat pouze jedné ze dvou povolených hodnot (ty se značí například symboly <i>yes/no</i> nebo <i>true</i>/<i>false</i>, ale my se budeme spíše držet označení <i>0</i> a <i>1</i>). Pomocí této uspořádané <i>N</i>-tice je možné popsat celkem:</p>

<p><i>2<sub>0</sub>&times;2<sub>1</sub>&times;2<sub>2</sub> ... 2<sub>N-1</sub>=2<sup>N</sup></i></p>

<p>jednoznačných, tj.&nbsp;navzájem odlišných, stavů. Množina těchto stavů může reprezentovat prakticky jakýkoliv abstraktní či reálný objekt. Přitom si musíme uvědomit, že u této množiny není implicitně řečeno ani myšleno, že se jedná například o celá kladná čísla, to je pouze jedna z&nbsp;mnoha možných interpretací zvolené <i>N</i>-tice (my programátoři máme tendenci považovat celá kladná čísla za přirozenou interpretaci bitové <i>N</i>-tice, to však vychází pouze z&nbsp;našeho pohledu na svět a z&nbsp;našich zkušeností).  Reprezentaci momentálního stavu abstraktního či reálného objektu si můžeme představit jako zobrazení z&nbsp;množiny binárních stavů na elementy vzorové (a obecně neuspořádané) množiny. Nejčastěji používanými zobrazeními jsou zobrazení množiny binárních stavů na interval celých kladných čísel (<i>Unsigned Integers</i>), popřípadě na interval celých čísel (<i>Signed Integers</i>).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Uložení čísel ve formátu pevné řádové binární tečky</h2>

<p>Numerické hodnoty zapsané ve&nbsp;formátu <i>pevné řádové binární tečky</i> se chápou jako podmnožina racionálních čísel, což jsou taková čísla, jejichž hodnoty lze vyjádřit vztahem:</p>

<p><i>x<sub>FX</sub>=a/b &nbsp;&nbsp; a,b leží v Z, b &ne; 0</i></p>

<p>Číselné hodnoty z&nbsp;uvažované podmnožiny jsou navíc omezeny podmínkou:</p>

<p><i>b=2<sup>k</sup> &nbsp;&nbsp; b leží v Z, k leží v Z<sup>+</sup></i></p>

<p>Protože <i>b</i> je celočíselnou mocninou dvojky (a ne desítky či jiného základu), určuje jeho hodnota <i>n</i> polohu <i>binární tečky</i> v&nbsp;uloženém čísle. Další podmínkou, která má však spíše implementační charakter, je zachování stejného počtu binárních cifer v&nbsp;každém reprezentovaném čísle, což mimo jiné znamená, že všechna čísla mají řádovou binární tečku umístěnou na stejném místě &ndash; z&nbsp;této podmínky ostatně plyne i název popisovaného způsobu reprezentace vybrané podmnožiny racionálních čísel. Tak jako i v&nbsp;jiných reprezentacích čísel, jsou nulové číslice před první nenulovou cifrou a za poslední nenulovou cifrou nevýznamné, proto je není zapotřebí uvádět.</p>

<p>Prakticky může být číselná hodnota v&nbsp;systému pevné řádové tečky uložena na osmi bitech například následujícím způsobem (uvažujeme pouze kladné hodnoty):</p>

<table>
<tr><td>Pozice bitu        </td><td>8&nbsp;&nbsp;&nbsp;&nbsp;</td><td>7&nbsp;&nbsp;&nbsp;&nbsp;</td><td>6&nbsp;&nbsp;&nbsp;&nbsp;</td><td>5&nbsp;&nbsp;&nbsp;&nbsp;</td><td>4&nbsp;&nbsp;&nbsp;&nbsp;</td><td>3&nbsp;&nbsp;&nbsp;&nbsp;</td><td>2&nbsp;&nbsp;&nbsp;&nbsp;</td><td>1&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td>Váha bitu          </td><td>2<sup>4</sup></td><td>2<sup>3</sup></td><td>2<sup>2</sup></td><td>2<sup>1</sup></td><td>2<sup>0</sup></td><td>2<sup>-1</sup></td><td>2<sup>-2</sup></td><td>2<sup>-3</sup></td></tr>
<tr><td>Desítková váha bitu</td><td>16</td><td>8</td><td>4</td><td>2</td><td>1</td><td>0,5</td><td>0,25</td><td>0,125</td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Přednosti a zápory formátu pevné řádové tečky</h2>

<p>Ve výše uvedeném příkladu je binární řádová tečka umístěna vždy mezi třetím a čtvrtým bitem. Vzhledem k&nbsp;tomu, že je tato skutečnost dopředu známá algoritmu, který provádí zpracování čísel, není zapotřebí spolu s&nbsp;číslem uchovávat i pozici binární tečky, což výrazně snižuje počet bitů, které je zapotřebí rezervovat pro čísla ze zadaného rozsahu. To je tedy první přednost systému pevné řádové tečky &ndash; pokud programátor dopředu zná rozsah všech zpracovávaných hodnot a požadovanou přesnost, může být výhodné tento systém použít. Programátor také díky explicitním určení polohy řádové tečky může určit, ve kterém místě programu se musí přesnost či rozsah zvýšit a kdy naopak snížit. Lépe se tak využije počet bitů, které můžeme pro uložení jednoho čísla obětovat (typicky je tento počet bitů roven délce slova mikroprocesoru, popř.&nbsp;jeho celočíselnému násobku či naopak podílu).</p>

<p>Jak se dozvíme v&nbsp;následujícím textu, je možné základní matematické operace (sčítání, odčítání, násobení a dělení) poměrně jednoduše implementovat i při použití formátu pevné řádové tečky.  V&nbsp;případě, že není k&nbsp;dispozici specializovaný (a současně velmi komplikovaný) matematický koprocesor, je mnohdy mnohem jednodušší a rychlejší implementovat matematické operace v&nbsp;FX formátu. To je případ mnoha jednočipových mikroprocesorů (mikrořadičů), signálových procesorů, ale i specializovaných zařízení obsahujících programovatelné obvody CPLD či FPGA.  Dnes sice mají komplikovanější (a dražší) FPGA implementovanou i jednotku FPU, ale mnohdy je výhodnější použít FPGA bez této jednotky a potřebné operace si do tohoto obvodu "vypálit" po svém.</p>

<p>Třetí výhodou je fakt, že u FX formátu může programátor navrhnout a posléze také dodržet požadovanou přesnost všech prováděných výpočtů. To je velký rozdíl oproti FP formátu (resp.&nbsp;jeho podmnožinám, které se nejčastěji používají).  Není vzácností narazit na programy, které používají datové typy <i>float</i> či <i>double</i> a přitom jsou výpočty prováděné v&nbsp;těchto programech zatíženy velkou chybou, protože si programátoři plně neuvědomují některé limity FP formátu. Kritické jsou například výpočty s&nbsp;peněžními hodnotami, ale i pouhé sčítání čísel, jež se od sebe o mnoho řádů liší, vede k&nbsp;velkým chybám, které dokonce mohou zapříčinit vznik nekonečných smyček, populární dělení nulou atd.</p>

<p>FX formát má však i některé nevýhody. První nevýhoda spočívá v&nbsp;tom, že tento formát není příliš podporován, a to ani po programové stránce (podpora v&nbsp;programovacích jazycích), ani výrobci mikroprocesorů pro počítače PC.  Situace je však odlišná v&nbsp;oblasti jednočipových mikropočítačů, signálových procesorů (DSP), řídicích systémů, nebo například u IBM RS 6000, který kromě jednotky FPU obsahuje i FXU &ndash; jednotku pro provádění výpočtů v&nbsp;pevné řádové binární čárce. Na platformě x86 je možné pro FX formát použít instrukce <strong>MMX</strong>.</p>

<p>Dále může být použití FX formátu nevýhodné v&nbsp;případě, že se mají zpracovávat numerické hodnoty, které mají velkou dynamiku, tj.&nbsp;poměr mezi nejvyšší a nejnižší absolutní hodnotou. V&nbsp;takovém případě by se mohlo stát, že by se při použití FX formátu muselo pro každé číslo alokovat velké množství bitů, které by mohlo dokonce překročit počet bitů nutných pro FP formát. Také v&nbsp;případě, kdy dopředu nevíme, jaké hodnoty se budou zpracovávat, může být výhodnější použití FP formátu. Zde se však nabízí otázka, ve kterých případech nevíme, jaké hodnoty můžeme na vstupu získat: většinou je již z&nbsp;podstaty úlohy dopředu známé, s&nbsp;čím je možné počítat a které hodnoty jsou naprosto nesmyslné. Je však pravdou, že takovou analýzu málokdo dělá a když při výpočtech ve <i>floatech</i> dochází k&nbsp;chybám, tak se bez přemýšlení program přepíše na <i>doubly</i> a problém se tak buď odstraní, nebo alespoň odsune na pozdější dobu, například do chvíle, kdy jsou programu předložena reálná data a ne "pouze" data testovací.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Dvojkový doplněk a čísla s&nbsp;pevnou řádovou binární čárkou</h2>

<p>Dvojkový doplněk hodnoty <i>x</i> (označovaný zde kvůli nedostatkům HTML symbolem <i>#x</i>) lze získat z&nbsp;jejího jedničkového doplňku <i>~x</i> velmi jednoduše tak, že se k&nbsp;tomuto doplňku přičte jednotka, tj.:</p>

<p><i>#x=~x+1=2<sup>N</sup>-x</i></p>

<p>Operaci jedničkového i dvojkového doplňku je možné provádět kromě celočíselných reprezentací i u&nbsp;reprezentace v&nbsp;pevné řádové binární čárce. Pokud je <i>N</i>-bitové slovo interpretováno ve&nbsp;vyjádření v&nbsp;pevné řádové čárce, může nabývat hodnot ležících v&nbsp;podmnožině <i>P<sub>2</sub></i> racionálních čísel:</p>

<p><i>P<sub>2</sub>=p/2<sup>b</sup> | -2<sup>N-1</sup> &le; p &le; 2<sup>N-1</sup>-1</i></p>

<p>Podmnožina <i>P<sub>2</sub></i> obsahuje stále <i>2<sup>N</sup></i> prvků, stejně jako podmnožina <i>P<sub>1</sub></i> definovaná v&nbsp;předchozích kapitolách. Novou reprezentaci čísel budu v&nbsp;dalším textu označovat symbolem <i>A(a,b)</i>, kde platí <i>a=N-b-1</i>.</p>

<p>Hodnota <i>N</i>-bitového čísla <i>x</i> je v&nbsp;reprezentaci <i>A(a,b)</i> vyjádřena výrazem:</p>

<p><i>x=1/2<sup>b</sup>(-2<sup>N-1</sup>x<sub>N-1</sub>+&sum;<sub>0</sub><sup>N-2</sup>2<sup>n</sup>x<sub>n</sub>)</i></p>

<p>kde symbol <i>x<sub>n</sub></i> značí hodnotu <i>n</i>-tého bitu čísla <i>x</i>. Rozsah čísel reprezentovaných v&nbsp;<i>A(a,b)</i> je možné vyjádřit nerovností:</p>

<p><i>-2<sup>N-1-b</sup> &le; x &le; 2<sup>N-1-b</sup>-1/2<sup>b</sup></i></p>

<p>Za zmínku stojí také skutečnost, že počet významových bitů je v&nbsp;reprezentaci <i>A(a,b)</i> o&nbsp;jednotku nižší, než u&nbsp;reprezentace <i>U(a,b)</i>. Pro reprezentaci absolutní hodnoty čísla je použito pouze nižších <i>N-1</i> bitů, nejvyšší bit je díky své funkci označován jako <strong>znaménkový bit</strong> (<i>sign bit</i>), což je ostatně patrné z&nbsp;podvýrazu <i>-2<sup>N-1</sup>x<sub>N-1</sub></i>.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Základní vlastnosti čísel reprezentovaných v&nbsp;systému pevné řádové čárky</h2>

<p>V&nbsp;následujících odstavcích jsou vypsány základní vlastnosti číselných hodnot, jež jsou reprezentovány v&nbsp;systému s&nbsp;pevnou řádovou binární čárkou. Pravidla jsou uvedena jak pro formát <i>U(a,b)</i> (tj.&nbsp;pouze podmnožinu z&nbsp;kladných racionálních čísel), tak i pro formát <i>A(a,b)</i>, tj.&nbsp;pro podmnožinu z&nbsp;kladných i záporných racionálních čísel.</p>

<p><a name="k061"></a></p>
<h2>6.1 Počet bitů</h2>

<p>Počet bitů nutných pro uložení číselné hodnoty v&nbsp;reprezentaci <i>U(a,b)</i> je roven výsledku výrazu <i>a+b</i>, což mimo jiné značí, že&nbsp;všechny bity daného bitového vektoru jsou beze zbytku použity pro uložení číselné hodnoty. V&nbsp;reprezentaci <i>A(a,b)</i> je počet bitů roven hodnotě <i>a+b+1</i>, protože jeden bit navíc je nutné rezervovat pro uložení znaménka ukládané číselné hodnoty &ndash; viz výše zmíněný znaménkový bit.</p>

<p><a name="k062"></a></p>
<h2>6.2 Rozsah hodnot</h2>

<p>Rozsah hodnot v&nbsp;reprezentaci čísel ve&nbsp;formátu <i>U(a,b)</i> lze vyjádřit vztahem <i>0&le; x<sub>1</sub> &le; 2<sup>a</sup>-2<sup>-b</sup></i>, pro reprezentaci <i>A(a,b)</i> je rozsah hodnot vyjádřen nerovností: <i>-2<sup>a</sup>&le; x<sub>2</sub> &le; 2<sup>a</sup>-2<sup>-b</sup></i>, což značí, že&nbsp;ve druhém uvedeném typu reprezentace je možné zaznamenat dvojnásobné množství navzájem odlišných hodnot &ndash; tato skutečnost je ostatně dána i větším počtem bitů pro reprezentaci <i>A(a,b)</i> oproti reprezentaci <i>U(a,b)</i> při stejných hodnotách parametrů <i>a</i> i <i>b</i>.</p>

<p><a name="k063"></a></p>
<h2>6.3 Platnost aritmetické operace součtu či rozdílu</h2>

<p>Platnost aritmetické operace součtu či rozdílu hodnot uložených ve&nbsp;formátu <i>U(a,b)</i> pro kladná čísla <i>U(a<sub>1</sub>,b<sub>1</sub>)<i> a </i>U(a<sub>2</sub>,b<sub>2</sub>)</i> lze zaručit pouze tehdy, jestliže je <i>a<sub>1</sub></i> rovno <i>a<sub>2</sub></i> a současně <i>b<sub>1</sub></i> rovno <i>b<sub>2</sub></i>, tj.&nbsp;obě hodnoty jsou uloženy ve&nbsp;slově (bitovém vektoru) se stejným množstvím (počtem) bitů a poloha řádové binární čárky je konstantní. Pro číselné hodnoty uložené ve&nbsp;druhém popisovaném formátu <i>A(a<sub>1</sub>,b<sub>1</sub>)<i> a </i>A(a<sub>2</sub>,b<sub>2</sub>)</i> platí stejné podmínky. Pokud není alespoň jedna z&nbsp;podmínek splněna, je nutné před provedením aditivní operace provést konverzi hodnot na shodný formát <i>U(a<sub>x</sub>, b<sub>y</sub>)</i> resp. <i>A(a<sub>x</sub>, b<sub>y</sub>)</i>.</p>

<p><a name="k064"></a></p>
<h2>6.4 Rozsah výsledků po aritmetické operaci sčítání</h2>

<p>Rozsah výsledků po aritmetické operaci sčítání dvou číselných hodnot ve&nbsp;formátu <i>U(a,b)</i> lze vyjádřit následovně:</p>

<p><i>U(a,b)+U(a,b)=U(a+1,b)</i></p>

<p>tj.&nbsp;pro uložení výsledku je obecně zapotřebí vyhradit slovo širší právě o&nbsp;jeden bit. Pro dvě hodnoty ve&nbsp;formátu <i>A(a,b)</i> platí stejný vztah, jelikož se počet bitů obecně také zvyšuje o&nbsp;jednotku bez ohledu na znaménko výsledku:</p>

<p><i>A(a,b)+A(a,b)=A(a+1,b)</i></p>

<p><a name="k065"></a></p>
<h2>6.5 Rozsah výsledků po provedené aritmetické operaci násobení</h2>

<p>Rozsah výsledků po provedené aritmetické operaci násobení dvou libovolných číselných hodnot uložených ve&nbsp;formátu <i>U(a<sub>1</sub>,b<sub>1</sub>)</i> a <i>U(a<sub>2</sub>,b<sub>2</sub>)</i> je možné vyjádřit následujícím vztahem:</p>

<p><i>U(a<sub>1</sub>, b<sub>1</sub>) &times; U(a<sub>2</sub>, b<sub>2</sub>)=U(a<sub>1</sub>+a<sub>2</sub>, b<sub>1</sub>+b<sub>2</sub>)</i></p>

<p>Výše uvedeným vztahem je popsáno, že se při ukládání výsledků takto provedené multiplikativní operace zvyšuje jak počet významových bitů před binární řádovou čárkou, tak i stejnou měrou počet zlomkových bitů, tj.&nbsp;bitů umístěných za&nbsp;binární čárkou. Při provádění multiplikativní operace s&nbsp;číselnými hodnotami uloženými ve&nbsp;formátu <i>A(a<sub>1</sub>,b<sub>1</sub>)<i> a </i>A(a<sub>2</sub>,b<sub>2</sub>)</i> je situace při ukládání výsledků následující:</p>

<p><i>A(a<sub>1</sub>,b<sub>1</sub>) &times; A(a<sub>2</sub>, b<sub>2</sub>)=A(a<sub>1</sub>+a<sub>2</sub>+1, b<sub>1</sub>+b<sub>2</sub>)</i></p>

<p>Tento vztah je poněkud odlišný od vztahu předchozího, ale při bližším rozboru je opět snadno pochopitelný. U&nbsp;číselných hodnot ve&nbsp;formátu <i>A(a,b)</i> je totiž jeden (nejvyšší) bit rezervován pro vyjádření znaménka uložené hodnoty. Po násobení je také nutné vyjádřit znaménko výsledku, ale opětovně pouze na jednom bitu, nikoli na bitech dvou.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>VESA BIOS Extensions<br />
<a href="https://en.wikipedia.org/wiki/VESA_BIOS_Extensions">https://en.wikipedia.org/wiki/VESA_BIOS_Extensions</a>
</li>

<li>Video Electronics Standards Association<br />
<a href="https://en.wikipedia.org/wiki/Video_Electronics_Standards_Association">https://en.wikipedia.org/wiki/Video_Electronics_Standards_Association</a>
</li>

<li>DJGPP (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/DJGPP">https://cs.wikipedia.org/wiki/DJGPP</a>
</li>

<li>DJGPP home page<br />
<a href="http://www.delorie.com/djgpp/">http://www.delorie.com/djgpp/</a>
</li>

<li>DJGPP Zip File Picker<br />
<a href="http://www.delorie.com/djgpp/zip-picker.html">http://www.delorie.com/djgpp/zip-picker.html</a>
</li>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>Guide: VBE 2.0 graphics modes<br />
<a href="https://delorie.com/djgpp/doc/ug/graphics/vbe20.html">https://delorie.com/djgpp/doc/ug/graphics/vbe20.html</a>
</li>

<li>NASM instruction list<br />
<a href="https://userpages.cs.umbc.edu/chang/cs313/nasmdoc/html/nasmdocb.html">https://userpages.cs.umbc.edu/chang/cs313/nasmdoc/html/nasmdocb.html</a>
</li>

<li>BitBlt function (wingdi.h)<br />
<a href="https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-bitblt">https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-bitblt</a>
</li>

<li>SetDIBitsToDevice function (wingdi.h)<br />
<a href="https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-setdibitstodevice">https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-setdibitstodevice</a>
</li>

<li>Why did line printers have 132 columns?<br />
<a href="https://retrocomputing.stackexchange.com/questions/7838/why-did-line-printers-have-132-columns">https://retrocomputing.stackexchange.com/questions/7838/why-did-line-printers-have-132-columns</a>
</li>

<li>Tabulating machine<br />
<a href="https://en.wikipedia.org/wiki/Tabulating_machine">https://en.wikipedia.org/wiki/Tabulating_machine</a>
</li>

<li>Why do printers print 132 columns on 14 7/8″ paper? It’s history<br />
<a href="https://blog.adafruit.com/2019/01/22/why-do-printers-print-132-columns-on-14-7-8-paper-its-history-vintagecomputing-kenshirriff-ibm/">https://blog.adafruit.com/2019/01/22/why-do-printers-print-132-columns-on-14-7-8-paper-its-history-vintagecomputing-kenshirriff-ibm/</a>
</li>

<li>IBM 1403 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_1403">https://en.wikipedia.org/wiki/IBM_1403</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

