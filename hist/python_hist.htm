<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Další kulaté výročí v IT: dvacet let existence Pythonu 2</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Další kulaté výročí v IT: dvacet let existence Pythonu 2</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na sérii článků o kulatých výročích v oblasti IT, které jsme oslavili loni i začátkem letoška, dnes navážeme. Blíží se totiž dvacáté výročí vydání Pythonu 2 a relativně brzy oslavíme i třicáté narozeniny samotného jazyka Python. Z kdysi marginálního jazyka se Python dostal prakticky až na samotný vrchol popularity.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Dvacet let existence Pythonu 2</a></p>
<p><a href="#k02">2. Předchůdce Pythonu &ndash; neúspěšný jazyk ABC</a></p>
<p><a href="#k03">3. Odsazování v&nbsp;ABC a Pythonu</a></p>
<p><a href="#k04">4. Další skriptovací jazyk?</a></p>
<p><a href="#k05">5. Python 1</a></p>
<p><a href="#k06">6. Python 2</a></p>
<p><a href="#k07">7. Svět Pythonu aneb nejedná se pouze o CPython</a></p>
<p><a href="#k08">8. Jython a IronPython</a></p>
<p><a href="#k09">9. PyPy a RPython</a></p>
<p><a href="#k10">10. Projekt Cython</a></p>
<p><a href="#k11">11. Numba aneb další přístup k překladu Pythonu do nativního kódu</a></p>
<p><a href="#k12">12. Programovací jazyk Python ve webovém prohlížeči</a></p>
<p><a href="#k13">13. Rozšíření programovacího jazyka Python o další vlastnosti</a></p>
<p><a href="#k14">14. GDScript</a></p>
<p><a href="#k15">15. Příklady použití Pythonu</a></p>
<p><a href="#k16">16. Pygame a Pyglet</a></p>
<p><a href="#k17">17. Python a oblast CAD/CAM</a></p>
<p><a href="#k18">18. Jazyk Python na vrcholu popularity</a></p>
<p><a href="#k19">19. Budoucnost Pythonu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Dvacet let existence Pythonu 2</h2>

<p><i>&bdquo;Interview Guido van Rossum: “I'd rather write code than
papers.”&ldquo;</i></p>

<p>Na úvod dnešního článku si zopakujme, že v&nbsp;loňském roce jsme si na
stránkách Roota připomněli trojici kulatých a současně i významných výročí
v&nbsp;oblasti programovacích jazyků. Po dvojici článků o <a
href="https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/">třicátých
narozeninách Turbo Pascalu 5.5</a> a <a
href="https://www.root.cz/clanky/the-future-s-bright-the-future-s-cobol/">šedesátém
výročí vzniku programovacího jazyka COBOL</a> jsme si připomněli i sedmdesát
let, které <a
href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">uběhly
od vzniku nástroje</a>, který dnes nazýváme <i>assembler</i>. Díky tomu, že
samotný obor mechanických, elektromechanických a později čistě elektronických
počítačů existuje již osmdesát let, lze oprávněně očekávat, že další významná
výročí oslavíme i letos. Ostatně již stačil vyjít článek o jednom
z&nbsp;nejvýznamnějších programovacích jazyků vůbec. Jednalo se o <a
href="https://www.root.cz/clanky/sedesatiny-prevratneho-programovaciho-jazyka-algol-60/">ALGOL</a>,
přesněji řečeno o ALGOL-60. Ovšem zatímco samotný ALGOL je i přes velký vliv na
další vývoj programovacích jazyků prakticky mrtvým projektem, zdaleka to
neplatí pro dnešního jubilanta &ndash; programovací jazyk Python.</p>

<img src="https://i.iinfo.cz/images/55/algol-60-1.png" class="image-402359" alt="&#160;" width="607" height="159" />
<p><i>Obrázek 1: Vývoj programovacích jazyků, jejichž prapředkem je
ALGOL-58.</i></p>

<p>Ve skutečnosti letos oslavuje kulatiny Python 2, nikoli samotný jazyk Python
(i když toto je poměrně diskutabilní, protože v&nbsp;roce 1990 skutečně vznikla
interní verze pro potřeby <a href="https://www.cwi.nl/">CWI</a>). První
zveřejněná varianta Pythonu nesla označení 0.9.0 a byla poslána do diskusní
skupiny alt.sources v&nbsp;roce 1991.</p>

<p><div class="rs-tip-major">Poznámka: kulatiny tedy slaví Python 2.0, který
byl vydán v&nbsp;roce 2000 a slaví tedy 20 let.Z&nbsp;těchto číselných údajů
&ndash; 2.0, 2000, 20 &ndash; je patrné, že Guido van Rossum je pokrokový a
řídí se doporučeními <a href="http://eldar.cz/cimrman/cimr_hist.htm">Járy
Cimrmana na zapamatovatelná data</a>. Autor tohoto článku až tak pokrokový
není, protože ho měl raději napsat a vydat už před týdnem.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Předchůdce Pythonu &ndash; neúspěšný jazyk ABC</h2>

<p><i>&bdquo;I remembered all my experience and some of my frustration with
ABC. I decided to try to design a simple scripting language that possessed some
of ABC's better properties, but without its problems. So I started typing. I
created a simple virtual machine, a simple parser, and a simple runtime. I made
my own version of the various ABC parts that I liked. I created a basic syntax,
used indentation for statement grouping instead of curly braces or begin-end
blocks, and developed a small number of powerful data types: a hash table (or
dictionary, as we call it), a list, strings, and numbers.&ldquo;</i></p>

<p>Pro většinu čtenářů asi nebude příliš velkým překvapením konstatování, že
autorem programovacího jazyka Python je <a
href="https://gvanrossum.github.io/">Guido van Rossum</a>. Před popisem vývoje
samotného Pythonu se však musíme nejprve zmínit o <a
href="https://homepages.cwi.nl/~steven/abc/">programovacím jazyce ABC</a>,
jehož vývoj začal již v&nbsp;polovině osmdesátých let minulého století
v&nbsp;CWI. Pravě na vývoji tohoto jazyka pracoval mj.&nbsp;i Guido; tehdy na
juniorské pozici a ve vývojovém týmu společně s&nbsp;Lambertem Meertensem, Leo
Geurtsem a Stevenem Pembertonem. Cílem tohoto týmu bylo vytvořit programovací
jazyk dobře použitelný i lidmi, kteří sice nejsou profesionálními programátory,
ale aplikace potřebují vytvářet a nějakým způsobem udržovat (jednou
z&nbsp;cílových skupin byli pochopitelně vědci).</p>

<p>Jen pro připomenutí dobových reálií &ndash; v&nbsp;polovině osmdesátých let
minulého století došlo k&nbsp;obrovskému rozvoji v&nbsp;oblasti osmibitových
domácích mikropočítačů i šestnáctibitových osobních mikropočítačů. A především
domácím mikropočítačům kraloval jiný programovací jazyk určený pro širokou
veřejnost a nikoli pro profesionály &ndash; <a
href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">BASIC</a>.
Jenže na rozdíl od (většinou) nestrukturovaného BASICu, který navíc nabízel jen
základní datové typy (čísla, řetězce, jednorozměrná pole, matice) byl
programovací jazyk ABC navržen odlišným, dnes bychom řekli, že mnohem
modernějším způsobem (zdá se, že Meertens dokonce BASIC přímo nesnášel, jeho
motto bylo &bdquo;Stamp out Basic!&ldquo;). Ostatně podívejme se na jednoduchý
příklad programu, který získá všechna slova ze vstupního dokumentu. Můžeme zde
vidět velkou podobnost s&nbsp;pozdějším Pythonem &ndash; odsazování je součástí
syntaxe, používání dvojteček, programová smyčka typu for-each, použití
operátoru not.in atd:</p>

<pre>
HOW TO RETURN words document:
   PUT {} IN collection
   FOR line IN document:
      FOR word IN split line:
         IF word not.in collection:
            INSERT word IN collection
   RETURN collection
</pre>

<p><div class="rs-tip-major">Poznámka: <strong>HOW TO RETURN</strong> definuje
novou funkci, tj.&nbsp;jedná se o obdobu dnešního <strong>def</strong>.
Referenční příručka celého jazyka ABC je dostupná na stránce <a
href="https://homepages.cwi.nl/~steven/abc/qr.html">https://homepages.cwi.nl/~steven/abc/qr.html</a>.</div></p>

<p>Ovšem ukázalo se, že svět IT nebyl na tento programovací jazyk připraven
(někdo by řekl, že se jednalo o špatné načasování vstupu na trh). Na
mikropočítačích s&nbsp;relativně malými systémovými zdroji nebylo možné
potenciálu ABC využít (navíc mu konkuroval BASIC, o kterém vycházely desítky,
možná i stovky knížek a který byl díky uložení v&nbsp;ROM logicky prvním
jazykem většiny začátečníků) a na druhé straně výkonnostního spektra, tedy na
počítačích s&nbsp;UNIXem, se již používaly odlišné skriptovací jazyky,
například Tcl (1988) a Perl (1987); na strojích IBM se naproti tomu používal <a
href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-xedit-a-programovaci-jazyk-rexx/#k06">jazyk
Rexx</a> (1979), ze kterého se na Amize vyvinul <a
href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-51-cast-dalsi-vyvojove-nastroje-dostupne-pro-mikropocitace-amiga/#k04">jazyk
ARexx</a>. Nicméně i přes relativní neúspěch jazyka ABC nebyly základní
myšlenky ztraceny, protože je později Guido van Rossum použil právě při
implementaci první verze Pythonu, který z&nbsp;jazyka ABC v&nbsp;mnoha ohledech
vycházel.</p>

<p>Prvotní verze Pythonu (před oficiální verzí 1.0) jsou vypsány
v&nbsp;následující tabulce:</p>

<table>
<tr><th>Verze</th><th>Datum vydání</th></tr>
<tr><td>0.9.0</td><td>20. února 1991</td></tr>
<tr><td>0.9.1</td><td>konec února 1991</td></tr>
<tr><td>0.9.2</td><td>podzim 1991</td></tr>
<tr><td>0.9.4</td><td>24. prosince 1991</td></tr>
<tr><td>0.9.5</td><td>2. ledna 1992</td></tr>
<tr><td>0.9.6</td><td>6. dubna 1992</td></tr>
<tr><td>0.9.8</td><td>9. ledna 1993</td></tr>
<tr><td>0.9.9</td><td>29. července 1993</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: pravděpodobně již nikdo tyto verze
nepoužívá v&nbsp;produkčním prostředí, což ovšem neplatí pro Python
1.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Odsazování v&nbsp;ABC a Pythonu</h2>

<p>Zkušenější programátoři, kteří se seznamují s&nbsp;programovacím jazykem
Python, bývají překvapeni tím, že součástí syntaxe tohoto jazyka je i odsazení;
navíc se na začátku bloků používá dvojtečka (naopak začátečníci, kteří jiný
jazyk neznají, tento fakt většinou zcela přirozeně přijmou). Kde se vlastně
tento neobvyklý zápis programů objevil? Ještě před samotným jazykem ABC bylo
vytvořeno několik jeho předchůdců označovaných písmenem B a číslovkou (B0, B1,
...). A již v&nbsp;B0 se objevilo <i>povinné</i> odsazování, které zde mělo
význam sdružení operací do bloků. Ovšem samotné bloky tehdy byly uvozeny
klíčovými slovy <strong>BEGIN</strong> a <strong>END</strong>. Plánovalo se, že
díky použití klíčových slov bude odsazování prováděno automaticky ve
specializovaném programátorském textovém editoru.</p>

<p><div class="rs-tip-major">Poznámka: tato klíčová slova známe i
z&nbsp;Pascalu nebo programovacího jazyka Lua. Ovšem v&nbsp;těchto jazycích
není odsazování striktně vyžadováno, na rozdíl od jazyka B.</div></p>

<a href="https://www.root.cz/obrazek/368436/"><img src="https://i.iinfo.cz/images/238/tp03-6-prev.png" class="image-368436" alt="&#160;" width="370" height="219" /></a>
<p><i>Obrázek 2: Nepovinné, ovšem pochopitelně doporučené odsazování
v&nbsp;Pascalu, resp.&nbsp;zde konkrétně v&nbsp;Turbo Pascalu.</i></p>

<p>Ovšem poté si tvůrci jazyka B0 uvědomili, že vyžadovat odsazení a současně
navíc i použití klíčových slov <strong>BEGIN</strong> a <strong>END</strong> je
vlastně nadbytečné a proto v&nbsp;jazyce B1 (tedy ve druhé generaci jazyka B)
již chybělo klíčové slovo <strong>BEGIN</strong>. Namísto <strong>END</strong>
se používalo spojení <strong>END IF</strong>, <strong>END FOR</strong> atd. (to
tedy znamená, že podmínky a smyčky automaticky vytvářely bloky, což je podle
mého názoru dobrý způsob strukturování programů). A nakonec se v&nbsp;jazyce B2
programátoři &bdquo;museli&ldquo; zcela obejít bez zápisu začátků a konců bloků
pomocí klíčových slov &ndash; vše bylo vyřešeno pouhým odsazením.</p>

<p><div class="rs-tip-major">Poznámka: odsazení pro specifikaci bloků se
používalo i v&nbsp;jiných jazycích (Miranda atd.), ovšem jazyk B byl
pravděpodobně prvním jazykem, kde k&nbsp;této implementaci došlo.</div></p>

<p>Dalším typickým prvkem jazyka B (a posléze ABC a Pythonu) je dvojtečka před
začátkem bloku. Myšlenka použít dvojtečku vznikla v&nbsp;roce 1978, kdy Robert
Dewar, Peter King, Jack Schwartz a náš starý známý Lambert Meertens navrhovali
syntaxi jazyka B a porovnávali různě zápisy bubble sortu. Nakonec zavolali
manželku Roberta Dewara a zeptali se jí, zda se jí navržená varianta líbí. Ta
odpověděla, že má pocit, že se zápis &bdquo;FOR i ...&ldquo; vztahuje pouze
k&nbsp;jednomu řádku a nikoli k&nbsp;celému bloku pod tímto řádkem. A právě na
základě tohoto alfa testingu návrhu jazyka bylo rozhodnuto před začátkem bloku
používat dvojtečku, což Pythonu vydrželo až do dneška.</p>

<p><div class="rs-tip-major">Poznámka: to vlastně znamená, že dvojtečka před
začátkem bloku (namísto závorek či klíčových slov) není v&nbsp;žádném případě
novým a neobvyklým vynálezem; je s&nbsp;námi v&nbsp;IT již 42 let.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Další skriptovací jazyk?</h2>

<p>Jak jsme se již zmínili <a href="#k01">v&nbsp;úvodní kapitole</a>, vznikl
programovací jazyk Python na samotném začátku devadesátých let minulého
století. Z&nbsp;mnoha pohledů se jednalo o důležitý mezník v&nbsp;rozvoji IT,
protože právě tehdy se začala stále více rozšiřovat myšlenka, že programovací
jazyky určené <i>pro vývoj plnohodnotných aplikací</i> lze zhruba rozdělit do
dvou kategorií &ndash; překládané systémové jazyky a jazyky skriptovací.
Samozřejmě, že se skriptovací jazyky používaly i před tímto obdobím, ale
většinou se jednalo o relativně primitivní formy předpisů pro dávkové úlohy
(výjimkou je například již zmíněný jazyk Rexx, jehož vyjadřovací prostředky již
byly na vysoké úrovni) a převažoval názor, že plnohodnotné aplikace musí být
psány v&nbsp;překládaných jazycích, tedy typicky v&nbsp;jazycích ALGOLské větvě
se statickým typováním (schválně nepíšu se silným typováním, to je sice
související, ovšem odlišná vlastnost).</p>

<p>V&nbsp;průběhu devadesátých let se tedy zpočátku mírně opovrhované
skriptovací jazyky staly mnohdy nedílnou součástí mnoha profesionálních
aplikací. Celý vývoj a s&nbsp;ním související myšlenkový posun byl nakonec
shrnut ve slavném článku <a
href="https://web.stanford.edu/~ouster/cgi-bin/home.php">Johna Ousterhouta</a>
&bdquo;Scripting: Higher Level Programming for the 21st Century&ldquo;, v&nbsp;
němž se opakovala myšlenka na souběžné a koopertivní použití dvou jazyků
&ndash; systémového a skriptovacího.</p>

<p><div class="rs-tip-major">Poznámka: do skupiny klasických skriptovacích
jazyků z&nbsp;této doby lze zařadit právě Python, dále Perl, Tcl, Rexx, shell
(resp.&nbsp;jeho různé varianty) a taktéž poněkud později vytvořený jazyk Ruby.
Ovšem ze širšího pohledu můžeme skupinu rozšířit například i o <a
href="https://www.root.cz/serialy/programovaci-jazyk-lua/">programovací jazyk
Lua</a> nebo o JavaScript.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Python 1</h2>

<p>První stabilní (ve smyslu sémantiky) verze programovacího jazyka Python byla
vydána v&nbsp;roce 1994 a verze 1.x byly postupně vydávány až do roku 2001, kdy
vyšla poslední jedničková verze 1.6.1, která celou řadu Python 1 uzavřela.
V&nbsp;Pythonu 1 pochopitelně nenalezneme všechny vlastnosti, které známe ze
stále ještě rozšířeného Pythonu 2 nebo Pythonu 3. Například řetězce byly
v&nbsp;Pythonu 1 čistě osmibitové (ASCII), zatímco už v&nbsp;Pythonu 2 bylo
možné použít Unicode řetězce. Dále v&nbsp;Pythonu 1 nebyla podporována
<i>generátorová notace seznamu</i> neboli <i>list comprehension</i>. Taktéž
neexistovaly operátory spojené s&nbsp;přiřazením, tedy například
<strong>+=</strong>, <strong>|=</strong> atd. Ty byly přidány až do Pythonu 2;
inspirací byly pochopitelně céčkové jazyky. A konečně, v&nbsp;Pythonu 1 neměly
řetězce žádné metody, například <strong>string.startswith</strong> atd. &ndash;
i tato funkcionalita byla přidána až v&nbsp;Pythonu 2.</p>

<a href="https://www.root.cz/obrazek/404911/"><img src="https://i.iinfo.cz/images/695/python2-1-prev.png" class="image-404911" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 3: Python 1.5.2 na moderním hardware.</i></p>

<p>V&nbsp;následující tabulce jsou vypsány všechny oficiálně vydané verze
Pythonu 1:</p>

<table>
<tr><th>Verze</th><th>Datum vydání</th></tr>
<tr><td>1.0.0</td><td>26. ledna 1994</td></tr>
<tr><td>1.0.2</td><td>15. února 1994</td></tr>
<tr><td>1.0.3</td><td>4. května 1994</td></tr>
<tr><td>1.0.4</td><td>14. července, 1994</td></tr>
<tr><td>1.1  </td><td>11. října 1994</td></tr>
<tr><td>1.1.1</td><td>10. listopadu 1994</td></tr>
<tr><td>1.2  </td><td>13. dubna 1995</td></tr>
<tr><td>1.3  </td><td>13. října 1995</td></tr>
<tr><td>1.4  </td><td>25. října 1996</td></tr>
<tr><td>1.5  </td><td>3. ledna 1998</td></tr>
<tr><td>1.5.1</td><td>31. října 1998</td></tr>
<tr><td>1.5.2</td><td>13. dubna 1999</td></tr>
<tr><td>1.6  </td><td>5. září 2000</td></tr>
<tr><td>1.6.1</td><td>25. února 2001</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;době, kdy verze knihovny určené
pro JavaScript vydaná před dvěma týdny je považována za zoufale zastaralou, se
to může zdát zvláštní, ale stále se můžeme ve specifických případech setkat
s&nbsp;použitím Pythonu verze 1. Konkrétně jsem viděl použití Pythonu 1.5.2 a
1.6.1. Ostatně konkrétně tyto verze jsou dostupné ve formě zdrojových kódů a
jsou stále přeložitelné i na současných verzích Linuxu.</div></p>

<a href="https://www.root.cz/obrazek/404912/"><img src="https://i.iinfo.cz/images/695/python2-2-prev.png" class="image-404912" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 4: Interaktivní smyčka REPL Pythonu 1.5.2 již měla všechny
základní vlastnosti interaktivních smyček používaných dodnes.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Python 2</h2>

<p><i>&bdquo;Python where we can, C++ where we must.&ldquo;<br />
Google</i></p>

<p>Tento článek vznikl primárně kvůli Pythonu 2, jehož první vydání datujeme na
16. říjen 2000, takže Python 2 skutečně letos oslaví dvacetileté výročí
(resp.&nbsp;přesněji řečeno ho neoslaví, protože mu ještě před tímto datem
skončí oficiální podpora). Python 2 byl velmi úspěšným projektem, který do
značné míry zajistil Pythonu místo na samotném vrcholu popularity
programovacích jazyků. Ovšem již v&nbsp;roce 2008 vyšel Python 3.0 (založený na
<a href="https://www.python.org/dev/peps/pep-3000/">PEP 3000</a> alias Python
3000), který je s&nbsp;verzí 2 částečně nekompatibilní. A právě popularita a
velké rozšíření Pythonu 2 a jeho balíčků na jedné straně a nekompatibilita
Pythonu 3 na straně druhé zapříčinila více než desetileté schizma světa
Pythonu, které je teprve postupně napravováno s&nbsp;tím, jak se stále více
balíčků a aplikací portuje na Python 3.</p>

<img src="https://i.iinfo.cz/images/695/python2-3.png" class="image-404913" alt="&#160;" width="615" height="180" />
<p><i>Obrázek 5: Původní logo Pythonu.</i></p>

<p><div class="rs-tip-major">Poznámka: na druhou stranu je nutné poznamenat, že
se přechod na Python 3 v&nbsp;mnoha oblastech podařil a to v&nbsp;mnoha
případech relativně snadno. Nenastala tedy taková patová situace, jako
v&nbsp;případě Perlu 5 vs. Perl 6 (dnes Raku).</div></p>

<img src="https://i.iinfo.cz/images/695/python2-4.png" class="image-404914" alt="&#160;" width="601" height="203" />
<p><i>Obrázek 6: Nové logo Pythonu.</i></p>

<p>Opět si pochopitelně vypíšeme data vydání různých verzí Pythonu 2 (bez
desetinných vydání):</p>

<table>
<tr><th>Verze</th><th>Datum vydání</th></tr>
<tr><td>2.0</td><td>16. října 2000</td></tr>
<tr><td>2.1</td><td>17. dubna 2001</td></tr>
<tr><td>2.2</td><td>21. prosince 2001</td></tr>
<tr><td>2.3</td><td>29. července 2003</td></tr>
<tr><td>2.4</td><td>30. listopadu 2004</td></tr>
<tr><td>2.5</td><td>16. září 2006</td></tr>
<tr><td>2.6</td><td>1. října 2008</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Svět Pythonu aneb nejedná se pouze o CPython</h2>

<p>Původní interpretr programovacího jazyka Python se dnes nazývá CPython,
protože mnohdy je nutné odlišit mezi mnoha implementacemi Pythonu.
V&nbsp;současnosti totiž kromě klasického (a nutno říci, že pro některé účely i
pomalého) CPythonu máme k&nbsp;dispozici i překladače, a to jak AOT (<i>ahead
of-time</i>), tak i JIT (<i>just-in-time</i>). Navíc existují i další varianty
Pythonu určené pro běh na virtuálních strojích Javy popř.&nbsp;CLR. Svět
Pythonu je tedy velmi rozsáhlý a pravděpodobně se (možná vedle Scheme a LISPu)
jedná o jazyk s&nbsp;nejvíce různorodými implementacemi vůbec. S&nbsp;některými
zajímavými implementacemi Pythonu se ve stručnosti seznámíme v&nbsp;navazujícím
textu.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Jython a IronPython</h2>

<p>Jython je jméno implementace programovacího jazyka Python určená pro běh ve
virtuálním stroji jazyka Java (<i>JVM &ndash; Java Virtual Machine</i>). A
nejenom to &ndash; aplikace psané v&nbsp;Jythonu mohou <i>kooperovat</i>
s&nbsp;třídami a rozhraními vytvořenými v&nbsp;Javě, což je pro mnoho aplikací
velmi výhodné, protože s&nbsp;rostoucí složitostí moderních aplikací je
většinou zapotřebí mít k&nbsp;dispozici vhodný skriptovací jazyk sloužící jako
&bdquo;lepidlo&ldquo; (<i>glue</i>) mezi jednotlivými bloky, z&nbsp;nichž se
aplikace skládá (viz již výše zmínený Ousterhoutův článek). Jython ovšem
samozřejmě není dokonalý. Jednou z&nbsp;jeho nevýhod je fakt, že je stále
postaven na dnes již obstarožním Pythonu 2, druhou nevýhodou pak ta skutečnost,
že se jedná o dosti pomalý jazyk. Tato pomalost se negativně projeví zejména
při výpočtech a někdy i při manipulaci s&nbsp;rozsáhlými datovými strukturami,
ovšem u aplikací, v&nbsp;nichž převládají I/O operace se nemusí jednat o
kritický nedostatek.</p>

*** image ***
<p><i>Obrázek 7: Logo programovacího jazyka Jython.</i></p>

<p>Alternativou k&nbsp;Jythonu jsou jazyky Groovy a Scala.</p>

<p>Další implementací Pythonu je IronPython. Zatímco Jython je určený pro JVM,
IronPython využívá možností poskytovaných <i>CLR</i> (<i>Common Language
Infrastructure</i>) a nad ní postavenou knihovnou <i>DLR</i> (<i>Dynamic
Language Runtime</i>), která je přímo určená pro implementaci dynamických
programovacích jazyků. IronPython může spolupracovat s&nbsp;kódem napsaným
v&nbsp;dalších jazycích běžících nad CLR a tím pádem dobře zapadá do celého
frameworku .NET i Mono. Výkonnost IronPythonu bývá srovnatelná s&nbsp;klasickým
CPythonem &ndash; některé benchmarky dopadají hůře, jiné lépe (obecně však lze
říci, že IronPython je rychlejší než Jython).</p>

*** image ***
<p><i>Obrázek 8: Logo programovacího jazyka IronPython.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. PyPy a RPython</h2>

<p><i>&bdquo;RPython is half-Python, half-not-Python, and Python&ldquo;</i></p>

<p>S&nbsp;projektem <a href="http://pypy.org/">PyPy</a> se již s&nbsp;velkou
pravděpodobností setkalo mnoho programátorů používajících pro vývoj
programovací jazyk Python. Jen ve stručnosti si řekněme, že se jedná o jednu
z&nbsp;(dnes již velkého množství) implementací Pythonu, která je založena na
interpretru (podobně jako klasický CPython) zkombinovaném s&nbsp;just-in-time
překladačem (<i>JITem</i>). Samotný projekt PyPy je přitom z&nbsp;velké části
napsán ve dvou jazycích &ndash; běžném Pythonu a navíc i v&nbsp;RPythonu, což
je programovací jazyk, jehož základní vlastnosti si v&nbsp;této kapitole
stručně představíme. RPython získal své jméno ze sousloví &bdquo;Restricted
Python&ldquo;, přičemž všechna omezení, která RPython zavádí, jsou pečlivě
vybrána z&nbsp;toho důvodu, aby se zjednodušila či vůbec umožnila analýza
(R)pythonovského kódu, který je překládán do nativního (objektového) kódu.</p>

<img src="https://i.iinfo.cz/images/575/brython-3.png" class="image-394886" alt="&#160;" width="318" height="110" />
<p><i>Obrázek 9: Logo projektu PyPy.</i></p>

<p>Tím se dostáváme k&nbsp;základní vlastnosti RPythonu &ndash; ten totiž není
interpretován, ale skutečně překládán do objektového kódu a z&nbsp;výsledku se
vytváří spustitelná aplikace. Celý proces zpracování je poměrně komplikovaný a
zdlouhavý, ale ve stručnosti ho lze popsat několika body:</p>

<ol>

<li>Na vstupu se nachází zdrojové kódy naprogramované v&nbsp;RPythonu
(<strong>.py</strong>)</li>

<li>Nejprve je ze zdrojových kódů vytvořen bajtkód (<strong>.pyc</strong>)</li>

<li>Z&nbsp;bajtkódu se vygeneruje <a
href="https://en.wikipedia.org/wiki/Control_flow_graph">CFG</a> a ten se
následně analyzuje</li>

<li>Grafovou strukturou se prochází a mj.&nbsp;se provádí anotace proměnných
(odvození typů, viditelnosti apod.)</li>

<li>Následuje několik konverzí, které se mohou lišit podle toho, pro jakou
platformu se generuje výsledek a jaké optimalizace jsou povoleny (inlining,
rozbalení smyček atd.)</li>

<li>Dále se do mezivýsledku vkládají i instrukce pro GC</li>

<li>Z&nbsp;grafové struktury se vygeneruje zdrojový kód pro výslednou platformu
(typicky pro překladače ANSI C, což je platforma, která nás zajímá dnes)</li>

<li>Pro naši platformu: překladačem ANSI C se provede překlad do objektového
kódu</li>

<li>Nakonec se provede slinkování a vytvoření výsledného spustitelného souboru
(nebo dynamické knihovny)</li>

</ol>



<p><a name="k10"></a></p>
<h2 id="k10">10. Projekt Cython</h2>

<p>Jedním z&nbsp;nejznámějších a pravděpodobně i nejpoužívanějších projektů,
které se zaměřují na překlad Pythonu, patří nástroj nazvaný <i>Cython</i>
(pozor: neplést s&nbsp;podobně pojmenovaným <i>CPythonem</i>, což je ovšem
označení klasického interpretru Pythonu, které se většinou používá ve chvíli,
kdy je v&nbsp;nějakém kontextu zapotřebí rozlišit <i>CPython</i> od
<i>Jythonu</i> a také <i>Iron Pythonu</i>). Dnes se zmímíme jen o základních
vlastnostech Cythonu.</p>

<img src="https://i.iinfo.cz/images/529/rpython-cpython-1.png" class="image-332504" alt="&#160;" width="500" height="230" />
<p><i>Obrázek 10: Logo Cythonu.</i></p>

<p>Tento překladač pracuje poněkud odlišným způsobem než RPython. Zatímco se
totiž RPython snaží odvozovat datové typy proměnných, argumentů i návratových
hodnot funkcí na základě analýzy grafu (CFG), používá Cython přímý překlad
Pythonu do programovacího jazyka C. Ve chvíli, kdy Cython nezná datový typ
funkce/proměnné/argumentu, použije <strong>PyObject *</strong>, tedy ukazatel
na datovou strukturu reprezentující v&nbsp;Pythonu libovolnou hodnotu.
V&nbsp;dalším kódu je samozřejmě nutné z&nbsp;tohoto objektu získat skutečnou
hodnotu. I takto vlastně velmi primitivně provedený překlad dokáže programový
kód zrychlit, což je ostatně patrné i na výsledku benchmarků. Cython jde ale
ještě dále, protože rozšiřuje jazyk Python o další klíčová slova, především pak
o slovo <strong>cdef</strong>. Toto klíčové slovo je možné použít pro přesnou
specifikaci typu proměnné či argumentu, a to způsobem, který plně vychází
z&nbsp;programovacího jazyka C. Tato typová informace samozřejmě umožňuje
provedení dalších optimalizací ve výsledném kódu (opět lze vidět na výsledcích
benchmarku).</p>

<p><div class="rs-tip-major">Poznámka: zdrojové kódy, v&nbsp;nichž jsou použita
rozšíření Cythonu, již nejsou plně kompatibilní s&nbsp;Pythonem a z&nbsp;tohoto
důvodu se většinou ukládají do souborů s&nbsp;koncovkou <strong>.pyx</strong>,
což je zkratka původně odvozená od projektu <i>Pyrex</i>, z&nbsp;něhož byl
Cython vyvinut.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Numba aneb další přístup k překladu Pythonu do nativního kódu</h2>

<p>Princip činnosti nástroje Numba se v&nbsp;několika ohledech odlišuje od
RPythonu ale i od Cythonu. Numba totiž umožňuje překlad kódu za běhu aplikace,
tj.&nbsp;v&nbsp;<i>runtime</i>. Jedná se tedy o <a
href="https://en.wikipedia.org/wiki/Just-in-time_compilation">JIT</a> neboli o
<i>just-in-time</i> překladač, který má tu výhodu, že dokáže odvodit datové
typy proměnných a argumentů funkcí na základě skutečného chování aplikace. To
samozřejmě neznamená, že by JIT již při prvním volání funkce přesně věděl, jak
má funkci přeložit. Ve skutečnosti se dozví pouze informace o jediné konkrétní
větvi, kterou může přeložit. V&nbsp;případě, že bude ta samá funkce později
volána s&nbsp;odlišnými typy parametrů, popř.&nbsp;se její chování změní jiným
způsobem (Python je velmi dynamický jazyk), provede se just-in-time překlad
znovu, takže zde zaplatíme za vyšší výpočetní výkon poněkud většími paměťovými
nároky a pomalejším během prvních volání funkce.</p>

<p>Z&nbsp;pohledu běžného vývojáře je největší předností tohoto způsobu
překladu fakt, že není zapotřebí samotný zdrojový kód měnit (až na uvedení
anotace před funkci). Nepříjemný je přesun času překladu do runtime, což sice
nevadí u aplikací, které běží delší dobu, ovšem u jednorázových skriptů může
být použití JITu spíše kontraproduktivní. To ostatně uvidíme i na demonstračním
příkladu.</p>

<p>Samotný překlad je prováděn na několika úrovních, přičemž Numby na nižších
úrovních využívá možností nabízených LLVM. Jedná se o relativně složitou
problematiku, které se budeme věnovat v&nbsp;samostatném článku.</p>

<p><div class="rs-tip-major">Poznámka: s&nbsp;JITy jsme se již na stránkách
Roota setkali, především v&nbsp;souvislosti <a
href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/">s&nbsp;LuaJITem</a>
a <a
href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-zaklady-optimalizace-aplikaci-naprogramovanych-v-jave/">JVM</a>.
Další odkazy naleznete na konci článku.</div></p>

<a href="https://www.root.cz/obrazek/332506/"><img src="https://i.iinfo.cz/images/529/rpython-cpython-3-prev.png" class="image-332506" alt="&#160;" width="363" height="270" /></a>
<p><i>Obrázek 11: Porovnání doby výpočtu Mandelbrotovy množiny RPythonem,
Cythonem (bez i s&nbsp;type hinty) a variantou naprogramovanou přímo
v&nbsp;ANSI C. Z&nbsp;tohoto grafu je dobře patrné, jak důležité je pro Cython
mít k&nbsp;dispozici o typech proměnných, parametrů a návratových kódů funkcí
(jinými slovy &ndash; provedené optimalizace v&nbsp;tomto případě nezískáme
zadarmo).</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Programovací jazyk Python ve webovém prohlížeči</h2>

<p>Python se relativně často používá při tvorbě webových aplikací na <i>back
endu</i> tj.&nbsp;pro tu část webové služby/aplikace, která je provozována na
serveru a nějakým způsobem komunikuje s&nbsp;ostatními komponentami vytvářeného
systému: <i>front endem</i> (typicky webový prohlížeč s&nbsp;interpretrem
JavaScriptu), databází a dalšími (mikro)službami, například s&nbsp;využitím
message brokerů, systémů pro monitoring a správu událostí atd. Tato oblast
samozřejmě není pokryta pouze Pythonem, ale najdeme zde i další programovací
jazyky a technologie, zejména Javu (a celý její middleware), JavaScript či
TypeScript (node.js) a dnes taktéž programovací jazyk Go.</p>

<p>Zatímco pozice Pythonu v&nbsp;oblasti back endu je poměrně zřejmá, je
situace na front endu mnohem složitější. Důvod je jednoduchý &ndash;
v&nbsp;této oblasti z&nbsp;historických důvodů kraluje JavaScript, přičemž
veškeré snahy a náhradu tohoto jazyka byly prozatím neúspěšné (pokusů bylo hned
několik, připomeňme například browsery s&nbsp;<a
href="https://www.root.cz/serialy/programovaci-jazyk-tcl/">TCL</a>, <a
href="https://en.wikipedia.org/wiki/VBScript">VBScript</a> či projekt <a
href="https://dart.dev/">Dart</a>). Ovšem stále se můžeme setkat se snahami
JavaScript nepoužívat přímo, popř.&nbsp;ho obejít jinými nástroji. Příkladem
mohou být technologie umožňující tvorbu webových aplikací podobným způsobem,
jakoby se jednalo o aplikace desktopové. Příkladem tohoto přístupu mohou být
projekty <a href="https://wiki.python.org/moin/Pyjamas">Pyjamas</a> (pro
Python), <a href="http://www.gwtproject.org/">Google Web Toolkit (GWT)</a>, <a
href="https://cordova.apache.org/">Apache Cordova</a> atd.</p>

<p>Je tedy vůbec možné a praktické použít Python přímo na webovém front endu a
pokud to je možné, jakou za to zaplatíme cenu? Ve skutečnosti existuje hned
několik projektů, které se více či méně úspěšným způsobem snaží o to, aby byl
Python na front endu skutečně použitelný, a to i pro reálně provozované
aplikace. Mezi tyto projekty patří například:</p>

<ol>

<li><i>Brython</i>. Jedná se o transpřekladač z&nbsp;Pythonu do JavaScriptu,
přičemž samotný překlad (resp.&nbsp;přesněji řečeno transpřeklad) probíhá na
pozadí, což znamená, že přímo v&nbsp;kódu webové stránky je umístěn (či
načítán) kód v&nbsp;Pythonu. Podobné řešení jsme již viděli, například u
projektu <a href="https://github.com/Gozala/wisp">Wisp</a> (jazyk podobný
Clojure) či <a href="https://github.com/mherkender/lua.js">lua.js</a>
(transpřeklad z&nbsp;jazyka Lua). Výhodou Brythonu je, že se jakékoli úpravy
ihned projeví v&nbsp;aplikaci po znovunačtení stránky (F5).</li>

<li><i>Transcrypt</i> je taktéž transpřekladačem Pythonu (konkrétně Pythonu 3)
do JavaScriptu. Samotný transpřeklad je napsaný velmi dobře &ndash; zhruba
platí, že velikost vygenerovaného kódu v&nbsp;JavaScriptu odpovídá velikosti
původního kódu napsaného v&nbsp;Pythonu (případné zvětšení je o jednotky
procent). Musíme však počítat s&nbsp;tím, že je nutné načíst i jádro
Transcriptu, jehož velikost je přibližně 20 kB (tedy čím větší je kód samotné
aplikace, tím (poměrově) menší budou režijní náklady. Zajímavá a užitečná je i
podpora <i>type hintů</i> (informací o datovém typu parametrů, proměnných
atd.)</li>

<li>Podobným způsobem pracuje i projekt nazvaný <i>pyjaco</i>, který naleznete
na adrese <a
href="https://github.com/chrivers/pyjaco">https://github.com/chrivers/pyjaco</a>.</li>

<li><i>Skulpt</i> je naproti tomu v&nbsp;mnoha ohledech podobný projektu
<i>Brython</i>, protože taktéž umožňuje provádět transpřeklad na pozadí
(programátor tedy pracuje pouze se zdrojovým kódem vytvořeným
v&nbsp;Pythonu).</li>

<li>Velmi zajímavým nástrojem, který názorně ukazuje, jak vlastně transpřeklad
funguje (a že jeho výsledek může být čitelný), je nástroj s&nbsp;poněkud
zvláštním jménem <i>fiddlesalad</i>, který naleznete na adrese <a
href="http://fiddlesalad.com/python/">http://fiddlesalad.com/python/</a>. Tento
nástroj umožňuje zápis zdrojového kódu v&nbsp;Pythonu, který je ihned (již
v&nbsp;době zápisu) transpřekládán do JavaScriptu a současně i spouštěn.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že všechny projekty
zmíněné v&nbsp;předchozím textu jsou ve skutečnosti <i>transpřekladači</i>
neboli <i>transpilery</i>. Jedná se o technologii zajišťující, aby se i ve
webovém prohlížeči mohlo (nepřímo) pracovat s&nbsp;dalšími programovacími
jazyky, nejenom se všudypřítomným a nativně podporovaným JavaScriptem. Další
variantou je interpretace s&nbsp;využitím interpretru psaného
v&nbsp;JavaScriptu popř.&nbsp;použití WebAssembly (viz též navazující
kapitoly).</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Rozšíření programovacího jazyka Python o další vlastnosti</h2>

<p><i>&bdquo;Coconut's goal isn't to replace Python, but to extend
it&ldquo;</i></p>

<p>Existuje i několik projektů, které rozšiřují syntaxi a především sémantiku
Pythonu. Příkladem může být projekt <i>Coconut</i>, který je navržen takovým
způsobem, aby byl zpětně kompatibilní s&nbsp;Pythonem. To znamená, že skript
napsaný v&nbsp;Pythonu je současně i skriptem napsaným v&nbsp;jazyku Coconut
(což je zajímavé, protože do Coconutu byla přidána tři nová klíčová slova
<strong>data</strong>, <strong>match</strong> a <strong>case</strong>, jejichž
význam se však rozlišuje z&nbsp;kontextu). Coconut je tak možné považovat za
sémantické i syntaktické rozšíření Pythonu, přičemž se autor tohoto jazyka
zaměřil především na funkcionální rysy (funkce vyššího řádu, neměnitelné
hodnoty, podpora pro tvorbu kolon a kompozic funkcí atd.) a taktéž do Coconutu
přidal podporu pro pattern matching (inspiraci získal <a
href="https://github.com/Suor/patterns">zde</a>). Coconut může pracovat jako
interpret s&nbsp;interaktivní smyčkou REPL či jako transpřekladač
(transcompiler, transpiler) do jazyka Python, takže je možné použít celý
pythonovský ekosystém. Přesnější informace o tom, se kterými verzemi Pythonu je
Coconut kompatibilní, naleznete na adrese <a
href="http://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions">http://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions</a>.</p>

<p>Vzhledem k&nbsp;tomu, že je programovací jazyk Coconut implementován jako
transpřekladač a současně se jedná o jazyk tvořící nadmnožinu Pythonu, je
v&nbsp;něm možné použít prakticky všechny knihovny pythonovského ekosystému,
což platí zejména pro CPython a PyPy, i když větší problémy nelze předpokládat
ani v&nbsp;případě použití Jythonu či IronPythonu. Navíc je pro všechny
programátory znající Python vlastně velmi jednoduché přejít na Coconut &ndash;
stále je totiž možné využít stávající syntaxi a sémantiku Pythonu a rozšíření
přidaná Coconutem použít jen v&nbsp;těch místech, kde to má v&nbsp;daný okamžik
význam. To je zásadní rozdíl od některých jiných (nejenom funkcionálních)
jazyků, s&nbsp;nimiž se programátor může setkat a které mnohdy vyžadují, aby se
začal učit jak nový programovací jazyk, tak i jeho ekosystém (který je navíc u
nově vznikajících jazyků zpočátku malý, navíc může být spousta knihoven
dostupných jen v&nbsp;alfa verzích).</p>

<p>Použití transpřekladače však přináší i některé nevýhody, které se projeví
například ve chvíli, kdy v&nbsp;programu vznikne chyba či nezachycená výjimka.
V&nbsp;takovém případě totiž získáme <i>stack trace</i> platný pro výsledný
pythonovský program, nikoli pro uživatelem vytvořený kód. Totéž může nastat ve
chvíli, kdy budeme chtít program ladit, například přes GDB (nebo jeho
nadstavby). Jen částečné řešení přináší přidání korespondujících čísel řádků
v&nbsp;generovaném kódu, které lze povolit přepínačem <strong>-l</strong> nebo
<strong>--line-numbers</strong>. Ještě častěji se můžeme setkat s&nbsp;tím, že
syntaktická chyba zůstane nezachycena transpřekladačem Coconutu a vypíše ji až
interpret Pythonu. Chybové hlášení tedy bude obsahovat odkaz na generovaný kód,
nikoli na původní zdrojový kód vytvořený programátorem. Opět si lze alespoň
částečně pomoci čísly řádků vepsanými do vygenerovaného zdrojového kódu
v&nbsp;Pythonu.</p>

<p>Příklad použití Coconutu:</p>

<pre>
def factorial(n):
    if n &lt;= 1:
        return 1
    else:
        return range(1, n+1) |&gt; reduce$(*)
&nbsp;
<i># funkce volaná jako infixový operátor</i>
def n `nad` k:
    return factorial(n)/(factorial(k)*factorial(n-k))
&nbsp;
print()
&nbsp;
for k in range(5):
    print(4 `nad` k)
</pre>

<p>Kolona:</p>

<pre>
range(11) |&gt; reversed |&gt; sum |&gt; print
</pre>

<p>Zpracování sekvencí:</p>

<pre>
<strong>print(list(takewhile(lambda x: x &lt; 10, (count(0, 2)))))</strong>
&nbsp;
[0, 2, 4, 6, 8]
</pre>

<p>Dalším užitečným rozšířením je <a href="http://mypy-lang.org/">mypy</a>,
díky němuž lze do kódu přidat statické typové informace a testovat je. Nejedná
se sice o implementaci plnohodnotného typového systému, který najde všechny
potenciální chyby, ale pro mnoho aplikací se může jednat o důležité
vylepšení.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. GDScript</h2>

<p>Existují i jazyky inspirované Pythonem, které se ovšem používají ve
specializovaných oblastech. Příkladem může být programovací jazyk nazvaný <a
href="http://docs.godotengine.org/en/3.0/getting_started/scripting/gdscript/gdscript_basics.html">GDScript</a>,
který se používá v&nbsp;herním engine <a
href="https://godotengine.org/">Godot</a>. Původně se sice používal
programovací jazyk Lua, který je do herních enginů vkládán už po dvě
desetiletí, ovšem podle názoru autorů Godotu je kooperace mezi objektově
orientovaným herním enginem a jazykem odvozeným od Pythonu snazší, než tou bylo
v&nbsp;případě Luy.</p>

<p>Ostatně můžeme se sami podívat, do jaké míry se GDScript liší od
originálního Pythonu:</p>

<pre>
func some_function(param1, param2):
    var local_var = 5
&nbsp;
    if param1 &lt; local_var:
        print(param1)
    elif param2 &gt; 5:
        print(param2)
    else:
        print("Fail!")
&nbsp;
    for i in range(20):
        print(i)
&nbsp;
    while param2 != 0:
        param2 -= 1
&nbsp;
    var local_var2 = param1 + 3
    return local_var2
</pre>

<p>Dotaz, zda objekt obsahuje určitou metodu (v&nbsp;runtime):</p>

<pre>
func _on_object_hit(object):
    if object.has_method("smash"):
        object.smash()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Příklady použití Pythonu</h2>

<p>V&nbsp;současnosti je Python jedním z&nbsp;nejrozšířenějších jazyků, a to i
podle oblastí, v&nbsp;nichž se používá:</p>

<ul>

<li>Vývoj webových aplikací (primárně back-end, ale již víme, že několik
projektů dokáže využít Python i na front-endu).</li>

<li>Vývoj her (Pyglet, Pygame).</li>

<li>Oblast strojového učení a umělé inteligence (zde je Python skutečně velmi
populární, viz například úspěch PyTorche či TensowFlow).</li>

<li>Vizualizace (Matplotlib atd.)</li>

<li>Zpracování dat, numerické výpočty, symbolické výpočty (NumPy, SciPy).</li>

<li>CAD (viz navazující kapitoly)</li>

<li>Stále častěji se s&nbsp;Pythonem setkáme i v&nbsp;embedded oblasti, i když
(pochopitelně) nikoli v&nbsp;realtime aplikacích ani v&nbsp;mikrořadičích
s&nbsp;nedostatečnými prostředky.</li>

<li>Testování (Behave, Robot Framework).</li>

</ul>



<p><a name="k16"></a></p>
<h2 id="k16">16. Pygame a Pyglet</h2>

<p><i>Pygame</i> je knihovna určená pro programovací jazyk Python, která
interně volá funkce nativní knihovny SDL (<i>Simple DirectMedia Layer</i>) a
několika dalších podpůrných knihoven. Myšlenka, na níž je projekt <i>Pygame</i>
postaven, je v&nbsp;mnoha ohledech podobná myšlence taktéž popsaného systému <a
href="https://mojefedora.cz/stitek/lua/">LÖVE</a> &ndash; implementace
nízkoúrovňových operací nechť je vytvořena a optimalizována odborníky
v&nbsp;nízkoúrovňových programovacích jazycích C a C++. Pokud budou tyto
operace implementovány dostatečně rychle, je již možné zbytek hry či
multimediální aplikace naprogramovat ve vysokoúrovňovém jazyku Python
(v&nbsp;případě LÖVE pak jazyka Lua). A ukazuje se, že je tato myšlenka &ndash;
a obecně systém rozdělení aplikace mezi dva programovací jazyky (kompilovaný a
skriptovací) &ndash; poměrně úspěšná, neboť v&nbsp;<i>Pygame</i> již vzniklo
mnoho kvalitních her.</p>

<p>Výše stručně představená knihovna <i>Pygame</i> je kvůli své relativně těsné
vazbě na nativní knihovnu <i>SDL</i> určena především pro tvorbu
dvoudimenzionálních (2D) her, tj.&nbsp;například různých strategií (realtime i
tahových), plošinovek, RPG apod. Ve chvíli, kdy je zapotřebí vytvořit
plnohodnotnou trojrozměrnou hru, je možné namísto <i>Pygame</i> použít buď
projekt <i>PyOpenGL</i> (rozhraní pro OpenGL) či další knihovnu určenou pro
použití s&nbsp;programovacím jazykem Python. Tato knihovna se jmenuje
<i>Pyglet</i> a mezi její základní vlastnosti patří poměrně úzká vazba na
knihovnu OpenGL a tedy i nepřímo na grafické akcelerátory. Kromě vazby na
knihovnu OpenGL však v&nbsp;<i>Pyglet</i> mohou programátoři najít i další
zajímavé a užitečné moduly, například pro práci s&nbsp;hudbou a se zvuky (ALSA,
OpenAL, DirectSound), podporu pro různé formáty uložení hudby (zejména
OGG/Vorbis), podporu pro načítání a zobrazování animací uložených v&nbsp;DivX,
AVI, MPEG, H.263 atd.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Python a oblast CAD/CAM</h2>

<p>Programovací jazyk Python se relativně intenzivně používá i v&nbsp;oblasti
počítačové grafiky. Známé je například jeho použití pro <a
href="https://mojefedora.cz/tvorba-pluginu-pro-graficky-editor-gimp/">tvorbu
pluginů pro GIMP</a>, ovšem Python nalezneme i v&nbsp;mnoha profesionálních (a
mnohdy i dosti drahých) aplikacích. Za zmínku stojí především <i>tecplot</i>
(vizualizace, analýzy atd.), dále slavný nástroj <i>Rhinoceros (Rhino3D)</i>,
neméně slavný program <i>Maya</i> a Python lze využít i pro skriptování
v&nbsp;Blenderu (už jen toto téma by si vyžádalo několik samostatných
článků).</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Jazyk Python na vrcholu popularity</h2>

<p>Již na začátku tohoto článku jsme si řekli, že Python je velmi populárním
jazykem. Svědčí o tom vlastně většina známých statistik popularity a používání
programovacích jazyků, například <a
href="https://www.tiobe.com/tiobe-index/">Tiobe index</a> (momentálně třetí
místo), <a href="https://pypl.github.io/PYPL.html">PYPL PopularitY of
Programming Language</a> (momentálně první místo), <a
href="https://insights.stackoverflow.com/survey/2019#most-loved-dreaded-and-wanted">výsledky
hlasování na StackOverflow</a> (druhý nejoblíbenější, na prvním místě
nejžádanějšího jazyka &ndash; potřetí za sebou), ale i ocenění, které je
každoročně udělováno společností Tiobe:</p>

<table>
<tr><th>Rok</th><th>Vítěz</th></tr>
<tr><td>2019</td><td>C</td></tr>
<tr><td>2018</td><td>Python</td></tr>
<tr><td>2017</td><td>C</td></tr>
<tr><td>2016</td><td>Go</td></tr>
<tr><td>2015</td><td>Java</td></tr>
<tr><td>2014</td><td>JavaScript</td></tr>
<tr><td>2013</td><td>Transact-SQL</td></tr>
<tr><td>2012</td><td>Objective-C</td></tr>
<tr><td>2011</td><td>Objective-C</td></tr>
<tr><td>2010</td><td>Python</td></tr>
<tr><td>2009</td><td>Go</td></tr>
<tr><td>2008</td><td>C</td></tr>
<tr><td>2007</td><td>Python</td></tr>
<tr><td>2006</td><td>Ruby</td></tr>
<tr><td>2005</td><td>Java</td></tr>
<tr><td>2004</td><td>PHP</td></tr>
<tr><td>2003</td><td>C++</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: poučné je i video <a
href="https://www.youtube.com/watch?v=Og847HVwRSI">https://www.youtube.com/watch?v=Og847HVwRSI</a>.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Budoucnost Pythonu</h2>

<p>Python se postupně rozšiřuje do dalších oblastí, vznikají jeho nové varianty
(například <a href="https://github.com/RustPython/RustPython">RustPython</a>,
který by se mohl rychle prosadit kvůli bezpečnosti) a nástroje pro převod kódů
do jiných jazyků (<a href="https://github.com/google/grumpy">Grumpy</a>, který
si ještě popíšeme v&nbsp;samostatném článku). Současně se Python stal součástí
kurzů na mnoha středních i vysokých školách, takže se zvyšuje počet lidí, kteří
tento jazyk ovládají. Nyní zbývá jen maličkost &ndash; konečně (po deseti
letech plánování a varování) překonat schizma Python 2/Python 3. S&nbsp;tím
souvisí i pokračování vývoje Jythonu, který oproti ostatním jazykům pro JVM
(zejména oproti Scale a Kotlinu) prozatím zaostává.</p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>A Brief Timeline of Python<br />
<a href="http://python-history.blogspot.com/2009/01/brief-timeline-of-python.html">http://python-history.blogspot.com/2009/01/brief-timeline-of-python.html</a>
</li>

<li>The ABC Programming Language: a short introduction<br />
<a href="https://homepages.cwi.nl/~steven/abc/">https://homepages.cwi.nl/~steven/abc/</a>
</li>

<li>ABC (programming language)<br />
<a href="https://en.wikipedia.org/wiki/ABC_(programming_language)">https://en.wikipedia.org/wiki/ABC_(programming_language)</a>
</li>

<li>Most Popular Programming Languages 1965 - 2019<br />
<a href="https://www.youtube.com/watch?v=Og847HVwRSI">https://www.youtube.com/watch?v=Og847HVwRSI</a>
</li>

<li>Karin Dewar, Indentation and the Colon<br />
<a href="http://python-history.blogspot.com/2011/07/karin-dewar-indentation-and-colon.html">http://python-history.blogspot.com/2011/07/karin-dewar-indentation-and-colon.html</a>
</li>

<li>History of the software<br />
<a href="https://docs.python.org/3/license.html">https://docs.python.org/3/license.html</a>
</li>

<li>History of Python (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/History_of_Python">https://en.wikipedia.org/wiki/History_of_Python</a>
</li>

<li>History of Python (Python Course)<br />
<a href="https://www.python-course.eu/python3_history_and_philosophy.php">https://www.python-course.eu/python3_history_and_philosophy.php</a>
</li>

<li>The Python Programming Language<br />
<a href="https://www.tiobe.com/tiobe-index/python/">https://www.tiobe.com/tiobe-index/python/</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>Supported Systems for Python<br />
<a href="https://www.oldapps.com/Python.php">https://www.oldapps.com/Python.php</a>
</li>

<li>Download Python for Other Platforms<br />
<a href="https://legacy.python.org/download/other/">https://legacy.python.org/download/other/</a>
</li>

<li>PythonD<br />
<a href="http://www.caddit.net/pythond/">http://www.caddit.net/pythond/</a>
</li>

<li>Old Python releases<br />
<a href="https://www.python.org/download/releases/">https://www.python.org/download/releases/</a>
</li>

<li>Interactive: The Top Programming Languages 2016 (starší data, pěkný způsob filtrace atd.)<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2016">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2016</a>
</li>

<li>Generational list of programming languages<br />
<a href="https://en.wikipedia.org/wiki/Generational_list_of_programming_languages">https://en.wikipedia.org/wiki/Generational_list_of_programming_languages</a>
</li>

<li>Most Popular Programming Languages on Stack Overflow Bar Chart Race<br />
<a href="https://www.youtube.com/watch?v=cKzP61Gjf00">https://www.youtube.com/watch?v=cKzP61Gjf00</a>
</li>

<li>Zdrojové kódy starých verzí Pythonu<br />
<a href="https://legacy.python.org/download/releases/src/">https://legacy.python.org/download/releases/src/</a>
</li>

<li>Python 1.5.2<br />
<a href="https://www.python.org/download/releases/1.5/">https://www.python.org/download/releases/1.5/</a>
</li>

<li>Python 1.6.1<br />
<a href="https://www.python.org/download/releases/1.6.1/">https://www.python.org/download/releases/1.6.1/</a>
</li>

<li>Python from ActiveState<br />
<a href="https://www.activestate.com/products/python/">https://www.activestate.com/products/python/</a>
</li>

<li>10 Important Uses of Python<br />
<a href="https://www.educba.com/uses-of-python/">https://www.educba.com/uses-of-python/</a>
</li>

<li>Top 10 Python Applications in the Real World You Need to Know<br />
<a href="https://www.edureka.co/blog/python-applications/">https://www.edureka.co/blog/python-applications/</a>
</li>

<li>8 World-Class Software Companies That Use Python<br />
<a href="https://realpython.com/world-class-companies-using-python/">https://realpython.com/world-class-companies-using-python/</a>
</li>

<li>Grumpy is a Python to Go source code transcompiler and runtime<br />
<a href="https://github.com/google/grumpy">https://github.com/google/grumpy</a>
</li>

<li>OpenStack<br />
<a href="https://www.openstack.org/">https://www.openstack.org/</a>
</li>

<li>Ansible<br />
<a href="https://www.ansible.com/">https://www.ansible.com/</a>
</li>

<li>GDScript<br />
<a href="http://docs.godotengine.org/en/3.0/getting_started/scripting/gdscript/gdscript_basics.html">http://docs.godotengine.org/en/3.0/getting_started/scripting/gdscript/gdscript_basics.html</a>
</li>

<li>GDScript: An introduction to dynamic languages<br />
<a href="http://docs.godotengine.org/en/3.0/getting_started/scripting/gdscript/gdscript_advanced.html#doc-gdscript-more-efficiently">http://docs.godotengine.org/en/3.0/getting_started/scripting/gdscript/gdscript_advanced.html#doc-gdscript-more-efficiently</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.xahlee.info/comp/scripting_the_21st_century.html">http://www.xahlee.info/comp/scripting_the_21st_century.html</a>
</li>

<li>tecplot - CFD Visualization &amp; Analysis Tools<br />
<a href="https://www.tecplot.com/">https://www.tecplot.com/</a>
</li>

<li>Rhinoceros (Rhino3D)<br />
<a href="https://www.rhino3d.com/">https://www.rhino3d.com/</a>
</li>

<li>Maya<br />
<a href="https://www.autodesk.com/products/maya/overview">https://www.autodesk.com/products/maya/overview</a>
</li>

<li>Blender: Python Scripting<br />
<a href="https://www.lynda.com/Blender-tutorials/Python-Scripting-Blender/486043-2.html">https://www.lynda.com/Blender-tutorials/Python-Scripting-Blender/486043-2.html</a>
</li>

<li>Interview Guido van Rossum: “I'd rather write code than papers.”<br />
<a href="https://www.cwi.nl/news/blogs/interview-guido-van-rossum-201cid-rather-write-code-than-papers.201d">https://www.cwi.nl/news/blogs/interview-guido-van-rossum-201cid-rather-write-code-than-papers.201d</a>
</li>

<li>IronPython<br />
<a href="https://ironpython.net/">https://ironpython.net/</a>
</li>

<li>What’s New in Python 2.0<br />
<a href="https://docs.python.org/3/whatsnew/2.0.html">https://docs.python.org/3/whatsnew/2.0.html</a>
</li>

<li>Python Implementations: Compilers<br />
<a href="https://wiki.python.org/moin/PythonImplementations#Compilers">https://wiki.python.org/moin/PythonImplementations#Compilers</a>
</li>

<li>RPython Frontend and C Wrapper Generator<br />
<a href="http://www.codeforge.com/article/383293">http://www.codeforge.com/article/383293</a>
</li>

<li>PyPy’s Approach to Virtual Machine Construction<br />
<a href="https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf">https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf</a>
</li>

<li>Numba<br />
<a href="http://numba.pydata.org/">http://numba.pydata.org/</a>
</li>

<li>The Magic of RPython<br />
<a href="https://refi64.com/posts/the-magic-of-rpython.html">https://refi64.com/posts/the-magic-of-rpython.html</a>
</li>

<li>RPython: Frequently Asked Questions<br />
<a href="http://rpython.readthedocs.io/en/latest/faq.html">http://rpython.readthedocs.io/en/latest/faq.html</a>
</li>

<li>RPython’s documentation<br />
<a href="http://rpython.readthedocs.io/en/latest/index.html">http://rpython.readthedocs.io/en/latest/index.html</a>
</li>

<li>RPython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyPy#RPython">https://en.wikipedia.org/wiki/PyPy#RPython</a>
</li>

<li>Getting Started with RPython<br />
<a href="http://rpython.readthedocs.io/en/latest/getting-started.html">http://rpython.readthedocs.io/en/latest/getting-started.html</a>
</li>

<li>RPython: překvapivě výkonný dialekt Pythonu, na němž je založen PyPy<br />
<a href="https://www.root.cz/clanky/rpython-prekvapive-vykonny-dialekt-pythonu-na-nemz-je-zalozen-pypy/">https://www.root.cz/clanky/rpython-prekvapive-vykonny-dialekt-pythonu-na-nemz-je-zalozen-pypy/</a>
</li>

<li>RPython vs Cython aneb dvojí přístup k překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/">https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/</a>
</li>

<li>Praktické použití nástroje Cython při překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/">https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/</a>
</li>

<li>Projekt Numba aneb další přístup k překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/projekt-numba-aneb-dalsi-pristup-k-prekladu-pythonu-do-nativniho-kodu/">https://www.root.cz/clanky/projekt-numba-aneb-dalsi-pristup-k-prekladu-pythonu-do-nativniho-kodu/</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut 1.1.0 (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/1.1.0">https://pypi.python.org/pypi/coconut/1.1.0</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

