<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vykreslování spritů a animací na ZX Spectru (2. část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vykreslování spritů a animací na ZX Spectru (2. část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V předchozím článku jsme si ukázali, jak lze na obrazovku ZX Spectra vykreslit sprite definovaný svojí maskou. Ovšem prozatím není čas na jásání, protože naše vykreslovací rutina má mnoho nedostatků, které je zapotřebí postupně opravit.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Vykreslování spritů a animací na ZX Spectru (2. část)</a></p>
<p><a href="#k02">2. Urychlení vykreslování &ndash; optimalizace subrutiny <strong>draw_8_lines</strong></a></p>
<p><a href="#k03">3. Úplný zdrojový kód dnešního druhého demonstračního příkladu</a></p>
<p><a href="#k04">4. Nedostatky podprogramu pro vykreslení spritu na obrazovku ZX Spectra</a></p>
<p><a href="#k05">5. Chybějící kontrola, zda sprite nepřesahuje pravý či levý okraj obrazovky</a></p>
<p><a href="#k06">6. Úplný zdrojový kód dnešního druhého demonstračního příkladu</a></p>
<p><a href="#k07">7. Chybějící kontrola, zda sprite nepřesahuje dolní okraj obrazovky</a></p>
<p><a href="#k08">8. Úplný zdrojový kód dnešního třetího demonstračního příkladu</a></p>
<p><a href="#k09">9. Sprite, jehož maska přesahuje přes třetinu obrazovky</a></p>
<p><a href="#k10">10. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</a></p>
<p><a href="#k11">*** 11. Chyby při zobrazení spritu na nekonstantním pozadí</a></p>
<p><a href="#k12">*** 12. Vykreslení statického obrázku na obrazovku ZX Spectra</a></p>
<p><a href="#k13">*** 13. Zobrazení spritů ve scéně s&nbsp;obrázkem na pozadí</a></p>
<p><a href="#k14">*** 14. Úplný zdrojový kód dnešního šestého demonstračního příkladu</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vykreslování spritů a animací na ZX Spectru (2. část)</h2>

<p><a
href="https://www.root.cz/clanky/vykreslovani-spritu-a-animaci-na-zx-spectru/">Na
předchozí část</a> <a
href="https://www.root.cz/clanky/prace-s-klavesnici-na-zx-spectru/">seriálu o
tvorbě her i dalších aplikací určených pro slavné ZX Spectrum</a> dnes
navážeme. Připomeňme si, že minule jsme si ukázali, jakým způsobem je možné na
obrazovku ZX Spectra vykreslit takzvaný <i>sprite</i>, což je v&nbsp;kontextu
osmibitových mikropočítačů a herních konzolí termín označující pohyblivý a
většinou i animovaný obrázek nějaké herní postavičky. Prozatím umíme vykreslit
sprite o libovolné velikosti, i když &ndash; jak uvidíme dále &ndash; má náš
postup prozatím <i>velmi</i> mnoho problémů a bude ho nutné v&nbsp;mnoha
ohledech vylepšit a taktéž opravit.</p>

<p>Základní verze programu napsaného v&nbsp;assembleru mikroprocesoru Zilog
Z80, který je určen pro vykreslení postavičky o rozměru 24&times;24 pixelů
(v&nbsp;tomto případě navíc bez podpory plynulého posunu o jednotlivé pixely)
vypadala následovně. Samotná data s&nbsp;maskou spritu jsou v&nbsp;této
variantě součástí zdrojového kódu:</p>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        ld b, 15                 <i>; x-ová souřadnice</i>
        ld c, 3                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        call draw_sprite
&nbsp;
        ld b, 29                 <i>; x-ová souřadnice</i>
        ld c, 21                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
<strong>finish</strong>:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
<strong>calc_sprite_address</strong>:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; DE - adresa pro zápis bloku</i>
        <i>;</i>
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y4 Y3 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111            <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rrca
        rrca
        rrca                     <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                    <i>; připočítat x-ovou souřadnici</i>
        ld  e, a                 <i>; máme spodní bajt adresy</i>
                                 <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
&nbsp;
        ld  a, c                 <i>; y-ová souřadnice</i>
        and %00011000            <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000            <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  d, a                 <i>; máme horní bajt adresy</i>
                                 <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>add_e</strong> MACRO n                    <i>; zvýšení hodnoty regitru E</i>
        ld   a, e
        add  a, n
        ld   e, a
endm
&nbsp;
<strong>draw_sprite</strong>:
        ld hl, SPRITE_ADR        <i>; adresa, od níž začíná maska spritu</i>
        push de
        call draw_8_lines        <i>; vykreslit prvních 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        push de
        call draw_8_lines        <i>; vykreslit druhých 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        call draw_8_lines        <i>; vykreslit třetích 8 řádků spritu</i>
&nbsp;
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>draw_8_lines</strong>:
        ld b, 8                  <i>; počitadlo zapsaných řádků</i>
&nbsp;
<strong>loop</strong>:
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
&nbsp;
        inc d                    <i>; posun na definici dalšího obrazového řádku</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; dtto</i>
        djnz loop                <i>; vnitřní smyčka: blok s 3x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
SPRITE_ADR
        db %00000000, %00000000, %00000000
        db %00000000, %00000000, %00000000
        db %00000001, %11110000, %00010000
        db %00000011, %00111000, %00010000
        db %00000101, %11010111, %00010000
        db %00000101, %11001100, %00010000
        db %00000101, %00110000, %00010000
        db %00000100, %11001000, %00010000
        db %00000111, %00110110, %00010000
        db %00001100, %11111110, %00111000
        db %00011111, %11111000, %00000000
        db %00000000, %00000000, %00110000
        db %00000011, %11111111, %10110000
        db %00000101, %11111110, %11100000
        db %00001110, %11111101, %11000000
        db %00011000, %11111100, %00000000
        db %00011000, %00000000, %00000000
        db %00000001, %11111000, %00000000
        db %00000011, %11111100, %00000000
        db %00000001, %10110000, %00000000
        db %00000010, %00001100, %00000000
        db %00000111, %00001110, %00000000
        db %00011110, %00000111, %10000000
        db %00000000, %00000000, %00000000
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p>Tento program po svém spuštění vykreslí na obrazovku ZX Spectra dvojici
spritů (postaviček). Výsledná scéna bude vypadat následovně:</p>

*** image ***
<p><i>Obrázek 1: Dvojice spritů vykreslená dnešním prvním demonstračním
příkladem na obrazovku ZX Spectra.</i></p>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/121-24x24-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/121-24x24-sprite.asm</a>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Urychlení vykreslování &ndash; optimalizace subrutiny <strong>draw_8_lines</strong></h2>

<p>Podprogram určený pro vykreslení spritu o rozměrech 24&times;24 pixelů
třikrát volá subrutinu nazvanou <strong>draw_8_lines</strong>, která vykreslí
&bdquo;pouze&ldquo; osm obrazových řádků spritu, přičemž na každém řádku se
zobrazí 24 pixelů. Tato subrutina interně obsahuje programovou smyčku
opakovanou pro každý obrazový řádek. Původní varianta této subrutiny
s&nbsp;programovou smyčkou vypadá následovně:</p>

<pre>
<strong>draw_8_lines</strong>:
        ld b, 8                  <i>; počitadlo zapsaných řádků</i>
&nbsp;
<strong>loop</strong>:
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc e
&nbsp;
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
&nbsp;
        inc d                    <i>; posun na definici dalšího obrazového řádku</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; dtto</i>
        djnz loop                <i>; vnitřní smyčka: blok s 3x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
</pre>

<p>V&nbsp;této subrutině se dvojice registrů <strong>HL</strong> používá pro
načtení bajtu z&nbsp;masky spritu a dvojice registrů <strong>DE</strong> pro
zápis (přenos dat je pochopitelně prováděn přes akumulátor). Tuto subrutinu lze
ovšem optimalizovat náhradou sekvence instrukcí <strong>ld</strong>
(<i>load</i>) za &bdquo;blokové&ldquo; přenosy (nyní ovšem s&nbsp;počitadlem
obsahujícím jak počitadlo smyčky, tak i nižší nepoužitý bajt):</p>

<pre>
<strong>draw_8_lines</strong>:
        ld  bc, 8*(256+2)        <i>; počitadlo zapsaných řádků</i>
<strong>loop</strong>:
        ldi                      <i>; přesun jednoho bajtu + úprava stavu počitadla [DE++] = [HL++]; BC--</i>
        ldi                      <i>; přesun jednoho bajtu + úprava stavu počitadla [DE++] = [HL++]; BC--</i>
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; korekce</i>
        inc d                    <i>; posun na definici dalšího obrazového řádku (+256)</i>
        djnz loop                <i>; vnitřní smyčka: blok s 3x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
</pre>

<p>Výsledek je jak kratší, tak i rychlejší (opět díky <i>_dw</i>!).</p>

<p>Původní strojový kód:</p>

<pre>
803E:           label draw_8_lines
803E:0608       LD B, 08
8040:           label loop
8040:7E         LD A, (HL)
8041:12         LD (DE), A
8042:23         INC HL
8043:1C         INC E
8044:7E         LD A, (HL)
8045:12         LD (DE), A
8046:23         INC HL
8047:1C         INC E
8048:7E         LD A, (HL)
8049:12         LD (DE), A
804A:23         INC HL
804B:14         INC D
804C:1D         DEC E
804D:1D         DEC E
804E:10F0       DJNZ 8040
8050:C9         RET
</pre>

<p>Strojový kód po optimalizaci zdrojového kódu:</p>

<pre>
8040:           label draw_8_lines
8040:011008     LD BC, 0810
8043:           label loop
8043:EDA0       LDI
8045:EDA0       LDI
8047:7E         LD A, (HL)
8048:12         LD (DE), A
8049:23         INC HL
804A:1D         DEC E
804B:1D         DEC E
804C:14         INC D
804D:10F4       DJNZ 8043
804F:C9         RET
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Úplný zdrojový kód dnešního druhého demonstračního příkladu</h2>

<p>Po <a href="#k02">výše uvedené úpravě</a> získáme program, po jehož spuštění
se zobrazí stejná scéna, jako v&nbsp;případě programu předchozího:</p>

*** image ***
<p><i>Obrázek 2: Dvojice spritů vykreslená dnešním druhým demonstračním
příkladem na obrazovku ZX Spectra. Samotná scéna by měla být totožná
s&nbsp;prvním obrázkem (až na rozdílný řádek s&nbsp;hlavičkou načítaných
dat).</i></p>

<p>Pro úplnost se podívejme, jak vypadá úplný zdrojový kód takto upraveného
příkladu:</p>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        ld b, 15                 <i>; x-ová souřadnice</i>
        ld c, 3                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        call draw_sprite
&nbsp;
        ld b, 29                 <i>; x-ová souřadnice</i>
        ld c, 21                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
<strong>finish</strong>:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
<strong>calc_sprite_address</strong>:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; DE - adresa pro zápis bloku</i>
        <i>;</i>
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y4 Y3 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111            <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rrca
        rrca
        rrca                     <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                    <i>; připočítat x-ovou souřadnici</i>
        ld  e, a                 <i>; máme spodní bajt adresy</i>
                                 <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
&nbsp;
        ld  a, c                 <i>; y-ová souřadnice</i>
        and %00011000            <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000            <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  d, a                 <i>; máme horní bajt adresy</i>
                                 <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
add_e MACRO n                    <i>; zvýšení hodnoty regitru E</i>
        ld   a, e
        add  a, n
        ld   e, a
endm
&nbsp;
<strong>draw_sprite</strong>:
        ld hl, SPRITE_ADR        <i>; adresa, od níž začíná maska spritu</i>
        push de
        call draw_8_lines        <i>; vykreslit prvních 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        push de
        call draw_8_lines        <i>; vykreslit druhých 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        call draw_8_lines        <i>; vykreslit třetích 8 řádků spritu</i>
&nbsp;
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
        ld b, 8                  <i>; počitadlo zapsaných řádků</i>
&nbsp;
&nbsp;
<strong>draw_8_lines</strong>:
        ld  bc, 8*(256+2)        <i>; počitadlo zapsaných řádků</i>
<strong>loop</strong>:
        ldi                      <i>; přesun jednoho bajtu + úprava stavu počitadla [DE++] = [HL++]; BC--</i>
        ldi                      <i>; přesun jednoho bajtu + úprava stavu počitadla [DE++] = [HL++]; BC--</i>
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; korekce</i>
        inc d                    <i>; posun na definici dalšího obrazového řádku (+256)</i>
        djnz loop                <i>; vnitřní smyčka: blok s 3x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
SPRITE_ADR
        db %00000000, %00000000, %00000000
        db %00000000, %00000000, %00000000
        db %00000001, %11110000, %00010000
        db %00000011, %00111000, %00010000
        db %00000101, %11010111, %00010000
        db %00000101, %11001100, %00010000
        db %00000101, %00110000, %00010000
        db %00000100, %11001000, %00010000
        db %00000111, %00110110, %00010000
        db %00001100, %11111110, %00111000
        db %00011111, %11111000, %00000000
        db %00000000, %00000000, %00110000
        db %00000011, %11111111, %10110000
        db %00000101, %11111110, %11100000
        db %00001110, %11111101, %11000000
        db %00011000, %11111100, %00000000
        db %00011000, %00000000, %00000000
        db %00000001, %11111000, %00000000
        db %00000011, %11111100, %00000000
        db %00000001, %10110000, %00000000
        db %00000010, %00001100, %00000000
        db %00000111, %00001110, %00000000
        db %00011110, %00000111, %10000000
        db %00000000, %00000000, %00000000
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/126-24x24-faster-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/126-24x24-faster-sprite.asm</a>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nedostatky podprogramu pro vykreslení spritu na obrazovku ZX Spectra</h2>

<p>Podprogram nazvaný <strong>draw_sprite</strong>, který jsme si ukázali, sice
pracuje zdánlivě korektně (ostatně nám umožnil na obrazovku vykreslit několik
postaviček), ale v&nbsp;navazujících kapitolách si ukážeme, že ve skutečnosti
má poměrně velké množství problémů, které bude nutné vyřešit. Některé
z&nbsp;těchto problémů souvisí s&nbsp;tím, že jsme si práci až příliš
zjednodušili, další problémy pak vychází ze specifické struktury obrazové
paměti ZX Spectra. Každý z&nbsp;dále zmíněných problémů bude demonstrován
v&nbsp;samostatném příkladu:</p>

<ol>
<li><a href="#k05">Chybějící kontrola, zda sprite nepřesahuje pravý či levý okraj obrazovky</a></li>
<li><a href="#k07">Chybějící kontrola, zda sprite nepřesahuje dolní okraj obrazovky</a></li>
<li><a href="#k09">Chybně vykreslený sprite, jehož maska přesahuje přes třetinu obrazovky</a></li>
<li><a href="#k11">Chyby při zobrazení spritu na nekonstantním pozadí</a></li>
</ol>



<p><a name="k05"></a></p>
<h2 id="k05">5. Chybějící kontrola, zda sprite nepřesahuje pravý či levý okraj obrazovky</h2>

<p>Vykreslovací subrutina prozatím vůbec neprovádí kontrolu, zda sprite
nepřesahuje pravý či levý okraj obrazovky (přesněji řečeno pravý okraj
obrazovky, protože oba případy mají, pokud se nad tím zamyslíme, naprosto
stejné vstupy). Můžeme si to ostatně velmi snadno otestovat tak, že vykreslíme
několik spritů blízko pravého okraje obrazovky (povšimněte si x-ových souřadnic
předávaných v&nbsp;pracovním registru <strong>B</strong>):</p>

<pre>
ld b, 29                 <i>; x-ová souřadnice</i>
ld c, 2                  <i>; y-ová souřadnice</i>
call calc_sprite_address <i>; výpočet adresy spritu</i>
call draw_sprite
&nbsp;
ld b, 30                 <i>; x-ová souřadnice</i>
ld c, 5                  <i>; y-ová souřadnice</i>
call calc_sprite_address <i>; výpočet adresy</i>
call draw_sprite
&nbsp;
ld b, 31                 <i>; x-ová souřadnice</i>
ld c, 9                  <i>; y-ová souřadnice</i>
call calc_sprite_address <i>; výpočet adresy</i>
call draw_sprite
</pre>

<p>Výsledek bude vypadat následovně:</p>

*** image ***
<p><i>Obrázek 3: Trojice spritů, z&nbsp;nichž dva přesahují přes pravý okraj
obrazovky.</i></p>

<p>Jak je možné tento problém vyřešit? Například tak, že se logikou hry
zajistí, že žádná z&nbsp;postaviček nepřesáhne okraj obrazovky (nebo se ho jen
dotkne), což je případ velkého množství skutečných her, které pro ZX Spectrum
vznikly. Nebo postavička může okrajem &bdquo;projít&ldquo; podobně, jako
v&nbsp;našem případě. Korektní ořezání spritu tak, aby mohl být zobrazen jen
částečně, je pochopitelně možné, ale dosti pomalé. Podívejme se na
příklady:</p>

*** image ***
<p><i>Obrázek 4: Postavička ve hře JetPac prochází okrajem a zobrazuje se na
druhém okraji obrazovky. Podobně přes okraj prochází i NPC, výbuchy
atd.</i></p>

*** image ***
<p><i>Obrázek 5: Ve hře Starquake se postavička okraje pouze může dotknout. Při
dalším pohybu se ihned přejde do další místnosti.</i></p>

*** image ***
<p><i>Obrázek 6: Ve hře Draconus je sprite korektně ořezáván, ovšem jen na
chvíli, než se přepne místnost. Povšimněte si, že ořezání není provedeno na
samotném okraji obrazovky, čímž se problematika zjednodušuje.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Úplný zdrojový kód dnešního druhého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního druhého demonstračního příkladu vypadá
následovně:</p>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        ld b, 29                 <i>; x-ová souřadnice</i>
        ld c, 2                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        call draw_sprite
&nbsp;
        ld b, 30                 <i>; x-ová souřadnice</i>
        ld c, 5                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
        ld b, 31                 <i>; x-ová souřadnice</i>
        ld c, 9                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
<strong>finish</strong>:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
<strong>calc_sprite_address</strong>:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; DE - adresa pro zápis bloku</i>
        <i>;</i>
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y4 Y3 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111            <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rrca
        rrca
        rrca                     <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                    <i>; připočítat x-ovou souřadnici</i>
        ld  e, a                 <i>; máme spodní bajt adresy</i>
                                 <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
&nbsp;
        ld  a, c                 <i>; y-ová souřadnice</i>
        and %00011000            <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000            <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  d, a                 <i>; máme horní bajt adresy</i>
                                 <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
add_e MACRO n                    <i>; zvýšení hodnoty regitru E</i>
        ld   a, e
        add  a, n
        ld   e, a
endm
&nbsp;
<strong>draw_sprite</strong>:
        ld hl, SPRITE_ADR        <i>; adresa, od níž začíná maska spritu</i>
        push de
        call draw_8_lines        <i>; vykreslit prvních 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        push de
        call draw_8_lines        <i>; vykreslit druhých 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        call draw_8_lines        <i>; vykreslit třetích 8 řádků spritu</i>
&nbsp;
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
        ld b, 8                  <i>; počitadlo zapsaných řádků</i>
&nbsp;
&nbsp;
<strong>draw_8_lines</strong>:
        ld  bc, 8*(256+2)        <i>; počitadlo zapsaných řádků</i>
<strong>loop</strong>:
        ldi                      <i>; přesun jednoho bajtu + úprava stavu počitadla [DE++] = [HL++]; BC--</i>
        ldi                      <i>; přesun jednoho bajtu + úprava stavu počitadla [DE++] = [HL++]; BC--</i>
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; korekce</i>
        inc d                    <i>; posun na definici dalšího obrazového řádku (+256)</i>
        djnz loop                <i>; vnitřní smyčka: blok s 3x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
&nbsp;
SPRITE_ADR
        db %00000000, %00000000, %00000000
        db %00000000, %00000000, %00000000
        db %00000001, %11110000, %00010000
        db %00000011, %00111000, %00010000
        db %00000101, %11010111, %00010000
        db %00000101, %11001100, %00010000
        db %00000101, %00110000, %00010000
        db %00000100, %11001000, %00010000
        db %00000111, %00110110, %00010000
        db %00001100, %11111110, %00111000
        db %00011111, %11111000, %00000000
        db %00000000, %00000000, %00110000
        db %00000011, %11111111, %10110000
        db %00000101, %11111110, %11100000
        db %00001110, %11111101, %11000000
        db %00011000, %11111100, %00000000
        db %00011000, %00000000, %00000000
        db %00000001, %11111000, %00000000
        db %00000011, %11111100, %00000000
        db %00000001, %10110000, %00000000
        db %00000010, %00001100, %00000000
        db %00000111, %00001110, %00000000
        db %00011110, %00000111, %10000000
        db %00000000, %00000000, %00000000
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/127-margins.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/127-margins.asm</a>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Chybějící kontrola, zda sprite nepřesahuje dolní okraj obrazovky</h2>

<p>V&nbsp;případě, že sprite přesáhne přes pravý okraj obrazovky, nemusí být
tento problém (a většinou se jedná o problém) příliš viditelný. Obraz sice může
být na levém okraji poškozen, ale jedná se o lokální problém, který navíc může
u některých her (střílečky) zaniknout v&nbsp;celkovém &bdquo;chaosu&ldquo; na
obrazovce. Ovšem zajímavější problém nastane ve chvíli, kdy sprite přesáhne
spodní okraj obrazovky. Proč tomu tak je? Připomeňme si, jaká je vlastně
organizace obrazové paměti ZX Spectra:</p>

<table>
<tr><th>Od</th><th>Do</th><th>Délka</th><th>Stručný popis</th></tr>
<tr><td>4000</td><td>47ff</td><td>2048</td><td>prvních 64 obrazových řádků</td></tr>
<tr><td>4800</td><td>5000</td><td>2048</td><td>obrazové řádky 64-127</td></tr>
<tr><td>5000</td><td>57ff</td><td>2048</td><td>obrazové řádky 128-191</td></tr>
<tr><td>5800</td><td>5aff</td><td>768</td><td>32&times;24=768 atributů</td></tr>
</table>

<p>Z&nbsp;této tabulky je patrné, že <i>ihned</i> za posledním obrazovým řádkem
s&nbsp;indexem 191 (čísluje se od nuly) se nachází začátek atributové paměti. U
spritu s&nbsp;výškou 24 obrazových řádků se nám může velmi dobře stát, že
přepíšeme část této paměti či že dokonce zasáhneme až do adresního prostoru
<i>za</i> touto pamětí. Pojďme si to vyzkoušet:</p>

<pre>
ld b, 14                 <i>; x-ová souřadnice</i>
ld c, 2                  <i>; y-ová souřadnice</i>
call calc_sprite_address <i>; výpočet adresy spritu</i>
call draw_sprite
&nbsp;
ld b, 14                 <i>; x-ová souřadnice</i>
ld c, 5                  <i>; y-ová souřadnice</i>
call calc_sprite_address <i>; výpočet adresy</i>
call draw_sprite
&nbsp;
ld b, 31                 <i>; x-ová souřadnice</i>
ld c, 23                 <i>; y-ová souřadnice</i>
call calc_sprite_address <i>; výpočet adresy</i>
call draw_sprite
</pre>

<p>Poslední sprite leží až na dolním okraji obrazovky, takže při zápisu jeho
masky přepíšeme i část atributové paměti:</p>

*** image ***
<p><i>Obrázek 7: Trojice spritů, z&nbsp;nichž poslední přesahuje před spodní
okraj obrazovky a při jehož vykreslování se zasáhlo do oblasti atributové
paměti (bílý atribut dokonce bliká, což na statickém screenshotu není
patrné).</i></p>

<p><div class="rs-tip-major">Poznámka: řešení tohoto problému leží buď
v&nbsp;omezení vertikální pozice spritu nebo v&nbsp;&bdquo;ořezání&ldquo;
vykreslování přímo v&nbsp;podprogramu pro vykreslování spritu &ndash; což je
složité resp.&nbsp;pomalé.</div></p>

*** image ***
<p><i>Obrázek 8: Elegantní řešení výše uvedeného problému v&nbsp;legendární hře
&ndash; šílený horník se nedostane přes spodní okraj obrazovky, protože se do
této oblasti nemůže díky designu celé scény ani přiblížit.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód dnešního třetího demonstračního příkladu</h2>

<p>Opět si ukažme úplný zdrojový kód příkladu, jenž po svém překladu a
následném spuštění zobrazí tři sprity, z&nbsp;nichž jeden překračuje dolní
okraj obrazovky a tím pádem zasahuje do oblasti atributové paměti:</p>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        ld b, 14                 <i>; x-ová souřadnice</i>
        ld c, 2                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        call draw_sprite
&nbsp;
        ld b, 14                 <i>; x-ová souřadnice</i>
        ld c, 5                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
        ld b, 31                 <i>; x-ová souřadnice</i>
        ld c, 23                 <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
<strong>finish</strong>:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
<strong>calc_sprite_address</strong>:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; DE - adresa pro zápis bloku</i>
        <i>;</i>
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y4 Y3 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111            <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rrca
        rrca
        rrca                     <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                    <i>; připočítat x-ovou souřadnici</i>
        ld  e, a                 <i>; máme spodní bajt adresy</i>
                                 <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
&nbsp;
        ld  a, c                 <i>; y-ová souřadnice</i>
        and %00011000            <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000            <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  d, a                 <i>; máme horní bajt adresy</i>
                                 <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
add_e MACRO n                    <i>; zvýšení hodnoty regitru E</i>
        ld   a, e
        add  a, n
        ld   e, a
endm
&nbsp;
<strong>draw_sprite</strong>:
        ld hl, SPRITE_ADR        <i>; adresa, od níž začíná maska spritu</i>
        push de
        call draw_8_lines        <i>; vykreslit prvních 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        push de
        call draw_8_lines        <i>; vykreslit druhých 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        call draw_8_lines        <i>; vykreslit třetích 8 řádků spritu</i>
&nbsp;
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
        ld b, 8                  <i>; počitadlo zapsaných řádků</i>
&nbsp;
&nbsp;
<strong>draw_8_lines</strong>:
        ld  bc, 8*(256+2)        <i>; počitadlo zapsaných řádků</i>
<strong>loop</strong>:
        ldi                      <i>; přesun jednoho bajtu + úprava stavu počitadla [DE++] = [HL++]; BC--</i>
        ldi                      <i>; přesun jednoho bajtu + úprava stavu počitadla [DE++] = [HL++]; BC--</i>
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; korekce</i>
        inc d                    <i>; posun na definici dalšího obrazového řádku (+256)</i>
        djnz loop                <i>; vnitřní smyčka: blok s 3x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
&nbsp;
SPRITE_ADR
        db %00000000, %00000000, %00000000
        db %00000000, %00000000, %00000000
        db %00000001, %11110000, %00010000
        db %00000011, %00111000, %00010000
        db %00000101, %11010111, %00010000
        db %00000101, %11001100, %00010000
        db %00000101, %00110000, %00010000
        db %00000100, %11001000, %00010000
        db %00000111, %00110110, %00010000
        db %00001100, %11111110, %00111000
        db %00011111, %11111000, %00000000
        db %00000000, %00000000, %00110000
        db %00000011, %11111111, %10110000
        db %00000101, %11111110, %11100000
        db %00001110, %11111101, %11000000
        db %00011000, %11111100, %00000000
        db %00011000, %00000000, %00000000
        db %00000001, %11111000, %00000000
        db %00000011, %11111100, %00000000
        db %00000001, %10110000, %00000000
        db %00000010, %00001100, %00000000
        db %00000111, %00001110, %00000000
        db %00011110, %00000111, %10000000
        db %00000000, %00000000, %00000000
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Sprite, jehož maska přesahuje přes třetinu obrazovky</h2>

<p>Z&nbsp;předchozích článků již víme, že obrazová paměť je rozdělena do čtyř
oblastí:</p>

<table>
<tr><th>Od</th><th>Do</th><th>Délka</th><th>Stručný popis</th></tr>
<tr><td>4000</td><td>47ff</td><td>2048</td><td>prvních 64 obrazových řádků</td></tr>
<tr><td>4800</td><td>5000</td><td>2048</td><td>obrazové řádky 64-127</td></tr>
<tr><td>5000</td><td>57ff</td><td>2048</td><td>obrazové řádky 128-191</td></tr>
<tr><td>5800</td><td>5aff</td><td>768</td><td>32&times;24=768 atributů</td></tr>
</table>

<p>V&nbsp;každé oblasti jsou navíc řádky uspořádány tak, že za řádkem číslo 1
následuje řádek číslo 8, potom řádek číslo 16 atd. (nejlépe je to patrné při
načítání obrázků z&nbsp;kazety). Tento problém jsme už poměrně uspokojivě
vyřešili ve vykreslovací rutině, a to i pro sprity vyšší než osm obrazových
řádků. Ovšem prozatím jsme &bdquo;zapomněli&ldquo; na to, že pokud sprite
přesáhne přes okraj třetiny obrazovky (64 řádek nebo 128 řádek), nebudou
výpočty adresy pracovat korektně a zbytek spritu se vykreslí v&nbsp;aktuální
třetině obrazovky, a to na jejím horním okraji. Můžeme si to poměrně snadno
otestovat na spritech s&nbsp;následujícími souřadnicemi (stále pro jednoduchost
počítáme souřadnice v&nbsp;násobcích osmi &ndash; to také budeme muset
změnit):</p>

<pre>
ld b, 15                 <i>; x-ová souřadnice</i>
ld c, 3                  <i>; y-ová souřadnice</i>
call calc_sprite_address <i>; výpočet adresy spritu</i>
call draw_sprite
&nbsp;
ld b, 15                 <i>; x-ová souřadnice</i>
ld c, 6                  <i>; y-ová souřadnice</i>
call calc_sprite_address <i>; výpočet adresy</i>
call draw_sprite
</pre>

<p><div class="rs-tip-major">Poznámka: vertikální pozice druhého spritu je
obrazový řádek číslo 6&times;8=48 a výška spritu je 24 obrazových řádků, což je
více, než 64 řádků v&nbsp;první třetině obrazovky (48+24=72 obrazových
řádků).</div></p>

<p>Výsledkem bude následující scéna. Povšimněte si, že spodní sprite, který
přesáhl přes třetinu obrazovky, je vykreslen chybně &ndash; jeho spodní část ve
skutečnosti &bdquo;přetekla&ldquo; na prvních osm řádků na obrazovce.</p>

*** image ***
<p><i>Obrázek 9: Pokus o vykreslení spritu, který přesahuje přes třetinu
obrazovky (jedná se o v&nbsp;pořadí druhý sprite, jehož &bdquo;nohy&ldquo;
přeskočily až nahoru).</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</h2>

<p>Opět si ukažme úplný zdrojový kód demonstračního příkladu, jenž byl popsán
<a href="#k09">v&nbsp;předchozí kapitole</a>. Tento kód vypadá následovně:</p>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        ld b, 15                 <i>; x-ová souřadnice</i>
        ld c, 3                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy spritu</i>
        call draw_sprite
&nbsp;
        ld b, 15                 <i>; x-ová souřadnice</i>
        ld c, 6                  <i>; y-ová souřadnice</i>
        call calc_sprite_address <i>; výpočet adresy</i>
        call draw_sprite
&nbsp;
<strong>finish</strong>:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
<strong>calc_sprite_address</strong>:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; DE - adresa pro zápis bloku</i>
        <i>;</i>
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y4 Y3 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111            <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rrca
        rrca
        rrca                     <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                    <i>; připočítat x-ovou souřadnici</i>
        ld  e, a                 <i>; máme spodní bajt adresy</i>
                                 <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
&nbsp;
        ld  a, c                 <i>; y-ová souřadnice</i>
        and %00011000            <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000            <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  d, a                 <i>; máme horní bajt adresy</i>
                                 <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>add_e</strong> MACRO n                    <i>; zvýšení hodnoty regitru E</i>
        ld   a, e
        add  a, n
        ld   e, a
endm
&nbsp;
<strong>draw_sprite</strong>:
        ld hl, SPRITE_ADR        <i>; adresa, od níž začíná maska spritu</i>
        push de
        call draw_8_lines        <i>; vykreslit prvních 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        push de
        call draw_8_lines        <i>; vykreslit druhých 8 řádků spritu</i>
&nbsp;
        pop  de
        add_e 32                 <i>; zvýšit E o hodnotu 32</i>
        call draw_8_lines        <i>; vykreslit třetích 8 řádků spritu</i>
&nbsp;
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
        ld b, 8                  <i>; počitadlo zapsaných řádků</i>
&nbsp;
&nbsp;
<strong>draw_8_lines</strong>:
        ld  bc, 8*(256+2)        <i>; počitadlo zapsaných řádků</i>
<strong>loop</strong>:
        ldi                      <i>; přesun jednoho bajtu + úprava stavu počitadla [DE++] = [HL++]; BC--</i>
        ldi                      <i>; přesun jednoho bajtu + úprava stavu počitadla [DE++] = [HL++]; BC--</i>
        ld  a,(hl)               <i>; načtení jednoho bajtu z masky</i>
        ld  (de),a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        dec e                    <i>; korekce - posun zpět pod první osmici pixelů</i>
        dec e                    <i>; korekce</i>
        inc d                    <i>; posun na definici dalšího obrazového řádku (+256)</i>
        djnz loop                <i>; vnitřní smyčka: blok s 3x osmi zápisy</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
&nbsp;
SPRITE_ADR
        db %00000000, %00000000, %00000000
        db %00000000, %00000000, %00000000
        db %00000001, %11110000, %00010000
        db %00000011, %00111000, %00010000
        db %00000101, %11010111, %00010000
        db %00000101, %11001100, %00010000
        db %00000101, %00110000, %00010000
        db %00000100, %11001000, %00010000
        db %00000111, %00110110, %00010000
        db %00001100, %11111110, %00111000
        db %00011111, %11111000, %00000000
        db %00000000, %00000000, %00110000
        db %00000011, %11111111, %10110000
        db %00000101, %11111110, %11100000
        db %00001110, %11111101, %11000000
        db %00011000, %11111100, %00000000
        db %00011000, %00000000, %00000000
        db %00000001, %11111000, %00000000
        db %00000011, %11111100, %00000000
        db %00000001, %10110000, %00000000
        db %00000010, %00001100, %00000000
        db %00000111, %00001110, %00000000
        db %00011110, %00000111, %10000000
        db %00000000, %00000000, %00000000
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vykreslení spritu na různorodé pozadí</h2>

<p>Všechny demonstrační příklady určené pro vykreslení spritů prozatím
pracovaly s&nbsp;prázdnou obrazovkou (to ve skutečnosti není zcela přesné,
protože na prvním textovém řádku zůstávají zprávy z&nbsp;načítací rutiny). Co
se však stane ve chvíli, kdy se pokusíme sprite vykreslit oproti nějakému
různorodému pozadí? Uvidíme hned celou řadu problémů, zejména však:</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vykreslení statického obrázku na obrazovku ZX Spectra</h2>

<p></p>

<pre>
SCREEN_ADR             equ $4000
BITMAP_SIZE            equ 32*192
ATTRIBUTE_BLOCK_SIZE   equ 32*64
SCREEN_SIZE            equ BITMAP_SIZE + ATTRIBUTE_BLOCK_SIZE
ENTRY_POINT            equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        <i>; nejprve přeneseme celý obrázek do obrazové paměti</i>
        ld   hl, LOADING_SCREN   <i>; adresa zdrojového bloku</i>
        ld   de, SCREEN_ADR      <i>; adresa cílového bloku</i>
        ld   bc, SCREEN_SIZE     <i>; velikost přenášených dat</i>
        ldir                     <i>; provést blokový přenos</i>
&nbsp;
finish:
        jr finish                <i>; žádný návrat do systému</i>
&nbsp;
&nbsp;
LOADING_SCREN incbin "Alien8.scr"
&nbsp;
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p></p>

*** image ***
<p><i>Obrázek 10: Statický obrázek vykreslený na obrazovku ZX Spectra.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zobrazení spritů ve scéně s&nbsp;obrázkem na pozadí</h2>

*** image ***
<p><i>Obrázek 11: Zobrazení trojice spritů ve scéně s&nbsp;obrázkem na
pozadí.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Úplný zdrojový kód dnešního šestého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního šestého demonstračního příkladu vypadá
následovně:</p>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</h2>

<p>Výše uvedené demonstrační příklady i příklady, které již byly popsány
v&nbsp;předchozích osmnácti článcích [<a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">1</a>]
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-mikroprocesor-zilog-z80-a-smycky-v-assembleru/">2</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-vypis-informaci-na-obrazovku/">3</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-her-a-dem-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny/">4</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-her-a-dem-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny-podruhe/">5</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny-potreti/">6</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-dokonceni-realizace-prikazu-plot/">7</a>],
[<a
href="https://www.root.cz/clanky/zobrazeni-cisel-a-zpracovani-priznaku-mikroprocesoru-zilog-z80/">8</a>],
[<a
href="https://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ulozenymi-binarne-i-ve-formatu-bcd/">9</a>],
[<a
href="https://www.root.cz/clanky/tisk-hexadecimalnich-hodnot-s-vyuzitim-instrukce-daa-na-zx-spectru/">10</a>],
[<a
href="https://www.root.cz/clanky/kopie-datovych-bloku-na-zx-spectru-prenaseni-bajt-po-bajtu/">11</a>],
[<a
href="https://www.root.cz/clanky/kopie-datovych-bloku-na-zx-spectru-s-vyuzitim-zasobniku/">12</a>],
[<a
href="https://www.root.cz/clanky/prace-s-klavesnici-na-zx-spectru/">13</a>],
[<a
href="https://www.root.cz/clanky/ovladani-hracu-ve-hre-klavesnici-nebo-joystickem-na-zx-spectru/">14</a>],
[<a
href="https://www.root.cz/clanky/programujeme-zvuky-a-hudbu-na-zx-spectru/">15</a>],
[<a
href="https://www.root.cz/clanky/zvuky-a-hudba-na-zx-spectru-zvukove-cipy-rady-ay-3-8910/">16</a>],
[<a
href="https://www.root.cz/clanky/podrobnejsi-popis-moznosti-zvukoveho-cipu-rady-ay-3-8910-na-zx-spectru-128k/">17</a>],
[<a href="https://www.root.cz/clanky/vykreslovani-spritu-a-animaci-na-zx-spectru/">18</a>],
je možné přeložit s&nbsp;využitím souboru Makefile, jehož aktuální verze vypadá
následovně (pro překlad a slinkování je, jak je již v&nbsp;tomto seriálu
zvykem, použit assembler <i>Pasmo</i>):</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
prozatím popsané demonstrační příklady určené pro překlad a spuštění na
osmibitovém domácím mikropočítači ZX Spectrum (libovolný model či jeho klon),
které jsou psány v&nbsp;assembleru mikroprocesoru Zilog Z80. Pro překlad těchto
demonstračních příkladů je možné použít například assembler <i>Pasmo</i> (viz
též <a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">úvodní
článek</a>):</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01-color-attribute.asm</td><td>modifikace jednoho barvového atributu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm</a></td></tr>
<tr><td> 2</td><td>02-blinking-attribute.asm</td><td>barvový atribut s&nbsp;nastavením bitů pro blikání a vyšší intenzitu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm</a></td></tr>
<tr><td> 3</td><td>03-symbolic-names.asm</td><td>symbolická jména v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm</a></td></tr>
<tr><td> 4</td><td>04-operators.asm</td><td>operátory a operace se symbolickými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm</a></td></tr>
<tr><td> 5</td><td>05-better-symbols.asm</td><td>tradičnější symbolická jména</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm</a></td></tr>
<tr><td> 6</td><td>06-tapbas-v1.asm</td><td>vygenerování BASICovského loaderu (neúplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm</a></td></tr>
<tr><td> 7</td><td>07-tapbas-v2.asm</td><td>vygenerování BASICovského loaderu (úplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm</a></td></tr>
<tr><td> 8</td><td>08-loop.asm</td><td>jednoduchá počítaná programová smyčka: naivní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm</a></td></tr>
<tr><td> 9</td><td>09-loop.asm</td><td>programová smyčka: zkrácení kódu pro vynulování použitých pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm</a></td></tr>
<tr><td>10</td><td>10-loop.asm</td><td>programová smyčka: optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm</a></td></tr>
<tr><td>11</td><td>11-loop.asm</td><td>programová smyčka: optimalizace využití pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm</a></td></tr>
<tr><td>12</td><td>12-loop.asm</td><td>programová smyčka: použití pracovního registru IX</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm</a></td></tr>
<tr><td>13</td><td>13-loop.asm</td><td>programová smyčka: použití pracovního registru IY</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm</a></td></tr>
<tr><td>14</td><td>14-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm</a></td></tr>
<tr><td>15</td><td>15-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm</a></td></tr>
<tr><td>16</td><td>16-loop.asm</td><td>použití relativního skoku a nikoli skoku absolutního</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm</a></td></tr>
<tr><td>17</td><td>17-loop.asm</td><td>programová smyčka: <strong>inc l</strong> namísto <strong>inc hl</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>18-cls.asm</td><td>smazání obrazovky a otevření kanálu číslo 2 (screen) přes funkci v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm</a></td></tr>
<tr><td>19</td><td>19-print-char-call.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce CALL)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm</a></td></tr>
<tr><td>20</td><td>20-print-char-rst.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce RST)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm</a></td></tr>
<tr><td>21</td><td>21-print-char.asm</td><td>pouze výpis jednoho znaku na obrazovku bez jejího smazání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm</a></td></tr>
<tr><td>22</td><td>22-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (nekorektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm</a></td></tr>
<tr><td>23</td><td>23-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (korektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm</a></td></tr>
<tr><td>24</td><td>24-change-color.asm</td><td>změna barvových atributů (popředí a pozadí) vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm</a></td></tr>
<tr><td>25</td><td>25-change-flash.asm</td><td>povolení či zákaz blikání vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm</a></td></tr>
<tr><td>26</td><td>26-print-at.asm</td><td>výpis znaku či znaků na určené místo na obrazovce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm</a></td></tr>
<tr><td>27</td><td>27-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm</a></td></tr>
<tr><td>28</td><td>28-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm</a></td></tr>
<tr><td>29</td><td>29-print-colorized-string.asm</td><td>výpis řetězce, který obsahuje i řídicí znaky pro změnu barvy atd.</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm</a></td></tr>
<tr><td>30</td><td>30-print-string-ROM.asm</td><td>výpis řetězce s&nbsp;využitím služby/subrutiny uložené v&nbsp;ROM ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>31-attributes.asm</td><td>modifikace atributů pro tisk řetězce subrutinou uloženou v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm</a></td></tr>
<tr><td>32</td><td>32-fill-in-vram.asm</td><td>vyplnění celé bitmapy barvou popředí, návrat do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm</a></td></tr>
<tr><td>33</td><td>33-fill-in-vram-no-ret.asm</td><td>vyplnění celé bitmapy barvou popředí, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>34</td><td>34-fill-in-vram-pattern.asm</td><td>vyplnění celé bitmapy zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm</a></td></tr>
<tr><td>35</td><td>35-slow-fill-in-vram.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm</a></td></tr>
<tr><td>36</td><td>36-slow-fill-in-vram-no-ret.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>37</td><td>37-fill-block.asm</td><td>vykreslení bloku 8&times;8 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm</a></td></tr>
<tr><td>38</td><td>38-fill-block-with-pattern.asm</td><td>vykreslení bloku 8&times;8 pixelů zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm</a></td></tr>
<tr><td>39</td><td>39-fill-block-optimized.asm</td><td>optimalizace předchozího příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm</a></td></tr>
<tr><td>40</td><td>40-draw-char.asm</td><td>vykreslení znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm</a></td></tr>
<tr><td>41</td><td>41-draw-any-char.asm</td><td>podprogram pro vykreslení libovolně zvoleného znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm</a></td></tr>
<tr><td>42</td><td>42-block-anywhere.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>43-block-anywhere-rrca.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm</a></td></tr>
<tr><td>44</td><td>44-better-draw-char.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm</a></td></tr>
<tr><td>45</td><td>45-even-better-draw-char.asm</td><td>posun offsetu pro vykreslení dalšího znaku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm</a></td></tr>
<tr><td>46</td><td>46-draw-char-at.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm</a></td></tr>
<tr><td>47</td><td>47-draw-char-at-unrolled.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm</a></td></tr>
<tr><td>48</td><td>48-incorrect-print-string.asm</td><td>tisk řetězce, nekorektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm</a></td></tr>
<tr><td>49</td><td>49-correct-print-string.asm</td><td>tisk řetězce, korektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>50-ascii-table.asm</td><td>tisk několika bloků ASCII tabulky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm</a></td></tr>
<tr><td>51</td><td>51-plot-block.asm</td><td>vykreslení pixelu verze 1: zápis celého bajtu na pozici pixelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm</a></td></tr>
<tr><td>52</td><td>52-plot-pixel.asm</td><td>vykreslení pixelu verze 2: korektní vykreslení jednoho pixelu, ovšem překreslení celého bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm</a></td></tr>
<tr><td>53</td><td>53-plot-pixel.asm</td><td>vykreslení pixelu verze 3: vylepšená verze předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm</a></td></tr>
<tr><td>54</td><td>54-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (nekorektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm</a></td></tr>
<tr><td>55</td><td>55-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (korektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>56</td><td>56-inverse-ascii-table.asm</td><td>vykreslení ASCII tabulky inverzní barvou (inkoust vs. papír)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm</a></td></tr>
<tr><td>57</td><td>57-plot-pixel-on-inverse-background.asm</td><td>vykreslení pixelů barvou papíru proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm</a></td></tr>
<tr><td>58</td><td>58-plot-inverse-pixel-on-inverse-background.asm</td><td>vykreslení pixelů inverzní barvou proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/58-plot-inverse-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm58-plot-inverse-pixel-on-inverse-background.asm/</a></td></tr>
<tr><td>59</td><td>59-configurable-ascii-table.asm</td><td>vykreslení ASCII tabulky buď přímo inkoustem nebo inverzně</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/59-configurable-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/59-configurable-ascii-table.asm</a></td></tr>
<tr><td>60</td><td>60-plot-over.asm</td><td>přibližná implementace příkazu <strong>PLOT OVER</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/60-plot-over.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/60-plot-over.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>61-print-number-A.asm</td><td>ukázka použití podprogramu pro tisk celého čísla</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/61-print-number-A.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/61-print-number-A.asm</a></td></tr>
<tr><td>62</td><td>62-print-number-B.asm</td><td>pokus o vytištění záporných čísel</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/62-print-number-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/62-print-number-B.asm</a></td></tr>
<tr><td>63</td><td>63-print-number-C.asm</td><td>tisk maximální podporované hodnoty 9999</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/63-print-number-C.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/63-print-number-C.asm</a></td></tr>
<tr><td>64</td><td>64-print-number-D.asm</td><td>tisk vyšší než podporované hodnoty 10000</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/64-print-number-D.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/64-print-number-D.asm</a></td></tr>
<tr><td>65</td><td>65-more-numbers-A.asm</td><td>vytištění číselné řady</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/65-more-numbers-A.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/65-more-numbers-A.asm</a></td></tr>
<tr><td>66</td><td>66-more-numbers-B.asm</td><td>kombinace tisku celočíselných hodnot s&nbsp;dalšími subrutinami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/66-more-numbers-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/66-more-numbers-B.asm</a></td></tr>
<tr><td>67</td><td>67-print-flags-1.asm</td><td>příznakové bity po provedení celočíselné operace 1+2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/67-print-flags-1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/67-print-flags-1.asm</a></td></tr>
<tr><td>68</td><td>68-print-flags-2.asm</td><td>příznakové bity po provedení celočíselné operace 0+0</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/68-print-flags-2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/68-print-flags-2.asm</a></td></tr>
<tr><td>69</td><td>69-print-flags-3.asm</td><td>příznakové bity po provedení operace 255+1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/69-print-flags-3.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/69-print-flags-3.asm</a></td></tr>
<tr><td>70</td><td>70-print-flags-4.asm</td><td>příznakové bity po provedení operace 254+1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/70-print-flags-4.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/70-print-flags-4.asm</a></td></tr>
<tr><td>71</td><td>71-print-flags-5.asm</td><td>příznakové bity po provedení operace 255+255</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/71-print-flags-5.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/71-print-flags-5.asm</a></td></tr>
<tr><td>72</td><td>72-print-flags-6.asm</td><td>výsledek operace 100+100, nastavení příznakových bitů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/72-print-flags-6.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/72-print-flags-6.asm</a></td></tr>
<tr><td>73</td><td>73-print-flags-7.asm</td><td>výsledek operace 128+128, nastavení příznakových bitů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/73-print-flags-7.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/73-print-flags-7.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>74</td><td>74-print-hex-number.asm</td><td>tisk hexadecimálního čísla v&nbsp;rozsahu 0x00 až 0xff (neoptimalizovaná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/74-print-hex-number.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/74-print-hex-number.asm</a></td></tr>
<tr><td>75</td><td>75-print-hex-number.asm</td><td>tisk hexadecimálního čísla v&nbsp;rozsahu 0x00 až 0xff (optimalizovaná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/75-print-hex-number.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/75-print-hex-number.asm</a></td></tr>
<tr><td>76</td><td>76-print-hex-numbers.asm</td><td>tisk několika hexadecimálních hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/76-print-hex-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/76-print-hex-numbers.asm</a></td></tr>
<tr><td>77</td><td>77-add-hex-numbers.asm</td><td>součet dvou osmibitových hexadecimálních hodnot s&nbsp;tiskem všech výsledků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/77-add-hex-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/77-add-hex-numbers.asm</a></td></tr>
<tr><td>78</td><td>78-add-bcd-numbers.asm</td><td>součet dvou osmibitových BCD hodnot s&nbsp;tiskem všech výsledků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/78-add-bcd-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/78-add-bcd-numbers.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>79</td><td>79-print-hex-digit-jmp.asm</td><td>tisk jedné hexadecimální cifry s&nbsp;využitím podmíněného skoku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/79-print-hex-digit-jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/79-print-hex-digit-jmp.asm</a></td></tr>
<tr><td>80</td><td>80-print-hex-digit-overflow.asm</td><td>otestování, jaký znak je vytištěn pro hodnoty větší než 15</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/80-print-hex-digit-overflow.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/80-print-hex-digit-overflow.asm</a></td></tr>
<tr><td>81</td><td>81-print-hex-digit-daa.asm</td><td>tisk jedné hexadecimální cifry s&nbsp;využitím instrukce DAA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/81-print-hex-digit-daa.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/81-print-hex-digit-daa.asm</a></td></tr>
<tr><td>82</td><td>82-print-hex-numbers-daa.asm</td><td>tisk série hexadecimálních hodnot s&nbsp;využitím instrukce DAA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/82-print-hex-numbers-daa.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/82-print-hex-numbers-daa.asm</a></td></tr>
<tr><td>83</td><td>83-print-fp-numbers.asm</td><td>tisk numerických hodnot reprezentovaných v&nbsp;systému plovoucí řádové tečky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/83-print-fp-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/83-print-fp-numbers.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>84</td><td>84-print-ascii-table.asm</td><td>tisk jednoho bloku s&nbsp;ASCII tabulkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/84-print-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/84-print-ascii-table.asm</a></td></tr>
<tr><td>85</td><td>85-copy-ascii-table.asm</td><td>kopie bloku bajt po bajtu založená na naivní programové smyčce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/85-copy-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/85-copy-ascii-table.asm</a></td></tr>
<tr><td>86</td><td>86-copy-ascii-table-B.asm</td><td>kopie bloku s&nbsp;využitím instrukce <strong>LDIR</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/86-copy-ascii-table-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/86-copy-ascii-table-B.asm</a></td></tr>
<tr><td>87</td><td>87-copy-ascii-table-C.asm</td><td>kopie bloku bajt po bajtu založená na programové smyčce a instrukci <strong>LDI</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/87-copy-ascii-table-C.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/87-copy-ascii-table-C.asm</a></td></tr>
<tr><td>88</td><td>88-copy-ascii-table-D.asm</td><td>rozbalení programové smyčky s&nbsp;instrukcí <strong>LDI</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/88-copy-ascii-table-D.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/88-copy-ascii-table-D.asm</a></td></tr>
<tr><td>89</td><td>89-copy-ascii-table-E.asm</td><td>korektní smyčka pro všechny možné velikosti bloků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/89-copy-ascii-table-E.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/89-copy-ascii-table-E.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>90</td><td>90-copy-ascii-table-F.asm</td><td>kostra programu, který pro kopii bloků (16 bajtů) využívá zásobník</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/90-copy-ascii-table-F.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/90-copy-ascii-table-F.asm</a></td></tr>
<tr><td>91</td><td>91-copy-ascii-table-G.asm</td><td>definice makra a několikeré použití (aplikace) tohoto makra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/91-copy-ascii-table-G.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/91-copy-ascii-table-G.asm</a></td></tr>
<tr><td>92</td><td>92-copy-ascii-table-H.asm</td><td>opakování makra založené na <strong>REPT</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/92-copy-ascii-table-H.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/92-copy-ascii-table-H.asm</a></td></tr>
<tr><td>93</td><td>93-copy-ascii-table-I.asm</td><td>vícenásobná kopie části obrazovky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/93-copy-ascii-table-I.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/93-copy-ascii-table-I.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>94</td><td>94-color-attribute.asm</td><td>modifikace jednoho barvového atributu na obrazovce ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/94-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/94-color-attribute.asm</a></td></tr>
<tr><td>95</td><td>95-keypress.asm</td><td>detekce stisku jedné klávesy s&nbsp;vizualizací stisku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm</a></td></tr>
<tr><td>96</td><td>96-keypress-row.asm</td><td>detekce stisku kláves v&nbsp;jednom fyzickém řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm</a></td></tr>
<tr><td>97</td><td>97-keypress-all-rows.asm</td><td>detekce stisku všech kláves klávesnice ZX Spectra 48k</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>98</td><td>98-game-character.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně s&nbsp;využitím klávesnice</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/98-game-character.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/98-game-character.asm</a></td></tr>
<tr><td>99</td><td>99-game-character-2.asm</td><td>vylepšení předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/99-game-character-2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/99-game-character-2.asm</a></td></tr>
<tr><td>100</td><td>100-cursor-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně kurzorovým joystickem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/100-cursor-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/100-cursor-joystick.asm</a></td></tr>
<tr><td>101</td><td>101-sinclair-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně joystickem připojeným přes Interface 2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/101-sinclair-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/101-sinclair-joystick.asm</a></td></tr>
<tr><td>102</td><td>102-kempston-joystick.asm</td><td>zajištění pohybu hráče v&nbsp;herní scéně joystickem připojeným přes rozhraní Kempston</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/102-kempston-joystick.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/102-kempston-joystick.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>103</td><td>103-beep.asm</td><td>využití subrutiny v&nbsp;ROM s&nbsp;implementací příkazu <strong>BEEP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/103-beep.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/103-beep.asm</a></td></tr>
<tr><td>104</td><td>104-music-scale.asm</td><td>přehrání celé stupnice</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/104-music-scale.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/104-music-scale.asm</a></td></tr>
<tr><td>105</td><td>105-direct-speaker.asm</td><td>přímé programové ovládání beeperu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/105-direct-speaker.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/105-direct-speaker.asm</a></td></tr>
<tr><td>106</td><td>106-direct-speaker-di.asm</td><td>zakázání přerušení při přehrávání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/106-direct-speaker-di.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/106-direct-speaker-di.asm</a></td></tr>
<tr><td>107</td><td>107-direct-speaker-border.asm</td><td>vizualizace frekvence přehrávání změnou okraje v&nbsp;reálném čase</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/107-direct-speaker-border.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/107-direct-speaker-border.asm</a></td></tr>
<tr><td>108</td><td>108-direct-speaker-border-di.asm</td><td>vizualizace frekvence přehrávání změnou okraje v&nbsp;reálném čase</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/108-direct-speaker-border-di.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/108-direct-speaker-border-di.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>109</td><td>109-ay-note-a.asm</td><td>přehrání komorního A na čipu AY-3-8912 na ZX Spectru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/109-ay-note-a.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/109-ay-note-a.asm</a></td></tr>
<tr><td>110</td><td>110-ay-note-a.asm</td><td>přehrání komorního A na čipu AY-3-8912 na ZX Spectru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/110-ay-note-a.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/110-ay-note-a.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>111</td><td>111-ay-two-notes.asm</td><td>souběžné přehrání dvojice not</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/111-ay-two-notes.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/111-ay-two-notes.asm</a></td></tr>
<tr><td>112</td><td>112-ay-noise.asm</td><td>vygenerování šumu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/112-ay-noise.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/112-ay-noise.asm</a></td></tr>
<tr><td>113</td><td>113-ay-low-frequency.asm</td><td>čistý tón s&nbsp;nízkou frekvencí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/113-ay-low-frequency.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/113-ay-low-frequency.asm</a></td></tr>
<tr><td>114</td><td>114-ay-high-frequency.asm</td><td>čistý tón s&nbsp;vysokou frekvencí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/114-ay-high-frequency.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/114-ay-high-frequency.asm</a></td></tr>
<tr><td>115</td><td>115-ay-low-noise.asm</td><td>vygenerování šumu s&nbsp;nízkou frekvencí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/115-ay-low-noise.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/115-ay-low-noise.asm</a></td></tr>
<tr><td>116</td><td>116-ay-envelope.asm</td><td>použití obálky založené na trojúhelníkovém signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/116-ay-envelope.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/116-ay-envelope.asm</a></td></tr>
<tr><td>117</td><td>117-ay-envelope.asm</td><td>použití obálky založené na trojúhelníkovém signálu s&nbsp;vysokou frekvencí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/117-ay-envelope.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/117-ay-envelope.asm</a></td></tr>
<tr><td>118</td><td>118-ay-envelope.asm</td><td>použití obálky založené na trojúhelníkovém signálu s&nbsp;nízkou frekvencí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/118-ay-envelope.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/118-ay-envelope.asm</a></td></tr>
<tr><td>119</td><td>119-noise-envelope.asm</td><td>použití obálky společně se šumem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/119-noise-envelope.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/119-noise-envelope.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>120</td><td>120-8x8-sprite.asm</td><td>vykreslení spritu o velikosti 8&times;8 pixelů na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/120-8x8-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/120-8x8-sprite.asm</a></td></tr>
<tr><td>121</td><td>121-24x24-sprite.asm</td><td>vykreslení spritu o velikosti 24&times;24 pixelů na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/121-24x24-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/121-24x24-sprite.asm</a></td></tr>
<tr><td>122</td><td>122-24x24-sprite.asm</td><td>načtení spritu o velikosti 24&times;24 pixelů z&nbsp;include souboru a jeho vykreslení na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/122-24x24-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/122-24x24-sprite.asm</a></td></tr>
<tr><td>123</td><td>123-24x24-sprite.asm</td><td>načtení spritu o velikosti 24&times;24 pixelů z&nbsp;binárního souboru a jeho vykreslení na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/123-24x24-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/123-24x24-sprite.asm</a></td></tr>
<tr><td>124</td><td>124-shifted-sprite.asm</td><td>načtení spritů posunutých o 0 až 7 pixelů z&nbsp;binárních souborů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/124-shifted-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/124-shifted-sprite.asm</a></td></tr>
<tr><td>125</td><td>125-shifted-sprite.asm</td><td>načtení spritů posunutých o 0 až 7 pixelů z&nbsp;include souborů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/125-shifted-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/125-shifted-sprite.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>126</td><td>126-24x24-faster-sprite.asm</td><td>úprava příkladu 121-24x24-sprite.asm do rychlejší podoby</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/126-24x24-faster-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/126-24x24-faster-sprite.asm</a></td></tr>
<tr><td>127</td><td>127-margins.asm</td><td>pokus o vykreslení spritu blízko pravého okraje obrazovky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/127-margins.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/127-margins.asm</a></td></tr>
<tr><td>128</td><td>128-margins.asm</td><td>pokus o vykreslení spritu blízko spodního okraje obrazovky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/128-margins.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/128-margins.asm</a></td></tr>
<tr><td>129</td><td>129-screen-addressing.asm</td><td>problém uspořádání obrazových řádků na ZX Spectru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/129-screen-addressing.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/129-screen-addressing.asm</a></td></tr>
<tr><td>130</td><td>130-screen-background.asm</td><td>vykreslení statického obrázku na obrazovku ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/130-screen-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/130-screen-background.asm</a></td></tr>
<tr><td>131</td><td>131-screen-background-and-sprite.asm</td><td>vykreslení spritu na obrazovku se statickým obrázkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/131-screen-background-and-sprite.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/131-screen-background-and-sprite.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>1xx</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech demonstračních příkladů do podoby obrazu magnetické pásky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>The system variables<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html</a>
</li>

<li>ZX Spectrum manual: chapter #17 Graphics<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Plovoucí řádová čárka na ZX Spectru<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>1A1B: THE 'REPORT AND LINE NUMBER PRINTING' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/1A1B.html">https://skoolkid.github.io/rom/asm/1A1B.html</a>
</li>

<li>2DE3: THE 'PRINT A FLOATING-POINT NUMBER' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/2DE3.html">https://skoolkid.github.io/rom/asm/2DE3.html</a>
</li>

<li>5C63: STKBOT - Address of bottom of calculator stack<br />
<a href="https://skoolkid.github.io/rom/asm/5C63.html">https://skoolkid.github.io/rom/asm/5C63.html</a>
</li>

<li>5C65: STKEND - Address of start of spare space<br />
<a href="https://skoolkid.github.io/rom/asm/5C65.html">https://skoolkid.github.io/rom/asm/5C65.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Chapter 24: The memory<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap24.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap24.html</a>
</li>

<li>Survey of Floating-Point Formats  <br />
<a href="https://mrob.com/pub/math/floatformats.html">https://mrob.com/pub/math/floatformats.html</a>
</li>

<li>Convert an 8bit number to hex in z80 assembler<br />
<a href="https://stackoverflow.com/questions/22838444/convert-an-8bit-number-to-hex-in-z80-assembler">https://stackoverflow.com/questions/22838444/convert-an-8bit-number-to-hex-in-z80-assembler</a>
</li>

<li>80 MICROPROCESSOR Instruction Set Summary<br />
<a href="http://www.textfiles.com/programming/CARDS/z80">http://www.textfiles.com/programming/CARDS/z80</a>
</li>

<li>Extended Binary Coded Decimal Interchange Code<br />
<a href="http://en.wikipedia.org/wiki/EBCDIC">http://en.wikipedia.org/wiki/EBCDIC</a>
</li>

<li>ASCII/EBCDIC Conversion Table<br />
<a href="http://docs.hp.com/en/32212-90008/apcs01.html">http://docs.hp.com/en/32212-90008/apcs01.html</a>
</li>

<li>EBCDIC<br />
<a href="http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php">http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php</a>
</li>

<li>EBCDIC tables<br />
<a href="http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm">http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm</a>
</li>

<li>The Mainframe Blog<br />
<a href="http://mainframe.typepad.com/blog/2006/11/my_personal_mai.html">http://mainframe.typepad.com/blog/2006/11/my_personal_mai.html</a>
</li>

<li>Binary-coded decimal<br />
<a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">https://en.wikipedia.org/wiki/Binary-coded_decimal</a>
</li>

<li>BCD<br />
<a href="https://cs.wikipedia.org/wiki/BCD">https://cs.wikipedia.org/wiki/BCD</a>
</li>

<li>Z80 heaven: Floating Point<br />
<a href="http://z80-heaven.wikidot.com/floating-point">http://z80-heaven.wikidot.com/floating-point</a>
</li>

<li>Z80, the 8-bit Number Cruncher<br />
<a href="http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html">http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html</a>
</li>

<li>Floating-point library for Z80<br />
<a href="https://github.com/DW0RKiN/Floating-point-Library-for-Z80">https://github.com/DW0RKiN/Floating-point-Library-for-Z80</a>
</li>

<li>z80float<br />
<a href="https://github.com/Zeda/z80float">https://github.com/Zeda/z80float</a>
</li>

<li>Fixed point arithmetic<br />
<a href="https://www.root.cz/clanky/fixed-point-arithmetic/">https://www.root.cz/clanky/fixed-point-arithmetic/</a>
</li>

<li>ZX Spectrum BASIC Programming - 2nd Edition<br />
<a href="https://archive.org/details/zx-spectrum-basic-programming/page/n167/mode/2up">https://archive.org/details/zx-spectrum-basic-programming/page/n167/mode/2up</a>
</li>

<li>ZX Spectrum BASIC Programming - 2nd Edition<br />
<a href="https://archive.org/details/zx-spectrum-basic-programming/page/n169/mode/2up">https://archive.org/details/zx-spectrum-basic-programming/page/n169/mode/2up</a>
</li>

<li>How fast is memcpy on the Z80?<br />
<a href="https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80">https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80</a>
</li>

<li>How do Z80 Block Transfer instructions work?<br />
<a href="https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work">https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work</a>
</li>

<li>Retro Programming Made Simple: Keyboard<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/keyboard">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/keyboard</a>
</li>

<li>How ZX Spectrum avoided key ghosting<br />
<a href="https://retrocomputing.stackexchange.com/questions/16235/how-zx-spectrum-avoided-key-ghosting">https://retrocomputing.stackexchange.com/questions/16235/how-zx-spectrum-avoided-key-ghosting</a>
</li>

<li>ZX Spectrum Keyboard Visualized<br />
<a href="http://www.kameli.net/marq/?p=2055">http://www.kameli.net/marq/?p=2055</a>
</li>

<li>Sinclair ZX Spectrum Joysticks Explained<br />
<a href="https://www.retroisle.com/general/spectrum_joysticks.php">https://www.retroisle.com/general/spectrum_joysticks.php</a>
</li>

<li>When A Single Bit Was Enough, Into The Sound Of The ZX Spectrum<br />
<a href="https://hackaday.com/2022/01/20/when-a-single-bit-was-enough-into-the-sound-of-the-zx-spectrum/">https://hackaday.com/2022/01/20/when-a-single-bit-was-enough-into-the-sound-of-the-zx-spectrum/</a>
</li>

<li>03B5: THE 'BEEPER' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/03B5.html">https://skoolkid.github.io/rom/asm/03B5.html</a>
</li>

<li>How To Write ZX Spectrum Games – Chapter 3<br />
<a href="https://chuntey.wordpress.com/2013/02/28/how-to-write-zx-spectrum-games-chapter-3/">https://chuntey.wordpress.com/2013/02/28/how-to-write-zx-spectrum-games-chapter-3/</a>
</li>

<li>Understanding computer sound<br />
<a href="https://www.youtube.com/playlist?list=PL0qES-IQZC8w4vqeQhxHxKgxYYqs3CEOx">https://www.youtube.com/playlist?list=PL0qES-IQZC8w4vqeQhxHxKgxYYqs3CEOx</a>
</li>

<li>Understanding Computer Sound. 5. ZX Spectrum<br />
<a href="https://www.youtube.com/watch?v=N5ACJd2LvbY">https://www.youtube.com/watch?v=N5ACJd2LvbY</a>
</li>

<li>Dark Fusion (Gremlin Graphics, 1988)<br />
<a href="https://www.youtube.com/watch?v=ADL3mdRMzoA">https://www.youtube.com/watch?v=ADL3mdRMzoA</a>
</li>

<li>Arkanoid Spectrum Title Music<br />
<a href="https://www.youtube.com/watch?v=TymO0Lj7Vp8">https://www.youtube.com/watch?v=TymO0Lj7Vp8</a>
</li>

<li>Tim Follin - "Chronos" (ZX Spectrum) [Oscilloscope Visualization]<br />
<a href="https://www.youtube.com/watch?v=yJy45MHrPjc">https://www.youtube.com/watch?v=yJy45MHrPjc</a>
</li>

<li>[60 FPS] Wally Beben - "Sanxion Loader" [ZX Spectrum (Beeper)] (Oscilloscope View)<br />
<a href="https://www.youtube.com/watch?v=JwMxOfQVl7A">https://www.youtube.com/watch?v=JwMxOfQVl7A</a>
</li>

<li>Understanding Computer Sound<br />
<a href="http://forgottencomputer.com/retro/sound/">http://forgottencomputer.com/retro/sound/</a>
</li>

<li>AY-3-8912<br />
<a href="https://sinclair.wiki.zxnet.co.uk/wiki/AY-3-8912">https://sinclair.wiki.zxnet.co.uk/wiki/AY-3-8912</a>
</li>

<li>AY-3-8912<br />
<a href="https://github.com/topics/ay-3-8912">https://github.com/topics/ay-3-8912</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php?noui=1">https://www.chibiakumas.com/z80/ZXSpectrum.php?noui=1</a>
</li>

<li>AY-3-8910<br />
<a href="http://vgmpf.com/Wiki/index.php/AY-3-8910">http://vgmpf.com/Wiki/index.php/AY-3-8910</a>
</li>

<li>AY-3-8910/8912 Programmable sound generator data manual<br />
<a href="https://f.rdw.se/AY-3-8910-datasheet.pdf">https://f.rdw.se/AY-3-8910-datasheet.pdf</a>
</li>

<li>Sprite (computer graphics)<br />
<a href="https://en.wikipedia.org/wiki/Sprite_(computer_graphics)">https://en.wikipedia.org/wiki/Sprite_(computer_graphics)</a>
</li>

<li>Piskel is a free online editor for animated sprites &amp; pixel art<br />
<a href="https://www.piskelapp.com/">https://www.piskelapp.com/</a>
</li>

<li>TAP format<br />
<a href="https://sinclair.wiki.zxnet.co.uk/wiki/TAP_format">https://sinclair.wiki.zxnet.co.uk/wiki/TAP_format</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

