<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vývoj her a grafických i zvukových dem pro ZX Spectrum: vlastní vykreslovací subrutiny</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vývoj her a grafických i zvukových dem pro ZX Spectrum: vlastní vykreslovací subrutiny</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Vývoj her a grafických i zvukových dem pro ZX Spectrum: vlastní vykreslovací subrutiny</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. Vlastní vykreslovací subrutiny &ndash; od vykreslení bloku k&nbsp;vykreslení celého (obarveného) řetězce</a></p>
<p><a href="#k09">*** 9. Vykreslení vzorku 8&times;8 pixelů: základ pro algoritmus vykreslení znaků a řetězců</a></p>
<p><a href="#k10">*** 10. Vykreslení vertikálního vzorku namísto vyplněného bloku</a></p>
<p><a href="#k11">*** 11. Optimalizace vykreslení bloku: využití specifické struktury obrazové paměti ZX Spectra</a></p>
<p><a href="#k12">*** 12. Vykreslení znaku s&nbsp;využitím masky uložené v&nbsp;paměti ROM</a></p>
<p><a href="#k13">*** 13. Tvorba podprogramů (subrutin) v&nbsp;assembleru mikroprocesoru Zilog Z80</a></p>
<p><a href="#k14">*** 14. Podprogram pro vykreslení libovolně zvoleného znaku na obrazovku</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. Vykreslení bloku 8&times;8 na libovolné místo na obrazovce</a></p>
<p><a href="#k17">*** 17. Obsah navazujícího článku</a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vývoj her a grafických i zvukových dem pro ZX Spectrum: vlastní vykreslovací subrutiny</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
ENTRY_POINT      equ $8000
ROM_OPEN_CHANNEL equ $1601
ROM_PRINT        equ $203C
ATTR_T           equ 23695


        org ENTRY_POINT

start:
        ld   A,2              <i>; číslo kanálu</i>
        call ROM_OPEN_CHANNEL <i>; otevření kanálu číslo 2 (screen)</i>

        ld   B, 64            <i>; barva tisku</i>
        ld   HL, ATTR_T       <i>; adresa systémové proměnné ATTR_T</i>

loop:
        ld   (HL), B          <i>; změna barvy tisku</i>
        push BC               <i>; uchovat BC</i>
        ld   DE, TEXT         <i>; adresa prvního znaku v řetězci</i>
        ld   BC, TEXT_LENGTH  <i>; délka textu</i>
        call ROM_PRINT        <i>; volání subrutiny v ROM</i>
        pop  BC               <i>; obnovit BC</i>
        djnz loop             <i>; tisk další barvou</i>
        ret                   <i>; ukončit program</i>

; řetězec
TEXT:   db "Hello, speccy!"

TEXT_LENGTH: equ $ - TEXT

end ENTRY_POINT
</pre>

<pre>
ENTRY_POINT     EQU 8000
ROM_OPEN_CHANNEL EQU 1601
ROM_PRINT       EQU 203C
ATTR_T          EQU 5C8F
                ORG 8000
8000:           label start
8000:3E02       LD A, 02
8002:CD0116     CALL 1601
8005:0640       LD B, 40
8007:218F5C     LD HL, 5C8F
800A:           label loop
800A:70         LD (HL), B
800B:C5         PUSH BC
800C:111980     LD DE, 8019
800F:010E00     LD BC, 000E
8012:CD3C20     CALL 203C
8015:C1         POP BC
8016:10F2       DJNZ 800A
8018:C9         RET
8019:           label TEXT
8019:48656C6C   DEFB of 14 bytes
801D:6F2C2073
8021:70656363
8025:7921
TEXT_LENGTH     EQU 000E
8027:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8026
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
SCREEN_ADR    equ $4000
ENTRY_POINT   equ $8000

PIXELS        equ 256*192


        org ENTRY_POINT

start:
        ld hl, SCREEN_ADR     <i>; adresa pro zápis</i>
        ld a, PIXELS/8/256    <i>; počet opakování bloku s 256 zápisy</i>
        ld b, 0               <i>; počitadlo vnitřní smyčky</i>

loop:
        ld (hl), 0xff         <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy</i>
        djnz loop             <i>; vnitřní smyčka: blok s 256 zápisy</i>
        dec a                 <i>; počitadlo vnější smyčky</i>
        jp NZ, loop           <i>; skok pokud se ještě nedosáhlo nuly</i>
finish:
        ret                   <i>; ukončit program</i>

end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
PIXELS          EQU C000
                ORG 8000
8000:           label start
8000:210040     LD HL, 4000
8003:3E18       LD A, 18
8005:0600       LD B, 00
8007:           label loop
8007:36FF       LD (HL), FF
8009:23         INC HL
800A:10FB       DJNZ 8007
800C:3D         DEC A
800D:C20780     JP NZ, 8007
8010:           label finish
8010:C9         RET
8011:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8010
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
SCREEN_ADR    equ $4000
ENTRY_POINT   equ $8000

PIXELS        equ 256*192


        org ENTRY_POINT

start:
        ld hl, SCREEN_ADR     <i>; adresa pro zápis</i>
        ld a, PIXELS/8/256    <i>; počet opakování bloku s 256 zápisy</i>
        ld b, 0               <i>; počitadlo vnitřní smyčky</i>

loop:
        ld (hl), 0xff         <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy</i>
        djnz loop             <i>; vnitřní smyčka: blok s 256 zápisy</i>
        dec a                 <i>; počitadlo vnější smyčky</i>
        jp NZ, loop           <i>; skok pokud se ještě nedosáhlo nuly</i>
finish:
        jr finish             <i>; nevrátíme se do systému</i>

end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
PIXELS          EQU C000
                ORG 8000
8000:           label start
8000:210040     LD HL, 4000
8003:3E18       LD A, 18
8005:0600       LD B, 00
8007:           label loop
8007:36FF       LD (HL), FF
8009:23         INC HL
800A:10FB       DJNZ 8007
800C:3D         DEC A
800D:C20780     JP NZ, 8007
8010:           label finish
8010:18FE       JR 8010
8012:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8011
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm</a>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
SCREEN_ADR    equ $4000
ENTRY_POINT   equ $8000

PIXELS        equ 256*192
PATTERN       equ %10101010


        org ENTRY_POINT

start:
        ld hl, SCREEN_ADR     <i>; adresa pro zápis</i>
        ld a, PIXELS/8/256    <i>; počet opakování bloku s 256 zápisy</i>
        ld b, 0               <i>; počitadlo vnitřní smyčky</i>

loop:
        ld (hl), PATTERN      <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy</i>
        djnz loop             <i>; vnitřní smyčka: blok s 256 zápisy</i>
        dec a                 <i>; počitadlo vnější smyčky</i>
        jp NZ, loop           <i>; skok pokud se ještě nedosáhlo nuly</i>
finish:
        jr finish             <i>; nevrátíme se do systému</i>

end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
PIXELS          EQU C000
PATTERN         EQU 00AA
                ORG 8000
8000:           label start
8000:210040     LD HL, 4000
8003:3E18       LD A, 18
8005:0600       LD B, 00
8007:           label loop
8007:36AA       LD (HL), AA
8009:23         INC HL
800A:10FB       DJNZ 8007
800C:3D         DEC A
800D:C20780     JP NZ, 8007
8010:           label finish
8010:18FE       JR 8010
8012:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8011
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm</a>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
SCREEN_ADR    equ $4000
ENTRY_POINT   equ $8000
&nbsp;
PIXELS        equ 256*192
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld hl, SCREEN_ADR     <i>; adresa pro zápis</i>
        ld c, PIXELS/8/256    <i>; počet opakování bloku s 256 zápisy</i>
        ld b, 0               <i>; počitadlo vnitřní smyčky</i>
&nbsp;
loop:
&nbsp;
        xor a                 <i>; počitadlo zpožďovací smyčky</i>
delay:
        dec a                 <i>; snížení hodnoty počitadla (v první iteraci 256->255)</i>
        jr  NZ, delay         <i>; opakovat, dokud není dosaženo nuly</i>
&nbsp;  
        ld (hl), 0xff         <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy</i>
        djnz loop             <i>; vnitřní smyčka: blok s 256 zápisy</i>
        dec c                 <i>; počitadlo vnější smyčky</i>
        jp NZ, loop           <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret                   <i>; návrat do systému</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
PIXELS          EQU C000
                ORG 8000
8000:           label start
8000:210040     LD HL, 4000
8003:0E18       LD C, 18
8005:0600       LD B, 00
8007:           label loop
8007:AF         XOR A
8008:           label delay
8008:3D         DEC A
8009:20FD       JR NZ, 8008
800B:36FF       LD (HL), FF
800D:23         INC HL
800E:10F7       DJNZ 8007
8010:0D         DEC C
8011:C20780     JP NZ, 8007
8014:C9         RET
8015:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8014
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm</a>.</div></p>

<pre>
SCREEN_ADR    equ $4000
ENTRY_POINT   equ $8000
&nbsp;
PIXELS        equ 256*192
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld hl, SCREEN_ADR     <i>; adresa pro zápis</i>
        ld c, PIXELS/8/256    <i>; počet opakování bloku s 256 zápisy</i>
        ld b, 0               <i>; počitadlo vnitřní smyčky</i>
&nbsp;
loop:
&nbsp;
        xor a                 <i>; počitadlo zpožďovací smyčky</i>
delay:
        dec a                 <i>; snížení hodnoty počitadla (v první iteraci 256->255)</i>
        jr  NZ, delay         <i>; opakovat, dokud není dosaženo nuly</i>
        
        ld (hl), 0xff         <i>; zápis hodnoty na adresu (HL)</i>
        inc hl                <i>; zvýšení adresy</i>
        djnz loop             <i>; vnitřní smyčka: blok s 256 zápisy</i>
        dec c                 <i>; počitadlo vnější smyčky</i>
        jp NZ, loop           <i>; skok pokud se ještě nedosáhlo nuly</i>
finish:
        jr finish             <i>; nevrátíme se do systému</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
PIXELS          EQU C000
                ORG 8000
8000:           label start
8000:210040     LD HL, 4000
8003:0E18       LD C, 18
8005:0600       LD B, 00
8007:           label loop
8007:AF         XOR A
8008:           label delay
8008:3D         DEC A
8009:20FD       JR NZ, 8008
800B:36FF       LD (HL), FF
800D:23         INC HL
800E:10F7       DJNZ 8007
8010:0D         DEC C
8011:C20780     JP NZ, 8007
8014:           label finish
8014:18FE       JR 8014
8016:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8015
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm</a>.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vlastní vykreslovací subrutiny &ndash; od vykreslení bloku k&nbsp;vykreslení celého (obarveného) řetězce</h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vykreslení vzorku 8&times;8 pixelů: základ pro algoritmus vykreslení znaků a řetězců</h2>

<p></p>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
PIXELS          equ 256*192
SCANLINE_LENGTH equ 256/8
NEXT_SCANLINE   equ SCANLINE_LENGTH*8
&nbsp;
PATTERN         equ $ff
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld hl, SCREEN_ADR     <i>; adresa pro zápis</i>
        ld b, 8               <i>; počitadlo zapsaných bajtů</i>
        ld de, NEXT_SCANLINE  <i>; offset pro přechod na další obrazový řádek</i>
&nbsp;
loop:
        ld (hl), PATTERN      <i>; zápis hodnoty na adresu (HL)</i>
        add hl, de            <i>; posun na definici dalšího obrazového řádku</i>
        djnz loop             <i>; vnitřní smyčka: blok s osmi zápisy</i>
finish:
        ret                   <i>; ukončit program</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
PIXELS          EQU C000
SCANLINE_LENGTH EQU 0020
NEXT_SCANLINE   EQU 0100
PATTERN         EQU 00FF
                ORG 8000
8000:           label start
8000:210040     LD HL, 4000
8003:0608       LD B, 08
8005:110001     LD DE, 0100
8008:           label loop
8008:36FF       LD (HL), FF
800A:19         ADD HL, DE
800B:10FB       DJNZ 8008
800D:           label finish
800D:C9         RET
800E:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800D
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vykreslení vertikálního vzorku namísto vyplněného bloku</h2>

<p></p>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
PIXELS          equ 256*192
SCANLINE_LENGTH equ 256/8
NEXT_SCANLINE   equ SCANLINE_LENGTH*8
&nbsp;
PATTERN         equ %10101010
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld hl, SCREEN_ADR     <i>; adresa pro zápis</i>
        ld b, 8               <i>; počitadlo zapsaných bajtů</i>
        ld de, NEXT_SCANLINE  <i>; offset pro přechod na další obrazový řádek</i>
&nbsp;
loop:
        ld (hl), PATTERN      <i>; zápis hodnoty na adresu (HL)</i>
        add hl, de            <i>; posun na definici dalšího obrazového řádku</i>
        djnz loop             <i>; vnitřní smyčka: blok s osmi zápisy</i>
finish:
        ret                   <i>; ukončit program</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
PIXELS          EQU C000
SCANLINE_LENGTH EQU 0020
NEXT_SCANLINE   EQU 0100
PATTERN         EQU 00AA
                ORG 8000
8000:           label start
8000:210040     LD HL, 4000
8003:0608       LD B, 08
8005:110001     LD DE, 0100
8008:           label loop
8008:36AA       LD (HL), AA
800A:19         ADD HL, DE
800B:10FB       DJNZ 8008
800D:           label finish
800D:C9         RET
800E:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800D
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm</a>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Optimalizace vykreslení bloku: využití specifické struktury obrazové paměti ZX Spectra</h2>

<p></p>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000
&nbsp;
PIXELS          equ 256*192
&nbsp;
PATTERN         equ %10101010
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld hl, SCREEN_ADR     <i>; adresa pro zápis</i>
        ld b, 8               <i>; počitadlo zapsaných bajtů</i>
&nbsp;
loop:
        ld (hl), PATTERN      <i>; zápis hodnoty na adresu (HL)</i>
        inc h                 <i>; posun na definici dalšího obrazového řádku</i>
        djnz loop             <i>; vnitřní smyčka: blok s osmi zápisy</i>
finish:
        ret                   <i>; ukončit program</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
PIXELS          EQU C000
PATTERN         EQU 00AA
                ORG 8000
8000:           label start
8000:210040     LD HL, 4000
8003:0608       LD B, 08
8005:           label loop
8005:36AA       LD (HL), AA
8007:24         INC H
8008:10FB       DJNZ 8005
800A:           label finish
800A:C9         RET
800B:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800A
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm</a>.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vykreslení znaku s&nbsp;využitím masky uložené v&nbsp;paměti ROM</h2>

<p></p>

<pre>
SCREEN_ADR      equ $4000
CHAR_ADR        equ $3c00
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld de, CHAR_ADR + 'A'*8  <i>; adresa masky znaku A</i>
        ld hl, SCREEN_ADR        <i>; adresa pro zápis</i>
        ld b, 8                  <i>; počitadlo zapsaných bajtů</i>
&nbsp;
loop:
        ld a, (de)               <i>; načtení jednoho bajtu z masky</i>
        ld (hl), a               <i>; zápis hodnoty na adresu (HL)</i>
        inc de                   <i>; posun na další bajt masky</i>
        inc h                    <i>; posun na definici dalšího obrazového řádku</i>
        djnz loop                <i>; vnitřní smyčka: blok s osmi zápisy</i>
finish:
        ret                      <i>; ukončit program</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
CHAR_ADR        EQU 3C00
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:11083E     LD DE, 3E08
8003:210040     LD HL, 4000
8006:0608       LD B, 08
8008:           label loop
8008:1A         LD A, (DE)
8009:77         LD (HL), A
800A:13         INC DE
800B:24         INC H
800C:10FA       DJNZ 8008
800E:           label finish
800E:C9         RET
800F:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800E
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm</a>.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Tvorba podprogramů (subrutin) v&nbsp;assembleru mikroprocesoru Zilog Z80</h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Podprogram pro vykreslení libovolně zvoleného znaku na obrazovku</h2>

<p></p>

<pre>
SCREEN_ADR      equ $4000
CHAR_ADR        equ $3c00
ENTRY_POINT     equ $8000

        org ENTRY_POINT

start:
        ld de, SCREEN_ADR        <i>; adresa pro zápis</i>
        ld a, 'A'                <i>; kód vykreslovaného znaku</i>
        call draw_char           <i>; zavolat subrutinu pro vykreslení znaku</i>

        ld de, SCREEN_ADR+1      <i>; adresa pro zápis</i>
        ld a, 'B'                <i>; kód vykreslovaného znaku</i>
        call draw_char           <i>; zavolat subrutinu pro vykreslení znaku</i>

        ld de, SCREEN_ADR+128+31 <i>; adresa pro zápis</i>
        ld a, '?'                <i>; kód vykreslovaného znaku</i>
        call draw_char           <i>; zavolat subrutinu pro vykreslení znaku</i>

finish:
        ret                      <i>; ukončit program</i>

draw_char:
        ld hl, CHAR_ADR          <i>; adresa, od níž začínají masky znaků</i>
        ld b, 0
        ld c, a                  <i>; kód znaku je nyní ve dvojici BC</i>
        sla c
        rl b
        sla c
        rl b
        sla c
        rl b                     <i>; vynásobení BC osmi</i>
        add hl, bc               <i>; přičíst adresu k offsetu masky znaku</i>

        ld b, 8                  <i>; počitadlo zapsaných bajtů</i>
loop:
        ld a, (hl)               <i>; načtení jednoho bajtu z masky</i>
        ld (de), a               <i>; zápis hodnoty na adresu (DE)</i>
        inc hl                   <i>; posun na další bajt masky</i>
        inc d                    <i>; posun na definici dalšího obrazového řádku</i>
        djnz loop                <i>; vnitřní smyčka: blok s osmi zápisy</i>
        ret

end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
CHAR_ADR        EQU 3C00
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:110040     LD DE, 4000
8003:3E41       LD A, 41
8005:CD1980     CALL 8019
8008:110140     LD DE, 4001
800B:3E42       LD A, 42
800D:CD1980     CALL 8019
8010:119F40     LD DE, 409F
8013:3E3F       LD A, 3F
8015:CD1980     CALL 8019
8018:           label finish
8018:C9         RET
8019:           label draw_char
8019:21003C     LD HL, 3C00
801C:0600       LD B, 00
801E:4F         LD C, A
801F:CB21       SLA C
8021:CB10       RL B
8023:CB21       SLA C
8025:CB10       RL B
8027:CB21       SLA C
8029:CB10       RL B
802B:09         ADD HL, BC
802C:0608       LD B, 08
802E:           label loop
802E:7E         LD A, (HL)
802F:12         LD (DE), A
8030:23         INC HL
8031:14         INC D
8032:10FA       DJNZ 802E
8034:C9         RET
8035:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8034
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm</a>.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Vykreslení bloku 8&times;8 na libovolné místo na obrazovce</h2>

<p></p>

<pre>
SCREEN_ADR      equ $4000
ENTRY_POINT     equ $8000

PATTERN         equ $ff


        org ENTRY_POINT

start:

        ld b, 0                 <i>; x-ová souřadnice</i>
        ld c, 0                 <i>; y-ová souřadnice</i>
        call calc_block_address <i>; výpočet adresy</i>
        ld a, PATTERN
        call fill_block         <i>; vykreslit blok</i>

        ld b, 15                <i>; x-ová souřadnice</i>
        ld c, 12                <i>; y-ová souřadnice</i>
        call calc_block_address <i>; výpočet adresy</i>
        ld a, PATTERN
        call fill_block         <i>; vykreslit blok</i>

        ld b, 2                 <i>; x-ová souřadnice</i>
        ld c, 2                 <i>; y-ová souřadnice</i>
        call calc_block_address <i>; výpočet adresy</i>
        ld a, PATTERN
        call fill_block         <i>; vykreslit blok</i>

        ld b, 31                <i>; x-ová souřadnice</i>
        ld c, 23                <i>; y-ová souřadnice</i>
        call calc_block_address <i>; výpočet adresy</i>
        ld a, PATTERN
        call fill_block         <i>; vykreslit blok</i>

finish:
        jr finish               <i>; žádný návrat do systému</i>


calc_block_address:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>; C - y-ová souřadnice (ve znacích, ne pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; HL - adresa pro zápis bloku</i>
        <i>;</i>
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y5 Y4 0 0 0 | Y2 Y1 Y0 X4 X3 X2 X1 X0</i>
        ld  a, c
        and %00000111         <i>; pouze spodní tři bity y-ové souřadnice (řádky 0..7)</i>
        rra
        rra
        rra
        rra                   <i>; nyní jsou čísla řádků v horních třech bitech</i>
        or  b                 <i>; připočítat x-ovou souřadnici</i>
        ld  l, a              <i>; máme spodní bajt adresy</i>
                              <i>; Y2 Y1 Y0 X4 X3 X2 X1 X0</i>

        ld  a, c              <i>; y-ová souřadnice</i>
        and %00011000         <i>; dva bity s indexem "bloku" 0..3 (dolní tři bity už máme zpracovány)</i>
        or  %01000000         <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  h, a              <i>; máme horní bajt adresy</i>
                              <i>; 0 1 0 Y5 Y4 0 0 0</i>
        ret                   <i>; návrat z podprogramu</i>


fill_block:
        <i>; parametry:</i>
        <i>; A - pattern</i>
        <i>; HL - adresa vykreslení bloku</i>
        ld b, 8               <i>; počitadlo zapsaných bajtů</i>
loop:
        ld (hl), PATTERN      <i>; zápis hodnoty na adresu (HL)</i>
        inc h                 <i>; posun na definici dalšího obrazového řádku</i>
        djnz loop             <i>; vnitřní smyčka: blok s osmi zápisy</i>
        ret                   <i>; návrat z podprogramu</i>


end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
ENTRY_POINT     EQU 8000
PATTERN         EQU 00FF
                ORG 8000
8000:           label start
8000:0600       LD B, 00
8002:0E00       LD C, 00
8004:CD3280     CALL 8032
8007:3EFF       LD A, FF
8009:CD4280     CALL 8042
800C:060F       LD B, 0F
800E:0E0C       LD C, 0C
8010:CD3280     CALL 8032
8013:3EFF       LD A, FF
8015:CD4280     CALL 8042
8018:0602       LD B, 02
801A:0E02       LD C, 02
801C:CD3280     CALL 8032
801F:3EFF       LD A, FF
8021:CD4280     CALL 8042
8024:061F       LD B, 1F
8026:0E17       LD C, 17
8028:CD3280     CALL 8032
802B:3EFF       LD A, FF
802D:CD4280     CALL 8042
8030:           label finish
8030:18FE       JR 8030
8032:           label calc_block_address
8032:79         LD A, C
8033:E607       AND 07
8035:1F         RRA
8036:1F         RRA
8037:1F         RRA
8038:1F         RRA
8039:B0         OR B
803A:6F         LD L, A
803B:79         LD A, C
803C:E618       AND 18
803E:F640       OR 40
8040:67         LD H, A
8041:C9         RET
8042:           label fill_block
8042:0608       LD B, 08
8044:           label loop
8044:36FF       LD (HL), FF
8046:24         INC H
8047:10FB       DJNZ 8044
8049:C9         RET
804A:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8049
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm</a>.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah navazujícího článku</h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</h2>

<p>Výše uvedené demonstrační příklady i příklady, které již byly popsány
v&nbsp;předchozích třech článcích [<a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">1</a>]
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-mikroprocesor-zilog-z80-a-smycky-v-assembleru/">2</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-vypis-informaci-na-obrazovku/">3</a>],
je možné přeložit s&nbsp;využitím souboru Makefile, jehož aktuální verze vypadá
následovně (pro překlad a slinkování je použit assembler <i>Pasmo</i>):</p>

<pre>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
prozatím popsané demonstrační příklady určené pro překlad a spuštění na
osmibitovém domácím mikropočítači ZX Spectrum (libovolný model či jeho klon),
které jsou psány v&nbsp;assembleru mikroprocesoru Zilog Z80. Pro překlad těchto
demonstračních příkladů je možné použít například assembler <i>Pasmo</i> (viz
též <a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">úvodní
článek</a>):</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01-color-attribute.asm</td><td>modifikace jednoho barvového atributu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm</a></td></tr>
<tr><td> 2</td><td>02-blinking-attribute.asm</td><td>barvový atribut s&nbsp;nastavením bitů pro blikání a vyšší intenzitu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm</a></td></tr>
<tr><td> 3</td><td>03-symbolic-names.asm</td><td>symbolická jména v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm</a></td></tr>
<tr><td> 4</td><td>04-operators.asm</td><td>operátory a operace se symbolickými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm</a></td></tr>
<tr><td> 5</td><td>05-better-symbols.asm</td><td>tradičnější symbolická jména</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm</a></td></tr>
<tr><td> 6</td><td>06-tapbas-v1.asm</td><td>vygenerování BASICovského loaderu (neúplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm</a></td></tr>
<tr><td> 7</td><td>07-tapbas-v2.asm</td><td>vygenerování BASICovského loaderu (úplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm</a></td></tr>
<tr><td> 8</td><td>08-loop.asm</td><td>jednoduchá počítaná programová smyčka: naivní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm</a></td></tr>
<tr><td> 9</td><td>09-loop.asm</td><td>programová smyčka: zkrácení kódu pro vynulování použitých pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm</a></td></tr>
<tr><td>10</td><td>10-loop.asm</td><td>programová smyčka: optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm</a></td></tr>
<tr><td>11</td><td>11-loop.asm</td><td>programová smyčka: optimalizace využití pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm</a></td></tr>
<tr><td>12</td><td>12-loop.asm</td><td>programová smyčka: použití pracovního registru IX</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm</a></td></tr>
<tr><td>13</td><td>13-loop.asm</td><td>programová smyčka: použití pracovního registru IY</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm</a></td></tr>
<tr><td>14</td><td>14-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm</a></td></tr>
<tr><td>15</td><td>15-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm</a></td></tr>
<tr><td>16</td><td>16-loop.asm</td><td>použití relativního skoku a nikoli skoku absolutního</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm</a></td></tr>
<tr><td>17</td><td>17-loop.asm</td><td>programová smyčka: <strong>inc l</strong> namísto <strong>inc hl</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>18-cls.asm</td><td>smazání obrazovky a otevření kanálu číslo 2 (screen) přes funkci v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm</a></td></tr>
<tr><td>19</td><td>19-print-char-call.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce CALL)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm</a></td></tr>
<tr><td>20</td><td>20-print-char-rst.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce RST)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm</a></td></tr>
<tr><td>21</td><td>21-print-char.asm</td><td>pouze výpis jednoho znaku na obrazovku bez jejího smazání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm</a></td></tr>
<tr><td>22</td><td>22-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (nekorektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm</a></td></tr>
<tr><td>23</td><td>23-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (korektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm</a></td></tr>
<tr><td>24</td><td>24-change-color.asm</td><td>změna barvových atributů (popředí a pozadí) vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm</a></td></tr>
<tr><td>25</td><td>25-change-flash.asm</td><td>povolení či zákaz blikání vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm</a></td></tr>
<tr><td>26</td><td>26-print-at.asm</td><td>výpis znaku či znaků na určené místo na obrazovce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm</a></td></tr>
<tr><td>27</td><td>27-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm</a></td></tr>
<tr><td>28</td><td>28-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm</a></td></tr>
<tr><td>29</td><td>29-print-colorized-string.asm</td><td>výpis řetězce, který obsahuje i řídicí znaky pro změnu barvy atd.</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm</a></td></tr>
<tr><td>30</td><td>30-print-string-ROM.asm</td><td>výpis řetězce s&nbsp;využitím služby/subrutiny uložené v&nbsp;ROM ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>31-attributes.asm</td><td>modifikace atributů pro tisk řetězce subrutinou uloženou v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm</a></td></tr>
<tr><td>32</td><td>32-fill-in-vram.asm</td><td>vyplnění celé bitmapy barvou popředí, návrat do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm</a></td></tr>
<tr><td>33</td><td>33-fill-in-vram-no-ret.asm</td><td>vyplnění celé bitmapy barvou popředí, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>34</td><td>34-fill-in-vram-pattern.asm</td><td>vyplnění celé bitmapy zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm</a></td></tr>
<tr><td>35</td><td>35-slow-fill-in-vram.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm</a></td></tr>
<tr><td>36</td><td>36-slow-fill-in-vram-no-ret.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>37</td><td>37-fill-block.asm</td><td>vykreslení bloku 8&times;8 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm</a></td></tr>
<tr><td>38</td><td>38-fill-block-with-pattern.asm</td><td>vykreslení bloku 8&times;8 pixelů zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm</a></td></tr>
<tr><td>39</td><td>39-fill-block-optimized.asm</td><td>optimalizace předchozího příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm</a></td></tr>
<tr><td>40</td><td>40-draw-char.asm</td><td>vykreslení znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm</a></td></tr>
<tr><td>41</td><td>41-draw-any-char.asm</td><td>podprogram pro vykreslení libovolně zvoleného znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm</a></td></tr>
<tr><td>42</td><td>42-block-anywhere.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech demonstračních příkladů do podoby obrazu magnetické pásky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>The system variables<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

