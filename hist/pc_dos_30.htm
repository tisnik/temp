<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Od reálného režimu k režimu chráněnému na procesorech 80286 a 80386 (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Od reálného režimu k režimu chráněnému na procesorech 80286 a 80386 (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Přechod do chráněného režimu (a zpět) na mikroprocesorech Intel se podobá složitému rituálu. Všechny operace je nutné vykonat v určitém pořadí a naslepo: bez možnosti ladění nebo sledování činnosti PC. A jakákoli chyba se trestá zatuhnutím systému. Dnes si tento proces popíšeme.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Od reálného režimu k&nbsp;režimu chráněnému na procesorech 80286 a 80386 (2.část)</a></p>
<p><a href="#k02">2. Obsah speciálního registru <strong>MSW</strong> na čipu 80286</a></p>
<p><a href="#k03">3. Přečtení a zobrazení obsahu registru <strong>MSW</strong></a></p>
<p><a href="#k04">4. Obsah speciálního registru <strong>CR0</strong> na čipu 80386</a></p>
<p><a href="#k05">5. Přečtení a zobrazení obsahu registru <strong>CR0</strong></a></p>
<p><a href="#k06">6. Test, zda se procesor nachází v&nbsp;chráněném režimu</a></p>
<p><a href="#k07">7. Naivní přechod do chráněného režimu</a></p>
<p><a href="#k08">8. Realizace přechodu do chráněného režimu na čipu 80286</a></p>
<p><a href="#k09">9. Realizace přechodu do chráněného režimu na čipu 80386</a></p>
<p><a href="#k10">10. Vymazání instrukční fronty při přechodech mezi režimy</a></p>
<p><a href="#k11">11. Zpětný přechod z&nbsp;chráněného režimu do režimu reálného</a></p>
<p><a href="#k12">12. Pokus o zpětný přechod do reálného režimu na čipu 80286</a></p>
<p><a href="#k13">13. Zpětný přechod do reálného režimu na čipu 80386</a></p>
<p><a href="#k14">14. Přechod do nereálného režimu na mikroprocesorech 80386</a></p>
<p><a href="#k15">15. Nastavení globální tabulky deskriptorů</a></p>
<p><a href="#k16">16. Načtení tabulky deskriptorů s&nbsp;přechodem do chráněného režimu</a></p>
<p><a href="#k17">17. Naplnění cache deskriptorů a návrat zpět do reálného režimu</a></p>
<p><a href="#k18">18. Úplný zdrojový kód programu pro nastavení nereálného režimu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Od reálného režimu k&nbsp;režimu chráněnému na procesorech 80286 a 80386 (2.část)</h2>

<p>V&nbsp;dnešním článku o tvorbě aplikací pro platformu IBM PC v&nbsp;DOSu si
ukážeme, jakým způsobem lze realizovat přechod z&nbsp;reálného režimu do režimu
chráněného (a zpět). Článek uzavřeme příkladem, který nastaví takzvaný
<i>nereálný režim</i>, tj.&nbsp;mikroprocesor 80386 se bude nacházet
v&nbsp;takovém stavu, že umožní adresovat celý 32bitový rozsah paměti (4GB) bez
jakýchkoli omezení, kde se mohou nacházet data (taktéž se někdy setkáme
s&nbsp;označením <i>flat mode</i>, ale tento název postupně získal odlišný
význam).</p>

<p>Jak již bylo napsáno v&nbsp;perexu článku, přechod do chráněného režimu (a
popř.&nbsp;i zpět) na mikroprocesorech Intel se do značné míry podobá nějakému
složitému rituálu. Všechny operace (a není jich málo) je totiž nutné vykonat
v&nbsp;určitém pevně daném pořadí a navíc naslepo. Ve chvíli přepínání do
chráněného režimu totiž nemáme žádné možnosti ladění: debugger, který by mohl
být spuštěn v&nbsp;režimu reálném, už není dostupný a cesta ke spuštění
debuggeru pro režim chráněný je ještě velmi dlouhá.</p>

<p>Při ladění mikrořadičů si vývojáři pomáhají alespoň blikáním LED připojených
na porty, nebo posílají zprávy na řádkový či sedmisegmentový LCD/LED displej
přes IIC atd. Ovšem na PC nemáme ani tuto možnost, protože při přepínání do
chráněného režimu nelze používat ani I/O porty. A jakákoli chyba je potrestána
zamrznutím systému. Navíc toto zamrznutí může nastat až u zákazníků &ndash;
když například povolíme přerušení příliš brzy, tak pravděpodobnost problémů je
sice malá, ale nenulová.</p>

<p>Takže: šťastnou cestu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Obsah speciálního registru <strong>MSW</strong> na čipu 80286</h2>

<p>Mikroprocesory Intel 80286 se v&nbsp;některých ohledech lišily od původních
čipů Intel 8086/8088. O jednom rozdílu jsme si již řekli &ndash; je jím odlišný
způsob generování fyzické adresy, která je 24bitová a nikoli jen 20bitová.
S&nbsp;tím souvisí i pokus o zajištění zpětné kompatibility vynulováním hodnoty
na dvacátém adresovém vodiči přes (ne)slavnou A20 GATE. Ovšem mikroprocesor
80286 obsahuje i několik dalších registrů se speciálním významem a taktéž
(jakoby nebylo instrukcí již tak obrovské množství) speciálními instrukcemi
určenými pro čtení a zápis do těchto registrů.</p>

<p>Jedním z&nbsp;těchto speciálních registrů je <strong>MSW</strong> neboli
<i>Machine Status Word</i>. Ten obsahuje bity a bitová pole obsahující
informace o stavu mikroprocesoru a vlastně tak doplňuje bity z&nbsp;registru
<strong>FLAGS</strong>. Na čipu Intel 80286 má tento registr šířku šestnáct
bitů, ovšem reálný význam má jen spodních pět bitů. Dalších jedenáct bitů je
rezervovaných. Význam spodních pěti bitů registru <strong>MSW</strong> je
následující:</p>

<table>
<tr><th>Bit</th><th>Označení</th><th>Význam</th></tr>
<tr><td>0</td><td>PE</td><td>povolení chráněného režimu (to nás dnes zajímá)</td></tr>
<tr><td>1</td><td>MP</td><td>příznak, že je dostupný matematický koprocesor, na který je nutné čekat (ovlivňuje význam instrukce <strong>WAIT</strong>)</td></tr>
<tr><td>2</td><td>EM</td><td>příznak emulace matematického koprocesoru (FP instrukce způsobí výjimku, na kterou lze reagovat)</td></tr>
<tr><td>3</td><td>TS</td><td>nastaveno při přepnutí úlohy (v&nbsp;reálném režimu nemá význam)</td></tr>
<tr><td>4</td><td>ET</td><td>rozlišení mezi koprocesorem 80287 a 80387 (popravdě netuším, k&nbsp;čemu je to dobré, prostě Intel, na 286 je vždy nula)</td></tr>
</table>

<p>Pro načtení nové hodnoty do registru <strong>MSW</strong> se používá nová
instrukce <strong>LMSW</strong>, naopak pro přečtení jeho hodnoty je určena
instrukce <strong>SMSW</strong>. Typicky je nutné nastavit nebo vynulovat jen
jediný bit, takže postup je následující:</p>

<pre>
    smsw ax
    or   al, maska    <i>; nastaveni bitu</i>
    lmsw ax
</pre>

<p>a:</p>

<pre>
    smsw ax
    and  al, ~maska   <i>; vynulovani bitu</i>
    lmsw ax
</pre>

<p>K&nbsp;dispozici jsou přitom základní adresovací režimy &ndash; přesuny MSW
lze provést buď do 16bitového pracovního registru nebo do paměti:</p>

<pre>
<i>; Operační kódy instrukcí LMSW a SMSW</i>
<i>; Kompatibilni i s cipem Intel 80286</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU  286        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
org  0x100                     <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
    lmsw ax
    lmsw bp
    lmsw [old_msw]
    lmsw [old_msw+DI]
    lmsw [old_msw+DI+0x100]
&nbsp;
    smsw ax
    smsw bp
    smsw [old_msw]
    smsw [old_msw+DI]
    smsw [old_msw+DI+0x100]
&nbsp;
<i>; datova cast</i>
old_msw: dw 0
</pre>

<p>Operační kódy instrukcí:</p>

<pre>
00000000 0F01F0                      lmsw ax
00000003 0F01F5                      lmsw bp
00000006 0F0136[2A00]                lmsw [old_msw]
0000000B 0F01B5[2A00]                lmsw [old_msw+DI]
00000010 0F01B5[2A01]                lmsw [old_msw+DI+0x100]
&nbsp;
00000015 0F01E0                      smsw ax
00000018 0F01E5                      smsw bp
0000001B 0F0126[2A00]                smsw [old_msw]
00000020 0F01A5[2A00]                smsw [old_msw+DI]
00000025 0F01A5[2A01]                smsw [old_msw+DI+0x100]
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Přečtení a zobrazení obsahu registru <strong>MSW</strong></h2>

<p>Přečtení obsahu speciálního registru <strong>MSW</strong> je nedestruktivní
operací a navíc ji můžeme provést kdykoli (z&nbsp;libovolného režimu). To je
ostatně ukázáno i v&nbsp;dnešním prvním demonstračním příkladu, který po svém
překladu a spuštění obsah tohoto registru zobrazí v&nbsp;podobě hexadecimální
hodnoty:</p>

<pre>
<i>; Tisk obsahu specialniho registru MSW.</i>
<i>; Kompatibilni i s cipem Intel 80286</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU  286        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>; tisk hexadecimalni hodnoty</i>
%macro <strong>print_hex</strong> 1
        mov     bx, hex_digits
        mov     cl, %1                <i>; zapamatovat si predanou hodnotu</i>
&nbsp;
        mov     al, cl                <i>; do AL se vlozi horni hexa cifra</i>
        and     al, 0xf0
        shr     al, 1
        shr     al, 1
        shr     al, 1
        shr     al, 1
&nbsp;
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message], al         <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        mov     al, cl                <i>; do BL se vlozi dolni hexa cifra</i>
        and     al, 0x0f
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message + 1], al     <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        print   message
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100                     <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
    smsw ax                    <i>; prenos MSW do registru AX</i>
    push ax
    mov  al, ah                <i>; nejprve vytiskneme vyssi bajt</i>
    print_hex al
    pop ax                     <i>; pote vytiskneme nizsi bajt</i>
    print_hex al
&nbsp;
    wait_key                   <i>; cekani na stisk klavesy</i>
    exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>; datova cast</i>
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>message</strong> db 0x01, 0x01, "$"
&nbsp;
        <i>; prevodni tabulka hodnoty 0-15 na ASCII znak</i>
<strong>hex_digits</strong> db "0123456789abcdef"
</pre>

<p>Příklad výstupu, který lze získat:</p>

<img src="https://i.iinfo.cz/images/693/pc-19-1.webp" class="image-1162677" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Hexadecimální hodnota speciálního registru MSW.</i></p>

<p>Z&nbsp;vypsaného obsahu je patrné, že je dostupný koprocesor 80387 (není
tedy povolená emulace jeho činnosti), systém je v&nbsp;reálném režimu a nedošlo
k&nbsp;přepnutí úlohy (to v&nbsp;reálném režimu ani není možné).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Obsah speciálního registru <strong>CR0</strong> na čipu 80386</h2>

<p>Mikroprocesory Intel 80386 se v&nbsp;mnohém odlišují od původních dvou
generací čipů 80x86. Došlo i k&nbsp;rozšíření původního šestnáctibitového
registru <strong>MSW</strong> na 32bitový registr nazvaný <strong>CR0</strong>
(<i>Control Register 0</i>). I když se jedná o 32bitový registr, má význam opět
pouze několik bitů, konkrétně sedm bitů. Přitom pět bitů má naprosto stejný
význam, jako u <strong>MSW</strong> (interně se totiž jedná o shodný
registr):</p>

<table>
<tr><th>Bit</th><th>Označení</th><th>Význam</th></tr>
<tr><td>0</td><td>PE</td><td>povolení chráněného režimu (to nás dnes zajímá)</td></tr>
<tr><td>1</td><td>MP</td><td>příznak, že je dostupný matematický koprocesor, na který je nutné čekat (ovlivňuje význam instrukce <strong>WAIT</strong>)</td></tr>
<tr><td>2</td><td>EM</td><td>příznak emulace matematického koprocesoru (FP instrukce způsobí výjimku, na kterou lze reagovat)</td></tr>
<tr><td>3</td><td>TS</td><td>nastaveno při přepnutí úlohy (v&nbsp;reálném režimu nemá význam)</td></tr>
<tr><td>4</td><td>ET</td><td>rozlišení mezi koprocesorem 80287 a 80387 (popravdě netuším, k&nbsp;čemu je to dobré, prostě Intel)</td></tr>
<tr><td>5</td><td>NE</td><td>řízení způsobu detekce výjimek matematického koprocesoru: buď se zpracují jako přerušení nebo jako výjimky</td></tr>
<tr><td>6-30</td><td>&nbsp;</td><td>rezervováno</td></tr>
<tr><td>31</td><td>PG</td><td>stránkování (<i>paging</i>) povoleno či zakázáno</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: nejvíce starostí tedy Intelu způsoboval
volitelný matematický koprocesor a jeho emulace i rozdílné chování 80287 od
80387.</div></p>

<p>Do mikroprocesorů Intel 80286 bylo přidáno jen minimum nových registrů (tedy
zejména výše zmíněný <strong>MSW</strong>), takže se společnost Intel rozhodla,
že pro práci s&nbsp;nimi vyhradí nové instrukce <strong>LMSW</strong> a
<strong>SMSW</strong>. Ovšem u mikroprocesorů Intel 80386 byla situace dosti
odlišná, protože nových registrů byla celá řada: řídicí registry
<strong>CR0</strong> až <strong>CR8</strong>, ladicí registry
<strong>DR0</strong> až <strong>DR7</strong> (některé ovšem chybí), registry
pro testování <strong>TR3</strong> až <strong>TR7</strong> atd. Nebylo by tedy
moudré pro každý z&nbsp;těchto registrů zavádět nové specializované instrukce
(ono to tedy nebylo moudré ani u <strong>MSW</strong>). Proto byla rozšířena
sémantika univerzální přenosové instrukce <strong>MOV</strong> tak, aby bylo
možné provést přenosy stylem:</p>

<pre>
mov EAX, CR0
</pre>

<p><div class="rs-tip-major">Poznámka: další přímé operace s&nbsp;těmito
registry však nebyly možné &ndash; tedy ani maskování pomocí
<strong>AND</strong> nebo <strong>OR</strong>!</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Přečtení a zobrazení obsahu registru <strong>CR0</strong></h2>

<p>Opět se podívejme na způsob přečtení a zobrazení obsahu registru
<strong>CR0</strong>. Je to snadné &ndash; přečteme celou 32bitovou hodnotu
tohoto registru a postupně si necháme v&nbsp;hexadecimální podobě vypsat obsahy
jednotlivých bajtů tohoto registru. Jedna z&nbsp;možných implementací může
vypadat následovně:</p>

<pre>
    mov  eax, cr0              <i>; prenos CR0 do registru EAX</i>
    shr  eax, 24               <i>; hornich 8 bitu do AL</i>
    print_hex al
&nbsp;
    mov  eax, cr0              <i>; prenos CR0 do registru EAX</i>
    shr  eax, 16               <i>; bity 16-23 do AL</i>
    print_hex al
&nbsp;
    mov  eax, cr0              <i>; prenos CR0 do registru EAX</i>
    mov  al, ah                <i>; bity 8-15 do AL</i>
    print_hex al
&nbsp;
    mov  eax, cr0              <i>; prenos CR0 do registru EAX</i>
    print_hex al               <i>; tisk spodnich osmi bitu</i>
</pre>

<p>Výsledek:</p>

<img src="https://i.iinfo.cz/images/693/pc-19-2.webp" class="image-1162680" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 2: Obsah registru CR0 zobrazený v&nbsp;emulátoru PC.</i></p>

<p>Následuje výpis úplného zdrojového kódu tohoto demonstračního příkladu:</p>

<pre>
<i>; Tisk obsahu specialniho registru CR0.</i>
<i>; Kompatibilni s cipem Intel 80286</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU  386        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>; tisk hexadecimalni hodnoty</i>
%macro <strong>print_hex</strong> 1
        mov     bx, hex_digits
        mov     cl, %1                <i>; zapamatovat si predanou hodnotu</i>
&nbsp;
        mov     al, cl                <i>; do AL se vlozi horni hexa cifra</i>
        and     al, 0xf0
        shr     al, 1
        shr     al, 1
        shr     al, 1
        shr     al, 1
&nbsp;
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message], al         <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        mov     al, cl                <i>; do BL se vlozi dolni hexa cifra</i>
        and     al, 0x0f
        xlat                          <i>; prevod hodnoty 0-15 na ASCII znak</i>
        mov     [message + 1], al     <i>; zapis ASCII znaku do retezce</i>
&nbsp;
        print   message
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100                     <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
    mov  eax, cr0              <i>; prenos CR0 do registru EAX</i>
    shr  eax, 24               <i>; hornich 8 bitu do AL</i>
    print_hex al
&nbsp;
    mov  eax, cr0              <i>; prenos CR0 do registru EAX</i>
    shr  eax, 16               <i>; bity 16-23 do AL</i>
    print_hex al
&nbsp;
    mov  eax, cr0              <i>; prenos CR0 do registru EAX</i>
    mov  al, ah                <i>; bity 8-15 do AL</i>
    print_hex al
&nbsp;
    mov  eax, cr0              <i>; prenos CR0 do registru EAX</i>
    print_hex al               <i>; tisk spodnich osmi bitu</i>
&nbsp;
    wait_key                   <i>; cekani na stisk klavesy</i>
    exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>; datova cast</i>
&nbsp;
        <i>; retezec ukonceny znakem $</i>
        <i>; (tato data jsou soucasti vysledneho souboru typu COM)</i>
<strong>message</strong> db 0x01, 0x01, "$"
&nbsp;
        <i>; prevodni tabulka hodnoty 0-15 na ASCII znak</i>
<strong>hex_digits</strong> db "0123456789abcdef"
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Test, zda se procesor nachází v&nbsp;chráněném režimu</h2>

<p>Z&nbsp;předchozího textu vyplývá, že můžeme snadno zjistit, zda se
mikroprocesor nachází v&nbsp;reálném nebo v&nbsp;chráněném režimu. Tuto operaci
provedeme testem nultého bitu registru <strong>MSW</strong> nebo
<strong>CR0</strong>. Z&nbsp;následujícího příkladu bude patrné, jak se tento
test provádí. Nejde o nic složitého (resp.&nbsp;přesněji řečeno většinu operací
již dobře známe):</p>

<pre>
<i>; Otestovani, jestli se mikroprocesor nachazi v chranenem rezimu.</i>
<i>; Kompatibilni i s cipem Intel 80286</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU  286        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100                     <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
    smsw ax                    <i>; prenos MSW do registru AX</i>
    test ax, 0x1               <i>; test nejnizsiho bitu MSW</i>
&nbsp;
    jz not_prot_mode           <i>; nulovy bit? -> nejsme v chranenem rezimu</i>
    print in_protected_mode_msg<i>; nenulovy bit? -> jsme v chranenem rezimu</i>
    jmp end
<strong>not_prot_mode</strong>:
    print not_in_protected_mode_msg
<strong>end</strong>:
    wait_key                   <i>; cekani na stisk klavesy</i>
    exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>; datova cast</i>
<strong>in_protected_mode_msg</strong>:
    db "Processor already in protected mode", 0x0a, 0x0d, "$"
&nbsp;
<strong>not_in_protected_mode_msg</strong>:
    db "Processor is NOT in protected mode", 0x0a, 0x0d, "$"
</pre>

<p>Výsledek:</p>

<img src="https://i.iinfo.cz/images/693/pc-19-3.webp" class="image-1162683" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 3: Výsledek testu, zda se procesor nachází v&nbsp;chráněném režimu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Naivní přechod do chráněného režimu</h2>

<p>Z&nbsp;výše uvedeného popisu speciálních registrů <strong>MSW</strong> a
<strong>CR0</strong> by mohlo vyplývat, že přechod do chráněného režimu je
snadný &ndash; vždyť pouze postačuje nastavit nejnižší bit jednoho
z&nbsp;těchto registrů (v&nbsp;závislosti na použité platformě). Pokud je totiž
bit <strong>PE</strong> (<i>Protected Mode Enable(d))</i> nastaven na jedničku,
skutečně dojde k&nbsp;přepnutí mikroprocesoru do chráněného režimu. Jenže
v&nbsp;praxi je situace daleko složitější a přechod do chráněného režimu
sestává z&nbsp;několika kroků. Ve stručnosti:</p>

<ol>
<li>Test, zda se systém již nachází v&nbsp;chráněném režimu. Pokud ano, můžeme končit, protože pravděpodobně další operace nebudou povoleny (nejsme v&nbsp;ringu 0)</li>
<li>Naplnění globální tabulky deskriptorů (GDT)</li>
<li>Naplnění struktury s&nbsp;popisem GDT (délka a adresa)</li>
<li>Zákaz přerušení</li>
<li>Naplnění tabulky s&nbsp;deskriptory pro přerušovací subrutiny tak, že je nastaven limit na nulu (někdy lze vynechat)</li>
<li>Nastavení bitu <strong>PE</strong> v&nbsp;<strong>MSW</strong> nebo <strong>CR0</strong> &ndash; tedy skutečný přechod do chráněného režimu</li>
<li>Provedení (dlouhého) skoku, aby se vymazala instrukční cache (teoreticky není nutné, pokus se zůstává v&nbsp;16bitovém režimu)</li>
<li>Načtení segmentových registrů; tím se načte i minule zmíněná cache s&nbsp;deskriptory</li>
<li>Inicializace SS:SP (zásobník)</li>
<li>Naplnění tabulky s&nbsp;deskriptory pro přerušovací subrutiny na požadované hodnoty (již bez nulového limitu)</li>
<li>Povolení přerušení</li>
</ol>

<p>Tyto operace (s&nbsp;výjimkou modifikace <strong>IDT</strong> &ndash;
deskriptory pro přerušovací subrutiny) si ukážeme v&nbsp;dalším textu.</p>

<p>Nejprve si však v&nbsp;dalších dvou kapitolách ukažme naivní přechod do
chráněného režimu, kdy vlastně provedeme jen několik kroků z&nbsp;výše
zmíněného seznamu. Výsledkem bude &bdquo;zamrznutý&ldquo; systém (což
v&nbsp;dobách DOSu a Windows 3.x nebylo nic zvláštního), ovšem zamrznutý
v&nbsp;chráněném režimu a nikoli v&nbsp;režimu reálném.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Realizace přechodu do chráněného režimu na čipu 80286</h2>

<p>Podívejme se nejprve, jak lze realizovat přechod do chráněného režimu na
mikroprocesoru Intel 80286.</p>

<p>Nejprve je nutné otestovat, jestli se systém již nenachází v&nbsp;chráněném
režimu. Pokud ano, může aplikace jen vypsat zprávu a ukončit se:</p>

<pre>
    smsw ax                    <i>; prenos MSW do registru AX</i>
    test ax, 0x1               <i>; test nejnizsiho bitu MSW</i>
&nbsp;
    jz not_prot_mode           <i>; nulovy bit? -> nejsme v chranenem rezimu</i>
    print in_protected_mode_msg
    jmp end
</pre>

<p>V&nbsp;případě, že systém není v&nbsp;chráněném režimu, vypíšeme o tom zprávu:</p>
<pre>
    print entering_protected_mode_msg
</pre>

<p>Dále zakážeme přerušení, nastavíme nultý bit registru <strong>MSW</strong> a
přerušení povolíme:</p>

<pre>
    cli                        <i>; zakázat přerušení</i>
&nbsp;
    smsw ax
    or   al, 1                 <i>; nastaveni priznaku chraneneho rezimu</i>
    lmsw ax
&nbsp;
    <i>; nyni jsme v chranenem rezimu, ale bez nastavene tabulky deskriptoru</i>
    <i>; prakticky jakykoli zapis zpusobi zamrznuti systemu!!!</i>
&nbsp;
    sti                        <i>; povolit přerušení</i>
</pre>

<p>Můžeme i vymazat instrukční cache, i když to není nutné:</p>

<pre>
    jmp .flush_cache_1         <i>; vymazani instrukcni fronty</i>
.flush_cache_1:
</pre>

<p>Systém poté prakticky ihned &bdquo;zatuhne&ldquo;, a to po příchodu
jakéhokoli přerušení nebo při pokusu o zavolání funkce DOSu. Ovšem zatuhne
v&nbsp;chráněném režimu, což je pokrok :-)</p>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
<i>; Prechod z realneho rezimu do rezimu chraneneho.</i>
<i>; Kompatibilni i s cipem Intel 80286</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU  286        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100                     <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
    smsw ax                    <i>; prenos MSW do registru AX</i>
    test ax, 0x1               <i>; test nejnizsiho bitu MSW</i>
&nbsp;
    jz not_prot_mode           <i>; nulovy bit? -> nejsme v chranenem rezimu</i>
    print in_protected_mode_msg
    jmp end
<strong>not_prot_mode</strong>:                 <i>; nenulovy bit? -> jsme v chranenem rezimu</i>
    print entering_protected_mode_msg
&nbsp;
    cli                        <i>; zakázat přerušení</i>
&nbsp;
    smsw ax
    or   al, 1                 <i>; nastaveni priznaku chraneneho rezimu</i>
    lmsw ax
&nbsp;
    <i>; nyni jsme v chranenem rezimu, ale bez nastavene tabulky deskriptoru</i>
    <i>; prakticky jakykoli zapis zpusobi zamrznuti systemu!!!</i>
&nbsp;
    sti                        <i>; povolit přerušení</i>
<strong>end</strong>:
    wait_key                   <i>; cekani na stisk klavesy</i>
    exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>; datova cast</i>
<strong>in_protected_mode_msg</strong>:
    db "Processor already in protected mode - exiting", 0x0a, 0x0d, "$"
&nbsp;
<strong>entering_protected_mode_msg</strong>:
    db "Entering protected mode", 0x0a, 0x0d, "$"
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Realizace přechodu do chráněného režimu na čipu 80386</h2>

<p>A jak vypadá přechod do chráněného režimu v&nbsp;případě mikroprocesoru
Intel 80386 (nebo následujících čipech)? Jedná se o prakticky totožnou operaci,
ovšem namísto nastavení nulového bitu speciálního registru <strong>MSW</strong>
se nastavuje nulový bit registru <strong>CR0</strong>:</p>

<pre>
    mov eax, cr0
    or  al, 1                  <i>; nastaveni priznaku chraneneho rezimu</i>
    mov cr0, eax
</pre>

<p><div class="rs-tip-major">Poznámka: test, zda se systém nachází
v&nbsp;chráněném režimu, může stále používat <strong>MSW</strong>.</div></p>

<p>Opět se podívejme na úplný zdrojový kód tohoto demonstračního příkladu:</p>

<pre>
<i>; Prechod z realneho rezimu do rezimu chraneneho.</i>
<i>; Kompatibilni s cipem Intel 80386</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU  386        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100                     <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
    smsw ax                    <i>; prenos MSW do registru AX</i>
    test ax, 0x1               <i>; test nejnizsiho bitu MSW</i>
&nbsp;
    jz not_prot_mode           <i>; nulovy bit? -> nejsme v chranenem rezimu</i>
    print in_protected_mode_msg
    jmp end
<strong>not_prot_mode</strong>:                 <i>; nenulovy bit? -> jsme v chranenem rezimu</i>
    print entering_protected_mode_msg
&nbsp;
    cli                        <i>; zakázat přerušení</i>
&nbsp;
    mov eax, cr0
    or  al, 1                  <i>; nastaveni priznaku chraneneho rezimu</i>
    mov cr0, eax
&nbsp;
    jmp .flush_cache_1         <i>; vymazani instrukcni fronty</i>
.flush_cache_1:
&nbsp;
    <i>; nyni jsme v chranenem rezimu, ale bez nastavene tabulky deskriptoru</i>
    <i>; prakticky jakykoli zapis zpusobi zamrznuti systemu!!!</i>
&nbsp;
    sti
<strong>end</strong>:
    wait_key                   <i>; cekani na stisk klavesy</i>
    exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>; datova cast</i>
<strong>in_protected_mode_msg</strong>:
    db "Processor already in protected mode - exiting", 0x0a, 0x0d, "$"
&nbsp;
<strong>entering_protected_mode_msg</strong>:
    db "Entering protected mode", 0x0a, 0x0d, "$"
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vymazání instrukční fronty při přechodech mezi režimy</h2>

<p>V&nbsp;obou předchozích demonstračních příkladech jsme mohli vidět na první
pohled podivnou instrukci. Jednalo se o skok na adresu, která následuje
<i>ihned</i> po instrukci skoku:</p>

<pre>
    jmp .flush_cache_1         <i>; vymazani instrukcni fronty</i>
.flush_cache_1:
</pre>

<p>Proč se však tato instrukce do programu vůbec vkládá, když vlastně zdánlivě
nic nedělá? Pro urychlení práce mikroprocesorů Intel se začaly postupně zavádět
techniky známé spíše z&nbsp;RISCových mikroprocesorů. Jedna z&nbsp;těchto
technik spočívá v&nbsp;existenci fronty instrukcí, do které jsou přednačteny
instrukce, které se pravděpodobně budou provádět po právě vykonávané instrukci.
Tím se do jisté míry zamezilo čekání na načtení dalších instrukcí, instrukce se
mohly začít dekódovat atd. Celá věc má samozřejmě malý háček: pokud se provede
instrukce skoku, obsahuje celá fronta špatné instrukce, takže ji je nutné
vyprázdnit (a zpomalit výpočet). A právě toto vyprázdnění fronty provede onen
na první pohled nadbytečný skok.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;praxi se při přepínání do
chráněného režimu provádí ještě jeden podobný skok. Tentokrát se jedná o skok
dlouhý (<i>far jump</i>), jehož cílem je naplnění registru CS. Sice stejnou
hodnotou, jakou tento registr již obsahoval, ale víme, že každá změna
segmentového registru naplní i příslušnou skrytou část (deskriptor)
v&nbsp;cache deskriptorů. To má zásadní význam především u 386, kde je možné
přepnutí do 32bitového režimu.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zpětný přechod z&nbsp;chráněného režimu do režimu reálného</h2>

<p>V&nbsp;chráněném režimu není možné běžným způsobem volat ani služby BIOSu,
ale ani služby DOSu. Tyto dva systémy jsou totiž navrženy takovým způsobem, aby
jejich služby byly volatelné jen z&nbsp;reálného režimu. Jakým způsobem lze
ovšem zařídit, aby aplikace psaná v&nbsp;chráněném režimu například změnila
grafický režim (přes BIOS) či pracovala se souborovým systémem (přes DOS)?
Evidentně to totiž možné je, protože takových aplikací vznikla celá řada. Jedno
z&nbsp;řešení spočívá v&nbsp;tom, že se před voláním BIOSu nebo DOSu vrátíme
zpět do reálného režimu, provedeme volání potřebné služby, a vrátíme se zpět do
režimu chráněného (s&nbsp;případnou kopií získaných dat atd.). To zní poměrně
jednoduše, ovšem na architektuře IBM PC ve skutečnosti nic tak snadné není
&ndash; na programátora čeká celá řada pastí.</p>

<p>Začneme nyní NEchronologicky čipem Intel 80386. Zde je možné manipulací
s&nbsp;registrem <strong>CR0</strong>, konkrétně s&nbsp;jeho nulovým bitem
<strong>PE</strong> skutečně provést jak přechod do chráněného režimu (již
známe), tak i zpětný přechod do režimu reálného. Tento zpětný přechod se
provede jednoduše:</p>

<pre>
    mov eax, cr0
    and al, ~1                 <i>; zruseni priznaku chraneneho rezimu</i>
    mov cr0, eax
</pre>

<p>A opět následuje vymazání instrukční cache:</p>

<pre>
    jmp .flush_cache_2         <i>; vymazani instrukcni fronty</i>
.flush_cache_2:
</pre>

<p><div class="rs-tip-major">Poznámka: samozřejmě to není <strong>tak</strong>
jednoduché, neboť je nutné nastavit tabulku deskriptorů, mít zakázané přerušení
v&nbsp;době přepínání režimů atd. Ovšem cesta je celkem zřejmá.</div></p>

<p>Vraťme se zpět k&nbsp;mikroprocesoru 80286. Na něm se přechod do reálného
režimu provádí touto sekvencí instrukcí:</p>

<pre>
    smsw ax
    or   al, 1                 <i>; nastaveni priznaku chraneneho rezimu</i>
    lmsw ax
</pre>

<p>Mohlo by se tedy zdát logické, že vynulováním bitu <strong>PE</strong> se
přepneme zpět do režimu reálného:</p>

<pre>
    smsw ax
    and  al, ~1                <i>; zruseni priznaku chraneneho rezimu</i>
    lmsw ax
</pre>

<p>Malý, vlastně nicotný problém spočívá v&nbsp;tom, že tato operace není
mikroprocesory Intel 80286 podporována. Předpokládalo se totiž, že se o
chráněný režim bude starat operační systém a aplikace poběží v&nbsp;ringu
vyšším než 0 a vůbec nebudou mít důvod se přepínat zpět do režimu reálného.
Ovšem DOS mezi takové systémy nepatřil a ani patřit nemohl, protože musel
podporovat i tisíce původních aplikací pro reálný režim.</p>

<p>Jak tento problém vyřešit? Podobně, jako v&nbsp;případě A20 GATE: co
nedokáže mikroprocesor se muselo &bdquo;ohnout&ldquo; v&nbsp;samotném návrhu a
HW PC. U A20 GATE se jednalo o přidání hradla, které bylo možné programově
ovládat. A v&nbsp;případě přechodu do reálného režimu zbývala jediná možnost
&ndash; reset mikroprocesoru! Ovšem tak vhodně provedený reset, aby aplikace
mohla běžet i po této obecně destruktivní operaci (musela se upravit rutina
zavolaná po resetu). Původní řešení navržené a implementované firmou IBM se
nazývá <i>slow reset</i> a spočívá v&nbsp;tom, že signál resetu byl ovládán
(opět) řadičem klávesnice &ndash; viz například <a
href="https://www.rcollins.org/ftp/source/pmbasics/tspec_a1.l2">toto
řešení</a>. Modernější čipsety dokázaly provádět <i>fast reset</i> jedinou I/O
operací.</p>

<p>Později se začala používat metoda nazývaná <strong>TRIPLE FAULT</strong>.
Jednalo se o vyvolání výjimky, která nastala při zpracování jiné výjimky (což
se označuje jako <i>double fault</i>). Pokud je ovšem ona druhá výjimka takové
povahy, že přetrvá a nelze ji opravit (typicky přetečení zásobníku), nastává
<i>triple fault</i>, který je detekován na úrovni HW a při jeho detekci se
provede reset. Není tedy nutné používat zdlouhavé nastavení řadiče klávesnice
ani se spoléhat na vylepšené čipsety, protože kontrola triple faultu
s&nbsp;následným resetem byla součástí PC AT.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pokus o zpětný přechod do reálného režimu na čipu 80286</h2>

<p>Podívejme se nyní na to, jak zdánlivě snadno může vypadat pokus o zpětný
přechod do reálného režimu na mikroprocesoru Intel 80286. Tento demonstrační
příklad nejprve provede přechod do chráněného režimu a poté se pokusí vrátit
zpět do režimu reálného. Ovšem již <a href="#k11">z&nbsp;předchozí kapitoly</a>
je zřejmé, že se v&nbsp;tomto případě jedná o marnou snahu &ndash; sice jsme
v&nbsp;ringu 0, takže právo na změnu režimu máme, ovšem tato operace není na
mikroprocesorech Intel 80286 podporována:</p>

<pre>
<i>; Prechod z realneho rezimu do rezimu chraneneho a zpet.</i>
<i>; Kompatibilni i s cipem Intel 80286</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU  286        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100                     <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
    smsw ax                    <i>; prenos MSW do registru AX</i>
    test ax, 0x1               <i>; test nejnizsiho bitu MSW</i>
&nbsp;
    jz not_prot_mode           <i>; nulovy bit? -> nejsme v chranenem rezimu</i>
    print in_protected_mode_msg
    jmp end
<strong>not_prot_mode</strong>:                 <i>; nenulovy bit? -> jsme v chranenem rezimu</i>
    print entering_protected_mode_msg
    cli                        <i>; zakázat přerušení</i>
&nbsp;
    smsw ax
    or   al, 1                 <i>; nastaveni priznaku chraneneho rezimu</i>
    lmsw ax
&nbsp;
    jmp .flush_cache_1         <i>; vymazani instrukcni fronty</i>
.flush_cache_1:
&nbsp;
    <i>; nyni jsme v chranenem rezimu, ale bez nastavene tabulky deskriptoru</i>
    <i>; prakticky jakykoli zapis zpusobi zamrznuti systemu!!!</i>
&nbsp;
    <i>; navrat z chraneneho rezimu</i>
    <i>; toto nelze provest tak jednoduse, jak to vypada</i>
    smsw ax
    and  al, ~1                <i>; zruseni priznaku chraneneho rezimu</i>
    lmsw ax
&nbsp;
    jmp .flush_cache_2         <i>; vymazani instrukcni fronty</i>
.flush_cache_2:
&nbsp;
    sti
&nbsp;
    print back_in_real_mode_msg
<strong>end</strong>:
    wait_key                   <i>; cekani na stisk klavesy</i>
    exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>; datova cast</i>
in_protected_mode_msg:
    db "Processor already in protected mode - exiting", 0x0a, 0x0d, "$"
&nbsp;
<strong>entering_protected_mode_msg</strong>:
    db "Entering protected mode", 0x0a, 0x0d, "$"
&nbsp;
<strong>back_in_real_mode_msg</strong>:
    db "Back in real mode", 0x0a, 0x0d, "$"
</pre>

<p>A takto vypadá obrazovka po přepnutí do chráněného režimu a pokusu o návrat
do režimu reálného (který ovšem neproběhne, jak již víme):</p>

<img src="https://i.iinfo.cz/images/693/pc-19-4.webp" class="image-1162686" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 4: Obrazovka aplikace, která provede přepnutí do chráněného
režimu a posléze se pokusí o návrat zpět do režimu reálného na systému
s&nbsp;mikroprocesorem Intel 80286. Návrat zpět se evidentně nepovedl.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zpětný přechod do reálného režimu na čipu 80386</h2>

<p>Na systémech s&nbsp;mikroprocesorem Intel 80386 lze provést jak přechod do
chráněného režimu, tak i návrat do režimu reálného. To je ukázáno na dalším
demonstračním příkladu. Ovšem stále se jedná o umělý příklad, který nemá
praktické využití, protože jsme nenastavili globální tabulku deskriptorů a
nenačetli jsme segmentové registry (což by modifikovalo cache
s&nbsp;deskriptory). Nicméně by měl být tento příklad spustitelný a měl by
zobrazit jak zprávu o přechodu do chráněného režimu, tak i zprávu o jeho
opuštění:</p>

<pre>
<i>; Prechod z realneho rezimu do rezimu chraneneho a zpet.</i>
<i>; Kompatibilni s cipem Intel 80386</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU  386        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100                     <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
    smsw ax                    <i>; prenos MSW do registru AX</i>
    test ax, 0x1               <i>; test nejnizsiho bitu MSW</i>
&nbsp;
    jz not_prot_mode           <i>; nulovy bit? -> nejsme v chranenem rezimu</i>
    print in_protected_mode_msg
    jmp end
<strong>not_prot_mode</strong>:                 <i>; nenulovy bit? -> jsme v chranenem rezimu</i>
    print entering_protected_mode_msg
    cli                        <i>; zakázat přerušení</i>
&nbsp;
    mov eax, cr0
    or  al, 1                  <i>; nastaveni priznaku chraneneho rezimu</i>
    mov cr0, eax
&nbsp;
    jmp .flush_cache_1         <i>; vymazani instrukcni fronty</i>
.flush_cache_1:
&nbsp;
    <i>; nyni jsme v chranenem rezimu, ale bez nastavene tabulky deskriptoru</i>
    <i>; prakticky jakykoli zapis zpusobi zamrznuti systemu!!!</i>
&nbsp;
    mov eax, cr0
    and al, ~1                 <i>; zruseni priznaku chraneneho rezimu</i>
    mov cr0, eax
&nbsp;
    jmp .flush_cache_2         <i>; vymazani instrukcni fronty</i>
.flush_cache_2:
&nbsp;
    sti
&nbsp;
    print back_in_real_mode_msg
<strong>end</strong>:
    wait_key                   <i>; cekani na stisk klavesy</i>
    exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>; datova cast</i>
<strong>in_protected_mode_msg</strong>:
    db "Processor already in protected mode - exiting", 0x0a, 0x0d, "$"
&nbsp;
<strong>entering_protected_mode_msg</strong>:
    db "Entering protected mode", 0x0a, 0x0d, "$"
&nbsp;
<strong>back_in_real_mode_msg</strong>:
    db "Back in real mode", 0x0a, 0x0d, "$"
</pre>

<img src="https://i.iinfo.cz/images/693/pc-19-5.webp" class="image-1162689" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 5: Obrazovka aplikace, která provede přepnutí do chráněného
režimu a posléze se pokusí o návrat zpět do režimu reálného na systému
s&nbsp;mikroprocesorem Intel 80386.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přechod do nereálného režimu na mikroprocesorech 80386</h2>

<p>Ve třetí části dnešního článku si ukážeme praktický (a kupodivu i funkční)
příklad. Bude se jednat o utilitu, která dokáže na mikroprocesorech 80386
nastavit takzvaný <i>nereálný režim</i>, resp.&nbsp;jeho jednu variantu. Tato
varianta umožní adresovat veškerou paměť až do limitu 4GB jen s&nbsp;využitím
32bitových offsetů. Zbavíme se tedy nutnosti myslet na segmentové registry
(ovšem ty se stále budou používat &ndash; prostě je budeme zapisovat, toť vše)
a adresování bude realizováno jen lineární 32bitovou adresou (pro jednoduchost
platí pro segmentové registry <strong>ES</strong>, <strong>FS</strong> a
<strong>GS</strong>). Práce s&nbsp;ukazateli se tedy do značné míry zjednoduší
a bude možné bez problémů používat datové struktury přesahující hranici 64kB.
Pro jednoduchost však nebudeme měnit limity kódového segmentu (i to lze
zařídit, ale program se zkomplikuje). Navíc jsou operace s&nbsp;daty 32bitové
&ndash; ušetří se za prefixové bajty.</p>

<p>Celý postup je následující:</p>

<ol>
<li>Test, zda se systém již nachází v&nbsp;chráněném režimu. Pokud ano, máme smůlu a program je ihned ukončen.</li>
<li>Zákaz přerušení (můžeme ho však zakázat i po naplnění GDT).</li>
<li>Naplnění globální tabulky deskriptorů (GDT), která bude obsahovat &bdquo;nulový deskriptor&ldquo; a druhý deskriptor bez limitů</li>
<li>Naplnění struktury s&nbsp;popisem GDT (délka a adresa)</li>
<li>Uložení obsahu segmentového registru <strong>DS</strong>, později ho obnovíme (přitom <strong>DS=SS</strong>)</li>
<li>Nastavení bitu <strong>PE</strong> v&nbsp;registru <strong>CR0</strong> &ndash; tedy skutečný přechod do chráněného režimu</li>
<li>Provedení skoku na další adresu &ndash; vymazání instrukční fronty</li>
<li>Načtení segmentových registrů; tím se načte i minule zmíněná cache s&nbsp;deskriptory</li>
<li>Vynulování bitu <strong>PE</strong> v&nbsp;registru <strong>CR0</strong> &ndash; tedy návrat do reálného režimu</li>
<li>Provedení skoku na další adresu &ndash; vymazání instrukční fronty</li>
<li>Inicializace registru <strong>SS</strong> (zásobník)</li>
<li>Povolení přerušení</li>
<li>Ukázka, že lze použít 32bitové adresování přes registr <strong>ES</strong> nebo <strong>FS</strong> nebo <strong>GS</strong> (ale lze i <strong>DS</strong>, pokud se nezmění cache s&nbsp;deskriptory)</li>
</ol>



<p><a name="k15"></a></p>
<h2 id="k15">15. Nastavení globální tabulky deskriptorů</h2>

<p>Globální tabulka deskriptorů může být uložena kdekoli (resp.&nbsp;kdekoli
v&nbsp;konvenční paměti &ndash; jinam totiž přístup zatím nemáme) a obsahuje na
čipech Intel 80386 následující záznamy, kterých může být až 8191:</p>

<img src="https://i.iinfo.cz/images/422/pc-18-7.webp" class="image-1161186" width="640" height="420" alt="&#160;" title="Autor: tisnik + Intel 80386&#160;Reference Programmer's&#160;Manual, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 6: Ze struktury bitových polí deskriptorů je patrné, jak se nové bity přidávaly k&nbsp;bitům definovaným již u čipů 80286<br />Zdroj:
Intel 80386 Reference Programmer's Manual</i></p>

<p>Přitom budeme chtít nastavit bitová pole <strong>BASE</strong> na nulovou
adresu a <strong>LIMIT</strong> na samé jedničky (tedy bez limitu). Taktéž je
ovšem nutné nastavit i další bitová pole &ndash; typ deskriptoru, přístupová
práva, vypnutí stránkování atd. Pro tento účel použijeme pomocné makro, které
na základě zadané báze, limitu, přístupových práv a příznaků nastaví osm bajtů
deskriptoru (ve kterém jsou tato dlouhá bitová pole rozdělena na kratší části
&ndash; prostě platforma Wintel):</p>

<pre>
%define <strong>MAKE_GDT_DESC</strong>(base, limit, access, flags) \
    (((base &amp; 0x00FFFFFF) &lt;&lt; 16) | \
    ((base &amp; 0xFF000000) &lt;&lt; 32) | \
    (limit &amp; 0x0000FFFF) | \
    ((limit &amp; 0x000F0000) &lt;&lt; 32) | \
    ((access &amp; 0xFF) &lt;&lt; 40) | \
    ((flags &amp; 0x0F) &lt;&lt; 52))
</pre>

<p>Do tabulky deskriptorů se na první místo vkládá <i>nulový deskriptor</i>
s&nbsp;limitem nastaveným na nulu. Ten slouží pro detekci přístupu do paměti
přes NULL ukazatel (což by ovšem bylo možné realizovat i jinými způsoby). A
druhý deskriptor bude nastaven takto:</p>

<ul>
<li>Bázová adresa: 0x00000000</li>
<li>Limit: 0xffffff (s&nbsp;granularitou 4kB)</li>
<li>Přístupové bity: P=1 (povolení), DPL=0 (ring 0), S=1 (nesystémový segment), X=0 (datový segment, ne kód), C=0 (roste směrem nahoru, nejde o zásobník), R=1 (lze číst), A=0 (to je jedno, nastaví se při prvním přístupu)</li>
<li>Příznaky G=1 (granularita=4kB), D=1 (32bitové operace), U=0 (nepouživáno HW)</li>
</ul>

<p>Datovou strukturu s&nbsp;obsahem tabulky deskriptorů tedy můžeme
v&nbsp;assembleru naplnit takto:</p>

<pre>
.start:
.null_descriptor:
    dq 0
.flat_descriptor:
    dq MAKE_GDT_DESC(0, 0xffffffff, 10010010b, 1100b)
                                <i>; 32-bit data, granularita 4KB, limit 0xffffffff, base=0</i>
</pre>

<p>Podívejme se pro zajímavost, jak se volání makra
<strong>MAKE_GDT_DESC</strong> přeložilo do výsledného binárního kódu. Jedná se
o osm bajtů začínajících na adrese 125:</p>

<pre>
   116 0000009B 90                      align 4                        <i>; pro jistotu: potrebujeme zarovnani na 32 bitu</i>
   117                                  
   118                                  global_descriptor_table:
   119                                  FLAT_SEL  equ .flat_descriptor  - .start
   120                                  
   121                                  .start:
   122                                  .null_descriptor:
   123 0000009C 0000000000000000            dq 0
   124                                  .flat_descriptor:
   125 000000A4 FFFF00000092CF00            dq MAKE_GDT_DESC(0, 0xffffffff, 10010010b, 1100b)
   126                                                                  <i>; 32-bit data, granularita 4KB, limit 0xffffffff, base=0</i>
   127                                  .end:
   128                                  
   129                                  .gdtr:
   130 000000AC 0F00                        dw .end - .start - 1
   131                                                                  <i>; velikost tabulky deskriptoru -1</i>
   132 000000AE [9C000000]                  dd .start                   <i>; tato hodnota se musi upravit v runtime</i>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Načtení tabulky deskriptorů s&nbsp;přechodem do chráněného režimu</h2>

<p>Do bázové části druhého deskriptoru v&nbsp;tabulce deskriptorů následně
uložíme obsah registru <strong>DS</strong>. To nelze provést přímo v&nbsp;čase
překladu, ale až v&nbsp;čase běhu (<i>runtime</i>), protože nevíme, jak bude
<strong>DS</strong> nastaven operačním systémem. A samozřejmě nesmíme
zapomenout na vynásobení adresy segmentu šestnácti:</p>

<pre>
    <i>; nastaveni globalni tabulky deskriptoru</i>
    mov eax, ds                <i>; adresa ulozena v DS (nasobime sestnacti)</i>
    shl eax, 4
    add  [global_descriptor_table.gdtr+2], eax  <i>; oprava adresy tabulky deskriptoru</i>
</pre>

<p>Tabulku deskriptorů načteme instrukcí <strong>LGDT</strong> (<i>Load Global
Descriptor Table</i>). Této instrukci předáme odkaz na jednoduchou strukturu
obsahující velikost GDT a její adresu:</p>

<pre>
    <i>; nacteni globalni tabulky deskriptoru</i>
    lgdt [global_descriptor_table.gdtr]
</pre>

<p>Nyní již můžeme provést přechod do chráněného režimu:</p>

<pre>
    mov cx, ds                 <i>; ulozeni DS, aby se mohl obnovit po navratu z chraneneho rezimu</i>
&nbsp;
    mov eax, cr0
    or  al, 1                  <i>; nastaveni priznaku chraneneho rezimu</i>
    mov cr0, eax
&nbsp;
    jmp .flush_cache_1         <i>; vymazani instrukcni fronty</i>
.flush_cache_1:
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Naplnění cache deskriptorů a návrat zpět do reálného režimu</h2>

<p>V&nbsp;chráněném režimu naplníme všechny segmentové registry tak, aby
obsahovaly selektor na druhý záznam v&nbsp;tabulce deskriptorů. Tím se naplní i
cache deskriptorů (což by se jinak dalo provést trikem
s&nbsp;<strong>LOADALL</strong>, což již známe):</p>

<pre>
    <i>; nyni jsme v 16bitovem chranenem rezimu</i>
    <i>; nemenime CS, takze neni nutne prejit do 32bitoveho rezimu</i>
    mov bx, FLAT_SEL           <i>; druhy zaznam v tabulce deskriptoru</i>
    mov ss, bx                 <i>; SS a DS pro tuto chvili bez limitu (naplni se cache s deskriptory)</i>
    mov ds, bx
    mov es, bx                 <i>; stejne tak ostatni segmentove registry</i>
    mov fs, bx                 <i>; ty jiz dale nebudeme menit, takze zustane pristup bez limitu</i>
    mov gs, bx
</pre>

<p>Systém stále nezamrznul (kupodivu), takže se vrátíme zpět do režimu
reálného:</p>

<pre>
    mov eax, cr0
    and al, ~1                 <i>; zruseni priznaku chraneneho rezimu</i>
    mov cr0, eax
&nbsp;
    jmp .flush_cache_2         <i>; vymazani instrukcni fronty</i>
.flush_cache_2:
&nbsp;
    sti
</pre>

<p>Nyní by mělo být možné například přes registr <strong>ES</strong> adresovat
celou paměť s&nbsp;využitím 32bitové de facto <i>absolutní</i> adresy. Samotný
registr <strong>ES</strong> nebudeme modifikovat &ndash; nastavil se
v&nbsp;chráněném režimu a jeho obsah (adresa) již není zajímavá, protože
důležitá je <i>báze</i> v&nbsp;cache deskriptorů:</p>

<pre>
    attribute equ 0x57&lt;&lt;8
    mov word es:[dword 0xb8000+80*10*3+0],  attribute | 'U'
    mov word es:[dword 0xb8000+80*10*3+2],  attribute | 'N'
    mov word es:[dword 0xb8000+80*10*3+4],  attribute | 'R'
    mov word es:[dword 0xb8000+80*10*3+6],  attribute | 'E'
    mov word es:[dword 0xb8000+80*10*3+8],  attribute | 'A'
    mov word es:[dword 0xb8000+80*10*3+10], attribute | 'L'
</pre>

<img src="https://i.iinfo.cz/images/693/pc-19-6.webp" class="image-1162692" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 7: Přístup do VideoRAM přes absolutní 32bitovou adresu.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Úplný zdrojový kód programu pro nastavení nereálného režimu</h2>

<p>Úplný zdrojový kód demonstračního příkladu, který po svém překladu a
spuštění provede nastavení nereálného režimu (přes režim chráněný &ndash;
nikoli s&nbsp;využitím instrukce <strong>LOADALL</strong>) vypadá
následovně:</p>

<pre>
<i>; Nastaveni nerealneho rezimu s tim, ze pres registry DS a ES je mozne adresovat celou</i>
<i>; dostupnou pamet (limit 4GB)</i>
<i>;</i>
<i>; Inspirovano:</i>
<i>; https://pastebin.com/68W8cn0d</i>
<i>; (ovsem pozor, tento kod obsahuje chyby):</i>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU  386        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        ret
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; tisk retezce na obrazovku</i>
%macro <strong>print</strong> 1
        mov     dx, %1
        mov     ah, 9
        int     0x21
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
org  0x100                     <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
    smsw ax                    <i>; prenos MSW do registru AX</i>
    test ax, 0x1               <i>; test nejnizsiho bitu MSW</i>
&nbsp;
    jz not_prot_mode           <i>; nulovy bit? -> nejsme v chranenem rezimu</i>
    print in_protected_mode_msg
    jmp end
&nbsp;
<strong>not_prot_mode</strong>:                 <i>; nenulovy bit? -> jsme v chranenem rezimu</i>
    print entering_protected_mode_msg
    cli
&nbsp;
    <i>; nastaveni globalni tabulky deskriptoru</i>
    mov eax, ds                <i>; adresa ulozena v DS (nasobime sestnacti)</i>
    shl eax, 4
    add  [global_descriptor_table.gdtr+2], eax  <i>; oprava adresy tabulky deskriptoru</i>
&nbsp;
    <i>; nacteni globalni tabulky deskriptoru</i>
    lgdt [global_descriptor_table.gdtr]
&nbsp;
    mov cx, ds                 <i>; ulozeni DS, aby se mohl obnovit po navratu z chraneneho rezimu</i>
&nbsp;
    mov eax, cr0
    or  al, 1                  <i>; nastaveni priznaku chraneneho rezimu</i>
    mov cr0, eax
&nbsp;
    jmp .flush_cache_1         <i>; vymazani instrukcni fronty</i>
.flush_cache_1:
&nbsp;
    <i>; nyni jsme v 16bitovem chranenem rezimu</i>
    <i>; nemenime CS, takze neni nutne prejit do 32bitoveho rezimu</i>
    mov bx, FLAT_SEL           <i>; druhy zaznam v tabulce deskriptoru</i>
    mov ss, bx                 <i>; SS a DS pro tuto chvili bez limitu (naplni se cache s deskriptory)</i>
    mov ds, bx
    mov es, bx                 <i>; stejne tak ostatni segmentove registry</i>
    mov fs, bx                 <i>; ty jiz dale nebudeme menit, takze zustane pristup bez limitu</i>
    mov gs, bx
&nbsp;
    mov eax, cr0
    and al, ~1                 <i>; zruseni priznaku chraneneho rezimu</i>
    mov cr0, eax
&nbsp;
    jmp .flush_cache_2         <i>; vymazani instrukcni fronty</i>
.flush_cache_2:
&nbsp;
    <i>; nyni jsme v nerealnem rezimu</i>
    mov ss, cx                 <i>; obnoveni segmentovych registru</i>
    mov ds, cx
&nbsp;
    sti
&nbsp;
    print back_in_real_mode_msg
&nbsp;
    <i>; otestovani nerealneho rezimu</i>
    <i>; pristoupime k VideoRAM pres nulty segment, coz by nemelo</i>
    <i>; byt v beznem realnem rezimu mozne</i>
    <i>; nyni ovsem ES odkazuje na prvni deskriptor s volnym rozsahem</i>
&nbsp;
    attribute equ 0x57&lt;&lt;8
    mov word es:[dword 0xb8000+80*10*3+0],  attribute | 'U'
    mov word es:[dword 0xb8000+80*10*3+2],  attribute | 'N'
    mov word es:[dword 0xb8000+80*10*3+4],  attribute | 'R'
    mov word es:[dword 0xb8000+80*10*3+6],  attribute | 'E'
    mov word es:[dword 0xb8000+80*10*3+8],  attribute | 'A'
    mov word es:[dword 0xb8000+80*10*3+10], attribute | 'L'
&nbsp;
<strong>end</strong>:
    wait_key                   <i>; cekani na stisk klavesy</i>
    exit                       <i>; navrat do DOSu</i>
&nbsp;
<i>; datova cast</i>
&nbsp;
<i>; pomocne makro pro vytvoreni jednoho zaznamu v tabulce deskriptoru</i>
%define <strong>MAKE_GDT_DESC</strong>(base, limit, access, flags) \
    (((base &amp; 0x00FFFFFF) &lt;&lt; 16) | \
    ((base &amp; 0xFF000000) &lt;&lt; 32) | \
    (limit &amp; 0x0000FFFF) | \
    ((limit &amp; 0x000F0000) &lt;&lt; 32) | \
    ((access &amp; 0xFF) &lt;&lt; 40) | \
    ((flags &amp; 0x0F) &lt;&lt; 52))
&nbsp;
align 4                        <i>; pro jistotu: potrebujeme zarovnani na 32 bitu</i>
&nbsp;
<strong>global_descriptor_table</strong>:
FLAT_SEL  equ .flat_descriptor  - .start
&nbsp;
.start:
.null_descriptor:
    dq 0
.flat_descriptor:
    dq MAKE_GDT_DESC(0, 0xffffffff, 10010010b, 1100b)
                                <i>; 32-bit data, granularita 4KB, limit 0xffffffff, base=0</i>
.end:
&nbsp;
.gdtr:
    dw .end - .start - 1
                                <i>; velikost tabulky deskriptoru -1</i>
    dd .start                   <i>; tato hodnota se musi upravit v runtime</i>
&nbsp;
<strong>in_protected_mode_msg</strong>:
    db "Processor already in protected mode - exiting", 0x0a, 0x0d, "$"
&nbsp;
<strong>entering_protected_mode_msg</strong>:
    db "Entering protected mode", 0x0a, 0x0d, "$"
&nbsp;
<strong>back_in_real_mode_msg</strong>:
    db "Back in UNreal mode", 0x0a, 0x0d, "$"
&nbsp;
<i>; finito</i>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad s&nbsp;využitím assembleru <strong>NASM</strong>, byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>hello.asm</td><td>program typu &bdquo;Hello world&ldquo; naprogramovaný v&nbsp;assembleru pro systém DOS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm</a></td></tr>
<tr><td> 2</td><td>hello_shorter.asm</td><td>kratší varianta výskoku z&nbsp;procesu zpět do DOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm</a></td></tr>
<tr><td> 3</td><td>hello_wait.asm</td><td>čekání na stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm</a></td></tr>
<tr><td> 4</td><td>hello_macros.asm</td><td>realizace jednotlivých částí programu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>gfx_4_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm</a></td></tr>
<tr><td> 6</td><td>gfx_6_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm</a></td></tr>
<tr><td> 7</td><td>gfx_4_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm</a></td></tr>
<tr><td> 8</td><td>gfx_6_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>gfx_6_fill_1.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm</a></td></tr>
<tr><td>10</td><td>gfx_6_fill_2.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, varianta s&nbsp;instrukcí <strong>LOOP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm</a></td></tr>
<tr><td>11</td><td>gfx_6_fill_3.asm</td><td>vyplnění obrazovky instrukcí <strong>REP STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm</a></td></tr>
<tr><td>12</td><td>gfx_6_fill_4.asm</td><td>vyplnění obrazovky, synchronizace vykreslování s&nbsp;paprskem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>gfx_4_image_1.asm</td><td>vykreslení rastrového obrázku získaného z&nbsp;binárních dat, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm</a></td></tr>
<tr><td>14</td><td>gfx_4_image_2.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm</a></td></tr>
<tr><td>15</td><td>gfx_4_image_3.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm</a></td></tr>
<tr><td>16</td><td>gfx_4_image_4.asm</td><td>korektní vykreslení všech sudých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm</a></td></tr>
<tr><td>17</td><td>gfx_4_image_5.asm</td><td>korektní vykreslení všech sudých i lichých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>gfx_4_image_6.asm</td><td>nastavení barvové palety před vykreslením obrázku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm</a></td></tr>
<tr><td>19</td><td>gfx_4_image_7.asm</td><td>nastavení barvové palety před vykreslením obrázku, snížená intenzita barev</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm</a></td></tr>
<tr><td>20</td><td>gfx_4_image_8.asm</td><td>postupná změna barvy pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>gfx_6_putpixel_1.asm</td><td>vykreslení pixelu, základní varianta se 16bitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm</a></td></tr>
<tr><td>22</td><td>gfx_6_putpixel_2.asm</td><td>vykreslení pixelu, varianta s&nbsp;osmibitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm</a></td></tr>
<tr><td>23</td><td>gfx_6_putpixel_3.asm</td><td>vykreslení pixelu, varianta bez násobení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm</a></td></tr>
<tr><td>24</td><td>gfx_6_putpixel_4.asm</td><td>vykreslení pixelu přes obrázek, nekorektní chování (přepis obrázku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm</a></td></tr>
<tr><td>25</td><td>gfx_6_putpixel_5.asm</td><td>vykreslení pixelu přes obrázek, korektní varianta pro bílé pixely</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>cga_text_mode_1.asm</td><td>standardní textový režim s&nbsp;rozlišením 40&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm</a></td></tr>
<tr><td>27</td><td>cga_text_mode_3.asm</td><td>standardní textový režim s&nbsp;rozlišením 80&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm</a></td></tr>
<tr><td>28</td><td>cga_text_mode_intensity.asm</td><td>změna významu nejvyššího bitu atributového bajtu: vyšší intenzita namísto blikání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm</a></td></tr>
<tr><td>29</td><td>cga_text_mode_cursor.asm</td><td>změna tvaru textového kurzoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm</a></td></tr>
<tr><td>30</td><td>cga_text_gfx_1.asm</td><td>zobrazení &bdquo;rastrové mřížky&ldquo;: pseudografický režim 160&times;25 pixelů (interně textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm</a></td></tr>
<tr><td>31</td><td>cga_text_mode_char_height.asm</td><td>změna výšky znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm</a></td></tr>
<tr><td>32</td><td>cga_text_160x100.asm</td><td>grafický režim 160&times;100 se šestnácti barvami (interně upravený textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>hercules_text_mode_1.asm</td><td>využití standardního textového režimu společně s&nbsp;kartou Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm</a></td></tr>
<tr><td>34</td><td>hercules_text_mode_2.asm</td><td>zákaz blikání v&nbsp;textových režimech</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm</a></td></tr>
<tr><td>35</td><td>hercules_turn_off.asm</td><td>vypnutí generování video signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm</a></td></tr>
<tr><td>36</td><td>hercules_gfx_mode_1.asm</td><td>přepnutí karty Hercules do grafického režimu (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm</a></td></tr>
<tr><td>37</td><td>hercules_gfx_mode_2.asm</td><td>přepnutí karty Hercules do grafického režimu (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm</a></td></tr>
<tr><td>38</td><td>hercules_putpixel.asm</td><td>subrutina pro vykreslení jediného pixelu na kartě Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>ega_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm</a></td></tr>
<tr><td>40</td><td>ega_text_mode_80x43.asm</td><td>zobrazení 43 textových řádků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm</a></td></tr>
<tr><td>41</td><td>ega_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm</a></td></tr>
<tr><td>42</td><td>ega_gfx_mode_640x200.asm</td><td>přepnutí do grafického režimu 640&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm</a></td></tr>
<tr><td>43</td><td>ega_gfx_mode_640x350.asm</td><td>přepnutí do grafického režimu 640&times;350 pixelů se čtyřmi nebo šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm</a></td></tr>
<tr><td>44</td><td>ega_gfx_mode_bitplanes_1.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (základní způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm</a></td></tr>
<tr><td>45</td><td>ega_gfx_mode_bitplanes_2.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (rychlejší způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>ega_320x200_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm</a></td></tr>
<tr><td>47</td><td>ega_640x350_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 640&times;350 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>48</td><td>ega_standard_font.asm</td><td>použití standardního fontu grafické karty EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm</a></td></tr>
<tr><td>49</td><td>ega_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>ega_palette_1.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 320&times;200 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm</a></td></tr>
<tr><td>51</td><td>ega_palette_2.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 640&times;350 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm</a></td></tr>
<tr><td>52</td><td>ega_palette_3.asm</td><td>změna všech barev v&nbsp;barvové paletě s&nbsp;využitím programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm</a></td></tr>
<tr><td>53</td><td>ega_palette_4.asm</td><td>změna všech barev, včetně barvy okraje, v&nbsp;barvové paletě voláním funkce BIOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>vga_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm</a></td></tr>
<tr><td>55</td><td>vga_text_mode_80x50.asm</td><td>zobrazení 50 a taktéž 28 textových řádků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm</a></td></tr>
<tr><td>56</td><td>vga_text_mode_intensity_1.asm</td><td>změna chování atributového bitu pro blikání (nebezpečná varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm</a></td></tr>
<tr><td>57</td><td>vga_text_mode_intensity_2.asm</td><td>změna chování atributového bitu pro blikání (bezpečnější varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm</a></td></tr>
<tr><td>58</td><td>vga_text_mode_9th_column.asm</td><td>modifikace způsobu zobrazení devátého sloupce ve znakových režimech (720 pixelů na řádku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm</a></td></tr>
<tr><td>59</td><td>vga_text_mode_cursor_shape.asm</td><td>změna tvaru textového kurzoru na grafické kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm</a></td></tr>
<tr><td>60</td><td>vga_text_mode_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>vga_gfx_mode_640x480.asm</td><td>přepnutí do grafického režimu 640&times;480 pixelů se šestnácti barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm</a></td></tr>
<tr><td>62</td><td>vga_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů s&nbsp;256 barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm</a></td></tr>
<tr><td>63</td><td>vga_gfx_mode_palette.asm</td><td>změna všech barev v&nbsp;barvové paletě grafické karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm</a></td></tr>
<tr><td>64</td><td>vga_gfx_mode_dac_1.asm</td><td>využití DAC (neočekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm</a></td></tr>
<tr><td>65</td><td>vga_gfx_mode_dac_2.asm</td><td>využití DAC (očekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>66</td><td>vga_640x480_putpixel.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 640&times;480 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm</a></td></tr>
<tr><td>67</td><td>vga_320x200_putpixel_1.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm</a></td></tr>
<tr><td>68</td><td>vga_320x200_putpixel_2.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (rychlejší varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>69</td><td>vga_gfx_mode_dac_3.asm</td><td>přímé využití DAC v&nbsp;grafickém režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>70</td><td>vga_gfx_mode_unchained_step_1.asm</td><td>zobrazení barevných pruhů v&nbsp;režimu 13h</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_1.asm</a></td></tr>
<tr><td>71</td><td>vga_gfx_mode_unchained_step_2.asm</td><td>vypnutí zřetězení bitových rovin a změna způsobu adresování pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_2.asm</a></td></tr>
<tr><td>72</td><td>vga_gfx_mode_unchained_step_3.asm</td><td>vykreslení barevných pruhů do vybraných bitových rovin</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_unchained_step_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>73</td><td>vga_gfx_mode_320x400.asm</td><td>nestandardní grafický režim s&nbsp;rozlišením 320&times;400 pixelů a 256 barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x400.asm</a></td></tr>
<tr><td>74</td><td>vga_320x200_image.asm</td><td>zobrazení rastrového obrázku ve standardním grafickém režimu 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image.asm</a></td></tr>
<tr><td>75</td><td>vga_320x200_unchained_image_1.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_1.asm</a></td></tr>
<tr><td>76</td><td>vga_320x200_unchained_image_2.asm</td><td>zobrazení rastrového obrázku v&nbsp;režimu s&nbsp;nezřetězenými rovinami (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_unchained_image_2.asm</a></td></tr>
<tr><td>77</td><td>vga_320x400_unchained_image.asm</td><td>zobrazení rastrového obrázku v&nbsp;nestandardním režimu 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_unchained_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>78</td><td>vga_vertical_scroll_1.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;200 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_1.asm</a></td></tr>
<tr><td>79</td><td>vga_vertical_scroll_2.asm</td><td>vertikální scrolling na kartě VGA v&nbsp;režimu s&nbsp;rozlišením 320&times;400 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_vertical_scroll_2.asm</a></td></tr>
<tr><td>80</td><td>vga_split_screen_1.asm</td><td>režim split-screen a scrolling, nefunční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_1.asm</a></td></tr>
<tr><td>81</td><td>vga_split_screen_2.asm</td><td>režim split-screen a scrolling, plně funkční varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_split_screen_2.asm</a></td></tr>
<tr><td>82</td><td>vga_horizontal_scroll_1.asm</td><td>horizontální scrolling bez rozšíření počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_1.asm</a></td></tr>
<tr><td>83</td><td>vga_horizontal_scroll_2.asm</td><td>horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_2.asm</a></td></tr>
<tr><td>84</td><td>vga_horizontal_scroll_3.asm</td><td>jemný horizontální scrolling s&nbsp;rozšířením počtu pixelů na virtuálním řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_horizontal_scroll_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>85</td><td>vga_320x240_image.asm</td><td>nastavení grafického režimu Mode-X, načtení a vykreslení obrázku, scrolling</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_image.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_image.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>86</td><td>io.asm</td><td>knihovna maker pro I/O operace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/io.asm</a></td></tr>
<tr><td>87</td><td>vga_lib.asm</td><td>knihovna maker a podprogramů pro programování karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_lib.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_lib.asm</a></td></tr>
<tr><td>88</td><td>vga_320x240_lib.asm</td><td>nastavení grafického režimu Mode-X, tentokrát knihovními funkcemi</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_lib.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x240_lib.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>89</td><td>vga_bitblt_1.asm</td><td>první (naivní) implementace operace <i>BitBLT</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_1.asm</a></td></tr>
<tr><td>90</td><td>vga_bitblt_2.asm</td><td>operace <i>BitBLT</i> s&nbsp;výběrem bitových rovin pro zápis</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_2.asm</a></td></tr>
<tr><td>91</td><td>vga_bitblt_3.asm</td><td>operace <i>BitBLT</i> s&nbsp;výběrem bitových rovin pro čtení i zápis</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_3.asm</a></td></tr>
<tr><td>92</td><td>vga_bitblt_4.asm</td><td>korektní <i>BitBLT</i> pro 16barevný režim, realizace makry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_4.asm</a></td></tr>
<tr><td>93</td><td>vga_bitblt_5.asm</td><td>korektní <i>BitBLT</i> pro 16barevný režim, realizace podprogramem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>94</td><td>vga_bitblt_rotate.asm</td><td>zápisový režim s&nbsp;rotací bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_rotate.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_rotate.asm</a></td></tr>
<tr><td>95</td><td>vga_bitblt_fast.asm</td><td>rychlá korektní 32bitová operace typu <i>BitBLT</i></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_fast.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_bitblt_fast.asm</a></td></tr>
<tr><td>96</td><td>vga_320x400_bitblt_1.asm</td><td>přenos obrázku v&nbsp;režimu 320&times;400 operací <i>BitBLT</i> (neúplná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_1.asm</a></td></tr>
<tr><td>97</td><td>vga_320x400_bitblt_2.asm</td><td>přenos obrázku v&nbsp;režimu 320&times;400 operací <i>BitBLT</i> (úplná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x400_bitblt_2.asm</a></td></tr>
<tr><td>98</td><td>vga_write_modes_1.asm</td><td>volitelné zápisové režimy grafické karty VGA, zápis bez úpravy latche</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_1.asm</a></td></tr>
<tr><td>99</td><td>vga_write_modes_2.asm</td><td>volitelné zápisové režimy grafické karty VGA, zápis s&nbsp;modifikací latche</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_2.asm</a></td></tr>
<tr><td>100</td><td>vga_write_modes_3.asm</td><td>volitelné zápisové režimy grafické karty VGA, cílená modifikace latche vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_write_modes_3.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>101</td><td>instruction_jump.asm</td><td>použití instrukce <strong>JMP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jump.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jump.asm</a></td></tr>
<tr><td>102</td><td>instruction_jnz.asm</td><td>použití instrukce <strong>JNZ</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jnz.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jnz.asm</a></td></tr>
<tr><td>103</td><td>instruction_jz_jmp.asm</td><td>použití instrukcí <strong>JZ</strong> a <strong>JMP</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jz_jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_jz_jmp.asm</a></td></tr>
<tr><td>104</td><td>instruction_loop.asm</td><td>použití instrukce <strong>LOOP</strong> pro realizaci programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_loop.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>105</td><td>instruction_template.asm</td><td>šablona všech následujících demonstračních příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_template.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_template.asm</a></td></tr>
<tr><td>106</td><td>instruction_print_hex.asm</td><td>tisk osmibitové hexadecimální hodnoty</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_print_hex.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_print_hex.asm</a></td></tr>
<tr><td>107</td><td>instruction_xlat.asm</td><td>využití instrukce <strong>XLAT</strong> pro získání tisknutelné hexadecimální cifry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_xlat.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_xlat.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>108</td><td>instruction_daa.asm</td><td>operace součtu s&nbsp;využitím binární i BCD aritmetiky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa.asm</a></td></tr>
<tr><td>109</td><td>instruction_daa_sub.asm</td><td>instrukce <strong>DAA</strong> po provedení operace rozdílu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa_sub.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_daa_sub.asm</a></td></tr>
<tr><td>110</td><td>instruction_das.asm</td><td>instrukce <strong>DAS</strong> po provedení operace rozdílu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_das.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_das.asm</a></td></tr>
<tr><td>111</td><td>instruction_aaa.asm</td><td>korekce výsledku na jedinou BCD cifru operací <strong>AAA</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aaa.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aaa.asm</a></td></tr>
<tr><td>112</td><td>instruction_mul.asm</td><td>ukázka výpočtu součinu dvou osmibitových hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_mul.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_mul.asm</a></td></tr>
<tr><td>113</td><td>instruction_aam.asm</td><td>BCD korekce po výpočtu součinu instrukcí <strong>AAM</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aam.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_aam.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>114</td><td>instruction_stosb.asm</td><td>blokový zápis dat instrukcí <strong>STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_stosb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_stosb.asm</a></td></tr>
<tr><td>115</td><td>instruction_rep_stosb.asm</td><td>opakované provádění instrukce <strong>STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_stosb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_stosb.asm</a></td></tr>
<tr><td>116</td><td>instruction_lodsb.asm</td><td>čtení dat instrukcí <strong>LODSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_lodsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_lodsb.asm</a></td></tr>
<tr><td>117</td><td>instruction_movsb.asm</td><td>přenos jednoho bajtu instrukcí <strong>MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_movsb.asm</a></td></tr>
<tr><td>118</td><td>instruction_rep_movsb.asm</td><td>blokový přenos po bajtech instrukcí <strong>MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_movsb.asm</a></td></tr>
<tr><td>119</td><td>instruction_rep_scas.asm</td><td>vyhledávání v&nbsp;řetězci instrukcí <strong>SCAS</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_scas.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_rep_scas.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>120</td><td>vga_320x200_image_0B.asm</td><td>výsledek blokového přenosu ve chvíli, kdy je <strong>CX=0</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_0B.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_0B.asm</a></td></tr>
<tr><td>121</td><td>vga_320x200_image_64kB.asm</td><td>výsledek blokového přenosu ve chvíli, kdy je <strong>CX=0xffff</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_64kB.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_64kB.asm</a></td></tr>
<tr><td>122</td><td>vga_320x200_image_movsb.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb.asm</a></td></tr>
<tr><td>123</td><td>vga_320x200_image_movsw.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsw.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsw.asm</a></td></tr>
<tr><td>124</td><td>vga_320x200_image_movsd.asm</td><td>blokový přenos v&nbsp;rámci obrazové paměti instrukcí <strong>REP MOVSD</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsd.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsd.asm</a></td></tr>
<tr><td>125</td><td>vga_320x200_image_movsb_forward.asm</td><td>blokový přenos překrývajících se bloků paměti (zvyšující se adresy)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_forward.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_forward.asm</a></td></tr>
<tr><td>126</td><td>vga_320x200_image_movsb_backward_1.asm</td><td>blokový přenos překrývajících se bloků paměti (snižující se adresy, nekorektní nastavení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_1.asm</a></td></tr>
<tr><td>127</td><td>vga_320x200_image_movsb_backward_2.asm</td><td>blokový přenos překrývajících se bloků paměti (snižující se adresy, korektní nastavení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_image_movsb_backward_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>128</td><td>sound_bell.asm</td><td>přehrání zvuku pomocí tisku ASCII znaku BELL</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_bell.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_bell.asm</a></td></tr>
<tr><td>129</td><td>sound_beep.asm</td><td>přehrání zvuku o zadané frekvenci na PC Speakeru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_beep.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_beep.asm</a></td></tr>
<tr><td>130</td><td>sound_play_pitch.asm</td><td>přehrání zvuku o zadané frekvenci na PC Speakeru, použití maker</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_play_pitch.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_play_pitch.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>131</td><td>sound_opl2_basic.asm</td><td>přehrání komorního A na OPL2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_basic.asm</a></td></tr>
<tr><td>132</td><td>sound_opl2_table.asm</td><td>přehrání komorního A na OPL2, použití tabulky s&nbsp;hodnotami registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>133</td><td>sound_opl2_table_2.asm</td><td>přepis tabulky s&nbsp;obsahy registrů pro přehrání komorního A</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_table_2.asm</a></td></tr>
<tr><td>134</td><td>sound_key_on.asm</td><td>přímé ovládání bitu KEY ON mezerníkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_key_on.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_key_on.asm</a></td></tr>
<tr><td>135</td><td>sound_adsr.asm</td><td>nastavení obálky pro tón přehrávaný prvním kanálem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_adsr.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_adsr.asm</a></td></tr>
<tr><td>136</td><td>sound_modulation.asm</td><td>řízení frekvence modulátoru klávesami 1 a 0</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_modulation.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_modulation.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>137</td><td>keyboard_basic.asm</td><td>přímá práce s&nbsp;klávesnicí IBM PC</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/keyboard_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/keyboard_basic.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>138</td><td>sound_stereo_opl2.asm</td><td>stereo zvuk v&nbsp;konfiguraci DualOPL2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_stereo_opl2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_stereo_opl2.asm</a></td></tr>
<tr><td>139</td><td>sound_opl2_multichannel.asm</td><td>vícekanálový zvuk na OPL2 (klávesy), delší varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel.asm</a></td></tr>
<tr><td>140</td><td>sound_opl2_multichannel_2.asm</td><td>vícekanálový zvuk na OPL2 (klávesy), kratší varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl2_multichannel_2.asm</a></td></tr>
<tr><td>141</td><td>sound_opl3_stereo_1.asm</td><td>stereo výstup na OPL3 (v&nbsp;kompatibilním režimu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_1.asm</a></td></tr>
<tr><td>142</td><td>sound_opl3_stereo_2.asm</td><td>stereo výstup na OPL3 (v&nbsp;režimu OPL3)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_stereo_2.asm</a></td></tr>
<tr><td>143</td><td>sound_opl3_multichannel.asm</td><td>vícekanálový zvuk na OPL3 (klávesy)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_multichannel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_multichannel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>144</td><td>sound_opl3_waveform_1.asm</td><td>interaktivní modifikace tvaru vlny u prvního operátoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_1.asm</a></td></tr>
<tr><td>145</td><td>sound_opl3_waveform_2.asm</td><td>oprava chyby: povolení režimu kompatibilního s&nbsp;OPL3</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_2.asm</a></td></tr>
<tr><td>146</td><td>sound_opl3_waveform_3.asm</td><td>vliv tvaru vln na zvukový kanál s&nbsp;FM syntézou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_3.asm</a></td></tr>
<tr><td>147</td><td>sound_opl3_waveform_4.asm</td><td>modifikace tvaru vlny nosné vlny i modulátoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_waveform_4.asm</a></td></tr>
<tr><td>148</td><td>sound_opl3_4operators_1.asm</td><td>výběr AM/FM režimu ve čtyřoperátorovém nastavení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_1.asm</a></td></tr>
<tr><td>149</td><td>sound_opl3_4operators_2.asm</td><td>výběr AM/FM režimu ve čtyřoperátorovém nastavení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/sound_opl3_4operators_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>150</td><td>timer_basic.asm</td><td>základní obsluha přerušení od časovače/čítače</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_basic.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_basic.asm</a></td></tr>
<tr><td>151</td><td>timer_restore.asm</td><td>obnovení původní obsluhy přerušení při ukončování aplikace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore.asm</a></td></tr>
<tr><td>152</td><td>timer_restore_better_structure.asm</td><td>refaktoring předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore_better_structure.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_restore_better_structure.asm</a></td></tr>
<tr><td>153</td><td>timer_faster_clock.asm</td><td>zrychlení čítače na 100 přerušení za sekundu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_faster_clock.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/timer_faster_clock.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>154</td><td>instruction_push_imm.asm</td><td>instrukce <strong>PUSH</strong> s&nbsp;konstantou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_imm.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_imm.asm</a></td></tr>
<tr><td>155</td><td>instruction_imul_imm.asm</td><td>instrukce <strong>IMUL</strong> s&nbsp;konstantou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_imul_imm.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_imul_imm.asm</a></td></tr>
<tr><td>156</td><td>instruction_into_1.asm</td><td>instrukce <strong>INTO</strong> s&nbsp;obsluhou přerušení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_1.asm</a></td></tr>
<tr><td>157</td><td>instruction_into_2.asm</td><td>instrukce <strong>INTO</strong> s&nbsp;obsluhou přerušení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_into_2.asm</a></td></tr>
<tr><td>158</td><td>instruction_bound_1.asm</td><td>instrukce <strong>BOUND</strong> s&nbsp;obsluhou přerušení (nekorektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_1.asm</a></td></tr>
<tr><td>159</td><td>instruction_bound_2.asm</td><td>instrukce <strong>BOUND</strong> s&nbsp;obsluhou přerušení (korektní řešení)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bound_2.asm</a></td></tr>
<tr><td>160</td><td>vga_320x200_putpixel_286.asm</td><td>instrukce bitového posunu s&nbsp;konstantou větší než 1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_286.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_286.asm</a></td></tr>
<tr><td>161</td><td>instruction_push_pop.asm</td><td>instrukce <strong>PUSH</strong> a <strong>POP</strong> se všemi pracovními registry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>162</td><td>instruction_push_pop_B.asm</td><td>instrukce s&nbsp;novými segmentovými registry</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop_B.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_push_pop_B.asm</a></td></tr>
<tr><td>163</td><td>instruction_near_jz_jmp.asm</td><td>blízké skoky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_near_jz_jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_near_jz_jmp.asm</a></td></tr>
<tr><td>164</td><td>instruction_bsf.asm</td><td>nová instrukce <strong>BSF</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsf.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsf.asm</a></td></tr>
<tr><td>165</td><td>instruction_bsr.asm</td><td>nová instrukce <strong>BSR</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsr.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_bsr.asm</a></td></tr>
<tr><td>166</td><td>instruction_add_32bit.asm</td><td>32bitový součet</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_add_32bit.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_add_32bit.asm</a></td></tr>
<tr><td>167</td><td>instruction_inc_32bit.asm</td><td>32bitová instrukce <strong>INC</strong> v&nbsp;šestnáctibitovém režimu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit.asm</a></td></tr>
<tr><td>168</td><td>instruction_inc_32bit_B.asm</td><td>32bitová instrukce <strong>INC</strong> v&nbsp;32bitovém režimu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit_B.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/instruction_inc_32bit_B.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>169</td><td>ems_status.asm</td><td>zjištění stavu (emulace) paměti EMS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_status.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_status.asm</a></td></tr>
<tr><td>170</td><td>ems_total_mem.asm</td><td>získání celkové kapacity paměti EMS v&nbsp;blocích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_total_mem.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_total_mem.asm</a></td></tr>
<tr><td>171</td><td>ems_free_mem.asm </td><td>získání volné kapacity paměti EMS v&nbsp;blocích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_free_mem.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ems_free_mem.asm</a></td></tr>
<tr><td>172</td><td>xms_free_mem.asm </td><td>získání volné kapacity paměti XMS v&nbsp;blocích</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/xms_free_mem.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/xms_free_mem.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>173</td><td>vga_320x200_short_address_1.asm</td><td>blokový přenos provedený v&nbsp;rámci prostoru segmentu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_1.asm</a></td></tr>
<tr><td>174</td><td>vga_320x200_short_address_2.asm</td><td>rozepsaný blokový přenos provedený v&nbsp;rámci prostoru segmentu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_2.asm</a></td></tr>
<tr><td>175</td><td>vga_320x200_short_address_3.asm</td><td>přenos nelze provést přes hranici offsetu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_3.asm</a></td></tr>
<tr><td>176</td><td>vga_320x200_short_address_4.asm</td><td>přenos nelze provést přes hranici offsetu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_short_address_4.asm</a></td></tr>
<tr><td>177</td><td>vga_320x200_long_address_1.asm</td><td>32bitový blokový přenos</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_1.asm</a></td></tr>
<tr><td>178</td><td>vga_320x200_long_address_2.asm</td><td>rozepsaný 32bitový blokový přenos provedený v&nbsp;rámci prostoru segmentu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_2.asm</a></td></tr>
<tr><td>179</td><td>vga_320x200_long_address_3.asm</td><td>přístup do obrazové paměti přes segment 0x0000 a 32bitový offset</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_3.asm</a></td></tr>
<tr><td>180</td><td>vga_320x200_long_address_4.asm</td><td>otestování, jak lze přenášet data s&nbsp;využitím 32bitového offsetu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_long_address_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>181</td><td>print_msw.asm</td><td>přečtení a zobrazení obsahu speciálního registru MSW</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/print_msw.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/print_msw.asm</a></td></tr>
<tr><td>182</td><td>print_cr0.asm</td><td>přečtení a zobrazení obsahu speciálního registru <strong>CR0</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/print_cr0.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/print_cr0.asm</a></td></tr>
<tr><td>183</td><td>prot_mode_286.asm</td><td>přechod do chráněného režimu na čipech Intel 80286</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_286.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_286.asm</a></td></tr>
<tr><td>184</td><td>prot_mode_386.asm</td><td>přechod do chráněného režimu na čipech Intel 80386</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_386.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_386.asm</a></td></tr>
<tr><td>185</td><td>prot_mode_back_to_real_mode_286.asm</td><td>přechod mezi reálným režimem a chráněným režimem i zpět na čipech Intel 80286</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_back_to_real_mode_286.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_back_to_real_mode_286.asm</a></td></tr>
<tr><td>186</td><td>prot_mode_back_to_real_mode_386.asm</td><td>přechod mezi reálným režimem a chráněným režimem i zpět na čipech Intel 80386</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_back_to_real_mode_386.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_back_to_real_mode_386.asm</a></td></tr>
<tr><td>187</td><td>prot_mode_check.asm</td><td>test, zda se mikroprocesor již nachází v&nbsp;chráněném režimu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_check.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/prot_mode_check.asm</a></td></tr>
<tr><td>188</td><td>unreal_mode.asm</td><td>nastavení nereálného režimu (platné pro Intel 80386)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/unreal_mode.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/unreal_mode.asm</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>DOSBox<br />
<a href="https://www.dosbox.com/">https://www.dosbox.com/</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Hercules Graphics Card (HCG)<br />
<a href="https://en.wikipedia.org/wiki/Hercules_Graphics_Card">https://en.wikipedia.org/wiki/Hercules_Graphics_Card</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf">https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://yassinebridi.github.io/asm-docs/8086_instruction_set.html">https://yassinebridi.github.io/asm-docs/8086_instruction_set.html</a>
</li>

<li>8088 MPH by Hornet + CRTC + DESiRE (final version)<br />
<a href="https://www.youtube.com/watch?v=hNRO7lno_DM">https://www.youtube.com/watch?v=hNRO7lno_DM</a>
</li>

<li>Area 5150 by CRTC &amp; Hornet (Party Version) / IBM PC+CGA Demo, Hardware Capture<br />
<a href="https://www.youtube.com/watch?v=fWDxdoRTZPc">https://www.youtube.com/watch?v=fWDxdoRTZPc</a>
</li>

<li>80x86 Integer Instruction Set Timings (8088 - Pentium)<br />
<a href="http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf">http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf</a>
</li>

<li>Colour Graphics Adapter: Notes<br />
<a href="https://www.seasip.info/VintagePC/cga.html">https://www.seasip.info/VintagePC/cga.html</a>
</li>

<li>Restoring A Vintage CGA Card With Homebrew HASL<br />
<a href="https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/">https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/</a>
</li>

<li>Demoing An 8088<br />
<a href="https://hackaday.com/2015/04/10/demoing-an-8088/">https://hackaday.com/2015/04/10/demoing-an-8088/</a>
</li>

<li>Video Memory Layouts<br />
<a href="http://www.techhelpmanual.com/89-video_memory_layouts.html">http://www.techhelpmanual.com/89-video_memory_layouts.html</a>
</li>

<li>Screen Attributes<br />
<a href="http://www.techhelpmanual.com/87-screen_attributes.html">http://www.techhelpmanual.com/87-screen_attributes.html</a>
</li>

<li>IBM PC Family  -  BIOS Video Modes<br />
<a href="https://www.minuszerodegrees.net/video/bios_video_modes.htm">https://www.minuszerodegrees.net/video/bios_video_modes.htm</a>
</li>

<li>EGA Functions<br />
<a href="https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega">https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega</a>
</li>

<li>Why the EGA can only use 16 of its 64 colours in 200-line modes<br />
<a href="https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/">https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/</a>
</li>

<li>How 16 colors saved PC gaming - the story of EGA graphics<br />
<a href="https://www.custompc.com/retro-tech/ega-graphics">https://www.custompc.com/retro-tech/ega-graphics</a>
</li>

<li>List of 16-bit computer color palettes<br />
<a href="https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes">https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes</a>
</li>

<li>Why were those colors chosen to be the default palette for 256-color VGA?<br />
<a href="https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga">https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga</a>
</li>

<li>VGA Color Palettes<br />
<a href="https://www.fountainware.com/EXPL/vga_color_palettes.htm">https://www.fountainware.com/EXPL/vga_color_palettes.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page<br />
<a href="http://www.osdever.net/FreeVGA/vga/vga.htm">http://www.osdever.net/FreeVGA/vga/vga.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page - sequencer<br />
<a href="http://www.osdever.net/FreeVGA/vga/seqreg.htm">http://www.osdever.net/FreeVGA/vga/seqreg.htm</a>
</li>

<li>VGA Basics<br />
<a href="http://www.brackeen.com/vga/basics.html">http://www.brackeen.com/vga/basics.html</a>
</li>

<li>Introduction to VGA Mode 'X'<br />
<a href="https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html">https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html</a>
</li>

<li>VGA Mode-X<br />
<a href="https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp">https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp</a>
</li>

<li>Mode-X: 256-Color VGA Magic<br />
<a href="https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf">https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf</a>
</li>

<li>Instruction Format in 8086 Microprocessor<br />
<a href="https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx">https://www.includehelp.com/embedded-system/instruction-format-in-8086-microprocessor.aspx</a>
</li>

<li>How to use "AND," "OR," and "XOR" modes for VGA Drawing<br />
<a href="https://retrocomputing.stackexchange.com/questions/21936/how-to-use-and-or-and-xor-modes-for-vga-drawing">https://retrocomputing.stackexchange.com/questions/21936/how-to-use-and-or-and-xor-modes-for-vga-drawing</a>
</li>

<li>VGA Hardware<br />
<a href="https://wiki.osdev.org/VGA_Hardware">https://wiki.osdev.org/VGA_Hardware</a>
</li>

<li>Programmer's Guide to Yamaha YMF 262/OPL3 FM Music Synthesizer<br />
<a href="https://moddingwiki.shikadi.net/wiki/OPL_chip">https://moddingwiki.shikadi.net/wiki/OPL_chip</a>
</li>

<li>Does anybody understand how OPL2 percussion mode works?<br />
<a href="https://forum.vcfed.org/index.php?threads/does-anybody-understand-how-opl2-percussion-mode-works.60925/">https://forum.vcfed.org/index.php?threads/does-anybody-understand-how-opl2-percussion-mode-works.60925/</a>
</li>

<li>Yamaha YMF262 OPL3 music - MoonDriver for OPL3 DEMO [Oscilloscope View]<br />
<a href="https://www.youtube.com/watch?v=a7I-QmrkAak">https://www.youtube.com/watch?v=a7I-QmrkAak</a>
</li>

<li>Yamaha OPL vs OPL2 vs OPL3 comparison<br />
<a href="https://www.youtube.com/watch?v=5knetge5Gs0">https://www.youtube.com/watch?v=5knetge5Gs0</a>
</li>

<li>OPL3 Music Crockett's Theme<br />
<a href="https://www.youtube.com/watch?v=HXS008pkgSQ">https://www.youtube.com/watch?v=HXS008pkgSQ</a>
</li>

<li>Bad Apple (Adlib Tracker - OPL3)<br />
<a href="https://www.youtube.com/watch?v=2lEPH6Y3Luo">https://www.youtube.com/watch?v=2lEPH6Y3Luo</a>
</li>

<li>FM Synthesis Chips, Codecs and DACs<br />
<a href="https://www.dosdays.co.uk/topics/fm_synthesizers.php">https://www.dosdays.co.uk/topics/fm_synthesizers.php</a>
</li>

<li>The Zen Challenge - YMF262 OPL3 Original (For an upcoming game)<br />
<a href="https://www.youtube.com/watch?v=6JlFIFz1CFY">https://www.youtube.com/watch?v=6JlFIFz1CFY</a>
</li>

<li>[adlib tracker II techno music - opl3] orbit around alpha andromedae I<br />
<a href="https://www.youtube.com/watch?v=YqxJCu_WFuA">https://www.youtube.com/watch?v=YqxJCu_WFuA</a>
</li>

<li>[adlib tracker 2 music - opl3 techno] hybridisation process on procyon-ii<br />
<a href="https://www.youtube.com/watch?v=daSV5mN0sJ4">https://www.youtube.com/watch?v=daSV5mN0sJ4</a>
</li>

<li>Hyper Duel - Black Rain (YMF262 OPL3 Cover)<br />
<a href="https://www.youtube.com/watch?v=pu_mzRRq8Ho">https://www.youtube.com/watch?v=pu_mzRRq8Ho</a>
</li>

<li>IBM 5155-5160 Technical Reference<br />
<a href="https://www.minuszerodegrees.net/manuals/IBM/IBM_5155_5160_Technical_Reference_6280089_MAR86.pdf">https://www.minuszerodegrees.net/manuals/IBM/IBM_5155_5160_Technical_Reference_6280089_MAR86.pdf</a>
</li>

<li>a ymf262/opl3+pc speaker thing i made<br />
<a href="https://www.youtube.com/watch?v=E-Mx0lEmnZ0">https://www.youtube.com/watch?v=E-Mx0lEmnZ0</a>
</li>

<li>[OPL3] Like a Thunder<br />
<a href="https://www.youtube.com/watch?v=MHf06AGr8SU">https://www.youtube.com/watch?v=MHf06AGr8SU</a>
</li>

<li>(PC SPEAKER) bad apple<br />
<a href="https://www.youtube.com/watch?v=LezmKIIHyUg">https://www.youtube.com/watch?v=LezmKIIHyUg</a>
</li>

<li>Powering devices from PC parallel port<br />
<a href="http://www.epanorama.net/circuits/lptpower.html">http://www.epanorama.net/circuits/lptpower.html</a>
</li>

<li>Magic Mushroom (demo pro PC s DOSem)<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards//mushroom.rar">http://www.crossfire-designs.de/download/articles/soundcards//mushroom.rar</a>
</li>

<li>Píseň Magic Mushroom - originál<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_converted.mp3">http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_converted.mp3</a>
</li>

<li>Píseň Magic Mushroom - hráno na PC Speakeru<br />
<a href="http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_speaker.mp3">http://www.crossfire-designs.de/download/articles/soundcards/speaker_mushroom_speaker.mp3</a>
</li>

<li>Pulse Width Modulation (PWM) Simulation Example<br />
<a href="http://decibel.ni.com/content/docs/DOC-4599">http://decibel.ni.com/content/docs/DOC-4599</a>
</li>

<li>Resistor/Pulse Width Modulation DAC<br />
<a href="http://www.k9spud.com/traxmod/pwmdac.php">http://www.k9spud.com/traxmod/pwmdac.php</a>
</li>

<li>Class D Amplifier<br />
<a href="http://en.wikipedia.org/wiki/Electronic_amplifier#Class_D">http://en.wikipedia.org/wiki/Electronic_amplifier#Class_D</a>
</li>

<li>Covox Speech Thing / Disney Sound Source (1986)<br />
<a href="http://www.crossfire-designs.de/index.php?lang=en&amp;what=articles&amp;name=showarticle.htm&amp;article=soundcards/&amp;page=5">http://www.crossfire-designs.de/index.php?lang=en&amp;what=articles&amp;name=showarticle.htm&amp;article=soundcards/&amp;page=5</a>
</li>

<li>Covox Digital-Analog Converter (Rusky, obsahuje schémata)<br />
<a href="http://phantom.sannata.ru/konkurs/netskater002.shtml">http://phantom.sannata.ru/konkurs/netskater002.shtml</a>
</li>

<li>PC-GPE on the Web<br />
<a href="http://bespin.org/~qz/pc-gpe/">http://bespin.org/~qz/pc-gpe/</a>
</li>

<li>Keyboard Synthesizer<br />
<a href="http://www.solarnavigator.net/music/instruments/keyboards.htm">http://www.solarnavigator.net/music/instruments/keyboards.htm</a>
</li>

<li>FMS - Fully Modular Synthesizer<br />
<a href="http://fmsynth.sourceforge.net/">http://fmsynth.sourceforge.net/</a>
</li>

<li>Javasynth<br />
<a href="http://javasynth.sourceforge.net/">http://javasynth.sourceforge.net/</a>
</li>

<li>Software Sound Synthesis &amp; Music Composition Packages<br />
<a href="http://www.linux-sound.org/swss.html">http://www.linux-sound.org/swss.html</a>
</li>

<li>Mx44.1 Download Page (software synthesizer for linux)<br />
<a href="http://hem.passagen.se/ja_linux/">http://hem.passagen.se/ja_linux/</a>
</li>

<li>Software synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Software_synthesizer">http://en.wikipedia.org/wiki/Software_synthesizer</a>
</li>

<li>Frequency modulation synthesis<br />
<a href="http://en.wikipedia.org/wiki/Frequency_modulation_synthesis">http://en.wikipedia.org/wiki/Frequency_modulation_synthesis</a>
</li>

<li>Yamaha DX7<br />
<a href="http://en.wikipedia.org/wiki/Yamaha_DX7">http://en.wikipedia.org/wiki/Yamaha_DX7</a>
</li>

<li>Wave of the Future<br />
<a href="http://www.wired.com/wired/archive/2.03/waveguides_pr.html">http://www.wired.com/wired/archive/2.03/waveguides_pr.html</a>
</li>

<li>Analog synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Analog_synthesizer">http://en.wikipedia.org/wiki/Analog_synthesizer</a>
</li>

<li>Minimoog<br />
<a href="http://en.wikipedia.org/wiki/Minimoog">http://en.wikipedia.org/wiki/Minimoog</a>
</li>

<li>Moog synthesizer<br />
<a href="http://en.wikipedia.org/wiki/Moog_synthesizer">http://en.wikipedia.org/wiki/Moog_synthesizer</a>
</li>

<li>Tutorial for Frequency Modulation Synthesis<br />
<a href="http://www.sfu.ca/~truax/fmtut.html">http://www.sfu.ca/~truax/fmtut.html</a>
</li>

<li>An Introduction To FM<br />
<a href="http://ccrma.stanford.edu/software/snd/snd/fm.html">http://ccrma.stanford.edu/software/snd/snd/fm.html</a>
</li>

<li>John Chowning<br />
<a href="http://en.wikipedia.org/wiki/John_Chowning">http://en.wikipedia.org/wiki/John_Chowning</a>
</li>

<li>I'm Impressed, Adlib Music is AMAZING!<br />
<a href="https://www.youtube.com/watch?v=PJNjQYp1ras">https://www.youtube.com/watch?v=PJNjQYp1ras</a>
</li>

<li>Milinda- Diode Milliampere ( OPL3 )<br />
<a href="https://www.youtube.com/watch?v=oNhazT5HG0E">https://www.youtube.com/watch?v=oNhazT5HG0E</a>
</li>

<li>Dune 2 - Roland MT-32 Soundtrack <br />
<a href="https://www.youtube.com/watch?v=kQADZeB-z8M">https://www.youtube.com/watch?v=kQADZeB-z8M</a>
</li>

<li>Interrupts<br />
<a href="https://wiki.osdev.org/Interrupts#Types_of_Interrupts">https://wiki.osdev.org/Interrupts#Types_of_Interrupts</a>
</li>

<li>Assembly8086SoundBlasterDmaSingleCycleMode<br />
<a href="https://github.com/leonardo-ono/Assembly8086SoundBlasterDmaSingleCycleMode/blob/master/sbsc.asm">https://github.com/leonardo-ono/Assembly8086SoundBlasterDmaSingleCycleMode/blob/master/sbsc.asm</a>
</li>

<li>Interrupts in 8086 microprocessor<br />
<a href="https://www.geeksforgeeks.org/interrupts-in-8086-microprocessor/">https://www.geeksforgeeks.org/interrupts-in-8086-microprocessor/</a>
</li>

<li>Interrupt Structure of 8086<br />
<a href="https://www.eeeguide.com/interrupt-structure-of-8086/">https://www.eeeguide.com/interrupt-structure-of-8086/</a>
</li>

<li>A20 line<br />
<a href="https://en.wikipedia.org/wiki/A20_line">https://en.wikipedia.org/wiki/A20_line</a>
</li>

<li>Extended memory<br />
<a href="https://en.wikipedia.org/wiki/Extended_memory#eXtended_Memory_Specification_(XMS)">https://en.wikipedia.org/wiki/Extended_memory#eXtended_Memory_Specification_(XMS)</a>
</li>

<li>Expanded memory<br />
<a href="https://en.wikipedia.org/wiki/Expanded_memory">https://en.wikipedia.org/wiki/Expanded_memory</a>
</li>

<li>Protected mode<br />
<a href="https://en.wikipedia.org/wiki/Protected_mode">https://en.wikipedia.org/wiki/Protected_mode</a>
</li>

<li>Virtual 8086 mode<br />
<a href="https://en.wikipedia.org/wiki/Virtual_8086_mode">https://en.wikipedia.org/wiki/Virtual_8086_mode</a>
</li>

<li>Unreal mode<br />
<a href="https://en.wikipedia.org/wiki/Unreal_mode">https://en.wikipedia.org/wiki/Unreal_mode</a>
</li>

<li>DOS memory management<br />
<a href="https://en.wikipedia.org/wiki/DOS_memory_management">https://en.wikipedia.org/wiki/DOS_memory_management</a>
</li>

<li>Upper memory area<br />
<a href="https://en.wikipedia.org/wiki/Upper_memory_area">https://en.wikipedia.org/wiki/Upper_memory_area</a>
</li>

<li>Removing the Mystery from SEGMENT : OFFSET Addressing<br />
<a href="https://thestarman.pcministry.com/asm/debug/Segments.html">https://thestarman.pcministry.com/asm/debug/Segments.html</a>
</li>

<li>Segment descriptor<br />
<a href="https://en.wikipedia.org/wiki/Segment_descriptor">https://en.wikipedia.org/wiki/Segment_descriptor</a>
</li>

<li>When using a 32-bit register to address memory in the real mode, contents of the register must never exceed 0000FFFFH. Why?<br />
<a href="https://stackoverflow.com/questions/45094696/when-using-a-32-bit-register-to-address-memory-in-the-real-mode-contents-of-the">https://stackoverflow.com/questions/45094696/when-using-a-32-bit-register-to-address-memory-in-the-real-mode-contents-of-the</a>
</li>

<li>A Brief History of Unreal Mode<br />
<a href="https://www.os2museum.com/wp/a-brief-history-of-unreal-mode/">https://www.os2museum.com/wp/a-brief-history-of-unreal-mode/</a>
</li>

<li>Segment Limits<br />
<a href="https://wiki.osdev.org/Segment_Limits">https://wiki.osdev.org/Segment_Limits</a>
</li>

<li>How do 32 bit addresses in real mode work?<br />
<a href="https://forum.osdev.org/viewtopic.php?t=30642">https://forum.osdev.org/viewtopic.php?t=30642</a>
</li>

<li>The LOADALL Instruction by Robert Collins<br />
<a href="https://www.rcollins.org/articles/loadall/tspec_a3_doc.html">https://www.rcollins.org/articles/loadall/tspec_a3_doc.html</a>
</li>

<li>How do you put a 286 in Protected Mode?<br />
<a href="https://retrocomputing.stackexchange.com/questions/7683/how-do-you-put-a-286-in-protected-mode">https://retrocomputing.stackexchange.com/questions/7683/how-do-you-put-a-286-in-protected-mode</a>
</li>

<li>Control register<br />
<a href="https://en.wikipedia.org/wiki/Control_register">https://en.wikipedia.org/wiki/Control_register</a>
</li>

<li>CPU Registers x86<br />
<a href="https://wiki.osdev.org/CPU_Registers_x86">https://wiki.osdev.org/CPU_Registers_x86</a>
</li>

<li>x86 Assembly/Protected Mode<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Protected_Mode">https://en.wikibooks.org/wiki/X86_Assembly/Protected_Mode</a>
</li>

<li>MSW: Machine Status Word<br />
<a href="https://web.itu.edu.tr/kesgin/mul06/intel/intel_msw.html">https://web.itu.edu.tr/kesgin/mul06/intel/intel_msw.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

