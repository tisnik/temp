<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vývoj her pro herní konzoli NES: práce se sprity</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vývoj her pro herní konzoli NES: práce se sprity</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V páté části seriálu o vývoji her a multimediálních dem určených pro slavnou a v mnoha ohledech přelomovou osmibitovou herní konzoli Nintendo Entertainment System (NES) si popíšeme způsob zobrazení spritů na ploše obrazovky.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Sprity na osmibitových domácích mikropočítačích a herních konzolích</a></p>
<p><a href="#k02">2. Osmibitová herní konzole Atari 2600</a></p>
<p><a href="#k03">3. Osmibitové domácí počítače Atari</a></p>
<p><a href="#k04">4. Počítač Commodore C64</a></p>
<p><a href="#k05">5. Herní konzole NES</a></p>
<p><a href="#k06">6. Modifikovatelné informace o spritech</a></p>
<p><a href="#k07">7. Načtení spritů do operační paměti</a></p>
<p><a href="#k08">8. Kód v&nbsp;obsluze nemaskovatelného přerušení</a></p>
<p><a href="#k09">9. Úplný zdrojový kód dnešního prvního demonstračního příkladu</a></p>
<p><a href="#k10">10. Změna souřadnic spritů</a></p>
<p><a href="#k11">11. Modifikace barvových atributů spritů</a></p>
<p><a href="#k12">12. Úplný zdrojový kód dnešního druhého demonstračního příkladu</a></p>
<p><a href="#k13">13. Větší množství spritů na obrazovce rozdělených do řádků</a></p>
<p><a href="#k14">14. Úplný zdrojový kód dnešního třetího demonstračního příkladu</a></p>
<p><a href="#k15">15. Větší množství spritů na jediném řádku</a></p>
<p><a href="#k16">16. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Sprity na osmibitových domácích mikropočítačích a herních konzolích</h2>

<p>Na některých osmibitových domácích počítačích a taktéž osmibitových herních
konzolích se ve hrách, ale i v&nbsp;dalších aplikacích zaměřených na
počítačovou grafiku, často používala možnost zrychleného vykreslování
jednoduchých rastrových obrázků nazývaných <i>sprity</i>. Generování obrazů
spritů na televizi či obrazovce monitoru přitom probíhalo nezávisle na
vykreslování ostatní scény (v&nbsp;tomto případě nazývané pozadí &ndash;
<i>background</i>, popř.&nbsp;hrací plocha &ndash; <i>playground</i>), přičemž
bylo možné definovat prioritu vykreslování, tj.&nbsp;zda bude ve výsledném
obrázku upřednostněn pixel z&nbsp;pozadí nebo ze spritu. Grafické subsystémy
těchto počítačů, které podporovaly práci se sprity, také většinou obsahovaly
takzvané <i>kolizní registry</i>, do kterých se ukládaly příznaky překryvu
pozadí se sprity (kolize spritu s&nbsp;barvou pozadí) nebo mezi několika sprity
navzájem (kolize spritů). Tím se při práci s&nbsp;pohyblivými obrazy předmětů
nemusely provádět zdlouhavé testy mezi všemi zobrazovanými pixely, postačilo
pouze přečíst stav z&nbsp;kolizních registrů.</p>

<p>V&nbsp;dnešním článku o vývoji pro osmibitovou herní konzoli NES se budeme
zabývat &bdquo;klasickými&ldquo; sprity tak, jak byly implementovány u
osmibitových strojů (včetně mnoha dobových herních automatů).  Po krátkém úvodu
se zaměříme na vývoj pro NES v&nbsp;assembleru.</p>
 
<img src="http://i.iinfo.cz/images/488/pc7101.png" width="336" height="240" alt="pc7101" />
<p><i>Obrázek 1: Screenshot ze hry Starquake ve verzi pro osmibitové počítače
Atari. Tyto počítače podporovaly vykreslování čtyř jednobarevných spritů (každý
sprite samozřejmě mohl mít jinou barvu), jejichž rozlišení bylo 8&times;128
resp.&nbsp;8&times;256 pixelů a dále čtyř takzvaných střel, což byly sprity
zúžené na 2&times;128 nebo 2&times;256 pixelů (všechny střely se navíc mohly
spojit do pátého spritu). Hrací plocha hry Starquake je vytvořena
v&nbsp;monochromatickém textově-grafickém režimu, ovšem hráč je vykreslen
pomocí spritu, tj.&nbsp;může mít barvu odlišnou od okolní scény a může se
pohybovat v&nbsp;horizontálním i vertikálním směru bez nutnosti přesunů dat
v&nbsp;obrazové paměti.</i></p>

<p>U většiny osmibitových počítačů, které podporovaly vykreslování spritů, byly
video paměti určené pro uložení pozadí (hrací plochy) a paměti pro uložení
rastrových dat spritů od sebe odděleny a teprve až v&nbsp;průběhu vykreslování
na obrazovku se provedla kombinace pixelů pozadí a pixelů uložených ve spritech
&ndash; viz druhý obrázek. Sprity byly poprvé použity v&nbsp;dnes již
zapomenutém počítači <i>Elektor TV Games Computer</i> z&nbsp;roku 1979. Později
byly podporovány například na osmibitových počítačích Atari, na počítači
Commodore C64 (viz další kapitoly) a v&nbsp;pozdější době i na herních
konzolích, a to včetně NESu.</p>

<img src="http://i.iinfo.cz/images/182/pc6904.png" width="400" height="350" alt="pc6904" />
<p><i>Obrázek 2: Tok dat mezi operační pamětí, mikroprocesorem a čipy ANTIC i
GTIA při generování video signálu na osmibitových počítačích Atari.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Osmibitová herní konzole Atari 2600</h2>

<p>Na herní konzoli Atari 2600 jsou sprity hlavními objekty tvořícími (vedle
primitivního pozadí) prakticky veškerou grafickou informaci zobrazenou na
monitoru. Každý obrazový řádek byl s&nbsp;využitím čipu <i>TIA</i> generován na
základě pouhé šestice údajů &ndash; horizontální pozice takzvaného <i>hráče
0</i>, pozice <i>hráče 1</i> (jednalo se o klasické osmipixelové sprity,
jejichž horizontální šířka mohla být vynásobena dvěma či čtyřmi, a které se
mohly 2&times; či 3&times;na jediném řádku opakovat), pozice <i>střely 0</i>,
pozice <i>střely 1</i> (jednopixelové sprity, opět s&nbsp;volitelnou šířkou a
barvou příslušného hráče), pozice <i>míče/ball</i> (jednopixelový sprite
s&nbsp;možností vertikálního posunu o jeden řádek) a konečně <i>herního
pole/playfield</i> (což je jediný grafický objekt, který není spritem).</p>

<a href="http://i.iinfo.cz/images/18/pc6614.png"><img src="http://i.iinfo.cz/images/18/pc6614-prev.png" width="370" height="243" alt="pc6614" /></a>
<p><i>Obrázek 3: Hra Battlezone ve variantě určené pro herní konzoli Atari 2600
patřila mezi první hry, které se snažily navodit iluzi trojrozměrného prostoru.
Zajímavé je, že původní &bdquo;automatová&ldquo; verze této hry používala
vektorový displej a traduje se, že existovala i speciální verze pro armádu USA
(jednalo by se tak o jeden z&nbsp;prvních digitálních trenažérů).</i></p>

<p>V&nbsp;následující tabulce jsou pro přehled vypsány základní informace o
všech šesti grafických objektech použitých pro postupné vykreslování obrazu na
televizoru. K&nbsp;těmto objektům jsem ještě přidal sedmý objekt &ndash;
pozadí. Tento objekt je definován pouze vybranou barvou a nikoli bitovým
vzorkem (a jak jeho název napovídá, vždy se nachází až za ostatními
objekty):</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Osmibitové domácí počítače Atari</h2>

<p>Prvním čipem typickým pro mnoho elektronických zařízení firmy <i>Atari</i>
byl čip nazvaný <i>GTIA</i>, neboli <i>Graphics Television Interface
Adaptor</i>, popř.&nbsp;též <i>George's Television Interface Adaptor</i> podle
jména svého tvůrce <i>George McLeoda</i>. Tento čip, jenž vznikl rozšířením
možností původního čipu <i>TIA</i> z&nbsp;<i>Atari 2600</i> (viz <a
href="#k02">předchozí kapitolu</a>), zajišťoval několik funkcí: generování
signálů nesoucích informaci o barvách a světlosti (luminanci) pixelů, řízení a
zobrazování spritů, řízení priority spritů a pozadí a taktéž detekce kolizí
mezi sprity navzájem, popř.&nbsp;kolizí mezi sprity a pozadím. Navíc tento čip
dokázal na pozadí zobrazovat bitmapu generovanou spolupracujícím čipem
<i>ANTIC</i>, popř.&nbsp;tuto bitmapu mohl reinterpretovat takovým způsobem, že
vznikly tři nové grafické režimy s&nbsp;horizontálním rozlišením sníženým na 80
pouhých pixelů, protože každý pixel byl představován čtveřicí bitů (jeden
obrazový řádek má při použití standardních režimů ve framebufferu velikost 20
nebo 40 bajtů, v&nbsp;rozšířeném hracím poli pak maximálně 48 bajtů), ovšem
s&nbsp;možností zobrazení až šestnácti barev či šestnácti úrovní jedné
barvy.</p>

<p><i>&bdquo;Good hardware-software tradeoffs make the product economically
viable.&ldquo;</i></p>

<p>Ve skutečnosti byly všechny tři nové grafické režimy podporované čipem
<i>GTIA</i> založené na monochromatickém režimu čipu <i>ANTIC</i> číslo 8,
který umožňoval na jednom řádku standardně zobrazit 320 pixelů (teoreticky bylo
sice možné tyto tři režimy založit například i na textovém režimu, ovšem
v&nbsp;praxi se tento způsob práce s&nbsp;grafikou příliš často nepoužíval).
Čip <i>GTIA</i> vždy čtveřici sousedních pixelů sloučil a výsledné čtyři bity
mu sloužily buď pro výběr barvy z&nbsp;barvové palety (k&nbsp;dispozici bylo
devět barev z&nbsp;možných šestnácti &ndash; jedná se o celkem zbytečné omezení
dané počtem barvových registrů), určení odstínu barvy (úroveň,
tj.&nbsp;světlost byla v&nbsp;tomto případě konstantní),
popř.&nbsp;k&nbsp;určení úrovně barvy, zatímco odstín byl konstantní (tímto
způsobem bylo možné například pracovat s&nbsp;černobílými fotografiemi). Čip
<i>GTIA</i> tedy ponechával značnou část práce, především časování, provádění
takzvaného display-listu atd., přístup do paměti, na obvodu <i>ANTIC</i>, což
se vlastně ani příliš neliší od principu práce čipu <i>TIA</i>.</p>

<img src="http://i.iinfo.cz/images/619/7611-1.png" width="336" height="240" alt="&#160;" />
<p><i>Obrázek 4: Snímek ze známé hry Gyrrus.</i></p>

<p>Čip <i>GTIA</i> byl řízen pomocí 32 registrů, z&nbsp;nichž všechny byly
určeny pro zápis a některé taktéž pro čtení, tj.&nbsp;například pro zjišťování
kolizí atd. Některé z&nbsp;těchto registrů jsou vypsány v&nbsp;následující
tabulce (povšimněte si, kolik registrů je vlastně určeno pro práci se
sprity):</p>

<table>
<tr><th>Registr</th><th>Režim</th><th>Význam</th></tr>
<tr><td>COLPM0</td><td>W</td><td>barva hráče číslo 0 a střely číslo 0</td></tr>
<tr><td>COLPM1</td><td>W</td><td>barva hráče číslo 1 a střely číslo 1</td></tr>
<tr><td>COLPM2</td><td>W</td><td>barva hráče číslo 2 a střely číslo 2</td></tr>
<tr><td>COLPM3</td><td>W</td><td>barva hráče číslo 3 a střely číslo 3</td></tr>
<tr><td>COLPF0</td><td>W</td><td>barva pro herní pole číslo 0</td></tr>
<tr><td>COLPF1</td><td>W</td><td>barva pro herní pole číslo 1</td></tr>
<tr><td>COLPF2</td><td>W</td><td>barva pro herní pole číslo 2</td></tr>
<tr><td>COLPF3</td><td>W</td><td>barva pro herní pole číslo 3</td></tr>
<tr><td>COLBK </td><td>W</td><td>barva pozadí</td></tr>
<tr><td>PRIOR </td><td>W</td><td>řízení priority objektů a taktéž výběr grafického režimu</td></tr>
<tr><td>HPOSP0</td><td>W</td><td>horizontální pozice hráče číslo 0</td></tr>
<tr><td>HPOSP1</td><td>W</td><td>horizontální pozice hráče číslo 1</td></tr>
<tr><td>HPOSP2</td><td>W</td><td>horizontální pozice hráče číslo 2</td></tr>
<tr><td>HPOSP3</td><td>W</td><td>horizontální pozice hráče číslo 3</td></tr>
<tr><td>HPOSM0</td><td>W</td><td>horizontální pozice střely číslo 0</td></tr>
<tr><td>HPOSM1</td><td>W</td><td>horizontální pozice střely číslo 1</td></tr>
<tr><td>HPOSM2</td><td>W</td><td>horizontální pozice střely číslo 2</td></tr>
<tr><td>HPOSM3</td><td>W</td><td>horizontální pozice střely číslo 3</td></tr>
<tr><td>SIZEP0</td><td>W</td><td>horizontální zvětšení hráče číslo 0 (1&times;, 2&times;, 4&times;)</td></tr>
<tr><td>SIZEP1</td><td>W</td><td>horizontální zvětšení hráče číslo 1 (1&times;, 2&times;, 4&times;)</td></tr>
<tr><td>SIZEP2</td><td>W</td><td>horizontální zvětšení hráče číslo 2 (1&times;, 2&times;, 4&times;)</td></tr>
<tr><td>SIZEP3</td><td>W</td><td>horizontální zvětšení hráče číslo 3 (1&times;, 2&times;, 4&times;)</td></tr>
<tr><td>SIZEM </td><td>W</td><td>horizontální zvětšení všech střel (1&times;, 2&times;, 4&times;)</td></tr>
<tr><td>GRAFP0</td><td>W</td><td>bitová data pro hráče číslo 0</td></tr>
<tr><td>GRAFP1</td><td>W</td><td>bitová data pro hráče číslo 1</td></tr>
<tr><td>GRAFP2</td><td>W</td><td>bitová data pro hráče číslo 2</td></tr>
<tr><td>GRAFP3</td><td>W</td><td>bitová data pro hráče číslo 3</td></tr>
<tr><td>GRAFM </td><td>W</td><td>bitová data pro všechny střely</td></tr>
<tr><td>M0PF</td><td>R</td><td>kolizní registr mezi střelou číslo 0 a herním polem</td></tr>
<tr><td>M1PF</td><td>R</td><td>kolizní registr mezi střelou číslo 1 a herním polem</td></tr>
<tr><td>M2PF</td><td>R</td><td>kolizní registr mezi střelou číslo 2 a herním polem</td></tr>
<tr><td>M3PF</td><td>R</td><td>kolizní registr mezi střelou číslo 3 a herním polem</td></tr>
<tr><td>P0PF</td><td>R</td><td>kolizní registr mezi hráčem číslo 0 a herním polem</td></tr>
<tr><td>P1PF</td><td>R</td><td>kolizní registr mezi hráčem číslo 1 a herním polem</td></tr>
<tr><td>P2PF</td><td>R</td><td>kolizní registr mezi hráčem číslo 2 a herním polem</td></tr>
<tr><td>P3PF</td><td>R</td><td>kolizní registr mezi hráčem číslo 3 a herním polem</td></tr>
<tr><td>M0PL</td><td>R</td><td>kolizní registr mezi střelou číslo 0 a hráčem</td></tr>
<tr><td>M1PL</td><td>R</td><td>kolizní registr mezi střelou číslo 1 a hráčem</td></tr>
<tr><td>M2PL</td><td>R</td><td>kolizní registr mezi střelou číslo 2 a hráčem</td></tr>
<tr><td>M3PL</td><td>R</td><td>kolizní registr mezi střelou číslo 3 a hráčem</td></tr>
<tr><td>P0PL</td><td>R</td><td>kolizní registr mezi hráčem číslo 0 a dalším hráčem</td></tr>
<tr><td>P1PL</td><td>R</td><td>kolizní registr mezi hráčem číslo 1 a dalším hráčem</td></tr>
<tr><td>P2PL</td><td>R</td><td>kolizní registr mezi hráčem číslo 2 a dalším hráčem</td></tr>
<tr><td>P3PL</td><td>R</td><td>kolizní registr mezi hráčem číslo 3 a dalším hráčem</td></tr>
</table>

<img src="http://i.iinfo.cz/images/165/7612-1.png" width="336" height="240" alt="&#160;" />
<p><i>Obrázek 5: Další snímek ze hry Gyrrus.</i></p>

<p>Čip <i>GTIA</i> kromě zavedení tří nových grafických režimů umožňoval
vykreslit čtyři sprity s&nbsp;rozlišením maximálně 8&times;256 pixelů
(popř.&nbsp;8&times;128 pixelů) a další čtyři sprity s&nbsp;rozlišením
2&times;256 pixelů, které bylo možno spojit do jednoho (pátého) většího spritu
s&nbsp;rozlišením 8&times;256 pixelů. Sprity široké 8 pixelů se
v&nbsp;literatuře nazývají hráči (<i>players</i>), úzké dvoupixelové sprity se
pak jmenují střely (<i>missiles</i>). Sprity byly jednobarevné, více barev bylo
možno dosáhnout logickými operacemi nad překrývajícími se sprity (počítače
Commodore C64 naproti tomu nabízely i sprity v&nbsp;režimu <i>multicolor</i>).
Každý sprite mohl pomocí jedné instrukce měnit svoji horizontální velikost i
horizontální pozici, přičemž polohy spritů byly navzájem nezávislé
(horizontální pozice se interně zjišťovala pomocí čítače a komparátoru, což
bylo řešení odlišné od technologie použité v&nbsp;čipu <i>TIA</i>, kde byl
namísto čítače využíván <i>linear feedback shift register</i>). Vertikální
pozice spritů se měnila blokovým přesunem bitmapy spritu v&nbsp;operační
paměti. Bylo také možné definovat priority vykreslování spritů vůči sobě
navzájem i vůči pozadí, tj.&nbsp;zda se má sprite vykreslovat nad herním polem
(popř.&nbsp;jiným spritem) či se naopak pod některými barvami skrývat.</p>

<a href="http://i.iinfo.cz/images/194/7614.png"><img src="http://i.iinfo.cz/images/194/7614-prev.png" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek 6: Hra Adventure 2 pro počítače Atari 5200. Jedná se o hry
z&nbsp;21. století vytvořenou v&nbsp;domácích podmínkách, která se snaží
zachovat prvky z&nbsp;původní hry Adventure pro Atari 2600 (viz tvar hráče -
čtverečku).</i></p>

<p>Kromě toho, že se dala měnit priorita jednotlivých spritů, bylo také možné
detekovat kolizi spritu s&nbsp;jiným spritem popř.&nbsp;s&nbsp;nějakou barvou
hracího pole. To stejné samozřejmě platí i pro střely, u nichž byla možná
detekce kolize s&nbsp;hráčem či kolize s&nbsp;hracím polem. Při kolizi (do
úvahy se samozřejmě braly pouze viditelné pixely spritu, tj.&nbsp;pixely
nastavené na logickou jedničku) se nastavil příslušný bit ve stavových
registrech, odkud bylo možné kdykoli poté zjistit, zda ke kolizi došlo či
nikoli. Díky této funkcionalitě bylo možné velmi snadno otestovat například
náraz hráče do stěny, zásah hráče střelou atd. Vzhledem k&nbsp;tomu, že sprity
byly pouze jednobarevné, museli se vícebarevní hráči sestavovat z&nbsp;několika
spritů. Omezení počtu spritů naproti tomu nebylo kritické, neboť jeden sprite
mohl být ve skutečnosti použitý pro zobrazení většího množství objektů ve scéně
&ndash; jediným omezením bylo to, že tyto objekty nesměly ležet na stejném
obrazovém řádku (podobné omezení zavádí i NES).</p>

<a href="http://i.iinfo.cz/images/572/7615.png"><img src="http://i.iinfo.cz/images/572/7615-prev.png" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek 7: Další screenshot ze hry Adventure 2.</i></p>

<p>Pro porovnání shodných vlastností a rozdílů mezi čipy <i>TIA</i> a
<i>GTIA</i> se podívejme na následující dvojici tabulek. V&nbsp;první tabulce
jsou vypsány grafické objekty, s&nbsp;nimiž dokázal pracovat čip <i>TIA</i>
použitý v&nbsp;herní konzoli <i>Atari 2600</i>:</p>

<table>
<tr><th>#</th><th>Typ objektu</th><th>Orig.název</th><th>Objem paměti</th><th>Šířka reprezentovaná jedním bitem</th></tr>
<tr><td>1</td><td>Pozadí</td><td>Background</td><td> 0 bitů</td><td>&times;</td></tr>
<tr><td>2</td><td>Hrací plocha</td><td>Playground</td><td>20 bitů</td><td>4&times; základní šířka pixelu</td></tr>
<tr><td>3</td><td>Míč</td><td>Ball</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td>4</td><td>Hráč 0</td><td>Player 0</td><td> 8 bitů</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td>5</td><td>Střela 0</td><td>Missile 0</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td>6</td><td>Hráč 1</td><td>Player 1</td><td> 8 bitů</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td>7</td><td>Střela 1</td><td>Missile 1</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
</table>

<a href="http://i.iinfo.cz/images/262/7616.png"><img src="http://i.iinfo.cz/images/262/7616-prev.png" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek 8: A další screenshot ze hry Adventure 2.</i></p>

<p>Ve druhé tabulce jsou vypsány grafické objekty, s&nbsp;nimiž dokázal
pracovat čip <i>GTIA</i> použitý v&nbsp;herní konzoli <i>Atari 5200</i> i
v&nbsp;prakticky všech osmibitových domácích počítačích <i>Atari</i> (pokud
tedy nepočítáme prvních zhruba 100 000 počítačů Atari 400 a Atari 800
s&nbsp;čipy <i>CTIA</i>:</p>

<table>
<tr><th>#</th><th>Typ objektu</th><th>Orig.název</th><th>Objem paměti</th><th>Šířka reprezentovaná jedním bitem</th></tr>
<tr><td> 1</td><td>Pozadí</td><td>Background</td><td> 0 bitů</td><td>barva v COLBK, přes celou šířku řádku</td></tr>
<tr><td> 2</td><td>Hrací plocha</td><td>Playground</td><td> x bitů</td><td>generováno v&nbsp;ANTIC</td></tr>
<tr><td> 3</td><td>Hráč 0</td><td>Player 0</td><td> 8 bitů&times;128/256</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td> 4</td><td>Střela 0</td><td>Missile 0</td><td> 2 bity&times;128/256</td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td> 5</td><td>Hráč 1</td><td>Player 1</td><td> 8 bitů&times;128/256</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td> 6</td><td>Střela 1</td><td>Missile 1</td><td> 2 bity&times;128/256</td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td> 7</td><td>Hráč 2</td><td>Player 2</td><td> 8 bitů&times;128/256</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td> 8</td><td>Střela 2</td><td>Missile 2</td><td> 2 bity&times;128/256</td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td> 9</td><td>Hráč 3</td><td>Player 3</td><td> 8 bitů&times;128/256</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td>10</td><td>Střela 3</td><td>Missile 3</td><td> 2 bity&times;128/256</td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
</table>

<img src="http://i.iinfo.cz/images/569/pc6907.png" width="336" height="240" alt="pc6907" />
<p><i>Obrázek 9: Kombinace textových a pseudografických režimů ve hře
International Karate.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Počítač Commodore C64</h2>

<p>Grafický čip <i>VIC-II</i> použitý v&nbsp;počítači Commodore C64 podporuje,
podobně jako obvod <i>GTIA</i> u osmibitových Atari, práci se sprity. Spritů
může být (pokud není použita některá z&nbsp;technik popsaných v&nbsp;dalším
textu) současně zobrazeno osm, přičemž každý sprite má velikost 24&times;21
pixelů v&nbsp;monochromatickém (<i>hi-res</i>) režimu nebo 12&times;21 pixelů
v&nbsp;režimu <i>multi-color</i>. Pomocí vhodně naprogramované přerušovací
rutiny je však možné zobrazit i více spritů &ndash; využívá se změna vertikální
polohy některého již vykresleného spritu, což znamená, že omezení na osm spritů
ve skutečnosti platí pouze pro jeden obrazový řádek. Ze čtyřiceti sedmi
řídicích osmibitových registrů čipu <i>VIC-II</i> je jich plných 34 určeno pro
ovládání spritů. U spritů je možné nastavovat jejich horizontální i vertikální
polohu, barvu, velikost (zvětšení ve směru horizontální a/nebo vertikální osy),
grafický režim (<i>hi-res</i>, <i>multi-color</i>) a kolize typu sprite-sprite
a sprite-bitmapa. Také je možné měnit prioritu spritů vůči pozadí, vzájemná
priorita spritů je však neměnná a je určena číslem spritu.</p>

<img src="http://i.iinfo.cz/images/574/pc7103.jpg" width="370" height="261" alt="pc7103" />
<p><i>Obrázek 10: Osm čtyřbarevných spritů zobrazených v&nbsp;režimu
multi-color.</i></p>

<p>Způsob zobrazení spritů nezávisle na pozadí je v&nbsp;čipu <i>VIC-II</i>
řešen podobným způsobem, jako výše zmíněného čipu <i>GTIA</i> používaného u
osmibitových počítačů Atari. Hlavní rozdíl (spíše rozšíření) spočívá
v&nbsp;možnosti vertikálního posunu spritů a taktéž v&nbsp;možnosti jejich
zobrazení ve více barvách (což je v&nbsp;praxi velmi důležité).</p>

<p>V&nbsp;následující tabulce jsou vypsány ty řídicí registry čipu
<i>VIC-II</i>, pomocí nichž je možné zvolit způsob zobrazení spritů na
obrazovce, měnit souřadnice spritů (registry 0 až 16) a popř.&nbsp;přečíst
příznaky kolize spritů (registr 30 a 31). Povšimněte si, že vzhledem
k&nbsp;horizontálnímu rozlišení čipu <i>VIC-II</i>, tj.&nbsp;320 pixelům, je
nutné horizontální souřadnice spritů uložit do devíti bitů, přičemž hodnoty
nejvyšších bitů jsou pro všechny sprity sdruženy do řídicího registru číslo 16
(u Atari je tomu jinak). Taktéž je možné pro každý sprite zvolit barvu
nezávisle na barvách ostatních spritů (a samozřejmě nezávisle na barvě pozadí)
či zvětšit sprite v&nbsp;horizontálním či vertikálním směru (registr 23 a 29).
Změnou hodnoty uložené v&nbsp;registru číslo 21 lze libovolný sprite povolit či
zakázat:</p>

<pre>
 #| Adr.  |Bit7|Bit6|Bit5|Bit4|Bit3|Bit2|Bit1|Bit0| Function
--+-------+----+----+----+----+----+----+----+----+------------------------
 0| $d000 |                  M0X                  | X coordinate sprite 0
--+-------+---------------------------------------+------------------------
 1| $d001 |                  M0Y                  | Y coordinate sprite 0
--+-------+---------------------------------------+------------------------
 2| $d002 |                  M1X                  | X coordinate sprite 1
--+-------+---------------------------------------+------------------------
 3| $d003 |                  M1Y                  | Y coordinate sprite 1
--+-------+---------------------------------------+------------------------
 4| $d004 |                  M2X                  | X coordinate sprite 2
--+-------+---------------------------------------+------------------------
 5| $d005 |                  M2Y                  | Y coordinate sprite 2
--+-------+---------------------------------------+------------------------
 6| $d006 |                  M3X                  | X coordinate sprite 3
--+-------+---------------------------------------+------------------------
 7| $d007 |                  M3Y                  | Y coordinate sprite 3
--+-------+---------------------------------------+------------------------
 8| $d008 |                  M4X                  | X coordinate sprite 4
--+-------+---------------------------------------+------------------------
 9| $d009 |                  M4Y                  | Y coordinate sprite 4
--+-------+---------------------------------------+------------------------
10| $d00a |                  M5X                  | X coordinate sprite 5
--+-------+---------------------------------------+------------------------
11| $d00b |                  M5Y                  | Y coordinate sprite 5
--+-------+---------------------------------------+------------------------
12| $d00c |                  M6X                  | X coordinate sprite 6
--+-------+---------------------------------------+------------------------
13| $d00d |                  M6Y                  | Y coordinate sprite 6
--+-------+---------------------------------------+------------------------
14| $d00e |                  M7X                  | X coordinate sprite 7
--+-------+---------------------------------------+------------------------
15| $d00f |                  M7Y                  | Y coordinate sprite 7
--+-------+----+----+----+----+----+----+----+----+------------------------
16| $d010 |M7X8|M6X8|M5X8|M4X8|M3X8|M2X8|M1X8|M0X8| MSBs of X coordinates
--+-------+----+----+----+----+----+----+----+----+------------------------
21| $d015 | M7E| M6E| M5E| M4E| M3E| M2E| M1E| M0E| Sprite enabled
--+-------+----+----+----+----+----+----+----+----+------------------------
23| $d017 |M7YE|M6YE|M5YE|M4YE|M3YE|M2YE|M1YE|M0YE| Sprite Y expansion
--+-------+----+----+----+----+----+----+----+----+------------------------
27| $d01b |M7DP|M6DP|M5DP|M4DP|M3DP|M2DP|M1DP|M0DP| Sprite data priority
--+-------+----+----+----+----+----+----+----+----+------------------------
28| $d01c |M7MC|M6MC|M5MC|M4MC|M3MC|M2MC|M1MC|M0MC| Sprite multicolor
--+-------+----+----+----+----+----+----+----+----+------------------------
29| $d01d |M7XE|M6XE|M5XE|M4XE|M3XE|M2XE|M1XE|M0XE| Sprite X expansion
--+-------+----+----+----+----+----+----+----+----+------------------------
30| $d01e | M7M| M6M| M5M| M4M| M3M| M2M| M1M| M0M| Sprite-sprite collision
--+-------+----+----+----+----+----+----+----+----+------------------------
31| $d01f | M7D| M6D| M5D| M4D| M3D| M2D| M1D| M0D| Sprite-data collision
--+-------+----+----+----+----+----+----+----+----+------------------------
37| $d025 |  - |  - |  - |  - |        MM0        | Sprite multicolor 0
--+-------+----+----+----+----+-------------------+------------------------
38| $d026 |  - |  - |  - |  - |        MM1        | Sprite multicolor 1
--+-------+----+----+----+----+-------------------+------------------------
39| $d027 |  - |  - |  - |  - |        M0C        | Color sprite 0
--+-------+----+----+----+----+-------------------+------------------------
40| $d028 |  - |  - |  - |  - |        M1C        | Color sprite 1
--+-------+----+----+----+----+-------------------+------------------------
41| $d029 |  - |  - |  - |  - |        M2C        | Color sprite 2
--+-------+----+----+----+----+-------------------+------------------------
42| $d02a |  - |  - |  - |  - |        M3C        | Color sprite 3
--+-------+----+----+----+----+-------------------+------------------------
43| $d02b |  - |  - |  - |  - |        M4C        | Color sprite 4
--+-------+----+----+----+----+-------------------+------------------------
44| $d02c |  - |  - |  - |  - |        M5C        | Color sprite 5
--+-------+----+----+----+----+-------------------+------------------------
45| $d02d |  - |  - |  - |  - |        M6C        | Color sprite 6
--+-------+----+----+----+----+-------------------+------------------------
46| $d02e |  - |  - |  - |  - |        M7C        | Color sprite 7
--+-------+----+----+----+----+-------------------+------------------------
</pre>

<img src="http://i.iinfo.cz/images/669/pc7104.png" width="368" height="270" alt="pc7104" />
<p><i>Obrázek 11: S&nbsp;využitím jednoduchého triku je možné zobrazit i více
spritů než osm, jak je ukázáno na tomto screenshotu. Jediné omezení spočívá
v&nbsp;tom, že se na jednom obrazovém řádku nesmí vyskytovat více než osm
spritů, jejich celkový počet je limitován pouze výpočetním výkonem
mikroprocesoru.</i></p>

<p>Sprity podporované čipem <i>VIC-II</i> mohou být zobrazeny, podobně jako
pozadí, buď v&nbsp;režimu <i>hi-res</i> (vyšší horizontální rozlišení, jeden
bit na pixel) nebo <i>multi-color</i> (poloviční horizontální rozlišení, dva
bity na pixel). Režim zobrazení každého spritu lze nastavit příslušným bitem
v&nbsp;registru 28 (sprite multicolor). Nejprve si popíšeme způsob zobrazení
spritu v&nbsp;režimu <i>hi-res</i>. V&nbsp;tomto režimu má sprite rozlišení
24&times;21 pixelů, přičemž každý pixel je reprezentován pouze jediným bitem.
Z&nbsp;toho vyplývá, že bitmapa se spritem má velikost 63 bytů, protože
24&times;21/8=63. V&nbsp;případě, že má bit odpovídající pixelu ve spritu
hodnotu 0, jedná se o průhledný pixel, tj.&nbsp;příslušným pixelem může
prosvítat buď jiný sprite nebo pozadí (v&nbsp;závislosti na tom, o který sprite
se jedná). Pokud je bit odpovídající danému pixelu nastavený na hodnotu 1, je
pixel vybarven barvou přečtenou z&nbsp;řídicího registru 39-46, opět
v&nbsp;závislosti na tom, o který sprite 0-7 se jedná. Pomocí řídicího registru
23 a 29 je možné zvolit zvětšení spritu v&nbsp;horizontální či vertikální ose.
Pokud je bit příslušný danému spritu nastaven na jedničku, je sprite 2&times;
zvětšen buď v&nbsp;horizontální (registr 29) či vertikální (registr 23) ose,
tj.&nbsp;nezmění se rozlišení spritu ale velikost jeho pixelů.</p>

<p>V&nbsp;případě, že je mód zobrazení spritu nastavený do režimu
<i>multi-color</i>, jsou pro každý pixel ve spritu vyhrazeny dva bity. Velikost
obsazené paměti zůstává zachována &ndash; 63 bajtů, ovšem horizontální
rozlišení spritu se v&nbsp;tomto režimu snižuje na 12 pixelů a pixely mají
dvojnásobnou šířku oproti režimu <i>hi-res</i>. Vzhledem k&nbsp;tomu, že je
pomocí dvou bitů možné zakódovat celkem čtyři stavy, je určení barvy pixelu
zajímavější než v&nbsp;režimu <i>hi-res</i>. Všechny sprity spolu sdílí dvě
společné barvy z&nbsp;barvové palety, přičemž indexy těchto barev jsou uloženy
v&nbsp;řídicích registrech 37 a 38. Třetí barva je pro každý sprite
individuální &ndash; viz řídicí registry 39-46. Poslední bitová kombinace
odpovídá pozadí, tj.&nbsp;v&nbsp;tomto případě je pixel spritu průhledný. I
v&nbsp;režimu <i>multi-color</i> je možné sprity zvětšit v&nbsp;horizontální i
vertikální ose, ovšem s&nbsp;tím rozdílem, že zvětšení v&nbsp;ose horizontální
je buď dvojnásobné nebo čtyřnásobné oproti základní velikosti pixelu
(odpovídající grafickému režimu <i>hi-res</i>).</p>

<p>V&nbsp;předchozích třech odstavcích jsme si řekli, že bitmapa každého spritu
je vždy uložena v&nbsp;63 bajtech, bez ohledu na to, zda se jedná o sprite
zobrazovaný v&nbsp;režimu <i>hi-res</i> či <i>multi-color</i>. Těchto 63 bajtů
je umístěno v&nbsp;adresovém prostoru o velikosti 16 kB, do kterého má
v&nbsp;daném okamžiku čip <i>VIC-II</i> přístup. Mikroprocesor může změnit
počáteční adresu bitmapy reprezentující sprite v&nbsp;krocích po 64 bajtech,
což mj.&nbsp;znamená, že změna zobrazovaného tvaru je velmi rychlá &ndash;
jedná se o přepis jediného bajtu. Pokud programátor dokáže ve chvíli, kdy
elektronový paprsek neprovádí vykreslování, změnit adresu, na které se nachází
bitmapa spritu, souřadnice spritu a popř.&nbsp;i jeho barvu (barvy), je možné
zvýšit celkový počet zobrazitelných spritů z&nbsp;původních osmi až na řádově
stovky.</p>

<p>Platí zde jediné omezení &ndash; na jednom obrazovém řádku se vykreslí pouze
osm pixelů, jejichž podobu není možné měnit. Důvodem je to, že <i>VIC-II</i> si
na začátku každého obrazového řádku přečte aktuální řádek každého spritu
(tj.&nbsp;tři bajty) do svých interních bufferů. Právě díky tomu, že je obsah
těchto bufferů obnovován v&nbsp;každém obrazovém řádku, je umožněno zvýšení
celkového počtu spritů i postupná změna jejich souřadnic.</p>

<img src="http://i.iinfo.cz/images/613/pc7107.gif" width="370" height="262" alt="pc7107" />
<p><i>Obrázek 12: Demo, ve kterém se současně (na jedné obrazovce) zobrazuje 144
spritů.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Herní konzole NES</h2>

<p>Základem při vykreslování spritů na herní konzoli NES je opět tabulka
vzorků, ta je ovšem doplněna pomocnou pamětí o kapacitě 256 bajtů, která je
umístěna přímo na čipu <i>PPU</i>. Programátor měl k&nbsp;této paměti přístup
buď přes řídicí registry <i>PPU</i>, alternativně pak přes DMA. Ve zmíněných
256 bajtech (ty použijeme v&nbsp;konfiguračních příkladech) jsou umístěny
informace o 64 spritech, tj.&nbsp;pro každý sprite jsou vyhrazeny čtyři bajty.
V&nbsp;těchto bajtech se nachází horizontální pozice spritu, vertikální pozice
spritu, horní dva bity barvy (spodní bity jsou přímo v&nbsp;tabulce vzorků),
index do tabulky vzorků (ukazuje na tvar spritu) a konečně taktéž bitové
příznaky: horizontální zrcadlení, vertikální zrcadlení a priorita spritu
(před/za pozadím).</p>

<img src="http://i.iinfo.cz/images/282/8422-1.png" width="256" height="240" alt="&#160;" />
<p><i>Obrázek 13: Screenshot ze hry Donkey Kong.</i></p>

<p>Kvůli dalším technologickým omezením čipu <i>PPU</i> mohlo být na jednom
obrazovém řádku (tj.&nbsp;vedle sebe) zobrazeno pouze omezené množství spritů,
tj.&nbsp;nebylo například možné všechny sprity umístit vedle sebe. Taktéž počet
celkově zobrazovaných barev nedosáhl hodnoty 32 (16 pro pozadí, 16 pro sprity),
ale pouze 25, přičemž barvová paleta obsahovala 48 barev a pět odstínů šedi
(konkrétní způsob zobrazení barev byl na obou televizních normách poněkud
odlišný).</p>

<p><div class="rs-tip-major">Poznámka: na originální konzoli lze zobrazit jen
osm spritů na obrazovém řádku, ovšem mnohé emulátory toto omezení neobsahují.
To si ostatně prakticky ukážeme <a href="#k15">v&nbsp;patnácté
kapitole</a>.</div></p>

<img src="http://i.iinfo.cz/images/388/8423-1.png" width="256" height="240" alt="&#160;" />
<p><i>Obrázek 14: Další screenshot ze hry Donkey Kong.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Modifikovatelné informace o spritech</h2>

<p>Každý sprite je vykreslen, jak již ostatně velmi dobře víme, jako rastrový
obrázek o rozměrech 8&times;8 pixelů nebo 8&times;16 pixelů. Zatímco samotný
rastrový obrázek je uložen v&nbsp;paměti ROM na cartridge se hrou, musí mít NES
k&nbsp;dispozici ještě informace o pozici spritů na obrazovce (x,y), index
obrázku se spritem (tedy vlastně nepřímý &bdquo;krátký&ldquo; ukazatel do
paměti ROM) a navíc i speciální bajt, jehož bity určují část barvové palety,
zrcadlení spritu atd.</p>

<p>V&nbsp;dnešním prvním demonstračním příkladu vykreslíme na obrazovku
postavičku Maria:</p>

*** image ***
<p><i>Obrázek 15: Postavička Maria vykreslená dnešním prvním demonstračním
příkladem.</i></p>

<p>Tato postavička je složena z&nbsp;osmi spritů, z&nbsp;nichž každý má rozměry
8&times;8 pixelů:</p>

*** image ***
<p><i>Obrázek 16: Postavička Maria složená z&nbsp;osmi spritů.</i></p>

<p>V&nbsp;paměti tedy musíme mít k&nbsp;dispozici data osmi spritů &ndash;
souřadnice [x, y] číslo spritu (tile number) a atributový bajt, a to
v&nbsp;pořadí y, tile number, attributes, x. Celkem se jedná o 32 bajtů
(8&times;4 bajty). V&nbsp;assembleru je deklarace těchto 32 bajtů
následující:</p>

<pre>
<i>; data pro jeden "velký" sprite - Maria</i>
<strong>spritedata</strong>:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $10
    .byte $18, $02, $00, $08
    .byte $18, $03, $00, $10
    .byte $20, $04, $00, $08
    .byte $20, $05, $00, $10
    .byte $28, $06, $00, $08
    .byte $28, $07, $00, $10
</pre>

<p>Samotné bitmapy spritů (tj.&nbsp;jednotlivé dlaždice), jsou uloženy
v&nbsp;souboru <strong>mario.chr</strong>, jenž lze získat následujícím
způsobem (velikost je přesně 8 kB):</p>

<pre>
$ <strong>wget https://github.com/ericdigioia/6502-Assembly-NES-Game-Development-Playground/raw/main/mario.chr</strong>
</pre>

<p>Nesmíme zapomenout přilinkovat tento soubor do výsledného binárního obrazu
cartridge:</p>

<pre>
.segment "CHARS"
    .incbin "mario.chr"
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Načtení spritů do operační paměti</h2>

<p>Výše uvedených 32 bajtů je nutné přenést do operační paměti, konkrétně na
paměťovou stránku číslo 2 (tj.&nbsp;od adresy 0x200). Tím je umožněna například
změna souřadnice spritu, změna jeho indexu (animace) atd.:</p>

<pre>
:
        lda spritedata,X  <i>; budeme přesouvat data z této oblasti</i>
        sta $0200,X       <i>; uložení do paměti spritů</i>
        inx               <i>; zvýšení hodnoty počitadla</i>
        cpx #32           <i>; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32</i>
        bne :-
</pre>

<p>Dále povolíme NMI, tj.&nbsp;nemaskovatelné přerušení, které se automaticky
vyvolává při každém zatemnění snímku (<i>VBLANK</i>):</p>

<pre>
        cli               <i>; vynulování bitu I - povolení přerušení</i>
        lda #%10000000      
        sta PPUCTRL       <i>; při každém VBLANK se vyvolá NMI (důležité!)</i>
</pre>

<p>A konečně povolíme zobrazování spritů nastavením pátého bitu řídicího
registru <strong>PPUMASK</strong> (s&nbsp;nímž jsme se již setkali minule):</p>

<pre>
        lda #%00010000    <i>; povolení zobrazení spritů</i>
        sta PPUMASK
</pre>

<p>Všechny výše popsané operace jsou realizovány v&nbsp;rámci podprogramu
(subrutiny) <strong>load_sprites</strong>, kterou lze zavolat jedenkrát po
resetu herní konzole NES:</p>

<pre>
<i>; načtení spritů</i>
<strong>.proc load_sprites</strong>
:
        lda spritedata,X  <i>; budeme přesouvat data z této oblasti</i>
        sta $0200,X       <i>; uložení do paměti spritů</i>
        inx               <i>; zvýšení hodnoty počitadla</i>
        cpx #32           <i>; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32</i>
        bne :-
&nbsp;
        cli               <i>; vynulování bitu I - povolení přerušení</i>
        lda #%10000000      
        sta PPUCTRL       <i>; při každém VBLANK se vyvolá NMI (důležité!)</i>
&nbsp;
        lda #%00010000    <i>; povolení zobrazení spritů</i>
        sta PPUMASK
&nbsp;
        rts               <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Kód v&nbsp;obsluze nemaskovatelného přerušení</h2>

<p>Pro zobrazení spritů nám zbývá jediná maličkost &ndash; redefinovat
obslužnou rutinu zavolanou při každém vyvolání nemaskovatelného přerušení
(<i>NMI &ndash; Non-Maskable Interrupt</i>). Toto přerušení je zavoláno při
každém vertikálním zatemnění, kdy je možné měnit parametry dalšího snímku bez
&bdquo;blikání&ldquo;. Nám prozatím postačuje pouze spustit DMA, které zajistí
přenos rastru spritů na obrazovku (a to implementační detaily se vlastně
programátor nemusí starat):</p>

<pre>
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>

<strong>.proc nmi</strong>
        lda #$02                <i>; horní bajt adresy pro přenos + zahájení přenosu</i>
        sta OAM_DMA
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Úplný zdrojový kód dnešního prvního demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního prvního demonstračního příkladu (v&nbsp;pořadí
již třináctého příkladu pro NES) je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm</a>.
Pro překlad a slinkování tohoto příkladu je zapotřebí i <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">Makefile</a>
a příkaz <strong>make example15.nes</strong>:</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>; Setup PPU přes makro</i>
<i>; Definice spritu a zobrazení spritů s Mariem</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Taktéž založeno na https://nerdy-nights.nes.science/#main_tutorial-3</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
DMC_FREQ        = $4010
OAM_DMA         = $4014
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<strong>.macro setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro wait_for_frame</strong>
:       bit PPUSTATUS            <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                   <i>; skok, pokud je příznak N nulový</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro clear_ram</strong>
        lda #$00                <i>; vynulování registru A</i>
:       sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne :-                  <i>; po přetečení 0xff -&gt; 0x00 konec smyčky</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro ppu_data_palette_address</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
<strong>.endmacro</strong>
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 2
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
.segment "ZEROPAGE"
.segment "STARTUP"
.segment "CODE"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
<strong>.proc nmi</strong>
        lda #$02                <i>; horní bajt adresy pro přenos + zahájení přenosu</i>
        sta OAM_DMA
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
<strong>.proc irq</strong>
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
<strong>.proc reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0 (NMI)</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
        stx DMC_FREQ            <i>; zákaz DMC IRQ</i>
&nbsp;
        ldx #$40
        stx $4017               <i>; interrupt inhibit bit</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; nastavení barvové palety</i>
        jsr load_palette  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; nastavení spritů</i>
        jsr load_sprites  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; vynulování barvové palety</i>
<strong>.proc clear_palette</strong>
        ppu_data_palette_address
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; nastavení barvové palety</i>
<strong>.proc load_palette</strong>
        ppu_data_palette_address
&nbsp;
        <i>; $3f00-$3f0f - paleta pozadí</i>
        <i>; $3f10-$3f1f - paleta spritů</i>
&nbsp;
        ldx #$00        <i>; vynulovat počitadlo a offset</i>
&nbsp;
:
        lda palette, x  <i>; načíst bajt s offsetem</i>
        sta PPUDATA     <i>; zápis barvy do PPU</i>
        inx             <i>; zvýšit počitadlo/offset</i>
        cpx #32         <i>; limit počtu barev</i>
        bne :-          <i>; opakovat smyčku 32x</i>
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; načtení spritů</i>
<strong>.proc load_sprites</strong>
        ldx #0            <i>; vynulování počitadla</i>
:
        lda spritedata,X  <i>; budeme přesouvat data z této oblasti</i>
        sta $0200,X       <i>; uložení do paměti spritů</i>
        inx               <i>; zvýšení hodnoty počitadla</i>
        cpx #32           <i>; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32</i>
        bne :-
&nbsp;
        cli               <i>; vynulování bitu I - povolení přerušení</i>
        lda #%10000000      
        sta PPUCTRL       <i>; při každém VBLANK se vyvolá NMI (důležité!)</i>
&nbsp;
        lda #%00010000    <i>; povolení zobrazení spritů</i>
        sta PPUMASK
&nbsp;
        rts               <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; samotná barvová paleta</i>
<strong>palette</strong>:
    .byte $22, $29, $1a, $0F, $22, $36, $17, $0F, $22, $30, $21, $0F, $22, $27, $17, $0F  <i>; barvy pozadí</i>
    .byte $22, $16, $27, $18, $22, $1A, $30, $27, $22, $16, $30, $27, $22, $0F, $36, $17  <i>; barvy spritů</i>
&nbsp;
<i>; data pro osm spritů</i>
<strong>spritedata</strong>:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $10
    .byte $18, $02, $00, $08
    .byte $18, $03, $00, $10
    .byte $20, $04, $00, $08
    .byte $20, $05, $00, $10
    .byte $28, $06, $00, $08
    .byte $28, $07, $00, $10
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
.segment "CHARS"
    .incbin "mario.chr"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Změna souřadnic spritů</h2>

<p>Víme již, že všechny &bdquo;dynamické&ldquo; údaje o spritech (kromě jejich
bitmapy) jsou uloženy v&nbsp;operační paměti, konkrétně od adresy $0200 (což
dává smysl, protože od adresy $0000 je uložena nultá stránka a od adresy $0100
zásobník). Velmi snadno je tedy možné měnit pozice spritů, a to je tak rychlá
operace, že i na dnešní dobu až neskutečně pomalý mikroprocesor MOS 6502 dokáže
změnit pozice spritů mezi jednotlivými snímky a tak zajistit animaci herního
světa. My sice prozatím nevíme, jak animace tvořit, ovšem změna pozice spritů
je snadná &ndash; postačuje změnit blok dat, který je kopírovaný z&nbsp;ROM
právě na druhou stránku, tedy od adresy $0200:</p>

<pre>
<i>; data pro osm spritů</i>
<strong>spritedata</strong>:
    .byte <strong>$10</strong>, $00, $00, <strong>$08</strong>   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte <strong>$10</strong>, $01, $00, <strong>$12</strong>
    .byte <strong>$1a</strong>, $02, $00, <strong>$08</strong>
    .byte <strong>$1a</strong>, $03, $00, <strong>$12</strong>
    .byte <strong>$24</strong>, $04, $00, <strong>$08</strong>
    .byte <strong>$24</strong>, $05, $00, <strong>$12</strong>
    .byte <strong>$2e</strong>, $06, $00, <strong>$08</strong>
    .byte <strong>$2e</strong>, $07, $00, <strong>$12</strong>
</pre>

*** image ***
<p><i>Obrázek 17: Postavička Maria složená z&nbsp;osmi spritů, které jsou od sebe vzdáleny o čtyři pixely.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Modifikace barvových atributů spritů</h2>

<p>Spodní dva bity třetího bajtu (ze čtyř), které popisují dynamické parametry
spritů, obsahují dva bity z&nbsp;indexu (ukazatele) do barvové palety. Změnou
těchto dvou bitů je tedy možné vybrat jednu ze čtyř barvových palet (každá se
čtyřmi resp.&nbsp;třemi barvami + průhledností) vyhrazených pro sprity.
Jednoduchou úpravou kódu můžeme dosáhnout toho, že každé dva sprity
z&nbsp;celkových osmi zobrazených spritů budou používat odlišnou barvovou
paletu:</p>

<pre>
<strong>spritedata</strong>:
    .byte $10, $00, <strong>$01</strong>, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, <strong>$01</strong>, $12
    .byte $1a, $02, <strong>$02</strong>, $08
    .byte $1a, $03, <strong>$02</strong>, $12
    .byte $24, $04, <strong>$03</strong>, $08
    .byte $24, $05, <strong>$03</strong>, $12
    .byte $2e, $06, <strong>$00</strong>, $08
    .byte $2e, $07, <strong>$00</strong>, $12
</pre>

*** image ***
<p><i>Obrázek 18: Vždy dva sprity vedle sebe mají nastaven stejný barvový atribut.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Úplný zdrojový kód dnešního druhého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního druhého demonstračního příkladu (v&nbsp;pořadí
již čtrnáctého příkladu pro NES) je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm</a>.
Pro překlad a slinkování tohoto příkladu je zapotřebí i <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">Makefile</a>
a příkaz <strong>make example15.nes</strong>:</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>; Setup PPU přes makro</i>
<i>; Definice spritu a zobrazení spritů s rozloženým Mariem</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Taktéž založeno na https://nerdy-nights.nes.science/#main_tutorial-3</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
 
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
DMC_FREQ        = $4010
OAM_DMA         = $4014
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<strong>.macro setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro wait_for_frame</strong>
:       bit PPUSTATUS            <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                   <i>; skok, pokud je příznak N nulový</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro clear_ram</strong>
        lda #$00                <i>; vynulování registru A</i>
:       sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne :-                  <i>; po přetečení 0xff -&gt; 0x00 konec smyčky</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro ppu_data_palette_address</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
<strong>.endmacro</strong>
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 2
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
.segment "ZEROPAGE"
.segment "STARTUP"
.segment "CODE"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
<strong>.proc nmi</strong>
        lda #$02                <i>; horní bajt adresy pro přenos + zahájení přenosu</i>
        sta OAM_DMA
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
<strong>.proc irq</strong>
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
<strong>.proc reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0 (NMI)</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
        stx DMC_FREQ            <i>; zákaz DMC IRQ</i>
&nbsp;
        ldx #$40
        stx $4017               <i>; interrupt inhibit bit</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; nastavení barvové palety</i>
        jsr load_palette  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; nastavení spritů</i>
        jsr load_sprites  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; vynulování barvové palety</i>
<strong>.proc clear_palette</strong>
        ppu_data_palette_address
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; nastavení barvové palety</i>
<strong>.proc load_palette</strong>
        ppu_data_palette_address
&nbsp;
        <i>; $3f00-$3f0f - paleta pozadí</i>
        <i>; $3f10-$3f1f - paleta spritů</i>
&nbsp;
        ldx #$00        <i>; vynulovat počitadlo a offset</i>
&nbsp;
:
        lda palette, x  <i>; načíst bajt s offsetem</i>
        sta PPUDATA     <i>; zápis barvy do PPU</i>
        inx             <i>; zvýšit počitadlo/offset</i>
        cpx #32         <i>; limit počtu barev</i>
        bne :-          <i>; opakovat smyčku 32x</i>
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; načtení spritů</i>
<strong>.proc load_sprites</strong>
        ldx #0            <i>; vynulování počitadla</i>
:
        lda spritedata,X  <i>; budeme přesouvat data z této oblasti</i>
        sta $0200,X       <i>; uložení do paměti spritů</i>
        inx               <i>; zvýšení hodnoty počitadla</i>
        cpx #32           <i>; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32</i>
        bne :-
&nbsp;
        cli               <i>; vynulování bitu I - povolení přerušení</i>
        lda #%10000000      
        sta PPUCTRL       <i>; při každém VBLANK se vyvolá NMI (důležité!)</i>
&nbsp;
        lda #%00010000    <i>; povolení zobrazení spritů</i>
        sta PPUMASK
&nbsp;
        rts               <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; samotná barvová paleta</i>
<strong>palette</strong>:
    .byte $22, $29, $1a, $0F, $22, $36, $17, $0F, $22, $30, $21, $0F, $22, $27, $17, $0F  <i>; barvy pozadí</i>
    .byte $22, $16, $27, $18, $22, $1A, $30, $27, $22, $16, $30, $27, $22, $0F, $36, $17  <i>; barvy spritů</i>
&nbsp;
<i>; data pro osm spritů</i>
<strong>spritedata</strong>:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $12
    .byte $1a, $02, $00, $08
    .byte $1a, $03, $00, $12
    .byte $24, $04, $00, $08
    .byte $24, $05, $00, $12
    .byte $2e, $06, $00, $08
    .byte $2e, $07, $00, $12
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
.segment "CHARS"
    .incbin "mario.chr"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Větší počet spritů na obrazovce rozdělených do řádků</h2>

<p>Celkový počet spritů zobrazitelných na obrazovce herní konzole NES je 64,
ovšem současně platí omezení pro osm spritů na každém řádku. Podívejme se nyní
na způsob zobrazení celkem 2&times;4&times;4=32 spritů
resp.&nbsp;2&times;5&times;4=40 spritů, přičemž na každém obrazovém řádku jsou
zobrazeny maximálně dva sprity (a tudíž pro nás druhé omezení nehraje
roli):</p>

*** image ***
<p><i>Obrázek 19: Čtyři postavičky, každá sestavená z&nbsp;osmi spritů = 32 spritů celkem (a 128 bajtů RAM).</i></p>

<p>Data pro čtyři postavičky:</p>

<pre>
<i>; data pro větší množství spritů</i>
<strong>spritedata</strong>:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $10
    .byte $18, $02, $00, $08
    .byte $18, $03, $00, $10
    .byte $20, $04, $00, $08
    .byte $20, $05, $00, $10
    .byte $28, $06, $00, $08
    .byte $28, $07, $00, $10
&nbsp;
    .byte $40, $08, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $40, $09, $00, $10
    .byte $48, $0a, $00, $08
    .byte $48, $0b, $00, $10
    .byte $50, $0c, $00, $08
    .byte $50, $0d, $00, $10
    .byte $58, $0d, $00, $08
    .byte $58, $0f, $00, $10
&nbsp;
    .byte $70, $10, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $70, $11, $00, $10
    .byte $78, $12, $00, $08
    .byte $78, $13, $00, $10
    .byte $80, $14, $00, $08
    .byte $80, $15, $00, $10
    .byte $88, $16, $00, $08
    .byte $88, $17, $00, $10
&nbsp;
    .byte $a0, $18, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $a0, $19, $00, $10
    .byte $a8, $1a, $00, $08
    .byte $a8, $1b, $00, $10
    .byte $b0, $1c, $00, $08
    .byte $b0, $1d, $00, $10
    .byte $b8, $1d, $00, $08
    .byte $b8, $1f, $00, $10
</pre>

*** image ***
<p><i>Obrázek 20: Pět postaviček, každá sestavená z&nbsp;osmi spritů = 40 spritů celkem (a 160 bajtů RAM).</i></p>

<p>Data pro pět postaviček:</p>

<pre>
<i>; data pro větší množství spritů</i>
<strong>spritedata</strong>:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $10
    .byte $18, $02, $00, $08
    .byte $18, $03, $00, $10
    .byte $20, $04, $00, $08
    .byte $20, $05, $00, $10
    .byte $28, $06, $00, $08
    .byte $28, $07, $00, $10
&nbsp;
    .byte $30, $08, $00, $18   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $30, $09, $00, $20
    .byte $38, $0a, $00, $18
    .byte $38, $0b, $00, $20
    .byte $40, $0c, $00, $18
    .byte $40, $0d, $00, $20
    .byte $48, $0d, $00, $18
    .byte $48, $0f, $00, $20
&nbsp;
    .byte $50, $10, $00, $28   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $50, $11, $00, $30
    .byte $58, $12, $00, $28
    .byte $58, $13, $00, $30
    .byte $60, $14, $00, $28
    .byte $60, $15, $00, $30
    .byte $68, $16, $00, $28
    .byte $68, $17, $00, $30
&nbsp;
    .byte $70, $18, $00, $38   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $70, $19, $00, $40
    .byte $78, $1a, $00, $38
    .byte $78, $1b, $00, $40
    .byte $80, $1c, $00, $38
    .byte $80, $1d, $00, $40
    .byte $88, $1d, $00, $38
    .byte $88, $1f, $00, $40
&nbsp;
    .byte $90, $20, $00, $48   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $90, $21, $00, $50
    .byte $98, $22, $00, $48
    .byte $98, $23, $00, $50
    .byte $a0, $24, $00, $48
    .byte $a0, $25, $00, $50
    .byte $a8, $26, $00, $48
    .byte $a8, $27, $00, $50
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Úplný zdrojový kód dnešního třetího demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního třetího demonstračního příkladu (v&nbsp;pořadí
již patnáctého příkladu pro NES) je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm</a>.
Pro překlad a slinkování tohoto příkladu je zapotřebí i <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">Makefile</a>
a příkaz <strong>make example15.nes</strong>:</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>; Setup PPU přes makro</i>
<i>; Definice spritu a zobrazení spritů s rozloženým Mariem. Současné</i>
<i>; zobrazení většího množství spritů.</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Taktéž založeno na https://nerdy-nights.nes.science/#main_tutorial-3</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
DMC_FREQ        = $4010
OAM_DMA         = $4014
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<strong>.macro setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro wait_for_frame</strong>
:       bit PPUSTATUS            <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                   <i>; skok, pokud je příznak N nulový</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro clear_ram</strong>
        lda #$00                <i>; vynulování registru A</i>
:       sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne :-                  <i>; po přetečení 0xff -&gt; 0x00 konec smyčky</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro ppu_data_palette_address</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
<strong>.endmacro</strong>
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 2
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
.segment "ZEROPAGE"
.segment "STARTUP"
.segment "CODE"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
<strong>.proc nmi</strong>
        lda #$02          <i>; horní bajt adresy pro přenos + zahájení přenosu</i>
        sta OAM_DMA
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
<strong>.proc irq</strong>
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
<strong>.proc reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0 (NMI)</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
        stx DMC_FREQ            <i>; zákaz DMC IRQ</i>
&nbsp;
        ldx #$40
        stx $4017               <i>; interrupt inhibit bit</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; nastavení barvové palety</i>
        jsr load_palette  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; nastavení spritů</i>
        jsr load_sprites  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; vynulování barvové palety</i>
<strong>.proc clear_palette</strong>
        ppu_data_palette_address
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; nastavení barvové palety</i>
<strong>.proc load_palette</strong>
        ppu_data_palette_address
&nbsp;
        <i>; $3f00-$3f0f - paleta pozadí</i>
        <i>; $3f10-$3f1f - paleta spritů</i>
&nbsp;
        ldx #$00        <i>; vynulovat počitadlo a offset</i>
&nbsp;
:
        lda palette, x  <i>; načíst bajt s offsetem</i>
        sta PPUDATA     <i>; zápis barvy do PPU</i>
        inx             <i>; zvýšit počitadlo/offset</i>
        cpx #32         <i>; limit počtu barev</i>
        bne :-          <i>; opakovat smyčku 32x</i>
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; načtení spritů</i>
<strong>.proc load_sprites</strong>
        ldx #0
:
        lda spritedata,X  <i>; budeme přesouvat data z této oblasti</i>
        sta $0200,X       <i>; uložení do paměti spritů</i>
        inx               <i>; zvýšení hodnoty počitadla</i>
        cpx #128          <i>; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32</i>
                          <i>; * 4 postavičky = 128</i>
        bne :-
&nbsp;
        cli               <i>; vynulování bitu I - povolení přerušení</i>
        lda #%10000000      
        sta PPUCTRL       <i>; při každém VBLANK se vyvolá NMI (důležité!)</i>
&nbsp;
        lda #%00010000    <i>; povolení zobrazení spritů</i>
        sta PPUMASK
&nbsp;
        rts               <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; samotná barvová paleta</i>
palette:
    .byte $22, $29, $1a, $0F, $22, $36, $17, $0F, $22, $30, $21, $0F, $22, $27, $17, $0F  <i>; barvy pozadí</i>
    .byte $22, $16, $27, $18, $22, $1A, $30, $27, $22, $16, $30, $27, $22, $0F, $36, $17  <i>; barvy spritů</i>
&nbsp;
<i>; data pro větší množství spritů</i>
spritedata:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $10
    .byte $18, $02, $00, $08
    .byte $18, $03, $00, $10
    .byte $20, $04, $00, $08
    .byte $20, $05, $00, $10
    .byte $28, $06, $00, $08
    .byte $28, $07, $00, $10
&nbsp;
    .byte $40, $08, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $40, $09, $00, $10
    .byte $48, $0a, $00, $08
    .byte $48, $0b, $00, $10
    .byte $50, $0c, $00, $08
    .byte $50, $0d, $00, $10
    .byte $58, $0d, $00, $08
    .byte $58, $0f, $00, $10
&nbsp;
    .byte $70, $10, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $70, $11, $00, $10
    .byte $78, $12, $00, $08
    .byte $78, $13, $00, $10
    .byte $80, $14, $00, $08
    .byte $80, $15, $00, $10
    .byte $88, $16, $00, $08
    .byte $88, $17, $00, $10
&nbsp;
    .byte $a0, $18, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $a0, $19, $00, $10
    .byte $a8, $1a, $00, $08
    .byte $a8, $1b, $00, $10
    .byte $b0, $1c, $00, $08
    .byte $b0, $1d, $00, $10
    .byte $b8, $1d, $00, $08
    .byte $b8, $1f, $00, $10
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
.segment "CHARS"
    .incbin "mario.chr"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Větší množství spritů na jediném řádku</h2>

<p>Omezení celkového počtu maximálně osmi spritů na obrazovém řádku je velmi
dobře viditelné v&nbsp;případě, že se pokusíme zobrazit pět postaviček vedle
sebe, tudíž deset spritů na řádku. V&nbsp;tomto případě sprity napravo od
prvních osmi jednoduše nejsou zobrazeny:</p>

*** image ***
<p><i>Obrázek 21: Pět postaviček vedle sebe = 10 spritů na řádku. Pravá postava
není viditelná.</i></p>

*** image ***
<p><i>Obrázek 22: Pět postaviček vedle sebe = 10 spritů na řádku. Vertikální
posun jedné postavy ukazuje, jak omezení na osm spritů na řádku reálně
funguje.</i></p>

<p>Data pro pět postaviček zobrazených vedle sebe:</p>

<pre>
<i>; data pro větší množství spritů</i>
<strong>spritedata</strong>:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $10
    .byte $18, $02, $00, $08
    .byte $18, $03, $00, $10
    .byte $20, $04, $00, $08
    .byte $20, $05, $00, $10
    .byte $28, $06, $00, $08
    .byte $28, $07, $00, $10
&nbsp;
    .byte $10, $08, $00, $28   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $09, $00, $30
    .byte $18, $0a, $00, $28
    .byte $18, $0b, $00, $30
    .byte $20, $0c, $00, $28
    .byte $20, $0d, $00, $30
    .byte $28, $0d, $00, $28
    .byte $28, $0f, $00, $30
&nbsp;
    .byte $10, $10, $00, $48   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $11, $00, $50
    .byte $18, $12, $00, $48
    .byte $18, $13, $00, $50
    .byte $20, $14, $00, $48
    .byte $20, $15, $00, $50
    .byte $28, $16, $00, $48
    .byte $28, $17, $00, $50
&nbsp;
    .byte $30, $18, $00, $68   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $30, $19, $00, $70
    .byte $38, $1a, $00, $68
    .byte $38, $1b, $00, $70
    .byte $40, $1c, $00, $68
    .byte $40, $1d, $00, $70
    .byte $48, $1e, $00, $68
    .byte $48, $1f, $00, $70
&nbsp;
    .byte $10, $10, $00, $88   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $11, $00, $90
    .byte $18, $12, $00, $88
    .byte $18, $13, $00, $90
    .byte $20, $14, $00, $88
    .byte $20, $15, $00, $90
    .byte $28, $16, $00, $88
    .byte $28, $17, $00, $90
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního posledního demonstračního příkladu
(v&nbsp;pořadí již šestnáctého příkladu pro NES) je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example16.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example16.asm</a>.
Pro překlad a slinkování tohoto příkladu je zapotřebí i <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">Makefile</a>
a příkaz <strong>make example15.nes</strong>:</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>; Setup PPU přes makro</i>
<i>; Definice spritu a zobrazení spritů s rozloženým Mariem. Současné</i>
<i>; zobrazení většího množství spritů.</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Taktéž založeno na https://nerdy-nights.nes.science/#main_tutorial-3</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
DMC_FREQ        = $4010
OAM_DMA         = $4014
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<strong>.macro setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro wait_for_frame</strong>
:       bit PPUSTATUS            <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                   <i>; skok, pokud je příznak N nulový</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro clear_ram</strong>
        lda #$00                <i>; vynulování registru A</i>
:       sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne :-                  <i>; po přetečení 0xff -&gt; 0x00 konec smyčky</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro ppu_data_palette_address</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
<strong>.endmacro</strong>
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 2
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
.segment "ZEROPAGE"
.segment "STARTUP"
.segment "CODE"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
<strong>.proc nmi</strong>
        lda #$02          <i>; horní bajt adresy pro přenos + zahájení přenosu</i>
        sta OAM_DMA
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
<strong>.proc irq</strong>
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
<strong>.proc reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0 (NMI)</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
        stx DMC_FREQ            <i>; zákaz DMC IRQ</i>
&nbsp;
        ldx #$40
        stx $4017               <i>; interrupt inhibit bit</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; nastavení barvové palety</i>
        jsr load_palette  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; nastavení spritů</i>
        jsr load_sprites  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; vynulování barvové palety</i>
<strong>.proc clear_palette</strong>
        ppu_data_palette_address
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; nastavení barvové palety</i>
<strong>.proc load_palette</strong>
        ppu_data_palette_address
&nbsp;
        <i>; $3f00-$3f0f - paleta pozadí</i>
        <i>; $3f10-$3f1f - paleta spritů</i>
&nbsp;
        ldx #$00        <i>; vynulovat počitadlo a offset</i>
&nbsp;
:
        lda palette, x  <i>; načíst bajt s offsetem</i>
        sta PPUDATA     <i>; zápis barvy do PPU</i>
        inx             <i>; zvýšit počitadlo/offset</i>
        cpx #32         <i>; limit počtu barev</i>
        bne :-          <i>; opakovat smyčku 32x</i>
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; načtení spritů</i>
<strong>.proc load_sprites</strong>
        ldx #0
:
        lda spritedata,X  <i>; budeme přesouvat data z této oblasti</i>
        sta $0200,X       <i>; uložení do paměti spritů</i>
        inx               <i>; zvýšení hodnoty počitadla</i>
        cpx #160          <i>; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32</i>
                          <i>; * 5 postaviček = 160 bajtů</i>
        bne :-
&nbsp;
        cli               <i>; vynulování bitu I - povolení přerušení</i>
        lda #%10000000      
        sta PPUCTRL       <i>; při každém VBLANK se vyvolá NMI (důležité!)</i>
&nbsp;
        lda #%00010000    <i>; povolení zobrazení spritů</i>
        sta PPUMASK
&nbsp;
        rts               <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; samotná barvová paleta</i>
palette:
    .byte $22, $29, $1a, $0F, $22, $36, $17, $0F, $22, $30, $21, $0F, $22, $27, $17, $0F  <i>; barvy pozadí</i>
    .byte $22, $16, $27, $18, $22, $1A, $30, $27, $22, $16, $30, $27, $22, $0F, $36, $17  <i>; barvy spritů</i>
&nbsp;
<i>; data pro větší množství spritů</i>
spritedata:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $10
    .byte $18, $02, $00, $08
    .byte $18, $03, $00, $10
    .byte $20, $04, $00, $08
    .byte $20, $05, $00, $10
    .byte $28, $06, $00, $08
    .byte $28, $07, $00, $10
&nbsp;
    .byte $10, $08, $00, $28   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $09, $00, $30
    .byte $18, $0a, $00, $28
    .byte $18, $0b, $00, $30
    .byte $20, $0c, $00, $28
    .byte $20, $0d, $00, $30
    .byte $28, $0d, $00, $28
    .byte $28, $0f, $00, $30
&nbsp;
    .byte $10, $10, $00, $48   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $11, $00, $50
    .byte $18, $12, $00, $48
    .byte $18, $13, $00, $50
    .byte $20, $14, $00, $48
    .byte $20, $15, $00, $50
    .byte $28, $16, $00, $48
    .byte $28, $17, $00, $50
&nbsp;
    .byte $30, $18, $00, $68   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $30, $19, $00, $70
    .byte $38, $1a, $00, $68
    .byte $38, $1b, $00, $70
    .byte $40, $1c, $00, $68
    .byte $40, $1d, $00, $70
    .byte $48, $1e, $00, $68
    .byte $48, $1f, $00, $70
&nbsp;
    .byte $10, $10, $00, $88   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $11, $00, $90
    .byte $18, $12, $00, $88
    .byte $18, $13, $00, $90
    .byte $20, $14, $00, $88
    .byte $20, $15, $00, $90
    .byte $28, $16, $00, $88
    .byte $28, $17, $00, $90
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
.segment "CHARS"
    .incbin "mario.chr"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad pomocí assembleru <strong>ca65</strong> (jenž je součástí
<strong>cc65</strong>), byly uložen do Git repositáře, který je dostupný na
adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>example01.asm</td><td>zdrojový kód příkladu tvořeného kostrou aplikace pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm</a></td></tr>
<tr><td> 2</td><td>example02.asm</td><td>použití standardní konfigurace linkeru pro konzoli NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example02.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example02.asm</a></td></tr>
<tr><td> 3</td><td>example03.asm</td><td>symbolická jména řídicích registrů PPU</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example03.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example03.asm</a></td></tr>
<tr><td> 4</td><td>example04.asm</td><td>zjednodušený zápis lokálních smyček v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example04.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example04.asm</a></td></tr>
<tr><td> 5</td><td>example05.asm</td><td>zvukový výstup s&nbsp;využitím prvního &bdquo;square&ldquo; kanálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example05.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example05.asm</a></td></tr>
<tr><td> 6</td><td>example06.asm</td><td>použití maker bez parametrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example06.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example06.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>example07.asm</td><td>nastavení barvové palety, zvýšení intenzity zvolené barvové složky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm</a></td></tr>
<tr><td> 8</td><td>example08.asm</td><td>využití operátorů &lt; a &gt;</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm</a></td></tr>
<tr><td> 9</td><td>example09.asm</td><td>vymazání barvové palety realizované makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm</a></td></tr>
<tr><td>10</td><td>example10.asm</td><td>vymazání barvové palety realizované podprogramem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm</a></td></tr>
<tr><td>11</td><td>example11.asm</td><td>nastavení barvové palety pozadí i spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm</a></td></tr>
<tr><td>12</td><td>example12.asm</td><td>refaktoring předchozího příkladu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example12.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example12.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>example13.asm</td><td>zobrazení spritů tvořících Maria</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm</a></td></tr>
<tr><td>14</td><td>example14.asm</td><td>posun spritů, aby se zdůraznila jejich nezávislost</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm</a></td></tr>
<tr><td>15</td><td>example15.asm</td><td>větší množství spritů na obrazovce rozdělených do řádků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm</a></td></tr>
<tr><td>16</td><td>example16.asm</td><td>větší množství spritů na obrazovce na jediném řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example16.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example16.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>link.cfg</td><td>konfigurace segmentů pro linker <strong>ld65</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg</a></td></tr>
<tr><td>18</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile</a></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: pro slinkování a spuštění dnešních dvou
demonstračních příkladů potřebujete i soubor <a
href="https://github.com/ericdigioia/6502-Assembly-NES-Game-Development-Playground/raw/main/mario.chr">mario.chr</a>.
Ten je stažen automaticky po zadání <strong>make example13</strong> nebo
<strong>make example14</strong>.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>NesDev.org<br />
<a href="https://www.nesdev.org/">https://www.nesdev.org/</a>
</li>

<li>The Sprite Attribute Byte<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-17/">https://www.patater.com/nes-asm-tutorials/day-17/</a>
</li>

<li>How to Program an NES game in C<br />
<a href="https://nesdoug.com/">https://nesdoug.com/</a>
</li>

<li>Getting Started Programming in C: Coding a Retro Game with C Part 2<br />
<a href="https://retrogamecoders.com/getting-started-with-c-cc65/">https://retrogamecoders.com/getting-started-with-c-cc65/</a>
</li>

<li>NES game development in 6502 assembly - Part 1<br />
<a href="https://kibrit.tech/en/blog/nes-game-development-part-1">https://kibrit.tech/en/blog/nes-game-development-part-1</a>
</li>

<li>"Game Development in Eight Bits" by Kevin Zurawel<br />
<a href="https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4">https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4</a>
</li>

<li>Game Development for the 8-bit NES: A class by Bob Rost<br />
<a href="http://bobrost.com/nes/">http://bobrost.com/nes/</a>
</li>

<li>Game Development for the 8-bit NES: Lecture Notes<br />
<a href="http://bobrost.com/nes/lectures.php">http://bobrost.com/nes/lectures.php</a>
</li>

<li>NES Graphics Explained<br />
<a href="https://www.youtube.com/watch?v=7Co_8dC2zb8">https://www.youtube.com/watch?v=7Co_8dC2zb8</a>
</li>

<li>NES GAME PROGRAMMING PART 1<br />
<a href="https://rpgmaker.net/tutorials/227/?post=240020">https://rpgmaker.net/tutorials/227/?post=240020</a>
</li>

<li>NES 6502 Programming Tutorial - Part 1: Getting Started<br />
<a href="https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/">https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/</a>
</li>

<li>Minimal NES example using ca65<br />
<a href="https://github.com/bbbradsmith/NES-ca65-example">https://github.com/bbbradsmith/NES-ca65-example</a>
</li>

<li>List of 6502-based Computers and Consoles<br />
<a href="https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/">https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/</a>
</li>

<li>History of video game consoles (second generation): Wikipedia<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)</a>
</li>

<li>6502 - the first RISC &micro;P<br />
<a href="http://ericclever.com/6500/">http://ericclever.com/6500/</a>
</li>

<li>3 Generations of Game Machine Architecture<br />
<a href="http://www.atariarchives.org/dev/CGEXPO99.html">http://www.atariarchives.org/dev/CGEXPO99.html</a>
</li>

<li>bee - The Multi-Console Emulator<br />
<a href="http://www.thebeehive.ws/">http://www.thebeehive.ws/</a>
</li>

<li>Nerdy Nights Mirror<br />
<a href="https://nerdy-nights.nes.science/">https://nerdy-nights.nes.science/</a>
</li>

<li>The Nerdy Nights ca65 Remix<br />
<a href="https://github.com/ddribin/nerdy-nights">https://github.com/ddribin/nerdy-nights</a>
</li>

<li>NES Development Day 1: Creating a ROM<br />
<a href="https://www.moria.us/blog/2018/03/nes-development">https://www.moria.us/blog/2018/03/nes-development</a>
</li>

<li>How to Start Making NES Games<br />
<a href="https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/">https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>cc65 Users Guide<br />
<a href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>
</li>

<li>ld65 Users Guide<br />
<a href="https://cc65.github.io/doc/ld65.html">https://cc65.github.io/doc/ld65.html</a>
</li>

<li>da65 Users Guide<br />
<a href="https://cc65.github.io/doc/da65.html">https://cc65.github.io/doc/da65.html</a>
</li>

<li>Nocash NES Specs<br />
<a href="http://nocash.emubase.de/everynes.htm">http://nocash.emubase.de/everynes.htm</a>
</li>

<li>Nintendo Entertainment System<br />
<a href="http://cs.wikipedia.org/wiki/NES">http://cs.wikipedia.org/wiki/NES</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>NesDev<br />
<a href="http://nesdev.parodius.com/">http://nesdev.parodius.com/</a>
</li>

<li>2A03 technical reference<br />
<a href="http://nesdev.parodius.com/2A03%20technical%20reference.txt">http://nesdev.parodius.com/2A03%20technical%20reference.txt</a>
</li>

<li>NES Dev wiki: 2A03<br />
<a href="http://wiki.nesdev.com/w/index.php/2A03">http://wiki.nesdev.com/w/index.php/2A03</a>
</li>

<li>Ricoh 2A03<br />
<a href="http://en.wikipedia.org/wiki/Ricoh_2A03">http://en.wikipedia.org/wiki/Ricoh_2A03</a>
</li>

<li>2A03 pinouts<br />
<a href="http://nesdev.parodius.com/2A03_pinout.txt">http://nesdev.parodius.com/2A03_pinout.txt</a>
</li>

<li>27c3: Reverse Engineering the MOS 6502 CPU (en)<br />
<a href="https://www.youtube.com/watch?v=fWqBmmPQP40">https://www.youtube.com/watch?v=fWqBmmPQP40</a>
</li>

<li>“Hello, world” from scratch on a 6502 — Part 1<br />
<a href="https://www.youtube.com/watch?v=LnzuMJLZRdU">https://www.youtube.com/watch?v=LnzuMJLZRdU</a>
</li>

<li>A Tour of 6502 Cross-Assemblers<br />
<a href="https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/">https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/</a>
</li>

<li>Nintendo Entertainment System (NES)<br />
<a href="https://8bitworkshop.com/docs/platforms/nes/">https://8bitworkshop.com/docs/platforms/nes/</a>
</li>

<li>Question about NES vectors and PPU<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t4154.xhtml">https://archive.nes.science/nesdev-forums/f10/t4154.xhtml</a>
</li>

<li>How do mapper chips actually work?<br />
<a href="https://archive.nes.science/nesdev-forums/f9/t13125.xhtml">https://archive.nes.science/nesdev-forums/f9/t13125.xhtml</a>
</li>

<li>INES<br />
<a href="https://www.nesdev.org/wiki/INES">https://www.nesdev.org/wiki/INES</a>
</li>

<li>NES Basics and Our First Game<br />
<a href="http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html">http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html</a>
</li>

<li>Where is the reset vector in a .nes file?<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t17413.xhtml">https://archive.nes.science/nesdev-forums/f10/t17413.xhtml</a>
</li>

<li>CPU memory map<br />
<a href="https://www.nesdev.org/wiki/CPU_memory_map">https://www.nesdev.org/wiki/CPU_memory_map</a>
</li>

<li>How to make NES music<br />
<a href="http://blog.snugsound.com/2008/08/how-to-make-nes-music.html">http://blog.snugsound.com/2008/08/how-to-make-nes-music.html</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>MIDINES<br />
<a href="http://www.wayfar.net/0xf00000_overview.php">http://www.wayfar.net/0xf00000_overview.php</a>
</li>

<li>FamiTracker<br />
<a href="http://famitracker.com/">http://famitracker.com/</a>
</li>

<li>nerdTracker II<br />
<a href="http://nesdev.parodius.com/nt2/">http://nesdev.parodius.com/nt2/</a>
</li>

<li>How NES Graphics work<br />
<a href="http://nesdev.parodius.com/nesgfx.txt">http://nesdev.parodius.com/nesgfx.txt</a>
</li>

<li>NES Technical/Emulation/Development FAQ<br />
<a href="http://nesdev.parodius.com/NESTechFAQ.htm">http://nesdev.parodius.com/NESTechFAQ.htm</a>
</li>

<li>Adventures with ca65<br />
<a href="https://atariage.com/forums/topic/312451-adventures-with-ca65/">https://atariage.com/forums/topic/312451-adventures-with-ca65/</a>
</li>

<li>example ca65 startup code<br />
<a href="https://atariage.com/forums/topic/209776-example-ca65-startup-code/">https://atariage.com/forums/topic/209776-example-ca65-startup-code/</a>
</li>

<li>6502 PRIMER: Building your own 6502 computer<br />
<a href="http://wilsonminesco.com/6502primer/">http://wilsonminesco.com/6502primer/</a>
</li>

<li>6502 Instruction Set<br />
<a href="https://www.masswerk.at/6502/6502_instruction_set.html">https://www.masswerk.at/6502/6502_instruction_set.html</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Single-board computer<br />
<a href="https://en.wikipedia.org/wiki/Single-board_computer">https://en.wikipedia.org/wiki/Single-board_computer</a>
</li>

<li>www.6502.org<br />
<a href="http://www.6502­.org/">http://www.6502­.org/</a>
</li>

<li>6502 PRIMER: Building your own 6502 computer &ndash; clock generator<br />
<a href="http://wilsonminesco.com/6502primer/ClkGen.html">http://wilsonminesco.com/6502primer/ClkGen.html</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://www.cpushack.com/CPU/cpu.html">http://www.cpushack.com/CPU/cpu.html</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Osmibitové mikroprocesory a mikrořadiče firmy Motorola (1)<br />
<a href="https://www.root.cz/clanky/osmibitove-mikroprocesory-a-mikroradice-firmy-motorola-1/">https://www.root.cz/clanky/osmibitove-mikroprocesory-a-mikroradice-firmy-motorola-1/</a>
</li>

<li>Mikrořadiče a jejich použití v jednoduchých mikropočítačích<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-pouziti-v-jednoduchych-mikropocitacich/">https://www.root.cz/clanky/mikroradice-a-jejich-pouziti-v-jednoduchych-mikropocitacich/</a>
</li>

<li>Mikrořadiče a jejich aplikace v jednoduchých mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/">https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Comparison of instruction set architectures<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures">https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures</a>
</li>

<li>Day 1 - Beginning NES Assembly<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-1/">https://www.patater.com/nes-asm-tutorials/day-1/</a>
</li>

<li>Day 2 - A Source Code File's Structure<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-2/">https://www.patater.com/nes-asm-tutorials/day-2/</a>
</li>

<li>Assembly Language Misconceptions<br />
<a href="https://www.youtube.com/watch?v=8_0tbkbSGRE">https://www.youtube.com/watch?v=8_0tbkbSGRE</a>
</li>

<li>How Machine Language Works<br />
<a href="https://www.youtube.com/watch?v=HWpi9n2H3kE">https://www.youtube.com/watch?v=HWpi9n2H3kE</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

