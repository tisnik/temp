<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vývoj her pro herní konzoli NES: práce se sprity</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vývoj her pro herní konzoli NES: práce se sprity</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V páté části seriálu o vývoji her a multimediálních dem určených pro slavnou a v mnoha ohledech přelomovou osmibitovou herní konzoli Nintendo Entertainment System (NES) si popíšeme způsob zobrazení spritů na ploše obrazovky.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Sprity na osmibitových domácích mikropočítačích a herních konzolích</a></p>
<p><a href="#k02">*** 2. Osmibitová herní konzole Atari 2600</a></p>
<p><a href="#k03">3. Osmibitové domácí počítače Atari</a></p>
<p><a href="#k04">*** 4. Počítač Commodore C64</a></p>
<p><a href="#k05">*** 5. Herní konzole NES</a></p>
<p><a href="#k06">6. Modifikovatelné informace o spritech</a></p>
<p><a href="#k07">7. Načtení spritů do operační paměti</a></p>
<p><a href="#k08">8. Kód v&nbsp;obsluze nemaskovatelného přerušení</a></p>
<p><a href="#k09">9. Úplný zdrojový kód dnešního prvního demonstračního příkladu</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">12. Úplný zdrojový kód dnešního druhého demonstračního příkladu</a></p>
<p><a href="#k13">*** 13. Větší množství spritů na obrazovce rozdělených do řádků</a></p>
<p><a href="#k14">*** 14. Úplný zdrojový kód dnešního třetího demonstračního příkladu</a></p>
<p><a href="#k15">*** 15. Větší množství spritů na jediném řádku</a></p>
<p><a href="#k16">*** 16. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Sprity na osmibitových domácích mikropočítačích a herních konzolích</h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Osmibitová herní konzole Atari 2600</h2>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Osmibitové domácí počítače Atari</h2>

<p>Prvním čipem typickým pro mnoho elektronických zařízení firmy <i>Atari</i>
byl čip nazvaný <i>GTIA</i>, neboli <i>Graphics Television Interface
Adaptor</i>, popř.&nbsp;též <i>George's Television Interface Adaptor</i> podle
jména svého tvůrce <i>George McLeoda</i>. Tento čip, jenž vznikl rozšířením
možností původního čipu <i>TIA</i> z&nbsp;<i>Atari 2600</i> (viz <a
href="#k02">předchozí kapitolu</a>), zajišťoval několik funkcí: generování
signálů nesoucích informaci o barvách a světlosti (luminanci) pixelů, řízení a
zobrazování spritů, řízení priority spritů a pozadí a taktéž detekce kolizí
mezi sprity navzájem, popř.&nbsp;kolizí mezi sprity a pozadím. Navíc tento čip
dokázal na pozadí zobrazovat bitmapu generovanou spolupracujícím čipem
<i>ANTIC</i>, popř.&nbsp;tuto bitmapu mohl reinterpretovat takovým způsobem, že
vznikly tři nové grafické režimy s&nbsp;horizontálním rozlišením sníženým na 80
pouhých pixelů, protože každý pixel byl představován čtveřicí bitů (jeden
obrazový řádek má při použití standardních režimů ve framebufferu velikost 20
nebo 40 bajtů, v&nbsp;rozšířeném hracím poli pak maximálně 48 bajtů), ovšem
s&nbsp;možností zobrazení až šestnácti barev či šestnácti úrovní jedné
barvy.</p>

<p><i>&bdquo;Good hardware-software tradeoffs make the product economically
viable.&ldquo;</i></p>

<p>Ve skutečnosti byly všechny tři nové grafické režimy podporované čipem
<i>GTIA</i> založené na monochromatickém režimu čipu <i>ANTIC</i> číslo 8,
který umožňoval na jednom řádku standardně zobrazit 320 pixelů (teoreticky bylo
sice možné tyto tři režimy založit například i na textovém režimu, ovšem
v&nbsp;praxi se tento způsob práce s&nbsp;grafikou příliš často nepoužíval).
Čip <i>GTIA</i> vždy čtveřici sousedních pixelů sloučil a výsledné čtyři bity
mu sloužily buď pro výběr barvy z&nbsp;barvové palety (k&nbsp;dispozici bylo
devět barev z&nbsp;možných šestnácti &ndash; jedná se o celkem zbytečné omezení
dané počtem barvových registrů), určení odstínu barvy (úroveň,
tj.&nbsp;světlost byla v&nbsp;tomto případě konstantní),
popř.&nbsp;k&nbsp;určení úrovně barvy, zatímco odstín byl konstantní (tímto
způsobem bylo možné například pracovat s&nbsp;černobílými fotografiemi). Čip
<i>GTIA</i> tedy ponechával značnou část práce, především časování, provádění
takzvaného display-listu atd., přístup do paměti, na obvodu <i>ANTIC</i>, což
se vlastně ani příliš neliší od principu práce čipu <i>TIA</i>.</p>

<img src="http://i.iinfo.cz/images/619/7611-1.png" width="336" height="240" alt="&#160;" />
<p><i>Obrázek XX: Snímek ze známé hry Gyrrus.</i></p>

<p>Čip <i>GTIA</i> byl řízen pomocí 32 registrů, z&nbsp;nichž všechny byly
určeny pro zápis a některé taktéž pro čtení, tj.&nbsp;například pro zjišťování
kolizí atd. Některé z&nbsp;těchto registrů jsou vypsány v&nbsp;následující
tabulce (povšimněte si, kolik registrů je vlastně určeno pro práci se
sprity):</p>

<table>
<tr><th>Registr</th><th>Režim</th><th>Význam</th></tr>
<tr><td>COLPM0</td><td>W</td><td>barva hráče číslo 0 a střely číslo 0</td></tr>
<tr><td>COLPM1</td><td>W</td><td>barva hráče číslo 1 a střely číslo 1</td></tr>
<tr><td>COLPM2</td><td>W</td><td>barva hráče číslo 2 a střely číslo 2</td></tr>
<tr><td>COLPM3</td><td>W</td><td>barva hráče číslo 3 a střely číslo 3</td></tr>
<tr><td>COLPF0</td><td>W</td><td>barva pro herní pole číslo 0</td></tr>
<tr><td>COLPF1</td><td>W</td><td>barva pro herní pole číslo 1</td></tr>
<tr><td>COLPF2</td><td>W</td><td>barva pro herní pole číslo 2</td></tr>
<tr><td>COLPF3</td><td>W</td><td>barva pro herní pole číslo 3</td></tr>
<tr><td>COLBK </td><td>W</td><td>barva pozadí</td></tr>
<tr><td>PRIOR </td><td>W</td><td>řízení priority objektů a taktéž výběr grafického režimu</td></tr>
<tr><td>HPOSP0</td><td>W</td><td>horizontální pozice hráče číslo 0</td></tr>
<tr><td>HPOSP1</td><td>W</td><td>horizontální pozice hráče číslo 1</td></tr>
<tr><td>HPOSP2</td><td>W</td><td>horizontální pozice hráče číslo 2</td></tr>
<tr><td>HPOSP3</td><td>W</td><td>horizontální pozice hráče číslo 3</td></tr>
<tr><td>HPOSM0</td><td>W</td><td>horizontální pozice střely číslo 0</td></tr>
<tr><td>HPOSM1</td><td>W</td><td>horizontální pozice střely číslo 1</td></tr>
<tr><td>HPOSM2</td><td>W</td><td>horizontální pozice střely číslo 2</td></tr>
<tr><td>HPOSM3</td><td>W</td><td>horizontální pozice střely číslo 3</td></tr>
<tr><td>SIZEP0</td><td>W</td><td>horizontální zvětšení hráče číslo 0 (1&times;, 2&times;, 4&times;)</td></tr>
<tr><td>SIZEP1</td><td>W</td><td>horizontální zvětšení hráče číslo 1 (1&times;, 2&times;, 4&times;)</td></tr>
<tr><td>SIZEP2</td><td>W</td><td>horizontální zvětšení hráče číslo 2 (1&times;, 2&times;, 4&times;)</td></tr>
<tr><td>SIZEP3</td><td>W</td><td>horizontální zvětšení hráče číslo 3 (1&times;, 2&times;, 4&times;)</td></tr>
<tr><td>SIZEM </td><td>W</td><td>horizontální zvětšení všech střel (1&times;, 2&times;, 4&times;)</td></tr>
<tr><td>GRAFP0</td><td>W</td><td>bitová data pro hráče číslo 0</td></tr>
<tr><td>GRAFP1</td><td>W</td><td>bitová data pro hráče číslo 1</td></tr>
<tr><td>GRAFP2</td><td>W</td><td>bitová data pro hráče číslo 2</td></tr>
<tr><td>GRAFP3</td><td>W</td><td>bitová data pro hráče číslo 3</td></tr>
<tr><td>GRAFM </td><td>W</td><td>bitová data pro všechny střely</td></tr>
<tr><td>M0PF</td><td>R</td><td>kolizní registr mezi střelou číslo 0 a herním polem</td></tr>
<tr><td>M1PF</td><td>R</td><td>kolizní registr mezi střelou číslo 1 a herním polem</td></tr>
<tr><td>M2PF</td><td>R</td><td>kolizní registr mezi střelou číslo 2 a herním polem</td></tr>
<tr><td>M3PF</td><td>R</td><td>kolizní registr mezi střelou číslo 3 a herním polem</td></tr>
<tr><td>P0PF</td><td>R</td><td>kolizní registr mezi hráčem číslo 0 a herním polem</td></tr>
<tr><td>P1PF</td><td>R</td><td>kolizní registr mezi hráčem číslo 1 a herním polem</td></tr>
<tr><td>P2PF</td><td>R</td><td>kolizní registr mezi hráčem číslo 2 a herním polem</td></tr>
<tr><td>P3PF</td><td>R</td><td>kolizní registr mezi hráčem číslo 3 a herním polem</td></tr>
<tr><td>M0PL</td><td>R</td><td>kolizní registr mezi střelou číslo 0 a hráčem</td></tr>
<tr><td>M1PL</td><td>R</td><td>kolizní registr mezi střelou číslo 1 a hráčem</td></tr>
<tr><td>M2PL</td><td>R</td><td>kolizní registr mezi střelou číslo 2 a hráčem</td></tr>
<tr><td>M3PL</td><td>R</td><td>kolizní registr mezi střelou číslo 3 a hráčem</td></tr>
<tr><td>P0PL</td><td>R</td><td>kolizní registr mezi hráčem číslo 0 a dalším hráčem</td></tr>
<tr><td>P1PL</td><td>R</td><td>kolizní registr mezi hráčem číslo 1 a dalším hráčem</td></tr>
<tr><td>P2PL</td><td>R</td><td>kolizní registr mezi hráčem číslo 2 a dalším hráčem</td></tr>
<tr><td>P3PL</td><td>R</td><td>kolizní registr mezi hráčem číslo 3 a dalším hráčem</td></tr>
</table>

<img src="http://i.iinfo.cz/images/165/7612-1.png" width="336" height="240" alt="&#160;" />
<p><i>Obrázek 12: Další snímek ze hry Gyrrus.</i></p>

<p>Čip <i>GTIA</i> kromě zavedení tří nových grafických režimů umožňoval
vykreslit čtyři sprity s&nbsp;rozlišením maximálně 8&times;256 pixelů
(popř.&nbsp;8&times;128 pixelů) a další čtyři sprity s&nbsp;rozlišením
2&times;256 pixelů, které bylo možno spojit do jednoho (pátého) většího spritu
s&nbsp;rozlišením 8&times;256 pixelů. Sprity široké 8 pixelů se
v&nbsp;literatuře nazývají hráči (<i>players</i>), úzké dvoupixelové sprity se
pak jmenují střely (<i>missiles</i>). Sprity byly jednobarevné, více barev bylo
možno dosáhnout logickými operacemi nad překrývajícími se sprity (počítače
Commodore C64 naproti tomu nabízely i sprity v&nbsp;režimu <i>multicolor</i>).
Každý sprite mohl pomocí jedné instrukce měnit svoji horizontální velikost i
horizontální pozici, přičemž polohy spritů byly navzájem nezávislé
(horizontální pozice se interně zjišťovala pomocí čítače a komparátoru, což
bylo řešení odlišné od technologie použité v&nbsp;čipu <i>TIA</i>, kde byl
namísto čítače využíván <i>linear feedback shift register</i>). Vertikální
pozice spritů se měnila blokovým přesunem bitmapy spritu v&nbsp;operační
paměti. Bylo také možné definovat priority vykreslování spritů vůči sobě
navzájem i vůči pozadí, tj.&nbsp;zda se má sprite vykreslovat nad herním polem
(popř.&nbsp;jiným spritem) či se naopak pod některými barvami skrývat.</p>

<a href="http://i.iinfo.cz/images/194/7614.png"><img src="http://i.iinfo.cz/images/194/7614-prev.png" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek X: Hra Adventure 2 pro počítače Atari 5200. Jedná se o hry
z&nbsp;21. století vytvořenou v&nbsp;domácích podmínkách, která se snaží
zachovat prvky z&nbsp;původní hry Adventure pro Atari 2600 (viz tvar hráče -
čtverečku).</i></p>

<p>Kromě toho, že se dala měnit priorita jednotlivých spritů, bylo také možné
detekovat kolizi spritu s&nbsp;jiným spritem popř.&nbsp;s&nbsp;nějakou barvou
hracího pole. To stejné samozřejmě platí i pro střely, u nichž byla možná
detekce kolize s&nbsp;hráčem či kolize s&nbsp;hracím polem. Při kolizi (do
úvahy se samozřejmě braly pouze viditelné pixely spritu, tj.&nbsp;pixely
nastavené na logickou jedničku) se nastavil příslušný bit ve stavových
registrech, odkud bylo možné kdykoli poté zjistit, zda ke kolizi došlo či
nikoli. Díky této funkcionalitě bylo možné velmi snadno otestovat například
náraz hráče do stěny, zásah hráče střelou atd. Vzhledem k&nbsp;tomu, že sprity
byly pouze jednobarevné, museli se vícebarevní hráči sestavovat z&nbsp;několika
spritů. Omezení počtu spritů naproti tomu nebylo kritické, neboť jeden sprite
mohl být ve skutečnosti použitý pro zobrazení většího množství objektů ve scéně
&ndash; jediným omezením bylo to, že tyto objekty nesměly ležet na stejném
obrazovém řádku (podobné omezení zavádí i NES).</p>

<a href="http://i.iinfo.cz/images/572/7615.png"><img src="http://i.iinfo.cz/images/572/7615-prev.png" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek X: Screenshot ze hry Adventure 2.</i></p>

<p>Pro porovnání shodných vlastností a rozdílů mezi čipy <i>TIA</i> a
<i>GTIA</i> se podívejme na následující dvojici tabulek. V&nbsp;první tabulce
jsou vypsány grafické objekty, s&nbsp;nimiž dokázal pracovat čip <i>TIA</i>
použitý v&nbsp;herní konzoli <i>Atari 2600</i>:</p>

<table>
<tr><th>#</th><th>Typ objektu</th><th>Orig.název</th><th>Objem paměti</th><th>Šířka reprezentovaná jedním bitem</th></tr>
<tr><td>1</td><td>Pozadí</td><td>Background</td><td> 0 bitů</td><td>&times;</td></tr>
<tr><td>2</td><td>Hrací plocha</td><td>Playground</td><td>20 bitů</td><td>4&times; základní šířka pixelu</td></tr>
<tr><td>3</td><td>Míč</td><td>Ball</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td>4</td><td>Hráč 0</td><td>Player 0</td><td> 8 bitů</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td>5</td><td>Střela 0</td><td>Missile 0</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td>6</td><td>Hráč 1</td><td>Player 1</td><td> 8 bitů</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td>7</td><td>Střela 1</td><td>Missile 1</td><td> 1 bit </td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
</table>

<a href="http://i.iinfo.cz/images/262/7616.png"><img src="http://i.iinfo.cz/images/262/7616-prev.png" width="370" height="264" alt="&#160;" /></a>
<p><i>Obrázek X: Další screenshot ze hry Adventure 2.</i></p>

<p>Ve druhé tabulce jsou vypsány grafické objekty, s&nbsp;nimiž dokázal
pracovat čip <i>GTIA</i> použitý v&nbsp;herní konzoli <i>Atari 5200</i> i
v&nbsp;prakticky všech osmibitových domácích počítačích <i>Atari</i> (pokud
tedy nepočítáme prvních zhruba 100 000 počítačů Atari 400 a Atari 800
s&nbsp;čipy <i>CTIA</i>:</p>

<table>
<tr><th>#</th><th>Typ objektu</th><th>Orig.název</th><th>Objem paměti</th><th>Šířka reprezentovaná jedním bitem</th></tr>
<tr><td> 1</td><td>Pozadí</td><td>Background</td><td> 0 bitů</td><td>barva v COLBK, přes celou šířku řádku</td></tr>
<tr><td> 2</td><td>Hrací plocha</td><td>Playground</td><td> x bitů</td><td>generováno v&nbsp;ANTIC</td></tr>
<tr><td> 3</td><td>Hráč 0</td><td>Player 0</td><td> 8 bitů&times;128/256</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td> 4</td><td>Střela 0</td><td>Missile 0</td><td> 2 bity&times;128/256</td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td> 5</td><td>Hráč 1</td><td>Player 1</td><td> 8 bitů&times;128/256</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td> 6</td><td>Střela 1</td><td>Missile 1</td><td> 2 bity&times;128/256</td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td> 7</td><td>Hráč 2</td><td>Player 2</td><td> 8 bitů&times;128/256</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td> 8</td><td>Střela 2</td><td>Missile 2</td><td> 2 bity&times;128/256</td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
<tr><td> 9</td><td>Hráč 3</td><td>Player 3</td><td> 8 bitů&times;128/256</td><td>1&times;, 2&times;, 4&times; šířka pixelu</td></tr>
<tr><td>10</td><td>Střela 3</td><td>Missile 3</td><td> 2 bity&times;128/256</td><td>1&times;, 2&times;, 4&times;, 8&times; šířka pixelu</td></tr>
</table>

<img src="http://i.iinfo.cz/images/569/pc6907.png" width="336" height="240" alt="pc6907" />
<p><i>Obrázek X: Kombinace textových a pseudografických režimů ve hře
International Karate.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Počítač Commodore C64</h2>

<p></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Herní konzole NES</h2>

<p></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Modifikovatelné informace o spritech</h2>

<p>Každý sprite je vykreslen, jak již ostatně velmi dobře víme, jako rastrový
obrázek o rozměrech 8&times;8 pixelů nebo 8&times;16 pixelů. Zatímco samotný
rastrový obrázek je uložen v&nbsp;paměti ROM na cartridge se hrou, musí mít NES
k&nbsp;dispozici ještě informace o pozici spritů na obrazovce (x,y), index
obrázku se spritem (tedy vlastně nepřímý &bdquo;krátký&ldquo; ukazatel do
paměti ROM) a navíc i speciální bajt, jehož bity určují část barvové palety,
zrcadlení spritu atd.</p>

<p>V&nbsp;dnešním prvním demonstračním příkladu vykreslíme na obrazovku
postavičku Maria:</p>

*** image ***
<p><i>Obrázek XX: Postavička Maria vykreslená dnešním prvním demonstračním
příkladem.</i></p>

<p>Tato postavička je složena z&nbsp;osmi spritů, z&nbsp;nichž každý má rozměry
8&times;8 pixelů:</p>

*** image ***
<p><i>Obrázek XX: Postavička Maria složená z&nbsp;osmi spritů.</i></p>

<p>V&nbsp;paměti tedy musíme mít k&nbsp;dispozici data osmi spritů &ndash;
souřadnice [x, y] číslo spritu (tile number) a atributový bajt, a to
v&nbsp;pořadí y, tile number, attributes, x. Celkem se jedná o 32 bajtů
(8&times;4 bajty). V&nbsp;assembleru je deklarace těchto 32 bajtů
následující:</p>

<pre>
<i>; data pro jeden "velký" sprite - Maria</i>
<strong>spritedata</strong>:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $10
    .byte $18, $02, $00, $08
    .byte $18, $03, $00, $10
    .byte $20, $04, $00, $08
    .byte $20, $05, $00, $10
    .byte $28, $06, $00, $08
    .byte $28, $07, $00, $10
</pre>

<p>Samotné bitmapy spritů (tj.&nbsp;jednotlivé dlaždice), jsou uloženy
v&nbsp;souboru <strong>mario.chr</strong>, jenž lze získat následujícím
způsobem (velikost je přesně 8 kB):</p>

<pre>
$ <strong>wget https://github.com/ericdigioia/6502-Assembly-NES-Game-Development-Playground/raw/main/mario.chr</strong>
</pre>

<p>Nesmíme zapomenout přilinkovat tento soubor do výsledného binárního obrazu
cartridge:</p>

<pre>
.segment "CHARS"
    .incbin "mario.chr"
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Načtení spritů do operační paměti</h2>

<p>Výše uvedených 32 bajtů je nutné přenést do operační paměti, konkrétně na
paměťovou stránku číslo 2 (tj.&nbsp;od adresy 0x200). Tím je umožněna například
změna souřadnice spritu, změna jeho indexu (animace) atd.:</p>

<pre>
:
        lda spritedata,X  <i>; budeme přesouvat data z této oblasti</i>
        sta $0200,X       <i>; uložení do paměti spritů</i>
        inx               <i>; zvýšení hodnoty počitadla</i>
        cpx #32           <i>; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32</i>
        bne :-
</pre>

<p>Dále povolíme NMI, tj.&nbsp;nemaskovatelné přerušení, které se automaticky
vyvolává při každém zatemnění snímku (<i>VBLANK</i>):</p>

<pre>
        cli               <i>; vynulování bitu I - povolení přerušení</i>
        lda #%10000000      
        sta PPUCTRL       <i>; při každém VBLANK se vyvolá NMI (důležité!)</i>
</pre>

<p>A konečně povolíme zobrazování spritů nastavením pátého bitu řídicího
registru <strong>PPUMASK</strong> (s&nbsp;nímž jsme se již setkali minule):</p>

<pre>
        lda #%00010000    <i>; povolení zobrazení spritů</i>
        sta PPUMASK
</pre>

<p>Všechny výše popsané operace jsou realizovány v&nbsp;rámci podprogramu
(subrutiny) <strong>load_sprites</strong>, kterou lze zavolat jedenkrát po
resetu herní konzole NES:</p>

<pre>
<i>; načtení spritů</i>
<strong>.proc load_sprites</strong>
:
        lda spritedata,X  <i>; budeme přesouvat data z této oblasti</i>
        sta $0200,X       <i>; uložení do paměti spritů</i>
        inx               <i>; zvýšení hodnoty počitadla</i>
        cpx #32           <i>; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32</i>
        bne :-
&nbsp;
        cli               <i>; vynulování bitu I - povolení přerušení</i>
        lda #%10000000      
        sta PPUCTRL       <i>; při každém VBLANK se vyvolá NMI (důležité!)</i>
&nbsp;
        lda #%00010000    <i>; povolení zobrazení spritů</i>
        sta PPUMASK
&nbsp;
        rts               <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Kód v&nbsp;obsluze nemaskovatelného přerušení</h2>

<p>Pro zobrazení spritů nám zbývá jediná maličkost &ndash; redefinovat
obslužnou rutinu zavolanou při každém vyvolání nemaskovatelného přerušení
(<i>NMI &ndash; Non-Maskable Interrupt</i>). Toto přerušení je zavoláno při
každém vertikálním zatemnění, kdy je možné měnit parametry dalšího snímku bez
&bdquo;blikání&ldquo;. Nám prozatím postačuje pouze spustit DMA, které zajistí
přenos rastru spritů na obrazovku (a to implementační detaily se vlastně
programátor nemusí starat):</p>

<pre>
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>

<strong>.proc nmi</strong>
        lda #$02                <i>; horní bajt adresy pro přenos + zahájení přenosu</i>
        sta OAM_DMA
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Úplný zdrojový kód dnešního prvního demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního prvního demonstračního příkladu (v&nbsp;pořadí
již třináctého příkladu pro NES) je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm</a>.
Pro překlad a slinkování tohoto příkladu je zapotřebí i <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">Makefile</a>
a příkaz <strong>make example15.nes</strong>:</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>; Setup PPU přes makro</i>
<i>; Definice spritu a zobrazení spritů s Mariem</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Taktéž založeno na https://nerdy-nights.nes.science/#main_tutorial-3</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
DMC_FREQ        = $4010
OAM_DMA         = $4014
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<strong>.macro setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro wait_for_frame</strong>
:       bit PPUSTATUS            <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                   <i>; skok, pokud je příznak N nulový</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro clear_ram</strong>
        lda #$00                <i>; vynulování registru A</i>
:       sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne :-                  <i>; po přetečení 0xff -> 0x00 konec smyčky</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro ppu_data_palette_address</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
<strong>.endmacro</strong>
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 2
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
.segment "ZEROPAGE"
.segment "STARTUP"
.segment "CODE"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
<strong>.proc nmi</strong>
        lda #$02                <i>; horní bajt adresy pro přenos + zahájení přenosu</i>
        sta OAM_DMA
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
<strong>.proc irq</strong>
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
<strong>.proc reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0 (NMI)</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
        stx DMC_FREQ            <i>; zákaz DMC IRQ</i>
&nbsp;
        ldx #$40
        stx $4017               <i>; interrupt inhibit bit</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; nastavení barvové palety</i>
        jsr load_palette  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; nastavení spritů</i>
        jsr load_sprites  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; vynulování barvové palety</i>
<strong>.proc clear_palette</strong>
        ppu_data_palette_address
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; nastavení barvové palety</i>
<strong>.proc load_palette</strong>
        ppu_data_palette_address
&nbsp;
        <i>; $3f00-$3f0f - paleta pozadí</i>
        <i>; $3f10-$3f1f - paleta spritů</i>
&nbsp;
        ldx #$00        <i>; vynulovat počitadlo a offset</i>
&nbsp;
:
        lda palette, x  <i>; načíst bajt s offsetem</i>
        sta PPUDATA     <i>; zápis barvy do PPU</i>
        inx             <i>; zvýšit počitadlo/offset</i>
        cpx #32         <i>; limit počtu barev</i>
        bne :-          <i>; opakovat smyčku 32x</i>
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; načtení spritů</i>
<strong>.proc load_sprites</strong>
        ldx #0            <i>; vynulování počitadla</i>
:
        lda spritedata,X  <i>; budeme přesouvat data z této oblasti</i>
        sta $0200,X       <i>; uložení do paměti spritů</i>
        inx               <i>; zvýšení hodnoty počitadla</i>
        cpx #32           <i>; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32</i>
        bne :-
&nbsp;
        cli               <i>; vynulování bitu I - povolení přerušení</i>
        lda #%10000000      
        sta PPUCTRL       <i>; při každém VBLANK se vyvolá NMI (důležité!)</i>
&nbsp;
        lda #%00010000    <i>; povolení zobrazení spritů</i>
        sta PPUMASK
&nbsp;
        rts               <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; samotná barvová paleta</i>
<strong>palette</strong>:
    .byte $22, $29, $1a, $0F, $22, $36, $17, $0F, $22, $30, $21, $0F, $22, $27, $17, $0F  <i>; barvy pozadí</i>
    .byte $22, $16, $27, $18, $22, $1A, $30, $27, $22, $16, $30, $27, $22, $0F, $36, $17  <i>; barvy spritů</i>
&nbsp;
<i>; data pro jeden sprite</i>
<strong>spritedata</strong>:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $10
    .byte $18, $02, $00, $08
    .byte $18, $03, $00, $10
    .byte $20, $04, $00, $08
    .byte $20, $05, $00, $10
    .byte $28, $06, $00, $08
    .byte $28, $07, $00, $10
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
.segment "CHARS"
    .incbin "mario.chr"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Úplný zdrojový kód dnešního druhého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního druhého demonstračního příkladu (v&nbsp;pořadí
již čtrnáctého příkladu pro NES) je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm</a>.
Pro překlad a slinkování tohoto příkladu je zapotřebí i <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">Makefile</a>
a příkaz <strong>make example15.nes</strong>:</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>; Setup PPU přes makro</i>
<i>; Definice spritu a zobrazení spritů s rozloženým Mariem</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Taktéž založeno na https://nerdy-nights.nes.science/#main_tutorial-3</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
 
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
DMC_FREQ        = $4010
OAM_DMA         = $4014
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<strong>.macro setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro wait_for_frame</strong>
:       bit PPUSTATUS            <i>; test obsahu registru PPUSTATUS </i>
        bpl :-                   <i>; skok, pokud je příznak N nulový</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro clear_ram</strong>
        lda #$00                <i>; vynulování registru A</i>
:       sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne :-                  <i>; po přetečení 0xff -> 0x00 konec smyčky</i>
<strong>.endmacro</strong>
&nbsp;
<strong>.macro ppu_data_palette_address</strong>
        lda PPUSTATUS   <i>; reset záchytného registru</i>
        lda #&gt;PALETTE   <i>; nastavení adresy pro barvovou paletu $3f00</i>
        sta PPUADDR
        lda #&lt;PALETTE   <i>; nižší bajt adresy</i>
        sta PPUADDR
<strong>.endmacro</strong>
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 2
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
&nbsp;
.segment "ZEROPAGE"
.segment "STARTUP"
.segment "CODE"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
<strong>.proc nmi</strong>
        lda #$02                <i>; horní bajt adresy pro přenos + zahájení přenosu</i>
        sta OAM_DMA
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
<strong>.proc irq</strong>
        rti                     <i>; návrat z přerušení</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
<strong>.proc reset</strong>
        <i>; nastavení stavu CPU</i>
        setup_cpu
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx PPUCTRL             <i>; nastavení PPUCTRL = 0 (NMI)</i>
        stx PPUMASK             <i>; nastavení PPUMASK = 0</i>
        stx DMC_FREQ            <i>; zákaz DMC IRQ</i>
&nbsp;
        ldx #$40
        stx $4017               <i>; interrupt inhibit bit</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
        wait_for_frame
        wait_for_frame
&nbsp;
        <i>; vymazání obsahu RAM</i>
        clear_ram
&nbsp;
        <i>; čekání na další snímek</i>
        wait_for_frame
&nbsp;
        <i>; nastavení barvové palety</i>
        jsr load_palette  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; nastavení spritů</i>
        jsr load_sprites  <i>; zavolání subrutiny</i>
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; vynulování barvové palety</i>
<strong>.proc clear_palette</strong>
        ppu_data_palette_address
&nbsp;
        ldx #$20        <i>; počitadlo barev v paletě: 16+16</i>
        lda #$00        <i>; vynulování každé barvy</i>
&nbsp;
:
        sta PPUDATA     <i>; zápis barvy</i>
        dex             <i>; snížení hodnoty počitadla</i>
        bne :-
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; nastavení barvové palety</i>
<strong>.proc load_palette</strong>
        ppu_data_palette_address
&nbsp;
        <i>; $3f00-$3f0f - paleta pozadí</i>
        <i>; $3f10-$3f1f - paleta spritů</i>
&nbsp;
        ldx #$00        <i>; vynulovat počitadlo a offset</i>
&nbsp;
:
        lda palette, x  <i>; načíst bajt s offsetem</i>
        sta PPUDATA     <i>; zápis barvy do PPU</i>
        inx             <i>; zvýšit počitadlo/offset</i>
        cpx #32         <i>; limit počtu barev</i>
        bne :-          <i>; opakovat smyčku 32x</i>
&nbsp;
        rts             <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; načtení spritů</i>
<strong>.proc load_sprites</strong>
        ldx #0            <i>; vynulování počitadla</i>
:
        lda spritedata,X  <i>; budeme přesouvat data z této oblasti</i>
        sta $0200,X       <i>; uložení do paměti spritů</i>
        inx               <i>; zvýšení hodnoty počitadla</i>
        cpx #32           <i>; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32</i>
        bne :-
&nbsp;
        cli               <i>; vynulování bitu I - povolení přerušení</i>
        lda #%10000000      
        sta PPUCTRL       <i>; při každém VBLANK se vyvolá NMI (důležité!)</i>
&nbsp;
        lda #%00010000    <i>; povolení zobrazení spritů</i>
        sta PPUMASK
&nbsp;
        rts               <i>; návrat ze subrutiny</i>
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; samotná barvová paleta</i>
<strong>palette</strong>:
    .byte $22, $29, $1a, $0F, $22, $36, $17, $0F, $22, $30, $21, $0F, $22, $27, $17, $0F  <i>; barvy pozadí</i>
    .byte $22, $16, $27, $18, $22, $1A, $30, $27, $22, $16, $30, $27, $22, $0F, $36, $17  <i>; barvy spritů</i>
&nbsp;
<i>; data pro jeden sprite</i>
<strong>spritedata</strong>:
    .byte $10, $00, $00, $08   <i>; y-coord, tile number, attributes, x-coord</i>
    .byte $10, $01, $00, $12
    .byte $1a, $02, $00, $08
    .byte $1a, $03, $00, $12
    .byte $24, $04, $00, $08
    .byte $24, $05, $00, $12
    .byte $2e, $06, $00, $08
    .byte $2e, $07, $00, $12
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
.segment "CHARS"
    .incbin "mario.chr"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Větší počet spritů na obrazovce rozdělených do řádků</h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Úplný zdrojový kód dnešního třetího demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního třetího demonstračního příkladu (v&nbsp;pořadí
již patnáctého příkladu pro NES) je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm</a>.
Pro překlad a slinkování tohoto příkladu je zapotřebí i <a
href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">Makefile</a>
a příkaz <strong>make example15.nes</strong>:</p>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Kostra programu pro herní konzoli NES</i>
<i>; Nastavení barvové palety, zvýšení intenzity barvy</i>
<i>; Setup PPU přes makro</i>
<i>; Definice spritu a zobrazení spritů s rozloženým Mariem. Současné</i>
<i>; zobrazení většího množství spritů.</i>
<i>;</i>
<i>; Založeno na příkladu https://github.com/depp/ctnes/tree/master/nesdev/01</i>
<i>; Taktéž založeno na https://nerdy-nights.nes.science/#main_tutorial-3</i>
<i>; Viz též článek na https://www.moria.us/blog/2018/03/nes-development</i>
<i>; Audio https://raw.githubusercontent.com/iliak/nes/master/doc/apu_ref.txt</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Jména řídicích registrů použitých v kódu</i>
PPUCTRL         = $2000
PPUMASK         = $2001
PPUSTATUS       = $2002
PPUADDR         = $2006
PPUDATA         = $2007
DMC_FREQ        = $4010
OAM_DMA         = $4014
&nbsp;
<i>; Další důležité adresy</i>
PALETTE         = $3f00
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice maker</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<strong>.macro setup_cpu</strong>
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     ; vrchol zásobníku nastaven na 0xff (první stránka)
<strong>.endmacro</strong>
&nbsp;
<strong>.macro wait_for_frame</strong>
:       bit PPUSTATUS            ; test obsahu registru PPUSTATUS 
        bpl :-                   ; skok, pokud je příznak N nulový
<strong>.endmacro</strong>
&nbsp;
<strong>.macro clear_ram</strong>
        lda #$00                ; vynulování registru A
:       sta $000, x             ; vynulování X-tého bajtu v nulté stránce
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             ; vynulování X-tého bajtu v sedmé stránce
        inx                     ; přechod na další bajt
        bne :-                  ; po přetečení 0xff -> 0x00 konec smyčky
<strong>.endmacro</strong>
&nbsp;
<strong>.macro ppu_data_palette_address</strong>
        lda PPUSTATUS   ; reset záchytného registru
        lda #>PALETTE   ; nastavení adresy pro barvovou paletu $3f00
        sta PPUADDR
        lda #<PALETTE   ; nižší bajt adresy
        sta PPUADDR
<strong>.endmacro</strong>
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 2
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "HEADER"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper & $0f) << 4) | (mirroring & 1)
        .byte mapper & $f0
&nbsp;
.segment "ZEROPAGE"
.segment "STARTUP"
.segment "CODE"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
.code
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
<strong>.proc nmi</strong>
        lda #$02          ; horní bajt adresy pro přenos + zahájení přenosu
        sta OAM_DMA
        rti                     ; návrat z přerušení
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
<strong>.proc irq</strong>
        rti                     ; návrat z přerušení
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
<strong>.proc reset</strong>
        ; nastavení stavu CPU
        setup_cpu
&nbsp;
        ; nastavení řídicích registrů
        ldx #$00
        stx PPUCTRL             ; nastavení PPUCTRL = 0 (NMI)
        stx PPUMASK             ; nastavení PPUMASK = 0
        stx DMC_FREQ            ; zákaz DMC IRQ
&nbsp;
        ldx #$40
        stx $4017               ; interrupt inhibit bit
&nbsp;
        ; čekání na vnitřní inicializaci PPU (dva snímky)
        wait_for_frame
        wait_for_frame
&nbsp;
        ; vymazání obsahu RAM
        clear_ram
&nbsp;
        ; čekání na další snímek
        wait_for_frame
&nbsp;
        ; nastavení barvové palety
        jsr load_palette  ; zavolání subrutiny
&nbsp;
        ; nastavení spritů
        jsr load_sprites  ; zavolání subrutiny
&nbsp;
        ; vlastní herní smyčka je prozatím prázdná
game_loop:
        jmp game_loop           ; nekonečná smyčka (později rozšíříme)
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; vynulování barvové palety</i>
<strong>.proc clear_palette</strong>
        ppu_data_palette_address
&nbsp;
        ldx #$20        ; počitadlo barev v paletě: 16+16
        lda #$00        ; vynulování každé barvy
&nbsp;
:
        sta PPUDATA     ; zápis barvy
        dex             ; snížení hodnoty počitadla
        bne :-
&nbsp;
        rts             ; návrat ze subrutiny
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; nastavení barvové palety</i>
<strong>.proc load_palette</strong>
        ppu_data_palette_address
&nbsp;
        ; $3f00-$3f0f - paleta pozadí
        ; $3f10-$3f1f - paleta spritů
&nbsp;
        ldx #$00        ; vynulovat počitadlo a offset
&nbsp;
:
        lda palette, x  ; načíst bajt s offsetem
        sta PPUDATA     ; zápis barvy do PPU
        inx             ; zvýšit počitadlo/offset
        cpx #32         ; limit počtu barev
        bne :-          ; opakovat smyčku 32x
&nbsp;
        rts             ; návrat ze subrutiny
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; načtení spritů</i>
<strong>.proc load_sprites</strong>
        ldx #0
:
        lda spritedata,X  ; budeme přesouvat data z této oblasti
        sta $0200,X       ; uložení do paměti spritů
        inx               ; zvýšení hodnoty počitadla
        cpx #128          ; každý sprite má 4 bajty: y-coord, tile, attributy, y-coord * 8 spritů = 32
	                  ; * 4 postavičky = 128
        bne :-
&nbsp;
        cli               ; vynulování bitu I - povolení přerušení
        lda #%10000000      
        sta PPUCTRL       ; při každém VBLANK se vyvolá NMI (důležité!)
&nbsp;
        lda #%00010000    ; povolení zobrazení spritů
        sta PPUMASK
&nbsp;
        rts               ; návrat ze subrutiny
<strong>.endproc</strong>
&nbsp;
&nbsp;
&nbsp;
<i>; samotná barvová paleta</i>
palette:
    .byte $22, $29, $1a, $0F, $22, $36, $17, $0F, $22, $30, $21, $0F, $22, $27, $17, $0F  ; barvy pozadí
    .byte $22, $16, $27, $18, $22, $1A, $30, $27, $22, $16, $30, $27, $22, $0F, $36, $17  ; barvy spritů
&nbsp;
<i>; data pro jeden sprite</i>
spritedata:
    .byte $10, $00, $00, $08   ; y-coord, tile number, attributes, x-coord
    .byte $10, $01, $00, $10
    .byte $18, $02, $00, $08
    .byte $18, $03, $00, $10
    .byte $20, $04, $00, $08
    .byte $20, $05, $00, $10
    .byte $28, $06, $00, $08
    .byte $28, $07, $00, $10
&nbsp;
    .byte $40, $08, $00, $08   ; y-coord, tile number, attributes, x-coord
    .byte $40, $09, $00, $10
    .byte $48, $0a, $00, $08
    .byte $48, $0b, $00, $10
    .byte $50, $0c, $00, $08
    .byte $50, $0d, $00, $10
    .byte $58, $0d, $00, $08
    .byte $58, $0f, $00, $10
&nbsp;
    .byte $70, $10, $00, $08   ; y-coord, tile number, attributes, x-coord
    .byte $70, $11, $00, $10
    .byte $78, $12, $00, $08
    .byte $78, $13, $00, $10
    .byte $80, $14, $00, $08
    .byte $80, $15, $00, $10
    .byte $88, $16, $00, $08
    .byte $88, $17, $00, $10
&nbsp;
    .byte $a0, $18, $00, $08   ; y-coord, tile number, attributes, x-coord
    .byte $a0, $19, $00, $10
    .byte $a8, $1a, $00, $08
    .byte $a8, $1b, $00, $10
    .byte $b0, $1c, $00, $08
    .byte $b0, $1d, $00, $10
    .byte $b8, $1d, $00, $08
    .byte $b8, $1f, $00, $10
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTORS"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
.segment "CHARS"
    .incbin "mario.chr"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Větší množství spritů na jediném řádku</h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad pomocí assembleru <strong>ca65</strong> (jenž je součástí
<strong>cc65</strong>), byly uložen do Git repositáře, který je dostupný na
adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>example01.asm</td><td>zdrojový kód příkladu tvořeného kostrou aplikace pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm</a></td></tr>
<tr><td> 2</td><td>example02.asm</td><td>použití standardní konfigurace linkeru pro konzoli NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example02.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example02.asm</a></td></tr>
<tr><td> 3</td><td>example03.asm</td><td>symbolická jména řídicích registrů PPU</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example03.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example03.asm</a></td></tr>
<tr><td> 4</td><td>example04.asm</td><td>zjednodušený zápis lokálních smyček v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example04.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example04.asm</a></td></tr>
<tr><td> 5</td><td>example05.asm</td><td>zvukový výstup s&nbsp;využitím prvního &bdquo;square&ldquo; kanálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example05.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example05.asm</a></td></tr>
<tr><td> 6</td><td>example06.asm</td><td>použití maker bez parametrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example06.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example06.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>example07.asm</td><td>nastavení barvové palety, zvýšení intenzity zvolené barvové složky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example07.asm</a></td></tr>
<tr><td> 8</td><td>example08.asm</td><td>využití operátorů &lt; a &gt;</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example08.asm</a></td></tr>
<tr><td> 9</td><td>example09.asm</td><td>vymazání barvové palety realizované makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example09.asm</a></td></tr>
<tr><td>10</td><td>example10.asm</td><td>vymazání barvové palety realizované podprogramem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example10.asm</a></td></tr>
<tr><td>11</td><td>example11.asm</td><td>nastavení barvové palety pozadí i spritů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example11.asm</a></td></tr>
<tr><td>12</td><td>example12.asm</td><td>refaktoring předchozího příkladu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example12.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example12.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>example13.asm</td><td>zobrazení spritů tvořících Maria</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example13.asm</a></td></tr>
<tr><td>14</td><td>example14.asm</td><td>posun spritů, aby se zdůraznila jejich nezávislost</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example14.asm</a></td></tr>
<tr><td>15</td><td>example15.asm</td><td>větší množství spritů na obrazovce rozdělených do řádků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example15.asm</a></td></tr>
<tr><td>16</td><td>example16.asm</td><td>větší množství spritů na obrazovce na jediném řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example16.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example16.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>link.cfg</td><td>konfigurace segmentů pro linker <strong>ld65</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg</a></td></tr>
<tr><td>18</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile</a></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: pro slinkování a spuštění dnešních dvou
demonstračních příkladů potřebujete i soubor <a
href="https://github.com/ericdigioia/6502-Assembly-NES-Game-Development-Playground/raw/main/mario.chr">mario.chr</a>.
Ten je stažen automaticky po zadání <strong>make example13</strong> nebo
<strong>make example14</strong>.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>NesDev.org<br />
<a href="https://www.nesdev.org/">https://www.nesdev.org/</a>
</li>

<li>How to Program an NES game in C<br />
<a href="https://nesdoug.com/">https://nesdoug.com/</a>
</li>

<li>Getting Started Programming in C: Coding a Retro Game with C Part 2<br />
<a href="https://retrogamecoders.com/getting-started-with-c-cc65/">https://retrogamecoders.com/getting-started-with-c-cc65/</a>
</li>

<li>NES game development in 6502 assembly - Part 1<br />
<a href="https://kibrit.tech/en/blog/nes-game-development-part-1">https://kibrit.tech/en/blog/nes-game-development-part-1</a>
</li>

<li>"Game Development in Eight Bits" by Kevin Zurawel<br />
<a href="https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4">https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4</a>
</li>

<li>Game Development for the 8-bit NES: A class by Bob Rost<br />
<a href="http://bobrost.com/nes/">http://bobrost.com/nes/</a>
</li>

<li>Game Development for the 8-bit NES: Lecture Notes<br />
<a href="http://bobrost.com/nes/lectures.php">http://bobrost.com/nes/lectures.php</a>
</li>

<li>NES Graphics Explained<br />
<a href="https://www.youtube.com/watch?v=7Co_8dC2zb8">https://www.youtube.com/watch?v=7Co_8dC2zb8</a>
</li>

<li>NES GAME PROGRAMMING PART 1<br />
<a href="https://rpgmaker.net/tutorials/227/?post=240020">https://rpgmaker.net/tutorials/227/?post=240020</a>
</li>

<li>NES 6502 Programming Tutorial - Part 1: Getting Started<br />
<a href="https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/">https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/</a>
</li>

<li>Minimal NES example using ca65<br />
<a href="https://github.com/bbbradsmith/NES-ca65-example">https://github.com/bbbradsmith/NES-ca65-example</a>
</li>

<li>List of 6502-based Computers and Consoles<br />
<a href="https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/">https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/</a>
</li>

<li>History of video game consoles (second generation): Wikipedia<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)</a>
</li>

<li>6502 - the first RISC &micro;P<br />
<a href="http://ericclever.com/6500/">http://ericclever.com/6500/</a>
</li>

<li>3 Generations of Game Machine Architecture<br />
<a href="http://www.atariarchives.org/dev/CGEXPO99.html">http://www.atariarchives.org/dev/CGEXPO99.html</a>
</li>

<li>bee - The Multi-Console Emulator<br />
<a href="http://www.thebeehive.ws/">http://www.thebeehive.ws/</a>
</li>

<li>Nerdy Nights Mirror<br />
<a href="https://nerdy-nights.nes.science/">https://nerdy-nights.nes.science/</a>
</li>

<li>The Nerdy Nights ca65 Remix<br />
<a href="https://github.com/ddribin/nerdy-nights">https://github.com/ddribin/nerdy-nights</a>
</li>

<li>NES Development Day 1: Creating a ROM<br />
<a href="https://www.moria.us/blog/2018/03/nes-development">https://www.moria.us/blog/2018/03/nes-development</a>
</li>

<li>How to Start Making NES Games<br />
<a href="https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/">https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>cc65 Users Guide<br />
<a href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>
</li>

<li>ld65 Users Guide<br />
<a href="https://cc65.github.io/doc/ld65.html">https://cc65.github.io/doc/ld65.html</a>
</li>

<li>da65 Users Guide<br />
<a href="https://cc65.github.io/doc/da65.html">https://cc65.github.io/doc/da65.html</a>
</li>

<li>Nocash NES Specs<br />
<a href="http://nocash.emubase.de/everynes.htm">http://nocash.emubase.de/everynes.htm</a>
</li>

<li>Nintendo Entertainment System<br />
<a href="http://cs.wikipedia.org/wiki/NES">http://cs.wikipedia.org/wiki/NES</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>NesDev<br />
<a href="http://nesdev.parodius.com/">http://nesdev.parodius.com/</a>
</li>

<li>2A03 technical reference<br />
<a href="http://nesdev.parodius.com/2A03%20technical%20reference.txt">http://nesdev.parodius.com/2A03%20technical%20reference.txt</a>
</li>

<li>NES Dev wiki: 2A03<br />
<a href="http://wiki.nesdev.com/w/index.php/2A03">http://wiki.nesdev.com/w/index.php/2A03</a>
</li>

<li>Ricoh 2A03<br />
<a href="http://en.wikipedia.org/wiki/Ricoh_2A03">http://en.wikipedia.org/wiki/Ricoh_2A03</a>
</li>

<li>2A03 pinouts<br />
<a href="http://nesdev.parodius.com/2A03_pinout.txt">http://nesdev.parodius.com/2A03_pinout.txt</a>
</li>

<li>27c3: Reverse Engineering the MOS 6502 CPU (en)<br />
<a href="https://www.youtube.com/watch?v=fWqBmmPQP40">https://www.youtube.com/watch?v=fWqBmmPQP40</a>
</li>

<li>“Hello, world” from scratch on a 6502 — Part 1<br />
<a href="https://www.youtube.com/watch?v=LnzuMJLZRdU">https://www.youtube.com/watch?v=LnzuMJLZRdU</a>
</li>

<li>A Tour of 6502 Cross-Assemblers<br />
<a href="https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/">https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/</a>
</li>

<li>Nintendo Entertainment System (NES)<br />
<a href="https://8bitworkshop.com/docs/platforms/nes/">https://8bitworkshop.com/docs/platforms/nes/</a>
</li>

<li>Question about NES vectors and PPU<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t4154.xhtml">https://archive.nes.science/nesdev-forums/f10/t4154.xhtml</a>
</li>

<li>How do mapper chips actually work?<br />
<a href="https://archive.nes.science/nesdev-forums/f9/t13125.xhtml">https://archive.nes.science/nesdev-forums/f9/t13125.xhtml</a>
</li>

<li>INES<br />
<a href="https://www.nesdev.org/wiki/INES">https://www.nesdev.org/wiki/INES</a>
</li>

<li>NES Basics and Our First Game<br />
<a href="http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html">http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html</a>
</li>

<li>Where is the reset vector in a .nes file?<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t17413.xhtml">https://archive.nes.science/nesdev-forums/f10/t17413.xhtml</a>
</li>

<li>CPU memory map<br />
<a href="https://www.nesdev.org/wiki/CPU_memory_map">https://www.nesdev.org/wiki/CPU_memory_map</a>
</li>

<li>How to make NES music<br />
<a href="http://blog.snugsound.com/2008/08/how-to-make-nes-music.html">http://blog.snugsound.com/2008/08/how-to-make-nes-music.html</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>MIDINES<br />
<a href="http://www.wayfar.net/0xf00000_overview.php">http://www.wayfar.net/0xf00000_overview.php</a>
</li>

<li>FamiTracker<br />
<a href="http://famitracker.com/">http://famitracker.com/</a>
</li>

<li>nerdTracker II<br />
<a href="http://nesdev.parodius.com/nt2/">http://nesdev.parodius.com/nt2/</a>
</li>

<li>How NES Graphics work<br />
<a href="http://nesdev.parodius.com/nesgfx.txt">http://nesdev.parodius.com/nesgfx.txt</a>
</li>

<li>NES Technical/Emulation/Development FAQ<br />
<a href="http://nesdev.parodius.com/NESTechFAQ.htm">http://nesdev.parodius.com/NESTechFAQ.htm</a>
</li>

<li>Adventures with ca65<br />
<a href="https://atariage.com/forums/topic/312451-adventures-with-ca65/">https://atariage.com/forums/topic/312451-adventures-with-ca65/</a>
</li>

<li>example ca65 startup code<br />
<a href="https://atariage.com/forums/topic/209776-example-ca65-startup-code/">https://atariage.com/forums/topic/209776-example-ca65-startup-code/</a>
</li>

<li>6502 PRIMER: Building your own 6502 computer<br />
<a href="http://wilsonminesco.com/6502primer/">http://wilsonminesco.com/6502primer/</a>
</li>

<li>6502 Instruction Set<br />
<a href="https://www.masswerk.at/6502/6502_instruction_set.html">https://www.masswerk.at/6502/6502_instruction_set.html</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Single-board computer<br />
<a href="https://en.wikipedia.org/wiki/Single-board_computer">https://en.wikipedia.org/wiki/Single-board_computer</a>
</li>

<li>www.6502.org<br />
<a href="http://www.6502­.org/">http://www.6502­.org/</a>
</li>

<li>6502 PRIMER: Building your own 6502 computer &ndash; clock generator<br />
<a href="http://wilsonminesco.com/6502primer/ClkGen.html">http://wilsonminesco.com/6502primer/ClkGen.html</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://www.cpushack.com/CPU/cpu.html">http://www.cpushack.com/CPU/cpu.html</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Osmibitové mikroprocesory a mikrořadiče firmy Motorola (1)<br />
<a href="https://www.root.cz/clanky/osmibitove-mikroprocesory-a-mikroradice-firmy-motorola-1/">https://www.root.cz/clanky/osmibitove-mikroprocesory-a-mikroradice-firmy-motorola-1/</a>
</li>

<li>Mikrořadiče a jejich použití v jednoduchých mikropočítačích<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-pouziti-v-jednoduchych-mikropocitacich/">https://www.root.cz/clanky/mikroradice-a-jejich-pouziti-v-jednoduchych-mikropocitacich/</a>
</li>

<li>Mikrořadiče a jejich aplikace v jednoduchých mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/">https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Comparison of instruction set architectures<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures">https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures</a>
</li>

<li>Day 1 - Beginning NES Assembly<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-1/">https://www.patater.com/nes-asm-tutorials/day-1/</a>
</li>

<li>Day 2 - A Source Code File's Structure<br />
<a href="https://www.patater.com/nes-asm-tutorials/day-2/">https://www.patater.com/nes-asm-tutorials/day-2/</a>
</li>

<li>Assembly Language Misconceptions<br />
<a href="https://www.youtube.com/watch?v=8_0tbkbSGRE">https://www.youtube.com/watch?v=8_0tbkbSGRE</a>
</li>

<li>How Machine Language Works<br />
<a href="https://www.youtube.com/watch?v=HWpi9n2H3kE">https://www.youtube.com/watch?v=HWpi9n2H3kE</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

