<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>

<pre>
SCREEN_ADR      equ $4000
CHAR_ADR        equ $3c00
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
        <i>; Vstupní bod celého programu</i>
<strong>start</strong>:
        call fill_in_screen      <i>; vyplnění obrazovky ASCII tabulkami</i>
<strong>finito</strong>:
        jr finito                <i>; ukončit program nekonečnou smyčkou</i>
&nbsp;
&nbsp;
<strong>fill_in_screen</strong>:
        <i>; Vyplnění obrazovky snadno rozpoznatelným vzorkem - ASCII tabulkami</i>
        <i>;</i>
        <i>; vstupy:</i>
        <i>; žádné</i>
        ld de, SCREEN_ADR         <i>; adresa pro vykreslení prvního bloku znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        ret                       <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>draw_ascii_table_inv</strong>:
        <i>; Vytištění ASCII tabulky inverzně (barva inkoustu je barvou pozadí a naopak)</i>
        <i>;       </i>
        <i>; vstupy:</i>
        <i>; DE - adresa v obrazové paměti pro vykreslení znaku</i>
        ld a, ' '                <i>; kód vykreslovaného znaku</i>
<strong>next_char</strong>:
        push af                  <i>; uschovat akumulátor na zásobník</i>
        call draw_char_inv       <i>; zavolat subrutinu pro vykreslení znaku</i>
        ld a, ' '                <i>; vykreslit za znakem mezeru</i>
        call draw_char_inv       <i>; zavolat subrutinu pro vykreslení znaku</i>
        pop af                   <i>; obnovit akumulátor ze zásobníku</i>
        inc a                    <i>; ASCII kód dalšího znaku</i>
        cp  ' ' + 96             <i>; jsme již na konci ASCII tabulky?</i>
        jr nz, next_char         <i>; ne? potom pokračujeme</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>draw_char_inv</strong>:
        <i>; Vytištění jednoho inverzního znaku na obrazovku</i>
        <i>;</i>
        <i>; vstupy:</i>
        <i>; A - kód znaku pro vykreslení</i>
        <i>; DE - adresa v obrazové paměti pro vykreslení znaku</i>
        <i>;</i>
        <i>; výstupy:</i>
        <i>; DE - adresa v obrazové paměti pro vykreslení dalšího znaku</i>
        <i>;</i>
        <i>; změněné registry:</i>
        <i>; všechny</i>
        ld bc, CHAR_ADR          <i>; adresa, od níž začínají masky znaků</i>
        ld h, c                  <i>; C je nulové, protože CHAR_ADR=0x3c00</i>
        ld l, a                  <i>; kód znaku je nyní ve dvojici HL</i>
&nbsp;
        add  hl, hl              <i>; 2x</i>
        add  hl, hl              <i>; 4x</i>
        add  hl, hl              <i>; 8x</i>
        add  hl, bc              <i>; přičíst bázovou adresu masek znaků</i>
&nbsp;
        ld b, 8                  <i>; počitadlo zapsaných bajtů</i>
        ld c, d
&nbsp;
<strong>loop</strong>:
        ld   a,(hl)              <i>; načtení jednoho bajtu z masky</i>
        cpl                      <i>; negace hodnoty v akumulátoru</i>
        ld   (de),a              <i>; zápis hodnoty na adresu (DE)</i>
        inc  l                   <i>; posun na další bajt masky (nemusíme řešit přetečení do vyššího bajtu)</i>
        inc  d                   <i>; posun na definici dalšího obrazového řádku</i>
        djnz loop                <i>; vnitřní smyčka: blok s osmi zápisy</i>
        inc  e
        ret  z                   <i>; D+=8,E=E+1=0</i>
        ld   d, c
        ret                      <i>; D=D,E=E+1</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
CHAR_ADR        EQU 3C00
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:CD0580     CALL 8005
8003:           label finito
8003:18FE       JR 8003
8005:           label fill_in_screen
8005:110040     LD DE, 4000
8008:CD1580     CALL 8015
800B:CD1580     CALL 8015
800E:CD1580     CALL 8015
8011:CD1580     CALL 8015
8014:C9         RET
8015:           label draw_ascii_table_inv
8015:3E20       LD A, 20
8017:           label next_char
8017:F5         PUSH AF
8018:CD2780     CALL 8027
801B:3E20       LD A, 20
801D:CD2780     CALL 8027
8020:F1         POP AF
8021:3C         INC A
8022:FE80       CP 80
8024:20F1       JR NZ, 8017
8026:C9         RET
8027:           label draw_char_inv
8027:01003C     LD BC, 3C00
802A:61         LD H, C
802B:6F         LD L, A
802C:29         ADD HL, HL
802D:29         ADD HL, HL
802E:29         ADD HL, HL
802F:09         ADD HL, BC
8030:0608       LD B, 08
8032:4A         LD C, D
8033:           label loop
8033:7E         LD A, (HL)
8034:2F         CPL
8035:12         LD (DE), A
8036:2C         INC L
8037:14         INC D
8038:10F9       DJNZ 8033
803A:1C         INC E
803B:C8         RET Z
803C:51         LD D, C
803D:C9         RET
803E:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 803D
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>

<pre>
SCREEN_ADR      equ $4000
CHAR_ADR        equ $3c00
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
        <i>; Vstupní bod celého programu</i>
<strong>start</strong>:
        call fill_in_screen      <i>; vyplnění obrazovky ASCII tabulkami</i>
&nbsp;
        ld b, 0                  <i>; x-ová souřadnice vykreslovaného pixelu</i>
        ld c, 0                  <i>; y-ová souřadnice vykreslovaného pixelu</i>
<strong>loop</strong>:
        call plot                <i>; vykreslení pixelu</i>
        call delay
        inc b                    <i>; posun na další souřadnici</i>
        inc c
        ld  a, b
        cp  192                  <i>; test na ukončení smyčky</i>
        jr nz, loop              <i>; opakovat, dokud není vykreslena celá šikmá "úsečka"</i>
<strong>finito</strong>:
        jr finito                <i>; ukončit program nekonečnou smyčkou</i>
&nbsp;
&nbsp;
<strong>delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; nemění žádné registry</i>
        push bc                  <i>; uschovat hodnoty registrů, které se používají ve smyčkách</i>
        ld   b, 20               <i>; počitadlo vnější zpožďovací smyčky</i>
<strong>outer_loop</strong>:
        ld   c, 0                <i>; počitadlo vnitřní zpožďovací smyčky</i>
<strong>inner_loop</strong>:
        dec  c                   <i>; snížení hodnoty počitadla (v první iteraci 256->255)</i>
        jr   NZ, inner_loop      <i>; opakovat, dokud není dosaženo nuly</i>
        djnz outer_loop          <i>; opakovat vnější smyčku, nyní s počitadlem v B</i>
        pop  bc                  <i>; obnovit hodnoty registrů změněných smyčkami</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>plot</strong>:
        <i>; třetí varianta podprogramu pro vykreslení pixelu</i>
        <i>;</i>
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (v pixelech)</i>
        <i>; C - y-ová souřadnice (v pixelech)</i>
        call calc_pixel_address  <i>; výpočet adresy pixelu</i>
        call calc_pixel_value    <i>; výpočet ukládané hodnoty</i>
        ld d, (hl)               <i>; přečíst původní hodnotu osmice pixelů</i>
        or d                     <i>; použít vypočtenou masku pro nastavení jediného bitu</i>
        ld (hl), a               <i>; zápis hodnoty pixelu (ostatních sedm pixelů se nezmění)</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>calc_pixel_value</strong>:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (v pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; A - hodnota pixelu</i>
        push bc                  <i>; zapamatovat si hodnotu v registru B</i>
        ld   a, b                <i>; A: X7 X6 X5 X4 X3 X2 X1 X0 </i>
        and  %00000111           <i>; A: 0  0  0  0  0  X2 X1 X0</i>
        ld b, a                  <i>; počitadlo smyčky (neměníme příznaky)</i>
        ld a, %10000000          <i>; výchozí maska (neměníme příznaky)</i>
        jr z, end_calc           <i>; pokud je nyní souřadnice nulová, zapíšeme výchozí masku + konec</i>
&nbsp;
<strong>next_shift</strong>:
        srl a                    <i>; posunout masku doprava</i>
        djnz next_shift          <i>; 1x až 7x</i>
<strong>end_calc</strong>:
        pop bc                   <i>; obnovit hodnotu v registru B</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>calc_pixel_address</strong>:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (v pixelech)</i>
        <i>; C - y-ová souřadnice (v pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; HL - adresa pro zápis pixelu</i>
        <i>;</i>
        <i>; pozměněné registry:</i>
        <i>; A</i>
        <i>;</i>
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y7 Y6 Y2 Y1 Y0 | Y5 Y4 Y3 X4 X3 X2 X1 X0</i>
        ld  a, c              <i>; všech osm bitů Y-ové souřadnice</i>
        and %00000111         <i>; pouze spodní tři bity y-ové souřadnice (Y2 Y1 Y0)</i>
                              <i>; A: 0 0 0 0 0 Y2 Y1 Y0</i>
        or  %01000000         <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  h, a              <i>; část horního bajtu adresy je vypočtena</i>
                              <i>; H: 0 1 0 0 0 Y2 Y1 Y0</i>
&nbsp;
        ld  a, c              <i>; všech osm bitů Y-ové souřadnice</i>
        rra
        rra
        rra                   <i>; rotace doprava -> Y1 Y0 xx Y7 Y6 Y5 Y4 Y3</i>
        and %00011000         <i>; zamaskovat</i>
                              <i>; A: 0  0  0 Y7 Y6  0  0  0</i>
        or  h                 <i>; a přidat k vypočtenému mezivýsledku</i>
        ld  h, a              <i>; H: 0  1  0 Y7 Y6 Y2 Y1 Y0</i>
&nbsp;
        ld  a, c              <i>; všech osm bitů Y-ové souřadnice</i>
        rla
        rla                   <i>; A:  Y5 Y4 Y3 Y2 Y1 Y0 xx xx</i>
        and %11100000         <i>; A:  Y5 Y4 Y3 0  0  0  0  0</i>
        ld  l, a              <i>; část spodního bajtu adresy je vypočtena</i>
&nbsp;
        ld  a, b              <i>; všech osm bitů X-ové souřadnice</i>
        rra
        rra
        rra                   <i>; rotace doprava -> 0  0  0  X7 X6 X5 X4</i>
        and %00011111         <i>; A: 0  0  0  X7 X6 X5 X4 X3</i>
        or  l                 <i>; A: Y5 Y3 Y3 X7 X6 X5 X4 X3</i>
        ld  l, a              <i>; spodní bajt adresy je vypočten</i>
&nbsp;
        ret                   <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>fill_in_screen</strong>:
        <i>; Vyplnění obrazovky snadno rozpoznatelným vzorkem - ASCII tabulkami</i>
        <i>;</i>
        <i>; vstupy:</i>
        <i>; žádné</i>
        ld de, SCREEN_ADR         <i>; adresa pro vykreslení prvního bloku znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        ret                       <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>draw_ascii_table_inv</strong>:
        <i>; Vytištění ASCII tabulky inverzně (barva inkoustu je barvou pozadí a naopak)</i>
        <i>;       </i>
        <i>; vstupy:</i>
        <i>; DE - adresa v obrazové paměti pro vykreslení znaku</i>
        ld a, ' '                <i>; kód vykreslovaného znaku</i>
<strong>next_char</strong>:
        push af                  <i>; uschovat akumulátor na zásobník</i>
        call draw_char_inv       <i>; zavolat subrutinu pro vykreslení znaku</i>
        ld a, ' '                <i>; vykreslit za znakem mezeru</i>
        call draw_char_inv       <i>; zavolat subrutinu pro vykreslení znaku</i>
        pop af                   <i>; obnovit akumulátor ze zásobníku</i>
        inc a                    <i>; ASCII kód dalšího znaku</i>
        cp  ' ' + 96             <i>; jsme již na konci ASCII tabulky?</i>
        jr nz, next_char         <i>; ne? potom pokračujeme</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>draw_char_inv</strong>:
        <i>; Vytištění jednoho inverzního znaku na obrazovku</i>
        <i>;</i>
        <i>; vstupy:</i>
        <i>; A - kód znaku pro vykreslení</i>
        <i>; DE - adresa v obrazové paměti pro vykreslení znaku</i>
        <i>;</i>
        <i>; výstupy:</i>
        <i>; DE - adresa v obrazové paměti pro vykreslení dalšího znaku</i>
        <i>;</i>
        <i>; změněné registry:</i>
        <i>; všechny</i>
        ld bc, CHAR_ADR          <i>; adresa, od níž začínají masky znaků</i>
        ld h, c                  <i>; C je nulové, protože CHAR_ADR=0x3c00</i>
        ld l, a                  <i>; kód znaku je nyní ve dvojici HL</i>
&nbsp;
        add  hl, hl              <i>; 2x</i>
        add  hl, hl              <i>; 4x</i>
        add  hl, hl              <i>; 8x</i>
        add  hl, bc              <i>; přičíst bázovou adresu masek znaků</i>
&nbsp;
        ld b, 8                  <i>; počitadlo zapsaných bajtů</i>
        ld c, d
&nbsp;
loop2:
        ld   a,(hl)              <i>; načtení jednoho bajtu z masky</i>
        cpl                      <i>; negace hodnoty v akumulátoru</i>
        ld   (de),a              <i>; zápis hodnoty na adresu (DE)</i>
        inc  l                   <i>; posun na další bajt masky (nemusíme řešit přetečení do vyššího bajtu)</i>
        inc  d                   <i>; posun na definici dalšího obrazového řádku</i>
        djnz loop2               <i>; vnitřní smyčka: blok s osmi zápisy</i>
        inc  e
        ret  z                   <i>; D+=8,E=E+1=0</i>
        ld   d, c
        ret                      <i>; D=D,E=E+1</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
SCREEN_ADR      EQU 4000
CHAR_ADR        EQU 3C00
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:CD5880     CALL 8058
8003:0600       LD B, 00
8005:0E00       LD C, 00
8007:           label loop
8007:CD2280     CALL 8022
800A:CD1680     CALL 8016
800D:04         INC B
800E:0C         INC C
800F:78         LD A, B
8010:FEC0       CP C0
8012:20F3       JR NZ, 8007
8014:           label finito
8014:18FE       JR 8014
8016:           label delay
8016:C5         PUSH BC
8017:0614       LD B, 14
8019:           label outer_loop
8019:0E00       LD C, 00
801B:           label inner_loop
801B:0D         DEC C
801C:20FD       JR NZ, 801B
801E:10F9       DJNZ 8019
8020:C1         POP BC
8021:C9         RET
8022:           label plot
8022:CD3B80     CALL 803B
8025:CD2C80     CALL 802C
8028:56         LD D, (HL)
8029:B2         OR D
802A:77         LD (HL), A
802B:C9         RET
802C:           label calc_pixel_value
802C:C5         PUSH BC
802D:78         LD A, B
802E:E607       AND 07
8030:47         LD B, A
8031:3E80       LD A, 80
8033:2804       JR Z, 8039
8035:           label next_shift
8035:CB3F       SRL A
8037:10FC       DJNZ 8035
8039:           label end_calc
8039:C1         POP BC
803A:C9         RET
803B:           label calc_pixel_address
803B:79         LD A, C
803C:E607       AND 07
803E:F640       OR 40
8040:67         LD H, A
8041:79         LD A, C
8042:1F         RRA
8043:1F         RRA
8044:1F         RRA
8045:E618       AND 18
8047:B4         OR H
8048:67         LD H, A
8049:79         LD A, C
804A:17         RLA
804B:17         RLA
804C:E6E0       AND E0
804E:6F         LD L, A
804F:78         LD A, B
8050:1F         RRA
8051:1F         RRA
8052:1F         RRA
8053:E61F       AND 1F
8055:B5         OR L
8056:6F         LD L, A
8057:C9         RET
8058:           label fill_in_screen
8058:110040     LD DE, 4000
805B:CD6880     CALL 8068
805E:CD6880     CALL 8068
8061:CD6880     CALL 8068
8064:CD6880     CALL 8068
8067:C9         RET
8068:           label draw_ascii_table_inv
8068:3E20       LD A, 20
806A:           label next_char
806A:F5         PUSH AF
806B:CD7A80     CALL 807A
806E:3E20       LD A, 20
8070:CD7A80     CALL 807A
8073:F1         POP AF
8074:3C         INC A
8075:FE80       CP 80
8077:20F1       JR NZ, 806A
8079:C9         RET
807A:           label draw_char_inv
807A:01003C     LD BC, 3C00
807D:61         LD H, C
807E:6F         LD L, A
807F:29         ADD HL, HL
8080:29         ADD HL, HL
8081:29         ADD HL, HL
8082:09         ADD HL, BC
8083:0608       LD B, 08
8085:4A         LD C, D
8086:           label loop2
8086:7E         LD A, (HL)
8087:2F         CPL
8088:12         LD (DE), A
8089:2C         INC L
808A:14         INC D
808B:10F9       DJNZ 8086
808D:1C         INC E
808E:C8         RET Z
808F:51         LD D, C
8090:C9         RET
8091:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8090
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>

<pre>
SCREEN_ADR      equ $4000
CHAR_ADR        equ $3c00
ENTRY_POINT     equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
        <i>; Vstupní bod celého programu</i>
<strong>start</strong>:
        call fill_in_screen      <i>; vyplnění obrazovky ASCII tabulkami</i>
&nbsp;
        ld b, 0                  <i>; x-ová souřadnice vykreslovaného pixelu</i>
        ld c, 0                  <i>; y-ová souřadnice vykreslovaného pixelu</i>
<strong>loop</strong>:
        call plot_inverse        <i>; vykreslení pixelu barvou papíru</i>
        call delay
        inc b                    <i>; posun na další souřadnici</i>
        inc c
        ld  a, b
        cp  192                  <i>; test na ukončení smyčky</i>
        jr nz, loop              <i>; opakovat, dokud není vykreslena celá šikmá "úsečka"</i>
<strong>finito</strong>:
        jr finito                <i>; ukončit program nekonečnou smyčkou</i>
&nbsp;
&nbsp;
<strong>delay</strong>:
        <i>; zpožďovací rutina</i>
        <i>; nemění žádné registry</i>
        push bc                  <i>; uschovat hodnoty registrů, které se používají ve smyčkách</i>
        ld   b, 20               <i>; počitadlo vnější zpožďovací smyčky</i>
<strong>outer_loop</strong>:
        ld   c, 0                <i>; počitadlo vnitřní zpožďovací smyčky</i>
<strong>inner_loop</strong>:
        dec  c                   <i>; snížení hodnoty počitadla (v první iteraci 256->255)</i>
        jr   NZ, inner_loop      <i>; opakovat, dokud není dosaženo nuly</i>
        djnz outer_loop          <i>; opakovat vnější smyčku, nyní s počitadlem v B</i>
        pop  bc                  <i>; obnovit hodnoty registrů změněných smyčkami</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>plot_inverse</strong>:
        <i>; varianta podprogramu pro vykreslení pixelu barvou papíru</i>
        <i>;</i>
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (v pixelech)</i>
        <i>; C - y-ová souřadnice (v pixelech)</i>
        call calc_pixel_address  <i>; výpočet adresy pixelu</i>
        call calc_pixel_value    <i>; výpočet ukládané hodnoty</i>
        ld d, (hl)               <i>; přečíst původní hodnotu osmice pixelů</i>
        cpl                      <i>; inverze masky</i>
        and d                    <i>; použít vypočtenou masku pro vynulování jediného bitu</i>
        ld (hl), a               <i>; zápis hodnoty pixelu (ostatních sedm pixelů se nezmění)</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>calc_pixel_value</strong>:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (v pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; A - hodnota pixelu</i>
        push bc                  <i>; zapamatovat si hodnotu v registru B</i>
        ld   a, b                <i>; A: X7 X6 X5 X4 X3 X2 X1 X0 </i>
        and  %00000111           <i>; A: 0  0  0  0  0  X2 X1 X0</i>
        ld b, a                  <i>; počitadlo smyčky (neměníme příznaky)</i>
        ld a, %10000000          <i>; výchozí maska (neměníme příznaky)</i>
        jr z, end_calc           <i>; pokud je nyní souřadnice nulová, zapíšeme výchozí masku + konec</i>
&nbsp;
<strong>next_shift</strong>:
        srl a                    <i>; posunout masku doprava</i>
        djnz next_shift          <i>; 1x až 7x</i>
<strong>end_calc</strong>:
        pop bc                   <i>; obnovit hodnotu v registru B</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>calc_pixel_address</strong>:
        <i>; parametry:</i>
        <i>; B - x-ová souřadnice (v pixelech)</i>
        <i>; C - y-ová souřadnice (v pixelech)</i>
        <i>;</i>
        <i>; návratové hodnoty:</i>
        <i>; HL - adresa pro zápis pixelu</i>
        <i>;</i>
        <i>; pozměněné registry:</i>
        <i>; A</i>
        <i>;</i>
        <i>; vzor adresy:</i>
        <i>; 0 1 0 Y7 Y6 Y2 Y1 Y0 | Y5 Y4 Y3 X4 X3 X2 X1 X0</i>
        ld  a, c              <i>; všech osm bitů Y-ové souřadnice</i>
        and %00000111         <i>; pouze spodní tři bity y-ové souřadnice (Y2 Y1 Y0)</i>
                              <i>; A: 0 0 0 0 0 Y2 Y1 Y0</i>
        or  %01000000         <i>; "posun" do obrazové paměti (na 0x4000)</i>
        ld  h, a              <i>; část horního bajtu adresy je vypočtena</i>
                              <i>; H: 0 1 0 0 0 Y2 Y1 Y0</i>
&nbsp;
        ld  a, c              <i>; všech osm bitů Y-ové souřadnice</i>
        rra
        rra
        rra                   <i>; rotace doprava -> Y1 Y0 xx Y7 Y6 Y5 Y4 Y3</i>
        and %00011000         <i>; zamaskovat</i>
                              <i>; A: 0  0  0 Y7 Y6  0  0  0</i>
        or  h                 <i>; a přidat k vypočtenému mezivýsledku</i>
        ld  h, a              <i>; H: 0  1  0 Y7 Y6 Y2 Y1 Y0</i>
&nbsp;
        ld  a, c              <i>; všech osm bitů Y-ové souřadnice</i>
        rla
        rla                   <i>; A:  Y5 Y4 Y3 Y2 Y1 Y0 xx xx</i>
        and %11100000         <i>; A:  Y5 Y4 Y3 0  0  0  0  0</i>
        ld  l, a              <i>; část spodního bajtu adresy je vypočtena</i>
&nbsp;
        ld  a, b              <i>; všech osm bitů X-ové souřadnice</i>
        rra
        rra
        rra                   <i>; rotace doprava -> 0  0  0  X7 X6 X5 X4</i>
        and %00011111         <i>; A: 0  0  0  X7 X6 X5 X4 X3</i>
        or  l                 <i>; A: Y5 Y3 Y3 X7 X6 X5 X4 X3</i>
        ld  l, a              <i>; spodní bajt adresy je vypočten</i>
&nbsp;
        ret                   <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>fill_in_screen</strong>:
        <i>; Vyplnění obrazovky snadno rozpoznatelným vzorkem - ASCII tabulkami</i>
        <i>;</i>
        <i>; vstupy:</i>
        <i>; žádné</i>
        ld de, SCREEN_ADR         <i>; adresa pro vykreslení prvního bloku znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        call draw_ascii_table_inv <i>; vykreslení 96 znaků</i>
        ret                       <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>draw_ascii_table_inv</strong>:
        <i>; Vytištění ASCII tabulky inverzně (barva inkoustu je barvou pozadí a naopak)</i>
        <i>;       </i>
        <i>; vstupy:</i>
        <i>; DE - adresa v obrazové paměti pro vykreslení znaku</i>
        ld a, ' '                <i>; kód vykreslovaného znaku</i>
<strong>next_char</strong>:
        push af                  <i>; uschovat akumulátor na zásobník</i>
        call draw_char_inv       <i>; zavolat subrutinu pro vykreslení znaku</i>
        ld a, ' '                <i>; vykreslit za znakem mezeru</i>
        call draw_char_inv       <i>; zavolat subrutinu pro vykreslení znaku</i>
        pop af                   <i>; obnovit akumulátor ze zásobníku</i>
        inc a                    <i>; ASCII kód dalšího znaku</i>
        cp  ' ' + 96             <i>; jsme již na konci ASCII tabulky?</i>
        jr nz, next_char         <i>; ne? potom pokračujeme</i>
        ret                      <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
<strong>draw_char_inv</strong>:
        <i>; Vytištění jednoho inverzního znaku na obrazovku</i>
        <i>;</i>
        <i>; vstupy:</i>
        <i>; A - kód znaku pro vykreslení</i>
        <i>; DE - adresa v obrazové paměti pro vykreslení znaku</i>
        <i>;</i>
        <i>; výstupy:</i>
        <i>; DE - adresa v obrazové paměti pro vykreslení dalšího znaku</i>
        <i>;</i>
        <i>; změněné registry:</i>
        <i>; všechny</i>
        ld bc, CHAR_ADR          <i>; adresa, od níž začínají masky znaků</i>
        ld h, c                  <i>; C je nulové, protože CHAR_ADR=0x3c00</i>
        ld l, a                  <i>; kód znaku je nyní ve dvojici HL</i>
&nbsp;
        add  hl, hl              <i>; 2x</i>
        add  hl, hl              <i>; 4x</i>
        add  hl, hl              <i>; 8x</i>
        add  hl, bc              <i>; přičíst bázovou adresu masek znaků</i>
&nbsp;
        ld b, 8                  <i>; počitadlo zapsaných bajtů</i>
        ld c, d
&nbsp;
loop2:
        ld   a,(hl)              <i>; načtení jednoho bajtu z masky</i>
        cpl                      <i>; negace hodnoty v akumulátoru</i>
        ld   (de),a              <i>; zápis hodnoty na adresu (DE)</i>
        inc  l                   <i>; posun na další bajt masky (nemusíme řešit přetečení do vyššího bajtu)</i>
        inc  d                   <i>; posun na definici dalšího obrazového řádku</i>
        djnz loop2               <i>; vnitřní smyčka: blok s osmi zápisy</i>
        inc  e
        ret  z                   <i>; D+=8,E=E+1=0</i>
        ld   d, c
        ret                      <i>; D=D,E=E+1</i>
&nbsp;
end ENTRY_POINT
</pre>

<p></p>

<pre>
SCREEN_ADR      EQU 4000
CHAR_ADR        EQU 3C00
ENTRY_POINT     EQU 8000
                ORG 8000
8000:           label start
8000:CD5980     CALL 8059
8003:0600       LD B, 00
8005:0E00       LD C, 00
8007:           label loop
8007:CD2280     CALL 8022
800A:CD1680     CALL 8016
800D:04         INC B
800E:0C         INC C
800F:78         LD A, B
8010:FEC0       CP C0
8012:20F3       JR NZ, 8007
8014:           label finito
8014:18FE       JR 8014
8016:           label delay
8016:C5         PUSH BC
8017:0614       LD B, 14
8019:           label outer_loop
8019:0E00       LD C, 00
801B:           label inner_loop
801B:0D         DEC C
801C:20FD       JR NZ, 801B
801E:10F9       DJNZ 8019
8020:C1         POP BC
8021:C9         RET
8022:           label plot_inverse
8022:CD3C80     CALL 803C
8025:CD2D80     CALL 802D
8028:56         LD D, (HL)
8029:2F         CPL
802A:A2         AND D
802B:77         LD (HL), A
802C:C9         RET
802D:           label calc_pixel_value
802D:C5         PUSH BC
802E:78         LD A, B
802F:E607       AND 07
8031:47         LD B, A
8032:3E80       LD A, 80
8034:2804       JR Z, 803A
8036:           label next_shift
8036:CB3F       SRL A
8038:10FC       DJNZ 8036
803A:           label end_calc
803A:C1         POP BC
803B:C9         RET
803C:           label calc_pixel_address
803C:79         LD A, C
803D:E607       AND 07
803F:F640       OR 40
8041:67         LD H, A
8042:79         LD A, C
8043:1F         RRA
8044:1F         RRA
8045:1F         RRA
8046:E618       AND 18
8048:B4         OR H
8049:67         LD H, A
804A:79         LD A, C
804B:17         RLA
804C:17         RLA
804D:E6E0       AND E0
804F:6F         LD L, A
8050:78         LD A, B
8051:1F         RRA
8052:1F         RRA
8053:1F         RRA
8054:E61F       AND 1F
8056:B5         OR L
8057:6F         LD L, A
8058:C9         RET
8059:           label fill_in_screen
8059:110040     LD DE, 4000
805C:CD6980     CALL 8069
805F:CD6980     CALL 8069
8062:CD6980     CALL 8069
8065:CD6980     CALL 8069
8068:C9         RET
8069:           label draw_ascii_table_inv
8069:3E20       LD A, 20
806B:           label next_char
806B:F5         PUSH AF
806C:CD7B80     CALL 807B
806F:3E20       LD A, 20
8071:CD7B80     CALL 807B
8074:F1         POP AF
8075:3C         INC A
8076:FE80       CP 80
8078:20F1       JR NZ, 806B
807A:C9         RET
807B:           label draw_char_inv
807B:01003C     LD BC, 3C00
807E:61         LD H, C
807F:6F         LD L, A
8080:29         ADD HL, HL
8081:29         ADD HL, HL
8082:29         ADD HL, HL
8083:09         ADD HL, BC
8084:0608       LD B, 08
8086:4A         LD C, D
8087:           label loop2
8087:7E         LD A, (HL)
8088:2F         CPL
8089:12         LD (DE), A
808A:2C         INC L
808B:14         INC D
808C:10F9       DJNZ 8087
808E:1C         INC E
808F:C8         RET Z
8090:51         LD D, C
8091:C9         RET
8092:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8091
</pre>


<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
prozatím popsané demonstrační příklady určené pro překlad a spuštění na
osmibitovém domácím mikropočítači ZX Spectrum (libovolný model či jeho klon),
které jsou psány v&nbsp;assembleru mikroprocesoru Zilog Z80. Pro překlad těchto
demonstračních příkladů je možné použít například assembler <i>Pasmo</i> (viz
též <a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">úvodní
článek</a>):</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01-color-attribute.asm</td><td>modifikace jednoho barvového atributu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm</a></td></tr>
<tr><td> 2</td><td>02-blinking-attribute.asm</td><td>barvový atribut s&nbsp;nastavením bitů pro blikání a vyšší intenzitu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm</a></td></tr>
<tr><td> 3</td><td>03-symbolic-names.asm</td><td>symbolická jména v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm</a></td></tr>
<tr><td> 4</td><td>04-operators.asm</td><td>operátory a operace se symbolickými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm</a></td></tr>
<tr><td> 5</td><td>05-better-symbols.asm</td><td>tradičnější symbolická jména</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm</a></td></tr>
<tr><td> 6</td><td>06-tapbas-v1.asm</td><td>vygenerování BASICovského loaderu (neúplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm</a></td></tr>
<tr><td> 7</td><td>07-tapbas-v2.asm</td><td>vygenerování BASICovského loaderu (úplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm</a></td></tr>
<tr><td> 8</td><td>08-loop.asm</td><td>jednoduchá počítaná programová smyčka: naivní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm</a></td></tr>
<tr><td> 9</td><td>09-loop.asm</td><td>programová smyčka: zkrácení kódu pro vynulování použitých pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm</a></td></tr>
<tr><td>10</td><td>10-loop.asm</td><td>programová smyčka: optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm</a></td></tr>
<tr><td>11</td><td>11-loop.asm</td><td>programová smyčka: optimalizace využití pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm</a></td></tr>
<tr><td>12</td><td>12-loop.asm</td><td>programová smyčka: použití pracovního registru IX</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm</a></td></tr>
<tr><td>13</td><td>13-loop.asm</td><td>programová smyčka: použití pracovního registru IY</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm</a></td></tr>
<tr><td>14</td><td>14-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm</a></td></tr>
<tr><td>15</td><td>15-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm</a></td></tr>
<tr><td>16</td><td>16-loop.asm</td><td>použití relativního skoku a nikoli skoku absolutního</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm</a></td></tr>
<tr><td>17</td><td>17-loop.asm</td><td>programová smyčka: <strong>inc l</strong> namísto <strong>inc hl</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>18-cls.asm</td><td>smazání obrazovky a otevření kanálu číslo 2 (screen) přes funkci v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm</a></td></tr>
<tr><td>19</td><td>19-print-char-call.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce CALL)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm</a></td></tr>
<tr><td>20</td><td>20-print-char-rst.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce RST)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm</a></td></tr>
<tr><td>21</td><td>21-print-char.asm</td><td>pouze výpis jednoho znaku na obrazovku bez jejího smazání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm</a></td></tr>
<tr><td>22</td><td>22-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (nekorektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm</a></td></tr>
<tr><td>23</td><td>23-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (korektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm</a></td></tr>
<tr><td>24</td><td>24-change-color.asm</td><td>změna barvových atributů (popředí a pozadí) vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm</a></td></tr>
<tr><td>25</td><td>25-change-flash.asm</td><td>povolení či zákaz blikání vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm</a></td></tr>
<tr><td>26</td><td>26-print-at.asm</td><td>výpis znaku či znaků na určené místo na obrazovce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm</a></td></tr>
<tr><td>27</td><td>27-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm</a></td></tr>
<tr><td>28</td><td>28-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm</a></td></tr>
<tr><td>29</td><td>29-print-colorized-string.asm</td><td>výpis řetězce, který obsahuje i řídicí znaky pro změnu barvy atd.</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm</a></td></tr>
<tr><td>30</td><td>30-print-string-ROM.asm</td><td>výpis řetězce s&nbsp;využitím služby/subrutiny uložené v&nbsp;ROM ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>31-attributes.asm</td><td>modifikace atributů pro tisk řetězce subrutinou uloženou v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm</a></td></tr>
<tr><td>32</td><td>32-fill-in-vram.asm</td><td>vyplnění celé bitmapy barvou popředí, návrat do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm</a></td></tr>
<tr><td>33</td><td>33-fill-in-vram-no-ret.asm</td><td>vyplnění celé bitmapy barvou popředí, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>34</td><td>34-fill-in-vram-pattern.asm</td><td>vyplnění celé bitmapy zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm</a></td></tr>
<tr><td>35</td><td>35-slow-fill-in-vram.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm</a></td></tr>
<tr><td>36</td><td>36-slow-fill-in-vram-no-ret.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>37</td><td>37-fill-block.asm</td><td>vykreslení bloku 8&times;8 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm</a></td></tr>
<tr><td>38</td><td>38-fill-block-with-pattern.asm</td><td>vykreslení bloku 8&times;8 pixelů zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm</a></td></tr>
<tr><td>39</td><td>39-fill-block-optimized.asm</td><td>optimalizace předchozího příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm</a></td></tr>
<tr><td>40</td><td>40-draw-char.asm</td><td>vykreslení znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm</a></td></tr>
<tr><td>41</td><td>41-draw-any-char.asm</td><td>podprogram pro vykreslení libovolně zvoleného znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm</a></td></tr>
<tr><td>42</td><td>42-block-anywhere.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>43-block-anywhere-rrca.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm</a></td></tr>
<tr><td>44</td><td>44-better-draw-char.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm</a></td></tr>
<tr><td>45</td><td>45-even-better-draw-char.asm</td><td>posun offsetu pro vykreslení dalšího znaku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm</a></td></tr>
<tr><td>46</td><td>46-draw-char-at.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm</a></td></tr>
<tr><td>47</td><td>47-draw-char-at-unrolled.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm</a></td></tr>
<tr><td>48</td><td>48-incorrect-print-string.asm</td><td>tisk řetězce, nekorektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm</a></td></tr>
<tr><td>49</td><td>49-correct-print-string.asm</td><td>tisk řetězce, korektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>50-ascii-table.asm</td><td>tisk několika bloků ASCII tabulky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm</a></td></tr>
<tr><td>51</td><td>51-plot-block.asm</td><td>vykreslení pixelu verze 1: zápis celého bajtu na pozici pixelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm</a></td></tr>
<tr><td>52</td><td>52-plot-pixel.asm</td><td>vykreslení pixelu verze 2: korektní vykreslení jednoho pixelu, ovšem překreslení celého bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm</a></td></tr>
<tr><td>53</td><td>53-plot-pixel.asm</td><td>vykreslení pixelu verze 3: vylepšená verze předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm</a></td></tr>
<tr><td>54</td><td>54-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (nekorektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm</a></td></tr>
<tr><td>55</td><td>55-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (korektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>56</td><td>56-inverse-ascii-table.asm</td><td>vykreslení ASCII tabulky inverzní barvou (inkoust vs. papír)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm</a></td></tr>
<tr><td>57</td><td>57-plot-pixel-on-inverse-background.asm</td><td>vykreslení pixelů barvou papíru proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm</a></td></tr>
<tr><td>58</td><td>58-plot-inverse-pixel-on-inverse-background.asm</td><td>vykreslení pixelů inverzní barvou proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/58-plot-inverse-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm58-plot-inverse-pixel-on-inverse-background.asm/</a></td></tr>
<tr><td>59</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech demonstračních příkladů do podoby obrazu magnetické pásky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>The system variables<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html</a>
</li>

<li>ZX Spectrum manual: chapter #17 Graphics<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Plovoucí řádová čárka na ZX Spectru<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

