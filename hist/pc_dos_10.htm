<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Standardní grafické režimy karty VGA</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Standardní grafické režimy karty VGA</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Zatímco minule jsme se zaměřili na popis textových režimů podporovaných kartou VGA, dnes si ukážeme základní práci s jejími standardními grafickými režimy. Mj. se zmíníme i o programování DAC a samozřejmě nezapomeneme na slavný grafický režim 13H.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Standardní grafické režimy karty VGA</a></p>
<p><a href="#k02">2. Grafický režim 12H s&nbsp;rozlišením 640&times;480 pixelů se 16 barvami</a></p>
<p><a href="#k03">3. Grafický režim 13H s&nbsp;rozlišením 320&times;200 pixelů s&nbsp;256 barvami</a></p>
<p><a href="#k04">4. Tabulka se všemi standardními grafickými režimy podporovanými BIOSem</a></p>
<p><a href="#k05">5. Všechny standardní grafické režimy z&nbsp;pohledu programátora</a></p>
<p><a href="#k06">6. První demonstrační příklad: přepnutí do režimu 12H a vykreslení vzorků na obrazovku</a></p>
<p><a href="#k07">7. Druhý demonstrační příklad: vyplnění obrazovky v&nbsp;režimu 13H</a></p>
<p><a href="#k08">8. Barvová paleta v&nbsp;režimu 12H (640&times;480)</a></p>
<p><a href="#k09">9. Třetí demonstrační příklad: změna celé barvové palety v&nbsp;režimu 12H</a></p>
<p><a href="#k10">10. DAC &ndash; číslicově-analogový převodník</a></p>
<p><a href="#k11">11. Dvojí mapování barev v&nbsp;režimu 12H</a></p>
<p><a href="#k12">12. Korektní změna zobrazení barev v&nbsp;režimu 12H</a></p>
<p><a href="#k13">13. Demonstrační příklad: korektní změna zobrazení barev</a></p>
<p><a href="#k14">14. Vykreslení jednotlivých pixelů v&nbsp;režimu 12H</a></p>
<p><a href="#k15">15. Demonstrační příklad: vykreslení pixelů v&nbsp;režimu 12H</a></p>
<p><a href="#k16">16. Vykreslení jednotlivých pixelů v&nbsp;režimu 13H: krátká nebo rychlá varianta?</a></p>
<p><a href="#k17">17. Demonstrační příklad: vykreslení pixelů s&nbsp;využitím operace aritmetických posunů (bez násobení)</a></p>
<p><a href="#k18">18. Dnešní poslední demonstrační příklad: náhrada násobení za vyhledávací tabulku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Standardní i nestandardní grafické režimy karty VGA</h2>

<p><a
href="https://www.root.cz/clanky/od-ega-ke-grafickym-kartam-mcga-a-vga/">V&nbsp;předchozím
článku</a> jsme si řekli, že grafická karta <i>VGA</i> je zpětně kompatibilní
s&nbsp;kartami <i>MDA</i>, <i>CGA</i> i <i>EGA</i>. Týká se to samozřejmě i
grafických režimů, což znamená, že řídicí registry karty <i>VGA</i> umožňovaly
takové nastavení, které vedlo k&nbsp;emulaci všech grafických režimů nabízených
kartami <i>CGA</i> i <i>EGA</i>, samozřejmě včetně struktury video paměti
(režim sudá/lichá u karty <i>CGA</i>, bitové roviny karty <i>EGA</i>, 64barevná
paleta této karty atd.). Navíc je možné pomocí služeb VGA BIOSu nastavit dva
nové standardní grafické režimy, které budou popsány v&nbsp;navazujících
kapitolách. I přes tyto stejné znaky však karta VGA používala odlišný konektor
pro připojení monitorů i odlišné signály (například barvonosné signály již byly
analogové, což konektoru VGA umožnilo &bdquo;přežít&ldquo; až do dnešní
doby).</p>

<img src="https://i.iinfo.cz/images/577/pc86-13.png" alt="pc86" width="320" height="200" />
<p><i>Obrázek 1: Klasický dungeon Ishar využívající grafický režim
s&nbsp;rozlišením 320&times;200 pixelů a 256 barev.</i></p>

<p><div class="rs-tip-major">Poznámka: kromě toho lze ovšem vytvořit i
prakticky nepřeberné množství režimů neoficiálních, ovšem nebude zaručena 100%
funkcionalita na všech klonech VGA i na všech monitorech, protože například
přímo společnost IBM poměrně dlouho po vydání VGA prodávala monitory
s&nbsp;fixním časováním; takzvané <i>multisync</i> monitory byly většinou
nabízeny jinými firmami. Nicméně ty režimy, které dodržují časování původních
režimů a jsou tedy kompatibilní s&nbsp;IBM monitory, jsou většinou
bezproblémové. To se ostatně týká i slavného X-mode (i když je možná dosti
typické, že první článek o X-mode tento koncept nedodržoval a mnoho uživatelů
mělo při hraní si s&nbsp;tímto režimem problémy).</div></p>

<img src="https://i.iinfo.cz/images/475/pc-10-1.webp" class="image-1130066" width="640" height="400" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 2: Slavná hra Master of Orion (první a podle mého názoru nejlepší
díl) taktéž využívá režim 320&times;200&times;256.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Grafický režim 12H s&nbsp;rozlišením 640&times;480 pixelů se 16 barvami</h2>

<p>První z&nbsp;oficiálně podporovaných grafických režimů karty VGA nabízí
rozlišení 640&times;480 pixelů při možnosti zobrazení maximálně šestnácti
barev. V&nbsp;podstatě se jedná o rozšíření grafického režimu karty <i>EGA</i>
s&nbsp;rozlišením 640&times;350 pixelů, protože &bdquo;pouze&ldquo; došlo ke
zvýšení vertikálního rozlišení, které je umožněno vyššími frekvencemi krystalů,
které generují jak oba synchronizační signály (horizontální i vertikální), tak
i hodinový signál použitý při přístupu do obrazové paměti (<i>pixel clock</i>),
který je v&nbsp;případě tohoto režimu roven 25,175 MHz.</p>

<img src="https://i.iinfo.cz/images/475/pc-10-2.webp" class="image-1130067" width="640" height="480" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 3: Mnoho aplikací i některé hry využívaly šestnáctibarevný režim
s&nbsp;rozlišením 640&times;480 pixelů. Například Incredible Machines (ve
skutečnosti byl u této hry režim částečně modifikován, takže neměl přesně 480
obrazových řádků, ovšem základem je standardní BIOSovský režim).</i></p>

<p>Podobně jako u karty <i>EGA</i>, i v&nbsp;grafickém režimu VGA
640&times;480&times;16 je obrazová paměť rozdělena do čtyř bitových rovin
mapovaných z&nbsp;hlediska mikroprocesoru (přesněji řečeno mikroprocesoru
běžícího v&nbsp;reálném režimu) do segmentu <strong>0xa000:0000</strong> až
<strong>0xa000:ffff</strong>. Čtení či zápis dat do bitových rovin není
prováděn přímo, protože mezi mikroprocesor a obrazovou paměť jsou vloženy
takzvané záchytné registry (<i>latch</i>) řízené pomocí několika konfiguračních
registrů.</p>

<img src="https://i.iinfo.cz/images/475/pc-10-3.webp" class="image-1130068" width="640" height="400" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 4: Další hra pracující v&nbsp;režimu 640&times;480&times;16 (zde
bylo vertikální rozlišení sníženo úpravou HW registrů VGA).</i></p>

<p>Existuje několik navzájem odlišných režimů práce těchto registrů,
z&nbsp;nichž pravděpodobně nejpoužívanějším režimem je čtení či zápis dat vždy
pouze do jedné bitové roviny. Při zápisu je však možné data současně zapisovat
do libovolné kombinace bitových rovin, takže například vymazání obrazovky lze
v&nbsp;praxi provést pouze zápisem 640&times;480/8=38400 bajtů (zápis do všech
čtyř bitových rovin současně) namísto skutečně přemazaných
640&times;480/2=153600 bajtů. Tento grafický režim má ještě jedno prvenství
&ndash; jedná se o první oficiální grafický režim počítačů IBM PC, jehož pixely
měly čtvercový tvar, což umožnilo zjednodušit některé algoritmy (například
vykreslení kružnice Bresenhamovým algoritmem není nutné modifikovat
s&nbsp;ohledem na nečtvercové pixely).</p>

<img src="https://i.iinfo.cz/images/475/pc-10-4.webp" class="image-1130069" width="640" height="480" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 5: Do třetice grafický režim 640&times;480&times;16 &ndash; hra
Warlords II (pozdější vydaná verze Warlords II Deluxe již do jisté míry
podporovala grafické karty SVGA a 256 barev).</i></p>

<p><div class="rs-tip-major">Poznámka: striktně řečeno ještě existuje režim 11H
se stejným rozlišením, ale jen 2 barvami, který vyžaduje jedinou bitovou
rovinu. Byl určen pro VGA karty s&nbsp;64 kB video RAM, ovšem záhy se začaly
všechny VGA prodávat s&nbsp;celými 256 kB, takže tento režim můžeme do značné
míry ignorovat.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Grafický režim 13H s&nbsp;rozlišením 320&times;200 pixelů s&nbsp;256 barvami</h2>

<p>Druhý standardní grafický režim karty VGA, který je známý též pod jménem
&bdquo;mód 13H&ldquo; nabízel programátorům i uživatelům rozlišení
320&times;200 pixelů, ovšem počet současně zobrazitelných barev byl roven 256
z&nbsp;celkového počtu 2<sup>18</sup>=262144 dostupných barevných odstínů.
Tento grafický režim vznikl zvláštním &bdquo;ohnutím&ldquo; HW karty VGA,
konkrétně takzvaným <i>zřetězením</i> (<i>chaining</i>) všech čtyř bitových
rovin tak, že barva prvního pixelu (osm bitů) je zapsána do první bitové roviny
(první bajt), barva druhého pixelu do druhé roviny (druhý bajt), třetí pixel
(překvapivě) do třetí bitové roviny, čtvrtý pixel do poslední bitové roviny,
barva pátého pixelu opět do první roviny (pátý bajt) atd. &ndash; viz též
obrázek číslo 6, na kterém je naznačena jak kombinace bitových rovin, tak i
metoda zobrazení pixelů na obrazovce.</p>

<a href="https://i.iinfo.cz/images/577/pc86-14.png"><img src="https://i.iinfo.cz/images/577/pc86-14-prev.png" alt="pc86" width="360" height="270" /></a>
<p><i>Obrázek 6: Struktura obrazové paměti v&nbsp;grafickém režimu 13H.</i></p>

<p>Z&nbsp;pohledu programátora však zřetězení znamenalo, že pixely byly uloženy
lineárně za sebou, což je ten nejjednodušší způsob organizace obrazové paměti
(<i>framebufferu</i>), kterému lze velmi snadno porozumět a používat. Při
zřetězení bitových rovin je totiž sice celých 75% obrazové paměti nevyužito,
protože v&nbsp;každé bitové rovině je adresovatelný vždy každý čtvrtý bajt, ale
z&nbsp;hlediska procesoru se celá obrazová paměť jeví jako pole
320&times;200=64000 bajtů, přičemž každý bajt představuje index barvy jednoho
pixelu &ndash; v&nbsp;reálném režimu procesoru 80x86 si snad nelze představit
jednodušší strukturu obrazové paměti :-), takže není divu, že se tento grafický
režim stal velmi populární.</p>

<img src="https://i.iinfo.cz/images/475/pc-10-5.webp" class="image-1130070" width="640" height="400" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 7: DOSová varianta slavné hry Civilizace taktéž dokáže využívat
režim 320&times;200&times;256 (popř.&nbsp;i jen 16 barev na starších
systémech).</i></p>

<p><div class="rs-tip-major">Poznámka: na bázi grafického režimu
320&times;200&times;256 vzniklo i velké množství nestandardních grafických
režimů, z&nbsp;nichž nejznámější je režim-X (mode-X, X-mode), jímž se budeme
zabývat v&nbsp;následující části tohoto seriálu. Tyto režimy, jakmile byly
&bdquo;objeveny&ldquo; (nejedná se totiž o režimy dostupné přes BIOS), začaly
být často používány ve hrách a demech.</div></p>

<img src="https://i.iinfo.cz/images/475/pc-10-6.webp" class="image-1130071" width="640" height="400" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 8: Další screenshot slavné hry Civilizace.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Tabulka se všemi standardními grafickými režimy podporovanými BIOSem</h2>

<p>Nyní si již můžeme doplnit tabulku se standardními textovými a grafickými
režimy podporovanými BIOSem o další režimy karty VGA. Jedná se o finální verzi
tabulky, protože se vznikem SVGA již firma IBM neměla takovou pozici, aby byly
nové režimy zavedeny do standardního BIOSu a navíc byla diverzita nových režimů
příliš velká a vývoj poměrně rychlý na standardizaci (víc viz
v&nbsp;samostatném článku):</p>

<table>
<tr><th>Číslo (AL)</th><th>Karty</th><th>Monitory</th><th>Typ</th><th>Rozlišení</th><th>Barvy</th><th>Segment</th><th></th></tr>
<tr><td>00</td><td>CGA, EGA</td><td>kompozitní</td><td>text</td><td>40&times;25</td><td>mono, 16 barev</td><td>0xb800</td></tr>
<tr><td>01</td><td>CGA, EGA</td><td>kompozitní, RGBI, EGA</td><td>text</td><td>40&times;25</td><td>mono, 16 barev</td><td>0xb800</td></tr>
<tr><td>02</td><td>CGA, EGA</td><td>kompozitní</td><td>text</td><td>80&times;25</td><td>mono, 16 barev</td><td>0xb800</td></tr>
<tr><td>03</td><td>CGA, EGA</td><td>kompozitní, RGBI, EGA</td><td>text</td><td>80&times;25</td><td>mono, 16 barev</td><td>0xb800</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>04</td><td>CGA, EGA</td><td>kompozitní, RGBI, EGA</td><td>grafika</td><td>320&times;200</td><td>4</td><td>0xb800</td></tr>
<tr><td>05</td><td>CGA, EGA</td><td>kompozitní</td><td>grafika</td><td>320&times;200</td><td>4</td><td>0xb800</td></tr>
<tr><td>06</td><td>CGA, EGA</td><td>kompozitní, RGBI, EGA</td><td>grafika</td><td>640&times;200</td><td>2</td><td>0xb800</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>07</td><td>MDA, EGA</td><td>TTL mono (MDA)</td><td>text</td><td>80&times;25</td><td>mono+intenzita</td><td>0xb000</td></tr>
<tr><td>N/A</td><td>Hercules</td><td>TTL mono (MDA)</td><td>grafika</td><td>720&times;348</td><td>mono</td><td>0xb000 nebo 0xb800</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>0d</td><td>EGA</td><td>EGA</td><td>grafika</td><td>320&times;200</td><td>16</td><td>0xa000</td></tr>
<tr><td>0e</td><td>EGA</td><td>EGA</td><td>grafika</td><td>640&times;200</td><td>16</td><td>0xa000</td></tr>
<tr><td>0f</td><td>EGA</td><td>TTL mono (MDA), EGA</td><td>grafika</td><td>640&times;350</td><td>3 (BW)</td><td>0xa000</td></tr>
<tr><td>10</td><td>EGA</td><td>EGA</td><td>grafika</td><td>640&times;350</td><td>4 nebo 16</td><td>0xa000</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>VGA</td><td>VGA (analog)</td><td>grafika</td><td>640&times;480</td><td>2</td><td>0xa000</td></tr>
<tr><td>12</td><td>VGA</td><td>VGA (analog)</td><td>grafika</td><td>640&times;480</td><td>16</td><td>0xa000</td></tr>
<tr><td>13</td><td>VGA</td><td>VGA (analog)</td><td>grafika</td><td>320&times;200</td><td>256</td><td>0xa000</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: režim 0x0f dokáže
&bdquo;vykouzlit&ldquo; grafiku i na původních MDA monitorech, podobně jako
karta Hecules. Zde se akorát používají 3 stupně šedi.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Všechny standardní grafické režimy z&nbsp;pohledu programátora</h2>

<p>Na všechny grafické režimy podporované BIOSem (+ režim Herculesu) se můžeme
podívat i z&nbsp;pohledu programátora. Zajímat nás bude začátek obrazové paměti
(segment), způsob prokládání obrazových řádků, formát pixelů (zda jsou hodnoty
uloženy v&nbsp;po sobě jdoucích bitech, nebo &bdquo;kolmo&ldquo;
v&nbsp;bitových rovinách), počet bitových rovin a taktéž to, zda jsou bitové
roviny zřetězeny či nikoli:</p>

<table>
<tr><th> #</th><th>Číslo (AL)</th><th>Karty</th><th>Rozlišení</th><th>Barvy</th><th>Segment</th><th>Prokládání řádků</th><th>Formát pixelů</th><th>Bitových rovin</th><th>Zřetězení</th></tr>
<tr><td> 1</td><td>04</td><td>CGA, EGA </td><td>320&times;200</td><td>4</td><td>0xb800</td><td>2:1</td><td>packed</td><td>1</td><td>ne</td></tr>
<tr><td> 2</td><td>05</td><td>CGA, EGA </td><td>320&times;200</td><td>4</td><td>0xb800</td><td>2:1</td><td>packed</td><td>1</td><td>ne</td></tr>
<tr><td> 3</td><td>06</td><td>CGA, EGA </td><td>640&times;200</td><td>2</td><td>0xb800</td><td>2:1</td><td>packed</td><td>1</td><td>ne</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 4</td><td>N/A</td><td>Hercules</td><td>720&times;348</td><td>mono</td><td>0xb000 nebo 0xb800</td><td>4:1</td><td>packed</td><td>1</td><td>ne</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>0d</td><td>EGA</td><td>320&times;200</td><td>16</td><td>0xa000</td><td>1:1</td><td>planar</td><td>4</td><td>ne</td></tr>
<tr><td> 6</td><td>0e</td><td>EGA</td><td>640&times;200</td><td>16</td><td>0xa000</td><td>1:1</td><td>planar</td><td>4</td><td>ne</td></tr>
<tr><td> 7</td><td>0f</td><td>EGA</td><td>640&times;350</td><td>3 (BW)</td><td>0xa000</td><td>1:1</td><td>planar</td><td>2</td><td>ne</td></tr>
<tr><td> 8</td><td>10</td><td>EGA</td><td>640&times;350</td><td>4 nebo 16</td><td>0xa000</td><td>1:1</td><td>planar</td><td>2 nebo 4</td><td>ne</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>11</td><td>VGA</td><td>640&times;480</td><td>2</td><td>0xa000</td><td>1:1</td><td>planar</td><td>1</td><td>ne</td></tr>
<tr><td>10</td><td>12</td><td>VGA</td><td>640&times;480</td><td>16</td><td>0xa000</td><td>1:1</td><td>planar</td><td>4</td><td>ne</td></tr>
<tr><td>11</td><td>13</td><td>VGA</td><td>320&times;200</td><td>256</td><td>0xa000</td><td>1:1</td><td>packed</td><td>4</td><td>ano</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tabulce nalezneme určitý řád,
takže se nedá říci, že by každý z&nbsp;jedenácti režimů byl zcela odlišný. Na
druhou stranu je podpora více režimů pro programátora do jisté míry
&bdquo;minové pole&ldquo; (a důvod, proč je PC pro programátory tak
zajímavé).</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. První demonstrační příklad: přepnutí do režimu 12H a vykreslení vzorků na obrazovku</h2>

<p>Dnešní první demonstrační příklad ukazuje základní způsob použití režimu
640&times;480 se šestnácti barvami. Tento režim se ovládá naprosto stejně jako
režim 640&times;350&times;16 karty EGA, pouze se zvýšil počet obrazových řádek
a obsazená kapacita každé bitové roviny je rovna 38400 bajtům.</p>

<a href="https://www.root.cz/obrazek/1130072/"><img src="https://i.iinfo.cz/images/475/pc-10-7-prev.webp"  class="image-1130072" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-7-prev.webp"  data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-7-large.webp" data-large-width="667" data-large-height="525"  alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 9: Výsledek běhu prvního demonstračního příkladu.</i></p>

<p>Úplný zdrojový kód prvního demonstračního příkladu:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 640x480 pixelu.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_gfx_mode_640x480.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_gfx_mode_640x480.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x12       <i>; nastaveni rezimu 640x480 se sestnacti barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        mov di, 0           <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov cx, 640*480/8   <i>; pocet zapisovanych pixelu (ovsem pocitano v bajtech)</i>
        mov al, 0           <i>; kod pixelu</i>
<strong>opak</strong>:
        stosb               <i>; zapis vzorku</i>
        inc al              <i>; dalsi pixel</i>
        loop opak           <i>; opakujeme CX-krat</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Druhý demonstrační příklad: vyplnění obrazovky v&nbsp;režimu 13H</h2>

<p>V&nbsp;režimu 13H je vše snadné díky linearitě obrazové paměti a faktu, že
každý pixel je uložen přesně v&nbsp;jednom bajtu. Vyplnění 320&times;200=64000
pixelů různými barvami lze tedy realizovat například takto:</p>

<pre>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        mov di, 0           <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov cx, 320*200     <i>; pocet zapisovanych pixelu (pixel==bajt)</i>
        mov al, 0           <i>; kod pixelu</i>
<strong>opak</strong>:
        stosb               <i>; zapis barvy pixelu</i>
        inc al              <i>; dalsi pixel</i>
        loop opak           <i>; opakujeme CX-krat</i>
</pre>

<a href="https://www.root.cz/obrazek/1130073/"><img src="https://i.iinfo.cz/images/475/pc-10-8-prev.webp"  class="image-1130073" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-8-prev.webp"  data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-8-large.webp" data-large-width="667" data-large-height="525"  alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 10: Výsledek běhu druhého demonstračního příkladu.</i></p>

<p>Úplný zdrojový kód druhého demonstračního příkladu vypadá následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_gfx_mode_320x200.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_gfx_mode_320x200.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        mov di, 0           <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov cx, 320*200     <i>; pocet zapisovanych pixelu (pixel==bajt)</i>
        mov al, 0           <i>; kod pixelu</i>
<strong>opak</strong>:
        stosb               <i>; zapis barvy pixelu</i>
        inc al              <i>; dalsi pixel</i>
        loop opak           <i>; opakujeme CX-krat</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Barvová paleta v&nbsp;režimu 12H (640&times;480)</h2>

<p>Grafická karta VGA sice podporuje 262144 barvových odstínů, ovšem na druhou
stranu zachovává kompatibilitu s&nbsp;kartou EGA, která nabízela 64 barvových
odstínů. To je patrné i z&nbsp;toho, jak se nastavuje barvová paleta
v&nbsp;režimu 12H, tedy v&nbsp;režimu s&nbsp;rozlišením 640&times;480 pixelů se
16 barvami. Tento grafický režim je totiž do značné míry považován za pouhé
&bdquo;vylepšení&ldquo; EGA režimu 640&times;200 nebo 640&times;350 pixelů,
taktéž se 16 barvami.</p>

<p>Pokusme se tedy o změnu barvové palety s&nbsp;využitím původní funkce EGA
BIOSu, který akceptoval barvy ze škály 64 barvových odstínů:</p>

<a href="https://www.root.cz/obrazek/1130074/"><img src="https://i.iinfo.cz/images/475/pc-10-9-prev.webp"  class="image-1130074" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-9-prev.webp"  data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-9-large.webp" data-large-width="667" data-large-height="525"  alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 11: Barevné pruhy před změnou barvové palety.</i></p>

<a href="https://www.root.cz/obrazek/1130075/"><img src="https://i.iinfo.cz/images/475/pc-10-10-prev.webp" class="image-1130075" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-10-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-10-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 12: Barevné pruhy po změně barvové palety.</i></p>

<p>Použijeme funkci 0x10 a podfunkci 0x02 EGA/VGA BIOSu, které předáme tabulku
s&nbsp;barvami:</p>

<pre>
        mov ax, cs
        mov es, ax
        mov dx, palette     <i>; ES:BX obsahuje adresu barvove palety</i>
        mov ax, 0x1002      <i>; cislo sluzby a podsluzby BIOSu</i>
        int 0x10            <i>; volani sluzby BIOSu</i>
</pre>

<p>Samotná tabulka obsahuje 17 barev (16 barev pro kreslení, navíc včetně barvy
okrajů obrazovky), přičemž každá barvová složka R, G, B je uložena ve dvou
bitech (povolení 1/3 intenzity a povolení 2/3 intenzity dané složky):</p>

<pre>
<strong>palette</strong>:                    <i>; barvova paleta i s barvou okraje</i>
        db 0b000000         <i>; cerna (pozadi)</i>
        db 0b111000         <i>; tmave seda</i>
        db 0b000111         <i>; svetle seda</i>
        db 0b111111         <i>; bila</i>
        db 0b010000         <i>; tmave zelena</i>
        db 0b000010         <i>; stredne zelena</i>
        db 0b010010         <i>; svetle zelena</i>
        db 0b100000         <i>; tmave cervena</i>
        db 0b000100         <i>; stredne cervena</i>
        db 0b100100         <i>; svetle cervena</i>
        db 0b001000         <i>; tmave modra</i>
        db 0b000001         <i>; stredne modra</i>
        db 0b001001         <i>; svetle modra</i>
        db 0b110000         <i>; tmave hneda</i>
        db 0b000110         <i>; svetle hneda</i>
        db 0b110110         <i>; zluta</i>
        db 0b111111         <i>; okraj</i>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Třetí demonstrační příklad: změna celé barvové palety v&nbsp;režimu 12H</h2>

<p>Úplný zdrojový kód demonstračního příkladu popsaného <a
href="#k08">v&nbsp;předchozí kapitole</a> vypadá následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 640x480 pixelu.</i>
<i>; Zmena barvovych rovin, do kterych se zapisuje.</i>
<i>; Konfigurace barvove palety jedinym volanim prislusne sluzby.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_palette_4.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_palette_4.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty EGA/VGA</i>
ega_controller    equ 0x3c4
bitplane_selector equ 0x02
&nbsp;
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x12       <i>; nastaveni rezimu 640x480 se sestnacti barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        xor al, al          <i>; maska bitovych rovin</i>
        mov cl, 16          <i>; pocitadlo barevnych pruhu</i>
<strong>opak</strong>:
        call draw_block_into_bitplanes
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        mov ax, cs
        mov es, ax
        mov dx, palette     <i>; ES:BX obsahuje adresu barvove palety</i>
        mov ax, 0x1002      <i>; cislo sluzby a podsluzby BIOSu</i>
        int 0x10            <i>; volani sluzby BIOSu</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>palette</strong>:                    <i>; barvova paleta i s barvou okraje</i>
        db 0b000000         <i>; cerna (pozadi)</i>
        db 0b111000         <i>; tmave seda</i>
        db 0b000111         <i>; svetle seda</i>
        db 0b111111         <i>; bila</i>
        db 0b010000         <i>; tmave zelena</i>
        db 0b000010         <i>; stredne zelena</i>
        db 0b010010         <i>; svetle zelena</i>
        db 0b100000         <i>; tmave cervena</i>
        db 0b000100         <i>; stredne cervena</i>
        db 0b100100         <i>; svetle cervena</i>
        db 0b001000         <i>; tmave modra</i>
        db 0b000001         <i>; stredne modra</i>
        db 0b001001         <i>; svetle modra</i>
        db 0b110000         <i>; tmave hneda</i>
        db 0b000110         <i>; svetle hneda</i>
        db 0b110110         <i>; zluta</i>
        db 0b111111         <i>; okraj</i>
&nbsp;
<strong>select_bitplane</strong>:
        mov  dx, ega_controller
        mov  ah, bitplane_selector
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
        ret                 <i>; hotovo</i>
&nbsp;
<strong>draw_block_into_bitplanes</strong>:
        push ax
        push cx
        call select_bitplane; maska bitovych rovin
        call draw_block
        add  di, 640*4/8    <i>; posun o nekolik radku nize</i>
        pop  cx
        pop  ax
        inc  al             <i>; zmena masky</i>
        ret                 <i>; hotovo</i>
&nbsp;
<strong>draw_block</strong>:
        mov cx, 640*12/4    <i>; pocet zapisovanych pixelu (ovsem pocitano v bajtech)</i>
        mov al, 0xff        <i>; kod pixelu</i>
        rep stosb
        ret
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. DAC &ndash; číslicově-analogový převodník</h2>

<p>Grafická karta VGA na výstupu (tedy pravděpodobně ještě před výstupními
zesilovači) obsahuje obvod DAC neboli číslicově-analogový převodník. Signály R,
G, B, které jsou posílány do monitoru, jsou totiž na VGA analogové, což
umožnilo i s&nbsp;využitím konektoru s&nbsp;relativně malým počtem pinů (DE-15)
posílat informace o 262144 barvových odstínech a později i plné <i>true
color</i> (samozřejmě je ale signál zašumněn, frekvenčně omezen atd., takže
například na 48bitovou barvovou hloubku a rozlišení QUXGA spíše zapomeňme).</p>

<p>DAC interně obsahuje paměť s&nbsp;organizací 256&times;18 bitů. Na vstupu je
tedy osmibitová hodnota (adresa), na výstupu pak 18 bitů &ndash; pro každou
barvovou složku 6 bitů. Z&nbsp;toho plyne právě oněch 262144 barvových odstínů:
2<sup>6</sup>&times;2<sup>6</sup>&times;2<sup>6</sup>=2<sup>18</sup>=262144.
Přeprogramováním této paměti je tedy možné zajistit toho, že VGA monitor
zobrazí libovolnou barvu z&nbsp;této škály.</p>

<p>DAC lze naprogramovat buď přes příslušné HW porty, nebo jednodušeji přes
BIOS, konkrétně službou 0x10, podslužbou 0x10:</p>

<pre>
        mov ax, 0x1010      <i>; služba a podslužba VGA BIOSu</i>
        mov ch, xxx         <i>; hodnota zelené složky 0..63</i>
        mov cl, xxx         <i>; hodnota modré složky 0..63</i>
        mov dh, xxx         <i>; hodnota zelené složky 0..63</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
</pre>

<p><div class="rs-tip-major">Poznámka: omezení na 6 bitů pro složku je podle
mého názoru v&nbsp;době vzniku VGA uměle omezené, klidně se mohl zachovat plný
osmibitový rozsah, přičemž spodní 2 bity by byly na VGA ignorovány.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Dvojí mapování barev v&nbsp;režimu 12H</h2>

<p>V&nbsp;16barevných režimech se interně provádí dvojí mapování barvy. Index
barvy (0..15) je převeden nám již známým způsobem na šestibitovou hodnotu. A
tato hodnota vstupuje do DAC, kde je přemapována na jednu barvu z&nbsp;262144
odstínů. To znamená, že pouhé přeprogramování DAC beze změny palety nedá na
výstupu očekávaný výsledek.</p>

<p>Pokusme se například změnit konfiguraci tak, aby se zobrazilo 16 pruhů ve
stupních šedi. Pokud pouze změníme DAC (všechny tři složky budou totožné a
budou růst od 0 do 63), bude výsledek následující:</p>

<a href="https://www.root.cz/obrazek/1130076/"><img src="https://i.iinfo.cz/images/475/pc-10-11-prev.webp" class="image-1130076" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-11-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-11-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 13: Pruhy s&nbsp;výchozím nastavením VGA.</i></p>

<a href="https://www.root.cz/obrazek/1130077/"><img src="https://i.iinfo.cz/images/475/pc-10-12-prev.webp" class="image-1130077" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-12-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-12-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 14: Výsledek pokusu o zobrazení pruhů ve stupních šedi.</i></p>

<p>Problém spočívá v&nbsp;tom, že například změna barvy na indexu 10 v&nbsp;DAC
nemění barvu číslo 10 v&nbsp;obrázku. Protože tato barva je přemapována jinam
ještě před vstupem do DAC.</p>

<p>Příklad, který vykreslil obrázky 13 a 14, vypadá následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 640x480 pixelu.</i>
<i>; Zmena barvovych rovin, do kterych se zapisuje.</i>
<i>; Zmena hodnot ulozenych v DAC.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_gfx_mode_dac_1.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_gfx_mode_dac_1.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty EGA/VGA</i>
ega_controller    equ 0x3c4
bitplane_selector equ 0x02
&nbsp;
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x12       <i>; nastaveni rezimu 640x480 se sestnacti barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        xor al, al          <i>; maska bitovych rovin</i>
        mov cl, 16          <i>; pocitadlo barevnych pruhu</i>
<strong>opak</strong>:
        call draw_block_into_bitplanes
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        xor bx, bx          <i>; index barvy v DAC</i>
        mov ax, 0x1010
<strong>next_dac</strong>:
        mov ch, bl
        shl ch, 1
        shl ch, 1           <i>; index (0-15)*4 -> 0..60</i>
        mov cl, ch          <i>; nastavit i ostatni slozky</i>
        mov dh, ch          <i>; nastavit i ostatni slozky</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        cmp bl, 16
        jnz next_dac
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>select_bitplane</strong>:
        mov  dx, ega_controller
        mov  ah, bitplane_selector
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
        ret                 <i>; hotovo</i>
&nbsp;
<strong>draw_block_into_bitplanes</strong>:
        push ax
        push cx
        call select_bitplane; maska bitovych rovin
        call draw_block
        add  di, 640*4/8    <i>; posun o nekolik radku nize</i>
        pop  cx
        pop  ax
        inc  al             <i>; zmena masky</i>
        ret                 <i>; hotovo</i>
&nbsp;
<strong>draw_block</strong>:
        mov cx, 640*12/4    <i>; pocet zapisovanych pixelu (ovsem pocitano v bajtech)</i>
        mov al, 0xff        <i>; kod pixelu</i>
        rep stosb
        ret
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Korektní změna zobrazení barev v&nbsp;režimu 12H</h2>

<p>Dvojímu mapování barev, které způsobilo <a href="#k11">výše zmíněné</a>
problémy, lze zamezit buď konfigurací VGA nebo úpravou barvové palety (16
barev) tak, aby obsahovala barvy zakódované ho hodnot 0b000000 až 0b001111, a
to bez ohledu na to, jak tato barva vypadá na EGA &ndash; ihned totiž tyto
barvy pozměníme přímo v&nbsp;DACu. Celý postup ukazuje následující trojice
snímků:</p>

<a href="https://www.root.cz/obrazek/1130078/"><img src="https://i.iinfo.cz/images/475/pc-10-13-prev.webp" class="image-1130078" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-13-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-13-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 15: Výchozí paleta šestnácti barev kompatibilní s&nbsp;CGA, EGA i
VGA.</i></p>

<a href="https://www.root.cz/obrazek/1130079/"><img src="https://i.iinfo.cz/images/475/pc-10-14-prev.webp" class="image-1130079" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-14-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-14-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 16: Změna palety tak, aby kódy barev 0xrrggbb byly v&nbsp;rozsahu
0x000000 až 0x001111, což si ukáže &bdquo;divné&ldquo; barvy, ty ovšem budou
v&nbsp;DAC směřovat do prvních šestnácti míst tabulky.</i></p>

<a href="https://www.root.cz/obrazek/1130080/"><img src="https://i.iinfo.cz/images/475/pc-10-15-prev.webp" class="image-1130080" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-15-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-15-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 17: Následuje přímá modifikace paměti DAC, takže získáme stupně
šedi tak, jak to vyžadujeme.</i></p>

<p>Oproti předchozímu demonstračnímu příkladu tedy pouze pozměníme barvovou
paletu, to je vše:</p>

<pre>
        xor bl, bl          <i>; index barvy</i>
<strong>next_color</strong>:
        mov bh, bl          <i>; hodnota barvy stejna jako index</i>
        mov ax, 0x1000      <i>; cislo sluzby a podsluzby BIOSu</i>
        int 0x10            <i>; volani sluzby BIOSu pro zmenu jedne barvy</i>
        inc bl              <i>; zvysit index barvy</i>
        cmp bl, 16          <i>; cela paleta?</i>
        jnz next_color      <i>; ne? tak opakujeme</i>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Demonstrační příklad: korektní změna zobrazení barev</h2>

<p>Úplný demonstrační příklad, který korektně zobrazí pruhy vyvedené ve
stupních šedi, vypadá následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 640x480 pixelu.</i>
<i>; Zmena barvovych rovin, do kterych se zapisuje.</i>
<i>; Konfigurace barvove palety jedinym volanim prislusne sluzby.</i>
<i>; Zmena hodnot ulozenych v DAC a korektnim mapovanim barev.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_gfx_mode_dac_2.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_gfx_mode_dac_2.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty EGA/VGA</i>
ega_controller    equ 0x3c4
bitplane_selector equ 0x02
&nbsp;
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x12       <i>; nastaveni rezimu 640x480 se sestnacti barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        xor al, al          <i>; maska bitovych rovin</i>
        mov cl, 16          <i>; pocitadlo barevnych pruhu</i>
<strong>opak</strong>:
        call draw_block_into_bitplanes
        loop opak
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        xor bl, bl          <i>; index barvy</i>
<strong>next_color</strong>:
        mov bh, bl          <i>; hodnota barvy stejna jako index</i>
        mov ax, 0x1000      <i>; cislo sluzby a podsluzby BIOSu</i>
        int 0x10            <i>; volani sluzby BIOSu pro zmenu jedne barvy</i>
        inc bl              <i>; zvysit index barvy</i>
        cmp bl, 16          <i>; cela paleta?</i>
        jnz next_color      <i>; ne? tak opakujeme</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
&nbsp;
        xor bx, bx          <i>; index barvy v DAC</i>
        mov ax, 0x1010
<strong>next_dac</strong>:
        mov ch, bl
        shl ch, 1
        shl ch, 1           <i>; index (0-15)*4 -> 0..60</i>
        mov cl, ch          <i>; nastavit i ostatni slozky</i>
        mov dh, ch          <i>; nastavit i ostatni slozky</i>
        int 0x10            <i>; modifikace mapovani v DAC</i>
        inc bl              <i>; zvysit index v DAC</i>
        cmp bl, 16
        jnz next_dac
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>select_bitplane</strong>:
        mov  dx, ega_controller
        mov  ah, bitplane_selector
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
        ret                 <i>; hotovo</i>
&nbsp;
<strong>draw_block_into_bitplanes</strong>:
        push ax
        push cx
        call select_bitplane; maska bitovych rovin
        call draw_block
        add  di, 640*4/8    <i>; posun o nekolik radku nize</i>
        pop  cx
        pop  ax
        inc  al             <i>; zmena masky</i>
        ret                 <i>; hotovo</i>
&nbsp;
<strong>draw_block</strong>:
        mov cx, 640*12/4    <i>; pocet zapisovanych pixelu (ovsem pocitano v bajtech)</i>
        mov al, 0xff        <i>; kod pixelu</i>
        rep stosb
        ret
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Vykreslení jednotlivých pixelů v&nbsp;režimu 12H</h2>

<p>Jak již víme z&nbsp;předchozího textu, režim 12H (640&times;480&times;16) je
až na rozdílný počet obrazových řádků prakticky shodný &nbsp;režimem karty EGA
640&times;350&times;16. To znamená, že naši subrutinu (podprogram) pro
vykreslení pixelů vlastně vůbec nemusíme měnit, protože jsme do ní nezahrnuli
test na nejmenší a největší možné souřadnice. Subrutina nejdříve vybere vhodnou
bitovou rovinu či roviny pro zápis na základě předané barvy a následně
v&nbsp;každé z&nbsp;těchto rovin změní jediný bit &ndash; což je pomalá
operace, neboť vyžaduje čtení (pomalé a s&nbsp;novými CPU ještě pomalejší
operace) a následný zápis. Celkově zabere vykreslení jediného pixelu stovky
taktů CPU; přesný počet závisí nejenom na použitém CPU (8088, 80186, ...), ale
i na rychlosti konkrétní karty VGA &ndash; zejména se to týká již zmíněné
operace čtení:</p>

<pre>
<strong>select_bitplane</strong>:
        mov  dx, ega_controller
        mov  ah, bitplane_selector
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
        ret                 <i>; hotovo</i>
&nbsp;
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice</i>
<i>; CL - barva</i>
<strong>putpixel</strong>:
        push ax
        mov al, cl         <i>; vyber bitove roviny nebo bitovych rovin</i>
        call select_bitplane
        pop ax
&nbsp;
        mov dx, 0xa000     <i>; zacatek stranky video RAM</i>
        mov es, dx         <i>; nyni obsahuje ES stranku video RAM</i>
&nbsp;
        mov cl, al
        and cl, 7          <i>; pouze spodni 3 bity x-ove souradnice</i>
&nbsp;
        shr ax, 1
        shr ax, 1
        shr ax, 1          <i>; x/8</i>
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
&nbsp;
        mov ax, bx         <i>; y-ova souradnice</i>
        shl ax, 1          <i>; y*2</i>
        shl ax, 1          <i>; y*4</i>
        shl ax, 1          <i>; y*8</i>
        shl ax, 1          <i>; y*16</i>
        add di, ax         <i>; pricist cast y-oveho posunu</i>
        shl ax, 1          <i>; y*32</i>
        shl ax, 1          <i>; y*64</i>
        add di, ax         <i>; pricist zbytek y-oveho posunu</i>
                           <i>; -> y*16 + y*64 = y*80</i>
&nbsp;
        mov al, 0x80       <i>; vypocitat masku pixelu</i>
        shr al, cl
        or [es:di], al     <i>; vlastni vykresleni pixelu</i>

        ret
</pre>

<p>Výsledná obrazovka může vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/1130081/"><img src="https://i.iinfo.cz/images/475/pc-10-16-prev.webp" class="image-1130081" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-16-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-16-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 18: Sada pixelů vykreslených v&nbsp;grafickém režimu 640&times;480&times;16.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Demonstrační příklad: vykreslení pixelů v&nbsp;režimu 12H</h2>

<p>Úplný demonstrační příklad, který vykreslí sadu pixelů v&nbsp;režimu 12H,
vypadá následovně (a opět &ndash; příliš se neliší od kódů, které jsme si již
podrobně popsali):</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 640x480 pixelu.</i>
<i>; Zmena barvovych rovin, do kterych se zapisuje.</i>
<i>; Vykresleni barevnych usecek.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_640x480_putpixel.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_640x480_putpixel.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; registry karty EGA/VGA</i>
ega_controller    equ 0x3c4
bitplane_selector equ 0x02
&nbsp;
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x12       <i>; nastaveni rezimu 640x480 se sestnacti barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov ax, 0
<strong>opak</strong>:
        mov bx, ax          <i>; y-ová souřadnice</i>
&nbsp;
        push ax
        mov cl, 10          <i>; barva</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        push ax
        mov cl, 11          <i>; barva</i>
        add ax, 10          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        push ax
        mov cl, 12          <i>; barva</i>
        add ax, 20          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        inc ax              <i>; pusun x+=1, y+=1</i>
        cmp ax, 480         <i>; hranice obrazovky?</i>
        jne opak            <i>; ne-opakujeme</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<strong>select_bitplane</strong>:
        mov  dx, ega_controller
        mov  ah, bitplane_selector
        xchg ah, al
        out  dx, ax         <i>; vyber registru sekvenceru</i>
                            <i>; a zapis masky bitovych rovin</i>
        ret                 <i>; hotovo</i>
&nbsp;
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice</i>
<i>; CL - barva</i>
<strong>putpixel</strong>:
        push ax
        mov al, cl         <i>; vyber bitove roviny nebo bitovych rovin</i>
        call select_bitplane
        pop ax
&nbsp;
        mov dx, 0xa000     <i>; zacatek stranky video RAM</i>
        mov es, dx         <i>; nyni obsahuje ES stranku video RAM</i>
&nbsp;
        mov cl, al
        and cl, 7          <i>; pouze spodni 3 bity x-ove souradnice</i>
&nbsp;
        shr ax, 1
        shr ax, 1
        shr ax, 1          <i>; x/8</i>
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
&nbsp;
        mov ax, bx         <i>; y-ova souradnice</i>
        shl ax, 1          <i>; y*2</i>
        shl ax, 1          <i>; y*4</i>
        shl ax, 1          <i>; y*8</i>
        shl ax, 1          <i>; y*16</i>
        add di, ax         <i>; pricist cast y-oveho posunu</i>
        shl ax, 1          <i>; y*32</i>
        shl ax, 1          <i>; y*64</i>
        add di, ax         <i>; pricist zbytek y-oveho posunu</i>
                           <i>; -> y*16 + y*64 = y*80</i>
&nbsp;
        mov al, 0x80       <i>; vypocitat masku pixelu</i>
        shr al, cl
        or [es:di], al     <i>; vlastni vykresleni pixelu</i>

        ret
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Vykreslení jednotlivých pixelů v&nbsp;režimu 13H: krátká nebo rychlá varianta?</h2>

<p>Postup při vykreslení pixelu v&nbsp;grafickém režimu 13H, tedy
v&nbsp;rozlišení 320&times;200 s&nbsp;256 barvami, je prakticky velmi
jednoduchý, mnohem jednodušší (a rychlejší), než v&nbsp;16barevných
režimech:</p>

<ol>
<li>Do segmentového registru <strong>ES</strong> se vloží segment video RAM, tedy 0xa0000</li>
<li>Do adresového registru <strong>DI</strong> se vloží výsledek operace x + y &times; 320</li>
<li>Na adresu <strong>[ES:DI]</strong> se uloží barva pixelu (v&nbsp;našem případě předaná v&nbsp;registru <strong>CL</strong>)</li>
</ol>

<p>Zbývá nám vyřešit druhý bod, protože násobení je pomalá operace, konkrétně
trvá 118-133 taktů na Intelu 8088 a teprve na Intelu 80286 se snižuje na
rozumných 21 taktů. Násobení nahradíme bitovým posunem a nejrychlejší na Intelu
8088 opět vychází posun o jednotlivé bity:</p>

<pre>
        mov ax, bx         <i>; y-ova souradnice</i>
        shl ax, 1          <i>; y*2</i>
        shl ax, 1          <i>; y*4</i>
        shl ax, 1          <i>; y*8</i>
        shl ax, 1          <i>; y*16</i>
        shl ax, 1          <i>; y*32</i>
        shl ax, 1          <i>; y*64</i>
        add di, ax         <i>; pricist cast y-oveho posunu</i>
        shl ax, 1          <i>; y*128</i>
        shl ax, 1          <i>; y*256</i>
</pre>

<p>Operace <strong>MOV</strong> trvá dva cykly, operace <strong>ADD</strong>
tři cykly a <strong>SHL</strong> dva cykly (vše na 8088), takže tento výpočet
bude trvat: 9&times;2+3=21 cyklů.</p>

<p>Celý podprogram pro vykreslení pixelu je velmi krátký v&nbsp;porovnání
s&nbsp;předchozími řešeními:</p>

<pre>
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice (staci len BL)</i>
<i>; CL - barva</i>
<strong>putpixel</strong>:
        mov dx, 0xa000     <i>; zacatek stranky video RAM</i>
        mov es, dx         <i>; nyni obsahuje ES stranku video RAM</i>
&nbsp;
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
&nbsp;
        mov ax, bx         <i>; y-ova souradnice</i>
        shl ax, 1          <i>; y*2</i>
        shl ax, 1          <i>; y*4</i>
        shl ax, 1          <i>; y*8</i>
        shl ax, 1          <i>; y*16</i>
        shl ax, 1          <i>; y*32</i>
        shl ax, 1          <i>; y*64</i>
        add di, ax         <i>; pricist cast y-oveho posunu</i>
        shl ax, 1          <i>; y*128</i>
        shl ax, 1          <i>; y*256</i>
        add di, ax         <i>; pricist zbytek y-oveho posunu</i>
                           <i>; -> y*64 + y*256 = y*320</i>
&nbsp;
        mov [es:di], cl     <i>; vlastni vykresleni pixelu</i>
&nbsp;
        ret
</pre>

<p>Pro zajímavost si porovnejme vykreslení v&nbsp;pixelu v&nbsp;režimu 12H a 13H:</p>

<pre>
; Vykresleni pixelu                ; Vykresleni pixelu
; AX - x-ova souradnice            ; AX - x-ova souradnice
; BX - y-ova souradnice          | ; BX - y-ova souradnice (staci len BL)
; CL - barva                       ; CL - barva
putpixel:                          putpixel:
        push ax                  &lt;
        mov al, cl               &lt;
        call select_bitplane     &lt;
        pop ax                   &lt;
                                 &lt;
        mov dx, 0xa000                     mov dx, 0xa000
        mov es, dx                         mov es, dx

        mov cl, al               &lt;
        and cl, 7                &lt;
                                 &lt;
        shr ax, 1                &lt;
        shr ax, 1                &lt;
        shr ax, 1                &lt;
        mov di, ax                         mov di, ax

        mov ax, bx                         mov ax, bx
        shl ax, 1                          shl ax, 1
        shl ax, 1                          shl ax, 1
        shl ax, 1                          shl ax, 1
        shl ax, 1                          shl ax, 1
                                 &gt;         shl ax, 1
                                 &gt;         shl ax, 1
        add di, ax                         add di, ax
        shl ax, 1                          shl ax, 1
        shl ax, 1                          shl ax, 1
        add di, ax                         add di, ax


        mov al, 0x80             |         mov [es:di], cl
        shr al, cl               &lt;
        or [es:di], al           &lt;

        ret                                ret
</pre>

<p>Ovšem celou operaci se můžeme pokusit ještě více urychlit, v&nbsp;tomto
případě za cenu vyšší spotřeby operační paměti. Násobky 320 si totiž můžeme
uložit do předpočítané tabulky, která bude mít 200 hodnot. Každá hodnota je
uložena ve dvou bajtech, takže budeme potřebovat 400 bajtů operační paměti.
Ovšem vlastní výpočet se &bdquo;scvrkne&ldquo; na zdvojnásobení hodnoty
registru <strong>BX</strong> (tři cykly) a načtení offsetu z&nbsp;tabulky
(2+12+8 cyklů), celkem je tedy namísto násobení potřeba 25 cyklů na
mikroprocesoru 8088. To je více, než v&nbsp;předchozím případě, <i>ovšem</i>
již na 80816 se situace změní, protože posledních 8 cyklů není zapotřebí
(výpočet efektivní adresy probíhá paralelně). A na 80286 je výpočet ještě
kratší, k&nbsp;tomu se však ještě vrátíme. Poučení: optimalizace pro jeden typ
procesoru mnohdy na platformě 8086 znamená zhoršení výsledku na jiném typu
mikroprocesoru:</p>

<pre>
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice (staci len BL)</i>
<i>; CL - barva</i>
<strong>putpixel</strong>:
        mov dx, 0xa000     <i>; zacatek stranky video RAM</i>
        mov es, dx         <i>; nyni obsahuje ES stranku video RAM</i>
&nbsp;
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
        add bx, bx         <i>; adresujeme slova, ne bajty</i>
        mov si, offsets
        mov ax, [si+bx]    <i>; nacist y-ovy posun z tabulky</i>
        add di, ax         <i>; pricist y-ovy posun</i>
&nbsp;
        mov [es:di], cl    <i>; vlastni vykresleni pixelu</i>
&nbsp;
        ret
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Demonstrační příklad: vykreslení pixelů s&nbsp;využitím operace aritmetických posunů (bez násobení)</h2>

<p>Ukažme si nyní pro úplnost celý kód demonstračního příkladu, který po svém
překladu a spuštění (na reálném HW nebo v&nbsp;DOSBoxu) vykreslí sadu pixelů
v&nbsp;grafickém režimu 320&times;200 pixelů. Adresy pixelů jsou přitom
vypočteny bez použití operace násobení; namísto něho se využívají bitové
posuny. Obrazovka by měla vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/1130082/"><img src="https://i.iinfo.cz/images/475/pc-10-17-prev.webp" class="image-1130082" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-17-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-17-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 19: Sada pixelů vykreslených v&nbsp;grafickém režimu 320&times;200&times;256.</i></p>

<p>Zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Vykresleni barevnych usecek.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_putpixel_1.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_putpixel_1.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 se sestnacti barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov ax, 0
<strong>opak</strong>:
        mov bx, ax          <i>; y-ová souřadnice</i>
&nbsp;
        push ax
        mov cl, al          <i>; barva</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        push ax
        mov cl, al          <i>; barva</i>
        add ax, 10          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        push ax
        mov cl, al          <i>; barva</i>
        add ax, 20          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        inc ax              <i>; pusun x+=1, y+=1</i>
        cmp ax, 200         <i>; hranice obrazovky?</i>
        jne opak            <i>; ne-opakujeme</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice (staci len BL)</i>
<i>; CL - barva</i>
<strong>putpixel</strong>:
        mov dx, 0xa000     <i>; zacatek stranky video RAM</i>
        mov es, dx         <i>; nyni obsahuje ES stranku video RAM</i>
&nbsp;
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
&nbsp;
        mov ax, bx         <i>; y-ova souradnice</i>
        shl ax, 1          <i>; y*2</i>
        shl ax, 1          <i>; y*4</i>
        shl ax, 1          <i>; y*8</i>
        shl ax, 1          <i>; y*16</i>
        shl ax, 1          <i>; y*32</i>
        shl ax, 1          <i>; y*64</i>
        add di, ax         <i>; pricist cast y-oveho posunu</i>
        shl ax, 1          <i>; y*128</i>
        shl ax, 1          <i>; y*256</i>
        add di, ax         <i>; pricist zbytek y-oveho posunu</i>
                           <i>; -> y*64 + y*256 = y*320</i>
&nbsp;
        mov [es:di], cl     <i>; vlastni vykresleni pixelu</i>
&nbsp;
        ret
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Dnešní poslední demonstrační příklad: náhrada násobení za vyhledávací tabulku</h2>

<p>V&nbsp;dnešním posledním demonstračním příkladu nahradíme operaci násobení
(resp.&nbsp;sekvenci aritmetických posunů) za přečtení hodnoty offsetu
z&nbsp;vyhledávací tabulky na základě předané y-ové souřadnice. Výsledek by měl
být zcela totožný s&nbsp;předchozím demonstračním příkladem a měl by vypadat
takto:</p>

<a href="https://www.root.cz/obrazek/1130083/"><img src="https://i.iinfo.cz/images/475/pc-10-18-prev.webp" class="image-1130083" width="343" height="270" data-prev-filename="https://i.iinfo.cz/images/475/pc-10-18-prev.webp" data-prev-width="343" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/475/pc-10-18-large.webp" data-large-width="667" data-large-height="525" alt="&#160;" title="Autor: tisnik, authors of original games, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 20: Sada pixelů vykreslená novým algoritmem založeným na vyhledávací tabulce.</i></p>

<p>Úplný zdrojový kód dnešního posledního demonstračního příkladu vypadá
následovně:</p>

<pre>
<i>; Graficky rezim karty VGA s rozlisenim 320x200 pixelu.</i>
<i>; Pouziti predpocitane tabulky.</i>
<i>; Vykresleni barevnych usecek.</i>
<i>;</i>
<i>; preklad pomoci:</i>
<i>;     nasm -f bin -o vga.com vga_320x200_putpixel_2.asm</i>
<i>;</i>
<i>; nebo pouze:</i>
<i>;     nasm -o vga.com vga_320x200_putpixel_2.asm</i>
&nbsp;
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 se sestnacti barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov ax, 0
<strong>opak</strong>:
        mov bx, ax          <i>; y-ová souřadnice</i>
&nbsp;
        push ax
        push bx
        mov cl, al          <i>; barva</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop bx
        pop ax
&nbsp;
        push ax
        push bx
        mov cl, al          <i>; barva</i>
        add ax, 10          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop bx
        pop ax
&nbsp;
        inc ax              <i>; pusun x+=1, y+=1</i>
        cmp ax, 200         <i>; hranice obrazovky?</i>
        jne opak            <i>; ne-opakujeme</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice (staci len BL)</i>
<i>; CL - barva</i>
<strong>putpixel</strong>:
        mov dx, 0xa000     <i>; zacatek stranky video RAM</i>
        mov es, dx         <i>; nyni obsahuje ES stranku video RAM</i>
&nbsp;
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
        add bx, bx         <i>; adresujeme slova, ne bajty</i>
        mov si, offsets
        mov ax, [si+bx]    <i>; nacist y-ovy posun z tabulky</i>
        add di, ax         <i>; pricist y-ovy posun</i>
&nbsp;
        mov [es:di], cl    <i>; vlastni vykresleni pixelu</i>
&nbsp;
        ret
&nbsp;
<strong>offsets</strong>:
        dw 0, 320,640,960,1280,1600,1920,2240,2560,2880,3200,3520,3840,4160,4480,4800,5120,
        dw 5440,5760,6080,6400,6720,7040,7360,7680,8000,8320,8640,8960,9280,9600,9920,10240,
        dw 10560,10880,11200,11520,11840,12160,12480,12800,13120,13440,13760,14080,14400,14720,15040,15360,
        dw 15680,16000,16320,16640,16960,17280,17600,17920,18240,18560,18880,19200,19520,19840,20160,20480,
        dw 20800,21120,21440,21760,22080,22400,22720,23040,23360,23680,24000,24320,24640,24960,25280,25600,
        dw 25920,26240,26560,26880,27200,27520,27840,28160,28480,28800,29120,29440,29760,30080,30400,30720,
        dw 31040,31360,31680,32000,32320,32640,32960,33280,33600,33920,34240,34560,34880,35200,35520,35840,
        dw 36160,36480,36800,37120,37440,37760,38080,38400,38720,39040,39360,39680,40000,40320,40640,40960,
        dw 41280,41600,41920,42240,42560,42880,43200,43520,43840,44160,44480,44800,45120,45440,45760,46080,
        dw 46400,46720,47040,47360,47680,48000,48320,48640,48960,49280,49600,49920,50240,50560,50880,51200,
        dw 51520,51840,52160,52480,52800,53120,53440,53760,54080,54400,54720,55040,55360,55680,56000,56320,
        dw 56640,56960,57280,57600,57920,58240,58560,58880,59200,59520,59840,60160,60480,60800,61120,61440,
        dw 61760,62080,62400,62720,63040,63360,63680,
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad pomocí assembleru <strong>NASM</strong>, byly uložen do Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již poměrně rozsáhlý)
repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>hello.asm</td><td>program typu &bdquo;Hello world&ldquo; naprogramovaný v&nbsp;assembleru pro systém DOS</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello.asm</a></td></tr>
<tr><td> 2</td><td>hello_shorter.asm</td><td>kratší varianta výskoku z&nbsp;procesu zpět do DOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_shorter.asm</a></td></tr>
<tr><td> 3</td><td>hello_wait.asm</td><td>čekání na stisk klávesy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_wait.asm</a></td></tr>
<tr><td> 4</td><td>hello_macros.asm</td><td>realizace jednotlivých částí programu makrem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hello_macros.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>gfx_4_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_putpixel.asm</a></td></tr>
<tr><td> 6</td><td>gfx_6_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel.asm</a></td></tr>
<tr><td> 7</td><td>gfx_4_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 4</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_line.asm</a></td></tr>
<tr><td> 8</td><td>gfx_6_line.asm</td><td>vykreslení úsečky v&nbsp;grafickém režimu 6</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_line.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>gfx_6_fill_1.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_1.asm</a></td></tr>
<tr><td>10</td><td>gfx_6_fill_2.asm</td><td>vyplnění obrazovky v&nbsp;grafickém režimu, varianta s&nbsp;instrukcí <strong>LOOP</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_2.asm</a></td></tr>
<tr><td>11</td><td>gfx_6_fill_3.asm</td><td>vyplnění obrazovky instrukcí <strong>REP STOSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_3.asm</a></td></tr>
<tr><td>12</td><td>gfx_6_fill_4.asm</td><td>vyplnění obrazovky, synchronizace vykreslování s&nbsp;paprskem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_fill_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>gfx_4_image_1.asm</td><td>vykreslení rastrového obrázku získaného z&nbsp;binárních dat, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_1.asm</a></td></tr>
<tr><td>14</td><td>gfx_4_image_2.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSB</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_2.asm</a></td></tr>
<tr><td>15</td><td>gfx_4_image_3.asm</td><td>varianta vykreslení rastrového obrázku s&nbsp;využitím instrukce <strong>REP MOVSW</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_3.asm</a></td></tr>
<tr><td>16</td><td>gfx_4_image_4.asm</td><td>korektní vykreslení všech sudých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_4.asm</a></td></tr>
<tr><td>17</td><td>gfx_4_image_5.asm</td><td>korektní vykreslení všech sudých i lichých řádků bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>gfx_4_image_6.asm</td><td>nastavení barvové palety před vykreslením obrázku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_6.asm</a></td></tr>
<tr><td>19</td><td>gfx_4_image_7.asm</td><td>nastavení barvové palety před vykreslením obrázku, snížená intenzita barev</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_7.asm</a></td></tr>
<tr><td>20</td><td>gfx_4_image_8.asm</td><td>postupná změna barvy pozadí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_4_image_8.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>gfx_6_putpixel_1.asm</td><td>vykreslení pixelu, základní varianta se 16bitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_1.asm</a></td></tr>
<tr><td>22</td><td>gfx_6_putpixel_2.asm</td><td>vykreslení pixelu, varianta s&nbsp;osmibitovým násobením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_2.asm</a></td></tr>
<tr><td>23</td><td>gfx_6_putpixel_3.asm</td><td>vykreslení pixelu, varianta bez násobení</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_3.asm</a></td></tr>
<tr><td>24</td><td>gfx_6_putpixel_4.asm</td><td>vykreslení pixelu přes obrázek, nekorektní chování (přepis obrázku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_4.asm</a></td></tr>
<tr><td>25</td><td>gfx_6_putpixel_5.asm</td><td>vykreslení pixelu přes obrázek, korektní varianta pro bílé pixely</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/gfx_6_putpixel_5.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>cga_text_mode_1.asm</td><td>standardní textový režim s&nbsp;rozlišením 40&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_1.asm</a></td></tr>
<tr><td>27</td><td>cga_text_mode_3.asm</td><td>standardní textový režim s&nbsp;rozlišením 80&times;25 znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_3.asm</a></td></tr>
<tr><td>28</td><td>cga_text_mode_intensity.asm</td><td>změna významu nejvyššího bitu atributového bajtu: vyšší intenzita namísto blikání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_intensity.asm</a></td></tr>
<tr><td>29</td><td>cga_text_mode_cursor.asm</td><td>změna tvaru textového kurzoru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_cursor.asm</a></td></tr>
<tr><td>30</td><td>cga_text_gfx_1.asm</td><td>zobrazení &bdquo;rastrové mřížky&ldquo;: pseudografický režim 160&times;25 pixelů (interně textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_gfx_1.asm</a></td></tr>
<tr><td>31</td><td>cga_text_mode_char_height.asm</td><td>změna výšky znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_mode_char_height.asm</a></td></tr>
<tr><td>32</td><td>cga_text_160x100.asm</td><td>grafický režim 160&times;100 se šestnácti barvami (interně upravený textový režim)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/cga_text_160x100.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>hercules_text_mode_1.asm</td><td>využití standardního textového režimu společně s&nbsp;kartou Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_1.asm</a></td></tr>
<tr><td>34</td><td>hercules_text_mode_2.asm</td><td>zákaz blikání v&nbsp;textových režimech</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_text_mode_2.asm</a></td></tr>
<tr><td>35</td><td>hercules_turn_off.asm</td><td>vypnutí generování video signálu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_turn_off.asm</a></td></tr>
<tr><td>36</td><td>hercules_gfx_mode_1.asm</td><td>přepnutí karty Hercules do grafického režimu (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_1.asm</a></td></tr>
<tr><td>37</td><td>hercules_gfx_mode_2.asm</td><td>přepnutí karty Hercules do grafického režimu (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_gfx_mode_2.asm</a></td></tr>
<tr><td>38</td><td>hercules_putpixel.asm</td><td>subrutina pro vykreslení jediného pixelu na kartě Hercules</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/hercules_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>ega_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x25.asm</a></td></tr>
<tr><td>40</td><td>ega_text_mode_80x43.asm</td><td>zobrazení 43 textových řádků na kartě EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_text_mode_80x43.asm</a></td></tr>
<tr><td>41</td><td>ega_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_320x200.asm</a></td></tr>
<tr><td>42</td><td>ega_gfx_mode_640x200.asm</td><td>přepnutí do grafického režimu 640&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x200.asm</a></td></tr>
<tr><td>43</td><td>ega_gfx_mode_640x350.asm</td><td>přepnutí do grafického režimu 640&times;350 pixelů se čtyřmi nebo šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_640x350.asm</a></td></tr>
<tr><td>44</td><td>ega_gfx_mode_bitplanes_1.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (základní způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_1.asm</a></td></tr>
<tr><td>45</td><td>ega_gfx_mode_bitplanes_2.asm</td><td>ovládání zápisu do bitových rovin v&nbsp;planárních grafických režimech (rychlejší způsob)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_gfx_mode_bitplanes_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>ega_320x200_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_320x200_putpixel.asm</a></td></tr>
<tr><td>47</td><td>ega_640x350_putpixel.asm</td><td>vykreslení pixelu v&nbsp;grafickém režimu 640&times;350 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_640x350_putpixel.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>48</td><td>ega_standard_font.asm</td><td>použití standardního fontu grafické karty EGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_standard_font.asm</a></td></tr>
<tr><td>49</td><td>ega_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>ega_palette_1.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 320&times;200 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_1.asm</a></td></tr>
<tr><td>51</td><td>ega_palette_2.asm</td><td>změna barvové palety (všech 16 barev) v&nbsp;grafickém režimu 640&times;350 se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_2.asm</a></td></tr>
<tr><td>52</td><td>ega_palette_3.asm</td><td>změna všech barev v&nbsp;barvové paletě s&nbsp;využitím programové smyčky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_3.asm</a></td></tr>
<tr><td>53</td><td>ega_palette_4.asm</td><td>změna všech barev, včetně barvy okraje, v&nbsp;barvové paletě voláním funkce BIOSu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/ega_palette_4.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>vga_text_mode_80x25.asm</td><td>standardní textový režim 80&times;25 znaků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x25.asm</a></td></tr>
<tr><td>55</td><td>vga_text_mode_80x50.asm</td><td>zobrazení 50 a taktéž 28 textových řádků na kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_80x50.asm</a></td></tr>
<tr><td>56</td><td>vga_text_mode_intensity_1.asm</td><td>změna chování atributového bitu pro blikání (nebezpečná varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_1.asm</a></td></tr>
<tr><td>57</td><td>vga_text_mode_intensity_2.asm</td><td>změna chování atributového bitu pro blikání (bezpečnější varianta změny registrů)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_intensity_2.asm</a></td></tr>
<tr><td>58</td><td>vga_text_mode_9th_column.asm</td><td>modifikace způsobu zobrazení devátého sloupce ve znakových režimech (720 pixelů na řádku)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_9th_column.asm</a></td></tr>
<tr><td>59</td><td>vga_text_mode_cursor_shape.asm</td><td>změna tvaru textového kurzoru na grafické kartě VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_cursor_shape.asm</a></td></tr>
<tr><td>60</td><td>vga_text_mode_custom_font.asm</td><td>načtení vlastního fontu s&nbsp;jeho zobrazením</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_text_mode_custom_font.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>vga_gfx_mode_640x480.asm</td><td>přepnutí do grafického režimu 640&times;480 pixelů se šestnácti barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_640x480.asm</a></td></tr>
<tr><td>62</td><td>vga_gfx_mode_320x200.asm</td><td>přepnutí do grafického režimu 320&times;200 pixelů s&nbsp;256 barvami, vykreslení vzorků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_320x200.asm</a></td></tr>
<tr><td>63</td><td>vga_gfx_mode_palette.asm</td><td>změna všech barev v&nbsp;barvové paletě grafické karty VGA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_palette.asm</a></td></tr>
<tr><td>64</td><td>vga_gfx_mode_dac_1.asm</td><td>využití DAC (neočekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_1.asm</a></td></tr>
<tr><td>65</td><td>vga_gfx_mode_dac_2.asm</td><td>využití DAC (očekávané výsledky)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_gfx_mode_dac_2.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>66</td><td>vga_640x480_putpixel.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 640&times;480 pixelů se šestnácti barvami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_640x480_putpixel.asm</a></td></tr>
<tr><td>67</td><td>vga_320x200_putpixel_1.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_1.asm</a></td></tr>
<tr><td>68</td><td>vga_320x200_putpixel_2.asm</td><td>realizace algoritmu pro vykreslení pixelu v&nbsp;grafickém režimu 320&times;200 s&nbsp;256 barvami (rychlejší varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm">https://github.com/tisnik/8bit-fame/blob/master/pc-dos/vga_320x200_putpixel_2.asm</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Intel 8088 Architecture and Instruction Set<br />
<a href="https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf">https://people.ece.ubc.ca/~edc/464/lectures/lec4.pdf</a>
</li>

<li>x86 Opcode Structure and Instruction Overview<br />
<a href="https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf">https://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf</a>
</li>

<li>x86 instruction listings (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_instruction_listings">https://en.wikipedia.org/wiki/X86_instruction_listings</a>
</li>

<li>x86 assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/X86_assembly_language">https://en.wikipedia.org/wiki/X86_assembly_language</a>
</li>

<li>Intel Assembler (Cheat sheet)<br />
<a href="http://www.jegerlehner.ch/intel/IntelCodeTable.pdf">http://www.jegerlehner.ch/intel/IntelCodeTable.pdf</a>
</li>

<li>25 Microchips That Shook the World<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world">https://spectrum.ieee.org/tech-history/silicon-revolution/25-microchips-that-shook-the-world</a>
</li>

<li>Chip Hall of Fame: MOS Technology 6502 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-mos-technology-6502-microprocessor</a>
</li>

<li>Chip Hall of Fame: Intel 8088 Microprocessor<br />
<a href="https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor">https://spectrum.ieee.org/tech-history/silicon-revolution/chip-hall-of-fame-intel-8088-microprocessor</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Apple II History Home<br />
<a href="http://apple2history.org/">http://apple2history.org/</a>
</li>

<li>The 8086/8088 Primer<br />
<a href="https://www.stevemorse.org/8086/index.html">https://www.stevemorse.org/8086/index.html</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>Počátky grafiky na PC: grafické karty CGA a Hercules<br />
<a href="https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/">https://www.root.cz/clanky/pocatky-grafiky-na-pc-graficke-karty-cga-a-hercules/</a>
</li>

<li>Co mají společného Commodore PET/4000, BBC Micro, Amstrad CPC i grafické karty MDA, CGA a Hercules?<br />
<a href="https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/">https://www.root.cz/clanky/co-maji-spolecneho-commodore-pet-4000-bbc-micro-amstrad-cpc-i-graficke-karty-mda-cga-a-hercules/</a>
</li>

<li>Karta EGA: první použitelná barevná grafika na PC<br />
<a href="https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/">https://www.root.cz/clanky/karta-ega-prvni-pouzitelna-barevna-grafika-na-pc/</a>
</li>

<li>RGB Classic Games<br />
<a href="https://www.classicdosgames.com/">https://www.classicdosgames.com/</a>
</li>

<li>Turbo Assembler (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turbo_Assembler">https://en.wikipedia.org/wiki/Turbo_Assembler</a>
</li>

<li>Microsoft Macro Assembler<br />
<a href="https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">https://en.wikipedia.org/wiki/Microsoft_Macro_Assembler</a>
</li>

<li>IBM Personal Computer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer">https://en.wikipedia.org/wiki/IBM_Personal_Computer</a>
</li>

<li>Intel 8251<br />
<a href="https://en.wikipedia.org/wiki/Intel_8251">https://en.wikipedia.org/wiki/Intel_8251</a>
</li>

<li>Intel 8253<br />
<a href="https://en.wikipedia.org/wiki/Intel_8253">https://en.wikipedia.org/wiki/Intel_8253</a>
</li>

<li>Intel 8255<br />
<a href="https://en.wikipedia.org/wiki/Intel_8255">https://en.wikipedia.org/wiki/Intel_8255</a>
</li>

<li>Intel 8257<br />
<a href="https://en.wikipedia.org/wiki/Intel_8257">https://en.wikipedia.org/wiki/Intel_8257</a>
</li>

<li>Intel 8259<br />
<a href="https://en.wikipedia.org/wiki/Intel_8259">https://en.wikipedia.org/wiki/Intel_8259</a>
</li>

<li>Support/peripheral/other chips - 6800 family<br />
<a href="http://www.cpu-world.com/Support/6800.html">http://www.cpu-world.com/Support/6800.html</a>
</li>

<li>Motorola 6845<br />
<a href="http://en.wikipedia.org/wiki/Motorola_6845">http://en.wikipedia.org/wiki/Motorola_6845</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>CRTC operation<br />
<a href="http://www.6502.org/users/andre/hwinfo/crtc/crtc.html">http://www.6502.org/users/andre/hwinfo/crtc/crtc.html</a>
</li>

<li>6845 - Motorola CRT Controller<br />
<a href="https://stanislavs.org/helppc/6845.html">https://stanislavs.org/helppc/6845.html</a>
</li>

<li>The 6845 Cathode Ray Tube Controller (CRTC)<br />
<a href="http://www.tinyvga.com/6845">http://www.tinyvga.com/6845</a>
</li>

<li>Motorola 6845 and bitwise graphics<br />
<a href="https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics">https://retrocomputing.stackexchange.com/questions/10996/motorola-6845-and-bitwise-graphics</a>
</li>

<li>IBM Monochrome Display Adapter<br />
<a href="http://en.wikipedia.org/wiki/Monochrome_Display_Adapter">http://en.wikipedia.org/wiki/Monochrome_Display_Adapter</a>
</li>

<li>Color Graphics Adapter<br />
<a href="http://en.wikipedia.org/wiki/Color_Graphics_Adapter">http://en.wikipedia.org/wiki/Color_Graphics_Adapter</a>
</li>

<li>Color Graphics Adapter and the Brown color in IBM 5153 Color Display<br />
<a href="https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/">https://www.aceinnova.com/en/electronics/cga-and-the-brown-color-in-ibm-5153-color-display/</a>
</li>

<li>The Modern Retrocomputer: An Arduino Driven 6845 CRT Controller<br />
<a href="https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/">https://hackaday.com/2017/05/14/the-modern-retrocomputer-an-arduino-driven-6845-crt-controller/</a>
</li>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>MS-DOS Version 4.0 Programmer's Reference<br />
<a href="https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/">https://www.pcjs.org/documents/books/mspl13/msdos/dosref40/</a>
</li>

<li>INT 21 - DOS Function Dispatcher (DOS)<br />
<a href="https://www.stanislavs.org/helppc/int_21.html">https://www.stanislavs.org/helppc/int_21.html</a>
</li>

<li>DOS API (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/DOS_API">https://en.wikipedia.org/wiki/DOS_API</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>DOSBox<br />
<a href="https://www.dosbox.com/">https://www.dosbox.com/</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Hercules Graphics Card (HCG)<br />
<a href="https://en.wikipedia.org/wiki/Hercules_Graphics_Card">https://en.wikipedia.org/wiki/Hercules_Graphics_Card</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf">https://content.ctcd.edu/courses/cosc2325/m22/docs/emu8086ins.pdf</a>
</li>

<li>Complete 8086 instruction set<br />
<a href="https://yassinebridi.github.io/asm-docs/8086_instruction_set.html">https://yassinebridi.github.io/asm-docs/8086_instruction_set.html</a>
</li>

<li>8088 MPH by Hornet + CRTC + DESiRE (final version)<br />
<a href="https://www.youtube.com/watch?v=hNRO7lno_DM">https://www.youtube.com/watch?v=hNRO7lno_DM</a>
</li>

<li>Area 5150 by CRTC &amp; Hornet (Party Version) / IBM PC+CGA Demo, Hardware Capture<br />
<a href="https://www.youtube.com/watch?v=fWDxdoRTZPc">https://www.youtube.com/watch?v=fWDxdoRTZPc</a>
</li>

<li>80x86 Integer Instruction Set Timings (8088 - Pentium)<br />
<a href="http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf">http://aturing.umcs.maine.edu/~meadow/courses/cos335/80x86-Integer-Instruction-Set-Clocks.pdf</a>
</li>

<li>Colour Graphics Adapter: Notes<br />
<a href="https://www.seasip.info/VintagePC/cga.html">https://www.seasip.info/VintagePC/cga.html</a>
</li>

<li>Restoring A Vintage CGA Card With Homebrew HASL<br />
<a href="https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/">https://hackaday.com/2024/06/12/restoring-a-vintage-cga-card-with-homebrew-hasl/</a>
</li>

<li>Demoing An 8088<br />
<a href="https://hackaday.com/2015/04/10/demoing-an-8088/">https://hackaday.com/2015/04/10/demoing-an-8088/</a>
</li>

<li>Video Memory Layouts<br />
<a href="http://www.techhelpmanual.com/89-video_memory_layouts.html">http://www.techhelpmanual.com/89-video_memory_layouts.html</a>
</li>

<li>Screen Attributes<br />
<a href="http://www.techhelpmanual.com/87-screen_attributes.html">http://www.techhelpmanual.com/87-screen_attributes.html</a>
</li>

<li>IBM PC Family  -  BIOS Video Modes<br />
<a href="https://www.minuszerodegrees.net/video/bios_video_modes.htm">https://www.minuszerodegrees.net/video/bios_video_modes.htm</a>
</li>

<li>EGA Functions<br />
<a href="https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega">https://cosmodoc.org/topics/ega-functions/#the-hierarchy-of-the-ega</a>
</li>

<li>Why the EGA can only use 16 of its 64 colours in 200-line modes<br />
<a href="https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/">https://www.reenigne.org/blog/why-the-ega-can-only-use-16-of-its-64-colours-in-200-line-modes/</a>
</li>

<li>How 16 colors saved PC gaming - the story of EGA graphics<br />
<a href="https://www.custompc.com/retro-tech/ega-graphics">https://www.custompc.com/retro-tech/ega-graphics</a>
</li>

<li>List of 16-bit computer color palettes<br />
<a href="https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes">https://en.wikipedia.org/wiki/List_of_16-bit_computer_color_palettes</a>
</li>

<li>Why were those colors chosen to be the default palette for 256-color VGA?<br />
<a href="https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga">https://retrocomputing.stackexchange.com/questions/27994/why-were-those-colors-chosen-to-be-the-default-palette-for-256-color-vga</a>
</li>

<li>VGA Color Palettes<br />
<a href="https://www.fountainware.com/EXPL/vga_color_palettes.htm">https://www.fountainware.com/EXPL/vga_color_palettes.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page<br />
<a href="http://www.osdever.net/FreeVGA/vga/vga.htm">http://www.osdever.net/FreeVGA/vga/vga.htm</a>
</li>

<li>Hardware Level VGA and SVGA Video Programming Information Page - sequencer<br />
<a href="http://www.osdever.net/FreeVGA/vga/seqreg.htm">http://www.osdever.net/FreeVGA/vga/seqreg.htm</a>
</li>

<li>VGA Basics<br />
<a href="http://www.brackeen.com/vga/basics.html">http://www.brackeen.com/vga/basics.html</a>
</li>

<li>Introduction to VGA Mode 'X'<br />
<a href="https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html">https://web.archive.org/web/20160414072210/http://fly.srk.fer.hr/GDM/articles/vgamodex/vgamx1.html</a>
</li>

<li>VGA Mode-X<br />
<a href="https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp">https://web.archive.org/web/20070123192523/http://www.gamedev.net/reference/articles/article356.asp</a>
</li>

<li>Mode-X: 256-Color VGA Magic<br />
<a href="https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf">https://downloads.gamedev.net/pdf/gpbb/gpbb47.pdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

