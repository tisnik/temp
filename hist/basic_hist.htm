<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>V&nbsp;předchozích letech jsme si na stránkách Roota připomněli několik důležitých kulatých výročí v&nbsp;oblasti IT a především pak programovacích jazyků. Jednalo se o ....</p>

<p>Pochopitelně i letos oslavíme několik podobných výročí. V&nbsp;dnešním článku se budeme zabývat dvěma událostmi, od nichž letos uplynulo či v&nbsp;následujících deseti měsících uplyne třicet resp.&nbsp;dokonce čtyřicet let. Konkrétně se jedná o data vydání dvou poměrně důležitých (i když ve druhém případě nikoli přelomových) interpretrů programovacího jazyka BASIC, který sice má z&nbsp;hlediska teorie programovacích jazyků poměrně mnoho nepříjemných vlastností, ovšem snadnost jeho implementace, minimální nároky na kapacitu paměti i rychlost procesoru a v&nbsp;neposlední řadě taktéž rychlá učící křivka udělaly z&nbsp;tohoto jazyka na konci sedmdesátých let &bdquo;lingua francu&ldquo; v&nbsp;oblasti minipočítačů a především mikropočítačů. Nejprve si připomeneme vznik slavného <i>BBS BASICu</i> v&nbsp;roce 1981; prakticky přesně o deset let později, tedy v&nbsp;roce 1991, byla vydána první verze <i>QBasicu</i>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p>Vzhledem k&nbsp;tomu, že je tento článek zaměřen na historii výpočetní techniky, seznámíme se v&nbsp;něm &ndash; alespoň ve stručnosti &ndash; se samotným vznikem konceptu programovacího jazyka BASIC. Musíme se ovšem v&nbsp;čase vrátit ještě mnohem dál, než &bdquo;pouze&ldquo; do roku 1981 a BBC Basicu. Vznik BASICu je spojen se šedesátými lety a s&nbsp;mainframy řady <i>GE-200</i>, konkrétně s&nbsp;mainframy nesoucími označení  <i>GE-215</i>, <i>GE-225</i> a <i>GE-235</i>. Na těchto počítačích vyvinutých společností <i>General Electric</i> se používalo velké množství různých programovacích jazyků, z&nbsp;nichž většina byla vytvořena &ndash; jak bylo v&nbsp;tu dobu obvyklé &ndash; přímo ve firmě GE.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;šedesátých a vlastně i v&nbsp;sedmdesátých letech vůbec nebylo neobvyklé, že jak samotný hardware (mainframe, minipočítač, později mikropočítač), tak i operační systém, programovací jazyky a další podpůrný software dodávala jedna a táž společnost. Dnes je situace naprosto odlišná &ndash; hardware je většinou komoditní, komoditou se de facto stává i operační systém a pokus o vytvoření programovacího jazyka, který by běžel pouze na jediném operačním systému, je velmi problematický, vyžaduje obrovské investice a prakticky je již od začátku odsouzen pouze k&nbsp;minoritní roli.</div></p>

<a href="http://i.iinfo.cz/images/184/hist-53-3.jpg"><img src="http://i.iinfo.cz/images/184/hist-53-3-prev.jpg" width="172" height="270" alt=" " /></a>
<p><i>Obrázek 1: Procesorová jednotka sálového počítače GE-225.<br />
Autor fotografie: Ed Thelen</i></p>

<p>Z&nbsp;nižších programovacích jazyků měli vývojáři na výběr mezi jazykem symbolických instrukcí nazvaným <i>General Assembly Program</i> (zkráceně <i>GAP</i>) a plnohodnotným assemblerem se jménem <i>ZOOM</i>, který mj.&nbsp;podporoval i tvorbu maker (dnes se většinou setkáme pouze s&nbsp;plnohodnotnými assemblery a tak pojem &bdquo;jazyk symbolických instrukcí&ldquo; začal splývat s&nbsp;označením assembler). K&nbsp;těmto nízkoúrovňovým programovacím jazykům můžeme připočíst i specializovaný jazyk <i>WIZ</i>, který sloužil pro překlad aritmetických a logických výrazů do strojového kódu. Tyto přeložené výrazy bylo díky kompatibilnímu binárnímu formátu samozřejmě možné volat jak z&nbsp;assembleru (přesněji řečeno z&nbsp;programů napsaných v&nbsp;jazyku symbolických instrukcí), tak i z&nbsp;programů vytvořených v&nbsp;některém vyšším programovacím jazyku.</p>

<a href="http://i.iinfo.cz/images/184/hist-53-4.jpg"><img src="http://i.iinfo.cz/images/184/hist-53-4-prev.jpg" width="361" height="270" alt=" " /></a>
<p><i>Obrázek 2: Pohled na vnitřní uspořádání procesorové jednotky sálového počítače GE-225.<br />
Autor fotografie: Ed Thelen</i></p>

<p>Vyšší programovací jazyky byly na mainframech dostupné přes nástroj nazvaný <i>GECOM</i>, což je zkratka plného názvu <i>General Compiler</i>. Tento nástroj podporoval především dvojici programovacích jazyků <i>COBOL</i> a <i>ALGOL</i>, kterými jsme se podrobněji zabývali v&nbsp;předchozích částech tohoto seriálu. Kromě těchto v&nbsp;podstatě obecných programovacích jazyků byl nástrojem <i>GECOM</i> podporován i specializovaný jazyk <i>GECOM Report Writer</i>, jehož jméno přesně vystihuje oblast jeho použití (tvorba tiskových sestav), a taktéž programovací jazyk <i>TABSOL</i>, který byl specializovaný na programování úloh, v&nbsp;nichž se používaly rozhodovací tabulky. Díky možnosti vzájemné kombinace jednotlivých programovacích jazyků podporovaných nástrojem <i>GECOM</i> bylo možné psát nízkoúrovňové rutiny aplikace v&nbsp;assembleru, základní rutiny v&nbsp;<i>COBOLu</i> a/nebo v&nbsp;<i>ALGOLu</i>, rozhodovací část aplikace (dnes je moderní používat termín &bdquo;business logika&ldquo; :-) ) v&nbsp;<i>TABSOLu</i> a definici výstupních sestav bylo možné provést v&nbsp;<i>GECOM Report Writeru</i>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Need for BASIC?</h2>

<p>I přes na svou dobu velmi široké spektrum programovacích jazyků, které jsme si stručně představili v&nbsp;předchozí kapitole však nebyla nabídka jazyků úplná do té míry, aby vyhovovala potřebám všech uživatelů a programátorů mainframů. Z&nbsp;tohoto důvodu byl pro sálové počítače řady <i>GE-200</i> vyvinut i překladač programovacího jazyka <i>FORTRAN II</i>, který spolu s&nbsp;<i>COBOLem</i> patřil až do poloviny šedesátých let minulého století mezi nejpoužívanější jazyky na sálových počítačích. Ovšem všechny výše zmíněné programovací jazyky, ať již se jednalo o assemblery či o vyšší programovací jazyky, trpěly jedním poměrně závažným nedostatkem &ndash; zdrojové texty programů se nejdříve musely napsat na specializované formuláře (pro každý jazyk byl určen jiný formulář), poté se texty napsané na formulářích vyděrovaly na děrné štítky, což se provádělo na mechanickém či elektromechanickém zařízení bez jakékoli návaznosti na počítač a teprve poté bylo možné děrné štítky umístit do čtečky, která zapsané zdrojové texty postupně načítala a předávala překladači.</p>

<a href="http://i.iinfo.cz/images/184/hist-53-6.jpg"><img src="http://i.iinfo.cz/images/184/hist-53-6-prev.jpg" width="238" height="270" alt=" " /></a>
<p><i>Obrázek 3: Jednotka pro přípravu děrných štítků.</i></p>

<p>Pokud nastala při překladu zdrojového textu chyba (vypsaná většinou na systémovou tiskárnu nebo do generovaného listingu programu), nebo i úspěšně přeložený program nevykonával takovou činnost, jakou programátor zamýšlel, musel se celý postup překladu znovu opakovat. Díky tomu, že se pořadí děrných štítků mohlo měnit, nemusel se většinou přepisovat celý program, ale pouze se do něj mohly doplňovat (či nahrazovat) další příkazy, i tak se však jednalo o velmi zdlouhavou činnost, která navíc vyžadovala spolupráci mezi programátorem, pracovníky, kteří program vyděrovali na děrné štítky a operátory pracujícími přímo se sálovým počítačem. Určité zrychlení přineslo použití dálnopisů pro zápis programů na děrné pásky s&nbsp;tím, že se při opravě programu musela většinou vytvořit nová páska, popř.&nbsp;přišly ke slovu nůžky a lepidlo. Děrná páska se v&nbsp;místě opravy přestřihla a při troše trpělivosti se mohlo přestřižené místo nahradit kusem nové pásky &ndash; i z&nbsp;tohoto důvodu také mnoho tehdejších programátorů znalo nazpaměť kódování <i>EBCDIC</i> či <i>ASCII</i>, aby dokázali kód na pásce číst z&nbsp;hlavy a tak snadno najít místo, které je potřeba opravit.</p>

<a href="http://i.iinfo.cz/images/184/hist-53-13.png"><img src="http://i.iinfo.cz/images/184/hist-53-13-prev.png" width="370" height="220" alt=" " /></a>
<p><i>Obrázek 4: Část programu napsaného v&nbsp;programovacím jazyce TABSOL na
formuláři určeném k&nbsp;vyděrování a následnému překladu (kompilaci).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Rodí se Dartmouth Time Sharing System &ndash; DTSS</h2>

<p>Řešení s&nbsp;dálnopisy přinášelo i tu výhodu, že programátor nemusel po každé změně ve zdrojových textech svého programu cestovat s&nbsp;děrnými štítky do budovy, kde se nacházel sálový počítač (nebo zařízení pro přípravu děrných štítků), ale mohl svůj program přenést přímo pomocí dálnopisu, resp.&nbsp;při použití běžné telefonní linky přes modem, který většinou obsahoval &bdquo;kolébku&ldquo; pro položení telefonního sluchátka &ndash; přenos dat byl prováděn přes běžný telefon (některé modernější dálnopisy již externí telefon nepotřebovaly). Počítač navíc mohl všechny zprávy překladače tisknout pomocí dálnopisu přímo u stolu programátora. Ovšem i tento způsob použití dálnopisu nebyl zcela dokonalý, protože ve svých prvopočátcích vedl k&nbsp;tomu, že se celý mainframe (resp.&nbsp;jeho operační systém) musel věnovat jedinému uživateli, který prováděl překlad svého programu, nebo již přeloženou aplikaci spouštěl. Počet uživatelů obsloužených za jeden den byl při tomto způsobu práce relativně nízký a navíc bylo nutné zavádět a dodržovat časové plány určující termíny připojení jednotlivých uživatelů.</p>

<a href="http://i.iinfo.cz/images/369/hist54-1.jpg"><img src="http://i.iinfo.cz/images/369/hist54-1-prev.jpg" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 5: Starší typ dálnopisu. Na levé straně je umístěna jednotka pro děrování i čtení děrné pásky, na pravé straně pak klávesnice.</i></p>

<p>Zatímco při použití sálových počítačů v&nbsp;bankách, pojišťovnách či podobných institucích nebyl problém obsluhy více uživatelů zpočátku příliš omezující, protože se na těchto mainframech většinou spouštěly dlouhotrvající dávkové úlohy, byla situace zcela odlišná na vysokých školách, kde měly sálové počítače sloužit mj.&nbsp;i pro výuku programování, popř.&nbsp;pro implementaci různých výpočtů z&nbsp;oblasti matematiky, fyziky, chemie atd.. To znamenalo, že &bdquo;univerzitní&ldquo; počítače musely zpracovávat větší množství spíše krátkodobějších úloh denně (překlad programu trval několik desítek sekund až jednotek minut, což byla mnohem kratší doba, než například výpočet mezd ve větší společnosti). Z&nbsp;toho důvodu, aby se toto omezení vyřešilo, se začal na <i>Dartmouth College</i> (jedna z&nbsp;prestižních univerzit v&nbsp;USA) již v&nbsp;roce 1963 vyvíjet systém, který by umožnil <strong>současnou</strong> práci více uživatelů na jednom mainframu, přičemž by jednotliví uživatelé pro komunikaci se sálovým počítačem používali dálnopisy upravené do podoby počítačových terminálů. Vývoj tohoto systému byl veden <i>Johnem Kemenym</i> a <i>Thomasem Kurtzem</i>, kteří při programování tohoto systému spolupracovali s&nbsp;několika svými studenty.</p>

<a href="http://i.iinfo.cz/images/369/hist54-2.jpg"><img src="http://i.iinfo.cz/images/369/hist54-2-prev.jpg" width="370" height="246" alt=" " /></a>
<p><i>Obrázek 6: Dálnopis ASR-33, který byl poměrně často používaný i jako levná a relativně kvalitní tiskárna.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Revoluční koncept &ndash; interaktivní dialog s&nbsp;počítačem přes DTSS</h2>

<p>Výsledný produkt spolupráce Johna Kemenyho, Thomase Kurtze a skupiny studentů (první použitelná verze jejich systému byla představena již roku 1964), jenž byl nazván <i>Dartmouth Time-Sharing System</i> &ndash; <i>DTSS</i>, byl zprvu provozován na sálovém počítači <i>GE-235</i> vybaveného dálnopisy <i>Datanet 30</i>. Tyto terminály se však nepřipojovaly přímo k&nbsp;mainframu <i>GE-235</i>, ale k&nbsp;jednoduššímu počítači nazvanému <i>Datanet</i> (tedy podobně, jako vlastní dálnopisy), který požadavky z&nbsp;dálnopisů vhodným způsobem předpřipravil pro zpracování mainframem <i>GE-235</i>. Systém <i>DTSS</i> na této konfiguraci umožňoval souběžnou práci několika desítek uživatelů. Po přenosu operačního systému <i>DTSS</i> na modernější a výkonnější mainframy řady <i>GE-600</i> (konkrétně na typ <i>GE-635</i>) se výkon celého systému zvýšil takovým způsobem, že počet souběžně pracujících uživatelů dosáhl téměř neuvěřitelné hodnoty 300! <i>John Kemeny</i>, který byl, jak již víme, jeden z&nbsp;autorů systému <i>DTSS</i>, ještě před svým působením v&nbsp;<i>Dartmouth College</i> pracoval ve výzkumných laboratořích v&nbsp;Los Alamos (jedná se o známé laboratoře, kde ve čtyřicátých a padesátých letech probíhal intenzivní výzkum v&nbsp;oblasti jaderné fyziky).</p>

<a href="http://i.iinfo.cz/images/38/ibm-5-3.jpg"><img src="http://i.iinfo.cz/images/38/ibm-5-3-prev.jpg" alt="ibm-5" height="270" width="211" /></a>
<p><i>Obrázek 7: Manuál k&nbsp;první verzi FORTRANu určeného pro mainframy IBM 704.</i></p>

<p>Zde <i>John Kemeny</i> tvořil výpočetní a simulační programy a taktéž si sám připravoval děrné štítky se zdrojovými kódy aplikací, které byly následně dávkově (někdy i po delší době) překládány tehdejšími sálovými počítači. Právě při této činnosti si <i>Kemeny</i> uvědomil, jak je tento dávkový způsob práce ve skutečnosti krkolomný, a vzápětí se stal propagátorem interaktivního způsobu práce s&nbsp;počítačem, při němž uživatel zadává mainframu příkazy konverzačním způsobem a počítač následně tyto příkazy vykonává a ihned tiskne veškerá chybová hlášení i výstupy příkazů. Právě díky systému <i>DTSS</i> a dálnopisům se interaktivní způsob komunikace s&nbsp;počítačem stal skutečností &ndash; uživatelé (většinou studenti) mohli s&nbsp;počítačem konverzovat takovým způsobem, že napsali příkaz na dálnopisu, tento příkaz byl mainframem vykonán a výsledek se ihned poté vypsal na elektronickém psacím stroji, kterým byl dálnopis vybaven (tento psací stroj mohl taktéž &bdquo;opisovat&ldquo; příkazy zapsané uživatelem). Při čekání na zadání nového příkazu mohl mainframe díky způsobu implementace <i>DTSS</i> vykonávat jiné činnosti, tj.&nbsp;obsluhovat další uživatele, což mnohdy ve výsledku poněkud paradoxně vedlo k&nbsp;lepšímu využití strojového času, než tomu bylo na mainframech orientovaných výhradně na zpracování dávkových úloh.</p>

<img src="http://i.iinfo.cz/images/38/ibm-5-5.png" alt="ibm-5" height="193" width="336" />
<p><i>Obrázek 8: Ukázka programu napsaného ve FORTRANu II, ve kterém můžeme mj.&nbsp;vidět i použití aritmetického IF.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vznik programovacího jazyka BASIC na systému DTSS</h2>

<p>Se systémem <i>DTSS</i> je prakticky nerozlučně spojen i programovací jazyk <i>BASIC</i>, jenž byl na tomto systému vyvinut. Nejednalo se v&nbsp;žádném případě o náhodu, ale o cílený vývoj, protože některé vlastnosti <i>BASICu</i>, především jeho interaktivní způsob komunikace s&nbsp;uživatelem (jednalo se sice původně o překladač, ovšem program byl při zápisu kontrolován) i jednoduchost tvorby programů přesně odpovídala potřebám výuky programování, samozřejmě s&nbsp;ohledem na stav výpočetní techniky v&nbsp;polovině šedesátých let minulého století (dnes již jsou samozřejmě k&nbsp;dispozici zcela jiné technické prostředky, včetně grafických displejů a operačních systémů nabízejících plnohodnotné GUI). Programovací jazyk <i>BASIC</i> byl navržen takovým způsobem, aby v&nbsp;něm bylo možné interaktivně vytvářet programy, a to i v&nbsp;případě, že se uživatel k&nbsp;sálovému počítači připojoval &bdquo;pouze&ldquo; s&nbsp;využitím dálnopisu. Omezení na použití dálnopisu ovšem do značné míry vylučovalo použití plnohodnotného textového editoru a tím do značné míry i blokovou strukturu programů psaných v&nbsp;<i>BASICu</i>.</p>

<img src="http://i.iinfo.cz/images/369/hist54-3.jpg" width="210" height="306" alt=" " />
<p><i>Obrázek 9: John Kemeny a Thomas Kurtz.</i></p>

<p>Namísto toho byl původní interpret programovacího jazyka <i>BASIC</i> orientován na zápis programových řádků, které byly očíslovány, tj.&nbsp;na začátku každého řádku bylo uvedeno jeho číslo s&nbsp;tím, že se programové řádky automaticky po svém zápisu na klávesnici dálnopisu zařazovaly podle svého čísla na správné místo v&nbsp;programu. To mj.&nbsp;znamenalo, že vývojář mohl zapisovat programové řádky v&nbsp;libovolném pořadí a navíc při zadání řádku se stejným číslem, jaké měl již existující řádek, došlo k&nbsp;přepisu původního obsahu tohoto programového řádku novou sekvencí příkazů. S&nbsp;číslováním řádků částečně souvisely i příkazy <strong>GOTO</strong> a <strong>GOSUB</strong>, které obsahovaly číslo cíle skoku a nikoli (textové) návěští. Používání čísel řádků v&nbsp;<i>BASICových</i> programech bylo sice o mnoho let později &ndash; již v&nbsp;dobách celoobrazovkových terminálů a domácích i osobních počítačů &ndash; kritizováno, ovšem s&nbsp;ohledem na dobu vzniku <i>BASICu</i> a možností, které v&nbsp;té době poskytovala dostupná technika (dálnopisy) se jednalo o velmi dobrý návrh, což je ostatně potvrzeno i tím, že <i>BASIC</i> ve své téměř původní podobě přežil do dob, kdy se jeho způsob zápisu programů již stal v&nbsp;mnoha ohledech zastaralý (mezitím ostatně přišla éra strukturovaného programování i programování objektově orientovaného).</p>

<a href="http://i.iinfo.cz/images/369/hist54-4.jpg"><img src="http://i.iinfo.cz/images/369/hist54-4-prev.jpg" width="244" height="270" alt=" " /></a>
<p><i>Obrázek 10: Dálnopis Datanet používaný v&nbsp;systému DTSS.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Příkazy dostupné v&nbsp;prvních verzích programovacího jazyka BASIC</h2>

<p><i>John Kemeny</i> a <i>Thomas Kurtz</i> navrhli programovací jazyk <i>BASIC</i> s&nbsp;ohledem na to, aby se jednalo o jazyk využitelný pro prakticky libovolné úlohy, který by byl jednoduchý a současně i nezávislý na použitém hardware i operačním systému. Některé příkazy (jejich syntaxe i sémantika) jsou založeny na <i>FORTRANu</i> a <i>ALGOLu</i>, ovšem oproti oběma zmíněným jazykům byly první verze <i>BASICu</i> mnohem jednodušší a v&nbsp;několika ohledech i omezenější &ndash; na rozdíl od <i>ALGOLu</i> například <i>BASIC</i> po velmi dlouhou dobu postrádal možnost definice víceřádkových funkcí či uživatelských datových typů, <i>FORTRAN</i> navíc nabízel například funkce pro práci se soubory, formátovací příkazy, podporu pro komplexní čísla a od verze <i>FORTRAN II</i> taktéž uživatelské podprogramy.  Původní verze <i>BASICu</i> byla skutečně velmi jednoduchá, což je pro výuku základů programování spíše pozitivní vlastnost &ndash; jazyk obsahoval pouze osmnáct příkazů, deset funkcí a <strong>ne</strong>umožňoval deklarovat vícerozměrná pole ani řetězce.</p>

<img src="http://i.iinfo.cz/images/403/pc115-1.png" width="356" height="447" alt=" " />
<p><i>Obrázek 11: Přední stránka manuálu k&nbsp;historicky první verzi
programovacího jazyka BASIC.</i></p>

<p>Příkazy dostupné v&nbsp;první verzi <i>BASICu</i> jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příkaz</th><th>Popis</th></tr>
<tr><td>REM   </td><td>začátek komentáře</td></tr>
<tr><td>DEF   </td><td>definice jednořádkové funkce</td></tr>
<tr><td>DIM   </td><td>definice jednorozměrného pole</td></tr>
<tr><td>LET   </td><td>přiřazení hodnoty výrazu do proměnné</td></tr>
<tr><td>GOTO  </td><td>skok na zadané číslo řádku</td></tr>
<tr><td>GOSUB </td><td>skok do (nepojmenovaného) podprogramu</td></tr>
<tr><td>RETURN</td><td>návrat z&nbsp;podprogramu</td></tr>
<tr><td>IF    </td><td>začátek podmínky</td></tr>
<tr><td>THEN  </td><td>začátek těla podmínky</td></tr>
<tr><td>FOR   </td><td>začátek počítané smyčky</td></tr>
<tr><td>TO    </td><td>za tímto příkazem je koncová hodnota počitadla smyčky</td></tr>
<tr><td>STEP  </td><td>krok, o který se změní počitadlo smyčky po jedné iteraci</td></tr>
<tr><td>NEXT  </td><td>konec počítané smyčky</td></tr>
<tr><td>PRINT </td><td>tisk výsledné hodnoty výrazu</td></tr>
<tr><td>DATA  </td><td>datová sekce programu obsahující statická data</td></tr>
<tr><td>READ  </td><td>načtení hodnot uložených v&nbsp;sekci DATA</td></tr>
<tr><td>STOP  </td><td>zastavení programu na tomto příkazu</td></tr>
<tr><td>END   </td><td>konec programu, jedná se o příkaz umístěný na posledním řádku</td></tr>
</table>

<a href="http://i.iinfo.cz/images/403/pc115-2.jpg"><img src="http://i.iinfo.cz/images/403/pc115-2-prev.jpg" width="364" height="270" alt=" " /></a>
<p><i>Obrázek 12: Program zapsaný v&nbsp;AppleSoft BASICu spuštěný na počítači Apple II.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Goto considered harmful</h2>

<img src="http://i.iinfo.cz/images/403/pc115-9.png" width="336" height="240" alt=" " />
<p><i>Obrázek 13: Práce s&nbsp;numerickými proměnnými a poli v&nbsp;BASICU.  Povšimněte si, že na řádku 50 se do proměnné A vloží hodnota 0 a současně se vytvoří numerické proměnné B a C inicializované na nulu. Dále se na řádku 70 vytvoří desetiprvkové pole, na řádku 80 se nastaví hodnota prvního prvku tohoto pole na 42 a na řádku 100 se vypíše hodnota zdánlivě neinicializovaného prvku číslo 2 (který je ve skutečnosti automaticky nastaven na nulu).</i></p>

<a href="http://i.iinfo.cz/images/403/pc115-12.png"><img src="http://i.iinfo.cz/images/403/pc115-12-prev.png" width="357" height="270" alt=" " /></a>
<p><i>Obrázek 14: Demonstrační příklad zapsaný v&nbsp;Sinclair BASICu.  Jednotlivé příkazy nebyly vypisovány znak po znaku, ale použily se klávesové zkratky, které si uživatelé nemuseli pamatovat, neboť je měli natištěné přímo na klávesnici.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vznik programovacího jazyka BBC BASIC</h2>

<p>Velmi důležitým dialektem BASICu, který byl velmi úspěšný především v&nbsp;západních zemích (ovšem nikoli v&nbsp;ČSSR, kde panovala, podobně jako v&nbsp;dalších státech RVHP, poněkud specifická situace), je <strong>BBC BASIC</strong>, jehož původním autorkou je <i>Sophie Wilsonová</i> a mezi další autory, kteří například provedli portaci tohoto programovacího jazyka na jiné platformy, patří i známý <i>Richard Russell</i>, který stále o tomto jazyku udržuje stránky dostupné na adrese <a href="http://www.bbcbasic.co.uk/index.html">http://www.bbcbasic.co.uk/index.html</a> (z&nbsp;této stránky si můžete stáhnout i variantu BBC BASICu doplněnou o podporu knihovny SDL 2 a dostupnou i na Linux. K&nbsp;dispozici je ovšem i čistě terminálová varianta určená opět pro Linux a mnohé další varianty (Windows apod.).</p>

<p>Tento dialekt programovacího jazyka BASIC má poměrně zajímavou a taktéž dlouhou historii. Za jeho vznikem a vývojem stála, jak již ostatně název tohoto programovacího jazyka napovídá, britská <i>BBC</i>, která na počátku osmdesátých let minulého století chtěla vytvořit počítač (samozřejmě s&nbsp;nezbytným programovým vybavením), který by byl vhodný pro výuku a který by bylo možné masově rozšířit jak mezi školy, tak i na právě vznikající trh s&nbsp;domácími osmibitovými mikropočítači. Ovšem vzápětí se ukázalo, že samotná <i>BBC</i> nemá prostředky na to, aby sama v&nbsp;rozumném čase navrhla a následně masově vyráběla počítač, jenž byl mohl svými parametry i cenou konkurovat domácím osmibitovým počítačům vyráběným specializovanými firmami, které právě začaly poměrně překotným způsobem vznikat (popř.&nbsp;se jednalo o divize již zavedených technologických firem). Z&nbsp;tohoto důvodu <i>BBC</i> vypsala tendr, z&nbsp;něhož vyšla vítězně firma <i>Acorn Computers</i> z&nbsp;Cambridge. Historie <i>BBC BASICu</i> začala...</p>

<img src="http://i.iinfo.cz/images/605/pc118sada1-2.jpg" width="400" height="463" alt=" " />
<p><i>Obrázek 3: Dobový plakát s&nbsp;počítačem Acorn BBC Micro.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rozšíření BBC BASICu na další počítačové platformy</h2>

<p>Společnost <i>Acorn Computers</i> již v&nbsp;době, kdy tendr vypsaný <i>BBC</i> probíhal, konstruovala svoje počítače nazvané <i>Atom</i> vybavené sice poměrně rychlým, zato však omezeným a nekompatibilním dialektem BASICu, který se ukázal být nepříliš vhodný pro počítač určený mj.&nbsp;i pro výuku (jednou z&nbsp;pozitivních vlastností interpretru tohoto BASICu byla možnost zápisu assembleru spolu s&nbsp;BASICovými programy, která se později objevila i v&nbsp;<i>BBC BASICu</i>). Z&nbsp;tohoto důvodu <i>BBC</i> zpočátku uvažovala o tom, že nakoupí licence na dialekt BASICu nabízený firmou <i>Microsoft</i> (viz též předchozí tři části tohoto seriálu), ovšem tento programovací jazyk, přesněji řečeno jeho varianta pro osmibitové mikroprocesory, postrádal některé vlastnosti, které byly vyžadovány k&nbsp;tomu, aby bylo možné tento dialekt použít pro potřeby výuky &ndash; týkalo se to například nedostupnosti již zmíněných programových konstrukcí umožňujících strukturované programování, taktéž nemožnosti použití dlouhých názvů proměnných (nikoli pouze jedno- či dvouznakových) atd.</p>

<img src="http://i.iinfo.cz/images/105/pc117-16.png" width="256" height="192" alt=" " />
<p><i>Obrázek 4: Úvodní obrazovka BBC BASICu ve verzi pro ZX Spectrum. Tato verze vznikla později než původní dialekt pro počítače Acorn BBC Micro, mj.&nbsp;i z&nbsp;toho důvodu, že nejdříve musel být tento dialekt BASICu portován na mikroprocesory Intel 8080 a Zilog Z80 (a samozřejmě také proto, že ZX Spectrum začalo být prodáváno později než Acorn BBC Micro).</i></p>

<p>Z&nbsp;těchto důvodů bylo nakonec od myšlenky licencování <i>Microsoft BASICu</i> odstoupeno a pro nově vznikající platformu nazvanou příhodně <i>Acorn BBC Micro</i> byl vytvořen nový jazyk s&nbsp;názvem <i>BBC BASIC</i>, který byl mj.&nbsp;navržen takovým způsobem, aby nebyl závislý na konkrétní počítačové platformě. Původní verze programovacího jazyka <i>BBC BASIC</i> z&nbsp;roku 1981 byla určena pro počítače vybavené osmibitovými mikroprocesory <i>MOS 6502</i>, ovšem v&nbsp;pozdějších letech došlo k&nbsp;jeho rozšíření i na další mikroprocesory a počítačové platformy, viz též údaje na stránce <a href="http://mdfs.net/Software/BBCBasic/">http://mdfs.net/Software/BBCBasic/</a>.</p>

<a href="http://i.iinfo.cz/images/605/pc118sada1-3.jpg"><img src="http://i.iinfo.cz/images/605/pc118sada1-3-prev.jpg" width="370" height="257" alt=" " /></a>
<p><i>Obrázek 5: Osmibitový mikropočítač Acorn BBC Micro.</i></p>

<p>Ve své době se jednalo o nejrozšířenější multiplatformní dialekt BASICu a současně i o jeden z&nbsp;nejrozšířenějších dialektů nějakého programovacího jazyka vůbec, protože byl portován na minimálně sedm různých mikroprocesorů (kromě původního <i>MOS 6502</i> i na <i>Intel 8080</i>, <i>Zilog Z80</i>, řadu <i>Motorola M68000</i>, řadu <i>Intel 80x86</i>, <i>ARM</i> atd.) a takřka neuvěřitelných více než 30 různých počítačových platforem, včetně velké části osmibitových mikropočítačů, <i>Amigy</i>, osobních počítačů PC s&nbsp;DOSem a taktéž <i>Microsoft Windows</i>. Původní verze tohoto jazyka byla napsána v&nbsp;assembleru, což samozřejmě znamenalo nutnost přepsání alespoň části interpretru při portaci na nový typ mikroprocesoru, ovšem posléze došlo k&nbsp;přepsání celého interpretru do programovacích jazyků C a C++, což umožnilo provádět portace na nové platformy nepoměrně snadněji než v&nbsp;případě přepisu zdrojových kódů v&nbsp;assembleru (i když tyto zdrojové kódy obsahovaly velké množství maker, takže se samotný zápis interpretru podobal spíše <i>autokódu</i> než assembleru).</p>

<a href="http://i.iinfo.cz/images/605/pc118sada1-4.jpg"><img src="http://i.iinfo.cz/images/605/pc118sada1-4-prev.jpg" width="365" height="270" alt=" " /></a>
<p><i>Obrázek 6: Programovací jazyk BBC BASIC byl portován dokonce i na osobní počítače PC s&nbsp;nainstalovaným operačním systémem Microsoft Windows.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Základní vlastnosti programovacího jazyka BBC BASIC</h2>

<p>V&nbsp;předchozí kapitole jsme si řekli, že <i>BBC BASIC</i> byl portován na více než třicet různých počítačových platforem, což svědčí jak o poměrně velké oblibě tohoto programovacího jazyka, tak i o tom, že jeho vlastnosti umožnily tvorbu takových aplikací, které se skutečně vyplatilo používat na různých platformách, tj.&nbsp;především aplikací udržovatelných (v&nbsp;opačném případě by bylo pravděpodobně efektivnější celou aplikaci přepsat). Pojďme si nyní některé vlastnosti <i>BBC BASICu</i> přiblížit. Na rozdíl od některých jednodušších implementací programovacího jazyka BASIC (z&nbsp;nichž mnohé jsme si již popsali v&nbsp;předchozích částech tohoto seriálu), bylo možné v&nbsp;<i>BBC BASICu</i> tvořit proměnné, jejichž identifikátory neměly (prakticky) omezenou délku, přičemž všechny znaky názvu proměnné měly význam. O této "maličkosti" se zmiňuji proto, že existovaly dialekty BASICu, kde sice bylo možné používat relativně dlouhé názvy proměnných, ale pouze prvních <i>n</i> znaků (kde <i>n</i> bylo většinou rovno jedné, dvěma, pěti či osmi) bylo skutečně rozeznávaných, takže tyto BASICy například považovaly proměnné nazvané <strong>TOTALPROFIT</strong> a <strong>TOTALLOSS</strong> za rovnocenné (zde si můžeme pouze představovat, jakými problémy museli procházet programátoři, kteří portovali aplikace z&nbsp;&bdquo;vyšší&ldquo; verze BASICu do nějaké verze jednodušší).</p>

<a href="http://i.iinfo.cz/images/605/pc118sada1-5.png"><img src="http://i.iinfo.cz/images/605/pc118sada1-5-prev.png" width="370" height="210" alt=" " /></a>
<p><i>Obrázek 7: Screenshot obrazovky původního BBC BASICu spuštěného v&nbsp;emulátoru počítače Acorn BBC Micro.</i></p>

<p>Další vlastností <i>BBC BASICu</i>, která se postupem času rozšířila i na některé další dialekty tohoto programovacího jazyka, byla možnost práce s&nbsp;celočíselnými proměnnými, které byly na většině platforem interně ukládány jako 32bitové hodnoty ve dvojkovém doplňku. Celočíselné proměnné se od proměnných reálných (přesněji řečeno od proměnných uložených ve formátu plovoucí řádové čárky) odlišovaly tím, že se za jejich název přidával znak '%' (procento), což spolu s&nbsp;existencí řetězcových proměnných znamenalo, že identifikátory <strong>TEST</strong>, <strong>TEST%</strong> a <strong>TEST$</strong> byly považovány za tři odlišné proměnné (dnes bychom pravděpodobně řekli, že celočíselné, reálné a řetězcové proměnné měly oddělené jmenné prostory :-). Pro práci s&nbsp;řetězci byly zvoleny stejně pojmenované funkce, jaké můžeme nalézt v&nbsp;interpretrech MS BASICu &ndash; <strong>LEFT$</strong>, <strong>RIGHT$</strong> a <strong>MID$</strong> (tyto funkce se však daly použít i na levé straně přiřazovacího příkazu jako omezovače podřetězce, který se měl změnit), navíc bylo možné pro nalezení podřetězce v&nbsp;řetězci použít příkaz <strong>INSTR</strong>.</p>

<img src="http://i.iinfo.cz/images/605/pc118sada1-6.png" width="96" height="64" alt=" " />
<p><i>Obrázek 8: BBC BASIC byl portován i na programovatelné kalkulačky TI-83+/TI-84+ s&nbsp;grafickým displejem. Zde je výsledek běhu programu pro výpočet Mandelbrotovy množiny.</i></p>

<p>Ovšem největší předností <i>BBC BASICu</i> byla možnost zapisovat programové smyčky pomocí strukturovaných výrazů, nikoli s&nbsp;použitím příkazu <strong>GOTO</strong>, i když tato možnost zůstala zachována. Spolu s&nbsp;odstraněním nutnosti používat <strong>GOTO</strong> byla z&nbsp;<i>BBC BASICu</i> odstraněna povinnost číslovat všechny programové řádky. Poněkud paradoxní přitom je, že poslední verze učebnice <i>BBC BASICu</i> (která je mj.&nbsp;dostupná i na Internetu), se o příkazu <strong>GOTO</strong> a o číslování řádků zmiňuje pouze okrajově, což znamená, že tento příkaz již dávno není zapotřebí ani pro psaní školních ani reálných aplikací. Následující úryvek programu napsaný v&nbsp;<i>BBC BASICu</i> ukazuje typické použití zastaralého příkazu <strong>GOTO</strong>, ovšem čísla programových řádků jsou zapisována pouze tam, kde je to skutečně zapotřebí &ndash; v&nbsp;ukázkovém programu se jedná pouze o jediný řádek představující cíl skoku, pomocí něhož je implementována nekonečná smyčka. Povšimněte si taktéž toho, že příkaz <strong>INPUT</strong> (čtení dat ze standardního vstupu) může obsahovat zprávu zobrazenou uživateli:</p>

<pre>
   REM Cisla radku lze pouzit pouze tam,
   REM kde je to nezbytne nutne kvuli
   REM prikazum GOTO a GOSUB.
   REM --------------------------------
   REM Vypocet obvodu kruznice:
20 INPUT "Enter the radius " Radius
   Area=PI*Radius^2
   PRINT "Area of the circle is " ;Area
   GOTO 20
   END
</pre>

<p>Následující příklad, opět určený pro programovací jazyk <i>BBC BASIC</i>, obsahuje pouze strukturované programové smyčky typu <strong>REPEAT-UNTIL</strong> s&nbsp;testem provedeným na konci těla smyčky:</p>

<pre>
REPEAT
    INPUT ' "What number should I stop at", num
    i=0
    REPEAT
        i=i+1
        PRINT i;
    UNTIL i=100 OR i=num
UNTIL num=-1
</pre>

<p>Další důležitou vlastností <i>BBC BASICu</i>, která umožnila tvorbu i poměrně složitých aplikací, byla možnost deklarace uživatelských procedur a funkcí: BASIC totiž, na rozdíl od céčka či Javy, poměrně striktně rozlišovat mezi procedurou (tj.&nbsp;příkazem spouštěným s&nbsp;parametry, ale nevracejícím žádnou hodnotu) a funkcí vracející vždy nějakou hodnotu, která musela být v&nbsp;programu zpracována (byla vždy součástí výrazu, například výrazu přiřazeného nějaké proměnné či vyčíslovaného v&nbsp;rámci rozhodovací konstrukce <strong>IF-THEN</strong>). Pomocí procedur a funkcí bylo možné celou aplikaci rozdělit na menší části, které mohly být zpracovány nezávisle na sobě a taktéž nezávisle na sobě testovány. Následuje příklad definice nové uživatelské funkce nazvané <strong>FN_Square</strong> a použití (zavolání) této funkce z&nbsp;programu. Kromě způsobu definice uživatelské funkce (zejména způsobu výpočtu její návratové hodnoty) si povšimněte, že zdrojový kód tohoto příkladu neobsahuje žádná čísla řádků, na rozdíl od &bdquo;klasického&ldquo; BASICu, kde to bylo striktně vyžadováno:</p>

<pre>
REM Nova funkce nazvana FN_Square
DEF FN_Square(Num)
=Num^2
&nbsp;
REM Pouziti funkce FN_Square pri
REM vypoctu druhe mocniny hodnoty
REM promenne A
INPUT "Enter numeric value" A
B=FN_Square(A)
PRINT A;" squared is ";B
END 
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Kombinace programů psaných v&nbsp;BBC BASICu a assembleru</h2>

<p>Mezi další zajímavou (a v&nbsp;tomto případě i poměrně vzácnou a v&nbsp;jiných dialektem BASICu málo viděnou) vlastnost programovacího jazyka <i>BBC BASIC</i> patří možnost kombinace programu zapsaného v&nbsp;BASICu s&nbsp;částmi zapisovanými v&nbsp;assembleru, tj.&nbsp;v&nbsp;nízkoúrovňovém jazyku symbolických instrukcí odpovídajícímu (binárním) strojovým instrukcím použitého mikroprocesoru. Tato pro mnohé programátory důležitá vlastnost byla do <i>BBC BASICu</i> přidána ještě v&nbsp;dobách, kdy byl tento jazyk vyvíjen pro osmibitové mikroprocesory <i>MOS 6502</i>, ovšem později, spolu s&nbsp;poměrně rychlým rozšiřováním <i>BBC BASICu</i> na další platformy, byla přidána i podpora pro symbolické instrukce mikroprocesoru <i>Intel 8080</i>, <i>Zilog Z80</i> a dalších osmibitových a o několik let později i šestnáctibitových a třicetidvoubitových mikroprocesorů, zejména úspěšných mikroprocesorových řad <i>Intel 80x86</i> a <i>Motorola M68000</i> používaných v&nbsp;mnoha osobních počítačích.</p>

<img src="http://i.iinfo.cz/images/605/pc118sada1-7.png" width="110" height="246" alt=" " />
<p><i>Obrázek 9: Programovatelná grafická kalkulačka TI 83+, na níž byl taktéž portován BBC BASIC.</i></p>

<p>Ve fragmentu programu, který je vypsán pod tímto odstavcem je ukázán způsob současného použití BASICu a assembleru osmibitového mikroprocesoru <i>Zilog Z80</i>. Povšimněte si především použití hranatých závorek pro označení části programu napsaného v&nbsp;assembleru i toho, že v&nbsp;assembleru se poznámky i odkazy pro skoky zapisují odlišným způsobem než v&nbsp;BASICu (v&nbsp;assembleru se používají textová navěští &ndash; labely, zatímco v&nbsp;BASICu čísla řádků):</p>

<pre>
100 DIM code 15        :REM Reserve space for 16 bytes of code
110 bdos=5
120 FOR pass=0 TO 1    :REM Implement 2-pass assembly
130 P%=code            :REM Set program counter at start of each pass
140 [OPT pass*3        ;Enter assembler and select listing on pass 2
150 LD D,95:LD E,ASC"!"
160 .loop              ;A label
170 LD C,2             ;Source statements
180 PUSH DE:CALL bdos:POP DE
190 INC E:DEC D:JR NZ,loop
200 RET:]              :REM Exit assembler
210 NEXT pass
220 CALL code          :REM Execute assembly language routine
</pre>

<p><img src="http://i.iinfo.cz/images/526/pc106-8.jpg" alt="pc106" height="540" width="403" /></p>
<p><i>Obrázek 10: Známý algoritmus bublinkového řazení (bubble sort) implementovaný v&nbsp;BASICu. Povšimněte si, jakým způsobem se používá proměnná <strong>I</strong>, která zde slouží pro úschovu příznaku, že bylo v&nbsp;dané iteraci provedeno prohození alespoň jedné dvojice prvků. V&nbsp;některých interpretrech BASICu lze řádek 210 zjednodušit tím, že se neprovede porovnání hodnoty proměnné <strong>I</strong> s&nbsp;jedničkou, ale přímo hodnota <strong>I</strong> se považuje za pravdivostní hodnotu.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p>Programovací jazyk BASIC, resp.&nbsp;přesněji řečeno jeho různé dialekty, byl portován i na počítače IBM PC. Ostatně originální PC od společnosti IBM bylo standardně vybaveno interpretrem BASICu, který se spustil v&nbsp;případě, že nebyl nalezen boot sektor operačního systému. Vzhledem k&nbsp;tomu, že počítače IBM PC začaly být zákazníkům, především firmám, nabízeny již v&nbsp;roce 1981, tj.&nbsp;v&nbsp;dobách kralování osmibitových domácích mikropočítačů, byly i první modely IBM PC vybaveny, podobně jako naprostá většina osmibitových počítačů, interpretrem programovacího jazyka <i>BASIC</i> uloženého v&nbsp;paměti ROM.</p>

<a href="http://i.iinfo.cz/images/354/pc120-1.jpg"><img src="http://i.iinfo.cz/images/354/pc120-1-prev.jpg" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 1: Fotografie obrazovky počítače IBM PC se spuštěným interpretrem
BASICu, v&nbsp;němž je napsán velmi jednoduchý program.</i></p>

<p>Na originálním IBM PC byla kapacita ROM rovna 40 kB, přičemž BASIC z&nbsp;této kapacity využíval pouze 8 kB a zbylých 32 kB sloužilo pro uložení BIOSu (v&nbsp;dalších modelech IBM PC se kapacita ROM kvůli podpoře většího množství zařízení zvyšovala, typicky na hodnotu 64 kB). Interpret <i>BASICu</i> uložený v&nbsp;ROM se spouštěl snadno &ndash; v&nbsp;případě, že počítač po svém zapnutí nenašel v&nbsp;disketové jednotce disketu s&nbsp;operačním systémem (podpora pro pevné disky byla zavedena až s&nbsp;modelem PC XT v&nbsp;roce 1983), spustil se automaticky interpret <i>BASICu</i>. Dialekt programovacího jazyka <i>BASIC</i> uložený v&nbsp;ROM se sice nazýval <i>IBM Cassette BASIC</i> (i když se na obrazovce ohlašoval nápisem &bdquo;IBM Personal Computer Basic&ldquo;), ve skutečnosti se však jednalo o interpret BASICu vytvořený firmou Microsoft, která ho licencovala firmě IBM jako jeden z&nbsp;prvních softwarových produktů pro počítače PC. Poté následoval operační systém MS-DOS, ale o této poměrně historické události si však řekneme více podrobností v&nbsp;jiném seriálu. Při převodu <i>BASICu</i> na počítače IBM PC použila firma Microsoft svůj BASIC určený pro operační systém CP/M.</p>

<a href="http://i.iinfo.cz/images/354/pc120-2.png"><img src="http://i.iinfo.cz/images/354/pc120-2-prev.png" width="370" height="202" alt=" " /></a>
<p><i>Obrázek 2: Interpret IBM Cassette BASICu spuštěný v&nbsp;emulátoru IBM
PC. Při spuštění emulátoru byl použit obraz originálních paměťových modulů
(ROM) firmy IBM.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. GW BASIC</h2>

<p>Zatímco <i>IBM Cassette BASIC</i> byl používán pouze na originálních počítačích IBM PC, další dialekt programovacího jazyka <i>BASIC</i>, který byl dostupný všem uživatelům, protože měl formu běžné (spustitelné) aplikace určené pro operační systém MS-DOS. Jedná se o <i>GW-BASIC</i> vytvořený opět firmou Microsoft. Vývoj tohoto programovacího jazyka a taktéž standardizaci jeho příkazů napříč několika operačními systémy a platformami vedl <i>Greg Whitten</i>, který do firmy Microsoft nastoupil již v&nbsp;roce 1979 a měl tak velmi nízké číslo zaměstnance (sám uvádí, že pokud si dobře pamatuje, měl číslo 16). Název tohoto programovacího jazyka zvolil sám Bill Gates, přičemž písmena &bdquo;GW&ldquo; oficiálně znamenaly zkratku dvousloví &bdquo;Gee-Whiz&ldquo;, pravděpodobně se však původně jednalo o iniciály Grega Whittena.  <i>GW-BASIC</i> se stal mezi uživateli počítačů IBM PC (především v&nbsp;dobách PC XT) velmi populární, i když se jednalo o dialekt, který nijak zvlášť neodlišoval od dialektů BASICu dostupných na osmibitových mikropočítačích &ndash; dokonce bylo možné používat pouze jeden segment paměti, tj.&nbsp;64 kB, i když samotný MS-DOS dokázal obsloužit 640 kB, resp.&nbsp;1 MB pokud započítáme i oblast BIOSu a grafické paměti.</p>

<a href="http://i.iinfo.cz/images/354/pc120-4.png"><img src="http://i.iinfo.cz/images/354/pc120-4-prev.png" width="370" height="231" alt=" " /></a>
<p><i>Obrázek 4: Úvodní obrazovka GW-BASICu po jeho spuštění v&nbsp;emulátoru PC (zde se konkrétně jedná o DOSBOX).</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. QBasic</h2>

<p>Jedním z&nbsp;nejznámějších a pravděpodobně i nejpoužívanějších dialektů programovacího jazyka BASIC na osobních počítačích kompatibilních s&nbsp;IBM PC je bezesporu <i>QBasic</i> firmy Microsoft, která tento BASIC začala dodávat společně s&nbsp;<i>MS DOSem 5.0</i> a později byl dostupný například i pro operační systémy <i>Windows 95</i> a jako jedna z&nbsp;přídavných utilit i pro <i>Windows NT</i>. Jedná se, na rozdíl od dále popsaného <i>QuickBASICu</i>, o interpret BASICu, což znamená, že programy se nepřekládaly do strojového kódu, ale &bdquo;pouze&ldquo; byly prováděny interpretrem, se všemi přednostmi a zápory tohoto řešení. Mezi přednosti patřilo především to, že <i>QBasic</i> po svém spuštění prakticky nepotřeboval přistupovat k&nbsp;paměťovému zařízení (disketové jednotce, pevnému disku), což mělo velký význam především tehdy, pokud byl počítač vybaven pomalejším pevným diskem (doba PC AT a disků s&nbsp;kapacitami typicky 20 MB, 40 MB a 80 MB). Taktéž spuštění či znovuspuštění programu bylo takřka okamžité, protože odpadl čas potřebný pro překlad zdrojového textu do strojového kódu mikroprocesoru.</p>

<a href="http://i.iinfo.cz/images/354/pc120-18.png"><img src="http://i.iinfo.cz/images/354/pc120-18-prev.png" width="370" height="231" alt=" " /></a>
<p><i>Obrázek 18: Úvodní zpráva zobrazená po spuštění QBasicu.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>General Electric GE-400<br />
<a href="http://www.feb-patrimoine.com/PROJET/ge400/ge-400.htm">http://www.feb-patrimoine.com/PROJET/ge400/ge-400.htm</a>
</li>

<li>GE-400 Time-sharing information systems: <br />
<a href="http://www.computerhistory.org/collections/accession/102646147">http://www.computerhistory.org/collections/accession/102646147</a>
</li>

<li>A brief history of the development of BASIC (pravděpodobně již nefunkční odkaz)<br />
<a href="http://www.phys.uu.nl/~bergmann/history.html">http://www.phys.uu.nl/~bergmann/history.html</a>
</li>

<li>History of BASIC (PDF)<br />
<a href="http://www.q7basic.org/History%20of%20BASIC.pdf">http://www.q7basic.org/History%20of%20BASIC.pdf</a>
</li>

<li>Dartmouth College Computation Center. 1964.-The original Dartmouth BASIC manual<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf</a>
</li>

<li>The Original BASIC<br />
<a href="http://www.truebasic.com/">http://www.truebasic.com/</a>
</li>

<li>BASIC - Beginners All-purpose Symbolic Instruction Code<br />
<a href="http://hopl.murdoch.edu.au/showlanguage.prx?exp=176">http://hopl.murdoch.edu.au/showlanguage.prx?exp=176</a>
</li>

<li>The History of the Mainframe Computer<br />
<a href="http://www.vikingwaters.com/htmlpages/MFHistory.htm">http://www.vikingwaters.com/htmlpages/MFHistory.htm</a>
</li>

<li>Dartmouth Time Sharing System<br />
<a href="http://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System">http://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System</a>
</li>

<li>General Electric (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/General_Electric">http://en.wikipedia.org/wiki/General_Electric</a>
</li>

<li>GE 225 vs. IBM 1401<br />
<a href="http://ed-thelen.org/GE225-IBM1401.html">http://ed-thelen.org/GE225-IBM1401.html</a>
</li>

<li>A GE-225 is found<br />
<a href="http://ed-thelen.org/comp-hist/GE225.html">http://ed-thelen.org/comp-hist/GE225.html</a>
</li>

<li>G.E. 200 Series Computers<br />
<a href="http://www.smecc.org/g_e__200_series_computers.htm">http://www.smecc.org/g_e__200_series_computers.htm</a>
</li>

<li>DTSS - Dartmouth Time Sharing System<br />
<a href="http://dtss.dartmouth.edu/index.php">http://dtss.dartmouth.edu/index.php</a>
</li>

<li>John G. Kemeny: BASIC and DTSS: Everyone a Programmer<br />
<a href="http://dtss.dartmouth.edu/everyoneaprogrammer.php">http://dtss.dartmouth.edu/everyoneaprogrammer.php</a>
</li>

<li>GE-200 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-200_series">http://en.wikipedia.org/wiki/GE-200_series</a>
</li>

<li>GE-400 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-400_series">http://en.wikipedia.org/wiki/GE-400_series</a>
</li>

<li>GE-600 series (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/GE-600_series">http://en.wikipedia.org/wiki/GE-600_series</a>
</li>

<li>ZX Basic Manual<br />
<a href="http://www.worldofspectrum.org/ZXBasicManual/">http://www.worldofspectrum.org/ZXBasicManual/</a>
</li>

<li>ZX81 BASIC Programming<br />
<a href="http://www.worldofspectrum.org/ZX81BasicProgramming/">http://www.worldofspectrum.org/ZX81BasicProgramming/</a>
</li>

<li>Sinclair BASIC History<br />
<a href="http://scratchpad.wikia.com/wiki/Sinclair_BASIC_History">http://scratchpad.wikia.com/wiki/Sinclair_BASIC_History</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Sinclair BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Sinclair_BASIC">http://en.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Beta_BASIC">http://en.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>Beta BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Beta_BASIC">http://cs.wikipedia.org/wiki/Beta_BASIC</a>
</li>

<li>BETA BASIC NEWSLETTER No 8<br />
<a href="http://spectrum128.ru/help/BetaBasicNewsletter8.pdf">http://spectrum128.ru/help/BetaBasicNewsletter8.pdf</a>
</li>

<li>R. T. RUSSELL: The home of BBC BASIC<br />
<a href="http://www.rtrussell.co.uk/">http://www.rtrussell.co.uk/</a>
</li>

<li>R. T. RUSSELL: A History of BBC BASIC<br />
<a href="http://www.cix.co.uk/~rrussell/bbcbasic/history.html">http://www.cix.co.uk/~rrussell/bbcbasic/history.html</a>
</li>

<li>SuperBASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/SuperBASIC">http://en.wikipedia.org/wiki/SuperBASIC</a>
</li>

<li>SuperBASIC (Wikipedia CZ)<br />
<a href="http://en.wikipedia.org/wiki/SuperBASIC">http://en.wikipedia.org/wiki/SuperBASIC</a>
</li>

<li>Laser Basic/Laser Compiler<br />
<a href="http://www.sincuser.f9.co.uk/049/laser.htm">http://www.sincuser.f9.co.uk/049/laser.htm</a>
</li>

<li>Laser BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Laser_BASIC">http://cs.wikipedia.org/wiki/Laser_BASIC</a>
</li>

<li>BBC BASIC<br />
<a href="http://www.bbcbasic.co.uk/bbcbasic.html">http://www.bbcbasic.co.uk/bbcbasic.html</a>
</li>

<li>BBC BASIC<br />
<a href="http://mdfs.net/Software/BBCBasic/">http://mdfs.net/Software/BBCBasic/</a>
</li>

<li>BBC BASIC (Z80) for the ZX Spectrum<br />
<a href="http://mdfs.net/Software/BBCBasic/Spectrum/">http://mdfs.net/Software/BBCBasic/Spectrum/</a>
</li>

<li>BBC BASIC (Wikipedia CZ)<br />
<a href="http://en.wikipedia.org/wiki/BBC_BASIC">http://en.wikipedia.org/wiki/BBC_BASIC</a>
</li>

<li>BeebWiki &ndash; 8-bit Acorn Computer Wiky<br />
<a href="http://beebwiki.jonripley.com/Main_Page">http://beebwiki.jonripley.com/Main_Page</a>
</li>

<li>Porovnání osmibitů<br />
<a href="http://porovnani8bitu.spaces.live.com/">http://porovnani8bitu.spaces.live.com/</a>
</li>

<li>Rosetta Code &ndash; Main Page<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Rosetta Code &ndash; Category Basic<br />
<a href="http://rosettacode.org/wiki/Category:BASIC">http://rosettacode.org/wiki/Category:BASIC</a>
</li>

<li>QBasicJedi<br />
<a href="http://www.freewebs.com/qbasicjedi/">http://www.freewebs.com/qbasicjedi/</a>
</li>

<li>QBasic/QuickBasic Downloads<br />
<a href="http://www.freewebs.com/qbasicjedi/qbdownloads.html">http://www.freewebs.com/qbasicjedi/qbdownloads.html</a>
</li>

<li>QuickBASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/QuickBASIC">http://cs.wikipedia.org/wiki/QuickBASIC</a>
</li>

<li>QBasic.com<br />
<a href="http://www.qbasic.com/">http://www.qbasic.com/</a>
</li>

<li>QBasic (Wikipedia)<br />
<a href="http://cs.wikipedia.org/wiki/QBasic">http://cs.wikipedia.org/wiki/QBasic</a>
</li>

<li>Dialling with QBASIC<br />
<a href="http://www.mysundial.ca/tsp/qbasic.html">http://www.mysundial.ca/tsp/qbasic.html</a>
</li>

<li>BASIC (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/BASIC">http://en.wikipedia.org/wiki/BASIC</a>
</li>

<li>BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/BASIC">http://cs.wikipedia.org/wiki/BASIC</a>
</li>

<li>Turbo BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Turbo_BASIC">http://cs.wikipedia.org/wiki/Turbo_BASIC</a>
</li>

<li>More BASIC Computer Games<br />
<a href="http://www.atariarchives.org/morebasicgames/">http://www.atariarchives.org/morebasicgames/</a>
</li>

<li>How to build an interpreter in Java, Part 1: The BASICs<br />
<a href="http://www.javaworld.com/jw-05-1997/jw-05-indepth.html">http://www.javaworld.com/jw-05-1997/jw-05-indepth.html</a>
</li>

<li>Apple I<br />
<a href="http://applemuseum.bott.org/sections/computers/a1.html">http://applemuseum.bott.org/sections/computers/a1.html</a>
</li>

<li>The Apple 1 history<br />
<a href="http://apple2history.org/history/ah02.html">http://apple2history.org/history/ah02.html</a>
</li>

<li>The Apple 2 history<br />
<a href="http://apple2history.org/history/ah03.html">http://apple2history.org/history/ah03.html</a>
</li>

<li>INTEGER BASIC Reference<br />
<a href="http://www.landsnail.com/a2ref2.htm">http://www.landsnail.com/a2ref2.htm</a>
</li>

<li>APPLESOFT Reference<br />
<a href="http://www.landsnail.com/a2ref.htm">http://www.landsnail.com/a2ref.htm</a>
</li>

<li>Apple II Programming<br />
<a href="http://home.swbell.net/rubywand/csa2pfaq.html">http://home.swbell.net/rubywand/csa2pfaq.html</a>
</li>

<li>Applesoft Lite: Applesoft BASIC for the Replica-1<br />
<a href="http://cowgod.org/replica1/applesoft/">http://cowgod.org/replica1/applesoft/</a>
</li>

<li>Simons' BASIC<br />
<a href="http://en.wikipedia.org/wiki/Simons'_BASIC">http://en.wikipedia.org/wiki/Simons'_BASIC</a>
</li>

<li>Simon's Basic<br />
<a href="http://www.lemon64.com/?mainurl=http%3A//www.lemon64.com/museum/list.php%3Flineoffset%3D54%26genre%3Dmanualmisc">http://www.lemon64.com/?mainurl=http%3A//www.lemon64.com/museum/list.php%3Flineoffset%3D54%26genre%3Dmanualmisc</a>
</li>

<li>BASIC<br />
<a href="http://www.c64-wiki.com/index.php/BASIC">http://www.c64-wiki.com/index.php/BASIC</a>
</li>

<li>C64 Wiki: Simons Basic<br />
<a href="http://www.c64-wiki.de/index.php/Simons_Basic">http://www.c64-wiki.de/index.php/Simons_Basic</a>
</li>

<li>Simons' Basic (evaluation)<br />
<a href="http://www.atarimagazines.com/creative/v9n11/60_Simons_Basic.php">http://www.atarimagazines.com/creative/v9n11/60_Simons_Basic.php</a>
</li>

<li>Bill Gates' Personal Easter Eggs in 8 Bit BASIC
<a href="http://www.pagetable.com/?p=43">http://www.pagetable.com/?p=43</a>
</li>

<li>Kladivo na programy (je tam třeba popsán způsob nahrávání a ochran programů protí kopírování a crackování)<br />
<a href="http://www.grandjihlava.cz/tmp/kladivo.pdf">http://www.grandjihlava.cz/tmp/kladivo.pdf</a>
</li>

<li>Didaktik Gama návod k obsluze<br />
<a href="http://www.grandjihlava.cz/tmp/navod.pdf">http://www.grandjihlava.cz/tmp/navod.pdf</a>
</li>

<li>Můj přítel Didaktik Gama<br />
<a href="http://www.grandjihlava.cz/tmp/priteldidaktik.pdf">http://www.grandjihlava.cz/tmp/priteldidaktik.pdf</a>
</li>

<li>Tip &amp; trip pro Didaktik<br />
<a href="http://www.grandjihlava.cz/tmp/tiptrikdidaktik.pdf">http://www.grandjihlava.cz/tmp/tiptrikdidaktik.pdf</a>
</li>

<li>Muzeum československých mikropočítačů<br />
<a href="http://cs-pocitace.ic.cz/">http://cs-pocitace.ic.cz/</a>
</li>

<li>Popis modulů a aplikací pro IQ-151<br />
<a href="http://cs.felk.cvut.cz/~bily/iq151/">http://cs.felk.cvut.cz/~bily/iq151/</a>
</li>

<li>IQ 151<br />
<a href="http://osmi.tarbik.com/cssr/iq151.html">http://osmi.tarbik.com/cssr/iq151.html</a>
</li>

<li>&bdquo;Domácí počítače&ldquo; nedávné minulosti<br />
<a href="http://www.fi.muni.cz/usr/jkucera/pv109/xkrejcir.htm">http://www.fi.muni.cz/usr/jkucera/pv109/xkrejcir.htm</a>
</li>

<li>ZPA: IQ-151<br />
<a href="http://www.homecomputer.de/pages/easteurope_cz.html#iq151">http://www.homecomputer.de/pages/easteurope_cz.html#iq151</a>
</li>

<li>Zrození IQ-151<br />
<a href="http://www.iq151.net/index.htm">http://www.iq151.net/index.htm</a>
</li>

<li>Stručná historie počítače IQ150/IQ151<br />
<a href="http://www.iq151.net/history.htm">http://www.iq151.net/history.htm</a>
</li>

<li>Old Computers &ndash; IQ 151<br />
<a href="http://www.old-computers.com/MUSEUM/computer.asp?st=1&c=1045">http://www.old-computers.com/MUSEUM/computer.asp?st=1&c=1045</a>
</li>

<li>Wikipedia EN: IQ 151<br />
<a href="http://en.wikipedia.org/wiki/IQ_151">http://en.wikipedia.org/wiki/IQ_151</a>
</li>

<li>Wikipedia CZ: IQ 151<br />
<a href="http://cs.wikipedia.org/wiki/IQ_151">http://cs.wikipedia.org/wiki/IQ_151</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

