<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. ALGOL-58</a></p>
<p><a href="#k03">*** 3. ALGOL-60</a></p>
<p><a href="#k04">*** 4. Tři tváře ALGOLu</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. Komu vděčíme za složené závorky a operátory ++ a --?</a></p>
<p><a href="#k17">*** 17. Vybrané vlastnosti programovacího jazyka &bdquo;B&ldquo;</a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Šedesátiny programovacího jazyka ALGOL-60</h2>

<p><i>&bdquo;Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors&ldquo;<br />Sir Tony Hoare</i></p>

<p>V&nbsp;loňském roce jsme si připomněli trojici kulatých výročí v&nbsp;oblasti programovacích jazyků. Po dvojici článků o <a href="https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/">třicátých narozeninách Turbo Pascalu 5.5</a> a <a href="https://www.root.cz/clanky/the-future-s-bright-the-future-s-cobol/">šedesátém
výročí vzniku programovacího jazyka COBOL</a> jsme si připomněli i sedmdesát let, které <a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">uběhly od vzniku nástroje</a>, který dnes nazýváme <i>assembler</i>. Některá podobně významná (a možná i důležitější) výročí si postupně připomeneme i letos. Zapomenout nesmíme především na programovací jazyk <i>ALGOL</i>, jehož nejznámější varianta, která se jmenuje <i>ALGOL-60</i>, skutečně vznikla již v&nbsp;roce 1960. Dnes se s&nbsp;tímto programovacím jazykem prakticky nesetkáme, ovšem i přesto se jedná o jeden z&nbsp;nejvýznamnějších programovacích jazyků, jaké kdy byly vytvořeny. S&nbsp;koncepcemi, které byly do ALGOLu zařazeny se setkáme nejen v&nbsp;jeho přímých následovnících (což je ve stručnosti Pascalská větev a céčková větev), ale například i mnoha LISPovských jazycích. Ty sice tvoří samostatnou větev vývoje, ovšem z&nbsp;ALGOLu se do LISPovských jazyků dostal především koncept lexikální oblasti platnosti identifikátorů.</p>

<p><div class="rs-tip-major">Poznámka: zvláštní je, že některé dobré myšlenky, které v&nbsp;ALGOLu nalezneme, nebyly plně využity v&nbsp;navazujících jazycích, znovu byly &bdquo;objeveny&ldquo; až o několik desítek let později.</div></p>


Algol ve stručnosti

<p>Jak jsme si již řekli v&nbsp;úvodním odstavci, je dnes ALGOL mrtvým jazykem, ovšem přesto jazykem s&nbsp;velkým vlivem na další vývoj IT. Jedná se o programovací jazyk, který původně vznikl za účelem snadno pochopitelného algoritmického popisu matematických (především numerických) úloh, výuku programování a vývoj překladačů. Z&nbsp;tohoto důvodu například původní návrh jazyka (<i>IAL &ndash; International Algorithmic Language</i>, později přejmenovaný na <i>ALGOL 58</i>) neobsahoval žádné konstrukce pro vstup a výstup dat, ovšem se vznikem prvních reálných překladačů se množina konstrukcí jazyka postupně rozrůstala, takže ve standardu <i>ALGOL 68</i> (poslední významný standard Algolu, který se popravdě příliš nepovedl &ndash; více za chvíli), již jazyk obsahoval jak operace vstupu a výstupu, tak i podporu pro nenumerické úlohy aj. V&nbsp;programovacím jazyce <i>ALGOL</i> byly prakticky poprvé použity konstrukce umožňující strukturované programování &ndash; týká se to především programových smyček bez návěští, podmíněných příkazů, blokové struktury programu a též lexikálního rozsahu (viditelnosti) proměnných (tuto vlastnost z&nbsp;<i>ALGOLu</i> převzal i programovací jazyk <i>Scheme</i>, který je v&nbsp;v&nbsp;mnoha jiných ohledech založený na <i>LISPu</i>).</p>

<p><i>ALGOL</i> se využíval jak pro zápis programů v&nbsp;učebnicích a vědeckých článcích, tak i v&nbsp;každodenní programátorské praxi. V&nbsp;tištěné literatuře se používal poněkud jiný způsob zápisu, protože bylo možné použít typografické zvýraznění jednotlivých prvků jazyka i sadu znaků velké a malé abecedy, zatímco některé mainframy používaly pouze znaky velké abecedy (ve skutečnosti existují minimálně tři způsoby zápisu, podrobněji se jimi budeme věnovat v&nbsp;navazujících kapitolách). Jednou ze zajímavostí je, že se tento jazyk (resp.&nbsp;jeden z&nbsp;jeho dialektů) používal i v&nbsp;SSSR, mj.&nbsp;také v&nbsp;projektu raketoplánu <i>Buran</i>. Tato verze jazyka byla dokonce v&nbsp;SSSR standardizována jako <i>GOST 10859</i>. Existuje i čínská verze tohoto jazyka, ve které se namísto znaků z&nbsp;tabulek ASCII či EBDIC používají národní znaky. Programovacím jazykem <i>ALGOL</i> se inspirovali tvůrci mnoha dalších programovacích jazyků. Jedná se například o jazyky <i>Simula</i>, <i>Pascal</i> (i další jazyky navržené N. Wirthem) a v&nbsp;neposlední řadě též trojice na sebe navazujících jazyků <i>BCPL</i>, <i>B</i> a <i>C</i>. Na syntaxi céčka jsou postaveny další jazyky, zejména <i>C++</i>, <i>Java</i> a dokonce dynamicky typovaný <i>JavaScript</i>. Těmto jazykům se proto také někdy říká &bdquo;algolské&ldquo; (Algol-like) nebo též jazyky patřící do algolské větve.</p>

<p>Na následujícím výpisu krátkého programu (jedná se o známý Bresenhamův algoritmus rasterizace úsečky) si povšimněte, že je celý program snadno pochopitelný i v&nbsp;případě, že jazyk <i>ALGOL</i> neznáte. Mnoho konstrukcí <i>ALGOLu</i> totiž skutečně &bdquo;zdomácnělo&ldquo; i v&nbsp;dalších programovacích jazycích. Poznámka: zde je použitý dialekt <i>ALGOL 68</i>, při použití <i>ALGOLu 60</i> by se například programové smyčky zapisovaly odlišným způsobem.</p>

<pre>
PRAGMAT READ "Basic_bitmap_storage.a68" PRAGMAT;
 
line OF class image := (REF IMAGE picture, POINT start, stop, PIXEL color)VOID:
BEGIN
   REAL dx = ABS (x OF stop - x OF start),
        dy = ABS (y OF stop - y OF start);
   REAL err;
   POINT here := start,
         step := (1, 1);
   IF x OF start &gt; x OF stop THEN
      x OF step := -1
   FI;
   IF y OF start &gt; y OF stop THEN
      y OF step := -1
   FI;
   IF dx &gt; dy THEN
      err := dx / 2;
      WHILE x OF here /= x OF stop DO
         picture[x OF here, y OF here] := color;
         err -:= dy;
         IF err &lt; 0 THEN
            y OF here +:= y OF step;
            err +:= dx
         FI;
         x OF here +:= x OF step
      OD
   ELSE
      err := dy / 2;
      WHILE y OF here /= y OF stop DO
         picture[x OF here, y OF here] := color;
         err -:= dx;
         IF err &lt; 0 THEN
            x OF here +:= x OF step;
            err +:= dy
         FI;
         y OF here +:= y OF step
      OD
   FI;
   picture[x OF here, y OF here] := color # ensure dots to be drawn #
END # line #;
</pre>

<img src="http://i.iinfo.cz/images/38/ibm-5-7.jpg" alt="ibm-5" height="193" width="140" />
<p><i>Obrázek 6: Jedna z&nbsp;populárních dobových učebnic ALGOLU 68.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. ALGOL-58 &ndash; jazyk inspirovaný Superplanem</h2>

Heinz Rutishauser
https://en.wikipedia.org/wiki/Heinz_Rutishauser

<p><i>&bdquo;ALGOL is probably the most influential language you’ve never heard of.&ldquo;</i></p>

IAL (International Algebraic Language)
Für
Superplan

Report on the Algorithmic Language ALGOL 60

J. W. BACKUS
F.L.BAUER
J. GREEN
H. RUTISHAUSER
C. KATZ
K. SAMELSON
J. MCCARTHY
B. VAUQUOIS
A. J. PERLIS
J. H. WEGSTEIN
A. VAN WIJNGAARDEN
M. WOODGER

formální popis syntaxe


ascii zacatek prace na standardu 1960
prvni verze 1963
revice 1967

Dartmouth ALGOL 30      1962    Thomas Eugene Kurtz et al.

first
arithmetic      first   ↑ (power)
second  ×, / (real), ÷ (integer)
third   +, -
second  <, ≤, =, ≥, >, ≠
third   ¬ (not)
fourth  ∧ (and)
fifth   ∨ (or)
sixth   ⊃ (implication)
seventh         ≡ (equivalence) 


<p><a name="k03"></a></p>
<h2 id="k03">3. ALGOL-60</h2>

<p><a name="k04"></a></p>
<h2 id="k04">4. Tři tváře Algolu</h2>

"The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent." 


nekonecna smycka

 begin
   integer i;
   for i:=1 step 0 until 2 do 
     outtext("spam")
 end

algol W

begin
    for i := 1 step 0 until 2 do write( "SPAM" )
end.


Algol

<pre>
INTEGER I;
I:=1024;
WHILE I>0 DO
BEGIN
   OUTINT(I);
   I:=I DIV 2
END
</pre>

Algol W

<pre>
begin
    integer i;
    i := 1024;
    while i > 0 do
    begin
        write( i );
        i := i div 2
    end
end.
</pre>


<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

 In my opinion, Algol W is a much better teaching language than Pascal or pretty much any of the languages which have followed it.


 In the early 1960s, the IFIP Working Group 2.1 committee was created with the mandate to design a programming language to replace Algol 60. By the time of the regular committee meeting in the fall of 1966, there were three competing proposals on the table. One of the proposals, by Niklaus Wirth, was for a language which was a relatively modest improvement over Algol 60. One of the other proposals, by Van Wijngaarden, was chosen by the committee and was to evolve into Algol 68.

As a result of the decision to pursue Van Wijngaarden's proposal, a number of the committee members, including Wirth and C.A.R. Hoare, abandoned the committee (it was, apparently, a pretty intense meeting). Wirth developed his proposal into an Algol-style language which, eventually, came to be known as Algol W (like Algol 60 before it, the Algol W language's grammar was formally described using BNF notation).


algol w
The reserved words are ABS, ALGOL (used when writing separately compiled 'modules'), AND, ARRAY, ASSERT, BEGIN, BITS, CASE, COMMENT, COMPLEX, DIV, DO, ELSE, END, FALSE, FOR, FORTRAN (used to call a separately compiled FORTRAN routine), GO TO (eek!), GOTO (sigh?), IF, INTEGER, IS, LOGICAL, LONG, NULL, OF, OR, PROCEDURE, REAL, RECORD, REFERENCE, REM, RESULT, SHL, SHORT, SHR, STEP, STRING, THEN, TRUE, UNTIL, VALUE and WHILE.

INTEGER ARRAY VECTOR(1::10);         COMMENT ten element array of integers;
REAL    ARRAY MATRIX(1::10,1::10);   COMMENT a square 10x10 array of reals;
INTEGER ARRAY RANGE(-10::10);        COMMENT a 21 element array (-10 to +10);
REFERENCE(THING) ARRAY THINGS(1::N); COMMENT an array of references to


IF IT IS PERSON THEN
   WRITE("IT is pointing at a PERSON record")
ELSE
   WRITE("IT is not pointing at a PERSON record");



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p><i>&bdquo;&ldquo;</i></p>
ALGOL is not a language you need to learn to get a job or to be a successful developer. However, it was hugely influential on both the practice and theory of computer programming.


procedure Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k);
    value n, m; array a; integer n, m, i, k; real y;
comment The absolute greatest element of the matrix a, of size n by m,
    is transferred to y, and the subscripts of this element to i and k;
begin
    integer p, q;
    y := 0; i := k := 1;
    for p := 1 step 1 until n do
        for q := 1 step 1 until m do
            if abs(a[p, q]) > y then
                begin y := abs(a[p, q]);
                    i := p; k := q
                end
end Absmax


<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

comment
begin comment
end

vyrazy

if a<0 then a+1 else a
if a<0 then a/b else if b==0 then b/a else z

2sipkan
2<sup>n</sup>
bez zavorek
(2<sup>x</sup>)<sup>y</sup>

python:
>>> 2**3**2
512
>>> 2**(3**2)
512
>>> (2**3)**2
64



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

#include <stdio.h>

void main(void)
{
    goto inside;
    int i;
    for (i=0; i<10; i++) {
        puts("*");
inside:
        puts("inside");
    }
}

package main

import "fmt"

func main() {
        var i int
        goto inside
        for i = 0; i < 10; i++ {
                fmt.Println("*")
        inside:
                fmt.Println("inside")
        }
}

./t.go:7:7: goto inside jumps into block starting at ./t.go:8:25

program goto_test;

label
    inside;
var
    i:integer;

begin
    goto inside;

    for i := 1 to 10 do
    begin
        writeln(i);
        inside:
        writeln('inside');
    end;
    readln;
end.

 Q:  begin   integer  i, k;  real  w;

      for  i:=1  step  1  until  m  do

          for  k:=i+1  step  1  until  m  do

          begin  w:=A[i,k];

             A[i,k]:=A[k,i];

             A[k,i]:=w  end  for i and k

     end  block Q


(define (print item)
     (display item)
     (newline))

(define x 1)
(define y 2)

(define (add x y)
    ; rozsah (scope) je lokální!
    (set! x (+ x y))
    x)

(print (add x y))
(print (add x y))

(set! x 10)
(print (add x y))
(print (add x y))


<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

Algol W

procedure PQ_Sink(integer value k);
begin
    logical Done;
    Done := false;

    while 2*K <= PQ_Size and not Done do
    begin
        integer J;
        J := 2 * K;
        if J < PQ_Size and PQ_Greater(J, J+1)
        then
            J := J + 1;
        if PQ_Greater(K, J)
        then begin
            PQ_Exchange(K, J);
            K := J;
        end
        else begin
            Done := true;
        end;
    end
end;


<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Komu vděčíme za složené závorky a operátory ++ a --?</h2>

<p><i>Ken Thompson</i> a jeho kolega <i>Dennis Ritchie</i> se oprávněně domnívali, že nově vytvořený operační systém potřebuje také nový systémově orientovaný programovací jazyk, tj.&nbsp;jazyk, ve kterém by bylo možné psát systémové programy a popř.&nbsp;i uživatelské aplikace. Nejprve se sice uvažovalo o využití překladače <i>Fortranu</i>, ovšem tato myšlenka byla vzhledem k&nbsp;výše popsaným omezeným hardwarovým možnostem mikropočítače <i>PDP-7</i> následně opuštěna. Namísto toho Ken Thompson vytvořil nový programovací jazyk nazvaný jednoduše <strong>B</strong>. Tento jazyk byl založen na existujícím jazyku <strong>BCPL</strong> (<i>Basic Combined Programming Language</i>), jenž byl vytvořen Martinem Richardsem již v&nbsp;roce 1966. Vzhledem k&nbsp;tomu, že jazyk <strong>BCPL</strong> byl z&nbsp;hlediska konstrukce překladače poměrně složitý (což je poněkud paradoxní, neboť se jednalo o zjednodušený jazyk <strong>CPL</strong> ze začátku šedesátých let), nebylo možné, aby se jeho překladač na mikropočítači <i>PDP-7</i> spouštěl z&nbsp;operačního systému, protože jen pro samotný překlad zdrojových kódů bylo zapotřebí cca 16 kB operační paměti.</p>

<a href="http://i.iinfo.cz/images/76/pdp2-5.jpg"><img src="http://i.iinfo.cz/images/76/pdp2-5-prev.jpg" alt="pdp2" height="270" width="337" /></a>
<p><i>Obrázek 5: Známá fotografie Kena Thompsona a Dennise Ritchieho sedících před PDP.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Vybrané vlastnosti programovacího jazyka &bdquo;B&ldquo;</h2>

<p>Z&nbsp;tohoto důvodu Ken Thompson z&nbsp;původního jazyka <strong>BCPL</strong> odstranil některé vlastnosti, které nepovažoval za podstatné (například složitější typy programových smyček) a naopak změnil jeho syntaxi tak, aby se zápis programu mohl co nejvíce zkrátit. Právě z&nbsp;této snahy například pochází i způsob zápisu operátorů pomocí speciálních znaků a nikoli klíčových slov (včetně zcela nových operátorů ++ a --), což je zvyk používaný doposud &ndash; viz například současné programovací jazyky, jakými jsou C, C++, Java či JavaScript. Taktéž se v&nbsp;jazyku <strong>B</strong> objevuje použití středníků pro ukončení příkazů.</p>

<p>Thompson navíc při programování překladače použil techniku využívanou dodnes &ndash; překladač <strong>B</strong> byl napsán v&nbsp;jazyku <strong>B</strong>, což sice na samotném začátku vyžaduje takzvaný bootstrap (například první interpretr napsaný v&nbsp;assembleru), ale ve výsledku tato metoda vedla jak ke zrychlení vývoje, tak i ke kvalitnějšímu návrhu jazyka (z&nbsp;tohoto hlediska není nic lepšího, než když je programátor nucen používat své vlastní produkty :-). Při pohledu do <a href="http://cm.bell-labs.com/cm/cs/who/dmr/kbman.html">referenční příručky jazyka B</a>, popř.&nbsp;na ukázku programového kódu je vidět nápadná shoda s&nbsp;jazykem <strong>C</strong>, o kterém se zmíním později (v&nbsp;podstatě zde chybí datové typy a struktury):</p>

<pre>
/* The following program will calculate the constant e-2 to about
   4000 decimal digits, and print it 50 characters to the line in
   groups of 5 characters.  The method is simple output conversion
   of the expansion
     1/2! + 1/3! + ... = .111....
   where the bases of the digits are 2, 3, 4, . . . */

main() {
        extrn putchar, n, v;
        auto i, c, col, a;

        i = col = 0;
        while(i&lt;n)
                v[i++] = 1;
        while(col&lt;2*n) {
                a = n+1 ;
                c = i = 0;
                while (i&lt;n) {
                        c =+ v[i] *10;
                        v[i++]  = c%a;
                        c =/ a--;
                }

                putchar(c+'0');
                if(!(++col%5))
                        putchar(col%50?' ': '*n');
        }
        putchar('*n*n');
}

v[2000];
n 2000;
</pre>

<p>Na programovacím jazyku <strong>B</strong> bylo zvláštní především to, že podporoval pouze jeden datový typ &ndash; slovo (word) &ndash; jehož bitová šířka se měnila podle toho, pro jaký procesor byly programy překládány. I adresy v&nbsp;paměti byly reprezentovány pomocí slov (přesněji jako indexy do pole, neboť paměť byla v&nbsp;B považována za jedno velké lineární pole), což se později ukázalo být problematické, protože na mnoha platformách mají adresy jinou bitovou šířku než slova zpracovávaná procesorem. Nicméně pro účely systémového programování na počítači <i>PDP-7</i> programovací jazyk <strong>B</strong> vyhovoval a jeho překladače byly později naprogramovány i pro některé další minipočítače, například dále popsaný <i>PDP-11</i>.</p>

<p>Druhá zvláštnost spočívá v&nbsp;tom, že překladač jazyka <strong>B</strong> na <i>PDP-7</i> i na <i>PDP-11</i> překládal program nikoli přímo do strojového kódu, ale do bajtkódu, který musel být následně interpretován. Jednalo se ve své podstatě o stejnou technologii, jaká je použita například u P-kódu (Pascal) či u interpretrů Javovského bajtkódu (dnes se již čisté interpretry tohoto bajtkódu v&nbsp;reálných JRE nepoužívají).</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Vznik programovacího jazyka &bdquo;C&ldquo;</h2>

<p>Některé vlastnosti programovacího jazyka <strong>B</strong> implementovaného na počítačích <i>PDP-7</i> a později i na <i>PDP-11</i> však nebyly vhodné pro systémové programování, například z&nbsp;toho důvodu, že <i>PDP-11</i>, na rozdíl od <i>PDP-7</i>, zpracovával data různých bitových šířek, včetně bajtů (ASCII znaky). Z&nbsp;tohoto důvodu se vývojáři v&nbsp;Bellových laboratořích rozhodli, že v&nbsp;rámci přechodu na počítač <i>PDP-11</i> vytvoří nový programovací jazyk, který mj.&nbsp;umožní více odstínit programátora od hardwarové architektury počítače. Tento programovací jazyk &ndash; &bdquo;nový B&ldquo; &ndash; se na návrh Kena Thompsona pojmenoval <strong>C</strong>.  Jestli se jedná o další písmeno v&nbsp;abecedě (C=B+1) nebo o následující znak v&nbsp;označení předchůdce obou jazyků &ndash; jazyka <strong>BCPL</strong>, je již otázka, kterou tvůrci ponechali nezodpovězenou.</p>

<img src="http://i.iinfo.cz/images/76/pdp2-8.jpg" alt="pdp2" height="247" width="239" />
<p><i>Obrázek 8: Brian Kernighan, který spolu s&nbsp;Dennisem Ritchiem napsal
světoznámou knížku &bdquo;C Programming Language&ldquo;, podle níž se
popisovaný dialekt označuje K&amp;R. Počáteční písmeno jeho příjmení se
rovněž vyskytuje v&nbsp;názvu programovacího jazyka AWK.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>

68
¢ underline or
   bold typeface ¢
 mode xint = int;
 xint sum sq:=0;
 for i while
   sum sq≠70×70
 do
   sum sq+:=i↑2
 od

Stropping

'pr' quote 'pr'
'mode' 'xint' = 'int';
'xint' sum sq:=0;
'for' i 'while'
  sum sq≠70×70
'do'
  sum sq+:=i↑2
'od'


<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Report on the Algorithmic Language ALGOL 60<br />
<a href="http://www.softwarepreservation.org/projects/ALGOL/report/Algol60_report_CACM_1960_June.pdf">http://www.softwarepreservation.org/projects/ALGOL/report/Algol60_report_CACM_1960_June.pdf</a>
</li>

<li>ALGOL na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/ALGOL">https://en.wikipedia.org/wiki/ALGOL</a>
</li>

<li>ALGOL: The Best Language You’ve Never Heard Of<br />
<a href="https://www.whoishostingthis.com/resources/algol/">https://www.whoishostingthis.com/resources/algol/</a>
</li>

<li>Timeline of programming languages<br />
<a href="https://en.wikipedia.org/wiki/Timeline_of_programming_languages">https://en.wikipedia.org/wiki/Timeline_of_programming_languages</a>
</li>

<li>A History of Computer Programming Languages<br />
<a href="https://cs.brown.edu/~adf/programming_languages.html">https://cs.brown.edu/~adf/programming_languages.html</a>
</li>

<li>ALGOL 60 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ALGOL_60">https://en.wikipedia.org/wiki/ALGOL_60</a>
</li>

<li>Revised Report on the Algorithmic Language Algol 60<br />
<a href="https://www.masswerk.at/algol60/report.htm">https://www.masswerk.at/algol60/report.htm</a>
</li>

<li>Does anyone still use the ALGOL programming language?<br />
<a href="https://www.quora.com/Does-anyone-still-use-the-ALGOL-programming-language">https://www.quora.com/Does-anyone-still-use-the-ALGOL-programming-language</a>
</li>

<li>ALGOL W - Introduction<br />
<a href="https://try-mts.com/algol-w-introduction/">https://try-mts.com/algol-w-introduction/</a>
</li>

<li>ALGOL 60 - Language features<br />
<a href="https://try-mts.com/algol-60-language-features/">https://try-mts.com/algol-60-language-features/</a>
</li>

<li>A COURSE OF ALGOL 60 PROGRAMMING<br />
<a href="http://archive.computerhistory.org/resources/text/algol/ACM_Algol_bulletin/1064048/frontmatter.pdf">http://archive.computerhistory.org/resources/text/algol/ACM_Algol_bulletin/1064048/frontmatter.pdf</a>
</li>

<li>The Algol 68 Genie project<br />
<a href="https://jmvdveer.home.xs4all.nl/en.algol-68-genie.html">https://jmvdveer.home.xs4all.nl/en.algol-68-genie.html</a>
</li>

<li>ALGOL based programming languages<br />
<a href="https://en.wikipedia.org/wiki/Generational_list_of_programming_languages#ALGOL_based">https://en.wikipedia.org/wiki/Generational_list_of_programming_languages#ALGOL_based</a>
</li>

<li>Category:ALGOL 60 (Rosetta Code)<br />
<a href="http://rosettacode.org/wiki/Category:ALGOL_60">http://rosettacode.org/wiki/Category:ALGOL_60</a>
</li>

<li>Category:ALGOL W (Rosetta Code)<br />
<a href="http://rosettacode.org/wiki/Category:ALGOL_W">http://rosettacode.org/wiki/Category:ALGOL_W</a>
</li>

<li>Algol W<br />
<a href="https://everything2.com/title/Algol%2520W">https://everything2.com/title/Algol%2520W</a>
</li>

<li>Historic Documents in Computer Science<br />
<a href="http://web.eah-jena.de/~kleine/history/history.html">http://web.eah-jena.de/~kleine/history/history.html</a>
</li>

<li>A comparison of PASCAL and ALGOL 68<br />
<a href="https://academic.oup.com/comjnl/article/21/4/316/356817">https://academic.oup.com/comjnl/article/21/4/316/356817</a>
</li>

<li>Stropping (syntax)<br />
<a href="https://en.wikipedia.org/wiki/Stropping_(syntax)">https://en.wikipedia.org/wiki/Stropping_(syntax)</a>
</li>

<li>A contribution to the development of ALGOL<br />
<a href="https://dl.acm.org/doi/10.1145/365696.365702">https://dl.acm.org/doi/10.1145/365696.365702</a>
</li>

<li>Syntax the Algorithmic Language Algol 60<br />
<a href="http://cse.csusb.edu/dick/samples/algol60.syntax.html">http://cse.csusb.edu/dick/samples/algol60.syntax.html</a>
</li>

<li>Scope (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Scope_(computer_science)">https://en.wikipedia.org/wiki/Scope_(computer_science)</a>
</li>

<li>Scope and closure (LISP)<br />
<a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)#Scope_and_closure">https://en.wikipedia.org/wiki/Lisp_(programming_language)#Scope_and_closure</a>
</li>

<li>Programming languages in MTS<br />
<a href="https://try-mts.com/programming-languages-in-mts/">https://try-mts.com/programming-languages-in-mts/</a>
</li>

<li>ALGOL 60 - Josephus problem<br />
<a href="https://try-mts.com/algol-60-josephus-problem/">https://try-mts.com/algol-60-josephus-problem/</a>
</li>

<li>ALGOL W - Priority queue<br />
<a href="https://try-mts.com/algol-w-priority-queue/">https://try-mts.com/algol-w-priority-queue/</a>
</li>

<li>Syntaxe a sémantika Algolu<br />
<a href="http://www.softwarepreservation.org/projects/ALGOL/paper/Backus-Syntax_and_Semantics_of_Proposed_IAL.pdf">http://www.softwarepreservation.org/projects/ALGOL/paper/Backus-Syntax_and_Semantics_of_Proposed_IAL.pdf</a>
</li>

<li>John Backus<br />
<a href="https://en.wikipedia.org/wiki/John_Backus">https://en.wikipedia.org/wiki/John_Backus</a>
</li>

<li>Backus–Naur form<br />
<a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form">https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form</a>
</li>

<li>The future's bright… the future's Cobol<br />
<a href="https://www.root.cz/clanky/the-future-s-bright-the-future-s-cobol/">https://www.root.cz/clanky/the-future-s-bright-the-future-s-cobol/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Třicet let od vydání revolučního Turbo Pascalu 5.5<br />
<a href="https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/">https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/</a>
</li>

<li>Heinz Rutishauser<br />
<a href="https://en.wikipedia.org/wiki/Heinz_Rutishauser">https://en.wikipedia.org/wiki/Heinz_Rutishauser</a>
</li>

<li>The Development of the C Language<br />
<a href="http://cm.bell-labs.com/cm/cs/who/dmr/chist.html">http://cm.bell-labs.com/cm/cs/who/dmr/chist.html</a>
</li>

<li>B (programming language)<br />
<a href="http://en.wikipedia.org/wiki/B_(programming_language)">http://en.wikipedia.org/wiki/B_(programming_language)</a>
</li>

<li>Users' Reference to Bo<br />
<a href="http://cm.bell-labs.com/cm/cs/who/dmr/kbman.html">http://cm.bell-labs.com/cm/cs/who/dmr/kbman.html</a>
</li>

<li>THE PROGRAMMING LANGUAGE B<br />
<a href="http://cm.bell-labs.com/cm/cs/who/dmr/bintro.html">http://cm.bell-labs.com/cm/cs/who/dmr/bintro.html</a>
</li>

<li>BCPL<br />
<a href="http://en.wikipedia.org/wiki/BCPL">http://en.wikipedia.org/wiki/BCPL</a>
</li>

</li>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

