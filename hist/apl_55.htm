<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Oslava 55 let od vzniku první implementace programovacího jazyka APL</a></p>
<p><a href="#k02">*** 2. Notace &ndash; osvobození z&nbsp;diktátu ASCII textu i důležitá myšlenková pomůcka</a></p>
<p><a href="#k03">*** 3. Malá odbočka &ndash; programovací jazyky s&nbsp;netradiční notací</a></p>
<p><a href="#k04">*** 4. První skutečný jazyk APL: APL\360</a></p>
<p><a href="#k05">*** 5. Základní vlastnosti programovacího jazyka APL</a></p>
<p><a href="#k06">*** 6. Ovšem je jazyk APL skutečně nečitelný?</a></p>
<p><a href="#k07">*** 7. Základní (primitivní) funkce a operátory programovacího jazyka APL</a></p>
<p><a href="#k08">*** 8. Výrazy</a></p>
<p><a href="#k09">*** 9. n-dimenzionální pole jako základní datový typ jazyka APL</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Literatura</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Oslava 55 let od vzniku první implementace programovacího jazyka APL</h2>

<p>Historie programovacího jazyka <i>APL</i> se začala psát již v&nbsp;roce 1957. Právě tehdy <i>Kenneth Iverson</i> z&nbsp;Hardvardské university vytvořil notaci vhodnou pro jednotný zápis matematických funkcí i tvorbu funkcí nových.  V&nbsp;roce 1962 byla tato notace popsána v&nbsp;knize &bdquo;A Programming Language&ldquo; a o několik let později se začaly objevovat skutečné interpretry i překladače programovacího jazyka používajícího stejné symboly, jaké popsal Iverson ve své knize. Konkrétně se jednalo o jazyk <i>IVSYS</i> implementovaný v&nbsp;roce 1966 (což ovšem ještě nebyl <i>skutečný</i> APL, který byl následován jazykem <i>APL\360</i> z&nbsp;roku 1966 a poté <i>APL\1130</i> z&nbsp;roku 1968, jenž pracoval na počítači <i>IBM 1130</i>. Další implementace tohoto jazyka vznikly na mainframech <i>IBM/370</i>, později se různé (ve větší či menší míře modifikované) verze <i>APL</i> začaly používat i na minipočítačích a posléze i na mikropočítačích. Dnes existují implementace pro všechny rozšířené operační systémy mikropočítačů, takže <i>APL</i> je možné použít na Linuxu, Mac OS i Microsoft Windows (viz odkazy uvedené <a href="#k20">ve dvacáté kapitole</a>). A nejjednodušší je použít webovou verzi APL dostupnou na adrese <a href=""></a>.</p>

<a href="http://i.iinfo.cz/images/252/apl-1.png"><img src="http://i.iinfo.cz/images/252/apl-1-prev.png" alt="apl" height="171" width="370" /></a>
<p><i>Obrázek 1: Rozložení znaků na klávesnici používané při programování
v&nbsp;jazyku APL. Speciální znaky na klávesnici reprezentují základní
(primitivní) funkce a operátory.</i></p>

<p>Kenneth Iverson se rozvoji a propagaci jazyka <i>APL</i> aktivně věnoval více než 20 let, za což mu byla v&nbsp;roce 1979 udělena Turingova cena (<i>Turing Award</i>). Později Iverson navrhl programovací jazyk <i>J</i>, v&nbsp;němž se místo speciálních symbolů (viz následující kapitoly) používají pouze znaky obsažené v&nbsp;ASCII tabulce. Popisu tohoto jazyka se budeme věnovat v&nbsp;některém z&nbsp;dalších dílů seriálu. Vraťme se však k&nbsp;programovacímu jazyku <i>APL</i>. Specifikace jazyka se od poloviny šedesátých let minulého století několikrát změnila (rozšířila). Jedním z&nbsp;nejvíce důležitých rozšíření je <i>APL2</i> od J.&nbsp;Browna z&nbsp;IBM, které do jazyka zavedlo podporu pro rekurzivní datové struktury (pole jako prvky jiných polí). Většina dnešních implementací tohoto jazyka se snaží dodržovat specifikaci <i>APL2</i>, i když je jazyk dále rozšiřován (například v&nbsp;<i>APLX verze 4</i> byla přidána podpora pro objektově orientované programování, i když v&nbsp;poněkud jiné podobě, než ji známe z&nbsp;mainstreamových programovacích jazyků). Z&nbsp;moderních implementací APL se pak musíme zmínit o komerčním <i>Dyalog APL</i>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Notace &ndash; osvobození z&nbsp;diktátu ASCII textu i důležitá myšlenková pomůcka</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Malá odbočka &ndash; programovací jazyky s&nbsp;netradiční notací</h2>

* Fortress
    - rendered via LaTeX
* Algol 68 Report
    - ∧, ∨
    - ×, ÷, ÷×, ÷*, %×
    - ≤, ≥, ≠, ¬=
    - →, ○, ¢, ⏨, □
    - ×:=, ÷:=, ÷×:=, ÷*:=,  %×:=
    - ¬, ↑, ↓, ⌊, ⌈, ⊥
    - ⊂, ≡, ␣, ⊃, ⎩, ⎧
* Epigram
    - "2D" blocks
    - rendered via LaTeX

Algol:

¢ this is a comment
real avogadro = 6.0221415⏨23

Epigram

     (         !       (          !   (  n : Nat  !
data !---------! where !----------! ; !-----------!
     ! Nat : * )       !zero : Nat)   !suc n : Nat)

plus x y <= rec x {
  plus x y <= case x {
    plus zero y => y
    plus (suc x) y => suc (plus x y)
  }
}



<p><a name="k04"></a></p>
<h2 id="k04">4. První skutečný jazyk APL: APL\360</h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní vlastnosti programovacího jazyka APL</h2>

<p><i>&bdquo;Real Programmers don't write in APL, unless the whole program can be written on one line&ldquo;</i></p>

<p>Jedním z&nbsp;typických rysů programovacího jazyka <i>APL</i> je jeho orientace na zpracování vektorů a matic (obecně polí téměř libovolné dimenze, většina implementací povoluje definovat až 63dimenzionální struktury) bez nutnosti použití čítačů či programových smyček. Jazyk <i>APL</i> s&nbsp;těmito datovými strukturami pracuje z&nbsp;hlediska programátora prakticky stejně jako se skalárními hodnotami (čísly), takže například součet položek dvou polí je zapisován stejně jako součet dvou číselných hodnot. Dalším typickým rysem je způsob aplikace funkcí na hodnoty (obecně pole) a vzájemné kombinace funkcí pomocí operátorů (slovem <i>operátor</i> jsou v&nbsp;jazyce <i>APL</i> označovány funkce vyššího řádu, tj.&nbsp;funkce vracející jiné funkce; s&nbsp;funkcemi vyššího řádu se můžeme setkat i v&nbsp;mnoha dalších programovacích jazycích). Pomocí funkcí a operátorů, které jsou přímo v&nbsp;<i>APL</i> definovány, je možné nahradit i řídicí struktury &ndash; podmíněné příkazy a programové smyčky &ndash; které dokonce v&nbsp;prvních verzích jazyka ani nebylo možné zapisovat (v&nbsp;pozdějších verzích se pro usnadnění programování tyto řídicí struktury do <i>APL</i> přidaly).</p>

<p>Každá základní (primitivní) funkce a operátor je v&nbsp;jazyce zapisována formou nějakého symbolu, přičemž většina těchto symbolů (znaků) se <u>ne</u>nachází v&nbsp;ASCII tabulce, ale jedná se buď o písmeno řecké abecedy nebo jiný (matematický) symbol zvolený Iversonem. Použití symbolů namísto kombinace alfanumerických znaků, tj.&nbsp;zápisu známého z&nbsp;většiny dalších vysokoúrovňových programovacích jazyků, je třetím a pro většinu programátorů nejtypičtějším (resp.&nbsp;nejviditelnějším) rysem programovacího jazyka <i>APL</i>. V&nbsp;podstatě se jedná o zcela opačný přístup než jaký jsme mohli vidět v&nbsp;předchozí části tohoto seriálu při popisu programovacího jazyka <i>COBOL</i>. Zatímco v&nbsp;<i>COBOLu</i> se každá programová konstrukce popisovala jedním či několika klíčovými slovy (kterých existuje více než 300), jazyk <i>APL</i> žádná klíčová slova neobsahuje, ale nabízí programátorům sadu základních (primitivních) funkcí (cca 50) a operátorů (celkem šest), které je možné kombinovat a vytvářet tak nové uživatelské funkce i uživatelské operátory.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Ovšem je jazyk APL skutečně nečitelný?</h2>

<p>Vzájemná kombinace (zřetězení) primitivních funkcí a operátorů bez vytváření a pojmenování funkcí vlastních vede k&nbsp;velmi úspornému zápisu kódu, který je však pro většinu programátorů prakticky nečitelný (mnozí programátoři čtení podobných programů přirovnávají k&nbsp;luštění hieroglyfů), o čemž se můžete přesvědčit například z&nbsp;následujícího výpisu několika výrazů (vzhledem k&nbsp;tomu, že na některých systémech nemusí být všechny znaky zobrazeny korektně, byl z&nbsp;výpisu programu pořízen screenshot:</p>

<img src="http://i.iinfo.cz/images/252/apl-2.png" alt="apl" height="425" width="436" />
<p><i>Obrázek 2: Užitečné a relativně často používané idiomy jazyka APL zapisované pomocí kombinace základních funkcí a operátorů.</i></p>

<p>Podobné programátorské praktiky, jaké byly ukázány na předchozím výpisu (ovšem vytvořené profesionálem, nejedná se o žádné nesmyslné demo, ale užitečné idiomy), vedly k&nbsp;tomu, že je jazyk <i>APL</i> považován, byť poněkud neoprávněně, za jazyk &bdquo;write only&ldquo;, podobně jako <i>Forth</i>. Ve skutečnosti je však i v&nbsp;jazyku <i>APL</i> možné poměrně snadno psát přehledné a srozumitelné programy, ve kterých navíc programátoři mohou využívat všechny výhody tohoto jazyka (jednoduchá práce s&nbsp;vektory, maticemi a poli, funkce vyššího řádu, velmi rychlé prototypování vhodné pro aplikace, ve kterých je důležitý co nejrychlejší nástup na trh atd.). Pokud jsou například nadefinovány základní řídicí příkazy (mnoho moderních implementací <i>APL</i> je obsahuje), lze programy v&nbsp;<i>APL</i> zapisovat prakticky stejným způsobem, jako v&nbsp;jiných programovacích jazycích (symbol &#8592; značí přiřazení a symbol &#9109; neboli <i>quad</i> je primitivní funkce pro načtení libovolné hodnoty z&nbsp;klávesnice či obecně ze standardního vstupu):</p>

<pre>
GUESS;VAL
    'Hadej cislo'
    :Repeat
        VAL &#8592; &#9109;
        :If VAL=42
            'Uhodl jsi!'
            :Leave
        :EndIf
        'Tesne vedle, zkus to znovu...'
    :EndRepeat
</pre>

<a href="http://i.iinfo.cz/images/252/apl-3.png"><img src="http://i.iinfo.cz/images/252/apl-3-prev.png" alt="apl" height="270" width="329" /></a>
<p><i>Obrázek 3: Moderní fonty (OpenType, PostScriptové) obsahují buď část nebo dokonce všechny znaky používané jazykem APL pro zápis základních funkcí a operátorů.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Základní (primitivní) funkce a operátory programovacího jazyka APL</h2>

<p>V&nbsp;úvodním textu jsme si řekli, že programovací jazyk <i>APL</i> obsahuje cca 50 základních (primitivních) funkcí. V&nbsp;<i>APL</i> se můžeme setkat se třemi typy funkcí. Jedná se o funkce bez argumentů (niladické funkce), tj.&nbsp;ve skutečnosti procedury, dále pak o funkce s&nbsp;jedním argumentem (monadické funkce) a konečně funkce se dvěma argumenty (dyadické funkce).  V&nbsp;<i>APL</i> lze přímo ze zápisu zdrojového kódu určit, jakého typu je volaná funkce, což mj.&nbsp;Iversonovi umožnilo použít jeden symbol pro reprezentaci více funkcí &ndash; podle toho, jakým způsobem je symbol v&nbsp;programu použit, je zavolána určitá primitivní funkce. Na jednu stranu se může zdát, že toto &bdquo;přetížení symbolů&ldquo; povede k&nbsp;větší nepřehlednosti programů, na stranu druhou jsou však symboly &bdquo;přetížené&ldquo; s&nbsp;rozmyslem, takže například symbol <i>-</i> značí negaci (monadická funkce) či rozdíl (dyadická funkce), podobně jako v&nbsp;mnoha dalších programovacích jazycích. Symbol <i>&divide;</i> znamená v&nbsp;monadické formě výpočet převrácené hodnoty a ve formě dyadické podíl čísel, vektorů či korespondujících prvků polí. V&nbsp;následující tabulce jsou vypsány některé primitivní funkce jazyka <i>APL</i> (pro korektní zobrazení symbolů v&nbsp;tabulce je nutné použít fonty s&nbsp;podporou Unicode, například některý z&nbsp;řezů fontu DejaVu):</p>

<table>
<tr><th>Symbol       </th><th>Unicode (hex)</th><th>Jeden argument (monadická forma)</th><th>Dva argumenty (dyadická forma)</th></tr>
<tr><td>+            </td><td>002B</td><td>identita</td><td>součet</td></tr>
<tr><td>-            </td><td>002D</td><td>negace</td><td>rozdíl</td></tr>
<tr><td>&times;      </td><td>00D7</td><td>znaménko</td><td>součin</td></tr>
<tr><td>&divide;     </td><td>00F7</td><td>převrácená hodnota</td><td>podíl</td></tr>
<tr><td>&#5285;      </td><td>2308</td><td>zaokrouhlení na celé číslo nahoru</td><td>vrátí větší argument</td></tr>
<tr><td>&#5290;      </td><td>230A</td><td>zaokrouhlení na celé číslo dolů</td><td>vrátí menší argument</td></tr>
<tr><td>|            </td><td>007C</td><td>absolutní hodnota</td><td>zbytek po dělení</td></tr>
<tr><td>&iota;       </td><td>2373</td><td>čítač</td><td></td></tr>
<tr><td>*            </td><td>002A</td><td>e<sup>x</sup></td><td>x<sup>y</sup></td></tr>
<tr><td>&lt;         </td><td>003C</td><td></td><td>menší než</td></tr>
<tr><td>&le;         </td><td>2264</td><td></td><td>menší nebo rovno</td></tr>
<tr><td>=            </td><td>003D</td><td></td><td>rovno</td></tr>
<tr><td>&ge;         </td><td>2265</td><td></td><td>větší nebo rovno</td></tr>
<tr><td>&gt;         </td><td>003E</td><td></td><td>větší než</td></tr>
<tr><td>&ne;         </td><td>2260</td><td></td><td>nerovno</td></tr>
<tr><td>&isin;       </td><td>220A</td><td></td><td>obsahuje (dotaz na existenci prvku v poli)</td></tr>
<tr><td><u>&isin;</u></td><td>22F8</td></td><td>nalezení hodnoty (prvku v poli)</td></tr>
<tr><td>&#9675;      </td><td>25CB</td><td>&pi;&times;hodnota</td><td>goniometrická funkce specifikovaná 2.argumentem</td></tr>
<tr><td>!            </td><td>0021</td><td>1&times;2&times;3&times;..</td><td>kombinace</td></tr>
<tr><td>&#9017;      </td><td>2339</td><td>inverze matice</td><td>podíl matic</td></tr>
<tr><td>&#9033;      </td><td>2349</td><td>transpozice řádků za sloupce</td><td>transpozice specifikovaná 2.argumentem</td></tr>
<tr><td>&#9021;      </td><td>233D</td><td>obrácení pořadí položek</td><td>rotace položek (vektoru, matice)</td></tr>
<tr><td>&#9035;      </td><td>234B</td><td>setřídění položek vektoru vzestupně</td><td>setřídění podle zadaného argumentu</td></tr>
<tr><td>&#9042;      </td><td>2352</td><td>setřídění položek vektoru sestupně</td><td>setřídění podle zadaného argumentu</td></tr>
</table>

<a href="http://i.iinfo.cz/images/252/apl-4.png"><img src="http://i.iinfo.cz/images/252/apl-4-prev.png" alt="apl" height="234" width="370" /></a>
<p><i>Obrázek 4: Programátorské textové editory a integrovaná vývojová prostředí pro jazyk APL dnes většinou obsahují i dialog s&nbsp;nabídkou symbolů používaných při zápisu základních funkcí a operátorů.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Výrazy</h2>

<p>Programy v&nbsp;jazyce <i>APL</i> se skládají z&nbsp;výrazů, při jejichž zápisu se musí dodržovat jen minimální množství syntaktických pravidel.  Nejdůležitějším pravidlem je, že se jednotlivé funkce vyhodnocují zprava doleva, přičemž již vyhodnocená funkce (tj.&nbsp;její návratová hodnota) je použita jako argument funkce ležící nalevo od ní. Symboly monadických funkcí se zapisují vždy před svůj argument, naopak symboly funkcí dyadických jsou zapsány mezi oba argumenty (což je v&nbsp;matematice obvyklé, protože funkce v&nbsp;<i>APL</i> odpovídají v&nbsp;matematice operátorům). Při zápisu aritmetických výrazů je zapotřebí dát pozor na to, že všechny funkce mají stejné priority (bylo by totiž velmi složité definovat či zapamatovat si prioritu více než padesáti primitivních funkcí). Interpret jazyka <i>APL</i> vypisuje hodnotu vyhodnoceného výrazu (tj.&nbsp;návratovou hodnotu nejlevější funkce) na výstup:</p>

<pre>
aritmetický výraz
1+2&times;3
7

vyhodnocení je prováděno zprava doleva, priority všech funkcí jsou stejné
2&times;3+1
8

argumentem funkce může být i vektor či pole (zde vektor šesti čísel)
každá položka vektoru je vynásobena hodnotou 0.5
2 4 6 8 &times; 0.5
1 2 3 4

totéž platí pro monadickou funkci "převrácená hodnota"
&divide;1 2 3 4 5
1 0.5 0.3333333333 0.25 0.2

hodnota 10 je vydělena každou hodnotou z vektoru, výsledkem je též vektor
10&divide;1 2 3 4 5 10
10 5 3.33333333 2.5 2.0 1

ukázka kombinace více funkcí, vyhodnocování je stále zprava doleva
&#5285; 10&divide;1 2 3 4 5 10
10 5 4 3 2 1

dtto pro funkci provádějící zaokrouhlení na celá čísla směrem dolů
&#5290; 10&divide;1 2 3 4 5 10
10 5 3 2 2 1
</pre>


<a href="http://i.iinfo.cz/images/252/apl-5.png"><img src="http://i.iinfo.cz/images/252/apl-5-prev.png" alt="apl" height="270" width="235" /></a>
<p><i>Obrázek 5: Ukázka obrazovky integrovaného vývojového prostředí jazyka APL se zvýrazněním syntaxe, automatickým číslováním řádků při zápisu funkcí atd.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. n-dimenzionální pole jako základní datový typ jazyka APL</h2>

<p>Již v&nbsp;předchozí kapitole jsme si na příkladech ukázali základy práce s&nbsp;číselnými vektory. Jazyk <i>APL</i> podporuje i práci s&nbsp;vícedimenzionálními poli, kde hraje velkou roli monadická a dyadická funkce <i>&rho;</i> (ró, reshape) a taktéž monadická funkce <i>&iota;</i> (jóta, index, též čítač). V&nbsp;následujících ukázkách si povšimněte způsobu přiřazení hodnoty (čísla, vektoru nebo pole) do proměnné pomocí funkce &#8592;:</p>

<pre>

zjištění počtu prvků vektoru pomocí monadické funkce &rho;
&rho; 1 2 3 4
4

přiřazení vektoru do proměnné
VECTOR &#8592; 1 2 3 4 5 6

zjištění počtu prvků vektoru pomocí monadické funkce &rho;
&rho;VECTOR
6

použití funkce &iota;, která vygeneruje vektor s&nbsp;prvky 1..n
(Pythonisté zde mohou vidět souvislost s&nbsp;voláním range())
VECTOR &#8592; &iota;10
VECTOR
1 2 3 4 5 6 7 8 9 10

jeden ze způsobů vytvoření prázdného vektoru (seznamu) pomocí funkce &iota;
EMPTY_LIST &#8592; &iota;0
EMPTY_LIST
*** zde se nic nezobrazilo :-) ***
zjištění počtu prvků vektoru pomocí monadické funkce &rho;
&rho;EMPTY_LIST
0

vytvoření dvourozměrného pole pomocí dyadické funkce &rho;
nejdříve se zadá rozměr jako první argument (4&times;3),
druhým argumentem je seznam, který je transformován do požadovaného pole
4 3 &rho; 1 2 3 4 5 6 7 8 9 10 11 12
1 2 3
4 5 6
7 8 9
10 11 12

dvourozměrné pole lze taktéž naplnit pomocí funkce &iota;
4 3 &rho; &iota;12
1 2 3
4 5 6
7 8 9
10 11 12

pokud nemá seznam dostatečnou délku pro naplnění pole, jsou jeho
položky do pole vloženy opakovaně za sebou
4 3 &rho; 1 2 3 4
1 2 3
4 1 2
3 4 1
2 3 4

výše uvedené vlastnosti lze snadno využít pro vytvoření pole
s prvky o stejné hodnotě
4 3 &rho; 0
0 0 0
0 0 0
0 0 0
0 0 0

naplnění proměnné hodnotou matice
MATICE &#8592; 3 3 &rho; &iota; 9
MATICE
1 2 3
4 5 6
7 8 9

operace nad prvky matice
MATICE &times; 10
10 20 30
40 50 60
70 80 90

vytvoření matice se třemi řádky a dvěma sloupci
CENY &#8592; 3 2 &rho; 1 2 3 4 5 6
CENY
1 2
3 4
5 6

přeuspořádaní prvků v matici
CENY &#8592; 2 3 &rho; CENY
CENY
1 2 3
4 5 6

vytvoření matice 2&times;2 se všemi prvky = 1
M1 &#8592; 2 2 &rho; 1

vytvoření matice 2&times;6 se všemi prvky = 2
M2 &#8592; 2 6 &rho; 5

spojení matic (musí mít stejný počet řádků)
VYSLEDEK &#8592; M1,M2

výpis obsahu všech tří matic
M1
1 1
1 1
M2
5 5 5 5 5 5
5 5 5 5 5 5
VYSLEDEK
1 1 5 5 5 5 5 5
1 1 5 5 5 5 5 5
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Literatura</h2>

<ol>

<li>Ajay Askoolum, &bdquo;<i>System Building with APL + WIN,</i>&ldquo;<br />Wiley, ISBN: 0-470-03020-8, August 2006.</li>

<li>Brown et. al. &bdquo;<i>APL2 at a Glance,</i>&ldquo;<br />Prentice Hall, ISBN 0-13-038670-7.</li>

<li>T. Budd, &bdquo;<i>An APL Compiler,</i>&ldquo;<br />Springer-Verlag.</li>

<li>Maurice Dalois, &bdquo;<i>Introduction to APL*PLUS PC,</i>&ldquo;</li>

<li>J. Ever and C. Fair, &bdquo;<i>Guidelines for APL Systems,</i>&ldquo;<br />DPD 22 IBM 037301, March 1976.</li>

<li>Gilman and Rose, &bdquo;<i>APL - An Interactive Approach,</i>&ldquo;<br /> Wiley, ISBN 220-471-30022-5.</li>

<li>Ulf Grenander, &bdquo;<i>Mathematical Experiments on the Computer,</i>&ldquo;<br />Academic Press, 1982, ISBN 0-12-301750-5.</li>

<li>Kent Haralson, &bdquo;<i>Useful APL Defined Functions</i>&ldquo;,<br />IBM Technical Report, TR 00.2409, Feb. 8 1973.</li>

<li>Timothy Holls, &bdquo;<i>APL Programming Guide,</i>&ldquo;<br />IBM G320-6103, 1978, and G320-6735, 1981.</li>

<li>IBM, &bdquo;<i>APL2 Programming: Language Reference</i>&ldquo;<br />(Version 2, SH21-1061; Version 1, SH20-9227).</li>

<li>IBM, &bdquo;<i>The APL Handbook of Techniques</i>&ldquo;,<br />IBM publication number S320-5996, April 1978.</li>

<li>IBM, &bdquo;<i>The IBM System Journal, V. 30, No. 4 (1991)</i>&ldquo;,<br />Special Issue Devoted to APL.</li>

<li>MicroAPL, &bdquo;<i>Learning APL with APLX</i>&ldquo;,<br />Version 5.0 July 2009</li>

<li>A.D. Falkoff, K.E Iverson, E.H Sussenguth, &bdquo;<i>A formal description of System/360,</i>&ldquo;<br />The IBM System Journal, V. 3, No. 3 (1964)</li>

<li>K. E. Iverson, &bdquo;<i>A Programming Language</i>&ldquo;,<br />Wiley, 1962.</li>

<li>K. E. Iverson, &bdquo;<i>Algebra : an algorithmic treatment</i>&ldquo;,<br />APL Press 1977, Copyright 1972 by Addison Wesley,<br />Preliminary Edition entitled &bdquo;<i>Elementary Algebra</i>&ldquo;<br />Copyright 1971 by IBM Corporation.</li>

<li>K. E. Iverson, &bdquo;<i>Elementary analysis</i>&ldquo;,<br />APL press 1976, Preliminary Edition &bdquo;<i>Elementary Functions</i>&ldquo;<br />Copyright 1974 by IBM Corporation ISBN 0-917326-01-6</li>

<li>K. E. Iverson, &bdquo;<i>An introduction to APL for Scientists and Engineers</i>&ldquo;,<br />APL Press 1976,<br />First published by IMB Corporation as Technical Report No 320-3019 March 1973 - ISBN 0-917326-04-0</li>

<li>K. E. Iverson, &bdquo;<i>APL in exposition</i>&ldquo;,<br />APL Press 1976,<br />First published by IBM Corporation as Technical Report No 320-3010 March 1973 - ISBN 0-917326-02-4.</li>

<li>K. E. Iverson, &bdquo;<i>Introduction To APL</i>&ldquo;,<br />(1984-APL Press Palo Alto) ISBN 0-917326-14-8.</li>

<li>K. E. Iverson, &bdquo;<i>A personal view of APL,</i>&ldquo;<br />IBM Systems Journal,</li>

<li> K. E. Iverson, &bdquo;<i>Concrete Mathematics Companion</i>&ldquo;.</li>

<li>S. Kamin, &bdquo;<i>Programming Languages: An Interpreter-Based Approach,</i>&ldquo;<br />contains (among other things) toy implementations of Lisp, APL, Scheme, SASL, CLU, Smalltalk, and Prolog, Addison-Wesley, 1990, ISBN 0-201-06824-9.</li>

<li>Bernard LEGRAND, &bdquo;<i>Les APL Etendus,</i>&ldquo;<br />Masson, Paris, 1994. An introduction to modern APL (French).</li>

<li>Jon McGrew, &bdquo;<i>An Introduction to APL2,</i>&ldquo;<br />IBM (SH20-9229).</li>

<li>James A. Mason, &bdquo;<i>Learning APL: An Array Processing Language,</i>&ldquo;<br />Harper &amp; Row Publishers Inc., New York, 1986, ISBN 0-06-044243-3 260 pp.</li>

<li>Peelle, &bdquo;<i>APL an Introduction</i>&ldquo;,<br />Holt, Rinehart &amp; Winston, ISBN 0-03-004953-9.</li>

<li>Reiter &amp; Jones, &bdquo;<i>APL with a Mathematical Accent</i>&ldquo;,<br />Brooks/Cole ISBN 0-534-12864-5, (now being distributed by Chapman &amp; Hall).</li>

<li>C. Reiter, &bdquo;<i>Fractuals Visualization and J</i>&ldquo;,<br />Iverson Software, Inc, 1995 ISBN 1-895721-11-3.</li>

<li>Adrian Smith, &bdquo;<i>APL, A Design Handbook for Commercial Systems,</i>&ldquo;<br />Wiley series in information processing, Wiley &amp; Sons, 1982, ISBN 0-471-10092-7.</li>

<li>D. Stiers, M.J. Goovaerts, J. De Kerf, &bdquo;<i>APL - The Language and its Actuarial Applications</i>&ldquo;</li>

<li>Norman D. Thomson, Raymond P. Polivka, &bdquo;<i>APL2 in Depth,</i>&ldquo;<br />Springer-Verlag, 1995, ISBN 0-387-94213-0.</li>

<li>Jerry R. Turner, &bdquo;<i>APL IS EASY!,</i>&ldquo;<br />Manugistics, 1993.</li>

<li>&bdquo;<i>SHARP APL Reference Manual,</i>&ldquo;<br />2nd ed., Soliton Associates Limited PC Version: Iverson Software, 1993, ISBN 1-895721-07-5.</li>

<li>&bdquo;<i>A Source Book in APL,</i>&ldquo;<br />APL Press, 1981, ISBN 0-917326-10-5.</li>

<li>&bdquo;<i>J Phrases,</i>&ldquo;<br />Iverson Software, 1996, ISBN 1-895721-12-1</li>

<li>&bdquo;<i>Exploring Math</i>&ldquo;, Iverson Software, 1996, ISBN 1-895721-13-X</li>

<li>&bdquo;<i>J Primer,</i>&ldquo;<br />Iverson Software, 1996, ISBN 1-895721-14-8</li>

<li>Linda Alvord and Norman Thomson, &bdquo;<i>Easy-J: An Introduction to the World's most Remarkable Programming Language</i>&ldquo;<br />October 2002</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>APL Wiki<br />
<a href="https://aplwiki.com/wiki/">https://aplwiki.com/wiki/</a>
</li>

<li>The Array Cast<br />
<a href="https://www.arraycast.com/episodes/episode-03-what-is-an-array">https://www.arraycast.com/episodes/episode-03-what-is-an-array</a>
</li>

<li>EnthusiastiCon 2019 – An Introduction to APL<br />
<a href="https://www.youtube.com/watch?v=UltnvW83_CQ">https://www.youtube.com/watch?v=UltnvW83_CQ</a>
</li>

<li>Dyalog<br />
<a href="https://www.dyalog.com/">https://www.dyalog.com/</a>
</li>

<li>Try APL!<br />
<a href="https://tryapl.org/">https://tryapl.org/</a>
</li>

<li>APL na replit<br />
<a href="https://replit.com/languages/apl">https://replit.com/languages/apl</a>
</li>

<li>Advent of Code 2020 in APL!<br />
<a href="https://www.youtube.com/watch?v=0RQFW6P1Tt0">https://www.youtube.com/watch?v=0RQFW6P1Tt0</a>
</li>

<li>Python vs APL (1 Problem)<br />
<a href="https://www.youtube.com/watch?v=APdKFJkmBbM">https://www.youtube.com/watch?v=APdKFJkmBbM</a>
</li>

<li>APL Wins (vs C++, Java &amp; Python)<br />
<a href="https://www.youtube.com/watch?v=59vAjBS3yZM">https://www.youtube.com/watch?v=59vAjBS3yZM</a>
</li>

<li>A Tour de Force of APL in 16 Expressions by Roger Hui<br />
<a href="https://www.youtube.com/watch?v=e0rywC7-i0U">https://www.youtube.com/watch?v=e0rywC7-i0U</a>
</li>

<li>Conway's Game Of Life in APL<br />
<a href="https://www.youtube.com/watch?v=a9xAKttWgP4">https://www.youtube.com/watch?v=a9xAKttWgP4</a>
</li>

<li>A List of companies that use Array Languages (J, K, APL, q)<br />
<a href="https://github.com/interregna/arraylanguage-companies">https://github.com/interregna/arraylanguage-companies</a>
</li>

<li>APL - one of the greatest programming languages ever<br />
<a href="http://www.vaxman.de/publications/apl_slides.pdf">http://www.vaxman.de/publications/apl_slides.pdf</a>
</li>

<li>"The J Programming Language" by Tracy Harms (2013)<br />
<a href="https://www.youtube.com/watch?v=RWYkx6-L04Q">https://www.youtube.com/watch?v=RWYkx6-L04Q</a>
</li>

<li>Dyalog Modern Programming Language, Morten Kromberg, Talks at Google<br />
<a href="https://www.youtube.com/watch?v=PlM9BXfu7UY">https://www.youtube.com/watch?v=PlM9BXfu7UY</a>
</li>

<li>The J Language: Consistency, Adjacency, and Solution-Oriented Programming - Tracy Harms<br />
<a href="https://www.youtube.com/watch?v=gLULrFY2-fI">https://www.youtube.com/watch?v=gLULrFY2-fI</a>
</li>

<li>Un-directed programming<br />
<a href="https://www.sacrideo.us/un-structured-programming/">https://www.sacrideo.us/un-structured-programming/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

