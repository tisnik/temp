<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Práce s klávesnicí na ZX Spectru</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Práce s klávesnicí na ZX Spectru</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku si ukážeme základní práci s klávesnicí ZX Spectra. Současně se seznámíme s instrukcemi určenými pro čtení nebo zápis dat na vstupně-výstupní porty, což je z pohledu mikroprocesoru Zilog Z80 adresová oblast oddělená od adresního prostoru pamětí ROM a RAM.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Práce s&nbsp;klávesnicí na ZX Spectru</a></p>
<p><a href="#k02">2. Klávesnice ZX Spectra</a></p>
<p><a href="#k03">3. Připojení matice kláves k&nbsp;čipům ZX Spectra</a></p>
<p><a href="#k04">4. Instrukce pro čtení dat z&nbsp;portu či zápis dat na port</a></p>
<p><a href="#k05">5. Přečtení a dekódování informací o stavu kláves v&nbsp;jedné řadě</a></p>
<p><a href="#k06">6. Krátké ohlédnutí zpět: modifikace barvových atributů obrazovky</a></p>
<p><a href="#k07">7. Vizuální indikace stisku klávesy</a></p>
<p><a href="#k08">8. Úplný zdrojový kód dnešního druhého demonstračního příkladu</a></p>
<p><a href="#k09">9. Detekce stisku klávesy či kláves na jednom fyzickém řádku</a></p>
<p><a href="#k10">10. Pomocná makra a implementace rutiny pro vizualizaci stisku kláves</a></p>
<p><a href="#k11">11. Úplný zdrojový kód dnešního třetího demonstračního příkladu</a></p>
<p><a href="#k12">12. Čtení a dekódování všech kláves</a></p>
<p><a href="#k13">13. Subrutina pro načtení a vizualizaci jednoho fyzického řádku klávesnice</a></p>
<p><a href="#k14">14. Pomocné makro pro volání subrutiny z&nbsp;předchozí kapitoly</a></p>
<p><a href="#k15">15. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</a></p>
<p><a href="#k16">16. Problematika detekce stisku většího množství kláves</a></p>
<p><a href="#k17">17. Od klávesnice k&nbsp;joystickům</a></p>
<p><a href="#k18">18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Práce s&nbsp;klávesnicí na ZX Spectru</h2>

<p>V&nbsp;předchozích částech <a
href="https://www.root.cz/serialy/vyvoj-pro-slavne-zx-spectrum/">seriálu o
vývoji programů pro legendární osmibitový domácí mikropočítač ZX Spectrum</a>
jsme se zaměřili především na popis práce s&nbsp;video pamětí ZX Spectra, takže
nyní již máme alespoň rámcovou představu, jakým způsobem se vykreslují objekty
na obrazovku tohoto slavného domácího osmibitového mikropočítače. Ovšem abychom
se mohli pustit do tvorby nějaké skutečné (i když jednoduché) hry, potřebujeme
mít možnost tuto hru ovládat. K&nbsp;dispozici je pochopitelně vestavěná
klávesnice nebo joystick (kterých navíc existuje několik typů &ndash; liší se
nikoli svou konstrukcí, ale způsobem připojení k&nbsp;ZX Spectru),
popř.&nbsp;exotičtější zařízení typu myš. V&nbsp;dnešním článku si ukážeme
základní práci s&nbsp;klávesnicí. Současně se seznámíme s&nbsp;instrukcemi
určenými pro čtení nebo zápis dat na <i>vstupně-výstupní porty</i>, což je
(stručně řečeno) z&nbsp;pohledu mikroprocesoru Zilog Z80 adresová oblast
oddělená od adresního prostoru pamětí ROM a RAM.</p>

<img src="https://i.iinfo.cz/images/342/devel-speccy-1-2.png" class="image-763264" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 1: Většina postav ve hrách se na ZX Spectru ovládá buď klávesnicí
nebo joystickem.</i></p>

<p><div class="rs-tip-major">Poznámka: koncept vstupně-výstupních portů
nalezneme jen u některých typů mikroprocesorů. Typicky se používá u
&bdquo;rodiny 8000&ldquo;, tedy u čipů <a
href="https://www.lo-tech.co.uk/downloads/manuals/intel/8008_InstructionSet_CodeSort.pdf">Intel
8008</a>, <a
href="https://www.pastraiser.com/cpu/i8080/i8080_opcodes.html">Intel 8080</a>,
Intel 8085, <a
href="https://en.wikipedia.org/wiki/X86_instruction_listings">Intel 8086</a> a
samozřejmě též u <a href="https://clrhome.org/table/#%20">Zilogu Z80</a>. Ovšem
například konkurenční čip MOS 6502 tento koncept nepoužívá, takže
vstupně-výstupní zařízení jsou namapována do jediného adresního prostoru
společně s&nbsp;pamětí (což mj.&nbsp;zjednodušuje instrukční soubor).</div></p>

<img src="https://i.iinfo.cz/images/342/devel-speccy-1-4.jpg" class="image-763266" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 2: ZX Spectrum+ s&nbsp;odlišnou klávesnicí (a novou klávesou
<strong>Extend Mode</strong> zjednodušující zápis některých příkazů a funkcí
Sinclair BASICu). Dnes si však popíšeme práci s&nbsp;klávesnicí původního
&bdquo;gumáka&ldquo; ZX Spectrum 48k.</i></p>




<p><a name="k02"></a></p>
<h2 id="k02">2. Klávesnice ZX Spectra</h2>

<p>Klávesnice originálního ZX Spectra 48k obsahuje čtyřicet kláves, které jsou
uspořádány do čtyř řad, přičemž každá řada obsahuje deset kláves (nenajdeme zde
tedy například řadu pouze s&nbsp;mezerníkem atd.). Kromě deseti numerických
kláves a 26 kláves se znaky anglické abecedy zde najdeme čtveřici kláves se
speciálním významem: mezerník, <strong>Enter</strong>, <strong>Caps
Shift</strong> a <strong>Symbol Shift</strong>:</p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-1.png" class="image-1091454" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="790" height="589" />
<p><i>Obrázek 3: Klávesnice originálního ZX Spectra 48k (zobrazeno
v&nbsp;emulátoru Fuse).</i></p>

<p>Jednotlivé klávesy mají v&nbsp;BASICu větší množství funkcí, které se
přepínají oběma Shifty. Ovšem nás v&nbsp;dnešním článku bude zajímat
nízkoúrovňový přístup, tedy jak v&nbsp;reálném čase přečíst stisk testované
klávesy. Z&nbsp;tohoto pohledu se všechny klávesy chovají naprosto stejným
způsobem.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Připojení matice kláves k&nbsp;čipům ZX Spectra</h2>

<p>Z&nbsp;pohledu uživatele obsahuje klávesnice čtyři řady kláves po deseti
klávesách, ovšem interně vypadá zapojení kláves k&nbsp;čipům ZX Spectra
odlišně, protože se jedná o matici 5&times;8 kláves:</p>

<a href="https://www.root.cz/obrazek/1091455/"><img src="https://i.iinfo.cz/images/293/devel-speccy-d-2-prev.png" class="image-1091455" data-prev-filename="https://i.iinfo.cz/images/293/devel-speccy-d-2-prev.png" data-prev-width="370" data-prev-height="204" data-large-filename="https://i.iinfo.cz/images/293/devel-speccy-d-2-large.png" data-large-width="720" data-large-height="398" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="204" /></a>
<p><i>Obrázek 4: Zapojení kláves k&nbsp;čipům ZX Spectra.</i></p>

<p>Z&nbsp;výše uvedeného zapojení vyplývá, že se vždy v&nbsp;daný okamžik může
testovat stisk pěti kláves umístěných (na schématu) v&nbsp;jednom sloupci (ale
pro větší zmatení se většinou mluví o řádcích &ndash; ideální by tedy bylo
schéma otočit o 90&deg;). Nejprve je nutné programově (přes I/O porty) vybrat
jednu z&nbsp;linek na adresové sběrnici a posléze z&nbsp;datové sběrnice
přečíst stav pěti kláves. Ovšem vzhledem ke způsobu zapojení klávesnice
(pull-up rezistor atd.) bude stisknutá klávesa indikována logickou nulou,
nikoli jedničkou. A samotný výběr linky se provádí taktéž
&bdquo;inverzně&ldquo; &ndash; vybraná linka je nastavena na logickou nulu a
ostatní linky na jedničku. Proč tomu tak je? Stisk klávesy v&nbsp;takovém
případě sníží logickou úroveň na vstupu do ULA na logickou nulu, zatímco u
ostatních 35 kláves z&nbsp;jiných linek k&nbsp;tomu nedojde &ndash; stiskem se
pouze na obě strany diody přivede logická jednička (resp.&nbsp; +5V, což je
více než logická jednička).</p>

<p>Hodnoty přiváděné na horních osm bitů adresové sběrnice:</p>

<table>
<tr><th>Řádek kláves</th><th>Hodnota hex</th><th>Bitová maska</th></tr>
<tr><td>0</td><td>$fe</td><td>11111110</td></tr>
<tr><td>1</td><td>$fd</td><td>11111101</td></tr>
<tr><td>2</td><td>$fb</td><td>11111011</td></tr>
<tr><td>3</td><td>$f7</td><td>11110111</td></tr>
<tr><td>4</td><td>$ef</td><td>11101111</td></tr>
<tr><td>5</td><td>$df</td><td>11011111</td></tr>
<tr><td>6</td><td>$bf</td><td>10111111</td></tr>
<tr><td>7</td><td>$7f</td><td>01111111</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: ona &bdquo;kráčící nula&ldquo; je
z&nbsp;bitové masky jasně viditelná. Teoreticky můžete vynulovat i více bitů,
k&nbsp;čemuž se ještě vrátíme.</div></p>

<p><div class="rs-tip-major">Poznámka: způsob zapojení kláves je ukázán na
stránce <a
href="http://www.kameli.net/marq/?p=2055">http://www.kameli.net/marq/?p=2055</a>,
konkrétně na obrázku <a
href="http://www.kameli.net/marq/wp-content/uploads/2012/11/membrein-visu.png">http://www.kameli.net/marq/wp-content/uploads/2012/11/membrein-visu.png</a>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instrukce pro čtení dat z&nbsp;portu či zápis dat na port</h2>

<p>Čtení informací o stisknutých klávesách se provádí IO (vstupně-výstupní)
instrukcí určenou pro přečtení hodnoty z&nbsp;vybraného <i>portu</i>, což je
z&nbsp;pohledu mikroprocesoru osmibitová adresa, která je ovšem oddělena od
adresy ROM či adresy do RAM. Na porty se tedy můžeme dívat jako na oddělený
adresový prostor, z&nbsp;něhož lze jednotlivé bajty číst nebo je modifikovat
k&nbsp;tomu určenými speciálními instrukcemi. Tyto instrukce jsou vypsány
v&nbsp;následující tabulce:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>IN A,(n)</td><td>přečtení bajtu z&nbsp;portu N (0..255)</td></tr>
<tr><td>IN r,(C)</td><td>přečtení bajtu z&nbsp;portu uloženého v&nbsp;registru C, registr B je poslán na horní polovinu adresové sběrnice</td></tr>
<tr><td>INI</td><td>čtení bloku dat z&nbsp;portu, jehož číslo je uloženo v&nbsp;registru C, uložení od adresy HL, registru B pracuje jako čítač</td></tr>
<tr><td>INIR</td><td>dtto, ale registr B je navíc poslán na horní polovinu adresové sběrnice</td></tr>
<tr><td>IND</td><td>provedení jediné operace blokového čtení dat z&nbsp;portu</td></tr>
<tr><td>INDR</td><td>blokové čtení dat, registr B je čítač, HL poslední adresa bloku pro zápis</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>OUT (n),A</td><td>zápis bajtu z&nbsp;akumulátoru na port N (0..255)</td></tr>
<tr><td>OUT (C),r</td><td>zápis bajtu z&nbsp;registru r do portu uloženého v&nbsp;registru C</td></tr>
<tr><td>OUTI</td><td>zápis bloku dat do portu, jehož číslo je uloženo v&nbsp;registru C, B je opět ve funkci čítače</td></tr>
<tr><td>OTIR</td><td>dtto, ale registr B je navíc poslán na horní polovinu adresové sběrnice</td></tr>
<tr><td>OUTD</td><td>provedení jediné operace blokového zápisu dat na port</td></tr>
<tr><td>OTDR</td><td>blokový zápis dat na port, registr B je opět čítač</td></tr>
</table>

<p>Nás bude zajímat pouze druhá instrukce <strong>IN r,C)</strong>, která
přečte bajt z&nbsp;portu, jehož číslo 0..255 je uloženo v&nbsp;registru
<strong>C</strong>. Kromě toho se ovšem před vlastním čtením pošle obsah
registru <strong>B</strong> na horních osm adresových bitů adresové sběrnice A8
až A15, čehož využijeme. Opět je vhodné se podívat na čtvrtý obrázek &ndash;
zde je zřejmé, že je nutné nastavit bity A8 až A15 (až na jediný) na logickou
hodnotu 1, což uzavře příslušné diody.</p>

<p><div class="rs-tip-major">Poznámka: pokud se pracuje s&nbsp;operační pamětí,
používá mikroprocesor pin/signál MREQ, při práci s&nbsp;IO porty pak signál
IORQ (oba jsou negované, takže si nad těmito jmény představte symbol negace).
Díky tomu je možné zcela přesně rozlišit, který čip má reagovat na adresu
zapsanou na adresové sběrnici (zda ROM, RAM, ULA či nějaký další
obvod).</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Přečtení a dekódování informací o stavu kláves v&nbsp;jedné řadě</h2>

<p>Nyní se konečně dostáváme k&nbsp;ústřední části dnešního článku &ndash; jak
přečíst informaci o tom, že byla stisknuta nějaká klávesa. Vyzkoušíme si
například testování stisku klávesy <strong>Caps Shift</strong>, která se
nachází v&nbsp;první řádce, společně s&nbsp;klávesami <strong>Z</strong>,
<strong>X</strong>, <strong>C</strong> a <strong>V</strong>. Stav těchto pěti
kláves se čte z&nbsp;portu 0xfef0, kde 0xfe představuje bitovou masku 11111110
zapisovanou na horní polovinu adresové sběrnice (viz obrázek a tabulku <a
href="#k03">ze třetí kapitoly</a>):</p>

<pre>
KB_ROW_0_PORT equ $fef0
</pre>

<p>Čtení stavu všech pěti kláves se provede instrukcí <strong>IN</strong>,
přičemž přečtená osmibitová hodnota se uloží do akumulátoru
<strong>A</strong>:</p>

<pre>
ld  bc, KB_ROW_0_PORT          <i>; adresa portu, ze kterého budeme číst údaje</i>
in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
</pre>

<p>Informace o stisku klávesy <strong>Caps Shift</strong> bude uložena do
nultého bitu, takže si připravíme masku:</p>

<pre>
SHIFT_KEY_MASK equ %00000001
</pre>

<p>Nyní nám pouze zbývá zamaskovat hodnoty dalších bitů instrukcí
<strong>AND</strong>. Výsledkem bude nulová hodnota v&nbsp;případě, že je
klávesa stisknuta (připomeňme si &bdquo;inverzní&ldquo; logiku) a nenulová
hodnota, pokud stisknuta není. Pro test nulové hodnoty nám postačuje otestovat
příznak <i>zero</i>:</p>

<pre>
        and SHIFT_KEY_MASK             <i>; test, zda je stisknuta klávesa SHIFT</i>
        jr  z, shift_pressed           <i>; pokud je stlačena, skok</i>
        ...
        ...
        ...
        jp  ... nebo ret atd.
<strong>shift_pressed</strong>:
        ...
        ...
        ...
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Krátké ohlédnutí zpět: modifikace barvových atributů obrazovky</h2>

<p>V&nbsp;rámci dalších demonstračních příkladů budeme stisk klávesy vizuálně
zobrazovat na obrazovce ZX Spectra, a to konkrétně tak, že zvýrazníme znak
s&nbsp;příslušnou klávesou. Pro zvýraznění znaku postačuje maličkost &ndash;
změnit příslušný barvový atribut. Připomeňme si tedy ve stručnosti, jak se tato
operace provádí. Je to jednoduché &ndash; atributová paměť začíná na adrese
0x5800 a má strukturu 32&times;24=768 atributových bajtů. Každý atributový bajt
obsahuje bit pro řízení blikání, bit pro řízení intenzity popředí, barvu
popředí (3 bity) a barvu pozadí (taktéž 3 bity):</p>

<pre>
BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111
</pre>

<p>Modifikace jednoho atributu (8&times;8 pixelů) se tedy provede jediným
zápisem do atributové paměti, což je ukázáno na dnešním prvním demonstračním
příkladu:</p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
&nbsp;
BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        ld a, INTENSITY_BIT | (BLUE_COLOR &lt;&lt; 3) | RED_COLOR
        ld (ATTRIBUTE_ADR+32*3+2), a  <i>; zápis atributu do atributové paměti</i>
        ret                           <i>; návrat do BASICu</i>
&nbsp;
end ENTRY_POINT
</pre>

<p>Výsledek činnosti tohoto příkladu:</p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-3.png" class="image-1091456" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 5: Modifikace popředí a pozadí vybraného atributu na obrazovce ZX
Spectra.</i></p>

<p>Celý příklad se přeloží do pouhých pěti bajtů strojového kódu:</p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
                ORG 8000
8000:           label start
8000:3E4A       LD A, 4A
8002:326258     LD (5862), A
8005:C9         RET
8006:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8005
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vizuální indikace stisku klávesy</h2>

<p>Nyní již máme k&nbsp;dispozici všechny informace, které potřebujeme znát pro
vizuální indikaci stisku vybrané klávesy:</p>

<ol>
<li>Způsob přečtení stavu pětice kláves v&nbsp;jednom řádku</li>
<li>Způsob detekce stisku vybrané klávesy z&nbsp;bitového pole</li>
<li>Způsob zajištění vizuální zpětné vazby na obrazovce ZX Spectra</li>
</ol>

<p>Vlastní implementace je ve skutečnosti velmi přímočará &ndash; atribut
změníme jak ve chvíli, kdy je klávesa stisknutá, tak i tehdy, pokud stisknutá
není (samozřejmě se použije odlišný atribut):</p>

<pre>
<strong>start</strong>:
        and SHIFT_KEY_MASK             <i>; test, zda je stisknuta klávesa SHIFT</i>
        jr  z, shift_pressed           <i>; pokud je stlačena, skok</i>
        ld  a, WHITE_COLOR &lt;&lt; 3        <i>; "neviditelný" atribut</i>
        ld  (ATTRIBUTE_ADR+32*3+2), a  <i>; zápis atributu do atributové paměti</i>
        jp  start                      <i>; opětovný test stisku klávesy</i>
<strong>shift_pressed</strong>:
        ld  a, INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
        ld  (ATTRIBUTE_ADR+32*3+2), a  <i>; zápis atributu do atributové paměti</i>
        jp  start                      <i>; opětovný test stisku klávesy</i>
</pre>

<p>Výsledek bude vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-4.png" class="image-1091457" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 6: Stisk klávesy <strong>Caps Shift</strong>.</i></p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-5.png" class="image-1091458" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 7: Klávesa <strong>Caps Shift</strong> není stisknuta.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód dnešního druhého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního prvního demonstračního příkladu s&nbsp;detekcí
stisku jedné klávesy bude vypadat následovně:</p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
&nbsp;
BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111
&nbsp;
KB_ROW_0_PORT equ $fef0
&nbsp;
SHIFT_KEY_MASK equ %00000001
&nbsp;
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        ld  bc, KB_ROW_0_PORT          <i>; adresa portu, ze kterého budeme číst údaje</i>
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
        and SHIFT_KEY_MASK             <i>; test, zda je stisknuta klávesa SHIFT</i>
        jr  z, shift_pressed           <i>; pokud je stlačena, skok</i>
        ld  a, WHITE_COLOR &lt;&lt; 3        <i>; "neviditelný" atribut</i>
        ld  (ATTRIBUTE_ADR+32*3+2), a  <i>; zápis atributu do atributové paměti</i>
        jp  start                      <i>; opětovný test stisku klávesy</i>
<strong>shift_pressed</strong>:
        ld  a, INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
        ld  (ATTRIBUTE_ADR+32*3+2), a  <i>; zápis atributu do atributové paměti</i>
        jp  start                      <i>; opětovný test stisku klávesy</i>
&nbsp;
end ENTRY_POINT
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu najdete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm</a>.</div></p>

<p>Jak je z&nbsp;výpisu přeloženého strojového kódu patrné, je celý příklad
velmi krátký a přeloží se do pouhých 24 bajtů strojového kódu:</p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
KB_ROW_0_PORT   EQU FEF0
SHIFT_KEY_MASK  EQU 0001
                ORG 8000
8000:           label start
8000:01F0FE     LD BC, FEF0
8003:ED78       IN A, (C)
8005:E601       AND 01
8007:2808       JR Z, 8011
8009:3E38       LD A, 38
800B:326258     LD (5862), A
800E:C30080     JP 8000
8011:           label shift_pressed
8011:3E50       LD A, 50
8013:326258     LD (5862), A
8016:C30080     JP 8000
8019:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8018
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Detekce stisku klávesy či kláves na jednom fyzickém řádku</h2>

<p>Nyní se podívejme na způsob detekce stisku libovolné klávesy nebo i více
kláves na jednom fyzickém řádku. Celá subrutina je naprogramována přímočarým
způsobem:</p>

<ol>
<li>Přečteme bitové pole obsahující stav všech pěti kláves na řádku</li>
<li>V&nbsp;programové smyčce provádíme bitový posun doprava, přičemž se nejnižší bajt uloží do příznaku C</li>
<li>Na základě obsahu příznaku C provádíme rozeskok do bloků/větví &bdquo;stisknuta&ldquo;/&bdquo;nestistknuta&ldquo;</li>
<li>Počitadlo smyčky se sníží o jedničku a pokud se nedosáhlo nuly, pokračuje se od bodu 2</li>
</ol>

<p>V&nbsp;assembleru vypadá tento algoritmu následovně (opět použijeme pouze
první řádek kláves):</p>

<pre>
<strong>keypress</strong>:
        ld  bc, KB_ROW_0_PORT          <i>; adresa portu, ze kterého budeme číst údaje</i>
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
&nbsp;
        ld  b, 5                       <i>; počet testovaných kláves</i>
<strong>next_key</strong>:
        srl a                          <i>; přesunout kód stisku klávesy do příznaku carry</i>
        jr  nc, key_pressed            <i>; test stisku klávesy</i>
        ...
        ...                            <i>; část kódu zavolaná, pokud klávesa není stisknutá</i>
        ...
        jr  next                       <i>; test další klávesy</i>
<strong>key_pressed</strong>:
        ...
        ...                            <i>; část kódu zavolaná, pokud klávesa je stisknutá</i>
        ...
<strong>next</strong>:
        djnz next_key                  <i>; opakovat celou smyčku 5x</i>
        jp   keypress                  <i>; další test stisku kláves</i>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Pomocná makra a implementace rutiny pro vizualizaci stisku kláves</h2>

<p>V&nbsp;dále uvedeném demonstračním příkladu použijeme několik pomocných
maker (jen pro další ilustraci možností jejich použití). První makro slouží pro
zobrazení jednoho znaku na obrazovce ZX Spectra, přičemž volá příslušnou
subrutinu uloženou v&nbsp;ROM:</p>

<pre>
<strong>printChar</strong> MACRO character
        ld   a, character
        rst  0x10       <i>; zavolání rutiny v ROM</i>
ENDM
</pre>

<p>Druhé makro pouze změní barvový atribut adresovaný registrovým párem
<strong>HL</strong> a zvýší hodnotu uloženou v&nbsp;<strong>HL</strong> o
jedničku. To znamená, že další volání stejného makra změní následující
atribut:</p>

<pre>
<strong>changeAttribute</strong> MACRO attribute
        ld  (hl), attribute
        inc hl
ENDM
</pre>

<p>Na začátku programu vymažeme obrazovku, což současně otevře kanál použitý
ROM rutinami pro tisk znaku. Následně si necháme vytisknout pětici znaků
reprezentujících klávesy v&nbsp;prvním řádku (Caps Shift, Z, X, C a V):</p>

<pre>
<strong>start</strong>:
        call ROM_CLS    <i>; smazání obrazovky a otevření kanálu číslo 2 (screen)</i>
&nbsp;
        printChar '^'   <i>; tisk pětice znaků na obrazovku</i>
        printChar 'Z'
        printChar 'X'
        printChar 'C'
        printChar 'V'
</pre>

<p>Výsledek bude vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-6.png" class="image-1091459" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 8: Pětice kláves na prvním řádku.</i></p>

<p>Dále nám již stačí doplnit algoritmus <a href="#k09">z&nbsp;předchozí
kapitoly</a> tak, aby se modifikovaly jednotlivé atributy:</p>

<pre>
<strong>keypress</strong>:
        ld  bc, KB_ROW_0_PORT          <i>; adresa portu, ze kterého budeme číst údaje</i>
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
&nbsp;
        ld  hl, ATTRIBUTE_ADR          <i>; adresa, od které budeme měnit barvové atributy</i>
        ld  b, 5                       <i>; počet atributů + počet testovaných kláves</i>
<strong>next_key</strong>:
        srl a                          <i>; přesunout kód stisku klávesy do příznaku carry</i>
        jr  nc, key_pressed            <i>; test stisku klávesy</i>
        changeAttribute WHITE_COLOR &lt;&lt; 3
        jr  next                       <i>; test další klávesy</i>
<strong>key_pressed</strong>:
        changeAttribute INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
<strong>next</strong>:
        djnz next_key                  <i>; opakovat celou smyčku 5x</i>
        jp   keypress                  <i>; další test stisku kláves</i>
</pre>

<p>Výsledky mohou vypadat takto:</p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-7.png" class="image-1091460" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 9: Stisk Caps Shiftu.</i></p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-8.png" class="image-1091461" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 10: Stisk klávesy C.</i></p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-9.png" class="image-1091462" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 11: Stisk kombinace kláves.</i></p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-10.png" class="image-1091463" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 12: Stisk kombinace kláves (více kláves není na mé klávesnici
detekováno :-).</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Úplný zdrojový kód dnešního třetího demonstračního příkladu</h2>

<p>Podívejme se nyní na úplný zdrojový kód dnešního třetího demonstračního
příkladu, který dokáže detekovat stisk libovolné kombinace kláves v&nbsp;jednom
fyzickém řádku <strong>Shift-Z-X-C-V</strong>:</p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111
&nbsp;
KB_ROW_0_PORT equ $fef0
&nbsp;
&nbsp;
<strong>printChar</strong> MACRO character
        ld   a, character
        rst  0x10       <i>; zavolání rutiny v ROM</i>
ENDM
&nbsp;
<strong>changeAttribute</strong> MACRO attribute
        ld  (hl), attribute
        inc hl
ENDM
&nbsp;
&nbsp;
<strong>start</strong>:
        call ROM_CLS    <i>; smazání obrazovky a otevření kanálu číslo 2 (screen)</i>
&nbsp;
        printChar '^'   <i>; tisk pětice znaků na obrazovku</i>
        printChar 'Z'
        printChar 'X'
        printChar 'C'
        printChar 'V'
&nbsp;
<strong>keypress</strong>:
        ld  bc, KB_ROW_0_PORT          <i>; adresa portu, ze kterého budeme číst údaje</i>
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
&nbsp;
        ld  hl, ATTRIBUTE_ADR          <i>; adresa, od které budeme měnit barvové atributy</i>
        ld  b, 5                       <i>; počet atributů + počet testovaných kláves</i>
<strong>next_key</strong>:
        srl a                          <i>; přesunout kód stisku klávesy do příznaku carry</i>
        jr  nc, key_pressed            <i>; test stisku klávesy</i>
        changeAttribute WHITE_COLOR &lt;&lt; 3
        jr  next                       <i>; test další klávesy</i>
<strong>key_pressed</strong>:
        changeAttribute INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
<strong>next</strong>:
        djnz next_key                  <i>; opakovat celou smyčku 5x</i>
        jp   keypress                  <i>; další test stisku kláves</i>
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu najdete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm</a>.</div></p>

<p>Povšimněte si, že každá expanze makra <strong>printChar</strong> zvětšuje
výsledný strojový kód o tři bajty, stejně jako expandované makro
<strong>changeAttribute</strong>:</p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
KB_ROW_0_PORT   EQU FEF0
Defining MACRO printChar
Params: character
Defining MACRO changeAttribute
Params: attribute
8000:           label start
8000:CDAF0D     CALL 0DAF
Expanding MACRO printChar
character= ^ 
LD A , character 
8003:3E5E       LD A, 5E
RST 0010 
8005:D7         RST 10
ENDM 
                ENDM
End of MACRO printChar
Expanding MACRO printChar
character= Z 
LD A , character 
8006:3E5A       LD A, 5A
RST 0010 
8008:D7         RST 10
ENDM 
                ENDM
End of MACRO printChar
Expanding MACRO printChar
character= X 
LD A , character 
8009:3E58       LD A, 58
RST 0010 
800B:D7         RST 10
ENDM 
                ENDM
End of MACRO printChar
Expanding MACRO printChar
character= C 
LD A , character 
800C:3E43       LD A, 43
RST 0010 
800E:D7         RST 10
ENDM 
                ENDM
End of MACRO printChar
Expanding MACRO printChar
character= V 
LD A , character 
800F:3E56       LD A, 56
RST 0010 
8011:D7         RST 10
ENDM 
                ENDM
End of MACRO printChar
8012:           label keypress
8012:01F0FE     LD BC, FEF0
8015:ED78       IN A, (C)
8017:210058     LD HL, 5800
801A:0605       LD B, 05
801C:           label next_key
801C:CB3F       SRL A
801E:3005       JR NC, 8025
Expanding MACRO changeAttribute
attribute= WHITE_COLOR &lt;&lt; 0003 
LD ( HL ) , attribute 
8020:3638       LD (HL), 38
INC HL 
8022:23         INC HL
ENDM 
                ENDM
End of MACRO changeAttribute
8023:1803       JR 8028
8025:           label key_pressed
Expanding MACRO changeAttribute
attribute= INTENSITY_BIT | ( RED_COLOR &lt;&lt; 0003 ) 
LD ( HL ) , attribute 
8025:3650       LD (HL), 50
INC HL 
8027:23         INC HL
ENDM 
                ENDM
End of MACRO changeAttribute
8028:           label next
8028:10F2       DJNZ 801C
802A:C31280     JP 8012
802D:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 802C
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Čtení a dekódování všech kláves</h2>

<p>V&nbsp;dalších kapitolách si ukážeme jeden ze způsobů čtení a dekódování
stavu všech čtyřiceti kláves na klávesnici ZX Spectra. Celý postup je vlastně
jednoduchý, protože nám postačuje výše uvedený algoritmus opakovat osmkrát,
pokaždé pro jinou řadu pěti kláves.</p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-11.png" class="image-1091464" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 13: Žádná klávesa není stisknuta.</i></p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-12.png" class="image-1091465" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 14: Detekce stisku jediné klávesy.</i></p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-13.png" class="image-1091466" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 15: Detekce stisku jediné klávesy.</i></p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-14.png" class="image-1091467" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 16: Detekce stisku kombinace kláves.</i></p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-15.png" class="image-1091468" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 17: Detekce stisku kombinace kláves.</i></p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-16.png" class="image-1091469" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 18: Detekce stisku kombinace kláves.</i></p>

<p>Pro jednoduchost jsou adresy ukládané do pracovního registru B a posílané na
vyšší bajt adresové sběrnice instrukcí <strong>IN</strong> reprezentovány
formou symbolické konstanty, i když by bylo možné provádět jejich výpočet
bitovým posuvem:</p>

<pre>
KB_ROW_0_PORT equ $fe
KB_ROW_1_PORT equ $fd
KB_ROW_2_PORT equ $fb
KB_ROW_3_PORT equ $f7
KB_ROW_4_PORT equ $ef
KB_ROW_5_PORT equ $df
KB_ROW_6_PORT equ $bf
KB_ROW_7_PORT equ $7f
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti ne všechny kombinace
kláves je možné detekovat zcela korektně a to kvůli takzvanému
<i>ghostingu</i>, o němž se zmíníme v&nbsp;závěrečné části dnešního
článku.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Subrutina pro načtení a vizualizaci jednoho fyzického řádku klávesnice</h2>

<p>Subrutinu, která načte stav jedné řady kláves a zvýrazní na obrazovce ZX
Spectra ty klávesy, které jsou stisknuty, již známe z&nbsp;předchozího textu.
Pouze tuto subrutinu upravíme do takové podoby, aby se jí předávalo číslo portu
a obsah pracovního registru B ve formě parametrů. Výsledek by mohl vypadat
následovně:</p>

<pre>
<strong>keypress_detection</strong>:
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
        ld  b, 5                       <i>; počet atributů + počet testovaných kláves</i>
<strong>next_key</strong>:
        srl a                          <i>; přesunout kód stisku klávesy do příznaku carry</i>
        jr  nc, key_pressed            <i>; test stisku klávesy</i>
        changeAttribute WHITE_COLOR &lt;&lt; 3
        jr  next                       <i>; test další klávesy</i>
<strong>key_pressed</strong>:
        changeAttribute INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
<strong>next</strong>:
        djnz next_key                  <i>; opakovat celou smyčku 5x</i>
        ret                            <i>; návrat z podprogramu</i>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Pomocné makro pro volání subrutiny z&nbsp;předchozí kapitoly</h2>

<p>Vzhledem k&nbsp;tomu, že budeme <a href="#k13">výše uvedenou subrutinu</a>
volat celkem osmkrát (protože existuje osm řad kláves), připravíme si pro tento
účel jednoduché makro:</p>

<pre>
<strong>keypress</strong> MACRO port, attribute_address
        ld  b, port                    <i>; adresa portu, ze kterého budeme číst údaje</i>
        ld  c, $fe
        ld  hl, attribute_address      <i>; adresa, od které budeme měnit barvové atributy</i>
        call keypress_detection        <i>; zavolání subrutiny pro detekci sticku kláves</i>
ENDM
</pre>

<p>Expanze tohoto makra vypadají takto:</p>

<pre>
Expanding MACRO keypress
port= KB_ROW_7_PORT 
attribute_address= ATTRIBUTE_ADR + 0020 * 0007 
LD B , port 
804F:067F       LD B, 7F
LD C , 00FE 
8051:0EFE       LD C, FE
LD HL , attribute_address 
8053:21E058     LD HL, 58E0
CALL keypress_detection 
8056:CD5D80     CALL 805D
ENDM 
</pre>

<p><div class="rs-tip-major">Poznámka: mimochodem &ndash; na tomto místě lze
provést malou optimalizaci spočívající v&nbsp;přenosu jedné instrukce
z&nbsp;makra do subrutiny. O jakou instrukci se jedná a proč? A jak se tato
optimalizace projeví na velikosti nebo rychlosti výsledného strojového kódu
vygenerovaného assemblerem?</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu</h2>

<p>Podívejme se nyní na úplný zdrojový kód dnešního třetího demonstračního
příkladu, který dokáže detekovat stisk (teoreticky) libovolné kombinace
kláves:</p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
BLINK_BIT     equ %10000000
INTENSITY_BIT equ %01000000
BLACK_COLOR   equ %000
BLUE_COLOR    equ %001
RED_COLOR     equ %010
MAGENTA_COLOR equ %011
GREEN_COLOR   equ %100
CYAN_COLOR    equ %101
YELLOW_COLOR  equ %110
WHITE_COLOR   equ %111
&nbsp;
KB_ROW_0_PORT equ $fe
KB_ROW_1_PORT equ $fd
KB_ROW_2_PORT equ $fb
KB_ROW_3_PORT equ $f7
KB_ROW_4_PORT equ $ef
KB_ROW_5_PORT equ $df
KB_ROW_6_PORT equ $bf
KB_ROW_7_PORT equ $7f
&nbsp;
&nbsp;
<strong>changeAttribute</strong> MACRO attribute
        ld  (hl), attribute
        inc hl
ENDM
&nbsp;
<strong>keypress</strong> MACRO port, attribute_address
        ld  b, port                    <i>; adresa portu, ze kterého budeme číst údaje</i>
        ld  c, $fe
        ld  hl, attribute_address      <i>; adresa, od které budeme měnit barvové atributy</i>
        call keypress_detection        <i>; zavolání subrutiny pro detekci sticku kláves</i>
ENDM
&nbsp;
&nbsp;
<strong>start</strong>:
        call ROM_CLS                   <i>; smazání obrazovky a otevření kanálu číslo 2 (screen)</i>
&nbsp;
        ld   HL, keys                  <i>; adresa prvního znaku v řetězci</i>
        call print_string              <i>; subrutina pro tisk řetězce</i>
<strong>repeat</strong>:
        keypress KB_ROW_0_PORT, ATTRIBUTE_ADR+32*0
        keypress KB_ROW_1_PORT, ATTRIBUTE_ADR+32*1
        keypress KB_ROW_2_PORT, ATTRIBUTE_ADR+32*2
        keypress KB_ROW_3_PORT, ATTRIBUTE_ADR+32*3
        keypress KB_ROW_4_PORT, ATTRIBUTE_ADR+32*4
        keypress KB_ROW_5_PORT, ATTRIBUTE_ADR+32*5
        keypress KB_ROW_6_PORT, ATTRIBUTE_ADR+32*6
        keypress KB_ROW_7_PORT, ATTRIBUTE_ADR+32*7
&nbsp;
        jp   repeat
        ret                            <i>; návrat do BASICu (nikdy k němu nedojde)</i>
&nbsp;
<strong>keypress_detection</strong>:
        in  a, (c)                     <i>; vlastní čtení z portu (5 bitů)</i>
        ld  b, 5                       <i>; počet atributů + počet testovaných kláves</i>
<strong>next_key</strong>:
        srl a                          <i>; přesunout kód stisku klávesy do příznaku carry</i>
        jr  nc, key_pressed            <i>; test stisku klávesy</i>
        changeAttribute WHITE_COLOR &lt;&lt; 3
        jr  next                       <i>; test další klávesy</i>
<strong>key_pressed</strong>:
        changeAttribute INTENSITY_BIT | (RED_COLOR &lt;&lt; 3)
<strong>next</strong>:
        djnz next_key                  <i>; opakovat celou smyčku 5x</i>
        ret                            <i>; návrat z podprogramu</i>
&nbsp;
&nbsp;
&nbsp;
<strong>print_string</strong>:
        ld   A, (HL)                   <i>; načíst kód znaku z řetězce</i>
        and  a                         <i>; test na kód znak s kódem 0</i>
        ret  Z                         <i>; ukončit program na konci řetězce</i>
&nbsp;
        rst  0x10                      <i>; zavolání rutiny v ROM</i>
        inc  HL                        <i>; přechod na další znak</i>
        jr   print_string
        ret                            <i>; návrat ze subrutiny</i>
&nbsp;
&nbsp;
&nbsp;
<strong>keys</strong>:                                  <i>; layout klávesnice z pohledu čipů ZX Spectra</i>
        NEW_LINE      equ 13
        END_OF_STRING equ  0
        DB "^", "Z", "X", "C", "V", NEW_LINE
        DB "A", "S", "D", "F", "G", NEW_LINE
        DB "Q", "W", "E", "R", "T", NEW_LINE
        DB "1", "2", "3", "4", "5", NEW_LINE
        DB "0", "9", "8", "7", "6", NEW_LINE
        DB "P", "O", "I", "U", "Y", NEW_LINE
        DB 127, "L", "K", "J", "H", NEW_LINE
        DB "_", $60, "M", "N", "B", END_OF_STRING
&nbsp;
&nbsp;
&nbsp;
end ENTRY_POINT
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu najdete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm</a>.</div></p>

<p>A takto vypadá způsob překladu tohoto demonstračního příkladu do strojového
kódu (výsledný kód je relativně objemný kvůli expanzi maker):</p>

<pre>
ATTRIBUTE_ADR   EQU 5800
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
BLINK_BIT       EQU 0080
INTENSITY_BIT   EQU 0040
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
KB_ROW_0_PORT   EQU 00FE
KB_ROW_1_PORT   EQU 00FD
KB_ROW_2_PORT   EQU 00FB
KB_ROW_3_PORT   EQU 00F7
KB_ROW_4_PORT   EQU 00EF
KB_ROW_5_PORT   EQU 00DF
KB_ROW_6_PORT   EQU 00BF
KB_ROW_7_PORT   EQU 007F
Defining MACRO changeAttribute
Params: attribute
Defining MACRO keypress
Params: port, attribute_address
8000:           label start
8000:CDAF0D     CALL 0DAF
8003:217880     LD HL, 8078
8006:CD7080     CALL 8070
8009:           label repeat
Expanding MACRO keypress
port= KB_ROW_0_PORT 
attribute_address= ATTRIBUTE_ADR + 0020 * 0000 
LD B , port 
8009:06FE       LD B, FE
LD C , 00FE 
800B:0EFE       LD C, FE
LD HL , attribute_address 
800D:210058     LD HL, 5800
CALL keypress_detection 
8010:CD5D80     CALL 805D
ENDM 
                ENDM
End of MACRO keypress
Expanding MACRO keypress
port= KB_ROW_1_PORT 
attribute_address= ATTRIBUTE_ADR + 0020 * 0001 
LD B , port 
8013:06FD       LD B, FD
LD C , 00FE 
8015:0EFE       LD C, FE
LD HL , attribute_address 
8017:212058     LD HL, 5820
CALL keypress_detection 
801A:CD5D80     CALL 805D
ENDM 
                ENDM
End of MACRO keypress
Expanding MACRO keypress
port= KB_ROW_2_PORT 
attribute_address= ATTRIBUTE_ADR + 0020 * 0002 
LD B , port 
801D:06FB       LD B, FB
LD C , 00FE 
801F:0EFE       LD C, FE
LD HL , attribute_address 
8021:214058     LD HL, 5840
CALL keypress_detection 
8024:CD5D80     CALL 805D
ENDM 
                ENDM
End of MACRO keypress
Expanding MACRO keypress
port= KB_ROW_3_PORT 
attribute_address= ATTRIBUTE_ADR + 0020 * 0003 
LD B , port 
8027:06F7       LD B, F7
LD C , 00FE 
8029:0EFE       LD C, FE
LD HL , attribute_address 
802B:216058     LD HL, 5860
CALL keypress_detection 
802E:CD5D80     CALL 805D
ENDM 
                ENDM
End of MACRO keypress
Expanding MACRO keypress
port= KB_ROW_4_PORT 
attribute_address= ATTRIBUTE_ADR + 0020 * 0004 
LD B , port 
8031:06EF       LD B, EF
LD C , 00FE 
8033:0EFE       LD C, FE
LD HL , attribute_address 
8035:218058     LD HL, 5880
CALL keypress_detection 
8038:CD5D80     CALL 805D
ENDM 
                ENDM
End of MACRO keypress
Expanding MACRO keypress
port= KB_ROW_5_PORT 
attribute_address= ATTRIBUTE_ADR + 0020 * 0005 
LD B , port 
803B:06DF       LD B, DF
LD C , 00FE 
803D:0EFE       LD C, FE
LD HL , attribute_address 
803F:21A058     LD HL, 58A0
CALL keypress_detection 
8042:CD5D80     CALL 805D
ENDM 
                ENDM
End of MACRO keypress
Expanding MACRO keypress
port= KB_ROW_6_PORT 
attribute_address= ATTRIBUTE_ADR + 0020 * 0006 
LD B , port 
8045:06BF       LD B, BF
LD C , 00FE 
8047:0EFE       LD C, FE
LD HL , attribute_address 
8049:21C058     LD HL, 58C0
CALL keypress_detection 
804C:CD5D80     CALL 805D
ENDM 
                ENDM
End of MACRO keypress
Expanding MACRO keypress
port= KB_ROW_7_PORT 
attribute_address= ATTRIBUTE_ADR + 0020 * 0007 
LD B , port 
804F:067F       LD B, 7F
LD C , 00FE 
8051:0EFE       LD C, FE
LD HL , attribute_address 
8053:21E058     LD HL, 58E0
CALL keypress_detection 
8056:CD5D80     CALL 805D
ENDM 
                ENDM
End of MACRO keypress
8059:C30980     JP 8009
805C:C9         RET
805D:           label keypress_detection
805D:ED78       IN A, (C)
805F:0605       LD B, 05
8061:           label next_key
8061:CB3F       SRL A
8063:3005       JR NC, 806A
Expanding MACRO changeAttribute
attribute= WHITE_COLOR &lt;&lt; 0003 
LD ( HL ) , attribute 
8065:3638       LD (HL), 38
INC HL 
8067:23         INC HL
ENDM 
                ENDM
End of MACRO changeAttribute
8068:1803       JR 806D
806A:           label key_pressed
Expanding MACRO changeAttribute
attribute= INTENSITY_BIT | ( RED_COLOR &lt;&lt; 0003 ) 
LD ( HL ) , attribute 
806A:3650       LD (HL), 50
INC HL 
806C:23         INC HL
ENDM 
                ENDM
End of MACRO changeAttribute
806D:           label next
806D:10F2       DJNZ 8061
806F:C9         RET
8070:           label print_string
8070:7E         LD A, (HL)
8071:A7         AND A
8072:C8         RET Z
8073:D7         RST 10
8074:23         INC HL
8075:18F9       JR 8070
8077:C9         RET
8078:           label keys
NEW_LINE        EQU 000D
END_OF_STRING   EQU 0000
8078:5E5A5843   DEFB of 6 bytes
807C:560D
807E:41534446   DEFB of 6 bytes
8082:470D
8084:51574552   DEFB of 6 bytes
8088:540D
808A:31323334   DEFB of 6 bytes
808E:350D
8090:30393837   DEFB of 6 bytes
8094:360D
8096:504F4955   DEFB of 6 bytes
809A:590D
809C:7F4C4B4A   DEFB of 6 bytes
80A0:480D
80A2:5F604D4E   DEFB of 6 bytes
80A6:4200
80A8:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 80A7
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Problematika detekce stisku většího množství kláves</h2>

<p>ZX Spectrum, podobně jako prakticky všechny další typy osmibitových domácích
počítačů, mají (z&nbsp;pohledu zapojení) klávesy na klávesnici uspořádané do
pravidelné mřížky, kterou jsme mohli vidět na třetím obrázku <a href="#k02">ve
druhé kapitole</a>. Vzhledem ke snaze o dosažení výhodné výrobní ceny nejsou
k&nbsp;jednotlivým klávesám paralelně připojeny diody (což je problematické i
z&nbsp;hlediska konstrukčního), což v&nbsp;praxi znamená, že stisk několika
kláves může vést k&nbsp;tomu, že si program bude &bdquo;myslet&ldquo;, že jsou
stlačeny i další klávesy &ndash; tomuto jevu se říká <i>ghosting</i>. Podívejme
se na příklad:</p>

<a href="https://www.root.cz/obrazek/1091471/"><img src="https://i.iinfo.cz/images/293/devel-speccy-d-18-prev.png" class="image-1091471" data-prev-filename="https://i.iinfo.cz/images/293/devel-speccy-d-18-prev.png" data-prev-width="370" data-prev-height="204" data-large-filename="https://i.iinfo.cz/images/293/devel-speccy-d-18-large.png" data-large-width="720" data-large-height="398" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="204" /></a>
<p><i>Obrázek 19: Stisk kláves 4, 5 a V.</i></p>

<p>Na předchozím obrázku je ukázána situace, kdy jsou stlačeny klávesy
<strong>4</strong>, <strong>5</strong> a <strong>V</strong>. Přitom se snažíme
číst informace o klávesách ze sloupce A8. To znamená, že se na horní polovinu
adresní sběrnice pošlou logické hodnoty 11111110, což vede k&nbsp;tomu, že
pouze přes diodu D6 dojde ke &bdquo;stažení&ldquo; napěťové úrovně na logickou
nulu. Pokud čteme hodnoty z&nbsp;ULA (D0-D4), bude logická nula nastavena pouze
v&nbsp;případě, že je příslušná klávesa Caps Shift, Z, X, C či V stisknuta
&ndash; potom se totiž &bdquo;stáhne&ldquo; napěťová úroveň na nulu za diodou.
Ovšem kvůli současnému stisku <strong>4</strong> a <strong>5</strong>, tedy
kláves z&nbsp;jiné části matrice, dojde k&nbsp;tomu, že stisk klávesy
<strong>V</strong> ovlivní i informaci o stisku klávesy <strong>C</strong>
&ndash; ta bude jakoby stlačena současně s&nbsp;<strong>V</strong>. Proč tomu
tak je? I hodnota čtená přes KB3 bude rovna logické nule, protože došlo
k&nbsp;elektrickému propojení obou řádků přes <strong>4</strong> a
<strong>5</strong>.</p>

<p><div class="rs-tip-major">Poznámka: aby to bylo ještě napínavější, není
emulace ZX Spectra dokonalá, protože běžné (neherní) klávesnice trpí buď
podobným problémem nebo problémem opačným &ndash; není možné zjistit stisk
většího množství kláves v&nbsp;jednom bloku, přičemž bloky mohou být různé.
Ostatně si to sami můžete vyzkoušet &ndash; dnešní poslední demonstrační
příklad velmi pravděpodobně nedonutíte k&nbsp;tomu, aby byly červeně zvýrazněny
všechny klávesy (většinou nepůjde detekovat stisk více než zhruba 3-5 kláves;
výjimkou bývají Shifty a podobné přeřaďovače). Nebo si můžete toto chování
otestovat <a
href="https://www.microsoft.com/applied-sciences/projects/anti-ghosting-demo/">zde</a>.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Od klávesnice k&nbsp;joystickům</h2>

<p>Jak jsme si již řekli v&nbsp;úvodní části dnešního článku, nemusí se na ZX
Spectru pro ovládání her používat pouze klávesnice. Prakticky u každé hry se
setkáme i s&nbsp;nabídkou použití joysticku. Těch existuje několik typů,
přičemž se od sebe odlišují způsobem zapojení k&nbsp;ZX Spectru a tím pádem i
způsobem čtení jejich stavu (ovšem díky jednoduchosti HW ZX Spectra i snahou o
co nejmenší cenu joysticků je čtení jejich stavu triviální). Setkáme se
s&nbsp;de-facto standardy pojmenovanými Kempston, Interface II, Protek, Fuller,
Cursor atd. (proč a jak tyto názvy vznikly, si povíme příště).</p>

<img src="https://i.iinfo.cz/images/293/devel-speccy-d-17.png" class="image-1091470" alt="&#160;" title="Autor: tisnik + third party, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 20: Hra <strong>Quazatron</strong> nabízející různé způsoby
ovládání několika typy joysticků i s&nbsp;využitím klávesnice.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</h2>

<p>Výše uvedené demonstrační příklady i příklady, které již byly popsány
v&nbsp;předchozích dvanácti článcích [<a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">1</a>]
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-mikroprocesor-zilog-z80-a-smycky-v-assembleru/">2</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-vypis-informaci-na-obrazovku/">3</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-her-a-dem-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny/">4</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-her-a-dem-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny-podruhe/">5</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-vlastni-vykreslovaci-subrutiny-potreti/">6</a>],
[<a
href="https://www.root.cz/clanky/vyvoj-pro-zx-spectrum-dokonceni-realizace-prikazu-plot/">7</a>],
[<a
href="https://www.root.cz/clanky/zobrazeni-cisel-a-zpracovani-priznaku-mikroprocesoru-zilog-z80/">8</a>],
[<a
href="https://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ulozenymi-binarne-i-ve-formatu-bcd/">9</a>],
[<a
href="https://www.root.cz/clanky/tisk-hexadecimalnich-hodnot-s-vyuzitim-instrukce-daa-na-zx-spectru/">10</a>],
[<a
href="https://www.root.cz/clanky/kopie-datovych-bloku-na-zx-spectru-prenaseni-bajt-po-bajtu/">11</a>],
[<a
href="https://www.root.cz/clanky/kopie-datovych-bloku-na-zx-spectru-s-vyuzitim-zasobniku/">12</a>],
je možné přeložit s&nbsp;využitím souboru Makefile, jehož aktuální verze vypadá
následovně (pro překlad a slinkování je použit assembler <i>Pasmo</i>):</p>

<pre>
ASSEMBLER := pasmo
&nbsp;
all: 01.tap 02.tap 03.tap 04.tap 05.tap 06.tap 07.tap 08.tap 09.tap 10.tap \
    11.tap 12.tap 13.tap 14.tap 15.tap 16.tap 17.tap 18.tap 19.tap 20.tap \
    21.tap 22.tap 23.tap 24.tap 25.tap 26.tap 27.tap 28.tap 29.tap 30.tap \
    31.tap 32.tap 33.tap 34.tap 35.tap 36.tap 37.tap 38.tap 39.tap 40.tap \
    41.tap 42.tap 43.tap 44.tap 45.tap 46.tap 47.tap 48.tap 49.tap 50.tap \
    51.tap 52.tap 53.tap 54.tap 55.tap 56.tap 57.tap 58.tap 59.tap 60.tap \
    61.tap 62.tap 63.tap 64.tap 65.tap 66.tap 67.tap 68.tap 69.tap 70.tap \
    71.tap 72.tap 73.tap 74.tap 75.tap 76.tap 77.tap 78.tap 79.tap 80.tap \
    81.tap 82.tap 83.tap 84.tap 85.tap 86.tap 87.tap 88.tap 80.tap 90.tap \
    91.tap 92.tap 93.tap 94.tap 95.tap 96.tap 97.tap
&nbsp;
clean:
        rm -f *.tap
&nbsp;
.PHONY: all clean
&nbsp;
&nbsp;
01.tap: 01-color-attribute.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 01-color-attribute.lst
&nbsp;
02.tap: 02-blinking-attribute.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 02-blinking-attribute.lst
&nbsp;
03.tap: 03-symbolic-names.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 03-symbolic-names.lst
&nbsp;
04.tap: 04-operators.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 04-operators.lst
&nbsp;
05.tap: 05-better-symbols.asm
        $(ASSEMBLER) -v -d --tap $&lt; $@ &gt; 05-better-symbols.lst
&nbsp;
06.tap: 06-tapbas-v1.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 06-tapbas-v1.lst
&nbsp;
07.tap: 07-tapbas-v2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 07-tapbas-v2.lst
&nbsp;
08.tap: 08-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 08-loop.lst
&nbsp;
09.tap: 09-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 09-loop.lst
&nbsp;
10.tap: 10-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 10-loop.lst
&nbsp;
11.tap: 11-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 11-loop.lst
&nbsp;
12.tap: 12-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 12-loop.lst
&nbsp;
13.tap: 13-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 13-loop.lst
&nbsp;
14.tap: 14-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 14-loop.lst
&nbsp;
15.tap: 15-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 15-loop.lst
&nbsp;
16.tap: 16-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 16-loop.lst
&nbsp;
17.tap: 17-loop.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 17-loop.lst
&nbsp;
18.tap: 18-cls.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 18-cls.lst
&nbsp;
19.tap: 19-print-char-call.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 19-print-char-call.lst
&nbsp;
20.tap: 20-print-char-rst.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 20-print-char-rst.lst
&nbsp;
21.tap: 21-print-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 21-print-char.lst
&nbsp;
22.tap: 22-print-all-chars.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 22-print-all-chars.lst
&nbsp;
23.tap: 23-print-all-chars.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 23-print-all-chars.lst
&nbsp;
24.tap: 24-change-color.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 24-change-color.lst
&nbsp;
25.tap: 25-change-flash.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 25-change-flash.lst
&nbsp;
26.tap: 26-print-at.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 26-print-at.lst
&nbsp;
27.tap: 27-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 27-print-string.lst
&nbsp;
28.tap: 28-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 28-print-string.lst
&nbsp;
29.tap: 29-print-colorized-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 29-print-colorized-string.lst
&nbsp;
30.tap: 30-print-string-ROM.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 30-print-string-ROM.lst
&nbsp;
31.tap: 31-attributes.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 31-attributes.lst
&nbsp;
32.tap: 32-fill-in-vram.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 32-fill-in-vram.lst
&nbsp;
33.tap: 33-fill-in-vram-no-ret.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 33-fill-in-vram-no-ret.lst
&nbsp;
34.tap: 34-fill-in-vram-pattern.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 34-fill-in-vram-pattern.lst
&nbsp;
35.tap: 35-slow-fill-in-vram.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 35-slow-fill-in-vram.lst
&nbsp;
36.tap: 36-slow-fill-in-vram-no-ret.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 36-slow-fill-in-vram-no-ret.lst
&nbsp;
37.tap: 37-fill-block.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 37-fill-block.lst
&nbsp;
38.tap: 38-fill-block-with-pattern.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 38-fill-block-with-pattern.lst
&nbsp;
39.tap: 39-fill-block-optimized.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 39-fill-block-optimized.lst
&nbsp;
40.tap: 40-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 40-draw-char.lst
&nbsp;
41.tap: 41-draw-any-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 41-draw-any-char.lst
&nbsp;
42.tap: 42-block-anywhere.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 42-block-anywhere.lst
&nbsp;
43.tap: 43-block-anywhere-rrca.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 43-block-anywhere-rrca.lst
&nbsp;
44.tap: 44-better-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 44-better-draw-char.lst
&nbsp;
45.tap: 45-even-better-draw-char.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 45-even-better-draw-char.lst
&nbsp;
46.tap: 46-draw-char-at.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 46-draw-char-at.lst
&nbsp;
47.tap: 47-draw-char-at-unrolled.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 47-draw-char-at-unrolled.lst
&nbsp;
48.tap: 48-incorrect-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 48-incorrect-print-string.lst
&nbsp;
49.tap: 49-correct-print-string.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 49-correct-print-string.lst
&nbsp;
50.tap: 50-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 50-ascii-table.lst
&nbsp;
51.tap: 51-plot-block.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 51-plot-block.lst
&nbsp;
52.tap: 52-plot-pixel.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 52-plot-pixel.lst
&nbsp;
53.tap: 53-plot-pixel.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 53-plot-pixel.lst
&nbsp;
54.tap: 54-plot-pixel-on-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 54-plot-pixel-on-background.lst
&nbsp;
55.tap: 55-plot-pixel-on-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 55-plot-pixel-on-background.lst
&nbsp;
56.tap: 56-inverse-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 56-inverse-ascii-table.lst
&nbsp;
57.tap: 57-plot-pixel-on-inverse-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 57-plot-pixel-on-inverse-background.lst
&nbsp;
58.tap: 58-plot-inverse-pixel-on-inverse-background.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 58-plot-inverse-pixel-on-inverse-background.lst
&nbsp;
59.tap: 59-configurable-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 59-configurable-ascii-table.lst
&nbsp;
60.tap: 60-plot-over.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 60-plot-over.lst
&nbsp;
61.tap: 61-print-number-A.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 61-print-number-A.lst
&nbsp;
62.tap: 62-print-number-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 62-print-number-B.lst
&nbsp;
63.tap: 63-print-number-C.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 63-print-number-C.lst
&nbsp;
64.tap: 64-print-number-D.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 64-print-number-D.lst
&nbsp;
65.tap: 65-more-numbers-A.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 65-more-numbers-A.lst
&nbsp;
66.tap: 66-more-numbers-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 66-more-numbers-B.lst
&nbsp;
67.tap: 67-print-flags-1.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 67-print-flags-1.lst
&nbsp;
68.tap: 68-print-flags-2.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 68-print-flags-2.lst
&nbsp;
69.tap: 69-print-flags-3.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 69-print-flags-3.lst
&nbsp;
70.tap: 70-print-flags-4.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 70-print-flags-4.lst
&nbsp;
71.tap: 71-print-flags-5.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 71-print-flags-5.lst
&nbsp;
72.tap: 72-print-flags-6.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 72-print-flags-6.lst
&nbsp;
73.tap: 73-print-flags-7.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 73-print-flags-7.lst
&nbsp;
74.tap: 74-print-hex-number.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 74-print-hex-number.lst
&nbsp;
75.tap: 75-print-hex-number.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 75-print-hex-number.lst
&nbsp;
76.tap: 76-print-hex-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 76-print-hex-numbers.lst
&nbsp;
77.tap: 77-add-hex-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 77-add-hex-numbers.lst
&nbsp;
78.tap: 78-add-bcd-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 78-add-bcd-numbers.lst
&nbsp;
79.tap: 79-print-hex-digit-jmp.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 79-print-hex-digit-jmp.lst
&nbsp;
80.tap: 80-print-hex-digit-overflow.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 80-print-hex-digit-overflow.lst
&nbsp;
81.tap: 81-print-hex-digit-daa.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 81-print-hex-digit-daa.lst
&nbsp;
82.tap: 82-print-hex-numbers-daa.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 82-print-hex-numbers-daa.lst
&nbsp;
83.tap: 83-print-fp-numbers.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 83-print-fp-numbers.lst
&nbsp;
84.tap: 84-print-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 84-print-ascii-table.lst
&nbsp;
85.tap: 85-copy-ascii-table.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 85-copy-ascii-table.lst
&nbsp;
86.tap: 86-copy-ascii-table-B.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 86-copy-ascii-table-B.lst
&nbsp;
87.tap: 87-copy-ascii-table-C.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 87-copy-ascii-table-C.lst
&nbsp;
88.tap: 88-copy-ascii-table-D.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 88-copy-ascii-table-D.lst
&nbsp;
89.tap: 89-copy-ascii-table-E.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 89-copy-ascii-table-E.lst
&nbsp;
90.tap: 90-copy-ascii-table-F.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 90-copy-ascii-table-F.lst
&nbsp;
91.tap: 91-copy-ascii-table-G.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 91-copy-ascii-table-G.lst
&nbsp;
92.tap: 92-copy-ascii-table-H.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 92-copy-ascii-table-H.lst
&nbsp;
93.tap: 93-copy-ascii-table-I.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 93-copy-ascii-table-I.lst
&nbsp;
94.tap: 94-color-attribute.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 94-color-attribute.lst
&nbsp;
95.tap: 95-keypress.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 95-keypress.lst
&nbsp;
96.tap: 96-keypress-row.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 96-keypress-row.lst
&nbsp;
97.tap: 97-keypress-all-rows.asm
        $(ASSEMBLER) -v -d --tapbas $&lt; $@ &gt; 97-keypress-all-rows.lst
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
prozatím popsané demonstrační příklady určené pro překlad a spuštění na
osmibitovém domácím mikropočítači ZX Spectrum (libovolný model či jeho klon),
které jsou psány v&nbsp;assembleru mikroprocesoru Zilog Z80. Pro překlad těchto
demonstračních příkladů je možné použít například assembler <i>Pasmo</i> (viz
též <a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">úvodní
článek</a>):</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01-color-attribute.asm</td><td>modifikace jednoho barvového atributu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm</a></td></tr>
<tr><td> 2</td><td>02-blinking-attribute.asm</td><td>barvový atribut s&nbsp;nastavením bitů pro blikání a vyšší intenzitu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm</a></td></tr>
<tr><td> 3</td><td>03-symbolic-names.asm</td><td>symbolická jména v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm</a></td></tr>
<tr><td> 4</td><td>04-operators.asm</td><td>operátory a operace se symbolickými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm</a></td></tr>
<tr><td> 5</td><td>05-better-symbols.asm</td><td>tradičnější symbolická jména</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm</a></td></tr>
<tr><td> 6</td><td>06-tapbas-v1.asm</td><td>vygenerování BASICovského loaderu (neúplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm</a></td></tr>
<tr><td> 7</td><td>07-tapbas-v2.asm</td><td>vygenerování BASICovského loaderu (úplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm</a></td></tr>
<tr><td> 8</td><td>08-loop.asm</td><td>jednoduchá počítaná programová smyčka: naivní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm</a></td></tr>
<tr><td> 9</td><td>09-loop.asm</td><td>programová smyčka: zkrácení kódu pro vynulování použitých pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm</a></td></tr>
<tr><td>10</td><td>10-loop.asm</td><td>programová smyčka: optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm</a></td></tr>
<tr><td>11</td><td>11-loop.asm</td><td>programová smyčka: optimalizace využití pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm</a></td></tr>
<tr><td>12</td><td>12-loop.asm</td><td>programová smyčka: použití pracovního registru IX</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm</a></td></tr>
<tr><td>13</td><td>13-loop.asm</td><td>programová smyčka: použití pracovního registru IY</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm</a></td></tr>
<tr><td>14</td><td>14-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm</a></td></tr>
<tr><td>15</td><td>15-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm</a></td></tr>
<tr><td>16</td><td>16-loop.asm</td><td>použití relativního skoku a nikoli skoku absolutního</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm</a></td></tr>
<tr><td>17</td><td>17-loop.asm</td><td>programová smyčka: <strong>inc l</strong> namísto <strong>inc hl</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>18-cls.asm</td><td>smazání obrazovky a otevření kanálu číslo 2 (screen) přes funkci v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm</a></td></tr>
<tr><td>19</td><td>19-print-char-call.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce CALL)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm</a></td></tr>
<tr><td>20</td><td>20-print-char-rst.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce RST)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm</a></td></tr>
<tr><td>21</td><td>21-print-char.asm</td><td>pouze výpis jednoho znaku na obrazovku bez jejího smazání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm</a></td></tr>
<tr><td>22</td><td>22-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (nekorektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm</a></td></tr>
<tr><td>23</td><td>23-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (korektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm</a></td></tr>
<tr><td>24</td><td>24-change-color.asm</td><td>změna barvových atributů (popředí a pozadí) vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm</a></td></tr>
<tr><td>25</td><td>25-change-flash.asm</td><td>povolení či zákaz blikání vypisovaných znaků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm</a></td></tr>
<tr><td>26</td><td>26-print-at.asm</td><td>výpis znaku či znaků na určené místo na obrazovce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm</a></td></tr>
<tr><td>27</td><td>27-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (základní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/27-print-string.asm</a></td></tr>
<tr><td>28</td><td>28-print-string.asm</td><td>výpis celého řetězce explicitně zapsanou programovou smyčkou (vylepšená varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/28-print-string.asm</a></td></tr>
<tr><td>29</td><td>29-print-colorized-string.asm</td><td>výpis řetězce, který obsahuje i řídicí znaky pro změnu barvy atd.</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/29-print-colorized-string.asm</a></td></tr>
<tr><td>30</td><td>30-print-string-ROM.asm</td><td>výpis řetězce s&nbsp;využitím služby/subrutiny uložené v&nbsp;ROM ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/30-print-string-ROM.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>31-attributes.asm</td><td>modifikace atributů pro tisk řetězce subrutinou uloženou v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/31-attributes.asm</a></td></tr>
<tr><td>32</td><td>32-fill-in-vram.asm</td><td>vyplnění celé bitmapy barvou popředí, návrat do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/32-fill-in-vram.asm</a></td></tr>
<tr><td>33</td><td>33-fill-in-vram-no-ret.asm</td><td>vyplnění celé bitmapy barvou popředí, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/33-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>34</td><td>34-fill-in-vram-pattern.asm</td><td>vyplnění celé bitmapy zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/34-fill-in-vram-pattern.asm</a></td></tr>
<tr><td>35</td><td>35-slow-fill-in-vram.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/35-slow-fill-in-vram.asm</a></td></tr>
<tr><td>36</td><td>36-slow-fill-in-vram-no-ret.asm</td><td>pomalé vyplnění celé bitmapy, vizualizace struktury bitmapy, bez návratu do systému</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/36-slow-fill-in-vram-no-ret.asm</a></td></tr>
<tr><td>37</td><td>37-fill-block.asm</td><td>vykreslení bloku 8&times;8 pixelů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/37-fill-block.asm</a></td></tr>
<tr><td>38</td><td>38-fill-block-with-pattern.asm</td><td>vykreslení bloku 8&times;8 pixelů zvoleným vzorkem</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/38-fill-block-with-pattern.asm</a></td></tr>
<tr><td>39</td><td>39-fill-block-optimized.asm</td><td>optimalizace předchozího příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/39-fill-block-optimized.asm</a></td></tr>
<tr><td>40</td><td>40-draw-char.asm</td><td>vykreslení znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/40-draw-char.asm</a></td></tr>
<tr><td>41</td><td>41-draw-any-char.asm</td><td>podprogram pro vykreslení libovolně zvoleného znaku do levého horního rohu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/41-draw-any-char.asm</a></td></tr>
<tr><td>42</td><td>42-block-anywhere.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/42-block-anywhere.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>43-block-anywhere-rrca.asm</td><td>podprogramy pro vykreslení bloku 8&times;8 pixelů kamkoli na obrazovku, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/43-block-anywhere-rrca.asm</a></td></tr>
<tr><td>44</td><td>44-better-draw-char.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/44-better-draw-char.asm</a></td></tr>
<tr><td>45</td><td>45-even-better-draw-char.asm</td><td>posun offsetu pro vykreslení dalšího znaku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/45-even-better-draw-char.asm</a></td></tr>
<tr><td>46</td><td>46-draw-char-at.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/46-draw-char-at.asm</a></td></tr>
<tr><td>47</td><td>47-draw-char-at-unrolled.asm</td><td>vykreslení znaku v&nbsp;masce 8&times;8 pixelů kamkoli na obrazovku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/47-draw-char-at-unrolled.asm</a></td></tr>
<tr><td>48</td><td>48-incorrect-print-string.asm</td><td>tisk řetězce, nekorektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/48-incorrect-print-string.asm</a></td></tr>
<tr><td>49</td><td>49-correct-print-string.asm</td><td>tisk řetězce, korektní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/49-correct-print-string.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>50-ascii-table.asm</td><td>tisk několika bloků ASCII tabulky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/50-ascii-table.asm</a></td></tr>
<tr><td>51</td><td>51-plot-block.asm</td><td>vykreslení pixelu verze 1: zápis celého bajtu na pozici pixelu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/51-plot-block.asm</a></td></tr>
<tr><td>52</td><td>52-plot-pixel.asm</td><td>vykreslení pixelu verze 2: korektní vykreslení jednoho pixelu, ovšem překreslení celého bajtu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/52-plot-pixel.asm</a></td></tr>
<tr><td>53</td><td>53-plot-pixel.asm</td><td>vykreslení pixelu verze 3: vylepšená verze předchozího demonstračního příkladu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/53-plot-pixel.asm</a></td></tr>
<tr><td>54</td><td>54-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (nekorektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/54-plot-pixel-on-background.asm</a></td></tr>
<tr><td>55</td><td>55-plot-pixel-on-background.asm</td><td>vykreslení pixelu vůči pozadí (korektní varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/55-plot-pixel-on-background.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>56</td><td>56-inverse-ascii-table.asm</td><td>vykreslení ASCII tabulky inverzní barvou (inkoust vs. papír)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/56-inverse-ascii-table.asm</a></td></tr>
<tr><td>57</td><td>57-plot-pixel-on-inverse-background.asm</td><td>vykreslení pixelů barvou papíru proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/57-plot-pixel-on-inverse-background.asm</a></td></tr>
<tr><td>58</td><td>58-plot-inverse-pixel-on-inverse-background.asm</td><td>vykreslení pixelů inverzní barvou proti inverzní ASCII tabulce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/58-plot-inverse-pixel-on-inverse-background.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm58-plot-inverse-pixel-on-inverse-background.asm/</a></td></tr>
<tr><td>59</td><td>59-configurable-ascii-table.asm</td><td>vykreslení ASCII tabulky buď přímo inkoustem nebo inverzně</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/59-configurable-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/59-configurable-ascii-table.asm</a></td></tr>
<tr><td>60</td><td>60-plot-over.asm</td><td>přibližná implementace příkazu <strong>PLOT OVER</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/60-plot-over.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/60-plot-over.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>61-print-number-A.asm</td><td>ukázka použití podprogramu pro tisk celého čísla</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/61-print-number-A.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/61-print-number-A.asm</a></td></tr>
<tr><td>62</td><td>62-print-number-B.asm</td><td>pokus o vytištění záporných čísel</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/62-print-number-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/62-print-number-B.asm</a></td></tr>
<tr><td>63</td><td>63-print-number-C.asm</td><td>tisk maximální podporované hodnoty 9999</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/63-print-number-C.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/63-print-number-C.asm</a></td></tr>
<tr><td>64</td><td>64-print-number-D.asm</td><td>tisk vyšší než podporované hodnoty 10000</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/64-print-number-D.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/64-print-number-D.asm</a></td></tr>
<tr><td>65</td><td>65-more-numbers-A.asm</td><td>vytištění číselné řady</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/65-more-numbers-A.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/65-more-numbers-A.asm</a></td></tr>
<tr><td>66</td><td>66-more-numbers-B.asm</td><td>kombinace tisku celočíselných hodnot s&nbsp;dalšími subrutinami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/66-more-numbers-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/66-more-numbers-B.asm</a></td></tr>
<tr><td>67</td><td>67-print-flags-1.asm</td><td>příznakové bity po provedení celočíselné operace 1+2</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/67-print-flags-1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/67-print-flags-1.asm</a></td></tr>
<tr><td>68</td><td>68-print-flags-2.asm</td><td>příznakové bity po provedení celočíselné operace 0+0</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/68-print-flags-2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/68-print-flags-2.asm</a></td></tr>
<tr><td>69</td><td>69-print-flags-3.asm</td><td>příznakové bity po provedení operace 255+1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/69-print-flags-3.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/69-print-flags-3.asm</a></td></tr>
<tr><td>70</td><td>70-print-flags-4.asm</td><td>příznakové bity po provedení operace 254+1</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/70-print-flags-4.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/70-print-flags-4.asm</a></td></tr>
<tr><td>71</td><td>71-print-flags-5.asm</td><td>příznakové bity po provedení operace 255+255</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/71-print-flags-5.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/71-print-flags-5.asm</a></td></tr>
<tr><td>72</td><td>72-print-flags-6.asm</td><td>výsledek operace 100+100, nastavení příznakových bitů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/72-print-flags-6.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/72-print-flags-6.asm</a></td></tr>
<tr><td>73</td><td>73-print-flags-7.asm</td><td>výsledek operace 128+128, nastavení příznakových bitů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/73-print-flags-7.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/73-print-flags-7.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>74</td><td>74-print-hex-number.asm</td><td>tisk hexadecimálního čísla v&nbsp;rozsahu 0x00 až 0xff (neoptimalizovaná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/74-print-hex-number.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/74-print-hex-number.asm</a></td></tr>
<tr><td>75</td><td>75-print-hex-number.asm</td><td>tisk hexadecimálního čísla v&nbsp;rozsahu 0x00 až 0xff (optimalizovaná varianta)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/75-print-hex-number.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/75-print-hex-number.asm</a></td></tr>
<tr><td>76</td><td>76-print-hex-numbers.asm</td><td>tisk několika hexadecimálních hodnot</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/76-print-hex-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/76-print-hex-numbers.asm</a></td></tr>
<tr><td>77</td><td>77-add-hex-numbers.asm</td><td>součet dvou osmibitových hexadecimálních hodnot s&nbsp;tiskem všech výsledků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/77-add-hex-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/77-add-hex-numbers.asm</a></td></tr>
<tr><td>78</td><td>78-add-bcd-numbers.asm</td><td>součet dvou osmibitových BCD hodnot s&nbsp;tiskem všech výsledků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/78-add-bcd-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/78-add-bcd-numbers.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>79</td><td>79-print-hex-digit-jmp.asm</td><td>tisk jedné hexadecimální cifry s&nbsp;využitím podmíněného skoku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/79-print-hex-digit-jmp.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/79-print-hex-digit-jmp.asm</a></td></tr>
<tr><td>80</td><td>80-print-hex-digit-overflow.asm</td><td>otestování, jaký znak je vytištěn pro hodnoty větší než 15</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/80-print-hex-digit-overflow.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/80-print-hex-digit-overflow.asm</a></td></tr>
<tr><td>81</td><td>81-print-hex-digit-daa.asm</td><td>tisk jedné hexadecimální cifry s&nbsp;využitím instrukce DAA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/81-print-hex-digit-daa.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/81-print-hex-digit-daa.asm</a></td></tr>
<tr><td>82</td><td>82-print-hex-numbers-daa.asm</td><td>tisk série hexadecimálních hodnot s&nbsp;využitím instrukce DAA</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/82-print-hex-numbers-daa.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/82-print-hex-numbers-daa.asm</a></td></tr>
<tr><td>83</td><td>83-print-fp-numbers.asm</td><td>tisk numerických hodnot reprezentovaných v&nbsp;systému plovoucí řádové tečky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/83-print-fp-numbers.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/83-print-fp-numbers.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>84</td><td>84-print-ascii-table.asm</td><td>tisk jednoho bloku s&nbsp;ASCII tabulkou</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/84-print-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/84-print-ascii-table.asm</a></td></tr>
<tr><td>85</td><td>85-copy-ascii-table.asm</td><td>kopie bloku bajt po bajtu založená na naivní programové smyčce</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/85-copy-ascii-table.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/85-copy-ascii-table.asm</a></td></tr>
<tr><td>86</td><td>86-copy-ascii-table-B.asm</td><td>kopie bloku s&nbsp;využitím instrukce <strong>LDIR</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/86-copy-ascii-table-B.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/86-copy-ascii-table-B.asm</a></td></tr>
<tr><td>87</td><td>87-copy-ascii-table-C.asm</td><td>kopie bloku bajt po bajtu založená na programové smyčce a instrukci <strong>LDI</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/87-copy-ascii-table-C.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/87-copy-ascii-table-C.asm</a></td></tr>
<tr><td>88</td><td>88-copy-ascii-table-D.asm</td><td>rozbalení programové smyčky s&nbsp;instrukcí <strong>LDI</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/88-copy-ascii-table-D.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/88-copy-ascii-table-D.asm</a></td></tr>
<tr><td>89</td><td>89-copy-ascii-table-E.asm</td><td>korektní smyčka pro všechny možné velikosti bloků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/89-copy-ascii-table-E.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/89-copy-ascii-table-E.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>90</td><td>90-copy-ascii-table-F.asm</td><td>kostra programu, který pro kopii bloků (16 bajtů) využívá zásobník</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/90-copy-ascii-table-F.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/90-copy-ascii-table-F.asm</a></td></tr>
<tr><td>91</td><td>91-copy-ascii-table-G.asm</td><td>definice makra a několikeré použití (aplikace) tohoto makra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/91-copy-ascii-table-G.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/91-copy-ascii-table-G.asm</a></td></tr>
<tr><td>92</td><td>92-copy-ascii-table-H.asm</td><td>opakování makra založené na <strong>REPT</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/92-copy-ascii-table-H.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/92-copy-ascii-table-H.asm</a></td></tr>
<tr><td>93</td><td>93-copy-ascii-table-I.asm</td><td>vícenásobná kopie části obrazovky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/93-copy-ascii-table-I.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/93-copy-ascii-table-I.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>94</td><td>94-color-attribute.asm</td><td>modifikace jednoho barvového atributu na obrazovce ZX Spectra</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/94-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/94-color-attribute.asm</a></td></tr>
<tr><td>95</td><td>95-keypress.asm</td><td>detekce stisku jedné klávesy s&nbsp;vizualizací stisku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/95-keypress.asm</a></td></tr>
<tr><td>96</td><td>96-keypress-row.asm</td><td>detekce stisku kláves v&nbsp;jednom fyzickém řádku</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/96-keypress-row.asm</a></td></tr>
<tr><td>97</td><td>97-keypress-all-rows.asm</td><td>detekce stisku všech kláves klávesnice ZX Spectra 48k</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/97-keypress-all-rows.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>98</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech demonstračních příkladů do podoby obrazu magnetické pásky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>The system variables<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap25.html</a>
</li>

<li>ZX Spectrum manual: chapter #17 Graphics<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap17.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Plovoucí řádová čárka na ZX Spectru<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/#k05</a>
</li>

<li>1A1B: THE 'REPORT AND LINE NUMBER PRINTING' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/1A1B.html">https://skoolkid.github.io/rom/asm/1A1B.html</a>
</li>

<li>2DE3: THE 'PRINT A FLOATING-POINT NUMBER' SUBROUTINE<br />
<a href="https://skoolkid.github.io/rom/asm/2DE3.html">https://skoolkid.github.io/rom/asm/2DE3.html</a>
</li>

<li>5C63: STKBOT - Address of bottom of calculator stack<br />
<a href="https://skoolkid.github.io/rom/asm/5C63.html">https://skoolkid.github.io/rom/asm/5C63.html</a>
</li>

<li>5C65: STKEND - Address of start of spare space<br />
<a href="https://skoolkid.github.io/rom/asm/5C65.html">https://skoolkid.github.io/rom/asm/5C65.html</a>
</li>

<li>Why does Sinclair BASIC have two formats for storing numbers in the same structure?<br />
<a href="https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu">https://retrocomputing.stackexchange.com/questions/8834/why-does-sinclair-basic-have-two-formats-for-storing-numbers-in-the-same-structu</a>
</li>

<li>Chapter 24: The memory<br />
<a href="https://worldofspectrum.org/ZXBasicManual/zxmanchap24.html">https://worldofspectrum.org/ZXBasicManual/zxmanchap24.html</a>
</li>

<li>Survey of Floating-Point Formats  <br />
<a href="https://mrob.com/pub/math/floatformats.html">https://mrob.com/pub/math/floatformats.html</a>
</li>

<li>Convert an 8bit number to hex in z80 assembler<br />
<a href="https://stackoverflow.com/questions/22838444/convert-an-8bit-number-to-hex-in-z80-assembler">https://stackoverflow.com/questions/22838444/convert-an-8bit-number-to-hex-in-z80-assembler</a>
</li>

<li>80 MICROPROCESSOR Instruction Set Summary<br />
<a href="http://www.textfiles.com/programming/CARDS/z80">http://www.textfiles.com/programming/CARDS/z80</a>
</li>

<li>Extended Binary Coded Decimal Interchange Code<br />
<a href="http://en.wikipedia.org/wiki/EBCDIC">http://en.wikipedia.org/wiki/EBCDIC</a>
</li>

<li>ASCII/EBCDIC Conversion Table<br />
<a href="http://docs.hp.com/en/32212-90008/apcs01.html">http://docs.hp.com/en/32212-90008/apcs01.html</a>
</li>

<li>EBCDIC<br />
<a href="http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php">http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php</a>
</li>

<li>EBCDIC tables<br />
<a href="http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm">http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm</a>
</li>

<li>The Mainframe Blog<br />
<a href="http://mainframe.typepad.com/blog/2006/11/my_personal_mai.html">http://mainframe.typepad.com/blog/2006/11/my_personal_mai.html</a>
</li>

<li>Binary-coded decimal<br />
<a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">https://en.wikipedia.org/wiki/Binary-coded_decimal</a>
</li>

<li>BCD<br />
<a href="https://cs.wikipedia.org/wiki/BCD">https://cs.wikipedia.org/wiki/BCD</a>
</li>

<li>Z80 heaven: Floating Point<br />
<a href="http://z80-heaven.wikidot.com/floating-point">http://z80-heaven.wikidot.com/floating-point</a>
</li>

<li>Z80, the 8-bit Number Cruncher<br />
<a href="http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html">http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html</a>
</li>

<li>Floating-point library for Z80<br />
<a href="https://github.com/DW0RKiN/Floating-point-Library-for-Z80">https://github.com/DW0RKiN/Floating-point-Library-for-Z80</a>
</li>

<li>z80float<br />
<a href="https://github.com/Zeda/z80float">https://github.com/Zeda/z80float</a>
</li>

<li>Fixed point arithmetic<br />
<a href="https://www.root.cz/clanky/fixed-point-arithmetic/">https://www.root.cz/clanky/fixed-point-arithmetic/</a>
</li>

<li>ZX Spectrum BASIC Programming - 2nd Edition<br />
<a href="https://archive.org/details/zx-spectrum-basic-programming/page/n167/mode/2up">https://archive.org/details/zx-spectrum-basic-programming/page/n167/mode/2up</a>
</li>

<li>ZX Spectrum BASIC Programming - 2nd Edition<br />
<a href="https://archive.org/details/zx-spectrum-basic-programming/page/n169/mode/2up">https://archive.org/details/zx-spectrum-basic-programming/page/n169/mode/2up</a>
</li>

<li>How fast is memcpy on the Z80?<br />
<a href="https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80">https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80</a>
</li>

<li>How do Z80 Block Transfer instructions work?<br />
<a href="https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work">https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work</a>
</li>

<li>Retro Programming Made Simple: Keyboard<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/keyboard">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/keyboard</a>
</li>

<li>How ZX Spectrum avoided key ghosting<br />
<a href="https://retrocomputing.stackexchange.com/questions/16235/how-zx-spectrum-avoided-key-ghosting">https://retrocomputing.stackexchange.com/questions/16235/how-zx-spectrum-avoided-key-ghosting</a>
</li>

<li>ZX Spectrum Keyboard Visualized<br />
<a href="http://www.kameli.net/marq/?p=2055">http://www.kameli.net/marq/?p=2055</a>
</li>

<li>Sinclair ZX Spectrum Joysticks Explained<br />
<a href="https://www.retroisle.com/general/spectrum_joysticks.php">https://www.retroisle.com/general/spectrum_joysticks.php</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

