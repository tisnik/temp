<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Java oslavuje 30 let od svého vzniku</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Java oslavuje 30 let od svého vzniku</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Právě dnes uběhlo třicet let od představení programovacího jazyka Java i virtuálního stroje Javy. Jak samotný jazyk, tak i její virtuální stroj prošel za tyto tři desetiletí poměrně zajímavým vývojem, přičemž se Java po celou dobu udržovala na předních místech v žebříčcích popularity.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Java oslavuje 30 let od svého vzniku</a></p>
<p><a href="#k02">2. Vznik platformy Javy</a></p>
<p><a href="#k03">3. Vstup do reálného IT světa: JIT překladač</a></p>
<p><a href="#k04">4. Jakým tempem se má programovací jazyk vyvíjet?</a></p>
<p><a href="#k05">5. Java neznamená pouze programovací jazyk, ale celý ekosystém</a></p>
<p><a href="#k06">6. Programovací jazyky pro virtuální stroj Javy aneb zdaleka nejde jen o Javu</a></p>
<p><a href="#k07">7. Stručný přehled jazyků pro JVM</a></p>
<p><a href="#k08">8. Popularita programovacího jazyka Java</a></p>
<p><a href="#k09">9. Třicet let v&nbsp;IT: uvedení do kontextu</a></p>
<p><a href="#k10">10. Nové výzvy pro Javu</a></p>
<p><a href="#k11">11. Java: jazyk pro Internet</a></p>
<p><a href="#k12">12. Java na desktopu</a></p>
<p><a href="#k13">13. Java a hry</a></p>
<p><a href="#k14">14. Závěr</a></p>
<p><a href="#k15">15. Příloha: porovnání rychlosti JVM v&nbsp;režimu interpretru a JITu</a></p>
<p><a href="#k16">16. Výsledky benchmarků</a></p>
<p><a href="#k17">17. Příloha: výsledek překladu metody <strong>calcIter</strong> C1 a C2 překladačem</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Java oslavuje 30 let od svého vzniku</h2>

<p>Na stránkách Roota jsme si připomněli (a taktéž trošku oslavili) hned
několik kulatých výročí různých programovacích jazyků. Po dvojici článků o <a
href="https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/">třicátých
narozeninách Turbo Pascalu 5.5</a> a <a
href="https://www.root.cz/clanky/the-future-s-bright-the-future-s-cobol/">šedesátém
výročí vzniku programovacího jazyka COBOL</a> jsme si připomněli i sedmdesát
let, které <a
href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">uběhly
od vzniku nástroje</a>, který dnes nazýváme <i>assembler</i> (i když se původně
tento název nepoužíval).</p>

<a href="https://www.root.cz/obrazek/368430/"><img src="https://i.iinfo.cz/images/579/tp02-3-prev.png" class="image-368430" alt="&#160;" width="370" height="231" /></a></p>
<p><i>Obrázek 1: Uživatelské rozhraní Turbo Pascalu 5.5.</i></p>

<p>Nezapomněli jsme ovšem ani na programovací jazyk <i>ALGOL</i>, jehož
nejznámější varianta, která se jmenuje <i>ALGOL-60</i>, vznikla skutečně již
v&nbsp;roce 1960 a jehož historii jsme si připomněli <a
href="https://www.root.cz/clanky/sedesatiny-prevratneho-programovaciho-jazyka-algol-60/">v&nbsp;tomto
článku</a>. Z&nbsp;dalších známých programovacích jazyků jsme oslavili <a
href="https://www.root.cz/clanky/dalsi-kulate-vyroci-v-it-dvacet-let-existence-pythonu-2/">dvacet
let Pythonu 2</a> (článek je to starší, Python 2 již dnes má 25 let a stále na
něj kupodivu čas od času narazím, i když méně často, než před pěti lety) a
naopak z&nbsp;těch méně známých a populárních jazyků jsme si připomněli <a
href="https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/">55
let od vzniku jazyka APL</a>.</p>

<img src="http://i.iinfo.cz/images/38/ibm-5-7.jpg" alt="ibm-5" height="193"
width="140" />
<p><i>Obrázek 2: Jedna z&nbsp;populárních dobových učebnic ALGOLU 68 (jeho
výročí neslavíme, jak číslovka naznačuje).</i></p>

<p>Dnes si připomeneme kulaté výročí skutečně těžké váhy v&nbsp;oblasti
programovacích jazyků. Třicet let od svého představení totiž slaví Java,
tj.&nbsp;jazyk, který byl již relativně krátce po svém vzniku nejpopulárnějším
programovacím jazykem vůbec a i dnes se stále (a to s&nbsp;velkým přehledem)
drží v&nbsp;první desítce nejpoužívanějších a nejpopulárnějších (což nemusí být
ani zdaleka totéž) programovacích jazyků. Java má za sebou poměrně zajímavou
historii. Dokázala totiž nejenom přežít jak zánik původních platforem, pro
které původně vznikla, ale přežila i svou &bdquo;rodnou&ldquo; firmu (<i>Sun
Microsystems</i>). Co je ale důležitější &ndash; Java nezůstala jazykem určeným
pro jedinou izolovanou niku, ale adaptovala se v&nbsp;nových oblastech. Tak se
stalo, že z&nbsp;programovacího jazyka, který byl původně prezentován jako
jazyk určený pro programování mikrovlnných trub a výtahů, se stal jazyk
využívaný pro vývoj rozsáhlých systémů běžících na různých platformách (od
mobilních telefonů přes desktopová PC až po servery a dokonce i mainframy).</p>

<a href="https://www.root.cz/obrazek/1195731/"><img src="https://i.iinfo.cz/images/195/java-30-01-1-prev.png" class="image-1195731" width="186" height="270" data-prev-filename="https://i.iinfo.cz/images/195/java-30-01-1-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/195/java-30-01-1-prev.webp" data-prev-width="186" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/195/java-30-01-1-large.png" data-large-filename-webp="https://i.iinfo.cz/images/195/java-30-01-1-large.webp" data-large-width="361" data-large-height="525" alt="Java 30 let" data-description="&#160;" title="Autor: tisnik + logo owners, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 3: Původní logo programovacího jazyka Java. Toto logo bylo
používáno v&nbsp;letech 1996 až 2003. Autorkou tohoto loga je Susan
Kare.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vznik platformy Javy</h2>

<p>Programovací jazyk Java byl navržen Jamesem Goslingem ze společnosti Sun
Microsystems. Mělo se jednat o jazyk umožňující (relativně) snadnou tvorbu
aplikací, navíc bez nutnosti řešení správy paměti (ta byla automatická).
Z&nbsp;pohledu syntaxe byla Java navržena takovým způsobem, aby se do značné
míry podobala jazykům C a C++, což umožnilo snadný přechod programátorů
z&nbsp;těchto mainstreamových jazyků (ostatně podobně se postupovalo i u
JavaScriptu). Ovšem z&nbsp;pohledu sémantiky jde o odlišný jazyk, který
podporuje objektově orientovaný návrh založený nikoli pouze na hierarchii tříd,
ale i na rozhraních (<i>interface</i>). Navíc je to jazyk více dynamický,
protože například podporuje reflexi apod. Některé nízkoúrovňové koncepty
zůstaly zachovány a zajímavé je, že právě tyto koncepty jsou
z&nbsp;dlouhodobého hlediska nejvíce problematické. Jedná se o odlišnou práci
s&nbsp;primitivními datovými typy a taktéž o existenci nulové reference
(<strong>null</strong>) &ndash; zopakovala se zde tedy (ne)slavná <a
href="https://hackernoon.com/null-the-billion-dollar-mistake-8t5z32d6">chyba za
miliardu dolarů</a>.</p>

<p>Jedním z&nbsp;mot nového programovacího jazyka bylo <i>write once, run
anywhere</i> neboli <i>WORA</i>. Nicméně se nejedná o přenositelnost na úrovni
zdrojových kódů, ale o přenositelnost již přeloženého kódu. Pokud by se
programy napsané v&nbsp;Javě překládaly přímo do strojového kódu dané
platformy, pochopitelně by to znamenalo, že přenositelnost nebude zaručena a
navíc by jednou přeložené programy nemohly využívat například nová rozšíření
instrukčních sad, nové registry atd. (musel by se provést nový překlad). Tento
problém byl v&nbsp;případě Javy řešen technologií, která již byla předtím
použita u jiných jazyků, například u Pascalu. Namísto překladu programů do
strojového kódu se prováděl (a stále provádí) překlad do takzvaného
<i>bajtkódu</i>, který je posléze nějakým způsobem spouštěn virtuálním strojem
Javy. Bajtkód se buď interpretuje, nebo se překládá JIT (Just in Time)
překladačem popř.&nbsp;AOT (Ahead of Time) překladačem.</p>

<a href="https://www.root.cz/obrazek/1195734/"><img src="https://i.iinfo.cz/images/195/java-30-01-2-prev.png" class="image-1195734" width="370" height="241" data-prev-filename="https://i.iinfo.cz/images/195/java-30-01-2-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/195/java-30-01-2-prev.webp" data-prev-width="370" data-prev-height="241" data-large-filename="https://i.iinfo.cz/images/195/java-30-01-2.png" data-large-filename-webp="https://i.iinfo.cz/images/195/java-30-01-2.webp" data-large-width="400" data-large-height="260" alt="Java 30 let" data-description="&#160;" title="Autor: tisnik + logo owners, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 4: Novější logo programovacího jazyka Java, které se začalo
používat po roce 2003.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vstup do reálného IT světa: JIT překladač</h2>

<p>Původní virtuální stroj Javy (JVM) byl interně relativně jednoduchý. Jednalo
se totiž o interpret bajtkódu. Zdrojové kódy napsané v&nbsp;Javě byly nejdříve
standardním překladačem Javy (<strong>javac</strong>, ostatně ten je po
úpravách používán dodnes) přeloženy do bajtkódu (soubory
<strong>.class</strong>, taktéž používané dodnes, ovšem s&nbsp;vylepšeními). A
tento bajtkód byl po spuštění aplikace interpretován, což je sice
z&nbsp;implementačního hlediska jednoduché, na druhou stranu však tímto
způsobem spouštěné aplikace v&nbsp;žádném případě neoplývaly rychlostí a
nemohly v&nbsp;tomto ohledu konkurovat aplikacím přeloženým do nativního kódu.
Velkého pokroku bylo dosaženo přidáním <i>Just In Time</i> (<i>JIT</i>)
překladače, který se stal nedílnou součástí virtuálního stroje Javy a neustále
se vyvíjí.</p>

<a href="https://www.root.cz/obrazek/1195737/"><img src="https://i.iinfo.cz/images/195/java-30-01-3-prev.jpg" class="image-1195737" width="342" height="270" data-prev-filename="https://i.iinfo.cz/images/195/java-30-01-3-prev.jpg" data-prev-filename-webp="https://i.iinfo.cz/images/195/java-30-01-3-prev.webp" data-prev-width="342" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/195/java-30-01-3.jpg" data-large-filename-webp="https://i.iinfo.cz/images/195/java-30-01-3.webp" data-large-width="400" data-large-height="316" alt="Java 30 let" data-description="&#160;" title="Autor: tisnik + logo owners, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 5: Nejnovější barvová variace loga jazyka Java.</i></p>

<p>Dnes je JIT nedílnou součástí platformy Javy. Virtuální stroj Javy se tedy
vlastně skládá ze tří hlavních subsystémů. Jedná se o zmíněný JIT překladač,
dále o správce paměti a taktéž o běhové prostředí (<i>runtime</i> &ndash;
interpret, standardní class loader, synchronizační mechanismy, správce vláken).
Na rychlost (výkon) aplikací má největší vliv právě JIT. V&nbsp;současnosti se
můžeme setkat s&nbsp;několika typy JIT překladačů. Z&nbsp;historických důvodů
se dělí na <i>client</i> a <i>server</i>, které se v&nbsp;novějších JVM
kombinují do takzvaného vícevrstvého překladače <i>tiered compiler</i>.</p>

<p>Právě existence JIT umožnila, aby se v&nbsp;Javě začaly vytvářet i rozsáhlé
a sofistikované programy, které navíc měly srovnatelný výpočetní výkon, jako
programy napsané v&nbsp;běžných překládaných programovacích jazycích (C, C++,
později například Rust). Jednalo se tedy o pomyslnou vstupenku do světa
enterprise systémů &ndash; Java se začala používat pro messaging, tvorbu
aplikačních serverů, ale dokonce i databází atd.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Jakým tempem se má programovací jazyk vyvíjet?</h2>

<p>Původní verze programovacího jazyka Java byla z&nbsp;dnešního pohledu
v&nbsp;několika ohledech omezená, protože v&nbsp;ní chyběly některé důležité
programové konstrukce, specifikátory datových typů atd. Tvůrci Javy stáli před
rozhodnutím, jakým tempem se má vlastně tento programovací jazyk vyvíjet a jak
rychle do sebe má &bdquo;absorbovat&ldquo; nové vlastnosti. V&nbsp;této oblasti
(pokud se zaměříme na populární a používané programovací jazyky) můžeme vidět
dva extrémy. Na jedné straně jazyk C, jehož vývoj je velmi pomalý a jeho nové
verze si velmi přísně hlídají zpětnou kompatibilitu a novinky jsou poměrně
malé. A na straně druhé jazyk C++, který za dobu své existence (40 let) prošel
několika vlnami velkých změn, z&nbsp;nichž některé jsou dnes považovány za
překonané, ale stále se musí z&nbsp;důvodu zpětné kompatibility udržovat.
V&nbsp;tomto případě se došlo do situace, kdy se říká, že specifikace jazyka
C++ má své vlastní gravitační pole.</p>

<p>Programovací jazyk Java je v&nbsp;tomto ohledu spíše konzervativní, ovšem
vývoj jazyka byl a je nutný, protože se vyvíjí i způsoby tvorby aplikací.
Některé změny a vylepšení Javy byly spíše kosmetické, jiné naopak jazyk
posunuty na jinou úroveň. Ostatně si to můžeme ilustrovat na dvou
příkladech.</p>

<p>První změnou v&nbsp;Javě bylo přidání klíčového slova
<strong>strictfp</strong> v&nbsp;Javě 1.2. Toto klíčové slovo se používá jako
modifikátor u deklarace proměnných, návratových typů metod, u tříd atd. a
ovlivňuje způsob výpočtů s&nbsp;hodnotami s&nbsp;plovoucí řádovou čárkou: toto
slovo vynucuje výpočty a zaokrouhlení přesně odpovídající normě IEEE 754. Jedná
se tedy o malou změnu, která ale není zpětně kompatibilní, protože zavedení
nového klíčového slova může znamenat, že některé zdrojové kódy nebudou
přeložitelné.</p>

<p>Druhým příkladem je zavedení podpory pro generické datové typy. Jedná se o
zcela novou sémantiku, která je kompatibilní &ndash; původní zdrojové kódy bude
možné stále bez problémů přeložit. Současně se jedná o posunutí možností jazyka
na novou úroveň, protože je možné pracovat s&nbsp;&bdquo;typově
bezpečnými&ldquo; kontejnery atd. Na druhou stranu se tato změna dotýká spíše
samotného programovacího jazyka a nikoli jeho bajtkódu. Generické datové typy
nejsou plnohodnotnými typy a informace o nich se (velmi zjednodušeně řečeno)
nepropisuje do bajtkódu, takže je lze obcházet.</p>

<p>Na těchto příkladech je patrné, že zavádění novinek do programovacích jazyků
je sice většinou nutné, ale obecně se nejedná o jednoduchou problematiku.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Java neznamená pouze programovací jazyk, ale celý ekosystém</h2>

<p>V&nbsp;mnoha případech se termínem &bdquo;Java&ldquo; nemyslí pouze samotný
programovací jazyk Java, ale i celý ekosystém, který byl okolo tohoto jazyka
postupně vytvořen. V&nbsp;první řadě se pochopitelně jedná o samotný virtuální
stroj Javy (<i>Java Virtual Machine</i> neboli <i>JVM</i>), ovšem taktéž
nesmíme zapomenout na celé běhové prostředí Javy (<i>Java Runtime
Environment</i> neboli <i>JRE</i>), které kromě virtuálního stroje obsahuje i
základní knihovnu Javy (a to je pěkný otesánek, resp.&nbsp;býval před podporou
modularizace) a další pomocné nástroje (práce s&nbsp;databází certifikátů
atd.). Do tohoto ekosystému patří i externí nástroje, například (dříve) Ant,
dnes Maven, Gradle apod.</p>

<a href="https://www.root.cz/obrazek/1195740/"><img src="https://i.iinfo.cz/images/195/java-30-01-4-prev.png" class="image-1195740" width="354" height="270" data-prev-filename="https://i.iinfo.cz/images/195/java-30-01-4-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/195/java-30-01-4-prev.webp" data-prev-width="354" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/195/java-30-01-4-large.png" data-large-filename-webp="https://i.iinfo.cz/images/195/java-30-01-4-large.webp" data-large-width="688" data-large-height="525" alt="Java 30 let" data-description="&#160;" title="Autor: tisnik + logo owners, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 6: Důležitou součástí ekosystému Javy jsou pochopitelně i
integrovaná vývojová prostředí. I ta se postupně vyvíjela a po dlouhou dobu se
pravděpodobně nejvíce rozšířeným vývojovým prostředím stala platforma Eclipse,
která je taktéž naprogramována v&nbsp;Javě.</i></p>

<p>Okolo JVM resp.&nbsp;JRE postupem času vznikly i mnohé další nástroje
&ndash; monitorovací aplikace, nástroje, které se k&nbsp;JVM připojují přes JVM
TI (<i>Java Virtual Machine Tools Interface</i>), JDI (<i>Java Debugger
Interface</i>) či JDWP (<i>Java Debug Wire Protocol</i>), ale i ucelená
integrovaná vývojová prostředí (IDE). Různé monitorovací nástroje využívaly
další užitečné rozhraní virtuálního stroje Javy &ndash; <i>Java Management
Extensions</i> neboli <i>JMX</i>.</p>

<a href="https://www.root.cz/obrazek/1195743/"><img src="https://i.iinfo.cz/images/195/java-30-01-5-prev.png" class="image-1195743" width="354" height="270" data-prev-filename="https://i.iinfo.cz/images/195/java-30-01-5-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/195/java-30-01-5-prev.webp" data-prev-width="354" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/195/java-30-01-5-large.png" data-large-filename-webp="https://i.iinfo.cz/images/195/java-30-01-5-large.webp" data-large-width="688" data-large-height="525" alt="Java 30 let" data-description="&#160;" title="Autor: tisnik + logo owners, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 7: Další ukázka dobového integrovaného vývojového prostředí pro
Javu založeného na platformě Eclipse.</i></p>

<a href="http://i.iinfo.cz/images/118/ibm6-7.png"><img src="http://i.iinfo.cz/images/118/ibm6-7-prev.png" alt="ibm6" height="270"       width="359" /></a>
<p><i>Obrázek 8: Eclipse je skutečně platformou, nad níž lze vytvářet další
více či méně sofistikované nástroje. Příkladem je integrované vývojové
prostředí pro jazyk COBOL. Tak trochu se zde připomíná tvrzení &bdquo;Java je
COBOLem 21.století&ldquo;.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Programovací jazyky pro virtuální stroj Javy aneb zdaleka nejde jen o Javu</h2>

<p>Virtuální stroj Javy (<i>JVM</i>), specifikace JVM a dokonce ani jeho
instrukční soubor vlastně nikde striktně nepředpokládají, že JVM bude spouštět
pouze bajtkód získaný překladem zdrojových kódů naprogramovaných přímo
v&nbsp;Javě. Ve specifikaci JVM je dokonce na několika místech explicitně
zmíněn předpoklad, že nad virtuálním strojem Javy budou provozovány i další
programovací jazyky umožňující přímý či nepřímý překlad do bajtkódu. Kromě toho
je samozřejmě možné přímo v&nbsp;Javě vytvořit interpret prakticky libovolného
(interpretovaného) programovacího jazyka, takže vlastně nebude velkým
překvapením, když zjistíme, že dnes těchto &bdquo;JVM jazyků&ldquo; již
existuje relativně velké množství (minimálně několik desítek) a některé
z&nbsp;nich jsou dosti populární. V&nbsp;následující tabulce jsou vypsány ty
nejznámější a pravděpodobně nejpoužívanější jazyky pro JVM, a to pro úplnost
včetně samotné Javy:</p>

<table>
<tr><th>#</th><th>Jazyk pro JVM</th><th>Stručný popis</th><th>Odkaz</th></tr>
<tr><td> 1</td><td>Java</td><td>primární jazyk pro JVM, bajtkód do značné míry odpovídá právě Javě</td><td><a href="https://www.oracle.com/java/index.html">https://www.oracle.com/java/index.html</a></td></tr>
<tr><td> 2</td><td>Clojure</td><td>moderní dialekt programovacího jazyka Lisp s&nbsp;přidanými funkcionálními prvky</td><td><a href="https://clojure.org/">https://clojure.org/</a></td></tr>
<tr><td> 3</td><td>Groovy</td><td>dynamicky typovaný jazyk pro JVM</td><td><a href="http://groovy-lang.org/">http://groovy-lang.org/</a></td></tr>
<tr><td> 4</td><td>Rhino</td><td>jedna z&nbsp;implementací JavaScriptu (dnes již pravděpodobně mrtvý projekt)</td><td><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino">https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino</a></td></tr>
<tr><td> 5</td><td>Nashorn</td><td>alternativní implementace JavaScriptu (tento projekt je stále živý)</td><td><a href="https://github.com/openjdk/nashorn">https://github.com/openjdk/nashorn</a></td></tr>
<tr><td> 6</td><td>JRuby</td><td>portace jazyka Ruby na JVM</td><td><a href="http://jruby.org/">http://jruby.org/</a></td></tr>
<tr><td> 7</td><td>Jython</td><td>portace jazyka Python na JVM</td><td><a href="http://www.jython.org/">http://www.jython.org/</a></td></tr>
<tr><td> 8</td><td>Kotlin</td><td>moderní staticky typovaný jazyk</td><td><a href="http://kotlinlang.org/">http://kotlinlang.org/</a></td></tr>
<tr><td> 9</td><td>Scala</td><td>další moderní jazyk pro JVM</td><td><a href="https://www.scala-lang.org/">https://www.scala-lang.org/</a></td></tr>
<tr><td>10</td><td>Kawa</td><td>implementace jazyka Scheme s&nbsp;mnoha rozšířeními</td><a href="https://www.gnu.org/software/kawa/">https://www.gnu.org/software/kawa/</a></tr>
</table>

<img src="https://i.iinfo.cz/images/214/kawa1-1.png" class="image-366707" alt="&#160;" width="399" height="257" />
<p><i>Obrázek 9: Logo programovacího jazyka Jython.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Stručný přehled jazyků pro JVM</h2>

<p>Pro úplnost se ve stručnosti zmiňme o nejznámějších jazycích určených pro
běh ve virtuálním stroji Javy.</p>



<h3>Kotlin</h3>

<p>Prvním programovacím jazykem určeným pro běh nad virtuálním strojem Javy, o
němž se dnes alespoň ve stručnosti zmíníme, je jazyk pojmenovaný <i>Kotlin</i>.
Jedná se o moderní <a href="https://kotlinlang.org/">staticky typovaný
programovací jazyk</a> vyvinutý ve společnosti JetBrains a jeho cíl je vlastně
velmi podobný cíli, který si dal dále zmíněný a poněkud starší jazyk Scala
&ndash; efektivní a rychlá tvorba typově bezpečných aplikací určených pro běh
nad JVM. Typovost jde ještě o krok dále, než je tomu v&nbsp;Javě, protože
například rozlišuje mezi nulovatelnými a nenulovatelnými datovými typy. Na
rozdíl od Scaly je však rychlost překladu zdrojových kódů naprogramovaných
v&nbsp;Kotlinu rychlejší a blíží se rychlosti překladu kódů napsaných
v&nbsp;samotné Javě. Kotlin podporuje různá paradigmata: objektově orientované,
procedurální i funkcionální.</p>

<img src="https://i.iinfo.cz/images/214/kawa1-6.png" class="image-366712" alt="&#160;" width="152" height="151" />
<p><i>Obrázek 10: Logo programovacího jazyka Kotlin.</i></p>



<h3>Scala</h3>

<p>Pravděpodobně druhým nejznámějším příkladem programovacího jazyka
provozovaného nad JVM je <i>Scala</i>, která nabízí prakticky bezproblémovou
spolupráci mezi částmi kódu psanými ve Scale a zbytkem aplikace psaným
v&nbsp;Javě (popř.&nbsp;jsou některé projekty psané pouze ve Scale, ovšem
provozovány jsou například na ryze javovských serverech &ndash; Tomcat, Jetty
atd.). Díky tomu, že zdrojové kódy psané ve Scale jsou přímo překládány do
bajtkódu, získali tvůrci tohoto programovacího jazyka prakticky zadarmo veškeré
vymoženosti, které virtuální stroj Javy (či přesněji řečeno celé JRE) poskytuje
&ndash; od poměrně pečlivé kontroly bajtkódu při jeho načítání do virtuálního
stroje přes použití správců paměti a JIT překladačů (<i>Just in Time
Compiler</i>) až po možnost využití rozsáhlých standardních knihoven J2SE a
samozřejmě taktéž mnoha dalších knihoven a frameworků, které jsou pro JVM
dostupné. Ovšem Scala samozřejmě není jediným programovacím jazykem, který díky
překladu do bajtkódu umožňuje využít prakticky veškerého potenciálu
JVM/JRE.</p>

<img src="https://i.iinfo.cz/images/214/kawa1-2.png" class="image-366708" alt="&#160;" width="192" height="72" />
<p><i>Obrázek 11: Logo programovacího jazyka Scala.</i></p>

<p><div class="rs-tip-major">Poznámka: ve Scale je částečně naprogramována
například Apache Kafka.</div></p>



<h3>Clojure</h3>

<p>Z&nbsp;dalších překladačů programovacích jazyků, které pro virtuální stroj
Javy vznikly, je podle mého názoru nejzajímavějším jazykem a současně i jazykem
s&nbsp;poměrně velkým potenciálem pro budoucnost programovací jazyk
s&nbsp;názvem <i>Clojure</i>, jehož autorem a dodnes nejaktivnějším vývojářem a
propagátorem je Rich Hickey. Samotný název tohoto jazyka vznikl vložením
písmene &bdquo;j&ldquo; (<i>Java/JVM</i>) do slova <i>closure</i> (toto slovo
se používá ve smyslu &bdquo;lexikální uzávěr&ldquo; &ndash; důležitá abstrakce
používaná nejenom ve funkcionálních programovacích jazycích). Velká část
předností a pro mnohé vývojáře taktéž záporů programovacího jazyka Clojure
vychází z&nbsp;toho, že se jedná o programovací jazyk, jehož syntaxe a
sémantika do značné míry vychází z&nbsp;LISPu a Scheme, tedy jazyků známých
především tím, že se v&nbsp;programech v&nbsp;nich psaných používá nadměrné
množství kulatých závorek. Podrobnější informace o Clojure byly uvedeny <a
href="https://www.root.cz/vyhledavani/?qs=Clojure">v&nbsp;samostatném
seriálu</a>, který již vyšel na serveru <a
href="http://www.root.cz">www.root.cz</a>.</p>

<img src="https://i.iinfo.cz/images/214/kawa1-3.png" class="image-366709" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 12: Logo programovacího jazyka Clojure.</i></p>



<h3>Groovy</h3>

<p>Dalším programovacím jazykem, a nutno říci že jazykem poměrně populárním, je
Groovy. Jedná se o jazyk inspirovaný některými dalšími (většinou dynamicky
typovanými) programovacími jazyky, jako je Python, Ruby, ale například i Perl.
Groovy podporuje objektově orientované programování a oproti Javě umožňuje psát
kratší kód, z&nbsp;něhož jsou odstraněny méně podstatné části, které Java
jakožto silně staticky typovaný jazyk vyžaduje. Z&nbsp;tohoto důvodu se Groovy
velmi často používá všude tam, kde je vyžadovaný skriptovací jazyk běžící nad
JVM. Dobrým příkladem je například konzole Jenkinsu, která <a
href="https://wiki.jenkins.io/display/JENKINS/Jenkins+Script+Console">ve
výchozím nastavení používá právě Groovy</a>. Podpora pro tento jazyk <a
href="http://groovy-lang.org/ides.html">je součástí mnoha populárních
integrovaných vývojových prostředí</a>, a to včetně IntelliJ IDEA, Netbeans i
Eclipse (přes pluginy &ndash; doplňkové moduly).</p>

<a href="https://www.root.cz/obrazek/366710/"><img src="https://i.iinfo.cz/images/214/kawa1-4-prev.png" class="image-366710" alt="&#160;" width="370" height="183" /></a>
<p><i>Obrázek 13: Logo programovacího jazyka Groovy.</i></p>



<h3>JRuby, Jython, Rhino a Nashhorn</h3>

<p>Zatímco <i>Scala</i>, <i>Clojure</i> i <i>Groovy</i> jsou novými jazyky,
které původně vznikly přímo a pouze pro potřeby programátorů používajících
virtuální stroj Javy (JVM), zmíníme se v&nbsp;této podkapitole alespoň ve
stručnosti o jazycích &bdquo;klasických&ldquo;, které byly na JVM pouze
naportovány. V&nbsp;první řadě se jedná o projekty pojmenované <a
href="http://jruby.org/">JRuby</a> a <a
href="http://www.jython.org/">Jython</a>, což jsou varianty jazyků Ruby a
Python. Původní interpretry Ruby a Pythonu jsou naprogramovány v&nbsp;jazyku C
(proto se ostatně tato varianta Pythonu nazývá CPython), JRuby a Jython jsou
reimplementace pro JVM (navíc byl Python portován i na platformu .NET ve formě
projektu IronPython a existuje i varianta Pythonu nazvaná PyPy naprogramovaná
v&nbsp;samotném Pythonu, resp.&nbsp;přesněji řečeno v&nbsp;jeho zjednodušené
variantě <a
href="https://www.root.cz/clanky/rpython-prekvapive-vykonny-dialekt-pythonu-na-nemz-je-zalozen-pypy/">RPython</a>).
Na platformu JVM byl portován i programovací jazyk JavaScript, a to dokonce
několikrát. Implementaci JavaScriptu zajišťují projekty <a
href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino">Rhino</a>
a Nashhorn.</p>

<a href="https://www.root.cz/obrazek/366711/"><img src="https://i.iinfo.cz/images/214/kawa1-5-prev.png" class="image-366711" alt="&#160;" width="370" height="110" /></a>
<p><i>Obrázek 14: Logo programovacího jazyka JRuby.</i></p>



<h3>Kawa</h3>

<p>V&nbsp;případě projektu <i>Kawa</i> se jedná o implementaci jazyka Scheme
naprogramovanou v&nbsp;Javě a běžící nad virtuálním strojem Javy (JVM). Ovšem
současně se v&nbsp;žádném případě nejedná o pouhý primitivní interpret, ale o
plnohodnotný překladač jazyka Scheme do bajtkódu JVM. <a
href="http://per.bothner.com/blog/2010/Kawa-in-shootout/">Z&nbsp;benchmarků</a>
je patrné, že výsledný kód vůbec není pomalý ale naopak dokáže více než zdárně
konkurovat dalším programovacím jazykům, které v&nbsp;současnosti nad JVM
existují. Jenže to není vše, protože <i>Kawa</i> dokáže velmi dobře kooperovat
i se samotným ekosystémem Javy &ndash; lze v&nbsp;ní vytvářet instance
Javovských tříd, volat jejich metody, přistupovat k&nbsp;atributům atd. atd.
Díky tomu může být <i>Kawa</i> použitelná i v&nbsp;rozsáhlých systémech
naprogramovaných v&nbsp;Javě (ostatně LISPovské jazyky již dlouho slouží i ve
funkci &bdquo;lepidel&ldquo; mezi jednotlivými částmi aplikace).</p>

<a href="https://www.root.cz/obrazek/1195746/"><img src="https://i.iinfo.cz/images/523/kawa.png" class="image-1195746" width="121" height="121" data-prev-filename="https://i.iinfo.cz/images/523/kawa.png" data-prev-filename-webp="https://i.iinfo.cz/images/523/kawa.webp" data-prev-width="121" data-prev-height="121" data-large-filename="https://i.iinfo.cz/images/523/kawa.png" data-large-filename-webp="https://i.iinfo.cz/images/523/kawa.webp" data-large-width="121" data-large-height="121" alt="Kawa" data-description="&#160;" title="Autor: Kawa authors, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 15: Logo programovacího jazyka Kawa.</i></p>



<h3>Další programovací jazyky portované na JVM</h3>

<p>Na virtuální stroj Javy bylo portováno i mnoho dalších programovacích
jazyků, ať již se jednalo o překladače či o interpretry. V&nbsp;následující
tabulce jsou některé z&nbsp;těchto jazyků vypsány. V&nbsp;prvním sloupci je
zobrazen název původního jazyka popř.&nbsp;rodiny jazyků, ve sloupci druhém pak
jméno jeho konkrétní implementace pro JVM. Povšimněte si, že některé jazyky
byly portovány několikrát (to se ostatně týkalo již výše zmíněného
JavaScriptu):</p>

<table>
<tr><th>Jazyk</th><th>Implementace pro JVM</th></tr>
<tr><td>Ada</td><td>JGNAT</td></tr>
<tr><td>Arden Syntax</td><td>Arden2ByteCode</td></tr>
<tr><td>COBOL</td><td>Micro Focus Visual COBOL</td></tr>
<tr><td>ColdFusion Markup Language (CFML)</td><td>Adobe ColdFusion</td></tr>
<tr><td>ColdFusion Markup Language (CFML)</td><td>Railo</td></tr>
<tr><td>ColdFusion Markup Language (CFML)</td><td>Lucee</td></tr>
<tr><td>ColdFusion Markup Language (CFML)</td><td>Open BlueDragon</td></tr>
<tr><td>Common Lisp</td><td>Armed Bear Common Lisp</td></tr>
<tr><td>Cypher</td><td>Neo4j</td></tr>
<tr><td>Mercury</td><td>Mercury (Java grade)</td></tr>
<tr><td>Pascal</td><td>MIDletPascal</td></tr>
<tr><td>Pascal</td><td>Oxygene</td></tr>
<tr><td>Perl 6</td><td>Rakudo Perl 6</td></tr>
<tr><td>PHP</td><td>Quercus</td></tr>
<tr><td>Prolog</td><td>JIProlog</td></tr>
<tr><td>Prolog</td><td>TuProlog</td></tr>
<tr><td>R</td><td>Renjin</td></tr>
<tr><td>Rexx</td><td>NetRexx</td></tr>
<tr><td>Ruby</td><td>JRuby</td></tr>
<tr><td>Ruby</td><td>Mirah</td></tr>
<tr><td>Scheme</td><td>Bigloo</td></tr>
<tr><td>Scheme</td><td>Kawa</td></tr>
<tr><td>Scheme</td><td>SISC</td></tr>
<tr><td>Scheme</td><td>JScheme</td></tr>
<tr><td>Tcl</td><td>Jacl</td></tr>
<tr><td>Visual Basic</td><td>Jabaco</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Popularita programovacího jazyka Java</h2>

<p>Programovací jazyk Java se přibližně po dvě desetiletí (a to je v&nbsp;oboru
informatiky velmi dlouhá doba) pohyboval na samotné špičce popularity
programovacích jazyků. Netýkalo se to &bdquo;pouze&ldquo; IT profesionálů,
protože se Java na některých univerzitách stala primárním programovacím
jazykem, který se používal pro jak v&nbsp;kurzech pro výuku programování, tak i
například návrhu architektury distribuovaných systémů (messaging) atd.
V&nbsp;současnosti sice popularita Javy <i>relativně</i> klesá v&nbsp;porovnání
s&nbsp;přímou i nepřímou konkurencí, nicméně se stále jedná o jeden
z&nbsp;nejpopulárnějších jazyků současnosti. Z&nbsp;relativně velkého množství
různých statistik se podívejme na známý <a
href="https://www.tiobe.com/tiobe-index/">Tiobe index</a>, v&nbsp;němž se Java
tento měsíc umístila na velmi dobré čtvrté příčce (dokonce před svým nejbližším
konkurentem &ndash; jazykem C#):</p>

<table>
<tr><th> #</th><th></th></tr>
<tr><td> 1</td><td>Python</td></tr>
<tr><td> 2</td><td>C++</td></tr>
<tr><td> 3</td><td>C</td></tr>
<tr><td> 4</td><td>Java</td></tr>
<tr><td> 5</td><td>C#</td></tr>
<tr><td> 6</td><td>JavaScript</td></tr>
<tr><td> 7</td><td>Go</td></tr>
<tr><td> 8</td><td>Visual Basic</td></tr>
<tr><td> 9</td><td>Delphi</td></tr>
<tr><td>11</td><td>Fortran</td></tr>
</table>

<p>Dlouhodobější trend vývoje popularity Java je zobrazen na <a
href="https://www.tiobe.com/tiobe-index/java/">tomto grafu</a>.</p>

<p>Ovšem nemůžeme věřit pouze jedné statistice, u které navíc nejsou zcela
zřejmé použité metriky. Podívejme se na známý žebříček <a
href="https://pypl.github.io/PYPL.html">PYPL PopularitY of Programming
Language</a>, ve kterém se Java dokonce umístila na druhém místě, ihned za
Python:</p>

<table>
<tr><th></th><th></th><th></th><th></th></tr>
<tr><td> 1</td><td>Python     </td><td>30.41 %</td><td>+1.3 %</td></tr>
<tr><td> 2</td><td>Java       </td><td>15.12 %</td><td>-0.5 %</td></tr>
<tr><td> 3</td><td>JavaScript </td><td> 7.93 %</td><td>-0.6 %</td></tr>
<tr><td> 4</td><td>C/C++      </td><td> 6.98 %</td><td>+0.6 %</td></tr>
<tr><td> 5</td><td>C#         </td><td> 6.09 %</td><td>-0.7 %</td></tr>
<tr><td> 6</td><td>R          </td><td> 4.59 %</td><td>-0.1 %</td></tr>
<tr><td> 7</td><td>PHP        </td><td> 3.71 %</td><td>-0.8 %</td></tr>
<tr><td> 8</td><td>Rust       </td><td> 3.09 %</td><td>+0.5 %</td></tr>
<tr><td> 9</td><td>TypeScript </td><td> 2.80 %</td><td>-0.1 %</td></tr>
<tr><td>10</td><td>Objective-C</td><td> 2.76 %</td><td>+0.3 %</td></tr>
</table>

<p>Na grafu získaném z&nbsp;této stránky je opět patrný <i>relativní</i> pokles
popularity Javy, i když pouze pozvolný:</p>

<a href="https://www.root.cz/obrazek/1195779/"><img src="https://i.iinfo.cz/images/193/pypl-java-prev.png" class="image-1195779" width="370" height="150" data-prev-filename="https://i.iinfo.cz/images/193/pypl-java-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/193/pypl-java-prev.webp" data-prev-width="370" data-prev-height="150" data-large-filename="https://i.iinfo.cz/images/193/pypl-java-large.png" data-large-filename-webp="https://i.iinfo.cz/images/193/pypl-java-large.webp" data-large-width="720" data-large-height="291" alt="PYPL Java" data-description="&#160;" title="Autor: PYPL, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 16: Popularita Javy měřená podle PYPL.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Třicet let v&nbsp;IT: uvedení do kontextu</h2>

<p>Připomínáme si třicet let existence programovacího jazyka Java, takže je
dobré uvést tento věk do kontextu. V&nbsp;další tabulce je vypsáno deset
nejpopulárnějších programovacích jazyků podle Tiobe (vyměnil jsem jen SQL za
Fortran z&nbsp;jedenácté pozice). Nyní nás však bude zajímat doba existence
těchto jazyků. Jejich věk je uveden v&nbsp;posledním sloupci:</p>

<table>
<tr><th> #</th><th>Jazyk</th><th>Vznik</th><th>Věk</th></tr>
<tr><td> 1</td><td>Python</td><td>1991</td><td>34</td></tr>
<tr><td> 2</td><td>C++</td><td>1985</td><td>40</td></tr>
<tr><td> 3</td><td>C</td><td>1972</td><td>53</td></tr>
<tr><td> 4</td><td>Java</td><td>1995</td><td>30</td></tr>
<tr><td> 5</td><td>C#</td><td>2000</td><td>25</td></tr>
<tr><td> 6</td><td>JavaScript</td><td>1995</td><td>30</td></tr>
<tr><td> 7</td><td>Go</td><td>2009</td><td>16</td></tr>
<tr><td> 8</td><td>Visual Basic</td><td>2001</td><td>24</td></tr>
<tr><td> 9</td><td>Delphi</td><td>1995</td><td>30</td></tr>
<tr><td>11</td><td>Fortran</td><td>1957</td><td>68</td></tr>
</table>

<p>Povšimněte si, že většina nejpopulárnějších jazyků je starších než 20 let.
Jedinou výjimkou je Go, což ovšem na druhé straně vyvažuje Fortran
(resp.&nbsp;původně FORTRAN). Tento údaj je zajímavý při porovnání
s&nbsp;dalším statistikou, a to konkrétně věkem profesionálních vývojářů:</p>

<table>
<tr><th>Věková skupina</th><th>Zastoupení</th></tr>
<tr><td>18-24</td><td>5%</td></tr>
<tr><td>25-34</td><td>20%</td></tr>
<tr><td>25-34</td><td>37%</td></tr>
<tr><td>35-44</td><td>23%</td></tr>
<tr><td>45-54</td><td>9%</td></tr>
<tr><td>55-64</td><td>4%</td></tr>
<tr><td>65-..</td><td>1%</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: součet není roven 100% kvůli
zaokrouhlení na celá procenta.</div></p>

<p>Co to znamená? 85% profesionálních vývojářů je mladších než 45 let a pokud
začali svoji kariéru řekněme ve věku dvaceti let, znamená to, ze s&nbsp;velmi
vysokou pravděpodobností pracují s&nbsp;programovacími jazyky, které byly
používány ještě před jejich příchodem do praxe. Oblast programovacích jazyků je
tedy v&nbsp;oblasti IT kupodivu velmi stabilní, i když to tak nemusí na první
pohled vypadat díky velkému množství článků a zmínek o nových a stále
rostoucích jazycích (typu Rust, Zig, před několika lety Clojure atd.).</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nové výzvy pro Javu</h2>

<p>Jak jsme si již řekli v&nbsp;úvodní části dnešního článku, byla Java původně
určena pro programování mikrovlnných trub a výtahů (alespoň tak vypadaly první
prezentace). Nutno říci, že v&nbsp;této oblasti (mikrořadiče) se vlastně nikdy
neujala, mj.&nbsp;i kvůli velkým paměťovým požadavkům virtuálního stroje
(naopak se zde drží C popř.&nbsp;typicky &bdquo;C s&nbsp;třídami&ldquo;,
tj.&nbsp;očesané C++). Ovšem právě v&nbsp;době vydání Javy došlo k&nbsp;velkému
rozmachu Internetu, což již byla oblast, ve které se mohly projevit dobré
vlastnosti tohoto jazyka i celé platformy &ndash; bezpečnější a přenositelnější
aplikace, později relativně dobrá podpora pro paralelní běh či alespoň souběh
většího množství vláken, automatický správce paměti atd.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Java: jazyk pro Internet</h2>

<p>Java se začala používat pro tzv.&nbsp;<i>middleware</i> (aplikační servery a
aplikace pro ně určené), vzniklo několik technologií pro dynamické generování
HTML stránek (JSP, RichFaces apod.), v&nbsp;Javě byly vytvořeny message brokery
a streaming platformy (ActiveMQ resp.&nbsp;Artemis a vlastně částečně i Apache
Kafka) apod. Jedná se o technologie určené pro <i>back end</i>, nikoli pro
<i>front end</i>.</p>

<p>Zapomenout nesmíme ani na <i>Java applety</i>, které umožňovaly běh i
relativně složitých aplikací v&nbsp;rámci okna (plochy) webového prohlížeče.
Názory na vhodnost či nevhodnost appletů se liší, ovšem díky sandboxingu
(izolaci appletů) od celého desktopu se nejednalo o špatnou technologii &ndash;
její plnohodnotná náhrada vlastně dodnes neexistuje, protože WebAssembly se
stále vyvíjí a postrádá vlastnosti JVM (JIT a správce paměti).</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Java na desktopu</h2>

<p>Naproti tomu, i přes snahu některých společností, se Java příliš neprosadila
na desktopu (a to existovaly snahy o vytvoření operačního systému založeného
přímo na JVM). Do určité míry za to mohla problematická instalace takových
aplikací (i když existovala technologie Java Web Start, dnes již
nepodporovaná), ale i odlišný vzhled a chování Javovských aplikací a
v&nbsp;neposlední řadě taktéž relativně pomalé reakce grafického uživatelského
rozhraní. Systém událostí a handlerů pro každou akci generoval nové a nové
objekty, o které se musel starat správce paměti.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Java a hry</h2>

<p>Tradovalo se, že se programovací jazyk s&nbsp;automatickou správou paměti
příliš nehodí pro tvorbu her; ostatně v&nbsp;této oblasti se stále na prvním
místě používá jazyk C++. Java sice do určité míry podporovala tvorbu her,
například bylo možné využít třídu <strong>VolatileImage</strong> pro kreslení
v&nbsp;režimu celé obrazovky popř.&nbsp;použít <strong>BufferedImage</strong>
s&nbsp;podporou operací typu BLT (<i>bit block transfer</i>). Existovaly i
rozhraní pro OpenGL a Direct3D, ovšem Java se stále považovala v&nbsp;této
oblasti za spíše druhořadý jazyk. Jenže pak přišel <i>Minecraft</i>, který byl
(podle různých statistik) druhou nejhranější hrou roku 2024 (140 milionů hráčů,
první je Roblox s&nbsp;380 miliony). Minecraft ukázal, že optimalizovaný kód
psaný v&nbsp;Javě a vhodná GUI knihovna mohou být využity pro tvorbu velmi
úspěšné a graficky náročné hry.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Závěr</h2>

<p>S&nbsp;trochou nadsázky se tvrdí, že Java je COBOLem 21.století.
V&nbsp;oblasti enterprise systémů a middleware není toto tvrzení daleko od
pravdy &ndash; a to v&nbsp;dobrém smyslu. Java je totiž velmi stabilní
platformou, která však neustrnula ve vývoji a neustále se vylepšuje
(modularita, streaming, vylepšené režimy JIT a AOT překladu atd.), takže se
stále používá a pravděpodobně i bude používat. Pokud nedojde v&nbsp;oblasti IT
k&nbsp;zásadní revoluci, lze předpokládat, že i za dalších třicet let se ještě
s&nbsp;aplikacemi vytvořenými v&nbsp;Javě setkáme, i když nelze odhadnout, do
jaké míry bude Java populární mezi mainstreamovými programátory.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Příloha: porovnání rychlosti JVM v&nbsp;režimu interpretru a JITu</h2>

<p><a href="#k03">Ve třetí kapitole</a> jsme se zmínili o Just in Time
překladači Javy (<i>JIT</i>) i o rozdílech oproti pouhé interpretaci Javovského
bajtkódu. Rozdíl mezi interpretrem a JIT překladačem si ukážeme na výpočtu,
který na stránkách Roota používám poměrně často (a to v&nbsp;různých
programovacích jazycích). Jedná se o výpočet a vykreslení (<i>rendering</i>)
Mandelbrotovy množiny s&nbsp;uložením výsledku do rastrového obrázku:</p>

<a href="https://www.root.cz/obrazek/1196139/"><img src="https://i.iinfo.cz/images/637/benchmark-prev.png" class="image-1196139" width="270" height="270" data-prev-filename="https://i.iinfo.cz/images/637/benchmark-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/637/benchmark-prev.webp" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/637/benchmark-large.png" data-large-filename-webp="https://i.iinfo.cz/images/637/benchmark-large.webp" data-large-width="525" data-large-height="525" alt="benchmark" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 17: Výsledek běhu benchmarku by měl vypadat takto.</i></p>

<p>Úplný zdrojový kód jednoduchého benchmarku, který vykreslí Mandelbrotovu
množinu, vypadá následovně:</p>

<pre>
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
&nbsp;
import javax.imageio.ImageIO;
&nbsp;
public class <strong>DrawMandelbrot</strong>
{
    private static final int MAXITER = 1200;
    private static final int WIDTH = 1024;
    private static final int HEIGHT = 1024;
&nbsp;
    public void <strong>drawMandelbrot</strong>()
    {
        BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
        calcMandelbrot(image);
        writeImage(image);
    }
&nbsp;
    private void <strong>writeImage</strong>(BufferedImage image)
    {
        try
        {
            ImageIO.write(image, "png", new File("mandel.png"));
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }
&nbsp;
    private void <strong>calcMandelbrot</strong>(BufferedImage image)
    {
        double cy = -1.5;
        for (int y = 0; y &lt; HEIGHT; y++)
        {
            double cx = -2.0;
            for (int x = 0; x &lt; WIDTH; x++)
            {
                double zx = 0.0, zy = 0.0;
                int iter = calcIter(cy, cx, zx, zy);
                int rgb = calcRGBColor(iter);
                image.setRGB(x, y, rgb);
                cx += 3.0/WIDTH;
            }
            cy += 3.0/HEIGHT;
        }
    }
&nbsp;
    private int <strong>calcRGBColor</strong>(int iter)
    {
        Color color = Color.BLACK;
        if (iter &lt; MAXITER) {
            color = new Color(iter&amp;0xff, (iter*256/16)&amp;0xff, (iter*256/32)&amp;0xff);
        }
        int rgb = color.getRGB();
        return rgb;
    }
&nbsp;
    private int <strong>calcIter</strong>(double cy, double cx, double zx, double zy)
    {
        double zzx = zx;
        double zzy = zy;
        int iter = 0;
        while (iter &lt; MAXITER)
        {
            double zx2 = zzx * zzx;
            double zy2 = zzy * zzy;
            if (zx2 + zy2 &gt; 4.0)
            {
                break;
            }
            zzy = 2.0 * zzx * zzy + cy;
            zzx = zx2 - zy2 + cx;
            iter ++;
        }
        return iter;
    }
&nbsp;
    public static void <strong>main</strong>(String[] args)
    {
        new DrawMandelbrot().drawMandelbrot();
    }
&nbsp;
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Výsledky benchmarků</h2>

<p>Rozdíl mezi rychlostí (resp.&nbsp;pomalostí) interpretru oproti JIT
překladačům můžeme zjišťovat jak různými sofistikovanými metodami, tak i
triviálním porovnáním celkové doby běhu výše ukázaného benchmarku pro výpočet
Mandelbrotovy množiny. Nejdříve je vypsán čas při použití C2 a C1 překladače a
posléze i čas při přepnutí do režimu interpretace. Z&nbsp;výsledků je patrné,
že interpretace je přibližně třikrát pomalejší (mnohdy ale bývá rozdíl i větší,
například při manipulacích s&nbsp;poli atd.):</p>

<pre>
$ <strong>time java -server -XX:CompileThreshold=1000 DrawMandelbrot.java</strong>
&nbsp;
real    0m1.973s
user    0m4.074s
sys     0m0.225s
&nbsp;
$ <strong>time java -client -XX:CompileThreshold=1000 DrawMandelbrot.java</strong>
&nbsp;
real    0m1.988s
user    0m3.968s
sys     0m0.237s
&nbsp;
$ <strong>time java -Xint DrawMandelbrot.java</strong>
real    0m13.920s
user    0m13.849s
sys     0m0.065s
</pre>

<p><div class="rs-tip-major">Poznámka: na některých platformách je volba
<strong>--client</strong> ignorována a vždy se použije kombinace C1+C2
překladače.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Příloha: výsledek překladu metody <strong>calcIter</strong> C1 a C2 překladačem</h2>

<p>Pro zajímavost se podívejme, jak vypadá výsledek just in time překladu
metody <strong>calcIter</strong> použité v&nbsp;benchmarku. První varianta byla
přeložena C1 překladačem (ten je rychlejší, ale neprovádí všechny
optimalizace). Povšimněte si, že se jedná o 64bitový kód využívající i moderní
rozšíření instrukční sady (vektorové instrukce). Navíc se parametry předávají
přes registry a nikoli přes zásobník &ndash; Java zde nemusí dodržovat
standardní ABI:</p>

<pre>
[Entry Point]
  # {method} {0x00007f93cfa888d8} 'calcIter' '(DDDD)I' in 'DrawMandelbrot'
  # this:     rsi:rsi   = 'DrawMandelbrot'
  # parm0:    xmm0:xmm0   = double
  # parm1:    xmm1:xmm1   = double
  # parm2:    xmm2:xmm2   = double
  # parm3:    xmm3:xmm3   = double
  #           [sp+0x40]  (sp of caller)
  0x00007f943b9716e0:   mov    0x8(%rsi),%r10d              <i>;   {no_reloc}</i>
  0x00007f943b9716e4:   movabs $0x7f93d3000000,%r11
  0x00007f943b9716ee:   add    %r11,%r10
  0x00007f943b9716f1:   cmp    %rax,%r10
  0x00007f943b9716f4:   jne    0x00007f9442cad080           <i>;   {runtime_call ic_miss_stub}</i>
  0x00007f943b9716fa:   nopw   0x0(%rax,%rax,1)
[Verified Entry Point]
  0x00007f943b971700:   mov    %eax,-0x14000(%rsp)
  0x00007f943b971707:   push   %rbp
  0x00007f943b971708:   sub    $0x30,%rsp
  0x00007f943b97170c:   cmpl   $0x1,0x20(%r15)
  0x00007f943b971714:   je     0x00007f943b97171b
  0x00007f943b971716:   call   Stub::nmethod_entry_barrier  <i>;   {runtime_call StubRoutines (final stubs)}</i>
  0x00007f943b97171b:   movabs $0x7f93cfa88d00,%rax
  0x00007f943b971725:   mov    0x8(%rax),%edi
  0x00007f943b971728:   add    $0x2,%edi
  0x00007f943b97172b:   mov    %edi,0x8(%rax)
  0x00007f943b97172e:   and    $0xffe,%edi
  0x00007f943b971734:   test   %edi,%edi
  0x00007f943b971736:   je     0x00007f943b9717fe           <i>;*dload {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@0 (line 63)</i>
  0x00007f943b97173c:   mov    $0x0,%eax
  0x00007f943b971741:   jmp    0x00007f943b9717e0           <i>;*iload {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@11 (line 66)</i>
  0x00007f943b971746:   xchg   %ax,%ax
  0x00007f943b971748:   vmovapd %xmm2,%xmm4
  0x00007f943b97174c:   vmulsd %xmm2,%xmm4,%xmm4
  0x00007f943b971750:   vmovapd %xmm3,%xmm5
  0x00007f943b971754:   vmulsd %xmm3,%xmm5,%xmm5
  0x00007f943b971758:   vmovapd %xmm4,%xmm6
  0x00007f943b97175c:   vaddsd %xmm5,%xmm6,%xmm6
  0x00007f943b971760:   vmovsd -0xa8(%rip),%xmm7        # 0x00007f943b9716c0
                                                            <i>;   {section_word}</i>
  0x00007f943b971768:   vucomisd %xmm7,%xmm6
  0x00007f943b97176c:   mov    $0xffffffff,%esi
  0x00007f943b971771:   jp     0x00007f943b97178b
  0x00007f943b971777:   jb     0x00007f943b97178b
  0x00007f943b97177d:   mov    $0x0,%esi
  0x00007f943b971782:   je     0x00007f943b97178b
  0x00007f943b971788:   inc    %rsi                         <i>;*dcmpl {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@41 (line 70)</i>
  0x00007f943b97178b:   test   %esi,%esi
  0x00007f943b97178d:   jg     0x00007f943b9717eb           <i>;*ifle {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@42 (line 70)</i>
  0x00007f943b971793:   vmulsd -0xd3(%rip),%xmm2,%xmm2        # 0x00007f943b9716c8
                                                            <i>;   {section_word}</i>
  0x00007f943b97179b:   vmulsd %xmm3,%xmm2,%xmm2
  0x00007f943b97179f:   vaddsd %xmm0,%xmm2,%xmm2
  0x00007f943b9717a3:   vsubsd %xmm5,%xmm4,%xmm4
  0x00007f943b9717a7:   vaddsd %xmm1,%xmm4,%xmm4
  0x00007f943b9717ab:   inc    %eax
  0x00007f943b9717ad:   movabs $0x7f93cfa88d00,%rsi
  0x00007f943b9717b7:   mov    0xc(%rsi),%edi
  0x00007f943b9717ba:   add    $0x2,%edi
  0x00007f943b9717bd:   mov    %edi,0xc(%rsi)
  0x00007f943b9717c0:   and    $0x7ffe,%edi
  0x00007f943b9717c6:   test   %edi,%edi
  0x00007f943b9717c8:   je     0x00007f943b97181f           <i>;*goto {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@73 (line 77)</i>
  0x00007f943b9717ce:   mov    0x450(%r15),%r10             <i>; ImmutableOopMap {}</i>
                                                            <i>;*goto {reexecute=1 rethrow=0 return_oop=0}</i>
                                                            <i>; - (reexecute) DrawMandelbrot::calcIter@73 (line 77)</i>
  0x00007f943b9717d5:   test   %eax,(%r10)                  <i>;   {poll}</i>
  0x00007f943b9717d8:   vmovapd %xmm2,%xmm3
  0x00007f943b9717dc:   vmovapd %xmm4,%xmm2                 <i>;*goto {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@73 (line 77)</i>
  0x00007f943b9717e0:   cmp    $0x4b0,%eax
  0x00007f943b9717e5:   jl     0x00007f943b971748           <i>;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@16 (line 66)</i>
  0x00007f943b9717eb:   add    $0x30,%rsp
  0x00007f943b9717ef:   pop    %rbp
  0x00007f943b9717f0:   cmp    0x448(%r15),%rsp             <i>;   {poll_return}</i>
  0x00007f943b9717f7:   ja     0x00007f943b97183d
  0x00007f943b9717fd:   ret    
  0x00007f943b9717fe:   movabs $0x7f93cfa888d8,%r10         <i>;   {metadata({method} {0x00007f93cfa888d8} 'calcIter' '(DDDD)I' in 'DrawMandelbrot')}</i>
  0x00007f943b971808:   mov    %r10,0x8(%rsp)
  0x00007f943b97180d:   movq   $0xffffffffffffffff,(%rsp)
  0x00007f943b971815:   call   0x00007f9442d74c00           <i>; ImmutableOopMap {rsi=Oop }</i>
                                                            <i>;*synchronization entry</i>
                                                            <i>; - DrawMandelbrot::calcIter@-1 (line 63)</i>
                                                            <i>;   {runtime_call counter_overflow Runtime1 stub}</i>
  0x00007f943b97181a:   jmp    0x00007f943b97173c
  0x00007f943b97181f:   movabs $0x7f93cfa888d8,%r10         <i>;   {metadata({method} {0x00007f93cfa888d8} 'calcIter' '(DDDD)I' in 'DrawMandelbrot')}</i>
  0x00007f943b971829:   mov    %r10,0x8(%rsp)
  0x00007f943b97182e:   movq   $0x49,(%rsp)
  0x00007f943b971836:   call   0x00007f9442d74c00           <i>; ImmutableOopMap {}</i>
                                                            <i>;*goto {reexecute=1 rethrow=0 return_oop=0}</i>
                                                            <i>; - (reexecute) DrawMandelbrot::calcIter@73 (line 77)</i>
                                                            <i>;   {runtime_call counter_overflow Runtime1 stub}</i>
  0x00007f943b97183b:   jmp    0x00007f943b9717ce
  0x00007f943b97183d:   movabs $0x7f943b9717f0,%r10         <i>;   {internal_word}</i>
  0x00007f943b971847:   mov    %r10,0x460(%r15)
  0x00007f943b97184e:   jmp    0x00007f9442cb4000           <i>;   {runtime_call SafepointBlob}</i>
  0x00007f943b971853:   mov    0x4f8(%r15),%rax
  0x00007f943b97185a:   movq   $0x0,0x4f8(%r15)
  0x00007f943b971865:   movq   $0x0,0x500(%r15)
  0x00007f943b971870:   add    $0x30,%rsp
  0x00007f943b971874:   pop    %rbp
  0x00007f943b971875:   jmp    0x00007f9442d6db00           <i>;   {runtime_call unwind_exception Runtime1 stub}</i>
  0x00007f943b97187a:   hlt    
  0x00007f943b97187b:   hlt    
  0x00007f943b97187c:   hlt    
  0x00007f943b97187d:   hlt    
  0x00007f943b97187e:   hlt    
  0x00007f943b97187f:   hlt    
[Exception Handler]
  0x00007f943b971880:   call   0x00007f9442d71100           <i>;   {no_reloc}</i>
  0x00007f943b971885:   movabs $0x7f945972c169,%rdi         <i>;   {external_word}</i>
  0x00007f943b97188f:   and    $0xfffffffffffffff0,%rsp
  0x00007f943b971893:   call   0x00007f94591cbbf0           <i>;   {runtime_call MacroAssembler::debug64(char*, long, long*)}</i>
  0x00007f943b971898:   hlt    
[Deopt Handler Code]
  0x00007f943b971899:   movabs $0x7f943b971899,%r10         <i>;   {section_word}</i>
  0x00007f943b9718a3:   push   %r10
  0x00007f943b9718a5:   jmp    0x00007f9442cb32a0           <i>;   {runtime_call DeoptimizationBlob}</i>
  0x00007f943b9718aa:   hlt    
  0x00007f943b9718ab:   hlt    
  0x00007f943b9718ac:   hlt    
  0x00007f943b9718ad:   hlt    
  0x00007f943b9718ae:   hlt    
  0x00007f943b9718af:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
</pre>

<p>Naproti tomu C2 překladač vyprodukoval poněkud odlišný strojový kód, který
je navíc kratší:</p>

<pre>
[Entry Point]
  # {method} {0x00007feabfa888d8} 'calcIter' '(DDDD)I' in 'DrawMandelbrot'
  # this:     rsi:rsi   = 'DrawMandelbrot'
  # parm0:    xmm0:xmm0   = double
  # parm1:    xmm1:xmm1   = double
  # parm2:    xmm2:xmm2   = double
  # parm3:    xmm3:xmm3   = double
  #           [sp+0x30]  (sp of caller)
  0x00007feb2fe2acc0:   mov    0x8(%rsi),%r10d              <i>;   {no_reloc}</i>
  0x00007feb2fe2acc4:   movabs $0x7feac3000000,%r11
  0x00007feb2fe2acce:   add    %r11,%r10
  0x00007feb2fe2acd1:   cmp    %r10,%rax
  0x00007feb2fe2acd4:   jne    0x00007feb2f6ad080           <i>;   {runtime_call ic_miss_stub}</i>
  0x00007feb2fe2acda:   xchg   %ax,%ax
  0x00007feb2fe2acdc:   nopl   0x0(%rax)
[Verified Entry Point]
  0x00007feb2fe2ace0:   mov    %eax,-0x14000(%rsp)
  0x00007feb2fe2ace7:   push   %rbp
  0x00007feb2fe2ace8:   sub    $0x20,%rsp
  0x00007feb2fe2acec:   cmpl   $0x1,0x20(%r15)
  0x00007feb2fe2acf4:   jne    0x00007feb2fe2adaa           <i>;*synchronization entry</i>
                                                            <i>; - DrawMandelbrot::calcIter@-1 (line 63)</i>
  0x00007feb2fe2acfa:   xor    %eax,%eax
  0x00007feb2fe2acfc:   mov    $0x3e8,%r11d
  0x00007feb2fe2ad02:   mov    $0x4b0,%r10d
  0x00007feb2fe2ad08:   sub    %eax,%r10d
  0x00007feb2fe2ad0b:   cmp    $0x3e8,%r10d
  0x00007feb2fe2ad12:   cmova  %r11d,%r10d
  0x00007feb2fe2ad16:   add    %eax,%r10d
  0x00007feb2fe2ad19:   jmp    0x00007feb2fe2ad24
  0x00007feb2fe2ad1b:   nopl   0x0(%rax,%rax,1)
  0x00007feb2fe2ad20:   vmovapd %xmm4,%xmm2                 <i>;*dload {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@19 (line 68)</i>
  0x00007feb2fe2ad24:   vmulsd %xmm3,%xmm3,%xmm4            <i>;*dmul {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@30 (line 69)</i>
  0x00007feb2fe2ad28:   vmulsd %xmm2,%xmm2,%xmm5            <i>;*dmul {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@23 (line 68)</i>
  0x00007feb2fe2ad2c:   vaddsd %xmm4,%xmm5,%xmm6
  0x00007feb2fe2ad30:   vucomisd -0x98(%rip),%xmm6        # 0x00007feb2fe2aca0
                                                            <i>;   {section_word}</i>
  0x00007feb2fe2ad38:   jbe    0x00007feb2fe2ad4d           <i>;*ifle {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@42 (line 70)</i>
  0x00007feb2fe2ad3a:   add    $0x20,%rsp
  0x00007feb2fe2ad3e:   pop    %rbp
  0x00007feb2fe2ad3f:   cmp    0x448(%r15),%rsp             <i>;   {poll_return}</i>
  0x00007feb2fe2ad46:   ja     0x00007feb2fe2ad94
  0x00007feb2fe2ad4c:   ret    
  0x00007feb2fe2ad4d:   vsubsd %xmm4,%xmm5,%xmm4
  0x00007feb2fe2ad51:   vaddsd %xmm1,%xmm4,%xmm4            <i>;*dadd {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@67 (line 75)</i>
  0x00007feb2fe2ad55:   vaddsd %xmm2,%xmm2,%xmm2
  0x00007feb2fe2ad59:   vmulsd %xmm3,%xmm2,%xmm2
  0x00007feb2fe2ad5d:   vaddsd %xmm0,%xmm2,%xmm3            <i>;*dadd {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@58 (line 74)</i>
  0x00007feb2fe2ad61:   inc    %eax                         <i>;*iinc {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@70 (line 76)</i>
  0x00007feb2fe2ad63:   cmp    %r10d,%eax
  0x00007feb2fe2ad66:   jl     0x00007feb2fe2ad20           <i>;*goto {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@73 (line 77)</i>
  0x00007feb2fe2ad68:   mov    0x450(%r15),%r10             <i>; ImmutableOopMap {}</i>
                                                            <i>;*goto {reexecute=1 rethrow=0 return_oop=0}</i>
                                                            <i>; - (reexecute) DrawMandelbrot::calcIter@73 (line 77)</i>
  0x00007feb2fe2ad6f:   test   %eax,(%r10)                  <i>;*goto {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@73 (line 77)</i>
                                                            <i>;   {poll}</i>
  0x00007feb2fe2ad72:   cmp    $0x4b0,%eax
  0x00007feb2fe2ad77:   jge    0x00007feb2fe2ad7f
  0x00007feb2fe2ad79:   vmovapd %xmm4,%xmm2
  0x00007feb2fe2ad7d:   jmp    0x00007feb2fe2ad02
  0x00007feb2fe2ad7f:   mov    $0xffffff45,%esi
  0x00007feb2fe2ad84:   mov    %eax,(%rsp)
  0x00007feb2fe2ad87:   call   0x00007feb2f6b2f00           <i>; ImmutableOopMap {}</i>
                                                            <i>;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}</i>
                                                            <i>; - (reexecute) DrawMandelbrot::calcIter@16 (line 66)</i>
                                                            <i>;   {runtime_call UncommonTrapBlob}</i>
  0x00007feb2fe2ad8c:   nopl   0x100027c(%rax,%rax,1)       <i>;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}</i>
                                                            <i>; - DrawMandelbrot::calcIter@16 (line 66)</i>
                                                            <i>;   {other}</i>
  0x00007feb2fe2ad94:   movabs $0x7feb2fe2ad3f,%r10         <i>;   {internal_word}</i>
  0x00007feb2fe2ad9e:   mov    %r10,0x460(%r15)
  0x00007feb2fe2ada5:   jmp    0x00007feb2f6b4000           <i>;   {runtime_call SafepointBlob}</i>
  0x00007feb2fe2adaa:   call   Stub::nmethod_entry_barrier  <i>;   {runtime_call StubRoutines (final stubs)}</i>
  0x00007feb2fe2adaf:   jmp    0x00007feb2fe2acfa
  0x00007feb2fe2adb4:   hlt    
  0x00007feb2fe2adb5:   hlt    
  0x00007feb2fe2adb6:   hlt    
  0x00007feb2fe2adb7:   hlt    
[Exception Handler]
  0x00007feb2fe2adb8:   jmp    0x00007feb2f777500           <i>;   {no_reloc}</i>
[Deopt Handler Code]
  0x00007feb2fe2adbd:   call   0x00007feb2fe2adc2
  0x00007feb2fe2adc2:   subq   $0x5,(%rsp)
  0x00007feb2fe2adc7:   jmp    0x00007feb2f6b32a0           <i>;   {runtime_call DeoptimizationBlob}</i>
  0x00007feb2fe2adcc:   hlt    
  0x00007feb2fe2adcd:   hlt    
  0x00007feb2fe2adce:   hlt    
  0x00007feb2fe2adcf:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
</pre>

<p><div class="rs-tip-major">Poznámka: tento výpis můžete získat i pro vaše
metody, ovšem potřebovat budete dynamickou knihovnu
<strong>hsdis.so</strong>.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>Tiobe index<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>StackOverflow developer survery 2024: technology<br />
<a href="https://survey.stackoverflow.co/2024/technology">https://survey.stackoverflow.co/2024/technology</a>
</li>

<li>Java version history<br />
<a href="https://en.wikipedia.org/wiki/Java_version_history">https://en.wikipedia.org/wiki/Java_version_history</a>
</li>

<li>Java history<br />
<a href="https://en.wikipedia.org/wiki/Java_(software_platform)#History">https://en.wikipedia.org/wiki/Java_(software_platform)#History</a>
</li>

<li>Is Java the NEW COBOL in 2024?<br />
<a href="https://blog.stackademic.com/is-java-the-new-cobol-in-2024-4b82de559f54">https://blog.stackademic.com/is-java-the-new-cobol-in-2024-4b82de559f54</a>
</li>

<li>Future of Java: The Top 7 Java Trends (2025)<br />
<a href="https://www.finoit.com/articles/future-of-java/">https://www.finoit.com/articles/future-of-java/</a>
</li>

<li>The Future of a Java Developer in 2025: Navigating the Evolution<br />
<a href="https://medium.com/@internshipgate/the-future-of-a-java-developer-in-2025-navigating-the-evolution-3c8531102c38">https://medium.com/@internshipgate/the-future-of-a-java-developer-in-2025-navigating-the-evolution-3c8531102c38</a>
</li>

<li>Top 10 Programming Languages For 2025<br />
<a href="https://www.geeksforgeeks.org/top-programming-languages-of-the-future-2025/">https://www.geeksforgeeks.org/top-programming-languages-of-the-future-2025/</a>
</li>

<li>Software Developers Are Aging Out. Here Are The Facts.<br />
<a href="https://medium.com/@tsecretdeveloper/software-developers-are-aging-out-here-are-the-facts-9ac112640d14">https://medium.com/@tsecretdeveloper/software-developers-are-aging-out-here-are-the-facts-9ac112640d14</a>
</li>

<li>Age Demographics Among Professional Developers: Trends and Transformations in the IT Industry<br />
<a href="https://itstarter.net/en/age-demographics-among-professional-developers/">https://itstarter.net/en/age-demographics-among-professional-developers/</a>
</li>

<li>Java's 20 Years Of Innovation<br />
<a href="https://www.forbes.com/sites/oracle/2015/05/20/javas-20-years-of-innovation/">https://www.forbes.com/sites/oracle/2015/05/20/javas-20-years-of-innovation/</a>
</li>

<li>The Java Story: History and Background<br />
<a href="https://cs.smu.ca/~porter/csc/465/notes/java_story_history.html">https://cs.smu.ca/~porter/csc/465/notes/java_story_history.html</a>
</li>

<li>May 23, 1995: Sun Released Java Programming, MySQL Released RDBMS<br />
<a href="https://dayintechhistory.com/dith/23-1995-sun-released-java-programming-mysql-released-rdbms/">https://dayintechhistory.com/dith/23-1995-sun-released-java-programming-mysql-released-rdbms/</a>
</li>

<li>Java Logo<br />
<a href="https://examples.javacodegeeks.com/java-logo/">https://examples.javacodegeeks.com/java-logo/</a>
</li>

<li>Kawa scheme language<br />
<a href="https://www.gnu.org/software/kawa/">https://www.gnu.org/software/kawa/</a>
</li>

<li>Třicet let od vydání revolučního Turbo Pascalu 5.5<br />
<a href="https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/">https://www.root.cz/clanky/tricet-let-od-vydani-revolucniho-turbo-pascalu-5-5/</a>
</li>

<li>The future's bright… the future's Cobol<br />
<a href="https://www.root.cz/clanky/the-future-s-bright-the-future-s-cobol/">https://www.root.cz/clanky/the-future-s-bright-the-future-s-cobol/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Šedesátiny převratného programovacího jazyka ALGOL-60<br />
<a href="https://www.root.cz/clanky/sedesatiny-prevratneho-programovaciho-jazyka-algol-60/">https://www.root.cz/clanky/sedesatiny-prevratneho-programovaciho-jazyka-algol-60/</a>
</li>

<li>Další kulaté výročí v IT: dvacet let existence Pythonu 2<br />
<a href="https://www.root.cz/clanky/dalsi-kulate-vyroci-v-it-dvacet-let-existence-pythonu-2/">https://www.root.cz/clanky/dalsi-kulate-vyroci-v-it-dvacet-let-existence-pythonu-2/</a>
</li>

<li>Oslava 55 let od vzniku první implementace jazyka APL<br />
<a href="https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/">https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/</a>
</li>

<li>Clojure<br />
<a href="https://clojure.org/">https://clojure.org/</a>
</li>

<li>Groovy<br />
<a href="http://groovy-lang.org/">http://groovy-lang.org/</a>
</li>

<li>Nashorn<br />
<a href="https://github.com/openjdk/nashorn">https://github.com/openjdk/nashorn</a>
</li>

<li>JRuby<br />
<a href="http://jruby.org/">http://jruby.org/</a>
</li>

<li>Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>Kotlin<br />
<a href="http://kotlinlang.org/">http://kotlinlang.org/</a>
</li>

<li>Scala<br />
<a href="https://www.scala-lang.org/">https://www.scala-lang.org/</a>
</li>

<li>Kawa<br />
<a href="https://www.gnu.org/software/kawa/">https://www.gnu.org/software/kawa/</a>
</li>

<li>Most used programming languages among developers worldwide 2024<br />
<a href="https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/">https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/</a>
</li>

<li>Susan Kare<br />
<a href="https://en.wikipedia.org/wiki/Susan_Kare">https://en.wikipedia.org/wiki/Susan_Kare</a>
</li>

<li>Java Debug Wire Protocol<br />
<a href="https://en.wikipedia.org/wiki/Java_Debug_Wire_Protocol">https://en.wikipedia.org/wiki/Java_Debug_Wire_Protocol</a>
</li>

<li>Java Virtual Machine Tools Interface<br />
<a href="https://en.wikipedia.org/wiki/Java_Virtual_Machine_Tools_Interface">https://en.wikipedia.org/wiki/Java_Virtual_Machine_Tools_Interface</a>
</li>

<li>Java Management Extensions<br />
<a href="https://en.wikipedia.org/wiki/Java_Management_Extensions">https://en.wikipedia.org/wiki/Java_Management_Extensions</a>
</li>

<li>Seriál Programovaci jazyk Java a JVM<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-java-a-jvm/">https://www.root.cz/serialy/programovaci-jazyk-java-a-jvm/</a>
</li>

<li>NULL: The Billion Dollar Mistake<br />
<a href="https://hackernoon.com/null-the-billion-dollar-mistake-8t5z32d6">https://hackernoon.com/null-the-billion-dollar-mistake-8t5z32d6</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

