<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 1
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "INES"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
.code
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Blok paměti s definicí dlaždic 8x8 pixelů</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "CHR0a"
.segment "CHR0b"
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Programový kód rutin pro NMI, RESET a IRQ volaných automaticky CPU</i>
<i>;</i>
<i>; viz též https://www.pagetable.com/?p=410</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
.proc nmi
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
.proc irq
        rti                     <i>; návrat z přerušení</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; Obslužná rutina pro RESET</i>
&nbsp;
.proc reset
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx $2000               <i>; nastavení PPUCTRL = 0</i>
        stx $2001               <i>; nastavení PPUMASK = 0</i>
        stx $4015               <i>; nastavení APUSTATUS = 0</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
wait1:  bit $2002               <i>; test obsahu registru PPUSTATUS </i>
        bpl wait1               <i>; skok, pokud je příznak N nulový</i>
wait2:  bit $2002               <i>; test obsahu registru PPUSTATUS </i>
        bpl wait2               <i>; skok, pokud je příznak N nulový</i>
&nbsp;
        <i>; vymazání obsahu RAM</i>
        lda #$00                <i>; vynulování registru A</i>
loop:   sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne loop                <i>; po přetečení 0xff -&gt; 0x00 konec smyčky</i>
&nbsp;
        <i>; čekání na dokončení dalšího snímku, potom může začít herní smyčka</i>
wait3:  bit $2002               <i>; test obsahu registru PPUSTATUS </i>
        bpl wait3               <i>; skok, pokud je příznak N nulový</i>
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
.endproc
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTOR"
.addr nmi
.addr reset
.addr irq
&nbsp;
&nbsp;
&nbsp;
<i>; ---------------------------------------------------------------------</i>
<i>; Finito</i>
<i>; ---------------------------------------------------------------------</i>
</pre>

<pre>
MEMORY {
    ZP:     start = $0000, size = $0100, type = rw;
    RAM:    start = $0300, size = $0400, type = rw;
    HEADER: start = $0000, size = $0010, type = rw,
            file = %O, fill = yes;
    PRG0:   start = $8000, size = $4000, type = ro,
            file = %O, fill = yes;
    CHR0a:  start = $0000, size = $1000, type = ro,
            file = %O, fill = yes;
    CHR0b:  start = $1000, size = $1000, type = ro,
            file = %O, fill = yes;
}
&nbsp;
SEGMENTS {
    ZEROPAGE: load = ZP, type = zp;
    BSS:    load = RAM, type = bss;
    HEADER: load = HEADER, type = ro, align = $10;
    CODE:   load = PRG0, type = ro;
    VECTORS: load = PRG0, type = ro, start = $BFFA;
    CHR0a:  load = CHR0a, type = ro;
    CHR0b:  load = CHR0b, type = ro;
}
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Definice hlavičky obrazu ROM</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
<i>; Size of PRG in units of 16 KiB.</i>
prg_npage = 1
&nbsp;
<i>; Size of CHR in units of 8 KiB.</i>
chr_npage = 1
&nbsp;
<i>; INES mapper number.</i>
mapper = 0
&nbsp;
<i>; Mirroring (0 = horizontal, 1 = vertical)</i>
mirroring = 1
&nbsp;
.segment "INES"
        .byte $4e, $45, $53, $1a
        .byte prg_npage
        .byte chr_npage
        .byte ((mapper &amp; $0f) &lt;&lt; 4) | (mirroring &amp; 1)
        .byte mapper &amp; $f0
.code
</pre>

<pre>
$ <strong>od -t x1 ctnes.nes</strong>
</pre>

<pre>
0000000 4e 45 53 1a 01 01 01 00 00 00 00 00 00 00 00 00
0000020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
0040000 00 00 00 00 00 00 00 00 00 00 00 10 02 10 01 10
0040020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
0050020 40 40 78 d8 a2 ff 9a a2 00 8e 00 20 8e 01 20 8e
0050040 15 40 2c 02 20 10 fb 2c 02 20 10 fb a9 00 95 00
0050060 9d 00 01 9d 00 02 9d 00 03 9d 00 04 9d 00 05 9d
0050100 00 06 9d 00 07 e8 d0 e6 2c 02 20 10 fb 4c 3d 10
0050120 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
<i>; ---------------------------------------------------------------------</i>
<i>; Tabulka vektorů CPU</i>
<i>; ---------------------------------------------------------------------</i>
&nbsp;
.segment "VECTOR"
.addr nmi
.addr reset
.addr irq
</pre>

<pre>
<i>; Obslužná rutina pro NMI (nemaskovatelné přerušení, vertical blank)</i>
&nbsp;
.proc nmi
        rti                     <i>; návrat z přerušení</i>
.endproc
</pre>

<pre>
<i>; Obslužná rutina pro IRQ (maskovatelné přerušení)</i>
&nbsp;
.proc irq
        rti                     <i>; návrat z přerušení</i>
.endproc
</pre>

<pre>
<i>; Obslužná rutina pro RESET</i>
&nbsp;
.proc reset
        ...
        ...
        ...
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
.endproc
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
<i>; Obslužná rutina pro RESET</i>
&nbsp;
.proc reset
        <i>; nastavení stavu CPU</i>
        sei                     <i>; zákaz přerušení</i>
        cld                     <i>; vypnutí dekadického režimu (není podporován)</i>
&nbsp;
        ldx #$ff
        txs                     <i>; vrchol zásobníku nastaven na 0xff (první stránka)</i>
&nbsp;
        <i>; nastavení řídicích registrů</i>
        ldx #$00
        stx $2000               <i>; nastavení PPUCTRL = 0</i>
        stx $2001               <i>; nastavení PPUMASK = 0</i>
        stx $4015               <i>; nastavení APUSTATUS = 0</i>
&nbsp;
        <i>; čekání na vnitřní inicializaci PPU (dva snímky)</i>
wait1:  bit $2002               <i>; test obsahu registru PPUSTATUS </i>
        bpl wait1               <i>; skok, pokud je příznak N nulový</i>
wait2:  bit $2002               <i>; test obsahu registru PPUSTATUS </i>
        bpl wait2               <i>; skok, pokud je příznak N nulový</i>
&nbsp;
        <i>; vymazání obsahu RAM</i>
        lda #$00                <i>; vynulování registru A</i>
loop:   sta $000, x             <i>; vynulování X-tého bajtu v nulté stránce</i>
        sta $100, x
        sta $200, x
        sta $300, x
        sta $400, x
        sta $500, x
        sta $600, x
        sta $700, x             <i>; vynulování X-tého bajtu v sedmé stránce</i>
        inx                     <i>; přechod na další bajt</i>
        bne loop                <i>; po přetečení 0xff -&gt; 0x00 konec smyčky</i>
&nbsp;
        <i>; čekání na dokončení dalšího snímku, potom může začít herní smyčka</i>
wait3:  bit $2002               <i>; test obsahu registru PPUSTATUS </i>
        bpl wait3               <i>; skok, pokud je příznak N nulový</i>
&nbsp;
        <i>; vlastní herní smyčka je prozatím prázdná</i>
game_loop:
        jmp game_loop           <i>; nekonečná smyčka (později rozšíříme)</i>
.endproc
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Programátorský model mikroprocesoru MOS 6502</h2>

<p>Z&nbsp;programátorského hlediska se MOS 6502 dosti podstatným způsobem odlišuje jak od Intelu 8080, tak i od čipu RCA-1802. Zatímco procesor Intel 8080 obsahoval poměrně rozsáhlou sadu obecně použitelných osmibitových registrů (A, B, C, D, E, H a L), měl 6502 pouze jeden akumulátor (registr A) a dva index-registry X a Y. Oba typy procesorů samozřejmě obsahovaly další speciální registry, jako ukazatel na vrchol zásobníku (SP), programový čítač (PC) a příznakový registr (F).</p>

<p>Na první pohled by se mohlo zdát, že počet registrů mikroprocesoru MOS 6502 je nedostatečný pro provádění většiny aritmetických či logických operací. Ve skutečnosti tomu tak není, protože tento procesor podporuje načtení druhého operandu z&nbsp;operační paměti (rychlost RAM nebyla tak limitujícím faktorem, jako je tomu dnes). U mnoha instrukcí je podporován větší počet adresovacích režimů, celkově je možné operandy strojových instrukcí adresovat třinácti navzájem odlišnými způsoby. Při adresování se často používají oba index-registry, které je možné inkrementovat a dekrementovat &ndash; tím je umožněno provádění blokových přenosů dat, mazání souvislé oblasti paměti atd.</p>

<p>Mikroprocesor MOS 6502 také zavádí pojem takzvané <i>nulté stránky paměti</i>. Jedná se o prvních 256 bytů operační paměti, kterou je možné adresovat zjednodušeným způsobem. Adresa libovolné buňky z&nbsp;nulté stránky paměti je totiž uložena na jednom byte v&nbsp;operačním kódu instrukce, takže celá instrukce může být kratší (typicky pouze dva byte). Současně je i provádění instrukcí adresujících nultou stránku paměti rychlejší než při šestnáctibitovém adresování. Z&nbsp;tohoto důvodu se můžeme na nultou stránku paměti dívat jako na pole 256 registrů resp.&nbsp;alternativně na 128 plnohodnotně využitelných 16bitových ukazatelů (musíme si uvědomit, že operační paměti byly v&nbsp;té době stejně rychlé jako procesor, takže čtení či zápis dat do paměti byla záležitost jednoho či dvou cyklů). Myšlenka nulté stránky paměti byla dále rozšířena v&nbsp;procesoru Motorola 6809, kde se však tato stránka dala v&nbsp;adresovatelné paměti posouvat na libovolné místo.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Registry a příznakové bity</h2>

<p><a href="#k05">V&nbsp;předchozí kapitole</a> jsme si řekli, že MOS 6502 obsahoval pouze minimální, ovšem ještě prakticky použitelný počet registrů.  Tyto registry jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Registr</th><th>Šířka</th><th>Význam</th></tr>
<tr><td>1</td><td>A</td><td>8 bitů</td><td>akumulátor</td></tr>
<tr><td>2</td><td>X</td><td>8 bitů</td><td>index registr</td></tr>
<tr><td>3</td><td>Y</td><td>8 bitů</td><td>index registr</td></tr>
<tr><td>4</td><td>SP</td><td>8 bitů</td><td>část ukazatele na vrchol zásobníku (+ $0100)</td></tr>
<tr><td>5</td><td>PC</td><td>16 bitů</td><td>čítač instrukcí</td></tr>
<tr><td>6</td><td>P</td><td>7/8 bitů</td><td>příznakový a stavový registr</td></tr>
</table>

<p>Většina aritmetických a logických operací používala jako jeden z&nbsp;operandů akumulátor; druhý operand byl typicky načítán z&nbsp;operační paměti. Přitom se pro adresování často používaly index registry X a Y. Ukazatel na vrchol zásobníku dokázal adresovat zásobník v&nbsp;rozsahu $0100 až $01FF, tedy 256 bajtů. A příznakový registr měl obsazen jen sedm bitů:</p>

<table>
<tr><th>Bit</th><th>Označení</th><th>Význam</th></tr>
<tr><td>7</td><td>N</td><td>záporný výsledek</td></tr>
<tr><td>6</td><td>V</td><td>přetečení do sedmého bitu</td></tr>
<tr><td>5</td><td>-</td><td>neobsazeno</td></tr>
<tr><td>4</td><td>B</td><td>rozlišení přerušení od instrukce BRK či PHP</td></tr>
<tr><td>3</td><td>D</td><td>režim výpočtů: binární versus BCD</td></tr>
<tr><td>2</td><td>I</td><td>zákaz přerušení</td></tr>
<tr><td>1</td><td>Z</td><td>nulový výsledek</td></tr>
<tr><td>0</td><td>C</td><td>přenos</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Adresovací režimy, využití registrů X a Y pro adresování</h2>

<p>Adresovací režimy odlišují MOS 6502 od naprosté většiny ostatních mikroprocesorů a umožňují použít odlišný styl programování založený na efektivním použití nulté stránky paměti a obou index registrů. Existuje třináct adresovacích režimů, ovšem žádná instrukce nevyužívá všechny. Některé adresovací režimy jsou určeny pouze pro skoky, další pro implicitní operandy atd.:</p>

<table>
<tr><th> #</th><th>Zápis</th><th>Název</th><th>Assembler</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>A    </td><td>accumulator</td><td>INS A</td><td>operandem je přímo akumulátor</td></tr>
<tr><td> 2</td><td>abs  </td><td>absolute</td><td>INS $LLHH</td><td>za instrukcí následuje šestnáctibitová adresa, na níž je operand uložen</td></tr>
<tr><td> 3</td><td>abs,X</td><td>absolute, X-indexed</td><td>INS $LLHH,X</td><td>za instrukcí následuje šestnáctibitová adresa, která je přičtena k X</td></tr>
<tr><td> 4</td><td>abs,Y</td><td>absolute, Y-indexed</td><td>INS $LLHH,Y</td><td>za instrukcí následuje šestnáctibitová adresa, která je přičtena k Y</td></tr>
<tr><td> 5</td><td>#    </td><td>immediate</td><td>INS #$BB</td><td>za instrukcí následuje bajt s&nbsp;konstantou</td></tr>
<tr><td> 6</td><td>impl </td><td>implied</td><td>INS</td><td>operand je odvozen přímo z&nbsp;instrukce, například INX</td></tr>
<tr><td> 7</td><td>ind  </td><td>indirect</td><td>INS ($LLHH)</td><td>nepřímá adresace přes adresu uloženou za instrukcí (ta je ukazatelem), nepřímý skok</td></tr>
<tr><td> 8</td><td>X,ind</td><td>X-indexed, indirect</td><td>INS ($LL,X)</td><td>efektivní adresa je spočtena z&nbsp;hodnoty uložené na (LL+X)</td></tr>
<tr><td> 9</td><td>ind,Y</td><td>indirect, Y-indexed</td><td>INS ($LL),Y</td><td>efektivní adresa je spočtena z&nbsp;hodnoty uložené na LL, k&nbsp;výsledku se přičte Y</td></tr>
<tr><td>10</td><td>rel  </td><td>relative</td><td>INS $BB</td><td>použito u relativních skoků; za instrukcí je jeden bajt reprezentující offset se znaménkem</td></tr>
<tr><td>11</td><td>zpg  </td><td>zeropage           </td><td>INS $LL</td><td>operand je uložen na nulté stránce na adrese LL</td></tr>
<tr><td>12</td><td>zpg,X</td><td>zeropage, X-indexed</td><td>INS $LL,X</td><td>operand je uložen na nulté stránce na adrese LL+X</td></tr>
<tr><td>13</td><td>zpg,Y</td><td>zeropage, Y-indexed</td><td>INS $LL,Y</td><td>operand je uložen na nulté stránce na adrese LL+Y</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: použití registrů X a Y není zcela symetrické, protože se od sebe liší podporou resp.&nbsp;nepodporou adresovacího režimu X,ind a ind,Y. Zejména poslední zmíněný režim lze použít pro operace s&nbsp;poli, přesuny bloků, mazání bloků atd. (je to zcela typická součást MOS 6502 ukazující na promyšlený návrh celého čipu).</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Aritmetické a logické instrukce</h2>

<p>Mikroprocesor <i>MOS 6502</i> obsahuje <a href="https://masswerk.at/6502/6502_instruction_set.html">pouze 56 instrukcí</a>, přičemž mnoho instrukcí podporuje více adresovacích režimů a tudíž i více variant (i tak však zdaleka není obsazeno všech 256 možných kombinací &ndash; ty byly postupně obsazovány v&nbsp;dalších procesorech, popř.&nbsp;na původním MOS 6502 měly sice oficiálně nedokumentovanou, ovšem logickou/očekávanou funkci &ndash; například načtení registru A i X jedinou instrukcí atd.). Nejprve si popíšeme aritmetické a logické instrukce mikroprocesoru MOS 6502. Většina dále popsaných instrukcí jako svůj první operand akceptuje akumulátor a druhým operandem může být konstanta popř.&nbsp;hodnota načtená z&nbsp;operační paměti s&nbsp;využitím výše popsaných adresovacích režimů. Výjimkou jsou instrukce s&nbsp;jediným operandem, v&nbsp;nichž nemusí vystupovat akumulátor popř.&nbsp;instrukce, v&nbsp;nichž je přímo operand vyjádřen názvem instrukce (<strong>INX</strong> atd.):</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;assembleru, které jsou určené pro
překlad pomocí <strong>ca65</strong>, byly uložen do Git repositáře, který je
dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>example01.asm</td><td>zdrojový kód příkladu tvořeného kostrou aplikace pro NES</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/example01.asm</a></td></tr>
<tr><td>2</td><td>link.cfg</td><td>konfigurace segmentů pro linker <strong>ld65</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/link.cfg</a></td></tr>
<tr><td>3</td><td>Makefile</td><td>Makefile pro překlad příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/Makefile</a></td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/</a></td></tr>
<tr><td>5</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/</a></td></tr>
<tr><td>6</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/</a></td></tr>
<tr><td>7</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/</a></td></tr>
<tr><td>8</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/">https://github.com/tisnik/8bit-fame/blob/master/NES-ca65/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>NesDev.org<br />
<a href="https://www.nesdev.org/">https://www.nesdev.org/</a>
</li>

<li>How to Program an NES game in C<br />
<a href="https://nesdoug.com/">https://nesdoug.com/</a>
</li>

<li>Getting Started Programming in C: Coding a Retro Game with C Part 2<br />
<a href="https://retrogamecoders.com/getting-started-with-c-cc65/">https://retrogamecoders.com/getting-started-with-c-cc65/</a>
</li>

<li>"Game Development in Eight Bits" by Kevin Zurawel<br />
<a href="https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4">https://www.youtube.com/watch?v=TPbroUDHG0s&amp;list=PLcGKfGEEONaBjSfQaSiU9yQsjPxxDQyV8&amp;index=4</a>
</li>

<li>Game Development for the 8-bit NES: A class by Bob Rost<br />
<a href="http://bobrost.com/nes/">http://bobrost.com/nes/</a>
</li>

<li>Game Development for the 8-bit NES: Lecture Notes<br />
<a href="http://bobrost.com/nes/lectures.php">http://bobrost.com/nes/lectures.php</a>
</li>

<li>NES Graphics Explained<br />
<a href="https://www.youtube.com/watch?v=7Co_8dC2zb8">https://www.youtube.com/watch?v=7Co_8dC2zb8</a>
</li>

<li>NES GAME PROGRAMMING PART 1<br />
<a href="https://rpgmaker.net/tutorials/227/?post=240020">https://rpgmaker.net/tutorials/227/?post=240020</a>
</li>

<li>NES 6502 Programming Tutorial - Part 1: Getting Started<br />
<a href="https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/">https://dev.xenforo.relay.cool/index.php?threads/nes-6502-programming-tutorial-part-1-getting-started.858389/</a>
</li>

<li>Minimal NES example using ca65<br />
<a href="https://github.com/bbbradsmith/NES-ca65-example">https://github.com/bbbradsmith/NES-ca65-example</a>
</li>

<li>List of 6502-based Computers and Consoles<br />
<a href="https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/">https://www.retrocompute.co.uk/list-of-6502-based-computers-and-consoles/</a>
</li>

<li>History of video game consoles (second generation): Wikipedia<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(second_generation)</a>
</li>

<li>6502 - the first RISC &micro;P<br />
<a href="http://ericclever.com/6500/">http://ericclever.com/6500/</a>
</li>

<li>3 Generations of Game Machine Architecture<br />
<a href="http://www.atariarchives.org/dev/CGEXPO99.html">http://www.atariarchives.org/dev/CGEXPO99.html</a>
</li>

<li>bee - The Multi-Console Emulator<br />
<a href="http://www.thebeehive.ws/">http://www.thebeehive.ws/</a>
</li>

<li>Nerdy Nights Mirror<br />
<a href="https://nerdy-nights.nes.science/">https://nerdy-nights.nes.science/</a>
</li>

<li>NES Development Day 1: Creating a ROM<br />
<a href="https://www.moria.us/blog/2018/03/nes-development">https://www.moria.us/blog/2018/03/nes-development</a>
</li>

<li>How to Start Making NES Games<br />
<a href="https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/">https://www.matthughson.com/2021/11/17/how-to-start-making-nes-games/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>cc65 Users Guide<br />
<a href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>
</li>

<li>ld65 Users Guide<br />
<a href="https://cc65.github.io/doc/ld65.html">https://cc65.github.io/doc/ld65.html</a>
</li>

<li>da65 Users Guide<br />
<a href="https://cc65.github.io/doc/da65.html">https://cc65.github.io/doc/da65.html</a>
</li>

<li>Nocash NES Specs<br />
<a href="http://nocash.emubase.de/everynes.htm">http://nocash.emubase.de/everynes.htm</a>
</li>

<li>Nintendo Entertainment System<br />
<a href="http://cs.wikipedia.org/wiki/NES">http://cs.wikipedia.org/wiki/NES</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>NesDev<br />
<a href="http://nesdev.parodius.com/">http://nesdev.parodius.com/</a>
</li>

<li>2A03 technical reference<br />
<a href="http://nesdev.parodius.com/2A03%20technical%20reference.txt">http://nesdev.parodius.com/2A03%20technical%20reference.txt</a>
</li>

<li>NES Dev wiki: 2A03<br />
<a href="http://wiki.nesdev.com/w/index.php/2A03">http://wiki.nesdev.com/w/index.php/2A03</a>
</li>

<li>Ricoh 2A03<br />
<a href="http://en.wikipedia.org/wiki/Ricoh_2A03">http://en.wikipedia.org/wiki/Ricoh_2A03</a>
</li>

<li>2A03 pinouts<br />
<a href="http://nesdev.parodius.com/2A03_pinout.txt">http://nesdev.parodius.com/2A03_pinout.txt</a>
</li>

<li>27c3: Reverse Engineering the MOS 6502 CPU (en)<br />
<a href="https://www.youtube.com/watch?v=fWqBmmPQP40">https://www.youtube.com/watch?v=fWqBmmPQP40</a>
</li>

<li>“Hello, world” from scratch on a 6502 — Part 1<br />
<a href="https://www.youtube.com/watch?v=LnzuMJLZRdU">https://www.youtube.com/watch?v=LnzuMJLZRdU</a>
</li>

<li>A Tour of 6502 Cross-Assemblers<br />
<a href="https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/">https://bumbershootsoft.wordpress.com/2016/01/31/a-tour-of-6502-cross-assemblers/</a>
</li>

<li>Nintendo Entertainment System (NES)<br />
<a href="https://8bitworkshop.com/docs/platforms/nes/">https://8bitworkshop.com/docs/platforms/nes/</a>
</li>

<li>Question about NES vectors and PPU<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t4154.xhtml">https://archive.nes.science/nesdev-forums/f10/t4154.xhtml</a>
</li>

<li>How do mapper chips actually work?<br />
<a href="https://archive.nes.science/nesdev-forums/f9/t13125.xhtml">https://archive.nes.science/nesdev-forums/f9/t13125.xhtml</a>
</li>

<li>INES<br />
<a href="https://www.nesdev.org/wiki/INES">https://www.nesdev.org/wiki/INES</a>
</li>

<li>NES Basics and Our First Game<br />
<a href="http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html">http://thevirtualmountain.com/nes/2017/03/08/nes-basics-and-our-first-game.html</a>
</li>

<li>Where is the reset vector in a .nes file?<br />
<a href="https://archive.nes.science/nesdev-forums/f10/t17413.xhtml">https://archive.nes.science/nesdev-forums/f10/t17413.xhtml</a>
</li>

<li>CPU memory map<br />
<a href="https://www.nesdev.org/wiki/CPU_memory_map">https://www.nesdev.org/wiki/CPU_memory_map</a>
</li>

<li>How to make NES music<br />
<a href="http://blog.snugsound.com/2008/08/how-to-make-nes-music.html">http://blog.snugsound.com/2008/08/how-to-make-nes-music.html</a>
</li>

<li>Nintendo Entertainment System Architecture<br />
<a href="http://nesdev.icequake.net/nes.txt">http://nesdev.icequake.net/nes.txt</a>
</li>

<li>MIDINES<br />
<a href="http://www.wayfar.net/0xf00000_overview.php">http://www.wayfar.net/0xf00000_overview.php</a>
</li>

<li>FamiTracker<br />
<a href="http://famitracker.com/">http://famitracker.com/</a>
</li>

<li>nerdTracker II<br />
<a href="http://nesdev.parodius.com/nt2/">http://nesdev.parodius.com/nt2/</a>
</li>

<li>How NES Graphics work<br />
<a href="http://nesdev.parodius.com/nesgfx.txt">http://nesdev.parodius.com/nesgfx.txt</a>
</li>

<li>NES Technical/Emulation/Development FAQ<br />
<a href="http://nesdev.parodius.com/NESTechFAQ.htm">http://nesdev.parodius.com/NESTechFAQ.htm</a>
</li>

<li>Adventures with ca65<br />
<a href="https://atariage.com/forums/topic/312451-adventures-with-ca65/">https://atariage.com/forums/topic/312451-adventures-with-ca65/</a>
</li>

<li>example ca65 startup code<br />
<a href="https://atariage.com/forums/topic/209776-example-ca65-startup-code/">https://atariage.com/forums/topic/209776-example-ca65-startup-code/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

