<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vývoj her a grafických i zvukových dem pro ZX Spectrum: výpis informací na obrazovku</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vývoj her a grafických i zvukových dem pro ZX Spectrum: výpis informací na obrazovku</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Vývoj her a grafických i zvukových dem pro ZX Spectrum: výpis informací na obrazovku</a></p>
<p><a href="#k02">*** 2. Smazání obrazovky a otevření kanálu číslo 2 (<i>screen</i>)</a></p>
<p><a href="#k03">*** 3. Tisk jednoho znaku na obrazovku přes rutinu uloženou v&nbsp;ROM</a></p>
<p><a href="#k04">*** 4. Náhrada instrukce <strong>CALL</strong> za instrukci <strong>RST</strong></a></p>
<p><a href="#k05">*** 5. Tisk znaku bez předchozího smazání obrazovky</a></p>
<p><a href="#k06">*** 6. Tisk celé znakové sady (nekorektní varianta)</a></p>
<p><a href="#k07">*** 7. Oprava předchozího demonstračního příkladu</a></p>
<p><a href="#k08">*** 8. Řídicí znaky a sekvence řídicích znaků</a></p>
<p><a href="#k09">*** 9. Modifikace barvy popředí a pozadí vypisovaných znaků</a></p>
<p><a href="#k10">*** 10. Povolení blikání, vysoké intenzity popředí atd.</a></p>
<p><a href="#k11">*** 11. Tisk na určité místo na obrazovce příkazem <strong>AT</strong></a></p>
<p><a href="#k12">*** 12. Tisk celého řetězce</a></p>
<p><a href="#k13">*** 13. Programová smyčka pro tisk řetězce znak po znaku</a></p>
<p><a href="#k14">*** 14. Tisk celého řetězce s&nbsp;využitím subrutiny v&nbsp;ROM</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vývoj her a grafických i zvukových dem pro ZX Spectrum: výpis informací na obrazovku</h2>

<p></p>

<p>V&nbsp;demonstračních příkladech uvedených v&nbsp;následujících kapitolách
je použito pouze několik instrukcí, které postupně rozšiřují repertoár nám již
známých instrukcí z&nbsp;předchozích dvou článku. Ty instrukce jsou, společně
se stručným popisem, vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Strojový kód</th><th>Instrukce</th><th>Operandy</th><th>Stručný popis instrukce</th></tr>
<tr><td>3Exx</td><td>LD</td><td>A, xx</td><td>načtení osmibitové konstanty <i>xx</i> do akumulátoru</td></tr>
<tr><td>06xx</td><td>LD</td><td>B, xx</td><td>načtení osmibitové konstanty <i>xx</i> do pracovního registru B</td></tr>
<tr><td>0exx</td><td>LD</td><td>C, xx</td><td>načtení osmibitové konstanty <i>xx</i> do pracovního registru C</td></tr>
<tr><td>79</td><td>LD</td><td>A, C</td><td>přesun dat z&nbsp;registru C do akumulátoru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3C</td><td>INC</td><td>A </td><td>zvýšení obsahu akumulátoru o jedničku</td></tr>
<tr><td>0C</td><td>INC</td><td>C </td><td>zvýšení obsahu pracovního registru o jedničku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10rr</td><td>DJNZ</td><td>rr</td><td>snížení hodnoty registru B a relativní skok za podmínky, že nová hodnota registru B není nulová</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>C9</td><td>RET</td><td>&nbsp;</td><td>návrat z&nbsp;podprogramu</td></tr>
<tr><td>CDxxxx</td><td>CALL</td><td>xxxx</td><td>skok do podprogramu na adrese <i>xxxx</i> s&nbsp;uložením návratové adresy na zásobník</td></tr>
<tr><td>D7</td><td>RST</td><td>10</td><td>kratší a rychlejší varianta <strong>CALL</strong> pro vybraných osm adres</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Smazání obrazovky a otevření kanálu číslo 2 (<i>screen</i>)</h2>

<p></p>

<pre>
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        call ROM_CLS    <i>; smazání obrazovky a otevření kanálu číslo 2 (screen)</i>
        ret             <i>; návrat z programu do BASICu</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
8000:           label start
8000:CDAF0D     CALL 0DAF
8003:C9         RET
8004:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8003
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Tisk jednoho znaku na obrazovku přes rutinu uloženou v&nbsp;ROM</h2>

<p></p>

<pre>
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        call ROM_CLS    <i>; smazání obrazovky a otevření kanálu číslo 2 (screen)</i>
        ld   A, 42      <i>; kód znaku '*' pro tisk</i>
        call 0x10       <i>; zavolání rutiny v ROM</i>
        ret             <i>; návrat z programu do BASICu</i>

end ENTRY_POINT
</pre>

<pre>
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
8000:           label start
8000:CDAF0D     CALL 0DAF
8003:3E2A       LD A, 2A
8005:CD1000     CALL 0010
8008:C9         RET
8009:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8008
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm</a>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Náhrada instrukce <strong>CALL</strong> za instrukci <strong>RST</strong></h2>

<p></p>

<pre>
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        call ROM_CLS    <i>; smazání obrazovky a otevření kanálu číslo 2 (screen)</i>
        ld   A, 42      <i>; kód znaku '*' pro tisk</i>
        rst  0x10       <i>; zavolání rutiny v ROM</i>
        ret             <i>; návrat z programu do BASICu</i>
&nbsp;
end ENTRY_POINT
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Tisk znaku bez předchozího smazání obrazovky</h2>

<p></p>

<pre>
ENTRY_POINT      equ $8000
ROM_OPEN_CHANNEL equ $1601
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        ld   A,2              <i>; číslo kanálu</i>
        call ROM_OPEN_CHANNEL <i>; otevření kanálu číslo 2 (screen)</i>
        ld   A, 42            <i>; kód znaku '*' pro tisk</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>
        ret                   <i>; návrat z programu do BASICu</i>
&nbsp;
end ENTRY_POINT
</pre>


<pre>
ENTRY_POINT     EQU 8000
ROM_OPEN_CHANNEL EQU 1601
                ORG 8000
8000:           label start
8000:3E02       LD A, 02
8002:CD0116     CALL 1601
8005:3E2A       LD A, 2A
8007:D7         RST 10
8008:C9         RET
8009:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8008
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm</a>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Tisk celé znakové sady (nekorektní varianta)</h2>

<p></p>

<pre>
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        call ROM_CLS    <i>; smazání obrazovky a otevření kanálu číslo 2 (screen)</i>
&nbsp;
        ld  a, ' '      <i>; kód prvního zapisovaného znaku</i>
        ld  b, 96+16    <i>; počitadlo smyčky</i>
&nbsp;
loop:
        rst  0x10       <i>; zavolání rutiny v ROM</i>
&nbsp;
        inc a           <i>; zvýšení zapisované hodnoty (kódu znaku)</i>
        djnz loop       <i>; kombinace dec b + jp NZ, loop</i>
                        <i>; snížení hodnoty počitadla</i>
                        <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret             <i>; návrat z programu do BASICu</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
8000:           label start
8000:CDAF0D     CALL 0DAF
8003:3E20       LD A, 20
8005:0670       LD B, 70
8007:           label loop
8007:D7         RST 10
8008:3C         INC A
8009:10FC       DJNZ 8007
800B:C9         RET
800C:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800B
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm</a>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Oprava předchozího demonstračního příkladu</h2>

<p></p>

<pre>
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
start:
        call ROM_CLS    <i>; smazání obrazovky a otevření kanálu číslo 2 (screen)</i>
&nbsp;
        ld  c, ' '      <i>; kód prvního zapisovaného znaku</i>
        ld  b, 96+16    <i>; počitadlo smyčky</i>
&nbsp;
loop:
        ld   a, c
        rst  0x10       <i>; zavolání rutiny v ROM</i>
&nbsp;
        inc c           <i>; zvýšení zapisované hodnoty (kód znaku)</i>
        djnz loop       <i>; kombinace dec b + jp NZ, loop</i>
                        <i>; snížení hodnoty počitadla</i>
                        <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret             <i>; návrat z programu do BASICu</i>
&nbsp;
end ENTRY_POINT
</pre>

<pre>
ENTRY_POINT     EQU 8000
ROM_CLS         EQU 0DAF
                ORG 8000
8000:           label start
8000:CDAF0D     CALL 0DAF
8003:0E20       LD C, 20
8005:0670       LD B, 70
8007:           label loop
8007:79         LD A, C
8008:D7         RST 10
8009:0C         INC C
800A:10FB       DJNZ 8007
800C:C9         RET
800D:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800C
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm</a>.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Řídicí znaky a sekvence řídicích znaků</h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Modifikace barvy popředí a pozadí vypisovaných znaků</h2>

<p></p>

<pre>
ENTRY_POINT      equ $8000
ROM_OPEN_CHANNEL equ $1601

INK              equ $10
PAPER            equ $11
FLASH            equ $12
BRIGHT           equ $13
INVERSE          equ $14

BLACK_COLOR      equ %000
BLUE_COLOR       equ %001
RED_COLOR        equ %010
MAGENTA_COLOR    equ %011
GREEN_COLOR      equ %100
CYAN_COLOR       equ %101
YELLOW_COLOR     equ %110
WHITE_COLOR      equ %111

        org ENTRY_POINT

start:
        ld   A,2              <i>; číslo kanálu</i>
        call ROM_OPEN_CHANNEL <i>; otevření kanálu číslo 2 (screen)</i>

        ld   A, INK           <i>; řídicí kód pro specifikaci barvy inkoustu</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ld   A, YELLOW_COLOR  <i>; barva inkoustu</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ld   A, PAPER         <i>; řídicí kód pro specifikaci barvy papíru</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ld   A, BLUE_COLOR    <i>; barva papíru</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ld   A, 42            <i>; kód znaku '*' pro tisk</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ret                   <i>; návrat z programu do BASICu</i>

end ENTRY_POINT
</pre>

<pre>
ENTRY_POINT     EQU 8000
ROM_OPEN_CHANNEL EQU 1601
INK             EQU 0010
PAPER           EQU 0011
FLASH           EQU 0012
BRIGHT          EQU 0013
INVERSE         EQU 0014
BLACK_COLOR     EQU 0000
BLUE_COLOR      EQU 0001
RED_COLOR       EQU 0002
MAGENTA_COLOR   EQU 0003
GREEN_COLOR     EQU 0004
CYAN_COLOR      EQU 0005
YELLOW_COLOR    EQU 0006
WHITE_COLOR     EQU 0007
                ORG 8000
8000:           label start
8000:3E02       LD A, 02
8002:CD0116     CALL 1601
8005:3E10       LD A, 10
8007:D7         RST 10
8008:3E06       LD A, 06
800A:D7         RST 10
800B:3E11       LD A, 11
800D:D7         RST 10
800E:3E01       LD A, 01
8010:D7         RST 10
8011:3E2A       LD A, 2A
8013:D7         RST 10
8014:C9         RET
8015:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8014
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Povolení blikání, vysoké intenzity popředí atd.</h2>

<p></p>

<pre>
ENTRY_POINT      equ $8000
ROM_OPEN_CHANNEL equ $1601

INK              equ $10
PAPER            equ $11
FLASH            equ $12
BRIGHT           equ $13
INVERSE          equ $14

ENABLE           equ 1
DISABLE          equ 0

        org ENTRY_POINT

start:
        ld   A,2              <i>; číslo kanálu</i>
        call ROM_OPEN_CHANNEL <i>; otevření kanálu číslo 2 (screen)</i>

        ld   A, FLASH         <i>; řídicí kód pro specifikaci blikání</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ld   A, ENABLE        <i>; povolení blikání</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ld   A, 42            <i>; kód znaku '*' pro tisk</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ret                   <i>; návrat z programu do BASICu</i>

end ENTRY_POINT
</pre>

<pre>
ENTRY_POINT     EQU 8000
ROM_OPEN_CHANNEL EQU 1601
INK             EQU 0010
PAPER           EQU 0011
FLASH           EQU 0012
BRIGHT          EQU 0013
INVERSE         EQU 0014
ENABLE          EQU 0001
DISABLE         EQU 0000
                ORG 8000
8000:           label start
8000:3E02       LD A, 02
8002:CD0116     CALL 1601
8005:3E12       LD A, 12
8007:D7         RST 10
8008:3E01       LD A, 01
800A:D7         RST 10
800B:3E2A       LD A, 2A
800D:D7         RST 10
800E:C9         RET
800F:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 800E
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm</a>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Tisk na určité místo na obrazovce příkazem <strong>AT</strong></h2>

<p></p>

<pre>
ENTRY_POINT      equ $8000
ROM_OPEN_CHANNEL equ $1601

AT               equ 0x16

        org ENTRY_POINT

start:
        ld   A,2              <i>; číslo kanálu</i>
        call ROM_OPEN_CHANNEL <i>; otevření kanálu číslo 2 (screen)</i>

        ld   A, AT            <i>; řídicí kód pro specifikaci pozice psaní</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ld   A, 16            <i>; y-ová souřadnice</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ld   A, 31            <i>; x-ová souřadnice</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ld   A, 42            <i>; kód znaku '*' pro tisk</i>
        rst  0x10             <i>; zavolání rutiny v ROM</i>

        ret                   <i>; návrat z programu do BASICu</i>

end ENTRY_POINT
</pre>

<pre>
ENTRY_POINT     EQU 8000
ROM_OPEN_CHANNEL EQU 1601
AT              EQU 0016
                ORG 8000
8000:           label start
8000:3E02       LD A, 02
8002:CD0116     CALL 1601
8005:3E16       LD A, 16
8007:D7         RST 10
8008:3E10       LD A, 10
800A:D7         RST 10
800B:3E1F       LD A, 1F
800D:D7         RST 10
800E:3E2A       LD A, 2A
8010:D7         RST 10
8011:C9         RET
8012:           END 8000
Emiting TAP basic loader
Emiting TAP from 8000 to 8011
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm</a>.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Tisk celého řetězce</h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Programová smyčka pro tisk řetězce znak po znaku</h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Tisk celého řetězce s&nbsp;využitím subrutiny v&nbsp;ROM</h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: upravený soubor Makefile pro překlad demonstračních příkladů</h2>

<p>Výše uvedené příklady i demonstrační příklady, které již byly popsány, lze
přeložit s&nbsp;využitím souboru Makefile, jehož aktuální verze vypadá
následovně:</p>

<pre>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem jsou uvedeny odkazy na všechny
prozatím popsané demonstrační příklady určené pro překlad a spuštění na
osmibitovém domácím mikropočítači ZX Spectrum (libovolný model či jeho klon),
které jsou psány v&nbsp;assembleru mikroprocesoru Zilog Z80. Pro překlad těchto
demonstračních příkladů je možné použít například assembler <i>Pasmo</i> (viz
též <a
href="https://www.root.cz/clanky/kouzlo-minimalismu-potreti-vyvoj-her-a-dem-pro-slavne-zx-spectrum/">úvodní
článek</a>):</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>01-color-attribute.asm</td><td>modifikace jednoho barvového atributu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/01-color-attribute.asm</a></td></tr>
<tr><td> 2</td><td>02-blinking-attribute.asm</td><td>barvový atribut s&nbsp;nastavením bitů pro blikání a vyšší intenzitu</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/02-blinking-attribute.asm</a></td></tr>
<tr><td> 3</td><td>03-symbolic-names.asm</td><td>symbolická jména v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/03-symbolic-names.asm</a></td></tr>
<tr><td> 4</td><td>04-operators.asm</td><td>operátory a operace se symbolickými hodnotami</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/04-operators.asm</a></td></tr>
<tr><td> 5</td><td>05-better-symbols.asm</td><td>tradičnější symbolická jména</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/05-better-symbols.asm</a></td></tr>
<tr><td> 6</td><td>06-tapbas-v1.asm</td><td>vygenerování BASICovského loaderu (neúplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/06-tapbas-v1.asm</a></td></tr>
<tr><td> 7</td><td>07-tapbas-v2.asm</td><td>vygenerování BASICovského loaderu (úplný příklad)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/07-tapbas-v2.asm</a></td></tr>
<tr><td> 8</td><td>08-loop.asm</td><td>jednoduchá počítaná programová smyčka: naivní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/08-loop.asm</a></td></tr>
<tr><td> 9</td><td>09-loop.asm</td><td>programová smyčka: zkrácení kódu pro vynulování použitých pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/09-loop.asm</a></td></tr>
<tr><td>10</td><td>10-loop.asm</td><td>programová smyčka: optimalizace skoku na konci smyčky (instrukce <strong>DJNZ</strong>)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/10-loop.asm</a></td></tr>
<tr><td>11</td><td>11-loop.asm</td><td>programová smyčka: optimalizace využití pracovních registrů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/11-loop.asm</a></td></tr>
<tr><td>12</td><td>12-loop.asm</td><td>programová smyčka: použití pracovního registru IX</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/12-loop.asm</a></td></tr>
<tr><td>13</td><td>13-loop.asm</td><td>programová smyčka: použití pracovního registru IY</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/13-loop.asm</a></td></tr>
<tr><td>14</td><td>14-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, základní varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/14-loop.asm</a></td></tr>
<tr><td>15</td><td>15-loop.asm</td><td>programová smyčka se šestnáctibitovým počitadlem, vylepšená varianta</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/15-loop.asm</a></td></tr>
<tr><td>16</td><td>16-loop.asm</td><td>použití relativního skoku a nikoli skoku absolutního</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/16-loop.asm</a></td></tr>
<tr><td>17</td><td>17-loop.asm</td><td>programová smyčka: <strong>inc l</strong> namísto <strong>inc hl</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/17-loop.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>18-cls.asm</td><td>smazání obrazovky a otevření kanálu číslo 2 (screen) přes funkci v&nbsp;ROM</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/18-cls.asm</a></td></tr>
<tr><td>19</td><td>19-print-char-call.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce CALL)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/19-print-char-call.asm</a></td></tr>
<tr><td>20</td><td>20-print-char-rst.asm</td><td>smazání obrazovky a výpis jednoho znaku na obrazovku přes funkci v&nbsp;ROM (použití instrukce RST)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/20-print-char-rst.asm</a></td></tr>
<tr><td>21</td><td>21-print-char.asm</td><td>pouze výpis jednoho znaku na obrazovku bez jejího smazání</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/21-print-char.asm</a></td></tr>
<tr><td>22</td><td>22-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (nekorektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/22-print-all-chars.asm</a></td></tr>
<tr><td>23</td><td>23-print-all-chars.asm</td><td>výpis znakové sady znak po znaku (korektní verze příkladu)</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/23-print-all-chars.asm</a></td></tr>
<tr><td>24</td><td>24-change-color.asm</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/24-change-color.asm</a></td></tr>
<tr><td>25</td><td>25-change-flash.asm</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/25-change-flash.asm</a></td></tr>
<tr><td>26</td><td>26-print-at.asm</td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/26-print-at.asm</a></td></tr>
<tr><td>27</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/</a></td></tr>
<tr><td>28</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/</a></td></tr>
<tr><td>29</td><td></td><td></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>30</td><td>Makefile</td><td>Makefile pro překlad a slinkování všech příkladů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile">https://github.com/tisnik/8bit-fame/blob/master/Speccy-asm/Makefile</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>The ZX BASIC Compiler<br />
<a href="https://www.boriel.com/pages/the-zx-basic-compiler.html">https://www.boriel.com/pages/the-zx-basic-compiler.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>Elena, New programming language for the ZX Spectrum Next<br />
<a href="https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/">https://vintageisthenewold.com/elena-new-programming-language-for-the-zx-spectrum-next/</a>
</li>

<li>Sinclair BASIC<br />
<a href="https://worldofspectrum.net/legacy-info/sinclair-basic/">https://worldofspectrum.net/legacy-info/sinclair-basic/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair/</a>
</li>

<li>Grafika na osmibitových počítačích firmy Sinclair II<br />
<a href="https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/">https://www.root.cz/clanky/grafika-na-osmibitovych-pocitacich-firmy-sinclair-ii/</a>
</li>

<li>HiSoft BASIC<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008249">https://worldofspectrum.net/infoseekid.cgi?id=0008249</a>
</li>

<li>YS MegaBasic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0008997">https://worldofspectrum.net/infoseekid.cgi?id=0008997</a>
</li>

<li>Beta Basic<br />
<a href="https://worldofspectrum.net/infoseekid.cgi?id=0007956">https://worldofspectrum.net/infoseekid.cgi?id=0007956</a>
</li>

<li>BASIC+<br />
<a href="https://worldofspectrum.net/infoseekid.php?id=0014277">https://worldofspectrum.net/infoseekid.php?id=0014277</a>
</li>

<li>Spectrum ROM Memory Map<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/all.html">https://skoolkit.ca/disassemblies/rom/maps/all.html</a>
</li>

<li>Goto subroutine<br />
<a href="https://skoolkit.ca/disassemblies/rom/asm/7783.html">https://skoolkit.ca/disassemblies/rom/asm/7783.html</a>
</li>

<li>Spectrum Next: The Evolution of the Speccy<br />
<a href="https://www.specnext.com/about/">https://www.specnext.com/about/</a>
</li>

<li>Sedmdesátiny assemblerů: lidsky čitelný strojový kód<br />
<a href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-2/#k06</a>
</li>

<li>Programovací jazyk BASIC na osmibitových mikropočítačích (3)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/">https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich-3/</a>
</li>

<li>Sinclair BASIC (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Sinclair_BASIC">http://cs.wikipedia.org/wiki/Sinclair_BASIC</a>
</li>

<li>Assembly Language: Still Relevant Today<br />
<a href="http://wilsonminesco.com/AssyDefense/">http://wilsonminesco.com/AssyDefense/</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Why Assembly Language Programming? (Why Learning Assembly Language Is Still a Good Idea)<br />
<a href="https://wdc65xx.com/markets/education/why-assembly-language-programming/">https://wdc65xx.com/markets/education/why-assembly-language-programming/</a>
</li>

<li>Low Fat Computing<br />
<a href="http://www.ultratechnology.com/lowfat.htm">http://www.ultratechnology.com/lowfat.htm</a>
</li>

<li>Assembly Language<br />
<a href="https://www.cleverism.com/skills-and-tools/assembly-language/">https://www.cleverism.com/skills-and-tools/assembly-language/</a>
</li>

<li>Why do we need assembly language?<br />
<a href="https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language">https://cs.stackexchange.com/questions/13287/why-do-we-need-assembly-language</a>
</li>

<li>Assembly language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective">https://en.wikipedia.org/wiki/Assembly_language#Historical_perspective</a>
</li>

<li>Assembly languages<br />
<a href="https://curlie.org/Computers/Programming/Languages/Assembly/">https://curlie.org/Computers/Programming/Languages/Assembly/</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>B-ELITE<br />
<a href="https://jsj.itch.io/b-elite">https://jsj.itch.io/b-elite</a>
</li>

<li>ZX-Spectrum Child<br />
<a href="http://www.dotkam.com/2008/11/19/zx-spectrum-child/">http://www.dotkam.com/2008/11/19/zx-spectrum-child/</a>
</li>

<li>Speccy.cz<br />
<a href="http://www.speccy.cz/">http://www.speccy.cz/</a>
</li>

<li>Planet Sinclair<br />
<a href="http://www.nvg.ntnu.no/sinclair/">http://www.nvg.ntnu.no/sinclair/</a>
</li>

<li>World of Spectrum<br />
<a href="http://www.worldofspectrum.org/">http://www.worldofspectrum.org/</a>
</li>

<li>Z80 Assembly Language for the ZX Spectrum Tutorial, Episode 1: The Basics<br />
<a href="https://www.youtube.com/watch?v=_J4ahkWtNYw">https://www.youtube.com/watch?v=_J4ahkWtNYw</a>
</li>

<li>Z80 assembly resources when starting programming in assembler<br />
<a href="https://www.youtube.com/watch?v=mjLHSnQmHV4">https://www.youtube.com/watch?v=mjLHSnQmHV4</a>
</li>

<li>Setting up Visual Studio Code with Pasmo, Sprite Example ZX Spectrum Next<br />
<a href="https://www.youtube.com/watch?v=lKDaFWPObLY">https://www.youtube.com/watch?v=lKDaFWPObLY</a>
</li>

<li>RetroCoder ZX Spectrum development (Z80 Assembly)- Day 1 - Hello World.asm<br />
<a href="https://www.youtube.com/watch?v=Xv6NAC--x24">https://www.youtube.com/watch?v=Xv6NAC--x24</a>
</li>

<li>Rozšíření paměti<br />
<a href="https://wiki.ilnx.cz/doku.php/lnxspectrum:memorymap">https://wiki.ilnx.cz/doku.php/lnxspectrum:memorymap</a>
</li>

<li>ZX-Spectrum 48K video memory map<br />
<a href="https://www.reddit.com/r/zxspectrum/comments/phi7lt/zxspectrum_48k_video_memory_map/">https://www.reddit.com/r/zxspectrum/comments/phi7lt/zxspectrum_48k_video_memory_map/</a>
</li>

<li>Memory Map: 48K Spectrum<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/memory-map">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/memory-map</a>
</li>

<li>ZX Basic: Git repository<br />
<a href="https://github.com/boriel/zxbasic">https://github.com/boriel/zxbasic</a>
</li>

<li>ZX Basic Wiki<br />
<a href="https://zxbasic.readthedocs.io/en/docs/">https://zxbasic.readthedocs.io/en/docs/</a>
</li>

<li>ZX Spectrum Games: svět osmibitové herní legendy<br />
<a href="https://www.zx-spectrum.cz/">https://www.zx-spectrum.cz/</a>
</li>

<li>TAP format<br />
<a href="https://sinclair.wiki.zxnet.co.uk/wiki/TAP_format">https://sinclair.wiki.zxnet.co.uk/wiki/TAP_format</a>
</li>

<li>Contended memory<br />
<a href="https://worldofspectrum.org/faq/reference/48kreference.htm#Contention">https://worldofspectrum.org/faq/reference/48kreference.htm#Contention</a>
</li>

<li>Screen Memory Layout<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/screen-memory-layout">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/screen-memory-layout</a>
</li>

<li>OpenSE BASIC<br />
<a href="https://zxdesign.itch.io/opense">https://zxdesign.itch.io/opense</a>
</li>

<li>Domácí a školní mikropočítače řady Didaktik<br />
<a href="https://www.root.cz/clanky/domaci-a-skolni-mikropocitace-rady-didaktik/">https://www.root.cz/clanky/domaci-a-skolni-mikropocitace-rady-didaktik/</a>
</li>

<li>Z80 Assembler for Dummies<br />
<a href="https://www.msx.org/wiki/Z80_Assembler_for_Dummies">https://www.msx.org/wiki/Z80_Assembler_for_Dummies</a>
</li>

<li>Z80 Resources<br />
<a href="https://www.assemblytutorial.com/z80/">https://www.assemblytutorial.com/z80/</a>
</li>

<li>How do Z80 Block Transfer instructions work?<br />
<a href="https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work">https://retrocomputing.stackexchange.com/questions/5416/how-do-z80-block-transfer-instructions-work</a>
</li>

<li>How fast is memcpy on the Z80?<br />
<a href="https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80">https://retrocomputing.stackexchange.com/questions/4744/how-fast-is-memcpy-on-the-z80</a>
</li>

<li>Comparing Datapoint 2200, 8008, 8080 and Z80 Instruction Sets<br />
<a href="https://bread80.com/comparing-datapoint-2200-8008-8080-and-z80-instruction-sets/">https://bread80.com/comparing-datapoint-2200-8008-8080-and-z80-instruction-sets/</a>
</li>

<li>8080/Z80 Instruction Set<br />
<a href="https://retroprogramming.it/2021/02/8080-z80-instruction-set/">https://retroprogramming.it/2021/02/8080-z80-instruction-set/</a>
</li>

<li>Zilog Z80A Technical Information<br />
<a href="https://worldofspectrum.org/faq/reference/z80reference.htm">https://worldofspectrum.org/faq/reference/z80reference.htm</a>
</li>

<li>Z80 programming techniques - Loops<br />
<a href="http://map.grauw.nl/articles/fast_loops.php">http://map.grauw.nl/articles/fast_loops.php</a>
</li>

<li>PRINT in Assembly Language<br />
<a href="http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/assembly-language/z80-tutorials/print-in-assembly-language">http://www.breakintoprogram.co.uk/hardware/computers/zx-spectrum/assembly-language/z80-tutorials/print-in-assembly-language</a>
</li>

<li>Spectrum ROM Routines<br />
<a href="https://skoolkit.ca/disassemblies/rom/maps/routines.html">https://skoolkit.ca/disassemblies/rom/maps/routines.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

