<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Multimediální knihovna Pyglet: práce s myší a dalšími polohovacími zařízeními</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Multimediální knihovna Pyglet: práce s myší a dalšími polohovacími zařízeními</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Multimediální knihovna Pyglet: práce s myší a dalšími polohovacími zařízeními</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">*** 16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Multimediální knihovna Pyglet: práce s myší a dalšími polohovacími zařízeními</h2>

<pre>
@window.event
def on_mouse_press(x, y, button, modifiers):
    pass
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
button_names = {pyglet.window.mouse.LEFT: "left",
                pyglet.window.mouse.RIGHT: "right",
                pyglet.window.mouse.MIDDLE: "middle"}


@window.event
def on_mouse_press(x, y, button, modifiers):
    button_name = button_names.get(button, "unknown")
    text = format("Mouse press: %s button at [%d, %d]" % (button_name, x, y))
    label.text = text
    print(text)
    on_draw()
</pre>


<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_gray_label(text, x, y, anchor_x, anchor_y):
    return pyglet.text.Label(text,
                             font_size=18,
                             x=x,
                             y=y,
                             anchor_x=anchor_x,
                             anchor_y=anchor_y,
                             color=GRAY)


window = create_window(640, 480)
label = create_gray_label('Mouse press:', 10, 10, 'left', 'bottom')


@window.event
def on_draw():
    window.clear()
    label.draw()


button_names = {pyglet.window.mouse.LEFT: "left",
                pyglet.window.mouse.RIGHT: "right",
                pyglet.window.mouse.MIDDLE: "middle"}


@window.event
def on_mouse_press(x, y, button, modifiers):
    button_name = button_names.get(button, "unknown")
    text = format("Mouse press: %s button at [%d, %d]" % (button_name, x, y))
    label.text = text
    print(text)
    on_draw()


pyglet.app.run()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
@window.event
def on_mouse_press(x, y, button, modifiers):
    pass


@window.event
def on_mouse_release(x, y, button, modifiers):
    pass
</pre>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_gray_label(text, x, y, anchor_x, anchor_y):
    return pyglet.text.Label(text,
                             font_size=18,
                             x=x,
                             y=y,
                             anchor_x=anchor_x,
                             anchor_y=anchor_y,
                             color=GRAY)


window = create_window(640, 480)
label = create_gray_label('Mouse:', 10, 10, 'left', 'bottom')


@window.event
def on_draw():
    window.clear()
    label.draw()


button_names = {pyglet.window.mouse.LEFT: "left",
                pyglet.window.mouse.RIGHT: "right",
                pyglet.window.mouse.MIDDLE: "middle"}


def on_mouse_action(x, y, button, action):
    button_name = button_names.get(button, "unknown")
    text = format("Mouse %s %s button at [%d, %d]" %
                  (action, button_name, x, y))
    label.text = text
    print(text)
    on_draw()


@window.event
def on_mouse_press(x, y, button, modifiers):
    on_mouse_action(x, y, button, "pressed")


@window.event
def on_mouse_release(x, y, button, modifiers):
    on_mouse_action(x, y, button, "released")
    on_draw()


pyglet.app.run()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    label.draw()
    sprite.draw()
</pre>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


def create_gray_label(text, x, y, anchor_x, anchor_y):
    return pyglet.text.Label(text,
                             font_size=18,
                             x=x,
                             y=y,
                             anchor_x=anchor_x,
                             anchor_y=anchor_y,
                             color=GRAY)


window = create_window(640, 480)
label = create_gray_label('Mouse:', 10, 10, 'left', 'bottom')
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    label.draw()
    sprite.draw()


button_names = {pyglet.window.mouse.LEFT: "left",
                pyglet.window.mouse.RIGHT: "right",
                pyglet.window.mouse.MIDDLE: "middle"}


def on_mouse_action(x, y, button, action):
    button_name = button_names.get(button, "unknown")
    text = format("Mouse %s %s button at [%d, %d]" %
                  (action, button_name, x, y))
    label.text = text
    print(text)
    on_draw()


@window.event
def on_mouse_press(x, y, button, modifiers):
    sprite.x = x
    sprite.y = y
    on_mouse_action(x, y, button, "pressed")


@window.event
def on_mouse_release(x, y, button, modifiers):
    on_mouse_action(x, y, button, "released")
    on_draw()


pyglet.app.run()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
@window.event
def on_mouse_motion(x, y, dx, dy):
    sprite.x = x
    sprite.y = y
</pre>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_mouse_motion(x, y, dx, dy):
    sprite.x = x
    sprite.y = y


pyglet.app.run()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_mouse_drag(x, y, dx, dy, buttons, modifiers):
    if buttons &amp; pyglet.window.mouse.LEFT:
        sprite.x = x
        sprite.y = y


pyglet.app.run()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_mouse_drag(x, y, dx, dy, buttons, modifiers):
    if buttons &amp; pyglet.window.mouse.LEFT:
        sprite.x += dx
        sprite.y += dy


pyglet.app.run()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_mouse_drag(x, y, dx, dy, buttons, modifiers):
    if buttons &amp; pyglet.window.mouse.LEFT:
        sprite.x += dx
        sprite.y += dy


@window.event
def on_mouse_scroll(x, y, scroll_x, scroll_y):
    sprite.scale += float(scroll_y/4.0)


pyglet.app.run()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


window = create_window(640, 480)


@window.event
def on_draw():
    window.clear()


cursors = {
    pyglet.window.key.F1: pyglet.window.Window.CURSOR_DEFAULT,
    pyglet.window.key.F2: pyglet.window.Window.CURSOR_HAND,
    pyglet.window.key.F3: pyglet.window.Window.CURSOR_HELP,
    pyglet.window.key.F4: pyglet.window.Window.CURSOR_SIZE,
    pyglet.window.key.F5: pyglet.window.Window.CURSOR_SIZE_UP,
    pyglet.window.key.F6: pyglet.window.Window.CURSOR_SIZE_DOWN,
    pyglet.window.key.F7: pyglet.window.Window.CURSOR_SIZE_LEFT,
    pyglet.window.key.F8: pyglet.window.Window.CURSOR_SIZE_RIGHT,
    pyglet.window.key.F9: pyglet.window.Window.CURSOR_WAIT,
    pyglet.window.key.F10: pyglet.window.Window.CURSOR_NO
}


@window.event
def on_key_press(symbol, modifiers):
    cursor_type = cursors.get(symbol)
    cursor = window.get_system_mouse_cursor(cursor_type)
    window.set_mouse_cursor(cursor)


pyglet.app.run()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def load_cursor(filename):
    image = pyglet.image.load(filename)
    return pyglet.window.ImageMouseCursor(image)


window = create_window(640, 480)
cursor = load_cursor("gnome-globe.png")
window.set_mouse_cursor(cursor)


@window.event
def on_draw():
    window.clear()


pyglet.app.run()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def load_cursor(filename):
    image = pyglet.image.load(filename)
    return pyglet.window.ImageMouseCursor(image, image.width/2, image.height/2)


window = create_window(640, 480)
cursor = load_cursor("gnome-globe.png")
window.set_mouse_cursor(cursor)


@window.event
def on_draw():
    window.clear()


pyglet.app.run()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def load_cursor(filename):
    image = pyglet.image.load(filename)
    return pyglet.window.ImageMouseCursor(image, image.width/2, image.height/2)


window = create_window(640, 480)
custom_cursor = load_cursor("gnome-globe.png")


@window.event
def on_draw():
    window.clear()


cursors = {
    pyglet.window.key.F1: pyglet.window.Window.CURSOR_DEFAULT,
    pyglet.window.key.F2: pyglet.window.Window.CURSOR_HAND,
    pyglet.window.key.F3: pyglet.window.Window.CURSOR_HELP,
    pyglet.window.key.F4: pyglet.window.Window.CURSOR_SIZE,
    pyglet.window.key.F5: pyglet.window.Window.CURSOR_SIZE_UP,
    pyglet.window.key.F6: pyglet.window.Window.CURSOR_SIZE_DOWN,
    pyglet.window.key.F7: pyglet.window.Window.CURSOR_SIZE_LEFT,
    pyglet.window.key.F8: pyglet.window.Window.CURSOR_SIZE_RIGHT,
    pyglet.window.key.F9: pyglet.window.Window.CURSOR_WAIT,
    pyglet.window.key.F10: pyglet.window.Window.CURSOR_NO
}


@window.event
def on_key_press(symbol, modifiers):
    if symbol == pyglet.window.key.SPACE:
        cursor = custom_cursor
    else:
        cursor_type = cursors.get(symbol)
        cursor = window.get_system_mouse_cursor(cursor_type)
    window.set_mouse_cursor(cursor)


pyglet.app.run()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
@window.event
def on_mouse_motion(x, y, dx, dy):
    sprite.x += dx
    sprite.y += dy
</pre>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
window.set_exclusive_mouse(True)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_mouse_motion(x, y, dx, dy):
    sprite.x += dx
    sprite.y += dy


pyglet.app.run()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>. Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti klonovat celý repositář. Pro jejich spuštění je samozřejmě nutné mít nainstalovanou jak knihovnu Pyglet, tak i podpůrné grafické knihovny OpenGL a GLU (což se většinou provede automaticky v&nbsp;rámci instalace balíčku s&nbsp;Pygletem, viz též <a href="https://mojefedora.cz/multimedialni-knihovna-pyglet/">úvodní díl tohoto seriálu</a>):</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>76_on_mouse_press.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/76_on_mouse_press.py">https://github.com/tisnik/presentations/blob/master/pyglet/76_on_mouse_press.py</a></td></tr>
<tr><td>77_on_mouse_press_release.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/77_on_mouse_press_release.py">https://github.com/tisnik/presentations/blob/master/pyglet/77_on_mouse_press_release.py</a></td></tr>
<tr><td>78_on_mouse_press_sprite.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/78_on_mouse_press_sprite.py">https://github.com/tisnik/presentations/blob/master/pyglet/78_on_mouse_press_sprite.py</a></td></tr>
<tr><td>79_on_mouse_motion.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/79_on_mouse_motion.py">https://github.com/tisnik/presentations/blob/master/pyglet/79_on_mouse_motion.py</a></td></tr>
<tr><td>80_on_mouse_drag.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/80_on_mouse_drag.py">https://github.com/tisnik/presentations/blob/master/pyglet/80_on_mouse_drag.py</a></td></tr>
<tr><td>81_better_on_mouse_drag.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/81_better_on_mouse_drag.py">https://github.com/tisnik/presentations/blob/master/pyglet/81_better_on_mouse_drag.py</a></td></tr>
<tr><td>82_on_mouse_scroll.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/82_on_mouse_scroll.py">https://github.com/tisnik/presentations/blob/master/pyglet/82_on_mouse_scroll.py</a></td></tr>
<tr><td>83_mouse_cursor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/83_mouse_cursor.py">https://github.com/tisnik/presentations/blob/master/pyglet/83_mouse_cursor.py</a></td></tr>
<tr><td>84_custom_mouse_cursor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/84_custom_mouse_cursor.py">https://github.com/tisnik/presentations/blob/master/pyglet/84_custom_mouse_cursor.py</a></td></tr>
<tr><td>85_custom_centered_cursor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/85_custom_centered_cursor.py">https://github.com/tisnik/presentations/blob/master/pyglet/85_custom_centered_cursor.py</a></td></tr>
<tr><td>86_custom_and_standard_cursors.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/86_custom_and_standard_cursors.py">https://github.com/tisnik/presentations/blob/master/pyglet/86_custom_and_standard_cursors.py</a></td></tr>
<tr><td>87_exclusive_mouse.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/87_exclusive_mouse.py">https://github.com/tisnik/presentations/blob/master/pyglet/87_exclusive_mouse.py</a></td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Class pyglet.graphics.vertexdomain.VertexList<br />
<a href="https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexList-class.html">https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexList-class.html</a>
</li>

<li>Class pyglet.graphics.vertexdomain.VertexDomain<br />
<a href="https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexDomain-class.html">https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexDomain-class.html</a>
</li>

<li>Pyglet: Module Hierarchy<br />
<a href="https://pythonhosted.org/pyglet/api/module-tree.html">https://pythonhosted.org/pyglet/api/module-tree.html</a>
</li>

<li>Learning Modern OpenGL<br />
<a href="https://www.codeproject.com/articles/771225/learning-modern-opengl">https://www.codeproject.com/articles/771225/learning-modern-opengl</a>
</li>

<li>OpenGL Utility Library<br />
<a href="https://en.wikipedia.org/wiki/OpenGL_Utility_Library">https://en.wikipedia.org/wiki/OpenGL_Utility_Library</a>
</li>

<li>GLU Specification<br />
<a href="https://www.opengl.org/registry/doc/glu1.3.pdf">https://www.opengl.org/registry/doc/glu1.3.pdf</a>
</li>

<li>The Perlin noise math FAQ<br />
<a href="https://mzucker.github.io/html/perlin-noise-math-faq.html">https://mzucker.github.io/html/perlin-noise-math-faq.html</a>
</li>

<li>Perlin noise<br />
<a href="https://en.wikipedia.org/wiki/Perlin_noise">https://en.wikipedia.org/wiki/Perlin_noise</a>
</li>

<li>Perlin Noise Generator (Python recipe)<br />
<a href="http://code.activestate.com/recipes/578470-perlin-noise-generator/">http://code.activestate.com/recipes/578470-perlin-noise-generator/</a>
</li>

<li>Simplex noise demystified<br />
<a href="http://www.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf">http://www.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf</a>
</li>

<li>glTexEnv - příkaz OpenGL<br />
<a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTexEnv.xml">https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTexEnv.xml</a>
</li>

<li>glGetTexEnv - příkaz OpenGL<br />
<a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glGetTexEnv.xml">https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glGetTexEnv.xml</a>
</li>

<li>Pyglet Home Page<br />
<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home">https://bitbucket.org/pyglet/pyglet/wiki/Home</a>
</li>

<li>Pyglet: dokumentace k verzi 1.2<br />
<a href="https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/">https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/</a>
</li>

<li>Dokumentace k verzi 1.2 ve formátu PDF<br />
<a href="https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/">https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/</a>
</li>

<li>PyOpenGL<br />
<a href="http://pyopengl.sourceforge.net/">http://pyopengl.sourceforge.net/</a>
</li>

<li>The #! magic, details about the shebang/hash-bang mechanism on various Unix flavours<br />
<a href="https://www.in-ulm.de/~mascheck/various/shebang/">https://www.in-ulm.de/~mascheck/various/shebang/</a>
</li>

<li>Shebang (Unix)<br />
<a href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29">https://en.wikipedia.org/wiki/Shebang_%28Unix%29</a>
</li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Simple DirectMedia Layer (home page)<br />
<a href="http://www.libsdl.org/">http://www.libsdl.org/</a>
</li>

<li>Simple DirectMedia Layer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
</li>

<li>Seriál Grafická knihovna OpenGL<br />
<a href="https://www.root.cz/serialy/graficka-knihovna-opengl/">https://www.root.cz/serialy/graficka-knihovna-opengl/</a>
</li>

<li>Pyglet event loop<br />
<a href="http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html">http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html</a>
</li>

<li>Decorators I: Introduction to Python Decorators<br />
<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">http://www.artima.com/weblogs/viewpost.jsp?thread=240808</a>
</li>

<li>3D Programming in Python - Part 1 <br />
<a href="https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/">https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/</a>
</li>

<li>A very basic Pyglet tutorial<br />
<a href="http://www.natan.termitnjak.net/tutorials/pyglet_basic.html">http://www.natan.termitnjak.net/tutorials/pyglet_basic.html</a>
</li>

<li>Alpha blending<br />
<a href="https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending">https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

