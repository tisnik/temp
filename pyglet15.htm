<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Multimediální knihovna Pyglet: práce s myší a dalšími polohovacími zařízeními</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Multimediální knihovna Pyglet: práce s myší a dalšími polohovacími zařízeními</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Využitím klávesnice ve hrách a dalších multimediálních aplikacích používajících knihovnu Pyglet jsme se zabývali v&nbsp;předchozím článku, takže se dnes logicky přesuneme na popis způsobů využití myši (popř.&nbsp;touchpadu). Knihovna Pyglet programátorům nabízí poměrně široké možnosti, jak lze myš využít, ať již se to týká reakce na rotaci myším kolečkem, tak i možností definice vlastních kurzorů reprezentovaných (barevnými) rastrovými obrázky.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Multimediální knihovna Pyglet: práce s&nbsp;myší a dalšími polohovacími zařízeními</a></p>
<p><a href="#k02">2. Reakce na stisk tlačítka myš: <strong>on_mouse_press</strong>i</a></p>
<p><a href="#k03">3. Stisk versus puštění tlačítka myši: <strong>on_mouse_release</strong></a></p>
<p><a href="#k04">4. Sprite ovládaný myší</a></p>
<p><a href="#k05">5. Reakce na pohyb myši: <strong>on_mouse_motion</strong></a></p>
<p><a href="#k06">6. Tažení kurzorem myši: <strong>on_mouse_drag</strong></a></p>
<p><a href="#k07">7. Využití informací o relativní změně kurzoru myši</a></p>
<p><a href="#k08">8. Otočení kolečkem myši: <strong>on_mouse_scroll</strong></a></p>
<p><a href="#k09">9. Změna velikosti spritu pomocí kolečka myši</a></p>
<p><a href="#k10">10. Standardní množina kurzorů</a></p>
<p><a href="#k11">11. Vlastní kurzor myši načtený z&nbsp;rastrového obrázku</a></p>
<p><a href="#k12">12. Vycentrování vlastního kurzoru</a></p>
<p><a href="#k13">13. Kombinace vlastního kurzoru a standardních kurzorů</a></p>
<p><a href="#k14">14. Exkluzivní režim</a></p>
<p><a href="#k15">15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Multimediální knihovna Pyglet: práce s&nbsp;myší a dalšími polohovacími zařízeními</h2>

<p>Připomeňme si, že v&nbsp;knihovně Pyglet existuje podpora pro několik typů vstupních zařízení. V&nbsp;první řadě se pochopitelně jedná o klávesnici a myš (popř.&nbsp;touchpad), což jsou dnes standardní zařízení dostupná na desktopech i noteboocích. Kromě toho jsou však podporována i další zařízení, zejména joysticky, různé typy pedálů, volanty, dotykové obrazovky atd. Pro přístup k&nbsp;těmto zařízením se používají buď specializované <i>callback funkce</i> nebo je nutné použít modul <a href="https://pyglet.readthedocs.io/en/latest/modules/input.html">pyglet.input</a>. Dnes navážeme na předchozí část tohoto seriálu, v&nbsp;níž jsme se zabývali popisem detailů práce s&nbsp;klávesnicí. Ukážeme si totiž, jakými způsoby je možné využít myš, reagovat na stisk tlačítek, pohyb myši, tažení myší, otočení kolečkem atd. Taktéž si ukážeme způsob změny kurzoru myši včetně možnosti použití vlastních kurzorů načtených z&nbsp;externích rastrových obrázků (podobně jako sprity).</p>

<p>Při práci s&nbsp;myší lze použít následující <i>callback</i> funkce:</p>

<table>
<tr><th>Callback funkce</th><th>Reaguje na událost</th><th>Kapitola</th></tr>
<tr><td>on_mouse_press</td><td>stisk tlačítka myši</td><td><a href="#k02">2</a></td></tr>
<tr><td>on_mouse_release</td><td>puštění tlačítka myši</td><td><a href="#k03">3</a></td></tr>
<tr><td>on_mouse_motion</td><td>pohyb kurzoru</td><td><a href="#k05">5</a></td></tr>
<tr><td>on_mouse_drag</td><td>tažení (pohyb kurzoru se stisknutým tlačítkem)</td><td><a href="#k06">6</a></td></tr>
<tr><td>on_mouse_scroll</td><td>otočení kolečkem (nebo kolečky!) myši</td><td><a href="#k08">8</a></td></tr>
</table>

<p>Callback funkce se vždy registrují k&nbsp;určitému oknu, což je ostatně podobný princip, s&nbsp;jakým jsme se již setkali při práci s&nbsp;klávesnicí.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Reakce na stisk tlačítka myši: <strong>on_mouse_press</strong></h2>

<p>Základní událostí při práci s&nbsp;myší je událost, která vznikne ve chvíli, kdy je stlačeno její libovolné tlačítko (nebo kolečko, které je většinou považováno za prostřední tlačítko). V&nbsp;případě, že zpracováváme události pro okno nazvané <strong>window</strong>, bude callback funkce reagující na stisk tlačítka vypadat následovně:</p>

<pre>
@window.event
def <strong>on_mouse_press</strong>(x, y, button, modifiers):
    pass
</pre>

<p>Při stisku tlačítka se současně zaznamená i pozice kurzoru myši a případné modifikátory (jako u klávesnice). Pokud současně stisknete více tlačítek, zavolá se callback funkce několikrát, tj.&nbsp;v&nbsp;parametru <strong>button</strong> bude vždy jen jediná konstanta, nikoli kombinace. Knihovna Pyglet rozlišuje minimálně tři tlačítka &ndash; levé, pravé a prostřední (což je většinou kolečko). Pokud vlastníte myš s&nbsp;více tlačítky (herní myši), musíte si otestovat, jak se budou tato tlačítka chovat v&nbsp;praxi. Pokud potřebujeme rozlišit stisk jednoho ze tří základních tlačítek, můžeme postupovat takto:</p>

<pre>
button_names = {pyglet.window.mouse.LEFT: "left",
                pyglet.window.mouse.RIGHT: "right",
                pyglet.window.mouse.MIDDLE: "middle"}


@window.event
def <strong>on_mouse_press</strong>(x, y, button, modifiers):
    button_name = button_names.get(button, "unknown")
    text = format("Mouse press: %s button at [%d, %d]" % (button_name, x, y))
    label.text = text
    print(text)
    on_draw()
</pre>

<p>Povšimněte si, že stisknuté tlačítko je reprezentováno jednou z&nbsp;konstant:</p>

<table>
<tr><td>pyglet.window.mouse.LEFT</td></tr>
<tr><td>pyglet.window.mouse.RIGHT</td></tr>
<tr><td>pyglet.window.mouse.MIDDLE</td></tr>
</table>

<a href="https://mojefedora.cz/wp-content/uploads/2017/08/01-1.png"><img class="alignnone size-thumbnail wp-image-9439" src="https://mojefedora.cz/wp-content/uploads/2017/08/01-1-324x254.png" alt="" width="324" height="254" /></a>
<p><i>Obrázek 1: Reakce na stisk levého tlačítka myši.</i></p>

<p>V&nbsp;následujícím demonstračním příkladu se při stisku tlačítka myši zobrazí jeho jméno na obrazovce aplikace a současně se toto jméno vypíše na konzoli. Navíc se vytiskne i aktuální souřadnice kurzoru myši:</p>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_gray_label(text, x, y, anchor_x, anchor_y):
    return pyglet.text.Label(text,
                             font_size=18,
                             x=x,
                             y=y,
                             anchor_x=anchor_x,
                             anchor_y=anchor_y,
                             color=GRAY)


window = create_window(640, 480)
label = create_gray_label('Mouse press:', 10, 10, 'left', 'bottom')


@window.event
def on_draw():
    window.clear()
    label.draw()


button_names = {pyglet.window.mouse.LEFT: "left",
                pyglet.window.mouse.RIGHT: "right",
                pyglet.window.mouse.MIDDLE: "middle"}


@window.event
def on_mouse_press(x, y, button, modifiers):
    button_name = button_names.get(button, "unknown")
    text = format("Mouse press: %s button at [%d, %d]" % (button_name, x, y))
    label.text = text
    print(text)
    on_draw()


pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/08/02-1.png"><img class="alignnone size-thumbnail wp-image-9440" src="https://mojefedora.cz/wp-content/uploads/2017/08/02-1-323x254.png" alt="" width="323" height="254" /></a>
<p><i>Obrázek 2: Reakce na stisk pravého tlačítka myši.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Stisk versus puštění tlačítka myši: <strong>on_mouse_release</strong></h2>

<p>Opakem callback funkce zavolané při stisku tlačítka myši je pochopitelně callback funkce reagující na puštění tohoto tlačítka. Obě funkce mají naprosto stejné parametry. Jen pro porovnání:</p>

<pre>
@window.event
def <strong>on_mouse_press</strong>(x, y, button, modifiers):
    pass


@window.event
def <strong>on_mouse_release</strong>(x, y, button, modifiers):
    pass
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/08/03-1.png"><img class="alignnone size-thumbnail wp-image-9441" src="https://mojefedora.cz/wp-content/uploads/2017/08/03-1-323x254.png" alt="" width="323" height="254" /></a>
<p><i>Obrázek 3: Reakce na stisk prostředního tlačítka myši.</i></p>

<p>Předchozí demonstrační příklad si tedy můžeme nepatrně upravit takovým způsobem, aby vypisoval informace jak o stisku tlačítka myši, tak i o jeho puštění. Vše zajistí jedna univerzální funkce volaná z&nbsp;obou předchozích callback funkcí:</p>

<pre>
def <strong>on_mouse_action</strong>(x, y, button, action):
    button_name = button_names.get(button, "unknown")
    text = format("Mouse %s %s button at [%d, %d]" %
                  (action, button_name, x, y))
    label.text = text
    print(text)
    on_draw()


@window.event
def <strong>on_mouse_press</strong>(x, y, button, modifiers):
    on_mouse_action(x, y, button, "pressed")


@window.event
def <strong>on_mouse_release</strong>(x, y, button, modifiers):
    on_mouse_action(x, y, button, "released")
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/08/04-1.png"><img class="alignnone size-thumbnail wp-image-9442" src="https://mojefedora.cz/wp-content/uploads/2017/08/04-1-323x254.png" alt="" width="323" height="254" /></a>
<p><i>Obrázek 4: Reakce na puštění prostředního tlačítka myši.</i></p>

<p>Úplný zdrojový text tohoto příkladu:</p>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def create_gray_label(text, x, y, anchor_x, anchor_y):
    return pyglet.text.Label(text,
                             font_size=18,
                             x=x,
                             y=y,
                             anchor_x=anchor_x,
                             anchor_y=anchor_y,
                             color=GRAY)


window = create_window(640, 480)
label = create_gray_label('Mouse:', 10, 10, 'left', 'bottom')


@window.event
def on_draw():
    window.clear()
    label.draw()


button_names = {pyglet.window.mouse.LEFT: "left",
                pyglet.window.mouse.RIGHT: "right",
                pyglet.window.mouse.MIDDLE: "middle"}


def on_mouse_action(x, y, button, action):
    button_name = button_names.get(button, "unknown")
    text = format("Mouse %s %s button at [%d, %d]" %
                  (action, button_name, x, y))
    label.text = text
    print(text)
    on_draw()


@window.event
def on_mouse_press(x, y, button, modifiers):
    on_mouse_action(x, y, button, "pressed")


@window.event
def on_mouse_release(x, y, button, modifiers):
    on_mouse_action(x, y, button, "released")


pyglet.app.run()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Sprite ovládaný myší</h2>

<p>V&nbsp;dalším demonstračním příkladu budeme s&nbsp;využitím myši po obrazovce přesunovat rastrový obrázek neboli <i>sprite</i>. Prozatím využijeme reakci na stisk tlačítka myši (tj.&nbsp;pokud nebude tlačítko zmáčknuto, bude sprite nehybný). V&nbsp;příslušné callback funkci se změní pozice spritu ve scéně:</p>

<pre>
@window.event
def <strong>on_mouse_press</strong>(x, y, button, modifiers):
    sprite.x = x
    sprite.y = y
    on_mouse_action(x, y, button, "pressed")
</pre>

<p>Navíc musíme zajistit vycentrování spritu na aktivní bod kurzoru. To se ve skutečnosti provede jednoduše přesunem &bdquo;kotvy&ldquo; svázané se spritem:</p>

<pre>
# stred spritu bude odpovidat stredu obrazku - sprite se nam bude
# mnohem lepe pozicovat
image.anchor_x = image.width / 2
image.anchor_y = image.height / 2

sprite = pyglet.sprite.Sprite(image)
# vycentrovani spritu
sprite.x = window.width / 2 - image.width / 2
sprite.y = window.height / 2 - image.height / 2
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/08/05-1.png"><img class="alignnone size-thumbnail wp-image-9443" src="https://mojefedora.cz/wp-content/uploads/2017/08/05-1-323x254.png" alt="" width="323" height="254" /></a>
<p><i>Obrázek 5: Přesun spritu pomocí myši.</i></p>

<p>Úplný zdrojový text tohoto příkladu vypadá následovně:</p>

<pre>
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    label.draw()
    sprite.draw()
</pre>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


def create_gray_label(text, x, y, anchor_x, anchor_y):
    return pyglet.text.Label(text,
                             font_size=18,
                             x=x,
                             y=y,
                             anchor_x=anchor_x,
                             anchor_y=anchor_y,
                             color=GRAY)


window = create_window(640, 480)
label = create_gray_label('Mouse:', 10, 10, 'left', 'bottom')
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    label.draw()
    sprite.draw()


button_names = {pyglet.window.mouse.LEFT: "left",
                pyglet.window.mouse.RIGHT: "right",
                pyglet.window.mouse.MIDDLE: "middle"}


def on_mouse_action(x, y, button, action):
    button_name = button_names.get(button, "unknown")
    text = format("Mouse %s %s button at [%d, %d]" %
                  (action, button_name, x, y))
    label.text = text
    print(text)
    on_draw()


@window.event
def on_mouse_press(x, y, button, modifiers):
    sprite.x = x
    sprite.y = y
    on_mouse_action(x, y, button, "pressed")


@window.event
def on_mouse_release(x, y, button, modifiers):
    on_mouse_action(x, y, button, "released")


pyglet.app.run()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Reakce na pohyb myši: <strong>on_mouse_motion</strong></h2>

<p>Další callback funkcí, kterou můžeme v&nbsp;aplikacích využít, je funkce <strong>on_mouse_motion</strong>. Jak již název této funkce naznačuje, bude volána ve chvíli, kdy se pohybuje kurzor myši. Funkci se přitom předává jak absolutní pozice kurzoru v&nbsp;okně, tak i pozice relativní, tj.&nbsp;jak daleko se kurzor posunul od posledního volání této funkce. Relativní souřadnice jsou přitom v&nbsp;mnoha aplikacích lépe použitelné. Pokud tedy budeme chtít, aby sprite sledoval kurzor myši (aniž by bylo stlačeno nějaké tlačítko myši), může pomocný kód vypadat velmi jednoduše:</p>

<pre>
@window.event
def <strong>on_mouse_motion</strong>(x, y, dx, dy):
    sprite.x = x
    sprite.y = y
</pre>

<p>Opět si ukažme úplný zdrojový text příkladu, v&nbsp;němž je callback funkce <strong>on_mouse_motion</strong> použita:</p>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_mouse_motion(x, y, dx, dy):
    sprite.x = x
    sprite.y = y


pyglet.app.run()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Tažení kurzorem myši: <strong>on_mouse_drag</strong></h2>

<p>Předchozí callback funkci pojmenované <strong>on_mouse_motion</strong> se podobá další užitečná funkce nazvaná <strong>on_mouse_drag</strong>. Tato funkce je zavolána ve chvíli, kdy uživatel pohybuje kurzorem myši a současně je stisknuto některé její tlačítko (popř.&nbsp;i další modifikátory). Tomuto chování odpovídají i parametry callback funkce, protože obsahují absolutní i relativní souřadnice kurzoru myši (viz <strong>on_mouse_motion</strong>) a taktéž informace o stisknutých tlačítkách (viz <strong>on_mouse_press</strong> a taktéž <strong>on_mouse_release</strong>):</p>

<pre>
def <strong>on_mouse_drag</strong>(x, y, dx, dy, buttons, modifiers):
    pass
</pre>

<p>Pokud budeme chtít realizovat pohyb spritu metodou <i>drag and drop</i>, bude to díky výše popsané callback funkci ve skutečnosti velmi snadné až triviální:</p>

<pre>
@window.event
def <strong>on_mouse_drag</strong>(x, y, dx, dy, buttons, modifiers):
    if buttons &amp; pyglet.window.mouse.LEFT:
        sprite.x = x
        sprite.y = y
</pre>

<p>Takto implementovanou změnu pozice spritu použijeme v&nbsp;dalším demonstračním příkladu:</p>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_mouse_drag(x, y, dx, dy, buttons, modifiers):
    if buttons &amp; pyglet.window.mouse.LEFT:
        sprite.x = x
        sprite.y = y


pyglet.app.run()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Využití informací o relativní změně kurzoru myši</h2>

<p>Pokud jste si spustili předchozí příklad, asi jste zjistili, že ve chvíli, kdy je stisknuto tlačítko myši, &bdquo;poskočí&ldquo; sprite přesně na to místo, kde se kurzor nachází. Je tomu tak z&nbsp;toho důvodu, že při stisku tlačítka myši se poprvé zavolá funkce <strong>on_mouse_drag</strong>, která nastaví pozici spritu nezávisle na jeho předchozí pozici v&nbsp;okně aplikace:</p>

<pre>
@window.event
def <strong>on_mouse_drag</strong>(x, y, dx, dy, buttons, modifiers):
    if buttons &amp; pyglet.window.mouse.LEFT:
        sprite.x = x
        sprite.y = y
</pre>

<p>Toto chování je možné relativně snadno zkorigovat a to konkrétně použitím parametrů <strong>dx</strong> a <strong>dy</strong>, které obsahují relativní posun kurzoru od posledního volání této funkce. Relativní souřadnice samozřejmě musíme přičíst k&nbsp;aktuálním souřadnicím spritu (pro jednoduchost zde používám operátor +=):</p>

<pre>
@window.event
def <strong>on_mouse_drag</strong>(x, y, dx, dy, buttons, modifiers):
    if buttons &amp; pyglet.window.mouse.LEFT:
        sprite.x <strong>+=</strong> dx
        sprite.y <strong>+=</strong> dy
</pre>

<p>Takto vylepšenou změnu pozice spritu použijeme v&nbsp;dalším demonstračním příkladu:</p>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_mouse_drag(x, y, dx, dy, buttons, modifiers):
    if buttons &amp; pyglet.window.mouse.LEFT:
        sprite.x += dx
        sprite.y += dy


pyglet.app.run()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Otočení kolečkem myši: <strong>on_mouse_scroll</strong></h2>

<p>V&nbsp;mnoha aplikacích můžeme využít i kolečko myši. Ve chvíli, kdy uživatel kolečkem otočí, zavolá se callback funkce pojmenovaná <strong>on_mouse_scroll</strong>, které se předá jak aktuální souřadnice kurzoru myši, tak i relativní hodnota otočení. Ve skutečnosti tato callback funkce podporuje dvě relativní hodnoty &ndash; x-ovou a y-ovou. Záleží na konkrétním provedení myši, jaké informace (zda vůbec nějaké) se přenesou v&nbsp;parametru <strong>scroll_x</strong>; typicky je tato hodnota využitelná u myší, které namísto standardního kolečka obsahují buď malý touchpad nebo tzv.&nbsp;scroll ball (malý trackball). Naproti tomu náklon kolečka se většinou považuje za stisk čtvrtého resp.&nbsp;pátého tlačítka myši:</p>

<pre>
@window.event
def <strong>on_mouse_scroll</strong>(x, y, scroll_x, scroll_y):
    pass
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Změna velikosti spritu pomocí kolečka myši</h2>

<p>Kolečkem myši můžeme měnit například velikost spritu. Callback funkce <strong>on_mouse_scroll</strong> může vypadat následovně (konstanta 4.0 byla zvolena na základě praktických zkušeností):</p>

<pre>
@window.event
def <strong>on_mouse_scroll</strong>(x, y, scroll_x, scroll_y):
    sprite.scale += float(scroll_y/4.0)
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/08/06-1.png"><img class="alignnone size-thumbnail wp-image-9444" src="https://mojefedora.cz/wp-content/uploads/2017/08/06-1-323x254.png" alt="" width="323" height="254" /></a>
<p><i>Obrázek 6: Změna velikosti spritu s&nbsp;využitím kolečka myši.</i></p>

<p>Ve chvíli, kdy uživatel otočí kolečkem, zavolá se callback funkce a v&nbsp;parametru <strong>scroll_y</strong> bude uloženo kladné či záporné číslo, podle toho, na kterou stranu bylo kolečkem otočeno. Tato hodnota se po mírné úpravě přičte či odečte od aktuálního měřítka (velikosti spritu). Povšimněte si, že pokud měřítka dosáhne záporné hodnoty, bude sprite středově zrcadlen:</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/08/07-1.png"><img class="alignnone size-thumbnail wp-image-9445" src="https://mojefedora.cz/wp-content/uploads/2017/08/07-1-323x254.png" alt="" width="323" height="254" /></a>
<p><i>Obrázek 7: Zrcadlení spritu s&nbsp;využitím kolečka myši.</i></p>

<p>Následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
#!/usr/bin/env python

import pyglet


GRAY = (128, 128, 128, 255)
RED = (255, 128, 128, 255)


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_mouse_drag(x, y, dx, dy, buttons, modifiers):
    if buttons &amp; pyglet.window.mouse.LEFT:
        sprite.x += dx
        sprite.y += dy


@window.event
def on_mouse_scroll(x, y, scroll_x, scroll_y):
    sprite.scale += float(scroll_y/4.0)


pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/08/08-1.png"><img class="alignnone size-thumbnail wp-image-9446" src="https://mojefedora.cz/wp-content/uploads/2017/08/08-1-323x254.png" alt="" width="323" height="254" /></a>
<p><i>Obrázek 8: Zvětšení a současně i posun spritu.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Standardní množina kurzorů</h2>

<p>V&nbsp;knihovně Pyglet je možné namísto standardního kurzoru ve tvaru šipky směřující doleva nahoru použít i kurzory dalších tvarů. Libovolný standardní (systémový) kurzor se vybere příkazem:</p>

<pre>
cursor = window.get_system_mouse_cursor(cursor_type)
</pre>

<p>Následně se tento kurzor nastaví pomocí:</p>

<pre>
window.set_mouse_cursor(cursor)
</pre>

<p>Konstanty pro standardní (systémové) kurzory jsou specifikovány ve třídě <strong>pyglet.window.Window.</strong>. Jak je z&nbsp;následujícího výpisu patrné, je možné namísto konstant použít přímo řetězce obsahující jména kurzorů:</p>

<pre>
CURSOR_CROSSHAIR = 'crosshair'
CURSOR_DEFAULT = None
CURSOR_HAND = 'hand'
CURSOR_HELP = 'help'
CURSOR_NO = 'no'
CURSOR_SIZE = 'size'
CURSOR_SIZE_DOWN = 'size_down'
CURSOR_SIZE_DOWN_LEFT = 'size_down_left'
CURSOR_SIZE_DOWN_RIGHT = 'size_down_right'
CURSOR_SIZE_LEFT = 'size_left'
CURSOR_SIZE_LEFT_RIGHT = 'size_left_right'
CURSOR_SIZE_RIGHT = 'size_right'
CURSOR_SIZE_UP = 'size_up'
CURSOR_SIZE_UP_DOWN = 'size_up_down'
CURSOR_SIZE_UP_LEFT = 'size_up_left'
CURSOR_SIZE_UP_RIGHT = 'size_up_right'
CURSOR_TEXT = 'text'
CURSOR_WAIT = 'wait'
CURSOR_WAIT_ARROW = 'wait_arrow'
</pre>

<p>V&nbsp;dalším příkladu si připravíme slovník s&nbsp;mapováním kláves <strong>F1</strong> až <strong>F10</strong> na konstanty se jmény standardních (systémových) kurzorů:</p>

<pre>
cursors = {
    pyglet.window.key.F1: pyglet.window.Window.CURSOR_DEFAULT,
    pyglet.window.key.F2: pyglet.window.Window.CURSOR_HAND,
    pyglet.window.key.F3: pyglet.window.Window.CURSOR_HELP,
    pyglet.window.key.F4: pyglet.window.Window.CURSOR_SIZE,
    pyglet.window.key.F5: pyglet.window.Window.CURSOR_SIZE_UP,
    pyglet.window.key.F6: pyglet.window.Window.CURSOR_SIZE_DOWN,
    pyglet.window.key.F7: pyglet.window.Window.CURSOR_SIZE_LEFT,
    pyglet.window.key.F8: pyglet.window.Window.CURSOR_SIZE_RIGHT,
    pyglet.window.key.F9: pyglet.window.Window.CURSOR_WAIT,
    pyglet.window.key.F10: pyglet.window.Window.CURSOR_NO
}
</pre>

<p>Následně po stisku klávesy <strong>F1</strong> až <strong>F10</strong> provedeme přepnutí kurzoru, což je ve skutečnosti velmi snadné:</p>

<pre>
@window.event
def on_key_press(symbol, modifiers):
    cursor_type = cursors.get(symbol)
    cursor = window.get_system_mouse_cursor(cursor_type)
    window.set_mouse_cursor(cursor)
</pre>

<p>Úplný zdrojový kód příkladu pro přepínání kurzorů myši vypadá takto:</p>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


window = create_window(640, 480)


@window.event
def on_draw():
    window.clear()


cursors = {
    pyglet.window.key.F1: pyglet.window.Window.CURSOR_DEFAULT,
    pyglet.window.key.F2: pyglet.window.Window.CURSOR_HAND,
    pyglet.window.key.F3: pyglet.window.Window.CURSOR_HELP,
    pyglet.window.key.F4: pyglet.window.Window.CURSOR_SIZE,
    pyglet.window.key.F5: pyglet.window.Window.CURSOR_SIZE_UP,
    pyglet.window.key.F6: pyglet.window.Window.CURSOR_SIZE_DOWN,
    pyglet.window.key.F7: pyglet.window.Window.CURSOR_SIZE_LEFT,
    pyglet.window.key.F8: pyglet.window.Window.CURSOR_SIZE_RIGHT,
    pyglet.window.key.F9: pyglet.window.Window.CURSOR_WAIT,
    pyglet.window.key.F10: pyglet.window.Window.CURSOR_NO
}


@window.event
def on_key_press(symbol, modifiers):
    cursor_type = cursors.get(symbol)
    cursor = window.get_system_mouse_cursor(cursor_type)
    window.set_mouse_cursor(cursor)


pyglet.app.run()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vlastní kurzor myši načtený z&nbsp;rastrového obrázku</h2>

<p>Zavoláním metody:</p>

<pre>
window.<strong>set_mouse_cursor</strong>(cursor)
</pre>

<p>Je možné namísto předpřipravených kurzorů použít libovolný rastrový obrázek načtený z&nbsp;externího souboru. Pro načtení obrázku a jeho konverzi do kurzoru si můžeme připravit pomocnou funkci:</p>

<pre>
def load_cursor(filename):
    image = pyglet.image.load(filename)
    return pyglet.window.ImageMouseCursor(image)
</pre>

<p>Pokud tedy budeme chtít namísto standardního kurzoru použít náš testovací glóbus, stačí nám na to pouhé dva řádky:</p>

<pre>
cursor = load_cursor("gnome-globe.png")
window.set_mouse_cursor(cursor)
</pre>

<p>V&nbsp;dalším příkladu tedy nemusíme načítat sprity ani reagovat na pohyb kurzoru; vše se totiž provede automaticky:</p>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def load_cursor(filename):
    image = pyglet.image.load(filename)
    return pyglet.window.ImageMouseCursor(image)


window = create_window(640, 480)
cursor = load_cursor("gnome-globe.png")
window.set_mouse_cursor(cursor)


@window.event
def on_draw():
    window.clear()


pyglet.app.run()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vycentrování vlastního kurzoru</h2>

<p>V&nbsp;předchozím demonstračním příkladu jsme pro načtení kurzoru použili uživatelskou funkci, která načetla rastrový obrázek a vytvořila z&nbsp;něho kurzor zavoláním <strong>pyglet.window.ImageMouseCursor</strong>:</p>

<pre>
def load_cursor(filename):
    image = pyglet.image.load(filename)
    return pyglet.window.ImageMouseCursor(image)
</pre>

<p>Tímto způsobem načtený kurzor má jednu nepříjemnou vlastnost &ndash; aktivní bod kurzoru je umístěn v&nbsp;levém horním rohu obrázku a nikoli v&nbsp;jeho středu. Tato vlastnost způsobí problémy (i když nijak velké) ve chvíli, kdy je kurzor umístěn na okraji okna aplikace. Úprava chování je ovšem ve skutečnosti velmi jednoduchá, protože funkce <strong>pyglet.window.ImageMouseCursor</strong> akceptuje další dva nepovinné parametry, přes něž se předává pozice aktivního bodu kurzoru. Pokud do těchto parametrů zadáme souřadnice [image.width/2, image.height/2], bude bod přesunut přesně doprostřed obrázku:</p>

<pre>
def load_cursor(filename):
    image = pyglet.image.load(filename)
    return pyglet.window.ImageMouseCursor(image, image.width/2, image.height/2)
</pre>

<p>Úplný zdrojový kód upraveného demonstračního příkladu je zobrazen pod tímto odstavcem:</p>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def load_cursor(filename):
    image = pyglet.image.load(filename)
    return pyglet.window.ImageMouseCursor(image, image.width/2, image.height/2)


window = create_window(640, 480)
cursor = load_cursor("gnome-globe.png")
window.set_mouse_cursor(cursor)


@window.event
def on_draw():
    window.clear()


pyglet.app.run()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Kombinace vlastního kurzoru a standardních kurzorů</h2>

<p>V&nbsp;aplikaci se samozřejmě můžeme přepínat mezi standardními kurzory a kurzorem vlastním (nebo větším množstvím vlastních kurzorů). To je ukázáno v&nbsp;dnešním předposledním demonstračním příkladu, v&nbsp;němž je možné klávesami F1 až F10 vybírat standardní kurzory a mezerníkem pak kurzor vlastní (globus):</p>

<table>
<tr><th>Klávesa</th><th>Kurzor</th></tr>
<tr><td>F1</td><td>výchozí šipka směřující vlevo nahoru</td></tr>
<tr><td>F2</td><td>kurzor s&nbsp;ikonou ruky</td></tr>
<tr><td>F3</td><td>kurzor s&nbsp;ikonou nápovědy</td></tr>
<tr><td>F4</td><td>kurzor používaný při změně velikosti objektů</td></tr>
<tr><td>F5</td><td>šipka nahoru</td></tr>
<tr><td>F6</td><td>šipka dolů</td></tr>
<tr><td>F7</td><td>šipka doleva</td></tr>
<tr><td>F8</td><td>šipka doprava</td></tr>
<tr><td>F9</td><td>čekání na dokončení operace (závisí na systému)</td></tr>
<tr><td>F10</td><td>většinou zobrazeno jako &times;</td></tr>
<tr><td>mezerník</td><td>vlastní kurzor (globus)</td></tr>
</table>

<p>Následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def load_cursor(filename):
    image = pyglet.image.load(filename)
    return pyglet.window.ImageMouseCursor(image, image.width/2, image.height/2)


window = create_window(640, 480)
custom_cursor = load_cursor("gnome-globe.png")


@window.event
def on_draw():
    window.clear()


cursors = {
    pyglet.window.key.F1: pyglet.window.Window.CURSOR_DEFAULT,
    pyglet.window.key.F2: pyglet.window.Window.CURSOR_HAND,
    pyglet.window.key.F3: pyglet.window.Window.CURSOR_HELP,
    pyglet.window.key.F4: pyglet.window.Window.CURSOR_SIZE,
    pyglet.window.key.F5: pyglet.window.Window.CURSOR_SIZE_UP,
    pyglet.window.key.F6: pyglet.window.Window.CURSOR_SIZE_DOWN,
    pyglet.window.key.F7: pyglet.window.Window.CURSOR_SIZE_LEFT,
    pyglet.window.key.F8: pyglet.window.Window.CURSOR_SIZE_RIGHT,
    pyglet.window.key.F9: pyglet.window.Window.CURSOR_WAIT,
    pyglet.window.key.F10: pyglet.window.Window.CURSOR_NO
}


@window.event
def on_key_press(symbol, modifiers):
    if symbol == pyglet.window.key.SPACE:
        cursor = custom_cursor
    else:
        cursor_type = cursors.get(symbol)
        cursor = window.get_system_mouse_cursor(cursor_type)
    window.set_mouse_cursor(cursor)


pyglet.app.run()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Exkluzivní režim</h2>

<p>Poslední důležitou vlastností knihovny Pyglet při práci s&nbsp;myší je schopnost získat takzvaný <i>exkluzivní přístup</i> ke kurzoru myši. To znamená, že kurzor nebude vyjíždět z&nbsp;okna aktivní aplikace (resp.&nbsp;přesněji řečeno vyjíždět bude, ale nebude viditelný, ostatně implicitně nebude viditelný ani v&nbsp;aktivní aplikaci). Toto chování využijeme zejména ve chvíli, kdy se používají callback funkce <strong>on_mouse_motion</strong> a <strong>on_mouse_drag</strong>. Exkluzivní režim se povoluje jednoduše, ideálně ihned po vytvoření okna:</p>

<pre>
window = create_window(640, 480)
window.<strong>set_exclusive_mouse(True)</strong>
</pre>

<p>Exkluzivní přístup použijeme v&nbsp;dnešním posledním demonstračním příkladu, v&nbsp;němž se pomocí myši posouvá <i>spritem</i> (malým rastrovým obrázkem) po ploše okna aplikace:</p>

<pre>
#!/usr/bin/env python

import pyglet


def create_window(width, height):
    return pyglet.window.Window(width=width,
                                height=height,
                                caption="Pyglet library")


def make_sprite(filename, window):
    image_stream = open("gnome-globe.png", "rb")
    image = pyglet.image.load('gnome-globe.png', file=image_stream)

    # stred spritu bude odpovidat stredu obrazku - sprite se nam bude
    # mnohem lepe pozicovat
    image.anchor_x = image.width / 2
    image.anchor_y = image.height / 2

    sprite = pyglet.sprite.Sprite(image)
    # vycentrovani spritu
    sprite.x = window.width / 2 - image.width / 2
    sprite.y = window.height / 2 - image.height / 2
    sprite.step = 5
    return sprite


window = create_window(640, 480)
window.set_exclusive_mouse(True)
sprite = make_sprite("gnome-globe.png", window)


@window.event
def on_draw():
    window.clear()
    sprite.draw()


@window.event
def on_mouse_motion(x, y, dx, dy):
    sprite.x += dx
    sprite.y += dy


pyglet.app.run()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všech dvanáct dnes popsaných demonstračních příkladů bylo uloženo do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>. Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti klonovat celý repositář. Pro jejich spuštění je samozřejmě nutné mít nainstalovanou jak knihovnu Pyglet, tak i podpůrné grafické knihovny OpenGL a GLU (což se většinou provede automaticky v&nbsp;rámci instalace balíčku s&nbsp;Pygletem, viz též <a href="https://mojefedora.cz/multimedialni-knihovna-pyglet/">úvodní díl tohoto seriálu</a>):</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>76_on_mouse_press.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/76_on_mouse_press.py">https://github.com/tisnik/presentations/blob/master/pyglet/76_on_mouse_press.py</a></td></tr>
<tr><td>77_on_mouse_press_release.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/77_on_mouse_press_release.py">https://github.com/tisnik/presentations/blob/master/pyglet/77_on_mouse_press_release.py</a></td></tr>
<tr><td>78_on_mouse_press_sprite.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/78_on_mouse_press_sprite.py">https://github.com/tisnik/presentations/blob/master/pyglet/78_on_mouse_press_sprite.py</a></td></tr>
<tr><td>79_on_mouse_motion.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/79_on_mouse_motion.py">https://github.com/tisnik/presentations/blob/master/pyglet/79_on_mouse_motion.py</a></td></tr>
<tr><td>80_on_mouse_drag.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/80_on_mouse_drag.py">https://github.com/tisnik/presentations/blob/master/pyglet/80_on_mouse_drag.py</a></td></tr>
<tr><td>81_better_on_mouse_drag.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/81_better_on_mouse_drag.py">https://github.com/tisnik/presentations/blob/master/pyglet/81_better_on_mouse_drag.py</a></td></tr>
<tr><td>82_on_mouse_scroll.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/82_on_mouse_scroll.py">https://github.com/tisnik/presentations/blob/master/pyglet/82_on_mouse_scroll.py</a></td></tr>
<tr><td>83_mouse_cursor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/83_mouse_cursor.py">https://github.com/tisnik/presentations/blob/master/pyglet/83_mouse_cursor.py</a></td></tr>
<tr><td>84_custom_mouse_cursor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/84_custom_mouse_cursor.py">https://github.com/tisnik/presentations/blob/master/pyglet/84_custom_mouse_cursor.py</a></td></tr>
<tr><td>85_custom_centered_cursor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/85_custom_centered_cursor.py">https://github.com/tisnik/presentations/blob/master/pyglet/85_custom_centered_cursor.py</a></td></tr>
<tr><td>86_custom_and_standard_cursors.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/86_custom_and_standard_cursors.py">https://github.com/tisnik/presentations/blob/master/pyglet/86_custom_and_standard_cursors.py</a></td></tr>
<tr><td>87_exclusive_mouse.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/87_exclusive_mouse.py">https://github.com/tisnik/presentations/blob/master/pyglet/87_exclusive_mouse.py</a></td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Working with the mouse<br />
<a href="http://pyglet.readthedocs.io/en/latest/programming_guide/mouse.html">http://pyglet.readthedocs.io/en/latest/programming_guide/mouse.html</a>
</li>

<li>Working with the keyboard<br />
<a href="http://pyglet.readthedocs.io/en/latest/programming_guide/keyboard.html">http://pyglet.readthedocs.io/en/latest/programming_guide/keyboard.html</a>
</li>

<li>pyglet.input<br />
<a href="https://pyglet.readthedocs.io/en/latest/modules/input.html">https://pyglet.readthedocs.io/en/latest/modules/input.html</a>
</li>

<li>Class pyglet.graphics.vertexdomain.VertexList<br />
<a href="https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexList-class.html">https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexList-class.html</a>
</li>

<li>Class pyglet.graphics.vertexdomain.VertexDomain<br />
<a href="https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexDomain-class.html">https://pythonhosted.org/pyglet/api/pyglet.graphics.vertexdomain.VertexDomain-class.html</a>
</li>

<li>Pyglet: Module Hierarchy<br />
<a href="https://pythonhosted.org/pyglet/api/module-tree.html">https://pythonhosted.org/pyglet/api/module-tree.html</a>
</li>

<li>Learning Modern OpenGL<br />
<a href="https://www.codeproject.com/articles/771225/learning-modern-opengl">https://www.codeproject.com/articles/771225/learning-modern-opengl</a>
</li>

<li>OpenGL Utility Library<br />
<a href="https://en.wikipedia.org/wiki/OpenGL_Utility_Library">https://en.wikipedia.org/wiki/OpenGL_Utility_Library</a>
</li>

<li>GLU Specification<br />
<a href="https://www.opengl.org/registry/doc/glu1.3.pdf">https://www.opengl.org/registry/doc/glu1.3.pdf</a>
</li>

<li>The Perlin noise math FAQ<br />
<a href="https://mzucker.github.io/html/perlin-noise-math-faq.html">https://mzucker.github.io/html/perlin-noise-math-faq.html</a>
</li>

<li>Perlin noise<br />
<a href="https://en.wikipedia.org/wiki/Perlin_noise">https://en.wikipedia.org/wiki/Perlin_noise</a>
</li>

<li>Perlin Noise Generator (Python recipe)<br />
<a href="http://code.activestate.com/recipes/578470-perlin-noise-generator/">http://code.activestate.com/recipes/578470-perlin-noise-generator/</a>
</li>

<li>Simplex noise demystified<br />
<a href="http://www.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf">http://www.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf</a>
</li>

<li>glTexEnv - příkaz OpenGL<br />
<a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTexEnv.xml">https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTexEnv.xml</a>
</li>

<li>glGetTexEnv - příkaz OpenGL<br />
<a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glGetTexEnv.xml">https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glGetTexEnv.xml</a>
</li>

<li>Pyglet Home Page<br />
<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home">https://bitbucket.org/pyglet/pyglet/wiki/Home</a>
</li>

<li>Pyglet: dokumentace k verzi 1.2<br />
<a href="https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/">https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/</a>
</li>

<li>Dokumentace k verzi 1.2 ve formátu PDF<br />
<a href="https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/">https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/</a>
</li>

<li>PyOpenGL<br />
<a href="http://pyopengl.sourceforge.net/">http://pyopengl.sourceforge.net/</a>
</li>

<li>The #! magic, details about the shebang/hash-bang mechanism on various Unix flavours<br />
<a href="https://www.in-ulm.de/~mascheck/various/shebang/">https://www.in-ulm.de/~mascheck/various/shebang/</a>
</li>

<li>Shebang (Unix)<br />
<a href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29">https://en.wikipedia.org/wiki/Shebang_%28Unix%29</a>
</li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Simple DirectMedia Layer (home page)<br />
<a href="http://www.libsdl.org/">http://www.libsdl.org/</a>
</li>

<li>Simple DirectMedia Layer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
</li>

<li>Seriál Grafická knihovna OpenGL<br />
<a href="https://www.root.cz/serialy/graficka-knihovna-opengl/">https://www.root.cz/serialy/graficka-knihovna-opengl/</a>
</li>

<li>Pyglet event loop<br />
<a href="http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html">http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html</a>
</li>

<li>Decorators I: Introduction to Python Decorators<br />
<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">http://www.artima.com/weblogs/viewpost.jsp?thread=240808</a>
</li>

<li>3D Programming in Python - Part 1 <br />
<a href="https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/">https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/</a>
</li>

<li>A very basic Pyglet tutorial<br />
<a href="http://www.natan.termitnjak.net/tutorials/pyglet_basic.html">http://www.natan.termitnjak.net/tutorials/pyglet_basic.html</a>
</li>

<li>Alpha blending<br />
<a href="https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending">https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

