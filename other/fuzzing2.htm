<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Úvod do problematiky fuzzingu a fuzz testování - nástroj go-fuzz</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Úvod do problematiky fuzzingu a fuzz testování - nástroj go-fuzz</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Úvod do problematiky fuzzingu a fuzz testování &ndash; nástroj go-fuzz</a></p>
<p><a href="#k02">*** 2. Instalace nástroje <i>go-fuzz</i></a></p>
<p><a href="#k03">*** 3. První demonstrační příklad</a></p>
<p><a href="#k04">*** 4. Vytvoření základního korpusu a zahájení testování (fuzzingu)</a></p>
<p><a href="#k05">*** 5. Druhý demonstrační příklad &ndash; funkce zpracovávající vstupní data</a></p>
<p><a href="#k06">*** 6. Získání podezřelých vstupních dat pro druhý příklad</a></p>
<p><a href="#k07">*** 7. Třetí demonstrační příklad s&nbsp;klasickou chybou &bdquo;&pm;1&ldquo;</a></p>
<p><a href="#k08">*** 8. Získání vzorku vstupních dat způsobujících pád</a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Úvod do problematiky fuzzingu a fuzz testování &ndash; nástroj go-fuzz</h2>

<p>Ve druhém článku o <a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/">fuzzy testování</a> se již budeme věnovat popisu způsobů použití existujících nástrojů. Prvním z&nbsp;těchto nástrojů je <a href="https://github.com/dvyukov/go-fuzz">go-fuzz</a>, jehož autorem je Dmitrij Vyukov (zaměstnanec Googlu, který pracuje na vývoji toolingu pro jazyk Go). Prezentace o <i>go-fuzz</i> (i o dalších nástrojích) je k&nbsp;dispozici na adrese <a href="https://talks.golang.org/2015/dynamic-tools.slide#1">https://talks.golang.org/2015/dynamic-tools.slide#1</a>, ovšem velmi zajímavá je i Dmitrijova prezentace dostupná na <a href="https://www.youtube.com/watch?v=a9xrxRsIbSU">Youtube</a>. <i>go-fuzz</i> je sice primárně určen pro <a href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovací jazyk Go</a>, ovšem základní myšlenky, které zde nalezneme, je možné nalézt i v&nbsp;mnoha dalších podobně koncipovaných nástrojích, s&nbsp;nimiž se seznámíme později. Základní algoritmus nástroje <i>go-fuzz</i> je možné popsat následujícím pseudokódem:</p>

<pre>
proveď instrumentace programu takovým způsobem, aby bylo možné zjišťovat pokrytí kódu
&nbsp;
for {
    zvol náhodný vstup z korpusu
    vhodným způsobem tento vstup modifikuj (mutuj)
    zavolej volaný kód a zjisti pokrytí kódu vstupními daty
    pokud se zvýšilo pokrytí popř. se nalezla nová cesta v kódu, přidej vstup do korpusu
}
</pre>

<p>Cílem základního algoritmu je tedy vytvořit takzvaný <i>korpus</i>, tedy sadu vstupních dat, která ideálně pokryje všechny možné cesty v&nbsp;programovém kódu, tedy i ty části, v&nbsp;nichž by se mělo testovat <strong>nil</strong>, záporné hodnoty, nekorektní vstupy atd. atd.</p>

<p>Následně se další algoritmus snaží o minimalizaci korpusu resp.&nbsp;o nalezení nejkratší sekvence vstupních dat, které vedou k&nbsp;chybě či k&nbsp;pádu testované aplikace.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace nástroje <i>go-fuzz</i></h2>

<p>Instalace nástroje <i>go-fuzz</i> je stejně snadná, jako instalace jakékoli jiné knihovny určené pro ekosystém programovacího jazyka Go. Postačuje nám použít příkaz:</p>

<pre>
$ <strong>go get github.com/google/gofuzz</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: samotná instalace může zabrat určitou relativně dlouhou dobu, protože v&nbsp;repositáři jsou již připraveny některé hotové korpusy.</div></p>

<p>Následně je dobré zkontrolovat, zda je dobře nastavena proměnná prostředí <strong>GOPATH</strong> a <strong>PATH</strong>. V&nbsp;prvním případě lze použít příkaz:</p>

<pre>
$ <strong>go env</strong>
</pre>

<p>V&nbsp;proměnné prostředí <strong>PATH</strong> by se měl objevit i adresář <strong>$GOPATH/bin</strong>. V&nbsp;tomto adresáři by měly být umístěny spustitelné soubory <strong>go-fuzz</strong> a <strong>go-fuzz-build</strong>, jejichž existenci a spustitelnost si můžeme snadno ověřit:</p>

<pre>
$ <strong>go-fuzz --help</strong>
&nbsp;
Usage of ./go-fuzz:
  -bin string
        test binary built with go-fuzz-build
  -connectiontimeout duration
        time limit for worker to try to connect coordinator (default 1m0s)
  -coordinator string
        coordinator mode (value is coordinator address)
  -covercounters
        use coverage hit counters (default true)
  -dumpcover
        dump coverage profile into workdir
  -dup
        collect duplicate crashers
  -func string
        function to fuzz
  -http string
        HTTP server listen address (coordinator mode only)
  -minimize duration
        time limit for input minimization (default 1m0s)
  -procs int
        parallelism level (default 4)
  -sonar
        use sonar hints (default true)
  -testoutput
        print test binary output to stdout (for debugging only)
  -timeout int
        test timeout, in seconds (default 10)
  -v int
        verbosity level
  -workdir string
        dir with persistent work data (default ".")
  -worker string
        worker mode (value is coordinator address)
</pre>

<p>a:</p>

<pre>
$ <strong>go-fuzz-build --help</strong>
&nbsp;
Usage of go-fuzz-build:
  -cpuprofile
        generate cpu profile in cpu.pprof
  -func string
        preferred entry function
  -libfuzzer
        output static archive for use with libFuzzer
  -o string
        output file
  -preserve string
        a comma-separated list of import paths not to instrument
  -race
        enable race detector
  -tags string
        a space-separated list of build tags to consider satisfied during the build
  -work
        don't remove working directory
  -x    print the commands if build fails
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu si pouze ukážeme, jaká je vlastně struktura testů a jaké funkce dokáže nástroj <i>go-fuzz</i> (bez dalších úprav) testovat. Nejprve vytvoříme nový balíček nazvaný <strong>example1</strong>, který bude obsahovat testovanou funkci pojmenovanou <strong>TestedFunction</strong>. Tato funkce akceptuje řez bajtů, tj.&nbsp;libovolně dlouhou (ale i prázdnou) sekvenci bajtů. Samotná funkce má &ndash; alespoň prozatím &ndash; prázdné tělo, takže celý balíček vypadá následovně:</p>

<pre>
package <strong>example1</strong>
&nbsp;
func <strong>TestedFunction</strong>(data []byte) {
}
</pre>

<p><div class="rs-tip-major">Poznámka: reálně testované funkce pochopitelně akceptují odlišné parametry; to je však situace, kterou je nutné zajistit v&nbsp;dále popsané funkci <strong>Fuzz</strong>, která celé testování řídí.</div></p>

<p>Následně je nutné vytvořit druhý soubor, v&nbsp;němž bude deklarována funkce nazvaná <strong>Fuzz</strong> (toto jméno je nutné dodržet). Tato funkce, která řídí celé testování, taktéž akceptuje parametr, jehož typ je řez bajtů. Důležitá je i návratová hodnota (typu <strong>int</strong>), kterou je možné řídit další kroky testování:</p>

<ul>

<li>Návratová hodnota 1 značí, že by fuzzer měl zvýšit prioritu právě použitých vstupních dat. Touto hodnotou lze označit všechny vstupy, které jsou testovanou funkcí zpracovány korektně.</li>

<li>Návratová hodnota -1 naopak značí, že právě použitá vstupní data nemají být přidána do korpusu, ať již jsou důvody jakékoli.</li>

<li>A konečně hodnota 0 znamená, že se jedná o běžná data, která lze do korpusu přidat, ale s&nbsp;nenastavenou prioritou.</li>
</ul>

<p><div class="rs-tip-major">Poznámka: žádné další návratové hodnoty by se používat neměly, jsou totiž rezervovány pro další rozšiřování funkcionality knihovny <i>go-fuzz</i>.</div></p>

<p>Velmi jednoduchá forma testovací funkce může přímo volat funkci testovanou. Jedná se o nejjednodušší možný příklad:</p>

<pre>
<i>// +build gofuzz</i>
&nbsp;
package <strong>example1</strong>
&nbsp;
func <strong>Fuzz</strong>(data []byte) int {
        TestedFunction(data)
        return 0
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vytvoření základního korpusu a zahájení testování (fuzzingu)</h2>

<p>Před vlastním spuštěním testů je nejprve nutné provést přípravu projektu, a to konkrétně zavoláním příkazu:</p>

<pre>
$ <strong>go-fuzz-build</strong>
</pre>

<p>Tento příkaz vytvoří pomocný soubor nazvaný <strong>example1-fuzz.zip</strong>. Uvnitř jsou mj.&nbsp;spustitelné soubory <strong>cover.exe</strong> a <strong>sonar.exe</strong>. I přes neobvyklé koncovky se jedná o soubory spustitelné na dané architektuře a operačním systému (tedy i na Linuxu).</p>

<p>Ve druhém kroku již můžeme spustit vlastní testy, a to příkazem:</p>

<pre>
$ <strong>go-fuzz</strong>
</pre>

<p>Po spuštění se začnou vypisovat informace o probíhajících testech:</p>

<pre>
2020/03/02 22:31:54 workers: 4, corpus: 1 (3s ago), crashers: 0, restarts: 1/0, execs: 0 (0/sec), cover: 0, uptime: 3s
2020/03/02 22:31:57 workers: 4, corpus: 1 (6s ago), crashers: 0, restarts: 1/0, execs: 0 (0/sec), cover: 2, uptime: 6s
2020/03/02 22:32:00 workers: 4, corpus: 1 (9s ago), crashers: 0, restarts: 1/3180, execs: 25446 (2827/sec), cover: 2, uptime: 9s
2020/03/02 22:32:03 workers: 4, corpus: 1 (12s ago), crashers: 0, restarts: 1/4266, execs: 51202 (4266/sec), cover: 2, uptime: 12s
2020/03/02 22:32:06 workers: 4, corpus: 1 (15s ago), crashers: 0, restarts: 1/6441, execs: 77294 (5152/sec), cover: 2, uptime: 15s
</pre>

<p>Povšimněte si, že se mj.&nbsp;vypisují i informace o čtyřech &bdquo;workerech&ldquo;, což na mém počítači odpovídá počtu jader, ve skutečnosti se však postupně spouští a opět zastavuje mnoho dalších procesů:</p>

<pre>
go-fuzz─┬─4*[go-fuzz93667065───4*[{go-fuzz93667065}]]
        ├─3*[go-fuzz94444180───4*[{go-fuzz94444180}]]
        ├─go-fuzz94444180───5*[{go-fuzz94444180}]
        └─13*[{go-fuzz}]
</pre>

<p>Dále je ve výpisu patrné, že počet takzvaných &bdquo;crasherů&ldquo; je nulový, což je pochopitelné, protože testovaná funkce je prázdná, tudíž s&nbsp;velkou pravděpodobností nezhavaruje.</p>

<p>Testy můžeme kdykoli přerušit klávesovou zkratkou <strong>Ctrl+C</strong>:</p>

<pre>
^C2020/03/02 22:32:09 shutting down...
</pre>

<p>Po ukončení testů si povšimněte, že se vytvořila trojice adresářů, přičemž adresář <strong>corpus</strong> obsahuje prázdný soubor s&nbsp;korpusem (prázdný je proto, že se nenašel problematický vstup):</p>

<pre>
├── corpus
│   └── da39a3ee5e6b4b0d3255bfef95601890afd80709
├── crashers
├── example1-fuzz.zip
├── example1.go
├── fuzz.go
└── suppressions
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Druhý demonstrační příklad &ndash; funkce zpracovávající vstupní data</h2>

<p>Druhý příklad již bude nepatrně složitější (i když stále umělý), protože testovaná funkce bude vstupní data zpracovávat. Konkrétně bude vracet pravdivostní hodnotu <strong>true</strong> za podmínky, kdy sekvence vstupních dat začíná bajty s&nbsp;hodnotami 0x03 0x02 a 0x01. Pro všechny ostatní kombinace se vrátí pravdivostní hodnota <strong>false</strong>:</p>

<pre>
package <strong>example2</strong>
&nbsp;
func <strong>TestedFunction</strong>(data []byte) bool {
        if len(data) &gt;= 3 {
                if data[0] == 3 &amp;&amp; data[1] == 2 &amp;&amp; data[2] == 1 {
                        return true
                }
        }
        return false
}
</pre>

<p>Testovací funkce pojmenovaná <strong>Fuzz</strong> bude vypadat odlišně &ndash; v&nbsp;závislosti na návratové hodnotě testované funkce se buď běžným způsobem vrátí nulová hodnota, nebo funkce zhavaruje zavoláním <strong>panic()</strong>, což je mimochodem zcela legální, protože fuzzer musí umět zareagovat i na podobné situace:</p>

<pre>
<strong>// +build gofuzz</strong>
&nbsp;
package <strong>example2</strong>
&nbsp;
func <strong>Fuzz</strong>(data []byte) int {
        if TestedFunction(data) {
                panic("wrong input")
        }
        return 0
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Získání podezřelých vstupních dat pro druhý příklad</h2>

<p>Nyní si tedy otestujme druhý příklad, a to nám již známou sekvencí příkazů:</p>

<pre>
$ <strong>go-fuzz-build</strong>
&nbsp;
$ <strong>go-fuzz</strong>
</pre>

<p>Samotný průběh testování je již odlišný, protože se již prakticky od začátku vypisuje informace o tom, že byl nalezen jeden &bdquo;crasher&ldquo;. Navíc je jiná (tedy nenulová) i velikost korpusu:</p>

<pre>
2020/03/02 22:29:14 workers: 4, corpus: 4 (2s ago), crashers: 1, restarts: 1/0, execs: 0 (0/sec), cover: 0, uptime: 3s
2020/03/02 22:29:17 workers: 4, corpus: 4 (5s ago), crashers: 1, restarts: 1/0, execs: 0 (0/sec), cover: 9, uptime: 6s
2020/03/02 22:29:20 workers: 4, corpus: 4 (8s ago), crashers: 1, restarts: 1/288, execs: 23371 (2596/sec), cover: 9, uptime: 9s
2020/03/02 22:29:23 workers: 4, corpus: 4 (11s ago), crashers: 1, restarts: 1/280, execs: 47101 (3925/sec), cover: 9, uptime: 12s
2020/03/02 22:29:26 workers: 4, corpus: 4 (14s ago), crashers: 1, restarts: 1/279, execs: 69568 (4638/sec), cover: 9, uptime: 15s
2020/03/02 22:29:29 workers: 4, corpus: 4 (17s ago), crashers: 1, restarts: 1/300, execs: 93328 (5185/sec), cover: 9, uptime: 18s
</pre>

<p>Testování lze po chvíli přerušit:</p>

<pre>
^C2020/03/02 22:29:30 shutting down...
</pre>

<p>V&nbsp;adresáři s&nbsp;projektem se opět vytvořilo několik podadresářů, ty již však nejsou prázdné:</p>

<pre>
├── corpus
│   ├── 685ad06a33b3db3330ad4b19cf95fdd6acf3eceb-1
│   ├── 888693d736b5508655198129dc0ec8cf6d0e7757-2
│   ├── a6cd288e027237b261f24b1d140960ec48b6d63b-1
│   └── da39a3ee5e6b4b0d3255bfef95601890afd80709
├── crashers
│   ├── 134aead1d2020adfb1d2352b1dffb2afd8fe0dc5
│   ├── 134aead1d2020adfb1d2352b1dffb2afd8fe0dc5.output
│   └── 134aead1d2020adfb1d2352b1dffb2afd8fe0dc5.quoted
├── example2-fuzz.zip
├── example2.go
├── fuzz.go
└── suppressions
    └── a5d1237652e2eab23ab4f89b64348a150d2d77fa
</pre>

<p>Z&nbsp;hlediska programátora testujícího svoji aplikaci (resp.&nbsp;prozatím jedinou funkci z&nbsp;této aplikace) je nejdůležitější obsah podadresáře <strong>crashers</strong>, protože ten obsahuje ta vstupní data, která způsobila chybu nebo dokonce pád testované funkce/aplikace/programu.</p>

<p>První z&nbsp;těchto souborů obsahuje binární podobu vstupních dat:</p>

<pre>
$ <strong>hd 134aead1d2020adfb1d2352b1dffb2afd8fe0dc5 </strong>
&nbsp;
00000000  03 02 01                                          |...|
00000003
</pre>

<p>Můžeme zde vidět, že se skutečně jedná o naši sekvenci tří bajtů.</p>

<p>V&nbsp;mnoha případech je vstup chápán jako text, což je reflektováno třetím souborem, který obsahuje vstupní data, ovšem v&nbsp;řetězcové podobě:</p>

<pre>
$ <strong>cat 134aead1d2020adfb1d2352b1dffb2afd8fe0dc5.quoted </strong>
&nbsp;
        "\x03\x02\x01"

</pre>

<p>A konečně v&nbsp;posledním souboru jsou uloženy podrobnější informace o tom, jak vypadal pád testované aplikace (v&nbsp;našem případě jediné funkce):</p>

<pre>
$ <strong>cat 134aead1d2020adfb1d2352b1dffb2afd8fe0dc5.output </strong>
&nbsp;
panic: wrong input
&nbsp;
goroutine 1 [running]:
_/home/tester/temp/out/fuzz/example2.Fuzz(0x7f182f247000, 0x3, 0x3, 0x3)
        /home/tester/temp/out/fuzz/example2/fuzz.go:7 +0xdc
go-fuzz-dep.Main(0xc000036780, 0x1, 0x1)
        /tmp/ramdisk/go-fuzz-build514602391/goroot/src/go-fuzz-dep/main.go:36 +0x1ad
main.main()
        /tmp/ramdisk/go-fuzz-build514602391/gopath/src/_/home/tester/temp/out/fuzz/example2/go.fuzz.main/main.go:15 +0x52
exit status 2
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Třetí demonstrační příklad s&nbsp;klasickou chybou &bdquo;&pm;1&ldquo;</h2>

<p>Třetí testovaná funkce vypadá zdánlivě nevinně &ndash; pokud se ve vstupní sekvenci nachází bajty s&nbsp;obsahem 'r', 'o', 'o', 't', vypíše se zpráva. Ovšem ve skutečnosti je funkce naprogramována špatně &ndash; obsahuje klasickou &bdquo;chybu &pm;1&ldquo;, protože délka by měla být větší nebo rovna čtyřem:</p>

<pre>
package <strong>example3</strong>
&nbsp;
import "fmt"
&nbsp;
func <strong>TestedFunction</strong>(data []byte) {
        if len(data) &gt;= 3 {
                if data[0] == 'r' &amp;&amp; data[1] == 'o' &amp;&amp; data[2] == 'o' &amp;&amp; data[3] == 't' {
                        fmt.Println("Spravny vstup")
                }
        }
}
</pre>

<p>Tuto funkci budeme testovat stejně, jako funkci předchozí:</p>

<pre>
<i>// +build gofuzz</i>
&nbsp;
package <strong>example3</strong>
&nbsp;
func <strong>Fuzz</strong>(data []byte) int {
        TestedFunction(data)
        return 0
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Získání vzorku vstupních dat způsobujících pád</h2>

<pre>
$ <strong>go-fuzz</strong>
&nbsp;
2020/03/03 08:27:15 workers: 4, corpus: 6 (3s ago), crashers: 1, restarts: 1/0, execs: 0 (0/sec), cover: 0, uptime: 3s
2020/03/03 08:27:18 workers: 4, corpus: 6 (6s ago), crashers: 1, restarts: 1/0, execs: 0 (0/sec), cover: 112, uptime: 6s
2020/03/03 08:27:21 workers: 4, corpus: 6 (9s ago), crashers: 1, restarts: 1/532, execs: 22345 (2483/sec), cover: 112, uptime: 9s
2020/03/03 08:27:24 workers: 4, corpus: 6 (12s ago), crashers: 1, restarts: 1/359, execs: 44203 (3683/sec), cover: 112, uptime: 12s
2020/03/03 08:27:27 workers: 4, corpus: 6 (15s ago), crashers: 1, restarts: 1/326, execs: 65232 (4349/sec), cover: 112, uptime: 15s
2020/03/03 08:27:30 workers: 4, corpus: 6 (18s ago), crashers: 1, restarts: 1/306, execs: 86878 (4826/sec), cover: 112, uptime: 18s
2020/03/03 08:27:33 workers: 4, corpus: 6 (21s ago), crashers: 1, restarts: 1/298, execs: 107631 (5125/sec), cover: 112
...
...
...
^C2020/03/03 08:27:48 shutting down...
</pre>

$ <strong>ls -1 crashers/</strong>
&nbsp;
dc76e9f0c0006e8f919e0c515c66dbba3982f785
dc76e9f0c0006e8f919e0c515c66dbba3982f785.output
dc76e9f0c0006e8f919e0c515c66dbba3982f785.quoted

$ cat crashers/dc76e9f0c0006e8f919e0c515c66dbba3982f785
roo

<pre>
$ <strong>cat crashers/dc76e9f0c0006e8f919e0c515c66dbba3982f785.output </strong>
&nbsp;
panic: runtime error: index out of range

goroutine 1 [running]:
_/home/tester/temp/out/fuzz/example4.TestedFunction.func3(...)
        /home/tester/temp/out/fuzz/example4/example3.go:7
_/home/tester/temp/out/fuzz/example4.TestedFunction(0x7f29a71b7000, 0x3, 0x3)
        /home/tester/temp/out/fuzz/example4/example3.go:7 +0x167
_/home/tester/temp/out/fuzz/example4.Fuzz(0x7f29a71b7000, 0x3, 0x3, 0x3)
        /home/tester/temp/out/fuzz/example4/fuzz.go:6 +0x57
go-fuzz-dep.Main(0xc000096f80, 0x1, 0x1)
        /tmp/ramdisk/go-fuzz-build367173585/goroot/src/go-fuzz-dep/main.go:36 +0x1ad
main.main()
        /tmp/ramdisk/go-fuzz-build367173585/gopath/src/_/home/tester/temp/out/fuzz/example4/go.fuzz.main/main.go:15 +0x52
exit status 2
</pre>

<p></p>

<pre>
$ <strong>cat crashers/dc76e9f0c0006e8f919e0c515c66dbba3982f785.quoted </strong>
&nbsp;
        "roo"
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a href=""></a>. V&nbsp;případě, že
nebudete chtít klonovat celý repositář (ten je ovšem &ndash; alespoň prozatím
&ndash; velmi malý, dnes má přibližně šest až sedm megabajtů), můžete namísto
toho použít odkazy na jednotlivé demonstrační příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href=""></a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href=""></a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href=""></a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href=""></a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href=""></a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href=""></a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Fuzzing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fuzzing">https://en.wikipedia.org/wiki/Fuzzing</a>
</li>

<li>american fuzzy lop<br />
<a href="http://lcamtuf.coredump.cx/afl/">http://lcamtuf.coredump.cx/afl/</a>
</li>

<li>Fuzzing: the new unit testing<br />
<a href="https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1">https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1</a>
</li>

<li>AFL &ndash; QuickStartGuide.txt<br />
<a href="https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt">https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt</a>
</li>

<li>Introduction to Fuzzing in Python with AFL<br />
<a href="https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/">https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/</a>
</li>

<li>Writing a Simple Fuzzer in Python<br />
<a href="https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/">https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/</a>
</li>

<li>How to Fuzz Go Code with go-fuzz (Continuously)<br />
<a href="https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/">https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/</a>
</li>

<li>Golang Fuzzing: A go-fuzz Tutorial and Example<br />
<a href="http://networkbit.ch/golang-fuzzing/">http://networkbit.ch/golang-fuzzing/</a>
</li>

<li>Fuzzing Python Modules<br />
<a href="https://stackoverflow.com/questions/20749026/fuzzing-python-modules">https://stackoverflow.com/questions/20749026/fuzzing-python-modules</a>
</li>

<li>0x3 Python Tutorial: Fuzzer<br />
<a href="http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/">http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/</a>
</li>

<li>fuzzing na PyPi<br />
<a href="https://pypi.org/project/fuzzing/">https://pypi.org/project/fuzzing/</a>
</li>

<li>Fuzzing 0.3.2 documentation<br />
<a href="https://fuzzing.readthedocs.io/en/latest/">https://fuzzing.readthedocs.io/en/latest/</a>
</li>

<li>Randomized testing for Go<br />
<a href="https://github.com/dvyukov/go-fuzz">https://github.com/dvyukov/go-fuzz</a>
</li>

<li>HTTP/2 fuzzer written in Golang<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Ffuf (Fuzz Faster U Fool) – An Open Source Fast Web Fuzzing Tool<br />
<a href="https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html">https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html</a>
</li>

<li>Continuous Fuzzing Made Simple<br />
<a href="https://fuzzit.dev/">https://fuzzit.dev/</a>
</li>

<li>Halt and Catch Fire<br />
<a href="https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86">https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86</a>
</li>

<li>Pentium F00F bug<br />
<a href="https://en.wikipedia.org/wiki/Pentium_F00F_bug">https://en.wikipedia.org/wiki/Pentium_F00F_bug</a>
</li>

<li>Random testing<br />
<a href="https://en.wikipedia.org/wiki/Random_testing">https://en.wikipedia.org/wiki/Random_testing</a>
</li>

<li>Monkey testing<br />
<a href="https://en.wikipedia.org/wiki/Monkey_testing">https://en.wikipedia.org/wiki/Monkey_testing</a>
</li>

<li>Fuzzing for Software Security Testing and Quality Assurance, Second Edition<br />
<a href="https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false">https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false</a>
</li>

<li>Z80 Undocumented Instructions<br />
<a href="http://www.z80.info/z80undoc.htm">http://www.z80.info/z80undoc.htm</a>
</li>

<li>The 6502/65C02/65C816 Instruction Set Decoded<br />
<a href="http://nparker.llx.com/a2/opcodes.html">http://nparker.llx.com/a2/opcodes.html</a>
</li>

<li>libFuzzer – a library for coverage-guided fuzz testing<br />
<a href="https://llvm.org/docs/LibFuzzer.html">https://llvm.org/docs/LibFuzzer.html</a>
</li>

<li>fuzzy-swagger na PyPi<br />
<a href="https://pypi.org/project/fuzzy-swagger/">https://pypi.org/project/fuzzy-swagger/</a>
</li>

<li>fuzzy-swagger na GitHubu<br />
<a href="https://github.com/namuan/fuzzy-swagger">https://github.com/namuan/fuzzy-swagger</a>
</li>

<li>Fuzz testing tools for Python<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools">https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools</a>
</li>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go</a>
</li>

<li>gofuzz: a library for populating go objects with random values<br />
<a href="https://github.com/google/gofuzz">https://github.com/google/gofuzz</a>
</li>

<li>tavor: A generic fuzzing and delta-debugging framework<br />
<a href="https://github.com/zimmski/tavor">https://github.com/zimmski/tavor</a>
</li>

<li>hypothesis na GitHubu<br />
<a href="https://github.com/HypothesisWorks/hypothesis">https://github.com/HypothesisWorks/hypothesis</a>
</li>

<li>Hypothesis: Test faster, fix more<br />
<a href="https://hypothesis.works/">https://hypothesis.works/</a>
</li>

<li>Hypothesis<br />
<a href="https://hypothesis.works/articles/intro/">https://hypothesis.works/articles/intro/</a>
</li>

<li>What is Hypothesis?<br />
<a href="https://hypothesis.works/articles/what-is-hypothesis/">https://hypothesis.works/articles/what-is-hypothesis/</a>
</li>

<li>Databáze CVE<br />
<a href="https://www.cvedetails.com/">https://www.cvedetails.com/</a>
</li>

<li>Fuzz test Python modules with libFuzzer<br />
<a href="https://github.com/eerimoq/pyfuzzer">https://github.com/eerimoq/pyfuzzer</a>
</li>

<li>Taof - The art of fuzzing<br />
<a href="https://sourceforge.net/projects/taof/">https://sourceforge.net/projects/taof/</a>
</li>

<li>JQF + Zest: Coverage-guided semantic fuzzing for Java<br />
<a href="https://github.com/rohanpadhye/jqf">https://github.com/rohanpadhye/jqf</a>
</li>

<li>http2fuzz<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Demystifying hypothesis testing with simple Python examples<br />
<a href="https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294">https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

