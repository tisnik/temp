<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Časté způsoby reprezentace numerických hodnot ve formátu pevné a plovoucí řádové (binární) tečky</a></p>
<p><a href="#k03">*** 3. Uložení numerických hodnot ve formátu pevné řádové binární tečky</a></p>
<p><a href="#k04">*** 4. Uložení čísel ve formátu plovoucí řádové (binární) tečky</a></p>
<p><a href="#k05">*** 5. Formát plovoucí řádové binární tečky a norma IEEE 754</a></p>
<p><a href="#k06">*** 6. Přednosti a zápory formátu plovoucí řádové tečky</a></p>
<p><a href="#k07">*** 7. Podpora v&nbsp;hardware</a></p>
<p><a href="#k08">*** 8. Klasické matematické koprocesory</a></p>
<p><a href="#k09">*** 9. Digitální signálové procesory</a></p>
<p><a href="#k10">*** 10. Grafické akcelerátory a GPU</a></p>
<p><a href="#k11">*** 11. Na scénu přichází formát <strong>bfloat16</strong></a></p>
<p><a href="#k12">*** 12. Vztah mezi formáty <strong>single</strong>, <strong>half</strong> a <strong>bfloat16</strong></a></p>
<p><a href="#k13">*** 13. Přednosti a zápory formátu <strong>bfloat16</strong></a></p>
<p><a href="#k14">*** 14. Podpora formátu <strong>bfloat16</strong></a></p>
<p><a href="#k15">*** 15. Programovací jazyk Julia</a></p>
<p><a href="#k16">*** 16. Python a knihovna NumPy</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Rozšíření do dalších programovacích jazyků</a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>V&nbsp;anglické literatuře se zmíněná forma reprezentace číselných hodnot označuje zkratkou <strong>FX</strong> nebo <strong>FXP</strong> (<i><strong>f</strong>i<strong>x</strong>ed <strong>p</strong>oint</i>), zatímco dnes častěji používaná reprezentace v&nbsp;systému plovoucí řádové tečky se všeobecně označuje zkratkou <strong>FP</strong> (<i>floating point</i>). V&nbsp;jednom článku jsem dokonce místo zkratky <strong>FX</strong> viděl i zkratku <strong>XP</strong> (<i>fi<strong>x</strong>ed <strong>p</strong>oint</i>), ale to bylo před mnoha lety, v&nbsp;době dnes již muzeálních Windows 95 :-). Nejprve si vysvětlíme princip obou metod použitých pro ukládání podmnožiny racionálních čísel a posléze si také řekneme, jaké výhody a nevýhody jednotlivé principy přináší v&nbsp;každodenní programátorské praxi a ve kterých situacích je vhodnější použít pevnou řádovou čárku. V&nbsp;dalším textu budeme formát pevné binární řádové tečky zkracovat na <strong>FX formát</strong> a formát používající plovoucí řádovou tečku budeme zapisovat jako <strong>FP formát</strong>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Časté způsoby reprezentace numerických hodnot ve formátu pevné a plovoucí řádové (binární) tečky</h2>

<p>Při ukládání číselných hodnot do operační paměti počítače záhy narazíme na některé problémy, z&nbsp;nichž některé souvisí s&nbsp;konečným počtem bitů, které pro uložení dané hodnoty "obětujeme" a další vycházejí ze způsobu zpracování hodnot mikroprocesorem či matematickým koprocesorem. V&nbsp;konečném počtu bitů je totiž možné uložit pouze <strong>konečné</strong> množství různých hodnot a je plně v&nbsp;rukou programátora, jak efektivně daný počet bitů využije či naopak promrhá ukládáním nepodstatných informací. Poměrně často se totiž stává, že i program využívající dvojitou či dokonce rozšířenou přesnost čísel při <strong>FP</strong> operacích (tj.&nbsp;datové typy <i>double</i> a <i>extended/temporary</i>) dává nesprávné výsledky dané nepochopením principu práce <strong>FP</strong> aritmetiky a přitom je možné se přesnějších výsledků dobrat i při použití pouhých 32 bitů, ale s&nbsp;pečlivě vyváženými aritmetickými a bitovými operacemi.</p>

<p>Na druhou stranu nejsou dnes používané mikroprocesory tak univerzálními zařízeními, jak by se na první pohled mohlo zdát. Mikroprocesory jsou totiž (většinou) navrženy tak, aby účinně, například v&nbsp;rámci jedné operace či instrukce, zpracovávaly pouze konstantní počet bitů. Příkladem mohou být dnes velmi rozšířené procesory řady x86, které jsou velmi dobré při práci s&nbsp;32 bitovými hodnotami, ale při požadavku na aritmetické výpočty probíhající na (řekněme) 21 bitech se veškerá jejich efektivita ztrácí a procesor se širokými vnitřními sběrnicemi, matematickým koprocesorem atd. se potýká s&nbsp;prohazováním jednotlivých bitů. Mnohem lepší situace nastane v&nbsp;případě, že se nějaká operace implementuje na programovatelném poli FPGA &ndash; zde je možné vytvořit obvody provádějící matematické a logické operace s&nbsp;libovolným počtem bitů, čímž se oproti univerzálním řešením (např.&nbsp;konstantní bitová šířka sběrnice a/nebo registrů) ušetří mnoho plochy těchto velmi zajímavých obvodů (FPGA mohou mimochodem znamenat i velkou šanci pro hnutí open source &ndash; pomocí nich by mohlo vznikat, a někde už vzniká <strong>open hardware</strong>, které by mohlo odstranit závislost na "uzavřených" síťových a grafických kartách apod.).</p>

<p>Vraťme se však ke způsobům reprezentace číselných hodnot v&nbsp;operační paměti. Nejprve předpokládejme, že pro reprezentaci vlastností určitého objektu či stavu z&nbsp;reálného světa použijeme <i>N</i> binárních číslic (bitů), tj.&nbsp;základních jednotek informace, která může nabývat pouze jedné ze dvou povolených hodnot (ty se značí například symboly <i>yes/no</i> nebo <i>true</i>/<i>false</i>, ale my se budeme spíše držet označení <i>0</i> a <i>1</i>). Pomocí této uspořádané <i>N</i>-tice je možné popsat celkem:</p>

<p><i>2<sub>0</sub>&times;2<sub>1</sub>&times;2<sub>2</sub> ... 2<sub>N-1</sub>=2<sup>N</sup></i></p>

<p>jednoznačných, tj.&nbsp;navzájem odlišných, stavů. Množina těchto stavů může reprezentovat prakticky jakýkoliv abstraktní či reálný objekt. Přitom si musíme uvědomit, že u této množiny není implicitně řečeno ani myšleno, že se jedná například o celá kladná čísla, to je pouze jedna z&nbsp;mnoha možných interpretací zvolené <i>N</i>-tice (my programátoři máme tendenci považovat celá kladná čísla za přirozenou interpretaci bitové <i>N</i>-tice, to však vychází pouze z&nbsp;našeho pohledu na svět a z&nbsp;našich zkušeností).  Reprezentaci momentálního stavu abstraktního či reálného objektu si můžeme představit jako zobrazení z&nbsp;množiny binárních stavů na elementy vzorové (a obecně neuspořádané) množiny. Nejčastěji používanými zobrazeními jsou zobrazení množiny binárních stavů na interval celých kladných čísel (<i>Unsigned Integers</i>), popřípadě na interval celých čísel (<i>Signed Integers</i>).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Uložení numerických hodnot ve formátu pevné řádové binární tečky</h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

Format 	Significand 	Exponent
bfloat16 	8 bits 	8 bits
fp16 	11 bits 	5 bits
fp32 	24 bits 	8 bits

 	u 	xmins 	xmin 	xmax
bfloat16 	3.91e-03 	(*) 	1.18e-38 	3.39e+38
fp16 	4.88e-04 	5.96e-08 	6.10e-05 	6.55e+04
fp32 	5.96e-08 	1.40e-45 	1.18e-38 	3.40e+38


<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. Julia</h2>

primitive type Float16 <: AbstractFloat 16 end
primitive type Float32 <: AbstractFloat 32 end
primitive type Float64 <: AbstractFloat 64 end

primitive type Bool <: Integer 8 end
primitive type Char <: AbstractChar 32 end

primitive type Int8    <: Signed   8 end
primitive type UInt8   <: Unsigned 8 end
primitive type Int16   <: Signed   16 end
primitive type UInt16  <: Unsigned 16 end
primitive type Int32   <: Signed   32 end
primitive type UInt32  <: Unsigned 32 end
primitive type Int64   <: Signed   64 end
primitive type UInt64  <: Unsigned 64 end
primitive type Int128  <: Signed   128 end
primitive type UInt128 <: Unsigned 128 end


<p><a name="k07"></a></p>
<h2 id="k07">7. Numpy</h2>

<table>
<tr><th>Formát</th><th>Popis</th><th>Rozsah</th></tr>
<tr><td>bool</td><td>uloženo po bajtech</td><td> True/False</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>int8</td><td>celočíselný se znaménkem</td><td>-128..127</td></tr>
<tr><td>int16</td><td>celočíselný se znaménkem</td><td>-32768..32767</td></tr>
<tr><td>int32</td><td>celočíselný se znaménkem</td><td>-2147483648..2147483647</td></tr>
<tr><td>int64</td><td>celočíselný se znaménkem</td><td>-9223372036854775808..9223372036854775807</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>uint8</td><td>celočíselný bez znaménka</td><td> 0..255</td></tr>
<tr><td>uint16</td><td>celočíselný bez znaménka</td><td> 0..65535</td></tr>
<tr><td>uint32</td><td>celočíselný bez znaménka</td><td> 0..4294967295</td></tr>
<tr><td>uint64</td><td>celočíselný bez znaménka</td><td> 0..18446744073709551615</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>float16</td><td>plovoucí řádová čárka</td><td> poloviční přesnost (half)</td></tr>
<tr><td>float32</td><td>plovoucí řádová čárka</td><td> jednoduchá přesnost (single)</td></tr>
<tr><td>float64</td><td>plovoucí řádová čárka</td><td> dvojitá přesnost (double)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>complex64 </td><td>komplexní číslo (dvojice)</td><td> 2×float32</td></tr>
<tr><td>complex128</td><td>komplexní číslo (dvojice)</td><td> 2×float64</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Klasické matematické koprocesory</h2>

<table>
<tr><th>Dekadicky</th><th>Double (hexa)</th><th>Single (hexa)</th><th>Half (hexa)</th><th>Bfloat16 (hexa)</th></tr>
<tr><td></td><td></td><td></td><td></td><td></td></tr>
</table>
1000
0x408f400000000000
0x447a0000
0x63d0
0x447a

0.1
0x3fb999999999999a
0x3dcccccd
0x2e66
0x3dcd


<p><a name="k09"></a></p>
<h2 id="k09">9. Digitální signálové procesory</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. Grafické akcelerátory a GPU</h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Na scénu přichází formát <strong>bfloat16</strong></h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vztah mezi formáty <strong>single</strong>, <strong>half</strong> a <strong>bfloat16</strong></h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Přednosti a zápory formátu <strong>bfloat16</strong></h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Podpora formátu <strong>bfloat16</strong></h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Programovací jazyk Julia</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Python a knihovna NumPy</h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Rozšíření do dalších programovacích jazyků</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>bfloat16 - Hardware Numerics Definition<br />
<a href="https://software.intel.com/en-us/download/bfloat16-hardware-numerics-definition">https://software.intel.com/en-us/download/bfloat16-hardware-numerics-definition</a>
</li>

<li>Intel Prepares To Graft Google’s Bfloat16 Onto Processors<br />
<a href="https://www.nextplatform.com/2019/07/15/intel-prepares-to-graft-googles-bfloat16-onto-processors/">https://www.nextplatform.com/2019/07/15/intel-prepares-to-graft-googles-bfloat16-onto-processors/</a>
</li>

<li>A Study of BFLOAT16 for Deep Learning Training<br />
<a href="https://arxiv.org/pdf/1905.12322.pdf">https://arxiv.org/pdf/1905.12322.pdf</a>
</li>

<li>BFloat16s.jl<br />
<a href="https://github.com/JuliaComputing/BFloat16s.jl">https://github.com/JuliaComputing/BFloat16s.jl</a>
</li>

<li>Half Precision Arithmetic: fp16 Versus bfloat16<br />
<a href="https://nhigham.com/2018/12/03/half-precision-arithmetic-fp16-versus-bfloat16/">https://nhigham.com/2018/12/03/half-precision-arithmetic-fp16-versus-bfloat16/</a>
</li>

<li>bfloat16 floating-point format (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Bfloat16_floating-point_format">https://en.wikipedia.org/wiki/Bfloat16_floating-point_format</a>
</li>

<li>Unum (number format)<br />
<a href="https://en.wikipedia.org/wiki/Unum_(number_format)#Posit">https://en.wikipedia.org/wiki/Unum_(number_format)#Posit</a>
</li>

<li>Performance Benefits of Half Precision Floats<br />
<a href="https://software.intel.com/en-us/articles/performance-benefits-of-half-precision-floats">https://software.intel.com/en-us/articles/performance-benefits-of-half-precision-floats</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/</a>
</li>

<li>IEEE-754 Floating-Point Conversion<br />
<a href="http://babbage.cs.qc.cuny.edu/IEEE-754.old/32bit.html">http://babbage.cs.qc.cuny.edu/IEEE-754.old/32bit.html</a>
</li>

<li>Small Float Formats<br />
<a href="https://www.khronos.org/opengl/wiki/Small_Float_Formats">https://www.khronos.org/opengl/wiki/Small_Float_Formats</a>
</li>

<li>Binary-coded decimal<br />
<a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">https://en.wikipedia.org/wiki/Binary-coded_decimal</a>
</li>

<li>Chen–Ho encoding<br />
<a href="https://en.wikipedia.org/wiki/Chen%E2%80%93Ho_encoding">https://en.wikipedia.org/wiki/Chen%E2%80%93Ho_encoding</a>
</li>

<li>Densely packed decimal<br />
<a href="https://en.wikipedia.org/wiki/Densely_packed_decimal">https://en.wikipedia.org/wiki/Densely_packed_decimal</a>
</li>

<li>A Summary of Chen-Ho Decimal Data encoding<br />
<a href="http://speleotrove.com/decimal/chen-ho.html">http://speleotrove.com/decimal/chen-ho.html</a>
</li>

<li>Art of Assembly language programming: The 80x87 Floating Point Coprocessors<br />
<a href="https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-3.html">https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-3.html</a>
</li>

<li>Art of Assembly language programming: The FPU Instruction Set<br />
<a href="https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-4.html">https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-4.html</a>
</li>

<li>INTEL 80387 PROGRAMMER'S REFERENCE MANUAL<br />
<a href="http://www.ragestorm.net/downloads/387intel.txt">http://www.ragestorm.net/downloads/387intel.txt</a>
</li>

<li>Floating-Point Formats<br />
<a href="http://www.quadibloc.com/comp/cp0201.htm">http://www.quadibloc.com/comp/cp0201.htm</a>
</li>

<li>Data types (SciPy)<br />
<a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html">https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html</a>
</li>

<li>New 16-bit floating point type &ndash; NumPy 1.6.0 Release Notes<br />
<a href="https://github.com/numpy/numpy/blob/7cfec2403486456b52b525eccf7541e1562d9ab3/doc/release/1.6.0-notes.rst#new-16-bit-floating-point-type">https://github.com/numpy/numpy/blob/7cfec2403486456b52b525eccf7541e1562d9ab3/doc/release/1.6.0-notes.rst#new-16-bit-floating-point-type</a>
</li>

<li>RFC pro Rust<br />
<a href="https://github.com/joshtriplett/rfcs/blob/f16b/text/0000-f16b.md">https://github.com/joshtriplett/rfcs/blob/f16b/text/0000-f16b.md</a>
</li>

<li>IEEE-754 Floating Point Converter<br />
<a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a>
</li>

<li>Mediump float calculator<br />
<a href="https://oletus.github.io/float16-simulator.js/">https://oletus.github.io/float16-simulator.js/</a>
</li>

<li>IEEE 754 Calculator<br />
<a href="http://weitz.de/ieee/">http://weitz.de/ieee/</a>
</li>

<li>BFloat16 (Swift for TensorFlow)<br />
<a href="https://www.tensorflow.org/swift/api_docs/Structs/BFloat16">https://www.tensorflow.org/swift/api_docs/Structs/BFloat16</a>
</li>

<li>Using bfloat16 with TensorFlow models<br />
<a href="https://cloud.google.com/tpu/docs/bfloat16">https://cloud.google.com/tpu/docs/bfloat16</a>
</li>

<li>What is tf.bfloat16 “truncated 16-bit floating point”?<br />
<a href="https://stackoverflow.com/questions/44873802/what-is-tf-bfloat16-truncated-16-bit-floating-point">https://stackoverflow.com/questions/44873802/what-is-tf-bfloat16-truncated-16-bit-floating-point</a>
</li>

<li>BFloat16 processing for Neural Networks on Armv8-A<br />
<a href="https://community.arm.com/developer/ip-products/processors/b/ml-ip-blog/posts/bfloat16-processing-for-neural-networks-on-armv8_2d00_a">https://community.arm.com/developer/ip-products/processors/b/ml-ip-blog/posts/bfloat16-processing-for-neural-networks-on-armv8_2d00_a</a>
</li>

<li>Mixed precision training<br />
<a href="https://arxiv.org/pdf/1710.03740.pdf">https://arxiv.org/pdf/1710.03740.pdf</a>
</li>

<li>[R] Mixed Precision Training<br />
<a href="https://www.reddit.com/r/MachineLearning/comments/75phd2/r_mixed_precision_training/">https://www.reddit.com/r/MachineLearning/comments/75phd2/r_mixed_precision_training/</a>
</li>

<li>Floating Point Numbers<br />
<a href="https://floating-point-gui.de/formats/fp/">https://floating-point-gui.de/formats/fp/</a>
</li>

<li>Float exposed<br />
<a href="https://float.exposed/0x40490000">https://float.exposed/0x40490000</a>
</li>

<li>Float Toy<br />
<a href="http://evanw.github.io/float-toy/">http://evanw.github.io/float-toy/</a>
</li>

<li>IEEE-754 visualization<br />
<a href="https://bartaz.github.io/ieee754-visualization/">https://bartaz.github.io/ieee754-visualization/</a>
</li>

<li>Advantages Of BFloat16 For AI Inference<br />
<a href="https://semiengineering.com/advantages-of-bfloat16-for-ai-inference/">https://semiengineering.com/advantages-of-bfloat16-for-ai-inference/</a>
</li>

<li>ARMv8-A bude podporovat nový formát čísel BFloat16<br />
<a href="https://www.root.cz/zpravicky/armv8-a-bude-podporovat-novy-format-cisle-bfloat16/">https://www.root.cz/zpravicky/armv8-a-bude-podporovat-novy-format-cisle-bfloat16/</a>
</li>

<li>Intel oznámil nový formát BFloat16 pro budoucí procesory<br />
<a href="https://www.root.cz/zpravicky/intel-oznamil-novy-format-bfloat16-pro-budouci-procesory/">https://www.root.cz/zpravicky/intel-oznamil-novy-format-bfloat16-pro-budouci-procesory/</a>
</li>

<li>Nový formát čísel Intelu BFloat16 bude v GCC 10 a Clang 9 <br />
<a href="https://www.root.cz/zpravicky/novy-format-cisel-intelu-bfloat16-bude-v-gcc-10-a-clang-9/">https://www.root.cz/zpravicky/novy-format-cisel-intelu-bfloat16-bude-v-gcc-10-a-clang-9/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

