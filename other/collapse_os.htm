<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Collapse OS - operační systém do světa Falloutu?</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Collapse OS - operační systém do světa Falloutu?</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes se ve stručnosti seznámíme s projektem nazvaným Collapse OS. Jedná se o minimalisticky pojatý operační systém, který je možné v případě potřeby sestavit a provozovat i na &bdquo;starém šrotu&ldquo;, například na osmibitových mikroprocesorech a mikrořadičích s několika kilobajty ROM a RAM.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Collapse OS &ndash; operační systém do světa Falloutu?</a></p>
<p><a href="#k02">2. Podporované procesorové architektury</a></p>
<p><a href="#k03">3. Podpora periferních zařízení</a></p>
<p><a href="#k04">4. Vývoj Collapse OS &ndash; od assembleru k&nbsp;programovacímu jazyku Forth</a></p>
<p><a href="#k05">5. Vlastnosti Collapse OS z&nbsp;pohledu uživatele</a></p>
<p><a href="#k06">6. Uživatelské nástroje</a></p>
<p><a href="#k07">7. Assemblery</a></p>
<p><a href="#k08">8. Uložení zdrojového kódu programu do bloků (obrazovek)</a></p>
<p><a href="#k09">9. Organizace bloků Collapse OS</a></p>
<p><a href="#k10">*** 10. Technologie použité pro implementaci Collapse OS</a></p>
<p><a href="#k11">11. Vyzkoušení Collapse OS na lokálním systému</a></p>
<p><a href="#k12">*** 12. Vyzkoušení Collapse OS ve webovém prohlížeči</a></p>
<p><a href="#k13">13. Přílohy: vznik a vývoj programovacího jazyka Forth</a></p>
<p><a href="#k14">14. Forth: programovací jazyk, vývojové prostředí či operační systém?</a></p>
<p><a href="#k15">15. Abstraktní dvouzásobníkový procesor</a></p>
<p><a href="#k16">16. Základy programování ve Forthu: zásobník operandů</a></p>
<p><a href="#k17">17. Vytváření nových slov ve Forthu</a></p>
<p><a href="#k18">18. Herní konzole Sega Master System</a></p>
<p><a href="#k19">19. Základní technické parametry herní konzole Sega Master System</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Collapse OS &ndash; operační systém do světa Falloutu?</h2>

<p>Na stránkách <a href="https://www.root.cz/">Roota</a> se poměrně často
setkáváme s&nbsp;alternativními a někdy i poměrně obskurními technologiemi. Do
této oblasti velmi dobře zapadá i projekt nazvaný <i>Collapse OS</i>. Jméno
tohoto projektu naznačuje jeho možné (teoretické) využití &ndash; <i>Collapse
OS</i> by totiž měl být provozovatelný i na &bdquo;starém šrotu&ldquo;,
například na osmibitových mikrořadičích a mikroprocesorech s&nbsp;několika
kilobajty paměti ROM i RAM sestavenými bez použití leptaného plošného spoje, na
starých osmibitových herních konzolích apod. Mnohé z&nbsp;těchto mikroprocesorů
či mikrořadičů lze v&nbsp;případě skutečného kolapsu ekonomiky resp.&nbsp;státu
(nebo za katastrofických podmínek) provozovat pouze s&nbsp;minimálními dalšími
nároky na další pomocné obvody či na napájení s&nbsp;několika přesně
specifikovanými úrovněmi napětí (což je v&nbsp;přímém kontrastu
s&nbsp;komplexním PC, kde i čip pro připojení pouhé klávesnice svojí
komplexností převyšuje zmíněné osmibitové CPU a MCU).</p>

<p><div class="rs-tip-major">Poznámka: mohlo by se možná zdát, že současná
situace na trhu s&nbsp;čipy již je katastrofická nebo vykazuje známky kolapsu,
ovšem v&nbsp;tomto případě se jedná o pouhé přerušení
dodavatelsko-odběratelského řetězce (navíc se netýká všech výrobců). Možná je
dokonce dobře, že k&nbsp;této situaci došlo, protože odhaluje potenciální větší
problémy plynoucí z&nbsp;naprosté globalizace a současně i velké konsolidace
trhu s&nbsp;integrovanými obvody.</div></p>

<p>Vraťme se však k&nbsp;<i>Collapse OS</i>. Budeme se přitom soustředit spíše
na technologie, na nichž je tento operační systém postaven, protože jeho
&bdquo;plánované&ldquo; použití pravděpodobně nenastane &ndash; v&nbsp;případě
skutečné katastrofy bude asi lidstvo řešit závažnější problémy, než je
nedostatek počítačů (resp.&nbsp;jinak &ndash; vcelku s&nbsp;velkou
pravděpodobností se do skutečného scénáře stejně netrefíme).</p>

<p><div class="rs-tip-major">Poznámka: na příkladu Collapse OS je dobře patrné
hledání &bdquo;sweet spotu&ldquo;, tj.&nbsp;stavu, kdy operační systém dokáže
provádět potřebné operace (například ovládat nějaký stroj) a současně není
příliš složitý ani rozsáhlý. S&nbsp;nabídkou výkonných mikroprocesorů a
mikrořadičů se na tento problém poněkud zapomíná, takže výsledkem bývají
zbytečně komplikované, těžkopádné a napadnutelné systémy.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Podporované procesorové architektury</h2>

<p>Současná verze operačního systému <i>Collapse OS</i> je podporována na
osmibitových mikroprocesorech <i>Zilog Z80</i>, na taktéž osmibitovém
mikroprocesoru <i>Motorola 6809</i>, dále na mikrořadičích <i>AVR</i>
(z&nbsp;rodiny <i>megaAVR</i>, ovšem bylo by možné použít i čipy z&nbsp;rodiny
<i>tinyAVR</i>, pokud jsou osazeny větší kapacitou RAM) a taktéž na klasických
mikroprocesorech <i>Intel 8086</i> v&nbsp;reálném režimu (což čistě teoreticky
zahrnuje i běžná PC). Výběr těchto čipů je přitom dán spíše preferencemi autora
<i>Collapse OS</i> (chtěl se například naučit assembler mikroprocesoru Z80) i
v&nbsp;té době dostupných zařízení (herní konzole <i>Sega Master System</i>
resp. <i>Sega MegaDrive</i>). Ovšem plánuje se portace tohoto operačního
systému i na slavné osmibitové mikroprocesory <i>MOS 6502</i>. Oficiální důvod
podpory všech těchto dnes již spíše muzeálních čipů je fakt, že (podle mínění
autora Collapse OS) bude možné tyto jednoduché čipy relativně snadno vyrábět
v&nbsp;továrnách, které se po kolapsu podaří obnovit. To je velmi zajímavá
myšlenka, protože například Z80 má pouze 9000 tranzistorů a je tedy skutečně
mnohem snadněji replikovatelný než moderní mikroprocesory s&nbsp;o několik řádů
vyšší složitostí.</p>

<p>Z&nbsp;čistě praktického hlediska &ndash; tedy pokud se zamyslíme nad tím,
jaký &bdquo;šrot&ldquo; by bylo možné v&nbsp;případě nějaké katastrofy najít a
oživit &ndash; by pochopitelně bylo vhodnější se orientovat nikoli na
historické mikroprocesory, ale na moderní mikrořadiče, které lze najít
prakticky kdekoli (například i v&nbsp;termostatu apod.). Kromě mikrořadičů
<i>AVR</i>, což je velmi rozšířená řada mikrořadičů, by se tedy mohla provést
portace i na vybrané šestnáctibitové a popř.&nbsp;i 32bitové mikrořadiče.
V&nbsp;oblasti šestnáctibitových mikrořadičů se jedná o řadu Freescale (dříve
Motorola) <i>68HC11</i>, čipy od Texas Instruments (například <i>MSP430</i>) či
čipy od Infineonu, které by bylo možné získat z&nbsp;automobilů. Zajímavý je i
segment 32bitových mikrořadičů, v&nbsp;nichž se kromě MIPS ujaly i čipy
s&nbsp;jádrem <i>ARM Cortex-M0</i> popř.&nbsp;<i>ARM Cortex-M1</i>. Výhodou
Collapse OS je fakt, že případná portace na další mikrořadiče a mikroprocesory
by měla být relativně snadná, a to dokonce do takové míry, že na všech prozatím
podporovaných architekturách lze provést <i>bootstrap</i> (viz též navazující
kapitoly).</p>

<p>V&nbsp;předchozích dvou odstavcích jsem se schválně nezmínil o mikrořadičích
z&nbsp;rodiny 8051, které jsou i přes značné stáří této architektury
(představeny byly již v&nbsp;roce 1980!) stále používány a jejich zapojení je
většinou jednoduché a především známé. Problém je, že i moderní mikrořadiče,
které jsou nad 8051 postaveny, nabízí pouze omezenou kapacitu RAM (například
256 bajtů), přičemž <i>Collapse OS</i> pro svůj běh vyžaduje spíše kapacitu ve
vyšších jednotkách kilobajtů. Totéž lze říci i o některých rodinách mikrořadičů
PIC, konkrétně PIC10 až PIC16. Z&nbsp;této oblasti nám tak zbývají například
mikrořadiče z&nbsp;rodiny S08 a HC08.</p>

<p><div class="rs-tip-major">Poznámka: jedním z&nbsp;dalších důvodů, proč byly
vybrány starší typy čipů, je fakt, že tyto mikroprocesory jsou dostupné i <a
href="https://en.wikipedia.org/wiki/Dual_in-line_package">v&nbsp;pouzdrech typu
DIL</a>. Tudíž je lze použít i na běžném plošném spoji
&bdquo;s&nbsp;dírkami&ldquo;, tedy bez nutnosti využívat technologii povrchové
montáže. U relativně malých pouzder s&nbsp;40 piny a roztečí 2,5 nebo 2,54 mm
mezi piny (což odpovídá všem zmíněným mikroprocesorům) se navíc ani nemusí
použít skutečný plošný spoj (kde ho také po pádu dodavatelských řetězců
sehnat?), ale pouze deska s&nbsp;drátovými propojkami (což sice není elegantní
řešení, ale je uskutečnitelné), popř.&nbsp;i <a
href="https://duckduckgo.com/?q=nep%C3%A1jiv%C3%A9+pole&t=newext&atb=v1-1&iax=images&ia=images">nepájivé
kontaktní pole</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Podpora periferních zařízení</h2>

<p>Samotný mikroprocesor popř.&nbsp;mikrořadič je pochopitelně nutné doplnit o
další potřebná periferní zařízení. Z&nbsp;paměťových zařízení jsou podporovány
<a href="https://www.sdcard.org/developers/sd-standard-overview/">SD karty</a>,
což je ostatně logické, protože protokol pro jejich ovládání je velmi
jednoduchý (minimálně v&nbsp;porovnání s&nbsp;dalšími technologiemi, jako je
USB mass storage atd.). V&nbsp;některých variantách jsou podporovány i
disketové jednotky, tedy dnes již spíše historické paměťové médium. Podporován
je i přenos dat po sériové sběrnici (zde ovšem záleží na konkrétním
mikroprocesoru resp.&nbsp;v&nbsp;tomto případě spíše na mikrořadiči, které
sériové sběrnice či porty podporuje a jaké jsou použité paměťové úrovně) a
taktéž klávesnice PS/2 &ndash; ostatně i ta používá sériový protokol pro přenos
dat (s&nbsp;adaptérem je tedy možné připojit i USB klávesnici). Navíc je na
herní konzoli Sega Master System podporován i D-Pad, tedy ovládací prvek, jenž
je primárním vstupním zařízením na této konzoli (společně s&nbsp;dalšími
tlačítky na ovladači i konzoli).</p>

<p>Mezi zajímavé doplňky patří například podpora pro zobrazení údajů na slavné
kalkulačce TI-84+, tedy na grafickém displeji o rozlišení 96&times;64
pixelů.</p>

<p><div class="rs-tip-major">Poznámka: vzhledem k&nbsp;podpoře osmibitových
mikrořadičů AVR je však ve skutečnosti možné připojit i mnohá další užitečná
zařízení, například jednoduché numerické klávesnice popř.&nbsp;textové či
dokonce grafické displeje. Ty totiž podporují ovládání přes <a
href="https://www.root.cz/clanky/externi-seriove-sbernice-spi-a-i2c/">SPI</a>,
<a
href="https://www.root.cz/clanky/komunikace-po-seriove-sbernici-isup2supc/">I<sup>2</sup>C</a>
či v&nbsp;případě displejů určených pro mobilní telefony <i>MIPI</i> neboli
<i>Mobile Industry Processor Interface</i> (zde je ovšem ovládání již poměrně
složité a tudíž vyžaduje větší prostor v&nbsp;ROM). Některé displeje, například
ty vybavené čipem <a
href="https://en.wikipedia.org/wiki/Hitachi_HD44780_LCD_controller">Hitachi
HD44780</a> se ovládají ještě jednodušeji, protože je lze přímo připojit na
osmibitovou sběrnici &ndash; což je ostatně další výhoda použití osmibitových
mikroprocesorů s&nbsp;externí sběrnicí, jejíž protokol je jednoduchý a
známý.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vývoj Collapse OS &ndash; od assembleru k&nbsp;programovacímu jazyku Forth</h2>

<p>Samotný vývoj <i>Collapse OS</i> od prvních verzí až k&nbsp;verzi současné
je prakticky ukázkovým &bdquo;školním&ldquo; příkladem nasazení programovacího
jazyka Forth. <i>Collapse OS</i> totiž začal zdánlivě logickým krokem &ndash;
byl totiž prakticky kompletně naprogramován v&nbsp;assembleru. To je zajisté
s&nbsp;ohledem na použité mikroprocesory dobrá volba, ovšem naráží na jeden
zásadní problém &ndash; celý OS by totiž mělo být možné
&bdquo;bootstrapovat&ldquo; (tedy přeložit a spustit) přímo na daném systému,
tedy například konkrétně na zbastleném počítači s&nbsp;mikroprocesorem Zilog
Z80 a řekněme šestnácti kilobajty operační paměti RAM. Jádro problému spočívá
v&nbsp;tom, že zatímco operační systém získaný překladem z&nbsp;assembleru je
dostatečně rychlý a kompaktní, neplatí to už pro překlad (tedy pro fázi, které
se přesněji říká <i>assembly</i>, nikoli <i>compilation</i>). Samotný assembler
totiž v&nbsp;žádném případě není jednoduchý program. Typické jednodušší
assemblery vyžadují 8kB paměti jen pro svůj vlastní kód, mnohé makroassemblery
pak šestnáct kilobajtů. A assemblery určené pro moderní mikroprocesory jsou již
z&nbsp;tohoto pohledu až absurdně obrovské a tudíž pro potřeby Collapse OS
nepoužitelné:</p>

<pre>
$ <strong>ls -l /usr/bin/as</strong>
&nbsp;
-rwxr-xr-x 1 root root 356952 dub 25  2017 /usr/bin/as
</pre>

<p>Řešení tohoto problému je staré již čtyřicet let &ndash; v&nbsp;assembleru
je naprogramováno jen nezbytné množství systému, typicky se jedná o řádově
stovky bajtů. Tato assemblerovská část představuje jádro programovacího jazyka
Forth (skutečně jen velmi malé jádro, doslova několik základních slov a kód pro
práci se slovníkem), zbytek systému je pak dostupný ve formě Forthovského kódu.
V&nbsp;případě Collapse OS se preferuje přenositelnost a srozumitelnost (pro
příští generace), proto je část v&nbsp;assembleru skutečně velmi malá, a to i
za cenu, že Forthovský kód nebude tak rychlý jako jeho případná alternativa
napsaná v&nbsp;assembleru.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vlastnosti Collapse OS z&nbsp;pohledu uživatele</h2>

<p>Jaké vlastnosti vlastně Collapse OS případným uživatelům nabízí?
V&nbsp;první řadě je nutné již na úvod zdůraznit co nenabízí. V&nbsp;žádném
případě se nejedná o nějakou plnohodnotnou náhradu za moderní operační systémy
&ndash; takové ambice ani není možné splnit s&nbsp;ohledem na hardwarová
omezení použitých mikroprocesorů a při snaze udržet velikost celého projektu
v&nbsp;mezích jednotek či maximálně desítek kilobajtů operační paměti. Taktéž
se nejedná o realtime systém, i když k&nbsp;němu má blíže, než například
klasické unixové/linuxové jádro (a lze předpokládat, že v&nbsp;případě potřeby
může některé realtime aplikace nahradit). Collapse OS je v&nbsp;současnosti
možné nastartovat (bez použití BIOSu či jakéhokoli uzavřeného binárního blobu),
ovládat ho z&nbsp;klávesnice nebo přes sériovou konzoli s&nbsp;výstupem buď na
sériovou konzoli nebo na připojený řádkový resp.&nbsp;grafický displej (zde
pouze s&nbsp;omezeními). Collapse OS taktéž dokáže ovládat podporovaná bloková
zařízení, což jsou v&nbsp;současnosti již zmíněné SD karty a u některých
architektur i disketové jednotky.</p>

<p>Práce s&nbsp;paměťovými zařízeními je skutečně omezena na čtení a zápis dat
po jednotlivých blocích; jinými slovy součástí základního systému není ovladač
pro souborový systém, i když například podporu FAT by nebylo příliš
problematické doprogramovat (ostatně různé DOSy pro osmibitové mikropočítače
měly velikost jen několik kilobajtů). Z&nbsp;pohledu Collapse OS je však tato
funkcionalita spíše chápána jako uživatelské rozšíření a nikoli součást
operačního systému. Totéž platí pro jakoukoli podporu sítí, s&nbsp;výjimkou
výše zmíněných sériových sběrnic.</p>

<p><div class="rs-tip-major">Poznámka: vzhledem k&nbsp;omezení na práci
s&nbsp;bloky uloženými na blokovém zařízení je toto rozhraní primitivní &ndash;
namísto rutin typu <strong>open</strong>, <strong>close</strong>,
<strong>fseek</strong>, <strong>getchar</strong>, <strong>fread</strong>,
<strong>fflush</strong> atd. jsou k&nbsp;dispozici pouhá tři slova.
<strong>BLK@</strong> a <strong>BLK!</strong> slouží pro načtení a uložení
bloku, slovo <strong>BLK&gt;</strong> pak obsahuje číslo načteného bloku. Bloky
jsou očíslovány od nuly a načítají se na adresy určené <strong>BLK(</strong> a
<strong>BLK)</strong> (identifikátory ve Forthu skutečně mohou tyto znaky
obsahovat).</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Uživatelské nástroje</h2>

<p>Součástí Collapse OS jsou i základní utility. V&nbsp;první řadě je
k&nbsp;dispozici shell jazyka Forth (jak již víme, ovladatelný
z&nbsp;klávesnice nebo ze sériové konzole). To však není vše, protože součástí
Collapse OS jsou mj.&nbsp;i tři editory. První z&nbsp;nich je označován jako
<i>memory editor</i>, i když se ve skutečnosti jedná o <i>hexa editor</i>, což
je speciální forma editorů, jimiž jsme se <a
href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">již
na stránkách Roota zabývali</a>. Právě tento typ editorů je pro danou aplikační
oblast nejvhodnější. Tento editor se nahrává příkazem <strong>ME</strong> a
spouští se týmž slovem (uživatel tedy může editor nahrát jedenkrát a potom ho
může kdykoli vyvolat). Tím, že tento editor pracuje s&nbsp;operační pamětí,
není problém do daného místa paměti nahrát blok z&nbsp;paměťového zařízení, ten
upravit a potom ho uložit zpět &ndash; tento editor tedy částečně nahrazuje i
klasický <i>monitor</i>.</p>

<p>Dále existuje tradiční řádkový editor reprezentovaný slovem
<strong>ED</strong>. Ten se ovládá několika příkazy pro výběr řádku, vložení
textu, nalezení textu, operaci copy, operaci put atd. Ovšem k&nbsp;dispozici je
i (vizuální) textový editor načítaný a spouštěný příkazem <strong>VE</strong>,
jehož ovládání a chování je inspirováno editory Vi a <a
href="https://www.root.cz/serialy/textovy-editor-vim-jako-ide/">Vim</a>. Ovšem
použití tohoto textového editoru je poněkud neobvyklé, protože odráží fakt, že
s&nbsp;blokovými zařízeními se skutečně pracuje po blocích, což je ostatně ve
světě jazyka Forth obvyklé.</p>

<p><div class="rs-tip-major">Poznámka: vizuální editor <strong>VE</strong>
předpokládá, že je k&nbsp;dispozici minimálně 19 řádků s&nbsp;64 znaky na
řádek. V&nbsp;případě, že tomu tak není (což může nastat u jednodušších
displejů, které mají například jen 4 řádky po dvaceti znacích), bude editor
stále funkční, ovšem automaticky skryje všechny své ovládací prvky.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Assemblery</h2>

<p>Součástí <i>Collapse OS</i> jsou i vlastní assemblery pro všechny
v&nbsp;současnosti podporované architektury mikroprocesorů. To znamená, že
k&nbsp;dispozici je assembler pro Zilog Z80, Motorolu 6809, Intel 8086 (reálný
režim) i AVR. Tyto assemblery, které jsou opět naprogramovány ve Forthu (a tím
pádem podporují cross překlad &ndash; tedy překlad na jiný typ mikroprocesoru),
začínají na pevně daných (a zdokumentovaných) blocích a dají se načíst jen
v&nbsp;případě potřeby, ostatně stejně jako již výše zmíněné editory. Kromě
vlastního Forthu, na kterém je celý Collapse OS postaven, se v&nbsp;současnosti
jedná o jediné oficiálně podporované vývojové nástroje, i když pro první verze
Collapse OS se počítalo i s&nbsp;využitím nějakého jednoduchého interpretru
programovacího jazyka BASIC.</p>

<p><div class="rs-tip-major">Poznámka: tyto assemblery se používají i pro
vlastní <i>bootstraping</i>, tedy přípravu nových obrazů systému.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Uložení zdrojového kódu programu do bloků (obrazovek)</h2>

<p><i>&bdquo;Who would want to work within the constraint of 64x16 blocks
filesystem? Someone who knows the complexity associated with implementing a
filesystem and everything that underpins it. When simplicity is valued, such
constraints are gladly accepted.&ldquo;</i></p>

<p>Již při popisu základních možností a součástí <i>Collapse OS</i> jsem se
zmínil o (vizuálním) textovém editoru, který si ovšem zaslouží bližší popis,
protože ukazuje, jak se celková architektura tohoto operačního systému
projevila i na uživatelských programech a jak je v&nbsp;některých zásadních
aspektech odlišná od běžné práce s&nbsp;daty. První rozdíl oproti běžným
operačním systémům spočívá v&nbsp;tom, že Collapse OS celý souborový systém
chápe jako prostou sekvenci bloků o velikosti 1024 bajtů. Tyto bloky mohou
obsahovat libovolná data, která ovšem nejsou organizována do klasických
adresářů a souborů. Existuje ovšem relativně jednoduchý mechanismus, jak
s&nbsp;těmito bloky pracovat jako s&nbsp;textovým dokumentem rozděleným do
takzvaných obrazovek neboli <i>screen(s)</i>.</p>

<p>Prakticky stejně je tomu i v&nbsp;tradičních Forthech, v&nbsp;nichž se
zdrojový text kódu programu neukládal do textových souborů (jak je tomu dnes),
ale taktéž do jednotlivých bloků. V&nbsp;případě práce se zdrojovým textem se
ovšem většinou nemluví o blocích, ale o již zmíněných obrazovkách
(<i>screens</i>).</p>

<p>Velikost obrazovky je za jakýchkoli podmínek rovna šestnácti řádkům, kde na
každém řádku je uloženo šedesát čtyři znaků. Celková velikost obrazovky je tedy
rovna 64&times;16 = 1024 znakům/bytům, což přesně odpovídá velikosti jednoho
bloku. Všimněte si, že délka řádku je vždy rovna 64 znakům, nezávisle na
aktuálním obsahu řádku. Pokud je řádek &bdquo;prázdný&ldquo;, je v&nbsp;bloku
jednoduše zapsáno 64 mezer (ASCII znaků s&nbsp;kódem 32), i když některé Forthy
rozpoznají i znak pro konec řádku (ovšem opět následovaný nějakou výplní).</p>

<p>Jisté je, že tento způsob zápisu je neúsporný, zejména při zápisu programů
&bdquo;vertikálním&ldquo; způsobem. I z&nbsp;tohoto důvodu ostatně někteří
zkušení programátoři zapisují definice nových slov &bdquo;horizontálním&ldquo;
způsobem, tj.&nbsp;na jeden řádek &ndash; slova tak musejí být krátká, což vede
k&nbsp;důsledné faktorizaci kódu (ta ostatně není nikdy na škodu, zvláště a
zejména ve Forthu).</p>

<p>Pro načtení a zpracování (tj.&nbsp;překlad a interpretaci) celé obrazovky se
používá slovo <strong>LOAD</strong>, jehož zásobníkový diagram je následující:
<strong>( u –)</strong>. Před provedením tohoto slova musí být na zásobník
operandů uloženo číslo bloku, který se má načíst a přeložit. Z&nbsp;hlediska
operačního systému se jedná o triviální operaci, zcela jistě jednodušší, než
používání sofistikovaných souborových systémů.</p>

<p><div class="rs-tip-major">Poznámka: význam zásobníkového diagramu bude
vysvětlen níže.</div></p>

<p>Pro souvislé načítání bloků/obrazovek je ve Forthu vytvořeno slovo
s&nbsp;krásným zápisem <strong>--&gt;</strong> (tedy pomlčka pomlčka
nerovnítko), které načte následující blok z&nbsp;blokového zařízení,
tj.&nbsp;po bloku <strong>U</strong> je načten blok <strong>U+1</strong>. Pro
automatizované načítání sekvence obrazovek je možné využít malého triku: na
konci každé obrazovky je uvedeno výše popsané slovo --&gt;, které při
interpretaci automaticky způsobí odskok.</p>

<p>Pro výpis obsahu obrazovky na obrazovku :-) (tj.&nbsp;na monitor nebo na
sériovou konzoli) lze použít slovo <strong>LIST</strong> se zásobníkovým
diagramem <strong>( U – )</strong>, kde <strong>u</strong> je index požadované
obrazovky.</p>

<p>Orientace v&nbsp;číslech obrazovek může být složitá, takže se, především u
rozsáhlejších aplikací, na některé z&nbsp;prvních obrazovek uvádějí konstanty,
které lze pro indexaci používat. Jednoduchý příklad:</p>

<pre>
1   constant app-init
90  constant graphics
125 constant sound
&nbsp;
app-init load
graphics load
graphics list
sound load
</pre>

<p>Pro tisk obsahu obrazovek na tiskárnu se v&nbsp;klasických Forthech (ovšem
ne v&nbsp;Collapse OS) používá slovo <strong>TRIAD</strong>, které způsobí tisk
třech obrazovek (index první z&nbsp;nich je uložen na zásobníku operandů). Proč
zrovna tři obrazovky? Na tiskárnách formátu A4 popř.&nbsp;US Letter je možné
vytisknout přibližně 60 řádků, což pro čtyři obrazovky nedostačuje (16&times;4
&gt; 60), ale pro tři obrazovky je tato hodnota ideální (obrazovky mohou být
odděleny prázdným řádkem nebo několika řádky). Z&nbsp;tohoto důvodu se mnohdy
zdrojový kód organizuje tak, aby důležité části (například začátky modulů)
začínaly na začátku tiskové strany.</p>

<p>Při tisku lze také využít slovo <strong>INDEX</strong>, které vytiskne první
řádky získané z&nbsp;šedesáti po sobě jdoucích obrazovek. Pokud tedy obsahuje
každá obrazovka stručný popis (samozřejmě v&nbsp;poznámce), je možné velmi
jednoduchým způsobem získat &bdquo;obsah&ldquo; programu. Důležitá jsou zejména
odsazení prvních řádků tak, aby se při tisku zdůraznila hierarchie. Případnou
implementaci slova <strong>INDEX</strong> ponechám na čtenáři, je totiž poměrně
jednoduchá &ndash; stačí použít počítaný cyklus, dále slovo
<strong>TYPE</strong> a nezapomenout na uložení délky řetězce na zásobník
operandů.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;CollapseOS očekává
<strong>INDEX</strong> dvojici čísel bloků: od-do.</div></p>

<p>Při zápisu zdrojových textů se často používají dvě slova uvozující poznámku.
První slovo se zapisuje <strong>\</strong> a značí, že se ignoruje zbytek
aktuálního řádku (tj.&nbsp;podobně jako v C-čku znaky <strong>//</strong>).
Druhé slovo, které se zapisuje jako <strong>\S</strong>, způsobí, že se
ignoruje text až do konce aktuální obrazovky. Pokud je tedy toto slovo uvedeno
na prvním řádku, je celá obrazovka považována za komentář. Takovým způsobem je
ostatně okomentována i značná část samotného Collapse OS.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Organizace bloků Collapse OS</h2>

<p>Celý Collapse OS je reprezentován několika stovkami kilobajtových bloků dat,
přičemž každý blok je určen svým indexem. Indexy některých bloků jsou dnes již
standardizovány, takže uživatel či vývojář například ví, že od bloku 100
začínají programy, které je možné načíst po inicializaci (nastartování)
systému, od bloku 200 začíná kód assemblerů atd. Tyto pevně zadané adresy sice
znamenají, že je Collapse OS méně flexibilní a může zabírat zbytečně velké
množství bloků na paměťovém médiu, ovšem jeho používání a další vývoj je
poněkud více predikovatelný (což zní optimisticky &ndash; ale asi se jedná o
jeden ze způsobů, jak vůbec &bdquo;přežít&ldquo; na systému, který nemá
skutečný souborový systém). Popis jednotlivých bloků je uveden v&nbsp;takzvaném
<i>master indexu</i>, který je umístěn v nultém bloku. Ten si pochopitelně
můžeme vypsat příkazem <strong>0 LIST</strong>:</p>

<pre>
 1 MASTER INDEX
 2 
 3 002 Common assembler words    005 Z80 assembler
 4 020 8086 assembler            030 AVR assembler
 5 050 6809 assembler            60-99 unused
 6 100 Block editor              115 Memory Editor
 7 120 Useful little words
 8 130-149 unused                150 Remote Shell
 9 160 AVR SPI programmer        165 Sega ROM signer
10 170-199 unused                200 Cross compilation
11 210 Core words                230 BLK subsystem
12 240 Grid subsystem            245 PS/2 keyboard subsystem
13 250 SD Card subsystem         260 Fonts
14 280 Z80 boot code             310 Z80 drivers
15 400 8086 boot code            420 8086 drivers             cont.
16 
</pre>

<p><div class="rs-tip-major">Poznámka: tento příkaz tedy zobrazil celý blok
neboli <i>screen</i>, což je přesně 16&times;64 znaků.</div></p>

<p>Pokud vás zajímá například první blok/screen s&nbsp;kódem <i>memory
editoru</i>, zde je:</p>

<pre>
<strong>115 LIST</strong>
 1 \ Memory Editor. See doc/me.txt. B115-119
 2 CREATE CMD '#' C, 0 C, \ not same prefix as VE
 3 CREATE BUF '$' C, 4 ALLOT \ always hex
 4 \ POS is relative to ADDR
 5 5 VALUES ADDR 0 POS 0 AWIDTH 16 HALT? 0 ASCII? 0
 6 LINES 2 - VALUE AHEIGHT
 7 AHEIGHT AWIDTH * VALUE PAGE
 8 COLS 33 &lt; [IF] 8 TO AWIDTH [THEN]
 9 : _ ( n -- c ) DUP 9 &gt; IF [ 'a' 10 - LITN ] ELSE '0' THEN + ;
10 : _p ( c -- n ) '0' - DUP 9 &gt; IF $df AND 'A' '0' - - DUP 6 &lt; IF
11     10 + ELSE DROP $100 THEN THEN ;
12 : SCNT 'S S0 -^ &gt;&gt; ;
13 : addr ADDR POS + ;
14 : hex! ( c pos -- )
15   OVER 16 / _ OVER CELL! ( c pos ) 1+ SWAP $f AND _ SWAP CELL! ;
16 : bottom 0 LINES 1- AT-XY ;
 ok
</pre>

<p><div class="rs-tip-major">Poznámka: obraz všech bloků naleznete
v&nbsp;souboru <strong>blkfs</strong>. Ten ovšem není kvůli rozdělení na
obrazovky příliš čitelný. Ovšem existuje i čitelná verze tohoto souboru nazvaná
<strong>blk.fs</strong> reprezentovaná jako velký textový soubor &ndash; ano,
prakticky celý operační systém i s&nbsp;editory a assemblery, bitovými mapami
znaků atd. uložený <a
href="https://raw.githubusercontent.com/hsoft/collapseos/master/blk.fs">v&nbsp;čitelném
textovém souboru o velikosti 120kB</a>!</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Technologie použité pro implementaci Collapse OS</h2>

<p></p>
    Run on minimal and improvised machines.
    Interface through improvised means (serial, keyboard, display).
    Edit text and binary contents.
    Compile assembler source for a wide range of MCUs and CPUs.
    Read and write from a wide range of storage devices.
    Assemble itself and deploy to another machine.


taktéž terminály, grafický výstup atd.
Forth

<p>Programovacímu jazyku Forth jsme se již na stránkách Rootu kdysi věnovali v samostatném seriálu. Tento jazyk, který je založený na konceptu dvou zásobníků (jeden je používaný pro operandy a druhý pro uložení návratových adres volajících funkcí), je známý mj. i tím, že jeho implementaci lze v nejjednodušší variantě provést v několika stovkách bajtů paměti, tj. přibližně s 300 až 500 strojovými instrukcemi a navíc se některé dialekty Forthu provozovaly bez použití operačního systému (Forthovské jazyky byly součástí i několika BIOSů). V takto malém počtu instrukcí bude složité uložit jakákoli nebezpečná zadní vrátka. Na druhou stranu je nutné poznamenat, že Forth tvoří svůj velmi zajímavý, ale dosti izolovaný svět, takže v něm pravděpodobně nikdy nevznikne překladač C ani dalšího vyššího programovacího jazyka (typicky se ovšem Forth spojuje s assemblerem, což je ostatně i logičtější).</p>




<p><a name="k11"></a></p>
<h2 id="k11">11. Vyzkoušení Collapse OS na lokálním systému</h2>

<p>Collapse OS je možné si přeložit a vyzkoušet i na běžném PC. Postačuje
provést tyto kroky:</p>

<ol>

<li>Stáhnout poslední obraz zdrojových kódů ze stránky <a
href="https://collapseos.org/download.html">https://collapseos.org/download.html</a></li>

<li>Rozbalit ho příkazem <strong>tar xvfz collapseos-20210802.tar.gz</strong> (či jiná verze)</li>

<li>Přejít do adresáře <strong>cvm</strong></li>

<li>Spustit příkaz <strong>make</strong></li>

</ol>

<p>Výsledkem překladu je trojice spustitelných souborů <strong>stage</strong>,
<strong>cos-grid</strong> a <strong>cos-serial</strong>. První z&nbsp;nich je
určen pro speciální použití (zápis obsahu paměti do souboru), druhý spustí
Collapse OS v&nbsp;celoobrazovkovém režimu (kde bude fungovat editor
<strong>VE</strong> i <strong>ME</strong>) a třetí taktéž spustí Collapse OS,
ovšem v&nbsp;režimu sériového vstupu/výstupu &ndash; tedy ve funkci primitivní
konzole. Přitom se využívá blokové zařízení simulované souborem
<strong>blkfs</strong> (ten má nyní 557 bloků).</p>

<p>Příklad použití <strong>cos-serial</strong>:</p>

<pre>
<strong>$ ./cos-serial</strong>
&nbsp;
Using blkfs /tmp/ramdisk/collapse/cvm/blkfs
Collapse OS ok
&nbsp;
<strong>1 2 + .</strong>
3 ok
&nbsp;
<strong>2 3 7 * * .</strong>
42 ok
&nbsp;
<strong>0 LIST</strong>
 1 MASTER INDEX
 2 
 3 002 Common assembler words    005 Z80 assembler
 4 020 8086 assembler            030 AVR assembler
 5 050 6809 assembler            60-99 unused
 6 100 Block editor              115 Memory Editor
 7 120 Useful little words
 8 130-149 unused                150 Remote Shell
 9 160 AVR SPI programmer        165 Sega ROM signer
10 170-199 unused                200 Cross compilation
11 210 Core words                230 BLK subsystem
12 240 Grid subsystem            245 PS/2 keyboard subsystem
13 250 SD Card subsystem         260 Fonts
14 280 Z80 boot code             310 Z80 drivers
15 400 8086 boot code            420 8086 drivers             cont.
16 
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vyzkoušení Collapse OS ve webovém prohlížeči</h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Přílohy: vznik a vývoj programovacího jazyka Forth</h2>

<p>Vývoj programovacího jazyka <i>Forth</i>, na kterém je postaven <i>Collapse
OS</i>, probíhal velmi zajímavě. Nikdy se totiž nejednalo o čistě
&bdquo;akademický produkt&ldquo;, který by měl reprezentovat nějakou nosnou
revoluční myšlenku (a tím méně o jazyk určený pro výuku programování), ale o
programovací jazyk, který vytvořil v&nbsp;podstatě jeden člověk pro svoji
osobní potřebu tak, aby přesně splňoval jeho pracovní požadavky. Tento
programátor se jmenuje <a
href="https://en.wikipedia.org/wiki/Charles_H._Moore">Charles
&bdquo;Chuck&ldquo; Moore </a> a dodnes patří mezi zajímavé a současně velmi
rozporuplné osobnosti, které se podílely na rozvoji výpočetní techniky, zejména
vestavěných (embedded) řídících systémů a systémů běžících v&nbsp;reálném čase.
Moore byl prý překvapen, když zjistil, že systém, který vyvinul pro své
potřeby, používají i další lidé, kterým v&nbsp;jejich práci vyhovuje více než
v&nbsp;té době komerčně prosazovaný Fortran).</p>

<p>Do značně heterogenního prostředí počítačů a operačních systémů sedmdesátých
let přišel Moore se svým jazykem (či lépe řečeno celou vývojovou platformou)
Forth. Vývojové prostředí Forthu obsahovalo interaktivní editor, interpret
jazyka Forth a univerzální vazbu na assembler upravený na právě provozovaný
systém (opět &ndash; můžeme zde jasně vidět, čím se nechal Collapse OS
inspirovat). Toto prostředí umožňovalo spouštět souběžně více procesů a
současně mohlo v&nbsp;systému nezávisle pracovat až 64 uživatelů, a to i na
platformách, jejichž operační systém nebyl multiuživatelský a dokonce ani
multitaskový.</p>

<p>Ve skutečnosti Forth (resp.&nbsp;jeho vývojové prostředí, tyto dva pojmy
však většinou splývají) nepotřeboval pro své spuštění žádný operační systém,
pracoval totiž přímo s&nbsp;periferními zařízeními &ndash; z&nbsp;toho také
vyplývá skutečnost, že se zdrojové kódy vytvářených aplikací neukládaly tak
jako dnes do textových souborů, ale byly v&nbsp;předkompilované či přímo
přeložené podobě uloženy v&nbsp;blocích pevné délky (takzvaných obrazovkách,
s&nbsp;nimiž jsme se již setkali), které se podle potřeby nahrávaly do operační
paměti počítače. Tyto programové bloky u mnoha systémů odpovídaly velikosti
bloků na disku (typická velikost je 512 B a 1 kB), což značně urychlovalo práci
s&nbsp;disky, protože se nemusely provádět složité přepočty adres na bloky. Na
druhou stranu se nejedná o příliš efektivní způsob uložení a ani násilné
rozdělování programů na obrazovky nemusí všem programátorům vyhovovat (zejména
v&nbsp;současnosti).</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Forth: programovací jazyk, vývojové prostředí či operační systém?</h2>

<p>Chuck Moore začal vytvářet programovací jazyk Forth docela nevinně &ndash;
zpočátku se jednalo pouze o jakási makra, která používal při programování
aplikací z&nbsp;oblasti astronomie (jednalo se o poměrně složité astronomické
výpočty a řízení radioteleskopů). Tato makra se postupným vývojem proměnila
v&nbsp;translátor vyšších operací do jazyka symbolických adres (assembleru) a
v&nbsp;dalších letech pak do plnohodnotného i když dosti neobvyklého
interaktivního programovacího jazyka s&nbsp;vlastním vývojovým prostředím.</p>

<p>Jedná se přitom o jazyk interpretovaný, i když jiným způsobem, než je dnes
zvykem, a současně plně a oboustranně interaktivní. Z&nbsp;tohoto důvodu se
v&nbsp;něm aplikace vyvíjí a především ihned testují velmi jednoduše, zejména
v&nbsp;porovnání s&nbsp;jazyky kompilovanými, jako jsou dnes často používané
programovací jazyky C, C++, (polomrtvý) Pascal, C# a v&nbsp;podstatě i Java.
Všechny vyjmenované kompilované jazyky potřebují pro vývoj programů mnoho
podpůrných prostředků (editor, překladač, linker, debugger), které však mezi
sebou nejsou (a ani nemohou být) příliš propojeny &ndash; proto je v&nbsp;nich
ladění programů poměrně těžkopádné, vyžaduje knihovny s&nbsp;debug symboly
atd.</p>

<p>Ve Forthu jsou všechny tyto prostředky sloučeny, ale to v&nbsp;žádném
případě neznamená, že by vznikl mnohasetkilobajtový moloch. Naopak, celé
vývojové prostředí Forthu zabírá jednotky, maximálně desítky kilobytů
(v&nbsp;případe Collapse OS jednotky kilobajtů). Vývojové prostředí Forthu je
totiž účelně vytvořeno tak, že obsahuje jen nejnutnější součásti (ostatně Chuck
Moore zapřísáhlý minimalista, což je patrné i při pohledu na design čipů, které
navrhl).</p>

<p>Výpočetní výkon počítačů v&nbsp;té době nebyl příliš vysoký, k&nbsp;čemuž se
dále přidávala poměrně vysoká cena za jednotku strojového času. Programátoři
byli nuceni vytvářet programy co nejrychlejší a s&nbsp;co nejmenšími nároky na
kapacitu operační paměti (v&nbsp;té době se to vyplatilo, v&nbsp;dnešním světě
je v&nbsp;mnoha případech jednodušší programovat resp. &bdquo;bastlit&ldquo; co
nejrychleji a ušetřené prostředky investovat do nového hardwaru). Časově
kritické úseky aplikací se tedy neustále tvořily v&nbsp;assembleru,
k&nbsp;čemuž byl Forth dokonale připraven, neboť existovalo jednoduché
programátorské i aplikační rozhraní pro přístup k&nbsp;assembleru.</p>

<p>Také fakt, že Forth využíval vlastní blokový souborový systém
(resp.&nbsp;pouze datový systém &ndash; soubory vlastně neexistovaly;
v&nbsp;dnešních OS se kromě toho používá &bdquo;proudový&ldquo; souborový
systém, i když nejmenší adresovatelná jednotka na disku je právě jeden blok),
v&nbsp;některých aplikacích značně urychlil práci se soubory. Týká se to
zejména databázových aplikací a aplikací pro zpracování obrazu.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Abstraktní dvouzásobníkový procesor</h2>

<p>Programovací jazyk Forth byl určen zejména pro implementaci na takzvaných
<i>zásobníkových procesorech</i>, přesněji řečeno na procesorech s&nbsp;minimálně
dvěma zásobníky &ndash; zásobníkem operandů (<i>operand stack</i> nebo pouze
<i>stack</i>) a zásobníkem návratových adres (<i>return stack</i>). Tyto
procesory se od dnes nejpoužívanějších registrových procesorů liší především
způsobem provádění aritmetických a logických operací, což mimochodem znamená,
že i základní Forthovská slova je nutné interpretovat či přeložit do strojového
kódu. Jedná se přesně o ta slova, která tvoří základ Collapse OS, společně se
slovy pro ovládání slovníků (tedy seznamu již definovaných slov).</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Základy programování ve Forthu: zásobník operandů</h2>

<p>Forth je mezi programátory znám především jako jazyk, ve kterém se
aritmetické a logické výrazy zapisují pomocí <i>RPN</i> &ndash; <i>Reverse
Polish Notation</i> (obrácené polské notace) označované také jako <i>postfixová
notace</i>. Při tomto způsobu zápisu se nejdříve uvádějí operandy a teprve poté
operace, která se s&nbsp;těmito operandy může provádět.</p>

<p>Už na základní škole se však každý člověk učí takzvanou <i>infixovou
notaci</i> zápisu, ve které se operátory píšou mezi operandy. Vzhledem
k&nbsp;prioritě operátorů je však nutné v&nbsp;infixové notaci používat
závorky. Rozdíl mezi následujícími dvěma výrazy uvedenými v&nbsp;infixové
notaci je snad zřejmý:</p>

<pre>
a+b*c
(a+b)*c
</pre>

<p>Při použití postfixové notace nejsou závorky zapotřebí, protože se priorita
operací vyjadřuje přímo posloupností operátorů. Výše uvedené výrazy lze tedy do
postfixové notace přepsat následovně:</p>

<pre>
a b c * + nebo též b c * a +
a b + c * nebo též c a b + *
</pre>

<p>Všimněte si, že u výrazů napsaných na levé straně se oproti infixové notaci
nemění pořadí operátorů.</p>

<p>Pomocí postfixové notace je možné zapisovat všechny operace i funkce,
dokonce ani nezáleží na počtu operandů (stírá se rozdíl mezi unárními,
binárními, ternárními apod. operacemi). Ve skutečnosti není v&nbsp;postfixové
notaci prakticky žádný rozdíl mezi operacemi a funkcemi, takže pro ně není
nutné zavádět nějaká zvláštní syntaktická pravidla.</p>

<p>Důsledkem výše uvedených skutečností je fakt, že znaky běžně používané pro
operátory je možné použít pro jiné účely, podobně jako například v&nbsp;jazyce
Lisp nebo Scheme (což jsou mimochodem jazyky používající pro změnu prefixovou
notaci).</p>

<p>Aritmetické operace se ve Forthu zapisují přesně podle infixové notace
s&nbsp;tou podmínkou, že jednotlivé operátory od sebe musí být odděleny
mezerou, znakem tabelátoru či znakem pro konec řádku. Příklad zápisu některých
aritmetických operací a jejich kombinací:</p>

<pre>
10 20 +
10 20 *
10 20 -
10 20 + 30 *
5 4 3 2 1 * / + -
</pre>

<p>Význam výše uvedených operací ve Forthu je následující: samotný zápis čísla
znamená, že se toto číslo uloží do zásobníku. Zápis operátoru způsobí, že se
operandy vyberou ze zásobníku, provede se s&nbsp;nimi operace a výsledek se
uloží zpět na zásobník. Vzhledem k&nbsp;tomu, že všechny zmíněné operace jsou
binární, vyberou se ze zásobníku dvě hodnoty a zpět se zapíše pouze jediná
hodnota, tj.&nbsp;počet položek na zásobníku se o jednu sníží.</p>

<p>S&nbsp;operandy umístěnými na zásobníku operandů lze provádět některé
operace, které jsou podporovány naprostou většinou implementací jazyka
Forth:</p>

<p>Prohození dvou operandů na zásobníku:</p>

<pre>
1 2 swap
</pre>

<p>Duplikace (kopie) operandu na TOS (vrcholu zásobníku):</p>

<pre>
1 dup
</pre>

<p>Opak předchozí operace &ndash; odstranění operandu z&nbsp;TOS:</p>

<pre>
1 2 drop
</pre>

<p>Slovo <strong>over</strong> se podobá výše popsanému slovu
<strong>dup</strong>, tj.&nbsp;provádí se kopie hodnoty uložené
v&nbsp;zásobníku. V&nbsp;tomto případě se však jedná o hodnotu uloženou pod
vrcholem zásobníku, nikoli o hodnotu uloženou přímo na vrcholu zásobníku:</p>

<pre>
1 2 over
</pre>

<p>Slovo <strong>rot</strong> manipuluje hned se třemi položkami uloženými na
zásobníku. Jak již název tohoto slova napovídá, provádí se rotace položek, a to
tak, že datová položka na třetí nejvyšší pozici v&nbsp;zásobníku operandů je
vyjmuta a uložena na jeho vrchol:</p>

<pre>
1 2 3 rot
</pre>

<p><div class="rs-tip-major">Poznámka: existují i operace pro přístup
k&nbsp;níže položeným prvkům na zásobníku, ovšem nedoporučuje se je používat
&ndash; zásobník se totiž nemá chápat jako pole.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Vytváření nových slov ve Forthu</h2>

<p>Forth místo funkcí, operací a řídicích struktur používá pouze slova. Slova
se zadávají z&nbsp;klávesnice nebo ze vstupního souboru a jsou určena svým
jménem. Jméno je ve Forthu libovolný řetězec znaků, který je oddělen (ukončen)
mezerou nebo v&nbsp;novějších verzích libovolným &bdquo;bílým znakem&ldquo;.
Každé volání funkce je ve forthovském programu nahrazeno jejím jménem bez
dalších znaků (závorek apod.), protože veškeré parametry funkce i její
návratová hodnota jsou uloženy na zásobníku:</p>

<p>Příkladem slova může být například mocnina. Toto slovo vezme ze zásobníku
hodnotu a na zásobník vrátí její druhou mocninu. Slovo může vypadat
následovně:</p>

<pre>
: mocnina dup * ;
</pre>

<p>Nejdříve se tedy provede duplikace hodnoty na vrcholu zásobníku. Poté se obě
(shodné) hodnoty ze zásobníku vyjmou, vynásobí a na zásobník se uloží výsledek
operace násobení. Použití tohoto slova je opět velmi jednoduché:</p>

<pre>
2 mocnina
</pre>

<p>Poznámka: závěrečný středník na konci slova se překládá do instrukce
<strong>EXIT</strong>.</p>

<p><div class="rs-tip-major">Poznámka: slova v&nbsp;Collapse OS jsou psána
velkými písmeny, mj.&nbsp;i proto, aby je bylo možné zobrazit i na LCD
s&nbsp;maskami 5&times;7 pixelů pro jednotlivé znaky.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Herní konzole Sega Master System</h2>

<p>Collapse OS je možné spustit i na herní konzoli Sega Master System, takže si
ve stručnosti připomeňme, o jaký hardware se vlastně jedná. Herní konzole
<i>Sega Master System (SMS)</i> byla nejdříve vydána v&nbsp;Japonsku. Ovšem
právě v&nbsp;této zemi se nepodařilo vyhrát nad konkurenční konzolí <i>NES</i>,
což znamenalo, že <i>SMS</i> byla pro japonský trh vyráběna pouze v&nbsp;období
let 1985 až 1989. To je z&nbsp;hlediska morální životnosti konzolí poměrně
málo. Poněkud větší úspěch měla <i>SMS</i> v&nbsp;USA a Kanadě, kde se sice
taktéž nepodařilo dosáhnout vyšších prodejů, než dosáhla konkurenční
<i>NES</i>, přesto se však pro tento trh podařilo prodeje udržet až do roku
1992. Zajímavější však byl vývoj v&nbsp;západní Evropě a taktéž
v&nbsp;Brazílii. V&nbsp;západní Evropě se prodeje herní konzole <i>Sega Master
System</i> udržely až do roku 1996 a zajímavé je, že v&nbsp;roce 1993,
tj.&nbsp;za zhruba osm let od data uvedení <i>SMS</i>, se podařilo prodat více
než šest milionů kusů (popravdě řečeno se zde údaje poněkud rozchází &ndash;
někdo píše o šesti milionech prodaných kusů, jiné zdroje uvádí šest milionů
používaných konzolí).</p>

<img src="http://i.iinfo.cz/images/657/8203.jpg" width="450" height="289" alt="&#160;" />
<p><i>Obrázek XX: Konkurent konzole SMS: slavná herní konzole NES.</i></p>

<p>Jak jsme si však již řekli v&nbsp;předchozím odstavci, dosáhla konzole
<i>SMS</i> největší popularity v&nbsp;Brazílii, kde se vyráběla varianta, která
byla konstrukčně odlišná jak od původní japonské verze, tak i od verzí určených
pro západní Evropu a severní Ameriku. Nicméně i přes některé odlišnosti budou
údaje uvedené v&nbsp;následující kapitole do značné míry platné pro všechny
typy konzolí <i>Sega Master System</i> a většinou i pro <i>Sega Mark III</i>
(která se navíc dala rozšířit takovým způsobem, aby měla srovnatelné parametry
se <i>SMS</i>; někteří lidé se dokonce s&nbsp;menším či větším úspěchem snažili
o upgrade původní <i>SG-1000</i> na <i>Sega Master System</i>).</p>

<img src="http://i.iinfo.cz/images/551/8204.jpg" width="450" height="318" alt="&#160;" />
<p><i>Obrázek XX: Další konkurent konzole SMS: Atari 7800.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Základní technické parametry herní konzole Sega Master System</h2>

<p>Ústředním čipem herní konzole <i>Sega Master System</i> byl, stejně jako
v&nbsp;případě starší osmibitové konzole <i>SG-1000</i> od stejné firmy, slavný
osmibitový mikroprocesor <i>Zilog Z80</i>. Tento osvědčený čip dokázal přímo
obsluhovat adresový prostor o velikosti 64 kB, tj.&nbsp; 0x0000 až 0xffff.
Tento paměťový prostor byl rozdělen na tři oblasti takovým způsobem, jak je to
naznačeno v&nbsp;následující tabulce:</p>

<table>
<tr><th>Od</th><th>Do</th><th>Popis</th></tr>
<tr><td>0x0000</td><td>0xbfff</td><td>paměť, do níž je adresován paměťový modul se hrou</td></tr>
<tr><td>0xc000</td><td>0xdfff</td><td>paměť RAM o kapacitě 8 kB</td></tr>
<tr><td>0xe000</td><td>0xffff</td><td>zrcadlená paměť RAM (jeden adresový vodič je ignorován)</td></tr>
</table>

<p>První oblast, do níž byl adresován paměťový modul, bylo možné použít jako
jeden dále nijak nerozdělený adresový prostor o velikosti 48 kilobajtů, ovšem u
paměťových modulů o větší kapacitě bylo prvních 32 kilobajtů mapováno přímo
(zde se tedy musel nacházet startovní kód hry) a zbývajících 16 kilobajtů
sloužilo pro přístup do vybraného <i>banku</i>. Těch mohlo být čistě teoreticky
až 256, v&nbsp;praxi se však používaly paměťové moduly o maximální kapacitě 256
kilobajtů (to se již ovšem jednalo o poměrně rozsáhlé hry).</p>

<img src="http://i.iinfo.cz/images/147/8205.jpg" width="450" height="328" alt="&#160;" />
<p><i>Obrázek XX: Herní konzole Sega Master System (SMS).</i></p>

<p>Kromě osmibitového mikroprocesoru <i>Zilog Z80</i> byly v&nbsp;herní konzoli
<i>Sega Master System</i> použity tři další čipy. Jedná se především o grafický
řadič <i>VDC</i>, což je upravená varianta původního řadiče <i>Texas
Instruments TMS9918</i>, dále pak o zvukový generátor <i>Texas Instruments
SN76489</i> (ten byl sloučen s&nbsp;<i>VDC</i>) a konečně se v&nbsp;herní
konzoli <i>SMS</i> objevil i velmi zvláštní čip <i>Yamaha YM2413</i>, který se
staral a zvukovou syntézu (jak si řekneme dále, byl tento čip vytvořen jako
levnější varianta ke známému čipu <i>Yamaha YM3812</i>, s&nbsp;nímž jsme se již
na stránkách Roota setkali například při popisu zvukové karty <i>Adlib</i> či
<i>SoundBlaster</i>). Díky použití čipu <i>YM2413</i> bylo možné ve hrách
poměrně jednoduše přehrávat hudbu, aniž by docházelo k&nbsp;přílišné zátěži
mikroprocesoru. Navíc má <i>YM2413</i> specifický zvuk, kterým bylo možné
konzoli <i>Sega Master System</i> a taktéž <i>MSX</i> odlišit od dalších
výrobků.</p>

<p><ins>Poznámka: <i>MSX</i> jsme se zatím úspěšně vyhýbali, takže jen stručně:
jedná se o počítač založený na procesoru <i>Zilog Z80</i>, který měl ambice se
stát jakousi obdobou IBM PC, ovšem v&nbsp;oblasti osmibitových počítačů &ndash;
tedy standardní platformou. S&nbsp;nadsázkou se říkalo, že <i>MSX</i> znamená
&bdquo;MicroSoft eXtended&ldquo;, a to kvůli angažovanosti Microsoftu na vývoji
této platformy.</ins></p>

<img src="http://i.iinfo.cz/images/338/8206.jpg" width="450" height="185" alt="&#160;" />
<p><i>Obrázek XX: Plošný spoj herní konzole Sega Master System (SMS).</i></p>

<p>Z&nbsp;pohledu <i>Collapse OS</i> a jeho teoretického nasazení však není
důležitý zvuk, ale spíše obrazový výstup. V&nbsp;herní konzoli <i>Sega Master
System</i> byl pro generování video signálů použit čip nazvaný <i>VDC</i>.
Jednalo se o integrovaný obvod, který byl sice odvozený od původního čipu
<i>Texas Instruments TMS9918</i>, ovšem došlo u něj k&nbsp;několika vylepšením,
která měla za cíl zvýšit konkurenceschopnost konzole <i>SMS</i>, především
v&nbsp;porovnání s&nbsp;<i>Atari 7800</i>, která firmě Sega tehdy konkurovala.
Čip <i>Texas Instruments TMS9918</i> dokázal pracovat s&nbsp;maximálně
šestnácti barvami, zatímco <i>Atari 7800</i> umožňovalo zobrazit (i když
s&nbsp;mnoha omezeními) až 128 resp.&nbsp;256 barev. Taktéž rozlišení
v&nbsp;grafických režimech, které bylo nabízeno čipem <i>TMS9918</i>, bylo
relativně malé. Z&nbsp;tohoto důvodu došlo při návrhu integrovaného obvodu
<i>VDC</i> k&nbsp;několika změnám. Zejména bylo možné pracovat až s&nbsp;32
barvami rozdělenými do dvou barvových palet &ndash; jedna paleta byla vyhrazena
pro statickou grafiku (pozadí) a druhá paleta byla vyhrazena pro sprity (ve
skutečnosti mohla být použita pro pozadí i sprity stejná paleta).</p>

<a href="http://i.iinfo.cz/images/231/8106.png"><img src="http://i.iinfo.cz/images/231/8106-prev.png" width="360" height="270" alt="&#160;" /></a>
<p><i>Obrázek XX: Ukázka možností původního grafického řadiče: hra Castle.</i></p>

<p>U barvové palety ještě na malou chvíli zůstaneme. Zatímco u <i>TMS9918</i>
byla šestnáctibarevná paleta neměnná, takže všechny hry bez rozdílu námětu
používaly stále stejných šestnáct barev, bylo možné u <i>VDC</i> barvovou
paletu, přesněji řečeno obě barvové palety měnit, protože čip <i>VDC</i>
podporoval takzvanou &bdquo;color RAM&ldquo; obsahující dvě tabulky, každou o
délce šestnácti bajtů. Každá barva v&nbsp;paletě byla zadána jedním bajtem:
<strong>00RRGGBB</strong>, tj.&nbsp;pro každou barvovou složku byly vyhrazeny
dva bity a tudíž byl celkový počet kombinací barev roven 64. Možná se to může
zdát málo, ovšem například grafická karta <i>EGA</i>, jejíž cena byla
v&nbsp;polovině osmdesátých let minulého století srovnatelná s&nbsp;celou
konzolí <i>Sega Master System</i> :-) měla prakticky stejná omezení, alespoň co
se týče barvové palety.</p>

<a href="http://i.iinfo.cz/images/45/8120.png"><img src="http://i.iinfo.cz/images/45/8120-prev.png" width="360" height="270" alt="&#160;" /></a>
<p><i>Obrázek XX: Ukázka možností původního grafického řadiče: hra H.E.R.O.</i></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Collapse OS<br />
<a href="https://collapseos.org/">https://collapseos.org/</a>
</li>

<li>Public Domain Books to Restart Computer Technology<br />
<a href="https://blogbyjoshcogliati.blogspot.com/2021/05/public-domain-books-to-restart-computer.html">https://blogbyjoshcogliati.blogspot.com/2021/05/public-domain-books-to-restart-computer.html</a>
</li>

<li>Understanding Digital Computers<br />
<a href="https://archive.org/details/understanding_digital_computers">https://archive.org/details/understanding_digital_computers</a>
</li>

<li>Collapse OS Web Emulators<br />
<a href="https://schierlm.github.io/CollapseOS-Web-Emulator/">https://schierlm.github.io/CollapseOS-Web-Emulator/</a>
</li>

<li>Download: CollapseOS<br />
<a href="https://collapseos.org/download.html">https://collapseos.org/download.html</a>
</li>

<li>Civboot: a civilizational bootstrapper<br />
<a href="https://github.com/civboot/civboot">https://github.com/civboot/civboot</a>
</li>

<li>Můžeme věřit překladačům? Projekty řešící schéma „důvěřivé důvěry“<br />
<a href="https://www.root.cz/clanky/muzeme-verit-prekladacum-projekty-resici-schema-duverive-duvery/">https://www.root.cz/clanky/muzeme-verit-prekladacum-projekty-resici-schema-duverive-duvery/</a>
</li>

<li>'Collapse OS' Is An Open-Source Operating System For the Post-Apocalypse<br />
<a href="https://news.slashdot.org/story/19/10/08/2036204/collapse-os-is-an-open-source-operating-system-for-the-post-apocalypse">https://news.slashdot.org/story/19/10/08/2036204/collapse-os-is-an-open-source-operating-system-for-the-post-apocalypse</a>
</li>

<li>LCD 16 x 2 Basics<br />
<a href="https://exploreembedded.com/wiki/LCD_16_x_2_Basics">https://exploreembedded.com/wiki/LCD_16_x_2_Basics</a>
</li>

<li>How To Control an I2C LCD with Arduino<br />
<a href="https://www.make-it.ca/i2c-lcd-display-on-arduino/">https://www.make-it.ca/i2c-lcd-display-on-arduino/</a>
</li>

<li>SD Standard Overview<br />
<a href="https://www.sdcard.org/developers/sd-standard-overview/">https://www.sdcard.org/developers/sd-standard-overview/</a>
</li>

<li>Sega Master System Hardware<br />
<a href="http://www.smspower.org/Development/Documents">http://www.smspower.org/Development/Documents</a>
</li>

<li>SMS/GG hardware notes<br />
<a href="http://www.smspower.org/uploads/Development/smstech-20021112.txt?sid=28c370e1fcac51d5774319979bf96f4c">http://www.smspower.org/uploads/Development/smstech-20021112.txt?sid=28c370e1fcac51d5774319979bf96f4c</a>
</li>

<li>Sega Master System Museum<br />
<a href="http://alexkidd.com/">http://alexkidd.com/</a>
</li>

<li>Jadeite's Sega Master System Museum<br />
<a href="http://rp_gamer.tripod.com/SMS/1.html">http://rp_gamer.tripod.com/SMS/1.html</a>
</li>

<li>YM2413 FM Operator Type-LL (OPLL) Application Manual<br />
<a href="http://www.smspower.org/maxim/Documents/YM2413ApplicationManual?sid=28c370e1fcac51d5774319979bf96f4c">http://www.smspower.org/maxim/Documents/YM2413ApplicationManual?sid=28c370e1fcac51d5774319979bf96f4c</a>
</li>

<li>Sega Master System (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sega_Master_System">http://en.wikipedia.org/wiki/Sega_Master_System</a>
</li>

<li>Sega Card (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sega_Card">http://en.wikipedia.org/wiki/Sega_Card</a>
</li>

<li>Sega Master System VDP documentation<br />
<a href="http://www.smspower.org/uploads/Development/msvdp-20021112.txt?sid=28c370e1fcac51d5774319979bf96f4c">http://www.smspower.org/uploads/Development/msvdp-20021112.txt?sid=28c370e1fcac51d5774319979bf96f4c</a>
</li>

<li>Programovací jazyk Forth a zásobníkové procesory<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory/">http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory/</a>
</li>

<li>Seriál Programovací jazyk Forth<br />
<a href="http://www.root.cz/serialy/programovaci-jazyk-forth/">http://www.root.cz/serialy/programovaci-jazyk-forth/</a>
</li>

<li>Programovací jazyk Factor<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-factor/">http://www.root.cz/clanky/programovaci-jazyk-factor/</a>
</li>

<li>Grafický metaformát PostScript<br />
<a href="http://www.root.cz/clanky/graficky-metaformat-postscript/">http://www.root.cz/clanky/graficky-metaformat-postscript/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

