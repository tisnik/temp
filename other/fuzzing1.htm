<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Úvod do problematiky fuzzingu a fuzz testování</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Úvod do problematiky fuzzingu a fuzz testování</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Již několikrát jsme se na stránkách Rootu, především v každotýdenních postřezích z bezpečnosti, mohli setkat s termínem fuzzing nebo fuzz testování. V tomto článku se pokusíme o vysvětlení významu tohoto termínu. Popíšeme si i některé knihovny a nástroje používané pro fuzzing.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Úvod do problematiky fuzzingu a fuzz testování</a></p>
<p><a href="#k02">*** 2. Typy fuzzingu</a></p>
<p><a href="#k03">*** 3. Zrod termínu &bdquo;fuzzing&ldquo;</a></p>
<p><a href="#k04">*** 4. Vyhledávání operačních kódů neznámých instrukcí aneb slavná instrukce HCF</a></p>
<p><a href="#k05">*** 5. Pentium F00F bug</a></p>
<p><a href="#k06">*** 6. Nástroj <strong>crashme</strong></a></p>
<p><a href="#k07">*** 7. Fuzzy testování API a ABI</a></p>
<p><a href="#k08">*** 8. Slavný nástroj <strong>AFL</strong> &ndash; american fuzzy lop</a></p>
<p><a href="#k09">*** 9. Generování vstupních souborů</a></p>
<p><a href="#k10">*** 10. Fuzzy testování webových služeb a webových aplikací</a></p>
<p><a href="#k11">*** 11. Přehled vybraných knihoven pro fuzzy testování</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Úvod do problematiky fuzzingu a fuzz testování</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Typy fuzzingu</h2>

<p>Nástrojů pro fuzzy testování (budeme již říkat <i>fuzzery</i>) dnes existuje poměrně velké množství, ovšem ne všechny nástroje nabízí stejné vlastnosti a možnosti. Tyto nástroje je možné rozdělit podle několika kritérií, zejména:</p>

<ol>

<li>Jakým způsobem jsou generovány vstupy použité v&nbsp;testech</li>

<li>Zda fuzzer zná a využívá informace o vnitřní struktuře testovaného systému či nikoli (black-box, white-box a gray-box testování)</li>

<li>A dále podle toho, zda fuzzer rozumí struktuře vstupních dat či zda jen pseudonáhodně generuje vstupy bez dalších potřebných znalostí</li>

</ol>

<p><div class="rs-tip-major">Poznámka: obecně neplatí, že je nejlepší použít takový fuzzer, který zná a využívá informace o vnitřní struktuře testovaného systému a navíc i &bdquo;chápe&ldquo; vstupní data. Mnoho chyb lze odhalit i naprosto jednoduchým fuzzerem, například dále zmíněným nástrojem <strong>crashme</strong>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zrod termínu &bdquo;fuzzing&ldquo;</h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vyhledávání operačních kódů neznámých instrukcí aneb slavná instrukce HCF</h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pentium F00F bug</h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. Nástroj <strong>crashme</strong></h2>

<p><i>&bdquo;DO NOT USE THIS PROGRAM UNLESS YOU REALLY WANT TO CRASH YOUR COMPUTER.&ldquo;</i></p>

<p>Jedním z&nbsp;dnes již historických nástrojů, které je však možné stále nainstalovat, je nástroj nazvaný jednoduše a stručně <strong>crashme</strong>. Tento nástroj generuje náhodné sekvence bajtů, které se následně snaží spustit. Tímto způsobem se testuje stabilita a odolnost jádra operačního systému &ndash; předpokládá se totiž (a to zcela oprávněně), že ani zcela náhodná sekvence bajtů by neměla způsobit pád jádra operačního systému.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Fuzzy testování API a ABI</h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Slavný nástroj <strong>AFL</strong> &ndash; american fuzzy lop</h2>

<p>Jedním z&nbsp;nejpoužívanějších a dalo by se říci, že i nejslavnějších fuzzy nástrojů je <i>AFL</i> neboli <i>american fuzzy lop</i>.</p>

<p><div class="rs-tip-major">Poznámka: možná se ptáte, z&nbsp;jakého důvodu by měl být nějaký obskurní fuzzy nástroj slavný. Je tomu tak z&nbsp;toho důvodu, že AFL byl použit pro odhalení některých poměrně závažných chyb, které (podle dnešní módy) dostaly i svá jména. Konkrétně se jednalo o Shellshock neboli Bashdoor, tedy o problém, který v&nbsp;důsledku postihl velké množství různých webových serverů i dalších služeb, které interně používají BASH.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Generování vstupních souborů</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. Fuzzy testování webových služeb a webových aplikací</h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Přehled vybraných knihoven pro fuzzy testování</h2>

<p>V&nbsp;navazujících kapitolách se ve stručnosti zmíníme o vybraných knihovnách, které je možné použít pro fuzzy testování. Vybrané knihovny jsou určeny pro různé programovací jazyky a mají i rozdílnou funkci &ndash; některé testují API a ABI, další jsou určeny spíše pro testování odolnosti celých aplikací, ostatní pak například pro testování webových služeb a aplikací založených na protokolu HTTP nebo HTTP/2.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Fuzzing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fuzzing">https://en.wikipedia.org/wiki/Fuzzing</a>
</li>

<li>american fuzzy lop<br />
<a href="http://lcamtuf.coredump.cx/afl/">http://lcamtuf.coredump.cx/afl/</a>
</li>

<li>AFL &ndash; QuickStartGuide.txt<br />
<a href="https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt">https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt</a>
</li>

<li>Introduction to Fuzzing in Python with AFL<br />
<a href="https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/">https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/</a>
</li>

<li>Writing a Simple Fuzzer in Python<br />
<a href="https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/">https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/</a>
</li>

<li>Golang Fuzzing: A go-fuzz Tutorial and Example<br />
<a href="http://networkbit.ch/golang-fuzzing/">http://networkbit.ch/golang-fuzzing/</a>
</li>

<li>Fuzzing Python Modules<br />
<a href="https://stackoverflow.com/questions/20749026/fuzzing-python-modules">https://stackoverflow.com/questions/20749026/fuzzing-python-modules</a>
</li>

<li>0x3 Python Tutorial: Fuzzer<br />
<a href="http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/">http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/</a>
</li>

<li>fuzzing na PyPi<br />
<a href="https://pypi.org/project/fuzzing/">https://pypi.org/project/fuzzing/</a>
</li>

<li>Fuzzing 0.3.2 documentation<br />
<a href="https://fuzzing.readthedocs.io/en/latest/">https://fuzzing.readthedocs.io/en/latest/</a>
</li>

<li>Randomized testing for Go<br />
<a href="https://github.com/dvyukov/go-fuzz">https://github.com/dvyukov/go-fuzz</a>
</li>

<li>HTTP/2 fuzzer written in Golang<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Ffuf (Fuzz Faster U Fool) – An Open Source Fast Web Fuzzing Tool<br />
<a href="https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html">https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html</a>
</li>

<li>Continuous Fuzzing Made Simple<br />
<a href="https://fuzzit.dev/">https://fuzzit.dev/</a>
</li>

<li>Halt and Catch Fire<br />
<a href="https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86">https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86</a>
</li>

<li>Pentium F00F bug<br />
<a href="https://en.wikipedia.org/wiki/Pentium_F00F_bug">https://en.wikipedia.org/wiki/Pentium_F00F_bug</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

