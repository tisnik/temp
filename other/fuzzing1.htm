<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Úvod do problematiky fuzzingu a fuzz testování</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Úvod do problematiky fuzzingu a fuzz testování</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Již několikrát jsme se na stránkách Rootu, především v každotýdenních postřezích z bezpečnosti, mohli setkat s termínem fuzzing nebo fuzz testování. V tomto článku se pokusíme o vysvětlení významu tohoto termínu. Popíšeme si i některé knihovny a nástroje používané pro fuzzing.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Úvod do problematiky fuzzingu a fuzz testování</a></p>
<p><a href="#k02">2. Typy fuzzingu</a></p>
<p><a href="#k03">3. Zrod termínu &bdquo;fuzzing&ldquo;</a></p>
<p><a href="#k04">4. Vyhledávání operačních kódů neznámých instrukcí aneb slavná instrukce HCF</a></p>
<p><a href="#k05">5. Pentium F00F bug</a></p>
<p><a href="#k06">6. Nástroj <strong>crashme</strong></a></p>
<p><a href="#k07">7. Fuzzy testování API a ABI</a></p>
<p><a href="#k08">8. Slavný nástroj <strong>AFL</strong> &ndash; american fuzzy lop</a></p>
<p><a href="#k09">9. Generování vstupních souborů</a></p>
<p><a href="#k10">10. Fuzzy testování webových služeb a webových aplikací</a></p>
<p><a href="#k11">11. Přehled vybraných knihoven pro fuzzy testování</a></p>
<p><a href="#k12">12. Hypothesis</a></p>
<p><a href="#k13">13. pythonfuzz</a></p>
<p><a href="#k14">14. go-fuzz</a></p>
<p><a href="#k15">15. gofuzz</a></p>
<p><a href="#k16">16. tavor</a></p>
<p><a href="#k17">17. JQF</a></p>
<p><a href="#k18">18. Obsah následujícího článku</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Úvod do problematiky fuzzingu a fuzz testování</h2>

<p>V&nbsp;dnešním článku se alespoň ve stručnosti seznámíme
s&nbsp;problematikou takzvaného <i>fuzzingu</i> a <i>fuzz testování</i>. Jedná
se o techniky určené pro testování stability, korektnosti a bezpečnosti
aplikací či celých informačních systémů, které navíc mohou být &ndash;
v&nbsp;porovnání s&nbsp;ručně vytvářenými testy &ndash; velmi efektivní jak
z&nbsp;hlediska počtu nalezených chyb, tak i lidského času, který je nutné
testování věnovat. Principem fuzzingu je (velmi vágně řečeno) generování
pseudonáhodných dat, posílání těchto dat do testovaného systému a zjišťování,
jak se systém chová, tedy jak na vstupní data reaguje. Předchůdcem dnešních
mnohdy velmi sofistikovaných systémů pro fuzzing jsou <i>random testy</i>,
v&nbsp;některých odvětvích IT nazývané taktéž <i>monkey testy</i>. Toto
označení vzniklo z&nbsp;představy tlupy opic, které na klávesnici vytváří
nesmyslné sekvence znaků, jež jsou následně posílány do testované aplikace,
popř.&nbsp;jiné tlupy opic zcela náhodně klikajících myší v&nbsp;grafickém
uživatelském prostředí nějaké aplikace (mimochodem &ndash; tyto testy se někdy
provádí skutečně ručně, což je ovšem velmi drahé a navíc ani nelze zaručit
například skutečnou náhodnost sekvence prováděných operací).</p>

<p><div class="rs-tip-major">Poznámka: pro původní osobní počítače Macintosh
dokonce vznikl systém pro testování GUI aplikací, který se přímo jmenoval
&bdquo;The Monkey&ldquo;.</div></p>

<p>Fuzzy testování je v&nbsp;současnosti považováno za poněkud odlišnou
kategorii než monkey testování, a to z&nbsp;toho důvodu, že mnohé moderní
<i>fuzzery</i> (příkladem budiž slavný <i>AFL</i> zmíněný v&nbsp;dalším textu)
neprodukují čistě náhodné vstupy pro testovanou aplikaci, ale naopak se snaží
produkovat vstup, který je do značné míry korektní, ovšem nějaká jeho část je
vhodným způsobem modifikována. Navíc se většinou fuzzery snaží najít minimální
množinu vstupních dat, která produkuje špatné výsledky popř.&nbsp;způsobí pád
aplikace. Fuzzing se ovšem používá nejenom pro čisté testování stability,
korektnosti a bezpečnosti aplikací. Lze ho taktéž použít pro řízené útoky na
jednotlivé aplikace, služby operačního systému, samotná jádra operačního
systému a dokonce i na samotný hardware. Fuzzing tak může být do jisté míry
alternativou či spíše doplňkem penetračních testů (ty mohou být velmi časově
náročné z&nbsp;pohledu lidského času).</p>

<p><div class="rs-tip-major">Poznámka: takové útoky je vhodné provést již
v&nbsp;průběhu vývoje a prvotního nasazování systému (samozřejmě v&nbsp;řízeném
prostředí), protože lze předpokládat, že je dříve či později stejně provede
někdo jiný :-)</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Typy fuzzingu</h2>

<p>Nástrojů a knihoven určených pro fuzzy testování (v&nbsp;dalším textu jim
většinou budeme zkráceně říkat <i>fuzzery</i>) dnes existuje poměrně velké
množství, ovšem ne všechny dostupné nástroje nabízí svým uživatelům stejné
vlastnosti a možnosti. Obecně je možné fuzzery rozdělit podle několika
kritérií, zejména:</p>

<ol>

<li>Jakým způsobem jsou generovány vstupy použité v&nbsp;testech a jak je vůbec
specifikováno, o jaká data se má jednat.</li>

<li>Zda fuzzer zná a nějakým způsobem využívá informace o vnitřní struktuře
testovaného systému či nikoli (rozdělení je na <i>black-box</i>,
<i>white-box</i> a <i>gray-box</i> testování).</li>

<li>A dále podle toho, zda a jak fuzzer rozumí struktuře vstupních dat či zda
jen pseudonáhodně generuje vstupy bez dalších potřebných znalostí či zpětné
vazby (ta je mnohdy důležitá pro vytvoření minimální sady vstupů, které způsobí
chybu).</li>

<li>Zda fuzz testy zjišťují pokrytí (<i>coverage</i>) a upravují podle toho
svoji sadu testovacích dat (korpus). Obecně se jedná o nejrychlejší cestu
k&nbsp;nalezení chyby.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: obecně však neplatí, že je za všech
okolností nejlepší použít takový fuzzer, který zná a využívá informace o
vnitřní struktuře testovaného systému a navíc i &bdquo;chápe&ldquo; vstupní
data. Mnoho chyb lze odhalit i naprosto jednoduchým fuzzerem, například dále
zmíněným nástrojem <strong>crashme</strong> (čímž se přibližujeme
k&nbsp;vlastnostem původních monkey testů). Předností jednoduchých fuzzerů je
mj.&nbsp;i jejich snadné ovládání.</div></p>

<p>Je ovšem důležité si uvědomit, že fuzz testy nejsou náhradou jednotkových
testů, ale jejich vhodným doplňkem.</p>

<p>Jak pracují fuzzery založené na zjišťování pokrytí si můžeme ukázat na tomto
kódu, který spadne pouze jediný vstup, a to konkrétně
&bdquo;1234&ldquo;:</p>

<pre>
if input[0] == '1' {
    if input[1] == '2' {
        if input[2] == '3' {
            if input[3] == '4' {
                panic("Foobar!")
}}}}
</pre>

<p>Testy založené na náhodném vzorku vstupů by vyžadovaly O(256<sup>4</sup>),
tj.&nbsp;O(2<sup>32</sup>) operací, zatímco pokud fuzzer sleduje pokrytí kódu,
může dojít k&nbsp;chybě již za O(4*2<sup>8</sup>) operací, tedy mnohem
rychleji. Takzvaný <i>korpus</i> s&nbsp;testovacími daty bude postupně
obsahovat:</p>

<pre>
"1"
"1" "12"
"1" "12" "123"
"1" "12" "123" "1234"
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zrod termínu &bdquo;fuzzing&ldquo;</h2>

<p>Termín <i>fuzzing</i> se začal používat již v&nbsp;roce 1988. Byl vymyšlen a
zaveden Bartonem Millerem, který si všiml, že náhodné vstupy (způsobené šumem
na telefonní lince, kterou používal po připojení k&nbsp;univerzitnímu serveru
s&nbsp;Unixem) přivedené do některých programů a utilit mohou vést
k&nbsp;jejich pádu, tj.&nbsp;že zdaleka ne všechny vstupy jsou vždy řádným
způsobem ošetřeny (mimochodem: testovaly se klasické unixové programy a
utility, včetně <a
href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-2/#k03">textového
editoru Vi</a>, awk, sort, sed, překladače cc atd.). Následně tento poznatek
rozšířil a na kurzu, který na universitě vedl (<i>Advanced Operating
System</i>) se tímto tématem začali do větší hloubky věnovat i jeho studenti. A
právě na tomto kurzu se začal používat termín &bdquo;fuzz&ldquo;. Zpočátku se
sice fuzzing používal pro testování utility spouštěných z&nbsp;příkazové řádky,
ale později byl celý koncept rozšířen i na aplikace s&nbsp;grafickým
uživatelským rozhraním (tím se vlastně navázalo na starší nástroj &bdquo;The
Monkey&ldquo; zmíněný <a href="#k01">v&nbsp;úvodní kapitole</a>).</p>

<p><div class="rs-tip-major">Poznámka: bližší informace o historii vzniku fuzzy
testování je možné najít v&nbsp;knize <a
href="https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false">Fuzzing
for Software Security Testing and Quality Assurance, Second
Edition</a>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vyhledávání operačních kódů neznámých instrukcí aneb slavná instrukce HCF</h2>

<p>Techniky podobné fuzzingu se ovšem používaly i dříve, než vůbec termín
<i>fuzz testing</i> vznikl. Oblíbenou kratochvílí bylo například vyhledávání
nových operačních kódů nedokumentovaných instrukcí v&nbsp;instrukčních
souborech starších procesorů a mikroprocesorů, u nichž se kvůli zjednodušení
návrhu dekodéru (a většinou i mikroprogramového řadiče) neošetřovaly neznámé
vstupy. Již v&nbsp;dobách počítačů řady <a
href="https://www.root.cz/clanky/salove-pocitace-serie-ibm-1400-a-system-360/#k04">IBM
System/360</a> se polovážně mluvilo o instrukci s&nbsp;mnemotechnickou zkratkou
<strong>HCF</strong> neboli plným jménem <i>Halt and Catch Fire</i> (vtip
vznikl na základě toho, že instrukční soubor těchto systémů byl velmi rozsáhlý
a mnohé zkratky nedávaly příliš velký význam). Tato instrukce sice ve
skutečnosti pro řadu S/360 neexistovala, ale později se mnemotechnická zkratka
<strong>HCF</strong> začala používat pro jiné nedokumentované instrukce, které
nalezneme například u čipů <a
href="https://www.liquisearch.com/halt_and_catch_fire/in_modern_cpus/motorola_6800">Motorola
6800</a> (dvoubajtová sekvence způsobující zablokování mikroprocesoru), <a
href="http://nparker.llx.com/a2/opcodes.html">MOS 6502</a> (kombinace několika
jednodušších instrukcí, některé dokonce dávají smysl), ale i u čipů <a
href="http://www.z80.info/z80undoc.htm">Z80</a> apod.</p>

<p><div class="rs-tip-major">Poznámka: &bdquo;Halt and Catch Fire&ldquo; sice
může znít dosti hrozivě, ovšem naprostá většina nedokumentovaných instrukcí
pouze procesor nějakým způsobem zablokovala, takže postačovalo použít signál
reset pro jeho uvedení do funkčního stavu.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pentium F00F bug</h2>

<p>Jednou z&nbsp;nejznámějších neplatných instrukcí spadajících do
&bdquo;kategorie HCF&ldquo; (která byla pravděpodobně objevena právě zkoušením
různých kombinací neznámých operačních kódů nějakým jednoduchým fuzzerem) je
instrukce mikroprocesorů Intel Pentium, která by v&nbsp;assembleru vypadala
následovně (nejedná se ovšem o validní instrukci, protože operandem by
v&nbsp;tomto případě měla být adresa v&nbsp;paměti a nikoli pracovní registr,
už vůbec ne registr eax, který je operandem implicitním):</p>

<pre>
lock cmpxchg8b eax
</pre>

<p>operační kód této instrukce v&nbsp;hexadecimálním kódu je:</p>

<pre>
F0 0F C7 C8
</pre>

<p>přičemž první dva znaky daly této chybě jméno (už jen proto, že je
v&nbsp;nich pěkný vzorek a extrémní hodnoty hexadecimálních číslic). Problém
&ndash; a to v&nbsp;době objevení této chyby poměrně velký &ndash; spočíval
v&nbsp;tom, že nevalidní instrukce by měly způsobit výjimku, kterou je možné
dále zpracovat (aby například jádro systému mohlo vypsat informaci o tom, kde
k&nbsp;takové výjimce došlo). Ovšem kombinace prefixu <strong>lock</strong>
(zamčení sběrnice pro další procesory) s&nbsp;touto konkrétní instrukcí a
operandy způsobila, že ani obsluha výjimky nebyla schopna přečíst data přes
zamčenou sběrnici. Výsledkem bylo, že i běžný program spouštěný s&nbsp;právy
běžného uživatele, dokázal celý procesor zastavit a ten musel být
zresetován.</p>

<p><div class="rs-tip-major">Poznámka: zhruba ve stejné době byla objevena i
chybná instrukce v&nbsp;mikroprocesorech Cyrix. Ta dostala název <i>Cyrix coma
bug</i> a projevovala se podobně &ndash; po pokusu o vykonání této instrukce
bylo zapotřebí mikroprocesor zresetovat.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Nástroj <strong>crashme</strong></h2>

<p><i>&bdquo;DO NOT USE THIS PROGRAM UNLESS YOU REALLY WANT TO CRASH YOUR
COMPUTER.&ldquo;</i></p>

<p>Vraťme se ještě na chvíli k&nbsp;prehistorii nástrojů, které bychom dnes
zařadili do kategorie <i>Monkey tester</i> nebo i <i>fuzzer</i>. Jedním
z&nbsp;dnes již značně letitých nástrojů, které je však možné stále
nainstalovat i na moderní Linuxové distribuce, je nástroj nazvaný jednoduše a
stručně <strong>crashme</strong>. Tento nástroj generuje náhodné sekvence
bajtů, které se následně snaží spustit (čímž se vlastně blíží k&nbsp;hledání
neznámých instrukcí atd.). Tímto způsobem se testuje stabilita a odolnost jádra
operačního systému &ndash; předpokládá se totiž (a to zcela oprávněně), že ani
zcela náhodná sekvence bajtů by neměla způsobit pád jádra operačního systému.
Ovšem jak jsme mohli vidět <a href="#k05">v&nbsp;předchozí kapitole</a>, ne
vždy musí být chyba přítomna v&nbsp;samotném jádře systému, protože moderní
mikroprocesory (především ty s&nbsp;CISCovou instrukční sadou) jsou již velmi
složité obvody, které prakticky <i>musí</i> obsahovat chyby, jež jsou &ndash;
jak ostatně můžeme číst prakticky každý měsíc &ndash; jen složitě odhalitelné
a opravitelné.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Fuzzy testování API a ABI</h2>

<p>Velmi často se fuzzery používají pro testování API popř.&nbsp;i ABI, tedy
rozhraní nabízených knihovnami popř.&nbsp;i jádrem operačního systému. Typicky
jsou fuzzery v&nbsp;tomto případě vhodným způsobem nakonfigurovány, aby mohly
volat nativní funkce popř.&nbsp;metody a předávat jim generované parametry.
Existují ovšem i sofistikovanější varianty fuzzerů, které je možné přilinkovat
k&nbsp;testované knihovně a tuto knihovnu dále používat (což bude pomalé, ovšem
odhalí se tím množství potenciálních chyb). Díky tomu může fuzzer zjistit,
který kód je pro jaké vstupy skutečně použit a příslušným způsobem vstupní data
modifikovat. Příkladem takového fuzzeru je <a
href="https://llvm.org/docs/LibFuzzer.html">libFuzzer</a>, který využívá <a
href="http://clang.llvm.org/docs/SanitizerCoverage.html">SanitizerCoverage</a>.
Tímto typem fuzzerů se budeme zabývat v&nbsp;samostatném článku.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Slavný nástroj <strong>AFL</strong> &ndash; american fuzzy lop</h2>

<p>Jedním z&nbsp;nejpoužívanějších a dalo by se říci, že i nejslavnějších fuzzy
nástrojů je <i>AFL</i> neboli <i>american fuzzy lop</i>. Tento nástroj, kterému
bude pochopitelně věnován samostatný článek, je možné použít pro zjištění
neošetřených vstupů i potenciálních bezpečnostním problémů u prakticky
libovolného typu aplikace. Primárně se jedná o binární spustitelné aplikace,
ovšem <i>AFL</i> je v&nbsp;případě potřeby možné zkombinovat například i
s&nbsp;Pythonem atd. <i>AFL</i> typicky zkouší různé vstupy a na základě
chování aplikace se snaží odvodit takovou kombinaci vstupních dat (o minimální
velikosti), která způsobí chybu. Samozřejmě se mnohdy může jednat o časově
náročný proces, proto <i>AFL</i> obsahuje dnes již typický výstup
s&nbsp;informacemi o probíhajících operacích:</p>

<p><img src="https://i.iinfo.cz/images/413/afl-1.png" class="image-404488" alt="&#160;" width="720" height="360" /></p>
<p><i>Obrázek: Činnost AFL (zdroj: http://lcamtuf.coredump.cx/afl/)</i></p>

<p><div class="rs-tip-major">Poznámka: možná se ptáte, co mě vedlo k&nbsp;tomu
napsat, že by měl být nějaký obskurní fuzzy nástroj slavný. Je tomu tak
především z&nbsp;toho důvodu, že AFL byl použit pro odhalení některých poměrně
závažných chyb, které (podle dnešní módy) dostaly i svá jména a nejenom pouhé
číslo <a href="https://www.cvedetails.com/">v&nbsp;databázi CVE</a>. Konkrétně
se jednalo o Shellshock neboli Bashdoor, tedy o problém, který v&nbsp;důsledku
postihl velké množství různých webových serverů i dalších služeb, které interně
používají BASH.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Generování vstupních souborů</h2>

<p>Fuzzery se taktéž používají pro generování vstupních souborů, které jsou
zpracovávány testovanými aplikacemi (což ostatně umí právě zmíněný <i>AFL</i>).
V&nbsp;závislosti na typu aplikace může být takové testování přímočaré, ale
mnohdy i velmi komplikované. Přímočaré testování lze použít u prakticky všech
nástrojů, které čtou jeden vstupní soubor (či standardní vstup). Příkladem
mohou být klasické unixové filtry (sort, uniq, sed, awk), ale i interně mnohem
složitější nástroje typu překladač, interpret, linker, assembler apod., které
již mnohdy vyžadují značně sofistikovaný fuzzer. Uveďme si ještě jeden příklad
komplikovaného testování využívající fuzzer. Může se jednat o JVM či o webový
browser, což jsou aplikace s&nbsp;mnoha (mnohdy poněkud skrytými vstupy).
Například se jedná o soubory s&nbsp;fonty, což jsou (u TrueType) interně velmi
komplikované datové struktury s&nbsp;mnoha interními referencemi, přičemž
jakákoli chyba v&nbsp;knihovně, která tyto fonty zpracovává, může vést
(v&nbsp;tom lepším případě) k&nbsp;pádu JVM/webového browseru, v&nbsp;horším
případě pak k&nbsp;obejití &bdquo;sandboxu&ldquo; či dokonce k&nbsp;pádu celého
GUI na straně uživatele.</p>

<p><div class="rs-tip-major">Poznámka: tento příklad uvádím schválně, protože
se již podobné chyby našly (libfreetype, to mělo dopad i na OpenJDK), nehledě
na podobné knihovny pro práci s&nbsp;rastrovými obrázky atd.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Fuzzy testování webových služeb a webových aplikací</h2>

<p>Po relativně dlouhé časové období se fuzzy testování používalo zejména pro
zjišťování problémů v&nbsp;různých knihovnách (zmiňme například SSL, libpng,
FreeType, Qt), utilitách a například i překladačích. Ovšem dnes můžeme sledovat
poměrně rychlou adaptaci této technologie při testování webových služeb či
celých webových aplikací. Je to ostatně logické, zejména když si uvědomíme, že
právě webové služby a aplikace poskytují svá rozhraní mnohdy všem uživatelům
Internetu a tedy i mnoha potenciálním útočníkům. Snaha o co nejlepší
zabezpečení je tedy v&nbsp;této oblasti IT zcela pochopitelná. Testovat je
možné například REST API. V&nbsp;tomto případě mohou fuzzery použít popis API
(OpenAPI/Swagger atd.) a na základě něho začít generovat různé potenciálně
problematické vstupy se snahou o obejití vnitřních kontrolních mechanismů
aplikace či služby. Některé nástroje, například <a
href="https://github.com/dubzzz/fuzz-rest-api/">https://github.com/dubzzz/fuzz-rest-api/</a>,
se navíc snaží o různé specifické typy útoků, například do dat přidávají
řetězce s&nbsp;příklady <i>SQL Injection</i> apod. Dále lze pochopitelně
posílat pseudonáhodná data v&nbsp;tělech požadavků, měnit parametry URL i
hlavičky požadavků.</p>

<p><div class="rs-tip-major">Poznámka: sice to většinou nebývá primárním cílem
fuzzy testů, ale mj.&nbsp;i díky nim je možné odhalit i různé výkonnostní
problémy. Například tehdy, pokud je ošetření vstupů realizováno až na
databázové vrstvě apod.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Přehled vybraných knihoven pro fuzzy testování</h2>

<p>V&nbsp;navazujících sedmi kapitolách se ve stručnosti zmíníme o vybraných
knihovnách, které je možné použít pro fuzzy testování. Vybrané knihovny jsou
určeny pro rozličné programovací jazyky a mají i rozdílnou funkci &ndash;
některé testují API a ABI, další jsou určeny spíše pro testování odolnosti
celých aplikací, ostatní pak například pro testování webových služeb a aplikací
založených na protokolu HTTP nebo HTTP/2. Nejprve si popíšeme některé knihovny
určené pro programovací jazyk Python (seznam dalších knihoven s&nbsp;podobným
zaměřením je dostupný například <a
href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools">zde</a>),
ovšem nezapomeneme ani na programovací jazyk Go (viz též <a
href="https://github.com/avelino/awesome-go#testing">tento obsáhlý seznam</a>)
či na mainstreamový programovací jazyk Java s&nbsp;jeho rozsáhlým
ekosystémem.</p>

<p><div class="rs-tip-major">Poznámka: je nutné si uvědomit, že zdaleka ne
všechny knihovny, které ve svém názvu obsahují slovo &bdquo;fuzz&ldquo; nebo
&bdquo;fuzzy&ldquo;, jsou skutečně určeny pro fuzzy testování. Může se jednat
například o implementaci fuzzy logiky (velmi zajímavá disciplína, příkladem
může být balíček <i>scikit-fuzzy</i>) či pro fuzzy porovnávání řetězců, tedy
pro zjišťování podobnosti řetězců (<i>fuzzywuzzy</i> a mnoho dalších podobně
zaměřených balíčků).</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Hypothesis</h2>

<p>Prvním nástrojem, který je do určité míry založen na fuzzingu, je nástroj
nazvaný <i>Hypothesis</i>. Jedná se o nástroj původně určený pro testování
aplikací naprogramovaných v&nbsp;Pythonu, ovšem rozšiřuje se i do dalších
oblastí. Primárním cílem <i>Hypothesis</i> je automatické generování testů na
základě pouze základních pravidel resp.&nbsp;scénářů zadaných programátorem. Na
rozdíl od klasických testů, v&nbsp;nichž je nutné jednotlivé scénáře explicitně
zapisovat se v&nbsp;případě <i>Hypothesis</i> v&nbsp;jediném scénáři
specifikuje celý rozsah parametrů, na jejichž základě se pak jednotlivé testy
automaticky generují. V&nbsp;článcích, které popisují rozdíly mezi klasicky
pojatými testy a Hypothesis, se běžné testy označují jako <i>example-based</i>,
tedy testy, v&nbsp;nichž jsou explicitně zadány příklady vstupních dat
(například se budeme snažit předat zápornou hodnotu, maximální a minimální
povolenou hodnotu, nekonečno atd.). Naproti tomu se testy vytvářené
s&nbsp;využitím Hypothesis označují jako <i>property-based</i>.</p>

<p>Příklad velmi jednoduchého testu (získaného přímo z&nbsp;dokumentace). Tento
test zjistí, zda funkce volání <strong>decode(encode(řetězec))</strong> dává
korektní výsledky (původní řetězec) pro každý vstup:</p>

<pre>
from hypothesis import given
from hypothesis.strategies import text
&nbsp;
&nbsp;
@given(text())
def test_decode_inverts_encode(s):
    assert decode(encode(s)) == s
</pre>

<p>Příklad nalezené chyby v&nbsp;programovém kódu, konkrétně pro případ, že je
vstupní řetězec prázdný:</p>

<pre>
Falsifying example: test_decode_inverts_encode(s='')
&nbsp;
UnboundLocalError: local variable 'character' referenced before assignment
</pre>

<p>Jiný jednoduchý příklad, tentokrát pro binární data:</p>

<pre>
@given(binary())
def test_decode_inverts_encode(s):
    assert fromutf8b(toutf8b(s)) == s 
</pre>

<p><div class="rs-tip-major">Poznámka: existuje i varianta tohoto nástroje pro
jazyk Ruby i pro Javu. V&nbsp;případě Javy se však prozatím jedná o
prototyp.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. pythonfuzz</h2>

<p>Jedná se o klasický fuzzer určený pro použití v&nbsp;programovacím jazyce
Python. Zjišťuje se přitom pokrytí testované funkce či metody a vstupní data se
vybírají takovým způsobem, aby pokrytí bylo co největší. Navíc je možné použít
takzvaný <i>korpus</i>, který mj.&nbsp;zajišťuje, že další testování bude
probíhat za stejných podmínek, jako testování předchozí. Pro dnešek si pouze
ukažme příklad použití:</p>

<pre>
from html.parser import HTMLParser
from pythonfuzz.main import PythonFuzz
&nbsp;
&nbsp;
@PythonFuzz
def fuzz(buf):
    try:
        string = buf.decode("ascii")
        parser = HTMLParser()
        parser.feed(string)
    except UnicodeDecodeError:
        pass
</pre>

<p>Tato funkce je volána neustále dokola s&nbsp;náhodně generovanými daty.
Přitom se testuje metoda <strong>HTMLParser.feed()</strong>, která může pro
neplatný vstup vyhazovat výjimku typu <strong>UnicodeDecodeError</strong>.
Pokud tato výjimka nastane, je ignorována, ovšem ostatní výjimky jsou knihovnou
<strong>pythonfuzz</strong> detekovány.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. go-fuzz</h2>

<p>Nástroj <strong>go-fuzz</strong>, jehož zdrojové kódy jsou dostupné na
adrese <a
href="https://github.com/dvyukov/go-fuzz">https://github.com/dvyukov/go-fuzz</a>,
je určen pro použití v&nbsp;programovacím jazyku Go, zejména pro testování
korektnosti zpracování vstupů předávaných funkcím a metodám. I tento nástroj
již našel mnoho chyb, které jsou vypsány <a
href="https://github.com/dvyukov/go-fuzz#trophies">zde</a>. Následuje ukázka
primitivního příkladu použití, jenž testuje chování funkce
<strong>png.Decode</strong> pro jakákoli vstupní data:</p>

<pre>
func Fuzz(data []byte) int {
        png.Decode(bytes.NewReader(data))
        return 0
}
</pre>

<p>popř.&nbsp;taktéž (kontroluje se <a
href="https://www.root.cz/clanky/serializace-a-deserializace-datovych-struktur-v-programovacim-jazyce-go/#k14">formát
gob</a>):</p>

<pre>
func Fuzz(data []byte) int {
        gob.NewDecoder(bytes.NewReader(data)).Decode(new(interface{}))
        return 0
}
</pre>

<p>Tuto knihovnu si popíšeme příště.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. gofuzz</h2>

<p>Druhou knihovnou pro fuzz testování určenou pro použití s&nbsp;programovacím
jazykem Go je knihovna nazvaná <a
href="https://github.com/google/gofuzz">gofuzz</a>. Jedná se o relativně
jednoduchý balíček, který slouží pro generování pseudonáhodných testovacích
dat. Není zde tedy implementována zpětná vazba založená na zjišťování pokrytí
tak, jako je tomu v&nbsp;předchozím projektu go-fuzz. I tímto projektem se
budeme podrobněji zabývat v&nbsp;navazujícím článku.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. tavor</h2>

<p>Mnoho fuzzerů, například již dříve zmíněný <i>AFL</i>, je primárně určeno
pro generování binárních dat, která jsou přivedena na vstup testovaných funkcí,
metod či celých aplikací. Mnohdy se však setkáme spíše se vstupem textovým,
resp.&nbsp;se speciálně strukturovanými textovými daty. A právě pro tyto účely
je možné použít fuzzer nazvaný <i>tavor</i>, při jehož použití se vstupní data
popisují v&nbsp;takzvaném <a
href="https://github.com/zimmski/tavor/blob/master/doc/format.md">Tavor
formátu</a> založeném na klasickém <a
href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form">EBNF</a>.
Tomuto nástroji bude kvůli jeho relativně velké komplexnosti věnován samostatný
článek.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. JQF</h2>

<p>Zapomenout pochopitelně nesmíme na ekosystém programovacího jazyka Java. Pro
něj taktéž vzniklo několik fuzzerů. Jedním z&nbsp;těch nejpokročilejších je <a
href="https://github.com/rohanpadhye/jqf">JQF</a>, jenž lze použít společně
s&nbsp;fuzzy algoritmem <a
href="https://people.eecs.berkeley.edu/~rohanpadhye/files/zest-issta19.pdf">Zest</a>,
popř.&nbsp;s&nbsp;klasickým <i>AFL</i>. Příklady skutečných chyb nalezených
tímto nástrojem naleznete na stránce <a
href="https://github.com/rohanpadhye/jqf#trophies">https://github.com/rohanpadhye/jqf#trophies</a>.</p>

<p>S&nbsp;využitím JQF může být psaní testů skutečně jednoduché, což je patrné
z&nbsp;demonstračního příkladu, který je uvedený přímo na stránce tohoto
projektu (uvádím jen zkrácenou variantu):</p>

<pre>
@Fuzz
public void testMap2Trie(Map&lt;String, Integer&gt; map, String key) {
    // Key should exist in map
    assumeTrue(map.containsKey(key));   // the test is invalid if this predicate is not true
&nbsp;
    // Create new trie with input `map`
    Trie trie = new PatriciaTrie(map);
&nbsp;
    // The key should exist in the trie as well
    assertTrue(trie.containsKey(key));  // fails when map = {"x": 1, "x\0": 2} and key = "x"
}
</pre>

<p>Parametry do testovací metody <strong>testMap2Trie</strong> jsou generovány
automaticky na základě anotace <strong>@Fuzz</strong>. Díky algoritmu Zest je
nalezení chyb v&nbsp;implementaci <strong>PatriciaTrie</strong> poměrně rychlé
(přesněji &ndash; proběhne jen relativně malé množství iterací), zejména
v&nbsp;porovnání s&nbsp;testováním náhodných vstupních dat.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah následujícího článku</h2>

<p>V&nbsp;navazujícím článku si ukážeme, jak lze využít vybrané knihovny pro
vytvoření a spuštění skutečných fuzzy testů. Zaměříme se přitom (alespoň
zpočátku) na ty knihovny, které jsou určené pro programovací jazyk Python (zde
vítězí Hypothesis, ale popíšeme si i <a
href="https://github.com/mseclab/PyJFuzz">PyJFuzz</a>) a nezapomeneme ani na
programovací jazyk Go. Ovšem to neznamená, že ostatní jazyky a jejich mnohdy
specifické doménové oblasti vynecháme, protože se ve třetím článku pro změnu
zaměříme na JavaScript a pro něj určené knihovny a frameworku. Samostatný
článek je vyhrazen pro popis AFL i na knihovny uvedené výše.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>Fuzzing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fuzzing">https://en.wikipedia.org/wiki/Fuzzing</a>
</li>

<li>american fuzzy lop<br />
<a href="http://lcamtuf.coredump.cx/afl/">http://lcamtuf.coredump.cx/afl/</a>
</li>

<li>Fuzzing: the new unit testing<br />
<a href="https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1">https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1</a>
</li>

<li>AFL &ndash; QuickStartGuide.txt<br />
<a href="https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt">https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt</a>
</li>

<li>Introduction to Fuzzing in Python with AFL<br />
<a href="https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/">https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/</a>
</li>

<li>Writing a Simple Fuzzer in Python<br />
<a href="https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/">https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/</a>
</li>

<li>Golang Fuzzing: A go-fuzz Tutorial and Example<br />
<a href="http://networkbit.ch/golang-fuzzing/">http://networkbit.ch/golang-fuzzing/</a>
</li>

<li>Fuzzing Python Modules<br />
<a href="https://stackoverflow.com/questions/20749026/fuzzing-python-modules">https://stackoverflow.com/questions/20749026/fuzzing-python-modules</a>
</li>

<li>0x3 Python Tutorial: Fuzzer<br />
<a href="http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/">http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/</a>
</li>

<li>fuzzing na PyPi<br />
<a href="https://pypi.org/project/fuzzing/">https://pypi.org/project/fuzzing/</a>
</li>

<li>Fuzzing 0.3.2 documentation<br />
<a href="https://fuzzing.readthedocs.io/en/latest/">https://fuzzing.readthedocs.io/en/latest/</a>
</li>

<li>Randomized testing for Go<br />
<a href="https://github.com/dvyukov/go-fuzz">https://github.com/dvyukov/go-fuzz</a>
</li>

<li>HTTP/2 fuzzer written in Golang<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Ffuf (Fuzz Faster U Fool) – An Open Source Fast Web Fuzzing Tool<br />
<a href="https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html">https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html</a>
</li>

<li>Continuous Fuzzing Made Simple<br />
<a href="https://fuzzit.dev/">https://fuzzit.dev/</a>
</li>

<li>Halt and Catch Fire<br />
<a href="https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86">https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86</a>
</li>

<li>Pentium F00F bug<br />
<a href="https://en.wikipedia.org/wiki/Pentium_F00F_bug">https://en.wikipedia.org/wiki/Pentium_F00F_bug</a>
</li>

<li>Random testing<br />
<a href="https://en.wikipedia.org/wiki/Random_testing">https://en.wikipedia.org/wiki/Random_testing</a>
</li>

<li>Monkey testing<br />
<a href="https://en.wikipedia.org/wiki/Monkey_testing">https://en.wikipedia.org/wiki/Monkey_testing</a>
</li>

<li>Fuzzing for Software Security Testing and Quality Assurance, Second Edition<br />
<a href="https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false">https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false</a>
</li>

<li>Z80 Undocumented Instructions<br />
<a href="http://www.z80.info/z80undoc.htm">http://www.z80.info/z80undoc.htm</a>
</li>

<li>The 6502/65C02/65C816 Instruction Set Decoded<br />
<a href="http://nparker.llx.com/a2/opcodes.html">http://nparker.llx.com/a2/opcodes.html</a>
</li>

<li>libFuzzer – a library for coverage-guided fuzz testing<br />
<a href="https://llvm.org/docs/LibFuzzer.html">https://llvm.org/docs/LibFuzzer.html</a>
</li>

<li>fuzzy-swagger na PyPi<br />
<a href="https://pypi.org/project/fuzzy-swagger/">https://pypi.org/project/fuzzy-swagger/</a>
</li>

<li>fuzzy-swagger na GitHubu<br />
<a href="https://github.com/namuan/fuzzy-swagger">https://github.com/namuan/fuzzy-swagger</a>
</li>

<li>Fuzz testing tools for Python<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools">https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools</a>
</li>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go</a>
</li>

<li>gofuzz: a library for populating go objects with random values<br />
<a href="https://github.com/google/gofuzz">https://github.com/google/gofuzz</a>
</li>

<li>tavor: A generic fuzzing and delta-debugging framework<br />
<a href="https://github.com/zimmski/tavor">https://github.com/zimmski/tavor</a>
</li>

<li>hypothesis na GitHubu<br />
<a href="https://github.com/HypothesisWorks/hypothesis">https://github.com/HypothesisWorks/hypothesis</a>
</li>

<li>Hypothesis: Test faster, fix more<br />
<a href="https://hypothesis.works/">https://hypothesis.works/</a>
</li>

<li>Hypothesis<br />
<a href="https://hypothesis.works/articles/intro/">https://hypothesis.works/articles/intro/</a>
</li>

<li>What is Hypothesis?<br />
<a href="https://hypothesis.works/articles/what-is-hypothesis/">https://hypothesis.works/articles/what-is-hypothesis/</a>
</li>

<li>Databáze CVE<br />
<a href="https://www.cvedetails.com/">https://www.cvedetails.com/</a>
</li>

<li>Fuzz test Python modules with libFuzzer<br />
<a href="https://github.com/eerimoq/pyfuzzer">https://github.com/eerimoq/pyfuzzer</a>
</li>

<li>Taof - The art of fuzzing<br />
<a href="https://sourceforge.net/projects/taof/">https://sourceforge.net/projects/taof/</a>
</li>

<li>JQF + Zest: Coverage-guided semantic fuzzing for Java<br />
<a href="https://github.com/rohanpadhye/jqf">https://github.com/rohanpadhye/jqf</a>
</li>

<li>http2fuzz<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Demystifying hypothesis testing with simple Python examples<br />
<a href="https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294">https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

