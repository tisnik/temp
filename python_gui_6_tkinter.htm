<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické uživatelské rozhraní v Pythonu: kouzla s kreslicí plochou (canvasem)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické uživatelské rozhraní v Pythonu: kouzla s kreslicí plochou (canvasem)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Jedním z nejmocnějších nástrojů knihovny Tkinter je takzvané plátno (kreslicí plocha, canvas), která umožňuje relativně snadno vykreslovat i složitější schémata či vektorové obrázky a následně manipulovat s jednotlivými objekty, z nichž je takový obrazec vytvořen.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Grafické uživatelské rozhraní v&nbsp;Pythonu: kouzla s&nbsp;kreslicí plochou (canvasem)</a></p>
<p><a href="#k02">2. Zaškrtávací tlačítka v&nbsp;menu</a></p>
<p><a href="#k03">3. Výběrová tlačítka v&nbsp;menu</a></p>
<p><a href="#k04">4. Klávesové akcelerátory v&nbsp;menu</a></p>
<p><a href="#k05">5. Práce s&nbsp;grafikou v&nbsp;knihovně Tkinter</a></p>
<p><a href="#k06">6. Widget <strong>canvas</strong></a></p>
<p><a href="#k07">7. Vykreslení základních prvků na kreslicí plochu</a></p>
<p><a href="#k08">8. Nastavení stylů vykreslovaných prvků</a></p>
<p><a href="#k09">9. Přiřazení tagů (jmenovek) k&nbsp;vykreslovaným prvkům</a></p>
<p><a href="#k10">10. Použití tagů pro nastavení stylů vykreslování</a></p>
<p><a href="#k11">11. Využití tagů pro reakci na manipulaci s&nbsp;grafickými objekty uživatelem</a></p>
<p><a href="#k12">12. Zkrácení předchozího příkladu</a></p>
<p><a href="#k13">13. Lomené čáry (polyčáry)</a></p>
<p><a href="#k14">14. Spline křivky na canvasu</a></p>
<p><a href="#k15">15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Dokončení předchozího tématu: další možnosti menu</h2>

<p>Jeden z&nbsp;největších přínosů většiny grafických uživatelských rozhraní
spočívá v&nbsp;možnosti jednoduché a názorné práce s&nbsp;grafickými
informacemi (rastrovými obrázky, vektorovou grafikou, 3D grafikou, různými
grafy apod.). V&nbsp;knihovně/toolkitu <strong>Tk</strong> je samozřejmě práce
s&nbsp;grafikou podporovaná velmi dobře, zejména v&nbsp;porovnání se
stávajícími (kupodivu i těmi modernějšími) aplikačními rozhraními či toolkity.
Mnohé toolkity dokonce práci s&nbsp;grafikou nepodporují vůbec nebo nabízí
pouhé objektové &bdquo;obalení&ldquo; funkcí z&nbsp;knihoven na nižší úrovni
&ndash; dobrým příkladem tohoto řešení může být postarší knihovna
<strong>VCL</strong> (<i>Visual Component Library</i>) firmy Borland, která
obsahuje určité objekty a metody pro práci s&nbsp;grafikou vytvářenou na
canvasu, veškeré volání těchto metod je však prováděno přímo voláním funkcí
z&nbsp;Windows API (což omezovalo přenositelnost, dokud nedošlo
k&nbsp;přepsání).</p>

<p>Poznámka: praktické použití canvasu (kreslicí plochy, plátna) při tvorbě 2D
hry je popsáno v&nbsp;paralelním článku <a
href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">Hra
Snake naprogramovana v Pythone s pomocou Tkinter/</a>.</p>

<p>Toolkit <strong>Tk</strong>, na němž je knihovna <i>Tkinter</i> založena,
práci s&nbsp;grafikou pojímá odlišně &ndash; grafický výstup není pouze
&bdquo;write only&ldquo;, protože s&nbsp;grafickými objekty je možné i po
jejich vykreslení manipulovat &ndash; grafický objekt se totiž chová jako
skutečný objekt (z&nbsp;hlediska OOP), s&nbsp;jehož atributy je možné
manipulovat a který nabízí různé pomocné metody. Navíc lze k&nbsp;objektům
přiřazovat jmenovky (tagy) a provádět vybrané operace se všemi objekty, které
obsahují zvolený tag. Knihovna Tkinter vývojářům nabízí i další zajímavé
vlastnosti, například takzvaný <i>selektor</i> &bdquo;current&ldquo;
s&nbsp;referencí na ten grafický objekt, který vyvolal aktuální událost apod.
Právě tzv.&nbsp;<i>canvas</i> a jeho grafické objekty mohou být jedním
z&nbsp;důvodů, proč má dnes použití Tkinteru význam, a to i přesto, že existují
modernější toolkity.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Zaškrtávací tlačítka v&nbsp;menu</h2>

<p>Ještě než si popíšeme základy práce s&nbsp;canvasem, musíme dokončit téma,
kterému jsme se věnovali minule. Jedná se o práci s&nbsp;menu. Prozatím víme,
jak do menu vkládat běžná tlačítka i podmenu.</p>

<p>Ve všech typech menu je však možné použít i zaškrtávací tlačítka. Tato
tlačítka se od běžných příkazových tlačítek liší tím, že s&nbsp;sebou mohou
nést jednu pravdivostní hodnotu: true/false. Tento typ položek menu tedy
nahrazuje klasické check boxy použité v&nbsp;dialogových oknech. Graficky je
zaškrtávací tlačítko zobrazeno tak, že se kromě textu a případné ikony u
položky menu objevuje prázdný či vyplněný symbol zaškrtnutí. Přesná podoba a
umístění symbolu je závislá na použitém grafickém uživatelském rozhraní a
nastaveném stylu (resp.&nbsp;skinu). Typicky je tento symbol umístěn vlevo od
textu se zarovnáním k levému okraji menu. Zaškrtávací tlačítka se vytváří
pomocí příkazu:</p>

<pre>
identifikátor_menu.add_checkbutton(label="text", onvalue=True, offvalue=False)
</pre>

<p>S&nbsp;případným uvedením globální proměnné, která bude sledovat stav
tlačítka, například:</p>

<pre>
word_wrap = tkinter.BooleanVar()
&nbsp;
identifikátor_menu.add_checkbutton(label="text", onvalue=True, offvalue=False,
                           variable=word_wrap)
</pre>

<p>Pokud má být položka zaškrtnuta, změní se kód následovně:</p>

<pre>
word_wrap = tkinter.BooleanVar()
word_wrap.set(True)
&nbsp;
identifikátor_menu.add_checkbutton(label="text", onvalue=True, offvalue=False,
                           variable=word_wrap)
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-1.png" class="image-300216" alt="&#160;" width="322" height="257" />
<p><i>Obrázek 1: Screenshot prvního demonstračního příkladu se zaškrtávacími
tlačítky v&nbsp;menu.</i></p>

<p>Demonstrační příklad s&nbsp;několika zaškrtávacími položkami v&nbsp;menu
může vypadat následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
image_names = [
    "document-open",
    "document-save",
    "application-exit",
    "edit-undo",
    "edit-cut",
    "edit-copy",
    "edit-paste",
    "edit-delete",
    "edit-select-all"]
&nbsp;
images = {}
for image_name in image_names:
    images[image_name] = tkinter.PhotoImage(file="icons/%s.gif" % image_name)
&nbsp;
filemenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
filemenu.add_command(label="Open", underline=0, image=images["document-open"],
                     compound="left")
&nbsp;
filemenu.add_command(label="Save", underline=0, image=images["document-save"],
                     compound="left")
&nbsp;
filemenu.add_separator()
&nbsp;
filemenu.add_command(label="Exit", underline=1,
                     image=images["application-exit"], compound="left",
                     command=root.quit)
&nbsp;
menubar.add_cascade(label="File", menu=filemenu, underline=0)
&nbsp;
&nbsp;
editmenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
editmenu.add_command(label="Undo", underline=0, image=images["edit-undo"],
                     compound="left")
&nbsp;
editmenu.add_separator()
&nbsp;
editmenu.add_command(label="Cut", underline=2, image=images["edit-cut"],
                     compound="left")
&nbsp;
editmenu.add_command(label="Copy", underline=0, image=images["edit-copy"],
                     compound="left")
&nbsp;
editmenu.add_command(label="Paste", underline=0, image=images["edit-paste"],
                     compound="left")
&nbsp;
editmenu.add_command(label="Delete", underline=2, image=images["edit-delete"],
                     compound="left")
&nbsp;
editmenu.add_separator()
&nbsp;
editmenu.add_command(label="Select All", underline=7,
                     image=images["edit-select-all"], compound="left")
&nbsp;
menubar.add_cascade(label="Edit", menu=editmenu, underline=0)
&nbsp;
&nbsp;
word_wrap = tkinter.BooleanVar()
show_all = tkinter.BooleanVar()
show_all.set(True)
&nbsp;
optionmenu = tkinter.Menu(menubar, tearoff=0)
optionmenu.add_checkbutton(label="Word wrap", onvalue=True, offvalue=False,
                           variable=word_wrap)
optionmenu.add_checkbutton(label="Show all", onvalue=True, offvalue=False,
                           variable=show_all)
&nbsp;
menubar.add_cascade(label="Options", menu=optionmenu, underline=0)
&nbsp;
&nbsp;
colors = ("white", "yellow", "orange", "red", "magenta",
          "blue", "cyan", "green")
colormenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
for color in colors:
    colormenu.add_command(label=color, background=color)
&nbsp;
menubar.add_cascade(label="Colors", menu=colormenu, underline=0)
&nbsp;
helpmenu = tkinter.Menu(menubar, tearoff=0)
helpmenu.add_command(label="About", command=test, underline=0)
menubar.add_cascade(label="Help", menu=helpmenu, underline=0)
&nbsp;
root.config(menu=menubar)
root.geometry("320x200")
&nbsp;
root.mainloop()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Výběrová tlačítka v&nbsp;menu</h2>

<p>Kromě zaškrtávacích tlačítek je možné v&nbsp;menu všech typů použít i
výběrová tlačítka. Zatímco byla zaškrtávací tlačítka na sobě nezávislá, u
výběrových tlačítek je zaručeno, že bude vybráno maximálně jedno z&nbsp;nich
(nemusí však být vybráno tlačítko žádné). Výběrová tlačítka v&nbsp;menu se tak
do značné míry podobají radio buttonům používaným v&nbsp;dialogových boxech;
například i tím, že mohou nastavovat hodnotu předem zadané globální proměnné.
Výběrová tlačítka se vytváří s&nbsp;využitím příkazu:</p>

<pre>
identifikátor_menu.add_radiobutton(label="text")
</pre>

<p>Opět se podívejme na demonstrační příklad, v&nbsp;němž je použito složitější
menu s&nbsp;radio tlačítky:</p>

<pre>
colors = ("white", "yellow", "orange", "red", "magenta",
          "blue", "cyan", "green")
colormenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
for color in colors:
    colormenu.add_radiobutton(label=color, background=color)
&nbsp;
menubar.add_cascade(label="Colors", menu=colormenu, underline=0)
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-2.png" class="image-300217" alt="&#160;" width="322" height="257" />
<p><i>Obrázek 2: Screenshot druhého demonstračního příkladu s&nbsp;výběrovými
tlačítky v&nbsp;menu.</i></p>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
image_names = [
    "document-open",
    "document-save",
    "application-exit",
    "edit-undo",
    "edit-cut",
    "edit-copy",
    "edit-paste",
    "edit-delete",
    "edit-select-all"]
&nbsp;
images = {}
for image_name in image_names:
    images[image_name] = tkinter.PhotoImage(file="icons/%s.gif" % image_name)
&nbsp;
filemenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
filemenu.add_command(label="Open", underline=0, image=images["document-open"],
                     compound="left")
&nbsp;
filemenu.add_command(label="Save", underline=0, image=images["document-save"],
                     compound="left")
&nbsp;
filemenu.add_separator()
&nbsp;
filemenu.add_command(label="Exit", underline=1,
                     image=images["application-exit"], compound="left",
                     command=root.quit)
&nbsp;
menubar.add_cascade(label="File", menu=filemenu, underline=0)
&nbsp;
&nbsp;
editmenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
editmenu.add_command(label="Undo", underline=0, image=images["edit-undo"],
                     compound="left")
&nbsp;
editmenu.add_separator()
&nbsp;
editmenu.add_command(label="Cut", underline=2, image=images["edit-cut"],
                     compound="left")
&nbsp;
editmenu.add_command(label="Copy", underline=0, image=images["edit-copy"],
                     compound="left")
&nbsp;
editmenu.add_command(label="Paste", underline=0, image=images["edit-paste"],
                     compound="left")
&nbsp;
editmenu.add_command(label="Delete", underline=2, image=images["edit-delete"],
                     compound="left")
&nbsp;
editmenu.add_separator()
&nbsp;
editmenu.add_command(label="Select All", underline=7,
                     image=images["edit-select-all"], compound="left")
&nbsp;
menubar.add_cascade(label="Edit", menu=editmenu, underline=0)
&nbsp;
&nbsp;
word_wrap = tkinter.BooleanVar()
show_all = tkinter.BooleanVar()
show_all.set(True)
&nbsp;
optionmenu = tkinter.Menu(menubar, tearoff=0)
optionmenu.add_checkbutton(label="Word wrap", onvalue=True, offvalue=False,
                           variable=word_wrap)
optionmenu.add_checkbutton(label="Show all", onvalue=True, offvalue=False,
                           variable=show_all)
&nbsp;
menubar.add_cascade(label="Options", menu=optionmenu, underline=0)
&nbsp;
&nbsp;
colors = ("white", "yellow", "orange", "red", "magenta",
          "blue", "cyan", "green")
colormenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
for color in colors:
    colormenu.add_radiobutton(label=color, background=color)
&nbsp;
menubar.add_cascade(label="Colors", menu=colormenu, underline=0)
&nbsp;
helpmenu = tkinter.Menu(menubar, tearoff=0)
helpmenu.add_command(label="About", command=test, underline=0)
menubar.add_cascade(label="Help", menu=helpmenu, underline=0)
&nbsp;
root.config(menu=menubar)
root.geometry("320x200")
&nbsp;
root.mainloop()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Klávesové akcelerátory v&nbsp;menu</h2>

<p>Poslední vlastnost menu, kterou si popíšeme, je zobrazení a navázání
klávesových akcelerátorů (například <strong>Ctrl+C</strong>) k&nbsp;určité
položce menu.</p>

<p>Nastavení klávesových akcelerátorů (což je další typ horkých klíčů) se musí
provést ve dvou krocích. Nejprve je nutné akcelerátor specifikovat u každé
položky menu s&nbsp;využitím volby <strong>accelerator</strong>, například:</p>

<pre>
filemenu.add_command(label="Open", underline=0, <strong>accelerator="Ctrl+O"</strong>,
                     command=lambda: print("Open"))
</pre>

<p>Knihovna <i>Tkinter</i> nás nijak neomezuje v&nbsp;tom, jaký text je u volby
<strong>accelerator</strong> zapsán; samozřejmě je však vhodné, když popis
souvisí se skutečně nastaveným akcelerátorem. Příklad z&nbsp;předchozího článku
si můžeme nepatrně upravit tak, že u každé položky (kde to má význam) uvedeme
popis příslušné klávesové zkratky:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
filemenu = tkinter.Menu(menubar, tearoff=0)
filemenu.add_command(label="Open", underline=0, <strong>accelerator="Ctrl+O"</strong>,
                     command=lambda: print("Open"))
filemenu.add_command(label="Save", underline=0, <strong>accelerator="Ctrl+S"</strong>,
                     command=lambda: print("Save"))
filemenu.add_separator()
filemenu.add_command(label="Exit", underline=1, <strong>accelerator="Ctrl+Q"</strong>,
                     command=root.quit)
menubar.add_cascade(label="File", menu=filemenu, underline=0)
&nbsp;
editmenu = tkinter.Menu(menubar, tearoff=0)
editmenu.add_command(label="Undo", underline=0, <strong>accelerator="Ctrl+U"</strong>,
                     command=lambda: print("Undo"))
editmenu.add_separator()
editmenu.add_command(label="Cut", underline=2, <strong>accelerator="Ctrl+X</strong>",
                     command=lambda: print("Cut"))
editmenu.add_command(label="Copy", underline=0, <strong>accelerator="Ctrl+C"</strong>,
                     command=lambda: print("Copy"))
editmenu.add_command(label="Paste", underline=0, <strong>accelerator="Ctrl+V"</strong>,
                     command=lambda: print("Paste"))
editmenu.add_command(label="Delete", underline=2,
                     command=lambda: print("Delete"))
editmenu.add_separator()
editmenu.add_command(label="Select All", underline=7, <strong>accelerator="Ctrl+A"</strong>,
                     command=lambda: print("Select All"))
menubar.add_cascade(label="Edit", menu=editmenu, underline=0)
&nbsp;
helpmenu = tkinter.Menu(menubar, tearoff=0)
helpmenu.add_command(label="About", underline=0, <strong>accelerator="F1"</strong>,
                     command=lambda: print("About"))
menubar.add_cascade(label="Help", menu=helpmenu, underline=0)
&nbsp;
root.config(menu=menubar)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-3.png" class="image-300218" alt="&#160;" width="202" height="257" />
<p><i>Obrázek 3: Screenshot třetího demonstračního příkladu s&nbsp;klávesovými
akcelerátory.</i></p>

<p>To však není vše, protože je ještě nutné akcelerátor na položku menu
(resp.&nbsp;přesněji řečeno na nějaký příkaz) navázat. K&nbsp;tomu se používá
nám již známý příkaz <strong>bind</strong>. Pro označení modifikátorů kláves se
používají prefixy <strong>Control-</strong> a <strong>Meta-</strong>. Také si
všimněte, že se rozlišují velikosti písmen stlačených kláves, takže je rozdíl
mezi zápisem <strong>Control-x</strong> a <strong>Control-X</strong> (druhá
možnost nemusí na některých systémech vůbec fungovat):</p>

<pre>
root.bind('&lt;Control-o&gt;', lambda event: cmd_open())
root.bind('&lt;Control-s&gt;', lambda event: cmd_save())
root.bind('&lt;Control-u&gt;', lambda event: cmd_undo())
root.bind('&lt;F1&gt;', lambda event: cmd_help())
...
...
...
atd. i pro další položky menu
</pre>

<p>Demonstrační příklad nyní dostane plně funkční podobu &ndash; budou
v&nbsp;něm fungovat jak horké klíče, tak i akcelerátory (většinou se jim říká
klávesové zkratky, ale někdy to může být matoucí kvůli existenci horkých
klíčů):</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def cmd_open():
    print("Open")
&nbsp;
&nbsp;
def cmd_save():
    print("Save")
&nbsp;
&nbsp;
def cmd_undo():
    print("Undo")
&nbsp;
&nbsp;
def cmd_help():
    print("Help")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
filemenu = tkinter.Menu(menubar, tearoff=0)
filemenu.add_command(label="Open", underline=0, accelerator="Ctrl+O",
                     command=cmd_open)
filemenu.add_command(label="Save", underline=0, accelerator="Ctrl+S",
                     command=cmd_save)
filemenu.add_separator()
filemenu.add_command(label="Exit", underline=1, accelerator="Ctrl+Q",
                     command=root.quit)
menubar.add_cascade(label="File", menu=filemenu, underline=0)
&nbsp;
editmenu = tkinter.Menu(menubar, tearoff=0)
editmenu.add_command(label="Undo", underline=0, accelerator="Ctrl+U",
                     command=cmd_undo)
editmenu.add_separator()
editmenu.add_command(label="Cut", underline=2, accelerator="Ctrl+X",
                     command=lambda: print("Cut"))
editmenu.add_command(label="Copy", underline=0, accelerator="Ctrl+C",
                     command=lambda: print("Copy"))
editmenu.add_command(label="Paste", underline=0, accelerator="Ctrl+V",
                     command=lambda: print("Paste"))
editmenu.add_command(label="Delete", underline=2,
                     command=lambda: print("Delete"))
editmenu.add_separator()
editmenu.add_command(label="Select All", underline=7, accelerator="Ctrl+A",
                     command=lambda: print("Select All"))
menubar.add_cascade(label="Edit", menu=editmenu, underline=0)
&nbsp;
helpmenu = tkinter.Menu(menubar, tearoff=0)
helpmenu.add_command(label="About", underline=0, accelerator="F1",
                     command=cmd_help)
menubar.add_cascade(label="Help", menu=helpmenu, underline=0)
&nbsp;
root.config(menu=menubar)
&nbsp;
<strong>root.bind('&lt;Control-o&gt;', lambda event: cmd_open())</strong>
<strong>root.bind('&lt;Control-s&gt;', lambda event: cmd_save())</strong>
<strong>root.bind('&lt;Control-u&gt;', lambda event: cmd_undo())</strong>
<strong>root.bind('&lt;F1&gt;', lambda event: cmd_help())</strong>
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-4.png" class="image-300219" alt="&#160;" width="202" height="257" />
<p><i>Obrázek 4: Screenshot čtvrtého demonstračního příkladu s&nbsp;klávesovými
akcelerátory.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Práce s&nbsp;grafikou v&nbsp;knihovně Tkinter</h2>

<p>Práci s&nbsp;grafikou můžeme chápat ve dvou úrovních. Na vyšší úrovni
manipulujeme s&nbsp;jednotlivými geometricky popsanými tvary, jakými jsou
například úsečka, obdélník, kruh, text či spline křivka. Každému tvaru může být
přiřazeno značné množství atributů, jedná se například o tloušťku čáry, kterou
je vykreslena hranice objektu, barva a styl výplně uzavřených objektů či font
vykreslovaného textu. Na úrovni nižší se může manipulovat přímo s&nbsp;pixely,
které tvoří zobrazovaný rastrový obrázek. V&nbsp;knihovně <i>Tkinter</i> je pro
práci na vyšší úrovni určen widget <strong>canvas</strong> spolu s&nbsp;dalšími
objektu, na nižší úrovni pak widgety (resp.&nbsp;objekty)
<strong>bitmap</strong>, <strong>image</strong> a <strong>photo</strong>.
Objekt typu <strong>image</strong> přitom zapouzdřuje více typů obrázků, od
monochromatického <strong>BitmapImage</strong> přes vícebarevný
<strong>PhotoImage</strong> až po uživatelsky vytvářené formáty.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Widget <strong>canvas</strong></h2>

<p>Jak jsme si již řekli v&nbsp;<a href="#k05">předchozí kapitole</a>, je pro
práci s&nbsp;grafikou na vyšší úrovni nabízen v&nbsp;knihovně <i>Tkinter</i>
widget <strong>canvas</strong>, česky bychom mohli tento název přeložit jako
(malířské) <strong>plátno</strong>. Nenechte se ovšem zmýlit tímto názvem,
který má v&nbsp;jiných programových knihovnách odlišný (většinou jednodušší)
význam, zde se jedná o velmi mocný widget, který současně slouží jako kontejner
pro další objekty.</p>

<p>Vkládané objekty si své vlastnosti zachovávají, tj.&nbsp;lze s&nbsp;nimi i
po jejich vykreslení interaktivně i programově pohybovat, měnit jejich
vlastnosti apod. K&nbsp;tomu musíme připočítat možnost uložit celé plátno do
PostScriptového souboru se zachováním vektorových charakteristik plátna
(tj.&nbsp;neprovádí se ztrátový převod na bitmapy). To mj.&nbsp;znamená, že se
vlastnosti <strong>canvasu</strong> do určité míry podobají použití SVG na
webových stránkách; naproti tomu &bdquo;webový canvas&ldquo; je vlastně pouze
bitmapa, do níž se objekty vykreslují a ihned po jejich vykreslení se jejich
vlastnosti ztratí (zůstanou jen barevné pixely).</p>

<p>Každý objekt, který je na plátno umístěn, musí mít specifikovány souřadnice
počátečního a koncového bodu, v&nbsp;případě lomených čar, spline křivek a
polygonů se samozřejmě specifikuje bodů více. Souřadnice bodů mohou být zadány
pomocí více jednotek, jež se rozlišují podle jednoho písmene zapsaného za
numerickou hodnotou (hodnoty jsou samozřejmě platné pouze při správně
nakalibrované obrazovce, což kupodivu mnoho systémů dodnes nedodržuje):</p>

<table>
<tr><th>Přípona</th><th>Význam</th></tr>
<tr><td><strong>m</strong></td><td>milimetry</td></tr>
<tr><td><strong>c</strong></td><td>centimetry</td></tr>
<tr><td><strong>i</strong></td><td>palce</td></tr>
<tr><td><strong>p</strong></td><td>body (implicitní hodnota)</td></tr>
</table>

<p>Poznámka: pokud potřebujete použít například milimetry, je nutné souřadnice
zapisovat do řetězce.</p>

<p>V následující tabulce je ukázáno, jaké objekty je možné na plátno
pokládat:</p>

<table>
<tr><th>Jméno objektu</th><th>Význam</th></tr>
<tr><td><strong>arc</strong></td><td>kruhový nebo eliptický oblouk</td></tr>
<tr><td><strong>bitmap</strong></td><td>bitmapový obrázek</td></tr>
<tr><td><strong>image</strong></td><td>obecně vícebarevný rastrový obrázek</td></tr>
<tr><td><strong>line</strong></td><td>úsečka, lomená úsečka nebo dokonce hladká spline křivka (!)</td></tr>
<tr><td><strong>oval</strong></td><td>uzavřená kružnice nebo elipsa</td></tr>
<tr><td><strong>polygon</strong></td><td>uzavřený polygon či tvar vytvořený ze spline křivek</td></tr>
<tr><td><strong>rectangle</strong></td><td>čtverec nebo obdélník</td></tr>
<tr><td><strong>text</strong></td><td>textový řetězec</td></tr>
<tr><td><strong>window</strong></td><td>vnořené okno se samostatným řízením</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vykreslení základních prvků na kreslicí plochu</h2>

<p>V&nbsp;následujícím demonstračním příkladu je ukázáno jednoduché použití
plátna, na které jsou s&nbsp;využitím metody
<strong>create_TYP_OBJEKTU</strong> vloženy jednoduché objekty &ndash; úsečka,
kruh a text. Vzhledem k&nbsp;tomu, že se při specifikaci souřadnic neuvádí u
číselných hodnot žádná přípona (používáme celá čísla), předpokládá se, že jsou
všechny hodnoty zapsané v&nbsp;bodech (pixelech). To také znamená, že na
různých obrazovkách a při různých rozlišeních budou mít nakreslené objekty
jinou velikost, což nám v&nbsp;tomto případě nemusí vadit.</p>

<p>Při vytváření plátna se musí zadat jeho rozměry a samozřejmě i kontejner, na
nějž je plátno vloženo:</p>

<pre>
canvas = tkinter.Canvas(root, width=256, height=256)
</pre>

<p>Následně upravíme velikost okna (kontejneru) tak, aby se na něj plátno
vešlo:</p>

<pre>
canvas.pack()
</pre>

<p>Dále již použijeme výše zmíněné metody pro vykreslení objektů. Povšimněte
si, že je podporován i objekt s&nbsp;textem:</p>

<pre>
canvas.create_oval(10, 10, 100, 100)
canvas.create_line(0, 0, 255, 255)
canvas.create_line(0, 255, 255, 0)
&nbsp;
canvas.create_text(50, 120, text="Hello world!")
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-5.png" class="image-300220" alt="&#160;" width="260" height="285" />
<p><i>Obrázek 5: Canvas s&nbsp;několika objekty &ndash; kruhem, dvojicí úseček
a textem.</i></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=256, height=256)
canvas.pack()
&nbsp;
canvas.create_oval(10, 10, 100, 100)
canvas.create_line(0, 0, 255, 255)
canvas.create_line(0, 255, 255, 0)
&nbsp;
canvas.create_text(50, 120, text="Hello world!")
&nbsp;
root.mainloop()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Nastavení stylů vykreslovaných prvků</h2>

<p>Grafické objekty vkládané na plátno mohou mít nastaveno velké množství
vlastností, jak je ukázáno na modifikaci předchozího příkladu (nejsou zde
ukázány zdaleka všechny vlastnosti, ty jsou uvedeny a podrobně popsány
v&nbsp;helpu):</p>

<table>
<tr><th>Vlastnost</th><th>Popis</th></tr>
<tr><td>outline</td><td>barva obrysu</td></tr>
<tr><td>fill</td><td>barva výplně</td></tr>
<tr><td>width</td><td>šířka obrysu</td></tr>
<tr><td>dash</td><td>vzorek při vykreslování úseček a polyčar</td></tr>
<tr><td>font</td><td>popis použitého fontu</td></tr>
</table>

<img src="https://i.iinfo.cz/images/134/tkinter5-6.png" class="image-300221" alt="&#160;" width="260" height="285" />
<p><i>Obrázek 6: Změna stylu vykreslovaných grafických objektů.</i></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=256, height=256)
canvas.pack()
&nbsp;
canvas.create_oval(10, 10, 100, 100, fill="red", outline="blue", width=3)
canvas.create_line(0, 0, 255, 255, width=5)
canvas.create_line(0, 255, 255, 0, dash=123)
&nbsp;
canvas.create_text(150, 120, text="Hello world!", fill="white",
                   font="Helvetica 20")
&nbsp;
root.mainloop()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přiřazení tagů (jmenovek) k&nbsp;vykreslovaným prvkům</h2>

<p>Při vkládání objektů na plátno je možné specifikovat i jejich
<i>jmenovku</i> (<i>tag</i>), pomocí které je možné objektům přiřadit nějaké
vlastnosti či na ně navázat události. Každému objektu dokonce může být
v&nbsp;případě potřeby přiřazeno jmenovek více. Jmenovky se používají zejména
při hromadné změně vlastností objektů. Nejprve si vytvořme plátno (canvas), na
které položíme (vykreslíme) čtyři kruhy vybarvené modře. Tyto kruhy mají
přiřazenu stejnou jmenovku &ndash; <strong>ovals</strong>:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=256, height=256)
canvas.pack()
&nbsp;
canvas.create_oval(10, 10, 110, 110, <strong>tags="ovals"</strong>, fill="blue")
canvas.create_oval(150, 10, 250, 110, <strong>tags="ovals"</strong>, fill="blue")
canvas.create_oval(10, 150, 110, 250, <strong>tags="ovals"</strong>, fill="blue")
canvas.create_oval(150, 150, 250, 250, <strong>tags="ovals"</strong>, fill="blue")
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-7.png" class="image-300222" alt="&#160;" width="260" height="285" />
<p><i>Obrázek 7: Čtveřice oválů s&nbsp;nastavením
<strong>fill="blue"</strong>.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Použití tagů pro nastavení stylů vykreslování</h2>

<p>S&nbsp;využitím metody <strong>itemconfig()</strong> je možné změnit styl
vykreslení libovolného grafického objektu. Objekt či objekty jsou specifikovány
<i>selektorem</i>, přičemž mezi podporované selektory patří i jméno tagu. Pokud
tedy budeme chtít, aby všechny vykreslované kruhy měly modrou výplň, nemusíme
tuto barvu specifikovat u každého kruhu zvlášť; postačuje změnit vlastnost
všech objektů se stejným tagem:</p>

<pre>
<strong>canvas.itemconfig("ovals", fill="blue")</strong>
</pre>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=256, height=256)
canvas.pack()
&nbsp;
canvas.create_oval(10, 10, 110, 110, tags="ovals")
canvas.create_oval(150, 10, 250, 110, tags="ovals")
canvas.create_oval(10, 150, 110, 250, tags="ovals")
canvas.create_oval(150, 150, 250, 250, tags="ovals")
&nbsp;
<strong>canvas.itemconfig("ovals", fill="blue")</strong>
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-8.png" class="image-300223" alt="&#160;" width="260" height="285" />
<p><i>Obrázek 8: Čtveřice oválů s&nbsp;nastavením <strong>fill="blue"</strong>,
ovšem provedeného hromadně přes tagy.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Využití tagů pro reakci na manipulaci s&nbsp;grafickými objekty uživatelem</h2>

<p>Předchozí demonstrační příklad můžeme upravit takovým způsobem, že do něj
přidáme handlery pro trojici událostí. První událost nastane v&nbsp;tom
případě, že uživatel na některý objekt najede kurzorem myši
(<strong>Enter</strong>), druhá událost naopak nastane při odjetí kurzoru mimo
daný objekt (<strong>Leave</strong>). Třetí událost vznikne po stisku tlačítka
myši nad objektem. Vzhledem k&nbsp;tomu, že je všem čtyřem kruhům nastavena
stejná jmenovka, je možné obsluhu událostí napsat pouze jednou.</p>

<p>Pro navázání nějaké akce na událost se použije metoda <strong>tag_bind</strong>:</p>

<pre>
canvas.tag_bind("ovals", "&lt;Enter&gt;",
                lambda e: canvas.itemconfig("current", fill="red"))
&nbsp;
canvas.tag_bind("ovals", "&lt;Leave&gt;",
                lambda e: canvas.itemconfig("current", fill="blue"))
&nbsp;
canvas.tag_bind("ovals", "&lt;Button-1&gt;",
                lambda e: canvas.itemconfig("current", fill="yellow"))
</pre>

<p>Povšimněte si použití speciálního selektoru &bdquo;current&ldquo;, který
označuje ten objekt, který událost vyvolal. Pokud by tento selektor
neexistoval, šlo by najít ten objekt, který je nejblíže ke kurzoru myši.</p>

<img src="https://i.iinfo.cz/images/134/tkinter5-9.png" class="image-300224" alt="&#160;" width="260" height="285" />
<p><i>Obrázek 9: Po stisku levého tlačítka myši se změnila vlastnost
<strong>fill</strong>.</i></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=256, height=256)
canvas.pack()
&nbsp;
canvas.create_oval(10, 10, 110, 110, tags="ovals")
canvas.create_oval(150, 10, 250, 110, tags="ovals")
canvas.create_oval(10, 150, 110, 250, tags="ovals")
canvas.create_oval(150, 150, 250, 250, tags="ovals")
&nbsp;
canvas.itemconfig("ovals", fill="blue")
&nbsp;
canvas.tag_bind("ovals", "&lt;Enter&gt;",
                lambda e: canvas.itemconfig("current", fill="red"))
canvas.tag_bind("ovals", "&lt;Leave&gt;",
                lambda e: canvas.itemconfig("current", fill="blue"))
canvas.tag_bind("ovals", "&lt;Button-1&gt;",
                lambda e: canvas.itemconfig("current", fill="yellow"))
&nbsp;
root.mainloop()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zkrácení předchozího příkladu</h2>

<p>Předchozí příklad je možné nepatrně zkrátit tak, že použijeme jednu novou
funkci určenou pouze pro změnu barvy aktuálního objektu (toho, který vyvolal
událost). Tato funkce obsahuje jediný příkaz:</p>

<pre>
def setcolor(color):
    canvas.itemconfig("current", fill=color)
</pre>

<p>Samotná specifikace handlerů událostí se zjednoduší. Povšimněte si toho, jak
se s&nbsp;využitím lambdy můžeme elegantně zbavit parametru <strong>e</strong>
(<i>event</i>), který jako jediný vstupuje do callback funkce (celý zápis
s&nbsp;lambdou je vlastně anonymní callback funkcí):</p>

<pre>
canvas.tag_bind("ovals", "&lt;Enter&gt;", lambda e: setcolor("red"))
canvas.tag_bind("ovals", "&lt;Leave&gt;", lambda e: setcolor("blue"))
canvas.tag_bind("ovals", "&lt;Button-1&gt;", lambda e: setcolor("yellow"))
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-10.png" class="image-300225" alt="&#160;" width="260" height="285" />
<p><i>Obrázek 10: Po najetí kurzorem myši na objekt se změnila vlastnost
<strong>fill</strong>.</i></p>

<p>Opět se podívejme na úplný zdrojový kód tohoto demonstračního příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def setcolor(color):
    canvas.itemconfig("current", fill=color)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=256, height=256)
canvas.pack()
&nbsp;
canvas.create_oval(10, 10, 110, 110, tags="ovals")
canvas.create_oval(150, 10, 250, 110, tags="ovals")
canvas.create_oval(10, 150, 110, 250, tags="ovals")
canvas.create_oval(150, 150, 250, 250, tags="ovals")
&nbsp;
canvas.itemconfig("ovals", fill="blue")
&nbsp;
canvas.tag_bind("ovals", "&lt;Enter&gt;", lambda e: setcolor("red"))
canvas.tag_bind("ovals", "&lt;Leave&gt;", lambda e: setcolor("blue"))
canvas.tag_bind("ovals", "&lt;Button-1&gt;", lambda e: setcolor("yellow"))
&nbsp;
root.mainloop()
</pre>

<p>Troufnu si tvrdit, že výše uvedený příklad není možné snad v&nbsp;žádném
jiném toolkitu napsat jednodušším způsobem.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Lomené čáry (polyčáry)</h2>

<p>Pro práci s&nbsp;neuzavřenými křivkami lze použít objekt
<strong>line</strong>.  Na první pohled se jedná o velmi jednoduchý objekt, ve
skutečnosti s&nbsp;ním však lze vytvářet i velmi složité obrazce složené
například ze spline křivek. V&nbsp;nejjednodušším případě se pomocí objektu
<strong>line</strong> vykreslí pouze jedna úsečka:</p>

<pre>
jméno_plátna.create_line(x1, y1, x2, y2, další_volby)
</pre>

<p>Dále je možné specifikovat více bodů (vrcholů), což značí, že se na plátno
vykreslí místo jedné úsečky lomená čára (polyčára, polyline):</p>

<pre>
jméno_plátna.create_line(x1, y1, x2, y2, ..., xn, yn, další_volby)
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-11.png" class="image-300226" alt="&#160;" width="304" height="329" />
<p><i>Obrázek 11: Lomená čára (polyline) vykreslená čárkovaně.</i></p>

<p>Podívejme se na velmi jednoduchý příklad použití:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=300, height=300)
canvas.pack()
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, dash=10)
&nbsp;
root.mainloop()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Spline křivky na canvasu</h2>

<p>Při vytváření polyčar je možné specifikovat poměrně velké množství voleb.
Pravděpodobně nejpoužívanější jsou volby <strong>fill</strong> (volba barvy
úsečky), <strong>width</strong> (tloušťka čáry), <strong>joinstyle</strong>
(způsob ukončení hran) a <strong>arrow</strong> (vykreslení šipek na konci
čar). Kromě toho je také možné specifikovat, že se má místo lomené čáry
vykreslit spline křivka. To zajišťuje volba <strong>spline</strong>
s&nbsp;booleovskou hodnotou a popř.&nbsp;i <strong>splinesteps</strong>
s&nbsp;celočíselnou hodnotou, kterou se zadává, na kolik úsečkových segmentů má
být každá část lomené čáry rozdělena. Způsob práce se spline křivkami je patrný
z&nbsp;dalšího demonstračního příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=300, height=300)
canvas.pack()
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, dash=10)
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, smooth=True, width=2, fill="red")
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-12.png" class="image-300227" alt="&#160;" width="304" height="329" />
<p><i>Obrázek 12: Lomená čára (polyline) vykreslená čárkovaně a spline křivka
vykreslená tučně červeně.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naleznete pod
následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>57_menu_accelerators.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/57_menu_accelerators.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/57_menu_accelerators.py</a></td></tr>
<tr><td>58_bind_accelerators.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/58_bind_accelerators.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/58_bind_accelerators.py</a></td></tr>
<tr><td>59_basic_canvas.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/59_basic_canvas.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/59_basic_canvas.py</a></td></tr>
<tr><td>60_canvas_style.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/60_canvas_style.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/60_canvas_style.py</a></td></tr>
<tr><td>61_canvas_tags.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/61_canvas_tags.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/61_canvas_tags.py</a></td></tr>
<tr><td>62_canvas_itemconfig.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/62_canvas_itemconfig.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/62_canvas_itemconfig.py</a></td></tr>
<tr><td>63_canvas_reconfigure.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/63_canvas_reconfigure.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/63_canvas_reconfigure.py</a></td></tr>
<tr><td>64_canvas_reconfigure2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/64_canvas_reconfigure2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/64_canvas_reconfigure2.py</a></td></tr>
<tr><td>65_polylines.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/65_polylines.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/65_polylines.py</a></td></tr>
<tr><td>66_splines.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/66_splines.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/66_splines.py</a></td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

