<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu: widgety pro zobrazení tabulek a stromů v knihovně appJar</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu: widgety pro zobrazení tabulek a stromů v knihovně appJar</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V páté části článku o knihovně appJar určené pro snadnou tvorbu aplikací s grafickým uživatelským rozhraním v Pythonu si představíme některé pokročilejší ovládací prvky. Zaměříme se především na tvorbu tabulek (s omezenou možností jejich editace) a stromů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Pokročilejší ovládací prvky nabízené knihovnou appJar</a></p>
<p><a href="#k02">2. Ovládací prvek <strong>grid</strong> &ndash; jednoduchá tabulka</a></p>
<p><a href="#k03">3. První příklad &ndash; použití prvku <strong>grid</strong> pro zobrazení klávesnice telefonu</a></p>
<p><a href="#k04">4. Vytvoření tabulky s&nbsp;použitím n-tic a generátorů</a></p>
<p><a href="#k05">5. První řádek tabulky s&nbsp;nadpisy sloupců</a></p>
<p><a href="#k06">6. Zobrazení tabulky s&nbsp;malou násobilkou</a></p>
<p><a href="#k07">7. Získání informací o vybraných políčkách tabulky</a></p>
<p><a href="#k08">8. Zpracování slovníku s&nbsp;informacemi o vybraných políčkách tabulky</a></p>
<p><a href="#k09">9. Tlačítka zobrazená u každého řádku tabulky a reakce na jejich stisk</a></p>
<p><a href="#k10">10. Zobrazení vstupních políček určených pro rozšíření tabulky</a></p>
<p><a href="#k11">11. Kombinace předchozích dvou příkladů &ndash; rozšíření tabulky a výpočty nad daty v&nbsp;řádku</a></p>
<p><a href="#k12">12. Ovládací prvek <strong>tree</strong> &ndash; strom zobrazující strukturu XML</a></p>
<p><a href="#k13">13. Zobrazení jednoduchého stromu</a></p>
<p><a href="#k14">14. Konfigurace barev použitých při vykreslení stromu</a></p>
<p><a href="#k15">15. Strom s&nbsp;editovatelnými koncovými uzly</a></p>
<p><a href="#k16">16. Získání obsahu vybraného uzlu</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Pokročilejší ovládací prvky nabízené knihovnou appJar</h2>

<p>Všechny základní ovládací prvky (<i>widgety</i>) grafického uživatelského
rozhraní, které jsou nabízeny knihovnou <i>appJar</i>, jsme si popsali
v&nbsp;předchozích čtyřech částech <a
href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">tohoto
seriálu</a>. Již popsané widgety mohou být dostačující pro tvorbu jednodušších
aplikací i pro výuku základních konceptů používaných v&nbsp;GUI (ostatně právě
pro tento účel knihovna appJar vznikla), ovšem mnoho složitějších aplikací
vyžaduje použití dalších ovládacích prvků. Mezi tyto vyžadované prvky patří
zejména tabulka (zde nazývaná <i>grid</i>) a taktéž prvek pro zobrazení
stromové struktury (<i>tree</i>). Tyto ovládací prvky nám knihovna
<i>appJar</i> taktéž nabízí, ovšem s&nbsp;tím, že v&nbsp;současné verzi
knihovny appJar jsou možnosti těchto prvků omezeny, což bude ostatně patrné i
při spuštění demonstračních příkladů. Kromě toho knihovna appJar nabízí i
několik dalších spíše jednoúčelových prvků, o nichž se samozřejmě taktéž ve
stručnosti zmíníme.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Ovládací prvek <strong>grid</strong> &ndash; jednoduchá tabulka</h2>

<p>Prvním ovládacím prvkem, s&nbsp;nímž se dnes seznámíme, je tabulka, která je
v&nbsp;knihovně <i>appJar</i> nazývána <i>grid</i>. Při konstrukci <i>gridu</i>
se konstruktoru představovanému metodou <strong>addGrid</strong> předává
dvourozměrná datová struktura, která je v&nbsp;Pythonu reprezentována tím
nejjednodušším možným způsobem, tj.&nbsp;seznamem obsahujícím jednotlivé řádky
tabulky, přičemž každý řádek je taktéž tvořen seznamem:</p>

<pre>
tabulka = [
   ["prvky, "na", "prvním", "řádku"],
   ["prvky, "na", "druhém", "řádku"],
   ["prvky, "na", "třetím", "řádku"]
]
</pre>

<p>Pokud všechny podseznamy obsahují shodný počet prvků, vytvoří se pravidelná
tabulka; v&nbsp;opačném případě budou některá políčka výsledné tabulky
nevyplněna. Ve skutečnosti je však při konstrukci <i>gridu</i> možné namísto
seznamů použít i n-tice (<i>tuple</i>) nebo generátory (<i>generator</i>), což
si samozřejmě taktéž ukážeme v&nbsp;demonstračních příkladech.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První příklad &ndash; použití prvku <strong>grid</strong> pro zobrazení klávesnice telefonu</h2>

<p>Ukažme si nyní, jakým způsobem je možné zobrazit jednoduchou tabulku
s&nbsp;využitím ovládacího prvku <i>grid</i>. Nejprve vytvoříme zdrojová data,
tj.&nbsp;seznam seznamů obsahujících jednotlivé prvky, které mají být
v&nbsp;tabulce zobrazeny, a předáme ji konstruktoru ovládacího prvku
<i>grid</i>. Prvek musí být pojmenován, což využijeme v&nbsp;dalších
příkladech:</p>

<pre>
app.addGrid("grid",
            [[' 1 ', ' 2 ', ' 3 '],
             [' 4 ', ' 5 ', ' 6 '],
             [' 7 ', ' 8 ', ' 9 '],
             [' * ', ' 0 ', ' # ']])
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-1.png" class="image-308893" alt="&#160;" width="401" height="344" />
<p><i>Obrázek 1: Prozatím jen velmi primitivní tabulka s&nbsp;klávesnicí ze
starých (dobrých) tlačítkových telefonů. Povšimněte si, že první řádek tabulky
tvoří nadpisy sloupců.</i></p>

<p>Do okna navíc přidáme menu s&nbsp;příkazem Quit, což je téma, kterému jsme
se již věnovali minule:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addGrid("grid",
            [[' 1 ', ' 2 ', ' 3 '],
             [' 4 ', ' 5 ', ' 6 '],
             [' 7 ', ' 8 ', ' 9 '],
             [' * ', ' 0 ', ' # ']])
&nbsp;
app.go()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vytvoření tabulky s&nbsp;použitím n-tic a generátorů</h2>

<p><a href="#k02">Ve druhé kapitole</a> jsme si řekli, že při tvorbě tabulky je
možné zdrojová data, která mají být zobrazena, vytvořit jako seznam seznamů,
popř.&nbsp;že je možné použít n-tice (<i>tuple</i>) nebo generátory. Nejprve se
podívejme na použití n-tic. Je to stejně snadné jako použití seznamů:</p>

<pre>
app.addGrid("grid",
            ((' 1 ', ' 2 ', ' 3 '),
             (' 4 ', ' 5 ', ' 6 '),
             (' 7 ', ' 8 ', ' 9 '),
             (' * ', ' 0 ', ' # ')))
</pre>

<p>Poznámka: n-tice jsou neměnitelné, což v&nbsp;některých případech může
zjednodušit pochopení zdrojového kódu.</p>

<img src="https://i.iinfo.cz/images/104/appjar5-2.png" class="image-308894" alt="&#160;" width="401" height="344" />
<p><i>Obrázek 2: Prakticky stejná aplikace, která však nyní používá n-tice a
nikoli seznamy pro zdrojová data tabulky.</i></p>

<p>Upravený zdrojový kód příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addGrid("grid",
            ((' 1 ', ' 2 ', ' 3 '),
             (' 4 ', ' 5 ', ' 6 '),
             (' 7 ', ' 8 ', ' 9 '),
             (' * ', ' 0 ', ' # ')))
&nbsp;
app.go()
</pre>

<p>Použití generátorů si vysvětlíme na známé konstrukci <strong>range</strong>.
Zdrojová data tabulky lze v&nbsp;případě potřeby (rozsáhlé tabulky) vytvořit i
následujícím způsobem:</p>

<pre>
app.addGrid("grid",
            <strong>(range(1, 4),</strong>
             <strong>range(4, 7),</strong>
             <strong>range(7, 10),</strong>
             <strong>(' * ', ' 0 ', ' # '))</strong>)
</pre>

<p>Upravený zdrojový kód příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addGrid("grid",
            <strong>(range(1, 4),</strong>
             <strong>range(4, 7),</strong>
             <strong>range(7, 10),</strong>
             <strong>(' * ', ' 0 ', ' # '))</strong>)
&nbsp;
app.go()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. První řádek tabulky s&nbsp;nadpisy sloupců</h2>

<p>Z&nbsp;předchozího screenshotu je patrné, že první řádek tabulky je
zvýrazněn, protože slouží pro zobrazení nadpisů. V&nbsp;současné verzi knihovny
<i>appJar</i> ovšem není možné nadpisy eliminovat, což znamená, že pokud
nechceme, aby se první řádek tlačítek telefonu zobrazil v&nbsp;prvním řádku,
musíme explicitně ve zdrojové tabulce vytvořit prázdný řádek, což není příliš
elegantní řešení:</p>

<pre>
app.addGrid("grid",
            [['', '', ''],
             [' 1 ', ' 2 ', ' 3 '],
             [' 4 ', ' 5 ', ' 6 '],
             [' 7 ', ' 8 ', ' 9 '],
             [' * ', ' 0 ', ' # ']])
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-3.png" class="image-308895" alt="&#160;" width="401" height="344" />
<p><i>Obrázek 3: Nyní je řádek s&nbsp;nadpisy prázdný, ale stále
viditelný.</i></p>

<p>Zdrojový text demonstračního příkladu se změní jen nepatrně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addGrid("grid",
            [<strong>['', '', ''],</strong>
             [' 1 ', ' 2 ', ' 3 '],
             [' 4 ', ' 5 ', ' 6 '],
             [' 7 ', ' 8 ', ' 9 '],
             [' * ', ' 0 ', ' # ']])
&nbsp;
app.go()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení tabulky s&nbsp;malou násobilkou</h2>

<p>V&nbsp;dalším příkladu si zobrazíme klasickou tabulku s&nbsp;malou
násobilkou (resp.&nbsp;libovolně velkou tabulku s&nbsp;násobilkou, nemusíme se
totiž omezit na činitele od jedné do deseti). Pro deklaraci zdrojových dat je
možné použít hned několik metod pro vytvoření seznamu seznamů s&nbsp;hodnotami
malé násobilky. Nejkratší je zápis využívající <i>generátorovou notaci
seznamu</i> neboli <i>list comprehension</i>. Náš úkol je však nepatrně
složitější, protože výsledkem nemá být jeden seznam, ale seznam seznamů, takže
budeme postupovat tak, že nejdříve vytvoříme podseznamy, které představují
řádky tabulky a z&nbsp;nich vytvoříme výsledný seznam řádků. Pro každý
následující řádek se zvýší hodnota počitadla <strong>i</strong>. Funkci, která
vrátí výslednou tabulku, je možné zapsat následovně:</p>

<pre>
def createTable(n):
    return [[i*j for i in range(1, n+1)] for j in range(1, n+1)]
</pre>

<p>Volání výše deklarované funkce <strong>createTable</strong> samozřejmě
můžeme umístit přímo do konstruktoru tabulky:</p>

<pre>
app.addGrid("grid", createTable(10))
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-4.png" class="image-308896" alt="&#160;" width="401" height="344" />
<p><i>Obrázek 4: Malá násobilka.</i></p>

<p>Opět si ukažme, jak může vypadat úplný zdrojový kód tohoto příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
<strong>def createTable(n):</strong>
    <strong>return [[i*j for i in range(1, n+1)] for j in range(1, n+1)]</strong>
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addGrid("grid", createTable(10))
&nbsp;
app.go()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Získání informací o vybraných políčkách tabulky</h2>

<p>Tabulka zobrazená ve widgetu <i>grid</i> není určena pouze pro zobrazení
předem připravených hodnot, ale je ji možné použít i pro další operace, i když
se samozřejmě v&nbsp;žádném případě nejedná o plnohodnotný tabulkový procesor.
Při testování předchozích příkladů jste si pravděpodobně všimli, že jednotlivá
políčka tabulek je možné vybírat pomocí myši. Pro získání informací o vybraných
políčkách se používá metoda <strong>getGridSelectedCells</strong>, která vrací
slovník, jehož klíči jsou adresy políček a hodnotami <strong>True</strong> pro
vybrané políčko a <strong>False</strong> pro políčko nevybrané. Zkusme si nyní
příklad upravit tak, aby dokázal zobrazit vybraná políčka. Nejdříve do okna
přidáme nové tlačítko:</p>

<pre>
app.addButton("Show selected cells", onButtonPress)
</pre>

<p>Na stisk tohoto tlačítka je navázána callback funkce nazvaná
<strong>onButtonPress</strong>, která přečte informace o tabulce pomocí výše
zmíněné metody <strong>getGridSelectedCells</strong> a získanou informaci bez
dalšího zpracování vytiskne na standardní výstup:</p>

<pre>
def onButtonPress(buttonName):
    cells = app.getGridSelectedCells("grid")
    print(cells)
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-5.png" class="image-308897" alt="&#160;" width="401" height="379" />
<p><i>Obrázek 5: Výběr buněk v&nbsp;tabulce.</i></p>

<p>Zdrojový kód takto upraveného příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    cells = app.getGridSelectedCells("grid")
    print(cells)
&nbsp;
&nbsp;
def createTable(n):
    return [[i*j for i in range(1, n+1)] for j in range(1, n+1)]
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addGrid("grid", createTable(10))
&nbsp;
app.addButton("Show selected cells", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zpracování slovníku s&nbsp;informacemi o vybraných políčkách tabulky</h2>

<p>Podívejme se nyní na příklad slovníku, který byl získán metodou
<strong>getGridSelectedCells</strong>:</p>

<pre>
{
    '4-6': True, '4-7': False, '0-8': False, '7-8': False, '5-5': False,
    '8-7': False, '3-4': False, '7-7': False, '6-7': False, '7-4': False,
    '1-2': False, '2-5': True, '5-6': False, '0-3': False, '6-4': False,
    '6-9': False, '2-9': False, '5-1': False, '8-3': False, '0-7': False,
    '7-9': False, '3-2': False, '5-4': False, '5-3': False, '3-3': False,
    '1-7': False, '2-2': False, '4-4': False, '8-0': False, '8-9': True,
    '6-2': False, '7-3': False, '6-3': False, '8-2': False, '6-0': False,
    '5-9': False, '4-9': False, '4-3': False, '7-5': False, '0-9': False,
    '5-0': False, '8-5': False, '8-8': False, '0-5': False, '7-6': False,
    '1-5': False, '2-8': False, '1-9': False, '5-7': False, '1-3': False,
    '4-0': False, '2-3': False, '3-8': False, '5-2': False, '3-0': False,
    '7-2': False, '1-8': False, '3-6': False, '3-5': False, '0-0': False,
    '8-4': False, '1-1': False, '5-8': False, '0-4': False, '1-4': False,
    '2-6': False, '1-6': False, '6-5': False, '3-9': False, '4-2': False,
    '8-1': False, '8-6': False, '6-8': False, '3-1': False, '2-4': False,
    '6-6': False, '0-2': False, '6-1': False, '4-5': False, '1-0': False,
    '4-8': False, '0-6': False, '0-1': True, '4-1': False, '7-1': False,
    '2-0': False, '3-7': False, '7-0': False, '2-1': False, '2-7': False
}
</pre>

<p>Vidíme, že klíče ve slovníku představují adresu políčka zapsanou
v&nbsp;řetězci, v&nbsp;němž je řádek a sloupec oddělen pomlčkou. Hodnoty pak
skutečně nabývají hodnot <strong>True</strong> pro vybrané políčko a
<strong>False</strong> pro políčko, které nebylo vybráno. Toho lze využít pro
snadné získání adres pouze těch buněk, které jsou vybrány. Opět využijeme
generátorovou notaci seznamu; tentokrát je ovšem iterační smyčka doplněna o
podmínku na hodnotu záznamu ve slovníku:</p>

<pre>
cells = app.getGridSelectedCells("grid")
selectedCells = [c for c, v in cells.items() if v]
</pre>

<p>Příklad použití &ndash; výpis vybraných buněk tabulky:</p>

<pre>
def onButtonPress(buttonName):
    cells = app.getGridSelectedCells("grid")
    selectedCells = [c for c, v in cells.items() if v]
    selectedCells.sort()
    print(selectedCells)
    if selectedCells:
        message = " ".join(selectedCells)
        app.infoBox("Selected cells", message)
    else:
        app.warningBox("Warning", "Please select at least one cell")
</pre>

<p>V&nbsp;případě potřeby lze adresu políčka (řádek, sloupec) z&nbsp;řetězce
získat například jednoduchým zpracováním řetězce s&nbsp;adresou (pro
jednoduchost neprovádím v&nbsp;kódu žádné kontroly na korektnost vstupu):</p>

<pre>
def parseCellAddress(cell):
    a = cell.split("-")
    return (int(a[0]), int(a[1]))
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    cells = app.getGridSelectedCells("grid")
    selectedCells = [c for c, v in cells.items() if v]
    selectedCells.sort()
    print(selectedCells)
    if selectedCells:
        message = " ".join(selectedCells)
        app.infoBox("Selected cells", message)
    else:
        app.warningBox("Warning", "Please select at least one cell")
    addresses = [parseCellAddress(c) for c in selectedCells]
    print(addresses)
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-6.png" class="image-308898" alt="&#160;" width="401" height="379" />
<p><i>Obrázek 6: Zobrazení vybraných buněk v&nbsp;tabulce.</i></p>

<p>Opět se podívejme na celý zdrojový kód příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    cells = app.getGridSelectedCells("grid")
    selectedCells = [c for c, v in cells.items() if v]
    selectedCells.sort()
    print(selectedCells)
    if selectedCells:
        message = " ".join(selectedCells)
        app.infoBox("Selected cells", message)
    else:
        app.warningBox("Warning", "Please select at least one cell")
&nbsp;
&nbsp;
def createTable(n):
    return [[i*j for i in range(1, n+1)] for j in range(1, n+1)]
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addGrid("grid", createTable(10))
&nbsp;
app.addButton("Show selected cells", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Tlačítka zobrazená u každého řádku tabulky a reakce na jejich stisk</h2>

<p>U každého řádku tabulky je možné zobrazit tlačítko, které po svém stisku
zavolá callback funkci, jíž se předá obsah daného řádku tabulky. Ukažme si
použití těchto tlačítek na jednoduché tabulce, ve které je zobrazen počet
odpracovaných hodin pro jednotlivé zaměstnance:</p>

<pre>
table = [["Name", "Work hours"],
         ["Petr", 160],
         ["Pavel", 90],
         ["Honza", 120]]
</pre>

<p>Zobrazení tlačítek a registrace callback funkce se provede takto:</p>

<pre>
app.addGrid("grid", table, action=onGridButton)
</pre>

<p>V&nbsp;callback funkci pak z&nbsp;předaného parametru získáme obsah obou
buněk na vybraném řádku tabulky (jména a počtu odpracovaných hodin):</p>

<pre>
name = values[0]
hours = int(values[1])
</pre>

<p>Z&nbsp;těchto údajů snadno vypočteme odpracované procento z&nbsp;normohodin
a zobrazíme ho uživateli v&nbsp;dialogu:</p>

<pre>
norm = 160
utilization = 100.0 * hours / norm
message = "{h} of {n} hours: {u:.0f} %".format(h=hours, n=norm, u=utilization)
app.infoBox("Work hours for " + name, message)
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-7.png" class="image-308899" alt="&#160;" width="401" height="349" />
<p><i>Obrázek 7: Výpočet procent z&nbsp;pracovní doby.</i></p>

<p>Opět si ukažme, jak vypadá úplný demonstrační příklad:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    cells = app.getGridSelectedCells("grid")
    selectedCells = [c for c, v in cells.items() if v]
    selectedCells.sort()
    print(selectedCells)
    if selectedCells:
        message = " ".join(selectedCells)
        app.infoBox("Selected cells", message)
    else:
        app.warningBox("Warning", "Please select at least one cell")
&nbsp;
&nbsp;
def onGridButton(values):
    name = values[0]
    hours = int(values[1])
    norm = 160
    utilization = 100.0 * hours / norm
    message = "{h} of {n} hours: {u:.0f} %".format(h=hours, n=norm, u=utilization)
    app.infoBox("Work hours for " + name, message)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
table = [["Name", "Work hours"],
         ["Petr", 160],
         ["Pavel", 90],
         ["Honza", 120]]
&nbsp;
app.addGrid("grid", table, action=onGridButton)
&nbsp;
app.addButton("Show selected cells", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zobrazení vstupních políček určených pro rozšíření tabulky</h2>

<p>Na poslední řádek tabulky je možné umístit vstupní políčka, která umožní
rozšířit tabulku o další řádky. Postupovat budeme následovně. Nejprve povolíme
zobrazení vstupních políček (a navíc i potvrzovacího tlačítka):</p>

<pre>
app.addGrid("grid", table, action=onAddRow, addRow=True)
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-8.png" class="image-308900" alt="&#160;" width="401" height="379" />
<p><i>Obrázek 8: Vyplnění dat pro nový řádek tabulky.</i></p>

<p>Dále připravíme callback funkci <strong>onAddRow</strong> tak, aby se
zkontrolovala data zadaná uživatelem a pokud jsou data v&nbsp;pořádku, aby se
do tabulky vložil nový řádek s&nbsp;těmito údaji. Povšimněte si, že se této
callback funkci předává řetězec &bdquo;newRow&ldquo;, protože se jedná o
stejnou callback funkci, jakou jsme použili v&nbsp;předchozím příkladu (což je,
pravda, poněkud podivné). Uživatelem zadaná data se získají metodou
<strong>getGridEntries</strong>:</p>

<pre>
def onAddRow(data):
    if data == "newRow":
        values = app.getGridEntries("grid")
        print(values)
        if values[0] and values[1]:
            app.addGridRow("grid", values)
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-9.png" class="image-308901" alt="&#160;" width="401" height="379" />
<p><i>Obrázek 9: Nová data byla skutečně do tabulky přidána.</i></p>

<p>Použití této callback funkce v&nbsp;příkladu může vypadat následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    cells = app.getGridSelectedCells("grid")
    selectedCells = [c for c, v in cells.items() if v]
    selectedCells.sort()
    print(selectedCells)
    if selectedCells:
        message = " ".join(selectedCells)
        app.infoBox("Selected cells", message)
    else:
        app.warningBox("Warning", "Please select at least one cell")
&nbsp;
&nbsp;
def onAddRow(data):
    if data == "newRow":
        values = app.getGridEntries("grid")
        print(values)
        if values[0] and values[1]:
            app.addGridRow("grid", values)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
table = [["Name", "Work hours"],
         ["Petr", 160],
         ["Pavel", 90],
         ["Honza", 120]]
&nbsp;
app.addGrid("grid", table, action=onAddRow, addRow=True)
&nbsp;
app.addButton("Show selected cells", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Kombinace předchozích dvou příkladů &ndash; rozšíření tabulky a výpočty nad daty v&nbsp;řádku</h2>

<p>Předchozí dva demonstrační příklady používaly shodnou callback funkci, ovšem
v&nbsp;prvním příkladu byla tato funkce zavolána ve chvíli, kdy se měly
zobrazit informace o odpracovaných hodinách zvoleného zaměstnance, zatímco
v&nbsp;příkladu druhém sloužila tatáž callback funkce pro přidání nového řádku
do tabulky. Pokud budeme chtít využít obě operace &ndash; výpočet i přidání
nového řádku, lze postupovat například takto:</p>

<pre>
def onAddRow(data):
    if data == "newRow":
        addNewRow(data)
    else:
        showWorkHours(data)
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-10.png" class="image-308902" alt="&#160;" width="401" height="379" />
<p><i>Obrázek 10: Vyplnění dat pro nový řádek tabulky.</i></p>

<p>Tato podmínka bude fungovat vždy, a to i ve chvíli, kdyby tabulka měla jen
jeden sloupec a uživatel zadal do vstupního pole taktéž řetězec
&bdquo;newRow&ldquo;. V&nbsp;takovém případě by se callback funkci předal
seznam s&nbsp;jediným prvkem. Další zpracování již známe:</p>

<pre>
def showWorkHours(values):
    name = values[0]
    hours = int(values[1])
    norm = 160
    utilization = 100.0 * hours / norm
    message = "{h} of {n} hours: {u:.0f} %".format(h=hours, n=norm, u=utilization)
    app.infoBox("Work hours for " + name, message)
&nbsp;
&nbsp;
def addNewRow(values):
    values = app.getGridEntries("grid")
    print(values)
    if values[0] and values[1] and re.search('\d', values[1]):
        app.addGridRow("grid", values)
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-11.png" class="image-308903" alt="&#160;" width="401" height="379" />
<p><i>Obrázek 11: Výpočet procent z&nbsp;pracovní doby pro nový řádek
tabulky.</i></p>

<p>Úplný kód tohoto příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import re
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    cells = app.getGridSelectedCells("grid")
    selectedCells = [c for c, v in cells.items() if v]
    selectedCells.sort()
    print(selectedCells)
    if selectedCells:
        message = " ".join(selectedCells)
        app.infoBox("Selected cells", message)
    else:
        app.warningBox("Warning", "Please select at least one cell")
&nbsp;
&nbsp;
def showWorkHours(values):
    name = values[0]
    hours = int(values[1])
    norm = 160
    utilization = 100.0 * hours / norm
    message = "{h} of {n} hours: {u:.0f} %".format(h=hours, n=norm, u=utilization)
    app.infoBox("Work hours for " + name, message)
&nbsp;
&nbsp;
def addNewRow(values):
    values = app.getGridEntries("grid")
    print(values)
    if values[0] and values[1] and re.search('\d', values[1]):
        app.addGridRow("grid", values)
&nbsp;
&nbsp;
def onAddRow(data):
    if data == "newRow":
        addNewRow(data)
    else:
        showWorkHours(data)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
table = [["Name", "Work hours"],
         ["Petr", 160],
         ["Pavel", 90],
         ["Honza", 120]]
&nbsp;
app.addGrid("grid", table, action=onAddRow, addRow=True)
&nbsp;
app.addButton("Show selected cells", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Ovládací prvek <strong>tree</strong> &ndash; strom zobrazující strukturu XML</h2>

<p>Další ovládací prvek, s&nbsp;nímž se v&nbsp;dnešním článku seznámíme, se
jmenuje <i>tree</i>, takže už jeho název napovídá, že se jedná o widget určený
pro zobrazení stromové struktury. Teoreticky by se mělo jednat o nejsložitější
ovládací prvek vůbec (viz například poměrně těžko ovladatelný widget <a
href="https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html">JTree</a>
z&nbsp;knihovny Swing pro Javu). Ve skutečnosti je však práce s&nbsp;widgetem
<i>tree</i> velmi jednoduchá, protože zdrojem dat je prakticky jakýkoli řetězec
obsahující validní XML. Takový řetězec může být zapsán přímo v&nbsp;programu,
nebo ho je možné načíst z&nbsp;externího souboru, získat z&nbsp;webové služby
apod. Navíc ovládací prvek <i>tree</i> umožňuje editaci listů stromu,
tj.&nbsp;koncových uzlů. Pokud jsou například zdrojová data reprezentována
tímto XML:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Titulek&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;První odstavec&lt;/div&gt;
        &lt;div&gt;Druhý odstavec&lt;/div&gt;
        &lt;div&gt;Třetí odstavec&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>vytvoří se strom, jehož kořen se bude jmenovat <strong>html</strong>, bude
obsahovat dva poduzly <strong>head</strong> a <strong>body</strong> atd. Listy
stromu pak budou obsahovat titulek a texty zapsané do odstavců:</p>

<img src="https://i.iinfo.cz/images/104/appjar5-12.png" class="image-308904" alt="&#160;" width="190" height="230" />
<p><i>Obrázek 12: Strom vytvořený z&nbsp;předchozího XML.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zobrazení jednoduchého stromu</h2>

<p>Zkusme si nyní podobný strom zobrazit v&nbsp;naší aplikaci. Nejdříve
nadeklarujeme řetězec s&nbsp;XML:</p>

<pre>
treeContent = """
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Titulek&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;První odstavec&lt;/div&gt;
        &lt;div&gt;Druhý odstavec&lt;/div&gt;
        &lt;div&gt;Třetí odstavec&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
"""
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-13.png" class="image-308905" alt="&#160;" width="411" height="354" />
<p><i>Obrázek 13: Zabalený strom.</i></p>

<p>Následně z&nbsp;těchto dat vytvoříme strom a zakážeme editaci jeho
listů:</p>

<pre>
app.addTree("tree", treeContent)
app.setTreeEditable("tree", False)
</pre>

<p>A to je vše...</p>

<img src="https://i.iinfo.cz/images/104/appjar5-14.png" class="image-308906" alt="&#160;" width="411" height="354" />
<p><i>Obrázek 14: Strom po rozbalení některých uzlů.</i></p>

<p>Další příklad po svém spuštění zobrazí strom a taktéž menu s&nbsp;příkazem
pro ukončení aplikace:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import re
&nbsp;
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
treeContent = """
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Titulek&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;První odstavec&lt;/div&gt;
        &lt;div&gt;Druhý odstavec&lt;/div&gt;
        &lt;div&gt;Třetí odstavec&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
"""
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addTree("tree", treeContent)
app.setTreeEditable("tree", False)
&nbsp;
app.go()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Konfigurace barev použitých při vykreslení stromu</h2>

<p>Knihovna <i>appJar</i> nabízí několik metod určených pro konfiguraci barev
použitých při vykreslení stromu. Nastavit je možné barvu textu uzlů, pozadí
celého stromu, barvu vybraného uzlu a taktéž barvu pozadí vybraného uzlu.
Všechny čtyři zmíněné barvy lze &ndash; v&nbsp;tomto pořadí &ndash;
specifikovat v&nbsp;metodě <strong>setTreeColours</strong>:</p>

<pre>
app.setTreeColours("tree", "black", "#aaffaa", "red", "yellow")
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-15.png" class="image-308907" alt="&#160;" width="411" height="354" />
<p><i>Obrázek 15: Strom se změněnou barvou pozadí.</i></p>

<p>Alternativně je možné barvy nastavit postupně jednou z&nbsp;těchto
metod:</p>

<table>
<tr><th>Metoda</th><th>Význam</th></tr>
<tr><td>setTreeFg</td><td>barva nevybraných uzlů</td></tr>
<tr><td>setTreeBg</td><td>pozadí stromu</td></tr>
<tr><td>setTreeHighlightFg</td><td>barva textu vybraného uzlu</td></tr>
<tr><td>setTreeHighlightBg</td><td>pozadí vybraného uzlu</td></tr>
</table>

<img src="https://i.iinfo.cz/images/104/appjar5-16.png" class="image-308908" alt="&#160;" width="411" height="354" />
<p><i>Obrázek 16: Změnila se i barva textu a pozadí vybraného uzlu.</i></p>

<p>Upravme si nyní náš demonstrační příklad takovým způsobem, aby pozadí stromu
bylo světle zelené a vybrané uzly měly červený text a žluté pozadí:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import re
&nbsp;
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
treeContent = """
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Titulek&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;První odstavec&lt;/div&gt;
        &lt;div&gt;Druhý odstavec&lt;/div&gt;
        &lt;div&gt;Třetí odstavec&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
"""
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addTree("tree", treeContent)
app.setTreeEditable("tree", False)
<strong>app.setTreeColours("tree", "black", "#aaffaa", "red", "yellow")</strong>
&nbsp;
app.go()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Strom s&nbsp;editovatelnými koncovými uzly</h2>

<p>Pokud je zapotřebí zařídit, aby mohl uživatel editovat koncové uzly stromu
(listy), postačuje zavolat následující metodu:</p>

<pre>
app.setTreeEditable("tree", True)
</pre>

<p>Poznámka: ve skutečnosti je strom editovatelný už ve výchozím nastavení,
uzly je možné editovat po dvojkliku.</p>

<img src="https://i.iinfo.cz/images/104/appjar5-17.png" class="image-308909" alt="&#160;" width="411" height="354" />
<p><i>Obrázek 17: Editace uzlu stromu.</i></p>

<p>Úprava programu je zcela triviální (viz zvýrazněný příkaz):</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import re
&nbsp;
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
treeContent = """
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Titulek&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Kapitola&lt;/h1&gt;
        &lt;div&gt;První odstavec&lt;/div&gt;
        &lt;div&gt;Druhý odstavec&lt;/div&gt;
        &lt;div&gt;Třetí odstavec&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
"""
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addTree("tree", treeContent)
<strong>app.setTreeEditable("tree", True)</strong>
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-18.png" class="image-308910" alt="&#160;" width="411" height="354" />
<p><i>Obrázek 18: Strom po editaci.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Získání obsahu vybraného uzlu</h2>

<p>V&nbsp;dnešním posledním demonstračním příkladu si ukážeme, jakým způsobem
se získá obsah (text) vybraného uzlu. K&nbsp;tomu poslouží metoda nazvaná
<strong>getTreeSelected</strong>, které se pouze předá jednoznačný
identifikátor widgetu:</p>

<pre>
item = app.getTreeSelected("tree")
</pre>

<p>Tuto metodu použijeme v&nbsp;callback funkci zavolané po stisku tlačítka
přidaného do okna aplikace. V&nbsp;callback funkci jen zkontrolujeme, jestli je
vůbec nějaký uzel stromu vybrán:</p>

<pre>
def onButtonPress(buttonName):
    item = app.getTreeSelected("tree")
    if item is None:
        app.warningBox("Warning", "No item (node) selected")
    else:
        app.infoBox("Selected item", item)
</pre>

<p>Registrace callback funkce se provádí nám již známým konstruktorem
tlačítka:</p>

<pre>
app.addButton("Show selected item", onButtonPress)
</pre>

<img src="https://i.iinfo.cz/images/104/appjar5-19.png" class="image-308911" alt="&#160;" width="411" height="387" />
<p><i>Obrázek 19: Zobrazení obsahu vybraného uzlu stromu.</i></p>

<p>Opět následuje výpis zdrojového kódu celého příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import re
&nbsp;
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
treeContent = """
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Titulek&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Kapitola&lt;/h1&gt;
        &lt;div&gt;První odstavec&lt;/div&gt;
        &lt;div&gt;Druhý odstavec&lt;/div&gt;
        &lt;div&gt;Třetí odstavec&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
"""
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    item = app.getTreeSelected("tree")
    if item is None:
        app.warningBox("Warning", "No item (node) selected")
    else:
        app.infoBox("Selected item", item)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addTree("tree", treeContent)
app.setTreeEditable("tree", True)
&nbsp;
app.addButton("Show selected item", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech čtrnácti dnes popsaných demonstračních příkladů byly
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>55_simple_grid.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/55_simple_grid.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/55_simple_grid.py</a></td></tr>
<tr><td>56_simple_grid_from_tuple.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/56_simple_grid_from_tuple.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/56_simple_grid_from_tuple.py</a></td></tr>
<tr><td>57_simple_grid_from_range.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/57_simple_grid_from_range.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/57_simple_grid_from_range.py</a></td></tr>
<tr><td>58_grid_1st_row.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/58_grid_1st_row.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/58_grid_1st_row.py</a></td></tr>
<tr><td>59_multiply_table.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/59_multiply_table.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/59_multiply_table.py</a></td></tr>
<tr><td>60_selected_cells.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/60_selected_cells.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/60_selected_cells.py</a></td></tr>
<tr><td>61_better_selected_cells.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/61_better_selected_cells.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/61_better_selected_cells.py</a></td></tr>
<tr><td>62_grid_buttons.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/62_grid_buttons.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/62_grid_buttons.py</a></td></tr>
<tr><td>63_add_row.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/63_add_row.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/63_add_row.py</a></td></tr>
<tr><td>64_add_row_compute_hours.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/64_add_row_compute_hours.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/64_add_row_compute_hours.py</a></td></tr>
<tr><td>65_simple_tree.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/65_simple_tree.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/65_simple_tree.py</a></td></tr>
<tr><td>66_tree_colors.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/66_tree_colors.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/66_tree_colors.py</a></td></tr>
<tr><td>67_editable_tree.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/67_editable_tree.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/67_editable_tree.py</a></td></tr>
<tr><td>68_get_node.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/68_get_node.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/68_get_node.py</a></td></tr>
</table>

<p>Poznámka: pro úspěšné spuštění těchto příkladů musíte mít v&nbsp;aktuálním
adresáři rozbalenou knihovnu <i>appJar</i>!. Podrobnosti o instalaci jsme si
řekli <a
href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/">v&nbsp;úvodním
článku</a>.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>The Java™ Tutorials: How to Use Trees<br />
<a href="https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html">https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html</a>
</li>

<li>Tree (data structure)<br />
<a href="https://en.wikipedia.org/wiki/Tree_%28data_structure%29">https://en.wikipedia.org/wiki/Tree_%28data_structure%29</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

