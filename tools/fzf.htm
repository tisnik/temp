<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části seriálu o utilitách vylepšujících práci s příkazovou řádkou se seznámíme s nástrojem nazvaným fzf neboli command-line fuzzy finder. Tento nástroj lze použít pro interaktivní vyhledání a výběr souborů, příkazů z historie, proměnných prostředí, větví v Git repositáři atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Projekt <i>fzf</i>: command-line fuzzy finder</a></p>
<p><a href="#k02">2. Princip činnosti nástroje <i>fzf</i></a></p>
<p><a href="#k03">3. Funkce nabízené projektem <i>fzf</i></a></p>
<p><a href="#k04">4. Instalace <i>fzf</i></a></p>
<p><a href="#k05">5. Vyhledávání souborů</a></p>
<p><a href="#k06">6. Režim výběru několika souborů</a></p>
<p><a href="#k07">7. Syntaxe výrazů používaná při vyhledávání</a></p>
<p><a href="#k08">8. Vyhledávání procesů podle jejich jména</a></p>
<p><a href="#k09">9. Připojení ke vzdáleným strojům přes ssh</a></p>
<p><a href="#k10">10. Práce s&nbsp;proměnnými prostředí</a></p>
<p><a href="#k11">11. Zjednodušení práce s&nbsp;Gitem</a></p>
<p><a href="#k12">12. Interaktivní příkaz <strong>cd</strong></a></p>
<p><a href="#k13">13. Prohlížení obsahu souboru vybraného přes <i>fzf</i></a></p>
<p><a href="#k14">14. Integrace <i>fzf</i> s&nbsp;projektem <i>Bat</i></a></p>
<p><a href="#k15">15. Vyhledávání v&nbsp;historii dříve zadaných příkazů</a></p>
<p><a href="#k16">16. Nástroj <i>fd</i></a></p>
<p><a href="#k17">17. Integrace <i>fzf</i> s&nbsp;Vimem</a></p>
<p><a href="#k18">18. Pokročilejší integrace s&nbsp;Vimem</a></p>
<p><a href="#k19">19. Alternativa ke kombinaci fzf+Vim: plugin CtrlP</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Projekt <i>fzf</i>: command-line fuzzy finder</h2>

<p>V&nbsp;předchozích dvou částech seriálu o utilitách, které je možné použít
pro vylepšení a zrychlení práce v&nbsp;příkazové řádce, jsme se nejprve
seznámili s&nbsp;nástrojem <i>Go Bullet Train</i> (<i>GBT</i>), jenž vylepšuje
výzvu <i>prompt</i> [<a
href="https://www.root.cz/clanky/vylepseni-prikazove-radky-nastrojem-go-bullet-train-gbt/">1</a>].
Dále jsme si popsali některé možnosti nástrojů <i>bat</i> a <i>ccat</i>, které
dokážou vypsat obsah souborů se zdrojovými kódy, konfiguračních souborů atd. se
zvýrazněním syntaxe (jedná se tedy o rozšíření standardní utility <i>cat</i>)
[<a
href="https://www.root.cz/clanky/nahrada-utility-cat-nastrojem-bat-a-ccat/">2</a>].
Ovšem existuje nepřeberné množství dalších užitečných nástrojů, které mohou
práci v&nbsp;příkazové řádce zjednodušit a/nebo urychlit. Jedním z&nbsp;těchto
nástrojů, jenž se navíc těší velké popularitě, je utilita nazvaná <i>fzf</i>
neboli &bdquo;command-line fuzzy finder&ldquo; (jméno je poněkud nepřesné,
protože <i>fzf</i> lze použít například i v&nbsp;textovém editoru Vim
atd.).</p>

<p><div class="rs-tip-major">Poznámka: mimochodem &ndash; jedná se o utilitu,
která je naprogramovaná <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">v&nbsp;jazyce Go</a>.
O opět, jako tomu bylo i minule, je možné tuto utilitu zkombinovat
s&nbsp;nástrojem <strong>df</strong>, který je pro změnu naprogramovaný <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">v&nbsp;Rustu</a>.
Vidíme, že v&nbsp;některých oblastech se možnosti nabízené jazyky Go a Rust
skutečně překrývají.</div></p>

<a href="https://www.root.cz/obrazek/401763/"><img src="https://i.iinfo.cz/images/5/fzf-14-prev.png" class="image-401763" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 1: Použití nástroje <strong>fzf</strong> společně s&nbsp;minule
popsanou utilitou <strong>bat</strong> při výběru souborů společně se
zobrazením obsahu souboru, který je aktuálně uživatelem vybrán.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Princip činnosti nástroje <i>fzf</i></h2>

<p>Základní funkce <i>fzf</i> je ve skutečnosti velmi jednoduchá a vlastně i
typicky &bdquo;unixovská&ldquo;. Nástroj <i>fzf</i> totiž na svém standardním
vstupu (<i>stdin</i>) získá libovolný seznam, který následně zobrazí a nechá
uživatele vybrat jednu položku z&nbsp;tohoto seznamu. Výsledek následně předá
na svůj standardní výstup (<i>stdout</i>) pro další zpracování. To
pravděpodobně nezní moc bombasticky ani příliš užitečně, ovšem samotný výběr
položky ze seznamu je plně interaktivní a podporuje takzvaný
&bdquo;fuzzy&ldquo; výběr (použitelný je i pro ty uživatele, kteří neznají
regulární výrazy). A především &ndash; největší síla <i>fzf</i> spočívá
v&nbsp;tom, že tento nástroj je možné kombinovat s&nbsp;vybranými standardními
příkazy popř.&nbsp;dalšími utilitami, všude tam, kde je nutné vybrat hodnotu ze
seznamu (platného například v&nbsp;nějakém kontextu). Možnosti využití jsou
prakticky nepřeberné, takže si v&nbsp;dalších kapitolách přiblížíme jen
nepatrný zlomek možného nasazení <i>fzf</i>.</p>

<a href="https://www.root.cz/obrazek/401764/"><img src="https://i.iinfo.cz/images/5/fzf-15-prev.png" class="image-401764" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 2: Použití standardního barvového schématu na terminálu
s&nbsp;tmavým pozadím.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Funkce nabízené projektem <i>fzf</i></h2>

<p>S&nbsp;principem základní činnosti <i>fzf</i> jsme se již seznámili <a
href="#k02">v&nbsp;předchozí kapitole</a>. Pojďme si ovšem popsat a následně
ukázat praktické příklady použití <i>fzf</i>. Tuto utilitu lze použít například
k&nbsp;těmto operacím:</p>

<ul>

<li>Vyhledávání v&nbsp;seznamu souborů. Jedná se o základní operaci nabízenou
utilitou <i>fzf</i> a už jen díky této vlastnosti se jedná o velmi užitečný
nástroj.</li>

<li>Vyhledávání souborů společně s&nbsp;prohlížením jejich obsahu
v&nbsp;kombinaci s&nbsp;utilitami <strong>cat</strong>, <strong>bat</strong> či
<strong>ccat</strong>.</li>

<li>Vyhledávání v&nbsp;seznamu procesů, typicky použitelné například pro příkaz
<strong>kill</strong> nebo <strong>renice</strong>.</li>

<li>Vyhledávání v&nbsp;seznamu proměnných prostředí (<i>environment
variables</i>).</li>

<li>Vyhledávání v&nbsp;historii příkazů (jedná se o vylepšení standardního
procházení historií přes <strong>Ctrl+R</strong>, <strong>Ctrl+P</strong>
atd.)</li>

<li>Vyhledávání v&nbsp;historii vzdálených počítačů, k&nbsp;nimž se uživatel
již dříve připojil s&nbsp;využitím <i>ssh</i>.</li>

<li>Spolupráce s&nbsp;Gitem při mnoha operacích &ndash; přepnutí do jiné větve,
přechod na vybraný <i>commit</i> atd.</li>

<li>Interaktivní varianta příkazu <strong>cd</strong>.</li>

<li>Integrace s&nbsp;textovým editorem <i>Vim</i>, například při vyhledávání
souborů atd. Ovšem podobným způsobem je možné <i>fzf</i> integrovat i do
dalších textových editorů spouštěných z&nbsp;terminálu.</li>

</ul>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace <i>fzf</i></h2>

<p>Instalaci nástroje <i>fzf</i> je možné provést několika způsoby.
V&nbsp;některých linuxových distribucích je tato utilita přímo součástí
instalačních balíčků (společně s&nbsp;dalšími pomocnými skripty a mnohdy i
integrací do Vimu), takže je instalace přímočará. Pro distribuce založené na
Fedoře či RHELu (včetně CentOS):</p>

<pre>
$ <strong>sudo dnf install fzf</strong>
</pre>

<p>V&nbsp;případě, že <i>fzf</i> ve vaší distribuci nenaleznete,
popř.&nbsp;pokud je v&nbsp;ní umístěna jen starší verze, je možné získat
binární spustitelnou verzi <i>fzf</i> přímo z&nbsp;GitHub repositáře, konkrétně
z&nbsp;adresy <a
href="https://github.com/junegunn/fzf-bin/releases/tag/0.20.0">https://github.com/junegunn/fzf-bin/releases/tag/0.20.0</a>.
Získaný archiv pro zvolený operační systém a mikroprocesorovou architekturu
postačuje rozbalit a umístit do nějakého adresáře, na který ukazuje proměnná
prostředí <strong>PATH</strong>.</p>

<p><div class="rs-tip-major">Poznámka: stažení, rozbalení a přímé použití
binárního obrazu <i>fzf</i> je možné díky tomu, že překladač a linker
programovacího jazyka Go implicitně provádí statické linkování.</div></p>

<p>Po instalaci provedené tímto způsobem by měla být k&nbsp;dispozici
mj.&nbsp;i stránka s&nbsp;manuálem:</p>

<pre>
$ <strong>man fzf</strong>
&nbsp;
fzf(1)                 fzf - a command-line fuzzy finder                fzf(1)
&nbsp;
NAME
       fzf - a command-line fuzzy finder
&nbsp;
SYNOPSIS
       fzf [options]
&nbsp;
DESCRIPTION
       fzf is a general-purpose command-line fuzzy finder.
&nbsp;
OPTIONS
   Search mode
       -x, --extended
              Extended-search  mode. Since 0.10.9, this is enabled by default.
              You can disable it with +x or --no-extended.
&nbsp;
       -e, --exact
              Enable exact-match
&nbsp;
       -i     Case-insensitive match (default: smart-case match)
&nbsp;
       +i     Case-sensitive match
...
...
...
</pre>

<p>Alternativně je samozřejmě možné získat zdrojové kódy <i>fzf</i> a provést
překlad přímo z&nbsp;nich. Pro tento účel postačuje mít nainstalovánu
standardní sadu nástrojů jazyka Go a mít korektně nastaveny proměnné prostředí
<strong>GOPATH</strong> a <strong>PATH</strong>:</p>

<pre>
$ <strong>export GOPATH=~/go</strong>
$ <strong>export PATH="$PATH:$GOPATH/bin"</strong>
</pre>

<p>Samotné stažení a překlad <i>fzf</i> je v&nbsp;tomto případě již
jednoduché:</p>

<pre>
$ <strong>go get github.com/junegunn/fzf</strong>
</pre>

<p>Navíc je vhodné provést nastavení konfigurace vámi používaného shellu. Pro
tento účel se použije skript <a
href="https://github.com/junegunn/fzf/blob/master/install">install</a>,
popř.&nbsp;lze rekonfiguraci provést ručně.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vyhledávání souborů</h2>

<p>V&nbsp;případě, že nástroj <strong>fzf</strong> spustíme bez dalších
parametrů, provede se explicitní příkaz, což je konkrétně příkaz
<strong>find</strong>, který projde celou adresářovou strukturou dostupnou
z&nbsp;aktuálního adresáře. Nakonec se seznam nalezených souborů a adresářů
zobrazí v&nbsp;okně terminálu s&nbsp;tím, že uživatel může ihned zahájit
procházení a především vyhledávání v&nbsp;seznamu:</p>

<a href="https://www.root.cz/obrazek/401750/"><img src="https://i.iinfo.cz/images/5/fzf-1-prev.png" class="image-401750" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 3: Prakticky okamžité vyhledávání v&nbsp;domácím adresáři
s&nbsp;přibližně 300&nbsp;000 soubory.</i></p>

<p>Zápisem části jména souboru lze vyhledávání zúžit tak, jak je to ukázáno na
dalším screenshotu:</p>

<a href="https://www.root.cz/obrazek/401751/"><img src="https://i.iinfo.cz/images/5/fzf-2-prev.png" class="image-401751" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 4: Části jména odpovídající vyhledávanému výrazu se průběžně
zvýrazňují.</i></p>

<p>Stiskem klávesy <strong>Enter</strong> se aktuálně vybraný soubor
(tj.&nbsp;soubor, na kterém se nachází kurzor) přenese na standardní výstup a
utilita <i>fzf</i> se ukončí. Pokud pouze potřebujeme utilitu ukončit bez
výběru souborů, lze pro tento účel použít <strong>CTRL-C</strong>,
<strong>CTRL-G</strong> nebo <strong>Esc</strong>.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Režim výběru několika souborů</h2>

<p>Existuje ještě jeden způsob spuštění utility <i>fzf</i>. Pokud bude spuštění
provedeno s&nbsp;přepínačem <strong>-m</strong>:</p>

<pre>
$ <strong>fzf -m</strong>
</pre>

<p>Bude možné klávesou <strong>Tab</strong> vybrat několik souborů, které se po
stisku <strong>Enter</strong> přenesou na standardní výstup. Tímto způsobem lze
například zajistit výběr zdrojových souborů, které se mají otevřít
v&nbsp;textovém editoru Vim:</p>

<pre>
$ <strong>vim -o `fzf -m`</strong>
</pre>

<p>Samozřejmě nám nic nebrání si takový (či jakýkoli jiný podobný) příkaz
uložit do <strong>.bashrc</strong> či <strong>.bash_profile</strong> ve formě
aliasu:</p>

<pre>
$ <strong>alias e='vim -o `fzf -m`'</strong>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Syntaxe výrazů používaná při vyhledávání</h2>

<p>Při vyhledávání v&nbsp;seznamu, resp.&nbsp;přesněji řečeno pro zúžení
výběru, lze do vstupního řádku zadávat jednotlivá slova či jejich části
oddělená mezerou. Nástroj <i>fzf</i> ze seznamu (například seznamu souborů)
vybere pouze ty položky, které daná slova obsahují, popř.&nbsp;obsahují text,
kde jsou písmena zapsaných slov obsažena. Mezi písmeny se ovšem mohou nacházet
i další znaky. To znamená, že například při zápisu &bdquo;module.py&ldquo; se
nabídnou k&nbsp;výběru tyto soubory:</p>

<pre>
Tools/<strong>modul</strong>ator/Scroll<strong>e</strong>dListbox<strong>.py</strong>
Tools/<strong>modul</strong>ator/Tk<strong>e</strong>xtra<strong>.py</strong>
<strong>module</strong>s2<strong>.py</strong>
test_<strong>module.py</strong>
...
...
...
</pre>

<p><div class="rs-tip-major">Poznámka: právě z&nbsp;tohoto důvodu se používá
termín <i>fuzzy search</i> nebo též <i>fuzzy match</i>.</div></p>

<p>Některé znaky však mají speciální význam:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>module</td><td>fuzzy search popsaný výše</td></tr>
<tr><td>2</td><td>'module</td><td>vybere jen ty položky, které skutečně obsahují text &bdquo;module&ldquo;</td></tr>
<tr><td>3</td><td>^module</td><td>položka musí daným textem začínat</td></tr>
<tr><td>4</td><td>.py$</td><td>položka musí daným textem končit</td></tr>
<tr><td>5</td><td>!zip</td><td>položka nesmí obsahovat daný text</td></tr>
<tr><td>6</td><td>!^test</td><td>kombinace možností ! a ^ (položka nesmí začínat daným slovem)</td></tr>
<tr><td>7</td><td>!.jar$</td><td>kombinace možností ! a $ (položka nesmí končit daným slovem)</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vyhledávání procesů podle jejich jména</h2>

<p>Pokud je instalace <i>fzf</i> provedena korektně, je možné vyhledávat
procesy podle svého jména popř.&nbsp;obsahu příkazové řádky. Postačuje napsat
například:</p>

<pre>
$ <strong>kill -9&lt;Tab&gt;</strong>
</pre>

<p>Po stisku klávesy <strong>Tab</strong> by se měl ukázat seznam procesů
s&nbsp;možností listování tímto seznamem, vyhledávání atd. (a to včetně výběru
více procesů klávesou <strong>Tab</strong>):</p>

<a href="https://www.root.cz/obrazek/401752/"><img src="https://i.iinfo.cz/images/5/fzf-3-prev.png" class="image-401752" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 5: Výpis procesů, které je možné &bdquo;zabít&ldquo;, včetně
systemd :-)</i></p>

<p>Interně je tato funkce v&nbsp;BASHi implementována následovně:</p>

<pre>
_fzf_complete_kill() {
  [ -n "${COMP_WORDS[COMP_CWORD]}" ] &amp;&amp; return 1
  local selected fzf
  fzf="$(__fzfcmd_complete)"
  selected=$(command ps -ef | sed 1d | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-50%} --min-height 15 --reverse $FZF_DEFAULT_OPTS --preview 'echo {}' --preview-window down:3:wrap $FZF_COMPLETION_OPTS" $<strong>fzf -m</strong> | awk '{print $2}' | tr '\n' ' ')
  printf '\e[5n'
  if [ -n "$selected" ]; then
    COMPREPLY=( "$selected" )
    return 0
  fi
}
</pre>

<p><div class="rs-tip-major">Poznámka: právě na tomto příkladu je pěkně vidět,
jakým způsobem vznikne kombinací <i>fzf</i> s&nbsp;jiným nástrojem (zde
konkrétně s&nbsp;<i>ps</i> a <i>kill</i>) zcela nová utilita.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Připojení ke vzdáleným strojům přes ssh</h2>

<p>Mezi další užitečné funkce, zejména pro administrátory a devops, patří
vyhledání v&nbsp;seznamu strojů, na které se již uživatel připojil
s&nbsp;využitím <i>ssh</i>. Primárně se seznam těchto počítačů hledá
v&nbsp;souboru <strong>~/.ssh/known_hosts</strong>. Na příkazovou řádku je
možné zadat jen:</p>

<pre>
$ <strong>ssh **&lt;Tab&gt;</strong>
</pre>

<p>Ihned po stisku klávesy <strong>Tab</strong> se zobrazí seznam strojů.
Podobně je možné vyhledat počítače, ke kterým se uživatel připojil pomocí
<i>Telnetu</i> (kupodivu i pro Telnet se dnes ještě najde uplatnění):</p>

<pre>
$ <strong>telnet **&lt;Tab&gt;</strong>
</pre>

<a href="https://www.root.cz/obrazek/401753/"><img src="https://i.iinfo.cz/images/5/fzf-4-prev.png" class="image-401753" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 6: Vyhledávání v&nbsp;historii připojení ke vzdáleným strojům
přes ssh.</i></p>

<p>Pokud vás opět zajímá, jak je tato funkce implementována, stačí se podívat
na příslušný skript pro BASH:</p>

<pre>
_fzf_host_completion() {
  _fzf_complete '+m' "$@" &lt; &lt;(
    cat &lt;(cat ~/.ssh/config ~/.ssh/config.d/* /etc/ssh/ssh_config 2&gt; /dev/null | command grep -i '^\s*host\(name\)\? ' | awk '{for (i = 2; i &lt;= NF; i++) print $1 " " $i}' | command grep -v '[*?]') \
        &lt;(command grep -oE '^[[a-z0-9.,:-]+' ~/.ssh/known_hosts | tr ',' '\n' | tr -d '[' | awk '{ print $1 " " $1 }') \
        &lt;(command grep -v '^\s*\(#\|$\)' /etc/hosts | command grep -Fv '0.0.0.0') |
        awk '{if (length($2) &gt; 0) {print $2}}' | sort -u
  )
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Práce s&nbsp;proměnnými prostředí</h2>

<p>Pro příkazy <strong>export</strong>, <strong>unset</strong> a
<strong>unalias</strong> lze vypsat seznam proměnných prostředí, pochopitelně
opět s&nbsp;možností interaktivního výběru. Syntaxe zápisu je podobná, jako
tomu bylo u příkazů <strong>ssh</strong> a <strong>telnet</strong>:</p>

<pre>
$ <strong>unset **&lt;Tab&gt;</strong>
$ <strong>export **&lt;Tab&gt;</strong>
$ <strong>unalias **&lt;Tab&gt;</strong>
</pre>

<a href="https://www.root.cz/obrazek/401754/"><img src="https://i.iinfo.cz/images/5/fzf-5-prev.png" class="image-401754" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 7: Vyhledávání prováděné v&nbsp;seznamu proměnných
prostředí.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zjednodušení práce s&nbsp;Gitem</h2>

<p>I při práci s&nbsp;Gitem někdy pracujeme se seznamem položek, z&nbsp;nichž
je možné si vybírat. Týká se to například příkazu <strong>git
checkout</strong>, který umožňuje přepnutí mezi větvemi (<i>branch</i>).
Následuje výpis krátké BASHové funkce, která utilitu <strong>fzf</strong>
využívá právě k&nbsp;zobrazení seznamu větví (včetně větví ve vzdáleném
repositáři), mezi nimiž se lze přepínat:</p>

<pre>
fbr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &amp;&amp;
  branch=$(echo "$branches" |
           fzf -d $(( 2 + $(wc -l &lt;&lt;&lt; "$branches") )) +m) &amp;&amp;
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
</pre>

<p>Příklad použití je patrný z&nbsp;následujících screenshotů:</p>

<a href="https://www.root.cz/obrazek/401757/"><img src="https://i.iinfo.cz/images/5/fzf-8-prev.png" class="image-401757" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 8: Přepínání mezi větvemi Git repositáře.</i></p>

<a href="https://www.root.cz/obrazek/401758/"><img src="https://i.iinfo.cz/images/5/fzf-9-prev.png" class="image-401758" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 9: Přepínání mezi větvemi Git repositáře (výsledek
z&nbsp;předchozího výběru).</i></p>

<a href="https://www.root.cz/obrazek/401759/"><img src="https://i.iinfo.cz/images/5/fzf-10-prev.png" class="image-401759" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 10: Přepínání mezi větvemi Git repositáře.</i></p>

<p>Podobným způsobem lze vytvořit funkci pro přepnutí na zvolený <i>commit</i>,
pochopitelně opět příkazem <strong>git checkout</strong>:</p>

<pre>
fcoc() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &amp;&amp;
  commit=$(echo "$commits" | fzf --tac +s +m -e) &amp;&amp;
  git checkout $(echo "$commit" | sed "s/ .*//")
}
</pre>

<p></p>

<p><a href="https://www.root.cz/obrazek/401765/"><img src="https://i.iinfo.cz/images/113/fzf2-1-prev.png" class="image-401765" alt="&#160;" width="370" height="232" /></a></p>
<p><i>Obrázek 11: Přepínání mezi commity ve vybrané větvi Git
repositáře.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Interaktivní příkaz <strong>cd</strong></h2>

<p>Další zajímavý způsob využití nalézá nástroj <i>fzf</i> při implementaci
interaktivního příkazu <strong>cd</strong>. Zatímco klasický příkaz
<strong>cd</strong> (který bývá vestavěn do shellu &ndash; je to tedy
&bdquo;builtin&ldquo; příkaz) očekává zadání názvu adresáře, upravený příkaz se
chová odlišně. Pokud je zavolán bez parametrů, zobrazí seznam adresářů,
z&nbsp;nichž je možné provést interaktivní výběr. Implementace, která je opět
získaná z&nbsp;oficiálního seznamu rozšíření <i>fzf</i>, vypadá následovně:</p>

<pre>
function cd() {
    if [[ "$#" != 0 ]]; then
        builtin cd "$@";
        return
    fi
    while true; do
        local lsd=$(echo ".." &amp;&amp; ls -p | grep '/$' | sed 's;/$;;')
        local dir="$(printf '%s\n' "${lsd[@]}" |
            fzf --reverse --preview '
                __cd_nxt="$(echo {})";
                __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
                echo $__cd_path;
                echo;
                ls -p --color=always "${__cd_path}";
        ')"
        [[ ${#dir} != 0 ]] || return 0
        builtin cd "$dir" &amp;&gt; /dev/null
    done
}
</pre>

<p>Příklad použití takto rozšířeného příkazu <strong>cd</strong> si můžeme
ukázat na screenshotu terminálu:</p>

<a href="https://www.root.cz/obrazek/401761/"><img src="https://i.iinfo.cz/images/5/fzf-12-prev.png" class="image-401761" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 12: Interaktivní příkaz <strong>cd</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: nevýhodou je, že se ztrácí původní
funkce příkazu <strong>cd</strong> ve chvíli, kdy je zavolán bez parametrů.
Namísto přechodu do domácího adresáře se zobrazí seznam podadresářů. Samozřejmě
vám ovšem nic nebrání v&nbsp;přejmenování funkce &bdquo;cd&ldquo; na vhodnější
název, například &bdquo;icd&ldquo; (&bdquo;interactive
<strong>cd</strong>&ldquo;).</div></p>

<a href="https://www.root.cz/obrazek/401762/"><img src="https://i.iinfo.cz/images/5/fzf-13-prev.png" class="image-401762" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 13: Interaktivní příkaz <strong>cd</strong> společně se
zobrazením souborů.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Prohlížení obsahu souboru vybraného přes <i>fzf</i></h2>

<p>Velmi pěkná je kombinace možností utility <i>fzf</i> se standardním
nástrojem <i>cat</i>, protože v&nbsp;tomto případě je možné zobrazit obsah
souboru v&nbsp;pravé části plochy monitoru (takže se tady využijí i širokoúhlé
monitory). Postačuje použít přepínač <strong>--preview</strong>, kterému se
předá název utility použité ve funkci prohlížečky:</p>

<pre>
$ <strong>fzf --preview 'cat {}'</strong>
</pre>

<p>Praktičtější je však vytvoření nového příkazu přes <i>alias</i>, například
příkazu <strong>fp</strong> (<i>fuzzy preview</i>):</p>

<pre>
$ <strong>alias fp="fzf --preview 'cat {}'"</strong>
</pre>

<a href="https://www.root.cz/obrazek/401755/"><img src="https://i.iinfo.cz/images/5/fzf-6-prev.png" class="image-401755" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 14: Vyhledávání spojené se zobrazením obsahu souboru, zde
konkrétně s&nbsp;využitím standardní utility <strong>cat</strong>.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Integrace <i>fzf</i> s&nbsp;projektem <i>Bat</i></h2>

<p>V&nbsp;<a
href="https://www.root.cz/clanky/nahrada-utility-cat-nastrojem-bat-a-ccat/">předchozí
části</a> seriálu o nástrojích vylepšujících práci s&nbsp;příkazovou řádkou
jsme se seznámili s&nbsp;projektem <i>bat</i> a taktéž <i>ccat</i>. Vzhledem
k&nbsp;tomu, že <strong>Bat</strong> se používá jako náhrada za standardní
nástroj <i>cat</i>, můžeme i <i>bat</i> zkombinovat s&nbsp;<i>fzf</i>, a to
například takto:</p>

<pre>
$ <strong>alias fp="fzf --preview '~/bin/bat {} --color=always'"</strong>
</pre>

<a href="https://www.root.cz/obrazek/401756/"><img src="https://i.iinfo.cz/images/5/fzf-7-prev.png" class="image-401756" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 15: Vyhledávání spojené se zobrazením souboru se zvýrazněním
syntaxe. Tentokrát je použit nástroj <strong>bat</strong> namísto standardního
nástroje <strong>cat</strong>.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vyhledávání v&nbsp;historii dříve zadaných příkazů</h2>

<p>Možností nabízených kombinací <i>fzf</i> s&nbsp;dalšími nástroji je
pochopitelně ještě více. Podívejme se na typický příklad &ndash; výše zmíněný
interaktivní příkaz <strong>cd</strong> lze zkombinovat s&nbsp;prohlížením
obsahu aktuálně vybraného souboru:</p>

<a href="https://www.root.cz/obrazek/401760/"><img src="https://i.iinfo.cz/images/5/fzf-11-prev.png" class="image-401760" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 16: Interaktivní příkaz <strong>cd</strong> společně se
zobrazením souborů.</i></p>

<p>Další skript je tentokrát velmi krátký. Umožňuje vyhledávání v&nbsp;historii
dříve zadaných příkazů, opět s&nbsp;využitím <i>fuzzy</i> režimu (který je zde
velmi užitečný, především ve chvíli, kdy si přesně nepamatujeme přesné pořadí
slov v&nbsp;zadávaných příkazech):</p>

<pre>
fh() {
  eval $( ([ -n "$ZSH_NAME" ] &amp;&amp; fc -l 1 || history) | <strong>fzf</strong> +s --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Nástroj <i>fd</i></h2>

<p>Nástroj <i>fzf</i> lze, a to velmi úspěšně, zkombinovat s&nbsp;utilitou
nazvanou jednoduše <a
href="https://github.com/sharkdp/fd">https://github.com/sharkdp/fd</a>. Jedná
se o náhradu za příkaz <strong>find</strong>, která je však při běžném
používání rychlejší. Přenastavení z&nbsp;výchozího používání
<strong>find</strong> za <strong>fd</strong> se provede takto:</p>

<pre>
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}
&nbsp;
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Integrace <i>fzf</i> s&nbsp;Vimem</h2>

<p>V&nbsp;závěru dnešního článku se ještě zmíníme o integraci nástroje
<i>fzf</i> s&nbsp;textovým editorem Vim. Nejprve se podívejme na spuštění
<i>fzf</i> s&nbsp;výběrem souborů, které se otevřou ve Vimu. Připomeňme si, že
volba <strong>-o</strong> instruuje Vim, aby soubory otevřel každý ve svém okně
(okno&ndash;windows ve Vimu odpovídá určité ploše terminálu):</p>

<pre>
$ <strong>alias e='vim -o `fzf -m`'</strong>
</pre>

<p>Pokud preferujete otevření souborů v&nbsp;tabech, je úprava jednoduchá:</p>

<pre>
$ <strong>alias t='vim -p `fzf -m`'</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: mezi taby se lze přepínat například
kombinací kláves <strong>Ctrl+PageUp</strong> a <strong>Ctrl+PageDown</strong>
popř.&nbsp;rychlejšími zkratkami <strong>gt</strong> a
<strong>gT</strong>.</div></p>

<p>Další příkaz zobrazí seznam naposledy editovaných souborů, který je
(většinou) uložen v&nbsp;souboru <strong>.viminfo</strong>:</p>

<pre>
v() {
  local files
  files=$(grep '^&gt;' ~/.viminfo | cut -c3- |
          while read line; do
            [ -f "${line/\~/$HOME}" ] &amp;&amp; echo "$line"
          done | fzf-tmux -d -m -q "$*" -1) &amp;&amp; vim ${files//\~/$HOME}
}
</pre>

<p>Samozřejmě je taktéž možné využít klasickou verzi nástroje <i>fzf</i>,
nikoli nutně <i>fzf-tmux</i>. Definice funkce <strong>v()</strong> se
v&nbsp;tomto případě nepatrně pozmění:</p>

<pre>
v() {
  local files
  files=$(grep '^&gt;' ~/temp/_viminfo | cut -c3- |
          while read line; do
            [ -f "${line/\~/$HOME}" ] &amp;&amp; echo "$line"
          done | fzf -d -m -q "$*" -1) &amp;&amp; vim ${files//\~/$HOME}
}
</pre>

<p>To ovšem není vše. Přímo v&nbsp;repositáři projektu <i>fzf</i> se nachází
skript <strong>fzf.vim</strong>. Po načtení tohoto skriptu bude mít uživatel
k&nbsp;dispozici nový příkaz <strong>:FZF</strong>, jenž otevře vyhledávání
souborů. Pochopitelně je možné si tento příkaz namapovat na vhodnou klávesovou
zkratku, například:</p>

<pre>
:map &lt;F3&gt; :FZF&lt;CR&gt;
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Pokročilejší integrace s&nbsp;Vimem</h2>

<p>Ve skutečnosti nabízí skript <strong>fzf.vim</strong>, o němž jsme se
zmínili v&nbsp;předchozí kapitole, ještě další funkce. Ty jsou ovšem určeny
spíše autorům pluginů, než koncovým uživatelům. A právě tyto funkce jsou
použity v&nbsp;plnohodnotném pluginu <a
href="https://github.com/junegunn/fzf.vim">fzf♥️vim</a>. Po instalaci tohoto
skriptu dostane uživatel textového editoru Vim k&nbsp;dispozici další příkazy
založené právě na možnostech <i>fzf</i>:</div></p>

<table>
<tr><th> #</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td> 1</td><td>:Files    </td><td>jako příkaz <strong>:FZF</strong></td></tr>
<tr><td> 2</td><td>:GFiles   </td><td>výběr souborů v&nbsp;Git repositáři</td></tr>
<tr><td> 3</td><td>:GFiles?  </td><td>výběr změněných souborů v&nbsp;Git repositáři</td></tr>
<tr><td> 4</td><td>:Buffers  </td><td>výběr z&nbsp;bufferů</td></tr>
<tr><td> 5</td><td>:Colors   </td><td>výběr barvového schématu</td></tr>
<tr><td> 6</td><td>:Ag       </td><td>výběr z&nbsp;výsledku <a href="https://github.com/ggreer/the_silver_searcher">https://github.com/ggreer/the_silver_searcher</a></td></tr>
<tr><td> 7</td><td>:Rg       </td><td>výběr z&nbsp;výsledku <a href="https://github.com/BurntSushi/ripgrep">https://github.com/BurntSushi/ripgrep</a></td></tr>
<tr><td> 8</td><td>:Lines    </td><td>přímý výběr z&nbsp;textových řádků dostupných Vimu (opět velmi užitečné)</td></tr>
<tr><td> 9</td><td>:BLines   </td><td>přímý výběr z&nbsp;textových řádků v&nbsp;aktuálním bufferu</td></tr>
<tr><td>10</td><td>:Tags     </td><td>tagy vygenerované pro daný projekt</td></tr>
<tr><td>11</td><td>:BTags    </td><td>tagy pro současně otevřený buffer</td></tr>
<tr><td>12</td><td>:Marks    </td><td>seznam značek Vimu</td></tr>
<tr><td>13</td><td>:Windows  </td><td>seznam oken Vimu</td></tr>
<tr><td>14</td><td>:History  </td><td>historie otevřených souborů</td></tr>
<tr><td>15</td><td>:History: </td><td>historie příkazů</td></tr>
<tr><td>16</td><td>:History/ </td><td>historie vyhledávaných řetězců</td></tr>
<tr><td>17</td><td>:Snippets </td><td>seznam snippetů (musí být nainstalová příslušný plugin)</td></tr>
<tr><td>18</td><td>:Commits  </td><td>vyhledávání v&nbsp;commitech (Git)</td></tr>
<tr><td>19</td><td>:BCommits </td><td>vyhledávání v&nbsp;commitech (Git)</td></tr>
<tr><td>20</td><td>:Maps     </td><td>nastavená mapování</td></tr>
<tr><td>21</td><td>:Helptags </td><td>výběr ze seznamu tagů určených pro pohyb v&nbsp;nápovědě (velmi užitečné!)</td></tr>
<tr><td>22</td><td>:Filetypes</td><td>výběr ze seznamu typů souborů</td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Alternativa ke kombinaci fzf+Vim: plugin CtrlP</h2>

<p><div class="rs-tip-major">Kombinace <i>fzf+Vim</i> umožňuje rychlé výběry
z&nbsp;různých seznamů, ovšem existuje i alternativní řešení založené čistě na
VimScriptu, bez nutnosti mít k&nbsp;dispozici binární soubor
<strong>fzf</strong> (ovšem za cenu výrazného zpomalení všech operací). Jedná
se o modul <i>ctrlp.vim</i>.</div></p>

<p>Pro mnoho uživatelů textového editoru <i>Vim</i> se stal velmi užitečným
přídavným modulem plugin nazvaný <i>ctrlp.vim</i>. Po instalaci tohoto pluginu
je možné přes klávesovou zkratku <strong>Ctrl-P</strong>, která modulu dala
název, vyhledávat soubory, buffery atd., a to i s&nbsp;využitím regulárních
výrazů. Podobně jako samotný <i>Vim</i>, i plugin <i>ctrlp.vim</i> se může
nacházet v&nbsp;několika režimech, mezi nimiž se uživatel přepíná několika
klávesovými zkratkami (každý režim je reprezentován jinou výzvou &ndash;
prompt). Tento plugin taktéž dokáže vytvářet soubory i adresáře, otevřít větší
množství souborů současně apod. Jedná se tedy o alternativu k&nbsp;minule
popsanému pluginu <i>NERD Tree</i>, i když způsob ovládání <i>NERT Tree</i> se
značně odlišuje od ovládání <i>ctrlp.vim</i> &ndash; každému uživateli bude
vyhovovat něco jiného (druhý jmenovaný plugin má nepochybně větší množství
příkazů, ovšem zpočátku je poněkud nepřehledný &ndash; tento problém však po
několika použitích zmizí).</p>

<a href="http://www.root.cz/obrazek/202062/"><img src="http://i.iinfo.cz/images/173/vim3-12-prev.png" class="image-202062" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 17: Nápověda k&nbsp;pluginu ctrlp.vim.</i></p>

<p>Plugin <i>ctrlp.vim</i> se vyvolá v&nbsp;normálním režimu klávesovou
zkratkou <strong>Ctrl-P</strong> (kterou však je možné samozřejmě přemapovat).
Po použití této zkratky se zobrazí nové horizontálně rozdělené okno se
speciálně naformátovaným stavovým řádkem. Změní se i vstupní řádek, do něhož je
možné začít zapisovat jméno souboru, resp.&nbsp;přesněji řečeno část jména
&ndash; mnohdy postačuje zadat několik počátečních písmen či počáteční a
koncové písmeno &ndash; ihned při psaní se seznam souborů zmenšuje či zvětšuje
tak, aby odpovídal zadané masce. Soubory se vyhledávají jak v&nbsp;aktuálním
adresáři, tak i v&nbsp;podadresářích, což je výhodné především ve chvíli, kdy
uživatel pracuje na rozsáhlejším projektu. K&nbsp;dispozici je velké množství
klávesových zkratek, zejména pak:</p>

<table>
<tr><th>Klávesová zkratka</th><th>Význam</th></tr>
<tr><td>Ctrl+D</td><td>přepnutí mezi vyhledáváním ve jménech souborů či i ve jménech souborů a adresářů (výchozí)</td></tr>
<tr><td>Ctrl+R</td><td>přepnutí mezi použitím regexpů či tzv. řetězcového režimu (výchozí)</td></tr>
<tr><td>Ctrl+T</td><td>otevření vybraného souboru v&nbsp;novém tabu</td></tr>
<tr><td>Ctrl+V</td><td>vertikální rozdělení okna a otevření vybraného souboru</td></tr>
<tr><td>Ctrl+S</td><td>horizontální rozdělení okna a otevření vybraného souboru</td></tr>
<tr><td>Ctrl+Z</td><td>označení souboru (vedle jména souboru se zobrazí značka)</td></tr>
<tr><td>Ctrl+O</td><td>otevření všech označených souborů</td></tr>
<tr><td>Tab</td><td>automatické doplnění názvu adresáře</td></tr>
<tr><td>Esc</td><td>zavření okna pluginu <i>ctrlp.vim</i></td></tr>
</table>

<a href="http://www.root.cz/obrazek/202065/"><img src="http://i.iinfo.cz/images/173/vim3-15-prev.png" class="image-202065" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 18: Zvýraznění souborů na základě zapsané masky.</i></p>

<a href="http://www.root.cz/obrazek/202063/"><img src="http://i.iinfo.cz/images/173/vim3-13-prev.png" class="image-202063" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 19: Výběr souborů pro editaci s&nbsp;využitím pluginu ctrlp.vim.</i></p>

<p>V&nbsp;tabulce je mj.&nbsp;zmíněn tzv. řetězcový režim. Jedná se o způsob
reprezentace masky bez explicitního použití regexpů. Po zadání řetězce
&bdquo;abc&ldquo; v&nbsp;řetězcovém režimu je tento řetězec interně chápán jako
regulární výraz &bdquo;a[^a]\{-}b[^b]\{-}c&ldquo;, což sice vypadá poněkud
složitě, nicméně řetězcový režim je v&nbsp;praxi dosti návykový :-)</p>

<a href="http://www.root.cz/obrazek/202064/"><img src="http://i.iinfo.cz/images/173/vim3-14-prev.png" class="image-202064" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 20: Výběr souborů pro editaci s&nbsp;využitím pluginu
ctrlp.vim.</i></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositář projektu fzf<br />
<a href="https://github.com/junegunn/fzf">https://github.com/junegunn/fzf</a>
</li>

<li>fzf wiki &ndash; příklady použití<br />
<a href="https://github.com/junegunn/fzf/wiki/examples">https://github.com/junegunn/fzf/wiki/examples</a>
</li>

<li>fzf.vim<br />
<a href="https://github.com/junegunn/fzf.vim">https://github.com/junegunn/fzf.vim</a>
</li>

<li>Vim universe. fzf - command line fuzzy finder (video)<br />
<a href="https://www.youtube.com/watch?v=qgG5Jhi_Els">https://www.youtube.com/watch?v=qgG5Jhi_Els</a>
</li>

<li>FZF Vim integration<br />
<a href="https://github.com/junegunn/fzf/blob/master/README-VIM.md">https://github.com/junegunn/fzf/blob/master/README-VIM.md</a>
</li>

<li>fzf: Terminal Fuzzy Finder for Linux (video)<br />
<a href="https://www.youtube.com/watch?v=vt33Hp-4RXg">https://www.youtube.com/watch?v=vt33Hp-4RXg</a>
</li>

<li>Fzf Installation and Usage<br />
<a href="https://jdhao.github.io/2018/11/05/fzf_install_use/">https://jdhao.github.io/2018/11/05/fzf_install_use/</a>
</li>

<li>Integrated Usage of VIM and Fuzzy Search Artifact FZF – From Simple to Advanced<br />
<a href="https://developpaper.com/integrated-usage-of-vim-and-fuzzy-search-artifact-fzf-from-simple-to-advanced/">https://developpaper.com/integrated-usage-of-vim-and-fuzzy-search-artifact-fzf-from-simple-to-advanced/</a>
</li>

<li>Navigating a filesystem quickly with fzf and fd<br />
<a href="https://mike.place/2017/fzf-fd/">https://mike.place/2017/fzf-fd/</a>
</li>

<li>Nástroj fd<br />
<a href="https://github.com/sharkdp/fd">https://github.com/sharkdp/fd</a>
</li>

<li>Alternativy k&nbsp;batu<br />
<a href="https://github.com/sharkdp/bat/blob/master/doc/alternatives.md">https://github.com/sharkdp/bat/blob/master/doc/alternatives.md</a>
</li>

<li>Ccat<br />
<a href="https://github.com/jingweno/ccat">https://github.com/jingweno/ccat</a>
</li>

<li>How to colorizing cat command output or files using ccat app on Linux or Unix system<br />
<a href="https://www.cyberciti.biz/howto/linux-unix-cat-command-with-colours/">https://www.cyberciti.biz/howto/linux-unix-cat-command-with-colours/</a>
</li>

<li>Go Bullet Train (GBT)<br />
<a href="https://github.com/tisnik/gbt">https://github.com/tisnik/gbt</a>
</li>

<li>bullettrain-sh<br />
<a href="https://github.com/caiogondim/bullet-train.zsh">https://github.com/caiogondim/bullet-train.zsh</a>
</li>

<li>An oh-my-zsh shell theme based on the Powerline Vim plugin<br />
<a href="https://github.com/caiogondim/bullet-train.zsh">https://github.com/caiogondim/bullet-train.zsh</a>
</li>

<li>Nerd fonts<br />
<a href="https://www.nerdfonts.com/">https://www.nerdfonts.com/</a>
</li>

<li>nerd-fonts (repositář)<br />
<a href="https://github.com/ryanoasis/nerd-fonts">https://github.com/ryanoasis/nerd-fonts</a>
</li>

<li>Repositář projektu bat<br />
<a href="https://github.com/sharkdp/bat">https://github.com/sharkdp/bat</a>
</li>

<li>bat releases<br />
<a href="https://github.com/sharkdp/bat/releases">https://github.com/sharkdp/bat/releases</a>
</li>

<li>Shell<br />
<a href="https://en.wikipedia.org/wiki/Shell_(computing)">https://en.wikipedia.org/wiki/Shell_(computing)</a>
</li>

<li>Minimalistická a rychlá příkazová řádka pro libovolný shell Starship<br />
<a href="https://www.root.cz/zpravicky/minimalisticka-a-rychla-prikazova-radka-pro-libovolny-shell-starship/">https://www.root.cz/zpravicky/minimalisticka-a-rychla-prikazova-radka-pro-libovolny-shell-starship/</a>
</li>

<li>Finally, a command line shell for the 90s<br />
<a href="http://fishshell.com/">http://fishshell.com/</a>
</li>

<li>Bourne shell<br />
<a href="https://en.wikipedia.org/wiki/Bourne_shell">https://en.wikipedia.org/wiki/Bourne_shell</a>
</li>

<li>Korn shell<br />
<a href="http://www.kornshell.org/">http://www.kornshell.org/</a>
</li>

<li>Prompt Expansion<br />
<a href="http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Prompt-Expansion">http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Prompt-Expansion</a>
</li>

<li>PS1 prompt explained for Linux/Unix<br />
<a href="https://www.linuxnix.com/linuxunix-shell-ps1-prompt-explained-in-detail/">https://www.linuxnix.com/linuxunix-shell-ps1-prompt-explained-in-detail/</a>
</li>

<li>Bash $PS1 Generator<u>2.0</u><br />
<a href="https://www.kirsle.net/wizards/ps1.html">https://www.kirsle.net/wizards/ps1.html</a>
</li>

<li>BASH Git Prompt<br />
<a href="https://github.com/magicmonty/bash-git-prompt">https://github.com/magicmonty/bash-git-prompt</a>
</li>

<li>Seznam vybraných Unicode fontů<br />
<a href="https://en.wikipedia.org/wiki/Unicode_font#List_of_Unicode_fonts">https://en.wikipedia.org/wiki/Unicode_font#List_of_Unicode_fonts</a>
</li>

<li>Unix History<br />
<a href="https://www.levenez.com/unix/">https://www.levenez.com/unix/</a>
</li>

<li>C shell<br />
<a href="https://en.wikipedia.org/wiki/C_shell">https://en.wikipedia.org/wiki/C_shell</a>
</li>

<li>tput(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/tput">https://linux.die.net/man/1/tput</a>
</li>

<li>fc-list(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/fc-list">https://linux.die.net/man/1/fc-list</a>
</li>

<li>fc-cache(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/fc-cache">https://linux.die.net/man/1/fc-cache</a>
</li>

<li>fc-query(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/fc-query">https://linux.die.net/man/1/fc-query</a>
</li>

<li>Unicode character recognition<br />
<a href="http://shapecatcher.com/">http://shapecatcher.com/</a>
</li>

<li>Pygments<br />
<a href="https://pygments.org/">https://pygments.org/</a>
</li>

<li>GNU Source-highlight 3.1.8<br />
<a href="https://www.gnu.org/software/src-highlite/">https://www.gnu.org/software/src-highlite/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

