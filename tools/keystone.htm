<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. Instalace rozhraní mezi Pythonem a frameworky Capstone a Keystone</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace rozhraní mezi Pythonem a frameworky Capstone a Keystone</h2>

<pre>
$ <strong>pip3 install --user capstone</strong>
&nbsp;
Collecting capstone
  Downloading capstone-4.0.2-py2.py3-none-manylinux1_x86_64.whl (2.1 MB)
     |████████████████████████████████| 2.1 MB 1.4 MB/s
Installing collected packages: capstone
Successfully installed capstone-4.0.2
</pre>

<pre>
$ <strong>pip3 install --user keystone-engine</strong>
&nbsp;
Collecting keystone-engine
  Downloading keystone_engine-0.9.2-py2.py3-none-manylinux1_x86_64.whl (1.8 MB)
     |████████████████████████████████| 1.8 MB 1.6 MB/s
Installing collected packages: keystone-engine
Successfully installed keystone-engine-0.9.2
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Ruční překlad knihovny Capstone</h2>

<pre>
$ <strong>git clone git@github.com:capstone-engine/capstone.git</strong>
&nbsp;
Cloning into 'capstone'...
remote: Enumerating objects: 30861, done.
remote: Counting objects: 100% (1604/1604), done.
remote: Compressing objects: 100% (1045/1045), done.
remote: Total 30861 (delta 631), reused 1367 (delta 535), pack-reused 29257
Receiving objects: 100% (30861/30861), 48.27 MiB | 2.03 MiB/s, done.
Resolving deltas: 100% (21692/21692), done.
</pre>

<pre>
$ <strong>cd capstone/</strong>
&nbsp;
✔ /tmp/ramdisk/capstone [master|✔]
&nbsp;
$ <strong>git checkout next</strong>
&nbsp;
Branch 'next' set up to track remote branch 'next' from 'origin'.
Switched to a new branch 'next'
</pre>

<pre>
$ <strong>make</strong>
&nbsp;
  CC      cs.o
  CC      utils.o
  CC      SStream.o
  CC      MCInstrDesc.o
  CC      MCRegisterInfo.o
  CC      arch/ARM/ARMModule.o
  CC      arch/ARM/ARMMapping.o
  CC      arch/ARM/ARMInstPrinter.o
  CC      arch/ARM/ARMDisassembler.o
  CC      arch/AArch64/AArch64Disassembler.o
  CC      arch/AArch64/AArch64Module.o
  CC      arch/AArch64/AArch64Mapping.o
  CC      arch/AArch64/AArch64InstPrinter.o
  CC      arch/AArch64/AArch64BaseInfo.o
  CC      arch/M68K/M68KInstPrinter.o
  ...
  ...
  ...
  LINK    test_m680x.static
  LINK    test_evm
  LINK    test_evm.static
  LINK    test_riscv
  LINK    test_riscv.static
  LINK    test_wasm
  LINK    test_wasm.static
  LINK    test_mos65xx
  LINK    test_mos65xx.static
  LINK    test_bpf
  LINK    test_bpf.static
make[1]: Leaving directory '/tmp/ramdisk/capstone/tests'
install -m0755 ./libcapstone.so.5 ./tests/
cd ./tests/ &amp;&amp; rm -f libcapstone.so &amp;&amp; ln -s libcapstone.so.5 libcapstone.so
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
from keystone import *

CODE = b"MOV AX, 100; INC AX; MOV BX, AX"
 
try:
    ks = Ks(KS_ARCH_X86, KS_MODE_16)
    encoding, count = ks.asm(CODE)
    print("%s = %s (number of statements: %u)" %(CODE, encoding, count))
except KsError as e:
    print("ERROR: %s" %e)
</pre>

<pre>
</pre>

<pre>
from keystone import *

CODE = """
    MOV AX, 100
    INC AX
    MOV BX, AX
"""
 
try:
    ks = Ks(KS_ARCH_X86, KS_MODE_16)
    encoding, count = ks.asm(CODE)
    print("%s = %s (number of statements: %u)" %(CODE, encoding, count))
except KsError as e:
    print("ERROR: %s" %e)
</pre>

<pre>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
from keystone import *

CODE = """
    MOV AX, 100
    INC AX
    MOV BX, AX
"""
 
try:
    ks = Ks(KS_ARCH_X86, KS_MODE_32)
    encoding, count = ks.asm(CODE)
    print("%s = %s (number of statements: %u)" %(CODE, encoding, count))
except KsError as e:
    print("ERROR: %s" %e)
</pre>

<pre>
from keystone import *

CODE = """
    MOV AX, 100
    INC AX
    MOV BX, AX
"""
 
try:
    ks = Ks(KS_ARCH_X86, KS_MODE_64)
    encoding, count = ks.asm(CODE)
    print("%s = %s (number of statements: %u)" %(CODE, encoding, count))
except KsError as e:
    print("ERROR: %s" %e)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
from keystone import *

CODE = """
    MOV %AX, 100
    INC %AX
    MOV %BX, %AX
"""
 
try:
    ks = Ks(KS_ARCH_X86, KS_MODE_16)
    ks.syntax = KS_OPT_SYNTAX_ATT
    encoding, count = ks.asm(CODE)
    print("%s = %s (number of statements: %u)" %(CODE, encoding, count))
except KsError as e:
    print("ERROR: %s" %e)
</pre>

<pre>
from keystone import *

CODE = """
    MOV $64, %AX
    INC %AX
    MOV %AX, %BX
"""
 
try:
    ks = Ks(KS_ARCH_X86, KS_MODE_16)
    ks.syntax = KS_OPT_SYNTAX_ATT
    encoding, count = ks.asm(CODE)
    print("%s = %s (number of statements: %u)" %(CODE, encoding, count))
except KsError as e:
    print("ERROR: %s" %e)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
from keystone import *

CODE = """
LOOP:
    MOV EAX, 100
    DEC EAX
    JNZ LOOP
"""
 
try:
    ks = Ks(KS_ARCH_X86, KS_MODE_64)
    encoding, count = ks.asm(CODE)
    print("%s = %s (number of statements: %u)" %(CODE, encoding, count))
except KsError as e:
    print("ERROR: %s" %e)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
from keystone import *

CODE = """
OUTER_LOOP:
    MOV EBX, 10
INNER_LOOP:
    MOV EAX, 100
    DEC EAX
    JNZ INNER_LOOP
    DEC EBX
    JNZ OUTER_LOOP
"""
 
try:
    ks = Ks(KS_ARCH_X86, KS_MODE_64)
    encoding, count = ks.asm(CODE)
    print("%s = %s (number of statements: %u)" %(CODE, encoding, count))
except KsError as e:
    print("ERROR: %s" %e)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
from keystone import *

CODE = """
OUTER_LOOP:
    MOV EBX, 10
INNER_LOOP:
    MOV EAX, 100
    DEC EAX
    JNZ INNER_LOOP
    DEC EBX
    JNZ OUTER_LOOP
"""
 
try:
    ks = Ks(KS_ARCH_X86, KS_MODE_64)
    encoding, count = ks.asm(CODE)
    with open("loops.bin", "wb") as fout:
        fout.write(bytes(encoding))
except KsError as e:
    print("ERROR: %s" %e)
</pre>

<pre>
$ <strong>od -tx1 loops.bin </strong>
&nbsp;
0000000 bb 0a 00 00 00 b8 64 00 00 00 ff c8 75 f7 ff cb
0000020 75 ee
0000022
</pre>

<pre>
loops.bin:     file format binary


Disassembly of section .data:

0000000000000000 &lt;.data&gt;:
   0:   bb 0a 00 00 00          mov    ebx,0xa
   5:   b8 64 00 00 00          mov    eax,0x64
   a:   ff c8                   dec    eax
   c:   75 f7                   jne    0x5
   e:   ff cb                   dec    ebx
  10:   75 ee                   jne    0x0
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
# asmsyntax=as

# Jednoducha aplikace typu "Hello world!" naprogramovana
# v assembleru GNU as - pouzita je "Intel" syntaxe.
#
# Autor: Pavel Tisnovsky

.intel_syntax noprefix


# Linux kernel system call table
sys_exit=1
sys_write=4



_start:
        mov   eax, sys_write         # cislo syscallu pro funkci "write"
        mov   ebx, 1                 # standardni vystup
        mov   ecx, hello_lbl         # adresa retezce, ktery se ma vytisknout
        mov   edx, 13                # pocet znaku, ktere se maji vytisknout
        int   0x80                   # volani Linuxoveho kernelu

        mov   eax, sys_exit          # cislo sycallu pro funkci "exit"
        mov   ebx, 0                 # exit code = 0
        int   0x80                   # volani Linuxoveho kernelu


hello_lbl:
        .string "Hello World!\n"     # string, ktery JE ukoncen nulou
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
from keystone import *
&nbsp;
try:
    with open("hello_world.asm", "r") as fin:
        code = fin.read()
&nbsp;
    print(code)
&nbsp;
    ks = Ks(KS_ARCH_X86, KS_MODE_64)
    encoding, count = ks.asm(code)
    with open("hello.bin", "wb") as fout:
        fout.write(bytes(encoding))
except KsError as e:
    print("ERROR: %s" %e)
</pre>

<pre>
$ <strong>od -tx1 hello.bin </strong>
&nbsp;
0000000 b8 04 00 00 00 bb 01 00 00 00 b9 22 00 00 00 ba
0000020 0d 00 00 00 cd 80 b8 01 00 00 00 bb 00 00 00 00
0000040 cd 80 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 0a 00
0000060
</pre>

<pre>
hello.bin:     file format binary
&nbsp;
&nbsp;
Disassembly of section .data:
&nbsp;
0000000000000000 &lt;.data&gt;:
   0:   b8 04 00 00 00          mov    eax,0x4
   5:   bb 01 00 00 00          mov    ebx,0x1
   a:   b9 22 00 00 00          mov    ecx,0x22
   f:   ba 0d 00 00 00          mov    edx,0xd
  14:   cd 80                   int    0x80
  16:   b8 01 00 00 00          mov    eax,0x1
  1b:   bb 00 00 00 00          mov    ebx,0x0
  20:   cd 80                   int    0x80
  22:   48                      rex.W
  23:   65 6c                   gs ins BYTE PTR es:[rdi],dx
  25:   6c                      ins    BYTE PTR es:[rdi],dx
  26:   6f                      outs   dx,DWORD PTR ds:[rsi]
  27:   20 57 6f                and    BYTE PTR [rdi+0x6f],dl
  2a:   72 6c                   jb     0x98
  2c:   64 21 0a                and    DWORD PTR fs:[rdx],ecx
        ...
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
<i># asmsyntax=as</i>
&nbsp;
<i># Jednoducha aplikace typu "Hello world!" naprogramovana</i>
<i># v assembleru GNU as - pouzita je "Intel" syntaxe.</i>
<i>#</i>
<i># Autor: Pavel Tisnovsky</i>
&nbsp;
.intel_syntax noprefix
&nbsp;
&nbsp;
<i># Linux kernel system call table</i>
sys_exit=1
sys_write=4
&nbsp;
&nbsp;
hello_lbl:
        .string "Hello World!\n"     <i># string, ktery JE ukoncen nulou</i>
&nbsp;
&nbsp;
_start:
        mov   eax, sys_write         <i># cislo syscallu pro funkci "write"</i>
        mov   ebx, 1                 <i># standardni vystup</i>
        mov   ecx, hello_lbl         <i># adresa retezce, ktery se ma vytisknout</i>
        mov   edx, 13                <i># pocet znaku, ktere se maji vytisknout</i>
        int   0x80                   <i># volani Linuxoveho kernelu</i>
&nbsp;
        mov   eax, sys_exit          <i># cislo sycallu pro funkci "exit"</i>
        mov   ebx, 0                 <i># exit code = 0</i>
        int   0x80                   <i># volani Linuxoveho kernelu</i>
</pre>

<pre>
$ <strong>od -tx1 hello_2.bin </strong>
&nbsp;
0000000 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 0a 00 b8 04
0000020 00 00 00 bb 01 00 00 00 b9 00 00 00 00 ba 0d 00
0000040 00 00 cd 80 b8 01 00 00 00 bb 00 00 00 00 cd 80
0000060
</pre>

<pre>
hello_2.bin:     file format binary
&nbsp;
&nbsp;
Disassembly of section .data:
&nbsp;
0000000000000000 &lt;.data&gt;:
   0:   48                      rex.W
   1:   65 6c                   gs ins BYTE PTR es:[rdi],dx
   3:   6c                      ins    BYTE PTR es:[rdi],dx
   4:   6f                      outs   dx,DWORD PTR ds:[rsi]
   5:   20 57 6f                and    BYTE PTR [rdi+0x6f],dl
   8:   72 6c                   jb     0x76
   a:   64 21 0a                and    DWORD PTR fs:[rdx],ecx
   d:   00 b8 04 00 00 00       add    BYTE PTR [rax+0x4],bh
  13:   bb 01 00 00 00          mov    ebx,0x1
  18:   b9 00 00 00 00          mov    ecx,0x0
  1d:   ba 0d 00 00 00          mov    edx,0xd
  22:   cd 80                   int    0x80
  24:   b8 01 00 00 00          mov    eax,0x1
  29:   bb 00 00 00 00          mov    ebx,0x0
  2e:   cd 80                   int    0x80
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
# asmsyntax=as

# Program pro otestovani chovani instrukci CALL a RET
# - pouzita je "Intel" syntaxe.
#
# Autor: Pavel Tisnovsky

.intel_syntax noprefix


# Linux kernel system call table
sys_exit   = 1
sys_write  = 4

# Dalsi konstanty pouzite v programu - standardni streamy
std_input  = 0
std_output = 1



message1:                            # adresa prvni zpravy
        .string "Hello World\n"
message1len = 13                     # delka prvni zpravy

message2:                            # adresa druhe zpravy
        .string "Assembler je fajn\n"
message2len = 18                     # delka druhe zpravy


_start:
        call  writeFirstMessage      # zavolani podprogramu pro vytisteni prvni zpravy
        call  writeSecondMessage     # zavolani podprogramu pro vytisteni druhe zpravy
        call  exit                   # zavolani podprogramu pro ukonceni procesu



# Podprogram pro vytisteni prvni zpravy
writeFirstMessage:
        mov   ecx, message1          # adresa retezce, ktery se ma vytisknout
        mov   edx, message1len       # pocet znaku, ktere se maji vytisknout
        call  writeMessage           # zavolani podprogramu pro vytisteni zpravy
        ret                          # navrat z podprogramu



# Podprogram pro vytisteni druhe zpravy
writeSecondMessage:
        mov   ecx, message2          # adresa retezce, ktery se ma vytisknout
        mov   edx, message2len       # pocet znaku, ktere se maji vytisknout
        call  writeMessage           # zavolani podprogramu pro vytisteni zpravy
        ret                          # navrat z podprogramu



# Podprogram pro vytisteni zpravy na standardni vystup
# Ocekava se, ze v ecx bude adresa zpravy a v edx jeji delka
writeMessage:
        mov   eax, sys_write         # cislo syscallu pro funkci "write"
        mov   ebx, std_output        # standardni vystup
        int   0x80                   # volani Linuxoveho kernelu
        ret                          # navrat z podprogramu



# Podprogram pro ukonceni procesu zavolanim syscallu
exit:
        mov   eax, sys_exit          # cislo sycallu pro funkci "exit"
        mov   ebx, 0                 # exit code = 0
        int   0x80                   # volani Linuxoveho kernelu

# finito
</pre>

<pre>
from keystone import *

try:
    with open("subroutines.asm", "r") as fin:
        code = fin.read()

    print(code)

    ks = Ks(KS_ARCH_X86, KS_MODE_32)
    encoding, count = ks.asm(code)
    with open("subroutines.bin", "wb") as fout:
        fout.write(bytes(encoding))
except KsError as e:
    print("ERROR: %s" %e)
</pre>

<pre>
subroutines.bin:     file format binary


Disassembly of section .data:

0000000000000000 <.data>:
   0:   48                      rex.W
   1:   65 6c                   gs ins BYTE PTR es:[rdi],dx
   3:   6c                      ins    BYTE PTR es:[rdi],dx
   4:   6f                      outs   dx,DWORD PTR ds:[rsi]
   5:   20 57 6f                and    BYTE PTR [rdi+0x6f],dl
   8:   72 6c                   jb     0x76
   a:   64 0a 00                or     al,BYTE PTR fs:[rax]
   d:   41 73 73                rex.B jae 0x83
  10:   65 6d                   gs ins DWORD PTR es:[rdi],dx
  12:   62                      (bad)  
  13:   6c                      ins    BYTE PTR es:[rdi],dx
  14:   65 72 20                gs jb  0x37
  17:   6a 65                   push   0x65
  19:   20 66 61                and    BYTE PTR [rsi+0x61],ah
  1c:   6a 6e                   push   0x6e
  1e:   0a 00                   or     al,BYTE PTR [rax]
  20:   e8 0a 00 00 00          call   0x2f
  25:   e8 15 00 00 00          call   0x3f
  2a:   e8 2d 00 00 00          call   0x5c
  2f:   b9 00 00 00 00          mov    ecx,0x0
  34:   ba 0d 00 00 00          mov    edx,0xd
  39:   e8 11 00 00 00          call   0x4f
  3e:   c3                      ret    
  3f:   b9 0d 00 00 00          mov    ecx,0xd
  44:   ba 12 00 00 00          mov    edx,0x12
  49:   e8 01 00 00 00          call   0x4f
  4e:   c3                      ret    
  4f:   b8 04 00 00 00          mov    eax,0x4
  54:   bb 01 00 00 00          mov    ebx,0x1
  59:   cd 80                   int    0x80
  5b:   c3                      ret    
  5c:   b8 01 00 00 00          mov    eax,0x1
  61:   bb 00 00 00 00          mov    ebx,0x0
  66:   cd 80                   int    0x80
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
from capstone import *


with open("loops.bin", "rb") as fin:
    code = fin.read()

md = Cs(CS_ARCH_X86, CS_MODE_64)
for i in md.disasm(code, 0x0000):
    print("0x%x:\t%s\t%s" %(i.address, i.mnemonic, i.op_str))
</pre>

<pre>
0x0:    mov     ebx, 0xa
0x5:    mov     eax, 0x64
0xa:    dec     eax
0xc:    jne     5
0xe:    dec     ebx
0x10:   jne     0
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 (nikoli ovšem pro starší verze Pythonu 2!) byly
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>first_steps_16bit_A.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/first_steps_16bit_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/first_steps_16bit_A.py</a></td></tr>
<tr><td> 2</td><td>first_steps_16bit_B.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/first_steps_16bit_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/first_steps_16bit_B.py</a></td></tr>
<tr><td> 3</td><td>first_steps_32bit.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/first_steps_32bit.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/first_steps_32bit.py</a></td></tr>
<tr><td> 4</td><td>first_steps_64bit.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/first_steps_64bit.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/first_steps_64bit.py</a></td></tr>
<tr><td> 5</td><td>att_syntax_A.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/att_syntax_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/att_syntax_A.py</a></td></tr>
<tr><td> 6</td><td>att_syntax_B.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/att_syntax_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/att_syntax_B.py</a></td></tr>
<tr><td> 7</td><td>loop_A.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/loop_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/loop_A.py</a></td></tr>
<tr><td> 8</td><td>loop_B.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/loop_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/loop_B.py</a></td></tr>
<tr><td> 9</td><td>loops_dump.asm</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/loops_dump.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/loops_dump.asm</a></td></tr>
<tr><td>10</td><td>into_binary_A.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/into_binary_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/into_binary_A.py</a></td></tr>
<tr><td>11</td><td>into_binary_B.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/into_binary_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/into_binary_B.py</a></td></tr>
<tr><td>12</td><td>into_binary_C.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/into_binary_C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/into_binary_C.py</a></td></tr>
<tr><td>13</td><td>hello_world.asm</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/hello_world.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/hello_world.asm</a></td></tr>
<tr><td>14</td><td>hello_world_2.asm</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/hello_world_2.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/hello_world_2.asm</a></td></tr>
<tr><td>15</td><td>hello_dump.asm</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/hello_dump.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/hello_dump.asm</a></td></tr>
<tr><td>16</td><td>hello_2_dump.asm</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/hello_2_dump.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/hello_2_dump.asm</a></td></tr>
<tr><td>17</td><td>subroutines.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/subroutines.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/subroutines.py</a></td></tr>
<tr><td>18</td><td>subroutines.asm</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/subroutines.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/subroutines.asm</a></td></tr>
<tr><td>19</td><td>subroutines_dump.asm</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/subroutines_dump.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/subroutines_dump.asm</a></td></tr>
<tr><td>20</td><td>disasm.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/disasm.py">https://github.com/tisnik/most-popular-python-libs/blob/master/keystone/disasm.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Keystone Engine na GitHubu<br />
<a href="https://github.com/keystone-engine/keystone">https://github.com/keystone-engine/keystone</a>
</li>

<li>Keystone: The Ultimate Assembler<br />
<a href="https://www.keystone-engine.org/">https://www.keystone-engine.org/</a>
</li>

<li>Tutorial for Keystone<br />
<a href="https://www.keystone-engine.org/docs/tutorial.html">https://www.keystone-engine.org/docs/tutorial.html</a>
</li>

<li>KEYSTONE: Next Generation Assembler Framework<br />
<a href="https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf">https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html">http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html</a>
</li>

<li>AT&amp;T assembly syntax and IA-32 instructions<br />
<a href="https://gist.github.com/mishurov/6bcf04df329973c15044">https://gist.github.com/mishurov/6bcf04df329973c15044</a>
</li>

<li>ARM GCC Inline Assembler Cookbook<br />
<a href="http://www.ethernut.de/en/documents/arm-inline-asm.html">http://www.ethernut.de/en/documents/arm-inline-asm.html</a>
</li>

<li>Extended Asm - Assembler Instructions with C Expression Operands<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a>
</li>

<li>ARM inline asm secrets<br />
<a href="http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/">http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/</a>
</li>

<li>How to Use Inline Assembly Language in C Code<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C">https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C</a>
</li>

<li>GCC-Inline-Assembly-HOWTO<br />
<a href="http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html</a>
</li>

<li>A Brief Tutorial on GCC inline asm (x86 biased)<br />
<a href="http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm">http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm</a>
</li>

<li>GCC Inline ASM<br />
<a href="http://locklessinc.com/articles/gcc_asm/">http://locklessinc.com/articles/gcc_asm/</a>
</li>

<li>GNU Assembler Examples<br />
<a href="http://cs.lmu.edu/~ray/notes/gasexamples/">http://cs.lmu.edu/~ray/notes/gasexamples/</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>The GNU Assembler Tutorial<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html">http://tigcc.ticalc.org/doc/gnuasm.html</a>
</li>

<li>The GNU Assembler - macros<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html#SEC109">http://tigcc.ticalc.org/doc/gnuasm.html#SEC109</a>
</li>

<li>ARM subroutines &amp; program stack<br />
<a href="http://www.toves.org/books/armsub/">http://www.toves.org/books/armsub/</a>
</li>

<li>Generating Mixed Source and Assembly List using GCC<br />
<a href="http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/">http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/</a>
</li>

<li>Calling subroutines<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

