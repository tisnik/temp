<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Literate programming</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Literate programming</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku si ve stručnosti představíme některé novější nástroje podporující paradigma známé pod jménem literate programming. Jedná se o způsob kombinace slovního popisu algoritmu či celého vyvíjeného systému společně s vlastním zdrojovým kódem.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Literate programming</a></p>
<p><a href="#k02">2. Systém Web</a></p>
<p><a href="#k03">3. Inspirace Algolem 60?</a></p>
<p><a href="#k04">4. Nástroj <i>noweb</i></a></p>
<p><a href="#k05">5. Ukázky vstupního textu pro nástroj <i>noweb</i></a></p>
<p><a href="#k06">6. Moderní přístupy k&nbsp;literate programmingu</a></p>
<p><a href="#k07">7. Literate programming v&nbsp;podání Jupyter Notebooku</a></p>
<p><a href="#k08">8. Ukázka diáře s&nbsp;popisem všech kroků</a></p>
<p><a href="#k09">9. Nástroje typu <i>Docco</i></a></p>
<p><a href="#k10">10. Nástroje odvozené od utility <i>Docco</i></a></p>
<p><a href="#k11">11. Nástroj <i>Docgo</i></a></p>
<p><a href="#k12">12. Příklad použití nástroje <i>Docgo</i></a></p>
<p><a href="#k13">13. Změna šířky sloupců</a></p>
<p><a href="#k14">14. Kde zobrazit výstup programu?</a></p>
<p><a href="#k15">15. Nástroj <i>Pycco</i></a></p>
<p><a href="#k16">16. Příklad použití nástroje <i>Pycco</i></a></p>
<p><a href="#k17">17. Možnosti dalšího vývoje</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Vygenerované soubory s&nbsp;vysvětlením zdrojového kódu i vlastním kódem</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Literate programming</h2>

<p><i>&bdquo;"Změňme náš tradiční pohled na tvorbu programů. Místo toho abychom
předepsali počítači co má dělat, zkusme vysvětlovat lidským bytostem co chceme,
aby počítač dělal. 'Literární' programátor může být srovnáván s esejistou,
jehož hlavním cílem je srozumitelné vysvětlení a vybroušený styl. Takový autor
vybírá s tezaurem v ruce názvy proměnných a vysvětluje účel každé z nich. Snaží
se napsat program, který je srozumitelný, protože jeho principy jsou popsány
způsobem, který odpovídá lidskému myšlení a používá k tomu formální i
neformální prostředky, které se navzájem doplňují."&ldquo;<br />
Donald Knuth</i></p>

<p>V&nbsp;dnešním článku si alespoň ve stručnosti přiblížíme programovací
paradigma, pro které slavný Donald E. Knuth vymyslel název &bdquo;<a
href="https://texfaq.org/FAQ-lit">literate programming</a>&ldquo; a které
použil například při vývoji TeXu. Jedná se o takový styl, ve kterém je průběžně
v&nbsp;běžném (lidském) jazyce vysvětlováno, co se má provést a jaký je
očekáván výsledek. Mezi tímto slovním popisem se pak nachází jednotlivé kroky
programu. Ovšem pozor &ndash; nejedná se zde o běžné dokumentační řetězce,
v&nbsp;nichž se typicky popisuje, k&nbsp;čemu je určen daný blok programu
(typicky třída, metoda či funkce), ale mnohdy spíše o volněji pojatý styl psaní
(což částečně uvidíme na příkladech).</p>

<p><div class="rs-tip-major">Poznámka: původní Knuthův název &bdquo;literate
programming&ldquo; se někdy překládá jako &bdquo;literální programování&ldquo;,
&bdquo;kultivované programování&ldquo; nebo dokonce &bdquo;dobře dokumentované
programy&ldquo;. Podle mého skromného názoru se nejedná o dobré a přesné
překlady, už jen z&nbsp;toho důvodu, že slovo <i>literate</i> by se mělo raději
překládat z&nbsp;latiny a ne z&nbsp;angličtiny, kde došlo k&nbsp;posunu jeho
významu. Proto se v&nbsp;dnešním článku budu držet původního termínu (což je
ostatně v&nbsp;oblasti IT stále více využívaný přístup). Možná by bylo lepší
použít termín &bdquo;literální styl&ldquo;, ovšem ten není ustálený.</div></p>

<p>Poměrně dobrým příkladem použití tohoto paradigma jsou texty, v&nbsp;nichž
se nějaký algoritmus vysvětluje způsobem &bdquo;shora dolů&ldquo; nebo naopak
&bdquo;zdola nahoru&ldquo;. Oba dva přístupy mají své přednosti a pochopitelně
i omezení. Způsob &bdquo;shora dolů&ldquo; se nejdříve zaměřuje na celý řešený
problém na nejvyšší (rozumné) úrovni abstrakce, takže může dát čtenáři dobrý
vhled do toho, jaký problém se řeší a jakým způsobem. Detaily jsou vysvětleny
(a současně i implementovány!) později. Naproti tomu způsob vysvětlování a
programování označovaný termínem &bdquo;zdola nahoru&ldquo; je typický při
použití jazyků typu <a
href="https://www.root.cz/serialy/programovaci-jazyk-forth/">Forth</a>,
v&nbsp;nichž se nejdříve skládají jednotlivé základní (a značně primitivní)
bloky do bloků větších, které provádí činnost na poněkud vyšší úrovni
abstrakce. A z&nbsp;těchto bloků se opět skládají další větší celky až
k&nbsp;celkové aplikaci. Pochopitelně je možné &ndash; a často se to děje
&ndash; oba styly kombinovat.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Systém Web</h2>

<p><i>&bdquo;Literate programming is not a documentation system per ce, it's a
programming paradigm.&ldquo;</i></p>

<p>V&nbsp;článku o literate programmingu je prakticky nemožné se nezmínit o
systému nazvaném <i>Web</i> (který ovšem nemá nic společného s&nbsp;WWW). Tento
systém, který byl vyvinut právě Donaldem Knuthem, byl naprogramován
v&nbsp;Pascalu. Samotný Web je z&nbsp;hlediska uživatele složen ze dvou
programů &ndash; filtrů. První filtr se jmenuje <strong>TANGLE</strong>
(původně skutečně psáno velkými písmeny) a slouží pro vygenerování zdrojového
kódu v&nbsp;Pascalu ze vstupního dokumentu. Druhý filtr se jmenuje
<strong>WEAVE</strong> a jeho účelem je vygenerování dokumentace ve formátu
připraveném pro tisk (&bdquo;camera ready&ldquo;); pro vlastní sazbu se přitom
používá systém TeX.</p>

<p><div class="rs-tip-major">Poznámka: názvy obou filtrů se používají i
v&nbsp;obecnějším smyslu &ndash; &bdquo;weaving&ldquo; znamená vygenerování
dokumentu pro tisk a &bdquo;tangling&ldquo; vygenerování výsledného
spustitelného kódu (typicky přes překladač a linker).</div></p>

<img src="https://i.iinfo.cz/images/111/literate-1.png" class="image-409266" alt="&#160;" width="489" height="305" />
<p><i>Obrázek 1: Nástroje TANGLE a WEAVE (zdroj: přímo Knuthův dokument o
literate programmingu).</i></p>

<p>Původní systém <i>Web</i> byl následně přepsán do podoby nástroje
<i>CWEB</i>, jenž je použitelný pro použití paradigmatu literate programming
v&nbsp;programovacím jazyku C, C++ a částečně i Javy. Tento nástroj se skládá
z&nbsp;filtrů <strong>CTANGLE</strong> a <strong>CWEAVE</strong>. Příklad
výstupu je k&nbsp;dispozici na adrese <a
href="https://tex.loria.fr/litte/wc.pdf">https://tex.loria.fr/litte/wc.pdf</a>.</p>

<img src="https://i.iinfo.cz/images/111/literate-2.png" class="image-409267" alt="&#160;" width="460" height="464" />
<p><i>Obrázek 2: Příklad výstupu generovaného nástrojem Web.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Inspirace Algolem 60?</h2>

<p>Některé vlastnosti, které nalezneme v&nbsp;oblasti literate programmingu,
jsou s&nbsp;velkou pravděpodobností inspirovány Algolem, přesněji řečeno
Algolem 60. ALGOL je totiž poněkud zvláštní a mnohdy i matoucí tím, že jeho
syntax existuje ve třech rozdílných variantách, které se nazývají <i>reference
syntax</i>, <i>publication syntax</i> a <i>implementation syntax</i>.
Referenční syntax je použita především v&nbsp;oficiálním &bdquo;Reportu&ldquo;
(de facto standardy), publikační syntax je použita v&nbsp;článcích, při ukázce
algoritmů na tabuli (slajdech) atd. A implementační syntax se liší podle
použitého počítače a jeho schopností (znaková sada atd.). Kvůli této trojí
syntaxi se zápis algoritmů v&nbsp;článcích a knihách mnohdy dosti podstatným
způsobem odlišuje od zápisu pro konkrétní počítač. Navíc to umožňuje měnit
(v&nbsp;článcích i konkrétní implementaci) klíčová slova a nahrazovat je za
národní varianty, používat desetinnou čárku namísto desetinné tečky atd.</p>

<p><div class="rs-tip-major">Poznámka: mimochodem, systém <i>Web</i> byl
upraven pro potřeby Algolu 68 (neúspěšná větev tohoto jazyka) a jmenoval se
<i>Web 68</i>. Původní stránky o tomto systému již neexistují, ovšem lze použít
<a
href="https://web.archive.org/web/20130120154432/http://www.poenikatu.co.uk/html/Web68man.html">Wayback
Machine</a>. Tento systém je zajímavý použitím jazyka HTML pro dokumentační
část a také tím, že je zapotřebí ve zdrojovém kódu zdvojovat znaky @ (jedná se
asi o jediný systém, který vyžaduje tak velké zásahy do zdrojových
kódů).</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nástroj <i>noweb</i></h2>

<p><i>&bdquo;The practitioner of literate programming can be regarded as an
essayist, whose main concern is with exposition and excellence of
style.&ldquo;<br />
Donald Knuth</i></p>

<p>Jedním z&nbsp;(relativně) novějších nástrojů inspirovaných původním
<i>webem</i> je nástroj nazvaný <i>noweb</i>. Tento nástroj je navržen takovým
způsobem, aby byl nezávislý na použitém jazyku &ndash; a to jak na
programovacím jazyku (C, Python, Perl atd.), tak i do jisté míry na jazyku
použitém pro vygenerování dokumentace. <i>Noweb</i> totiž podporuje výstup do
formátů TeXu, LaTeXu, HTML a troffu. Ovšem právě kvůli tomu, že je tento
nástroj do značné míry nezávislý na použitém programovacím jazyku, není jeho
praktické použití příliš uživatelsky přívětivé (už jen z&nbsp;toho důvodu, že
většina programátorských textových editorů od sebe nedokáže a tím pádem ani
zvýraznit syntaxi jednotlivých částí). O tom, jak vypadá zdrojový text, se
přesvědčíme <a href="#k05">v&nbsp;navazující kapitole</a>.</p>

<p><div class="rs-tip-major">Poznámka: na druhou stranu je nutné říci, že
<i>noweb</i> vznikal v&nbsp;době, kdy programátorské textové editory většinou
zobrazení syntaxe nepodporovaly.</div></p>

<p>Podobně jako v&nbsp;případě původního <i>webu</i> se i v&nbsp;nástroji
<i>noweb</i> používá dvojí zpracování vstupního textu. O první zpracování se
stará filtr pojmenovaný <i>notangle</i>, který vygeneruje zdrojový kód
(nezávisle na použitém programovacím jazyku) a o zpracování druhé pak nástroj
nazvaný <i>noweave</i>, jenž vygeneruje dokumentaci připravenou pro tisk
(resp.&nbsp;přesněji řečeno připravenou například pro zpracování LaTeXem do
tiskové podoby).</p>

<p><div class="rs-tip-major">Poznámka: existují i další varianty tohoto
nástroje, například <strong>noweb.py</strong> naprogramovaný (jak jeho jméno
ostatně velmi dobře napovídá) v&nbsp;Pythonu. Tento nástroj naleznete na adrese
<a
href="https://github.com/JonathanAquino/noweb.py">https://github.com/JonathanAquino/noweb.py</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Ukázky vstupního textu pro nástroj <i>noweb</i></h2>

<p>Podívejme se nyní na to, jak vlastně vypadá vstupní text, který má být
zpracován nástrojem <i>noweb</i>. Nejprve si uvedeme úplnou podobu textu, poté
ho ve stručnosti okomentujeme:</p>

<pre>
\section{Hello world}
&nbsp;
Today I awoke and decided to write
some code, so I started to write Hello World in \textsf C.
&nbsp;
&lt;&lt;hello.c&gt;&gt;=
/*
  &lt;&lt;license&gt;&gt;
*/
#include &lt;stdio.h&gt;
&nbsp;
int main(int argc, char *argv[]) {
  printf("Hello World!\n");
  return 0;
}
@
\noindent \ldots then I did the same in PHP.
&nbsp;
&lt;&lt;hello.php&gt;&gt;=
&lt;?php
  /*
  &lt;&lt;license&gt;&gt;
  */
  echo "Hello world!\n";
?&gt;
@
\section{License}
Later the same day some lawyer reminded me about licenses.
So, here it is:
&nbsp;
&lt;&lt;license&gt;&gt;=
This work is placed in the public domain.
</pre>

<p>V&nbsp;předchozím zdrojovém textu byly použity tři jazyky &ndash; LaTeX, C a
PHP, přičemž LaTeX byl (pochopitelně) použit pro dokumentační část. Jednotlivé
bloky psané v&nbsp;programovacích jazycích začínají jednoznačným označením
(<i>chunk</i>), což je identifikátor, který je zapsán ve dvojitých lomených
závorkách. Příkladem je:</p>

<pre>
&lt;&lt;hello.c&gt;&gt;=
</pre>

<p>Naproti tomu bloky s&nbsp;dokumentací jméno nemají (neodkazuje se na ně).
Začínají řádkem obsahujícím pouze znak @, za nímž následuje vlastní
dokumentace, v&nbsp;našem případě založená na TeXu a v&nbsp;případě druhého
bloku LaTeXu (jako nadmnožině TeXu z&nbsp;pohledu uživatele):</p>

<pre>
@
\noindent \ldots then I did the same in PHP.
</pre>

<p>Typickou ukázkou toho, jak vypadá vstupní text pro nástroj <i>noweb</i>, je
zdrojový kód unixové utility <strong>wc</strong>, který byl upravený do
výstupu, jehož HTML varianta je dostupná na adrese <a
href="https://www.cs.tufts.edu/~nr/noweb/examples/wc.html">https://www.cs.tufts.edu/~nr/noweb/examples/wc.html</a>.
Na tomto výstupu je patrné stáří <i>nowebu</i>, který nedokáže dobře využít
všech možností nabízených moderním HTML a kaskádovými styly. Část upraveného
zdrojového kódu utility <strong>wc</strong> vypadá následovně:</p>

<pre>
The present chunk, which does the counting, was actually one of
the simplest to write. We look at each character and change state if it begins or ends
a word.
&nbsp;
    &lt;&lt;Scan file&gt;&gt;=
    while (1) {
      &lt;&lt;Fill buffer if it is empty; break at end of file&gt;&gt;
      c = *ptr++;
      if (c &gt; ' ' &amp;&amp; c &lt; 0177) {
        /* visible ASCII codes */
        if (!in_word) {
          word_count++;
          in_word = 1;
        }
        continue;
      }
      if (c == '\n') line_count++;
      else if (c != ' ' &amp;&amp; c != '\t') continue;
      in_word = 0;
        /* c is newline, space, or tab */
    }
    @
</pre>

<p>Na závěr se podívejme na ještě složitější kód, který tentokrát kombinuje
dokumentaci se zdrojovým kódem napsaným v&nbsp;Perlu. Začátky jednotlivých
<i>chunků</i> jsou pro větší přehlednost zvýrazněny:</p>

<pre>
\documentclass[10pt]{article}
\usepackage{noweb}
\noweboptions{smallcode,longchunks}
\begin{document}
\pagestyle{noweb}
<strong>@</strong>
\paragraph{Introduction}
This is [[autodefs.perl]]\footnote{Copyright 1997, Andrew L.
Johnson and Brad C. Johnson,  All rights reserved.},
a Perl script to be used as an [[autodefs]] filter
in the [[noweb]] pipeline to identify and index
some common Perl definitions.  Since this
file is also meant to show off some of the
features of [[noweb]] it is purposely verbose
and contorted.
Perl does not require the formal declaration or typing of
variables which makes it difficult to
differentiate between declarations and usages of
variables.  We may however find definitions of [[sub]]’s and
[[package]]’s with little difficulty and that is the purpose of
this module.  Before we begin we need to know
some facts about [[noweb]]’s pipeline structure.\footnote{Noweb’s
pipeline structure is described in the \textit{Noweb Hackers
Guide} which is included in the [[noweb]] distribution.}
Actual code in the pipeline lie between lines
of the form [[@begin code]] and [[@end code]].
In Perl these are easily recognized by the following regular
expressions.
<strong>&lt;&lt;Global variables&gt;&gt;=</strong>
$begin_code_pat = "^\@begin code";
$end_code_pat   = "^\@end code";
<strong>@ %def $begin_code_pat $end_code_pat</strong>
&nbsp;
<strong>@ \paragraph{autodefs.perl}</strong>
Our actual Perl script has the following simple shape:
&lt;&lt;autodefs.perl&gt;&gt;=
#!/usr/bin/perl
<strong>&lt;&lt;Global variables&gt;&gt;</strong>
<strong>&lt;&lt;[[process_code_chunk]] subroutine&gt;&gt;</strong>
while ( &lt;&gt; ) {
print $_;
if (/$begin_code_pat/o) {
process_code_chunk;
}
}
<strong>@</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: z&nbsp;předchozích ukázek je patrné, že
<i>noweb</i> sice může být použitelný, ale nejedná se o jednoduchý a snadno
použitelný nástroj. To je do značné míry způsobeno tím, že <i>noweb</i> je
nezávislý na použitém programovacím jazyku a nedovede tedy například vůbec
pracovat s&nbsp;běžnými komentáři, dokumentačními řetězci apod.
V&nbsp;navazujících kapitolách si ukážeme odlišné přístupy, které jsou založeny
na poněkud posunutém chápání tohoto paradigma, jež je (alespoň podle mého
názoru) bližší běžné současné programátorské praxi.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Moderní přístupy k&nbsp;literate programmingu</h2>

<p>Dnes můžeme vidět poněkud odlišný způsob zpracování a zobrazení aplikací
vyvinutých na bázi literate programmingu. Musíme si totiž uvědomit, že celé
paradigma literate programmingu vzniklo v&nbsp;době, kdy největším problémem
programátorů bylo vůbec realizovat nějaký algoritmus (vznikaly například nové
řadicí algoritmy, alfa-beta ořezávání atd.). Mnoho aplikací &ndash; a to včetně
zde zmiňovaného TeXu &ndash; byla vytvořena buď jako filtr nebo tak, aby se
daly spouštět jako dávková úloha na jednom počítači s&nbsp;již připravenými
daty (zde pro jednoduchost vynechávám řídicí úlohy a procesy).
V&nbsp;současnosti je situace značně odlišná, protože se většinou namísto
řešení konkrétního algoritmu vývojáři spíše zaměřují na realizaci celého
&bdquo;workflow&ldquo;, a to včetně asynchronně vykonávaných operací;
spojováním mnoha služeb a modulů do funkčního celku apod. Některé úlohy,
typicky z&nbsp;oblasti umělé inteligence, strojového učení, zpracování dat
apod. se navíc vyvíjí interaktivně, například s&nbsp;využitím Jupyter
Notebooku, s&nbsp;jehož některými možnostmi jsme se již na stránkách Rootu
seznámili (viz odkazy na konci článku).</p>

<p>Navíc se změnil i význam médií používaných programátory. Cílem již není (a
pro mnohé vývojáře mimo výzkumné ústavy a vysoké školy ani nebylo) vytištěný
dokument, ale spíše jeho elektronická forma, ideálně automaticky generovaná a
automaticky aktualizovaná v&nbsp;synchronizaci se zdrojovým kódem. Novým médiem
se tak stává displej, dnes širokoúhlý &ndash; což nabízí zcela odlišné možnosti
v&nbsp;porovnání s&nbsp;běžnou tištěnou dokumentací, kde typicky existuje
omezení na formát A4 nebo US Letter (navíc pouze v&nbsp;černobílé
variantě).</p>

<p>Z&nbsp;výše zmíněných důvodů se dnes setkáme s&nbsp;poněkud odlišnými
přístupy:</p>

<ol>

<li>Používá se systém diářů, v&nbsp;němž jsou komentáře odděleny od kódu,
protože vstupní text je rozdělen do buněk (<i>cells</i>). Předností tohoto
přístupu je fakt, že lze využít mnoho značkovacích jazyků, dokonce je možné
v&nbsp;rámci jednoho diáře tyto jazyky střídat.</li>

<li>Alternativně se používá přístup, v&nbsp;němž je dokument popisující
algoritmus či sekvenci kroků vložen do zdrojového kódu jako běžný komentář
daného programovacího jazyka. Nástroj, který takové soubory zpracovává, tedy
musí znát syntaxi daného programovacího jazyka. Nevýhodou je, že komentáře,
přesněji řečeno jejich obsah, většinou nebývá dále nijak zvýrazňován
v&nbsp;programátorských editorech.</li>

</ol>



<p><a name="k07"></a></p>
<h2 id="k07">7. Literate programming v&nbsp;podání Jupyter Notebooku</h2>

<p>Jupyter Notebook a podobné nástroje jsou pro použití paradigmatu literate
programování velmi dobře připraveny, protože jsou založeny na použití diáře.
Díky tomu, že v&nbsp;Jupyter Notebooku lze kombinovat buňky s&nbsp;textem
s&nbsp;buňkami obsahujícími kód a jeho výsledky, je možné i v&nbsp;běžných
diářích tento styl používat, což se ostatně poměrně často používá při přípravě
materiálů pro výuku (takových diářů existuje celá řada a jsou z&nbsp;různých
oborů &ndash; od IT přes zpracování signálů až po chemii). Výhodné je, že je
(mj.) plně podporován jazyk Markdown, takže dokumentace není jen čistým textem,
ale lze používat i základní formátovací příkazy, a to včetně tvorby
tabulek.</p>

<a href="https://www.root.cz/obrazek/407916/"><img src="https://i.iinfo.cz/images/481/jupyter1-21-prev.png" class="image-407916" alt="&#160;" width="370" height="193" /></a>
<p><i>Obrázek 3: Grafické uživatelské rozhraní projektu JupyterLab se
zobrazeným vzorovým příkladem. JupyterLab je nástupcem Jupyter
Notebooku.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Ukázka diáře s&nbsp;popisem všech kroků</h2>

<p>Diář, který kromě vlastních kroků pro s&nbsp;analýzami a výpočty obsahuje i
okomentovaný postup, lze nalézt na adrese <a
href="https://github.com/tisnik/jupyter-notebook-examples/blob/master/consumer_benchmarks.ipynb">https://github.com/tisnik/jupyter-notebook-examples/blob/master/consumer_benchmarks.ipynb</a>.
Na základě tohoto diáře byl vytvořen jeden z&nbsp;demonstračních příkladů
zmíněných v&nbsp;další kapitole.</p>

<a href="https://www.root.cz/obrazek/409268/"><img src="https://i.iinfo.cz/images/111/literate-3-prev.png" class="image-409268" alt="&#160;" width="315" height="270" /></a>
<p><i>Obrázek 4: Část diáře zmíněného v&nbsp;předchozím odstavci.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Nástroje typu <i>Docco</i></h2>

<p>Poněkud jiným směrem se vydaly nástroje typu <i>Docco</i> (viz též <a
href="http://ashkenas.com/docco/">http://ashkenas.com/docco/</a>). Tyto
nástroje jsou založeny na tom, že dokumentace s&nbsp;popisem algoritmů,
postupů, tříd atd. je uložena v&nbsp;běžných komentářích platných v&nbsp;rámci
použitého programovacího jazyka; typicky je navíc možné použít některý
značkovací jazyk, například Markdown. Díky tomu je možné s&nbsp;takto
připravenými zdrojovými kódy pracovat přímo v&nbsp;integrovaných vývojových
prostředích i programátorských editorech. Navíc je změněn i výstup produkovaný
Doccem, který je přizpůsoben moderním širokoúhlým displejům (a nikoli klasickým
tiskovým stranám). V&nbsp;praxi to znamená, že tyto nástroje dokáží výsledek
zpracovat a zobrazit takovým způsobem, že v&nbsp;jednom sloupci je zobrazena
dokumentace a ve sloupci druhém pak vlastní zdrojový kód, většinou s&nbsp;plným
zvýrazněním syntaxe.</p>

<a href="https://www.root.cz/obrazek/409269/"><img src="https://i.iinfo.cz/images/111/literate-4-prev.png" class="image-409269" alt="&#160;" width="370" height="203" /></a>
<p><i>Obrázek 5: Příklad výstupu generovaném systémem Docco.<br />
Celou ukázku naleznete na <a href="http://facebook.github.io/rebound-js/docs/rebound.html">http://facebook.github.io/rebound-js/docs/rebound.html</a></i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nástroje odvozené od utility <i>Docco</i></h2>

<p>Utilita <i>Docco</i> podporuje velké množství programovacích jazyků; jejich
aktuální seznam naleznete přímo ve zdrojovém kódu <a
href="https://github.com/jashkenas/docco/blob/master/resources/languages.json">https://github.com/jashkenas/docco/blob/master/resources/languages.json</a>.
Ovšem kromě <i>Docco</i> vznikly i další podobně koncipované nástroje, které
jsou mnohdy specializovány na určitý programovací jazyk nebo skupinu jazyků.
Mezi tyto nástroje patří například:</p>

<table>
<tr><th>#</th><th>Nástroj</th><th>Jazyk</th></tr>
<tr><td>1</td><td>Rocco</td><td>vytvořeno v&nbsp;Ruby, dostupné jako Ruby gem</td></tr>
<tr><td>2</td><td>Shocco</td><td>pro POSIX shell</td></tr>
<tr><td>3</td><td>Pycco</td><td>pro Python, bude zmíněn v&nbsp;dalších kapitolách</td></tr>
<tr><td>4</td><td>Gocco</td><td>pro Go</td></tr>
<tr><td>5</td><td>Locco</td><td>pro jazyk Lua</td></tr>
<tr><td>6</td><td>Docgo</td><td>pro Go, bude zmíněn v&nbsp;dalších kapitolách</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: není náhodou, že pojmenování některých
výše zmíněných utilit ve větší či menší míře vychází z&nbsp;názvu
<i>Docco</i>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Nástroj <i>Docgo</i></h2>

<p>Prvním moderním nástrojem typu <i>Docco</i>, který si dnes popíšeme, je
nástroj nazvaný <i>Docgo</i>, jenž je určený pro použití stylu literate
programming společně s&nbsp;programovacím jazykem Go. Tento nástroj je
jednoduše použitelný a pro daný zdrojový soubor (s&nbsp;poznámkami) generuje
jedinou HTML stránku obsahující jak dokumentaci, tak i zdrojový kód i všechny
styly.</p>

<p>Instalace tohoto nástroje je triviální, ovšem pochopitelně se počítá
s&nbsp;tím, že již máte korektně nainstalovány základní vývojové nástroje
programovacího jazyka Go:</p>

<pre>
$ <strong>go get github.com/dhconnelly/docgo</strong>
</pre>

<p>Po dokončení předchozího příkazu by se v&nbsp;podadresáři
<strong>~/go</strong> (přesněji řečeno v&nbsp;adresáři, na který ukazuje
proměnná prostředí <strong>GOPATH</strong>) měl objevit nový spustitelný soubor
nazvaný <strong>docgo</strong>. Ten lze spustit a předat mu jméno zdrojového
souboru či souborů vytvořených v&nbsp;programovacím jazyce Go.</p>

<p>Příklad použití:</p>

<pre>
$ <strong>docgo gonum.go</strong>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Příklad použití nástroje <i>Docgo</i></h2>

<p>Jako příklad použití nástroje <i>Docgo</i> v&nbsp;praxi jsem přepsal jeden
článek vydaný na tomto serveru do podoby okomentovaného zdrojového kódu.
Konkrétně se jednalo o článek pojednávající o knihovně <strong>gonum</strong>
určené pro programovací jazyk Go. Samotný text článku je umístěn do závorek
uvozených znaky //, které mohou obsahovat značky jazyka Markdown. Naproti tomu
komentáře v&nbsp;závorkách /* */ nejsou převedeny do dokumentu, ale zůstávají
součástí zdrojového kódu.</p>

<p>Úplný kód takto pojatého článku naleznete na adrese <a
href="https://github.com/tisnik/literate-programming-examples/blob/master/gonum.go">https://github.com/tisnik/literate-programming-examples/blob/master/gonum.go</a>.</p>

<p><div class="rs-tip-major">Poznámka: povšimněte si způsobu zápisu zpráv,
které by se měly zobrazit na standardním výstupu. Je zde nutné použít
odsazení:</div></p>

<pre>
//     excerpt big identity matrix: Dims(100, 100)
//     ⎡1  0  0  ...  ...  0  0  0⎤
//     ⎢0  1  0            0  0  0⎥
//     ⎢0  0  1            0  0  0⎥
//      .
//      .
//      .
//     ⎢0  0  0            1  0  0⎥
//     ⎢0  0  0            0  1  0⎥
//     ⎣0  0  0  ...  ...  0  0  1⎦
</pre>

<p>Výsledný článek i s&nbsp;ukázkami kódu můžete vidět <a
href="https://tisnik.github.io/literate-programming-examples/gonum_std.html">zde</a>.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Změna šířky sloupců</h2>

<p>Styl zobrazení výsledného dokumentu je uveden přímo ve vygenerovaném HTML
souboru, což ovšem přináší určité problémy. Pokud například budete chtít, aby
se ve výsledném dokumentu použila větší plocha pro zobrazení textu, je nutné
vygenerovaný HTML ručně upravit, a to konkrétně na dvou místech:</p>

<pre>
@@ -22,7 +22,7 @@
&nbsp; 
 #docgo #background {
     position: fixed;
-    top: 0; left: 525px; right: 0; bottom: 0;
+    top: 0; left: 725px; right: 0; bottom: 0;
     background: rgb(47, 47, 47);
     border-left: 1px solid #e5e5ee;
     z-index: -1;
@@ -65,8 +65,8 @@
     font-size: 15px;
     line-height: 22px;
     color: black;
-    min-width: 450px;
-    max-width: 450px;
+    min-width: 650px;
+    max-width: 650px;
     padding-top: 10px;
     padding-right: 25px;
     padding-bottom: 1px;
</pre>

<p><div class="rs-tip-major">Poznámka: změny zobrazuji ve formě <a
href="https://www.root.cz/clanky/nastroje-pro-porovnani-obsahu-dvou-textovych-souboru/#k02">unifikovaného
diffu</a>.</div></p>

<p>Upravenou podobu článku i s&nbsp;ukázkami kódu můžete vidět <a
href="https://tisnik.github.io/literate-programming-examples/gonum_changed_width.html">zde</a>.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Kde zobrazit výstup programu?</h2>

<p>Nástroj <i>docgo</i> v&nbsp;současnosti neřeší zobrazení ukázkového výstupu
z&nbsp;jednotlivých příkazů. Ty je možné umístit buď do dokumentové části (levý
sloupec) nebo do části se zdrojovým kódem (sloupec pravý). V&nbsp;předchozích
dvou kapitolách jsme viděli první možnost (stačí zascrollovat například na
výpis rozsáhlejších matic), ovšem relativně snadnou úpravou (jediným makrem ve
Vimu) lze docílit i toho, že výstup bude zobrazen v&nbsp;části společné se
zdrojovým kódem. Upravený zdrojový kód naleznete na adrese <a
href="https://github.com/tisnik/literate-programming-examples/blob/master/gonum_output_as_comments.go">https://github.com/tisnik/literate-programming-examples/blob/master/gonum_output_as_comments.go</a>.</p>

<p>Výsledky:</p>

<ol>
<li><a href="https://tisnik.github.io/literate-programming-examples/gonum_output_as_comments.html">výsledek s&nbsp;výchozí šířkou sloupců</a></li>
<li><a href="https://tisnik.github.io/literate-programming-examples/gonum_output_as_comments_changed_width.html">výsledek s&nbsp;rozšířením levého sloupce</a></li>
</ol>



<p><a name="k15"></a></p>
<h2 id="k15">15. Nástroj <i>Pycco</i></h2>

<p>Druhým nástrojem, o kterém se dnes konkrétně zmíníme, je nástroj nazvaný
<i>Pycco</i>. Jak již název tohoto nástroje napovídá, jedná se o alternativu
k&nbsp;nástroji <i>Docco</i> určený pro použití společně s&nbsp;programovacím
jazykem Python, který pro psaní dokumentové části podporuje značkovací jazyk
Markdown. Pycco se instaluje běžným způsobem, například pomocí
<strong>pip</strong>:</p>

<pre>
$ <strong>pip3 install --user pycco</strong>
</pre>

<p>Tento nástroj dokáže vygenerovat dokumentaci k&nbsp;libovolnému množství
skriptů; výsledek se ve výchozím nastavení uloží do podadresáře
<strong>docs</strong>, a to jak HTML stránka, tak i soubor s&nbsp;kaskádovými
styly.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Příklad použití nástroje <i>Pycco</i></h2>

<p>Jako příklad použití nástroje <i>Pycco</i> byl vybrán a náležitě upraven
diář, s&nbsp;nímž jsme se seznámili v&nbsp;rámci <a href="#k08">osmé
kapitoly</a>. Diář byl převeden do kódu v&nbsp;Pythonu, upraven do čitelné
podoby a byly do něj přidány komentáře. Výsledný zdrojový kód je dostupný na
adrese <a
href="https://github.com/tisnik/literate-programming-examples/blob/master/consumer_benchmarks.py">https://github.com/tisnik/literate-programming-examples/blob/master/consumer_benchmarks.py</a>
a vygenerovaná dokumentace společně se zdrojovými kódy na adrese <a
href="https://tisnik.github.io/literate-programming-examples/consumer_benchmarks.html">https://tisnik.github.io/literate-programming-examples/consumer_benchmarks.html</a>.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Možnosti dalšího vývoje</h2>

<p>Ukázané nástroje (<i>pycco</i> a <i>docgo</i>) by bylo vhodné dále rozšířit,
například o možnost zobrazení třetího sloupce s&nbsp;výsledky, a to jak
textovými (standardní a chybový výstup), tak i grafickými (diagramy, grafy,
tabulky). Prozatím sice takové nástroje k&nbsp;dispozici nejsou, ovšem jejich
vývoj by mohl být relativně snadný. Ostatně i Jupyter Notebook nyní prochází
úpravami, které umožňují zobrazení dvou či více sloupců, což je vlastně velmi
podobný mechanismus.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady s&nbsp;nimiž jsme se seznámili
v&nbsp;předchozích kapitolách, byly uloženy do Git repositáře umístěného na
GitHubu (<a
href="https://github.com/tisnik/literate-programming-examples">https://github.com/tisnik/literate-programming-examples</a>).
Poslední verze souborů s&nbsp;diáři naleznete pod odkazy uvedenými
v&nbsp;tabulce pod tímto odstavcem.</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Zdrojový kód</th></tr>
<tr><td>1</td><td>consumer_benchmarks.py</td><td>zkonvertovaný diář s&nbsp;benchmarky</td><td><a href="https://github.com/tisnik/literate-programming-examples/blob/master/consumer_benchmarks.py">https://github.com/tisnik/literate-programming-examples/blob/master/consumer_benchmarks.py</a></td></tr>
<tr><td>2</td><td>gonum.go</td><td>úvodní informace o knihovně Gonumúvodní informace o knihovně Gonum</td><td><a href="https://github.com/tisnik/literate-programming-examples/blob/master/gonum.go">https://github.com/tisnik/literate-programming-examples/blob/master/gonum.go</a></td></tr>
<tr><td>3</td><td>gonum_output_as_comments.go</td><td>úvodní informace o knihovně Gonum, výstup ve formě komentářů</td><td><a href="https://github.com/tisnik/literate-programming-examples/blob/master/gonum_output_as_comments.go">https://github.com/tisnik/literate-programming-examples/blob/master/gonum_output_as_comments.go</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Vygenerované soubory s&nbsp;vysvětlením zdrojového kódu i vlastním kódem</h2>

<p>S&nbsp;využitím nástrojů zmíněných v&nbsp;předchozích kapitolách
(<strong>pycco</strong>, <strong>docgo</strong>) byly vygenerovány následující
soubory (z&nbsp;nichž dva prošly nepatrnými ručními úpravami), které
v&nbsp;jednom sloupci obsahují popis algoritmu a ve sloupci druhém vlastní
zdrojový kód:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Lze si prohlédnout na adrese</th></tr>
<tr><td>1</td><td>consumer_benchmarks.html</td><td>zkonvertovaný diář s&nbsp;benchmarky</td><td><a href="https://tisnik.github.io/literate-programming-examples/consumer_benchmarks.html">https://tisnik.github.io/literate-programming-examples/consumer_benchmarks.html</a></td></tr>
<tr><td>2</td><td>gonum_std.html</td><td>úvodní informace o knihovně Gonum, nezměněná varianta</td><td><a href="https://tisnik.github.io/literate-programming-examples/gonum_std.html">https://tisnik.github.io/literate-programming-examples/gonum_std.html</a></td></tr>
<tr><td>3</td><td>gonum_changed_width.html</td><td>úvodní informace o knihovně Gonum, změna šířky sloupců</td><td><a href="https://tisnik.github.io/literate-programming-examples/gonum_changed_width.html">https://tisnik.github.io/literate-programming-examples/gonum_changed_width.html</a></td></tr>
<tr><td>4</td><td>gonum_output_as_comments.html</td><td>úvodní informace o knihovně Gonum, výstup ve formě komentářů</td><td><a href="https://tisnik.github.io/literate-programming-examples/gonum_output_as_comments.html">https://tisnik.github.io/literate-programming-examples/gonum_output_as_comments.html</a></td></tr>
<tr><td>5</td><td>gonum_output_as_comments_changed_width.html</td><td>předchozí příklad s&nbsp;upravenou šířkou sloupců</td><td><a href="https://tisnik.github.io/literate-programming-examples/gonum_output_as_comments_changed_width.html">https://tisnik.github.io/literate-programming-examples/gonum_output_as_comments_changed_width.html</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Literate Programming (Knuth)<br />
<a href="http://www.literateprogramming.com/knuthweb.pdf">http://www.literateprogramming.com/knuthweb.pdf</a>
</li>

<li>literateprogramming<br />
<a href="http://www.literateprogramming.com/">http://www.literateprogramming.com/</a>
</li>

<li>Literate programing: Kolokviální práce Pavla Starého<br />
<a href="https://www.fi.muni.cz/usr/jkucera/pv109/starylp.htm">https://www.fi.muni.cz/usr/jkucera/pv109/starylp.htm</a>
</li>

<li>Ladislav Kašpárek: Literate Programming na střední škole<br />
<a href="http://www.ceskaskola.cz/2006/05/ladislav-kasparek-literate-programming.html">http://www.ceskaskola.cz/2006/05/ladislav-kasparek-literate-programming.html</a>
</li>

<li>anansi: A NoWeb-inspired literate programming preprocessor<br />
<a href="https://john-millikin.com/software/anansi">https://john-millikin.com/software/anansi</a>
</li>

<li>Literate programming<br />
<a href="https://en.wikipedia.org/wiki/Literate_programming">https://en.wikipedia.org/wiki/Literate_programming</a>
</li>

<li>Noweb — A Simple, Extensible Tool for Literate Programming<br />
<a href="https://www.cs.tufts.edu/~nr/noweb/">https://www.cs.tufts.edu/~nr/noweb/</a>
</li>

<li>Literate Programming using noweb<br />
<a href="https://www.cs.tufts.edu/~nr/noweb/johnson-lj.pdf">https://www.cs.tufts.edu/~nr/noweb/johnson-lj.pdf</a>
</li>

<li>An Example of noweb<br />
<a href="https://www.cs.tufts.edu/~nr/noweb/examples/wc.html">https://www.cs.tufts.edu/~nr/noweb/examples/wc.html</a>
</li>

<li>PyWeb<br />
<a href="https://github.com/slott56/py-web-tool">https://github.com/slott56/py-web-tool</a>
</li>

<li>Noweb (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Noweb">https://en.wikipedia.org/wiki/Noweb</a>
</li>

<li>Notangle<br />
<a href="https://archive.is/20151215221108/http://dev.man-online.org/man1/notangle/">https://archive.is/20151215221108/http://dev.man-online.org/man1/notangle/</a>
</li>

<li>noweb.py<br />
<a href="https://github.com/JonathanAquino/noweb.py">https://github.com/JonathanAquino/noweb.py</a>
</li>

<li>literate-programming-style documentation for golang, modeled on docco<br />
<a href="https://github.com/dhconnelly/docgo">https://github.com/dhconnelly/docgo</a>
</li>

<li>docgo documentation<br />
<a href="https://dhconnelly.com/docgo/">https://dhconnelly.com/docgo/</a>
</li>

<li>Docco<br />
<a href="http://ashkenas.com/docco/">http://ashkenas.com/docco/</a>
</li>

<li>Literate CoffeeScript<br />
<a href="http://coffeescript.org/#literate">http://coffeescript.org/#literate</a>
</li>

<li>UWTB: Responsive, Two Column Documentation Layout With Markdown and CSS<br />
<a href="https://blog.mattbierner.com/responsive-two-column-documentation-layout-with-markdown-and-css/">https://blog.mattbierner.com/responsive-two-column-documentation-layout-with-markdown-and-css/</a>
</li>

<li>Jupyter Notebook – nástroj pro programátory, výzkumníky i lektory<br />
<a href="https://www.root.cz/clanky/jupyter-notebook-nastroj-pro-programatory-vyzkumniky-i-lektory/">https://www.root.cz/clanky/jupyter-notebook-nastroj-pro-programatory-vyzkumniky-i-lektory/</a>
</li>

<li>Tvorba grafů v Jupyter Notebooku s využitím knihovny Matplotlib<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/</a>
</li>

<li>Tvorba grafů v Jupyter Notebooku s využitím knihovny Matplotlib (dokončení)<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib-dokonceni/">https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib-dokonceni/</a>
</li>

<li>Jupyter Notebook – operace s rastrovými obrázky a UML diagramy, literate programming<br />
<a href="https://www.root.cz/clanky/jupyter-notebook-operace-s-rastrovymi-obrazky-a-uml-diagramy-literate-programming/">https://www.root.cz/clanky/jupyter-notebook-operace-s-rastrovymi-obrazky-a-uml-diagramy-literate-programming/</a>
</li>

<li>Šedesátiny převratného programovacího jazyka ALGOL-60<br />
<a href="https://www.root.cz/clanky/sedesatiny-prevratneho-programovaciho-jazyka-algol-60/">https://www.root.cz/clanky/sedesatiny-prevratneho-programovaciho-jazyka-algol-60/</a>
</li>

<li>shocco<br />
<a href="https://rtomayko.github.io/shocco/">https://rtomayko.github.io/shocco/</a>
</li>

<li>rocco.rb<br />
<a href="https://rtomayko.github.io/rocco/rocco.html">https://rtomayko.github.io/rocco/rocco.html</a>
</li>

<li>gocco<br />
<a href="https://nikhilm.github.io/gocco/">https://nikhilm.github.io/gocco/</a>
</li>

<li>locco<br />
<a href="https://rgieseke.github.io/locco/">https://rgieseke.github.io/locco/</a>
</li>

<li>web – The original literate programming system<br />
<a href="https://www.ctan.org/pkg/web">https://www.ctan.org/pkg/web</a>
</li>

<li>The CWEB System of Structured Documentation<br />
<a href="https://www-cs-faculty.stanford.edu/~knuth/cweb.html">https://www-cs-faculty.stanford.edu/~knuth/cweb.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

