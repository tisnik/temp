<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
$ gcov
</pre>

<pre>
Usage: gcov [OPTION...] SOURCE|OBJ...

Print code coverage information.

  -a, --all-blocks                Show information for every basic block
  -b, --branch-probabilities      Include branch probabilities in output
  -c, --branch-counts             Output counts of branches taken
                                    rather than percentages
  -d, --display-progress          Display progress information
  -f, --function-summaries        Output summaries for each function
  -h, --help                      Print this help, then exit
  -i, --json-format               Output JSON intermediate format into .gcov.json.gz file
  -j, --human-readable            Output human readable numbers
  -k, --use-colors                Emit colored output
  -l, --long-file-names           Use long output file names for included
                                    source files
  -m, --demangled-names           Output demangled function names
  -n, --no-output                 Do not create an output file
  -o, --object-directory DIR|FILE Search for object files in DIR or called FILE
  -p, --preserve-paths            Preserve all pathname components
  -q, --use-hotness-colors        Emit perf-like colored output for hot lines
  -r, --relative-only             Only show data for relative sources
  -s, --source-prefix DIR         Source prefix to elide
  -t, --stdout                    Output to stdout instead of a file
  -u, --unconditional-branches    Show unconditional branch counts too
  -v, --version                   Print version number, then exit
  -w, --verbose                   Print verbose informations
  -x, --hash-filenames            Hash long pathnames

For bug reporting instructions, please see:
<file:///usr/share/doc/gcc-9/README.Bugs>.
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>

<pre>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct Node
{
    struct Node *left;
    struct Node *right;
    char *value;
} Node;

void insert_new_node(Node **root, char *value)
{
    int cmp;

    if (*root == NULL)
    {
        *root = (Node *)malloc(sizeof(Node));
        (*root)-&gt;value = (char*)calloc(strlen(value), sizeof(char));
        strcpy((*root)-&gt;value, value);
        (*root)-&gt;left = NULL;
        (*root)-&gt;right = NULL;
        return;
    }
    cmp = strcmp(value, (*root)-&gt;value);
    if (cmp &lt; 0)
    {
        insert_new_node(&amp;(*root)-&gt;left, value);
    }
    else
    {
        insert_new_node(&amp;(*root)-&gt;right, value);
    }
}

void traverse_tree(Node *root, void (*callback_function)(char *))
{
    if (root == NULL)
    {
        return;
    }
    traverse_tree(root-&gt;left, callback_function);
    callback_function(root-&gt;value);
    traverse_tree(root-&gt;right, callback_function);
}

void callback_function(char *value)
{
    printf("%s\n", value);
}

int main(void)
{
    static Node *root = NULL;

    traverse_tree(root, callback_function);

    return 0;
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
        -:    0:Source:tree1.c
        -:    0:Graph:tree1.gcno
        -:    0:Data:tree1.gcda
        -:    0:Runs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include <string.h>
        -:    4:
        -:    5:typedef struct Node
        -:    6:{
        -:    7:    struct Node *left;
        -:    8:    struct Node *right;
        -:    9:    char *value;
        -:   10:} Node;
        -:   11:
    #####:   12:void insert_new_node(Node **root, char *value)
        -:   13:{
        -:   14:    int cmp;
        -:   15:
    #####:   16:    if (*root == NULL)
        -:   17:    {
    #####:   18:        *root = (Node *)malloc(sizeof(Node));
    #####:   19:        (*root)-&gt;value = (char*)calloc(strlen(value), sizeof(char));
    #####:   20:        strcpy((*root)-&gt;value, value);
    #####:   21:        (*root)-&gt;left = NULL;
    #####:   22:        (*root)-&gt;right = NULL;
    #####:   23:        return;
        -:   24:    }
    #####:   25:    cmp = strcmp(value, (*root)-&gt;value);
    #####:   26:    if (cmp &lt; 0)
        -:   27:    {
    #####:   28:        insert_new_node(&amp;(*root)-&gt;left, value);
        -:   29:    }
        -:   30:    else
        -:   31:    {
    #####:   32:        insert_new_node(&amp;(*root)-&gt;right, value);
        -:   33:    }
        -:   34:}
        -:   35:
        1:   36:void traverse_tree(Node *root, void (*callback_function)(char *))
        -:   37:{
        1:   38:    if (root == NULL)
        -:   39:    {
        1:   40:        return;
        -:   41:    }
    #####:   42:    traverse_tree(root-&gt;left, callback_function);
    #####:   43:    callback_function(root-&gt;value);
    #####:   44:    traverse_tree(root-&gt;right, callback_function);
        -:   45:}
        -:   46:
    #####:   47:void callback_function(char *value)
        -:   48:{
    #####:   49:    printf("%s\n", value);
    #####:   50:}
        -:   51:
        1:   52:int main(void)
        -:   53:{
        -:   54:    static Node *root = NULL;
        -:   55:
        1:   56:    traverse_tree(root, callback_function);
        -:   57:
        1:   58:    return 0;
        -:   59:}
        -:   60:
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct Node
{
    struct Node *left;
    struct Node *right;
    char *value;
} Node;

void insert_new_node(Node **root, char *value)
{
    int cmp;

    if (*root == NULL)
    {
        *root = (Node *)malloc(sizeof(Node));
        (*root)-&gt;value = (char*)calloc(strlen(value), sizeof(char));
        strcpy((*root)-&gt;value, value);
        (*root)-&gt;left = NULL;
        (*root)-&gt;right = NULL;
        return;
    }
    cmp = strcmp(value, (*root)-&gt;value);
    if (cmp &lt; 0)
    {
        insert_new_node(&(*root)-&gt;left, value);
    }
    else
    {
        insert_new_node(&(*root)-&gt;right, value);
    }
}

void traverse_tree(Node *root, void (*callback_function)(char *))
{
    if (root == NULL)
    {
        return;
    }
    traverse_tree(root-&gt;left, callback_function);
    callback_function(root-&gt;value);
    traverse_tree(root-&gt;right, callback_function);
}

void callback_function(char *value)
{
    printf("%s\n", value);
}

int main(void)
{
    static Node *root = NULL;

    insert_new_node(&amp;root, "xxx");

    traverse_tree(root, callback_function);

    return 0;
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
$ <strong>gcov tree2.c</strong>
</pre>

<pre>
File 'tree2.c'
Lines executed:84.00% of 25
Creating 'tree2.c.gcov'
</pre>

<pre>
        -:    0:Source:tree2.c
        -:    0:Graph:tree2.gcno
        -:    0:Data:tree2.gcda
        -:    0:Runs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include <string.h>
        -:    4:
        -:    5:typedef struct Node
        -:    6:{
        -:    7:    struct Node *left;
        -:    8:    struct Node *right;
        -:    9:    char *value;
        -:   10:} Node;
        -:   11:
        1:   12:void insert_new_node(Node **root, char *value)
        -:   13:{
        -:   14:    int cmp;
        -:   15:
        1:   16:    if (*root == NULL)
        -:   17:    {
        1:   18:        *root = (Node *)malloc(sizeof(Node));
        1:   19:        (*root)-&gt;value = (char*)calloc(strlen(value), sizeof(char));
        1:   20:        strcpy((*root)-&gt;value, value);
        1:   21:        (*root)-&gt;left = NULL;
        1:   22:        (*root)-&gt;right = NULL;
        1:   23:        return;
        -:   24:    }
    #####:   25:    cmp = strcmp(value, (*root)-&gt;value);
    #####:   26:    if (cmp &lt; 0)
        -:   27:    {
    #####:   28:        insert_new_node(&(*root)-&gt;left, value);
        -:   29:    }
        -:   30:    else
        -:   31:    {
    #####:   32:        insert_new_node(&(*root)-&gt;right, value);
        -:   33:    }
        -:   34:}
        -:   35:
        3:   36:void traverse_tree(Node *root, void (*callback_function)(char *))
        -:   37:{
        3:   38:    if (root == NULL)
        -:   39:    {
        2:   40:        return;
        -:   41:    }
        1:   42:    traverse_tree(root-&gt;left, callback_function);
        1:   43:    callback_function(root-&gt;value);
        1:   44:    traverse_tree(root-&gt;right, callback_function);
        -:   45:}
        -:   46:
        1:   47:void callback_function(char *value)
        -:   48:{
        1:   49:    printf("%s\n", value);
        1:   50:}
        -:   51:
        1:   52:int main(void)
        -:   53:{
        -:   54:    static Node *root = NULL;
        -:   55:
        1:   56:    insert_new_node(&amp;root, "xxx");
        -:   57:
        1:   58:    traverse_tree(root, callback_function);
        -:   59:
        1:   60:    return 0;
        -:   61:}
        -:   62:
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct Node
{
    struct Node *left;
    struct Node *right;
    char *value;
} Node;

void insert_new_node(Node **root, char *value)
{
    int cmp;

    if (*root == NULL)
    {
        *root = (Node *)malloc(sizeof(Node));
        (*root)-&gt;value = (char*)calloc(strlen(value), sizeof(char));
        strcpy((*root)-&gt;value, value);
        (*root)-&gt;left = NULL;
        (*root)-&gt;right = NULL;
        return;
    }
    cmp = strcmp(value, (*root)-&gt;value);
    if (cmp &lt; 0)
    {
        insert_new_node(&(*root)-&gt;left, value);
    }
    else
    {
        insert_new_node(&(*root)-&gt;right, value);
    }
}

void traverse_tree(Node *root, void (*callback_function)(char *))
{
    if (root == NULL)
    {
        return;
    }
    traverse_tree(root-&gt;left, callback_function);
    callback_function(root-&gt;value);
    traverse_tree(root-&gt;right, callback_function);
}

void callback_function(char *value)
{
    printf("%s\n", value);
}

int main(void)
{
    static Node *root = NULL;

    insert_new_node(&amp;root, "xxx");
    insert_new_node(&amp;root, "aaa");
    insert_new_node(&amp;root, "bbb");
    insert_new_node(&amp;root, "ccc");
    insert_new_node(&amp;root, "yyy");
    insert_new_node(&amp;root, "yyy");

    traverse_tree(root, callback_function);

    return 0;
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
$ gcov tree3.c
</pre>

<pre>
File 'tree3.c'
Lines executed:100.00% of 30
Creating 'tree3.c.gcov'
</pre>

<pre>
        -:    0:Source:tree3.c
        -:    0:Graph:tree3.gcno
        -:    0:Data:tree3.gcda
        -:    0:Runs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include <string.h>
        -:    4:
        -:    5:typedef struct Node
        -:    6:{
        -:    7:    struct Node *left;
        -:    8:    struct Node *right;
        -:    9:    char *value;
        -:   10:} Node;
        -:   11:
       15:   12:void insert_new_node(Node **root, char *value)
        -:   13:{
        -:   14:    int cmp;
        -:   15:
       15:   16:    if (*root == NULL)
        -:   17:    {
        6:   18:        *root = (Node *)malloc(sizeof(Node));
        6:   19:        (*root)-&gt;value = (char*)calloc(strlen(value), sizeof(char));
        6:   20:        strcpy((*root)-&gt;value, value);
        6:   21:        (*root)-&gt;left = NULL;
        6:   22:        (*root)-&gt;right = NULL;
        6:   23:        return;
        -:   24:    }
        9:   25:    cmp = strcmp(value, (*root)-&gt;value);
        9:   26:    if (cmp &lt; 0)
        -:   27:    {
        3:   28:        insert_new_node(&(*root)-&gt;left, value);
        -:   29:    }
        -:   30:    else
        -:   31:    {
        6:   32:        insert_new_node(&(*root)-&gt;right, value);
        -:   33:    }
        -:   34:}
        -:   35:
       13:   36:void traverse_tree(Node *root, void (*callback_function)(char *))
        -:   37:{
       13:   38:    if (root == NULL)
        -:   39:    {
        7:   40:        return;
        -:   41:    }
        6:   42:    traverse_tree(root-&gt;left, callback_function);
        6:   43:    callback_function(root-&gt;value);
        6:   44:    traverse_tree(root-&gt;right, callback_function);
        -:   45:}
        -:   46:
        6:   47:void callback_function(char *value)
        -:   48:{
        6:   49:    printf("%s\n", value);
        6:   50:}
        -:   51:
        1:   52:int main(void)
        -:   53:{
        -:   54:    static Node *root = NULL;
        -:   55:
        1:   56:    insert_new_node(&amp;root, "xxx");
        1:   57:    insert_new_node(&amp;root, "aaa");
        1:   58:    insert_new_node(&amp;root, "bbb");
        1:   59:    insert_new_node(&amp;root, "ccc");
        1:   60:    insert_new_node(&amp;root, "yyy");
        1:   61:    insert_new_node(&amp;root, "yyy");
        -:   62:
        1:   63:    traverse_tree(root, callback_function);
        -:   64:
        1:   65:    return 0;
        -:   66:}
        -:   67:
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
#include <stdio.h>

long factorial(long n)
{
    if (n<=1) {
        return 1;
    }
    return n*factorial(n-1);
}

int main(int argc, char **argv)
{
    printf("%ld\n", factorial(20));
    return 0;
}

</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
$ gcov factorial.c
&nbsp;
File 'factorial.c'
Lines executed:100.00% of 7
Creating 'factorial.c.gcov'
</pre>

<pre>
        -:    0:Source:factorial.c
        -:    0:Graph:factorial.gcno
        -:    0:Data:factorial.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:
       20:    3:long factorial(long n)
        -:    4:{
       20:    5:    if (n<=1) {
        1:    6:        return 1;
        -:    7:    }
       19:    8:    return n*factorial(n-1);
        -:    9:}
        -:   10:
        1:   11:int main(int argc, char **argv)
        -:   12:{
        1:   13:    printf("%ld\n", factorial(20));
        1:   14:    return 0;
        -:   15:}
        -:   16:
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
int zero(void)
{
    return 0;
}

int inc(int x)
{
    return x+1;
}

int add(int x, int y)
{
    return x+y;
}

int foo(int x)
{
    int r = 0;
    while (x--) {
        r++;
    }
    return r;
}

int main(void)
{
    int a = zero();
    int b = inc(a);
    int c = add(a, b);
    int d = foo(c);
    return c;
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
<strong>gcc -g test.c</strong>
</pre>

<p></p>

<pre>
<strong>objdump -drw -Mintel -S a.out &gt; normal.asm</strong>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
<strong>gcc -g -fprofile-arcs -ftest-coverage test.c</strong>
</pre>

<pre>
<strong>objdump -drw -Mintel -S a.out &gt; coverage.asm</strong>
</pre>


<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační soubory byly uloženy do Git repositáře, jenž je dostupný na
adrese <a
href="https://github.com/tisnik/slides/">https://github.com/tisnik/slides/</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář, můžete namísto toho
použít odkazy na jednotlivé soubory, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th>#</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td></td><td></td><td><a href="https://github.com/tisnik/slides/blob/master/sources/tree1.c">https://github.com/tisnik/slides/blob/master/sources/tree1.c</a></td></tr>
<tr><td>2</td><td></td><td></td><td><a href="https://github.com/tisnik/slides/blob/master/sources/tree2.c">https://github.com/tisnik/slides/blob/master/sources/tree2.c</a></td></tr>
<tr><td>3</td><td></td><td></td><td><a href="https://github.com/tisnik/slides/blob/master/sources/tree3.c">https://github.com/tisnik/slides/blob/master/sources/tree3.c</a></td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/slides/blob/master/sources/factorial.c">https://github.com/tisnik/slides/blob/master/sources/factorial.c</a></td></tr>
<tr><td>5</td><td></td><td></td><td><a href="https://github.com/tisnik/slides/blob/master/sources/test.c">https://github.com/tisnik/slides/blob/master/sources/test.c</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>How to Analyze Code Coverage with gcov<br />
<a href="https://www.linuxtoday.com/blog/analyzing-code-coverage-with-gcov/">https://www.linuxtoday.com/blog/analyzing-code-coverage-with-gcov/</a>
</li>

<li>gcov - Unix, Linux Command<br />
<a href="https://www.tutorialspoint.com/unix_commands/gcov.htm">https://www.tutorialspoint.com/unix_commands/gcov.htm</a>
</li>

<li>Testing code coverage in C using GCOV<br />
<a href="https://www.youtube.com/watch?v=UOGMNRcV9-4">https://www.youtube.com/watch?v=UOGMNRcV9-4</a>
</li>

<li>Nástroj objdump: švýcarský nožík pro vývojáře<br />
<a href="https://www.root.cz/clanky/nastroj-objdump-svycarsky-nozik-pro-vyvojare/">https://www.root.cz/clanky/nastroj-objdump-svycarsky-nozik-pro-vyvojare/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

