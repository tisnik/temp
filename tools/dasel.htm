<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Dasel - nástroj pro zpracování a modifikaci souborů JSON, YAML, XML a TOML</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Dasel - nástroj pro zpracování a modifikaci souborů JSON, YAML, XML a TOML</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se seznámíme se základními vlastnostmi nástroje nazvaného Dasel. Tento nástroj lze použít ke čtení informací ze souborů typu JSON, YAML, XML a TOML, jedná se tedy o rozšíření známého nástroje jq resp. yq. To ovšem není vše, protože soubory je možné nástrojem Dasel i modifikovat.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Dasel &ndash; nástroj pro zpracování a modifikaci souborů JSON, YAML, XML a TOML</a></p>
<p><a href="#k02">2. Instalace nástroje <strong>dasel</strong> ze zdrojových kódů</a></p>
<p><a href="#k03">3. Čtení informací ze souborů s&nbsp;formátem TOML</a></p>
<p><a href="#k04">4. Příklady jednoduchých dotazů</a></p>
<p><a href="#k05">5. Čtení informací ze souborů s&nbsp;formátem YAML</a></p>
<p><a href="#k06">6. Příklady jednoduchých dotazů</a></p>
<p><a href="#k07">7. Filtrace na základě nepovinných atributů</a></p>
<p><a href="#k08">8. Export výsledků do jiného formátu</a></p>
<p><a href="#k09">9. Sekvence vs. seznam (pole) hodnot</a></p>
<p><a href="#k10">10. Čtení informací ze souborů s&nbsp;formátem XML</a></p>
<p><a href="#k11">*** 11. Ukázkové příklady</a></p>
<p><a href="#k12">12. Přidání nových atributů do souborů ve formátu TOML</a></p>
<p><a href="#k13">13. Přidání globálního atributu</a></p>
<p><a href="#k14">14. Přidání atributu do uloženého objektu</a></p>
<p><a href="#k15">15. Vymazání celé sekce ze souboru typu TOML</a></p>
<p><a href="#k16">16. Vymazání jednoho atributu ze souboru TOML</a></p>
<p><a href="#k17">*** 17. Zpracování tabulek uložených v&nbsp;souborech typu CSV</a></p>
<p><a href="#k18">*** 18. Transformace dat do CSV</a></p>
<p><a href="#k19">19. Repositář s&nbsp;pracovními soubory</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Dasel &ndash; nástroj pro zpracování a modifikaci souborů JSON, YAML, XML a TOML</h2>

<p>V&nbsp;praxi se velmi často setkáme s&nbsp;nutností čtení informací
z&nbsp;konfiguračních souborů popř.&nbsp;je nutné takové soubory nějakým
způsobem modifikovat. Složitější konfigurační parametry se, zejména ve chvíli,
kdy je nutné pracovat se strukturovanými daty a různými datovými typy,
neukládají ani do souborů typu INI ani do .properties (ty se používají
například ve světě Javy, ovšem jen v&nbsp;omezené míře). Namísto toho je možné
využít například následující formáty:</p>

<ul>

<li><i>JSON</i> (<i>JavaScript Object Notation</i>) &ndash; pravděpodobně
nejznámější formát, který byl sice určen pro přenosy dat (typicky mezi webovou
službou/serverem a další službou nebo klientem), ovšem dnes se s&nbsp;tímto
formátem setkáme i v&nbsp;dalších odvětvích &ndash; serializace, uložení
strukturovaných dat do databáze a taktéž konfigurační soubory.</li>

<li><i>YAML</i> (<i>YAML Ain't Markup Language</i>) &ndash; je formátem, který
se namísto použití závorek pro určení struktury spoléhá spíše na použití
odsazení (podobně, jako je tomu v&nbsp;Pythonu) a popř.&nbsp;i speciálních
znaků (-, #, [, ] atd.). S&nbsp;tímto formátem se setkáme ve světě Dockeru a
Kubernetes, ovšem je ho možné použít i pro další účely.</li>

<li><i>XML</i> (<i>Extensible Markup Language</i>) &ndash; s&nbsp;tímto
formátem pravděpodobně není nutné čtenáře tohoto článku podrobněji seznamovat.
XML se pro uložení konfiguračních parametrů používá již delší dobu, i když se
z&nbsp;některých důvodů nemusí vždy jednat o ideální řešení.</li>

<li><i>TOML</i> (<i>Tom's Obvious, Minimal Language</i>) &ndash; formát TOML
sice zdánlivě (alespoň na první pohled) vychází ze souborů typu INI, ovšem ve
skutečnosti se jedná o odlišný, v&nbsp;mnoha ohledech vylepšený a především
promyšlený formát, v&nbsp;němž byly odstraněny prakticky všechny nevýhody INI a
přitom byla zachována čitelnost a snadnost úprav.</li>

<li><i>edn</i> (<i>Extensible Data Notation</i>) &ndash; tento formát vychází
ze syntaxe a sémantiky programovacího jazyka Clojure, je tedy založen na
S-výrazech rozšířených o možnost zápisu map (slovníků) a vektorů. Formát
<i>edn</i> je rozšířen právě v&nbsp;ekosystému jazyka Clojure, ale
v&nbsp;ostatních oblastech se prozatím příliš nerozšířil, takže je dnes uveden
spíše pro úplnost. Popis formátu <i>edn</i> (a tím pádem i popis syntaxe
Clojure) naleznete na stránce <a
href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>.</li>

</ul>

<p><div class="rs-tip-major">Poznámka: dnes popisovaný nástroj <i>Dasel</i>
dokáže pracovat s&nbsp;prvními čtyřmi zmíněnými formáty, tedy konkrétně
s&nbsp;formáty JSON, YAML, TOML a XML. Částečně je též podporován formát CSV,
ovšem edn (alespoň prozatím) nikoli.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace nástroje <strong>dasel</strong> ze zdrojových kódů</h2>

<p><i>Dasel</i> je naprogramován <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">v&nbsp;jazyce Go</a>,
takže ve chvíli, kdy máte nainstalovány základní nástroje Go (překladač atd.),
je stažení, překlad a instalace <i>Daselu</i> vyřešena jediným příkazem:</p>

<pre>
$ <strong>go install -v github.com/tomwright/dasel/v2/cmd/dasel@master</strong>
</pre>

<p>Během instalace se stahují i všechny závislé balíčky (<i>transitive
dependencies</i>), kterých je v&nbsp;tomto případě celá řada, což je ostatně
patrné i z&nbsp;následujícího výpisu:</p>

<pre>
go: downloading github.com/tomwright/dasel v1.27.4-0.20230111120636-c9187a46f74e
go: downloading github.com/tomwright/dasel/v2 v2.1.3-0.20230404173316-88bf4414bc0b
go: downloading github.com/spf13/cobra v1.6.1
go: downloading github.com/alecthomas/chroma v0.10.0
go: downloading github.com/clbanning/mxj/v2 v2.5.7
go: downloading golang.org/x/net v0.8.0
go: downloading github.com/dlclark/regexp2 v1.4.0
go: downloading golang.org/x/text v0.8.0
golang.org/x/text/internal/utf8internal
golang.org/x/net/html/atom
golang.org/x/text/encoding/internal/identifier
golang.org/x/text/transform
golang.org/x/text/internal/tag
github.com/tomwright/dasel/v2/internal
github.com/tomwright/dasel/v2
github.com/dlclark/regexp2/syntax
github.com/clbanning/mxj/v2
github.com/spf13/cobra
github.com/pelletier/go-toml
golang.org/x/net/html
golang.org/x/text/internal/language
golang.org/x/text/encoding
golang.org/x/text/encoding/internal
golang.org/x/text/encoding/charmap
golang.org/x/text/encoding/japanese
golang.org/x/text/encoding/korean
github.com/dlclark/regexp2
golang.org/x/text/encoding/simplifiedchinese
golang.org/x/text/encoding/traditionalchinese
golang.org/x/text/runes
golang.org/x/text/encoding/unicode
golang.org/x/text/internal/language/compact
golang.org/x/text/language
github.com/alecthomas/chroma
github.com/alecthomas/chroma/formatters/html
github.com/alecthomas/chroma/lexers/internal
github.com/alecthomas/chroma/formatters/svg
github.com/alecthomas/chroma/styles
github.com/alecthomas/chroma/lexers/a
github.com/alecthomas/chroma/lexers/b
github.com/alecthomas/chroma/formatters
github.com/alecthomas/chroma/lexers/p
github.com/alecthomas/chroma/lexers/j
github.com/alecthomas/chroma/lexers/e
github.com/alecthomas/chroma/lexers/f
github.com/alecthomas/chroma/lexers/i
github.com/alecthomas/chroma/lexers/d
github.com/alecthomas/chroma/lexers/c
github.com/alecthomas/chroma/lexers/k
github.com/alecthomas/chroma/lexers/l
github.com/alecthomas/chroma/lexers/n
github.com/alecthomas/chroma/lexers/o
github.com/alecthomas/chroma/lexers/q
github.com/alecthomas/chroma/lexers/r
github.com/alecthomas/chroma/lexers/t
github.com/alecthomas/chroma/lexers/v
github.com/alecthomas/chroma/lexers/w
github.com/alecthomas/chroma/lexers/x
github.com/alecthomas/chroma/lexers/y
github.com/alecthomas/chroma/lexers/z
github.com/alecthomas/chroma/lexers/h
github.com/alecthomas/chroma/lexers/circular
github.com/alecthomas/chroma/lexers/g
github.com/alecthomas/chroma/lexers/m
github.com/alecthomas/chroma/lexers/s
github.com/alecthomas/chroma/lexers
github.com/alecthomas/chroma/quick
golang.org/x/text/encoding/htmlindex
golang.org/x/net/html/charset
github.com/tomwright/dasel/v2/storage
github.com/tomwright/dasel/v2/internal/command
github.com/tomwright/dasel/v2/cmd/dasel
</pre>

<p>Výsledkem překladu by měl být spustitelný soubor <strong>dasel</strong>:</p>

<pre>
$ <strong>whereis -b dasel</strong>
&nbsp;
dasel: /home/ptisnovs/go/bin/dasel
</pre>

<p>Jedná se přitom o pěkného &bdquo;bumbrlíčka&ldquo;, a to kvůli statickému
slinkování s&nbsp;celou řadou tranzitivně závislých balíčků:</p>

<pre>
$ <strong>ls -l -h /home/ptisnovs/go/bin/dasel</strong>
&nbsp;
-rwxrwxr-x 1 ptisnovs ptisnovs 14M Apr  8 08:40 /home/ptisnovs/go/bin/dasel
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dalším textu budeme předpokládat,
že cesta <strong>~/go/bin/dasel</strong> je umístěna na <strong>PATH</strong> a
tedy že je možné <i>Dasel</i> spouštět z&nbsp;libovolného pracovního
adresáře.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Čtení informací ze souborů s&nbsp;formátem TOML</h2>

<p>V&nbsp;navazujících kapitolách si ukážeme základní funkce, které nástroj
<i>Dasel</i> uživatelům nabízí, na reálných konfiguračních souborech uložených
v&nbsp;několika podporovaných formátech. Začneme konfiguračním souborem, jenž
používá formát TOML. Tento soubor naleznete na adrese <a
href="https://github.com/tisnik/slides/blob/master/files/dasel/config.toml">https://github.com/tisnik/slides/blob/master/files/dasel/config.toml</a>:</p>

<pre>
<strong>[logging]</strong>
debug = true
log_level = "info"
logging_to_cloud_watch_enabled = false
&nbsp;
<strong>[kafka_broker]</strong>
enabled = true
address = "kafka:29092" <i>#provide in deployment env or as secret</i>
security_protocol = "PLAINTEXT"
cert_path = "not-set"
sasl_mechanism = "PLAIN"
sasl_username = "not-used"
sasl_password = "not-used"
topic = "platform.notifications.ingress" <i>#provide in deployment env or as secret</i>
timeout = "60s"
likelihood_threshold = 0
impact_threshold = 0
severity_threshold = 0
total_risk_threshold = 2
event_filter = "totalRisk &gt;= totalRiskThreshold"
tag_filter_enabled = false
tags = []
<i># valid units are SQL epoch time units: months days hours minutes seconds"</i>
<i># set to empty string "" or 0 to disable</i>
cooldown = "1 week"
&nbsp;
<strong>[service_log]</strong>
client_id = "a-service-id"
client_secret = "a-secret"
created_by = "service-account-service"
username ="service-username"
token_url = ""
enabled = false
url = "https://api.foobar.com/api/service_logs/v1/"
timeout = "15s"
likelihood_threshold = 0
impact_threshold = 0
severity_threshold = 0
total_risk_threshold = 0
event_filter = "totalRisk &gt;= totalRiskThreshold"
tag_filter_enabled = true
tags = ["osd_customer"]
<i># valid units are SQL epoch time units: months days hours minutes seconds"</i>
<i># set to empty string "" or "0" to disable</i>
cooldown = "1 week"
&nbsp;
<strong>[storage]</strong>
db_driver = "postgres"
pg_username = "postgres" <i>#provide in deployment env or as secret</i>
pg_password = "postgres" <i>#provide in deployment env or as secret</i>
pg_host = "localhost" <i>#provide in deployment env or as secret</i>
pg_port = 5432 <i>#provide in deployment env or as secret</i>
pg_db_name = "notification" <i>#provide in deployment env or as secret</i>
pg_params = "sslmode=disable"
log_sql_queries = true
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že kromě rozdělení
atributů do sekcí je možné do souborů TOML zapisovat i poznámky.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příklady jednoduchých dotazů</h2>

<p>Vyzkoušejme si nyní některé základní vlastnosti poskytované nástrojem
<i>Dasel</i>. Dotazovací jazyk je do značné míry podobný jazyku, s&nbsp;nímž
jsme se seznámili <a
href="https://www.root.cz/clanky/zpracovani-dat-reprezentovanych-ve-formatu-json-nastrojem-jq/">v&nbsp;článku
o nástroji <strong>jq</strong></a>. Nejprve si selektorem <strong>.</strong>
(tečka) necháme vypsat obsah celého souboru, přičemž se <i>Dasel</i> bude
snažit o jeho naformátování:</p>

<pre>
$ <strong>dasel -f config.toml "."</strong>
</pre>

<p>Výsledek:</p>

<pre>
[kafka_broker]
  address = "kafka:29092"
  cert_path = "not-set"
  cooldown = "1 week"
  enabled = true
  event_filter = "totalRisk &gt;= totalRiskThreshold"
  impact_threshold = 0
  likelihood_threshold = 0
  sasl_mechanism = "PLAIN"
  sasl_password = "not-used"
  sasl_username = "not-used"
  security_protocol = "PLAINTEXT"
  severity_threshold = 0
...
...
...
  total_risk_threshold = 0
  url = "https://api.foobar.com/api/service_logs/v1/"
  username = "service-username"
&nbsp;
[storage]
  db_driver = "postgres"
  log_sql_queries = true
  pg_db_name = "notification"
  pg_host = "localhost"
  pg_params = "sslmode=disable"
  pg_password = "postgres"
  pg_port = 5432
  pg_username = "postgres"
</pre>

<p>Podporován je ovšem i obarvený výstup (pozor na zápis &bdquo;colour&ldquo; a
nikoli &bdquo;color&ldquo;):</p>

<pre>
$ <strong>dasel --colour -f config.toml "."</strong>
</pre>

<p>Výstup:</p>

*** image ***
<p><i>Obrázek 1: Obarvený výstup ve formátu TOML.</i></p>

<p>Dále se pokusíme o přečtení jedné konkrétní sekce:</p>

<pre>
$ <strong>dasel -f config.toml "service_log"</strong>
</pre>

<p>Výsledek:</p>

<pre>
client_id = "a-service-id"
client_secret = "a-secret"
cooldown = "1 week"
created_by = "service-account-service"
enabled = false
event_filter = "totalRisk &gt;= totalRiskThreshold"
impact_threshold = 0
likelihood_threshold = 0
severity_threshold = 0
tag_filter_enabled = true
tags = ["osd_customer"]
timeout = "15s"
token_url = ""
total_risk_threshold = 0
url = "https://api.foobar.com/api/service_logs/v1/"
username = "service-username"
</pre>

<p>Přečíst můžeme i jeden vybraný atribut:</p>

<pre>
$ <strong>dasel -f config.toml "service_log.cooldown"</strong>
&nbsp;
1 week
</pre>

<p>Přečtení dalšího atributu:</p>

<pre>
$ <strong>dasel -f config.toml "kafka_broker.address"</strong>
&nbsp;
kafka:29092
</pre>

<p>A konečně se podívejme na výsledek snahy o přečtení neexistujícího
atributu:</p>

<pre>
$ <strong>dasel -f config.toml kafka_broker.address.port</strong>
&nbsp;
(nevypíše se nic, ani prázdný řádek)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Čtení informací ze souborů s&nbsp;formátem YAML</h2>

<p>Velmi často se setkáme i s&nbsp;konfiguračními soubory ve formátu YAML.
Příkladem může být následující soubor obsahující konfiguraci úlohy, která se
spustí na straně GitHubu po každé změně obsahu repositáře. Tato úloha pro
repositář vygeneruje stránky s&nbsp;dokumentací, které jsou poté dostupné přímo
na GitHubu (takzvané <i>GitHub pages</i>). Tento konfigurační soubor lze nalézt
na adrese <a
href="https://github.com/tisnik/slides/blob/master/files/dasel/gh-pages.yml">https://github.com/tisnik/slides/blob/master/files/dasel/gh-pages.yml</a>
a jeho obsah vypadá následovně:</p>

<pre>
name: Build and deploy Jekyll site to GitHub Pages
&nbsp;
on:
  push:
    branches:
      - master
&nbsp;
jobs:
  github-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.14.1'
      - name: Generate docgo
        run: make godoc
      - name: Generate Jekyll site
        uses: helaili/jekyll-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          jekyll_src: 'docs'
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Příklady jednoduchých dotazů</h2>

<p>Opět si vyzkoušejme získat nějaké informace, tentokrát ze souboru ve formátu
YAML. V&nbsp;prvním kroku se pokusíme o přeformátování souboru, tj.&nbsp;o
výběr všech objektů a jejich atributů:</p>

<pre>
$ <strong>dasel -f gh-pages.yml '.'</strong>
&nbsp;
jobs:
  github-pages:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14.1
    - name: Generate docgo
      run: make godoc
    - name: Generate Jekyll site
      uses: helaili/jekyll-action@v2
      with:
        jekyll_src: docs
        token: ${{ secrets.GITHUB_TOKEN }}
name: Build and deploy Jekyll site to GitHub Pages
"true":
  push:
    branches:
    - master
</pre>

<p>Obarvený výstup:</p>

<pre>
$ <strong>dasel --colour -f gh-pages.yml '.'</strong>
</pre>

*** image ***
<p><i>Obrázek 2: Obarvený výstup ve formátu YAML.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si zajímavé
&bdquo;vlastnosti&ldquo; a současně i chyby &ndash; klíč &bdquo;on&ldquo; byl
změněn na &bdquo;true&ldquo;, což je vlastnost YAMLu 1.1 (dnes již sice stará
verze, ovšem stále používaná), která je dodržována například i v&nbsp;knihovně
PyYaml (viz též <a
href="https://yaml.org/type/bool.html">specifikaci</a>).</div></p>

<p>Samozřejmě můžeme provést i výběr určitého objektu popř.&nbsp;vybraného
atributu tohoto objektu:</p>

<pre>
$ <strong>dasel -f gh-pages.yml ".jobs.github-pages.steps"</strong>
&nbsp;
- name: Checkout
  uses: actions/checkout@v2
- name: Setup Go
  uses: actions/setup-go@v2
  with:
    go-version: ^1.14.1
- name: Generate docgo
  run: make godoc
- name: Generate Jekyll site
  uses: helaili/jekyll-action@v2
  with:
    jekyll_src: docs
    token: ${{ secrets.GITHUB_TOKEN }}
</pre>

<p>Získat můžeme například i jména všech kroků, a to následujícím způsobem
&ndash; s&nbsp;využitím funkce <strong>all</strong>:</p>

<pre>
$ <strong>dasel -f gh-pages.yml '.jobs.github-pages.steps.all().name'</strong>
&nbsp;
Checkout
Setup Go
Generate docgo
Generate Jekyll site
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Filtrace na základě nepovinných atributů</h2>

<p>Poměrně často se setkáme s&nbsp;nutností získání hodnot nějakých atributů,
které však nejsou nastaveny pro všechny objekty v&nbsp;souborech YAML (TOML
atd.). Příkladem může být atribut <strong>uses</strong>, který není nastaven
vždy a proto pokus o přečtení hodnot tohoto atributu (atributů) nebude
úspěšný:</p>

<pre>
$ <strong>dasel -f gh-pages.yml '.jobs.github-pages.steps.all().uses' -w json</strong>
&nbsp;
(nic se nevypíše, tedy ani prázdný řádek)
</pre>

<p>V&nbsp;takovém případě musíme za jméno nepovinného atributu přidat otazník a
celý dotaz tedy může vypadat takto:</p>

<pre>
$ <strong>dasel -f gh-pages.yml '.jobs.github-pages.steps.all().uses?' -w json</strong>
</pre>

<p>Výsledek již bude odpovídat očekávání:</p>

<pre>
"actions/checkout@v2"
"actions/setup-go@v2"
"helaili/jekyll-action@v2"
</pre>

<p>Tato vlastnost je podporována nejenom u formátu YAML, a i u dalších formátů,
tedy i TOML apod. Opět si tedy tuto užitečnou vlastnost otestujeme:</p>

<pre>
$ <strong>dasel -f config.toml '.all().cooldown?'</strong>
&nbsp;
1 week
1 week
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Export výsledků do jiného formátu</h2>

<p>Jednou z&nbsp;velmi užitečných vlastností nástroje <i>Dasel</i> je jeho
schopnost provést export dat z&nbsp;jednoho podporovaného formátu do formátu
jiného. Příkladem může být převod zprávy uložené původně ve formátu JSON do
formátu TOML, který lze provést následovně (povšimněte si přepínače
<strong>--pretty</strong>, jenž zajistí tisk výsledku v&nbsp;naformátované a
dobře čitelné podobě):</p>

<pre>
$ <strong>dasel --pretty -f msg_with_schema.json -w toml</strong>
&nbsp;
[payload]
  ID = 1.0
  Name = "Linus"
  Surname = "Torvalds"
&nbsp;
[schema]
  fields = [{ field = "ID", optional = false, type = "int64" }, { field = "Name", optional = false, type = "string" }, { field = "Surname", optional = false, type = "string" }]
  optional = false
  type = "struct"
  version = 1.0
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;současné verzi Daselu není
podporován tisk atributu s&nbsp;více položkami na větší množství řádků, což je
konkrétně patrné u atributu <strong>fields</strong>.</div></p>

<p>Další konverzí, kterou si ukážeme, je převod konfiguračního souboru
z&nbsp;formátu YAML na formát JSON:</p>

<pre>
$ <strong>dasel -f gh-pages.yml -w json</strong>
&nbsp;
{
  "jobs": {
    "github-pages": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Setup Go",
          "uses": "actions/setup-go@v2",
          "with": {
            "go-version": "^1.14.1"
          }
        },
        {
          "name": "Generate docgo",
          "run": "make godoc"
        },
        {
          "name": "Generate Jekyll site",
          "uses": "helaili/jekyll-action@v2",
          "with": {
            "jekyll_src": "docs",
            "token": "${{ secrets.GITHUB_TOKEN }}"
          }
        }
      ]
    }
  },
  "name": "Build and deploy Jekyll site to GitHub Pages",
  "true": {
    "push": {
      "branches": [
        "master"
      ]
    }
  }
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Sekvence vs. seznam (pole) hodnot</h2>

<p>Při použití nástroje <i>Dasel</i> je možné kombinovat selekci (filtraci)
s&nbsp;výstupem do jiného (zvoleného) formátu. Například následující příkaz
zajistí, že se vygeneruje seznam (pole) obsahující objekty typu
&bdquo;step&ldquo; (resp.&nbsp;přesněji řečeno jejich atributy):</p>

<pre>
$ <strong>dasel -f gh-pages.yml '.jobs.github-pages.steps' -w json</strong>
</pre>

<p>Nyní bude výsledek vypadat takto:</p>

<pre>
[
  {
    "name": "Checkout",
    "uses": "actions/checkout@v2"
  },
  {
    "name": "Setup Go",
    "uses": "actions/setup-go@v2",
    "with": {
      "go-version": "^1.14.1"
    }
  },
  {
    "name": "Generate docgo",
    "run": "make godoc"
  },
  {
    "name": "Generate Jekyll site",
    "uses": "helaili/jekyll-action@v2",
    "with": {
      "jekyll_src": "docs",
      "token": "${{ secrets.GITHUB_TOKEN }}"
    }
  }
]
</pre>

<p>V&nbsp;některých případech, typicky při použití funkce
<strong>all()</strong> ovšem bude výsledkem ne jednotlivý objekt, ale sekvence
objektů (ovšem nikoli pole nebo seznam):</p>

<pre>
$ <strong>dasel -f gh-pages.yml '.jobs.github-pages.steps.all()' -w json</strong>
&nbsp;
{
  "name": "Checkout",
  "uses": "actions/checkout@v2"
}
{
  "name": "Setup Go",
  "uses": "actions/setup-go@v2",
  "with": {
    "go-version": "^1.14.1"
  }
}
{
  "name": "Generate docgo",
  "run": "make godoc"
}
{
  "name": "Generate Jekyll site",
  "uses": "helaili/jekyll-action@v2",
  "with": {
    "jekyll_src": "docs",
    "token": "${{ secrets.GITHUB_TOKEN }}"
  }
}
</pre>

<p><div class="rs-tip-major">Poznámka: nejedná se tedy o validní JSON; spíše o
sekvenci validních JSONů.</div></p>

<p>Můžeme jít ještě dále a získat sekvenci řetězcových atributů (opět se
nejedná o validní JSON):</p>

<pre>
$ <strong>dasel -f gh-pages.yml '.jobs.github-pages.steps.all().name' -w json</strong>
&nbsp;
"Checkout"
"Setup Go"
"Generate docgo"
"Generate Jekyll site"
</pre>

<p>Podobný příklad, ovšem nyní vracející obsah původních objektů uložených za
sebou v&nbsp;sekvenci:</p>

<pre>
$ <strong>dasel -f config.toml '.all()' -w json</strong>
&nbsp;
{
  "client_id": "a-service-id",
  "client_secret": "a-secret",
  "cooldown": "1 week",
  "created_by": "service-account-service",
  "enabled": false,
  "event_filter": "totalRisk &gt;= totalRiskThreshold",
  "impact_threshold": 0,
  "likelihood_threshold": 0,
  "severity_threshold": 0,
  "tag_filter_enabled": true,
  "tags": [
    "osd_customer"
  ],
  "timeout": "15s",
  "token_url": "",
  "total_risk_threshold": 0,
  "url": "https://api.foobar.com/api/service_logs/v1/",
  "username": "service-username"
}
{
  "db_driver": "postgres",
  "log_sql_queries": true,
  "pg_db_name": "notification",
  "pg_host": "localhost",
  "pg_params": "sslmode=disable",
  "pg_password": "postgres",
  "pg_port": 5432,
  "pg_username": "postgres"
}
{
  "debug": true,
  "log_level": "info",
  "logging_to_cloud_watch_enabled": false
}
{
  "address": "kafka:29092",
  "cert_path": "not-set",
  "cooldown": "1 week",
  "enabled": true,
  "event_filter": "totalRisk &gt;= totalRiskThreshold",
  "impact_threshold": 0,
  "likelihood_threshold": 0,
  "sasl_mechanism": "PLAIN",
  "sasl_password": "not-used",
  "sasl_username": "not-used",
  "security_protocol": "PLAINTEXT",
  "severity_threshold": 0,
  "tag_filter_enabled": false,
  "tags": [],
  "timeout": "60s",
  "topic": "platform.notifications.ingress",
  "total_risk_threshold": 2
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Čtení informací ze souborů s&nbsp;formátem XML</h2>

<p>Zpracovávat lze pochopitelně i data uložená do formátu XML. Pro ilustraci
použijeme soubor, který byl <a
href="https://www.root.cz/clanky/automaticke-vytvoreni-dokumentace-k-databazi-s-vyuzitim-nastroje-schemaspy/">vytvořen
nástrojem SchemaSpy</a> a obsahuje popis schématu relační databáze. Pro účely
dnešního článku byl soubor zkrácen tak, že popisuje pouze několik tabulek a
nikoli celé schéma. Jeho obsah naleznete na adrese <a
href="https://github.com/tisnik/slides/blob/master/files/dasel/notification.public.xml">https://github.com/tisnik/slides/blob/master/files/dasel/notification.public.xml</a>:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;database name="notification" schema="public" type="PostgreSQL - 9.6.10"&gt;
   &lt;sequences&gt;
      &lt;sequence increment="1" name="read_errors_error_id_seq" startValue="1"/&gt;
   &lt;/sequences&gt;
   &lt;tables&gt;
      &lt;table name="event_targets" numRows="2" remarks="specification of all event targets currently supported" schema="public" type="TABLE"&gt;
         &lt;column autoUpdated="false" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="int4" typeCode="4"&gt;
            &lt;child column="event_type_id" foreignKey="reported_event_type_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="reported"/&gt;
         &lt;/column&gt;
         &lt;column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/&gt;
         &lt;column autoUpdated="false" defaultValue="null" digits="0" id="2" name="metainfo" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/&gt;
         &lt;primaryKey column="id" sequenceNumberInPK="1"/&gt;
         &lt;index name="event_targets_pkey" unique="true"&gt;
            &lt;column ascending="true" name="id"/&gt;
         &lt;/index&gt;
         &lt;index name="event_targets_metainfo_key" unique="true"&gt;
            &lt;column ascending="true" name="metainfo"/&gt;
         &lt;/index&gt;
         &lt;index name="event_targets_name_key" unique="true"&gt;
            &lt;column ascending="true" name="name"/&gt;
         &lt;/index&gt;
      &lt;/table&gt;
      &lt;table name="migration_info" numRows="1" remarks="information about the latest DB schema and migration status" schema="public" type="TABLE"&gt;
         &lt;column autoUpdated="false" defaultValue="null" digits="0" id="0" name="version" nullable="false" remarks="" size="10" type="int4" typeCode="4"/&gt;
      &lt;/table&gt;
      &lt;table name="states" numRows="4" remarks="states for each row stored in reported table" schema="public" type="TABLE"&gt;
         &lt;column autoUpdated="false" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="XXXXXXXXX" size="10" type="int4" typeCode="4"&gt;
            &lt;child column="state" foreignKey="fk_state" implied="false" onDeleteCascade="false" schema="public" table="reported"/&gt;
         &lt;/column&gt;
         &lt;column autoUpdated="false" defaultValue="null" digits="0" id="1" name="value" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/&gt;
         &lt;column autoUpdated="false" defaultValue="null" digits="0" id="2" name="comment" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/&gt;
         &lt;primaryKey column="id" sequenceNumberInPK="1"/&gt;
         &lt;index name="states_pkey" unique="true"&gt;
            &lt;column ascending="true" name="id"/&gt;
         &lt;/index&gt;
      &lt;/table&gt;
   &lt;/tables&gt;
&lt;/database&gt;
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Ukázkové příklady</h2>

<p>Podívejme se nyní na několik demonstračních příkladů, které ukazují způsob
zpracování XML souborů.</p>

<p>Pouze pretty-printing obsahu celého souboru:</p>

<pre>
$ <strong>dasel -f notification.public.xml "."</strong>
&nbsp;
&lt;database name="notification" schema="public" type="PostgreSQL - 9.6.10"&gt;
  &lt;sequences&gt;
    &lt;sequence increment="1" name="read_errors_error_id_seq" startValue="1"/&gt;
  &lt;/sequences&gt;
  &lt;tables&gt;
    &lt;table name="event_targets" numRows="2" remarks="specification of all event targets currently supported" schema="public" type="TABLE"&gt;
      &lt;column autoUpdated="false" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="int4" typeCode="4"&gt;
        &lt;child column="event_type_id" foreignKey="reported_event_type_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="reported"/&gt;
      &lt;/column&gt;
      ...
      ...
      ...
</pre>

<p>Pretty printing s&nbsp;obarvením syntaxe:</p>

<pre>
$ <strong>dasel --colour -f notification.public.xml "."</strong>
</pre>

*** image ***
<p><i>Obrázek 3: Obarvený výstup ve formátu XML.</i></p>

<p>Získání informací o tabulkách, nikoli o dalších objektech uložených
v&nbsp;databázi (sekvence atd.). Povšimněte si, že aby vznikl korektní XML
strom, bylo nutné přidat uzel <strong>doc</strong>:</p>

<pre>
$ <strong>dasel -f notification.public.xml ".database.tables"</strong>
&nbsp;
&lt;doc&gt;
  &lt;table name="event_targets" numRows="2" remarks="specification of all event targets currently supported" schema="public" type="TABLE"&gt;
    &lt;column autoUpdated="false" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="int4" typeCode="4"&gt;
      &lt;child column="event_type_id" foreignKey="reported_event_type_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="reported"/&gt;
    &lt;/column&gt;
    &lt;column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/&gt;
    &lt;column autoUpdated="false" defaultValue="null" digits="0" id="2" name="metainfo" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/&gt;
    &lt;index name="event_targets_pkey" unique="true"&gt;
      &lt;column ascending="true" name="id"/&gt;
    &lt;/index&gt;
    &lt;index name="event_targets_metainfo_key" unique="true"&gt;
      &lt;column ascending="true" name="metainfo"/&gt;
    &lt;/index&gt;
    &lt;index name="event_targets_name_key" unique="true"&gt;
      &lt;column ascending="true" name="name"/&gt;
    &lt;/index&gt;
    &lt;primaryKey column="id" sequenceNumberInPK="1"/&gt;
  &lt;/table&gt;
  &lt;table name="migration_info" numRows="1" remarks="information about the latest DB schema and migration status" schema="public" type="TABLE"&gt;
    &lt;column autoUpdated="false" defaultValue="null" digits="0" id="0" name="version" nullable="false" remarks="" size="10" type="int4" typeCode="4"/&gt;
  &lt;/table&gt;
  &lt;table name="states" numRows="4" remarks="states for each row stored in reported table" schema="public" type="TABLE"&gt;
    &lt;column autoUpdated="false" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="XXXXXXXXX" size="10" type="int4" typeCode="4"&gt;
      &lt;child column="state" foreignKey="fk_state" implied="false" onDeleteCascade="false" schema="public" table="reported"/&gt;
    &lt;/column&gt;
    &lt;column autoUpdated="false" defaultValue="null" digits="0" id="1" name="value" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/&gt;
    &lt;column autoUpdated="false" defaultValue="null" digits="0" id="2" name="comment" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/&gt;
    &lt;index name="states_pkey" unique="true"&gt;
      &lt;column ascending="true" name="id"/&gt;
    &lt;/index&gt;
    &lt;primaryKey column="id" sequenceNumberInPK="1"/&gt;
  &lt;/table&gt;
&lt;/doc&gt;
</pre>


<pre>
$ <strong>dasel -f notification.public.xml -w json | more</strong>
&nbsp;
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Přidání nových atributů do souborů ve formátu TOML</h2>

<p>Velmi užitečnou vlastností, kterou nástroj <i>Dasel</i> uživatelům nabízí,
je možnost přidání dalších atributů do zpracovávaných datových či
konfiguračních souborů. Pro tento účel slouží příkaz nazvaný
<strong>put</strong>, přičemž je nutné přepínačem <strong>-t</strong>
specifikovat typ atributu a přepínačem <strong>-v</strong> jeho hodnotu
popř.&nbsp;dvojici hodnota+klíč (v&nbsp;tomto pořadí!). Mezi základní
podporované typy patří skalární typy <strong>bool</strong>,
<strong>int</strong> a <strong>number</strong> (v&nbsp;podstatě typ
<i>float</i>) a referenční typy <strong>array</strong> a
<strong>object</strong>.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Přidání globálního atributu</h2>

<p>Příkaz <strong>put</strong> mění obsah zpracovávaného souboru, takže si
nejdříve vytvoříme jeho kopii:</p>

<pre>
$ <strong>cp config.toml config2.toml</strong>
</pre>

<p>Do souboru <strong>config2.toml</strong> nyní přidáme nový globální atribut
nazvaný &bdquo;priority_threshold&ldquo; a nastavíme mu celočíselnou hodnotu
1:</p>

<pre>
$ <strong>dasel put -f config2.toml -t int -v 1 "priority_threshold"</strong>
</pre>

<p>Výsledkem výše uvedeného příkazu bude modifikovaný soubor
<strong>config2.toml</strong>, který bude skutečně obsahovat nový globální
atribut (zobrazený je hned na prvním řádku):</p>

<pre>
priority_threshold = 1
&nbsp;
[kafka_broker]
  address = "kafka:29092"
  cert_path = "not-set"
  cooldown = "1 week"
  enabled = true
  event_filter = "totalRisk &gt;= totalRiskThreshold"
  impact_threshold = 0
  likelihood_threshold = 0
  sasl_mechanism = "PLAIN"
  sasl_password = "not-used"
  sasl_username = "not-used"
  security_protocol = "PLAINTEXT"
  severity_threshold = 0
  tag_filter_enabled = false
  tags = []
  timeout = "60s"
  topic = "platform.notifications.ingress"
  total_risk_threshold = 2
&nbsp;
[logging]
  debug = true
  log_level = "info"
  logging_to_cloud_watch_enabled = false
&nbsp;
[service_log]
  client_id = "a-service-id"
  client_secret = "a-secret"
  cooldown = "1 week"
  created_by = "service-account-service"
  enabled = false
  event_filter = "totalRisk &gt;= totalRiskThreshold"
  impact_threshold = 0
  likelihood_threshold = 0
  severity_threshold = 0
  tag_filter_enabled = true
  tags = ["osd_customer"]
  timeout = "15s"
  token_url = ""
  total_risk_threshold = 0
  url = "https://api.foobar.com/api/service_logs/v1/"
  username = "service-username"
&nbsp;
[storage]
  db_driver = "postgres"
  log_sql_queries = true
  pg_db_name = "notification"
  pg_host = "localhost"
  pg_params = "sslmode=disable"
  pg_password = "postgres"
  pg_port = 5432
  pg_username = "postgres"
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přidání atributu do uloženého objektu</h2>

<p>Samozřejmě je možné přidat nový atribut do již existujícího souboru.
V&nbsp;tomto případě se použije stejná syntaxe, jako při výběru (selekci)
atributu či atributů &ndash; využije se klasická &bdquo;tečková notace&ldquo;.
Vše je ukázáno na následujícím demonstračním příkladu, v&nbsp;němž opět dojde
k&nbsp;přidání atributu nazvaného &bdquo;priority_threshold&ldquo;
s&nbsp;hodnotou 1, tentokrát ovšem nikoli na globální úrovni, ale do objektu
&bdquo;service_log&ldquo;:</p>

<pre>
$ <strong>cp config.toml config3.toml</strong>
$ <strong>dasel put -f config3.toml -t int -v 42 "service_log.priority_threshold"</strong>
</pre>

<p>Výsledný soubor <strong>config3.toml</strong> by měl vypadat následovně.
Nový atribut je zvýrazněn:</p>

<pre>
[kafka_broker]
  address = "kafka:29092"
  cert_path = "not-set"
  cooldown = "1 week"
  enabled = true
  event_filter = "totalRisk &gt;= totalRiskThreshold"
  impact_threshold = 0
  likelihood_threshold = 0
  sasl_mechanism = "PLAIN"
  sasl_password = "not-used"
  sasl_username = "not-used"
  security_protocol = "PLAINTEXT"
  severity_threshold = 0
  tag_filter_enabled = false
  tags = []
  timeout = "60s"
  topic = "platform.notifications.ingress"
  total_risk_threshold = 2
&nbsp;
[logging]
  debug = true
  log_level = "info"
  logging_to_cloud_watch_enabled = false
&nbsp;
[service_log]
  client_id = "a-service-id"
  client_secret = "a-secret"
  cooldown = "1 week"
  created_by = "service-account-service"
  enabled = false
  event_filter = "totalRisk &gt;= totalRiskThreshold"
  impact_threshold = 0
  likelihood_threshold = 0
  <strong>priority_threshold = 42</strong>
  severity_threshold = 0
  tag_filter_enabled = true
  tags = ["osd_customer"]
  timeout = "15s"
  token_url = ""
  total_risk_threshold = 0
  url = "https://api.foobar.com/api/service_logs/v1/"
  username = "service-username"
&nbsp;
[storage]
  db_driver = "postgres"
  log_sql_queries = true
  pg_db_name = "notification"
  pg_host = "localhost"
  pg_params = "sslmode=disable"
  pg_password = "postgres"
  pg_port = 5432
  pg_username = "postgres"
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vymazání celé sekce ze souboru typu TOML</h2>

<p>Vzhledem k&nbsp;existenci operace <strong>put</strong> určené pro vložení
nového atributu do zpracovávaných souborů nás pravděpodobně nepřekvapí, že
<i>Dasel</i> podporuje i operaci <strong>delete</strong>, která nějaký atribut
či celý objekt naopak vymaže. V&nbsp;tomto případě se pochopitelně specifikuje
pouze selektor objektu či atributu, nikoli hodnota. Pokusme se například
vymazat celý objekt &bdquo;service_log&ldquo;:</p>

<pre>
$ <strong>cp config.toml config4.toml</strong>
$ <strong>dasel delete -f config4.toml "service_log"</strong>
</pre>

<p>Výsledkem bude tento zkrácený soubor:</p>

<pre>
[kafka_broker]
  address = "kafka:29092"
  cert_path = "not-set"
  cooldown = "1 week"
  enabled = true
  event_filter = "totalRisk &gt;= totalRiskThreshold"
  impact_threshold = 0
  likelihood_threshold = 0
  sasl_mechanism = "PLAIN"
  sasl_password = "not-used"
  sasl_username = "not-used"
  security_protocol = "PLAINTEXT"
  severity_threshold = 0
  tag_filter_enabled = false
  tags = []
  timeout = "60s"
  topic = "platform.notifications.ingress"
  total_risk_threshold = 2
&nbsp;
[logging]
  debug = true
  log_level = "info"
  logging_to_cloud_watch_enabled = false
&nbsp;
[storage]
  db_driver = "postgres"
  log_sql_queries = true
  pg_db_name = "notification"
  pg_host = "localhost"
  pg_params = "sslmode=disable"
  pg_password = "postgres"
  pg_port = 5432
  pg_username = "postgres"
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Vymazání jednoho atributu ze souboru TOML</h2>

<p>Nástroj <i>Dasel</i> pochopitelně umožňuje i vymazání jediného atributu, což
je opět vlastnost, kterou si nejlépe ukážeme na souboru
<strong>config.toml</strong>. Nejprve si vytvoříme kopii tohoto souboru a
posléze z&nbsp;v&nbsp;něm uložených dat vymažeme atribut &bdquo;debug&ldquo;
objektu &bdquo;logging&ldquo;:</p>

<pre>
$ <strong>cp config.toml config5.toml</strong>
$ <strong>dasel delete -f config5.toml "logging.debug"</strong>
</pre>

<p>Výsledek by měl vypadat následovně:</p>

<pre>
[kafka_broker]
  address = "kafka:29092"
  cert_path = "not-set"
  cooldown = "1 week"
  enabled = true
  event_filter = "totalRisk &gt;= totalRiskThreshold"
  impact_threshold = 0
  likelihood_threshold = 0
  sasl_mechanism = "PLAIN"
  sasl_password = "not-used"
  sasl_username = "not-used"
  security_protocol = "PLAINTEXT"
  severity_threshold = 0
  tag_filter_enabled = false
  tags = []
  timeout = "60s"
  topic = "platform.notifications.ingress"
  total_risk_threshold = 2
&nbsp;
[logging]
  log_level = "info"
  logging_to_cloud_watch_enabled = false
&nbsp;
[service_log]
  client_id = "a-service-id"
  client_secret = "a-secret"
  cooldown = "1 week"
  created_by = "service-account-service"
  enabled = false
  event_filter = "totalRisk &gt;= totalRiskThreshold"
  impact_threshold = 0
  likelihood_threshold = 0
  severity_threshold = 0
  tag_filter_enabled = true
  tags = ["osd_customer"]
  timeout = "15s"
  token_url = ""
  total_risk_threshold = 0
  url = "https://api.foobar.com/api/service_logs/v1/"
  username = "service-username"
&nbsp;
[storage]
  db_driver = "postgres"
  log_sql_queries = true
  pg_db_name = "notification"
  pg_host = "localhost"
  pg_params = "sslmode=disable"
  pg_password = "postgres"
  pg_port = 5432
  pg_username = "postgres"
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Zpracování tabulek uložených v&nbsp;souborech typu CSV</h2>

<p></p>

<pre>
Year,Winner
2022,C++
2021,Python
2020,Python
2019,C
2018,Python
2017,C
2016,Go
2015,Java
2014,JavaScript
2013,Transact-SQL
2012,Objective-C
2011,Objective-C
2010,Python
2009,Go
2008,C
2007,Python
2006,Ruby
2005,Java
2004,PHP
2003,C++
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Transformace dat do CSV</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;pracovními soubory</h2>

<p>Pracovní soubory ve formátu TOML, YAML, JSON, XML a CSV byly uloženy do
repositáře, jenž je dostupný na adrese <a
href="https://github.com/tisnik/slides/">https://github.com/tisnik/slides/</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář, můžete namísto toho
použít odkazy na jednotlivé soubory, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th>#</th><th>Soubor</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>config.toml</td><td>konfigurační soubor uložený ve formátu TOML</td><td><a href="https://github.com/tisnik/slides/blob/master/files/dasel/config.toml">https://github.com/tisnik/slides/blob/master/files/dasel/config.toml</a></td></tr>
<tr><td>2</td><td>config3.toml</td><td>upravený konfigurační soubor vygenerovaný nástrojem <i>Dasel</i></td><td><a href="https://github.com/tisnik/slides/blob/master/files/dasel/config3.toml">https://github.com/tisnik/slides/blob/master/files/dasel/config3.toml</a></td></tr>
<tr><td>3</td><td>config4.toml</td><td>upravený konfigurační soubor vygenerovaný nástrojem <i>Dasel</i></td><td><a href="https://github.com/tisnik/slides/blob/master/files/dasel/config4.toml">https://github.com/tisnik/slides/blob/master/files/dasel/config4.toml</a></td></tr>
<tr><td>4</td><td>config5.toml</td><td>upravený konfigurační soubor vygenerovaný nástrojem <i>Dasel</i></td><td><a href="https://github.com/tisnik/slides/blob/master/files/dasel/config5.toml">https://github.com/tisnik/slides/blob/master/files/dasel/config5.toml</a></td></tr>
<tr><td>5</td><td>gh-pages.yml</td><td>upravený konfigurační soubor vygenerovaný nástrojem <i>Dasel</i></td><td><a href="https://github.com/tisnik/slides/blob/master/files/dasel/gh-pages.yml">https://github.com/tisnik/slides/blob/master/files/dasel/gh-pages.yml</a></td></tr>
<tr><td>6</td><td>msg_with_schema.json</td><td>datový soubor uložený ve formátu JSON</td><td><a href="https://github.com/tisnik/slides/blob/master/files/dasel/msg_with_schema.json">https://github.com/tisnik/slides/blob/master/files/dasel/msg_with_schema.json</a></td></tr>
<tr><td>7</td><td>notification.public.xml</td><td>konfigurační soubor uložený ve formátu XML</td><td><a href="https://github.com/tisnik/slides/blob/master/files/dasel/notification.public.xml">https://github.com/tisnik/slides/blob/master/files/dasel/notification.public.xml</a></td></tr>
<tr><td>8</td><td>hall_of_fame.csv</td><td>tabulka uložená ve formátu CSV</td><td><a href="https://github.com/tisnik/slides/blob/master/files/dasel/hall_of_fame.csv">https://github.com/tisnik/slides/blob/master/files/dasel/hall_of_fame.csv</a></td></tr>
<table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Comma-Separated Values<br />
<a href="https://en.wikipedia.org/wiki/Comma-separated_values">https://en.wikipedia.org/wiki/Comma-separated_values</a>
</li>

<li>Tab-Separated Values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>Delimiter-separated values<br />
<a href="https://en.wikipedia.org/wiki/Delimiter-separated_values">https://en.wikipedia.org/wiki/Delimiter-separated_values</a>
</li>

<li>q - Run SQL directly on CSV or TSV files<br />
<a href="https://harelba.github.io/q/">https://harelba.github.io/q/</a>
</li>

<li>q - examples<br />
<a href="https://harelba.github.io/q/#examples">https://harelba.github.io/q/#examples</a>
</li>

<li>Repositář projektu q (GitHub)<br />
<a href="https://github.com/harelba/q">https://github.com/harelba/q</a>
</li>

<li>How to run SQL queries directly on CSV or TSV file<br />
<a href="https://computingforgeeks.com/run-sql-queries-directly-on-csv-files/">https://computingforgeeks.com/run-sql-queries-directly-on-csv-files/</a>
</li>

<li>Tab separated values<br />
<a href="https://datatables.net/extensions/buttons/examples/flash/tsv.html">https://datatables.net/extensions/buttons/examples/flash/tsv.html</a>
</li>

<li>csvkit 1.0.5 (dokumentace)<br />
<a href="https://csvkit.readthedocs.io/en/latest/#">https://csvkit.readthedocs.io/en/latest/#</a>
</li>

<li>Repositář projektu csvkit (GitHub)<br />
<a href="https://github.com/wireservice/csvkit">https://github.com/wireservice/csvkit</a>
</li>

<li>Příklad CSV schématu<br />
<a href="https://github.com/wireservice/ffs/blob/master/us/irs/irs_exempt_org_schema.csv">https://github.com/wireservice/ffs/blob/master/us/irs/irs_exempt_org_schema.csv</a>
</li>

<li>Repositář projektu jq (GitHub)<br />
<a href="https://github.com/stedolan/jq">https://github.com/stedolan/jq</a>
</li>

<li>GitHub stránky projektu jq<br />
<a href="https://stedolan.github.io/jq/">https://stedolan.github.io/jq/</a>
</li>

<li>5 modern alternatives to essential Linux command-line tools<br />
<a href="https://opensource.com/article/20/6/modern-linux-command-line-tools">https://opensource.com/article/20/6/modern-linux-command-line-tools</a>
</li>

<li>Návod k&nbsp;nástroji jq<br />
<a href="https://stedolan.github.io/jq/tutorial/">https://stedolan.github.io/jq/tutorial/</a>
</li>

<li>jq Manual (development version)<br />
<a href="https://stedolan.github.io/jq/manual/">https://stedolan.github.io/jq/manual/</a>
</li>

<li>Introducing JSON<br />
<a href="https://www.json.org/json-en.html">https://www.json.org/json-en.html</a>
</li>

<li>jq.py: a lightweight and flexible JSON processor<br />
<a href="https://github.com/mwilliamson/jq.py">https://github.com/mwilliamson/jq.py</a>
</li>

<li>Discover how to use jq, a JSON manipulation command line, with GeoJSON<br />
<a href="https://webgeodatavore.com/jq-json-manipulation-command-line-with-geojson.html">https://webgeodatavore.com/jq-json-manipulation-command-line-with-geojson.html</a>
</li>

<li>Reshaping JSON with jq<br />
<a href="https://programminghistorian.org/en/lessons/json-and-jq">https://programminghistorian.org/en/lessons/json-and-jq</a>
</li>

<li>Python bindings for jq<br />
<a href="https://pypi.org/project/jq/">https://pypi.org/project/jq/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Why use JSON over XML?<br />
<a href="https://www.sitepoint.com/json-vs-xml/">https://www.sitepoint.com/json-vs-xml/</a>
</li>

<li>XML and XPath<br />
<a href="https://www.w3schools.com/XML/xml_xpath.asp">https://www.w3schools.com/XML/xml_xpath.asp</a>
</li>

<li>XPath (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/XPath">https://en.wikipedia.org/wiki/XPath</a>
</li>

<li>RFC7159<br />
<a href="https://www.ietf.org/rfc/rfc7159.txt">https://www.ietf.org/rfc/rfc7159.txt</a>
</li>

<li>The Art of Unix Programming - DSV Style<br />
<a href="https://www.linuxtopia.org/online_books/programming_books/art_of_unix_programming/ch05s02.html">https://www.linuxtopia.org/online_books/programming_books/art_of_unix_programming/ch05s02.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

