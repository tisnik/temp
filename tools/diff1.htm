<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nástroje pro porovnání obsahu dvou textových souborů</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Nástroj diff patří k základním utilitám, s níž se přímo či nepřímo setká většina administrátorů i vývojářů používajících Linux. Ovšem kromě diffu můžeme při porovnávání dvou souborů popř. i pro jejich synchronizaci použít další mnohdy velmi užitečné nástroje.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nástroje pro porovnání obsahu dvou textových souborů</a></p>
<p><a href="#k02">2. Klasický unixový nástroj <strong>diff</strong></a></p>
<p><a href="#k03">3. Způsoby zobrazení rozdílů mezi soubory nástrojem <strong>diff</strong></a></p>
<p><a href="#k04">4. Formáty, v&nbsp;nichž není zobrazen kontext</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k041">4.1 Výchozí formát</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k042">4.2 Formát pro RCS</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k043">4.3 Formát pro <strong>ed</strong>, <strong>vi</strong> či <strong>Vim</strong></a></p>
<p><a href="#k05">5. Formáty s&nbsp;volitelným kontextem</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k051">5.1 Základní formát s&nbsp;kontextem</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k052">5.2 Unifikovaný formát</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k053">5.3 Zobrazení rozdílů ve dvou sloupcích</a></p>
<p><a href="#k06">6. Vylepšujeme výstup z&nbsp;<strong>diffu</strong></a></p>
<p><a href="#k07">7. Filtr <strong>idiff</strong> aneb barevné zobrazení rozdílů</a></p>
<p><a href="#k08">8. Filtr <strong>diff-so-fancy</strong></a></p>
<p><a href="#k09">9. Použití filtru <strong>diff-so-fancy</strong> s&nbsp;GITem</a></p>
<p><a href="#k10">10. Filtr <strong>diffh</strong> určený pro vygenerování HTML stránky se zobrazením rozdílů</a></p>
<p><a href="#k11">11. Další utility pro porovnání souborů s&nbsp;textovým rozhraním</a></p>
<p><a href="#k12">12. Nástroj <strong>sdiff</strong></a></p>
<p><a href="#k13">13. Nástroj <strong>wdiff</strong></a></p>
<p><a href="#k14">14. Diff režim <strong>Vimu</strong></a></p>
<p><a href="#k15">15. Nástroj <strong>mcdiff</strong></a></p>
<p><a href="#k16">16. Utility s&nbsp;plnohodnotným GUI</a></p>
<p><a href="#k17">17. TkDiff</a></p>
<p><a href="#k18">18. xxdiff</a></p>
<p><a href="#k19">19. Další užitečné nástroje popsané příště</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nástroje pro porovnání obsahu dvou textových souborů</h2>

<p>Nedávno na Rootu vyšla <a
href="https://www.root.cz/zpravicky/jak-hledat-rozdily-v-textovych-souborech/">zprávička</a>
o článku s&nbsp;tématem, jak <a
href="https://www.maketecheasier.com/use-diff-compare-files-linux/">v&nbsp;Linuxu
hledat rozdíly v&nbsp;textových souborech</a>. Zmíněný článek se zabýval
základním nástrojem <strong>diff</strong> a taktéž aplikací <i>Meld</i>
s&nbsp;plnohodnotným grafickým uživatelským rozhraním. Ovšem porovnání dvou
souborů popř.&nbsp;i jejich synchronizace je tak často používaná operace, že
postupně vzniklo několik desítek dalších nástrojů, které buď doplňují možnosti
<strong>diffu</strong> (skvělý <a href="#k09">diff-so-fancy</a>), nebo je lze
použít zcela samostatně. V&nbsp;tomto článku si některé z&nbsp;těchto nástrojů
představíme.</p>

<p>Poznámka: samostatnou kapitolu tvoří utility pro třícestný merge. Těm se
budeme podrobněji věnovat příště.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Klasický unixový nástroj <strong>diff</strong></h2>

<p>První nástroj, o kterém se v&nbsp;tomto článku zmíníme, možná ani není nutné
čtenářům Rootu podrobně představovat, protože se s&nbsp;ním už pravděpodobně
setkali. Tento nástroj se jmenuje <strong>diff</strong> a jedním z&nbsp;důvodů,
proč se o něm zmiňujeme hned v&nbsp;úvodních kapitolách, je fakt, že první
verze <strong>diffu</strong> vznikla již na začátku sedmdesátých let minulého
století (v&nbsp;roce 1974 již například vyšla verze založená na stále
používaném <a
href="https://en.wikipedia.org/wiki/Hunt%E2%80%93McIlroy_algorithm">Hunt-McIlroyově
algoritmu</a>). Tento nástroj samozřejmě prošel poměrně dlouhým vývojem a
různými rozšířeními, ať se to již týká vlastního interního algoritmu pro
hledání rozdílů, tak i formátů výstupu, tj.&nbsp;způsobů, jakým
<strong>diff</strong> zobrazuje rozdíly mezi porovnávanými soubory.
V&nbsp;současné verzi dokáže <strong>diff</strong> porovnat dva soubory, obsah
dvou adresářů popř.&nbsp;rekurzivně procházet a navzájem porovnat zvolenou
dvojicí adresářů. Pokud výstup produkovaný <strong>diffem</strong> uložíme do
souboru, získáme tzv.&nbsp;<i>patch</i>, který je možné (například na jiném
počítači) aplikovat na původní soubor a vlastně tak znovu provést historii
editace (podle použitého formátu lze použít nástroje <strong>patch</strong>,
<strong>ed</strong>, <strong>vi</strong> či <strong>Vim</strong>).</p>

<p>Již v&nbsp;předchozím odstavci jsme se zmínili o tom, že současné verze
nástroje <strong>diff</strong> podporují několik způsobů zobrazení rozdílů mezi
dvěma soubory. Vyžadovaný formát se volí pomocí přepínačů zadaných na příkazové
řádce:</p>

<table>
<tr><th>Přepínač</th><th>Dlouhá verze</th><th>Význam</th></tr>
<tr><td>&nbsp;</td><td>--normal</td><td><a href="#k041">výchozí formát</a></td></tr>
<tr><td>-n</td><td>--rcs</td><td><a href="#kk042">formát používaný</a> v&nbsp;dnes již archaickém systému <a href="https://users.ninthfloor.org/~ashawley/rcs/tichy1985rcs/html/">RCS</a></td></tr>
<tr><td>-e</td><td>--ed</td><td>vytváří <a href="#k043">skript</a> spustitelný v&nbsp;editorech <a href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-2/#k03">ed</a>, <i>vi</i> a samozřejmě i <a href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-2/#k08">Vim</a></td></tr>
<tr><td>-c, -C</td><td>--context</td><td><a href="#k051">základní formát</a>, v&nbsp;němž se kromě změn zobrazuje i kontext</td></tr>
<tr><td>-u, -U</td><td>--unified</td><td>tzv.&nbsp;<a href="#k052">unifikovaný formát</a>, v&nbsp;němž se také zobrazuje kontext</td></tr>
<tr><td>-y</td><td>--side-by-side</td><td>zobrazení rozdílů mezi soubory <a href="#k053">ve dvou sloupcích</a></td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Způsoby zobrazení rozdílů mezi soubory nástrojem <strong>diff</strong></h2>

<p>Podívejme se nyní na způsob zobrazení rozdílů mezi dvěma verzemi jednoho
zdrojového souboru. Oba soubory, které se budou porovnávat, naleznete na
adresách:</p>

<ol>
<li><a href="https://github.com/tisnik/presentations/blob/master/diff/old.py">starší verze</a></li>
<li><a href="https://github.com/tisnik/presentations/blob/master/diff/new.py">novější verze</a></li>
</ol>

<p><a href="#k04">Nejprve</a> si popíšeme ty formáty, v&nbsp;nichž není
explicitně zobrazen kontext, tj.&nbsp;&bdquo;okolí změn&ldquo; a posléze si
ukážeme formáty, v&nbsp;nichž naopak kontext nalezneme. Kontext není důležitý
pouze pro čtenáře vytvořených rozdílových souborů, ale například i pro nástroj
<strong>patch</strong>, který dokáže změnu aplikovat i ve chvíli, kdy byl
soubor mezitím editován a došlo tedy například k&nbsp;posunu řádků apod.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Formáty, v&nbsp;nichž není zobrazen kontext</h2>

<p><a name="k041"></a></p>
<h3 id="k041">4.1 Výchozí formát</h3>

<p>Pokud nástroj <strong>diff</strong> spustíme jen se specifikací dvou
souborů, popř.&nbsp;souboru a adresáře, v&nbsp;němž se nachází soubor stejného
jména, dostaneme následující výstup:</p>

<pre>
105a106,109
&gt;     # three new lines
&gt;     # three new lines
&gt;     # three new lines
&gt; 
118,120d121
&lt;         # TODO: delete these three lines
&lt;         # TODO: delete these three lines
&lt;         # TODO: delete these three lines
125d125
&lt; @then('I should see 0 components')
127c127
&lt; def check_components(context, num=0, components='', ecosystem=''):
---
&gt; def check_components(context, num, components='', ecosystem=''):
131a132
&gt;     assert json_data is not None
133c134
&lt;     search_results = json_data['result']
---
&gt;     search_results = json_data['analysis']
</pre>

<p>Vidíme, že <strong>diff</strong> zobrazil pouze ty části souborů, které se
od sebe odlišují. Do těchto částí pak vložil přesné informace o tom,
k&nbsp;jakým změnám došlo. To je důležité, protože výsledek musí být strojově
(tudíž jednoznačně) zpracovatelný. Ve výstupu nalezneme tři typy příkazů,
přičemž každý příkaz obsahuje číslo řádku popř.&nbsp;rozsah změněných řádků,
dále jméno příkazu a potom číslo řádku (či rozsah řádků), ve druhém souboru.
Všechna čísla řádků odpovídají původním souborům. Mezi tři podporované příkazy
patří:</p>

<table>
<tr><th>Příkaz</th><th>Mnemotechnická pomůcka</th><th>Význam</th></tr>
<tr><td>a</td><td>append</td><td>rozdíl spočívá v&nbsp;přidaných řádcích ve druhém souboru</td></tr>
<tr><td>c</td><td>change</td><td>řádek či řádky byly změněny, následovat bude seznam rozdílů oddělený ---</td></tr>
<tr><td>d</td><td>delete</td><td>rozdíl spočívá v&nbsp;řádcích, které ve druhém souboru chybí</td></tr>
</table>

<p>Příklady:</p>

<table>
<tr><th>Celý příkaz</th><th>Význam</th></tr>
<tr><td>127c127</td><td>došlo ke změně na řádku 127</td></tr>
<tr><td>105a106,109</td><td>změna na řádku 105 (v&nbsp;prvním soubor), ve druhém souboru jsou nové čtyři řádky 106 až 109</td></tr>
<tr><td>125d125</td><td>ve druhém souboru chybí (oproti souboru prvnímu) řádek číslo 125</td></tr>
<tr><td>118,120d121</td><td>ve druhém souboru chybí (oproti souboru prvnímu) tři řádky 118 až 120</td></tr>
</table>



<p><a name="k042"></a></p>
<h3 id="k042">4.2 Formát pro RCS</h3>

<p>Ještě stručnější (a velmi těžce čitelný) je formát používaný v&nbsp;RCS. Ten
získáme jednoduše příkazem:</p>

<pre>
diff -n old.py new.py
</pre>

<p>Ve výstupu najdeme pouze dva typy příkazů, a to <strong>d</strong> (delete)
a <strong>a</strong> (append). Změna je tedy představována vymazáním řádku a
jeho nahrazením jiným řádkem. Každý příkaz navíc obsahuje i počitadlo
opakování, tj.&nbsp;kolik řádků se má vložit nebo vymazat:</p>

<pre>
a105 4
    # three new lines
    # three new lines
    # three new lines
&nbsp;
d118 3
d125 1
d127 1
a127 1
def check_components(context, num, components='', ecosystem=''):
a131 1
    assert json_data is not None
d133 1
a133 1
    search_results = json_data['analysis']
</pre>



<p><a name="k043"></a></p>
<h3 id="k043">4.3 Formát pro <strong>ed</strong>, <strong>vi</strong> či <strong>Vim</strong></h3>

<p>Z&nbsp;technického hlediska je zajímavější přepínač <strong>-e</strong>,
protože ten produkuje skripty, které je možné spustit jak v&nbsp;editoru
<strong>ed</strong> (ten velmi pravděpodobně máte nainstalovaný, i když jste ho
možná nikdy nepoužili), tak i ve Vimu. Na řádcích označených
<strong>&lt;Esc&gt;</strong> se nachází jediný znak &ndash; escape (kód 27
v&nbsp;ASCII), protože právě tímto znakem se v&nbsp;edu i Vimu ukončují příkazy
&bdquo;append&ldquo;, &bdquo;change&ldquo; i &bdquo;delete&ldquo;:</p>

<pre>
133c
    search_results = json_data['analysis']
<strong>&lt;Esc&gt;</strong>
131a
    assert json_data is not None
<strong>&lt;Esc&gt;</strong>
127c
def check_components(context, num, components='', ecosystem=''):
<strong>&lt;Esc&gt;</strong>
125d
118,120d
105a
    # three new lines
    # three new lines
    # three new lines
&nbsp;
<strong>&lt;Esc&gt;</strong>
</pre>

<p>Pokud si vytvoříte skript příkazem:</p>

<pre>
diff -n old.py new.py &gt; patch.vim
</pre>

<p>Je možné ve Vimu otevřít původní soubor <strong>old.py</strong> a pomocí
příkazu:</p>

<pre>
:source patch.vim
</pre>

<p>aplikovat jednotlivé editační příkazy uložené ve skriptu.</p>

<p>Popř.&nbsp;lze vše provést z&nbsp;příkazového řádku:</p>

<pre>
vim old.py -S patch.vim
</pre>

<p>Poznámka: ve skutečnosti je mnohem častější i praktičtější použití dále
popsaných formátů, které jsou zpracovatelné utilitou
<strong>patch</strong>.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Formáty s&nbsp;volitelným kontextem</h2>

<p><a href="#k04">Výše uvedené</a> tři formáty zobrazují pouze rozdíly mezi
soubory, ale nepřidávají do vytvořeného výstupu žádný kontext, tj.&nbsp;oblast
kódu, v&nbsp;níž ke změně došlo. Proto nejsou takové rozdílové soubory příliš
čitelné, což nám však ve skutečnosti nemusí příliš vadit, protože
<strong>diff</strong> podporuje i další výstupní formáty. Velkou předností
existence kontextu je fakt, že případné změny je možné aplikovat i ve chvíli,
kdy se (další editací) změní počet řádků nebo dojde k&nbsp;dalším změnám
v&nbsp;souboru, na který je <i>patch</i> aplikován (to se ovšem týká utility
<strong>patch</strong> a nikoli nástroje <strong>diff</strong>).</p>



<p><a name="k051"></a></p>
<h3 id="k051">5.1 Základní formát s&nbsp;kontextem</h3>

<p>Jedním ze základních formátů, který zobrazuje i kontextové informace, je
formát zapnutý přepínačem <strong>-c</strong>. Výstup při použití příkazu:</p>

<pre>
diff -c old.py new.py
</pre>

<p>vypadá značně odlišně, protože se namísto jednopísmenných příkazů do prvního
sloupce zapisují značky, které označují přidané či naopak smazané řádky
(z&nbsp;pohledu historie). Dále si povšimněte, že změny jsou (pokud je to
možné) sloučené do skupin pojmenovaných <i>hunk</i>. Každý <i>hunk</i> začíná
řádkem s&nbsp;hvězdičkami, za ním následují údaje o řádcích v&nbsp;prvním i
druhém souboru, jichž se hunk týká a poté jsou již jednotlivé řádky
z&nbsp;hunku vypsány. V&nbsp;prvním sloupci znak mezery znamená, že řádek nebyl
změněn, ! značí změněný řádek, - řádek vymazaný (chybí ve druhém souboru) a +
řádek přidaný (do druhého souboru oproti souboru prvnímu):</p>

<pre>
*** old.py   2018-01-23 17:19:26.424398470 +0100
--- new.py   2018-01-23 17:19:40.856322400 +0100
***************
*** 103,108 ****
--- 103,112 ----
&nbsp;
      use_token = parse_token_clause(token)
&nbsp;
+     # three new lines
+     # three new lines
+     # three new lines
+ 
      url = component_analysis_url(context, ecosystem, component, version)
&nbsp;
      for _ in range(timeout // sleep_amount):
***************
*** 115,136 ****
          elif status_code != 404:
              raise Exception('Bad HTTP status code {c}'.format(c=status_code))
          time.sleep(sleep_amount)
-         # TODO: delete these three lines
-         # TODO: delete these three lines
-         # TODO: delete these three lines
      else:
          raise Exception('Timeout waiting for the component analysis results')
&nbsp;
&nbsp;
- @then('I should see 0 components')
  @then('I should see {num:d} components ({components}), all from {ecosystem} ecosystem')
! def check_components(context, num=0, components='', ecosystem=''):
      """Check that the specified number of components can be found."""
      components = split_comma_separated_list(components)
&nbsp;
      json_data = context.response.json()
&nbsp;
!     search_results = json_data['result']
      assert len(search_results) == num
      for search_result in search_results:
          assert search_result['ecosystem'] == ecosystem
--- 119,137 ----
          elif status_code != 404:
              raise Exception('Bad HTTP status code {c}'.format(c=status_code))
          time.sleep(sleep_amount)
      else:
          raise Exception('Timeout waiting for the component analysis results')
&nbsp;
&nbsp;
  @then('I should see {num:d} components ({components}), all from {ecosystem} ecosystem')
! def check_components(context, num, components='', ecosystem=''):
      """Check that the specified number of components can be found."""
      components = split_comma_separated_list(components)
&nbsp;
      json_data = context.response.json()
+     assert json_data is not None
&nbsp;
!     search_results = json_data['analysis']
      assert len(search_results) == num
      for search_result in search_results:
          assert search_result['ecosystem'] == ecosystem
</pre>

<p>Namísto volby <strong>-c</strong> můžeme použít i volbu <strong>-C
číslo</strong>, kterou se určuje, kolik nezměněných řádků se má zahrnout do
jednotlivých hunků. Pokud budeme například vyžadovat pět řádků na začátku a na
konci, použijeme příkaz:</p>

<pre>
diff -C 5 old.py new.py
</pre>

<p>s&nbsp;následujícím výsledkem:</p>

<pre>
*** old.py      2018-01-23 17:19:26.424398470 +0100
--- new.py      2018-01-23 17:19:40.856322400 +0100
***************
*** 101,110 ****
--- 101,114 ----
      timeout = context.component_analysis_timeout  # in seconds
      sleep_amount = 10  # we don't have to overload the API with too many calls
&nbsp;  
      use_token = parse_token_clause(token)
&nbsp;   
+     # three new lines
+     # three new lines
+     # three new lines
+ 
      url = component_analysis_url(context, ecosystem, component, version)
 &nbsp;   
      for _ in range(timeout // sleep_amount):
          if use_token:
              status_code = requests.get(url, headers=authorization(context)).status_code
***************
*** 113,138 ****
          if status_code == 200:
              break
          elif status_code != 404:
              raise Exception('Bad HTTP status code {c}'.format(c=status_code))
          time.sleep(sleep_amount)
-         # TODO: delete these three lines
-         # TODO: delete these three lines
-         # TODO: delete these three lines
      else:
          raise Exception('Timeout waiting for the component analysis results')
  &nbsp;  
  &nbsp;  
- @then('I should see 0 components')
  @then('I should see {num:d} components ({components}), all from {ecosystem} ecosystem')
! def check_components(context, num=0, components='', ecosystem=''):
      """Check that the specified number of components can be found."""
      components = split_comma_separated_list(components)
  &nbsp;  
      json_data = context.response.json()
  &nbsp;  
!     search_results = json_data['result']
      assert len(search_results) == num
      for search_result in search_results:
          assert search_result['ecosystem'] == ecosystem
          assert search_result['name'] in components
  &nbsp;  
--- 117,139 ----
          if status_code == 200:
              break
          elif status_code != 404:
              raise Exception('Bad HTTP status code {c}'.format(c=status_code))
          time.sleep(sleep_amount)
      else:
          raise Exception('Timeout waiting for the component analysis results')
  &nbsp;  
  &nbsp;  
  @then('I should see {num:d} components ({components}), all from {ecosystem} ecosystem')
! def check_components(context, num, components='', ecosystem=''):
      """Check that the specified number of components can be found."""
      components = split_comma_separated_list(components)
  &nbsp;  
      json_data = context.response.json()
+     assert json_data is not None
  &nbsp;  
!     search_results = json_data['analysis']
      assert len(search_results) == num
      for search_result in search_results:
          assert search_result['ecosystem'] == ecosystem
          assert search_result['name'] in components
</pre>



<p><a name="k052"></a></p>
<h3 id="k052">5.2 Unifikovaný formát</h3>

<p>Pravděpodobně nejpoužívanějším formátem rozdílových souborů, který podporují
všechny moderní varianty <strong>diffu</strong>, je takzvaný unifikovaný
formát. Tento formát se povoluje přepínačem <strong>-u</strong>, takže volání
<strong>diffu</strong> může vypadat následovně:</p>

<pre>
diff -u old.py new.py
</pre>

<p>Výsledek vypadá odlišně od předchozího formátu. Především můžeme vidět, že
se informace o místu, v&nbsp;němž ke změně došlo, zapisují na jediný řádek
uvozený dvojicí znaků @@. Před čísly řádků je znak + či - podle toho, jakého
souboru se číslo týká (zda souboru prvního či druhého), číslo za čárkou značí
počet řádků v&nbsp;hunku (včetně kontextových řádků před a za změnou). Vložené
řádky začínají znakem + v&nbsp;prvním sloupci, řádky smazané znakem -. I pokud
na řádku došlo jen k&nbsp;nepatrné změně, je tato změna zaznamenána dvěma
operacemi: vymazáním původního řádku a vložením řádku s&nbsp;novým obsahem.
Díky tomu, že se kromě vlastních změněných řádků zobrazí i kontext (zde
konkrétně tři řádky před a za změnou), může utilita <strong>patch</strong>
aplikovat změny i ve chvíli, kdy byl soubor mezitím změněn:</p>

<pre>
--- old.py      2018-01-23 17:19:26.424398470 +0100
+++ new.py      2018-01-23 17:19:40.856322400 +0100
@@ -103,6 +103,10 @@
&nbsp;
     use_token = parse_token_clause(token)
&nbsp;
+    # three new lines
+    # three new lines
+    # three new lines
+
     url = component_analysis_url(context, ecosystem, component, version)
&nbsp;
     for _ in range(timeout // sleep_amount):
@@ -115,22 +119,19 @@
         elif status_code != 404:
             raise Exception('Bad HTTP status code {c}'.format(c=status_code))
         time.sleep(sleep_amount)
-        # TODO: delete these three lines
-        # TODO: delete these three lines
-        # TODO: delete these three lines
     else:
         raise Exception('Timeout waiting for the component analysis results')
&nbsp;
&nbsp;
-@then('I should see 0 components')
 @then('I should see {num:d} components ({components}), all from {ecosystem} ecosystem')
-def check_components(context, num=0, components='', ecosystem=''):
+def check_components(context, num, components='', ecosystem=''):
     """Check that the specified number of components can be found."""
     components = split_comma_separated_list(components)
&nbsp;
     json_data = context.response.json()
+    assert json_data is not None
&nbsp;
-    search_results = json_data['result']
+    search_results = json_data['analysis']
     assert len(search_results) == num
     for search_result in search_results:
         assert search_result['ecosystem'] == ecosystem
</pre>



<p><a name="k053"></a></p>
<h3 id="k053">5.3 Zobrazení rozdílů ve dvou sloupcích</h3>

<p>Posledním formátem zobrazení rozdílů nabízeným nástrojem
<strong>diff</strong> je formát, v&nbsp;němž se zobrazí obsah obou
porovnávaných souborů ve třech sloupcích, přičemž prostřední sloupec pouze
zobrazuje speciální znaky &gt;, &lt; a | pro určení typu rozdílu. Tento formát
se nastavuje přepínačem <strong>-y</strong> (s&nbsp;možností specifikace šířky
sloupců):</p>

<pre>
diff -y old.py new.py
</pre>

<p>Podívejme se na výsledek, který však byl zkrácený o shodné řádky. Povšimněte
si, jak se pomocí znaků &gt; a &lt; označují ty řádky, které byly přidány či
naopak vymazány. Změněné řádky jsou označeny znakem |:</p>

<pre>
    timeout = context.component_analysis_timeout  # in second       timeout = context.component_analysis_timeout  # in second
    sleep_amount = 10  # we don't have to overload the API wi       sleep_amount = 10  # we don't have to overload the API wi
&nbsp;
    use_token = parse_token_clause(token)                           use_token = parse_token_clause(token)
&nbsp;
                                                              &gt;          # three new lines
                                                              &gt;          # three new lines
                                                              &gt;          # three new lines
                                                              &gt;
    url = component_analysis_url(context, ecosystem, componen       url = component_analysis_url(context, ecosystem, componen
&nbsp;
    for _ in range(timeout // sleep_amount):                        for _ in range(timeout // sleep_amount):
        if use_token:                                                   if use_token:
            status_code = requests.get(url, headers=authoriza               status_code = requests.get(url, headers=authoriza
        else:                                                           else:
            status_code = requests.get(url).status_code                     status_code = requests.get(url).status_code
        if status_code == 200:                                          if status_code == 200:
            break                                                           break
        elif status_code != 404:                                        elif status_code != 404:
            raise Exception('Bad HTTP status code {c}'.format               raise Exception('Bad HTTP status code {c}'.format
        time.sleep(sleep_amount)                                        time.sleep(sleep_amount)
        # TODO: delete these three lines                      &lt;
        # TODO: delete these three lines                      &lt;
        # TODO: delete these three lines                      &lt;
    else:                                                           else:
        raise Exception('Timeout waiting for the component an           raise Exception('Timeout waiting for the component an
&nbsp;
&nbsp;
@then('I should see 0 components')                            &lt;
@then('I should see {num:d} components ({components}), all fr   @then('I should see {num:d} components ({components}), all fr
def check_components(context, num=0, components='', ecosystem | def check_components(context, num, components='', ecosystem='
    """Check that the specified number of components can be f       """Check that the specified number of components can be f
    components = split_comma_separated_list(components)             components = split_comma_separated_list(components)
&nbsp;
    json_data = context.response.json()                             json_data = context.response.json()
                                                              &gt;          assert json_data is not None
&nbsp;
    search_results = json_data['result']                      |     search_results = json_data['analysis']
    assert len(search_results) == num                               assert len(search_results) == num
    for search_result in search_results:                            for search_result in search_results:
        assert search_result['ecosystem'] == ecosystem                  assert search_result['ecosystem'] == ecosystem
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vylepšujeme výstup z&nbsp;<strong>diffu</strong></h2>

<p>Nástroj <strong>diff</strong> je již sám o sobě velmi užitečný a patří mezi
základní utility využívané (nejenom) při vývoji na unixových systémech (dalšími
velmi užitečnými nástroji jsou <strong>sed</strong>, <strong>grep</strong>,
<strong>patch</strong> atd.). To však neznamená, že by <strong>diff</strong>
nešel vylepšit. Existuje například poměrně velké množství utilit, jejichž cílem
je zjednodušit čtení výstupů <strong>diffu</strong>. V&nbsp;dalších kapitolách
se zaměříme na tři takové utility, které se jmenují <a href="#k07">idiff</a>,
<a href="#k08">diff-so-fancy</a> a konečně <a href="#k10">diffh</a>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Filtr <strong>idiff</strong> aneb barevné zobrazení rozdílů</h2>

<p>Velmi jednoduchým prográmkem, který do jisté míry dokáže zlepšit čitelnost
rozdílových souborů, je skript pojmenovaný <strong>idiff</strong>, který
naleznete na stránce <a
href="http://www.pixelbeat.org/scripts/idiff">http://www.pixelbeat.org/scripts/idiff</a>.
Překlad není zapotřebí provést, protože <strong>idiff</strong> je napsán
v&nbsp;shellu a je založen na nástrojích <strong>less</strong>,
<strong>sed</strong> a <strong>tput</strong>, které by již měly být
nainstalovány. Tento skript pracuje jako běžný filtr, tj.&nbsp;lze ho použít
například takto (pokud se <strong>idiff</strong> nachází v&nbsp;pracovním
adresáři a má nastaveno právo &bdquo;x&ldquo; pro uživatele):</p>

<pre>
diff -u old.py new.py | ./idiff
</pre>

<p>Možnosti skriptu jsou vidět na následující trojici screenshotů:</p>

<a href="https://www.root.cz/obrazek/319092/"><img src="https://i.iinfo.cz/images/311/diff1-1-prev.png" class="image-319092" alt="&#160;" height="246" width="370" /></a>
<p><i>Obrázek 1: Obarvený výstup při použití standardního formátu
<strong>diffu</strong>.</i></p>

<a href="https://www.root.cz/obrazek/319093/"><img src="https://i.iinfo.cz/images/311/diff1-2-prev.png" class="image-319093" alt="&#160;" height="270" width="285" /></a>
<p><i>Obrázek 2: Obarvený výstup při použití formátu s&nbsp;kontextem
(<strong>-c</strong>).</i></p>

<a href="https://www.root.cz/obrazek/319094/"><img src="https://i.iinfo.cz/images/311/diff1-3-prev.png" class="image-319094" alt="&#160;" height="270" width="298" /></a>
<p><i>Obrázek 3: Obarvený výstup při použití unifikovaného formátu
(<strong>-u</strong>). Pro zajímavost si porovnejte tento screenshot se
screenshotem číslo 4.</i></p>

<p>Skript <strong>idiff</strong> si samozřejmě můžete zkopírovat do adresáře,
který se nachází na <strong>PATH</strong>. Potom se k&nbsp;němu nemusí uvádět
cesta.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Filtr <strong>diff-so-fancy</strong></h2>

<p>Druhým filtrem, tentokrát již mnohem zajímavějším, je skript nazvaný
<strong>diff-so-fancy</strong>, který je naprogramovaný v&nbsp;Perlu a můžete
ho získat z&nbsp;Git repositáře <a
href="https://github.com/so-fancy/diff-so-fancy">https://github.com/so-fancy/diff-so-fancy</a>
(opět není zapotřebí provést žádný překlad, pouze umístění skriptu do adresáře
v&nbsp;PATH). Jméno tohoto skriptu je příhodné, protože
<strong>diff-so-fancy</strong> nejenom že zvýrazní rozdíly provedené
v&nbsp;rámci jednoho řádku (ty je jinak mnohdy složité najít), ale dokáže
upravit a především zpřehlednit i výstup z&nbsp;příkazu <strong>git
diff</strong> atd.</p>

<a href="https://www.root.cz/obrazek/319095/"><img src="https://i.iinfo.cz/images/311/diff1-4-prev.png" class="image-319095" alt="&#160;" height="270" width="303" /></a>
<p><i>Obrázek 4: Povšimněte si, jak <strong>diff-so-fancy</strong> dokáže
zvýraznit rozdíly provedené na jediném řádku (spodní polovina
screenshotu).</i></p>

<p>Pokud potřebujeme pouze zpřehlednit výstup z&nbsp;klasického
<strong>diffu</strong>, můžeme spojit možnosti obou filtrů, tj.&nbsp;provést
tento příkaz:</p>

<pre>
diff -u old.py new.py | idiff | diff-so-fancy
</pre>

<p>Jednodušší je si napsat příslušnou funkci představující nový příkaz shellu
do <strong>.bashrc</strong> do do <strong>.bash_profile</strong>:</p>

<pre>
function bestdiff() {
    diff -u $1 $2 | idiff | diff-so-fancy
}
</pre>

<a href="https://www.root.cz/obrazek/319096/"><img src="https://i.iinfo.cz/images/311/diff1-5-prev.png" class="image-319096" alt="&#160;" height="270" width="335" /></a>
<p><i>Obrázek 5: Ještě lépe jsou schopnosti skriptu v&nbsp;zobrazení změn
provedených v&nbsp;rámci jednoho řádku patrné u zobrazení rozdílů v&nbsp;běžném
textu (úvodní odstavec článku na Wikipedii o Linuxu).</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití filtru <strong>diff-so-fancy</strong> s&nbsp;GITem</h2>

<p>Filtr <strong>diff-so-fancy</strong> je určen pro spolupráci s&nbsp;GITem a
dokonce GIT používá i ve chvíli, kdy pouze mění výstup z&nbsp;běžného
<strong>diffu</strong> (čte informace o použitých barvách terminálu). Aby tento
filtr pracoval správně, je nutné do souboru <strong>~/.gitconfig</strong>
vložit nové řádky s&nbsp;konfigurací barev. Výchozí hodnoty, které můžete
připojit na konec GITovského konfiguračního souboru, vypadají následovně:</p>

<pre>
[color]
        ui = true
&nbsp;
[color "diff-highlight"]
        oldNormal = red bold
        oldHighlight = red bold 52
        newNormal = green bold
        newHighlight = green bold 22
&nbsp;
[color "diff"]
        meta = yellow
        frag = magenta bold
        commit = yellow bold
        old = red bold
        new = green bold
        whitespace = red reverse
</pre>

<p>Poté již můžeme použít například příkaz:</p>

<pre>
git diff --color | diff-so-fancy
</pre>

<p>Popř.&nbsp;změnit konfiguraci GITu tak, aby se
<strong>diff-so-fancy</strong> používal vždy (změny se opět zapíšou do souboru
<strong>~./gitconfig</strong>):</p>

<pre>
git config --global core.pager "diff-so-fancy | less --tabs=4 -RFX"
</pre>

<a href="https://www.root.cz/obrazek/319098/"><img src="https://i.iinfo.cz/images/311/diff1-7-prev.png" class="image-319098" alt="&#160;" height="110" width="370" /></a>
<p><i>Obrázek 7: Takto vypadá výstup příkazu <strong>git diff</strong> při
použití skriptu <strong>diff-so-fancy</strong>.</i></p>

<a href="https://www.root.cz/obrazek/319097/"><img src="https://i.iinfo.cz/images/311/diff1-6-prev.png" class="image-319097" alt="&#160;" height="270" width="325" /></a>
<p><i>Obrázek 8: Po vložení testovacího souboru do GIT repositáře se můžeme na
změny podívat i přes <strong>git diff</strong> (porovnejte se screenshotem
číslo 4).</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Filtr <strong>diffh</strong> určený pro vygenerování HTML stránky se zobrazením rozdílů</h2>

<p>Zatímco předchozí dva filtry upravovaly výstup <strong>diffu</strong>
takovým způsobem, aby se vylepšilo zobrazení na běžném textovém terminálu,
pracuje filtr nazvaný <strong>diffh</strong> odlišným způsobem, protože jeho
výstupem je HTML stránka se zvýrazněním rozdílů:</p>

<a href="https://www.root.cz/obrazek/319099/"><img src="https://i.iinfo.cz/images/311/diff1-8-prev.png" class="image-319099" alt="&#160;" height="192" width="370" /></a>
<p><i>Obrázek 9: Výstup generovaný nástrojem <strong>diffh</strong>.</i></p>

<p>Tento filtr je kupodivu naprogramovaný v&nbsp;jazyku C, takže pokud
<strong>diffh</strong> chybí v&nbsp;repositáři vaší distribuce, musíte si
provést překlad sami. Ve skutečnosti je to velmi jednoduché, protože má tento
nástroj jen minimální závislosti:</p>

<ol>
<li>Stáhněte zdrojové kódy z&nbsp;adresy <a href="https://sourceforge.net/projects/diffh/">https://sourceforge.net/projects/diffh/</a></li>
<li>Rozbalte tarball: <strong>tar xvfz diffh-0.3.2.tar.gz</strong></li>
<li>Ve vytvořeném adresáři spusťte <strong>./configure</strong></li>
<li>Následuje klasické <strong>make</strong></li>
<li>Výsledný binární soubor objevíte v&nbsp;adresáři <strong>src</strong></li>
</ol>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další utility pro porovnání souborů s&nbsp;textovým rozhraním</h2>

<p>Krátce se zmíním ještě o dalších utilitách, které slouží pro porovnání
souborů a které taktéž používají textové rozhraní, ať již &bdquo;pouze&ldquo;
výstup na konzoli či plnohodnotné TUI.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Nástroj <strong>sdiff</strong></h2>

<p>Nástroj nazvaný <strong>sdiff</strong> (který pravděpodobně máte
nainstalovaný) získal svoje jméno proto, že dokáže porovnávat dvě verze souborů
&bdquo;side-by-side&ldquo;. Způsob zobrazení odpovídá příkazu <strong>diff
-y</strong>, ovšem důvod, proč se o tomto nástroji dnes vůbec zmiňuji, souvisí
s&nbsp;tím, že <strong>sdiff</strong> podporuje i interaktivní režim,
v&nbsp;němž může uživatel postupně procházet jednotlivými změnami a ty
aplikovat (schvaluje je) či přeskočit. Výstup produkovaný tímto nástrojem může
vypadat následovně:</p>

<pre>
@then('I should see 0 components')			      &lt;
@then('I should see {num:d} components ({components}), all fr	@then('I should see {num:d} components ({components}), all fr
def check_components(context, num=0, components='', ecosystem |	def check_components(context, num, components='', ecosystem='
    """Check that the specified number of components can be f	    """Check that the specified number of components can be f
    components = split_comma_separated_list(components)		    components = split_comma_separated_list(components)

    json_data = context.response.json()				    json_data = context.response.json()
							      &gt;	    assert json_data is not None

    search_results = json_data['result']		      |	    search_results = json_data['analysis']
    assert len(search_results) == num				    assert len(search_results) == num
    for search_result in search_results:			    for search_result in search_results:
        assert search_result['ecosystem'] == ecosystem		        assert search_result['ecosystem'] == ecosystem
        assert search_result['name'] in components		        assert search_result['name'] in components
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Nástroj <strong>wdiff</strong></h2>

<p>Jméno dalšího nástroje <strong>wdiff</strong> vzniklo ze slovního spojení
&bdquo;word diff&ldquo;. A skutečně &ndash; <strong>wdiff</strong> zobrazuje
rozdíly na úrovni jednotlivých slov a nikoli celých řádků. To nemá (alespoň
podle mého názoru) větší význam pro zdrojové kódy, protože se informace o
změnách ztratí ve změti dalších řádků; ostatně to můžete sami posoudit:</p>

<pre>
@then('I should see [-0 components')
@then('I should see-] {num:d} components ({components}), all from {ecosystem} ecosystem')
def check_components(context, [-num=0,-] {+num,+} components='', ecosystem=''):
    """Check that the specified number of components can be found."""
    components = split_comma_separated_list(components)
&nbsp;
    json_data = context.response.json()
    {+assert json_data is not None+}
&nbsp;
    search_results = [-json_data['result']-] {+json_data['analysis']+}
    assert len(search_results) == num
    for search_result in search_results:
        assert search_result['ecosystem'] == ecosystem
        assert search_result['name'] in components
</pre>

<p>Ovšem pokud potřebujete porovnat například dvě verze souboru README, může
být <strong>wdiff</strong> velmi užitečný. Podívejme se na ukázkový příklad
s&nbsp;prvními dvěma odstavci o Linuxu, které jsem získal z&nbsp;Wikipedie a
provedl v&nbsp;nich malé změny. Rozdíly mezi dvěma verzemi souboru se zobrazí
formou značek <strong>[- ... -]</strong> a <strong>{+ ... +}</strong>, které
jsem navíc zvýraznil tučně (větší změny by však již nebyly zobrazeny takto
přehledně):</p>

<pre>
Linux is a name that broadly denotes a family of free and <strong>[-closed-source-]</strong> <strong>{+open-source+}</strong> software
operating systems (OS) built around the Linux kernel. Typically, Linux is
packaged in a form known as <strong>{+a+}</strong> Linux distribution (or distro for short) for both
desktop and server use. The defining component of a Linux distribution is the
Linux kernel,[11] an operating system kernel first released on September 17,
1991, by Linus Torvalds.[12][13][14] Many Linux distributions use the word
"Linux" in their name. The Free Software Foundation uses the name GNU/Linux to
refer to the operating system family, as well as specific distributions, to
emphasize that most Linux distributions are not just the Linux kernel, and that
they have in common not only <strong>{+the+}</strong> kernel, but also numerous utilities and
libraries, a large proportion of which are from the GNU project. This has led
to some controversy.
&nbsp;
Linux was originally developed for personal computers based on the Intel x86
architecture, but has since been ported to more platforms than any other
operating system.[17] Because of the dominance of the Linux kernel-based
Android OS on smartphones, Linux has the largest installed base of all
general-purpose operating systems.[18] Linux is also the leading operating
system on servers and other big iron systems such as mainframe computers, and
the only OS used on TOP500 supercomputers (since November 2017, having before
gradually eliminated all competitors).[19][20] It is used by around 2.3% of
desktop computers.[21][22] The Chromebook, which runs the Linux kernel-based
Chrome OS, dominates the US K–12 education market and represents nearly <strong>[-12%-]</strong> <strong>{+20%+}</strong> of
the sub-$300 notebook sales in the US.[23] <strong>[-GNU/Linux-]</strong> <strong>{+Linux+}</strong> also runs on embedded
systems—devices whose operating system is typically built into the firmware and
is highly tailored to the system. This includes TiVo and similar <strong>{+DVR+}</strong> devices,
network routers, facility automation controls, televisions,[24][25] video game
consoles and smartwatches.[26] Many smartphones and tablet computers run
Android and other Linux derivatives.[27]
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Diff režim <strong>Vimu</strong></h2>

<p>Pro zobrazení rozdílů mezi dvěma verzemi souboru i pro jejich synchronizaci
je možné využít i interní nástroj zabudovaný do Vimu. Pokud se tento textový
editor spustí s&nbsp;parametrem <strong>-d</strong>, očekávají se za tímto
parametrem jména dvou souborů pro porovnání, popř.&nbsp;jméno souboru a jméno
adresáře, v&nbsp;němž se nachází soubor stejného jména:</p>

<pre>
vim -d old.py new.py
vim -d old.py ../test-sources/
</pre>

<p>V&nbsp;obou případech textový editor Vim oba soubory skutečně načte do
dvojice bufferů, ovšem režim zobrazení se změní takovým způsobem, že se pomocí
různých barev zvýrazní ty části souborů, které jsou odlišné. Navíc je možné
delší části, jež jsou v&nbsp;obou souborech stejné, &bdquo;zabalit&ldquo;
(klávesová zkratka <strong>zc</strong>).</p>

<a href="http://i.iinfo.cz/images/308/vim1-12.png"><img src="http://i.iinfo.cz/images/308/vim1-12-prev.png" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 10: Porovnávání dvou souborů při vertikálním rozdělení oken. Toto
rozdělení je vhodné použít v&nbsp;případě, že se jedná o zdrojové soubory
s&nbsp;krátkými řádky, popř.&nbsp;pokud máte širokoúhlý monitor.</i></p>

<p>Barevné zvýraznění změn je sice pěkná a užitečná vlastnost, ovšem to není
zdaleka vše, co Vim v&nbsp;&bdquo;režimu diff&ldquo; programátorům nabízí.
V&nbsp;tomto režimu jsou totiž k&nbsp;dispozici některé nové příkazy určené pro
řízenou synchronizaci mezi soubory. Mezi tyto příkazy patří především:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>[c</td><td>skok na začátek předchozího bloku se změnami</td></tr>
<tr><td>]c</td><td>skok na začátek následujícího bloku se změnami</td></tr>
<tr><td>dp</td><td>pokud se kurzor nachází na řádcích, které se v&nbsp;obou souborech odlišují, je změna z&nbsp;aktuálního souboru přenesena do souboru druhého</td></tr>
<tr><td>do</td><td>opak předchozího příkazu &ndash; získání změny z&nbsp;druhého souboru a přenesení této změny do souboru aktuálního (tj.&nbsp;do souboru, v&nbsp;němž se nachází textový kurzor)</td></tr>
<tr><td>:diffupdate</td><td>tento příkaz provede nové vyhodnocení rozdílů mezi oběma soubory, vhodné v&nbsp;případech, kdy se oba buffery rozsynchronizují (to se stává poměrně často)</td></tr>
</table>

<p>Příkazy <strong>dp</strong> a <strong>do</strong> lze použít i ve chvíli,
kdy je vybraný blok textu. V&nbsp;tomto případě se změna aplikuje pouze na
vybrané řádky, nikoli na celý blok změn.</p>

<a href="http://i.iinfo.cz/images/308/vim1-13.png"><img src="http://i.iinfo.cz/images/308/vim1-13-prev.png" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 11: Porovnávání dvou souborů při horizontálním rozdělení oken,
které je vhodné využít v případě, že porovnávané zdrojové kódy (nebo jiné
texty) obsahují dlouhé řádky.</i></p>

<a href="https://www.root.cz/obrazek/319100/"><img src="https://i.iinfo.cz/images/311/diff1-9-prev.png" class="image-319100" alt="&#160;" height="192" width="370" /></a>
<p><i>Obrázek 12: Zobrazení našeho testovacího souboru ve Vimu v&nbsp;režimu
rozpoznávání změn.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Nástroj <strong>mcdiff</strong></h2>

<p>Pokud preferujete použití nástroje pro zobrazení změn, který je založen na
textovém uživatelském rozhraní, může být jednou z&nbsp;dobrých voleb utilitka
nazvaná <strong>mcdiff</strong>, která je, podobně jako editor
<strong>mcedit</strong> nebo <a
href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/#k08">hexa
prohlížeče</a>, součástí správce souborů <i>Midnight Commander</i>. Použití
nástroje <strong>mcdiff</strong> je extrémně jednoduché &ndash; pouze ho
zavolejte a předejte mu dvojici souborů (resp.&nbsp;přesněji řečeno verzí téhož
souboru). Zobrazí se dva panely s&nbsp;obsahy obou verzí a uživateli jsou dány
k&nbsp;dispozici nástroje pro sloučení změn, vyhledávání v&nbsp;obou verzích
souboru atd. Klávesa pro sloučení změn se vždy vztahuje k&nbsp;prvnímu
viditelnému rozdílu.</p>

<a href="https://www.root.cz/obrazek/319101/"><img src="https://i.iinfo.cz/images/311/diff1-10-prev.png" class="image-319101" alt="&#160;" height="244" width="370" /></a>
<p><i>Obrázek 13: Integrovaná nápověda k&nbsp;nástroji
<strong>mcdiff</strong>.</i></p>

<a href="https://www.root.cz/obrazek/319102/"><img src="https://i.iinfo.cz/images/311/diff1-11-prev.png" class="image-319102" alt="&#160;" height="244" width="370" /></a>
<p><i>Obrázek 14: Zobrazení rozdílů v&nbsp;textových souborech.</i></p>

<a href="https://www.root.cz/obrazek/319103/"><img src="https://i.iinfo.cz/images/311/diff1-12-prev.png" class="image-319103" alt="&#160;" height="244" width="370" /></a>
<p><i>Obrázek 15: Nastavení vlastností porovnávače
<strong>mcdiff</strong>.</i></p>

<a href="https://www.root.cz/obrazek/319104/"><img src="https://i.iinfo.cz/images/311/diff1-13-prev.png" class="image-319104" alt="&#160;" height="202" width="370" /></a>
<p><i>Obrázek 16: Změna barvového palety a zobrazení našeho testovacího
souboru.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Utility s&nbsp;plnohodnotným GUI</h2>

<p>Následuje popis některých GUI aplikací pro zobrazení rozdílů mezi soubory a
popř.&nbsp;i pro slučování těchto souborů. V&nbsp;této oblasti se pravděpodobně
nejvíce používá <i>Meld</i> a <i>KDiff3</i>, ovšem i další utility mohou být
zajímavé. To se týká jak postaršího <a href="#k17">TkDiffu</a>, tak i méně
známé utilitky <a href="#k18">xxdiff</a>. O <a href="#k19">dalších
nástrojích</a> se zmíním ve druhé části článku.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. TkDiff</h2>

<p>Další nástroj, s&nbsp;nímž se v&nbsp;dnešním článku alespoň ve stručnosti
seznámíme, se jmenuje <i>TkDiff</i>. Jedná se o nástroj s&nbsp;grafickým
uživatelským rozhraním a jak již jeho název napovídá, používá pro svoje GUI
knihovnu <i>Tk</i>. Samotný <i>TkDiff</i> je naprogramován <a
href="https://www.root.cz/serialy/programovaci-jazyk-tcl/">v&nbsp;jazyku
TCL</a>, který již sice dnes v&nbsp;žádném případě nestojí na předních místech
<a href="https://www.tiobe.com/tiobe-index/">v&nbsp;žebříčku popularity
jazyků</a>, nicméně <i>TkDiff</i> je stále udržován a je ho možné provozovat
prakticky na jakémkoli systému, v&nbsp;němž je dvojice Tcl/Tk nainstalována (to
v&nbsp;Linuxu není problém, pro Windows existuje<a
href=https://www.activestate.com/activetcl"">ActiveTcl</a> atd. atd.). Pokud
samotný <i>TkDiff</i> nenaleznete v&nbsp;repositáři své distribuce, můžete si
ho stáhnout z&nbsp;adresy <a
href="https://sourceforge.net/projects/tkdiff/files/latest/download">https://sourceforge.net/projects/tkdiff/files/latest/download</a>,
rozbalit a přímo použít (žádná kompilace není nutná, protože TCL je čistý
interpret).</p>

<p>Nástroj <i>TkDiff</i> zobrazuje dvě verze souboru, dokáže přeskakovat mezi
jednotlivými částmi, které byly změněny (hunky), označovat tyto části a poté
provést operaci &bdquo;merge&ldquo;. Pokud začnete tento nástroj používat, je
nutné vědět, že se mezi změněnými částmi musíte přesouvat pomocí ikon se
šipkami a poté každou změnu odsouhlasit příslušným příkazem (ikona se zelenou
vlajkou). Jednotlivé schválené změny jsou reprezentovány novými tlačítky na
nástrojovém pruhu, takže se k&nbsp;nim můžete kdykoli vrátit. Po označení všech
změn, které chcete schválit, je možné provést operaci &bdquo;merge&ldquo;. Dále
je možné otevřít soubor obsahující informace o konfliktech (je generován
například Gitem, pokud dojde k&nbsp;problémům při pokusu o automatické sloučení
změn), ovšem jednu funkcionalitu současná verze postrádá &ndash; třícestný
merge. Zajímavé je, že předchozí verze <i>TkDiffu</i> tuto funkci měly
implementovanou. Pokud tedy potřebujete použít třícestný merge, který je
skutečně potřebný, je lepší se poohlédnout po jiném nástroji, například po
utilitě <i>Kdiff3</i>, kterou si popíšeme příště.</p>

<p>Podívejme se, jak vypadá uživatelské rozhraní tohoto nástroje při otevření
dvou verzí jednoho souboru:</p>

<a href="https://www.root.cz/obrazek/319105/"><img src="https://i.iinfo.cz/images/311/diff1-14-prev.png" class="image-319105" alt="&#160;" height="156" width="370" /></a>
<p><i>Obrázek 17: Porovnání textových souborů (plaintext).</i></p>

<a href="https://www.root.cz/obrazek/319106/"><img src="https://i.iinfo.cz/images/311/diff1-15-prev.png" class="image-319106" alt="&#160;" height="236" width="370" /></a>
<p><i>Obrázek 18: Porovnání našeho testovacího souboru (povšimněte si
scrollbaru s&nbsp;náhledem změn).</i></p>

<a href="https://www.root.cz/obrazek/319107/"><img src="https://i.iinfo.cz/images/311/diff1-16-prev.png" class="image-319107" alt="&#160;" height="233" width="370" /></a>
<p><i>Obrázek 19: Nastavení vlastností <strong>TkDiffu</strong>.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. xxdiff</h2>

<p>Poslední nástroj s&nbsp;grafickým uživatelským rozhraním, který si dnes
představíme a který pravděpodobně naleznete i v&nbsp;repositářích své Linuxové
distribuce, se jmenuje <i>xxdiff</i>. Tento relativně malý a na systémové
prostředky nenáročný nástroj sice není tak známý jako <i>Meld</i>, ovšem nabízí
podobné funkce a navíc je v&nbsp;něm možné velmi snadno provádět třícestný
merge, tj.&nbsp;porovnání a aplikování změn mezi třemi verzemi souborů (typicky
se jedná o společného předka, soubor změněný lokálně a soubor mezitím změněný
někým jiným). Utilitu <i>xxdiff</i> lze pro základní operace volat takto:</p>

<pre>
xxdiff old.py new.py
</pre>

<a href="https://www.root.cz/obrazek/319108/"><img src="https://i.iinfo.cz/images/311/diff1-17-prev.png" class="image-319108" alt="&#160;" height="270" width="351" /></a>
<p><i>Obrázek 20: Porovnání dvou verzí souboru (klasický dvoucestný
merge).</i></p>

<p>Popř.&nbsp;pokud budeme potřebovat provést třícestný merge, spustíme utilitu
<i>xdiff</i> následujícím způsobem:</p>

<pre>
xxdiff puvodni.py muj.py vzdalene_zmeneny.py
</pre>

<a href="https://www.root.cz/obrazek/319109/"><img src="https://i.iinfo.cz/images/311/diff1-18-prev.png" class="image-319109" alt="&#160;" height="193" width="370" /></a>
<p><i>Obrázek 21: Zobrazení tří verzí souboru při provádění třícestného
merge.</i></p>

<p>K&nbsp;této utilitě se ještě na chvíli vrátíme příště při popisu nástrojů,
které podporují provádění třícestného merge.</p>

<a href="https://www.root.cz/obrazek/319110/"><img src="https://i.iinfo.cz/images/311/diff1-19-prev.png" class="image-319110" alt="&#160;" height="270" width="165" /></a>
<p><i>Obrázek 22: Integrovaná nápověda k&nbsp;nástroji xxdiff.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Další užitečné nástroje popsané příště</h2>

<p>Ve druhé části tohoto článku si popíšeme několik dalších nástrojů
s&nbsp;plnohodnotným grafickým uživatelským rozhraním. Bude se jednat především
o <i>Meld</i> (pravděpodobně nejznámější nástroj z&nbsp;této kategorie), dále
pak o aplikaci <i>Diffuse</i> a samozřejmě nezapomeneme ani na
<i>KDiff3</i>.</p>

<a href="https://www.root.cz/obrazek/319111/"><img src="https://i.iinfo.cz/images/311/diff1-20-prev.png" class="image-319111" alt="&#160;" height="270" width="298" /></a>
<p><i>Obrázek 23: Dvoucestný merge našeho testovacího zdrojového kódu
v&nbsp;nástroji Meld.</i></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Comparing and Merging Files<br />
<a href="https://www.gnu.org/software/diffutils/manual/diffutils.html">https://www.gnu.org/software/diffutils/manual/diffutils.html</a>
</li>

<li>Three-way merge<br />
<a href="https://en.wikipedia.org/wiki/Merge_(version_control)#Three-way_merge">https://en.wikipedia.org/wiki/Merge_(version_control)#Three-way_merge</a>
</li>

<li>diff (1) - Linux Man Pages<br />
<a href="https://www.systutorials.com/docs/linux/man/1-diff/">https://www.systutorials.com/docs/linux/man/1-diff/</a>
</li>

<li>diff utility (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Diff_utility">https://en.wikipedia.org/wiki/Diff_utility</a>
</li>

<li>GNU Wdiff<br />
<a href="https://www.gnu.org/software/wdiff/">https://www.gnu.org/software/wdiff/</a>
</li>

<li>GNU wdiff Manual<br />
<a href="https://www.gnu.org/software/wdiff/manual/">https://www.gnu.org/software/wdiff/manual/</a>
</li>

<li>wdiff (1) - Linux Man Pages<br />
<a href="https://www.systutorials.com/docs/linux/man/1-wdiff/">https://www.systutorials.com/docs/linux/man/1-wdiff/</a>
</li>

<li>diff3 (1) - Linux Man Pages<br />
<a href="https://www.systutorials.com/docs/linux/man/1-diff3/">https://www.systutorials.com/docs/linux/man/1-diff3/</a>
</li>

<li>sdiff (1) - Linux Man Pages<br />
<a href="https://www.systutorials.com/docs/linux/man/1-sdiff/">https://www.systutorials.com/docs/linux/man/1-sdiff/</a>
</li>

<li>Stránky nástroje Meld<br />
<a href="http://meldmerge.org/">http://meldmerge.org/</a>
</li>

<li>Meld na stránkách GNOME<br />
<a href="https://wiki.gnome.org/Apps/Meld">https://wiki.gnome.org/Apps/Meld</a>
</li>

<li>Stránky nástroje TkDiff<br />
<a href="https://sourceforge.net/projects/tkdiff/">https://sourceforge.net/projects/tkdiff/</a>
</li>

<li>Zdrojové kódy TkDiffu<br />
<a href="https://sourceforge.net/projects/tkdiff/files/tkdiff/4.2/">https://sourceforge.net/projects/tkdiff/files/tkdiff/4.2/</a>
</li>

<li>Poslední verze nástroje TkDiff<br />
<a href="https://sourceforge.net/projects/tkdiff/files/latest/download">https://sourceforge.net/projects/tkdiff/files/latest/download</a>
</li>

<li>Manuálová stránka k&nbsp;nástroji TkDiff<br />
<a href="http://linux.math.tifr.res.in/manuals/man/tkdiff.html">http://linux.math.tifr.res.in/manuals/man/tkdiff.html</a>
</li>

<li>diffh: Make your diff easier to see<br />
<a href="https://inconsolation.wordpress.com/2013/10/07/diffh-make-your-diff-easier-to-see/">https://inconsolation.wordpress.com/2013/10/07/diffh-make-your-diff-easier-to-see/</a>
</li>

<li>Stránky projektu diffh<br />
<a href="https://sourceforge.net/projects/diffh/">https://sourceforge.net/projects/diffh/</a>
</li>

<li>Pretty Diff (implementovaný v&nbsp;JavaScriptu)<br />
<a href="http://prettydiff.com/">http://prettydiff.com/</a>
</li>

<li>Nástroje pro diff textů<br />
<a href="https://en.wikipedia.org/wiki/Diff-Text">https://en.wikipedia.org/wiki/Diff-Text</a>
</li>

<li>Pretty Diff (implementovaný v&nbsp;JavaScriptu)<br />
<a href="https://en.wikipedia.org/wiki/Pretty_Diff">https://en.wikipedia.org/wiki/Pretty_Diff</a>
</li>

<li>Stránky projektu colordiff<br />
<a href="https://www.colordiff.org/">https://www.colordiff.org/</a>
</li>

<li>Skript idiff<br />
<a href="http://www.pixelbeat.org/scripts/idiff">http://www.pixelbeat.org/scripts/idiff</a>
</li>

<li>Three way git merging with Meld<br />
<a href="https://lukas.zapletalovi.com/2012/09/three-way-git-merging-with-meld.html">https://lukas.zapletalovi.com/2012/09/three-way-git-merging-with-meld.html</a>
</li>

<li>xxdiff na serveru SourceForge<br />
<a href="https://sourceforge.net/projects/xxdiff/">https://sourceforge.net/projects/xxdiff/</a>
</li>

<li>Stránka nástroje KDiff3<br />
<a href="http://kdiff3.sourceforge.net/">http://kdiff3.sourceforge.net/</a>
</li>

<li>Seriál o programovacím jazyku TCL a GUI knihovně Tk<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-tcl/">https://www.root.cz/serialy/programovaci-jazyk-tcl/</a>
</li>

<li>ActiveTcl<br />
<a href="https://www.activestate.com/activetcl">https://www.activestate.com/activetcl</a>
</li>

<li>Tiobe: žebříček popularity programovacích jazyků<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

