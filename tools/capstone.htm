<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Disassembling obsahu binárního souboru</a></p>
<p><a href="#k03">*** 3. Demonstrační příklad</a></p>
<p><a href="#k04">*** 4. Výpis operačních kódů instrukcí</a></p>
<p><a href="#k05">*** 5. Demonstrační příklad</a></p>
<p><a href="#k06">*** 6. Explicitní specifikace bázové adresy kódu (org)</a></p>
<p><a href="#k07">*** 7. Demonstrační příklad</a></p>
<p><a href="#k08">*** 8. Binární kód uložený v&nbsp;souboru od zadaného nenulového offsetu</a></p>
<p><a href="#k09">*** 9. Demonstrační příklad</a></p>
<p><a href="#k10">*** 10. Oprava předchozího demonstračního příkladu</a></p>
<p><a href="#k11">*** 11. Kombinace Keystone+Capstone</a></p>
<p><a href="#k12">*** 12. Kód v&nbsp;assembleru pro platformu x86-64</a></p>
<p><a href="#k13">*** 13. Explicitní změna bázové adresy</a></p>
<p><a href="#k14">*** 14. Kód v&nbsp;assembleru pro 32bitovou platformu ARM</a></p>
<p><a href="#k15">*** 15. Využití instrukční sady ARM Thumb</a></p>
<p><a href="#k16">*** 16. Přepis příkladů pro architekturu AArch64</a></p>
<p><a href="#k17">*** 17. Další možnosti poskytované nástrojem Capstone</a></p>
<p><a href="#k18">*** 18. Závěrečné zhodnocení</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Demonstrační příklad</h2>

<pre>
<i># import všech symbolů použitých ve skriptu</i>
from capstone import Cs, CS_ARCH_X86, CS_MODE_64


<i># otevřít binární soubor a přečíst jeho obsah</i>
with open("loops.bin", "rb") as fin:
    code = fin.read()

<i># disassembling obsahu binárního souboru</i>
md = Cs(CS_ARCH_X86, CS_MODE_64)

<i># vypsat podrobnější informace o každé instrukci</i>
for i in md.disasm(code, 0x0000):
    <i># výpis informací o instrukci</i>
    print("0x{:02x}:\t{:s}\t{:s}".format(i.address, i.mnemonic, i.op_str))
</pre>

<pre>
0x00:   mov     ebx, 0xa
0x05:   mov     eax, 0x64
0x0a:   dec     eax
0x0c:   jne     0xa
0x0e:   dec     ebx
0x10:   jne     5
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výpis operačních kódů instrukcí</h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. Demonstrační příklad</h2>

<pre>
# import všech symbolů použitých ve skriptu
from capstone import Cs, CS_ARCH_X86, CS_MODE_64


# otevřít binární soubor a přečíst jeho obsah
with open("loops.bin", "rb") as fin:
    code = fin.read()

# disassembling obsahu binárního souboru
md = Cs(CS_ARCH_X86, CS_MODE_64)

# vypsat podrobnější informace o každé instrukci
for i in md.disasm(code, 0x0000):
    # převod pole bajtů na řetězec s hexa hodnotami
    dump = i.bytes.hex(" ")

    # výpis informací o instrukci
    print("0x{:02x}:\t{:20s}\t{:s}\t{:s}".format(i.address, dump, i.mnemonic, i.op_str))
</pre>

<pre>
0x00:   bb 0a 00 00 00          mov     ebx, 0xa
0x05:   b8 64 00 00 00          mov     eax, 0x64
0x0a:   ff c8                   dec     eax
0x0c:   75 fc                   jne     0xa
0x0e:   ff cb                   dec     ebx
0x10:   75 f3                   jne     5
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Explicitní specifikace bázové adresy kódu (org)</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. Demonstrační příklad</h2>

<pre>
# import všech symbolů použitých ve skriptu
from capstone import Cs, CS_ARCH_X86, CS_MODE_64


# otevřít binární soubor a přečíst jeho obsah
with open("loops.bin", "rb") as fin:
    code = fin.read()

# disassembling obsahu binárního souboru
md = Cs(CS_ARCH_X86, CS_MODE_64)

# vypsat podrobnější informace o každé instrukci
for i in md.disasm(code, 0x1234):
    # převod pole bajtů na řetězec s hexa hodnotami
    dump = i.bytes.hex(" ")

    # výpis informací o instrukci
    print("0x{:02x}:\t{:20s}\t{:s}\t{:s}".format(i.address, dump, i.mnemonic, i.op_str))
</pre>

<pre>
0x1234: bb 0a 00 00 00          mov     ebx, 0xa
0x1239: b8 64 00 00 00          mov     eax, 0x64
0x123e: ff c8                   dec     eax
0x1240: 75 fc                   jne     0x123e
0x1242: ff cb                   dec     ebx
0x1244: 75 f3                   jne     0x1239
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Binární kód uložený v&nbsp;souboru od zadaného nenulového offsetu</h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. Demonstrační příklad</h2>

<pre>
# import všech symbolů použitých ve skriptu
from capstone import Cs, CS_ARCH_X86, CS_MODE_64

# otevřít binární soubor a přečíst jeho obsah
with open("loops_x.bin", "rb") as fin:
    code = fin.read()

# disassembling obsahu binárního souboru
md = Cs(CS_ARCH_X86, CS_MODE_64)

# vypsat podrobnější informace o každé instrukci
for i in md.disasm(code, 0x0000):
    # převod pole bajtů na řetězec s hexa hodnotami
    dump = i.bytes.hex(" ")

    # výpis informací o instrukci
    print("0x{:02x}:\t{:20s}\t{:s}\t{:s}".format(i.address, dump, i.mnemonic, i.op_str))
</pre>

<pre>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Oprava předchozího demonstračního příkladu</h2>

<pre>
# import všech symbolů použitých ve skriptu
from capstone import Cs, CS_ARCH_X86, CS_MODE_64

# pozice v binárním souboru, od níž jsou instrukce uloženy
OFFSET = 1000

# otevřít binární soubor a přečíst jeho obsah
with open("loops_x.bin", "rb") as fin:
    code = fin.read()
    code = code[OFFSET:]

# disassembling obsahu binárního souboru
md = Cs(CS_ARCH_X86, CS_MODE_64)

# vypsat podrobnější informace o každé instrukci
for i in md.disasm(code, 0x0000):
    # převod pole bajtů na řetězec s hexa hodnotami
    dump = i.bytes.hex(" ")

    # výpis informací o instrukci
    print("0x{:02x}:\t{:20s}\t{:s}\t{:s}".format(i.address, dump, i.mnemonic, i.op_str))
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Kombinace Keystone+Capstone</h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. Kód v&nbsp;assembleru pro platformu x86-64</h2>

<pre>
# import všech symbolů assembleru použitých ve skriptu
from keystone import Ks, KS_ARCH_X86, KS_MODE_64, KsError

# import všech symbolů disassembleru použitých ve skriptu
from capstone import Cs, CS_ARCH_X86, CS_MODE_64


# instrukce, které se mají přeložit assemblerem
CODE = """
    MOV EBX, 10
OUTER_LOOP:
    MOV EAX, 100
INNER_LOOP:
    DEC EAX
    JNZ INNER_LOOP
    DEC EBX
    JNZ OUTER_LOOP
"""

try:
    # inicializace assembleru se specifikací architektury a popř. i režimu
    ks = Ks(KS_ARCH_X86, KS_MODE_64)

    # vlastní překlad (assembling)
    encoding, count = ks.asm(CODE)

    # disassembling binární sekvence kódů
    md = Cs(CS_ARCH_X86, CS_MODE_64)

    # vypsat podrobnější informace o každé instrukci
    for i in md.disasm(bytes(encoding), 0x0000):
        # převod pole bajtů na řetězec s hexa hodnotami
        dump = i.bytes.hex(" ")

        # výpis informací o instrukci
        print("0x{:02x}:\t{:20s}\t{:s}\t{:s}".format(i.address, dump, i.mnemonic, i.op_str))

except KsError as e:
    print("ERROR: %s" % e)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Explicitní změna bázové adresy</h2>

<pre>
# import všech symbolů assembleru použitých ve skriptu
from keystone import Ks, KS_ARCH_X86, KS_MODE_64, KsError

# import všech symbolů disassembleru použitých ve skriptu
from capstone import Cs, CS_ARCH_X86, CS_MODE_64


# instrukce, které se mají přeložit assemblerem
CODE = """
    MOV EBX, 10
OUTER_LOOP:
    MOV EAX, 100
INNER_LOOP:
    DEC EAX
    JNZ INNER_LOOP
    DEC EBX
    JNZ OUTER_LOOP
"""

try:
    # inicializace assembleru se specifikací architektury a popř. i režimu
    ks = Ks(KS_ARCH_X86, KS_MODE_64)

    # vlastní překlad (assembling)
    encoding, count = ks.asm(CODE)

    # disassembling binární sekvence kódů
    md = Cs(CS_ARCH_X86, CS_MODE_64)

    # vypsat podrobnější informace o každé instrukci
    for i in md.disasm(bytes(encoding), 0x1234):
        # převod pole bajtů na řetězec s hexa hodnotami
        dump = i.bytes.hex(" ")

        # výpis informací o instrukci
        print("0x{:02x}:\t{:20s}\t{:s}\t{:s}".format(i.address, dump, i.mnemonic, i.op_str))

except KsError as e:
    print("ERROR: %s" % e)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Kód v&nbsp;assembleru pro 32bitovou platformu ARM</h2>

<pre>
# import všech symbolů assembleru použitých ve skriptu
from keystone import Ks, KS_ARCH_ARM, KS_MODE_ARM, KsError

# import všech symbolů disassembleru použitých ve skriptu
from capstone import Cs, CS_ARCH_ARM, CS_MODE_ARM


# instrukce, které se mají přeložit assemblerem
CODE = """
    MOV R0, 10
OUTER_LOOP:
    MOV R1, 100
INNER_LOOP:
    SUB R1, R1, 1
    BNE INNER_LOOP
    SUB R0, R0, 1
    BNE OUTER_LOOP
"""

try:
    # inicializace assembleru se specifikací architektury a popř. i režimu
    ks = Ks(KS_ARCH_ARM, KS_MODE_ARM)

    # vlastní překlad (assembling)
    encoding, count = ks.asm(CODE)

    # disassembling binární sekvence kódů
    md = Cs(CS_ARCH_ARM, CS_MODE_ARM)

    # vypsat podrobnější informace o každé instrukci
    for i in md.disasm(bytes(encoding), 0x0000):
        # převod pole bajtů na řetězec s hexa hodnotami
        dump = i.bytes.hex(" ")

        # výpis informací o instrukci
        print("0x{:02x}:\t{:20s}\t{:s}\t{:s}".format(i.address, dump, i.mnemonic, i.op_str))

except KsError as e:
    print("ERROR: %s" % e)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Využití instrukční sady ARM Thumb</h2>

<pre>
# import všech symbolů assembleru použitých ve skriptu
from keystone import Ks, KS_ARCH_ARM, KS_MODE_THUMB, KsError

# import všech symbolů disassembleru použitých ve skriptu
from capstone import Cs, CS_ARCH_ARM, CS_MODE_THUMB


# instrukce, které se mají přeložit assemblerem
CODE = """
    MOV R0, 10
OUTER_LOOP:
    MOV R1, 100
INNER_LOOP:
    SUB R1, R1, 1
    BNE INNER_LOOP
    SUB R0, R0, 1
    BNE OUTER_LOOP
"""

try:
    # inicializace assembleru se specifikací architektury a popř. i režimu
    ks = Ks(KS_ARCH_ARM, KS_MODE_THUMB)

    # vlastní překlad (assembling)
    encoding, count = ks.asm(CODE)

    # disassembling binární sekvence kódů
    md = Cs(CS_ARCH_ARM, CS_MODE_THUMB)

    # vypsat podrobnější informace o každé instrukci
    for i in md.disasm(bytes(encoding), 0x0000):
        # převod pole bajtů na řetězec s hexa hodnotami
        dump = i.bytes.hex(" ")

        # výpis informací o instrukci
        print("0x{:02x}:\t{:20s}\t{:s}\t{:s}".format(i.address, dump, i.mnemonic, i.op_str))

except KsError as e:
    print("ERROR: %s" % e)
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Přepis příkladů pro architekturu AArch64</h2>

<pre>
# import všech symbolů assembleru použitých ve skriptu
from keystone import Ks, KS_ARCH_ARM64, KS_MODE_LITTLE_ENDIAN, KsError

# import všech symbolů disassembleru použitých ve skriptu
from capstone import Cs, CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN


# instrukce, které se mají přeložit assemblerem
CODE = """
    MOV W0, 10
OUTER_LOOP:
    MOV W1, 100
INNER_LOOP:
    SUB W1, W1, 1
    BNE INNER_LOOP
    SUB W0, W0, 1
    BNE OUTER_LOOP
"""

try:
    # inicializace assembleru se specifikací architektury a popř. i režimu
    ks = Ks(KS_ARCH_ARM64, KS_MODE_LITTLE_ENDIAN)

    # vlastní překlad (assembling)
    encoding, count = ks.asm(CODE)

    # disassembling binární sekvence kódů
    md = Cs(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN)

    # vypsat podrobnější informace o každé instrukci
    for i in md.disasm(bytes(encoding), 0x0000):
        # převod pole bajtů na řetězec s hexa hodnotami
        dump = i.bytes.hex(" ")

        # výpis informací o instrukci
        print("0x{:02x}:\t{:20s}\t{:s}\t{:s}".format(i.address, dump, i.mnemonic, i.op_str))

except KsError as e:
    print("ERROR: %s" % e)
</pre>


<p><a name="k17"></a></p>
<h2 id="k17">17. Další možnosti poskytované nástrojem Capstone</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Závěrečné zhodnocení</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 (nikoli ovšem pro starší verze Pythonu 2!) byly
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Keystone Engine na GitHubu<br />
<a href="https://github.com/keystone-engine/keystone">https://github.com/keystone-engine/keystone</a>
</li>

<li>Keystone: The Ultimate Assembler<br />
<a href="https://www.keystone-engine.org/">https://www.keystone-engine.org/</a>
</li>

<li>The Ultimate Disassembler<br />
<a href="http://www.capstone-engine.org/">http://www.capstone-engine.org/</a>
</li>

<li>Tutorial for Keystone<br />
<a href="https://www.keystone-engine.org/docs/tutorial.html">https://www.keystone-engine.org/docs/tutorial.html</a>
</li>

<li>Rozhraní pro Capstone na PyPi<br />
<a href="https://pypi.org/project/capstone/">https://pypi.org/project/capstone/</a>
</li>

<li>Rozhraní pro Keystone na PyPi<br />
<a href="https://pypi.org/project/keystone-engine/">https://pypi.org/project/keystone-engine/</a>
</li>

<li>KEYSTONE: Next Generation Assembler Framework<br />
<a href="https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf">https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html">http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html</a>
</li>

<li>AT&amp;T assembly syntax and IA-32 instructions<br />
<a href="https://gist.github.com/mishurov/6bcf04df329973c15044">https://gist.github.com/mishurov/6bcf04df329973c15044</a>
</li>

<li>ARM GCC Inline Assembler Cookbook<br />
<a href="http://www.ethernut.de/en/documents/arm-inline-asm.html">http://www.ethernut.de/en/documents/arm-inline-asm.html</a>
</li>

<li>Extended Asm - Assembler Instructions with C Expression Operands<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a>
</li>

<li>ARM inline asm secrets<br />
<a href="http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/">http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/</a>
</li>

<li>How to Use Inline Assembly Language in C Code<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C">https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C</a>
</li>

<li>GCC-Inline-Assembly-HOWTO<br />
<a href="http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html</a>
</li>

<li>A Brief Tutorial on GCC inline asm (x86 biased)<br />
<a href="http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm">http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm</a>
</li>

<li>GCC Inline ASM<br />
<a href="http://locklessinc.com/articles/gcc_asm/">http://locklessinc.com/articles/gcc_asm/</a>
</li>

<li>GNU Assembler Examples<br />
<a href="http://cs.lmu.edu/~ray/notes/gasexamples/">http://cs.lmu.edu/~ray/notes/gasexamples/</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>The GNU Assembler Tutorial<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html">http://tigcc.ticalc.org/doc/gnuasm.html</a>
</li>

<li>The GNU Assembler - macros<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html#SEC109">http://tigcc.ticalc.org/doc/gnuasm.html#SEC109</a>
</li>

<li>ARM subroutines &amp; program stack<br />
<a href="http://www.toves.org/books/armsub/">http://www.toves.org/books/armsub/</a>
</li>

<li>Generating Mixed Source and Assembly List using GCC<br />
<a href="http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/">http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/</a>
</li>

<li>Calling subroutines<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v&nbsp;assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly">https://defuse.ca/online-x86-assembler.htm#disassembly</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

