<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Compiler Explorer - až nečekaně užitečný nástroj</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Compiler Explorer - až nečekaně užitečný nástroj</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se seznámíme se zajímavým a mnohdy i velmi užitečným projektem, který se nazývá Compiler Explorer. Jedná se o webovou aplikaci, která dokáže přeložit zdrojové kódy napsané v různých jazycích buď do assembleru zvoleného procesoru nebo (pro určité jazyky) do bajtkódu.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Compiler Explorer &ndash; až nečekaně užitečný nástroj</a></p>
<p><a href="#k02">*** 2. Překlad zdrojových kódů do assembleru</a></p>
<p><a href="#k03">*** 3. Zkoumání specifických vlastností některých mikroprocesorů</a></p>
<p><a href="#k04">*** 4. Podpora historických CPU</a></p>
<p><a href="#k05">*** 5. Porovnání dvou či více variant překladu</a></p>
<p><a href="#k06">*** 6. Zobrazení bajtkódu u vybraných programovacích jazyků</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Compiler Explorer &ndash; až nečekaně užitečný nástroj</h2>

<p>V&nbsp;dnešním článku se, jak již ostatně bylo zmíněno v&nbsp;perexu, seznámíme se zajímavým a mnohdy i velmi užitečným projektem. Tento projekt se jmenuje <i>Compiler Explorer</i> a za jeho vývojem a provozem stojí <a href="https://xania.org/MattGodbolt">Matt Godbolt</a>. Jedná se o webovou aplikaci dostupnou na adrese <a href="https://godbolt.org/">https://godbolt.org/</a>, která dokáže přeložit zdrojové kódy napsané v&nbsp;různých programovacích jazycích buď do assembleru zvoleného mikroprocesoru nebo (pro určité vybrané jazyky) do bajtkódu příslušného virtuálního stroje. V&nbsp;dalších kapitolách si ve stručnosti ukážeme některé způsoby použití tohoto zajímavého nástroje.</p>

*** image ***
<p><i>Obrázek 1: Úvodní stránka nástroje Compiler Explorer.</i></p>

<p><div class="rs-tip-major">Poznámka: Compiler Explorer je realizován formou webové aplikace, na které se osobně dívám s&nbsp;nedůvěrou (špatné zkušenosti s&nbsp;jejich nároky na systémové prostředky a efektivitu používání), ovšem samotný Compiler Explorer se chová velmi svižně a i paměťové nároky nejsou (s&nbsp;ohledem na způsob tvorby &bdquo;moderních&ldquo; aplikací) nijak velké:</div></p>

*** image ***
<p><i>Obrázek 2: Compiler Explorer má velmi malé paměťové nároky na straně webového prohlížeče, dokonce menší, než například samotná stránka Roota a mnohem menší, než stránka Youtube nebo dokonce samotného Task Manažeru :-)</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Překlad zdrojových kódů do assembleru</h2>

<p>Již název projektu <i>Compiler Explorer</i> naznačuje, že umožňuje překládat zdrojové kódy napsané v&nbsp;některém z&nbsp;překládaných (kompilovaných) jazyků do assembleru s&nbsp;možností prohlédnutí výsledného vygenerovaného kódu. To je operace, kterou dokáže provést prakticky každý překladač, ovšem Compiler Explorer programátorům nabízí především velký výběr překládaných programovacích jazyků (včetně C, C++, <a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">Rustu</a> a <a href="https://www.root.cz/serialy/programovaci-jazyk-go/">Go</a>) a taktéž velký výběr překladačů, včetně různých verzí těchto překladačů. Navíc je nabízeno velké množství cílových platforem, pro které je možné provést překlad, od historických osmibitových mikroprocesorů, až po moderní x86-64, <a href="https://www.root.cz/clanky/64bitove-mikroprocesory-s-architekturou-aarch64/">ARMv8</a> či <a href="https://www.root.cz/clanky/instrukcni-sada-procesorovych-jader-s-otevrenou-architekturou-risc-v/">RISC-V</a>. Ovšem <i>Compiler Explorer</i> nabízí možnost specifikovat parametry překladu, tedy většinou zapínat a vypínat optimalizace (na rychlost či velikost strojového kódu), popř.&nbsp;zapínat a vypínat různá rozšíření instrukční sady či <a href="https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html">určit typ procesoru</a>, což je důležité pro všechny tři zmíněné platformy: x86-64, ARM a taktéž RISC-V.</p>

*** image ***
<p><i>Obrázek 3: Takto vypadá překlad zdrojového kódu v&nbsp;Rustu s&nbsp;pattern matchingem do assembleru. Korespondující řádky jsou zvýrazněny různou barvou.</i></p>

<p>Poměrně důležitou vlastností <i>Compiler Exploreru</i> je fakt, že se překlad provádí (z&nbsp;pohledu uživatele) na pozadí, a to i v&nbsp;průběhu editace. Je tak možné vlastně &bdquo;naživo&ldquo; vidět, jak se projeví změna algoritmu na efektivitě výsledného strojového kódu. Odpovídající si řádky zdrojového kódu a assembleru jsou přitom zvýrazněny různými barvami, takže je zřejmé, jak se jednotlivé řádky překládají (což pochopitelně nebude vždy zcela funkční, zejména při zapnutí optimalizací).</p>

*** image ***
<p><i>Obrázek 4: Překlad prográmku napsaného v&nbsp;jazyce F# do assembleru x86-64 s&nbsp;využitím překladače dodávaného v&nbsp;.NETu. Povšimněte si, že v&nbsp;tomto konkrétním případě neexistuje vazba mezi řádky zdrojového kódu a assemblerem.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zkoumání specifických vlastností některých mikroprocesorů</h2>

<p>Asi nejzajímavější je použití <i>Compiler Exploreru</i> pro zkoumání různých instrukčních sad a jejich rozšíření. Například jsme se na stránkách Roota ve stručnosti seznámili s&nbsp;rozšířením instrukční sady procesorů ARM, které se jmenuje <a href="https://www.root.cz/clanky/instrukcni-sada-aarch64-technologie-neon/">NEON</a>. I na běžném desktopu a bez nutnosti instalace jakéhokoli (cross) překladače je možné zjistit, jak fungují takzvané <i>intrinsic</i>, tedy konstrukce v&nbsp;jazyku C či C++, které vedou k&nbsp;překladu kódu s&nbsp;využitím právě instrukcí NEON, i když původně C/C++ sémantiku NEONu neobsahuje (tedy neobsahuje možnost specifikovat &bdquo;tento kód ať je vykonán po 16bitových slovech zpracovaných ve čtyřech paralelních ALU&ldquo;. Viz například <a href="https://gist.github.com/csarron/3191b401ec545f78022881f1805cae9a">NEON Intrinsics Quick Guide</a>:</p>

*** image ***
<p><i>Obrázek 5: Překlad kódu v&nbsp;jazyku C, v&nbsp;němž se využívají &bdquo;intrinsic&ldquo; vektorové instrukční sady NEON.</i></p>

<p><div class="rs-tip-major">Poznámka: samozřejmě se nejedná pouze o NEON, ale podobně lze zkoumat různé doplňky instrukční sady RISC-V nebo ARMv8.</div></p>

*** image ***
<p><i>Obrázek 6: Podporovány jsou i některé méně známé či používané překladače, například tcc.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Podpora historických CPU</h2>

<p>V&nbsp;Compiler Exploreru jsou nabízeny (typicky pro jazyk C) i překladače některých historických mikroprocesorů. Příkladem je překladač <strong>cc65</strong> určený pro čim MOS 6502 i pro všechny jeho varianty. Jedná se o poměrně dobrou pomůcku při vysvětlování, v&nbsp;čem se tyto starší mikroprocesory odlišují od jejich moderních protějšků. Příkladem je nutnost rozkladu operací s&nbsp;16bitovými a 32bitovými operandy (nemluvě o číslech s&nbsp;plovoucí řádovou čárkou) na sekvenci osmibitových operací. Tato znalost je pochopitelně důležitá i jinde, například při práci s&nbsp;osmibitovými mikrořadiči.</p>

*** image ***
<p><i>Obrázek 7: Součet dvou celých 16bitových čísel není na MOS 6502 triviální operací. Je nutné ji rozložit na součet spodních bajtů následovaných součtem vyšších bajtů. </i></p>

*** image ***
<p><i>Obrázek 8: Naproti tomu součet dvou osmibitových celých čísel je již triviální &ndash; pokud překladači cc65 odpustíme zcela neefektivní způsob překladu (ten lze ovšem do určité míry ladit).</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Porovnání dvou či více variant překladu</h2>

<p></p>

*** image ***
<p><i>Obrázek 9: </i></p>

*** image ***
<p><i>Obrázek 10: </i></p>

*** image ***
<p><i>Obrázek 11: </i></p>

*** image ***
<p><i>Obrázek 12: </i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení bajtkódu u vybraných programovacích jazyků</h2>

<p>Na stránkách Roota jsme se podrobně zabývali studiem bajtkódu některých programovacích jazyků (viz odkazy na konci článku). Projekt <i>Compiler Explorer</i> některé bajtkódy podporuje. Týká se to především Pythonu a taktéž Javy, resp.&nbsp;přesněji řečeno jazyků postavených nad virtuálním strojem Javy (JVM). Ovšem některé další jazyky a jejich bajtkódy (alespoň prozatím) podporovány nejsou; což je případ jazyka Lua či technologie Parrot. Z&nbsp;novějších bajtkódů je asi nejzajímavější WebAssembly. Pro zajímavost se podívejme na několik jednoduchých příkladů:</p>

*** image ***
<p><i>Obrázek 13: Překlad konstruktoru třídy Square a metody square do bajtkódu virtuálního stroje Javy (JVM).</i></p>

*** image ***
<p><i>Obrázek 14: Překlad jednoduché funkce napsané v&nbsp;Pythonu do bajtkódu Pythonu.</i></p>

*** image ***
<p><i>Obrázek 15: Překlad výpočtu zapsaného v&nbsp;jazyku C do WebAssembly.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránka projektu Compiler Explorer<br />
<a href="https://godbolt.org/">https://godbolt.org/</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="https://llvm.org/">https://llvm.org/</a>
</li>

<li>GCC, the GNU Compiler Collection<br />
<a href="https://gcc.gnu.org/">https://gcc.gnu.org/</a>
</li>

<li>Java quick guide: JVM Instruction Set (tabulka všech instrukcí JVM)<br />
<a href="http://www.mobilefish.com/tutorials/java/java_quickguide_jvm_instruction_set.html">http://www.mobilefish.com/tutorials/java/java_quickguide_jvm_instruction_set.html</a>
</li>

<li>The JVM Instruction Set<br />
<a href="http://mpdeboer.home.xs4all.nl/scriptie/node14.html">http://mpdeboer.home.xs4all.nl/scriptie/node14.html</a>
</li>

<li>PrintAssembly<br />
<a href="https://wikis.oracle.com/display/HotSpotInternals/PrintAssembly">https://wikis.oracle.com/display/HotSpotInternals/PrintAssembly</a>
</li>

<li>Open Source ByteCode Libraries in Java<br />
<a href="http://java-source.net/open-source/bytecode-libraries">http://java-source.net/open-source/bytecode-libraries</a>
</li>

<li>The class File Format<br />
<a href="http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html">http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html</a>
</li>

<li>javap - The Java Class File Disassembler<br />
<a href="http://docs.oracle.com/javase/1.4.2/docs/tooldocs/windows/javap.html">http://docs.oracle.com/javase/1.4.2/docs/tooldocs/windows/javap.html</a>
</li>

<li>Inside The Python Virtual Machine<br />
<a href="https://leanpub.com/insidethepythonvirtualmachine">https://leanpub.com/insidethepythonvirtualmachine</a>
</li>

<li>module-py_compile<br />
<a href="https://docs.python.org/3.8/library/py_compile.html">https://docs.python.org/3.8/library/py_compile.html</a>
</li>

<li>Given a python .pyc file, is there a tool that let me view the bytecode?<br />
<a href="https://stackoverflow.com/questions/11141387/given-a-python-pyc-file-is-there-a-tool-that-let-me-view-the-bytecode">https://stackoverflow.com/questions/11141387/given-a-python-pyc-file-is-there-a-tool-that-let-me-view-the-bytecode</a>
</li>

<li>The structure of .pyc files<br />
<a href="https://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html">https://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html</a>
</li>

<li>Python Bytecode: Fun With Dis<br />
<a href="http://akaptur.github.io/blog/2013/08/14/python-bytecode-fun-with-dis/">http://akaptur.github.io/blog/2013/08/14/python-bytecode-fun-with-dis/</a>
</li>

<li>Python's Innards: Hello, ceval.c!<br />
<a href="http://tech.blog.aknin.name/category/my-projects/pythons-innards/">http://tech.blog.aknin.name/category/my-projects/pythons-innards/</a>
</li>

<li>Byterun<br />
<a href="https://github.com/nedbat/byterun">https://github.com/nedbat/byterun</a>
</li>

<li>Python Byte Code Instructions<br />
<a href="http://document.ihg.uni-duisburg.de/Documentation/Python/lib/node56.html">http://document.ihg.uni-duisburg.de/Documentation/Python/lib/node56.html</a>
</li>

<li>Python Byte Code Instructions<br />
<a href="https://docs.python.org/3.2/library/dis.html#python-bytecode-instructions">https://docs.python.org/3.2/library/dis.html#python-bytecode-instructions</a>
</li>

<li>dis - Python module<br />
<a href="https://docs.python.org/2/library/dis.html">https://docs.python.org/2/library/dis.html</a>
</li>

<li>Comparison of Python virtual machines<br />
<a href="http://polishlinux.org/apps/cli/comparison-of-python-virtual-machines/">http://polishlinux.org/apps/cli/comparison-of-python-virtual-machines/</a>
</li>

<li>O-code<br />
<a href="http://en.wikipedia.org/wiki/O-code_machine">http://en.wikipedia.org/wiki/O-code_machine</a>
</li>

<li>ARM GCC Inline Assembler Cookbook<br />
<a href="http://www.ethernut.de/en/documents/arm-inline-asm.html">http://www.ethernut.de/en/documents/arm-inline-asm.html</a>
</li>

<li>Extended Asm - Assembler Instructions with C Expression Operands<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a>
</li>

<li>ARM inline asm secrets<br />
<a href="http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/">http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/</a>
</li>

<li>The ARMv8 instruction sets<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>A64 Instruction Set<br />
<a href="https://developer.arm.com/products/architecture/instruction-sets/a64-instruction-set">https://developer.arm.com/products/architecture/instruction-sets/a64-instruction-set</a>
</li>

<li>The ARM Instruction Set<br />
<a href="http://simplemachines.it/doc/arm_inst.pdf">http://simplemachines.it/doc/arm_inst.pdf</a>
</li>

<li>ARM Architecture (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/ARM_architecture">http://en.wikipedia.org/wiki/ARM_architecture</a>
</li>

<li>The GNU Assembler Tutorial<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html">http://tigcc.ticalc.org/doc/gnuasm.html</a>
</li>

<li>The GNU Assembler - macros<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html#SEC109">http://tigcc.ticalc.org/doc/gnuasm.html#SEC109</a>
</li>

<li>6502 - the first RISC &micro;P<br />
<a href="http://ericclever.com/6500/">http://ericclever.com/6500/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>cc65 Users Guide<br />
<a href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>
</li>

<li>Adventures with ca65<br />
<a href="https://atariage.com/forums/topic/312451-adventures-with-ca65/">https://atariage.com/forums/topic/312451-adventures-with-ca65/</a>
</li>

<li>Assembly Language Misconceptions<br />
<a href="https://www.youtube.com/watch?v=8_0tbkbSGRE">https://www.youtube.com/watch?v=8_0tbkbSGRE</a>
</li>

<li>How Machine Language Works<br />
<a href="https://www.youtube.com/watch?v=HWpi9n2H3kE">https://www.youtube.com/watch?v=HWpi9n2H3kE</a>
</li>

<li>Instrukční sada AArch64: technologie NEON<br />
<a href="https://www.root.cz/clanky/instrukcni-sada-aarch64-technologie-neon/">https://www.root.cz/clanky/instrukcni-sada-aarch64-technologie-neon/</a>
</li>

<li>Seriál Programovací jazyk Go<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-go/">https://www.root.cz/serialy/programovaci-jazyk-go/</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Instrukční sada procesorových jader s otevřenou architekturou RISC-V<br />
<a href="https://www.root.cz/clanky/instrukcni-sada-procesorovych-jader-s-otevrenou-architekturou-risc-v/">https://www.root.cz/clanky/instrukcni-sada-procesorovych-jader-s-otevrenou-architekturou-risc-v/</a>
</li>

<li>64bitové mikroprocesory s architekturou AArch64<br />
<a href="https://www.root.cz/clanky/64bitove-mikroprocesory-s-architekturou-aarch64/">https://www.root.cz/clanky/64bitove-mikroprocesory-s-architekturou-aarch64/</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Cross assemblery a cross překladače pro platformu osmibitových domácích mikropočítačů Atari<br />
<a href="https://www.root.cz/clanky/cross-assemblery-a-cross-prekladace-pro-platformu-osmibitovych-domacich-mikropocitacu-atari/">https://www.root.cz/clanky/cross-assemblery-a-cross-prekladace-pro-platformu-osmibitovych-domacich-mikropocitacu-atari/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

