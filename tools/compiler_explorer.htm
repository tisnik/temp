<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Compiler Explorer - až nečekaně užitečný nástroj</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Compiler Explorer - až nečekaně užitečný nástroj</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se seznámíme se zajímavým a mnohdy i velmi užitečným projektem, který se nazývá Compiler Explorer. Jedná se o webovou aplikaci, která dokáže přeložit zdrojové kódy napsané v různých jazycích buď do assembleru zvoleného procesoru nebo (pro určité jazyky) do bajtkódu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Compiler Explorer &ndash; až nečekaně užitečný nástroj</a></p>
<p><a href="#k02">2. Překlad zdrojových kódů do assembleru</a></p>
<p><a href="#k03">3. Zkoumání specifických vlastností některých mikroprocesorů</a></p>
<p><a href="#k04">4. Podpora historických CPU</a></p>
<p><a href="#k05">5. Porovnání dvou či více variant překladu</a></p>
<p><a href="#k06">6. Zobrazení bajtkódu u vybraných programovacích jazyků</a></p>
<p><a href="#k07">7. Transformace zdrojového kódu do AST</a></p>
<p><a href="#k08">8. Zobrazení AST v&nbsp;Compiler Exploreru</a></p>
<p><a href="#k09">9. Překlad do mezikódu (<i>intermediate representation</i>)</a></p>
<p><a href="#k10">10. Přímá podpora assemblerů</a></p>
<p><a href="#k11">11. Zajímavosti na konec: detekce <i>memset</i> z&nbsp;programové smyčky a překlad pro osmibitové čipy</a></p>
<p><a href="#k12">12. Seznam podporovaných jazyků</a></p>
<p><a href="#k13">13. Seznam integrovaných překladačů</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Compiler Explorer &ndash; až nečekaně užitečný nástroj</h2>

<p>V&nbsp;dnešním článku se, jak již ostatně bylo zmíněno v&nbsp;perexu,
seznámíme se zajímavým a mnohdy i velmi užitečným projektem. Tento projekt se
jmenuje <i>Compiler Explorer</i> a za jeho vývojem a provozem stojí <a
href="https://xania.org/MattGodbolt">Matt Godbolt</a>. Jedná se o webovou
aplikaci dostupnou na adrese <a
href="https://godbolt.org/">https://godbolt.org/</a>, která dokáže přeložit
zdrojové kódy napsané v&nbsp;různých programovacích jazycích buď do assembleru
zvoleného mikroprocesoru nebo (pro určité vybrané jazyky) do bajtkódu
příslušného virtuálního stroje. Překlad je přitom proveden vybraným překladačem
(podle zvoleného jazyka existuje jen jeden překladač nebo i několik desítek
překladačů), který je navíc nabízen v&nbsp;různých verzích, takže je například
možné porovnat, jak se způsob překladu postupně měnil. V&nbsp;dalších
kapitolách si ve stručnosti ukážeme některé způsoby použití tohoto zajímavého
nástroje.</p>

<a href="https://www.root.cz/obrazek/580306/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-1-prev.png" class="image-580306" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-1-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-1-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 1: Úvodní stránka nástroje Compiler Explorer.</i></p>

<p><div class="rs-tip-major">Poznámka: z&nbsp;uživatelského pohledu je
<i>Compiler Explorer</i> realizován formou webové aplikace, na které se osobně
dívám s&nbsp;nedůvěrou (špatné zkušenosti s&nbsp;jejich nároky na systémové
prostředky, kvalitu UX a efektivitu resp.&nbsp;většinou spíše neefektivitu
používání), ovšem na tomto místě je nutné říci, že samotný Compiler Explorer se
chová velmi svižně a i paměťové nároky nejsou (s&nbsp;ohledem na způsob tvorby
&bdquo;moderních&ldquo; aplikací) nijak velké. O tom se ostatně můžeme velmi
snadno přesvědčit:</div></p>

<a href="https://www.root.cz/obrazek/580307/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-2-prev.png" class="image-580307" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-2-prev.png" data-prev-width="370" data-prev-height="149" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-2-large.png" data-large-width="720" data-large-height="289" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="149" /></a>
<p><i>Obrázek 2: Compiler Explorer má na straně klienta (tedy prohlížeče)
vlastně velmi malé paměťové nároky, dokonce menší, než například samotná
stránka Roota a mnohem menší, než stránka s&nbsp;pozastaveným videem na Youtube
nebo dokonce samotného Task Manažeru webového prohlížeče :-)</i></p>

<p>Compiler Explorer si můžete spustit i lokálně s&nbsp;využitím kódu a
konfigurace získaného <a
href="https://github.com/compiler-explorer/compiler-explorer">z&nbsp;tohoto
repositáře</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Překlad zdrojových kódů do assembleru</h2>

<p>Již název projektu <i>Compiler Explorer</i> naznačuje, že umožňuje překládat
zdrojové kódy napsané v&nbsp;některém z&nbsp;překládaných (kompilovaných)
jazyků do assembleru s&nbsp;možností prohlédnutí výsledného vygenerovaného
kódu. To je operace, kterou pochopitelně dokáže provést prakticky jakýkoli
překladač, ovšem <i>Compiler Explorer</i> programátorům nabízí především velký
výběr překládaných programovacích jazyků (včetně C, C++, <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">Rustu</a> a <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">Go</a>) a taktéž <a
href="https://compiler-explorer.github.io/compiler-workflows/build-status">velký
výběr překladačů</a>, včetně různých verzí těchto překladačů (v&nbsp;případě C
a C++ je to GCC, LLVM, MSVC, překlad do WebAssembly apod.). Navíc je nabízeno
velké množství cílových platforem, pro které je možné provést překlad, od
historických osmibitových mikroprocesorů, až po moderní x86-64, <a
href="https://www.root.cz/clanky/64bitove-mikroprocesory-s-architekturou-aarch64/">ARMv8</a>
či <a
href="https://www.root.cz/clanky/instrukcni-sada-procesorovych-jader-s-otevrenou-architekturou-risc-v/">RISC-V</a>.
Ovšem <i>Compiler Explorer</i> uživatelům navíc nabízí možnost specifikovat
parametry překladu, tedy většinou zapínat a vypínat optimalizace (prováděné
s&nbsp;ohledem na rychlost či velikost cílového strojového kódu),
popř.&nbsp;zapínat a vypínat různá rozšíření instrukční sady či <a
href="https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html">určit typ
procesoru</a>, což je v&nbsp;současnosti důležité pro všechny tři výše zmíněné
platformy: x86-64, ARM a taktéž RISC-V.</p>

<a href="https://www.root.cz/obrazek/580308/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-3-prev.png"  class="image-580308" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-3-prev.png"  data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-3-large.png"  data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 3: Takto vypadá překlad zdrojového kódu zapsaného v&nbsp;Rustu
(demonstrační příklad s&nbsp;jednoduchým pattern matchingem) do assembleru.
Korespondující řádky zdrojového kódu a instrukcí assembleru jsou v&nbsp;tomto
případě zvýrazněny odlišnou barvou podkladu.</i></p>

<p>Poměrně důležitou vlastností <i>Compiler Exploreru</i> je fakt, že se
překlad provádí (z&nbsp;pohledu uživatele) na pozadí, a to i v&nbsp;průběhu
editace. Je tak možné vlastně &bdquo;naživo&ldquo; vidět, jak se projeví změna
algoritmu na efektivitě výsledného strojového kódu. Odpovídající si řádky
zdrojového kódu a assembleru jsou přitom zvýrazněny různými barvami, takže je
zřejmé, jak se jednotlivé řádky překládají (což pochopitelně nebude vždy zcela
funkční, zejména při zapnutí optimalizací).</p>

<p><div class="rs-tip-major">Poznámka: překlad v&nbsp;průběhu editace byl
použit i v&nbsp;ideovém prapředkovi Compiler Exploreru. Jednalo se o
<i>tmux</i>, přičemž v&nbsp;jednom okně běžel textový editor (<i>vi</i>) a ve
druhém okně se zobrazoval generovaný assembler.</div></p>

<p>Dále je možné ve zkoumaných kódech používat různé knihovny. Seznam
předinstalovaných knihoven lze najít na adrese <a
href="https://godbolt.org/admin/libraries.html">https://godbolt.org/admin/libraries.html</a>.</p>

<a href="https://www.root.cz/obrazek/580309/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-4-prev.png"  class="image-580309" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-4-prev.png"  data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-4-large.png"  data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 4: Překlad prográmku napsaného v&nbsp;jazyce F# do assembleru
x86-64 s&nbsp;využitím překladače dodávaného v&nbsp;.NETu. Povšimněte si, že
v&nbsp;tomto konkrétním případě neexistuje vazba mezi řádky zdrojového kódu a
assemblerem.</i></p>

<p><div class="rs-tip-major">Poznámka: pěknou ukázkou &bdquo;live&ldquo;
náhledu na generovaný kód v&nbsp;assembleru je <a
href="https://www.youtube.com/watch?v=zBkNBP00wJE">toto video</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zkoumání specifických vlastností některých mikroprocesorů</h2>

<p>Asi nejzajímavější je použití <i>Compiler Exploreru</i> pro zkoumání různých
instrukčních sad a jejich rozšíření. Například jsme se na stránkách Roota ve
stručnosti seznámili s&nbsp;rozšířením instrukční sady procesorů ARM, které se
jmenuje <a
href="https://www.root.cz/clanky/instrukcni-sada-aarch64-technologie-neon/">NEON</a>
(což je jedna z&nbsp;mnoha variant implementace <a
href="https://www.root.cz/clanky/vektorove-procesory-aneb-dalsi-pokus-o-zvyseni-vypocetniho-vykonu-pocitacu/">SIMD</a>
&ndash; Single Instruction Multiple Data). I na běžném desktopu a bez nutnosti
instalace jakéhokoli (cross) překladače je možné zjistit, jak fungují takzvané
<i>intrinsic</i>, tedy konstrukce zapsané v&nbsp;jazyku C či C++, které vedou
k&nbsp;překladu kódu s&nbsp;využitím právě instrukcí NEON, i když původně C/C++
sémantiku NEONu neobsahuje (tedy neobsahuje možnost specifikovat například
požadavek &bdquo;tento kód ať je vykonán po 16bitových slovech zpracovaných ve
čtyřech paralelních ALU&ldquo;. Viz například <a
href="https://gist.github.com/csarron/3191b401ec545f78022881f1805cae9a">NEON
Intrinsics Quick Guide</a>:</p>

<a href="https://www.root.cz/obrazek/580310/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-5-prev.png"  class="image-580310" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-5-prev.png"  data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-5-large.png"  data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 5: Překlad kódu zapsaného v&nbsp;jazyku C, v&nbsp;němž se
využívají &bdquo;intrinsic&ldquo; vektorové instrukční sady NEON.</i></p>

<p><div class="rs-tip-major">Poznámka: samozřejmě se nejedná pouze o NEON, ale
podobně lze zkoumat různé doplňky instrukční sady RISC-V nebo ARMv8, nemluvě o
x86-64, kde těchto rozšíření existuje celá řada.</div></p>

<a href="https://www.root.cz/obrazek/580311/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-6-prev.png"  class="image-580311" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-6-prev.png"  data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-6-large.png"  data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 6: V&nbsp;Compiler Exploreru jsou podporovány i některé méně
známé či méně často používané překladače, například tcc.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Podpora historických CPU</h2>

<p>V&nbsp;Compiler Exploreru jsou nabízeny (typicky pro programovací jazyk C) i
překladače některých historických mikroprocesorů. Příkladem je překladač
<strong>cc65</strong> určený pro známý osmibitový čip <a
href="https://www.root.cz/clanky/mikropocitac-kim-1-jeden-ze-zvestovatelu-osmibitove-revoluce/#k02">MOS
6502</a> i pro všechny jeho varianty (viz též <a
href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>).
Jedná se o poměrně dobrou pomůcku při vysvětlování, v&nbsp;čem se tyto starší
mikroprocesory odlišují od jejich moderních protějšků. Příkladem je nutnost
rozkladu operací s&nbsp;16bitovými a 32bitovými operandy (nemluvě o číslech
s&nbsp;plovoucí řádovou čárkou) na sekvenci osmibitových operací. Tato znalost
je pochopitelně důležitá i jinde, například při práci s&nbsp;osmibitovými
mikrořadiči.</p>

<a href="https://www.root.cz/obrazek/580312/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-7-prev.png"  class="image-580312" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-7-prev.png"  data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-7-large.png"  data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 7: Součet dvou celých šestnáctibitových čísel není na osmibitovém
čipu MOS 6502 zcela triviální operací. Je nutné ji rozložit na součet spodních
bajtů následovaných součtem vyšších bajtů, navíc je nutno brát ohled na přenos
(carry) při prvním součtu.</i></p>

<a href="https://www.root.cz/obrazek/580313/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-8-prev.png"  class="image-580313" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-8-prev.png"  data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-8-large.png"  data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 8: Naproti tomu součet dvou osmibitových celých čísel je na
tomtéž čipu již triviální &ndash; pokud překladači cc65 odpustíme zcela
neefektivní způsob překladu (ten lze ovšem do určité míry ladit &ndash; a to
použitím přepínačů překladače).</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Porovnání dvou či více variant překladu</h2>

<p>V&nbsp;mnoha diskusích se vývojáři snaží o porovnávání kvality různých
překladačů, typicky z&nbsp;hlediska optimalizace generovaného strojového kódu.
Popř.&nbsp;se vedou diskuse o tom, zda je například v&nbsp;případě překladače
GCC pro určitou aplikaci (nebo i pro jádro operačního systému) lepší zapnout
optimalizaci <strong>-O2</strong> nebo <strong>-O3</strong> atd. Při použití
<i>Compiler Exploreru</i> je možné v&nbsp;rámci jednoho tabu v&nbsp;prohlížeči
zobrazit výstup z&nbsp;několika překladačů (a to i pro různé platformy),
několika verzí překladačů nebo například překlad v&nbsp;rámci jedné verze
překladače, ale s&nbsp;odlišnými příznaky (<i>flags</i>). A stále platí, že
modifikace ve zdrojovém kódu vede k&nbsp;prakticky okamžitému překladu se
zobrazením všech nakonfigurovaných výstupů v&nbsp;assembleru:</p>

<a href="https://www.root.cz/obrazek/580314/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-9-prev.png"  class="image-580314" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-9-prev.png"  data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-9-large.png"  data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 9: Porovnání překladu s&nbsp;využitím různých variant
Rustu.</i></p>

<a href="https://www.root.cz/obrazek/580315/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-10-prev.png" class="image-580315" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-10-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-10-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 10: Porovnání překladu s&nbsp;využitím stejného překladače, ale
s&nbsp;odlišnými přepínači (flags).</i></p>

<a href="https://www.root.cz/obrazek/580316/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-11-prev.png" class="image-580316" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-11-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-11-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 11: Překlad stejného kódu na tři zcela odlišné platformy: MOS
6502, x86-64 a 32bitový ARM.</i></p>

<a href="https://www.root.cz/obrazek/580317/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-12-prev.png" class="image-580317" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-12-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-12-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 12: Porovnání překladu stejného kódu pomocí MSVC a <a
href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/toolkits.html">icc</a>.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení bajtkódu u vybraných programovacích jazyků</h2>

<p>Na stránkách Roota jsme se podrobně zabývali studiem bajtkódu některých
programovacích jazyků (viz odkazy na konci článku). Projekt <i>Compiler
Explorer</i> některé z&nbsp;těchto bajtkódů taktéž podporuje. Týká se to
především Pythonu a taktéž Javy, resp.&nbsp;přesněji řečeno jazyků postavených
nad virtuálním strojem Javy (JVM). Ovšem některé další jazyky a jejich bajtkódy
(alespoň prozatím) podporovány nejsou; což je konkrétně případ programovacího
jazyka Lua či technologie Parrot. Z&nbsp;novějších bajtkódů je pravděpodobně
nejzajímavější <a href="https://webassembly.org/">WebAssembly</a>, tedy
bajtkód, který lze interpretovat či JITovat v&nbsp;moderních prohlížečích (což
po odstranění podpory JVM může vypadat jako snaha o znovuobjevení kola :-) ).
Pro zajímavost se podívejme na několik jednoduchých příkladů, konkrétně na
překlad do bajtkódu JVM, dále na překlad do bajtkódu Pythonu a konečně překlad
do bajtkódu WebAssembly:</p>

<a href="https://www.root.cz/obrazek/580318/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-13-prev.png" class="image-580318" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-13-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-13-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 13: Překlad konstruktoru třídy Square a metody square
naprogramovaného v&nbsp;Javě do bajtkódu virtuálního stroje Javy (JVM). Barevně
jsou odlišeny bloky instrukcí implicitního konstruktoru a bloky instrukcí
z&nbsp;metody (ty by byly dále rozděleny na jednotlivé řádky).</i></p>

<a href="https://www.root.cz/obrazek/580319/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-14-prev.png" class="image-580319" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-14-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-14-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 14: Překlad jednoduché funkce napsané v&nbsp;Pythonu do bajtkódu
Pythonu. V&nbsp;tomto případě existuje vazba mezi řádkem zdrojového kódu a
blokem v&nbsp;bajtkódu; z&nbsp;tohoto důvodu jsou jednotlivé vazby zvýrazněny
odlišným barevným pozadím.</i></p>

<a href="https://www.root.cz/obrazek/580320/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-15-prev.png" class="image-580320" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-15-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-15-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 15: Překlad výpočtu zapsaného v&nbsp;jazyku C do
WebAssembly.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Transformace zdrojového kódu do AST</h2>

<p>Současné překladače rozdělují překlad zdrojových kódů do několika kroků.
Dnes bývá typické hlavní dělení na <a
href="https://en.wikipedia.org/wiki/Compiler#Front_end">front end</a> a <a
href="https://en.wikipedia.org/wiki/Compiler#Back_end">back end</a> překladače
(někdy se zavádí i pojem middle end, což je poněkud zvláštní označení).
V&nbsp;rámci frontendu překladače se postupně provádí jednotlivé dílčí kroky, a
to jak v&nbsp;klasických překladačích (C, Rust, Go), tak i v&nbsp;jazycích,
které provádí překlad &bdquo;jen&ldquo; do bajtkódu s&nbsp;jeho pozdější
interpretací (Python) nebo JITováním (Java). Díky rozdělení celého zpracování
do několika konfigurovatelných kroků je zajištěna velká flexibilita a možnost
případného relativně snadného rozšiřování o další syntaktické prvky, existuje
možnost použití jediné sady nástrojů více jazyky, lze přidat podporu pro různé
výstupní formáty (překlad do nativního kódu nebo do WebAssembly atd.), podporu
speciální filtry apod. (nehledě na to, že každá činnost je založena na odlišné
teorii a mohou na nic pracovat jiní vývojáři). Celý průběh zpracování vypadá
při určitém zjednodušení následovně:</p>

<ol>

<li>Na začátku zpracování se nachází takzvaný <i>lexer</i>, který postupně
načítá jednotlivé znaky ze vstupního řetězce (resp.&nbsp;ze vstupního souboru)
a vytváří z&nbsp;nich lexikální <i>tokeny</i>. Teoreticky se pro každý
programovací jazyk používá odlišný lexer a samozřejmě je možné v&nbsp;případě
potřeby si napsat lexer vlastní. V&nbsp;případě Pythonu můžeme použít
například standardní modul <a
href="https://docs.python.org/3.8/library/tokenize.html">tokenizer</a>, nebo
lze alternativně použít například projekt <i>Pygments</i>, jenž obsahuje lexery
pro mnoho dalších programovacích jazyků.</li>

<li>Výstup z&nbsp;lexeru může procházet libovolným počtem <i>filtrů</i>
sloužících pro odstranění nebo (častěji) modifikaci jednotlivých tokenů; ať již
jejich typů či přímo textu, který tvoří hodnotu tokenu. Díky existenci filtrů
je například možné nechat si zvýraznit vybrané bílé znaky, slova se speciálním
významem v&nbsp;komentářích (TODO:, FIX:) apod. Některé lexery obsahují filtr
přímo ve svém modulu.</li>

<li>Sekvence <i>tokenů</i> tvoří základ pro syntaktickou analýzu. Nástroj,
který syntaktickou analýzu provádí, se většinou nazývá <i>parser</i> a proto se
taktéž někdy setkáme s&nbsp;pojmem <i>parsing</i> (tento termín je ovšem chybně
používán i v&nbsp;těch případech, kdy se provádí &bdquo;pouze&ldquo; lexikální
analýza). Výsledkem činnosti parseru je vhodně zvolená datová struktura,
typicky abstraktní syntaktický strom (AST); někdy též strom derivační.
V&nbsp;případě Pythonu vypadá postupné zpracování vstupního zdrojového textu
takto: lexer &rarr; derivační strom (<i>parse tree</i>) &rarr; AST.</li>

</ol>

<img src="https://i.iinfo.cz/images/181/python-ast-02-1.png" class="image-579221" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/legalcode.cs&quot;&gt;CC-BY&lt;/a&gt;" width="436" height="754" />
<p><i>Obrázek 16: AST s&nbsp;vizualizací výrazu 1+2*3.</i></p>

<p><div class="rs-tip-major">Poznámka: některé jazyky navíc obsahují
preprocesor, který se spouští před klasickým lexerem (i když samotný
preprocesor může lexer obsahovat).</div></p>

<img src="https://i.iinfo.cz/images/181/python-ast-02-2.png" class="image-579222" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/legalcode.cs&quot;&gt;CC-BY&lt;/a&gt;" width="426" height="755" />
<p><i>Obrázek 17: AST s&nbsp;vizualizací výrazu (1+2)*3.</i></p>




<p><a name="k08"></a></p>
<h2 id="k08">8. Zobrazení AST v&nbsp;Compiler Exploreru</h2>

<p>Vzhledem k&nbsp;tomu, jak je AST důležitý pro front end překladače, může být
užitečné mít možnost si prohlédnout i tuto datovou strukturu. Dostupná je pouze
pro některé překladače, typicky pro ty, které skutečně striktně rozdělují
jednotlivé fáze zpracování a dokážou produkovat výstup z&nbsp;každé této fáze.
Dobrým příkladem takového typu překladače je <a
href="https://clang.llvm.org/">Clang</a>, který si později zaslouží samostatný
článek. Tento překladač může (pochopitelně kromě dalších výstupů) generovat i
výstup z&nbsp;parseru, a to právě ve formě AST:</p>

<a href="https://www.root.cz/obrazek/580321/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-16-prev.png" class="image-580321" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-16-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-16-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 18: AST vygenerovaný překladačem Clang.</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;současnosti pouze nepatrná část
překladačů, které jsou v&nbsp;<i>Compiler Exploreru</i> integrovány, tuto
funkci podporuje.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Překlad do mezikódu (<i>intermediate representation</i>)</h2>

<p>Některé typy překladačů, mezi nimi i již výše zmíněný <i>Clang</i>
v&nbsp;první fázi překladu (<a
href="https://clang.llvm.org/docs/Toolchain.html#clang-frontend">front end</a>)
vygenerují <i>mezikód</i>), který je nezávislý na konkrétním typu procesoru.
Teprve na tento mezikód jsou aplikovány různé (obecné) optimalizace a následně
je provedena transformace do strojového kódu zvoleného mikroprocesoru.
V&nbsp;případě, že zvolený překladač dokáže vygenerovat a především
vyexportovat mezikód, je tato volba dostupná i v&nbsp;<i>Compiler
Exploreru</i>, o čemž se opět můžeme velmi snadno přesvědčit:</p>

<a href="https://www.root.cz/obrazek/580322/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-17-prev.png" class="image-580322" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-17-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-17-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 19: Výstup do assembleru a mezikód, který k&nbsp;tomuto výstupu
vedl na architektuře x86-64.</i></p>

<a href="https://www.root.cz/obrazek/580323/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-18-prev.png" class="image-580323" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-18-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-18-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 20: Tentýž program, tentýž mezikód, ovšem tentokrát přeložený pro
ARMv7.</i></p>

<p><div class="rs-tip-major">Poznámka: opět platí, že pouze nepatrná část
překladačů integrovaných do <i>Compiler Exploreru</i> tuto funkci
podporuje.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přímá podpora assemblerů</h2>

<p>Výsledkem překladu je typicky strojový kód popř.&nbsp;v&nbsp;některých
případech (Python, Java, Lua) bajtkód. To platí i pro assemblery, které jsou
<i>Compiler Explorerem</i> taktéž podporovány, takže je možné si nechat
zobrazit, jak se zdrojový kód v&nbsp;&bdquo;symbolickém&ldquo; assembleru
překládá do strojového kódu, který je pro lepší čitelnost zobrazen
s&nbsp;využitím disassembleru (což znamená oproti původnímu kódu ztrátu
informací). Díky této podpoře si můžete snadno vyzkoušet různé assemblery,
které se liší svou syntaxí, a to i tehdy, pokud jsou určeny pro stejnou
platformu (viz například rozdíly mezi GNU Assemblerem, NASMem, assemblerem
integrovaným do LLVM atd.):</p>

<a href="https://www.root.cz/obrazek/580324/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-19-prev.png" class="image-580324" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-19-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-19-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 21: Kostra programu napsaného pro AArch64 (ARMv8) s&nbsp;běžícím
Linuxem.</i></p>

<a href="https://www.root.cz/obrazek/580325/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-20-prev.png" class="image-580325" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-20-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-20-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 22: Můžeme si nechat zobrazit i kódy instrukcí, tedy vlastní
strojový kód.</i></p>

<a href="https://www.root.cz/obrazek/580326/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-21-prev.png" class="image-580326" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-21-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-21-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 23: &bdquo;Hello world&ldquo; v&nbsp;assembleru i386.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zajímavosti na konec: detekce <i>memset</i> z&nbsp;programové smyčky a překlad pro osmibitové čipy</h2>

<p><i>Clang</i> obsahuje některé zajímavé optimalizace, například dokáže
rozpoznat, že programátor zapsal smyčky sémanticky odpovídající standardní
funkci <strong>memset</strong>:</p>

<a href="https://www.root.cz/obrazek/580327/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-22-prev.png" class="image-580327" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-22-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-22-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 24: Volba -O1 zajistí, že Clang nahradí celou smyčku voláním
standardní funkce <strong>memset</strong>.</i></p>

<p>Tentýž příklad, ovšem přeložený GCC (kde jsem se snažil přesvědčit
překladač, aby smyčku alespoň rozbalil):</p>

<a href="https://www.root.cz/obrazek/580328/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-23-prev.png" class="image-580328" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-23-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-23-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 25: Překlad stejného příkladu, nyní ovšem s&nbsp;využitím
GCC.</i></p>

<p>Příklad překladu zdrojového programu naprogramovaného v&nbsp;céčko do
strojového kódu pro osmibitový mikrořadič, konkrétně pro <a
href="https://en.wikipedia.org/wiki/ATmega328">ATmega328</a>:</p>

<a href="https://www.root.cz/obrazek/580329/"><img src="https://i.iinfo.cz/images/464/compiler-explorer-24-prev.png" class="image-580329" data-prev-filename="https://i.iinfo.cz/images/464/compiler-explorer-24-prev.png" data-prev-width="370" data-prev-height="181" data-large-filename="https://i.iinfo.cz/images/464/compiler-explorer-24-large.png" data-large-width="720" data-large-height="351" alt="&#160;" title="Autor: &lt;a href=&quot;https://godbolt.org/&quot;&gt;CompilerExplorer&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="181" /></a>
<p><i>Obrázek 26: Kód získaný při vypnutí optimalizací není příliš
dobrý...</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Seznam podporovaných jazyků</h2>

<p>Seznam podporovaných jazyků lze získat přes <a
href="https://github.com/compiler-explorer/compiler-explorer/blob/main/docs/API.md">REST
API</a>:</p>

<pre>
Id             | Name
csharp         | C#
fsharp         | F#
vb             | Visual Basic
go             | Go
c              | C
c++            | C++
fortran        | Fortran
assembly       | Assembly
circle         | C++ (Circle)
circt          | CIRCT
cppx           | Cppx
crystal        | Crystal
hlsl           | HLSL
dart           | Dart
erlang         | Erlang
carbon         | Carbon
cppx_blue      | Cppx-Blue
cppx_gold      | Cppx-Gold
mlir           | MLIR
cuda           | CUDA C++
analysis       | Analysis
python         | Python
ruby           | Ruby
typescript     | TypeScript Native
ada            | Ada
cpp_for_opencl | C++ for OpenCL
openclc        | OpenCL C
llvm           | LLVM IR
d              | D
rust           | Rust
ispc           | ispc
jakt           | Jakt
java           | Java
kotlin         | Kotlin
nim            | Nim
pony           | Pony
scala          | Scala
solidity       | Solidity
clean          | Clean
pascal         | Pascal
haskell        | Haskell
ocaml          | OCaml
swift          | Swift
zig            | Zig
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Seznam integrovaných překladačů</h2>

<p>I seznam podporovaných překladačů je možné získat přes <a
href="https://github.com/compiler-explorer/compiler-explorer/blob/main/docs/API.md">REST
API</a>. Celkem se v&nbsp;současnosti jedná o 1489 kombinací
platforma+překladač+verze:</p>

<pre>
Compiler Name                              | Name
dotnet601csharp                            | .NET 6.0.101
dotnet601fsharp                            | .NET 6.0.101
dotnet601vb                                | .NET 6.0.101
386_gltip                                  | 386 gc (tip)
386_gl114                                  | 386 gc 1.14
386_gl115                                  | 386 gc 1.15
386_gl116                                  | 386 gc 1.16
386_gl117                                  | 386 gc 1.17
386_gl118                                  | 386 gc 1.18
386_gl119                                  | 386 gc 1.19
cc65_217                                   | 6502 cc65 2.17
cc65_218                                   | 6502 cc65 2.18
cc65_219                                   | 6502 cc65 2.19
cc65_trunk                                 | 6502 cc65 trunk
...
...
...
zcxx060                                    | zig c++ 0.6.0
zcxx070                                    | zig c++ 0.7.0
zcxx071                                    | zig c++ 0.7.1
zcxx080                                    | zig c++ 0.8.0
zcxx090                                    | zig c++ 0.9.0
zcxxtrunk                                  | zig c++ trunk
zcc060                                     | zig cc 0.6.0
zcc070                                     | zig cc 0.7.0
zcc071                                     | zig cc 0.7.1
zcc080                                     | zig cc 0.8.0
zcc090                                     | zig cc 0.9.0
zcctrunk                                   | zig cc trunk
ztrunk                                     | zig trunk
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Stránka projektu Compiler Explorer<br />
<a href="https://godbolt.org/">https://godbolt.org/</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="https://llvm.org/">https://llvm.org/</a>
</li>

<li>GCC, the GNU Compiler Collection<br />
<a href="https://gcc.gnu.org/">https://gcc.gnu.org/</a>
</li>

<li>Java quick guide: JVM Instruction Set (tabulka všech instrukcí JVM)<br />
<a href="http://www.mobilefish.com/tutorials/java/java_quickguide_jvm_instruction_set.html">http://www.mobilefish.com/tutorials/java/java_quickguide_jvm_instruction_set.html</a>
</li>

<li>The JVM Instruction Set<br />
<a href="http://mpdeboer.home.xs4all.nl/scriptie/node14.html">http://mpdeboer.home.xs4all.nl/scriptie/node14.html</a>
</li>

<li>PrintAssembly<br />
<a href="https://wikis.oracle.com/display/HotSpotInternals/PrintAssembly">https://wikis.oracle.com/display/HotSpotInternals/PrintAssembly</a>
</li>

<li>Open Source ByteCode Libraries in Java<br />
<a href="http://java-source.net/open-source/bytecode-libraries">http://java-source.net/open-source/bytecode-libraries</a>
</li>

<li>The class File Format<br />
<a href="http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html">http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html</a>
</li>

<li>javap - The Java Class File Disassembler<br />
<a href="http://docs.oracle.com/javase/1.4.2/docs/tooldocs/windows/javap.html">http://docs.oracle.com/javase/1.4.2/docs/tooldocs/windows/javap.html</a>
</li>

<li>Inside The Python Virtual Machine<br />
<a href="https://leanpub.com/insidethepythonvirtualmachine">https://leanpub.com/insidethepythonvirtualmachine</a>
</li>

<li>module-py_compile<br />
<a href="https://docs.python.org/3.8/library/py_compile.html">https://docs.python.org/3.8/library/py_compile.html</a>
</li>

<li>Given a python .pyc file, is there a tool that let me view the bytecode?<br />
<a href="https://stackoverflow.com/questions/11141387/given-a-python-pyc-file-is-there-a-tool-that-let-me-view-the-bytecode">https://stackoverflow.com/questions/11141387/given-a-python-pyc-file-is-there-a-tool-that-let-me-view-the-bytecode</a>
</li>

<li>The structure of .pyc files<br />
<a href="https://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html">https://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html</a>
</li>

<li>Python Bytecode: Fun With Dis<br />
<a href="http://akaptur.github.io/blog/2013/08/14/python-bytecode-fun-with-dis/">http://akaptur.github.io/blog/2013/08/14/python-bytecode-fun-with-dis/</a>
</li>

<li>Python's Innards: Hello, ceval.c!<br />
<a href="http://tech.blog.aknin.name/category/my-projects/pythons-innards/">http://tech.blog.aknin.name/category/my-projects/pythons-innards/</a>
</li>

<li>Byterun<br />
<a href="https://github.com/nedbat/byterun">https://github.com/nedbat/byterun</a>
</li>

<li>Python Byte Code Instructions<br />
<a href="http://document.ihg.uni-duisburg.de/Documentation/Python/lib/node56.html">http://document.ihg.uni-duisburg.de/Documentation/Python/lib/node56.html</a>
</li>

<li>Python Byte Code Instructions<br />
<a href="https://docs.python.org/3.2/library/dis.html#python-bytecode-instructions">https://docs.python.org/3.2/library/dis.html#python-bytecode-instructions</a>
</li>

<li>dis - Python module<br />
<a href="https://docs.python.org/2/library/dis.html">https://docs.python.org/2/library/dis.html</a>
</li>

<li>Comparison of Python virtual machines<br />
<a href="http://polishlinux.org/apps/cli/comparison-of-python-virtual-machines/">http://polishlinux.org/apps/cli/comparison-of-python-virtual-machines/</a>
</li>

<li>O-code<br />
<a href="http://en.wikipedia.org/wiki/O-code_machine">http://en.wikipedia.org/wiki/O-code_machine</a>
</li>

<li>ARM GCC Inline Assembler Cookbook<br />
<a href="http://www.ethernut.de/en/documents/arm-inline-asm.html">http://www.ethernut.de/en/documents/arm-inline-asm.html</a>
</li>

<li>Extended Asm - Assembler Instructions with C Expression Operands<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a>
</li>

<li>ARM inline asm secrets<br />
<a href="http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/">http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/</a>
</li>

<li>The ARMv8 instruction sets<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>A64 Instruction Set<br />
<a href="https://developer.arm.com/products/architecture/instruction-sets/a64-instruction-set">https://developer.arm.com/products/architecture/instruction-sets/a64-instruction-set</a>
</li>

<li>The ARM Instruction Set<br />
<a href="http://simplemachines.it/doc/arm_inst.pdf">http://simplemachines.it/doc/arm_inst.pdf</a>
</li>

<li>ARM Architecture (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/ARM_architecture">http://en.wikipedia.org/wiki/ARM_architecture</a>
</li>

<li>The GNU Assembler Tutorial<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html">http://tigcc.ticalc.org/doc/gnuasm.html</a>
</li>

<li>The GNU Assembler - macros<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html#SEC109">http://tigcc.ticalc.org/doc/gnuasm.html#SEC109</a>
</li>

<li>6502 - the first RISC &micro;P<br />
<a href="http://ericclever.com/6500/">http://ericclever.com/6500/</a>
</li>

<li>ca65 Users Guide<br />
<a href="https://cc65.github.io/doc/ca65.html">https://cc65.github.io/doc/ca65.html</a>
</li>

<li>cc65 Users Guide<br />
<a href="https://cc65.github.io/doc/cc65.html">https://cc65.github.io/doc/cc65.html</a>
</li>

<li>Adventures with ca65<br />
<a href="https://atariage.com/forums/topic/312451-adventures-with-ca65/">https://atariage.com/forums/topic/312451-adventures-with-ca65/</a>
</li>

<li>Assembly Language Misconceptions<br />
<a href="https://www.youtube.com/watch?v=8_0tbkbSGRE">https://www.youtube.com/watch?v=8_0tbkbSGRE</a>
</li>

<li>How Machine Language Works<br />
<a href="https://www.youtube.com/watch?v=HWpi9n2H3kE">https://www.youtube.com/watch?v=HWpi9n2H3kE</a>
</li>

<li>Instrukční sada AArch64: technologie NEON<br />
<a href="https://www.root.cz/clanky/instrukcni-sada-aarch64-technologie-neon/">https://www.root.cz/clanky/instrukcni-sada-aarch64-technologie-neon/</a>
</li>

<li>Seriál Programovací jazyk Go<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-go/">https://www.root.cz/serialy/programovaci-jazyk-go/</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Instrukční sada procesorových jader s otevřenou architekturou RISC-V<br />
<a href="https://www.root.cz/clanky/instrukcni-sada-procesorovych-jader-s-otevrenou-architekturou-risc-v/">https://www.root.cz/clanky/instrukcni-sada-procesorovych-jader-s-otevrenou-architekturou-risc-v/</a>
</li>

<li>64bitové mikroprocesory s architekturou AArch64<br />
<a href="https://www.root.cz/clanky/64bitove-mikroprocesory-s-architekturou-aarch64/">https://www.root.cz/clanky/64bitove-mikroprocesory-s-architekturou-aarch64/</a>
</li>

<li>Jak se zrodil procesor?<br />
<a href="https://www.root.cz/clanky/jak-se-zrodil-procesor/">https://www.root.cz/clanky/jak-se-zrodil-procesor/</a>
</li>

<li>Cross assemblery a cross překladače pro platformu osmibitových domácích mikropočítačů Atari<br />
<a href="https://www.root.cz/clanky/cross-assemblery-a-cross-prekladace-pro-platformu-osmibitovych-domacich-mikropocitacu-atari/">https://www.root.cz/clanky/cross-assemblery-a-cross-prekladace-pro-platformu-osmibitovych-domacich-mikropocitacu-atari/</a>
</li>

<li>CppCon 2016: Jason Turner “Rich Code for Tiny Computers: A Simple Commodore 64 Game in C++17”<br />
<a href="https://www.youtube.com/watch?v=zBkNBP00wJE">https://www.youtube.com/watch?v=zBkNBP00wJE</a>
</li>

<li>Vektorové procesory aneb další pokus o zvýšení výpočetního výkonu počítačů<br />
<a href="https://www.root.cz/clanky/vektorove-procesory-aneb-dalsi-pokus-o-zvyseni-vypocetniho-vykonu-pocitacu/">https://www.root.cz/clanky/vektorove-procesory-aneb-dalsi-pokus-o-zvyseni-vypocetniho-vykonu-pocitacu/</a>
</li>

<li>Intermediate representation<br />
<a href="https://en.wikipedia.org/wiki/Intermediate_representation">https://en.wikipedia.org/wiki/Intermediate_representation</a>
</li>

<li>Abstract syntax tree<br />
<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">https://en.wikipedia.org/wiki/Abstract_syntax_tree</a>
</li>

<li>Lexical analysis<br />
<a href="https://en.wikipedia.org/wiki/Lexical_analysis">https://en.wikipedia.org/wiki/Lexical_analysis</a>
</li>

<li>Parser<br />
<a href="https://en.wikipedia.org/wiki/Parsing#Parser">https://en.wikipedia.org/wiki/Parsing#Parser</a>
</li>

<li>Parse tree<br />
<a href="https://en.wikipedia.org/wiki/Parse_tree">https://en.wikipedia.org/wiki/Parse_tree</a>
</li>

<li>Derivační strom<br />
<a href="https://cs.wikipedia.org/wiki/Deriva%C4%8Dn%C3%AD_strom">https://cs.wikipedia.org/wiki/Deriva%C4%8Dn%C3%AD_strom</a>
</li>

<li>Python doc: ast — Abstract Syntax Trees<br />
<a href="https://docs.python.org/3/library/ast.html">https://docs.python.org/3/library/ast.html</a>
</li>

<li>Python doc: tokenize — Tokenizer for Python source<br />
<a href="https://docs.python.org/3/library/tokenize.html">https://docs.python.org/3/library/tokenize.html</a>
</li>

<li>Mikropočítač KIM-1: jeden ze zvěstovatelů osmibitové revoluce<br />
<a href="https://www.root.cz/clanky/mikropocitac-kim-1-jeden-ze-zvestovatelu-osmibitove-revoluce/">https://www.root.cz/clanky/mikropocitac-kim-1-jeden-ze-zvestovatelu-osmibitove-revoluce/</a>
</li>

<li>Compiler Explorer Libraries<br />
<a href="https://godbolt.org/admin/libraries.html">https://godbolt.org/admin/libraries.html</a>
</li>

<li>Stav jednotlivých překladačů v&nbsp;Compiler Exploreru<br />
<a href="https://compiler-explorer.github.io/compiler-workflows/build-status">https://compiler-explorer.github.io/compiler-workflows/build-status</a>
</li>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>Clang<br />
<a href="https://clang.llvm.org/">https://clang.llvm.org/</a>
</li>

<li>Clang: Assembling a Complete Toolchain<br />
<a href="https://clang.llvm.org/docs/Toolchain.html">https://clang.llvm.org/docs/Toolchain.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

