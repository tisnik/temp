<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Kakoune: moderní textový editor s&nbsp;modálním ovládáním</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Kakoune: moderní textový editor s&nbsp;modálním ovládáním</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes se seznámíme se zajímavým a potenciálně užitečným textovým editorem Kakoune. Tento editor je založen na modálním ovládání, které známe z editorů Vi a Vim, ovšem oproti Vi/Vim došlo k několika podstatným změnám částečně inspirovaným například Emacsem.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Kakoune: moderní textový editor s&nbsp;modálním ovládáním</a></p>
<p><a href="#k02">2. Další klon Vi?</a></p>
<p><a href="#k03">3. Další vybrané aplikace inspirované ovládáním Vi/Vimu</a></p>
<p><a href="#k04">4. Instalace textového editoru Kakoune</a></p>
<p><a href="#k05">5. Použití předkompilovaného balíčku s&nbsp;editorem Kakoune</a></p>
<p><a href="#k06">6. Spuštění editoru a první krůčky při práci s&nbsp;ním</a></p>
<p><a href="#k07">7. Režimy editoru Kakoune</a></p>
<p><a href="#k08">8. Přesuny textového kurzoru v&nbsp;normálním režimu</a></p>
<p><a href="#k09">9. Výběr textu a základní operace s&nbsp;vybranou oblastí</a></p>
<p><a href="#k10">10. Další příkazy používané v&nbsp;normálním režimu</a></p>
<p><a href="#k11">11. Výběry a provedení operací na více místech textu</a></p>
<p><a href="#k12">12. Registry</a></p>
<p><a href="#k13">13. Použití většího množství oken</a></p>
<p><a href="#k14">14. Některé další možnosti poskytované editorem Kakoune</a></p>
<p><a href="#k15">15. Krátká přehlídka dalších textových editorů inspirovaných Vimem</a></p>
<p><a href="#k16">16. PyVim</a></p>
<p><a href="#k17">17. AMP &ndash; textový editor naprogramovaný v&nbsp;Rustu</a></p>
<p><a href="#k18">18. Elvis</a></p>
<p><a href="#k19">19. Minimalistický editor e3</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Kakoune: moderní textový editor s&nbsp;modálním ovládáním</h2>

<p>V&nbsp;dnešním článku se seznámíme s&nbsp;poměrně novým a (alespoň prozatím)
relativně neznámým textovým editorem, který se jmenuje <i>Kakoune</i>. Jedná se
o textový editor, jenž je založen na modálním ovládání, tj.&nbsp;uživatel se
podle potřeby musí přepínat mezi několika režimy editoru (normální, vkládací
atd., viz další text). Modální ovládání ve skutečnosti není žádná novinka,
protože bylo použito již v&nbsp;původním editoru Vi a z&nbsp;něho odvozeného
slavného editoru Vim, s&nbsp;nímž jsme se již na stránkách Rootu <a
href="https://www.root.cz/n/vim/">mnohokrát setkali</a>, mj.&nbsp;i <a
href="https://www.root.cz/serialy/textovy-editor-vim-jako-ide/">v&nbsp;samostatném
seriálu</a>. I díky modálnímu ovládání jsou úpravy textu v&nbsp;Kakoune velmi
rychlé a efektivní (a to například i na klávesnicích se špatně umístěnými
kurzorovými šipkami), ovšem efektivní a rychlé editace se pochopitelně dosáhne
až poté, co se uživatel naučí alespoň základní sadu příkazů.</p>

<img src="https://i.iinfo.cz/images/695/kakoune-1.png" class="image-355948" alt="&#160;" width="262" height="262" />
<p><i>Obrázek 1: Logo nového textového editoru Kakoune...</i></p>

<img src="https://i.iinfo.cz/images/695/kakoune-2.png" class="image-355949" alt="&#160;" width="262" height="245" />
<p><i>Obrázek 2: ... je (což asi není úplná náhoda) podobné logu Vimu.</i></p>

<p>Současná verze textového editoru Kakoune je určena pro provozování
v&nbsp;terminálu, ovšem tento editor dokáže využívat možností poskytovaných
nástroji <strong>tmux</strong>, <strong>screen</strong>, <strong>i3</strong>
(správce oken) atd. pro podporu editace většího množství bufferů ve více
oknech, což je dosti netypická vlastnost (editor Vim například pracuje jinak
&ndash; má totiž implementovanou vlastní správu oken a bufferů, Vi pro jistotu
ani nedokáže zobrazit více bufferů současně). V&nbsp;Kakoune nalezneme i další
zajímavé funkce, například kontextovou nápovědu, obrazovkové menu, automatické
doplňování textu, asynchronní spouštění externích příkazů atd. Nechybí ovšem
ani (nezbytný?) &bdquo;pan sponka&ldquo;, kterého uvidíme na některých
screenshotech v&nbsp;dalším textu (ovšem pan sponka není ani animovaný ani
nevyluzuje žádné zvuky, takže je možné jeho přítomnost tolerovat).</p>

<a href="https://www.root.cz/obrazek/355950/"><img src="https://i.iinfo.cz/images/695/kakoune-3-prev.png" class="image-355950" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 3: Prostředí textového editoru Vim v&nbsp;případě jeho spuštění
v&nbsp;terminálu. O rozdělení plochy terminálu do oken se stará Vim ve vlastní
režii.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Další klon Vi?</h2>

<p>Již v&nbsp;úvodní části dnešního článku je však nutné zdůraznit, že Kakoune
není &bdquo;pouhým&ldquo; dalším klonem textového editoru Vi či Vim (zkratka
&bdquo;Vim&ldquo; znamenala &bdquo;Vi iMitation&ldquo;, dnes již pochopitelně
&bdquo;Vi iMproved&ldquo;). Ve skutečnosti se jedná o zcela novou aplikaci,
která přebírá myšlenky modálního editoru a současně používá i <i>některé</i>
zkratky Vimu. Ovšem zdaleka ne všechny zkratky a příkazy fungují v&nbsp;Kakoune
stejně jako ve Vimu, což znamená, že přechod není jednoduchý. Příkladem může
být typický příkaz <strong>dw</strong>, který ve Vimu znamená &bdquo;smaž
slovo&ldquo;, resp.&nbsp;přesněji &bdquo;smaž text od pozice kurzoru do začátku
následujícího slova&ldquo;. V&nbsp;editoru Kakoune tento příkaz nebude
fungovat, protože v&nbsp;tomto editoru nejsou podporovány operátory spojené
s&nbsp;přesunem kurzoru. Ovšem namísto toho bude fungovat příkaz
<strong>wd</strong> s&nbsp;odlišným významem &bdquo;vyber slovo a to
smaž&ldquo;. Základní rozdíl tedy spočívá v&nbsp;odlišné filozofii práce
s&nbsp;textem:</p>

<ul>

<li>Ve Vi a Vimu se používá kombinace operátor+příkaz pro přesun kurzoru.
Uživatel tedy nemá přímou zpětnou vazbu, nad jakým textem bude operace
provedena (pokud nepoužije vizuální režim, ten však vyžaduje stisk další
klávesy). Po zaučení je však práce s&nbsp;textem velmi rychlá.</li>

<li>V&nbsp;editoru Kakoune jsou prakticky všechny operace provedeny na vybraným
textem (používá se zde termín <i>selection</i>), takže i vymazání slova probíhá
tak, že se nejdříve slovo či jeho část vybere (výběr je vizuálně odlišen) a
teprve poté se zvolí operace, která se má s&nbsp;výběrem provést. To odpovídá
chování běžných editorů, ovšem s&nbsp;tím podstatným rozdílem, že pro výběr
textu existuje velké množství více či méně sofistikovaných příkazů.</li>

</ul>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto ohledu i v&nbsp;některých
dalších maličkostech se editor Kakoune podobá spíše Emacsu a jeho klonům, než
dvojici Vi+Vim.</div></p>

<a href="https://www.root.cz/obrazek/355951/"><img src="https://i.iinfo.cz/images/695/kakoune-4-prev.png" class="image-355951" alt="&#160;" width="370" height="178" /></a>
<p><i>Obrázek 4: Informace o verzi editoru Kakoune zobrazená po spuštění
editoru (pokud je ovšem v&nbsp;terminálu dostatek místa na zobrazení červeného
dialogu).</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Další vybrané aplikace inspirované ovládáním Vi/Vimu</h2>

<p>Ve skutečnosti ovšem není textový editor Kakoune v&nbsp;žádném případě
jedinou aplikací, která používá ovládání inspirované textovými editory Vi a
Vim. Například pro známý textový editor Atom [<a
href="https://www.root.cz/clanky/atom-moderni-textovy-editor/">1</a>] [<a
href="https://www.root.cz/clanky/atom-moderni-textovy-editor-dokonceni/">2</a>]
existuje zásuvný modul pojmenovaný <a
href="https://github.com/t9md/atom-vim-mode-plus">atom-vim-mode-plus</a> a
některé další moduly s&nbsp;podobným významem &ndash; přidat modální
&bdquo;vimovské&ldquo; ovládání.</p>

<a href="https://www.root.cz/obrazek/191317/"><img src="http://i.iinfo.cz/images/307/atom2-6-prev.png" class="image-191317" alt="***" height="234" width="370"></a>
<p><i>Obrázek 5: Balíček <strong>Vim Mode</strong> je mezi Atomisty :-) velmi
populární.</i></p>

<a href="https://www.root.cz/obrazek/191318/"><img src="http://i.iinfo.cz/images/307/atom2-7-prev.png" class="image-191318" alt="***" height="234" width="370"></a>
<p><i>Obrázek 6: Nové klávesové zkratky zavedené balíčkem <strong>Vim
Mode</strong> do textového editoru Atom.</i></p>

<p>Dále jste se na stránkách serveru <a
href="https://mojefedora.cz">mojefedora.cz</a> [<a
href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/">1</a>]
[<a
href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/">2</a>]
mohli seznámit s&nbsp;projektem pojmenovaným <i>Vrapper</i>, jenž přidává
(alespoň některé) klávesové zkratky Vimu do integrovaného vývojového prostředí
Eclipse a emulace Vimu je dokonce dostupná i pro Libre Office díky pluginu <a
href="https://github.com/seanyeh/vibreoffice">vibreoffice</a> (ten ovšem
podporuje jen ty nejzákladnější příkazy, ze všech zmíněných pluginů je zdaleka
v&nbsp;nejhorším stavu).</p>

<a href="https://www.root.cz/obrazek/337461/"><img src="https://i.iinfo.cz/images/325/evil1-6-prev.png" class="image-337461" alt="&#160;" width="370" height="238" /></a>
<p><i>Obrázek 7: Integrované vývojové prostředí Eclipse s&nbsp;nainstalovaným
pluginem Vrapper.</i></p>

<p>Jedna z&nbsp;nejdokonalejších emulací Vi a Vimu, s&nbsp;níž se můžeme
v&nbsp;praxi setkat, je implementována v&nbsp;pluginu Evil (Mode) pro slavný
textový editor Emacs. S&nbsp;možnostmi nabízenými režimem Evil mode jsme se již
na stránkách Roota setkali v&nbsp;článku <a
href="https://www.root.cz/clanky/evil-kombinace-editacnich-prikazu-vimu-a-sily-emacsu/">Evil:
kombinace editačních příkazů Vimu a síly Emacsu </a>, který byl součástí
krátkého seriálu o některých možnostech nabízených jak Emacsem, tak (a to
především) Emacs Lispem.</p>

<img src="https://i.iinfo.cz/images/325/evil1-10.png" class="image-337465" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 8: Přepnutí Emacsu do režimu Evil zadáním příkazu M-x evil-mode
(zápis &bdquo;M-x&ldquo; v&nbsp;Emacsu znamená označení klávesové zkratky
Alt+X).</i></p>

<img src="https://i.iinfo.cz/images/325/evil1-11.png" class="image-337466" alt="&#160;" width="541" height="371" />
<p><i>Obrázek 9: Režimy Vimu a způsob přechodu mezi nimi.</i></p>

<p>S&nbsp;více či méně dokonalou emulací textového editoru Vim se ovšem setkáme
i v&nbsp;integrovaném vývojovém prostředí <a
href="https://code.visualstudio.com/">Visual Studio Code</a>. Pro toto IDE
existuje hned několik pluginů, které nabízí některé možnosti Vimu; ostatně
postačuje se podívat na následující snímek obrazovky s&nbsp;prostředím VSCode,
v&nbsp;němž jsou vypsány některé pluginy, v&nbsp;jejichž názvu je použit
řetězec &bdquo;vim&ldquo;:</p>

<a href="https://www.root.cz/obrazek/355952/"><img src="https://i.iinfo.cz/images/695/kakoune-5-prev.png" class="image-355952" alt="&#160;" width="360" height="270" /></a>
<p><i>Obrázek 10: Pluginy pro integrované vývojové prostředí Visual Code Studio, které ve svém názvu obsahují řetězec &bdquo;vim&ldquo;.</i></p>

<a href="https://www.root.cz/obrazek/355953/"><img src="https://i.iinfo.cz/images/695/kakoune-6-prev.png" class="image-355953" alt="&#160;" width="360" height="270" /></a>
<p><i>Obrázek 11: Nejvíce funkcí Vimu je emulováno balíčkem nazvaným jednoduše VSCodeVim. Ovšem ani zde není emulace dokonalá, protože například není podporován skriptovací jazyk VimScript (což dále znamená, že nejsou podporovány prakticky žádné pluginy určené přímo pro Vim).</i></p>

<p>I editor integrovaný do <i>QtCreatoru</i> dokáže do jisté míry emulovat
chování Vimu, samozřejmě včetně jeho multimodálního rozhraní, a dokonce je
možné Qt Creator nastavit takovým způsobem, že si přečte uživatelský
konfigurační soubor <strong>.vimrc</strong>. Pokud je režim emulování editoru
Vim (takzvaný <i>FakeVim</i>) povolen, je v&nbsp;pravém dolním rohu stavové
řádky zobrazen aktuální režim Vimu (COMMAND, INSERT, REPLACE, VISUAL) a
s&nbsp;využitím znaku : (dvojtečka) lze přejít do režimu zadávání příkazů,
z&nbsp;nichž nejpoužívanější pravděpodobně bude příkaz pro textovou substituci
(:s). Režim emulace Vimu lze kdykoli zapnout či vypnout klávesovou zkratkou
Alt+V, Alt+V (nejedná se o chybu, skutečně je nutné dvakrát stlačit Alt+V).</p>

<a href="https://www.root.cz/obrazek/329332/"><img src="https://i.iinfo.cz/images/619/qtcreator-5-prev.png" class="image-329332" alt="&#160;" width="370" height="257" /></a>
<p><i>Obrázek 12: Jednou ze zajímavých a pro mnohé programátory i užitečných
vlastností Qt Creatoru je i režim integrovaného programátorského editoru, který
do značné míry napodobuje chování Vimu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace textového editoru Kakoune</h2>

<p>K&nbsp;dispozici je hned několik možností instalace textového editoru
Kakoune. Samozřejmě je možné si stáhnout zdrojové kódy a provést lokální
překlad tohoto textového editoru. Kakoune je naprogramován v&nbsp;jazyku C++
(mimochodem: využívá standardu C++17), takže pro překlad pochopitelně vyžaduje
jak překladač programovacího jazyka C++, tak i běžnou sadu nástrojů používaných
pro vývoj (<strong>make</strong>, <strong>linker</strong> atd.). Kromě toho se
Kakoune linkuje i s&nbsp;několika knihovnami, zejména s&nbsp;knihovnou
<strong>ncurses</strong> (díky ní může používat celoobrazovkové textové
uživatelské rozhraní s&nbsp;volným pohybem kurzoru po celé ploše terminálu).
Pokud tedy již máte nainstalovanou vývojovou variantu knihovny
<strong>ncurses</strong> (její jméno se liší podle distribuce, může být
například &bdquo;libncurses-devel&ldquo;, &bdquo;libncursesw5-dev&ldquo; apod.)
a nějaký novější překladač jazyka C++, měl by být překlad editoru Kakoune
přímočarý, i když relativně pomalý.</p>

<p>Nejprve naklonujeme repositář se zdrojovými kódy i s&nbsp;Makefile:</p>

<pre>
$ <strong>git clone http://github.com/mawww/kakoune.git</strong>
&nbsp;
Cloning into 'kakoune'...
warning: redirecting to https://github.com/mawww/kakoune.git/
remote: Enumerating objects: 102, done.
remote: Counting objects: 100% (102/102), done.
remote: Compressing objects: 100% (56/56), done.
remote: Total 39431 (delta 44), reused 98 (delta 44), pack-reused 39329
Receiving objects: 100% (39431/39431), 35.92 MiB | 19.77 MiB/s, done.
Resolving deltas: 100% (28576/28576), done.
</pre>

<p>Dále se přepneme do adresáře s&nbsp;naklonovaným repositářem a spustíme
překlad s&nbsp;využitím nástroje <strong>make</strong>:</p>

<pre>
$ <strong>cd kakoune/src</strong>
&nbsp;
$ <strong>make</strong>
&nbsp;
g++ -D_GNU_SOURCE -D_DEFAULT_SOURCE  -O3 -pedantic -std=c++17 -g -Wall -Wextra -Wno-unused-parameter -Wno-sign-compare -Wno-address -MD -MP -MF .alias_registry.opt.d -c -o .alias_registry.opt.o alias_registry.cc
&nbsp;
o  -o kak.opt
ln -sf kak.opt kak
</pre>

<p>popř.&nbsp;může následovat příkaz pro instalaci:</p>

<pre>
$ <strong>make install</strong>
</pre>

<p>Po překladu a slinkování vznikne soubor nazvaný <strong>kak.opt</strong>, na
který je automaticky vytvořen link pojmenovaný <strong>kak</strong> (autor
editoru evidentně nepochází z&nbsp;ČR :-):</p>

$ <strong>ls -lah kak*</strong>
&nbsp;
lrwxrwxrwx. 1 tester  tester    7 Mar 11 13:24 kak -&gt; kak.opt
-rwxrwxr-x. 1 tester  tester  43M Mar 11 13:24 kak.opt

<p><div class="rs-tip-major">Poznámka: Nelekněte se obrovské velikosti tohoto
spustitelného souboru &ndash; spoustu informací, které nejsou důležité pro
vlastní běh aplikace, je možné odstranit příkazem strip a získat tak výsledný
soubor o již akceptovatelnější velikosti přibližně 2MB:</div></p>

<pre>
$ <strong>strip kak.opt</strong>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití předkompilovaného balíčku s&nbsp;editorem Kakoune</h2>

<p>V&nbsp;případě, že se vám nechce provádět lokální překlad Kakoune, je
alternativně možné použít již předpřipravené balíčky s&nbsp;tímto textovým
editorem. Na systému Fedora lze použít <a
href="https://copr.fedorainfracloud.org/coprs/">Copr</a>, konkrétně <a
href="https://copr.fedorainfracloud.org/coprs/jkonecny/kakoune/">tento
balíček</a>. Copr nejdříve povolíme a poté balíček nainstalujeme běžným
způsobem:</p>

<pre>
# <strong>dnf copr enable jkonecny/kakoune</strong>
# <strong>dnf install kakoune</strong>
</pre>

<p>Na Arch Linuxu se samozřejmě použije <strong>pacman</strong>:</p>

<pre>
$ <strong>pacman -S kakoune</strong>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Spuštění editoru a první krůčky při práci s&nbsp;ním</h2>

<p>Editor Kakoune se spouští příkazem <strong>kak</strong>:</p>

<pre>
$ <strong>kak</strong>
</pre>

<a href="https://www.root.cz/obrazek/355954/"><img src="https://i.iinfo.cz/images/695/kakoune-7-prev.png" class="image-355954" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 13: V&nbsp;případě, že není specifikováno jméno souboru, použije
se takzvaný <strong>*scratch*</strong> buffer, což je termín převzatý
z&nbsp;Emacsu.</i></p>

<p>Tomuto příkazu můžete na příkazové řádce předat i název souboru, který
potřebujete editovat:</p>

<pre>
$ <strong>kak .bashrc</strong>
</pre>

<a href="https://www.root.cz/obrazek/355955/"><img src="https://i.iinfo.cz/images/695/kakoune-8-prev.png" class="image-355955" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 14: Otevření specifikovaného souboru zadáním jména souboru
z&nbsp;příkazové řádky.</i></p>

<p>Dále je možné v&nbsp;případě potřeby specifikovat i číslo řádku
(popř.&nbsp;dokonce i sloupce), na který se má přesunout textový kurzor:</p>

<pre>
$ <strong>kak .bashrc +42</strong>
</pre>

<p>Po spuštění se editor nachází v&nbsp;takzvaném normálním režimu (<i>normal
mode</i>), který má naprosto stejný význam, jako v&nbsp;textovém editoru Vim.
V&nbsp;normálním režimu se typicky pracuje s&nbsp;textovým kurzorem (jeho
přesun v&nbsp;rámci editovaného textu), volají se základní editační operace a
taktéž se přechází do dalších režimů s&nbsp;využitím k&nbsp;tomu určených
klávesových zkratek.</p>

<a href="https://www.root.cz/obrazek/355956/"><img src="https://i.iinfo.cz/images/695/kakoune-9-prev.png" class="image-355956" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 15: Po otevření souboru se na základě jeho jména a obsahu určuje,
jakým způsobem se má provést obarvení syntaxe.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Režimy editoru Kakoune</h2>

<p>Jak jsme si již řekli <a href="#k01">v&nbsp;úvodní kapitole</a>, je Kakoune
modálním textovým editorem, tj.&nbsp;aplikace se v&nbsp;daný okamžik nachází
vždy v&nbsp;jednom uživatelem zvoleném režimu (módu). Výchozím režimem je
takzvaný normální režim (<i>normal mode</i>), ve kterém editor očekává příkazy
pro pohyb kurzoru v&nbsp;textu, pro výběr textu (<i>selection</i>), další
editační operace a popř.&nbsp;i příkazy, které provedou přepnutí režimu.
V&nbsp;následující tabulce jsou jednotlivé režimy vypsány. Povšimněte si, že se
seznam režimů v&nbsp;některých ohledech odlišuje od editoru Vi/Vim, ovšem dva
základní režimy (<i>normal</i> a <i>insert</i>) jsou zachovány a navíc
<i>prompt mode</i> do značné míry odpovídá Vimovskému <i>command mode</i>
spojeného s&nbsp;podrežimy pro vyhledávání:</p>

<table>
<tr><th>Název režimu</th><th>Stručný popis</th></tr>
<tr><td>Normal mode</td><td>výchozí režim, v&nbsp;němž lze přesouvat kurzor v&nbsp;rámci bufferu, provádět základní editaci a přecházet do dalších režimů</td></tr>
<tr><td>Insert mode</td><td>režim zápisu (většinou vkládání) textu do aktivního bufferu</td></tr>
<tr><td>Goto mode</td><td>přesuny v&nbsp;rámci bufferu či mezi buffery</td></tr>
<tr><td>View mode</td><td>ovládání textového a výběrového kurzoru, práce s&nbsp;oknem</td></tr>
<tr><td>Menu mode</td><td>tento režim se zapíná z&nbsp;více míst a pozná se podle toho, že je zobrazeno menu; vypíná se výběrem položky menu</td></tr>
<tr><td>Prompt mode</td><td>odpovídá kombinaci Vimovského příkazového a vyhledávacího režimu (příkazy začínají dvojtečkou, vyhledávání typicky lomítkem)</td></tr>
<tr><td>Object mode</td><td>režim výběru takzvaných <i>textových objektů</i></td></tr>
<tr><td>User mode</td><td>ve výchozím nastavení je režim prázdný a lze do něj přidávat klávesové zkratky a příkazy namapované na tyto zkratky (díky tomu tyto zkratky nebudou kolidovat s&nbsp;ostatními režimy)</td></tr>
</table>

<a href="https://www.root.cz/obrazek/355957/"><img src="https://i.iinfo.cz/images/695/kakoune-10-prev.png" class="image-355957" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 16: Stručný popis jednotlivých režimů získáte příkazem
<strong>:doc modes</strong> popř.&nbsp;příkazem <strong>:help
modes</strong>.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Přesuny textového kurzoru v&nbsp;normálním režimu</h2>

<p>V&nbsp;normálním režimu (který je, jak již víme, výchozí) je možné
specifikovat příkazy pro pohyby v&nbsp;textu, tj.&nbsp;pro přesuny textového
kurzoru po editovaném dokumentu. Některé základní příkazy jsou zadávány jediným
znakem popř.&nbsp;kombinací klávesy <strong>Ctrl</strong> s&nbsp;jinou
klávesou. V&nbsp;první tabulce jsou vypsány základní příkazy, které jsou
většinou kompatibilní s&nbsp;Vimem:</p>

<table>
<tr><th>#</th><th>Příkaz/zkratka</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>h</td><td>přesun kurzoru o jeden znak doleva (jako ve Vimu)</td></tr>
<tr><td>2</td><td>j</td><td>přesun kurzoru o jeden řádek dolů (jako ve Vimu)</td></tr>
<tr><td>3</td><td>k</td><td>přesun kurzoru o jeden řádek nahoru (jako ve Vimu)</td></tr>
<tr><td>4</td><td>l</td><td>přesun kurzoru o jeden znak doprava (jako ve Vimu)</td></tr>
<tr><td>5</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>Page Up</td><td>přesun o celou viditelnou stránku nahoru</td></tr>
<tr><td>7</td><td>Ctrl+B</td><td>dtto, přesun o celou viditelnou stránku nahoru</td></tr>
<tr><td>8</td><td>Page Down</td><td>přesun o celou viditelnou stránku dolů</td></tr>
<tr><td>9</td><td>Ctrl+F</td><td>dtto, přesun o celou viditelnou stránku dolů</td></tr>
<tr><td>10</td><td>Ctrl+U</td><td>přesun o polovinu viditelné stránky nahoru</td></tr>
<tr><td>11</td><td>Ctrl+D</td><td>přesun o polovinu viditelné stránky dolů</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: před jednotlivé příkazy určené pro pohyb
kurzoru můžete přidat počet opakování. Tj.&nbsp;pokud se potřebujete
v&nbsp;rámci aktuálně editovaného bufferu posunout o deset řádků níže,
postačuje použít příkaz <strong>10j</strong> (zde není oproti Vimu žádný
podstatný rozdíl).</div></p>

<p>To však samozřejmě není zdaleka vše, protože po zadání prefixu
<strong>g</strong> (mnemotechnická zkratka od <i>goto</i>) je možné zadat další
příkazy určené pro pohyb kurzoru. Tyto příkazy jsou sice odlišné od Vimu, ovšem
(zejména pro začínající uživatele) mohou být snadněji zapamatovatelné:</p>

<table>
<tr><th>#</th><th>Příkaz/zkratka</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>gg</td><td>přechod na začátek bufferu (první textový řádek, jako ve Vimu)</td></tr>
<tr><td>2</td><td>gk</td><td>stejný význam jako předchozí příkaz</td></tr>
<tr><td>3</td><td>gj</td><td>přechod na poslední řádek bufferu</td></tr>
<tr><td>3</td><td>ge</td><td>přechod na konec bufferu (konec posledního řádku)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>gh</td><td>přechod na začátek řádku, na němž se nachází kurzor</td></tr>
<tr><td>5</td><td>gl</td><td>přechod na konec řádku, na němž se nachází kurzor</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>gt</td><td>přechod na první viditelný řádek (<i>top</i>)</td></tr>
<tr><td>7</td><td>gb</td><td>přechod na poslední viditelný řádek (<i>bottom</i>)</td></tr>
<tr><td>8</td><td>gc</td><td>přechod na prostřední viditelný řádek (<i>center</i>)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>9</td><td>g.</td><td>přechod na text, který byl naposledy změněn či editován</td></tr>
</table>

<a href="https://www.root.cz/obrazek/355958/"><img src="https://i.iinfo.cz/images/695/kakoune-11-prev.png" class="image-355958" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 17: Po stisku klávesy <strong>g</strong> se zobrazí dostupné
příkazy pro přesun kurzoru.</i></p>

<p>Pro zajímavost si ještě ukažme, jak se odlišují některé příkazy pro pohyb
kurzoru v&nbsp;Kakoune a ve Vimu:</p>

<table>
<tr><th>#</th><th>Kakoune</th><th>Vim</th></tr>
<tr><td>1</td><td>gg</td><td>gg</td></tr>
<tr><td>2</td><td>gk</td><td>gg</td></tr>
<tr><td>3</td><td>gj</td><td>G</td></tr>
<tr><td>3</td><td>ge</td><td>G$</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>gh</td><td>0</td></tr>
<tr><td>5</td><td>gl</td><td>$</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>gt</td><td>H</td></tr>
<tr><td>7</td><td>gb</td><td>L</td></tr>
<tr><td>8</td><td>gc</td><td>M</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>9</td><td>g.</td><td>`.</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;předchozí tabulce můžeme vidět
logiku přiřazení příkazů v&nbsp;Kakoune. Například čtveřice kláves
<strong>h</strong>, <strong>j</strong>, <strong>k</strong>, <strong>l</strong>
slouží pro pohyb kurzoru po jednotlivých znacích popř.&nbsp;řádcích, zatímco
při použití prefixu <strong>g</strong> se kurzor bude pohybovat po celém řádku
(začátek/konec) nebo na začátek konec celého bufferu. Taktéž příkazy, které
jsou ve Vimu přiřazeny klávesám <strong>H</strong>, <strong>L</strong>,
<strong>M</strong> (<i>higher</i>, <i>lower</i>, <i>middle</i>) byly zaměněny
za příkazy, jenž opět začínají prefixem <strong>g</strong>
(<i>goto</i>).</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výběr textu a základní operace s&nbsp;vybranou oblastí</h2>

<p>Editor Vim nabízí uživatelům takzvaný <i>vizuální režim</i> spouštěný
klávesou <strong>v</strong>, <strong>V</strong> či <strong>Ctrl+V</strong>.
V&nbsp;tomto režimu je možné nejprve vybrat určitý text a posléze s&nbsp;tímto
textem provádět další operace (vymazání, změna/náhrada atd.). V&nbsp;editoru
Kakoune je výběr textu jednou z&nbsp;nejdůležitějších operací, protože zde
neexistuje (jak již víme) kombinace operátor+příkaz_pro_pohyb_kurzoru. Proto
zde také namísto vizuálního režimu, který vyžaduje stisk jedné klávesy navíc,
nalezneme celou skupinu příkazů sloužících pro výběr části textu:</p>

<table>
<tr><th>#</th><th>Příkaz/zkratka</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>H</td><td>rozšíření výběru o jeden znak doleva</td></tr>
<tr><td>2</td><td>J</td><td>rozšíření výběru o další řádek</td></tr>
<tr><td>3</td><td>K</td><td>rozšíření výběru o předchozí řádek</td></tr>
<tr><td>4</td><td>L</td><td>rozšíření výběru o jeden znak doprava</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>b</td><td>výběr od pozice kurzoru na začátek předchozího slova</td></tr>
<tr><td>6</td><td>B</td><td>dtto, ovšem rozšíření výběru</td></tr>
<tr><td>7</td><td>e</td><td>výběr od pozice kurzoru do konce slova</td></tr>
<tr><td>8</td><td>E</td><td>dtto, ovšem rozšíření výběru</td></tr>
<tr><td>9</td><td>w</td><td>výběr od pozice kurzoru na začátek dalšího slova</td></tr>
<tr><td>10</td><td>W</td><td>dtto, ovšem rozšíření výběru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>x</td><td>výběr celého řádku</td></tr>
<tr><td>12</td><td>X</td><td>dtto, ovšem rozšíření výběru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>f</td><td>výběr včetně specifikovaného znaku (<i>find</i>)</td></tr>
<tr><td>14</td><td>F</td><td>dtto, ovšem rozšíření výběru</td></tr>
<tr><td>15</td><td>t</td><td>výběr až do specifikovaného znaku (kromě tohoto znaku &ndash; <i>till</i>)</td></tr>
<tr><td>16</td><td>T</td><td>dtto, ovšem rozšíření výběru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>G</td><td>jako příkaz <strong>g</strong>, ovšem s&nbsp;výběrem</td></tr>
<tr><td>18</td><td>n</td><td>výběr regulárním výrazem (zadaným dříve)</td></tr>
<tr><td>19</td><td>N</td><td>dtto, ovšem rozšíření výběru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>Home</td><td>výběr do začátku řádku</td></tr>
<tr><td>21</td><td>End</td><td>výběr do konce řádku</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: jedním z&nbsp;důvodů, proč Kakoune pro
<i>pohyb</i> v&nbsp;textu používá příkazy s&nbsp;prefixem <strong>g</strong>
spočívá právě v&nbsp;tom, že se příkazy zadávané velkým písmenem typicky
používají právě pro výběr textu, který je zde důležitější, než
&bdquo;pouhé&ldquo; pohyby kurzoru.</div></p>

<p>Podporovány jsou samozřejmě i různé textové objekty:</p>

<table>
<tr><th>#</th><th>Příkaz/zkratka</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>[</td><td>začátek výběru podle zvoleného objektu</td></tr>
<tr><td>2</td><td>]</td><td>konec výběru podle zvoleného objektu</td></tr>
<tr><td>3</td><td>(</td><td>jako [, ovšem rozšíření výběru</td></tr>
<tr><td>4</td><td>)</td><td>jako ], ovšem rozšíření výběru</td></tr>
</table>

<p>Podporované textové objekty jsou vypsány na dalším screenshotu:</p>

<a href="https://www.root.cz/obrazek/355959/"><img src="https://i.iinfo.cz/images/695/kakoune-12-prev.png" class="image-355959" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 18: Kontextové menu se základními příkazy pro výběr části textu
s&nbsp;využitím takzvaných textových objektů.</i></p>

<p><div class="rs-tip-major">Poznámka: pokud vám chybí režim výběru
vertikálního (sloupcového) bloku, můžete si vyzkoušet plugin <a
href="https://github.com/occivink/kakoune-vertical-selection">kakoune-vertical-selection</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Další příkazy používané v&nbsp;normálním režimu</h2>

<p>V&nbsp;normálním režimu nalezneme i mnohé další užitečné příkazy. Poměrně
velké množství příkazů (převzatých z&nbsp;Vimu) slouží pro přechod do
vkládajícího režimu, ovšem ještě před tímto přechodem se provede nějaká
operace:</p>

<table>
<tr><th>#</th><th>Příkaz/zkratka</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>a</td><td>přechod do vkládacího režimu za pozicí kurzoru (<i>append</i>)</td></tr>
<tr><td>2</td><td>i</td><td>přechod do vkládacího režimu před pozicí kurzoru (<i>insert</i>)</td></tr>
<tr><td>3</td><td>A</td><td>přechod do vkládacího režimu na začátku řádku</td></tr>
<tr><td>4</td><td>I</td><td>přechod do vkládacího režimu na konci řádku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>o</td><td>přechod do vkládacího režimu na začátku nově vytvořeného řádku pod kurzorem</td></tr>
<tr><td>6</td><td>O</td><td>přechod do vkládacího režimu na začátku nově vytvořeného řádku nad kurzorem</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>c</td><td>změna/modifikace vybraného textu</td></tr>
</table>

<p>Další užitečné příkazy jsou opět do značné míry inspirovány Vimem:</p>

<table>
<tr><th>#</th><th>Příkaz/zkratka</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>d</td><td>vymazání vybraného textu</td></tr>
<tr><td>2</td><td>r</td><td>přepis znaku</td></tr>
<tr><td>3</td><td>p</td><td>vložení textu ze schránky za kurzor</td></tr>
<tr><td>4</td><td>P</td><td>vložení textu ze schránky před kurzor</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>q</td><td>spuštění makra (ve Vimu <strong>@</strong>)</td></tr>
<tr><td>6</td><td>Q</td><td>nahrávání makra (ve Vimu <strong>q</strong>)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>v</td><td>přepnutí do view režimu</td></tr>
<tr><td>8</td><td>~</td><td>změna velikosti písmen (upper case)</td></tr>
<tr><td>9</td><td>`</td><td>změna velikosti písmen (lower case)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>.</td><td>opakování posledního příkazu</td></tr>
</table>

<a href="https://www.root.cz/obrazek/355960/"><img src="https://i.iinfo.cz/images/695/kakoune-13-prev.png" class="image-355960" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 19: Integrovaná nápověda.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výběry a provedení operací na více místech textu</h2>

<p>Práce s&nbsp;výběry je v&nbsp;editoru Kakoune ještě dále rozšířena možností
manipulace s&nbsp;několika výběry současně. Typicky se přitom vytváří více
výběrů (bloků) klávesovou zkratkou <strong>Alt+příkaz_výběru</strong>,
například <strong>Alt+x</strong> pro výběr jednotlivých řádků atd. Podívejme se
nyní na typickou operaci &ndash; změnu stejného jména funkce na více
řádcích.</p>

<a href="https://www.root.cz/obrazek/355961/"><img src="https://i.iinfo.cz/images/695/kakoune-14-prev.png" class="image-355961" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 20: Jednou z&nbsp;možností řešení, které známe i z&nbsp;Vimu, je
výběr celého testového objektu ohraničeného složenými závorkami a použitím
příkazu <strong>substitute</strong>. Jedná se o klasický způsob řešení tohoto
problému.</i></p>

<a href="https://www.root.cz/obrazek/355962/"><img src="https://i.iinfo.cz/images/695/kakoune-15-prev.png" class="image-355962" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 21: Můžeme ovšem provést i několikanásobný výběr. Povšimněte si,
že se nám současně znásobil i počet kurzorů (ty jsou umístěny na znaku A těsně
za vybranými bloky).</i></p>

<a href="https://www.root.cz/obrazek/355963/"><img src="https://i.iinfo.cz/images/695/kakoune-16-prev.png" class="image-355963" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 22: Nyní se veškeré operce, například <strong>c</strong> (change)
provedou nikoli na jediném místě v&nbsp;textu, ale na všech vybraných blocích.
Tyto bloky samozřejmě nemusí nutně ležet pod sebou.</i></p>

<p><div class="rs-tip-major">Poznámka: navíc je možné při definici výběru
použít regulární výraz, což se hodí zejména při práci se zdrojovými
kódy.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Registry</h2>

<p>Dalším užitečným a často používaným nástrojem nabízeným textovým editorem
Kakoune jsou takzvané <i>registry</i>. Jedná se o interní proměnné editoru
pojmenované jedním znakem, které v první řadě slouží pro kopii či přenos
editovaných textů pomocí příkazů <strong>c</strong> (<i>change</i>),
<strong>s</strong> (<i>substitute</i>), <sub>d</sub> (<i>delete</i>),
<strong>y</strong> (<i>yank</i>) a <strong>p</strong> (<i>paste</i>), což
vlastně znamená, že registry lze využít ve funkci pojmenovaných schránek
(<i>clipboard</i>). Pro výběr registru pro další operaci slouží příkaz
<strong>"</strong>, za nímž se specifikuje jednopísmenné jméno registru. Dále
je možné ve vkládacím režimu použít klávesovou zkratku
<strong>Ctrl+registr</strong> pro vložení obsahu registru na místo, na němž se
nachází textový kurzor.</p>

<p>Například příkaz <strong>"ay</strong> slouží pro přesun vybraného textu do
registru nazvaného &bdquo;a&ldquo;, zatímco příkaz <strong>"ap</strong> pro
vložení obsahu registru &bdquo;a&ldquo; za aktuální pozici kurzoru.</p>

<a href="https://www.root.cz/obrazek/355964/"><img src="https://i.iinfo.cz/images/695/kakoune-17-prev.png" class="image-355964" alt="&#160;" width="370" height="231" /></a>
<p><i>Obrázek 23: Po stisku klávesy " (sloužící pro výběr registru) se opět
zobrazí nápověda s&nbsp;funkcemi jednotlivých registrů.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Použití většího množství oken</h2>

<p>Editor Kakoune neobsahuje podporu pro rozdělení plochy terminálu na několik
samostatných oblastí, v&nbsp;nichž by se zobrazovaly jednotlivé editované
buffery. To by se sice mohlo zdát jako dosti velká nevýhoda v&nbsp;porovnání
s&nbsp;některými jinými editory, ovšem Kakoune namísto toho používá odlišnou
taktiku &ndash; práci s&nbsp;okny nechává buď na správci oken nebo na
nástrojích <strong>screen</strong> a <strong>tmux</strong>. Pokud je například
Kakoune spuštěn v&nbsp;sezení <strong>tmuxu</strong>, lze dosáhnout
následujících možností:</p>

<a href="https://www.root.cz/obrazek/355965/"><img src="https://i.iinfo.cz/images/695/kakoune-18-prev.png" class="image-355965" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 24: K&nbsp;dispozici je více příkazů pro vytvoření nového okna
(například s&nbsp;novým bufferem). Jeden z&nbsp;těchto příkazů se jmenuje
<strong>tmux-new-window</strong> a bude funkční ve chvíli, kdy je Kakoune
spuštěn uvnitř sezení <strong>tmuxu</strong>.</i></p>

<a href="https://www.root.cz/obrazek/355966/"><img src="https://i.iinfo.cz/images/695/kakoune-19-prev.png" class="image-355966" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 25: Tři samostatné instance Kakoune běžící v&nbsp;rámci sezení
<strong>tmuxu</strong>.</i></p>

<a href="https://www.root.cz/obrazek/355967/"><img src="https://i.iinfo.cz/images/695/kakoune-20-prev.png" class="image-355967" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 26: Příkazy dostupné z&nbsp;režimu &bdquo;view&ldquo; slouží
k&nbsp;práci s&nbsp;bufferem otevřeným v&nbsp;aktivním okně, popř.&nbsp;pro
přepínání mezi buffery.</i></p>

<p><div class="rs-tip-major">Poznámka: podporován je i správce oken
<strong>i3</strong>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Některé další možnosti poskytované editorem Kakoune</h2>

<p>Podívejme se ještě na některé další možnosti, které jsou poskytované
textovým editorem Kakoune a které například ve Vimu nenalezneme
(popř.&nbsp;nalezneme, ale v&nbsp;jiné podobě). Týká se to i nastavení editoru,
jenž je rozděleno do několika kategorií. Příkaz <strong>:set</strong> je tedy
následován jménem kategorie (například <strong>global</strong>,
<strong>buffers</strong>, <strong>current</strong> atd.) a teprve poté názvem
konfigurační volby. Navíc je možné volby vybírat přímo z&nbsp;menu:</p>

<a href="https://www.root.cz/obrazek/355968/"><img src="https://i.iinfo.cz/images/695/kakoune-21-prev.png" class="image-355968" alt="&#160;" width="370" height="231" /></a>
<p><i>Obrázek 27: Kontextové menu se všemi možnostmi nastavení v&nbsp;aktuálním
bufferu.</i></p>

<p>Kontextové menu se používá ve všech situacích, kdy je na výběr několik
možností. Jedná se například o nabídku textu pro doplnění. Povšimněte si, že se
nenabízí pouze slova <i>začínající</i> na písmeno &bdquo;u&ldquo;, ale i slova,
které toto písmeno pouze <i>obsahují</i> (s&nbsp;nižší relevancí):</p>

<a href="https://www.root.cz/obrazek/355969/"><img src="https://i.iinfo.cz/images/695/kakoune-22-prev.png" class="image-355969" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 28: Kontextové menu s&nbsp;nabídkou textu pro doplnění.</i></p>

<p>Menu (a nápověda) se zobrazí i při otevírání textového souboru příkazem
<strong>:e</strong> či <strong>:edit</strong>:</p>

<a href="https://www.root.cz/obrazek/355970/"><img src="https://i.iinfo.cz/images/695/kakoune-23-prev.png" class="image-355970" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 29: Nápověda a kontextové menu se seznamem souborů, z&nbsp;nichž
jeden bude otevřen pro editaci.</i></p>

<p>Integrovaná nápověda sice není příliš rozsáhlá (určitě ne v&nbsp;porovnání
s&nbsp;Vimem), ovšem je taktéž rozdělena do několika kategorií:</p>

<a href="https://www.root.cz/obrazek/355971/"><img src="https://i.iinfo.cz/images/695/kakoune-24-prev.png" class="image-355971" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 30: Integrovaná nápověda s&nbsp;obsahem.</i></p>

<p>Užitečné je, že při zadání jen části příkazu se nabídnou všechny příkazy,
které dané znaky obsahují (a to nikoli pouze na začátku). To se hodí
v&nbsp;mnoha situacích, například při příkazu <strong>new-window</strong> se
nabídne již zmíněný příkaz <strong>tmux-new-window</strong> apod.:</p>

<a href="https://www.root.cz/obrazek/355972/"><img src="https://i.iinfo.cz/images/695/kakoune-25-prev.png" class="image-355972" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 31: I při zápisu začátku příkazu se zobrazí menu se všemi
příkazy, které odpovídají zapsanému textu. A samozřejmě nesmíme zapomenout na
pana sponku s&nbsp;nápovědou.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Krátká přehlídka dalších textových editorů inspirovaných Vimem</h2>

<p>Ve skutečnosti není Kakoune zdaleka jedinou novější aplikací, která je
inspirována editory Vi a Vim. Kromě aplikací zmíněných <a href="#k03">ve třetí
kapitole</a>, které si z&nbsp;dvojice Vi/Vim vzaly většinou pouze část
modálního ovládání, existuje i několik pokusů o náhradu Vimu odlišným editorem
s&nbsp;podobnými vlastnostmi, popř.&nbsp;pochopitelně s&nbsp;nějakým
vylepšením. Některé (pokusy o) náhradu Vimu jsou zmíněny v&nbsp;navazujících
kapitolách.</p>

<p><div class="rs-tip-major">Poznámka: prozatím se jen krátce zmíníme o editoru
<a href="https://neovim.io/">Neovim</a>, protože mu bude kvůli rozsahu a
množství vylepšení oproti Vimu věnován samostatný článek.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. PyVim</h2>

<p>Mezi jednu z&nbsp;těchto aplikací, i když prozatím pouze ve stadiu vývoje,
patří projekt nazvaný <i>PyVim</i>, jehož název prozrazuje vše podstatné
&ndash; tento projekt je reinkarnací Vimu, ovšem kompletně přepsanou
z&nbsp;programovacího jazyka C do Pythonu. Používají se přitom pochopitelně
odlišné přístupy i odlišné knihovny a navíc je <i>PyVim</i> prozatím
v&nbsp;experimentální fázi, což je ostatně patrné i při pohledu na screenshot
s&nbsp;úvodní zprávou zobrazenou uživateli. <i>PyVim</i> opět primárně běží
v&nbsp;terminálu, takže je použitelný jak na klientských počítačích, tak i na
serverech.</p>

<a href="https://www.root.cz/obrazek/355973/"><img src="https://i.iinfo.cz/images/695/kakoune-26-prev.png" class="image-355973" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 32: Informace o experimentální fázi projektu PyVim.</i></p>

<p>Nutno poznamenat, že prozatím nefungují ani některé základní zkratky, které
uživatelé Vimu dennodenně používají.</p>

<a href="https://www.root.cz/obrazek/355974/"><img src="https://i.iinfo.cz/images/695/kakoune-27-prev.png" class="image-355974" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 33: Integrovaná nápověda.</i></p>

<a href="https://www.root.cz/obrazek/355975/"><img src="https://i.iinfo.cz/images/695/kakoune-28-prev.png" class="image-355975" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 34: Podporováno je i dělení okna terminálu na jednotlivé
buffery.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. AMP &ndash; textový editor naprogramovaný v&nbsp;Rustu</h2>

<p>Technologicky zajímavějším počinem je projekt nazvaný <i>AMP</i>, což je
zcela nová implementace textového editoru inspirovaná Vimem. Tentokrát se však
pro implementaci používá programovací jazyk Rust, s&nbsp;nímž jsme se již na
stránkách Rootu seznámili <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">v&nbsp;rámci
samostatného seriálu</a>. Opět se jedná o aplikaci primárně určenou pro
spuštění v&nbsp;terminálu, se všemi výhodami ale samozřejmě i některými zápory,
které toto ověřené řešení přináší.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Elvis</h2>

<p>V&nbsp;minulosti byl v&nbsp;mnoha distribucích Linuxu (zejména
v&nbsp;distribucích šířených na disketách) jako základní textový editor
využíván nástroj <i>Elvis</i>, což je další editor inspirovaný stařičkým
<i>Vimem</i>. Důvody, které vedly k&nbsp;použití <i>Elvise</i> na
minimalisticky pojatých disketových instalacích spočívají v&nbsp;jeho menší
velikosti (i <i>Vim</i> je však v&nbsp;případě potřeby možné poměrně úspěšně
zmenšit, ovšem za cenu ztráty některých vlastností) a nezávislosti na dalších
knihovnách. I staticky slinkovaná verze textového editoru <i>Elvis</i> totiž
zabere pouze cca 200kB (alespoň na 32bitové platformě x86). Menší velikost
binárního souboru se projevuje i ve velikosti obrazu spuštěného editoru
v&nbsp;operační paměti. Někdo možná miniinstalace Linuxu nepovažuje za
plnohodnotné systémy, pro jednoduchý router či tiskový server se však mnohdy
jedná o ideální, funkční a přitom nekomplikovanou záležitost; podobně je tomu
v&nbsp;případě různých &bdquo;live distribucí&ldquo; (například původní verze
<i>Slaxu</i> používaly editor <i>Elvis</i> a nikoli <i>Vim</i>).</p>

<a href="http://www.root.cz/obrazek/213718/"><img src="http://i.iinfo.cz/images/465/e5-prev.png" class="image-213718" alt="&#160;" height="246" width="370" /></a>
<p><i>Obrázek 35: Editace zdrojového kódu v&nbsp;textovém editoru
<strong>Elvis</strong>. Povšimněte si, že je podporováno i zvýraznění
syntaxe.</i></p>

<p>Editor <i>Elvis</i>, jehož autorem je Steve Kirkendall, se sice snaží
dodržovat co nejlepší zpětnou kompatibilitu s&nbsp;původním editorem <i>vi</i>,
ovšem najdeme zde i množství nových vlastností, které byly později převzaty do
<i>Vimu</i>. Pravděpodobně nejzajímavější vlastností, která je pro textový
editor <i>Elvis</i> typická, je podpora pro několik režimů zobrazení textů
&ndash; tyto režimy je možné v&nbsp;případě potřeby měnit s&nbsp;využitím
příkazu <strong>:display</strong>. Režimy zobrazení v&nbsp;podstatě pracují
jako obousměrné filtry, které převádí interní podobu textu na text zobrazený
uživateli a naopak &ndash; editace prováděná uživatelem se aplikuje na interní
podobu textu v&nbsp;bufferu, což je uživatelsky přívětivé a přitom se
<i>Elvis</i> přibližuje možnostem nabízeným WYSIWYG editory.</p>

<a href="http://www.root.cz/obrazek/213719/"><img src="http://i.iinfo.cz/images/583/e6-prev.png" class="image-213719" alt="&#160;" height="246" width="370" /></a>
<p><i>Obrázek 36: Informace o verzi editoru <strong>Elvis</strong>. Jak je ze
zprávy patrné, není tento editor dále aktivně vyvíjen.</i></p>

<p>Mezi podporované režimy zobrazení patří například režim HTML, při kterém je
editovaný soubor interpretován jako dokument napsaný v&nbsp;jazyce HTML.
V&nbsp;tomto režimu může <i>Elvis</i> do určité míry nahradit WWW prohlížeč,
samozřejmě to platí pouze pro jednodušší stránky bez složitého formátování a
stylů (celá nápověda je k&nbsp;tomuto editoru psána přímo v&nbsp;jednoduchém
HTML, takže ji lze bez problému zobrazit). Režimu HTML se do značné míry podobá
i režim TeXu, který je však do značné míry omezen repertoárem rozpoznávaných
klíčových slov. Dalším podporovaným režimem je režim náhledu manuálových
stránek, kdy se <i>Elvis</i> chová podobně jako příkaz <strong>man</strong>
s&nbsp;tím rozdílem, že je možné manuálové stránky i editovat. Ne všechny
příkazy značkovacího jazyka <strong>troff</strong> (ve kterém jsou stránky
psané) jsou podporovány, repertoár značek je však pro běžnou práci dostačující.
Zejména na systémech Microsoft Windows (kde oba editory samozřejmě pracují) je
to cenná vlastnost, protože na tomto systému se implicitně žádný prohlížeč
manuálových stránek nenachází.</p>

<a href="http://www.root.cz/obrazek/213720/"><img src="http://i.iinfo.cz/images/448/e7-prev.png" class="image-213720" alt="&#160;" height="246" width="370" /></a>
<p><i>Obrázek 37: Režim editace binárních souborů podporovaný textovým editorem
<strong>Elvis</strong>.</i></p>

<p>Zvláštní postavení zaujímá režim hexadecimálního náhledu na editovaný
soubor, při kterém se editor <i>Elvis</i> chová jako běžný hexadecimální
editor.  Tento režim mi osobně ve <i>Vimu</i> chybí nejvíce, protože náhražka
ve formě filtru <strong>xxd</strong> je značně nedokonalá. Zatímco předchozí
režimy zobrazení lze použít spíše pasivně pro prohlížení, režim hexadecimálního
náhledu je při práci s&nbsp;binárními soubory velmi užitečný.</p>

<p>Editor <i>Elvis</i> poskytuje svým uživatelům mnoho dalších výborných
funkcí, z&nbsp;nichž však uvedu z&nbsp;mého pohledu pouze ty
nejzajímavější:</p>

<ol>

<li>Regulární výrazy (resp.&nbsp;&bdquo;magické sekvence&ldquo;) lze psát ve
stylu podobném Perlu, což jistě mnozí ocení.</li>

<li>Oproti <i>Vim</i>u má <i>Elvis</i> rozšířený příkaz
<strong>show</strong>.</li>

<li>Makra se nemusí psát pouze pomocí příkazu <strong>:map</strong>, lze použít
mnohem flexibilnější <strong>:alias</strong></li>

<li>Pomocí operátoru <strong>=</strong> lze provést vyčíslení výrazu, avšak
pouze při výběru bloku pomocí příkazu <strong>v</strong>. V&nbsp;opačném
případě se jedná o formátovací příkaz, podobně jako ve <i>vi</i> či
<i>Vim</i>u, takže kompatibilita je zachována.</li>

<li>Přes soubor <strong>elvis.msg</strong> je možné provést překlad všech
hlášení programu bez nutnosti zásahu do zdrojového kódu.</li>

</ol>



<p><a name="k19"></a></p>
<h2 id="k19">19. Minimalistický editor e3</h2>

<p>Dalším celoobrazovkovým textovým editorem alespoň částečně odvozeným od
starobylého <i>vi</i>, je aplikace, která se jmenuje <i>e3</i>. Již samotné
pojmenování tohoto editoru naznačuje, že se jeho autor <i>Albrecht Kleine</i>
snažil o vytvoření minimalistického nástroje, což se skutečně (alespoň podle
mého názoru) povedlo. Textový editor <i>e3</i> je totiž naprogramován
v&nbsp;assembleru mikroprocesorů řady x86. Zdrojový kód původní verze <i>e3</i>
je uložen v&nbsp;jediném souboru s&nbsp;přibližně 6500 řádky optimalizovaného
assembleru určeného pro překlad do 32bitového režimu (pro překlad je možné
použít například známý assembler <i>NASM</i>). Pro 64bitový režim existuje
jednoduchý skript, který zdrojový kód <i>e3</i> jednoduše transformuje (odlišná
jména registrů apod.), ovšem nevyužije žádných nových vlastností 64bitového
režimu.</p>

<p>Kromě toho existuje i šestnáctibitová verze editoru <i>e3</i> určená pro
systém DOS či pro šestnáctibitové (real mode) zavaděče a různé utility.
Současně existuje i varianta <i>e3</i> přepsaná do programovacího jazyka C, aby
bylo možné tento nepochybně zajímavý editor používat například na počítačích
vybavených mikroprocesory ARM či MIPS. My se však v&nbsp;dalším textu budeme
zabývat pouze originální 32bitovou a 64bitovou variantou <i>e3</i>
naprogramovanou v&nbsp;assembleru.</p>

<a href="http://www.root.cz/obrazek/213730/"><img src="http://i.iinfo.cz/images/237/e17-prev.png" class="image-213730" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 38: Spuštění editoru e3 v&nbsp;režimu emulace klávesových zkratek
WordStaru.</i></p>

<p>Binární obraz <i>e3</i> je v&nbsp;porovnání s&nbsp;ostatními moderními
textovými editory velmi malý &ndash; podle použitého režimu (32bit/64bit) je
spustitelný soubor <strong>/usr/bin/e3</strong> velký přibližně 13 či 17 kB a
žádné další soubory nejsou pro práci s&nbsp;<i>e3</i> zapotřebí. Textový editor
<i>e3</i> přitom nabízí uživatelům poměrně velké množství funkcí. Asi
nejzajímavější je existence několika režimů práce editoru &ndash; ten totiž
dokáže napodobit editor <i>WordStar</i> (spuštěno přes link
<strong>e3ws</strong>), <i>Emacs</i> (spuštěno přes link
<strong>e3em</strong>), <i>Vi/Vim</i> (spuštěno přes link
<strong>e3vi</strong>) <i>Pico/Nano</i> (spuštěno přes link
<strong>e3pi</strong>) či <i>NEdit (Nirvana Editor)</i> (spuštěno přes
<strong>e3ne</strong>). Režimy je možné dokonce přepínat i za běhu editoru a
součástí je i obrazovka s&nbsp;klávesovými zkratkami (to vše je samozřejmě
uloženo ve zmíněných 13 či 17 kB). <i>e3</i> nabízí dokonce i funkci
&bdquo;undo&ldquo;, obsahuje kalkulačku (dokáže spočítat i složitý aritmetický
výraz zapsaný v&nbsp;textu!) a &ndash; což je v&nbsp;našich podmínkách velmi
důležité &ndash; podporuje plnohodnotný osmibitový vstup znaků. Režim
kompatibility s&nbsp;editorem <i>vi</i> je překvapivě dobrý, ovšem například
uživatele <i>Vimu</i> některé neexistující příkazy a režimy budou pravděpodobně
mrzet (nejvíc asi absence plnohodnotného vizuálního režimu).</p>

<a href="http://www.root.cz/obrazek/213731/"><img src="http://i.iinfo.cz/images/335/e18-prev.png" class="image-213731" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 39: Obrazovka s&nbsp;nápovědou je dostupná za všech okolností a
přitom je vždy indikováno, jakou klávesovou zkratkou se nápověda
zobrazí.</i></p>

<p>Vzhledem ke zcela minimální velikosti tohoto textového editoru asi
nepřekvapí, že některé vlastnosti nejsou implementovány. Týká se to zejména
podpory pro zarovnávání textu a automatického odřádkování i přerovnání
odstavců, což je však funkce užitečná jen v&nbsp;některých případech, nikoli
například při úpravách konfiguračních souborů či zdrojových kódů. Taktéž chybí
podpora pro využití regulárních výrazů při hledání a nahrazování. To je však
vyřešeno elegantním způsobem &ndash; funkcí pro poslání vybraného textu do
filtru <strong>sed</strong>, což (znalým) uživatelům otevírá široké možnosti
použití. <i>e3</i> se pravděpodobně nestane jediným textovým editorem, který by
byl vhodný pro všechny příležitosti, ovšem ukazuje, že i velmi krátký program
dokáže být překvapivě mocný a přitom rychlý a současně nenáročný na systémové
zdroje.</p>

<a href="http://www.root.cz/obrazek/213733/"><img src="http://i.iinfo.cz/images/207/e19-prev.png" class="image-213733" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 40: Editace zdrojového kódu napsaného v&nbsp;programovacím jazyce
C.</i></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Kakoune: A Better Code Editor Heavily Inspired by Vim<br />
<a href="https://www.tecmint.com/kakoune-better-code-editor-for-linux/">https://www.tecmint.com/kakoune-better-code-editor-for-linux/</a>
</li>

<li>Kakoune demo<br />
<a href="https://vimeo.com/82711574">https://vimeo.com/82711574</a>
</li>

<li>6 Best Vi/Vim-Inspired Code Editors for Linux<br />
<a href="https://www.tecmint.com/vi-vim-inspired-code-editors-for-linux/">https://www.tecmint.com/vi-vim-inspired-code-editors-for-linux/</a>
</li>

<li>Why Kakoune — The quest for a better code editor<br />
<a href="https://kakoune.org/why-kakoune/why-kakoune.html">https://kakoune.org/why-kakoune/why-kakoune.html</a>
</li>

<li>Kakoune design<br />
<a href="https://github.com/mawww/kakoune/blob/master/doc/design.asciidoc">https://github.com/mawww/kakoune/blob/master/doc/design.asciidoc</a>
</li>

<li>Kakoune (modální textový editor)<br />
<a href="http://kakoune.org/">http://kakoune.org/</a>
</li>

<li>Kakoune: Selections<br />
<a href="https://github.com/mawww/kakoune/wiki/Selections">https://github.com/mawww/kakoune/wiki/Selections</a>
</li>

<li>Migrating from Vim<br />
<a href="https://github.com/mawww/kakoune/wiki/Migrating-from-Vim">https://github.com/mawww/kakoune/wiki/Migrating-from-Vim</a>
</li>

<li>kakoune-vertical-selections<br />
<a href="https://github.com/occivink/kakoune-vertical-selection">https://github.com/occivink/kakoune-vertical-selection</a>
</li>

<li>Evil (Emacs Wiki)<br />
<a href="https://www.emacswiki.org/emacs/Evil">https://www.emacswiki.org/emacs/Evil</a>
</li>

<li>Evil (na GitHubu)<br />
<a href="https://github.com/emacs-evil/evil">https://github.com/emacs-evil/evil</a>
</li>

<li>Evil (na stránkách repositáře MELPA)<br />
<a href="https://melpa.org/#/evil">https://melpa.org/#/evil</a>
</li>

<li>Evil Mode: How I Switched From VIM to Emacs<br />
<a href="https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html">https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse (část 2: vyhledávání a nahrazování textu)<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/</a>
</li>

<li>Emacs/Evil-mode - A basic reference to using evil mode in Emacs<br />
<a href="http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet">http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet</a>
</li>

<li>From Vim to Emacs+Evil chaotic migration guide<br />
<a href="https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/</a>
</li>

<li>Introduction to evil-mode {video)<br />
<a href="https://www.youtube.com/watch?v=PeVQwYUxYEg">https://www.youtube.com/watch?v=PeVQwYUxYEg</a>
</li>

<li>Vim-style keybinding in Emacs/Evil-mode<br />
<a href="https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8">https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8</a>
</li>

<li>Evil-surround<br />
<a href="https://github.com/emacs-evil/evil-surround">https://github.com/emacs-evil/evil-surround</a>
</li>

<li>Spacemacs<br />
<a href="http://spacemacs.org/">http://spacemacs.org/</a>
</li>

<li>Neovim: literally the future of vim<br />
<a href="https://neovim.io/">https://neovim.io/</a>
</li>

<li>AMP – A Vi/Vim Inspired Text Editor for Linux Terminal<br />
<a href="https://www.tecmint.com/amp-vi-vim-inspired-text-editor-for-linux/">https://www.tecmint.com/amp-vi-vim-inspired-text-editor-for-linux/</a>
</li>

<li>Amp: A text editor for your terminal<br />
<a href="https://github.com/jmacdonald/amp">https://github.com/jmacdonald/amp</a>
</li>

<li>Stránky projektu Amp.rs<br />
<a href="https://amp.rs/">https://amp.rs/</a>
</li>

<li>Dokumentace k editoru Amp<br />
<a href="https://amp.rs/docs/">https://amp.rs/docs/</a>
</li>

<li>Vis: a vi-like editor based on Plan 9's structural regular expressions <br />
<a href="https://github.com/martanne/vis">https://github.com/martanne/vis</a>
</li>

<li>Very opinionated Node.JS VI clone<br />
<a href="https://github.com/mikesmullin/nvi">https://github.com/mikesmullin/nvi</a>
</li>

<li>PyVim: Pure Python Vim clone<br />
<a href="https://github.com/prompt-toolkit/pyvim">https://github.com/prompt-toolkit/pyvim</a>
</li>

<li>pyvim 2.0.24 na PyPi<br />
<a href="https://pypi.org/project/pyvim/">https://pypi.org/project/pyvim/</a>
</li>

<li>vim2elvis (1)<br />
<a href="https://www.root.cz/clanky/vim2elvis-1/">https://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis (2)<br />
<a href="https://www.root.cz/clanky/vim2elvis-2/">https://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Seriál Textový editor Vim jako IDE<br />
<a href="https://www.root.cz/serialy/textovy-editor-vim-jako-ide/">https://www.root.cz/serialy/textovy-editor-vim-jako-ide/</a>
</li>

<li>Obsah Rootu označený nálepkou Vim<br />
<a href="https://www.root.cz/n/vim/">https://www.root.cz/n/vim/</a>
</li>

<li>Atom: moderní textový editor<br />
<a href="https://www.root.cz/clanky/atom-moderni-textovy-editor/">https://www.root.cz/clanky/atom-moderni-textovy-editor/</a>
</li>

<li>Atom: moderní textový editor (dokončení)<br />
<a href="https://www.root.cz/clanky/atom-moderni-textovy-editor-dokonceni/">https://www.root.cz/clanky/atom-moderni-textovy-editor-dokonceni/</a>
</li>

<li>Why I switched to VIM from Visual Studio Code<br />
<a href="https://freshman.tech/from-vscode-to-vim/">https://freshman.tech/from-vscode-to-vim/</a>
</li>

<li>VSCodeVim<br />
<a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim">https://marketplace.visualstudio.com/items?itemName=vscodevim.vim</a>
</li>

<li>VSCodeVim/Vim na GitHubu<br />
<a href="https://github.com/VSCodeVim/Vim">https://github.com/VSCodeVim/Vim</a>
</li>

<li>How Vim killed Atom and VSCode on my Machine<br />
<a href="https://medium.com/@aswinmohanme/how-vim-killed-atom-and-vscode-723a68ad59dc">https://medium.com/@aswinmohanme/how-vim-killed-atom-and-vscode-723a68ad59dc</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

