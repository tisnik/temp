<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Fuzzy výběry a vyhledávání</a></p>
<p><a href="#k02">2. Ukázky fuzzy výběrů</a></p>
<p><a href="#k03">3. Vyhledávání a nahrazování s&nbsp;ohledem na strukturu kódu</a></p>
<p><a href="#k04">4. Ukázka vyhledávání a nahrazování</a></p>
<p><a href="#k05">*** 5. Vyhledání všech výskytů symbolu</a></p>
<p><a href="#k06">*** 6. Multivýběr se všemi výskyty symbolu</a></p>
<p><a href="#k07">*** 7. Jump points</a></p>
<p><a href="#k08">8. Registry textového editoru Helix</a></p>
<p><a href="#k09">*** 9. Ukázky operací s&nbsp;registry</a></p>
<p><a href="#k10">10. Speciální registry</a></p>
<p><a href="#k11">*** 11. Makra</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">15. Od Vimu k&nbsp;Helixu</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Fuzzy výběry a vyhledávání</h2>

<p>První velmi důležitou a užitečnou vlastností textového editoru <i>Helix</i>,
s&nbsp;níž se dnes seznámíme, je podpora pro takzvané <i>fuzzy</i> vyhledávání
v&nbsp;seznamu všech identifikátorů získaných ze zdrojového kódu
s&nbsp;využitím tree-sitteru a LSP. Slovo <i>fuzzy</i> znamená, že se výběr
všech symbolů bude postupně zužovat tak, aby obsahoval jen symboly, jejichž
znaky zapsal uživatel do vstupního vyhledávacího políčka. Mezi specifikovanými
znaky může být libovolné množství jiných znaků, což je <i>velmi</i> užitečné
(mj.&nbsp;i proto, že přepisem či vynecháním jednoho znaku se výběr nemusí
nijak ovlivnit).</p>

<p>Fyzzy výběr se spouští klávesovou zkratkou <strong>Space+s</strong> a na
následujícím obrázku je patrné, jaké identifikátory se vyberou po zápisu
sekvence znaků &bdquo;env&ldquo;:</p>

*** image ***
<p><i>Obrázek 1: Identifikátory jsou seřazeny pravděpodobně na základě
Levenshteinovy vzdálenosti.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Ukázky fuzzy výběrů</h2>

<p>Podobně jako <a
href="https://www.root.cz/clanky/textovy-editor-helix-ve-funkci-vyvojoveho-prostredi-2-cast/">v&nbsp;předchozím
článku</a> si i dnes jednotlivé možnosti textového editoru Helix ukážeme na
sérii screenshotů. V&nbsp;této kapitole se budeme zabývat <a href="#k01">výše
popsaným</a> fuzzy vyhledáváním.</p>

*** image ***
<p><i>Obrázek 2: Zdrojový kód (v&nbsp;tomto případě naprogramovaný
v&nbsp;jazyku Go), jenž je otevřený v&nbsp;editoru Helix. LSP pro Go bylo
inicializováno automaticky po startu editoru.</i></p>

*** image ***
<p><i>Obrázek 3: Po stisku mezerníku se objeví toto menu s&nbsp;nabídkou
dalších příkazů. Mezi těmito příkazy lze najít i příkaz <strong>s &ndash; Open
Symbol Picker</strong>.</i></p>

*** image ***
<p><i>Obrázek 4: Dialog zobrazený po stisku klávesové zkratky
<strong>Space+s</strong>. Ihned (i u velkých projektů) se zobrazí dostupné
symboly, tj.&nbsp;konstanty, proměnné, funkce a typy.</i></p>

*** image ***
<p><i>Obrázek 5: A takto se chová fuzzy vyhledávání při výběru všech symbolů
obsahujících znaky &bdquo;err&ldquo; (nikoli nutně přímo za sebou).</i></p>

*** image ***
<p><i>Obrázek 6: Zde je funkce fuzzy vyhledávání zřejmá &ndash; vyhledávané
znaky skutečně nemusí být umístěný přímo za sebou (ovšem větší vzdálenost
posune daný výskyt níže v&nbsp;seznamu).</i></p>

*** image ***
<p><i>Obrázek 7: Na větší ploše terminálu uvidíme ještě jednu užitečnou
vlastnost textového editoru Helix &ndash; náhled na vybíraný symbol (zde
konkrétně na funkci <strong>printConfig</strong>).</i></p>

*** image ***
<p><i>Obrázek 8: Pracuje se korektně i se strukturami, rozhraními a
metodami.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vyhledávání a nahrazování s&nbsp;ohledem na strukturu kódu</h2>

<p>V&nbsp;klasickém Vimu je vyhledávání a nahrazování realizováno příkazem
<strong>:s</strong> (<i>substitute</i>). Jedná se o velmi mocný příkaz, protože
vyhledávaný vzor se zapisuje jako regulární výraz a text, kterým se má vzor
nahradit, může používat (očíslované) skupiny definované v&nbsp;regulárním
výrazu. Substitute je jednou z&nbsp;mocných zbraní Vimu, ale má několik
&bdquo;ale&ldquo; &ndash; nedokáže rozpoznat syntaktické kategorie daného
programovacího jazyka a ani nerozpozná kontext, v&nbsp;němž k&nbsp;vyhledávání
a náhradám dochází. To například znamená, že pokud budeme chtít přejmenovat
parametr <strong>cfg</strong> na <strong>config</strong>, může dojít
k&nbsp;situaci, že se v&nbsp;jiné části kódu přejmenuje funkce s&nbsp;tímto
jménem, třída pojmenovaná stejně atd. atd.</p>

<a href="https://www.root.cz/obrazek/339762/"><img src="https://i.iinfo.cz/images/633/vim-lsp-6-prev.png" class="image-339762" alt="" width="370" height="244"></a>
<p><i>Obrázek 9: Klasické chování omnicompletion ve Vimu lze rozšířit pomocí LSP. Povšimněte si dynamické nápovědy v horním okně.</i></p>

<p>Aby byla funkce hledat+nahradit rozumně použitelná i v&nbsp;případě
zdrojových kódů, je nutné, aby editor kódu &bdquo;porozuměl&ldquo;. To je
v&nbsp;současnosti řešeno pomocí LSP, tj.&nbsp;samotný <i>language server</i>
tuto funkcionalitu nabízí. Funkce LSP je pochopitelně možné volat i
z&nbsp;Vimu, což je problematika, kterou jsme se zabývali v&nbsp;článku <a
href="https://www.root.cz/clanky/pouziti-language-server-protocolu-v-textovem-editoru-vim/">Použití
Language Server Protocolu v&nbsp;textovém editoru Vim</a>. V&nbsp;případě
Helixu je integrace s&nbsp;LSP servery ještě užší, protože je postačuje mít
nainstalovány a žádná další konfigurace není zapotřebí. A jak se vlastně
v&nbsp;Helixu přejmenování symbolu provádí? Je to snadné &ndash; použije se
klávesová zkratka <strong>Space+r</strong>, kde <strong>r</strong> znamená
<i>rename</i>.</p>

<a href="https://www.root.cz/obrazek/339763/"><img src="https://i.iinfo.cz/images/633/vim-lsp-7-prev.png" class="image-339763" alt="vim-lsp" width="370" height="244"></a>
<p><i>Obrázek 10: Klasické chování omnicompletion ve Vimu. Povšimněte si
dynamické nápovědy v&nbsp;horním okně.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Ukázka vyhledávání a nahrazování</h2>

<p>Opět se podívejme na realizaci vyhledávání a nahrazování symbolů
(identifikátorů) v&nbsp;textovém editoru Helix:</p>

*** image ***
<p><i>Obrázek 11: Původní zdrojový kód. Kurzor je umístěn na symbolu
<strong>readClusterList</strong>.</i></p>

*** image ***
<p><i>Obrázek 12: Po stisku klávesy <strong>Space</strong> se opět objeví
kontextové menu.</i></p>

*** image ***
<p><i>Obrázek 13: Stiskem klávesy <strong>r</strong> se zapne příkaz
<strong>rename</strong>. Nové jméno symbolu se zapisuje do spodního řádku (zde
je již zapsáno).</i></p>

*** image ***
<p><i>Obrázek 14: Všechny <u>relevantní</u> výskyty symbolu/identifikátoru jsu
modifikovány.</i></p>

*** image ***
<p><i>Obrázek 15: Jiný zdrojový kód. Povšimněte si, že se ve dvou funkcích
nachází stejný symbol/identifikátor <strong>mockStorage</strong>.</i></p>

*** image ***
<p><i>Obrázek 16: Operací rename jsme přejmenovali všechny výskyty druhého
symbolu, což jsou řádky 211 a 214. Ostatní symboly, i když se stejným jménem,
nebyly změněny (což je přesně to, co vyžadujeme v&nbsp;praxi).</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

space+a
jump points: Ctrl+o Ctrl+i
gr - to usage - kapitola 5
space-h kapitola 6
R- selected->yanked


<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Registry textového editoru Helix</h2>

<p>Dalším užitečným a velmi často používaným nástrojem nabízeným textovým
editorem <i>Helix</i> jsou takzvané <i>registry</i> (což je myšlenka převzatá
z&nbsp;Vimu, ostatně jako u mnoha dalších věcí). Jedná se o proměnné
<i>Helixu</i> pojmenované jedním znakem, které v&nbsp;první řadě slouží pro
kopii či přenos editovaných textů pomocí příkazů <strong>c</strong>
(<i>change</i>), <strong>d</strong> (<i>delete</i>), <strong>y</strong>
(<i>yank</i>) a <strong>p</strong> (<i>paste</i>), což vlastně znamená, že
registry lze využít ve funkci pojmenovaných schránek (<i>clipboard</i>). Druhou
funkcí, které registry v&nbsp;tomto textovém editoru mají, je úschova maker,
která se zaznamenávají příkazem <strong>Q</strong> a vyvolávají se (spouští se)
příkazem <strong>@</strong> (pozor &ndash; chovají se jinak, než ve Vimu).</p>

<a href="http://i.iinfo.cz/images/42/vim04-7.png"><img src="http://i.iinfo.cz/images/42/vim04-7-prev.png" width="370" height="221" alt="registers_vim" /></a>
<p><i>Obrázek XX: Výpis všech aktuálně definovaných registrů tak, jak je tato
operace realizována ve Vimu. Povšimněte si, že některé registry ve skutečnosti
obsahují makra &ndash; jedná se například o registry <strong>a</strong>,
<strong>m</strong>, <strong>q</strong> a <strong>s</strong>.</i></p>

<p>Pro práci s&nbsp;registry se používá klávesová zkratka <strong>"</strong>,
po které musí následovat jméno registru <strong>a</strong> až
<strong>z</strong> popř.&nbsp;jméno speciálního registru zmíněného <a
href="#k10">v&nbsp;desáté kapitole</a>. Výběr registru může být součástí
prováděné operace (například kopie výběru do zvoleného registru) nebo může
operaci předcházet (vložení textu ze zvoleného registru na aktuální pozici
kurzoru). Všechny typické příklady použití registrů si pochopitelně ukážeme <a
href="#k09">v&nbsp;navazující kapitole</a>.</p>

*** image ***
<p><i>Obrázek XX: V&nbsp;textovém editoru Helix se ihned po stisku klávesy
<strong>"</strong> (výběr registru) zobrazí menu s&nbsp;obsahem všech použitých
registrů, tj.&nbsp;registrů, které obsahují neprázdný řetězec.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. Speciální registry</h2>

<p>Podobně jako v&nbsp;případě značek, existují registry naplňované uživatelem
a registry, jejichž obsah je měněn textovým editorem automaticky při provádění
různých operací. Jména a význam všech registrů textového editoru <i>Helix</i>
můžete najít v&nbsp;následující tabulce:</p>

<table>
<tr><th>Registr</th><th>Význam</th></tr>
<tr><td>a-z</td><td>registry, které je možné přímo měnit uživatelem</td></tr>
<tr><td>/</td><td>registr obsahující posledně vyhledávaný řetězec (resp.&nbsp;text odpovídající regulárnímu výrazu)</td></tr>
<tr><td>:</td><td>registr obsahující poslední příkaz, vhodné při vyvolání tohoto příkazu jako makra</td></tr>
<tr><td>"</td><td>implicitní registr pro operace <strong>c</strong>, <strong>d</strong> nebo <strong>y</strong></td></tr>
<tr><td>_</td><td>bezedná černá díra pro texty</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: ve Vimu existuje větší množství registrů
se speciálními funkcemi. Pouze pro ukázku rozdílů mezi oběma (v&nbsp;tomto
seriálu často porovnávanými) editory:</div></p>

<table>
<tr><th>Registr</th><th>Význam</th></tr>
<tr><td>a-z</td><td>registry, které je možné přímo měnit uživatelem</td></tr>
<tr><td>0-9</td><td>registry naplňované automaticky příkazy <strong>d</strong> a <strong>y</strong></td></tr>
<tr><td>%</td><td>registr obsahující jméno právě editovaného souboru</td></tr>
<tr><td>:</td><td>registr obsahující poslední příkaz, vhodné při vyvolání tohoto příkazu jako makra</td></tr>
<tr><td>=</td><td>pseudoregistr používaný pro výpočet matematických a &bdquo;řetězcových&ldquo; výrazů</td></tr>
<tr><td>*</td><td>registr obsahující obsah schránky (viz též sedmou kapitolu s&nbsp;vysvětlením)</td></tr>
<tr><td>+</td><td>registr obsahující obsah schránky (viz též sedmou kapitolu s&nbsp;vysvětlením)</td></tr>
<tr><td>/</td><td>registr obsahující posledně vyhledávaný řetězec (resp.&nbsp;text odpovídající regulárnímu výrazu)</td></tr>
<tr><td>"</td><td>implicitní registr pro operace <strong>c</strong>, <strong>d</strong>, <strong>s</strong> nebo <strong>y</strong></td></tr>
<tr><td>-</td><td>implicitní registr pro operace, které mění menší část textu, než je jeden textový řádek</td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Od Vimu k&nbsp;Helixu</h2>

<p>Jak Vim tak i Helix patří mezi modální textové editory a některé koncepty
mají prakticky shodné. Například se jedná o podporu čtyř základních režimů
&ndash; normálního (<i>normal</i>), příkazového (<i>command</i>), vkládacího
(<i>insert</i>) a vizuálního (<i>visual</i>), dokonce i zkratky pro přechody
mezi těmito režimy jsou prakticky shodné. Ovšem až na základní klávesové
zkratky se tyto textové editory ovládají odlišným způsobem, což poněkud ztěžuje
přechod od Vimu k&nbsp;Helixu (nebo naopak) *. V&nbsp;navazujících kapitolách
se pokusím vypsat ty vlastnosti Vimu, které se v&nbsp;Helixu buď nevyskytují,
nebo se vyvolávají odlišnými způsoby.</p>

<p><div class="rs-tip-major">* osobně nyní používám oba zmíněné textové
editory, konkrétně Helix pro psaní kódu a Vim pro psaní dokumentace, článků a
poznámek. A i když to může znít zvláštně, nejsou přechody mezi nimi
v&nbsp;praxi až tak komplikované, protože základní koncepty zůstávají
zachovány.</div></p>

<p><div class="rs-tip-major">Poznámka: na poměrně často kladený dotaz
&bdquo;jak přizpůsobit Helix tak, aby se choval jako Vim&ldquo;, se většinou
odpovídá tak, že přednosti Helixu jsou z&nbsp;velké části dány právě odlišným
přístupem k&nbsp;ovládání.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Helix: nový modální textový editor inspirovaný Vimem a Kakoune<br />
<a href="https://www.root.cz/clanky/helix-novy-modalni-textovy-editor-inspirovany-vimem-a-kakoune/">https://www.root.cz/clanky/helix-novy-modalni-textovy-editor-inspirovany-vimem-a-kakoune/</a>
</li>

<li>Představení Helixu<br />
<a href="https://helix-editor.com/">https://helix-editor.com/</a>
</li>

<li>Helix: A post-modern modal text editor<br />
<a href="https://githubplus.com/helix-editor/helix">https://githubplus.com/helix-editor/helix</a>
</li>

<li>Helix na GitHubu<br />
<a href="https://github.com/helix-editor/helix">https://github.com/helix-editor/helix</a>
</li>

<li>Helix: dokumentace<br />
<a href="https://docs.helix-editor.com/">https://docs.helix-editor.com/</a>
</li>

<li>Helix: troubleshooting<br />
<a href="https://github.com/helix-editor/helix/wiki/Troubleshooting">https://github.com/helix-editor/helix/wiki/Troubleshooting</a>
</li>

<li>Klávesové zkratky Helixu<br />
<a href="https://docs.helix-editor.com/keymap.html">https://docs.helix-editor.com/keymap.html</a>
</li>

<li>How to install the default language servers<br />
<a href="https://github.com/helix-editor/helix/wiki/How-to-install-the-default-language-servers">https://github.com/helix-editor/helix/wiki/How-to-install-the-default-language-servers</a>
</li>

<li>Taking a look at the Helix editor (Nov 5th, 2022)<br />
<a href="https://www.youtube.com/watch?v=8L308PdmhMY">https://www.youtube.com/watch?v=8L308PdmhMY</a>
</li>

<li>Helix &ndash; the Rust Powered Development Environment<br />
<a href="https://www.youtube.com/watch?v=xHebvTGOdH8">https://www.youtube.com/watch?v=xHebvTGOdH8</a>
</li>

<li>Python LSP setups for productive coding<br />
<a href="https://www.reddit.com/r/HelixEditor/comments/13wpa72/python_lsp_setups_for_productive_coding/">https://www.reddit.com/r/HelixEditor/comments/13wpa72/python_lsp_setups_for_productive_coding/</a>
</li>

<li>Helix documentation: Configuration<br />
<a href="https://docs.helix-editor.com/configuration.html">https://docs.helix-editor.com/configuration.html</a>
</li>

<li>Helix documentation: Languages<br />
<a href="https://docs.helix-editor.com/master/languages.html">https://docs.helix-editor.com/master/languages.html</a>
</li>

<li>Looking to try Helix. How is support for Python?<br />
<a href="https://www.reddit.com/r/HelixEditor/comments/119mhch/looking_to_try_helix_how_is_support_for_python/">https://www.reddit.com/r/HelixEditor/comments/119mhch/looking_to_try_helix_how_is_support_for_python/</a>
</li>

<li>Python LSP Server (GitHub)<br />
<a href="https://github.com/python-lsp/python-lsp-server#configuration">https://github.com/python-lsp/python-lsp-server#configuration</a>
</li>

<li>(dot file): Helix<br />
<a href="https://github.com/gerlacdt/dotfiles/blob/e50ea089dbfd5e71e2cb6c10abfde305bf4a5b6e/helix/.config/helix/languages.toml#L2">https://github.com/gerlacdt/dotfiles/blob/e50ea089dbfd5e71e2cb6c10abfde305bf4a5b6e/helix/.config/helix/languages.toml#L2</a>
</li>

<li>gopls<br />
<a href="https://www.getman.io/posts/gopls/">https://www.getman.io/posts/gopls/</a>
</li>

<li>Kakoune: A Better Code Editor Heavily Inspired by Vim<br />
<a href="https://www.tecmint.com/kakoune-better-code-editor-for-linux/">https://www.tecmint.com/kakoune-better-code-editor-for-linux/</a>
</li>

<li>Kakoune demo<br />
<a href="https://vimeo.com/82711574">https://vimeo.com/82711574</a>
</li>

<li>6 Best Vi/Vim-Inspired Code Editors for Linux<br />
<a href="https://www.tecmint.com/vi-vim-inspired-code-editors-for-linux/">https://www.tecmint.com/vi-vim-inspired-code-editors-for-linux/</a>
</li>

<li>Why Kakoune — The quest for a better code editor<br />
<a href="https://kakoune.org/why-kakoune/why-kakoune.html">https://kakoune.org/why-kakoune/why-kakoune.html</a>
</li>

<li>Kakoune design<br />
<a href="https://github.com/mawww/kakoune/blob/master/doc/design.asciidoc">https://github.com/mawww/kakoune/blob/master/doc/design.asciidoc</a>
</li>

<li>Kakoune (modální textový editor)<br />
<a href="http://kakoune.org/">http://kakoune.org/</a>
</li>

<li>Kakoune: Selections<br />
<a href="https://github.com/mawww/kakoune/wiki/Selections">https://github.com/mawww/kakoune/wiki/Selections</a>
</li>

<li>Migrating from Vim<br />
<a href="https://github.com/mawww/kakoune/wiki/Migrating-from-Vim">https://github.com/mawww/kakoune/wiki/Migrating-from-Vim</a>
</li>

<li>kakoune-vertical-selections<br />
<a href="https://github.com/occivink/kakoune-vertical-selection">https://github.com/occivink/kakoune-vertical-selection</a>
</li>

<li>Langserver.org<br />
<a href="https://langserver.org/">https://langserver.org/</a>
</li>

<li>Language Server Protocol<br />
<a href="https://microsoft.github.io/language-server-protocol/">https://microsoft.github.io/language-server-protocol/</a>
</li>

<li>Language Server Protocol Specification<br />
<a href="https://microsoft.github.io/language-server-protocol/specification">https://microsoft.github.io/language-server-protocol/specification</a>
</li>

<li>Implementations Language Servers<br />
<a href="https://microsoft.github.io/language-server-protocol/implementors/servers">https://microsoft.github.io/language-server-protocol/implementors/servers</a>
</li>

<li>JSON-RPC 2.0 Specification<br />
<a href="https://www.jsonrpc.org/specification">https://www.jsonrpc.org/specification</a>
</li>

<li>Why You Should Know the Language Server Protocol<br />
<a href="https://tomassetti.me/what-is-the-language-server-protocol/">https://tomassetti.me/what-is-the-language-server-protocol/</a>
</li>

<li>Language Server Protocol: A Language Server For DOT With Visual Studio Code<br />
<a href="https://tomassetti.me/language-server-dot-visual-studio/">https://tomassetti.me/language-server-dot-visual-studio/</a>
</li>

<li>Python Language Server<br />
<a href="https://github.com/palantir/python-language-server">https://github.com/palantir/python-language-server</a>
</li>

<li>Jedi - an awesome autocompletion/static analysis library for Python<br />
<a href="https://github.com/davidhalter/jedi">https://github.com/davidhalter/jedi</a>
</li>

<li>What is lsp<br />
<a href="https://www.reddit.com/r/vim/comments/7lnhrt/which_lsp_plugin_should_i_use/">https://www.reddit.com/r/vim/comments/7lnhrt/which_lsp_plugin_should_i_use/</a>
</li>

<li>Evil (Emacs Wiki)<br />
<a href="https://www.emacswiki.org/emacs/Evil">https://www.emacswiki.org/emacs/Evil</a>
</li>

<li>Evil (na GitHubu)<br />
<a href="https://github.com/emacs-evil/evil">https://github.com/emacs-evil/evil</a>
</li>

<li>Evil (na stránkách repositáře MELPA)<br />
<a href="https://melpa.org/#/evil">https://melpa.org/#/evil</a>
</li>

<li>Evil Mode: How I Switched From VIM to Emacs<br />
<a href="https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html">https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse (část 2: vyhledávání a nahrazování textu)<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/</a>
</li>

<li>Emacs/Evil-mode - A basic reference to using evil mode in Emacs<br />
<a href="http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet">http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet</a>
</li>

<li>From Vim to Emacs+Evil chaotic migration guide<br />
<a href="https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/</a>
</li>

<li>Introduction to evil-mode {video)<br />
<a href="https://www.youtube.com/watch?v=PeVQwYUxYEg">https://www.youtube.com/watch?v=PeVQwYUxYEg</a>
</li>

<li>Vim-style keybinding in Emacs/Evil-mode<br />
<a href="https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8">https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8</a>
</li>

<li>Evil-surround<br />
<a href="https://github.com/emacs-evil/evil-surround">https://github.com/emacs-evil/evil-surround</a>
</li>

<li>Spacemacs<br />
<a href="http://spacemacs.org/">http://spacemacs.org/</a>
</li>

<li>Neovim: literally the future of vim<br />
<a href="https://neovim.io/">https://neovim.io/</a>
</li>

<li>AMP – A Vi/Vim Inspired Text Editor for Linux Terminal<br />
<a href="https://www.tecmint.com/amp-vi-vim-inspired-text-editor-for-linux/">https://www.tecmint.com/amp-vi-vim-inspired-text-editor-for-linux/</a>
</li>

<li>Amp: A text editor for your terminal<br />
<a href="https://github.com/jmacdonald/amp">https://github.com/jmacdonald/amp</a>
</li>

<li>Stránky projektu Amp.rs<br />
<a href="https://amp.rs/">https://amp.rs/</a>
</li>

<li>Dokumentace k editoru Amp<br />
<a href="https://amp.rs/docs/">https://amp.rs/docs/</a>
</li>

<li>Vis: a vi-like editor based on Plan 9's structural regular expressions <br />
<a href="https://github.com/martanne/vis">https://github.com/martanne/vis</a>
</li>

<li>Very opinionated Node.JS VI clone<br />
<a href="https://github.com/mikesmullin/nvi">https://github.com/mikesmullin/nvi</a>
</li>

<li>PyVim: Pure Python Vim clone<br />
<a href="https://github.com/prompt-toolkit/pyvim">https://github.com/prompt-toolkit/pyvim</a>
</li>

<li>pyvim 2.0.24 na PyPi<br />
<a href="https://pypi.org/project/pyvim/">https://pypi.org/project/pyvim/</a>
</li>

<li>vim2elvis (1)<br />
<a href="https://www.root.cz/clanky/vim2elvis-1/">https://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis (2)<br />
<a href="https://www.root.cz/clanky/vim2elvis-2/">https://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Seriál Textový editor Vim jako IDE<br />
<a href="https://www.root.cz/serialy/textovy-editor-vim-jako-ide/">https://www.root.cz/serialy/textovy-editor-vim-jako-ide/</a>
</li>

<li>Obsah Rootu označený nálepkou Vim<br />
<a href="https://www.root.cz/n/vim/">https://www.root.cz/n/vim/</a>
</li>

<li>Atom: moderní textový editor<br />
<a href="https://www.root.cz/clanky/atom-moderni-textovy-editor/">https://www.root.cz/clanky/atom-moderni-textovy-editor/</a>
</li>

<li>Atom: moderní textový editor (dokončení)<br />
<a href="https://www.root.cz/clanky/atom-moderni-textovy-editor-dokonceni/">https://www.root.cz/clanky/atom-moderni-textovy-editor-dokonceni/</a>
</li>

<li>Why I switched to VIM from Visual Studio Code<br />
<a href="https://freshman.tech/from-vscode-to-vim/">https://freshman.tech/from-vscode-to-vim/</a>
</li>

<li>VSCodeVim<br />
<a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim">https://marketplace.visualstudio.com/items?itemName=vscodevim.vim</a>
</li>

<li>VSCodeVim/Vim na GitHubu<br />
<a href="https://github.com/VSCodeVim/Vim">https://github.com/VSCodeVim/Vim</a>
</li>

<li>How Vim killed Atom and VSCode on my Machine<br />
<a href="https://medium.com/@aswinmohanme/how-vim-killed-atom-and-vscode-723a68ad59dc">https://medium.com/@aswinmohanme/how-vim-killed-atom-and-vscode-723a68ad59dc</a>
</li>

<li>tree-sitter<br />
<a href="https://github.com/tree-sitter/tree-sitter">https://github.com/tree-sitter/tree-sitter</a>
</li>

<li>Introduction: tree-siter<br />
<a href="https://tree-sitter.github.io/tree-sitter/">https://tree-sitter.github.io/tree-sitter/</a>
</li>

<li>tree-siter: Queries<br />
<a href="https://tree-sitter.github.io/tree-sitter/syntax-highlighting#queries">https://tree-sitter.github.io/tree-sitter/syntax-highlighting#queries</a>
</li>

<li>Textový editor Vim jako IDE<br />
<a href="https://www.root.cz/clanky/textovy-editor-vim-jako-ide/">https://www.root.cz/clanky/textovy-editor-vim-jako-ide/</a>
</li>

<li>Textový editor Vim jako IDE (2.část)<br />
<a href="https://www.root.cz/clanky/textovy-editor-vim-jako-ide-2-cast/">https://www.root.cz/clanky/textovy-editor-vim-jako-ide-2-cast/</a>
</li>

<li>Textový editor Vim jako IDE (3.část) <br />
<a href="https://www.root.cz/clanky/textovy-editor-vim-jako-ide-3-cast/">https://www.root.cz/clanky/textovy-editor-vim-jako-ide-3-cast/</a>
</li>

<li>Textový editor Vim jako IDE (4.část)<br />
<a href="https://www.root.cz/clanky/textovy-editor-vim-jako-ide-4-cast/">https://www.root.cz/clanky/textovy-editor-vim-jako-ide-4-cast/</a>
</li>

<li>Textový editor Vim jako IDE (5.část)<br />
<a href="https://www.root.cz/clanky/textovy-editor-vim-jako-ide-5-cast/">https://www.root.cz/clanky/textovy-editor-vim-jako-ide-5-cast/</a>
</li>

<li>A Comprehensive Introduction to Tree-sitter<br />
<a href="https://derek.stride.host/posts/comprehensive-introduction-to-tree-sitter">https://derek.stride.host/posts/comprehensive-introduction-to-tree-sitter</a>
</li>

<li>Guide to your first Tree-sitter grammar<br />
<a href="https://gist.github.com/Aerijo/df27228d70c633e088b0591b8857eeef">https://gist.github.com/Aerijo/df27228d70c633e088b0591b8857eeef</a>
</li>

<li>LR parser (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/LR_parser">https://en.wikipedia.org/wiki/LR_parser</a>
</li>

<li>GLR Parser (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GLR_parser">https://en.wikipedia.org/wiki/GLR_parser</a>
</li>

<li>Helix – Getting Dangerous<br />
<a href="https://www.youtube.com/watch?v=i_qsYALaFVo">https://www.youtube.com/watch?v=i_qsYALaFVo</a>
</li>

<li>Helix – Getting More Dangerous (Part 2)<br />
<a href="https://www.youtube.com/watch?v=7mTi278jUS8">https://www.youtube.com/watch?v=7mTi278jUS8</a>
</li>

<li>Helix – Bridging the IDE gap with CLI tools (Part 3)<br />
<a href="https://www.youtube.com/watch?v=Un_vn8U4cEw">https://www.youtube.com/watch?v=Un_vn8U4cEw</a>
</li>

<li>Helix Keyboard Shortcuts by HiddenMonkey<br />
<a href="https://cheatography.com/hiddenmonkey/cheat-sheets/helix/">https://cheatography.com/hiddenmonkey/cheat-sheets/helix/</a>
</li>

<li>Migrating from Vim to Helix<br />
<a href="https://github.com/helix-editor/helix/wiki/Migrating-from-Vim">https://github.com/helix-editor/helix/wiki/Migrating-from-Vim</a>
</li>

<li>Migrating from Vim to Kakoune<br />
<a href="https://github.com/mawww/kakoune/wiki/Migrating-from-Vim">https://github.com/mawww/kakoune/wiki/Migrating-from-Vim</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

