<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafická nadstavba nad GNU Debuggerem gdbgui a její alternativy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafická nadstavba nad GNU Debuggerem gdbgui a její alternativy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Pro nástroj GNU Debugger, jehož původní uživatelské rozhraní je založeno na příkazovém řádku, vzniklo poměrně velké množství nadstaveb s GUI. Jedná se o projekty DDD, KDbg či Nemiver. K těmto aplikacím nedávno přibyla další zajímavá alternativa: nástroj nazvaný gdbgui.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Grafická nadstavba nad GNU Debuggerem gdbgui a její alternativy</a></p>
<p><a href="#k02">2. Existující nadstavby pro GNU Debugger</a></p>
<p><a href="#k03">3. cgdb (curses debugger)</a></p>
<p><a href="#k04">4. DDD (Data Display Debubber)</a></p>
<p><a href="#k05">5. Nemiver</a></p>
<p><a href="#k06">6. KDbg</a></p>
<p><a href="#k07">7. Emacs</a></p>
<p><a href="#k08">8. Clewn</a></p>
<p><a href="#k09">9. Pyclewn</a></p>
<p><a href="#k10">10. Nová nadstavba na GNU Debuggerem: gdbgui</a></p>
<p><a href="#k11">11. Technologie, na nichž je nástroj gdbgui postaven</a></p>
<p><a href="#k12">12. Instalace a první spuštění</a></p>
<p><a href="#k13">13. Zobrazení zdrojového kódu a disassemblovaného strojového kódu</a></p>
<p><a href="#k14">*** 14. Krokování a sledování hodnot lokálních proměnných</a></p>
<p><a href="#k15">*** 15. Výrazy, zobrazení grafů historie vyhodnocených výrazů</a></p>
<p><a href="#k16">*** 16. Obsah zásobníkových rámců</a></p>
<p><a href="#k17">*** 17. Výpis složitějších datových struktur (pole, struktury, stromy)</a></p>
<p><a href="#k18">*** 18. Ladění programů napsaných v&nbsp;programovacím jazyku Rust</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>




<p><a name="k01"></a></p>
<h2 id="k01">1. Grafická nadstavba nad GNU Debuggerem gdbgui a její alternativy</h2>

<p>S&nbsp;nástrojem GNU Debugger jsme se již na stránkách <a
href="http://www.root.cz">Roota</a> několikrát setkali. Ostatně se ani není
čemu divit, protože se jedná o skutečně velmi dobrý nástroj, který je navíc
skriptovatelný, podporuje ladění aplikací psaných v&nbsp;různých programovacích
jazycích (nejenom tedy v&nbsp;C a C++), vzdálené ladění, tvorbu nadstaveb
komunikujících s&nbsp;GNU Debuggerem s&nbsp;využitím standardního protokolu
atd. Ovšem univerzálnost GNU Debuggeru a velké množství dostupných příkazů do
značné míry komplikuje jeho ovládání, především těm vývojářům, kteří debugger
nepoužívají tak často, aby se jim vyplatilo věnovat velké množství času pro
zjištění všech možností a triků, které jim GNU Debugger nabízí.</p>

<a href="https://www.root.cz/obrazek/297106/"><img src="https://i.iinfo.cz/images/627/gdb1-1-prev.png" class="image-297106" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 1: Klasické rozhraní GNU Debuggeru ovládaného z&nbsp;příkazového
řádku.</i></p>

<p>Právě z&nbsp;tohoto důvodu vznikly různé nadstavby nad GNU Debuggerem, které
se snaží alespoň ty nejčastěji používané operace a příkazy uživatelům nabídnout
z&nbsp;prostředí s&nbsp;plnohodnotným celoobrazovkovým textovým či přímo
grafickým uživatelským rozhraním. Zde je nutné připomenout, že prakticky
všechny existující nadstavby nad GNU Debuggerem skutečně nabízí pouze
podmnožinu všech jeho funkcí; ty pokročilejší funkce je nutné stále volat
s&nbsp;využitím příkazového řádku (ostatně i proto ho nadstavby většinou taktéž
nabízí).</p>

<a href="https://www.root.cz/obrazek/297107/"><img src="https://i.iinfo.cz/images/627/gdb1-2-prev.png" class="image-297107" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 2: GNU Debugger samozřejmě podporuje i disassembling strojového
kódu.</i></p>

<p>GNU Assembler byl sice původně nástrojem ovládaným čistě z&nbsp;příkazového
řádku nebo vzdáleně pomocí síťového protokolu (<a
href="http://www.embecosm.com/appnotes/ean4/embecosm-howto-rsp-server-ean4-issue-2.html">RSP</a>),
ovšem později byl rozšířen o jednoduché textové uživatelské rozhraní (TUI). To
se zapíná a konfiguruje příkazem <strong>layout</strong>.</p>

<a href="https://www.root.cz/obrazek/295040/"><img src="https://i.iinfo.cz/images/334/aarch64-assembly-1-prev.png" class="image-295040" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 3: GDB s&nbsp;jeho textovým uživatelským rozhraním.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Existující nadstavby pro GNU Debugger</h2>

<p>Tvůrci nadstaveb nad GNU Debuggerem zvolili hned několik různých
technologií. Některé nadstavby, zejména se to týká <i>Data Display Debuggeru
(DDD)</i>, <i>Nemiveru</i> a <i>KDbg</i>, jsou samostatně běžící aplikace
s&nbsp;plnohodnotným grafickým uživatelským rozhraním, které si samy GNU
Debugger spouští a komunikují s&nbsp;ním. Alternativní <i>cgdb</i> používá
textové uživatelské rozhraní, ale v&nbsp;ostatních ohledech se podobá trojici
předchozích nástrojů. <i>Grand Unified Debugger</i>, <i>Clewn</i> a
<i>PyClewn</i> jsou nadstavby nad programátorskými textovými editory Emacs a
Vim.</p>

<a href="https://www.root.cz/obrazek/297108/"><img src="https://i.iinfo.cz/images/627/gdb1-3-prev.png" class="image-297108" alt="&#160;" width="370" height="173" /></a>
<p><i>Obrázek 3: V&nbsp;minulosti velmi populární nástroj Turbo Debugger je
vybaven celoobrazovkovým textovým uživatelským rozhraním (TUI) připomínajícím
další produkty vytvořené společností Borland.</i></p>

<p>A konečně <i>gdbgui</i> je postavena na webových technologiích, konkrétně na
serveru komunikujícím s&nbsp;GNU Debuggerem a klientským kódem běžícím ve
webovém prohlížeči, který zajišťuje GUI. Každé z&nbsp;těchto řešení samozřejmě
má své výhody ale i zápory; o některých z&nbsp;nich se stručně zmíníme
v&nbsp;navazujících kapitolách.</p>

<a href="https://www.root.cz/obrazek/297109/"><img src="https://i.iinfo.cz/images/627/gdb1-4-prev.png" class="image-297109" alt="&#160;" width="370" height="173" /></a>
<p><i>Obrázek 4: Jedno ze speciálních oken Turbo Debuggeru, v&nbsp;němž se
zobrazuje stav mikroprocesoru (obsahy pracovních registrů i příznakových bitů),
obsah vybrané části operační paměti a taktéž zdrojový kód proložený
disassemblovaným strojovým kódem (v&nbsp;této části okna je zvýrazněn právě
prováděný řádek).</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. cgdb (curses debugger)</h2>

<p>Nástroj nazvaný <i>cgdb</i> je založený na knihovně <i>curses</i>
resp.&nbsp;<i>ncurses</i>, tudíž ho je možné využít v&nbsp;terminálu, na
vzdáleném stroji připojeném přes SSH atd. Ve svém základním nastavení nástroj
<i>cgdb</i> rozděluje okno terminálu (konzole) na dvě části. V&nbsp;horní části
je zobrazen zdrojový kód laděné aplikace a v&nbsp;části dolní pak rozhraní
samotného <i>GNU Debuggeru</i>. Mezi oběma částmi je možné se s&nbsp;využitím
několika klávesových zkratek přepínat, přičemž je nutné poznamenat, že většinu
složitějších příkazů je možné zadávat pouze v&nbsp;rozhraní <i>GNU
Debuggeru</i>.</p>

<a href="https://www.root.cz/obrazek/297110/"><img src="https://i.iinfo.cz/images/627/gdb1-5-prev.png" class="image-297110" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 5: Takto vypadá textové uživatelské rozhraní nástroje cgbd po
spuštění. V&nbsp;horním okně můžeme vidět zdrojový kód se zeleně zvýrazněným
aktivním řádkem, v&nbsp;dolní polovině terminálu se pak nachází rozhraní GNU
Debuggeru.</i></p>

<p>Horní část slouží zejména pro dobrou orientaci v&nbsp;laděném programu, pro
zobrazení nastavených breakpointů (v&nbsp;základním nastavení je použita
červená barva) a taktéž pro zobrazení místa, v&nbsp;němž se právě nachází
laděný program (v&nbsp;základním nastavení je tento řádek zobrazen zeleně).</p>

<a href="https://www.root.cz/obrazek/297111/"><img src="https://i.iinfo.cz/images/627/gdb1-6-prev.png" class="image-297111" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 6: Ladění programu v&nbsp;cgdb. Na řádku 21 je nastaven
breakpoint, proto je tento řádek zvýrazněn červeně. Řízení programu přešlo na
řádek číslo 23 (zvýrazněno zeleně) a v&nbsp;dolní části si vývojář
s&nbsp;využitím příkazu <strong>print</strong> vypsal obsah dvou lokálních
proměnných.</i></p>

<p>V&nbsp;nástroji <i>cgdb</i> se využívají klávesové zkratky známé především
z&nbsp;textových editorů Vi a Vim, ovšem i ti uživatelé, kteří tyto editory
nepoužívají (a tudíž dané zkratky neznají), nebudou ztraceni, protože se
například ve zdrojovém textu mohou pro přesun kurzoru používat i kurzorové
klávesy atd. <i>cgdb</i> obsahuje i vestavěnou nápovědu dostupnou po stisku
klávesy F1.</p>

<a href="https://www.root.cz/obrazek/295041/"><img src="https://i.iinfo.cz/images/334/aarch64-assembly-2-prev.png" class="image-295041" alt="&#160;" width="370" height="248" /></a>
<p><i>Obrázek 7: Další pohled na nástroj cgdb, tentokrát při ladění kódu pro
mikroprocesor s&nbsp;architekturou AArch64.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. DDD (Data Display Debugger)</h2>

<p>Další nadstavba nad <i>GNU Debuggerem</i> se jmenuje <i>Data Display
Debugger</i>. Tato nadstavba nabízí uživatelům při ladění aplikací plnohodnotné
grafické uživatelské rozhraní, jehož jednotlivé ovládací prvky a jejich chování
sice mohou působit zastarale (což je způsobeno použitou GUI knihovnou), ve
skutečnosti je však celé uživatelské rozhraní <i>Data Display Debuggeru</i>
velmi flexibilní, což vynikne především při použití dvou a více monitorů (to je
dnes pro vývojáře asi standardní konfigurace).</p>

<a href="https://www.root.cz/obrazek/297112/"><img src="https://i.iinfo.cz/images/627/gdb1-7-prev.png" class="image-297112" alt="&#160;" width="320" height="270" /></a>
<p><i>Obrázek 7: Pokud se nastaví breakpointy, jsou viditelné jak ve zdrojovém
kódu (pokud je samozřejmě k&nbsp;dispozici), tak i v&nbsp;okně
s&nbsp;disassemblovaným strojovým kódem.</i></p>

<p>Příkladem flexibility grafického uživatelského rozhraní <i>Data Display
Debuggeru</i> jsou například &bdquo;odtrhávací&ldquo; menu (<i>tear off
menu</i>), které je možné velmi snadno změnit na nemodální dialogy
s&nbsp;nabídkou příkazů. <i>Data Display Debugger</i> lze využít i pro
komunikaci s&nbsp;dalšími debuggery, například s&nbsp;debuggerem jazyka Perl,
debuggerem skriptů psaných v&nbsp;BASHi a v&nbsp;neposlední řadě taktéž pro
ovládání <i>pydb</i>, což je jeden z&nbsp;debuggerů používaných vývojáři, kteří
pro tvorbu programů používají jazyk Python</p>

<a href="https://www.root.cz/obrazek/297113/"><img src="https://i.iinfo.cz/images/627/gdb1-8-prev.png" class="image-297113" alt="&#160;" width="320" height="270" /></a>
<p><i>Obrázek 8: V&nbsp;průběhu ladění nativních aplikací může být užitečné si
zobrazit obsahy všech pracovních registrů mikroprocesoru. I tuto možnost Data
Display Debugger samozřejmě programátorům nabízí.</i></p>

<p>Při ladění prakticky jakékoli složitější aplikace je nutné sledovat jak
vlastní programový kód (ať již na úrovni zdrojového programového kódu či na
úrovni assembleru, tj.&nbsp;jednotlivých strojových instrukcí), tak i datové
struktury používané tímto kódem. Tyto struktury mohou být velmi komplikované,
zejména pak ve chvíli, kdy je laděn program vytvořený v&nbsp;C či C++, kdy je
mnohdy nutné používat lineárně vázané seznamy, různé typy stromů, pole struktur
atd. Právě z&nbsp;tohoto důvodu dostala aplikace <i>Data Display Debugger</i>
svoje jméno, protože prohlížení a analýza dat je zde poměrně propracovaná.</p>

<a href="https://www.root.cz/obrazek/297114/"><img src="https://i.iinfo.cz/images/627/gdb1-9-prev.png" class="image-297114" alt="&#160;" width="370" height="256" /></a>
<p><i>Obrázek 9: Zobrazení několika prvků binárního stromu v&nbsp;Data Display
Debuggeru. Povšimněte si, jakým způsobem se pracuje s&nbsp;ukazateli
nastavenými na hodnotu NULL.</i></p>

<a href="https://www.root.cz/obrazek/297115/"><img src="https://i.iinfo.cz/images/627/gdb1-10-prev.png" class="image-297115" alt="&#160;" width="370" height="254" /></a>
<p><i>Obrázek 10: Alternativní pohled na data, se kterými aplikace
pracuje.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nemiver</h2>

<p>O dalším nástroji pojmenovaném <i>Nemiver</i> již <a
href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">vyšel
samostatný článek</a> na &bdquo;konkurenčním&ldquo; webu. Tento nástroj opět
komunikuje s&nbsp;GNU Debuggerem, ovšem na rozdíl od DDD postaveného nad
postarší GUI knihovnou je <i>Nemiver</i> primárně určený pro desktopové
prostředí GNOME se všemi přednostmi a zápory, které to přináší. <i>Nemiver</i>
tak uživatelům nabízí přehledné prostředí, které ovšem není tak flexibilní jako
DDD a taktéž například možnosti zobrazení složitějších datových struktur
(různých lineárně vázaných seznamů, stromů či obecnějších grafových struktur)
jsou v&nbsp;<i>Nemiveru</i> omezené. Pokud ale někdo pouze potřebuje odkrokovat
několik funkcí a neprovádět žádné složitější operace, může být tento nástroj
pro takového uživatele velmi dobrým řešením.</p>

<a href="https://www.root.cz/obrazek/297116/"><img src="https://i.iinfo.cz/images/627/gdb1-11-prev.png" class="image-297116" alt="&#160;" width="346" height="270" /></a>
<p><i>Obrázek 11: Nastavení breakpointu ve zdrojovém kódu laděné aplikace.
V&nbsp;dolní části okna Nemiveru můžeme vidět aktuální hodnoty lokálních
proměnných.</i></p>

<p>Velmi užitečnou vlastností je podpora takzvaných &bdquo;sezení&ldquo;
(session). Kdykoli je totiž <i>Nemiver</i> ukončen, zapamatuje si, která
aplikace byla laděna, na kterých řádcích byly nastaveny breakpointy atd.
K&nbsp;ladění této aplikace se lze kdykoli k&nbsp;budoucnu vrátit a to bez
nutnosti explicitně vytvářet projekty či se nějak dále o uložená sezení starat.
Mimochodem &ndash; veškerá nastavení naleznete v&nbsp;souboru
<strong>~/.nemiver/nemivercommon.db</strong> a jak již koncovka tohoto souboru
napovídá, jedná se o SQLite databázi (obsah této databáze je jednoduché
exportovat do textového souboru, takže uživatelé nemusí nutně ztratit všechny
výhody textových souborů a nástrojů pro jejich zpracování).</p>

<a href="https://www.root.cz/obrazek/297117/"><img src="https://i.iinfo.cz/images/627/gdb1-12-prev.png" class="image-297117" alt="&#160;" width="263" height="270" /></a>
<p><i>Obrázek 12: &bdquo;Rozbalení&ldquo;dalších elementů binárního stromu.</i></p>

<p>Na rozdíl od DDD je způsob zobrazení složitějších datových struktur pojat
odlišným způsobem a může být méně přehledný, což je ostatně patrné ze
screenshotů číslo 12 a 13.</p>

<a href="https://www.root.cz/obrazek/297118/"><img src="https://i.iinfo.cz/images/627/gdb1-13-prev.png" class="image-297118" alt="&#160;" width="217" height="270" /></a>
<p><i>Obrázek 13: Způsob zobrazení obsahu jednorozměrného a dvourozměrného pole.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. KDbg</h2>

<p>Pro &bdquo;konkurenční&ldquo; desktopové prostředí KDE vznikl projekt
nazvaný <i>KDbg</i>, který byl <a
href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">podrobněji
zmíněn v&nbsp;tomto článku</a>. <i>KDbg</i> vývojářům nabízí prakticky veškeré
základní funkce, které jsou od debuggerů očekávány: nastavování breakpointů,
nastavování watchpointů, krokování po jednotlivých příkazech, vstup do volaných
funkcí, prohlížení obsahu operační paměti, prohlížení složitějších datových
struktur apod. <i>KDbg</i> je ve skutečnosti opět nadstavbou nad klasickým GNU
Debuggerem, což mj.&nbsp;znamená, že KDbg je možné v&nbsp;současné verzi použít
pro ladění nativních aplikací naprogramovaných v&nbsp;jazycích Ada, C, C++, Go,
Objective-C, D, Fortran, Modula-2, Pascal a Java (zde ovšem pouze při překladu
do nativního strojového kódu). Nejpoužívanějšími jazyky laděných aplikací
pravděpodobně zůstanou C a C++.</p>

<a href="https://www.root.cz/obrazek/297119/"><img src="https://i.iinfo.cz/images/627/gdb1-14-prev.png" class="image-297119" alt="&#160;" width="370" height="256" /></a>
<p><i>Obrázek 14: Laděný program bez nastaveného breakpointu podle očekávání
zhavaroval na řádku číslo 5 (viz zpráva zobrazená v&nbsp;pravém dolním rohu).
Aby bylo možné debuggerem odhalit, kde chyba vznikla, je nutné nastavit
breakpoint před tento řádek.</i></p>

<p>Nástroj <i>KDbg</i> dokáže přehledně zobrazit obsah zásobníku,
resp.&nbsp;přesněji řečeno obsah zásobníkových rámců platných pro aktivní
vlákno (ladění vícevláknových aplikací je ovšem funkční pouze v&nbsp;případě,
že tuto funkci podporuje <i>GNU Debugger</i>!). Informace o zásobníkových
rámcích je rozdělena do dvou podoken. V&nbsp;podoknu nazvaném <i>Stack</i> je
možné sledovat pořadí volání funkcí a taktéž hodnoty předávaných parametrů.
V&nbsp;podoknu nazvaném <i>Locals</i> naproti tomu můžeme vidět názvy a hodnoty
všech lokálních proměnných a současně i názvy a hodnoty  předávaných parametrů
(jak nestatické lokální proměnné, tak i parametry se ostatně nachází ve stejném
zásobníkovém rámci).</p>

<a href="https://www.root.cz/obrazek/297120/"><img src="https://i.iinfo.cz/images/627/gdb1-15-prev.png" class="image-297120" alt="&#160;" width="370" height="256" /></a>
<p><i>Obrázek 15: Prohlížení obsahu zásobníku (podokno vlevo dole) a lokálních proměnných (podokno vpravo nahoře).</i></p>

<p>KDbg používá pro zobrazení rekurzivních datových struktur podobný způsob,
jako výše zmíněný program Nemiver:</p>

<a href="https://www.root.cz/obrazek/297121/"><img src="https://i.iinfo.cz/images/627/gdb1-16-prev.png" class="image-297121" alt="&#160;" width="370" height="256" /></a>
<p><i>Obrázek 16: Zobrazení prvků stromové datové struktury.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Emacs</h2>

<p>Rozhraní pro GNU Debugger může být zabudováno i do různých pokročilejších
programátorských editorů. Pravděpodobně nejlepší propojení s&nbsp;debuggerem <a
href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">nabízí
textový editor Emacs</a>. Používá se v&nbsp;něm knihovna <i>Grand Unified
Debugger</i>, která mj.&nbsp;zajišťuje i propojení mezi textovým editorem
<i>GNU Emacs</i> a debuggerem <i>GNU Debugger</i>. V&nbsp;tomto režimu je možné
si v&nbsp;okně Emacsu zobrazit zdrojový kód a současně i několik bufferů
obsahujících jak textové uživatelské rozhraní debuggeru (konzoli, která je
aktivní, tj.&nbsp;lze do ní zapisovat příkazy), tak i speciální buffer
s&nbsp;hodnotami pracovních registrů procesoru, další buffer se seznamem
breakpointů, buffer se seznamem vláken atd. Kromě toho je možné (minimálně ve
chvíli, kdy je Emacs spuštěn v&nbsp;prostředí grafického desktopu) otevřít
další specializovaná okna, zejména okno s&nbsp;výpisem obsahu vybraných
proměnných, obsahem bloku paměti, disassemblovaným kódem apod.</p>

<a href="https://www.root.cz/obrazek/297122/"><img src="https://i.iinfo.cz/images/627/gdb1-17-prev.png" class="image-297122" alt="&#160;" width="362" height="270" /></a>
<p><i>Obrázek 17: Nastavení breakpointu ve zdrojovém kódu laděné aplikace.
Informace o nastaveném breakpointu se současně zobrazí i v&nbsp;interaktivním
okně GNU Debuggeru.</i></p

<p>Propojení mezi textovým editorem <i>GNU Emacs</i> a debuggerem <i>GNU
Debugger</i> zajišťuje knihovna <i>Grand Unified Debugger</i> neboli zkráceně
<i>gud</i>. V&nbsp;tomto režimu je možné si v&nbsp;okně Emacsu zobrazit
zdrojový kód a současně i několik bufferů obsahujících jak textové uživatelské
rozhraní debuggeru (konzoli, která je aktivní, tj.&nbsp;lze do ní zapisovat
příkazy), tak i speciální buffer s&nbsp;hodnotami pracovních registrů
procesoru, další buffer se seznamem breakpointů, buffer se seznamem vláken atd.
Kromě toho je možné (minimálně ve chvíli, kdy je Emacs spuštěn v&nbsp;prostředí
grafického desktopu) otevřít další specializovaná okna, zejména okno
s&nbsp;výpisem obsahu vybraných proměnných, obsahem bloku paměti,
disassemblovaným kódem apod.</p>

<a href="https://www.root.cz/obrazek/297123/"><img src="https://i.iinfo.cz/images/627/gdb1-18-prev.png" class="image-297123" alt="&#160;" width="370" height="136" /></a>
<p><i>Obrázek 18: Disassembler.</i></p>

<p>Nabízené příkazy a operace jsou umístěny ve vlastním menu nazvaném
<i>Gud</i>, některé příkazy mají vlastní klávesovou zkratku a ostatní příkazy
lze zavolat i jako funkce Emacs Lispu (viz též navazující kapitoly). Důležité
přitom je, že vývojář stále může zdrojový kód vyvíjené aplikace editovat,
překládat, commitovat atd. bez nutnosti opuštění Emacsu (a tím pádem i
debuggeru, jen je v&nbsp;některých případech nutné do něj znovu nahrát laděnou
aplikaci). Celý vývojový cyklus se tak může poměrně výrazným způsobem
urychlit.</p>

<a href="https://www.root.cz/obrazek/297124/"><img src="https://i.iinfo.cz/images/627/gdb1-19-prev.png" class="image-297124" alt="&#160;" width="362" height="270" /></a></h4>
<p><i>Obrázek 19: Obsah pracovních registrů mikroprocesoru.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Clewn</h2>

<p>Když už se zmiňujeme o (nejenom) editoru <i>Emacs</i>, nesmíme samozřejmě
zapomenout ani na programátorský textový editor <i>Vim</i>. Pro něj vznikl
plugin nazvaný <i>Clewn</i> sloužící taktéž pro propojení s&nbsp;<i>GNU
Debuggerem</i>. Tento plugin umožňuje volat většinu základních příkazů <i>GNU
Debuggeru</i>, ovšem způsob kooperace mezi <i>Vimem</i> a debuggerem, který je
v&nbsp;pluginu <i>Clewn</i> implementován, nemusí všem uživatelům vyhovovat
&ndash; v&nbsp;tomto případě je dobré se podívat na možnosti alternativního
pluginu <i>Pyclewn</i> zmíněného <a href="#k09">v&nbsp;navazující
kapitole</a>.</p>

<a href="https://www.root.cz/obrazek/297125/"><img src="https://i.iinfo.cz/images/627/gdb1-20-prev.png" class="image-297125" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 20: Bez podpory této technologie (viz červený obdélník) nebudou
mnohé pluginy pracovat korektně! To se týká i pluginu Clewn popisovaného
v&nbsp;dnešním článku. Název této technologie vychází z&nbsp;toho, že se kdysi
skutečně jednalo o rozhraní používané výhradně pluginem nazvaným NetBeans pro
komunikaci se známým integrovaným vývojovým prostředím NetBeans. Tento plugin
již v&nbsp;současnosti není vyvíjen, ovšem samotný &bdquo;Vim NetBeans
Protocol&ldquo; je podporován a taktéž používán mnoha dalšími pluginy, a to
nikoli pro komunikaci s&nbsp;IDE NetBeans, ale právě i při ovládání
debuggerů.</i></p>

<p>Jakým způsobem vlastně přídavný modul <i>Clewn</i> funguje?  Tento plugin
obsahuje kromě části psané ve VimScriptu i binární (nativní) část, konkrétně
spustitelný program nazvaný <strong>clewn</strong>, který je nainstalován
v&nbsp;adresáři dostupném přes proměnnou prostředí PATH (v&nbsp;případě lokální
instalace se většinou jedná o adresář ~/bin). Tento binární program po svém
spuštění provede inicializaci debuggeru a následně i spuštění <i>Gvimu</i>,
tj.&nbsp;<i>Vimu</i> s&nbsp;grafickým uživatelským rozhraním. Tyto dvě aplikace
pak spolu mohou přes nativní program <strong>clewn</strong> oboustranně
komunikovat.</p>

<a href="https://www.root.cz/obrazek/297126/"><img src="https://i.iinfo.cz/images/627/gdb1-21-prev.png" class="image-297126" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 21: Ladění aplikace naprogramované v&nbsp;jazyku C: připojení
Vimu k&nbsp;debuggeru a nastavení breakpointu na začátek funkce main.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Pyclewn</h2>

<p>Dalším pluginem určeným pro propojení populárního textového editoru
<i>Vim</i> s&nbsp;debuggerem je přídavný modul nazvaný <i>Pyclewn</i>. Tento
plugin umožňuje práci s&nbsp;debuggerem <i>GNU Debugger</i> (použijí ho
céčkači, vývojáři pracující v&nbsp;C++, Fortranu, Rustu, Go atd. atd.) a taktéž
s&nbsp;debuggerem <i>pdb</i> používaném při ladění aplikací naprogramovaných
v&nbsp;Pythonu. Tento plugin nepotřebuje pro svoji práci <i>Gvim</i> spuštěný
s&nbsp;grafickým uživatelským rozhraním, protože veškerá činnost se odehrává
v&nbsp;jediném terminálu a navíc se tento plugin spouští přímo
z&nbsp;<i>Vimu</i> (u <a href="#k08">výše popsaného</a> nástroje to bylo naopak
&ndash; nejprve se spustil <strong>clewn</strong>, který následně otevřel nové
okno s&nbsp;<i>Gvimem</i>, což mě osobně připadá poněkud nešikovné řešení).</p>

<a href="https://www.root.cz/obrazek/297127/"><img src="https://i.iinfo.cz/images/627/gdb1-22-prev.png" class="image-297127" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 22: Integrovaná nápověda k&nbsp;pluginu Pyclewn.</i></p>

<p>Samotné textové uživatelské prostředí připravené tímto pluginem (viz oba dva
přiložené screenshoty) je snadno pochopitelné &ndash; jedno okno se používá pro
zobrazení konzole debuggeru, další menší okna slouží pro výpis nastavených
breakpointů, sledovaných proměnných atd. a poslední část plochy <i>Vimu</i>
ukazuje laděný zdrojový kód, v&nbsp;němž jsou s&nbsp;využitím značek zvýrazněny
breakpointy, zakázané breakpointy a ve chvíli krokování i právě prováděný
prováděný řádek. Plugin mapuje i klávesové zkratky, další zkratky je samozřejmě
možné v&nbsp;případě potřeby přidat.</p>

<a href="https://www.root.cz/obrazek/297128/"><img src="https://i.iinfo.cz/images/627/gdb1-23-prev.png" class="image-297128" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 23: Ladění programu napsaného v&nbsp;céčku: nastavení
breakpointů, sledování proměnných atd. Povšimněte si, že tento plugin bez
problémů pracuje i v&nbsp;terminálu, ovšem je zapotřebí použít větší okno (zde
80&times;25 znaků je nedostatečných, což je ovšem pochopitelné)</i></p

<p>Poznámka: Vim je sice omezen na použití jediného okna konzole, ve
skutečnosti je však možné toho okno roztáhnout přes větší počet monitorů a
pomocí Ctrl+W S či příkazu :vsplit rozdělit plochu okna přesně na společné
hraně monitorů.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nová nadstavba na GNU Debuggerem: gdbgui</h2>

<p>Konečně se dostáváme k&nbsp;nástroji, který je nazvaný jednoduše
<i>gdbgui</i>. Jedná se o poměrně nový projekt postavený na jazycích Python a
JavaScript, což je v&nbsp;ostrém kontrastu s&nbsp;většinou nástrojů popsaných
v&nbsp;předchozích kapitolách, neboť ty jsou naprogramovány v&nbsp;jazyku C++
(cgdb, DDD, Nemiver i KDbg). Pro zobrazení grafického uživatelského rozhraní
<i>gdbgui</i> se používá webový prohlížeč, což s&nbsp;sebou přináší některé
výhody (při vzdáleném ladění není zapotřebí na klientské straně nic instalovat,
změna layoutu je velmi jednoduchá i pro neprogramátory atd.), ale i zápory
(v&nbsp;současnosti jen omezená historie mezi sezeními, L&amp;F odlišná od
&bdquo;pravých&ldquo; systémových utilit, ...). Autoři <i>gdbgui</i> si ovšem
uvědomují, že u debuggeru je důležité, aby ho bylo možné rychle ovládat
z&nbsp;klávesnice, takže pro několik základních příkazů byly vytvořeny
klávesové zkratky &ndash; Run, Continue, Next (Step Over), Step (Step Into) a
Up (Next a Step navíc zvlášť pro krokování po příkazech či po strojových
instrukcích).</p>

<a href="https://www.root.cz/obrazek/297129/"><img src="https://i.iinfo.cz/images/396/gdb2-1-prev.png" class="image-297129" alt="&#160;" width="370" height="202" /></a>
<p><i>Obrázek 24: Takto vypadá základní (a jediná) stránka nástroje gdbgui po
jeho spuštění. U prohlížeče Chrome/Chromium se navíc ve spodní části zobrazuje
konzole GNU Debuggeru.</i></p>

<p><i>gdbgui</i> lze použít pro ladění programů napsaných v&nbsp;jazycích C,
C++, Rust i Go, ovšem u Rustu a Go je nutné ručně zvolit vstupní bod do
programu a nastavit na něj breakpoint, protože <i>gdbgui</i> u těchto jazyků
nedokáže přesně zjistit, kde je umístěna funkce <i>main</i>. Bližší informace
si řekneme v&nbsp;dalších kapitolách.</p>

*** image ***
<p><i>Obrázek 25: Úpravou CSS lze docílit zobrazení konzole GNU Debuggeru i ve
Firefoxu.</i></p>

<p>Na tomto místě je vhodné upozornit na fakt zmíněný už v&nbsp;úvodu článku
&ndash; <i>gdbgui</i> totiž uživatelům nabízí pouze zlomek funkcionality GNU
Debuggeru, ovšem v&nbsp;případě potřeby je možné si přímo v&nbsp;okně
prohlížeče otevřít konzoli zajišťující přístup k&nbsp;příkazové řádce GNU
Debuggeru. Z&nbsp;této konzole je pak možné volat jakýkoli příkaz, který bude
přenesen klient &rarr; server &rarr; GNU Debugger, tam spuštěn a výsledek
vrácen zpět do prohlížeče.</p>




<p><a name="k11"></a></p>
<h2 id="k11">11. Technologie, na nichž je nástroj gdbgui postaven</h2>

<p>Na rozdíl od předchozích nástrojů je <i>gdbgui</i> postaven na webových
technologiích, v&nbsp;nichž se kombinuje serverová část a část klientská.
Úkolem serverové části, která je založena na <a
href="https://en.wikipedia.org/wiki/Microframework">mikroframeworku</a> <a
href="https://pypi.python.org/pypi/Flask">Flask</a> a knihovně <a
href="https://github.com/cs01/pygdbmi">pygdbmi </a>, je zabezpečení komunikace
s&nbsp;GNU Debuggerem (ostatně server si debugger sám spustí) popř.&nbsp;lldb a
s&nbsp;klientskou částí. Na klientskou část naprogramovanou <a
href="https://github.com/cs01/gdbgui/blob/master/gdbgui/static/js/gdbgui.js">v&nbsp;JavaScriptu</a>
s&nbsp;využitím knihoven <a href="https://jquery.com/">jQuery</a>, <a
href="https://lodash.com/">Lodash</a>, <a
href="https://leaverou.github.io/awesomplete/">Awescomlete</a>, šablonovacího
systému <a href="https://github.com/matannoam/pypugjs">PugJS</a> atd. pak zbylo
zajištění vlastního grafické uživatelského rozhraní. To lze použít
z&nbsp;jakéhokoli moderního webového prohlížeče, navíc je možné, aby laděná
aplikace, GNU Debugger i serverová část běžely na jiném počítači, než část
klientská, což může být v&nbsp;některých situacích poměrně užitečná
vlastnost.</p>

<p>Poznámka: screenshoty pro dnešní článek byly vytvořeny ve Firefoxu,
v&nbsp;něm je však nutné <a
href="https://github.com/cs01/gdbgui/issues/75">upravit CSS</a>, aby se
zobrazila konzole GNU Debuggeru (viz předchozí kapitolu se screenshoty původní
verze a verze upravené).</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Instalace a první spuštění</h2>

<p>Instalace nástroje <i>gdbgui</i> je dobře zdokumentována na <a
href="https://pypi.python.org/pypi/gdbgui">stránce s&nbsp;popisem balíčku</a>,
takže jen stručně. Na svém systému byste měli mít nainstalován GNU Debugger a
samozřejmě i překladač a linker některého podporovaného programovacího jazyka,
tj.&nbsp;GCC (C a/nebo C++), Rustu či Go. GNU Debugger by měl mít verzi
7.x:</p>

<pre>
$ <strong>gdb --version</strong>
GNU gdb (Debian 7.7.1+dfsg-5) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
...
...
...
</pre>

<p>Dále je nutné si nainstalovat <a
href="https://pip.pypa.io/en/stable/">pip</a>, manažer balíčků pro Python, a to
minimálně verzi 8:</p>

<pre>
$ <strong>pip --version</strong>
pip 9.0.1 from /usr/local/lib/python2.7/dist-packages (python 2.7)
</pre>

<p>Nesmíme zapomenout ani na interpret Pythonu. Ten je taktéž vyžadován, ovšem
může se jednat jak o Python 2.7, tak i o Python 3.4 či vyšší, takže jedna
z&nbsp;těchto závislostí bude s&nbsp;velkou pravděpodobností na všech systémech
splněna:</p>

<pre>
$ <strong>python --version</strong>
Python 2.7.9
</pre>

<p>Poznámka: pokud budete chtít použít Python 3.4+, použijte
<strong>pip3</strong>, ne <strong>pip</strong>.</p>

<p>Pokud máte k&nbsp;dispozici všechny závislé balíčky a nástroje, je samotná
instalace snadná:</p>

<pre>
$ <strong>sudo pip install gdbgui --upgrade</strong>
</pre>


<p>Následně <i>gdbgui</i> spusťte příkazem (v&nbsp;okně prohlížeče se otevře
nové okno s&nbsp;GUI):</p>

<pre>
gdbgui
</pre>

<p>Pokud chcete použít vzdálené ladění, provede se spuštění takto:</p>

<pre>
gdbgui -r
</pre>

<p>V&nbsp;tomto případě ovšem bude zvolený port (implicitně 5000) dostupný i
z&nbsp;dalších počítačů (!), což většinou znamená nutnost správné konfigurace
firewallu. Při použití volby <strong>-r</strong> se můžete ke GUI připojit na
URL http://hostname_stroje:5000</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zobrazení zdrojového kódu a disassemblovaného strojového kódu</h2>

<p>Pro načtení programu přeloženého s&nbsp;ladicími informacemi (prakticky
univerzální volba <strong>-g</strong>) je nutné napsat cestu ke spustitelnému
souboru do horního řádku nadepsaného &bdquo;Load this Binary and Args&ldquo; a
volbu potvrdit Enterem (zde se ukazuje jeden z&nbsp;nedostatků webového UI).
Současně se načte i seznam objektových souborů a knihoven, ze kterého je možné
si vybírat (&bdquo;Enter source file path...&ldquo;):</p>

<a href="https://www.root.cz/obrazek/297130/"><img src="https://i.iinfo.cz/images/396/gdb2-2-prev.png" class="image-297130" alt="&#160;" width="370" height="202" /></a>
<p><i>Obrázek 26: Po zápisu cesty k&nbsp;binárnímu souboru, který se má
debugovat, se automaticky zobrazí příslušný zdrojový kód, samozřejmě ovšem za
předpokladu, že se při překladu použila volba <strong>-g</strong>.</i></p>

<p>Dále je možné tlačítkem &bdquo;fetch disassembly&ldquo; načíst a zobrazit
disassemblovaný zdrojový kód:</p>

<a href="https://www.root.cz/obrazek/297131/"><img src="https://i.iinfo.cz/images/396/gdb2-3-prev.png" class="image-297131" alt="&#160;" width="370" height="202" /></a>
<p><i>Obrázek 27: Tlačítkem &bdquo;fetch disassembly&ldquo; je možné zajistit
zobrazení strojových instrukcí, které odpovídají příslušnému příkazu. Tato
volba bude fungovat v&nbsp;pořádku jen ve chvíli, kdy se při překladu nepoužívá
optimalizace.</i></p>

<p>Standardně je nastaveno, že se při načtení spustitelného souboru automaticky
nastaví breakpoint na první příkaz ve funkci <strong>main</strong>, ovšem tato
volba pracuje dobře pouze u programů napsaných v&nbsp;jazycích C a C++.
Automatické nastavení breakpointu je možné vypnout v&nbsp;dialogu
s&nbsp;nastavením projektu.</p>

<a href="https://www.root.cz/obrazek/297132/"><img src="https://i.iinfo.cz/images/396/gdb2-4-prev.png" class="image-297132" alt="&#160;" width="370" height="202" /></a>
<p><i>Obrázek 28: Po načtení programu do debuggeru se automaticky nastaví
breakpoint na první řádek ve funkci <strong>main</strong>. Tato možnost však
pracuje správně jen u jazyků C a C++, nikoli u Rustu či Go.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Krokování a sledování hodnot lokálních proměnných</h2>

<p>Vlastní ladění je velmi jednoduché, protože pouze postačuje nastavit
breakpointy kliknutím myší na příslušný zdrojový řádek a spustit program
tlačítkem Run (kupodivu jeho ikona obsahuje šipku v&nbsp;kruhu, nenechte se
zmást sousedním tlačítkem). V&nbsp;této chvíli se automaticky zobrazí aktivní
zásobníkové rámce i obsah lokálních proměnných. Ke krokování slouží tlačítka
Next (Step Over), Step (Step Into), Up a znovuspuštění programu zajistí
tlačítko Continue. Lze použít i klávesové zkratky <strong>r</strong>,
<strong>n</strong>, <strong>s</strong>, <strong>u</strong> a
<strong>c</strong>. Pro krokování na úrovni jednotlivých strojových instrukcí
slouží tlačítka Next Instruction (<strong>NI</strong>) a Step Instruction
(<strong>SI</strong>).</p>

<a href="https://www.root.cz/obrazek/297133/"><img src="https://i.iinfo.cz/images/396/gdb2-5-prev.png" class="image-297133" alt="&#160;" width="370" height="202" /></a>
<p><i>Obrázek 28: </i></p>

<a href="https://www.root.cz/obrazek/297134/"><img src="https://i.iinfo.cz/images/396/gdb2-6-prev.png" class="image-297134" alt="&#160;" width="370" height="202" /></a>
<p><i>Obrázek 29: </i></p>

<a href="https://www.root.cz/obrazek/297135/"><img src="https://i.iinfo.cz/images/396/gdb2-7-prev.png" class="image-297135" alt="&#160;" width="370" height="202" /></a>
<p><i>Obrázek 30: </i></p>

<a href="https://www.root.cz/obrazek/297136/"><img src="https://i.iinfo.cz/images/396/gdb2-8-prev.png" class="image-297136" alt="&#160;" width="370" height="202" /></a>

<a href="https://www.root.cz/obrazek/297137/"><img src="https://i.iinfo.cz/images/396/gdb2-9-prev.png" class="image-297137" alt="&#160;" width="370" height="202" /></a>

<a href="https://www.root.cz/obrazek/297138/"><img src="https://i.iinfo.cz/images/396/gdb2-10-prev.png" class="image-297138" alt="&#160;" width="370" height="202" /></a>

<a href="https://www.root.cz/obrazek/297139/"><img src="https://i.iinfo.cz/images/396/gdb2-11-prev.png" class="image-297139" alt="&#160;" width="370" height="202" /></a>

<a href="https://www.root.cz/obrazek/297140/"><img src="https://i.iinfo.cz/images/396/gdb2-12-prev.png" class="image-297140" alt="&#160;" width="370" height="202" /></a>

<a href="https://www.root.cz/obrazek/297141/"><img src="https://i.iinfo.cz/images/396/gdb2-13-prev.png" class="image-297141" alt="&#160;" width="370" height="202" /></a>

<a href="https://www.root.cz/obrazek/297142/"><img src="https://i.iinfo.cz/images/396/gdb2-14-prev.png" class="image-297142" alt="&#160;" width="370" height="202" /></a>

<a href="https://www.root.cz/obrazek/297143/"><img src="https://i.iinfo.cz/images/396/gdb2-15-prev.png" class="image-297143" alt="&#160;" width="370" height="202" /></a>

<a href="https://www.root.cz/obrazek/297144/"><img src="https://i.iinfo.cz/images/396/gdb2-16-prev.png" class="image-297144" alt="&#160;" width="370" height="202" /></a>

<a href="https://www.root.cz/obrazek/297145/"><img src="https://i.iinfo.cz/images/396/gdb2-17-prev.png" class="image-297145" alt="&#160;" width="370" height="202" /></a>

<a href="https://www.root.cz/obrazek/297146/"><img src="https://i.iinfo.cz/images/396/gdb2-18-prev.png" class="image-297146" alt="&#160;" width="370" height="202" /></a>




<p><a name="k15"></a></p>
<h2 id="k15">15. Výrazy, zobrazení grafů historie vyhodnocených výrazů</h2>

<p></p>

<pre>
int main(void)
{
    float x, y;
    int i;
    x = 1.0f;
    y = 0.0f;
    for (i=0; i&lt;20; i++) {
        y += x;
        x = x / 2.0;
    }
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Obsah zásobníkových rámců</h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Výpis složitějších datových struktur (pole, struktury, stromy)</h2>

<p></p>

<pre>
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

typedef struct Node
{
    struct Node *left;
    struct Node *right;
    char *value;
} Node;

void insert_new_node(Node **root, char *value)
{
    int cmp;

    if (*root == NULL)
    {
        *root = (Node *)malloc(sizeof(Node));
        (*root)-&gt;value = (char*)calloc(strlen(value), sizeof(char));
        strcpy((*root)-&gt;value, value);
        (*root)-&gt;left = NULL;
        (*root)-&gt;right = NULL;
        return;
    }
    cmp = strcmp(value, (*root)-&gt;value);
    if (cmp &lt; 0)
    {
        insert_new_node(&amp;(*root)-&gt;left, value);
    }
    else
    {
        insert_new_node(&amp;(*root)-&gt;right, value);
    }
}

void traverse_tree(Node *root, void (*callback_function)(char *))
{
    if (root == NULL)
    {
        return;
    }
    traverse_tree(root-&gt;left, callback_function);
    callback_function(root-&gt;value);
    traverse_tree(root-&gt;right, callback_function);
}

void callback_function(char *value)
{
    printf("%s\n", value);
}

int main(void)
{
    static Node *root = NULL;

    insert_new_node(&amp;root, "xxx");
    insert_new_node(&amp;root, "aaa");
    insert_new_node(&amp;root, "bbb");
    insert_new_node(&amp;root, "ccc");
    insert_new_node(&amp;root, "yyy");
    insert_new_node(&amp;root, "yyy");

    traverse_tree(root, callback_function);

    return 0;
}
</pre>


<p><a name="k18"></a></p>
<h2 id="k18">18. Ladění programů napsaných v&nbsp;programovacím jazyku Rust</h2>

<p></p>

<pre>
fn main() {
    let mut x:f32 = 1.0;
    let mut y:f32 = 0.0;
    for _ in 0..20 {
        y += x;
        x = x / 2.0;
    }
    println!("{}", y);
}
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>gdbgui 0.7.8.3: browser-based gdb frontend using Flask and JavaScript to visually debug C, C++, Go, or Rust<br />
<a href="https://pypi.python.org/pypi/gdbgui">https://pypi.python.org/pypi/gdbgui</a>
</li>

<li>Repositář projektu gdbgui<br />
<a href="https://github.com/cs01/gdbgui">https://github.com/cs01/gdbgui</a>
</li>

<li>gdbgui - examples<br />
<a href="https://github.com/cs01/gdbgui/tree/master/examples">https://github.com/cs01/gdbgui/tree/master/examples</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Reverse Engineering Tools in Linux – strings, nm, ltrace, strace, LD_PRELOAD<br />
<a href="http://www.thegeekstuff.com/2012/03/reverse-engineering-tools/">http://www.thegeekstuff.com/2012/03/reverse-engineering-tools/</a>
</li>

<li>An Introduction To Using GDB Under Emacs<br />
<a href="http://tedlab.mit.edu/~dr/gdbintro.html">http://tedlab.mit.edu/~dr/gdbintro.html</a>
</li>

<li>GNU Emacs<br />
<a href="https://www.gnu.org/software/emacs/emacs.html">https://www.gnu.org/software/emacs/emacs.html</a>
</li>

<li>The Emacs Editor<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html</a>
</li>

<li>Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html</a>
</li>

<li>An Introduction to Programming in Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</a>
</li>

<li>27.6 Running Debuggers Under Emacs<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html</a>
</li>

<li>GdbMode<br />
<a href="http://www.emacswiki.org/emacs/GdbMode">http://www.emacswiki.org/emacs/GdbMode</a>
</li>

<li>Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs">https://en.wikipedia.org/wiki/Emacs</a>
</li>

<li>Emacs Lisp (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs_Lisp">https://en.wikipedia.org/wiki/Emacs_Lisp</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

<li>pip Installation<br />
<a href="https://pip.pypa.io/en/latest/installing.html">https://pip.pypa.io/en/latest/installing.html</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>KDbg: úvodní stránka<br />
<a href="http://www.kdbg.org/">http://www.kdbg.org/</a>
</li>

<li>Nemiver (stránky projektu)<br />
<a href="https://wiki.gnome.org/Apps/Nemiver">https://wiki.gnome.org/Apps/Nemiver</a>
</li>

<li>Basic Assembler Debugging with GDB<br />
<a href="http://dbp-consulting.com/tutorials/debugging/basicAsmDebuggingGDB.html">http://dbp-consulting.com/tutorials/debugging/basicAsmDebuggingGDB.html</a>
</li>

<li>Nemiver FAQ<br />
<a href="https://wiki.gnome.org/Apps/Nemiver/FAQ">https://wiki.gnome.org/Apps/Nemiver/FAQ</a>
</li>

<li>Nemiver (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Nemiver">https://en.wikipedia.org/wiki/Nemiver</a>
</li>

<li>Data Display Debugger<br />
<a href="https://www.gnu.org/software/ddd/">https://www.gnu.org/software/ddd/</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>BASH Debugger<br />
<a href="http://bashdb.sourceforge.net/">http://bashdb.sourceforge.net/</a>
</li>

<li>The Perl Debugger(s)<br />
<a href="http://debugger.perl.org/">http://debugger.perl.org/</a>
</li>

<li>Visual Debugging with DDD<br />
<a href="http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519">http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519</a>
</li>

<li>Pydb - Extended Python Debugger<br />
<a href="http://bashdb.sourceforge.net/pydb/">http://bashdb.sourceforge.net/pydb/</a>
</li>

<li>Debugging<br />
<a href="http://janus.uclan.ac.uk/pagray/labs/debug.htm">http://janus.uclan.ac.uk/pagray/labs/debug.htm</a>
</li>

<li>Insight<br />
<a href="http://www.sourceware.org/insight/">http://www.sourceware.org/insight/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

