<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Spojení většího množství generátorů</a></p>
<p><a href="#k03">*** 3. Operátor ?? (operátor koalescence)</a></p>
<p><a href="#k04">*** 4. Elvis operator</a></p>
<p><a href="#k05">*** 5. Zápis některých operátorů pomocí Unicode znaků</a></p>
<p><a href="#k06">*** 6. Pattern matching: základní klauzule</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. Rekurze a koncová rekurze v&nbsp;Pythonu a její omezeni</a></p>
<p><a href="#k09">*** 9. Optimalizace koncové rekurze v&nbsp;Coconutu</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">*** 16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Spojení většího množství generátorů</h2>

<pre>
def generator1():
    values = ["a1", "b1", "c1", "d1"]
    for value in values:
        yield value
&nbsp;
def generator2():
    values = ["a2", "b2", "c2", "d2"]
    for value in values:
        yield value
&nbsp;
for v in generator1()::generator2():
    print(v)
</pre>

<pre>
def generator1():
    values = ["a1", "b1", "c1", "d1"]
    for value in values:
        yield value
&nbsp;
def generator2():
    values = ["a2", "b2", "c2", "d2"]
    for value in values:
        yield value
&nbsp;
for v in _coconut.itertools.chain.from_iterable((f() for f in (lambda: generator1(), lambda: generator2()))):
    print(v)
</pre>

<pre>
def generator3(suffix):
    values = ["a", "b", "c", "d", "e"]
    for value in values:
        yield "{v}{s}".format(v=value, s=suffix)
&nbsp;
for v in generator3("1")::generator3("2")::generator3("3"):
    print(v)
</pre>

<pre>
def generator3(suffix):
    values = ["a", "b", "c", "d", "e"]
    for value in values:
        yield "{v}{s}".format(v=value, s=suffix)
&nbsp;
for v in _coconut.itertools.chain.from_iterable((f() for f in (lambda: generator3("1"), lambda: generator3("2"), lambda: generator3("3")))):
    print(v)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Operátor ?? (operátor koalescence)</h2>

<pre>
import os
&nbsp;
v1 = None
v2 = "Some"
&nbsp;
print(v1 ?? v2)
&nbsp;
v3 = "Some"
v4 = "Something else"
&nbsp;
print(v3 ?? v4)
&nbsp;
v5 = None
v6 = None
&nbsp;
print(v5 ?? v6)
&nbsp;
print(os.getenv('EDITOR') ?? "notepad")
print(os.getenv('XXEDITOR') ?? "notepad")
</pre>

<pre>
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# __coconut_hash__ = 0x109f876f
&nbsp;
# Compiled with Coconut version 1.3.0 [Dead Parrot]
&nbsp;
# Coconut Header: -------------------------------------------------------------
&nbsp;
# Compiled Coconut: -----------------------------------------------------------
&nbsp;
import os
&nbsp;
v1 = None
v2 = "Some"
&nbsp;
print(v2 if v1 is None else v1)
&nbsp;
v3 = "Some"
v4 = "Something else"
&nbsp;
print(v4 if v3 is None else v3)
&nbsp;
v5 = None
v6 = None
&nbsp;
print(v6 if v5 is None else v5)
&nbsp;
print((lambda _coconut_none_coalesce_item: "notepad" if _coconut_none_coalesce_item is None else _coconut_none_coalesce_item)(os.getenv('EDITOR')))
print((lambda _coconut_none_coalesce_item: "notepad" if _coconut_none_coalesce_item is None else _coconut_none_coalesce_item)(os.getenv('XXEDITOR')))
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Elvis operator</h2>

<pre>
game1 = {
    "player" : {
        "name": "Kvido",
        "nick": "kvido"
    },
    "results": {
        "score": {
            "last": 1000,
            "top": 2000
        },
        "lives": 0
    }
}

def print_last_score_variant_A(game):
    score = game.get("results").get("score").get("last")
    print("Score: {s}".format(s=score))

print("\nVariant A")
print_last_score_variant_A(game1)

game2 = {
    "player" : {
        "name": "Kvido",
        "nick": "kvido"
    }
}

def print_last_score_variant_B(game):
    score = game.get("results", {}).get("score", {}).get("last")
    print("Score: {s}".format(s=score))

print("\nVariant B")
print_last_score_variant_B(game1)
print_last_score_variant_B(game2)

def print_last_score_variant_C(game):
    score = game.get("results")?.get("score")?.get("last")
    print("Score: {s}".format(s=score))

print("\nVariant C")
print_last_score_variant_C(game1)
print_last_score_variant_C(game2)

class Player:
    def __init__(self, name, nick):
        self.name = name
        self.nick = nick

class Score:
    def __init__(self,last, top):
        self.last = last
        self.top =top

class Game:
    def __init__(self,player, score, lives):
        self.player = player
        self.score = score
        self.lives = lives

def print_last_score_variant_D(game):
    score = game?.score?.last
    print("Score: {s}".format(s=score))

game1_obj = Game(Player("Kvido", "kvido"),
                 Score(1000, 2000),
                 0)

game2_obj = Game(Player("Kvido", "kvido"),
                 None, 0)

print("\nVariant D")
print_last_score_variant_D(game1_obj)
print_last_score_variant_D(game2_obj)

</pre>

<pre>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Zápis některých operátorů pomocí Unicode znaků</h2>

<pre>
result = 60⋅7÷10
print(result)

if result ≥ 40 and result ≤ 50:
    print("very close")

print(1 « 10)
print(1 ⊕ 255)

-42 ↦ abs ↦ print

"B" ↦ ord ↦ abs ↦ hex ↦ print

range(11) ↦ sum ↦ print

range(11) ↦ reversed ↦ sum ↦ print

"B" ↦ hex ∘ abs ∘ ord ↦ print

range(11) ↦ sum ∘ reversed ↦ print
</pre>

<pre>
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# __coconut_hash__ = 0x3d5464d

# Compiled with Coconut version 1.3.0 [Dead Parrot]

# Coconut Header: -------------------------------------------------------------


# Compiled Coconut: -----------------------------------------------------------

result = 60 * 7 / 10
print(result)

if result >= 40 and result <= 50:
    print("very close")

print(1 << 10)
print(1 ^ 255)

(print)((abs)(-42))

(print)((hex)((abs)((ord)("B"))))

(print)((sum)(range(11)))

(print)((sum)((reversed)(range(11))))

(print)((_coconut_forward_compose(ord, abs, hex))("B"))

(print)((_coconut_forward_compose(reversed, sum))(range(11)))
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Pattern matching: základní klauzule</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Rekurze a koncová rekurze v&nbsp;Pythonu a její omezeni</h2>

<pre>
def factorial(n):
    if n < 2:
        return 1
    else:
        return n*factorial(n-1)


for n in range(0, 11):
    print("{n}! = {f}".format(n=n, f=factorial(n)))

print(factorial(999))
# print(factorial(1000))
</pre>

<pre>
import sys

print(sys.getrecursionlimit())
</pre>

<pre>
def factorial(n, acc=1):
    if n < 2:
        return acc
    else:
        return factorial(n-1, acc*n)


for n in range(0, 11):
    print("{n}! = {f}".format(n=n, f=factorial(n)))

print(factorial(999))
# print(factorial(1000))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Optimalizace koncové rekurze v&nbsp;Coconutu</h2>

<pre>
def factorial_tco(n, acc=1):
    case n:
        match 0:
            return acc
        match 1:
            return acc
        match _ is int if n > 1:
            return factorial_tco(n-1, acc*n)
    else:
        raise TypeError("expecting integer >= 0")

for n in range(11):
    print("{n}!={f}".format(n=n, f=factorial_tco(n)))

print(factorial_tco(1000))
print(factorial_tco(10000))
</pre>

<pre>
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# __coconut_hash__ = 0x8f8983fe

# Compiled with Coconut version 1.3.0 [Dead Parrot]

# Coconut Header: -------------------------------------------------------------


# Compiled Coconut: -----------------------------------------------------------

@_coconut_tco
def factorial_tco(n, acc=1):
    def _coconut_mock_func(n, acc=1): return n, acc
    while True:
        _coconut_match_to = n
        _coconut_match_check = False
        if _coconut_match_to == 0:
            _coconut_match_check = True
        if _coconut_match_check:
            return acc
        if not _coconut_match_check:
            if _coconut_match_to == 1:
                _coconut_match_check = True
            if _coconut_match_check:
                return acc
        if not _coconut_match_check:
            if _coconut.isinstance(_coconut_match_to, int):
                _coconut_match_check = True
            if _coconut_match_check and not (n > 1):
                _coconut_match_check = False
            if _coconut_match_check:
                if factorial_tco is _coconut_recursive_func_0:
                    n, acc = _coconut_mock_func(n - 1, acc * n)
                    continue
                else:
                    return _coconut_tail_call(factorial_tco, n - 1, acc * n)
        if not _coconut_match_check:
            raise TypeError("expecting integer >= 0")

        return None
_coconut_recursive_func_0 = factorial_tco
for n in range(11):
    print("{n}!={f}".format(n=n, f=factorial_tco(n)))

print(factorial_tco(1000))
print(factorial_tco(10000))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naleznete pod
následujícími odkazy:</p>

<table>
<tr><th>Zdrojový či transkompilovaný kód</th><th>Adresa</th></tr>
<tr><td>08-generator_chaining.coco</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/08-generator_chaining.coco">https://github.com/tisnik/presentations/blob/master/coconut/08-generator_chaining.coco</a></td></tr>
<tr><td>08-generator_chaining.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/08-generator_chaining.py">https://github.com/tisnik/presentations/blob/master/coconut/08-generator_chaining.py</a></td></tr>
<tr><td>09_??_operator.coco</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/09_??_operator.coco">https://github.com/tisnik/presentations/blob/master/coconut/09_??_operator.coco</a></td></tr>
<tr><td>09_??_operator.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/09_??_operator.py">https://github.com/tisnik/presentations/blob/master/coconut/09_??_operator.py</a></td></tr>
<tr><td>10_elvis_operator.coco</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/10_elvis_operator.coco">https://github.com/tisnik/presentations/blob/master/coconut/10_elvis_operator.coco</a></td></tr>
<tr><td>10_elvis_operator.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/10_elvis_operator.py">https://github.com/tisnik/presentations/blob/master/coconut/10_elvis_operator.py</a></td></tr>
<tr><td>11_unicode_chars.coco</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/11_unicode_chars.coco">https://github.com/tisnik/presentations/blob/master/coconut/11_unicode_chars.coco</a></td></tr>
<tr><td>11_unicode_chars.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/11_unicode_chars.py">https://github.com/tisnik/presentations/blob/master/coconut/11_unicode_chars.py</a></td></tr>
<tr><td>12_pattern_matching.coco</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/12_pattern_matching.coco">https://github.com/tisnik/presentations/blob/master/coconut/12_pattern_matching.coco</a></td></tr>
<tr><td>12_pattern_matching.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/12_pattern_matching.py">https://github.com/tisnik/presentations/blob/master/coconut/12_pattern_matching.py</a></td></tr>
<tr><td>14_tail_call_optimization.coco</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/14_tail_call_optimization.coco">https://github.com/tisnik/presentations/blob/master/coconut/14_tail_call_optimization.coco</a></td></tr>
<tr><td>14_tail_call_optimization.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/14_tail_call_optimization.py">https://github.com/tisnik/presentations/blob/master/coconut/14_tail_call_optimization.py</a></td></tr>
<tr><td>recursion_limit.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/recursion_limit.py">https://github.com/tisnik/presentations/blob/master/coconut/recursion_limit.py</a></td></tr>
<tr><td>recursive_factorial.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/recursive_factorial.py">https://github.com/tisnik/presentations/blob/master/coconut/recursive_factorial.py</a></td></tr>
<tr><td>tail_call_factorial.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/coconut/tail_call_factorial.py">https://github.com/tisnik/presentations/blob/master/coconut/tail_call_factorial.py</a></td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Null coalescing operator<br />
<a href="https://en.wikipedia.org/wiki/Null_coalescing_operator">https://en.wikipedia.org/wiki/Null_coalescing_operator</a>
</li>

<li>Operátor koalescence<br />
<a href="https://cs.wikipedia.org/wiki/Oper%C3%A1tor_koalescence">https://cs.wikipedia.org/wiki/Oper%C3%A1tor_koalescence</a>
</li>

<li>Elvis operator<br />
<a href="https://en.wikipedia.org/wiki/Elvis_operator">https://en.wikipedia.org/wiki/Elvis_operator</a>
</li>

<li>Setting stacksize in a python script<br />
<a href="https://stackoverflow.com/questions/5061582/setting-stacksize-in-a-python-script">https://stackoverflow.com/questions/5061582/setting-stacksize-in-a-python-script</a>
</li>

<li>What is the maximum recursion depth in Python, and how to increase it?<br />
<a href="https://stackoverflow.com/questions/3323001/what-is-the-maximum-recursion-depth-in-python-and-how-to-increase-it?rq=1">https://stackoverflow.com/questions/3323001/what-is-the-maximum-recursion-depth-in-python-and-how-to-increase-it?rq=1</a>
</li>

<li>Does Python optimize tail recursion?<br />
<a href="https://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion">https://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion</a>
</li>

<li>Tail call<br />
<a href="https://en.wikipedia.org/wiki/Tail_call">https://en.wikipedia.org/wiki/Tail_call</a>
</li>

<li>Tail Call Optimization for Python<br />
<a href="https://github.com/baruchel/tco">https://github.com/baruchel/tco</a>
</li>

<li>Tail Recursion Elimination<br />
<a href="http://neopythonic.blogspot.cz/2009/04/tail-recursion-elimination.html">http://neopythonic.blogspot.cz/2009/04/tail-recursion-elimination.html</a>
</li>

<li>Origins of Python's "Functional" Features <br />
<a href="http://python-history.blogspot.cz/2009/04/origins-of-pythons-functional-features.html">http://python-history.blogspot.cz/2009/04/origins-of-pythons-functional-features.html</a>
</li>

<li>Tail recursion decorator revisited<br />
<a href="http://fiber-space.de/wordpress/2009/04/20/tail-recursion-decorator-revisited/">http://fiber-space.de/wordpress/2009/04/20/tail-recursion-decorator-revisited/</a>
</li>

<li>Koncová rekurze<br />
<a href="https://cs.wikipedia.org/wiki/Koncov%C3%A1_rekurze">https://cs.wikipedia.org/wiki/Koncov%C3%A1_rekurze</a>
</li>

<li>Recursion (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Recursion_%28computer_science%29">https://en.wikipedia.org/wiki/Recursion_%28computer_science%29</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut 1.1.0 (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/1.1.0">https://pypi.python.org/pypi/coconut/1.1.0</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

<li>patterns<br />
<a href="https://github.com/Suor/patterns">https://github.com/Suor/patterns</a>
</li>

<li>Source-to-source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>The Lua VM, on the Web<br />
<a href="https://kripken.github.io/lua.vm.js/lua.vm.js.html">https://kripken.github.io/lua.vm.js/lua.vm.js.html</a>
</li>

<li>Lua.vm.js REPL<br />
<a href="https://kripken.github.io/lua.vm.js/repl.html">https://kripken.github.io/lua.vm.js/repl.html</a>
</li>

<li>lua2js<br />
<a href="https://www.npmjs.com/package/lua2js">https://www.npmjs.com/package/lua2js</a>
</li>

<li>Wisp na GitHubu<br />
<a href="https://github.com/Gozala/wisp">https://github.com/Gozala/wisp</a>
</li>

<li>Wisp playground<br />
<a href="http://www.jeditoolkit.com/try-wisp/">http://www.jeditoolkit.com/try-wisp/</a>
</li>

<li>REPL v prohlížeči<br />
<a href="http://www.jeditoolkit.com/interactivate-wisp/">http://www.jeditoolkit.com/interactivate-wisp/</a>
</li>

<li>Minification (programming)<br />
<a href="https://en.wikipedia.org/wiki/Minification_(programming)">https://en.wikipedia.org/wiki/Minification_(programming)</a>
</li>

<li>JavaScript is Assembly Language for the Web: Sematic Markup is Dead! Clean vs. Machine-coded HTML<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx">http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx</a>
</li>

<li>JavaScript is Web Assembly Language and that's OK.<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsWebAssemblyLanguageAndThatsOK.aspx">http://www.hanselman.com/blog/JavaScriptIsWebAssemblyLanguageAndThatsOK.aspx</a>
</li>

<li>Dart<br />
<a href="https://www.dartlang.org/">https://www.dartlang.org/</a>
</li>

<li>CoffeeScript<br />
<a href="http://coffeescript.org/">http://coffeescript.org/</a>
</li>

<li>TypeScript<br />
<a href="http://www.typescriptlang.org/">http://www.typescriptlang.org/</a>
</li>

<li>JavaScript: The Web Assembly Language?<br />
<a href="http://www.informit.com/articles/article.aspx?p=1856657">http://www.informit.com/articles/article.aspx?p=1856657</a>
</li>

<li>asm.js<br />
<a href="http://asmjs.org/">http://asmjs.org/</a>
</li>

<li>List of languages that compile to JS<br />
<a href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS">https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS</a>
</li>

<li>Permutation<br />
<a href="https://en.wikipedia.org/wiki/Permutation">https://en.wikipedia.org/wiki/Permutation</a>
</li>

<li>Pattern matching<br />
<a href="https://en.wikipedia.org/wiki/Pattern_matching">https://en.wikipedia.org/wiki/Pattern_matching</a>
</li>

<li>Pattern matching v&nbsp;Rustu<br />
<a href="https://www.root.cz/clanky/rust-funkce-lambda-vyrazy-a-rozhodovaci-konstrukce-match/#k13">https://www.root.cz/clanky/rust-funkce-lambda-vyrazy-a-rozhodovaci-konstrukce-match/#k13</a>
</li>

<li>SNOBOL<br />
<a href="https://en.wikipedia.org/wiki/SNOBOL">https://en.wikipedia.org/wiki/SNOBOL</a>
</li>

<li>Podpůrný plugin pro Vim<br />
<a href="https://github.com/manicmaniac/coconut.vim">https://github.com/manicmaniac/coconut.vim</a>
</li>

<li>Příkaz (programování)<br />
<a href="https://cs.wikipedia.org/wiki/P%C5%99%C3%ADkaz_%28programov%C3%A1n%C3%AD%29">https://cs.wikipedia.org/wiki/P%C5%99%C3%ADkaz_%28programov%C3%A1n%C3%AD%29</a>
</li>

<li>Threading Macros Guide<br />
<a href="https://clojure.org/guides/threading_macros">https://clojure.org/guides/threading_macros</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

