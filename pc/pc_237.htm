<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Instrukční soubor čipů PIC24 a dsPIC</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Instrukční soubor čipů PIC24 a dsPIC</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na předchozí článek s popisem základních vlastností čipů řady PIC24 a dsPIC dnes navážeme, protože se budeme zabývat instrukční sadou těchto v&nbsp;některých ohledech poněkud neobvyklých mikrořadičů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Instrukční soubor čipů PIC24 a dsPIC</a></p>
<p><a href="#k02">2. Adresovací režimy</a></p>
<p><a href="#k03">3. Formát instrukčních slov</a></p>
<p><a href="#k04">4. Přesuny dat</a></p>
<p><a href="#k05">5. Aritmetické operace</a></p>
<p><a href="#k06">6. Násobení a dělení</a></p>
<p><a href="#k07">7. Logické operace</a></p>
<p><a href="#k08">8. Bitové posuny a rotace</a></p>
<p><a href="#k09">9. Bitové operace</a></p>
<p><a href="#k10">10. Podmíněné i nepodmíněné skoky</a></p>
<p><a href="#k11">11. Podmíněný přeskok následující instrukce</a></p>
<p><a href="#k12">12. Porovnání operandů s&nbsp;případným podmíněným skokem</a></p>
<p><a href="#k13">13. Obsah následující části seriálu</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Instrukční soubor čipů PIC24 a dsPIC</h2>

<p>Na <a
href="https://www.root.cz/clanky/cipy-pic24-a-dspic-na-rozhrani-mezi-mikroradici-a-dsp/">stručný
popis šestnáctibitových mikrořadičů PIC24 a dsPIC</a> dnes navážeme, protože se
seznámíme s&nbsp;některými instrukcemi z&nbsp;poměrně rozsáhlého instrukčního
souboru těchto čipů. Prozatím se zaměříme na &bdquo;běžné&ldquo; instrukce,
které se do značné míry podobají instrukcím známým z&nbsp;dalších již popsaných
mikrořadičů (až na jednu výjimku &ndash; podmíněné instrukce typu <i>skip</i>).
Později se seznámíme i s&nbsp;dalšími instrukcemi, které jsou pro řadu PIC24 a
především pak dsPIC unikátní. V&nbsp;následující tabulce jsou dnes popsané
instrukce rozděleny do běžných kategorií:</p>

<table>
<tr><th>Skupina instrukcí</th><th>Počet instrukcí ve skupině</th></tr>
<tr><td><a href="#k04">Přesuny dat</a></td><td>16</td></tr>
<tr><td><a href="#k05">Aritmetické operace</a></td><td>14</td></tr>
<tr><td><a href="#k06">Násobení a dělení</a></td><td>14</td></tr>
<tr><td><a href="#k07">Logické operace</a></td><td>6</td></tr>
<tr><td><a href="#k08">Bitové posuny a rotace</a></td><td>7</td></tr>
<tr><td><a href="#k09">Bitové operace</a></td><td>12</td></tr>
<tr><td><a href="#k10">Podmíněné i nepodmíněné skoky</a></td><td>17</td></tr>
<tr><td><a href="#k11">Podmíněný přeskok následující instrukce</a></td><td>6</td></tr>
<tr><td><a href="#k12">Porovnání operandů s&nbsp;případným podmíněným skokem</a></td><td>11</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Adresovací režimy</h2>

<p>Možnosti adresování byly u čipů PIC24/dsPIC oproti osmibitovým PICům značně
rozšířeny. Připomeňme si, že tyto čipy mají Harvardskou architekturu,
tj.&nbsp;programová paměť je oddělena od datové paměti. Liší se i struktura
těchto pamětí, protože programová paměť používá slova o šířce 24 bitů, kdežto
z&nbsp;datové paměti je možné číst operandy o šířce osmi bitů či šestnácti
bitů. Programová paměť může mít kapacitu až 4M &times; 24 bitů a pro adresování
instrukcí se používá registr <strong>PC</strong> o šířce 23 bitů. Nejnižší bit
<strong>PC</strong> je vždy nulový, což vlastně znamená, že se
<strong>PC</strong> vždy zvyšuje o krok 2 (u skoků o sudou hodnotu). Jedná se
jen o umělé omezení kvůli částečné zpětné kompatibilitě.</p>

<p>Základní kapacita datové paměti je 64kB neboli 32k slov. Některé čipy
umožňují horní polovinu adresního prostoru mapovat na jiné fyzické adresy, což
je jedna z&nbsp;forem stránkování (<i>paging</i>). Při adresování operandů je
možné použít následující adresní režimy:</p>

<ol>
<li>Přímý index registru (ty jsou mapovány na adresy 0x0000 až 0x001Ff</li>
<li>Nepřímé použití registru (adresy 0x0000 až 0xffff)</li>
<li>&bdquo;File register&ldquo;, přímá adresa (adresy 0x0000 až 0x1fff). Termín &bdquo;file register&ldquo; je převzat z&nbsp;osmibitových PICů a značí operand uložený přímo v&nbsp;paměti.</li>
</ol>

<p>První dva adresní režimy používají indexy 0x0 až 0xf na určení libovolného
pracovního registru. Při nepřímém adresování je obsah registru použit jako
adresa operandu:</p>

<table>
<tr><th>Index</th><th>Registr</th><th>Alternativní funkce/jméno</th></tr>
<tr><td>0x0</td><td>W0</td><td>WREG</td></tr>
<tr><td>0x1</td><td>W1</td><td>&nbsp;</td></tr>
<tr><td>0x2</td><td>W2</td><td>&nbsp;</td></tr>
<tr><td>0x3</td><td>W3</td><td>&nbsp;</td></tr>
<tr><td>0x4</td><td>W4</td><td>&nbsp;</td></tr>
<tr><td>0x5</td><td>W5</td><td>&nbsp;</td></tr>
<tr><td>0x6</td><td>W6</td><td>&nbsp;</td></tr>
<tr><td>0x7</td><td>W7</td><td>&nbsp;</td></tr>
<tr><td>0x8</td><td>W8</td><td>&nbsp;</td></tr>
<tr><td>0x9</td><td>W9</td><td>&nbsp;</td></tr>
<tr><td>0xa</td><td>W10</td><td>&nbsp;</td></tr>
<tr><td>0xb</td><td>W11</td><td>&nbsp;</td></tr>
<tr><td>0xc</td><td>W12</td><td>&nbsp;</td></tr>
<tr><td>0xd</td><td>W13</td><td>&nbsp;</td></tr>
<tr><td>0xe</td><td>W14</td><td>Frame pointer</td></tr>
<tr><td>0xf</td><td>W15</td><td>Stack pointer</td></tr>
</table>

<p>Pro instrukce určené pro čtení či zápis do tabulek (table read, table write)
se při adresování používá speciální registr <strong>TBLPAG</strong> obsahující
nejvyšších osm bitů adresy začátku tabulky. Čipy PIC24E, některé varianty
PIC24F a dsPIC33E navíc obsahují i registry nazvané <strong>DSRPAG</strong> a
<strong>DSWPAG</strong> rozšiřující možnosti adresování až na 16 megabajtů
(resp.&nbsp;přesněji 8 Mslov). Tento adresový prostor se označuje zkratkou
<strong>EDS</strong> neboli <i>Extended Data Space</i>. Registr
<strong>DSRPAG</strong> má šířku deset bitů, registr <strong>DSWPAG</strong>
jen devět bitů.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Formát instrukčních slov</h2>

<p>24bitová instrukční slova jsou rozdělena do několika bitových polí. Některé
instrukce mají v&nbsp;instrukční slovu uloženou i konstantu, ať již se jedná o
konstantu se znaménkem (podmíněné skoky) či bez znaménka (adresa &bdquo;file
registru&ldquo;). Podívejme se na několik možností rozdělení 24bitových slov na
jednotlivá pole:</p>

<table>
<tr><th>Operační kód</th><th>Konstanta</th><th>Instrukce</th></tr>
<tr><td>8 bitů</td><td>16 bitů</td><td>relativní skoky <strong>BRA</strong></td></tr>
<tr><td>11 bitů</td><td>13 bitů</td><td>aritmetické instrukce WREG &oplus; file register</td></tr>
<tr><td>11 bitů</td><td>13 bitů</td><td>bitové rotace a posuny s&nbsp;file registrem</td></tr>
<tr><td>4 bity</td><td>16 bitů</td><td>načtení 16bitové konstanty do registru (zbylé čtyři bity tvoří index registru)</td></tr>
<tr><td>5 bitů</td><td>15 bitů</td><td>přesun hodnoty mezi file registrem a pracovním registrem</td></tr>
</table>

<p>Několik instrukcí používá dvě instrukční slova. První slovo vždy udává typ
instrukce a část adresy, další slovo je pak zakódováno jako instrukce
<strong>NOP</strong> s&nbsp;až šestnáctibitovou konstantou. Příkladem je
instrukce <strong>CALL</strong> pro absolutní skok na libovolnou (sudou) adresu
v&nbsp;programové paměti. V&nbsp;prvním slovu je uložen operační kód instrukce
a 16 bitů adresy, ve slovu druhém pak instrukce <strong>NOP</strong> a zbylých
sedm bitů adresy.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Přesuny dat</h2>

<p>Poměrně rozsáhlá je skupina instrukcí určených pro přenosy dat mezi registry
popř.&nbsp;mezi operační pamětí a vybraným pracovním registrem. Patří sem i
instrukce určené pro načtení hodnot do speciálních registrů DSRPAG, DSWPAG a
TBLPAG. Poslední dvě instrukce prohazují nibbly (4 bity) nebo bajty ve vybraném
pracovním registru:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>MOV WREG, f</td><td>přesun z&nbsp;registru WREG do paměti (podporuje i přesun jednoho bajtu)</td></tr>
<tr><td>MOV Wn, f</td><td>přesun z&nbsp;registru Wn do paměti</td></tr>
<tr><td>MOV f, Wn</td><td>opak předchozí instrukce</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MOV Wn, #konstanta8</td><td>načtení osmibitové konstanty</td></tr>
<tr><td>MOV Wn, #konstanta16</td><td>načtení 16bitové konstanty</td></tr>
<tr><td>MOV Wn, Wm</td><td>přesun dat mezi registry</td></tr>
<tr><td>EXCH Wn, Wm</td><td>prohození dat mezi registry</td></tr>
<tr><td>MOV.D Ws, Wnd </td><td>přesun dvou slov (více adresních režimů)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MOVPAG #konstanta10, DSRPAG</td><td>načtení desetibitové konstanty do registru DSRPAG</td></tr>
<tr><td>MOVPAG #konstanta9, DSWPAG</td><td>načtení devítibitové konstanty do registru DSWPAG</td></tr>
<tr><td>MOVPAG #konstanta8, TBLPAG</td><td>načtení osmibitové konstanty do registru TBLPAG</td></tr>
<tr><td>MOVPAG Wn, DSRPAG</td><td>přenos z registru Wn do registru DSRPAG</td></tr>
<tr><td>MOVPAG Wn, DSWPAG</td><td>přenos z registru Wn do registru DSWPAG</td></tr>
<tr><td>MOVPAG Wn, TBLPAG</td><td>přenos z registru Wn do registru TBLPAG</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>SWAP.B Wn</td><td>prohození nibblů spodních osmi bitů registru</td></tr>
<tr><td>SWAP.W Wn</td><td>prohození bajtů vybraného registru</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. Aritmetické operace</h2>

<p>Všechny aritmetické instrukce se dvěma zdrojovými operandy podporují několik
způsobů určení zdrojových operandů i operandu cílového. V&nbsp;následující
tabulce jsou tyto způsoby vypsány pro libovolnou binární operaci &oplus;
(dosaďte si za ni například ADD). Povšimněte si, že je možné použít i
tříadresový kód, což může být výhodné zejména pro překladače vyšších
programovacích jazyků. Dva způsoby adresování navíc umožňují přičíst ke
zdrojovému operandu desetibitovou či pětibitovou konstantu:</p>

<table>
<tr><th>Instrukce/Operandy</th><th>Význam</th></tr>
<tr><td>instrukce f,WREG       </td><td>WREG = f &oplus; WREG (lze použít i modifikátor .B pro operaci s&nbsp;bajty)</td></tr>
<tr><td>instrukce WREG,f       </td><td>f = f &oplus; WREG (lze použít i modifikátor .B pro operaci s&nbsp;bajty)</td></tr>
<tr><td>instrukce #konst10,Wn  </td><td>Wn = desetibitová konstanta &oplus; Wn</td></tr>
<tr><td>instrukce Wb,#konst5,Wd</td><td>Wd = Wb &oplus; pětibitová konstanta</td></tr>
<tr><td>instrukce Wb,Ws,Wd     </td><td>Wd = Wb &oplus; Ws</td></tr>
</table>

<p>V&nbsp;tabulce pod tímto odstavcem jsou vypsány všechny základní aritmetické
instrukce i některé pomocné instrukce typu <strong>INC2</strong>,
<strong>DEC2</strong>, <strong>DAW.B</strong> atd.. Poslední dvě instrukce
<strong>SE</strong> a <strong>ZE</strong> dokážou rozšířit vstupní osmibitový
operand, a to buď znaménkově (nejvyšší bit operandu se rozkopíruje do vyšších
bitů výsledku) nebo bezznaménkově (vyšší bity výsledku jsou nulové):</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>ADD</td><td>součet</td></tr>
<tr><td>ADDC</td><td>součet s&nbsp;carry</td></tr>
<tr><td>SUB</td><td>rozdíl</td></tr>
<tr><td>SUBB</td><td>rozdíl a navíc odečtení carry</td></tr>
<tr><td>SUBR</td><td>rozdíl s&nbsp;prohozením operandů</td></tr>
<tr><td>SUBBR</td><td>kombinace SUBB a SUBR</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>INC</td><td>zvýšení operandu o 1</td></tr>
<tr><td>INC2</td><td>zvýšení operandu o 2</td></tr>
<tr><td>DEC</td><td>snížení operandu o 1</td></tr>
<tr><td>DEC2</td><td>snížení operandu o 2</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>DAW.B</td><td>úprava po součtu při práci v&nbsp;BCD</td></tr>
<tr><td>NEG</td><td>změna znaménka</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>SE</td><td>znaménkové rozšíření operandu</td></tr>
<tr><td>ZE</td><td>bezznaménkové rozšíření operandu (zleva se doplní nuly)</td></tr>
</table>



<p><a name="k06"></a></p>
<h2 id="k06">6. Násobení a dělení</h2>

<p>Samostatnou skupinu tvoří instrukce pro násobení a dělení. Ty lze rozdělit
jak podle šířky operandů, tak i podle toho, zda jsou operandy reprezentovány
formou hodnot bez znaménka či se znaménkem:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>MUL</td><td>vynásobení W3:W2 = f*WREG</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MUL.SS</td><td>vynásobení dvou operandů se znaménkem (výsledek je uložen do dvou registrů)</td></tr>
<tr><td>MUL.SU</td><td>vynásobení operandu se znaménkem s&nbsp;operandem bez znaménka</td></tr>
<tr><td>MUL.US</td><td>vynásobení operandu bez znaménka s&nbsp;operandem se znaménkem</td></tr>
<tr><td>MUL.UU</td><td>vynásobení dvou operandů bez znaménka</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MULW.SS</td><td>odpovídá instrukci MUL.SS, ale vstupní operandy mají šířku jeden bajt a výsledkem je 16bitová hodnota</td></tr>
<tr><td>MULW.SU</td><td>odpovídá instrukci MUL.SU, ale vstupní operandy mají šířku jeden bajt a výsledkem je 16bitová hodnota</td></tr>
<tr><td>MULW.US</td><td>odpovídá instrukci MUL.US, ale vstupní operandy mají šířku jeden bajt a výsledkem je 16bitová hodnota</td></tr>
<tr><td>MULW.UU</td><td>odpovídá instrukci MUL.UU, ale vstupní operandy mají šířku jeden bajt a výsledkem je 16bitová hodnota</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>DIV.S </td><td>dělení se znaménkem: 16 bitů/16 bitů</td></tr>
<tr><td>DIV.SD</td><td>dělení se znaménkem: 32 bitů/32 bitů</td></tr>
<tr><td>DIV.U </td><td>dělení bez znaménka: 16 bitů/16 bitů</td></tr>
<tr><td>DIV.UD</td><td>dělení bez znaménka: 32 bitů/32 bitů</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>DIVF</td><td>dělení se znaménkem 16 bitů/16 bitů (typ <i>fractional</i>)</td></tr>
</table>

<p>Poznámka: instrukce <strong>DIVF</strong>, <strong>DIV.S</strong>,
<strong>DIV.SD</strong>, <strong>DIV.U</strong> a <strong>DIV.UD</strong> je
nutné volat osmnáctkrát, protože výpočet je iterativní. K&nbsp;tomu lze využít
instrukci <strong>REPEAT</strong> popsanou dále. Naproti tomu je násobení
provedeno v&nbsp;jediném taktu, podobně jako na mnoha dalších digitálních
signálových procesorech.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Logické operace</h2>

<p>Sada instrukcí provádějících logické operace obsahuje všechny tři základní
operace Booleovské logiky (negace, logický součin/konjunkce a logický
součet/disjunkce), které jsou doplněny o logickou nonekvivalenci. Kromě toho
v&nbsp;této skupině instrukcí najdeme i doplňkovou instrukci určenou pro
nastavení všech bitů zvoleného registru či buňky paměti na nulu a taktéž
instrukci s&nbsp;opačným významem &ndash; nastavením všech bitů na
jedničku:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>COM</td><td>negace bit po bitu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>AND</td><td>logický součin bit po bitu</td></tr>
<tr><td>IOR</td><td>logický součet bit po bitu</td></tr>
<tr><td>XOR</td><td>logická nonekvivalence bit po bitu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>CLR</td><td>vynulování registru či buňky paměti</td></tr>
<tr><td>SETM</td><td>registru či buňky paměti na hodnotu 0xffff</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Bitové posuny a rotace</h2>

<p>V&nbsp;instrukčním souboru nalezneme všechny používané varianty pro posuny a
rotace. Rotace mohou být prováděny přes příznak carry (C) nebo s&nbsp;jeho
vyloučením. Pokud se rotace provádí přes carry, rotuje se pochopitelně sedmnáct
bitů a nikoli pouze bitů šestnáct. Mezi posuny počítáme logický posun doprava
(do MSb se dosazuje nula), aritmetický posun doprava (MSb se duplikuje) a
logický/aritmetický posun doleva (do LSb se dosazuje nula):</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>RLC</td><td>rotace doleva přes carry</td></tr>
<tr><td>RLNC</td><td>rotace doleva</td></tr>
<tr><td>RRC</td><td>rotace doprava přes carry</td></tr>
<tr><td>RRNC</td><td>rotace doprava</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>ASR</td><td>aritmetický posun doprava, carry se naplní původním LSb</td></tr>
<tr><td>LSR</td><td>logický posun doprava, carry se naplní původním LSb</td></tr>
<tr><td>SL</td><td>posun doleva (aritmetický i logický), carry se naplní původním MSb</td></tr>
</table>

<p>Poznámka: MSb značí nejvyšší bit ve slově, LSb bit nejnižší.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Bitové operace</h2>

<p>Do další skupiny instrukcí patří různé bitové operace. Většina těchto
instrukcí obsahuje ve svém instrukčním slovu i index bitu, který se má
nastavit, vynulovat, znegovat či otestovat. Povšimněte si, že u těch instrukcí,
které přenáší hodnoty mezi vybraným bitem a příznakem zero (Z) se ve
skutečnosti pracuje s&nbsp;negací tohoto příznaku. Poslední tři instrukce jsou
nejkomplikovanější, neboť ve slovu musí hledat zvolený vzorek (buď první změnu
nebo první nenulový bit):</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>BCLR</td><td>vynulování vybraného bitu 0..15</td></tr>
<tr><td>BSET</td><td>nastavení vybraného bitu 0..15 na jedničku</td></tr>
<tr><td>BTG</td><td>negace (<i>toggle</i>) vybraného bitu 0..15</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BSW.C</td><td>uložení příznaku C (carry) do vybraného bitu</td></tr>
<tr><td>BSW.Z</td><td>uložení negovaného příznaku Z (zero) do vybraného bitu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BTST.C</td><td>otestování hodnoty bitu 0..15 a uložení výsledku do příznaku C (carry)</td></tr>
<tr><td>BTST.Z</td><td>otestování hodnoty bitu 0..15 a uložení negovaného výsledku do příznaku Z (zero)</td></tr>
<tr><td>BTSTS.C</td><td>jako BTST.C + nastavení bitu na jedničku</td></tr>
<tr><td>BTSTS.Z</td><td>jako BTST.Z + nastavení bitu na jedničku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>FBCL</td><td>najde první změnu (negaci) v&nbsp;bitovém vzorku (začíná od MSb)</td></tr>
<tr><td>FF1L</td><td>najde první jedničkový bit (začíná od MSb)</td></tr>
<tr><td>FF1R</td><td>najde první jedničkový bit (začíná od LSb)</td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Podmíněné i nepodmíněné skoky</h2>

<p>Skupina skokových instrukcí je poměrně rozsáhlá (na rozdíl od osmibitových
PICů), protože v&nbsp;instrukční sadě nalezneme jak klasické nepodmíněné skoky,
tak i skoky podmíněné:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>BRA</td><td>nepodmíněný skok</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BRA C</td><td>skok při Carry=1</td></tr>
<tr><td>BRA NC</td><td>skok při Carry=0</td></tr>
<tr><td>BRA Z</td><td>skok při Zero=1</td></tr>
<tr><td>BRA NZ</td><td>skok při Zero=0</td></tr>
<tr><td>BRA N</td><td>skok při Negative=1</td></tr>
<tr><td>BRA NN</td><td>skok při Negative=0</td></tr>
<tr><td>BRA OV</td><td>skok při Overflow=1</td></tr>
<tr><td>BRA NOV</td><td>skok při Overflow=0</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BRA GE</td><td>skok při podmínce &ge; (signed)</td></tr>
<tr><td>BRA GEU</td><td>skok při podmínce &ge; (unsigned)</td></tr>
<tr><td>BRA GT</td><td>skok při podmínce &gt; (signed)</td></tr>
<tr><td>BRA GTU</td><td>skok při podmínce &gt; (unsigned)</td></tr>
<tr><td>BRA LE</td><td>skok při podmínce &le; (signed)</td></tr>
<tr><td>BRA LEU</td><td>skok při podmínce &le; (unsigned)</td></tr>
<tr><td>BRA LT</td><td>skok při podmínce &lt; (signed)</td></tr>
<tr><td>BRA LTU</td><td>skok při podmínce &lt; (unsigned)</td></tr>
</table>

<p>Poznámka: všechny varianty instrukcí <strong>BRA</strong> provádí relativní
skok, což zde konkrétně znamená, že pokud je podmínka splněna, je k&nbsp;obsahu
registru <strong>PC</strong> přičtena šestnáctibitová konstanta se znaménkem,
která je součástí instrukčního slova a která je navíc vynásobena dvěma. Pokud
podmínka splněna není, je k&nbsp;registru <strong>PC</strong> přičtena dvojka.
Pro skok na absolutní adresu se používá instrukce <strong>GOTO</strong>.</p>

<p>Poznámka<sup>2</sup>: instrukce <strong>BRA GEU</strong> je aliasem
instrukce <strong>BRA C</strong>. Podobně je instrukce <strong>BRA LTU</strong>
aliasem instrukce <strong>BRA NC</strong>.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Podmíněný přeskok následující instrukce</h2>

<p>V&nbsp;prvních verzích <i>osmibitových</i> mikrořadičů PIC se objevila
zajímavá vlastnost &ndash; zatímco u naprosté většiny ostatních mikroprocesorů
i mikrořadičů se v&nbsp;jejich instrukční sadě nachází instrukce umožňující
provádění podmíněných skoků, tj.&nbsp;skoků provedených po splnění nějaké
podmínky (nulový, kladný či záporný výsledek předchozí aritmetické či logické
operace, přetečení předchozí aritmetické operace, atd.), obsahují osmibitové
mikrořadiče <i>PIC</i> (kromě nejvyšší řady) pouze instrukci pro provedení
nepodmíněného skoku <strong>GOTO</strong> a několik instrukcí, které po splnění
nějaké podmínky změní programový čítač takovým způsobem, že je následující
instrukce přeskočena (<i>skip</i>). Podmíněný skok se tedy implementuje pomocí
dvojice instrukcí &ndash; některé instrukce typu <strong>SKIP</strong>
s&nbsp;opačnou podmínkou následovanou nepodmíněným skokem. Ovšem
v&nbsp;některých případech se skok vůbec nemusí provádět, protože ona jediná
instrukce nacházející se za <strong>SKIP</strong> může nahradit celý podmíněný
blok (vyslání bitu na externí port, pokud je splněna nějaká podmínka, reset
watchdogu atd.). Tato možnost zůstala zachována i u šestnáctibitových PICů:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>BTSC</td><td>test vybraného bitu, vynechání následující instrukce pokud je testovaný bit nulový</td></tr>
<tr><td>BTSS</td><td>test vybraného bitu, vynechání následující instrukce pokud je testovaný bit jedničkový</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>CPSEQ</td><td>porovnání dvou registrů, vynechání následující instrukce při rovnosti obsahu registrů</td></tr>
<tr><td>CPSGT</td><td>porovnání dvou registrů, vynechání následující instrukce pokud je první registr větší</td></tr>
<tr><td>CPSLT</td><td>porovnání dvou registrů, vynechání následující instrukce pokud je první registr menší</td></tr>
<tr><td>CPSNE</td><td>porovnání dvou registrů, vynechání následující instrukce pokud se registry nerovnají</td></tr>
</table>

<p>Jen pro porovnání se podívejme, jaké instrukce typu &bdquo;skip&ldquo; jsou
dostupné na osmibitových PICech (navíc je doplněna i binární podoba operačního
kódu instrukce pro 12bitová instrukční slova):</p>

<table>
<tr><th>Operační kód (bin)</th><th>Jméno instrukce</th><th>Stručný popis instrukce</th></tr>
<tr><td>0010 11d fffff</td><td>DECFSZ f,d</td><td>d = f - 1, vynechání následující instrukce pokud je výsledek nula</td></tr>
<tr><td>0011 11d fffff</td><td>INCFSZ f,d</td><td>d = f + 1, vynechání následující instrukce pokud je výsledek nula</td></tr>
<tr><td>0110 bbb fffff</td><td>BTFSC f,b </td><td>Bit test f, vynechání následující instrukce pokud je bit nulový</td></tr>
<tr><td>0111 bbb fffff</td><td>BTFSS f,b </td><td>Bit test f, vynechání následující instrukce pokud je bit jedničkový</td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Porovnání operandů s&nbsp;případným podmíněným skokem</h2>

<p>Další skupina instrukcí slouží k&nbsp;porovnání dvou operandů a nastavení
příznakových bitů na základě výsledku porovnání. Porovnání si můžeme představit
jako instrukci <strong>SUB</strong>, jejíž výsledek je zahozen. Kromě toho zde
nalezneme i instrukci nazvanou <strong>CPB</strong>, která odpovídá
<strong>SUBB</strong>, tj.&nbsp;od mezivýsledku se navíc odečte příznak carry
(ten zde tedy vystupuje ve funkci výpůjčky &ndash; <i>borrow</i>). Poslední
čtyři instrukce jsou vlastně podmíněnými skoky, které se provedou přímo na
základě porovnání obsahu dvou pracovních registrů:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>CP f</td><td>porovnání buňky paměti s&nbsp;registrem WREG</td></tr>
<tr><td>CP W, #lit</td><td>porovnání s&nbsp;konstantou</td></tr>
<tr><td>CP Wb, Ws</td><td>porovnání dvou pracovních registrů</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>CP0</td><td>porovnání buňky paměti či registru s&nbsp;nulou</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>CPB f</td><td>porovnání buňky paměti s&nbsp;registrem WREG, navíc se odečte Carry</td></tr>
<tr><td>CPB W, #lit</td><td>porovnání s&nbsp;konstantou, navíc se odečte Carry</td></tr>
<tr><td>CPB Wb, Ws</td><td>porovnání dvou pracovních registrů, navíc se odečte Carry</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>CPBEQ</td><td>porovnání dvou pracovních registrů a skok při podmínce =</td></tr>
<tr><td>CPBGT</td><td>porovnání dvou pracovních registrů a skok při podmínce &gt;</td></tr>
<tr><td>CPBLT</td><td>porovnání dvou pracovních registrů a skok při podmínce &lt;</td></tr>
<tr><td>CPBNE</td><td>porovnání dvou pracovních registrů a skok při podmínce &ne;</td></tr>
</table>



<p><a name="k13"></a></p>
<h2 id="k13">13. Obsah následující části seriálu</h2>

<p>V&nbsp;následující části seriálu o architekturách počítačů a procesorů popis
čipů PIC24 a dsPIC dokončíme. Budeme se zabývat především těmi instrukcemi,
které slouží pro DSP výpočty. Tyto instrukce většinou své výsledky ukládají do
akumulátorů, s&nbsp;nimiž je samozřejmě možné provádět i mnoho dalších operací,
včetně porovnání, podmíněných skoků atd. Nezapomeneme ovšem ani na další
specifické vlastnosti popisovaných čipů, zejména na možnost opakování instrukcí
s&nbsp;využitím <strong>REPEAT</strong> (tuto možnost jsme již zmínili u
instrukcí dělení, které je nutné 18&times; opakovat).</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Stránky společnosti Microchip<br />
<a href="http://www.microchip.com/">http://www.microchip.com/</a>
</li>

<li>Mikrořadiče řady PIC10<br />
<a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1009">http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1009</a>
</li>

<li>Mikrořadiče řady PIC12<br />
<a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1001">http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1001</a>
</li>

<li>Mikrořadiče řady PIC16<br />
<a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1002">http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1002</a>
</li>

<li>Mikrořadiče řady PIC18<br />
<a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1004">http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1004</a>
</li>

<li>Šestnáctibitové mikrořadiče PIC<br />
<a href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=20">http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=20</a>
</li>

<li>Microchip's 32-bit MCUs<br />
<a href="http://www.microchip.com/design-centers/32-bit">http://www.microchip.com/design-centers/32-bit</a>
</li>

<li>Development Tools (oficiálně dostupné nástroje pro PIC)<br />
<a href="http://www.microchip.com/development-tools/">http://www.microchip.com/development-tools/</a>
</li>

<li>Vývojové nástroje pro osmibitové mikrořadiče PIC<br />
<a href="https://www.root.cz/clanky/vyvojove-nastroje-pro-osmibitove-mikroradice-pic/">https://www.root.cz/clanky/vyvojove-nastroje-pro-osmibitove-mikroradice-pic/</a>
</li>

<li>Mikroprocesory s&nbsp;architekturou MIPS<br />
<a href="https://www.root.cz/clanky/procesory-s-architekturou-risc-v-pracovnich-stanicich-a-serverech/">https://www.root.cz/clanky/procesory-s-architekturou-risc-v-pracovnich-stanicich-a-serverech/</a>
</li>

<li>gpsim Home Page<br />
<a href="http://gpsim.sourceforge.net/gpsim.html">http://gpsim.sourceforge.net/gpsim.html</a>
</li>

<li>Gpsim (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gpsim">https://en.wikipedia.org/wiki/Gpsim</a>
</li>

<li>Digital Signal Processors (stránky TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/overview.page">http://www.ti.com/lsds/ti/processors/dsp/overview.page</a>
</li>

<li>C674x Low Power DSP (stránky TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/c6000_dsp/c674x/overview.page">http://www.ti.com/lsds/ti/processors/dsp/c6000_dsp/c674x/overview.page</a>
</li>

<li>TMS320C30 (stránky TI)<br />
<a href="http://www.ti.com/product/tms320c30">http://www.ti.com/product/tms320c30</a>
</li>

<li>TMS320C6722B<br />
<a href="http://www.ti.com/product/tms320c6722b/description">http://www.ti.com/product/tms320c6722b/description</a>
</li>

<li>Introduction to DSP<br />
<a href="http://www.ti.com/lit/wp/spry281/spry281.pdf">http://www.ti.com/lit/wp/spry281/spry281.pdf</a>
</li>

<li>The Evolution of TMS (Family of DSPs)<br />
<a href="http://www.slideshare.net/moto_modx/theevo1">http://www.slideshare.net/moto_modx/theevo1</a>
</li>

<li>ST10 16-bit MCUs<br />
<a href="http://www.st.com/en/microcontrollers/st10-16-bit-mcus.html?querycriteria=productId=LN1111">http://www.st.com/en/microcontrollers/st10-16-bit-mcus.html?querycriteria=productId=LN1111</a>
</li>

<li>XC800 family<br />
<a href="https://en.wikipedia.org/wiki/XC800_family">https://en.wikipedia.org/wiki/XC800_family</a>
</li>

<li>C166 (stránky společnosti Infineon)<br />
<a href="https://www.infineon.com/cms/en/product/microcontroller/16-bit-c166-microcontroller/channel.html?channel=ff80808112ab681d0112ab6b2eaf0759#ispnTab3">https://www.infineon.com/cms/en/product/microcontroller/16-bit-c166-microcontroller/channel.html?channel=ff80808112ab681d0112ab6b2eaf0759#ispnTab3</a>
</li>

<li>C166 Family<br />
<a href="https://en.wikipedia.org/wiki/C166_family">https://en.wikipedia.org/wiki/C166_family</a>
</li>

<li>Zero-power Microcontrollers for Low-power and High-temperature Applications<br />
<a href="http://en.wikichip.org/w/images/1/17/Atmel_MARC4_brochure.pdf">http://en.wikichip.org/w/images/1/17/Atmel_MARC4_brochure.pdf</a>
</li>

<li>MARC4 Micro-Controller (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MARC4_Micro-Controller">https://en.wikipedia.org/wiki/MARC4_Micro-Controller</a>
</li>

<li>MARC4 - Atmel<br />
<a href="https://en.wikichip.org/wiki/atmel/marc4">https://en.wikichip.org/wiki/atmel/marc4</a>
</li>

<li>MARC 4bit Microcontrollers Programmer's Guide<br />
<a href="https://en.wikichip.org/w/images/4/44/MARC4_4-bit_Microcontrollers_Programmer%27s_Guide.pdf">https://en.wikichip.org/w/images/4/44/MARC4_4-bit_Microcontrollers_Programmer%27s_Guide.pdf</a>
</li>

<li>MARC4 User's Guide qFORTH Compiler<br />
<a href="https://en.wikichip.org/w/images/2/25/MARC4_User%27s_Guide_qFORTH_Compiler.pdf">https://en.wikichip.org/w/images/2/25/MARC4_User%27s_Guide_qFORTH_Compiler.pdf</a>
</li>

<li>Programovací jazyk Forth a zásobníkové procesory<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory/">http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory/</a>
</li>

<li>Seriál Programovací jazyk Forth<br />
<a href="http://www.root.cz/serialy/programovaci-jazyk-forth/">http://www.root.cz/serialy/programovaci-jazyk-forth/</a>
</li>

<li>Programovací jazyk Factor<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-factor/">http://www.root.cz/clanky/programovaci-jazyk-factor/</a>
</li>

<li>PMOS<br />
<a href="https://en.wikipedia.org/wiki/PMOS_logic">https://en.wikipedia.org/wiki/PMOS_logic</a>
</li>

<li>NMOS<br />
<a href="https://en.wikipedia.org/wiki/NMOS_logic">https://en.wikipedia.org/wiki/NMOS_logic</a>
</li>

<li>CMOS<br />
<a href="https://en.wikipedia.org/wiki/CMOS">https://en.wikipedia.org/wiki/CMOS</a>
</li>

<li>Computer History Museum: TMS 1000 4-Bit microcontroller<br />
<a href="http://www.computerhistory.org/collections/catalog/102711697">http://www.computerhistory.org/collections/catalog/102711697</a>
</li>

<li>Texas Instruments TMS1000 microcontroller family<br />
<a href="http://www.cpu-world.com/CPUs/TMS1000/">http://www.cpu-world.com/CPUs/TMS1000/</a>
</li>

<li>Invention History of Microcontroller<br />
<a href="http://www.circuitstoday.com/microcontroller-invention-history">http://www.circuitstoday.com/microcontroller-invention-history</a>
</li>

<li>TMS1000 Series - TI<br />
<a href="https://en.wikichip.org/wiki/ti/tms1000">https://en.wikichip.org/wiki/ti/tms1000</a>
</li>

<li>TMX1795 - TI<br />
<a href="https://en.wikichip.org/wiki/ti/tmx1795">https://en.wikichip.org/wiki/ti/tmx1795</a>
</li>

<li>Milton Bradley Microvision (U.S.) (1979, LCD, 9 Volt (1 or 2), Model# 4952)<br />
<a href="http://www.handheldmuseum.com/MB/uVUS.htm">http://www.handheldmuseum.com/MB/uVUS.htm</a>
</li>

<li>8051 Microcontroller<br />
<a href="http://www.circuitstoday.com/8051-microcontroller">http://www.circuitstoday.com/8051-microcontroller</a>
</li>

<li>4-bit (computer architectures)<br />
<a href="https://en.wikipedia.org/wiki/4-bit">https://en.wikipedia.org/wiki/4-bit</a>
</li>

<li>TMS 1000 Data Manual<br />
<a href="http://blog.kevtris.org/blogfiles/TMS_1000_Data_Manual.pdf">http://blog.kevtris.org/blogfiles/TMS_1000_Data_Manual.pdf</a>
</li>

<li>Considerations for 4-bit processing<br />
<a href="http://www.embeddedinsights.com/channels/2010/12/10/considerations-for-4-bit-processing/">http://www.embeddedinsights.com/channels/2010/12/10/considerations-for-4-bit-processing/</a>
</li>

<li>Are you, or would you consider, using a 4-bit microcontroller?<br />
<a href="http://www.embeddedinsights.com/channels/2010/11/24/are-you-or-would-you-consider-using-a-4-bit-microcontroller/">http://www.embeddedinsights.com/channels/2010/11/24/are-you-or-would-you-consider-using-a-4-bit-microcontroller/</a>
</li>

<li>MARC4 Micro-Controller<br />
<a href="https://en.wikipedia.org/wiki/MARC4_Micro-Controller">https://en.wikipedia.org/wiki/MARC4_Micro-Controller</a>
</li>

<li>The Texas Instruments TMX 1795: the (almost) first, forgotten microprocessor <br />
<a href="http://www.righto.com/2015/05/the-texas-instruments-tmx-1795-first.html">http://www.righto.com/2015/05/the-texas-instruments-tmx-1795-first.html</a>
</li>

<li>O2 Homepage<br />
<a href="http://www.the-nextlevel.com/odyssey2/">http://www.the-nextlevel.com/odyssey2/</a>
</li>

<li>Magnavox Odyssey2 (1978), Philips Videopac G7000 / C52 (1979)<br />
<a href="http://www.mess.org/sysinfo:odyssey2">http://www.mess.org/sysinfo:odyssey2</a>
</li>

<li>The Video Game Critic's Odyssey 2 Reviews <br />
<a href="http://videogamecritic.net/odd.htm">http://videogamecritic.net/odd.htm</a>
</li>

<li>Computer Closet Collection: Magnavox Odyssey^2<br />
<a href="http://www.computercloset.org/MagnavoxOdyssey2.htm">http://www.computercloset.org/MagnavoxOdyssey2.htm</a>
</li>

<li>PHILIPS Videopac C52<br />
<a href="http://old-computers.com/museum/computer.asp?c=1060">http://old-computers.com/museum/computer.asp?c=1060</a>
</li>

<li>O2 Tech. Manual V.1.1 (PDF dokument)<br />
<a href="http://www.atarihq.com/danb/files/o2doc.pdf">http://www.atarihq.com/danb/files/o2doc.pdf</a>
</li>

<li>Magnavox Odyssey<sup>2</sup><br />
<a href="http://www.game-machines.com/consoles/odyssey2.php">http://www.game-machines.com/consoles/odyssey2.php</a>
</li>

<li>Magnavox Odyssey<sup>2</sup> (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Odyssey_2">http://en.wikipedia.org/wiki/Odyssey_2</a>
</li>

<li>Magnavox Odyssey<sup>2</sup> Games (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/List_of_Videopac_games">http://en.wikipedia.org/wiki/List_of_Videopac_games</a>
</li>

<li>TI 16-bit and 32-bit microcontrollers<br />
<a href="http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page">http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page</a>
</li>

<li>TMS 32010 Assembly Language Programmer's Guide (kniha na Amazonu)<br />
<a href="https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423">https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

