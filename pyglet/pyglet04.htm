<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Multimediální knihovna Pyglet: použití paměti hloubky při zobrazení 3D scén</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Multimediální knihovna Pyglet: použití paměti hloubky při zobrazení 3D scén</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrté části seriálu o multimediální knihovně Pyglet se seznámíme s&nbsp;problematikou framebufferu používaného u grafických akcelerátorů. Následně si ukážeme, jakým způsobem je možné vykreslit trojrozměrná tělesa se správným skrýváním skrytých částí stěn. Pro tuto operaci využijeme takzvanou paměť hloubky neboli depth buffer.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Zobrazení 3D scény bez použití paměti hloubky a problém překrývání stěn</a></p>
<p><a href="#k02">2. Jedno z&nbsp;řešení tohoto problému &ndash; malířův algoritmus</a></p>
<p><a href="#k03">3. Framebuffer grafických akcelerátorů</a></p>
<p><a href="#k04">4. Typy bufferů ve framebufferu</a></p>
<p><a href="#k05">5. Color buffer</a></p>
<p><a href="#k06">6. Depth buffer</a></p>
<p><a href="#k07">7. Stencil buffer</a></p>
<p><a href="#k08">8. Accumulation buffer</a></p>
<p><a href="#k09">9. Řešení překrývaní stěn na úrovní hardware &ndash; paměť hloubky (Z-buffer)</a></p>
<p><a href="#k10">10. Grafické akcelerátory a použití takzvaného W-bufferu</a></p>
<p><a href="#k11">11. Druhý demonstrační příklad: paměť hloubky prakticky</a></p>
<p><a href="#k12">12. Blending</a></p>
<p><a href="#k13">13. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Zobrazení 3D scény bez použití paměti hloubky a problém překrývání stěn</h2>

<p>Ukažme si nejprve příklad, v&nbsp;němž se sice vykreslí trojrozměrná scéna, ovšem bez jakéhokoli řízení viditelnosti stěn. Jinými slovy to znamená, že každé vykreslení další stěny (zde trojúhelníku či čtyřúhelníku) povede k&nbsp;překreslení stěny předchozí, pokud se samozřejmě v&nbsp;daném místě obrázku nějaká stěna již vykreslila. Vzhledem k&nbsp;tomu, že vykreslovaným tělesem můžeme rotovat pomocí kurzorových šipek, lze snadno zjistit, že z&nbsp;některých úhlů je těleso &ndash; domeček &ndash; vykresleno korektně, ale většinou tomu tak není. Ostatně se můžeme podívat na screenshoty:</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/01.png"><img class="alignnone size-thumbnail wp-image-8774" src="https://mojefedora.cz/wp-content/uploads/2017/04/01-243x254.png" alt="" width="243" height="254" /></a>
<p><i>Obrázek 1: Screenshot získaný z&nbsp;dnešního prvního demonstračního příkladu.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/02-2.png"><img class="alignnone size-thumbnail wp-image-8775" src="https://mojefedora.cz/wp-content/uploads/2017/04/02-2-243x254.png" alt="" width="243" height="254" /></a>
<p><i>Obrázek 2: Odlišná rotace tělesa.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/03-3.png"><img class="alignnone size-thumbnail wp-image-8776" src="https://mojefedora.cz/wp-content/uploads/2017/04/03-3-243x254.png" alt="" width="243" height="254" /></a>
<p><i>Obrázek 3: Odlišná rotace tělesa.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/04-2.png"><img class="alignnone size-thumbnail wp-image-8777" src="https://mojefedora.cz/wp-content/uploads/2017/04/04-2-243x254.png" alt="" width="243" height="254" /></a>
<p><i>Obrázek 4: Odlišná rotace tělesa.</i></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu je odvozen od příkladů, s&nbsp;nimiž jsme se seznámili v&nbsp;předchozí části tohoto seriálu:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *
from pyglet.window import key

fov = 70.0                                    # hodnota zorneho uhlu - field of view
nearPlane = 0.1                               # blizsi orezavaci rovina
farPlane = 90.0                               # vzdalenejsi orezavaci rovina

r1 = 0.0
r2 = 0.0

window = pyglet.window.Window(width=500,
                              height=500,
                              caption="Pyglet+OpenGL")


keys = key.KeyStateHandler()
window.push_handlers(keys)



def init():
    glClearColor(0.0, 0.0, 0.3, 0.0)          # barva pozadi obrazku
    glPolygonMode(GL_FRONT, GL_FILL)          # nastaveni rezimu vykresleni vyplnenych sten
    glPolygonMode(GL_BACK, GL_FILL)           # jak pro predni tak pro zadni steny
    glDisable(GL_CULL_FACE)                   # zadne hrany ani steny se nebudou odstranovat



@window.event
def on_resize(width, height):
    init()
    glViewport(0, 0, width, height)           # viditelna oblast pres cele okno



def draw_walls():
    glBegin(GL_QUADS)                         # vykresleni otevrene krychle - sten domecku
    glColor3f(0.0, 0.0, 1.0)                  # modra barva steny
    glVertex3f(-5.0, -5.0, -5.0)
    glVertex3f(-5.0, -5.0,  5.0)
    glVertex3f( 5.0, -5.0,  5.0)
    glVertex3f( 5.0, -5.0, -5.0)

    glColor3f(0.0, 1.0, 0.0)                  # zelena barva steny
    glVertex3f(-5.0,  5.0, -5.0)
    glVertex3f(-5.0,  5.0,  5.0)
    glVertex3f( 5.0,  5.0,  5.0)
    glVertex3f( 5.0,  5.0, -5.0)

    glColor3f(1.0, 0.0, 0.0)                  # cervena barva steny
    glVertex3f(-5.0, -5.0, -5.0)
    glVertex3f(-5.0, -5.0,  5.0)
    glVertex3f(-5.0,  5.0,  5.0)
    glVertex3f(-5.0,  5.0, -5.0)

    glColor3f(1.0, 1.0, 0.0)                  # zluta barva steny
    glVertex3f( 5.0, -5.0, -5.0)
    glVertex3f( 5.0, -5.0,  5.0)
    glVertex3f( 5.0,  5.0,  5.0)
    glVertex3f( 5.0,  5.0, -5.0)
    glEnd()



def draw_roof():
    glBegin(GL_TRIANGLES)                      # vykresleni strechy domecku z trojuhelniku
    glColor3f(0.0, 1.0, 1.0)
    glVertex3f(-5.0,  5.0, -5.0)
    glVertex3f( 5.0,  5.0, -5.0)
    glVertex3f( 0.0, 11.0,  0.0)
 
    glColor3f(1.0, 0.0, 1.0)
    glVertex3f( 5.0,  5.0, -5.0)
    glVertex3f( 5.0,  5.0,  5.0)
    glVertex3f( 0.0, 11.0,  0.0)
 
    glColor3f(1.0, 1.0, 1.0)
    glVertex3f( 5.0,  5.0,  5.0)
    glVertex3f(-5.0,  5.0,  5.0)
    glVertex3f( 0.0, 11.0,  0.0)
 
    glColor3f(0.0, 0.0, 0.0)
    glVertex3f(-5.0,  5.0,  5.0)
    glVertex3f(-5.0,  5.0, -5.0)
    glVertex3f( 0.0, 11.0,  0.0)
    glEnd()



@window.event
def on_draw():
    global r1, r2

    if keys[key.LEFT]:
        r2 = r2 - 1
    if keys[key.RIGHT]:
        r2 = r2 + 1
    if keys[key.UP]:
        r1 = r1 - 1
    if keys[key.DOWN]:
        r1 = r1 + 1

    glClear(GL_COLOR_BUFFER_BIT)              # vymazani vsech bitovych rovin barvoveho bufferu

    glMatrixMode(GL_PROJECTION)               # zacatek modifikace projekcni matice
    glLoadIdentity()                          # vymazani projekcni matice (=identita)
    gluPerspective(fov, 1.0, nearPlane, farPlane);

    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()                          # nahrat jednotkovou matici

    gluLookAt(4.0, 6.0, 18.0,                 # bod, odkud se kamera diva
              0.0, 2.0,  0.0,                 # bod, kam se kamera diva
              0.0, 1.0,  0.0)                 # poloha "stropu" ve scene

    glRotatef(r1, 1.0, 0.0, 0.0)              # rotace objektu
    glRotatef(r2, 0.0, 1.0, 0.0) 

    draw_walls()
    draw_roof()



pyglet.app.run()
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Jedno z&nbsp;řešení tohoto problému &ndash; malířův algoritmus</h2>

<p>V&nbsp;případě, že se polygony rastrují do framebufferu přímo, tj.&nbsp;bez využití dalších programových či technických prostředků, dochází, jak již víme, k&nbsp;jejich nekorektnímu překryvu, protože pořadí polygonů posílané do grafického akcelerátoru obecně neodpovídá reálné viditelnosti jednotlivých stěn. V&nbsp;některých případech to ani není technicky možné, protože například tři polygony mohou být umístěny v&nbsp;prostoru takovým způsobem, že nelze rozhodnout, který je blíže k&nbsp;pozorovateli a který dále. Jedno z&nbsp;řešení viditelnosti by mohlo spočívat v&nbsp;ručním (algoritmickém) seřazení jednotlivých polygonů tak, že nejdříve by se vykreslily stěny (polygony) nejvzdálenější a poté by se postupně překreslovaly stěny bližší.</p>

<p>Toto řešení, které se také podle popsaného principu nazývá malířův algoritmus (<i>painter's algorithm</i>) je však časově náročné (stěny se musí seřadit a to po každé změně v&nbsp;prostorové scéně nebo při každém pohybu kamery-pozorovatele), nepodporuje proudové zpracování dat (opakované řazení) a může vést k&nbsp;nejednoznačnostem při vyhodnocování vzdálenosti jednotlivých stěn, například v&nbsp;již zmíněném případě, kdy se tři stěny vzájemně překrývají. Z&nbsp;tohoto důvodu se v&nbsp;grafických akcelerátorech používá jiná technika, která je optimalizovaná pro proudové zpracování dat bez nutnosti tvorby a udržování složitých datových struktur či použití časově náročných algoritmů. V&nbsp;této technice je pro řešení viditelnosti jednotlivých polygonů či jejich částí (tj.&nbsp;fragmentů) použita takzvaná <i>paměť hloubky</i>, neboli depth buffer, popř. Z-buffer.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Framebuffer grafických akcelerátorů</h2>

<p><a href="#k03">V&nbsp;předchozí kapitole</a> zmíněná paměť hloubky je nedílnou součástí takzvaného <i>framebufferu</i>, který může být implementován buď programově nebo (a to mnohem častěji) je implementován na úrovni hardwaru v&nbsp;GPU. Framebuffer se skládá z&nbsp;několika dílčích bufferů, z&nbsp;nichž každý je určen pro jednu nebo větší množství specifických operací, které lze při vykreslování scény provádět. Do framebufferu se zapisují nebo se z&nbsp;něho čtou takzvané <i>fragmenty</i>, což jsou &ndash; zjednodušeně řečeno &ndash; pixely, které kromě své barvy a průhlednosti obsahují i informace o hloubce (vzdálenosti od kamery), popř.&nbsp;i další informace. Na každý buffer se můžeme dívat jako na paměť, v&nbsp;níž jsou uložena rastrová data (pixely), která mají podle určení bufferu svůj specifický význam. Buffer lze vymazat nebo přečíst do hlavní paměti počítače, popř.&nbsp;do něj data přímo zapsat, což se používá například při programování některých speciálních grafických efektů. Představu o cestě, kterou vykonávají fragmenty před vlastním vykreslením v&nbsp;klasické OpenGL pipeline, nám dá následující obrázek (u moderních GPU je situace odlišná, neboť celá pipeline je programovatelná):</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/05-3.png"><img class="alignnone size-thumbnail wp-image-8778" src="https://mojefedora.cz/wp-content/uploads/2017/04/05-3-366x254.png" alt="" width="366" height="254" /></a>
<p><i>Obrázek 5: Klasická OpenGL pipeline.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Typy bufferů ve framebufferu</h2>

<p>Při práci s&nbsp;OpenGL přes knihovnu Pyglet můžeme přímo či nepřímo používat čtyři typy bufferů:</p>

<ol>
<li>Color buffer(s) &ndash; barvový nebo více barvových bufferů</li>
<li>Depth buffer &ndash; paměť hloubky, nazývaný také Z-buffer</li>
<li>Stencil buffer &ndash; paměť se šablonou</li>
<li>Accumulation buffer &ndash; akumulační buffer</li>
</ol>

<p>Tyto čtyři základní typy bufferů si stručně popíšeme v&nbsp;navazujících kapitolách.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Color buffer</h2>

<p>V barvovém bufferu (nebo bufferech) je uložena barevná informace o vykreslované scéně. Jeden z&nbsp;barevných bufferů je vždy zobrazen na obrazovce a představuje výsledek našeho programátorského snažení. Barvový buffer je v&nbsp;nejjednodušším případě pouze jeden, avšak může jich být nainicializováno několik. V&nbsp;barevném bufferu mohou být jednotlivé pixely uloženy buď ve formátu RGB (true-color), nebo může být použit index-color (paletový) režim, kdy pixely neobsahují přímo barvu, ale pouze index do barevné palety.</p>

<p>Na naprosté většině grafických akcelerátorů lze vytvořit minimálně dva barevné buffery, které lze využít při animacích k&nbsp;takzvanému double bufferingu, tj. k&nbsp;vykreslování do neviditelného bufferu a současnému zobrazení druhého bufferu. Po vykreslení snímku se úloha barevných bufferů prohodí. Podrobněji se budeme doublebufferingem zabývat již v&nbsp;příští části tohoto seriálu. V&nbsp;případě double bufferingu jsou tyto dva barevné buffery nazývány přední buffer (front buffer) a zadní buffer (back buffer). V&nbsp;příkazech OpenGL, které se odkazují na jednotlivé buffery, se používají symbolické konstanty <strong>GL_FRONT</strong> a <strong>GL_BACK</strong>.</p>

<p>Některé implementace OpenGL, které umožňují generování stereo obrázků pro různá 3D výstupní zařízení (brýle, helmy, stereo monitory apod.), mohou zobrazovat současně dva barevné buffery, jeden pro pravé a druhý pro levé oko. Tyto buffery se také podle toho jmenují levý buffer a pravý buffer. V&nbsp;příkazech OpenGL se používají symbolické konstanty <strong>GL_LEFT</strong> a <strong>GL_RIGHT</strong>. Pokud se kromě generování stereo obrázků používá i double buffering, existují současně čtyři barevné buffery označované jako <strong>GL_FRONT_RIGHT</strong>, <strong>GL_FRONT_LEFT</strong>, <strong>GL_BACK_RIGHT</strong> a <strong>GL_BACK_LEFT</strong>.</p>

<p>Kromě toho je někdy možné vytvořit i další barevné buffery, které nemají svůj specifický účel, ale lze je použít například pro různé grafické efekty. Tyto buffery se označují symbolickými konstantami <strong>GL_AUXi</strong>, kde rozsah i je určen konkrétní implementací. Množství barevných bufferů je dáno paměťovou kapacitou grafického akcelerátoru, rozlišením obrazovky, barevnou hloubkou jednotlivých bufferů a množstvím dalších bufferů (depth buffer, stencil buffer, accumulation buffer), které se vytvářejí. Každý další vytvořený buffer navíc zmenšuje volnou paměť na grafickém akcelerátoru, která se používá pro ukládání textur a pro display listy. Proto je při inicializaci aplikace vhodné povolit pouze ty buffery, které jsou skutečně zapotřebí.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Depth buffer</h2>

<p>Depth buffer, tedy paměť hloubky, je někdy také nazýván Z-buffer popř.&nbsp;v&nbsp;jiné implementaci W-buffer. Jedná se o paměť, v&nbsp;níž jsou většinou uloženy informace zajišťující vykreslení pouze viditelných částí těles, tj.&nbsp;vzdálenější plošky jsou překryty ploškami bližšími. Funkci a význam paměti hloubky lze však při vykreslování průběžně měnit, takže je možné naprogramovat některé zajímavé efekty, například zobrazení stínů.</p>

<p>V&nbsp;naprosté většině případů je funkce paměti hloubky nastavena tak, že se při rasterizaci testuje Z-ová hloubka (vzdálenost od stínítka obrazovky, ve skutečnosti se většinou testuje převrácená hodnota Z-ové hloubky, ale to je již interní věcí grafického akcelerátoru) vytvořeného fragmentu s hloubkou uloženou ve framebufferu na pozici vkládaného fragmentu. Pokud je Z-ová hloubka fragmentu menší než ve framebufferu, fragment se do framebufferu uloží a samozřejmě přepíše i Z-ovou pozici. Pokud je Z-ová hloubka fragmentu větší, je jasné, že je fragment ve výsledné scéně neviditelný, a proto je zahozen.</p>

<p>U depth bufferu je velmi důležitá jeho bitová hloubka. Pokud je například depth buffer pouze osmibitový (tak ho měly implementovány první grafické akcelerátory na PC), je možné rozlišit pouze 256 vzdáleností, což může vést k&nbsp;vytvoření vizuálních artefaktů ve scéně. V&nbsp;dnešní době se používají 16bitové a 24bitové hloubky, kde se množství artefaktů snižuje (avšak nastat mohou, typicky pokud vytvoříme dva trojúhelníky, které se částečně překrývají).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Stencil buffer</h2>

<p>Stencil buffer neboli paměť šablony je používán pro určení, do kterých míst na obrazovce je povoleno vykreslování. Jedno z&nbsp;možných použití stencil bufferu je při vykreslování 2D grafického uživatelského rozhraní současně s&nbsp;trojrozměrnou scénou. Dalším, pokročilejším použitím stencil bufferu je algoritmus pro vykreslování zrcadlících ploch nebo pro tvorbu stereo obrázků na monitoru s použitím stereo brýlí (dva pohledy na scénu snímané ze dvou bodů zobrazené prokládaně na jedné obrazovce).</p>

<p>U stencil bufferu lze zadat relační operaci, která se provádí mezi hodnotou fragmentu a hodnotou uloženou ve stencil bufferu. Také je možné zadat, zda a popř.&nbsp;při jaké podmínce se budou měnit data ve stencil bufferu. U stencil bufferu většinou není bitová hloubka tak kritická jako v&nbsp;případě depth bufferu. Dokonce nám pro některé jednodušší úlohy postačuje jednobitová hloubka (typicky ořezání scény do nějakého obrazce a výše zmíněná tvorba stereo obrázků).</p>

<p>Použitím stencil bufferu se budeme podrobněji zabývat v dalších dílech seriálu o knihovně Pyglet.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Accumulation buffer</h2>

<p>Accumulation buffer obsahuje, podobně jako color buffer, rastrový obrázek. Do akumulačního bufferu je však možno akumulovat (např.&nbsp;sečíst) více obrázků. Akumulační buffer se používá například při programování efektu rozmazání pohybem &ndash; takzvaný motion blur. Funkce akumulačního bufferu je dostupná pouze při používání RGB (true-color) režimu (což je dnes de facto standardem). V&nbsp;index-color (paletových) režimech nelze akumulační buffer použít.</p>

<p>Poznámka: mazání bufferů je operace časově náročná, protože je nutné projít všechny pixely v&nbsp;každém bufferu a nastavit je na nějakou hodnotu (většinou nulu). Proto je vhodné všechny buffery mazat současně, což umožňuje příkaz <strong>glClear(mask)</strong>, kde pomocí parametru <strong>mask</strong> lze specifikovat jeden nebo více bufferů, které se mají smazat. Parametr <strong>mask</strong> může být vytvořen logickým součtem hodnot: <strong>GL_COLOR_BUFFER_BIT</strong> (maže se zadní barvový buffer), <strong>GL_DEPTH_BUFFER_BIT</strong> (maže se paměť hloubky), <strong>GL_STENCIL_BUFFER_BIT</strong> (maže se paměť šablony) a <strong>GL_ACCUM_BUFFER_BIT</strong> (maže se akumulační buffer).</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Řešení překrývaní stěn na úrovní hardware &ndash; paměť hloubky (Z-buffer)</h2>

<p>Rozlišení Z-bufferu je většinou shodné s rozlišením výsledné rastrové mapy, která má být vykreslena. Před vykreslením nového snímku jsou hloubky všech fragmentů nastaveny na maximální vzdálenost popř.&nbsp;na programově zvolenou vzdálenost.V&nbsp;případě, že by se počáteční hloubky fragmentů nastavily na jinou hodnotu, docházelo by při vykreslování scény k&nbsp;ořezávání vzdálených polygonů (resp.&nbsp;přesněji řečeno jejich částí), což může být v&nbsp;některých případech žádoucí vlastnost. Na tomto místě stojí za upozornění fakt, že při vykreslování poloprůhledných polygonů, tj.&nbsp;polygonů s&nbsp;nanesenou texturou obsahující poloprůhledné texely, nedokáže Z-buffer korektně s&nbsp;těmito polygony pracovat. Z&nbsp;tohoto důvodu je nutné nejdříve (s&nbsp;povoleným zápisem do Z-bufferu) vykreslit všechny neprůhledné polygony a poté zakázat zápis do Z-bufferu a následně vykreslit poloprůhledné polygony, ovšem setříděné podle jejich klesající vzdálenosti od pozorovatele (kamery).</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Grafické akcelerátory a použití takzvaného W-bufferu</h2>

<p>Do paměti hloubky (Z-bufferu) je možné ukládat vzdálenosti fragmentů od pozorovatele (kamery) ve dvou formátech, v&nbsp;obou případech je však každý údaj vždy uložen v&nbsp;osmi, šestnácti bitech, 24 či někdy i třiceti dvou bitech. Při použití prvního způsobu se do Z-bufferu skutečně ukládají vzdálenosti fragmentů, přesněji řečeno celočíselná část vzdálenosti (výpočty vzdálenosti se provádí přesněji, ale výsledek je při ukládání zaokrouhlen). Tento formát není příliš výhodný, protože po projekci 3D scény ze světových souřadnic do prostoru obrazovky není krok mezi jednotlivými vzdálenostmi konstantní, což vede k&nbsp;vizuálním chybám při vykreslování (rozlišení pouze 2<sup>16</sup> vzdáleností je v&nbsp;tomto případě nedostatečné, lepší je to v&nbsp;případě 2<sup>24</sup> vzdáleností). Z&nbsp;tohoto důvodu se preferuje druhý způsob (nazývaný také <i>w-buffer</i>), při němž se do Z-bufferu ukládají převrácené hodnoty vzdálenosti, a to ve speciálním formátu čísel s&nbsp;pohyblivou řádovou tečkou (čárkou), který může mít například následující strukturu připomínající formát definovaný v IEEE 754 (příklad je vybrán pro šestnáctibitový formát):</p>

<pre>
1.mantissa &times; 2<sup>exponent</sup>
</pre>

<p>V&nbsp;tomto formátu je pro mantisu vyhrazeno dvanáct bitů a pro exponent pouhé čtyři bity. Povšimněte si implicitní jedničky před desetinnou tečkou i toho, že žádný bit není vyhrazen pro uložení znaménka &ndash; vzdálenosti (a samozřejmě i jejich převrácené hodnoty) jsou vždy kladné. Minimální hodnota, kterou lze tímto způsobem uložit, je rovna jedničce (0×0000 ~ 1.000000000000&times;2<sup>0</sup>), maximální hodnota 65528.0 (0×ffff ~ 1.111111111111­&times;2<sup>15</sup>). Podobné &bdquo;krátké&ldquo; formáty čísel s&nbsp;plovoucí řádovou tečkou jsou v&nbsp;oblasti grafických akcelerátorů stále velmi oblíbené, protože práce s&nbsp;nimi je poměrně rychlá a požadovaná kapacita obrazové paměti je oproti plně 32bitovým formátům poloviční.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Druhý demonstrační příklad: paměť hloubky prakticky</h2>

<p>Aby bylo možno paměť hloubky použít, je zapotřebí provést několik kroků:</p>

<ol>

<li>Při inicializaci knihovny OpenGL je zapotřebí naalokovat i paměť hloubky. Tuto operaci za nás provede knihovna Pyglet automaticky. Na rozdíl od barvových bufferů, kterých může být více, se naalokuje vždy jen jedna paměť hloubky, protože víc jich není zapotřebí.</li>

<li>Funkce paměti hloubky (test hloubky fragmentů) se musí povolit příkazem <strong>glEnable(GL_DEPTH_TEST)</strong>. Při vykreslování různých částí scény lze paměť hloubky nezávisle zapínat a vypínat, čehož se využívá při tvorbě různých grafických efektů, například při vykreslování průhledných těles (o této problematice jsme se již zmiňovali).</li>

<li>S&nbsp;využitím funkce <strong>glClearDepth(depth)</strong> se může specifikovat, na jakou hodnotu se bude mazat paměť hloubky mezi snímky. Tato hodnota může být v rozsahu 0.0 až 1.0. Opět můžeme ponechat výchozí hodnotu.</li>

<li>Dále je zapotřebí nastavit, jaký test se bude s hloubkou fragmentu provádět. Pro nastavení se používá funkce <strong>glDepthFunc(func)</strong>, kde parametr func může nabývat hodnot <strong>GL_NEVER</strong>, <strong>GL_LESS</strong>, <strong>GL_EQUAL</strong>, <strong>GL_LEQUAL</strong>, <strong>GL_GREATER</strong>, <strong>GL_NOTEQUAL</strong>, <strong>GL_GEQUAL</strong> a <strong>GL_ALWAYS</strong>. Pro běžnou funkci paměti hloubky se nastavuje funkce <strong>GL_LESS</strong>, tj.&nbsp;bližší fragment přepíše fragment vzdálenější. Pro speciální grafické efekty však lze logiku testovací funkce změnit.</li>

<li>Posledním úkolem je nutnost mazání paměti hloubky před vykreslením každého snímku. To lze provést buď samostatně zavoláním funkce <strong>glClear(GL_DEPTH_BUFFER_BIT)</strong>, nebo lze smazat současně barvový buffer i paměť hloubky zavoláním stejné funkce, ale s&nbsp;více bitovými příznaky: <strong>glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)</strong>. Současné mazání obou bufferů je obecně rychlejší, protože na grafickém akcelerátoru je možné provést optimalizace v&nbsp;přístupu do paměti.</li>

</ol>

<p>Přesně tento postup využijeme v&nbsp;dnešním druhém demonstračním příkladu. Povolení paměti hloubky je provedeno při inicializaci:</p>

<pre>
def init():
    glClearColor(0.0, 0.0, 0.3, 0.0)          # barva pozadi obrazku
    glPolygonMode(GL_FRONT, GL_FILL)          # nastaveni rezimu vykresleni vyplnenych sten
    glPolygonMode(GL_BACK, GL_FILL)           # jak pro predni tak pro zadni steny
    glDisable(GL_CULL_FACE)                   # zadne hrany ani steny se nebudou odstranovat
    glDepthFunc(GL_LESS)                      # funkce pro testovani fragmentu
</pre>

<p>Paměť hloubky lze povolit klávesou <strong>E</strong> (<i>enable</i>) a zakázat klávesou <strong>D</strong> (<i>disable</i>). Podle stisku těchto kláves se změní chování následujících dvou funkcí, což opět odpovídá výše popsanému postupu:</p>

<pre>
def set_depth_buffer(depthBufferEnabled):
    if depthBufferEnabled:
        glEnable(GL_DEPTH_TEST)
    else:
        glDisable(GL_DEPTH_TEST)
</pre>

<pre>
def clear_buffers(depthBufferEnabled):
    if depthBufferEnabled:
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) # vymazani i Z/W bufferu
    else:
        glClear(GL_COLOR_BUFFER_BIT)          # vymazani vsech bitovych rovin barvoveho bufferu
</pre>

<p>Při povolení zadního bufferu získáme obrázek s&nbsp;korektním skrýváním stěn:</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/06-2.png"><img class="alignnone size-thumbnail wp-image-8779" src="https://mojefedora.cz/wp-content/uploads/2017/04/06-2-243x254.png" alt="" width="243" height="254" /></a>
<p><i>Obrázek 6: Screenshot druhého demonstračního příkladu.</i></p>

<p>Úplný zdrojový kód dnešního druhého demonstračního příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *
from pyglet.window import key

fov = 70.0                                    # hodnota zorneho uhlu - field of view
nearPlane = 0.1                               # blizsi orezavaci rovina
farPlane = 90.0                               # vzdalenejsi orezavaci rovina

r1 = 0.0
r2 = 0.0

depthBufferEnabled = False                    # povoleni ci zakaz Z-bufferu

window = pyglet.window.Window(width=500,
                              height=500,
                              caption="Pyglet+OpenGL")


keys = key.KeyStateHandler()
window.push_handlers(keys)



def init():
    glClearColor(0.0, 0.0, 0.3, 0.0)          # barva pozadi obrazku
    glPolygonMode(GL_FRONT, GL_FILL)          # nastaveni rezimu vykresleni vyplnenych sten
    glPolygonMode(GL_BACK, GL_FILL)           # jak pro predni tak pro zadni steny
    glDisable(GL_CULL_FACE)                   # zadne hrany ani steny se nebudou odstranovat
    glDepthFunc(GL_LESS)                      # funkce pro testovani fragmentu




@window.event
def on_resize(width, height):
    init()
    glViewport(0, 0, width, height)           # viditelna oblast pres cele okno



def draw_walls():
    glBegin(GL_QUADS)                         # vykresleni otevrene krychle - sten domecku
    glColor3f(0.0, 0.0, 1.0)                  # modra barva steny
    glVertex3f(-5.0, -5.0, -5.0)
    glVertex3f(-5.0, -5.0,  5.0)
    glVertex3f( 5.0, -5.0,  5.0)
    glVertex3f( 5.0, -5.0, -5.0)

    glColor3f(0.0, 1.0, 0.0)                  # zelena barva steny
    glVertex3f(-5.0,  5.0, -5.0)
    glVertex3f(-5.0,  5.0,  5.0)
    glVertex3f( 5.0,  5.0,  5.0)
    glVertex3f( 5.0,  5.0, -5.0)

    glColor3f(1.0, 0.0, 0.0)                  # cervena barva steny
    glVertex3f(-5.0, -5.0, -5.0)
    glVertex3f(-5.0, -5.0,  5.0)
    glVertex3f(-5.0,  5.0,  5.0)
    glVertex3f(-5.0,  5.0, -5.0)

    glColor3f(1.0, 1.0, 0.0)                  # zluta barva steny
    glVertex3f( 5.0, -5.0, -5.0)
    glVertex3f( 5.0, -5.0,  5.0)
    glVertex3f( 5.0,  5.0,  5.0)
    glVertex3f( 5.0,  5.0, -5.0)
    glEnd()



def draw_roof():
    glBegin(GL_TRIANGLES)                      # vykresleni strechy domecku z trojuhelniku
    glColor3f(0.0, 1.0, 1.0)
    glVertex3f(-5.0,  5.0, -5.0)
    glVertex3f( 5.0,  5.0, -5.0)
    glVertex3f( 0.0, 11.0,  0.0)
 
    glColor3f(1.0, 0.0, 1.0)
    glVertex3f( 5.0,  5.0, -5.0)
    glVertex3f( 5.0,  5.0,  5.0)
    glVertex3f( 0.0, 11.0,  0.0)
 
    glColor3f(1.0, 1.0, 1.0)
    glVertex3f( 5.0,  5.0,  5.0)
    glVertex3f(-5.0,  5.0,  5.0)
    glVertex3f( 0.0, 11.0,  0.0)
 
    glColor3f(0.0, 0.0, 0.0)
    glVertex3f(-5.0,  5.0,  5.0)
    glVertex3f(-5.0,  5.0, -5.0)
    glVertex3f( 0.0, 11.0,  0.0)
    glEnd()



def set_depth_buffer(depthBufferEnabled):
    if depthBufferEnabled:
        glEnable(GL_DEPTH_TEST)
    else:
        glDisable(GL_DEPTH_TEST)



def clear_buffers(depthBufferEnabled):
    if depthBufferEnabled:
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) # vymazani i Z/W bufferu
    else:
        glClear(GL_COLOR_BUFFER_BIT)          # vymazani vsech bitovych rovin barvoveho bufferu



@window.event
def on_draw():
    global r1, r2
    global depthBufferEnabled

    if keys[key.LEFT]:
        r2 = r2 - 1
    if keys[key.RIGHT]:
        r2 = r2 + 1
    if keys[key.UP]:
        r1 = r1 - 1
    if keys[key.DOWN]:
        r1 = r1 + 1
    if keys[key.E]:
        depthBufferEnabled = True
    if keys[key.D]:
        depthBufferEnabled = False

    clear_buffers(depthBufferEnabled)
    set_depth_buffer(depthBufferEnabled)

    glMatrixMode(GL_PROJECTION)               # zacatek modifikace projekcni matice
    glLoadIdentity()                          # vymazani projekcni matice (=identita)
    gluPerspective(fov, 1.0, nearPlane, farPlane);

    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()                          # nahrat jednotkovou matici

    gluLookAt(4.0, 6.0, 18.0,                 # bod, odkud se kamera diva
              0.0, 2.0,  0.0,                 # bod, kam se kamera diva
              0.0, 1.0,  0.0)                 # poloha "stropu" ve scene

    glRotatef(r1, 1.0, 0.0, 0.0)              # rotace objektu
    glRotatef(r2, 0.0, 1.0, 0.0) 

    draw_walls()
    draw_roof()



pyglet.app.run()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Blending</h2>

<p>Grafické akcelerátory mohou provádět i takzvaný <i>blending</i> neboli míchání (barev). K&nbsp;tomuto účelu se většinou používá čtvrtá barvová složka specifikovaná příkazem <strong>glColor4f(R, G, B, A)</strong> a nikoli <strong>glColor3F(R, G, B)</strong>. Při použití blendingu musíme nejdříve specifikovat, jakým způsobem se budou kombinovat právě vykreslované fragmenty s&nbsp;hodnotami uloženými ve framebufferu.</p>

<p>Připomeňme, že fragment je datová struktura složená z&nbsp;barvy pixelu, jeho průhlednosti, vzdálenosti od pozorovatele a případných dalších informací. Framebuffer je v&nbsp;podstatě pravidelná matice fragmentů. Barvy fragmentů tvoří ve framebufferu samostatný color-buffer, který se zobrazuje na obrazovce. Rasterizace je proces, kterým se matematický model plošky (polygonu) převádí na jednotlivé fragmenty. Způsob míchání barvy uložené ve framebufferu a barvy vykreslovaného fragmentu se řídí uživatelem definovanou míchací rovnicí (<i>blending function</i>). V&nbsp;této rovnici vystupují následující členy:</p>

<ol>
<li>Zdroj (<i>source</i>) je fragment vzniklý rasterizací v právě běžícím rasterizačním procesu.</li>
<li>Cíl (<i>destination</i>) je hodnota zapsaná ve framebufferu, tj.&nbsp;barva fragmentu, který již byl vykreslen dříve. Tato hodnota bude v&nbsp;závislosti na nastavené blending funkci přepsána nebo jinak ovlivněna.</li>
</ol>

<p>V&nbsp;knihovně OpenGL lze stanovit koeficienty míchání pro každou barevnou složku zvlášť. Tak lze jednoduše dosáhnout na první pohled složitých efektů, například maskování jedné barvy apod.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/07-2.png"><img class="alignnone size-thumbnail wp-image-8780" src="https://mojefedora.cz/wp-content/uploads/2017/04/07-2-243x254.png" alt="" width="243" height="254" /></a>
<p><i>Obrázek 7: Příklad použití blendingu.</i></p>

<p>Demonstrační příklady používající blending si popíšeme příště.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>. Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti klonovat celý repositář. Pro jejich spuštění je nutné mít nainstalovanou jak knihovnu Pyglet, tak i podpůrné grafické knihovny OpenGL a GLU (což se většinou provede automaticky v&nbsp;rámci instalace balíčku s&nbsp;Pygletem, viz též <a href="https://mojefedora.cz/multimedialni-knihovna-pyglet/">úvodní díl tohoto seriálu</a>):</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>21_no_z_buffer.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/21_no_z_buffer.py">https://github.com/tisnik/presentations/blob/master/pyglet/21_no_z_buffer.py</a></td></tr>
<tr><td>22_z_buffer.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/22_z_buffer.py">https://github.com/tisnik/presentations/blob/master/pyglet/22_z_buffer.py</a></td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol> 

<li>Pyglet Home Page<br />
<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home">https://bitbucket.org/pyglet/pyglet/wiki/Home</a>
</li>

<li>Dokumentace k verzi 1.2<br />
<a href="https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/">https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/</a>
</li>

<li>Dokumentace k verzi 1.2 ve formátu PDF<br />
<a href="https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/">https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/</a>
</li>

<li>PyOpenGL<br />
<a href="http://pyopengl.sourceforge.net/">http://pyopengl.sourceforge.net/</a>
</li>

<li>The #! magic, details about the shebang/hash-bang mechanism on various Unix flavours<br />
<a href="https://www.in-ulm.de/~mascheck/various/shebang/">https://www.in-ulm.de/~mascheck/various/shebang/</a>
</li>

<li>Shebang (Unix)<br />
<a href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29">https://en.wikipedia.org/wiki/Shebang_%28Unix%29</a>
</li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Simple DirectMedia Layer (home page)<br />
<a href="http://www.libsdl.org/">http://www.libsdl.org/</a>
</li>

<li>Simple DirectMedia Layer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
</li>

<li>Seriál Grafická knihovna OpenGL<br />
<a href="https://www.root.cz/serialy/graficka-knihovna-opengl/">https://www.root.cz/serialy/graficka-knihovna-opengl/</a>
</li>

<li>Pyglet event loop<br />
<a href="http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html">http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html</a>
</li>

<li>Decorators I: Introduction to Python Decorators<br />
<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">http://www.artima.com/weblogs/viewpost.jsp?thread=240808</a>
</li>

<li>3D Programming in Python – Part 1 <br />
<a href="https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/">https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/</a>
</li>

<li>A very basic Pyglet tutorial<br />
<a href="http://www.natan.termitnjak.net/tutorials/pyglet_basic.html">http://www.natan.termitnjak.net/tutorials/pyglet_basic.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

