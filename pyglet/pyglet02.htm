<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Multimediální knihovna Pyglet: volání funkcí OpenGL</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Multimediální knihovna Pyglet: volání funkcí OpenGL</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části seriálu o multimediální knihovně Pyglet si ukážeme další možnosti grafické knihovny OpenGL, jejíž funkce je možné z&nbsp;Pygletu velmi snadno volat. Prozatím se zaměříme na demonstrační příklady provádějící vykreslování scény v&nbsp;ploše (2D), příště si ukážeme i tvorbu plnohodnotných prostorových (3D) scén.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Multimediální knihovna Pyglet: volání funkcí OpenGL</a></p>
<p><a href="#k02">2. Způsob pojmenování funkcí v&nbsp;knihovně OpenGL</a></p>
<p><a href="#k03">3. Vykreslení všech základních geometrických primitiv podporovaných knihovnou OpenGL</a></p>
<p><a href="#k04">4. Nastavení vlastností bodů (<strong>GL_POINTS</strong>)</a></p>
<p><a href="#k05">5. Nastavení vlastností úseček (<strong>GL_LINES</strong>)</a></p>
<p><a href="#k06">6. Vykreslení trojúhelníků, nastavení vzorků vykreslování</a></p>
<p><a href="#k07">7. Trojúhelníky</a></p>
<p><a href="#k08">8. Pás trojúhelníků</a></p>
<p><a href="#k09">9. Trs trojúhelníků</a></p>
<p><a href="#k10">10. Čtyřúhelníky</a></p>
<p><a href="#k11">11. Polygony</a></p>
<p><a href="#k12">12. Má význam používat čtyřúhelníky a polygony na moderním GPU?</a></p>
<p><a href="#k13">13. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Multimediální knihovna Pyglet: volání funkcí OpenGL</h2>

<p><a href="https://mojefedora.cz/multimedialni-knihovna-pyglet/">V&nbsp;úvodní části</a> seriálu o multimediální knihovně Pyglet jsme si ukázali strukturu jednodušších aplikací a taktéž jsme si řekli, jak je možné Pyglet zkombinovat se známou grafickou knihovnou OpenGL. Připomeňme si, že se v&nbsp;Pygletu používají takzvané <i>callback funkce</i> volané ve chvíli, kdy dojde ke vzniku nějaké události, například při požadavku na překreslení okna atd. Nejjednodušší aplikace, která vykreslí RGB trojúhelník s&nbsp;využitím možností poskytovaných knihovnou OpenGL, může vypadat takto:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet+OpenGL")

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()
    glBegin(GL_TRIANGLES)
    glColor3f(1, 0, 0)
    glVertex2f(window.width/2, 0)
    glColor3f(0, 1, 0)
    glVertex2f(0, window.height)
    glColor3f(0, 0, 1)
    glVertex2f(window.width, window.height)
    glEnd()

pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/07.png"><img class="alignnone size-thumbnail wp-image-8607" src="https://mojefedora.cz/wp-content/uploads/2017/03/07-324x254.png" alt="" width="324" height="254" /></a>
<p><i>Obrázek 1: Demonstrační příklad popsaný v&nbsp;úvodní části tohoto seriálu.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Způsob pojmenování funkcí v&nbsp;knihovně OpenGL</h2>

<p>Většina funkcí, které jsou v&nbsp;knihovně OpenGL deklarovány, používá poměrně důmyslnou syntaxi, kdy je již ze jména funkce zřejmé, kolik parametrů je při volání funkce použito a jakého jsou typu. To souvisí s&nbsp;tím, že tato knihovna je primárně určena pro jazyk C (a v&nbsp;minulosti taktéž pro FORTRAN). V&nbsp;případě Pythonu budeme mít práci jednodušší, protože se typ navazuje na hodnoty a nikoli na proměnné. Typická OpenGL funkce pro nastavení barvy vrcholu vypadá takto:</p>

<pre>
glColor3f(0.0f, 1.0f, 0.0f)
</pre>

<p>Jméno každé funkce z&nbsp;knihovny OpenGL začíná prefixem (předponou) <strong>gl</strong>. Podobnou vlastnost mají i funkce z&nbsp;knihoven, které na OpenGL více či méně navazují. Například všechny funkce z&nbsp;knihovny GLU začínají prefixem <strong>glu</strong> a u knihovny <strong>GLUT</strong> je použit prefix glut (tato knihovna nás však nemusí při použití Pyglet zajímat):</p>

<pre>
<strong>gl</strong>Color3f(0.0f, 1.0f, 0.0f)
</pre>

<p>Za prefixem <strong>gl</strong> následuje tělo jména funkce, které většinou značí vytvářený předmět (například <strong>Vertex</strong>) nebo vlastnost, která se nastavuje mění (například <strong>Color</strong>). Tělo jména funkce začíná velkým písmenem, a pokud se skládá z&nbsp;více slov, jsou počáteční písmena slov velká (například <strong>ClearColor</strong>). Ve funkcích nejsou použita podtržítka a neexistují dvě jména funkcí, která by se lišila pouze ve velikosti písem, protože by to dělalo problémy u programovacích jazyků, které velikosti písma nerozlišují, například Pascalu či již zmíněného FORTRANu:</p>

<pre>
gl<strong>Color</strong>3f(0.0f, 1.0f, 0.0f)
</pre>

<p>Za tělem jména funkce většinou následuje číslo, které značí počet parametrů. Z&nbsp;uvedeného příkladu je tedy zřejmé, že funkce bude mít tři parametry. Pokud funkce nemá žádné parametry, žádné číslo se nepíše (tedy ani 0):</p>

<pre>
glColor<strong>3</strong>f(0.0f, 1.0f, 0.0f)
</pre>

<p>Na závěr je jedním či dvěma znaky uveden typ parametrů. U většiny funkcí mají všechny parametry stejný typ, takže typ lze specifikovat. Pokud má funkce více parametrů, z&nbsp;nichž každý je odlišného typu, tyto znaky se neuvádí. Některé funkce existující ve více variantách umožňují místo skupiny parametrů stejného typu předat pole. Potom se uvádí typ současně s&nbsp;písmenem <strong>v</strong>:</p>

<pre>
glColor3<strong>f</strong>(0.0f, 1.0f, 0.0f)
</pre>

<p>Základní typy parametrů, s&nbsp;nimiž si většinou vystačíme:</p>

<ul>
<li><strong>b</strong>yte</li>
<li><strong>s</strong>short</li>
<li><strong>i</strong>nteger</li>
<li><strong>f</strong>load</li>
<li><strong>d</strong>ouble</li>
</ul>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vykreslení všech základních geometrických primitiv podporovaných knihovnou OpenGL</h2>

<p>Minule jsme si řekli, že v&nbsp;klasické variantě grafické knihovny OpenGL existuje celkem deset základních geometrických tvarů nazývaných <i>grafická primitiva</i>. Tyto tvary můžeme z&nbsp;hlediska jejich vlastností (a počtu rozměrů) rozdělit do tří skupin:</p>

<ul>
<li><strong>body</strong>: pouze jediný typ primitiva</li>
<li><strong>úsečky</strong>: jednotlivé úsečky, řetězec úseček (polyčáry) a uzavřený tvar tvořený úsečkami</li>
<li><strong>plošné útvary</strong>: trojúhelníky, pás trojúhelníků, trs trojúhelníků, čtyřúhelníky, pás čtyřúhelníků, polygony</li>
</ul>

<p>Vykreslování všech grafických primitiv začíná funkcí <strong>glBegin(jméno_primitiva)</strong> a končí funkcí <strong>glEnd()</strong>. Mezi těmito funkcemi se specifikují jednotlivé vrcholy objektů některou variantou funkce <strong>glVertex*()</strong>. Taktéž lze specifikovat barvu vrcholů atd. Podívejme se nyní na demonstrační příklad, v&nbsp;němž jsou všechna podporovaná grafická primitiva vykreslena. Povšimněte si především způsobu použití &bdquo;příkazových závorek&ldquo; <strong>glBegin()</strong> a <strong>glEnd()</strong>:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=450,
                              height=350,
                              caption="Pyglet+OpenGL")

def draw_points():
    glColor3f(1.0, 1.0, 1.0);                # nastaveni barvy pro kresleni
    glBegin(GL_POINTS);                      # nyni zacneme vykreslovat body
    glVertex2i( 50,  50);
    glVertex2i(100,  50);
    glVertex2i(100, 100);
    glVertex2i( 50, 100);
    glEnd();

def draw_lines():
    glColor3f(1.0, 0.0, 1.0);
    glBegin(GL_LINES);                       # nyni zacneme vykreslovat usecky
    glVertex2i(150,  50);
    glVertex2i(200,  50);
    glVertex2i(200, 100);
    glVertex2i(150, 100);
    glEnd();

def draw_line_strip():
    glColor3f(0.0, 1.0, 1.0);
    glBegin(GL_LINE_STRIP);                  # nyni vykreslime polycaru
    glVertex2i(250,  50);
    glVertex2i(300,  50);
    glVertex2i(300, 100);
    glVertex2i(250, 100);
    glEnd();

def draw_line_loop():
    glColor3f(1.0, 1.0, 0.0);
    glBegin(GL_LINE_LOOP);                   # nyni vykreslime uzavrenou polycaru
    glVertex2i(350,  50);
    glVertex2i(400,  50);
    glVertex2i(400, 100);
    glVertex2i(350, 100);
    glEnd();

def draw_triangles():
    glColor3f(0.0, 0.0, 1.0);
    glBegin(GL_TRIANGLES);                   # vykresleni trojuhelniku
    glVertex2i( 50, 150);
    glVertex2i(100, 150);
    glVertex2i(100, 200);
    glVertex2i( 50, 200);
    glEnd();

def draw_triangle_strip():
    glColor3f(0.0, 1.0, 0.0);
    glBegin(GL_TRIANGLE_STRIP);              # vykresleni pruhu trojuhelniku
    glVertex2i(150, 150);
    glVertex2i(150, 200);
    glVertex2i(200, 200);
    glVertex2i(200, 150);
    glEnd();

def draw_triangle_fan():
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_TRIANGLE_FAN);                # vykresleni trsu trojuhelniku
    glVertex2i(300, 150);
    glVertex2i(250, 160);
    glVertex2i(270, 190);
    glVertex2i(290, 200);
    glVertex2i(310, 200);
    glVertex2i(330, 190);
    glVertex2i(350, 160);
    glEnd();

def draw_quads():
    glColor3f(1.0, 0.5, 0.5);
    glBegin(GL_QUADS);                       # vykresleni ctyruhelniku
    glVertex2i( 50, 250);
    glVertex2i(100, 250);
    glVertex2i(100, 300);
    glVertex2i( 50, 300);
    glEnd();

def draw_quad_strip():
    glColor3f(0.5, 0.5, 1.0);
    glBegin(GL_QUAD_STRIP);                  # vykresleni pruhu ctyruhleniku
    glVertex2i(150, 250);
    glVertex2i(150, 300);
    glVertex2i(200, 240);
    glVertex2i(200, 310);
    glVertex2i(250, 260);
    glVertex2i(250, 290);
    glVertex2i(300, 250);
    glVertex2i(300, 300);
    glEnd();

def draw_polygon():
    glColor3f(0.5, 1.0, 0.5);
    glBegin(GL_POLYGON);                     # vykresleni konvexniho polygonu
    glVertex2i(350, 260);
    glVertex2i(370, 240);
    glVertex2i(390, 240);
    glVertex2i(410, 260);
    glVertex2i(410, 280);
    glVertex2i(390, 300);
    glVertex2i(370, 300);
    glVertex2i(350, 280);
    glEnd();

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()

    draw_points()

    draw_lines()
    draw_line_strip()
    draw_line_loop()

    draw_triangles()
    draw_triangle_strip()
    draw_triangle_fan()

    draw_quads()
    draw_quad_strip()

    draw_polygon()


pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/02.png"><img class="alignnone size-thumbnail wp-image-8637" src="https://mojefedora.cz/wp-content/uploads/2017/04/02-307x254.png" alt="" width="307" height="254" /></a>
<p><i>Obrázek 2: Screenshot dnešního prvního demonstračního příkladu: všechna grafická primitiva.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nastavení vlastností bodů (<strong>GL_POINTS</strong>)</h2>

<p>Při vykreslování jednotlivých bodů je možné specifikovat především jejich barvu (což je ostatně logické), funkcí <strong>glPointSize()</strong> velikost bodu a taktéž přepínat mezi vykreslením bodů bez antialiasingu <strong>glDisable(GL_POINT_SMOOTH)</strong> a s&nbsp;antialiasingem <strong>glEnable(GL_POINT_SMOOTH)</strong>. V&nbsp;tomto případě mohou být větší body vykresleny jako kolečka; se zakázaným antialiasingem se vždy bude jednat o čtverce. Ostatně podívejme se na příklad, jehož výstup se může na různých GPU odlišovat (nejlépe a taktéž nejpomaleji funguje SW vykreslování):</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=450,
                              height=350,
                              caption="Pyglet+OpenGL")


@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()

    glDisable(GL_POINT_SMOOTH)                  # zakazani antialiasingu bodu
    glPointSize(1.0)                            # velikost vykreslovanych bodu je jeden pixel
    glBegin(GL_POINTS) 
    for i in xrange(0, 10):                     # vykresleni prvni rady bodu ruzne barvy
        step = i/10.0
        glColor3f(step, 0.5, 1.0-step)          # zmena barvy uvnitr prikazovych "zavorek" glBegin()/glEnd()
        glVertex2f(50.0+300.0*step, 50.0) 
    glEnd() 

    glDisable(GL_POINT_SMOOTH)                  # zakazani antialiasingu bodu
    for i in range(0, 10):                      # vykresleni druhe rady bodu ruzne velikosti a barvy
        step = i/10.0
        glColor3f(step, 0.5, 1.0-step)          # zmena barvy vne prikazovych "zavorek" glBegin()/glEnd()
        glPointSize(step*20.0+1.0)              # zmena velikosti vykreslovanych bodu
        glBegin(GL_POINTS) 
        glVertex2f(50.0+300.0*step, 100.0) 
        glEnd() 

    glEnable(GL_POINT_SMOOTH)                   # povoleni antialiasingu bodu
    for i in range(0, 10):                      # vykresleni treti rady bodu ruzne velikosti a barvy
        step = i/10.0
        glColor3f(step, 0.5, 1.0-step)          # zmena barvy vne prikazovych "zavorek" glBegin()/glEnd()
        glPointSize(step*20.0+1.0)              # zmena velikosti vykreslovanych bodu
        glBegin(GL_POINTS) 
        glVertex2f(50.0+300.0*step, 150.0) 
        glEnd() 


pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/03.png"><img class="alignnone size-thumbnail wp-image-8638" src="https://mojefedora.cz/wp-content/uploads/2017/04/03-307x254.png" alt="" width="307" height="254" /></a>
<p><i>Obrázek 3: Screenshot dnešního druhého demonstračního příkladu. Povšimněte si, že body jsou na mém počítači vždy vykresleny jako čtverce, nikoli jako kolečka.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nastavení vlastností úseček (<strong>GL_LINES</strong>)</h2>

<p>Ve třetím demonstračním příkladu si ukážeme způsob nastavení vlastností úseček, což je grafické primitivum používané (nejenom) při zobrazování drátových modelů (<i>wireframe</i>). Úsečky jsou vykresleny s&nbsp;různou tloušťkou (<strong>glLineWidth</strong>), s&nbsp;povoleným či zakázaným antialiasingem a taktéž s&nbsp;použitím uživatelsky definovaných vzorků (<strong>glLineStipple</strong>). Každý vzorek je reprezentován šestnáctibitovou hodnotou, kde nulové bity představují &bdquo;díry&ldquo; a jedničkové bity &bdquo;čárky&ldquo; či &bdquo;tečky&ldquo;. Povšimněte si také, že když má každý vrchol úsečky jinou barvu, je při vykreslení provedena lineární transformace barev:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=450,
                              height=350,
                              caption="Pyglet+OpenGL")


@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()

    patterns=[0xff00, 0xf0f0, 0xcccc, 0x5555, 0xfe10, 0x5e32]

    glDisable(GL_LINE_SMOOTH)                   # zakazani antialiasingu usecek
    glDisable(GL_LINE_STIPPLE)                  # zakazani maskovani pixelu na care

    glLineWidth(1.0)                            # tloustka usecky je jeden pixel
    glBegin(GL_LINES) 
    for i in xrange(0, 10):                     # vykresleni prvni rady usecek ruzne barvy
        step = i/10.0
        glColor3f(step, 0.0, 1.0-step)          # zmena barvy uvnitr prikazovych "zavorek" glBegin()/glEnd()
        glVertex2f(50.0+300.0*step, 20.0) 
        glColor3f(step, 1.0, 1.0-step) 
        glVertex2f(100.0+300.0*step, 70.0) 
    glEnd() 

    for i in xrange(0, 10):                     # vykresleni druhe rady usecek ruzne tloustky
        step = i/10.0
        glLineWidth(step*10.0+0.1)              # zmena tloustky usecky
        glBegin(GL_LINES) 
        glColor3f(step, 0.0, 1.0-step)          # zmena barvy uvnitr prikazovych "zavorek" glBegin()/glEnd()
        glVertex2f(50.0+300.0*step, 90.0) 
        glColor3f(step, 1.0, 1.0-step) 
        glVertex2f(100.0+300.0*step, 140.0) 
        glEnd() 

    glEnable(GL_LINE_SMOOTH)                    # povoleni antialiasingu usecek
    for i in xrange(0, 10):                     # vykresleni treti rady usecek ruzne tloustky
        step= i/10.0
        glLineWidth(step*10.0+0.1)              # zmena tloustky usecky
        glBegin(GL_LINES) 
        glColor3f(step, 0.0, 1.0-step)          # zmena barvy uvnitr prikazovych "zavorek" glBegin()/glEnd()
        glVertex2f(50.0+300.0*step, 160.0) 
        glColor3f(step, 1.0, 1.0-step) 
        glVertex2f(100.0+300.0*step, 210.0) 
        glEnd() 

    glDisable(GL_LINE_SMOOTH)                   # zakazani antialiasingu usecek
    glEnable(GL_LINE_STIPPLE)                   # povoleni maskovani pixelu na care
    glLineWidth(1.0)                            # tloustka usecky je jeden pixel
    glColor3f(1.0, 1.0, 1.0)                    # zmena barvy vne prikazovych "zavorek" glBegin()/glEnd()

    for i in xrange(0, 6):
        glLineStipple(2, patterns[i])           # nastaveni masky pri kresleni usecek
        glBegin(GL_LINES) 
        glVertex2i(50, 250+i*20)                # vykresleni usecky
        glVertex2i(350, 250+i*20) 
        glEnd() 


pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/04.png"><img class="alignnone size-thumbnail wp-image-8639" src="https://mojefedora.cz/wp-content/uploads/2017/04/04-307x254.png" alt="" width="307" height="254" /></a>
<p><i>Obrázek 4: Screenshot dnešního třetího demonstračního příkladu: různé varianty úseček.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vykreslení trojúhelníků, nastavení vzorků vykreslování</h2>

<p>Způsob vykreslování izolovaných trojúhelníků jsme si již ukázali minule, ovšem u trojúhelníků je možné nastavovat i další vlastnosti. Zejména se to týká nastavení <i>vykreslovacího vzorku</i>, přičemž vzorek je reprezentován bitovou mapou o velikosti 32&times;32 pixelů, což znamená, že celá mapa je uložena ve 128 bajtech (32&times;32/8). V&nbsp;Pythonu můžeme vzorek reprezentovat seznamem, který se posléze převede na pole bajtů. Seznam 128 bajtových hodnot může vypadat následovně:</p>

<pre>
pattern1=[
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
    0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
    0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
    0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
    0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
    0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
    0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
    0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
    0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
    0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
    0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08]
</pre>

<p>Převod na pole bajtů zajistí následující výraz:</p>

<pre>
pattern1_gl = (GLubyte * len(pattern1))(*pattern1)
</pre>

<p>Teprve takto vytvořené pole je možné předat do funkce <strong>glPolygonStipple()</strong>:</p>

<pre>
glPolygonStipple(pattern1_gl)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Trojúhelníky</h2>

<p>Podívejme se nyní na demonstrační příklad, v&nbsp;němž se vykreslí jednotlivé trojúhelníky představované grafickým primitivem <strong>GL_TRIANGLES</strong>. Každý trojúhelník je vykreslen odlišným stylem:</p>

<table>
<tr><th>Příkaz</th><th>Vliv na vykreslování</th></tr>
<tr><td>glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)</td><td>vykreslí se vyplněné trojúhelníky</td></tr>
<tr><td>glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)</td><td>vykreslí se pouze hrany trojúhelníků</td></tr>
<tr><td>glPolygonMode(GL_FRONT_AND_BACK, GL_POINT)</td><td>vykreslí se pouze vrcholy trojúhelníků</td></tr>
<tr><td>glPolygonStipple(pattern)</td><td>pro vyplnění se použije předaný vzorek 32&times;32 pixelů</td></tr>
</table>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=450,
                              height=350,
                              caption="Pyglet+OpenGL")


def draw_triangle(x, y):
    glBegin(GL_TRIANGLES) 
    glColor3f(1.0, 0.0, 0.0)                 # kazdy vertex bude vykresleny jinou barvou
    glVertex2i(x, y) 
    glColor3f(0.0, 1.0, 0.0) 
    glVertex2i(x+100, y) 
    glColor3f(0.0, 0.0, 1.0) 
    glVertex2i(x+50, y+80) 
    glEnd() 

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()

    pattern1=[                               # prvni vyplnovy vzorek
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
        0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
        0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
        0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
        0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
        0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
        0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
        0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
        0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
        0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
        0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08]

    pattern1_gl = (GLubyte * len(pattern1))(*pattern1)

    pattern2=[                               # druhy vyplnovy vzorek
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa]

    pattern2_gl = (GLubyte * len(pattern2))(*pattern2)

    glClearColor(0.0, 0.0, 0.0, 0.0)            # nastaveni mazaci barvy na cernou
    glClear(GL_COLOR_BUFFER_BIT)                # vymazani bitovych rovin barvoveho bufferu

    glPointSize(5.0)                            # velikost bodu je rovna peti pixelum
    glLineWidth(2.0)                            # tloustka usecek je rovna dvema pixelum
    glEnable(GL_POINT_SMOOTH)                   # povoleni antialiasingu bodu
    glEnable(GL_LINE_SMOOTH)                    # povoleni antialiasingu usecek
    glDisable(GL_POLYGON_STIPPLE)               # zakazat vzorek
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)   # vykreslovani vyplnenych trojuhelniku
    draw_triangle(50, 50) 
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)   # vykreslovani pouze hran trojuhelniku
    draw_triangle(180, 50) 
    glPolygonMode(GL_FRONT_AND_BACK, GL_POINT)  # vykreslovani pouze vrcholu trojuhelniku
    draw_triangle(310, 50) 
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)   # vykreslovani vyplnenych trojuhelniku
    glEnable(GL_POLYGON_STIPPLE)                # povolit vzorek
    glPolygonStipple(pattern1_gl)               # zadat prvni vzorek
    draw_triangle(110, 190) 
    glPolygonStipple(pattern2_gl)               # zadat druhy vzorek
    draw_triangle(240, 190) 


pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/05.png"><img class="alignnone size-thumbnail wp-image-8640" src="https://mojefedora.cz/wp-content/uploads/2017/04/05-307x254.png" alt="" width="307" height="254" /></a>
<p><i>Obrázek 5: Screenshot dnešního čtvrtého demonstračního příkladu: různé varianty trojúhelníků.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Pás trojúhelníků</h2>

<p>Často používané primitivum představuje souvislý pás složený z&nbsp;trojúhelníků. Použít ho lze například při vykreslování stěn složitějších těles. Toto primitivum je univerzálnější než trs trojúhelníků. Zadávání začíná příkazem <strong>glBegin(GL_TRIANGLE_STRIP)</strong>, po němž následují jednotlivé vrcholy. První tři vrcholy definují první trojúhelník. Každý další vrchol definuje další trojúhelník, jenž má s&nbsp;předchozím trojúhelníkem společnou hranu. Použitím tohoto primitiva lze ušetřit až dvě třetiny volání funkce glVertex*():</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=450,
                              height=350,
                              caption="Pyglet+OpenGL")


def draw_triangle_strip(x, y):
    glBegin(GL_TRIANGLE_STRIP) 
    glColor3f(1.0, 0.0, 0.0)                 # kazdy vertex bude vykresleny jinou barvou
    glVertex2i(x, y) 
    glColor3f(0.0, 0.0, 1.0) 
    glVertex2i(x+50, y+80) 
    glColor3f(0.0, 1.0, 0.0) 
    glVertex2i(x+100, y) 
    glColor3f(1.0, 1.0, 0.0)                 # kazdy vertex bude vykresleny jinou barvou
    glVertex2i(x+150, y+80) 
    glColor3f(0.0, 1.0, 1.0) 
    glVertex2i(x+200, y) 
    glColor3f(1.0, 0.0, 1.0) 
    glVertex2i(x+250, y+80) 
    glColor3f(1.0, 1.0, 1.0) 
    glVertex2i(x+300, y) 
    glEnd() 

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()

    glClearColor(0.0, 0.0, 0.0, 0.0)            # nastaveni mazaci barvy na cernou
    glClear(GL_COLOR_BUFFER_BIT)                # vymazani bitovych rovin barvoveho bufferu

    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)
    draw_triangle_strip(50, 50) 

    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)
    draw_triangle_strip(50, 200) 


pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/06.png"><img class="alignnone size-thumbnail wp-image-8641" src="https://mojefedora.cz/wp-content/uploads/2017/04/06-307x254.png" alt="" width="307" height="254" /></a>
<p><i>Obrázek 6: Screenshot dnešního pátého demonstračního příkladu: pás trojúhelníků.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Trs trojúhelníků</h2>

<p>Toto primitivum je určeno pro snížení datového toku při zadávání vrcholů trojúhelníků. Používá se například při vykreslování vrchlíků koule. Zadávání začíná příkazem <strong>glBegin(GL_TRIANGLE_FAN)</strong>, po němž následují jednotlivé vrcholy. První tři vrcholy definují první trojúhelník. Každý další vrchol definuje další trojúhelník, protože ostatní dva vrcholy trojúhelníku jsou shodné vždy s&nbsp;prvním zadaným vrcholem a s&nbsp;předposledním vrcholem. Tvoří se tak jakýsi deštník, v&nbsp;němž mají všechny trojúhelníky společný jeden vrchol. Použitím tohoto primitiva lze ušetřit až dvě třetiny volání funkce <strong>glVertex*()</strong>:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=450,
                              height=350,
                              caption="Pyglet+OpenGL")


def draw_triangle_fan(x, y):
    glBegin(GL_TRIANGLE_FAN) 
    glColor3f(1.0, 0.0, 0.0)                 # kazdy vertex bude vykresleny jinou barvou
    glVertex2i(x+175, y) 
    glColor3f(0.0, 0.0, 1.0) 
    glVertex2i(x+50, y+80) 
    glColor3f(0.0, 1.0, 0.0) 
    glVertex2i(x+100, y+80) 
    glColor3f(1.0, 1.0, 0.0)                 # kazdy vertex bude vykresleny jinou barvou
    glVertex2i(x+150, y+80) 
    glColor3f(0.0, 1.0, 1.0) 
    glVertex2i(x+200, y+80) 
    glColor3f(1.0, 0.0, 1.0) 
    glVertex2i(x+250, y+80) 
    glColor3f(1.0, 1.0, 1.0) 
    glVertex2i(x+300, y+80) 
    glEnd() 

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()

    glClearColor(0.0, 0.0, 0.0, 0.0)            # nastaveni mazaci barvy na cernou
    glClear(GL_COLOR_BUFFER_BIT)                # vymazani bitovych rovin barvoveho bufferu

    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)
    draw_triangle_fan(50, 50) 

    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)
    draw_triangle_fan(50, 200) 


pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/07.png"><img class="alignnone size-thumbnail wp-image-8642" src="https://mojefedora.cz/wp-content/uploads/2017/04/07-307x254.png" alt="" width="307" height="254" /></a>
<p><i>Obrázek 7: Screenshot dnešního pátého demonstračního příkladu: trs trojúhelníků.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Čtyřúhelníky</h2>

<p>Toto primitivum umožňuje zadávat rovinné konvexní čtyřúhelníky. Zadávání začíná příkazem <strong>glBegin(GL_QUADS)</strong>, po němž následují jednotlivé vrcholy. Použití je podobné jako u trojúhelníků, ale musíme zaručit, že vrcholy čtyřúhelníku budou ležet v&nbsp;jedné rovině a čtyřúhelník bude konvexní (to je u trojúhelníku zaručeno vždy). Pokud tyto podmínky nebudou splněny, nemusí být (a pravděpodobně ani nebude) vykreslení korektní, protože interpolátory v&nbsp;grafickém akcelerátoru většinou nedovedou detekovat hranici, kde se má vykreslování přerušit:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=450,
                              height=350,
                              caption="Pyglet+OpenGL")


def draw_quad(x, y):
    glBegin(GL_QUADS) 
    glColor3f(1.0, 0.0, 0.0)                 # kazdy vertex bude vykresleny jinou barvou
    glVertex2i(x, y) 
    glColor3f(0.0, 1.0, 0.0) 
    glVertex2i(x+100, y) 
    glColor3f(0.0, 0.0, 1.0) 
    glVertex2i(x+100, y+100) 
    glColor3f(0.0, 0.0, 1.0) 
    glVertex2i(x, y+100) 
    glEnd() 

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()

    pattern1=[                               # prvni vyplnovy vzorek
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
        0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
        0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
        0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
        0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
        0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
        0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
        0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
        0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
        0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
        0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08]

    pattern1_gl = (GLubyte * len(pattern1))(*pattern1)

    pattern2=[                               # druhy vyplnovy vzorek
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa]

    pattern2_gl = (GLubyte * len(pattern2))(*pattern2)

    glClearColor(0.0, 0.0, 0.0, 0.0)            # nastaveni mazaci barvy na cernou
    glClear(GL_COLOR_BUFFER_BIT)                # vymazani bitovych rovin barvoveho bufferu

    glPointSize(5.0)                            # velikost bodu je rovna peti pixelum
    glLineWidth(2.0)                            # tloustka usecek je rovna dvema pixelum
    glEnable(GL_POINT_SMOOTH)                   # povoleni antialiasingu bodu
    glEnable(GL_LINE_SMOOTH)                    # povoleni antialiasingu usecek
    glDisable(GL_POLYGON_STIPPLE)               # zakazat vzorek
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)   # vykreslovani vyplnenych ctyruhelniku
    draw_quad(50, 50) 
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)   # vykreslovani pouze hran ctyruhelniku
    draw_quad(180, 50) 
    glPolygonMode(GL_FRONT_AND_BACK, GL_POINT)  # vykreslovani pouze vrcholu ctyruhelniku
    draw_quad(310, 50) 
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)   # vykreslovani vyplnenych ctyruhelniku
    glEnable(GL_POLYGON_STIPPLE)                # povolit vzorek
    glPolygonStipple(pattern1_gl)               # zadat prvni vzorek
    draw_quad(110, 190) 
    glPolygonStipple(pattern2_gl)               # zadat druhy vzorek
    draw_quad(240, 190) 


pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/08.png"><img class="alignnone size-thumbnail wp-image-8643" src="https://mojefedora.cz/wp-content/uploads/2017/04/08-307x254.png" alt="" width="307" height="254" /></a>
<p><i>Obrázek 8: Screenshot dnešního šestého demonstračního příkladu.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Polygony</h2>

<p>Jedná se o nejsložitější primitivum, pomocí něhož lze kreslit polygony zadané větším počtem vrcholů. Musíme však zaručit, že všechny vrcholy budou ležet v&nbsp;jedné rovině a výsledný polygon bude konvexní. V&nbsp;mnoha případech je tato podmínka těžko splnitelná, a proto se polygon rozděluje na jednotlivé trojúhelníky (tesselace). Zadávání polygonu začíná příkazem <strong>glBegin(GL_POLYGON)</strong>, po němž následují souřadnice jednotlivých vrcholů:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=450,
                              height=450,
                              caption="Pyglet+OpenGL")


def draw_polygon(x, y):
    glBegin(GL_POLYGON) 

    glColor3f(1.0, 0.0, 0.0)                 # kazdy vertex bude vykresleny jinou barvou
    glVertex2i(x, y) 

    glColor3f(0.0, 1.0, 0.0) 
    glVertex2i(x+50, y+85) 

    glColor3f(0.0, 0.0, 1.0) 
    glVertex2i(x+150, y+85) 

    glColor3f(0.0, 0.0, 1.0) 
    glVertex2i(x+200, y) 
 
    glColor3f(1.0, 0.0, 1.0) 
    glVertex2i(x+150, y-85) 
 
    glColor3f(1.0, 0.0, 1.0) 
    glVertex2i(x+50, y-85) 

    glEnd() 

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()

    pattern1=[                               # prvni vyplnovy vzorek
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
        0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
        0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
        0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
        0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
        0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
        0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
        0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
        0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
        0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
        0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08]

    pattern1_gl = (GLubyte * len(pattern1))(*pattern1)

    pattern2=[                               # druhy vyplnovy vzorek
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa,
        0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaa, 0xaa]

    pattern2_gl = (GLubyte * len(pattern2))(*pattern2)

    glClearColor(0.0, 0.0, 0.0, 0.0)            # nastaveni mazaci barvy na cernou
    glClear(GL_COLOR_BUFFER_BIT)                # vymazani bitovych rovin barvoveho bufferu

    glPointSize(5.0)                            # velikost bodu je rovna peti pixelum
    glLineWidth(2.0)                            # tloustka usecek je rovna dvema pixelum
    glEnable(GL_POINT_SMOOTH)                   # povoleni antialiasingu bodu
    glEnable(GL_LINE_SMOOTH)                    # povoleni antialiasingu usecek
    glDisable(GL_POLYGON_STIPPLE)               # zakazat vzorek
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)   # vykreslovani vyplnenych ctyruhelniku
    draw_polygon(10, 110) 
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)   # vykreslovani pouze hran ctyruhelniku
    draw_polygon(220, 110) 
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)   # vykreslovani vyplnenych ctyruhelniku
    glEnable(GL_POLYGON_STIPPLE)                # povolit vzorek
    glPolygonStipple(pattern1_gl)               # zadat prvni vzorek
    draw_polygon(10, 320) 
    glPolygonStipple(pattern2_gl)               # zadat druhy vzorek
    draw_polygon(220, 320) 


pyglet.app.run()

</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/04/09.png"><img class="alignnone size-thumbnail wp-image-8644" src="https://mojefedora.cz/wp-content/uploads/2017/04/09-307x254.png" alt="" width="307" height="254" /></a>
<p><i>Obrázek 9: Screenshot dnešního sedmého demonstračního příkladu.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Má význam používat čtyřúhelníky a polygony na moderním GPU?</h2>

<p>Na moderních GPU je použití čtyřúhelníků a polygonů poněkud problematické, protože tyto grafické akcelerátory jsou většinou upraveny pro rychlé vykreslování trojúhelníků se všemi výhodami a nevýhodami, které toto řešení přináší (trojúhelník je vždy konvexní, všechny jeho vrcholy leží v&nbsp;jedné rovině atd.). Standardní OpenGL sice stále podporuje i práci se čtyřúhelníky a obecnými konvexními polygony, ovšem většinou na úkor rychlosti. Tato grafická primitiva totiž jsou ještě před posláním do grafického akcelerátoru rozdělena (<a href="https://cs.wikipedia.org/wiki/Teselace">teselována</a>) na trojúhelníky, což je samozřejmě časově náročnější, než pouhý přesun vrcholů trojúhelníků do GPU. Z&nbsp;tohoto důvodu je lepší, aby byly všechny vykreslované 3D modely již předem převedeny na trojúhelníkové sítě, samozřejmě pokud je to možné (většina modelovacích SW tento převod provede automaticky).</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všech osm dnes popsaných demonstračních příkladů bylo uloženo do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>. Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti klonovat celý repositář. Pro jejich spuštění je nutné mít nainstalovanou jak knihovnu Pyglet, tak i OpenGL a GLU (což se většinou provede automaticky v&nbsp;rámci instalace Pygletu):</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>09_primitives.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/09_primitives.py">https://github.com/tisnik/presentations/blob/master/pyglet/09_primitives.py</a></td></tr>
<tr><td>10_points.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/10_points.py">https://github.com/tisnik/presentations/blob/master/pyglet/10_points.py</a></td></tr>
<tr><td>11_lines.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/11_lines.py">https://github.com/tisnik/presentations/blob/master/pyglet/11_lines.py</a></td></tr>
<tr><td>12_triangles.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/12_triangles.py">https://github.com/tisnik/presentations/blob/master/pyglet/12_triangles.py</a></td></tr>
<tr><td>13_triangle_strip.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/13_triangle_strip.py">https://github.com/tisnik/presentations/blob/master/pyglet/13_triangle_strip.py</a></td></tr>
<tr><td>14_triangle_fan.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/14_triangle_fan.py">https://github.com/tisnik/presentations/blob/master/pyglet/14_triangle_fan.py</a></td></tr>
<tr><td>15_quads.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/15_quads.py">https://github.com/tisnik/presentations/blob/master/pyglet/15_quads.py</a></td></tr>
<tr><td>16_polygons.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/16_polygons.py">https://github.com/tisnik/presentations/blob/master/pyglet/16_polygons.py</a></td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Pyglet Home Page<br />
<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home">https://bitbucket.org/pyglet/pyglet/wiki/Home</a>
</li>

<li>Dokumentace k verzi 1.2<br />
<a href="https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/">https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/</a>
</li>

<li>Dokumentace k verzi 1.2 ve formátu PDF<br />
<a href="https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/">https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/</a>
</li>

<li>PyOpenGL<br />
<a href="http://pyopengl.sourceforge.net/">http://pyopengl.sourceforge.net/</a>
</li>

<li>The #! magic, details about the shebang/hash-bang mechanism on various Unix flavours<br />
<a href="https://www.in-ulm.de/~mascheck/various/shebang/">https://www.in-ulm.de/~mascheck/various/shebang/</a>
</li>

<li>Shebang (Unix)<br />
<a href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29">https://en.wikipedia.org/wiki/Shebang_%28Unix%29</a>
</li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Simple DirectMedia Layer (home page)<br />
<a href="http://www.libsdl.org/">http://www.libsdl.org/</a>
</li>

<li>Simple DirectMedia Layer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
</li>

<li>Seriál Grafická knihovna OpenGL<br />
<a href="https://www.root.cz/serialy/graficka-knihovna-opengl/">https://www.root.cz/serialy/graficka-knihovna-opengl/</a>
</li>

<li>Pyglet event loop<br />
<a href="http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html">http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html</a>
</li>

<li>Decorators I: Introduction to Python Decorators<br />
<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">http://www.artima.com/weblogs/viewpost.jsp?thread=240808</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Ti?novsk?</a> &nbsp; 2017</small></p>
</body>
</html>

