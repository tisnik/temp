<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">2. Klasický unixový nástroj <strong>diff</strong></a></p>
<p><a href="#k03">3. Způsoby zobrazení rozdílů mezi soubory nástrojem <strong>diff</strong></a></p>
<p><a href="#k04">4. Formáty, v&nbsp;nichž není zobrazen kontext</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k041">4.1 Výchozí formát</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k042">4.2 Formát pro RCS</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k043">4.3 Formát pro <strong>ed</strong>, <strong>vi</strong> či <strong>Vim</strong></a></p>
<p><a href="#k05">*** 5. Formáty s&nbsp;volitelným kontextem</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k051">5.1 Základní formát s&nbsp;kontextem</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k052">5.2 Unifikovaný formát</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#k053">5.3 Zobrazení rozdílů ve dvou sloupcích</a></p>
<p><a href="#k06">*** 6. Vylepšujeme výstup z&nbsp;<strong>diffu</strong></a></p>
<p><a href="#k07">7. Filtr <strong>idiff</strong> aneb barevné zobrazení rozdílů</a></p>
<p><a href="#k08">*** 8. Filtr <strong>diff-so-fancy</strong></a></p>
<p><a href="#k09">*** 9. Použití filtru <strong>diff-so-fancy</strong> s&nbsp;GITem</a></p>
<p><a href="#k10">*** 10. Filtr <strong>diffh</strong> určený pro vygenerování HTML stránky se zobrazením rozdílů</a></p>
<p><a href="#k11">*** 11. Další utility pro porovnání souborů s&nbsp;textovým rozhraním</a></p>
<p><a href="#k12">*** 12. Nástroj <strong>sdiff</strong></a></p>
<p><a href="#k13">*** 13. Nástroj <strong>wdiff</strong></a></p>
<p><a href="#k14">*** 14. Diff režim <strong>Vimu</strong></a></p>
<p><a href="#k15">*** 15. Nástroj <strong>mcdiff</strong></a></p>
<p><a href="#k16">*** 16. Utility s&nbsp;plnohodnotným GUI</a></p>
<p><a href="#k17">*** 17. Meld</a></p>
<p><a href="#k18">*** 18. xxdiff</a></p>
<p><a href="#k19">*** 19. TkDiff</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Klasický unixový nástroj <strong>diff</strong></h2>

<p>První nástroj, o kterém se v&nbsp;tomto článku zmíníme, možná ani není nutné
čtenářům Rootu podrobně představovat, protože se s&nbsp;ním už pravděpodobně
setkali. Tento nástroj se jmenuje <strong>diff</strong> a jedním z&nbsp;důvodů,
proč se o něm zmiňujeme hned v&nbsp;úvodních kapitolách, je fakt, že první
verze <strong>diffu</strong> vznikla již na začátku sedmdesátých let minulého
století (v&nbsp;roce 1974 již například vyšla verze založená na stále
používaném <a
href="https://en.wikipedia.org/wiki/Hunt%E2%80%93McIlroy_algorithm">Hunt-McIlroyově
algoritmu</a>). Tento nástroj samozřejmě prošel poměrně dlouhým vývojem a
různými rozšířeními, ať se to již týká vlastního interního algoritmu pro
hledání rozdílů, tak i formátů výstupu, tj.&nbsp;způsobů, jakým
<strong>diff</strong> zobrazuje rozdíly mezi porovnávanými soubory.
V&nbsp;současné verzi dokáže <strong>diff</strong> porovnat dva soubory, obsah
dvou adresářů popř.&nbsp;rekurzivně procházet a navzájem porovnat zvolenou
dvojicí adresářů. Pokud výstup produkovaný <strong>diffem</strong> uložíme do
souboru, získáme tzv.&nbsp;<i>patch</i>, který je možné (například na jiném
počítači) aplikovat na původní soubor a vlastně tak znovu provést historii
editace (podle použitého formátu lze použít nástroje <strong>patch</strong>,
<strong>ed</strong>, <strong>vi</strong> či <strong>Vim</strong>).</p>

<p>Již v&nbsp;předchozím odstavci jsme se zmínili o tom, že současné verze
nástroje <strong>diff</strong> podporují několik způsobů zobrazení rozdílů mezi
dvěma soubory. Vyžadovaný formát se volí pomocí přepínačů zadaných na příkazové
řádce:</p>

<table>
<tr><th>Přepínač</th><th>Dlouhá verze</th><th>Význam</th></tr>
<tr><td>&nbsp;</td><td>--normal</td><td><a href="#k041">výchozí formát</a></td></tr>
<tr><td>-n</td><td>--rcs</td><td><a href="#kk042">formát používaný</a> v&nbsp;dnes již archaickém systému <a href="https://users.ninthfloor.org/~ashawley/rcs/tichy1985rcs/html/">RCS</a></td></tr>
<tr><td>-e</td><td>--ed</td><td>vytváří <a href="#k043">skript</a> spustitelný v&nbsp;editorech <a href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-2/#k03">ed</a>, <i>vi</i> a samozřejmě i <a href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-2/#k08">Vim</a></td></tr>
<tr><td>-c, -C</td><td>--context</td><td><a href="#k051">základní formát</a>, v&nbsp;němž se kromě změn zobrazuje i kontext</td></tr>
<tr><td>-u, -U</td><td>--unified</td><td>tzv.&nbsp;<a href="#k052">unifikovaný formát</a>, v&nbsp;němž se také zobrazuje kontext</td></tr>
<tr><td>-y</td><td>--side-by-side</td><td>zobrazení rozdílů mezi soubory <a href="#k053">ve dvou sloupcích</a></td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Způsoby zobrazení rozdílů mezi soubory nástrojem <strong>diff</strong></h2>

<p>Podívejme se nyní na způsob zobrazení rozdílů mezi dvěma verzemi jednoho
zdrojového souboru. Oba soubory, které se budou porovnávat, naleznete na
adresách:</p>

<ol>
<li><a href="https://github.com/tisnik/presentations/blob/master/diff/old.py">starší verze</a></li>
<li><a href="https://github.com/tisnik/presentations/blob/master/diff/new.py">novější verze</a></li>
</ol>

<p><a href="#k04">Nejprve</a> si popíšeme ty formáty, v&nbsp;nichž není
explicitně zobrazen kontext, tj.&nbsp;&bdquo;okolí změn&ldquo; a posléze si
ukážeme formáty, v&nbsp;nichž naopak kontext nalezneme. Kontext není důležitý
pouze pro čtenáře vytvořených rozdílových souborů, ale například i pro nástroj
<strong>patch</strong>, který dokáže změnu aplikovat i ve chvíli, kdy byl
soubor mezitím editován a došlo tedy například k&nbsp;posunu řádků apod.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Formáty, v&nbsp;nichž není zobrazen kontext</h2>

<p><a name="k041"></a></p>
<h3 id="k041">4.1 Výchozí formát</h3>

<p>Pokud nástroj <strong>diff</strong> spustíme jen se specifikací dvou
souborů, popř.&nbsp;souboru a adresáře, v&nbsp;němž se nachází soubor stejného
jména, dostaneme následující výstup:</p>

<pre>
105a106,109
&gt;     # three new lines
&gt;     # three new lines
&gt;     # three new lines
&gt; 
118,120d121
&lt;         # TODO: delete these three lines
&lt;         # TODO: delete these three lines
&lt;         # TODO: delete these three lines
125d125
&lt; @then('I should see 0 components')
127c127
&lt; def check_components(context, num=0, components='', ecosystem=''):
---
&gt; def check_components(context, num, components='', ecosystem=''):
131a132
&gt;     assert json_data is not None
133c134
&lt;     search_results = json_data['result']
---
&gt;     search_results = json_data['analysis']
</pre>

<p>Vidíme, že <strong>diff</strong> zobrazil pouze ty části souborů, které se
od sebe odlišují. Do těchto částí pak vložil přesné informace o tom,
k&nbsp;jakým změnám došlo. To je důležité, protože výsledek musí být strojově
(tudíž jednoznačně) zpracovatelný. Ve výstupu nalezneme tři typy příkazů,
přičemž každý příkaz obsahuje číslo řádku popř.&nbsp;rozsah změněných řádků,
dále jméno příkazu a potom číslo řádku (či rozsah řádků), ve druhém souboru.
Všechna čísla řádků odpovídají původním souborům. Mezi tři podporované příkazy
patří:</p>

<table>
<tr><th>Příkaz</th><th>Mnemotechnická pomůcka</th><th>Význam</th></tr>
<tr><td>a</td><td>append</td><td>rozdíl spočívá v&nbsp;přidaných řádcích ve druhém souboru</td></tr>
<tr><td>c</td><td>change</td><td>řádek či řádky byly změněny, následovat bude seznam rozdílů oddělený ---</td></tr>
<tr><td>d</td><td>delete</td><td>rozdíl spočívá v&nbsp;řádcích, které ve druhém souboru chybí</td></tr>
</table>

<p>Příklady:</p>

<table>
<tr><th>Celý příkaz</th><th>Význam</th></tr>
<tr><td>127c127</td><td>došlo ke změně na řádku 127</td></tr>
<tr><td>105a106,109</td><td>změna na řádku 105 (v&nbsp;prvním soubor), ve druhém souboru jsou nové čtyři řádky 106 až 109</td></tr>
<tr><td>125d125</td><td>ve druhém souboru chybí (oproti souboru prvnímu) řádek číslo 125</td></tr>
<tr><td>118,120d121</td><td>ve druhém souboru chybí (oproti souboru prvnímu) tři řádky 118 až 120</td></tr>
</table>



<p><a name="k042"></a></p>
<h3 id="k042">4.2 Formát pro RCS</h3>

<p>Ještě stručnější (a velmi těžce čitelný) je formát používaný v&nbsp;RCS. Ten
získáme jednoduše příkazem:</p>

<pre>
diff -n old.py new.py
</pre>

<p>Ve výstupu najdeme pouze dva typy příkazů, a to <strong>d</strong> (delete)
a <strong>a</strong> (append). Změna je tedy představována vymazáním řádku a
jeho nahrazením jiným řádkem. Každý příkaz navíc obsahuje i počitadlo
opakování, tj.&nbsp;kolik řádků se má vložit nebo vymazat:</p>

<pre>
a105 4
    # three new lines
    # three new lines
    # three new lines
&nbsp;
d118 3
d125 1
d127 1
a127 1
def check_components(context, num, components='', ecosystem=''):
a131 1
    assert json_data is not None
d133 1
a133 1
    search_results = json_data['analysis']
</pre>



<p><a name="k043"></a></p>
<h3 id="k043">4.3 Formát pro <strong>ed</strong>, <strong>vi</strong> či <strong>Vim</strong></h3>

<p>Z&nbsp;technického hlediska je zajímavější přepínač <strong>-e</strong>,
protože ten produkuje skripty, které je možné spustit jak v&nbsp;editoru
<strong>ed</strong> (ten velmi pravděpodobně máte nainstalovaný, i když jste ho
možná nikdy nepoužili), tak i ve Vimu. Na řádcích označených
<strong>&lt;Esc&gt;</strong> se nachází jediný znak &ndash; escape (kód 27
v&nbsp;ASCII), protože právě tímto znakem se v&nbsp;edu i Vimu ukončují příkazy
&bdquo;append&ldquo;, &bdquo;change&ldquo; i &bdquo;delete&ldquo;:</p>

<pre>
133c
    search_results = json_data['analysis']
<strong>&lt;Esc&gt;</strong>
131a
    assert json_data is not None
<strong>&lt;Esc&gt;</strong>
127c
def check_components(context, num, components='', ecosystem=''):
<strong>&lt;Esc&gt;</strong>
125d
118,120d
105a
    # three new lines
    # three new lines
    # three new lines
&nbsp;
<strong>&lt;Esc&gt;</strong>
</pre>

<p>Pokud si vytvoříte skript příkazem:</p>

<pre>
diff -n old.py new.py &gt; patch.vim
</pre>

<p>Je možné ve Vimu otevřít původní soubor <strong>old.py</strong> a pomocí
příkazu:</p>

<pre>
:source patch.vim
</pre>

<p>aplikovat jednotlivé editační příkazy uložené ve skriptu.</p>

<p>Popř.&nbsp;lze vše provést z&nbsp;příkazového řádku:</p>

<pre>
vim old.py -S patch.vim
</pre>

<p>Poznámka: ve skutečnosti je mnohem častější i praktičtější použití dále
popsaných formátů, které jsou zpracovatelné utilitou
<strong>patch</strong>.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Formáty s&nbsp;volitelným kontextem</h2>

<p><a href="#k04">Výše uvedené</a> tři formáty zobrazují pouze rozdíly mezi
soubory, ale nepřidávají do vytvořeného výstupu žádný kontext, tj.&nbsp;oblast
kódu, v&nbsp;níž ke změně došlo. Proto nejsou takové rozdílové soubory příliš
čitelné, což nám však ve skutečnosti nemusí příliš vadit, protože
<strong>diff</strong> podporuje i další výstupní formáty. Velkou předností
existence kontextu je fakt, že případné změny je možné aplikovat i ve chvíli,
kdy se (další editací) změní počet řádků nebo dojde k&nbsp;dalším změnám
v&nbsp;souboru, na který je <i>patch</i> aplikován (to se ovšem týká utility
<strong>patch</strong> a nikoli nástroje <strong>diff</strong>).</p>



<p><a name="k051"></a></p>
<h3 id="k051">5.1 Základní formát s&nbsp;kontextem</h3>

<p>Jedním ze základních formátů, který zobrazuje i kontextové informace, je
formát zapnutý přepínačem <strong>-c</strong>. Výstup při použití příkazu:</p>

<pre>
diff -c old.py new.py
</pre>

<p>vypadá značně odlišně, protože se namísto jednopísmenných příkazů do prvního
sloupce zapisují značky, které označují přidané či naopak smazané řádky
(z&nbsp;pohledu historie). Dále si povšimněte, že změny jsou (pokud je to
možné) sloučené do skupin pojmenovaných <i>hunk</i>. Každý <i>hunk</i> začíná
řádkem s&nbsp;hvězdičkami, za ním následují údaje o řádcích v&nbsp;prvním i
druhém souboru, jichž se hunk týká a poté jsou již jednotlivé řádky
z&nbsp;hunku vypsány. V&nbsp;prvním sloupci znak mezery znamená, že řádek nebyl
změněn, ! značí změněný řádek, - řádek vymazaný (chybí ve druhém souboru) a +
řádek přidaný (do druhého souboru oproti souboru prvnímu):</p>

<pre>
*** old.py   2018-01-23 17:19:26.424398470 +0100
--- new.py   2018-01-23 17:19:40.856322400 +0100
***************
*** 103,108 ****
--- 103,112 ----
&nbsp;
      use_token = parse_token_clause(token)
&nbsp;
+     # three new lines
+     # three new lines
+     # three new lines
+ 
      url = component_analysis_url(context, ecosystem, component, version)
&nbsp;
      for _ in range(timeout // sleep_amount):
***************
*** 115,136 ****
          elif status_code != 404:
              raise Exception('Bad HTTP status code {c}'.format(c=status_code))
          time.sleep(sleep_amount)
-         # TODO: delete these three lines
-         # TODO: delete these three lines
-         # TODO: delete these three lines
      else:
          raise Exception('Timeout waiting for the component analysis results')
&nbsp;
&nbsp;
- @then('I should see 0 components')
  @then('I should see {num:d} components ({components}), all from {ecosystem} ecosystem')
! def check_components(context, num=0, components='', ecosystem=''):
      """Check that the specified number of components can be found."""
      components = split_comma_separated_list(components)
&nbsp;
      json_data = context.response.json()
&nbsp;
!     search_results = json_data['result']
      assert len(search_results) == num
      for search_result in search_results:
          assert search_result['ecosystem'] == ecosystem
--- 119,137 ----
          elif status_code != 404:
              raise Exception('Bad HTTP status code {c}'.format(c=status_code))
          time.sleep(sleep_amount)
      else:
          raise Exception('Timeout waiting for the component analysis results')
&nbsp;
&nbsp;
  @then('I should see {num:d} components ({components}), all from {ecosystem} ecosystem')
! def check_components(context, num, components='', ecosystem=''):
      """Check that the specified number of components can be found."""
      components = split_comma_separated_list(components)
&nbsp;
      json_data = context.response.json()
+     assert json_data is not None
&nbsp;
!     search_results = json_data['analysis']
      assert len(search_results) == num
      for search_result in search_results:
          assert search_result['ecosystem'] == ecosystem
</pre>

<p>Namísto volby <strong>-c</strong> můžeme použít i volbu <strong>-C
číslo</strong>, kterou se určuje, kolik nezměněných řádků se má zahrnout do
jednotlivých hunků. Pokud budeme například vyžadovat pět řádků na začátku a na
konci, použijeme příkaz:</p>

<pre>
diff -C 5 old.py new.py
</pre>

<p>s&nbsp;následujícím výsledkem:</p>

<pre>
*** old.py      2018-01-23 17:19:26.424398470 +0100
--- new.py      2018-01-23 17:19:40.856322400 +0100
***************
*** 101,110 ****
--- 101,114 ----
      timeout = context.component_analysis_timeout  # in seconds
      sleep_amount = 10  # we don't have to overload the API with too many calls
&nbsp;  
      use_token = parse_token_clause(token)
&nbsp;   
+     # three new lines
+     # three new lines
+     # three new lines
+ 
      url = component_analysis_url(context, ecosystem, component, version)
 &nbsp;   
      for _ in range(timeout // sleep_amount):
          if use_token:
              status_code = requests.get(url, headers=authorization(context)).status_code
***************
*** 113,138 ****
          if status_code == 200:
              break
          elif status_code != 404:
              raise Exception('Bad HTTP status code {c}'.format(c=status_code))
          time.sleep(sleep_amount)
-         # TODO: delete these three lines
-         # TODO: delete these three lines
-         # TODO: delete these three lines
      else:
          raise Exception('Timeout waiting for the component analysis results')
  &nbsp;  
  &nbsp;  
- @then('I should see 0 components')
  @then('I should see {num:d} components ({components}), all from {ecosystem} ecosystem')
! def check_components(context, num=0, components='', ecosystem=''):
      """Check that the specified number of components can be found."""
      components = split_comma_separated_list(components)
  &nbsp;  
      json_data = context.response.json()
  &nbsp;  
!     search_results = json_data['result']
      assert len(search_results) == num
      for search_result in search_results:
          assert search_result['ecosystem'] == ecosystem
          assert search_result['name'] in components
  &nbsp;  
--- 117,139 ----
          if status_code == 200:
              break
          elif status_code != 404:
              raise Exception('Bad HTTP status code {c}'.format(c=status_code))
          time.sleep(sleep_amount)
      else:
          raise Exception('Timeout waiting for the component analysis results')
  &nbsp;  
  &nbsp;  
  @then('I should see {num:d} components ({components}), all from {ecosystem} ecosystem')
! def check_components(context, num, components='', ecosystem=''):
      """Check that the specified number of components can be found."""
      components = split_comma_separated_list(components)
  &nbsp;  
      json_data = context.response.json()
+     assert json_data is not None
  &nbsp;  
!     search_results = json_data['analysis']
      assert len(search_results) == num
      for search_result in search_results:
          assert search_result['ecosystem'] == ecosystem
          assert search_result['name'] in components
</pre>



<p><a name="k052"></a></p>
<h3 id="k052">5.2 Unifikovaný formát</h3>

<p></p>

<pre>
diff -u old.py new.py
</pre>

<pre>
--- old.py      2018-01-23 17:19:26.424398470 +0100
+++ new.py      2018-01-23 17:19:40.856322400 +0100
@@ -103,6 +103,10 @@
&nbsp;
     use_token = parse_token_clause(token)
&nbsp;
+    # three new lines
+    # three new lines
+    # three new lines
+
     url = component_analysis_url(context, ecosystem, component, version)
&nbsp;
     for _ in range(timeout // sleep_amount):
@@ -115,22 +119,19 @@
         elif status_code != 404:
             raise Exception('Bad HTTP status code {c}'.format(c=status_code))
         time.sleep(sleep_amount)
-        # TODO: delete these three lines
-        # TODO: delete these three lines
-        # TODO: delete these three lines
     else:
         raise Exception('Timeout waiting for the component analysis results')
&nbsp;
&nbsp;
-@then('I should see 0 components')
 @then('I should see {num:d} components ({components}), all from {ecosystem} ecosystem')
-def check_components(context, num=0, components='', ecosystem=''):
+def check_components(context, num, components='', ecosystem=''):
     """Check that the specified number of components can be found."""
     components = split_comma_separated_list(components)
&nbsp;
     json_data = context.response.json()
+    assert json_data is not None
&nbsp;
-    search_results = json_data['result']
+    search_results = json_data['analysis']
     assert len(search_results) == num
     for search_result in search_results:
         assert search_result['ecosystem'] == ecosystem
</pre>



<p><a name="k053"></a></p>
<h3 id="k053">5.3 Zobrazení rozdílů ve dvou sloupcích</h3>

<p></p>

<pre>
diff -y old.py new.py
</pre>

<pre>
    timeout = context.component_analysis_timeout  # in second       timeout = context.component_analysis_timeout  # in second
    sleep_amount = 10  # we don't have to overload the API wi       sleep_amount = 10  # we don't have to overload the API wi
&nbsp;
    use_token = parse_token_clause(token)                           use_token = parse_token_clause(token)
&nbsp;
                                                              &gt;          # three new lines
                                                              &gt;          # three new lines
                                                              &gt;          # three new lines
                                                              &gt;
    url = component_analysis_url(context, ecosystem, componen       url = component_analysis_url(context, ecosystem, componen
&nbsp;
    for _ in range(timeout // sleep_amount):                        for _ in range(timeout // sleep_amount):
        if use_token:                                                   if use_token:
            status_code = requests.get(url, headers=authoriza               status_code = requests.get(url, headers=authoriza
        else:                                                           else:
            status_code = requests.get(url).status_code                     status_code = requests.get(url).status_code
        if status_code == 200:                                          if status_code == 200:
            break                                                           break
        elif status_code != 404:                                        elif status_code != 404:
            raise Exception('Bad HTTP status code {c}'.format               raise Exception('Bad HTTP status code {c}'.format
        time.sleep(sleep_amount)                                        time.sleep(sleep_amount)
        # TODO: delete these three lines                      &lt;
        # TODO: delete these three lines                      &lt;
        # TODO: delete these three lines                      &lt;
    else:                                                           else:
        raise Exception('Timeout waiting for the component an           raise Exception('Timeout waiting for the component an
&nbsp;
&nbsp;
@then('I should see 0 components')                            &lt;
@then('I should see {num:d} components ({components}), all fr   @then('I should see {num:d} components ({components}), all fr
def check_components(context, num=0, components='', ecosystem | def check_components(context, num, components='', ecosystem='
    """Check that the specified number of components can be f       """Check that the specified number of components can be f
    components = split_comma_separated_list(components)             components = split_comma_separated_list(components)
&nbsp;
    json_data = context.response.json()                             json_data = context.response.json()
                                                              &gt;          assert json_data is not None
&nbsp;
    search_results = json_data['result']                      |     search_results = json_data['analysis']
    assert len(search_results) == num                               assert len(search_results) == num
    for search_result in search_results:                            for search_result in search_results:
        assert search_result['ecosystem'] == ecosystem                  assert search_result['ecosystem'] == ecosystem
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. Filtr <strong>idiff</strong> aneb barevné zobrazení rozdílů</h2>

<p>Velmi jednoduchým prográmkem, který do jisté míry dokáže zlepšit čitelnost
rozdílových souborů, je skript pojmenovaný <strong>idiff</strong>, který
naleznete na stránce <a
href="http://www.pixelbeat.org/scripts/idiff">http://www.pixelbeat.org/scripts/idiff</a>.
Tento skript pracuje jako běžný filtr, tj.&nbsp;lze ho použít například takto
(pokud se <strong>idiff</strong> nachází v&nbsp;pracovním adresáři a má
nastaveno právo &bdquo;x&ldquo; pro uživatele):</p>

<pre>
diff -u old.py new.py | ./idiff
</pre>

<p>Možnosti skriptu jsou vidět na následující trojici screenshotů:</p>

*** image ***
<p><i>Obrázek 1: Obarvený výstup při použití standardního formátu
<strong>diffu</strong>.</i></p>

*** image ***
<p><i>Obrázek 2: Obarvený výstup při použití formátu s&nbsp;kontextem
(<strong>-c</strong>).</i></p>

*** image ***
<p><i>Obrázek 3: Obarvený výstup při použití unifikovaného formátu
(<strong>-u</strong>).</i></p>

<p>Skript <strong>idiff</strong> si samozřejmě můžete zkopírovat do adresáře,
který se nachází na <strong>PATH</strong>. Potom se k&nbsp;němu nemusí uvádět
cesta.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Filtr <strong>diff-so-fancy</strong></h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití filtru <strong>diff-so-fancy</strong> s&nbsp;GITem</h2>

<pre>
[color]
        ui = true
&nbsp;
[color "diff-highlight"]
        oldNormal = red bold
        oldHighlight = red bold 52
        newNormal = green bold
        newHighlight = green bold 22
&nbsp;
[color "diff"]
        meta = yellow
        frag = magenta bold
        commit = yellow bold
        old = red bold
        new = green bold
        whitespace = red reverse
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Filtr <strong>diffh</strong> určený pro vygenerování HTML stránky se zobrazením rozdílů</h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Comparing and Merging Files<br />
<a href="https://www.gnu.org/software/diffutils/manual/diffutils.html">https://www.gnu.org/software/diffutils/manual/diffutils.html</a>
</li>

<li>diff (1) - Linux Man Pages<br />
<a href="https://www.systutorials.com/docs/linux/man/1-diff/">https://www.systutorials.com/docs/linux/man/1-diff/</a>
</li>

<li>diff utility (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Diff_utility">https://en.wikipedia.org/wiki/Diff_utility</a>
</li>

<li>GNU Wdiff<br />
<a href="https://www.gnu.org/software/wdiff/">https://www.gnu.org/software/wdiff/</a>
</li>

<li>GNU wdiff Manual<br />
<a href="https://www.gnu.org/software/wdiff/manual/">https://www.gnu.org/software/wdiff/manual/</a>
</li>

<li>wdiff (1) - Linux Man Pages<br />
<a href="https://www.systutorials.com/docs/linux/man/1-wdiff/">https://www.systutorials.com/docs/linux/man/1-wdiff/</a>
</li>

<li>diff3 (1) - Linux Man Pages<br />
<a href="https://www.systutorials.com/docs/linux/man/1-diff3/">https://www.systutorials.com/docs/linux/man/1-diff3/</a>
</li>

<li>sdiff (1) - Linux Man Pages<br />
<a href="https://www.systutorials.com/docs/linux/man/1-sdiff/">https://www.systutorials.com/docs/linux/man/1-sdiff/</a>
</li>

<li>Stránky nástroje Meld<br />
<a href="http://meldmerge.org/">http://meldmerge.org/</a>
</li>

<li>Meld na stránkách GNOME<br />
<a href="https://wiki.gnome.org/Apps/Meld">https://wiki.gnome.org/Apps/Meld</a>
</li>

<li>Stránky nástroje TkDiff<br />
<a href="https://sourceforge.net/projects/tkdiff/">https://sourceforge.net/projects/tkdiff/</a>
</li>

<li>Zdrojové kódy TkDiffu<br />
<a href="https://sourceforge.net/projects/tkdiff/files/tkdiff/4.2/">https://sourceforge.net/projects/tkdiff/files/tkdiff/4.2/</a>
</li>

<li>Manuálová stránka k&nbsp;nástroji TkDiff<br />
<a href="http://linux.math.tifr.res.in/manuals/man/tkdiff.html">http://linux.math.tifr.res.in/manuals/man/tkdiff.html</a>
</li>

<li>diffh: Make your diff easier to see<br />
<a href="https://inconsolation.wordpress.com/2013/10/07/diffh-make-your-diff-easier-to-see/">https://inconsolation.wordpress.com/2013/10/07/diffh-make-your-diff-easier-to-see/</a>
</li>

<li>Stránky projektu diffh<br />
<a href="https://sourceforge.net/projects/diffh/">https://sourceforge.net/projects/diffh/</a>
</li>

<li>Pretty Diff (implementovaný v&nbsp;JavaScriptu)<br />
<a href="http://prettydiff.com/">http://prettydiff.com/</a>
</li>

<li>Nástroje pro diff textů<br />
<a href="https://en.wikipedia.org/wiki/Diff-Text">https://en.wikipedia.org/wiki/Diff-Text</a>
</li>

<li>Pretty Diff (implementovaný v&nbsp;JavaScriptu)<br />
<a href="https://en.wikipedia.org/wiki/Pretty_Diff">https://en.wikipedia.org/wiki/Pretty_Diff</a>
</li>

<li>Stránky projektu colordiff<br />
<a href="https://www.colordiff.org/">https://www.colordiff.org/</a>
</li>

<li>Skript idiff<br />
<a href="http://www.pixelbeat.org/scripts/idiff">http://www.pixelbeat.org/scripts/idiff</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

