<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Krátké zopakování: MCP server s&nbsp;definovaným nástrojem</a></p>
<p><a href="#k02">2. MCP klient volající nástroj spouštěný z&nbsp;MCP serveru</a></p>
<p><a href="#k03">3. Úplný zdrojový kód klienta, který získá hodnoty faktoriálů a vytiskne je</a></p>
<p><a href="#k04">4. MCP server se zdrojem se seznamem knih autorů</a></p>
<p><a href="#k05">*** 5. MCP klient, který přečte zvolený zdroj a získá z něj strukturovaná data</a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Krátké zopakování: MCP server s&nbsp;definovaným nástrojem</h2>

<p></p>

<pre>
"""MCP server se zdrojem,  dynamickým zdrojem a definicí nástroje (tool)."""

from mcp.server.fastmcp import FastMCP

# konstrukce serveru
mcp = FastMCP("Test")


@mcp.tool()
def factorial(n: int) -> int:
    """Výpočet faktoriálu ve smyčce."""
    f = 1
    for x in range(1, n + 1):
        f *= x
    return f


@mcp.resource("pozdrav://")
def pozdrav1() -> str:
    """Odpověď s pozdravem."""
    return "Hello, dear client"


@mcp.resource("pozdrav://{name}")
def pozdrav2(name: str) -> str:
    """Odpověď s osobním pozdravem."""
    return f"Hello, {name}"


# přímé spuštění serveru v režimu SSE (Server-Sent Events)
if __name__ == "__main__":
    mcp.run(transport="sse")
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. MCP klient volající nástroj spouštěný z&nbsp;MCP serveru</h2>

<p>Podívejme se nyní na to, jaká je základní struktura MCP klienta, který
zvolený nástroj (<i>tool</i>) zavolá, předá mu parametry a získá návratovou
hodnotu. Samotné volání nástroje, který je spouštěný přes MCP server, je
provedeno asynchronně, ostatně jako všechna ostatní volání MCP serveru (zdroje
atd.):</p>

<pre>
data = await session.call_tool("factorial")
</pre>

<p>Typicky je však nutné nástroji předat argumenty, protože se vlastně nejedná
o nic jiného, než o vzdálené volání kódu (RPC). Argumenty se specifikují
v&nbsp;keyword parametru nazvaném <strong>arguments</strong>, jehož hodnotou je
mapa obsahující jako klíče jména argumentů a hodnoty jsou (nepřekvapivě)
předávané hodnoty.  V&nbsp;případě výpočtu faktoriálu tedy volání nástroje může
vypadat následovně:</p>

<pre>
data = await session.call_tool("factorial", arguments={"n": n})
</pre>

<p>Můžeme se například pokusit o získání faktoriálů 0! až 10! s&nbsp;výpisem
výsledků:</p>

<pre>
for n in range(11):
    <i># zavolání nástroje</i>
    data = await session.call_tool("factorial", arguments={"n": n})
    factorial = data.content[0].text
    print(n, factorial)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Úplný zdrojový kód klienta, který získá hodnoty faktoriálů a vytiskne je</h2>

<p>Úplný zdrojový kód MCP klienta, který dokáže spustit MCP server, komunikovat
s&nbsp;ním přes STDIO (standardní vstupy a výstupy) a získat hodnoty faktoriálů
vypočtené nástrojem (<i>tool</i>) spouštěným z&nbsp;MCP serveru, vypadá ve své
nejjednodušší podobě následovně:</p>

<pre>
<i>"""MCP klient, který zavolá nástroj."""</i>
&nbsp;
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
&nbsp;
<i># parametry pro spuštění MCP serveru</i>
server_params = StdioServerParameters(
    command="python",  <i># spustí se tento příkaz</i>
    args=["mcp_server_5.py"],  <i># a předají se mu následující parametry</i>
    env=None,  <i># lze definovat i proměnné prostředí</i>
)
&nbsp;
&nbsp;
async def <strong>run</strong>():
    <i>"""Realizace klienta."""</i>
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
&nbsp;
            for n in range(11):
                <i># zavolání nástroje</i>
                data = await session.call_tool("factorial", arguments={"n": n})
                factorial = data.content[0].text
                print(n, factorial)
&nbsp;
&nbsp;
<i># přímé spuštění klienta</i>
if __name__ == "__main__":
    import asyncio
&nbsp;
    asyncio.run(run())
</pre>

<p>Klienta spustíme a získáme potřebné výsledky (o inicializaci MCP serveru se
již nemusíme starat). Výsledky by měly vypadat takto:</p>

<pre>
0 1
1 1
2 2
3 6
4 24
5 120
6 720
7 5040
8 40320
9 362880
10 3628800
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. MCP server se zdrojem se seznamem knih autorů</h2>

<p>V&nbsp;dalším demonstračním příkladu si připomeneme, jak by mohl vypadat
jednoduchý MCP server, který pro zadaného autora (jméno, příjmení) vrací seznam
knih. Jedná se o triviální implementaci bez databáze, takže se pro všechny
autory vrací stejný seznam. To však pro základní testy nemusí být na škodu.
V&nbsp;serveru je definován jeden zdroj <strong>author://</strong> se
selektorem <strong>name</strong> a <strong>surname</strong>, přičemž tyto
selektory jsou odděleny pomlčkou (nemusíme tedy používat jen lomítka):</p>

<pre>
<i>"""Jednoduchý MCP server s jediným definovaným dynamickým zdrojem."""</i>
&nbsp;
from mcp.server.fastmcp import FastMCP
&nbsp;
<i># konstrukce serveru</i>
mcp = FastMCP("Test")
&nbsp;
&nbsp;
<u>@mcp.resource("author://{name}-{surname}")</u>
def author(name: str, surname: str) -&gt; list:
    <i>"""Knihy od vybraného autora."""</i>
    return [
        {"name": name, "surname": surname, "title": "Foo", "year": 1900},
        {"name": name, "surname": surname, "title": "Bar", "year": 2005},
        {"name": name, "surname": surname, "title": "Baz", "year": 2025},
    ]
</pre>

<p>Tento server je možné spustit jak se STDIO transportem, tak i
s&nbsp;SSE.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. MCP klient, který přečte zvolený zdroj a získá z něj strukturovaná data</h2>

<pre>
<i>"""MCP klient, který přečte zvolený zdroj a získá z něj strukturovaná data."""</i>
&nbsp;
import json
from pprint import pprint
&nbsp;
from mcp import ClientSession
from mcp.client.sse import sse_client
&nbsp;
&nbsp;
async def <strong>run</strong>():
    <i>"""Realizace klienta."""</i>
    async with sse_client(url="http://localhost:8000/sse") as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
&nbsp;
            <i># přečtení zdroje</i>
            data = await session.read_resource("author://john-doe")
            print("Data returned:", data)
            print("Type:", type(data))
&nbsp;
            text = data.contents[0].text
            print("Text:", text)
&nbsp;
            deserialized = json.loads(text)
            print("Deserialized:")
            pprint(deserialized)
&nbsp;
&nbsp;
<i># přímé spuštění klienta</i>
if __name__ == "__main__":
    import asyncio
&nbsp;
    asyncio.run(run())
</pre>

<pre>
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('author://john-doe'), mimeType='application/json', text='[{"name": "john", "surname": "doe", "title": "Foo", "year": 1900}, {"name": "john", "surname": "doe", "title": "Bar", "year": 2005}, {"name": "john", "surname": "doe", "title": "Baz", "year": 2025}]')]
Type: <class 'mcp.types.ReadResourceResult'>
Text: [{"name": "john", "surname": "doe", "title": "Foo", "year": 1900}, {"name": "john", "surname": "doe", "title": "Bar", "year": 2005}, {"name": "john", "surname": "doe", "title": "Baz", "year": 2025}]
Deserialized:
[{'name': 'john', 'surname': 'doe', 'title': 'Foo', 'year': 1900},
 {'name': 'john', 'surname': 'doe', 'title': 'Bar', 'year': 2005},
 {'name': 'john', 'surname': 'doe', 'title': 'Baz', 'year': 2025}]
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
Python a balíček <a
href="https://github.com/modelcontextprotocol/python-sdk">mcp</a> byly uloženy
do repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;tabulce zobrazené níže jsou odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>mcp_server_1.py</td><td>jednoduchý MCP server s&nbsp;jediným definovaným zdrojem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_1.py</a></td></tr>
<tr><td> 2</td><td>mcp_server_2.py</td><td>jednoduchý MCP server s&nbsp;jediným definovaným dynamickým zdrojem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_2.py</a></td></tr>
<tr><td> 3</td><td>mcp_server_3.py</td><td>MCP server s&nbsp;dynamickým zdrojem a definicí nástroje (tool)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_3.py</a></td></tr>
<tr><td> 4</td><td>mcp_server_4.py</td><td>MCP server s jediným definovaným dynamickým zdrojem, zápis informací o spuštění</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_4.py</a></td></tr>
<tr><td> 5</td><td>mcp_server_5.py</td><td>MCP server, který se přímo spustí v&nbsp;režimu STDIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_5.py</a></td></tr>
<tr><td> 6</td><td>mcp_server_6.py</td><td>MCP server, který se přímo spustí v&nbsp;režimu SSE</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_6.py</a></td></tr>
<tr><td> 7</td><td>mcp_server_7.py</td><td>MCP server se zdrojem vracejícím strukturovaná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_7.py</a></td></tr>
<tr><td> 8</td><td>mcp_server_8.py</td><td>MCP server se zdrojem vracejícím strukturovaná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_8.py</a></td></tr>
<tr><td> 9</td><td>mcp_server_9.py</td><td>MCP server, který dokáže poslat rastrový obrázek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_9.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>mcp_client_1.py</td><td>MCP klient, který spustí server, se kterým se komunikuje přes STDIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_1.py</a></td></tr>
<tr><td>11</td><td>mcp_client_2.py</td><td>MCP klient, který spustí server, se kterým se komunikuje přes SSE</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_2.py</a></td></tr>
<tr><td>12</td><td>mcp_client_3.py</td><td>MCP klient, který přečte zvolený zdroj</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_3.py</a></td></tr>
<tr><td>13</td><td>mcp_client_4.py</td><td>MCP klient, který přečte zvolený zdroj a získá z&nbsp;něj data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_4.py</a></td></tr>
<tr><td>14</td><td>mcp_client_5.py</td><td>MCP klient, který zavolá vybraný nástroj</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_5.py</a></td></tr>
<tr><td>15</td><td>mcp_client_6.py</td><td>MCP klient, který přečte a zpracuje strukturovaná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_6.py</a></td></tr>
<tr><td>16</td><td>mcp_client_7.py</td><td>MCP klient, který dokáže načíst rastrový obrázek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_7.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>MCP Python SDK<br />
<a href="https://github.com/modelcontextprotocol/python-sdk?tab=readme-ov-file#running-your-server">https://github.com/modelcontextprotocol/python-sdk?tab=readme-ov-file#running-your-server</a>
</li>

<li>MCP protocol: Resources<br />
<a href="https://modelcontextprotocol.info/docs/concepts/resources/">https://modelcontextprotocol.info/docs/concepts/resources/</a>
</li>

<li>Example Servers<br />
<a href="https://modelcontextprotocol.io/examples">https://modelcontextprotocol.io/examples</a>
</li>

<li>Core architecture<br />
<a href="https://modelcontextprotocol.io/docs/concepts/architecture">https://modelcontextprotocol.io/docs/concepts/architecture</a>
</li>

<li>Unleashing the Power of Model Context Protocol (MCP): A Game-Changer in AI Integration<br />
<a href="https://techcommunity.microsoft.com/blog/educatordeveloperblog/unleashing-the-power-of-model-context-protocol-mcp-a-game-changer-in-ai-integrat/4397564">https://techcommunity.microsoft.com/blog/educatordeveloperblog/unleashing-the-power-of-model-context-protocol-mcp-a-game-changer-in-ai-integrat/4397564</a>
</li>

<li>MPC inspector<br />
<a href="https://github.com/modelcontextprotocol/inspector">https://github.com/modelcontextprotocol/inspector</a>
</li>

<li>Model Context Protocol servers<br />
<a href="https://github.com/modelcontextprotocol/servers">https://github.com/modelcontextprotocol/servers</a>
</li>

<li>python-sdk na GitHubu<br />
<a href="https://github.com/modelcontextprotocol/python-sdk">https://github.com/modelcontextprotocol/python-sdk</a>
</li>

<li>typescript-sdk na GitHubu<br />
<a href="https://github.com/modelcontextprotocol/typescript-sdk">https://github.com/modelcontextprotocol/typescript-sdk</a>
</li>

<li>mcp-golang<br />
<a href="https://github.com/metoro-io/mcp-golang">https://github.com/metoro-io/mcp-golang</a>
</li>

<li>MCP server: A step-by-step guide to building from scratch<br />
<a href="https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/">https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/</a>
</li>

<li>How to Build an MCP Server Fast: A Step-by-Step Tutorial<br />
<a href="https://medium.com/@eugenesh4work/how-to-build-an-mcp-server-fast-a-step-by-step-tutorial-e09faa5f7e3b">https://medium.com/@eugenesh4work/how-to-build-an-mcp-server-fast-a-step-by-step-tutorial-e09faa5f7e3b</a>
</li>

<li>Step-by-Step Guide: Building an MCP Server using Python-SDK, AlphaVantage &amp; Claude AI<br />
<a href="https://medium.com/@syed_hasan/step-by-step-guide-building-an-mcp-server-using-python-sdk-alphavantage-claude-ai-7a2bfb0c3096">https://medium.com/@syed_hasan/step-by-step-guide-building-an-mcp-server-using-python-sdk-alphavantage-claude-ai-7a2bfb0c3096</a>
</li>

<li>RFC 6570: URI Template<br />
<a href="https://datatracker.ietf.org/doc/html/rfc6570">https://datatracker.ietf.org/doc/html/rfc6570</a>
</li>

<li>Return resources as structured JSON instead of text?<br />
<a href="https://github.com/modelcontextprotocol/python-sdk/issues/279">https://github.com/modelcontextprotocol/python-sdk/issues/279</a>
</li>

<li>Python standard library: pprint<br />
<a href="https://docs.python.org/3/library/pprint.html">https://docs.python.org/3/library/pprint.html</a>
</li>

<li>Python standard library: json — JSON encoder and decoder¶<br />
<a href="https://docs.python.org/3/library/json.html">https://docs.python.org/3/library/json.html</a>
</li>

<li>Calling MCP Servers the Hard Way<br />
<a href="https://deadprogrammersociety.com/2025/03/calling-mcp-servers-the-hard-way.html">https://deadprogrammersociety.com/2025/03/calling-mcp-servers-the-hard-way.html</a>
</li>

<li>mcptools<br />
<a href="https://github.com/f/mcptools">https://github.com/f/mcptools</a>
</li>

<li>Server-sent events<br />
<a href="https://en.wikipedia.org/wiki/Server-sent_events">https://en.wikipedia.org/wiki/Server-sent_events</a>
</li>

<li>Model context protocol (MCP)<br />
<a href="https://openai.github.io/openai-agents-python/mcp/">https://openai.github.io/openai-agents-python/mcp/</a>
</li>

<li>A Clear Intro to MCP (Model Context Protocol) with Code Examples<br />
<a href="https://towardsdatascience.com/clear-intro-to-mcp/">https://towardsdatascience.com/clear-intro-to-mcp/</a>
</li>

<li>A Developer's Guide to the MCP<br />
<a href="https://www.getzep.com/ai-agents/developer-guide-to-mcp">https://www.getzep.com/ai-agents/developer-guide-to-mcp</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

