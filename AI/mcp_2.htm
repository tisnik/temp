<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Model Context Protocol: vznikající standard pro potřeby aplikací využívajících AI a LLM (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Model Context Protocol: vznikající standard pro potřeby aplikací využívajících AI a LLM (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Krátké zopakování: MCP server s&nbsp;definovaným nástrojem</a></p>
<p><a href="#k02">2. MCP klient volající nástroj spouštěný z&nbsp;MCP serveru</a></p>
<p><a href="#k03">3. Úplný zdrojový kód klienta, který získá hodnoty faktoriálů a vytiskne je</a></p>
<p><a href="#k04">4. MCP server se zdrojem se seznamem knih autorů</a></p>
<p><a href="#k05">5. MCP klient, který přečte zvolený zdroj a získá z něj strukturovaná data</a></p>
<p><a href="#k06">6. Odlišný oddělovač selektorů</a></p>
<p><a href="#k07">7. Chování MCP serveru po příchodu většího množství požadavků</a></p>
<p><a href="#k08">8. Přístup ke &bdquo;zpomalenému&ldquo; MCP serveru z&nbsp;MCP klienta</a></p>
<p><a href="#k09">9. Souběžný přístup ke &bdquo;zpomalenému&ldquo; MCP serveru</a></p>
<p><a href="#k10">10. Asynchronní souběžný přístup ke &bdquo;zpomalenému&ldquo; MCP serveru</a></p>
<p><a href="#k11">*** 11. Podpora rastrových obrázků v&nbsp;balíčku <strong>mcp</strong></a></p>
<p><a href="#k12">*** 12. MCP server posílající rastrový obrázek</a></p>
<p><a href="#k13">*** 13. Dekódování obrázku na straně MCP klienta</a></p>
<p><a href="#k14">14. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k15">15. Příloha: články o knihovně PIL/Pillow</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Krátké zopakování: MCP server s&nbsp;definovaným nástrojem</h2>

<p>V&nbsp;<a
href="https://www.root.cz/clanky/model-context-protocol-vznikajici-standard-pro-aplikace-ai-a-llm/">úvodním
článku</a> o MCP (<i>Model Context Protocol</i>) jsme se seznámili se
základními vlastnosti tohoto protokolu. Ukázali jsme si taktéž knihovnu
<strong>mcp</strong> určenou pro programovací jazyk Python, která umožňuje
tvorbu MCP serverů i MCP klientů. A nezapomněli jsme ani na <i>MCP
Inspector</i>, což je vývojářský nástroj zajišťující připojení k&nbsp;MCP
serverům (nebo i k&nbsp;jejich spuštění) a interaktivní komunikaci se
serverem.</p>

<p>Pro krátké zopakovaní si znovu ukažme zdrojový kód MCP serveru, ve kterém je
definován jeden zdroj (<i>resource</i>) bez vyžadovaných selektorů, dále zdroj
se selektorem (konkrétně se jménem klienta) a konečně i nástroj (<i>tool</i>),
který na základě zadaného vstupu vypočítá hodnotu faktoriálu.</p>

<p><div class="rs-tip-major">Poznámka: zdroj se selektorem či s&nbsp;více
selektory se v&nbsp;terminologii MCP nazývá <i>resource template</i>.</div></p>

<p>Zdrojový kód serveru vypadá takto:</p>

<pre>
<i>"""MCP server se zdrojem,  dynamickým zdrojem a definicí nástroje (tool)."""</i>
&nbsp;
from mcp.server.fastmcp import FastMCP
&nbsp;
<i># konstrukce serveru</i>
mcp = FastMCP("Test")
&nbsp;
&nbsp;
<u>@mcp.tool()</u>
def <strong>factorial</strong>(n: int) -&gt; int:
    <i>"""Výpočet faktoriálu ve smyčce."""</i>
    f = 1
    for x in range(1, n + 1):
        f *= x
    return f
&nbsp;
&nbsp;
<u>@mcp.resource("pozdrav://")</u>
def <strong>pozdrav1</strong>() -&gt; str:
    <i>"""Odpověď s pozdravem."""</i>
    return "Hello, dear client"
&nbsp;
&nbsp;
<u>@mcp.resource("pozdrav://{name}")</u>
def <strong>pozdrav2</strong>(name: str) -&gt; str:
    <i>"""Odpověď s osobním pozdravem."""</i>
    return f"Hello, {name}"
&nbsp;
&nbsp;
<i># přímé spuštění serveru v režimu SSE (Server-Sent Events)</i>
if __name__ == "__main__":
    mcp.run(transport="sse")
</pre>

<p><div class="rs-tip-major">Poznámka: tento server lze spustit přímo přes
interpret jazyka Python; nemusíme tedy používat nástroj
<strong>mcp</strong>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. MCP klient volající nástroj spouštěný z&nbsp;MCP serveru</h2>

<p>Podívejme se nyní na to, jaká je základní struktura jednoduchého MCP
klienta, který zvolený nástroj (<i>tool</i>) zavolá, předá mu všechny
požadované argumenty, počká na přijaté výsledky a nakonec získá výslednou
hodnotu poslanou klientem. Klient si sám zajistí spuštění MCP serveru a
navázání komunikace s&nbsp;transportem STDIO:</p>

<pre>
<i># parametry pro spuštění MCP serveru</i>
server_params = StdioServerParameters(
    command="python",  <i># spustí se tento příkaz</i>
    args=["mcp_server_5.py"],  <i># a předají se mu následující parametry</i>
    env=None,  <i># lze definovat i proměnné prostředí</i>
)
</pre>

<p>Spuštění serveru (a na konci jeho ukončení) se děje v&nbsp;rámci správce
kontextu (<i>context manager</i>):</p>

<pre>
async with stdio_client(server_params) as (read, write):
    ...
    ...
    ...
</pre>

<p>Nejprve získáme objekt představující sezení
(<i>session</i> obsahující kontextové informace o navázaném připojení; sezení
inicializujeme:</p>

<pre>
async with ClientSession(read, write) as session:
    await session.initialize()
</pre>

<p>Mimochodem, k&nbsp;objektu typu <strong>ClientSession</strong> si samozřejmě
můžete zobrazit nápovědu přímo z&nbsp;REPLu Pythonu:</p>

<pre>
&gt;&gt;&gt; <strong>from mcp import ClientSession, StdioServerParameters</strong>
&nbsp;
&gt;&gt;&gt; <strong>c=ClientSession(None, None)</strong>
&nbsp;
&gt;&gt;&gt; <strong>help(c)</strong>
&nbsp;
class ClientSession(mcp.shared.session.BaseSession)
 |  ClientSession(read_stream: anyio.streams.memory.MemoryObjectReceiveStream[mcp.types.JSONRPCMessage | Exception], write_stream: anyio.streams.memory.MemoryObjectSendStream[mcp.types.JSONRPCMessage], read_timeout_seconds: datetime.timedelta | None = None, sampling_callback: mcp.client.session.SamplingFnT | None = None, list_roots_callback: mcp.client.session.ListRootsFnT | None = None, logging_callback: mcp.client.session.LoggingFnT | None = None) -&gt; None
 |
 |  Method resolution order:
 |      ClientSession
 |      mcp.shared.session.BaseSession
 |      typing.Generic
 |      builtins.object
 |
</pre>

<p>Samotné volání nástroje, který je spouštěný přes MCP server, je v&nbsp;MCP
klientovi provedeno asynchronně, ostatně jako všechna ostatní volání MCP
serveru (zdroje atd.):</p>

<pre>
data = await session.call_tool("factorial")
</pre>

<p>Typicky je však nutné volanému nástroji předat argumenty, protože se vlastně
nejedná o nic jiného, než o vzdálené volání kódu (RPC). Argumenty se
specifikují v&nbsp;keyword parametru nazvaném <strong>arguments</strong>, jehož
hodnotou je mapa obsahující jako klíče jména argumentů a hodnoty jsou
(nepřekvapivě) předávané hodnoty. To je umožněno, protože hlavička metody
<strong>call_tool</strong> vypadá následovně:</p>

<pre>
async call_tool(name: str, arguments: dict[str, typing.Any] | None = None)
    -&gt; mcp.types.CallToolResult method of mcp.client.session.ClientSession instance
    Send a tools/call request.
</pre>

<p>V&nbsp;případě výpočtu faktoriálu tedy volání nástroje může vypadat
následovně:</p>

<pre>
data = await session.call_tool("factorial", arguments={"n": n})
</pre>

<p>Můžeme se například pokusit o získání faktoriálů 0! až 10! (včetně)
s&nbsp;následným výpisem získaných výsledků:</p>

<pre>
for n in range(11):
    <i># zavolání nástroje</i>
    data = await session.call_tool("factorial", arguments={"n": n})
    factorial = data.content[0].text
    print(n, factorial)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Úplný zdrojový kód klienta, který získá hodnoty faktoriálů a vytiskne je</h2>

<p>Úplný zdrojový kód MCP klienta popsaného <a href="#k02">v&nbsp;předchozí
kapitole</a>, který dokáže spustit MCP server, komunikovat s&nbsp;ním přes
STDIO (standardní vstupy a výstupy) a získat hodnoty faktoriálů vypočtené
nástrojem (<i>tool</i>) spouštěným z&nbsp;MCP serveru, vypadá ve své
nejjednodušší podobě následovně:</p>

<pre>
<i>"""MCP klient, který zavolá nástroj."""</i>
&nbsp;
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
&nbsp;
<i># parametry pro spuštění MCP serveru</i>
server_params = StdioServerParameters(
    command="python",  <i># spustí se tento příkaz</i>
    args=["mcp_server_5.py"],  <i># a předají se mu následující parametry</i>
    env=None,  <i># lze definovat i proměnné prostředí</i>
)
&nbsp;
&nbsp;
async def <strong>run</strong>():
    <i>"""Realizace klienta."""</i>
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
&nbsp;
            for n in range(11):
                <i># zavolání nástroje</i>
                data = await session.call_tool("factorial", arguments={"n": n})
                factorial = data.content[0].text
                print(n, factorial)
&nbsp;
&nbsp;
<i># přímé spuštění klienta</i>
if __name__ == "__main__":
    import asyncio
&nbsp;
    asyncio.run(run())
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, jak snadné je přečtení
odpovědi nástroje. Pouze z&nbsp;vráceného objektu přečteme atribut
<strong>content</strong> (což je sekvence), vybereme první prvek a z&nbsp;něho
atribut text.</div></p>

<p>Klienta běžným způsobem spustíme příkazem <strong>python
jméno_skriptu.py</strong> a získáme potřebné výsledky. O inicializaci MCP
serveru se již nemusíme starat, protože si klient server spustí automaticky.
Výsledky by měly vypadat takto:</p>

<pre>
0 1
1 1
2 2
3 6
4 24
5 120
6 720
7 5040
8 40320
9 362880
10 3628800
</pre>

<p>V&nbsp;případě, že bychom ovšem vypisovali přímo odpovědi serveru, dostali
bychom textovou podobu objektu, který je zpracován protokolem MCP a převeden do
podoby Pythonovského objektu knihovnou <strong>mcp</strong> (to však většinou
není zapotřebí):</p>

<pre>
meta=None content=[TextContent(type='text', text='1', annotations=None)] isError=False
meta=None content=[TextContent(type='text', text='1', annotations=None)] isError=False
meta=None content=[TextContent(type='text', text='2', annotations=None)] isError=False
meta=None content=[TextContent(type='text', text='6', annotations=None)] isError=False
meta=None content=[TextContent(type='text', text='24', annotations=None)] isError=False
meta=None content=[TextContent(type='text', text='120', annotations=None)] isError=False
meta=None content=[TextContent(type='text', text='720', annotations=None)] isError=False
meta=None content=[TextContent(type='text', text='5040', annotations=None)] isError=False
meta=None content=[TextContent(type='text', text='40320', annotations=None)] isError=False
meta=None content=[TextContent(type='text', text='362880', annotations=None)] isError=False
meta=None content=[TextContent(type='text', text='3628800', annotations=None)] isError=False
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. MCP server se zdrojem se seznamem knih autorů</h2>

<p>V&nbsp;dnešním druhém demonstračním příkladu si připomeneme, jak by mohl
vypadat jednoduchý MCP server, který pro zadaného autora (jméno, příjmení)
vrací seznam knih. Jedná se o triviální implementaci bez databáze, takže se pro
všechny autory vrací stejný seznam. To však pro základní testy nemusí být na
škodu. Namísto nástroje (<i>tool</i>) v&nbsp;tomto případě použijeme zdroj. Ten
je na straně serveru definován pod jménem <strong>author://</strong> se
selektorem <strong>name</strong> a <strong>surname</strong>, přičemž tyto
selektory jsou odděleny pomlčkou (nemusíme tedy používat jen lomítka):</p>

<pre>
<i>"""Jednoduchý MCP server s jediným definovaným dynamickým zdrojem."""</i>
&nbsp;
from mcp.server.fastmcp import FastMCP
&nbsp;
<i># konstrukce serveru</i>
mcp = FastMCP("Test")
&nbsp;
&nbsp;
<u>@mcp.resource("author://{name}-{surname}")</u>
def <strong>author</strong>(name: str, surname: str) -&gt; list:
    <i>"""Knihy od vybraného autora."""</i>
    return [
        {"name": name, "surname": surname, "title": "Foo", "year": 1900},
        {"name": name, "surname": surname, "title": "Bar", "year": 2005},
        {"name": name, "surname": surname, "title": "Baz", "year": 2025},
    ]
</pre>

<p>Tento server je možné spustit jak se STDIO transportem, tak i s&nbsp;SSE.
Spustit ho můžeme nástrojem <strong>mcp</strong> nebo přímo z&nbsp;MCP
klienta.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. MCP klient, který přečte zvolený zdroj a získá z něj strukturovaná data</h2>

<p>Nyní bude zajímavé zjistit, jak vlastně vypadá MCP klient, který dokáže
přečíst a zpracovat jména knih napsaná vybraným autorem. Jediná zajímavá
(resp.&nbsp;nová) část se týká zpracování dat, které nám knihovna
<strong>mcp</strong> vrátí. Proto po spuštění klienta a přečtení odpovědi ze
serveru zobrazíme jak &bdquo;surová&ldquo; data, která byla přečtena a vrácena
klientovi, tak i vlastní text (ano, čistý text!), s&nbsp;JSON odpovědí. O
parsing JSONu se musíme postarat programově, což je zvláštní, ale současná
verze knihovny <strong>mcp</strong> tuto vlastnost nepodporuje (je otevřena
<i>issue</i>):</p>

<pre>
<i>"""MCP klient, který přečte zvolený zdroj a získá z něj strukturovaná data."""</i>
&nbsp;
import json
from pprint import pprint
&nbsp;
from mcp import ClientSession
from mcp.client.sse import sse_client
&nbsp;
&nbsp;
async def <strong>run</strong>():
    <i>"""Realizace klienta."""</i>
    async with sse_client(url="http://localhost:8000/sse") as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
&nbsp;
            <i># přečtení zdroje</i>
            data = await session.read_resource("author://john-doe")
            print("Data returned:", data)
            print("Type:", type(data))
&nbsp;
            text = data.contents[0].text
            print("Text:", text)
&nbsp;
            deserialized = json.loads(text)
            print("Deserialized:")
            pprint(deserialized)
&nbsp;
&nbsp;
<i># přímé spuštění klienta</i>
if __name__ == "__main__":
    import asyncio
&nbsp;
    asyncio.run(run())
</pre>

<p>Po spuštění MCP klienta se nejdříve zobrazí celý objekt, který byl vrácen
metodou <strong>session.read_resource</strong>. Tento objekt obsahuje sekvenci
objektů typu <strong>TextResourceContents</strong>:</p>

<pre>
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('author://john-doe'), mimeType='application/json', text='[{"name": "john", "surname": "doe", "title": "Foo", "year": 1900}, {"name": "john", "surname": "doe", "title": "Bar", "year": 2005}, {"name": "john", "surname": "doe", "title": "Baz", "year": 2025}]')]
</pre>

<p>Typ objektu:</p>

<pre>
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
</pre>

<p>Vlastní text přečtený z&nbsp;objektu je skutečně text:</p>

<pre>
Text: [{"name": "john", "surname": "doe", "title": "Foo", "year": 1900}, {"name": "john", "surname": "doe", "title": "Bar", "year": 2005}, {"name": "john", "surname": "doe", "title": "Baz", "year": 2025}]
</pre>

<p>Teprve po explicitním volání <strong>json.loads()</strong> (tedy po
deserializaci) získáme z&nbsp;textu strukturovaná data se seznamem knih:</p>

<pre>
Deserialized:
[{'name': 'john', 'surname': 'doe', 'title': 'Foo', 'year': 1900},
 {'name': 'john', 'surname': 'doe', 'title': 'Bar', 'year': 2005},
 {'name': 'john', 'surname': 'doe', 'title': 'Baz', 'year': 2025}]
</pre>

<p><div class="rs-tip-major">Poznámka: tuto deserializaci je nutné explicitně
provádět vždy, pokud MCP server vrací strukturovaná data
v&nbsp;JSONu.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Odlišný oddělovač selektorů</h2>

<p>Samozřejmě můžeme server překonfigurovat tak, aby byly jednotlivé selektory
zdroje odděleny lomítky a nikoli pomlčkami. Postačuje k&nbsp;tomu velmi malá
změna. Dekorátor zdroje:</p>

<pre>
<u>@mcp.resource("author://{name}-{surname}")</u>
</pre>

<p>pozměníme na:</p>

<pre>
<u>@mcp.resource("author://{name}/{surname}", mime_type="application/json")</u>
</pre>

<p>Upravený zdrojový kód serveru vypadá následovně:</p>

<pre>
<i>"""Jednoduchý MCP server s jediným definovaným dynamickým zdrojem."""</i>
&nbsp;
from mcp.server.fastmcp import FastMCP
&nbsp;
<i># konstrukce serveru</i>
mcp = FastMCP("Test")
&nbsp;
&nbsp;
<u>@mcp.resource("author://{name}/{surname}", mime_type="application/json")</u>
def <strong>author</strong>(name: str, surname: str) -&gt; list:
    <i>"""Knihy od vybraného autora."""</i>
    return [
        {"name": name, "surname": surname, "title": "Foo", "year": 1900},
        {"name": name, "surname": surname, "title": "Bar", "year": 2005},
        {"name": name, "surname": surname, "title": "Baz", "year": 2025},
    ]
&nbsp;
&nbsp;
<i># přímé spuštění serveru v režimu SSE (Server-Sent Events)</i>
if __name__ == "__main__":
    mcp.run(transport="sse")
</pre>

<p>Samozřejmě je nutné změnit i klienta. Konkrétně se jedná o nahrazení
řádku:</p>

<pre>
data = await session.read_resource("author://john-doe")
</pre>

<p>za řádek:</p>

<pre>
data = await session.read_resource("author://john/doe")
</pre>

<p>Opět si pro úplnost ukažme, jak klient vypadá po této nepatrné úpravě:</p>

<pre>
<i>"""MCP klient, který přečte zvolený zdroj a získá z něj strukturovaná data."""</i>
&nbsp;
import json
from pprint import pprint
&nbsp;
from mcp import ClientSession
from mcp.client.sse import sse_client
&nbsp;
&nbsp;
async def <strong>run</strong>():
    <i>"""Realizace klienta."""</i>
    async with sse_client(url="http://localhost:8000/sse") as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
&nbsp;
            <i># přečtení zdroje</i>
            data = await session.read_resource("author://john/doe")
            print("Data returned:", data)
            print("Type:", type(data))
&nbsp;
            text = data.contents[0].text
            print("Text:", text)
&nbsp;
            deserialized = json.loads(text)
            print("Deserialized:")
            pprint(deserialized)
&nbsp;
&nbsp;
<i># přímé spuštění klienta</i>
if __name__ == "__main__":
    import asyncio
&nbsp;
    asyncio.run(run())
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Chování MCP serveru po příchodu většího množství požadavků</h2>

<p>V&nbsp;dalším zkoumání možností MCP se pokusíme zjistit, jakým způsobem MCP
server reaguje na situaci, kdy dostane větší množství požadavků. Takový server
tedy budeme muset spustit s&nbsp;transportem SSE a nikoli STDIO, protože
komunikace přes STDIO je určena pro komunikaci pouze dvou procesů. Abychom
odsimulovali nějakou složitější činnost MCP serveru, vložíme jak do volání
nástroje (<i>tool</i>), tak i pro přístup ke zdrojům (<i>resource</i>) volání
<strong>time.sleep</strong> s&nbsp;přibližně půlsekundovým intervalem. Tím
budeme simulovat déletrvající operace. Nová podoba implementace MCP serveru
bude vypadat následovně:</p>

<pre>
<i>"""MCP server se zdrojem,  dynamickým zdrojem a definicí nástroje (tool)."""</i>
&nbsp;
from time import sleep
&nbsp;
from mcp.server.fastmcp import FastMCP
&nbsp;
<i># konstrukce serveru</i>
mcp = FastMCP("Test")
&nbsp;
SLEEP_AMOUNT=0.5
&nbsp;
&nbsp;
@mcp.tool()
def <strong>factorial</strong>(n: int) -&gt; int:
    <i>"""Výpočet faktoriálu ve smyčce."""</i>
    print("Factorial computation started")
    f = 1
    for x in range(1, n + 1):
        f *= x
    sleep(SLEEP_AMOUNT)
    print("Factorial computation finished")
    return f
&nbsp;
&nbsp;
@mcp.resource("pozdrav://")
def pozdrav1() -&gt; str:
    <i>"""Odpověď s pozdravem."""</i>
    print("Resource preparation started")
    sleep(SLEEP_AMOUNT)
    print("Resource preparation finished")
    return "Hello, dear client!"
&nbsp;
&nbsp;
@mcp.resource("pozdrav://{name}")
def pozdrav2(name: str) -&gt; str:
    <i>"""Odpověď s osobním pozdravem."""</i>
    print("Resource preparation started")
    sleep(SLEEP_AMOUNT)
    print("Resource preparation finished")
    return f"Hello, {name}!"
&nbsp;
&nbsp;
<i># přímé spuštění serveru v režimu SSE (Server-Sent Events)</i>
if __name__ == "__main__":
    mcp.run(transport="sse")
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Přístup ke &bdquo;zpomalenému&ldquo; MCP serveru z&nbsp;MCP klienta</h2>

<p>Abychom si ověřili, jak rychle nebo pomalu přístup k&nbsp;MCP serveru
probíhá, přidáme do MCP klienta výpočet celkového času nutného pro přečtení
obou zdrojů i výsledku vypočteného volaným nástrojem. Je to snadné:</p>

<pre>
<i>"""MCP klient, který přečte zvolený zdroj a získá z něj data."""</i>
&nbsp;
from time import time
&nbsp;
from mcp import ClientSession, StdioServerParameters
from mcp.client.sse import sse_client
&nbsp;
async def <strong>run</strong>():
    <i>"""Realizace klienta."""</i>
    async with sse_client(url="http://localhost:8000/sse") as (read, write):
        async with ClientSession(read, write) as session:
            t1 = time()
            print("Client initialization")
            print()
&nbsp;
            await session.initialize()
&nbsp;
            <i># přečtení zdroje bez selektoru</i>
            data = await session.read_resource("pozdrav://")
            print("Data returned:", data)
            print("Type:", type(data))
            text = data.contents[0].text
            print("Text:", text)
            print()
&nbsp;
            <i># přečtení zdroje se selektorem</i>
            data = await session.read_resource("pozdrav://Pavel")
            print("Data returned:", data)
            print("Type:", type(data))
&nbsp;
            text = data.contents[0].text
            print("Text:", text)
            print()
&nbsp;
            <i># zavolání nástroje</i>
            data = await session.call_tool("factorial", arguments={"n": 10})
            factorial = data.content[0].text
            print("10!=", factorial)
            print()
&nbsp;
            t2 = time()
            difftime = t2 - t1
            print(f"Client has finished in {difftime} seconds")
            print()
&nbsp;
&nbsp;
<i># přímé spuštění klienta</i>
if __name__ == "__main__":
    import asyncio
&nbsp;
    asyncio.run(run())
</pre>

<p>Takto může vypadat běh klienta:</p>

<pre>
Client initialization
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 1.5324900150299072 seconds
</pre>

<p>Povšimněte si, že jeden MCP klient skončil skutečně za cca 1,5 sekundy (tedy
co jedno volání, to přibližně 0,5 sekundy).</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Souběžný přístup ke &bdquo;zpomalenému&ldquo; MCP serveru</h2>

<p>Nyní se pokusíme o souběžné spuštění deseti MCP klientů. Jsou možné dva
výsledky:</p>

<ol>

<li>Každý MCP klient bude se obsloužen souběžně a tedy každý skončí přibližně
po 1,5 sekundě</li>

<li>Obsluha bude prováděna sekvenčně a časy budou mnohem delší &ndash; poslední
klient by měl skončit po 10&times;1,5=15 sekundách</li>

</ol>

<p><div class="rs-tip-major">Poznámka: jedná se o minimální časy.</div></p>

<p>Princip spuštění:</p>

<pre>
for i in `seq 10`
do
    echo "Starting client #$i"
    python mcp_client_8.py &gt; "$i.txt" &amp;
done
</pre>

<p>Výsledek pro nejrychlejšího MCP klienta:</p>

<pre>
Client initialization
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
10!= 3628800
&nbsp;
Client has finished in <strong>3.0988974571228027</strong> seconds
</pre>

<p>Výsledek pro nejpomalejší MCP klient:</p>

<pre>
Client initialization
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
10!= 3628800
&nbsp;
Client has finished in <strong>14.61089015007019</strong> seconds
</pre>

<p>Z&nbsp;tohoto času (cca 1,5&times;10 sekund) vyplývá, že většina obsluhy
klientů MCP serverem je prováděna sekvenčně a nikoli souběžně.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Asynchronní souběžný přístup ke &bdquo;zpomalenému&ldquo; MCP serveru</h2>

<p>Ovšem souběžný přístup je možné v&nbsp;případě potřeby zajistit i přímo
v&nbsp;realizaci MCP klienta. Namísto jediného spuštění asynchronní funkce
<strong>run</strong> jich necháme spustit několik. Pro tento účel si vytvoříme
pomocnou asynchronní funkci <strong>main</strong>, v&nbsp;níž několikrát
spustíme <strong>run</strong> a budeme čekat na všechny výsledky:</p>

<pre>
async def <strong>main</strong>(): 
    <i># spuštění několika klientů</i>
    clients = [run(i) for i in range(10)]
    await asyncio.gather(*clients)
</pre>

<p>Upravený zdrojový kód klienta (včetně měření času) bude vypadat
následovně:</p>

<pre>
<i>"""MCP klient, který přečte zvolený zdroj a získá z něj data."""</i>
&nbsp;
from time import time
&nbsp;
from mcp import ClientSession, StdioServerParameters
from mcp.client.sse import sse_client
&nbsp;
async def <strong>run</strong>(i):
    <i>"""Realizace klienta."""</i>
    async with sse_client(url="http://localhost:8000/sse") as (read, write):
        async with ClientSession(read, write) as session:
            t1 = time()
            print(f"Client #{i} initialization")
            print()
&nbsp;
            await session.initialize()
&nbsp;
            <i># přečtení zdroje bez selektoru</i>
            data = await session.read_resource("pozdrav://")
            print("Data returned:", data)
            print("Type:", type(data))
            text = data.contents[0].text
            print("Text:", text)
            print()
&nbsp;
            <i># přečtení zdroje se selektorem</i>
            data = await session.read_resource("pozdrav://Pavel")
            print("Data returned:", data)
            print("Type:", type(data))
&nbsp;
            text = data.contents[0].text
            print("Text:", text)
            print()
&nbsp;
            <i># zavolání nástroje</i>
            data = await session.call_tool("factorial", arguments={"n": 10})
            factorial = data.content[0].text
            print("10!=", factorial)
            print()
&nbsp;
            t2 = time()
            difftime = t2 - t1
            print(f"Client has finished in {difftime} seconds")
            print()
&nbsp;
&nbsp;
async def <strong>main</strong>(): 
    <i># spuštění několika klientů</i>
    clients = [run(i) for i in range(10)]
    await asyncio.gather(*clients)
&nbsp;
&nbsp;
if __name__ == "__main__":
    import asyncio
&nbsp;
    asyncio.run(main())
</pre>

<p>Opět se podívejme na výsledky, zejména na celkové časy:</p>

<pre>
Client #0 initialization
&nbsp;
Client #1 initialization
&nbsp;
Client #2 initialization
&nbsp;
Client #7 initialization
&nbsp;
Client #8 initialization
&nbsp;
Client #9 initialization
&nbsp;
Client #6 initialization
&nbsp;
Client #4 initialization
&nbsp;
Client #3 initialization
&nbsp;
Client #5 initialization
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://'), mimeType='text/plain', text='Hello, dear client!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, dear client!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
Data returned: meta=None contents=[TextResourceContents(uri=AnyUrl('pozdrav://Pavel'), mimeType='text/plain', text='Hello, Pavel!')]
Type: &lt;class 'mcp.types.ReadResourceResult'&gt;
Text: Hello, Pavel!
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 10.609342098236084 seconds
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 15.126225709915161 seconds
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 15.123616933822632 seconds
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 15.123651266098022 seconds
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 15.126556634902954 seconds
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 15.12637448310852 seconds
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 15.12638545036316 seconds
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 15.126460552215576 seconds
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 15.133534669876099 seconds
&nbsp;
10!= 3628800
&nbsp;
Client has finished in 15.127150774002075 seconds
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Podpora rastrových obrázků v&nbsp;balíčku <strong>mcp</strong></h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. MCP server posílající rastrový obrázek</h2>

<pre>
<i>"""MCP server se nástrojem s obrázkem."""</i>
&nbsp;
from PIL import Image as PILImage
from PIL import ImageDraw
&nbsp;
from mcp.server.fastmcp import FastMCP, Image
&nbsp;
<i># konstrukce serveru</i>
mcp = FastMCP("Test")
&nbsp;
&nbsp;
<i>#@mcp.resource("house://", mime_type="image/png")</i>
<u>@mcp.tool()</u>
def <strong>house</strong>() -&gt; Image:
    <i>"""Vrací rastrový obrázek."""</i>
    <i># vytvoření prázdného obrázku</i>
    image = PILImage.new("1", (512, 512))
&nbsp;
    <i># objekt umožňující kreslení do obrázku</i>
    draw = ImageDraw.Draw(image)
&nbsp;
    endpoints = [
        100,
        500,
        400,
        200,
        100,
        200,
        250,
        50,
        400,
        200,
        400,
        500,
        100,
        200,
        100,
        500,
        400,
        500,
    ]
&nbsp;
    draw.line(endpoints, fill=255)
&nbsp;
    return Image(data=image.tobytes(), format="png")
&nbsp;
&nbsp;
<i># přímé spuštění serveru v režimu SSE (Server-Sent Events)</i>
if __name__ == "__main__":
    mcp.run(transport="sse")
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Dekódování obrázku na straně MCP klienta</h2>

<pre>
<i>"""MCP klient, který přečte obrázek."""</i>
&nbsp;
&nbsp;
import base64
&nbsp;
from PIL import Image as PILImage
&nbsp;
from mcp import ClientSession
from mcp.client.sse import sse_client
&nbsp;
&nbsp;
async def <strong>run</strong>():
    <i>"""Realizace klienta."""</i>
    async with sse_client(url="http://localhost:8000/sse") as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
&nbsp;
            data = await session.call_tool("house")
            image = PILImage.frombytes('1', (512,512), base64.b64decode(data.content[0].data))
            print(image)
            image.save("house.png")
&nbsp;
&nbsp;
<i># přímé spuštění klienta</i>
if __name__ == "__main__":
    import asyncio

    asyncio.run(run())
</pre>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Další možnosti nabízené protokolem MCP</h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
Python a balíček <a
href="https://github.com/modelcontextprotocol/python-sdk">mcp</a> byly uloženy
do repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;tabulce zobrazené níže jsou odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>mcp_server_1.py</td><td>jednoduchý MCP server s&nbsp;jediným definovaným zdrojem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_1.py</a></td></tr>
<tr><td> 2</td><td>mcp_server_2.py</td><td>jednoduchý MCP server s&nbsp;jediným definovaným dynamickým zdrojem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_2.py</a></td></tr>
<tr><td> 3</td><td>mcp_server_3.py</td><td>MCP server s&nbsp;dynamickým zdrojem a definicí nástroje (tool)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_3.py</a></td></tr>
<tr><td> 4</td><td>mcp_server_4.py</td><td>MCP server s jediným definovaným dynamickým zdrojem, zápis informací o spuštění</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_4.py</a></td></tr>
<tr><td> 5</td><td>mcp_server_5.py</td><td>MCP server, který se přímo spustí v&nbsp;režimu STDIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_5.py</a></td></tr>
<tr><td> 6</td><td>mcp_server_6.py</td><td>MCP server, který se přímo spustí v&nbsp;režimu SSE</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_6.py</a></td></tr>
<tr><td> 7</td><td>mcp_server_7.py</td><td>MCP server se zdrojem vracejícím strukturovaná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_7.py</a></td></tr>
<tr><td> 8</td><td>mcp_server_8.py</td><td>MCP server se zdrojem vracejícím strukturovaná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_8.py</a></td></tr>
<tr><td> 9</td><td>mcp_server_9.py</td><td>MCP server, který dokáže poslat rastrový obrázek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_9.py</a></td></tr>
<tr><td>10</td><td>mcp_server_A.py</td><td>MCP server, který na požadavky odpovídá se zpožděním</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_A.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>mcp_client_1.py</td><td>MCP klient, který spustí server, se kterým se komunikuje přes STDIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_1.py</a></td></tr>
<tr><td>12</td><td>mcp_client_2.py</td><td>MCP klient, který spustí server, se kterým se komunikuje přes SSE</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_2.py</a></td></tr>
<tr><td>13</td><td>mcp_client_3.py</td><td>MCP klient, který přečte zvolený zdroj</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_3.py</a></td></tr>
<tr><td>14</td><td>mcp_client_4.py</td><td>MCP klient, který přečte zvolený zdroj a získá z&nbsp;něj data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_4.py</a></td></tr>
<tr><td>15</td><td>mcp_client_5.py</td><td>MCP klient, který zavolá vybraný nástroj</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_5.py</a></td></tr>
<tr><td>16</td><td>mcp_client_6.py</td><td>MCP klient, který přečte a zpracuje strukturovaná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_6.py</a></td></tr>
<tr><td>17</td><td>mcp_client_7.py</td><td>MCP klient, který dokáže načíst rastrový obrázek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_7.py</a></td></tr>
<tr><td>18</td><td>mcp_client_8.py</td><td>MCP klient s&nbsp;měřením času odpovědí MCP serveru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_8.py</a></td></tr>
<tr><td>19</td><td>mcp_client_9.py</td><td>MCP klient s&nbsp;měřením času odpovědí MCP serveru a více asynchronními voláními</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_9.py</a></td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Příloha: články o knihovně PIL/Pillow</h2>

<p>Dnes jsme se na okraj zmínili o knihovně PIL resp.&nbsp;Pillow, která
v&nbsp;Pythonu slouží pro manipulaci s&nbsp;rastrovými obrázky, a to včetně
načítání a ukládání těchto obrázků do souborů ve vybraných formátech (PNG, GIF,
JPEG, PBM atd.), ale i pro kreslení jednoduchých 2D tvarů. Možnostmi
poskytovanými touto knihovnou jsem se zabýval v&nbsp;následující dvojici
článků:</p>

<ol>

<li>Užitečné knihovny a moduly pro Python: kreslení a pokročilé manipulace s&nbsp;obrázky v&nbsp;knihovně Pillow<br />
<a href="https://mojefedora.cz/uzitecne-knihovny-a-moduly-pro-python-kresleni-a-pokrocile-manipulace-s-obrazky-v-knihovne-pillow/">https://mojefedora.cz/uzitecne-knihovny-a-moduly-pro-python-kresleni-a-pokrocile-manipulace-s-obrazky-v-knihovne-pillow/</a>
</li>

<li>Užitečné knihovny a moduly pro Python: knihovna Pillow určená pro manipulaci s&nbsp;rastrovými obrázky<br />
<a href="https://mojefedora.cz/uzitecne-knihovny-a-moduly-pro-python-knihovna-pillow-urcena-pro-manipulaci-s-rastrovymi-obrazky/">https://mojefedora.cz/uzitecne-knihovny-a-moduly-pro-python-knihovna-pillow-urcena-pro-manipulaci-s-rastrovymi-obrazky/</a>
</li>

</ol>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>MCP Python SDK<br />
<a href="https://github.com/modelcontextprotocol/python-sdk?tab=readme-ov-file#running-your-server">https://github.com/modelcontextprotocol/python-sdk?tab=readme-ov-file#running-your-server</a>
</li>

<li>MCP protocol: Resources<br />
<a href="https://modelcontextprotocol.info/docs/concepts/resources/">https://modelcontextprotocol.info/docs/concepts/resources/</a>
</li>

<li>Example Servers<br />
<a href="https://modelcontextprotocol.io/examples">https://modelcontextprotocol.io/examples</a>
</li>

<li>Core architecture<br />
<a href="https://modelcontextprotocol.io/docs/concepts/architecture">https://modelcontextprotocol.io/docs/concepts/architecture</a>
</li>

<li>Unleashing the Power of Model Context Protocol (MCP): A Game-Changer in AI Integration<br />
<a href="https://techcommunity.microsoft.com/blog/educatordeveloperblog/unleashing-the-power-of-model-context-protocol-mcp-a-game-changer-in-ai-integrat/4397564">https://techcommunity.microsoft.com/blog/educatordeveloperblog/unleashing-the-power-of-model-context-protocol-mcp-a-game-changer-in-ai-integrat/4397564</a>
</li>

<li>MPC inspector<br />
<a href="https://github.com/modelcontextprotocol/inspector">https://github.com/modelcontextprotocol/inspector</a>
</li>

<li>Model Context Protocol servers<br />
<a href="https://github.com/modelcontextprotocol/servers">https://github.com/modelcontextprotocol/servers</a>
</li>

<li>python-sdk na GitHubu<br />
<a href="https://github.com/modelcontextprotocol/python-sdk">https://github.com/modelcontextprotocol/python-sdk</a>
</li>

<li>typescript-sdk na GitHubu<br />
<a href="https://github.com/modelcontextprotocol/typescript-sdk">https://github.com/modelcontextprotocol/typescript-sdk</a>
</li>

<li>mcp-golang<br />
<a href="https://github.com/metoro-io/mcp-golang">https://github.com/metoro-io/mcp-golang</a>
</li>

<li>MCP server: A step-by-step guide to building from scratch<br />
<a href="https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/">https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/</a>
</li>

<li>How to Build an MCP Server Fast: A Step-by-Step Tutorial<br />
<a href="https://medium.com/@eugenesh4work/how-to-build-an-mcp-server-fast-a-step-by-step-tutorial-e09faa5f7e3b">https://medium.com/@eugenesh4work/how-to-build-an-mcp-server-fast-a-step-by-step-tutorial-e09faa5f7e3b</a>
</li>

<li>Step-by-Step Guide: Building an MCP Server using Python-SDK, AlphaVantage &amp; Claude AI<br />
<a href="https://medium.com/@syed_hasan/step-by-step-guide-building-an-mcp-server-using-python-sdk-alphavantage-claude-ai-7a2bfb0c3096">https://medium.com/@syed_hasan/step-by-step-guide-building-an-mcp-server-using-python-sdk-alphavantage-claude-ai-7a2bfb0c3096</a>
</li>

<li>RFC 6570: URI Template<br />
<a href="https://datatracker.ietf.org/doc/html/rfc6570">https://datatracker.ietf.org/doc/html/rfc6570</a>
</li>

<li>Return resources as structured JSON instead of text?<br />
<a href="https://github.com/modelcontextprotocol/python-sdk/issues/279">https://github.com/modelcontextprotocol/python-sdk/issues/279</a>
</li>

<li>Python standard library: pprint<br />
<a href="https://docs.python.org/3/library/pprint.html">https://docs.python.org/3/library/pprint.html</a>
</li>

<li>Python standard library: json — JSON encoder and decoder¶<br />
<a href="https://docs.python.org/3/library/json.html">https://docs.python.org/3/library/json.html</a>
</li>

<li>Calling MCP Servers the Hard Way<br />
<a href="https://deadprogrammersociety.com/2025/03/calling-mcp-servers-the-hard-way.html">https://deadprogrammersociety.com/2025/03/calling-mcp-servers-the-hard-way.html</a>
</li>

<li>mcptools<br />
<a href="https://github.com/f/mcptools">https://github.com/f/mcptools</a>
</li>

<li>Server-sent events<br />
<a href="https://en.wikipedia.org/wiki/Server-sent_events">https://en.wikipedia.org/wiki/Server-sent_events</a>
</li>

<li>Model context protocol (MCP)<br />
<a href="https://openai.github.io/openai-agents-python/mcp/">https://openai.github.io/openai-agents-python/mcp/</a>
</li>

<li>A Clear Intro to MCP (Model Context Protocol) with Code Examples<br />
<a href="https://towardsdatascience.com/clear-intro-to-mcp/">https://towardsdatascience.com/clear-intro-to-mcp/</a>
</li>

<li>A Developer's Guide to the MCP<br />
<a href="https://www.getzep.com/ai-agents/developer-guide-to-mcp">https://www.getzep.com/ai-agents/developer-guide-to-mcp</a>
</li>

<li>MCP: Flash in the Pan or Future Standard?<br />
<a href="https://blog.langchain.dev/mcp-fad-or-fixture/">https://blog.langchain.dev/mcp-fad-or-fixture/</a>
</li>

<li>MCP yeah you know me: A complete guide and review of Model Context Protocol (MCP)<br />
<a href="https://ebi.ai/blog/model-context-protocol-guide/">https://ebi.ai/blog/model-context-protocol-guide/</a>
</li>

<li>Pillow documentation<br />
<a href="https://pillow.readthedocs.io/en/stable/handbook/tutorial.html">https://pillow.readthedocs.io/en/stable/handbook/tutorial.html</a>
</li>

<li>Pillow: Python Imaging Library (Fork)<br />
<a href="https://pypi.org/project/pillow/">https://pypi.org/project/pillow/</a>
</li>

<li>How to use Pillow, a fork of PIL<br />
<a href="https://www.pythonforbeginners.com/gui/how-to-use-pillow">https://www.pythonforbeginners.com/gui/how-to-use-pillow</a>
</li>

<li>PNG is Not GIF<br />
<a href="https://www.root.cz/clanky/png-is-not-gif/">https://www.root.cz/clanky/png-is-not-gif/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

