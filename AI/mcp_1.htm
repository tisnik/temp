<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">3. Instalace balíčku <strong>mcp</strong></a></p>
<p><a href="#k04">4. Instalace nástrojů nutných pro spuštění MCP Inspectoru</a></p>
<p><a href="#k05">5. Implementace jednoduchého MCP serveru s&nbsp;jediným definovaným zdrojem</a></p>
<p><a href="#k06">6. Spuštění serveru s&nbsp;jeho otestováním pomocí MCP Inspectoru</a></p>
<p><a href="#k07">*** 7. MCP server s&nbsp;definovaným dynamickým zdrojem (<i>resource template</i>)</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace balíčku <strong>mcp</strong></h2>

<p>MCP je možné využívat mnoha různými způsoby. Je například podporován
některými frameworky určenými pro tvorbu aplikací založených na velkých
jazykových modelech atd. Ovšem pro začátek je dobré zjistit, jaké jsou vlastně
základní vlastnosti MCP a z&nbsp;tohoto důvodu si naprogramujeme vlastní MCP
server (resp.&nbsp;hned několik jeho variant) a taktéž jednoduché MCP klienty.
V&nbsp;současnosti je možné aplikace používající MCP naprogramovat v&nbsp;mnoha
jazycích; my se pro jednoduchost zaměříme na Python. Pro ekosystém Pythonu
vznikl balíček nazvaný příhodně <strong>mcp</strong>, který si nainstalujeme
příkazem:</p>

<pre>
$ <strong>pip install --user mcp</strong>
</pre>

<p>Resp.&nbsp;na systémech rozlišujících Python 2 a Python 3:</p>

<pre>
$ <strong>pip3 install --user mcp</strong>
</pre>

<p>Balíček <strong>mcp</strong> má sice několik závislostí (například celý
Pydantic a Uvicorn), ovšem i tak by měla být jeho instalace prakticky
okamžitá:</p>

<pre>
Collecting mcp
  Downloading mcp-1.5.0-py3-none-any.whl.metadata (20 kB)
Requirement already satisfied: anyio&gt;4.5 in /home/ptisnovs/.local/lib/python3.12/site-packages (from mcp) (4.6.2.post1)
Collecting httpx-sse&gt;0.4 (from mcp)
  Downloading httpx_sse-0.4.0-py3-none-any.whl.metadata (9.0 kB)
Requirement already satisfied: httpx&gt;0.27 in /home/ptisnovs/.local/lib/python3.12/site-packages (from mcp) (0.28.0)
Collecting pydantic-settings&gt;2.5.2 (from mcp)
  Downloading pydantic_settings-2.8.1-py3-none-any.whl.metadata (3.5 kB)
Requirement already satisfied: pydantic&lt;3.0.0,&gt;2.7.2 in /home/ptisnovs/.local/lib/python3.12/site-packages (from mcp) (2.10.5)
Collecting sse-starlette&gt;1.6.1 (from mcp)
  Downloading sse_starlette-2.2.1-py3-none-any.whl.metadata (7.8 kB)
Requirement already satisfied: starlette&gt;0.27 in /home/ptisnovs/.local/lib/python3.12/site-packages (from mcp) (0.41.3)
Requirement already satisfied: uvicorn&gt;0.23.1 in /home/ptisnovs/.local/lib/python3.12/site-packages (from mcp) (0.34.0)
Requirement already satisfied: idna&gt;2.8 in /usr/lib/python3.12/site-packages (from anyio&gt;4.5-&gt;mcp) (3.7)
Requirement already satisfied: sniffio&gt;1.1 in /home/ptisnovs/.local/lib/python3.12/site-packages (from anyio&gt;4.5-&gt;mcp) (1.3.1)
Requirement already satisfied: certifi in /home/ptisnovs/.local/lib/python3.12/site-packages (from httpx&gt;0.27-&gt;mcp) (2024.8.30)
Requirement already satisfied: httpcore==1.* in /home/ptisnovs/.local/lib/python3.12/site-packages (from httpx&gt;0.27-&gt;mcp) (1.0.7)
Requirement already satisfied: h11&lt;0.15,&gt;0.13 in /home/ptisnovs/.local/lib/python3.12/site-packages (from httpcore==1.*-&gt;httpx&gt;0.27-&gt;mcp) (0.14.0)
Requirement already satisfied: annotated-types&gt;0.6.0 in /home/ptisnovs/.local/lib/python3.12/site-packages (from pydantic&lt;3.0.0,&gt;2.7.2-&gt;mcp) (0.7.0)
Requirement already satisfied: pydantic-core==2.27.2 in /home/ptisnovs/.local/lib/python3.12/site-packages (from pydantic&lt;3.0.0,&gt;2.7.2-&gt;mcp) (2.27.2)
Requirement already satisfied: typing-extensions&gt;4.12.2 in /usr/lib/python3.12/site-packages (from pydantic&lt;3.0.0,&gt;2.7.2-&gt;mcp) (4.12.2)
Requirement already satisfied: python-dotenv&gt;0.21.0 in /home/ptisnovs/.local/lib/python3.12/site-packages (from pydantic-settings&gt;2.5.2-&gt;mcp) (1.0.1)
Collecting anyio&gt;4.5 (from mcp)
  Downloading anyio-4.9.0-py3-none-any.whl.metadata (4.7 kB)
Requirement already satisfied: click&gt;7.0 in /home/ptisnovs/.local/lib/python3.12/site-packages (from uvicorn&gt;0.23.1-&gt;mcp) (8.1.8)
Downloading mcp-1.5.0-py3-none-any.whl (73 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 73.7/73.7 kB 1.6 MB/s eta 0:00:00
Downloading httpx_sse-0.4.0-py3-none-any.whl (7.8 kB)
Downloading pydantic_settings-2.8.1-py3-none-any.whl (30 kB)
Downloading sse_starlette-2.2.1-py3-none-any.whl (10 kB)
Downloading anyio-4.9.0-py3-none-any.whl (100 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100.9/100.9 kB 4.4 MB/s eta 0:00:00
Installing collected packages: httpx-sse, anyio, sse-starlette, pydantic-settings, mcp
  Attempting uninstall: anyio
    Found existing installation: anyio 4.6.2.post1
    Uninstalling anyio-4.6.2.post1:
      Successfully uninstalled anyio-4.6.2.post1
Successfully installed anyio-4.9.0 httpx-sse-0.4.0 mcp-1.5.0 pydantic-settings-2.8.1 sse-starlette-2.2.1
</pre>

<p>Po instalaci by měl být k&nbsp;dispozici i příkaz <strong>mcp</strong>,
jehož existenci a dostupnost si snadno ověříme:</p>

<pre>
 Usage: mcp [OPTIONS] COMMAND [ARGS]...
&nbsp;
 MCP development tools
&nbsp;
╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ --help          Show this message and exit.                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
╭─ Commands ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ version   Show the MCP version.                                                                                                      │
│ dev       Run a MCP server with the MCP Inspector.                                                                                   │
│ run       Run a MCP server.                                                                                                          │
│ install   Install a MCP server in the Claude desktop app.                                                                            │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že není
<strong>mcp</strong> dostupný, je možné, že adresář
<strong>~/.local/bin</strong> není přidán do proměnné prostředí
<strong>PATH</strong>.</div></p>

<p>Taktéž si můžeme přímo v&nbsp;interaktivní smyčce Pythonu naimportovat
některou třídu z&nbsp;tohoto balíčku (například <strong>FastMCP</strong>) a
zobrazit si její nápovědu:</p>

<pre>
$ <strong>python</strong>
&nbsp;
Python 3.12.9 (main, Feb  4 2025, 00:00:00) [GCC 14.2.1 20240912 (Red Hat 14.2.1-3)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from mcp.server.fastmcp import FastMCP
&gt;&gt;&gt; help(FastMCP)
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
Help on class FastMCP in module mcp.server.fastmcp.server:

class FastMCP(builtins.object)
 |  FastMCP(name: 'str | None' = None, instructions: 'str | None' = None, **settings: 'Any')
 |
 |  Methods defined here:
 |
 |  __init__(self, name: 'str | None' = None, instructions: 'str | None' = None, **settings: 'Any')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  add_prompt(self, prompt: 'Prompt') -&gt; 'None'
 |      Add a prompt to the server.
 |
 |      Args:
 |          prompt: A Prompt instance to add
 |
 |  add_resource(self, resource: 'Resource') -&gt; 'None'
 |      Add a resource to the server.
 |
 |      Args:
 |          resource: A Resource instance to add
 |
 ...
 ...
 ...
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace nástrojů nutných pro spuštění MCP Inspectoru</h2>

<p>Balíček <strong>mcp</strong>, který jsme právě nainstalovali, nabízí možnost
využití takzvaného <i>MCP Inspectoru</i>, což je aplikace s&nbsp;webovým
grafickým uživatelským rozhraním, kterou lze použít pro otestování MCP serverů.
Tato aplikace vyžaduje instalaci <strong>npm</strong> a
<strong>node.js</strong>. Distribuce Linuxu většinou tyto nástroje mají ve
svých repositářích balíčků (i když možná ne nejnovější verze, což nám ale
nemusí vadit), takže jejich instalace je jednoduchá. Pro distribuce založené na
RPM lze použít například:</p>

<pre>
$ <strong>dnf install npm</strong>
&nbsp;
$ <strong>dnf install nodejs</strong>
</pre>

<p>Pro jistotu si otestujeme, jestli jsou tyto nástroje skutečně
nainstalovány:</p>

<pre>
$ <strong>npm --version</strong>
10.8.2
&nbsp;
&nbsp;
$ <strong>node --version</strong>
v20.18.2
</pre>

<p>V&nbsp;případě, že se vypsaly verze (mohou být i nepatrně starší) jak
<strong>npm</strong>, tak i <strong>node.js</strong>, mělo by být možné <i>MCP
Inspector</i> použít.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Implementace jednoduchého MCP serveru s&nbsp;jediným definovaným zdrojem</h2>

<p>Pokusme se nyní naprogramovat nějaký velmi jednoduchý MCP server,
tj.&nbsp;službu, která dokáže komunikovat s&nbsp;klienty právě přes protokol
MCP. V&nbsp;tomto serveru je definován pouze jediný zdroj (<i>resource</i>)
nazvaný <strong>pozdrav</strong>, jenž je implementován pomocí běžné
Pythonovské funkce s&nbsp;dekorátorem. Jedná se o zdroj, který vrací konstantní
řetězec. Samotný zdroj je popsán dekorátorem <strong>@mcp.resource</strong> a
typ hodnoty, kterou zdroj vrací, je odvozena na základě typové informace (jméno
typu za šipkou definuje typ návratové hodnoty funkce):</p>

<pre>
<i>"""Jednoduchý MCP server s jediným definovaným zdrojem."""</i>
&nbsp;
from mcp.server.fastmcp import FastMCP
&nbsp;
<i># konstrukce serveru</i>
mcp = FastMCP("Test")
&nbsp;
&nbsp;
<u>@mcp.resource("pozdrav://")</u>
def <strong>pozdrav</strong>() -&gt; str:
    <i>"""Odpověď s pozdravem."""</i>
    return f"Hello, dear client"
</pre>

<p><div class="rs-tip-major">Poznámka: připomeňme si, že dekorátory jsou
interně implementovány jako funkce vyššího řádu, které &bdquo;obalují&ldquo;
funkci, před kterou jsou zapsány &ndash; typicky před volání a za volání funkce
přidávají nějaký další kód popř.&nbsp;zajišťují vytvoření uzávěru
(<i>closure</i>). Pro potřeby tohoto článku nám však bude stačit jen základní
znalosti o tom, jak se dekorátory zapisují.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Spuštění serveru s&nbsp;jeho otestováním pomocí MCP Inspectoru</h2>

<p>MCP server, jehož zdrojový kód jsme si ukázali <a
href="#k05">v&nbsp;předchozí kapitole</a>, je možné spustit několika možnými
způsoby. Nejjednodušší je použití příkazu <strong>mcp</strong>, kterému se
předá jméno zdrojového kódu s&nbsp;implementací serveru a popř.&nbsp;i způsob
transportu (tedy konkrétního režimu komunikace mezi klientem a serverem). Ovšem
my prozatím nemáme naprogramován žádný klient, takže je nutné využít nějaký
jiný nástroj pro otestování našeho serveru. Takový nástroj ve skutečnosti
existuje a jmenuje se <i>MCP Inspector</i> (ostatně jsme instalovali jeho
závislosti). Pro otestování našeho serveru spustíme následující příkaz (ten
očekává, že jméno zdrojového kódu s&nbsp;implementací MCP serveru je
<strong>mcp_server_1.py</strong>):</p>

<pre>
$ <strong>mcp dev mcp_server_1.py</strong>
</pre>

<p>Při prvním spuštění (později již ne) bude <strong>mcp</strong> potřebovat
doinstalovat jeden npm balíček, takže se zeptá, zda může tuto operaci spustit.
Odpovíme, že ano:</p>

<pre>
Need to install the following packages:
@modelcontextprotocol/inspector@0.7.0
Ok to proceed? (y) y
</pre>

<p>Dále se vypíše informace o tom, na které adrese (včetně portu) je MCP
inspektor dostupný:</p>

<pre>
Starting MCP inspector...
Proxy server listening on port 3000
&nbsp;
🔍 MCP Inspector is up and running at http://localhost:5173 🚀
</pre>

<p>Ve webovém prohlížeči je nutné přejít na výše vypsanou adresu <a
href="http://localhost:5173">http://localhost:5173</a>. Měla by se zobrazit
stránka, která v&nbsp;levé části nabízí způsob připojení k&nbsp;serveru.
Vyplňte nyní údaje tak, jak je to zobrazeno na screenshotu:</p>

*** image ***
<p><i>Obrázek 1: Takto může vypadat vyplněný dialog pro připojení k&nbsp;MCP serveru.</i></p>

<p>Po stisku tlačítka <strong>Connect</strong> by se měl server znovu spustit
(to je poněkud nešťastné) a MCP Inspector by měl začít se serverem komunikovat
přes standardní vstup a výstup (STDIO).</p>

<p>Dále v&nbsp;části <i>Resources</i> stiskněte tlačítko <strong>List
Resources</strong>. Měl by se zobrazit seznam zdrojů, který obsahuje pouze
jedinou položku &bdquo;pozdrav://&ldquo;, což je skutečně název našeho zdroje.
Pokud tento zdroj vyberete, provede se komunikace s&nbsp;MCP serverem a měla by
se vrátit odpověď v&nbsp;JSON formátu:</p>

<pre>
{
  "contents": [
    {
      "uri": "pozdrav://",
      "mimeType": "text/plain",
      "text": "Hello, dear client"
    }
  ]
}
</pre>

<p>Tím jsme ověřili nejenom to, že MCP server nabízí příslušný zdroj, ale že je
možné s&nbsp;ním komunikovat s&nbsp;využitím MCP.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. MCP server s&nbsp;definovaným dynamickým zdrojem (<i>resource template</i>)</h2>

<p>Druhá varianta MCP serveru bude nepatrně složitější, protože je v&nbsp;ní definován dynamický zdroj (původní název <i>resource template</i> ovšem může být poněkud matoucí). Jedná se o zdroj, který má ve svém názvu měnitelnou část <strong>name</strong>. Výsledkem čtení tohoto zdroje bude řetězec ve formátu &bdquo;Hello, {name}&ldquo;, ve kterém se za &bdquo;{name}&ldquo; doplní identifikátor ze jména zdroje. Teoreticky tedy můžeme tímto způsobem předávat MCP serveru parametry a získávat odpovědi na základě těchto parametrů, i když z&nbsp;hlediska sémantiky by bylo vhodnější využít spíše nástroje (<i>tools</i>), s&nbsp;nimž se seznámíme v&nbsp;dalších kapitolách.</p>

<pre>
<i>"""Jednoduchý MCP server s jediným definovaným dynamickým zdrojem."""</i>
&nbsp;
from mcp.server.fastmcp import FastMCP
&nbsp;
<i># konstrukce serveru</i>
mcp = FastMCP("Test")
&nbsp;
&nbsp;
<u>@mcp.resource("pozdrav://{name}")</u>
def <strong>pozdrav</strong>(name: str) -&gt; str:
    <i>"""Odpověď s osobním pozdravem."""</i>
    return f"Hello, {name}"
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



{
  "contents": [
    {
      "uri": "pozdrav://Pavel",
      "mimeType": "text/plain",
      "text": "Hello, Pavel"
    }
  ]
}
<pre>
"""MCP server s dynamickým zdrojem a definicí nástroje (tool)."""

from mcp.server.fastmcp import FastMCP

# konstrukce serveru
mcp = FastMCP("Test")


@mcp.tool()
def factorial(n: int) -> int:
    """Výpočet faktoriálu ve smyčce."""
    f = 1
    for x in range(1, n + 1):
        f *= x
    return f


@mcp.resource("pozdrav://{name}")
def pozdrav(name: str) -> str:
    """Odpověď s osobním pozdravem."""
    return f"Hello, {name}"
</pre>

<pre>
"""Jednoduchý MCP server s jediným definovaným dynamickým zdrojem."""

import os
from mcp.server.fastmcp import FastMCP
from datetime import datetime

# konstrukce serveru
mcp = FastMCP("Test")

pid = os.getpid()

# při každém spuštění serveru se vytvoří nový soubor
with open(f"{pid}.txt", "w") as fout:
    fout.write(str(datetime.now()))


@mcp.resource("pozdrav://")
def pozdrav() -> str:
    """Odpověď s pozdravem."""
    return f"Hello, dear client"
</pre>

<pre>
"""MCP server se zdrojem,  dynamickým zdrojem a definicí nástroje (tool)."""

from mcp.server.fastmcp import FastMCP

# konstrukce serveru
mcp = FastMCP("Test")


@mcp.tool()
def factorial(n: int) -> int:
    """Výpočet faktoriálu ve smyčce."""
    f = 1
    for x in range(1, n + 1):
        f *= x
    return f


@mcp.resource("pozdrav://")
def pozdrav1() -> str:
    """Odpověď s pozdravem."""
    return f"Hello, dear client"


@mcp.resource("pozdrav://{name}")
def pozdrav2(name: str) -> str:
    """Odpověď s osobním pozdravem."""
    return f"Hello, {name}"


# přímé spuštění serveru v režimu STDIO
if __name__ == "__main__":
    mcp.run()
</pre>

<pre>
"""MCP server se zdrojem,  dynamickým zdrojem a definicí nástroje (tool)."""

from mcp.server.fastmcp import FastMCP

# konstrukce serveru
mcp = FastMCP("Test")


@mcp.tool()
def factorial(n: int) -> int:
    """Výpočet faktoriálu ve smyčce."""
    f = 1
    for x in range(1, n + 1):
        f *= x
    return f


@mcp.resource("pozdrav://")
def pozdrav1() -> str:
    """Odpověď s pozdravem."""
    return f"Hello, dear client"


@mcp.resource("pozdrav://{name}")
def pozdrav2(name: str) -> str:
    """Odpověď s osobním pozdravem."""
    return f"Hello, {name}"


# přímé spuštění serveru v režimu SSE (Server-Sent Events)
if __name__ == "__main__":
    mcp.run(transport="sse")
</pre>

<pre>
"""MCP klient, který spustí server, se kterým se komunikuje přes STDIO."""

from mcp import ClientSession, StdioServerParameters, types
from mcp.client.stdio import stdio_client

# parametry pro spuštění MCP serveru
server_params = StdioServerParameters(
    command="python",  # spustí se tento příkaz
    args=["mcp_server_5.py"],  # a předají se mu následující parametry
    env=None,  # lze definovat i proměnné prostředí
)


async def run():
    """Realizace klienta."""
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            prompts = await session.list_prompts()
            print(prompts)

            resources = await session.list_resources()
            print(resources)

            templates = await session.list_resource_templates()
            print(templates)

            tools = await session.list_tools()
            print(tools)


# přímé spuštění klienta
if __name__ == "__main__":
    import asyncio

    asyncio.run(run())
</pre>

<pre>
"""MCP klient, který spustí server, se kterým se komunikuje přes SSE."""

from mcp import ClientSession, types
from mcp.client.sse import sse_client


async def run():
    """Realizace klienta."""
    async with sse_client(url="http://localhost:8000/sse") as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            prompts = await session.list_prompts()
            print(prompts)

            resources = await session.list_resources()
            print(resources)

            templates = await session.list_resource_templates()
            print(templates)

            tools = await session.list_tools()
            print(tools)


# přímé spuštění klienta
if __name__ == "__main__":
    import asyncio

    asyncio.run(run())
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
Python a balíček <a
href="https://github.com/modelcontextprotocol/python-sdk">mcp</a> byly uloženy
do repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;tabulce zobrazené níže jsou odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>mcp_server_1.py</td><td>jednoduchý MCP server s&nbsp;jediným definovaným zdrojem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_1.py</a></td></tr>
<tr><td> 2</td><td>mcp_server_2.py</td><td>jednoduchý MCP server s&nbsp;jediným definovaným dynamickým zdrojem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_2.py</a></td></tr>
<tr><td> 3</td><td>mcp_server_3.py</td><td>MCP server s&nbsp;dynamickým zdrojem a definicí nástroje (tool)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_3.py</a></td></tr>
<tr><td> 4</td><td>mcp_server_4.py</td><td>MCP server s jediným definovaným dynamickým zdrojem, zápis informací o spuštění</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_4.py</a></td></tr>
<tr><td> 5</td><td>mcp_server_5.py</td><td>MCP server, který se přímo spustí v&nbsp;režimu STDIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_5.py</a></td></tr>
<tr><td> 6</td><td>mcp_server_6.py</td><td>MCP server, který se přímo spustí v&nbsp;režimu SSE</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>mcp_client_1.py</td><td>MCP klient, který spustí server, se kterým se komunikuje přes STDIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_1.py</a></td></tr>
<tr><td> 8</td><td>mcp_client_2.py</td><td>MCP klient, který spustí server, se kterým se komunikuje přes SSE</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_2.py</a></td></tr>
<tr><td> 9</td><td>mcp_client_3.py</td><td>MCP klient, který přečte zvolený zdroj</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_3.py</a></td></tr>
<tr><td>10</td><td>mcp_client_4.py</td><td>MCP klient, který přečte zvolený zdroj a získá z&nbsp;něj data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_4.py</a></td></tr>
<tr><td>11</td><td>mcp_client_5.py</td><td>MCP klient, který zavolá vybraný nástroj</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_5.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>MCP Python SDK<br />
<a href="https://github.com/modelcontextprotocol/python-sdk?tab=readme-ov-file#running-your-server">https://github.com/modelcontextprotocol/python-sdk?tab=readme-ov-file#running-your-server</a>
</li>

<li>MCP protocol: Resources<br />
<a href="https://modelcontextprotocol.info/docs/concepts/resources/">https://modelcontextprotocol.info/docs/concepts/resources/</a>
</li>

<li>Example Servers<br />
<a href="https://modelcontextprotocol.io/examples">https://modelcontextprotocol.io/examples</a>
</li>

<li>Core architecture<br />
<a href="https://modelcontextprotocol.io/docs/concepts/architecture">https://modelcontextprotocol.io/docs/concepts/architecture</a>
</li>

<li>Unleashing the Power of Model Context Protocol (MCP): A Game-Changer in AI Integration<br />
<a href="https://techcommunity.microsoft.com/blog/educatordeveloperblog/unleashing-the-power-of-model-context-protocol-mcp-a-game-changer-in-ai-integrat/4397564">https://techcommunity.microsoft.com/blog/educatordeveloperblog/unleashing-the-power-of-model-context-protocol-mcp-a-game-changer-in-ai-integrat/4397564</a>
</li>

<li>MPC inspector<br />
<a href="https://github.com/modelcontextprotocol/inspector">https://github.com/modelcontextprotocol/inspector</a>
</li>

<li>Model Context Protocol servers<br />
<a href="https://github.com/modelcontextprotocol/servers">https://github.com/modelcontextprotocol/servers</a>
</li>

<li>python-sdk na GitHubu<br />
<a href="https://github.com/modelcontextprotocol/python-sdk">https://github.com/modelcontextprotocol/python-sdk</a>
</li>

<li>typescript-sdk na GitHubu<br />
<a href="https://github.com/modelcontextprotocol/typescript-sdk">https://github.com/modelcontextprotocol/typescript-sdk</a>
</li>

<li>mcp-golang<br />
<a href="https://github.com/metoro-io/mcp-golang">https://github.com/metoro-io/mcp-golang</a>
</li>

<li>MCP server: A step-by-step guide to building from scratch<br />
<a href="https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/">https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/</a>
</li>

<li>How to Build an MCP Server Fast: A Step-by-Step Tutorial<br />
<a href="https://medium.com/@eugenesh4work/how-to-build-an-mcp-server-fast-a-step-by-step-tutorial-e09faa5f7e3b">https://medium.com/@eugenesh4work/how-to-build-an-mcp-server-fast-a-step-by-step-tutorial-e09faa5f7e3b</a>
</li>

<li>Step-by-Step Guide: Building an MCP Server using Python-SDK, AlphaVantage &amp; Claude AI<br />
<a href="https://medium.com/@syed_hasan/step-by-step-guide-building-an-mcp-server-using-python-sdk-alphavantage-claude-ai-7a2bfb0c3096">https://medium.com/@syed_hasan/step-by-step-guide-building-an-mcp-server-using-python-sdk-alphavantage-claude-ai-7a2bfb0c3096</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

