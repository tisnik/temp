<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. Instalace balíčku <strong>faiss</strong></a></p>
<p><a href="#k05">*** 5. Řešený problém: výpočet vzdálenosti k&nbsp;zadanému bodu v&nbsp;rovině</a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. Rychlost vyhledání nejbližších bodů</a></p>
<p><a href="#k14">*** 14. Jednoduchý benchmark</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>V&nbsp;současnosti můžeme sledovat poměrně výrazné a stále častější nasazování vektorových databází. Jedná se (většinou) o specializované databáze, které umožňují ukládat vektory numerických hodnot a především efektivně vyhledávat vektory podle jejich podobnosti (například se zadaným vzorem), přičemž podobností může být myšlena například vzdálenost koncových bodů vektorů v&nbsp;Eukleidovském prostoru, kosinus úhlu mezi vektory, výsledek skalárního součinu atd. Tyto operace se používají v&nbsp;mnoha oblastech, například při rozpoznávání a zpracování přirozeného jazyka (NLP), při rozpoznávání obrázků, rozpoznávání hlasů, detekci anomálií, ale i (a to zejména) v&nbsp;souvislosti s&nbsp;velkými jazykovými modely (k&nbsp;tomuto tématu se ještě vrátíme v&nbsp;samostatném článku).</p>

<p><a href="https://www.root.cz/clanky/pgvector-vektorova-databaze-postavena-na-postgresu/">pgvector: vektorová databáze postavená na Postgresu</a></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace balíčku <strong>faiss</strong></h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
Help on package faiss:
&nbsp;
NAME
    faiss
&nbsp;
DESCRIPTION
    # Copyright (c) Facebook, Inc. and its affiliates.
    #
    # This source code is licensed under the MIT license found in the
    # LICENSE file in the root directory of this source tree.
&nbsp;
PACKAGE CONTENTS
    _swigfaiss
    _swigfaiss_avx2
    _swigfaiss_avx512
    array_conversions
    class_wrappers
    contrib (package)
    extra_wrappers
    gpu_wrappers
    loader
    setup
    swigfaiss
    swigfaiss_avx2
    swigfaiss_avx512
&nbsp;
CLASSES
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Řešený problém: výpočet vzdálenosti k&nbsp;zadanému bodu v&nbsp;rovině</h2>

<p></p>

<pre>
                                       │ y
                                       │
                                       │
                                       │
                                       │                [5,5]
                     o       o         │          o   o   o
                                       │          o   o   o
                         o             │          o   o   o
                      [-4, 3]          │
                                       │
─────────────────────────────────────[0,0]──────────────────────────────────────
                                       │                                       x
                                       │              o
                                       │
                                       │          o       o
                                       │                [5,-5]
                                       │
                                       │
                                       │
                                       │
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<pre>
import numpy as np

<i># x-ove souradnice bodu v rovine</i>
x = [-5, -4, -3,    3,  4,  5,   3, 3, 3,  4, 4, 4,  5, 5, 5]

<i># y-ove souradnice bodu v rovine</i>
y = [ 5,  3,  5,   -5, -3, -5,   3, 4, 5,  3, 4, 5,  3, 4, 5]

<i># konstrukce 2D matice, v niz kazdy radek obsahuje souradnice jednoho bodu v</i>
<i># rovine</i>
points = np.column_stack((x,y)).astype("float32")
print(points)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
import faiss
import numpy as np

<i># x-ove souradnice bodu v rovine</i>
x = [-5, -4, -3,    3,  4,  5,   3, 3, 3,  4, 4, 4,  5, 5, 5]

<i># y-ove souradnice bodu v rovine</i>
y = [ 5,  3,  5,   -5, -3, -5,   3, 4, 5,  3, 4, 5,  3, 4, 5]

<i># konstrukce 2D matice, v niz kazdy radek obsahuje souradnice jednoho bodu v</i>
<i># rovine</i>
points = np.column_stack((x,y)).astype("float32")
print(points)

<i># konstrukce indexu pro vyhledavani na zaklade vzdalenosti</i>
index = faiss.IndexFlatL2(2)
index.add(points)

print()
print("Dimension(s):         ", index.d)
print("Total values in index:", index.ntotal)
print("Is index trained:     ", index.is_trained)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
import faiss
import numpy as np

<i># x-ove souradnice bodu v rovine</i>
x = [-5, -4, -3,    3,  4,  5,   3, 3, 3,  4, 4, 4,  5, 5, 5]

<i># y-ove souradnice bodu v rovine</i>
y = [ 5,  3,  5,   -5, -3, -5,   3, 4, 5,  3, 4, 5,  3, 4, 5]

<i># konstrukce 2D matice, v niz kazdy radek obsahuje souradnice jednoho bodu v</i>
<i># rovine</i>
points = np.column_stack((x,y)).astype("float32")
print(points)

<i># konstrukce indexu pro vyhledavani na zaklade vzdalenosti</i>
index = faiss.IndexFlatL2(2)
index.add(points)

print()
print("Dimension(s):         ", index.d)
print("Total values in index:", index.ntotal)
print("Is index trained:     ", index.is_trained)

<i># vektor, ke kteremu budeme pocitat vzdalenost</i>
query_vector = np.array([[3, 3]]).astype("float32")
print(query_vector)

<i># pocet nejblizsich bodu</i>
k = len(x)
distances, indices = index.search(query_vector, k)

<i># tisk vysledku</i>
print("Nearest neighbors:")
print("neighbour  distance  index")
print("--------------------------")
for i in range(k):
    print(f"{i+1:3}      {distances[0][i]:5}       {indices[0][i]:2}")
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
import faiss
import numpy as np

<i># x-ove souradnice bodu v rovine</i>
x = [-5, -4, -3,    3,  4,  5,   3, 3, 3,  4, 4, 4,  5, 5, 5]

<i># y-ove souradnice bodu v rovine</i>
y = [ 5,  3,  5,   -5, -3, -5,   3, 4, 5,  3, 4, 5,  3, 4, 5]

<i># konstrukce 2D matice, v niz kazdy radek obsahuje souradnice jednoho bodu v</i>
<i># rovine</i>
points = np.column_stack((x,y)).astype("float32")
print(points)

<i># konstrukce indexu pro vyhledavani na zaklade vzdalenosti</i>
index = faiss.IndexFlatL2(2)
index.add(points)

print()
print("Dimension(s):         ", index.d)
print("Total values in index:", index.ntotal)
print("Is index trained:     ", index.is_trained)

<i># vektor, ke kteremu budeme pocitat vzdalenost</i>
query_vector = np.array([[3, 3]]).astype("float32")
print(query_vector)

<i># pocet nejblizsich bodu</i>
k = len(x)
distances, indices = index.search(query_vector, k)

<i># tisk vysledku</i>
print("Nearest neighbors:")
print("neighbour  distance  coordinates  ")
print("----------------------------------")
for i in range(k):
    print(f"{i+1:3}      {distances[0][i]:5}       {points[indices[0][i]]}")
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Volba metriky používané při výpočtech nejbližších bodů</h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
import faiss
import numpy as np

<i># x-ove souradnice bodu v rovine</i>
x = [-5, -4, -3,    3,  4,  5,   3, 3, 3,  4, 4, 4,  5, 5, 5]

<i># y-ove souradnice bodu v rovine</i>
y = [ 5,  3,  5,   -5, -3, -5,   3, 4, 5,  3, 4, 5,  3, 4, 5]

<i># konstrukce 2D matice, v niz kazdy radek obsahuje souradnice jednoho bodu v</i>
<i># rovine</i>
points = np.column_stack((x,y)).astype("float32")
print(points)

<i># konstrukce indexu pro vyhledavani na zaklade vzdalenosti</i>
index = faiss.IndexFlatIP(2)
index.add(points)

print()
print("Dimension(s):         ", index.d)
print("Total values in index:", index.ntotal)
print("Is index trained:     ", index.is_trained)

<i># vektor, ke kteremu budeme pocitat vzdalenost</i>
query_vector = np.array([[3, 3]]).astype("float32")
print(query_vector)

<i># pocet nejblizsich bodu</i>
k = len(x)
distances, indices = index.search(query_vector, k)

<i># tisk vysledku</i>
print("Nearest neighbors:")
print("neighbour  distance  coordinates  ")
print("----------------------------------")
for i in range(k):
    print(f"{i+1:3}      {distances[0][i]:5}       {points[indices[0][i]]}")
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
import faiss
import numpy as np

<i># x-ove souradnice bodu v rovine</i>
x = [-5, -4, -3,    3,  4,  5,   3, 3, 3,  4, 4, 4,  5, 5, 5]

<i># y-ove souradnice bodu v rovine</i>
y = [ 5,  3,  5,   -5, -3, -5,   3, 4, 5,  3, 4, 5,  3, 4, 5]

<i># konstrukce 2D matice, v niz kazdy radek obsahuje souradnice jednoho bodu v</i>
<i># rovine</i>
points = np.column_stack((x,y)).astype("float32")
print(points)

<i># normalizace</i>
for i in range(len(points)):
   vector = points[i]
   normalized = np.linalg.norm(vector)
   vector /= normalized
   points[i] = vector

print()
print("Normalized:")
print(points)

<i># konstrukce indexu pro vyhledavani na zaklade vzdalenosti</i>
index = faiss.IndexFlatIP(2)
index.add(points)

print()
print("Dimension(s):         ", index.d)
print("Total values in index:", index.ntotal)
print("Is index trained:     ", index.is_trained)

<i># vektor, ke kteremu budeme pocitat vzdalenost</i>
query_vector = np.array([[3, 3]]).astype("float32")
normalized = np.linalg.norm(query_vector)
query_vector /= normalized
print(query_vector)

<i># pocet nejblizsich bodu</i>
k = len(x)
distances, indices = index.search(query_vector, k)

<i># tisk vysledku</i>
print("Nearest neighbors:")
print("neighbour  distance  coordinates  ")
print("----------------------------------")
for i in range(k):
    print(f"{i+1:3}      {distances[0][i]:+7.4f}     {points[indices[0][i]]}")
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Rychlost vyhledání nejbližších bodů</h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Jednoduchý benchmark</h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady popsané v&nbsp;dnešním článku najdeme v&nbsp;repositáři <a href="https://github.com/tisnik/most-popular-python-libs/">https://github.com/tisnik/most-popular-python-libs/</a>. Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/</a></td></tr>
<tr><td>2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/</a></td></tr>
<tr><td>3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/</a></td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/</a></td></tr>
<tr><td>5</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/</a></td></tr>
<tr><td>6</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/</a></td></tr>
<tr><td>7</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/</a></td></tr>
</table>

faiss-1.py
faiss-2.py
faiss-3.py
faiss-4.py
faiss-5.py
faiss-6.py



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>FAISS (Facebook AI Similarity Search)<br />
<a href="https://en.wikipedia.org/wiki/FAISS">https://en.wikipedia.org/wiki/FAISS</a>
</li>

<li>FAISS documentation<br />
<a href="https://faiss.ai/">https://faiss.ai/</a>
</li>

<li>Introduction to Facebook AI Similarity Search (Faiss)<br />
<a href="https://www.pinecone.io/learn/series/faiss/faiss-tutorial/">https://www.pinecone.io/learn/series/faiss/faiss-tutorial/</a>
</li>

<li>Faiss: Efficient Similarity Search and Clustering of Dense Vectors<br />
<a href="https://medium.com/@pankaj_pandey/faiss-efficient-similarity-search-and-clustering-of-dense-vectors-dace1df1e235">https://medium.com/@pankaj_pandey/faiss-efficient-similarity-search-and-clustering-of-dense-vectors-dace1df1e235</a>
</li>

<li>Top 8 Vector Databases in 2025: Features, Use Cases, and Comparisons<br />
<a href="https://synapsefabric.com/top-8-vector-databases-in-2025-features-use-cases-and-comparisons/">https://synapsefabric.com/top-8-vector-databases-in-2025-features-use-cases-and-comparisons/</a>
</li>

<li>Is FAISS a Vector Database? Complete Guide<br />
<a href="https://mljourney.com/is-faiss-a-vector-database-complete-guide/">https://mljourney.com/is-faiss-a-vector-database-complete-guide/</a>
</li>

<li>Vector database<br />
<a href="https://en.wikipedia.org/wiki/Vector_database">https://en.wikipedia.org/wiki/Vector_database</a>
</li>

<li>Nearest neighbor search<br />
<a href="https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximation_methods">https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximation_methods</a>
</li>

<li>Decoding Similarity Search with FAISS: A Practical Approach<br />
<a href="https://www.luminis.eu/blog/decoding-similarity-search-with-faiss-a-practical-approach/">https://www.luminis.eu/blog/decoding-similarity-search-with-faiss-a-practical-approach/</a>
</li>

<li>RAG - Retrieval-augmented generation<br />
<a href="https://en.wikipedia.org/wiki/Retrieval-augmented_generation">https://en.wikipedia.org/wiki/Retrieval-augmented_generation</a>
</li>

<li>pgvector na GitHubu<br />
<a href="https://github.com/pgvector/pgvector">https://github.com/pgvector/pgvector</a>
</li>

<li>Why we replaced Pinecone with PGVector<br />
<a href="https://www.confident-ai.com/blog/why-we-replaced-pinecone-with-pgvector">https://www.confident-ai.com/blog/why-we-replaced-pinecone-with-pgvector</a>
</li>

<li>PostgreSQL as VectorDB - Beginner Tutorial<br />
<a href="https://www.youtube.com/watch?v=Ff3tJ4pJEa4">https://www.youtube.com/watch?v=Ff3tJ4pJEa4</a>
</li>

<li>What is a Vector Database? (neobsahuje odpověď na otázku v titulku :-)<br />
<a href="https://www.youtube.com/watch?v=t9IDoenf-lo">https://www.youtube.com/watch?v=t9IDoenf-lo</a>
</li>

<li>PGVector: Turn PostgreSQL Into A Vector Database<br />
<a href="https://www.youtube.com/watch?v=j1QcPSLj7u0">https://www.youtube.com/watch?v=j1QcPSLj7u0</a>
</li>

<li>Milvus<br />
<a href="https://milvus.io/">https://milvus.io/</a>
</li>

<li>Vector Databases simply explained! (Embeddings &amp; Indexes)<br />
<a href="https://www.youtube.com/watch?v=dN0lsF2cvm4">https://www.youtube.com/watch?v=dN0lsF2cvm4</a>
</li>

<li>Vector databases are so hot right now. WTF are they?<br />
<a href="https://www.youtube.com/watch?v=klTvEwg3oJ4">https://www.youtube.com/watch?v=klTvEwg3oJ4</a>
</li>

<li>Step-by-Step Guide to Installing “pgvector” and Loading Data in PostgreSQL<br />
<a href="https://medium.com/@besttechreads/step-by-step-guide-to-installing-pgvector-and-loading-data-in-postgresql-f2cffb5dec43">https://medium.com/@besttechreads/step-by-step-guide-to-installing-pgvector-and-loading-data-in-postgresql-f2cffb5dec43</a>
</li>

<li>Best 17 Vector Databases for 2025<br />
<a href="https://lakefs.io/blog/12-vector-databases-2023/">https://lakefs.io/blog/12-vector-databases-2023/</a>
</li>

<li>Top 15 Vector Databases that You Must Try in 2025<br />
<a href="https://www.geeksforgeeks.org/top-vector-databases/">https://www.geeksforgeeks.org/top-vector-databases/</a>
</li>

<li>Picking a vector database: a comparison and guide for 2023<br />
<a href="https://benchmark.vectorview.ai/vectordbs.html">https://benchmark.vectorview.ai/vectordbs.html</a>
</li>

<li>Top 9 Vector Databases as of Feburary 2025<br />
<a href="https://www.shakudo.io/blog/top-9-vector-databases">https://www.shakudo.io/blog/top-9-vector-databases</a>
</li>

<li>What is a vector database?<br />
<a href="https://www.ibm.com/think/topics/vector-database">https://www.ibm.com/think/topics/vector-database</a>
</li>

<li>SQL injection<br />
<a href="https://en.wikipedia.org/wiki/SQL_injection">https://en.wikipedia.org/wiki/SQL_injection</a>
</li>

<li>Cosine similarity<br />
<a href="https://en.wikipedia.org/wiki/Cosine_similarity">https://en.wikipedia.org/wiki/Cosine_similarity</a>
</li>

<li>Hammingova vzdálenost<br />
<a href="https://cs.wikipedia.org/wiki/Hammingova_vzd%C3%A1lenost">https://cs.wikipedia.org/wiki/Hammingova_vzd%C3%A1lenost</a>
</li>

<li>Jaccard index<br />
<a href="https://en.wikipedia.org/wiki/Jaccard_index">https://en.wikipedia.org/wiki/Jaccard_index</a>
</li>

<li>Manhattanská metrika<br />
<a href="https://cs.wikipedia.org/wiki/Manhattansk%C3%A1_metrika">https://cs.wikipedia.org/wiki/Manhattansk%C3%A1_metrika</a>
</li>

<li>pgvector: vektorová databáze postavená na Postgresu<br />
<a href="https://www.root.cz/clanky/pgvector-vektorova-databaze-postavena-na-postgresu/">https://www.root.cz/clanky/pgvector-vektorova-databaze-postavena-na-postgresu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

