<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Automatická analýza a recenze zdrojových kódů s využitím nástroje CodeRabbitAI</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Automatická analýza a recenze zdrojových kódů s využitím nástroje CodeRabbitAI</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Automatická analýza a recenze zdrojových kódů s&nbsp;využitím nástroje CodeRabbitAI</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">6. Odvození sekvenčního diagramu z&nbsp;analyzovaného zdrojového kódu</a></p>
<p><a href="#k07">7. Podpora programovacích jazyků, které nepatří do mainstreamu</a></p>
<p><a href="#k08">8. Program pro smazání obrazovky na ZX Spectru</a></p>
<p><a href="#k09">9. Programová smyčka realizovaná instrukcí <strong>DJNZ</strong></a></p>
<p><a href="#k10">10. Program vytvořený v&nbsp;assembleru mikroprocesorů Intel 8086 pro IBM PC+DOS </a></p>
<p><a href="#k11">11. Výpočet největšího společného dělitele v&nbsp;BBC BASICu</a></p>
<p><a href="#k12">12. Analýza a recenze výpočtu</a></p>
<p><a href="#k13">13. Oficiální demonstrační příklad pro jazyk C3</a></p>
<p><a href="#k14">*** 14. Analýza a recenze příkladu</a></p>
<p><a href="#k15">15. Výpočet naprogramovaný v&nbsp;jazyce Standard ML</a></p>
<p><a href="#k16">*** 16. Analýza a recenze příkladu</a></p>
<p><a href="#k17">17. Výpočet naprogramovaný v&nbsp;jazyce OCaml</a></p>
<p><a href="#k18">*** 18. Analýza a recenze příkladu</a></p>
<p><a href="#k19">*** 19. Nepatrně složitější příklad naprogramovaný v&nbsp;jazyce OCaml</a></p>
<p><a href="#k20">*** 20. Analýza a recenze příkladu</a></p>
<p><a href="#k21">21. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Automatická analýza a recenze zdrojových kódů s&nbsp;využitím nástroje CodeRabbitAI</h2>

<p></p>

AI doesn’t invent. It recycles. It’s trained on other people’s ideas, imitates patterns, and doesn’t jump the curve.



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
/*
build as shared library: gcc -shared -Wl,-soname,testlib -o testlib.so -fPIC
testlib.c build as executable:
*/
&nbsp;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
&nbsp;
void render_test_rgb_image(unsigned int width, unsigned int height,
                           unsigned char *pixels, unsigned char green) {
    unsigned int i, j;
    unsigned char *p = pixels;
&nbsp;
    for (j = 0; j &lt; height; j++) {
        for (i = 0; i &lt; width; i++) {
            *p++ = i;
            *p++ = green;
            *p++ = j;
            p++;
        }
    }
}
&nbsp;
void ppm_write_ascii_to_stream(unsigned int width, unsigned int height,
                               unsigned char *pixels, FILE *fout) {
    int x, y;
    unsigned char r, g, b;
    unsigned char *p = pixels;
&nbsp;
    /* header */
    fprintf(fout, "P3 %d %d 255\n", width, height);
&nbsp;
    /* pixel array */
    for (y = height - 1; y &gt;= 0; y--) {
        for (x = 0; x &lt; width; x++) {
            r = *p++;
            g = *p++;
            b = *p++;
            p++;
            fprintf(fout, "%d %d %d\n", r, g, b);
        }
    }
}
&nbsp;
int ppm_write_ascii(unsigned int width, unsigned int height,
                    unsigned char *pixels, const char *file_name) {
    FILE *fout;
&nbsp;
    fout = fopen(file_name, "wb");
    if (!fout) {
        return -1;
    }
&nbsp;
    ppm_write_ascii_to_stream(width, height, pixels, fout);
&nbsp;
    if (fclose(fout) == EOF) {
        return -1;
    }
    return 0;
}
&nbsp;
int main(void) {
#define WIDTH 256
#define HEIGHT 256
    unsigned char *pixels = (unsigned char *)malloc(WIDTH * HEIGHT * 4);
    render_test_rgb_image(WIDTH, HEIGHT, pixels, 0);
    ppm_write_ascii(WIDTH, HEIGHT, pixels, "test_rgb_1.ppm");
    return 0;
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
A new C source file was added that provides functions to generate a simple RGB test image and write it in PPM ASCII format. The code includes image rendering, PPM writing utilities, and a main function that generates a 256x256 image and saves it to disk. Build instructions are included in comments.
</pre>

<pre>
1-4: Fix inconsistencies in build instructions.

The build instructions contain several issues:

    Line 3 references "testlib.c" but the actual filename is "render_image_1.c"
    The shared library build command uses "testlib" names that don't match the file
    The executable build instruction is incomplete

Apply this diff to correct the build instructions:

 /*
-build as shared library: gcc -shared -Wl,-soname,testlib -o testlib.so -fPIC
-testlib.c build as executable:
+build as shared library: gcc -shared -Wl,-soname,render_image_1 -o render_image_1.so -fPIC render_image_1.c
+build as executable: gcc -o render_image_1 render_image_1.c
 */
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
From c5d1b1090d5b2519ee2c1154f332f673fd24a581 Mon Sep 17 00:00:00 2001
From: "coderabbitai[bot]"
 &lt;136622811+coderabbitai[bot]@users.noreply.github.com&gt;
Date: Wed, 16 Jul 2025 19:14:12 +0000
Subject: [PATCH] =?UTF-8?q?=F0=9F=93=9D=20Add=20docstrings=20to=20`render?=
 =?UTF-8?q?=5Fimage=5F1.c`?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Docstrings generation was requested by @tisnik.

* https://github.com/tisnik/test-dependabot-no-devs/pull/1055#issuecomment-3079893992

The following files were modified:

* `render_image_1.c`
---
 render_image_1.c | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/render_image_1.c b/render_image_1.c
index 9d845a65..35f8a681 100644
--- a/render_image_1.c
+++ b/render_image_1.c
@@ -6,6 +6,16 @@ testlib.c build as executable:
 #include &lt;stdio.h&gt;
 #include &lt;stdlib.h&gt;
 
+/**
+ * Fills a pixel buffer with a test RGBA image pattern.
+ *
+ * Sets each pixel's red channel to its x-coordinate, green channel to the specified value, blue channel to its y-coordinate, and leaves the alpha channel unused.
+ * The buffer must be preallocated with at least width * height * 4 bytes.
+ * @param width Image width in pixels.
+ * @param height Image height in pixels.
+ * @param pixels Pointer to the RGBA pixel buffer to fill.
+ * @param green Value to assign to the green channel for all pixels.
+ */
 void render_test_rgb_image(unsigned int width, unsigned int height,
                            unsigned char *pixels, unsigned char green) {
     unsigned int i, j;
@@ -21,6 +31,11 @@ void render_test_rgb_image(unsigned int width, unsigned int height,
     }
 }
 
+/**
+ * Writes pixel data to a file stream in ASCII PPM (P3) format.
+ *
+ * Outputs the image header and RGB values for each pixel, reading from the provided buffer in bottom-to-top row order. The alpha channel in the buffer is ignored.
+ */
 void ppm_write_ascii_to_stream(unsigned int width, unsigned int height,
                                unsigned char *pixels, FILE *fout) {
     int x, y;
@@ -42,6 +57,17 @@ void ppm_write_ascii_to_stream(unsigned int width, unsigned int height,
     }
 }
 
+/**
+ * Writes pixel data to a file in ASCII PPM (P3) format.
+ *
+ * Opens the specified file for writing, writes the image data in ASCII PPM format using the provided pixel buffer, and closes the file.
+ * Returns 0 on success, or -1 if the file cannot be opened or closed.
+ * @param width Image width in pixels.
+ * @param height Image height in pixels.
+ * @param pixels Pointer to the RGBA pixel buffer (only RGB channels are written).
+ * @param file_name Name of the output file.
+ * @return 0 on success, -1 on failure.
+ */
 int ppm_write_ascii(unsigned int width, unsigned int height,
                     unsigned char *pixels, const char *file_name) {
     FILE *fout;
@@ -59,6 +85,10 @@ int ppm_write_ascii(unsigned int width, unsigned int height,
     return 0;
 }
 
+/**
+ * Generates a 256x256 test RGB image and writes it to "test_rgb_1.ppm" in ASCII PPM format.
+ * @returns 0 on successful completion.
+ */
 int main(void) {
 #define WIDTH 256
 #define HEIGHT 256
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Odvození sekvenčního diagramu z&nbsp;analyzovaného zdrojového kódu</h2>

<p>Program resp.&nbsp;možná přesněji řečeno implementovaný algoritmus, je možné
do určité míry popsat i graficky, tedy vhodným diagramem. K&nbsp;tomuto účelu
se využívají například <i>stavové diagramy</i>. Ty dokážou názorně popsat stavy
systému i možné přechody mezi jednotlivými stavy, ovšem v&nbsp;mnoha případech
vzniká potřeba podrobněji popsat i interakci mezi popisovaným systémem a jeho
okolím, interakci mezi dvěma nebo více moduly systému či (na té nejpodrobnější
úrovni) interakci probíhající mezi jednotlivými objekty, z&nbsp;nichž se systém
skládá. Pro tento účel slouží takzvané <i>sekvenční diagramy (sequence
diagrams)</i>, v&nbsp;nichž lze velmi názorným způsobem naznačit časovou
posloupnost posílání zpráv mezi různými typy objektů,
popř.&nbsp;k&nbsp;zobrazené posloupnosti zpráv přidat další komentáře a značky.
Jeden z&nbsp;typických a poměrně často v&nbsp;praxi používaných příkladů
použití <i>sekvenčních diagramů</i> je popis komunikace s&nbsp;využitím
síťových i jiných protokolů.</p>

<p>CodeRabbitAI dokáže tyto diagramy relativně dobře odvodit, což je patrné
z&nbsp;následujících screenshotů:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1211775/"><img src="https://i.iinfo.cz/images/142/coderabbitai2-1-large.png" class="image-1211775" width="720" height="410" data-prev-filename="https://i.iinfo.cz/images/142/coderabbitai2-1-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/142/coderabbitai2-1-prev.webp" data-prev-width="370" data-prev-height="211" data-large-filename="https://i.iinfo.cz/images/142/coderabbitai2-1-large.png" data-large-filename-webp="https://i.iinfo.cz/images/142/coderabbitai2-1-large.webp" data-large-width="720" data-large-height="410" alt="Sekvenční diagram vygenerovaný CodeRabbitem" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Sekvenční diagram odvozený z&nbsp;kódu naprogramovaného v&nbsp;Pythonu<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1211778/"><img src="https://i.iinfo.cz/images/142/coderabbitai2-2-large.png" class="image-1211778" width="720" height="287" data-prev-filename="https://i.iinfo.cz/images/142/coderabbitai2-2-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/142/coderabbitai2-2-prev.webp" data-prev-width="370" data-prev-height="147" data-large-filename="https://i.iinfo.cz/images/142/coderabbitai2-2-large.png" data-large-filename-webp="https://i.iinfo.cz/images/142/coderabbitai2-2-large.webp" data-large-width="720" data-large-height="287" alt="Sekvenční diagram vygenerovaný CodeRabbitem" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Sekvenční diagram odvozený z&nbsp;kódu naprogramovaného v&nbsp;Pythonu<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<p><div class="rs-tip-major">Poznámka: tyto diagramy jsou dostupné i ve
zdrojové podobě určené pro PlantUML.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Podpora programovacích jazyků, které nepatří do mainstreamu</h2>

<p>Od nástrojů postavených mj.&nbsp;na moderních jazykových modelech můžeme
očekávat velmi dobrou podporu mainstreamových programovacích jazyků, mezi něž
patří především Python, který je následovaný jazyky C, C++, Javou, C# a
pochopitelně taktéž JavaScriptem, TypeScriptem, Go a Rustem. Velmi dobrá
podpora těchto programovacích jazyků by neměla být nijak překvapující, ovšem
zajímavé bude zjistit, jak a zda vůbec dokáže CodeRabbitAI zpracovávat a
hodnotit zdrojové kódy vytvořené v&nbsp;programovacích jazycích, které nepatří
(a pravděpodobně ani nikdy nebudou patřit) mezi mainstream. V&nbsp;navazujících
kapitolách proto některé tyto jazyky otestujeme. Bude se jednat jak o
historické jazyky a assemblery (a proč nezačít rovnou s&nbsp;legendárním ZX
Spectrem a assemblerem mikroprocesoru Zilog Z80?), tak i o jazyky používané
v&nbsp;současnosti, které ovšem nepatří mezi (alespoň co se týče používanosti,
nikoli nutně kvalit) absolutní špičku.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;oblasti LLM pravděpodobně dojde
resp.&nbsp;došlo ke kladné zpětné vazbě &ndash; jazyky s&nbsp;mnoha dostupnými
zdrojovými kódy budou LLM modely podporovány mnohem lépe, než méně populární
jazyky, což ovšem zpětně ovlivní popularitu již populárních (sic) jazyků
&ndash; dnes totiž mnoho vývojářů očekává od LLM poměrně výraznou pomoc (se
všemi z&nbsp;toho plynoucími důsledky).</div></p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1211754/"><img src="https://i.iinfo.cz/images/642/coderabbitai-1-large.png" class="image-1211754" width="720" height="239" data-prev-filename="https://i.iinfo.cz/images/642/coderabbitai-1-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-1-prev.webp" data-prev-width="370" data-prev-height="123" data-large-filename="https://i.iinfo.cz/images/642/coderabbitai-1-large.png" data-large-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-1-large.webp" data-large-width="720" data-large-height="239" alt="Analýza a recenze programů psaných v assembleru" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Rekapitulace trojice zdrojových kódů naprogramovaných v&nbsp;různých assemblerech<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k08"></a></p>
<h2 id="k08">8. Program pro smazání obrazovky na ZX Spectru</h2>

<p>První program zapsaný v&nbsp;assembleru bude provádět jedinou operaci
&ndash; zavolá službu resp.&nbsp;subrutinu neboli podprogram, jenž je uložený
v&nbsp;paměti ROM ZX Spectra a je tedy programátorům snadno dostupný a navíc i
velmi dobře zdokumentovaný. Tento podprogram zajistí smazání obrazovky a
otevření kanálu číslo 2 (což je zařízení typu &bdquo;obrazovka&ldquo; neboli
<i>screen</i>). Podprogram <strong>ROM_CLS</strong> (popř.&nbsp;jen
<strong>CLS</strong>, viz například <a
href="https://skoolkit.ca/disassemblies/rom/asm/3435.html">tento popis</a>) je
v&nbsp;paměti ROM ZX Spectra umístěn na adrese 0x0DAF a nevyžaduje žádné
parametry, které by se jinak předávaly buď v&nbsp;pracovních registrech nebo
s&nbsp;využitím speciálním zásobníku numerických hodnot typu <i>float</i>.</p>

<p>Zavolání podprogramu zajišťuje u mikroprocesorů Zilog Z80 (a i na mnoha
dalších mikroprocesorových architekturách) instrukce <strong>CALL</strong>,
která uloží návratovou adresu na zásobník a následně provede skok. Náš program
se tedy bude skládat ze dvou instrukcí <strong>CALL</strong> +
<strong>RET</strong>:</p>

<pre>
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        call ROM_CLS    <i>; smazání obrazovky a otevření kanálu číslo 2 (screen)</i>
        ld   A, 42      <i>; kód znaku '*' pro tisk</i>
        call 0x10       <i>; zavolání rutiny v ROM</i>
        ret             <i>; návrat z programu do BASICu</i>
&nbsp;
end ENTRY_POINT
</pre>

<p>Analýza a recenze dopadne poměrně uspokojujícím způsobem &ndash; program byl
zanalyzován korektně:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1211757/"><img src="https://i.iinfo.cz/images/642/coderabbitai-2-large.png" class="image-1211757" width="720" height="224" data-prev-filename="https://i.iinfo.cz/images/642/coderabbitai-2-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-2-prev.webp" data-prev-width="370" data-prev-height="115" data-large-filename="https://i.iinfo.cz/images/642/coderabbitai-2-large.png" data-large-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-2-large.webp" data-large-width="720" data-large-height="224" alt="Analýza a recenze programů psaných v assembleru" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Vygenerovaný sekvenční diagram, povšimněte si, že je doplněn i popisek volané služby<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1211760/"><img src="https://i.iinfo.cz/images/642/coderabbitai-3-large.png" class="image-1211760" width="720" height="239" data-prev-filename="https://i.iinfo.cz/images/642/coderabbitai-3-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-3-prev.webp" data-prev-width="370" data-prev-height="123" data-large-filename="https://i.iinfo.cz/images/642/coderabbitai-3-large.png" data-large-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-3-large.webp" data-large-width="720" data-large-height="239" alt="Analýza a recenze programů psaných v assembleru" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Našel se pouze jeden problém &ndash; nekontrolujeme, jestli zavolaná služba operačního systému nevrátila informaci o chybě<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k09"></a></p>
<h2 id="k09">9. Programová smyčka realizovaná instrukcí <strong>DJNZ</strong></h2>

<p>Ve druhém programu napsaném v&nbsp;assembleru mikroprocesoru Zilog Z80 pro
ZX Spectrum je vytvořena programová smyčka realizovaná instrukcí
<strong>DJNZ</strong>. Program provede 256 zápisů do atributové paměti ZX
Spectra a změní tedy barvy v&nbsp;horní části obrazovky:</p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        ld hl, ATTRIBUTE_ADR  <i>; adresa pro zápis</i>
        ld b, l               <i>; zapisovaná hodnota + počitadlo smyčky</i>
&nbsp;
<strong>loop</strong>:
        ld (hl),l             <i>; zápis hodnoty na adresu (HL)</i>
        inc l                 <i>; zvýšení adresy i zapisované hodnoty</i>
        djnz loop             <i>; kombinace dec b + jp NZ, loop</i>
                              <i>; snížení hodnoty počitadla</i>
                              <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret
&nbsp;
end ENTRY_POINT
</pre>

<p>V&nbsp;tomto případě je nalezena potenciální chyba, která spočívá
v&nbsp;tom, že v&nbsp;programové smyčce modifikujeme pouze hodnotu osmibitového
registru <strong>L</strong> a nikoli zdvojeného šestnáctibitového registru
<strong>HL</strong>, což je ovšem ve skutečnosti přesně požadované chování
(analýza by si mohla všimnout toho, že počitadlo je osmibitové).</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 684px"><a href="https://www.root.cz/obrazek/1211763/"><img src="https://i.iinfo.cz/images/642/coderabbitai-4-large.png" class="image-1211763" width="684" height="525" data-prev-filename="https://i.iinfo.cz/images/642/coderabbitai-4-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-4-prev.webp" data-prev-width="352" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/642/coderabbitai-4-large.png" data-large-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-4-large.webp" data-large-width="684" data-large-height="525" alt="Analýza a recenze programů psaných v assembleru" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 684px" /></a><p>Analýza programu s&nbsp;počítanou programovou smyčkou realizovanou instrukcí <strong>DJNZ</strong><br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k10"></a></p>
<h2 id="k10">10. Program vytvořený v&nbsp;assembleru mikroprocesorů Intel 8086 pro IBM PC+DOS</h2>

<p>Třetí a současně i poslední program vytvořený v&nbsp;assembleru je pro změnu
určen pro počítače IBM PC vybavené (minimálně) mikroprocesorem Intel 8086.
V&nbsp;tomto programu je implementována subrutina (podprogram) určená pro
vykreslení pixelu zadanou barvou v&nbsp;grafickém režimu karty VGA
s&nbsp;rozlišením 320&times;200 pixelů a s&nbsp;256 barvami. Subrutina je
navržena právě pro původní čip 8086 resp.&nbsp;8088:</p>

<pre>
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
&nbsp;
<i>; ukonceni procesu a navrat do DOSu</i>
%macro <strong>exit</strong> 0
        mov     ah, 0x4c
        int     0x21
%endmacro
&nbsp;
<i>; vyprazdneni bufferu klavesnice a cekani na klavesu</i>
%macro <strong>wait_key</strong> 0
        xor     ax, ax
        int     0x16
%endmacro
&nbsp;
<i>; nastaveni grafickeho rezimu</i>
%macro <strong>gfx_mode</strong> 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro
&nbsp;
<i>;-----------------------------------------------------------------------------</i>
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>
&nbsp;
<strong>start</strong>:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>
&nbsp;
        mov ax, 0
<strong>opak</strong>:
        mov bx, ax          <i>; y-ová souřadnice</i>
&nbsp;
        push ax
        mov cl, al          <i>; barva</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        push ax
        mov cl, al          <i>; barva</i>
        add ax, 10          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        push ax
        mov cl, al          <i>; barva</i>
        add ax, 20          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax
&nbsp;
        inc ax              <i>; pusun x+=1, y+=1</i>
        cmp ax, 200         <i>; hranice obrazovky?</i>
        jne opak            <i>; ne-opakujeme</i>
&nbsp;
        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>
&nbsp;
<i>; Vykresleni pixelu</i>
<i>; AX - x-ova souradnice</i>
<i>; BX - y-ova souradnice (staci len BL)</i>
<i>; CL - barva</i>
<strong>putpixel</strong>:
        mov dx, 0xa000     <i>; zacatek stranky video RAM</i>
        mov es, dx         <i>; nyni obsahuje ES stranku video RAM</i>
&nbsp;
        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>
&nbsp;
        mov ax, bx         <i>; y-ova souradnice</i>
        shl ax, 1          <i>; y*2</i>
        shl ax, 1          <i>; y*4</i>
        shl ax, 1          <i>; y*8</i>
        shl ax, 1          <i>; y*16</i>
        shl ax, 1          <i>; y*32</i>
        shl ax, 1          <i>; y*64</i>
        add di, ax         <i>; pricist cast y-oveho posunu</i>
        shl ax, 1          <i>; y*128</i>
        shl ax, 1          <i>; y*256</i>
        add di, ax         <i>; pricist zbytek y-oveho posunu</i>
                           <i>; -&gt; y*64 + y*256 = y*320</i>
&nbsp;
        mov [es:di], cl     <i>; vlastni vykresleni pixelu</i>
&nbsp;
        ret
</pre>

<p>CodeRabbitAI korektně odvodí sekvenční diagram popisující činnosti
programu:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1211766/"><img src="https://i.iinfo.cz/images/642/coderabbitai-5-large.png" class="image-1211766" width="720" height="244" data-prev-filename="https://i.iinfo.cz/images/642/coderabbitai-5-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-5-prev.webp" data-prev-width="370" data-prev-height="125" data-large-filename="https://i.iinfo.cz/images/642/coderabbitai-5-large.png" data-large-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-5-large.webp" data-large-width="720" data-large-height="244" alt="Analýza a recenze programů psaných v assembleru" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Sekvenční diagram popisující činnosti programu.<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<p>Následně je nabídnuta možnost optimalizace programu, která spočívá
v&nbsp;lepším využití pracovních registrů, což je ovšem nekorektní, protože
volaná subrutina &bdquo;ničí&ldquo; jak obsah registru <strong>AX</strong>, tak
i <strong>DX</strong>. Aplikací této úpravy se můžeme snadno přesvědčit, že
program již nebude funkční:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 554px"><a href="https://www.root.cz/obrazek/1211769/"><img src="https://i.iinfo.cz/images/642/coderabbitai-6-large.png" class="image-1211769" width="554" height="525" data-prev-filename="https://i.iinfo.cz/images/642/coderabbitai-6-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-6-prev.webp" data-prev-width="285" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/642/coderabbitai-6-large.png" data-large-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-6-large.webp" data-large-width="554" data-large-height="525" alt="Analýza a recenze programů psaných v assembleru" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 554px" /></a><p>Nabídnutá možnost optimalizace využití pracovních registrů<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<p>Nakonec je nabídnuta ještě jedna úprava, a to náhrada sekvence instrukcí
<strong>SHL AX, 1</strong> za <strong>SHL AX, jiná_hodnota</strong>. Toto
řešení není striktně řečeno korektní, protože jsme vyžadovali překlad pro
mikroprocesor Intel 8086/8088, který tyto instrukce nepodporuje:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 554px"><a href="https://www.root.cz/obrazek/1211772/"><img src="https://i.iinfo.cz/images/642/coderabbitai-7-large.png" class="image-1211772" width="554" height="525" data-prev-filename="https://i.iinfo.cz/images/642/coderabbitai-7-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-7-prev.webp" data-prev-width="285" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/642/coderabbitai-7-large.png" data-large-filename-webp="https://i.iinfo.cz/images/642/coderabbitai-7-large.webp" data-large-width="554" data-large-height="525" alt="Analýza a recenze programů psaných v assembleru" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 554px" /></a><p>Nabídka úpravy a optimalizace instrukcí pro bitové posuny<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto konkrétním případě tedy
CodeRabbitAI úspěšný nebyl a na jeho rady není dobré se spolehnout.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výpočet největšího společného dělitele v&nbsp;BBC BASICu</h2>

<p>V&nbsp;dalším kroku se pokusíme o analýzu typického &bdquo;školního&ldquo;
algoritmu z&nbsp;osmdesátých let. Jedná se o algoritmus určený pro výpočet
největšího společného dělitele, který je realizován ve slavném <i>BBC
BASICu</i>, ovšem ve skutečnosti ho bude možné bez větších úprav použít i
v&nbsp;dalších interpretrech BASICů (Atari BASIC atd.). Program postupně
provádí rozdíl mezivýsledků až do stavu, kdy budou oba mezivýsledky totožné.
Zcela jsme tudíž odstranili operaci podílu resp.&nbsp;výpočtu zbytku po
dělení:</p>

<pre>
1 REM *****************************
2 REM Vypocet nejvetsiho spolecneho
3 REM delitele.
4 REM 
5 REM Uprava pro BBC BASIC
6 REM 
7 REM *****************************
8 REM
9 REM
10 PRINT "X=";
20 INPUT X
30 PRINT "Y=";
40 INPUT Y
50 IF X=Y THEN PRINT "GCD: ";X:END 
60 IF X&gt;Y THEN X=X-Y:GOTO 50
70 IF X&lt;Y THEN Y=Y-X:GOTO 50
998 REM finito
999 STOP
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Analýza a recenze výpočtu</h2>

<p>Opět se podívejme, jakým způsobem byl tento zdrojový kód analyzován:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1211781/"><img src="https://i.iinfo.cz/images/460/coderabbitai3-1-large.png" class="image-1211781" width="720" height="477" data-prev-filename="https://i.iinfo.cz/images/460/coderabbitai3-1-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/460/coderabbitai3-1-prev.webp" data-prev-width="370" data-prev-height="245" data-large-filename="https://i.iinfo.cz/images/460/coderabbitai3-1-large.png" data-large-filename-webp="https://i.iinfo.cz/images/460/coderabbitai3-1-large.webp" data-large-width="720" data-large-height="477" alt="Analýza algoritmu pro výpočet největšího společného dělitele v BASICu" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>CodeRabbitAI nás zcela jasně upozorní na chybějící podmínky a dokonce doplní kód pro otestování vstupů<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 720px"><a href="https://www.root.cz/obrazek/1211784/"><img src="https://i.iinfo.cz/images/460/coderabbitai3-2-large.png" class="image-1211784" width="720" height="477" data-prev-filename="https://i.iinfo.cz/images/460/coderabbitai3-2-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/460/coderabbitai3-2-prev.webp" data-prev-width="370" data-prev-height="245" data-large-filename="https://i.iinfo.cz/images/460/coderabbitai3-2-large.png" data-large-filename-webp="https://i.iinfo.cz/images/460/coderabbitai3-2-large.webp" data-large-width="720" data-large-height="477" alt="Analýza algoritmu pro výpočet největšího společného dělitele v BASICu" data-description="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 720px" /></a><p>Ve druhém případě jsme upozorněni na to, že algoritmus není efektivní a je nabídnuta jeho úprava (model evidentně tento algoritmus velmi dobře &bdquo;zná&ldquo;<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k13"></a></p>
<h2 id="k13">13. Oficiální demonstrační příklad pro jazyk C3</h2>

<p>Dále si vyzkoušíme, jakým způsobem dokáže <i>CodeRabbitAI</i> pracovat
s&nbsp;relativně novým programovacím jazykem nazvaným <strong>C3</strong>,
který je popsán na stránkách <a
href="https://c3-lang.org/">https://c3-lang.org/</a>. Jedná se o jazyk odvozený
od klasického céčka, ovšem s&nbsp;několika poměrně praktickými vylepšeními. Pro
otestování jsem zvolil příklad, který je dostupný přímo <a
href="https://c3-lang.org/language-overview/examples/#enum-and-switch">na
oficiálních stránkách tohoto jazyka</a>. Jedná se o ukázku použití výčtového
datového typu.  Tento příklad jsem ovšem &bdquo;rozbil&ldquo;: z&nbsp;výčtového
typu byl odstraněn jeden prvek s&nbsp;identifikátorem <strong>MEDIUM</strong>,
takže je zdrojový kód nekorektní:</p>

<pre>
enum Height : uint
{
    LOW,
    HIGH,
}
&nbsp;
fn void demo_enum(Height h)
{
    switch (h)
    {
        case LOW:
        case MEDIUM:
            io::printn("Not high");
            <i>//</i> Implicit break.
        case HIGH:
            io::printn("High");
    }
&nbsp;
    <i>//</i> This also works
    switch (h)
    {
        case LOW:
        case MEDIUM:
            io::printn("Not high");
            <i>//</i> Implicit break.
        case Height.HIGH:
            io::printn("High");
    }
&nbsp;
    <i>//</i> Completely empty cases are not allowed.
    switch (h)
    {
        case LOW:
            break; <i>//</i> Explicit break required, since switches can't be empty.
        case MEDIUM:
            io::printn("Medium");
        case HIGH:
            break;
    }
&nbsp;
    <i>//</i> special checking of switching on enum types
    switch (h)
    {
        case LOW:
        case MEDIUM:
        case HIGH:
            break;
        default:    <i>//</i> warning: default label in switch which covers all enumeration value
            break;
    }
&nbsp;
    <i>//</i> Using "nextcase" will fallthrough to the next case statement,
    <i>//</i> and each case statement starts its own scope.
    switch (h)
    {
        case LOW:
            int a = 1;
            io::printn("A");
            nextcase;
        case MEDIUM:
            int a = 2;
            io::printn("B");
            nextcase;
        case HIGH:
            <i>//</i> a is not defined here
            io::printn("C");
    }
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Analýza a recenze příkladu</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Výpočet naprogramovaný v&nbsp;jazyce Standard ML</h2>

<p>Ve zbylých kapitolách si vyzkoušíme, jakým způsobem dokáže
<i>CoreRabbitAI</i> rozpoznat a zpracovat zdrojové kódy naprogramované
v&nbsp;některém z&nbsp;programovacích jazyků odvozených od ML (což jsou jazyky
s&nbsp;pokročilou typovou inferencí). Jedná se o jazyky <i>Standard ML</i>,
<i>OCaml</i> a v&nbsp;neposlední řadě taktéž o jazyk <i>F#</i>. Začneme
zdrojovým kódem napsaným ve <i>Standard ML</i>. Jedná se o naprosto typický
&bdquo;školní&ldquo; příklad výpočtu Fibonacciho posloupnosti s&nbsp;využitím
rekurze (a tedy bez dalších optimalizací):</p>

<pre>
<i>(* Implementace výpočtu Fibonacciho posloupnosti s využitím pattern matchingu *)</i>
&nbsp;
fun fib 0 = 0
  | fib 1 = 1
  | fib n = fib (n - 1) + fib (n - 2);
</pre>

<p><div class="rs-tip-major">Poznámka: tento příklad jsem zvolil schválně
z&nbsp;toho důvodu, že je použitý v&nbsp;manuálech a proto je poměrně velká
šance, že na něj bude model natrénován.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Analýza a recenze příkladu</h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Výpočet naprogramovaný v&nbsp;jazyce OCaml</h2>

<p>V&nbsp;dalším kroku přejdeme z&nbsp;jazyka <i>Standard ML</i> na jazyk
<i>OCaml</i>, což je programovací jazyk patřící do stejné rodiny programovacích
jazyků, je ovšem novější, podporuje objektově orientované programování a taktéž
je v&nbsp;porovnání se Standard ML poněkud komplikovanější (syntaxe i
sémantika). Výpočet Fibonacciho posloupnosti se v&nbsp;tomto jazyku zapisuje
sice syntakticky odlišně, ovšem sémantika je prakticky totožná (až na to, že
nyní musíme explicitně specifikovat, že definujeme rekurzivní funkci):</p>

<pre>
let rec fib = function
    0 -&gt; 0
  | 1 -&gt; 1
  | n -&gt; fib (n-1) + fib (n-2)
&nbsp;
&nbsp;
&nbsp;
fib 10
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Analýza a recenze příkladu</h2>




<p><a name="k19"></a></p>
<h2 id="k19">19. Nepatrně složitější příklad naprogramovaný v&nbsp;jazyce OCaml</h2>

<p></p>

<pre>
let scale_component x =
  int_of_float (255.*.x)
;;


let scale_rgb r g b =
  (scale_component r,
   scale_component g,
   scale_component b)
;;


let hsv_to_rgb_ h s v =
  let h =
    match h with
    | 1.0 -&gt; 0.0
    | _ -&gt; h
  in
  let i = int_of_float (h*.6.0) in
  let f = h *. 6.0 -. (float i) in
  let w = v *. (1.0 -. s) in
  let q = v *. (1.0 -. s*.f) in
  let t = v *. (1.0 -. s*.(1.0 -. f)) in
  match i with
  | 0 -&gt; scale_rgb v t w
  | 1 -&gt; scale_rgb q v w
  | 2 -&gt; scale_rgb w v t
  | 3 -&gt; scale_rgb w q v
  | 4 -&gt; scale_rgb t w v
  | 5 -&gt; scale_rgb v w q
  | _ -&gt; (0, 0, 0)
;;


let hsv_to_rgb h s v =
  match s with
  | 0.0 -&gt; (scale_rgb v v v)
  | _ -&gt; (hsv_to_rgb_ h s v)
;;


type basic_color =
  | Black
  | Red
  | Green
  | Yellow
  | Blue
  | Magenta
  | Cyan
  | White
;;


type brightness =
  | Dark
  | Bright
;;


type color =
  | BasicColor of basic_color * brightness
  | Gray of int
  | RGB of int * int * int
  | HSV of float * float * float
  | Mix of float * color * color
;;


let basic_color_to_rgb = function
  | Black -&gt; (0, 0, 0)
  | Red -&gt; (255, 0,0)
  | Green -&gt; (0, 255, 0)
  | Yellow -&gt; (255, 255, 0)
  | Blue -&gt; (0, 0, 255)
  | Magenta -&gt; (255, 0, 255)
  | Cyan -&gt; (0, 255, 255)
  | White -&gt; (255, 255, 255)
;;


let darker = function
  | (r, g, b) -&gt; (r/2, g/2, b/2)
;;


let brightness rgb brightess =
  match brightess with
  | Dark -&gt; darker rgb
  | Bright -&gt; rgb
;;
</pre>



<p><a name="k20"></a></p>
<h2 id="k20">20. Analýza a recenze příkladu</h2>



<p><a name="k21"></a></p>
<h2 id="k21">21. Odkazy na Internetu</h2>

<ol>

<li>Code Rabbit home page<br />
<a href="https://www.coderabbit.ai/">https://www.coderabbit.ai/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů:<br />
<a href="http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/">http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/</a>
</li>

<li>Unified Modeling Language<br />
<a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">https://en.wikipedia.org/wiki/Unified_Modeling_Language</a>
</li>

<li>UML basics: The sequence diagram<br />
<a href="http://www.ibm.com/developerworks/rational/library/3101.html">http://www.ibm.com/developerworks/rational/library/3101.html</a>
</li>

<li>UML 2 State Machine Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm">http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm</a>
</li>

<li>PlantUML (home page)<br />
<a href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>
</li>

<li>PlantUML (download page)<br />
<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
</li>

<li>PlantUML (Language Reference Guide)<br />
<a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>
</li>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz - Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

<li>dot (Manual page)<br />
<a href="http://www.root.cz/man/1/dot/">http://www.root.cz/man/1/dot/</a>
</li>

<li>Ditaa home page<br />
<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>
</li>

<li>Ditaa introduction<br />
<a href="http://ditaa.sourceforge.net/#intro">http://ditaa.sourceforge.net/#intro</a>
</li>

<li>Ditaa usage<br />
<a href="http://ditaa.sourceforge.net/#usage">http://ditaa.sourceforge.net/#usage</a>
</li>

<li>Node, Edge and Graph Attributes<br />
<a href="http://www.graphviz.org/doc/info/attrs.html">http://www.graphviz.org/doc/info/attrs.html</a>
</li>

<li>Graphviz (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Graphviz">http://en.wikipedia.org/wiki/Graphviz</a>
</li>

<li>z80 standalone assembler<br />
<a href="https://www.asm80.com/onepage/asmz80.html">https://www.asm80.com/onepage/asmz80.html</a>
</li>

<li>Z80 Assembly programming for the ZX Spectrum<br />
<a href="https://www.chibiakumas.com/z80/ZXSpectrum.php">https://www.chibiakumas.com/z80/ZXSpectrum.php</a>
</li>

<li>8-BIT SMACKDOWN! 65C02 vs. Z80: slithy VLOGS #6<br />
<a href="https://www.youtube.com/watch?v=P1paVoFEvyc">https://www.youtube.com/watch?v=P1paVoFEvyc</a>
</li>

<li>Instrukce mikroprocesoru Z80<br />
<a href="https://clrhome.org/table/">https://clrhome.org/table/</a>
</li>

<li>Z80 instructions: adresní režimy atd.<br />
<a href="https://jnz.dk/z80/instructions.html">https://jnz.dk/z80/instructions.html</a>
</li>

<li>Z80 Instruction Groups<br />
<a href="https://jnz.dk/z80/instgroups.html">https://jnz.dk/z80/instgroups.html</a>
</li>

<li>R. T. RUSSELL: The home of BBC BASIC<br />
<a href="http://www.rtrussell.co.uk/">http://www.rtrussell.co.uk/</a>
</li>

<li>R. T. RUSSELL: A History of BBC BASIC<br />
<a href="http://www.cix.co.uk/~rrussell/bbcbasic/history.html">http://www.cix.co.uk/~rrussell/bbcbasic/history.html</a>
</li>

<li>General-Purpose, Industrial-Strength, Expressive, and Safe<br />
<a href="https://ocaml.org/">https://ocaml.org/</a>
</li>

<li>OCaml playground<br />
<a href="https://ocaml.org/play">https://ocaml.org/play</a>
</li>

<li>Online Ocaml Compiler IDE<br />
<a href="https://www.jdoodle.com/compile-ocaml-online/">https://www.jdoodle.com/compile-ocaml-online/</a>
</li>

<li>Get Started - OCaml<br />
<a href="https://www.ocaml.org/docs">https://www.ocaml.org/docs</a>
</li>

<li>Get Up and Running With OCaml<br />
<a href="https://www.ocaml.org/docs/up-and-running">https://www.ocaml.org/docs/up-and-running</a>
</li>

<li>Better OCaml (Online prostředí)<br />
<a href="https://betterocaml.ml/?version=4.14.0">https://betterocaml.ml/?version=4.14.0</a>
</li>

<li>Learn X in Y minutes Where X=Standard ML<br />
<a href="https://learnxinyminutes.com/docs/standard-ml/">https://learnxinyminutes.com/docs/standard-ml/</a>
</li>

<li>CSE307 Online - Summer 2018: Principles of Programing Languages course<br />
<a href="https://www3.cs.stonybrook.edu/~pfodor/courses/summer/cse307.html">https://www3.cs.stonybrook.edu/~pfodor/courses/summer/cse307.html</a>
</li>

<li>CSE307 Principles of Programming Languages course: SML part 1<br />
<a href="https://www.youtube.com/watch?v=p1n0_PsM6hw">https://www.youtube.com/watch?v=p1n0_PsM6hw</a>
</li>

<li>CSE 307 &ndash; Principles of Programming Languages &ndash; SML<br />
<a href="https://www3.cs.stonybrook.edu/~pfodor/courses/summer/CSE307/L01_SML.pdf">https://www3.cs.stonybrook.edu/~pfodor/courses/summer/CSE307/L01_SML.pdf</a>
</li>

<li>SML, Some Basic Examples<br />
<a href="https://cs.fit.edu/~ryan/sml/intro.html">https://cs.fit.edu/~ryan/sml/intro.html</a>
</li>

<li>History of programming languages<br />
<a href="https://devskiller.com/history-of-programming-languages/">https://devskiller.com/history-of-programming-languages/</a>
</li>

<li>History of programming languages (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/History_of_programming_languages">https://en.wikipedia.org/wiki/History_of_programming_languages</a>
</li>

<li>The F# Survival Guide<br />
<a href="https://web.archive.org/web/20110715231625/http://www.ctocorner.com/fsharp/book/default.aspx">https://web.archive.org/web/20110715231625/http://www.ctocorner.com/fsharp/book/default.aspx</a>
</li>

<li>Object-Oriented Programming — The Trillion Dollar Disaster<br />
<a href="https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7">https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7</a>
</li>

<li>Goodbye, Object Oriented Programming<br />
<a href="https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53">https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53</a>
</li>

<li>So You Want to be a Functional Programmer (Part 1)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536</a>
</li>

<li>So You Want to be a Functional Programmer (Part 2)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 3)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7</a>
</li>

<li>So You Want to be a Functional Programmer (Part 4)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49</a>
</li>

<li>So You Want to be a Functional Programmer (Part 5)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 6)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-6-db502830403">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-6-db502830403</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

