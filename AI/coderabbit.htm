<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. Odvození sekvenčního diagramu z&nbsp;analyzovaného zdrojového kódu</a></p>
<p><a href="#k07">*** 7. Podpora programovacích jazyků, které nepatří do mainstreamu</a></p>
<p><a href="#k08">*** 8. Krátké programy napsané v&nbsp;assembleru pro ZX Spectrum</a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>

AI doesn’t invent. It recycles. It’s trained on other people’s ideas, imitates patterns, and doesn’t jump the curve.



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
/*
build as shared library: gcc -shared -Wl,-soname,testlib -o testlib.so -fPIC
testlib.c build as executable:
*/
&nbsp;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
&nbsp;
void render_test_rgb_image(unsigned int width, unsigned int height,
                           unsigned char *pixels, unsigned char green) {
    unsigned int i, j;
    unsigned char *p = pixels;
&nbsp;
    for (j = 0; j &lt; height; j++) {
        for (i = 0; i &lt; width; i++) {
            *p++ = i;
            *p++ = green;
            *p++ = j;
            p++;
        }
    }
}
&nbsp;
void ppm_write_ascii_to_stream(unsigned int width, unsigned int height,
                               unsigned char *pixels, FILE *fout) {
    int x, y;
    unsigned char r, g, b;
    unsigned char *p = pixels;
&nbsp;
    /* header */
    fprintf(fout, "P3 %d %d 255\n", width, height);
&nbsp;
    /* pixel array */
    for (y = height - 1; y &gt;= 0; y--) {
        for (x = 0; x &lt; width; x++) {
            r = *p++;
            g = *p++;
            b = *p++;
            p++;
            fprintf(fout, "%d %d %d\n", r, g, b);
        }
    }
}
&nbsp;
int ppm_write_ascii(unsigned int width, unsigned int height,
                    unsigned char *pixels, const char *file_name) {
    FILE *fout;
&nbsp;
    fout = fopen(file_name, "wb");
    if (!fout) {
        return -1;
    }
&nbsp;
    ppm_write_ascii_to_stream(width, height, pixels, fout);
&nbsp;
    if (fclose(fout) == EOF) {
        return -1;
    }
    return 0;
}
&nbsp;
int main(void) {
#define WIDTH 256
#define HEIGHT 256
    unsigned char *pixels = (unsigned char *)malloc(WIDTH * HEIGHT * 4);
    render_test_rgb_image(WIDTH, HEIGHT, pixels, 0);
    ppm_write_ascii(WIDTH, HEIGHT, pixels, "test_rgb_1.ppm");
    return 0;
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
A new C source file was added that provides functions to generate a simple RGB test image and write it in PPM ASCII format. The code includes image rendering, PPM writing utilities, and a main function that generates a 256x256 image and saves it to disk. Build instructions are included in comments.
</pre>

<pre>
1-4: Fix inconsistencies in build instructions.

The build instructions contain several issues:

    Line 3 references "testlib.c" but the actual filename is "render_image_1.c"
    The shared library build command uses "testlib" names that don't match the file
    The executable build instruction is incomplete

Apply this diff to correct the build instructions:

 /*
-build as shared library: gcc -shared -Wl,-soname,testlib -o testlib.so -fPIC
-testlib.c build as executable:
+build as shared library: gcc -shared -Wl,-soname,render_image_1 -o render_image_1.so -fPIC render_image_1.c
+build as executable: gcc -o render_image_1 render_image_1.c
 */
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
From c5d1b1090d5b2519ee2c1154f332f673fd24a581 Mon Sep 17 00:00:00 2001
From: "coderabbitai[bot]"
 <136622811+coderabbitai[bot]@users.noreply.github.com>
Date: Wed, 16 Jul 2025 19:14:12 +0000
Subject: [PATCH] =?UTF-8?q?=F0=9F=93=9D=20Add=20docstrings=20to=20`render?=
 =?UTF-8?q?=5Fimage=5F1.c`?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Docstrings generation was requested by @tisnik.

* https://github.com/tisnik/test-dependabot-no-devs/pull/1055#issuecomment-3079893992

The following files were modified:

* `render_image_1.c`
---
 render_image_1.c | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/render_image_1.c b/render_image_1.c
index 9d845a65..35f8a681 100644
--- a/render_image_1.c
+++ b/render_image_1.c
@@ -6,6 +6,16 @@ testlib.c build as executable:
 #include <stdio.h>
 #include <stdlib.h>
 
+/**
+ * Fills a pixel buffer with a test RGBA image pattern.
+ *
+ * Sets each pixel's red channel to its x-coordinate, green channel to the specified value, blue channel to its y-coordinate, and leaves the alpha channel unused.
+ * The buffer must be preallocated with at least width * height * 4 bytes.
+ * @param width Image width in pixels.
+ * @param height Image height in pixels.
+ * @param pixels Pointer to the RGBA pixel buffer to fill.
+ * @param green Value to assign to the green channel for all pixels.
+ */
 void render_test_rgb_image(unsigned int width, unsigned int height,
                            unsigned char *pixels, unsigned char green) {
     unsigned int i, j;
@@ -21,6 +31,11 @@ void render_test_rgb_image(unsigned int width, unsigned int height,
     }
 }
 
+/**
+ * Writes pixel data to a file stream in ASCII PPM (P3) format.
+ *
+ * Outputs the image header and RGB values for each pixel, reading from the provided buffer in bottom-to-top row order. The alpha channel in the buffer is ignored.
+ */
 void ppm_write_ascii_to_stream(unsigned int width, unsigned int height,
                                unsigned char *pixels, FILE *fout) {
     int x, y;
@@ -42,6 +57,17 @@ void ppm_write_ascii_to_stream(unsigned int width, unsigned int height,
     }
 }
 
+/**
+ * Writes pixel data to a file in ASCII PPM (P3) format.
+ *
+ * Opens the specified file for writing, writes the image data in ASCII PPM format using the provided pixel buffer, and closes the file.
+ * Returns 0 on success, or -1 if the file cannot be opened or closed.
+ * @param width Image width in pixels.
+ * @param height Image height in pixels.
+ * @param pixels Pointer to the RGBA pixel buffer (only RGB channels are written).
+ * @param file_name Name of the output file.
+ * @return 0 on success, -1 on failure.
+ */
 int ppm_write_ascii(unsigned int width, unsigned int height,
                     unsigned char *pixels, const char *file_name) {
     FILE *fout;
@@ -59,6 +85,10 @@ int ppm_write_ascii(unsigned int width, unsigned int height,
     return 0;
 }
 
+/**
+ * Generates a 256x256 test RGB image and writes it to "test_rgb_1.ppm" in ASCII PPM format.
+ * @returns 0 on successful completion.
+ */
 int main(void) {
 #define WIDTH 256
 #define HEIGHT 256
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Odvození sekvenčního diagramu z&nbsp;analyzovaného zdrojového kódu</h2>

<p>Program resp.&nbsp;možná přesněji řečeno implementovaný algoritmus, je možné do určité míry popsat i graficky, tedy vhodným diagramem. K&nbsp;tomuto účelu se využívají například <i>stavové diagramy</i>. Ty dokážou názorně popsat stavy systému i možné přechody mezi jednotlivými stavy, ovšem v&nbsp;mnoha případech vzniká potřeba podrobněji popsat i interakci mezi popisovaným systémem a jeho okolím, interakci mezi dvěma nebo více moduly systému či (na té nejpodrobnější úrovni) interakci probíhající mezi jednotlivými objekty, z&nbsp;nichž se systém skládá. Pro tento účel slouží takzvané <i>sekvenční diagramy (sequence diagrams)</i>, v&nbsp;nichž lze velmi názorným způsobem naznačit časovou posloupnost posílání zpráv mezi různými typy objektů, popř.&nbsp;k&nbsp;zobrazené posloupnosti zpráv přidat další komentáře a značky. Jeden z&nbsp;typických a poměrně často v&nbsp;praxi používaných příkladů použití <i>sekvenčních diagramů</i> je popis komunikace s&nbsp;využitím síťových i jiných protokolů.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Podpora programovacích jazyků, které nepatří do mainstreamu</h2>

<p>Od nástrojů postavených mj.&nbsp;na moderních jazykových modelech můžeme očekávat velmi dobrou podporu mainstreamových programovacích jazyků, mezi něž patří především Python následovaný C, C++, Javou, C# a pochopitelně taktéž JavaScriptem, TypeScriptem, Go a Rustem. Velmi dobrá podpora těchto jazyků by neměla být nijak překvapující, ovšem zajímavé bude zjistit, jak a zda vůbec dokáže CodeRabbitAI zpracovávat a hodnotit zdrojové kódy vytvořené v&nbsp;programovacích jazycích, které nepatří (a pravděpodobně ani nikdy nebudou patřit) mezi mainstream. V&nbsp;navazujících kapitolách některé jazyky otestujeme. Bude se jednat jak o historické jazyky a assemblery (a proč nezačít rovnou s&nbsp;legendárním ZX Spectrem a assemblerem mikroprocesoru Zilog Z80?), tak i o jazyky používané v&nbsp;současnosti, které ovšem nepatří mezi (alespoň co se týče používanosti, nikoli nutně kvalit) absolutní špičku.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;oblasti LLM pravděpodobně dojde resp.&nbsp;došlo ke kladné zpětné vazbě &ndash; jazyky s&nbsp;mnoha dostupnými kódy budou LLM modely podporovány mnohem lépe, než méně populární jazyky, což ovšem zpětně ovlivní popularitu již populárních (sic) jazyků &ndash; dnes totiž mnoho vývojářů očekává od LLM poměrně výraznou pomoc (se všemi z&nbsp;toho plynoucími důsledky).</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Krátké programy napsané v&nbsp;assembleru pro ZX Spectrum</h2>

<pre>
ENTRY_POINT   equ $8000
ROM_CLS       equ $0DAF
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        call ROM_CLS    <i>; smazání obrazovky a otevření kanálu číslo 2 (screen)</i>
        ld   A, 42      <i>; kód znaku '*' pro tisk</i>
        call 0x10       <i>; zavolání rutiny v ROM</i>
        ret             <i>; návrat z programu do BASICu</i>
&nbsp;
end ENTRY_POINT
</pre>

<p></p>

<pre>
ATTRIBUTE_ADR equ $5800
ENTRY_POINT   equ $8000
&nbsp;
        org ENTRY_POINT
&nbsp;
<strong>start</strong>:
        ld hl, ATTRIBUTE_ADR  <i>; adresa pro zápis</i>
        ld b, l               <i>; zapisovaná hodnota + počitadlo smyčky</i>
&nbsp;
<strong>loop</strong>:
        ld (hl),l             <i>; zápis hodnoty na adresu (HL)</i>
        inc l                 <i>; zvýšení adresy i zapisované hodnoty</i>
        djnz loop             <i>; kombinace dec b + jp NZ, loop</i>
                              <i>; snížení hodnoty počitadla</i>
                              <i>; skok pokud se ještě nedosáhlo nuly</i>
        ret
&nbsp;
end ENTRY_POINT
</pre>

<pre>
;-----------------------------------------------------------------------------

BITS 16         <i>; 16bitovy vystup pro DOS</i>
CPU 8086        <i>; specifikace pouziteho instrukcniho souboru</i>

;-----------------------------------------------------------------------------

; ukonceni procesu a navrat do DOSu
%macro exit 0
        mov     ah, 0x4c
        int     0x21
%endmacro

; vyprazdneni bufferu klavesnice a cekani na klavesu
%macro wait_key 0
        xor     ax, ax
        int     0x16
%endmacro

; nastaveni grafickeho rezimu
%macro gfx_mode 1
        mov     ah, 0
        mov     al, %1
        int     0x10
%endmacro

;-----------------------------------------------------------------------------
org  0x100        <i>; zacatek kodu pro programy typu COM (vzdy se zacina na 256)</i>

start:
        gfx_mode 0x13       <i>; nastaveni rezimu 320x200 s 256 barvami</i>
        mov ax, 0xa000      <i>; video RAM v textovem rezimu</i>
        mov es, ax
        xor di, di          <i>; nyni ES:DI obsahuje adresu prvniho pixelu ve video RAM</i>

        mov ax, 0
opak:
        mov bx, ax          <i>; y-ová souřadnice</i>

        push ax
        mov cl, al          <i>; barva</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax

        push ax
        mov cl, al          <i>; barva</i>
        add ax, 10          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax

        push ax
        mov cl, al          <i>; barva</i>
        add ax, 20          <i>; horizontalni posun useky</i>
        call putpixel       <i>; vykreslení pixelu</i>
        pop ax

        inc ax              <i>; pusun x+=1, y+=1</i>
        cmp ax, 200         <i>; hranice obrazovky?</i>
        jne opak            <i>; ne-opakujeme</i>

        wait_key            <i>; cekani na klavesu</i>
        exit                <i>; navrat do DOSu</i>

; Vykresleni pixelu
; AX - x-ova souradnice
; BX - y-ova souradnice (staci len BL)
; CL - barva
putpixel:
        mov dx, 0xa000     <i>; zacatek stranky video RAM</i>
        mov es, dx         <i>; nyni obsahuje ES stranku video RAM</i>

        mov di, ax         <i>; horizontalni posun pocitany v bajtech</i>

        mov ax, bx         <i>; y-ova souradnice</i>
        shl ax, 1          <i>; y*2</i>
        shl ax, 1          <i>; y*4</i>
        shl ax, 1          <i>; y*8</i>
        shl ax, 1          <i>; y*16</i>
        shl ax, 1          <i>; y*32</i>
        shl ax, 1          <i>; y*64</i>
        add di, ax         <i>; pricist cast y-oveho posunu</i>
        shl ax, 1          <i>; y*128</i>
        shl ax, 1          <i>; y*256</i>
        add di, ax         <i>; pricist zbytek y-oveho posunu</i>
                           <i>; -> y*64 + y*256 = y*320</i>

        mov [es:di], cl     <i>; vlastni vykresleni pixelu</i>

        ret
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
enum Height : uint
{
    LOW,
    HIGH,
}

fn void demo_enum(Height h)
{
    switch (h)
    {
        case LOW:
        case MEDIUM:
            io::printn("Not high");
            // Implicit break.
        case HIGH:
            io::printn("High");
    }

    // This also works
    switch (h)
    {
        case LOW:
        case MEDIUM:
            io::printn("Not high");
            // Implicit break.
        case Height.HIGH:
            io::printn("High");
    }

    // Completely empty cases are not allowed.
    switch (h)
    {
        case LOW:
            break; // Explicit break required, since switches can't be empty.
        case MEDIUM:
            io::printn("Medium");
        case HIGH:
            break;
    }

    // special checking of switching on enum types
    switch (h)
    {
        case LOW:
        case MEDIUM:
        case HIGH:
            break;
        default:    // warning: default label in switch which covers all enumeration value
            break;
    }

    // Using "nextcase" will fallthrough to the next case statement,
    // and each case statement starts its own scope.
    switch (h)
    {
        case LOW:
            int a = 1;
            io::printn("A");
            nextcase;
        case MEDIUM:
            int a = 2;
            io::printn("B");
            nextcase;
        case HIGH:
            // a is not defined here
            io::printn("C");
    }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>

<pre>
</pre>


<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>




<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Code Rabbit home page<br />
<a href="https://www.coderabbit.ai/">https://www.coderabbit.ai/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů:<br />
<a href="http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/">http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/</a>
</li>

<li>Unified Modeling Language<br />
<a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">https://en.wikipedia.org/wiki/Unified_Modeling_Language</a>
</li>

<li>UML basics: The sequence diagram<br />
<a href="http://www.ibm.com/developerworks/rational/library/3101.html">http://www.ibm.com/developerworks/rational/library/3101.html</a>
</li>

<li>UML 2 State Machine Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm">http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm</a>
</li>

<li>PlantUML (home page)<br />
<a href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>
</li>

<li>PlantUML (download page)<br />
<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
</li>

<li>PlantUML (Language Reference Guide)<br />
<a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>
</li>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz - Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

<li>dot (Manual page)<br />
<a href="http://www.root.cz/man/1/dot/">http://www.root.cz/man/1/dot/</a>
</li>

<li>Ditaa home page<br />
<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>
</li>

<li>Ditaa introduction<br />
<a href="http://ditaa.sourceforge.net/#intro">http://ditaa.sourceforge.net/#intro</a>
</li>

<li>Ditaa usage<br />
<a href="http://ditaa.sourceforge.net/#usage">http://ditaa.sourceforge.net/#usage</a>
</li>

<li>Node, Edge and Graph Attributes<br />
<a href="http://www.graphviz.org/doc/info/attrs.html">http://www.graphviz.org/doc/info/attrs.html</a>
</li>

<li>Graphviz (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Graphviz">http://en.wikipedia.org/wiki/Graphviz</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

