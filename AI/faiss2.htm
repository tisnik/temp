<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>FAISS: knihovna pro rychlé a efektivní vyhledávání podobných vektorů (2. část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>FAISS: knihovna pro rychlé a efektivní vyhledávání podobných vektorů (2. část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. FAISS: knihovna pro rychlé a efektivní vyhledávání podobných vektorů (2. část)</a></p>
<p><a href="#k02">*** 2. Vizualizace koncových bodů vektorů v&nbsp;rovině</a></p>
<p><a href="#k03">*** 3. Vykreslení nejpodobnějších vektorů získaných na základě L<sup>2</sup> metriky</a></p>
<p><a href="#k04">*** 4. Úplný zdrojový kód druhého demonstračního příkladu</a></p>
<p><a href="#k05">*** 5. Nalezení nejpodobnějších vektorů získaných na základě skalárního součinu: varianta s&nbsp;nenormovanými vektory</a></p>
<p><a href="#k06">*** 6. Úplný zdrojový kód třetího demonstračního příkladu</a></p>
<p><a href="#k07">*** 7. Vliv normalizace vektorů při vyhledávání na základě skalárního součinu</a></p>
<p><a href="#k08">*** 8. Úplný zdrojový kód čtvrtého demonstračního příkladu</a></p>
<p><a href="#k09">*** 9. Vykreslení nejpodobnějších vektorů před jejich normalizací</a></p>
<p><a href="#k10">*** 10. Úplný zdrojový kód pátého demonstračního příkladu</a></p>
<p><a href="#k11">*** 11. Vykreslení vektorů formou orientovaných šipek</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. Vykreslení vektorů po jejich normalizaci formou orientovaných šipek</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Vyhledání a vykreslení nejvíce NEpodobných vektorů</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vizualizace koncových bodů vektorů v&nbsp;rovině</h2>

<p></p>

<pre>
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
</pre>

<pre>
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
</pre>

<p></p>

*** image ***

<p></p>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>
<i># - vizualizace koncových bodů vektorů v rovině</i>
&nbsp;
import numpy as np
&nbsp;
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
DIMENSIONS=2
N=1000
K=100
&nbsp;
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
&nbsp;
<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)
&nbsp;
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-9.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vykreslení nejpodobnějších vektorů získaných na základě L<sup>2</sup> metriky</h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úplný zdrojový kód druhého demonstračního příkladu</h2>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>

import faiss
import numpy as np

import matplotlib.pyplot as plt


DIMENSIONS=2
N=1000
K=100

<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")

<i># konstrukce indexu pro vyhledávání na základě vzdáleností</i>
index = faiss.IndexFlatL2(DIMENSIONS)
index.add(vectors)

<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]]).astype("float32")

<i># najít K nejbližších vektorů</i>
distances, indices = index.search(query_vector, K)

<i># --- graf ---</i>

<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)

<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)

<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)

<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)

<i># přidání legendy</i>
plt.legend(loc="upper left")

<i># povolení zobrazení mřížky</i>
plt.grid(True)

<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-A.png")

<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nalezení nejpodobnějších vektorů získaných na základě skalárního součinu: varianta s&nbsp;nenormovanými vektory</h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. Úplný zdrojový kód třetího demonstračního příkladu</h2>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>

import faiss
import numpy as np

import matplotlib.pyplot as plt


DIMENSIONS=2
N=1000
K=100

<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")

<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(vectors)

<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]]).astype("float32")

<i># najít K nejbližších vektorů</i>
distances, indices = index.search(query_vector, K)

<i># --- graf ---</i>

<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)

<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)

<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)

<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)

<i># přidání legendy</i>
plt.legend(loc="upper left")

<i># povolení zobrazení mřížky</i>
plt.grid(True)

<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-B.png")

<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vliv normalizace vektorů při vyhledávání na základě skalárního součinu</h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód čtvrtého demonstračního příkladu</h2>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>

import faiss
import numpy as np

import matplotlib.pyplot as plt


DIMENSIONS=2
N=1000
K=100

<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")

<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   normalized = np.linalg.norm(vector)
   vector /= normalized
   vectors[i] = vector


<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(vectors)

<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
normalized = np.linalg.norm(query_vector)
query_vector /= normalized

<i># najít K nejbližších vektorů</i>
distances, indices = index.search(query_vector, K)

<i># --- graf ---</i>

<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)

<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)

<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)

<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)

<i># přidání legendy</i>
plt.legend(loc="upper left")

<i># povolení zobrazení mřížky</i>
plt.grid(True)

<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-C.png")

<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vykreslení nejpodobnějších vektorů před jejich normalizací</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>

import faiss
import numpy as np

import matplotlib.pyplot as plt


DIMENSIONS=2
N=1000
K=100

<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")

normalized = np.matrix.copy(vectors)

<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   norm = np.linalg.norm(vector)
   normalized[i] = vector / norm

<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(normalized)

<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
norm = np.linalg.norm(query_vector)
normalized_query_vector = query_vector / norm

<i># najít K nejbližších vektorů</i>
distances, indices = index.search(normalized_query_vector, K)

<i># --- graf ---</i>

<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)

<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)

<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)

<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)

<i># přidání legendy</i>
plt.legend(loc="upper left")

<i># povolení zobrazení mřížky</i>
plt.grid(True)

<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-D.png")

<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>

import faiss
import numpy as np

import matplotlib.pyplot as plt


DIMENSIONS=2
N=100
K=10

<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")

normalized = np.matrix.copy(vectors)

<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   norm = np.linalg.norm(vector)
   normalized[i] = vector / norm

<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(normalized)

<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
norm = np.linalg.norm(query_vector)
normalized_query_vector = query_vector / norm

<i># najít K nejbližších vektorů</i>
distances, indices = index.search(normalized_query_vector, K)

<i># --- graf ---</i>

<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)

<i># vykreslení všech náhodně vygenerovaných vektorů</i>
for i in range(vectors.shape[0]):
    plt.arrow(0, 0, vectors[i, 0], vectors[i, 1], head_width=0.02, head_length=0.02, color="black")

<i># vykreslení nejpodobnějších vektorů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
for i in range(xs.shape[0]):
    plt.arrow(0, 0, xs[i], ys[i], head_width=0.02, head_length=0.02, color="red")

<i># vykreslení vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.arrow(0,0, x, y, head_width=0.03, head_length=0.03, color="blue")

<i># přidání legendy</i>
plt.legend(loc="upper left")

<i># povolení zobrazení mřížky</i>
plt.grid(True)

<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-E.png")

<i># zobrazení grafu</i>
plt.show()
</pre>


<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>

import faiss
import numpy as np

import matplotlib.pyplot as plt


DIMENSIONS=2
N=100
K=10

<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")

normalized = np.matrix.copy(vectors)

<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   norm = np.linalg.norm(vector)
   normalized[i] = vector / norm

<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(normalized)

<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
norm = np.linalg.norm(query_vector)
normalized_query_vector = query_vector / norm

<i># najít K nejbližších vektorů</i>
distances, indices = index.search(normalized_query_vector, K)

<i># --- graf ---</i>

<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)

<i># vykreslení všech náhodně vygenerovaných vektorů</i>
for i in range(vectors.shape[0]):
    plt.arrow(0, 0, normalized[i, 0], normalized[i, 1], head_width=0.02, head_length=0.02, color="black")

<i># vykreslení nejpodobnějších vektorů</i>
xs = normalized[:,0][indices][0]
ys = normalized[:,1][indices][0]
for i in range(xs.shape[0]):
    plt.arrow(0, 0, xs[i], ys[i], head_width=0.02, head_length=0.02, color="red")

<i># vykreslení vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = normalized_query_vector[0][0]
y = normalized_query_vector[0][1]
plt.arrow(0,0, x, y, head_width=0.03, head_length=0.03, color="blue")

<i># přidání legendy</i>
plt.legend(loc="upper left")

<i># povolení zobrazení mřížky</i>
plt.grid(True)

<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-F.png")

<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>

import faiss
import numpy as np

import matplotlib.pyplot as plt


DIMENSIONS=2
N=1000
K=100

<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")

normalized = np.matrix.copy(vectors)

<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   norm = np.linalg.norm(vector)
   normalized[i] = vector / norm

<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(normalized)

<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
norm = np.linalg.norm(query_vector)
normalized_query_vector = query_vector / norm

<i># najít K nejbližších vektorů</i>
distances, indices = index.search(-normalized_query_vector, K)

<i># --- graf ---</i>

<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)

<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)

<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)

<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)

<i># přidání legendy</i>
plt.legend(loc="upper left")

<i># povolení zobrazení mřížky</i>
plt.grid(True)

<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-G.png")

<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady vytvořené v&nbsp;Pythonu a popsané <a
href="https://www.root.cz/clanky/faiss-knihovna-pro-rychle-a-efektivni-vyhledavani-podobnych-vektoru/">v&nbsp;předchozím</a>
i dnešním článku najdete v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs/">https://github.com/tisnik/most-popular-python-libs/</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>faiss-1.py</td><td>seznamy souřadnic bodů v&nbsp;rovině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-1.py</a></td></tr>
<tr><td> 2</td><td>faiss-2.py</td><td>konstrukce matice se souřadnicemi bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-2.py</a></td></tr>
<tr><td> 3</td><td>faiss-3.py</td><td>konstrukce indexu pro vyhledávání na základě vzdálenosti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-3.py</a></td></tr>
<tr><td> 4</td><td>faiss-4.py</td><td>nalezení nejbližších bodů k&nbsp;zadaným souřadnicím &ndash; výpis indexů nalezených bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-4.py</a></td></tr>
<tr><td> 5</td><td>faiss-5.py</td><td>nalezení nejbližších bodů k&nbsp;zadaným souřadnicím &ndash; výpis souřadnic nalezených bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-5.py</a></td></tr>
<tr><td> 6</td><td>faiss-6.py</td><td>vyhledávání bodů na základě skalárního součinu bez normalizace vektorů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-6.py</a></td></tr>
<tr><td> 7</td><td>faiss-7.py</td><td>vyhledávání bodů na základě skalárního součinu s&nbsp;normalizací vektorů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-7.py</a></td></tr>
<tr><td> 8</td><td>faiss-8.py</td><td>jednoduchý benchmark rychlosti vyhledávání knihovnou FAISS</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>faiss-9.py</td><td>vizualizace koncových bodů vektorů v&nbsp;rovině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-9.py</a></td></tr>
<tr><td>10</td><td>faiss-A.py</td><td>vykreslení nejpodobnějších vektorů získaných na základě L2 metriky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-A.py</a></td></tr>
<tr><td>11</td><td>faiss-B.py</td><td>nalezení nejpodobnějších vektorů získaných na základě skalárního součinu: varianta s&nbsp;nenormovanými vektory</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-B.py</a></td></tr>
<tr><td>12</td><td>faiss-C.py</td><td>nalezení nejpodobnějších vektorů získaných na základě skalárního součinu: varianta s&nbsp;normovanými vektory</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-C.py</a></td></tr>
<tr><td>13</td><td>faiss-D.py</td><td>vykreslení nejpodobnějších vektorů před jejich normalizací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-D.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-D.py</a></td></tr>
<tr><td>14</td><td>faiss-E.py</td><td>vykreslení vektorů formou orientovaných šipek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-E.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-E.py</a></td></tr>
<tr><td>15</td><td>faiss-F.py</td><td>vykreslení vektorů po jejich normalizaci formou orientovaných šipek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-F.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-F.py</a></td></tr>
<tr><td>16</td><td>faiss-G.py</td><td>vyhledání a vykreslení nejvíce NEpodobných vektorů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-G.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-G.py</a></td></tr>
<tr><td>17</td><td>pyproject.toml</td><td>soubor s&nbsp;projektem a definicí závislostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/pyproject.toml">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/pyproject.toml</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>FAISS (Facebook AI Similarity Search)<br />
<a href="https://en.wikipedia.org/wiki/FAISS">https://en.wikipedia.org/wiki/FAISS</a>
</li>

<li>FAISS documentation<br />
<a href="https://faiss.ai/">https://faiss.ai/</a>
</li>

<li>Introduction to Facebook AI Similarity Search (Faiss)<br />
<a href="https://www.pinecone.io/learn/series/faiss/faiss-tutorial/">https://www.pinecone.io/learn/series/faiss/faiss-tutorial/</a>
</li>

<li>Faiss: Efficient Similarity Search and Clustering of Dense Vectors<br />
<a href="https://medium.com/@pankaj_pandey/faiss-efficient-similarity-search-and-clustering-of-dense-vectors-dace1df1e235">https://medium.com/@pankaj_pandey/faiss-efficient-similarity-search-and-clustering-of-dense-vectors-dace1df1e235</a>
</li>

<li>Cosine Distance vs Dot Product vs Euclidean in vector similarity search<br />
<a href="https://medium.com/data-science-collective/cosine-distance-vs-dot-product-vs-euclidean-in-vector-similarity-search-227a6db32edb">https://medium.com/data-science-collective/cosine-distance-vs-dot-product-vs-euclidean-in-vector-similarity-search-227a6db32edb</a>
</li>

<li>Top 8 Vector Databases in 2025: Features, Use Cases, and Comparisons<br />
<a href="https://synapsefabric.com/top-8-vector-databases-in-2025-features-use-cases-and-comparisons/">https://synapsefabric.com/top-8-vector-databases-in-2025-features-use-cases-and-comparisons/</a>
</li>

<li>Is FAISS a Vector Database? Complete Guide<br />
<a href="https://mljourney.com/is-faiss-a-vector-database-complete-guide/">https://mljourney.com/is-faiss-a-vector-database-complete-guide/</a>
</li>

<li>Vector database<br />
<a href="https://en.wikipedia.org/wiki/Vector_database">https://en.wikipedia.org/wiki/Vector_database</a>
</li>

<li>Similarity search<br />
<a href="https://en.wikipedia.org/wiki/Similarity_search">https://en.wikipedia.org/wiki/Similarity_search</a>
</li>

<li>Nearest neighbor search<br />
<a href="https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximation_methods">https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximation_methods</a>
</li>

<li>Decoding Similarity Search with FAISS: A Practical Approach<br />
<a href="https://www.luminis.eu/blog/decoding-similarity-search-with-faiss-a-practical-approach/">https://www.luminis.eu/blog/decoding-similarity-search-with-faiss-a-practical-approach/</a>
</li>

<li>MetricType and distances<br />
<a href="https://github.com/facebookresearch/faiss/wiki/MetricType-and-distances">https://github.com/facebookresearch/faiss/wiki/MetricType-and-distances</a>
</li>

<li>RAG - Retrieval-augmented generation<br />
<a href="https://en.wikipedia.org/wiki/Retrieval-augmented_generation">https://en.wikipedia.org/wiki/Retrieval-augmented_generation</a>
</li>

<li>pgvector na GitHubu<br />
<a href="https://github.com/pgvector/pgvector">https://github.com/pgvector/pgvector</a>
</li>

<li>Why we replaced Pinecone with PGVector<br />
<a href="https://www.confident-ai.com/blog/why-we-replaced-pinecone-with-pgvector">https://www.confident-ai.com/blog/why-we-replaced-pinecone-with-pgvector</a>
</li>

<li>PostgreSQL as VectorDB - Beginner Tutorial<br />
<a href="https://www.youtube.com/watch?v=Ff3tJ4pJEa4">https://www.youtube.com/watch?v=Ff3tJ4pJEa4</a>
</li>

<li>What is a Vector Database? (neobsahuje odpověď na otázku v titulku :-)<br />
<a href="https://www.youtube.com/watch?v=t9IDoenf-lo">https://www.youtube.com/watch?v=t9IDoenf-lo</a>
</li>

<li>PGVector: Turn PostgreSQL Into A Vector Database<br />
<a href="https://www.youtube.com/watch?v=j1QcPSLj7u0">https://www.youtube.com/watch?v=j1QcPSLj7u0</a>
</li>

<li>Milvus<br />
<a href="https://milvus.io/">https://milvus.io/</a>
</li>

<li>Vector Databases simply explained! (Embeddings &amp; Indexes)<br />
<a href="https://www.youtube.com/watch?v=dN0lsF2cvm4">https://www.youtube.com/watch?v=dN0lsF2cvm4</a>
</li>

<li>Vector databases are so hot right now. WTF are they?<br />
<a href="https://www.youtube.com/watch?v=klTvEwg3oJ4">https://www.youtube.com/watch?v=klTvEwg3oJ4</a>
</li>

<li>Step-by-Step Guide to Installing “pgvector” and Loading Data in PostgreSQL<br />
<a href="https://medium.com/@besttechreads/step-by-step-guide-to-installing-pgvector-and-loading-data-in-postgresql-f2cffb5dec43">https://medium.com/@besttechreads/step-by-step-guide-to-installing-pgvector-and-loading-data-in-postgresql-f2cffb5dec43</a>
</li>

<li>Best 17 Vector Databases for 2025<br />
<a href="https://lakefs.io/blog/12-vector-databases-2023/">https://lakefs.io/blog/12-vector-databases-2023/</a>
</li>

<li>Top 15 Vector Databases that You Must Try in 2025<br />
<a href="https://www.geeksforgeeks.org/top-vector-databases/">https://www.geeksforgeeks.org/top-vector-databases/</a>
</li>

<li>Picking a vector database: a comparison and guide for 2023<br />
<a href="https://benchmark.vectorview.ai/vectordbs.html">https://benchmark.vectorview.ai/vectordbs.html</a>
</li>

<li>Top 9 Vector Databases as of Feburary 2025<br />
<a href="https://www.shakudo.io/blog/top-9-vector-databases">https://www.shakudo.io/blog/top-9-vector-databases</a>
</li>

<li>What is a vector database?<br />
<a href="https://www.ibm.com/think/topics/vector-database">https://www.ibm.com/think/topics/vector-database</a>
</li>

<li>SQL injection<br />
<a href="https://en.wikipedia.org/wiki/SQL_injection">https://en.wikipedia.org/wiki/SQL_injection</a>
</li>

<li>Cosine similarity<br />
<a href="https://en.wikipedia.org/wiki/Cosine_similarity">https://en.wikipedia.org/wiki/Cosine_similarity</a>
</li>

<li>Euclidean distance<br />
<a href="https://en.wikipedia.org/wiki/Euclidean_distance">https://en.wikipedia.org/wiki/Euclidean_distance</a>
</li>

<li>Dot product<br />
<a href="https://en.wikipedia.org/wiki/Dot_product">https://en.wikipedia.org/wiki/Dot_product</a>
</li>

<li>Hammingova vzdálenost<br />
<a href="https://cs.wikipedia.org/wiki/Hammingova_vzd%C3%A1lenost">https://cs.wikipedia.org/wiki/Hammingova_vzd%C3%A1lenost</a>
</li>

<li>Jaccard index<br />
<a href="https://en.wikipedia.org/wiki/Jaccard_index">https://en.wikipedia.org/wiki/Jaccard_index</a>
</li>

<li>Manhattanská metrika<br />
<a href="https://cs.wikipedia.org/wiki/Manhattansk%C3%A1_metrika">https://cs.wikipedia.org/wiki/Manhattansk%C3%A1_metrika</a>
</li>

<li>pgvector: vektorová databáze postavená na Postgresu<br />
<a href="https://www.root.cz/clanky/pgvector-vektorova-databaze-postavena-na-postgresu/">https://www.root.cz/clanky/pgvector-vektorova-databaze-postavena-na-postgresu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

