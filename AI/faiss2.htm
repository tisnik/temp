<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>FAISS: knihovna pro rychlé a efektivní vyhledávání podobných vektorů (2. část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>FAISS: knihovna pro rychlé a efektivní vyhledávání podobných vektorů (2. část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. FAISS: knihovna pro rychlé a efektivní vyhledávání podobných vektorů (2. část)</a></p>
<p><a href="#k02">2. Vizualizace koncových bodů vektorů v&nbsp;rovině</a></p>
<p><a href="#k03">3. Vykreslení nejpodobnějších vektorů získaných na základě L<sup>2</sup> metriky</a></p>
<p><a href="#k04">4. Úplný zdrojový kód druhého demonstračního příkladu</a></p>
<p><a href="#k05">5. Nalezení nejpodobnějších vektorů získaných na základě skalárního součinu: varianta s&nbsp;nenormovanými vektory</a></p>
<p><a href="#k06">6. Úplný zdrojový kód třetího demonstračního příkladu</a></p>
<p><a href="#k07">7. Vliv normalizace vektorů při vyhledávání na základě skalárního součinu</a></p>
<p><a href="#k08">8. Úplný zdrojový kód čtvrtého demonstračního příkladu</a></p>
<p><a href="#k09">9. Vykreslení nejpodobnějších vektorů před jejich normalizací</a></p>
<p><a href="#k10">10. Úplný zdrojový kód pátého demonstračního příkladu</a></p>
<p><a href="#k11">*** 11. Vykreslení vektorů formou orientovaných šipek</a></p>
<p><a href="#k12">12. Úplný zdrojový kód pátého demonstračního příkladu</a></p>
<p><a href="#k13">*** 13. Vykreslení vektorů po jejich normalizaci formou orientovaných šipek</a></p>
<p><a href="#k14">14. Úplný zdrojový kód šestého demonstračního příkladu</a></p>
<p><a href="#k15">*** 15. Vyhledání a vykreslení nejvíce NEpodobných vektorů</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. FAISS: knihovna pro rychlé a efektivní vyhledávání podobných vektorů (2. část)</h2>

<p>Na <a
href="https://www.root.cz/clanky/faiss-knihovna-pro-rychle-a-efektivni-vyhledavani-podobnych-vektoru/">úvodní
článek</a> o knihovně FAISS dnes navážeme. Zabývat se přitom budeme sice na
první pohled relativně snadnou otázkou, která však má několik odpovědí &ndash;
které vektory považujeme za podobné a které nikoli. Odpověď pochopitelně do
značné míry závisí na tom, jakou metriku při porovnávání vektorů použijeme.
Z&nbsp;mnoha teoreticky použitelných metrik se nejčastěji využívá metrika
L<sup>2</sup> a taktéž metrika založená na výpočtu skalárního součinu
normalizovaných vektorů. Dnes si na několika demonstračních příkladech
vysvětlíme, jakým způsobem se tyto metriky od sebe odlišují, proč musí být
vektory normalizovány (při použití skalárního součinu) i to, jakým způsobem je
možné nalézt vektory, které se od zadaného vektoru nejvíce <i>odlišují</i>.</p>

<p><div class="rs-tip-major">Poznámka: všechny příklady sice budou pro
jednoduchost a názornost používat vektory se dvěma složkami (ty se snadno
vizualizují), ovšem všechny příklady jsou bez problémů rozšiřitelné i pro
vícedimenzionální prostory &ndash; za předpokladu, že v&nbsp;nich jsou
definovány metriky <i>L<sup>2</sup></i> i skalární součin.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vizualizace koncových bodů vektorů v&nbsp;rovině</h2>

<p>Ve všech demonstračních příkladech, s&nbsp;nimiž se postupně seznámíme
v&nbsp;dnešním článku, budeme nějakým způsobem vizualizovat dvoudimenzionální
vektory v&nbsp;rovině. K&nbsp;dispozici máme dvě základní metody. Buď
vykreslíme pouze koncové body vektorů a nebo vektory vykreslíme formou
orientovaných šipek. Podívejme se nejdříve na první z&nbsp;těchto způsobů,
protože je jednodušší a navíc nám umožní vykreslení i několika tisíc vektorů.
K&nbsp;vizualizaci pro jednoduchost použijeme knihovnu <a
href="https://matplotlib.org/">Matplotlib</a> s&nbsp;jejímiž (některými)
možnostmi jsme se seznámili v&nbsp;článku <a
href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">Tvorba
grafů v&nbsp;Jupyter Notebooku s&nbsp;využitím knihovny Matplotlib</a>.</p>

<p>Nejprve si necháme vygenerovat <strong>N</strong> vektorů
s&nbsp;<strong>DIMENSIONS</strong> dimenzemi (přičemž
<strong>DIMENSIONS</strong>=2):</p>

<pre>
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
</pre>

<p>Výsledkem bude dvourozměrná matice se dvěma sloupci a <strong>N</strong>
řádky. První sloupec obsahuje x-ové souřadnice, sloupec druhý pak souřadnice
y-ové. Takové body lze s&nbsp;využitím Matplotlibu vykreslit snadno:</p>

<pre>
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
</pre>

<p>Do grafu přidáme legendu (popisek, razítko), mřížku a graf si necháme
vykreslit a popř.&nbsp;i uložit do souboru:</p>

<pre>
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-9.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>Výsledek může vypadat následovně:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 525px"><a href="https://www.root.cz/obrazek/1210248/"><img src="https://i.iinfo.cz/images/578/faiss-2-1-large.png" class="image-1210248" width="525" height="525" data-prev-filename="https://i.iinfo.cz/images/578/faiss-2-1-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/578/faiss-2-1-prev.webp" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/578/faiss-2-1-large.png" data-large-filename-webp="https://i.iinfo.cz/images/578/faiss-2-1-large.webp" data-large-width="525" data-large-height="525" alt="Vektorová databáze FAISS" data-description="Vektorová databáze FAISS" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 525px" /></a>
<p>Obrázek 1: Vizualizace koncových bodů vektorů v&nbsp;rovině<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<p>Úplný zdrojový kód skriptu:</p>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>
<i># - vizualizace koncových bodů vektorů v rovině</i>
&nbsp;
import numpy as np
&nbsp;
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
DIMENSIONS=2
N=1000
K=100
&nbsp;
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
&nbsp;
<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)
&nbsp;
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-9.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: tento demonstrační příklad naleznete na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-9.py</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vykreslení nejpodobnějších vektorů získaných na základě L<sup>2</sup> metriky</h2>

<p>V&nbsp;dalším kroku v&nbsp;grafu zvýrazníme ty vektory, které jsou
nejpodobnější zadanému vstupnímu vektoru. Podobnost bude rozpoznávána na
základě standardní L<sup>2</sup> metriky, což znamená, že se vlastně získá
sekvence vektorů, jejichž koncové body jsou nejblíže zadanému vektoru. Opět
budeme pracovat v&nbsp;rovině, tj.&nbsp;konstanta <strong>DIMENSIONS</strong>
bude nastavena na hodnotu 2.</p>

<p>V&nbsp;prvním kroku vytvoříme množinu <strong>N</strong> dvoudimenzionálních
vektorů a zkonstruujeme z&nbsp;nich index založený na již zmíněné metrice
L<sup>2</sup>:</p>

<pre>
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
&nbsp;
<i># konstrukce indexu pro vyhledávání na základě vzdáleností</i>
index = faiss.IndexFlatL2(DIMENSIONS)
index.add(vectors)
</pre>

<p>Dále v&nbsp;této množině nalezneme <strong>K</strong> vektorů, jejichž
koncové body jsou nejblíže koncovému bodu vektoru
<strong>query_vector</strong>:</p>

<pre>
<i># najít K nejbližších vektorů</i>
distances, indices = index.search(query_vector, K)
</pre>

<p>Vykreslení grafu bude nyní probíhat ve třech krocích:</p>

<ol>
<li>Vykreslení původní množiny náhodných vektorů</li>
<li>Vykreslení nejpodobnějších vektorů odlišnou barvou (původní vektory resp.&nbsp;jejich koncové body se překreslí)</li>
<li>Vykreslení zvýrazněného koncového bodu vektoru <strong>query_vector</strong></li>
</ol>

<p>Vykreslení bude probíhat následovně:</p>

<pre>
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
&nbsp;
<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)
&nbsp;
<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)
</pre>

<p>A takto by mohl vypadat výsledek:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 525px"><a href="https://www.root.cz/obrazek/1210251/"><img src="https://i.iinfo.cz/images/578/faiss-2-2-large.png" class="image-1210251" width="525" height="525" data-prev-filename="https://i.iinfo.cz/images/578/faiss-2-2-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/578/faiss-2-2-prev.webp" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/578/faiss-2-2-large.png" data-large-filename-webp="https://i.iinfo.cz/images/578/faiss-2-2-large.webp" data-large-width="525" data-large-height="525" alt="Vektorová databáze FAISS" data-description="Vektorová databáze FAISS" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 525px" /></a>
<p>Obrázek 2: Vykreslení nejpodobnějších vektorů získaných na základě L<sup>2</sup> metriky<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>

<p><div class="rs-tip-major">Poznámka: červené body by měly tvořit kruh.
Ostatně si to vyzkoušejme na větším množství vektorů:</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úplný zdrojový kód druhého demonstračního příkladu</h2>

<p>Úplný zdrojový kód demonstračního příkladu, který po svém spuštění vykreslí
koncové body tisícovky vektorů s&nbsp;vyznačením jednoho sta vektorů, které se
nejvíce podobají vektoru [0.5, 0.5], vypadá následovně. Celkový počet vektorů
je možné ovlivnit hodnotou konstanty <strong>N</strong>, počet nejpodobnějších
vektorů pak konstantou <strong>K</strong>:</p>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>
<i># - vykreslení nejpodobnějších vektorů získaných na základě L2 metriky</i>
<i># - vektory nejsou normalizovány</i>
&nbsp;
import faiss
import numpy as np
&nbsp;
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
DIMENSIONS=2
N=1000
K=100
&nbsp;
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
&nbsp;
<i># konstrukce indexu pro vyhledávání na základě vzdáleností</i>
index = faiss.IndexFlatL2(DIMENSIONS)
index.add(vectors)
&nbsp;
<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]]).astype("float32")
&nbsp;
<i># najít K nejbližších vektorů</i>
distances, indices = index.search(query_vector, K)
&nbsp;
<i># --- graf ---</i>
&nbsp;
<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)
&nbsp;
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
&nbsp;
<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)
&nbsp;
<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-A.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: tento demonstrační příklad naleznete na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-A.py</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nalezení nejpodobnějších vektorů získaných na základě skalárního součinu: varianta s&nbsp;nenormovanými vektory</h2>

<p>Pokusme se nyní vyhledat nejpodobnější vektory nikoli na základě metriky
L<sup>2</sup>, ale podle hodnoty skalárního součinu vektoru
<strong>query_vector</strong> s&nbsp;vektory z&nbsp;původní množiny. Pro tento
účel upravíme zdrojový kód provádějící konstrukci indexu do následující
podoby:</p>

<pre>
<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(vectors)
</pre>

<p>Zbytek demonstračního příkladu, tj.&nbsp;vykreslení koncových bodů náhodných
vektorů, nejpodobnějších vektorů a taktéž koncového bodu vektoru
<strong>query_vector</strong>, zůstane naprosto stejný:</p>

<pre>
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
&nbsp;
<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)
&nbsp;
<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)
</pre>

<p>Výsledky ovšem v&nbsp;tomto případě budou zcela odlišné, protože
nejpodobnější vektory nyní ani zdaleka nebudou vektory
&bdquo;nejbližšími&ldquo;. To je zcela jasně patrné z&nbsp;grafu, který je
skriptem vykreslen:</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 525px"><a href="https://www.root.cz/obrazek/1210254/"><img src="https://i.iinfo.cz/images/578/faiss-2-3-large.png" class="image-1210254" width="525" height="525" data-prev-filename="https://i.iinfo.cz/images/578/faiss-2-3-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/578/faiss-2-3-prev.webp" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/578/faiss-2-3-large.png" data-large-filename-webp="https://i.iinfo.cz/images/578/faiss-2-3-large.webp" data-large-width="525" data-large-height="525" alt="Vektorová databáze FAISS" data-description="Vektorová databáze FAISS" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 525px" /></a>
<p>Obrázek 4: Nalezení nejpodobnějších vektorů získaných na základě skalárního součinu: varianta s&nbsp;nenormovanými vektory<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k06"></a></p>
<h2 id="k06">6. Úplný zdrojový kód třetího demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního třetího demonstračního příkladu, který po svém
spuštění nejpodobnější vektory na základě skalárního součinu, vypadá takto:</p>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>
<i># - vykreslení nejpodobnějších vektorů získaných na základě skalárního součinu</i>
<i># - vektory nejsou normalizovány</i>
&nbsp;
import faiss
import numpy as np
&nbsp;
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
DIMENSIONS=2
N=1000
K=100
&nbsp;
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
&nbsp;
<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(vectors)
&nbsp;
<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]]).astype("float32")
&nbsp;
<i># najít K nejbližších vektorů</i>
distances, indices = index.search(query_vector, K)
&nbsp;
<i># --- graf ---</i>
&nbsp;
<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)
&nbsp;
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
&nbsp;
<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)
&nbsp;
<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-B.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: tento demonstrační příklad naleznete na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-B.py</a>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vliv normalizace vektorů při vyhledávání na základě skalárního součinu</h2>

<p>Již minule jsme si řekli, že aby vyhledávání podobných vektorů na základě
skalárního součinu dávalo korektní výsledky, musí být vektory normalizovány.
Přitom je nutné normalizovat jak vektory vkládané do indexu, tak i
<strong>query_vector</strong>, tj.&nbsp;vektor, k&nbsp;němuž hledáme jemu
nejpodobnější vektory z&nbsp;indexu.</p>

<p>Normalizaci je možné v&nbsp;praxi realizovat různými způsoby (některé nabízí
přímo knihovna Numpy atd.), ovšem můžeme ji provést i &bdquo;ručně&ldquo;,
tj.&nbsp;například následujícím kódem, který postupně nahradí všechny
nenormalizované vektory jejich normalizovanými variantami:</p>

<pre>
<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   normalized = np.linalg.norm(vector)
   vector /= normalized
   vectors[i] = vector
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě potřeby si přidejte
kontrolu na nulové vektory.</div></p>

<p>Stejným způsobem můžeme provést normalizaci vektoru
<strong>query_vector</strong>:</p>

<pre>
<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
normalized = np.linalg.norm(query_vector)
query_vector /= normalized
</pre>

<p>Nyní by mělo být z&nbsp;výsledného grafu patrné, že se skutečně našly
nejpodobnější vektory, což v&nbsp;případě vektorů normalizovaných (jejich
koncové body leží na jednotkové kružnici) znamená vektory s&nbsp;podobnými
směrnicemi. Všechny tyto podobné vektory (červené značky) tedy nalezneme nalevo
a napravo od <strong>query_vector</strong>u (modrá tečka):</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 525px"><a href="https://www.root.cz/obrazek/1210257/"><img src="https://i.iinfo.cz/images/578/faiss-2-4-large.png" class="image-1210257" width="525" height="525" data-prev-filename="https://i.iinfo.cz/images/578/faiss-2-4-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/578/faiss-2-4-prev.webp" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/578/faiss-2-4-large.png" data-large-filename-webp="https://i.iinfo.cz/images/578/faiss-2-4-large.webp" data-large-width="525" data-large-height="525" alt="Vektorová databáze FAISS" data-description="Vektorová databáze FAISS" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 525px" /></a>
<p>Obrázek 5: Vliv normalizace vektorů při vyhledávání na základě skalárního součinu<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód čtvrtého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního čtvrtého demonstračního příkladu, který po svém
spuštění vyhledá a vykreslí nejpodobnější <i>normalizované</i> vektory na
základě skalárního součinu, vypadá následovně:</p>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>
<i># - vykreslení nejpodobnějších vektorů získaných na základě skalárního součinu</i>
<i># - vektory jsou normalizovány</i>
&nbsp;
import faiss
import numpy as np
&nbsp;
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
DIMENSIONS=2
N=1000
K=100
&nbsp;
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
&nbsp;
<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   normalized = np.linalg.norm(vector)
   vector /= normalized
   vectors[i] = vector
&nbsp;
&nbsp;
<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(vectors)
&nbsp;
<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
normalized = np.linalg.norm(query_vector)
query_vector /= normalized
&nbsp;
<i># najít K nejbližších vektorů</i>
distances, indices = index.search(query_vector, K)
&nbsp;
<i># --- graf ---</i>
&nbsp;
<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)
&nbsp;
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
&nbsp;
<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)
&nbsp;
<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-C.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: tento demonstrační příklad naleznete na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-C.py</a>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vykreslení nejpodobnějších vektorů před jejich normalizací</h2>

<p>Nyní si předchozí demonstrační příklad nepatrně upravíme. Budeme sice stále
hledat nejpodobnější vektory s&nbsp;využitím skalárního součinu (aplikovaného
na normalizované vektory &ndash; což je jediný korektní způsob), ovšem
vykreslovat budeme vektory původní, tj.&nbsp;ještě před jejich normalizací. To
si vyžádá určité zásahy do zdrojového kódu.</p>

<p>Normalizace vektorů z&nbsp;matice <strong>vectors</strong> do <i>nové</i>
matice pojmenované <strong>normalized</strong> (kopie původní matice je ovšem
poměrně nešťastný trik):</p>

<pre>
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
&nbsp;
normalized = np.matrix.copy(vectors)
&nbsp;
<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   norm = np.linalg.norm(vector)
   normalized[i] = vector / norm
</pre>

<p>Index bude zkonstruován na základě normalizovaných vektorů:</p>
<pre>
<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(normalized)
</pre>

<p>I <strong>query_vector</strong> bude mít svoji normalizovanou podobu
uloženou do proměnné <strong>normalized_query_vector</strong>:</p>

<pre>
&nbsp;
<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
norm = np.linalg.norm(query_vector)
normalized_query_vector = query_vector / norm
</pre>

<p>Vykreslovat ovšem budeme původní varianty vektorů &ndash; viz podtržené
části kódu:</p>

<pre>
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(<u>vectors[:,0]</u>, <u>vectors[:,1]</u>, "+k", label="original vectors", markersize=5)
&nbsp;
<i># vykreslení nejbližších bodů</i>
xs = <u>vectors[:,0][indices][0]</u>
ys = <u>vectors[:,1][indices][0]</u>
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)
&nbsp;
<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = <u>query_vector[0][0]</u>
y = <u>query_vector[0][1]</u>
plt.plot(x, y, "ob", label="query vector", markersize=10)
</pre>

<p>Z&nbsp;vizualizovaných výsledků je patrné, že nejpodobnější jsou takové
vektory, které mají směrnici blízkou vektoru <strong>query_vector</strong>,
ovšem zcela se ignoruje vzdálenost koncových bodů (ta nemá na výsledky
vyhledání žádný vliv):</p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 525px"><a href="https://www.root.cz/obrazek/1210260/"><img src="https://i.iinfo.cz/images/578/faiss-2-5-large.png" class="image-1210260" width="525" height="525" data-prev-filename="https://i.iinfo.cz/images/578/faiss-2-5-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/578/faiss-2-5-prev.webp" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/578/faiss-2-5-large.png" data-large-filename-webp="https://i.iinfo.cz/images/578/faiss-2-5-large.webp" data-large-width="525" data-large-height="525" alt="Vektorová databáze FAISS" data-description="Vektorová databáze FAISS" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 525px" /></a>
<p>Obrázek 6: Nejpodobnější vektory nalezené s&nbsp;využitím skalárního součinu jejich normalizovaných variant.<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k10"></a></p>
<h2 id="k10">10. Úplný zdrojový kód pátého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního pátého demonstračního příkladu, který po svém
spuštění vykreslí nejpodobnější nejpodobnější vektory v&nbsp;jejich původní
(nenormalizované) podobě na základě skalárního součinu, vypadá následovně:</p>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>
<i># - vykreslení nejpodobnějších vektorů získaných na základě skalárního součinu</i>
<i># - vektory jsou normalizovány</i>
<i># - vykresleny jsou ovšem původní vektory</i>
&nbsp;
import faiss
import numpy as np
&nbsp;
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
DIMENSIONS=2
N=1000
K=100
&nbsp;
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
&nbsp;
normalized = np.matrix.copy(vectors)
&nbsp;
<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   norm = np.linalg.norm(vector)
   normalized[i] = vector / norm
&nbsp;
<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(normalized)
&nbsp;
<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
norm = np.linalg.norm(query_vector)
normalized_query_vector = query_vector / norm
&nbsp;
<i># najít K nejbližších vektorů</i>
distances, indices = index.search(normalized_query_vector, K)
&nbsp;
<i># --- graf ---</i>
&nbsp;
<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)
&nbsp;
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
&nbsp;
<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)
&nbsp;
<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-D.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: tento demonstrační příklad naleznete na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-D.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-D.py</a>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vykreslení vektorů formou orientovaných šipek</h2>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 525px"><a href="https://www.root.cz/obrazek/1210263/"><img src="https://i.iinfo.cz/images/578/faiss-2-6-large.png" class="image-1210263" width="525" height="525" data-prev-filename="https://i.iinfo.cz/images/578/faiss-2-6-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/578/faiss-2-6-prev.webp" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/578/faiss-2-6-large.png" data-large-filename-webp="https://i.iinfo.cz/images/578/faiss-2-6-large.webp" data-large-width="525" data-large-height="525" alt="Vektorová databáze FAISS" data-description="Vektorová databáze FAISS" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 525px" /></a>
<p>Vektorová databáze FAISS<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k12"></a></p>
<h2 id="k12">12. Úplný zdrojový kód pátého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního pátého demonstračního příkladu, který po svém
spuštění vykreslí všechny vektory (vstupní i nalezené) formou orientovaných
šipek, vypadá následovně:</p>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>
&nbsp;
import faiss
import numpy as np
&nbsp;
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
DIMENSIONS=2
N=100
K=10
&nbsp;
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
&nbsp;
normalized = np.matrix.copy(vectors)
&nbsp;
<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   norm = np.linalg.norm(vector)
   normalized[i] = vector / norm
&nbsp;
<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(normalized)
&nbsp;
<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
norm = np.linalg.norm(query_vector)
normalized_query_vector = query_vector / norm
&nbsp;
<i># najít K nejbližších vektorů</i>
distances, indices = index.search(normalized_query_vector, K)
&nbsp;
<i># --- graf ---</i>
&nbsp;
<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)
&nbsp;
<i># vykreslení všech náhodně vygenerovaných vektorů</i>
for i in range(vectors.shape[0]):
    plt.arrow(0, 0, vectors[i, 0], vectors[i, 1], head_width=0.02, head_length=0.02, color="black")
&nbsp;
<i># vykreslení nejpodobnějších vektorů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
for i in range(xs.shape[0]):
    plt.arrow(0, 0, xs[i], ys[i], head_width=0.02, head_length=0.02, color="red")
&nbsp;
<i># vykreslení vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.arrow(0,0, x, y, head_width=0.03, head_length=0.03, color="blue")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-E.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: tento demonstrační příklad naleznete na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-E.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-E.py</a>.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vykreslení vektorů po jejich normalizaci formou orientovaných šipek</h2>

<p></p>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 525px"><a href="https://www.root.cz/obrazek/1210266/"><img src="https://i.iinfo.cz/images/578/faiss-2-7-large.png" class="image-1210266" width="525" height="525" data-prev-filename="https://i.iinfo.cz/images/578/faiss-2-7-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/578/faiss-2-7-prev.webp" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/578/faiss-2-7-large.png" data-large-filename-webp="https://i.iinfo.cz/images/578/faiss-2-7-large.webp" data-large-width="525" data-large-height="525" alt="Vektorová databáze FAISS" data-description="Vektorová databáze FAISS" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 525px" /></a>
<p>Vektorová databáze FAISS<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>



<p><a name="k14"></a></p>
<h2 id="k14">14. Úplný zdrojový kód šestého demonstračního příkladu</h2>

<p>Úplný zdrojový kód dnešního šestého demonstračního příkladu, který po svém
spuštění vykreslí všechny vektory (vstupní i nalezené &ndash; ovšem po jejich
normalizaci) formou orientovaných šipek, vypadá následovně:</p>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>
&nbsp;
import faiss
import numpy as np
&nbsp;
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
DIMENSIONS=2
N=100
K=10
&nbsp;
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")
&nbsp;
normalized = np.matrix.copy(vectors)
&nbsp;
<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   norm = np.linalg.norm(vector)
   normalized[i] = vector / norm
&nbsp;
<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(normalized)
&nbsp;
<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
norm = np.linalg.norm(query_vector)
normalized_query_vector = query_vector / norm
&nbsp;
<i># najít K nejbližších vektorů</i>
distances, indices = index.search(normalized_query_vector, K)
&nbsp;
<i># --- graf ---</i>
&nbsp;
<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)
&nbsp;
<i># vykreslení všech náhodně vygenerovaných vektorů</i>
for i in range(vectors.shape[0]):
    plt.arrow(0, 0, normalized[i, 0], normalized[i, 1], head_width=0.02, head_length=0.02, color="black")
&nbsp;
<i># vykreslení nejpodobnějších vektorů</i>
xs = normalized[:,0][indices][0]
ys = normalized[:,1][indices][0]
for i in range(xs.shape[0]):
    plt.arrow(0, 0, xs[i], ys[i], head_width=0.02, head_length=0.02, color="red")
&nbsp;
<i># vykreslení vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = normalized_query_vector[0][0]
y = normalized_query_vector[0][1]
plt.arrow(0,0, x, y, head_width=0.03, head_length=0.03, color="blue")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-F.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: tento demonstrační příklad naleznete na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-F.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-F.py</a>.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vyhledání a vykreslení nejvíce NEpodobných vektorů</h2>

<div class="rs-img-center" style="margin-left: auto; margin-right: auto; max-width: 525px"><a href="https://www.root.cz/obrazek/1210269/"><img src="https://i.iinfo.cz/images/578/faiss-2-8-large.png" class="image-1210269" width="525" height="525" data-prev-filename="https://i.iinfo.cz/images/578/faiss-2-8-prev.png" data-prev-filename-webp="https://i.iinfo.cz/images/578/faiss-2-8-prev.webp" data-prev-width="270" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/578/faiss-2-8-large.png" data-large-filename-webp="https://i.iinfo.cz/images/578/faiss-2-8-large.webp" data-large-width="525" data-large-height="525" alt="Vektorová databáze FAISS" data-description="Vektorová databáze FAISS" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" style="width: 100%; height: auto; max-width: 525px" /></a>
<p>Vektorová databáze FAISS<br class="_remove" /></p><p class="author">Autor: tisnik, podle licence: <a href="http://en.wikipedia.org/wiki/Rights_Managed">Rights Managed</a><br class="_remove" /></p></div>


<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<pre>
<i># Knihovna FAISS</i>
<i>#</i>

import faiss
import numpy as np

import matplotlib.pyplot as plt


DIMENSIONS=2
N=1000
K=100

<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float32")

normalized = np.matrix.copy(vectors)

<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   norm = np.linalg.norm(vector)
   normalized[i] = vector / norm

<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatIP(DIMENSIONS)
index.add(normalized)

<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]])
norm = np.linalg.norm(query_vector)
normalized_query_vector = query_vector / norm

<i># najít K nejbližších vektorů</i>
distances, indices = index.search(-normalized_query_vector, K)

<i># --- graf ---</i>

<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)

<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)

<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)

<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)

<i># přidání legendy</i>
plt.legend(loc="upper left")

<i># povolení zobrazení mřížky</i>
plt.grid(True)

<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-G.png")

<i># zobrazení grafu</i>
plt.show()
</pre>




<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>
F16C (CVT16) SSE5
F16 - mnoho

BF16 - VDPBF16PS-zaklad dot product

<pre>
<i># Knihovna FAISS</i>
<i>#</i>
<i># - vykreslení nejpodobnějších vektorů získaných na základě jejich vzdálenosti</i>
<i># - vykresleny jsou původní vektory</i>
<i># - složky všech vektorů jsou typu float16</i>
&nbsp;
import faiss
import numpy as np
&nbsp;
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
DIMENSIONS=2
N=1000
K=100
&nbsp;
<i># náhodné vektory v rovině [0,0] - [1,1]</i>
vectors = np.random.rand(N, DIMENSIONS).astype("float16")
&nbsp;
normalized = np.matrix.copy(vectors)
&nbsp;
<i># normalizace vektorů</i>
for i in range(len(vectors)):
   vector = vectors[i]
   norm = np.linalg.norm(vector)
   normalized[i] = vector / norm
&nbsp;
<i># konstrukce indexu pro vyhledávání na základě skalárního součinu</i>
index = faiss.IndexFlatL2(DIMENSIONS)
index.add(normalized)
&nbsp;
<i># vektor, ke kterému budeme počítat vzdálenost</i>
query_vector = np.array([[0.5, 0.5]]).astype("float16")
norm = np.linalg.norm(query_vector)
normalized_query_vector = query_vector / norm
&nbsp;
<i># najít K nejbližších vektorů</i>
distances, indices = index.search(normalized_query_vector, K)
&nbsp;
<i># --- graf ---</i>
&nbsp;
<i># velikost grafu</i>
plt.figure(figsize=(8, 8), dpi=80)
&nbsp;
<i># vykreslení všech náhodně vygenerovaných bodů</i>
plt.plot(vectors[:,0], vectors[:,1], "+k", label="original vectors", markersize=5)
&nbsp;
<i># vykreslení nejbližších bodů</i>
xs = vectors[:,0][indices][0]
ys = vectors[:,1][indices][0]
plt.plot(xs, ys, "+r", label="nearest vectors", markersize=5)
&nbsp;
<i># vykreslení koncového bodu vektoru, ke kterému hledáme K nejbližších vektorů</i>
x = query_vector[0][0]
y = query_vector[0][1]
plt.plot(x, y, "ob", label="query vector", markersize=10)
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vykreslení grafu do souboru</i>
plt.savefig("faiss-H.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>

<pre>
<i># Knihovna FAISS</i>
<i>#</i>
<i># - benchmark rychlosti nalezení nejpodobnějších vektorů</i>
<i># - vizualizace výsledků formou grafu</i>
<i># - porovnání float16 a float32# - porovnání float16 a float32# - porovnání float16 a float32</i>
&nbsp;
from time import time
import faiss
import numpy as np
&nbsp;
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
def <strong>similarity_search</strong>(n, k, float_type):
    <i># pocet dimenzi</i>
    DIMENSIONS=128
&nbsp;
    <i># nahodne vektory</i>
    data = np.random.rand(n, 128).astype(float_type)
&nbsp;
    <i># konstrukce indexu pro vyhledavani na zaklade vzdalenosti</i>
    index = faiss.IndexFlatL2(DIMENSIONS)
    index.add(data)
&nbsp;
    t1 = time()
&nbsp;
    <i># vektor, ke kteremu budeme pocitat vzdalenost</i>
    query_vector = np.random.rand(1, DIMENSIONS).astype(float_type)
&nbsp;
    <i># pocet nejblizsich bodu</i>
    distances, indices = index.search(query_vector, k)
    t2 = time()
&nbsp;
    return n, t2-t1
&nbsp;
&nbsp;
def <strong>benchmark</strong>(from_n, to_n, steps, float_type):
    ns = []
    ts_search = []
&nbsp;
    for n in np.linspace(from_n, to_n, steps):
        print(n)
        n, t_search = similarity_search(int(n), 1, float_type)
        ns.append(n)
        ts_search.append(t_search)
&nbsp;
    return ns, ts_search
&nbsp;
&nbsp;
<i>#for n in np.linspace(1000000, 10000000, 10):</i>
from_n = 1000000
to_n = 10000000
steps = 10
&nbsp;
ns, float16_times = benchmark(from_n, to_n, steps, "float16")
_, float32_times = benchmark(from_n, to_n, steps, "float32")
&nbsp;
plt.plot(ns, float16_times, "r-", label="float16")
plt.plot(ns, float32_times, "b-", label="float32")
&nbsp;
<i># přidání legendy</i>
plt.legend(loc="upper left")
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
plt.savefig(f"faiss_benchmark_3.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady vytvořené v&nbsp;Pythonu a popsané <a
href="https://www.root.cz/clanky/faiss-knihovna-pro-rychle-a-efektivni-vyhledavani-podobnych-vektoru/">v&nbsp;předchozím</a>
i v&nbsp;dnešním článku najdete v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs/">https://github.com/tisnik/most-popular-python-libs/</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>faiss-1.py</td><td>seznamy souřadnic bodů v&nbsp;rovině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-1.py</a></td></tr>
<tr><td> 2</td><td>faiss-2.py</td><td>konstrukce matice se souřadnicemi bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-2.py</a></td></tr>
<tr><td> 3</td><td>faiss-3.py</td><td>konstrukce indexu pro vyhledávání na základě vzdálenosti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-3.py</a></td></tr>
<tr><td> 4</td><td>faiss-4.py</td><td>nalezení nejbližších bodů k&nbsp;zadaným souřadnicím &ndash; výpis indexů nalezených bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-4.py</a></td></tr>
<tr><td> 5</td><td>faiss-5.py</td><td>nalezení nejbližších bodů k&nbsp;zadaným souřadnicím &ndash; výpis souřadnic nalezených bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-5.py</a></td></tr>
<tr><td> 6</td><td>faiss-6.py</td><td>vyhledávání bodů na základě skalárního součinu bez normalizace vektorů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-6.py</a></td></tr>
<tr><td> 7</td><td>faiss-7.py</td><td>vyhledávání bodů na základě skalárního součinu s&nbsp;normalizací vektorů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-7.py</a></td></tr>
<tr><td> 8</td><td>faiss-8.py</td><td>jednoduchý benchmark rychlosti vyhledávání knihovnou FAISS</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>faiss-9.py</td><td>vizualizace koncových bodů vektorů v&nbsp;rovině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-9.py</a></td></tr>
<tr><td>10</td><td>faiss-A.py</td><td>vykreslení nejpodobnějších vektorů získaných na základě L2 metriky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-A.py</a></td></tr>
<tr><td>11</td><td>faiss-B.py</td><td>nalezení nejpodobnějších vektorů získaných na základě skalárního součinu: varianta s&nbsp;nenormovanými vektory</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-B.py</a></td></tr>
<tr><td>12</td><td>faiss-C.py</td><td>nalezení nejpodobnějších vektorů získaných na základě skalárního součinu: varianta s&nbsp;normovanými vektory</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-C.py</a></td></tr>
<tr><td>13</td><td>faiss-D.py</td><td>vykreslení nejpodobnějších vektorů před jejich normalizací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-D.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-D.py</a></td></tr>
<tr><td>14</td><td>faiss-E.py</td><td>vykreslení vektorů formou orientovaných šipek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-E.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-E.py</a></td></tr>
<tr><td>15</td><td>faiss-F.py</td><td>vykreslení vektorů po jejich normalizaci formou orientovaných šipek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-F.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-F.py</a></td></tr>
<tr><td>16</td><td>faiss-G.py</td><td>vyhledání a vykreslení nejvíce NEpodobných vektorů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-G.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-G.py</a></td></tr>
<tr><td>17</td><td>faiss-H.py</td><td>vyhledání podobných vektorů se složkami typu <i>float16</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-H.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-H.py</a></td></tr>
<tr><td>18</td><td>faiss-I.py</td><td>jednoduchý benchmark rychlosti vyhledávání knihovnou FAISS: rozdíly mezi <i>float16</i> a <i>float32</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-I.py">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/faiss-I.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>pyproject.toml</td><td>soubor s&nbsp;projektem a definicí závislostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/pyproject.toml">https://github.com/tisnik/most-popular-python-libs/blob/master/faiss/pyproject.toml</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>FAISS (Facebook AI Similarity Search)<br />
<a href="https://en.wikipedia.org/wiki/FAISS">https://en.wikipedia.org/wiki/FAISS</a>
</li>

<li>FAISS documentation<br />
<a href="https://faiss.ai/">https://faiss.ai/</a>
</li>

<li>Introduction to Facebook AI Similarity Search (Faiss)<br />
<a href="https://www.pinecone.io/learn/series/faiss/faiss-tutorial/">https://www.pinecone.io/learn/series/faiss/faiss-tutorial/</a>
</li>

<li>Faiss: Efficient Similarity Search and Clustering of Dense Vectors<br />
<a href="https://medium.com/@pankaj_pandey/faiss-efficient-similarity-search-and-clustering-of-dense-vectors-dace1df1e235">https://medium.com/@pankaj_pandey/faiss-efficient-similarity-search-and-clustering-of-dense-vectors-dace1df1e235</a>
</li>

<li>Cosine Distance vs Dot Product vs Euclidean in vector similarity search<br />
<a href="https://medium.com/data-science-collective/cosine-distance-vs-dot-product-vs-euclidean-in-vector-similarity-search-227a6db32edb">https://medium.com/data-science-collective/cosine-distance-vs-dot-product-vs-euclidean-in-vector-similarity-search-227a6db32edb</a>
</li>

<li>F16C<br />
<a href="https://en.wikipedia.org/wiki/F16C">https://en.wikipedia.org/wiki/F16C</a>
</li>

<li>FP16 (AVX-512)<br />
<a href="https://en.wikipedia.org/wiki/AVX-512#FP16">https://en.wikipedia.org/wiki/AVX-512#FP16</a>
</li>

<li>Top 8 Vector Databases in 2025: Features, Use Cases, and Comparisons<br />
<a href="https://synapsefabric.com/top-8-vector-databases-in-2025-features-use-cases-and-comparisons/">https://synapsefabric.com/top-8-vector-databases-in-2025-features-use-cases-and-comparisons/</a>
</li>

<li>Is FAISS a Vector Database? Complete Guide<br />
<a href="https://mljourney.com/is-faiss-a-vector-database-complete-guide/">https://mljourney.com/is-faiss-a-vector-database-complete-guide/</a>
</li>

<li>Vector database<br />
<a href="https://en.wikipedia.org/wiki/Vector_database">https://en.wikipedia.org/wiki/Vector_database</a>
</li>

<li>Similarity search<br />
<a href="https://en.wikipedia.org/wiki/Similarity_search">https://en.wikipedia.org/wiki/Similarity_search</a>
</li>

<li>Nearest neighbor search<br />
<a href="https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximation_methods">https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximation_methods</a>
</li>

<li>Decoding Similarity Search with FAISS: A Practical Approach<br />
<a href="https://www.luminis.eu/blog/decoding-similarity-search-with-faiss-a-practical-approach/">https://www.luminis.eu/blog/decoding-similarity-search-with-faiss-a-practical-approach/</a>
</li>

<li>MetricType and distances<br />
<a href="https://github.com/facebookresearch/faiss/wiki/MetricType-and-distances">https://github.com/facebookresearch/faiss/wiki/MetricType-and-distances</a>
</li>

<li>RAG - Retrieval-augmented generation<br />
<a href="https://en.wikipedia.org/wiki/Retrieval-augmented_generation">https://en.wikipedia.org/wiki/Retrieval-augmented_generation</a>
</li>

<li>pgvector na GitHubu<br />
<a href="https://github.com/pgvector/pgvector">https://github.com/pgvector/pgvector</a>
</li>

<li>Why we replaced Pinecone with PGVector<br />
<a href="https://www.confident-ai.com/blog/why-we-replaced-pinecone-with-pgvector">https://www.confident-ai.com/blog/why-we-replaced-pinecone-with-pgvector</a>
</li>

<li>PostgreSQL as VectorDB - Beginner Tutorial<br />
<a href="https://www.youtube.com/watch?v=Ff3tJ4pJEa4">https://www.youtube.com/watch?v=Ff3tJ4pJEa4</a>
</li>

<li>What is a Vector Database? (neobsahuje odpověď na otázku v titulku :-)<br />
<a href="https://www.youtube.com/watch?v=t9IDoenf-lo">https://www.youtube.com/watch?v=t9IDoenf-lo</a>
</li>

<li>PGVector: Turn PostgreSQL Into A Vector Database<br />
<a href="https://www.youtube.com/watch?v=j1QcPSLj7u0">https://www.youtube.com/watch?v=j1QcPSLj7u0</a>
</li>

<li>Milvus<br />
<a href="https://milvus.io/">https://milvus.io/</a>
</li>

<li>Vector Databases simply explained! (Embeddings &amp; Indexes)<br />
<a href="https://www.youtube.com/watch?v=dN0lsF2cvm4">https://www.youtube.com/watch?v=dN0lsF2cvm4</a>
</li>

<li>Vector databases are so hot right now. WTF are they?<br />
<a href="https://www.youtube.com/watch?v=klTvEwg3oJ4">https://www.youtube.com/watch?v=klTvEwg3oJ4</a>
</li>

<li>Step-by-Step Guide to Installing “pgvector” and Loading Data in PostgreSQL<br />
<a href="https://medium.com/@besttechreads/step-by-step-guide-to-installing-pgvector-and-loading-data-in-postgresql-f2cffb5dec43">https://medium.com/@besttechreads/step-by-step-guide-to-installing-pgvector-and-loading-data-in-postgresql-f2cffb5dec43</a>
</li>

<li>Best 17 Vector Databases for 2025<br />
<a href="https://lakefs.io/blog/12-vector-databases-2023/">https://lakefs.io/blog/12-vector-databases-2023/</a>
</li>

<li>Top 15 Vector Databases that You Must Try in 2025<br />
<a href="https://www.geeksforgeeks.org/top-vector-databases/">https://www.geeksforgeeks.org/top-vector-databases/</a>
</li>

<li>Picking a vector database: a comparison and guide for 2023<br />
<a href="https://benchmark.vectorview.ai/vectordbs.html">https://benchmark.vectorview.ai/vectordbs.html</a>
</li>

<li>Top 9 Vector Databases as of Feburary 2025<br />
<a href="https://www.shakudo.io/blog/top-9-vector-databases">https://www.shakudo.io/blog/top-9-vector-databases</a>
</li>

<li>What is a vector database?<br />
<a href="https://www.ibm.com/think/topics/vector-database">https://www.ibm.com/think/topics/vector-database</a>
</li>

<li>SQL injection<br />
<a href="https://en.wikipedia.org/wiki/SQL_injection">https://en.wikipedia.org/wiki/SQL_injection</a>
</li>

<li>Cosine similarity<br />
<a href="https://en.wikipedia.org/wiki/Cosine_similarity">https://en.wikipedia.org/wiki/Cosine_similarity</a>
</li>

<li>Euclidean distance<br />
<a href="https://en.wikipedia.org/wiki/Euclidean_distance">https://en.wikipedia.org/wiki/Euclidean_distance</a>
</li>

<li>Dot product<br />
<a href="https://en.wikipedia.org/wiki/Dot_product">https://en.wikipedia.org/wiki/Dot_product</a>
</li>

<li>Hammingova vzdálenost<br />
<a href="https://cs.wikipedia.org/wiki/Hammingova_vzd%C3%A1lenost">https://cs.wikipedia.org/wiki/Hammingova_vzd%C3%A1lenost</a>
</li>

<li>Jaccard index<br />
<a href="https://en.wikipedia.org/wiki/Jaccard_index">https://en.wikipedia.org/wiki/Jaccard_index</a>
</li>

<li>Manhattanská metrika<br />
<a href="https://cs.wikipedia.org/wiki/Manhattansk%C3%A1_metrika">https://cs.wikipedia.org/wiki/Manhattansk%C3%A1_metrika</a>
</li>

<li>pgvector: vektorová databáze postavená na Postgresu<br />
<a href="https://www.root.cz/clanky/pgvector-vektorova-databaze-postavena-na-postgresu/">https://www.root.cz/clanky/pgvector-vektorova-databaze-postavena-na-postgresu/</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Dot Product<br />
<a href="https://mathworld.wolfram.com/DotProduct.html">https://mathworld.wolfram.com/DotProduct.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

