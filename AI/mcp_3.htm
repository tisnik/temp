<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
$ go mod init mcp-tests
go: creating new go.mod: module mcp-tests
</pre>

<pre>
$ go get github.com/metoro-io/mcp-golang
go: downloading github.com/metoro-io/mcp-golang v0.8.0
go: downloading github.com/tidwall/sjson v1.2.5
go: downloading github.com/pkg/errors v0.9.1
go: downloading github.com/invopop/jsonschema v0.12.0
go: downloading github.com/wk8/go-ordered-map/v2 v2.1.8
go: downloading github.com/tidwall/gjson v1.18.0
go: downloading gopkg.in/yaml.v3 v3.0.1
go: downloading github.com/buger/jsonparser v1.1.1
go: downloading github.com/bahlo/generic-list-go v0.2.0
go: downloading github.com/mailru/easyjson v0.7.7
go: downloading github.com/tidwall/pretty v1.2.1
go: downloading github.com/tidwall/match v1.1.1
go: added github.com/bahlo/generic-list-go v0.2.0
go: added github.com/buger/jsonparser v1.1.1
go: added github.com/invopop/jsonschema v0.12.0
go: added github.com/mailru/easyjson v0.7.7
go: added github.com/metoro-io/mcp-golang v0.8.0
go: added github.com/pkg/errors v0.9.1
go: added github.com/tidwall/gjson v1.18.0
go: added github.com/tidwall/match v1.1.1
go: added github.com/tidwall/pretty v1.2.1
go: added github.com/tidwall/sjson v1.2.5
go: added github.com/wk8/go-ordered-map/v2 v2.1.8
go: added gopkg.in/yaml.v3 v3.0.1
</pre>

<pre>
module mcp-tests

go 1.22.1

require (
        github.com/bahlo/generic-list-go v0.2.0 // indirect
        github.com/buger/jsonparser v1.1.1 // indirect
        github.com/invopop/jsonschema v0.12.0 // indirect
        github.com/mailru/easyjson v0.7.7 // indirect
        github.com/metoro-io/mcp-golang v0.8.0 // indirect
        github.com/pkg/errors v0.9.1 // indirect
        github.com/tidwall/gjson v1.18.0 // indirect
        github.com/tidwall/match v1.1.1 // indirect
        github.com/tidwall/pretty v1.2.1 // indirect
        github.com/tidwall/sjson v1.2.5 // indirect
        github.com/wk8/go-ordered-map/v2 v2.1.8 // indirect
        gopkg.in/yaml.v3 v3.0.1 // indirect
)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
$ <strong>go doc mcp-golang.NewServer</strong>
package mcp_golang // import "github.com/metoro-io/mcp-golang"

func NewServer(transport transport.Transport, options ...ServerOptions) *Server
</pre>

<pre>
$ <strong>go doc mcp-golang.Server</strong>
package mcp_golang // import "github.com/metoro-io/mcp-golang"

type Server struct {
        // Has unexported fields.
}

func NewServer(transport transport.Transport, options ...ServerOptions) *Server
func (s *Server) CheckPromptRegistered(name string) bool
func (s *Server) CheckResourceRegistered(uri string) bool
func (s *Server) CheckToolRegistered(name string) bool
func (s *Server) DeregisterPrompt(name string) error
func (s *Server) DeregisterResource(uri string) error
func (s *Server) DeregisterTool(name string) error
func (s *Server) RegisterPrompt(name string, description string, handler any) error
func (s *Server) RegisterResource(uri string, name string, description string, mimeType string, handler any) error
func (s *Server) RegisterTool(name string, description string, handler any) error
func (s *Server) Serve() error
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
// Jednoduchý MCP server s jediným zdrojem

package main

import (
        mcp_golang "github.com/metoro-io/mcp-golang"
        "github.com/metoro-io/mcp-golang/transport/stdio"
)

func resourceHandler() (*mcp_golang.ResourceResponse, error) {
        resource := mcp_golang.NewTextEmbeddedResource(
                "pozdrav://",
                "Hello, dear client",
                "text/plain")
        response := mcp_golang.NewResourceResponse(resource)
        return response, nil
}

func main() {
        done := make(chan struct{})

        server := mcp_golang.NewServer(stdio.NewStdioServerTransport())

        err := server.RegisterResource(
                "pozdrav://",
                "resource_test",
                "This is a test resource", "text/plain", resourceHandler)
        if err != nil {
                panic(err)
        }

        err = server.Serve()
        if err != nil {
                panic(err)
        }

        <-done
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
"""MCP klient, který spustí server, se kterým se komunikuje přes STDIO."""

from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

# parametry pro spuštění MCP serveru
server_params = StdioServerParameters(
    command="go",  # spustí se tento příkaz
    args=["run", "./mcp_server_1.go"],  # a předají se mu následující parametry
    env=None,  # lze definovat i proměnné prostředí
)


async def run():
    """Realizace klienta."""
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            # přečtení zdroje
            data = await session.read_resource("pozdrav://")
            print("Data returned:", data)
            print("Type:", type(data))

            text = data.contents[0].text
            print("Text:", text)


# přímé spuštění klienta
if __name__ == "__main__":
    import asyncio

    asyncio.run(run())
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech minule a předminule popsaných demonstračních příkladů
určených pro Python a balíček <a
href="https://github.com/modelcontextprotocol/python-sdk">mcp</a> byly uloženy
do repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;tabulce zobrazené níže jsou odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>mcp_server_1.py</td><td>jednoduchý MCP server s&nbsp;jediným definovaným zdrojem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_1.py</a></td></tr>
<tr><td> 2</td><td>mcp_server_2.py</td><td>jednoduchý MCP server s&nbsp;jediným definovaným dynamickým zdrojem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_2.py</a></td></tr>
<tr><td> 3</td><td>mcp_server_3.py</td><td>MCP server s&nbsp;dynamickým zdrojem a definicí nástroje (tool)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_3.py</a></td></tr>
<tr><td> 4</td><td>mcp_server_4.py</td><td>MCP server s jediným definovaným dynamickým zdrojem, zápis informací o spuštění</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_4.py</a></td></tr>
<tr><td> 5</td><td>mcp_server_5.py</td><td>MCP server, který se přímo spustí v&nbsp;režimu STDIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_5.py</a></td></tr>
<tr><td> 6</td><td>mcp_server_6.py</td><td>MCP server, který se přímo spustí v&nbsp;režimu SSE</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_6.py</a></td></tr>
<tr><td> 7</td><td>mcp_server_7.py</td><td>MCP server se zdrojem vracejícím strukturovaná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_7.py</a></td></tr>
<tr><td> 8</td><td>mcp_server_8.py</td><td>MCP server se zdrojem vracejícím strukturovaná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_8.py</a></td></tr>
<tr><td> 9</td><td>mcp_server_9.py</td><td>MCP server, který dokáže poslat rastrový obrázek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_9.py</a></td></tr>
<tr><td>10</td><td>mcp_server_A.py</td><td>MCP server, který na požadavky odpovídá se zpožděním</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_server_A.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>mcp_client_1.py</td><td>MCP klient, který spustí server, se kterým se komunikuje přes STDIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_1.py</a></td></tr>
<tr><td>12</td><td>mcp_client_2.py</td><td>MCP klient, který spustí server, se kterým se komunikuje přes SSE</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_2.py</a></td></tr>
<tr><td>13</td><td>mcp_client_3.py</td><td>MCP klient, který přečte zvolený zdroj</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_3.py</a></td></tr>
<tr><td>14</td><td>mcp_client_4.py</td><td>MCP klient, který přečte zvolený zdroj a získá z&nbsp;něj data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_4.py</a></td></tr>
<tr><td>15</td><td>mcp_client_5.py</td><td>MCP klient, který zavolá vybraný nástroj</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_5.py</a></td></tr>
<tr><td>16</td><td>mcp_client_6.py</td><td>MCP klient, který přečte a zpracuje strukturovaná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_6.py</a></td></tr>
<tr><td>17</td><td>mcp_client_7.py</td><td>MCP klient, který dokáže načíst rastrový obrázek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_7.py</a></td></tr>
<tr><td>18</td><td>mcp_client_8.py</td><td>MCP klient s&nbsp;měřením času odpovědí MCP serveru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_8.py</a></td></tr>
<tr><td>19</td><td>mcp_client_9.py</td><td>MCP klient s&nbsp;měřením času odpovědí MCP serveru a více asynchronními voláními</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/mcp/mcp_client_9.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>MCP Python SDK<br />
<a href="https://github.com/modelcontextprotocol/python-sdk?tab=readme-ov-file#running-your-server">https://github.com/modelcontextprotocol/python-sdk?tab=readme-ov-file#running-your-server</a>
</li>

<li>MCP protocol: Resources<br />
<a href="https://modelcontextprotocol.info/docs/concepts/resources/">https://modelcontextprotocol.info/docs/concepts/resources/</a>
</li>

<li>Example Servers<br />
<a href="https://modelcontextprotocol.io/examples">https://modelcontextprotocol.io/examples</a>
</li>

<li>Core architecture<br />
<a href="https://modelcontextprotocol.io/docs/concepts/architecture">https://modelcontextprotocol.io/docs/concepts/architecture</a>
</li>

<li>Unleashing the Power of Model Context Protocol (MCP): A Game-Changer in AI Integration<br />
<a href="https://techcommunity.microsoft.com/blog/educatordeveloperblog/unleashing-the-power-of-model-context-protocol-mcp-a-game-changer-in-ai-integrat/4397564">https://techcommunity.microsoft.com/blog/educatordeveloperblog/unleashing-the-power-of-model-context-protocol-mcp-a-game-changer-in-ai-integrat/4397564</a>
</li>

<li>MPC inspector<br />
<a href="https://github.com/modelcontextprotocol/inspector">https://github.com/modelcontextprotocol/inspector</a>
</li>

<li>Model Context Protocol servers<br />
<a href="https://github.com/modelcontextprotocol/servers">https://github.com/modelcontextprotocol/servers</a>
</li>

<li>python-sdk na GitHubu<br />
<a href="https://github.com/modelcontextprotocol/python-sdk">https://github.com/modelcontextprotocol/python-sdk</a>
</li>

<li>typescript-sdk na GitHubu<br />
<a href="https://github.com/modelcontextprotocol/typescript-sdk">https://github.com/modelcontextprotocol/typescript-sdk</a>
</li>

<li>mcp-golang<br />
<a href="https://github.com/metoro-io/mcp-golang">https://github.com/metoro-io/mcp-golang</a>
</li>

<li>MCP server: A step-by-step guide to building from scratch<br />
<a href="https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/">https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/</a>
</li>

<li>How to Build an MCP Server Fast: A Step-by-Step Tutorial<br />
<a href="https://medium.com/@eugenesh4work/how-to-build-an-mcp-server-fast-a-step-by-step-tutorial-e09faa5f7e3b">https://medium.com/@eugenesh4work/how-to-build-an-mcp-server-fast-a-step-by-step-tutorial-e09faa5f7e3b</a>
</li>

<li>Step-by-Step Guide: Building an MCP Server using Python-SDK, AlphaVantage &amp; Claude AI<br />
<a href="https://medium.com/@syed_hasan/step-by-step-guide-building-an-mcp-server-using-python-sdk-alphavantage-claude-ai-7a2bfb0c3096">https://medium.com/@syed_hasan/step-by-step-guide-building-an-mcp-server-using-python-sdk-alphavantage-claude-ai-7a2bfb0c3096</a>
</li>

<li>RFC 6570: URI Template<br />
<a href="https://datatracker.ietf.org/doc/html/rfc6570">https://datatracker.ietf.org/doc/html/rfc6570</a>
</li>

<li>Return resources as structured JSON instead of text?<br />
<a href="https://github.com/modelcontextprotocol/python-sdk/issues/279">https://github.com/modelcontextprotocol/python-sdk/issues/279</a>
</li>

<li>Python standard library: pprint<br />
<a href="https://docs.python.org/3/library/pprint.html">https://docs.python.org/3/library/pprint.html</a>
</li>

<li>Python standard library: json — JSON encoder and decoder¶<br />
<a href="https://docs.python.org/3/library/json.html">https://docs.python.org/3/library/json.html</a>
</li>

<li>Calling MCP Servers the Hard Way<br />
<a href="https://deadprogrammersociety.com/2025/03/calling-mcp-servers-the-hard-way.html">https://deadprogrammersociety.com/2025/03/calling-mcp-servers-the-hard-way.html</a>
</li>

<li>mcptools<br />
<a href="https://github.com/f/mcptools">https://github.com/f/mcptools</a>
</li>

<li>Server-sent events<br />
<a href="https://en.wikipedia.org/wiki/Server-sent_events">https://en.wikipedia.org/wiki/Server-sent_events</a>
</li>

<li>Model context protocol (MCP)<br />
<a href="https://openai.github.io/openai-agents-python/mcp/">https://openai.github.io/openai-agents-python/mcp/</a>
</li>

<li>A Clear Intro to MCP (Model Context Protocol) with Code Examples<br />
<a href="https://towardsdatascience.com/clear-intro-to-mcp/">https://towardsdatascience.com/clear-intro-to-mcp/</a>
</li>

<li>A Developer's Guide to the MCP<br />
<a href="https://www.getzep.com/ai-agents/developer-guide-to-mcp">https://www.getzep.com/ai-agents/developer-guide-to-mcp</a>
</li>

<li>MCP: Flash in the Pan or Future Standard?<br />
<a href="https://blog.langchain.dev/mcp-fad-or-fixture/">https://blog.langchain.dev/mcp-fad-or-fixture/</a>
</li>

<li>MCP yeah you know me: A complete guide and review of Model Context Protocol (MCP)<br />
<a href="https://ebi.ai/blog/model-context-protocol-guide/">https://ebi.ai/blog/model-context-protocol-guide/</a>
</li>

<li>Pillow documentation<br />
<a href="https://pillow.readthedocs.io/en/stable/handbook/tutorial.html">https://pillow.readthedocs.io/en/stable/handbook/tutorial.html</a>
</li>

<li>Pillow: Python Imaging Library (Fork)<br />
<a href="https://pypi.org/project/pillow/">https://pypi.org/project/pillow/</a>
</li>

<li>How to use Pillow, a fork of PIL<br />
<a href="https://www.pythonforbeginners.com/gui/how-to-use-pillow">https://www.pythonforbeginners.com/gui/how-to-use-pillow</a>
</li>

<li>PNG is Not GIF<br />
<a href="https://www.root.cz/clanky/png-is-not-gif/">https://www.root.cz/clanky/png-is-not-gif/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

