<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické uživatelské rozhraní v Pythonu: kouzla s kreslicí plochou (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické uživatelské rozhraní v Pythonu: kouzla s kreslicí plochou (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Popis základních vlastností kreslicí plochy (canvasu) dostupné v&nbsp;knihovně Tkinter dnes dokončíme. Popíšeme si způsob tvorby složitějších geometrických tvarů (například šipek), nastavení vlastností při vykreslování, tvorbu uzavřených obrazců, ale i problematiku použití rámců a rastrových obrázků.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Grafické uživatelské rozhraní v&nbsp;Pythonu: kouzla s kreslicí plochou (dokončení)</a></p>
<p><a href="#k02">*** 2. První demonstrační příklad: geometrické tvary, které je možné vložit (vykreslit) na plátno</a></p>
<p><a href="#k03">*** 3. Oblouky</a></p>
<p><a href="#k04">*** 4. Kruhové výseče a kruhové úseče</a></p>
<p><a href="#k05">*** 5. Styly liniových tvarů</a></p>
<p><a href="#k06">*** 6. Čárkované a čerchované úsečky</a></p>
<p><a href="#k07">*** 7. Kresba šipek</a></p>
<p><a href="#k08">*** 8. Uzavřené obrazce</a></p>
<p><a href="#k09">*** 9. Styly vykreslení uzavřených obrazců</a></p>
<p><a href="#k10">*** 10. Rámce (vložená okna) na plátnu</a></p>
<p><a href="#k11">*** 11. Bitmapy a pixmapy</a></p>
<p><a href="#k12">*** 12. Text na canvasu</a></p>
<p><a href="#k13">*** 13. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k14">*** 14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Grafické uživatelské rozhraní v Pythonu: kouzla s&nbsp;kreslicí plochou (dokončení)</h2>

<img src="https://i.iinfo.cz/images/134/tkinter5-5.png" class="image-300220" alt="&#160;" width="260" height="285" />
<p><i>Obrázek 1: Canvas s&nbsp;několika objekty &ndash; kruhem, dvojicí úseček
a textem.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. První demonstrační příklad: geometrické tvary, které je možné vložit (vykreslit) na plátno</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán způsob vykreslení
základních geometrických tvarů, ať již otevřených (liniových), tak i
uzavřených. Kromě toho je na plátno vykreslena i jednoduchá mřížka; tu
použijeme i v&nbsp;příkladech následujících. Význam některých nastavení bude
popsán v&nbsp;dalším textu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_line(0, 0, 100, 100, fill='red', width=2, dash=8)
&nbsp;
canvas.create_arc(100, 1, 200, 100, outline='blue', start=45,
                  extent=180, style=tkinter.ARC, width=2)
&nbsp;
canvas.create_oval(200, 1, 300, 100)
&nbsp;
canvas.create_oval(325, 25, 375, 75, fill="#a0a0ff")
&nbsp;
canvas.create_rectangle(50, 125, 150, 175, fill="#a0a0ff")
&nbsp;
canvas.create_text(300, 150, text="Hello world!", font="Helvetica 20")
&nbsp;
canvas.create_polygon(50, 225, 200, 300, 50, 375, fill="#80ff80")
&nbsp;
canvas.create_polygon(250, 225, 400, 300, 250, 375, fill="black",
                      outline="red", width="5")
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 2: Screenshot prvního demonstračního příkladu
s&nbsp;geometrickými tvary a textem vloženými na canvas.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Oblouky</h2>

<p>Opět se podívejme na demonstrační příklad, po jehož spuštění se na kreslicí
plochu vloží několik oblouků s&nbsp;různými geometrickými a grafickými
vlastnostmi:</p>

<pre>
#!/usr/bin/env python

import tkinter
from tkinter import ttk
import sys


WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100


def exit():
    sys.exit(0)


def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()

    draw_grid(canvas, width, height, grid_size)
    return canvas


def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")


root = tkinter.Tk()

canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)

canvas.create_arc(0, 0, 100, 100, outline='red', style=tkinter.ARC,
                  width=2)

canvas.create_arc(100, 100, 200, 200, outline='blue', start=45,
                  style=tkinter.ARC, width=2)

canvas.create_arc(200, 0, 300, 100, outline='brown', extent=180,
                  style=tkinter.ARC, width=2)

canvas.create_arc(300, 100, 400, 200, outline='green', start=45, extent=270,
                  style=tkinter.ARC, width=2)

canvas.create_arc(0, 200, 100, 300, outline='red', style=tkinter.ARC, dash=8,
                  width=2)

canvas.create_arc(100, 300, 200, 400, outline='blue', start=45,
                  style=tkinter.ARC, dash=8, width=10)

canvas.create_arc(200, 200, 300, 300, outline='green', start=45, extent=270,
                  style=tkinter.ARC, dash=3, width=50)

canvas.create_arc(290, 290, 390, 390, outline='brown', extent=270,
                  style=tkinter.ARC, dash=80, width=20)

root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 3: Screenshot druhého demonstračního příkladu s&nbsp;různými
oblouky.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Kruhové výseče a kruhové úseče</h2>

<p>Pokud při použití metody <strong>canvas.create_arc()</strong> nebudeme
specifikovat hodnotu pojmenovaného parametru <strong>style</strong>,
popř.&nbsp;mu přiřadíme hodnotu <strong>tkinter.PIESLICE</strong>, vykreslí se
<a href="https://cs.wikipedia.org/wiki/Kruhov%C3%A1_v%C3%BDse%C4%8D">kruhová
výseč</a>:</p>

*** image ***
<p><i>Obrázek 4: Několik kruhových výsečí (pro oblouk o 180&deg; není rozdíl
mezi výsečí a úsečí patrný).</i></p>

<p>Poznámka: výseč ve skutečnosti nemusí být pouze kruhová, protože se, podobně
jako u oblouku, tvar specifikuje s&nbsp;využitím souřadnic protilehlých vrcholů
obalového obdélníku, takže lze tvořit i eliptickou výseč.</p>

<p>Čtvrtý obrázek byl vykreslen následujícím skriptem:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_arc(0, 0, 100, 100, fill='#ff8080')
canvas.create_arc(100, 100, 200, 200, fill='#8080ff', start=45)
canvas.create_arc(200, 0, 300, 100, fill='#80ffff', extent=180)
canvas.create_arc(300, 100, 400, 200, fill='#ffff80', start=45, extent=270)
&nbsp;
canvas.create_arc(0, 200, 100, 300, fill='#ff8080', start=90, extent=270)
canvas.create_arc(100, 300, 200, 400, fill='#8080ff', start=90+45, extent=270)
canvas.create_arc(200, 200, 300, 300, fill='#80ffff', start=180, extent=180)
canvas.create_arc(300, 300, 400, 400, fill='#ffff80', start=-45, extent=90)
&nbsp;
root.mainloop()
</pre>

<p>Knihovna Tkinter umožňuje, aby metoda <strong>canvas.create_arc()</strong>
alternativně vykreslila i <a
href="https://cs.wikipedia.org/wiki/Kruhov%C3%A1_%C3%BAse%C4%8D">kruhovou
úseč</a>. Postačuje použít pojmenovaný nepovinný parametr
<strong>style=tkinter.CHORD</strong>:</p>

<pre>
canvas.create_arc(300, 100, 400, 200,
                  fill='#ffff80',
                  start=45,
                  extent=270,
                  style=tkinter.CHORD)
</pre>

*** image ***
<p><i>Obrázek 5: Několik kruhových úsečí (pro oblouk o 180&deg; není rozdíl
mezi výsečí a úsečí patrný).</i></p>

<p>Pátý obrázek byl vykreslen následujícím skriptem:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_arc(0, 0, 100, 100, fill='#ff8080', style=tkinter.CHORD)
&nbsp;
canvas.create_arc(100, 100, 200, 200, fill='#8080ff', start=45,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(200, 0, 300, 100, fill='#80ffff', extent=180,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(300, 100, 400, 200, fill='#ffff80', start=45, extent=270,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(0, 200, 100, 300, fill='#ff8080', start=90, extent=270,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(100, 300, 200, 400, fill='#8080ff', start=90+45, extent=270,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(200, 200, 300, 300, fill='#80ffff', start=180, extent=180,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(300, 300, 400, 400, fill='#ffff80', start=-45, extent=90,
                  style=tkinter.CHORD)
&nbsp;
root.mainloop()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Styly liniových tvarů</h2>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_line(10, 10, 90, 90)
canvas.create_line(110, 10, 190, 90, fill='#8080ff')
canvas.create_line(210, 10, 290, 90, fill='#ffff80', width=8)
canvas.create_line(310, 10, 390, 90, fill='#80aa80', width=8, dash=15)
&nbsp;
canvas.create_line(10, 110, 90, 190, fill='red', width=12)
canvas.create_line(110, 110, 190, 190, fill='red', width=12,
                   cap=tkinter.BUTT)
canvas.create_line(210, 110, 290, 190, fill='red', width=12,
                   cap=tkinter.PROJECTING)
canvas.create_line(310, 110, 390, 190, fill='red', width=12,
                   cap=tkinter.ROUND)
&nbsp;
canvas.create_line(10, 110, 90, 190, fill='white')
canvas.create_line(110, 110, 190, 190, fill='white')
canvas.create_line(210, 110, 290, 190, fill='white')
canvas.create_line(310, 110, 390, 190, fill='white')
&nbsp;
canvas.create_line(10, 210, 50, 290, 90, 210, fill='red', width=12)
canvas.create_line(110, 210, 150, 290, 190, 210, fill='red', width=12,
                   cap=tkinter.BUTT)
canvas.create_line(210, 210, 250, 290, 290, 210, fill='red', width=12,
                   cap=tkinter.PROJECTING)
canvas.create_line(310, 210, 350, 290, 390, 210, fill='red', width=12,
                   cap=tkinter.ROUND)
&nbsp;
# pomocne usecky
canvas.create_line(10, 210, 50, 290, 90, 210, fill='white')
canvas.create_line(110, 210, 150, 290, 190, 210, fill='white')
canvas.create_line(210, 210, 250, 290, 290, 210, fill='white')
canvas.create_line(310, 210, 350, 290, 390, 210, fill='white')
&nbsp;
canvas.create_line(10, 310, 50, 390, 90, 310, fill='red', width=12)
canvas.create_line(110, 310, 150, 390, 190, 310, fill='red', width=12,
                   join=tkinter.ROUND)
canvas.create_line(210, 310, 250, 390, 290, 310, fill='red', width=12,
                   join=tkinter.BEVEL)
canvas.create_line(310, 310, 350, 390, 390, 310, fill='red', width=12,
                   join=tkinter.MITER)
&nbsp;
# pomocne usecky
canvas.create_line(10, 310, 50, 390, 90, 310, fill='white')
canvas.create_line(110, 310, 150, 390, 190, 310, fill='white')
canvas.create_line(210, 310, 250, 390, 290, 310, fill='white')
canvas.create_line(310, 310, 350, 390, 390, 310, fill='white')
&nbsp;
root.mainloop()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Čárkované a čerchované úsečky</h2>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_line(10, 10, 90, 90)
canvas.create_line(110, 10, 190, 90, fill='#8080ff')
canvas.create_line(210, 10, 290, 90, fill='#ffff80', width=8)
canvas.create_line(310, 10, 390, 90, fill='#80aa80', width=8, dash=15)
&nbsp;
canvas.create_line(10, 110, 90, 190, width=2, dash=(12, 3))
canvas.create_line(110, 110, 190, 190, width=2, dash=(9, 6))
canvas.create_line(210, 110, 290, 190, width=2, dash=(6, 9))
canvas.create_line(310, 110, 390, 190, width=2, dash=(3, 12))
&nbsp;
canvas.create_line(10, 210, 90, 290, width=2, dash=(12, 2, 2, 2))
canvas.create_line(110, 210, 190, 290, width=2, dash=(12, 2, 4, 2))
canvas.create_line(210, 210, 290, 290, width=2, dash=(12, 4, 2, 4))
canvas.create_line(310, 210, 390, 290, width=2, dash=(12, 2, 2, 2, 2, 2))
&nbsp;
canvas.create_line(10, 310, 90, 390, width=2, dash=(12, 2, 2, 2), dashoff=0)
canvas.create_line(110, 310, 190, 390, width=2, dash=(12, 2, 4, 2), dashoff=5)
canvas.create_line(210, 310, 290, 390, width=2, dash=(12, 4, 2, 4), dashoff=10)
canvas.create_line(310, 310, 390, 390, width=2, dash=(12, 2, 2, 2, 2, 2),
                   dashoff=-5)
&nbsp;
root.mainloop()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kresba šipek</h2>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_line(10, 50, 90, 50)
canvas.create_line(110, 50, 190, 50, arrow=tkinter.FIRST)
canvas.create_line(210, 50, 290, 50, arrow=tkinter.LAST)
canvas.create_line(310, 50, 390, 50, arrow=tkinter.BOTH)
&nbsp;
canvas.create_line(10, 150, 90, 150, width=5, )
canvas.create_line(110, 150, 190, 150, width=5, arrow=tkinter.FIRST)
canvas.create_line(210, 150, 290, 150, width=5, arrow=tkinter.LAST)
canvas.create_line(310, 150, 390, 150, width=5, arrow=tkinter.BOTH)
&nbsp;
canvas.create_line(10, 250, 90, 250, width=2,   arrow=tkinter.LAST,
                   arrowshape=(10, 10, 10))
canvas.create_line(110, 250, 190, 250, width=2, arrow=tkinter.LAST,
                   arrowshape=(10, 20, 10))
canvas.create_line(210, 250, 290, 250, width=2, arrow=tkinter.LAST,
                   arrowshape=(10, 5, 10))
canvas.create_line(310, 250, 390, 250, width=2, arrow=tkinter.LAST,
                   arrowshape=(10, 0, 10))
&nbsp;
canvas.create_line(10, 350, 90, 350, width=2, arrow=tkinter.BOTH,
                   arrowshape=(10, 10, 10))
canvas.create_line(110, 350, 190, 350, width=2, arrow=tkinter.BOTH,
                   arrowshape=(10, 20, 10))
canvas.create_line(210, 350, 290, 350, width=2, arrow=tkinter.BOTH,
                   arrowshape=(10, 5, 10))
canvas.create_line(310, 350, 390, 350, width=2, arrow=tkinter.BOTH,
                   arrowshape=(10, 0, 10))
&nbsp;
root.mainloop()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Uzavřené obrazce</h2>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_rectangle(10, 30, 90, 70, fill='#ff8080')
&nbsp;
canvas.create_rectangle(30, 110, 70, 190, fill='#ff8080')
&nbsp;
canvas.create_rectangle(20, 220, 80, 280, fill='#ff8080')
&nbsp;
canvas.create_oval(110, 30, 190, 70, fill='#8080ff')
&nbsp;
canvas.create_oval(130, 110, 170, 190, fill='#8080ff')
&nbsp;
canvas.create_oval(120, 220, 180, 280, fill='#8080ff')
&nbsp;
canvas.create_polygon(210, 20, 290, 20, 250, 80, fill='#ffff80')
&nbsp;
canvas.create_polygon(310, 20, 390, 20, 350, 80, fill='#ffff80',
                      outline='black')
&nbsp;
canvas.create_polygon(210, 120, 250, 140, 290, 120, 250, 180,
                      fill='#80ff80')
&nbsp;
canvas.create_polygon(310, 120, 350, 140, 390, 120, 350, 180, fill='#80ff80',
                      outline='black')
&nbsp;
canvas.create_polygon(210, 220, 290, 220, 250, 280, fill='#ffff80',
                      smooth=1)
&nbsp;
canvas.create_polygon(310, 220, 390, 220, 350, 280, fill='#ffff80',
                      outline='black', smooth=1)
&nbsp;
canvas.create_polygon(210, 320, 250, 340, 290, 320, 250, 380, fill='#80ff80',
                      smooth=1)
&nbsp;
canvas.create_polygon(310, 320, 350, 340, 390, 320, 350, 380, fill='#80ff80',
                      outline='black', smooth=1)
&nbsp;
&nbsp;
root.mainloop()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Styly vykreslení uzavřených obrazců</h2>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_rectangle(10, 30, 90, 70, fill='#ff8080', width=2,
                        activefill='white')
&nbsp;
canvas.create_rectangle(110, 30, 190, 70, fill='#ff8080', width=2,
                        dash=(5, 5), activedash=1)
&nbsp;
canvas.create_rectangle(30, 110, 70, 190, fill='#ff8080',
                        activeoutline='yellow')
&nbsp;
canvas.create_rectangle(20, 220, 80, 280, fill='#ff8080',
                        activeoutline='yellow', activewidth='5')
&nbsp;
canvas.create_oval(130, 110, 170, 190, fill='#8080ff', width=2,
                   activedash=(10, 10))
&nbsp;
canvas.create_oval(120, 220, 180, 280, fill=None, activefill='#8080ff')
&nbsp;
canvas.create_rectangle(210, 30, 290, 70, fill=None, width=2,
                        activefill='white')
&nbsp;
canvas.create_rectangle(310, 30, 390, 70, fill=None, width=2, dash=(5, 5),
                        activedash=1)
&nbsp;
canvas.create_rectangle(230, 110, 270, 190, fill=None, activeoutline='yellow',
                        width=5)
&nbsp;
canvas.create_rectangle(220, 220, 280, 280, fill=None, activeoutline='yellow',
                        activewidth='5')
&nbsp;
canvas.create_oval(330, 110, 370, 190, fill=None, width=2, activedash=(10, 10))
&nbsp;
canvas.create_oval(320, 220, 380, 280, fill=None, activefill='#8080ff',
                   width=5)
&nbsp;
canvas.create_line(10, 330, 90, 370, fill='#80ff80', width=2,
                   activefill='white')
&nbsp;
canvas.create_line(110, 330, 190, 370, fill='#80ff80', width=20,
                   activefill='white')
&nbsp;
canvas.create_line(210, 330, 290, 370, fill='#80ff80', width=20,
                   activefill='white', dash=10)
&nbsp;
&nbsp;
root.mainloop()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rámce (vložená okna) na plátnu</h2>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=300, height=300, background='white')
canvas.pack()
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, dash=10)
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, smooth=True, width=2, fill="red")
&nbsp;
nested_window = tkinter.Frame(relief=tkinter.RAISED)
canvas.create_window(150, 150, width=150, height=150, window=nested_window)
&nbsp;
label = tkinter.Label(root, text="Hello world!")
button = tkinter.Button(root, text="Close window", command=exit)
&nbsp;
label.pack()
button.pack()
&nbsp;
root.mainloop()
</pre>
&nbsp;
<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=300, height=300, background='white')
canvas.pack()
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, dash=10)
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, smooth=True, width=2, fill="red")
&nbsp;
nested_window = tkinter.Frame(relief=tkinter.RAISED)
canvas.create_window(150, 150, width=150, height=150, window=nested_window)
&nbsp;
label = tkinter.Label(nested_window, text="Hello world!")
button = tkinter.Button(nested_window, text="Close window", command=exit)
&nbsp;
label.pack()
button.pack()
&nbsp;
root.mainloop()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Bitmapy a pixmapy</h2>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
image_names = [
    "document-open",
    "document-save",
    "application-exit",
    "edit-undo",
    "edit-cut",
    "edit-copy",
    "edit-paste",
    "edit-delete",
    "edit-select-all"]
&nbsp;
root = tkinter.Tk()
&nbsp;
images = {}
for image_name in image_names:
    images[image_name] = tkinter.PhotoImage(file="icons/%s.gif" % image_name)
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_image((50, 50), image=images['document-open'])
canvas.create_image((150, 50), image=images['document-save'])
canvas.create_image((250, 50), image=images['application-exit'])
canvas.create_image((50, 150), image=images['edit-undo'])
canvas.create_image((150, 150), image=images['edit-cut'])
canvas.create_image((250, 150), image=images['edit-copy'])
canvas.create_image((50, 250), image=images['edit-paste'])
canvas.create_image((150, 250), image=images['edit-delete'])
canvas.create_image((250, 250), image=images['edit-select-all'])
&nbsp;
root.mainloop()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Text na canvasu</h2>

<pre>
#!/usr/bin/env python

import tkinter
from tkinter import ttk
import sys


WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100


def exit():
    sys.exit(0)


def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()

    draw_grid(canvas, width, height, grid_size)
    return canvas


def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")


def draw_text(canvas, x, y, anchor):
    canvas.create_text(x, y, text="Test", fill="gray", anchor=anchor,
                       font="Helvetica 16")
    canvas.create_line(x-5, y, x+5, y, fill="red")
    canvas.create_line(x, y-5, x, y+5, fill="red")


root = tkinter.Tk()

canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)

draw_text(canvas, 50, 50, "ne")
draw_text(canvas, 150, 50, "n")
draw_text(canvas, 250, 50, "nw")

draw_text(canvas, 50, 150, "e")
draw_text(canvas, 150, 150, "center")
draw_text(canvas, 250, 150, "w")

draw_text(canvas, 50, 250, "se")
draw_text(canvas, 150, 250, "s")
draw_text(canvas, 250, 250, "sw")

root.mainloop()
</pre>

<pre>
#!/usr/bin/env python

import tkinter
from tkinter import ttk
import sys


WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100


def exit():
    sys.exit(0)


def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()

    draw_grid(canvas, width, height, grid_size)
    return canvas


def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")


def draw_text(canvas, x, y, anchor):
    canvas.create_text(x, y, text="\n".join("Test"),
                       fill="gray", anchor=anchor, font="Helvetica 12")
    canvas.create_line(x-5, y, x+5, y, fill="red")
    canvas.create_line(x, y-5, x, y+5, fill="red")


root = tkinter.Tk()

canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)

draw_text(canvas, 50, 50, "ne")
draw_text(canvas, 150, 50, "n")
draw_text(canvas, 250, 50, "nw")

draw_text(canvas, 50, 200, "e")
draw_text(canvas, 150, 200, "center")
draw_text(canvas, 250, 200, "w")

draw_text(canvas, 50, 350, "se")
draw_text(canvas, 150, 350, "s")
draw_text(canvas, 250, 350, "sw")

root.mainloop()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naleznete pod
následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>67_objects_on_canvas.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/67_objects_on_canvas.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/67_objects_on_canvas.py</a></td></tr>
<tr><td>68_arc.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/68_arc.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/68_arc.py</a></td></tr>
<tr><td>69_pieslice.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/69_pieslice.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/69_pieslice.py</a></td></tr>
<tr><td>70_chord.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/70_chord.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/70_chord.py</a></td></tr>
<tr><td>71_line_styles.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/71_line_styles.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/71_line_styles.py</a></td></tr>
<tr><td>72_line_dashes.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/72_line_dashes.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/72_line_dashes.py</a></td></tr>
<tr><td>73_arrows.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/73_arrows.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/73_arrows.py</a></td></tr>
<tr><td>74_closed_entities.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/74_closed_entities.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/74_closed_entities.py</a></td></tr>
<tr><td>75_closed_entities_style.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/75_closed_entities_style.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/75_closed_entities_style.py</a></td></tr>
<tr><td>76_frame_on_canvas.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/76_frame_on_canvas.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/76_frame_on_canvas.py</a></td></tr>
<tr><td>77_frame_on_canvas2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/77_frame_on_canvas2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/77_frame_on_canvas2.py</a></td></tr>
<tr><td>78_image.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/78_image.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/78_image.py</a></td></tr>
<tr><td>79_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/79_text.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/79_text.py</a></td></tr>
<tr><td>80_vertical_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/80_vertical_text.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/80_vertical_text.py</a></td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

