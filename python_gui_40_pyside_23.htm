<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Reakce na události v GUI v jazyku QML a PySide 2</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Reakce na události v GUI v jazyku QML a PySide 2</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o tvorbě grafického uživatelského rozhraní s využitím Pythonu a frameworku PySide (přesněji PySide 2) se seznámíme s dalšími možnostmi naprogramování reakcí na události, které vzniknou v okně či dialogu deklarovaném v jazyku QML.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Reakce na události v&nbsp;GUI v&nbsp;jazyku QML a PySide 2</a></p>
<p><a href="#k02">2. Reakce na stisk tlačítka myši kdekoli na ploše hlavního okna</a></p>
<p><a href="#k03">3. Úprava příkladu &ndash; omezení plochy reagující na stisk tlačítka myši</a></p>
<p><a href="#k04">4. Zjištění souřadnic kurzoru myši</a></p>
<p><a href="#k05">*** 5. Lokální souřadnicový systém každého objektu <strong>MouseArea</strong></a></p>
<p><a href="#k06">*** 6. Zdrojový kód třetího demonstračního příkladu</a></p>
<p><a href="#k07">*** 7. Reakce na otočení kolečkem myši</a></p>
<p><a href="#k08">*** 8. Zdrojový kód čtvrtého demonstračního příkladu</a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Reakce na události v&nbsp;GUI v&nbsp;jazyku QML a PySide 2</h2>

<p>V&nbsp;pořadí již dvacáté třetí části seriálu o tvorbě grafického
uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím frameworku PySide (2) se
opět seznámíme s&nbsp;některými důležitými vlastnostmi jazyka QML (<i>Qt
Modeling Language</i>). Tentokrát se bude jednat o popis některých možností,
které vývojáři mají při programování reakcí na události, jež vznikají
v&nbsp;grafickém uživatelském rozhraní činností uživatele (použití myši,
klávesnice nebo dalšího vstupního zařízení, například dotykového displeje).
Zajímavé a užitečné přitom je, že některé reakce je možné naprogramovat přímo
v&nbsp;jazyku QML, takže není nutné pro každou podúlohu zajišťovat kooperaci
mezi QML a Pythonem (což je ovšem většinou dobře, protože nám to umožní oddělit
logiku aplikace od vzhledu a chování GUI). Samozřejmě je možné zkombinovat
naprogramované reakce na GUI události s&nbsp;animacemi, o nichž jsme se ve
stručnosti zmínili minule.</p>

<p><div class="rs-tip-major">Poznámka: i v&nbsp;dnešním článku v&nbsp;prakticky
všech dále popsaných demonstračních příkladech využijeme
&bdquo;univerzální&ldquo; skript určený pro načtení souboru QML, inicializaci
grafického uživatelského rozhraní na základě obsahu QML a pro zobrazení
hlavního okna aplikace. Úplný zdrojový kód výše popsaného modulu naleznete na
adrese <a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/QmlViewer.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/QmlViewer.py</a>.
Tento modul by měl být umístěn ve stejném adresáři, jako QML soubory a skripty
s&nbsp;demonstračními příklady:</div></p>

<pre>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i># univerzální prohlížeč QML souborů</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide2 import QtCore
from PySide2 import QtGui
&nbsp;
<i># modul pro práci s QML</i>
from PySide2 import QtQuick
&nbsp;
&nbsp;
<i># nový widget bude odvozen od QDeclarativeView</i>
class <strong>MainWindow</strong>(QtQuick.QQuickView):
&nbsp;
    def <strong>__init__</strong>(self, qml_file, parent=None):
        super(MainWindow, self).__init__(parent)
        <i># nastavení titulku hlavního okna aplikace</i>
        self.setTitle("QML Example @ PySide2: " + qml_file)
        <i># načtení souboru QML</i>
        self.setSource(QtCore.QUrl.fromLocalFile(qml_file))
        <i># necháme QML změnit velikost okna</i>
        self.setResizeMode(QtQuick.QQuickView.SizeRootObjectToView)
&nbsp;
&nbsp;
def <strong>main</strong>(qml_file):
    <i># vytvoření Qt aplikace</i>
    app = QtGui.QGuiApplication(sys.argv)
&nbsp;
    <i># vytvoření hlavního okna</i>
    window = MainWindow(qml_file)
&nbsp;
    <i># zobrazení hlavního okna na desktopu</i>
    window.show()
&nbsp;
    <i># spuštění aplikace</i>
    sys.exit(app.exec_())
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Reakce na stisk tlačítka myši kdekoli na ploše hlavního okna</h2>

<p>Dnešní první demonstrační příklad bude velmi jednoduchý a bude vlastně pouze
shrnovat znalosti, které již o jazyku QML máme. V&nbsp;příkladu je deklarován
obdélník představující plochu okna aplikace, do kterého jsou vloženy tři
čtverce s&nbsp;různobarevnou výplní:</p>

*** image ***
<p><i>Obrázek 1: Výchozí nastavení okna dnešního prvního demonstračního
příkladu.</i></p>

<p>Navíc je však přes celé okno vytvořena plocha reagující na operace prováděné
myší. Tato plocha je neviditelná a pokud uživatel stiskne kdekoli v&nbsp;okně
tlačítko myši, změní se barva výplně prostředního čtverce. Toto chování
zajišťuje následující kód:</p>

<pre>
<strong>MouseArea</strong> {
    anchors.fill: parent
    onClicked: {
        r2.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
    }
}
</pre>

<p>Povšimněte si, že se vlastně jedná o deklaraci hodnoty přiřazené
k&nbsp;atributu <strong>onClicked</strong>. Hodnotou je ovšem (anonymní)
funkce, což je zcela korektní, protože QML využívá podmnožinu JavaScriptu,
v&nbsp;němž jsou funkce plnohodnotným datovým typem.</p>

*** image ***
<p><i>Obrázek 2: Změna barvy prostředního čtverce kliknutím tlačítkem
myši.</i></p>

<p>Úplný zdrojový kód dnešního prvního demonstračního příkladu vypadá
následovně:</p>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        rotation: 45
        anchors.left: parent.left
        anchors.bottom: parent.bottom
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        z: 1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        rotation: 45
        anchors.right: parent.right
        anchors.bottom: parent.bottom
    }
&nbsp;
    <strong>MouseArea</strong> {
        anchors.fill: parent
        onClicked: {
            r2.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        }
    }
}
</pre>

<p>Zdrojový kód demonstračního příkladu využívá modul
<strong>QmlViewer</strong> popsaný v&nbsp;první kapitole:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from <strong>QmlViewer</strong> import *
&nbsp;
QML_FILE = "13_mouse_click.qml"
&nbsp;
if __name__ == '__main__':
    main(QML_FILE)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Úprava příkladu &ndash; omezení plochy reagující na stisk tlačítka myši</h2>

<p>Pokud budeme vyžadovat, aby se barva druhého čtverce změnila pouze ve
chvíli, kdy uživatel klikne do plochy tohoto čtverce a nikoli na libovolné
místo v&nbsp;hlavním okně aplikace, je úprava velmi snadná &ndash; prostě
přesuneme deklaraci <strong>MouseArea</strong> dovnitř deklarace příslušného
čtverce (význam <strong>anchors.fill: parent</strong> se tedy změní, protože
rodičem <strong>MouseArea</strong> je nyní čtverec
s&nbsp;<strong>id=r2</strong>):</p>

<pre>
<strong>Rectangle</strong> {
    id: r2
    width: 160
    height: 160
    color: "yellow"
    opacity: 0.5
    z: 1
    anchors.horizontalCenter: parent.horizontalCenter
    anchors.top: parent.top
&nbsp;
    <strong>MouseArea</strong> {
        anchors.fill: parent
        onClicked: {
            r2.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        }
    }
}
</pre>

<p>Jen pro úplnost si uveďme úplný zdrojový kód druhé varianty předchozího
demonstračního příkladu:</p>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        rotation: 45
        anchors.left: parent.left
        anchors.bottom: parent.bottom
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        z: 1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
&nbsp;
        <strong>MouseArea</strong> {
            anchors.fill: parent
            onClicked: {
                r2.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
            }
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        rotation: 45
        anchors.right: parent.right
        anchors.bottom: parent.bottom
    }
&nbsp;
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zjištění souřadnic kurzoru myši</h2>

<p>V&nbsp;některých případech nám nestačí pouze reagovat na samotný stisk
tlačítka myši, ale budeme potřebovat vědět, na kterém místě se nachází kurzor
myši. To lze zjistit (v&nbsp;handleru příslušné události) velmi snadno
s&nbsp;využitím <strong>mouse.x</strong> a <strong>mouse.y</strong>:</p>

<pre>
<strong>MouseArea</strong> {
    anchors.fill: parent
    onClicked: {
        r2.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        console.log("mouse coordinates:", mouse.x, mouse.y);
    }
}
</pre>

<p>Příklad výstupu (na konzoli/terminál) s&nbsp;využitím
<strong>console.log()</strong>:</p>

<pre>
qml: mouse coordinates: 9 10
qml: mouse coordinates: 4 5
qml: mouse coordinates: 314 236
qml: mouse coordinates: 14 233
qml: mouse coordinates: 281 25
qml: mouse coordinates: 276 75
qml: mouse coordinates: 240 85
</pre>

<p>V&nbsp;handleru události <strong>onClicked</strong> totiž máme
k&nbsp;dispozici instanci třídy <strong>QQuickMouseEvent</strong>, která nám
nabízí mj.&nbsp;i tyto atributy:</p>

<table>
<tr><th>Atribut</th><th>Význam</th></tr>
<tr><td>x</td><td>horizontální souřadnice kurzoru myši</td></tr>
<tr><td>y</td><td>vertikální souřadnice kurzoru myši</td></tr>
<tr><td>button</td><td>tlačítko myši, které bylo stisknuto (levé, pravé, prostřední) a vyvolalo událost</td></tr>
<tr><td>buttons</td><td>bitové pole s&nbsp;kombinacemi právě stisknutých tlačítek</td></tr>
<tr><td>flags</td><td>v&nbsp;současnosti obsahuje pouze příznak, zda stisk vyvolá událost typu <i>doubleclick</i></td></tr>
<tr><td>modifiers</td><td>bitové pole obsahující příznaky modifikátorů (Shift, Control, Alt) stisknutých během události</td></tr>
<tr><td>source</td><td>rozlišení mezi reálnou myší a jiným zařízením (touchscreen atd.)</td></tr>
</table>

<p>Opět si ukažme úplný zdrojový kód demonstračního příkladu, který dokáže
vypsat souřadnice kurzoru myši:</p>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        rotation: 45
        anchors.left: parent.left
        anchors.bottom: parent.bottom
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        z: 1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        rotation: 45
        anchors.right: parent.right
        anchors.bottom: parent.bottom
    }
&nbsp;
    <strong>MouseArea</strong> {
        anchors.fill: parent
        onClicked: {
            r2.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
            console.log("mouse coordinates:", mouse.x, mouse.y);
        }
    }
}
</pre>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from <strong>QmlViewer</strong> import *
&nbsp;
QML_FILE = "14_mouse_click_coordinates.qml"
&nbsp;
if __name__ == '__main__':
    main(QML_FILE)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Lokální souřadnicový systém každého objektu <strong>MouseArea</strong></h2>

<p><a href="#k04">V&nbsp;předchozí kapitole</a> jsme se zmínili o použití
souřadnice kurzoru myši ve chvíli, kdy vznikla nějaká událost vyvolaná myší.
Tyto souřadnice však nejsou absolutní (ani v&nbsp;rámci okna a samozřejmě ani
v&nbsp;rámci celého desktopu), ale jsou vztaženy k&nbsp;objektu typu
<strong>MouseArea</strong>. Záleží tedy na tom, jak přesně je tato plocha
definována: pokud bude vytvořena v&nbsp;rámci menšího objektu, popř.&nbsp;když
bude celý objekt otočen, změní se příslušným způsobem i lokální souřadnicový
systém, k&nbsp;němuž jsou vztaženy souřadnice kurzoru myši. To je ve většině
případů přesně takové chování, které dává smysl (představme si například
kreslicí plochu umístěnou do libovolného místa okna aplikace).</p>

<pre>
<strong>Rectangle</strong> {
    id: r1
    width: 160
    height: 160
    color: "red"
    opacity: 0.5
    rotation: 45
    anchors.left: parent.left
    anchors.bottom: parent.bottom
&nbsp;
    <strong>MouseArea</strong> {
        anchors.fill: parent
        onClicked: {
            console.log("mouse coordinates:", mouse.x, mouse.y);
        }
    }
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zdrojový kód třetího demonstračního příkladu</h2>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        rotation: 45
        anchors.left: parent.left
        anchors.bottom: parent.bottom
&nbsp;
        <strong>MouseArea</strong> {
            anchors.fill: parent
            onClicked: {
                parent.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
                console.log("mouse coordinates:", mouse.x, mouse.y);
            }
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        z: 1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
&nbsp;
        <strong>MouseArea</strong> {
            anchors.fill: parent
            onClicked: {
                parent.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
                console.log("mouse coordinates:", mouse.x, mouse.y);
            }
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        rotation: 45
        anchors.right: parent.right
        anchors.bottom: parent.bottom
&nbsp;
        <strong>MouseArea</strong> {
            anchors.fill: parent
            onClicked: {
                parent.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
                console.log("mouse coordinates:", mouse.x, mouse.y);
            }
        }
    }
}
</pre>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
from QmlViewer import *
&nbsp;
QML_FILE = "15_more_mouse_areas.qml"
&nbsp;
if __name__ == '__main__':
    main(QML_FILE)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Reakce na otočení kolečkem myši</h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zdrojový kód čtvrtého demonstračního příkladu</h2>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        rotation: 45
        anchors.left: parent.left
        anchors.bottom: parent.bottom
&nbsp;
        <strong>MouseArea</strong> {
            anchors.fill: parent
            onClicked: {
                parent.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
                console.log("mouse coordinates:", mouse.x, mouse.y);
            }
            onWheel: {
                console.log("mouse wheel:", wheel.angleDelta.y);
                parent.rotation += wheel.angleDelta.y / 30;
            }
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        z: 1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
&nbsp;
        <strong>MouseArea</strong> {
            anchors.fill: parent
            onClicked: {
                parent.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
                console.log("mouse coordinates:", mouse.x, mouse.y);
            }
            onWheel: {
                console.log("mouse wheel:", wheel.angleDelta.y);
                parent.rotation += wheel.angleDelta.y / 30;
            }
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        rotation: 45
        anchors.right: parent.right
        anchors.bottom: parent.bottom
&nbsp;
        <strong>MouseArea</strong> {
            anchors.fill: parent
            onClicked: {
                parent.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
                console.log("mouse coordinates:", mouse.x, mouse.y);
            }
            onWheel: {
                console.log("mouse wheel:", wheel.angleDelta.y);
                parent.rotation += wheel.angleDelta.y / 30;
            }
        }
    }
}
</pre>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
from QmlViewer import *
&nbsp;
QML_FILE = "16_mouse_wheel.qml"
&nbsp;
if __name__ == '__main__':
    main(QML_FILE)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        rotation: 45
        anchors.left: parent.left
        anchors.bottom: parent.bottom
    }
&nbsp;
    Component.onCompleted: {
        console.log("ok, everything is prepared");
    }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    function onRect1Click(mouse) {
        r1.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        console.log("mouse coordinates:", mouse.x, mouse.y);
    }
&nbsp;
    function onRect1WheelRotate(wheel) {
        console.log("mouse wheel:", wheel.angleDelta.y);
        r1.rotation += wheel.angleDelta.y / 30;
    }
&nbsp;
    function onRect2Click(mouse) {
        r2.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        console.log("mouse coordinates:", mouse.x, mouse.y);
    }
&nbsp;
    function onRect2WheelRotate(wheel) {
        console.log("mouse wheel:", wheel.angleDelta.y);
        r2.rotation += wheel.angleDelta.y / 30;
    }
&nbsp;
    function onRect3Click(mouse) {
        r3.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        console.log("mouse coordinates:", mouse.x, mouse.y);
    }
&nbsp;
    function onRect3WheelRotate(wheel) {
        console.log("mouse wheel:", wheel.angleDelta.y);
        r3.rotation += wheel.angleDelta.y / 30;
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        rotation: 45
        anchors.left: parent.left
        anchors.bottom: parent.bottom
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea1
            anchors.fill: parent
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        z: 1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea2
            anchors.fill: parent
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        rotation: 45
        anchors.right: parent.right
        anchors.bottom: parent.bottom
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea3
            anchors.fill: parent
        }
    }
&nbsp;
    Component.onCompleted: {
        console.log("completed")
        mouseArea1.clicked.connect(onRect1Click)
        mouseArea1.wheel.connect(onRect1WheelRotate)
        mouseArea2.clicked.connect(onRect2Click)
        mouseArea2.wheel.connect(onRect2WheelRotate)
        mouseArea3.clicked.connect(onRect3Click)
        mouseArea3.wheel.connect(onRect3WheelRotate)
    }
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    function onRectClick(rectangle, mouse) {
        rectangle.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        console.log("mouse coordinates:", mouse.x, mouse.y);
    }
&nbsp;
    function onRectWheelRotate(rectangle, wheel) {
        console.log("mouse wheel:", wheel.angleDelta.y);
        rectangle.rotation += wheel.angleDelta.y / 30;
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        rotation: 45
        anchors.left: parent.left
        anchors.bottom: parent.bottom
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea1
            anchors.fill: parent
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        z: 1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea2
            anchors.fill: parent
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        rotation: 45
        anchors.right: parent.right
        anchors.bottom: parent.bottom
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea3
            anchors.fill: parent
        }
    }
&nbsp;
    Component.onCompleted: {
        console.log("completed")
        mouseArea1.clicked.connect(function(event) {onRectClick(r1, event)})
        mouseArea2.clicked.connect(function(event) {onRectClick(r2, event)})
        mouseArea3.clicked.connect(function(event) {onRectClick(r3, event)})
&nbsp;
        mouseArea1.wheel.connect(function(event) {onRectWheelRotate(r1, event)})
        mouseArea2.wheel.connect(function(event) {onRectWheelRotate(r2, event)})
        mouseArea3.wheel.connect(function(event) {onRectWheelRotate(r3, event)})
    }
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        x: 0
        y: 0
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea1
            anchors.fill: parent
            drag.target: r1
            drag.axis: Drag.XAndYAxis
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        x: 80
        y: 80
        z: 1
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea2
            anchors.fill: parent
            drag.target: r2
            drag.axis: Drag.YAxis
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        x: 160
        y: 0
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea3
            anchors.fill: parent
            drag.target: r3
            drag.axis: Drag.XAxis
        }
    }
&nbsp;
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        x: 0
        y: 0
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea1
            anchors.fill: parent
            drag.target: r1
            drag.axis: Drag.XAndYAxis
            drag.minimumX: 0
            drag.maximumX: main.width - r1.width
            drag.minimumY: 0
            drag.maximumY: main.height - r1.height
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        x: 80
        y: 80
        z: 1
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea2
            anchors.fill: parent
            drag.target: r2
            drag.axis: Drag.YAxis
            drag.minimumY: 0
            drag.maximumY: main.height - r2.height
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        x: 160
        y: 0
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea3
            anchors.fill: parent
            drag.target: r3
            drag.axis: Drag.XAxis
            drag.minimumX: 0
            drag.maximumX: main.width - r3.width
        }
    }
&nbsp;
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        x: 0
        y: 0
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea1
            anchors.fill: parent
            drag {
                target: r1
                axis: Drag.XAndYAxis
                minimumX: 0
                maximumX: main.width - r1.width
                minimumY: 0
                maximumY: main.height - r1.height
            }
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        x: 80
        y: 80
        z: 1
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea2
            anchors.fill: parent
            drag {
                target: r2
                axis: Drag.YAxis
                minimumY: 0
                maximumY: main.height - r2.height
            }
        }
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        x: 160
        y: 0
&nbsp;
        <strong>MouseArea</strong> {
            id: mouseArea3
            anchors.fill: parent
            drag {
                target: r3
                axis: Drag.XAxis
                minimumX: 0
                maximumX: main.width - r3.width
            }
        }
    }
&nbsp;
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly, podobně
jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td> 1</td><td>13_mouse_click.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/13_mouse_click.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/13_mouse_click.py</a></td></tr>
<tr><td> 2</td><td>13_mouse_click_variant_2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/13_mouse_click_variant_2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/13_mouse_click_variant_2.py</a></td></tr>
<tr><td> 3</td><td>14_mouse_click_coordinates.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/14_mouse_click_coordinates.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/14_mouse_click_coordinates.py</a></td></tr>
<tr><td> 4</td><td>15_more_mouse_areas.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/15_more_mouse_areas.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/15_more_mouse_areas.py</a></td></tr>
<tr><td> 5</td><td>16_mouse_wheel.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/16_mouse_wheel.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/16_mouse_wheel.py</a></td></tr>
<tr><td> 6</td><td>17_on_completed.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/17_on_completed.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/17_on_completed.py</a></td></tr>
<tr><td> 7</td><td>18_connect_signals.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/18_connect_signals.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/18_connect_signals.py</a></td></tr>
<tr><td> 8</td><td>19_better_connect_signals.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/19_better_connect_signals.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/19_better_connect_signals.py</a></td></tr>
<tr><td> 9</td><td>20_mouse_drag.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/20_mouse_drag.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/20_mouse_drag.py</a></td></tr>
<tr><td>10</td><td>21_mouse_drag_limits.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/21_mouse_drag_limits.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/21_mouse_drag_limits.py</a></td></tr>
<tr><td>11</td><td>22_mouse_drag_limits_B.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/22_mouse_drag_limits_B.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/22_mouse_drag_limits_B.py</a></td></tr>
</table>

<p>Následuje tabulka s&nbsp;odkazy na soubory QML s&nbsp;popisem grafického
uživatelského rozhraní, které taktéž budete potřebovat:</p>

<table>
<tr><th> #</th><th>QML soubor</th><th>Adresa</th></tr>
<tr><td> 1</td><td>13_mouse_click.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/13_mouse_click.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/13_mouse_click.qml</a></td></tr>
<tr><td> 2</td><td>13_mouse_click_variant_2.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/13_mouse_click_variant_2.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/13_mouse_click_variant_2.qml</a></td></tr>
<tr><td> 3</td><td>14_mouse_click_coordinates.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/14_mouse_click_coordinates.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/14_mouse_click_coordinates.qml</a></td></tr>
<tr><td> 4</td><td>15_more_mouse_areas.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/15_more_mouse_areas.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/15_more_mouse_areas.qml</a></td></tr>
<tr><td> 5</td><td>16_mouse_wheel.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/16_mouse_wheel.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/16_mouse_wheel.qml</a></td></tr>
<tr><td> 6</td><td>17_on_completed.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/17_on_completed.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/17_on_completed.qml</a></td></tr>
<tr><td> 7</td><td>18_connect_signals.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/18_connect_signals.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/18_connect_signals.qml</a></td></tr>
<tr><td> 8</td><td>19_better_connect_signals.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/19_better_connect_signals.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/19_better_connect_signals.qml</a></td></tr>
<tr><td> 9</td><td>20_mouse_drag.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/20_mouse_drag.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/20_mouse_drag.qml</a></td></tr>
<tr><td>10</td><td>21_mouse_drag_limits.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/21_mouse_drag_limits.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/21_mouse_drag_limits.qml</a></td></tr>
<tr><td>11</td><td>22_mouse_drag_limits_B.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/22_mouse_drag_limits_B.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/22_mouse_drag_limits_B.qml</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>QML Tutorial<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/qmltutorial/index.html">https://pyside.github.io/docs/pyside/tutorials/qmltutorial/index.html</a>
</li>

<li>QML Advanced Tutorial<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/qmladvancedtutorial/index.html">https://pyside.github.io/docs/pyside/tutorials/qmladvancedtutorial/index.html</a>
</li>

<li>User interface markup language<br />
<a href="https://en.wikipedia.org/wiki/User_interface_markup_language">https://en.wikipedia.org/wiki/User_interface_markup_language</a>
</li>

<li>Signal and Handler Event System<br />
<a href="https://doc.qt.io/qt-5/qtqml-syntax-signals.html">https://doc.qt.io/qt-5/qtqml-syntax-signals.html</a>
</li>

<li>Qt Documentation: MouseEvent QML Type<br />
<a href="https://doc.qt.io/qt-5/qml-qtquick-mouseevent.html">https://doc.qt.io/qt-5/qml-qtquick-mouseevent.html</a>
</li>

<li>Qt Documentation: WheelEvent QML Type<br />
<a href="https://doc.qt.io/qt-5/qml-qtquick-wheelevent.html">https://doc.qt.io/qt-5/qml-qtquick-wheelevent.html</a>
</li>

<li>Qt Documentation: MouseArea QML Type<br />
<a href="https://doc.qt.io/qt-5/qml-qtquick-mousearea.html">https://doc.qt.io/qt-5/qml-qtquick-mousearea.html</a>
</li>

<li>UsiXML<br />
<a href="https://en.wikipedia.org/wiki/UsiXML">https://en.wikipedia.org/wiki/UsiXML</a>
</li>

<li>Anchor-based Layout in QML<br />
<a href="https://het.as.utexas.edu/HET/Software/html/qml-anchor-layout.html#anchor-layout">https://het.as.utexas.edu/HET/Software/html/qml-anchor-layout.html#anchor-layout</a>
</li>

<li>PySide.QtDeclarative<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtDeclarative/index.html">https://pyside.github.io/docs/pyside/PySide/QtDeclarative/index.html</a>
</li>

<li>PySide and Qt Quick/QML Playground<br />
<a href="https://wiki.qt.io/PySide-and-QML-Playground">https://wiki.qt.io/PySide-and-QML-Playground</a>
</li>

<li>Hand Coded GUI Versus Qt Designer GUI<br />
<a href="https://stackoverflow.com/questions/387092/hand-coded-gui-versus-qt-designer-gui">https://stackoverflow.com/questions/387092/hand-coded-gui-versus-qt-designer-gui</a>
</li>

<li>Qt Creator Manual<br />
<a href="http://doc.qt.io/qtcreator/">http://doc.qt.io/qtcreator/</a>
</li>

<li>Qt Designer Manual<br />
<a href="http://doc.qt.io/qt-5/qtdesigner-manual.html">http://doc.qt.io/qt-5/qtdesigner-manual.html</a>
</li>

<li>Qt Creator (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Qt_Creator">https://en.wikipedia.org/wiki/Qt_Creator</a>
</li>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>PySide na PyPi<br />
<a href="https://pypi.org/project/PySide/">https://pypi.org/project/PySide/</a>
</li>

<li>QML for JavaScript programmers<br />
<a href="https://wiki.qt.io/QML_for_JavaScript_programmers">https://wiki.qt.io/QML_for_JavaScript_programmers</a>
</li>

<li>JavaScript Expressions in QML Documents<br />
<a href="https://doc.qt.io/qt-5/qtqml-javascript-expressions.html">https://doc.qt.io/qt-5/qtqml-javascript-expressions.html</a>
</li>

<li>JavaScript Host Environment<br />
<a href="https://doc.qt.io/qt-5/qtqml-javascript-hostenvironment.html">https://doc.qt.io/qt-5/qtqml-javascript-hostenvironment.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>
