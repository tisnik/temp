<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nástroje a služby využívané při nasazování mikroslužeb</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nástroje a služby využívané při nasazování mikroslužeb</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V páté části seriálu o mikroslužbách se seznámíme s některými užitečnými nástroji a službami, které se používají při vývoji, nasazování i sledování mikroslužeb. Jedná se například o Apache ZooKeeper, Prometheus, Grafana atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nástroje a služby využívané při nasazování mikroslužeb</a></p>
<p><a href="#k02">2. Realizace samotných mikroslužeb</a></p>
<p><a href="#k03">3. Realizace a nasazení message brokerů</a></p>
<p><a href="#k04">4. Message broker jako služba</a></p>
<p><a href="#k05">5. Datová úložiště</a></p>
<p><a href="#k06">6. Další prostředky využívané při nasazování a administraci mikroslužeb</a></p>
<p><a href="#k07">7. Jednoduchá aplikace s&nbsp;jednotkami mikroslužeb</a></p>
<p><a href="#k08">8. Přednosti a zápory mikroslužeb nasazených bez dalších podpůrných nástrojů</a></p>
<p><a href="#k09">9. Aplikace s&nbsp;desítkami mikroslužeb</a></p>
<p><a href="#k10">10. Projekt Apache ZooKeeper</a></p>
<p><a href="#k11">11. Podrobnější informace o konceptech, na kterých je postaven Apache ZooKeeper</a></p>
<p><a href="#k12">12. API ZooKeepera</a></p>
<p><a href="#k13">13. Monitoring mikroslužeb</a></p>
<p><a href="#k14">14. Nástroj Prometheus</a></p>
<p><a href="#k15">15. Dotazovací jazyk PromQL</a></p>
<p><a href="#k16">16. Konfigurace dashboardů s&nbsp;výsledky monitoringu</a></p>
<p><a href="#k17">17. Upozornění v&nbsp;případě, že se detekuje problém</a></p>
<p><a href="#k18">18. Obsah další části seriálu</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nástroje a služby využívané při nasazování mikroslužeb</h2>

<p><i>&bdquo;Microservices is more than source code and
containers.&ldquo;</i></p>

<p>V&nbsp;prvních třech částech <a
href="https://www.root.cz/serialy/mikrosluzby/">seriálu o mikroslužbách</a> [<a
href="https://www.root.cz/clanky/mikrosluzby-moderni-aplikace-vyuzivajici-znamych-konceptu/">1</a>]
[<a
href="https://www.root.cz/clanky/zpusoby-ulozeni-dat-v-aplikacich-zalozenych-na-mikrosluzbach/">2</a>]
[<a
href="https://www.root.cz/clanky/posilani-zprav-v-aplikacich-zalozenych-na-mikrosluzbach/">3</a>]
jsme se seznámili se základními myšlenkami, na nichž je architektura aplikací
postavených na mikroslužbách založena. <a
href="https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/">Minule</a>
jsme se již začali zabývat konkrétními technikami a nástroji, které se
v&nbsp;oblasti mikroslužeb používají. Připomeňme si jen ve stručnosti, že se
jednalo o populární nástroj <i>Apache Kafka</i>, jenž umožňuje takzvaný
<i>streaming</i> dat &ndash; zpráv, událostí, záznamů o změnách v&nbsp;databázi
atd. Projektem <i>Apache Kafka</i> se samozřejmě budeme podrobněji zabývat
v&nbsp;praktické části seriálu.</p>

<p>Dnes se seznámíme s&nbsp;dalšími vybranými nástroji a službami, které je
možné využít při vývoji a nasazení aplikací založených na mikroslužbách.
V&nbsp;současnosti totiž pochopitelně není nutné začínat vývoj mikroslužeb
zcela &bdquo;on nuly a na zelené louce&ldquo;, protože je již k&nbsp;dispozici
poměrně velké množství prostředků, které nám mohou v&nbsp;této práci pomoci,
například v&nbsp;oblasti monitoringu, jmenné (adresářové) služby, vyhledávání
služeb, jejich nasazení apod.</p>

<p><div class="rs-tip-major">Poznámka: již dopředu je nutné upozornit na to, že
ne všechny dnes popisované nástroje a služby spadají do kategorie otevřeného
software.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Realizace samotných mikroslužeb</h2>

<p>Samotné mikroslužby mohou být realizovány relativně snadno (alespoň
z&nbsp;hlediska použitých technologií, protože business logika může být někdy
hodně složitá). Primárním způsobem komunikace mikroslužeb s&nbsp;okolím je
v&nbsp;současnosti protokol HTTP(S) a REST; ovšem nesmíme zapomenout ani na
protokoly používané při komunikaci s&nbsp;message brokerem (AMQP, MQTT, STOMP,
XMPP). Pro samotnou realizaci je možné použít různé programovací jazyky,
například (z&nbsp;těch používanějších jazyků) Javu, Python, Ruby, JavaScript
(TypeScript) a v&nbsp;neposlední řadě i <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovací jazyk
Go</a>. Pro každý z&nbsp;těchto jazyků popř.&nbsp;ekosystémů existují knihovny
a frameworky určené (mimo dalších použití) právě pro tvorbu mikroslužeb.
V&nbsp;následující tabulce jsou některé z&nbsp;těchto knihoven/frameworků
vypsány, ovšem pochopitelně se nejedná o úplný přehled, protože mikroslužbu
můžeme v&nbsp;případě potřeby naprogramovat například i v&nbsp;čistém céčku
s&nbsp;využitím socketů, knihoven <a
href="https://www.root.cz/clanky/0mq-knihovna-pro-asynchronni-predavani-zprav/">0MQ</a>,
<a
href="https://www.root.cz/clanky/implementace-ruznych-komunikacnich-strategii-s-vyuzitim-knihovny-nanomsg/">nanomsg</a>
atd.:</p>

<table>
<tr><th>#</th><th>Jazyk/ekosystém</th><th>Knihovna či framework</th></tr>
<tr><td>1</td><td>Java</td><td><a href="http://vertx.io/">Vert.x</a>, <a href="https://spring.io/projects/spring-boot">Spring Boot</a>, <a href="https://www.dropwizard.io/">Dropwizard</a>, <a href="http://www.ninjaframework.org/">Ninja</a></td></tr>
<tr><td>2</td><td>Python</td><td><a href="https://www.django-rest-framework.org/">Django REST framework</a>, <a href="https://flask-restful.readthedocs.io/en/latest/">FlaskRESTful</a>, <a href="https://github.com/toastdriven/restless">restless</a>, <a href="http://falconframework.org/">Falcon</a></td></tr>
<tr><td>3</td><td>Ruby</td><td><a href="https://rubyonrails.org/">Rails</a>, <a href="http://www.ruby-grape.org/">Grape</a>, <a href="http://sinatrarb.com/">Sinatra</a>, <a href="https://hanamirb.org/">Hanami</a></td></tr>
<tr><td>4</td><td>JavaScript/TypeScript</td><td><a href="http://senecajs.org/">Seneca</a>, <a href="https://koajs.com/">Koa</a>, <a href="https://loopback.io/">LoopBack</a></td></tr>
<tr><td>5</td><td>Go</td><td><a href="https://github.com/goadesign/goa">Goa</a>, <a href="https://golang.org/pkg/net/http/">standardní balíček net/http</a></td></tr>
<tr><td>6</td><td>Clojure</td><td><a href="https://github.com/ring-clojure/ring">Ring</a>, <a href="http://clojure-liberator.github.io/liberator/">Liberator</a>, <a href="https://github.com/weavejester/compojure">Compojure</a></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: pravděpodobně jste si všimli, že se
mnohdy jedná o &bdquo;obyčejné&ldquo; knihovny poskytující REST API. To je
v&nbsp;pořádku, protože mnohdy nic dalšího, než realizaci několika REST API
<i>endpointů</i> ani nevyžadujeme (ostatně samotný název
&bdquo;mikroslužby&ldquo; evokuje, že si mnohdy vystačíme pouze se základními
technologiemi).</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Realizace a nasazení message brokerů</h2>

<p><div class="rs-tip-major">Poznámka: tato kapitola je do článku zařazena jen
kvůli úplnosti, protože message brokerům jsme se poměrně podrobně věnovali ve
třetí části tohoto seriálu nazvané příznačně <a
href="https://www.root.cz/clanky/posilani-zprav-v-aplikacich-zalozenych-na-mikrosluzbach/">Posílání
zpráv v aplikacích založených na mikroslužbách</a>, popř.&nbsp;<a
href="https://www.root.cz/serialy/message-brokery">v&nbsp;samostatném
seriálu</a>.</div></p>

<p>Další částí architektury aplikace založené na mikroslužbách jsou message
brokery. V&nbsp;této oblasti sice neexistuje taková shoda, jako u rozhraní
mikroslužeb (dnes v&nbsp;naprosté většině případů HTTP, REST, JSON/XML), ovšem
skupina používaných protokolů je stále dosti malá:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Protokol</th></tr>
<tr><td>1</td><td>AMQP x.y</td><td>Advanced Message Queuing Protocol verze x.y</td></tr>
<tr><td>2</td><td>STOMP</td><td>Streaming Text Oriented Messaging Protocol</td></tr>
<tr><td>3</td><td>MQTT</td><td>MQTT is a machine-to-machine connectivity protocol</td></tr>
<tr><td>4</td><td>NATS protocol</td><td>protokol systému NATS (podobný STOMPu)</td></tr>
</table>

<p>Výběr konkrétního message brokera (pokud se bavíme o použití strategií
PUSH-PULL a PUB-SUB) je tak do určité míry omezen vybraným protokolem (a
naopak). Z&nbsp;často používaných message brokerů, které lze nasadit na vlastní
počítače, se zmíníme o známých projektech:</p>

<table>
<tr><th>#</th><th>Message broker</th><th>Podporované protokoly</th></tr>
<tr><td>1</td><td><a href="https://www.root.cz/clanky/rabbitmq-jedna-z-nejuspesnejsich-implementaci-brokera/">RabbitMQ</a></td><td>AMQP, STOMP, MQTT</td></tr>
<tr><td>2</td><td><a href="https://www.root.cz/clanky/apache-activemq-dalsi-system-implementujici-message-brokera/">Apache ActiveMQ</a></td><td>AMQP 1.0, STOMP, MQTT a další</td></tr>
<tr><td>3</td><td><a href="https://activemq.apache.org/components/artemis/">ActiveMQ Artemis</a></td><td>AMQP, OpenWire, MQTT, STOMP</td></tr>
<tr><td>4</td><td><a href="https://www.root.cz/clanky/komunikace-s-message-brokery-z-programovaciho-jazyka-go/#k15">NATS</a></td><td>NATS protocol</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: při samotném nasazování message brokera
si musíme uvědomit, že se obecně nejedná o bezstavovou službu, protože message
broker typicky používá nějaké datové úložiště pro zajištění persistence zpráv
ve strategii PUSH-PULL a v&nbsp;kombinovaných komunikačních strategiích
PUSH-PULL+PUB-SUB.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Message broker jako služba</h2>

<p>V&nbsp;některých případech (a počet těchto případů bude s&nbsp;velkou
pravděpodobností stále narůstat) může být výhodnější namísto snahy o nasazení
(a administraci, sledování atd.) vlastního message brokera použít službu
nabízenou všemi <i>cloud providery</i>, tedy společnostmi, které provozují
větší či menší cloudové služby, jež jsou nabízeny a pochopitelně i zpoplatněny.
Z&nbsp;cloudových message brokerů se jedná především o:</p>

<table>
<tr><th>#</th><th>Message broker</th><th>Provozovatel služby</th></tr>
<tr><td>1</td><td>Amazon Simple Queue Service (SQS)</td><td>Amazon (AWS)</td></tr>
<tr><td>2</td><td>Microsoft Azure Service Bus</td><td>Microsoft (Azure)</td></tr>
<tr><td>3</td><td>StormMQ</td><td>StormMQ Limited</td></tr>
<tr><td>4</td><td>IBM MQ (dříve MQSeries)</td><td>IBM</td></tr>
</table>

<p>Pro streaming, záznam logů, sledování změn v&nbsp;databázích atd. se
v&nbsp;současnosti primárně používá minule představený systém <a
href="https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/#k06">Apache
Kafka</a> nebo méně často pak jednodušší <a
href="https://www.root.cz/clanky/nats-streaming-server/">NATS Streaming
Server</a>.</p>

<p>Ovšem i streamovací platformy jsou nabízeny společnostmi provozujícími
cloudové služby. Jedná se například o <i>Amazon MSK</i> (<a
href="https://aws.amazon.com/msk/">Amazon Managed Streaming for Apache
Kafka</a>) v&nbsp;AWS (což je relativní novinka v&nbsp;oblasti celého AWS).</p>

<a href="https://www.root.cz/obrazek/362664/"><img src="https://i.iinfo.cz/images/138/microservices4-1-prev.png" class="image-362664" alt="&#160;" width="370" height="237" /></a>
<p><i>Obrázek 1: Příklad použití ekosystému Kafky (Kafka Streams, konektory pro
databáze atd.).</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Datová úložiště</h2>

<p>Víme již, že jednou z&nbsp;nejsložitějších částí aplikace založené na
mikroslužbách jsou datová úložiště. V&nbsp;této oblasti je k&nbsp;dispozici
téměř nepřeberné množství různých typů databází a výběr konkrétní z&nbsp;nich
pak do značné míry závisí na tom, jaká data vlastně potřebujeme uložit, zda se
vyžaduje plný ACID (<i>Atomicity, Consistency, Isolation, Durability</i>), jaké
jsou požadované možnosti replikace, zda je nutné některé operace provádět
v&nbsp;transakcích atd. Použít lze samozřejmě všechny relační databáze, NoSQL
databáze, grafové databáze, perzistentní logy. Pro většinu databází existují
konektory (<i>connectors</i>) umožňující volání funkcí databáze z&nbsp;různých
programovacích jazyků, takže výběr databází je skutečně velký a většinou se
nemusíme omezovat podle toho, jaký jazyk byl pro implementaci mikroslužby
zvolen:</p>

<table>
<tr><th>#</th><th>Typ</th><th>Implementace</th></tr>
<tr><td>1</td><td>relační databáze</td><td>PostgreSQL, DB/2, Oracle, MySQL/MariaDB ale i SQLite</td></tr>
<tr><td>2</td><td>key-value</td><td>Amazon DynamoDB, Redis, Memcached</td></tr>
<tr><td>3</td><td>dokumentové</td><td>MongoDB, Apache CouchDB, Amazon SimpleDB</td></tr>
<tr><td>4</td><td>objektové</td><td>Realm, Caché, Zope Object Database a mnoho dalších</td></tr>
<tr><td>5</td><td>grafové</td><td>JanusGraph, Neo4j, Oracle Spatial and Graph, AllegroGraph</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;této oblasti skutečně záleží na
konkrétních požadavcích, protože například v&nbsp;oblasti relačních databází
může pro jednu mikroslužbu plně dostačovat SQLite, zatímco jiná bude vyžadovat
&bdquo;plný&ldquo; Oracle.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Další prostředky využívané při nasazování a administraci mikroslužeb</h2>

<p>Jaké další prostředky (nástroje, knihovny, služby, překladače, ...) jsou
tedy vlastně potřebné či alespoň užitečné při vývoji a nasazování aplikací
založených na mikroslužbách? Mohlo by se zdát, že prostředků bude nutných
poměrně malé množství, ostatně již termín &bdquo;mikroslužby&ldquo; naznačuje,
že by se nemělo jednat o složité komponenty. Ani při pohledu na obrázek se
schématem jednoduché aplikace s&nbsp;architekturou založenou na několika
mikroslužbách se nezdá, že by bylo nutné použít velké množství dalších
nástrojů:</p>

<a href="https://www.root.cz/obrazek/361137/"><img src="https://i.iinfo.cz/images/372/microservices1-4-prev.png" class="image-361137" alt="&#160;" width="358" height="270" /></a>
<p><i>Obrázek 2: Schéma jednoduché aplikace s&nbsp;architekturou založenou na mikroslužbách.</i></p>

<p>Ve skutečnosti nepotřebujeme mnoho nástrojů pro <i>vývoj</i> jednotlivých
mikroslužeb, ovšem pro jejich <i>nasazení</i> popř.&nbsp;<a
href="https://en.wikipedia.org/wiki/Orchestration_(computing)">orchestraci</a>
či <a
href="https://en.wikipedia.org/wiki/Service_choreography">choreografii</a> již
ano. Taktéž většinou budeme muset řešit i monitoring mikroslužeb,
centralizované zpracování logů a další podobné činnosti.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Jednoduchá aplikace s&nbsp;jednotkami mikroslužeb</h2>

<p>V&nbsp;předchozí kapitole jsme si uvedli obrázek s&nbsp;velmi jednoduchou
aplikací složenou z&nbsp;pouhých pěti mikroslužeb; z&nbsp;toho dvě mikroslužby
jsou dokonce bezstavové.</p>

<p>Pokud je aplikace skutečně jednoduchá a skládá se například ze tří až pěti
mikroslužeb, může být relativně snadný a přehledný i celý ekosystém postavený
okolo těchto pěti mikroslužeb. Pokud každá mikroslužba komunikuje
s&nbsp;využitím REST API a používá nějaké datové úložiště (každá mikroslužba
ideálně vlastní databázi), je možné takové služby nasadit například takto:</p>

<ol>

<li>Každá mikroslužba poběží ve vlastním procesu, ať již na společném počítači
či na počítači vlastním (nebo virtuálním). Komunikovat s&nbsp;okolím bude pouze
přes své REST API, další komunikace bude jen lokální (ve smyslu logiky, ne
nutně síťové infrastruktury) a bude probíhat s&nbsp;datovým úložištěm.
Technologie nutné k&nbsp;takovému nasazení jsou minimální (a liší se podle
použitého programovacího jazyka): nodejs, Flask, Vertx atd.</li>

<li>Můžeme taktéž použít podobný postup, ovšem s&nbsp;tím rozdílem, že
jednotlivé mikroslužby poběží v&nbsp;kontejneru, například v&nbsp;<a
href="https://www.docker.com/">Dockeru</a>. Postačuje jen, aby bylo správně
nastavené mapování TCP portů, aby byly koncové body REST API viditelné i pro
okolí kontejneru.</li>

</ol>



<p><a name="k08"></a></p>
<h2 id="k08">8. Přednosti a zápory mikroslužeb nasazených bez dalších podpůrných nástrojů</h2>

<p>První z&nbsp;naznačených řešení se zdá být skutečně velmi přímočaré (protože
vytvořit například demonstrační aplikaci postavenou na frameworku <a
href="http://flask.pocoo.org/">Flask</a> je podle dobrého tutoriálu otázka
maximálně několika desítek minut), ovšem skrývá se v&nbsp;něm hned několik
úskalí. To se týká jak konfigurace a nasazování aplikace (jak má konfigurace
vypadat, jak se aplikace nasazuje a inicializuje, včetně datového úložiště, jak
se má nastavit firewall...), tak i například řešení situace, kdy nějaká
mikroslužba zhavaruje. Další potenciální problémy se týkají konfigurace load
balancingu, sledování logů (každá mikroslužba používá vlastní log) a vůbec
sledování činnosti celé aplikace v&nbsp;reálném provozu či při zátěžových
testech.</p>

<p>Druhý z&nbsp;naznačených postupů některé z&nbsp;výše naznačených problémů
částečně řeší. Především se díky umístění mikroslužby do kontejneru dá poměrně
přesně určit a nastavit operační systém a služby, které v&nbsp;něm běží
(v&nbsp;ideálním případě je systém v&nbsp;kontejneru minimalizovaný jen na
základní používané služby). Dobré je taktéž to, že díky konceptu kontejnerů
jsme vlastně &bdquo;přinuceni&ldquo; rozdělit každou mikroslužbu minimálně na
dvě části &ndash; část neměnnou (<i>immutable</i>), což je většinou vlastní
implementace REST API a business logiky a část proměnnou, což je datové
úložiště. Toto rozdělení je velmi důležité i při dalších činnostech, například
při nastavování load balancingu a taktéž při případném přechodu na řešení
naznačená v&nbsp;dalších kapitolách (OpenShift, AWS Lambda atd.).</p>

<p>Představme si ovšem situaci, kdy se vyvíjená aplikace postupně rozroste a
namísto pěti mikroslužeb bude používat například několik desítek mikroslužeb
(což je v&nbsp;praxi poměrně běžné číslo, ani se nemusíme dívat na Netflix a
podobné firmy s&nbsp;obří infrastrukturou), navíc ještě s&nbsp;tím požadavkem,
aby některé operace byly řešeny asynchronně. V&nbsp;takovém případě již není
ruční správa mikroslužeb možná a je zapotřebí se poohlédnout po dalších
podpůrných nástrojích.</p>

<a href="https://www.root.cz/obrazek/362136/"><img src="https://i.iinfo.cz/images/683/microservices3-7-prev.png" class="image-362136" alt="&#160;" width="363" height="270" /></a>
<p><i>Obrázek 3: Hierarchický model aplikace se sdružením těch služeb, které
k&nbsp;sobě patří buď logicky, nebo podle toho, jak intenzivně spolu
komunikují. Taková architektura může mít desítky, možná i stovku
mikroslužeb.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Aplikace s&nbsp;desítkami mikroslužeb</h2>

<p>U aplikací, které se skládají z&nbsp;desítek či dokonce ze stovek
mikroslužeb, si musíme položit následující otázky, protože případná změna může
být velmi náročná:</p>

<ol>

<li>Jak vlastně spolu budou jednotlivé mikroslužby navzájem komunikovat? Bude
výhodnější použít přímé volání API (tedy používat spojení typu
<i>point-to-point</i>), sběrnici pro přenos zpráv (<i>enterprise message
bus</i> atd.), message broker, sdílenou databázi, streaming platformu pro
přenos změn stavu systému či bude vhodnější použít nějakou kombinaci těchto
prostředků?</li>

<li>Které protokoly se budou používat pro komunikaci? Bude vše řešeno jediným
protokolem (nejpravděpodobněji tedy HTTP + REST), nebo se použije více
protokolů (HTTP, AMQP atd.)?</li>

<li>Pokud spolu služby budou přímo komunikovat, jakým způsobem se vůbec
naleznou? Pravděpodobně nebude nejlepší řešení, aby každá služba měla seznam
s&nbsp;pevnými adresami dalších služeb, s&nbsp;nimiž má komunikovat.</li>

<li>Bude každá služba používat vlastní logování, nebo bude výhodnější použít
centralizovaný systém pro zápis logovacích informací? A co se stane ve chvíli,
kdy tento centrální systém (což je jen další mikroslužba) z&nbsp;nějakého
důvodu zhavaruje?</li>

<li>Dokážeme v&nbsp;případě potřeby automaticky či poloautomaticky celý systém
znovu nasadit? Může se to možná zdát divné, ale znám systémy, kde to
pravděpodobně už nikdo (od nuly) nedokáže :)</li>

<li>A nakonec samozřejmě velmi důležitá otázka &ndash; jak se dá vůbec
zajistit, aby administrátoři či DevOps neztratili kontrolu na celou aplikací,
tedy aby se jim celý systém &bdquo;nerozsypal&ldquo; pod rukama.</li>

</ol>

<p>Každý uzel navíc obsahuje <i>Access Control List</i> (<i>ACL</i>) umožňující řízení, kdo z&nbsp;uzlu může data číst a kdo zapisovat.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Podrobnější informace o konceptech, na kterých je postaven Apache ZooKeeper</h2>

<p>Po přečtení <a href="#k09">předchozí kapitoly</a> čtenáře možná napadlo, že Apache ZooKeeper je jen reimplementací LDAPu či podobné jmenné služby. Ve skutečnosti jsou však možnosti tohoto projektu větší, protože kromě klasické jmenné (adresářové) služby je možné ZooKeeper použít pro implementaci bariér (koordinace mezi větším množstvím služeb) či dokonce klasické fronty s&nbsp;producenty a konzumenty. Na následujícím obrázku je nakreslena jedna z&nbsp;možných konfigurací tohoto projektu. Služba ZooKeepera je v&nbsp;tomto případě složena z&nbsp;několika serverů, přičemž jeden z&nbsp;těchto serverů byl zvolen do funkce <i>leadera</i>. Jednotlivé servery spolu komunikují a každý server obsahuje obraz se stavem DB, transakčním logem atd. Jednotliví klienti, kteří potřebují využívat služeb ZooKeepera, se mohou připojit k&nbsp;libovolnému serveru. Po provedení připojení se mezi klientem a serverem posílají mj.&nbsp;i takzvané <i>heart beats</i>, tedy krátké zprávy informující druhou stranu, že komunikující uzel ještě žije a odpovídá. Pokud dojde k&nbsp;přerušení připojení, může se klient pokusit o připojení k&nbsp;jinému serveru se ZooKeeperem.</p>

*** image ***
<p><i>Obrázek 4: Jedna z&nbsp;možných konfigurací projektu Apache ZooKeeper s&nbsp;několika servery, z&nbsp;nichž jeden je leaderem. Klienti se mohou připojit na libovolný z&nbsp;těchto serverů.</i></p>

<p>Celý koncept databáze ZooKeepera je založen na předpokladu, že čtení dat bude probíhat mnohem častěji, než zápis (což je zcela jistě pravda například pro již několikrát zmíněné adresářové služby, konfigurace služeb atd.). Uvádí se, že poměr čtení:zápis by měl být minimálně 10:1, aby bylo použití ZooKeepera efektivní. Jedním z&nbsp;důvodů, proč je zápis potenciálně &bdquo;drahou&ldquo; operací, je fakt, že každá změna obsahuje mj.&nbsp;i razítko s&nbsp;číslem, které jednoznačně určuje pořadí změny v&nbsp;rámci všech transakcí (<i>ZooKeeper Transaction Id</i>). Nad těmito jednoduchými a nízkoúrovňovými operacemi (zápis s&nbsp;otiskem razítka) je možné vybudovat vysokoúrovňové operace, například synchronizační mechanismy (výše zmíněnou bariéru atd.). Navíc čtení může proběhnout v&nbsp;libovolném serveru ZooKeepera, kdežto zápis je přeposlán leaderovi, který následně bude informovat ostatní servery o této operaci a bude čekat na úspěšný &bdquo;propis&ldquo; změn u minimálně poloviny serverů (aby byl zachován princip většiny, což ale mimochodem znamená, že není zaručena konzistence přečtených dat).</p>

<p>I přesto, že je ZooKeeper velmi rychlý a vlastně i jednoduchý, zajišťuje několik důležitých vlastností:</p>

<ol>
<li>Změny prováděné klientem budou aplikovány vždy v&nbsp;tom pořadí, v&nbsp;jakém byly poslány.</li>
<li>Všechny změny jsou atomické, tj.&nbsp;buď se kompletně provedou nebo neprovedou. Systém nebude poskytovat jakýkoli mezistav.</li>
<li>Ve chvíli, kdy je změna provedena, bude zachována až do chvíle, kdy klient provede v&nbsp;daném uzlu novou změnu.</li>
</ol>

<p>To však zdaleka není vše, protože ZooKeeper není pouhá distribuovaná databáze se zaručeným pořadím operací. Tento systém totiž podporuje i takzvané <i>sledování</i> (<i>watch</i>), což je podobný koncept, jaký známe například z&nbsp;některých debuggerů, v&nbsp;nichž lze sledovat změnu stavu vybraného objektu (proměnné atd.). V&nbsp;případě ZooKeepera se může jakýkoli klient rozhodnout, že bude sledovat určitý uzel. Ve chvíli, kdy se uzel změní, dostane o tom klient informaci a může na ni adekvátně reagovat. Tímto způsobem se u některých služeb řešil takzvaný <i>mailboxing</i>.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. API ZooKeepera</h2>

<p>Jedním z&nbsp;cílů při návrhu ZooKeepera bylo poskytnutí co nejjednoduššího aplikačního programového rozhraní. API je skutečně pojato minimalisticky:</p>

<table>
<tr><th>#</th><th>Operace</th><th>Význam</th></tr>
<tr><td>1</td><td>create</td><td>vytvoření uzlu ve zvoleném místě stromu</td></tr>
<tr><td>2</td><td>delete</td><td>opak předchozí operace; vymazání uzlu ze zvoleného místa stromu</td></tr>
<tr><td>3</td><td>exists</td><td>dotaz, zda na zvoleném místě ve stromu existuje uzel</td></tr>
<tr><td>4</td><td>get data</td><td>přečtení dat z&nbsp;uzlu</td></tr>
<tr><td>5</td><td>set data</td><td>opak předchozí operace: zápis dat do uzlu</td></tr>
<tr><td>6</td><td>get children</td><td>získání seznamu přímých potomků uzlu</td></tr>
<tr><td>7</td><td>sync</td><td>čekání, až se </td></tr>
</table>
    sync : waits for data to be propagated



Spring Boot


Goa (REST API mikrosluzby v Go)

<p>I přesto, že je ZooKeeper velmi rychlý a vlastně i jednoduchý, zajišťuje
několik důležitých vlastností:</p>

<ol>

<li>Změny prováděné klientem budou aplikovány vždy v&nbsp;tom pořadí,
v&nbsp;jakém byly klientem poslány.</li>

<li>Všechny změny jsou atomické, tj.&nbsp;buď se kompletně provedou nebo
neprovedou. Systém nebude poskytovat jakýkoli mezistav (resp.&nbsp;tento
mezistav nebude viditelný při čtení uzlů).</li>

<li>Ve chvíli, kdy je změna provedena, bude zachována až do chvíle, kdy klient
provede v&nbsp;daném uzlu novou změnu.</li>

</ol>

<p>To však zdaleka není vše, protože ZooKeeper není pouhá distribuovaná
databáze se zaručeným pořadím operací. Tento systém totiž podporuje i takzvané
<i>sledování</i> (<i>watch</i>), což je podobný koncept, jaký známe například
z&nbsp;některých debuggerů, v&nbsp;nichž lze sledovat změnu stavu vybraného
objektu (proměnné atd.). V&nbsp;případě ZooKeepera se může jakýkoli klient
rozhodnout, že bude sledovat určitý uzel. Ve chvíli, kdy se uzel změní, dostane
o tom klient informaci a může na ni adekvátně reagovat. Tímto způsobem se u
některých služeb řešil takzvaný <i>mailboxing</i>.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. API ZooKeepera</h2>

<p>Jedním z&nbsp;cílů při návrhu ZooKeepera bylo poskytnutí co nejjednoduššího
aplikačního programového rozhraní. API je skutečně pojato minimalisticky:</p>

<table>
<tr><th>#</th><th>Operace</th><th>Význam</th></tr>
<tr><td>1</td><td>create</td><td>vytvoření uzlu ve zvoleném místě stromu</td></tr>
<tr><td>2</td><td>delete</td><td>opak předchozí operace; vymazání uzlu ze zvoleného místa stromu</td></tr>
<tr><td>3</td><td>exists</td><td>dotaz, zda na zvoleném místě ve stromu existuje uzel</td></tr>
<tr><td>4</td><td>get data</td><td>přečtení dat z&nbsp;uzlu</td></tr>
<tr><td>5</td><td>set data</td><td>opak předchozí operace: zápis dat do uzlu</td></tr>
<tr><td>6</td><td>get children</td><td>získání seznamu přímých potomků uzlu</td></tr>
<tr><td>7</td><td>sync</td><td>čekání, až se změny zpropagují</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: <i>ZooKeeper</i> je vyžadován i minule
popsaným systémem Apache Kafka, a to z&nbsp;toho důvodu, aby se zjednodušila
správa celého clusteru s&nbsp;brokery.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Monitoring mikroslužeb</h2>

<p><i>&bdquo;Java is 20 years old, mature, and comes with unbeatable tooling
and monitoring capabilities. At the very beginning, Java already incorporated
microservice concepts with the Jini / JXTA frameworks mixed with no-SQL
databases like e.g. JavaSpaces. As often -- Java was just 15 years too early.
The market was not ready for the technology back then. However, all the design
principles from 1999 still do apply today. We don't have re-invent the
wheel.&ldquo;</i></p>

<p>Zapomenout nesmíme ani na nástroje umožňující provádět monitoring. Těchto
nástrojů sice existuje větší množství (například <a
href="https://stackshare.io/kibana">Kibana</a> a <a
href="https://sysdig.com/products/monitor/">Sysdig monitor</a>), ovšem dnes
pravděpodobně nejlepším řešením je v&nbsp;současnosti <a
href="https://prometheus.io/">Prometheus</a>, ideálně ve spojení s&nbsp;<a
href="https://grafana.com/">Grafanou</a>.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Nástroj Prometheus</h2>

<p>Systém <i>Prometheus</i> používá databázi, do které se ukládají prakticky
libovolné (číselné) hodnoty, které jsou opatřeny časovým razítkem, kromě toho i
jménem metriky (ta musí být unikátní) a návěštím (<i>label</i>) umožňujícím
podrobnější dělení hodnot, například podle toho, v&nbsp;jakém prostředí je
měření prováděno. To znamená, že pro zvolenou metriku, popř.&nbsp;pro metriku a
návěští je možné získat celou časovou posloupnost s&nbsp;hodnotami, vracet se
do minulosti, získat informace pro zvolené časové období apod. Samotné hodnoty
jsou interně zpracovávány jako datový typ <i>double</i>/<i>float64</i>
(konkrétní jednotka již záleží na intepretaci dat) a časová razítka mají
milisekundovou přesnost, což by mělo být pro účely tohoto nástroje dostačující,
už jen z&nbsp;toho důvodu, že samotné pořízení záznamu přes API
<i>Promethea</i> má určitou časovou složitost.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Dotazovací jazyk PromQL</h2>

<p>Důležitou součástí <i>Promethea</i> je i <i>PromQL</i>, což je relativně
snadno použitelný dotazovací jazyk používaný pro získání potřebných metrik,
agregaci výsledků apod. Můžeme si ostatně uvést příklad jednoduchého dotazu,
který vrátí časovou posloupnost hodnot trvání přípravy odpovědi na HTTP
požadavky (předpokládejme, že jméno této metriky je
&bdquo;http_requests_total&ldquo;):</p>

<pre>
http_requests_total
</pre>

<p>Celkovou dobu a průměrnou dobu získáme stejně snadno:</p>

<pre>
sum(http_requests_total)
avg(http_requests_total)
</pre>

<p>V&nbsp;dotazu ovšem můžeme provést i jemnější dělení, například podle
návěští:</p>

<pre>
http_requests_total{job="prometheus",group="canary"}
</pre>

<p>V&nbsp;jazyku PromQL lze využívat například i regulární výrazy, což nám
umožňuje získat časy odpovědí na HTTP dotazy typu GET, ovšem pouze pro zvolená
prostředí:</p>

<pre>
http_requests_total{environment=~"staging|testing|development",method!="GET"}
</pre>

<p>Dotazovací jazyk <i>PromQL</i> je primárně určen pro práci s&nbsp;časovými
řadami, takže nepřekvapí ani dobrá podpora specifikace časového období, pro
které potřebujeme data získat. Výsledky trvání vyřízení HTTP dotazů typu GET za
posledních pět minut by se získaly takto:</p>

<pre>
http_requests_total{job="prometheus"}[5m]
</pre>

<p>Výsledky za posledních třicet minut, ovšem s&nbsp;rozlišením jedné
minuty:</p>

<pre>
rate(http_requests_total[5m])[30m:1m]
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Konfigurace dashboardů s&nbsp;výsledky monitoringu</h2>

<p>Kromě dotazů zapisovaných v&nbsp;jazyku <i>PromQL</i> je podporován již
zmíněný výstup ve formě plně konfigurovatelných grafů, z&nbsp;nichž se posléze
vytváří různé dashboardy, které sledují stav celého systému či jeho
jednotlivých částí. Pro tento účel se používá <i>Grafana</i>. Pokud chcete
vidět, jak může vypadat výstup z&nbsp;kombinace Prometheus+Grafana, můžete se
podívat na obrázek na adrese <a
href="https://prometheus.io/assets/grafana_prometheus.png">https://prometheus.io/assets/grafana_prometheus.png</a>.</p>

<p><div class="rs-tip-major">Poznámka: screenshoty z&nbsp;našeho produkčního
systému nemám zveřejňovat...</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Upozornění v&nbsp;případě, že se detekuje problém</h2>

<p>Možnost zobrazení záznamů (časových řad s&nbsp;hodnotami) je samozřejmě
velmi užitečná, ovšem v&nbsp;praxi mnohdy potřebujeme, aby byli administrátoři
či devops varováni ve chvíli, kdy dojde k&nbsp;určité události, například když
klesne hodnota volné RAM, markantně se zvýší čas odezvy serveru atd. Pro tento
účel používá systém <i>Prometheus</i> další komponentu nazvanou příhodně
<i>Alertmanager</i>, kterou je možné nakonfigurovat takovým způsobem, aby na
naprogramované události (či mnohem častěji na jejich souběh) nějakým vhodným
způsobem reagovala. Samozřejmě je možné zvolit například poslání zprávy přes
připravená rozhraní (Slack, HipChat, včetně běžného e-mailu) nebo lze
nakonfigurovat poslání obecnějšího webhooku do prakticky libovolné služby.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah další části seriálu</h2>

<p>V&nbsp;další části seriálu se budeme zabývat problematikou <i>FaaS</i>
neboli <i>Function as a service</i>. Zaměříme se především na služby dostupné
v&nbsp;systému Amazon Web Services (AWS).</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>Alertmanager<br />
<a href="https://prometheus.io/docs/alerting/alertmanager/">https://prometheus.io/docs/alerting/alertmanager/</a>
</li>

<li>Grafana support for Prometheus<br />
<a href="https://prometheus.io/docs/visualization/grafana/">https://prometheus.io/docs/visualization/grafana/</a>
</li>

<li>goa<br />
<a href="https://stackshare.io/goa">https://stackshare.io/goa</a>
</li>

<li>goa (GitHub)<br />
<a href="https://github.com/goadesign/goa">https://github.com/goadesign/goa</a>
</li>

<li>Grafana support for Prometheus<br />
<a href="https://prometheus.io/docs/visualization/grafana/">https://prometheus.io/docs/visualization/grafana/</a>
</li>

<li>Useful Tools for Managing Complexity of Microservice Architecture<br />
<a href="https://blog.byndyusoft.com/useful-tools-for-managing-complexity-of-microservice-architecture-109a2289acc">https://blog.byndyusoft.com/useful-tools-for-managing-complexity-of-microservice-architecture-109a2289acc</a>
</li>

<li>Three pillars of microservice culture<br />
<a href="https://www.oreilly.com/ideas/three-pillars-of-microservice-culture">https://www.oreilly.com/ideas/three-pillars-of-microservice-culture</a>
</li>

<li>Prometheus: from metrics to insight<br />
<a href="https://prometheus.io/">https://prometheus.io/</a>
</li>

<li>Docker Swarm<br />
<a href="https://docs.docker.com/swarm/">https://docs.docker.com/swarm/</a>
</li>

<li>Kubernetes: production-Grade Container Orchestration<br />
<a href="https://kubernetes.io/">https://kubernetes.io/</a>
</li>

<li>29 Top Tools for Building Microservices on All Levels<br />
<a href="https://dzone.com/articles/30top-tools-for-building-microservices-on-all-leve">https://dzone.com/articles/30top-tools-for-building-microservices-on-all-leve</a>
</li>

<li>The 8 best open-source tools for building microservice apps<br />
<a href="https://techbeacon.com/enterprise-it/8-best-open-source-tools-building-microservice-apps">https://techbeacon.com/enterprise-it/8-best-open-source-tools-building-microservice-apps</a>
</li>

<li>Consul<br />
<a href="https://www.consul.io/">https://www.consul.io/</a>
</li>

<li>Apache ZooKeeper<br />
<a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a>
</li>

<li>ZooKeeper: Because Coordinating Distributed Systems is a Zoo<br />
<a href="http://zookeeper.apache.org/doc/current/index.html">http://zookeeper.apache.org/doc/current/index.html</a>
</li>

<li>ZooKeeper: A Distributed Coordination Service for Distributed Applications<br />
<a href="http://zookeeper.apache.org/doc/current/zookeeperOver.html">http://zookeeper.apache.org/doc/current/zookeeperOver.html</a>
</li>

<li>Understanding Kafka with Legos (video)<br />
<a href="https://www.youtube.com/watch?v=Q5wOegcVa8E">https://www.youtube.com/watch?v=Q5wOegcVa8E</a>
</li>

<li>Apache Kafka Tutorial For Beginners (video)<br />
<a href="https://www.youtube.com/watch?v=U4y2R3v9tlY">https://www.youtube.com/watch?v=U4y2R3v9tlY</a>
</li>

<li>Franz Kafka (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Franz_Kafka">https://en.wikipedia.org/wiki/Franz_Kafka</a>
</li>

<li>NATS<br />
<a href="https://nats.io/about/">https://nats.io/about/</a>
</li>

<li>NATS Streaming Concepts<br />
<a href="https://nats.io/documentation/streaming/nats-streaming-intro/">https://nats.io/documentation/streaming/nats-streaming-intro/</a>
</li>

<li>NATS Streaming Server<br />
<a href="https://nats.io/download/nats-io/nats-streaming-server/">https://nats.io/download/nats-io/nats-streaming-server/</a>
</li>

<li>NATS Introduction<br />
<a href="https://nats.io/documentation/">https://nats.io/documentation/</a>
</li>

<li>NATS Client Protocol<br />
<a href="https://nats.io/documentation/internals/nats-protocol/">https://nats.io/documentation/internals/nats-protocol/</a>
</li>

<li>NATS Messaging (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NATS_Messaging">https://en.wikipedia.org/wiki/NATS_Messaging</a>
</li>

<li>Stránka Apache Software Foundation<br />
<a href="http://www.apache.org/">http://www.apache.org/</a>
</li>

<li>Logstash<br />
<a href="https://www.elastic.co/products/logstash">https://www.elastic.co/products/logstash</a>
</li>

<li>Elasticsearch<br />
<a href="https://www.elastic.co/products/elasticsearch">https://www.elastic.co/products/elasticsearch</a>
</li>

<li>Understanding When to use RabbitMQ or Apache Kafka<br />
<a href="https://content.pivotal.io/blog/understanding-when-to-use-rabbitmq-or-apache-kafka">https://content.pivotal.io/blog/understanding-when-to-use-rabbitmq-or-apache-kafka</a>
</li>

<li>Part 1: Apache Kafka for beginners - What is Apache Kafka?<br />
<a href="https://www.cloudkarafka.com/blog/2016-11-30-part1-kafka-for-beginners-what-is-apache-kafka.html">https://www.cloudkarafka.com/blog/2016-11-30-part1-kafka-for-beginners-what-is-apache-kafka.html</a>
</li>

<li>What are some alternatives to Apache Kafka?<br />
<a href="https://www.quora.com/What-are-some-alternatives-to-Apache-Kafka">https://www.quora.com/What-are-some-alternatives-to-Apache-Kafka</a>
</li>

<li>What is the best alternative to Kafka?<br />
<a href="https://www.slant.co/options/961/alternatives/~kafka-alternatives">https://www.slant.co/options/961/alternatives/~kafka-alternatives</a>
</li>

<li>Apache Flume<br />
<a href="https://flume.apache.org/index.html">https://flume.apache.org/index.html</a>
</li>

<li>Snare<br />
<a href="https://www.snaresolutions.com/">https://www.snaresolutions.com/</a>
</li>

<li>The Log: What every software engineer should know about real-time data's unifying abstraction<br />
<a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying</a>
</li>

<li>A super quick comparison between Kafka and Message Queues<br />
<a href="https://hackernoon.com/a-super-quick-comparison-between-kafka-and-message-queues-e69742d855a8?gi=e965191e72d0">https://hackernoon.com/a-super-quick-comparison-between-kafka-and-message-queues-e69742d855a8?gi=e965191e72d0</a>
</li>

<li>Kafka Queuing: Kafka as a Messaging System<br />
<a href="https://dzone.com/articles/kafka-queuing-kafka-as-a-messaging-system">https://dzone.com/articles/kafka-queuing-kafka-as-a-messaging-system</a>
</li>

<li>Microservices - Not a free lunch!<br />
<a href="http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html">http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html</a>
</li>

<li>Microservices, Monoliths, and NoOps<br />
<a href="http://blog.arungupta.me/microservices-monoliths-noops/">http://blog.arungupta.me/microservices-monoliths-noops/</a>
</li>

<li>Microservice Design Patterns<br />
<a href="http://blog.arungupta.me/microservice-design-patterns/">http://blog.arungupta.me/microservice-design-patterns/</a>
</li>

<li>Vision of a microservice revolution<br />
<a href="https://www.jolie-lang.org/vision.html">https://www.jolie-lang.org/vision.html</a>
</li>

<li>Microservices: a definition of this new architectural term<br />
<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a>
</li>

<li>Mikroslužby<br />
<a href="http://voho.eu/wiki/mikrosluzba/">http://voho.eu/wiki/mikrosluzba/</a>
</li>

<li>Microservice Prerequisites<br />
<a href="https://martinfowler.com/bliki/MicroservicePrerequisites.html">https://martinfowler.com/bliki/MicroservicePrerequisites.html</a>
</li>

<li>Microservices in Practice, Part 1: Reality Check and Service Design (vyžaduje registraci)<br />
<a href="https://ieeexplore.ieee.org/document/7819415">https://ieeexplore.ieee.org/document/7819415</a>
</li>

<li>Microservice Trade-Offs<br />
<a href="https://www.martinfowler.com/articles/microservice-trade-offs.html">https://www.martinfowler.com/articles/microservice-trade-offs.html</a>
</li>

<li>What is a microservice? (from a linguistic point of view)<br />
<a href="http://claudioguidi.blogspot.com/2017/03/what-microservice-from-linguisitc.html">http://claudioguidi.blogspot.com/2017/03/what-microservice-from-linguisitc.html</a>
</li>

<li>Microservices (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Microservices">https://en.wikipedia.org/wiki/Microservices</a>
</li>

<li>Fallacies of distributed computing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing">https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing</a>
</li>

<li>Service (systems architecture)<br />
<a href="https://en.wikipedia.org/wiki/Service_(systems_architecture)">https://en.wikipedia.org/wiki/Service_(systems_architecture)</a>
</li>

<li>Microservices in a Nutshell<br />
<a href="https://www.thoughtworks.com/insights/blog/microservices-nutshell">https://www.thoughtworks.com/insights/blog/microservices-nutshell</a>
</li>

<li>What is Microservices?<br />
<a href="https://smartbear.com/solutions/microservices/">https://smartbear.com/solutions/microservices/</a>
</li>

<li>Mastering Chaos - A Netflix Guide to Microservices<br />
<a href="https://www.youtube.com/watch?v=CZ3wIuvmHeM&t=17s">https://www.youtube.com/watch?v=CZ3wIuvmHeM&amp;t=17s</a>
</li>

<li>Messaging in Microservice Architecture<br />
<a href="https://www.youtube.com/watch?v=MkQWQ5f-SEY">https://www.youtube.com/watch?v=MkQWQ5f-SEY</a>
</li>

<li>Pattern: Messaging<br />
<a href="https://microservices.io/patterns/communication-style/messaging.html">https://microservices.io/patterns/communication-style/messaging.html</a>
</li>

<li>Microservices Messaging: Why REST Isn’t Always the Best Choice<br />
<a href="https://blog.codeship.com/microservices-messaging-rest-isnt-always-best-choice/">https://blog.codeship.com/microservices-messaging-rest-isnt-always-best-choice/</a>
</li>

<li>Protocol buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Apache Avro!<br />
<a href="https://avro.apache.org/">https://avro.apache.org/</a>
</li>

<li>REST vs Messaging for Microservices – Which One is Best?<br />
<a href="https://solace.com/blog/experience-awesomeness-event-driven-microservices/">https://solace.com/blog/experience-awesomeness-event-driven-microservices/</a>
</li>

<li>How did we end up here?<br />
<a href="https://gotocon.com/dl/goto-chicago-2015/slides/MartinThompson_and_ToddMontgomery_HowDidWeEndUpHere.pdf">https://gotocon.com/dl/goto-chicago-2015/slides/MartinThompson_and_ToddMontgomery_HowDidWeEndUpHere.pdf</a>
</li>

<li>Scaling microservices with message queues to handle data bursts<br />
<a href="https://read.acloud.guru/scaling-microservices-with-message-queue-2d389be5b139">https://read.acloud.guru/scaling-microservices-with-message-queue-2d389be5b139</a>
</li>

<li>Microservices: What are smart endpoints and dumb pipes?<br />
<a href="https://stackoverflow.com/questions/26616962/microservices-what-are-smart-endpoints-and-dumb-pipes">https://stackoverflow.com/questions/26616962/microservices-what-are-smart-endpoints-and-dumb-pipes</a>
</li>

<li>Common Object Request Broker Architecture<br />
<a href="https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture">https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture</a>
</li>

<li>Enterprise service bus<br />
<a href="https://en.wikipedia.org/wiki/Enterprise_service_bus">https://en.wikipedia.org/wiki/Enterprise_service_bus</a>
</li>

<li>Microservices vs SOA : What’s the Difference<br />
<a href="https://www.edureka.co/blog/microservices-vs-soa/">https://www.edureka.co/blog/microservices-vs-soa/</a>
</li>

<li>Pravda o SOA<br />
<a href="https://businessworld.cz/reseni-a-realizace/pravda-o-soa-2980">https://businessworld.cz/reseni-a-realizace/pravda-o-soa-2980</a>
</li>

<li>Is it a good idea for Microservices to share a common database?<br />
<a href="https://www.quora.com/Is-it-a-good-idea-for-Microservices-to-share-a-common-database">https://www.quora.com/Is-it-a-good-idea-for-Microservices-to-share-a-common-database</a>
</li>

<li>Pattern: Shared database<br />
<a href="https://microservices.io/patterns/data/shared-database.html">https://microservices.io/patterns/data/shared-database.html</a>
</li>

<li>Is a Shared Database in Microservices Actually an Anti-pattern?<br />
<a href="https://hackernoon.com/is-shared-database-in-microservices-actually-anti-pattern-8cc2536adfe4">https://hackernoon.com/is-shared-database-in-microservices-actually-anti-pattern-8cc2536adfe4</a>
</li>

<li>Shared database in microservices is a problem, yep<br />
<a href="https://ayende.com/blog/186914-A/shared-database-in-microservices-is-a-problem-yep">https://ayende.com/blog/186914-A/shared-database-in-microservices-is-a-problem-yep</a>
</li>

<li>Microservices with shared database? using multiple ORM's?<br />
<a href="https://stackoverflow.com/questions/43612866/microservices-with-shared-database-using-multiple-orms">https://stackoverflow.com/questions/43612866/microservices-with-shared-database-using-multiple-orms</a>
</li>

<li>Examples of microservice architecture<br />
<a href="https://www.coursera.org/lecture/intro-ibm-microservices/examples-of-microservice-architecture-JXOFj">https://www.coursera.org/lecture/intro-ibm-microservices/examples-of-microservice-architecture-JXOFj</a>
</li>

<li>Microservices: The Rise Of Kafka<br />
<a href="https://movio.co/blog/microservices-rise-kafka/">https://movio.co/blog/microservices-rise-kafka/</a>
</li>

<li>Building a Microservices Ecosystem with Kafka Streams and KSQL<br />
<a href="https://www.confluent.io/blog/building-a-microservices-ecosystem-with-kafka-streams-and-ksql/">https://www.confluent.io/blog/building-a-microservices-ecosystem-with-kafka-streams-and-ksql/</a>
</li>

<li>An introduction to Apache Kafka and microservices communication<br />
<a href="https://medium.com/@ulymarins/an-introduction-to-apache-kafka-and-microservices-communication-bf0a0966d63">https://medium.com/@ulymarins/an-introduction-to-apache-kafka-and-microservices-communication-bf0a0966d63</a>
</li>

<li>ACID (computer science)<br />
<a href="https://en.wikipedia.org/wiki/ACID_(computer_science)">https://en.wikipedia.org/wiki/ACID_(computer_science)</a>
</li>

<li>Distributed transaction<br />
<a href="https://en.wikipedia.org/wiki/Distributed_transaction">https://en.wikipedia.org/wiki/Distributed_transaction</a>
</li>

<li>Two-phase commit protocol<br />
<a href="https://en.wikipedia.org/wiki/Two-phase_commit_protocol">https://en.wikipedia.org/wiki/Two-phase_commit_protocol</a>
</li>

<li>Why is 2-phase commit not suitable for a microservices architecture?<br />
<a href="https://stackoverflow.com/questions/55249656/why-is-2-phase-commit-not-suitable-for-a-microservices-architecture">https://stackoverflow.com/questions/55249656/why-is-2-phase-commit-not-suitable-for-a-microservices-architecture</a>
</li>

<li>4 reasons why microservices resonate<br />
<a href="https://www.oreilly.com/ideas/4-reasons-why-microservices-resonate">https://www.oreilly.com/ideas/4-reasons-why-microservices-resonate</a>
</li>

<li>Pattern: Microservice Architecture<br />
<a href="https://microservices.io/patterns/microservices.html">https://microservices.io/patterns/microservices.html</a>
</li>

<li>Pattern: Monolithic Architecture<br />
<a href="https://microservices.io/patterns/monolithic.html">https://microservices.io/patterns/monolithic.html</a>
</li>

<li>Pattern: Saga<br />
<a href="https://microservices.io/patterns/data/saga.html">https://microservices.io/patterns/data/saga.html</a>
</li>

<li>Pattern: Database per service<br />
<a href="https://microservices.io/patterns/data/database-per-service.html">https://microservices.io/patterns/data/database-per-service.html</a>
</li>

<li>Pattern: Access token<br />
<a href="https://microservices.io/patterns/security/access-token.html">https://microservices.io/patterns/security/access-token.html</a>
</li>

<li>Databázová integrita<br />
<a href="https://cs.wikipedia.org/wiki/Datab%C3%A1zov%C3%A1_integrita">https://cs.wikipedia.org/wiki/Datab%C3%A1zov%C3%A1_integrita</a>
</li>

<li>Referenční integrita<br />
<a href="https://cs.wikipedia.org/wiki/Referen%C4%8Dn%C3%AD_integrita">https://cs.wikipedia.org/wiki/Referen%C4%8Dn%C3%AD_integrita</a>
</li>

<li>Introduction into Microservices <br />
<a href="https://specify.io/concepts/microservices">https://specify.io/concepts/microservices</a>
</li>

<li>Are Microservices ‘SOA Done Right’?<br />
<a href="https://intellyx.com/2015/07/20/are-microservices-soa-done-right/">https://intellyx.com/2015/07/20/are-microservices-soa-done-right/</a>
</li>

<li>The Hardest Part About Microservices: Your Data<br />
<a href="https://blog.christianposta.com/microservices/the-hardest-part-about-microservices-data/">https://blog.christianposta.com/microservices/the-hardest-part-about-microservices-data/</a>
</li>

<li>From a monolith to microservices + REST<br />
<a href="https://www.slideshare.net/InfoQ/from-a-monolith-to-microservices-rest-the-evolution-of-linkedins-service-architecture">https://www.slideshare.net/InfoQ/from-a-monolith-to-microservices-rest-the-evolution-of-linkedins-service-architecture</a>
</li>

<li>DevOps and the Myth of Efficiency, Part I<br />
<a href="https://blog.christianposta.com/devops/devops-and-the-myth-of-efficiency-part-i/">https://blog.christianposta.com/devops/devops-and-the-myth-of-efficiency-part-i/</a>
</li>

<li>DevOps and the Myth of Efficiency, Part II<br />
<a href="https://blog.christianposta.com/devops/devops-and-the-myth-of-efficiency-part-ii/">https://blog.christianposta.com/devops/devops-and-the-myth-of-efficiency-part-ii/</a>
</li>

<li>Standing on Distributed Shoulders of Giants: Farsighted Physicists of Yore Were Danged Smart!<br />
<a href="https://queue.acm.org/detail.cfm?id=2953944">https://queue.acm.org/detail.cfm?id=2953944</a>
</li>

<li>Building DistributedLog: High-performance replicated log service<br />
<a href="https://blog.twitter.com/engineering/en_us/topics/infrastructure/2015/building-distributedlog-twitter-s-high-performance-replicated-log-servic.html">https://blog.twitter.com/engineering/en_us/topics/infrastructure/2015/building-distributedlog-twitter-s-high-performance-replicated-log-servic.html</a>
</li>

<li>Turning the database inside-out with Apache Samza<br />
<a href="https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/">https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/</a>
</li>

<li>Debezium: Stream changes from your databases.<br />
<a href="https://debezium.io/">https://debezium.io/</a>
</li>

<li>Change data capture<br />
<a href="https://en.wikipedia.org/wiki/Change_data_capture">https://en.wikipedia.org/wiki/Change_data_capture</a>
</li>

<li>Apache Samza (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Apache_Samza">https://en.wikipedia.org/wiki/Apache_Samza</a>
</li>

<li>Storm (event processor)<br />
<a href="https://en.wikipedia.org/wiki/Storm_(event_processor)">https://en.wikipedia.org/wiki/Storm_(event_processor)</a>
</li>

<li>kappa-architecture.com<br />
<a href="http://milinda.pathirage.org/kappa-architecture.com/">http://milinda.pathirage.org/kappa-architecture.com/</a>
</li>

<li>Questioning the Lambda Architecture<br />
<a href="https://www.oreilly.com/ideas/questioning-the-lambda-architecture">https://www.oreilly.com/ideas/questioning-the-lambda-architecture</a>
</li>

<li>Lambda architecture<br />
<a href="https://en.wikipedia.org/wiki/Lambda_architecture">https://en.wikipedia.org/wiki/Lambda_architecture</a>
</li>

<li>Event stream processing<br />
<a href="https://en.wikipedia.org/wiki/Event_stream_processing">https://en.wikipedia.org/wiki/Event_stream_processing</a>
</li>

<li>How to beat the CAP theorem<br />
<a href="http://nathanmarz.com/blog/how-to-beat-the-cap-theorem.html">http://nathanmarz.com/blog/how-to-beat-the-cap-theorem.html</a>
</li>

<li>Kappa Architecture Our Experience<br />
<a href="https://events.static.linuxfound.org/sites/events/files/slides/ASPgems%20-%20Kappa%20Architecture.pdf">https://events.static.linuxfound.org/sites/events/files/slides/ASPgems%20-%20Kappa%20Architecture.pdf</a>
</li>

<li>Messaging Patterns in Event Driven Microservice Architectures<br />
<a href="https://www.youtube.com/watch?v=3xDc4MEYuHI">https://www.youtube.com/watch?v=3xDc4MEYuHI</a>
</li>

<li>Why monolithic apps are often better than microservices<br />
<a href="https://gigaom.com/2015/11/06/why-monolithic-apps-are-often-better-than-microservices/">https://gigaom.com/2015/11/06/why-monolithic-apps-are-often-better-than-microservices/</a>
</li>

<li>How Enterprise PaaS Can Add Critical Value to Microservices<br />
<a href="https://apprenda.com/blog/enterprise-paas-microservices/">https://apprenda.com/blog/enterprise-paas-microservices/</a>
</li>

<li>Common React Mistakes: Monolithic Components and a Lack of Abstraction<br />
<a href="https://www.pmg.com/blog/common-react-mistakes-monolithic-components-lack-abstraction/">https://www.pmg.com/blog/common-react-mistakes-monolithic-components-lack-abstraction/</a>
</li>

<li>From monolith to microservices – to migrate or not to migrate?<br />
<a href="https://altkomsoftware.pl/en/blog/monolith-microservices/">https://altkomsoftware.pl/en/blog/monolith-microservices/</a>
</li>

<li>Command–query separation<br />
<a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation">https://en.wikipedia.org/wiki/Command%E2%80%93query_separation</a>
</li>

<li>GOTO 2016: Messaging and Microservices (Clemens Vasters)<br />
<a href="https://www.youtube.com/watch?v=rXi5CLjIQ9kx">https://www.youtube.com/watch?v=rXi5CLjIQ9kx</a>
</li>

<li>GOTO Amsterdam 2019<br />
<a href="https://gotoams.nl/">https://gotoams.nl/</a>
</li>

<li>Lesson 2 - Kafka vs. Standard Messaging<br />
<a href="https://www.youtube.com/watch?v=lwMjjTT1Q-Q">https://www.youtube.com/watch?v=lwMjjTT1Q-Q</a>
</li>

<li>CommandQuerySeparation (Martin Fowler)<br />
<a href="https://martinfowler.com/bliki/CommandQuerySeparation.html">https://martinfowler.com/bliki/CommandQuerySeparation.html</a>
</li>

<li>Command–query separation<br />
<a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation">https://en.wikipedia.org/wiki/Command%E2%80%93query_separation</a>
</li>

<li>CQRS - Martin Fowler<br />
<a href="https://martinfowler.com/bliki/CQRS.html">https://martinfowler.com/bliki/CQRS.html</a>
</li>

<li>Lesson 12 - CQRS and Microservices<br />
<a href="https://www.youtube.com/watch?v=pUGvXUBfvEE">https://www.youtube.com/watch?v=pUGvXUBfvEE</a>
</li>

<li>Message queues - the right way to process and work with realtime data on your servers<br />
<a href="https://www.ably.io/blog/message-queues-the-right-way">https://www.ably.io/blog/message-queues-the-right-way</a>
</li>

<li>Function as a service<br />
<a href="https://en.wikipedia.org/wiki/Function_as_a_service">https://en.wikipedia.org/wiki/Function_as_a_service</a>
</li>

<li>AWS Lambda<br />
<a href="https://en.wikipedia.org/wiki/AWS_Lambda">https://en.wikipedia.org/wiki/AWS_Lambda</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

