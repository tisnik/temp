<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Posílání zpráv v aplikacích založených na mikroslužbách</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Posílání zpráv v aplikacích založených na mikroslužbách</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetím článku o návrhu a tvorbě aplikací založených na mikroslužbách se budeme zabývat některými způsoby, jakými mezi sebou mikroslužby komunikují. Návrh správné komunikace je po rozdělení databáze (viz předchozí část) další kritickou částí celé architektury mikroslužeb.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Posílání zpráv v&nbsp;aplikacích založených na mikroslužbách</a></p>
<p><a href="#k02">*** 2. Dvě klíčové součásti návrhu: databáze a komunikace</a></p>
<p><a href="#k03">*** 3. Zajištění nezávislosti mikroslužeb aneb koncept tlačítka STOP</a></p>
<p><a href="#k04">*** 4. CQS a CQRS</a></p>
<p><a href="#k05">*** 5. LT &ndash; Location Transparency</a></p>
<p><a href="#k06">*** 6. Tři důvody, proč poslat zprávu</a></p>
<p><a href="#k07">*** 7. Provedení úlohy &ndash; <strong>COMMAND</strong></a></p>
<p><a href="#k08">*** 8. Směrování používané při posílání příkazů (<strong>COMMAND</strong>)</a></p>
<p><a href="#k09">*** 9. Zpráva poslaná ve chvíli, kdy došlo k&nbsp;nějaké události &ndash; <strong>EVENT</strong></a></p>
<p><a href="#k10">*** 10. Směrování používané při vzniku události (<strong>EVENT</strong>)</a></p>
<p><a href="#k11">*** 11. Získání nějaké informace &ndash; <strong>QUERY</strong></a></p>
<p><a href="#k12">*** 12. Směrování používané při dotazech (<strong>QUERY</strong>)</a></p>
<p><a href="#k13">*** 13. Vzájemná komunikace mezi komponentami</a></p>
<p><a href="#k14">*** 14. Škálování aplikace ve chvíli, kdy je vytvořen &bdquo;distribuovaný monolit&ldquo;</a></p>
<p><a href="#k15">*** 15. Konzistentní modely založené na omezených kontextech</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Posílání zpráv v&nbsp;aplikacích založených na mikroslužbách</h2>

<p><i>&bdquo;It's hard to get messaging right&ldquo;</i></p>

<p><a href="">V&nbsp;předchozí části</a> <a href="">seriálu o mikroslužbách</a> jsme se věnovali velmi důležitému tématu &ndash; návrhem databáze resp.&nbsp;přesněji řečeno namodelováním reprezentace <i>stavu</i> celé aplikace, pochopitelně včetně způsobů změny tohoto stavu. Připomeňme si, že bylo důležité rozdělit databázi takovým způsobem, aby každá komponenta měla k&nbsp;dispozici právě tu část databáze, kterou pro svoji činnost nutně potřebuje. Právě rozdělení databáze pro jednotlivé komponenty je kritickou částí návrhu, která odlišuje &bdquo;distribuovaný monolit&ldquo; od skutečné aplikace založené na mikroslužbách. Kromě klasického rozdělení databáze na jednotlivé části jsme si minule popsali i takzvanou <i>architekturu kappa</i>, v&nbsp;níž je ústředním prvkem systém <a href="">NATS Streaming</a> či <a href="">Apacha Kafka</a>, který obsahuje neměnitelné záznamy (<i>log</i>) se všemi změnami stavu celé aplikace. Jednotlivé komponenty tyto změny postupně aplikují na svoje lokální databáze a přibližují se tak postupně <i>okamžitému a pravdivému stavu</i>, který je uložen formou neměnitelných záznamů se změnami.</p>
<p></p>

<p><div class="rs-tip-major">Poznámka: již v&nbsp;předchozím odstavci jsme použili označení <i>komponenta</i>. Může se jednat jak o nějakou mikroslužbu, tak i o pomocný nástroj typu <i>message broker</i>, <i>message bus</i> atd. Termín &bdquo;komponenta&ldquo; bude použit v&nbsp;dalším textu, už jen z&nbsp;toho důvodu, že je poněkud obecnější než &bdquo;mikroslužba&ldquo;.</div></p>
každá služba si řeší svůj stav a jeho případné změny &ndash; musí být autonomní

<p>Požadavky na autonomnost služeb jsou ve skutečnosti ještě větší. Kromě toho, že služba má svoji databázi, neměla by (kromě svého API) sdílet svůj stav a už vůbec ne svůj interní (vnitřní) stav. Což ale nejsou příliš překvapující požadavky, protože podobné požadavky existují i v&nbsp;objektově orientovaném programování a nazýváme je <i>zapouzdření</i> (<i>encapculation</i>). Dále je nutné, aby služby pro komunikaci používaly vždy své API a nikoli nějaké postranní kanály.</p>

<p>Na tomto místě je dobré upozornit na to, že prozatím neexistuje jediná &bdquo;správná&ldquo; cesta, jaká architektura je nejlepší, ale mnozí před námi už zjistili, které cesty jsou slepé.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Dvě klíčové součásti návrhu: databáze a komunikace</h2>

<p><i>&bdquo;Monolith components are large components that contain a lot of
functionality&ldquo;</i></p>

<p>Návrh databáze je skutečně primární částí naplánování modelu celé architektury aplikace (a měl by být proveden už na začátku), ovšem pochopitelně se nejedná o jedinou součást návrhu, kterou je nutné vyřešit. Dalším důležitým architektonickým rozhodnutím je určení, jakým způsobem vlastně budou mezi sebou budou jednotlivé komponenty komunikovat. A podobně jako bylo možné (mnohdy nutné) pro každou komponentu zvolit odlišnou databázi (SQL či nějakou NoSQL, ať již dokumentovou, objektovou nebo grafovou atd.), i způsoby vzájemné komunikace služeb &ndash; posílání zpráv &ndash; je nutné navrhnout podle toho, o jakou komunikaci se jedná. V&nbsp;praxi to znamená, že se většinou použije větší množství protokolů a většinou i několik instancí <i>message brokerů</i>. A v&nbsp;neposlední řadě je nutné určit, zda spolu budou jednotlivé komponenty komunikovat přímo či zda se vytvoří centrální popř.&nbsp;hierarchicky umístěné uzly, k&nbsp;nimž se jednotlivé komponenty budou připojovat.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zajištění nezávislosti mikroslužeb aneb koncept tlačítka STOP</h2>

<p><i>&bdquo;As a fan of microservices, I fear enterprises are blindly charging
forward and could be left disappointed with a microservices-based strategy if
the technology is not appropriately applied.&ldquo;<br />
Sinclair Schuller</i></p>

<p>Jak se vlastně pozná dobrý návrh architektury aplikace založené na mikroslužbách? Samozřejmě je k&nbsp;dispozici velké množství kritérií, například propustnost, maximální počet současně obsluhovaných klientů, škálovatelnost, systémové nároky atd. atd. Existuje ovšem ještě jedno zajímavé kritérium, které osobně označuji termínem &bdquo;tlačítko STOP&ldquo;. Celá aplikace by totiž měla být &ndash; pochopitelně v&nbsp;ideálním světě &ndash; schopna do jisté míry fungovat i tehdy, pokud nějakou z&nbsp;komponent (mikroslužeb atd.) vypneme. A i když aplikace přestane nabízet některé služby, měla by být schopna se automaticky vrátit k&nbsp;běžné činnosti ihned poté, co se zastavená komponenta opět restartuje. Právě toto chování totiž vyžadujeme &ndash; schopnost aplikace se &bdquo;vzpamatovat&ldquo; i po částečném výpadku, a to bez toho, aby se musela celá aplikace vypnout s&nbsp;postupným zapínáním služeb podle nějakého návodu (toto chování ponechme monolitním aplikacím).</p>

<p><div class="rs-tip-major">Poznámka: příkladem s&nbsp;velkou pravděpodobností dobře navržené architektury může být GitHub. Pokud intenzivně používáte jeho API i GUI, mohli jste si v&nbsp;tomto roce povšimnout několika krátkodobých výpadků, které ovšem většinou postihly pouze určitou část této služby (například se na autorských stránkách nevypsaly správné informace o činnostech provedených v&nbsp;posledním dni &ndash; počet commitů, počet uzavřených issues atd.); typicky však vlastní Git fungoval. Díky oddělení jednotlivých částí služby se restart jednotlivých komponent obešel bez nutnosti restartu celé služby, což by pravděpodobně bylo komplikovanější a časově náročnější. Navíc byly některé výpadky pro koncové uživatele prakticky neviditelné a projevily se například jen zpožděným doručením notifikace, zpožděním při poslání web hooku do CI atd. atd.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. CQS a CQRS</h2>

<p><i>&bdquo;“…organizations which design systems … are constrained to produce
designs which are copies of the communication structures of these
organizations.”&ldquo;</i></p>

<p></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Tři důvody, proč poslat zprávu</h2>

<p><i>&bdquo;“Design the organisation you want, the architecture will follow
(kicking and screaming).”&ldquo;</i></p>

<p>Při návrhu komunikace mezi jednotlivými komponentami je dobré si uvědomit, proč spolu vlastně komponenty potřebují komunikovat. V&nbsp;naprosté většině případů se jedná o jednu ze tří možností vypsaných pod tímto odstavcem:</p>

<ol>

<li>Jedna komponenta vyžaduje, aby některá z&nbsp;dalších komponent provedla určitou činnost či určitý příkaz. Tento typ zprávy budeme označovat slovem <strong>COMMAND</strong> a většinou znamená, že se změní stav aplikace (například záznam informace o novém uživateli).</li>

CommandBus
EventBus
QueryBus



<p><a name="k06"></a></p>
<h2 id="k06">6. Provedení úlohy: COMMAND</h2>

<p><i>&bdquo;Microservice &ndash; “small autonomous services modelled around
business domain that work together“&ldquo;<br />
Sam Newman, jeden z&nbsp;autorů myšlenky mikroslužeb</i></p>

obecně zajištění side-effectu
modifikace dat
změna stavu aplikace
poslání e-mailu
atd.
většinou jediný cíl - přesněji řečeno jediná komponenta, která má příkaz provést (to však není problém, kterým by se měla zabývat komponenta, která příkaz vydává)
odpověď OK/Not OK, někdy i s daty
<p></p>

typicky řešeno 




<p><a name="k07"></a></p>
<h2 id="k07">7. Směrování používané při posílání příkazů (COMMAND)</h2>

<p><i>&bdquo;'Service' does not imply...Docker, Stateless, Kubernetes, JSON,
ESB, Cloud, NoSQL, ...&ldquo;<br />
Clemens Vasters</i></p>

routing: podle cíle příkazu a vlastního příkazu
<p></p>
další možnosti

round-robin
SLA-based (VIP uživatelé do speciálních komponent atd. atd.)
load-based



<p><a name="k08"></a></p>
<h2 id="k08">8. Zpráva poslaná ve chvíli, kdy došlo k&nbsp;nějaké události &ndash; EVENT</h2>

<p></p>
data change
deadline passing
...
...
...



<p><a name="k09"></a></p>
<h2 id="k09">9. Směrování používané při vzniku události</h2>

<p></p>
většinou publish-subscribe

take takzvani competing consumers
balanced consumers




<p><a name="k10"></a></p>
<h2 id="k10">10. Získání nějaké informace &ndash; QUERY</h2>

většinou (ideálně) side-effect free
<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

velka vazba = point to point
(REST API), dobre pro single-true answers

single destination
scatter-gather query
 = muze se vratit vice odpovedi od ruznych komponent
   s ruznou presnosti
   (obecna cena, cena pro specialniho zakaznika, cena na zaklade nejake akce - black friday, zemi puvodu atd.)
   je na tazateli, aby si vybral :-)

priklad black friday - jen se prida nova komponenta na chvili,
ta zmeni chovani aplikace, ovsem bez toho, abysme museli nekam hrabat

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vzájemná komunikace mezi komponentami</h2>

<p></p>
point to point
magický centralizovaný message broker
hierarchická struktura



<p><a name="k13"></a></p>
<h2 id="k13">13. Škálování aplikace ve chvíli, kdy je vytvořen &bdquo;distribuovaný monolit&ldquo;</h2>

jediny message broker?

magická komponenta, ovšem kdo se o ni stará, kdo je vlastník, kdo řeší problémy

simplification through centralization
jenže skutečně škáluje?
pro jednotky a desítky komponent pravděpodobně bude fungovat bez problémů

<p></p>
vsechny komponenty musi "znat jazyk" ostatnich komponent




<p><a name="k14"></a></p>
<h2 id="k14">14. Konzistentní modely založené na omezených kontextech</h2>

DDD - Domain Driven Design

v rámci jednoho kontextu - centralni message broker

unifikovany broker uprostred

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>

<p></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Microservices - Not a free lunch!<br />
<a href="http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html">http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html</a>
</li>

<li>Microservices, Monoliths, and NoOps<br />
<a href="http://blog.arungupta.me/microservices-monoliths-noops/">http://blog.arungupta.me/microservices-monoliths-noops/</a>
</li>

<li>Microservice Design Patterns<br />
<a href="http://blog.arungupta.me/microservice-design-patterns/">http://blog.arungupta.me/microservice-design-patterns/</a>
</li>

<li>Vision of a microservice revolution<br />
<a href="https://www.jolie-lang.org/vision.html">https://www.jolie-lang.org/vision.html</a>
</li>

<li>Microservices: a definition of this new architectural term<br />
<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a>
</li>

<li>Mikroslužby<br />
<a href="http://voho.eu/wiki/mikrosluzba/">http://voho.eu/wiki/mikrosluzba/</a>
</li>

<li>Microservice Prerequisites<br />
<a href="https://martinfowler.com/bliki/MicroservicePrerequisites.html">https://martinfowler.com/bliki/MicroservicePrerequisites.html</a>
</li>

<li>Microservices in Practice, Part 1: Reality Check and Service Design (vyžaduje registraci)<br />
<a href="https://ieeexplore.ieee.org/document/7819415">https://ieeexplore.ieee.org/document/7819415</a>
</li>

<li>Microservice Trade-Offs<br />
<a href="https://www.martinfowler.com/articles/microservice-trade-offs.html">https://www.martinfowler.com/articles/microservice-trade-offs.html</a>
</li>

<li>What is a microservice? (from a linguistic point of view)<br />
<a href="http://claudioguidi.blogspot.com/2017/03/what-microservice-from-linguisitc.html">http://claudioguidi.blogspot.com/2017/03/what-microservice-from-linguisitc.html</a>
</li>

<li>Microservices (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Microservices">https://en.wikipedia.org/wiki/Microservices</a>
</li>

<li>Fallacies of distributed computing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing">https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing</a>
</li>

<li>Service (systems architecture)<br />
<a href="https://en.wikipedia.org/wiki/Service_(systems_architecture)">https://en.wikipedia.org/wiki/Service_(systems_architecture)</a>
</li>

<li>Microservices in a Nutshell<br />
<a href="https://www.thoughtworks.com/insights/blog/microservices-nutshell">https://www.thoughtworks.com/insights/blog/microservices-nutshell</a>
</li>

<li>What is Microservices?<br />
<a href="https://smartbear.com/solutions/microservices/">https://smartbear.com/solutions/microservices/</a>
</li>

<li>Mastering Chaos - A Netflix Guide to Microservices<br />
<a href="https://www.youtube.com/watch?v=CZ3wIuvmHeM&t=17s">https://www.youtube.com/watch?v=CZ3wIuvmHeM&amp;t=17s</a>
</li>

<li>Messaging in Microservice Architecture<br />
<a href="https://www.youtube.com/watch?v=MkQWQ5f-SEY">https://www.youtube.com/watch?v=MkQWQ5f-SEY</a>
</li>

<li>Pattern: Messaging<br />
<a href="https://microservices.io/patterns/communication-style/messaging.html">https://microservices.io/patterns/communication-style/messaging.html</a>
</li>

<li>Microservices Messaging: Why REST Isn’t Always the Best Choice<br />
<a href="https://blog.codeship.com/microservices-messaging-rest-isnt-always-best-choice/">https://blog.codeship.com/microservices-messaging-rest-isnt-always-best-choice/</a>
</li>

<li>Protocol buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Apache Avro!<br />
<a href="https://avro.apache.org/">https://avro.apache.org/</a>
</li>

<li>REST vs Messaging for Microservices – Which One is Best?<br />
<a href="https://solace.com/blog/experience-awesomeness-event-driven-microservices/">https://solace.com/blog/experience-awesomeness-event-driven-microservices/</a>
</li>

<li>How did we end up here?<br />
<a href="https://gotocon.com/dl/goto-chicago-2015/slides/MartinThompson_and_ToddMontgomery_HowDidWeEndUpHere.pdf">https://gotocon.com/dl/goto-chicago-2015/slides/MartinThompson_and_ToddMontgomery_HowDidWeEndUpHere.pdf</a>
</li>

<li>Scaling microservices with message queues to handle data bursts<br />
<a href="https://read.acloud.guru/scaling-microservices-with-message-queue-2d389be5b139">https://read.acloud.guru/scaling-microservices-with-message-queue-2d389be5b139</a>
</li>

<li>Microservices: What are smart endpoints and dumb pipes?<br />
<a href="https://stackoverflow.com/questions/26616962/microservices-what-are-smart-endpoints-and-dumb-pipes">https://stackoverflow.com/questions/26616962/microservices-what-are-smart-endpoints-and-dumb-pipes</a>
</li>

<li>Common Object Request Broker Architecture<br />
<a href="https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture">https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture</a>
</li>

<li>Enterprise service bus<br />
<a href="https://en.wikipedia.org/wiki/Enterprise_service_bus">https://en.wikipedia.org/wiki/Enterprise_service_bus</a>
</li>

<li>Microservices vs SOA : What’s the Difference<br />
<a href="https://www.edureka.co/blog/microservices-vs-soa/">https://www.edureka.co/blog/microservices-vs-soa/</a>
</li>

<li>Pravda o SOA<br />
<a href="https://businessworld.cz/reseni-a-realizace/pravda-o-soa-2980">https://businessworld.cz/reseni-a-realizace/pravda-o-soa-2980</a>
</li>

<li>Is it a good idea for Microservices to share a common database?<br />
<a href="https://www.quora.com/Is-it-a-good-idea-for-Microservices-to-share-a-common-database">https://www.quora.com/Is-it-a-good-idea-for-Microservices-to-share-a-common-database</a>
</li>

<li>Pattern: Shared database<br />
<a href="https://microservices.io/patterns/data/shared-database.html">https://microservices.io/patterns/data/shared-database.html</a>
</li>

<li>Is a Shared Database in Microservices Actually an Anti-pattern?<br />
<a href="https://hackernoon.com/is-shared-database-in-microservices-actually-anti-pattern-8cc2536adfe4">https://hackernoon.com/is-shared-database-in-microservices-actually-anti-pattern-8cc2536adfe4</a>
</li>

<li>Shared database in microservices is a problem, yep<br />
<a href="https://ayende.com/blog/186914-A/shared-database-in-microservices-is-a-problem-yep">https://ayende.com/blog/186914-A/shared-database-in-microservices-is-a-problem-yep</a>
</li>

<li>Microservices with shared database? using multiple ORM's?<br />
<a href="https://stackoverflow.com/questions/43612866/microservices-with-shared-database-using-multiple-orms">https://stackoverflow.com/questions/43612866/microservices-with-shared-database-using-multiple-orms</a>
</li>

<li>Examples of microservice architecture<br />
<a href="https://www.coursera.org/lecture/intro-ibm-microservices/examples-of-microservice-architecture-JXOFj">https://www.coursera.org/lecture/intro-ibm-microservices/examples-of-microservice-architecture-JXOFj</a>
</li>

<li>Microservices: The Rise Of Kafka<br />
<a href="https://movio.co/blog/microservices-rise-kafka/">https://movio.co/blog/microservices-rise-kafka/</a>
</li>

<li>Building a Microservices Ecosystem with Kafka Streams and KSQL<br />
<a href="https://www.confluent.io/blog/building-a-microservices-ecosystem-with-kafka-streams-and-ksql/">https://www.confluent.io/blog/building-a-microservices-ecosystem-with-kafka-streams-and-ksql/</a>
</li>

<li>An introduction to Apache Kafka and microservices communication<br />
<a href="https://medium.com/@ulymarins/an-introduction-to-apache-kafka-and-microservices-communication-bf0a0966d63">https://medium.com/@ulymarins/an-introduction-to-apache-kafka-and-microservices-communication-bf0a0966d63</a>
</li>

<li>ACID (computer science)<br />
<a href="https://en.wikipedia.org/wiki/ACID_(computer_science)">https://en.wikipedia.org/wiki/ACID_(computer_science)</a>
</li>

<li>Distributed transaction<br />
<a href="https://en.wikipedia.org/wiki/Distributed_transaction">https://en.wikipedia.org/wiki/Distributed_transaction</a>
</li>

<li>Two-phase commit protocol<br />
<a href="https://en.wikipedia.org/wiki/Two-phase_commit_protocol">https://en.wikipedia.org/wiki/Two-phase_commit_protocol</a>
</li>

<li>Why is 2-phase commit not suitable for a microservices architecture?<br />
<a href="https://stackoverflow.com/questions/55249656/why-is-2-phase-commit-not-suitable-for-a-microservices-architecture">https://stackoverflow.com/questions/55249656/why-is-2-phase-commit-not-suitable-for-a-microservices-architecture</a>
</li>

<li>4 reasons why microservices resonate<br />
<a href="https://www.oreilly.com/ideas/4-reasons-why-microservices-resonate">https://www.oreilly.com/ideas/4-reasons-why-microservices-resonate</a>
</li>

<li>Pattern: Microservice Architecture<br />
<a href="https://microservices.io/patterns/microservices.html">https://microservices.io/patterns/microservices.html</a>
</li>

<li>Pattern: Monolithic Architecture<br />
<a href="https://microservices.io/patterns/monolithic.html">https://microservices.io/patterns/monolithic.html</a>
</li>

<li>Pattern: Saga<br />
<a href="https://microservices.io/patterns/data/saga.html">https://microservices.io/patterns/data/saga.html</a>
</li>

<li>Pattern: Database per service<br />
<a href="https://microservices.io/patterns/data/database-per-service.html">https://microservices.io/patterns/data/database-per-service.html</a>
</li>

<li>Pattern: Access token<br />
<a href="https://microservices.io/patterns/security/access-token.html">https://microservices.io/patterns/security/access-token.html</a>
</li>

<li>Databázová integrita<br />
<a href="https://cs.wikipedia.org/wiki/Datab%C3%A1zov%C3%A1_integrita">https://cs.wikipedia.org/wiki/Datab%C3%A1zov%C3%A1_integrita</a>
</li>

<li>Referenční integrita<br />
<a href="https://cs.wikipedia.org/wiki/Referen%C4%8Dn%C3%AD_integrita">https://cs.wikipedia.org/wiki/Referen%C4%8Dn%C3%AD_integrita</a>
</li>

<li>Introduction into Microservices <br />
<a href="https://specify.io/concepts/microservices">https://specify.io/concepts/microservices</a>
</li>

<li>Are Microservices ‘SOA Done Right’?<br />
<a href="https://intellyx.com/2015/07/20/are-microservices-soa-done-right/">https://intellyx.com/2015/07/20/are-microservices-soa-done-right/</a>
</li>

<li>The Hardest Part About Microservices: Your Data<br />
<a href="https://blog.christianposta.com/microservices/the-hardest-part-about-microservices-data/">https://blog.christianposta.com/microservices/the-hardest-part-about-microservices-data/</a>
</li>

<li>From a monolith to microservices + REST<br />
<a href="https://www.slideshare.net/InfoQ/from-a-monolith-to-microservices-rest-the-evolution-of-linkedins-service-architecture">https://www.slideshare.net/InfoQ/from-a-monolith-to-microservices-rest-the-evolution-of-linkedins-service-architecture</a>
</li>

<li>DevOps and the Myth of Efficiency, Part I<br />
<a href="https://blog.christianposta.com/devops/devops-and-the-myth-of-efficiency-part-i/">https://blog.christianposta.com/devops/devops-and-the-myth-of-efficiency-part-i/</a>
</li>

<li>DevOps and the Myth of Efficiency, Part II<br />
<a href="https://blog.christianposta.com/devops/devops-and-the-myth-of-efficiency-part-ii/">https://blog.christianposta.com/devops/devops-and-the-myth-of-efficiency-part-ii/</a>
</li>

<li>Standing on Distributed Shoulders of Giants: Farsighted Physicists of Yore Were Danged Smart!<br />
<a href="https://queue.acm.org/detail.cfm?id=2953944">https://queue.acm.org/detail.cfm?id=2953944</a>
</li>

<li>Building DistributedLog: High-performance replicated log service<br />
<a href="https://blog.twitter.com/engineering/en_us/topics/infrastructure/2015/building-distributedlog-twitter-s-high-performance-replicated-log-servic.html">https://blog.twitter.com/engineering/en_us/topics/infrastructure/2015/building-distributedlog-twitter-s-high-performance-replicated-log-servic.html</a>
</li>

<li>Turning the database inside-out with Apache Samza<br />
<a href="https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/">https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/</a>
</li>

<li>Debezium: Stream changes from your databases.<br />
<a href="https://debezium.io/">https://debezium.io/</a>
</li>

<li>Change data capture<br />
<a href="https://en.wikipedia.org/wiki/Change_data_capture">https://en.wikipedia.org/wiki/Change_data_capture</a>
</li>

<li>Apache Samza (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Apache_Samza">https://en.wikipedia.org/wiki/Apache_Samza</a>
</li>

<li>Storm (event processor)<br />
<a href="https://en.wikipedia.org/wiki/Storm_(event_processor)">https://en.wikipedia.org/wiki/Storm_(event_processor)</a>
</li>

<li>kappa-architecture.com<br />
<a href="http://milinda.pathirage.org/kappa-architecture.com/">http://milinda.pathirage.org/kappa-architecture.com/</a>
</li>

<li>Questioning the Lambda Architecture<br />
<a href="https://www.oreilly.com/ideas/questioning-the-lambda-architecture">https://www.oreilly.com/ideas/questioning-the-lambda-architecture</a>
</li>

<li>Lambda architecture<br />
<a href="https://en.wikipedia.org/wiki/Lambda_architecture">https://en.wikipedia.org/wiki/Lambda_architecture</a>
</li>

<li>Event stream processing<br />
<a href="https://en.wikipedia.org/wiki/Event_stream_processing">https://en.wikipedia.org/wiki/Event_stream_processing</a>
</li>

<li>How to beat the CAP theorem<br />
<a href="http://nathanmarz.com/blog/how-to-beat-the-cap-theorem.html">http://nathanmarz.com/blog/how-to-beat-the-cap-theorem.html</a>
</li>

<li>Kappa Architecture Our Experience<br />
<a href="https://events.static.linuxfound.org/sites/events/files/slides/ASPgems%20-%20Kappa%20Architecture.pdf">https://events.static.linuxfound.org/sites/events/files/slides/ASPgems%20-%20Kappa%20Architecture.pdf</a>
</li>

<li>Messaging Patterns in Event Driven Microservice Architectures<br />
<a href="https://www.youtube.com/watch?v=3xDc4MEYuHI">https://www.youtube.com/watch?v=3xDc4MEYuHI</a>
</li>

<li>Why monolithic apps are often better than microservices<br />
<a href="https://gigaom.com/2015/11/06/why-monolithic-apps-are-often-better-than-microservices/">https://gigaom.com/2015/11/06/why-monolithic-apps-are-often-better-than-microservices/</a>
</li>

<li>How Enterprise PaaS Can Add Critical Value to Microservices<br />
<a href="https://apprenda.com/blog/enterprise-paas-microservices/">https://apprenda.com/blog/enterprise-paas-microservices/</a>
</li>

<li>Common React Mistakes: Monolithic Components and a Lack of Abstraction<br />
<a href="https://www.pmg.com/blog/common-react-mistakes-monolithic-components-lack-abstraction/">https://www.pmg.com/blog/common-react-mistakes-monolithic-components-lack-abstraction/</a>
</li>

<li>From monolith to microservices – to migrate or not to migrate?<br />
<a href="https://altkomsoftware.pl/en/blog/monolith-microservices/">https://altkomsoftware.pl/en/blog/monolith-microservices/</a>
</li>

<li>Command–query separation<br />
<a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation">https://en.wikipedia.org/wiki/Command%E2%80%93query_separation</a>
</li>

<li>GOTO 2016: Messaging and Microservices (Clemens Vasters)<br />
<a href="https://www.youtube.com/watch?v=rXi5CLjIQ9kx">https://www.youtube.com/watch?v=rXi5CLjIQ9kx</a>
</li>

<li>GOTO Amsterdam 2019<br />
<a href="https://gotoams.nl/">https://gotoams.nl/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

