<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Mikroslužby</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Mikroslužby</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se seznámíme se základními principy, na nichž jsou postaveny takzvané <i>mikroslužby</i> (<i>microservices</i>. Z jednoho pohledu se může zdát, že mikroslužby jsou &bdquo;Next Great Thing&ldquo; v IT, ovšem na druhou stranu je jejich koncept postaven na známých myšlenkách.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Mikroslužby</a></p>
<p><a href="#k02">2. Od klasických monolitických služeb k&nbsp;mikroslužbám</a></p>
<p><a href="#k03">3. Reálně provozované monolitické služby a jejich škálování</a></p>
<p><a href="#k04">4. Koncepty, na nichž jsou postaveny mikroslužby</a></p>
<p><a href="#k05">5. Myšlenka ze světa Unixu: smart endpoints and dumb pipes</a></p>
<p><a href="#k06">6. Decentralizace na všech úrovních, škálování</a></p>
<p><a href="#k07">7. Automatizace při nasazování, testování a provozování mikroslužeb</a></p>
<p><a href="#k08">8. Další vybrané přednosti mikroslužeb</a></p>
<p><a href="#k09">9. A pochopitelně i některé zápory</a></p>
<p><a href="#k10">10. Synchronní vs.&nbsp;asynchronní volání</a></p>
<p><a href="#k11">11. Message brokery</a></p>
<p><a href="#k12">12. Časté omyly, kterých se vývojáři dopouští (nejenom) při tvorbě mikroslužeb</a></p>
<p><a href="#k13">13. Síť jakožto problematický prvek</a></p>
<p><a href="#k14">14. Špatné uplatnění konceptu mikroslužeb</a></p>
<p><a href="#k15">15. Sdílení databáze mezi mikroslužbami</a></p>
<p><a href="#k16">16. SOA versus mikroslužby</a></p>
<p><a href="#k17">17. Rozdíly v&nbsp;přístupu SOA a MSA</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Mikroslužby</h2>

<p>V&nbsp;dnešním článku se seznámíme se základními principy, na nichž je
postaven koncept takzvaných <i>mikroslužeb</i> (<i>microservice</i>). Jedná se
o poměrně často skloňovaný termín, kterým se v&nbsp;informatice označuje nový
(či spíše přesněji řečeno staronový) způsob realizace služeb (<i>service</i>),
tj.&nbsp;implementací nějaké funkcionality, která je typicky nabízena servery,
ať již na Internetu či &bdquo;pouze&ldquo;v&nbsp;rámci Intranetu. Mezi typické
služby patří například správa uživatelů (zaměstnanců), správa tiskových úloh,
docházkový či skladový systém, <a
href="https://en.wikipedia.org/wiki/Content_management_system">CMS</a> či
dokonce celý publikační systém, mapové portály, dále služby typu Google Drive
apod. Podle způsobu návrhu architektury takových služeb dnes rozlišujeme mezi
monolitickými službami na straně jedné a právě mikroslužbami na straně druhé. A
pochopitelně můžeme nalézt i mnohé návrhy architektury, které leží mezi těmito
dvěma v&nbsp;podstatě extrémními kategoriemi (viz například dále zmíněnou
metodologii SOA).</p>

<p>V&nbsp;souvislosti s&nbsp;mikroslužbami se často mluví i o různých
nástrojích a technologiích, mezi něž patří například Ansible, Docker,
Kubernetes, Knative, OpenShift atd. Ty se skutečně pro projekty založené na
mikroslužbách používají, ovšem pro samotné pochopení principů, na nichž jsou
mikroslužby postaveny, se <i>prozatím</i> těmito nástroji nemusíme podrobněji
zabývat (alespoň nikoli v&nbsp;úvodním článku).</p>

<p><div class="rs-tip-major">Poznámka: podobně jako v&nbsp;mnoha dalších
oblastech IT není vlastní koncept <i>mikroslužeb</i> vlastně nijak nový,
protože se podobné myšlenky (i když možná ne v&nbsp;té nejčistší podobě)
aplikovaly již dříve; ostatně filozofie Unixu je založena na podobných
myšlenkách. Samotný vznik a rozšíření používání termínu <i>mikroslužba</i> však
ukazuje na to, že celá problematika před několika roky uzrála do takové míry,
aby se staronový koncept přímo pojmenoval (navíc se nejedná o tak marketingový
termín, jako například pojem Web 2.0).</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Architektura klasických monolitických služeb</h2>

<p>Pravděpodobně každý čtenář Roota se již setkal s&nbsp;nějakou monolitickou
aplikací či s&nbsp;monolitickou webovou službou (ostatně i samotný Root je
s&nbsp;poměrně velkou pravděpodobností postaven podobným způsobem). Typicky je
taková aplikace rozdělena na tři části: vrstvu zajišťující uživatelské
rozhraní, vrstvu s&nbsp;vlastní implementací business logiky a konečně většina
služeb používá i nějaké datové úložiště, do něhož se vstupuje přes datovou
vrstvu. V&nbsp;tom nejtypičtějším případě může být služba realizována na
základě čistě třívrstvé architektury:</p>

<a href="https://www.root.cz/obrazek/361134/"><img src="https://i.iinfo.cz/images/372/microservices1-1-prev.png" class="image-361134" alt="&#160;" width="370" height="144" /></a>
<p><i>Obrázek 1: Klasická (stále poměrně často používaná) třívrstvá
architektura.</i></p>

<p>Mezi typické znaky takto navržených a provozovaných služeb patří
především:</p>

<ol>

<li>Samotný programový kód, i když může být vnitřně velmi dobře strukturovaný a
modularizovaný (knihovny, jmenné prostory, třídy, funkce, programové bloky), je
většinou napsán v&nbsp;jednom programovacím jazyku, uložen v&nbsp;jediném
repositáři a spravován jako monolit.</li>

<li>Podobně i datové úložiště (databáze) bývá monolitická &ndash; jedno
úložiště pro celou aplikaci/službu.</li>

<li>Moduly, z&nbsp;nichž se případně aplikace skládá, jsou těsně svázány a
případné změny v&nbsp;rozhraních modulů mohou mít velký dopad na celou aplikaci
(její nasaditelnost, stabilitu atd.).</li>

<li>Aplikace se typicky nasazuje a testuje jako celek; při každém nasazení bývá
(v&nbsp;tom lepším případě :-) kompletně otestována, což může být časově
náročná operace.</li>

<li>Samotná aplikace většinou závisí na mnoha knihovnách, které mají
tranzitivní závislosti (tedy &bdquo;závislosti závislostí&ldquo;). Jakékoli
zvýšení verze závislých knihoven (například v&nbsp;důsledku nalezené <a
href="https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures">CVE</a>)
je opět nutné otestovat v&nbsp;kontextu celé aplikace; chyba v&nbsp;knihovně
může celou aplikaci znepřístupnit, v&nbsp;případě CVE pak způsobit například
únik dat.</li>

</ol>



<p><a name="k03"></a></p>
<h2 id="k03">3. Reálně provozované monolitické služby a jejich škálování</h2>

<p>Ve skutečnosti je však reálná aplikace či služba realizována ještě poněkud
komplikovanějším způsobem, protože vlastní realizace frontendu a business
logiky bývá &bdquo;schována&ldquo; za mezivrstvu realizovanou HTTP serverem
(například Apache či Nginx), který dokáže kromě jiného zajistit i posílání
statického obsahu atd. Frontend a business logika může v&nbsp;tomto případě
běžet například v&nbsp;nějakém aplikačním serveru, servlet kontejneru, může se
jednat o aplikaci napsanou v&nbsp;Pythonu založenou na knihovně Flask,
samostatnou aplikaci vyvinutou <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">v&nbsp;programovacím
jazyce Go</a> pomocí <a
href="https://www.root.cz/clanky/vyvoj-sitovych-aplikaci-v-programovacim-jazyku-go/#k09">standardního
balíčku <strong>net/http</strong>:</a>, aplikaci pro Node.js atd.:</p>

<a href="https://www.root.cz/obrazek/361135/"><img src="https://i.iinfo.cz/images/372/microservices1-2-prev.png" class="image-361135" alt="&#160;" width="370" height="146" /></a>
<p><i>Obrázek 2: Služba v&nbsp;reálném provozu při použití HTTP
serveru, k&nbsp;němuž se připojují klienti.</i></p>

<p>V&nbsp;případě, že je takovou službu nutné naškálovat, je to pochopitelně
možné, i když v&nbsp;poněkud omezeném rozsahu (této problematice se budeme
podrobněji věnovat v&nbsp;navazujících kapitolách):</p>

<a href="https://www.root.cz/obrazek/361136/"><img src="https://i.iinfo.cz/images/372/microservices1-3-prev.png" class="image-361136" alt="&#160;" width="370" height="184" /></a>
<p><i>Obrázek 3: Jedna z&nbsp;možností škálování monolitické služby, kdy HTTP
server současně zajišťuje load balancing.</i></p>

<p>Jeden z&nbsp;problémů při škálování monolitických služeb je jejich příliš
velká granularita a z&nbsp;toho plynoucí větší náklady na HW či na prostředky
dostupné v&nbsp;cloudu. Taktéž bývá obtížné či prakticky nemožné vybalancovat
požadavky na potřebnou kapacitu operační paměti, výpočetní výkon
mikroprocesoru, rychlost vstupně-výstupních operací a kapacitu síťového
připojení. Totéž lze říci o případu, kdy aplikace využívá jedinou databázi a
potřebuje ji horizontálně či vertikálně naškálovat.</p>

<p><div class="rs-tip-major">Poznámka: sice se většinou nejedná o neřešitelné
problémy, ale obecně bývá řešení složitější a někdy též křehčí.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Koncepty, na nichž jsou postaveny mikroslužby</h2>

<p>Monolitické služby se v&nbsp;praxi používají už několik desítek let a
vývojáři i administrátoři v&nbsp;tomto období postupně zjišťovali, jaké jsou
limity této architektury, a to jak z&nbsp;hlediska rychlosti vývoje, kvality
služby, její udržovatelnosti a rychlosti, tak i s&nbsp;ohledem na dostupnost
takových služeb. Postupně rostoucí složitost aplikací vedla ke vzniku nových
konceptů architektury služeb, které by (pochopitelně v&nbsp;ideálním případě)
měly odstranit největší problémy klasických monolitických služeb a současně
nepřinést mnoho problémů nových. Výsledný koncept, či možná lepe řečeno sada
konceptů, principů a idiomů, byl pojmenován <i>mikroslužby</i>; někdy se též
setkáme s&nbsp;označením <i>MOA</i> (<i>Microservice Oriented
Architecture</i>), což je vtípek vycházející ze zkratky <i>SOA</i> (<i>Service
Oriented Architecture)</i>).</p>

<a href="https://www.root.cz/obrazek/361140/"><img src="https://i.iinfo.cz/images/372/microservices1-7-prev.jpg" class="image-361140" alt="&#160;" width="305" height="270" /></a></p>
<p><i>Obrázek 4: Mnoho monolitických služeb se snaží nabídnout funkce, které
spolu prakticky vůbec nesouvisí.</i></p>

<p>Samotná základní myšlenka, na níž jsou mikroslužby postaveny, vlastně není
nijak objevná &ndash; celá aplikace se skládá z&nbsp;obecně většího počtu
několika služeb či dokonce několika desítek takzvaných mikroslužeb, přičemž
každá taková mikroslužba má přesně definovanou roli (většinou pouze jednu!),
běží v&nbsp;samostatném procesu (procesech) a komunikuje buď přímo či nepřímo
s&nbsp;ostatními mikroslužbami, typicky s&nbsp;využitím nějakého standardního
protokolu (REST API přes HTTP a HTTPS popř.&nbsp;nějaký protokol pro
messaging). Povšimněte si, že tato myšlenka skutečně není nijak nová, protože
na velmi podobných principech je založen i celý Unix s&nbsp;mnoha nástroji,
z&nbsp;nichž každý má přísně omezenou roli, ovšem tuto roli zvládá velmi dobře.
I samotná myšlenka komunikace mikroslužeb mezi sebou není nová &ndash; opět ji
podporuje Unix se svými rourami, pojmenovanými rourami, sockety a frontami
zpráv.  Mikroslužby tento lety prověřený koncept rozšiřují do systému
s&nbsp;větším množstvím počítačů a systémů (popř.&nbsp;kontejnerizovaných
systémů).</p>

<p>Důležité je, že každou z&nbsp;takto navržených mikroslužeb je možné vyvíjet,
nasazovat, aktualizovat a pochopitelně i restartovat samostatně,
v&nbsp;ideálním případě takovým způsobem, aby to nezasáhlo ostatní součásti
vyvíjené aplikace. I možnosti škálování jsou lepší díky <a
href="http://isict.wikidot.com/wiki:granularita-sluzeb">jemné granularitě
jednotlivých mikroslužeb</a>.</p>

<p>Dále se u mikroslužeb velmi často setkáme s&nbsp;použitím systémů pro
automatizaci jejich nasazení a aktualizaci, protože s&nbsp;rostoucím počtem
mikroslužeb se stává velmi neefektivní či dokonce nemožná jejich manuální
správa. Automatizace se pochopitelně týká i testování mikroslužeb, samotnému
vývoji integračních testů atd. Tomuto velmi důležitému tématu se budeme věnovat
v&nbsp;dalších částech tohoto seriálu.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Myšlenka ze světa Unixu: smart endpoints and dumb pipes</h2>

<p><a href="#k03">V&nbsp;předchozí kapitole</a> jsme se zmínili o tom, že
koncept mikroslužeb má mnoho společného s&nbsp;filozofií Unixových nástrojů.
Z&nbsp;Unixu pochází i další princip, který se uplatnil v&nbsp;mikroslužbách.
<a href="https://martinfowler.com/">Martin Fowler</a> tento princip nazval
&bdquo;smart endpoints and dumb pipes&ldquo;. Ve stručnosti se jedná o to, že
jednotlivé mikroslužby se samy interně starají o validaci vstupních dat,
aplikaci transformací dat, atd. Z&nbsp;pohledu uživatelů takto navržených
mikroslužeb se jedná o operace prováděné uvnitř mikroslužeb (ty jsou, nebo by
alespoň při jejich správném návrhu měly být, zapouzdřeny). Na druhé straně
zvolený komunikační mechanismus (<i>pipe</i>), což může být například protokol
HTTP, žádné podobné operace, jakými jsou validace či transformace dat,
neprovádí, podobně jako je v&nbsp;Unixu NEprovádí klasická roura (taktéž
<i>pipe</i>), která pouze zajišťuje přenos dat mezi dvojicí procesů. Díky tomu
jsou z&nbsp;celé architektury aplikace odstraněny zbytečně složité věci, které
se týkají jak používaných nástrojů, tak i knihoven, způsobů nasazení
mikroslužeb atd.</p>

<a href="https://www.root.cz/obrazek/361137/"><img src="https://i.iinfo.cz/images/372/microservices1-4-prev.png" class="image-361137" alt="&#160;" width="358" height="270" /></a>
<p><i>Obrázek 5: Jednotlivé mikroslužby mezi sebou mohou komunikovat například
s&nbsp;využitím protokolu HTTP (REST API), STOMP atd.</i></p>

<p><div class="rs-tip-major">Poznámka: jako příklad zbytečně
&bdquo;chytrého&ldquo; a tím pádem složitého komunikačního mechanismu uvádí
Martin Fowler <a
href="https://en.wikipedia.org/wiki/Enterprise_service_bus">Enterprise service
bus</a>, ovšem můžeme si představit například i <a
href="https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture">CORBA</a>
a podobné technologie. Ve skutečnosti se aplikace využívající ESB svým
principem nachází na půlce cesty mezi aplikacemi monolitickými na jedné straně
a mikroslužbami na straně druhé.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Decentralizace na všech úrovních, škálování</h2>

<p>Při použití mikroslužeb se taktéž do značné míry využívá konceptu
decentralizace. Samozřejmě se to týká především samotných mikroslužeb, ovšem
nesmíme zapomenout ani na ty mikroslužby, které potřebují využít nějakou
databázi. V&nbsp;ideálním případě jsou i databáze rozděleny a decentralizovány,
což ovšem není vždy lehký úkol, protože je nutné zajistit validitu i dostupnost
dat pro další mikroslužby.</p>

<p>Velkou předností mikroslužeb je jejich dobrá škálovatelnost, která plyne
z&nbsp;toho, že mikroslužby mají oproti monolitické aplikaci jemnější
granularitu. Rozdíly mezi naškálováním monolitické aplikace a aplikace založené
na mikroslužbách jsou znázorněny na následující dvojici obrázků.</p>

<a href="https://www.root.cz/obrazek/361138/"><img src="https://i.iinfo.cz/images/372/microservices1-5-prev.png" class="image-361138" alt="&#160;" width="370" height="168" /></a>
<p><i>Obrázek 6: V&nbsp;levé polovině je znázorněna monolitická služba,
v&nbsp;pravé polovině pak aplikace složená z&nbsp;několika mikroslužeb. Plocha
jednotlivých obrazců může například znázorňovat paměťové požadavky, potřebný
výpočetní výkon atd. atd.</i></p>

<a href="https://www.root.cz/obrazek/361139/"><img src="https://i.iinfo.cz/images/372/microservices1-6-prev.png" class="image-361139" alt="&#160;" width="270" height="270" /></a>
<p><i>Obrázek 7: V&nbsp;případě, že se nám podaří získat výkonnější počítač,
můžeme v&nbsp;případě monolitické služby provést její naškálování, ovšem jen
2&times; pro celou službu. Bílá plocha (výkon, paměť) zůstane nevyužita.
Naproti tomu mikroslužby můžeme &bdquo;naskládat&ldquo; s&nbsp;větší svobodou;
můžeme se například rozhodnout, která mikroslužba bude naškálována vícekrát a
kterou postačí mít v&nbsp;systému pouze jedenkrát. Bílá plocha je zde
pochopitelně menší.</i></p>




<p><a name="k07"></a></p>
<h2 id="k07">7. Automatizace při nasazování, testování a provozování mikroslužeb</h2>

<p>U mikroslužeb hrají velkou roli nástroje určené pro jejich nasazování,
testování, provozování a v&nbsp;neposlední řadě taktéž pro monitoring jejich
činnosti. Toto téma je velmi rozsáhlé a nabídka nástrojů velká (a jedná se
mnohdy o komplexní nástroje), proto se tomuto tématu budeme podrobněji věnovat
v&nbsp;dalších částech tohoto seriálu.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Další vybrané přednosti mikroslužeb</h2>

<p>Mezi další vybrané přednosti mikroslužeb patří například:</p>

<ol>

<li>Možnost souběžného vývoje jednotlivých částí aplikace různými týmy.</li>

<li>V podstatě automatické přijetí myšlenek, na nichž stojí CI/CD.</li>

<li>Samotné API mikroslužeb je většinou tak jednoduché, že ho vývojář dokáže
udržet v&nbsp;hlavě.</li>

<li>Taktéž je možné jednotlivé služby vyvíjet v&nbsp;různých programovacích
jazycích, což může být výhodné v&nbsp;případě, že aplikaci vyvíjí několik
týmů.</li>

<li>Samozřejmě sem spadá i mnohem lepší možnosti distribuce mikroslužeb mezi
více servery s&nbsp;možností replikace.</li>

<li>Nesmíme zapomenout ani na testování mikroslužeb, které může probíhat na
několika úrovních testování mikroslužeb sice není snadnější, než je tomu
v&nbsp;případě monolitické aplikace, ovšem může být (podobně jako samotný vývoj
mikroslužeb) vhodným způsobem škálováno.</li>

</ol>

<p><div class="rs-tip-major">Replikace a škálování lze samozřejmě provádět i u
monolitické služby, ovšem mnohdy se zbytečně mrhá systémovými prostředky i na
ty části monolitické služby, které jsou málo zatíženy a naškálování
nepotřebují. U mikroslužeb &ndash; pochopitelně pokud jsou správně navrženy
&ndash; je škálování, replikace, load balancing atd. možné provádět
s&nbsp;menšími softwarovými celky a tedy s&nbsp;větší flexibilitou. </div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. A pochopitelně i některé zápory</h2>

<p>V&nbsp;IT, ostatně podobně jako i v&nbsp;dalších oborech, platí Heinleinovo
pravidlo <i>nejízda</i> (&bdquo;není jídlo zdarma&ldquo;), proto mají i
mikroslužby mnoho záporů:</p>

<ol>

<li>Nemusí se jednat o dobré řešení pro menší vývojové týmy, protože se
vyžadují větší znalosti a více rolí, než při nasazení monolitických služeb na
(aplikační) servery.</li>

<li>Celý systém je fragmentovaný a je nutné zajistit spojení jednotlivých
částí, vytvořit systém pro vyhledávání služeb, jejich monitoringu atd.</li>

<li>Prozatím neexistence jednotných návrhových vzorů popř.&nbsp;standardů.</li>

<li>Pokud je systém špatně navržen, bude výpadek jedné mikroslužby znamenat
výpadek celého systému.</li>

<li>Úpravy a změny v&nbsp;rozhraní jednotlivých mikroslužeb je nutné nějakým
způsobem plánovat, verzovat atd., protože opět může dojít k&nbsp;velkým
výpadkům aplikace.</li>

<li>Komunikace mezi procesy (každá mikroslužba je jeden proces), které mnohdy
běží na jiném počítači, je pochopitelně pomalejší, než interprocesová
komunikace (což je přímé volání funkcí a metod).</li>

<li>Celý systém je nutné monitorovat, aby se předcházelo nežádoucím výpadkům,
zejména pokud je nějaká část systému kritická (SFoF &ndash; single point of
failure).</li>

</ol>

<p>Příklad výpadku systému založeného na mikroslužbách a současně i na
cloudovém řešení: <a
href="https://medium.com/netflix-techblog/a-closer-look-at-the-christmas-eve-outage-d7b409a529ee">https://medium.com/netflix-techblog/a-closer-look-at-the-christmas-eve-outage-d7b409a529ee</a>.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Synchronní vs.&nbsp;asynchronní volání</h2>

<p><i>&bdquo;Since cloud-based applications are also Internet-based
applications, many developers new to the cloud scene are intrinsically
approaching each service design as simply micro-web-servers. Since the public
interface for an API level service uses REST with JSON packets, it’s reasonable
to utilize this format for each of the internal services, too.&ldquo;</i></p>

<p>Ne vždy je vhodné používat REST API pro komunikaci mezi všemi mikroslužbami.
Typicky například message brokery používají vlastní efektivnější protokoly,
ovšem i v&nbsp;dalších situacích je dobré se zamyslet, zda protokol založený na
principu <i>dotaz-odpověď</i> je to nejlepší v&nbsp;daném okamžiku a pro daný
problém. Podobně je možné JSON nahradit například BSONem, protocol buffers
atd., podle konkrétní situace.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Message brokery</h2>

<p>V&nbsp;souvislosti s&nbsp;asynchronním voláním popř.&nbsp;vůbec
s&nbsp;asynchronním zpracováním úloh, se musíme zmínit i o <i>message
brokerech</i>, které se v&nbsp;architektuře s&nbsp;mikroslužbami pochopitelně
taktéž uplatní. Tomuto tématu se podrobněji věnujeme <a
href="https://www.root.cz/serialy/message-brokery/">v&nbsp;samostatném
seriálu</a>, v&nbsp;němž jsme si již popsali některé často používané
implementace message brokerů, zejména projekty <a
href="https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/">Redis
Queue</a>, <a
href="https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python/">Celery</a>,
<a
href="https://www.root.cz/clanky/rabbitmq-jedna-z-nejuspesnejsich-implementaci-brokera/">RabbitMQ</a>
a <a
href="https://www.root.cz/clanky/apache-activemq-dalsi-system-implementujici-message-brokera/">ApacheMQ</a>
(popř.&nbsp;jeho novější variantu Artemis). Kromě klasických message brokerů se
setkáme i s&nbsp;použitím tzv.&nbsp;streamingu podporovaného systémem <a
href="https://www.root.cz/clanky/nats-streaming-server/">NATS</a> a
pravděpodobně nejpopulárnějším nástrojem v&nbsp;této oblasti &ndash; <i>Apache
Kafkou</i>.</p>

<a href="https://www.root.cz/obrazek/348765/"><img src="https://i.iinfo.cz/images/176/rabbitmq1-4-prev.png" class="image-348765" alt="&#160;" width="370" height="158"></a>
<p><i>Obrázek 8: Interní konfigurovatelná struktura systému RabbitMQ. Jak
producenti, tak i konzumenti mohou být realizováni formou mikroslužeb.</i></p>

<p>S&nbsp;message brokery se komunikuje s&nbsp;využitím několika široce
podporovaných protokolů, zejména protokolu STOMP (<i>Streaming Text Oriented
Messaging Protocol</i>), MQTT (<i>MQTT is a machine-to-machine connectivity
protocol</i>) a AMQP (<i>Advanced Message Queuing Protocol</i>).</p>

<a href="https://www.root.cz/obrazek/349581/"><img src="https://i.iinfo.cz/images/415/rabbitmq2-1-prev.png" class="image-349581" alt="&#160;" width="370" height="215"></a>
<p><i>Obrázek 9: Jedna z možných konfigurací rozvětvení. První směrovač
(exchange) zkopíruje přijatou zprávu do tří front. Poslední (čtvrtá) fronta
není v tomto případě nijak využita – rozvětvení se provádí jen do předem
<strong>vybraných</strong> front.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Časté omyly, kterých se vývojáři dopouští (nejenom) při tvorbě mikroslužeb</h2>

<p>Při vývoji mikroslužeb se samozřejmě nevyhneme mnoha omylům, které mohou
zapříčinit například problémy s&nbsp;výkonností popř.&nbsp;dokonce
nekonzistencí dat či časté výpadky celé aplikace. Velmi pěkně jsou některé
omyly shrnuty ve videu <a href="https://www.youtube.com/watch?v=X0tjziAQfNQ">10
Tips for failing badly at Microservices by David Schmitz</a> a postupně se jimi
budeme zabývat v&nbsp;navazujících částech tohoto seriálu. V&nbsp;dalších
kapitolách se zmíním o některých základních problémech, s&nbsp;nimiž se setkáme
již na samotném začátku návrhu architektury aplikace. Tyto problémy souvisí se
dvěma důležitými prvky, bez nichž se aplikace většinou neobejdou &ndash;
počítačová síť a databáze (či obecněji datová úložiště).</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Síť jakožto problematický prvek</h2>

<p>Mnoho omylů při návrhu a nasazování (nejenom) mikroslužeb vychází ze
samotného principu konstrukce a fungování počítačových sítí. Z&nbsp;hlediska
návrhu aplikace je síť &ndash; a velká (kritická) závislost celé architektury
na síti &ndash; skutečně velmi problematická, protože architektura aplikace
založené na mikroslužbách spadá do kategorie distribuovaných aplikací. Mezi
velmi časté omyly patří například následující předpoklady, které shrnul L.
Peter Deutsch ještě v&nbsp;dobách existence společnosti Sun Microsystems (ani
jeden z&nbsp;těchto předpokladů pochopitelně neplatí):</p>

<ol>
<li>Síť je spolehlivá</li>
<li>Zpoždění při přenosu zpráv je nulové či velmi nízké</li>
<li>Přenosová kapacita je nekonečná či dostatečně vysoká</li>
<li>Síť je bezpečná</li>
<li>Topologie sítě se nemění</li>
<li>O síť se stará pouze jeden (dohledatelný) administrátor</li>
<li>Cena přenosu dat je nulová či prakticky nulová</li>
<li>Síť je homogenní</li>
</ol>

<p>Největší problém &ndash; alespoň podle mého názoru &ndash; spočívá
v&nbsp;tom, že výše uvedená (chybná) tvrzení někdy <i>mohou (částečně)
platit</i>, typicky ve chvíli, kdy vývojáři mají k&nbsp;dispozici kvalitní
vybavení a vyvíjí aplikaci na lokální síti. Ovšem v&nbsp;reálném provozu se
dříve či později všechny nepěkné vlastnosti sítě ukážou (většinou v&nbsp;ten
nejnevhodnější okamžik).</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Špatné uplatnění konceptu mikroslužeb</h2>

<p>Někdy se setkáme i s&nbsp;kombinací komplexnosti architektury založené na
mikroslužbách s&nbsp;nepružností a &bdquo;křehkostí&ldquo; monolitických
služeb. Ve výše zmíněném videu je ukázán možná velmi typický příklad &ndash;
aplikace sice používá mikroslužby, ale samotné UI je monolitické;
v&nbsp;podstatě jediná dynamicky generovaná stránka (dnes populární SPA).
Problémem zde je především fakt, že mnoho požadavků na změnu v&nbsp;UI (přidání
nějakého atributu) je nutné nějakým způsobem reflektovat i
v&nbsp;mikroslužbách, ale nemusí být zcela patrné, ve kterých.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Sdílení databáze mezi mikroslužbami</h2>

<p>V&nbsp;případě, že je v&nbsp;aplikaci založené na mikroslužbách použita
databáze, která je sdílená mezi jednotlivými mikroslužbami, může se stát, že
tento návrh povede ke špatné funkci aplikace jako celku, a to například
z&nbsp;hlediska škálovatelnosti, dostupnosti či stability. Jádro problému
tohoto návrhu totiž spočívá v&nbsp;tom, že se porušil jeden z&nbsp;principů
mikroslužeb &ndash; zajistit co nejmenší závislosti mezi jednotlivými
mikroslužbami. A to, že dvě či více mikroslužeb přistupuje ke stejné databázi,
je pochopitelně velká závislost. Při snaze o rozdělení databáze na menší celky
je vždy důležité si uvědomit, která mikroslužba je skutečným vlastníkem onoho
menšího celku (zákazníci, prodávané výrobky, sklad, logy, B2B transakce
atd.)</p>

<p><div class="rs-tip-major">Poznámka: zajímavé je, že někteří autoři dokonce
uvádí <i>shared-database</i> jako jeden <a
href="https://microservices.io/patterns/data/shared-database.html">z&nbsp;návrhových
vzorů mikroslužeb</a>. Obecně se však skutečně nejedná o dobrý návrh.</div></p>

<p><div class="rs-tip-major">Poznámka 2: termínem <i>databáze</i> zde nejsou
myšleny jen relační databáze, ale i dokumentové či objektové databáze, služby
typu S3 atd. atd.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. SOA versus mikroslužby</h2>

<p>Ještě před vznikem konceptu mikroslužeb se začaly používat aplikace navržené
s&nbsp;využitím metodologie SOA neboli <i>Service Oriented Architecture</i>. I
metodologie SOA je založena na rozložení aplikace na jednotlivé komponenty,
které by měly být na sobě nezávislé a měly by spolu komunikovat. A i zde se
doporučuje jednotlivé komponenty navrhovat tak, aby byly v&nbsp;ideálním
případě bezstavové, což zjednodušuje například škálování, náhradu komponenty
při jejím výpadku apod. Na mikroslužby &ndash; někdo je v&nbsp;tomto kontextu
nazývá MOA (<i>Microservices Oriented Architecture</i>) &ndash; se můžeme dívat
jako na jednu z&nbsp;extrémnějších (v&nbsp;pozitivním slova smyslu) variant
metodologie SOA, kdy se klade ještě větší důraz na rozdělení architektury na
menší části a taktéž na to, aby bylo možné jednotlivé části vyvíjet, nasazovat
a testovat nezávisle na ostatních částech.</p>

<p>Navíc se zjednodušila i samotná metodika, protože v&nbsp;SOA jsou definovány
čtyři typy služeb (<i>business</i>, <i>enterprise</i>, <i>application</i> a
<i>infrastructure</i>), zatímco u mikroslužeb se většinou rozlišují jen dva
typy služeb (<i>functional</i> a <i>infrastructure</i>), popř.&nbsp;se takové
rozlišení ani nepoužívá.</p>

<p><div class="rs-tip-major">Poznámka: názvy jednotlivých typů služeb
nepřekládám schválně, protože ne všichni autoři a programátoři se shodnou na
stejných českých termínech.</div></p>

<p>Pokud se podíváme na architekturu typické SOA aplikace a aplikace založené
na mikroslužbách, můžeme vidět několik rozdílů ve způsobu nasazení jednotlivých
komponent. U mikroslužeb typicky odpadá použití aplikačního serveru, protože je
to zbytečně &bdquo;těžkotonážní&ldquo; nástroj:</p>

<table>
<tr><th>SOA</th><th>Mikroslužby</th></tr>
<tr><td>Služba a její API</td><td>&nbsp;</td></tr>
<tr><td>Aplikace</td><td>&nbsp;</td></tr>
<tr><td>Aplikační server</td><td>Služba a její API</td></tr>
<tr><td>Prostředí pro běh (JVM atd.)</td><td>Prostředí pro běh</td></tr>
<tr><td>Operační systém</td><td>Operační systém</td></tr>
<tr><td>Hypervisor</td><td>Hypervisor</td></tr>
<tr><td>Datové úložiště</td><td>Datové úložiště</td></tr>
<tr><td>Síťové rozhraní</td><td>Síťové rozhraní</td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Rozdíly v&nbsp;přístupu SOA a MSA</h2>

<p>Největší rozdíly mezi koncepty SOA a MSA však nalezneme v&nbsp;přístupu
(možná můžeme říci že dokonce v&nbsp;ideologii), které jsou vývojovými týmy
dodržovány. Ostatně to je patrné i z&nbsp;následující tabulky, v&nbsp;níž jsou
některé rozdíly vypsány:</p>

<table>
<tr><th>SOA</th><th>MSA</th></tr>
<tr><td>spíše hrubší granularita služeb (&bdquo;mikromonolity&ldquo;)</td><td>jemnější granularita služeb</td></tr>
<tr><td>zaměření na standardizaci procesů, nástrojů atd.</td><td>zaměření na spolupráci lidí a možnost svobodného výběru technologií</td></tr>
<tr><td>použití ESB (Enterprise Service Bus)</td><td>jednoduché systémy pro posílání zpráv</td></tr>
<tr><td>podpora většího množství protokolů pro přenos zpráv</td><td>zaměření na použití jednoduchých protokolů (HTTP, STOMP, ...)</td></tr>
<tr><td>založeno na jednom programovacím jazyku a sadě knihoven</td><td>volnost výběru jazyka i knihoven podle potřeby</td></tr>
<tr><td>běh ve více vláknech</td><td>typicky běh v&nbsp;jednom vláknu s non-locking I/O, použití zelených vláken</td></tr>
<tr><td>služby dělené podle business požadavků</td><td>dělení spíše podle kontextu</td></tr>
<tr><td>jediná databáze pro celou aplikaci</td><td>každá mikroslužba používá vlastní datové úložiště</td></tr>
<tr><td>požadavek na změnu: úprava (mikro)monolitu</td><td>požadavek na změnu: vytvoření nové mikroslužby</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se postupně mění i svět
SOA, který se tak pomalu (alespoň v&nbsp;některých oblastech) přibližuje
konceptu mikroslužeb.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>Vision of a microservice revolution<br />
<a href="https://www.jolie-lang.org/vision.html">https://www.jolie-lang.org/vision.html</a>
</li>

<li>Microservices : a definition of this new architectural term<br />
<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a>
</li>

<li>Mikroslužby<br />
<a href="http://voho.eu/wiki/mikrosluzba/">http://voho.eu/wiki/mikrosluzba/</a>
</li>

<li>Microservice Prerequisites<br />
<a href="https://martinfowler.com/bliki/MicroservicePrerequisites.html">https://martinfowler.com/bliki/MicroservicePrerequisites.html</a>
</li>

<li>Microservices in Practice, Part 1: Reality Check and Service Design (vyžaduje registraci)<br />
<a href="https://ieeexplore.ieee.org/document/7819415">https://ieeexplore.ieee.org/document/7819415</a>
</li>

<li>Microservice Trade-Offs<br />
<a href="https://www.martinfowler.com/articles/microservice-trade-offs.html">https://www.martinfowler.com/articles/microservice-trade-offs.html</a>
</li>

<li>What is a microservice? (from a linguistic point of view)<br />
<a href="http://claudioguidi.blogspot.com/2017/03/what-microservice-from-linguisitc.html">http://claudioguidi.blogspot.com/2017/03/what-microservice-from-linguisitc.html</a>
</li>

<li>Microservices (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Microservices">https://en.wikipedia.org/wiki/Microservices</a>
</li>

<li>Fallacies of distributed computing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing">https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing</a>
</li>

<li>Service (systems architecture)<br />
<a href="https://en.wikipedia.org/wiki/Service_(systems_architecture)">https://en.wikipedia.org/wiki/Service_(systems_architecture)</a>
</li>

<li>Microservices in a Nutshell<br />
<a href="https://www.thoughtworks.com/insights/blog/microservices-nutshell">https://www.thoughtworks.com/insights/blog/microservices-nutshell</a>
</li>

<li>What is Microservices?<br />
<a href="https://smartbear.com/solutions/microservices/">https://smartbear.com/solutions/microservices/</a>
</li>

<li>Mastering Chaos - A Netflix Guide to Microservices<br />
<a href="https://www.youtube.com/watch?v=CZ3wIuvmHeM&t=17s">https://www.youtube.com/watch?v=CZ3wIuvmHeM&amp;t=17s</a>
</li>

<li>Messaging in Microservice Architecture<br />
<a href="https://www.youtube.com/watch?v=MkQWQ5f-SEY">https://www.youtube.com/watch?v=MkQWQ5f-SEY</a>
</li>

<li>Pattern: Messaging<br />
<a href="https://microservices.io/patterns/communication-style/messaging.html">https://microservices.io/patterns/communication-style/messaging.html</a>
</li>

<li>Microservices Messaging: Why REST Isn’t Always the Best Choice<br />
<a href="https://blog.codeship.com/microservices-messaging-rest-isnt-always-best-choice/">https://blog.codeship.com/microservices-messaging-rest-isnt-always-best-choice/</a>
</li>

<li>Protocol buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Apache Avro!<br />
<a href="https://avro.apache.org/">https://avro.apache.org/</a>
</li>

<li>REST vs Messaging for Microservices – Which One is Best?<br />
<a href="https://solace.com/blog/experience-awesomeness-event-driven-microservices/">https://solace.com/blog/experience-awesomeness-event-driven-microservices/</a>
</li>

<li>How did we end up here?<br />
<a href="https://gotocon.com/dl/goto-chicago-2015/slides/MartinThompson_and_ToddMontgomery_HowDidWeEndUpHere.pdf">https://gotocon.com/dl/goto-chicago-2015/slides/MartinThompson_and_ToddMontgomery_HowDidWeEndUpHere.pdf</a>
</li>

<li>Scaling microservices with message queues to handle data bursts<br />
<a href="https://read.acloud.guru/scaling-microservices-with-message-queue-2d389be5b139">https://read.acloud.guru/scaling-microservices-with-message-queue-2d389be5b139</a>
</li>

<li>Microservices: What are smart endpoints and dumb pipes?<br />
<a href="https://stackoverflow.com/questions/26616962/microservices-what-are-smart-endpoints-and-dumb-pipes">https://stackoverflow.com/questions/26616962/microservices-what-are-smart-endpoints-and-dumb-pipes</a>
</li>

<li>Common Object Request Broker Architecture<br />
<a href="https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture">https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture</a>
</li>

<li>Enterprise service bus<br />
<a href="https://en.wikipedia.org/wiki/Enterprise_service_bus">https://en.wikipedia.org/wiki/Enterprise_service_bus</a>
</li>

<li>Microservices vs SOA : What’s the Difference<br />
<a href="https://www.edureka.co/blog/microservices-vs-soa/">https://www.edureka.co/blog/microservices-vs-soa/</a>
</li>

<li>Pravda o SOA<br />
<a href="https://businessworld.cz/reseni-a-realizace/pravda-o-soa-2980">https://businessworld.cz/reseni-a-realizace/pravda-o-soa-2980</a>
</li>

<li>Is it a good idea for Microservices to share a common database?<br />
<a href="https://www.quora.com/Is-it-a-good-idea-for-Microservices-to-share-a-common-database">https://www.quora.com/Is-it-a-good-idea-for-Microservices-to-share-a-common-database</a>
</li>

<li>Pattern: Shared database<br />
<a href="https://microservices.io/patterns/data/shared-database.html">https://microservices.io/patterns/data/shared-database.html</a>
</li>

<li>Is a Shared Database in Microservices Actually an Anti-pattern?<br />
<a href="https://hackernoon.com/is-shared-database-in-microservices-actually-anti-pattern-8cc2536adfe4">https://hackernoon.com/is-shared-database-in-microservices-actually-anti-pattern-8cc2536adfe4</a>
</li>

<li>Shared database in microservices is a problem, yep<br />
<a href="https://ayende.com/blog/186914-A/shared-database-in-microservices-is-a-problem-yep">https://ayende.com/blog/186914-A/shared-database-in-microservices-is-a-problem-yep</a>
</li>

<li>Microservices with shared database? using multiple ORM's?<br />
<a href="https://stackoverflow.com/questions/43612866/microservices-with-shared-database-using-multiple-orms">https://stackoverflow.com/questions/43612866/microservices-with-shared-database-using-multiple-orms</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

