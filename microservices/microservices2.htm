<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Microservices 2</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Microservices 2</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Některé možné návrhy architektury aplikací založených na mikroslužbách</a></p>
<p><a href="#k02">*** 2. Distribuovaná datová úložiště</a></p>
<p><a href="#k03">*** 3. Příklad databáze v&nbsp;monolitické aplikaci s&nbsp;implementací e-shopu</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Některé možné návrhy architektury aplikací založených na mikroslužbách</h2>

<p>Cílem návrhu architektury aplikace založené na mikroslužbách je co největší oddělení jednotlivých mikroslužeb. Mikroslužby by v&nbsp;naprosté většině případů neměly sdílet databáze a komunikovat by spolu měly pouze přes API volané přes síťové protokoly (nikoli přímo, jak je to možné při běhu na jediném počítači a operačním systému). Ovšem ještě lepší bývá stav, kdy spolu služby raději vůbec nekomunikují :-), přesněji řečeno když komunikují přes nějakého prostředníka, kterým může být message bus, message broker, systém pro správu událostí atd.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Distribuovaná datová úložiště</h2>

<p>V&nbsp;předchozí kapitole jsme si řekli, že by jednotlivé služby neměly sdílet společnou databázi. Tento požadavek je vlastně pochopitelný, protože se snažíme služby od sebe oddělit, a to jak z&nbsp;hlediska architektury celé aplikace, tak i z&nbsp;pohledu vývojářů &ndash; prakticky totiž mohou jednotlivé mikroslužby vyvíjet oddělené týmy, které se musí domluvit na API, ovšem nikoli již na interních záležitostech a logice. A právě sem spadá i databáze popř.&nbsp;obecněji datové úložiště &ndash; mnoho tabulek a jejich sloupců (pokud se budeme držet relačních databází) nesouvisí s&nbsp;API služby a s&nbsp;její požadovanou vnější funkcionalitou.</p>

<p>Přístup k&nbsp;databázím se ve světě mikroslužeb skutečně dost podstatně odlišuje od světa monolitických aplikací, a již na začátku je nutné upozornit na to, že mnohé vlastnosti databází, která běžně využíváme (ACID, ...) nebude u mikroslužeb automagicky splněna a mnohdy se programátoři musí postarat, aby byla příslušná vlastnost databáze skutečně dodržena.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Příklad databáze v&nbsp;monolitické aplikaci s&nbsp;implementací e-shopu</h2>

<p>V&nbsp;tom nejjednodušším případě uvažujme o tom, že databáze bude obsahovat pouhé dvě tabulky nazvané <strong>ORDERS</strong> a <strong>CUSTOMERS</strong> (ve skutečnosti se bude muset pracovat s&nbsp;více tabulkami, například seznamem zboží pro datý <strong>ORDER_ID</strong>, historií nákupů pro <strong>CUSTOMER_ID</strong> atd.). Tyto tabulky mohou (při značném zjednodušení) vypadat například takto:</p>

<pre>
CREATE TABLE <strong>ORDERS</strong>(
    ID            INT NOT NULL,
    DATE          DATETIME,
    CUSTOMER_ID   INT NOT NULL references CUSTOMERS(ID),
    TOTAL         DECIMAL(8,2),
    ...
    ...
    ...
    PRIMARY KEY (ID)
);
</pre>

<p>a:</p>

<pre>
CREATE TABLE <strong>CUSTOMERS</strong>(
    ID            INT NOT NULL,
    NAME          VARCHAR (20) NOT NULL,
    CREDIT_LIMIT  DECIMAL(8,2),
    ...
    ...
    ...
    PRIMARY KEY (ID)
);
</pre>

<p><div class="rs-tip-major">Poznámka: příklad, který si zde popisujeme, je podobný příkladu, jenž zmiňuje Chris Richardson ve svých přednáškách. Jako u každého umělého příkladu se samozřejmě jedná o značné zjednodušení, které sice ukazuje některé vlastnosti monolitických aplikací i mikroslužeb, ovšem kvůli malé složitosti se zde příliš neukazuje, proč začaly být mikroslužby v&nbsp;některých oborech IT tak populární.</a></div></p>

<p>Při objednávce zboží je možné nad operacemi v&nbsp;databázi provádět všechny potřebné kontroly, a to většinou naprosto triviálním způsobem. Například můžeme zaručit, že se objednávka podaří jen ve chvíli, kdy bude platit:</p>

<pre>
sum(ORDERS.TOTAL) &lt;= CUSTOMER.CREDIT_LIMIT
</pre>

<p><div class="rs-tip-major">Poznámka: samozřejmě s&nbsp;příslušnými vazbami přes ORDER.ID a CUSTOMER.ID atd.</div></p>

<p>To pochopitelně není vše, protože pokud celou operaci objednávky uzavřeme do transakce, zaručí výše zmíněná kontrola automatický rollback celé transakce, pokud se zákazník bude snažit objednat zboží, jehož celková cena přesahuje jeho kredit. Jak kontrolu, tak i transakci lze přitom v&nbsp;monolitické aplikaci naprogramovat doslova na několika řádcích kódu. Dále je možné velmi snadno zaručit automatickou serializaci transakcí pro jednoho zákazníka, tj.&nbsp;vyloučí se situace, kdy se někdo bude snažit provést dva nákupy současně, přičemž cena každého nákupu zvlášť se sice vejde do kreditu, ale oba nákupy již finanční možnosti zákazníka převyšují. A nakonec &ndash; opět díky transakcím je stav databáze vždy konzistentní, protože se objednávka buď provede (s&nbsp;odečtením kreditu) nebo neprovede, což se například projeví úpravou <strong>ORDERS.STATUS</strong> na hodnotu &bdquo;denied&ldquo;. Nebude zde nutné řešit speciální stavy typu &bdquo;pending&ldquo; atd.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Databáze v&nbsp;aplikaci postavené na mikroslužbách</h2>

<p>Pokud budeme navrhovat aplikaci s&nbsp;e-shopem postavenou na mikroslužbách, může vést tento návrh k&nbsp;tomu, že se vytvoří (kromě dalšího) i služby nazvané například <strong>customer service</strong> a <strong>order service</strong>. Každá z&nbsp;těchto mikroslužeb bude mít i vlastní databázi. Konkrétně v&nbsp;případě první služby bude tato databáze obsahovat tabulku <strong>ORDERS</strong> (+ případné další tabulky) a druhá služba tabulku <strong>CUSTOMERS</strong>. Samotné &bdquo;rozseknutí&ldquo; databáze na dvě samostatné databáze však vede k&nbsp;tomu, že ztratíme všechny vlastnosti ACIDu poskytované vlastním databázovým systémem a pokud ACID (či některou z&nbsp;jeho čtyř vlastností) budeme potřebovat, musíme ho nějakým způsobem reimplementovat.</p>

<p>V&nbsp;klasických distribuovaných systémech se pro tento účel používá dvoufázový commit neboli <i>two-phase commit</i> (<i>2PC</i>). Teoreticky je možné dvoufázový commit použít i u aplikace založené na mikroslužbách, ale tento koncept se v&nbsp;praxi příliš nedoporučuje používat, neboť se tím zvyšuje počet zpráv posílaných mezi jednotlivými mikroslužbami, služby jsou více propojené, než je většinou akceptovatelné, a navíc se tím ztrácí i požadavek na to, aby byla aplikace funkční i při (krátkodobém či střednědobém) výpadku jednotlivých uzlů; zde konkrétně dojde k&nbsp;problému při výpadku uzlu, který celou transakci musí koordinovat. A navíc, což je praktičtější problém, mnohé NoSQL databáze, brokery atd. koncept 2PC prozatím nepodporují.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Microservices - Not a free lunch!<br />
<a href="http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html">http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html</a>
</li>

<li>Microservices, Monoliths, and NoOps<br />
<a href="http://blog.arungupta.me/microservices-monoliths-noops/">http://blog.arungupta.me/microservices-monoliths-noops/</a>
</li>

<li>Microservice Design Patterns<br />
<a href="http://blog.arungupta.me/microservice-design-patterns/">http://blog.arungupta.me/microservice-design-patterns/</a>
</li>

<li>Vision of a microservice revolution<br />
<a href="https://www.jolie-lang.org/vision.html">https://www.jolie-lang.org/vision.html</a>
</li>

<li>Microservices : a definition of this new architectural term<br />
<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a>
</li>

<li>Mikroslužby<br />
<a href="http://voho.eu/wiki/mikrosluzba/">http://voho.eu/wiki/mikrosluzba/</a>
</li>

<li>Microservice Prerequisites<br />
<a href="https://martinfowler.com/bliki/MicroservicePrerequisites.html">https://martinfowler.com/bliki/MicroservicePrerequisites.html</a>
</li>

<li>Microservices in Practice, Part 1: Reality Check and Service Design (vyžaduje registraci)<br />
<a href="https://ieeexplore.ieee.org/document/7819415">https://ieeexplore.ieee.org/document/7819415</a>
</li>

<li>Microservice Trade-Offs<br />
<a href="https://www.martinfowler.com/articles/microservice-trade-offs.html">https://www.martinfowler.com/articles/microservice-trade-offs.html</a>
</li>

<li>What is a microservice? (from a linguistic point of view)<br />
<a href="http://claudioguidi.blogspot.com/2017/03/what-microservice-from-linguisitc.html">http://claudioguidi.blogspot.com/2017/03/what-microservice-from-linguisitc.html</a>
</li>

<li>Microservices (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Microservices">https://en.wikipedia.org/wiki/Microservices</a>
</li>

<li>Fallacies of distributed computing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing">https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing</a>
</li>

<li>Service (systems architecture)<br />
<a href="https://en.wikipedia.org/wiki/Service_(systems_architecture)">https://en.wikipedia.org/wiki/Service_(systems_architecture)</a>
</li>

<li>Microservices in a Nutshell<br />
<a href="https://www.thoughtworks.com/insights/blog/microservices-nutshell">https://www.thoughtworks.com/insights/blog/microservices-nutshell</a>
</li>

<li>What is Microservices?<br />
<a href="https://smartbear.com/solutions/microservices/">https://smartbear.com/solutions/microservices/</a>
</li>

<li>Mastering Chaos - A Netflix Guide to Microservices<br />
<a href="https://www.youtube.com/watch?v=CZ3wIuvmHeM&t=17s">https://www.youtube.com/watch?v=CZ3wIuvmHeM&amp;t=17s</a>
</li>

<li>Messaging in Microservice Architecture<br />
<a href="https://www.youtube.com/watch?v=MkQWQ5f-SEY">https://www.youtube.com/watch?v=MkQWQ5f-SEY</a>
</li>

<li>Pattern: Messaging<br />
<a href="https://microservices.io/patterns/communication-style/messaging.html">https://microservices.io/patterns/communication-style/messaging.html</a>
</li>

<li>Microservices Messaging: Why REST Isn’t Always the Best Choice<br />
<a href="https://blog.codeship.com/microservices-messaging-rest-isnt-always-best-choice/">https://blog.codeship.com/microservices-messaging-rest-isnt-always-best-choice/</a>
</li>

<li>Protocol buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Apache Avro!<br />
<a href="https://avro.apache.org/">https://avro.apache.org/</a>
</li>

<li>REST vs Messaging for Microservices – Which One is Best?<br />
<a href="https://solace.com/blog/experience-awesomeness-event-driven-microservices/">https://solace.com/blog/experience-awesomeness-event-driven-microservices/</a>
</li>

<li>How did we end up here?<br />
<a href="https://gotocon.com/dl/goto-chicago-2015/slides/MartinThompson_and_ToddMontgomery_HowDidWeEndUpHere.pdf">https://gotocon.com/dl/goto-chicago-2015/slides/MartinThompson_and_ToddMontgomery_HowDidWeEndUpHere.pdf</a>
</li>

<li>Scaling microservices with message queues to handle data bursts<br />
<a href="https://read.acloud.guru/scaling-microservices-with-message-queue-2d389be5b139">https://read.acloud.guru/scaling-microservices-with-message-queue-2d389be5b139</a>
</li>

<li>Microservices: What are smart endpoints and dumb pipes?<br />
<a href="https://stackoverflow.com/questions/26616962/microservices-what-are-smart-endpoints-and-dumb-pipes">https://stackoverflow.com/questions/26616962/microservices-what-are-smart-endpoints-and-dumb-pipes</a>
</li>

<li>Common Object Request Broker Architecture<br />
<a href="https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture">https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture</a>
</li>

<li>Enterprise service bus<br />
<a href="https://en.wikipedia.org/wiki/Enterprise_service_bus">https://en.wikipedia.org/wiki/Enterprise_service_bus</a>
</li>

<li>Microservices vs SOA : What’s the Difference<br />
<a href="https://www.edureka.co/blog/microservices-vs-soa/">https://www.edureka.co/blog/microservices-vs-soa/</a>
</li>

<li>Pravda o SOA<br />
<a href="https://businessworld.cz/reseni-a-realizace/pravda-o-soa-2980">https://businessworld.cz/reseni-a-realizace/pravda-o-soa-2980</a>
</li>

<li>Is it a good idea for Microservices to share a common database?<br />
<a href="https://www.quora.com/Is-it-a-good-idea-for-Microservices-to-share-a-common-database">https://www.quora.com/Is-it-a-good-idea-for-Microservices-to-share-a-common-database</a>
</li>

<li>Pattern: Shared database<br />
<a href="https://microservices.io/patterns/data/shared-database.html">https://microservices.io/patterns/data/shared-database.html</a>
</li>

<li>Is a Shared Database in Microservices Actually an Anti-pattern?<br />
<a href="https://hackernoon.com/is-shared-database-in-microservices-actually-anti-pattern-8cc2536adfe4">https://hackernoon.com/is-shared-database-in-microservices-actually-anti-pattern-8cc2536adfe4</a>
</li>

<li>Shared database in microservices is a problem, yep<br />
<a href="https://ayende.com/blog/186914-A/shared-database-in-microservices-is-a-problem-yep">https://ayende.com/blog/186914-A/shared-database-in-microservices-is-a-problem-yep</a>
</li>

<li>Microservices with shared database? using multiple ORM's?<br />
<a href="https://stackoverflow.com/questions/43612866/microservices-with-shared-database-using-multiple-orms">https://stackoverflow.com/questions/43612866/microservices-with-shared-database-using-multiple-orms</a>
</li>

<li>Examples of microservice architecture<br />
<a href="https://www.coursera.org/lecture/intro-ibm-microservices/examples-of-microservice-architecture-JXOFj">https://www.coursera.org/lecture/intro-ibm-microservices/examples-of-microservice-architecture-JXOFj</a>
</li>

<li>Microservices: The Rise Of Kafka<br />
<a href="https://movio.co/blog/microservices-rise-kafka/">https://movio.co/blog/microservices-rise-kafka/</a>
</li>

<li>Building a Microservices Ecosystem with Kafka Streams and KSQL<br />
<a href="https://www.confluent.io/blog/building-a-microservices-ecosystem-with-kafka-streams-and-ksql/">https://www.confluent.io/blog/building-a-microservices-ecosystem-with-kafka-streams-and-ksql/</a>
</li>

<li>An introduction to Apache Kafka and microservices communication<br />
<a href="https://medium.com/@ulymarins/an-introduction-to-apache-kafka-and-microservices-communication-bf0a0966d63">https://medium.com/@ulymarins/an-introduction-to-apache-kafka-and-microservices-communication-bf0a0966d63</a>
</li>

<li>ACID (computer science)<br />
<a href="https://en.wikipedia.org/wiki/ACID_(computer_science)">https://en.wikipedia.org/wiki/ACID_(computer_science)</a>
</li>

<li>Distributed transaction<br />
<a href="https://en.wikipedia.org/wiki/Distributed_transaction">https://en.wikipedia.org/wiki/Distributed_transaction</a>
</li>

<li>Two-phase commit protocol<br />
<a href="https://en.wikipedia.org/wiki/Two-phase_commit_protocol">https://en.wikipedia.org/wiki/Two-phase_commit_protocol</a>
</li>

<li>Why is 2-phase commit not suitable for a microservices architecture?<br />
<a href="https://stackoverflow.com/questions/55249656/why-is-2-phase-commit-not-suitable-for-a-microservices-architecture">https://stackoverflow.com/questions/55249656/why-is-2-phase-commit-not-suitable-for-a-microservices-architecture</a>
</li>

<li>4 reasons why microservices resonate<br />
<a href="https://www.oreilly.com/ideas/4-reasons-why-microservices-resonate">https://www.oreilly.com/ideas/4-reasons-why-microservices-resonate</a>
</li>

<li>Pattern: Microservice Architecture<br />
<a href="https://microservices.io/patterns/microservices.html">https://microservices.io/patterns/microservices.html</a>
</li>

<li>Pattern: Monolithic Architecture<br />
<a href="https://microservices.io/patterns/monolithic.html">https://microservices.io/patterns/monolithic.html</a>
</li>

<li>Pattern: Saga<br />
<a href="https://microservices.io/patterns/data/saga.html">https://microservices.io/patterns/data/saga.html</a>
</li>

<li>Pattern: Database per service<br />
<a href="https://microservices.io/patterns/data/database-per-service.html">https://microservices.io/patterns/data/database-per-service.html</a>
</li>

<li>Pattern: Access token<br />
<a href="https://microservices.io/patterns/security/access-token.html">https://microservices.io/patterns/security/access-token.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

