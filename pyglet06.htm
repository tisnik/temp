<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Multimediální knihovna Pyglet: práce s rastrovými obrázky a sprity</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Multimediální knihovna Pyglet: práce s rastrovými obrázky a sprity</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodníkk</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Multimediální knihovna Pyglet: práce s&nbsp;rastrovými obrázky a sprity</a></p>
<p><a href="#k02">*** 2. Načtení obrázku z&nbsp;externího souboru</a></p>
<p><a href="#k03">*** 3. První demonstrační příklad: načtení obrázku z&nbsp;externího souboru</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Multimediální knihovna Pyglet: práce s&nbsp;rastrovými obrázky a sprity</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Načtení obrázku z&nbsp;externího souboru</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad: načtení obrázku z&nbsp;externího souboru</h2>

<pre>
#!/usr/bin/env python

import pyglet

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

print("Loaded image with size %d x %d pixels" % (image.width, image.height))
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vykreslení obrázku operací <strong>blit</strong></h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. Druhý demonstrační příklad: vykreslení obrázku operací <strong>blit</strong></h2>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

print("Loaded image with size %d x %d pixels" % (image.width, image.height))

label = pyglet.text.Label("Pyglet library",
                          font_name="Terminus",
                          font_size=36,
                          x=window.width//2,
                          y=window.height//2)

@window.event
def on_draw():
    window.clear()
    label.draw()
    image.blit(20, 20)

pyglet.app.run()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Použití spritů v&nbsp;knihovně Pyglet</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. Třetí demonstrační příklad: vytvoření a vykreslení spritu</h2>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)

@window.event
def on_draw():
    window.clear()
    sprite.draw()

pyglet.app.run()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Posun spritů, rotace a změna měřítka</h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)
sprite.x = window.width / 2
sprite.y = window.height / 2

@window.event
def on_draw():
    window.clear()
    sprite.draw()

def update(dt):
    sprite.rotation += 1

pyglet.clock.schedule_interval(update, 1/60.)
pyglet.app.run()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
#!/usr/bin/env python

import pyglet
import math

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)
sprite.x = window.width / 2
sprite.y = window.height / 2
sprite.t = 0

@window.event
def on_draw():
    window.clear()
    sprite.draw()

def update(dt):
    sprite.t += 1
    sprite.scale = 5.0 * math.sin(sprite.t/10.)

pyglet.clock.schedule_interval(update, 1/60.)
pyglet.app.run()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)
sprite.dx = 1
sprite.dy = 1

@window.event
def on_draw():
    window.clear()
    sprite.draw()

def update(dt):
    sprite.x += sprite.dx * dt * 200
    sprite.y += sprite.dy * dt * 200
    if sprite.x < 0:
        sprite.x = 0
        sprite.dx = -sprite.dx
    if sprite.y < 0:
        sprite.y = 0
        sprite.dy = -sprite.dy
    if sprite.x + sprite.width > window.width:
        sprite.x = window.width - sprite.width
        sprite.dx = -sprite.dx
    if sprite.y + sprite.height > window.height:
        sprite.y = window.height - sprite.height
        sprite.dy = -sprite.dy

pyglet.clock.schedule_interval(update, 1/60.)
pyglet.app.run()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=450,
                              height=350,
                              caption="Pyglet+OpenGL")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)
sprite.dx = 1
sprite.dy = 1

def draw_points():
    glColor3f(1.0, 1.0, 1.0)                # nastaveni barvy pro kresleni
    glBegin(GL_POINTS)                      # nyni zacneme vykreslovat body
    glVertex2i( 50,  50)
    glVertex2i(100,  50)
    glVertex2i(100, 100)
    glVertex2i( 50, 100)
    glEnd()

def draw_lines():
    glColor3f(1.0, 0.0, 1.0)
    glBegin(GL_LINES)                       # nyni zacneme vykreslovat usecky
    glVertex2i(150,  50)
    glVertex2i(200,  50)
    glVertex2i(200, 100)
    glVertex2i(150, 100)
    glEnd()

def draw_line_strip():
    glColor3f(0.0, 1.0, 1.0)
    glBegin(GL_LINE_STRIP)                  # nyni vykreslime polycaru
    glVertex2i(250,  50)
    glVertex2i(300,  50)
    glVertex2i(300, 100)
    glVertex2i(250, 100)
    glEnd()

def draw_line_loop():
    glColor3f(1.0, 1.0, 0.0)
    glBegin(GL_LINE_LOOP)                   # nyni vykreslime uzavrenou polycaru
    glVertex2i(350,  50)
    glVertex2i(400,  50)
    glVertex2i(400, 100)
    glVertex2i(350, 100)
    glEnd()

def draw_triangles():
    glColor3f(0.0, 0.0, 1.0)
    glBegin(GL_TRIANGLES)                   # vykresleni trojuhelniku
    glVertex2i( 50, 150)
    glVertex2i(100, 150)
    glVertex2i(100, 200)
    glVertex2i( 50, 200)
    glEnd()

def draw_triangle_strip():
    glColor3f(0.0, 1.0, 0.0)
    glBegin(GL_TRIANGLE_STRIP)              # vykresleni pruhu trojuhelniku
    glVertex2i(150, 150)
    glVertex2i(150, 200)
    glVertex2i(200, 200)
    glVertex2i(200, 150)
    glEnd()

def draw_triangle_fan():
    glColor3f(1.0, 0.0, 0.0)
    glBegin(GL_TRIANGLE_FAN)                # vykresleni trsu trojuhelniku
    glVertex2i(300, 150)
    glVertex2i(250, 160)
    glVertex2i(270, 190)
    glVertex2i(290, 200)
    glVertex2i(310, 200)
    glVertex2i(330, 190)
    glVertex2i(350, 160)
    glEnd()

def draw_quads():
    glColor3f(1.0, 0.5, 0.5)
    glBegin(GL_QUADS)                       # vykresleni ctyruhelniku
    glVertex2i( 50, 250)
    glVertex2i(100, 250)
    glVertex2i(100, 300)
    glVertex2i( 50, 300)
    glEnd()

def draw_quad_strip():
    glColor3f(0.5, 0.5, 1.0)
    glBegin(GL_QUAD_STRIP)                  # vykresleni pruhu ctyruhleniku
    glVertex2i(150, 250)
    glVertex2i(150, 300)
    glVertex2i(200, 240)
    glVertex2i(200, 310)
    glVertex2i(250, 260)
    glVertex2i(250, 290)
    glVertex2i(300, 250)
    glVertex2i(300, 300)
    glEnd()

def draw_polygon():
    glColor3f(0.5, 1.0, 0.5)
    glBegin(GL_POLYGON)                     # vykresleni konvexniho polygonu
    glVertex2i(350, 260)
    glVertex2i(370, 240)
    glVertex2i(390, 240)
    glVertex2i(410, 260)
    glVertex2i(410, 280)
    glVertex2i(390, 300)
    glVertex2i(370, 300)
    glVertex2i(350, 280)
    glEnd()

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()

    draw_points()

    draw_lines()
    draw_line_strip()
    draw_line_loop()

    draw_triangles()
    draw_triangle_strip()
    draw_triangle_fan()

    draw_quads()
    draw_quad_strip()

    draw_polygon()

    sprite.draw()

def update(dt):
    sprite.x += sprite.dx * dt * 200
    sprite.y += sprite.dy * dt * 200
    if sprite.x < 0:
        sprite.x = 0
        sprite.dx = -sprite.dx
    if sprite.y < 0:
        sprite.y = 0
        sprite.dy = -sprite.dy
    if sprite.x + sprite.width > window.width:
        sprite.x = window.width - sprite.width
        sprite.dx = -sprite.dx
    if sprite.y + sprite.height > window.height:
        sprite.y = window.height - sprite.height
        sprite.dy = -sprite.dy

pyglet.clock.schedule_interval(update, 1/60.)
pyglet.app.run()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>. Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti klonovat celý repositář. Pro jejich spuštění je nutné mít nainstalovanou jak knihovnu Pyglet, tak i podpůrné grafické knihovny OpenGL a GLU (což se většinou provede automaticky v&nbsp;rámci instalace balíčku s&nbsp;Pygletem, viz též <a href="https://mojefedora.cz/multimedialni-knihovna-pyglet/">úvodní díl tohoto seriálu</a>):</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>27_pyglet_image_load.py</td><td><a href="27_pyglet_image_load.py">27_pyglet_image_load.py</a></td></tr>
<tr><td>28_pyglet_image_blit.py</td><td><a href="28_pyglet_image_blit.py">28_pyglet_image_blit.py</a></td></tr>
<tr><td>29_sprite.py</td><td><a href="29_sprite.py">29_sprite.py</a></td></tr>
<tr><td>30_sprite_rotation.py</td><td><a href="30_sprite_rotation.py">30_sprite_rotation.py</a></td></tr>
<tr><td>31_sprite_scale.py</td><td><a href="31_sprite_scale.py">31_sprite_scale.py</a></td></tr>
<tr><td>32_sprite_move.py</td><td><a href="32_sprite_move.py">32_sprite_move.py</a></td></tr>
<tr><td>33_sprites_and_OpenGL.py</td><td><a href="33_sprites_and_OpenGL.py">33_sprites_and_OpenGL.py</a></td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Pyglet Home Page<br />
<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home">https://bitbucket.org/pyglet/pyglet/wiki/Home</a>
</li>

<li>Dokumentace k verzi 1.2<br />
<a href="https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/">https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/</a>
</li>

<li>Dokumentace k verzi 1.2 ve formátu PDF<br />
<a href="https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/">https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/</a>
</li>

<li>PyOpenGL<br />
<a href="http://pyopengl.sourceforge.net/">http://pyopengl.sourceforge.net/</a>
</li>

<li>The #! magic, details about the shebang/hash-bang mechanism on various Unix flavours<br />
<a href="https://www.in-ulm.de/~mascheck/various/shebang/">https://www.in-ulm.de/~mascheck/various/shebang/</a>
</li>

<li>Shebang (Unix)<br />
<a href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29">https://en.wikipedia.org/wiki/Shebang_%28Unix%29</a>
</li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Simple DirectMedia Layer (home page)<br />
<a href="http://www.libsdl.org/">http://www.libsdl.org/</a>
</li>

<li>Simple DirectMedia Layer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
</li>

<li>Seriál Grafická knihovna OpenGL<br />
<a href="https://www.root.cz/serialy/graficka-knihovna-opengl/">https://www.root.cz/serialy/graficka-knihovna-opengl/</a>
</li>

<li>Pyglet event loop<br />
<a href="http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html">http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html</a>
</li>

<li>Decorators I: Introduction to Python Decorators<br />
<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">http://www.artima.com/weblogs/viewpost.jsp?thread=240808</a>
</li>

<li>3D Programming in Python - Part 1 <br />
<a href="https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/">https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/</a>
</li>

<li>A very basic Pyglet tutorial<br />
<a href="http://www.natan.termitnjak.net/tutorials/pyglet_basic.html">http://www.natan.termitnjak.net/tutorials/pyglet_basic.html</a>
</li>

<li>Alpha blending<br />
<a href="https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending">https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

