<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Multimediální knihovna Pyglet: práce s rastrovými obrázky a sprity</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Multimediální knihovna Pyglet: práce s rastrovými obrázky a sprity</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Multimediální knihovna Pyglet plně podporuje práci s&nbsp;rastrovými obrázky, které mohou sloužit buď ve funkci spritů (pohybující se objekty ve scéně s&nbsp;volitelnou velikostí, rotací a průhledností) nebo je možné rastrové obrázky použít pro vytvoření textur nanášených na trojrozměrná tělesa. Dnes se s&nbsp;některými základními vlastnostmi rastrových obrázků v&nbsp;Pygletu seznámíme a ukážeme si způsoby jejich použití na devíti demonstračních příkladech.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Multimediální knihovna Pyglet: práce s&nbsp;rastrovými obrázky a sprity</a></p>
<p><a href="#k02">2. Podporované formáty rastrových obrázků</a></p>
<p><a href="#k03">3. Načtení obrázku z&nbsp;externího souboru</a></p>
<p><a href="#k04">4. První demonstrační příklad: načtení obrázku z&nbsp;externího souboru</a></p>
<p><a href="#k05">5. Vykreslení obrázku operací <strong>blit</strong></a></p>
<p><a href="#k06">6. Druhý demonstrační příklad: vykreslení obrázku operací <strong>blit</strong></a></p>
<p><a href="#k07">7. Použití spritů v&nbsp;knihovně Pyglet</a></p>
<p><a href="#k08">*** 8. Třetí demonstrační příklad: vytvoření a vykreslení spritu</a></p>
<p><a href="#k09">*** 9. Posun spritů, rotace a změna měřítka</a></p>
<p><a href="#k10">*** 10. Čtvrtý demonstrační příklad: animace rotace spritu</a></p>
<p><a href="#k11">*** 11. Pátý demonstrační příklad: animace změny měřítka spritu</a></p>
<p><a href="#k12">*** 12. Šestý demonstrační příklad: bouncy ball</a></p>
<p><a href="#k13">*** 13. Kombinace vykreslovaní přes OpenGL se sprity</a></p>
<p><a href="#k14">14. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k15">15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Multimediální knihovna Pyglet: práce s&nbsp;rastrovými obrázky a sprity</h2>

<p>Prakticky každá knihovna určená pro tvorbu multimediálních aplikací nebo her podporuje práci s&nbsp;rastrovými obrázky. Ostatně již v&nbsp;několika předchozích článcích jsme si popisovali &bdquo;herní&ldquo; knihovnu Pygame, která rastrové obrázky taktéž podporuje [<a href="https://mojefedora.cz/programovaci-jazyky-a-knihovny-urcene-pro-vyuku-zakladu-pocitacove-grafiky-knihovna-pygame-prakticky/">1</a>] [<a href="https://mojefedora.cz/programovaci-jazyky-a-knihovny-urcene-pro-vyuku-zakladu-pocitacove-grafiky-prace-s-bitmapami-a-truetype-fonty/">2</a>]. I v&nbsp;knihovně Pyglet samozřejmě můžeme s&nbsp;rastrovými obrázky pracovat, a to poměrně komfortním způsobem. Rastrové obrázky zde dokonce mají několik významů, protože bitmapy lze konvertovat na takzvané <i>sprity</i>, popř.&nbsp;mohou obrázky sloužit ve funkci zdrojových dat pro dvoudimenzionální textury, které lze nanášet na 3D tělesa při použití knihovny OpenGL (což je pro mnoho aplikací mnohem důležitější a přitom velmi užitečná vlastnost).</p>

<img src="https://mojefedora.cz/wp-content/uploads/2015/12/101.png">
<p><i>Obrázek 1: Tento rastrový obrázek bude použit v&nbsp;dnešních demonstračních příkladech.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Podporované formáty rastrových obrázků</h2>

<p>Knihovna Pyglet dokáže na Linuxu pracovat s&nbsp;následujícími formáty rastrových obrázků. Pokud je však navíc nainstalována knihovna <i>PIL (Python Imaging Library)</i>, lze použít všechny formáty podporované i touto knihovnou:</p>

<table>
<tr><th>Používaná koncovka</th><th>Jméno formátu</th></tr>
<tr><td>.bmp</td><td><a href="https://www.root.cz/clanky/graficky-format-bmp-pouzivany-a-pritom-neoblibeny/">Windows Bitmap</a></td></tr>
<tr><td>.dds</td><td>Microsoft DirectDraw Surface</td></tr>
<tr><td>.gif</td><td><a href="https://www.root.cz/serialy/graficky-format-gif/">Graphics Interchange Format</a></td></tr>
<tr><td>.jpg .jpeg</td><td><a href="https://www.root.cz/clanky/jpeg-kral-rastrovych-grafickych-formatu/">JPEG/JIFF Image</a></td></tr>
<tr><td>.png</td><td><a href="https://www.root.cz/clanky/png-is-not-gif/">Portable Network Graphic</a></td></tr>
<tr><td>.pnm</td><td><a href="https://www.root.cz/clanky/graficke-formaty-ve-znameni-unixu/">PBM Portable Any Map Graphic Bitmap</a></td></tr>
<tr><td>.ras</td><td>Sun raster graphic</td></tr>
<tr><td>.tif .tiff</td><td>Tagged Image File Format</td></tr>
<tr><td>.xbm</td><td>X11 bitmap</td></tr>
<tr><td>.xpm</td><td>X11 icon</td></tr>
</table>

<p>V&nbsp;praxi se nejčastěji setkáme s&nbsp;použitím formátů PNG, GIT a JPEG.</p>

<p>Poznámka: na operačních systémech Microsoft Windows a MacOS je množina podporovaných formátů nepatrně odlišná, ovšem minimálně s&nbsp;podporou BMP, GIF, JPEG a PNG lze počítat. Pokud tedy chcete vytvářet aplikace kompatibilní napříč různými platformami, je nejlepší se skutečně držet právě těchto formátů.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Načtení obrázku z&nbsp;externího souboru</h2>

<p>Načtení rastrového obrázku probíhá ve dvou krocích. Nejdříve je nutné otevřít soubor obsahující obrázek pro čtení a pro jistotu i v&nbsp;binárním režimu (na Linuxu nemá volba binárního či textového režimu význam, ale na jiných OS ano). Režim čtení binárního souboru je popsán řetězcem &bdquo;rb&ldquo;:</p>

<pre>
image_stream = open("gnome-globe.png", "rb")
</pre>

<p>Dále je nutné provést načtení obrázku z&nbsp;otevřeného souboru a vytvoření objektu typu <strong>AbstractImage</strong> (přesněji řečeno některého potomka této třídy):</p>

<pre>
image = pyglet.image.load('gnome-globe.png', file=image_stream)
</pre>

<p>U tohoto řádku se na chvíli zastavíme. Proč je vlastně nutné znovu uvádět jméno souboru? Interně se totiž o načítání obrázků může starat několik <i>kodeků (codecs)</i> a je tedy nutné vědět, který kodek se má použít. Každý kodek se automaticky zaregistruje ještě před spuštěním vašich programů a přitom uvede, které formáty (a tím pádem i koncovky souborů) podporuje. A první parametru funkce <strong>pyglet.image.load()</strong> slouží právě k&nbsp;tomu, aby se rozhodlo, který kodek se má v&nbsp;tomto konkrétním případě použít.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad: načtení obrázku z&nbsp;externího souboru</h2>

<p><a href="https://github.com/tisnik/presentations/blob/master/pyglet/27_pyglet_image_load.py">První demonstrační příklad</a> je značně jednoduchý, protože si v&nbsp;něm pouze ukážeme, jakým způsobem je možné v&nbsp;knihovně Pyglet načíst rastrový obrázek. Kvůli jednoduchosti se ani nesnažíme o kontrolu, zda se otevření souboru podařilo, zda soubor obsahuje korektní data atd. Korektní práce se soubory je popsána <a href="https://pythontips.com/2014/01/15/the-open-function-explained/">zde</a>. Po načtení obrázku (předpokládejme tedy pro jednoduchost, že se načtení skutečně povedlo) vypíšeme na standardní výstup jeho rozměry:</p>

<pre>
#!/usr/bin/env python

import pyglet

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

print("Loaded image with size %d x %d pixels" % (image.width, image.height))
</pre>

<p>Po spuštění tohoto příkladu by se měla vypsat následující informace:</p>

<pre>
Loaded image with size 96 x 96 pixels
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vykreslení obrázku operací <strong>blit</strong></h2>

<p>Většina historických i velká část soudobých počítačových her s&nbsp;dvoudimenzionální (2D) grafikou je charakteristická tím, že objekty v&nbsp;těchto hrách jsou reprezentovány s&nbsp;využitím rastrových obrázků (bitmap) o různé velikosti, které se postupně vykreslují do vytvářené dvoudimenzionální scény. Aby bylo přes některé části těchto rastrových obrázků viditelné i pozadí, používají se tři metody pro zajištění úplné či částečné průhlednosti. Buď je stanoveno, že určitá hodnota (tj.&nbsp;barva) pixelů má být zcela průhledná (typicky se jedná o jasně fialovou barvu, která se v&nbsp;typických scénách stejně nikde neobjevuje), dále je alternativně možné jeden bit v&nbsp;hodnotě pixelu použít pro určení průhlednosti (typické pro 16bitovou hloubku), nebo se může stanovit průhlednost pixelů doplněním bitmapy o takzvaný <i>alfa kanál (alpha channel)</i>.</p>

<a href="http://mojefedora.cz/wp-content/uploads/2015/12/061.png"><img class="alignnone size-medium wp-image-6211" src="http://mojefedora.cz/wp-content/uploads/2015/12/061-409x450.png" alt="06" width="409" height="450" /></a>
<p><i>Obrázek 2: Rastrové obrázky (zde zvětšené), které tvoří základ jedné RPG. Vykreslují se funkcí <strong>blit/BitBLT</strong>.</i></p>

<p>S&nbsp;využitím grafické operace <strong>blit</strong> neboli <strong>BitBLT</strong> (<i>Bit Block Transfer</i>) lze provádět, jak ostatně její název naznačuje, blokové přenosy bitmap nebo jejich výřezů, popř.&nbsp;v&nbsp;rámci přenosu nad bitmapami provádět různé další operace, například zpracování alfa kanálu. První implementace operace <strong>BitBLT</strong> byla použita v&nbsp;roce 1975 ve <i>Smalltalku-72</i> a od té doby ji najdeme prakticky v&nbsp;každé implementaci tohoto programovacího jazyka, která obsahuje i knihovny pro práci s&nbsp;grafikou (mj.&nbsp;se jedná i o <i>Squeak</i>). Pro <i>Smalltalk-74</i> vytvořil Daniel Ingalls optimalizovanou variantu operace <strong>BitBLT</strong> implementovanou v&nbsp;mikrokódu. Operace <strong>BitBLT</strong> se tak stala součástí operačního systému a bylo ji možné volat jak z&nbsp;assembleru, tak i z&nbsp;programů napsaných v&nbsp;jazyce <i>BCPL</i> a samozřejmě i ze <i>Smalltalku</i> (právě tuto implementaci můžeme považovat za vůbec první grafickou akceleraci). Posléze se díky své univerzalitě tato funkce rozšířila i do mnoha dalších operačních systémů a grafických knihoven.</p>

<a href="http://mojefedora.cz/wp-content/uploads/2015/12/071.png"><img class="alignnone size-medium wp-image-6212" src="http://mojefedora.cz/wp-content/uploads/2015/12/071-450x338.png" alt="07" width="450" height="338" /></a>
<p><i>Obrázek 3: Hra Warcraft II také používá téměř výhradně bitmapy pro zobrazení budov i postaviček.</i></p>

<p>V&nbsp;případě knihovny Pyglet se operace <strong>blit</strong> volá ... nepřekvapivě ... metodou <strong>blit()</strong>, které se předá požadovaná pozice obrázku ve dvourozměrné scéně. Pokud potřebujeme ve scéně vykreslit pouze jeden obrázek na konstantním pozadí, bude celý kód triviální:</p>

<pre>
def on_draw():
    window.clear()
    image.blit(20, 20)
</pre>

<a href="http://mojefedora.cz/wp-content/uploads/2015/12/091.png"><img class="alignnone size-medium wp-image-6214" src="http://mojefedora.cz/wp-content/uploads/2015/12/091-450x207.png" alt="09" width="450" height="207" /></a>
<p><i>Obrázek 4 Část originálního kódu původní implementace operace BitBLT naprogramované Danielem Ingallsem.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý demonstrační příklad: vykreslení obrázku operací <strong>blit</strong></h2>

<p>V&nbsp;dnešním <a href="https://github.com/tisnik/presentations/blob/master/pyglet/28_pyglet_image_blit.py">druhém demonstračním příkladu</a> nejprve načteme rastrový obrázek a posléze ho použijeme pro vykreslení jednoduché scény s&nbsp;textovým návěštím a bitmapou:</p>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

print("Loaded image with size %d x %d pixels" % (image.width, image.height))

label = pyglet.text.Label("Pyglet library",
                          font_name="Terminus",
                          font_size=36,
                          x=window.width//2,
                          y=window.height//2)

@window.event
def on_draw():
    window.clear()
    label.draw()
    image.blit(20, 20)

pyglet.app.run()
</pre>

*** image ***
<p><i>Obrázek 5: Screenshot dnešního druhého demonstračního příkladu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Použití spritů v&nbsp;knihovně Pyglet</h2>

<p>Při tvorbě 2D her (ale i v&nbsp;dalších aplikacích) se většinou nepracuje s&nbsp;rastrovými obrázky přímo způsobem, který jsme si ukázali <a href="#k05">v&nbsp;předchozí kapitole</a>, a to mj.&nbsp;i z&nbsp;toho důvodu, že při použití Pygletu máme k&nbsp;dispozici vylepšenou třídu, jejíž instance dokážou kromě vlastního rastrového obrázku držet i další užitečné informace, například zvětšení (měřítko), rotaci a především pak pozici ve vykreslované scéně. Tato třída se jmenuje <strong>Sprite</strong> (přesněji řečeno <strong>pyglet.sprite.Sprite</strong>) a její instanci je možné vytvořit přímo z&nbsp;vybraného obrázku konstruktorem <strong>pyglet.sprite.Sprite(objekt_typu_image)</strong>:</p>

<pre>
image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)
</pre>

<p>Interně vlastně jen dochází k&nbsp;obalení původního obrázku dalšími atributy, takže se nemusíte obávat, že by konverze obrázku do spritu byla časově či paměťově náročná. Ve chvíli, kdy je sprite vytvořen, je možné přistupovat k&nbsp;jeho atributům, mezi něž patří:</p>

<table>
<tr><th>Atribut</th><th>Význam</th></tr>
<tr><td>image</td><td>obrázek s&nbsp;rastrovými daty spritu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>width</td><td>šířka spritu</td></tr>
<tr><td>height</td><td>výška spritu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>x</td><td>pozice spritu v&nbsp;rámci celé scény</td></tr>
<tr><td>y</td><td>pozice spritu v&nbsp;rámci celé scény</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>position</td><td>pozice reprezentovaná dvojicí (n-ticí)</td></tr>
<tr><td>rotation</td><td>rotace spritu (natočení)</td></tr>
<tr><td>scale</td><td>měřítko spritu (identita, zvětšení, zmenšení)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>color</td><td>barva použitá při míchání (blendingu)</td></tr>
<tr><td>opacity</td><td>neprůsvitnost použitá při míchání (blendingu)</td></tr>
</table>

<p>Některé atributy má smysl i modifikovat, tj.&nbsp;zapisovat do nich. Týká se to především pozice spritu ve scéně a jeho transformací (rotace a změna měřítka).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Třetí demonstrační příklad: vytvoření a vykreslení spritu</h2>

<p>Ve třetím příkladu </p>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)

@window.event
def on_draw():
    window.clear()
    sprite.draw()

pyglet.app.run()
</pre>

*** image ***
<p><i>Obrázek 6: Screenshot dnešního třetího demonstračního příkladu.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Posun spritů, rotace a změna měřítka</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. Čtvrtý demonstrační příklad: animace rotace spritu</h2>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)
sprite.x = window.width / 2
sprite.y = window.height / 2

@window.event
def on_draw():
    window.clear()
    sprite.draw()

def update(dt):
    sprite.rotation += 1

pyglet.clock.schedule_interval(update, 1/60.)
pyglet.app.run()
</pre>

<p>Povšimněte si, že sprite nerotuje okolo svého středu, ale okolo levého horního rohu, jenž má v&nbsp;rámci lokálního souřadného systému spritu souřadnice [0,0]. Pokud potřebujete provést rotaci spritu okolo jiného bodu, je nutné změnit počátek souřadné soustavy <i>obrázku</i>, z&nbsp;něhož je sprite vytvořen. To lze provést například následujícím způsobem:</p>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

image.anchor_x = image.width / 2
image.anchor_y = image.height / 2

sprite = pyglet.sprite.Sprite(image)
sprite.x = window.width / 2
sprite.y = window.height / 2

@window.event
def on_draw():
    window.clear()
    sprite.draw()

def update(dt):
    sprite.rotation += 1

pyglet.clock.schedule_interval(update, 1/60.)
pyglet.app.run()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pátý demonstrační příklad: animace změny měřítka spritu</h2>

<pre>
#!/usr/bin/env python

import pyglet
import math

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)
sprite.x = window.width / 2
sprite.y = window.height / 2
sprite.t = 0

@window.event
def on_draw():
    window.clear()
    sprite.draw()

def update(dt):
    sprite.t += 1
    sprite.scale = 5.0 * math.sin(sprite.t/10.)

pyglet.clock.schedule_interval(update, 1/60.)
pyglet.app.run()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Šestý demonstrační příklad: bouncy ball</h2>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)
sprite.dx = 1
sprite.dy = 1

@window.event
def on_draw():
    window.clear()
    sprite.draw()

def update(dt):
    sprite.x += sprite.dx * dt * 200
    sprite.y += sprite.dy * dt * 200
    if sprite.x &lt; 0:
        sprite.x = 0
        sprite.dx = -sprite.dx
    if sprite.y &lt; 0:
        sprite.y = 0
        sprite.dy = -sprite.dy
    if sprite.x + sprite.width &gt; window.width:
        sprite.x = window.width - sprite.width
        sprite.dx = -sprite.dx
    if sprite.y + sprite.height &gt; window.height:
        sprite.y = window.height - sprite.height
        sprite.dy = -sprite.dy

pyglet.clock.schedule_interval(update, 1/60.)
pyglet.app.run()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Kombinace vykreslovaní přes OpenGL se sprity</h2>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=450,
                              height=350,
                              caption="Pyglet+OpenGL")

image_stream = open("gnome-globe.png", "rb")
image = pyglet.image.load('gnome-globe.png', file=image_stream)

sprite = pyglet.sprite.Sprite(image)
sprite.dx = 1
sprite.dy = 1

def draw_points():
    glColor3f(1.0, 1.0, 1.0)                # nastaveni barvy pro kresleni
    glBegin(GL_POINTS)                      # nyni zacneme vykreslovat body
    glVertex2i( 50,  50)
    glVertex2i(100,  50)
    glVertex2i(100, 100)
    glVertex2i( 50, 100)
    glEnd()

def draw_lines():
    glColor3f(1.0, 0.0, 1.0)
    glBegin(GL_LINES)                       # nyni zacneme vykreslovat usecky
    glVertex2i(150,  50)
    glVertex2i(200,  50)
    glVertex2i(200, 100)
    glVertex2i(150, 100)
    glEnd()

def draw_line_strip():
    glColor3f(0.0, 1.0, 1.0)
    glBegin(GL_LINE_STRIP)                  # nyni vykreslime polycaru
    glVertex2i(250,  50)
    glVertex2i(300,  50)
    glVertex2i(300, 100)
    glVertex2i(250, 100)
    glEnd()

def draw_line_loop():
    glColor3f(1.0, 1.0, 0.0)
    glBegin(GL_LINE_LOOP)                   # nyni vykreslime uzavrenou polycaru
    glVertex2i(350,  50)
    glVertex2i(400,  50)
    glVertex2i(400, 100)
    glVertex2i(350, 100)
    glEnd()

def draw_triangles():
    glColor3f(0.0, 0.0, 1.0)
    glBegin(GL_TRIANGLES)                   # vykresleni trojuhelniku
    glVertex2i( 50, 150)
    glVertex2i(100, 150)
    glVertex2i(100, 200)
    glVertex2i( 50, 200)
    glEnd()

def draw_triangle_strip():
    glColor3f(0.0, 1.0, 0.0)
    glBegin(GL_TRIANGLE_STRIP)              # vykresleni pruhu trojuhelniku
    glVertex2i(150, 150)
    glVertex2i(150, 200)
    glVertex2i(200, 200)
    glVertex2i(200, 150)
    glEnd()

def draw_triangle_fan():
    glColor3f(1.0, 0.0, 0.0)
    glBegin(GL_TRIANGLE_FAN)                # vykresleni trsu trojuhelniku
    glVertex2i(300, 150)
    glVertex2i(250, 160)
    glVertex2i(270, 190)
    glVertex2i(290, 200)
    glVertex2i(310, 200)
    glVertex2i(330, 190)
    glVertex2i(350, 160)
    glEnd()

def draw_quads():
    glColor3f(1.0, 0.5, 0.5)
    glBegin(GL_QUADS)                       # vykresleni ctyruhelniku
    glVertex2i( 50, 250)
    glVertex2i(100, 250)
    glVertex2i(100, 300)
    glVertex2i( 50, 300)
    glEnd()

def draw_quad_strip():
    glColor3f(0.5, 0.5, 1.0)
    glBegin(GL_QUAD_STRIP)                  # vykresleni pruhu ctyruhleniku
    glVertex2i(150, 250)
    glVertex2i(150, 300)
    glVertex2i(200, 240)
    glVertex2i(200, 310)
    glVertex2i(250, 260)
    glVertex2i(250, 290)
    glVertex2i(300, 250)
    glVertex2i(300, 300)
    glEnd()

def draw_polygon():
    glColor3f(0.5, 1.0, 0.5)
    glBegin(GL_POLYGON)                     # vykresleni konvexniho polygonu
    glVertex2i(350, 260)
    glVertex2i(370, 240)
    glVertex2i(390, 240)
    glVertex2i(410, 260)
    glVertex2i(410, 280)
    glVertex2i(390, 300)
    glVertex2i(370, 300)
    glVertex2i(350, 280)
    glEnd()

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()

    draw_points()

    draw_lines()
    draw_line_strip()
    draw_line_loop()

    draw_triangles()
    draw_triangle_strip()
    draw_triangle_fan()

    draw_quads()
    draw_quad_strip()

    draw_polygon()

    sprite.draw()

def update(dt):
    sprite.x += sprite.dx * dt * 200
    sprite.y += sprite.dy * dt * 200
    if sprite.x &lt; 0:
        sprite.x = 0
        sprite.dx = -sprite.dx
    if sprite.y &lt; 0:
        sprite.y = 0
        sprite.dy = -sprite.dy
    if sprite.x + sprite.width &gt; window.width:
        sprite.x = window.width - sprite.width
        sprite.dx = -sprite.dx
    if sprite.y + sprite.height &gt; window.height:
        sprite.y = window.height - sprite.height
        sprite.dy = -sprite.dy

pyglet.clock.schedule_interval(update, 1/60.)
pyglet.app.run()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>. Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti klonovat celý repositář. Pro jejich spuštění je nutné mít nainstalovanou jak knihovnu Pyglet, tak i podpůrné grafické knihovny OpenGL a GLU (což se většinou provede automaticky v&nbsp;rámci instalace balíčku s&nbsp;Pygletem, viz též <a href="https://mojefedora.cz/multimedialni-knihovna-pyglet/">úvodní díl tohoto seriálu</a>):</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>27_pyglet_image_load.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/27_pyglet_image_load.py">https://github.com/tisnik/presentations/blob/master/pyglet/27_pyglet_image_load.py</a></td></tr>
<tr><td>28_pyglet_image_blit.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/28_pyglet_image_blit.py">https://github.com/tisnik/presentations/blob/master/pyglet/28_pyglet_image_blit.py</a></td></tr>
<tr><td>29_sprite.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/29_sprite.py">https://github.com/tisnik/presentations/blob/master/pyglet/29_sprite.py</a></td></tr>
<tr><td>30_sprite_rotation.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/30_sprite_rotation.py">https://github.com/tisnik/presentations/blob/master/pyglet/30_sprite_rotation.py</a></td></tr>
<tr><td>31_sprite_rotation_origin.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/31_sprite_rotation_origin.py">https://github.com/tisnik/presentations/blob/master/pyglet/31_sprite_rotation_origin.py</a></td></tr>
<tr><td>32_sprite_scale.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/32_sprite_scale.py">https://github.com/tisnik/presentations/blob/master/pyglet/32_sprite_scale.py</a></td></tr>
<tr><td>33_sprite_scale_origin.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/33_sprite_scale_origin.py">https://github.com/tisnik/presentations/blob/master/pyglet/33_sprite_scale_origin.py</a></td></tr>
<tr><td>34_sprite_move.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/34_sprite_move.py">https://github.com/tisnik/presentations/blob/master/pyglet/34_sprite_move.py</a></td></tr>
<tr><td>35_sprites_and_OpenGL.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/35_sprites_and_OpenGL.py">https://github.com/tisnik/presentations/blob/master/pyglet/35_sprites_and_OpenGL.py</a></td></tr>
</table>

<p>Poznámka: všechny dnešní demonstrační příklady používají <a href="https://github.com/tisnik/presentations/blob/master/pyglet/gnome-globe.png">tento obrázek</a>, který by měl být uložen ve stejném adresáři, v&nbsp;němž jsou zdrojové kódy demonstračních příkladů.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>Pyglet Home Page<br />
<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home">https://bitbucket.org/pyglet/pyglet/wiki/Home</a>
</li>

<li>Dokumentace k verzi 1.2<br />
<a href="https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/">https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/</a>
</li>

<li>Dokumentace k verzi 1.2 ve formátu PDF<br />
<a href="https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/">https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/</a>
</li>

<li>PyOpenGL<br />
<a href="http://pyopengl.sourceforge.net/">http://pyopengl.sourceforge.net/</a>
</li>

<li>The #! magic, details about the shebang/hash-bang mechanism on various Unix flavours<br />
<a href="https://www.in-ulm.de/~mascheck/various/shebang/">https://www.in-ulm.de/~mascheck/various/shebang/</a>
</li>

<li>Shebang (Unix)<br />
<a href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29">https://en.wikipedia.org/wiki/Shebang_%28Unix%29</a>
</li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Simple DirectMedia Layer (home page)<br />
<a href="http://www.libsdl.org/">http://www.libsdl.org/</a>
</li>

<li>Simple DirectMedia Layer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
</li>

<li>Seriál Grafická knihovna OpenGL<br />
<a href="https://www.root.cz/serialy/graficka-knihovna-opengl/">https://www.root.cz/serialy/graficka-knihovna-opengl/</a>
</li>

<li>Pyglet event loop<br />
<a href="http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html">http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html</a>
</li>

<li>Decorators I: Introduction to Python Decorators<br />
<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">http://www.artima.com/weblogs/viewpost.jsp?thread=240808</a>
</li>

<li>3D Programming in Python - Part 1 <br />
<a href="https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/">https://greendalecs.wordpress.com/2012/04/21/3d-programming-in-python-part-1/</a>
</li>

<li>A very basic Pyglet tutorial<br />
<a href="http://www.natan.termitnjak.net/tutorials/pyglet_basic.html">http://www.natan.termitnjak.net/tutorials/pyglet_basic.html</a>
</li>

<li>Alpha blending<br />
<a href="https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending">https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

