<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Pořadí předávání mock objektů do funkce s&nbsp;anotací <strong>@patch</strong></a></p>
<p><a href="#k03">*** 3. Nástroj <strong>pytest</strong> &ndash; nejpřímější způsob spouštění a vyhodnocování jednotkových testů</a></p>
<p><a href="#k04">*** 4. Doplňkové moduly pro nástroj <strong>pytest</strong></a></p>
<p><a href="#k05">*** 5. Jednoduchý projekt ukazující základní možnosti nástroje <strong>pytest</strong></a></p>
<p><a href="#k06">*** 6. Spuštění nástroje <strong>pytest</strong> s&nbsp;vyhodnocením výsledků</a></p>
<p><a href="#k07">*** 7. Instalace a použití nového pluginu</a></p>
<p><a href="#k08">*** 8. Ladění v&nbsp;případě, že dochází k&nbsp;problémům při inicializaci pluginu</a></p>
<p><a href="#k09">*** 9. Zjištění pokrytí zdrojového kódu jednotkovými testy</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. Využití komentáře <strong># pragma: no cover</strong></a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Předchozí články s&nbsp;tématem testování (nejenom) v&nbsp;Pythonu</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Pořadí předávání mock objektů do funkce s&nbsp;anotací <strong>@patch</strong></h2>

<p>V&nbsp;závěrečné kapitole věnované mockování s&nbsp;využitím knihovny <strong>unittest.mock</strong> se ještě musíme zmínit o další vlastnosti anotace <strong>@patch</strong>. Pořadí předání reference na mockované funkce je totiž přesně opačné, než je pořadí zápisu anotací! Jinými slovy &ndash; anotace zapsaná nejblíže definici funkce odpovídá prvnímu parametru, anotace o řádek výše parametru druhému atd.</p>

<p>Test se dvěma mocky tedy bude začínat následovně:</p>

<pre>
@patch("module1.f1", name="f1", return_value=1)
@patch("module1.f2", name="f2", return_value=2)
def <strong>test3</strong>(mocked_f2, mocked_f1):
    ...
    ...
    ...
</pre>

<p>Test se třemi mocky bude vypadat takto:</p>

<pre>
@patch("module1.f1", name="f1", return_value=1)
@patch("module1.f2", name="f2", return_value=2)
@patch("module1.f3", name="f3", return_value=3)
def <strong>test4</strong>(mocked_f3, mocked_f2, mocked_f1):
    ...
    ...
    ...
</pre>

<p>Takto deklarované mocky jsou součástí demonstračního příkladu dostupného na adrese <a href=""></a>, jehož kód je uveden níže.</p>

<p>Pokud poslední příklad spustíte příkazem <strong>./test</strong>, měly by se na standardní výstup vypsat následující řádky:</p>

<pre>
*** test1 ***
compute returns: 14
&nbsp;
*** test2 ***
compute returns: 130
mocked function 'f1' called: True
calls:  [call(10)]
&nbsp;
&nbsp;
*** test3 ***
compute returns: 9
mocked function 'f1' called: True
calls:  [call(1)]
&nbsp;
mocked function 'f2' called: True
calls:  [call(2)]
&nbsp;
&nbsp;
*** test4 ***
compute returns: 0
mocked function 'f1' called: True
calls:  [call(100)]
&nbsp;
mocked function 'f2' called: True
calls:  [call(200)]
&nbsp;
mocked function 'f3' called: True
calls:  [call(300)]
</pre>

<p>Všechny skripty, které jsou součástí tohoto demonstračního příkladu:</p>

<p><strong>main.py</strong>:</p>

<pre>
#!/usr/bin/env python3
&nbsp;
<i>"""Vstupní bod do testované aplikace."""</i>
from module1 import *
&nbsp;
&nbsp;
if __name__ == '__main__':
    print(compute(1, 2, 3))
</pre>

<p><strong>module1.py</strong>:</p>

<pre>
from module2 import *
&nbsp;
&nbsp;
def <strong>compute</strong>(x, y, z):
    return f1(x) + f2(y) + f3(z)
</pre>

<p><strong>module2.py</strong>:</p>

<pre>
def <strong>f1</strong>(x):
    return x
&nbsp;
def <strong>f2</strong>(x):
    return 2 * x
&nbsp;
def <strong>f3</strong>(x):
    return 3 * x
</pre>

<p><strong>test.py</strong>:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
from unittest.mock import *
&nbsp;
from module1 import *
&nbsp;
&nbsp;
def <strong>test1</strong>():
    print("*** test1 ***")
&nbsp;
    value = compute(1, 2, 3)
    print("compute returns: {v}".format(v=value))
&nbsp;
&nbsp;
def <strong>mock_call_info</strong>(mocked_function):
    print("mocked function '{n}' called: {c}".format(n=mocked_function._mock_name,
&nbsp;                                                     c=mocked_function.called))
    print("calls: ", mocked_function.mock_calls)
    print()
&nbsp;
&nbsp;
@patch("module1.f1", name="f1", return_value=0)
def <strong>test2</strong>(mocked_f1):
    print("*** test1 ***")
&nbsp;
    value = compute(10, 20, 30)
    print("compute returns: {v}".format(v=value))
&nbsp;
    mock_call_info(mocked_f1)
&nbsp;
&nbsp;
@patch("module1.f1", name="f1", return_value=0)
@patch("module1.f2", name="f2", return_value=0)
def <strong>test3</strong>(mocked_f2, mocked_f1):
    print("*** test3 ***")
&nbsp;
    value = compute(1, 2, 3)
    print("compute returns: {v}".format(v=value))
&nbsp;
    mock_call_info(mocked_f1)
    mock_call_info(mocked_f2)
&nbsp;
&nbsp;
@patch("module1.f1", name="f1", return_value=0)
@patch("module1.f2", name="f2", return_value=0)
@patch("module1.f3", name="f3", return_value=0)
def <strong>test4</strong>(mocked_f3, mocked_f2, mocked_f1):
    print("*** test4 ***")
&nbsp;
    value = compute(100, 200, 300)
    print("compute returns: {v}".format(v=value))
&nbsp;
    mock_call_info(mocked_f1)
    mock_call_info(mocked_f2)
    mock_call_info(mocked_f3)
&nbsp;
&nbsp;
if __name__ == '__main__':
    test1()
    print()
&nbsp;
    test2()
    print()
&nbsp;
    test3()
    print()
&nbsp;
    test4()
    print()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Nástroj <strong>pytest</strong> &ndash; nejpřímější způsob spouštění a vyhodnocování jednotkových testů</h2>

<p></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Doplňkové moduly pro nástroj <strong>pytest</strong></h2>

<p>Vzhledem k&nbsp;tomu, že je <strong>pytest</strong> v&nbsp;současnosti považován za de facto standard v&nbsp;oblasti jednotkových testů pro programovací jazyk Python, vzniklo pro něj několik set(!) doplňkových modulů. Základní informace o těchto modulech jsou vypsány v&nbsp;následující tabulce:</p>


<p><div class="rs-tip-major">Poznámka: podrobnější seznamy lze najít na adrese <a href="http://plugincompat.herokuapp.com/">http://plugincompat.herokuapp.com/</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Jednoduchý projekt ukazující základní možnosti nástroje <strong>pytest</strong></h2>

<p></p>

<pre>
<i>"""Výpočet seznamu prvočísel až do zadaného limitu."""</i>

<i># originální kód lze nalézt na adrese:</i>
<i># http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Odds-only_version_of_the_array_sieve_above</i>


def <strong>primes2</strong>(limit):
    <i>"""Výpočet seznamu prvočísel až do zadaného limitu."""</i>
    <i># okrajový případ</i>
    if limit &lt; 2:
        return []

    <i># druhý případ - 2 je speciálním prvočíslem</i>
    if limit &lt; 3:
        return [2]

    lmtbf = (limit - 3) // 2

    <i># naplnění tabulky, která se bude prosívat</i>
    buf = [True] * (lmtbf + 1)

    <i># vlastní prosívání</i>
    for i in range((int(limit ** 0.5) - 3) // 2 + 1):
        if buf[i]:
            p = i + i + 3
            s = p * (i + 1) + i
            buf[s::p] = [False] * ((lmtbf - s) // p + 1)

    <i># vytvoření seznamu prvočísel</i>
    return [2] + [i + i + 3 for i, v in enumerate(buf) if v]
</pre>

<p></p>

<pre>
#!/usr/bin/env python3

<i>"""Vstupní bod do testované aplikace."""</i>

from primes import *


if __name__ == '__main__':
    <i># pouze se ujistíme, že lze spustit funkci primes2</i>
    print(primes2(100))
</pre>

<pre>
<i>"""Implementace jednotkových testů."""</i>

from primes import primes2


def <strong>test_primes_10</strong>():
    <i>"""Otestování výpočtu seznamu prvočísel až do limitu 10."""</i>
    <i># získat seznam prvočísel až do limitu 10</i>
    p = primes2(10)
    <i># testy lze dále rozšiřovat</i>
    assert 2 in p
    assert 10 not in p
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Spuštění nástroje <strong>pytest</strong> s&nbsp;vyhodnocením výsledků</h2>

<pre>
$ pytest
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/primes1
plugins: voluptuous-1.0.2, cov-2.5.1
collected 1 item                                                               

test_primes.py .                                                         [100%]

============================== 1 passed in 0.02s ===============================
</pre>

<pre>
$ pytest -v
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/primes1
plugins: voluptuous-1.0.2, cov-2.5.1
collected 1 item                                                               

test_primes.py::test_primes_10 PASSED                                    [100%]

============================== 1 passed in 0.02s ===============================
</pre>

<pre>
    <i># vytvoření seznamu prvočísel</i>
    return [i + i + 3 for i, v in enumerate(buf) if v]
</pre>

<pre>
=================================== FAILURES ===================================
________________________________ test_primes_10 ________________________________

    def test_primes_10():
        """Otestování výpočtu seznamu prvočísel až do limitu 10."""
        # získat seznam prvočísel až do limitu 10
        p = primes2(10)
        # testy lze dále rozšiřovat
>       assert 2 in p
E       assert 2 in [3, 5, 7]

test_primes.py:11: AssertionError
=========================== short test summary info ============================
FAILED test_primes.py::test_primes_10 - assert 2 in [3, 5, 7]
============================== 1 failed in 0.08s ===============================
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Instalace a použití nového pluginu</h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Ladění v&nbsp;případě, že dochází k&nbsp;problémům při inicializaci pluginu</h2>

<pre>
PLUGIN registered: <_pytest.config.PytestPluginManager object at 0x7f909fbba630>
PLUGIN registered: <_pytest.config.Config object at 0x7f909f3c4e48>
PLUGIN registered: <module '_pytest.mark' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/mark.py'>
PLUGIN registered: <module '_pytest.main' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/main.py'>
PLUGIN registered: <module '_pytest.terminal' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/terminal.py'>
PLUGIN registered: <module '_pytest.runner' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/runner.py'>
PLUGIN registered: <module '_pytest.python' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/python.py'>
PLUGIN registered: <module '_pytest.pdb' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/pdb.py'>
PLUGIN registered: <module '_pytest.unittest' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/unittest.py'>
PLUGIN registered: <module '_pytest.capture' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/capture.py'>
PLUGIN registered: <module '_pytest.skipping' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/skipping.py'>
PLUGIN registered: <module '_pytest.tmpdir' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/tmpdir.py'>
PLUGIN registered: <module '_pytest.monkeypatch' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/monkeypatch.py'>
PLUGIN registered: <module '_pytest.recwarn' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/recwarn.py'>
PLUGIN registered: <module '_pytest.pastebin' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/pastebin.py'>
PLUGIN registered: <module '_pytest.helpconfig' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/helpconfig.py'>
PLUGIN registered: <module '_pytest.nose' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/nose.py'>
PLUGIN registered: <module '_pytest.assertion' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/assertion/__init__.py'>
PLUGIN registered: <module '_pytest.genscript' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/genscript.py'>
PLUGIN registered: <module '_pytest.junitxml' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/junitxml.py'>
PLUGIN registered: <module '_pytest.resultlog' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/resultlog.py'>
PLUGIN registered: <module '_pytest.doctest' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/doctest.py'>
PLUGIN registered: <module '_pytest.cacheprovider' from '/home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/cacheprovider.py'>
PLUGIN registered: <module 'pytest_voluptuous.plugin' from '/home/ptisnovs/.local/lib/python3.6/site-packages/pytest_voluptuous/plugin.py'>
PLUGIN registered: <module 'pytest_cov.plugin' from '/usr/lib/python3.6/site-packages/pytest_cov/plugin.py'>
PLUGIN registered: <_pytest.capture.CaptureManager object at 0x7f909aee1390>
PLUGIN registered: <Session 'pytest'>
PLUGIN registered: <_pytest.cacheprovider.LFPlugin object at 0x7f909aef1da0>
PLUGIN registered: <_pytest.terminal.TerminalReporter object at 0x7f909ac7ab38>
PLUGIN registered: <_pytest.python.FixtureManager object at 0x7f909ac2bcf8>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-2.9.2, py-1.5.2, pluggy-0.3.1
using: pytest-2.9.2 pylib-1.5.2
setuptools registered plugins:
  pytest-voluptuous-1.0.2 at /home/ptisnovs/.local/lib/python3.6/site-packages/pytest_voluptuous/plugin.py
  pytest-cov-2.5.1 at /usr/lib/python3.6/site-packages/pytest_cov/plugin.py
active plugins:
    140259131893296     : <_pytest.config.PytestPluginManager object at 0x7f909fbba630>
    pytestconfig        : <_pytest.config.Config object at 0x7f909f3c4e48>
    mark                : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/mark.py
    main                : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/main.py
    terminal            : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/terminal.py
    runner              : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/runner.py
    python              : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/python.py
    pdb                 : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/pdb.py
    unittest            : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/unittest.py
    capture             : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/capture.py
    skipping            : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/skipping.py
    tmpdir              : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/tmpdir.py
    monkeypatch         : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/monkeypatch.py
    recwarn             : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/recwarn.py
    pastebin            : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/pastebin.py
    helpconfig          : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/helpconfig.py
    nose                : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/nose.py
    assertion           : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/assertion/__init__.py
    genscript           : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/genscript.py
    junitxml            : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/junitxml.py
    resultlog           : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/resultlog.py
    doctest             : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/doctest.py
    cacheprovider       : /home/ptisnovs/.local/lib/python3.6/site-packages/_pytest/cacheprovider.py
    pytest_voluptuous   : /home/ptisnovs/.local/lib/python3.6/site-packages/pytest_voluptuous/plugin.py
    pytest_cov          : /usr/lib/python3.6/site-packages/pytest_cov/plugin.py
    capturemanager      : <_pytest.capture.CaptureManager object at 0x7f909aee1390>
    session             : <Session 'pytest'>
    lfplugin            : <_pytest.cacheprovider.LFPlugin object at 0x7f909aef1da0>
    terminalreporter    : <_pytest.terminal.TerminalReporter object at 0x7f909ac7ab38>
    funcmanage          : <_pytest.python.FixtureManager object at 0x7f909ac2bcf8>
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest, inifile: 
plugins: voluptuous-1.0.2, cov-2.5.1
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zjištění pokrytí zdrojového kódu jednotkovými testy</h2>

<pre>
pytest --cov=. > cov_all.txt
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/primes1
plugins: voluptuous-1.0.2, cov-2.5.1
collected 1 item

test_primes.py .                                                         [100%]

----------- coverage: platform linux, python 3.6.6-final-0 -----------
Name             Stmts   Miss  Cover
------------------------------------
main.py              4      4     0%
primes.py           13      2    85%
test_primes.py       5      0   100%
------------------------------------
TOTAL               22      6    73%


============================== 1 passed in 0.04s ===============================
</pre>

<pre>
pytest --cov=primes > cov_primes.txt
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/primes1
plugins: voluptuous-1.0.2, cov-2.5.1
collected 1 item

test_primes.py .                                                         [100%]

----------- coverage: platform linux, python 3.6.6-final-0 -----------
Name        Stmts   Miss  Cover
-------------------------------
primes.py      13      2    85%


============================== 1 passed in 0.04s ===============================
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Podrobnější výsledky pokrytí zdrojového kódu jednotkovými testy</h2>

<pre>
pytest --cov=primes --cov-report term-missing > cov_missing.txt
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/primes1
plugins: voluptuous-1.0.2, cov-2.5.1
collected 1 item

test_primes.py .                                                         [100%]

----------- coverage: platform linux, python 3.6.6-final-0 -----------
Name        Stmts   Miss  Cover   Missing
-----------------------------------------
primes.py      13      2    85%   11, 15


============================== 1 passed in 0.04s ===============================
</pre>

<pre>
pytest --cov=primes --cov-report html
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Doplnění jedné chybějící větve do jednotkových testů</h2>

<pre>
<i>"""Implementace jednotkových testů."""</i>

from primes import primes2


def <strong>test_primes_10</strong>():
    <i>"""Otestování výpočtu seznamu prvočísel až do limitu 10."""</i>
    <i># získat seznam prvočísel až do limitu 10</i>
    p = primes2(10)
    <i># testy lze dále rozšiřovat</i>
    assert 2 in p
    assert 10 not in p


def <strong>test_primes_0</strong>():
    <i>"""Otestování výpočtu seznamu prvočísel do limitu 0."""</i>
    p = primes2(0)
    <i># otestujeme, zda je sekvence prázdná (není zcela přesné)</i>
    assert not p
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/primes2
plugins: voluptuous-1.0.2, cov-2.5.1
collected 2 items

test_primes.py ..                                                        [100%]

----------- coverage: platform linux, python 3.6.6-final-0 -----------
Name        Stmts   Miss  Cover   Missing
-----------------------------------------
primes.py      13      1    92%   15


============================== 2 passed in 0.04s ===============================
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Využití komentáře <strong># pragma: no cover</strong></h2>

<pre>
<i>"""Výpočet seznamu prvočísel až do zadaného limitu."""</i>

<i># originální kód lze nalézt na adrese:</i>
<i># http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Odds-only_version_of_the_array_sieve_above</i>


def <strong>primes2</strong>(limit):
    <i>"""Výpočet seznamu prvočísel až do zadaného limitu."""</i>
    <i># okrajový případ</i>
    if limit &lt; 2: # pragma: no cover
        return []

    <i># druhý případ - 2 je speciálním prvočíslem</i>
    if limit &lt; 3: # pragma: no cover
        return [2]

    lmtbf = (limit - 3) // 2

    <i># naplnění tabulky, která se bude prosívat</i>
    buf = [True] * (lmtbf + 1)

    <i># vlastní prosívání</i>
    for i in range((int(limit ** 0.5) - 3) // 2 + 1):
        if buf[i]:
            p = i + i + 3
            s = p * (i + 1) + i
            buf[s::p] = [False] * ((lmtbf - s) // p + 1)

    <i># vytvoření seznamu prvočísel</i>
    return [2] + [i + i + 3 for i, v in enumerate(buf) if v]
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/primes3
plugins: voluptuous-1.0.2, cov-2.5.1
collected 2 items

test_primes.py ..                                                        [100%]

----------- coverage: platform linux, python 3.6.6-final-0 -----------
Name        Stmts   Miss  Cover   Missing
-----------------------------------------
primes.py       9      0   100%


============================== 2 passed in 0.04s ===============================
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Skutečné plné pokrytí kódu testy</h2>

<pre>
<i>"""Implementace jednotkových testů."""</i>

from primes import primes2


def <strong>test_primes_10</strong>():
    <i>"""Otestování výpočtu seznamu prvočísel až do limitu 10."""</i>
    <i># získat seznam prvočísel až do limitu 10</i>
    p = primes2(10)
    <i># testy lze dále rozšiřovat</i>
    assert 2 in p
    assert 10 not in p


def <strong>test_primes_0</strong>():
    <i>"""Otestování výpočtu seznamu prvočísel do limitu 0."""</i>
    p = primes2(0)
    <i># otestujeme, zda je sekvence prázdná (není zcela přesné)</i>
    assert not p


def <strong>test_primes_2</strong>():
    <i>"""Otestování výpočtu seznamu prvočísel do limitu 2."""</i>
    p = primes2(2)
    <i># otestujeme, zda sekvence obsahuje pouze hodnotu 2</i>
    assert 2 in p
    assert p == [2]
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/primes4
plugins: voluptuous-1.0.2, cov-2.5.1
collected 3 items

test_primes.py ...                                                       [100%]

----------- coverage: platform linux, python 3.6.6-final-0 -----------
Name        Stmts   Miss  Cover   Missing
-----------------------------------------
primes.py      13      0   100%


============================== 3 passed in 0.04s ===============================
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Benchmarky spouštěné v&nbsp;rámci jednotkových testů</h2>

<pre>
$ pip3 install --user pytest-benchmark
</pre>

<pre>
    ...
    ...
    ...
    100% |████████████████████████████████| 51kB 806kB/s 
Collecting pytest>=3.8 (from pytest-benchmark)
  Downloading https://files.pythonhosted.org/packages/6c/f9/9f2b6c672c8f8bb87a4c1bd52c1b57213627b035305aad745d015b2a62ae/pytest-5.4.2-py3-none-any.whl (247kB)
    100% |████████████████████████████████| 256kB 1.5MB/s 
Collecting py-cpuinfo (from pytest-benchmark)
  Downloading https://files.pythonhosted.org/packages/42/60/63f28a5401da733043abe7053e7d9591491b4784c4f87c339bf51215aa0a/py-cpuinfo-5.0.0.tar.gz (82kB)
    100% |████████████████████████████████| 92kB 3.1MB/s 
Collecting more-itertools>=4.0.0 (from pytest>=3.8->pytest-benchmark)
  Downloading https://files.pythonhosted.org/packages/72/96/4297306cc270eef1e3461da034a3bebe7c84eff052326b130824e98fc3fb/more_itertools-8.2.0-py3-none-any.whl (43kB)
    100% |████████████████████████████████| 51kB 2.2MB/s 
Requirement already satisfied: py>=1.5.0 in /usr/lib/python3.6/site-packages (from pytest>=3.8->pytest-benchmark)
Collecting importlib-metadata>=0.12; python_version < "3.8" (from pytest>=3.8->pytest-benchmark)
  Downloading https://files.pythonhosted.org/packages/ad/e4/891bfcaf868ccabc619942f27940c77a8a4b45fd8367098955bb7e152fb1/importlib_metadata-1.6.0-py2.py3-none-any.whl
Collecting pluggy<1.0,>=0.12 (from pytest>=3.8->pytest-benchmark)
  Downloading https://files.pythonhosted.org/packages/a0/28/85c7aa31b80d150b772fbe4a229487bc6644da9ccb7e427dd8cc60cb8a62/pluggy-0.13.1-py2.py3-none-any.whl
Requirement already satisfied: attrs>=17.4.0 in /usr/lib/python3.6/site-packages (from pytest>=3.8->pytest-benchmark)
Requirement already satisfied: wcwidth in ./.local/lib/python3.6/site-packages (from pytest>=3.8->pytest-benchmark)
Collecting packaging (from pytest>=3.8->pytest-benchmark)
  Downloading https://files.pythonhosted.org/packages/62/0a/34641d2bf5c917c96db0ded85ae4da25b6cd922d6b794648d4e7e07c88e5/packaging-20.3-py2.py3-none-any.whl
Collecting zipp>=0.5 (from importlib-metadata>=0.12; python_version < "3.8"->pytest>=3.8->pytest-benchmark)
  Downloading https://files.pythonhosted.org/packages/b2/34/bfcb43cc0ba81f527bc4f40ef41ba2ff4080e047acb0586b56b3d017ace4/zipp-3.1.0-py3-none-any.whl
Requirement already satisfied: pyparsing>=2.0.2 in /usr/lib/python3.6/site-packages (from packaging->pytest>=3.8->pytest-benchmark)
Requirement already satisfied: six in ./.local/lib/python3.6/site-packages (from packaging->pytest>=3.8->pytest-benchmark)
Installing collected packages: more-itertools, zipp, importlib-metadata, pluggy, packaging, pytest, py-cpuinfo, pytest-benchmark
  Found existing installation: pytest 2.9.2
    Uninstalling pytest-2.9.2:
      Successfully uninstalled pytest-2.9.2
  Running setup.py install for py-cpuinfo ... done
Successfully installed importlib-metadata-1.6.0 more-itertools-8.2.0 packaging-20.3 pluggy-0.13.1 py-cpuinfo-5.0.0 pytest-5.4.2 pytest-benchmark-3.2.3 zipp-3.1.0
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
<strong>benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)</strong>
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/primes4
plugins: voluptuous-1.0.2, <strong>benchmark-3.2.3</strong>, cov-2.5.1
collected 3 items

test_primes.py ...                                                       [100%]

----------- coverage: platform linux, python 3.6.6-final-0 -----------
Name        Stmts   Miss  Cover   Missing
-----------------------------------------
primes.py      13      0   100%


============================== 3 passed in 0.04s ===============================
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Jednoduchý benchmark</h2>

<pre>
<i>"""Implementace jednotkových testů."""</i>

from primes import primes2


def <strong>test_primes_10</strong>(benchmark):
    <i>"""Otestování výpočtu seznamu prvočísel až do limitu 10."""</i>
    <i># získat seznam prvočísel až do limitu 10</i>
    p = benchmark(primes2, 10)
    <i># testy lze dále rozšiřovat</i>
    assert 2 in p
    assert 10 not in p


def <strong>test_primes_100000</strong>(benchmark):
    <i>"""Otestování výpočtu seznamu prvočísel až do limitu 100000."""</i>
    <i># získat seznam prvočísel až do limitu 100000</i>
    p = benchmark(primes2, 100000)
    <i># testy lze dále rozšiřovat</i>
    assert 2 in p
    assert 10 not in p
    <i># hodnoty získány ze seznamu:</i>
    <i># https://primes.utm.edu/lists/small/10000.txt</i>
    assert 99989 in p
    assert 99991 in p


def <strong>test_primes_0</strong>(benchmark):
    <i>"""Otestování výpočtu seznamu prvočísel do limitu 0."""</i>
    p = benchmark(primes2, 0)
    <i># otestujeme, zda je sekvence prázdná (není zcela přesné)</i>
    assert not p


def <strong>test_primes_2</strong>(benchmark):
    <i>"""Otestování výpočtu seznamu prvočísel do limitu 2."""</i>
    p = benchmark(primes2, 2)
    <i># otestujeme, zda sekvence obsahuje pouze hodnotu 2</i>
    assert 2 in p
    assert p == [2]
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/primes5
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collected 4 items

test_primes.py ....                                                      [100%]

-------------------------------------------------------------------------------------------------------- benchmark: 4 tests -------------------------------------------------------------------------------------------------------
Name (time in ns)                 Min                       Max                      Mean                 StdDev                    Median                    IQR            Outliers             OPS            Rounds  Iterations
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test_primes_0                151.4600 (1.0)            524.9801 (1.0)            154.5897 (1.0)          13.1643 (1.0)            153.5499 (1.0)           0.8599 (1.0)      977;1633  6,468,736.2669 (1.0)       65215         100
test_primes_2                207.6100 (1.37)           797.1500 (1.52)           214.1976 (1.39)         19.9082 (1.51)           212.8500 (1.39)          1.5101 (1.76)     329;2333  4,668,585.6110 (0.72)      47779         100
test_primes_10             2,988.0030 (19.73)       27,753.9948 (52.87)        3,215.3491 (20.80)       723.2469 (54.94)        3,127.0029 (20.36)        54.9917 (63.95)   2480;4210    311,008.2159 (0.05)      96414           1
test_primes_100000     3,287,255.0073 (>1000.0)  3,790,438.0006 (>1000.0)  3,335,102.2510 (>1000.0)  62,347.3199 (>1000.0)  3,309,603.0093 (>1000.0)  37,557.2527 (>1000.0)     27;27        299.8409 (0.00)        291           1
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Legend:
  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.
  OPS: Operations Per Second, computed as 1 / Mean
============================== 4 passed in 5.62s ===============================
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Dvě verze algoritmu s&nbsp;jejich porovnáním</h2>

<pre>
<i># originální kód lze nalézt na adrese:</i>
<i># http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup</i>
def <strong>primes2</strong>(limit):
    is_prime = [False] * 2 + [True] * (limit - 1) 
    for n in range(int(limit**0.5 + 1.5)): # stop at ``sqrt(limit)``
        if is_prime[n]:
            for i in range(n*n, limit+1, n):
                is_prime[i] = False
    return [i for i, prime in enumerate(is_prime) if prime]
</pre>

<pre>
<i># originální kód lze nalézt na adrese:</i>
<i># http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Odds-only_version_of_the_array_sieve_above</i>
def <strong>primes2</strong>(limit):
    <i>"""Výpočet seznamu prvočísel až do zadaného limitu."""</i>
    <i># okrajový případ</i>
    if limit &lt; 2:
        return []

    <i># druhý případ - 2 je speciálním prvočíslem</i>
    if limit &lt; 3:
        return [2]

    lmtbf = (limit - 3) // 2

    <i># naplnění tabulky, která se bude prosívat</i>
    buf = [True] * (lmtbf + 1)

    <i># vlastní prosívání</i>
    for i in range((int(limit ** 0.5) - 3) // 2 + 1):
        if buf[i]:
            p = i + i + 3
            s = p * (i + 1) + i
            buf[s::p] = [False] * ((lmtbf - s) // p + 1)

    <i># vytvoření seznamu prvočísel</i>
    return [2] + [i + i + 3 for i, v in enumerate(buf) if v]
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Porovnání výsledků benchmarku</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/testing-in-python">https://github.com/tisnik/testing-in-python</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem &ndash;
alespoň prozatím &ndash; velmi malý, dnes má přibližně deseti kilobajtů),
můžete namísto toho použít odkazy na jednotlivé demonstrační příklady a jejich
části, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/">https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/">https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/">https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/">https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/">https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/">https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/">https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/">https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/">https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/">https://github.com/tisnik/testing-in-python/blob/master/unittest_mock/</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Předchozí články s&nbsp;tématem testování (nejenom) v&nbsp;Pythonu</h2>

<p>Tématem testování jsme se již na stránkách Rootu několikrát zabývali. Jedná
se mj.&nbsp;o následující články:</p>

<ol>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (druhá část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (závěrečná část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/</a>
</li>

<li>Validace datových struktur v Pythonu pomocí knihoven Schemagic a Schema<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/</a>
</li>

<li>Validace datových struktur v Pythonu (2. část)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/</a>
</li>

<li>Validace datových struktur v Pythonu (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/</a>
</li>

<li>Univerzální testovací nástroj Robot Framework<br />
<a href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/">https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/</a>
</li>

<li>Univerzální testovací nástroj Robot Framework a BDD testy<br />
<a href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework-a-bdd-testy/">https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework-a-bdd-testy/</a>
</li>

<li>Úvod do problematiky fuzzingu a fuzz testování<br />
<a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/">https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/</a>
</li>

<li>Úvod do problematiky fuzzingu a fuzz testování – složení vlastního fuzzeru<br />
<a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani-slozeni-vlastniho-fuzzeru/">https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani-slozeni-vlastniho-fuzzeru/</a>
</li>

<li>Knihovny a moduly usnadňující testování aplikací naprogramovaných v jazyce Clojure<br />
<a href="https://www.root.cz/clanky/knihovny-a-moduly-usnadnujici-testovani-aplikaci-naprogramovanych-v-jazyce-clojure/">https://www.root.cz/clanky/knihovny-a-moduly-usnadnujici-testovani-aplikaci-naprogramovanych-v-jazyce-clojure/</a>
</li>

<li>Validace dat s využitím knihovny spec v Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Testování aplikací naprogramovaných v jazyce Go<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/">https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/</a>
</li>

<li>Knihovny určené pro tvorbu testů v programovacím jazyce Go<br />
<a href="https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/">https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/</a>
</li>

<li>Testování aplikací psaných v Go s využitím knihoven Goblin a Frisby<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/">https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/</a>
</li>

<li>Testování Go aplikací s využitím knihovny GΩmega a frameworku Ginkgo<br />
<a href="https://www.root.cz/clanky/testovani-go-aplikaci-s-vyuzitim-knihovny-gomega-mega-a-frameworku-ginkgo/">https://www.root.cz/clanky/testovani-go-aplikaci-s-vyuzitim-knihovny-gomega-mega-a-frameworku-ginkgo/</a>
</li>

<li>Tvorba BDD testů s využitím jazyka Go a nástroje godog<br />
<a href="https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/">https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/</a>
</li>

<li>Použití Go pro automatizaci práce s aplikacemi s interaktivním příkazovým řádkem<br />
<a href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/">https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/</a>
</li>

<li>Použití Go pro automatizaci práce s aplikacemi s interaktivním příkazovým řádkem (dokončení)<br />
<a href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem-dokonceni/">https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem-dokonceni/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>pytest 5.4.2 na PyPi<br />
<a href="https://pypi.org/project/pytest/">https://pypi.org/project/pytest/</a>
</li>

<li>Awesome Python &ndash; testing<br />
<a href="https://github.com/vinta/awesome-python#testing">https://github.com/vinta/awesome-python#testing</a>
</li>

<li>pytest Plugins Compatibility<br />
<a href="http://plugincompat.herokuapp.com/">http://plugincompat.herokuapp.com/</a>
</li>

<li>Selenium (pro Python)<br />
<a href="https://pypi.org/project/selenium/">https://pypi.org/project/selenium/</a>
</li>

<li>Getting Started With Testing in Python<br />
<a href="https://realpython.com/python-testing/">https://realpython.com/python-testing/</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Mock - Mocking and Testing Library<br />
<a href="http://mock.readthedocs.io/en/stable/">http://mock.readthedocs.io/en/stable/</a>
</li>

<li>Python Mocking 101: Fake It Before You Make It<br />
<a href="https://blog.fugue.co/2016-02-11-python-mocking-101.html">https://blog.fugue.co/2016-02-11-python-mocking-101.html</a>
</li>

<li>Nauč se Python! - Testování<br />
<a href="http://naucse.python.cz/lessons/intro/testing/">http://naucse.python.cz/lessons/intro/testing/</a>
</li>

<li>Flexmock (dokumentace)<br />
<a href="https://flexmock.readthedocs.io/en/latest/">https://flexmock.readthedocs.io/en/latest/</a>
</li>

<li>Test Fixture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test_fixture">https://en.wikipedia.org/wiki/Test_fixture</a>
</li>

<li>Mock object (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Mock_object">https://en.wikipedia.org/wiki/Mock_object</a>
</li>

<li>Extrémní programování<br />
<a href="https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD">https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD</a>
</li>

<li>Programování řízené testy<br />
<a href="https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy">https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>Tox<br />
<a href="https://tox.readthedocs.io/en/latest/">https://tox.readthedocs.io/en/latest/</a>
</li>

<li>pytest: helps you write better programs<br />
<a href="https://docs.pytest.org/en/latest/">https://docs.pytest.org/en/latest/</a>
</li>

<li>doctest — Test interactive Python examples<br />
<a href="https://docs.python.org/dev/library/doctest.html#module-doctest">https://docs.python.org/dev/library/doctest.html#module-doctest</a>
</li>

<li>unittest — Unit testing framework<br />
<a href="https://docs.python.org/dev/library/unittest.html">https://docs.python.org/dev/library/unittest.html</a>
</li>

<li>Python namespaces<br />
<a href="https://bytebaker.com/2008/07/30/python-namespaces/">https://bytebaker.com/2008/07/30/python-namespaces/</a>
</li>

<li>Namespaces and Scopes<br />
<a href="https://www.python-course.eu/namespaces.php">https://www.python-course.eu/namespaces.php</a>
</li>

<li>Stránka projektu Robot Framework<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>GitHub repositář Robot Frameworku<br />
<a href="https://github.com/robotframework/robotframework">https://github.com/robotframework/robotframework</a>
</li>

<li>Robot Framework (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Robot_Framework">https://en.wikipedia.org/wiki/Robot_Framework</a>
</li>

<li>Tutoriál Robot Frameworku<br />
<a href="http://www.robotframeworktutorial.com/">http://www.robotframeworktutorial.com/</a>
</li>

<li>Robot Framework Documentation<br />
<a href="https://robotframework.org/robotframework/">https://robotframework.org/robotframework/</a>
</li>

<li>Robot Framework Introduction<br />
<a href="https://blog.testproject.io/2016/11/22/robot-framework-introduction/">https://blog.testproject.io/2016/11/22/robot-framework-introduction/</a>
</li>

<li>robotframework 3.1.2 na PyPi<br />
<a href="https://pypi.org/project/robotframework/">https://pypi.org/project/robotframework/</a>
</li>

<li>Robot Framework demo (GitHub)<br />
<a href="https://github.com/robotframework/RobotDemo">https://github.com/robotframework/RobotDemo</a>
</li>

<li>Robot Framework web testing demo using SeleniumLibrary<br />
<a href="https://github.com/robotframework/WebDemo">https://github.com/robotframework/WebDemo</a>
</li>

<li>Robot Framework for Mobile Test Automation Demo<br />
<a href="https://www.youtube.com/watch?v=06LsU08slP8">https://www.youtube.com/watch?v=06LsU08slP8</a>
</li>

<li>Gherkin<br />
<a href="https://cucumber.io/docs/gherkin/">https://cucumber.io/docs/gherkin/</a>
</li>

<li>Selenium<br />
<a href="https://selenium.dev/">https://selenium.dev/</a>
</li>

<li>SeleniumLibrary<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>The Practical Test Pyramid<br />
<a href="https://martinfowler.com/articles/practical-test-pyramid.html">https://martinfowler.com/articles/practical-test-pyramid.html</a>
</li>

<li>Acceptance Tests and the Testing Pyramid<br />
<a href="http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/">http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/</a>
</li>

<li>Tab-separated values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>radamsa<br />
<a href="https://gitlab.com/akihe/radamsa">https://gitlab.com/akihe/radamsa</a>
</li>

<li>Fuzzing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fuzzing">https://en.wikipedia.org/wiki/Fuzzing</a>
</li>

<li>american fuzzy lop<br />
<a href="http://lcamtuf.coredump.cx/afl/">http://lcamtuf.coredump.cx/afl/</a>
</li>

<li>Fuzzing: the new unit testing<br />
<a href="https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1">https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1</a>
</li>

<li>Corpus for github.com/dvyukov/go-fuzz examples<br />
<a href="https://github.com/dvyukov/go-fuzz-corpus">https://github.com/dvyukov/go-fuzz-corpus</a>
</li>

<li>AFL &ndash; QuickStartGuide.txt<br />
<a href="https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt">https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt</a>
</li>

<li>Introduction to Fuzzing in Python with AFL<br />
<a href="https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/">https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/</a>
</li>

<li>Writing a Simple Fuzzer in Python<br />
<a href="https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/">https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/</a>
</li>

<li>How to Fuzz Go Code with go-fuzz (Continuously)<br />
<a href="https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/">https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/</a>
</li>

<li>Golang Fuzzing: A go-fuzz Tutorial and Example<br />
<a href="http://networkbit.ch/golang-fuzzing/">http://networkbit.ch/golang-fuzzing/</a>
</li>

<li>Fuzzing Python Modules<br />
<a href="https://stackoverflow.com/questions/20749026/fuzzing-python-modules">https://stackoverflow.com/questions/20749026/fuzzing-python-modules</a>
</li>

<li>0x3 Python Tutorial: Fuzzer<br />
<a href="http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/">http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/</a>
</li>

<li>fuzzing na PyPi<br />
<a href="https://pypi.org/project/fuzzing/">https://pypi.org/project/fuzzing/</a>
</li>

<li>Fuzzing 0.3.2 documentation<br />
<a href="https://fuzzing.readthedocs.io/en/latest/">https://fuzzing.readthedocs.io/en/latest/</a>
</li>

<li>Randomized testing for Go<br />
<a href="https://github.com/dvyukov/go-fuzz">https://github.com/dvyukov/go-fuzz</a>
</li>

<li>HTTP/2 fuzzer written in Golang<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Ffuf (Fuzz Faster U Fool) – An Open Source Fast Web Fuzzing Tool<br />
<a href="https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html">https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html</a>
</li>

<li>Continuous Fuzzing Made Simple<br />
<a href="https://fuzzit.dev/">https://fuzzit.dev/</a>
</li>

<li>Halt and Catch Fire<br />
<a href="https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86">https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86</a>
</li>

<li>Random testing<br />
<a href="https://en.wikipedia.org/wiki/Random_testing">https://en.wikipedia.org/wiki/Random_testing</a>
</li>

<li>Monkey testing<br />
<a href="https://en.wikipedia.org/wiki/Monkey_testing">https://en.wikipedia.org/wiki/Monkey_testing</a>
</li>

<li>Fuzzing for Software Security Testing and Quality Assurance, Second Edition<br />
<a href="https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false">https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false</a>
</li>

<li>libFuzzer – a library for coverage-guided fuzz testing<br />
<a href="https://llvm.org/docs/LibFuzzer.html">https://llvm.org/docs/LibFuzzer.html</a>
</li>

<li>fuzzy-swagger na PyPi<br />
<a href="https://pypi.org/project/fuzzy-swagger/">https://pypi.org/project/fuzzy-swagger/</a>
</li>

<li>fuzzy-swagger na GitHubu<br />
<a href="https://github.com/namuan/fuzzy-swagger">https://github.com/namuan/fuzzy-swagger</a>
</li>

<li>Fuzz testing tools for Python<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools">https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools</a>
</li>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go</a>
</li>

<li>gofuzz: a library for populating go objects with random values<br />
<a href="https://github.com/google/gofuzz">https://github.com/google/gofuzz</a>
</li>

<li>tavor: A generic fuzzing and delta-debugging framework<br />
<a href="https://github.com/zimmski/tavor">https://github.com/zimmski/tavor</a>
</li>

<li>hypothesis na GitHubu<br />
<a href="https://github.com/HypothesisWorks/hypothesis">https://github.com/HypothesisWorks/hypothesis</a>
</li>

<li>Hypothesis: Test faster, fix more<br />
<a href="https://hypothesis.works/">https://hypothesis.works/</a>
</li>

<li>Hypothesis<br />
<a href="https://hypothesis.works/articles/intro/">https://hypothesis.works/articles/intro/</a>
</li>

<li>What is Hypothesis?<br />
<a href="https://hypothesis.works/articles/what-is-hypothesis/">https://hypothesis.works/articles/what-is-hypothesis/</a>
</li>

<li>Databáze CVE<br />
<a href="https://www.cvedetails.com/">https://www.cvedetails.com/</a>
</li>

<li>Fuzz test Python modules with libFuzzer<br />
<a href="https://github.com/eerimoq/pyfuzzer">https://github.com/eerimoq/pyfuzzer</a>
</li>

<li>Taof - The art of fuzzing<br />
<a href="https://sourceforge.net/projects/taof/">https://sourceforge.net/projects/taof/</a>
</li>

<li>JQF + Zest: Coverage-guided semantic fuzzing for Java<br />
<a href="https://github.com/rohanpadhye/jqf">https://github.com/rohanpadhye/jqf</a>
</li>

<li>http2fuzz<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Demystifying hypothesis testing with simple Python examples<br />
<a href="https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294">https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294</a>
</li>

<li>Testování<br />
<a href="http://voho.eu/wiki/testovani/">http://voho.eu/wiki/testovani/</a>
</li>

<li>Unit testing (Wikipedia.en)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing (Wikipedia.cz)<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit Test vs Integration Test<br />
<a href="https://www.youtube.com/watch?v=0GypdsJulKE">https://www.youtube.com/watch?v=0GypdsJulKE</a>
</li>

<li>TestDouble<br />
<a href="https://martinfowler.com/bliki/TestDouble.html">https://martinfowler.com/bliki/TestDouble.html</a>
</li>

<li>Test Double<br />
<a href="http://xunitpatterns.com/Test%20Double.html">http://xunitpatterns.com/Test%20Double.html</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Acceptance test–driven development<br />
<a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development">https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development</a>
</li>

<li>Gauge<br />
<a href="https://gauge.org/">https://gauge.org/</a>
</li>

<li>Gauge (software)<br />
<a href="https://en.wikipedia.org/wiki/Gauge_(software)">https://en.wikipedia.org/wiki/Gauge_(software)</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>Testing is Good. Pyramids are Bad. Ice Cream Cones are the Worst<br />
<a href="https://medium.com/@fistsOfReason/testing-is-good-pyramids-are-bad-ice-cream-cones-are-the-worst-ad94b9b2f05f">https://medium.com/@fistsOfReason/testing-is-good-pyramids-are-bad-ice-cream-cones-are-the-worst-ad94b9b2f05f</a>
</li>

<li>Články a zprávičky věnující se Pythonu<br />
<a href="https://www.root.cz/n/python/">https://www.root.cz/n/python/</a>
</li>

<li>PythonTestingToolsTaxonomy<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy">https://wiki.python.org/moin/PythonTestingToolsTaxonomy</a>
</li>

<li>Top 6 BEST Python Testing Frameworks [Updated 2020 List]<br />
<a href="https://www.softwaretestinghelp.com/python-testing-frameworks/">https://www.softwaretestinghelp.com/python-testing-frameworks/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

