<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nástroj pytest a jednotkové testy: fixtures, výjimky, parametrizace testů</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nástroj pytest a jednotkové testy: fixtures, výjimky, parametrizace testů</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrté části seriálu o testování s využitím programovacího jazyka Python se budeme opět zabývat možnostmi, které vývojářům i testerům nabízí nástroj pytest. Ukážeme si způsob parametrizace testů, zachycení výjimek a popíšeme si i použití takzvaných test fixtures.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nástroj pytest a jednotkové testy: fixtures, výjimky, parametrizace testů</a></p>
<p><a href="#k02">2. Chování jednotkových testů ve chvíli, kdy testovaná jednotka obsahuje chybu</a></p>
<p><a href="#k03">3. Použití vlastní chybové zprávy ve chvíli, kdy není podmínka splněna</a></p>
<p><a href="#k04">4. Otestování chování funkce pro výpočet průměru pro prázdný vstup</a></p>
<p><a href="#k05">5. Detekce, jestli došlo v&nbsp;testované jednotce k&nbsp;vyhození výjimky určitého typu</a></p>
<p><a href="#k06">6. Objekt nesoucí informace o vyhozené výjimce</a></p>
<p><a href="#k07">7. Parametrizace jednotkových testů</a></p>
<p><a href="#k08">8. Dekorátor <strong>@pytest.mark.parametrize</strong></a></p>
<p><a href="#k09">9. Specifikace identifikátorů použitých při konstrukci jména testu</a></p>
<p><a href="#k10">10. Umístění hodnot parametrů přímo do dekorátoru <strong>@pytest.mark.parametrize</strong></a></p>
<p><a href="#k11">11. Výpis výjimky, která vznikne v&nbsp;testovaném bloku či v&nbsp;blocích volaných</a></p>
<p><a href="#k12">12. Výběr jednotkových testů pro spuštění na základě jejich jména</a></p>
<p><a href="#k13">13. Výběr jednotkových testů na základě zadané značky</a></p>
<p><a href="#k14">14. Registrace nových značek v&nbsp;souboru <strong>pytest.ini</strong></a></p>
<p><a href="#k15">15. Registrace nových značek přímo v&nbsp;jednotkovém testu</a></p>
<p><a href="#k16">16. Test <i>fixtures</i></a></p>
<p><a href="#k17">17. Obsah následující části seriálu</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Předchozí články s&nbsp;tématem testování (nejenom) v&nbsp;Pythonu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Použití nástroje pytest pro tvorbu jednotkových testů: fixtures, výjimky, životní cyklus testu</h2>

<p>V&nbsp;první části článku budeme s&nbsp;využitím jednotkových testů ověřovat
funkčnost velmi jednoduché funkce, která pro zadaný vstup (seznam, n-tici)
obsahující numerické hodnoty vypočte průměr. Využívá se zde dvojice funkcí,
které jsou součástí základní knihovny programovacího jazyka Python, jenž je
dostupná ihned po inicializaci a spuštění interpretru. Námi vytvořená funkce se
jmenuje <strong>average</strong> a prozatím nijak netestuje svůj vstup:</p>

<pre>
<i>"""Výpočet průměru."""</i>

def <strong>average</strong>(x):
    <i>"""Výpočet průměru ze seznamu hodnot předaných v parametru x."""</i>
    return sum(x)/float(len(x))
</pre>

<p>Základní funkcionalitu modulu <strong>average</strong>, v&nbsp;němž je
stejnojmenná funkce deklarována, můžeme velmi rychle ověřit spuštěním
následujícího skriptu a pohledem na standardní výstup:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
<i>"""Vstupní bod do testované aplikace."""</i>
&nbsp;
from average import *
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># pouze se ujistíme, že lze spustit funkci average</i>
    print(average([1, 2]))
</pre>

<p>Samozřejmě je ovšem lepší vytvořit si sadu jednotkových testů, které nám
umožní ověřovat funkcionalitu a (bez)chybnost automaticky, například při každé
ucelenější změně programového kódu (což většinou odpovídá jednomu
<i>commitu</i> do repositáře). První verze jednotkových testů (uložená
v&nbsp;souboru začínajícím na <strong>test_</strong>) je prozatím triviální,
protože zavolá testovanou funkci jen jedenkrát a zjistí výsledek tohoto
volání:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
from average import average
&nbsp;
&nbsp;
def <strong>test_average_basic</strong>():
    <i>"""Otestování výpočtu průměru."""</i>
    result = average([1, 2])
    assert result == 1.5
</pre>

<p>Jednotkové testy můžeme spustit snadno:</p>

<pre>
$ <strong>pytest</strong>
</pre>

<p>S&nbsp;následujícím výsledkem:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average01
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collected 1 item
&nbsp;
test_average.py .                                                        [100%]
============================== 1 passed in 0.02s ===============================
</pre>

<p>Osobně ovšem dávám přednost poněkud podrobnějším výsledkům s&nbsp;výpisem
všech funkcí a metod, v&nbsp;nichž jsou jednotlivé testy implementovány. Toto
chování zajistí přepínač <strong>-v</strong>:</p>

<pre>
$ <strong>pytest -v</strong>
</pre>

<p>Nyní se zobrazí i jméno testovací funkce, tedy
<strong>test_average_basic</strong>:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average01
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 1 item
&nbsp;
test_average.py::test_average_basic PASSED                               [100%]
&nbsp;
============================== 1 passed in 0.02s ===============================
</pre>

<p>Popř.&nbsp;si můžeme zobrazit, do jaké míry jsou zdrojové kódy pokryty
jednotkovými testy:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average01
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collected 1 item
&nbsp;
test_average.py .                                                        [100%]
&nbsp;
----------- coverage: platform linux, python 3.6.6-final-0 -----------
Name         Stmts   Miss  Cover   Missing
------------------------------------------
average.py       2      0   100%
&nbsp;
&nbsp;
============================== 1 passed in 0.04s ===============================
</pre>

<p><div class="rs-tip-major">Poznámka: stoprocentní pokrytí ovšem v&nbsp;žádném
případě neznamená, že je testovaná jednotka (tedy funkce, metoda či třída)
skutečně plně funkční a bezchybná.</div></p>

<p>První demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Chování jednotkových testů ve chvíli, kdy testovaná jednotka obsahuje chybu</h2>

<p>Podívejme se nyní na to, jak se budou jednotkové testy chovat ve chvíli, kdy
se testovaná jednotka (což je v&nbsp;našem případě funkce pro výpočet průměru)
v&nbsp;důsledku chyby zanesené programátorem začne chovat nekorektně. Funkce je
naschvál upravena tak, že při výpočtu průměru zvyšuje dělitel o jedničku (viz
podtržený kód):</p>

<pre>
<i>"""Výpočet průměru."""</i>
&nbsp;
def <strong>average</strong>(x):
    <i>"""Výpočet průměru ze seznamu hodnot předaných v parametru x."""</i>
    return sum(x)/float(<u>1+len(x)</u>)
</pre>

<p>Jednotkové testy ovšem zůstanou nezměněny, což zde konkrétně znamená, že pro
vstupní hodnoty 1 a 2 (předané prozatím v&nbsp;seznamu nebo n-tici) očekává
výsledek 3/2:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
from average import average
&nbsp;
&nbsp;
def <strong>test_average_basic</strong>():
    <i>"""Otestování výpočtu průměru."""</i>
    result = average([1, 2])
    assert result == 1.5
</pre>

<p>Nyní dojde &ndash; zcela podle očekávání &ndash; k&nbsp;detekci chyby při
spuštění jednotkových testů:</p>

<pre>
$ <strong>pytest -v</strong>
</pre>

<p>Zajímavé je zjistit, jak vlastně vypadá výstup z&nbsp;nástroje
<strong>pytest</strong> ve chvíli, kdy k&nbsp;chybě dojde:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average02
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 1 item
&nbsp;
test_average.py::test_average_basic FAILED                               [100%]
&nbsp;
=================================== FAILURES ===================================
______________________________ test_average_basic ______________________________
&nbsp;
    def test_average_basic():
        """Otestování výpočtu průměru."""
        result = average([1, 2])
&gt;       assert result == 1.5
E       assert 1.0 == 1.5
E         +1.0
E         -1.5
&nbsp;
test_average.py:9: AssertionError
=========================== short test summary info ============================
FAILED test_average.py::test_average_basic - assert 1.0 == 1.5
============================== 1 failed in 0.04s ===============================
</pre>

<p>Povšimněte si, že se vypíše jak vlastní jednotkový test, tak i chyba a to
relativně &bdquo;chytrým&ldquo; způsobem: zobrazením aserce (popř.&nbsp;kódu,
kde vznikla výjimka) a poté porovnáním očekávaného výsledku a výsledku
aktuálního:</p>

<pre>
&gt;       assert result == 1.5
E       assert 1.0 == 1.5
E         +1.0
E         -1.5
</pre>

<p>Tyto dvě hodnoty jsou zobrazeny ve formě podobné unifikovanému diffu, což
nás může v&nbsp;tomto konkrétním případě mást, protože -1.5 neznamená zápornou
hodnotu, ale hodnotu -1.5, před kterou je umístěn znak &bdquo;-&ldquo;
znamenající &bdquo;chybí/je nahrazeno&ldquo;:</p>

<p><div class="rs-tip-major">Poznámka: obecně je poměrně špatným nápadem přímo
porovnávat dvě numerické hodnoty typu <strong>float</strong>. Ovšem
v&nbsp;tomto konkrétním případě víme (resp.&nbsp;je dobré to vědět), že hodnotu
1.5 lze při použití normy IEEE 754 (kterou Python splňuje) reprezentovat zcela
přesně, konkrétně v&nbsp;bajtech s&nbsp;obsahem:</div></p>

<pre>
3F F8 00 00 00 00 00 00
</pre>

<p>Druhý demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/</a>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Použití vlastní chybové zprávy ve chvíli, kdy není podmínka splněna</h2>

<p>V&nbsp;našem demonstračním příkladu je podmínka (resp.&nbsp;přesněji řečeno
aserce) umístěná v&nbsp;jednotkovém testu zcela zřejmá a programátorovi by
nemělo potíže zjistit, co a proč se testuje. Ovšem společně se stoupajícím
množstvím jednotkových testů (a v&nbsp;reálné aplikaci jich mohou být stovky i
tisíce) je vhodné čtenářům výsledků testů situaci co nejvíce usnadnit a přidat
do testů lidsky čitelnou zprávu. To konstrukce <strong>assert</strong>
umožňuje, protože za podmínkou může být umístěn buď řetězec nebo výraz, který
se na řetězec může převést (typicky aplikací šablony). Tento řetězec je použit
pro výpis chybové zprávy ve chvíli, kdy podmínka není splněna a tudíž
jednotkový test našel potenciální chybu. Jednoduchý příklad:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
from average import average
&nbsp;
&nbsp;
def <strong>test_average_basic</strong>():
    <i>"""Otestování výpočtu průměru."""</i>
    result = average([1, 2])
    expected = 1.5
    assert result == expected, "Očekávaná hodnota při výpočtu průměru hodnot 1 a 2 má být {}, vráceno {}".format(expected, result)
</pre>

<p>Pokud nyní tento jednotkový test spustíme, bude chybové hlášení (vypsáno
tučně) obsahovat i kontext, který může uživateli pomoci při zjišťování,
k&nbsp;jaké chybě vlastně došlo. Stejný text se zobrazí i v&nbsp;přehledu na
konci:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average03
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 1 item
&nbsp;
test_average.py::test_average_basic FAILED                               [100%]
&nbsp;
=================================== FAILURES ===================================
______________________________ test_average_basic ______________________________
&nbsp;
    def test_average_basic():
        """Otestování výpočtu průměru."""
        result = average([1, 2])
        expected = 1.5
&gt;       assert result == expected, "Očekávaná hodnota při výpočtu průměru hodnot 1 a 2 má být {}, vráceno {}".format(expected, result)
E       AssertionError: <strong>Očekávaná hodnota při výpočtu průměru hodnot 1 a 2 má být 1.5, vráceno 1.0</strong>
E       assert 1.0 == 1.5
E         +1.0
E         -1.5
&nbsp;
test_average.py:10: AssertionError
================================== short test summary info ========================================
FAILED test_average.py::test_average_basic - AssertionError: <strong>Očekávaná hodnota ... 1.5, vráceno 1.0</strong>
===================================== 1 failed in 0.04s ===========================================
</pre>

<p><div class="rs-tip-major">Poznámka: při přesměrování výsledků testů do
souboru se (pokud neprovedete jiné nastavení) používá délka řádku nastavená na
80 znaků, což v&nbsp;našem konkrétním případě znamená, že přehled testů na
konci nemusí obsahovat celé chybové hlášení.</div></p>

<p>Třetí demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/</a>.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Otestování chování funkce pro výpočet průměru pro prázdný vstup</h2>

<p>Sadu jednotkových testů si můžeme velmi snadno rozšířit o další testy
zjišťující chování testované funkce v&nbsp;mezních případech. Například by bylo
vhodné zjistit, jak se funkce pro výpočet průměru chová ve chvíli, kdy jí
nejsou předány žádné hodnoty, resp.&nbsp;přesněji řečeno když se jí předá
prázdný seznam nebo prázdná n-tice:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
from average import average
&nbsp;
&nbsp;
def <strong>test_average_basic</strong>():
    <i>"""Otestování výpočtu průměru."""</i>
    result = average([1, 2])
    expected = 1.5
    assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
&nbsp;
&nbsp;
def <strong>test_average_empty_list</strong>():
    <i>"""Otestování výpočtu průměru."""</i>
    result = average([])
    expected = 0.0
    assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
</pre>

<p>Nyní jednotkové testy znovu spustíme:</p>

<pre>
$ <strong>pytest -v</strong>
</pre>

<p>A podíváme se na jejich výsledky:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average04
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 2 items
&nbsp;
test_average.py::test_average_basic PASSED                               [ 50%]
test_average.py::test_average_empty_list FAILED                          [100%]
&nbsp;
=================================== FAILURES ===================================
___________________________ test_average_empty_list ____________________________
&nbsp;
    def test_average_empty_list():
        """Otestování výpočtu průměru."""
&gt;       result = average([])
&nbsp;
test_average.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&nbsp;
x = []
&nbsp;
    def average(x):
&gt;       return sum(x)/float(len(x))
E       <strong>ZeroDivisionError: float division by zero</strong>
&nbsp;
average.py:2: <strong>ZeroDivisionError</strong>
=========================== short test summary info ============================
FAILED test_average.py::test_average_empty_list - ZeroDivisionError: float di...
========================= 1 failed, 1 passed in 0.04s ==========================
</pre>

<p>V&nbsp;tomto případě došlo k&nbsp;vyhození výjimky typu
<strong>ZeroDivisionError</strong>, protože se při výpočtu průměru dělí nulou.
V&nbsp;navazující kapitole si ukážeme, jakým způsobem je možné tuto výjimku
odchytit (pokud budeme považovat toto chování testované funkce za žádoucí).</p>

<p>Čtvrtý demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/</a>.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Detekce, jestli došlo v&nbsp;testované jednotce k&nbsp;vyhození výjimky určitého typu</h2>

<p>Knihovna <strong>pytest</strong> umožňuje velmi elegantním způsobem napsat
jednotkový test s&nbsp;detekcí, zda v&nbsp;testované jednotce (v&nbsp;našem
případě ve funkci) došlo či naopak nedošlo k&nbsp;vyhození výjimky, a to
dokonce výjimky s&nbsp;určitým typem. Pro tento účel se používá řídicí
struktura <strong>with</strong> společně
s&nbsp;<strong>pytest.raises()</strong>:</p>

<pre>
with pytest.raises(ZeroDivisionError) as excinfo:
    result = average([])
</pre>

<p>V&nbsp;této konstrukci je <strong>ZeroDivisionError</strong> typ očekávané
výjimky a <strong>excinfo</strong> objekt, který bude obsahovat podrobnější
informace o výjimce. Pokud k&nbsp;výjimce skutečně dojde, bude test úspěšný,
pokud ovšem nedojde, nahlásí se chyba. Obě tyto možnosti jsou ukázány
v&nbsp;dalším zdrojovém kódu jednotkových testů:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
import pytest
&nbsp;
from average import average
&nbsp;
&nbsp;
def <strong>test_average_basic</strong>():
    <i>"""Otestování výpočtu průměru."""</i>
    result = average([1, 2])
    expected = 1.5
    assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
&nbsp;
&nbsp;
def <strong>test_average_empty_list</strong>():
    <i>"""Otestování výpočtu průměru pro prázdný vstup."""</i>
    with pytest.raises(ZeroDivisionError) as excinfo:
        result = average([])
&nbsp;
&nbsp;
def <strong>test_average_exception_not_raised</strong>():
    <i>"""Otestování výpočtu průměru."""</i>
    with pytest.raises(ZeroDivisionError) as excinfo:
        result = average([1, 2])
</pre>

<p>První jednotkový test již známe, druhý a třetí pak očekává výjimku. Ovšem
jen ve druhém testu skutečně dojde ke vzniku výjimky, což je ostatně patrné i
z&nbsp;výsledků běhu:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average05
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 3 items
&nbsp;
test_average.py::test_average_basic PASSED                               [ 33%]
test_average.py::test_average_empty_list PASSED                          [ 66%]
test_average.py::test_average_exception_not_raised FAILED                [100%]
&nbsp;
=================================== FAILURES ===================================
______________________ test_average_exception_not_raised _______________________
&nbsp;
    def test_average_exception_not_raised():
        """Otestování výpočtu průměru."""
        with pytest.raises(ZeroDivisionError) as excinfo:
&gt;           result = average([1, 2])
E           <strong>Failed: DID NOT RAISE &lt;class 'ZeroDivisionError'&gt;</strong>
&nbsp;
test_average.py:24: Failed
=========================== short test summary info ============================
FAILED test_average.py::test_average_exception_not_raised - Failed: DID NOT R...
========================= 1 failed, 2 passed in 0.04s ==========================
</pre>

<p>Pátý demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/</a>.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Objekt nesoucí informace o vyhozené výjimce</h2>

<p>V&nbsp;programové konstrukci <strong>with</strong>, v&nbsp;níž se očekává
vyhození výjimky, se mj.&nbsp;při splnění podmínky (výjimka vznikla) naplní i
proměnná, kterou jsme pojmenovali <strong>excinfo</strong>:</p>

<pre>
with pytest.raises(Exception) as <strong>excinfo</strong>:
    result = average([])
</pre>

<p>Tato proměnná obsahuje několik důležitých údajů o výjimce uložených ve formě
běžných atributů objektu, zejména pak:</p>

<ol>
<li><strong>type</strong></li>
<li><strong>value</strong></li>
<li><strong>traceback</strong></li>
</ol>

<p>Můžeme tedy psát (což je ovšem velmi umělá konstrukce) například:</p>

<pre>
with pytest.raises(Exception) as excinfo:
    result = average([])
<i># poměrně křehký způsob testování!</i>
assert excinfo.type == ZeroDivisionError
assert str(excinfo.value) == "float division by zero"
</pre>

<p>Na druhou stranu je někdy nutné testovat i hodnotu předávanou v&nbsp;objektu
představujícím výjimku:</p>

<pre>
with pytest.raises(ZeroDivisionError) as excinfo:
    result = average([])
assert str(excinfo.value) == "float division by zero"
</pre>

<p>V&nbsp;šestém příkladu budou všechny testy provedeny, a to aniž by byla
detekována chyba v&nbsp;testované funkci:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
import pytest
&nbsp;
from average import average
&nbsp;
&nbsp;
def <strong>test_average_basic</strong>():
    <i>"""Otestování výpočtu průměru."""</i>
    result = average([1, 2])
    expected = 1.5
    assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
&nbsp;
&nbsp;
def <strong>test_average_empty_list_1</strong>():
    <i>"""Otestování výpočtu průměru pro prázdný vstup."""</i>
    with pytest.raises(ZeroDivisionError) as excinfo:
        result = average([])
&nbsp;
&nbsp;
def <strong>test_average_empty_list_2</strong>():
    <i>"""Otestování výpočtu průměru pro prázdný vstup."""</i>
    with pytest.raises(Exception) as excinfo:
        result = average([])
    <i># poměrně křehký způsob testování!</i>
    assert excinfo.type == ZeroDivisionError
    assert str(excinfo.value) == "float division by zero"
</pre>

<p>Výsledek běhu jednotkových testů:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average06
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 3 items
&nbsp;
test_average.py::test_average_basic PASSED                               [ 33%]
test_average.py::test_average_empty_list_1 PASSED                        [ 66%]
test_average.py::test_average_empty_list_2 PASSED                        [100%]
&nbsp;
============================== 3 passed in 0.02s ===============================
</pre>

<p>Šestý demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/</a>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Parametrizace jednotkových testů</h2>

<p>Představme si, že budeme chtít rozšířit následující jednotkový test o další
vstupní hodnoty a o očekávané výsledky:</p>

<pre>
def <strong>test_average_basic</strong>():
    <i>"""Otestování výpočtu průměru."""</i>
    result = average([1, 2])
    expected = 1.5
    assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
</pre>

<p>Pochopitelně je možné vytvořit například tento kód:</p>

<pre>
def <strong>test_average_basic_more_checks</strong>():
    <i>"""Otestování výpočtu průměru."""</i>
    inputs = (
            (0, 0),
            (1, 0),
            (1, 1),
            (1, 2))
    expected_results = (0, 0.5, 1, 1.5)
&nbsp;
    for input, expected in zip(inputs, expected_results):
        result = average(input)
        assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
</pre>

<p>Nejedná se ovšem o příliš elegantní ani idiomatický způsob, jak to udělat,
protože se přímo v&nbsp;jednotkovém testu kombinuje jak vlastní test, tak i
pomocná konstrukce se smyčkou atd. V&nbsp;následujících kapitolách si ukážeme
jiné způsoby.</p>

<p><div class="rs-tip-major">Poznámka: na druhou stranu se ovšem tento způsob
používá například v&nbsp;programovacím jazyce Go, kde je naopak považován za
idiomatický:</div></p>

<pre>
type <strong>AddTest</strong> struct {
        x        int32
        y        int32
        expected int32
}
&nbsp;
func <strong>checkAdd</strong>(t *testing.T, testInputs []AddTest) {
        for _, i := range testInputs {
                result := add(i.x, i.y)
                if result != i.expected {
                        msg := fmt.Sprintf("%d + %d should be %d, got %d instead",
                                i.x, i.y, i.expected, result)
                        t.Error(msg)
                }
        }
}
&nbsp;
func <strong>TestAddBasicValues</strong>(t *testing.T) {
        var addTestInput = []AddTest{
                {0, 0, 0},
                {1, 0, 1},
                {2, 0, 2},
                {2, 1, 3},
        }
        checkAdd(t, addTestInput)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Dekorátor <strong>@pytest.mark.parametrize</strong></h2>

<p>Ukažme si nyní poněkud lepší způsob, jak zapsat jednotkový test bez nutnosti
explicitního procházení seznamem/n-ticí vstupů a očekávaných výsledků. Naši
funkci s&nbsp;testem upravíme takovým způsobem, aby akceptovala dva parametry
&ndash; vstup do testované funkce a její očekávaný výsledek:</p>

<pre>
def <strong>test_average_basic</strong>(values, expected):
    <i>"""Otestování výpočtu průměru."""</i>
    result = average(values)
    assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
</pre>

<p>Data pro tento test mohou být reprezentována například n-ticí obsahující
další n-tice; zde konkrétně dvojice vstup+očekávaný výsledek:</p>

<pre>
testdata = [
        ((1, 1), 1),
        ((1, 2), 1.5),
        ((0, 1), 0.5),
        ((1, 2, 3), 2.0),
        ((0, 10), 0.5),
]
</pre>

<p>Zbývá nám jediné &ndash; uvést dekorátor
<strong>@pytest.mark.parametrize</strong> před hlavičku testu:</p>

<pre>
@pytest.mark.parametrize("values,expected", testdata)
def <strong>test_average_basic</strong>(values, expected):
    ...
    ...
    ...
</pre>

<p>Vlastní postupné doplnění parametrů zajistí nástroj <strong>pytest</strong>.
Upravený kód jednotkových testů tedy může vypadat následovně:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
import pytest
&nbsp;
from average import average
&nbsp;
&nbsp;
testdata = [
        ((1,1), 1),
        ((1,2), 1.5),
        ((0,1), 0.5),
        ((1,2,3), 2.0),
        ((0,10), 0.5),
]
&nbsp;
&nbsp;
@pytest.mark.parametrize("values,expected", testdata)
def <strong>test_average_basic</strong>(values, expected):
    <i>"""Otestování výpočtu průměru."""</i>
    result = average(values)
    assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
&nbsp;
&nbsp;
def <strong>test_average_empty_list_1</strong>():
    <i>"""Otestování výpočtu průměru pro prázdný vstup."""</i>
    with pytest.raises(ZeroDivisionError) as excinfo:
        result = average([])
&nbsp;
&nbsp;
def <strong>test_average_empty_list_2</strong>():
    <i>"""Otestování výpočtu průměru pro prázdný vstup."""</i>
    with pytest.raises(Exception) as excinfo:
        result = average([])
    <i># poměrně křehký způsob testování!</i>
    assert excinfo.type == ZeroDivisionError
    assert str(excinfo.value) == "float division by zero"
</pre>

<p>Z&nbsp;výsledků je patrné, že se vytvořily nové testy rozlišené hodnotou
v&nbsp;hranatých závorkách (viz zvýrazněný text):</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average07
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 7 items
&nbsp;
test_average.py::test_average_basic[<strong>values0-1</strong>] PASSED                    [ 14%]
test_average.py::test_average_basic[<strong>values1-1.5</strong>] PASSED                  [ 28%]
test_average.py::test_average_basic[<strong>values2-0.5</strong>] PASSED                  [ 42%]
test_average.py::test_average_basic[<strong>values3-2.0</strong>] PASSED                  [ 57%]
test_average.py::test_average_basic[<strong>values4-0.5</strong>] FAILED                  [ 71%]
test_average.py::test_average_empty_list_1 PASSED                        [ 85%]
test_average.py::test_average_empty_list_2 PASSED                        [100%]
&nbsp;
=================================== FAILURES ===================================
_______________________ test_average_basic[values4-0.5] ________________________
&nbsp;
values = (0, 10), expected = 0.5
&nbsp;
    @pytest.mark.parametrize("values,expected", testdata)
    def test_average_basic(values, expected):
        """Otestování výpočtu průměru."""
        result = average(values)
&gt;       assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
E       AssertionError: Očekávaná hodnota 0.5, vráceno 5.0
E       assert 5.0 == 0.5
E         +5.0
E         -0.5
&nbsp;
test_average.py:21: AssertionError
=========================== short test summary info ============================
FAILED test_average.py::test_average_basic[values4-0.5] - AssertionError: Oče...
========================= 1 failed, 6 passed in 0.05s ==========================
</pre>

<p>Sedmý demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/</a>.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Specifikace identifikátorů použitých při konstrukci jména testu</h2>

<p>V&nbsp;předchozím výpisu výsledku testů jsme mohli vidět, že se testovací
framework <strong>pytest</strong> pokusil o vytvoření jména testů, do nichž
automaticky dosazoval parametry:</p>

<pre>
test_average.py::test_average_basic[<strong>values0-1</strong>] PASSED                    [ 14%]
test_average.py::test_average_basic[<strong>values1-1.5</strong>] PASSED                  [ 28%]
test_average.py::test_average_basic[<strong>values2-0.5</strong>] PASSED                  [ 42%]
test_average.py::test_average_basic[<strong>values3-2.0</strong>] PASSED                  [ 57%]
test_average.py::test_average_basic[<strong>values4-0.5</strong>] FAILED                  [ 71%]
</pre>

<p>Tato jména (identifikátory) je ovšem možné specifikovat i přímo v&nbsp;kódu
testů, což se v&nbsp;některých případech hodí (například při testování funkce
pro <i>login</i> můžeme označit správné a nesprávné heslo atd.). Pro tento účel
lze specifikovat atribut <strong>ids</strong> v&nbsp;dekorátoru
<strong>@pytest.mark.parametrize:</strong></p>

<pre>
@pytest.mark.parametrize("values,expected", testdata, ids=["1,1", "1,2", "0,1", "1,2,3", "0,10"])
def <strong>test_average_basic_2</strong>(values, expected):
    ...
    ...
    ...
</pre>

<p>Ve výsledku se objeví odlišná jména, která více odpovídají tomu, co vlastně
testujeme:</p>

<pre>
test_average.py::test_average_basic_2[<strong>1,1</strong>] PASSED                        [ 14%]
test_average.py::test_average_basic_2[<strong>1,2</strong>] PASSED                        [ 28%]
test_average.py::test_average_basic_2[<strong>0,1</strong>] PASSED                        [ 42%]
test_average.py::test_average_basic_2[<strong>1,2,3</strong>] PASSED                      [ 57%]
test_average.py::test_average_basic_2[<strong>0,10</strong>] FAILED                       [ 71%]
</pre>

<p>Pro úplnost se podívejme na úplný zdrojový kód testů:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
import pytest
&nbsp;
from average import average
&nbsp;
&nbsp;
testdata = [
        ((1,1), 1),
        ((1,2), 1.5),
        ((0,1), 0.5),
        ((1,2,3), 2.0),
        ((0,10), 0.5),
]
&nbsp;
&nbsp;
@pytest.mark.parametrize("values,expected", testdata, ids=["1,1", "1,2", "0,1", "1,2,3", "0,10"])
def <strong>test_average_basic_2</strong>(values, expected):
    <i>"""Otestování výpočtu průměru."""</i>
    result = average(values)
    assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
&nbsp;
&nbsp;
def <strong>test_average_empty_list_1</strong>():
    <i>"""Otestování výpočtu průměru pro prázdný vstup."""</i>
    with pytest.raises(ZeroDivisionError) as excinfo:
        result = average([])
&nbsp;
&nbsp;
def <strong>test_average_empty_list_2</strong>():
    <i>"""Otestování výpočtu průměru pro prázdný vstup."""</i>
    with pytest.raises(Exception) as excinfo:
        result = average([])
    <i># poměrně křehký způsob testování!</i>
    assert excinfo.type == ZeroDivisionError
    assert str(excinfo.value) == "float division by zero"
</pre>

<p>Spuštění jednotkových testů opět provedeme s&nbsp;přepínačem
<strong>-v</strong>:</p>

<pre>
$ <strong>pytest -v</strong>
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average08
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 7 items
&nbsp;
test_average.py::test_average_basic_2[<strong>1,1</strong>] PASSED                        [ 14%]
test_average.py::test_average_basic_2[<strong>1,2</strong>] PASSED                        [ 28%]
test_average.py::test_average_basic_2[<strong>0,1</strong>] PASSED                        [ 42%]
test_average.py::test_average_basic_2[<strong>1,2,3</strong>] PASSED                      [ 57%]
test_average.py::test_average_basic_2[<strong>0,10</strong>] FAILED                       [ 71%]
test_average.py::test_average_empty_list_1 PASSED                        [ 85%]
test_average.py::test_average_empty_list_2 PASSED                        [100%]
&nbsp;
=================================== FAILURES ===================================
__________________________ test_average_basic_2[0,10] __________________________
&nbsp;
values = (0, 10), expected = 0.5
&nbsp;
    @pytest.mark.parametrize("values,expected", testdata, ids=["1,1", "1,2", "0,1", "1,2,3", "0,10"])
    def test_average_basic_2(values, expected):
        """Otestování výpočtu průměru."""
        result = average(values)
&gt;       assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
E       AssertionError: Očekávaná hodnota 0.5, vráceno 5.0
E       assert 5.0 == 0.5
E         +5.0
E         -0.5
&nbsp;
test_average.py:21: AssertionError
=========================== short test summary info ============================
FAILED test_average.py::test_average_basic_2[0,10] - AssertionError: Očekávan...
========================= 1 failed, 6 passed in 0.05s ==========================
</pre>

<p>Osmý demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/</a>.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Umístění hodnot parametrů přímo do dekorátoru <strong>@pytest.mark.parametrize</strong></h2>

<p>Alternativně je možné hodnoty parametrů, které se mají předávat do
jednotkového testu, zadat přímo do dekorátoru
<strong>@pytest.mark.parametrize</strong>. Povšimněte si, že se v&nbsp;tomto
případě nejdříve uvede mapování mezi hodnotami a parametry testu a následuje
seznam nebo n-tice objektů typu <strong>pytest.param</strong>. Celý zápis je
tedy nepatrně delší, ovšem umožňuje, aby se celý programový kód související
s&nbsp;jedním jednotkovým testem spojil i s&nbsp;testovacími daty:</p>

<pre>
<i>"""Implementace jednotkových testů."""</i>
&nbsp;
import pytest
&nbsp;
from average import average
&nbsp;
&nbsp;
@pytest.mark.parametrize(
    "values,expected",
    [
        pytest.param(
            (1, 1), 1
        ),
        pytest.param(
            (1, 2), 1.5
        ),
        pytest.param(
            (0, 1), 0.5
        ),
        pytest.param(
            (1, 2, 3), 2.0
        ),
        pytest.param(
            (0, 10), 0.5
        ),
    ],
)
def <strong>test_average_basic_3</strong>(values, expected):
    <i>"""Otestování výpočtu průměru."""</i>
    result = average(values)
    assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
&nbsp;
&nbsp;
def <strong>test_average_empty_list_1</strong>():
    <i>"""Otestování výpočtu průměru pro prázdný vstup."""</i>
    with pytest.raises(ZeroDivisionError) as excinfo:
        result = average([])
&nbsp;
&nbsp;
def <strong>test_average_empty_list_2</strong>():
    <i>"""Otestování výpočtu průměru pro prázdný vstup."""</i>
    with pytest.raises(Exception) as excinfo:
        result = average([])
    <i># poměrně křehký způsob testování!</i>
    assert excinfo.type == ZeroDivisionError
    assert str(excinfo.value) == "float division by zero"
</pre>

<p>Při pohledu na výsledky jednotkových testů je patrné, že se změnila jména
automaticky vytvářených testů:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average09
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 7 items
&nbsp;
test_average.py::test_average_basic_3[<strong>values0-1</strong>] PASSED                  [ 14%]
test_average.py::test_average_basic_3[<strong>values1-1.5</strong>] PASSED                [ 28%]
test_average.py::test_average_basic_3[<strong>values2-0.5</strong>] PASSED                [ 42%]
test_average.py::test_average_basic_3[<strong>values3-2.0</strong>] PASSED                [ 57%]
test_average.py::test_average_basic_3[<strong>values4-0.5</strong>] FAILED                [ 71%]
test_average.py::test_average_empty_list_1 PASSED                        [ 85%]
test_average.py::test_average_empty_list_2 PASSED                        [100%]
&nbsp;
=================================== FAILURES ===================================
______________________ test_average_basic_3[values4-0.5] _______________________
&nbsp;
values = (0, 10), expected = 0.5
&nbsp;
    @pytest.mark.parametrize(
        "values,expected",
        [
            pytest.param(
                (1,1), 1
            ),
            pytest.param(
                (1,2), 1.5
            ),
            pytest.param(
                (0,1), 0.5
            ),
            pytest.param(
                (1,2,3), 2.0
            ),
            pytest.param(
                (0,10), 0.5
            ),
        ],
    )
    def test_average_basic_3(values, expected):
        """Otestování výpočtu průměru."""
        result = average(values)
&gt;       assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
E       AssertionError: Očekávaná hodnota 0.5, vráceno 5.0
E       assert 5.0 == 0.5
E         +5.0
E         -0.5
&nbsp;
test_average.py:31: AssertionError
=========================== short test summary info ============================
FAILED test_average.py::test_average_basic_3[values4-0.5] - AssertionError: O...
========================= 1 failed, 6 passed in 0.05s ==========================
</pre>

<p>Devátý demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/</a>.</p>

<p>Alternativní zápis s&nbsp;n-ticí namísto seznamu (což je z&nbsp;hlediska
sémantiky lepší řešení):</p>

<pre>
@pytest.mark.parametrize(
    "values,expected",
    (
        pytest.param(
            (1, 1), 1
        ),
        pytest.param(
            (1, 2), 1.5
        ),
        pytest.param(
            (0, 1), 0.5
        ),
        pytest.param(
            (1, 2, 3), 2.0
        ),
        pytest.param(
            (0, 10), 0.5
        ),
    ),
)
def <strong>test_average_basic_3</strong>(values, expected):
    <i>"""Otestování výpočtu průměru."""</i>
    result = average(values)
    assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výpis výjimky, která vznikne v&nbsp;testovaném bloku či v&nbsp;blocích volaných</h2>

<p>Nyní funkci pro výpočet průměru upravíme &ndash; a to velmi umělým způsobem.
Zařídíme totiž, že se vlastní výpočet bude provádět ve funkci nazvané
<strong>f4</strong>, ovšem sekvence volání pro získání kýženého výsledku bude
složitější: <strong>average&rarr;f1&rarr;f2&rarr;f3&rarr;f4:výpočet</strong>.
Vyzkoušíme si tak, jakým způsobem bude nástroj <strong>pytest</strong> reagovat
na situaci, kdy výjimka vznikne až ve funkci <strong>f4</strong>, která se
nikde z&nbsp;jednotkových testů přímo nevolá:</p>

<pre>
<i>"""Výpočet průměru špagetovým kódem."""</i>
&nbsp;
&nbsp;
def <strong>average</strong>(x):
    <i>"""Výpočet průměru ze seznamu hodnot předaných v parametru x."""</i>
    return f1(x)
&nbsp;
&nbsp;
def <strong>f1</strong>(x):
    return f2(x)
&nbsp;
&nbsp;
def <strong>f2</strong>(x):
    return f3(x)
&nbsp;
&nbsp;
def <strong>f3</strong>(x):
    return f4(x)
&nbsp;
&nbsp;
def <strong>f4</strong>(x):
    return sum(x)/float(len(x))
</pre>

<p>V&nbsp;jednotkových testech kromě jiného zjišťujeme, co se stane ve chvíli,
kdy se má vypočítat průměr z&nbsp;prázdného seznamu nebo prázdné n-tice. Tehdy
je vyhozena výjimka, která &bdquo;probublá&ldquo; z&nbsp;funkce nazvané
<strong>f4</strong> přes funkci <strong>average</strong> až do vlastního
jednotkového testu:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average10
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 18 items
&nbsp;
test_average.py::test_average_basic_1[values0-1] PASSED                  [  5%]
test_average.py::test_average_basic_1[values1-1.5] PASSED                [ 11%]
test_average.py::test_average_basic_1[values2-0.5] PASSED                [ 16%]
test_average.py::test_average_basic_1[values3-2.0] PASSED                [ 22%]
test_average.py::test_average_basic_1[values4-0.5] FAILED                [ 27%]
test_average.py::test_average_basic_2[1,1] PASSED                        [ 33%]
test_average.py::test_average_basic_2[1,2] PASSED                        [ 38%]
test_average.py::test_average_basic_2[0,1] PASSED                        [ 44%]
test_average.py::test_average_basic_2[1,2,3] PASSED                      [ 50%]
test_average.py::test_average_basic_2[0,10] FAILED                       [ 55%]
test_average.py::test_average_basic_3[values0-1] PASSED                  [ 61%]
test_average.py::test_average_basic_3[values1-1.5] PASSED                [ 66%]
test_average.py::test_average_basic_3[values2-0.5] PASSED                [ 72%]
test_average.py::test_average_basic_3[values3-2.0] PASSED                [ 77%]
test_average.py::test_average_basic_3[values4-0.5] FAILED                [ 83%]
test_average.py::test_average_basic_3[values5-0] FAILED                  [ 88%]
test_average.py::test_average_empty_list_1 PASSED                        [ 94%]
test_average.py::test_average_empty_list_2 PASSED                        [100%]
&nbsp;
=================================== FAILURES ===================================
______________________ test_average_basic_1[values4-0.5] _______________________
...
...
...
__________________________ test_average_basic_2[0,10] __________________________
...
...
...
______________________ test_average_basic_3[values4-0.5] _______________________
...
...
...
_______________________ test_average_basic_3[values5-0] ________________________
...
...
...
    def test_average_basic_3(values, expected):
        """Otestování výpočtu průměru."""
&gt;       result = average(values)
&nbsp;
test_average.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
average.py:5: in average
    return f1(x)
average.py:8: in f1
    return f2(x)
average.py:11: in f2
    return f3(x)
average.py:14: in f3
    return f4(x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&nbsp;
x = ()
&nbsp;
    def f4(x):
&gt;       return sum(x)/float(len(x))
E       ZeroDivisionError: float division by zero
&nbsp;
average.py:17: ZeroDivisionError
=========================== short test summary info ============================
FAILED test_average.py::test_average_basic_1[values4-0.5] - AssertionError: O...
FAILED test_average.py::test_average_basic_2[0,10] - AssertionError: Očekávan...
FAILED test_average.py::test_average_basic_3[values4-0.5] - AssertionError: O...
FAILED test_average.py::test_average_basic_3[values5-0] - ZeroDivisionError: ...
========================= 4 failed, 14 passed in 0.09s =========================
</pre>

<p>Povšimněte si, že informaci o výjimce dostaneme s&nbsp;prakticky celým
výpisem zásobníkových rámců, což pochopitelně zjednodušuje zjišťování kde a
proč vlastně k&nbsp;výjimce došlo:</p>

<pre>
test_average.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
average.py:5: in average
    return f1(x)
average.py:8: in f1
    return f2(x)
average.py:11: in f2
    return f3(x)
average.py:14: in f3
    return f4(x)
</pre>

<p>Desátý demonstrační příklad naleznete na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/</a>.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Výběr jednotkových testů pro spuštění na základě jejich jména</h2>

<p>Pokud jsou dodrženy nějaké jednotné konvence pojmenování funkcí (nebo metod)
s&nbsp;realizací jednotlivých jednotkových testů, je možné na příkazové řádce
specifikovat, které testy se mají spustit. Výběr testů může být proveden na
základě části jejich jména, což je varianta, kterou si ukážeme v&nbsp;této
kapitole. Testy, které zadanému vzoru neodpovídají, jsou přeskočeny.</p>

<p>Spuštění testů, v&nbsp;jejichž jménu se objevuje slovo &bdquo;basic&ldquo;:</p>

<pre>
$ <strong>pytest -v -k basic</strong>
</pre>

<p>Výsledky:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average11
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 18 items / 2 deselected / 16 selected
&nbsp;
test_average.py::test_average_basic_1[values0-1] PASSED                  [  6%]
test_average.py::test_average_basic_1[values1-1.5] PASSED                [ 12%]
test_average.py::test_average_basic_1[values2-0.5] PASSED                [ 18%]
test_average.py::test_average_basic_1[values3-2.0] PASSED                [ 25%]
test_average.py::test_average_basic_1[values4-0.5] FAILED                [ 31%]
test_average.py::test_average_basic_2[1,1] PASSED                        [ 37%]
test_average.py::test_average_basic_2[1,2] PASSED                        [ 43%]
test_average.py::test_average_basic_2[0,1] PASSED                        [ 50%]
test_average.py::test_average_basic_2[1,2,3] PASSED                      [ 56%]
test_average.py::test_average_basic_2[0,10] FAILED                       [ 62%]
test_average.py::test_average_basic_3[values0-1] PASSED                  [ 68%]
test_average.py::test_average_basic_3[values1-1.5] PASSED                [ 75%]
test_average.py::test_average_basic_3[values2-0.5] PASSED                [ 81%]
test_average.py::test_average_basic_3[values3-2.0] PASSED                [ 87%]
test_average.py::test_average_basic_3[values4-0.5] FAILED                [ 93%]
test_average.py::test_average_basic_3[values5-0] FAILED                  [100%]
&nbsp;
=================================== FAILURES ===================================
______________________ test_average_basic_1[values4-0.5] _______________________
&nbsp;
values = (0, 10), expected = 0.5
&nbsp;
    @pytest.mark.smoketest
    @pytest.mark.parametrize("values,expected", testdata)
    def test_average_basic_1(values, expected):
        """Otestování výpočtu průměru."""
        result = average(values)
&gt;       assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
E       AssertionError: Očekávaná hodnota 0.5, vráceno 5.0
E       assert 5.0 == 0.5
E         +5.0
E         -0.5
&nbsp;
test_average.py:28: AssertionError
__________________________ test_average_basic_2[0,10] __________________________
&nbsp;
values = (0, 10), expected = 0.5
&nbsp;
    @pytest.mark.smoketest
    @pytest.mark.parametrize("values,expected", testdata, ids=["1,1", "1,2", "0,1", "1,2,3", "0,10"])
    def test_average_basic_2(values, expected):
        """Otestování výpočtu průměru."""
        result = average(values)
&gt;       assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
E       AssertionError: Očekávaná hodnota 0.5, vráceno 5.0
E       assert 5.0 == 0.5
E         +5.0
E         -0.5
&nbsp;
test_average.py:36: AssertionError
______________________ test_average_basic_3[values4-0.5] _______________________
&nbsp;
values = (0, 10), expected = 0.5
&nbsp;
    @pytest.mark.smoketest
    @pytest.mark.parametrize(
        "values,expected",
        [
            pytest.param(
                (1, 1), 1
            ),
            pytest.param(
                (1, 2), 1.5
            ),
            pytest.param(
                (0, 1), 0.5
            ),
            pytest.param(
                (1, 2, 3), 2.0
            ),
            pytest.param(
                (0, 10), 0.5
            ),
            pytest.param(
                (), 0
            ),
        ],
    )
    def test_average_basic_3(values, expected):
        """Otestování výpočtu průměru."""
        result = average(values)
&gt;       assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
E       AssertionError: Očekávaná hodnota 0.5, vráceno 5.0
E       assert 5.0 == 0.5
E         +5.0
E         -0.5
&nbsp;
test_average.py:66: AssertionError
_______________________ test_average_basic_3[values5-0] ________________________
&nbsp;
values = (), expected = 0
&nbsp;
    @pytest.mark.smoketest
    @pytest.mark.parametrize(
        "values,expected",
        [
            pytest.param(
                (1, 1), 1
            ),
            pytest.param(
                (1, 2), 1.5
            ),
            pytest.param(
                (0, 1), 0.5
            ),
            pytest.param(
                (1, 2, 3), 2.0
            ),
            pytest.param(
                (0, 10), 0.5
            ),
            pytest.param(
                (), 0
            ),
        ],
    )
    def test_average_basic_3(values, expected):
        """Otestování výpočtu průměru."""
&gt;       result = average(values)
&nbsp;
test_average.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
average.py:6: in average
    return f1(x)
average.py:10: in f1
    return f2(x)
average.py:14: in f2
    return f3(x)
average.py:18: in f3
    return f4(x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&nbsp;
x = ()
&nbsp;
    def f4(x):
&gt;       return sum(x)/float(len(x))
E       ZeroDivisionError: float division by zero
&nbsp;
average.py:22: ZeroDivisionError
=============================== warnings summary ===============================
test_average.py:23
  /home/ptisnovs/src/python/testing-in-python/pytest/average11/test_average.py:23: PytestUnknownMarkWarning: Unknown pytest.mark.smoketest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    @pytest.mark.smoketest
&nbsp;
test_average.py:31
  /home/ptisnovs/src/python/testing-in-python/pytest/average11/test_average.py:31: PytestUnknownMarkWarning: Unknown pytest.mark.smoketest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    @pytest.mark.smoketest
&nbsp;
test_average.py:39
  /home/ptisnovs/src/python/testing-in-python/pytest/average11/test_average.py:39: PytestUnknownMarkWarning: Unknown pytest.mark.smoketest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    @pytest.mark.smoketest
&nbsp;
test_average.py:69
  /home/ptisnovs/src/python/testing-in-python/pytest/average11/test_average.py:69: PytestUnknownMarkWarning: Unknown pytest.mark.thorough - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    @pytest.mark.thorough
&nbsp;
test_average.py:76
  /home/ptisnovs/src/python/testing-in-python/pytest/average11/test_average.py:76: PytestUnknownMarkWarning: Unknown pytest.mark.thorough - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    @pytest.mark.thorough
&nbsp;
-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED test_average.py::test_average_basic_1[values4-0.5] - AssertionError: O...
FAILED test_average.py::test_average_basic_2[0,10] - AssertionError: Očekávan...
FAILED test_average.py::test_average_basic_3[values4-0.5] - AssertionError: O...
FAILED test_average.py::test_average_basic_3[values5-0] - ZeroDivisionError: ...
============ 4 failed, 12 passed, 2 deselected, 5 warnings in 0.08s ============
</pre>

<pre>
$ <strong>pytest -v -k empty</strong>
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/average11
plugins: voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collecting ... collected 18 items / 16 deselected / 2 selected
&nbsp;
test_average.py::test_average_empty_list_1 PASSED                        [ 50%]
test_average.py::test_average_empty_list_2 PASSED                        [100%]
&nbsp;
=============================== warnings summary ===============================
test_average.py:23
  /home/ptisnovs/src/python/testing-in-python/pytest/average11/test_average.py:23: PytestUnknownMarkWarning: Unknown pytest.mark.smoketest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    @pytest.mark.smoketest
&nbsp;
test_average.py:31
  /home/ptisnovs/src/python/testing-in-python/pytest/average11/test_average.py:31: PytestUnknownMarkWarning: Unknown pytest.mark.smoketest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    @pytest.mark.smoketest
&nbsp;
test_average.py:39
  /home/ptisnovs/src/python/testing-in-python/pytest/average11/test_average.py:39: PytestUnknownMarkWarning: Unknown pytest.mark.smoketest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    @pytest.mark.smoketest
&nbsp;
test_average.py:69
  /home/ptisnovs/src/python/testing-in-python/pytest/average11/test_average.py:69: PytestUnknownMarkWarning: Unknown pytest.mark.thorough - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    @pytest.mark.thorough
&nbsp;
test_average.py:76
  /home/ptisnovs/src/python/testing-in-python/pytest/average11/test_average.py:76: PytestUnknownMarkWarning: Unknown pytest.mark.thorough - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    @pytest.mark.thorough
&nbsp;
-- Docs: https://docs.pytest.org/en/latest/warnings.html
================= 2 passed, 16 deselected, 5 warnings in 0.02s =================
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Výběr jednotkových testů na základě zadané značky</h2>

<p>Jednotkové testy je možné vybrat i na základě zadané značky. Ta se opět
specifikuje dekorátorem a to například následujícím způsobem:</p>

<pre>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
[pytest]
markers =
    smoketest
    thorough
</pre>

<p>Dvanáctý demonstrační příklad, který tento soubor obsahuje, naleznete na
adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/</a>.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Registrace nových značek přímo v&nbsp;jednotkovém testu</h2>

<p>Alternativně k&nbsp;řešení popsaném <a href="#k04">v&nbsp;předchozí
kapitole</a> je možné přímo v&nbsp;jednotkovém testu vytvořit funkci nazvanou
<strong>pytest_configure</strong>, která je součástí životního cyklu testů, o
němž budeme mluvit příště. V&nbsp;této funkci lze do objektu
<strong>config</strong> s&nbsp;konfigurací jednotkových testů přidat další
řádek nebo řádky ve formátu:</p>

<pre>
def <strong>pytest_configure</strong>(config):
    <i>"""Konfigurace jednotkových testů."""</i>
    config.addinivalue_line(
        "markers", "smoketest: mark test that are performed very smoketest"
    )
</pre>

<p>Třináctý demonstrační příklad, který takto upravený test obsahuje, naleznete
na adrese <a
href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/">https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/</a>.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
</pre>

<p>Nejzajímavější je ovšem způsob použití obou výše uvedených <i>test
fixtures</i>. Ty totiž můžeme předat přímo zvolenému jednotkovému testu ve
formě parametrů &ndash; jména parametrů v&nbsp;tomto případě odpovídají jménům
funkcí, které <i>test fixtures</i> realizují (ve skutečnosti je inicializace
fixtures, jejich zavolání a předání součástí projektu <strong>pytest</strong> a
neprovádí se tedy přímo). Příklad použití je následující:</p>


<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/testing-in-python">https://github.com/tisnik/testing-in-python</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem &ndash;
alespoň prozatím &ndash; velmi malý, dnes má přibližně několik desítek
kilobajtů), můžete namísto toho použít odkazy na jednotlivé demonstrační
příklady a jejich části, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/main.py</a></td></tr>
<tr><td> 2</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru (implementovaný korektně)</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/average.py</a></td></tr>
<tr><td> 3</td><td>test_average.py</td><td>implementace jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/test_average.py</a></td></tr>
<tr><td> 4</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/run</a></td></tr>
<tr><td> 5</td><td>test</td><td>skript pro spuštění jednotkových testů i pro zjištění pokrytí kódu testy</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average01/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/main.py</a></td></tr>
<tr><td> 7</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru, který obsahuje chybu</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/average.py</a></td></tr>
<tr><td> 8</td><td>test_average.py</td><td>implementace jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/test_average.py</a></td></tr>
<tr><td> 9</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/run</a></td></tr>
<tr><td>10</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average02/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/main.py</a></td></tr>
<tr><td>12</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru, který obsahuje chybu</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/average.py</a></td></tr>
<tr><td>13</td><td>test_average.py</td><td>implementace jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/test_average.py</a></td></tr>
<tr><td>14</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/run</a></td></tr>
<tr><td>15</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average03/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/main.py</a></td></tr>
<tr><td>17</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru, která může vyhodit výjimku</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/average.py</a></td></tr>
<tr><td>18</td><td>test_average.py</td><td>implementace jednotkových testů společně s&nbsp;testem pro výpočet průměru z&nbsp;prázdného seznamu</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/test_average.py</a></td></tr>
<tr><td>19</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/run</a></td></tr>
<tr><td>20</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average04/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/main.py</a></td></tr>
<tr><td>22</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru, která může vyhodit výjimku</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/average.py</a></td></tr>
<tr><td>23</td><td>test_average.py</td><td>implementace jednotkových testů společně s&nbsp;analýzou vzniklé výjimky</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/test_average.py</a></td></tr>
<tr><td>24</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/run</a></td></tr>
<tr><td>25</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average05/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/main.py</a></td></tr>
<tr><td>27</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru, která může vyhodit výjimku</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/average.py</a></td></tr>
<tr><td>28</td><td>test_average.py</td><td>implementace jednotkových testů společně s&nbsp;analýzou vzniklé výjimky</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/test_average.py</a></td></tr>
<tr><td>29</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/run</a></td></tr>
<tr><td>30</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average06/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/main.py</a></td></tr>
<tr><td>32</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/average.py</a></td></tr>
<tr><td>33</td><td>test_average.py</td><td>implementace jednotkových testů používajících dekorátor <strong>@pytest.mark.parametrize</strong></td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/test_average.py</a></td></tr>
<tr><td>34</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/run</a></td></tr>
<tr><td>35</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average07/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>36</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/main.py</a></td></tr>
<tr><td>37</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/average.py</a></td></tr>
<tr><td>38</td><td>test_average.py</td><td>implementace jednotkových testů s&nbsp;dekorátorem <strong>@pytest.mark.parametrize</strong> a specifikací identifikátorů testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/test_average.py</a></td></tr>
<tr><td>39</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/run</a></td></tr>
<tr><td>40</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average08/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>41</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/main.py</a></td></tr>
<tr><td>42</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/average.py</a></td></tr>
<tr><td>43</td><td>test_average.py</td><td>implementace jednotkových testů, kde parametry testu jsou uvedeny přímo v&nbsp;dekorátoru</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/test_average.py</a></td></tr>
<tr><td>44</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/run</a></td></tr>
<tr><td>45</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average09/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/main.py</a></td></tr>
<tr><td>47</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru i špagetovým kódem (pro test výjimek)</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/average.py</a></td></tr>
<tr><td>48</td><td>test_average.py</td><td>implementace jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/test_average.py</a></td></tr>
<tr><td>49</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/run</a></td></tr>
<tr><td>50</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average10/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>51</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average11/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average11/main.py</a></td></tr>
<tr><td>52</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average11/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average11/average.py</a></td></tr>
<tr><td>53</td><td>test_average.py</td><td>implementace jednotkových testů, každý test má uvedenou vlastní značku</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average11/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average11/test_average.py</a></td></tr>
<tr><td>54</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average11/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average11/run</a></td></tr>
<tr><td>55</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average11/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average11/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>56</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/main.py</a></td></tr>
<tr><td>57</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/average.py</a></td></tr>
<tr><td>58</td><td>test_average.py</td><td>implementace jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/test_average.py</a></td></tr>
<tr><td>59</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/run</a></td></tr>
<tr><td>60</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average12/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>56</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/main.py</a></td></tr> <tr><td>57</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/average.py</a></td></tr>
<tr><td>57</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/average.py</a></td></tr>
<tr><td>58</td><td>test_average.py</td><td>implementace jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/test_average.py</a></td></tr>
<tr><td>59</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/run</a></td></tr>
<tr><td>60</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/test</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>main.py</td><td>vstupní bod do testované aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average14/main.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average14/main.py</a></td></tr> <tr><td>57</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average13/average.py</a></td></tr>
<tr><td>62</td><td>average.py</td><td>modul s&nbsp;funkcí pro výpočet průměru</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average14/average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average14/average.py</a></td></tr>
<tr><td>63</td><td>test_average.py</td><td>implementace jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average14/test_average.py">https://github.com/tisnik/testing-in-python/blob/master/pytest/average14/test_average.py</a></td></tr>
<tr><td>64</td><td>run</td><td>skript pro spuštění aplikace</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average14/run">https://github.com/tisnik/testing-in-python/blob/master/pytest/average14/run</a></td></tr>
<tr><td>65</td><td>test</td><td>skript pro spuštění jednotkových testů</td><td><a href="https://github.com/tisnik/testing-in-python/blob/master/pytest/average14/test">https://github.com/tisnik/testing-in-python/blob/master/pytest/average14/test</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Předchozí články s&nbsp;tématem testování (nejenom) v&nbsp;Pythonu</h2>

<p>Tématem testování jsme se již na stránkách Rootu několikrát zabývali. Jedná
se mj.&nbsp;o následující články:</p>

<ol>

<li>Použití Pythonu pro tvorbu testů: od jednotkových testů až po testy UI<br />
<a href="https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-od-jednotkovych-testu-az-po-testy-ui/">https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-od-jednotkovych-testu-az-po-testy-ui/</a>
</li>

<li>Použití Pythonu pro tvorbu testů: použití třídy Mock z knihovny unittest.mock<br />
<a href="https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-pouziti-tridy-mock-z-knihovny-unittest-mock/">https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-pouziti-tridy-mock-z-knihovny-unittest-mock/</a>
</li>

<li>Použití nástroje pytest pro tvorbu jednotkových testů a benchmarků<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-pytest-pro-tvorbu-jednotkovych-testu-a-benchmarku/">https://www.root.cz/clanky/pouziti-nastroje-pytest-pro-tvorbu-jednotkovych-testu-a-benchmarku/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (druhá část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (závěrečná část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/</a>
</li>

<li>Validace datových struktur v Pythonu pomocí knihoven Schemagic a Schema<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/</a>
</li>

<li>Validace datových struktur v Pythonu (2. část)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/</a>
</li>

<li>Validace datových struktur v Pythonu (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/</a>
</li>

<li>Univerzální testovací nástroj Robot Framework<br />
<a href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/">https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/</a>
</li>

<li>Univerzální testovací nástroj Robot Framework a BDD testy<br />
<a href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework-a-bdd-testy/">https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework-a-bdd-testy/</a>
</li>

<li>Úvod do problematiky fuzzingu a fuzz testování<br />
<a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/">https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/</a>
</li>

<li>Úvod do problematiky fuzzingu a fuzz testování – složení vlastního fuzzeru<br />
<a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani-slozeni-vlastniho-fuzzeru/">https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani-slozeni-vlastniho-fuzzeru/</a>
</li>

<li>Knihovny a moduly usnadňující testování aplikací naprogramovaných v jazyce Clojure<br />
<a href="https://www.root.cz/clanky/knihovny-a-moduly-usnadnujici-testovani-aplikaci-naprogramovanych-v-jazyce-clojure/">https://www.root.cz/clanky/knihovny-a-moduly-usnadnujici-testovani-aplikaci-naprogramovanych-v-jazyce-clojure/</a>
</li>

<li>Validace dat s využitím knihovny spec v Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Testování aplikací naprogramovaných v jazyce Go<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/">https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/</a>
</li>

<li>Knihovny určené pro tvorbu testů v programovacím jazyce Go<br />
<a href="https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/">https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/</a>
</li>

<li>Testování aplikací psaných v Go s využitím knihoven Goblin a Frisby<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/">https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/</a>
</li>

<li>Testování Go aplikací s využitím knihovny GΩmega a frameworku Ginkgo<br />
<a href="https://www.root.cz/clanky/testovani-go-aplikaci-s-vyuzitim-knihovny-gomega-mega-a-frameworku-ginkgo/">https://www.root.cz/clanky/testovani-go-aplikaci-s-vyuzitim-knihovny-gomega-mega-a-frameworku-ginkgo/</a>
</li>

<li>Tvorba BDD testů s využitím jazyka Go a nástroje godog<br />
<a href="https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/">https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/</a>
</li>

<li>Použití Go pro automatizaci práce s aplikacemi s interaktivním příkazovým řádkem<br />
<a href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/">https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/</a>
</li>

<li>Použití Go pro automatizaci práce s aplikacemi s interaktivním příkazovým řádkem (dokončení)<br />
<a href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem-dokonceni/">https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem-dokonceni/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>pytest 5.4.2 na PyPi<br />
<a href="https://pypi.org/project/pytest/">https://pypi.org/project/pytest/</a>
</li>

<li>Awesome Python &ndash; testing<br />
<a href="https://github.com/vinta/awesome-python#testing">https://github.com/vinta/awesome-python#testing</a>
</li>

<li>pytest Plugins Compatibility<br />
<a href="http://plugincompat.herokuapp.com/">http://plugincompat.herokuapp.com/</a>
</li>

<li>Selenium (pro Python)<br />
<a href="https://pypi.org/project/selenium/">https://pypi.org/project/selenium/</a>
</li>

<li>Getting Started With Testing in Python<br />
<a href="https://realpython.com/python-testing/">https://realpython.com/python-testing/</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Mock - Mocking and Testing Library<br />
<a href="http://mock.readthedocs.io/en/stable/">http://mock.readthedocs.io/en/stable/</a>
</li>

<li>Python Mocking 101: Fake It Before You Make It<br />
<a href="https://blog.fugue.co/2016-02-11-python-mocking-101.html">https://blog.fugue.co/2016-02-11-python-mocking-101.html</a>
</li>

<li>Nauč se Python! - Testování<br />
<a href="http://naucse.python.cz/lessons/intro/testing/">http://naucse.python.cz/lessons/intro/testing/</a>
</li>

<li>Flexmock (dokumentace)<br />
<a href="https://flexmock.readthedocs.io/en/latest/">https://flexmock.readthedocs.io/en/latest/</a>
</li>

<li>Test Fixture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test_fixture">https://en.wikipedia.org/wiki/Test_fixture</a>
</li>

<li>Mock object (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Mock_object">https://en.wikipedia.org/wiki/Mock_object</a>
</li>

<li>Extrémní programování<br />
<a href="https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD">https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD</a>
</li>

<li>Programování řízené testy<br />
<a href="https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy">https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>Tox<br />
<a href="https://tox.readthedocs.io/en/latest/">https://tox.readthedocs.io/en/latest/</a>
</li>

<li>pytest: helps you write better programs<br />
<a href="https://docs.pytest.org/en/latest/">https://docs.pytest.org/en/latest/</a>
</li>

<li>doctest — Test interactive Python examples<br />
<a href="https://docs.python.org/dev/library/doctest.html#module-doctest">https://docs.python.org/dev/library/doctest.html#module-doctest</a>
</li>

<li>unittest — Unit testing framework<br />
<a href="https://docs.python.org/dev/library/unittest.html">https://docs.python.org/dev/library/unittest.html</a>
</li>

<li>Python namespaces<br />
<a href="https://bytebaker.com/2008/07/30/python-namespaces/">https://bytebaker.com/2008/07/30/python-namespaces/</a>
</li>

<li>Namespaces and Scopes<br />
<a href="https://www.python-course.eu/namespaces.php">https://www.python-course.eu/namespaces.php</a>
</li>

<li>Stránka projektu Robot Framework<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>GitHub repositář Robot Frameworku<br />
<a href="https://github.com/robotframework/robotframework">https://github.com/robotframework/robotframework</a>
</li>

<li>Robot Framework (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Robot_Framework">https://en.wikipedia.org/wiki/Robot_Framework</a>
</li>

<li>Tutoriál Robot Frameworku<br />
<a href="http://www.robotframeworktutorial.com/">http://www.robotframeworktutorial.com/</a>
</li>

<li>Robot Framework Documentation<br />
<a href="https://robotframework.org/robotframework/">https://robotframework.org/robotframework/</a>
</li>

<li>Robot Framework Introduction<br />
<a href="https://blog.testproject.io/2016/11/22/robot-framework-introduction/">https://blog.testproject.io/2016/11/22/robot-framework-introduction/</a>
</li>

<li>robotframework 3.1.2 na PyPi<br />
<a href="https://pypi.org/project/robotframework/">https://pypi.org/project/robotframework/</a>
</li>

<li>Robot Framework demo (GitHub)<br />
<a href="https://github.com/robotframework/RobotDemo">https://github.com/robotframework/RobotDemo</a>
</li>

<li>Robot Framework web testing demo using SeleniumLibrary<br />
<a href="https://github.com/robotframework/WebDemo">https://github.com/robotframework/WebDemo</a>
</li>

<li>Robot Framework for Mobile Test Automation Demo<br />
<a href="https://www.youtube.com/watch?v=06LsU08slP8">https://www.youtube.com/watch?v=06LsU08slP8</a>
</li>

<li>Gherkin<br />
<a href="https://cucumber.io/docs/gherkin/">https://cucumber.io/docs/gherkin/</a>
</li>

<li>Selenium<br />
<a href="https://selenium.dev/">https://selenium.dev/</a>
</li>

<li>SeleniumLibrary<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>The Practical Test Pyramid<br />
<a href="https://martinfowler.com/articles/practical-test-pyramid.html">https://martinfowler.com/articles/practical-test-pyramid.html</a>
</li>

<li>Acceptance Tests and the Testing Pyramid<br />
<a href="http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/">http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/</a>
</li>

<li>Tab-separated values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>radamsa<br />
<a href="https://gitlab.com/akihe/radamsa">https://gitlab.com/akihe/radamsa</a>
</li>

<li>Fuzzing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fuzzing">https://en.wikipedia.org/wiki/Fuzzing</a>
</li>

<li>american fuzzy lop<br />
<a href="http://lcamtuf.coredump.cx/afl/">http://lcamtuf.coredump.cx/afl/</a>
</li>

<li>Fuzzing: the new unit testing<br />
<a href="https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1">https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1</a>
</li>

<li>Corpus for github.com/dvyukov/go-fuzz examples<br />
<a href="https://github.com/dvyukov/go-fuzz-corpus">https://github.com/dvyukov/go-fuzz-corpus</a>
</li>

<li>AFL &ndash; QuickStartGuide.txt<br />
<a href="https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt">https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt</a>
</li>

<li>Introduction to Fuzzing in Python with AFL<br />
<a href="https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/">https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/</a>
</li>

<li>Writing a Simple Fuzzer in Python<br />
<a href="https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/">https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/</a>
</li>

<li>How to Fuzz Go Code with go-fuzz (Continuously)<br />
<a href="https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/">https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/</a>
</li>

<li>Golang Fuzzing: A go-fuzz Tutorial and Example<br />
<a href="http://networkbit.ch/golang-fuzzing/">http://networkbit.ch/golang-fuzzing/</a>
</li>

<li>Fuzzing Python Modules<br />
<a href="https://stackoverflow.com/questions/20749026/fuzzing-python-modules">https://stackoverflow.com/questions/20749026/fuzzing-python-modules</a>
</li>

<li>0x3 Python Tutorial: Fuzzer<br />
<a href="http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/">http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/</a>
</li>

<li>fuzzing na PyPi<br />
<a href="https://pypi.org/project/fuzzing/">https://pypi.org/project/fuzzing/</a>
</li>

<li>Fuzzing 0.3.2 documentation<br />
<a href="https://fuzzing.readthedocs.io/en/latest/">https://fuzzing.readthedocs.io/en/latest/</a>
</li>

<li>Randomized testing for Go<br />
<a href="https://github.com/dvyukov/go-fuzz">https://github.com/dvyukov/go-fuzz</a>
</li>

<li>HTTP/2 fuzzer written in Golang<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Ffuf (Fuzz Faster U Fool) – An Open Source Fast Web Fuzzing Tool<br />
<a href="https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html">https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html</a>
</li>

<li>Continuous Fuzzing Made Simple<br />
<a href="https://fuzzit.dev/">https://fuzzit.dev/</a>
</li>

<li>Halt and Catch Fire<br />
<a href="https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86">https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86</a>
</li>

<li>Random testing<br />
<a href="https://en.wikipedia.org/wiki/Random_testing">https://en.wikipedia.org/wiki/Random_testing</a>
</li>

<li>Monkey testing<br />
<a href="https://en.wikipedia.org/wiki/Monkey_testing">https://en.wikipedia.org/wiki/Monkey_testing</a>
</li>

<li>Fuzzing for Software Security Testing and Quality Assurance, Second Edition<br />
<a href="https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false">https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false</a>
</li>

<li>libFuzzer – a library for coverage-guided fuzz testing<br />
<a href="https://llvm.org/docs/LibFuzzer.html">https://llvm.org/docs/LibFuzzer.html</a>
</li>

<li>fuzzy-swagger na PyPi<br />
<a href="https://pypi.org/project/fuzzy-swagger/">https://pypi.org/project/fuzzy-swagger/</a>
</li>

<li>fuzzy-swagger na GitHubu<br />
<a href="https://github.com/namuan/fuzzy-swagger">https://github.com/namuan/fuzzy-swagger</a>
</li>

<li>Fuzz testing tools for Python<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools">https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools</a>
</li>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go</a>
</li>

<li>gofuzz: a library for populating go objects with random values<br />
<a href="https://github.com/google/gofuzz">https://github.com/google/gofuzz</a>
</li>

<li>tavor: A generic fuzzing and delta-debugging framework<br />
<a href="https://github.com/zimmski/tavor">https://github.com/zimmski/tavor</a>
</li>

<li>hypothesis na GitHubu<br />
<a href="https://github.com/HypothesisWorks/hypothesis">https://github.com/HypothesisWorks/hypothesis</a>
</li>

<li>Hypothesis: Test faster, fix more<br />
<a href="https://hypothesis.works/">https://hypothesis.works/</a>
</li>

<li>Hypothesis<br />
<a href="https://hypothesis.works/articles/intro/">https://hypothesis.works/articles/intro/</a>
</li>

<li>What is Hypothesis?<br />
<a href="https://hypothesis.works/articles/what-is-hypothesis/">https://hypothesis.works/articles/what-is-hypothesis/</a>
</li>

<li>Databáze CVE<br />
<a href="https://www.cvedetails.com/">https://www.cvedetails.com/</a>
</li>

<li>Fuzz test Python modules with libFuzzer<br />
<a href="https://github.com/eerimoq/pyfuzzer">https://github.com/eerimoq/pyfuzzer</a>
</li>

<li>Taof - The art of fuzzing<br />
<a href="https://sourceforge.net/projects/taof/">https://sourceforge.net/projects/taof/</a>
</li>

<li>JQF + Zest: Coverage-guided semantic fuzzing for Java<br />
<a href="https://github.com/rohanpadhye/jqf">https://github.com/rohanpadhye/jqf</a>
</li>

<li>http2fuzz<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Demystifying hypothesis testing with simple Python examples<br />
<a href="https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294">https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294</a>
</li>

<li>Testování<br />
<a href="http://voho.eu/wiki/testovani/">http://voho.eu/wiki/testovani/</a>
</li>

<li>Unit testing (Wikipedia.en)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing (Wikipedia.cz)<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit Test vs Integration Test<br />
<a href="https://www.youtube.com/watch?v=0GypdsJulKE">https://www.youtube.com/watch?v=0GypdsJulKE</a>
</li>

<li>TestDouble<br />
<a href="https://martinfowler.com/bliki/TestDouble.html">https://martinfowler.com/bliki/TestDouble.html</a>
</li>

<li>Test Double<br />
<a href="http://xunitpatterns.com/Test%20Double.html">http://xunitpatterns.com/Test%20Double.html</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Acceptance test–driven development<br />
<a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development">https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development</a>
</li>

<li>Gauge<br />
<a href="https://gauge.org/">https://gauge.org/</a>
</li>

<li>Gauge (software)<br />
<a href="https://en.wikipedia.org/wiki/Gauge_(software)">https://en.wikipedia.org/wiki/Gauge_(software)</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>Testing is Good. Pyramids are Bad. Ice Cream Cones are the Worst<br />
<a href="https://medium.com/@fistsOfReason/testing-is-good-pyramids-are-bad-ice-cream-cones-are-the-worst-ad94b9b2f05f">https://medium.com/@fistsOfReason/testing-is-good-pyramids-are-bad-ice-cream-cones-are-the-worst-ad94b9b2f05f</a>
</li>

<li>Články a zprávičky věnující se Pythonu<br />
<a href="https://www.root.cz/n/python/">https://www.root.cz/n/python/</a>
</li>

<li>PythonTestingToolsTaxonomy<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy">https://wiki.python.org/moin/PythonTestingToolsTaxonomy</a>
</li>

<li>Top 6 BEST Python Testing Frameworks [Updated 2020 List]<br />
<a href="https://www.softwaretestinghelp.com/python-testing-frameworks/">https://www.softwaretestinghelp.com/python-testing-frameworks/</a>
</li>

<li>pytest-print 0.1.3<br />
<a href="https://pypi.org/project/pytest-print/">https://pypi.org/project/pytest-print/</a>
</li>

<li>pytest fixtures: explicit, modular, scalable<br />
<a href="https://docs.pytest.org/en/latest/fixture.html">https://docs.pytest.org/en/latest/fixture.html</a>
</li>

<li>PyTest Tutorial: What is, Install, Fixture, Assertions<br />
<a href="https://www.guru99.com/pytest-tutorial.html">https://www.guru99.com/pytest-tutorial.html</a>
</li>

<li>Pytest - Fixtures<br />
<a href="https://www.tutorialspoint.com/pytest/pytest_fixtures.htm">https://www.tutorialspoint.com/pytest/pytest_fixtures.htm</a>
</li>

<li>Marking test functions with attributes<br />
<a href="https://docs.pytest.org/en/latest/mark.html">https://docs.pytest.org/en/latest/mark.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

