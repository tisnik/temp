<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Testování aplikací s využitím nástroje Hypothesis (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Testování aplikací s využitím nástroje Hypothesis (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V deváté části seriálu o tvorbě testů s&nbsp;využitím programovacího jazyka Python dokončíme popis některých možností poskytovaných knihovnou Hypothesis při generování dat pro jednotkové testy i při zpracování výsledků testů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Test výpočtu faktoriálu</a></p>
<p><a href="#k02">2. Omezení vstupních hodnot v&nbsp;testech</a></p>
<p><a href="#k03">3. Využití metody <strong>filter</strong> ve strategiích</a></p>
<p><a href="#k04">4. Další demonstrační příklad &ndash; test algoritmu na existenci prvočísel</a></p>
<p><a href="#k05">5. Využití metody <strong>map</strong> ve strategiích</a></p>
<p><a href="#k06">6. Vytvoření specifických vstupů pro test prvočísel</a></p>
<p><a href="#k07">7. Strategie <strong>builds</strong></a></p>
<p><a href="#k08">8. Testy s&nbsp;orákulem</a></p>
<p><a href="#k09">9. Orákulum a test na predikát pro prvočísla</a></p>
<p><a href="#k10">10. Použití regulárního výrazu definujícího vlastnosti generovaných testovacích dat</a></p>
<p><a href="#k11">11. Další příklady použití regulárních výrazů v&nbsp;testech</a></p>
<p><a href="#k12">12. Generátor dat pro kód používající knihovnu NumPy</a></p>
<p><a href="#k13">13. Vícerozměrná pole</a></p>
<p><a href="#k14">14. Pole pravdivostních hodnot</a></p>
<p><a href="#k15">15. Trojrozměrná pole s&nbsp;prvky typu <strong>half</strong></a></p>
<p><a href="#k16">16. Bližší specifikace hodnot prvků v&nbsp;generovaných polích</a></p>
<p><a href="#k17">17. Závěr</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Předchozí články s&nbsp;tématem testování (nejenom) v&nbsp;Pythonu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Test výpočtu faktoriálu</h2>

<p>V&nbsp;úvodní kapitole si připomeneme, jakým způsobem jsou vlastně testy
vytvářené s&nbsp;využitím nástroje <i>Hypothesis</i> konstruovány. <a
href="https://www.root.cz/clanky/testovani-aplikaci-s-vyuzitim-nastroje-hypothesis/">Minule</a>
jsme v&nbsp;demonstračních příkladech používali algoritmus pro bublinkové
řazení a taktéž jednoduchou šifru typu <i>ROT-13</i>, takže si dnes pro změnu
ukážeme odlišný algoritmus. Bude se jednat o &bdquo;školní&ldquo; výpočet
faktoriálu založený na použití rekurze. S&nbsp;tímto algoritmem jsme se již
setkali při popisu nástroje <i>Mypy</i>:</p>

<pre>
<i>"""Výpočet faktoriálu."""</i>
&nbsp;
&nbsp;
def <strong>factorial</strong>(n):
    <i>"""Rekurzivní výpočet faktoriálu."""</i>
    assert isinstance(n, int), "Integer expected"
&nbsp;
    if n &lt; 0:
        return None
    if n == 0:
        return 1
    result = n * factorial(n-1)
&nbsp;
    assert isinstance(result, int), "Internal error in factorial computation"
    return result
</pre>

<p>Jednoduchý test s&nbsp;hypotézou může být založen na faktu, že faktoriál by
měl být kladné číslo a současně je jeho hodnota větší nebo rovna vstupu. Jedná
se o značně neurčitý test, ale jedná se prozatím o první krok:</p>

<pre>
<i>"""Jednotkové testy pro výpočet faktoriálu."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import integers
&nbsp;
from factorial import factorial
&nbsp;
&nbsp;
@given(integers())
def <strong>test_factorial</strong>(value):
    <i>"""Jednotkový test pro výpočet faktoriálu."""</i>
    assert factorial(value) &gt; 0
    assert factorial(value) &gt;= value
</pre>

<p>Pokus o spuštění testů:</p>

<pre>
$ <strong>pytest -v</strong>
</pre>

<p>však povede k&nbsp;pádu, a to z&nbsp;toho důvodu, že jsme prozatím
nepočítali s&nbsp;tím, jak jsou ošetřovány záporné vstupy:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -&gt; database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/factorial_1/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/factorial_1
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item
&nbsp;
factorial_test.py::test_factorial FAILED                                 [100%]
&nbsp;
=================================== FAILURES ===================================
________________________________ test_factorial ________________________________
&nbsp;
    @given(integers())
&gt;   def test_factorial(value):
&nbsp;
factorial_test.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&nbsp;
<strong>value = -1</strong>
&nbsp;
    @given(integers())
    def test_factorial(value):
        """Jednotkový test pro výpočet faktoriálu."""
&gt;       assert factorial(value) &gt; 0
E       <strong>TypeError: '&gt;' not supported between instances of 'NoneType' and 'int'</strong>
&nbsp;
factorial_test.py:12: TypeError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_factorial(
    value=-1,
)
=========================== short test summary info ============================
FAILED factorial_test.py::test_factorial - TypeError: '&gt;' not supported betwe...
============================== 1 failed in 0.07s ===============================
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Omezení vstupních hodnot v&nbsp;testech</h2>

<p>Testy však pochopitelně můžeme upravit, například takovým způsobem, aby se
pro kladné hodnoty a nulu používal již v&nbsp;předchozí kapitole popsaný test
se dvěma hypotézami a pro hodnoty záporné naopak test na výslednou hodnotu
<strong>None</strong>. Rozsah generovaných vstupů lze velmi snadno omezit
s&nbsp;využitím nepovinných parametrů <strong>min_value</strong> a
<strong>max_value</strong> předávaných konstruktoru
<strong>integers</strong>:</p>

<pre>
<i>"""Jednotkové testy pro výpočet faktoriálu."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import integers
&nbsp;
from factorial import factorial
&nbsp;
&nbsp;
@given(integers(min_value=0))
def <strong>test_factorial</strong>(value):
    <i>"""Jednotkový test pro výpočet faktoriálu."""</i>
    assert factorial(value) &gt; 0
    assert factorial(value) &gt;= value
&nbsp;
&nbsp;
@given(integers(max_value=-1))
def <strong>test_factorial</strong>(value):
    <i>"""Jednotkový test pro výpočet faktoriálu."""</i>
    assert factorial(value) is None
</pre>

<p>Nyní již otestování proběhne s&nbsp;pořádku, i když stále nevíme, zda se
vůbec počítá správný faktoriál či zda se pouze například nevrací původní
hodnota (pro kladné vstupy):</p>

<pre>
$ <strong>pytest -v</strong>
&nbsp;
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -&gt; database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/factorial_2/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/factorial_2
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item
&nbsp;
factorial_test.py::test_factorial PASSED                                 [100%]
&nbsp;
============================== 1 passed in 0.11s ===============================
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Využití metody <strong>filter</strong> ve strategiích</h2>

<p>Už v&nbsp;předchozím článku jsme si ukázali, že při generování vstupních
hodnot můžeme použít i metodu <strong>filter</strong>, která hodnoty omezí na
základě nějaké zadané podmínky či podmínek. I mimo testy si můžeme chování této
metody ověřit:</p>

<pre>
from hypothesis.strategies import lists, integers
&nbsp;
g = lists(integers().filter(lambda x: x &gt; 0 and x % 2 == 0))
&nbsp;
for _ in range(10):
    print(g.example())
</pre>

<p>Příklad výsledku (bude se lišit v&nbsp;každém spuštění, protože hodnoty jsou
generovány pseudonáhodně):</p>

<pre>
[]
[]
[]
[114, 297635958, 36382594596201776729035817479773596128]
[]
[]
[1584, 20756, 27064]
[]
[]
[6256, 16432]
</pre>

<p>Můžeme se tedy pokusit generovat celá čísla z&nbsp;plného rozsahu (daného
typu v&nbsp;Pythonu) a následně generované hodnoty filtrovat &ndash; poprvé
použijeme jen čísla větší nebo rovna nule a podruhé pouze záporná čísla:</p>

<pre>
<i>"""Jednotkové testy pro výpočet faktoriálu."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import integers
&nbsp;
from factorial import factorial
&nbsp;
&nbsp;
@given(integers().filter(lambda x: x &gt;= 0))
def <strong>test_factorial</strong>(value):
    <i>"""Jednotkový test pro výpočet faktoriálu."""</i>
    assert factorial(value) &gt; 0
    assert factorial(value) &gt;= value
&nbsp;
&nbsp;
@given(integers().filter(lambda x: x &lt; 0))
def <strong>test_factorial</strong>(value):
    <i>"""Jednotkový test pro výpočet faktoriálu."""</i>
    assert factorial(value) is None
</pre>

<p>Testy by opět měly projít bez chyby, ale možná si povšimnete, že jejich běh
bude trvat delší dobu:</p>

<pre>
$ <strong>pytest -v</strong>
&nbsp;
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -&gt; database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/factorial_3/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/factorial_3
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item
&nbsp;
factorial_test.py::test_factorial PASSED                                 [100%]
&nbsp;
============================== 1 passed in 0.17s ===============================
</pre>

<p><div class="rs-tip-major">Poznámka: tento způsob je méně efektivní, než
použití <strong>min_value</strong> a <strong>max_value</strong>, na druhou
stranu je ovšem obecnější, což si ostatně ukážeme v&nbsp;navazujících
kapitolách.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Další demonstrační příklad &ndash; test algoritmu na existenci prvočísel</h2>

<p>Existuje ovšem i lepší způsob použití metody <strong>filter</strong>. Můžeme
se například pokusit otestovat funkci, která pro zadanou celočíselnou hodnotu
vrátí logickou hodnotu <strong>True</strong> v&nbsp;případě, že vstup je
prvočíslem a <strong>False</strong> v&nbsp;případě, že se jedná o číslo složené
popř.&nbsp;o záporné číslo. Jedna z&nbsp;možných implementací takové funkce
může vypadat následovně:</p>

<pre>
<i>"""Test, zda je vstupní hodnota prvočíslem."""</i>
&nbsp;
def <strong>is_prime</strong>(x):
    <i>"""Test, zda je vstupní hodnota prvočíslem."""</i>
    if x == 2:
        return True
    if x &lt; 2 or x % 2 == 0:
        return False
    return not any(x % y == 0 for y in range(3, int(x**0.5) + 1, 2))
</pre>

<p>První varianta testů může být založena na zjištění, zda se pro sudé hodnoty
(s&nbsp;výjimkou čísla 2) vždy vrátí hodnota <strong>False</strong>:</p>

<pre>
<i>"""Jednotkové testy pro funkci is_prime()."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import integers
&nbsp;
from is_prime import is_prime
&nbsp;
&nbsp;
@given(integers(min_value=3).filter(lambda x: x % 2 == 0))
def <strong>test_is_prime_for_even_values</strong>(value):
    <i>"""Jednotkový test pro funkci is_prime()."""</i>
    assert not is_prime(value)
</pre>

<p>Testy se vstupy a podmínkami generovanými nástrojem <i>Hypothesis</i> by
měly proběhnout bez chyby:</p>

<pre>
$ <strong>pytest -v</strong>
&nbsp;
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -&gt; database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/primes_1/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/primes_1
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item
&nbsp;
is_prime_test.py::test_is_prime_for_even_values PASSED                   [100%]
&nbsp;
============================== 1 passed in 0.13s ===============================
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Využití metody <strong>map</strong> ve strategiích</h2>

<p>Předchozí test, v&nbsp;němž jsme filtrovali ze všech kladných čísel větších
než 2 ty hodnoty, které jsou sudé, ovšem můžeme i otočit a naopak akceptovat
všechna kladná čísla větší než 2 a tyto čísla můžeme násobit dvěma.
K&nbsp;tomuto účelu slouží metoda <strong>map</strong>. Test tedy bude funkci
<strong>is_prime</strong> předávat pseudonáhodně vybrané hodnoty z&nbsp;množiny
(4, 6, 8, 10, ...):</p>

<pre>
<i>"""Jednotkové testy pro funkci is_prime()."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import integers
&nbsp;
from is_prime import is_prime
&nbsp;
&nbsp;
@given(integers(min_value=2).map(lambda x: 2 * x))
def <strong>test_is_prime_for_even_values</strong>(value):
    <i>"""Jednotkový test pro funkci is_prime()."""</i>
    assert not is_prime(value)
</pre>

<p>Testy by v&nbsp;tomto případě opět měly proběhnout bez chyby:</p>

<pre>
$ <strong>pytest -v</strong>
&nbsp;
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -&gt; database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/primes_2/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/primes_2
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item
&nbsp;
is_prime_test.py::test_is_prime_for_even_values PASSED                   [100%]
&nbsp;
============================== 1 passed in 0.11s ===============================
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření specifických vstupů pro test prvočísel</h2>

<p>Pro lepší otestování funkce pro výpočet prvočísel by samozřejmě bylo lepší
mít k&nbsp;dispozici lépe vytvořené vstupy. Pro prvních čtyřicet prvočísel
existuje polynom sestavený slavným Eulerem &ndash; viz též <a
href="https://en.wikipedia.org/wiki/Formula_for_primes#Prime_formulas_and_polynomial_functions">Prime_formulas_and_polynomial_functions</a>.
Pokud se za <strong>x</strong> dosazují hodnoty od 0 do 39, bude výsledkem x-té
prvočíslo. Test tedy můžeme (alespoň v&nbsp;malém rozsahu vstupů) napsat i
následovně:</p>

<pre>
<i>"""Jednotkové testy pro funkci is_prime()."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import integers
&nbsp;
from is_prime import is_prime
&nbsp;
&nbsp;
@given(integers(min_value=0, max_value=39).map(lambda x: x ** 2 + x + 41))
def <strong>test_is_prime_for_even_values</strong>(value):
    <i>"""Jednotkový test pro funkci is_prime()."""</i>
    assert is_prime(value)
</pre>

<p>Otestování by opět mělo proběhnout v&nbsp;pořádku.</p>

<p><div class="rs-tip-major">Poznámka: podobných polynomů existuje i více,
bližší popis naleznete například na stránce <a
href="https://mathworld.wolfram.com/Prime-GeneratingPolynomial.html">https://mathworld.wolfram.com/Prime-GeneratingPolynomial.html</a>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Strategie <strong>builds</strong></h2>

<p>Nástroj Hypothesis podporuje i strategii nazvanou <strong>builds</strong>,
která umožňuje, aby byly vstupní hodnoty pro testy vytvářeny
(resp.&nbsp;přesněji řečeno generovány) nějakým objektem nebo funkcí. Poněkud
umělé použití této strategie můžeme vidět v&nbsp;dalším demonstračním příkladu,
ve kterém se testovaná funkce <strong>is_prime</strong> volá s&nbsp;náhodně
vybranými prvočísly. Z&nbsp;časových důvodů je test omezen na prvních sto
prvočísel, ovšem pochopitelně je možné tuto hodnotu snadno zvýšit. Prvočísla
jsou vypočtena pomocnou funkcí nazvanou <strong>generate_nth_prime</strong>,
která si mezivýsledky (již vypočtená menší prvočísla) ukládá do mezipaměti
reprezentovanou seznamem pojmenovaným <strong>cache</strong>. Pochopitelně se
ovšem v&nbsp;žádném případě nejedná o rychlé ani paměťově efektivní řešení:</p>

<pre>
<i>"""Jednotkové testy pro funkci is_prime()."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import integers, builds
&nbsp;
from is_prime import is_prime
&nbsp;
&nbsp;
cache = [2, 3]
&nbsp;
&nbsp;
def <strong>generate_nth_prime</strong>(n):
    <i>"""Vygenerování n-tého prvočísla (lze získat z cache)."""</i>
    if n &lt; len(cache):
        return cache[n]
&nbsp;
    x = cache[-1]
&nbsp;
    while len(cache) &lt; n:
        <i># zde je pochopitelně vhodné použít jiný algoritmus, než ten, který je testován!!!</i>
        if not any(x % y == 0 for y in range(3, int(x**0.5) + 1, 2)):
            cache.append(x)
        x += 2
    return cache[-1]
&nbsp;
&nbsp;
@given(builds(generate_nth_prime, integers(min_value=1, max_value=100)))
def <strong>test_is_prime_for_even_values</strong>(value):
    <i>"""Jednotkový test pro funkci is_prime()."""</i>
    assert is_prime(value)
</pre>

<p><div class="rs-tip-major">Poznámka: funkci
<strong>generate_nth_prime</strong> můžete najít v&nbsp;jiné podobě na
internetu, ovšem pracuje chybně, což si ostatně můžete snadno ověřit. Zajímavý
a pro dnešní &bdquo;internety&ldquo; asi i dosti typický je fakt, že je tuto
chybně napsanou funkci možné vidět hned na několika stránkách s&nbsp;naprosto
stejnou strukturou i s&nbsp;totožným chybným chováním :-)</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Testy s&nbsp;orákulem</h2>

<p>O testech s&nbsp;orákulem jsme se zmínili minule. V&nbsp;případě, že není
možné orákulum implementovat formou algoritmu, můžeme si v&nbsp;mnoha případech
vypomoci předpočítanými hodnotami. A tento přístup je ukázán i v&nbsp;dalším
demonstračním příkladu, v&nbsp;němž testujeme funkci pro výpočet faktoriálu
oproti hodnotám, které byly získány dopředu a především jiným způsobem, než
testovaným algoritmem (v&nbsp;tomto případě jde o dosti umělý příklad, který
vlastně vůbec nevyžaduje použití <i>Hypothesis</i>):</p>

<pre>
<i>"""Jednotkové testy pro výpočet faktoriálu."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import lists, integers
&nbsp;
from factorial import factorial
&nbsp;
precomputed = [
    1,
    2,
    6,
    24,
    120,
    720,
    5040,
    40320,
    362880,
    3628800,
    39916800,
    479001600,
    6227020800,
    87178291200,
    1307674368000,
    20922789888000,
    355687428096000,
    6402373705728000,
    121645100408832000,
    2432902008176640000,
    51090942171709440000,
    1124000727777607680000,
    25852016738884976640000,
    620448401733239439360000,
    15511210043330985984000000,
    403291461126605635584000000,
    10888869450418352160768000000,
    304888344611713860501504000000,
    8841761993739701954543616000000,
    265252859812191058636308480000000,
]
&nbsp;
&nbsp;
@given(integers(min_value=1, max_value=30))
def <strong>test_factorial</strong>(value):
    <i>"""Jednotkový test pro výpočet faktoriálu."""</i>
    assert factorial(value) == precomputed[value]
&nbsp;
&nbsp;
@given(integers().filter(lambda x: x &lt; 0))
def <strong>test_factorial</strong>(value):
    <i>"""Jednotkový test pro výpočet faktoriálu."""</i>
    assert factorial(value) is None
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Orákulum a test na predikát pro prvočísla</h2>

<p>Naprosto stejným způsobem ovšem můžeme získat tabulku s&nbsp;prvočísly a
opět posunout Hypothesis směrem ke klasickým jednotkovým testům řízeným
tabulkami:</p>

<pre>
<i>"""Jednotkové testy pro funkci is_prime()."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import integers, builds
&nbsp;
from is_prime import is_prime
&nbsp;
&nbsp;
precomputed = [
    2,
    3,
    5,
    7,
    11,
    13,
    17,
    19,
    23,
    29,
    31,
    37,
    41,
    43,
    47,
    53,
    59,
    61,
    67,
    71,
    73,
    79,
    83,
    89,
    97,
    101
]
&nbsp;
&nbsp;
@given(integers(min_value=1, max_value=100))
def <strong>test_is_prime</strong>(value):
    <i>"""Jednotkový test pro funkci is_prime()."""</i>
    assert is_prime(value) == (value in precomputed)
</pre>

<p>Lepší je ovšem (pokud je to pochopitelně možné &ndash; a nyní to možné je)
namísto statické tabulky použít tabulku vypočtenou až do zadaného limitu.
K&nbsp;tomuto účelu můžeme použít například algoritmus, s&nbsp;nímž jsme se již
v&nbsp;tomto seriálu setkali:</p>

<pre>
<i>"""Jednotkové testy pro funkci is_prime()."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import integers, builds
&nbsp;
from is_prime import is_prime
&nbsp;
&nbsp;
<i># originální kód lze nalézt na adrese:</i>
<i># http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Odds-only_version_of_the_array_sieve_above</i>
def <strong>primes</strong>(limit):
    <i>"""Výpočet seznamu prvočísel až do zadaného limitu."""</i>
    <i># okrajový případ</i>
    if limit &lt; 2:
        return []
&nbsp;
    <i># druhý případ - 2 je speciálním prvočíslem</i>
    if limit &lt; 3:
        return [2]
&nbsp;
    lmtbf = (limit - 3) // 2
&nbsp;
    <i># naplnění tabulky, která se bude prosívat</i>
    buf = [True] * (lmtbf + 1)
&nbsp;
    <i># vlastní prosívání</i>
    for i in range((int(limit ** 0.5) - 3) // 2 + 1):
        if buf[i]:
            p = i + i + 3
            s = p * (i + 1) + i
            buf[s::p] = [False] * ((lmtbf - s) // p + 1)
&nbsp;
    <i># vytvoření seznamu prvočísel</i>
    return [2] + [i + i + 3 for i, v in enumerate(buf) if v]
&nbsp;
&nbsp;
LIMIT = 1000
&nbsp;
precomputed = primes(LIMIT)
&nbsp;
&nbsp;
@given(integers(min_value=1, max_value=LIMIT))
def <strong>test_is_prime</strong>(value):
    <i>"""Jednotkový test pro funkci is_prime()."""</i>
    assert is_prime(value) == (value in precomputed)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Použití regulárního výrazu definujícího vlastnosti generovaných testovacích dat</h2>

<p>Nástroj Hypothesis nabízí i velmi mocný nástroj &ndash; možnost použití
regulárního výrazu, který definuje vlastnosti generovaných testovacích dat,
v&nbsp;tomto případě řetězců nebo polí bajtů. Všechny řetězce/pole bajtů budou
regulárním výrazem akceptovány. Tuto možnost, která je velmi užitečná
(generování URL, e-mailových adres atd. atd.), si nejprve ukážeme jen na velmi
prostém příkladu, který ani není testem:</p>

<pre>
from hypothesis.strategies import from_regex
&nbsp;
g = <strong>from_regex(r"#[a-fA-F0-9]{6}")</strong>
&nbsp;
for _ in range(20):
    print(g.example())
</pre>

<p>Tento příklad vygeneruje dvacet řetězců, které obsahují část odpovídající
barvě zakódované v&nbsp;šestici hexa číslic, tj.&nbsp;ve formátu, který se
mj.&nbsp;prosadil i ve světě HTML a CSS:</p>

<pre>
#000000
#000000
#e00000
#A00000
#000000
#F00000
#200000???
#d00000
#d00000
#a00000
#A00000
fdsa#a00000
#400000
#fe0000
#000000
#e00000
#0b0000
#800000
𲙯𫱊񧄩򖍂𚢋#Ce10DE񫄽
#000000
</pre>

<p>Povšimněte si, že řetězce obsahují i další znaky, což je ovšem ve
skutečnosti v&nbsp;pořádku, protože i takové řetězce (nebo jejich části) budou
regulárním výrazem akceptovány.</p>

<p>Pokud budeme chtít vytvářet pouze řetězce akceptované regulárním výrazem
jako celek, je nutné použít parametr <strong>fullmatch=True</strong>:</p>

<pre>
from hypothesis.strategies import from_regex
&nbsp;
g = from_regex(r"#[a-fA-F0-9]{6}", <strong>fullmatch=True</strong>)
&nbsp;
for _ in range(20):
    print(g.example())
</pre>

<p>Nyní se již vytváří řetězce obsahující kódy různých barev, což je pro
testování ideální:</p>

<pre>
#c00000
#fF3D78
#a00000
#c3C4Eb
#000000
#B00000
#000000
#400000
#DC62c5
#502B12
#d6bB2B
#fDaAFa
#b00000
#F00000
#000000
#59a7F9
#000000
#0E0000
#000000
#bCdB0E
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další příklady použití regulárních výrazů v&nbsp;testech</h2>

<p>Podívejme se ještě na několik příkladů, které jsou založeny na regulárních
výrazech a taktéž na funkci <strong>from_regex</strong>. Následující regulární
výraz je poměrně často používán na ověření, zda řetězec obsahuje platnou
e-mailovou adresu:</p>

<pre>
[^@\s]+@[^@\s]+\.[a-zA-Z0-9]+$
</pre>

<p>Můžeme tedy jít opačným směrem a použít tento výraz pro vygenerování
e-mailových adres:</p>

<pre>
from hypothesis.strategies import from_regex
&nbsp;
g = from_regex(<strong>r"[^@\s]+@[^@\s]+\.[a-zA-Z0-9]+$"</strong>, fullmatch=True)
&nbsp;
for _ in range(20):
    print(g.example())
</pre>

<p>S&nbsp;těmito výsledky:</p>

<pre>
0@0.0
-%񢻵@񽃪#.RHb
0@0.0
0@0.0
0@0.0abc
0@0.0
'@0.0
0@0.0
0@0.0
.@0.0
0@0.0
%'𝆂)鋕@"!&amp;.gkQsxQ55
(@0.0
'#񾲽+,-𕻢$@񎭘%𱹀񗊉,+-.SrQm
񙴱񆧣󞧵@񸙓!&amp;.8f7
򦍎@0.0
(@0.0
(@0.0
0@0.0
0@0.0
</pre>

<p>Pokud vám nevyhovuje, že se v&nbsp;adrese může objevit prakticky jakýkoli
nebílý znak z&nbsp;Unicode, lze omezit sadu povolených znaků pouze na ASCII, a
to nám již známým způsobem &ndash; pomocí metody <strong>filter</strong>:</p>

<pre>
from hypothesis.strategies import from_regex
&nbsp;
g = from_regex(r"[^@\s]+@[^@\s]+\.[a-zA-Z0-9]+$", fullmatch=True).filter(lambda s:all(ord(c) &lt; 128 for c in s))
&nbsp;
for _ in range(20):
    print(g.example())
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
0@0.0
0@0.0
+@0.0
0@0.0
/,@+.Uf
0@0.0
0@0.0
0@0.0
0@0.0
*@0.0
0@0.0
/@0.0
+@0.0
0@0.0
*@0.0
0@0.0
00@0.0
0@0.0
0@0.0
0@0.0
</pre>

<p><div class="rs-tip-major">Poznámka: samozřejmě můžete specifikovat i
minimální délku řetězce a další vlastnosti.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Generátor dat pro kód používající knihovnu NumPy</h2>

<p>Programovací jazyk Python se velmi často používá společně s&nbsp;knihovnou
NumPy, s&nbsp;níž jsme se ostatně na stránkách Rootu již seznámili. A právě
z&nbsp;tohoto důvodu obsahuje nástroj Hypothesis možnost tvorby polí (ND-Array)
specifikované velikosti, tvaru (<i>shape</i>) a typů prvků. V&nbsp;následujícím
příkladu je ukázáno, jak lze vygenerovat desetiprvkové vektory s&nbsp;prvky
typu <strong>int8</strong>, což jsou osmibitová celá čísla se znaménkem:</p>

<pre>
import numpy as np
from hypothesis.extra.numpy import arrays
&nbsp;
g = <strong>arrays(np.int8, 10, elements=None)</strong>
&nbsp;
for _ in range(10):
    print(g.example())
</pre>

<p>Výsledek činnosti předchozího skriptu &ndash; vektory použitelné při
testování:</p>

<pre>
[0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0]
[-21 -21 -51 103 -21 -21 107 119  -1 -21]
[0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0]
[116 -58 116 116 109 116 116 116 116 116]
[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1]
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto případě je druhým
parametrem funkce <strong>arrays</strong> celé číslo (skalární hodnota), ovšem
v&nbsp;dalším textu uvidíme, že se může jednat i o n-tici.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vícerozměrná pole</h2>

<p>U polí je možné kromě počtu prvků specifikovat i tvar (<i>shape</i>) pole.
V&nbsp;dalším příkladu mají pole tvar matice se čtyřmi řádky a třemi sloupci,
takže jejich tvar je určen n-ticí <strong>(4,3)</strong>:</p>

<pre>
import numpy as np
from hypothesis.extra.numpy import arrays
&nbsp;
g = <strong>arrays(np.float, (4,3), elements=None)</strong>
&nbsp;
for _ in range(10):
    print(g.example())
    print()
</pre>

<p>Příklad několika výsledků:</p>

<pre>
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
&nbsp;
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
&nbsp;
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
&nbsp;
[[2.89039723e-147 2.89039723e-147 2.89039723e-147]
 [2.89039723e-147 2.89039723e-147 2.89039723e-147]
 [2.89039723e-147 2.89039723e-147 2.89039723e-147]
 [2.89039723e-147 2.89039723e-147 2.89039723e-147]]
&nbsp;
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
&nbsp;
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
&nbsp;
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
&nbsp;
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
&nbsp;
[[-1.79769313e+308 -1.79769313e+308 -1.79769313e+308]
 [-1.79769313e+308 -1.79769313e+308 -3.08532025e+016]
 [-1.79769313e+308 -1.79769313e+308 -1.79769313e+308]
 [-1.79769313e+308 -2.84042690e+107 -1.79769313e+308]]
&nbsp;
[[-5.38016682e+016 -5.38016682e+016 -1.10000000e+000]
 [-5.38016682e+016  1.32684804e+016 -5.38016682e+016]
 [-5.38016682e+016              nan -5.38016682e+016]
 [ 1.10497728e+163 -5.38016682e+016 -5.38016682e+016]]
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si mj.&nbsp;i speciálních
hodnot typu nejvyšší možné číslo typu (<i>double</i>) či dokonce <i>NaN</i>.
Ještě jedno upozornění &ndash; <strong>np.float</strong> skutečně odpovídá
céčkovému datovému typu <strong>double</strong>, ovšem můžete namísto toho
použít explicitní typy <strong>np.float32</strong> a
<strong>np.float64</strong>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Pole pravdivostních hodnot</h2>

<p>Vzhledem k&nbsp;tomu, že knihovna Numpy podporuje i typ &bdquo;pravdivostní
hodnota&ldquo; reprezentovaný identifikátorem <strong>np.bool</strong>, lze
generovat i pole obsahující náhodné hodnoty tohoto typu. V&nbsp;tomto
konkrétním případě pole o rozměrech 10&times;10 prvků:</p>

<pre>
import numpy as np
from hypothesis.extra.numpy import arrays
&nbsp;
g = <strong>arrays(np.bool, (10,10))</strong>
&nbsp;
print(g.example())
</pre>

<p>V&nbsp;první iteraci většinou získáme pole s&nbsp;poněkud nudným obsahem,
ovšem v&nbsp;reálných testech pochopitelně budou použita pole odlišná:</p>

<pre>
[[False False False False False False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]
 [False False False False False False False False False False]]
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Trojrozměrná pole s&nbsp;prvky typu <strong>half</strong></h2>

<p>Pro algoritmy ML a AI se někdy používá i datový typ <strong>half floating
point</strong>, o němž jsme se zmiňovali v&nbsp;článku <a
href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">Brain
Floating Point – nový formát uložení čísel pro strojové učení a chytrá
čidla</a>. Knihovna NumPy umožňuje práci i s&nbsp;tímto typem
resp.&nbsp;přesněji řečeno s&nbsp;N-dimenzionálními poli, které prvky tohoto
typu obsahují:</p>

<pre>
import numpy as np
from hypothesis.extra.numpy import arrays
&nbsp;
g = arrays(np.half, (2,3,4), elements=None, <strong>unique=True</strong>)
&nbsp;
for _ in range(10):
    print(g.example())
    print()
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si nepovinného parametru
<strong>unique</strong>, kterým lze specifikovat, že se jednotlivé prvky matice
mají lišit svojí hodnotou. To ovšem neplatí pro hodnotu NaN, která se
v&nbsp;matici může vyskytnou vícekrát, protože platí NaN != NaN.</div></p>

<p>Tento jednoduchý demonstrační příklad vygeneruje trojrozměrné matice jejichž
prvky opět obsahují i &bdquo;speciální&ldquo; hodnoty:</p>

<pre>
[[[-1.100e+00  0.000e+00       -inf  1.192e-07]
  [       nan -3.333e-01        nan        nan]
  [ 1.500e+00  1.100e+00        nan        inf]]
&nbsp;
 [[-1.001e-05  5.000e-01        nan -1.500e+00]
  [-1.192e-07 -2.000e+00 -1.900e+00 -5.000e-01]
  [ 2.000e+00        nan  3.333e-01        nan]]]
&nbsp;
[[[       nan -1.000e+00  1.192e-07  1.900e+00]
  [       nan  1.001e-05        inf -0.000e+00]
  [       nan -5.000e-01 -3.333e-01        nan]]
&nbsp;
 [[-1.500e+00       -inf        nan  1.500e+00]
  [-1.192e-07        nan  2.000e+00        nan]
  [       nan        nan        nan        nan]]]
&nbsp;
[[[-0.000e+00        nan        inf        nan]
  [      -inf        nan        nan        nan]
  [ 1.900e+00  5.000e-01        nan        nan]]
&nbsp;
 [[       nan        nan -5.000e-01  1.100e+00]
  [       nan  1.000e+00 -3.333e-01 -1.001e-05]
  [       nan        nan        nan  1.500e+00]]]
&nbsp;
[[[-0.000e+00  1.500e+00 -1.192e-07        nan]
  [ 1.100e+00  1.900e+00        inf        nan]
  [       nan        nan  5.000e-01        nan]]
&nbsp;
 [[      -inf        nan  2.000e+00 -1.001e-05]
  [       nan        nan        nan  1.192e-07]
  [-3.333e-01        nan -2.000e+00 -5.000e-01]]]
&nbsp;
[[[-1.900e+00  0.000e+00        inf  1.100e+00]
  [ 3.333e-01 -5.000e-01        nan -1.100e+00]
  [       nan -1.192e-07  1.192e-07        nan]]
&nbsp;
 [[       nan -2.000e+00        nan  2.000e+00]
  [-1.001e-05        nan       -inf  1.900e+00]
  [       nan  1.001e-05 -3.333e-01        nan]]]
&nbsp;
[[[       nan        inf  1.100e+00  0.000e+00]
  [-1.500e+00        nan       -inf -1.192e-07]
  [ 2.000e+00        nan -1.000e+00        nan]]
&nbsp;
 [[       nan        nan        nan  1.001e-05]
  [       nan -3.333e-01  1.192e-07  3.333e-01]
  [       nan        nan -1.001e-05        nan]]]
&nbsp;
[[[       inf  3.333e-01  1.192e-07        nan]
  [-3.333e-01  2.000e+00 -0.000e+00        nan]
  [      -inf        nan -1.001e-05 -5.000e-01]]
&nbsp;
 [[       nan  1.500e+00        nan        nan]
  [       nan  5.000e-01  1.001e-05        nan]
  [       nan -1.500e+00  1.100e+00        nan]]]
&nbsp;
[[[   -inf  0.5     0.         inf]
  [-1.         nan  1.      2.    ]
  [-0.3333     nan -2.     -1.9   ]]
&nbsp;
 [[ 1.1        nan  1.9        nan]
  [    nan -1.5        nan     nan]
  [ 1.5        nan     nan  0.3333]]]
&nbsp;
[[[      -inf  3.333e-01  1.001e-05  1.192e-07]
  [-1.000e+00        inf  0.000e+00  1.500e+00]
  [-1.001e-05        nan -1.192e-07        nan]]
&nbsp;
 [[       nan -2.000e+00        nan        nan]
  [-1.900e+00  5.000e-01        nan -3.333e-01]
  [       nan        nan  1.900e+00  1.000e+00]]]
&nbsp;
[[[     nan -1.0e-05 -0.0e+00 -1.2e-07]
  [     nan      nan      nan -1.0e+00]
  [ 1.9e+00  1.5e+00     -inf      inf]]
&nbsp;
 [[     nan      nan -5.0e-01      nan]
  [ 1.0e+00  1.1e+00      nan      nan]
  [     nan  1.2e-07      nan  2.0e+00]]]
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Bližší specifikace hodnot prvků v&nbsp;generovaných polích</h2>

<p>V&nbsp;mnoha případech je nutné blíže specifikovat hodnoty prvků
v&nbsp;pseudonáhodně generovaných polích. I to je možné, i když s&nbsp;určitými
omezeními. Podívejme se na následující demonstrační příklad, v&nbsp;němž jsou
generovány trojrozměrné matice s&nbsp;prvky typu celé číslo, ovšem hodnoty
prvků jsou navíc omezeny tím, že musí být v&nbsp;rámci jedné matice unikátní a
současně musí být v&nbsp;rozsahu 0 až 100:</p>

<pre>
import numpy as np
from hypothesis.strategies import integers
from hypothesis.extra.numpy import arrays
&nbsp;
g = arrays(np.int32, (2,3,4), <strong>elements=integers(0, 100)</strong>, unique=True)
&nbsp;
for _ in range(10):
    print(g.example())
    print()
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
[[[ 88  60  59  99]
  [ 78   3  83 100]
  [ 26  98  95   8]]
&nbsp;
 [[ 74  47  66  48]
  [ 73  42  70  31]
  [ 14  75  62  24]]]
&nbsp;
[[[27 90 54 48]
  [ 0  3 36 89]
  [37 68 60 19]]
&nbsp;
 [[31 75 16 97]
  [10 29 17 70]
  [84 82 43 85]]]
&nbsp;
[[[38 89 81 27]
  [69 74 87 46]
  [95  4 67 23]]
&nbsp;
 [[99 83 35 11]
  [ 3 10 54 58]
  [36 20 75 50]]]
&nbsp;
[[[52 74  5 71]
  [89 15 18 40]
  [ 0 86 45 97]]
&nbsp;
 [[39 69 96 35]
  [25  8 66 50]
  [43 51 26 32]]]
&nbsp;
   ...
   ...
   ...
&nbsp;
 [[46 39 90 31]
  [22  4 69 57]
  [49 81 68 91]]]
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Závěr</h2>

<p>Ve dvojici článků jsme si ukázali některé základní způsoby použití knihovny
<i>Hypothesis</i> pro vylepšení pokrytí stavového prostoru bloků (funkcí,
metod, objektů) jednotkovými testy. Tento nástroj prozatím není dokonalý a
některé jeho vlastnosti pravděpodobně příliš neoceníte &ndash; například je
problemativké (nikoli však nemožné) pracovat s&nbsp;rekurzivními datovými
strukturami či generovat obecnější struktury na základě jejich schématu.
K&nbsp;tomuto účelu je podle mého názoru vhodnější použít specializovanější
knihovny, z&nbsp;nichž některé si popíšeme v&nbsp;navazujících částech tohoto
seriálu.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/testing-in-python">https://github.com/tisnik/testing-in-python</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem &ndash;
alespoň prozatím &ndash; velmi malý, dnes má přibližně několik desítek
kilobajtů), můžete namísto toho použít odkazy na jednotlivé demonstrační
příklady a jejich části, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>factorial_1/factorial.py</td><td>funkce pro rekurzivní výpočet faktoriálu</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_1/factorial.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_1/factorial.py</a></td></tr>
<tr><td> 2</td><td>factorial_1/factorial_test.py</td><td>neúplné testy používající Hypothesis</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_1/factorial_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_1/factorial_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>factorial_2/factorial.py</td><td>funkce pro rekurzivní výpočet faktoriálu</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_2/factorial.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_2/factorial.py</a></td></tr>
<tr><td> 4</td><td>factorial_2/factorial_test.py</td><td>vylepšené testy používající Hypothesis</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_2/factorial_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_2/factorial_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>factorial_3/factorial.py</td><td>funkce pro rekurzivní výpočet faktoriálu</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_3/factorial.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_3/factorial.py</a></td></tr>
<tr><td> 6</td><td>factorial_3/factorial_test.py</td><td>testy používající Hypothesis založené na metodě <strong>filter</strong></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_3/factorial_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_3/factorial_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>factorial_4/factorial.py</td><td>funkce pro rekurzivní výpočet faktoriálu</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_4/factorial.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_4/factorial.py</a></td></tr>
<tr><td> 8</td><td>factorial_4/factorial_test.py</td><td>testy používající Hypothesis založené na orákulu</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_4/factorial_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/factorial_4/factorial_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>primes_1/is_prime.py</td><td>test (predikát) na prvočíslo</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_1/is_prime.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_1/is_prime.py</a></td></tr>
<tr><td>10</td><td>primes_1/is_prime_test.py</td><td>otestování funkce <strong>is_prime</strong> pro sudé vstupy získané filtrací</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_1/is_prime_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_1/is_prime_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>primes_2/is_prime.py</td><td>test (predikát) na prvočíslo</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_2/is_prime.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_2/is_prime.py</a></td></tr>
<tr><td>12</td><td>primes_2/is_prime_test.py</td><td>otestování funkce <strong>is_prime</strong> pro sudé vstupy získané výpočtem v&nbsp;<strong>map</strong></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_2/is_prime_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_2/is_prime_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>primes_3/is_prime.py</td><td>test (predikát) na prvočíslo</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_3/is_prime.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_3/is_prime.py</a></td></tr>
<tr><td>14</td><td>primes_3/is_prime_test.py</td><td>otestování funkce <strong>is_prime</strong> s&nbsp;využitím Eulerova polynomu</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_3/is_prime_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_3/is_prime_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>primes_4/is_prime.py</td><td>test (predikát) na prvočíslo</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_4/is_prime.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_4/is_prime.py</a></td></tr>
<tr><td>16</td><td>primes_4/is_prime_test.py</td><td>otestování funkce <strong>is_prime</strong> generátoru a strategie <strong>builds</strong></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_4/is_prime_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_4/is_prime_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>primes_5/is_prime.py</td><td>test (predikát) na prvočíslo</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_5/is_prime.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_5/is_prime.py</a></td></tr>
<tr><td>18</td><td>primes_5/is_prime_test.py</td><td>testy používající Hypothesis založené na orákulu</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_5/is_prime_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_5/is_prime_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>primes_6/is_prime.py</td><td>test (predikát) na prvočíslo</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_6/is_prime.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_6/is_prime.py</a></td></tr>
<tr><td>20</td><td>primes_6/is_prime_test.py</td><td>testy používající Hypothesis založené na orákulu</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_6/is_prime_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_6/is_prime_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>primes_7/is_prime.py</td><td>test (predikát) na prvočíslo</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_7/is_prime.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_7/is_prime.py</a></td></tr>
<tr><td>22</td><td>primes_7/is_prime_test.py</td><td>kombinace předchozích testů</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_7/is_prime_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/primes_7/is_prime_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>from_regex_1.py</td><td>knihovna Hypothesis a regulární výrazy: generování kódů barev</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/from_regex_1.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/from_regex_1.py</a></td></tr>
<tr><td>24</td><td>from_regex_2.py</td><td>knihovna Hypothesis a regulární výrazy: generování kódů barev</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/from_regex_2.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/from_regex_2.py</a></td></tr>
<tr><td>25</td><td>from_regex_3.py</td><td>generování e-mailových adres</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/from_regex_3.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/from_regex_3.py</a></td></tr>
<tr><td>26</td><td>from_regex_4.py</td><td>generování e-mailových adres</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/from_regex_4.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/from_regex_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>27</td><td>numpy1.py</td><td>generování dat (polí) pro Numpy nástrojem Hypothesis</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/numpy1.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/numpy1.py</a></td></tr>
<tr><td>28</td><td>numpy2.py</td><td>generování dat (polí) pro Numpy nástrojem Hypothesis</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/numpy2.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/numpy2.py</a></td></tr>
<tr><td>29</td><td>numpy3.py</td><td>generování dat (polí) pro Numpy nástrojem Hypothesis</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/numpy3.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/numpy3.py</a></td></tr>
<tr><td>30</td><td>numpy4.py</td><td>generování dat (polí) pro Numpy nástrojem Hypothesis</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/numpy4.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/numpy4.py</a></td></tr>
<tr><td>31</td><td>numpy5.py</td><td>generování dat (polí) pro Numpy nástrojem Hypothesis</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/numpy5.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/numpy5.py</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Předchozí články s&nbsp;tématem testování (nejenom) v&nbsp;Pythonu</h2>

<p>Tématem testování jsme se již na stránkách Rootu několikrát zabývali. Jedná
se mj.&nbsp;o následující články:</p>

<ol>

<li>Použití Pythonu pro tvorbu testů: od jednotkových testů až po testy UI<br />
<a href="https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-od-jednotkovych-testu-az-po-testy-ui/">https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-od-jednotkovych-testu-az-po-testy-ui/</a>
</li>

<li>Použití Pythonu pro tvorbu testů: použití třídy Mock z knihovny unittest.mock<br />
<a href="https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-pouziti-tridy-mock-z-knihovny-unittest-mock/">https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-pouziti-tridy-mock-z-knihovny-unittest-mock/</a>
</li>

<li>Použití nástroje pytest pro tvorbu jednotkových testů a benchmarků<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-pytest-pro-tvorbu-jednotkovych-testu-a-benchmarku/">https://www.root.cz/clanky/pouziti-nastroje-pytest-pro-tvorbu-jednotkovych-testu-a-benchmarku/</a>
</li>

<li>Nástroj pytest a jednotkové testy: fixtures, výjimky, parametrizace testů<br />
<a href="https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-fixtures-vyjimky-parametrizace-testu/">https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-fixtures-vyjimky-parametrizace-testu/</a>
</li>

<li>Nástroj pytest a jednotkové testy: životní cyklus testů, užitečné tipy a triky<br />
<a href="https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-zivotni-cyklus-testu-uzitecne-tipy-a-triky/">https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-zivotni-cyklus-testu-uzitecne-tipy-a-triky/</a>
</li>

<li>Struktura projektů s jednotkovými testy, využití Travis CI<br />
<a href="https://www.root.cz/clanky/struktura-projektu-s-jednotkovymi-testy-vyuziti-travis-ci/">https://www.root.cz/clanky/struktura-projektu-s-jednotkovymi-testy-vyuziti-travis-ci/</a>
</li>

<li>Omezení stavového prostoru testovaných funkcí a metod<br />
<a href="https://www.root.cz/clanky/omezeni-stavoveho-prostoru-testovanych-funkci-a-metod/">https://www.root.cz/clanky/omezeni-stavoveho-prostoru-testovanych-funkci-a-metod/</a>
</li>

<li>Testování aplikací s využitím nástroje Hypothesis<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-s-vyuzitim-nastroje-hypothesis/">https://www.root.cz/clanky/testovani-aplikaci-s-vyuzitim-nastroje-hypothesis/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (druhá část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (závěrečná část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/</a>
</li>

<li>Validace datových struktur v Pythonu pomocí knihoven Schemagic a Schema<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/</a>
</li>

<li>Validace datových struktur v Pythonu (2. část)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/</a>
</li>

<li>Validace datových struktur v Pythonu (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/</a>
</li>

<li>Univerzální testovací nástroj Robot Framework<br />
<a href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/">https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/</a>
</li>

<li>Univerzální testovací nástroj Robot Framework a BDD testy<br />
<a href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework-a-bdd-testy/">https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework-a-bdd-testy/</a>
</li>

<li>Úvod do problematiky fuzzingu a fuzz testování<br />
<a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/">https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/</a>
</li>

<li>Úvod do problematiky fuzzingu a fuzz testování – složení vlastního fuzzeru<br />
<a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani-slozeni-vlastniho-fuzzeru/">https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani-slozeni-vlastniho-fuzzeru/</a>
</li>

<li>Knihovny a moduly usnadňující testování aplikací naprogramovaných v jazyce Clojure<br />
<a href="https://www.root.cz/clanky/knihovny-a-moduly-usnadnujici-testovani-aplikaci-naprogramovanych-v-jazyce-clojure/">https://www.root.cz/clanky/knihovny-a-moduly-usnadnujici-testovani-aplikaci-naprogramovanych-v-jazyce-clojure/</a>
</li>

<li>Validace dat s využitím knihovny spec v Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Testování aplikací naprogramovaných v jazyce Go<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/">https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/</a>
</li>

<li>Knihovny určené pro tvorbu testů v programovacím jazyce Go<br />
<a href="https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/">https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/</a>
</li>

<li>Testování aplikací psaných v Go s využitím knihoven Goblin a Frisby<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/">https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/</a>
</li>

<li>Testování Go aplikací s využitím knihovny GΩmega a frameworku Ginkgo<br />
<a href="https://www.root.cz/clanky/testovani-go-aplikaci-s-vyuzitim-knihovny-gomega-mega-a-frameworku-ginkgo/">https://www.root.cz/clanky/testovani-go-aplikaci-s-vyuzitim-knihovny-gomega-mega-a-frameworku-ginkgo/</a>
</li>

<li>Tvorba BDD testů s využitím jazyka Go a nástroje godog<br />
<a href="https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/">https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/</a>
</li>

<li>Použití Go pro automatizaci práce s aplikacemi s interaktivním příkazovým řádkem<br />
<a href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/">https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/</a>
</li>

<li>Použití Go pro automatizaci práce s aplikacemi s interaktivním příkazovým řádkem (dokončení)<br />
<a href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem-dokonceni/">https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem-dokonceni/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Prime formulas and polynomial functions<br />
<a href="https://en.wikipedia.org/wiki/Formula_for_primes#Prime_formulas_and_polynomial_functions">https://en.wikipedia.org/wiki/Formula_for_primes#Prime_formulas_and_polynomial_functions</a>
</li>

<li>Prime-Generating Polynomial<br />
<a href="https://mathworld.wolfram.com/Prime-GeneratingPolynomial.html">https://mathworld.wolfram.com/Prime-GeneratingPolynomial.html</a>
</li>

<li>Hoare logic<br />
<a href="https://en.wikipedia.org/wiki/Hoare_logic">https://en.wikipedia.org/wiki/Hoare_logic</a>
</li>

<li>Goto Fail, Heartbleed, and Unit Testing Culture<br />
<a href="https://martinfowler.com/articles/testing-culture.html">https://martinfowler.com/articles/testing-culture.html</a>
</li>

<li>PEP-484<br />
<a href="https://www.python.org/dev/peps/pep-0484/">https://www.python.org/dev/peps/pep-0484/</a>
</li>

<li>In-depth: Functional programming in C++<br />
<a href="https://www.gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php">https://www.gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php</a>
</li>

<li>mypy<br />
<a href="http://www.mypy-lang.org/">http://www.mypy-lang.org/</a>
</li>

<li>Welcome to Mypy documentation!<br />
<a href="https://mypy.readthedocs.io/en/latest/index.html">https://mypy.readthedocs.io/en/latest/index.html</a>
</li>

<li>mypy na GitHubu<br />
<a href="https://github.com/python/mypy">https://github.com/python/mypy</a>
</li>

<li>mypy 0.770 na PyPi<br />
<a href="https://pypi.org/project/mypy/">https://pypi.org/project/mypy/</a>
</li>

<li>Extensions for mypy (separated out from mypy/extensions)<br />
<a href="https://github.com/python/mypy_extensions">https://github.com/python/mypy_extensions</a>
</li>

<li>The Mypy Blog<br />
<a href="https://mypy-lang.blogspot.com/2020/03/mypy-0770-released.html">https://mypy-lang.blogspot.com/2020/03/mypy-0770-released.html</a>
</li>

<li>Our journey to type checking 4 million lines of Python<br />
<a href="https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python">https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python</a>
</li>

<li>Type-Checking Python Programs With Type Hints and mypy<br />
<a href="https://www.youtube.com/watch?v=2xWhaALHTvU">https://www.youtube.com/watch?v=2xWhaALHTvU</a>
</li>

<li>Refactoring to Immutability - Kevlin Henney<br />
<a href="https://www.youtube.com/watch?v=APUCMSPiNh4">https://www.youtube.com/watch?v=APUCMSPiNh4</a>
</li>

<li>Bernat Gabor - Type hinting (and mypy) - PyCon 2019<br />
<a href="https://www.youtube.com/watch?v=hTrjTAPnA_k">https://www.youtube.com/watch?v=hTrjTAPnA_k</a>
</li>

<li>Stanford Seminar - Optional Static Typing for Python<br />
<a href="https://www.youtube.com/watch?v=GiZKuyLKvAA">https://www.youtube.com/watch?v=GiZKuyLKvAA</a>
</li>

<li>mypy Getting to Four Million Lines of Typed Python - Michael Sullivan<br />
<a href="https://www.youtube.com/watch?v=FT_WHV4-QcU">https://www.youtube.com/watch?v=FT_WHV4-QcU</a>
</li>

<li>Shebang<br />
<a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">https://en.wikipedia.org/wiki/Shebang_(Unix)</a>
</li>

<li>pytest 5.4.2 na PyPi<br />
<a href="https://pypi.org/project/pytest/">https://pypi.org/project/pytest/</a>
</li>

<li>Hillel Wayne - Beyond Unit Tests: Taking Your Testing to the Next Level - PyCon 2018<br />
<a href="https://www.youtube.com/watch?v=MYucYon2-lk">https://www.youtube.com/watch?v=MYucYon2-lk</a>
</li>

<li>Awesome Python &ndash; testing<br />
<a href="https://github.com/vinta/awesome-python#testing">https://github.com/vinta/awesome-python#testing</a>
</li>

<li>pytest Plugins Compatibility<br />
<a href="http://plugincompat.herokuapp.com/">http://plugincompat.herokuapp.com/</a>
</li>

<li>Selenium (pro Python)<br />
<a href="https://pypi.org/project/selenium/">https://pypi.org/project/selenium/</a>
</li>

<li>Getting Started With Testing in Python<br />
<a href="https://realpython.com/python-testing/">https://realpython.com/python-testing/</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Mock - Mocking and Testing Library<br />
<a href="http://mock.readthedocs.io/en/stable/">http://mock.readthedocs.io/en/stable/</a>
</li>

<li>Python Mocking 101: Fake It Before You Make It<br />
<a href="https://blog.fugue.co/2016-02-11-python-mocking-101.html">https://blog.fugue.co/2016-02-11-python-mocking-101.html</a>
</li>

<li>Nauč se Python! - Testování<br />
<a href="http://naucse.python.cz/lessons/intro/testing/">http://naucse.python.cz/lessons/intro/testing/</a>
</li>

<li>Flexmock (dokumentace)<br />
<a href="https://flexmock.readthedocs.io/en/latest/">https://flexmock.readthedocs.io/en/latest/</a>
</li>

<li>Test Fixture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test_fixture">https://en.wikipedia.org/wiki/Test_fixture</a>
</li>

<li>Mock object (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Mock_object">https://en.wikipedia.org/wiki/Mock_object</a>
</li>

<li>Extrémní programování<br />
<a href="https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD">https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD</a>
</li>

<li>Programování řízené testy<br />
<a href="https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy">https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>Tox<br />
<a href="https://tox.readthedocs.io/en/latest/">https://tox.readthedocs.io/en/latest/</a>
</li>

<li>pytest: helps you write better programs<br />
<a href="https://docs.pytest.org/en/latest/">https://docs.pytest.org/en/latest/</a>
</li>

<li>doctest — Test interactive Python examples<br />
<a href="https://docs.python.org/dev/library/doctest.html#module-doctest">https://docs.python.org/dev/library/doctest.html#module-doctest</a>
</li>

<li>unittest — Unit testing framework<br />
<a href="https://docs.python.org/dev/library/unittest.html">https://docs.python.org/dev/library/unittest.html</a>
</li>

<li>Python namespaces<br />
<a href="https://bytebaker.com/2008/07/30/python-namespaces/">https://bytebaker.com/2008/07/30/python-namespaces/</a>
</li>

<li>Namespaces and Scopes<br />
<a href="https://www.python-course.eu/namespaces.php">https://www.python-course.eu/namespaces.php</a>
</li>

<li>Stránka projektu Robot Framework<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>GitHub repositář Robot Frameworku<br />
<a href="https://github.com/robotframework/robotframework">https://github.com/robotframework/robotframework</a>
</li>

<li>Robot Framework (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Robot_Framework">https://en.wikipedia.org/wiki/Robot_Framework</a>
</li>

<li>Tutoriál Robot Frameworku<br />
<a href="http://www.robotframeworktutorial.com/">http://www.robotframeworktutorial.com/</a>
</li>

<li>Robot Framework Documentation<br />
<a href="https://robotframework.org/robotframework/">https://robotframework.org/robotframework/</a>
</li>

<li>Robot Framework Introduction<br />
<a href="https://blog.testproject.io/2016/11/22/robot-framework-introduction/">https://blog.testproject.io/2016/11/22/robot-framework-introduction/</a>
</li>

<li>robotframework 3.1.2 na PyPi<br />
<a href="https://pypi.org/project/robotframework/">https://pypi.org/project/robotframework/</a>
</li>

<li>Robot Framework demo (GitHub)<br />
<a href="https://github.com/robotframework/RobotDemo">https://github.com/robotframework/RobotDemo</a>
</li>

<li>Robot Framework web testing demo using SeleniumLibrary<br />
<a href="https://github.com/robotframework/WebDemo">https://github.com/robotframework/WebDemo</a>
</li>

<li>Robot Framework for Mobile Test Automation Demo<br />
<a href="https://www.youtube.com/watch?v=06LsU08slP8">https://www.youtube.com/watch?v=06LsU08slP8</a>
</li>

<li>Gherkin<br />
<a href="https://cucumber.io/docs/gherkin/">https://cucumber.io/docs/gherkin/</a>
</li>

<li>Selenium<br />
<a href="https://selenium.dev/">https://selenium.dev/</a>
</li>

<li>SeleniumLibrary<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>The Practical Test Pyramid<br />
<a href="https://martinfowler.com/articles/practical-test-pyramid.html">https://martinfowler.com/articles/practical-test-pyramid.html</a>
</li>

<li>Acceptance Tests and the Testing Pyramid<br />
<a href="http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/">http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/</a>
</li>

<li>Tab-separated values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>radamsa<br />
<a href="https://gitlab.com/akihe/radamsa">https://gitlab.com/akihe/radamsa</a>
</li>

<li>Fuzzing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fuzzing">https://en.wikipedia.org/wiki/Fuzzing</a>
</li>

<li>american fuzzy lop<br />
<a href="http://lcamtuf.coredump.cx/afl/">http://lcamtuf.coredump.cx/afl/</a>
</li>

<li>Fuzzing: the new unit testing<br />
<a href="https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1">https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1</a>
</li>

<li>Corpus for github.com/dvyukov/go-fuzz examples<br />
<a href="https://github.com/dvyukov/go-fuzz-corpus">https://github.com/dvyukov/go-fuzz-corpus</a>
</li>

<li>AFL &ndash; QuickStartGuide.txt<br />
<a href="https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt">https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt</a>
</li>

<li>Introduction to Fuzzing in Python with AFL<br />
<a href="https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/">https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/</a>
</li>

<li>Writing a Simple Fuzzer in Python<br />
<a href="https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/">https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/</a>
</li>

<li>How to Fuzz Go Code with go-fuzz (Continuously)<br />
<a href="https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/">https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/</a>
</li>

<li>Golang Fuzzing: A go-fuzz Tutorial and Example<br />
<a href="http://networkbit.ch/golang-fuzzing/">http://networkbit.ch/golang-fuzzing/</a>
</li>

<li>Fuzzing Python Modules<br />
<a href="https://stackoverflow.com/questions/20749026/fuzzing-python-modules">https://stackoverflow.com/questions/20749026/fuzzing-python-modules</a>
</li>

<li>0x3 Python Tutorial: Fuzzer<br />
<a href="http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/">http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/</a>
</li>

<li>fuzzing na PyPi<br />
<a href="https://pypi.org/project/fuzzing/">https://pypi.org/project/fuzzing/</a>
</li>

<li>Fuzzing 0.3.2 documentation<br />
<a href="https://fuzzing.readthedocs.io/en/latest/">https://fuzzing.readthedocs.io/en/latest/</a>
</li>

<li>Randomized testing for Go<br />
<a href="https://github.com/dvyukov/go-fuzz">https://github.com/dvyukov/go-fuzz</a>
</li>

<li>HTTP/2 fuzzer written in Golang<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Ffuf (Fuzz Faster U Fool) – An Open Source Fast Web Fuzzing Tool<br />
<a href="https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html">https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html</a>
</li>

<li>Continuous Fuzzing Made Simple<br />
<a href="https://fuzzit.dev/">https://fuzzit.dev/</a>
</li>

<li>Halt and Catch Fire<br />
<a href="https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86">https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86</a>
</li>

<li>Random testing<br />
<a href="https://en.wikipedia.org/wiki/Random_testing">https://en.wikipedia.org/wiki/Random_testing</a>
</li>

<li>Monkey testing<br />
<a href="https://en.wikipedia.org/wiki/Monkey_testing">https://en.wikipedia.org/wiki/Monkey_testing</a>
</li>

<li>Fuzzing for Software Security Testing and Quality Assurance, Second Edition<br />
<a href="https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false">https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false</a>
</li>

<li>libFuzzer – a library for coverage-guided fuzz testing<br />
<a href="https://llvm.org/docs/LibFuzzer.html">https://llvm.org/docs/LibFuzzer.html</a>
</li>

<li>fuzzy-swagger na PyPi<br />
<a href="https://pypi.org/project/fuzzy-swagger/">https://pypi.org/project/fuzzy-swagger/</a>
</li>

<li>fuzzy-swagger na GitHubu<br />
<a href="https://github.com/namuan/fuzzy-swagger">https://github.com/namuan/fuzzy-swagger</a>
</li>

<li>Fuzz testing tools for Python<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools">https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools</a>
</li>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go</a>
</li>

<li>gofuzz: a library for populating go objects with random values<br />
<a href="https://github.com/google/gofuzz">https://github.com/google/gofuzz</a>
</li>

<li>tavor: A generic fuzzing and delta-debugging framework<br />
<a href="https://github.com/zimmski/tavor">https://github.com/zimmski/tavor</a>
</li>

<li>hypothesis na GitHubu<br />
<a href="https://github.com/HypothesisWorks/hypothesis">https://github.com/HypothesisWorks/hypothesis</a>
</li>

<li>Hypothesis: Test faster, fix more<br />
<a href="https://hypothesis.works/">https://hypothesis.works/</a>
</li>

<li>Hypothesis<br />
<a href="https://hypothesis.works/articles/intro/">https://hypothesis.works/articles/intro/</a>
</li>

<li>What is Hypothesis?<br />
<a href="https://hypothesis.works/articles/what-is-hypothesis/">https://hypothesis.works/articles/what-is-hypothesis/</a>
</li>

<li>What is Property Based Testing?<br />
<a href="https://hypothesis.works/articles/what-is-property-based-testing/">https://hypothesis.works/articles/what-is-property-based-testing/</a>
</li>

<li>Databáze CVE<br />
<a href="https://www.cvedetails.com/">https://www.cvedetails.com/</a>
</li>

<li>Fuzz test Python modules with libFuzzer<br />
<a href="https://github.com/eerimoq/pyfuzzer">https://github.com/eerimoq/pyfuzzer</a>
</li>

<li>Taof - The art of fuzzing<br />
<a href="https://sourceforge.net/projects/taof/">https://sourceforge.net/projects/taof/</a>
</li>

<li>JQF + Zest: Coverage-guided semantic fuzzing for Java<br />
<a href="https://github.com/rohanpadhye/jqf">https://github.com/rohanpadhye/jqf</a>
</li>

<li>http2fuzz<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Demystifying hypothesis testing with simple Python examples<br />
<a href="https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294">https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294</a>
</li>

<li>Testování<br />
<a href="http://voho.eu/wiki/testovani/">http://voho.eu/wiki/testovani/</a>
</li>

<li>Unit testing (Wikipedia.en)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing (Wikipedia.cz)<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit Test vs Integration Test<br />
<a href="https://www.youtube.com/watch?v=0GypdsJulKE">https://www.youtube.com/watch?v=0GypdsJulKE</a>
</li>

<li>TestDouble<br />
<a href="https://martinfowler.com/bliki/TestDouble.html">https://martinfowler.com/bliki/TestDouble.html</a>
</li>

<li>Test Double<br />
<a href="http://xunitpatterns.com/Test%20Double.html">http://xunitpatterns.com/Test%20Double.html</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Acceptance test–driven development<br />
<a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development">https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development</a>
</li>

<li>Gauge<br />
<a href="https://gauge.org/">https://gauge.org/</a>
</li>

<li>Gauge (software)<br />
<a href="https://en.wikipedia.org/wiki/Gauge_(software)">https://en.wikipedia.org/wiki/Gauge_(software)</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>Testing is Good. Pyramids are Bad. Ice Cream Cones are the Worst<br />
<a href="https://medium.com/@fistsOfReason/testing-is-good-pyramids-are-bad-ice-cream-cones-are-the-worst-ad94b9b2f05f">https://medium.com/@fistsOfReason/testing-is-good-pyramids-are-bad-ice-cream-cones-are-the-worst-ad94b9b2f05f</a>
</li>

<li>Články a zprávičky věnující se Pythonu<br />
<a href="https://www.root.cz/n/python/">https://www.root.cz/n/python/</a>
</li>

<li>PythonTestingToolsTaxonomy<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy">https://wiki.python.org/moin/PythonTestingToolsTaxonomy</a>
</li>

<li>Top 6 BEST Python Testing Frameworks [Updated 2020 List]<br />
<a href="https://www.softwaretestinghelp.com/python-testing-frameworks/">https://www.softwaretestinghelp.com/python-testing-frameworks/</a>
</li>

<li>pytest-print 0.1.3<br />
<a href="https://pypi.org/project/pytest-print/">https://pypi.org/project/pytest-print/</a>
</li>

<li>pytest fixtures: explicit, modular, scalable<br />
<a href="https://docs.pytest.org/en/latest/fixture.html">https://docs.pytest.org/en/latest/fixture.html</a>
</li>

<li>PyTest Tutorial: What is, Install, Fixture, Assertions<br />
<a href="https://www.guru99.com/pytest-tutorial.html">https://www.guru99.com/pytest-tutorial.html</a>
</li>

<li>Pytest - Fixtures<br />
<a href="https://www.tutorialspoint.com/pytest/pytest_fixtures.htm">https://www.tutorialspoint.com/pytest/pytest_fixtures.htm</a>
</li>

<li>Marking test functions with attributes<br />
<a href="https://docs.pytest.org/en/latest/mark.html">https://docs.pytest.org/en/latest/mark.html</a>
</li>

<li>pytest-print<br />
<a href="https://pytest-print.readthedocs.io/en/latest/">https://pytest-print.readthedocs.io/en/latest/</a>
</li>

<li>Continuous integration<br />
<a href="https://en.wikipedia.org/wiki/Continuous_integration">https://en.wikipedia.org/wiki/Continuous_integration</a>
</li>

<li>Travis CI<br />
<a href="https://travis-ci.org/">https://travis-ci.org/</a>
</li>

<li>Mutation testing<br />
<a href="https://en.wikipedia.org/wiki/Mutation_testing">https://en.wikipedia.org/wiki/Mutation_testing</a>
</li>

<li>Články o Hypothesis<br />
<a href="https://news.ycombinator.com/from?site=hypothesis.works">https://news.ycombinator.com/from?site=hypothesis.works</a>
</li>

<li>Testovací případ<br />
<a href="https://cs.wikipedia.org/wiki/Testovac%C3%AD_p%C5%99%C3%ADpad">https://cs.wikipedia.org/wiki/Testovac%C3%AD_p%C5%99%C3%ADpad</a>
</li>

<li>Most testing is ineffective<br />
<a href="https://hypothesis.works/">https://hypothesis.works/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

