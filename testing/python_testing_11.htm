<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Testování webových aplikací s REST API z Pythonu (2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Testování webových aplikací s REST API z Pythonu (2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Přečtení nezpracovaného těla odpovědi při práci s&nbsp;binárními daty</a></p>
<p><a href="#k03">*** 3. První demonstrační příklad &ndash; přečtení bloku binárních dat z&nbsp;odpovědi serveru</a></p>
<p><a href="#k04">*** 4. Získání a uložení rastrového obrázku typu <strong>image/png</strong> a <strong>image/jpeg</strong></a></p>
<p><a href="#k05">*** 5. Využití hlavičky <strong>accept</strong> posílané v&nbsp;požadavku serveru pro určení formátu dat</a></p>
<p><a href="#k06">*** 6. CRUD operace a jejich obdoba v&nbsp;HTTP metodách</a></p>
<p><a href="#k07">*** 7. Požadavek využívající metodu <strong>PATCH</strong></a></p>
<p><a href="#k08">*** 8. Požadavek využívající metodu <strong>PUT</strong></a></p>
<p><a href="#k09">*** 9. Požadavek využívající metodu <strong>OPTIONS</strong></a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Předchozí články s&nbsp;tématem testování (nejenom) v&nbsp;Pythonu</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>V&nbsp;dnešním článku si ukážeme některé další možnosti nabízené knihovnou <i>Requests</i>, s&nbsp;jejímž základním použitím jsme se seznámili <a href="https://www.root.cz/clanky/testovani-webovych-aplikaci-s-rest-api-z-pythonu/">v&nbsp;článku předchozím</a>. Nejprve si řekneme, jak lze <a href="#k02">přečíst binární data</a> poslaná serverem (typicky se bude jednat o <a href="#k03">rastrové obrázky</a>, audio data atd.), použijeme <a href="#k06">HTTP metody</a> pojmenované <strong>PATCH</strong>, <strong>PUT</strong> a <strong>OPTIONS</strong> a dále se seznámíme <a href="#09">s&nbsp;konceptem takzvaných <i>cookies</i></a> a ukážeme si, jakým způsobem je <a href="#k12">možné využít objekt typu <strong>Session</strong></a>, díky němuž je možné s&nbsp;cookies (a obecně se &bdquo;sezeními&ldquo;) velmi snadno a rychle pracovat &ndash; právě zde se ostatně ukáže snadnost použití knihovny <strong>Requests</strong> v&nbsp;porovnání s&nbsp;jinými knihovnami a nástroji, které mnohdy nenabízejí všechny operace popř.&nbsp;je sice nabízejí, ale na odlišné &bdquo;úrovni abstrakce&ldquo; (buď zbytečně nízkoúrovňově, nebo naopak některé možnosti zabalují do abstraktních operací).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Přečtení nezpracovaného těla odpovědi při práci s&nbsp;binárními daty</h2>

<p>Při vývoji některých aplikací využívajících REST API popř.&nbsp;při přímém přístupu k&nbsp;prostředkům (obrázkům, animacím, ...) nabízeným na HTTP serverech se někdy setkáme s&nbsp;nutností zpracování binárních dat vrácených serverem pomocí protokolu HTTP. V&nbsp;takovém případě je možné (a také vhodné) obejít většinu funkcí nabízených knihovnou <strong>Requests</strong> a přečíst binární data vlastními prostředky &ndash; bajt po bajtu nebo blok po bloku. Ve skutečnosti je to relativně jednoduché. Nejdříve musíme zjistit typ dat (pro jistotu) a taktéž jejich délku, kterou by měl HTTP server poslat v&nbsp;hlavičce:</p>

<pre>
<i># přečtení hlaviček</i>
headers = response.headers

<i># výpis typu internetoveho media</i>
print("Typ dat:", headers.get("content-type"))

<i># výpis delky dat predanych v tele</i>
print("Delka dat:", headers.get("content-length"))
</pre>

<p>Dále již jen využijeme zjištěnou délku a použijeme metodu <strong>response.raw.read(délka)</strong> pro postupné přečtení binárních dat z&nbsp;těla odpovědi. Zde pro jednoduchost budeme číst data po bajtu, i když výhodnější by bylo čtení po delších blocích:</p>

<pre>
<i># délka dat předaných v těle odpovědi</i>
length = int(headers.get("content-length"))

<i># přečtení těla odpovědi bajt po bajtu</i>
for i in range(length):
    byte = response.raw.read(1)
    print(hex(byte[0]))
</pre>

<p><div class="rs-tip-major">Poznámka: metodě <strong>read</strong> je možné předat požadavek na přečtení delšího bloku, ovšem stále si hlídejte celkovou délku předaných dat.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad &ndash; přečtení bloku binárních dat z&nbsp;odpovědi serveru</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu využijeme službu dostupnou na adrese <a href="https://httpbin.org/bytes/_počet_bajtů_">https://httpbin.org/bytes/_počet_bajtů_</a>, která v&nbsp;těle odpovědi vrátí požadovaný počet bajtů (ty budou mít náhodnou hodnotu!). Konkrétně budeme vyžadovat sto náhodných bajtů, takže požadavek bude směřován na adresu <a href="https://httpbin.org/bytes/100">https://httpbin.org/bytes/100</a>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests

<i># adresa s testovací REST API službou</i>
URL = "https://httpbin.org/bytes/100"

<i># poslání HTTP dotazu typu GET</i>
response = requests.get(URL, stream=True)

<i># přečtení hlaviček</i>
headers = response.headers

<i># výpis typu internetového media</i>
print("Typ dat:", headers.get("content-type"))

<i># výpis délky dat předaných v těle odpovědi</i>
print("Delka dat:", headers.get("content-length"))

length = int(headers.get("content-length"))

<i># přečtení těla odpovědi bajt po bajtu</i>
for i in range(length):
    byte = response.raw.read(1)
    print(hex(byte[0]))
</pre>

<p>Po spuštění příkladu by měl začátek zpráv vypisovaných na terminál začínat takto:</p>

<pre>
$ <strong>./11_get_binary_data.py</strong>
&nbsp;
Typ dat: application/octet-stream
Delka dat: 100
</pre>

<p>Následuje výpis hexadecimálních hodnot stovky bajtů, které byly poslány serverem v&nbsp;odpovědi:</p>

<pre>
0x20
0xc1
0x34
0xe6
0x6b
0x0
0x35
0x12
0xf4
0xae
0xed
0xc7
0xe9
0xc5
0x86
0xba
0x94
0x1f
0x4e
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Získání a uložení rastrového obrázku typu <strong>image/png</strong> a <strong>image/jpeg</strong></h2>

<p>Ve druhém demonstračním příkladu si ukážeme způsob zpracování rastrového obrázku typu PNG předaného v&nbsp;binární podobě po poslání HTTP metody GET na adresu <a href="https://httpbin.org/image/png">https://httpbin.org/image/png</a>. Obrázek je možné uložit do (binárního) souboru po blocích, jejichž délku jsme nastavili na 128 bajtů (lze samozřejmě použít i kratší či naopak delší bloky). Namísto metody <strong>response.raw.read()</strong> použijeme alternativní přístup přes metodu <strong>response.iter_content()</strong>, která navíc správně vyřeší i délku posledního bloku (délka samozřejmě může být menší než 128 bajtů):</p>

<pre>
with open("test1.png", 'wb') as fout:
    for block in response.iter_content(chunk_size=128):
        fout.write(block)
</pre>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests

<i># adresa s testovací REST API službou</i>
URL = "https://httpbin.org/image/png"

<i># poslání HTTP dotazu typu GET</i>
response = requests.get(URL)

<i># přečtení hlaviček</i>
headers = response.headers

<i># výpis typu internetového média</i>
print("Typ dat:", headers.get("content-type"))

<i># výpis délky dat předaných v těle odpovědi</i>
print("Delka dat:", headers.get("content-length"))

print(response.raw)

with open("test1.png", 'wb') as fout:
    for block in response.iter_content(chunk_size=128):
        fout.write(block)
</pre>

<p>Zcela stejným způsobem můžeme přečíst a uložit rastrový obrázek typu JPEG, který je testovací REST API službou vrácen při poslání HTTP metody GET na adresu <a href="https://httpbin.org/image/jpeg">https://httpbin.org/image/jpeg</a>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests

<i># adresa s testovací REST API službou</i>
URL = "https://httpbin.org/image/jpeg"

<i># poslání HTTP dotazu typu GET</i>
response = requests.get(URL)

<i># přečtení hlaviček</i>
headers = response.headers

<i># výpis typu internetového média</i>
print("Typ dat:", headers.get("content-type"))

<i># výpis délky dat předaných v těle odpovědi</i>
print("Delka dat:", headers.get("content-length"))

print(response.raw)

with open("test1.jpg", 'wb') as fout:
    for block in response.iter_content(chunk_size=128):
        fout.write(block)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Využití hlavičky <strong>accept</strong> posílané v&nbsp;požadavku serveru pro určení formátu dat</h2>

<p>Testovací REST API služba, kterou používáme ve většině demonstračních příkladů, nabízí i možnost výběru formátu rastrových dat. Výběr se přitom provádí nastavením hlavičky se jménem <strong>accept</strong> v&nbsp;požadavku (<i>request</i>) poslaném na server. Na základě obsahu (tedy hodnoty) této hlavičky server připraví data v&nbsp;požadovaném formátu a pošle je (v&nbsp;binární podobě) zpět klientovi. Příslušná adresa, na kterou je nutné požadavek s&nbsp;hlavičkou <strong>accept</strong> poslat, je <a href="https://httpbin.org/image">https://httpbin.org/image</a>.</p>

<p>Jedním z&nbsp;podporovaných formátů je i &bdquo;image/png&ldquo;, takže další demonstrační příklad přečte obrázek ve formátu PNG a uloží ho do souboru &bdquo;test.png&ldquo;:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests

<i># adresa s testovací REST API službou</i>
URL = "https://httpbin.org/image"

<i># hlavička posílaná v dotazu</i>
headers = {'accept': 'image/png'}

<i># poslání HTTP dotazu typu GET</i>
response = requests.get(URL, headers=headers)

<i># přečtení hlaviček</i>
headers = response.headers

<i># výpis typu internetového média</i>
print("Typ dat:", headers.get("content-type"))

<i># výpis délky dat předaných v těle odpovědi</i>
print("Delka dat:", headers.get("content-length"))

print(response.raw)

with open("test2.png", 'wb') as fout:
    for block in response.iter_content(chunk_size=128):
        fout.write(block)
</pre>

<p>Dalším podporovaným formátem dat testovací služby dostupné na adrese <a href="https://httpbin.org/image">https://httpbin.org/image</a> je <strong>image/jpeg</strong>, který pochopitelně vrací rastrový obrázek uložený ve formátu JPEG:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests

<i># adresa s testovací REST API službou</i>
URL = "https://httpbin.org/image"

<i># hlavička posílaná v dotazu</i>
headers = {'accept': 'image/jpeg'}

<i># poslání HTTP dotazu typu GET</i>
response = requests.get(URL, headers=headers)

<i># přečtení hlaviček</i>
headers = response.headers

<i># výpis typu internetového média</i>
print("Typ dat:", headers.get("content-type"))

<i># výpis délky dat předaných v těle odpovědi</i>
print("Delka dat:", headers.get("content-length"))

print(response.raw)

with open("test2.jpg", 'wb') as fout:
    for block in response.iter_content(chunk_size=128):
        fout.write(block)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. CRUD operace a jejich obdoba v&nbsp;HTTP metodách</h2>

<p><a href="">Již minule</a> jsme si popsali dvě základní HTTP metody nazvané <strong>GET</strong> a <strong>POST</strong>. Kromě těchto metod však existují i metody další. Některé z&nbsp;nich (například metoda <strong>OPTIONS</strong>) hrají spíše pomocnou roli související se samotným síťovým protokolem, ovšem metody pojmenované <strong>PUT</strong> a <strong>DELETE</strong> a částečně i metoda <strong>PATCH</strong> hrají důležitou roli v&nbsp;takzvaných <i>CRUD</i> operacích. V&nbsp;tabulce vypsané pod tímto odstavcem jsou vypsány všechny čtyři základní operace typu <i>CRUD</i> neboli <i>Create</i>, <i>Read</i>, <i>Update</i> a <i>Delete</i> používanými při práci s&nbsp;daty uloženými v&nbsp;nějakém perzistentním úložišti, například v&nbsp;databázi umístěné na serveru (je vcelku jedno, o jakou databázi se jedná, zda o relační, dokumentovou atd.). Tyto operace mají své sémantické protějšky ve čtyřech HTTP metodách, které nalezneme ve druhém sloupci:</p>

<table>
<tr><th>Operace</th><th>HTTP metoda</th></tr>
<tr><td>Create</td><td>POST</td></tr>
<tr><td>Read (Retrieve)</td><td>GET</td></tr>
<tr><td>Update (Modify)</td><td>PUT</td></tr>
<tr><td>Delete (Destroy)</td><td>DELETE</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: částečný Update zaměřený pouze na modifikaci některých atributů je představován HTTP metodou <strong>PATCH</strong>, o níž se ve stručnosti zmíníme <a href="#k07">v&nbsp;sedmé kapitole</a>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Požadavek využívající metodu <strong>PATCH</strong></h2>

<p>V&nbsp;dalším demonstračním skriptu, jehož úplný zdrojový kód naleznete na adrese <a href="">https://github.com/tisnik/most-popular-python-libs/blob/master/requests/16_patch_method.py</a>, je ukázán základní způsob použití HTTP metody nazvané <strong>PATCH</strong>. Tato metoda se prozatím nepoužívá příliš často, a to ani v&nbsp;některých REST API službách, ovšem její sémantika předurčuje tuto metodu použít ve chvíli, kdy je nutné modifikovat nějaký již existující zdroj (<i>resource</i>) uložený na serveru (popř.&nbsp;v&nbsp;relační databázi apod.). Pokud by se například jednalo o úpravu jediného atributu, bude požadavek používající metodu <strong>PATCH</strong> kratší a provedený rychleji, než úplný požadavek založený na metodě <strong>PUT</strong> (<strong>POST</strong> má naproti tomu dosti odlišnou sémantiku &ndash; slouží k&nbsp;vytvoření nového zdroje):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests
import json

<i># adresa s testovací REST API službou</i>
URL = "https://httpbin.org/patch"

<i># hlavička posílaná v dotazu</i>
headers = {'accept': 'application/json'}

<i># poslání HTTP dotazu typu PATCH</i>
response = requests.patch(URL, headers=headers)

<i># přečtení hlaviček odpovědi</i>
headers = response.headers

<i># výpis všech hlaviček odpovědi</i>
print("Headers:")

for header_name, header_value in headers.items():
    print("{:40s} {}".format(header_name, header_value))

print("-" * 60)

print("Content:")

<i># zpracování odpovědi, která přišla ve formátu JSON</i>
data = response.json()

print(json.dumps(data, indent=4, sort_keys=True))
</pre>

<p>Ve skriptu je metoda <strong>PATCH</strong> použita pro přístup na adresu <a href="https://httpbin.org/patch">https://httpbin.org/patch</a> sloužící k&nbsp;jejímu základnímu otestování. Odpověď vrácená serverem by měla vypadat přibližně následovně (vypsány jsou napřed hlavičky a poté i tělo odpovědi ve formátu JSON):</p>

<pre>
Headers:
Connection                               keep-alive
Server                                   gunicorn/19.9.0
Date                                     Wed, 08 Aug 2018 15:25:28 GMT
Content-Type                             application/json
Content-Length                           373
Access-Control-Allow-Origin              *
Access-Control-Allow-Credentials         true
Via                                      1.1 vegur
------------------------------------------------------------
Content:
{
    "args": {},
    "data": "",
    "files": {},
    "form": {},
    "headers": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "close",
        "Content-Length": "0",
        "Host": "httpbin.org",
        "User-Agent": "python-requests/2.13.0"
    },
    "json": null,
    "origin": "213.175.37.10",
    "url": "https://httpbin.org/patch"
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Požadavek využívající metodu <strong>PUT</strong></h2>

<p>Požadavek používající HTTP metodu <strong>PUT</strong> vypadá velmi podobně jako požadavek <strong>POST</strong> popsaný minule. Liší se však sémantika (přibližně řečeno logický význam) těchto metod, protože zatímco <strong>POST</strong> typicky slouží k&nbsp;založení nového zdroje (<i>resource</i>) na serveru, je <strong>PUT</strong> použit k&nbsp;přepisu již existujících údajů. Rozdíl je v&nbsp;některých případech patrný i při pohledu na URL (adresu), protože u metody <strong>PUT</strong> by se mělo odkazovat přímo na konkrétní resource, kdežto u metody <strong>POST</strong> se odkazuje spíše na obecnější funkci (můžeme dokonce říci, že na konstruktor), která nový resource vytvoří a vrátí jeho identifikátor v&nbsp;odpovědi serveru. Podívejme se nyní v&nbsp;rychlosti na způsob použití metody <strong>PUT</strong>, kde opět použijeme testovací službu <a href="https://httpbin.org/">https://httpbin.org/</a>, konkrétně URL/adresu <a href="https://httpbin.org/put">https://httpbin.org/put</a>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests
import json

<i># adresa s testovací REST API službou</i>
URL = "https://httpbin.org/put"

<i># hlavička posílaná v dotazu</i>
headers = {'accept': 'application/json'}

<i># posláni HTTP dotazu typu PUT</i>
response = requests.put(URL, headers=headers)

<i># přečtení hlaviček odpovědi</i>
headers = response.headers

<i># výpis všech hlaviček odpovědi</i>
print("Headers:")

for header_name, header_value in headers.items():
    print("{:40s} {}".format(header_name, header_value))

print("-" * 60)

print("Content:")

<i># zpracování odpovědi, která přišla ve formátu JSON</i>
data = response.json()

print(json.dumps(data, indent=4, sort_keys=True))
</pre>

<p>Po spuštění tohoto skriptu dostaneme následující odpověď (vypsány jsou opět jak hlavičky poslané serverem, tak i tělo odpovědi):</p>

<pre>
Headers:
Connection                               keep-alive
Server                                   gunicorn/19.9.0
Date                                     Wed, 08 Aug 2018 15:25:38 GMT
Content-Type                             application/json
Content-Length                           371
Access-Control-Allow-Origin              *
Access-Control-Allow-Credentials         true
Via                                      1.1 vegur
------------------------------------------------------------
Content:
{
    "args": {},
    "data": "",
    "files": {},
    "form": {},
    "headers": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "close",
        "Content-Length": "0",
        "Host": "httpbin.org",
        "User-Agent": "python-requests/2.13.0"
    },
    "json": null,
    "origin": "213.175.37.10",
    "url": "https://httpbin.org/put"
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Požadavek využívající metodu <strong>OPTIONS</strong></h2>

<p>Poslední HTTP metoda, kterou si v&nbsp;dnešním článku alespoň ve stručnosti popíšeme, se jmenuje <strong>OPTIONS</strong>. Tato metoda se používá pro zjištění všech operací, které server na dané adrese podporuje. Operacemi jsou přitom v&nbsp;tomto kontextu myšleny HTTP metody. V&nbsp;případě, že pošleme serveru HTTP požadavek typu <strong>OPTIONS</strong>, bude odpověď typicky prázdná (tj.&nbsp;nebude mít žádné tělo), ovšem v&nbsp;hlavičkách odpovědi nalezneme i hlavičku <strong>Allow</strong> se seznamem podporovaných HTTP metod platných pro danou adresu. Hodnota této hlavičky může vypadat následovně:</p>

<pre>
Allow                                    OPTIONS, GET, HEAD
</pre>

<p>Opět se podívejme na příklad, který metodu <strong>OPTIONS</strong> použije, tentokrát na nám již známou adresu <a href="https://httpbin.org/get">https://httpbin.org/get</a>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests
import json

<i># adresa s testovací REST API službou</i>
URL = "https://httpbin.org/get"

<i># hlavička posílaná v dotazu</i>
headers = {'accept': 'application/json'}

<i># poslání HTTP dotazu typu OPTIONS</i>
response = requests.options(URL, headers=headers)

<i># přečtení hlaviček odpovědi</i>
headers = response.headers

<i># výpis všech hlaviček odpovědi</i>
print("Headers:")

for header_name, header_value in headers.items():
    print("{:40s} {}".format(header_name, header_value))

print("-" * 60)

print("Content:")

<i># výpis těla odpovědi</i>
print("Plain text:")
print("-" * 60)
print(response.text)
print("-" * 60)
</pre>

<p>Povšimněte si, že tělo odpovědi je skutečně prázdné a všechny (meta)informace tedy musíme získat z&nbsp;hlaviček:</p>

<pre>
Headers:
Connection                               keep-alive
Server                                   gunicorn/19.9.0
Date                                     Wed, 08 Aug 2018 19:31:01 GMT
Content-Type                             text/html; charset=utf-8
Allow                                    OPTIONS, GET, HEAD
Access-Control-Allow-Origin              *
Access-Control-Allow-Credentials         true
Access-Control-Allow-Methods             GET, POST, PUT, DELETE, PATCH, OPTIONS
Access-Control-Max-Age                   3600
Content-Length                           0
Via                                      1.1 vegur
------------------------------------------------------------
Content:
Plain text:
------------------------------------------------------------

------------------------------------------------------------
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Základy práce s&nbsp;cookies</h2>

<p>Ve druhé části článku si ukážeme základy práce s&nbsp;takzvanými <i>cookies</i>. Jedná se o <a href="https://en.wikipedia.org/wiki/HTTP_cookie">technologii používanou webovými servery</a> založenými na protokolu HTTP. Samotné cookie je (většinou) malé množství dat, které HTTP server pošle klientovi. Klient si může taková data uložit u sebe, a to buď na delší dobu (cookie jsou ukládány do souboru) nebo po dobu trvání jednoho sezení (<i>session</i>). Cookie mohou sloužit skutečně pouze pro identifikaci sezení (session) a potom je jejich obsah krátký &ndash; jen jednoznačný identifikátor session (například <strong>JSESSIONID</strong> atd.) nebo je možné do cookie uložit i větší množství dat; například obsah nákupního košíku apod. U cookies je možné specifikovat jak dobu jejich trvání, tak i adresu/adresy, pro něž je cookie platná (cookie je totiž nutné poslat zpět serveru a potřebujeme zamezit takzvanému kradení cookies). Knihovna <strong>Requests</strong> samozřejmě práci s&nbsp;cookies umožňuje a obsahuje i třídu <strong>Session</strong>, která je využitelná pro udržení kontextu mezi jednotlivými dotazy, které jsou směřovány na HTTP server.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Poslání cookies v&nbsp;GET požadavku</h2>

<p>Metodu <strong>Requests.get()</strong> jsme si již vyzkoušeli v&nbsp;předchozím článku, takže víme, že kromě adresy, která je povinná, je možné této metodě předat i další nepovinné údaje, z&nbsp;nichž se následně sestaví požadavek. Jedním z&nbsp;těchto nepovinných údajů je informace o hlavičkách (známe) a taktéž informace o <i>cookies</i>, které klient předává serveru. Tento parametr se jmenuje přímo <strong>cookies</strong> a předává se v&nbsp;něm buď slovník obsahující dvojice jméno_cookie+hodnota_cookie nebo objekt typu <strong>CookieJar</strong>. V&nbsp;dalším příkladu je ukázáno, jak se reprezentují cookies formou slovníku, což je samozřejmě (alespoň v&nbsp;Pythonu) nejjednodušší řešení:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests
import json

<i># adresa s testovací REST API službou</i>
URL = "https://httpbin.org/cookies"

<i># hlavička posílaná v dotazu</i>
headers = {'accept': 'application/json'}

<i># příprava cookies</i>
cookies = {'key1': 'value1',
           'key2': 'value2',
           'key3': 'value3'}

<i># poslání HTTP dotazu typu GET</i>
response = requests.get(URL, headers=headers, cookies=cookies)

<i># přečtení hlaviček</i>
headers = response.headers

print("-" * 60)

<i># výpis všech hlaviček</i>
print("Headers:")

for header_name, header_value in headers.items():
    print("{:40s} {}".format(header_name, header_value))

print("-" * 60)

print("Content:")

<i># zpracování odpovědi, která přišla ve formátu JSON</i>
data = response.json()

print(json.dumps(data, indent=4, sort_keys=True))

print("-" * 60)

print("Cookies:")
print(response.cookies.get_dict())
</pre>

<p>Server odpoví následujícím způsobem &ndash; cookies, které získal, nám vrátí v&nbsp;těle odpovědi, což je praktické zejména s&nbsp;ohledem na ladění aplikací:</p>

<pre>
------------------------------------------------------------
Headers:
Connection                               keep-alive
Server                                   gunicorn/19.9.0
Date                                     Wed, 08 Aug 2018 15:25:42 GMT
Content-Type                             application/json
Content-Length                           90
Access-Control-Allow-Origin              *
Access-Control-Allow-Credentials         true
Via                                      1.1 vegur
------------------------------------------------------------
Content:
{
    "cookies": {
        "key1": "value1",
        "key2": "value2",
        "key3": "value3"
    }
}
------------------------------------------------------------
Cookies:
{}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Objekt typu <strong>Session</strong> a jeho využití pro uložení stavu mezi dotazy</h2>

<p>Jak jsme si již řekli v&nbsp;předchozích dvou kapitolách, používají se cookies kromě dalších věcí i ve chvíli, kdy je zapotřebí si nějakým způsobem zapamatovat stav nějaké sekvence operací. Typickým příkladem je webový obchod, u něhož si samozřejmě musíme pamatovat přihlášeného uživatele, obsah jeho košíku, zda již bylo za zboží zaplaceno atd. Ve chvíli, kdy je klientská část naprogramována s&nbsp;využitím knihovny <strong>Requests</strong>, je možné celý <i>stav</i> (možná lépe řečeno &bdquo;sezení&ldquo;) reprezentovat objektem typu <strong>Session</strong>. Požadavky na server se pak posílají odlišně &ndash; nikoli pomocí <strong>request._http_metoda_</strong>, ale <strong>session._http_metoda_</strong>:</p>

<pre>
session = requests.Session()
URL = "..."

<i># hlavička posílaná v dotazu</i>
headers = {'accept': 'application/json'}

<i># poslání HTTP dotazu typu GET</i>
return session.get(URL, headers=headers)

<i># poslání HTTP dotazu typu POST</i>
return session.post(URL, headers=headers)
</pre>

<p>atd. atd.</p>

<p>Příklad, který objekt typu <strong>Session</strong> používá, si ukážeme <a href="#k13">v&nbsp;navazující kapitole</a>.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Příklad na použití objektu typu <strong>Session</strong></h2>

<p>Další příklad je již poněkud komplikovanější, protože v&nbsp;něm využíváme objekt typu <strong>Session</strong>, který si pamatuje stav požadavků (nebo možná lépe řečeno kontext, v&nbsp;jehož rámci se požadavky posílají a zpracovávají). V&nbsp;tomto příkladu voláme dvojici endpointů testovací HTTP služby <a href="https://httpbin.org/">https://httpbin.org/</a> pro nastavení nových cookies popř.&nbsp;pro jejich odstranění ze sezení (session):</p>

<ol>
<li><a href="https://httpbin.org/cookies/set/{name}/{value}">https://httpbin.org/cookies/set/{name}/{value}</a> pro nastavení cookie se zadaným jménem a hodnotou</li>
<li><a href="https://httpbin.org/cookies/delete?{name}">https://httpbin.org/cookies/delete?{name}</a> pro vymazání cookie specifikovaného jména</li>
<li><a href=""></a></li>
</ol>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests
import json


def set_cookie(session, name, value):
    # adresa s testovací REST API službou
    URL = "https://httpbin.org/cookies/set/{name}/{value}".format(name=name, value=value)

    # hlavička posílaná v dotazu
    headers = {'accept': 'application/json'}

    # poslani HTTP dotazu typu GET
    return session.get(URL, headers=headers)


def delete_cookie(session, name):
    # adresa s testovací REST API službou
    URL = "https://httpbin.org/cookies/delete?{name}=".format(name=name)

    # hlavička posílaná v dotazu
    headers = {'accept': 'application/json'}

    # poslani HTTP dotazu typu GET
    return session.get(URL, headers=headers)


def print_response(response):
    # přečtení hlaviček
    headers = response.headers

    print("-" * 60)

    # výpis hlavicek
    print("Headers:")

    for header_name, header_value in headers.items():
        print("{:40s} {}".format(header_name, header_value))

    print("-" * 60)

    print("Content:")

    # zpracovani odpovedi, ktera prisla ve formatu JSON
    data = response.text

    # zpracovani odpovedi, ktera prisla ve formatu JSON
    data = response.json()

    print(json.dumps(data, indent=4, sort_keys=True))

    print("-" * 60)


def print_session_cookies(session):
    cookies = session.cookies
    print("Session cookies:")

    for cookie_name, cookie_value in cookies.items():
        print("{:40s} {}".format(cookie_name, cookie_value))

    print("-" * 60)


session = requests.Session()

print("*** set cookie 'foo'=6 ***")
response = set_cookie(session, "foo", "6")
print_response(response)
print_session_cookies(session)
print()

print("*** set cookie 'bar'=7 ***")
response = set_cookie(session, "bar", "7")
print_response(response)
print_session_cookies(session)
print()

print("*** set cookie 'foo'=42 ***")
response = set_cookie(session, "foo", "42")
print_response(response)
print_session_cookies(session)
print()

print("*** delete cookie 'foo' ***")
response = delete_cookie(session, "foo")
print_response(response)
print_session_cookies(session)
print()

print("*** delete cookie 'baz' ***")
response = delete_cookie(session, "baz")
print_response(response)
print_session_cookies(session)
print()
</pre>

<p>Podívejme se nyní na výsledky. Jsou poněkud delší, protože ukazují, jak se dá zcela jednoduše měnit stav sezení:</p>

<pre>
*** set cookie 'foo'=6 ***
------------------------------------------------------------
Headers:
Connection                               keep-alive
Server                                   gunicorn/19.9.0
Date                                     Wed, 08 Aug 2018 15:25:57 GMT
Content-Type                             application/json
Content-Length                           38
Access-Control-Allow-Origin              *
Access-Control-Allow-Credentials         true
Via                                      1.1 vegur
------------------------------------------------------------
Content:
{
    "cookies": {
        "foo": "6"
    }
}
------------------------------------------------------------
Session cookies:
foo                                      6
------------------------------------------------------------

*** set cookie 'bar'=7 ***
------------------------------------------------------------
Headers:
Connection                               keep-alive
Server                                   gunicorn/19.9.0
Date                                     Wed, 08 Aug 2018 15:25:57 GMT
Content-Type                             application/json
Content-Length                           55
Access-Control-Allow-Origin              *
Access-Control-Allow-Credentials         true
Via                                      1.1 vegur
------------------------------------------------------------
Content:
{
    "cookies": {
        "bar": "7",
        "foo": "6"
    }
}
------------------------------------------------------------
Session cookies:
bar                                      7
foo                                      6
------------------------------------------------------------

*** set cookie 'foo'=42 ***
------------------------------------------------------------
Headers:
Connection                               keep-alive
Server                                   gunicorn/19.9.0
Date                                     Wed, 08 Aug 2018 15:25:57 GMT
Content-Type                             application/json
Content-Length                           56
Access-Control-Allow-Origin              *
Access-Control-Allow-Credentials         true
Via                                      1.1 vegur
------------------------------------------------------------
Content:
{
    "cookies": {
        "bar": "7",
        "foo": "42"
    }
}
------------------------------------------------------------
Session cookies:
bar                                      7
foo                                      42
------------------------------------------------------------

*** delete cookie 'foo' ***
------------------------------------------------------------
Headers:
Connection                               keep-alive
Server                                   gunicorn/19.9.0
Date                                     Wed, 08 Aug 2018 15:25:57 GMT
Content-Type                             application/json
Content-Length                           38
Access-Control-Allow-Origin              *
Access-Control-Allow-Credentials         true
Via                                      1.1 vegur
------------------------------------------------------------
Content:
{
    "cookies": {
        "bar": "7"
    }
}
------------------------------------------------------------
Session cookies:
bar                                      7
------------------------------------------------------------

*** delete cookie 'baz' ***
------------------------------------------------------------
Headers:
Connection                               keep-alive
Server                                   gunicorn/19.9.0
Date                                     Wed, 08 Aug 2018 15:25:58 GMT
Content-Type                             application/json
Content-Length                           38
Access-Control-Allow-Origin              *
Access-Control-Allow-Credentials         true
Via                                      1.1 vegur
------------------------------------------------------------
Content:
{
    "cookies": {
        "bar": "7"
    }
}
------------------------------------------------------------
Session cookies:
bar                                      7
------------------------------------------------------------
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Úprava testovacího HTTP serveru takovým způsobem, aby vypisoval hlavičky posílané klientem</h2>

<p>Na závěr si ukážeme, v&nbsp;jakém formátu se vlastně informace o cookies přenáší na server a jak je server dokáže zpracovat. Již dopředu si řekněme, že je vše řízeno dvěma hlavičkami se jmény <strong>Cookie</strong> a <strong>Set-Cookie</strong>. Abychom si ukázali způsob předávání těchto hlaviček, upravíme náš původní lokální (testovací) HTTP server, jehož první variantu naleznete na adrese <a href=""></a> a upravenou variantu na adrese <a href=""></a>. Úprava bude spočívat v&nbsp;tom, že server bude vypisovat všechny hlavičky požadavků, a to nezávisle na tom, jaká HTTP metoda byla pro poslání požadavku použita.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Nová podoba testovacího HTTP serveru</h2>

<p>Podoba <a href="">zdrojového kódu</a> nové varianty testovacího HTTP serveru je vypsána pod tímto odstavcem. Oproti <a href="">původní variantě</a> byly přidány pomocné metody <strong>send_headers()</strong> a <strong>print_request_content()</strong>. Server bude otestován skriptem popsaným v&nbsp;navazující kapitole:</p>

<pre>
<i>#!/usr/bin/python3</i>
<i># vim: set fileencoding=utf-8</i>

<i># Original (slightly buggy) code:</i>
<i># see https://gist.github.com/bradmontgomery/2219997</i>


import socket
from http.server import BaseHTTPRequestHandler, HTTPServer

hostName = ""
hostPort = 8000


class SimpleServer(BaseHTTPRequestHandler):

    def print_uri(self):
        print("URI: {uri}".format(uri=self.path))

    def send_headers(self):
        # příprava hlavicky odpovedi
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()

    def print_request_content(self):
        # přečtení těla HTTP požadavku
        print(self.headers)
        if "Content-Length" in self.headers:
            content_length = int(self.headers['Content-Length'])
            print("content length: {len}".format(len=content_length))

            content = self.rfile.read(content_length)
            print("content value:  {content}".format(content=content))

    def do_GET(self):
        self.print_uri()
        self.print_request_content()

        # odpověď serveru klientovi
        self.send_headers()
        self.wfile.write("*** get ***".encode("utf-8"))

    def do_POST(self):
        self.print_uri()
        self.print_request_content()

        # odpověď serveru klientovi
        self.send_headers()
        self.wfile.write("*** post ***".encode("utf-8"))


simpleServer = HTTPServer((hostName, hostPort), SimpleServer)

try:
    simpleServer.serve_forever()
except KeyboardInterrupt:
    pass

simpleServer.server_close()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Skript pro volání testovacího HTTP serveru s&nbsp;hlavičkou <strong>Set-Cookie</strong></h2>

<p>Podívejme se nyní na jednoduchý skript, který zavolá náš testovací HTTP server. Použije přitom metodu <strong>GET</strong> (koncovka adresy je libovolná) a předá serveru tři cookies:</p>

<pre>
<i># příprava cookies</i>
cookies = {'key1': 'value1',
           'key2': 'value2',
           'key3': 'value3'}

<i># poslání HTTP dotazu typu GET</i>
response = requests.get(URL, headers=headers, cookies=cookies)
</pre>

<p>Navíc ještě předá přímo v&nbsp;hlavičkách požadavku hlavička pojmenovaná <strong>Set-Cookie</strong> se jménem a hodnotou <i>cookie</i>, která by se měla zapamatovat (a většinou poslat zpět klientovi):</p>

<pre>
<i># hlavička posílaná v dotazu</i>
headers = {'accept': 'application/json',
           'Set-Cookie': "x=y"}

<i># poslání HTTP dotazu typu GET</i>
response = requests.get(URL, headers=headers, cookies=cookies)
</pre>

<p><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/requests/20_cookies_test_against_local_server.py">Úplný zdrojový kód</a> tohoto skriptu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import requests

<i># adresa s testovací REST API službou</i>
URL = "http://localhost:8000"

<i># hlavička posílaná v dotazu</i>
headers = {'accept': 'application/json',
           'Set-Cookie': "x=y"}

<i># příprava cookies</i>
cookies = {'key1': 'value1',
           'key2': 'value2',
           'key3': 'value3'}

<i># poslání HTTP dotazu typu GET</i>
response = requests.get(URL, headers=headers, cookies=cookies)

<i># přečtení hlaviček</i>
headers = response.headers

print("-" * 60)

<i># výpis všech hlaviček</i>
print("Headers:")

for header_name, header_value in headers.items():
    print("{:40s} {}".format(header_name, header_value))

print("-" * 60)

print("Content:")

<i># zpracování odpovědi, která přišla ve formátu JSON</i>
data = response.text

print(data)

print("-" * 60)

print("Cookies:")
print(response.cookies.get_dict())
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Spuštění skriptu, ukázka celého tvaru požadavku a formát odpovědi serveru</h2>

<p>Před otestováním skriptu popsaného <a href="#k16">v&nbsp;předchozí kapitole</a> je nutné spustit náš testovací HTTP server v&nbsp;samostatném terminálu (aby bylo vidět jeho výstup). To se provede jednoduše příkazem (skript se serverem je spustitelný):</p>

<pre>
$ <strong>./simple_server_2.py</strong>
</pre>

<p>Nyní již můžeme (opět v&nbsp;jiném terminálu) spustit zmíněný skript:</p>

<pre>
$ <strong>./21_cookies_test_against_local_server.py </strong>
</pre>

<p>Tento skript by měl poslat požadavek na testovací HTTP server, získat od něj odpověď a následně vypsat přibližně následující údaje (může se samozřejmě lišit čas, konkrétní verze interpretru Pythonu atd.). Povšimněte si, že server podle všech předpokladů nevrátil žádné cookies:</p>

<pre>
------------------------------------------------------------
Headers:
Server                                   BaseHTTP/0.6 Python/3.6.3
Date                                     Thu, 09 Aug 2018 12:11:39 GMT
Content-type                             text/plain
------------------------------------------------------------
Content:
*** get ***
------------------------------------------------------------
Cookies:
{}
</pre>

<p>Zajímavější bude pohled na zprávu vypsanou serverem ve chvíli, kdy přijme dotaz od demonstračního skriptu. Povšimněte si především dvou hlaviček nazvaných <strong>Cookie</strong> a <strong>Set-Cookie</strong>. V&nbsp;hlavičce <strong>Cookie</strong> jsou v&nbsp;textové podobě jména a hodnoty všech předaných cookies, v&nbsp;hlavičce <strong>Set-Cookie</strong> pak přesný opis textu, který jsme předali v&nbsp;požadavku (což je logické, ovšem je patrné, že zde máme velkou volnost zápisu, tj.&nbsp;serveru lze například předat data, která nebude schopen zpracovat):</p>

<pre>
Cookie: key1=value1; key2=value2; key3=value3
Set-Cookie: x=y
</pre>

<pre>
URI: /
Host: localhost:8000
User-Agent: python-requests/2.13.0
Accept-Encoding: gzip, deflate
accept: application/json
Connection: keep-alive
Set-Cookie: x=y
Cookie: key1=value1; key2=value2; key3=value3


127.0.0.1 - - [09/Aug/2018 14:11:39] "GET / HTTP/1.1" 200 -
</pre>


<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/testing-in-python">https://github.com/tisnik/testing-in-python</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem &ndash;
alespoň prozatím &ndash; velmi malý, dnes má přibližně několik desítek
kilobajtů), můžete namísto toho použít odkazy na jednotlivé demonstrační
příklady a jejich části, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/requests/">https://github.com/tisnik/testing-in-python/tree/master/requests/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/requests/">https://github.com/tisnik/testing-in-python/tree/master/requests/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/requests/">https://github.com/tisnik/testing-in-python/tree/master/requests/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/requests/">https://github.com/tisnik/testing-in-python/tree/master/requests/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/requests/">https://github.com/tisnik/testing-in-python/tree/master/requests/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/requests/">https://github.com/tisnik/testing-in-python/tree/master/requests/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/requests/">https://github.com/tisnik/testing-in-python/tree/master/requests/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/requests/">https://github.com/tisnik/testing-in-python/tree/master/requests/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/requests/">https://github.com/tisnik/testing-in-python/tree/master/requests/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/requests/">https://github.com/tisnik/testing-in-python/tree/master/requests/</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Předchozí články s&nbsp;tématem testování (nejenom) v&nbsp;Pythonu</h2>

<p>Tématem testování jsme se již na stránkách Rootu několikrát zabývali. Jedná
se mj.&nbsp;o následující články:</p>

<ol>

<li>Použití Pythonu pro tvorbu testů: od jednotkových testů až po testy UI<br />
<a href="https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-od-jednotkovych-testu-az-po-testy-ui/">https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-od-jednotkovych-testu-az-po-testy-ui/</a>
</li>

<li>Použití Pythonu pro tvorbu testů: použití třídy Mock z knihovny unittest.mock<br />
<a href="https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-pouziti-tridy-mock-z-knihovny-unittest-mock/">https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-pouziti-tridy-mock-z-knihovny-unittest-mock/</a>
</li>

<li>Použití nástroje pytest pro tvorbu jednotkových testů a benchmarků<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-pytest-pro-tvorbu-jednotkovych-testu-a-benchmarku/">https://www.root.cz/clanky/pouziti-nastroje-pytest-pro-tvorbu-jednotkovych-testu-a-benchmarku/</a>
</li>

<li>Nástroj pytest a jednotkové testy: fixtures, výjimky, parametrizace testů<br />
<a href="https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-fixtures-vyjimky-parametrizace-testu/">https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-fixtures-vyjimky-parametrizace-testu/</a>
</li>

<li>Nástroj pytest a jednotkové testy: životní cyklus testů, užitečné tipy a triky<br />
<a href="https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-zivotni-cyklus-testu-uzitecne-tipy-a-triky/">https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-zivotni-cyklus-testu-uzitecne-tipy-a-triky/</a>
</li>

<li>Struktura projektů s jednotkovými testy, využití Travis CI<br />
<a href="https://www.root.cz/clanky/struktura-projektu-s-jednotkovymi-testy-vyuziti-travis-ci/">https://www.root.cz/clanky/struktura-projektu-s-jednotkovymi-testy-vyuziti-travis-ci/</a>
</li>

<li>Omezení stavového prostoru testovaných funkcí a metod<br />
<a href="https://www.root.cz/clanky/omezeni-stavoveho-prostoru-testovanych-funkci-a-metod/">https://www.root.cz/clanky/omezeni-stavoveho-prostoru-testovanych-funkci-a-metod/</a>
</li>

<li>Testování aplikací s využitím nástroje Hypothesis<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-s-vyuzitim-nastroje-hypothesis/">https://www.root.cz/clanky/testovani-aplikaci-s-vyuzitim-nastroje-hypothesis/</a>
</li>

<li>Testování aplikací s využitím nástroje Hypothesis (dokončení)<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-s-vyuzitim-nastroje-hypothesis-dokonceni/">https://www.root.cz/clanky/testovani-aplikaci-s-vyuzitim-nastroje-hypothesis-dokonceni/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (druhá část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (závěrečná část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/</a>
</li>

<li>Validace datových struktur v Pythonu pomocí knihoven Schemagic a Schema<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/</a>
</li>

<li>Validace datových struktur v Pythonu (2. část)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/</a>
</li>

<li>Validace datových struktur v Pythonu (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/</a>
</li>

<li>Univerzální testovací nástroj Robot Framework<br />
<a href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/">https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/</a>
</li>

<li>Univerzální testovací nástroj Robot Framework a BDD testy<br />
<a href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework-a-bdd-testy/">https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework-a-bdd-testy/</a>
</li>

<li>Úvod do problematiky fuzzingu a fuzz testování<br />
<a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/">https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/</a>
</li>

<li>Úvod do problematiky fuzzingu a fuzz testování – složení vlastního fuzzeru<br />
<a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani-slozeni-vlastniho-fuzzeru/">https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani-slozeni-vlastniho-fuzzeru/</a>
</li>

<li>Knihovny a moduly usnadňující testování aplikací naprogramovaných v jazyce Clojure<br />
<a href="https://www.root.cz/clanky/knihovny-a-moduly-usnadnujici-testovani-aplikaci-naprogramovanych-v-jazyce-clojure/">https://www.root.cz/clanky/knihovny-a-moduly-usnadnujici-testovani-aplikaci-naprogramovanych-v-jazyce-clojure/</a>
</li>

<li>Validace dat s využitím knihovny spec v Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Testování aplikací naprogramovaných v jazyce Go<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/">https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/</a>
</li>

<li>Knihovny určené pro tvorbu testů v programovacím jazyce Go<br />
<a href="https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/">https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/</a>
</li>

<li>Testování aplikací psaných v Go s využitím knihoven Goblin a Frisby<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/">https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/</a>
</li>

<li>Testování Go aplikací s využitím knihovny GΩmega a frameworku Ginkgo<br />
<a href="https://www.root.cz/clanky/testovani-go-aplikaci-s-vyuzitim-knihovny-gomega-mega-a-frameworku-ginkgo/">https://www.root.cz/clanky/testovani-go-aplikaci-s-vyuzitim-knihovny-gomega-mega-a-frameworku-ginkgo/</a>
</li>

<li>Tvorba BDD testů s využitím jazyka Go a nástroje godog<br />
<a href="https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/">https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/</a>
</li>

<li>Použití Go pro automatizaci práce s aplikacemi s interaktivním příkazovým řádkem<br />
<a href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/">https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/</a>
</li>

<li>Použití Go pro automatizaci práce s aplikacemi s interaktivním příkazovým řádkem (dokončení)<br />
<a href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem-dokonceni/">https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem-dokonceni/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Requests: HTTP for Humans (dokumentace)<br />
<a href="http://docs.python-requests.org/en/master/">http://docs.python-requests.org/en/master/</a>
</li>

<li>Requests: Introduction<br />
<a href="http://docs.python-requests.org/en/latest/user/intro/">http://docs.python-requests.org/en/latest/user/intro/</a>
</li>

<li>Requests na GitHubu<br />
<a href="https://github.com/requests/requests">https://github.com/requests/requests</a>
</li>

<li>Requests (software) na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Requests_%28software%29">https://en.wikipedia.org/wiki/Requests_%28software%29</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>20 Python libraries you can’t live without<br />
<a href="https://pythontips.com/2013/07/30/20-python-libraries-you-cant-live-without/">https://pythontips.com/2013/07/30/20-python-libraries-you-cant-live-without/</a>
</li>

<li>What are the top 10 most useful and influential Python libraries and frameworks?<br />
<a href="https://www.quora.com/What-are-the-top-10-most-useful-and-influential-Python-libraries-and-frameworks">https://www.quora.com/What-are-the-top-10-most-useful-and-influential-Python-libraries-and-frameworks</a>
</li>

<li>Python: useful modules<br />
<a href="https://wiki.python.org/moin/UsefulModules">https://wiki.python.org/moin/UsefulModules</a>
</li>

<li>Top 15 most popular Python libraries<br />
<a href="https://keyua.org/blog/most-popular-python-libraries/">https://keyua.org/blog/most-popular-python-libraries/</a>
</li>

<li>Hypertext Transfer Protocol<br />
<a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol</a>
</li>

<li>List of HTTP header fields<br />
<a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields">https://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a>
</li>

<li>List of HTTP status codes<br />
<a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">https://en.wikipedia.org/wiki/List_of_HTTP_status_codes</a>
</li>

<li>Python requests deep dive<br />
<a href="https://medium.com/@anthonypjshaw/python-requests-deep-dive-a0a5c5c1e093">https://medium.com/@anthonypjshaw/python-requests-deep-dive-a0a5c5c1e093</a>
</li>

<li>The awesome requests module<br />
<a href="https://www.pythonforbeginners.com/requests/the-awesome-requests-module">https://www.pythonforbeginners.com/requests/the-awesome-requests-module</a>
</li>

<li>Send HTTP Requests in Python<br />
<a href="https://code-maven.com/http-requests-in-python">https://code-maven.com/http-requests-in-python</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Writing tests for RESTful APIs in Python using requests – part 1: basic tests<br />
<a href="https://www.ontestautomation.com/writing-tests-for-restful-apis-in-python-using-requests-part-1-basic-tests/">https://www.ontestautomation.com/writing-tests-for-restful-apis-in-python-using-requests-part-1-basic-tests/</a>
</li>

<li>Step by Step Rest API Testing using Python + Pytest + Allure<br />
<a href="https://www.udemy.com/course/api-testing-python/">https://www.udemy.com/course/api-testing-python/</a>
</li>

<li>Prime formulas and polynomial functions<br />
<a href="https://en.wikipedia.org/wiki/Formula_for_primes#Prime_formulas_and_polynomial_functions">https://en.wikipedia.org/wiki/Formula_for_primes#Prime_formulas_and_polynomial_functions</a>
</li>

<li>Prime-Generating Polynomial<br />
<a href="https://mathworld.wolfram.com/Prime-GeneratingPolynomial.html">https://mathworld.wolfram.com/Prime-GeneratingPolynomial.html</a>
</li>

<li>Hoare logic<br />
<a href="https://en.wikipedia.org/wiki/Hoare_logic">https://en.wikipedia.org/wiki/Hoare_logic</a>
</li>

<li>Goto Fail, Heartbleed, and Unit Testing Culture<br />
<a href="https://martinfowler.com/articles/testing-culture.html">https://martinfowler.com/articles/testing-culture.html</a>
</li>

<li>PEP-484<br />
<a href="https://www.python.org/dev/peps/pep-0484/">https://www.python.org/dev/peps/pep-0484/</a>
</li>

<li>In-depth: Functional programming in C++<br />
<a href="https://www.gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php">https://www.gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php</a>
</li>

<li>mypy<br />
<a href="http://www.mypy-lang.org/">http://www.mypy-lang.org/</a>
</li>

<li>Welcome to Mypy documentation!<br />
<a href="https://mypy.readthedocs.io/en/latest/index.html">https://mypy.readthedocs.io/en/latest/index.html</a>
</li>

<li>mypy na GitHubu<br />
<a href="https://github.com/python/mypy">https://github.com/python/mypy</a>
</li>

<li>mypy 0.770 na PyPi<br />
<a href="https://pypi.org/project/mypy/">https://pypi.org/project/mypy/</a>
</li>

<li>Extensions for mypy (separated out from mypy/extensions)<br />
<a href="https://github.com/python/mypy_extensions">https://github.com/python/mypy_extensions</a>
</li>

<li>The Mypy Blog<br />
<a href="https://mypy-lang.blogspot.com/2020/03/mypy-0770-released.html">https://mypy-lang.blogspot.com/2020/03/mypy-0770-released.html</a>
</li>

<li>Our journey to type checking 4 million lines of Python<br />
<a href="https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python">https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python</a>
</li>

<li>Type-Checking Python Programs With Type Hints and mypy<br />
<a href="https://www.youtube.com/watch?v=2xWhaALHTvU">https://www.youtube.com/watch?v=2xWhaALHTvU</a>
</li>

<li>Refactoring to Immutability - Kevlin Henney<br />
<a href="https://www.youtube.com/watch?v=APUCMSPiNh4">https://www.youtube.com/watch?v=APUCMSPiNh4</a>
</li>

<li>Bernat Gabor - Type hinting (and mypy) - PyCon 2019<br />
<a href="https://www.youtube.com/watch?v=hTrjTAPnA_k">https://www.youtube.com/watch?v=hTrjTAPnA_k</a>
</li>

<li>Stanford Seminar - Optional Static Typing for Python<br />
<a href="https://www.youtube.com/watch?v=GiZKuyLKvAA">https://www.youtube.com/watch?v=GiZKuyLKvAA</a>
</li>

<li>mypy Getting to Four Million Lines of Typed Python - Michael Sullivan<br />
<a href="https://www.youtube.com/watch?v=FT_WHV4-QcU">https://www.youtube.com/watch?v=FT_WHV4-QcU</a>
</li>

<li>Shebang<br />
<a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">https://en.wikipedia.org/wiki/Shebang_(Unix)</a>
</li>

<li>pytest 5.4.2 na PyPi<br />
<a href="https://pypi.org/project/pytest/">https://pypi.org/project/pytest/</a>
</li>

<li>Hillel Wayne - Beyond Unit Tests: Taking Your Testing to the Next Level - PyCon 2018<br />
<a href="https://www.youtube.com/watch?v=MYucYon2-lk">https://www.youtube.com/watch?v=MYucYon2-lk</a>
</li>

<li>Awesome Python &ndash; testing<br />
<a href="https://github.com/vinta/awesome-python#testing">https://github.com/vinta/awesome-python#testing</a>
</li>

<li>pytest Plugins Compatibility<br />
<a href="http://plugincompat.herokuapp.com/">http://plugincompat.herokuapp.com/</a>
</li>

<li>Selenium (pro Python)<br />
<a href="https://pypi.org/project/selenium/">https://pypi.org/project/selenium/</a>
</li>

<li>Getting Started With Testing in Python<br />
<a href="https://realpython.com/python-testing/">https://realpython.com/python-testing/</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Mock - Mocking and Testing Library<br />
<a href="http://mock.readthedocs.io/en/stable/">http://mock.readthedocs.io/en/stable/</a>
</li>

<li>Python Mocking 101: Fake It Before You Make It<br />
<a href="https://blog.fugue.co/2016-02-11-python-mocking-101.html">https://blog.fugue.co/2016-02-11-python-mocking-101.html</a>
</li>

<li>Nauč se Python! - Testování<br />
<a href="http://naucse.python.cz/lessons/intro/testing/">http://naucse.python.cz/lessons/intro/testing/</a>
</li>

<li>Flexmock (dokumentace)<br />
<a href="https://flexmock.readthedocs.io/en/latest/">https://flexmock.readthedocs.io/en/latest/</a>
</li>

<li>Test Fixture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test_fixture">https://en.wikipedia.org/wiki/Test_fixture</a>
</li>

<li>Mock object (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Mock_object">https://en.wikipedia.org/wiki/Mock_object</a>
</li>

<li>Extrémní programování<br />
<a href="https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD">https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD</a>
</li>

<li>Programování řízené testy<br />
<a href="https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy">https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>Tox<br />
<a href="https://tox.readthedocs.io/en/latest/">https://tox.readthedocs.io/en/latest/</a>
</li>

<li>pytest: helps you write better programs<br />
<a href="https://docs.pytest.org/en/latest/">https://docs.pytest.org/en/latest/</a>
</li>

<li>doctest — Test interactive Python examples<br />
<a href="https://docs.python.org/dev/library/doctest.html#module-doctest">https://docs.python.org/dev/library/doctest.html#module-doctest</a>
</li>

<li>unittest — Unit testing framework<br />
<a href="https://docs.python.org/dev/library/unittest.html">https://docs.python.org/dev/library/unittest.html</a>
</li>

<li>Python namespaces<br />
<a href="https://bytebaker.com/2008/07/30/python-namespaces/">https://bytebaker.com/2008/07/30/python-namespaces/</a>
</li>

<li>Namespaces and Scopes<br />
<a href="https://www.python-course.eu/namespaces.php">https://www.python-course.eu/namespaces.php</a>
</li>

<li>Stránka projektu Robot Framework<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>GitHub repositář Robot Frameworku<br />
<a href="https://github.com/robotframework/robotframework">https://github.com/robotframework/robotframework</a>
</li>

<li>Robot Framework (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Robot_Framework">https://en.wikipedia.org/wiki/Robot_Framework</a>
</li>

<li>Tutoriál Robot Frameworku<br />
<a href="http://www.robotframeworktutorial.com/">http://www.robotframeworktutorial.com/</a>
</li>

<li>Robot Framework Documentation<br />
<a href="https://robotframework.org/robotframework/">https://robotframework.org/robotframework/</a>
</li>

<li>Robot Framework Introduction<br />
<a href="https://blog.testproject.io/2016/11/22/robot-framework-introduction/">https://blog.testproject.io/2016/11/22/robot-framework-introduction/</a>
</li>

<li>robotframework 3.1.2 na PyPi<br />
<a href="https://pypi.org/project/robotframework/">https://pypi.org/project/robotframework/</a>
</li>

<li>Robot Framework demo (GitHub)<br />
<a href="https://github.com/robotframework/RobotDemo">https://github.com/robotframework/RobotDemo</a>
</li>

<li>Robot Framework web testing demo using SeleniumLibrary<br />
<a href="https://github.com/robotframework/WebDemo">https://github.com/robotframework/WebDemo</a>
</li>

<li>Robot Framework for Mobile Test Automation Demo<br />
<a href="https://www.youtube.com/watch?v=06LsU08slP8">https://www.youtube.com/watch?v=06LsU08slP8</a>
</li>

<li>Gherkin<br />
<a href="https://cucumber.io/docs/gherkin/">https://cucumber.io/docs/gherkin/</a>
</li>

<li>Selenium<br />
<a href="https://selenium.dev/">https://selenium.dev/</a>
</li>

<li>SeleniumLibrary<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>The Practical Test Pyramid<br />
<a href="https://martinfowler.com/articles/practical-test-pyramid.html">https://martinfowler.com/articles/practical-test-pyramid.html</a>
</li>

<li>Acceptance Tests and the Testing Pyramid<br />
<a href="http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/">http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/</a>
</li>

<li>Tab-separated values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>radamsa<br />
<a href="https://gitlab.com/akihe/radamsa">https://gitlab.com/akihe/radamsa</a>
</li>

<li>Fuzzing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fuzzing">https://en.wikipedia.org/wiki/Fuzzing</a>
</li>

<li>american fuzzy lop<br />
<a href="http://lcamtuf.coredump.cx/afl/">http://lcamtuf.coredump.cx/afl/</a>
</li>

<li>Fuzzing: the new unit testing<br />
<a href="https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1">https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1</a>
</li>

<li>Corpus for github.com/dvyukov/go-fuzz examples<br />
<a href="https://github.com/dvyukov/go-fuzz-corpus">https://github.com/dvyukov/go-fuzz-corpus</a>
</li>

<li>AFL &ndash; QuickStartGuide.txt<br />
<a href="https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt">https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt</a>
</li>

<li>Introduction to Fuzzing in Python with AFL<br />
<a href="https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/">https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/</a>
</li>

<li>Writing a Simple Fuzzer in Python<br />
<a href="https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/">https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/</a>
</li>

<li>How to Fuzz Go Code with go-fuzz (Continuously)<br />
<a href="https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/">https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/</a>
</li>

<li>Golang Fuzzing: A go-fuzz Tutorial and Example<br />
<a href="http://networkbit.ch/golang-fuzzing/">http://networkbit.ch/golang-fuzzing/</a>
</li>

<li>Fuzzing Python Modules<br />
<a href="https://stackoverflow.com/questions/20749026/fuzzing-python-modules">https://stackoverflow.com/questions/20749026/fuzzing-python-modules</a>
</li>

<li>0x3 Python Tutorial: Fuzzer<br />
<a href="http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/">http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/</a>
</li>

<li>fuzzing na PyPi<br />
<a href="https://pypi.org/project/fuzzing/">https://pypi.org/project/fuzzing/</a>
</li>

<li>Fuzzing 0.3.2 documentation<br />
<a href="https://fuzzing.readthedocs.io/en/latest/">https://fuzzing.readthedocs.io/en/latest/</a>
</li>

<li>Randomized testing for Go<br />
<a href="https://github.com/dvyukov/go-fuzz">https://github.com/dvyukov/go-fuzz</a>
</li>

<li>HTTP/2 fuzzer written in Golang<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Ffuf (Fuzz Faster U Fool) – An Open Source Fast Web Fuzzing Tool<br />
<a href="https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html">https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html</a>
</li>

<li>Continuous Fuzzing Made Simple<br />
<a href="https://fuzzit.dev/">https://fuzzit.dev/</a>
</li>

<li>Halt and Catch Fire<br />
<a href="https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86">https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86</a>
</li>

<li>Random testing<br />
<a href="https://en.wikipedia.org/wiki/Random_testing">https://en.wikipedia.org/wiki/Random_testing</a>
</li>

<li>Monkey testing<br />
<a href="https://en.wikipedia.org/wiki/Monkey_testing">https://en.wikipedia.org/wiki/Monkey_testing</a>
</li>

<li>Fuzzing for Software Security Testing and Quality Assurance, Second Edition<br />
<a href="https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false">https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false</a>
</li>

<li>libFuzzer – a library for coverage-guided fuzz testing<br />
<a href="https://llvm.org/docs/LibFuzzer.html">https://llvm.org/docs/LibFuzzer.html</a>
</li>

<li>fuzzy-swagger na PyPi<br />
<a href="https://pypi.org/project/fuzzy-swagger/">https://pypi.org/project/fuzzy-swagger/</a>
</li>

<li>fuzzy-swagger na GitHubu<br />
<a href="https://github.com/namuan/fuzzy-swagger">https://github.com/namuan/fuzzy-swagger</a>
</li>

<li>Fuzz testing tools for Python<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools">https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools</a>
</li>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go</a>
</li>

<li>gofuzz: a library for populating go objects with random values<br />
<a href="https://github.com/google/gofuzz">https://github.com/google/gofuzz</a>
</li>

<li>tavor: A generic fuzzing and delta-debugging framework<br />
<a href="https://github.com/zimmski/tavor">https://github.com/zimmski/tavor</a>
</li>

<li>hypothesis na GitHubu<br />
<a href="https://github.com/HypothesisWorks/hypothesis">https://github.com/HypothesisWorks/hypothesis</a>
</li>

<li>Hypothesis: Test faster, fix more<br />
<a href="https://hypothesis.works/">https://hypothesis.works/</a>
</li>

<li>Hypothesis<br />
<a href="https://hypothesis.works/articles/intro/">https://hypothesis.works/articles/intro/</a>
</li>

<li>What is Hypothesis?<br />
<a href="https://hypothesis.works/articles/what-is-hypothesis/">https://hypothesis.works/articles/what-is-hypothesis/</a>
</li>

<li>What is Property Based Testing?<br />
<a href="https://hypothesis.works/articles/what-is-property-based-testing/">https://hypothesis.works/articles/what-is-property-based-testing/</a>
</li>

<li>Databáze CVE<br />
<a href="https://www.cvedetails.com/">https://www.cvedetails.com/</a>
</li>

<li>Fuzz test Python modules with libFuzzer<br />
<a href="https://github.com/eerimoq/pyfuzzer">https://github.com/eerimoq/pyfuzzer</a>
</li>

<li>Taof - The art of fuzzing<br />
<a href="https://sourceforge.net/projects/taof/">https://sourceforge.net/projects/taof/</a>
</li>

<li>JQF + Zest: Coverage-guided semantic fuzzing for Java<br />
<a href="https://github.com/rohanpadhye/jqf">https://github.com/rohanpadhye/jqf</a>
</li>

<li>http2fuzz<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Demystifying hypothesis testing with simple Python examples<br />
<a href="https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294">https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294</a>
</li>

<li>Testování<br />
<a href="http://voho.eu/wiki/testovani/">http://voho.eu/wiki/testovani/</a>
</li>

<li>Unit testing (Wikipedia.en)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing (Wikipedia.cz)<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit Test vs Integration Test<br />
<a href="https://www.youtube.com/watch?v=0GypdsJulKE">https://www.youtube.com/watch?v=0GypdsJulKE</a>
</li>

<li>TestDouble<br />
<a href="https://martinfowler.com/bliki/TestDouble.html">https://martinfowler.com/bliki/TestDouble.html</a>
</li>

<li>Test Double<br />
<a href="http://xunitpatterns.com/Test%20Double.html">http://xunitpatterns.com/Test%20Double.html</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Acceptance test–driven development<br />
<a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development">https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development</a>
</li>

<li>Gauge<br />
<a href="https://gauge.org/">https://gauge.org/</a>
</li>

<li>Gauge (software)<br />
<a href="https://en.wikipedia.org/wiki/Gauge_(software)">https://en.wikipedia.org/wiki/Gauge_(software)</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>Testing is Good. Pyramids are Bad. Ice Cream Cones are the Worst<br />
<a href="https://medium.com/@fistsOfReason/testing-is-good-pyramids-are-bad-ice-cream-cones-are-the-worst-ad94b9b2f05f">https://medium.com/@fistsOfReason/testing-is-good-pyramids-are-bad-ice-cream-cones-are-the-worst-ad94b9b2f05f</a>
</li>

<li>Články a zprávičky věnující se Pythonu<br />
<a href="https://www.root.cz/n/python/">https://www.root.cz/n/python/</a>
</li>

<li>PythonTestingToolsTaxonomy<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy">https://wiki.python.org/moin/PythonTestingToolsTaxonomy</a>
</li>

<li>Top 6 BEST Python Testing Frameworks [Updated 2020 List]<br />
<a href="https://www.softwaretestinghelp.com/python-testing-frameworks/">https://www.softwaretestinghelp.com/python-testing-frameworks/</a>
</li>

<li>pytest-print 0.1.3<br />
<a href="https://pypi.org/project/pytest-print/">https://pypi.org/project/pytest-print/</a>
</li>

<li>pytest fixtures: explicit, modular, scalable<br />
<a href="https://docs.pytest.org/en/latest/fixture.html">https://docs.pytest.org/en/latest/fixture.html</a>
</li>

<li>PyTest Tutorial: What is, Install, Fixture, Assertions<br />
<a href="https://www.guru99.com/pytest-tutorial.html">https://www.guru99.com/pytest-tutorial.html</a>
</li>

<li>Pytest - Fixtures<br />
<a href="https://www.tutorialspoint.com/pytest/pytest_fixtures.htm">https://www.tutorialspoint.com/pytest/pytest_fixtures.htm</a>
</li>

<li>Marking test functions with attributes<br />
<a href="https://docs.pytest.org/en/latest/mark.html">https://docs.pytest.org/en/latest/mark.html</a>
</li>

<li>pytest-print<br />
<a href="https://pytest-print.readthedocs.io/en/latest/">https://pytest-print.readthedocs.io/en/latest/</a>
</li>

<li>Continuous integration<br />
<a href="https://en.wikipedia.org/wiki/Continuous_integration">https://en.wikipedia.org/wiki/Continuous_integration</a>
</li>

<li>Travis CI<br />
<a href="https://travis-ci.org/">https://travis-ci.org/</a>
</li>

<li>Mutation testing<br />
<a href="https://en.wikipedia.org/wiki/Mutation_testing">https://en.wikipedia.org/wiki/Mutation_testing</a>
</li>

<li>Články o Hypothesis<br />
<a href="https://news.ycombinator.com/from?site=hypothesis.works">https://news.ycombinator.com/from?site=hypothesis.works</a>
</li>

<li>Testovací případ<br />
<a href="https://cs.wikipedia.org/wiki/Testovac%C3%AD_p%C5%99%C3%ADpad">https://cs.wikipedia.org/wiki/Testovac%C3%AD_p%C5%99%C3%ADpad</a>
</li>

<li>Most testing is ineffective<br />
<a href="https://hypothesis.works/">https://hypothesis.works/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

