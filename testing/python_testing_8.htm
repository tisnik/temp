<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Testování aplikací s využitím nástroje Hypothesis</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Testování aplikací s využitím nástroje Hypothesis</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Osmá část seriálu o tvorbě testů s&nbsp;využitím programovacího jazyka Python je opět věnována problematice pokrytí co největší části stavového prostoru testovaných jednotek. Zatímco minule jsme si ukázali, jak tento stavový prostor zmenšit, dnes si naopak ukážeme, jak ho pokrýt automaticky vytvářenými testy.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Testování aplikací s&nbsp;využitím nástroje Hypothesis</a></p>
<p><a href="#k02">2. Jak testování probíhá</a></p>
<p><a href="#k03">*** 3. Malá odbočka &ndash; Hoarova logika</a></p>
<p><a href="#k04">4. Jednoduchý příklad &ndash; implementace bublinkového řazení</a></p>
<p><a href="#k05">5. Vytvoření klasických jednotkových testů</a></p>
<p><a href="#k06">6. Použití Hypothesis a orákula</a></p>
<p><a href="#k07">*** 7. Zdánlivé vylepšení algoritmu bublinkového řazení</a></p>
<p><a href="#k08">*** 8. Zavedení chyby do implementace algoritmu</a></p>
<p><a href="#k09">*** 9. Výsledek testů vytvořených nástrojem Hypothesis</a></p>
<p><a href="#k10">*** 10. Specifikace minimální a maximální velikosti vstupů</a></p>
<p><a href="#k11">*** 11. Vylepšení podmínky při neexistenci referenční implementace</a></p>
<p><a href="#k12">*** 12. Jednoduchá šifra typu ROT13</a></p>
<p><a href="#k13">*** 13. Otestování jednoduché šifry</a></p>
<p><a href="#k14">*** 14. Zanesení chyby do algoritmu šifrování</a></p>
<p><a href="#k15">*** 15. Přesnější specifikace podoby generovaných textových dat</a></p>
<p><a href="#k16">*** 16. Metody <strong>map</strong> a <strong>filter</strong></a></p>
<p><a href="#k17">*** 17. Kombinace více strategií</a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Předchozí články s&nbsp;tématem testování (nejenom) v&nbsp;Pythonu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Testování aplikací s&nbsp;využitím nástroje Hypothesis</h2>

<p><a
href="https://www.root.cz/clanky/omezeni-stavoveho-prostoru-testovanych-funkci-a-metod/">V&nbsp;předchozí
části</a> seriálu o tvorbě testů s&nbsp;využitím programovacího jazyka <a
href="https://www.root.cz/n/python/">Python</a> jsme si řekli, jakým způsobem
je možné zmenšit &bdquo;stavový prostor&ldquo; testované jednotky (tedy funkce,
metody či celého objektu) a tím pádem i zmenšit počet testů, které je nutné
explicitně vytvořit. Pro zmenšení oblasti stavového prostoru jsme použili
nástroj <i>Mypy</i>, který umožňuje zkontrolovat (nepovinné) typové deklarace,
jenž mohou být ve zdrojových kódech Pythonu použity. Jedná se o relativně novou
vlastnost zavedenou v&nbsp;rámci Pythonu 3.5 a později ještě lépe
stabilizovanou (verze 3.5 sice vyšla již před pěti lety, ovšem na příkladu
Pythonu 2 je patrné, že nové verze nebývají vždy přijímány příliš rychle).
Existuje ovšem i opačný přístup k&nbsp;tvorbě testů &ndash; nechat si na
základě zadaných pravidel a vzorů nechat testy automaticky vygenerovat, ideálně
takovým způsobem, aby se ve vygenerovaných testech projevily i různé mezní
případy. A právě na tomto přístupu je založen nástroj nazvaný
<i>Hypothesis</i>, kterým se budeme zabývat dnes.</p>

<p>Nástroj <i>Hypothesis</i> je ovšem velmi užitečný i při dalších činnostech,
nejenom jako pomocník při tvorbě testů. Díky tomu, že lze použít takzvané
<i>orákulum</i> (viz navazující kapitoly), je umožněno, aby byl
<i>Hypothesis</i> použit například při refaktoringu či při optimalizacích
algoritmů &ndash; postačuje totiž mít dvě implementace algoritmu
(neoptimalizovanou/nerefaktorovanou a novou) a ty si nechat navzájem prověřit,
pochopitelně opět s&nbsp;využitím mezních případů. Podle mého názoru se jedná o
velmi užitečný a především praktický přístup.</p>

<p>Před pročítáním dalších kapitol je vhodné si <i>Hypothesis</i> nainstalovat,
a to klasicky s&nbsp;využitím nástroje <strong>pip</strong> či
<strong>pip3</strong>:</p>

<pre>
$ <strong>pip3 install --user hypothesis</strong>
&nbsp;
Collecting hypothesis
  Downloading https://files.pythonhosted.org/packages/99/27/4a3fd8eb6e121e6769bf83a3c1647bc1daab586ac7c70fcf93c4756c51f3/hypothesis-5.16.0-py3-none-any.whl (294kB)
Collecting sortedcontainers&lt;3.0.0,&gt;=2.1.0 (from hypothesis)
  Downloading https://files.pythonhosted.org/packages/13/f3/cf85f7c3a2dbd1a515d51e1f1676d971abe41bba6f4ab5443240d9a78e5b/sortedcontainers-2.1.0-py2.py3-none-any.whl
Collecting attrs&gt;=19.2.0 (from hypothesis)
  Downloading https://files.pythonhosted.org/packages/a2/db/4313ab3be961f7a763066401fb77f7748373b6094076ae2bda2806988af6/attrs-19.3.0-py2.py3-none-any.whl
Installing collected packages: sortedcontainers, attrs, hypothesis
Successfully installed attrs-19.3.0 hypothesis-5.16.0 sortedcontainers-2.1.0
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Jak testování probíhá</h2>

<p>Pojďme si nyní ukázat, jak vlastně testování s&nbsp;využitím nástroje
<i>Hypothesis</i> probíhá. Nejdříve z&nbsp;pohledu vývojáře (či obecněji tvůrce
testů):</p>

<ol>

<li>Uživatel nejdříve popíše, jak má vypadat validní vstup či vstupy do
testované jednotky.</li>

<li>Dále napíše test, který by pro tento vstup měl projít bez chyby.</li>

</ol>

<p>Z&nbsp;pohledu nástroje <i>Hypothesis</i>:</p>

<ol>

<li>Automaticky vytvoří test pro jednotlivé testovací případy založené na
popisu validního vstupu.</li>

<li>Spustí vytvořený test pro jednotlivé testovací případy.</li>

<li>Sesbírá vstupy u těch testů, které z&nbsp;nějakého důvodu zhavarovaly.</li>

<li>Nakonec se pokusí najít minimální vstup způsobující chybu.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: asi jste si povšimli, že princip práce
nástroje <i>Hypothesis</i> se do značné míry podobá klasickým <i>fuzzerům</i>,
o nichž jsme se již zmínili v&nbsp;předchozích článcích. A skutečně &ndash; na
Hypothesis se můžeme dívat jako na <a
href="https://hypothesis.works/articles/what-is-property-based-testing/">specializovanou
generaci fuzzerů</a> s&nbsp;deklarativně omezenou množinou testovacích
dat.</div></p>

<p>Při generování testovacích dat se používají takzvané <i>strategie</i>. Ty si
můžeme snadno odzkoušet, a to ještě před vytvořením testů. Na samotné strategie
se totiž můžeme dívat jako na generátory &bdquo;fuzzy&ldquo; dat se zadanými
vlastnosti &ndash; typem, lze použít filtraci, funkci <strong>map</strong>
atd.</p>

<p>Vygenerování deseti sad testovacích dat popsaných takto: &bdquo;seznam
obsahující celá čísla&ldquo;:</p>

<pre>
from hypothesis.strategies import lists, integers
&nbsp;
g = lists(integers())
&nbsp;
for _ in range(10):
    print(g.example())
</pre>

<p>Příklad výsledků:</p>

<pre>
[-74, 1304181783, -1693807871, -10980, -4652, -16732]
[-30506, 23947, 61]
[0]
[101, -27349, 7493]
[-16316, -121, 21307]
[]
[]
[0]
[0]
[339202945]
</pre>

<p><div class="rs-tip-major">Poznámka: seznamy budou pseudonáhodné a po každém
spuštění jiné, pokud si ovšem nezvolíte konstantní semínko (<i>seed</i>), což
je ostatně velmi užitečné například na CI.</div></p>

<p>Vygenerování deseti sad testovacích dat, tentokrát řetězců o minimální délce
pěti znaků a maximální délce deseti znaků:</p>

<pre>
from hypothesis.strategies import text
&nbsp;
g = text(min_size=5, max_size=10)
&nbsp;
for _ in range(10):
    print(g.example())
</pre>

<p><div class="rs-tip-major">Poznámka: výsledky neuvádím, protože
<i>Hypothesis</i> v&nbsp;tomto případě použije různé znaky z&nbsp;celého
rozsahu Unicode.</div></p>

<p>Generování textových vstupů lze ovšem dále omezit, například na tisknutelné
znaky:</p>

<pre>
from string import printable
from hypothesis.strategies import text
&nbsp;
g = text(printable, min_size=5, max_size=10)
&nbsp;
for _ in range(10):
    print(g.example())
</pre>

<p><div class="rs-tip-major">Poznámka: samozřejmě se prozatím jedná o
primitivní ukázky, ovšem v&nbsp;souvislosti s&nbsp;testy popsanými v&nbsp;rámci
dalších kapitol začne být zřejmé, proč je tento přístup užitečný.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Malá odbočka &ndash; Hoarova logika</h2>

Hoare logic
https://en.wikipedia.org/wiki/Hoare_logic



<p><a name="k04"></a></p>
<h2 id="k04">4. Jednoduchý příklad &ndash; implementace bublinkového řazení</h2>

<p>Použití nástroje <i>Hypothesis</i> si nejdříve ukážeme na jednoduchém (a
dosti naivně implementovaném) algoritmu pro bublinkové řazení. Pochopitelně se
nejedná o algoritmus vhodný pro praktické nasazení (snad kromě speciálních
případů), ovšem svému účelu v&nbsp;kontextu tohoto článku vyhovuje. Naivní
bublinkové třídění bez detekce toho, že je seznam již setříděn, může vypadat
takto:</p>

<pre>
<i>"""Implementace naivního algoritmu bublinkového řazení."""</i>
&nbsp;
&nbsp;
def <strong>bubble_sort</strong>(alist):
    <i>"""Implementace naivního algoritmu bublinkového řazení."""</i>
    for i in range(len(alist)-1, 0, -1):
        for j in range(0, i):
            if alist[j] &gt; alist[j+1]:
                alist[j], alist[j+1] = alist[j+1], alist[j]
    return alist
&nbsp;
&nbsp;
if __name__ == '__main__':
    print(bubble_sort([]))
    print(bubble_sort([1]))
&nbsp;
    print(bubble_sort([1, 2]))
    print(bubble_sort([2, 1]))
&nbsp;
    print(bubble_sort([1, 2, 3, 4]))
    print(bubble_sort([1, 2, 4, 3]))
    print(bubble_sort([1, 4, 3, 2]))
    print(bubble_sort([4, 3, 2, 1]))
&nbsp;
    print(bubble_sort([1, 5, 4, 3, 2]))
    print(bubble_sort([5, 4, 3, 2, 1]))
</pre>

<p>Součástí modulu je i několik příkladů použití funkce
<strong>bubble_sort</strong>, takže si můžeme ověřit její chování:</p>

<pre>
[]
[1]
[1, 2]
[1, 2]
[1, 2, 3, 4]
[1, 2, 3, 4]
[1, 2, 3, 4]
[1, 2, 3, 4]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vytvoření klasických jednotkových testů</h2>

<p>Samozřejmě je možné si napsat běžné jednotkové testy, které chování funkce
<strong>bubble_sort</strong> ověří, ovšem pouze na zadaných datech:</p>

<pre>
<i>"""Test naivního algoritmu bublinkového řazení."""</i>
&nbsp;
from bubble_sort import bubble_sort
&nbsp;
&nbsp;
def <strong>test_bubble_sort_empty_input</strong>():
    <i>"""Test naivního algoritmu bublinkového řazení."""</i>
    assert bubble_sort([]) == []
&nbsp;
&nbsp;
def <strong>test_bubble_sort_one_item</strong>():
    <i>"""Test naivního algoritmu bublinkového řazení."""</i>
    assert bubble_sort([1]) == [1]
&nbsp;
&nbsp;
def <strong>test_bubble_sort_two_items</strong>():
    <i>"""Test naivního algoritmu bublinkového řazení."""</i>
    assert bubble_sort([1, 2])
    assert bubble_sort([2, 1])
&nbsp;
&nbsp;
def <strong>test_bubble_sort_four_items</strong>():
    <i>"""Test naivního algoritmu bublinkového řazení."""</i>
    assert bubble_sort([1, 2, 3, 4])
    assert bubble_sort([1, 2, 4, 3])
    assert bubble_sort([1, 4, 3, 2])
    assert bubble_sort([4, 3, 2, 1])
&nbsp;
&nbsp;
def <strong>test_bubble_sort_five_items</strong>():
    <i>"""Test naivního algoritmu bublinkového řazení."""</i>
    assert bubble_sort([1, 5, 4, 3, 2])
    assert bubble_sort([5, 4, 3, 2, 1])
</pre>

<p>Takto naprogramované testy můžeme spustit běžným způsobem:</p>

<pre>
$ <strong>pytest -v</strong>
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -&gt; database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_1/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_1
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 5 items
&nbsp;
bubble_sort_test.py::test_bubble_sort_empty_input PASSED                 [ 20%]
bubble_sort_test.py::test_bubble_sort_one_item PASSED                    [ 40%]
bubble_sort_test.py::test_bubble_sort_two_items PASSED                   [ 60%]
bubble_sort_test.py::test_bubble_sort_four_items PASSED                  [ 80%]
bubble_sort_test.py::test_bubble_sort_five_items PASSED                  [100%]
&nbsp;
============================== 5 passed in 0.02s ===============================
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Použití Hypothesis a orákula</h2>

<p>Nyní se pokusíme pro otestování algoritmu bublinkového řazení použít nástroj
<i>Hypothesis</i>. V&nbsp;tomto případě bude testovaná podmínka jednoduchá, a
to z&nbsp;toho důvodu, že máme k&nbsp;dispozici vhodné <i>orákulum</i>, což je
jen květnaté označení mechanismu určujícího, zda testovaná funkce prošla testem
či nikoli. V&nbsp;případě algoritmu řazení je orákulem jiný &ndash; již
prověřený &ndash; algoritmus řazení a ten existuje ve standardní knihovně
jazyka Python pod jménem <strong>sorted</strong>. Celý test lze zapsat
takto:</p>

<pre>
<i>"""Test naivního algoritmu bublinkového řazení."""</i>
&nbsp;
from hypothesis import given
from hypothesis.strategies import lists, integers
&nbsp;
from bubble_sort import bubble_sort
&nbsp;
&nbsp;
@given(lists(integers()))
def <strong>test_bubble_sort</strong>(alist):
    assert bubble_sort(alist) == sorted(alist)
</pre>

<p>Celý zápis je vlastně velmi jednoduchý. Po importech nutných funkcí a
dekorátorů následuje zápis testu podle specifikací vyžadovaných nástrojem
<i>Pytest</i>. V&nbsp;něm je použit dekorátor, který určuje, že testovací
funkce <strong>test_bubble_sort</strong> bude postupně volána a bude jí
předáván vygenerovaný seznam celých čísel. Ve funkci ověříme, zda výsledek
řazení pomocí <strong>bubble_sort</strong> odpovídá výsledku řazení pomocí
ověřeného algoritmu (<strong>sorted</strong>).</p>

<p>Takto zapsaný test opět spustíme standardním způsobem:</p>

<pre>
$ <strong>pytest -v</strong>
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -&gt; database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_2/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_2
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item
&nbsp;
bubble_sort_test.py::test_bubble_sort PASSED                             [100%]
&nbsp;
============================== 1 passed in 0.23s ===============================
</pre>

<p>Můžeme si nechat zobrazit i podrobnější statistiku o operacích provedených
nástrojem Hypothesis:</p>

<pre>
$ <strong>pytest -v --hypothesis-show-statistics</strong>
&nbsp;
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -&gt; database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_2/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_2
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item
&nbsp;
bubble_sort_test.py::test_bubble_sort PASSED                             [100%]
============================ Hypothesis Statistics =============================
&nbsp;
bubble_sort_test.py::test_bubble_sort:
&nbsp;
  - during reuse phase (0.00 seconds):
    - Typical runtimes: &lt; 1ms, ~ 54% in data generation
    - 2 passing examples, 0 failing examples, 0 invalid examples
&nbsp;
  - during generate phase (0.18 seconds):
    - Typical runtimes: 0-1 ms, ~ 75% in data generation
    - 98 passing examples, 0 failing examples, 0 invalid examples
&nbsp;
  - Stopped because settings.max_examples=100
&nbsp;
&nbsp;
============================== 1 passed in 0.21s ===============================
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zdánlivé vylepšení algoritmu bublinkového řazení</h2>

<pre>
"""Implementace naivního algoritmu bublinkového řazení."""


def <strong>bubble_sort</strong>(alist):
    """Implementace naivního algoritmu bublinkového řazení."""
    cnt = len(alist)*(len(alist)-1)/2
    for i in range(len(alist)-1, 0, -1):
        for j in range(0, i):
            if alist[j] > alist[j+1]:
                alist[j], alist[j+1] = alist[j+1], alist[j]
            cnt -= 1
            if cnt == 0:
                return alist
    return alist


if __name__ == '__main__':
    print(bubble_sort([]))
    print(bubble_sort([1]))

    print(bubble_sort([1, 2]))
    print(bubble_sort([2, 1]))

    print(bubble_sort([1, 2, 3, 4]))
    print(bubble_sort([1, 2, 4, 3]))
    print(bubble_sort([1, 4, 3, 2]))
    print(bubble_sort([4, 3, 2, 1]))

    print(bubble_sort([1, 5, 4, 3, 2]))
    print(bubble_sort([5, 4, 3, 2, 1]))
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_3/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_3
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item

bubble_sort_test.py::test_bubble_sort PASSED                             [100%]

============================== 1 passed in 0.18s ===============================
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zavedení chyby do implementace algoritmu</h2>

<pre>
"""Implementace naivního algoritmu bublinkového řazení."""


def <strong>bubble_sort</strong>(alist):
    """Implementace naivního algoritmu bublinkového řazení."""
    cnt = len(alist)*(len(alist)-1)/2-1
    for i in range(len(alist)-1, 0, -1):
        for j in range(0, i):
            if alist[j] > alist[j+1]:
                alist[j], alist[j+1] = alist[j+1], alist[j]
            cnt -= 1
            if cnt == 0:
                return alist
    return alist


if __name__ == '__main__':
    print(bubble_sort([]))
    print(bubble_sort([1]))

    print(bubble_sort([1, 2]))
    print(bubble_sort([2, 1]))

    print(bubble_sort([1, 2, 3, 4]))
    print(bubble_sort([1, 2, 4, 3]))
    print(bubble_sort([1, 4, 3, 2]))
    print(bubble_sort([4, 3, 2, 1]))

    print(bubble_sort([1, 5, 4, 3, 2]))
    print(bubble_sort([5, 4, 3, 2, 1]))
</pre>

<pre>
[]
[1]
[1, 2]
[1, 2]
[1, 2, 3, 4]
[1, 2, 3, 4]
[1, 2, 3, 4]
[2, 1, 3, 4]
[1, 2, 3, 4, 5]
[2, 1, 3, 4, 5]
</pre>


<p><a name="k09"></a></p>
<h2 id="k09">9. Výsledek testů vytvořených nástrojem Hypothesis</h2>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_4/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_4
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item

bubble_sort_test.py::test_bubble_sort FAILED                             [100%]

=================================== FAILURES ===================================
_______________________________ test_bubble_sort _______________________________

    @given(lists(integers()))
>   def <strong>test_bubble_sort</strong>(alist):

bubble_sort_test.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alist = [0, -1, 0]

    @given(lists(integers()))
    def <strong>test_bubble_sort</strong>(alist):
>       assert bubble_sort(alist) == sorted(alist)
E       assert [0, -1, 0] == [-1, 0, 0]
E         At index 0 diff: 0 != -1
E         Full diff:
E         - [-1, 0, 0]
E         + [0, -1, 0]

bubble_sort_test.py:11: AssertionError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_bubble_sort(
    alist=[0, 0, -1],
)
============================ Hypothesis Statistics =============================
bubble_sort_test.py::test_bubble_sort:

  - during reuse phase (0.04 seconds):
    - Typical runtimes: 1-23 ms, ~ 34% in data generation
    - 0 passing examples, 10 failing examples, 0 invalid examples
    - Found 1 failing example in this phase

  - during shrink phase (0.04 seconds):
    - Typical runtimes: 0-1 ms, ~ 68% in data generation
    - 14 passing examples, 1 failing examples, 4 invalid examples
    - Tried 19 shrinks of which 0 were successful

  - Stopped because nothing left to do


=========================== short test summary info ============================
FAILED bubble_sort_test.py::test_bubble_sort - assert [0, -1, 0] == [-1, 0, 0]
============================== 1 failed in 0.11s ===============================
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Specifikace minimální a maximální velikosti vstupů</h2>

<pre>
"""Test naivního algoritmu bublinkového řazení."""

from hypothesis import given
from hypothesis.strategies import lists, integers

from bubble_sort import bubble_sort


@given(lists(integers(), min_size=5))
def <strong>test_bubble_sort</strong>(alist):
    assert bubble_sort(alist) == sorted(alist)
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_5/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_5
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item

bubble_sort_test.py::test_bubble_sort FAILED                             [100%]

=================================== FAILURES ===================================
_______________________________ test_bubble_sort _______________________________

    @given(lists(integers(), min_size=5))
>   def <strong>test_bubble_sort</strong>(alist):

bubble_sort_test.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alist = [0, -1, 0, 0, 0]

    @given(lists(integers(), min_size=5))
    def <strong>test_bubble_sort</strong>(alist):
>       assert bubble_sort(alist) == sorted(alist)
E       assert [0, -1, 0, 0, 0] == [-1, 0, 0, 0, 0]
E         At index 0 diff: 0 != -1
E         Full diff:
E         - [-1, 0, 0, 0, 0]
E         ?            ---
E         + [0, -1, 0, 0, 0]
E         ?  +++

bubble_sort_test.py:11: AssertionError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_bubble_sort(
    alist=[0, 0, 0, 0, -1],
)
============================ Hypothesis Statistics =============================
bubble_sort_test.py::test_bubble_sort:

  - during reuse phase (0.04 seconds):
    - Typical runtimes: 1-23 ms, ~ 37% in data generation
    - 0 passing examples, 10 failing examples, 0 invalid examples
    - Found 1 failing example in this phase

  - during shrink phase (0.06 seconds):
    - Typical runtimes: < 1ms, ~ 87% in data generation
    - 5 passing examples, 1 failing examples, 37 invalid examples
    - Tried 43 shrinks of which 0 were successful

  - Stopped because nothing left to do


=========================== short test summary info ============================
FAILED bubble_sort_test.py::test_bubble_sort - assert [0, -1, 0, 0, 0] == [-1...
============================== 1 failed in 0.14s ===============================
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vylepšení podmínky při neexistenci referenční implementace</h2>

<pre>
"""Test naivního algoritmu bublinkového řazení."""

from hypothesis import given
from hypothesis.strategies import lists, integers

from bubble_sort import bubble_sort


@given(lists(integers(), min_size=5))
def <strong>test_bubble_sort</strong>(alist):
    sorted = bubble_sort(alist)
    assert all(x<=y for x,y in zip(sorted, sorted[1:]))
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_6/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/bubble_sort_6
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item

bubble_sort_test.py::test_bubble_sort FAILED                             [100%]

=================================== FAILURES ===================================
_______________________________ test_bubble_sort _______________________________

    @given(lists(integers(), min_size=5))
>   def <strong>test_bubble_sort</strong>(alist):

bubble_sort_test.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alist = [0, -1, 0, 0, 0]

    @given(lists(integers(), min_size=5))
    def <strong>test_bubble_sort</strong>(alist):
        sorted = bubble_sort(alist)
>       assert all(x<=y for x,y in zip(sorted, sorted[1:]))
E       assert False
E        +  where False = all(<generator object test_bubble_sort.<locals>.<genexpr> at 0x7f45ddda0fc0>)

bubble_sort_test.py:12: AssertionError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_bubble_sort(
    alist=[0, 0, 0, 0, -1],
)
============================ Hypothesis Statistics =============================
bubble_sort_test.py::test_bubble_sort:

  - during generate phase (0.06 seconds):
    - Typical runtimes: 0-22 ms, ~ 71% in data generation
    - 12 passing examples, 6 failing examples, 0 invalid examples
    - Found 1 failing example in this phase

  - during shrink phase (0.13 seconds):
    - Typical runtimes: 0-1 ms, ~ 83% in data generation
    - 6 passing examples, 14 failing examples, 59 invalid examples
    - Tried 79 shrinks of which 18 were successful

  - Stopped because nothing left to do


=========================== short test summary info ============================
FAILED bubble_sort_test.py::test_bubble_sort - assert False
============================== 1 failed in 0.22s ===============================
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Jednoduchá šifra typu ROT13</h2>

<pre>
"""Jednoduchá šifra typu ROT13."""

from hypothesis import given
from hypothesis.strategies import text
import string


def <strong>rot13</strong>(text):
    """Jednoduchá šifra typu ROT13."""
    r = str.maketrans(
        "ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz",
        "NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm")
    return text.translate(r)


if __name__ == '__main__':
    sentence = "Příliš žluťoučký kůň úpěl ďábelské ódy."
    print(rot13(sentence))
    print(rot13(rot13(sentence)))
</pre>

<pre>
Cříyvš žyhťbhčxý xůň úcěy ďáoryfxé óql.
Příliš žluťoučký kůň úpěl ďábelské ódy.
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Otestování jednoduché šifry</h2>

<pre>
"""Test jednoduché šifry typu ROT13."""

from hypothesis import given
from hypothesis.strategies import text

from rot13 import rot13


@given(text())
def <strong>test_rot13</strong>(s):
    """Test jednoduché šifry typu ROT13."""
    assert rot13(rot13(s)) == s
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/rot13_1/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/rot13_1
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item

rot13_test.py::test_rot13 PASSED                                         [100%]
============================ Hypothesis Statistics =============================

rot13_test.py::test_rot13:

  - during generate phase (0.16 seconds):
    - Typical runtimes: 0-1 ms, ~ 71% in data generation
    - 100 passing examples, 0 failing examples, 6 invalid examples

  - Stopped because settings.max_examples=100


============================== 1 passed in 0.61s ===============================
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zanesení chyby do algoritmu šifrování</h2>

<pre>
"""Jednoduchá šifra typu ROT13."""

from hypothesis import given
from hypothesis.strategies import text
import string


def <strong>rot13</strong>(text):
    """Jednoduchá šifra typu ROT13."""
    r = str.maketrans(
        "ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz",
        "NO QRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm")
    return text.translate(r)


if __name__ == '__main__':
    sentence = "Příliš žluťoučký kůň úpěl ďábelské ódy."
    print(rot13(sentence))
    print(rot13(rot13(sentence)))
</pre>

<pre>
Cříyvš žyhťbhčxý xůň úcěy ďáoryfxé óql.
 říliš žluťoučký kůň úpěl ďábelské ódy.
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/rot13_2/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/rot13_2
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item

rot13_test.py::test_rot13 PASSED                                         [100%]
============================ Hypothesis Statistics =============================

rot13_test.py::test_rot13:

  - during reuse phase (0.00 seconds):
    - Typical runtimes: < 1ms, ~ 72% in data generation
    - 1 passing examples, 0 failing examples, 0 invalid examples

  - during generate phase (1.41 seconds):
    - Typical runtimes: 0-2 ms, ~ 85% in data generation
    - 499 passing examples, 0 failing examples, 30 invalid examples

  - Stopped because settings.max_examples=500


============================== 1 passed in 1.45s ===============================
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Přesnější specifikace podoby generovaných textových dat</h2>

<pre>
"""Test jednoduché šifry typu ROT13."""

from hypothesis import given, note, settings
from hypothesis.strategies import text, characters

from rot13 import rot13


@given(text(characters(min_codepoint=32, max_codepoint=127), min_size=5))
@settings(max_examples=500)
def <strong>test_rot13</strong>(s):
    """Test jednoduché šifry typu ROT13."""
    assert rot13(rot13(s)) == s
</pre>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/ptisnovs/src/python/testing-in-python/hypothesis/rot13_3/.hypothesis/examples')
rootdir: /home/ptisnovs/src/python/testing-in-python/hypothesis/rot13_3
plugins: print-0.1.3, voluptuous-1.0.2, hypothesis-5.16.0, cov-2.5.1
collecting ... collected 1 item

rot13_test.py::test_rot13 FAILED                                         [100%]

=================================== FAILURES ===================================
__________________________________ test_rot13 __________________________________

    @given(text(characters(min_codepoint=32, max_codepoint=127), min_size=5))
>   @settings(max_examples=500)
    def <strong>test_rot13</strong>(s):

rot13_test.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = '0000P'

    @given(text(characters(min_codepoint=32, max_codepoint=127), min_size=5))
    @settings(max_examples=500)
    def <strong>test_rot13</strong>(s):
        """Test jednoduché šifry typu ROT13."""
>       assert rot13(rot13(s)) == s
E       AssertionError: assert '0000 ' == '0000P'
E         - 0000P
E         ?     ^
E         + 0000 
E         ?     ^

rot13_test.py:13: AssertionError
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_rot13(
    s='0000P',
)
============================ Hypothesis Statistics =============================
rot13_test.py::test_rot13:

  - during generate phase (0.04 seconds):
    - Typical runtimes: 0-22 ms, ~ 65% in data generation
    - 8 passing examples, 2 failing examples, 0 invalid examples
    - Found 1 failing example in this phase

  - during shrink phase (0.13 seconds):
    - Typical runtimes: 0-1 ms, ~ 77% in data generation
    - 11 passing examples, 18 failing examples, 48 invalid examples
    - Tried 77 shrinks of which 17 were successful

  - Stopped because nothing left to do


=========================== short test summary info ============================
FAILED rot13_test.py::test_rot13 - AssertionError: assert '0000 ' == '0000P'
============================== 1 failed in 0.60s ===============================
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Metody <strong>map</strong> a <strong>filter</strong></h2>

<pre>
from hypothesis.strategies import lists, integers

g = lists(integers().filter(lambda x: x > 0 and x % 2 == 0))

for _ in range(10):
    print(g.example())
</pre>

<pre>
[]
[]
[]
[114, 297635958, 36382594596201776729035817479773596128]
[]
[]
[1584, 20756, 27064]
[]
[]
[6256, 16432]
</pre>

<pre>
from hypothesis.strategies import lists, integers

g = lists(integers().filter(lambda x: x > 0 and x % 2 == 0)).filter(lambda x: len(x) > 2 and len(x) < 6)

for _ in range(10):
    print(g.example())
</pre>

<pre>
[692, 25368, 17078, 8076]
[32726, 187067303079521214, 30482]
[32114, 31920, 120, 34, 4414]
[26344, 49216631145512026322426062367560067482, 98, 32088, 2480]
[8892, 14870, 2046]
[110, 9412, 26768]
[10434, 58, 7836, 12460]
[141471345277595789266895116305060658262, 8302, 8470]
[921905719452052336, 5382, 40]
[7652, 638723812, 2104125796, 19320]
</pre>

<pre>
from hypothesis.strategies import lists, integers

g = lists(integers()).map(sorted)

for _ in range(10):
    print(g.example())
</pre>

<pre>
[0]
[-20957]
[0]
[0]
[0]
[0]
[]
[0]
[]
[0]
</pre>

<pre>
from hypothesis.strategies import lists, integers

g = lists(integers().filter(lambda x: x > 0 and x % 2 == 0)).filter(lambda x: len(x) > 2 and len(x) < 6).map(sorted)

for _ in range(10):
    print(g.example())
</pre>

<pre>
[12, 6276, 20218, 639217126, 1354229336]
[6, 52, 82, 165210043927242131602779831719279821612]
[1634, 11134, 22630, 2119407794]
[26, 2586, 14584, 28060]
[62, 2606, 8938]
[92, 10582, 886236136, 1731330112]
[28, 46, 4008526909638794906]
[4, 42, 112]
[96, 108, 25038, 25970]
[22, 126, 13974]
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Kombinace více strategií</h2>

<pre>
from hypothesis.strategies import none, booleans, integers

g = none() | booleans() | integers(min_value=0, max_value=1000)

for _ in range(20):
    print(g.example())
</pre>

<pre>
True
244
None
339
42
False
False
None
False
341
264
956
None
0
934
None
True
999
False
522
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/testing-in-python">https://github.com/tisnik/testing-in-python</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem &ndash;
alespoň prozatím &ndash; velmi malý, dnes má přibližně několik desítek
kilobajtů), můžete namísto toho použít odkazy na jednotlivé demonstrační
příklady a jejich části, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>bubble_sort_1/bubble_sort.py</td><td>implementace algoritmu bublinkového řazení</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/bubble_sort_1/bubble_sort.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/bubble_sort_1/bubble_sort.py</a></td></tr>
<tr><td> 2</td><td>bubble_sort_1/bubble_sort_test.py</td><td>klasické jednotkové testy pro algoritmu bubble sort</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/bubble_sort_1/bubble_sort_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/bubble_sort_1/bubble_sort_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>bubble_sort_2/bubble_sort.py</td><td>implementace algoritmu bublinkového řazení</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/bubble_sort_2/bubble_sort.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/bubble_sort_2/bubble_sort.py</a></td></tr>
<tr><td> 4</td><td>bubble_sort_2/bubble_sort_test.py</td><td>jednotkové testy používající Hypothesis</td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/bubble_sort_2/bubble_sort_test.py">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/bubble_sort_2/bubble_sort_test.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/testing-in-python/tree/master/hypothesis/">https://github.com/tisnik/testing-in-python/tree/master/hypothesis/</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Předchozí články s&nbsp;tématem testování (nejenom) v&nbsp;Pythonu</h2>

<p>Tématem testování jsme se již na stránkách Rootu několikrát zabývali. Jedná
se mj.&nbsp;o následující články:</p>

<ol>

<li>Použití Pythonu pro tvorbu testů: od jednotkových testů až po testy UI<br />
<a href="https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-od-jednotkovych-testu-az-po-testy-ui/">https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-od-jednotkovych-testu-az-po-testy-ui/</a>
</li>

<li>Použití Pythonu pro tvorbu testů: použití třídy Mock z knihovny unittest.mock<br />
<a href="https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-pouziti-tridy-mock-z-knihovny-unittest-mock/">https://www.root.cz/clanky/pouziti-pythonu-pro-tvorbu-testu-pouziti-tridy-mock-z-knihovny-unittest-mock/</a>
</li>

<li>Použití nástroje pytest pro tvorbu jednotkových testů a benchmarků<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-pytest-pro-tvorbu-jednotkovych-testu-a-benchmarku/">https://www.root.cz/clanky/pouziti-nastroje-pytest-pro-tvorbu-jednotkovych-testu-a-benchmarku/</a>
</li>

<li>Nástroj pytest a jednotkové testy: fixtures, výjimky, parametrizace testů<br />
<a href="https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-fixtures-vyjimky-parametrizace-testu/">https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-fixtures-vyjimky-parametrizace-testu/</a>
</li>

<li>Nástroj pytest a jednotkové testy: životní cyklus testů, užitečné tipy a triky<br />
<a href="https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-zivotni-cyklus-testu-uzitecne-tipy-a-triky/">https://www.root.cz/clanky/nastroj-pytest-a-jednotkove-testy-zivotni-cyklus-testu-uzitecne-tipy-a-triky/</a>
</li>

<li>Struktura projektů s jednotkovými testy, využití Travis CI<br />
<a href="https://www.root.cz/clanky/struktura-projektu-s-jednotkovymi-testy-vyuziti-travis-ci/">https://www.root.cz/clanky/struktura-projektu-s-jednotkovymi-testy-vyuziti-travis-ci/</a>
</li>

<li>Omezení stavového prostoru testovaných funkcí a metod<br />
<a href="https://www.root.cz/clanky/omezeni-stavoveho-prostoru-testovanych-funkci-a-metod/">https://www.root.cz/clanky/omezeni-stavoveho-prostoru-testovanych-funkci-a-metod/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (druhá část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-druha-cast/</a>
</li>

<li>Behavior-driven development v Pythonu s využitím knihovny Behave (závěrečná část)<br />
<a href="https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/">https://www.root.cz/clanky/behavior-driven-development-v-pythonu-s-vyuzitim-knihovny-behave-zaverecna-cast/</a>
</li>

<li>Validace datových struktur v Pythonu pomocí knihoven Schemagic a Schema<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/</a>
</li>

<li>Validace datových struktur v Pythonu (2. část)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/</a>
</li>

<li>Validace datových struktur v Pythonu (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/</a>
</li>

<li>Univerzální testovací nástroj Robot Framework<br />
<a href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/">https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework/</a>
</li>

<li>Univerzální testovací nástroj Robot Framework a BDD testy<br />
<a href="https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework-a-bdd-testy/">https://www.root.cz/clanky/univerzalni-testovaci-nastroj-robot-framework-a-bdd-testy/</a>
</li>

<li>Úvod do problematiky fuzzingu a fuzz testování<br />
<a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/">https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani/</a>
</li>

<li>Úvod do problematiky fuzzingu a fuzz testování – složení vlastního fuzzeru<br />
<a href="https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani-slozeni-vlastniho-fuzzeru/">https://www.root.cz/clanky/uvod-do-problematiky-fuzzingu-a-fuzz-testovani-slozeni-vlastniho-fuzzeru/</a>
</li>

<li>Knihovny a moduly usnadňující testování aplikací naprogramovaných v jazyce Clojure<br />
<a href="https://www.root.cz/clanky/knihovny-a-moduly-usnadnujici-testovani-aplikaci-naprogramovanych-v-jazyce-clojure/">https://www.root.cz/clanky/knihovny-a-moduly-usnadnujici-testovani-aplikaci-naprogramovanych-v-jazyce-clojure/</a>
</li>

<li>Validace dat s využitím knihovny spec v Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Testování aplikací naprogramovaných v jazyce Go<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/">https://www.root.cz/clanky/testovani-aplikaci-naprogramovanych-v-jazyce-go/</a>
</li>

<li>Knihovny určené pro tvorbu testů v programovacím jazyce Go<br />
<a href="https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/">https://www.root.cz/clanky/knihovny-urcene-pro-tvorbu-testu-v-programovacim-jazyce-go/</a>
</li>

<li>Testování aplikací psaných v Go s využitím knihoven Goblin a Frisby<br />
<a href="https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/">https://www.root.cz/clanky/testovani-aplikaci-psanych-v-go-s-vyuzitim-knihoven-goblin-a-frisby/</a>
</li>

<li>Testování Go aplikací s využitím knihovny GΩmega a frameworku Ginkgo<br />
<a href="https://www.root.cz/clanky/testovani-go-aplikaci-s-vyuzitim-knihovny-gomega-mega-a-frameworku-ginkgo/">https://www.root.cz/clanky/testovani-go-aplikaci-s-vyuzitim-knihovny-gomega-mega-a-frameworku-ginkgo/</a>
</li>

<li>Tvorba BDD testů s využitím jazyka Go a nástroje godog<br />
<a href="https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/">https://www.root.cz/clanky/tvorba-bdd-testu-s-vyuzitim-jazyka-go-a-nastroje-godog/</a>
</li>

<li>Použití Go pro automatizaci práce s aplikacemi s interaktivním příkazovým řádkem<br />
<a href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/">https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem/</a>
</li>

<li>Použití Go pro automatizaci práce s aplikacemi s interaktivním příkazovým řádkem (dokončení)<br />
<a href="https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem-dokonceni/">https://www.root.cz/clanky/pouziti-go-pro-automatizaci-prace-s-aplikacemi-s-interaktivnim-prikazovym-radkem-dokonceni/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Hoare logic<br />
<a href="https://en.wikipedia.org/wiki/Hoare_logic">https://en.wikipedia.org/wiki/Hoare_logic</a>
</li>

<li>Goto Fail, Heartbleed, and Unit Testing Culture<br />
<a href="https://martinfowler.com/articles/testing-culture.html">https://martinfowler.com/articles/testing-culture.html</a>
</li>

<li>PEP-484<br />
<a href="https://www.python.org/dev/peps/pep-0484/">https://www.python.org/dev/peps/pep-0484/</a>
</li>

<li>In-depth: Functional programming in C++<br />
<a href="https://www.gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php">https://www.gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php</a>
</li>

<li>mypy<br />
<a href="http://www.mypy-lang.org/">http://www.mypy-lang.org/</a>
</li>

<li>Welcome to Mypy documentation!<br />
<a href="https://mypy.readthedocs.io/en/latest/index.html">https://mypy.readthedocs.io/en/latest/index.html</a>
</li>

<li>mypy na GitHubu<br />
<a href="https://github.com/python/mypy">https://github.com/python/mypy</a>
</li>

<li>mypy 0.770 na PyPi<br />
<a href="https://pypi.org/project/mypy/">https://pypi.org/project/mypy/</a>
</li>

<li>Extensions for mypy (separated out from mypy/extensions)<br />
<a href="https://github.com/python/mypy_extensions">https://github.com/python/mypy_extensions</a>
</li>

<li>The Mypy Blog<br />
<a href="https://mypy-lang.blogspot.com/2020/03/mypy-0770-released.html">https://mypy-lang.blogspot.com/2020/03/mypy-0770-released.html</a>
</li>

<li>Our journey to type checking 4 million lines of Python<br />
<a href="https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python">https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python</a>
</li>

<li>Type-Checking Python Programs With Type Hints and mypy<br />
<a href="https://www.youtube.com/watch?v=2xWhaALHTvU">https://www.youtube.com/watch?v=2xWhaALHTvU</a>
</li>

<li>Refactoring to Immutability - Kevlin Henney<br />
<a href="https://www.youtube.com/watch?v=APUCMSPiNh4">https://www.youtube.com/watch?v=APUCMSPiNh4</a>
</li>

<li>Bernat Gabor - Type hinting (and mypy) - PyCon 2019<br />
<a href="https://www.youtube.com/watch?v=hTrjTAPnA_k">https://www.youtube.com/watch?v=hTrjTAPnA_k</a>
</li>

<li>Stanford Seminar - Optional Static Typing for Python<br />
<a href="https://www.youtube.com/watch?v=GiZKuyLKvAA">https://www.youtube.com/watch?v=GiZKuyLKvAA</a>
</li>

<li>mypy Getting to Four Million Lines of Typed Python - Michael Sullivan<br />
<a href="https://www.youtube.com/watch?v=FT_WHV4-QcU">https://www.youtube.com/watch?v=FT_WHV4-QcU</a>
</li>

<li>Shebang<br />
<a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">https://en.wikipedia.org/wiki/Shebang_(Unix)</a>
</li>

<li>pytest 5.4.2 na PyPi<br />
<a href="https://pypi.org/project/pytest/">https://pypi.org/project/pytest/</a>
</li>

<li>Hillel Wayne - Beyond Unit Tests: Taking Your Testing to the Next Level - PyCon 2018<br />
<a href="https://www.youtube.com/watch?v=MYucYon2-lk">https://www.youtube.com/watch?v=MYucYon2-lk</a>
</li>

<li>Awesome Python &ndash; testing<br />
<a href="https://github.com/vinta/awesome-python#testing">https://github.com/vinta/awesome-python#testing</a>
</li>

<li>pytest Plugins Compatibility<br />
<a href="http://plugincompat.herokuapp.com/">http://plugincompat.herokuapp.com/</a>
</li>

<li>Selenium (pro Python)<br />
<a href="https://pypi.org/project/selenium/">https://pypi.org/project/selenium/</a>
</li>

<li>Getting Started With Testing in Python<br />
<a href="https://realpython.com/python-testing/">https://realpython.com/python-testing/</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Mock - Mocking and Testing Library<br />
<a href="http://mock.readthedocs.io/en/stable/">http://mock.readthedocs.io/en/stable/</a>
</li>

<li>Python Mocking 101: Fake It Before You Make It<br />
<a href="https://blog.fugue.co/2016-02-11-python-mocking-101.html">https://blog.fugue.co/2016-02-11-python-mocking-101.html</a>
</li>

<li>Nauč se Python! - Testování<br />
<a href="http://naucse.python.cz/lessons/intro/testing/">http://naucse.python.cz/lessons/intro/testing/</a>
</li>

<li>Flexmock (dokumentace)<br />
<a href="https://flexmock.readthedocs.io/en/latest/">https://flexmock.readthedocs.io/en/latest/</a>
</li>

<li>Test Fixture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test_fixture">https://en.wikipedia.org/wiki/Test_fixture</a>
</li>

<li>Mock object (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Mock_object">https://en.wikipedia.org/wiki/Mock_object</a>
</li>

<li>Extrémní programování<br />
<a href="https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD">https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD</a>
</li>

<li>Programování řízené testy<br />
<a href="https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy">https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>Tox<br />
<a href="https://tox.readthedocs.io/en/latest/">https://tox.readthedocs.io/en/latest/</a>
</li>

<li>pytest: helps you write better programs<br />
<a href="https://docs.pytest.org/en/latest/">https://docs.pytest.org/en/latest/</a>
</li>

<li>doctest — Test interactive Python examples<br />
<a href="https://docs.python.org/dev/library/doctest.html#module-doctest">https://docs.python.org/dev/library/doctest.html#module-doctest</a>
</li>

<li>unittest — Unit testing framework<br />
<a href="https://docs.python.org/dev/library/unittest.html">https://docs.python.org/dev/library/unittest.html</a>
</li>

<li>Python namespaces<br />
<a href="https://bytebaker.com/2008/07/30/python-namespaces/">https://bytebaker.com/2008/07/30/python-namespaces/</a>
</li>

<li>Namespaces and Scopes<br />
<a href="https://www.python-course.eu/namespaces.php">https://www.python-course.eu/namespaces.php</a>
</li>

<li>Stránka projektu Robot Framework<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>GitHub repositář Robot Frameworku<br />
<a href="https://github.com/robotframework/robotframework">https://github.com/robotframework/robotframework</a>
</li>

<li>Robot Framework (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Robot_Framework">https://en.wikipedia.org/wiki/Robot_Framework</a>
</li>

<li>Tutoriál Robot Frameworku<br />
<a href="http://www.robotframeworktutorial.com/">http://www.robotframeworktutorial.com/</a>
</li>

<li>Robot Framework Documentation<br />
<a href="https://robotframework.org/robotframework/">https://robotframework.org/robotframework/</a>
</li>

<li>Robot Framework Introduction<br />
<a href="https://blog.testproject.io/2016/11/22/robot-framework-introduction/">https://blog.testproject.io/2016/11/22/robot-framework-introduction/</a>
</li>

<li>robotframework 3.1.2 na PyPi<br />
<a href="https://pypi.org/project/robotframework/">https://pypi.org/project/robotframework/</a>
</li>

<li>Robot Framework demo (GitHub)<br />
<a href="https://github.com/robotframework/RobotDemo">https://github.com/robotframework/RobotDemo</a>
</li>

<li>Robot Framework web testing demo using SeleniumLibrary<br />
<a href="https://github.com/robotframework/WebDemo">https://github.com/robotframework/WebDemo</a>
</li>

<li>Robot Framework for Mobile Test Automation Demo<br />
<a href="https://www.youtube.com/watch?v=06LsU08slP8">https://www.youtube.com/watch?v=06LsU08slP8</a>
</li>

<li>Gherkin<br />
<a href="https://cucumber.io/docs/gherkin/">https://cucumber.io/docs/gherkin/</a>
</li>

<li>Selenium<br />
<a href="https://selenium.dev/">https://selenium.dev/</a>
</li>

<li>SeleniumLibrary<br />
<a href="https://robotframework.org/">https://robotframework.org/</a>
</li>

<li>The Practical Test Pyramid<br />
<a href="https://martinfowler.com/articles/practical-test-pyramid.html">https://martinfowler.com/articles/practical-test-pyramid.html</a>
</li>

<li>Acceptance Tests and the Testing Pyramid<br />
<a href="http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/">http://www.blog.acceptancetestdrivendevelopment.com/acceptance-tests-and-the-testing-pyramid/</a>
</li>

<li>Tab-separated values<br />
<a href="https://en.wikipedia.org/wiki/Tab-separated_values">https://en.wikipedia.org/wiki/Tab-separated_values</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>radamsa<br />
<a href="https://gitlab.com/akihe/radamsa">https://gitlab.com/akihe/radamsa</a>
</li>

<li>Fuzzing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Fuzzing">https://en.wikipedia.org/wiki/Fuzzing</a>
</li>

<li>american fuzzy lop<br />
<a href="http://lcamtuf.coredump.cx/afl/">http://lcamtuf.coredump.cx/afl/</a>
</li>

<li>Fuzzing: the new unit testing<br />
<a href="https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1">https://go-talks.appspot.com/github.com/dvyukov/go-fuzz/slides/fuzzing.slide#1</a>
</li>

<li>Corpus for github.com/dvyukov/go-fuzz examples<br />
<a href="https://github.com/dvyukov/go-fuzz-corpus">https://github.com/dvyukov/go-fuzz-corpus</a>
</li>

<li>AFL &ndash; QuickStartGuide.txt<br />
<a href="https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt">https://github.com/google/AFL/blob/master/docs/QuickStartGuide.txt</a>
</li>

<li>Introduction to Fuzzing in Python with AFL<br />
<a href="https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/">https://alexgaynor.net/2015/apr/13/introduction-to-fuzzing-in-python-with-afl/</a>
</li>

<li>Writing a Simple Fuzzer in Python<br />
<a href="https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/">https://jmcph4.github.io/2018/01/19/writing-a-simple-fuzzer-in-python/</a>
</li>

<li>How to Fuzz Go Code with go-fuzz (Continuously)<br />
<a href="https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/">https://fuzzit.dev/2019/10/02/how-to-fuzz-go-code-with-go-fuzz-continuously/</a>
</li>

<li>Golang Fuzzing: A go-fuzz Tutorial and Example<br />
<a href="http://networkbit.ch/golang-fuzzing/">http://networkbit.ch/golang-fuzzing/</a>
</li>

<li>Fuzzing Python Modules<br />
<a href="https://stackoverflow.com/questions/20749026/fuzzing-python-modules">https://stackoverflow.com/questions/20749026/fuzzing-python-modules</a>
</li>

<li>0x3 Python Tutorial: Fuzzer<br />
<a href="http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/">http://www.primalsecurity.net/0x3-python-tutorial-fuzzer/</a>
</li>

<li>fuzzing na PyPi<br />
<a href="https://pypi.org/project/fuzzing/">https://pypi.org/project/fuzzing/</a>
</li>

<li>Fuzzing 0.3.2 documentation<br />
<a href="https://fuzzing.readthedocs.io/en/latest/">https://fuzzing.readthedocs.io/en/latest/</a>
</li>

<li>Randomized testing for Go<br />
<a href="https://github.com/dvyukov/go-fuzz">https://github.com/dvyukov/go-fuzz</a>
</li>

<li>HTTP/2 fuzzer written in Golang<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Ffuf (Fuzz Faster U Fool) – An Open Source Fast Web Fuzzing Tool<br />
<a href="https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html">https://hacknews.co/hacking-tools/20191208/ffuf-fuzz-faster-u-fool-an-open-source-fast-web-fuzzing-tool.html</a>
</li>

<li>Continuous Fuzzing Made Simple<br />
<a href="https://fuzzit.dev/">https://fuzzit.dev/</a>
</li>

<li>Halt and Catch Fire<br />
<a href="https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86">https://en.wikipedia.org/wiki/Halt_and_Catch_Fire#Intel_x86</a>
</li>

<li>Random testing<br />
<a href="https://en.wikipedia.org/wiki/Random_testing">https://en.wikipedia.org/wiki/Random_testing</a>
</li>

<li>Monkey testing<br />
<a href="https://en.wikipedia.org/wiki/Monkey_testing">https://en.wikipedia.org/wiki/Monkey_testing</a>
</li>

<li>Fuzzing for Software Security Testing and Quality Assurance, Second Edition<br />
<a href="https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false">https://books.google.at/books?id=tKN5DwAAQBAJ&pg=PR15&lpg=PR15&q=%22I+settled+on+the+term+fuzz%22&redir_esc=y&hl=de#v=onepage&q=%22I%20settled%20on%20the%20term%20fuzz%22&f=false</a>
</li>

<li>libFuzzer – a library for coverage-guided fuzz testing<br />
<a href="https://llvm.org/docs/LibFuzzer.html">https://llvm.org/docs/LibFuzzer.html</a>
</li>

<li>fuzzy-swagger na PyPi<br />
<a href="https://pypi.org/project/fuzzy-swagger/">https://pypi.org/project/fuzzy-swagger/</a>
</li>

<li>fuzzy-swagger na GitHubu<br />
<a href="https://github.com/namuan/fuzzy-swagger">https://github.com/namuan/fuzzy-swagger</a>
</li>

<li>Fuzz testing tools for Python<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools">https://wiki.python.org/moin/PythonTestingToolsTaxonomy#Fuzz_Testing_Tools</a>
</li>

<li>A curated list of awesome Go frameworks, libraries and software<br />
<a href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go</a>
</li>

<li>gofuzz: a library for populating go objects with random values<br />
<a href="https://github.com/google/gofuzz">https://github.com/google/gofuzz</a>
</li>

<li>tavor: A generic fuzzing and delta-debugging framework<br />
<a href="https://github.com/zimmski/tavor">https://github.com/zimmski/tavor</a>
</li>

<li>hypothesis na GitHubu<br />
<a href="https://github.com/HypothesisWorks/hypothesis">https://github.com/HypothesisWorks/hypothesis</a>
</li>

<li>Hypothesis: Test faster, fix more<br />
<a href="https://hypothesis.works/">https://hypothesis.works/</a>
</li>

<li>Hypothesis<br />
<a href="https://hypothesis.works/articles/intro/">https://hypothesis.works/articles/intro/</a>
</li>

<li>What is Hypothesis?<br />
<a href="https://hypothesis.works/articles/what-is-hypothesis/">https://hypothesis.works/articles/what-is-hypothesis/</a>
</li>

<li>What is Property Based Testing?<br />
<a href="https://hypothesis.works/articles/what-is-property-based-testing/">https://hypothesis.works/articles/what-is-property-based-testing/</a>
</li>

<li>Databáze CVE<br />
<a href="https://www.cvedetails.com/">https://www.cvedetails.com/</a>
</li>

<li>Fuzz test Python modules with libFuzzer<br />
<a href="https://github.com/eerimoq/pyfuzzer">https://github.com/eerimoq/pyfuzzer</a>
</li>

<li>Taof - The art of fuzzing<br />
<a href="https://sourceforge.net/projects/taof/">https://sourceforge.net/projects/taof/</a>
</li>

<li>JQF + Zest: Coverage-guided semantic fuzzing for Java<br />
<a href="https://github.com/rohanpadhye/jqf">https://github.com/rohanpadhye/jqf</a>
</li>

<li>http2fuzz<br />
<a href="https://github.com/c0nrad/http2fuzz">https://github.com/c0nrad/http2fuzz</a>
</li>

<li>Demystifying hypothesis testing with simple Python examples<br />
<a href="https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294">https://towardsdatascience.com/demystifying-hypothesis-testing-with-simple-python-examples-4997ad3c5294</a>
</li>

<li>Testování<br />
<a href="http://voho.eu/wiki/testovani/">http://voho.eu/wiki/testovani/</a>
</li>

<li>Unit testing (Wikipedia.en)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing (Wikipedia.cz)<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit Test vs Integration Test<br />
<a href="https://www.youtube.com/watch?v=0GypdsJulKE">https://www.youtube.com/watch?v=0GypdsJulKE</a>
</li>

<li>TestDouble<br />
<a href="https://martinfowler.com/bliki/TestDouble.html">https://martinfowler.com/bliki/TestDouble.html</a>
</li>

<li>Test Double<br />
<a href="http://xunitpatterns.com/Test%20Double.html">http://xunitpatterns.com/Test%20Double.html</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Acceptance test–driven development<br />
<a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development">https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development</a>
</li>

<li>Gauge<br />
<a href="https://gauge.org/">https://gauge.org/</a>
</li>

<li>Gauge (software)<br />
<a href="https://en.wikipedia.org/wiki/Gauge_(software)">https://en.wikipedia.org/wiki/Gauge_(software)</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>Testing is Good. Pyramids are Bad. Ice Cream Cones are the Worst<br />
<a href="https://medium.com/@fistsOfReason/testing-is-good-pyramids-are-bad-ice-cream-cones-are-the-worst-ad94b9b2f05f">https://medium.com/@fistsOfReason/testing-is-good-pyramids-are-bad-ice-cream-cones-are-the-worst-ad94b9b2f05f</a>
</li>

<li>Články a zprávičky věnující se Pythonu<br />
<a href="https://www.root.cz/n/python/">https://www.root.cz/n/python/</a>
</li>

<li>PythonTestingToolsTaxonomy<br />
<a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy">https://wiki.python.org/moin/PythonTestingToolsTaxonomy</a>
</li>

<li>Top 6 BEST Python Testing Frameworks [Updated 2020 List]<br />
<a href="https://www.softwaretestinghelp.com/python-testing-frameworks/">https://www.softwaretestinghelp.com/python-testing-frameworks/</a>
</li>

<li>pytest-print 0.1.3<br />
<a href="https://pypi.org/project/pytest-print/">https://pypi.org/project/pytest-print/</a>
</li>

<li>pytest fixtures: explicit, modular, scalable<br />
<a href="https://docs.pytest.org/en/latest/fixture.html">https://docs.pytest.org/en/latest/fixture.html</a>
</li>

<li>PyTest Tutorial: What is, Install, Fixture, Assertions<br />
<a href="https://www.guru99.com/pytest-tutorial.html">https://www.guru99.com/pytest-tutorial.html</a>
</li>

<li>Pytest - Fixtures<br />
<a href="https://www.tutorialspoint.com/pytest/pytest_fixtures.htm">https://www.tutorialspoint.com/pytest/pytest_fixtures.htm</a>
</li>

<li>Marking test functions with attributes<br />
<a href="https://docs.pytest.org/en/latest/mark.html">https://docs.pytest.org/en/latest/mark.html</a>
</li>

<li>pytest-print<br />
<a href="https://pytest-print.readthedocs.io/en/latest/">https://pytest-print.readthedocs.io/en/latest/</a>
</li>

<li>Continuous integration<br />
<a href="https://en.wikipedia.org/wiki/Continuous_integration">https://en.wikipedia.org/wiki/Continuous_integration</a>
</li>

<li>Travis CI<br />
<a href="https://travis-ci.org/">https://travis-ci.org/</a>
</li>

<li>Mutation testing<br />
<a href="https://en.wikipedia.org/wiki/Mutation_testing">https://en.wikipedia.org/wiki/Mutation_testing</a>
</li>

<li>Články o Hypothesis<br />
<a href="https://news.ycombinator.com/from?site=hypothesis.works">https://news.ycombinator.com/from?site=hypothesis.works</a>
</li>

<li>Testovací případ<br />
<a href="https://cs.wikipedia.org/wiki/Testovac%C3%AD_p%C5%99%C3%ADpad">https://cs.wikipedia.org/wiki/Testovac%C3%AD_p%C5%99%C3%ADpad</a>
</li>

<li>Most testing is ineffective<br />
<a href="https://hypothesis.works/">https://hypothesis.works/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

