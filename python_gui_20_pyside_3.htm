<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu s využitím frameworku PySide: další dostupné ovládací prvky</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu s využitím frameworku PySide: další dostupné ovládací prvky</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetím článku o frameworku PySide si podrobněji popíšeme způsob práce se základními ovládacími prvky grafického uživatelského rozhraní. Tyto prvky, například i zdánlivě jednoduchý textový popisek, totiž mají mnoho zajímavých a v dalších toolkitech neobvyklých vlastností.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: další dostupné ovládací prvky</a></p>
<p><a href="#k02">2. Textový popisek (návěští)</a></p>
<p><a href="#k03">3. Zobrazení textového návěští zobrazujícího neformátovaný text</a></p>
<p><a href="#k04">4. Textový popisek používající vybrané HTML značky pro zformátování textu</a></p>
<p><a href="#k05">5. Styly rámců zobrazených okolo popisku i okolo dalších vybraných widgetů</a></p>
<p><a href="#k06">6. Ukázka změny typu rámce</a></p>
<p><a href="#k07">7. Režimy zobrazení trojrozměrného reliéfu rámce</a></p>
<p><a href="#k08">8. Textový popisek, jehož text je možné vybrat nebo i editovat</a></p>
<p><a href="#k09">9. Aktivní textový popisek &ndash; zobrazení stránky ve webovém prohlížeči po výběru odkazu</a></p>
<p><a href="#k10">10. Ovládací prvek <strong>QPushButton</strong> a události generované po jeho stisku</a></p>
<p><a href="#k11">11. Pořadí posílání signálů po stisku tlačítka</a></p>
<p><a href="#k12">12. Zaškrtávací pole (check box)</a></p>
<p><a href="#k13">13. Nastavení a zjišťování stavu zaškrtávacích polí</a></p>
<p><a href="#k14">14. Zaškrtávací pole se třemi stavy (tristate)</a></p>
<p><a href="#k15">15. Nastavení a zjišťování stavu zaškrtávacích polí se třemi možnými stavy</a></p>
<p><a href="#k16">16. Sdružení zaškrtávacích polí do skupin s&nbsp;exkluzivitou výběru</a></p>
<p><a href="#k17">17. Praktická ukázka použití objektu typu <strong>QButtonGroup</strong></a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: další dostupné ovládací prvky</h2>

<p>K&nbsp;popisu možností nabízených populární knihovnou <i>PySide</i> se
dostáváme již potřetí. Dnes se budeme zabývat těmi ovládacími prvky, které sice
na první pohled mohou vypadat jednoduše až primitivně, ovšem knihovna PySide
(resp.&nbsp;přesněji řečeno framework Qt, který je knihovnou PySide pouze
&bdquo;obalen&ldquo;) umožňuje i takto jednoduché prvky používat takovými
způsoby, které by si v&nbsp;jiných frameworcích vyžádaly použití mnohem
komplikovanějších komponent. Postupně si popíšeme tyto ovládací prvky:</p>

<table>
<tr><th>Komponenta</th><th>Stručný popis</th></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html#qlabel">QLabel</a></td><td>textové či grafické (obrázek, video) návěští</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPushButton.html#qpushbutton">QPushButton</a></td><td>klasické tlačítko</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html#qradiobutton">QRadioButton</a></td><td>přepínací tlačítko</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html#qcheckbox">QCheckBox</a></td><td>zaškrtávací tlačítko (pole)</td></tr>
</table>

<img src="https://i.iinfo.cz/images/505/pyside3-1.png" class="image-314640" alt="&#160;" height="136" width="400" />
<p><i>Obrázek 1: Třídy představující widgety, kterými se budeme zabývat
v&nbsp;navazujících kapitolách.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Textový popisek (návěští)</h2>

<p>Zdánlivě nejjednodušším ovládacím prvkem mnoha grafických uživatelských
rozhraní je textový popisek, nazývaný také (textové) návěští neboli
<i>label</i>. Tento ovládací prvek plní v&nbsp;mnohých frameworcích pouze zcela
pasivní úlohu, protože dokáže zobrazit jednoduchý neformátovaný text, a to
mnohdy na jediném řádku. Ovšem ve frameworku PySide je tomu jinak, protože
textová návěští zde mají mnohem širší oblasti použití. Mezi podporované
vlastnosti patří zejména:</p>

<ol>
<li>Možnost zobrazení víceřádkového textu.</li>
<li>Text může být naformátován, přičemž se pro formátování používá podmnožina jazyka HTML.</li>
<li>Součástí formátování může být i odlišná barva jednotlivých znaků.</li>
<li>K&nbsp;textu může být přiřazen i rastrový obrázek (pixmapa).</li>
<li>Návěští může reagovat na klik vybraným tlačítkem myši.</li>
<li>Text návěští je možné vybrat myší či klávesnicí (tato vlastnost se musí nakonfigurovat).</li>
<li>Text návěští je dokonce možné i editovat (i tato vlastnost se musí nakonfigurovat).</li>
<li>Návěští může obsahovat hypertextový odkaz, který se po výběru zobrazí v&nbsp;prohlížeči.</li>
<li>V&nbsp;neposlední řadě si všimněte, že <strong>QLabel</strong> je odvozen od <strong>QFrame</strong>, což znamená, že okolo návěští je možné vytvořit různé typy rámečků.</li>
</ol>

<p>K&nbsp;většině výše uvedených vlastností se postupně dopracujeme
v&nbsp;navazujících kapitolách.</p>

<img src="https://i.iinfo.cz/images/505/pyside3-2.png" class="image-314641" alt="&#160;" height="136" width="400" />
<p><i>Obrázek 2: První typ widgetu už částečně známe z&nbsp;předchozích dvou
částí tohoto seriálu. Povšimněte si, že <strong>QLabel</strong> je odvozen od
<strong>QFrame</strong>.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zobrazení textového návěští zobrazujícího neformátovaný text</h2>

<p>Začneme ovšem jen pozvolna, protože si na začátku ukážeme, jak se textové
návěští používá pro zobrazení jednoduchého neformátovaného textu. Vzhledem
k&nbsp;tomu, že jsme na českém serveru, bude textový popisek obsahovat i znaky
s&nbsp;nabodeníčky. PySide podporuje Unicode, takže si jen musíme dát pozor na
to, aby byl Unicode použit i ve zdrojovém kódu, což platí především pro Python
2.x.</p>

<p>Na začátku zdrojového kódu nezapomeňte určit kódování (já ho nastavuji
současně pro Vim, rozpoznávány jsou ale i <a
href="https://www.python.org/dev/peps/pep-0263/">jiné možnosti</a>):</p>

<pre>
<i># vim: set fileencoding=utf-8</i>
</pre>

<p>U řetězce předávaného konstruktoru návěští se ujistěte, že je
v&nbsp;Unicode, a to i v&nbsp;Pythonu 2.x:</p>

<pre>
testLabel = QtGui.QLabel(u"Textové návěští")
</pre>

<p>Výsledek by měl vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/505/pyside3-3.png" class="image-314642" alt="&#160;" height="99" width="131" />
<p><i>Obrázek 3: Správně zobrazené návěští ve chvíli, kdy všude používáme
Unicode.</i></p>

<p>Pokud vyvíjíte aplikaci přímo v&nbsp;Pythonu 3.x a neuvede se explicitně
prefix řetězce v&nbsp;kódování Unicode, může se (většinou až u zákazníka :-)
objevit tato hrůza, pokud se aplikace spustí v&nbsp;Pythonu 2.x:</p>

<img src="https://i.iinfo.cz/images/505/pyside3-4.png" class="image-314643" alt="&#160;" height="99" width="172" />
<p><i>Obrázek 4: Nekorektně zobrazené návěští vinou neuvedeného kódování
řetězce.</i></p>

<p>Podívejme se nyní na zdrojový kód prvního demonstračního příkladu, který byl
použit pro vytvoření okna s&nbsp;jednoduchým textovým návěštím a taktéž
s&nbsp;tlačítkem sloužícím pro uzavření aplikace. Pro jednoduchost používáme
správce rozvržení <strong>QVBoxLayout</strong>, který jednotlivé komponenty
umisťuje pod sebe. Podobnou šablonu budeme používat i u dalších příkladů:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QLabel widget")
&nbsp;
        <i># textové návěští</i>
        <i># pozor na nutnost použití prefixu "u" v Pythonu 2.x</i>
        testLabel = QtGui.QLabel(u"Textové návěští")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(testLabel)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Textový popisek používající vybrané HTML značky pro zformátování textu</h2>

<p>Ve druhém příkladu si ukážeme další užitečnou vlastnost textového návěští.
Tento ovládací prvek totiž dokáže rozpoznat, že mu předáváme nikoli běžný čistý
text (<i>plain text</i>), ale část formátovaného textu s&nbsp;HTML.
V&nbsp;tomto případě je HTML interpretováno, čehož je možné využít například
pro zobrazení vícebarevného návěští. Mimochodem si opět povšimněte poctivého
použití prefixu &bdquo;u&ldquo;:</p>

<pre>
text = u"&lt;font color='black'&gt;černá&lt;/font&gt;&lt;br /&gt;" \
       u"&lt;font color='blue'&gt;modrá&lt;/font&gt;&lt;br /&gt;" \
       u"&lt;font color='red'&gt;čevená&lt;/font&gt;&lt;br /&gt;" \
       u"&lt;font color='magenta'&gt;fialová&lt;/font&gt;&lt;br /&gt;" \
       u"&lt;font color='green'&gt;zelená&lt;/font&gt;&lt;br /&gt;" \
       u"&lt;font color='cyan'&gt;azurová&lt;/font&gt;&lt;br /&gt;" \
       u"&lt;font color='yellow'&gt;žlutá&lt;/font&gt;&lt;br /&gt;" \
       u"&lt;font color='white'&gt;bílá&lt;/font&gt;&lt;br /&gt;"
testLabel = QtGui.QLabel(text)
</pre>

<p>Takto vytvořené návěští se zobrazí následujícím způsobem:</p>

<img src="https://i.iinfo.cz/images/505/pyside3-5.png" class="image-314644" alt="&#160;" height="235" width="109" />
<p><i>Obrázek 5: Návěští, jehož text se interpretoval jako HTML.</i></p>

<p>Jakékoli snahy o interpretaci řetězce můžeme zakázat:</p>

<pre>
testLabel.setTextFormat(QtCore.Qt.PlainText)
</pre>

<p>Výsledek potom bude vypadat takto:</p>

<img src="https://i.iinfo.cz/images/505/pyside3-6.png" class="image-314645" alt="&#160;" height="99" width="472" />
<p><i>Obrázek 6: Návěští, kde se text zobrazil přesně tak, jak byl zapsán ve
zdrojovém kódu (okno bylo zkráceno, protože se nevlezlo na plochu
desktopu).</i></p>

<p>Úplný zdrojový kód dnešního druhého demonstračního příkladu vypadá
následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QLabel widget")
&nbsp;
        <i># textové návěští</i>
        <i># pozor na nutnost použití prefixu "u" v Pythonu 2.x</i>
        text = u"&lt;font color='black'&gt;černá&lt;/font&gt;&lt;br /&gt;" \
               u"&lt;font color='blue'&gt;modrá&lt;/font&gt;&lt;br /&gt;" \
               u"&lt;font color='red'&gt;čevená&lt;/font&gt;&lt;br /&gt;" \
               u"&lt;font color='magenta'&gt;fialová&lt;/font&gt;&lt;br /&gt;" \
               u"&lt;font color='green'&gt;zelená&lt;/font&gt;&lt;br /&gt;" \
               u"&lt;font color='cyan'&gt;azurová&lt;/font&gt;&lt;br /&gt;" \
               u"&lt;font color='yellow'&gt;žlutá&lt;/font&gt;&lt;br /&gt;" \
               u"&lt;font color='white'&gt;bílá&lt;/font&gt;&lt;br /&gt;"
        testLabel = QtGui.QLabel(text)
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(testLabel)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Styly rámců zobrazených okolo popisku i okolo dalších vybraných widgetů</h2>

<p>Již <a href="#k02">ve druhé kapitole</a> jsem se zmínil o tom, že ovládací
prvek návěští je reprezentován třídou <strong>QLabel</strong>, která je
odvozena od třídy <strong>QFrame</strong>. To nám zcela správně napovídá, že se
okolo návěští může zobrazit rámeček, jehož styl je možné programově
nakonfigurovat tak, aby to co nejvíce vyhovovalo uživatelům. Nabídka stylů je
poměrně široká, o čemž se ostatně můžeme přesvědčit i pohledem na následující
tabulku ukazující různé styly okrajů kombinované s&nbsp;jejich variabilní
šířkou:</p>

<img src="https://i.iinfo.cz/images/505/pyside3-7.png" class="image-314646" alt="&#160;" height="594" width="487" />
<p><i>Obrázek 7: Různé styly a šířky okrajů podporované všemi ovládacími prvky odvozenými od <strong>QFrame</strong><br />
Originál obrázku naleznete na wiki PySide, konkrétně na stránce <a href="http://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html?highlight=qframe#PySide.QtGui.QFrame">http://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html?highlight=qframe#PySide.QtGui.QFrame</a></i></p>

<p>Styl je možné specifikovat kombinací prvků z&nbsp;následujících dvou
množin:</p>

<table>
<tr><td>QFrame.NoFrame</td></tr>
<tr><td>QFrame.Box</td></tr>
<tr><td>QFrame.Panel</td></tr>
<tr><td>QFrame.StyledPanel</td></tr>
<tr><td>QFrame.HLine</td></tr>
<tr><td>QFrame.VLine</td></tr>
<tr><td>QFrame.WinPanel</td></tr>
</table>

<p>a:</p>

<table>
<tr><td>QFrame.Plain</td></tr>
<tr><td>QFrame.Raised</td></tr>
<tr><td>QFrame.Sunken</td></tr>
</table>



<p><a name="k06"></a></p>
<h2 id="k06">6. Ukázka změny typu rámce</h2>

<p>Ve třetím demonstračním příkladu je ukázáno, jak je možné nastavit typ rámce
u šesti návěští:</p>

<pre>
testLabel2 = QtGui.QLabel("Box")
testLabel3 = QtGui.QLabel("Panel")
testLabel4 = QtGui.QLabel("WinPanel")
testLabel5 = QtGui.QLabel("HLine")
testLabel6 = QtGui.QLabel("VLine")
testLabel7 = QtGui.QLabel("StyledPanel")
&nbsp;
testLabel2.setFrameStyle(QtGui.QFrame.Box)
testLabel3.setFrameStyle(QtGui.QFrame.Panel)
testLabel4.setFrameStyle(QtGui.QFrame.WinPanel)
testLabel5.setFrameStyle(QtGui.QFrame.HLine)
testLabel6.setFrameStyle(QtGui.QFrame.VLine)
testLabel7.setFrameStyle(QtGui.QFrame.StyledPanel)
</pre>

<p>Navíc vytvoříme jedno návěští zcela bez textu, ovšem s&nbsp;nastaveným
rámečkem na styl <strong>HLine</strong>, což ve skutečnosti není žádný rámeček,
ale horizontální čára procházející přímo středem návěští:</p>

<pre>
<i># horizontální oddělovač</i>
horizontalLine = QtGui.QLabel()
horizontalLine.setFrameStyle(QtGui.QFrame.HLine)
</pre>

<p>Po vložení všech ovládacích prvků do okna získáme takto vypadající
aplikaci:</p>

<img src="https://i.iinfo.cz/images/505/pyside3-8.png" class="image-314647" alt="&#160;" height="277" width="127" />
<p><i>Obrázek 8: Osm textových návěští, každé s&nbsp;jiným rámečkem. Poslední
návěští obsahuje jen horizontální čáru, ale žádný text.</i></p>

<p>Opět si uveďme celý zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QLabel widget")
&nbsp;
        <i># textová návěští</i>
        testLabel1 = QtGui.QLabel("Normal/Default")
        testLabel2 = QtGui.QLabel("Box")
        testLabel3 = QtGui.QLabel("Panel")
        testLabel4 = QtGui.QLabel("WinPanel")
        testLabel5 = QtGui.QLabel("HLine")
        testLabel6 = QtGui.QLabel("VLine")
        testLabel7 = QtGui.QLabel("StyledPanel")
&nbsp;
        testLabel2.setFrameStyle(QtGui.QFrame.Box)
        testLabel3.setFrameStyle(QtGui.QFrame.Panel)
        testLabel4.setFrameStyle(QtGui.QFrame.WinPanel)
        testLabel5.setFrameStyle(QtGui.QFrame.HLine)
        testLabel6.setFrameStyle(QtGui.QFrame.VLine)
        testLabel7.setFrameStyle(QtGui.QFrame.StyledPanel)
&nbsp;
        <i># horizontální oddělovač</i>
        horizontalLine = QtGui.QLabel()
        horizontalLine.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(testLabel1)
        layout.addWidget(testLabel2)
        layout.addWidget(testLabel3)
        layout.addWidget(testLabel4)
        layout.addWidget(testLabel5)
        layout.addWidget(testLabel6)
        layout.addWidget(testLabel7)
&nbsp;
        layout.addWidget(horizontalLine)
&nbsp;
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Režimy zobrazení trojrozměrného reliéfu rámce</h2>

<p>Ve skutečnosti není styl rámců zobrazených okolo návěští určen jedinou
hodnotou, ale kombinací většího množství konstant. Podívejme se například na
způsob kombinace stylů &bdquo;Box&ldquo;, &bdquo;Panel&ldquo; a
&bdquo;WinPanel&ldquo; s&nbsp;konstantami &bdquo;Plain&ldquo; (2D zobrazení),
&bdquo;Raised&ldquo; (okraje vystupují nad plochu okna) a&bdquo;Sunkem&ldquo;
(okraje jsou naopak vyryté do plochy okna):</p>

<pre>
testLabel11.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Plain)
testLabel21.setFrameStyle(QtGui.QFrame.Panel | QtGui.QFrame.Plain)
testLabel31.setFrameStyle(QtGui.QFrame.WinPanel | QtGui.QFrame.Plain)
&nbsp;
testLabel12.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Raised)
testLabel22.setFrameStyle(QtGui.QFrame.Panel | QtGui.QFrame.Raised)
testLabel32.setFrameStyle(QtGui.QFrame.WinPanel | QtGui.QFrame.Raised)
&nbsp;
testLabel13.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Sunken)
testLabel23.setFrameStyle(QtGui.QFrame.Panel | QtGui.QFrame.Sunken)
testLabel33.setFrameStyle(QtGui.QFrame.WinPanel | QtGui.QFrame.Sunken)
</pre>

<p>Všech devět kombinací stylů rámců se zobrazí takto:</p>

<img src="https://i.iinfo.cz/images/505/pyside3-9.png" class="image-314648" alt="&#160;" height="177" width="395" />
<p><i>Obrázek 9: Devět kombinací stylů rámců zobrazených okolo textového
návěští.</i></p>

<p>Samozřejmě nezapomeneme uvést úplný zdrojový kód příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QLabel widget")
&nbsp;
        <i># textová návěští</i>
        testLabel11 = QtGui.QLabel("Plain Box")
        testLabel21 = QtGui.QLabel("Plain Panel")
        testLabel31 = QtGui.QLabel("Plain WinPanel")
&nbsp;
        testLabel12 = QtGui.QLabel("Raised Box")
        testLabel22 = QtGui.QLabel("Raised Panel")
        testLabel32 = QtGui.QLabel("Raised WinPanel")
&nbsp;
        testLabel13 = QtGui.QLabel("Sunken Box")
        testLabel23 = QtGui.QLabel("Sunken Panel")
        testLabel33 = QtGui.QLabel("Sunken WinPanel")
&nbsp;
        testLabel11.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Plain)
        testLabel21.setFrameStyle(QtGui.QFrame.Panel | QtGui.QFrame.Plain)
        testLabel31.setFrameStyle(QtGui.QFrame.WinPanel | QtGui.QFrame.Plain)
&nbsp;
        testLabel12.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Raised)
        testLabel22.setFrameStyle(QtGui.QFrame.Panel | QtGui.QFrame.Raised)
        testLabel32.setFrameStyle(QtGui.QFrame.WinPanel | QtGui.QFrame.Raised)
&nbsp;
        testLabel13.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Sunken)
        testLabel23.setFrameStyle(QtGui.QFrame.Panel | QtGui.QFrame.Sunken)
        testLabel33.setFrameStyle(QtGui.QFrame.WinPanel | QtGui.QFrame.Sunken)
&nbsp;
        <i># horizontální oddělovač</i>
        horizontalLine = QtGui.QLabel()
        horizontalLine.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QGridLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(testLabel11, 1, 1)
        layout.addWidget(testLabel21, 2, 1)
        layout.addWidget(testLabel31, 3, 1)
&nbsp;
        layout.addWidget(testLabel12, 1, 2)
        layout.addWidget(testLabel22, 2, 2)
        layout.addWidget(testLabel32, 3, 2)
&nbsp;
        layout.addWidget(testLabel13, 1, 3)
        layout.addWidget(testLabel23, 2, 3)
        layout.addWidget(testLabel33, 3, 3)
&nbsp;
        layout.addWidget(horizontalLine, 4, 2)
&nbsp;
        layout.addWidget(quitButton, 5, 2)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Textový popisek, jehož text je možné vybrat nebo i editovat</h2>

<p>Textové návěští nemusí být představováno pouze neměnným textem, protože
programátor může umožnit uživatelům výběr tohoto textu (myší i klávesnicí) a
popř.&nbsp;dokonce i editaci zobrazeného textu. Zatímco editace je podle mého
názoru spíše technologická zajímavost, možnost výběru textu na návěští je
v&nbsp;mnoha případech velmi užitečná (ostatně u webových aplikací lze myší
vybrat prakticky libovolný text bez omezení):</p>

<img src="https://i.iinfo.cz/images/505/pyside3-10.png" class="image-314649" alt="&#160;" height="122" width="216" />
<p><i>Obrázek 10: Zdánlivě obyčejná návěští.</i></p>

<p>Konfigurace návěští, jehož obsah je možné vybrat:</p>

<pre>
testLabel1.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
</pre>

<img src="https://i.iinfo.cz/images/505/pyside3-11.png" class="image-314650" alt="&#160;" height="122" width="216" />
<p><i>Obrázek 11: Výběr textu v&nbsp;prvním návěští pomocí myši.</i></p>

<p>Konfigurace návěští, jehož obsah je možné vybrat i editovat:</p>

<pre>
testLabel2.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse | QtCore.Qt.TextEditable)
</pre>

<img src="https://i.iinfo.cz/images/505/pyside3-12.png" class="image-314651" alt="&#160;" height="122" width="216" />
<p><i>Obrázek 12: Editace textu ve druhém návěští po kliknutí levým tlačítkem
myši (povšimněte si textového kurzoru).</i></p>

<p>Opět si uveďme celý zdrojový kód demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QLabel widget")
&nbsp;
        <i># textové návěští</i>
        <i># pozor na nutnost použití prefixu "u" v Pythonu 2.x</i>
        testLabel1 = QtGui.QLabel(u"tento text je možné vybírat")
        testLabel2 = QtGui.QLabel(u"tento text je možné editovat")
&nbsp;
        <i># text v návěští bude možné vybírat</i>
        testLabel1.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
&nbsp;
        <i># text v návěští bude možné vybírat a editovat</i>
        testLabel2.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse | QtCore.Qt.TextEditable)
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(testLabel1)
        layout.addWidget(testLabel2)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Aktivní textový popisek &ndash; zobrazení stránky ve webovém prohlížeči po výběru odkazu</h2>

<p>V&nbsp;posledním příkladu, v&nbsp;němž se zabýváme &bdquo;obyčejným&ldquo;
textovým návěštím, je na hlavní okno aplikace umístěn odkaz, po jehož výběru
(kliknutím levým tlačítkem myši) se otevře cíl odkazu ve webovém prohlížeči.
Výchozí webový prohlížeč je vybrán v&nbsp;konfiguraci desktopového prostředí a
odkaz (link) se vytvoří poměrně jednoduše a přímočaře:</p>

<pre>
<i># textové návěští</i>
<i># pozor na nutnost použití prefixu "u" v Pythonu 2.x</i>
testLabel = QtGui.QLabel(u"&lt;a href='http://www.root.cz'&gt;Root&lt;/a&gt;")
&nbsp;
<i># pro jistotu explicitně nastavíme</i>
testLabel.setTextFormat(QtCore.Qt.RichText)
&nbsp;
<i># povolení otevření stránky v browseru</i>
testLabel.setOpenExternalLinks(True)
</pre>

<p>Pozor si musíte dát jen na to, aby byl odkaz skutečně zapsán formou
standardního hypertextového odkazu v&nbsp;HTML, jinak nebude link funkční!</p>

<img src="https://i.iinfo.cz/images/505/pyside3-13.png" class="image-314652" alt="&#160;" height="99" width="109" />
<p><i>Obrázek 13: Okno s&nbsp;funkčním hypertextovým odkazem.</i></p>

<p>Samozřejmě nezapomeneme uvést úplný zdrojový kód příkladu s&nbsp;návěštím
nakonfigurovaným do funkce hypertextového odkazu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QLabel widget")
&nbsp;
        <i># textové návěští</i>
        <i># pozor na nutnost použití prefixu "u" v Pythonu 2.x</i>
        testLabel = QtGui.QLabel(u"&lt;a href='http://www.root.cz'&gt;Root&lt;/a&gt;")
&nbsp;
        <i># pro jistotu explicitně nastavíme</i>
        testLabel.setTextFormat(QtCore.Qt.RichText)
&nbsp;
        <i># povolení otevření stránky v browseru</i>
        testLabel.setOpenExternalLinks(True)
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(testLabel)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Ovládací prvek <strong>QPushButton</strong> a události generované po jeho stisku</h2>

<p>S&nbsp;dalším ovládacím prvkem jsme se již setkali v&nbsp;předchozích dvou
částech tohoto seriálu, takže si dnes jen řekneme, jaké signály lze společně
s&nbsp;ním využít. Jedná se o widget nazvaný <strong>QPushButton</strong>,
který se skutečně používá pro vkládání běžného tlačítka do oken a dialogů.
Z&nbsp;diagramu tříd zobrazeného pod tímto odstavcem je patrné, že
<strong>QPushButton</strong> je odvozený od třídy
<strong>QAbstractButton</strong>, z&nbsp;níž dědí své základní chování (ovšem
již ne vzhled). Na rozdíl od výše popsaného widgetu <strong>QLabel</strong> zde
však mezi předky nepatří třída <strong>QFrame</strong>, což mj.&nbsp;znamená,
že pokud budeme chtít okolo tlačítka vytvořit nějaký konfigurovatelný okraj, je
nutné tlačítko vložit do dalšího widgetu.</p>

<img src="https://i.iinfo.cz/images/505/pyside3-14.png" class="image-314653" alt="&#160;" height="136" width="400" />
<p><i>Obrázek 14: Hierarchie tříd s&nbsp;vyznačením třídy představující widget
<strong>QPushButton</strong>.</i></p>

<p>Ve třídě <strong>QAbstractButton</strong> jsou deklarovány čtyři
signály:</p>

<table>
<tr><th>Jméno signálu</th><th>Význam</th></tr>
<tr><td>clicked</td><td>vyslán <strong>po</strong> stisku a puštění tlačítka</td></tr>
<tr><td>pressed</td><td>vyslán ve chvíli, kdy došlo ke stlačení</td></tr>
<tr><td>released</td><td>vyslán ve chvíli, kdy došlo k&nbsp;puštění tlačítka</td></tr>
<tr><td>toggled</td><td>vyslán po změně stavu tlačítka (zapnuto/vypnuto)</td></tr>
</table>

<p>Ve skutečnosti jsou však společně s&nbsp;widgetem
<strong>QPushButton</strong> používány pouze první tři signály, většinou
dokonce pouze signál <strong>clicked</strong>. Pokud je totiž nutné vložit do
okna aplikace přepínací tlačítko (tedy spíše přepínač), je výhodnější použít
<strong>QToolButton</strong>, protože právě u nástrojového pruhu se setkáme
s&nbsp;nutností mít jedno z&nbsp;tlačítek zamáčknuté (typickým příkladem je
grafický editor, v&nbsp;němž je vybrán vždy jeden z&nbsp;kreslicích
nástrojů).</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pořadí posílání signálů po stisku tlačítka</h2>

<p>Podívejme se nyní na způsob, jakým se používají první tři signály, tedy
<strong>clicked</strong>, <strong>pressed</strong> a <strong>released</strong>.
V&nbsp;testovací aplikaci vytvoříme běžné tlačítko a zaregistrujeme příjemce
těchto tří signálů. Vytvoření tlačítka se provede jednoduše:</p>

<pre>
<i># testovací tlačítko</i>
testButton = QtGui.QPushButton("Press me")
</pre>

<p>Navázání jediné callback funkce na tři signály (ve skutečnosti se zavolá
anonymní funkce, která callback funkci předá další parametr):</p>

<pre>
<i># navázání akce na signál</i>
testButton.clicked.connect(lambda: buttonEvent('clicked'))
testButton.pressed.connect(lambda: buttonEvent('pressed'))
testButton.released.connect(lambda: buttonEvent('released'))
</pre>

<p>Samotná callback funkce je primitivní:</p>

<pre>
def <strong>buttonEvent</strong>(eventName):
    print("Event " + eventName)
</pre>

<p>Po spuštění aplikace se podíváme, v&nbsp;jakém pořadí se budou informace o
příjmu signálů zobrazovat po stisku (a puštění) tlačítka:</p>

<pre>
Event pressed
Event released
Event clicked
</pre>

<p>Informace o stisku je samozřejmě poslána ihned ve chvíli, kdy uživatel na
tlačítko klikl. Po dokončení kliku se nejdříve vyšle signál o puštění tlačítka
a teprve po něm signál o samotném kliku. To v&nbsp;praxi znamená, že pokud
budete chtít reagovat již na první stisk tlačítka, je nutné použít signál
<strong>pressed</strong>, na rozdíl od některých dalších widget toolkitů.</p>

<img src="https://i.iinfo.cz/images/505/pyside3-15.png" class="image-314654" alt="&#160;" height="109" width="109" />
<p><i>Obrázek 15: Okno s&nbsp;testovacím tlačítkem.</i></p>

<p>Demonstrační příklad s&nbsp;testovacím tlačítkem vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
def <strong>buttonEvent</strong>(eventName):
    print("Event " + eventName)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QButton signals")
&nbsp;
        <i># testovací tlačítko</i>
        testButton = QtGui.QPushButton("Press me")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># navázání akce na signál</i>
        testButton.clicked.connect(lambda: buttonEvent('clicked'))
        testButton.pressed.connect(lambda: buttonEvent('pressed'))
        testButton.released.connect(lambda: buttonEvent('released'))
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zaškrtávací pole (check box)</h2>

<p>Dalším ovládacím prvkem, který má již složitější chování, než jednoduchý
<strong>QPushButton</strong>, je widget nazvaný <strong>QCheckBox</strong>. I
tento widget je odvozen od třídy <strong>QAbstractButton</strong>, takže může
při změně svého stavu vysílat již zmíněné čtyři typy signálů:</p>

<table>
<tr><th>Jméno signálu</th><th>Význam</th></tr>
<tr><td>clicked</td><td>vyslán <strong>po</strong> stisku a puštění tlačítka</td></tr>
<tr><td>pressed</td><td>vyslán ve chvíli, kdy došlo ke stlačení</td></tr>
<tr><td>released</td><td>vyslán ve chvíli, kdy došlo k&nbsp;puštění tlačítka</td></tr>
<tr><td>toggled</td><td>vyslán po změně stavu tlačítka (zapnuto/vypnuto)</td></tr>
</table>

<img src="https://i.iinfo.cz/images/505/pyside3-16.png" class="image-314655" alt="&#160;" height="136" width="400" />
<p><i>Obrázek 16: Hierarchie tříd s&nbsp;vyznačením třídy představující widget
<strong>QCheckBox</strong>.</i></p>

<p>Widgety <strong>QCheckBox</strong> mohou být použity různým způsobem:</p>

<ol>

<li>Každé zaškrtávací tlačítko může pracovat samostatně a mít jen dva možné
stavy (zaškrtnuto, nezaškrtnuto).</li>

<li>Každé zaškrtávací tlačítko může pracovat samostatně a mít tři možné stavy
(zaškrtnuto, nezaškrtnuto, třetí stav reprezentovaný znakem -, který může
znamenat &bdquo;žádná změna&ldquo;).</li>

<li>Tlačítka mohou být spojena do skupiny s&nbsp;exkluzivitou výběru jen
jediného tlačítka v&nbsp;daný okamžik. Jedná se vlastně o obdobu přepínačů,
které si popíšeme o několik kapitol dále.</li>

</ol>



<p><a name="k13"></a></p>
<h2 id="k13">13. Nastavení a zjišťování stavu zaškrtávacích polí</h2>

<p>V&nbsp;prvním příkladu, který je věnován použití zaškrtávacích tlačítek, si
ukážeme základní způsob použití těchto prvků GUI. Nejprve vytvoříme dvojici
tlačítek a nastavíme jejich stav, tj.&nbsp;zda je ve výchozím nastavení
tlačítko zaškrtnuto či nikoli:</p>

<pre>
<i># testovací zaškrtávací tlačítka</i>
self.testCheckBox1 = QtGui.QCheckBox("check box 1")
self.testCheckBox2 = QtGui.QCheckBox("check box 2")
self.testCheckBox1.<strong>setCheckState</strong>(QtCore.Qt.Unchecked)
self.testCheckBox2.<strong>setCheckState</strong>(QtCore.Qt.Checked)
</pre>

<p>Při běhu aplikace se stav zaškrtávacích tlačítek může zjistit takto:</p>

<pre>
state = "checked" if <strong>checkbox.isChecked()</strong> else "unchecked"
print("Checkbox {name} is {state}".format(name=name, state=state))
</pre>

<p>Metodu <strong>isChecked</strong> můžeme použít jen ve chvíli, kdy používáme
tlačítka se dvěma možnými stavy!</p>

<img src="https://i.iinfo.cz/images/505/pyside3-17.png" class="image-314656" alt="&#160;" height="165" width="133" />
<p><i>Obrázek 17: Zaškrtávací tlačítka se dvěma možnými stavy.</i></p>

<p>Zdrojový kód demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
def <strong>buttonEvent</strong>(eventName):
    print("Event " + eventName)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QButton signals")
&nbsp;
        <i># testovací zaškrtávací tlačítka</i>
        self.testCheckBox1 = QtGui.QCheckBox("check box 1")
        self.testCheckBox2 = QtGui.QCheckBox("check box 2")
        self.testCheckBox1.setCheckState(QtCore.Qt.Unchecked)
        self.testCheckBox2.setCheckState(QtCore.Qt.Checked)
&nbsp;
        <i># tlačítko pro zjištění stavů checkboxů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testCheckBox1)
        layout.addWidget(self.testCheckBox2)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState</strong>(self):
        print("-" * 50)
        MainWindow.printStateForCheckbox("#1", self.testCheckBox1)
        MainWindow.printStateForCheckbox("#2", self.testCheckBox2)
&nbsp;
    @staticmethod
    def <strong>printStateForCheckbox</strong>(name, checkbox):
        state = "checked" if checkbox.isChecked() else "unchecked"
        print("Checkbox {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zaškrtávací pole se třemi stavy (tristate)</h2>

<p>V&nbsp;případě, že je zapotřebí zobrazit tři možné stavy, například
&bdquo;povoleno, zakázáno, beze změny&ldquo;, lze pro tento účel využít
třístavová zaškrtávací pole. Musíme si však uvědomit, že je nutné explicitně
povolit použití třetího stavu a navíc se při rozhodování, který stav je
aktuálně zvolen, již nemůže použít metoda <strong>isChecked</strong>
s&nbsp;pravdivostní návratovou hodnotou, ale složitější metoda
<strong>checkState</strong> vracející jednu z&nbsp;konstant:</p>

<ul>
<li>QtCore.Qt.CheckState.Unchecked</li>
<li>QtCore.Qt.CheckState.Checked</li>
<li>QtCore.Qt.CheckState.PartiallyChecked</li>
</ul>

<img src="https://i.iinfo.cz/images/505/pyside3-18.png" class="image-314657" alt="&#160;" height="273" width="133" />
<p><i>Obrázek 18: Zaškrtávací pole se třemi možnými stavy.</i></p>

<p>Třístavová zaškrtávací pole se vytvoří takto:</p>

<pre>
self.testCheckBox3 = QtGui.QCheckBox("check box 3")
self.testCheckBox4 = QtGui.QCheckBox("check box 4")
self.testCheckBox5 = QtGui.QCheckBox("check box 5")
&nbsp;
<i># třístavové checkboxy</i>
self.testCheckBox3.setTristate(True)
self.testCheckBox4.setTristate(True)
self.testCheckBox5.setTristate(True)
</pre>

<p>Poté je již možné nastavit jejich výchozí stav:</p>

<pre>
self.testCheckBox3.setCheckState(QtCore.Qt.Unchecked)
self.testCheckBox4.setCheckState(QtCore.Qt.PartiallyChecked)
self.testCheckBox5.setCheckState(QtCore.Qt.Checked)
</pre>

<p>Zjištění stavu konkrétního zaškrtávacího pole je již snadné:</p>

<pre>
state = checkbox.checkState()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Nastavení a zjišťování stavu zaškrtávacích polí se třemi možnými stavy</h2>

<p>V&nbsp;následujícím demonstračním příkladu je ukázána kombinace
zaškrtávacích polí se dvěma stavy i se třemi možnými stavy:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
def <strong>buttonEvent</strong>(eventName):
    print("Event " + eventName)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QButton signals")
&nbsp;
        <i># testovací zaškrtávací tlačítka</i>
        self.testCheckBox1 = QtGui.QCheckBox("check box 1")
        self.testCheckBox2 = QtGui.QCheckBox("check box 2")
        self.testCheckBox3 = QtGui.QCheckBox("check box 3")
        self.testCheckBox4 = QtGui.QCheckBox("check box 4")
        self.testCheckBox5 = QtGui.QCheckBox("check box 5")
&nbsp;
        <i># dvoustavové checkboxy</i>
        self.testCheckBox1.setCheckState(QtCore.Qt.Unchecked)
        self.testCheckBox2.setCheckState(QtCore.Qt.Checked)
&nbsp;
        <i># třístavové checkboxy</i>
        self.testCheckBox3.setTristate(True)
        self.testCheckBox4.setTristate(True)
        self.testCheckBox5.setTristate(True)
        self.testCheckBox3.setCheckState(QtCore.Qt.Unchecked)
        self.testCheckBox4.setCheckState(QtCore.Qt.PartiallyChecked)
        self.testCheckBox5.setCheckState(QtCore.Qt.Checked)
&nbsp;
        <i># horizontální oddělovač</i>
        horizontalLine = QtGui.QLabel()
        horizontalLine.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># tlačítko pro zjištění stavů checkboxů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testCheckBox1)
        layout.addWidget(self.testCheckBox2)
        layout.addWidget(horizontalLine)
        layout.addWidget(self.testCheckBox3)
        layout.addWidget(self.testCheckBox4)
        layout.addWidget(self.testCheckBox5)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState</strong>(self):
        print("-" * 50)
        MainWindow.printStateForCheckbox("#1", self.testCheckBox1)
        MainWindow.printStateForCheckbox("#2", self.testCheckBox2)
        MainWindow.printStateForCheckbox("#3", self.testCheckBox3)
        MainWindow.printStateForCheckbox("#4", self.testCheckBox4)
        MainWindow.printStateForCheckbox("#5", self.testCheckBox5)
&nbsp;
    @staticmethod
    def <strong>printStateForCheckbox</strong>(name, checkbox):
        state = checkbox.checkState()
        print("Checkbox {name} is in state {state}".format(name=name, state=state))
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Sdružení zaškrtávacích polí do skupin s&nbsp;exkluzivitou výběru</h2>

<p>V&nbsp;některých případech může být vyžadováno, aby se určitá zaškrtávací
pole nedala vybrat současně. Tento problém je sice možné řešit programově
(reakcí na signály s&nbsp;nastavením stavu ostatních polí), je to však zbytečně
komplikované. Elegantnějším řešením je spojení zaškrtávacích polí do jediné
skupiny. Ta přitom není nijak vizuálně prezentována, takže taková pole mohou
být na dialogu rozmístěna podle potřeb programátora či zákazníka.</p>

<img src="https://i.iinfo.cz/images/505/pyside3-19.png" class="image-314658" alt="&#160;" height="249" width="133" />
<p><i>Obrázek 19: Skupina zaškrtávacích polí, z&nbsp;nichž může být vybráno jen
jedno.</i></p>

<img src="https://i.iinfo.cz/images/505/pyside3-20.png" class="image-314659" alt="&#160;" height="249" width="133" />
<p><i>Obrázek 20: Skupina zaškrtávacích polí, z&nbsp;nichž může být vybráno jen
jedno.</i></p>

<p>Skupinu tlačítek je nutné vytvořit explicitně konstruktorem
<strong>QButtonGroup</strong> a následně je nutné nastavit &bdquo;exkluzivitu
výběru&ldquo;, tj.&nbsp;že lze vybrat maximálně jediné zaškrtávací pole:</p>

<pre>
self.buttonGroup = QtGui.QButtonGroup()
self.buttonGroup.setExclusive(True)
</pre>

<p>Jednotlivá zaškrtávací pole vytvoříme obvyklým způsobem:</p>

<pre>
self.testCheckBox1 = QtGui.QCheckBox("check box 1")
self.testCheckBox2 = QtGui.QCheckBox("check box 2")
self.testCheckBox3 = QtGui.QCheckBox("check box 3")
self.testCheckBox4 = QtGui.QCheckBox("check box 4")
self.testCheckBox5 = QtGui.QCheckBox("check box 5")
</pre>

<p>Ovšem posléze je musíme přidat do skupiny (nebo více skupin):</p>

<pre>
self.buttonGroup.addButton(self.testCheckBox1)
self.buttonGroup.addButton(self.testCheckBox2)
self.buttonGroup.addButton(self.testCheckBox3)
self.buttonGroup.addButton(self.testCheckBox4)
self.buttonGroup.addButton(self.testCheckBox5)
</pre>

<p>Zjištění, které tlačítko bylo zaškrtnuto, je velmi snadné &ndash; není
zapotřebí (typicky v&nbsp;programové smyčce) procházet všemi poli a volat
<strong>isChecked</strong>, ale použít namísto toho metodu
<strong>checkedButton</strong>:</p>

<pre>
checked = self.buttonGroup.checkedButton()
</pre>

<p>Tato metoda vrátí instanci tlačítka/pole, ovšem text na tlačítku taktéž
získáme snadno:</p>

<pre>
print("Checked button: " + self.buttonGroup.checkedButton().text())
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Praktická ukázka použití objektu typu <strong>QButtonGroup</strong></h2>

<p>V&nbsp;následujícím demonstračním příkladu je ukázáno vytvoření několika
zaškrtávacích polí sdružených do jedné skupiny. Sami si vyzkoušejte, že lze
vždy vybrat (zaškrtnout) maximálně jedno pole:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
def <strong>buttonEvent</strong>(eventName):
    print("Event " + eventName)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QButton signals")
&nbsp;
        self.buttonGroup = QtGui.QButtonGroup()
        self.buttonGroup.setExclusive(True)
&nbsp;
        <i># testovací zaškrtávací tlačítka</i>
        self.testCheckBox1 = QtGui.QCheckBox("check box 1")
        self.testCheckBox2 = QtGui.QCheckBox("check box 2")
        self.testCheckBox3 = QtGui.QCheckBox("check box 3")
        self.testCheckBox4 = QtGui.QCheckBox("check box 4")
        self.testCheckBox5 = QtGui.QCheckBox("check box 5")
&nbsp;
        self.buttonGroup.addButton(self.testCheckBox1)
        self.buttonGroup.addButton(self.testCheckBox2)
        self.buttonGroup.addButton(self.testCheckBox3)
        self.buttonGroup.addButton(self.testCheckBox4)
        self.buttonGroup.addButton(self.testCheckBox5)
&nbsp;
        <i># stav checkboxů</i>
        self.testCheckBox1.setCheckState(QtCore.Qt.Checked)
&nbsp;
        <i># tlačítko pro zjištění stavů checkboxů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testCheckBox1)
        layout.addWidget(self.testCheckBox2)
        layout.addWidget(self.testCheckBox3)
        layout.addWidget(self.testCheckBox4)
        layout.addWidget(self.testCheckBox5)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState</strong>(self):
        print("-" * 50)
        MainWindow.printStateForCheckbox("#1", self.testCheckBox1)
        MainWindow.printStateForCheckbox("#2", self.testCheckBox2)
        MainWindow.printStateForCheckbox("#3", self.testCheckBox3)
        MainWindow.printStateForCheckbox("#4", self.testCheckBox4)
        MainWindow.printStateForCheckbox("#5", self.testCheckBox5)
        print("Checked button: " + self.buttonGroup.checkedButton().text())
&nbsp;
    @staticmethod
    def <strong>printStateForCheckbox</strong>(name, checkbox):
        state = checkbox.checkState()
        print("Checkbox {name} is in state {state}".format(name=name, state=state))
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech jedenácti dnes popsaných demonstračních příkladů byly
opět, podobně jako v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>25_label.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/25_label.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/25_label.py</a></td></tr>
<tr><td>26_label_and_html.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/26_label_and_html.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/26_label_and_html.py</a></td></tr>
<tr><td>27_label_frame_styles.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/27_label_frame_styles.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/27_label_frame_styles.py</a></td></tr>
<tr><td>28_label_frame_3d.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/28_label_frame_3d.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/28_label_frame_3d.py</a></td></tr>
<tr><td>29_selectable_label.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/29_selectable_label.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/29_selectable_label.py</a></td></tr>
<tr><td>30_label_as_link.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/30_label_as_link.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/30_label_as_link.py</a></td></tr>
<tr><td>31_push_button_signals.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/31_push_button_signals.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/31_push_button_signals.py</a></td></tr>
<tr><td>32_checkbox.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/32_checkbox.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/32_checkbox.py</a></td></tr>
<tr><td>33_tristate_checkboxes.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/33_tristate_checkboxes.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/33_tristate_checkboxes.py</a></td></tr>
<tr><td>34_group_checkboxes.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/34_group_checkboxes.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/34_group_checkboxes.py</a></td></tr>
</table>

<img src="https://i.iinfo.cz/images/505/pyside3-21.png" class="image-314660" alt="&#160;" height="193" width="158" />
<p><i>Obrázek 21: Skupina přepínacích tlačítek, která bude popsaná
příště.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

