<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Rust: knihovna ndarray pro práci s n-rozměrnými poli</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Rust: knihovna ndarray pro práci s n-rozměrnými poli</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Programovací jazyk Rust: knihovna ndarray pro práci s&nbsp;n-rozměrnými poli</a></p>
<p><a href="#k02">*** 2. Základní datový typ, na němž je postavena knihovna ndarray</a></p>
<p><a href="#k03">*** 3. Malá odbočka: struktura ndarray v&nbsp;dalších programovacích jazycích</a></p>
<p><a href="#k04">*** 4. Konverze vektoru na pole, vytvoření pole z&nbsp;iterátoru</a></p>
<p><a href="#k05">*** 5. Konstruktory pro nulové vektory a matice</a></p>
<p><a href="#k06">*** 6. Vytvoření jednotkové matice</a></p>
<p><a href="#k07">*** 7. Vytvoření jednorozměrného pole funkcí <strong>Array::range()</strong></a></p>
<p><a href="#k08">*** 8. Vytvoření jednorozměrného pole funkcí <strong>Array::linspace()</strong></a></p>
<p><a href="#k09">*** 9. Specifikace tvaru pole při jeho konstrukci z&nbsp;vektoru</a></p>
<p><a href="#k10">*** 10. Použití makra <strong>array!</strong></a></p>
<p><a href="#k11">*** 11. Změna tvaru při konverzi polí</a></p>
<p><a href="#k12">*** 12. Zjištění délky, dimenze, tvaru a kroku mezi jednotlivými prvky pole</a></p>
<p><a href="#k13">*** 13. Pohledy na pole</a></p>
<p><a href="#k14">*** 14. Řezy polí</a></p>
<p><a href="#k15">*** 15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">*** 16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Rust: knihovna ndarray pro práci s&nbsp;n-rozměrnými poli</h2>

<p></p>

<p>Aby bylo možné používat dále popsané funkce, makra a traity, je nutné do
projektového souboru (spravovaného systémem Cargo) přidat do sekce
[dependencies] řádek s&nbsp;verzí knihovny <strong>ndarray</strong>. Současná
verze je sice teprve 0.9.1, ovšem projekt se dostal do stabilního stavu:</p>

<pre>
[dependencies]
ndarray = "0.9.1"
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní datový typ, na němž je postavena knihovna ndarray</h2>

<p>V&nbsp;knihovně <i>ndarray</i> se základní datová struktura taktéž jmenuje
<strong>ndarray</strong>. Tato struktura ve své základní podobě reprezentuje
pole o prakticky libovolném počtu dimenzí (ostatně &bdquo;nd&ldquo; ve jménu
&bdquo;ndarray&ldquo; značí N-dimensional). Tato pole se v&nbsp;některých
ohledech odlišují od běžných polí, řezů i vektorů, což poznáme zejména ve
chvíli, kdy se pokusíme změnit &bdquo;tvar&ldquo; (<i>shape</i>) pole
popř.&nbsp;z&nbsp;pole získat řez (<i>slice</i>). Ve skutečnosti se
v&nbsp;knihovně <i>ndarray</i> setkáme i s&nbsp;takzvaným pohledem
(<i>view</i>) na pole, který může být určen buď pouze pro čtení či pro čtení i
zápis (což v&nbsp;Rustu znamená, že i pole musí být měnitelné neboli
<i>mutable</i>). Samotná datová struktura je vždy homogenní, tj.&nbsp;může
obsahovat pouze prvky stejného typu, ovšem tento typ může být prakticky
libovolný. Tím se knihovna <i>ndarray</i> poněkud odlišuje například od známé
knihovny <i>Numpy</i> určené pro Python.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Malá odbočka: struktura ndarray v&nbsp;dalších programovacích jazycích</h2>

<p></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Konverze vektoru na pole, vytvoření pole z&nbsp;iterátoru</h2>

<p>Důležitá poznámka: na začátek všech zdrojových kódů přidejte následujících
pět programových řádků, aby došlo k&nbsp;importu funkcí, struktur a traitů ze
všech používaných modulů:</p>

<pre>
extern crate ndarray;
&nbsp;
use ndarray::Array;
use ndarray::Array1;
use ndarray::Array2;
use ndarray::Array3;
</pre>

<p>Pole typu <strong>ndarray</strong> je možné vytvořit několika různými
způsoby. Základní funkcí sloužící k&nbsp;převodu z&nbsp;vektoru (ve smyslu
programovacího jazyka Rust) na pole typu <strong>ndarray</strong> je funkce
nazvaná jednoduše <strong>Array::from_vec()</strong>. Výsledkem bude pole,
jehož prvky budou mít stejný typ, jako prvky zdrojového vektoru:</p>

<pre>
let array1 = Array::from_vec(vec![10, 9, 8, 1]);
&nbsp;
let array2 = Array::from_vec(vec![10.0, 9.0, 8.0, 1.0]);
</pre>

<p>Obě vzniklá pole vypadají na první pohled stejně, ovšem typy prvků jsou
odlišné:</p>

<pre>
[10, 9, 8, 1]
&nbsp;
[10, 9, 8, 1]
</pre>

<p>Samozřejmě je možné pracovat i s&nbsp;vektory řetězců:</p>

<pre>
let array3 = Array::from_vec(vec!["www", "root", "cz"]);
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
[www, root, cz]
</pre>

<p>Dalším užitečným konstruktorem jednorozměrných polí je funkce
<strong>Array::from_iter()</strong>, která pole vytvoří z&nbsp;předaného
iterátoru. Připomeňme si, že nejjednodušším iterátorem je <i>range</i>, který
je možné zapsat přímo:</p>

<pre>
let array = Array::from_iter(0..10);
</pre>

<p>Výsledek:</p>

<pre>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</pre>

<p>Při povolení (stále ještě nestabilní) volby
<strong>#![feature(inclusive_range_syntax)]</strong> lze u iterátoru použít
z&nbsp;obou stran uzavřený interval namísto intervalu polouzavřeného.
Povšimněte si použití tří teček namísto teček dvou:</p>

<pre>
let array_b = Array::from_iter(0...10);
</pre>

<p>Výsledné pole v&nbsp;tomto případě obsahuje i prvek 10:</p>

<pre>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</pre>

<p>I funkce vyššího řádu, mezi něž patří zejména <strong>filter()</strong> a
<strong>map()</strong>, dokážou zpracovat iterátory, takže lze napsat:</p>

<pre>
let array_c = Array::from_iter((0...100).filter(|x| (x % 3 == 0)));
&nbsp;
let array_d = Array::from_iter((0...10).map(|x| (x * 42)));
</pre>

<p>S&nbsp;očekávaným výsledkem:</p>

<pre>
[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33,
 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66,
 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]
&nbsp;
[0, 42, 84, 126, 168, 210, 252, 294, 336, 378, 420]
</pre>

<p>Poznámka: funkcím <strong>filter()</strong> a <strong>map()</strong> jsem
předal anonymní funkci, ale samozřejmě lze použít i běžnou funkci odpovídající
požadovanému rozhraní.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Konstruktory pro nulové vektory a matice</h2>

<p>Poměrně často se setkáme s&nbsp;nutností vytvořit vektor či matici
s&nbsp;nulovými prvky. V&nbsp;tomto případě samozřejmě není nutné složitě
vytvářet a předávat vektory, ale lze namísto toho využít funkci nazvanou
<strong>zeros</strong> deklarovanou pro jednorozměrná, dvourozměrná ... atd.
pole, což je rychlejší i méně paměťově náročnější. Pro jednorozměrné pole je
nutné jen specifikovat typ prvků a požadovaný tvar (<i>shape</i>) pole, který
v&nbsp;tomto případě odpovídá počtu prvků. Tvar se zadává n-ticí, v&nbsp;tomto
případě s&nbsp;jedinou hodnotou:</p>

<pre>
let array = Array1::&lt;f32&gt;::zeros((10));
</pre>

<p>Výsledek:</p>

<pre>
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</pre>

<p>Vzhledem k&nbsp;tomu, že tvar je u jednorozměrných polí představován jediným
celým číslem, lze zápis zkrátit (o dvě závorky):</p>

<pre>
let array = Array1::&lt;i8&gt;::zeros(10);
</pre>

<p>Výsledek je stejný:</p>

<pre>
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</pre>

<p>U dvourozměrných polí se zadává počet řádků následovaný počtem prvků na
řádku:</p>

<pre>
let array = Array2::&lt;f32&gt;::zeros((4, 3));
</pre>

<p>Výsledek:</p>

<pre>
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
</pre>

<p>U trojrozměrného pole musí mít n-tice specifikující tvar tři prvky:</p>

<pre>
let array = Array3::&lt;f32&gt;::zeros((4, 3, 2));
</pre>

<p>Výsledek:</p>

<pre>
[[[0, 0],
  [0, 0],
  [0, 0]],
 [[0, 0],
  [0, 0],
  [0, 0]],
 [[0, 0],
  [0, 0],
  [0, 0]],
 [[0, 0],
  [0, 0],
  [0, 0]]]
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření jednotkové matice</h2>

<p>Speciální a často používanou maticí (dvourozměrným polem) je jednotková
matice, pro jejíž konstrukci slouží funkce <strong>eye()</strong>, které se
pouze předá velikost matice. Výsledkem je pochopitelně pole se stejným počtem
řádků i sloupců:</p>

<pre>
let array = Array2::&lt;f32&gt;::eye(4);
</pre>

<pre>
[[1, 0, 0, 0],
 [0, 1, 0, 0],
 [0, 0, 1, 0],
 [0, 0, 0, 1]]
</pre>

<p>Použití jiného datového typu:</p>

<pre>
let array = Array2::&lt;i8&gt;::eye(10);
</pre>

<pre>
[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vytvoření jednorozměrného pole funkcí <strong>Array::range()</strong></h2>

<p>Jednorozměrné pole je možné vytvořit i s&nbsp;využitím funkce
<strong>Array::range()</strong>, které se předávají tři parametry: počáteční
mez intervalu (který je z&nbsp;levé strany uzavřen, tedy &bdquo;včetně&ldquo;),
koncová mez intervalu (zde je otevřen, tedy &bdquo;kromě&ldquo;) a krok:</p>

<pre>
let array1 = Array::range(0.0, 10.0, 1.0);
&nbsp;
let array2 = Array::range(0.0, 10.0, 2.0);
&nbsp;
let array3 = Array::range(0.0, 10.0, 1.5);
</pre>

<p>Výsledek je předvídatelný:</p>

<pre>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 2, 4, 6, 8]
[0, 1.5, 3, 4.5, 6, 7.5, 9]
</pre>

<p>V&nbsp;případě potřeby je možné zvolit i záporný krok; potom se samozřejmě
musí prohodit i horní a dolní mez. Povšimněte si, že se stále jedná o
polouzavřený interval:</p>

<pre>
let array1 = Array::range(10.0, 0.0, -1.0);
&nbsp;
let array2 = Array::range(10.0, 0.0, -2.0);
&nbsp;
let array3 = Array::range(10.0, 0.0, -1.5);
</pre>

<p>Výsledky:</p>

<pre>
[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
&nbsp;
[10, 8, 6, 4, 2]
&nbsp;
[10, 8.5, 7, 5.5, 4, 2.5, 1]
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vytvoření jednorozměrného pole funkcí <strong>Array::linspace()</strong></h2>

<p>V&nbsp;některých případech nemusí být použití výše popsané funkce
<strong>Array::range()</strong> tím nejlepším řešením při vytváření vektoru
obsahujícího sekvenci číselných hodnot. Typickým příkladem je sekvence
generovaná s&nbsp;krokem 0.1, protože hodnotu 0.1 není možné formáty IEEE 754
single ani double přesně reprezentovat. Tím pádem nemusí být z&nbsp;volání
funkce <strong>Array::range()</strong> ihned zřejmé, kolik prvků se nakonec
vygeneruje (typická chyba &pm;1). Pokud je nutné vytvořit vektor s&nbsp;přesným
počtem prvků, může se namísto <strong>Array::range()</strong> hodit funkce
<strong>Array::linspace()</strong>, které se předá počáteční hodnota, koncová
hodnota a popř.&nbsp;i počet prvků vektoru. Použití funkce
<strong>Array::linspace</strong> je tak ve skutečnosti velmi jednoduché a
přirozené:</p>

<pre>
let array1 = Array::linspace(1.0, 10.0, 10);
&nbsp;
let array2 = Array::linspace(1.0, 10.0, 5);
&nbsp;
let array3 = Array::linspace(1.0, 10.0, 3);
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&nbsp;
[1, 3.25, 5.5, 7.75, 10]
&nbsp;
[1, 5.5, 10]
</pre>

<p>Hodnoty prvního a posledního prvku můžeme klidně prohodit, na rozdíl od
<strong>Array::range()</strong>, kde se současně musel změnit i krok:</p>

<pre>
let array1 = Array::linspace(10.0, 1.0, 10);
&nbsp;
let array2 = Array::linspace(10.0, 1.0, 5);
&nbsp;
let array3 = Array::linspace(10.0, 1.0, 3);
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
&nbsp;
[10, 7.75, 5.5, 3.25, 1]
&nbsp;
[10, 5.5, 1]
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Specifikace tvaru pole při jeho konstrukci z&nbsp;vektoru</h2>

<pre>
let array = Array::from_shape_vec((6), vec![1,2,3,4,5,6]).unwrap();
</pre>

[1, 2, 3, 4, 5, 6]

<pre>
let array_b = Array::from_shape_vec((2,3), vec![1,2,3,4,5,6]).unwrap();
</pre>

[[1, 2, 3],
 [4, 5, 6]]

<pre>
let array_c = Array::from_shape_vec((3,2), vec![1,2,3,4,5,6]).unwrap();
</pre>

[[1, 2],
 [3, 4],
 [5, 6]]

<pre>
let array_d = Array::from_shape_vec((1,6), vec![1,2,3,4,5,6]).unwrap();
</pre>

[[1, 2, 3, 4, 5, 6]]

<pre>
 array_e = Array::from_shape_vec((2,2,2), vec![1,2,3,4,5,6,7,8]).unwrap();
</pre>

[[[1, 2],
  [3, 4]],
 [[5, 6],
  [7, 8]]]



<p><a name="k10"></a></p>
<h2 id="k10">10. Použití makra <strong>array!</strong></h2>

<p>Další možností, jak vytvořit pole libovolného rozměru (a typu), představuje
použití makra <strong>array!</strong>, je však nutné toto makro povolit
následující deklarací:</p>

<pre>
#[macro_use(array)]
</pre>

<p>Jakým způsobem se makro <strong>array!</strong> používá, je patrné
z&nbsp;následujícího úryvku zdrojového kódu, v&nbsp;němž se postupně vytvoří
jednorozměrné pole, dvourozměrné pole a nakonec i pole trojrozměrné:</p>

<pre>
let array_a = array![1, 2, 3, 4];
&nbsp;
let array_b = array![[1, 2],
                     [3, 4]];
&nbsp;
let array_c = array![[[1, 2], [3, 4]],
                     [[5, 6], [7, 8]]];
</pre>

<p>Výsledkem by měly být následující pole:</p>

<pre>
[1, 2, 3, 4]
&nbsp;
[[1, 2],
 [3, 4]]
&nbsp;
[[[1, 2],
  [3, 4]],
 [[5, 6],
  [7, 8]]]
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Změna tvaru při konverzi polí</h2>

<pre>
let array = Array::from_iter(0..12);
</pre>

[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

<pre>
let array_b = Array::from_iter(0..12).into_shape((3,4)).unwrap();
</pre>

[[0, 1, 2, 3],
 [4, 5, 6, 7],
 [8, 9, 10, 11]]

<pre>
let array_c = Array::from_iter(0..12).into_shape((4,3)).unwrap();
</pre>

[[0, 1, 2],
 [3, 4, 5],
 [6, 7, 8],
 [9, 10, 11]]

<pre>
let array_d = Array::from_iter(0..12).into_shape((12,1)).unwrap();
</pre>

[[0],
 [1],
 [2],
 [3],
 [4],
 [5],
 [6],
 [7],
 [8],
 [9],
 [10],
 [11]]

<pre>
let array_e = Array::from_iter(0..12).into_shape((2,2,3)).unwrap();
</pre>

[[[0, 1, 2],
  [3, 4, 5]],
 [[6, 7, 8],
  [9, 10, 11]]]

<pre>
let array_f = Array::from_iter(0..12).into_shape((2,3,2)).unwrap();
</pre>

[[[0, 1],
  [2, 3],
  [4, 5]],
 [[6, 7],
  [8, 9],
  [10, 11]]]

<pre>
let array_g = Array::from_iter(0..12).into_shape((3,2,2)).unwrap();
</pre>

[[[0, 1],
  [2, 3]],
 [[4, 5],
  [6, 7]],
 [[8, 9],
  [10, 11]]]

<pre>
let array_h = Array::from_iter(0..16).into_shape((2, 2, 2, 2)).unwrap();
</pre>

[[[[0, 1],
   [2, 3]],
  [[4, 5],
   [6, 7]]],
 [[[8, 9],
   [10, 11]],
  [[12, 13],
   [14, 15]]]]



<p><a name="k12"></a></p>
<h2 id="k12">12. Zjištění délky, dimenze, tvaru a kroku mezi jednotlivými prvky pole</h2>

<pre>
let array = Array::from_iter(0..12);
println!("length:     {}", array.len());
println!("dimensions: {}", array.ndim());
println!("dimension:  {:?}", array.dim());
println!("shape:      {:?}", array.shape());
println!("strides:    {:?}\n", array.strides());
</pre>

<pre>
length:     12
dimensions: 1
dimension:  12
shape:      [12]
strides:    [1]
</pre>

<pre>
let array_b = Array::from_iter(0..12).into_shape((1,12)).unwrap();
println!("length:     {}", array_b.len());
println!("dimensions: {}", array_b.ndim());
println!("dimension:  {:?}", array_b.dim());
println!("shape:      {:?}", array_b.shape());
println!("strides:    {:?}\n", array_b.strides());
</pre>

<pre>
length:     12
dimensions: 2
dimension:  (1, 12)
shape:      [1, 12]
strides:    [12, 1]
</pre>

<pre>
let array_c = Array::from_iter(0..12).into_shape((4,3)).unwrap();
println!("length:     {}", array_c.len());
println!("dimensions: {}", array_c.ndim());
println!("dimension:  {:?}", array_c.dim());
println!("shape:      {:?}", array_c.shape());
println!("strides:    {:?}\n", array_c.strides());
</pre>

<pre>
length:     12
dimensions: 2
dimension:  (4, 3)
shape:      [4, 3]
strides:    [3, 1]
</pre>

<pre>
let array_d = Array::from_iter(0..12).into_shape((2,3,2)).unwrap();
println!("length:     {}", array_d.len());
println!("dimensions: {}", array_d.ndim());
println!("dimension:  {:?}", array_d.dim());
println!("shape:      {:?}", array_d.shape());
println!("strides:    {:?}\n", array_d.strides());
</pre>

<pre>
length:     12
dimensions: 3
dimension:  (2, 3, 2)
shape:      [2, 3, 2]
strides:    [6, 2, 1]
</pre>

<pre>
let array_e = Array::from_iter(0..16).into_shape((2,2,2,2)).unwrap();
println!("length:     {}", array_e.len());
println!("dimensions: {}", array_e.ndim());
println!("dimension:  {:?}", array_e.dim());
println!("shape:      {:?}", array_e.shape());
println!("strides:    {:?}\n", array_e.strides());
</pre>

<pre>
length:     16
dimensions: 4
dimension:  (2, 2, 2, 2)
shape:      [2, 2, 2, 2]
strides:    [8, 4, 2, 1]
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Pohledy na pole</h2>

<pre>
let array = Array::from_iter(0..12);
let view = array.view();
&nbsp;
println!("length:     {}", array.len());
println!("dimensions: {}", array.ndim());
println!("dimension:  {:?}", array.dim());
println!("shape:      {:?}", array.shape());
println!("strides:    {:?}\n", array.strides());
&nbsp;
println!("length:     {}", view.len());
println!("dimensions: {}", view.ndim());
println!("dimension:  {:?}", view.dim());
println!("shape:      {:?}", view.shape());
println!("strides:    {:?}\n", view.strides());
</pre>

<pre>
length:     12
dimensions: 1
dimension:  12
shape:      [12]
strides:    [1]

length:     12
dimensions: 1
dimension:  12
shape:      [12]
strides:    [1]
</pre>

<pre>
let mut array = Array2::<i32>::zeros((3,3));
&nbsp;
println!("array:\n{}", array);
&nbsp;
{
    let mut view = array.view_mut();
    view[[1,1]] = 42;
}
&nbsp;
println!("array:\n{}", array);
</pre>

array:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
array:
[[0, 0, 0],
 [0, 42, 0],
 [0, 0, 0]]


<p><a name="k14"></a></p>
<h2 id="k14">14. Řezy polí</h2>

let array = Array::from_iter(0..12);
&nbsp;
let slice = array.slice(s![3..8]);
&nbsp;
let slice2 = array.slice(s![..8]);
&nbsp;
let slice3 = array.slice(s![3..]);
&nbsp;
let slice4 = array.slice(s![..]);

[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
[3, 4, 5, 6, 7]
[0, 1, 2, 3, 4, 5, 6, 7]
[3, 4, 5, 6, 7, 8, 9, 10, 11]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]


let array = Array::from_iter(0..12).into_shape((3,4)).unwrap();
&nbsp;
let slice = array.slice(s![.., 1..3]);
&nbsp;
let slice2 = array.slice(s![1..2, 3..4]);
&nbsp;
let slice3 = array.slice(s![1.., 1..]);
&nbsp;
let slice4 = array.slice(s![.., ..]);

[[0, 1, 2, 3],
 [4, 5, 6, 7],
 [8, 9, 10, 11]]

[[1, 2],
 [5, 6],
 [9, 10]]

[[7]]

[[5, 6, 7],
 [9, 10, 11]]
slice:
[[0, 1, 2, 3],
 [4, 5, 6, 7],
 [8, 9, 10, 11]]



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady (Rustovské projekty) byly,
ostatně podobně jako ve všech předchozích částech <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">tohoto seriálu</a>,
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě
bez nutnosti klonovat celý repositář (ovšem u projektů je lepší mít celý
repositář, abyste nemuseli pracně stahovat všechny potřebné soubory):</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>ndarray - dokumentace<br />
<a href="https://bluss.github.io/rust-ndarray/master/ndarray/index.html">https://bluss.github.io/rust-ndarray/master/ndarray/index.html</a>
</li>

<li>ndarray - Crate<br />
<a href="https://crates.io/crates/ndarray">https://crates.io/crates/ndarray</a>
</li>

<li>rustup<br />
<a href="https://www.rustup.rs/">https://www.rustup.rs/</a>
</li>

<li>rustup: the Rust toolchain installer (Git repositář + dokumentace)<br />
<a href="https://github.com/rust-lang-nursery/rustup.rs">https://github.com/rust-lang-nursery/rustup.rs</a>
</li>

<li>The Rust FFI Omnibus<br />
<a href="http://jakegoulding.com/rust-ffi-omnibus/">http://jakegoulding.com/rust-ffi-omnibus/</a>
</li>

<li>Build Script Support<br />
<a href="http://doc.crates.io/build-script.html">http://doc.crates.io/build-script.html</a>
</li>

<li>Calling Rust From Python<br />
<a href="https://bheisler.github.io/post/calling-rust-in-python/">https://bheisler.github.io/post/calling-rust-in-python/</a>
</li>

<li>Calling Rust in Python (komentáře k předchozímu článku)<br />
<a href="https://www.reddit.com/r/rust/comments/63iy5a/calling_rust_in_python/">https://www.reddit.com/r/rust/comments/63iy5a/calling_rust_in_python/</a>
</li>

<li>CFFI Documentation<br />
<a href="https://cffi.readthedocs.io/en/latest/">https://cffi.readthedocs.io/en/latest/</a>
</li>

<li>Build Script Support<br />
<a href="http://doc.crates.io/build-script.html">http://doc.crates.io/build-script.html</a>
</li>

<li>Creating a shared and static library with the gnu compiler [gcc]<br />
<a href="http://www.adp-gmbh.ch/cpp/gcc/create_lib.html">http://www.adp-gmbh.ch/cpp/gcc/create_lib.html</a>
</li>

<li>ctypes — A foreign function library for Python<br />
<a href="https://docs.python.org/2/library/ctypes.html">https://docs.python.org/2/library/ctypes.html</a>
</li>

<li>FFI: Foreign Function Interface<br />
<a href="https://doc.rust-lang.org/book/ffi.html">https://doc.rust-lang.org/book/ffi.html</a>
</li>

<li>Primitive Type pointer<br />
<a href="https://doc.rust-lang.org/std/primitive.pointer.html">https://doc.rust-lang.org/std/primitive.pointer.html</a>
</li>

<li>Cargo: správce projektů a balíčků pro programovací jazyk Rust<br />
<a href="https://mojefedora.cz/cargo-spravce-projektu-a-balicku-pro-programovaci-jazyk-rust/">https://mojefedora.cz/cargo-spravce-projektu-a-balicku-pro-programovaci-jazyk-rust/</a>
</li>

<li>Network Communication and Serialization in Rust<br />
<a href="https://www.safaribooksonline.com/blog/2014/01/28/network-communication-serialization-rust/">https://www.safaribooksonline.com/blog/2014/01/28/network-communication-serialization-rust/</a>
</li>

<li>Crate bincode<br />
<a href="http://tyoverby.com/bincode/bincode/index.html">http://tyoverby.com/bincode/bincode/index.html</a>
</li>

<li>Struct std::fs::File<br />
<a href="https://doc.rust-lang.org/std/fs/struct.File.html">https://doc.rust-lang.org/std/fs/struct.File.html</a>
</li>

<li>Trait std::io::Seek<br />
<a href="https://doc.rust-lang.org/std/io/trait.Seek.html">https://doc.rust-lang.org/std/io/trait.Seek.html</a>
</li>

<li>Trait std::io::Read<br />
<a href="https://doc.rust-lang.org/std/io/trait.Read.html">https://doc.rust-lang.org/std/io/trait.Read.html</a>
</li>

<li>Trait std::io::Write<br />
<a href="https://doc.rust-lang.org/std/io/trait.Write.html">https://doc.rust-lang.org/std/io/trait.Write.html</a>
</li>

<li>Trait std::io::BufRead<br />
<a href="https://doc.rust-lang.org/std/io/trait.BufRead.html">https://doc.rust-lang.org/std/io/trait.BufRead.html</a>
</li>

<li>Module std::io::prelude<br />
<a href="https://doc.rust-lang.org/std/io/prelude/index.html">https://doc.rust-lang.org/std/io/prelude/index.html</a>
</li>

<li>std::net::IpAddr<br />
<a href="https://doc.rust-lang.org/std/net/enum.IpAddr.html">https://doc.rust-lang.org/std/net/enum.IpAddr.html</a>
</li>

<li>std::net::Ipv4Addr<br />
<a href="https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html">https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html</a>
</li>

<li>std::net::Ipv6Addr<br />
<a href="https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html">https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html</a>
</li>

<li>TcpListener<br />
<a href="https://doc.rust-lang.org/std/net/struct.TcpListener.html">https://doc.rust-lang.org/std/net/struct.TcpListener.html</a>
</li>

<li>TcpStream<br />
<a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html">https://doc.rust-lang.org/std/net/struct.TcpStream.html</a>
</li>

<li>Binary heap (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Binary_heap">https://en.wikipedia.org/wiki/Binary_heap</a>
</li>

<li>Binární halda (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Bin%C3%A1rn%C3%AD_halda">https://cs.wikipedia.org/wiki/Bin%C3%A1rn%C3%AD_halda</a>
</li>

<li>Halda (datová struktura)<br />
<a href="https://cs.wikipedia.org/wiki/Halda_%28datov%C3%A1_struktura%29">https://cs.wikipedia.org/wiki/Halda_%28datov%C3%A1_struktura%29</a>
</li>

<li>Struct std::collections::HashSet<br />
<a href="https://doc.rust-lang.org/std/collections/struct.HashSet.html">https://doc.rust-lang.org/std/collections/struct.HashSet.html</a>
</li>

<li>Struct std::collections::BTreeSet<br />
<a href="https://doc.rust-lang.org/std/collections/struct.BTreeSet.html">https://doc.rust-lang.org/std/collections/struct.BTreeSet.html</a>
</li>

<li>Struct std::collections::BinaryHeap<br />
<a href="https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html">https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html</a>
</li>

<li>Set (abstract data type)<br />
<a href="https://en.wikipedia.org/wiki/Set_%28abstract_data_type%29#Language_support">https://en.wikipedia.org/wiki/Set_%28abstract_data_type%29#Language_support</a>
</li>

<li>Associative array<br />
<a href="https://en.wikipedia.org/wiki/Associative_array">https://en.wikipedia.org/wiki/Associative_array</a>
</li>

<li>Hash Table<br />
<a href="https://en.wikipedia.org/wiki/Hash_table">https://en.wikipedia.org/wiki/Hash_table</a>
</li>

<li>B-tree<br />
<a href="https://en.wikipedia.org/wiki/B-tree">https://en.wikipedia.org/wiki/B-tree</a>
</li>

<li>Pedro Celis: Robin Hood Hashing (naskenované PDF!)<br />
<a href="https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf">https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf</a>
</li>

<li>Robin Hood hashing<br />
<a href="http://codecapsule.com/2013/11/11/robin-hood-hashing/">http://codecapsule.com/2013/11/11/robin-hood-hashing/</a>
</li>

<li>Robin Hood hashing: backward shift deletion<br />
<a href="http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/">http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/</a>
</li>

<li>Module std::collections<br />
<a href="https://doc.rust-lang.org/std/collections/">https://doc.rust-lang.org/std/collections/</a>
</li>

<li>Module std::vec<br />
<a href="https://doc.rust-lang.org/nightly/std/vec/index.html">https://doc.rust-lang.org/nightly/std/vec/index.html</a>
</li>

<li>Struct std::collections::VecDeque<br />
<a href="https://doc.rust-lang.org/std/collections/struct.VecDeque.html">https://doc.rust-lang.org/std/collections/struct.VecDeque.html</a>
</li>

<li>Struct std::collections::LinkedList<br />
<a href="https://doc.rust-lang.org/std/collections/struct.LinkedList.html">https://doc.rust-lang.org/std/collections/struct.LinkedList.html</a>
</li>

<li>Module std::fmt<br />
<a href="https://doc.rust-lang.org/std/fmt/">https://doc.rust-lang.org/std/fmt/</a>
</li>

<li>Macro std::println<br />
<a href="https://doc.rust-lang.org/std/macro.println.html">https://doc.rust-lang.org/std/macro.println.html</a>
</li>

<li>Enum std::result::Result<br />
<a href="https://doc.rust-lang.org/std/result/enum.Result.html">https://doc.rust-lang.org/std/result/enum.Result.html</a>
</li>

<li>Module std::result<br />
<a href="https://doc.rust-lang.org/std/result/">https://doc.rust-lang.org/std/result/</a>
</li>

<li>Result<br />
<a href="http://rustbyexample.com/std/result.html">http://rustbyexample.com/std/result.html</a>
</li>

<li>Rust stdlib: Option<br />
<a href="https://doc.rust-lang.org/std/option/enum.Option.html">https://doc.rust-lang.org/std/option/enum.Option.html</a>
</li>

<li>Module std::option<br />
<a href="https://doc.rust-lang.org/std/option/index.html">https://doc.rust-lang.org/std/option/index.html</a>
</li>

<li>Rust by example: option<br />
<a href="http://rustbyexample.com/std/option.html">http://rustbyexample.com/std/option.html</a>
</li>

<li>Rust by example: if-let<br />
<a href="http://rustbyexample.com/flow_control/if_let.html">http://rustbyexample.com/flow_control/if_let.html</a>
</li>

<li>Rust by example: while let<br />
<a href="http://rustbyexample.com/flow_control/while_let.html">http://rustbyexample.com/flow_control/while_let.html</a>
</li>

<li>Rust by example: Option&lt;i32&gt;<br />
<a href="http://rustbyexample.com/std/option.html">http://rustbyexample.com/std/option.html</a>
</li>

<li>An Overview of Macros in Rust<br />
<a href="http://words.steveklabnik.com/an-overview-of-macros-in-rust">http://words.steveklabnik.com/an-overview-of-macros-in-rust</a>
</li>

<li>A Practical Intro to Macros in Rust 1.0<br />
<a href="https://danielkeep.github.io/practical-intro-to-macros.html">https://danielkeep.github.io/practical-intro-to-macros.html</a>
</li>

<li>The Rust Programming Language: macros<br />
<a href="https://doc.rust-lang.org/beta/book/macros.html">https://doc.rust-lang.org/beta/book/macros.html</a>
</li>

<li>Rust by example: 15 macro_rules!<br />
<a href="http://rustbyexample.com/macros.html">http://rustbyexample.com/macros.html</a>
</li>

<li>Primitive Type isize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">https://doc.rust-lang.org/nightly/std/primitive.isize.html</a>
</li>

<li>Primitive Type usize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">https://doc.rust-lang.org/nightly/std/primitive.usize.html</a>
</li>

<li>Primitive Type array<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.array.html">https://doc.rust-lang.org/nightly/std/primitive.array.html</a>
</li>

<li>Module std::slice<br />
<a href="https://doc.rust-lang.org/nightly/std/slice/">https://doc.rust-lang.org/nightly/std/slice/</a>
</li>

<li>Rust by Example: 2.3 Arrays and Slices<br />
<a href="http://rustbyexample.com/primitives/array.html">http://rustbyexample.com/primitives/array.html</a>
</li>

<li>What is the difference between Slice and Array (stackoverflow)<br />
<a href="http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array">http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array</a>
</li>

<li>Learning Rust With Entirely Too Many Linked Lists<br />
<a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/">http://cglab.ca/~abeinges/blah/too-many-lists/book/</a>
</li>

<li>Testcase: linked list<br />
<a href="http://rustbyexample.com/custom_types/enum/testcase_linked_list.html">http://rustbyexample.com/custom_types/enum/testcase_linked_list.html</a>
</li>

<li>Operators and Overloading<br />
<a href="https://doc.rust-lang.org/book/operators-and-overloading.html">https://doc.rust-lang.org/book/operators-and-overloading.html</a>
</li>

<li>Module std::ops<br />
<a href="https://doc.rust-lang.org/std/ops/index.html">https://doc.rust-lang.org/std/ops/index.html</a>
</li>

<li>Module std::cmp<br />
<a href="https://doc.rust-lang.org/std/cmp/index.html">https://doc.rust-lang.org/std/cmp/index.html</a>
</li>

<li>Trait std::ops::Add<br />
<a href="https://doc.rust-lang.org/stable/std/ops/trait.Add.html">https://doc.rust-lang.org/stable/std/ops/trait.Add.html</a>
</li>

<li>Trait std::ops::AddAssign<br />
<a href="https://doc.rust-lang.org/std/ops/trait.AddAssign.html">https://doc.rust-lang.org/std/ops/trait.AddAssign.html</a>
</li>

<li>Trait std::ops::Drop<br />
<a href="https://doc.rust-lang.org/std/ops/trait.Drop.html">https://doc.rust-lang.org/std/ops/trait.Drop.html</a>
</li>

<li>Trait std::cmp::Eq<br />
<a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">https://doc.rust-lang.org/std/cmp/trait.Eq.html</a>
</li>

<li>Struct std::boxed::Box<br />
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">https://doc.rust-lang.org/std/boxed/struct.Box.html</a>
</li>

<li>Explore the ownership system in Rust<br />
<a href="https://nercury.github.io/rust/guide/2015/01/19/ownership.html">https://nercury.github.io/rust/guide/2015/01/19/ownership.html</a>
</li>

<li>Rust's ownership and move semantic<br/>
<a href="http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics">http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics</a>
</li>

<li>Trait std::marker::Copy<br/>
<a href="https://doc.rust-lang.org/stable/std/marker/trait.Copy.html">https://doc.rust-lang.org/stable/std/marker/trait.Copy.html</a>
</li>

<li>Trait std::clone::Clone<br />
<a href="https://doc.rust-lang.org/stable/std/clone/trait.Clone.html">https://doc.rust-lang.org/stable/std/clone/trait.Clone.html</a>
</li>

<li>The Stack and the Heap<br />
<a href="https://doc.rust-lang.org/book/the-stack-and-the-heap.html">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Why does this compile? Automatic dereferencing?<br />
<a href="https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183">https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183</a>
</li>

<li>Understanding Pointers, Ownership, and Lifetimes in Rust<br />
<a href="http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>

<li>Rust lang series episode #25 — pointers (#rust-series)<br />
<a href="https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series">https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>Destructuring and Pattern Matching<br />
<a href="https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/">https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Method Syntax<br />
<a href="https://doc.rust-lang.org/book/method-syntax.html">https://doc.rust-lang.org/book/method-syntax.html</a>
</li>

<li>Traits in Rust<br />
<a href="https://doc.rust-lang.org/book/traits.html">https://doc.rust-lang.org/book/traits.html</a>
</li>

<li>Functional Programming in Rust - Part 1 : Function Abstraction<br />
<a href="http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/">http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

