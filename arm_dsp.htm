<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Mikroprocesory a mikrořadiče ARM s podporou DSP operací</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Mikroprocesory a mikrořadiče ARM s podporou DSP operací</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Při popisu mikrořadičů a čipů DSP nesmíme zapomenout na to, že v&nbsp;současnosti se v&nbsp;oblasti výkonných 32bitových mikrořadičů stále ve větší míře začínají používat čipy s&nbsp;jádrem ARM. Výrobci kombinují jádra ARM s&nbsp;DSP několika různými způsoby, s&nbsp;nimiž se postupně seznámíme.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Mikroprocesory a mikrořadiče ARM s&nbsp;podporou DSP operací</a></p>
<p><a href="#k02">2. DSP ve funkci mikrořadiče</a></p>
<p><a href="#k03">3. Použití dvojice samostatně pracujících čipů CPU+DSP či MCU+DSP</a></p>
<p><a href="#k04">4. Jádro MCU/CPU kombinované na jednom integrovaném obvodu s&nbsp;DSP</a></p>
<p><a href="#k05">5. Sdílení pamětí mezi CPU/MCU a DSP, společný řadič a instrukční sada</a></p>
<p><a href="#k06">6. Architektura DaVinci</a></p>
<p><a href="#k07">7. Modulární struktura čipů DaVinci</a></p>
<p><a href="#k08">8. Architektura OMAP</a></p>
<p><a href="#k09">9. C6-Integra</a></p>
<p><a href="#k10">10. Výhody a nevýhody předchozích řešení</a></p>
<p><a href="#k11">11. DSP integrovaný přímo do jádra ARM?</a></p>
<p><a href="#k12">12. Architektura Cortex-M</a></p>
<p><a href="#k13">13. Cortex-M4, Cortex-M33 a Cortex-M7</a></p>
<p><a href="#k14">14. Formáty zpracovávaných dat</a></p>
<p><a href="#k15">15. &bdquo;DSP násobička&ldquo; u jader Cortex-M3/M33/M7</a></p>
<p><a href="#k16">16. Aritmetické operace se saturací</a></p>
<p><a href="#k17">17. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Mikroprocesory a mikrořadiče ARM s&nbsp;podporou DSP operací</h2>

<p>V&nbsp;současnosti se v&nbsp;těch aplikacích, v&nbsp;nichž je požadován
vysoký výpočetní výkon, používá několik typů 32bitových mikrořadičů. Jedná se
například o mikrořadiče s&nbsp;architekturou <a
href="https://www.root.cz/clanky/riscova-architektura-powerpc/">PowerPC</a>, <a
href="https://www.root.cz/clanky/mikroprocesory-a-mikroradice-s-instrukcni-sadou-superh-sh/">SuperH</a>,
PIC32, AVR32, <a
href="https://www.root.cz/clanky/mikroradicova-jadra-tricore-kombinace-mcu-dsp-a-riscu/">TriCore</a>
či čipy s&nbsp;jádrem <a
href="https://www.root.cz/clanky/procesory-s-architekturou-risc-v-pracovnich-stanicich-a-serverech/">MIPS</a>.
V&nbsp;tomto seznamu však nesmí chybět dnes velmi populární mikrořadiče ARM
Cortex-M, konkrétně řady <a
href="https://www.root.cz/clanky/architektura-mikroradicu-s-jadry-arm-cortex-m0-a-arm-cortex-m0/">Cortex-M0</a>,
<a
href="https://www.root.cz/clanky/architektura-mikroradicu-s-jadry-arm-cortex-m0-a-arm-cortex-m0/">Cortex-M0+</a>,
<a
href="https://www.root.cz/clanky/architektura-mikroradicu-s-jadry-arm-cortex-m3/">Cortex-M3</a>,
<a
href="https://www.root.cz/clanky/architektura-mikroradicu-s-jadry-arm-cortex-m4/">Cortex-M4</a>,
<a
href="https://www.root.cz/clanky/nejvykonnejsi-mcu-aneb-architektura-mikroradicu-s-jadry-arm-cortex-m7/">Cortex-M7</a>
a nověji též Cortex-M23 a Cortex-M33 (poslední dva typy jsou však staré jen
zhruba půl roku, takže se nestačily rozšířit do té míry, jako jejich starší
kolegové).</p>

<img src="http://i.iinfo.cz/images/51/pc140-5.png" width="249" height="720" alt=" " />
<p><i>Obrázek 1: Řetězec zpracování analogového signálu pomocí DSP. Toto schéma
je poněkud zjednodušené, protože neobsahuje například obvod typu Sample and
Hold (S&amp;H) před A/D převodníkem ani rekonstrukční filtr umístěný za D/A
převodníkem.</i></p>

<p>Jednou z&nbsp;velkých předností řady ARM Cortex-M ale i předchozích
procesorů a řadičů s&nbsp;jádry ARMv7 je fakt, že si firmy mohou zakoupit
licenci na použití mikrořadičového jádra, které následně mohou použít ve svých
vlastních čipech, ať již samostatně (například čipy STM32) či v&nbsp;kombinaci
s&nbsp;digitálním signálovým procesorem, což je dnes poměrně populární volba.
Proč se vlastně kombinuje ARMovské jádro s&nbsp;DSP? Pokud je zapotřebí
v&nbsp;nějaké aplikaci zpracovávat signály (SDR, všudypřítomné video a audio,
Wi-Fi, v&nbsp;budoucnu pravděpodobně Li-Fi atd.), mají konstruktéři
k&nbsp;dispozici několik možností, jak DSP použít.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. DSP ve funkci mikrořadiče</h2>

<p>Digitální signálový procesor je použit ve funkci jediného řídicího prvku
celé aplikace. To znamená, že kromě DSP operací (zpracování signálů) musí tento
čip reagovat na přerušení, řídit připojená zařízení (nebo z&nbsp;nich jen číst
data), většinou musí být vybaven watchdogem atd. Samozřejmě to znamená, že na
čipu s&nbsp;jádrem DSP jsou umístěny i další moduly, typicky paralelní porty,
sériové porty a sběrnice (UART, SPI, I<sup>2</sup>C), A/D a D/A převodníky či
modul pro PWM. Z&nbsp;tohoto důvodu začaly být DSP vybavovány instrukcemi,
které jsou typické pro mikrořadiče (Booleovský procesor). Z&nbsp;hlediska
architektury čipů je toto řešení problematické, zejména ve chvíli, kdy je
použita architektura VLIW, která je pro mnohé DSP typická. Toto řešení ovšem
není ideální ani z&nbsp;dalších důvodů, protože programování DSP (opět typicky
postaveného na architektuře VLIW) bývá složitější, než je tomu u mikrořadičů,
které jsou mnohdy z&nbsp;hlediska programování, ladění atd. doslova
&bdquo;vymazlené&ldquo;. Ostatně už jen fakt, že mnohé DSP nedokážou pracovat
s&nbsp;jednotlivými bajty a tudíž je šířka typu <i>char</i> 16bitů či dokonce
24bitů, dokáže způsobit mnoho starostí.</p>

<img src="https://i.iinfo.cz/images/603/motorola56000-1.png" class="image-279201" alt="&#160;" width="386" height="671" />
<p><i>Obrázek 2: Schéma jádra digitálního signálového procesoru Motorola 56000.
Čtveřice pracovních registrů je zobrazena v&nbsp;horní části a je obarvena
modře. Povšimněte si, jak jsou registry propojeny se sběrnicemi (obousměrně) i
s&nbsp;násobičkou (jednosměrně). Čísla značí bitovou šířku dat. Tato
specializace DSP na zpracování signálu je v&nbsp;rozporu s&nbsp;použitím těchto
čipů pro řízení (tam zase excelují interně zcela odlišné mikrořadiče).</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Použití dvojice samostatně pracujících čipů CPU+DSP či MCU+DSP</h2>

<p>V&nbsp;implementovaném zařízení může být alternativně použita dvojice
samostatných čipů CPU+DSP, popř.&nbsp;častěji MCU+DSP. Tímto způsobem bývaly
často provozovány například první digitální signálové procesory ze série
TMS32010 společnosti Texas Instruments. Nevýhodou je nutnost komunikace těchto
dvou čipů přes externí sběrnici, složitější organizace pamětí (RAM, Flash),
samozřejmě vyšší cena celého zařízení a v&nbsp;neposlední řadě i vyšší
poruchovost, která roste (a to nelineárně) s&nbsp;počtem použitých
integrovaných obvodů. V&nbsp;oblasti čipů firmy Texas Instruments se nabízí
kombinace MSP430+TMS320xxx, což je téma podrobně popsané v&nbsp;článku <a
href="http://www.ti.com/lit/an/slla174/slla174.pdf">Interfacing the MSP430 with
a DSP Application</a>. Dnes se již toto řešení prakticky vůbec nepoužívá
(alespoň u nově navrhovaných zařízení), protože jsou k&nbsp;dispozici
jednočipové varianty zmíněné v&nbsp;dalších kapitolách.</p>

<img src="https://i.iinfo.cz/images/257/tms320-1.png" class="image-275138" alt="&#160;" width="550" height="806" />
<p><i>Obrázek 3: Interní struktura nejdůležitější části digitálního signálového
procesoru TMS320, v&nbsp;níž se provádí všechny výpočty.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Jádro MCU/CPU kombinované na jednom integrovaném obvodu s&nbsp;DSP</h2>

<p>Při použití tohoto řešení je sice dvojice CPU+DSP či MCU+DSP umístěna na
jednom čipu, ale ve skutečnosti se jedná o dva samostatně pracující moduly,
které spolu komunikují po interní sběrnici. Toto řešení sice může vypadat
komplikovaně, ale ve skutečnosti nemusí být pro některé aplikace špatné,
protože umožňuje, aby každé procesové jádro pracovalo paralelně a do značné
míry nezávisle na jádru druhém, což je kritické zejména pro DSP postavené na
architektuře VLIW (to mj.&nbsp;znamená i většinu sérií DSP firmy Texas
Instruments). Typicky se při použití tohoto řešení programuje jen CPU/MCU,
zatímco pro zpracování signálů se volají již odladěné a optimalizované knihovny
dodávané výrobcem DSP nebo nějakou třetí stranou. Příklady použití jsou uvedeny
dále &ndash; jsou jimi architektury DaVinci i OMAP, ale samozřejmě nesmíme
zapomenout ani na architekturu <i>TriCore</i> (Infineon) atd.</p>

<a href="https://www.root.cz/obrazek/277897/"><img src="https://i.iinfo.cz/images/610/tms320-3-1-prev.png" class="image-277897" alt="&#160;" width="370" height="192" /></a>
<p><i>Obrázek 4: Zjednodušené schéma interní struktury čipu TMS320C54x.
V&nbsp;horní části se nachází systém interních datových a adresových sběrnic,
který byl pro zjednodušení vynechán; zobrazeny jsou jen výkonné jednotky a
způsob jejich propojení.<br />Zdroj: TMS320C54x, TMS320LC54x, TMS320VC54x
FIXED-POINT DIGITAL SIGNAL PROCESSORS, Texas Instrumens.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Sdílení pamětí mezi CPU/MCU a DSP, společný řadič a instrukční sada</h2>

<p>Integrace CPU+DSP nebo MCU+DSP může jít ještě dále, protože oba procesory
spolu mohou sdílet i paměti. Zde již záleží na míře integrace, tj.&nbsp;zda
bude DSP řízen vlastní instrukční sadou a bude tedy relativně stále samostatně
pracující, či zda se již bude jednat o sadu jedinou, v&nbsp;níž se bude
instrukce mezi jednotlivé procesory rozdělovat v&nbsp;instrukční pipeline či ve
fázi &bdquo;decode&ldquo;.</p>

<p>Dalším (logickým) krokem je přidání DSP násobičky popř.&nbsp;dalších
důležitých modulů (speciální adresování operandů, ALU se saturací výsledků,
...) přímo do CPU/MCU. Toto řešení sice při zachování stejné taktovací
frekvence nedosahuje takového výpočetního výkonu, jakého může dosahovat
specializovaný DSP (ideálně s&nbsp;VLIW), ale pro mnoho aplikací a nyní i pro
mnoho výrobců čipů se jedná o populární volbu, zejména ve chvíli, kdy toto
&bdquo;DSP Extension&ldquo; začaly podporovat některé čipy Cortex-M a taktéž
Cortex-R (těmito čipy jsme se v&nbsp;tomto seriálu prozatím nezabývali).
Největší předností takto pojaté integrace je jednotná instrukční sada, jediná
množina vývojových a ladicích nástrojů atd.</p>

<p><a href="https://i.iinfo.cz/images/140/arm-dsp-1.png"><img src="https://i.iinfo.cz/images/140/arm-dsp-1-prev.png" class="image-290823" alt="&#160;" width="370" height="191" /></a></p>
<p><i>Obrázek 5: Integrace DSP a jádra ARM. Povšimněte si, že každý z&nbsp;čipů
má samostatnou L1 cache, ovšem hlavní paměť je sdílená přes interní sběrnici
SCR.<br />
Zdroj: stránky společnosti Texas Instruments.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Architektura DaVinci</h2>

<p>V&nbsp;roce 2005 byly společností Texas Instruments představeny čipy DaVinci
určené především pro zpracování videa a použitelné v&nbsp;různých aplikacích,
v&nbsp;nichž se používají kamery a je nutné zpracovávat
(popř.&nbsp;rozpoznávat) obrazy jimi získávané. První čipy DaVinci kombinovaly
na jednom čipu jádro ARM9 a digitální signálový procesor řady C64x (přesněji
TMS320C64x). Jednalo se o jednu z&nbsp;prvních úspěšných kombinací relativně
výkonného procesorového jádra s&nbsp;digitálním signálovým procesorem a
s&nbsp;dalšími moduly specializovanými na zpracování videa. Některé pozdější
čipy DaVinci kombinaci CPU+DSP opustily, protože nemají DSP a další naopak
neobsahují jádro ARM. Nicméně i tyto čipy stále patří do stejné řady, a to díky
tomu, že obsahují další koprocesory a moduly používané při zpracování a
zobrazování videa, zejména VENC (<i>Video Encoder</i>), VICP (<i>Video Imaging
Coprocessor</i>), OSD (<i>On-Screen Display</i>) atd.</p>

<p>V&nbsp;tabulce zobrazené pod tímto odstavcem je vypsána většina dříve
oficiálně prodávaných čipů DaVinci (další čipy jsou pravděpodobně vyráběny jen
pro jednoho odběratele):</p>

<table>
<tr><th>Čip</th><th>Jádro ARM</th><th>Jádro DSP</th><th>OSD</th><th>VENC</th><th>HDVPSS</th></tr>
<tr><td>DM6446</td><td>ARM9</td><td>TMS320C64x</td><td>&#x2713;</td><td>&#x2713;</td><td>&times; </td></tr>
<tr><td>DM6437</td><td>ARM9</td><td>TMS320C64x</td><td>&#x2713;</td><td>&#x2713;</td><td>&times; </td></tr>
<tr><td>DM6441</td><td>ARM9</td><td>TMS320C64x</td><td>&#x2713;</td><td>&#x2713;</td><td>&times; </td></tr>
<tr><td>DM648 </td><td>&nbsp;</td><td>TMS320C64x</td><td>&times; </td><td>&times; </td><td>&times; </td></tr>
<tr><td>DM355 </td><td>ARM9</td><td>&nbsp;</td><td>&#x2713;</td><td>&#x2713;</td><td>&times; </td></tr>
<tr><td>DM6467</td><td>ARM9</td><td>TMS320C64x</td><td>&times; </td><td>&times; </td><td>&times; </td></tr>
<tr><td>DM335 </td><td>ARM9</td><td>&nbsp;</td><td>&times; </td><td>&times; </td><td>&times; </td></tr>
<tr><td>DM357 </td><td>ARM9</td><td>&nbsp;</td><td>&times; </td><td>&times; </td><td>&times; </td></tr>
<tr><td>DMVA2 </td><td>ARM9</td><td>&nbsp;</td><td>&#x2713;</td><td>&#x2713;</td><td>&times; </td></tr>
<tr><td>DM8107</td><td>Cortex-A8</td><td>&nbsp;</td><td>&times; </td><td>&times; </td><td>&#x2713;</td></tr>
<tr><td>DMVA3 </td><td>Cortex-A8</td><td>&nbsp;</td><td>&times; </td><td>&times; </td><td>&#x2713;</td></tr>
</table>

<p>Následující řady čipů rodiny DM jsou nabízeny v&nbsp;současnosti. Povšimněte
si, že čipy jsou rozděleny do pěti skupin: DM36x, DM38x, DM812x, DM814x a
DM816x. V&nbsp;každé skupině se nachází čipy se stejným ARMovským jádrem,
stejným DSP (pokud je použit) i podobnými subsystémy.</p>

<table>
<tr><th>Čip</th><th>Jádro ARM</th><th>Jádro DSP</th><th>OSD</th><th>VENC</th><th>HDVPSS</th></tr>
<tr><td>DM365 </td><td>ARM9</td><td>&nbsp;</td><td>&#x2713;</td><td>&#x2713;</td><td>&times; </td></tr>
<tr><td>DM368 </td><td>ARM9</td><td>&nbsp;</td><td>&#x2713;</td><td>&#x2713;</td><td>&times; </td></tr>
<tr><td>DM369 </td><td>ARM9</td><td>&nbsp;</td><td>&#x2713;</td><td>&#x2713;</td><td>&times; </td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;  </td><td>&nbsp;  </td><td>&nbsp;  </td></tr>
<tr><td>DM385 </td><td>Cortex-A8</td><td>&nbsp;</td><td>&times; </td><td>&times; </td><td>&#x2713;</td></tr>
<tr><td>DM388 </td><td>Cortex-A8</td><td>&nbsp;</td><td>&times; </td><td>&times; </td><td>&#x2713;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;  </td><td>&nbsp;  </td><td>&nbsp;  </td></tr>
<tr><td>DM8127</td><td>Cortex-A8</td><td>TMS320C64x+</td><td>&times; </td><td>&times; </td><td>&#x2713;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;  </td><td>&nbsp;  </td><td>&nbsp;  </td></tr>
<tr><td>DM8147</td><td>Cortex-A8</td><td>TMS320C64x+</td><td>&times; </td><td>&times; </td><td>&#x2713;</td></tr>
<tr><td>DM8148</td><td>Cortex-A8</td><td>TMS320C64x+</td><td>&times; </td><td>&times; </td><td>&#x2713;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;  </td><td>&nbsp;  </td><td>&nbsp;  </td></tr>
<tr><td>DM8165</td><td>Cortex-A8</td><td>TMS320C64x+</td><td>&times; </td><td>&times; </td><td>&#x2713;</td></tr>
<tr><td>DM8167</td><td>Cortex-A8</td><td>TMS320C64x+</td><td>&times; </td><td>&times; </td><td>&#x2713;</td></tr>
<tr><td>DM8168</td><td>Cortex-A8</td><td>TMS320C64x+</td><td>&times; </td><td>&times; </td><td>&#x2713;</td></tr>
</table>

<p>Poznámka: DM na začátku jména každého čipu znamená zkratku <i>Digital
Media</i>.</p>

<a href="http://www.ti.com/general/docs/datasheetdiagram.tsp?genericPartNumber=AM5718&diagramId=59005">Řada Sitara: některé kombinace DSP a jader ARM s&nbsp;GPU.</a>



<p><a name="k07"></a></p>
<h2 id="k07">7. Modulární struktura čipů DaVinci</h2>

<p>Na schématu zobrazeném pod tímto odstavcem jsem se pokusil načrtnout
modulární uspořádání čipů DaVinci:</p>

<a href="https://www.root.cz/obrazek/278461/"><img src="https://i.iinfo.cz/images/138/davinci-1-prev.png" class="image-278461" alt="&#160;" width="370" height="204" /></a>
<p><i>Obrázek 5: Modulární struktura čipů DaVinci.</i></p>

<p>Všechny základní moduly jsou propojeny přes <strong>SCR</strong> neboli
<i>Switched Central Resource</i> zajišťující plynulé toky dat. Nejedná se tedy
o klasickou sběrnici, o níž by jednotlivé moduly musely &bdquo;bojovat&ldquo;,
což by ostatně odporovalo požadavku na zpracování video signálu v&nbsp;reálném
čase. K&nbsp;<strong>SCR</strong> je připojen modul s&nbsp;mikroprocesorovým
jádrem ARM a svým vlastním paměťovým subsystémem, modul s&nbsp;digitálním
signálovým procesorem a taktéž svým vlastním paměťovým subsystémem, modul pro
řízení periferních zařízení (včetně sériových sběrnic a rozhraní, PWM, časovači
a watchdogem) a v&nbsp;neposlední řadě taktéž blok nazvaný
<strong>VPSS</strong> neboli <i>Video Processing Subsystem</i>, který je
rozdělen na front end (zpracování vstupního video signálu, změna rozlišení,
deinterlace) a back end (OSD+generování výstupního video signálu). U některých
čipů je navíc přítomen i <strong>VICP</strong> neboli <i>Video-Imaging
Coprocessor</i> popř.&nbsp;i GPIO, tedy vstupně-výstupní piny, které je možné
programově ovládat.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Architektura OMAP</h2>

<p>Architektura OMAP je založena na kombinaci výkonných digitálních signálových
procesorů řady TMS320C55x, TMC320C64x a TMS320C64x+ s&nbsp;jádry ARM.
V&nbsp;rámci této série jsou vyráběny čipy určené především pro mobilní
aplikace: od sluchátek s&nbsp;Bluetooth přes Google Glass k&nbsp;tabletům.
Většina čipů OMAP obsahuje kombinaci digitálního signálového procesoru
s&nbsp;jádrem ARM, ovšem od OMAP 3 jsou k&nbsp;této dvojici modulů přidány i
GPU (buď jeden či dokonce více GPU). Nejvýkonnější jsou čipy ze série OMAP 5
představené v&nbsp;roce 2013, které kromě výkonného DSP TMS320C64x+ (Tesla)
obsahují i dvoujádrový Cortex-A15, další ARM jádro Cortex-M, grafický
akcelerátor a navíc ještě další specializovaný modul určený pro operace typu
BitBlt, tedy pro rychlé vykreslování, přesun a zpracování rastrových
obrázků:</p>

<table>
<tr><th>Série OMAP</th><th>Označení</th><th>DSP</th><th>Jádro ARM</th></tr>
<tr><td>OMAP 1</td><td>OMAP171x</td><td>TMS320C55x</td><td>ARM926EJ-S</td></tr>
<tr><td>OMAP 1</td><td>OMAP162x</td><td>TMS320C55x</td><td>ARM926EJ-S</td></tr>
<tr><td>OMAP 1</td><td>OMAP5912</td><td>TMS320C55x</td><td>ARM926EJ-S</td></tr>
<tr><td>OMAP 1</td><td>OMAP161x</td><td>TMS320C55x</td><td>ARM926EJ-S</td></tr>
<tr><td>OMAP 1</td><td>OMAP1510</td><td>TMS320C55x</td><td>ARM925T</td></tr>
<tr><td>OMAP 1</td><td>OMAP5910</td><td>TMS320C55x</td><td>ARM925T</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>OMAP 2</td><td>OMAP2431</td><td>TMS320C64x</td><td>ARM1136</td></tr>
<tr><td>OMAP 2</td><td>OMAP2430</td><td>TMS320C64x</td><td>ARM1136</td></tr>
<tr><td>OMAP 2</td><td>OMAP2420</td><td>TMS320C55x</td><td>ARM1136</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>OMAP 3</td><td>OMAP3430</td><td>TMS320C64x+</td><td>Cortex-A8 + GPU</td></tr>
<tr><td>OMAP 3</td><td>OMAP3530</td><td>TMS320C64x+</td><td>Cortex-A8 + GPU</td></tr>
<tr><td>OMAP 3</td><td>OMAP3611</td><td>TMS320C64x+</td><td>Cortex-A8 + GPU</td></tr>
<tr><td>OMAP 3</td><td>OMAP3621</td><td>TMS320C64x+</td><td>Cortex-A8 + GPU</td></tr>
<tr><td>OMAP 3</td><td>OMAP3622</td><td>TMS320C64x+</td><td>Cortex-A8 + GPU</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>OMAP 4</td><td>OMAP4430</td><td>TMS320C64x+ (Tesla)</td><td>Cortex-A9 popř.&nbsp;ARMv7 + GPU</td></tr>
<tr><td>OMAP 4</td><td>OMAP4460</td><td>TMS320C64x+ (Tesla)</td><td>Cortex-A9 popř.&nbsp;ARMv7 + GPU</td></tr>
<tr><td>OMAP 4</td><td>OMAP4470</td><td>TMS320C64x+ (Tesla)</td><td>Cortex-A9 popř.&nbsp;ARMv7 + GPU</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>OMAP 5</td><td>OMAP5430</td><td>TMS320C64x+ (Tesla)</td><td>Cortex-A15 (dual core) + Cortex-M4 + GPU</td></tr>
<tr><td>OMAP 5</td><td>OMAP5432</td><td>TMS320C64x+ (Tesla)</td><td>Cortex-A15 (dual core) + Cortex-M4 + GPU</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. C6-Integra</h2>

<p>Další kombinace digitálního signálového procesoru a jádra ARM představují
čipy C6-Integra určené pro zpracování signálů v&nbsp;reálném čase, přičemž
podle možností DSP je možné zpracovávat jak data uložená ve formátu
s&nbsp;pevnou řádovou čárkou, tak i data s&nbsp;čárkou plovoucí. Technicky tyto
čipy spadají do kategorie OMAP (OMAP-L):</p>

<table>
<tr><th>Označení</th><th>DSP</th><th>Jádro ARM</th></tr>
<tr><td>OMAP-L133</td><td>TMS320C674x</td><td>ARM926EJ-S</td></tr>
<tr><td>OMAP-L137</td><td>TMS320C674x</td><td>ARM926EJ-S</td></tr>
<tr><td>OMAP-L138</td><td>TMS320C674x</td><td>ARM926EJ-S</td></tr>
<tr><td>C6A816x</td><td>TMS320C674x</td><td>Cortex-A8</td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Výhody a nevýhody předchozích řešení</h2>

<p>Tím, že v&nbsp;předchozích čipech pracuje DSP do značné míry nezávisle na
ARMovském jádru (někdy má dokonce i jinou hodinovou frekvenci), je umožněno
optimální využití všech možností, které digitální signálový procesor nabízí,
tj.&nbsp;paralelní zpracování operandů, práce s&nbsp;akumulátory o větší bitové
šířce, než jakou bude mít výsledný operand (nedochází ke ztrátě informace při
výpočtu mezivýsledků), použití Q-formátu (pevná řádová čárka), použití
speciální adresovacích režimů (FFT, číslicové filtry) a v&nbsp;neposlední řadě
mohou programátoři využít již hotové knihovny, které jsou optimalizované a
otestované (překlad pro DSP je stále ještě problematický). Je pravděpodobné, že
v&nbsp;mnoha aplikacích je DSP řízen jen s&nbsp;využitím převzatých knihoven.
Ovšem to je současně i jedna z&nbsp;největších nevýhod tohoto řešení, protože
pokud je zapotřebí použít vlastní DSP algoritmy, musí se programátor zabývat
programování dvou zcela odlišných jader, způsobům komunikace mezi těmito jádry
atd.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. DSP integrovaný přímo do jádra ARM?</h2>

<p>Alternativou pro některé aplikace (řekněme si rovnou, že pro aplikace
s&nbsp;menšími výpočetními nároky) může být jádro ARM implementující DSP
operace. Teorie tohoto řešení je jednoduchá &ndash; mějme klasické ARMovské
jádro, které má nepatrně upravenou ALU umožňující výpočty se saturací a které
je vybaveno rychlou násobičkou (dokončení výpočtu v&nbsp;každém taktu). Pokud
rozšíříme instrukční sadu o nové &bdquo;DSP operace&ldquo;, dostaneme čip,
který je hybridem mezi MCU/CPU a DSP, navíc bude možné využít již stávající
nástroje (překladače, debuggery, ...), knihovny atd. Na druhou stranu však
zdaleka nebudou k&nbsp;dispozici všechny vlastnosti zmíněné v&nbsp;předchozí
kapitole &ndash; týká se to adresovacích režimů, Q-formátu, akumulátorů atd.
Taktéž můžeme zapomenout na použití VLIW a tím pádem paralelizace na úrovni
instrukční sady. DSP rozšíření je v&nbsp;oblasti ARM relativně nové a nalezneme
ho například u čipů Cortex-M4, Cortex-M7, Cortex-M33 a řady Cortex-R.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Architektura Cortex-M</h2>

<p>Mikrořadičová jádra Cortex-M ve skutečnosti tvoří poměrně rozsáhlou skupinu
s&nbsp;rozdílnými vlastnostmi jednotlivých modelů. Menší jádra používají
starší, ale stále oblíbenou architekturu ARMv6-M, zatímco ta nejvýkonnější
jádra přešla na novější architekturu ARMv7E-M. Na pomezí pak stojí jádra
<i>Cortex-M3</i> s&nbsp;architekturou ARMv7-M, naopak <i>Cortex-M33</i> má
architekturu ARMv8-M:</p>

<table>
<tr><th>#</th><th>Jádro (řada)</th><th>Architektura ARM</th><th>Architektura CPU/MCU</th></tr>
<tr><td>1</td><td>Cortex-M0 </td><td>ARMv6-M</td><td>Von Neumannova</td></tr>
<tr><td>2</td><td>Cortex-M0+</td><td>ARMv6-M</td><td>Von Neumannova</td></tr>
<tr><td>3</td><td>Cortex-M1 </td><td>ARMv6-M</td><td>Von Neumannova</td></tr>
<tr><td>4</td><td>Cortex-M3 </td><td>ARMv7-M</td><td>Harvardská</td></tr>
<tr><td>5</td><td>Cortex-M4 </td><td>ARMv7E-M</td><td>Harvardská</td></tr>
<tr><td>6</td><td>Cortex-M7 </td><td>ARMv7E-M</td><td>Harvardská</td></tr>
<tr><td>7</td><td>Cortex-M23</td><td>ARMv8-M</td><td>Harvardská</td></tr>
<tr><td>8</td><td>Cortex-M33</td><td>ARMv8-M</td><td>Harvardská</td></tr>
</table>
 
<p>Při pohledu na druhou tabulku se dozvíme, kolik řezů mají pipeline
v&nbsp;jednotlivých jádrech a taktéž kolik vstupů přerušení je možné maximálně
obsloužit. Na tomto místě stojí za připomenutí, že větší počet řezů
v&nbsp;RISCových procesorech na jednu stranu může zvýšit jejich výpočetní výkon
(zvětšení frekvence), na stranu druhou však zvětšuje plochu samotného CPU,
reakce na přerušení se musí řešit složitějším způsobem (u některých čipů
dosahuje latence reakce na přerušení až 12 cyklů) a taktéž se při špatné
predikci skoků může zhoršit celkový výkon. U jader <i>Cortex-M</i> je patrné,
že se designéři snažili o vybalancování všech veličin a vlastností (právě
z&nbsp;tohoto důvodu se například dnes namísto papírově výkonnějších jader
<i>Cortex-M0</i> používají jádra <i>Cortex-M0+</i> s&nbsp;jednodušší strukturou
pipeline):</p>

<table>
<tr><th>#</th><th>Jádro     </th><th>Pipeline</th><th>Přerušení</th></tr>
<tr><td>1</td><td>Cortex-M0 </td><td>3 řezy</td><td>1-32 + NMI</td></tr>
<tr><td>2</td><td>Cortex-M0+</td><td>2 řezy</td><td>1-32 + NMI</td></tr>
<tr><td>3</td><td>Cortex-M1 </td><td>3 řezy</td><td>1-32 + NMI</td></tr>
<tr><td>4</td><td>Cortex-M23</td><td>2 řezy</td><td>1-32 + NMI</td></tr>
<tr><td>5</td><td>Cortex-M3 </td><td>3 řezy</td><td>1-240 + NMI</td></tr>
<tr><td>6</td><td>Cortex-M33</td><td>3 řezy</td><td>1-240 + NMI</td></tr>
<tr><td>7</td><td>Cortex-M4 </td><td>3 řezy</td><td>1-240 + NMI</td></tr>
<tr><td>8</td><td>Cortex-M7 </td><td>6 řezů</td><td>1-240 + NMI</td></tr>
</table>
 
<p>Ve třetí tabulce jsou shrnuty vlastnosti instrukčních sad, které si sice
jsou v&nbsp;některých ohledech velmi podobné (například absencí původních
32bitových &bdquo;RISCových&ldquo; instrukcí ARM), ovšem je patrné, že některé
vlastnosti jsou dostupné až u větších, výkonnějších a nutno říci, že taktéž
energeticky náročnějších jader:</p>

<table>
<tr><th>#</th><th>Jádro     </th><th>Instrukční sada</th><th>HW násobička</th><th>HW dělička</th><th>Sat.ADD/SUB</th><th>DSP</th><th>FPU</th></tr>
<tr><td>1</td><td>Cortex-M0 </td><td>Thumb</td><td>32bit</td><td>ne</td><td>ne</td><td>ne</td><td>ne</td></tr>
<tr><td>2</td><td>Cortex-M0+</td><td>Thumb</td><td>32bit</td><td>ne</td><td>ne</td><td>ne</td><td>ne</td></tr>
<tr><td>3</td><td>Cortex-M1 </td><td>Thumb</td><td>32bit</td><td>ne</td><td>ne</td><td>ne</td><td>ne</td></tr>
<tr><td>4</td><td>Cortex-M23</td><td>Thumb</td><td>32bit</td><td>ano (17 cyklů)</td><td>ne</td><td>ne</td><td>ne</td></tr>
<tr><td>5</td><td>Cortex-M3 </td><td>Thumb+Thumb2</td><td>32/64bit</td><td>ano</td><td>ano</td><td>ne </td><td>ne </td></tr>
<tr><td>6</td><td>Cortex-M33</td><td>Thumb+Thumb2</td><td>32/64bit</td><td>ano (17 cyklů)</td><td>ano</td><td>opt</td><td>ano</td></tr>
<tr><td>7</td><td>Cortex-M4 </td><td>Thumb+Thumb2</td><td>32/64bit</td><td>ano</td><td>ano</td><td>ano</td><td>opt</td></tr>
<tr><td>8</td><td>Cortex-M7 </td><td>Thumb+Thumb2</td><td>32/64bit</td><td>ano</td><td>ano</td><td>ano</td><td>opt</td></tr>
</table>
 
<p>Poznámky k&nbsp;předchozí tabulce:</p>

<ul>
<li>Jádra Cortex-M0/M0+/M1 obsahují většinu instrukcí Thumb kromě trojice
instrukcí <strong>CBZ</strong>, <strong>CBNZ</strong> a prefixu
<strong>IT</strong>. Taktéž obsahují šest vybraných instrukcí ze sady
Thumb-2.</li>
<li>Ve sloupci &bdquo;HW násobička&ldquo; je napsáno, zda je výsledek násobení
dvou 32bitových čísel taktéž 32bitový (spodní polovina výsledku) či 64bitový. U
některých čipů lze zvolit, zda je násobička sériová (pomalý výpočet, malá
plocha čipu, malá spotřeba) či paralelní (rychlý výpočet, ovšem na úkor větší
plochy čipy a taktéž vyšší spotřeby).</li>
</ul>



<p><a name="k13"></a></p>
<h2 id="k13">13. Cortex-M4, Cortex-M33 a Cortex-M7</h2>

<p>Z&nbsp;poslední tabulky uvedené <a href="#k12">v&nbsp;předchozí kapitole</a>
vyplývá, že DSP instrukce nalezneme jen u čipů Cortex-M4 a Cortex-M7, zatímco u
nových čipů Cortex-M33 je DSP volitelným modulem, který může ale nemusí být na
konkrétním čipu syntetizován. Proto se v&nbsp;dalších kapitolách soustředíme
pouze na tato tři jádra.</p>

<p>Mikroprocesory a mikrořadiče s&nbsp;jádry <i>Cortex-M4</i> jsou určeny pro
ty aplikační oblasti, v&nbsp;nichž je vyžadováno zpracování digitálního signálu
(může se jednat o osmibitové, šestnáctibitové či dokonce o 32bitové vzorky)
popř.&nbsp;práce s&nbsp;daty uloženými v&nbsp;systému plovoucí řádové čárky
(float/single). V&nbsp;těchto oblastech totiž již možnosti menších jader
<i>Cortex-M3</i> a řada <i>Cortex-M4</i> je první výkonnější řadou mikrořadičů
ARM, kterou lze v&nbsp;tomto případě použít.</p>

<p>Pokud je ovšem vyžadováno zpracování numerických hodnot typu double
(tj.&nbsp;čísel s&nbsp;plovoucí řádovou čárkou s&nbsp;takzvanou dvojitou
přesností), je nutné použít čipy s&nbsp;jádrem <i>Cortex-M7</i> nebo se
spokojit se softwarovou implementací všech operací s&nbsp;čísly typu double.
Opět zde tedy můžeme vidět snahu o vybalancování vlastností se spotřebou a
cenou.</p>

<p>Mikrořadiče s&nbsp;jádry <i>Cortex-M33</i> byly představeny před zhruba
sedmi měsíci, takže se jedná o poměrně nové typy čipů. Tyto mikrořadiče jsou
postaveny okolo jádra ARMv8-M a technologie TrustZone zajišťující integritu a
ochranu dat (většinou před zneužitím uživatelem :-) Vlastnosti těchto čipů jsou
konfigurovatelné, takže si lze zvolit například mezi DSP a FPU,
popř.&nbsp;použít oba tyto moduly. Ostatní parametry jsou v&nbsp;mnoha ohledech
podobné čipům <i>Cortex-M4</i> (kupodivu nikoli Cortex-M3), což je ostatně
patrné i z&nbsp;tabulek uvedených v&nbsp;předchozí kapitole. Jedinou operací,
která je oproti Cortex-M4 pomalejší, je operace dělení, která je provedena
v&nbsp;sedmnácti cyklech.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Formáty zpracovávaných dat</h2>

<p>U naprosté většiny DSP operací jsou podporovány tři formáty dat odpovídající
běžně zpracovávaným signálům:</p>

<ol>
<li>Osmibitová čísla se znaménkem nebo bez znaménka.</li>
<li>16bitová čísla se znaménkem nebo bez znaménka.</li>
<li>32bitová čísla se znaménkem nebo bez znaménka.</li>
</ol>

<p>Na tomto místě je důležité si uvědomit, že oproti mnoha jiným digitálním
signálovým procesorům zde nenajdeme například podporu pro 20bitové či 24bitové
akumulátory, jejichž hodnoty se po dokončení celého vypočtu převádí na 16bitové
výsledky. Také zde nenajdeme přímou podporu pro &bdquo;Q-formát&ldquo;,
s&nbsp;nímž jsme se již v&nbsp;tomto seriálu několikrát setkali. Připomeňme si,
že v&nbsp;Q-formátu je většinou nejvyšší bit použit pro uložení znaménka, za
tímto bitem následuje binární čárka (tečka) a poté již bity s&nbsp;váhami 1/2,
1/4, 1/8 atd. Alternativně se v&nbsp;Q-formátu může používat až 8 bitů
s&nbsp;celočíselnými váhami, které zde slouží pro ohlídání případného
přetečení.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. &bdquo;DSP násobička&ldquo; u jader Cortex-M4/M33/M7</h2>

<p>Podobně jako u klasických DSP, i u čipů Cortex-M s&nbsp;DSP instrukcemi je
ústředním prvkem rychlá násobička. Ta podporuje takřka nepřeberné množství
instrukcí pro násobení celočíselných operandů typu <i>signed</i> či
<i>unsigned</i> (se znaménkem, bez znaménka) s&nbsp;tím, že výsledek je buď
32bitová hodnota či hodnota 64bitová. Navíc je možné určit, zda se má výsledek
násobení přičíst k&nbsp;mezivýsledku a provést tak v&nbsp;oblasti digitálního
zpracování signálů velmi užitečnou operaci nazývanou
&bdquo;Multiply&amp;Accumulate&ldquo; (přičemž akumulátor má většinou šířku 32
bitů či 64 bitů, zatímco vstupní operand může být v&nbsp;některých instrukcích
pouze šestnáctibitový). Následuje tabulka se základními operacemi
násobičky:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Operandy</th><th>Výsledek</th><th>Počet cyklů</th><th>Operace</th></tr>
<tr><td> 1</td><td>MUL</td><td>32bit&times;32bit</td><td>32bit</td><td>1</td><td>násobení</td></tr>
<tr><td> 2</td><td>MAL</td><td>32bit&times;32bit</td><td>32bit</td><td>2</td><td>násobení a přičtení výsledku (Multiply and Accumulate)</td></tr>
<tr><td> 3</td><td>MLS</td><td>32bit&times;32bit</td><td>32bit</td><td>2</td><td>násobení a odečtení výsledku (Multiply and Subtract)</td></tr>
<tr><td> 4</td><td>SMULL</td><td>32bit&times;32bit</td><td>64bit</td><td>1</td><td>násobení hodnot se znaménkem</td></tr>
<tr><td> 5</td><td>SMLAL</td><td>32bit&times;32bit</td><td>64bit</td><td>1</td><td>Multiply and Accumulate (se znaménkem)</td></tr>
<tr><td> 6</td><td>UMULL</td><td>32bit&times;32bit</td><td>64bit</td><td>1</td><td>násobení hodnot bez znaménka</td></tr>
<tr><td> 7</td><td>UMLAL</td><td>32bit&times;32bit</td><td>64bit</td><td>1</td><td>Multiply and Accumulate (bez znaménka)</td></tr>
<tr><td> 8</td><td>UMAAL</td><td>32bit&times;32bit+32+32</td><td>64bit</td><td>1</td><td>Multiply and Accumulate long (bez znaménka)</td></tr>
<tr><td> 9</td><td>SMLAD</td><td>16bit&times;16bit</td><td>32bit</td><td>1</td><td>násobení dvouprvkových vektorů</td></tr>
<tr><td>10</td><td>SMLADX</td><td>16bit&times;16bit</td><td>32bit</td><td>1</td><td>násobení dvouprvkových vektorů</td></tr>
</table>

<p>DSP operace (povšimněte si zejména konstantního počtu cyklů pro zahájení či
dokončení operace):</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Počet cyklů</th><th>Operace</th></tr>
<tr><td> 1</td><td>SMLALD</td><td>1</td><td>Signed Multiply Accumulate Long Dual (16bit&times;64bit)</td></tr>
<tr><td> 2</td><td>SMLAWB</td><td>1</td><td>Signed Multiply Accumulate (word by halfword)</td></tr>
<tr><td> 3</td><td>SMLAWT</td><td>1</td><td>Signed Multiply Accumulate (word by halfword)</td></tr>
<tr><td> 4</td><td>SMLSD</td><td>1</td><td>Signed Multiply Subtract Dual</td></tr>
<tr><td> 5</td><td>SMLSLD</td><td>1</td><td>Signed Multiply Subtract Long Dual</td></tr>
<tr><td> 6</td><td>SMMLA</td><td>1</td><td>Signed Most Significant Word Multiply Accumulate</td></tr>
<tr><td> 7</td><td>SMMLS</td><td>1</td><td>Signed Most Significant Word Multiply Subtract</td></tr>
<tr><td> 8</td><td>SMUAD</td><td>1</td><td>Signed Dual Multiply Add</td></tr>
<tr><td> 9</td><td>SMMUL</td><td>1</td><td>Signed Most Significant Word Multiply</td></tr>
<tr><td>10</td><td>SMULWB</td><td>1</td><td>Signed Multiply (word by halfword)</td></tr>
<tr><td>11</td><td>SMMLAR</td><td>1</td><td>32-bit multiply with rounded 32-most-significant-bit accumulate</td></tr>
<tr><td>12</td><td>SMMLSR</td><td>1</td><td>32-bit multiply with rounded 32-most-significant-bit subtract</td></tr>
<tr><td>13</td><td>SMMULR</td><td>1</td><td>32-bit multiply returning rounded 32-most-significant-bits</td></tr>
<tr><td>14</td><td>SMLABB</td><td>1</td><td>Q setting 16-bit signed multiply with 32-bit accumulate, bottom by bottom</td></tr>
<tr><td>15</td><td>SMLABT</td><td>1</td><td>Q setting 16-bit signed multiply with 32-bit accumulate, bottom by top</td></tr>
<tr><td>16</td><td>SMLALBB</td><td>1</td><td>16-bit signed multiply with 64-bit accumulate, bottom by bottom</td></tr>
<tr><td>17</td><td>SMLALBT</td><td>1</td><td>16-bit signed multiply with 64-bit accumulate, bottom by top</td></tr>
<tr><td>18</td><td>SMLALTB</td><td>1</td><td>16-bit signed multiply with 64-bit accumulate, top by bottom</td></tr>
<tr><td>19</td><td>SMLALTT</td><td>1</td><td>16-bit signed multiply with 64-bit accumulate, top by top</td></tr>
<tr><td>20</td><td>SMULBB</td><td>1</td><td>16-bit signed multiply yielding 32-bit result, bottom by bottom</td></tr>
<tr><td>21</td><td>SMULBT</td><td>1</td><td>16-bit signed multiply yielding 32-bit result, bottom by top</td></tr>
<tr><td>22</td><td>SMULTB</td><td>1</td><td>16-bit signed multiply yielding 32-bit result, top by bottom</td></tr>
<tr><td>23</td><td>SMULTT</td><td>1</td><td>16-bit signed multiply yielding 32-bit result, top by bottom</td></tr>
<tr><td>24</td><td>SMULWT</td><td>1</td><td>16-bit by 32-bit signed multiply returning 32-most-significant-bits, top</td></tr>
<tr><td>25</td><td>SMUSD</td><td>1</td><td>Dual 16-bit signed multiply returning difference </td></tr>
<tr><td>26</td><td>SMLATB</td><td>1</td><td>Q setting 16-bit signed multiply with 32-bit accumulate, top by bottom</td></tr>
<tr><td>27</td><td>SMLATT</td><td>1</td><td>Q setting 16-bit signed multiply with 32-bit accumulate, top by top</td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Aritmetické operace se saturací</h2>

<p>Při zpracování signálu se téměř vždy používají aritmetické operace se
saturací, u nichž je zaručeno, že při sčítání či odčítání nikdy nedojde
k&nbsp;přetečení přes maximální či minimální 8bitovou, 16bitovou či 32bitovou
hodnotu (se znaménkem či bez znaménka), ale výpočet se &bdquo;zasekne&ldquo; na
minimální či maximální hodnotě. Na následujících třech obrázcích (už jsme je
v&nbsp;tomto seriálu použili) je naznačeno, jak se liší klasické operace
s&nbsp;přetečením/podtečením a operace se saturací:</p>

<img src="http://i.iinfo.cz/images/51/pc140-11.png" width="256" height="256" alt=" " />
<p><i>Obrázek 6: Zdrojový rastrový obrázek (známá fotografie Lenny), který
tvoří zdroj pro jednoduchý konvoluční (FIR) filtr, jenž zvyšuje hodnoty pixelů
o pevně zadanou konstantu (offset).</i></p>

<img src="http://i.iinfo.cz/images/51/pc140-12.png" width="256" height="256" alt=" " />
<p><i>Obrázek 7: Pokud je pro přičtení offsetu použita operace součtu se
zanedbáním přenosu (carry), tj.&nbsp;když se počítá systémem &bdquo;modulo
N&ldquo;, dochází při překročení maximální hodnoty pixelu (čistě bílá barva)
k&nbsp;jasně viditelným chybám.</i></p>

<img src="http://i.iinfo.cz/images/51/pc140-13.png" width="256" height="256" alt=" " />
<p><i>Obrázek 8: Při použití operace součtu se saturací sice taktéž dojde ke
ztrátě informace (vzniknou oblasti s&nbsp;pixely majícími hodnotu 255), ovšem
viditelná chyba je mnohem menší, než na předchozím obrázku.</i></p>

<p>U popisovaných čipů Cortex-M4, M33 a M7 najdeme tyto instrukce, které
dokážou výsledky saturovat na minimální či maximální hodnotu:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Typ</th><th>Šířka operandů</th><th>Poznámka</th></tr>
<tr><td> 1</td><td>SSAT   </td><td>Signed  </td><td>32 bitů        </td><td>posun operandu před výpočtem</td></tr>
<tr><td> 2</td><td>SSAT16 </td><td>Signed  </td><td>2&times;16 bitů</td><td>posun operandu před výpočtem</td></tr>
<tr><td> 3</td><td>USAT   </td><td>Unsigned</td><td>32 bitů        </td><td>posun operandu před výpočtem</td></tr>
<tr><td> 4</td><td>USAT16 </td><td>Unsigned</td><td>2&times;16 bitů</td><td>posun operandu před výpočtem</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>QADD   </td><td>Signed  </td><td>32 bitů        </td><td>součet se saturací</td></tr>
<tr><td> 6</td><td>QADD8  </td><td>Signed  </td><td>4&times;8 bitů </td><td>součet se saturací</td></tr>
<tr><td> 7</td><td>QADD16 </td><td>Signed  </td><td>2&times;16 bitů</td><td>součet se saturací</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>QSUB   </td><td>Signed  </td><td>32 bitů        </td><td>rozdíl se saturací</td></tr>
<tr><td> 9</td><td>QSUB8  </td><td>Signed  </td><td>4&times;8 bitů </td><td>rozdíl se saturací</td></tr>
<tr><td>10</td><td>QSUB16 </td><td>Signed  </td><td>2&times;16 bitů</td><td>rozdíl se saturací</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>QASX   </td><td>Signed  </td><td>32 bitů        </td><td>add + exchange</td></tr>
<tr><td>12</td><td>QSAX   </td><td>Signed  </td><td>32 bitů        </td><td>sub + exchange</td></tr>
<tr><td>13</td><td>QDADD  </td><td>Signed  </td><td>32 bitů        </td><td>druhý operand je před výpočtem vynásoben dvěma</td></tr>
<tr><td>14</td><td>QDSUB  </td><td>Signed  </td><td>32 bitů        </td><td>druhý operand je před výpočtem vynásoben dvěma</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>UQADD8 </td><td>Unsigned</td><td>4&times;8 bitů </td><td>součet se saturací</td></tr>
<tr><td>16</td><td>UQADD16</td><td>Unsigned</td><td>2&times;16 bitů</td><td>součet se saturací</td></tr>
<tr><td>17</td><td>UQSUB8 </td><td>Unsigned</td><td>4&times;8 bitů </td><td>rozdíl se saturací</td></tr>
<tr><td>18</td><td>UQSUB16</td><td>Unsigned</td><td>2&times;16 bitů</td><td>rozdíl se saturací</td></tr>
<tr><td>19</td><td>UQASX  </td><td>Unsigned</td><td>32 bitů        </td><td>add + exchange</td></tr>
<tr><td>20</td><td>UQSAX  </td><td>Unsigned</td><td>32 bitů        </td><td>add + exchange</td></tr>
</table>                                                                    

<p>Tyto operace mohou měnit příznak <strong>Q</strong>, jenž je nastaven ve
chvíli, kdy při nějaké aritmetické operaci dojde k&nbsp;saturaci. To lze použít
například k&nbsp;detekci špatně nastavených parametrů při zpracování signálu
(příliš velké zesílení apod.). Díky tomu, že příznak <strong>Q</strong> není
běžnými instrukcemi nulován (je takzvaně &bdquo;sticky&ldquo;), není nutné jeho
nastavení testovat po každé aritmetické operaci, ale například až po zpracování
celého bloku dat či po aplikaci celého filtru na jeden vzorek, což je rychlejší
a většinou i dostačující.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Odkazy na Internetu</h2>

<ol>

<li>DSP for Cortex-M<br />
<a href="https://developer.arm.com/technologies/dsp/dsp-for-cortex-m">https://developer.arm.com/technologies/dsp/dsp-for-cortex-m</a>
</li>

<li>Cortex-M processors in DSP applications? Why not?!<br />
<a href="https://community.arm.com/processors/b/blog/posts/cortex-m-processors-in-dsp-applications-why-not">https://community.arm.com/processors/b/blog/posts/cortex-m-processors-in-dsp-applications-why-not</a>
</li>

<li>Cortex-M23<br />
<a href="https://www.arm.com/products/processors/cortex-m/cortex-m23-processor.php">https://www.arm.com/products/processors/cortex-m/cortex-m23-processor.php</a>
</li>

<li>Cortex-M33<br />
<a href="https://www.arm.com/products/processors/cortex-m/cortex-m33-processor.php">https://www.arm.com/products/processors/cortex-m/cortex-m33-processor.php</a>
</li>

<li>White Paper - DSP capabilities of Cortex-M4 and Cortex-M7<br />
<a href="https://community.arm.com/processors/b/blog/posts/white-paper-dsp-capabilities-of-cortex-m4-and-cortex-m7">https://community.arm.com/processors/b/blog/posts/white-paper-dsp-capabilities-of-cortex-m4-and-cortex-m7</a>
</li>

<li>Q (number format)<br />
<a href="https://en.wikipedia.org/wiki/Q_%28number_format%29">https://en.wikipedia.org/wiki/Q_%28number_format%29</a>
</li>

<li>TriCore Architecture &amp; Core<br />
<a href="http://www.infineon.com/cms/en/product/microcontroller/32-bit-tricore-tm-microcontroller/tricore-tm-architecture-and-core/channel.html?channel=ff80808112ab681d0112ab6b73d40837">http://www.infineon.com/cms/en/product/microcontroller/32-bit-tricore-tm-microcontroller/tricore-tm-architecture-and-core/channel.html?channel=ff80808112ab681d0112ab6b73d40837</a>
</li>

<li>TriCoreTM V1.6 Instruction Set: 32-bit Unified Processor Core<br />
<a href="http://www.infineon.com/dgdl/tc_v131_instructionset_v138.pdf?fileId=db3a304412b407950112b409b6dd0352">http://www.infineon.com/dgdl/tc_v131_instructionset_v138.pdf?fileId=db3a304412b407950112b409b6dd0352</a>
</li>

<li>TriCore v2.2 C Compiler, Assembler, Linker Reference Manual<br />
<a href="http://tasking.com/support/tricore/tc_reference_guide_v2.2.pdf">http://tasking.com/support/tricore/tc_reference_guide_v2.2.pdf</a>
</li>

<li>Infineon TriCore (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Infineon_TriCore">https://en.wikipedia.org/wiki/Infineon_TriCore</a>
</li>

<li>C166®S V2 Architecture &amp; Core<br />
<a href="http://www.infineon.com/cms/en/product/microcontroller/16-bit-c166-microcontroller/c166-s-v2-architecture-and-core/channel.html?channel=db3a304312bef5660112c3011c7d01ae">http://www.infineon.com/cms/en/product/microcontroller/16-bit-c166-microcontroller/c166-s-v2-architecture-and-core/channel.html?channel=db3a304312bef5660112c3011c7d01ae</a>
</li>

<li>Memory segmentation<br />
<a href="https://en.wikipedia.org/wiki/Memory_segmentation">https://en.wikipedia.org/wiki/Memory_segmentation</a>
</li>

<li>Bus mastering<br />
<a href="https://en.wikipedia.org/wiki/Bus_mastering">https://en.wikipedia.org/wiki/Bus_mastering</a>
</li>

<li>ST10 16-bit MCUs<br />
<a href="http://www.st.com/en/microcontrollers/st10-16-bit-mcus.html?querycriteria=productId=LN1111">http://www.st.com/en/microcontrollers/st10-16-bit-mcus.html?querycriteria=productId=LN1111</a>
</li>

<li>XC800 family<br />
<a href="https://en.wikipedia.org/wiki/XC800_family">https://en.wikipedia.org/wiki/XC800_family</a>
</li>

<li>C166 (stránky společnosti Infineon)<br />
<a href="https://www.infineon.com/cms/en/product/microcontroller/16-bit-c166-microcontroller/channel.html?channel=ff80808112ab681d0112ab6b2eaf0759#ispnTab3">https://www.infineon.com/cms/en/product/microcontroller/16-bit-c166-microcontroller/channel.html?channel=ff80808112ab681d0112ab6b2eaf0759#ispnTab3</a>
</li>

<li>C166 Family<br />
<a href="https://en.wikipedia.org/wiki/C166_family">https://en.wikipedia.org/wiki/C166_family</a>
</li>

<li>Permanent Magnet Synchronous Motor<br />
<a href="https://en.wikipedia.org/wiki/Synchronous_motor#Permanent_magnet_motors">https://en.wikipedia.org/wiki/Synchronous_motor#Permanent_magnet_motors</a>
</li>

<li>Implementing field oriented control of a brushless DC motor<br />
<a href="http://www.eetimes.com/document.asp?doc_id=1279321">http://www.eetimes.com/document.asp?doc_id=1279321</a>
</li>

<li>Vector control (motor)<br />
<a href="https://en.wikipedia.org/wiki/Vector_control_(motor)">https://en.wikipedia.org/wiki/Vector_control_(motor)</a>
</li>

<li>Motorola DSP56k<br />
<a href="https://www.rockbox.org/wiki/MotorolaDSP56k">https://www.rockbox.org/wiki/MotorolaDSP56k</a>
</li>

<li>Motorola 56000 (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Motorola_56000">http://en.wikipedia.org/wiki/Motorola_56000</a>
</li>

<li>Using the Motorola DSP56002EVM for Amateur Radio DSP Projects<br />
<a href="http://www.johanforrer.net/EVM/article.html">http://www.johanforrer.net/EVM/article.html</a>
</li>

<li>The Atari Falcon030 "Personal Integrated Media System"<br />
<a href="http://www.atarimuseum.com/computers/16bits/falcon030.html">http://www.atarimuseum.com/computers/16bits/falcon030.html</a>
</li>

<li>Turtle Beach Corporation (stránky společnosti)<br />
<a href="http://www.turtlebeach.com/">http://www.turtlebeach.com/</a>
</li>

<li>Turtle Beach Corporation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turtle_Beach_Corporation">https://en.wikipedia.org/wiki/Turtle_Beach_Corporation</a>
</li>

<li>Atari Falcon 030 DSP 3D engine test<br />
<a href="http://www.digiti.info/video/WHQwMjNRaExfLWs=/atari_falcon_030_dsp_3d_engine_test">http://www.digiti.info/video/WHQwMjNRaExfLWs=/atari_falcon_030_dsp_3d_engine_test</a>
</li>

<li>Atari Falcon030 (německy)<br />
<a href="http://www.maedicke.de/atari/hardware/falcon.htm">http://www.maedicke.de/atari/hardware/falcon.htm</a>
</li>

<li>Old-computers.com: Atari Falcon030<br />
<a href="http://www.old-computers.com/museum/computer.asp?c=125&st=1">http://www.old-computers.com/museum/computer.asp?c=125&st=1</a>
</li>

<li>Atari Falcon030 (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Atari_Falcon">http://en.wikipedia.org/wiki/Atari_Falcon</a>
</li>

<li>Past and current projects (including Falcon stuff)<br />
<a href="http://os.inf.tu-dresden.de/~nf2/projects/projects.html">http://os.inf.tu-dresden.de/~nf2/projects/projects.html</a>
</li>

<li>Atari Falcon 030: The Case For The Defence<br />
<a href="http://www.soundonsound.com/sos/1994_articles/sep94/atarifalcon.html">http://www.soundonsound.com/sos/1994_articles/sep94/atarifalcon.html</a>
</li>

<li>DaVinci processor family<br />
<a href="http://www.ti.com/general/docs/datasheetdiagram.tsp?genericPartNumber=TMS320DM365&diagramId=64193">http://www.ti.com/general/docs/datasheetdiagram.tsp?genericPartNumber=TMS320DM365&diagramId=64193</a>
</li>

<li>Texas Instruments DaVinci<br />
<a href="https://en.wikipedia.org/wiki/Texas_Instruments_DaVinci">https://en.wikipedia.org/wiki/Texas_Instruments_DaVinci</a>
</li>

<li>TMS320DM6446 (DaVinci)<br />
<a href="http://www.ti.com/product/tms320dm6446">http://www.ti.com/product/tms320dm6446</a>
</li>

<li>Digital Media Video Processors (TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/media_processors/davinci/products.page#">http://www.ti.com/lsds/ti/processors/dsp/media_processors/davinci/products.page#</a>
</li>

<li>TI Wiki<br />
<a href="http://processors.wiki.ti.com/index.php/Main_Page">http://processors.wiki.ti.com/index.php/Main_Page</a>
</li>

<li>C5000 ultra-low-power DSP<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/c5000_dsp/overview.page">http://www.ti.com/lsds/ti/processors/dsp/c5000_dsp/overview.page</a>
</li>

<li>OMAP (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/OMAP">https://en.wikipedia.org/wiki/OMAP</a>
</li>

<li>OMAP - TI Wiki<br />
<a href="http://processors.wiki.ti.com/index.php/OMAP">http://processors.wiki.ti.com/index.php/OMAP</a>
</li>

<li>Why OMAP can't compete in smartphones<br />
<a href="http://www.eetimes.com/author.asp?section_id=40&doc_id=1286602">http://www.eetimes.com/author.asp?section_id=40&doc_id=1286602</a>
</li>

<li>Applications Processors – The Heart of the Smartphone<br />
<a href="http://www.engineering.com/ElectronicsDesign/ElectronicsDesignArticles/ArticleID/5791/Applications-Processors-The-Heart-of-the-Smartphone.aspx">http://www.engineering.com/ElectronicsDesign/ElectronicsDesignArticles/ArticleID/5791/Applications-Processors-The-Heart-of-the-Smartphone.aspx</a>
</li>

<li>TI cuts 1,700 jobs in OMAP shift<br />
<a href="http://www.eetimes.com/document.asp?doc_id=1262782">http://www.eetimes.com/document.asp?doc_id=1262782</a>
</li>

<li>VLIW: Very Long Instruction Word: Texas Instruments TMS320C6x<br />
<a href="http://www.ecs.umass.edu/ece/koren/architecture/VLIW/2/ti1.html">http://www.ecs.umass.edu/ece/koren/architecture/VLIW/2/ti1.html</a>
</li>

<li>An Introduction To Very-Long Instruction Word (VLIW) Computer Architecture<br />
Philips Semiconductors
</li>

<li>VLIW Architectures for DSP: A Two-Part Lecture (PDF, slajdy)<br />
<a href="http://www.bdti.com/MyBDTI/pubs/vliw_icspat99.pdf">http://www.bdti.com/MyBDTI/pubs/vliw_icspat99.pdf</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Very_long_instruction_word">https://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>A VLIW Approach to Architecture, Compilers and Tools<br />
<a href="http://www.vliw.org/book/">http://www.vliw.org/book/</a>
</li>

<li>VEX Toolchain (VEX = VLIW Example)<br />
<a href="http://www.hpl.hp.com/downloads/vex/">http://www.hpl.hp.com/downloads/vex/</a>
</li>

<li>Elbrus (computer)<br />
<a href="https://en.wikipedia.org/wiki/Elbrus_%28computer%29">https://en.wikipedia.org/wiki/Elbrus_%28computer%29</a>
</li>

<li>Super Harvard Architecture Single-Chip Computer<br />
<a href="https://en.wikipedia.org/wiki/Super_Harvard_Architecture_Single-Chip_Computer">https://en.wikipedia.org/wiki/Super_Harvard_Architecture_Single-Chip_Computer</a>
</li>

<li>Digital Signal Processors (stránky TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/overview.page">http://www.ti.com/lsds/ti/processors/dsp/overview.page</a>
</li>

<li>C674x Low Power DSP (stránky TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/c6000_dsp/c674x/overview.page">http://www.ti.com/lsds/ti/processors/dsp/c6000_dsp/c674x/overview.page</a>
</li>

<li>TMS320C30 (stránky TI)<br />
<a href="http://www.ti.com/product/tms320c30">http://www.ti.com/product/tms320c30</a>
</li>

<li>TMS320C6722B<br />
<a href="http://www.ti.com/product/tms320c6722b/description">http://www.ti.com/product/tms320c6722b/description</a>
</li>

<li>Introduction to DSP<br />
<a href="http://www.ti.com/lit/wp/spry281/spry281.pdf">http://www.ti.com/lit/wp/spry281/spry281.pdf</a>
</li>

<li>The Evolution of TMS (Family of DSPs)<br />
<a href="http://www.slideshare.net/moto_modx/theevo1">http://www.slideshare.net/moto_modx/theevo1</a>
</li>

<li>Datasheet k TMS32010<br />
<a href="http://www.datasheetarchive.com/dlmain/49326c32a52050140abffe6f0ac4894aa09889/M/TMS32010">http://www.datasheetarchive.com/dlmain/49326c32a52050140abffe6f0ac4894aa09889/M/TMS32010</a>
</li>

<li>1979: Single Chip Digital Signal Processor Introduced<br />
<a href="http://www.computerhistory.org/siliconengine/single-chip-digital-signal-processor-introduced/">http://www.computerhistory.org/siliconengine/single-chip-digital-signal-processor-introduced/</a>
</li>

<li>The TMS32010. The DSP chip that changed the destiny of a semiconductor giant<br />
<a href="http://www.tihaa.org/historian/TMS32010-12.pdf">http://www.tihaa.org/historian/TMS32010-12.pdf</a>
</li>

<li>Texas Instruments TMS320 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Texas_Instruments_TMS320">https://en.wikipedia.org/wiki/Texas_Instruments_TMS320</a>
</li>

<li>Great Microprocessors of the Past and Present: Part IX: Signetics 8x300, Early cambrian DSP ancestor (1978):<br />
<a href="http://www.cpushack.com/CPU/cpu2.html#Sec2Part9">http://www.cpushack.com/CPU/cpu2.html#Sec2Part9</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://jbayko.sasktelwebsite.net/cpu.html">http://jbayko.sasktelwebsite.net/cpu.html</a>
</li>

<li>Introduction to DSP - DSP processors:<br />
<a href="http://www.bores.com/courses/intro/chips/index.htm">http://www.bores.com/courses/intro/chips/index.htm</a>
</li>

<li>The Scientist and Engineer's Guide to Digital Signal Processing:<br />
<a href="http://www.dspguide.com/">http://www.dspguide.com/</a>
</li>

<li>Digital signal processor (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Digital_signal_processor">http://en.wikipedia.org/wiki/Digital_signal_processor</a>
</li>

<li>Digitální signálový procesor (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Digitální_signálový_procesor">http://cs.wikipedia.org/wiki/Digitální_signálový_procesor</a>
</li>

<li>Digital Signal Processing FAQs<br />
<a href="http://dspguru.com/dsp/faqs">http://dspguru.com/dsp/faqs</a>
</li>

<li>Reprezentace numerických hodnot ve formátech FX a FP<br />
<a href="http://www.root.cz/clanky/fixed-point-arithmetic/">http://www.root.cz/clanky/fixed-point-arithmetic/</a>
</li>

<li>IEEE 754 a její příbuzenstvo: FP formáty<br />
<a href="http://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/">http://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/</a>
</li>

<li>Čtyři základní způsoby uložení čísel pomocí FX formátů<br />
<a href="http://www.root.cz/clanky/binarni-reprezentace-numerickych-hodnot-v-fx-formatu/">http://www.root.cz/clanky/binarni-reprezentace-numerickych-hodnot-v-fx-formatu/</a>
</li>

<li>Základní aritmetické operace prováděné v FX formátu<br />
<a href="http://www.root.cz/clanky/zakladni-aritmeticke-operace-provadene-ve-formatu-fx/">http://www.root.cz/clanky/zakladni-aritmeticke-operace-provadene-ve-formatu-fx/</a>
</li>

<li>Aritmetické operace s hodnotami uloženými ve formátu FP<br />
<a href="http://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ve-formatu-plovouci-radove-carky/">http://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ve-formatu-plovouci-radove-carky/</a>
</li>

<li>FIR Filter FAQ<br />
<a href="http://dspguru.com/dsp/faqs/fir">http://dspguru.com/dsp/faqs/fir</a>
</li>

<li>Finite impulse response (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Finite_impulse_response">http://en.wikipedia.org/wiki/Finite_impulse_response</a>
</li>

<li>DSPRelated<br />
<a href="http://www.dsprelated.com/">http://www.dsprelated.com/</a>
</li>

<li>Addressing mode (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Addressing_mode">https://en.wikipedia.org/wiki/Addressing_mode</a>
</li>

<li>Orthogonal instruction set<br />
<a href="https://en.wikipedia.org/wiki/Orthogonal_instruction_set">https://en.wikipedia.org/wiki/Orthogonal_instruction_set</a>
</li>

<li>TI 16-bit and 32-bit microcontrollers<br />
<a href="http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page">http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page</a>
</li>

<li>TMS 32010 Assembly Language Programmer's Guide (kniha na Amazonu)<br />
<a href="https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423">https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423</a>
</li>

<li>COSC2425: PC Architecture and Machine Language, PC Assembly Language<br />
<a href="http://www.austincc.edu/rblack/courses/COSC2425/index.html">http://www.austincc.edu/rblack/courses/COSC2425/index.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

