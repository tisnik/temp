<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Knihovny pro tvorbu grafického uživatelského rozhraní v Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Knihovny pro tvorbu grafického uživatelského rozhraní v Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Python v&nbsp;současnosti patří mezi nejpopulárnější programovací jazyky vůbec, a to zejména ve světě otevřeného software. Tento jazyk se používá jak pro tvorbu různých nástrojů ovládaných z&nbsp;příkazového řádku, tak i pro psaní serverových aplikací a v&nbsp;neposlední řadě se setkáme s&nbsp;aplikacemi vybavenými plnohodnotným grafickým uživatelským rozhraním. A právě knihovnám a popřípadě i celým frameworkům určeným pro tvorbu GUI se budeme věnovat v&nbsp;dnešním článku.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Knihovny pro tvorbu grafického uživatelského rozhraní v&nbsp;Pythonu</a></p>
<p><a href="#k02">2. Tkinter</a></p>
<p><a href="#k03">3. appJar</a></p>
<p><a href="#k04">4. PyGTK</a></p>
<p><a href="#k05">*** 5. PyGObject</a></p>
<p><a href="#k06">*** 6. PyQt</a></p>
<p><a href="#k07">*** 7. PySide</a></p>
<p><a href="#k08">*** 8. PyKDE</a></p>
<p><a href="#k09">*** 9. wxPython</a></p>
<p><a href="#k10">*** 10. Wax</a></p>
<p><a href="#k11">11. Kivy</a></p>
<p><a href="#k12">*** 12. Pyforms</a></p>
<p><a href="#k13">*** 13. PyjamasDesktop (pyjs Desktop)</a></p>
<p><a href="#k14">*** 14. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k15">*** 15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Knihovny pro tvorbu grafického uživatelského rozhraní v&nbsp;Pythonu</h2>

<p>Pro programovací jazyk Python vzniklo poměrně velké množství knihoven i celých frameworků určených pro tvorbu grafického uživatelského rozhraní. Jednotlivé knihovny se od sebe samozřejmě v&nbsp;mnoha směrech odlišují, ať již se to týká způsobu modelování GUI a specifikace reakcí na události, tak i tím, jaká (většinou nativní) knihovna je použita pro vykreslování celých oken i jednotlivých ovládacích prvků. Ve světě Linuxu se dnes setkáme především s&nbsp;knihovnami GTK+ (použito zejména v&nbsp;desktopovém prostředí GNOME Shell) a Qt (použito v&nbsp;desktopovém prostředí KDE), ale nesmíme zapomenout ani na multiplatformní knihovnu wxWidgets (dříve se nazývala wxWindows) nebo taktéž multiplatformní knihovnu Tk. Relativně nedávno se pro Python objevily i zcela nové knihovny pro tvorbu GUI umožňující používat webové technologie (PyjamasDesktop) popř.&nbsp;mobilní platformy (Kivy). S&nbsp;jednotlivými GUI knihovnami se ve stručnosti seznámíme v&nbsp;dnešním článku, ve článcích navazujících se pak již budeme podrobněji věnovat vybraným knihovnám.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Tkinter</h2>

<p>Popis první knihovny určené pro tvorbu GUI začneme poněkud zeširoka, protože <i>Tkinter</i> je rozhraní ke knihovně <i>Tk</i>, přičemž <i>Tk</i> je takzvaný <i>toolkit</i> (z&nbsp;pohledu programovacího jazyka se přitom jedná o knihovnu) určený pro jednoduchý a rychlý vývoj programů obsahujících grafické uživatelské rozhraní. Autorem tohoto toolkitu je, podobně jako v&nbsp;případě programovacího jazyka <i>Tcl</i>, John Ousterhout, mezi jehož zájmy v&nbsp;minulosti patřila automatizace (skriptovatelnost) aplikací a právě tvorba grafických uživatelských rozhraní. V&nbsp;minulosti byl tento toolkit velmi oblíbený, proto se dodával (a stále dodává) spolu s&nbsp;instalací programovacího jazyka <i>Tcl</i> a &ndash; což nás dnes zajímá mnohem více &ndash; i s&nbsp;jazykem Python společně s&nbsp;rozhraním <i>Tkinter</i>. I z&nbsp;tohoto důvodu se také v&nbsp;různých materiálech a dokumentech často setkáme se společným názvem <i>Tcl/Tk</i>. Samotný název <i>Tk</i> jednoduše znamená zkratku slova <i>ToolKit</i>.</p>

<p>Důležitou vlastností <i>Tk</i>, která zůstala zachována i v&nbsp;<i>Tkinteru</i>, je úsporný, flexibilní a přitom čitelný zápis programu se specifikací ovládacích prvků, jejich umístění v&nbsp;oknech, vlastností i <i>callback funkcí</i> volaných v&nbsp;důsledku uživatelské činnosti. Udává se, že poměr psaného kódu v&nbsp;<i>Tcl/Tk</i> je vůči dnes obstarožnímu a prakticky zapomenutému <i>Motifu</i> na hodnotách 1:20 a vůči základnímu <i>Xlibu</i> dokonce 1:100! (vše se samozřejmě týká tvorby grafického uživatelského rozhraní). Na tomto místě je však nutné podotknout, že Motif je z&nbsp;dnešního pohledu již zastaralá knihovna a navíc dnes mnoho toolkitů pro GUI podporuje deklaraci grafického uživatelského rozhraní v&nbsp;konfiguračních souborech, nikoli tedy programem (což má své výhody, ale samozřejmě i zápory). Nicméně i dnes představuje Tcl+Tk či ještě lépe Python+Tkinter poměrně dobrou volbu pro mnoho typů aplikací s&nbsp;GUI.</p>

<p>V&nbsp;průběhu postupného vývoje novějších (avšak ne nutně dokonalejších) programovacích nástrojů byla knihovna <i>Tk</i> použita v&nbsp;mnoha dalších programovacích jazycích. Pravděpodobně nejznámější je, samozřejmě kromě samotné dvojice <i>Tcl/Tk</i>, modul pro programovací jazyk <i>Perl</i> (Perl/Tk) a <i>Python</i> (Tkinter - Tk Interface, což je téma druhé poloviny dnešního článku). Knihovnu <i>Tk</i> je však samozřejmě možné použít i v dalších programovacích jazycích, i když v mnoha případech ne tak snadně a efektivně, jako ze samotného <i>Tcl</i>. V&nbsp;praxi se často s&nbsp;výhodou používá či používalo spojení programů napsaných v&nbsp;programovacím jazyku <i>C</i> či s&nbsp;<i>C++</i> s&nbsp;grafickým uživatelským rozhraním, které je vytvořeno pomocí <i>Tcl</i> a <i>Tk</i>.</p>

<p>S&nbsp;knihovnou <i>Tkinter</i> se blíže seznámíme v&nbsp;dalším pokračování tohoto článku, kde si uvedeme větší množství příkladů. Dnes si pouze pro ilustraci ukažme, jak jednoduchá může být (značně primitivní) aplikace s&nbsp;oknem a textovým návěštím umístěným do tohoto okna. Podobný příklad si ukážeme i pro některé další knihovny popsané v&nbsp;navazujících kapitolách:</p>

<pre>
#!/usr/bin/env python

from tkinter import *

root = Tk()

label = Label(root, text="Hello world!")

label.pack()

root.mainloop()
</pre>

<p>Ve skutečnosti se však v&nbsp;současnosti používá takzvané <i>TTk (Themed Tk)</i> a program bude muset být nepatrně upraven (přidá se import a namísto <strong>Label()</strong> se zavolá konstruktor <strong>ttk.Label()</strong>):</p>

<pre>
#!/usr/bin/env python

from tkinter import *
from tkinter import ttk

root = Tk()

label = ttk.Label(root, text="Hello world!")

label.pack()

root.mainloop()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. appJar</h2>

<p>Nad rozhraním <i>Tkinter</i> zmíněným <a href="#k02">v&nbsp;předchozí kapitole</a> je postaveno další rozhraní nazvané <i>appJar</i>. Tvůrcem tohoto rozhraní je Richard Jarvis, který je učitelem. Richardovým cílem bylo navrhnout <i>appJar</i> takovým způsobem, aby byla tvorba grafického uživatelského rozhraní co nejjednodušší a aby tak bylo možné <i>appJar</i> použít ve výuce. Tento cíl se skutečně podařilo splnit, takže v&nbsp;současnosti představuje <i>appJar</i> s&nbsp;velkou pravděpodobností ten nejrychlejší a nejjednodušší způsob, jak v&nbsp;Pythonu vytvořit aplikaci s&nbsp;grafickým uživatelským rozhraním, i když je nutné poznamenat, že některé pokročilejší ovládací prvky nejsou k&nbsp;dispozici. Navíc vlastně ani není nutné <i>appJar</i> instalovat, což je na školách obecně problematické, neboť to vyžaduje koordinaci učitele s&nbsp;administrátorem. Namísto instalace je pouze nutné ze stránek <a href="http://appjar.info/">http://appjar.info/</a> stáhnout ZIP archiv a ten rozbalit do adresáře s&nbsp;projektem (a nastavit <strong>.gitignore</strong>, aby se vzniklý podadresář neukládal do repositáře).</p>

<p>Demonstrační příklad, v&nbsp;němž se vytvoří okno obsahující textové návěští, bude při použití knihovny <i>appJar</i> ještě jednodušší a kratší, než tomu bylo u knihovny <i>Tkinter</i>. Ostatně se můžete přesvědčit sami porovnáním obou zdrojových kódů &ndash; nyní se jedná o pouhé čtyři programové řádky:</p>

<pre>
from appJar import gui

app = gui()

app.addLabel("title", "Hello world!")

app.go()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. PyGTK</h2>

<p>Další knihovnou určenou pro tvorbu grafického uživatelského prostředí v&nbsp;programovacím jazyku Python, s&nbsp;níž se dnes alespoň ve stručnosti seznámíme, je knihovna nazvaná <i>PyGTK</i>. Název této knihovny již prozrazuje, že je určena pro desktopová prostředí založená na GTK+, konkrétně ovšem na GTK+ 2.x. Jedná se tedy o dnes již poněkud zastaralou knihovnu, která se však stále používá, a to zejména u aplikací portovaných na operační systémy Microsoft Windows. Pokud budete potřebovat vytvořit grafické uživatelské rozhraní pro desktopová prostředí založená na GTK+ 3.x, použijte <a href="#k05">dále zmíněnou</a> knihovnu <i>PyGObject</i>. S&nbsp;využitím <i>PyGTK</i> vzniklo velké množství aplikací, například Gedit, Ubiquity, Gnome Software Center, Gajim, starší verze PyChess apod. Tyto aplikace jsou nebo budou upraveny tak, aby využily knihovnu <i>PyGObject</i>.</p>

<p>Demonstrační příklad, který po svém spuštění otevře okno a v&nbsp;něm vykreslí textové návěští, bude při použití knihovny PyGTK vypadat následovně. Povšimněte si, že se již jedná o relativně složitý kód, v&nbsp;němž se explicitně řeší způsob reakce na událost, která vznikne při zavírání okna. V&nbsp;předchozích knihovnách bylo toto chování stanoveno implicitně:</p>

<pre>
import pygtk
pygtk.require('2.0')
import gtk


def delete_event(widget, event, data=None):
    print "delete event occurred"
    return False


def destroy(widget, data=None):
    print "destroy signal occurred"
    gtk.main_quit()


window = gtk.Window(gtk.WINDOW_TOPLEVEL)
window.connect("delete_event", delete_event)
window.connect("destroy", destroy)

label = gtk.Label("Hello world!")
window.add(label)
label.show()

window.show()
gtk.main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. PyGObject</h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. PyQt</h2>

<pre>
import sys

# zajisteni importu noveho rozhrani
import sip

sip.setapi('QDate', 2)
sip.setapi('QDateTime', 2)
sip.setapi('QString', 2)
sip.setapi('QTextStream', 2)
sip.setapi('QTime', 2)
sip.setapi('QUrl', 2)
sip.setapi('QVariant', 2)

from PyQt4.Qt import *

qt_application = QApplication(sys.argv)

label = QLabel('Hello world!')

label.show()

qt_application.exec_()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. PySide</h2>

<pre>
import sys

from PySide.QtCore import *
from PySide.QtGui import *

qt_application = QApplication(sys.argv)

label = QLabel('Hello world!')

label.show()

qt_application.exec_()
</pre>

<pre>
import sys

from PySide.QtCore import *
from PySide.QtGui import *

qt_application = QApplication(sys.argv)


class HelloWorldLabel(QLabel):
    def __init__(self):
        QLabel.__init__(self, "Hello world!")

        self.setMinimumSize(QSize(600, 400))
        self.setAlignment(Qt.AlignCenter)
        self.setWindowTitle('Hello world!')

    def run(self):
        self.show()
        qt_application.exec_()


HelloWorldLabel().run()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. PyKDE</h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. wxPython</h2>

<p>&bdquo;wxPython is the best and most mature cross-platform GUI toolkit, given a number of constraints. The only reason wxPython isn't the standard Python GUI toolkit is that Tkinter was there first.&ldquo;</p>

wxPython is a GUI toolkit for the Python programming language. It allows Python programmers to create programs with a robust, highly functional graphical user interface, simply and easily. It is implemented as a Python extension module (native code) that wraps the popular wxWidgets cross platform GUI library, which is written in C++.

<p><a name="k10"></a></p>
<h2 id="k10">10. Wax</h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Kivy</h2>

<p>Další knihovnou pro tvorbu grafického uživatelského prostředí, s&nbsp;níž se dnes alespoň ve stručnosti seznámíme, je knihovna nazvaná <i>Kivy</i>. Jedná se vlastně o ucelenou platformu určenou především pro tvorbu aplikací pro mobilní platformy, tedy pro Android a iOS, ve skutečnosti je ale možné Kivy použít i na běžných desktopech s&nbsp;Mac OS X, Microsoft Windows a samozřejmě i s&nbsp;Linuxem. V&nbsp;tomto případě však nebudou k&nbsp;dispozici všechny možnosti ovládání, především rozhraní multitouch určené primárně pro dotykové obrazovky. Už z&nbsp;této poznámky je asi zřejmé, že se Kivy bude v&nbsp;mnoha ohledech odlišovat od všech výše uvedených knihoven a frameworků, které jsou určeny především pro běžné desktopy ovládané kombinací klávesnice a myši. Kivy však jde ještě dále, protože programátorům nabízí prakticky všechny technologie, které jsou pro GUI aplikace vyžadovány. A protože se jedná o knihovnu určenou především pro mobilní zařízení, je podporována i OpenGL ES 2, takže vykreslování ovládacích prvků je akcelerováno. Navíc je možné pro deklaraci GUI použít speciální jazyk nazvaný Kv, který zde hraje podobnou roli jako například QML</p>

<p>Opět se podívejme na to, jak by mohl vypadat příklad s&nbsp;oknem (plochou), na něž je umístěno textové pole. Celá aplikace se skládá z&nbsp;jediné třídy obsahující v&nbsp;našem případě jedinou funkci vytvářející textové návěští. Chování aplikace je v&nbsp;tomto případě řízeno implicitními pravidly:</p>

<pre>
from kivy.app import App
from kivy.uix.label import Label

class TestApp(App):
    def build(self):
        return Label(text='Hello World')

TestApp().run()
</pre>

<p>Touto knihovnou se budeme podrobněji zabývat v&nbsp;dalších částech seriálu.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pyforms</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. PyjamasDesktop (pyjs Desktop)</h2>

<p>Projekt nazvaný <i>PyjamasDesktop</i> vznikl z&nbsp;projektu <i>Pyjamas</i>, který možná čtenáři tohoto článku znají. Tento projekt zajišťuje, aby se webová aplikace naprogramovaná v&nbsp;Pythonu mohla spouštět podobně jako běžná desktopová aplikace, což je ostatně postup, který můžeme znát z&nbsp;mnoha úspěšných desktopových aplikací, například z&nbsp;textového editoru Atom založeného na frameworku Electron.</p>

PyjamasDesktop is a port of Pyjamas. PyjamasDesktop is application widget set for desktop and a cross-platform framework. (After release v0.6 PyjamasDesktop is a part of Pyjamas (Pyjs)). Briefly, it allows the exact same Python web application source code to be executed as a standalone desktop application.



<p><a name="k14"></a></p>
<h2 id="k14">14. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech demonstračních příkladů, v&nbsp;nichž se vytvořilo jednoduché GUI s&nbsp;oknem a textovým návěštím s&nbsp;použitím různých knihoven a frameworků, naleznete na následujících odkazech:</p>

<table>
<tr><th>Příklad používající:</th><th>Odkaz</th></tr>
<tr><td>Knihovnu Tkinter</td><td><a href=""></a></td></tr>
<tr><td>Knihovnu Tkinter a TTk (Themed Tk)</td><td><a href=""></a></td></tr>
<tr><td>Knihovnu appJar</td><td><a href=""></a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Modul PyGTK</td><td><a href=""></a></td></tr>
<tr><td>Modul PyQt</td><td><a href=""></a></td></tr>
<tr><td>Moduly PyQt a PySide</td><td><a href=""></a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Framework Kivy</td><td><a href=""></a></td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

