<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se seznámíme s assemblerem nazvaným FASM, což je zkratka sousloví flat assembler. Tento assembler se v několika ohledech odlišuje jak od standardního GNU Assembleru, tak i například od NASMu. Mezi zajímavé vlastnosti patří podpora pro cross překlad atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Assemblery a vyšší programovací jazyky</a></p>
<p><a href="#k02">2. Úloha assemblerů</a></p>
<p><a href="#k03">3. Assemblery v&nbsp;Linuxu</a></p>
<p><a href="#k04">4. FASM &ndash; Flat Assembler</a></p>
<p><a href="#k05">5. Instalace Flat Assembleru</a></p>
<p><a href="#k06">*** 6. Uroboros &ndash; překlad FASMu sebou samým</a></p>
<p><a href="#k07">*** 7. &bdquo;Hello, world!&ldquo; naprogramovaný v&nbsp;různých assemblerech pro různé architektury</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Assemblery a vyšší programovací jazyky</h2>

<p>Naprostá většina programovacích jazyků, které se používají
v&nbsp;současnosti, patří mezi takzvané vysokoúrovňové jazyky, což
mj.&nbsp;znamená, že zdrojové kódy vyvíjených aplikací se v&nbsp;nich zapisují
s&nbsp;využitím takových jazykových konstrukcí, které mikroprocesor nedokáže
vykonat přímo, protože jsou příliš abstraktní. Aby bylo možné programy
vytvořené například v&nbsp;programovacím jazyku Python či v&nbsp;klasickém
céčku skutečně spustit, je nutné je nějakým způsobem transformovat do
(jednodušší) podoby, kterou již mikroprocesor dokáže provést. Výsledná
(transformovaná) podoba programu se nazývá <i>strojový kód (machine code)</i> a
pro zmíněnou transformaci se používají <i>překladače</i> (což je případ
programovacích jazyků C, C++, D, Go, Rustu a celé řady dalších). Alternativní
cestu představují interpretry, v&nbsp;nichž program realizovaný ve strojovém
kódu vlastně simuluje nějaký abstraktnější procesor, kterým se zdrojové kódy
interpretují (což je případ programovacích jazyků typu Python, Perl, Ruby,
BASH, ale například i <a
href="https://www.root.cz/clanky/programovani-v-jazyce-basic-je-zivotnim-stylem-jiz-sedesat-let/">minulý
týden zmíněného BASICu</a> atd.).</p>

<p>V&nbsp;některých specifických situacích, zejména při programování
mikrořadičů, však může být vhodnější vytvářet programy či jejich části
v&nbsp;nízkoúrovňovém jazyku, který se přibližuje strojovému kódu. Vzhledem
k&nbsp;tomu, že přímý zápis strojového kódu je pracný, náchylný k&nbsp;chybám
(výpočty relativních adres a vůbec práce se složitějšími datovými strukturami)
a prakticky dlouhodobě neudržovatelný, používá se již sedmdesát let poněkud
odlišný přístup &ndash; použití takzvaného <i>assembleru</i>. Assembler neboli
též <i>jazyk symbolických adres (JSA)</i> popř.&nbsp;alternativně <i>jazyk
symbolických instrukcí (JSI)</i> je nízkoúrovňovým programovacím jazykem, který
na hierarchii jazyků sice stojí poměrně vysoko nad strojovým kódem, ovšem na
straně druhé je umístěn hluboko pod vyššími kompilovanými programovacími jazyky
typu C či interpretovanými jazyky typu Python.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dalším textu budu používat přímo
označení <i>assembler</i> a nikoli sáhodlouhé názvy <i>jazyk symbolických
adres</i> nebo  <i>jazyk symbolických instrukcí</i>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Úloha assemblerů</h2>

<p>Typickou vlastností většiny existujících assemblerů je jejich vazba na
určitý typ mikroprocesoru popř.&nbsp;řadu mikroprocesorů (architekturu). Týká
se to především sady dostupných instrukcí. Programy se ve většině typech
assemblerů zapisují formou symbolických jmen instrukcí, přičemž každá instrukce
je představována svou mnemotechnickou zkratkou a případnými operandy
(konstantami, adresami, nepřímými adresami, jmény pracovních registrů procesoru
atd.). Příkladem může být instrukce <strong>LD</strong> pro načtení hodnoty do
registru, přičemž <strong>LD</strong> vzniklo ze slova <i>load</i>. A ještě
lépe je to vidět na instrukcích <strong>ADD</strong> či <strong>SUB</strong>
vzniklých ze slov <i>addition</i> a <i>subtraction</i>.</p>

<p>Tvorba programů či jejich částí v&nbsp;assembleru již není
v&nbsp;současnosti tak rozšířená, jako v&nbsp;letech, kdy bylo nutné využít
všechny možnosti dostupného hardware a kdy překladače vysokoúrovňových
programovacích jazyků nedokázaly provádět pokročilé optimalizace. I přesto se
však kupodivu assembler stále v&nbsp;některých statistikách drží na předních
příčkách programovacích jazyků; viz například měsíčně vydávanou statistiku
dostupnou na <a
href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>.
S&nbsp;assemblerem se tak dnes můžeme většinou setkat v&nbsp;oblasti
&bdquo;malých&ldquo; osmibitových mikrořadičů, například z&nbsp;řady <a
href="https://www.root.cz/clanky/osmibitove-mikroradice-pic-2/">PIC</a>, u
zastaralé, ale stále používané platformy <a
href="https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/">8051</a>,
ale například i u mikrořadičů <a
href="https://www.root.cz/clanky/mikroradice-ez8-aneb-potomek-legendarniho-z80/">Z8</a>.
Důvodem může být snaha o využití omezených prostředků (výpočetní výkon, malé
kapacity RAM a EPROM/Flash atd.) nebo nutnost provádění nízkoúrovňových operací
&ndash; přístup k&nbsp;řídicím registrům, <i>bit banging</i> atd.</p>

<p>Ovšem v&nbsp;dnešním článku nás bude zajímat především Linux na dnes
maintreamové platformě x86-64, popř.&nbsp;na 32bitové platformě x86.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Assemblery v&nbsp;Linuxu</h2>

<p>V&nbsp;tomto odstavci budeme pod termínem &bdquo;assembler&ldquo; chápat
programový nástroj, jenž je určený pro transformaci zdrojového kódu
naprogramovaného v&nbsp;jazyku symbolických adres do objektového kódu (ten je
nutné ještě slinkovat) nebo přímo do strojového kódu (což právě provádí dnes
popisovaný <i>FASM</i>). Pro operační systém Linux vzniklo hned několik
takových nástrojů, přičemž některé nástroje jsou komerční a jiné patří mezi
open source. Z&nbsp;nekomerčních nástrojů se jedná o známý <i>GNU Assembler</i>
(zkráceně <i>GAS</i>), dále pak o nástroj nazvaný <i>Netwide assembler
(NASM)</i>, nástroj <i>Yasm Modular Assembler</i> či až překvapivě výkonný
<i>vasm</i>. <i>NASM</i> a <i>Yasm</i> jsou pro první krůčky v&nbsp;assembleru
velmi dobře použitelné, neboť mají dobře zpracovaný mechanismus reakce na
chyby, dají se v&nbsp;nich psát čitelné programy atd. Zajímavý je taktéž
projekt <i>TinyCC Assembler</i>, který je součástí <i>Tiny C Compileru</i> a
s&nbsp;nímž jsme se již na stránkách Roota setkali.</p>

<p>Zásadní problém při snaze o použití <i>Netwide assembleru</i> či
<i>Yasmu</i> však nastává v&nbsp;případě, kdy je nutné vyvíjet aplikace určené
pro jinou architekturu, než je i386 či x86_64, a to z&nbsp;toho důvodu, že tyto
dva nástroje nedokážou pracovat s&nbsp;odlišnou instrukční sadou. Naproti tomu
<i>GNU Assembler</i> tímto problémem ani zdaleka netrpí, takže se
v&nbsp;následujícím textu s&nbsp;<i>GNU Assemblerem</i> ještě setkáme (a budeme
ho porovnávat s&nbsp;<i>FASMem</i>).</p>

<p><i>GNU Assembler</i> (zkráceně jen <i>gas</i>) je součástí skupiny nástrojů
nazvaných <i>GNU Binutils</i>. Jedná se o nástroje určené pro vytváření a
správu binárních souborů obsahujících takzvaný &bdquo;objektový kód&ldquo;,
dále nástrojů určených pro práci s&nbsp;nativními knihovnami i pro takzvané
profilování (profilováním se testuje, ve které části programu se stráví nejvíce
času). Mezi nástroje spadající do <i>GNU Binutils</i> patří vedle <i>GNU
Assembleru</i> i linker <strong>ld</strong> (ten dnes použijeme, i když FASM ho
nevyžaduje), profiler <strong>gprof</strong>, správce archivů strojových funkcí
<strong>ar</strong>, nástroj pro odstranění symbolů z&nbsp;objektových a
spustitelných souborů <strong>strip</strong> a několik pomocných utilit typu
<strong>nm</strong>, <strong>objdump</strong> (i ten dnes použijeme),
<strong>size</strong> a v&nbsp;neposlední řadě také
<strong>strings</strong>.</p>

<p><i>GNU Assembler</i> je možné použít buď pro překlad uživatelem vytvořených
zdrojových kódů nebo pro zpracování kódů vygenerovaných překladači vyšších
programovacích jazyků (<strong>GCC</strong> atd.). Zajímavé je, že všechny
moderní verze <i>GNU Assembleru</i> podporují jak původní AT&amp;T syntaxi, tak
i (podle mnoha programátorů, včetně autora dnešního článku, čitelnější) syntaxi
používanou společností Intel.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. FASM &ndash; Flat Assembler</h2>

<p>Kromě výše uvedených assemblerů pro Linux, z&nbsp;nichž nejznámější je
pravděpodobně právě <i>GNU Assembler</i> následovaný <i>Netwide
Assemblerem</i>, však existuje ještě jeden zajímavý a v&nbsp;některých ohledech
i specifický projekt. Jedná se o <i>FASM</i> neboli <i>flat assembler</i>
(nikoli <i>fast assembler</i>, i když i toto jméno by bylo příhodné).
<i>FASM</i> má poměrně velké množství zajímavých vlastností. Jedná se o
assembler určený pro platformy x86, IA-32 i x86-64. Pod těmito zkratkami se
skrývá původní šestnáctibitová instrukční sada procesorů řady 8086, dále
32bitové rozšíření této instrukční sady (někdy označované i386, i686 atd. podle
konkrétní varianty, dostupných pracovních registrů atd.) a konečně 64bitové
rozšíření této instrukční sady.</p>

<p>Dále <i>FASM</i> podporuje generování výstupu v&nbsp;různých formátech,
včetně &bdquo;plochého&ldquo; binárního formátu (pouze kódy instrukcí a
případná statická data), souborů COM z&nbsp;DOSu (dtto to samé, ovšem
s&nbsp;posunutou základní adresou), formátů ELF, COFF, PE, MZ atd. K&nbsp;této
důležité problematice se ještě vrátíme v&nbsp;dalším textu.</p>

<p>Zajímavé je, že způsob překladu či formát výstupního souboru, který
assembler generuje, se nezadává přepínači zadávanými na příkazové řádce ani
s&nbsp;využitím konfiguračních souborů. Tyto informace jsou totiž přímo
součástí zdrojových kódů a navíc je zaručeno, že <i>FASM</i> pro stejné vstupní
zdrojové kódy vždy vygeneruje bitově naprosto totožný výstup (což je poněkud
paradoxně problematika, ke které se v&nbsp;IT zase vracíme). Samozřejmě ovšem
můžeme tento koncept &bdquo;ohnout&ldquo;, například tak, že vstupní zdrojový
soubor bude obsahovat informace o výstupním formátu, ale bude direktivou
<strong>include</strong> při překladu vkládat například obecné knihovní
subrutiny atd.</p></p>

<p>A navíc je samotný <i>FASM</i> naprogramován přímo ve <i>FASM</i>, tedy sám
v&nbsp;sobě (viz <a
href="https://github.com/tgrysztar/fasm?tab=readme-ov-file">jeho zdrojové
kódy</a>), což znamená, že dnes již (bez bootstrapingu, viz též <a
href="https://www.root.cz/clanky/muzeme-verit-prekladacum-projekty-resici-schema-duverive-duvery/">Můžeme
věřit překladačům? Projekty řešící schéma „důvěřivé důvěry“</a>) může přeložit
sám sebe. Díky podpoře různých platforem (16bitová, 32bitová, 64bitová) i
různých výstupních formátů lze <i>FASM</i> přeložit (cross překladem) na různé
platformy (DOS, Windows, Linux, <a
href="http://www.menuetos.net/">MenuetOS</a>...) a přitom budou výsledné
spustitelné binární soubory s&nbsp;assemblerem naprosto totožné se soubory
získanými instalací <i>FASM</i> například z&nbsp;repositářů nějaké distribuce
(to si ostatně taktéž ověříme).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Instalace Flat Assembleru</h2>

<p>V&nbsp;případě, že je <i>FASM</i> součástí vaší linuxové distribuce, je jeho
instalace většinou naprosto triviální. Příkladem může být instalace na Linux
Mintu:</p>

<pre>
$ <strong>sudo apt-get install fasm</strong>
</pre>

<p>Průběh instalace:</p>

<pre>
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  libc6-i386
The following NEW packages will be installed:
  fasm libc6-i386
0 upgraded, 2 newly installed, 0 to remove and 5 not upgraded.
Need to get 2 885 kB of archives.
After this operation, 15,1 MB of additional disk space will be used.
&nbsp;
<i>## poznámka: nejvíce místa z&nbsp;oněch 15,1 MB zabere libc6 a nikoli samotný FASM</i>
&nbsp;
Do you want to continue? [Y/n] y
Get:1 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libc6-i386 amd64 2.31-0ubuntu9.15 [2 726 kB]
Get:2 http://archive.ubuntu.com/ubuntu focal/universe amd64 fasm amd64 1.73.22-1 [159 kB]
Fetched 2 885 kB in 4s (745 kB/s)
Selecting previously unselected package libc6-i386.
(Reading database ... 296267 files and directories currently installed.)
Preparing to unpack .../libc6-i386_2.31-0ubuntu9.15_amd64.deb ...
Unpacking libc6-i386 (2.31-0ubuntu9.15) ...
Selecting previously unselected package fasm.
Preparing to unpack .../fasm_1.73.22-1_amd64.deb ...
Unpacking fasm (1.73.22-1) ...
Setting up libc6-i386 (2.31-0ubuntu9.15) ...
Setting up fasm (1.73.22-1) ...
Processing triggers for man-db (2.9.1-1) ...
Processing triggers for libc-bin (2.31-0ubuntu9.15) ...
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se nainstalovala
32bitová knihovna libc6-i386 na 64bitovém systému, ovšem nemusíte se bát
&ndash; Flat Assembler bude schopen plnohodnotně pracovat i s&nbsp;64bitovou
instrukční sadou x86-64.</div></p>

<p>Pokud ovšem <i>FASM</i> pro vaši distribuci Linuxu nenaleznete
popř.&nbsp;pokud potřebujete například jeho variantu pro DOS apod., je nutné
postupovat poněkud specifickým způsobem, a to z&nbsp;toho důvodu, že FASM je
naprogramován přímo ve FASM a tedy není zde možné využít klasický
<i>bootstraping</i>). Bude tedy zapotřebí si ze stránky <a
href="https://flatassembler.net/download.php">https://flatassembler.net/download.php</a>
stáhnout již přeložený <i>FASM</i> a ten následně použít.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Uroboros &ndash; překlad FASMu sebou samým</h2>

Ovšem poměrně zásadním způsobem narušuje schéma &bdquo;důvěřivé důvěry&ldquo; o kterém jsme se zmínili v&nbsp;předchozím textu. Nicméně si alespoň můžeme otestovat, zda takto získaný spustitelný <i>FASM</i> přeloží sám sebe &ndash; jestli tedy budou výsledné binární spustitelné soubory totožné se soubory získanými ze stránky Flat Assembleru.</p>

<p>V&nbsp;adresáři se staženým Flat Assemblerem se totiž nachází i jeho zdrojové kódy. Pokusíme se tedy přeložit <i>FASM</i> jak pro platformu ia-32 (32bitová varianta původní x86), tak i pro platformu x86-64 (64bitová varianta &ndash; resp.&nbsp;ne varianta, ale zcela nová instrukční sada).</p>

<p>Překlad 32bitové varianty FASMu:</p>

<pre>
$ <strong>cd ~/fasm/sources/linux</strong>
&nbsp;
$ <strong>../../fasm fasm.asm</strong>
&nbsp;
flat assembler  version 1.73.32  (16384 kilobytes memory, x64)
5 passes, 1.0 seconds, 107115 bytes.
</pre>

<p>Překlad 64bitové varianty FASMu:</p>

<pre>
$ <strong>cd x64/</strong>
&nbsp;
$ <strong>../../../fasm fasm.asm</strong>
&nbsp;
flat assembler  version 1.73.32  (16384 kilobytes memory, x64)
5 passes, 119689 bytes.
</pre>

<p><div class="rs-tip-major">Poznámka: mimochodem si povšimněte rychlosti překladu.</div></p>

<p>Spustitelné binární soubory, které jsou výsledkem překladu, porovnáme se soubory, které jsme získali rozbalením FASMu. Porovnáme tedy jak 32bitovou variantu FASMu, tak i variantu 64bitovou, a to například nástrojem <strong>diff</strong> nebo <strong>cmp</strong>:</p>

<pre>
$ <strong>cd ~/fasm/sources/linux</strong>
&nbsp;
$ <strong>cmp -b fasm source/linux/fasm</strong>
&nbsp;
$ <strong>cmp -b fasm.x64 source/linux/x64/fasm</strong>
</pre>

<p>V&nbsp;tomto případě by neměly příkazy <strong>cmp</strong> vypsat žádné informace o rozdílných bajtech.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. &bdquo;Hello, world!&ldquo; naprogramovaný v&nbsp;různých assemblerech pro různé architektury</h2>

<p>Pokusme se nyní v&nbsp;různých assemblerech zapsat program, který na
terminál vypíše zprávu &bdquo;Hello, world!&ldquo; a následně se ukončí. Přitom
si budeme chtít tuto operaci vyzkoušet pro různé architektury (pro jednoduchost
zůstaneme u platforem x86, IA-32 a x86-64). Budeme tedy potřebovat realizovat
dvě operace:</p>

<ol>
<li>Výpis zprávy na terminál (tedy na STDOUT)</li>
<li>Ukončení procesu</li>
</ol>

<p>Vzhledem k&nbsp;tomu, že i ta nejjednodušší aplikace naprogramovaná
v&nbsp;assembleru musí nějakým způsobem ukončit svou činnost, je nutné buď
zavolat vhodnou knihovní funkci (z&nbsp;<strong>libc</strong>)
popř.&nbsp;použít takzvaný &bdquo;syscall&ldquo;. V&nbsp;kontextu operačního
systému Linux se pod tímto termínem skrývá volání nějaké funkce umístěné přímo
v&nbsp;jádru operačního systému. A jak uvidíme dále, je prakticky totožná
operace dostupná i ve starobylém operačním systému DOS.</p>

<p>V&nbsp;praxi to funguje následovně: podle požadavků konkrétní funkce se
naplní pracovní registry popř.&nbsp;datové struktury uložené v&nbsp;paměti,
následně se číslo služby uloží do předem známého pracovního registru a zavolá
se nějaká specifická instrukce, která přímo či nepřímo zavolá jádro (nepřímé
volání spočívá v&nbsp;tom, že se vyvolá SW přerušení).</p>

<table>
<tr><th>Architektura</th><th>Číslo služby v</th><th>Instrukce pro syscall</th><th>Návratová hodnota v</th></tr>
<tr><td>ARM 32 s EABI</td><td>r7</td><td>SWI 0h</td><td>r0</td></tr>
<tr><td>ARM 64</td><td>x8</td><td>SVC #0</td><td>x0</td></tr>
<tr><td>x86 DOS</td><td>ah</td><td>INT 21h</td><td>ax</td></tr>
<tr><td>IA-32 Linux</td><td>eax</td><td>INT 80h</td><td>eax</td></tr>
<tr><td>x86_64 Linux</td><td>rax</td><td>SYSCALL</td><td>rax</td></tr>
<tr><td>Motorola 68k</td><td>d0</td><td>TRAP #0</td><td>d0</td></tr>
</table>

<p>Programy, které si ukážeme a odladíme dnes, budou používat následující dvě
systémová volání (<i>syscally</i>), které se v&nbsp;Linuxu jmenují:</p>

<table>
<tr><th>Syscall</th><th>Význam</th></tr>
<tr><td>sys_exit </td><td>ukončení procesu s&nbsp;předáním návratového kódu</td></tr>
<tr><td>sys_write</td><td>zápis přes deskriptor souboru (například do standardního výstupu)</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

-rw-r--r--. 1 ptisnovs ptisnovs     23 May 10 15:23 hello.com
-rw-r--r--. 1 ptisnovs ptisnovs     59 May 10 15:21 hello.exe


$ od -t x1 hello.com
0000000 b4 09 ba 0a 01 cd 21 31 c0 c3 48 65 6c 6c 6f 20
0000020 77 6f 72 6c 64 21 24
0000027

$ od -t x1 hello.exe
0000000 4d 5a 3b 00 01 00 00 00 02 00 00 01 ff ff 02 00
0000020 00 10 00 00 00 00 00 00 1c 00 00 00 00 00 00 00
0000040 0e 1f b4 09 ba 0e 00 cd 21 b8 00 4c cd 21 48 65
0000060 6c 6c 6f 20 77 6f 72 6c 64 21 24
0000073



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
0100: B4 09             MOV   AH, 009h                      
0102: BA 0A 00          MOV   DX, 0000Ah                    
0105: CD 21             INT   021h                          
0107: 31                                                    
0108: C0                                                    
0109: C3                RET                                 
010A: 48                DEC   AX                            
010B: 65                                                    
010C: 6C                                                    
010D: 6C                                                    
010E: 6F                                                    
010F: 20                                                    
0110: 77 6F             JA    0181h                         
0112: 72 6C             JB    0180h                         
0114: 64                                                    
0115: 21                                                    
0116: 24                                                    
</pre>

<pre>
0100: B4 09             MOV   AH, 009h                      
0102: BA 0A 01          MOV   DX, 0010Ah                    
0105: CD 21             INT   021h                          
0107: 31                                                    
0108: C0                                                    
0109: C3                RET                                 
010A: 48                DEC   AX                            
010B: 65                                                    
010C: 6C                                                    
010D: 6C                                                    
010E: 6F                                                    
010F: 20                                                    
0110: 77 6F             JA    0181h                         
0112: 72 6C             JB    0180h                         
0114: 64                                                    
0115: 21                                                    
0116: 24                                                    
</pre>


<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny výše popsané demonstrační příklady byly uloženy do repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations/">https://github.com/tisnik/presentations/</a>.
V&nbsp;tabulce umístěné pod tímto odstavcem jsou uvedeny odkazy na tyto
příklady:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Popis příkladu</th><th>Cesta</th></tr>
<tr><td>1</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/tree/master/assembler/fasm/">https://github.com/tisnik/ocaml-examples/tree/master/assembler/fasm/</a></td></tr>
<tr><td>2</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/tree/master/assembler/fasm/">https://github.com/tisnik/ocaml-examples/tree/master/assembler/fasm/</a></td></tr>
<tr><td>3</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/tree/master/assembler/fasm/">https://github.com/tisnik/ocaml-examples/tree/master/assembler/fasm/</a></td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/tree/master/assembler/fasm/">https://github.com/tisnik/ocaml-examples/tree/master/assembler/fasm/</a></td></tr>
<tr><td>5</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/tree/master/assembler/fasm/">https://github.com/tisnik/ocaml-examples/tree/master/assembler/fasm/</a></td></tr>
<tr><td>6</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/tree/master/assembler/fasm/">https://github.com/tisnik/ocaml-examples/tree/master/assembler/fasm/</a></td></tr>
<tr><td>7</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/tree/master/assembler/fasm/">https://github.com/tisnik/ocaml-examples/tree/master/assembler/fasm/</a></td></tr>
<tr><td>8</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/tree/master/assembler/fasm/">https://github.com/tisnik/ocaml-examples/tree/master/assembler/fasm/</a></td></tr>
<tr><td>9</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/tree/master/assembler/fasm/">https://github.com/tisnik/ocaml-examples/tree/master/assembler/fasm/</a></td></tr>
</table>

hello_bin.asm
hello_com.asm
hello_exe.asm
hello_i386.asm
hello_world_nasm.asm
hello_world_x86_64_gas.s
hello_world_x86_64_tcc.s
hello_x86_64_1.asm
hello_x86_64_2.asm



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>flat assembler: Assembly language resources<br />
<a href="https://flatassembler.net/">https://flatassembler.net/</a>
</li>

<li>FASM na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/FASM">https://en.wikipedia.org/wiki/FASM</a>
</li>

<li>Fresh IDE FASM inside<br />
<a href="https://fresh.flatassembler.net/">https://fresh.flatassembler.net/</a>
</li>

<li>Mikrořadiče eZ8 aneb potomek legendárního Z80<br />
<a href="https://www.root.cz/clanky/mikroradice-ez8-aneb-potomek-legendarniho-z80/">https://www.root.cz/clanky/mikroradice-ez8-aneb-potomek-legendarniho-z80/</a>
</li>

<li>Osmibitové mikrořadiče PIC (2)<br />
<a href="https://www.root.cz/clanky/osmibitove-mikroradice-pic-2/">https://www.root.cz/clanky/osmibitove-mikroradice-pic-2/</a>
</li>

<li>Mikrořadiče a jejich aplikace v jednoduchých mikropočítačích (2)<br />
<a href="https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/">https://www.root.cz/clanky/mikroradice-a-jejich-aplikace-v-jednoduchych-mikropocitacich-2/</a>
</li>

<li>Původní domovská stránka Tiny C Compileru<br />
<a href="https://bellard.org/tcc/">https://bellard.org/tcc/</a>
</li>

<li>Tiny C Compiler na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Tiny_C_Compiler">https://en.wikipedia.org/wiki/Tiny_C_Compiler</a>
</li>

<li>TinyCC Assembler<br />
<a href="https://bellard.org/tcc/tcc-doc.html#asm">https://bellard.org/tcc/tcc-doc.html#asm</a>
</li>

<li>Repositář Tiny C Compileru<br />
<a href="https://repo.or.cz/w/tinycc.git">https://repo.or.cz/w/tinycc.git</a>
</li>

<li>Linux System Call Table for x86 64<br />
<a href="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/">https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/</a>
</li>

<li>A Practical Guide to GCC Inline Assembly<br />
<a href="https://blog.alex.balgavy.eu/a-practical-guide-to-gcc-inline-assembly/">https://blog.alex.balgavy.eu/a-practical-guide-to-gcc-inline-assembly/</a>
</li>

<li>Bit banging<br />
<a href="https://en.wikipedia.org/wiki/Bit_banging">https://en.wikipedia.org/wiki/Bit_banging</a>
</li>

<li>Warnings Are Your Friend - A Code Quality Primer<br />
<a href="https://hackaday.com/2018/11/06/warnings-are-your-friend-a-code-quality-primer/">https://hackaday.com/2018/11/06/warnings-are-your-friend-a-code-quality-primer/</a>
</li>

<li>Defending Against Compiler-Based Backdoors<br />
<a href="https://blog.regehr.org/archives/1241">https://blog.regehr.org/archives/1241</a>
</li>

<li>Reflections on Trusting Trust<br />
<a href="https://www.win.tue.nl/~aeb/linux/hh/thompson/trust.html">https://www.win.tue.nl/~aeb/linux/hh/thompson/trust.html</a>
</li>

<li>Coding Machines (povídka)<br />
<a href="https://www.teamten.com/lawrence/writings/coding-machines/">https://www.teamten.com/lawrence/writings/coding-machines/</a>
</li>

<li>Stage0<br />
<a href="https://bootstrapping.miraheze.org/wiki/Stage0">https://bootstrapping.miraheze.org/wiki/Stage0</a>
</li>

<li>Projekt stage0 na GitHubu<br />
<a href="https://github.com/oriansj/stage0">https://github.com/oriansj/stage0</a>
</li>

<li>Bootstraping wiki<br />
<a href="https://bootstrapping.miraheze.org/wiki/Main_Page">https://bootstrapping.miraheze.org/wiki/Main_Page</a>
</li>

<li>Bootstrapped 6502 Assembler<br />
<a href="https://github.com/robinluckey/bootstrap-6502">https://github.com/robinluckey/bootstrap-6502</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>run6502, lib6502 — 6502 microprocessor emulator<br />
<a href="http://piumarta.com/software/lib6502/">http://piumarta.com/software/lib6502/</a>
</li>

<li>Simple Computer Simulator Instruction-Set<br />
<a href="http://www.science.smith.edu/dftwiki/index.php/Simple_Computer_Simulator_Instruction-Set">http://www.science.smith.edu/dftwiki/index.php/Simple_Computer_Simulator_Instruction-Set</a>
</li>

<li>Bootstrapping#Computing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Bootstrapping#Computing">https://en.wikipedia.org/wiki/Bootstrapping#Computing</a>
</li>

<li>Bootstrapping (compilers)<br />
<a href="https://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29">https://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29</a>
</li>

<li>Bootstrapable Builds<br />
<a href="http://bootstrappable.org/">http://bootstrappable.org/</a>
</li>

<li>What is a coder's worst nightmare?<br />
<a href="https://www.quora.com/What-is-a-coders-worst-nightmare/answer/Mick-Stute">https://www.quora.com/What-is-a-coders-worst-nightmare/answer/Mick-Stute</a>
</li>

<li>Linux Assembly<br />
<a href="http://asm.sourceforge.net/">http://asm.sourceforge.net/</a>
</li>

<li>Tombstone diagram (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tombstone_diagram">https://en.wikipedia.org/wiki/Tombstone_diagram</a>
</li>

<li>History of compiler construction (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/History_of_compiler_construction">https://en.wikipedia.org/wiki/History_of_compiler_construction</a>
</li>

<li>Self-hosting (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Self-hosting">https://en.wikipedia.org/wiki/Self-hosting</a>
</li>

<li>GNU Mes: Maxwell Equations of Software<br />
<a href="https://gitlab.com/janneke/mes">https://gitlab.com/janneke/mes</a>
</li>

<li>Tiny C Compiler<br />
<a href="https://bellard.org/tcc/">https://bellard.org/tcc/</a>
</li>

<li>Welcome to C--<br />
<a href="https://www.cs.tufts.edu/~nr/c--/index.html">https://www.cs.tufts.edu/~nr/c--/index.html</a>
</li>

<li>c4 - C in four functions<br />
<a href="https://github.com/rswier/c4">https://github.com/rswier/c4</a>
</li>

<li>Tiny BASIC (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tiny_BASIC">https://en.wikipedia.org/wiki/Tiny_BASIC</a>
</li>

<li>ARM GCC Inline Assembler Cookbook<br />
<a href="http://www.ethernut.de/en/documents/arm-inline-asm.html">http://www.ethernut.de/en/documents/arm-inline-asm.html</a>
</li>

<li>Extended Asm - Assembler Instructions with C Expression Operands<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a>
</li>

<li>ARM inline asm secrets<br />
<a href="http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/">http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/</a>
</li>

<li>How to Use Inline Assembly Language in C Code<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C">https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C</a>
</li>

<li>GCC-Inline-Assembly-HOWTO<br />
<a href="http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html</a>
</li>

<li>A Brief Tutorial on GCC inline asm (x86 biased)<br />
<a href="http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm">http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm</a>
</li>

<li>GCC Inline ASM<br />
<a href="http://locklessinc.com/articles/gcc_asm/">http://locklessinc.com/articles/gcc_asm/</a>
</li>

<li>System cally pro AArch64 na Linuxu<br />
<a href="https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/unistd.h">https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/unistd.h</a>
</li>

<li>C Functions Without Arguments<br />
<a href="https://eklitzke.org/c-functions-without-arguments">https://eklitzke.org/c-functions-without-arguments</a>
</li>

<li>GNU Assembler Examples<br />
<a href="http://cs.lmu.edu/~ray/notes/gasexamples/">http://cs.lmu.edu/~ray/notes/gasexamples/</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>The GNU Assembler Tutorial<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html">http://tigcc.ticalc.org/doc/gnuasm.html</a>
</li>

<li>The GNU Assembler - macros<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html#SEC109">http://tigcc.ticalc.org/doc/gnuasm.html#SEC109</a>
</li>

<li>Generating Mixed Source and Assembly List using GCC<br />
<a href="http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/">http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/</a>
</li>

<li>Calling subroutines<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm</a>
</li>

<li>ARM Assembly Language Programming<br />
<a href="http://peter-cockerell.net/aalp/html/frames.html">http://peter-cockerell.net/aalp/html/frames.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html">https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html</a>
</li>

<li>Linux Assembly website<br />
<a href="http://asm.sourceforge.net/">http://asm.sourceforge.net/</a>
</li>

<li>Using Assembly Language in Linux<br />
<a href="http://asm.sourceforge.net/articles/linasm.html">http://asm.sourceforge.net/articles/linasm.html</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>vasm &ndash; dokumentace<br />
<a href="http://sun.hasenbraten.de/vasm/release/vasm.html">http://sun.hasenbraten.de/vasm/release/vasm.html</a>
</li>

<li>The Yasm Modular Assembler Project<br />
<a href="http://yasm.tortall.net/">http://yasm.tortall.net/</a>
</li>

<li>680x0:AsmOne<br />
<a href="http://www.amigacoding.com/index.php/680x0:AsmOne">http://www.amigacoding.com/index.php/680x0:AsmOne</a>
</li>

<li>ASM-One Macro Assembler<br />
<a href="http://en.wikipedia.org/wiki/ASM-One_Macro_Assembler">http://en.wikipedia.org/wiki/ASM-One_Macro_Assembler</a>
</li>

<li>ASM-One pages<br />
<a href="http://www.theflamearrows.info/documents/asmone.html">http://www.theflamearrows.info/documents/asmone.html</a>
</li>

<li>Základní informace o ASM-One<br />
<a href="http://www.theflamearrows.info/documents/asminfo.html">http://www.theflamearrows.info/documents/asminfo.html</a>
</li>

<li>Linux Syscall Reference<br />
<a href="http://syscalls.kernelgrok.com/">http://syscalls.kernelgrok.com/</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

