<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Použití assembleru v&nbsp;Linuxu: podmínky při zpracování dat na architektuře AArch64</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Použití assembleru v&nbsp;Linuxu: podmínky při zpracování dat na architektuře AArch64</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;již dvacáté první části seriálu o použití assembleru v&nbsp;Linuxu dokončíme téma, kterému jsme se začali věnovat minule. Jedná se o způsob použití podmínek (resp.&nbsp;přesněji řečeno instrukcí s&nbsp;podmínkami) při zpracování dat na moderní 64bitové mikroprocesorové architektuře AArch64. Procesory s&nbsp;touto architekturou totiž kromě podmíněných skoků podporují i některé další instrukce s&nbsp;podmínkou, které byly navrženy a implementovány na základě výsledků studie reálných aplikací.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Použití assembleru v&nbsp;Linuxu: podmínky při zpracování dat na architektuře AArch64</a></p>
<p><a href="#k02">2. Již známé instrukce: podmíněné skoky</a></p>
<p><a href="#k03">3. Nové instrukce</a></p>
<p><a href="#k04">4. Instrukce <strong>CSET</strong> &ndash; Conditional Set</a></p>
<p><a href="#k05">5. Instrukce <strong>CSETM</strong> &ndash; Conditional Set Mask</a></p>
<p><a href="#k06">6. Instrukce <strong>CSEL</strong> &ndash; Conditional Select</a></p>
<p><a href="#k07">7. Instrukce <strong>CSINV</strong> &ndash; Conditional Select Invert</a></p>
<p><a href="#k08">8. Instrukce <strong>CSINC</strong> &ndash; Conditional Select Increment</a></p>
<p><a href="#k09">9. Instrukce <strong>CSNEG</strong> &ndash; Conditional Select Negate</a></p>
<p><a href="#k10">10. Instrukce <strong>CINC</strong> &ndash; Conditional Increment</a></p>
<p><a href="#k11">11. Instrukce <strong>CINV</strong> &ndash; Conditional Invert</a></p>
<p><a href="#k12">12. Instrukce <strong>CNEG</strong> &ndash; Conditional Negate</a></p>
<p><a href="#k13">13. Instrukce <strong>TBZ</strong> a <strong>TBNZ</strong> (Test and Branch...)</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Použití assembleru v&nbsp;Linuxu: podmínky při zpracování dat na architektuře AArch64</h2>

<p>V&nbsp;dnešní části seriálu o použití assembleru v&nbsp;Linuxu se zaměříme na poměrně zajímavou a prozatím relativně novou oblast. Jedná se o speciální instrukce implementované na moderní mikroprocesorové architektuře AArch64, které prování specifikovanou činnost pouze za předpokladu, že je splněna nějaká zadaná podmínka (kód podmínky je přitom součástí instrukčního slova). Připomeňme si, že na rozdíl od <a href="https://mojefedora.cz/pouziti-assembleru-v-linuxu-podminky-rozvetveni-a-programove-smycky-na-procesorech-arm/">původní 32bitové architektury ARM</a> (dnes označované ARM32) <strong>ne</strong>mají všechny instrukce na AArch64 rezervovány čtyři nejvyšší bity pro specifikaci podmínky. Tato vlastnost byla na základě analýzy existujících programových strojových kódů zrušena a podmínky je tak možné použít jen u vybrané množiny instrukcí. Do této množiny byly zahrnuty i zcela nové instrukce, které na ARM32 nenalezneme, což je opět důsledek analýzy stávajících strojových kódů, ale i studia funkce překladačů.</p>

<p>Poznámka: <a href="http://yarchive.net/comp/carry_bit.html">podle některých vývojářů</a> může mít extenzivní použití příznakových bitů negativní vliv na výkonnost procesoru, což je však téma, které je řešeno nejenom na AArch64, ale i na x86-64.</p>

<p>Připomeňme si, že na procesorové architektuře AArch64 je použito celkem čtrnáct různých podmínek, k&nbsp;nimž se někdy přidává i pseudopodmínka <strong>AL</strong> neboli <i>Any/Always</i>. V&nbsp;tomto případě se samozřejmě o žádnou skutečnou podmínku nejedná, neboť je instrukce provedena v&nbsp;každém případě.</p>

<p>Prvních šest podmínek testuje hodnotu pouze jediného bitového příznaku, a to <strong>N (negative)</strong>, <strong>Z (zero)</strong> či <strong>V (overflow)</strong>:</p>

<table>
<tr><th>Kód</th><th>Přípona</th><th>Význam</th><th>Testovaná podmínka</th></tr>
<tr><td>0000</td><td>EQ</td><td>Z = 1</td><td>rovnost po porovnání (či nulový výsledek)</td></tr>
<tr><td>0001</td><td>NE</td><td>Z = 0</td><td>nerovnost po porovnání (či nenulový výsledek)</td></tr>
<tr><td>0100</td><td>MI</td><td>N = 1</td><td>výsledek je záporný</td></tr>
<tr><td>0101</td><td>PL</td><td>N = 0</td><td>výsledek je kladný či nulový</td></tr>
<tr><td>0110</td><td>VS</td><td>V = 1</td><td>nastalo přetečení (<i>overflow</i>)</td></tr>
<tr><td>0111</td><td>VC</td><td>V = 0</td><td>nenastalo přetečení (<i>overflow</i>)</td></tr>
<tr><td>1110</td><td>AL</td><td>Any/Always</td><td>většinou se nezapisuje, implicitní podmínka</td></tr>
</table>

<p>Další čtyři podmínkové kódy se většinou používají při porovnávání dvou hodnot bez znaménka (<i>unsigned</i>). V&nbsp;těchto případech se testují stavy příznakových bitů <strong>C (carry)</strong> a <strong>Z (zero)</strong>, přesněji řečeno kombinace těchto bitů:</p>

<table>
<tr><th>Kód </th><th>Přípona</th><th>Význam</th><th>Testovaná podmínka</th></tr>
<tr><td>0010</td><td>CS/HS</td><td>C = 1</td><td>&ge;</td></tr>
<tr><td>0011</td><td>CC/LO</td><td>C = 0</td><td>&lt;</td></tr>
<tr><td>1000</td><td>HI</td><td>C = 1 &amp; Z = 0</td><td>&gt;</td></tr>
<tr><td>1001</td><td>LS</td><td>C = 0 | Z = 1 </td><td>&le;</td></tr>
</table>

<p>Poslední čtyři podmínkové kódy se používají pro porovnávání hodnot se znaménkem (<i>signed</i>). V&nbsp;těchto případech se namísto příznakových bitů <strong>(C) carry</strong> a <strong>(Z) zero</strong> testují kombinace bitů <strong>(N) negative</strong>, <strong>(V) overflow</strong> a <strong>(Z) zero</strong>:</p>

<table>
<tr><th>Kód </th><th>Přípona</th><th>Význam</th><th>Testovaná podmínka</th></tr>
<tr><td>1010</td><td>GE</td><td>N == V</td><td>&ge;</td></tr>
<tr><td>1011</td><td>LT</td><td>N &ne; V </td><td>&lt;</td></tr>
<tr><td>1100</td><td>GT</td><td>Z = 0, N = V </td><td>&gt;</td></tr>
<tr><td>1101</td><td>LE</td><td>Z = 1, N &ne; V</td><td>&le;</td></tr>
</table>

<p>Důležité je, že všechny dále popsané instrukce podporují všechny podmínky. Výjimku tvoří minule popsané instrukce <strong>CBZ</strong> a <strong>CBNZ</strong>, které pouze testovaly nulovost či naopak nenulovost vybraného pracovního registru.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Již známé instrukce: podmíněné skoky</h2>

<p>Již <a href="https://mojefedora.cz/pouziti-assembleru-v-linuxu-riscova-architektura-aarch64-programove-smycky/">minule</a> jsme se zmínili o některých instrukcích provedených či naopak neprovedených na základě nějaké podmínky. Jednalo se o tyto instrukce:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>B.podmínka návěští</td><td>podmíněný skok po splnění podmínky na zadané návěští (kódy podmínek byly uvedeny výše)</td></tr>
<tr><td>CBZ Wn, návěští</td><td>pokud platí Wn=0, skok na zadané návěští</td></tr>
<tr><td>CBZ Xn, návěští</td><td>pokud platí Xn=0, skok na zadané návěští</td></tr>
<tr><td>CBNZ Wn, návěští</td><td>pokud platí Wn&ne;0, skok na zadané návěští</td></tr>
<tr><td>CBNZ Xn, návěští</td><td>pokud platí Xn&ne;0, skok na zadané návěští</td></tr>
</table>

<p>Tyto instrukce jsou (ve své variantě s&nbsp;32bitovými registry) zpětně kompatibilní s&nbsp;instrukcemi známými z&nbsp;32bitové architektury ARM32.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Nové instrukce</h2>

<p>Mezi nové instrukce s&nbsp;podmínkou, které lze použít na architektuře AArch64, patří především:</p>

<table>
<tr><th>Instrukce</th><th>Význam mnemotechnického kódu</th><th>Kapitola</th></tr>
<tr><td>CSET </td><td>Conditional Set</td><td><a href="#k04">4</a></td></tr>
<tr><td>CSETM</td><td>Conditional Set Mask</td><td><a href="#k05">5</a></td></tr>
<tr><td>CSEL </td><td>Conditional Select</td><td><a href="#k06">6</a></td></tr>
<tr><td>CSINV</td><td>Conditional Select Invert</td><td><a href="#k07">7</a></td></tr>
<tr><td>CSINC</td><td>Conditional Select Increment</td><td><a href="#k08">8</a></td></tr>
<tr><td>CSNEG</td><td>Conditional Select Negate</td><td><a href="#k09">9</a></td></tr>
<tr><td>CINC</td><td>Conditional Increment</td><td><a href="#k10">10</a></td></tr>
<tr><td>CINV</td><td>Conditional Invert</td><td><a href="#k11">11</a></td></tr>
<tr><td>CNEG</td><td>Conditional Negate</td><td><a href="#k12">12</a></td></tr>
<tr><td>TBZ </td><td>Test and Branch if Zero</td><td><a href="#k13">13</a></td></tr>
<tr><td>TBNZ</td><td>Test and Branch if not zero</td><td><a href="#k13">13</a></td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instrukce <strong>CSET</strong> &ndash; Conditional Set</h2>

<p>První novou instrukcí, s&nbsp;níž se dnes seznámíme, je instrukce nazvaná <strong>CSET</strong> neboli <i>Conditional Set</i>. Tato instrukce vlastně přímo odpovídá požadavkům kladeným na datový typ <i>boolean</i> v&nbsp;mnoha programovacích jazycích, v&nbsp;nichž je hodnota <i>true</i> interně reprezentována jedničkou a hodnota <i>false</i> nulou. Tato instrukce existuje ve dvou variantách, přičemž první varianta pracuje s&nbsp;32bitovým a druhá varianta s&nbsp;64bitovým operandem):</p>

<pre>
CSET Wd, condition
CSET Xd, condition
</pre>

<p>Například:</p>

<pre>
CSET W3, EQ
CSET W4, MI
CSET X5, HI
</pre>

<p>Tato instrukce pracuje následujícím způsobem &ndash; v&nbsp;případě, že je podmínka zapsaná ve druhém operandu <i>cond</i> splněna, uloží se do cílového registru <strong>Wd</strong> či do registru <strong>Xd</strong> hodnota 1. Pokud podmínka naopak splněna není, uloží se do registru <strong>Wd</strong> či <strong>Xd</strong> hodnota 0:</p>

<pre>
cíl = condition ? 1 : 0;
</pre>

<p>Ve skutečnosti se v&nbsp;případě <strong>CSET</strong> jedná o alias pro instrukci <strong>CSINC</strong> popsanou dále (podmínka ovšem musí být v&nbsp;tomto případě negována):</p>

<pre>
CSINC Wd, WZR, WZR, invert(condition)
CSINC Xd, XZR, XZR, invert(condition)
</pre>

<p>neboli:</p>

<pre>
cíl = invert(condition) ? 0 : 0+1;
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Instrukce <strong>CSETM</strong> &ndash; Conditional Set Mask</h2>

<p>V&nbsp;některých případech je nutné ukládat pravdivostní hodnoty odlišným způsobem &ndash; <i>true</i> bude reprezentováno hodnotou, v&nbsp;níž jsou všechny bity nastaveny na jedničku (v&nbsp;případě celých čísel se znaménkem to odpovídá hodnotě -1), <i>false</i> naopak hodnotou, v&nbsp;níž jsou všechny bity nulové. V&nbsp;tomto případě lze pro nastavení použít instrukci <strong>CSETM</strong>:</p>

<pre>
CSETM Wd, condition
CSETM Xd, condition
</pre>

<p>Ve vyšším programovacím jazyce by bylo možné napsat:</p>

<pre>
cíl = condition ? -1 : 0;
</pre>

<p>Poznámka: u 32bitového registru odpovídá -1 hodnotě 0xffff&nbsp;ffff, u 64bitového registru pak hodnotě 0xffff&nbsp;ffff&nbsp;ffff&nbsp;ffff.</p>

<p>Opět se jedná o aliasy, tentokrát ovšem na instrukci <strong>CSINV</strong>:</p>

<pre>
CSINV Wd, WZR, WZR, invert(condition)
CSINV Xd, XZR, XZR, invert(condition)
</pre>

<p>Poznámka: slovo &bdquo;mask&ldquo; v&nbsp;názvu instrukce skutečně poměrně přesně odpovídá jednomu způsobu použití, protože pokud platí <i>true=-1</i> a <i>false=0</i>, lze s&nbsp;těmito hodnotami provádět logický součin a součet bit po bitu, a to i v&nbsp;případě, kdy je druhým operandem odlišná hodnota.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instrukce <strong>CSEL</strong> &ndash; Conditional Select</h2>

<p>Další užitečnou instrukcí s&nbsp;podmínkou je instrukce zapisovaná mnemotechnickým kódem <strong>CSEL</strong> neboli <i>Conditional Select</i>. I tato instrukce existuje ve dvou variantách &ndash; 32bitové a 64bitové:</p>

<pre>
CSEL Wd, Wn, Wm, condition
CSEL Xd, Xn, Xm, condition
</pre>

<p>Tato instrukce pracuje následovně: pokud je podmínka splněna, uloží se do cílového registru <strong>Wd</strong> či <strong>Xd</strong> hodnota z&nbsp;prvního zdrojového registru <strong>Wn</strong> nebo <strong>Xn</strong>. Pokud podmínka splněna není, je do cílového registru <strong>Wd/Xd</strong> uložena hodnota z&nbsp;druhého zdrojového registru <strong>Wm/Xm</strong>.</p>

<p>Instrukce <strong>CSEL</strong> tedy nahrazuje programovou konstrukci typu:</p>

<pre>
cíl = condition ? zdroj1 : zdroj2;
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Instrukce <strong>CSINV</strong> &ndash; Conditional Select Invert</h2>

<p>Alternativní formou instrukce <strong>CSEL</strong> je instrukce <strong>CSINV</strong> neboli <i>Conditional Select Invert</i>:</p>

<pre>
CSINV Wd, Wn, Wm, condition
CSINV Xd, Xn, Xm, condition
</pre>

<p>Tato instrukce pracuje následovně: pokud je podmínka splněna, uloží se do cílového registru <strong>Wd</strong> či <strong>Xd</strong> hodnota z&nbsp;prvního zdrojového registru <strong>Wn</strong> nebo <strong>Xn</strong>. Pokud podmínka splněna není, je do cílového registru <strong>Wd/Xd</strong> uložena negovaná hodnota přečtená z&nbsp;druhého zdrojového registru <strong>Wm/Xm</strong>.</p>

<p>Instrukce <strong>CSINV</strong> tedy nahrazuje programovou konstrukci typu:</p>

<pre>
cíl = condition ? zdroj1 : ~zdroj2;
</pre>

<p>Poznámka: znak ~ je používán v&nbsp;programovacím jazyku C a od něj odvozených jazycích pro zápis unárního operátoru negace všech bitů (jedničkový doplněk).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Instrukce <strong>CSINC</strong> &ndash; Conditional Select Increment</h2>

<p>Zajímavá je instrukce <strong>CSINC</strong>, která kombinuje možnosti instrukce <strong>CINC</strong> a <strong>CSEL</strong>:</p>

<pre>
CSINC Wd, Wn, Wm, condition
CSINC Xd, Xn, Xm, condition
</pre>

<p>Tato instrukce provádí následující činnost:</p>

<pre>
Wd = condition ? Wn : Wm+1;
Xd = condition ? Xn : Xm+1;
</pre>

<p>Jak jsme si již řekli <a href="#k04">ve čtvrté kapitole</a>, je touto instrukcí realizována i pseudoinstrukce <strong>CSET</strong>, a to tehdy, pokud jsou oba zdrojové registry nulové (<strong>WZR</strong> a <strong>XZR</strong>). V&nbsp;tomto případě se do cílového registru dosadí 0 či 0+1=1:</p>

<pre>
CSINC Wd, WZR, WZR, invert(condition)
CSINC Xd, XZR, XZR, invert(condition)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Instrukce <strong>CSNEG</strong> &ndash; Conditional Select Negate</h2>

<p>Instrukce nazvaná <strong>CSNEG</strong> se do jisté míry podobá instrukci <strong>CSINV</strong>, ovšem s&nbsp;tím rozdílem, že se namísto jedničkového doplňku (negace) používá při nesplnění podmínky dvojkový doplněk:</p>

<pre>
CSNEG Wd, Wn, Wm, condition
CSNEG Xd, Xn, Xm, condition
</pre>

<p>Tato instrukce pracuje následovně: pokud je podmínka splněna, uloží se do cílového registru <strong>Wd</strong> či <strong>Xd</strong> hodnota z&nbsp;prvního zdrojového registru <strong>Wn</strong> nebo <strong>Xn</strong>. Pokud podmínka splněna není, je do cílového registru <strong>Wd/Xd</strong> uložena hodnota přečtená z&nbsp;druhého zdrojového registru <strong>Wm/Xm</strong>, u které se nejdříve změní znaménko (onen zmíněný dvojkový doplněk).</p>

<p>Tato instrukce tedy nahrazuje programovou konstrukci typu:</p>

<pre>
cíl = condition ? zdroj1 : -zdroj2;
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Instrukce <strong>CINC</strong> &ndash; Conditional Increment</h2>

<p>Instrukce <strong>CINC</strong> je aliasem pro instrukci <strong>CSINC</strong>, ovšem s&nbsp;převrácenou podmínkou a shodnými zdrojovými registry:</p>

<pre>
CINC Wd, Wn, condition
CINC Xd, Xn, condition
</pre>

<p>Tato instrukce provádí následující činnost (je zde jen jediný zdrojový registr):</p>

<pre>
Wd = condition ? Wn+1 : Wn;
Xd = condition ? Xn+1 : Xn;
</pre>

<p>Použití této instrukce je různé, může se například použít pro realizaci příkazu <strong>continue</strong> v&nbsp;programovacím jazyku C.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Instrukce <strong>CINV</strong> &ndash; Conditional Invert</h2>

<p>Podobná instrukce taktéž s&nbsp;jedním zdrojovým registrem se jmenuje <strong>CINV</strong>:</p>

<pre>
CINV Wd, Wn, condition
CINV Xd, Xn, condition
</pre>

<p>Prováděná činnost je následující (tilda znamená negaci bit po bitu):</p>

<pre>
Wd = condition ? ~Wn : Wn;
Xd = condition ? ~Xn : Xn;
</pre>

<p>Ve skutečnosti se opět jedná o instrukční alias rozpoznávaný assemblery. V&nbsp;tomto případě lze <strong>CINV</strong> nahradit instrukcí <strong>CSINV</strong> s&nbsp;oběma zdrojovými registry totožnými:</p>

<pre>
CSINV Wd, Wn, Wn, invert(condition)
CSINV Xd, Xn, Xn, invert(condition)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Instrukce <strong>CNEG</strong> &ndash; Conditional Negate</h2>

<p>Poslední instrukce, přesněji řečeno (opět) instrukční alias se jmenuje <strong>CNEG</strong>:</p>

<pre>
CNEG Wd, Wn, condition
CNEG Xd, Xn, condition
</pre>

<p>Prováděná činnost:</p>

<pre>
Wd = condition ? -Wn : Wn;
Xd = condition ? -Xn : Xn;
</pre>

<p>Tento alias lze nahradit za <strong>CSNEG</strong> s&nbsp;totožnými zdrojovými registry a opačně zapsanou podmínkou:</p>

<pre>
CSNEG Wd, Wn, Wn, invert(condition)
CSNEG Xd, Xn, Xn, invert(condition)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Instrukce <strong>TBZ</strong> a <strong>TBNZ</strong> (Test and Branch...)</h2>

<p>Poslední dvě instrukce, které si dnes popíšeme, spadají do kategorie podmíněných skoků. Tyto instrukce se jmenují <strong>TBZ</strong> (<i>Test and Branch if Zero</i>) a <strong>TBNZ</strong> (<i>Test and Branch if Not Zero</i>). Způsob zápisu těchto instrukcí je následující:</p>

<pre>
TBZ  Xn, #konstanta, návěští
TBZ  Wn, #konstanta, návěští
TBNZ Xn, #konstanta, návěští
TBNZ Wn, #konstanta, návěští
</pre>

<p>Konstanta má šířku pouze šest bitů, protože je v&nbsp;ní uložen index bitu pracovního registru, který se testuje na nulu či jedničku (u registrů Wn by stačilo jen pět bitů). V&nbsp;případě instrukce <strong>TBZ</strong> &ndash; pokud je n-tý bit registru <strong>Xn/Wn</strong> nastavený na nulu, provede se skok, v&nbsp;opačném případě se řízení přenese na další instrukci. V&nbsp;případě instrukce <strong>TBNZ</strong> je bit testován na nulu. Vzhledem k&nbsp;tomu, že v&nbsp;instrukčním slovu je nutné kromě adresy cíle (návěští) specifikovat i číslo pracovního registru a index bitu, je tento typ skoku omezen na rozsah &pm;32kB, což by ovšem v&nbsp;praxi mělo být více než dostačující (v&nbsp;opačném případě lze <strong>TBZ/TBNZ</strong> zkombinovat s&nbsp;absolutním skokem <strong>B</strong>).</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Cortex-A35<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a35-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a35-processor.php</a>
</li>

<li>Cortex-A53<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a53-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a53-processor.php</a>
</li>

<li>Cortex-A57<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a57-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a57-processor.php</a>
</li>

<li>Cortex-A72<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a72-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a72-processor.php</a>
</li>

<li>Cortex-A73<br />
<a href="https://www.arm.com/products/processors/cortex-a/cortex-a73-processor.php">https://www.arm.com/products/processors/cortex-a/cortex-a73-processor.php</a>
</li>

<li>System cally pro AArch64 na Linuxu<br />
<a href="https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/unistd.h">https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/unistd.h</a>
</li>

<li>Architectures/AArch64 (FedoraProject.org)<br />
<a href="https://fedoraproject.org/wiki/Architectures/AArch64">https://fedoraproject.org/wiki/Architectures/AArch64</a>
</li>

<li>SIG pro AArch64 (CentOS)<br />
<a href="https://wiki.centos.org/SpecialInterestGroup/AltArch/AArch64">https://wiki.centos.org/SpecialInterestGroup/AltArch/AArch64</a>
</li>

<li>The ARMv8 instruction sets<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>A64 Instruction Set<br />
<a href="https://developer.arm.com/products/architecture/instruction-sets/a64-instruction-set">https://developer.arm.com/products/architecture/instruction-sets/a64-instruction-set</a>
</li>

<li>Switching between the instruction sets<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>The A64 instruction set<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch05s01.html</a>
</li>

<li>Introduction to ARMv8 64-bit Architecture<br />
<a href="https://quequero.org/2014/04/introduction-to-arm-architecture/">https://quequero.org/2014/04/introduction-to-arm-architecture/</a>
</li>

<li>MCU market turns to 32-bits and ARM<br />
<a href="http://www.eetimes.com/document.asp?doc_id=1280803">http://www.eetimes.com/document.asp?doc_id=1280803</a>
</li>

<li>Cortex-M0 Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0.php">http://www.arm.com/products/processors/cortex-m/cortex-m0.php</a>
</li>

<li>Cortex-M0+ Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php">http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php</a>
</li>

<li>ARM Processors in a Mixed Signal World<br />
<a href="http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world">http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world</a>
</li>

<li>ARM Architecture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_architecture">https://en.wikipedia.org/wiki/ARM_architecture</a>
</li>

<li>ARM Documentation: B, BL, BX, BLX, and BXJ<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0204j/Cihfddaf.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0204j/Cihfddaf.html</a>
</li>

<li>Branch and Call Sequences Explained<br />
<a href="https://community.arm.com/groups/processors/blog/2013/09/25/branch-and-call-sequences-explained">https://community.arm.com/groups/processors/blog/2013/09/25/branch-and-call-sequences-explained</a>
</li>

<li>Improving ARM Code Density and Performance<br />
<a href="New Thumb Extensions to the ARM Architecture Richard Phelan">New Thumb Extensions to the ARM Architecture Richard Phelan</a>
</li>

<li>Aarch64 Register and Instruction Quick Start<br />
<a href="https://wiki.cdot.senecacollege.ca/wiki/Aarch64_Register_and_Instruction_Quick_Start">https://wiki.cdot.senecacollege.ca/wiki/Aarch64_Register_and_Instruction_Quick_Start</a>
</li>

<li>Exploring AArch64 assembler – Chapter 1<br />
<a href="http://thinkingeek.com/2016/10/08/exploring-aarch64-assembler-chapter1/">http://thinkingeek.com/2016/10/08/exploring-aarch64-assembler-chapter1/</a>
</li>

<li>Exploring AArch64 assembler – Chapter 2<br />
<a href="http://thinkingeek.com/2016/10/08/exploring-aarch64-assembler-chapter-2/">http://thinkingeek.com/2016/10/08/exploring-aarch64-assembler-chapter-2/</a>
</li>

<li>The ARM Processor Architecture<br />
<a href="http://www.arm.com/products/processors/technologies/instruction-set-architectures.php">http://www.arm.com/products/processors/technologies/instruction-set-architectures.php</a>
</li>

<li>Thumb-2 instruction set<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html</a>
</li>

<li>Introduction to ARM thumb<br />
<a href="http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb">http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb</a>
</li>

<li>ARM, Thumb, and ThumbEE instruction sets<br />
<a href="http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm">http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm</a>
</li>

<li>An Introduction to ARM Assembly Language<br />
<a href="http://dev.emcelettronica.com/introduction-to-arm-assembly-language">http://dev.emcelettronica.com/introduction-to-arm-assembly-language</a>
</li>

<li>Processors - ARM<br />
<a href="http://www.arm.com/products/processors/index.php">http://www.arm.com/products/processors/index.php</a>
</li>

<li>The ARM Instruction Set<br />
<a href="http://simplemachines.it/doc/arm_inst.pdf">http://simplemachines.it/doc/arm_inst.pdf</a>
</li>

<li>ARM Architecture (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/ARM_architecture">http://en.wikipedia.org/wiki/ARM_architecture</a>
</li>

<li>C Functions Without Arguments<br />
<a href="https://eklitzke.org/c-functions-without-arguments">https://eklitzke.org/c-functions-without-arguments</a>
</li>

<li>GNU Assembler Examples<br />
<a href="http://cs.lmu.edu/~ray/notes/gasexamples/">http://cs.lmu.edu/~ray/notes/gasexamples/</a>
</li>

<li>Simply FPU<br />
<a href="http://www.website.masmforum.com/tutorials/fptute/">http://www.website.masmforum.com/tutorials/fptute/</a>
</li>

<li>Art of Assembly language programming: The 80x87 Floating Point Coprocessors<br />
<a href="https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-3.html">https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-3.html</a>
</li>

<li>Art of Assembly language programming: The FPU Instruction Set<br />
<a href="https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-4.html">https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-4.html</a>
</li>

<li>INTEL 80387 PROGRAMMER'S REFERENCE MANUAL<br />
<a href="http://www.ragestorm.net/downloads/387intel.txt">http://www.ragestorm.net/downloads/387intel.txt</a>
</li>

<li>x86 Instruction Set Reference: FLD<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_100.html">http://x86.renejeschke.de/html/file_module_x86_id_100.html</a>
</li>

<li>x86 Instruction Set Reference: FLD1/FLDL2T/FLDL2E/FLDPI/FLDLG2/FLDLN2/FLDZ<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_101.html">http://x86.renejeschke.de/html/file_module_x86_id_101.html</a>
</li>

<li>x86 Instruction Set Reference: FLD<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_100.html">http://x86.renejeschke.de/html/file_module_x86_id_100.html</a>
</li>

<li>x86 Instruction Set Reference: FST/FSTP<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_117.html">http://x86.renejeschke.de/html/file_module_x86_id_117.html</a>
</li>

<li>x86 Instruction Set Reference: BTC<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_23.html">http://x86.renejeschke.de/html/file_module_x86_id_23.html</a>
</li>

<li>x86 Instruction Set Reference: BTR<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_24.html">http://x86.renejeschke.de/html/file_module_x86_id_24.html</a>
</li>

<li>x86 Instruction Set Reference: BTS<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_25.html">http://x86.renejeschke.de/html/file_module_x86_id_25.html</a>
</li>

<li>x86 Instruction Set Reference: BSF<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_19.html">http://x86.renejeschke.de/html/file_module_x86_id_19.html</a>
</li>

<li>x86 Instruction Set Reference: BSR<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_20.html">http://x86.renejeschke.de/html/file_module_x86_id_20.html</a>
</li>

<li>x86 Instruction Set Reference: BSWAP<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_21.html">http://x86.renejeschke.de/html/file_module_x86_id_21.html</a>
</li>

<li>x86 Instruction Set Reference: XCHG<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_328.html">http://x86.renejeschke.de/html/file_module_x86_id_328.html</a>
</li>

<li>x86 Instruction Set Reference: SETcc<br />
<a href="http://x86.renejeschke.de/html/file_module_x86_id_288.html">http://x86.renejeschke.de/html/file_module_x86_id_288.html</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>The GNU Assembler Tutorial<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html">http://tigcc.ticalc.org/doc/gnuasm.html</a>
</li>

<li>The GNU Assembler - macros<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html#SEC109">http://tigcc.ticalc.org/doc/gnuasm.html#SEC109</a>
</li>

<li>ARM subroutines &amp; program stack<br />
<a href="http://www.toves.org/books/armsub/">http://www.toves.org/books/armsub/</a>
</li>

<li>Generating Mixed Source and Assembly List using GCC<br />
<a href="http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/">http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/</a>
</li>

<li>Calling subroutines<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm</a>
</li>

<li>ARM Assembly Language Programming<br />
<a href="http://peter-cockerell.net/aalp/html/frames.html">http://peter-cockerell.net/aalp/html/frames.html</a>
</li>

<li>ASM Flags<br />
<a href="http://www.cavestory.org/guides/csasm/guide/asm_flags.html">http://www.cavestory.org/guides/csasm/guide/asm_flags.html</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Intel x86 JUMP quick reference<br />
<a href="http://unixwiz.net/techtips/x86-jumps.html">http://unixwiz.net/techtips/x86-jumps.html</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html">https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html</a>
</li>

<li>Linux Assembly website<br />
<a href="http://asm.sourceforge.net/">http://asm.sourceforge.net/</a>
</li>

<li>Using Assembly Language in Linux<br />
<a href="http://asm.sourceforge.net/articles/linasm.html">http://asm.sourceforge.net/articles/linasm.html</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>vasm &ndash; dokumentace<br />
<a href="http://sun.hasenbraten.de/vasm/release/vasm.html">http://sun.hasenbraten.de/vasm/release/vasm.html</a>
</li>

<li>The Yasm Modular Assembler Project<br />
<a href="http://yasm.tortall.net/">http://yasm.tortall.net/</a>
</li>

<li>680x0:AsmOne<br />
<a href="http://www.amigacoding.com/index.php/680x0:AsmOne">http://www.amigacoding.com/index.php/680x0:AsmOne</a>
</li>

<li>ASM-One Macro Assembler<br />
<a href="http://en.wikipedia.org/wiki/ASM-One_Macro_Assembler">http://en.wikipedia.org/wiki/ASM-One_Macro_Assembler</a>
</li>

<li>ASM-One pages<br />
<a href="http://www.theflamearrows.info/documents/asmone.html">http://www.theflamearrows.info/documents/asmone.html</a>
</li>

<li>Základní informace o ASM-One<br />
<a href="http://www.theflamearrows.info/documents/asminfo.html">http://www.theflamearrows.info/documents/asminfo.html</a>
</li>

<li>Linux Syscall Reference<br />
<a href="http://syscalls.kernelgrok.com/">http://syscalls.kernelgrok.com/</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>IBM System 360/370 Compiler and Historical Documentation<br />
<a href="http://www.edelweb.fr/Simula/">http://www.edelweb.fr/Simula/</a>
</li>

<li>IBM 700/7000 series<br />
<a href="http://en.wikipedia.org/wiki/IBM_700/7000_series">http://en.wikipedia.org/wiki/IBM_700/7000_series</a>
</li>

<li>IBM System/360<br />
<a href="http://en.wikipedia.org/wiki/IBM_System/360">http://en.wikipedia.org/wiki/IBM_System/360</a>
</li>

<li>IBM System/370<br />
<a href="http://en.wikipedia.org/wiki/IBM_System/370">http://en.wikipedia.org/wiki/IBM_System/370</a>
</li>

<li>Mainframe family tree and chronology<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_FT1.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_FT1.html</a>
</li>

<li>704 Data Processing System<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP704.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP704.html</a>
</li>

<li>705 Data Processing System<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP705.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP705.html</a>
</li>

<li>The IBM 704<br />
<a href="http://www.columbia.edu/acis/history/704.html">http://www.columbia.edu/acis/history/704.html</a>
</li>

<li>IBM Mainframe album<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_album.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_album.html</a>
</li>

<li>Osmibitové muzeum<br />
<a href="http://osmi.tarbik.com/">http://osmi.tarbik.com/</a>
</li>

<li>Tesla PMI-80<br />
<a href="http://osmi.tarbik.com/cssr/pmi80.html">http://osmi.tarbik.com/cssr/pmi80.html</a>
</li>

<li>PMI-80<br />
<a href="http://en.wikipedia.org/wiki/PMI-80">http://en.wikipedia.org/wiki/PMI-80</a>
</li>

<li>PMI-80<br />
<a href="http://www.old-computers.com/museum/computer.asp?st=1&amp;c=1016">http://www.old-computers.com/museum/computer.asp?st=1&amp;c=1016</a>
</li>

<li>The 6502 overflow flag explained mathematically <br />
<a href="http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html">http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html</a>
</li>

<li>X86 Opcode and Instruction Reference<br />
<a href="http://ref.x86asm.net/coder32.html">http://ref.x86asm.net/coder32.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

