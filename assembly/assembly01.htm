<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Použití assembleru v Linuxu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Použití assembleru v Linuxu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;dnešním článku se budeme zabývat v&nbsp;současnosti již možná poněkud okrajovým, ale stále zajímavým a mnohdy i užitečným tématem. Jedná se o tvorbu programů popř.&nbsp;jejich částí s&nbsp;využitím assembleru neboli jazyka symbolických adres (JSA). Zaměříme se na použití assembleru jak na platformě x86_64, tak i (a to možná především) na 32bitové platformě ARM.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Použití assembleru v&nbsp;Linuxu</a></p>
<p><a href="#k02">2. Vznik jazyka &bdquo;assembly language&ldquo; a nástroje nazvaného assembler</a></p>
<p><a href="#k03">3. Assemblery na domácích osmibitových mikropočítačích i na počítačích s&nbsp;procesory Motorola 68000</a></p>
<p><a href="#k04">4. Assemblery v&nbsp;Linuxu</a></p>
<p><a href="#k05">5. GNU Assembler</a></p>
<p><a href="#k06">6. Netwide Assembler (NASM)</a></p>
<p><a href="#k07">7. Volání funkcí kernelu &ndash; syscalls</a></p>
<p><a href="#k08">8. Kostra jednoduché aplikace naprogramovaná v&nbsp;GNU Assembleru</a></p>
<p><a href="#k09">9. Kostra jednoduché aplikace naprogramovaná v&nbsp;Netwide Assembleru</a></p>
<p><a href="#k10">10. Varianta pro 32bitové ARMy s&nbsp;instrukční sadou Thumb</a></p>
<p><a href="#k11">11. Repositář se zdrojovými kódy demonstračních příkladů</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Použití assembleru v&nbsp;Linuxu</h2>

<p>V&nbsp;dnešním článku se seznámíme se základy práce s&nbsp;assemblerem v&nbsp;operačním systému Linux. Assembler neboli též <i>jazyk symbolických adres (JSA)</i> popř.&nbsp;alternativně <i>jazyk symbolických instrukcí (JSI)</i> je nízkoúrovňovým programovacím jazykem, který na hierarchii jazyků stojí nad strojovým kódem, ovšem hluboko pod vyššími kompilovanými programovacími jazyky typu C, D či C++. Typickou vlastností assembleru je jeho vazba na určitý typ procesoru popř.&nbsp;řadu procesorů (architekturu) &ndash; týká se to především sady dostupných instrukcí. Programy se ve většině typech assemblerů zapisují formou symbolických instrukcí, přičemž každá instrukce je představována svou mnemotechnickou zkratkou a případnými operandy (konstantami, adresami, nepřímými adresami, jmény pracovních registrů procesoru atd.). Z&nbsp;několika assemblerů, které jsou pro Linux dostupné, se zaměříme na <i>GNU Assembler</i> a taktéž na novější <i>Netwide Assembler</i>, který však v&nbsp;současnosti nepodporuje všechny používané architektury.</p>

<img src="http://mojefedora.cz/wp-content/uploads/2016/05/01-1-450x400.png" alt="01" width="450" height="400" class="alignnone size-medium wp-image-7205" />
<p><i>Obrázek 1: Díky použití assembleru není nutné, aby programátoři pracovali ručně přímo se strojovým kódem (machine language). Pokud je to přeci jen z&nbsp;nějakého důvodu vyžadováno (mikrořadiče atd.), lze pro tento účel využít nástroje nazvané &bdquo;monitory&ldquo;.</i></p>

<p>Programování v&nbsp;jazyku symbolických adres již v&nbsp;současnosti není nijak masivní záležitostí, a to především z&nbsp;toho důvodu, že tvorba aplikací ve vyšších programovacích jazycích je v&nbsp;porovnání s&nbsp;assemblerem mnohem rychlejší, aplikace jsou snáze přenositelné na jiné platformy a změna aplikací, tj.&nbsp;přidávání nových vlastností či refaktoring, je ve vyšších programovacích jazycích jednodušší. Nesmíme taktéž zapomenout na to, že díky vývoji překladačů vyšších programovacích jazyků se běžně stává, že například algoritmus naprogramovaný v&nbsp;jazyku C může co do rychlosti snadno soutěžit s&nbsp;programem napsaným průměrným programátorem v&nbsp;assembleru. I přesto si však myslím, že assembler stále má své nezastupitelné místo, a to jak při zkoumání systémových volání v&nbsp;Linuxu a programování speciálního SW (části ovladačů, multimediální kodeky, některé kritické algoritmy typu FFT), tak i při práci na dnes velmi oblíbených osmibitových čipech tvořících například srdce Arduina a podobných jednodeskových mikropočítačů. Z&nbsp;tohoto důvodu se dnes seznámíme se způsobem tvorby jednoduchých aplikací v&nbsp;Linuxu, a to jak na platformě x86_64, tak i na platformě ARM. Podrobnějším popisem jednotlivých instrukcí se budeme zabývat až příště; dnes nás bude zajímat především toolchain a nástroje, které jsou v&nbsp;něm obsažené.</p>

<img src="http://mojefedora.cz/wp-content/uploads/2016/05/02-1-450x321.png" alt="02" width="450" height="321" class="alignnone size-medium wp-image-7206" />
<p><i>Obrázek 2: Nestrukturovaný zdrojový kód psaný v&nbsp;assembleru.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vznik jazyka &bdquo;assembly language&ldquo; a nástroje nazvaného assembler</h2>

<p><i>Assemblery</i> za sebou mají velmi dlouhý vývoj, protože první nástroje, které se začaly tímto názvem označovat, vznikly již v&nbsp;padesátých letech minulého století, a to na <i>mainframech</i> vyráběných společností IBM i jejími konkurenty (UNIVAC, Burroughs, Honeywell, General Electric atd.). Před vznikem skutečných assemblerů byla situace poněkud složitá. První aplikace pro mainframy totiž byly programovány přímo ve strojovém kódu, který bylo možné přímo zadávat z&nbsp;takzvaného <i>řídicího panelu (control panel)</i> počítače či načítat z&nbsp;externích paměťových médií (děrných štítků, magnetických pásek atd.). Ovšem zapisovat programy přímo ve strojovém kódu je zdlouhavé, vedoucí k&nbsp;častým chybám a pro větší aplikace z&nbsp;mnoha důvodů nepraktické, o čemž se mohli relativně nedávno přesvědčit například i studenti programující na československém mikropočítači <i>PMI-80</i>. Z&nbsp;důvodu usnadnění práce programátorů tedy vznikly první utility, jejichž úkolem bylo transformovat programy zapsané s&nbsp;využitím symbolických jmen strojových instrukcí do (binárního) strojového kódu určeného pro konkrétní typ počítače a jeho procesoru.</p>

<img src="http://mojefedora.cz/wp-content/uploads/2016/05/03-1-248x450.png" alt="03" width="248" height="450" class="alignnone size-medium wp-image-7207" />
<p><i>Obrázek 3: Kód v&nbsp;assembleru je však možné psát i strukturovaně, používat subrutiny a funkce atd.</i></p>

<p>Těmto programům, jejichž možnosti se postupně vylepšovaly (například do nich přibyla podpora textových maker, řízení víceprůchodového překladu, vytváření výstupních sestav s&nbsp;překládanými symboly, později i skutečné linkování s&nbsp;knihovnami atd.), se začalo říkat <i>assemblery</i> a jazyku pro symbolický zápis programů pak <i>jazyk symbolických instrukcí</i> či <i>jazyk symbolických adres</i> &ndash; <i>assembly language</i> (někdy též zkráceně nazývaný assembler, takže toto slovo má vlastně dodnes oba dva významy). Jednalo se o svým způsobem převratnou myšlenku: sám počítač byl použit pro tvorbu programů, čímž odpadla namáhavá práce s&nbsp;tužkou a papírem. Posléze se zjistilo, že i programování přímo v&nbsp;assembleru je většinou pracné a zdlouhavé, takže se na mainframech začaly používat různé vyšší programovací jazyky, zejména FORTRAN a COBOL. Použití vyšších programovacích jazyků bylo umožněno relativně vysokým výpočetním výkonem mainframů i (opět relativně) velkou kapacitou operační paměti; naopak se díky vyšším programovacím jazykům mohly aplikace přenášet na různé typy počítačů, což je nesporná výhoda.</p>

<img src="http://mojefedora.cz/wp-content/uploads/2016/05/04-1-450x321.png" alt="04" width="450" height="321" class="alignnone size-medium wp-image-7208" />
<p><i>Obrázek 4: Assembler pro počítače Commodore C64.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Assemblery na domácích osmibitových mikropočítačích i na počítačích s&nbsp;procesory Motorola 68000</h2>

<p>Oživení zájmu o programování v&nbsp;assembleru přinesl vznik minipočítačů (například známé řady <i>PDP</i>) a na konci sedmdesátých let minulého století pak zcela nového fenoménu, který nakonec přepsal celé dějiny výpočetní techniky &ndash; domácích osmibitových mikropočítačů. Na osmibitových domácích mikropočítačích se používaly dva typy <i>assemblerů</i>. Prvním typem byly assemblery interaktivní, které uživateli nabízely poměrně komfortní vývojové prostředí, v&nbsp;němž bylo možné zapisovat jednotlivé instrukce v&nbsp;symbolické podobě, spouštět programy, krokovat je, vypisovat obsahy pracovních registrů mikroprocesoru atd. Výhodou byla nezávislost těchto assemblerů na rychlém externím paměťovém médiu (například disketové jednotce), který mnoho uživatelů a programátorů ani nevlastnilo. Druhý typ assemblerů je používán dodnes &ndash; jedná se vlastně o běžné překladače, kterým se na vstupu předloží zdrojový kód (uložený na kazetě či disketě) a po překladu se výsledný nativní kód taktéž uloží na paměťové médium (odkud ho lze následně spustit). Tyto assemblery byly mnohdy vybaveny více či méně dokonalým systémem maker (odtud ostatně pochází i označení <i>macroassembler</i>).</p>

<img src="http://mojefedora.cz/wp-content/uploads/2016/05/05-1-450x321.png" alt="05" width="450" height="321" class="alignnone size-medium wp-image-7209" />
<p><i>Obrázek 5: Atari Macro Assembler.</i></p>

<p>Assemblery byly mezi programátory poměrně populární i na počítačích <i>Amiga</i> a <i>Atari ST</i>, a to i díky tomu, že instrukční kód mikroprocesorů <i>Motorola 68000</i> byl do značné míry ortogonální, obsahoval relativně velké množství registrů (univerzální datové registry D0 až D7 a adresové registry A0 až A7) a navíc bylo možné používat i takové adresovací režimy, které korespondovaly s&nbsp;konstrukcemi používanými ve vyšších programovacích jazycích (přístupy k&nbsp;prvkům polí, přístup k&nbsp;lokálním proměnným umístěných v&nbsp;zásobníkovém rámci, autoinkrementace adresy atd.). Podívejme se na jednoduchý příklad rutiny (originál najdete <a href="http://www.virtualdub.org/blog/pivot/entry.php?id=84">zde</a>), která sečte všechny prvky (16bitové integery &ndash; načítá se vždy jen 16bitové slovo) v&nbsp;poli. V&nbsp;tomto příkladu se používá autoinkrementace adresy při adresování prvků polí a taktéž instrukce <strong>DBRA</strong> provádí dvě činnosti &ndash; snížení hodnoty registru o jedničku a skok v&nbsp;případě, že je výsledek nenulový:</p>

<pre>
    moveq #0, d0      ; potřebujeme vynulovat horních 16 bitů d0
    moveq #0, d1      ; mezivýsledek
loop:
    move.w (a0)+, d0  ; horních 16 bitů d0 je pořád nastaveno na 0
    add.l d0, d1
    dbra d2, loop     ; d2 je použit jako počitadlo
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Assemblery v&nbsp;Linuxu</h2>

<p>V&nbsp;této kapitole budeme pod termínem &bdquo;assembler&ldquo; chápat programový nástroj určený pro transformaci zdrojového kódu naprogramovaného v&nbsp;jazyku symbolických adres do strojového kódu. Pro Linux vzniklo hned několik takových nástrojů, přičemž některé nástroje jsou komerční a jiné patří mezi open source. Z&nbsp;nekomerčních nástrojů, které nás samozřejmě na serveru <a href="http://mojefedora.cz">mojefedora.cz</a> zajímají především, se jedná o známý <i>GNU Assembler</i>, dále pak o nástroj nazvaný <i>Netwide assembler (NASM)</i>, nástroj <i>Yasm Modular Assembler</i> či až překvapivě výkonný <i>vasm</i>. <i>NASM</i> a <i>Yasm</i> jsou pro první krůčky v&nbsp;assembleru velmi dobře použitelné, neboť mají dobře zpracovaný mechanismus reakce na chyby, dají se v&nbsp;nich psát čitelné programy atd. Určitý problém nastává v&nbsp;případě, kdy je nutné vyvíjet aplikace určené pro jinou architekturu, než je i386 či x86_64, a to z&nbsp;toho důvodu, že ani <i>Netwide assembler</i> ani <i>Yasm</i> nedokážou pracovat s&nbsp;odlišnou instrukční sadou. Naproti tomu <i>GNU Assembler</i> tímto problémem ani zdaleka netrpí, takže se v&nbsp;následujících kapitolách budeme zabývat jak nástrojem <i>NASM</i>, tak i <i>GNU Assemblerem</i>.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. GNU Assembler</h2>

<p><i>GNU Assembler</i> (<i>gas</i>) je součástí skupiny nástrojů nazvaných <i>GNU Binutils</i>. Jedná se o nástroje určené pro vytváření a správu binárních souborů obsahujících takzvaný &bdquo;objektový kód&ldquo;, dále nástrojů určených pro práci s&nbsp;knihovnami strojových funkcí i pro profilování. Mezi <i>GNU Binutils</i> patří vedle <i>GNU Assembleru</i> i linker <strong>ld</strong>, profiler <strong>gprof</strong>, správce archivů strojových funkcí <strong>ar</strong>, nástroj pro odstranění symbolů z&nbsp;objektových a spustitelných souborů <strong>strip</strong> a několik pomocných utilit typu <strong>nm</strong>, <strong>objdump</strong>, <strong>size</strong> a <strong>strings</strong>. <i>GNU Assembler</i> je možné použít buď pro překlad uživatelem vytvořených zdrojových kódů nebo pro zpracování kódů vygenerovaných překladači vyšších programovacích jazyků (<strong>GCC</strong> atd.). Zajímavé je, že všechny moderní verze <i>GNU Assembleru</i> podporují jak původní AT&amp;T syntaxi, tak i (podle mě čitelnější) syntaxi používanou společností Intel.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Netwide Assembler (NASM)</h2>

<p><i>Netwide Assembler (NASM)</i> vznikl v&nbsp;době, kdy začali na operační systém Linux přecházet programátoři znající operační systémy DOS a (16/32bit) Windows. Tito programátoři byli většinou dobře seznámeni s&nbsp;možnostmi assemblerů, které se na těchto platformách používaly nejčastěji &ndash; <i>Turbo Assembleru (TASM)</i> společnosti Borland i <i>Microsoft Macro Assembleru (MASM)</i> a tak jim možnosti <i>GNU Assembleru</i> (který má své kořeny na odlišných architekturách) příliš nevyhovovaly. Výsledkem snah o vytvoření nástroje podobnému <i>TASMu</i> či <i>MASMu</i> byl právě <i>NASM</i>, který podporuje stejný způsob zápisu operandů instrukcí a navíc ještě zjednodušuje zápis těch instrukcí, u nichž je jeden operand tvořen nepřímou adresou. <i>NASM</i> byl následován projektem <i>Yasm</i> (fork+přepis), ovšem základní vlastnosti a především pak vazba na platformu i386 a x86_64 zůstaly zachovány (to mj.&nbsp;znamená, že například na <i>Raspberry Pi</i> možnosti těchto dvou nástrojů plně nevyužijeme, což je určitě škoda).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Volání funkcí kernelu &ndash; syscalls</h2>

<p>Vzhledem k&nbsp;tomu, že i ta nejjednodušší aplikace naprogramovaná v&nbsp;assembleru musí nějakým způsobem ukončit svou činnost, je nutné buď zavolat vhodnou knihovní funkci (z&nbsp;<strong>libc</strong>) popř.&nbsp;použít takzvaný &bdquo;syscall&ldquo;. V&nbsp;kontextu Linuxu se pod tímto termínem skrývá volání nějaké funkce umístěné přímo v&nbsp;jádru operačního systému. V&nbsp;praxi to funguje následovně: podle požadavků konkrétní funkce se naplní pracovní registry popř.&nbsp;datové struktury uložené v&nbsp;paměti, následně se číslo služby uloží do pracovního registru <strong>eax</strong> (i386/x86_64) nebo do pracovního registru <strong>r7</strong> (32bitový ARM s&nbsp;použitím EABI) popř.&nbsp;<strong>x8</strong> (ARM64) a následně se zavolá nějaká instrukce, která přepne kontext procesoru do privilegovaného režimu &bdquo;jádra&ldquo; (vyvolá výjimku atd.). Na procesorech s&nbsp;architekturou i386 či x86_64 je touto instrukcí <strong>INT 80h</strong>, u 32bitových ARMů s&nbsp;EABI je to instrukce <strong>SWI 0h</strong> a u ARM64 instrukce <strong>SVC #0</strong>:</p>

<table>
<tr><th>Architektura</th><th>Číslo služby v</th><th>Instrukce pro syscall</th><th>Návratová hodnota v</th></tr>
<tr><td>i386</td><td>eax</td><td>INT 80h</td><td>eax</td></tr>
<tr><td>x86_64</td><td>rax</td><td>SYSCALL</td><td>rax</td></tr>
<tr><td>ARM 32 s EABI</td><td>r7</td><td>SWI 0h</td><td>r0</td></tr>
<tr><td>ARM 64</td><td>x8</td><td>SVC #0</td><td>x0</td></tr>
<tr><td>Motorola 68k</td><td>d0</td><td>TRAP #0</td><td>d0</td></tr>
</table>

<p>Samotná čísla jednotlivých funkcí kernelu naleznete například na adrese <a href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html">http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html</a>. Nás bude zajímat hned první řádek této tabulky, který říká:</p>

<pre>
%eax    Name        Source          %ebx    %ecx    %edx    %esx    %edi
1       sys_exit    kernel/exit.c   int     -       -       -       -
</pre>

<p>Co to znamená? Jedná se o funkci určenou pro ukončení aplikace, přičemž číslo syscallu je rovno jedné a zapisuje se do registru <strong>eax</strong>. Jediným parametrem je návratová hodnota (typu int), která se zapisuje do registru <strong>ebx</strong> (na ARMu je to <strong>r0</strong>, což se však zde nedozvíme). Podobně lze používat další funkce, jak si ostatně ukážeme příště.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Kostra jednoduché aplikace naprogramovaná v&nbsp;GNU Assembleru</h2>

<p>Podívejme se nyní na to, jak může vypadat kostra velmi jednoduché aplikace naprogramované v&nbsp;GNU Assembleru pro procesory řady i386 či x86_64. Celý zdrojový kód je rozdělen na řádky, přičemž na jednotlivých řádcích mohou být komentáře, deklarace různých konstant a symbolů (<strong>sys_exit=1</strong>), speciální direktivy (<strong>.section</strong>), návěští/labels (<strong>_start</strong>) a samozřejmě i samotný kód reprezentovaný mnemotechnickými názvy instrukcí a jejich operandů. Důležitý je symbol <strong>_start</strong>, protože ten je používán i linkerem a specifikuje vstupní bod do programu:</p>

<pre>
# asmsyntax=as

# Sablona pro zdrojovy kod Linuxoveho programu naprogramovaneho
# v assembleru GNU AS.
#
# Autor: Pavel Tisnovsky



# Linux kernel system call table
sys_exit=1



#-----------------------------------------------------------------------------
.section .data



#-----------------------------------------------------------------------------
.section .bss



#-----------------------------------------------------------------------------
.section .text
        .global _start          # tento symbol ma byt dostupny i linkeru

_start:
        movl  $sys_exit,%eax    # cislo sycallu pro funkci "exit"
        movl  $0,%ebx           # exit code = 0
        int   $0x80             # volani Linuxoveho kernelu
</pre>

<p>Povšimněte si rozdělení do sekcí &ndash; sekce pojmenované <strong>.data</strong> a <strong>.bss</strong> jsou prázdné, samotný kód je umístěn do sekce pojmenované <strong>.text</strong>, což může být matoucí, protože ve výsledném binárním souboru tato sekce taktéž obsahuje binární data (instrukce). Instrukce jsou v&nbsp;programu pouze tři a slouží pro naplnění pracovních registrů <strong>eax</strong> a <strong>ebx</strong> (funkce číslo 1, návratová hodnota 0) a zavolání syscallu. Používáme zde původní AT&amp;T syntaxi GNU Assembleru, proto se do instrukce <strong>movl</strong> operandy zapisují v&nbsp;pořadí zdroj,cíl.</p>

<p>Překlad (assemblerem) a následné slinkování do spustitelného souboru se provede následovně:</p>

<pre>
as template.s -o template.o
ld -s template.o
</pre>

<p>Výsledný soubor má velikost 344 bajtů:</p>

<pre>
0000000: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00  .ELF............
0000010: 02 00 3e 00 01 00 00 00 78 00 40 00 00 00 00 00  ..&gt;.....x.@.....
0000020: 40 00 00 00 00 00 00 00 98 00 00 00 00 00 00 00  @...............
0000030: 00 00 00 00 40 00 38 00 01 00 40 00 03 00 02 00  ....@.8...@.....
0000040: 01 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00  ................
0000050: 00 00 40 00 00 00 00 00 00 00 40 00 00 00 00 00  ..@.......@.....
0000060: 84 00 00 00 00 00 00 00 84 00 00 00 00 00 00 00  ................
0000070: 00 00 20 00 00 00 00 00 b8 01 00 00 00 bb 00 00  .. .............
0000080: 00 00 cd 80 00 2e 73 68 73 74 72 74 61 62 00 2e  ......shstrtab..
0000090: 74 65 78 74 00 00 00 00 00 00 00 00 00 00 00 00  text............
00000a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000d0: 00 00 00 00 00 00 00 00 0b 00 00 00 01 00 00 00  ................
00000e0: 06 00 00 00 00 00 00 00 78 00 40 00 00 00 00 00  ........x.@.....
00000f0: 78 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00  x...............
0000100: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................
0000110: 00 00 00 00 00 00 00 00 01 00 00 00 03 00 00 00  ................
0000120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0000130: 84 00 00 00 00 00 00 00 11 00 00 00 00 00 00 00  ................
0000140: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................
0000150: 00 00 00 00 00 00 00 00                          ........
</pre>

<p>Na interní obsah souboru se můžeme podívat utilitkou <strong>objdump</strong>, a to následujícím způsobem:</p>

<pre>
objdump -f -d -t -h a.out
</pre>
<pre>
a.out:     file format elf32-i386
architecture: i386, flags 0x00000102:
EXEC_P, D_PAGED
start address 0x08048054

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000000c  08048054  08048054  00000054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
SYMBOL TABLE:
no symbols



Disassembly of section .text:

08048054 &lt;.text&gt;:
 8048054:       b8 01 00 00 00          mov    $0x1,%eax
 8048059:       bb 00 00 00 00          mov    $0x0,%ebx
 804805e:       cd 80                   int    $0x80
</pre>

<p>Vidíme, že uvnitř spustitelného souboru se skutečně nachází sekce nazvaná <strong>.text</strong>. Tato sekce je neměnitelná a obsahuje kód; její zarovnání je na celá slova. Obsahem je dvanáct bajtů obsahujících trojici instrukcí (ty jsou zde vypsány tak, jak je disassembler získal ze souboru, tj.&nbsp;již bez symbolických konstant atd.).</p>

<p>V&nbsp;64bitové variantě je soubor nepatrně odlišný, ale ne příliš:</p>

<pre>
a.out:     file format elf64-x86-64
architecture: i386:x86-64, flags 0x00000102:
EXEC_P, D_PAGED
start address 0x0000000000400078

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         0000000c  0000000000400078  0000000000400078  00000078  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
SYMBOL TABLE:
no symbols



Disassembly of section .text:

0000000000400078 &lt;.text&gt;:
  400078:       b8 01 00 00 00          mov    $0x1,%eax
  40007d:       bb 00 00 00 00          mov    $0x0,%ebx
  400082:       cd 80                   int    $0x80
</pre>


<p>Poznámka: význam jednotlivých instrukcí si podrobněji popíšeme příště, dnes se seznamujeme především s&nbsp;použitím toolchainu.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Kostra jednoduché aplikace naprogramovaná v&nbsp;Netwide Assembleru</h2>

<p>V&nbsp;<i>Netwide Assembleru</i> se stejná aplikace naprogramuje nepatrně odlišným způsobem, a to kvůli rozdílné syntaxi a sémantice. Důležité a na první pohled viditelné je otočení operandů u instrukcí (cíl, zdroj) a taktéž to, že u instrukce <strong>mov</strong> se nemusí nijak specifikovat typ operandů &ndash; to je zajištěno assemblerem automaticky. Dále se odlišně zapisují symbolické konstanty s&nbsp;využitím direktivy <strong>equ</strong>:</p>

<pre>
; asmsyntax=nasm

; Sablona pro zdrojovy kod Linuxoveho programu naprogramovaneho
; v assembleru NASM.
;
; Autor: Pavel Tisnovsky



; Linux kernel system call table
sys_exit equ 1



;-----------------------------------------------------------------------------
section .data



;-----------------------------------------------------------------------------
section .bss



;-----------------------------------------------------------------------------
section .text
        global _start           ; tento symbol ma byt dostupny i linkeru

_start:
        mov   eax,sys_exit      ; cislo sycallu pro funkci "exit"
        mov   ebx,0             ; exit code = 0
        int   80h               ; volani Linuxoveho kernelu
</pre>

<p>Překlad se provede příkazem:</p>

<pre>
nasm -felf32 template.asm
ld -s template.o
</pre>

<p>popř.&nbsp;pro 64bitový systém příkazem:</p>

<pre>
nasm -felf64 template.asm
ld -s template.o
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Varianta pro 32bitové ARMy s&nbsp;instrukční sadou Thumb</h2>

<p>Stejná aplikace, ale určená pro 32bitové mikroprocesory ARM (například pro Raspberry Pi), musí být v&nbsp;GNU Assembleru vytvořena nepatrně odlišně, což je ostatně patrné z&nbsp;následujícího kódu. Povšimněte si především toho, že komentáře u instrukcí musí začínat znakem @ a samozřejmě i instrukční soubor je jiný:</p>

<pre>
# asmsyntax=as

# Sablona pro zdrojovy kod Linuxoveho programu naprogramovaneho
# v assembleru GNU AS.
#
# Autor: Pavel Tisnovsky



# Linux kernel system call table
sys_exit=1



#-----------------------------------------------------------------------------
.section .data



#-----------------------------------------------------------------------------
.section .bss



#-----------------------------------------------------------------------------
.section .text
        .global _start          @ tento symbol ma byt dostupny i z linkeru

_start:
        mov   r7,$sys_exit      @ cislo sycallu pro funkci "exit"
        mov   r0,#0             @ exit code = 0
        svc   0                 @ volani Linuxoveho kernelu
</pre>

<p>Překlad a slinkování proveďte těmito dvěma příkazy:</p>

<pre>
as arm_thumb.s -o arm_thumb.o
ld -s arm_thumb.o
</pre>

<p>Výsledkem by měl být binární soubor o délce pouhých 311 bajtů:</p>

<pre>
0000000: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00  .ELF............
0000010: 02 00 28 00 01 00 00 00 54 80 00 00 34 00 00 00  ..(.....T...4...
0000020: 98 00 00 00 00 02 00 05 34 00 20 00 01 00 28 00  ........4. ...(.
0000030: 04 00 03 00 01 00 00 00 00 00 00 00 00 80 00 00  ................
0000040: 00 80 00 00 60 00 00 00 60 00 00 00 05 00 00 00  ....`...`.......
0000050: 00 80 00 00 01 70 a0 e3 00 00 a0 e3 00 00 00 ef  .....p..........
0000060: 41 13 00 00 00 61 65 61 62 69 00 01 09 00 00 00  A....aeabi......
0000070: 06 01 08 01 00 2e 73 68 73 74 72 74 61 62 00 2e  ......shstrtab..
0000080: 74 65 78 74 00 2e 41 52 4d 2e 61 74 74 72 69 62  text..ARM.attrib
0000090: 75 74 65 73 00 00 00 00 00 00 00 00 00 00 00 00  utes............
00000a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000c0: 0b 00 00 00 01 00 00 00 06 00 00 00 54 80 00 00  ............T...
00000d0: 54 00 00 00 0c 00 00 00 00 00 00 00 00 00 00 00  T...............
00000e0: 04 00 00 00 00 00 00 00 11 00 00 00 03 00 00 70  ...............p
00000f0: 00 00 00 00 00 00 00 00 60 00 00 00 14 00 00 00  ........`.......
0000100: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................
0000110: 01 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  ................
0000120: 74 00 00 00 21 00 00 00 00 00 00 00 00 00 00 00  t...!...........
0000130: 01 00 00 00 00 00 00 00                          ........
</pre>

<p>Pokud vás zajímá interní struktura tohoto souboru, opět pomůže nástroj <strong>objdump</strong>:</p>

<pre>
objdump -f -d -t -h a.out
</pre>

<pre>
a.out:     file format elf32-littlearm
architecture: armv4, flags 0x00000102:
EXEC_P, D_PAGED
start address 0x00008054

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000000c  00008054  00008054  00000054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.attributes 00000014  00000000  00000000  00000060  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
no symbols



Disassembly of section .text:

00008054 &lt;.text&gt;:
    8054:       e3a07001        mov     r7, #1
    8058:       e3a00000        mov     r0, #0
    805c:       ef000000        svc     0x00000000
</pre>

<p>V&nbsp;následující části si řekneme, jak vytvořit složitější kód obsahující podmínky, smyčky atd., a to opět v&nbsp;assembleru procesorů i386/x86_64 i ARM (s&nbsp;instrukční sadou Thumb).</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Repositář se zdrojovými kódy demonstračních příkladů</h2>

<p>Oba dva demonstrační příklady byly společně s&nbsp;podpůrnými skripty uloženy do GIT repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations/">https://github.com/tisnik/presentations/</a>:</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Popis</th><th>Adresa v&nbsp;repositáři</th></tr>
<tr><td> 1</td><td>template.s</td><td>kód pro i386/x86_64</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/template.s">https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/template.s</a></td></tr>
<tr><td> 2</td><td>arm_thumb.s</td><td>kód pro ARM s Thumb</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/arm_thumb.s">https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/arm_thumb.s</a></td></tr>
<tr><td> 3</td><td>assemble</td><td>skript pro překlad na i386/x86_64</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/assemble">https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/assemble</a></td></tr>
<tr><td> 4</td><td>as_arm</td><td>skript pro překlad na ARMu</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/as_arm">https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/as_arm</a></td></tr>
<tr><td> 5</td><td>disassemble</td><td>skript pro zpětný překlad</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/disassemble">https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/disassemble</a></td></tr>
<tr><td> 6</td><td>clean</td><td>vyčištění adresáře</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/clean">https://github.com/tisnik/presentations/blob/master/assembler/01_gas_template/clean</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>template.asm</td><td>kód pro i386/x86_64</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/02_nasm_template/template.asm">https://github.com/tisnik/presentations/blob/master/assembler/02_nasm_template/template.asm</a></td></tr>
<tr><td> 8</td><td>assemble_i386</td><td>skript pro překlad na i386</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/02_nasm_template/assemble_i386">https://github.com/tisnik/presentations/blob/master/assembler/02_nasm_template/assemble_i386</a></td></tr>
<tr><td> 9</td><td>assemble_x64_64</td><td>skript pro překlad na x86_64</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/02_nasm_template/assemble_x64_64">https://github.com/tisnik/presentations/blob/master/assembler/02_nasm_template/assemble_x64_64</a></td></tr>
<tr><td>10</td><td>disassemble</td><td>skript pro zpětný překlad</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/02_nasm_template/disassemble">https://github.com/tisnik/presentations/blob/master/assembler/02_nasm_template/disassemble</a></td></tr>
<tr><td>11</td><td>clean</td><td>vyčištění adresáře</td><td><a href="https://github.com/tisnik/presentations/blob/master/assembler/02_nasm_template/clean">https://github.com/tisnik/presentations/blob/master/assembler/02_nasm_template/clean</a></td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Programovani v assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html">https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html</a>
</li>

<li>Linux Assembly website<br />
<a href="http://asm.sourceforge.net/">http://asm.sourceforge.net/</a>
</li>

<li>Using Assembly Language in Linux<br />
<a href="http://asm.sourceforge.net/articles/linasm.html">http://asm.sourceforge.net/articles/linasm.html</a>
</li>

<li>vasm<br />
<a href="http://sun.hasenbraten.de/vasm/">http://sun.hasenbraten.de/vasm/</a>
</li>

<li>vasm &ndash; dokumentace<br />
<a href="http://sun.hasenbraten.de/vasm/release/vasm.html">http://sun.hasenbraten.de/vasm/release/vasm.html</a>
</li>

<li>The Yasm Modular Assembler Project<br />
<a href="http://yasm.tortall.net/">http://yasm.tortall.net/</a>
</li>

<li>680x0:AsmOne<br />
<a href="http://www.amigacoding.com/index.php/680x0:AsmOne">http://www.amigacoding.com/index.php/680x0:AsmOne</a>
</li>

<li>ASM-One Macro Assembler<br />
<a href="http://en.wikipedia.org/wiki/ASM-One_Macro_Assembler">http://en.wikipedia.org/wiki/ASM-One_Macro_Assembler</a>
</li>

<li>ASM-One pages<br />
<a href="http://www.theflamearrows.info/documents/asmone.html">http://www.theflamearrows.info/documents/asmone.html</a>
</li>

<li>Základní informace o ASM-One<br />
<a href="http://www.theflamearrows.info/documents/asminfo.html">http://www.theflamearrows.info/documents/asminfo.html</a>
</li>

<li>Linux Syscall Reference<br />
<a href="http://syscalls.kernelgrok.com/">http://syscalls.kernelgrok.com/</a>
</li>

<li>Programming from the Ground Up Book - Summary<br />
<a href="http://savannah.nongnu.org/projects/pgubook/">http://savannah.nongnu.org/projects/pgubook/</a>
</li>

<li>IBM System 360/370 Compiler and Historical Documentation<br />
<a href="http://www.edelweb.fr/Simula/">http://www.edelweb.fr/Simula/</a>
</li>

<li>IBM 700/7000 series<br />
<a href="http://en.wikipedia.org/wiki/IBM_700/7000_series">http://en.wikipedia.org/wiki/IBM_700/7000_series</a>
</li>

<li>IBM System/360<br />
<a href="http://en.wikipedia.org/wiki/IBM_System/360">http://en.wikipedia.org/wiki/IBM_System/360</a>
</li>

<li>IBM System/370<br />
<a href="http://en.wikipedia.org/wiki/IBM_System/370">http://en.wikipedia.org/wiki/IBM_System/370</a>
</li>

<li>Mainframe family tree and chronology<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_FT1.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_FT1.html</a>
</li>

<li>704 Data Processing System<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP704.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP704.html</a>
</li>

<li>705 Data Processing System<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP705.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP705.html</a>
</li>

<li>The IBM 704<br />
<a href="http://www.columbia.edu/acis/history/704.html">http://www.columbia.edu/acis/history/704.html</a>
</li>

<li>IBM Mainframe album<br />
<a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_album.html">http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_album.html</a>
</li>

<li>Osmibitové muzeum<br />
<a href="http://osmi.tarbik.com/">http://osmi.tarbik.com/</a>
</li>

<li>Tesla PMI-80<br />
<a href="http://osmi.tarbik.com/cssr/pmi80.html">http://osmi.tarbik.com/cssr/pmi80.html</a>
</li>

<li>PMI-80<br />
<a href="http://en.wikipedia.org/wiki/PMI-80">http://en.wikipedia.org/wiki/PMI-80</a>
</li>

<li>PMI-80<br />
<a href="http://www.old-computers.com/museum/computer.asp?st=1&amp;c=1016">http://www.old-computers.com/museum/computer.asp?st=1&amp;c=1016</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

