<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Formát <i>MessagePack</i></a></p>
<p><a href="#k03">*** 3. Některá omezení formátu <i>MessagePack</i></a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. Hodnota <strong>nil</strong> resp.&nbsp;<strong>None</strong></a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>Se serializačním formátem nazvaným <i>MessagePack</i> jsme se již na stránkách Roota jednou setkali, a to konkrétně v&nbsp;souvislosti <a href="http://127.0.0.1:399">s&nbsp;programovacím jazykem Go</a>. Připomeňme si, že se jedná se o jeden z&nbsp;relativně velkého množství dostupných a používaných datových formátů určených pro serializaci a deserializaci dat různých typů s&nbsp;jejich případným přenosem do jiné aplikace či služby. Přenosem se přitom v&nbsp;tomto kontextu myslí jak lokální komunikace, tak i přenos do služby běžící na jiném počítači.</p>

<p>Již dříve jsme se ve stručnosti seznámili s&nbsp;využitím formátu JSON (ten se používá a někdy i zneužívá na mnoha místech) a nepřímo taktéž s&nbsp;formátem TOML používaným typicky pro konfigurační soubory (a mnohem méně často pro rozsáhlejší data). V&nbsp;případě JSONu se jedná o poměrně důležitý formát, protože JSON (a samozřejmě též XML) se v&nbsp;současnosti používá v&nbsp;mnoha webových službách a i když stále vznikají a jsou postupně adaptovány další formáty, ať již textové (<a href="https://yaml.org/">YAML</a>, <a href="https://github.com/edn-format/edn">edn</a>) či binární (<a href="http://bsonspec.org/">BSON</a>, <a href="http://bjson.org/">B-JSON</a>, <a href="https://github.com/FasterXML/smile-format-specification">Smile</a>, <a href="https://developers.google.com/protocol-buffers/">Protocol-Buffers</a>), <a href="https://github.com/fxamacker/cbor">CBOR</a> atd., je velmi pravděpodobné, že se JSON bude i nadále poměrně masivně využívat. Nicméně pochopitelně existují situace, v&nbsp;nichž je vhodné textový a relativně neúsporný JSON nahradit právě nějakým binárním formátem.</p>

<p>I přesto, že se s&nbsp;výše uvedenými formáty JSON a XML setkáme prakticky ve všech oblastech moderního IT, nemusí se vždy jednat o to nejlepší možné řešení problému přenosu strukturovaných dat. Tyto formáty totiž data neukládají v&nbsp;kompaktní binární podobě a navíc je parsing numerických hodnot relativně zdlouhavý, což se projevuje zejména tehdy, pokud je nutné zpracovat skutečně obrovské množství dat (buď mnoho malých zpráv či událostí, nebo naopak rozsáhlé datové soubory). A právě v&nbsp;těchto situacích může být výhodnější sáhnout po nějakém vhodně navrženém binárním formátu. Těch již dnes existuje velké množství, od staršího a dosti těžkopádného ASN.1 (<i>Abstract Syntax Notation One</i>) po formáty, které se snaží napodobit některé vlastnosti JSONu.  Příkladem může být formát <i>CBOR</i>, jenž je mj.&nbsp;podporován knihovnou <a href="https://github.com/fxamacker/cbor">https://github.com/fxamacker/cbor</a>, popř.&nbsp;formát <i>BSON</i>. A konečně, ve se především ve světě Go setkáme i s&nbsp;formátem nazvaným <i>gob</i> neboli <i>Go Objects</i>.</p>

<p>Jednou z&nbsp;&bdquo;binárních alternativ&ldquo; k&nbsp;formátu JSON je u formát <i>MessagePack</i>, s&nbsp;jehož základními vlastnostmi se seznámíme v&nbsp;navazujících kapitolách.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Formát <i>MessagePack</i></h2>

<p>Formát <i>MessagePack</i> je navržen takovým způsobem, aby byl &bdquo;binárním protějškem&ldquo; známého a velmi často využívaného formátu JSON, ovšem s&nbsp;několika vylepšeními. Binární formát <i>MessagePack</i> umožňuje serializovat (ukládat) následující datové typy a pochopitelně i jejich kombinace (protože mnohé datové typy jsou vlastně kontejnery pro hodnoty dalších typů):</p>

<ol>

<li>Hodnotu <strong>nil</strong> odpovídající v&nbsp;JSONu hodnotě <strong>null</strong></li>

<li>Pravdivostní hodnoty <strong>true</strong> a <strong>false</strong></li>

<li>Celá čísla (<i>integer</i>) s&nbsp;různou binární délkou (malé hodnoty jsou uloženy v&nbsp;optimalizované podobě)</li>

<li>Čísla s&nbsp;plovoucí řádovou čárkou v&nbsp;jednoduché i dvojité přesnosti (včetně všech speciálních hodnot)</li>

<li>Řetězce, přičemž krátké řetězce jsou uloženy optimalizovaně</li>

<li>Sekvence bajtů</li>

<li>Pole, jejichž prvky jsou prakticky jakéhokoli typu</li>

<li>Mapy, jejichž klíče i prvky jsou prakticky jakéhokoli typu (rozšíření JSONu)</li>

<li>Časová razítka (to je důležité, JSON tuto možnost postrádá)</li>

<li>Rozšíření (dvojice s&nbsp;typovou informací a hodnotou)</li>

</ol>

<p>Důležité přitom je, že způsob uložení dat určuje nejenom jejich hodnotu, ale i typ, takže přijímající strana získá například informaci &bdquo;toto je hodnota False typu boolean&ldquo; nebo &bdquo;toto je celé číslo s&nbsp;hodnotou 42&ldquo;. Naproti tomu však nezískáme jméno příslušného atributu, takže obě komunikující strany musí mít (shodnou) informaci o tom, jaké datové struktury se přenáší a/nebo serializují.</p>

<table>
<tr><th>Datový typ</th><td>hodnota prvního bajtu (bin)</td><td>hodnota prvního bajtu (hex)</td></tr>
<tr><td>positive fixint</td><td>0xxxxxxx</td><td>0x00 - 0x7f</td></tr>
<tr><td>fixmap</td><td>1000xxxx</td><td>0x80 - 0x8f</td></tr>
<tr><td>fixarray</td><td>1001xxxx</td><td>0x90 - 0x9f</td></tr>
<tr><td>fixstr</td><td>101xxxxx</td><td>0xa0 - 0xbf</td></tr>
<tr><td>nil</td><td>11000000</td><td>0xc0</td></tr>
<tr><td>(never used)</td><td>11000001</td><td>0xc1</td></tr>
<tr><td>false</td><td>11000010</td><td>0xc2</td></tr>
<tr><td>true</td><td>11000011</td><td>0xc3</td></tr>
<tr><td>bin 8</td><td>11000100</td><td>0xc4</td></tr>
<tr><td>bin 16</td><td>11000101</td><td>0xc5</td></tr>
<tr><td>bin 32</td><td>11000110</td><td>0xc6</td></tr>
<tr><td>ext 8</td><td>11000111</td><td>0xc7</td></tr>
<tr><td>ext 16</td><td>11001000</td><td>0xc8</td></tr>
<tr><td>ext 32</td><td>11001001</td><td>0xc9</td></tr>
<tr><td>float 32</td><td>11001010</td><td>0xca</td></tr>
<tr><td>float 64</td><td>11001011</td><td>0xcb</td></tr>
<tr><td>uint 8</td><td>11001100</td><td>0xcc</td></tr>
<tr><td>uint 16</td><td>11001101</td><td>0xcd</td></tr>
<tr><td>uint 32</td><td>11001110</td><td>0xce</td></tr>
<tr><td>uint 64</td><td>11001111</td><td>0xcf</td></tr>
<tr><td>int 8</td><td>11010000</td><td>0xd0</td></tr>
<tr><td>int 16</td><td>11010001</td><td>0xd1</td></tr>
<tr><td>int 32</td><td>11010010</td><td>0xd2</td></tr>
<tr><td>int 64</td><td>11010011</td><td>0xd3</td></tr>
<tr><td>fixext 1</td><td>11010100</td><td>0xd4</td></tr>
<tr><td>fixext 2</td><td>11010101</td><td>0xd5</td></tr>
<tr><td>fixext 4</td><td>11010110</td><td>0xd6</td></tr>
<tr><td>fixext 8</td><td>11010111</td><td>0xd7</td></tr>
<tr><td>fixext 16</td><td>11011000</td><td>0xd8</td></tr>
<tr><td>str 8</td><td>11011001</td><td>0xd9</td></tr>
<tr><td>str 16</td><td>11011010</td><td>0xda</td></tr>
<tr><td>str 32</td><td>11011011</td><td>0xdb</td></tr>
<tr><td>array 16</td><td>11011100</td><td>0xdc</td></tr>
<tr><td>array 32</td><td>11011101</td><td>0xdd</td></tr>
<tr><td>map 16</td><td>11011110</td><td>0xde</td></tr>
<tr><td>map 32</td><td>11011111</td><td>0xdf</td></tr>
<tr><td>negative fixint</td><td>111xxxxx</td><td>0xe0 - 0xff</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Některá omezení formátu <i>MessagePack</i></h2>

<p>Možnosti formátu <i>MessagePack</i>, kterým se dnes zabýváme, skutečně do značné míry odpovídají možnostem JSONu s&nbsp;několika rozšířeními zmíněnými výše. Ovšem musíme se zmínit i o některých principiálních omezeních, z&nbsp;nichž některé jsou společné i dalším často používaným serializačním formátům (nehledě na to, zda jsou textové či binární):</p>

<ol>

<li>celá čísla mohou nabývat hodnoty z&nbsp;rozsahu -2<sup>63</sup> až 2<sup>64</sup>-1 (to není chyba &ndash; pro kladné hodnoty existuje formát bez znaménka)</li>

<li>maximální délka řetězců je rovna 4GB (což v&nbsp;praxi nebude velké omezení)</li>

<li>maximální délka binárního bloku je taktéž rovna 4GB (což již může vadit)</li>

<li>maximální počet prvků v&nbsp;poli je roven 2<sup>32</sup>-1</li>

<li>maximální počet dvojic klíč-hodnota v&nbsp;mapě je roven 2<sup>32</sup>-1</li>

<li>nelze ukládat ukazatele a tím pádem ani přímo pracovat se stromy, obecnými grafy atd. Tento nedostatek se částečně dá nahradit mapami.</li>

<li>co je ze sémantického hlediska poněkud problematické &ndash; není podporován typ &bdquo;množina&ldquo;</li>

</ol>

<p><div class="rs-tip-major">Poznámka: podrobnosti o tom, jak jsou ukládány jednotlivé typy hodnot, si ukážeme ve druhé (prakticky zaměřené) části dnešního článku.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. Hodnota <strong>nil</strong> resp.&nbsp;<strong>None</strong></h2>

<p>Začneme tím zdánlivě nejjednodušším možným příkladem, který je však
v&nbsp;praxi poněkud problematický při předávání serializovaných hodnot mezi
různými programovacími jazyky. Konkrétně se budeme zabývat způsobem serializace
hodnoty <strong>None</strong>. Ta je použita stejným způsobem jako hodnota
<strong>null</strong> v&nbsp;JSONu, tedy pro indikaci chybějících dat. Přitom
<strong>None</strong> má v&nbsp;Pythonu svůj vlastní datový typ pojmenovaný
taktéž <strong>None</strong>, zatímco například <strong>nil</strong>
v&nbsp;jazyce Go nemusí být nutně přiřazeno k&nbsp;datovému typu (z&nbsp;tohoto
pohledu je beztypové, viz celý článek, který jsme na toto téma vydali: <a
href="https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/">na
rozdíl od samotného jazyka Go</a>.</p>

<p>Zdrojový kód demonstračního příkladu se skládá z&nbsp;několika operací:</p>

<ol>

<li>Vytvoření a otevření nového (binárního) souboru pro zápis</li>

<li>Konstrukce objektu/struktury použité pro serializaci</li>

<li>Vlastní serializace dat
úspěšná</li>

</ol>

<p>V&nbsp;Pythonu může takový program vypadat následovně:</p>

<pre>
import msgpack
&nbsp;
value = None
&nbsp;
with open("nil.bin", "wb") as outfile:
    packed = msgpack.packb(value)
    outfile.write(packed)
</pre>

<p>Pro zajímavost se podívejme, jak by podobný program vypadal v&nbsp;jazyce
Go, v&nbsp;němž se explicitně kontrolují případné chybové stavy atd.:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/ugorji/go/codec"
)
&nbsp;
const filename = "/tmp/nil.bin"
&nbsp;
func <strong>main</strong>() {
        <i>// vytvořit soubor s binárními daty</i>
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()
&nbsp;
        log.Print("Output file created")
&nbsp;
        <i>// handler</i>
        var handler codec.MsgpackHandle
&nbsp;
        <i>// objekt realizující zakódování dat</i>
        encoder := codec.NewEncoder(fout, &amp;handler)
&nbsp;
        log.Print("Encoder created")
&nbsp;
        <i>// zakódování dat</i>
        err = <u>encoder.Encode(nil)</u>
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        log.Print("Done")
}
</pre>

<p>V&nbsp;obou případech, tedy nezávisle na použitém programovacím jazyku, by však měl mít výsledný soubor <strong>nil.bin</strong> naprosto totožný obsah. Výsledkem serializace totiž bude binární soubor obsahující jediný bajt s&nbsp;hodnotou 0xc0, o čemž se ostatně můžeme velmi snadno přesvědčit:</p>

<pre>
$ <strong>od -A x -t x1 -v nil.bin</strong>
&nbsp;
000000 c0
000001
</pre>

<p>Obsah tohoto souboru pochopitelně <a href="https://github.com/msgpack/msgpack/blob/master/spec.md#nil-format">plně odpovídá specifikaci</a>.</p>

<p><div class="rs-tip-major">Poznámka: je důležité si uvědomit, že tato hodnota má význam &bdquo;chybějící údaj&ldquo; nebo &bdquo;neexistující údaj&ldquo; a nejedná se o ukazatel (v&nbsp;Go a vlastně i Pythonu se tyto dvě rozdílné sémantické významy poněkud překrývají).</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady využívající knihovnu PyTorch lze nalézt
v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Základní informace o MessagePacku<br />
<a href="https://msgpack.org/">https://msgpack.org/</a>
</li>

<li>Balíček msgpack na PyPi<br />
<a href="https://pypi.org/project/msgpack/">https://pypi.org/project/msgpack/</a>
</li>

<li>MessagePack na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/MessagePack">https://en.wikipedia.org/wiki/MessagePack</a>
</li>

<li>Comparison of data-serialization formats (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats">https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats</a>
</li>

<li>Repositáře msgpacku<br />
<a href="https://github.com/msgpack">https://github.com/msgpack</a>
</li>

<li>Specifikace ukládání různých typů dat<br />
<a href="https://github.com/msgpack/msgpack/blob/master/spec.md">https://github.com/msgpack/msgpack/blob/master/spec.md</a>
</li>

<li>Podpora MessagePacku v&nbsp;různých jazycích<br />
<a href="https://msgpack.org/#languages">https://msgpack.org/#languages</a>
</li>

<li>Základní implementace formátu msgpack pro Go<br />
<a href="https://github.com/msgpack/msgpack-go">https://github.com/msgpack/msgpack-go</a>
</li>

<li>go-codec<br />
<a href="https://github.com/ugorji/go">https://github.com/ugorji/go</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<ol>
<li>Formát BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Problematika nulových hodnot v Go, aneb proč nil != nil<br />
<a href="https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/">https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/</a>
</li>

<li>IEEE-754 Floating Point Converter<br />
<a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a>
</li>

<li>Base Convert: IEEE 754 Floating Point<br />
<a href="https://baseconvert.com/ieee-754-floating-point">https://baseconvert.com/ieee-754-floating-point</a>
</li>

<li>Brain Floating Point – nový formát uložení čísel pro strojové učení a chytrá čidla<br />
<a href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

