<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Využití serializačního formátu MessagePack v Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Využití serializačního formátu MessagePack v Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Využití serializačního formátu MessagePack v&nbsp;Pythonu</a></p>
<p><a href="#k02">2. Formát <i>MessagePack</i></a></p>
<p><a href="#k03">3. Některá omezení formátu <i>MessagePack</i></a></p>
<p><a href="#k04">4. Instalace balíčku <strong>msgpack</strong> i balíčku pro serializaci N-dimenzionálních polí</a></p>
<p><a href="#k05">5. Prohlížení binárních souborů se serializovanými daty</a></p>
<p><a href="#k06">6. Serializace primitivních datových typů do formátu <i>MessagePack</i></a></p>
<p><a href="#k07">7. Hodnota <strong>nil</strong> resp.&nbsp;<strong>None</strong></a></p>
<p><a href="#k08">8. Serializace pravdivostních hodnot <strong>True</strong> a <strong>False</strong></a></p>
<p><a href="#k09">*** 9. Serializace celočíselných hodnot</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">18. Příloha: alternativní binární formáty pro serializaci dat</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Využití serializačního formátu MessagePack v&nbsp;Pythonu</h2>

<p>Se serializačním formátem nazvaným <i>MessagePack</i> jsme se již na
stránkách Roota jednou setkali, a to konkrétně v&nbsp;souvislosti <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">s&nbsp;programovacím
jazykem Go</a>. Připomeňme si ve stručnosti, že se v&nbsp;současnosti jedná o
jeden z&nbsp;relativně velkého množství dostupných a používaných datových
formátů určených pro serializaci a deserializaci dat různých typů s&nbsp;jejich
případným přenosem do jiné aplikace či služby (poté se spíše setkáme
s&nbsp;termíny <i>marshalling</i> a <i>unmarshalling</i>). Přenosem se přitom
v&nbsp;tomto kontextu myslí jak lokální komunikace, tak i přenos do služby
běžící na jiném počítači.</p>

<p>Již dříve jsme se ve stručnosti seznámili s&nbsp;využitím známého formátu
<i>JSON</i> (ten se používá a někdy i zneužívá na mnoha místech) a nepřímo
taktéž s&nbsp;formátem <i>TOML</i> používaným typicky pro konfigurační soubory
(a mnohem méně často pro rozsáhlejší data). V&nbsp;případě JSONu se jedná o
poměrně důležitý formát, protože JSON (a samozřejmě též XML) se
v&nbsp;současnosti používá v&nbsp;mnoha webových službách a i když stále
vznikají a jsou postupně adaptovány další formáty, ať již textové (<a
href="https://yaml.org/">YAML</a>, <a
href="https://github.com/edn-format/edn">edn</a>) či binární (<a
href="http://bsonspec.org/">BSON</a>, <a href="http://bjson.org/">B-JSON</a>,
<a href="https://github.com/FasterXML/smile-format-specification">Smile</a>, <a
href="https://developers.google.com/protocol-buffers/">Protocol-Buffers</a>),
<a href="https://github.com/fxamacker/cbor">CBOR</a> atd., je velmi
pravděpodobné, že se JSON bude i nadále poměrně masivně využívat (a navíc pro
něj existují užitečné nástroje typu <a
href="https://www.root.cz/clanky/zpracovani-dat-reprezentovanych-ve-formatu-json-nastrojem-jq/">jq</a>).
Nicméně pochopitelně existují situace, v&nbsp;nichž je vhodné textový a
relativně neúsporný JSON nahradit právě nějakým binárním formátem.</p>

<p>I přesto, že se s&nbsp;výše uvedenými formáty JSON a XML setkáme prakticky
ve všech oblastech moderního IT, nemusí se vždy jednat o to nejlepší možné
řešení problému přenosu strukturovaných dat. Tyto formáty totiž data neukládají
v&nbsp;kompaktní binární podobě a navíc je parsing numerických hodnot relativně
zdlouhavý, což se projevuje zejména tehdy, pokud je nutné zpracovat skutečně
obrovské množství dat (buď se tedy jedná o situaci, kdy je nutné zpracovat
mnoho malých zpráv či událostí, nebo naopak rozsáhlé datové soubory). A právě
v&nbsp;těchto situacích může být výhodnější sáhnout po nějakém vhodně navrženém
binárním formátu, ideálně takovém formátu, který je popsán ve standardu a který
je implementován pro více jazyků či ekosystémů. Takových úsporných formátů již
dnes existuje velké množství, od staršího a dosti těžkopádného ASN.1
(<i>Abstract Syntax Notation One</i>) po formáty, které se snaží napodobit
některé vlastnosti JSONu. Příkladem z&nbsp;této oblasti může být formát
<i>CBOR</i>, jenž je mj.&nbsp;podporován knihovnou <a
href="https://github.com/fxamacker/cbor">https://github.com/fxamacker/cbor</a>,
popř.&nbsp;formát <i>BSON</i>. A konečně, ve se především ve světě Go setkáme i
s&nbsp;formátem nazvaným <i>gob</i> neboli <i>Go Objects</i>.</p>

<p>Jednou ze známých a relativně často nasazovaných &bdquo;binárních
alternativ&ldquo; k&nbsp;formátu JSON je i formát nazvaný <i>MessagePack</i>,
s&nbsp;jehož základními vlastnostmi se seznámíme v&nbsp;navazujících
kapitolách. Zaměříme se přitom na jeho použití v&nbsp;Pythonu, což s&nbsp;sebou
nese určité specifické vlastnosti, které vyplývají z&nbsp;typového systému
Pythonu (konkrétně z&nbsp;toho, že existuje celočíselný typ s&nbsp;neomezeným
rozsahem či jediný numerický formát s&nbsp;plovoucí řádovou čárkou).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Formát <i>MessagePack</i></h2>

<p>Datový formát <i>MessagePack</i> je navržen takovým způsobem, aby byl
&bdquo;binárním protějškem&ldquo; známého a velmi často využívaného formátu
JSON, ovšem s&nbsp;několika vylepšeními. Binární formát <i>MessagePack</i>
umožňuje serializovat (ukládat) následující datové typy a pochopitelně i jejich
kombinace, protože je vhodné si uvědomit, že mnohé datové typy jsou vlastně
kontejnery pro hodnoty dalších typů (v&nbsp;MessagePacku se takto používají
pole a taktéž mapy):</p>

<ol>

<li>Hodnotu <strong>nil</strong> odpovídající v&nbsp;JSONu hodnotě
<strong>null</strong>. Tato hodnota je uložena v&nbsp;jediném bajtu, včetně
typové informace.</li>

<li>Pravdivostní hodnoty <strong>true</strong> a <strong>false</strong>. Opět
je použit úsporný způsob uložení v&nbsp;jediném bajtu.</li>

<li>Celá čísla (<i>integer</i>) s&nbsp;různou binární délkou. Malé hodnoty,
s&nbsp;nimiž se setkáme nejčastěji, jsou uloženy v&nbsp;optimalizované (kratší)
podobě. Jedná se o rozšíření oproti formátu JSON, který celá čísla
nepodporuje.</li>

<li>Čísla s&nbsp;plovoucí řádovou čárkou v&nbsp;jednoduché i dvojité přesnosti,
a to (to je pro mnoho aplikací důležité) včetně všech speciálních hodnot, tedy
kladného a záporného nekonečna i hodnoty &bdquo;Not a Number&ldquo;.</li>

<li>Unicode řetězce, přičemž krátké řetězce jsou opět uloženy optimalizovaně.</li>

<li>Sekvence bajtů, což je typ, který nám umožňuje například serializaci
obrázků atd.</li>

<li>Pole, jejichž prvky jsou prakticky jakéhokoli typu.</li>

<li>Mapy, jejichž klíče i prvky jsou prakticky jakéhokoli typu (v&nbsp;tomto
případě se jedná o rozšíření JSONu).</li>

<li>Časová razítka. To je v&nbsp;praxi poměrně užitečný formát. JSON tuto
možnost postrádá a proto se setkáme s&nbsp;mnoha různými způsoby uložení
časových razítek (mnohé jsou navrženy špatně).</li>

<li>Rozšíření (dvojice s&nbsp;typovou informací a hodnotou). Takto lze
MessagePack rozšířit například o komplexní čísla, vektory atd. Podpora však
musí existovat na obou komunikujících stranách!</li>

</ol>

<p>Důležité přitom je, že způsob uložení dat určuje nejenom jejich hodnotu, ale
i typ, takže přijímající strana získá například informaci &bdquo;toto je
hodnota False typu boolean&ldquo; nebo &bdquo;toto je celé číslo
s&nbsp;hodnotou 42&ldquo;. Naproti tomu však nezískáme jméno příslušného
atributu, takže obě komunikující strany musí mít (shodnou) informaci o tom,
jaké datové struktury se přenáší a/nebo serializují, nebo je nutné použít mapu
(což je nejčastější způsob).</p>

<p>Již z&nbsp;prvního bajtu každé serializované hodnoty lze určit její typ. Jak
je to zařízeno je patrné z&nbsp;následující tabulky. Povšimněte si, že u mnoha
typů je v&nbsp;prvním bajtu typ uložen jen v&nbsp;několika bitech a další bity
tak lze využit i pro (částečné) uložení hodnoty:</p>

<table>
<tr><th>Datový typ</th><td>hodnota prvního bajtu (bin)</td><td>hodnota prvního bajtu (hex)</td></tr>
<tr><td>positive fixint</td><td>0xxxxxxx</td><td>0x00 - 0x7f</td></tr>
<tr><td>fixmap</td><td>1000xxxx</td><td>0x80 - 0x8f</td></tr>
<tr><td>fixarray</td><td>1001xxxx</td><td>0x90 - 0x9f</td></tr>
<tr><td>fixstr</td><td>101xxxxx</td><td>0xa0 - 0xbf</td></tr>
<tr><td>nil (null, None)</td><td>11000000</td><td>0xc0</td></tr>
<tr><td>(není použit)</td><td>11000001</td><td>0xc1</td></tr>
<tr><td>false</td><td>11000010</td><td>0xc2</td></tr>
<tr><td>true</td><td>11000011</td><td>0xc3</td></tr>
<tr><td>bin 8</td><td>11000100</td><td>0xc4</td></tr>
<tr><td>bin 16</td><td>11000101</td><td>0xc5</td></tr>
<tr><td>bin 32</td><td>11000110</td><td>0xc6</td></tr>
<tr><td>ext 8</td><td>11000111</td><td>0xc7</td></tr>
<tr><td>ext 16</td><td>11001000</td><td>0xc8</td></tr>
<tr><td>ext 32</td><td>11001001</td><td>0xc9</td></tr>
<tr><td>float 32</td><td>11001010</td><td>0xca</td></tr>
<tr><td>float 64</td><td>11001011</td><td>0xcb</td></tr>
<tr><td>uint 8</td><td>11001100</td><td>0xcc</td></tr>
<tr><td>uint 16</td><td>11001101</td><td>0xcd</td></tr>
<tr><td>uint 32</td><td>11001110</td><td>0xce</td></tr>
<tr><td>uint 64</td><td>11001111</td><td>0xcf</td></tr>
<tr><td>int 8</td><td>11010000</td><td>0xd0</td></tr>
<tr><td>int 16</td><td>11010001</td><td>0xd1</td></tr>
<tr><td>int 32</td><td>11010010</td><td>0xd2</td></tr>
<tr><td>int 64</td><td>11010011</td><td>0xd3</td></tr>
<tr><td>fixext 1</td><td>11010100</td><td>0xd4</td></tr>
<tr><td>fixext 2</td><td>11010101</td><td>0xd5</td></tr>
<tr><td>fixext 4</td><td>11010110</td><td>0xd6</td></tr>
<tr><td>fixext 8</td><td>11010111</td><td>0xd7</td></tr>
<tr><td>fixext 16</td><td>11011000</td><td>0xd8</td></tr>
<tr><td>str 8</td><td>11011001</td><td>0xd9</td></tr>
<tr><td>str 16</td><td>11011010</td><td>0xda</td></tr>
<tr><td>str 32</td><td>11011011</td><td>0xdb</td></tr>
<tr><td>array 16</td><td>11011100</td><td>0xdc</td></tr>
<tr><td>array 32</td><td>11011101</td><td>0xdd</td></tr>
<tr><td>map 16</td><td>11011110</td><td>0xde</td></tr>
<tr><td>map 32</td><td>11011111</td><td>0xdf</td></tr>
<tr><td>negative fixint</td><td>111xxxxx</td><td>0xe0 - 0xff</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Některá omezení formátu <i>MessagePack</i></h2>

<p>Možnosti binárního formátu <i>MessagePack</i>, kterým se v&nbsp;dnešním
článku zabýváme, skutečně do značné míry odpovídají možnostem JSONu
s&nbsp;několika rozšířeními, o nichž jsme se zmínili výše a s&nbsp;nimiž se
ještě setkáme v&nbsp;demonstračních příkladech v&nbsp;praktické části článku.
Ovšem musíme se zmínit i o některých principiálních omezeních, z&nbsp;nichž
některé jsou společné i dalším často používaným serializačním formátům (nehledě
na to, zda jsou textové či binární):</p>

<ol>

<li>celá čísla mohou nabývat hodnoty z&nbsp;rozsahu -2<sup>63</sup> až
2<sup>64</sup>-1 (to není chyba &ndash; pro kladné hodnoty totiž
v&nbsp;MessagePacku existuje typ bez znaménka, tedy <i>unsigned int</i>).
Rozsah je zde tedy mnohem větší, než v&nbsp;případě JSONu, kde je nutné
pracovat s&nbsp;typem <i>double</i>.</li>

<li>maximální délka řetězců je rovna 4GB (což v&nbsp;praxi pravděpodobně nebude
příliš velké omezení)</li>

<li>maximální délka binárního bloku je taktéž rovna 4GB (což již v&nbsp;praxi
někdy může vadit)</li>

<li>maximální počet prvků v&nbsp;poli je roven 2<sup>32</sup>-1</li>

<li>maximální počet dvojic klíč-hodnota v&nbsp;mapě je taktéž roven
2<sup>32</sup>-1</li>

<li>nelze ukládat ukazatele a tím pádem ani přímo pracovat se stromy, obecnými
grafy atd. Tento nedostatek se částečně dá nahradit mapami obsahujícími další
hodnoty (pole, mapy). Totéž se týká JSONu a mnoha dalších přenositelných
formátů.</li>

<li>co je ze sémantického hlediska poněkud problematické &ndash; není
podporován typ &bdquo;množina&ldquo; (na to jsme si museli zvyknout i u
JSONu).</li>

<li>taktéž není podporován typ <i>decimal</i>, konkrétně numerické hodnoty
s&nbsp;plovoucí <i>desetinnou</i> řádovou čárkou.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: podrobnosti o tom, jak jsou ukládány
jednotlivé typy hodnot, si ukážeme ve druhé (prakticky zaměřené) části dnešního
článku.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace balíčku <strong>msgpack</strong>> i balíčku pro serializaci N-dimenzionálních polí</h2>

<p>Pro práci s&nbsp;formátem <i>MessagePack</i> v&nbsp;Pythonu je určen balíček
nazvaný <strong>msgpack</strong>. Ten již bývá nainstalován společně
s&nbsp;Pythonem (protože ho využívají některé nástroje nad Pythonem postavené),
ovšem pokud tomu tak není, je instalace balíčku <strong>msgpack</strong> snadná
a přímočará:</p>

<pre>
$ <strong>pip install --user msgpack</strong>
</pre>

<p>Pro jednoduchý test, zda instalace balíčku proběhla v&nbsp;pořádku,
použijeme tento skript:</p>

<pre>
import msgpack
&nbsp;
help(msgpack)
</pre>

<p>Měla by se zobrazit nápověda:</p>

<pre>
Help on package msgpack:
&nbsp;
NAME
    msgpack
&nbsp;
PACKAGE CONTENTS
    _cmsgpack
    exceptions
    ext
    fallback
&nbsp;
FUNCTIONS
    dump = pack(o, stream, **kwargs)
        Pack object `o` and write it to `stream`
&nbsp;
        See :class:`Packer` for options.
&nbsp;
    dumps = packb(o, **kwargs)
        Pack object `o` and return packed bytes
&nbsp;
        See :class:`Packer` for options.
&nbsp;
    load = unpack(stream, **kwargs)
        Unpack an object from `stream`.
&nbsp;
        Raises `ExtraData` when `stream` contains extra bytes.
        See :class:`Unpacker` for options.
&nbsp;
    pack(o, stream, **kwargs)
        Pack object `o` and write it to `stream`
&nbsp;
        See :class:`Packer` for options.
&nbsp;
    packb(o, **kwargs)
        Pack object `o` and return packed bytes
&nbsp;
        See :class:`Packer` for options.
&nbsp;
    unpack(stream, **kwargs)
        Unpack an object from `stream`.
&nbsp;
        Raises `ExtraData` when `stream` contains extra bytes.
        See :class:`Unpacker` for options.
&nbsp;
DATA
    version = (1, 0, 6)
&nbsp;
VERSION
    1.0.6
&nbsp;
FILE
    /usr/lib64/python3.12/site-packages/msgpack/__init__.py
</pre>

<p>Povšimněte si, že k&nbsp;dispozici jen jen několik funkcí; samotné API je
pojato minimalisticky (což je jen dobře):</p>

<table>
<tr><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>pack</td><td>serializace hodnoty do otevřeného <i>streamu</i></td></tr>
<tr><td>packb</td><td>serializace hodnoty to sekvence bajtů</td></tr>
<tr><td>unpack</td><td>deserializace hodnoty z&nbsp;otevřeného <i>streamu</i></td></tr>
<tr><td>unpackb</td><td>deserializace hodnoty ze sekvence bajtů</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>dump</td><td>provádí tutéž operaci co pack()</td></tr>
<tr><td>dumps</td><td>provádí tutéž operaci co packb()</td></tr>
<tr><td>load</td><td>provádí tutéž operaci co unpack()</td></tr>
<tr><td>loads</td><td>provádí tutéž operaci co unpackb()</td></tr>
</table>

<p>Dále si nainstalujeme přídavný balíček, který nám umožní serializaci a
deserializaci N-dimenzionálních polí knihovny Numpy. Jedná se o velmi užitečný
doplněk:</p>

<pre>
$ <strong>pip install --user msgpack-numpy</strong>
</pre>

<p>Tento balíček již typicky není v&nbsp;systému dostupný, takže se skutečně
nainstaluje:</p>

<pre>
Collecting msgpack-numpy
  Downloading msgpack_numpy-0.4.8-py2.py3-none-any.whl.metadata (5.0 kB)
Collecting numpy&gt;=1.9.0 (from msgpack-numpy)
  Downloading numpy-2.2.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (62 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 62.0/62.0 kB 955.9 kB/s eta 0:00:00
Requirement already satisfied: msgpack&gt;=0.5.2 in /usr/lib64/python3.12/site-packages (from msgpack-numpy) (1.0.6)
Downloading msgpack_numpy-0.4.8-py2.py3-none-any.whl (6.9 kB)
Downloading numpy-2.2.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.1 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 16.1/16.1 MB 8.0 MB/s eta 0:00:00
Installing collected packages: numpy, msgpack-numpy
Successfully installed msgpack-numpy-0.4.8 numpy-2.2.0
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Prohlížení binárních souborů se serializovanými daty</h2>

<p>Pro prohlížení obsahu vytvořených binárních souborů se serializovanými daty
je možné použít například nějakou formu <i>hexadecimálního prohlížeče</i>.
Hexadecimálních prohlížečů a editorů existuje (pro Linux) relativně velké
množství. První dva nástroje nazvané <strong>od</strong> a
<strong>hexdump</strong> (zkráceně <strong>hd</strong>) pracují jako relativně
jednoduché jednosměrné filtry (navíc bývají nainstalovány společně se základní
sadou nástrojů), ovšem další nástroj pojmenovaný <strong>xxd</strong> již může
být použit pro obousměrný převod (filtraci), tj.&nbsp;jak pro transformaci
původního binárního souboru do čitelného tvaru (většinou s&nbsp;využitím
šestnáctkové soustavy), tak i pro zpětný převod. Díky tomu je možné nástroj
<strong>xxd</strong> použít například ve funkci pluginu do běžných textových
editorů (v&nbsp;textovém editoru se v&nbsp;takovém případě edituje
hexadecimální výpis, při uložení se data konvertují zpět do původní úsporné
binární podoby).</p>

<p>Další nástroj pojmenovaný <strong>hexdiff</strong> dokáže porovnat obsah
dvou binárních souborů a poslední zmíněný nástroj <strong>mcview</strong> je,
na rozdíl od předchozí čtveřice, aplikací s&nbsp;interaktivním ovládáním a
plnohodnotným textovým uživatelským prostředím (patří do sady nástrojů
vytvořených okolo <i>Midnight Commanderu</i> a instaluje se společně
s&nbsp;tímto nástrojem).</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;kontextu dnešního článku si
vystačíme s&nbsp;možnostmi nabízenými nástrojem <strong>od</strong> neboli
<i>octal dump</i>. Jméno tohoto nástroje je ve skutečnosti zavádějící, protože
dokáže zobrazit obsah binárního soubory mnoha různými způsoby, nejenom
v&nbsp;osmičkové soustavě. Již fakt, že jméno této utility má pouhá dvě
písmena, napovídá, že se jedná o nástroj pocházející již z&nbsp;prvních verzí
Unixu. Původní varianty utility <strong>od</strong> vypisovaly obsah zvoleného
souboru (alternativně standardního vstupu či zvoleného zařízení)
s&nbsp;využitím osmičkové soustavy, ovšem GNU verze <strong>od</strong> nabízí
uživatelům mnohem víc možností, a to včetně použití hexadecimální soustavy
(ostatně i proto o této utilitě dnes píšeme), zformátování sousedních čtyř
bajtů do čísla typu <i>single/float</i>, dtto pro osm bajtů a čísla typu
<i>double</i> apod.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Serializace primitivních datových typů do formátu <i>MessagePack</i></h2>

<p>Již v&nbsp;úvodních dvou kapitolách jsme si řekli, že do formátu
<i>MessagePack</i> je možné ukládat jak hodnoty jednoduchých (primitivních)
datových typů, tak i hodnoty složených datových typů (což jsou různé typy
kontejnerů &ndash; pole a mapy). Začneme primitivními datovými typy, protože
binární formát <i>MessagePack</i> je navržen takovým způsobem, aby byl způsob
jejich uložení v&nbsp;co největší míře efektivní &ndash; a to nejenom co se
týká celkového objemu dat, ale i jednoduchosti nebo naopak složitosti
zakódování a dekódování hodnot. Nativně jsou podporovány následující primitivní
datové typy:</p>

<ol>
<li>Typ <strong>none</strong> s&nbsp;jedinou hodnotou <strong>nil</strong> (v&nbsp;Pythonu odpovídá typu <strong>NoneType</strong>)</li>
<li>Typ <strong>boolean</strong> s&nbsp;hodnotami <strong>true</strong> a <strong>false</strong> (v&nbsp;Pythonu odpovídá typu <strong>bool</strong>)</li>
<li>Typ <strong>unsigned integer</strong> s&nbsp;plně 64 bitovým rozsahem (ve standardním Pythonu nemá přímý protějšek)</li>
<li>Typ <strong>signed integer</strong> s&nbsp;plně 64 bitovým rozsahem (částečně odpovídá typu <strong>int</strong>)</li>
<li>Typ <strong>float/single/float32</strong> s&nbsp;plovoucí řádovou čárkou (ve standardním Pythonu nemá přímý protějšek)</li>
<li>Typ <strong>double/float64</strong> s&nbsp;plovoucí řádovou čárkou (v&nbsp;Pythonu odpovídá typu <strong>float</strong> &ndash; pozor na odlišné pojmenování!)</li>
</ol>



<p><a name="k07"></a></p>
<h2 id="k07">7. Hodnota <strong>nil</strong> resp.&nbsp;<strong>None</strong></h2>

<p>Začneme tím zdánlivě nejjednodušším možným příkladem, který je však
v&nbsp;praxi poněkud problematický při předávání serializovaných hodnot mezi
různými programovacími jazyky a proto je nutné se o něm zmínit. Konkrétně se
budeme zabývat způsobem serializace Pythonovské hodnoty <strong>None</strong>.
Ta je použita stejným způsobem jako hodnota <strong>null</strong> v&nbsp;JSONu,
tedy pro indikaci chybějících dat. Přitom <strong>None</strong> má
v&nbsp;Pythonu svůj vlastní datový typ pojmenovaný taktéž
<strong>None</strong>, zatímco například <strong>nil</strong> v&nbsp;jazyce Go
nemusí být nutně přiřazeno k&nbsp;datovému typu (z&nbsp;tohoto pohledu je
v&nbsp;čase překladu beztypové, viz celý článek, který jsme na toto téma
vydali: <a
href="https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/">na
rozdíl od samotného jazyka Go</a>).</p>

<p>Zdrojový kód demonstračního příkladu, který serializuje hodnotu
<strong>None</strong>, se skládá z&nbsp;několika operací:</p>

<ol>

<li>Vytvoření a otevření nového (binárního) souboru pro zápis</li>

<li>Konstrukce objektu/struktury použité pro serializaci</li>

<li>Vlastní serializace dat přímo do otevřeného binárního souboru</li>

</ol>

<p>V&nbsp;Pythonu 3.x může takový program vypadat následovně:</p>

<pre>
import msgpack
&nbsp;
value = None
&nbsp;
with open("nil.bin", "wb") as outfile:
    packed = msgpack.packb(value)
    outfile.write(packed)
</pre>

<p>Pro zajímavost se podívejme, jak by podobný program vypadal při realizaci
v&nbsp;programovacím jazyce Go, v&nbsp;němž se explicitně kontrolují případné
chybové stavy atd.:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/ugorji/go/codec"
)
&nbsp;
const filename = "/tmp/nil.bin"
&nbsp;
func <strong>main</strong>() {
        <i>// vytvořit soubor s binárními daty</i>
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()
&nbsp;
        log.Print("Output file created")
&nbsp;
        <i>// handler</i>
        var handler codec.MsgpackHandle
&nbsp;
        <i>// objekt realizující zakódování dat</i>
        encoder := codec.NewEncoder(fout, &amp;handler)
&nbsp;
        log.Print("Encoder created")
&nbsp;
        <i>// zakódování dat</i>
        err = <u>encoder.Encode(nil)</u>
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        log.Print("Done")
}
</pre>

<p>V&nbsp;obou případech, tedy nezávisle na použitém programovacím jazyku, by
však měl mít výsledný soubor <strong>nil.bin</strong> naprosto totožný obsah.
Výsledkem serializace totiž bude binární soubor obsahující jediný bajt
s&nbsp;hodnotou <strong>0xc0</strong>, o čemž se ostatně můžeme velmi snadno
přesvědčit:</p>

<pre>
$ <strong>od -A x -t x1 -v nil.bin</strong>
&nbsp;
000000 c0
000001
</pre>

<p>Obsah tohoto souboru pochopitelně <a
href="https://github.com/msgpack/msgpack/blob/master/spec.md#nil-format">plně
odpovídá specifikaci</a>.</p>

<p><div class="rs-tip-major">Poznámka: je důležité si uvědomit, že tato hodnota
má význam &bdquo;chybějící údaj&ldquo; nebo &bdquo;neexistující údaj&ldquo; a
nejedná se v&nbsp;žádném případě o ukazatel (v&nbsp;Go a vlastně i Pythonu se
tyto dvě rozdílné sémantické významy poněkud překrývají).</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Serializace pravdivostních hodnot <strong>True</strong> a <strong>False</strong></h2>

<p>V&nbsp;serializačním formátu <i>MessagePack</i> jsou plně podporovány i
pravdivostní hodnoty <strong>True</strong> a <strong>False</strong>, což
v&nbsp;praxi znamená, že není nutné (a ani ze sémantického pohledu rozumné)
používat pro reprezentaci pravdivostních hodnot například hodnoty 0 a 1 či 0 a
-1. Navíc jsou pravdivostní hodnoty uloženy relativně rozumným způsobem &ndash;
v&nbsp;jediném bajtu (včetně informace o typu). O tom se budeme moci velmi
snadno přesvědčit na dvojici příkladů, které uloží hodnotu
<strong>True</strong> a ve druhém případě hodnotu <strong>False</strong>:</p>

<pre>
import msgpack
&nbsp;
value = True
&nbsp;
with open("true.bin", "wb") as outfile:
    packed = msgpack.packb(value)
    outfile.write(packed)
</pre>

<pre>
import msgpack
&nbsp;
value = False
&nbsp;
with open("false.bin", "wb") as outfile:
    packed = msgpack.packb(value)
    outfile.write(packed)
</pre>

<p>Nyní se podívejme na to, jak jsou tyto dvě hodnoty uloženy do výsledného
souboru:</p>

<pre>
$ <strong>od -A x -t x1 -v true.bin</strong>
&nbsp;
000000 c3
000001
&nbsp;
&nbsp;
&nbsp;
$ <strong>od -A x -t x1 -v false.bin</strong>
&nbsp;
000000 c2
000001
</pre>

<p>Což opět plně odpovídá <a
href="https://github.com/msgpack/msgpack/blob/master/spec.md#bool-format-family">specifikaci</a>.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Serializace celočíselných hodnot</h2>

<p>V&nbsp;této kapitole si ukážeme způsob serializace celočíselných hodnot, což je již zajímavější problém. V&nbsp;tomto ohledu totiž museli tvůrci formátu <i>MessagePack</i> splnit dva protichůdné požadavky:</p>

<ol>

<li>reprezentovat co největší rozsah hodnot, ideálně 64bitové hodnoty</li>

<li>na druhou stranu je použití 64bitů (8 bajtů) ve všech případech až trestuhodné plýtvání místem (a to mnohdy i oproti textovému JSONu v&nbsp;případě hodnot okolo nuly)</li>

</ol>

<p>Výsledkem snahy o splnění obou požadavků je flexibilní způsob uložení celých čísel v&nbsp;jednom, dvou, třech, pěti či devíti bajtech &ndash; vždy v&nbsp;závislosti na konkrétní hodnotě a taktéž na tom, zda se jedná o hodnotu kladnou či zápornou. <a href="https://github.com/msgpack/msgpack/blob/master/spec.md#int-format-family">Specifikace uložení celých čísel</a> ve skutečnosti není příliš složitá a můžeme si ji snadno otestovat.</p>

<p><div class="rs-tip-major">Poznámka: povšimněte si striktního použití pořadí
bajtů <i>big endian</i>!</div></p>





<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: alternativní binární formáty pro serializaci dat</h2>

<p>Jak jsme se již zmínili <a href="#k01">v&nbsp;úvodní kapitole</a>, existuje
ve skutečnosti mnohem větší množství binárních formátů používaných jak pro
serializaci dat, tak i pro komunikaci mezi různými službami
(resp.&nbsp;přesněji řečeno pro posílání dat/zpráv mezi těmito službami nebo
mikroslužbami). Alespoň krátce se tedy o některých z&nbsp;těchto formátů
zmiňme.</p>

<p>Prvním alternativním binárním formátem, s&nbsp;nímž se v&nbsp;oblasti
mikroslužeb setkáme, je formát nazvaný <i>gob</i> neboli <i>Go Objects</i>.
Jedná se o formát určený primárně pro použití v&nbsp;programovacím jazyku Go,
což znamená, že jeho využití je relativně specifické (ukládání rozsáhlých dat,
komunikace mezi dvojicí služeb naprogramovaných v&nbsp;Go atd.). Tento formát
umožňuje serializaci prakticky jakékoli datové struktury, ovšem je ho možné
použít i pro primitivní datové typy, resp.&nbsp;pro jejich hodnoty. Pro Python
existuje balíček umožňující s&nbsp;<i>gob</i> pracovat, což je
v&nbsp;heterogenních systémech (každá mikroslužba může být naprogramována
v&nbsp;jiném jazyce) užitečné.</p>

<p>Dalším binárním formátem určeným pro přenos prakticky libovolně
strukturovaných dat je formát nazvaný <i>CBOR</i> neboli plným jménem
<i>Concise Binary Object Representation</i>. Tímto formátem, jenž se snaží
nabízet podobné vlastnosti jako JSON (až na možnost jeho přímého čtení
člověkem), se budeme zabývat v&nbsp;navazujícím textu (interně je nepatrně
složitější než MessagePack, navíc s&nbsp;MessagePacku vychází).</p>

<p><p>Dalším sice relativně novým, ale postupně se rozšiřujícím binárním
formátem je formát nazvaný <i>BSON</i> (zde je odkaz na JSON nesporný).
Možnosti tohoto formátu jsou již větší, například je podporován typ
<i>decimal128</i> určený pro použití v&nbsp;bankovnictví. Taktéž podporuje
uložení časových razítek nebo i kódu v&nbsp;JavaScriptu.</p>

<p><div class="rs-tip-major">Poznámka: zajímavé je, že ani jeden
z&nbsp;uvedených binárních formátů nepodporuje typ <a
href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">bfloat16</a>,
i když zrovna v&nbsp;této oblasti se jeho použití přímo nabízí. Toto omezení
v&nbsp;MessagePacku obcházíme vlastními datovými typy.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady využívající knihovnu PyTorch lze nalézt
v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>import_msgpack.py</td><td>import balíčku <strong>msgpack</strong> se zobrazením nápovědy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/import_msgpack.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/import_msgpack.py</a></td></tr>
<tr><td> 2</td><td>serialize_none.py</td><td>serializace hodnoty <strong>None</strong> do souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_none.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_none.py</a></td></tr>
<tr><td> 3</td><td>serialize_true.py</td><td>serializace pravdivostní hodnoty <strong>True</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_true.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_true.py</a></td></tr>
<tr><td> 4</td><td>serialize_false.py</td><td>serializace pravdivostní hodnoty <strong>False</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_false.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_false.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>serialize_int_tiny.py</td><td>serializace malé celočíselné hodnoty do jediného bajtu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_int_tiny.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_int_tiny.py</a></td></tr>
<tr><td> 6</td><td>serialize_int_small.py</td><td>serializace celočíselné hodnoty do dvou bajtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_int_small.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_int_small.py</a></td></tr>
<tr><td> 7</td><td>serialize_int_large.py</td><td>serializace celočíselné hodnoty do tří bajtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_int_large.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_int_large.py</a></td></tr>
<tr><td> 8</td><td>serialize_int_larger.py</td><td>serializace celočíselné hodnoty do pěti bajtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_int_larger.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_int_larger.py</a></td></tr>
<tr><td> 9</td><td>serialize_int_long.py</td><td>serializace celočíselné hodnoty do devíti bajtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_int_long.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_int_long.py</a></td></tr>
<tr><td>10</td><td>serialize_too_long_int.py</td><td>pokus o serializace hodnoty přesahující 2<sup>63</sup></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_too_long_int.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_too_long_int.py</a></td></tr>
<tr><td>11</td><td>serialize_negative_int.py</td><td>serializace záporné celočíselné hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_negative_int.py">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/serialize_negative_int.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/">https://github.com/tisnik/most-popular-python-libs/blob/master/msgpack/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Základní informace o MessagePacku<br />
<a href="https://msgpack.org/">https://msgpack.org/</a>
</li>

<li>Balíček msgpack na PyPi<br />
<a href="https://pypi.org/project/msgpack/">https://pypi.org/project/msgpack/</a>
</li>

<li>MessagePack na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/MessagePack">https://en.wikipedia.org/wiki/MessagePack</a>
</li>

<li>Comparison of data-serialization formats (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats">https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats</a>
</li>

<li>Repositáře msgpacku<br />
<a href="https://github.com/msgpack">https://github.com/msgpack</a>
</li>

<li>Specifikace ukládání různých typů dat<br />
<a href="https://github.com/msgpack/msgpack/blob/master/spec.md">https://github.com/msgpack/msgpack/blob/master/spec.md</a>
</li>

<li>Podpora MessagePacku v&nbsp;různých programovacích jazycích<br />
<a href="https://msgpack.org/#languages">https://msgpack.org/#languages</a>
</li>

<li>Základní implementace formátu msgpack pro programovací jazyk Go<br />
<a href="https://github.com/msgpack/msgpack-go">https://github.com/msgpack/msgpack-go</a>
</li>

<li>go-codec<br />
<a href="https://github.com/ugorji/go">https://github.com/ugorji/go</a>
</li>

<li>Gobs of data (odlišný serializační formát)<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<ol>
<li>Formát BSON (odlišný serializační formát)<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Problematika nulových hodnot v Go, aneb proč nil != nil<br />
<a href="https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/">https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/</a>
</li>

<li>IEEE-754 Floating Point Converter<br />
<a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a>
</li>

<li>Base Convert: IEEE 754 Floating Point<br />
<a href="https://baseconvert.com/ieee-754-floating-point">https://baseconvert.com/ieee-754-floating-point</a>
</li>

<li>Brain Floating Point &ndash; nový formát uložení čísel pro strojové učení a chytrá čidla<br />
<a href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Protocol Buffers<br />
<a href="https://protobuf.dev/">https://protobuf.dev/</a>
</li>

<li>Protocol Buffers<br />
<a href="https://en.wikipedia.org/wiki/Protocol_Buffers">https://en.wikipedia.org/wiki/Protocol_Buffers</a>
</li>

<li>What is the difference between Serialization and Marshaling?<br />
<a href="https://stackoverflow.com/questions/770474/what-is-the-difference-between-serialization-and-marshaling">https://stackoverflow.com/questions/770474/what-is-the-difference-between-serialization-and-marshaling</a>
</li>

<li>Comparison of data-serialization formats<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats">https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

