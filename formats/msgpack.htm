<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

$ go get github.com/ugorji/go/codec
go: downloading github.com/ugorji/go/codec v1.2.6
go: downloading github.com/ugorji/go v1.2.6



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/nil.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(nil)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/small_int.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(42)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/longer_int.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(1000)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/even_longer_int.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(100000)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/long_int.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(2 << 60)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/single.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(float32(3.14))
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/double.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(3.14)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/short_string.bin"

const message = "Hello"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(message)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/longer_string.bin"

const message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(message)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
$ <strong>od -A x -t x1z -v longer_string.bin </strong>
&nbsp;
000000 da 00 e7 4c 6f 72 65 6d 20 69 70 73 75 6d 20 64  >...Lorem ipsum d<
000010 6f 6c 6f 72 20 73 69 74 20 61 6d 65 74 2c 20 63  >olor sit amet, c<
000020 6f 6e 73 65 63 74 65 74 75 72 20 61 64 69 70 69  >onsectetur adipi<
000030 73 63 69 6e 67 20 65 6c 69 74 2c 20 73 65 64 20  >scing elit, sed <
000040 64 6f 20 65 69 75 73 6d 6f 64 20 74 65 6d 70 6f  >do eiusmod tempo<
000050 72 20 69 6e 63 69 64 69 64 75 6e 74 20 75 74 20  >r incididunt ut <
000060 6c 61 62 6f 72 65 20 65 74 20 64 6f 6c 6f 72 65  >labore et dolore<
000070 20 6d 61 67 6e 61 20 61 6c 69 71 75 61 2e 20 55  > magna aliqua. U<
000080 74 20 65 6e 69 6d 20 61 64 20 6d 69 6e 69 6d 20  >t enim ad minim <
000090 76 65 6e 69 61 6d 2c 20 71 75 69 73 20 6e 6f 73  >veniam, quis nos<
0000a0 74 72 75 64 20 65 78 65 72 63 69 74 61 74 69 6f  >trud exercitatio<
0000b0 6e 20 75 6c 6c 61 6d 63 6f 20 6c 61 62 6f 72 69  >n ullamco labori<
0000c0 73 20 6e 69 73 69 20 75 74 20 61 6c 69 71 75 69  >s nisi ut aliqui<
0000d0 70 20 65 78 20 65 61 20 63 6f 6d 6d 6f 64 6f 20  >p ex ea commodo <
0000e0 63 6f 6e 73 65 71 75 61 74 2e                    >consequat.<
0000ea
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/even_longer_string.bin"

const message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(message)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
$ <strong>od -A x -t x1z -v even_longer_string.bin </strong>
&nbsp;
000000 da 01 bd 4c 6f 72 65 6d 20 69 70 73 75 6d 20 64  >...Lorem ipsum d<
000010 6f 6c 6f 72 20 73 69 74 20 61 6d 65 74 2c 20 63  >olor sit amet, c<
000020 6f 6e 73 65 63 74 65 74 75 72 20 61 64 69 70 69  >onsectetur adipi<
000030 73 63 69 6e 67 20 65 6c 69 74 2c 20 73 65 64 20  >scing elit, sed <
000040 64 6f 20 65 69 75 73 6d 6f 64 20 74 65 6d 70 6f  >do eiusmod tempo<
000050 72 20 69 6e 63 69 64 69 64 75 6e 74 20 75 74 20  >r incididunt ut <
000060 6c 61 62 6f 72 65 20 65 74 20 64 6f 6c 6f 72 65  >labore et dolore<
000070 20 6d 61 67 6e 61 20 61 6c 69 71 75 61 2e 20 55  > magna aliqua. U<
000080 74 20 65 6e 69 6d 20 61 64 20 6d 69 6e 69 6d 20  >t enim ad minim <
000090 76 65 6e 69 61 6d 2c 20 71 75 69 73 20 6e 6f 73  >veniam, quis nos<
0000a0 74 72 75 64 20 65 78 65 72 63 69 74 61 74 69 6f  >trud exercitatio<
0000b0 6e 20 75 6c 6c 61 6d 63 6f 20 6c 61 62 6f 72 69  >n ullamco labori<
0000c0 73 20 6e 69 73 69 20 75 74 20 61 6c 69 71 75 69  >s nisi ut aliqui<
0000d0 70 20 65 78 20 65 61 20 63 6f 6d 6d 6f 64 6f 20  >p ex ea commodo <
0000e0 63 6f 6e 73 65 71 75 61 74 2e 20 44 75 69 73 20  >consequat. Duis <
0000f0 61 75 74 65 20 69 72 75 72 65 20 64 6f 6c 6f 72  >aute irure dolor<
000100 20 69 6e 20 72 65 70 72 65 68 65 6e 64 65 72 69  > in reprehenderi<
000110 74 20 69 6e 20 76 6f 6c 75 70 74 61 74 65 20 76  >t in voluptate v<
000120 65 6c 69 74 20 65 73 73 65 20 63 69 6c 6c 75 6d  >elit esse cillum<
000130 20 64 6f 6c 6f 72 65 20 65 75 20 66 75 67 69 61  > dolore eu fugia<
000140 74 20 6e 75 6c 6c 61 20 70 61 72 69 61 74 75 72  >t nulla pariatur<
000150 2e 20 45 78 63 65 70 74 65 75 72 20 73 69 6e 74  >. Excepteur sint<
000160 20 6f 63 63 61 65 63 61 74 20 63 75 70 69 64 61  > occaecat cupida<
000170 74 61 74 20 6e 6f 6e 20 70 72 6f 69 64 65 6e 74  >tat non proident<
000180 2c 20 73 75 6e 74 20 69 6e 20 63 75 6c 70 61 20  >, sunt in culpa <
000190 71 75 69 20 6f 66 66 69 63 69 61 20 64 65 73 65  >qui officia dese<
0001a0 72 75 6e 74 20 6d 6f 6c 6c 69 74 20 61 6e 69 6d  >runt mollit anim<
0001b0 20 69 64 20 65 73 74 20 6c 61 62 6f 72 75 6d 2e  > id est laborum.<
0001c0
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositáře msgpacku<br />
<a href="https://github.com/msgpack">https://github.com/msgpack</a>
</li>

<li>Specifikace ukládání různých typů dat<br />
<a href="https://github.com/msgpack/msgpack/blob/master/spec.md">https://github.com/msgpack/msgpack/blob/master/spec.md</a>
</li>

<li>Základní implementace formátu msgpack pro Go<br />
<a href="https://github.com/msgpack/msgpack-go">https://github.com/msgpack/msgpack-go</a>
</li>

<li>go-codec<br />
<a href="https://github.com/ugorji/go">https://github.com/ugorji/go</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>Formát BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

