<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

$ go get github.com/ugorji/go/codec
go: downloading github.com/ugorji/go/codec v1.2.6
go: downloading github.com/ugorji/go v1.2.6



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/nil.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(nil)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/small_int.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(42)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/longer_int.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(1000)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/even_longer_int.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(100000)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/long_int.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(2 << 60)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/single.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(float32(3.14))
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/double.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)

        log.Print("Encoder created")

        // zakódování dat
        err = encoder.Encode(3.14)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositáře msgpacku<br />
<a href="https://github.com/msgpack">https://github.com/msgpack</a>
</li>

<li>Specifikace ukládání různých typů dat<br />
<a href="https://github.com/msgpack/msgpack/blob/master/spec.md">https://github.com/msgpack/msgpack/blob/master/spec.md</a>
</li>

<li>Základní implementace formátu msgpack pro Go<br />
<a href="https://github.com/msgpack/msgpack-go">https://github.com/msgpack/msgpack-go</a>
</li>

<li>go-codec<br />
<a href="https://github.com/ugorji/go">https://github.com/ugorji/go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

