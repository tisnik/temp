<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Komunikace realizovaná binárním formátem MessagePack (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Komunikace realizovaná binárním formátem MessagePack (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na úvodní část dvoudílného článku o formátu MessagePack dnes navážeme. Ukážeme si, že datové struktury pole a mapa jsou v Message Packu heterogenní (což odpovídá původnímu textovému JSONu). Taktéž provedeme porovnání mezi formáty JSON, XML, BSON, gob a právě Message Pack.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Komunikace realizovaná binárním formátem MessagePack (dokončení)</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Komunikace realizovaná binárním formátem MessagePack (dokončení)</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
package main
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/ugorji/go/codec"
)
&nbsp;
const filename = "/tmp/array16B.bin"
&nbsp;
func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()
&nbsp;
        log.Print("Output file created")
&nbsp;
        // handler
        var handler codec.MsgpackHandle
&nbsp;
        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)
&nbsp;
        log.Print("Encoder created")
&nbsp;
        const N = 1000
        var values [N]uint
&nbsp;
        for i := 0; i &lt; N; i++ {
                values[i] = uint(i)
        }
&nbsp;
        // zakódování dat
        err = encoder.Encode(values)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        log.Print("Done")
}
</pre>

<pre>
package main
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/ugorji/go/codec"
)
&nbsp;
const filename = "/tmp/array16C.bin"
&nbsp;
func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()
&nbsp;
        log.Print("Output file created")
&nbsp;
        // handler
        var handler codec.MsgpackHandle
&nbsp;
        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)
&nbsp;
        log.Print("Encoder created")
&nbsp;
        const N = 1000
        var values []uint
&nbsp;
        for i := 0; i &lt; N; i++ {
                values = append(values, uint(i))
        }
&nbsp;
        // zakódování dat
        err = encoder.Encode(values)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        log.Print("Done")
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
package main
&nbsp;
import (
        "log"
        "os"
&nbsp;
        "github.com/ugorji/go/codec"
)
&nbsp;
const filename = "/tmp/map.bin"
&nbsp;
func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()
&nbsp;
        log.Print("Output file created")
&nbsp;
        // handler
        var handler codec.MsgpackHandle
&nbsp;
        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &amp;handler)
&nbsp;
        log.Print("Encoder created")
&nbsp;
        var m map[string]int = make(map[string]int)
        m["foo"] = 1
        m["bar"] = 2
&nbsp;
        // zakódování dat
        err = encoder.Encode(m)
        if err != nil {
                log.Fatal(err)
        }
&nbsp;
        log.Print("Done")
}
</pre>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/map2.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &handler)

        log.Print("Encoder created")

        var m map[string]interface{} = make(map[string]interface{})
        m["foo"] = 1
        m["bar"] = 2
        m["baz"] = 1000000
        m["wee"] = "test"
        m["array"] = []int{1, 2, 3}
        m["map"] = map[string]string{
                "one": "jedna",
                "two": "dve",
        }

        // zakódování dat
        err = encoder.Encode(m)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<p></p>

<pre>
$ <strong>od -A x -t x1z -v map2.bin</strong>
&nbsp;
000000 86 a3 62 61 72 02 a3 62 61 7a d2 00 0f 42 40 a3  &gt;..bar..baz...B@.&lt;
000010 77 65 65 a4 74 65 73 74 a5 61 72 72 61 79 93 01  &gt;wee.test.array..&lt;
000020 02 03 a3 6d 61 70 82 a3 6f 6e 65 a5 6a 65 64 6e  &gt;...map..one.jedn&lt;
000030 61 a3 74 77 6f a3 64 76 65 a3 66 6f 6f 01        &gt;a.two.dve.foo.&lt;
00003e
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
package main

import (
        "log"
        "os"

        "github.com/ugorji/go/codec"
)

const filename = "/tmp/array16D.bin"

func main() {
        // vytvořit soubor s binárními daty
        fout, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
        if err != nil {
                log.Fatal(err)
        }
        defer fout.Close()

        log.Print("Output file created")

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(fout, &handler)

        log.Print("Encoder created")

        var values []interface{}

        values = append(values, 1)
        values = append(values, 100000)
        values = append(values, "test")
        values = append(values, []int{1, 2, 3})
        values = append(values, map[string]string{
                "one": "jedna",
                "two": "dve",
        })

        // zakódování dat
        err = encoder.Encode(values)
        if err != nil {
                log.Fatal(err)
        }

        log.Print("Done")
}
</pre>

<p></p>

<pre>
$ <strong>od -A x -t x1z -v array16D.bin</strong>
&nbsp;
000000 95 01 d2 00 01 86 a0 a4 74 65 73 74 93 01 02 03  &gt;........test....&lt;
000010 82 a3 6f 6e 65 a5 6a 65 64 6e 61 a3 74 77 6f a3  &gt;..one.jedna.two.&lt;
000020 64 76 65                                         &gt;dve&lt;
000023
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<table>
<tr><th></th><th></th></tr>
<tr><td>vector1.bin </td><td> 9003</td></tr>
<tr><td>vector1.bson</td><td>12895</td></tr>
<tr><td>vector1.gob </td><td> 8960</td></tr>
<tr><td>vector1.json</td><td>21017</td></tr>
<tr><td>vector2.json</td><td>26018</td></tr>
<tr><td>vector1.xml </td><td>39016</td></tr>
<tr><td>vector2.xml </td><td>40015</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: </div></p>

<table>
<tr><th></th><th></th></tr>
<tr><td>vector1.bin.gz </td><td>5431</td></tr>
<tr><td>vector1.bson.gz</td><td>6537</td></tr>
<tr><td>vector1.gob.gz </td><td>5234</td></tr>
<tr><td>vector1.json.gz</td><td>7559</td></tr>
<tr><td>vector2.json.gz</td><td>7652</td></tr>
<tr><td>vector1.xml.gz </td><td>8182</td></tr>
<tr><td>vector2.xml.gz </td><td>8230</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
package main

import (
        "bytes"
        "encoding/gob"
        "encoding/json"
        "encoding/xml"
        "fmt"
        "gopkg.in/mgo.v2/bson"
        "io/ioutil"

        "github.com/ugorji/go/codec"
)

type Item int

type Node struct {
        Value Item
        Left  *Node
        Right *Node
}

type BinaryTree struct {
        Root *Node
}

func (bt *BinaryTree) Insert(value Item) {
        node := &Node{value, nil, nil}
        if bt.Root == nil {
                bt.Root = node
        } else {
                insertNode(bt.Root, node)
        }
}

func insertNode(node, newNode *Node) {
        if newNode.Value < node.Value {
                if node.Left == nil {
                        node.Left = newNode
                } else {
                        insertNode(node.Left, newNode)
                }
        } else {
                if node.Right == nil {
                        node.Right = newNode
                } else {
                        insertNode(node.Right, newNode)
                }
        }
}

func printTree(node *Node, level int) {
        if node != nil {
                format := ""
                for i := 0; i < level; i++ {
                        format += "       "
                }
                format += "---[ "
                level++
                printTree(node.Left, level)
                fmt.Printf(format+"%d\n", node.Value)
                printTree(node.Right, level)
        }
}

func encodeBinaryTreeIntoBSON(bt BinaryTree) ([]byte, error) {
        bsonOutput, err := bson.Marshal(bt)

        if err != nil {
                return bsonOutput, err
        }
        return bsonOutput, nil
}

func encodeBinaryTreeIntoJSON(bt BinaryTree) ([]byte, error) {
        jsonOutput, err := json.Marshal(bt)

        if err != nil {
                return jsonOutput, err
        }
        return jsonOutput, nil
}

func encodeBinaryTreeIntoIndentedJSON(bt BinaryTree) ([]byte, error) {
        jsonOutput, err := json.MarshalIndent(bt, "", "    ")

        if err != nil {
                return jsonOutput, err
        }
        return jsonOutput, nil
}

func encodeBinaryTreeIntoXML(bt BinaryTree) ([]byte, error) {
        xmlOutput, err := xml.Marshal(bt)

        if err != nil {
                return xmlOutput, err
        }
        return xmlOutput, nil
}

func encodeBinaryTreeIntoIndentedXML(bt BinaryTree) ([]byte, error) {
        xmlOutput, err := xml.MarshalIndent(bt, "", "    ")

        if err != nil {
                return xmlOutput, err
        }
        return xmlOutput, nil
}

func encodeBinaryTreeIntoGob(bt BinaryTree) ([]byte, error) {
        var buffer bytes.Buffer
        encoder := gob.NewEncoder(&buffer)

        err := encoder.Encode(bt)
        if err != nil {
                return buffer.Bytes(), err
        }
        return buffer.Bytes(), nil
}

func encodeBinaryTreeIntoMsgPack(bt BinaryTree) ([]byte, error) {
        var buffer bytes.Buffer

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(&buffer, &handler)

        // zakódování dat
        err := encoder.Encode(bt)
        if err != nil {
                return buffer.Bytes(), err
        }
        return buffer.Bytes(), nil
}

func saveBinaryTree(encodedTree []byte, filename string) {
        err := ioutil.WriteFile(filename, encodedTree, 0644)
        if err != nil {
                fmt.Println(err)
        } else {
                fmt.Println("Stored into file", filename)
        }
}

func constructTree(bt *BinaryTree, min, max int) {
        middle := (min + max) / 2
        if min < middle && middle < max {
                fmt.Println(middle)
                bt.Insert(Item(middle))
                constructTree(bt, min, middle)
                constructTree(bt, middle, max)
        }
}

func printBufferInfo(buffer []byte) {
        fmt.Println("\nBuffer with encoded tree: ", len(buffer))
}

func main() {
        var bt BinaryTree
        constructTree(&bt, 0, 256)

        printTree(bt.Root, 0)

        encodedTree, err := encodeBinaryTreeIntoXML(bt)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedTree)
        saveBinaryTree(encodedTree, "/tmp/tree1.xml")

        encodedTree, err = encodeBinaryTreeIntoIndentedXML(bt)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedTree)
        saveBinaryTree(encodedTree, "/tmp/tree2.xml")

        encodedTree, err = encodeBinaryTreeIntoJSON(bt)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedTree)
        saveBinaryTree(encodedTree, "/tmp/tree1.json")

        encodedTree, err = encodeBinaryTreeIntoIndentedJSON(bt)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedTree)
        saveBinaryTree(encodedTree, "/tmp/tree2.json")

        encodedTree, err = encodeBinaryTreeIntoBSON(bt)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedTree)
        saveBinaryTree(encodedTree, "/tmp/tree1.bson")

        encodedTree, err = encodeBinaryTreeIntoGob(bt)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedTree)
        saveBinaryTree(encodedTree, "/tmp/tree1.gob")

        encodedTree, err = encodeBinaryTreeIntoMsgPack(bt)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedTree)
        saveBinaryTree(encodedTree, "/tmp/tree1.bin")

}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
Buffer with encoded tree:  8076
Stored into file /tmp/tree1.xml

Buffer with encoded tree:  31378
Stored into file /tmp/tree2.xml

Buffer with encoded tree:  8575
Stored into file /tmp/tree1.json

Buffer with encoded tree:  42115
Stored into file /tmp/tree2.json

Buffer with encoded tree:  7406
Stored into file /tmp/tree1.bson

Buffer with encoded tree:  1431
Stored into file /tmp/tree1.gob

Buffer with encoded tree:  5363
Stored into file /tmp/tree1.bin
</pre>

<table>
<tr><th></th><th></th></tr>
<tr><td>tree1.bin </td><td> 5363</td></tr>
<tr><td>tree1.bson</td><td> 7406</td></tr>
<tr><td>tree1.gob </td><td> 1431</td></tr>
<tr><td>tree1.json</td><td> 8575</td></tr>
<tr><td>tree2.json</td><td>42115</td></tr>
<tr><td>tree1.xml </td><td> 8076</td></tr>
<tr><td>tree2.xml </td><td>31378</td></tr>
</table>

<table>
<tr><th></th><th></th></tr>
<tr><td>tree1.bin.gz </td><td> 745</td></tr>
<tr><td>tree1.bson.gz</td><td> 924</td></tr>
<tr><td>tree1.gob.gz </td><td> 714</td></tr>
<tr><td>tree1.json.gz</td><td> 840</td></tr>
<tr><td>tree2.json.gz</td><td>1474</td></tr>
<tr><td>tree1.xml.gz </td><td> 869</td></tr>
<tr><td>tree2.xml.gz </td><td>1306</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
package main

import (
        "bytes"
        "encoding/gob"
        "encoding/json"
        "fmt"
        "gopkg.in/mgo.v2/bson"
        "io/ioutil"

        "github.com/ugorji/go/codec"
)

type Map map[string]string

func encodeMapIntoBSON(m Map) ([]byte, error) {
        bsonOutput, err := bson.Marshal(m)

        if err != nil {
                return bsonOutput, err
        }
        return bsonOutput, nil
}

func encodeMapIntoJSON(m Map) ([]byte, error) {
        jsonOutput, err := json.Marshal(m)

        if err != nil {
                return jsonOutput, err
        }
        return jsonOutput, nil
}

func encodeMapIntoIndentedJSON(m Map) ([]byte, error) {
        jsonOutput, err := json.MarshalIndent(m, "", "    ")

        if err != nil {
                return jsonOutput, err
        }
        return jsonOutput, nil
}

func encodeMapIntoGob(m Map) ([]byte, error) {
        var buffer bytes.Buffer
        encoder := gob.NewEncoder(&buffer)

        err := encoder.Encode(m)
        if err != nil {
                return buffer.Bytes(), err
        }
        return buffer.Bytes(), nil
}

func encodeMapIntoMsgPack(m Map) ([]byte, error) {
        var buffer bytes.Buffer

        // handler
        var handler codec.MsgpackHandle

        // objekt realizující zakódování dat
        encoder := codec.NewEncoder(&buffer, &handler)

        // zakódování dat
        err := encoder.Encode(m)
        if err != nil {
                return buffer.Bytes(), err
        }
        return buffer.Bytes(), nil
}

func saveMap(encodedMap []byte, filename string) {
        err := ioutil.WriteFile(filename, encodedMap, 0644)
        if err != nil {
                fmt.Println(err)
        } else {
                fmt.Println("Stored into file", filename)
        }
}

func printBufferInfo(buffer []byte) {
        fmt.Println("\nBuffer with encoded map: ", len(buffer))
}

func main() {
        var m Map = make(map[string]string)
        m["foo"] = "text"
        m["bar"] = "test"
        m["baz"] = "Příliš žluťoučký kůň"
        m["longer key"] = "Příliš žluťoučký kůň"

        for i := 0; i < 256; i++ {
                key := fmt.Sprintf("key: %02x", i)
                value := fmt.Sprintf("value: %d", i)
                m[key] = value
        }

        encodedMap, err := encodeMapIntoJSON(m)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedMap)
        saveMap(encodedMap, "/tmp/map1.json")

        encodedMap, err = encodeMapIntoIndentedJSON(m)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedMap)
        saveMap(encodedMap, "/tmp/map2.json")

        encodedMap, err = encodeMapIntoBSON(m)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedMap)
        saveMap(encodedMap, "/tmp/map1.bson")

        encodedMap, err = encodeMapIntoGob(m)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedMap)
        saveMap(encodedMap, "/tmp/map1.gob")

        encodedMap, err = encodeMapIntoMsgPack(m)
        if err != nil {
                fmt.Println(err)
                return
        }
        printBufferInfo(encodedMap)
        saveMap(encodedMap, "/tmp/map1.bin")
}
</pre>


<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/komunikace-realizovana-uspornym-binarnim-formatem-messagepack/">minule</a>
i dnes použitých demonstračních příkladů byly uloženy do nového Git repositáře,
který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad/soubor</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>msgpack_nil.go</td><td>serializace hodnoty <strong>nil</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_nil.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_nil.go</a></td></tr>
<tr><td> 2</td><td>msgpack_true.go</td><td>serializace hodnot <strong>true</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_true.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_true.go</a></td></tr>
<tr><td> 3</td><td>msgpack_false.go</td><td>serializace hodnot <strong>false</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_false.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_false.go</a></td></tr>
<tr><td> 4</td><td>msgpack_small_int.go</td><td>serializace celočíselné hodnoty menší než 127</td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_small_int.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_small_int.go</a></td></tr>
<tr><td> 5</td><td>msgpack_longer_int.go</td><td>serializace celočíselné hodnoty menší než 2<sup>16</sup></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_longer_int.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_longer_int.go</a></td></tr>
<tr><td> 6</td><td>msgpack_even_longer_int.go</td><td>serializace celočíselné hodnoty větší než 2<sup>16</sup></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_even_longer_int.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_even_longer_int.go</a></td></tr>
<tr><td> 7</td><td>msgpack_long_int.go</td><td>serializace celočíselné hodnoty větší než 2<sup>32</sup></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_long_int.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_long_int.go</a></td></tr>
<tr><td> 8</td><td>msgpack_single.go</td><td>serializace hodnoty s&nbsp;plovoucí řádovou čárkou (<i>single</i>)</td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_single.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_single.go</a></td></tr>
<tr><td> 9</td><td>msgpack_double.go</td><td>serializace hodnoty s&nbsp;plovoucí řádovou čárkou (<i>double</i>)</td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_double.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_double.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>msgpack_short_string.go</td><td>serializace krátkého řetězce (méně než 31 znaků)</td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_short_string.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_short_string.go</a></td></tr>
<tr><td>11</td><td>msgpack_longer_string.go</td><td>serializace delšího řetězce (méně než 256 znaků)</td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_longer_string.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_longer_string.go</a></td></tr>
<tr><td>12</td><td>msgpack_even_longer_string.go</td><td>serializace dlouhého řetězce</td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_even_longer_string.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_even_longer_string.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>msgpack_short_array1.go</td><td>krátké pole čtyř hodnot 1-4</td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_short_array1.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_short_array1.go</a></td></tr>
<tr><td>14</td><td>msgpack_short_array2.go</td><td>krátké pole čtyř hodnot 100, 200, 300 a 400</td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_short_array2.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_short_array2.go</a></td></tr>
<tr><td>15</td><td>msgpack_bytes.go</td><td>pole 1000 bajtů</td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_bytes.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_bytes.go</a></td></tr>
<tr><td>16</td><td>msgpack_array_16A.go</td><td>pole 1000 prvků typu <strong>int</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_array_16A.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_array_16A.go</a></td></tr>
<tr><td>17</td><td>msgpack_array_16B.go</td><td>pole 1000 prvků typu <strong>uint</strong></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_array_16B.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_array_16B.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>msgpack_map.go</td><td>serializace mapy</td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_map.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_map.go</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>msgpack_array_16C.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_array_16C.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_array_16C.go</a></td></tr>
<tr><td>20</td><td>msgpack_array_16D.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_array_16D.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_array_16D.go</a></td></tr>
<tr><td>21</td><td>msgpack_map2.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_map2.go">https://github.com/tisnik/go-root/blob/master/msgpack/msgpack_map2.go</a></td></tr>
<tr><td>22</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>23</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
<tr><td>24</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/msgpack/">https://github.com/tisnik/go-root/blob/master/msgpack/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Základní informace o MessagePacku<br />
<a href="https://msgpack.org/">https://msgpack.org/</a>
</li>

<li>MessagePack na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/MessagePack">https://en.wikipedia.org/wiki/MessagePack</a>
</li>

<li>Comparison of data-serialization formats (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats">https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats</a>
</li>

<li>Repositáře msgpacku<br />
<a href="https://github.com/msgpack">https://github.com/msgpack</a>
</li>

<li>Specifikace ukládání různých typů dat<br />
<a href="https://github.com/msgpack/msgpack/blob/master/spec.md">https://github.com/msgpack/msgpack/blob/master/spec.md</a>
</li>

<li>Podpora MessagePacku v&nbsp;různých jazycích<br />
<a href="https://msgpack.org/#languages">https://msgpack.org/#languages</a>
</li>

<li>Základní implementace formátu msgpack pro Go<br />
<a href="https://github.com/msgpack/msgpack-go">https://github.com/msgpack/msgpack-go</a>
</li>

<li>go-codec<br />
<a href="https://github.com/ugorji/go">https://github.com/ugorji/go</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>Formát BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Problematika nulových hodnot v Go, aneb proč nil != nil<br />
<a href="https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/">https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/</a>
</li>

<li>IEEE-754 Floating Point Converter<br />
<a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a>
</li>

<li>Base Convert: IEEE 754 Floating Point<br />
<a href="https://baseconvert.com/ieee-754-floating-point">https://baseconvert.com/ieee-754-floating-point</a>
</li>

<li>Brain Floating Point – nový formát uložení čísel pro strojové učení a chytrá čidla<br />
<a href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

