<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Při pohledu do technické specifikace některých her i dalších aplikací se můžeme dočíst, že pro vývoj byl mj. využit i skriptovací jazyk Lua. Jedná se o jednoduše použitelný programovací jazyk, který je skutečně mezi výrobci herního softwaru z několika příčin oblíbený. V tomto seriálu si řekneme, proč tomu tak je.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Programovací jazyk Lua</a><br />
<a href="#k02">2. Stručná historie programovacího jazyka Lua</a><br />
<a href="#k03">3. Licence</a><br />
<a href="#k04">4. Základní vlastnosti programovacího jazyka Lua</a><br />
<a href="#k05">5. Vestavění překladače a interpretru jazyka Lua do aplikací</a><br />
<a href="#k06">6. Demonstrační příklad &ndash; vestavění překladače a interpretru do céčkového programu</a><br />
<a href="#k07">7. Odkazy na Internetu</a><br />
<a href="#k08">8. Obsah další části</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Programovací jazyk Lua</h1>

<p>Programovací jazyk <i>Lua</i> patří do poměrně rozsáhlé a stále častěji
používané skupiny vysokoúrovňových skriptovacích jazyků, do níž můžeme zařadit
například populární <i>Python</i>, <i>Perl</i>, <i>Scalu</i>, <i>Ruby</i>, na
síle nabývající <i>JavaScript</i> či dnes již poněkud méně populární jazyk
<i>Tcl</i>. Tyto programovací jazyky nabízí vývojářům jednoduchou práci se
strukturovanými daty (většinou je použita nějaká forma asociativního pole),
dynamicky typované proměnné (viz druhá část tohoto seriálu, ve které se touto
problematikou budeme zabývat), automatickou správu paměti (<i>garbage
collector</i>) a mnohé další vysokoúrovňové techniky zjednodušující a
zrychlující vývoj. Jazyk <i>Lua</i> má navíc velmi jednoduchou &ndash; a pro
mnoho vývojářů důvěrně známou &ndash; syntaxi inspirovanou <i>Modulou</i> a
<i>Pascalem</i>, zatímco sémantika jazyka se v&nbsp;mnohém podobá spíše
moderním verzím <i>JavaScriptu</i>. Navíc je přímo v&nbsp;jazyku zabudovaná
podpora pro paralelní programování, což je stále oblast, kterou mnohé výše
zmíněné jazyky prozatím nepodporují.</p>

<image id="" original="no" />
<p-center><i>Obrázek 1: Programovací jazyk Lua byl použit již několika
softwarovými firmami (Lucasarts, Biowar) při tvorbě mnoha her. Základem těchto
her (typicky se jedná o grafický engine) je program napsaný v&nbsp;céčku či
C++, v&nbsp;jazyku Lua je pak naprogramována samotná logika hry, chování
počítačem řízených protihráčů (AI), scénář celé hry apod.</i></p-center>

<p>Většina programátorů si jazyk <i>Lua</i> oblíbila právě kvůli jeho syntaxi,
která zbytečně nepřináší žádné nové prvky (snad jen zápis relačního operátoru
nerovnosti pomocí <strong>~=</strong> je přinejmenším podivný a neobvyklý).
Naopak se snaží programátorům ulehčit život, například možností zápisu
vícenásobného přiřazení, přístupu k&nbsp;položkám asociativního pole jak pomocí
&bdquo;tečkové&ldquo; notace, tak i s&nbsp;využitím hranatých závorek apod.
Jednoduše použitelná syntaxe a současně i velká vyjadřovací schopnost jazyka
<i>Lua</i> by však pravděpodobně nedostačovala pro jeho masovější rozšíření.
Důvodem, proč jsou některé hry, například <i>Escape from Monkey Island</i>,
<i>Grim Fandango</i>, <i>Fish Fillets</i>, <i>Neverwinter Nights</i> či
<i>MDK2</i> z&nbsp;menší či větší části naprogramované právě v&nbsp;<i>Lua</i>,
spočívá v&nbsp;tom, že kombinace nízkoúrovňového a skriptovacího jazyka
umožňuje soustředit se při vývoji na podstatné věci &ndash; herní engine
vytvořit co nejefektivnější s&nbsp;využitím všech možností nízkoúrovňového
jazyka a naopak herní scénář a logiku hry naskriptovat s&nbsp;co největším
urychlením cyklu oprava&ndash;překlad&ndash;spuštění.</p>

<image id="" original="no" />
<p-center><i>Obrázek 2: Jednání všech NPC (non-playable character, postava
řízená počítačem) je v&nbsp;této hře řízeno skriptem napsaným v&nbsp;jazyce
Lua.</i></p-center>

<p>V&nbsp;mnoha případech se také využívá další užitečné vlastnosti jazyka
<i>Lua</i> &ndash; celý překladač i interpretr vygenerovaného bajtkódu
(popř.&nbsp;pouze interpretr &ndash; všechny pojmy jsou vysvětleny dále) je
možné velmi snadno zabudovat do jiné aplikace, přičemž se výsledná velikost
spustitelného souboru této aplikace zvětší o cca 70 kB (popř.&nbsp;lze volat
dynamickou knihovnu o řádově stejné velikosti), což není mnoho, když si
uvědomíme, že dostáváme k&nbsp;dispozici plnohodnotný vysokoúrovňový
programovací jazyk (ostatně <i>Lua</i> se díky své malé velikosti používá i pro
pouhé zpracování konfiguračních souborů, které díky tomu mohou obsahovat různé
konstanty, výrazy atd.). Mnozí programátoři, mezi jinými i John Walker (jeden
z&nbsp;vývojářů <i>AutoCADu</i>) se netají tím, že právě zabudování
programovacího (skriptovacího) jazyka do jejich aplikací mělo velký význam pro
jejich úspěch, protože to umožnilo mnoha dalším vývojářům rozšiřovat funkčnost
původní aplikace a tím zvýšit její atraktivitu pro uživatele. <i>Firefox</i>
využívá <i>XUL</i>, v&nbsp;případě <i>AutoCADu</i> se jednalo o <i>AutoLISP</i>
a firma Blizzard Entertainment pro skriptování své veleúspěšné on-line hry
<i>World Of Warcraft</i> vsadila právě na jazyk <i>Lua</i>, který je (přes
všechnu úctu, kterou k&nbsp;(Auto)LISPu chovám), přeci jen snáze použitelný i
pro neprogramátory.</p>



<p><a name="k02"></a></p>
<h1>2. Stručná historie programovacího jazyka Lua</h1>

<p>Vývoj jazyka <i>Lua</i> začal v&nbsp;roce 1993 ve chvíli, kdy skupina
inženýrů z&nbsp;brazilské ropné firmy <i>PETROBRAS</i> potřebovala zjednodušit
svoji práci při ručním zadávání údajů pro aplikaci provádějící různé simulace.
Původně se totiž veškerá vstupní data zapisovala do textového souboru ve formě
několika sloupců numerických údajů, bez určení, co která hodnota znamená. Pokud
se ve vstupním souboru udělala chyba (některý řádek chyběl či přebýval),
poznalo se to až po proběhnutí simulace a následném prohlédnutí výsledků. Aby
bylo zadávání vstupních dat zjednodušeno a předešlo se chybám, byl navržen
velmi jednoduchý jazyk nazvaný <i>DEL</i> (<i>Data Entry Language</i>), pomocí
kterého se vstupní hodnoty daly pojmenovat a dokonce i specifikovat omezující
podmínky ne ve formě sloupce čísel, ale jednoduchého výrazu:</p>

<code-area>
   :e      gasket            "gasket properties"
   mat     s                  # material
   m       f       0          # factor m
   y       f       0          # settlement stress
   t       i       1          # facing type

   :p
   gasket.m&gt;30
   gasket.m&lt;3000
   gasket.y&gt;335.8
   gasket.y&lt;2576.8
</code-area>

<p>Tento jazyk, který ještě neobsahoval řídicí programové konstrukce (podmíněné
příkazy a smyčky), protože byl pouze deklarativní, se osvědčil a &ndash; jak je
u úspěšných produktů zvykem &ndash; postupně se začal rozšiřovat i do dalších
oddělení firmy <i>PETROBRAS</i>. Záhy přišly požadavky na další funkcionalitu,
především možnost tvorby smyček a zápisu podmíněných bloků kódu. Tvůrcům jazyka
začalo být jasné, že potřebují vytvořit (či adaptovat) plnohodnotný
programovací jazyk. Současně byl v&nbsp;téže firmě vyvíjen i další nástroj
nazvaný <i>PGM</i>, který sloužil pro tvorbu sestav. Konfigurace tohoto
nástroje se prováděla pomocí jazyka nazvaného <i>SOL</i> (<i>Simple Object
Language</i>), který umožňovat tvořit i typové deklarace. Portugalské slovo
&bdquo;sol&ldquo; znamená &bdquo;slunce&ldquo;. V&nbsp;polovině roku 1993 došlo
ke sloučení obou jazyků a výsledkem byla první verze programovacího jazyka
nazvaného <i>Lua</i> (toto Portugalské slovo znamená &bdquo;měsíc&ldquo;, proto
je také logem tohoto jazyka symbolický obrázek Měsíce obíhajícího Zemi &ndash;
viz obrázek zobrazený v&nbsp;perexu článku).</p>

<p>Zajímavé je, že se namísto relativně nákladného vývoje vlastního jazyka
nejprve uvažovalo o použití jiných již existujících programovacích jazyků, ale
nakonec se přistoupilo k&nbsp;vývoji nového jazyka, především kvůli požadavkům
na portabilitu (šestnáctibitový MS DOS, Unix) a snadné použití i pro inženýry a
geology, tj.&nbsp;uživatele, kteří znali pasivně pouze některý
z&nbsp;programovacích jazyků vyučovaných na tamních vysokých školách
(<i>Fortran</i>, <i>Pascal</i> &ndash; zde leží například důvod toho, proč
středníky za příkazy nejsou v&nbsp;<i>Lua</i> povinné).</p>

<image id="" original="no" />
<p-center><i>Obrázek 3</i></p-center>



<p><a name="k03"></a></p>
<h1>3. Licence</h1>

<p>Nejdříve se <i>Lua</i> používala pouze pro interní potřeby firmy
<i>PETROBRAS</i>, ovšem již po necelém roce došlo k&nbsp;rozšíření mezi větší
počet uživatelů. První oficiální verze tohoto jazyka, která vyšla v&nbsp;roce
1994, nesla označení <i>Lua 1.1</i>. Její licence byla poměrně restriktivní
&ndash; bezplatné bylo pouze použití jazyka v&nbsp;akademické sféře. To
samozřejmě bránilo jejímu většímu rozšíření, nehledě na to, že mnohé akademické
projekty byly vyvíjeny s&nbsp;tím, že budou v&nbsp;případě úspěchu využity
komerčně (a nebylo by tedy vhodné použít pro tyto projekty programovací jazyk,
který by přechod na komerční bázi neumožňoval). Z&nbsp;tohoto důvodu byla další
verze &ndash; <i>Lua 2.1</i>, již vydána jako free software (zde myšleno ve
smyslu software zadarmo) a současně i open source, ovšem s&nbsp;vlastní
licencí. Teprve verze <i>Lua 5.0</i> byla vydána pod známou licencí <i>GPL</i>
a právě v&nbsp;této podobě můžeme tento programovací jazyk dnes najít
v&nbsp;repozitářích a použít jak v&nbsp;komerčních, tak i nekomerčních
projektech.</p>

<image id="" original="no" />
<p-center><i>Obrázek 4: Pomocí jazyka Lua je možné psát skripty i pro známou
hru BZFlag.</i></p-center>



<p><a name="k04"></a></p>
<h1>4. Základní vlastnosti programovacího jazyka Lua</h1>

<p>Již v&nbsp;úvodních odstavcích jsme si řekli, že syntaxe programovacího
jazyka <i>Lua</i> byla ve svých principech odvozena od <i>Moduly</i> a
<i>Pascalu</i> (je to patrné zejména při pohledu na způsob deklarace funkcí,
programových smyček, podmínek a programových bloků), ovšem u některých dalších
programových konstrukcí se tvůrci inspirovali i dalšími jazyky, například
<i>C</i> a <i>C++</i> (deklarace proměnných v&nbsp;libovolném programovém
bloku, zkrácené vyhodnocování logických výrazů, díky kterému lze logickými
výrazy v&nbsp;mnoha případech nahradit podmínky) či <i>Pythonu</i> (vícenásobné
přiřazení v&nbsp;rámci jednoho přiřazovacího příkazu). Na rozdíl od
programovacích jazyků odvozených syntakticky od Céčka se v&nbsp;<i>Lua</i>
mnoho konstrukcí zapisuje pomocí klíčových slov (je jich celkem 21), zatímco
&bdquo;céčkové jazyky&ldquo; z&nbsp;větší míry využívají speciální znaky typu
<strong>{</strong>, <strong>}</strong> či <strong>&amp;</strong>. Typický
program napsaný v&nbsp;imperativním stylu vypadá následovně:</p>

<code-area>
-- poznámky začínají dvojicí znaků --:
-- extracted from Programming Pearls, page 110

-- středníky za příkazy nejsou povinné, zde se nepoužívají

-- Deklarace funkce začíná klíčovým slovem function, za nímž následuje
-- jméno funkce a v závorce seznam parametrů (bez udání typu)
function qsort(x,l,u,f)
    -- zápis podmínky, povšimněte si, že vlastní výraz není nutné
    -- psát do závorek a používá se klíčové slovo then
    if l&lt;u then
        -- lokální proměnná, opět se nemusí udávat její typ
        local m=math.random(u-(l-1))+l-1  -- choose a random pivot in range l..u
        -- použití vícenásobného přiřazení umožňuje jednoduché prohození hodnot
        -- uložených v asociativním poli
        x[l],x[m]=x[m],x[l]               -- swap pivot to first position
        local t=x[l]                      -- pivot value
        m=l
        local i=l+1
        -- programová smyčka, platí pro ni podobná pravidla, jako pro výše
        -- okomentovanou podmínku
        while i&lt;=u do
            -- invariant: x[l+1..m] &lt; t &lt;= x[m+1..i-1]
            if f(x[i],t) then
                m=m+1
                x[m],x[i]=x[i],x[m]       -- swap x[i] and x[m]
            end
            i=i+1
        end
        x[l],x[m]=x[m],x[l]               -- swap pivot to a valid place
        -- x[l+1..m-1] &lt; x[m] &lt;= x[m+1..u]
        -- rekurzivní volání (není zapotřebí použít žádnou formu předběžné deklarace)
        qsort(x,l,m-1,f)
        qsort(x,m+1,u,f)
    end
end
</code-area>

<p>Následuje (prozatím bez podrobnějšího vysvětlení všech podrobností) ukázka
kódu, ve kterém je použit spíše funkcionální přístup a také jsou zde využity
<i>coroutiny</i> umožňující jednoduchým způsobem vytvořit kód, který se může
spouštět paralelně. Právě podpora paralelně běžících částí kódu může do
budoucna znamenat malý převrat v&nbsp;použití různých programovacích jazyků,
protože jen jejich malá část skutečně podporuje paralelní programování:</p>

<code-area>
function generatefib (n)
    return coroutine.wrap(function ()
        local a,b = 1, 1
        while a &lt;= n do
            coroutine.yield(a)
            a, b = b, a+b
        end
    end)
end

for i in generatefib(1000) do print(i) end
</code-area>

<p>Z&nbsp;hlediska uživatelů se jedná o jazyk, který zdrojový text nejprve
přeloží do takzvaného bajtkódu a teprve tento bajtkód je následně interpretován
(bajtkód obsahuje binárně zakódované instrukce virtuálního registrového
procesoru). Překlad do bajtkódu je prováděn automaticky v&nbsp;průběhu načítání
uživatelského skriptu, přičemž výsledek je ukládán do operační paměti (samotný
bajtkód je méně objemný než zdrojový text a taktéž je rychleji zpracovatelný),
ovšem v&nbsp;případě potřeby lze překlad vyvolat z&nbsp;příkazové řádky (bez
spuštění skriptu) a poté již distribuovat pouze samotný bajtkód, který je
přenositelný na různé operační systémy i platformy (od mikrořadičů až po
64bitové vícejádrové procesory). Samotný překlad do bajtkódu je velmi rychlý,
uvádí se, že cca 6&times; rychlejší než v&nbsp;případě <i>Perlu</i> a 8&times;
rychlejší než <i>Python</i> (u malých skriptů však velký rozdíl
v&nbsp;rychlosti překladu nezaznamenáme, u rozsáhlejších kódů má pak velký
význam i zátěž disku). Zajímavé je, že původní zásobníkový bajtkód (který se
dodnes používá u <i>Javy</i> a <i>.NET</i>, v&nbsp;minulosti pak u známého
<i>P-Code</i>) tvůrci nahradili bajtkódem, ve kterém se výrazy vyhodnocují
nikoli na zásobníku, ale v&nbsp;registrech (podobně je tomu i v&nbsp;případě
<i>Parrotu</i>). Výsledkem je rychlejší interpretace (viz další části tohoto
seriálu).</p>

<image id="" original="no" />
<p-center><i>Obrázek 5: Další screenshot ze hry BZFlag.</i></p-center>



<p><a name="k05"></a></p>
<h1>5. Vestavění překladače a interpretru jazyka Lua do aplikací</h1>

<p>Jeden z&nbsp;důvodů relativně velké oblíbenosti jazyka <i>Lua</i> mezi
vývojáři spočívá v&nbsp;tom, že její překladač i interpretr je vestavitelný do
dalších aplikací, což znamená, že do prakticky libovolného programu je možné
zabudovat buď plnohodnotný překladač tohoto jazyka, nebo pouze jeho část, která
se stará o běh přeloženého bajtkódu (to je i případ některých výše zmíněných
her, v&nbsp;nichž není nutné překládat nové zdrojové kódy, ale pouze spouštět
bajtkód přeložený přímo výrobcem hry). Samozřejmě se nejedná o unikátní
vlastnost, protože i mnoho interpretrů dalších programovacích jazyků lze
vestavět do jiných aplikací (v&nbsp;poslední době se stává populární především
<i>JavaScript</i> vedle již zavedeného <i>Pythonu</i> či <i>Scheme</i>). Ovšem
v&nbsp;případě <i>Lua</i> je její vestavění skutečně snadné &ndash;
z&nbsp;pohledu programátora (především pokud programuje v&nbsp;céčku či C++),
který ve své aplikaci potřebuje použít nějaký skriptovací jazyk, se jedná o
pouhých několik řádků kódu, jak si ostatně ukážeme v&nbsp;následující
kapitole.</p>

<p>Vložením celého překladače a interpretru jazyka <i>Lua</i> včetně jeho
běhového prostředí se zvětší velikost výsledného spustitelného souboru o cca 70
kB, což není nijak velká hodnota, především při porovnání velikostí interpretrů
dalších programovacích jazyků. <i>Lua</i> se z&nbsp;tohoto důvodu dokonce
používá i na mikrořadičích s&nbsp;poměrně malou operační pamětí a pamětí ROM
(v&nbsp;jedné z&nbsp;aplikací využívající <i>Lua</i> byl použit mikrořadič
s&nbsp;64 kB RAM a 256 kB EEPROM). V&nbsp;tomto případě se většinou využívá
pouze ta část interpretru, která se stará o běh přeloženého bajtkódu,
v&nbsp;některých situacích se také mění základní numerický datový typ na
šestnáctibitové či třicetidvoubitové hodnoty namísto hodnot uložených ve
formátu plovoucí tečky (viz soubor <i>luaconf.h</i>, především definice
<i>LUA_NUMBER</i>). Vestavěný interpretr jazyka <i>Lua</i> řeší také otázku
bezpečnosti skriptů, aby se zabránilo šíření makrovirů, které byly tak
&bdquo;populární&ldquo; mezi uživateli jednoho kancelářského balíku.</p>

<p>Problém bezpečnosti je řešen především izolací běhového prostředí skriptů od
ostatního systému. Pouze přímo programátor aplikace, která má obsahovat
překladač a interpretr <i>Lua</i>, může (explicitně zapsaným importem příslušné
knihovny) skriptům povolit například možnost práce se soubory, spouštění
dalších programů přes volání <i>os.execute()</i> apod. Bez importu těchto
knihoven je skriptu povoleno se svým okolím komunikovat pouze pomocí volání
zaregistrovaných funkcí. Pro předávání parametrů se navíc používá zvláštní
zásobník, ne standardní rámec procesu (na něj se ukládá pouze jeden ukazatel),
takže skripty ani nemají možnost manipulovat se zásobníkem procesu pod kterým
běží (tím se eliminují útoky typu <i>stack overflow</i>).</p>



<p><a name="k06"></a></p>
<h1>6. Demonstrační příklad &ndash; vestavění překladače a interpretru do céčkového programu</h1>

<p>V&nbsp;předchozí kapitole jsme si řekli, že překladač i interpretr jazyka
<i>Lua</i> je velmi snadné vestavět do vlastních aplikací. Pod <att-url
id="">tímto odkazem</att-url> najdete výpis zdrojového kódu programu napsaného
v&nbsp;programovacím jazyce C, který má délku cca 6 kB a více než 300 řádků.
Z&nbsp;toho pouze na šesti řádcích označených symbolem <strong>/* &&
*/</strong> se nachází příkazy nutné pro inicializaci překladače jazyka
<i>Lua</i> a spuštění překladu uživatelských skriptů s&nbsp;jejich následnou
interpretací (poctivě jsem mezi těchto šest řádků započítal i dva nutné příkazy
<strong>#include</strong>). Na dalších osmi řádcích, konkrétně ve funkci
<strong>registerLuaFunctions()</strong>, je registrace vlastních funkcí, které
je možné volat ze skriptů napsaných v&nbsp;<i>Lua</i> &ndash; de facto tak
došlo k&nbsp;rozšíření tohoto jazyka o další funkce, s&nbsp;nimiž lze do značné
míry zacházet stejně jako s&nbsp;funkcemi vytvořenými přímo ve skriptu. Jedná
se o funkce, které do <i>Lua</i> přidávají podporu pro takzvanou <i>želví
grafiku</i> vykreslovanou do bitmapy o rozlišení 800&times;800 pixelů, známou
především z&nbsp;programovacího jazyka <a
href="http://www.root.cz/clanky/logo-ndash-detska-hracka-nebo-programovaci-jazyk/">Logo</a>.</p>

<p>Tento program, který je zde představen ve své nejjednodušší podobě, tvoří
základ pro skutečnou aplikaci využitelnou při výuce základů programování
&ndash; některým vyučujícím se totiž zdá <i>Logo</i> poněkud odlišné od
ostatních mainstreamových jazyků, proto raději volí jazyk jiný (reálná výuková
aplikace se samozřejmě od tohoto programu odlišuje, především je vybavena
grafickým uživatelským rozhraním &ndash; v&nbsp;představeném programu se pouze
spustí skript uvedený jako první parametr a před ukončením programu se
vygeneruje bitmapa ve formátu <i>Portable BitMap</i>). S&nbsp;využitím osmice
nových funkcí <strong>left</strong>, <strong>right</strong>,
<strong>forward</strong>, <strong>back</strong>, <strong>home</strong>,
<strong>clean</strong>, <strong>penup</strong> a <strong>pendown</strong> je
možné již s&nbsp;malými znalostmi samotného jazyka <i>Lua</i> vytvořit poměrně
efektní obrázky (před každým obrázkem je uveden i skript použitý pro jeho
vytvoření):</p>

<code-area>
-- vymazani obrazovky
clean()

-- posun zelvy tak, aby byl
-- vykresleny obrazek vystredeny
right(135)
penup()
forward(350)
left(135)
pendown()

-- vlastni obrazec
for i=0, 90 do
    forward(500)
    left(92)
end
</code-area>

<image id="" />

<code-area>
function c1()
    for i=0, 3 do
        forward(280)
        left(90)
    end
end

function c2()
    for i=0, 360/8-1 do
        c1()
        forward(10)
        left(8)
    end
end

clean()
right(90)
penup()
forward(80)
left(90)
pendown()
c2()
</code-area>

<image id="" />

<code-area>
function c1(step)
    for i=0, 3 do
        forward(step)
        left(90)
    end
end

function c2()
    step=50
    for i=0, 2*360/4 do
        c1(step)
        left(4)
        step=step+1
    end
end

clean()
c2()
</code-area>

<image id="" />

<code-area>
function c1(step)
    penup()
    forward(step)
    left(90)
    pendown()
    forward(step)
    left(90)
    forward(step)
    left(90)
    penup()
    forward(step)
    left(90)
end

function c2()
    step=0
    for i=0, 360 do
        c1(step)
        left(5)
        step=step+0.7
    end
end

clean()
c2()
</code-area>

<image id="" />

<code-area>
function kruznice(strana)
    for i=0, 360 do
        forward(strana)
        left(1)
    end
end

function kvet(deleni)
    for i=0, deleni-1 do
        kruznice(3)
        left(360.0/deleni)
    end
end

clean()
kvet(40)
</code-area>

<image id="" />

<code-area>
function star(step1, step2)
    for i=0, 35 do
        for j=0, 6 do
            left(2*360/7)
            forward(step1)
        end
        left(step2)
    end
end

clean()
star(300,10)
</code-area>

<image id="" />

<code-area>
clean()

step=20
for i=0, 501 do
    forward(step)
    left(91)
    step=step+1
end
</code-area>

<image id="" />



<p><a name="k07"></a></p>
<h1>7. Odkazy na Internetu</h1>

<ol>

<li>Lua home page<br />
<a href="http://www.lua.org/ ">http://www.lua.org/ </a>
</li>

<li>Lua: vestavitelný minimalista<br />
<a href="http://www.root.cz/clanky/lua-vestavitelny-minimalista/">http://www.root.cz/clanky/lua-vestavitelny-minimalista/</a>
</li>

<li>Lua<br />
<a href="http://www.linuxexpres.cz/praxe/lua">http://www.linuxexpres.cz/praxe/lua</a>
</li>

<li>Lua<br />
<a href="http://cs.wikipedia.org/wiki/Lua">http://cs.wikipedia.org/wiki/Lua</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>The Lua Programming Language<br />
<a href="http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html">http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html</a>
</li>

<li>Lua Programming Gems<br />
<a href="http://www.lua.org/gems/">http://www.lua.org/gems/</a>
</li>

<li>LuaForge<br />
<a href="http://luaforge.net/">http://luaforge.net/</a>
</li>

<li>Forge project tree<br />
<a href="http://luaforge.net/softwaremap/trove_list.php">http://luaforge.net/softwaremap/trove_list.php</a>
</li>

<li>gamedev.net: Lua<br />
<a href="http://www.gamedev.net/reference/programming/features/lua/">http://www.gamedev.net/reference/programming/features/lua/</a>
</li>

<li>Category:Lua-scripted games<br />
<a href="http://en.wikipedia.org/wiki/Category:Lua-scripted_games">http://en.wikipedia.org/wiki/Category:Lua-scripted_games</a>
</li>

<li>Category:Lua-scriptable games<br />
<a href="http://en.wikipedia.org/wiki/Category:Lua-scriptable_games">http://en.wikipedia.org/wiki/Category:Lua-scriptable_games</a>
</li>

<li>BZFlag<br />
<a href="http://en.wikipedia.org/wiki/BZFlag">http://en.wikipedia.org/wiki/BZFlag</a>
</li>

<li>BZFlag.org<br />
<a href="http://bzflag.org/">http://bzflag.org/</a>
</li>

<li>GrimE<br />
<a href="http://en.wikipedia.org/wiki/GrimE">http://en.wikipedia.org/wiki/GrimE</a>
</li>

<li>Grim Fandango<br />
<a href="http://www.mobygames.com/game/grim-fandango">http://www.mobygames.com/game/grim-fandango</a>
</li>

<li>Escape from Monkey Island<br />
<a href="http://www.mobygames.com/game/escape-from-monkey-island">http://www.mobygames.com/game/escape-from-monkey-island</a>
</li>

</ol>



<p><a name="k08"></a></p>
<h1>8. Obsah další části</h1>

<p>V&nbsp;následující části tohoto seriálu se seznámíme se základními
programovými konstrukcemi a datovými typy, které je možné použít při psaní
skriptů v&nbsp;programovacím jazyce <i>Lua</i>. Především se zmíníme o práci
s&nbsp;asociativními poli, protože tento datový typ představuje základ jak pro
tvorbu &bdquo;klasických&ldquo; indexovaných polí, tak i seznamů, zásobníků,
front, stromů, struktur typu záznam (<i>record</i> v&nbsp;Pascalu a
<i>struct</i> v&nbsp;céčku) a dokonce i objektů.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

