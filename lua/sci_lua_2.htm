<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Manipulace s vektory a maticemi v projektu SciLua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Manipulace s vektory a maticemi v projektu SciLua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Manipulace s&nbsp;vektory a maticemi v&nbsp;projektu SciLua</a></p>
<p><a href="#k02">2. Spojení dvou vektorů funkcí <strong>join</strong></a></p>
<p><a href="#k03">3. Spojení dvou vektorů operátorem <strong>..</strong></a></p>
<p><a href="#k04">4. Kombinace funkce <strong>join</strong> s&nbsp;operátorem <strong>join</strong></a></p>
<p><a href="#k05">5. Další různé kombinace <strong>join</strong> a <strong>..</strong></a></p>
<p><a href="#k06">6. Pokus o složitější kombinaci vektorů různé délky</a></p>
<p><a href="#k07">7. Manipulace s&nbsp;maticemi</a></p>
<p><a href="#k08">8. Spojení dvou matic funkcí <strong>join</strong></a></p>
<p><a href="#k09">9. Pokus o spojení matic s&nbsp;různým počtem sloupců</a></p>
<p><a href="#k10">10. Spojení matic operátorem <strong>..</strong></a></p>
<p><a href="#k11">11. Kombinace funkce <strong>join</strong> a operátoru <strong>..</strong> při práci s&nbsp;maticemi</a></p>
<p><a href="#k12">*** 12. Několikanásobné spojení dvou matic operátorem <strong>..</strong> a funkcí <strong>join</strong></a></p>
<p><a href="#k13">13. Funkce <strong>alg.pow</strong></a></p>
<p><a href="#k14">14. Funkce <strong>alg.pow</strong> a nečtvercové matice</a></p>
<p><a href="#k15">15. Maticový součin</a></p>
<p><a href="#k16">16. Další parametry předávané při maticovém součinu</a></p>
<p><a href="#k17">17. Obsah následujícího článku</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na relevantní články a seriály na Rootu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Manipulace s&nbsp;vektory a maticemi v&nbsp;projektu SciLua</h2>

<p></p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 1:</i>
<i>-- Vytvoření (jednorozměrného) vektoru z tabulky</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
t = {1, 2, 3, 4, 5}
&nbsp;
<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = alg.tovec(t)
&nbsp;
<i>-- tisk vytvořeného vektoru</i>
print "Vector value\n"
print(vec)
&nbsp;
<i>-- finito</i>
</pre>

<pre>
Vector value
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Spojení dvou vektorů funkcí <strong>join</strong></h2>

<p>Nejprve si popíšeme operaci spojení dvou vektorů. Pro tento účel je
v&nbsp;knihovně <strong>sci.alg</strong> definována funkce nazvaná
<strong>join</strong>, která dokáže spojit vektory libovolné délky do nového
vektoru, jehož délka (pochopitelně) odpovídá součtu délek původních vektorů.
Podívejme se nyní na jednoduchý příklad, v&nbsp;němž dochází ke spojení vektorů
délky pět prvků s&nbsp;vektorem majícím čtyři prvky:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 2:</i>
<i>-- Spojení dvou vektorů funkcí join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří vektory</i>
t1 = {1, 2, 3, 4, 5}
t2 = {6, 7, 8, 9}
&nbsp;
<i>-- vytvoření jednorozměrných vektorů z tabulky</i>
vec1 = alg.tovec(t1)
vec2 = alg.tovec(t2)
&nbsp;
print "Vector value #1\n"
print(vec1)
&nbsp;
print "\nVector value #2\n"
print(vec2)
&nbsp;
<i>-- spojení obou vektorů</i>
vec3 = <strong>alg.join(vec1, vec2)</strong>
&nbsp;
<i>-- výpis výsledného vektoru</i>
print "\nJoined vector\n"
print(vec3)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledkem je podle všech předpokladů vektor s&nbsp;devíti prvky:</p>

<pre>
Vector value #1
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
&nbsp;
Vector value #2
&nbsp;
+6.000000
+7.000000
+8.000000
+9.000000
&nbsp;
Joined vector
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
+6.000000
+7.000000
+8.000000
+9.000000
</pre>

<p>Ve skutečnosti je možné funkci <strong>join</strong> předat i větší množství
vektorů, které se korektně spojí do jediného vektoru. V&nbsp;dalším
demonstračním příkladu tímto způsobem spojíme čtyři vektory, z&nbsp;nichž první
a poslední obsahují pouze nulové prvky:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 3:</i>
<i>-- Spojení čtyř vektorů funkcí join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří vektory</i>
t1 = {1, 2, 3, 4, 5}
t2 = {6, 7, 8, 9}
&nbsp;
<i>-- vytvoření jednorozměrných vektorů z tabulky</i>
vec1 = alg.tovec(t1)
vec2 = alg.tovec(t2)
&nbsp;
<i>-- další dva jednorozměrné vektory</i>
vec0 = alg.vec(5)
vec3 = alg.vec(5)
&nbsp;
print "Vector value #0\n"
print(vec0)
&nbsp;
print "\nVector value #1\n"
print(vec1)
&nbsp;
print "\nVector value #2\n"
print(vec2)
&nbsp;
print "\nVector value #3\n"
print(vec3)
&nbsp;
<i>-- spojení všech čtyř vektorů</i>
vec4 = <strong>alg.join(vec0, vec1, vec2, vec3)</strong>
&nbsp;
<i>-- výpis výsledného vektoru</i>
print "\nJoined vector\n"
print(vec4)
&nbsp;
<i>-- finito</i>
</pre>

<p>Podívejme se nyní na výsledek získaný po spuštění tohoto demonstračního
příkladu:</p>

<pre>
Vector value #0
&nbsp;
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
&nbsp;
Vector value #1
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
&nbsp;
Vector value #2
&nbsp;
+6.000000
+7.000000
+8.000000
+9.000000
&nbsp;
Vector value #3
&nbsp;
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
&nbsp;
Joined vector
&nbsp;
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
+6.000000
+7.000000
+8.000000
+9.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
</pre>

<p><div class="rs-tip-major">Poznámka: délku vektorů, resp.&nbsp;přesněji
řečeno počet prvků, lze zjistit operátorem <strong>#</strong>, který funguje
stejným způsobem, jako v&nbsp;případě tabulek.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Spojení dvou vektorů operátorem <strong>..</strong></h2>

<p>Kromě funkce <strong>join</strong> je možné vektory spojit i standardním
(zde ovšem přetíženým) operátorem <strong>..</strong>, který se ve standardním
jazyku Lua používá například pro spojení dvou řetězců. Výsledkem spojení dvou
vektorů je ovšem v&nbsp;tomto případě tabulka (resp.&nbsp;objekt), nikoli nový
vektor či matice! Toto chování si můžeme snadno ověřit na dalším příkladu:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 4:</i>
<i>-- Spojení dvou vektorů operátorem ..</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří vektory</i>
t1 = {1, 2, 3, 4, 5}
t2 = {6, 7, 8, 9, 10}
&nbsp;
<i>-- vytvoření jednorozměrných vektorů z tabulky</i>
vec1 = alg.tovec(t1)
vec2 = alg.tovec(t2)
&nbsp;
print "Vector value #1\n"
print(vec1)
&nbsp;
print "\nVector value #2\n"
print(vec2)
&nbsp;
<i>-- spojení obou vektorů</i>
result = <strong>vec1 .. vec2</strong>
&nbsp;
<i>-- výpis výsledného vektoru</i>
print "\nResult value\n"
print(result)
&nbsp;
<i>-- finito</i>
</pre>

<p>Z&nbsp;výsledků je patrné, že spojením dvou vektorů v&nbsp;tomto případě
skutečně vznikne tabulka (navíc se nevypíše ani její obsah &ndash; je nutné
použít programovou smyčku):</p>

<pre>
Vector value #1
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
&nbsp;
Vector value #2
&nbsp;
+6.000000
+7.000000
+8.000000
+9.000000
+10.00000
&nbsp;
Result value
&nbsp;
table: 0x411f99c0
</pre>

<p>Jak uvidíme v&nbsp;navazující kapitole, jsou vektory operátorem
<strong>..</strong> spojeny nikoli &bdquo;za sebe&ldquo;, ale &bdquo;vedle
sebe&ldquo;, takže výsledkem by měla být matice (po konverzi). To
mj.&nbsp;znamená, že oba spojované vektory musí mít stejnou délku, jinak dojde
k&nbsp;běhové chybě. I toto chování si můžeme velmi snadno ověřit:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 5:</i>
<i>-- Spojení dvou vektorů operátorem .. pro vektory různé délky</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří vektory</i>
t1 = {1, 2, 3, 4, 5}
t2 = {6, 7, 8, 9}
&nbsp;
<i>-- vytvoření jednorozměrných vektorů z tabulky</i>
vec1 = alg.tovec(t1)
vec2 = alg.tovec(t2)
&nbsp;
print "Vector value #1\n"
print(vec1)
&nbsp;
print "\nVector value #2\n"
print(vec2)
&nbsp;
<i>-- pokus o spojení obou vektorů</i>
result = <strong>vec1 .. vec2</strong>
&nbsp;
<i>-- výpis výsledného vektoru</i>
print "\nResult value\n"
print(result)
&nbsp;
<i>-- finito</i>
</pre>

<p>Při pokusu o spuštění tohoto skriptu dojde k&nbsp;běhové chybě tak, jak je
to ukázáno ve výpisu:</p>

<pre>
Vector value #1
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
&nbsp;
Vector value #2
&nbsp;
+6.000000
+7.000000
+8.000000
+9.000000
&nbsp;
&nbsp;
&nbsp;
/home/ptisnovs/ulua/luajit/2_1_head20151128/Linux/x64/luajit: /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:540: constant number of rows required
stack traceback:
        [C]: in function 'error'
        /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:540: in function '__concat'
        05_vector_concatenate_column_count.lua:29: in main chunk
        [C]: at 0x004057d0
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Kombinace funkce <strong>join</strong> s&nbsp;operátorem <strong>join</strong></h2>

<p>Aby se vektory skutečně korektně &bdquo;slepily&ldquo; do matice, je nutné
na výsledek spojení operátorem <strong>..</strong> aplikovat nám již známou
funkci <strong>join</strong>:</p>

<pre>
<i>-- spojení obou vektorů</i>
result = <strong>alg.join(vec1 .. vec2)</strong>
</pre>

<p>Opět si chování této operace ověřme na jednoduchém demonstračním
příkladu:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 6:</i>
<i>-- Spojení dvou vektorů operátorem .. následovaným join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří vektory</i>
t1 = {1, 2, 3, 4, 5}
t2 = {6, 7, 8, 9, 10}
&nbsp;
<i>-- vytvoření jednorozměrných vektorů z tabulky</i>
vec1 = alg.tovec(t1)
vec2 = alg.tovec(t2)
&nbsp;
print "Vector value #1\n"
print(vec1)
&nbsp;
print "\nVector value #2\n"
print(vec2)
&nbsp;
<i>-- spojení obou vektorů</i>
result = <strong>alg.join(vec1 .. vec2)</strong>
&nbsp;
<i>-- výpis výsledného vektoru</i>
print "\nResult value\n"
print(result)
&nbsp;
<i>-- finito</i>
</pre>

<p>Z&nbsp;vypsaných zpráv je patrné, že vznikne matice se dvěma sloupci a pěti
řádky. Počet řádků tedy odpovídá délkám původních vektorů:</p>

<pre>
Vector value #1
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
&nbsp;
Vector value #2
&nbsp;
+6.000000
+7.000000
+8.000000
+9.000000
+10.00000
&nbsp;
Result value
&nbsp;
+1.000000,+6.000000
+2.000000,+7.000000
+3.000000,+8.000000
+4.000000,+9.000000
+5.000000,+10.00000
</pre>

<p>Nic nám pochopitelně nebrání v&nbsp;tom, abychom kombinací funkce
<strong>join</strong> a operátoru <strong>..</strong> &bdquo;slepili&ldquo;
větší množství vektorů do matice s&nbsp;více než dvěma sloupci. Musíme však
zachovat základní podmínku &ndash; všechny spojované vektory musí mít shodný
počet prvků:</p>

<pre>
<i>-- spojení všech čtyř vektorů</i>
vec4 = <strong>alg.join(vec0 .. vec1 .. vec2 .. vec3)</strong>
</pre>

<p>Jednoduché ověření:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 7:</i>
<i>-- Spojení čtyř vektorů operátorem .. a funkcí join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří vektory</i>
t1 = {1, 2, 3, 4, 5}
t2 = {6, 7, 8, 9, 10}
&nbsp;
<i>-- vytvoření jednorozměrných vektorů z tabulky</i>
vec1 = alg.tovec(t1)
vec2 = alg.tovec(t2)
&nbsp;
<i>-- další dva jednorozměrné vektory</i>
vec0 = alg.vec(5)
vec3 = alg.vec(5)
&nbsp;
print "Vector value #0\n"
print(vec0)
&nbsp;
print "\nVector value #1\n"
print(vec1)
&nbsp;
print "\nVector value #2\n"
print(vec2)
&nbsp;
print "\nVector value #3\n"
print(vec3)
&nbsp;
<i>-- spojení všech čtyř vektorů</i>
vec4 = <strong>alg.join(vec0 .. vec1 .. vec2 .. vec3)</strong>
&nbsp;
<i>-- výpis výsledného vektoru</i>
print "\nJoined vector\n"
print(vec4)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledkem předchozího příkladu je matice se čtyřmi sloupci a pěti řádky:</p>

<pre>
Vector value #0
&nbsp;
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
&nbsp;
Vector value #1
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
&nbsp;
Vector value #2
&nbsp;
+6.000000
+7.000000
+8.000000
+9.000000
+10.00000
&nbsp;
Vector value #3
&nbsp;
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
&nbsp;
Joined vector
&nbsp;
+0.000000,+1.000000,+6.000000,+0.000000
+0.000000,+2.000000,+7.000000,+0.000000
+0.000000,+3.000000,+8.000000,+0.000000
+0.000000,+4.000000,+9.000000,+0.000000
+0.000000,+5.000000,+10.00000,+0.000000
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Další různé kombinace <strong>join</strong> a <strong>..</strong></h2>

<p>Vhodnou kombinací operátoru <strong>..</strong> a funkce
<strong>join</strong> lze z&nbsp;vektorů vytvářet matice o různých rozměrech.
Příkladem může být tento zápis, který vlastně spojí dvě matice získané vždy
&bdquo;slepením&ldquo; dvou vektorů do menších matic:</p>

<pre>
<i>-- kombinované spojení všech čtyř vektorů</i>
vec4 = <strong>alg.join(vec0 .. vec1, vec2 .. vec3)</strong>
</pre>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 8:</i>
<i>-- Spojení čtyř vektorů operátorem .. a funkcí join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří vektory</i>
t1 = {1, 2, 3, 4, 5}
t2 = {6, 7, 8, 9, 10}
&nbsp;
<i>-- vytvoření jednorozměrných vektorů z tabulky</i>
vec1 = alg.tovec(t1)
vec2 = alg.tovec(t2)
&nbsp;
<i>-- další dva jednorozměrné vektory</i>
vec0 = alg.vec(5)
vec3 = alg.vec(5)
&nbsp;
print "Vector value #0\n"
print(vec0)
&nbsp;
print "\nVector value #1\n"
print(vec1)
&nbsp;
print "\nVector value #2\n"
print(vec2)
&nbsp;
print "\nVector value #3\n"
print(vec3)
&nbsp;
<i>-- kombinované spojení všech čtyř vektorů</i>
vec4 = <strong>alg.join(vec0 .. vec1, vec2 .. vec3)</strong>
&nbsp;
<i>-- výpis výsledného vektoru</i>
print "\nJoined vector\n"
print(vec4)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledkem činnosti tohoto skriptu bude matice o dvou sloupcích a deseti
řádcích, která vznikla spojením dvou matic, přičemž každá měla dva sloupce a
pět řádků:</p>

<pre>
Vector value #0
&nbsp;
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
&nbsp;
Vector value #1
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
&nbsp;
Vector value #2
&nbsp;
+6.000000
+7.000000
+8.000000
+9.000000
+10.00000
&nbsp;
Vector value #3
&nbsp;
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
&nbsp;
Joined vector
&nbsp;
+0.000000,+1.000000
+0.000000,+2.000000
+0.000000,+3.000000
+0.000000,+4.000000
+0.000000,+5.000000
+6.000000,+0.000000
+7.000000,+0.000000
+8.000000,+0.000000
+9.000000,+0.000000
+10.00000,+0.000000
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Pokus o složitější kombinaci vektorů různé délky</h2>

<p>Některé kombinace vektorů ve skutečnosti nevytvoří korektní obdélníkovou
matici a tudíž nejsou takové operace povoleny. Například následující úryvek
kódu nejprve &bdquo;slepí&ldquo; trojici vektorů do matice o rozměrech
3&times;5. A k&nbsp;této matici se budeme snažit zdola připojit vektor, což
ovšem není povolená operace:</p>

<pre>
<i>-- pokus o kombinované spojení všech čtyř vektorů</i>
vec4 = <strong>alg.join(vec0 .. vec1 .. vec2, vec3)</strong>
</pre>

<p>Z&nbsp;tohoto důvodu následující skript po svém spuštění zhavaruje:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 9:</i>
<i>-- Spojení čtyř vektorů operátorem .. a funkcí join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří vektory</i>
t1 = {1, 2, 3, 4, 5}
t2 = {6, 7, 8, 9, 10}
&nbsp;
<i>-- vytvoření jednorozměrných vektorů z tabulky</i>
vec1 = alg.tovec(t1)
vec2 = alg.tovec(t2)
&nbsp;
<i>-- další dva jednorozměrné vektory</i>
vec0 = alg.vec(5)
vec3 = alg.vec(5)
&nbsp;
print "Vector value #0\n"
print(vec0)
&nbsp;
print "\nVector value #1\n"
print(vec1)
&nbsp;
print "\nVector value #2\n"
print(vec2)
&nbsp;
print "\nVector value #3\n"
print(vec3)
&nbsp;
<i>-- pokus o kombinované spojení všech čtyř vektorů</i>
vec4 = <strong>alg.join(vec0 .. vec1 .. vec2, vec3)</strong>
&nbsp;
<i>-- výpis výsledného vektoru</i>
print "\nJoined vector\n"
print(vec4)
&nbsp;
<i>-- finito</i>
</pre>

<p>V&nbsp;tomto případě opět dojde po spuštění skriptu k&nbsp;běhové chybě:</p>

<pre>
Vector value #0
&nbsp;
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
&nbsp;
Vector value #1
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
&nbsp;
Vector value #2
&nbsp;
+6.000000
+7.000000
+8.000000
+9.000000
+10.00000
&nbsp;
Vector value #3
&nbsp;
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
&nbsp;
&nbsp;
&nbsp;
/home/ptisnovs/ulua/luajit/2_1_head20151128/Linux/x64/luajit: [string "local select = select..."]:17: constant number of columns required
stack traceback:
        [C]: in function 'error'
        [string "local select = select..."]:17: in function 'join'
        09_vector_concatenate_combination_err.lua:39: in main chunk
        [C]: at 0x004057d0
</pre>

<p>Tuto chybu lze relativně snadno zachytit, a to standardní konstrukcí
<strong>pcall</strong>:</p>

<pre>
<i>-- pokus o kombinované spojení všech čtyř vektorů</i>
status, vec4orError = <strong>pcall(alg.join, vec0 .. vec1 .. vec2, vec3)</strong>
&nbsp;
if status then
    <i>-- výpis výsledného vektoru</i>
    print "\nJoined vector\n"
    print(vec4orError)
else
    <i>-- výpis informace o chybě</i>
    print "\nError!\n"
    print(vec4orError)
end
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
Error!
&nbsp;
[string "local select = select..."]:17: constant number of columns required
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Manipulace s&nbsp;maticemi</h2>

<p>Ve druhé části dnešního článku si popíšeme funkce a operátory určené pro
manipulaci s&nbsp;maticemi. Knihovna <strong>sci.alg</strong> poměrně přísně u
všech dále popsaných operací testuje, zda mají vstupní matice vhodný
(resp.&nbsp;očekávaný) tvar &ndash; nedochází zde tedy k&nbsp;žádnému
automatickému přizpůsobení počtu sloupců či řádků tak, jak to známe
z&nbsp;některých dalších knihoven nebo programovacích jazyků. Nejprve si opět
ukážeme, jak lze spojit dvě matice či větší množství matic do matice nové
&ndash; a to buď spojením matic ležících vedle sebe nebo pod sebou. Podle typu
spojení se kontroluje, jestli mají spojované matice stejný počet řádků (spojení
matic ležících vedle sebe) nebo stejný počet sloupců (spojení matic ležících
pod sebou).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Spojení dvou matic funkcí <strong>join</strong></h2>

<p>Matice je možné spojit, podobně jako vektory, funkcí <strong>join</strong>,
které lze předat libovolné množství matic. V&nbsp;následujícím demonstračním
příkladu je ukázáno spojení dvou matic o stejné velikosti 2&times;2 prvky:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 10:</i>
<i>-- Spojení dvou matic funkcí join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{1, 2}, {3, 4}}
t2 = {{5, 6}, {7, 8}}
&nbsp;
<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)
&nbsp;
print "Matrix value #1\n"
print(mat1)
&nbsp;
print "\nMatrix value #2\n"
print(mat2)
&nbsp;
<i>-- spojení obou matic</i>
mat3 = <strong>alg.join(mat1, mat2)</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nJoined matrix\n"
print(mat3)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledkem činnosti tohoto skriptu je matice se dvěma sloupci a čtyřmi řádky
&ndash; obě matice jsou tedy spojeny tak, jakoby se nacházely pod sebou a
nikoli vedle sebe:</p>

<pre>
Matrix value #1
&nbsp;
+1.000000,+2.000000
+3.000000,+4.000000
&nbsp;
Matrix value #2
&nbsp;
+5.000000,+6.000000
+7.000000,+8.000000
&nbsp;
Joined matrix
&nbsp;
+1.000000,+2.000000
+3.000000,+4.000000
+5.000000,+6.000000
+7.000000,+8.000000
</pre>

<p>Opět platí, že funkci <strong>join</strong> lze předat prakticky libovolné
množství matic určených pro spojení. Počet řádků matic se může lišit, ovšem
počet sloupců musí být u všech spojovaných matic shodný:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 11:</i>
<i>-- Spojení čtyř matic funkcí join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{1, 2}}
t2 = {{3, 4}, {5, 6}}
t3 = {{7, 8}}
t4 = {{9, 10}, {11, 12}, {13, 14}}
&nbsp;
<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)
mat3 = alg.tomat(t3)
mat4 = alg.tomat(t4)
&nbsp;
print "Matrix value #1\n"
print(mat1)
&nbsp;
print "\nMatrix value #2\n"
print(mat2)
&nbsp;
print "Matrix value #3\n"
print(mat3)
&nbsp;
print "\nMatrix value #4\n"
print(mat4)
&nbsp;
<i>-- spojení všech čtyř matic</i>
mat5 = <strong>alg.join(mat1, mat2, mat3, mat4)</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nJoined matrix\n"
print(mat5)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledkem bude v&nbsp;tomto případě matice se dvěma sloupci a sedmi řádky,
protože zdrojové matice měly postupně jeden řádek, dva řádky, opět jeden řádek
a konečně tři řádky:</p>

<pre>
Matrix value #1
&nbsp;
+1.000000,+2.000000
&nbsp;
Matrix value #2
&nbsp;
+3.000000,+4.000000
+5.000000,+6.000000
Matrix value #3
&nbsp;
+7.000000,+8.000000
&nbsp;
Matrix value #4
&nbsp;
+9.000000,+10.00000
+11.00000,+12.00000
+13.00000,+14.00000
&nbsp;
Joined matrix
&nbsp;
+1.000000,+2.000000
+3.000000,+4.000000
+5.000000,+6.000000
+7.000000,+8.000000
+9.000000,+10.00000
+11.00000,+12.00000
+13.00000,+14.00000
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Pokus o spojení matic s&nbsp;různým počtem sloupců</h2>

<p>V&nbsp;případě, že spojované matice mají různý počet sloupců, skončí pokus o
jejich spojení běhovou chybou:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 12:</i>
<i>-- Pokus o spojení čtyř matic funkcí join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{1, 2}}
t2 = {{3, 4}, {5, 6}}
t3 = <strong>{{7, 8, 99}}</strong>
t4 = {{9, 10}, {11, 12}, {13, 14}}
&nbsp;
<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)
mat3 = alg.tomat(t3)
mat4 = alg.tomat(t4)
&nbsp;
print "Matrix value #1\n"
print(mat1)
&nbsp;
print "\nMatrix value #2\n"
print(mat2)
&nbsp;
print "Matrix value #3\n"
print(mat3)
&nbsp;
print "\nMatrix value #4\n"
print(mat4)
&nbsp;
<i>-- pokus o spojení všech čtyř matic</i>
mat5 = <strong>alg.join(mat1, mat2, mat3, mat4)</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nJoined matrix\n"
print(mat5)
&nbsp;
<i>-- finito</i>
</pre>

<p>Běhová chyba vypsaná při spuštění tohoto skriptu:</p>

<pre>
Matrix value #1
&nbsp;
+1.000000,+2.000000
&nbsp;
Matrix value #2
&nbsp;
+3.000000,+4.000000
+5.000000,+6.000000
Matrix value #3
&nbsp;
+7.000000,+8.000000,+99.00000
&nbsp;
Matrix value #4
&nbsp;
+9.000000,+10.00000
+11.00000,+12.00000
+13.00000,+14.00000
&nbsp;
&nbsp;
&nbsp;
/home/ptisnovs/ulua/luajit/2_1_head20151128/Linux/x64/luajit: [string "local select = select..."]:50: constant number of columns required
stack traceback:
        [C]: in function 'error'
        [string "local select = select..."]:50: in function 'join'
        12_join_4_matrices_err.lua:39: in main chunk
        [C]: at 0x004057d0
</pre>

<p>Tuto chybu lze opět zachytit, a to s&nbsp;využitím standardní funkce
<strong>pcall</strong>. Celé volání funkce <strong>alg.join</strong> pak bude
vypadat následovně:</p>

<pre>
<i>-- pokus o spojení všech čtyř matic</i>
status, mat5orError = <strong>pcall(alg.join, mat1, mat2, mat3, mat4)</strong>
&nbsp;
if status then
    <i>-- výpis výsledné matice</i>
    print "\nJoined matrix\n"
    print(mat5orError)
else
    print "\nError!\n"
    print(mat5orError)
end
</pre>

<p>Chyba bude spolehlivě detekována a vypsána:</p>

<pre>
Error!
&nbsp;
[string "local select = select..."]:50: constant number of columns required
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Spojení matic operátorem <strong>..</strong></h2>

<p>Zatímco funkcí <strong>join</strong> zmíněnou v&nbsp;předchozích kapitolách
je možné spojit matice &bdquo;pod sebou&ldquo;, tedy tak, že počet řádků
výsledné matice bude roven součtu řádků vstupních matic, slouží operátor
<strong>..</strong> pro spojení matic &bdquo;vedle sebe&ldquo; &ndash; vstupní
matice by tedy měly mít stejný počet řádků, ale různý počet sloupců. Počet
sloupců výsledné matice bude v&nbsp;tomto případě roven součtu počtu sloupců
matic vstupních:</p>

<pre>
<i>-- spojení obou matic</i>
mat3 = <strong>mat1 .. mat2</strong>
</pre>

<p>Celý skript:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 13:</i>
<i>-- Spojení dvou matic operátorem ..</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{1, 2}, {3, 4}}
t2 = {{5, 6}, {7, 8}}
&nbsp;
<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)
&nbsp;
print "Matrix value #1\n"
print(mat1)
&nbsp;
print "\nMatrix value #2\n"
print(mat2)
&nbsp;
<i>-- spojení obou matic</i>
mat3 = <strong>mat1 .. mat2</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nJoined matrix\n"
print(mat3)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledek nebude v&nbsp;tomto případě uspokojující, protože výsledkem nebude
skutečná matice, ale objekt (což jsme ostatně viděli již u spojování
vektorů):</p>

<pre>
Matrix value #1
&nbsp;
+1.000000,+2.000000
+3.000000,+4.000000
&nbsp;
Matrix value #2
&nbsp;
+5.000000,+6.000000
+7.000000,+8.000000
&nbsp;
Joined matrix
&nbsp;
table: 0x40b4f420
</pre>

<p>Aby byla výsledkem spojení pomocí <strong>..</strong> skutečná matice, je
nutné použít jak operátor <strong>..</strong>, tak i funkci
<strong>join</strong>, která vlastně provede závěrečnou konverzi:</p>

<pre>
<i>-- spojení obou matic</i>
mat3 = <strong>alg.join(mat1 .. mat2)</strong>
</pre>

<p>Opět si ukažme celý skript:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 14:</i>
<i>-- Spojení dvou matic operátorem .. a join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{1, 2}, {3, 4}}
t2 = {{5, 6}, {7, 8}}
&nbsp;
<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)
&nbsp;
print "Matrix value #1\n"
print(mat1)
&nbsp;
print "\nMatrix value #2\n"
print(mat2)
&nbsp;
<i>-- spojení obou matic</i>
mat3 = <strong>alg.join(mat1 .. mat2)</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nJoined matrix\n"
print(mat3)
&nbsp;
<i>-- finito</i>
</pre>

<p>Nyní již bude výsledek odpovídat očekávání &ndash; vznikne matice se čtyřmi
sloupci a dvěma řádky:</p>

<pre>
Matrix value #1
&nbsp;
+1.000000,+2.000000
+3.000000,+4.000000
&nbsp;
Matrix value #2
&nbsp;
+5.000000,+6.000000
+7.000000,+8.000000
&nbsp;
Joined matrix
&nbsp;
+1.000000,+2.000000,+5.000000,+6.000000
+3.000000,+4.000000,+7.000000,+8.000000
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Kombinace funkce <strong>join</strong> a operátoru <strong>..</strong> při práci s&nbsp;maticemi</h2>

<p>Spojení matic s&nbsp;rozdílným počtem řádků operátorem <strong>..</strong>
nebude úspěšné, protože menší matice není rozšířena na velikost druhé matice
(což je v&nbsp;pořádku):</p>

<pre>
+1.000000,+2.000000
+3.000000,+4.000000
&nbsp;
+5.000000,+6.000000
+7.000000,+8.000000
+9.000000,+10.00000
</pre>

<p>Vyzkoušejme si to:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 15:</i>
<i>-- Spojení dvou matic operátorem .. a join</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{1, 2}, {3, 4}}
t2 = {{5, 6}, {7, 8}, {9, 10}}
&nbsp;
<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)
&nbsp;
print "Matrix value #1\n"
print(mat1)
&nbsp;
print "\nMatrix value #2\n"
print(mat2)
&nbsp;
<i>-- spojení obou matic</i>
mat3 = <strong>alg.join(mat1 .. mat2)</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nJoined matrix\n"
print(mat3)
&nbsp;
<i>-- finito</i>
</pre>

<p>Při spuštění tohoto skriptu skutečně dojde k&nbsp;běhové chybě:</p>

<pre>
Matrix value #1
&nbsp;
+1.000000,+2.000000
+3.000000,+4.000000
&nbsp;
Matrix value #2
&nbsp;
+5.000000,+6.000000
+7.000000,+8.000000
+9.000000,+10.00000
/home/ptisnovs/ulua/luajit/2_1_head20151128/Linux/x64/luajit: /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:540: constant number of rows required
stack traceback:
        [C]: in function 'error'
        /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:540: in function '__concat'
        15_matrix_concatenate_join_err.lua:29: in main chunk
        [C]: at 0x004057d0
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Několikanásobné spojení dvou matic operátorem <strong>..</strong> a funkcí <strong>join</strong></h2>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 16:</i>
<i>-- Několikanásobné spojení dvou matic operátorem .. a join</i>
<i>--</i>

<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"

<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{0, 0}, {0, 0}}
t2 = {{1, 1}, {1, 1}}

<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)

print "Matrix value #1\n"
print(mat1)

print "\nMatrix value #2\n"
print(mat2)

<i>-- spojení obou matic</i>
mat3 = alg.join(mat1 .. mat2, mat2 .. mat1, mat1 .. mat1, mat2 .. mat2)

<i>-- výpis výsledné matice</i>
print "\nJoined matrix\n"
print(mat3)

<i>-- finito</i>
</pre>

<pre>
Matrix value #1

+0.000000,+0.000000
+0.000000,+0.000000

Matrix value #2

+1.000000,+1.000000
+1.000000,+1.000000

Joined matrix

+0.000000,+0.000000,+1.000000,+1.000000
+0.000000,+0.000000,+1.000000,+1.000000
+1.000000,+1.000000,+0.000000,+0.000000
+1.000000,+1.000000,+0.000000,+0.000000
+0.000000,+0.000000,+0.000000,+0.000000
+0.000000,+0.000000,+0.000000,+0.000000
+1.000000,+1.000000,+1.000000,+1.000000
+1.000000,+1.000000,+1.000000,+1.000000
</pre>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 17:</i>
<i>-- Několikanásobné spojení dvou matic operátorem .. a join</i>
<i>--</i>

<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"

<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{0, 0}, {0, 0}}
t2 = {{1, 1}, {1, 1}}

<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)

print "Matrix value #1\n"
print(mat1)

print "\nMatrix value #2\n"
print(mat2)

<i>-- spojení obou matic</i>
mat3 = alg.join(mat1 .. mat1 .. mat1, mat2 .. mat2 .. mat2, mat1 .. mat2 .. mat1)

<i>-- výpis výsledné matice</i>
print "\nJoined matrix\n"
print(mat3)

<i>-- finito</i>
</pre>


<pre>
Matrix value #1

+0.000000,+0.000000
+0.000000,+0.000000

Matrix value #2

+1.000000,+1.000000
+1.000000,+1.000000

Joined matrix

+0.000000,+0.000000,+1.000000,+1.000000
+0.000000,+0.000000,+1.000000,+1.000000
+1.000000,+1.000000,+0.000000,+0.000000
+1.000000,+1.000000,+0.000000,+0.000000
+0.000000,+0.000000,+0.000000,+0.000000
+0.000000,+0.000000,+0.000000,+0.000000
+1.000000,+1.000000,+1.000000,+1.000000
+1.000000,+1.000000,+1.000000,+1.000000
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Funkce <strong>alg.pow</strong></h2>

<p>Jednou z&nbsp;mála funkcí pro práci s&nbsp;maticemi dostupných přímo
v&nbsp;knihovně <strong>sci.alg</strong> je funkce nazvaná
<strong>pow</strong>. Tato funkce dovede umocnit matici pro zvolenou mocninu
(tedy provést variantu maticového součinu). Podívejme se, jak lze tuto funkci
použít pro malou čtvercovou matici o rozměrech 2&times;2 prvky. Povšimněte si,
že je nejprve nutné alokovat novou matici pro uložení výsledku operace (což
dává smysl pro velké matice):</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 18:</i>
<i>-- Funkce alg.pow</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t = {{2, -1}, {0, 1}}
&nbsp;
<i>-- vytvoření matice z tabulky</i>
mat = alg.tomat(t)
&nbsp;
print "Original matrix value\n"
print(mat)
&nbsp;
<i>-- matice pro uložení výsledku</i>
result = alg.mat(2, 2)
&nbsp;
<i>-- funkce alg.pow</i>
<strong>alg.pow(result, mat, 2)</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nResult matrix\n"
print(result)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledek této operace vypadá následovně:</p>

<pre>
Original matrix value
&nbsp;
+2.000000,-1.000000
+0.000000,+1.000000
&nbsp;
Result matrix
&nbsp;
+4.000000,-3.000000
+0.000000,+1.000000
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Funkce <strong>alg.pow</strong> a nečtvercové matice</h2>

<p>Ovšem pro nečtvercovou matici nelze tuto operaci (pochopitelně) provést,
protože matici je nutné otočit, aby bylo možné provést maticový součin. Při
pokusu o provedení <strong>alg.pow</strong> pro nečtvercovou matici nastane
běhová chyba:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 18 B:</i>
<i>-- Funkce alg.pow a nečtvercová matice</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t = {{2, -1}, {0, 1}, {0, 1}}
&nbsp;
<i>-- vytvoření matice z tabulky</i>
mat = alg.tomat(t)
&nbsp;
print "Original matrix value\n"
print(mat)
&nbsp;
<i>-- matice pro uložení výsledku</i>
result = alg.mat(2, 2)
&nbsp;
<i>-- funkce alg.pow</i>
<strong>alg.pow(result, mat, 2)</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nResult matrix\n"
print(result)
&nbsp;
<i>-- finito</i>
</pre>

<p>Chyba vypsaná při pokusu o spuštění tohoto skriptu vypadá následovně:</p>

<pre>
Original matrix value
&nbsp;
+2.000000,-1.000000
+0.000000,+1.000000
+0.000000,+1.000000
&nbsp;
&nbsp;
&nbsp;
/home/ptisnovs/ulua/luajit/2_1_head20151128/Linux/x64/luajit: /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:223: square matrix expected
stack traceback:
        [C]: in function 'error'
        /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:223: in function 'dimensions_mat_square_check'
        /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:244: in function 'dimensions_pow_check_1'
        /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:249: in function 'dimensions_pow_check_2'
        /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:319: in function 'pow'
        18_B_matrix_pow_err.lua:27: in main chunk
        [C]: at 0x004057d0
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Maticový součin</h2>

<p>Další velmi často používanou operací je <a
href="https://cs.wikipedia.org/wiki/N%C3%A1soben%C3%AD_matic">maticový
součin</a>, který je v&nbsp;knihovně <strong>sci.alg</strong> představován
relativně složitou funkcí nazvanou <strong>mul</strong>. Tato funkce, podobně
jako funkce <strong>pow</strong> popsaná výše, očekává jako svůj první argument
(novou) matici, do které se uloží výsledek maticového součinu. Navíc se této
funkci předávají obě zdrojové matice (které se mají vynásobit) a taktéž dvojice
příznaků, kterými se určuje, zda se mají matice před provedením součinu
transponovat (ne otočit!) či nikoli:</p>

<pre>
<i>-- funkce alg.pow</i>
<strong>alg.mul(result, mat1, mat2, false, false)</strong>
</pre>

<p>Samozřejmě si opět ukážeme, jak maticový součin použít v&nbsp;praxi:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 19:</i>
<i>-- Maticový součin</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{1, 2}, {3, 4}}
t2 = {{0, -1}, {-1, 0}}
&nbsp;
<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)
&nbsp;
print "Matrix value #1\n"
print(mat1)
&nbsp;
print "\nMatrix value #2\n"
print(mat2)
&nbsp;
<i>-- matice pro uložení výsledku</i>
result = alg.mat(2, 2)
&nbsp;
<i>-- funkce alg.pow</i>
<strong>alg.mul(result, mat1, mat2, false, false)</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nResult matrix\n"
print(result)
&nbsp;
<i>-- finito</i>
</pre>

<p>Skript po svém spuštění vypíše i výsledek maticového součinu:</p>

<pre>
Matrix value #1
&nbsp;
+1.000000,+2.000000
+3.000000,+4.000000
&nbsp;
Matrix value #2
&nbsp;
+0.000000,-1.000000
-1.000000,+0.000000
&nbsp;
Result matrix
&nbsp;
-2.000000,-1.000000
-4.000000,-3.000000
</pre>

<p>Samozřejmě je možné vynásobit nečtvercové matice - počet řádků první matice
musí odpovídat počtu řádků matice druhé a naopak (je kontrolováno po zavolání
příslušné funkce):</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 21:</i>
<i>-- Maticový součin pro nečtvercové matice</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{1, 2, 3}, {4, 5, 6}}
t2 = {{0, -1}, {-1, 0}, {1, 1}}
&nbsp;
<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)
&nbsp;
print "Matrix value #1\n"
print(mat1)
&nbsp;
print "\nMatrix value #2\n"
print(mat2)
&nbsp;
<i>-- matice pro uložení výsledku</i>
result = alg.mat(2, 2)
&nbsp;
<i>-- funkce alg.pow</i>
<strong>alg.mul(result, mat1, mat2, false, false)</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nResult matrix\n"
print(result)
&nbsp;
<i>-- finito</i>
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
Matrix value #1
&nbsp;
+1.000000,+2.000000,+3.000000
+4.000000,+5.000000,+6.000000
&nbsp;
Matrix value #2
&nbsp;
+0.000000,-1.000000
-1.000000,+0.000000
+1.000000,+1.000000
&nbsp;
Result matrix
&nbsp;
+1.000000,+2.000000
+1.000000,+2.000000
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Další parametry předávané při maticovém součinu</h2>

<p>Poslední dva parametry předávané funkci <strong>alg.mul</strong> určují, zda
se mají obě vstupní matice před provedením součinu transponovat či nikoli. To
nám umožňuje jedinou funkcí provádět i relativně složité operace (včetně
násobení matice vektorem):</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Manipulace s vektory a maticemi</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 20:</i>
<i>-- Maticový součin</i>
<i>--</i>
&nbsp;
<i>-- import knihovny sci.alg</i>
alg = require "sci.alg"
&nbsp;
<i>-- tabulky z nichž se vytvoří matice</i>
t1 = {{1, 2}, {3, 4}}
t2 = {{0, -1}, {-1, 0}}
&nbsp;
<i>-- vytvoření dvourozměrných matic z tabulky</i>
mat1 = alg.tomat(t1)
mat2 = alg.tomat(t2)
&nbsp;
print "Matrix value #1\n"
print(mat1)
&nbsp;
print "\nMatrix value #2\n"
print(mat2)
&nbsp;
<i>-- matice pro uložení výsledku</i>
result = alg.mat(2, 2)
&nbsp;
<i>-- funkce alg.pow</i>
<strong>alg.mul(result, mat1, mat2, true, false)</strong>
&nbsp;
<i>-- výpis výsledné matice</i>
print "\nResult matrix\n"
print(result)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledek je nyní odlišný, neboť první matice <strong>mat1</strong> je
transponována:</p>

<pre>
Matrix value #1
&nbsp;
+1.000000,+2.000000
+3.000000,+4.000000
&nbsp;
Matrix value #2
&nbsp;
+0.000000,-1.000000
-1.000000,+0.000000
&nbsp;
Result matrix
&nbsp;
-3.000000,-1.000000
-4.000000,-2.000000
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah následujícího článku</h2>

<p>V&nbsp;navazujícím článku si ukážeme, jak je možné s&nbsp;maticemi pracovat
<i>lidsky</i>, tedy nikoli s&nbsp;využitím poměrně těžkopádných nízkoúrovňových
funkcí typu <strong>alg.pow</strong> a <strong>alg.mul</strong>. Existuje totiž
sémantické rozšíření jazyka Lua nazvané <i>sci-lang</i>, které podporuje
například:</p>

<ol>
<li>Násobení matic novým operátorem <strong>**</strong></li>
<li>Umocnění matice novým operátorem <strong>^^</strong></li>
<li>Transpozice matice novým operátorem <strong>`</strong></li>
<li>Přímá podpora pro přiřazení matice operátorem <strong>=</strong></li>
<li>Operace nad všemi prvky matice pomocí standardních aritmetických operátorů <strong>+ - * / %</strong></li>
</ol>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny minule i dnes popsané demonstrační příklady určené pro kombinaci
interpretru <i>LuaJIT</i> a projekt <i>SciLua</i> byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/scientific-lua">https://github.com/tisnik/scientific-lua</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes prozatím malý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis příkladu</th><th>Adresa (zdrojový kód)</th></tr>
<tr><td> 1</td><td>01_bare_require.lua</td><td>chování příkazu <strong>require "sci.alg"</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/01_bare_require.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/01_bare_require.lua</a></td></tr>
<tr><td> 2</td><td>02_environment.lua</td><td>výpis globálních symbolů před a po použití příkazu <strong>require "sci.alg"</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/02_environment.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/02_environment.lua</a></td></tr>
<tr><td> 3</td><td>03_require_return_value.lua</td><td>funkce a další objekty vrácené příkazem <strong>require "sci.alg"</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/03_require_return_value.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/03_require_return_value.lua</a></td></tr>
<tr><td> 4</td><td>04_vector_of_zeros.lua</td><td>konstrukce vektoru se specifikovaným počtem prvků (prvky jsou nulové)</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/04_vector_of_zeros.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/04_vector_of_zeros.lua</a></td></tr>
<tr><td> 5</td><td>05_vector_values.lua</td><td>modifikace prvků vektoru standardním &bdquo;index&ldquo; operátorem</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/05_vector_values.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/05_vector_values.lua</a></td></tr>
<tr><td> 6</td><td>06_vector_from_table.lua</td><td>konstrukce vektoru z&nbsp;tabulky (konverze)</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/06_vector_from_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/06_vector_from_table.lua</a></td></tr>
<tr><td> 7</td><td>07_vector_type_int8.lua</td><td>specifikace typu prvků vektoru a prováděné konverze datového typu <strong>int8</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/07_vector_type_int8.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/07_vector_type_int8.lua</a></td></tr>
<tr><td> 8</td><td>08_vector_type_int16.lua</td><td>specifikace typu prvků vektoru a prováděné konverze datového typu <strong>int16</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/08_vector_type_int16.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/08_vector_type_int16.lua</a></td></tr>
<tr><td> 9</td><td>09_vector_type_bool.lua</td><td>specifikace typu prvků vektoru a prováděné konverze datového typu <strong>bool</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/09_vector_type_bool.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/09_vector_type_bool.lua</a></td></tr>
<tr><td>10</td><td>10_vector_to_table.lua</td><td>konverze prvků vektoru do tabulky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/10_vector_to_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/10_vector_to_table.lua</a></td></tr>
<tr><td>11</td><td>11_print_first_items_of_subtables.lua</td><td>výpis prvních prvků z&nbsp;podtabulek po konverzi</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/11_print_first_items_of_subtables.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/11_print_first_items_of_subtables.lua</a></td></tr>
<tr><td>12</td><td>12_matrix_of_zeros_3x4.lua</td><td>konstrukce matice 3&times;4 prvky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/12_matrix_of_zeros_3x4.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/12_matrix_of_zeros_3x4.lua</a></td></tr>
<tr><td>13</td><td>13_matrix_of_zeros_0x4.lua</td><td>konstrukce matice 0&times;4 prvky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/13_matrix_of_zeros_0x4.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/13_matrix_of_zeros_0x4.lua</a></td></tr>
<tr><td>14</td><td>14_matrix_of_zeros_3x0.lua</td><td>konstrukce matice 3&times;0 prvky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/14_matrix_of_zeros_3x0.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/14_matrix_of_zeros_3x0.lua</a></td></tr>
<tr><td>15</td><td>15_matrix_from_table.lua</td><td>konstrukce matice z&nbsp;tabulky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/15_matrix_from_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/15_matrix_from_table.lua</a></td></tr>
<tr><td>16</td><td>16_matrix_from_table.lua</td><td>konstrukce matice z&nbsp;tabulky pokud prvky mají nevhodný typ</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/16_matrix_from_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/16_matrix_from_table.lua</a></td></tr>
<tr><td>17</td><td>17_matrix_size.lua</td><td>vytištění velikosti matice, počtu prvků matice atd.</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/17_matrix_size.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/17_matrix_size.lua</a></td></tr>
<tr><td>18</td><td>18_matrix_tostring.lua</td><td>převod matice na řetězec</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/18_matrix_tostring.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/18_matrix_tostring.lua</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>01_vector_from_table.lua</td><td>vytvoření (jednorozměrného) vektoru z&nbsp;tabulky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/01_vector_from_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/01_vector_from_table.lua</a></td></tr>
<tr><td>20</td><td>02_join_2_vectors.lua</td><td>spojení dvou vektorů funkcí <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/02_join_2_vectors.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/02_join_2_vectors.lua</a></td></tr>
<tr><td>21</td><td>03_join_4_vectors.lua</td><td>spojení čtyř vektorů funkcí <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/03_join_4_vectors.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/03_join_4_vectors.lua</a></td></tr>
<tr><td>22</td><td>04_vector_concatenate.lua</td><td>spojení dvou vektorů operátorem <strong>..</strong> pro vektory stejné délky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/04_vector_concatenate.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/04_vector_concatenate.lua</a></td></tr>
<tr><td>23</td><td>05_vector_concatenate_column_count.lua</td><td>spojení dvou vektorů operátorem <strong>..</strong> pro vektory různé délky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/05_vector_concatenate_column_count.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/05_vector_concatenate_column_count.lua</a></td></tr>
<tr><td>24</td><td>06_vector_concatenate_join.lua</td><td>spojení dvou vektorů operátorem <strong>..</strong> následovaným <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/06_vector_concatenate_join.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/06_vector_concatenate_join.lua</a></td></tr>
<tr><td>25</td><td>07_vector_concatenate_join_more_vectors.lua</td><td>spojení čtyř vektorů operátorem <strong>..</strong> následovaným <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/07_vector_concatenate_join_more_vectors.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/07_vector_concatenate_join_more_vectors.lua</a></td></tr>
<tr><td>26</td><td>08_vector_concatenate_combination.lua</td><td>spojení čtyř vektorů operátorem <strong>..</strong> a funkcí <strong>join</strong> (složitější kombinace)</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/08_vector_concatenate_combination.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/08_vector_concatenate_combination.lua</a></td></tr>
<tr><td>27</td><td>09_vector_concatenate_combination_err.lua</td><td>chyba při pokusu o spojení vektorů operátorem <strong>..</strong> a funkcí <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/09_vector_concatenate_combination_err.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/09_vector_concatenate_combination_err.lua</a></td></tr>
<tr><td>28</td><td>09_B_vector_concatenate_combination_err.lua</td><td>zachycení chyby při pokusu o spojení vektorů operátorem <strong>..</strong> a funkcí <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/09_B_vector_concatenate_combination_err.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/09_B_vector_concatenate_combination_err.lua</a></td></tr>
<tr><td>29</td><td>10_join_2_matrices.lua</td><td>spojení dvou matic funkcí <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/10_join_2_matrices.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/10_join_2_matrices.lua</a></td></tr>
<tr><td>30</td><td>11_join_4_matrices.lua</td><td>spojení čtyř matic funkcí <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/11_join_4_matrices.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/11_join_4_matrices.lua</a></td></tr>
<tr><td>31</td><td>12_join_4_matrices_err.lua</td><td>pokus o spojení čtyř matic různé velikosti funkcí <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/12_join_4_matrices_err.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/12_join_4_matrices_err.lua</a></td></tr>
<tr><td>32</td><td>12_B_join_4_matrices_err.lua</td><td>zachycení chyby při pokusu o spojení čtyř matic různé velikosti funkcí <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/12_B_join_4_matrices_err.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/12_B_join_4_matrices_err.lua</a></td></tr>
<tr><td>33</td><td>13_matrix_concatenate.lua</td><td>spojení dvou matic operátorem <strong>..</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/13_matrix_concatenate.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/13_matrix_concatenate.lua</a></td></tr>
<tr><td>34</td><td>14_matrix_concatenate_join.lua</td><td>spojení dvou matic operátorem <strong>..</strong> a <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/14_matrix_concatenate_join.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/14_matrix_concatenate_join.lua</a></td></tr>
<tr><td>35</td><td>15_matrix_concatenate_join_err.lua</td><td>chyba při pokusu o spojení matic operátorem <strong>..</strong> a funkcí <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/15_matrix_concatenate_join_err.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/15_matrix_concatenate_join_err.lua</a></td></tr>
<tr><td>36</td><td>15_B_matrix_concatenate_join_err.lua</td><td>zachycení chyby při pokusu o spojení matic operátorem <strong>..</strong> a funkcí <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/15_B_matrix_concatenate_join_err.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/15_B_matrix_concatenate_join_err.lua</a></td></tr>
<tr><td>37</td><td>16_matrix_concatenate_combinations.lua</td><td>několikanásobné spojení dvou matic operátorem <strong>..</strong> a <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/16_matrix_concatenate_combinations.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/16_matrix_concatenate_combinations.lua</a></td></tr>
<tr><td>38</td><td>17_matrix_concatenate_combinations.lua</td><td>několikanásobné spojení dvou matic operátorem <strong>..</strong> a <strong>join</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/17_matrix_concatenate_combinations.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/17_matrix_concatenate_combinations.lua</a></td></tr>
<tr><td>39</td><td>18_matrix_pow.lua</td><td>funkce <strong>alg.pow</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/18_matrix_pow.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/18_matrix_pow.lua</a></td></tr>
<tr><td>40</td><td>18_B_matrix_pow.lua</td><td>nekorektní použití funkce <strong>alg.pow</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/18_B_matrix_pow.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/18_B_matrix_pow.lua</a></td></tr>
<tr><td>41</td><td>19_matrix_multiplication_1.lua</td><td>maticový součin pro čtvercové matice</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/19_matrix_multiplication_1.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/19_matrix_multiplication_1.lua</a></td></tr>
<tr><td>42</td><td>20_matrix_multiplication_2.lua</td><td>maticový součin</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/20_matrix_multiplication_2.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/20_matrix_multiplication_2.lua</a></td></tr>
<tr><td>43</td><td>21_matrix_multiplication_3.lua</td><td>maticový součin pro nečtvercové matice</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article02/21_matrix_multiplication_3.lua">https://github.com/tisnik/scientific-lua/blob/master/article02/21_matrix_multiplication_3.lua</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na relevantní články a seriály na Rootu</h2>

<p>S&nbsp;technologiemi souvisejícími s&nbsp;programovacím jazykem Lua,
LuaJITem, ale i s&nbsp;jazyky a knihovnami určenými pro práci s&nbsp;vektory,
maticemi, lineární algebrou atd. jsme se již na stránkách Roota několikrát
setkali. Následují odkazy na více či méně relevantní články k&nbsp;dnes
probíranému tématu:</p>

<ol>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Seriál Torch: framework pro strojové učení<br />
<a href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/</a>
</li>

<li>Seriál Programovací jazyk Julia<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-julia/">https://www.root.cz/serialy/programovaci-jazyk-julia/</a>
</li>

<li>Seriál Programovací jazyk R<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-r/">https://www.root.cz/serialy/programovaci-jazyk-r/</a>
</li>

<li>Skriptovací jazyk Lua v&nbsp;aplikacích naprogramovaných v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/">https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/</a>
</li>

<li>Jupyter Notebook &ndash; nástroj pro programátory, výzkumníky i lektory<br />
<a href="https://www.root.cz/clanky/jupyter-notebook-nastroj-pro-programatory-vyzkumniky-i-lektory/">https://www.root.cz/clanky/jupyter-notebook-nastroj-pro-programatory-vyzkumniky-i-lektory/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s&nbsp;vektory a maticemi<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">https://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programování mainframů: jazyk APL<br />
<a href="https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/">https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/</a>
</li>

<li>Programovací jazyk APL: programování bez smyček<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/">https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/</a>
</li>

<li>Programovací jazyk APL &ndash; dokončení<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/</a>
</li>

<li>Incanter: prostředí pro statistické výpočty s&nbsp;grafickým výstupem založené na Clojure<br />
<a href="https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/">https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/</a>
</li>

<li>Incanter: operace s&nbsp;maticemi<br />
<a href="https://www.root.cz/clanky/incanter-operace-s-maticemi/">https://www.root.cz/clanky/incanter-operace-s-maticemi/</a>
</li>

<li>Tvorba jednoduchých grafů v&nbsp;systému Incanter<br />
<a href="https://www.root.cz/clanky/tvorba-jednoduchych-grafu-v-systemu-incanter/">https://www.root.cz/clanky/tvorba-jednoduchych-grafu-v-systemu-incanter/</a>
</li>

<li>Tvorba grafů v&nbsp;systému Incanter (pokračování)<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-v-systemu-incanter-pokracovani/">https://www.root.cz/clanky/tvorba-grafu-v-systemu-incanter-pokracovani/</a>
</li>

<li>Gophernotes: kombinace interaktivního prostředí Jupyteru s jazykem Go <br />
<a href="https://www.root.cz/clanky/gophernotes-kombinace-interaktivniho-prostredi-jupyteru-s-jazykem-go/">https://www.root.cz/clanky/gophernotes-kombinace-interaktivniho-prostredi-jupyteru-s-jazykem-go/</a>
</li>

<li>Popis vybraných balíčků nabízených projektem Gonum <br />
<a href="https://www.root.cz/clanky/popis-vybranych-balicku-nabizenych-projektem-gonum/">https://www.root.cz/clanky/popis-vybranych-balicku-nabizenych-projektem-gonum/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>SciLua: Scientific Computing with LuaJIT<br />
<a href="https://scilua.org/">https://scilua.org/</a>
</li>

<li>Knihovna lua-sci na GitHubu<br />
<a href="https://github.com/stepelu/lua-sci">https://github.com/stepelu/lua-sci</a>
</li>

<li>Nástroj lua-sci-lang na GitHubu<br />
<a href="https://github.com/stepelu/lua-sci-lang">https://github.com/stepelu/lua-sci-lang</a>
</li>

<li>Array programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Comparison of programming languages (array)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)">https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)</a>
</li>

<li>ArrayCast<br />
<a href="https://www.arraycast.com/">https://www.arraycast.com/</a>
</li>

<li>ULua: Universal Lua Distribution<br />
<a href="https://ulua.io/index.html">https://ulua.io/index.html</a>
</li>

<li>LuaRocks<br />
<a href="https://luarocks.org/">https://luarocks.org/</a>
</li>

<li>Awesome Lua &ndash; A curated list of quality Lua packages and resources.<br />
<a href="https://github.com/LewisJEllis/awesome-lua">https://github.com/LewisJEllis/awesome-lua</a>
</li>

<li>LuaJIT<br />
<a href="https://luajit.org/">https://luajit.org/</a>
</li>

<li>Running LuaJIT<br />
<a href="https://luajit.org/running.html">https://luajit.org/running.html</a>
</li>

<li>LuaJIT na GitHubu<br />
<a href="https://github.com/luajit">https://github.com/luajit</a>
</li>

<li>Lua Implementations<br />
<a href="http://lua-users.org/wiki/LuaImplementations">http://lua-users.org/wiki/LuaImplementations</a>
</li>

<li>Archived | Embed Lua for scriptable apps<br />
<a href="https://developer.ibm.com/tutorials/l-embed-lua/">https://developer.ibm.com/tutorials/l-embed-lua/</a>
</li>

<li>Embedding Lua<br />
<a href="https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml">https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml</a>
</li>

<li>The R Project for Statistical Computing<br />
<a href="https://www.r-project.org/">https://www.r-project.org/</a>
</li>

<li>An Introduction to R<br />
<a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf">https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf</a>
</li>

<li>R (programming language)<br />
<a href="https://en.wikipedia.org/wiki/R_(programming_language)">https://en.wikipedia.org/wiki/R_(programming_language)</a>
</li>

<li>The R Programming Language<br />
<a href="https://www.tiobe.com/tiobe-index/r/">https://www.tiobe.com/tiobe-index/r/</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>OpenBLAS: An optimized BLAS library<br />
<a href="https://www.openblas.net/">https://www.openblas.net/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

