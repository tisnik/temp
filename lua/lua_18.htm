<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Hrátky se systémem LÖVE - pružné vazby mezi tělesy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Hrátky se systémem LÖVE - pružné vazby mezi tělesy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V osmnácté části seriálu o programovacím jazyce Lua a knihovnách určených pro tento jazyk si ukážeme, jakým způsobem je možné v systému LÖVE vytvořit pružné (elastické) vazby mezi několika tělesy a jak tyto vazby ovlivní vzájemnou interakci těles v simulovaném prostoru.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Hrátky se systémem LÖVE &ndash; pružné vazby mezi tělesy</a><br />
<a href="#k02">2. Systémy těles spojených pomocí elastických vazeb</a><br />
<a href="#k03">3. Objekt DistanceJoint</a><br />
<a href="#k04">4. První demonstrační příklad &ndash; pružné vazby vytvořené mezi trojicí míčků</a><br />
<a href="#k05">5. Složitější topologie vazeb</a><br />
<a href="#k06">6. Druhý demonstrační příklad &ndash; pružné vazby mezi větším množstvím těles</a><br />
<a href="#k07">7. Animace vytvořené pomocí druhého demonstračního příkladu</a><br />
<a href="#k08">8. Literatura a odkazy na Internetu</a><br />
<a href="#k09">9. Obsah následující části seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h2>1. Hrátky se systémem LÖVE &ndash; pružné vazby mezi tělesy</h2>

<p>V&nbsp;předchozích částech tohoto seriálu jsme si vysvětlili, jakým způsobem
se za pomoci systému <i>LÖVE</i> provádí simulace s&nbsp;tělesy, které mají
většinou tvar konvexního polygonu. Tato tělesa se mohou volně pohybovat
v&nbsp;prostoru, narážet na sebe, klouzat či se valit po povrchu jiných těles
atd. Na tělesa, která se vyskytují v&nbsp;modelovaném systému, může
v&nbsp;průběhu simulace působit několik druhů sil, z&nbsp;nichž mezi ty
nejvýznamnější patří gravitace (tu již známe z&nbsp;předchozích částí tohoto
seriálu) a síla, kterou je simulován odpor okolního prostředí proti pohybu
těles. Ve složitějších simulacích, například při vložení těles do silového
pole, se používají i další typy sil, ovšem jejich použití je v&nbsp;systému
<i>LÖVE</i> již obtížnější. Síly, jež působí na tělesa, mění jejich rychlost,
pozici a rotaci. Z&nbsp;hlediska simulace objektů s&nbsp;elastickými vazbami je
nejdůležitější silou ovlivňující trajektorii těchto těles <i>pružná (elastická)
síla</i>. Jedná se, na rozdíl od výše zmíněné gravitační síly či odporu
okolního prostředí, o sílu lokální, protože působí vždy mezi dvojicí těles,
která jsou spojeny elastickou vazbou. Tato síla může mít vliv na pohyb hmotného
středu těles (těžiště pevných těles), popř.&nbsp;i na jejich otáčení
v&nbsp;případě, že je konec elastické vazby umístěn mimo těžiště. Směr a
velikost této síly je vypočten pomocí <i>Hookova zákona</i>. Nejdůležitější
vlastností elastické vazby, kterou si můžeme představit jako neviditelnou
pružinu nataženou mezi dvojici těles, je klidová délka, které se pružina
při svém natažení či stlačení snaží dosáhnout a dále konstanty odpovídající
síle pružiny a míře jejího tlumení.</p>



<p><a name="k02"></a></p>
<h2>2. Systémy těles spojených pomocí elastických vazeb</h2>

<p>Pružné (elastické) vazby lze použít pro vytvoření <i>systému vázaných
těles</i>. Jedná se o takové systémy, ve kterých jsou mezi jednotlivými tělesy
vytvořeny pevné nebo elastické vazby. Pevné vazby nedovolují změnit vzdálenost
mezi tělesy ve vazbě a řešení vzájemné polohy těles je v&nbsp;tomto případě
zajištěno pomocí poměrně složité <i>inverzní kinematiky</i>, která však není
v&nbsp;současné verzi systému <i>LÖVE</i> implementována. Naproti tomu
u&nbsp;elastických vazeb se vzdálenost těchto těles může v&nbsp;určitém
intervalu hodnot měnit. V&nbsp;převážné většině případů se jedná o&nbsp;vazby
vytvořené mezi dvojicí těles (vazby totiž simulují pružiny natažené mezi
dvojicí těles). Složitější vazby se vytváří složením těchto jednoduchých vazeb.
Vazby mezi tělesy jsou většinou zadávány už při vytváření celého modelu, ovšem
v&nbsp;systému <i>LÖVE</i> je možné počet vazeb i jejich vlastnosti měnit i
v&nbsp;průběhu simulace, což povoluje například simulovat i rozpad celého
objektu či naopak jeho složení z&nbsp;několika částí.</p>

<p>Při inicializaci aplikace, ve které se provádí simulace, se musí nastavit
počáteční pozice a rychlosti těles. Následně jsou vytvořeny vazby mezi tělesy,
přičemž lze tyto vazby vygenerovat buď ručně nebo automaticky (obojí způsob si
ukážeme v&nbsp;demonstračních příkladech). Manuální i automatická tvorba musí
brát v&nbsp;úvahu geometrickou stabilitu celého systému. Této stability se
dosáhne vytvořením vazeb na hranách zadaných těles a dále vytvořením pomocných
vazeb po úhlopříčkách, což si taktéž ukážeme ve druhém demonstračním příkladu
(bude se samozřejmě jednat pouze o dvojrozměrný případ). Systémy
s&nbsp;elastickými vazbami jsou vhodné pro použití především u&nbsp;modelů,
které v&nbsp;průběhu simulace (a s&nbsp;ní souvisejících deformací modelu)
nemění svoji topologii. V&nbsp;některých případech však může být žádoucí, aby
bylo možné modelovaný objekt rozdělit, tj.&nbsp;přerušit některé elastické
vazby. Této vlastnosti lze dosáhnout specifikací maximální možné síly, která
může působit mezi dvěma tělesy spojenými elastickou vazbou. V&nbsp;případě, že
skutečná síla překročí tuto mez, dojde k&nbsp;&bdquo;přetržení&ldquo; pružiny a
elastická vazba je zrušena. Pokud vznikne nutnost modelovat objekt, u nějž se
topologie mění zásadnějším způsobem, je vhodnější použít dynamicky vázané
systémy. Tyto pokročilejší techniky sice systém <i>LÖVE</i> ve své současné
verzi nepodporuje, ovšem lze je napodobit programově, neboť informace o stavu
každé vazby lze poměrně jednoduše získat v&nbsp;kterémkoli okamžiku
simulace.</p>



<p><a name="k03"></a></p>
<h2>3. Objekt DistanceJoint</h2>

<p>Elastická vazba, jenž je v&nbsp;systému <i>LÖVE</i> představovaná objektem
typu <i>DistanceJoint</i>, se vytvoří voláním konstruktoru
<strong>love.physics.newDistanceJoint()</strong>. Tento konstruktor musí být
zavolaný se šesticí parametrů. První dva parametry představují dvojici těles,
které mají být spojeny pomocí elastické vazby (musí se tedy jednat o objekty
typu <strong>Body</strong>). Další dvojice parametrů udává souřadnice prvního
konce vazby, tj.&nbsp;místo, kde je pružina ukotvena v&nbsp;prvním tělese, a
poslední dvojice parametrů souřadnice druhého konce vazby, tj.&nbsp;bod
nalézající se ve druhém tělese (většinou oba koncové body leží v&nbsp;těžišti
těles, viz oba demonstrační příklady, není to však nutné). Konstruktor
<strong>love.physics.newDistanceJoint()</strong> vytvoří objekt, nad nímž je
možné volat metody vypsané v&nbsp;následující tabulce:</p>

<table>
<tr><th>Metoda        </th><th>Význam</th></tr>
<tr><td>getLength()   </td><td>získání klidové vzdálenosti mezi oběma tělesy.</td></tr>
<tr><td>getFrequency()</td><td>získání rychlosti reakce pružiny na její natažení či stlačení.</td></tr>
<tr><td>getDamping()  </td><td>získání míry tlumení pružiny (eliminace zákmitů).</td></tr>
<tr><td>setLength()   </td><td>nastavení klidové vzdálenosti mezi oběma tělesy.</td></tr>
<tr><td>setFrequency()</td><td>nastavení rychlosti reakce pružiny na její natažení či stlačení.</td></tr>
<tr><td>setDamping()  </td><td>nastavení míry tlumení.</td></tr>
<tr><td>destroy()     </td><td>explicitní zrušení elastické vazby (většinou není nutné provádět).</td></tr>
</table>



<p><a name="k04"></a></p>
<h2>4. První demonstrační příklad &ndash; pružné vazby vytvořené mezi trojicí míčků</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázáno, jak lze pomocí
pružných (elastických) vazeb navzájem propojit trojici míčků. Určení, zda mají
být elastické vazby vytvořeny či zda se budou míčky pohybovat nezávisle na
sobě, se řídí globální konstantou <strong>use_joints</strong>. Pokud je tato
konstanta nastavena na logickou hodnotu <strong>true</strong>, je mezi každé
dva míčky vložena neviditelná &bdquo;pružina&ldquo; představující elastickou
vazbu. Oba konce pružiny jsou umístěny do středu míčků &ndash; jedná se o třetí
až šestý parametr funkce <strong>love.physics.newDistanceJoint()</strong>,
které se předávají jak objekty představující obě tělesa spojená vazbami, tak i
souřadnice koncových bodů pružin (sami si můžete vyzkoušet, jak se simulace
bude lišit v&nbsp;případě, že elastické vazby nebudou ukončeny
v&nbsp;geometrických středech míčků). Následně je pomocí metody
<strong>elasticka_vazba:setLength()</strong> nastavena klidová délka pružiny a
dále metodou <strong>elasticka_vazba:setFrequency()</strong> rychlost odezvy
pružiny na její natažení či naopak stlačení. Pozice pružin (elastických vazeb)
je naznačena pomocí úseček, které spojují středy míčků. Následuje výpis
zdrojového kódu prvního demonstračního příkladu:</p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- První demonstrační příklad: pružné vazby
-- vytvořené mezi trojicí míčků
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- objekt představující svět, ve kterém se provádí simulace
world = nil

-- odrazivost tělesa
body_restitution = 0.3

-- počitadlo snímků
frame = 0

-- povolení vytvoření vazeb mezi míčky
use_joints = true

function load()
    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)

    -- načtení fontu
    local font = love.graphics.newFont(love.default_font, 16)
    love.graphics.setFont(font)

    -- vytvoření "světa" o rozměrech 2000x2000 délkových jednotek
    world = love.physics.newWorld(2000, 2000)
    world:setGravity(0, 50)

    -- podlaha na souřadnicích [0, 0] s nulovou hmotností
    ground_body = love.physics.newBody(world, 0, 0, 0)

    -- obdélník představující podlahu
    ground_shape = love.physics.newRectangleShape(ground_body, 400, 500, 700, 10, -10)

    -- šikmý plát pro "rozjetí" míčku
    plate_body = love.physics.newBody(world, 0, -100, 0)
    plate_shape = love.physics.newRectangleShape(plate_body, 100, 440, 300, 10, 50)

    -- rastrový obrázek představující těleso - míček
    ball = love.graphics.newImage("green_ball.png")

    -- vytvoření tělesa na zadaných souřadnicích
    ball_bodies = {}
    ball_bodies[0] = love.physics.newBody(world, 50, 100)
    ball_bodies[1] = love.physics.newBody(world, 250, 100)
    ball_bodies[2] = love.physics.newBody(world, 150, 40)
    ball_shapes = {}
    for i = 0, 2 do
        -- přiřazení tvaru k tělesu
        ball_shapes[i] = love.physics.newCircleShape(ball_bodies[i], 31)

        -- nastavení odrazivosti
        ball_shapes[i]:setRestitution(body_restitution)

        -- výpočet hmotnosti
        ball_bodies[i]:setMassFromShapes()
    end

    dist_joint = {}

    -- vytvoření vazeb
    if use_joints then
        for i=0, 2 do
            local ball_body1 = ball_bodies[i]
            local ball_body2 = ball_bodies[(i+1)%3]
            dist_joint[i] = love.physics.newDistanceJoint(
                ball_body1, ball_body2,
                ball_body1:getX(), ball_body1:getY(),
                ball_body2:getX(), ball_body2:getY())
            dist_joint[i]:setLength(100)
            dist_joint[i]:setFrequency(3)
        end
    end
end

-- pravidelně volaná callback funkce
function update(dt)
    world:update(dt/4)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
    love.graphics.setColor(160, 250, 160)
    love.graphics.setLineWidth(2)

    -- vykreslení podlahy a nakloněné roviny
    love.graphics.polygon(love.draw_line, ground_shape:getPoints())
    love.graphics.polygon(love.draw_line, plate_shape:getPoints())

    -- vykreslení míčků se správným natočením
    for i=0, 2 do
        local ball_body = ball_bodies[i]
        love.graphics.draw(ball, ball_body:getX(), ball_body:getY(), ball_body:getAngle())
    end

    -- naznačení vazeb mezi míčky
    if use_joints then
        for i=0, 2 do
            local ball_body1 = ball_bodies[i]
            local ball_body2 = ball_bodies[(i+1)%3]
            love.graphics.line(ball_body1:getX(), ball_body1:getY(), ball_body2:getX(), ball_body2:getY())
        end
    end

    -- výpis počitadla snímků
    love.graphics.setColor(255, 0, 255)
    love.graphics.draw(string.format("frame: %d", frame), 10, 20)
    frame = frame + 1

    -- výpis nápovědy
    love.graphics.setColor(0, 255, 128)
    love.graphics.draw("[q] quit", 560, 20)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    -- klávesou [ESC] nebo [Q] se celá simulace ukončí
    if key == love.key_escape or key == love.key_q then
        love.system.exit()
    end
end

-- finito
</pre>

<img src="http://i.iinfo.cz/images/673/lua1806.gif" alt="lua1801" />
<p><i>Obrázek 1: Animace vytvořená pomocí prvního demonstračního příkladu.
Povšimněte si, že v&nbsp;prvních snímcích dochází k&nbsp;ustálení tvaru
výsledného objektu, protože počáteční vzdálenosti míčků jsou odlišné od klidové
délky pružin (elastických vazeb).</i></p>



<p><a name="k05"></a></p>
<h2>5. Složitější topologie vazeb</h2>

<p>Ve druhé kapitole jsme si řekli, že pro zajištění stability celého systému
těles, které jsou spojeny elastickými vazbami, je většinou nutné mezi tato
tělesa umístit větší množství vazeb. V&nbsp;případě trojrozměrných těles se
většinou jedná o stěnové a tělesové úhlopříčky, ovšem v&nbsp;dvojrozměrném
prostoru je situace poněkud jednodušší &ndash; většinou postačuje vytvořit
vazby tak, aby každá trojice nejbližších těles (myšleno samozřejmě
v&nbsp;klidovém stavu celého systému) byla propojena trojicí elastických vazeb.
Například ve druhém demonstračním příkladu je celý systém složen ze čtrnácti
těles tvořících jednu řadu šesti čtverců. Zdánlivě by mohlo postačovat propojit
tělesa pouze horizontálními a vertikálními vazbami (takže se při zobrazení
vazeb skutečně vytvoří řada čtverců), ovšem takto vytvořený systém po nárazu na
podložku samovolně &bdquo;splaskne&ldquo;, protože neexistuje žádná vazba,
která by zabránila vzájemnému přiblížení či naopak vzdálení dvou protilehlých
vrcholů čtverců. Aby k&nbsp;tomuto jevu nedocházelo, postačuje většinou
vytvořit i úhlopříčné vazby v&nbsp;každém čtverci. Taktéž je možné vytvořit
úhlopříčné vazby mezi dvojicí či trojicí čtverců atd. &ndash; výsledný systém
potom klade při pokusu o ohyb větší odpor.</p>



<p><a name="k06"></a></p>
<h2>6. Druhý demonstrační příklad &ndash; pružné vazby mezi větším množstvím těles</h2>

<p>Ve druhém demonstračním příkladu, jehož výpis je uveden pod tímto odstavcem,
je ukázáno použití elastických vazeb k&nbsp;vytvoření objektu, který se skládá
ze čtrnácti těles čtvercového tvaru spojených elastickými vazbami. Které typy
vazeb se vytvoří je řízeno pomocí globálních konstant
<strong>enable_horizontal_joints</strong>,
<strong>enable_vertical_joints</strong> a
<strong>enable_diagonal_joints</strong>. Vazby jsou vytvořeny programově ve
funkcích <strong>createJoints()</strong> (vytvoření samotných vazeb) a
<strong>fillBindings()</strong> (naplnění pole, které obsahuje dvojice vrcholů,
které mají být spojeny vazbou). Povšimněte si, že při inicializaci vazeb se
současně vypočítává i jejich klidová délka (na základě vzájemné vzdálenosti
středů obou těles), tj.&nbsp;vytvořené těleso po spuštění simulace nezakmitává,
jak tomu bylo v&nbsp;předchozím demonstračním příkladu. Taktéž stojí za
povšimnutí nahrazení ternárního operátoru (který v&nbsp;jazyku <i>Lua</i>
neexistuje) pomocí dvojice operátorů <strong>and</strong> a <strong>or</strong>
při výpis nastavení aplikace &ndash; zde se využívá faktu, že oba operátory
vyhodnocují své druhé operandy pouze tehdy, pokud není již z&nbsp;hodnoty
prvního operandu zřejmý výsledek celého výrazu. Podobným způsobem se ostatně
ternární operátor nahrazuje například i v&nbsp;shellu a dalších (nejenom)
skriptovacích jazycích:</p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- Druhý demonstrační příklad: pružné vazby
-- mezi větším množstvím těles ve tvaru čtverce
-------------------------------------------------

-- povolení či zákaz vytváření některých typů vazeb
enable_horizontal_joints = true
enable_vertical_joints = true
enable_dialogal_joints = true

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- objekt představující svět, ve kterém se provádí simulace
world = nil

-- odrazivost tělesa
body_restitution = 0.3

-- počitadlo snímků
frame = 0

body_count = 14

-- pole těles
bodies = {}

-- pole tvarů
shapes = {}

-- pole vazeb
joints = {}

-- indexy těles spojených vazbami
bindings = {}

-- inicializace všech potřebných objektů a datových struktur
function load()
    fillBindings()

    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)

    -- načtení fontu
    local font = love.graphics.newFont(love.default_font, 16)
    love.graphics.setFont(font)

    -- vytvoření "světa" o rozměrech 2000x2000 délkových jednotek
    world = love.physics.newWorld(2000, 2000)
    world:setGravity(0, 50)

    -- podlaha na souřadnicích [0, 0] s nulovou hmotností
    ground_body = love.physics.newBody(world, 0, 0, 0)

    -- obdélník představující podlahu
    ground_shape = love.physics.newRectangleShape(ground_body, 400, 550, 700, 10)

    -- nepohyblivé obdélníky
    plate_body1 = love.physics.newBody(world, 0, -100, 0)
    plate_shape1 = love.physics.newRectangleShape(plate_body1, 100, 440, 100, 100)

    plate_body2 = love.physics.newBody(world, 0, -100, 0)
    plate_shape2 = love.physics.newRectangleShape(plate_body2, 700, 440, 100, 100)

    createBodies()
    createShapes()
    createJoints()
end

-- vytvoření těles na zadaných souřadnicích
function createBodies()
    for i = 0, 6 do
        bodies[i*2] = love.physics.newBody(world, 100+i*100, 50)
        bodies[i*2+1] = love.physics.newBody(world, 100+i*100, 150)
    end
end

function createShapes()
    for i = 0, #bodies do
        -- přiřazení tvaru k tělesu
        shapes[i] = love.physics.newRectangleShape(bodies[i], 0, 0, 30, 30)

        -- nastavení odrazivosti
        shapes[i]:setRestitution(body_restitution)

        -- výpočet hmotnosti
        bodies[i]:setMassFromShapes()
    end
end

-- vytvoření vazeb
function createJoints()
    for i=1, #bindings do
        local body1 = bodies[bindings[i][1]]
        local body2 = bodies[bindings[i][2]]
        local x1 = body1:getX()
        local y1 = body1:getY()
        local x2 = body2:getX()
        local y2 = body2:getY()
        joints[i] = love.physics.newDistanceJoint(body1, body2, x1, y1, x2, y2)
        joints[i]:setLength(math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)))
        joints[i]:setFrequency(3)
    end
end

-- vytvoření vazeb: indexů těles, která se spojují vazbami
function fillBindings()
    if enable_vertical_joints then
        for i=0, body_count/2-1 do
            table.insert(bindings, {i*2,i*2+1})
        end
    end
    if enable_horizontal_joints then
        for i=0, (body_count-1)/2-1 do
            table.insert(bindings, {i*2,(i+1)*2})
            table.insert(bindings, {i*2+1,(i+1)*2+1})
        end
    end
    if enable_dialogal_joints then
        for i=0, (body_count-1)/2-1 do
            table.insert(bindings, {i*2,(i+1)*2+1})
            table.insert(bindings, {i*2+1,(i+1)*2})
        end
    end
end

-- pravidelně volaná callback funkce
function update(dt)
    world:update(dt/8)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
    love.graphics.setColor(160, 250, 160)
    love.graphics.setLineWidth(2)

    -- vykreslení podlahy a dalších nepohyblivých předmětů
    love.graphics.polygon(love.draw_line, ground_shape:getPoints())
    love.graphics.polygon(love.draw_line, plate_shape1:getPoints())
    love.graphics.polygon(love.draw_line, plate_shape2:getPoints())

    -- vykreslení všech těles
    love.graphics.setColor(250, 250, 160)
    for i=0, #bodies do
        local body = bodies[i]
        love.graphics.polygon(love.draw_line, shapes[i]:getPoints())
    end

    -- naznačení vazeb mezi tělesy
    love.graphics.setColor(160, 160, 250)
    for i=1, #bindings do
        local body1 = bodies[bindings[i][1]]
        local body2 = bodies[bindings[i][2]]
        love.graphics.line(body1:getX(), body1:getY(), body2:getX(), body2:getY())
    end

    -- výpis počitadla snímků
    love.graphics.setColor(255, 0, 255)
    love.graphics.draw(string.format("frame: %d", frame), 10, 20)
    frame = frame + 1

    -- výpis aktuálního uživatelského nastavení
    -- povšimněte si použití operátorů "and" a "or" namísto
    -- chybějícího ternárního operátoru typu "? :"
    love.graphics.setColor(80, 80, 160)
    love.graphics.draw("Horizontal joints: " .. (enable_horizontal_joints and "enabled" or "disabled"), 10, 40)
    love.graphics.draw("Vertical joints: " .. (enable_vertical_joints and "enabled" or "disabled"), 10, 60)
    love.graphics.draw("Diagonal joints: " .. (enable_diagonal_joints and "enabled" or "disabled"), 10, 80)

    -- výpis nápovědy
    love.graphics.setColor(0, 255, 128)
    love.graphics.draw("[q] quit", 560, 20)
    love.graphics.draw("[r] restart", 560, 40)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    -- klávesou [ESC] nebo [Q] se celá simulace ukončí
    if key == love.key_escape or key == love.key_q then
        love.system.exit()
    end
    -- klávesou [R] se celý systém restartuje
    if key == love.key_r then
        love.system.restart()
    end
end

-- finito
</pre>



<p><a name="k07"></a></p>
<h2>7. Animace vytvořené pomocí druhého demonstračního příkladu</h2>

<img src="http://i.iinfo.cz/images/407/lua1802.gif" alt="lua1802" />
<p><i>Obrázek 2: Tělesa jsou spojena pouze horizontálními elastickými vazbami;
ve skutečnosti se tedy jedná o dva objekty.</i></p>

<img src="http://i.iinfo.cz/images/452/lua1803.gif" alt="lua1803" />
<p><i>Obrázek 3: Tělesa jsou spojena pouze vertikálními elastickými vazbami;
opět se jedná o několik samostatných objektů.</i></p>

<img src="http://i.iinfo.cz/images/472/lua1804.gif" alt="lua1804" />
<p><i>Obrázek 4: Použití horizontálních a současně i vertikálních elastických
vazeb nepostačuje k&nbsp;tomu, aby byl tvar celého objektu zachován.</i></p>

<img src="http://i.iinfo.cz/images/434/lua1805.gif" alt="lua1805" />
<p><i>Obrázek 5: Tělesa jsou spojena pouze úhlopříčnými vazbami, což ve
skutečnosti opět vede k&nbsp;vytvoření dvou navzájem nepropojených
objektů.</i></p>

<img src="http://i.iinfo.cz/images/427/lua1806.gif" alt="lua1806" />
<p><i>Obrázek 6: Horizontální, vertikální i úhlopříčné vazby &ndash; výsledný
objekt si zachovává původní tvar, protože tři sousední tělesa tvoří vrcholy
jednoho trojúhelníku, jehož strany jsou tvořeny elastickými vazbami.</i></p>



<p><a name="k08"></a></p>
<h2>8. Literatura a odkazy na Internetu</h2>

<ol>

<li>Baraff David and Witkin Andrew: <br />
<i>Physically Based Modeling</i>,<br />
SIGGRAPH Course Notes, July 1998, pages B1&ndash;C12
</li>

<li>Magnetat-Thalmann B., Thalmann D. and Arnaldi B.: <br />
<i>Computer Animation and Simulation 2000</i>,<br />
Springer Verlag, Wien, ISBN 3-2118-3549-0
</li>

<li>Box2D Physics Engine (jedná se o engine, na němž je knihovna
<strong>love.physics</strong> založena)<br />
<a href="http://www.box2d.org/">http://www.box2d.org/</a></li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Tutoriály k&nbsp;systému LÖVE<br />
<a href="http://love2d.org/?page=documentation">http://love2d.org/?page=documentation</a>
</li>

<li>Screenshoty aplikací vytvořených v&nbsp;LÖVE<br />
<a href="http://love2d.org/screenshots">http://love2d.org/screenshots</a></li>

<li>Domovská stránka programovacího jazyka Lua<br />
<a href="http://www.lua.org/ ">http://www.lua.org/ </a>
</li>

<li>Lua<br />
<a href="http://www.linuxexpres.cz/praxe/lua">http://www.linuxexpres.cz/praxe/lua</a>
</li>

<li>Lua<br />
<a href="http://cs.wikipedia.org/wiki/Lua">http://cs.wikipedia.org/wiki/Lua</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

</ol>



<p><a name="k09"></a></p>
<h2>9. Obsah následující části seriálu</h2>

<p>V&nbsp;navazující části seriálu o programovacím jazyku <i>Lua</i> již popis
&bdquo;herního&ldquo; systému <i>LÖVE</i> dokončíme. Ukážeme si způsob
vytvoření dalších typů vazeb mezi tělesy, pomocí nichž je například možné
simulovat chování kladky či podobného jednoduchého stroje. Následně se již
budeme věnovat popisu dalších knihoven, které různým způsobem původní
funkcionalitu jazyka <i>Lua</i> (přesněji řečeno funkcionalitu nabízenou
základními knihovnami tohoto jazyka) rozšiřují a umožňují tak použití
<i>Lua</i> jak na webových serverech, tak i v&nbsp;různých nástrojích
zaměřených na simulace, numerické výpočty či zpracování textu.
V&nbsp;neposlední řadě se také budeme poněkud podrobněji zabývat velmi
zajímavým projektem <i>metalua</i>, pomocí něhož se rozšiřuje samotná sémantika
programovacího jazyka, například o další jazykové konstrukce (nové typy smyček,
ternární operátor atd.) či o možnost modifikace překládaného kódu na základě
speciálních pravidel zapisovaných přímo do zdrojového textu programu.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

