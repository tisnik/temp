<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Představení projektu SciLua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Představení projektu SciLua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku o programovacím jazyku Lua se začneme věnovat projektu SciLua. Tento projekt lze s určitou dávkou zobecnění považovat za obdobu knihoven Numpy a SciPy pro Python. SciLua je postavena nad interpretrem LuaJIT a numerické algoritmy využívají knihovnu OpenBLAS.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Představení projektu SciLua</a></p>
<p><a href="#k02">2. Knihovny použité v&nbsp;projektu SciLua</a></p>
<p><a href="#k03">3. Instalace balíčků <strong>sci</strong> a <strong>sci-lang</strong> s&nbsp;využitím nástroje ULua</a></p>
<p><a href="#k04">4. Úprava prostředí pro snazší spouštění demonstračních příkladů</a></p>
<p><a href="#k05">5. Práce s&nbsp;vektory a maticemi: specializované jazyky a specializované knihovny</a></p>
<p><a href="#k06">6. Stručné představení projektu OpenBLAS</a></p>
<p><a href="#k07">7. Knihovna <strong>sci.alg</strong></a></p>
<p><a href="#k08">8. Import knihovny <strong>sci.alg</strong></a></p>
<p><a href="#k09">9. Konstrukce jednorozměrného vektoru</a></p>
<p><a href="#k10">10. Modifikace prvků vektoru</a></p>
<p><a href="#k11">11. Konverze tabulky na vektor, specifikace typu prvků při převodu</a></p>
<p><a href="#k12">12. Zpětný převod vektoru na tabulku</a></p>
<p><a href="#k13">13. Vytvoření nulové matice m&times;n</a></p>
<p><a href="#k14">14. Konstrukce matice z&nbsp;tabulky</a></p>
<p><a href="#k15">15. Chyby při převodu tabulky obsahující hodnoty neočekávaného datového typu</a></p>
<p><a href="#k16">16. Získání základních informací o matici, převod matice na řetězec</a></p>
<p><a href="#k17">17. Obsah následujícího článku</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na relevantní články a seriály na Rootu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Představení projektu SciLua</h2>

<p>V&nbsp;dnešním článku o programovacím jazyku Lua se začneme věnovat
zajímavému projektu nazvanému <i>SciLua</i>, jehož domovskou stránku naleznete
na adrese <a href="https://scilua.org/">https://scilua.org/</a>. Tento projekt
můžeme s&nbsp;určitou dávkou zobecnění považovat za (prozatím neúplnou) obdobu
knihoven Numpy a SciPy určených pro programovací jazyk Python &ndash; což je
velmi užitečné, zejména z&nbsp;toho důvodu, že práce s&nbsp;klasickými poli
jazyka Lua není a nemůže být tak efektivní, jako v&nbsp;případě použití
nativních knihoven (což přímo plyne z&nbsp;typového systému jazyka Lua).</p>

<p>Samotný projekt <i>SciLua</i> je rozdělen do několika na sobě nezávislých
knihoven, přičemž implementace jednotlivých algoritmů je z&nbsp;menší části
napsána přímo v&nbsp;jazyce Lua (tedy ve formě interpretovaných skriptů),
z&nbsp;větší části se však volají funkce z&nbsp;nativní (optimalizované a
numericky stabilní) knihovny <i>OpenBLAS</i>. To, společně s&nbsp;využitím
<i>LuaJITu</i> (a nikoli standardního interpretu Luy), vede k&nbsp;rychlým a
paměťově nenáročným výpočtům, a to i při porovnání s&nbsp;jazykem <i>Julia</i>,
který je v&nbsp;oblasti lineární algebry a numerických výpočtů považován za
velmi rychlý &ndash; <a href="https://scilua.org/">https://scilua.org/</a> a <a
href="https://towardsdatascience.com/r-vs-python-vs-julia-90456a2bcbab">https://towardsdatascience.com/r-vs-python-vs-julia-90456a2bcbab</a>.</p>

<p>Dnes se seznámíme se způsobem instalace tohoto projektu a taktéž se
základními datovými strukturami, nad nimiž je <i>SciLua</i> postavena. Bližší
popis jednotlivých knihoven, z&nbsp;nichž se <i>SciLua</i> skládá, bude uveden
v&nbsp;navazujících článcích.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Knihovny použité v&nbsp;projektu SciLua</h2>

<p>Projekt <i>SciLua</i> se skládá z&nbsp;několika knihoven, přičemž
v&nbsp;případě, že budeme chtít nějakou knihovnu využít při výpočtech, je nutné
ji explicitně importovat funkcí <strong>require</strong>. Neexistuje tedy
způsob importu všech těchto knihoven současně, což ovšem nemusí být příliš
překvapující, neboť to odpovídá minimalistickému pojetí programovacího jazyka
Lua i celého ekosystému postaveného okolo tohoto jazyka:</p>

<table>
<tr><th> #</th><th>Jméno knihovny</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>sci.alg</td><td>konstruktory vektorů a matic, základní operace s&nbsp;těmito strukturami</td></tr>
<tr><td> 2</td><td>sci.diff</td><td>algoritmus symbolické derivace funkcí</td></tr>
<tr><td> 3</td><td>sci.dist</td><td>funkce pro statistické výpočty</td></tr>
<tr><td> 4</td><td>sci.fmin</td><td>optimalizační algoritmus: nalezení hodnot, pro které funkce nabývá minimální hodnoty</td></tr>
<tr><td> 5</td><td>sci.fmax</td><td>optimalizační algoritmus: nalezení hodnot, pro které funkce nabývá maximální hodnoty</td></tr>
<tr><td> 6</td><td>sci.math</td><td>rozšíření standardní knihovny <strong>math</strong> o několik dalších funkcí</td></tr>
<tr><td> 7</td><td>sci.mcmc</td><td>implementace algoritmu Markov Chain Monte Carlo (MCMC)</td></tr>
<tr><td> 8</td><td>sci.prng</td><td>implementace několika generátorů pseudonáhodné sekvence numerických hodnot</td></tr>
<tr><td> 9</td><td>sci.qrng</td><td>implementace kvazigenerátoru sekvence náhodných numerických hodnot</td></tr>
<tr><td>10</td><td>sci.quad</td><td>algoritmus numerické integrace funce</td></tr>
<tr><td>11</td><td>sci.root</td><td>algoritmus hledání kořene funkce</td></tr>
<tr><td>12</td><td>sci.stat</td><td>další statistické funkce</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: dnes si popíšeme většinu funkcí a metod
z&nbsp;první zmíněné knihovny &ndash; <strong>sci.alg</strong>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace balíčků <strong>sci</strong> a <strong>sci-lang</strong> s&nbsp;využitím nástroje ULua</h2>

<p><i>SciLua</i> je pro potřeby instalace rozdělena do dvou balíčků nazvaných
<strong>sci</strong> a <strong>sci-lang</strong> (schválně na tomto místě píšu
slovo &bdquo;balíčků&ldquo;, protože interně se jedná o větší množství
knihoven). Pro instalaci těchto balíčků použijeme nástroj <i>ULua</i>, který
již byl na stránkách Roota <a
href="https://www.root.cz/clanky/ulua-univerzalni-distribuce-programovaciho-jazyka-lua/">popsán
minulý týden</a>. Ihned po instalaci nástroje <i>ULua</i> by mělo být
nainstalováno sedm balíčků vypsaných následujícím příkazem:</p>

<pre>
$ <strong>./upkg status</strong>
&nbsp;
Installed modules:
+ cURL         | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ clib_libcurl | free and easy-to-use client-side URL transfer library                | 7.42.1-3
+ lcurl        | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ lfs          | luafilesystem : File System Library for the Lua Programming Language | 1.6.3-203
+ luajit       | LuaJIT: Just-In-Time Compiler (JIT) for Lua                          | 2.1.head20151128
+ pkg          | ULua package manager                                                 | 1.0.beta10
+ serpent      | serpent : Lua serializer and pretty printer                          | 0.28-103
</pre>

<p>Přesvědčíme se, jaké balíčky obsahující ve svém názvu či popisu text
&bdquo;sci&ldquo; je dostupných, tj.&nbsp;připravených pro instalaci:</p>

<pre>
$ <strong>./upkg available |grep sci</strong>
&nbsp;
+ adoc_cmd_ext              | adoc_cmd_ext : A library and script to handle AsciiDoc Command language extens.. | 0.1.0-3
+ ascii85                   | lascii85 : An ASCII85 library for Lua                                            | 20120927-103
+ printable_chars           | printable_chars : Functions to get the ascii printable chars from a byte string. | 0.1-403, 0.1-203
+ sci                       | general purpose scientific computing library                                     | 1.0.beta12, 1.0.beta11, 1.0.beta10, 1.0.beta9
+ sci-lang                  | Syntax extensions to LuaJIT for scientific computing                             | 1.0.beta10
</pre>

<p>Zajímat nás bude především balíček nazvaný <strong>sci</strong>, o kterém
lze získat podrobnější informace takto:</p>

<pre>
$ <strong>./upkg available sci</strong>
&nbsp;
Module information:
name        : sci
version     : 1.0.beta12
require     : clib_libopenblas~0.2.15, luajit~2.0, xsys~1.0
description : general purpose scientific computing library
homepage    : http://scilua.org
license     : MIT &lt;http://opensource.org/licenses/MIT&gt;
</pre>

<p>Stejným příkazem, pochopitelně s&nbsp;odlišným parametrem, můžeme získat
podrobnější informace o balíčku nazvaném <strong>sci-lang</strong>:</p>

<pre>
$ .<strong>/upkg available sci-lang</strong>
&nbsp;
Module information:
name        : sci-lang
version     : 1.0.beta10
require     : luajit~2.0, sci~1.0.beta10
description : Syntax extensions to LuaJIT for scientific computing
homepage    : https://github.com/stepelu/lua-sci-lang
license     : MIT/X11
</pre>

<p>Nyní provedeme instalaci obou balíčků, a to konkrétně příkazem:</p>

<pre>
$ <strong>./upkg add sci</strong>
&nbsp;
Installing matching module and its requirements:
+ clib_libopenblas | OpenBLAS : An optimized BLAS library         | 0.2.15
+ sci              | general purpose scientific computing library | 1.0.beta12
+ xsys             | extended Lua system                          | 1.0.2
Confirm (y/n)? y
Downloading:
+ /pkg/clib_libopenblas/0.2.15 | 100% of 50729KB
+ /pkg/sci/1.0.beta12          | 100% of 663KB
+ /pkg/xsys/1.0.2              | 100% of 5KB
Done
</pre>

<p>a:</p>

<pre>
$ <strong>./upkg add sci-lang</strong>
&nbsp;
Installing matching module and its requirements:
+ sci-lang | Syntax extensions to LuaJIT for scientific computing | 1.0.beta10
Confirm (y/n)? y
Downloading:
+ /pkg/sci-lang/1.0.beta10 | 100% of 54KB
Done
</pre>

<p>Nyní by měl být seznam nainstalovaných balíčků rozšířen, a to následujícím způsobem:</p>

<pre>
$ <strong>./upkg status</strong>
&nbsp;
Installed modules:
+ cURL             | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ clib_libcurl     | free and easy-to-use client-side URL transfer library                | 7.42.1-3
+ <u>clib_libopenblas</u> | OpenBLAS : An optimized BLAS library                                 | 0.2.15
+ lcurl            | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ lfs              | luafilesystem : File System Library for the Lua Programming Language | 1.6.3-203
+ luajit           | LuaJIT: Just-In-Time Compiler (JIT) for Lua                          | 2.1.head20151128
+ pkg              | ULua package manager                                                 | 1.0.beta10
+ <u>sci</u>              | general purpose scientific computing library                         | 1.0.beta12
+ <u>sci-lang</u>         | Syntax extensions to LuaJIT for scientific computing                 | 1.0.beta10
+ serpent          | serpent : Lua serializer and pretty printer                          | 0.28-103
+ xsys             | extended Lua system                                                  | 1.0.2
</pre>

<p><div class="rs-tip-major">Poznámka: nástroj <i>ULua</i> prozatím nerozlišuje
mezi architekturami a operačními systémy. To konkrétně znamená, že balíček je
nainstalován pro všechny (jím) podporované architektury. V&nbsp;případě balíčků
založených čistě pouze na skriptech naprogramovaných v&nbsp;jazyku Lua je to
pochopitelně jedno, protože jeden skript bude v&nbsp;naprosté většině případů
shodný pro všechny architektury. Ovšem u balíčků obsahujících nativní knihovny
(což je konkrétně případ balíčku <strong>clib_libopenblas</strong>) budou
nainstalovány binární knihovny pro Linux (32bit i 64bit), Windows (taktéž 32bit
a 64bit) i MacOS. Pokud chcete ušetřit obsazené místo na disku, lze knihovny
pro nepoužívané systémy bez problémů smazat. Zobrazit takové knihovny je
snadné, například v&nbsp;případě DLL určených pouze pro Windows:</div></p>

<pre>
$ <strong>find . -name "*.dll"</strong>
</pre>

<p>Pro Linux na 64bitové architektuře x86-64 by měly stačit tyto knihovny:</p>

<pre>
$ <strong>find . -name "*.so"</strong>
&nbsp;
./0_2_15/Linux/x64/libgfortran.so
./0_2_15/Linux/x64/libquadmath.so
./0_2_15/Linux/x64/libopenblas.so
./0_2_15/Linux/x64/libgcc_s.so
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úprava prostředí pro snazší spouštění demonstračních příkladů</h2>

<p>Pro zjednodušení spuštění interpretu jazyka Lua popř.&nbsp;správce balíčků a
dalších později nainstalovaných utilit si můžete modifikovat proměnnou
prostředí <strong>PATH</strong>, a to následujícím způsobem:</p>

<pre>
$ <strong>export PATH=~/ulua/bin:~/ulua:$PATH</strong>
</pre>

<p>Od této chvíle je možné volat všechny důležité spustitelné soubory (zejména
<i>LuaJIT</i>) bez uvedení cesty:</p>

<pre>
$ <strong>lua</strong>
&nbsp;
LuaJIT 2.1.0-beta1 -- Copyright (C) 2005-2015 Mike Pall. http://luajit.org/
JIT: ON SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse

$ ./scilua 
LuaJIT Language Toolkit usage: luajit [options]... [script [args]...].

Available options are:
  -b ...    Save or list bytecode.
  -c ...    Generate Lua code and run.
            If followed by the "v" option the generated Lua code
            will be printed.
</pre>

<p>Taktéž je vhodné si upravit vámi používaný textový editor či integrované
vývojové prostředí takovým způsobem, aby se dal demonstrační příklad spustit
vhodnou klávesovou zkratkou. Příklad konfigurace textového editoru Vim:</p>

<pre>
" Settings for Lua files
"*********************************************************************
augroup __lua__
  au!
  au BufRead,BufNewFile *.lua noremap &lt;F5&gt; :!./lua %&lt;CR&gt;
  au BufRead,BufNewFile *.lua noremap &lt;F6&gt; :!./lua -i %&lt;CR&gt;
augroup END
</pre>

<p><div class="rs-tip-major">Poznámka: klávesovou zkratkou <strong>F5</strong>
se skript spustí v&nbsp;rámci interpretru LuaJITu. Klávesová zkratka
<strong>F6</strong> taktéž skript spustí, ovšem navíc po jeho dokončení zůstane
interpret aktivní, takže lze například dále zkoumat vytvořené vektory či
matice.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Práce s&nbsp;vektory a maticemi: specializované jazyky a specializované knihovny</h2>

<p>Jednou poměrně rozsáhlou (a současně i nejvíce prozkoumanou) oblastí
v&nbsp;informatice je zpracování vektorů, matic i tenzorů, protože
s&nbsp;těmito strukturami se můžeme setkat v&nbsp;různých disciplínách,
například ve finančnictví, pojišťovnictví, statistice, zpracování numerických
dat, simulacích, strojovém učení atd. Současně se jedná i o velmi zajímavou
oblast, neboť právě kvůli co nejrychlejší práci s&nbsp;velkými (skutečně
<strong>velkými</strong>) maticemi byly vytvořeny speciální výpočetní bloky
v&nbsp;některých superpočítačích (příkladem mohou být superpočítače
<i>Cray</i>). Současné knihovny dokážou v&nbsp;případě potřeby využít jak
některá rozšíření instrukčních sad (SIMD instrukce typu SSEx, původně též MMX
či 3DNow!), tak i programovatelné grafické akcelerátory (GPU).</p>

<p>Práce s&nbsp;vektory a maticemi byla (a samozřejmě doposud je) podporována
v&nbsp;překladačích FORTRANu, které začaly být po vzniku superpočítačů vybaveny
algoritmy, které dokázaly převést některé typy programových smyček na
&bdquo;vektorové operace&ldquo;. Paralelně vznikly i specializované jazyky
určené téměř výhradně pro práci s&nbsp;vektory i maticemi &ndash; typickým
příkladem z&nbsp;této oblasti jsou jazyky <i>APL</i> a <i>J</i> (oba se stále
používají).</p>

<p>V&nbsp;současnosti je používáno relativně velké množství programovacích
jazyků popř.&nbsp;specializovaných knihoven orientovaných na práci
s&nbsp;vektory, maticemi, tenzory atd. Z&nbsp;komerčních nástrojů je zapotřebí
jmenovat především známý <i>MATLAB</i> vydávaný společností <i>MathWorks</i>,
nativní práci s&nbsp;maticemi a vektory ovšem velmi dobře podporuje také
nástroj <a
href="https://www.gnu.org/software/octave/doc/interpreter/Matrices.html">GNU
Octave</a> (<a
href="https://gnu.org/software/octave/">https://gnu.org/software/octave/</a>),
<a href="https://www.root.cz/serialy/programovaci-jazyk-r/">jazyk R</a> (<a
href="http://www.r-project.org/">http://www.r-project.org/</a>) a také
relativně nový jazyk <a
href="https://www.root.cz/serialy/programovaci-jazyk-julia/">Julia</a> (<a
href="http://julialang.org/">http://julialang.org/</a>, zajímavé výsledky
benchmarků lze najít na adrese <a
href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>).
Z&nbsp;knihoven jmenujme především oblíbenou a dnes dosti intenzivně využívanou
Pythonovskou knihovnu <i>NumPy</i> (<a
href="http://www.numpy.org/">http://www.numpy.org/</a>), i když jsme se na
Rootu setkali i s&nbsp;knihovnami určenými pro další jazyky (viz též <a
href="#k19">devatenáctou kapitolu</a>).</p>

<p>Do této skupiny patří i nástroj <i>SciLua</i>, který bude popsán
v&nbsp;dalším textu i v&nbsp;navazujících článcích. Pochopitelně jsou kromě
základní práce s&nbsp;vektory a maticemi podporovány i další operace
z&nbsp;oblasti lineární algebry, statistiky atd.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Stručné představení projektu OpenBLAS</h2>

<p>Projekt <i>OpenBLAS</i> nabízí uživatelům různých programovacích jazyků (C,
Julia, Lua, Python atd.) i programátorům knihovnu založenou na
<i>GotoBLAS2</i>.  Samotná zkratka <i>BLAS</i> přitom znamená <i>Basic Linear
Algebra Subprograms</i>; jedná se tedy o různé knihovní funkce z&nbsp;oblasti
<a href="https://cs.wikipedia.org/wiki/Line%C3%A1rn%C3%AD_algebra">lineární
algebry</a>, které se mj.&nbsp;týkají operací s&nbsp;vektory a maticemi (viz
též poměrně podrobnou dokumentaci dostupnou na adrese <a
href="https://www.netlib.org/blas/">https://www.netlib.org/blas/</a>). Kromě
toho v&nbsp;projektu OpenBLAS najdeme i celou referenční implementaci slavné
knihovny <i>LAPACK</i> neboli <i>Linear Algebra Package</i> (ta původně vznikla
pro FORTRAN 77, později byla přepsána pro FORTRAN 90). V&nbsp;projektu OpenBLAS
je kromě korektnosti algoritmů a jejich numerické stability kladen důraz i na
velkou výpočetní rychlost a proto jsou jednotlivé algoritmy optimalizovány na
konkrétní hardware.</p>

<p>Podrobnější informace o tomto zajímavém projektu, který tvoří nedílnou
součást projektu SciLua, lze získat na adrese <a
href="https://github.com/xianyi/OpenBLAS/wiki">https://github.com/xianyi/OpenBLAS/wiki</a>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Knihovna <strong>sci.alg</strong></h2>

<p>První knihovnou z&nbsp;projektu <i>SciLua</i>, kterou se budeme zabývat, je
knihovna nazvaná <i>sci.alg</i>. V&nbsp;této knihovně nalezneme především
konstruktory vektorů a matic, dále funkce určené pro konverzní operace mezi
tabulkami a vektory/maticemi (i opačně) a v&nbsp;neposlední řadě taktéž některé
základní operace s&nbsp;těmito datovými strukturami. Přitom platí, že interní
struktura vektorů a matic je vytvořena takovým způsobem, aby byla plně
kompatibilní s&nbsp;nativní knihovnou <i>OpenBLAS</i> zmíněnou <a
href="#k06">v&nbsp;předchozí kapitole</a> (a to včetně podpory takových
datových typů, které programovací jazyk Lua přímo nepodporuje &ndash; například
se to týká bajtů, 16bitových celých čísel atd.).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Import knihovny <strong>sci.alg</strong></h2>

<p>V&nbsp;programovacím jazyku Lua se knihovny importují funkcí nazvanou
<strong>require</strong>, viz například oficiální dokumentaci k&nbsp;této
funkci dostupnou na adrese <a
href="http://www.lua.org/manual/5.4/manual.html#pdf-require">http://www.lua.org/manual/5.4/manual.html#pdf-require</a>.
Teoreticky by tedy měl import knihovny <i>sci.alg</i> proběhnout následujícím
způsobem:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 1:</i>
<i>-- Načtení knihovny "sci.alg" bez přiřazení výsledku do proměnné</i>
<i>--</i>
&nbsp;
<strong>require "sci.alg"</strong>
&nbsp;
<i>-- finito</i>
</pre>

<p>Ve skutečnosti ovšem knihovna <i>sci-alg</i>, na rozdíl od některých dalších
knihoven, nepřidává do globálního jmenného prostoru (resp.&nbsp;přesněji řečeno
do prostředí &ndash; <i>environment</i>) žádné další symboly a tedy ani žádné
nové funkce. O tom se ostatně můžeme velmi snadno přesvědčit výpisem všech
globálních symbolů před importem knihovny <i>sci.alg</i> a ihned po importu
této knihovny:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 2:</i>
<i>-- Výpis globálních symbolů před i po načtení knihovny "sci.alg"</i>
<i>--</i>
&nbsp;
print "\nBefore 'require'\n"
&nbsp;
for k, v in pairs(_G) do
    print(k, v)
end
&nbsp;
<strong>require "sci.alg"</strong>
&nbsp;
print "\nAfter 'require'\n"
&nbsp;
for k, v in pairs(_G) do
    print(k, v)
end
&nbsp;
<i>-- finito</i>
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<pre>
Before 'require'
&nbsp;
coroutine         table: 0x40809758
assert            function: builtin#2
tostring          function: builtin#18
tonumber          function: builtin#17
io                table: 0x4080ac98
rawget            function: builtin#12
xpcall            function: builtin#21
arg               table: 0x41779508
ipairs            function: builtin#7
print             function: builtin#29
pcall             function: builtin#20
gcinfo            function: builtin#26
module            function: 0x40809e88
setfenv           function: builtin#11
pairs             function: builtin#5
jit               table: 0x4080d618
bit               table: 0x4080d050
package           table: 0x40809af0
error             function: builtin#19
debug             table: 0x4080ca38
loadfile          function: builtin#22
rawequal          function: builtin#14
loadstring        function: builtin#24
rawset            function: builtin#13
unpack            function: builtin#15
table             table: 0x4080a238
require           function: 0x40822580
_VERSION          Lua 5.1
newproxy          function: builtin#28
collectgarbage    function: builtin#27
dofile            function: builtin#25
next              function: builtin#4
math              table: 0x4080bdb8
load              function: builtin#23
os                table: 0x4080b1d8
_G                table: 0x408079a0
select            function: builtin#16
string            table: 0x4080b6b8
type              function: builtin#3
getmetatable      function: builtin#8
getfenv           function: builtin#10
setmetatable      function: builtin#9
&nbsp;
After 'require'
&nbsp;
coroutine         table: 0x40809758
assert            function: builtin#2
tostring          function: builtin#18
tonumber          function: builtin#17
io                table: 0x4080ac98
rawget            function: builtin#12
xpcall            function: builtin#21
arg               table: 0x41779508
ipairs            function: builtin#7
print             function: builtin#29
pcall             function: builtin#20
gcinfo            function: builtin#26
module            function: 0x40809e88
setfenv           function: builtin#11
pairs             function: builtin#5
jit               table: 0x4080d618
bit               table: 0x4080d050
package           table: 0x40809af0
error             function: builtin#19
debug             table: 0x4080ca38
loadfile          function: builtin#22
rawequal          function: builtin#14
loadstring        function: builtin#24
rawset            function: builtin#13
unpack            function: builtin#15
table             table: 0x4080a238
require           function: 0x40822580
_VERSION          Lua 5.1
newproxy          function: builtin#28
collectgarbage    function: builtin#27
dofile            function: builtin#25
next              function: builtin#4
math              table: 0x4080bdb8
load              function: builtin#23
os                table: 0x4080b1d8
_G                table: 0x408079a0
select            function: builtin#16
string            table: 0x4080b6b8
type              function: builtin#3
getmetatable      function: builtin#8
getfenv           function: builtin#10
setmetatable      function: builtin#9
</pre>

<p><div class="rs-tip-major">Poznámka: snadno lze zjistit, že obě vypsané
tabulky s&nbsp;globálními symboly jsou naprosto totožné. Ve skutečnosti je však
možné, aby <strong>require sci.alg</strong> <i>změnilo</i> definici některých
funkcí &ndash; to již tak snadno nelze zjistit.</div></p>

<p>Jak se tedy má provést korektní import knihovny <i>sci.alg</i>? Musíme
&bdquo;zachytit&ldquo; výsledek volání funkce <strong>require</strong> a použít
symboly, které jsou ve vrácené tabulce obsaženy. Tyto symboly typicky
představují volatelné funkce. Opět si to vyzkoušejme na jednoduchém
skriptu:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 3:</i>
<i>-- Načtení knihovny "sci.alg", uložení a zobrazení vrácené hodnoty</i>
<i>--</i>
&nbsp;
<strong>alg = require "sci.alg"</strong>
&nbsp;
print "Imported symbols\n"
&nbsp;
for k, n in pairs(alg) do
    print(k,n)
end
&nbsp;
<i>-- finito</i>
</pre>

<p>Po spuštění tohoto skriptu se nyní vypíše celkem třináct importovaných
symbolů:</p>

<pre>
Imported symbols
&nbsp;
pow     function: 0x40726450
vec     function: 0x40696720
arrayct ctype&lt;struct 1520&gt;
prod    function: 0x407264d8
typeof  function: 0x404397f0
mat     function: 0x40696768
tovec   function: 0x40696790
__      table: 0x4073c560
trace   function: 0x407264f8
sum     function: 0x407264b8
tomat   function: 0x406967d8
join    function: 0x41674fa0
mul     function: 0x407313e8
</pre>

<p><div class="rs-tip-major">Poznámka: je pochopitelně možné si tyto symboly
(resp.&nbsp;funkce) zpřístupnit na globální úrovni přiřazením do tabulky
<strong>_G</strong>, ovšem to může později vést ke konfliktu jmen (ovšem již
samotná existence této možnosti napovídá, jak mocný je ve skutečnosti runtime
systém programovacího jazyka Lua).</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Konstrukce jednorozměrného vektoru</h2>

<p>Pro konstrukci jednorozměrného vektoru slouží funkce nazvaná
<strong>vec</strong>. Této funkci je nutné předat počet prvků, které má vektor
obsahovat. Vytvořený vektor bude v&nbsp;takovém případě obsahovat zadaný počet
nulových prvků. Vektor, resp.&nbsp;přesněji řečeno obsah prvků vektoru, lze
vypsat standardní funkcí <strong>print</strong>:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 4:</i>
<i>-- Vytvoření (jednorozměrného) vektoru</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
<i>-- alokace vektoru</i>
vec = <strong>alg.vec(10)</strong>
&nbsp;
print "Vector value\n"
print(vec)
&nbsp;
<i>-- finito</i>
</pre>

<p>Po spuštění tohoto příkladu by se mělo vypsat deset nulových prvků:</p>

<pre>
Vector value
&nbsp;
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto případě mají všechny prvky
vektoru typ <strong>double</strong>, ovšem ve skutečnosti mohou být i jiného
typu podporovaného přes FFI (rozhraní pro volání funkcí z&nbsp;nativních
knihoven).</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Modifikace prvků vektoru</h2>

<p>Pro přístup k&nbsp;prvkům vektoru &ndash; a to jak pro čtení, tak i pro
zápis &ndash; se používají běžné &bdquo;indexové&ldquo; závorky, stejně jako
při přístupu k&nbsp;prvkům tabulek (což je v&nbsp;programovacím jazyce Lua
jediný strukturovaný datový typ). Musíme však mít stále na paměti, že index
<i>prvního</i> prvku vektoru je skutečně roven <i>jedničce</i>. To se sice může
zdát poněkud neobvyklé, ovšem ve skutečnosti mnoho jazyků (dovolím si říci, že
většina jazyků NEodvozených od céčka) zvolilo stejný přístup: Fortran,
Mathematica, R, MATLAB, Julia:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 5:</i>
<i>-- Vytvoření (jednorozměrného) vektoru, inicializace prvků</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
<i>-- alokace vektoru</i>
vec = alg.vec(10)
&nbsp;
<i>-- naplnění prvků vektoru</i>
for i = 1, 10 do
    <strong>vec[i] = 1/i</strong>
end
&nbsp;
print "Vector value\n"
print(vec)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledkem po spuštění tohoto skriptu by tedy měly být hodnoty deseti prvků
vektoru, které již ovšem nejsou nulové:</p>

<pre>
Vector value
&nbsp;
+1.000000
+0.500000
+0.333333
+0.250000
+0.200000
+0.166667
+0.142857
+0.125000
+0.111111
+0.100000
</pre>

<p><div class="rs-tip-major">Poznámka: některé knihovny a jazyky volí odlišnou
strategii &ndash; vektory a matice jsou neměnitelné neboli <i>immutable</i>. To
však není případ nástroje <i>SciLua</i>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Konverze tabulky na vektor, specifikace typu prvků při převodu</h2>

<p>Vektor lze snadno zkonstruovat i konverzí tabulky, tj.&nbsp;základního
datového typu programovacího jazyka Lua. V&nbsp;následujícím demonstračním
příkladu je nejprve vytvořena tabulka s&nbsp;pěti prvky, která je následně
převedena na vektor funkcí <strong>tovec</strong>:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 6:</i>
<i>-- Vytvoření (jednorozměrného) vektoru z tabulky</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
t = <strong>{1, 2, 3, 4, 5}</strong>
&nbsp;
<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = <strong>alg.tovec(t)</strong>
&nbsp;
print "Vector value\n"
print(vec)
&nbsp;
<i>-- finito</i>
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
Vector value
&nbsp;
+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
</pre>

<p>Při převodu ovšem můžeme specifikovat datový typ prvků vektoru, což je někdy
žádoucí, například při zpracování zvukových dat či obrázků (tedy rastrových
dat). K&nbsp;tomuto účelu se používá funkce <strong>typeof</strong>, které se
předá jméno datového typu (podle FFI):</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 7:</i>
<i>-- Specifikace typů prvků vektoru: 8bitová celá čísla</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
t = {0, 1, 2, 3, 4, 100, 127, 128, 129, 255}
&nbsp;
<i>-- konstruktor vektoru daného typu</i>
int8vec = <strong>alg.typeof("int8_t").tovec</strong>
&nbsp;
<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = int8vec(t)
&nbsp;
print "Vector value\n"
print(vec)
&nbsp;
<i>-- finito</i>
</pre>

<p>V&nbsp;předchozím příkladu jsme si vynutili použití datového typu
<strong>int8_t</strong>, což vede k&nbsp;přetečení při konverzi některých
hodnot:</p>

<pre>
Vector value
&nbsp;
+0.000000
+1.000000
+2.000000
+3.000000
+4.000000
+100.0000
+127.0000
-128.0000
-127.0000
-1.000000
</pre>

<p>Abychom zabránili přetečení při konverzi, můžeme zvolit 16bitová celá čísla
(často používáno například u vstupních audio dat):</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 8:</i>
<i>-- Specifikace typů prvků vektoru: 16bitová celá čísla</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
t = {0, 1, 2, 3, 4, 100, 127, 128, 129, 255}
&nbsp;
<i>-- konstruktor vektoru daného typu</i>
int16vec = <strong>alg.typeof("int16_t").tovec</strong>
&nbsp;
<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = int16vec(t)
&nbsp;
print "Vector value\n"
print(vec)
&nbsp;
<i>-- finito</i>
</pre>

<p>Nyní bude výsledek odlišný:</p>

<pre>
Vector value
&nbsp;
+0.000000
+1.000000
+2.000000
+3.000000
+4.000000
+100.0000
+127.0000
+128.0000
+129.0000
+255.0000
</pre>

<p>Podporován je i pravdivostní typ <strong>bool</strong>, čehož se využívá při
konstrukci vektorů tvořících nějakou masku:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 9:</i>
<i>-- Specifikace typů prvků vektoru: pravdivostní hodnoty</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
t = {0, 1, 2, 3, 4, 100, 127, 128, 129, 255}
&nbsp;
<i>-- konstruktor vektoru daného typu</i>
boolvec = <strong>alg.typeof("bool").tovec</strong>
&nbsp;
<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = boolvec(t)
&nbsp;
print "Vector value\n"
print(vec)
&nbsp;
<i>-- finito</i>
</pre>

<p>Nyní bude výsledek vypadat odlišně &ndash; nulová hodnota je převedena na
<strong>false</strong>, ostatní hodnoty na <strong>true</strong>:</p>

<pre>
Vector value
&nbsp;
    false
     true
     true
     true
     true
     true
     true
     true
     true
     true
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zpětný převod vektoru na tabulku</h2>

<p>Vektor &ndash; ať již vytvořený jakýmkoli způsobem &ndash; je možné převést
zpět na tabulku, a to konkrétně <i>metodou</i> nazvanou
<strong>totable</strong> (nejedná se tedy o funkci &ndash; pozor na odlišnou
syntaxi volání):</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 10:</i>
<i>-- Převod vektoru zpět na tabulku</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
t = {0, 1, 2, 3, 4, 100, 127, 128, 129, 255}
&nbsp;
<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = alg.tovec(t)
&nbsp;
print "Vector value\n"
print(vec)
&nbsp;
<i>-- převod vektoru zpět na tabulku</i>
t2 = <strong>vec:totable()</strong>
&nbsp;
print "Table conent\n"
for k, v in pairs(t2) do
    print(k, v)
end
&nbsp;
<i>-- finito</i>
</pre>

<p>Povšimněte si, že výsledná tabulka obsahuje jako své prvky další
tabulky:</p>

<pre>
Vector value
&nbsp;
+0.000000
+1.000000
+2.000000
+3.000000
+4.000000
+100.0000
+127.0000
+128.0000
+129.0000
+255.0000
&nbsp;
Table conent
&nbsp;
1       table: 0x40518418
2       table: 0x405184e0
3       table: 0x40518588
4       table: 0x40518640
5       table: 0x405186e8
6       table: 0x405187c0
7       table: 0x40518868
8       table: 0x40518910
9       table: 0x405189b8
10      table: 0x40518ab0
</pre>

<p>Aby se zobrazily skutečné hodnoty prvků vektoru převedeného na tabulku
(obsahující další tabulky), je nutné zdrojový kód demonstračního příkladu
nepatrným způsobem upravit &ndash; viz zvýrazněný řádek:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 11:</i>
<i>-- Převod vektoru zpět na tabulku, tisk prvního prvku každé podtabulky</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
t = {0, 1, 2, 3, 4, 100, 127, 128, 129, 255}
&nbsp;
<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = alg.tovec(t)
&nbsp;
print "Vector value\n"
print(vec)
&nbsp;
<i>-- převod vektoru zpět na tabulku</i>
t2 = vec:totable()
&nbsp;
print "Table conent\n"
for k, v in pairs(t2) do
    <strong>print(k, v[1])</strong>
end
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledek bude nyní odpovídat očekávání:</p>

<pre>
Vector value
&nbsp;
+0.000000
+1.000000
+2.000000
+3.000000
+4.000000
+100.0000
+127.0000
+128.0000
+129.0000
+255.0000
&nbsp;
Table conent
&nbsp;
1       0
2       1
3       2
4       3
5       4
6       100
7       127
8       128
9       129
10      255
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vytvoření nulové matice m&times;n</h2>

<p>Kromě jednorozměrných vektorů lze v&nbsp;nástroji <i>SciLua</i> pracovat i
s&nbsp;maticemi. Ty se zkonstruují funkcí <strong>mat</strong>, které se předá
počet řádků a počet sloupců matice (v&nbsp;tomto pořadí):</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 12:</i>
<i>-- Vytvoření matice 3x4 prvků</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
<i>-- alokace matice: 3 řádky, 4 sloupce</i>
mat = <strong>alg.mat(3, 4)</strong>
&nbsp;
print "Matrix value\n"
print(mat)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledná matice bude mít rozměry 3&times;4 a všechny prvky nulové:</p>

<pre>
Matrix value
&nbsp;
+0.000000,+0.000000,+0.000000,+0.000000
+0.000000,+0.000000,+0.000000,+0.000000
+0.000000,+0.000000,+0.000000,+0.000000
</pre>

<p>Celkový počet prvků matice se získá standardním operátorem
<strong>#</strong>. Vytvořit lze i matici s&nbsp;nulovým počtem řádků:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 13:</i>
<i>-- Vytvoření matice 0x4 prvků</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
<i>-- alokace matice: žádné řádky, (teoreticky) 4 sloupce</i>
mat = <strong>alg.mat(0, 4)</strong>
&nbsp;
<i>-- počet prvků</i>
print(#mat)
&nbsp;
print "Matrix value\n"
print(mat)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledek:</p>

<pre>
0
Matrix value
</pre>

<p>Pracovat lze i s&nbsp;maticemi, které mají nulový počet sloupců (ovšem
několik řádků):</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 14:</i>
<i>-- Vytvoření matice 3x0 prvků</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
<i>-- alokace matice: tři řádky, (teoreticky) žádné sloupce</i>
mat = <strong>alg.mat(3, 0)</strong>
&nbsp;
<i>-- počet prvků</i>
print(#mat)
&nbsp;
print "Matrix value\n"
print(mat)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledek:</p>

<pre>
0
Matrix value
&nbsp;
&nbsp;
&nbsp;
</pre>

<p><div class="rs-tip-major">Poznámka: skript korektně vytiskl prázdné
řádky.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Konstrukce matice z&nbsp;tabulky</h2>

<p>Víme již, že s&nbsp;využitím funkce nazvané <strong>tovec</strong> je možné
převést tabulku (tedy základní datový typ programovacího jazyka Lua) na vektor.
Podobně existuje i funkce pojmenovaná <strong>tomat</strong> (ne
<strong>tomato</strong>!) určená pro převod tabulky do matice. Rozměry matice
jsou odvozeny od počtu prvků tabulky a taktéž počtu prvků v&nbsp;jednotlivých
podtabulkách. Praktické použití je snadné (povšimněte si konstruktoru
tabulky):</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 15:</i>
<i>-- Vytvoření matice z tabulky</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
<i>-- běžná tabulka jazyka Lua</i>
tbl = {{1,  2,  3,  4},
       {5,  6,  7,  8},
       {9, 10, 11, 12}}
&nbsp;
<i>-- konverze tabulky na matici</i>
mat = <strong>alg.tomat(tbl)</strong>
&nbsp;
<i>-- počet prvků</i>
print(#mat)
&nbsp;
print "Matrix value\n"
print(mat)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledkem konverze bude matice s&nbsp;dvanácti prvky, třemi řádky a čtyřmi
sloupci:</p>

<pre>
12
Matrix value
&nbsp;
+1.000000,+2.000000,+3.000000,+4.000000
+5.000000,+6.000000,+7.000000,+8.000000
+9.000000,+10.00000,+11.00000,+12.00000
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Chyby při převodu tabulky obsahující hodnoty neočekávaného datového typu</h2>

<p>Tabulka je, na rozdíl od vektoru či matice, <i>heterogenní</i> datová
struktura, což znamená, že její prvky mohou být libovolného typu. Tato
flexibilita je často využívána (tabulky totiž v&nbsp;jazyku Lua slouží i jako
náhrada za struktury/záznamy, protože podporují tečkovou notaci), ovšem pokus o
převod takové tabulky na vektor nebo matici skončí běhovou chybou, což si
ostatně můžeme velmi snadno vyzkoušet:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 16:</i>
<i>-- Pokus o vytvoření matice z tabulky, která obsahuje prvek typu řetězec</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
<i>-- běžná tabulka jazyka Lua</i>
tbl = {{1,  2,  3,  4},
       {5,  6,  7,  8},
       {9, 10, 11, <strong>"foobar"</strong>}}
&nbsp;
<i>-- konverze tabulky na matici</i>
mat = <strong>alg.tomat(tbl)</strong>
&nbsp;
<i>-- počet prvků</i>
print(#mat)
&nbsp;
print "Matrix value\n"
print(mat)
&nbsp;
<i>-- finito</i>
</pre>

<p>Hodnota &bdquo;foobar&ldquo; zajisté není numerická hodnota a z&nbsp;tohoto
důvodu dojde při pokusu o konverzi na matici k&nbsp;běhové chybě:</p>

<pre>
/home/ptisnovs/ulua/luajit/2_1_head20151128/Linux/x64/luajit: /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:632: cannot convert 'string' to 'double'
stack traceback:
        /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:632: in function '__newindex'
        /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:763: in function 'tomat'
        16_matrix_from_table.lua:19: in main chunk
        [C]: at 0x004057d0
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Získání základních informací o matici, převod matice na řetězec</h2>

<p>O matici (ale i o vektoru) můžeme získat základní informace s&nbsp;využitím
standardního operátoru # a taktéž metod (nikoli funkcí!) pojmenovaných
<strong>nrow</strong> a <strong>ncol</strong>:</p>

<table>
<tr><th>#</th><th>Výraz</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>#mat</td><td>vrátí celkový počet prvků matice nebo vektoru</td></tr>
<tr><td>2</td><td>mat:nrow()</td><td>vrátí počet řádků matice</td></tr>
<tr><td>3</td><td>mat:ncol()</td><td>vrátí počet sloupců matice</td></tr>
</table>

<p>Jen ve stručnosti si nyní ukažme použití těchto tří výrazů pro
zkonstruovanou matici:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 17:</i>
<i>-- Získání základních informací o matici</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
<i>-- běžná tabulka jazyka Lua</i>
tbl = {{1,  2,  3,  4},
       {5,  6,  7,  8},
       {9, 10, 11, 12}}
&nbsp;
<i>-- konverze tabulky na matici</i>
mat = alg.tomat(tbl)
&nbsp;
<i>-- počet prvků, sloupců a řádků</i>
print("Items:", <strong>#mat</strong>)
print("Rows: ", <strong>mat:nrow()</strong>)
print("Cols: ", <strong>mat:ncol()</strong>)
&nbsp;
<i>-- finito</i>
</pre>

<p>Výsledek získaný po spuštění tohoto skriptu nebude nijak překvapující:</p>

<pre>
Items:  12
Rows:   3
Cols:   4
</pre>

<p>Vektory i matice lze převést na řetězec funkcí <strong>tostring</strong>.
Demonstrační příklad s&nbsp;převodem vektoru jsme si již ukázali, takže nám
zbývá se podívat na způsob převodu matice na řetězec. Je to snadné:</p>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 18:</i>
<i>-- Konverze matice na řetězec</i>
<i>--</i>
&nbsp;
alg = require "sci.alg"
&nbsp;
<i>-- běžná tabulka jazyka Lua</i>
tbl = {{1,  2,  3,  4},
       {5,  6,  7,  8},
       {9, 10, 11, 12}}
&nbsp;
<i>-- konverze tabulky na matici</i>
mat = alg.tomat(tbl)
&nbsp;
<i>-- konverze na řetězec</i>
s = <strong>tostring(mat)</strong>
print "Matrix as string\n"
print(s)
&nbsp;
<i>-- finito</i>
</pre>

<p>Tento skript po svém spuštění vypíše dva řetězce &ndash; zprávu a obsah
matice převedený na řetězec:</p>

<pre>
Matrix as string
&nbsp;
+1.000000,+2.000000,+3.000000,+4.000000
+5.000000,+6.000000,+7.000000,+8.000000
+9.000000,+10.00000,+11.00000,+12.00000
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah následujícího článku</h2>

<p>Nyní již umíme zkonstruovat vektory i matice, takže si v&nbsp;navazujícím
článku ukážeme, jaké operace je možné s&nbsp;těmito velmi důležitými datovými
strukturami provádět. Zabývat se v&nbsp;tomto kontextu budeme i knihovnou
<strong>sci-lang</strong>, která rozšiřuje syntaxi (a tím pádem i sémantiku)
programovacího jazyka Lua &ndash; zavádí totiž do jazyka nové operandy
(resp.&nbsp;přetěžuje význam těch existujících) určené právě pro zpracování
vektorů a matic.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady určené pro kombinaci interpretru
<i>LuaJIT</i> a projekt <i>SciLua</i> byly uloženy do Git repositáře, který je
dostupný na adrese <a
href="https://github.com/tisnik/scientific-lua">https://github.com/tisnik/scientific-lua</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes prozatím malý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis příkladu</th><th>Adresa (zdrojový kód)</th></tr>
<tr><td> 1</td><td>01_bare_require.lua</td><td>chování příkazu <strong>require "sci.alg"</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/01_bare_require.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/01_bare_require.lua</a></td></tr>
<tr><td> 2</td><td>02_environment.lua</td><td>výpis globálních symbolů před a po použití příkazu <strong>require "sci.alg"</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/02_environment.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/02_environment.lua</a></td></tr>
<tr><td> 3</td><td>03_require_return_value.lua</td><td>funkce a další objekty vrácené příkazem <strong>require "sci.alg"</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/03_require_return_value.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/03_require_return_value.lua</a></td></tr>
<tr><td> 4</td><td>04_vector_of_zeros.lua</td><td>konstrukce vektoru se specifikovaným počtem prvků (prvky jsou nulové)</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/04_vector_of_zeros.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/04_vector_of_zeros.lua</a></td></tr>
<tr><td> 5</td><td>05_vector_values.lua</td><td>modifikace prvků vektoru standardním &bdquo;index&ldquo; operátorem</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/05_vector_values.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/05_vector_values.lua</a></td></tr>
<tr><td> 6</td><td>06_vector_from_table.lua</td><td>konstrukce vektoru z&nbsp;tabulky (konverze)</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/06_vector_from_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/06_vector_from_table.lua</a></td></tr>
<tr><td> 7</td><td>07_vector_type_int8.lua</td><td>specifikace typu prvků vektoru a prováděné konverze datového typu <strong>int8</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/07_vector_type_int8.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/07_vector_type_int8.lua</a></td></tr>
<tr><td> 8</td><td>08_vector_type_int16.lua</td><td>specifikace typu prvků vektoru a prováděné konverze datového typu <strong>int16</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/08_vector_type_int16.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/08_vector_type_int16.lua</a></td></tr>
<tr><td> 9</td><td>09_vector_type_bool.lua</td><td>specifikace typu prvků vektoru a prováděné konverze datového typu <strong>bool</strong></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/09_vector_type_bool.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/09_vector_type_bool.lua</a></td></tr>
<tr><td>10</td><td>10_vector_to_table.lua</td><td>konverze prvků vektoru do tabulky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/10_vector_to_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/10_vector_to_table.lua</a></td></tr>
<tr><td>11</td><td>11_print_first_items_of_subtables.lua</td><td>výpis prvních prvků z&nbsp;podtabulek po konverzi</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/11_print_first_items_of_subtables.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/11_print_first_items_of_subtables.lua</a></td></tr>
<tr><td>12</td><td>12_matrix_of_zeros_3x4.lua</td><td>konstrukce matice 3&times;4 prvky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/12_matrix_of_zeros_3x4.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/12_matrix_of_zeros_3x4.lua</a></td></tr>
<tr><td>13</td><td>13_matrix_of_zeros_0x4.lua</td><td>konstrukce matice 0&times;4 prvky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/13_matrix_of_zeros_0x4.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/13_matrix_of_zeros_0x4.lua</a></td></tr>
<tr><td>14</td><td>14_matrix_of_zeros_3x0.lua</td><td>konstrukce matice 3&times;0 prvky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/14_matrix_of_zeros_3x0.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/14_matrix_of_zeros_3x0.lua</a></td></tr>
<tr><td>15</td><td>15_matrix_from_table.lua</td><td>konstrukce matice z&nbsp;tabulky</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/15_matrix_from_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/15_matrix_from_table.lua</a></td></tr>
<tr><td>16</td><td>16_matrix_from_table.lua</td><td>konstrukce matice z&nbsp;tabulky pokud prvky mají nevhodný typ</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/16_matrix_from_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/16_matrix_from_table.lua</a></td></tr>
<tr><td>17</td><td>17_matrix_size.lua</td><td>vytištění velikosti matice, počtu prvků matice atd.</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/17_matrix_size.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/17_matrix_size.lua</a></td></tr>
<tr><td>18</td><td>18_matrix_tostring.lua</td><td>převod matice na řetězec</td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/18_matrix_tostring.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/18_matrix_tostring.lua</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na relevantní články a seriály na Rootu</h2>

<p>S&nbsp;technologiemi souvisejícími s&nbsp;programovacím jazykem Lua,
LuaJITem, ale i s&nbsp;jazyky a knihovnami určenými pro práci s&nbsp;vektory,
maticemi, lineární algebrou atd. jsme se již na stránkách Roota několikrát
setkali. Následují odkazy na více či méně relevantní články k&nbsp;dnes
probíranému tématu:</p>

<ol>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Seriál Torch: framework pro strojové učení<br />
<a href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/</a>
</li>

<li>Seriál Programovací jazyk Julia<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-julia/">https://www.root.cz/serialy/programovaci-jazyk-julia/</a>
</li>

<li>Seriál Programovací jazyk R<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-r/">https://www.root.cz/serialy/programovaci-jazyk-r/</a>
</li>

<li>Skriptovací jazyk Lua v&nbsp;aplikacích naprogramovaných v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/">https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/</a>
</li>

<li>Jupyter Notebook &ndash; nástroj pro programátory, výzkumníky i lektory<br />
<a href="https://www.root.cz/clanky/jupyter-notebook-nastroj-pro-programatory-vyzkumniky-i-lektory/">https://www.root.cz/clanky/jupyter-notebook-nastroj-pro-programatory-vyzkumniky-i-lektory/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s&nbsp;vektory a maticemi<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">https://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programování mainframů: jazyk APL<br />
<a href="https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/">https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/</a>
</li>

<li>Programovací jazyk APL: programování bez smyček<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/">https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/</a>
</li>

<li>Programovací jazyk APL &ndash; dokončení<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/</a>
</li>

<li>Incanter: prostředí pro statistické výpočty s&nbsp;grafickým výstupem založené na Clojure<br />
<a href="https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/">https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/</a>
</li>

<li>Incanter: operace s&nbsp;maticemi<br />
<a href="https://www.root.cz/clanky/incanter-operace-s-maticemi/">https://www.root.cz/clanky/incanter-operace-s-maticemi/</a>
</li>

<li>Tvorba jednoduchých grafů v&nbsp;systému Incanter<br />
<a href="https://www.root.cz/clanky/tvorba-jednoduchych-grafu-v-systemu-incanter/">https://www.root.cz/clanky/tvorba-jednoduchych-grafu-v-systemu-incanter/</a>
</li>

<li>Tvorba grafů v&nbsp;systému Incanter (pokračování)<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-v-systemu-incanter-pokracovani/">https://www.root.cz/clanky/tvorba-grafu-v-systemu-incanter-pokracovani/</a>
</li>

<li>Gophernotes: kombinace interaktivního prostředí Jupyteru s jazykem Go <br />
<a href="https://www.root.cz/clanky/gophernotes-kombinace-interaktivniho-prostredi-jupyteru-s-jazykem-go/">https://www.root.cz/clanky/gophernotes-kombinace-interaktivniho-prostredi-jupyteru-s-jazykem-go/</a>
</li>

<li>Popis vybraných balíčků nabízených projektem Gonum <br />
<a href="https://www.root.cz/clanky/popis-vybranych-balicku-nabizenych-projektem-gonum/">https://www.root.cz/clanky/popis-vybranych-balicku-nabizenych-projektem-gonum/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>SciLua: Scientific Computing with LuaJIT<br />
<a href="https://scilua.org/">https://scilua.org/</a>
</li>

<li>Knihovna lua-sci na GitHubu<br />
<a href="https://github.com/stepelu/lua-sci">https://github.com/stepelu/lua-sci</a>
</li>

<li>Nástroj lua-sci-lang na GitHubu<br />
<a href="https://github.com/stepelu/lua-sci-lang">https://github.com/stepelu/lua-sci-lang</a>
</li>

<li>ULua: Universal Lua Distribution<br />
<a href="https://ulua.io/index.html">https://ulua.io/index.html</a>
</li>

<li>LuaRocks<br />
<a href="https://luarocks.org/">https://luarocks.org/</a>
</li>

<li>Awesome Lua &ndash; A curated list of quality Lua packages and resources.<br />
<a href="https://github.com/LewisJEllis/awesome-lua">https://github.com/LewisJEllis/awesome-lua</a>
</li>

<li>LuaJIT<br />
<a href="https://luajit.org/">https://luajit.org/</a>
</li>

<li>Running LuaJIT<br />
<a href="https://luajit.org/running.html">https://luajit.org/running.html</a>
</li>

<li>LuaJIT na GitHubu<br />
<a href="https://github.com/luajit">https://github.com/luajit</a>
</li>

<li>Lua Implementations<br />
<a href="http://lua-users.org/wiki/LuaImplementations">http://lua-users.org/wiki/LuaImplementations</a>
</li>

<li>Archived | Embed Lua for scriptable apps<br />
<a href="https://developer.ibm.com/tutorials/l-embed-lua/">https://developer.ibm.com/tutorials/l-embed-lua/</a>
</li>

<li>Embedding Lua<br />
<a href="https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml">https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml</a>
</li>

<li>The R Project for Statistical Computing<br />
<a href="https://www.r-project.org/">https://www.r-project.org/</a>
</li>

<li>An Introduction to R<br />
<a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf">https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf</a>
</li>

<li>R (programming language)<br />
<a href="https://en.wikipedia.org/wiki/R_(programming_language)">https://en.wikipedia.org/wiki/R_(programming_language)</a>
</li>

<li>The R Programming Language<br />
<a href="https://www.tiobe.com/tiobe-index/r/">https://www.tiobe.com/tiobe-index/r/</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>OpenBLAS: An optimized BLAS library<br />
<a href="https://www.openblas.net/">https://www.openblas.net/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

