<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku o programovacím jazyku Lua se začneme věnovat projektu SciLua. Tento projekt lze s určitou dávkou zobecnění považovat za obdobu knihoven Numpy a SciPy pro Python. To je užitečné, zejména proto, že práce s klasickými poli jazyka Lua není a nemůže být tak efektivní, jako při použití nativních knihoven.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. Instalace balíčku <strong>sci</strong> a <strong>sci-lang</strong> s&nbsp;využitím nástroje ULua</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. Práce s&nbsp;vektory a maticemi: specializované jazyky a specializované knihovny</a></p>
<p><a href="#k06">*** 6. Stručné představení projektu OpenBLAS</a></p>
<p><a href="#k07">*** 7. Knihovna <strong>sci-alg</strong></a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Odkazy na relevantní články a seriály na Rootu</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace balíčku <strong>sci</strong> a <strong>sci-lang</strong> s&nbsp;využitím nástroje ULua</h2>

<p></p>

<pre>
$ <strong>./upkg status</strong>
&nbsp;
Installed modules:
+ cURL         | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ clib_libcurl | free and easy-to-use client-side URL transfer library                | 7.42.1-3
+ lcurl        | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ lfs          | luafilesystem : File System Library for the Lua Programming Language | 1.6.3-203
+ luajit       | LuaJIT: Just-In-Time Compiler (JIT) for Lua                          | 2.1.head20151128
+ pkg          | ULua package manager                                                 | 1.0.beta10
+ serpent      | serpent : Lua serializer and pretty printer                          | 0.28-103
</pre>

<pre>
$ <strong>./upkg available |grep sci</strong>
&nbsp;
+ adoc_cmd_ext              | adoc_cmd_ext : A library and script to handle AsciiDoc Command language extens.. | 0.1.0-3
+ ascii85                   | lascii85 : An ASCII85 library for Lua                                            | 20120927-103
+ printable_chars           | printable_chars : Functions to get the ascii printable chars from a byte string. | 0.1-403, 0.1-203
+ sci                       | general purpose scientific computing library                                     | 1.0.beta12, 1.0.beta11, 1.0.beta10, 1.0.beta9
+ sci-lang                  | Syntax extensions to LuaJIT for scientific computing                             | 1.0.beta10
</pre>

$ <strong>./upkg available sci</strong>

Module information:
name        : sci
version     : 1.0.beta12
require     : clib_libopenblas~0.2.15, luajit~2.0, xsys~1.0
description : general purpose scientific computing library
homepage    : http://scilua.org
license     : MIT &lt;http://opensource.org/licenses/MIT&gt;

$ .<strong>/upkg available sci-lang</strong>

Module information:
name        : sci-lang
version     : 1.0.beta10
require     : luajit~2.0, sci~1.0.beta10
description : Syntax extensions to LuaJIT for scientific computing
homepage    : https://github.com/stepelu/lua-sci-lang
license     : MIT/X11

$ <strong>./upkg add sci</strong>
Installing matching module and its requirements:
+ clib_libopenblas | OpenBLAS : An optimized BLAS library         | 0.2.15
+ sci              | general purpose scientific computing library | 1.0.beta12
+ xsys             | extended Lua system                          | 1.0.2
Confirm (y/n)? y
Downloading:
+ /pkg/clib_libopenblas/0.2.15 | 100% of 50729KB
+ /pkg/sci/1.0.beta12          | 100% of 663KB
+ /pkg/xsys/1.0.2              | 100% of 5KB
Done

$ <strong>./upkg add sci-lang</strong>

Installing matching module and its requirements:
+ sci-lang | Syntax extensions to LuaJIT for scientific computing | 1.0.beta10
Confirm (y/n)? y
Downloading:
+ /pkg/sci-lang/1.0.beta10 | 100% of 54KB
Done

$ <strong>./upkg status</strong>
&nbsp;
Installed modules:
+ cURL             | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ clib_libcurl     | free and easy-to-use client-side URL transfer library                | 7.42.1-3
+ clib_libopenblas | OpenBLAS : An optimized BLAS library                                 | 0.2.15
+ lcurl            | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ lfs              | luafilesystem : File System Library for the Lua Programming Language | 1.6.3-203
+ luajit           | LuaJIT: Just-In-Time Compiler (JIT) for Lua                          | 2.1.head20151128
+ pkg              | ULua package manager                                                 | 1.0.beta10
+ sci              | general purpose scientific computing library                         | 1.0.beta12
+ sci-lang         | Syntax extensions to LuaJIT for scientific computing                 | 1.0.beta10
+ serpent          | serpent : Lua serializer and pretty printer                          | 0.28-103
+ xsys             | extended Lua system                                                  | 1.0.2



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p>Pro zjednodušení spuštění interpretu jazyka Lua popř.&nbsp;správce balíčků a
dalších později nainstalovaných utilit si můžete modifikovat proměnnou
prostředí <strong>PATH</strong>, a to následujícím způsobem:</p>

<pre>
$ <strong>export PATH=~/ulua/bin:~/ulua:$PATH</strong>
</pre>

<p>Od této chvíle je možné volat všechny výše popsané spustitelné soubory bez
uvedení cesty:</p>

<pre>
$ <strong>lua</strong>
&nbsp;
LuaJIT 2.1.0-beta1 -- Copyright (C) 2005-2015 Mike Pall. http://luajit.org/
JIT: ON SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse

$ ./scilua 
LuaJIT Language Toolkit usage: luajit [options]... [script [args]...].

Available options are:
  -b ...    Save or list bytecode.
  -c ...    Generate Lua code and run.
            If followed by the "v" option the generated Lua code
            will be printed.



<p><a name="k05"></a></p>
<h2 id="k05">5. Práce s&nbsp;vektory a maticemi: specializované jazyky a specializované knihovny</h2>

<p>Jednou poměrně rozsáhlou oblastí v&nbsp;IT je zpracování vektorů, matic i tenzorů, protože s&nbsp;těmito strukturami se můžeme setkat v&nbsp;různých disciplínách, například ve finančnictví, pojišťovnictví, statistice, zpracování numerických dat, simulacích, strojovém učení atd. Současně se jedná i o velmi zajímavou oblast, neboť právě kvůli co nejrychlejší práci s&nbsp;velkými maticemi byly vytvořeny speciální výpočetní bloky v&nbsp;některých superpočítačích (příkladem mohou být superpočítače <i>Cray</i>). Současné knihovny dokážou v&nbsp;případě potřeby využít jak některá rozšíření instrukčních sad (SIMD instrukce typu SSE, původně též MMX či 3DNow!, viz též <a href="https://www.root.cz/clanky/instrukcni-sada-aarch64-technologie-neon/">úterní článek na toto téma</a>), tak i programovatelné grafické akcelerátory (GPU, v&nbsp;současnosti je lídrem v&nbsp;tomto oboru NVidia s&nbsp;GPU Tesla).</p>

<p>Práce s&nbsp;vektory a maticemi byla (a samozřejmě doposud je) podporována v&nbsp;překladačích FORTRANu, které začaly být po vzniku superpočítačů vybaveny algoritmy, které dokázaly převést některé typy programových smyček na &bdquo;vektorové operace&ldquo;. Paralelně vznikly i specializované jazyky určené téměř výhradně pro práci s&nbsp;vektory i maticemi &ndash; příkladem jsou jazyky <i>APL</i> a <i>J</i>.</p>

<p>V&nbsp;současnosti je používáno relativně velké množství programovacích jazyků popř.&nbsp;specializovaných knihoven orientovaných na práci s&nbsp;vektory, maticemi, tenzory atd. Z&nbsp;komerčních nástrojů je zapotřebí jmenovat především známý <i>MATLAB</i> vydávaný společností <i>MathWorks</i>, nativní práci s&nbsp;maticemi a vektory ovšem velmi dobře podporuje také nástroj <a href="https://www.gnu.org/software/octave/doc/interpreter/Matrices.html">GNU Octave</a> (<a href="https://gnu.org/software/octave/">https://gnu.org/software/octave/</a>), <a href="http://www.ats.ucla.edu/stat/r/library/matrix_alg.htm">jazyk R</a> (<a href="http://www.r-project.org/">http://www.r-project.org/</a>) a také relativně nový jazyk <a href="https://www.root.cz/serialy/programovaci-jazyk-julia/">Julia</a> (<a href="http://julialang.org/">http://julialang.org/</a>, zajímavé výsledky benchmarků lze najít na adrese <a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>).  Z&nbsp;knihoven jmenujme především oblíbenou a dnes dosti intenzivně využívanou Pythonovskou knihovnu <i>NumPy</i> (<a href="http://www.numpy.org/">http://www.numpy.org/</a>).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Stručné představení projektu OpenBLAS</h2>

Basic Linear Algebra Subprograms



<p><a name="k07"></a></p>
<h2 id="k07">7. Knihovna <strong>sci-alg</strong></h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Import knihovny <strong>sci-alg</strong></h2>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 1:</i>
<i>-- Načtení knihovny "sci.alg" bez přiřazení výsledku do proměnné</i>
<i>--</i>

require "sci.alg"

<i>-- finito</i>
</pre>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 2:</i>
<i>-- Výpis globálních symbolů před i po načtení knihovny "sci.alg"</i>
<i>--</i>

print "\nBefore 'require'\n"

for k, v in pairs(_G) do
    print(k, v)
end

require "sci.alg"

print "\nAfter 'require'\n"

for k, v in pairs(_G) do
    print(k, v)
end

<i>-- finito</i>
</pre>

<pre>
Before 'require'

coroutine       table: 0x40809758
assert  function: builtin#2
tostring        function: builtin#18
tonumber        function: builtin#17
io      table: 0x4080ac98
rawget  function: builtin#12
xpcall  function: builtin#21
arg     table: 0x41779508
ipairs  function: builtin#7
print   function: builtin#29
pcall   function: builtin#20
gcinfo  function: builtin#26
module  function: 0x40809e88
setfenv function: builtin#11
pairs   function: builtin#5
jit     table: 0x4080d618
bit     table: 0x4080d050
package table: 0x40809af0
error   function: builtin#19
debug   table: 0x4080ca38
loadfile        function: builtin#22
rawequal        function: builtin#14
loadstring      function: builtin#24
rawset  function: builtin#13
unpack  function: builtin#15
table   table: 0x4080a238
require function: 0x40822580
_VERSION        Lua 5.1
newproxy        function: builtin#28
collectgarbage  function: builtin#27
dofile  function: builtin#25
next    function: builtin#4
math    table: 0x4080bdb8
load    function: builtin#23
os      table: 0x4080b1d8
_G      table: 0x408079a0
select  function: builtin#16
string  table: 0x4080b6b8
type    function: builtin#3
getmetatable    function: builtin#8
getfenv function: builtin#10
setmetatable    function: builtin#9

After 'require'

coroutine       table: 0x40809758
assert  function: builtin#2
tostring        function: builtin#18
tonumber        function: builtin#17
io      table: 0x4080ac98
rawget  function: builtin#12
xpcall  function: builtin#21
arg     table: 0x41779508
ipairs  function: builtin#7
print   function: builtin#29
pcall   function: builtin#20
gcinfo  function: builtin#26
module  function: 0x40809e88
setfenv function: builtin#11
pairs   function: builtin#5
jit     table: 0x4080d618
bit     table: 0x4080d050
package table: 0x40809af0
error   function: builtin#19
debug   table: 0x4080ca38
loadfile        function: builtin#22
rawequal        function: builtin#14
loadstring      function: builtin#24
rawset  function: builtin#13
unpack  function: builtin#15
table   table: 0x4080a238
require function: 0x40822580
_VERSION        Lua 5.1
newproxy        function: builtin#28
collectgarbage  function: builtin#27
dofile  function: builtin#25
next    function: builtin#4
math    table: 0x4080bdb8
load    function: builtin#23
os      table: 0x4080b1d8
_G      table: 0x408079a0
select  function: builtin#16
string  table: 0x4080b6b8
type    function: builtin#3
getmetatable    function: builtin#8
getfenv function: builtin#10
setmetatable    function: builtin#9
</pre>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 3:</i>
<i>-- Načtení knihovny "sci.alg", uložení a zobrazení vrácené hodnoty</i>
<i>--</i>

alg = require "sci.alg"

print "Imported symbols\n"

for k, n in pairs(alg) do
    print(k,n)
end

<i>-- finito</i>
</pre>

<pre>
Imported symbols

pow     function: 0x40726450
vec     function: 0x40696720
arrayct ctype<struct 1520>
prod    function: 0x407264d8
typeof  function: 0x404397f0
mat     function: 0x40696768
tovec   function: 0x40696790
__      table: 0x4073c560
trace   function: 0x407264f8
sum     function: 0x407264b8
tomat   function: 0x406967d8
join    function: 0x41674fa0
mul     function: 0x407313e8
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Konstrukce jednorozměrného vektoru</h2>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 4:</i>
<i>-- Vytvoření (jednorozměrného) vektoru</i>
<i>--</i>

alg = require "sci.alg"

<i>-- alokace vektoru</i>
vec = alg.vec(10)

print "Vector value\n"
print(vec)

<i>-- finito</i>
</pre>

<pre>
Vector value

+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
+0.000000
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Modifikace prvku vektoru</h2>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 5:</i>
<i>-- Vytvoření (jednorozměrného) vektoru, inicializace prvků</i>
<i>--</i>

alg = require "sci.alg"

<i>-- alokace vektoru</i>
vec = alg.vec(10)

<i>-- naplnění prvků vektoru</i>
for i = 1, 10 do
    vec[i] = 1/i
end

print "Vector value\n"
print(vec)

<i>-- finito</i>
</pre>

<pre>
Vector value

+1.000000
+0.500000
+0.333333
+0.250000
+0.200000
+0.166667
+0.142857
+0.125000
+0.111111
+0.100000
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Konverze tabulky na vektor, specifikace typu prvků při převodu</h2>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 6:</i>
<i>-- Vytvoření (jednorozměrného) vektoru z tabulky</i>
<i>--</i>

alg = require "sci.alg"

t = {1, 2, 3, 4, 5}

<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = alg.tovec(t)

print "Vector value\n"
print(vec)

<i>-- finito</i>
</pre>

<pre>
Vector value

+1.000000
+2.000000
+3.000000
+4.000000
+5.000000
</pre>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 7:</i>
<i>-- Specifikace typů prvků vektoru: 8bitová celá čísla</i>
<i>--</i>

alg = require "sci.alg"

t = {0, 1, 2, 3, 4, 100, 127, 128, 129, 255}

<i>-- konstruktor vektoru daného typu</i>
int8vec = alg.typeof("int8_t").tovec

<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = int8vec(t)

print "Vector value\n"
print(vec)

<i>-- finito</i>
</pre>

<pre>
Vector value

+0.000000
+1.000000
+2.000000
+3.000000
+4.000000
+100.0000
+127.0000
-128.0000
-127.0000
-1.000000
</pre>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 8:</i>
<i>-- Specifikace typů prvků vektoru: 16bitová celá čísla</i>
<i>--</i>

alg = require "sci.alg"

t = {0, 1, 2, 3, 4, 100, 127, 128, 129, 255}

<i>-- konstruktor vektoru daného typu</i>
int16vec = alg.typeof("int16_t").tovec

<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = int16vec(t)

print "Vector value\n"
print(vec)

<i>-- finito</i>
</pre>

<pre>
Vector value

+0.000000
+1.000000
+2.000000
+3.000000
+4.000000
+100.0000
+127.0000
+128.0000
+129.0000
+255.0000
</pre>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 9:</i>
<i>-- Specifikace typů prvků vektoru: pravdivostní hodnoty</i>
<i>--</i>

alg = require "sci.alg"

t = {0, 1, 2, 3, 4, 100, 127, 128, 129, 255}

<i>-- konstruktor vektoru daného typu</i>
boolvec = alg.typeof("bool").tovec

<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = boolvec(t)

print "Vector value\n"
print(vec)

<i>-- finito</i>
</pre>

<pre>
Vector value

    false
     true
     true
     true
     true
     true
     true
     true
     true
     true
</pre>


<p><a name="k12"></a></p>
<h2 id="k12">12. Zpětný převod vektoru na tabulku</h2>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 10:</i>
<i>-- Převod vektoru zpět na tabulku</i>
<i>--</i>

alg = require "sci.alg"

t = {0, 1, 2, 3, 4, 100, 127, 128, 129, 255}

<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = alg.tovec(t)

print "Vector value\n"
print(vec)

<i>-- převod vektoru zpět na tabulku</i>
t2 = vec:totable()

print "Table conent\n"
for k, v in pairs(t2) do
    print(k, v)
end

<i>-- finito</i>
</pre>

<pre>
Vector value

+0.000000
+1.000000
+2.000000
+3.000000
+4.000000
+100.0000
+127.0000
+128.0000
+129.0000
+255.0000
Table conent

1       table: 0x40518418
2       table: 0x405184e0
3       table: 0x40518588
4       table: 0x40518640
5       table: 0x405186e8
6       table: 0x405187c0
7       table: 0x40518868
8       table: 0x40518910
9       table: 0x405189b8
10      table: 0x40518ab0
</pre>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 11:</i>
<i>-- Převod vektoru zpět na tabulku, tisk prvního prvku každé podtabulky</i>
<i>--</i>

alg = require "sci.alg"

t = {0, 1, 2, 3, 4, 100, 127, 128, 129, 255}

<i>-- vytvoření jednorozměrného vektoru z tabulky</i>
vec = alg.tovec(t)

print "Vector value\n"
print(vec)

<i>-- převod vektoru zpět na tabulku</i>
t2 = vec:totable()

print "Table conent\n"
for k, v in pairs(t2) do
    print(k, v[1])
end

<i>-- finito</i>
</pre>

<pre>
Vector value

+0.000000
+1.000000
+2.000000
+3.000000
+4.000000
+100.0000
+127.0000
+128.0000
+129.0000
+255.0000
Table conent

1       0
2       1
3       2
4       3
5       4
6       100
7       127
8       128
9       129
10      255
</pre>


<p><a name="k13"></a></p>
<h2 id="k13">13. Vytvoření nulové matice m&times;n</h2>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 12:</i>
<i>-- Vytvoření matice 3x4 prvků</i>
<i>--</i>

alg = require "sci.alg"

<i>-- alokace matice: 3 řádky, 4 sloupce</i>
mat = alg.mat(3, 4)

print "Matrix value\n"
print(mat)

<i>-- finito</i>
</pre>

<pre>
Matrix value

+0.000000,+0.000000,+0.000000,+0.000000
+0.000000,+0.000000,+0.000000,+0.000000
+0.000000,+0.000000,+0.000000,+0.000000
</pre>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 13:</i>
<i>-- Vytvoření matice 0x4 prvků</i>
<i>--</i>

alg = require "sci.alg"

<i>-- alokace matice: žádné řádky, (teoreticky) 4 sloupce</i>
mat = alg.mat(0, 4)

<i>-- počet prvků</i>
print(#mat)

print "Matrix value\n"
print(mat)

<i>-- finito</i>
</pre>

<pre>
0
Matrix value
</pre>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 14:</i>
<i>-- Vytvoření matice 3x0 prvků</i>
<i>--</i>

alg = require "sci.alg"

<i>-- alokace matice: tři řádky, (teoreticky) žádné sloupce</i>
mat = alg.mat(3, 0)

<i>-- počet prvků</i>
print(#mat)

print "Matrix value\n"
print(mat)

<i>-- finito</i>
</pre>

<pre>
0
Matrix value
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Konstrukce matice z&nbsp;tabulky</h2>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 15:</i>
<i>-- Vytvoření matice z tabulky</i>
<i>--</i>

alg = require "sci.alg"

<i>-- běžná tabulka jazyka Lua</i>
tbl = {{1,  2,  3,  4},
       {5,  6,  7,  8},
       {9, 10, 11, 12}}

<i>-- konverze tabulky na matici</i>
mat = alg.tomat(tbl)

<i>-- počet prvků</i>
print(#mat)

print "Matrix value\n"
print(mat)

<i>-- finito</i>
</pre>

<pre>
12
Matrix value

+1.000000,+2.000000,+3.000000,+4.000000
+5.000000,+6.000000,+7.000000,+8.000000
+9.000000,+10.00000,+11.00000,+12.00000
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 16:</i>
<i>-- Pokus o vytvoření matice z tabulky, která obsahuje prvek typu řetězec</i>
<i>--</i>

alg = require "sci.alg"

<i>-- běžná tabulka jazyka Lua</i>
tbl = {{1,  2,  3,  4},
       {5,  6,  7,  8},
       {9, 10, 11, "foobar"}}

<i>-- konverze tabulky na matici</i>
mat = alg.tomat(tbl)

<i>-- počet prvků</i>
print(#mat)

print "Matrix value\n"
print(mat)

<i>-- finito</i>
</pre>

<pre>
/home/ptisnovs/ulua/luajit/2_1_head20151128/Linux/x64/luajit: /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:632: cannot convert 'string' to 'double'
stack traceback:
        /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:632: in function '__newindex'
        /home/ptisnovs/ulua/sci/1_0_beta12/alg.lua:763: in function 'tomat'
        16_matrix_from_table.lua:19: in main chunk
        [C]: at 0x004057d0
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 17:</i>
<i>-- Získání základních informací o matici</i>
<i>--</i>

alg = require "sci.alg"

<i>-- běžná tabulka jazyka Lua</i>
tbl = {{1,  2,  3,  4},
       {5,  6,  7,  8},
       {9, 10, 11, 12}}

<i>-- konverze tabulky na matici</i>
mat = alg.tomat(tbl)

<i>-- počet prvků, sloupců a řádků</i>
print("Items:", #mat)
print("Rows: ", mat:nrow())
print("Cols: ", mat:ncol())

<i>-- finito</i>
</pre>

<pre>
Items:  12
Rows:   3
Cols:   4
</pre>

<pre>
<i>--</i>
<i>-- Seriál Programovací jazyk Lua</i>
<i>-- https://www.root.cz/serialy/programovaci-jazyk-lua/</i>
<i>--</i>
<i>-- Úvodní článek o knihovně SciLua</i>
<i>--</i>
<i>-- Demonstrační příklad číslo 18:</i>
<i>-- Konverze matice na řetězec</i>
<i>--</i>

alg = require "sci.alg"

<i>-- běžná tabulka jazyka Lua</i>
tbl = {{1,  2,  3,  4},
       {5,  6,  7,  8},
       {9, 10, 11, 12}}

<i>-- konverze tabulky na matici</i>
mat = alg.tomat(tbl)

<i>-- konverze na řetězec</i>
s = tostring(mat)
print "Matrix as string\n"
print(s)

<i>-- finito</i>
</pre>

<pre>
Matrix as string

+1.000000,+2.000000,+3.000000,+4.000000
+5.000000,+6.000000,+7.000000,+8.000000
+9.000000,+10.00000,+11.00000,+12.00000
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady určené pro kombinaci interpretru
<i>LuaJIT</i> a knihovnu <i>SciLua</i> byly uloženy do Git repositáře, který je
dostupný na adrese <a
href="https://github.com/tisnik/scientific-lua">https://github.com/tisnik/scientific-lua</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes prozatím malý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis příkladu</th><th>Adresa (zdrojový kód)</th></tr>
<tr><td> 1</td><td>01_bare_require.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/01_bare_require.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/01_bare_require.lua</a></td></tr>
<tr><td> 2</td><td>02_environment.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/02_environment.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/02_environment.lua</a></td></tr>
<tr><td> 3</td><td>03_require_return_value.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/03_require_return_value.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/03_require_return_value.lua</a></td></tr>
<tr><td> 4</td><td>04_vector_of_zeros.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/04_vector_of_zeros.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/04_vector_of_zeros.lua</a></td></tr>
<tr><td> 5</td><td>05_vector_values.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/05_vector_values.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/05_vector_values.lua</a></td></tr>
<tr><td> 6</td><td>06_vector_from_table.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/06_vector_from_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/06_vector_from_table.lua</a></td></tr>
<tr><td> 7</td><td>07_vector_type_int8.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/07_vector_type_int8.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/07_vector_type_int8.lua</a></td></tr>
<tr><td> 8</td><td>08_vector_type_int16.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/08_vector_type_int16.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/08_vector_type_int16.lua</a></td></tr>
<tr><td> 9</td><td>09_vector_type_bool.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/09_vector_type_bool.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/09_vector_type_bool.lua</a></td></tr>
<tr><td>10</td><td>10_vector_to_table.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/10_vector_to_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/10_vector_to_table.lua</a></td></tr>
<tr><td>11</td><td>11_print_first_items_of_subtables.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/11_print_first_items_of_subtables.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/11_print_first_items_of_subtables.lua</a></td></tr>
<tr><td>12</td><td>12_matrix_of_zeros_3x4.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/12_matrix_of_zeros_3x4.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/12_matrix_of_zeros_3x4.lua</a></td></tr>
<tr><td>13</td><td>13_matrix_of_zeros_0x4.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/13_matrix_of_zeros_0x4.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/13_matrix_of_zeros_0x4.lua</a></td></tr>
<tr><td>14</td><td>14_matrix_of_zeros_3x0.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/14_matrix_of_zeros_3x0.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/14_matrix_of_zeros_3x0.lua</a></td></tr>
<tr><td>15</td><td>15_matrix_from_table.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/15_matrix_from_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/15_matrix_from_table.lua</a></td></tr>
<tr><td>16</td><td>16_matrix_from_table.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/16_matrix_from_table.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/16_matrix_from_table.lua</a></td></tr>
<tr><td>17</td><td>17_matrix_size.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/17_matrix_size.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/17_matrix_size.lua</a></td></tr>
<tr><td>18</td><td>18_matrix_tostring.lua</td><td></td><td><a href="https://github.com/tisnik/scientific-lua/blob/master/article01/18_matrix_tostring.lua">https://github.com/tisnik/scientific-lua/blob/master/article01/18_matrix_tostring.lua</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na relevantní články a seriály na Rootu</h2>

<p></p>

<ol>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Seriál Torch: framework pro strojové učení<br />
<a href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/</a>
</li>

<li>Seriál Programovací jazyk Julia<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-julia/">https://www.root.cz/serialy/programovaci-jazyk-julia/</a>
</li>

<li>Seriál Programovací jazyk R<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-r/">https://www.root.cz/serialy/programovaci-jazyk-r/</a>
</li>

<li>Skriptovací jazyk Lua v&nbsp;aplikacích naprogramovaných v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/">https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/</a>
</li>

<li>Jupyter Notebook &ndash; nástroj pro programátory, výzkumníky i lektory<br />
<a href="https://www.root.cz/clanky/jupyter-notebook-nastroj-pro-programatory-vyzkumniky-i-lektory/">https://www.root.cz/clanky/jupyter-notebook-nastroj-pro-programatory-vyzkumniky-i-lektory/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s&nbsp;vektory a maticemi<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">https://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programování mainframů: jazyk APL<br />
<a href="https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/">https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/</a>
</li>

<li>Programovací jazyk APL: programování bez smyček<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/">https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/</a>
</li>

<li>Programovací jazyk APL &ndash; dokončení<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/</a>
</li>

<li>Incanter: prostředí pro statistické výpočty s&nbsp;grafickým výstupem založené na Clojure<br />
<a href="https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/">https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/</a>
</li>

<li>Incanter: operace s&nbsp;maticemi<br />
<a href="https://www.root.cz/clanky/incanter-operace-s-maticemi/">https://www.root.cz/clanky/incanter-operace-s-maticemi/</a>
</li>

<li>Tvorba jednoduchých grafů v&nbsp;systému Incanter<br />
<a href="https://www.root.cz/clanky/tvorba-jednoduchych-grafu-v-systemu-incanter/">https://www.root.cz/clanky/tvorba-jednoduchych-grafu-v-systemu-incanter/</a>
</li>

<li>Tvorba grafů v&nbsp;systému Incanter (pokračování)<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-v-systemu-incanter-pokracovani/">https://www.root.cz/clanky/tvorba-grafu-v-systemu-incanter-pokracovani/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>SciLua: Scientific Computing with LuaJIT<br />
<a href="https://scilua.org/">https://scilua.org/</a>
</li>

<li>Knihovna lua-sci na GitHubu<br />
<a href="https://github.com/stepelu/lua-sci">https://github.com/stepelu/lua-sci</a>
</li>

<li>Nástroj lua-sci-lang na GitHubu<br />
<a href="https://github.com/stepelu/lua-sci-lang">https://github.com/stepelu/lua-sci-lang</a>
</li>

<li>ULua: Universal Lua Distribution<br />
<a href="https://ulua.io/index.html">https://ulua.io/index.html</a>
</li>

<li>LuaRocks<br />
<a href="https://luarocks.org/">https://luarocks.org/</a>
</li>

<li>Awesome Lua &ndash; A curated list of quality Lua packages and resources.<br />
<a href="https://github.com/LewisJEllis/awesome-lua">https://github.com/LewisJEllis/awesome-lua</a>
</li>

<li>LuaJIT<br />
<a href="https://luajit.org/">https://luajit.org/</a>
</li>

<li>Running LuaJIT<br />
<a href="https://luajit.org/running.html">https://luajit.org/running.html</a>
</li>

<li>LuaJIT na GitHubu<br />
<a href="https://github.com/luajit">https://github.com/luajit</a>
</li>

<li>Lua Implementations<br />
<a href="http://lua-users.org/wiki/LuaImplementations">http://lua-users.org/wiki/LuaImplementations</a>
</li>

<li>Archived | Embed Lua for scriptable apps<br />
<a href="https://developer.ibm.com/tutorials/l-embed-lua/">https://developer.ibm.com/tutorials/l-embed-lua/</a>
</li>

<li>Embedding Lua<br />
<a href="https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml">https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml</a>
</li>

<li>The R Project for Statistical Computing<br />
<a href="https://www.r-project.org/">https://www.r-project.org/</a>
</li>

<li>An Introduction to R<br />
<a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf">https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf</a>
</li>

<li>R (programming language)<br />
<a href="https://en.wikipedia.org/wiki/R_(programming_language)">https://en.wikipedia.org/wiki/R_(programming_language)</a>
</li>

<li>The R Programming Language<br />
<a href="https://www.tiobe.com/tiobe-index/r/">https://www.tiobe.com/tiobe-index/r/</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>OpenBLAS: An optimized BLAS library<br />
<a href="https://www.openblas.net/">https://www.openblas.net/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

