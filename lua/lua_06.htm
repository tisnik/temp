<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Lua v aplikacích</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Lua v aplikacích</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V šesté části seriálu o jazyce Lua si ukážeme, jakým způsobem lze zabudovat překladač a interpret tohoto jazyka do vlastních aplikací. Také si popíšeme nejdůležitější funkce z aplikačního programového rozhraní, pomocí něhož mohou skripty napsané v Lua komunikovat s aplikací, do níž je Lua zabudována.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Programovací jazyk Lua v aplikacích</a><br />
<a href="#k02">2. Vestavění překladače a interpretu jazyka Lua do vlastních aplikací</a><br />
<a href="#k03">3. Aplikační programové rozhraní interpretu</a><br />
<a href="#k04">4. První demonstrační příklad &ndash; spuštění skriptu napsaného v&nbsp;jazyce Lua</a><br />
<a href="#k05">5. Druhý demonstrační příklad &ndash; spuštění skriptu uloženého v&nbsp;externím souboru</a><br />
<a href="#k06">6. Předávání parametrů a návrat hodnot z&nbsp;céčkové funkce</a><br />
<a href="#k07">7. Třetí demonstrační příklad &ndash; zavolání céčkové funkce ze skriptu</a><br />
<a href="#k08">8. Zdrojové kódy všech demonstračních příkladů i testovacích skriptů</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Programovací jazyk Lua v aplikacích</h1>

<p>Jeden z&nbsp;důvodů relativně velké oblíbenosti programovacího jazyka
<i>Lua</i> mezi vývojáři spočívá v&nbsp;tom, že její překladač i interpret je
velmi snadno vestavitelný do dalších aplikací, což znamená, že do prakticky
libovolného programu je možné zabudovat buď plnohodnotný překladač tohoto
jazyka, nebo pouze tu část, která se stará o běh přeloženého bajtkódu.
V&nbsp;některých typech aplikací, například počítačových hrách, totiž nemusí
být nutné překládat nové zdrojové kódy, ale pouze spouštět bajtkód přeložený
přímo výrobcem hry; další aplikace naopak mohou těžit z&nbsp;toho, že jsou
uživatelsky skriptovatelné (viz většina moderních &bdquo;Office&ldquo;,
programy typu CAD, grafické a textové editory a mnoho dalších programů).
Samozřejmě se nejedná o unikátní vlastnost, protože i mnoho interpretů dalších
programovacích jazyků lze vestavět do jiných aplikací &ndash; v&nbsp;poslední
době se stává populární především <i>JavaScript</i> vedle již zavedeného
<i>Pythonu</i> (OpenOffice.org, GIMP), <i>Scheme</i> (opět GIMP), <i>Lispu</i>
(AutoCAD, Emacs) či <i>Visual Basicu</i> (MS Office a další aplikace).</p>

<p>Ovšem v&nbsp;případě <i>Lua</i> je její vestavění do aplikace skutečně
snadné &ndash; z&nbsp;pohledu programátora (především pokud programuje
v&nbsp;céčku či C++), který ve své aplikaci potřebuje použít nějaký skriptovací
jazyk, se jedná o pouhých několik programových řádků s&nbsp;následným
slinkováním s&nbsp;objektovým kódem uloženým v&nbsp;archivu
<strong>liblua.a</strong>, jak si ostatně ukážeme v&nbsp;navazujících
kapitolách. Vložením celého překladače a interpretu jazyka <i>Lua</i> včetně
jeho podpůrného běhového prostředí (základní funkce, garbage collector aj.) se
zvětší velikost výsledného spustitelného souboru o cca 70 kB, což není nijak
závratná hodnota, především při porovnání velikostí interpretů dalších
programovacích jazyků. <i>Lua</i> se právě z&nbsp;tohoto důvodu dokonce používá
i na mikrořadičích s&nbsp;poměrně malou operační pamětí a pamětí ROM
(v&nbsp;jedné z&nbsp;aplikací využívajících <i>Lua</i> byl použit mikrořadič
s&nbsp;64 kB RAM a 256 kB EEPROM). V&nbsp;tomto případě se většinou využívá
pouze ta část interpretu, která se stará o běh přeloženého bajtkódu,
v&nbsp;některých situacích se také mění základní numerický datový typ na
šestnáctibitové či třicetidvoubitové hodnoty namísto hodnot uložených ve
formátu plovoucí tečky (viz soubor <i>luaconf.h</i>, především definice
<i>LUA_NUMBER</i>, dopad této změny si ukážeme příště).</p>

<p>Vestavěný interpret jazyka <i>Lua</i> do jisté míry řeší taktéž otázku
bezpečnosti skriptů, aby se zabránilo šíření makrovirů, které byly tak
&bdquo;populární&ldquo; mezi uživateli jednoho rozšířeného kancelářského
balíku. Problém bezpečnosti je řešen především izolací běhového prostředí
skriptů od ostatního systému. Pouze přímo programátor aplikace, která má
obsahovat překladač a interpret <i>Lua</i>, může (explicitně zapsaným importem
příslušné knihovny) skriptům povolit například možnost práce se soubory,
spouštění dalších programů přes volání <i>os.execute()</i> apod. Bez importu
těchto knihoven je skriptu povoleno se svým okolím komunikovat pouze pomocí
volání zaregistrovaných funkcí. Pro předávání parametrů se navíc používá
zvláštní zásobník, ne standardní rámec procesu (na něj se ukládá pouze jeden
ukazatel), takže skripty ani nemají možnost manipulovat se zásobníkem procesu
pod kterým běží (tím se eliminují útoky typu <i>stack overflow</i>). Interpret
provádí i základní kontrolu korektnosti předaného bajtkódu.</p>



<p><a name="k02"></a></p>
<h1>2. Vestavění překladače a interpretu jazyka Lua do vlastních aplikací</h1>

<p>Překladač a interpret jazyka <i>Lua</i> je možné do programů vytvářených
v&nbsp;céčku či C++ vložit velmi snadno. <i>Lua</i> se instaluje buď překladem
ze zdrojových kódů (k&nbsp;řízení překladu je samozřejmě určen soubor
<strong>Makefile</strong>) nebo pomocí balíčkovacího nástroje příslušné
Linuxové distribuce (v&nbsp;tomto případě je nutné nainstalovat i variantu
nazvanou &bdquo;Lua devel&ldquo;). V&nbsp;obou případech získáme několik
hlavičkových souborů, především <strong>lua.h</strong>,
<strong>lualib.h</strong> a <strong>lauxlib.h</strong> a taktéž archiv nazvaný
<strong>liblua.a</strong>, jenž obsahuje objektové soubory potřebné pro
sestavení aplikace s&nbsp;překladačem a interpretem <i>Lua</i> (pokud se
nepoužije překladač <i>gcc</i>, může být název archivu s&nbsp;objektovými
soubory odlišný, některé překladače například pracují se soubory majícími
koncovku <strong>.lib</strong>). V&nbsp;současné verzi <i>Lua 5.x</i> obsahuje
archiv následující soubory (výpis je proveden příkazem <strong>ar t
liblua.a</strong>):</p>

<code-area>lapi.o
lcode.o
ldebug.o
ldo.o
ldump.o
lfunc.o
lgc.o
llex.o
lmem.o
lobject.o
lopcodes.o
lparser.o
lstate.o
lstring.o
ltable.o
ltm.o
lundump.o
lvm.o
lzio.o
lauxlib.o
lbaselib.o
ldblib.o
liolib.o
lmathlib.o
loslib.o
ltablib.o
lstrlib.o
loadlib.o
linit.o
</code-area>

<p>Překlad programu, ve kterém má být <i>Lua</i> zabudována, je poměrně snadný
&ndash; musíme pouze zadat cestu k&nbsp;hlavičkovým souborům i archivu
s&nbsp;objektovými soubory. Pokud se používá překladač <i>gcc</i> (na platformě
Microsoft Windows se může jednat například o vývojové prostředí <i>Mingw</i>),
provede se překlad následujícím způsobem:</p>

<code-area>gcc -ansi -Wall priklad.c -Ipath_to_lua/src path_to_lua/src/liblua.a
</code-area>

<p>První dvě volby nemusí být uvedeny, pouze si pomocí nich demonstrujeme, že
hlavičkové soubory dodávané s&nbsp;<i>Lua</i> plně odpovídají standardům céčka
(a současně také C++). V&nbsp;případě, že jsou hlavičkové soubory
<strong>lua.h</strong>, <strong>lualib.h</strong> a <strong>lauxlib.h</strong>
umístěny ve standardním adresáři prohledávaném céčkovým preprocesorem a archiv
<strong>liblua.a</strong> je umístěn ve standardním adresáři prohledávaném
linkerem, lze předchozí příkaz zjednodušit:</p>

<code-area>gcc -ansi -Wall priklad.c liblua.a
</code-area>

<p><strong>Poznámka:</strong> odkazy na zdrojové kódy všech dále uvedených
demonstračních příkladů, testovacích skriptů i výsledků běhu těchto skriptů
jsou uvedeny v&nbsp;osmé kapitole.</p>



<p><a name="k03"></a></p>
<h1>3. Aplikační programové rozhraní interpretu</h1>

<p>V&nbsp;první kapitole jsme si řekli, že aplikační programové rozhraní (API)
interpretu <i>Lua</i> je jednoduché a současně i snadno použitelné. Skutečně
tomu tak je. Celé rozhraní je dostupné přes několik konstant, datových typů
(včetně struktur) a funkcí, jejichž hlavičky jsou umístěné v&nbsp;souborech
<strong>lua.h</strong>, <strong>lualib.h</strong> (základ) a
<strong>lauxlib.h</strong> (rozšíření a současně i zjednodušení rozhraní). Stav
interpretu se ukládá do datové struktury nazvané <i>lua_State</i>, kterou je
nutné před zavoláním skriptu vytvořit a inicializovat, například zavoláním
<strong>lua_open()</strong> či nověji též <strong>luaL_newstate()</strong> nebo
<strong>lua_newstate()</strong>. Prozatím nás nemusí zajímat, co je v&nbsp;této
struktuře uloženo, ovšem v&nbsp;prakticky všech funkcích API se ukazatel na
tuto strukturu předává (podobně se při práci se soubory používá struktura
<i>FILE</i>, i když k&nbsp;jejím složkám se málokdy přistupuje přímo).
V&nbsp;následující tabulce jsou vypsány některé základní funkce, se kterými se
dále seznámíme v&nbsp;demonstračních příkladech:</p>

<table>
<tr><th>Funkce</th><th>Hlavička uložena</th><th>Popis</th></tr>
<tr><td>lua_open</td><td>lua.h</td><td>vytvoření nové struktury lua_State</td></tr>
<tr><td>lua_close</td><td>lua.h</td><td>odstranění všech objektů asociovaných se stavem</td></tr>
<tr><td>lua_register</td><td>lua.h</td><td>registrace céčkové funkce, kterou bude možné volat ze skriptů</td></tr>
<tr><td>luaopen_base</td><td>lualib.h</td><td>načtení základní knihovny (obsahuje i funkci print)</td></tr>
<tr><td>luaL_dostring</td><td>lauxlib.h</td><td>spuštění skriptu uloženého v&nbsp;céčkovém řetězci</td></tr>
<tr><td>luaL_dofile</td><td>lauxlib.h</td><td>spuštění skriptu uloženého v&nbsp;externím souboru</td></tr>
</table>



<p><a name="k04"></a></p>
<h1>4. První demonstrační příklad &ndash; spuštění skriptu napsaného v&nbsp;jazyce Lua</h1>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán způsob spuštění
skriptu napsaného v&nbsp;programovacím jazyce <i>Lua</i>, který je uložen
v&nbsp;céčkovém řetězcovém literálu, tj.&nbsp;řetězcové konstantě umístěné
přímo ve výsledném spustitelném souboru v&nbsp;kódovém segmentu (při prohlížení
spustitelného souboru binárním editorem lze zdrojový kód skriptu poměrně rychle
nalézt). Celý skript je spuštěn pomocí funkce <strong>luaL_dostring()</strong>,
přičemž první parametr představuje objekt s&nbsp;uloženým stavem interpretu a
druhý parametr je řetězec se skriptem (přesněji odkaz na paměť s&nbsp;uloženým
řetězcem zakončeným nulou, jak je v&nbsp;céčku zvykem). Nejedná se sice o
typický způsob ukládání skriptů, už jen kvůli nepřehlednosti zápisu řetězce na
mnoha řádcích a problémy s&nbsp;některými znaky se speciálním významem (ty je
zapotřebí převést na céčkovou znakovou entitu), v&nbsp;některých případech se
však může hodit &ndash; například tehdy, když se má celá aplikace spouštět na
mikrořadičích bez souborového systému či v&nbsp;případě požadavku, aby byl celý
program i se všemi potřebnými daty uložen v&nbsp;jediném souboru, který tak
není nutné instalovat, ale lze ho spouštět například přímo ze sítě či
přenosného USB disku. Následuje výpis zdrojového kódu prvního demonstračního
příkladu:</p>

<code-area><i>/*
 * Prvni demonstracni priklad - spusteni skriptu napsaneho
 * v programovacim jazyce Lua, ktery je ulozeny v Ceckovem
 * retezcovem literalu.
 */</i>

<strong>#include</strong> &lt;stdio.h&gt;
<strong>#include</strong> &lt;stdlib.h&gt;

<i>/* Zakladni a doplnkove funkce interpretu jazyka Lua */</i>
<strong>#include</strong> &lt;lualib.h&gt;
<strong>#include</strong> &lt;lauxlib.h&gt;

<i>/* Skript napsany v programovacim jazyce Lua */</i>
<strong>const char</strong> * SCRIPT =
"-- Demonstracni priklad: pouziti uzaveru\n"\
"\n"\
"-- pomocna funkce vracejici uzaver\n"\
"function defPosloupnosti(n)\n"\
    "-- pamatovana hodnota, ktera vsak\n"\
    "-- neni z okolniho programu dostupna\n"\
    "local y = 1\n"\
    "-- pocitadlo volani = exponent\n"\
    "local index = 0\n"\
    "-- anonymni funkce vytiskne pamatovanou\n"\
    "-- hodnotu a nakonec ji vynasobi zvolenou konstantou\n"\
    "return function()\n"\
        "print(index, y)\n"\
        "y = y * n\n"\
        "index = index + 1\n"\
    "end\n"\
"end\n"\
"\n"\
"print('mocniny cisla 2')\n"\
"-- ziskani uzaveru\n"\
"generator = defPosloupnosti(2)\n"\
"\n"\
"-- postupne se budou tisknout\n"\
"-- mocniny cisla 2\n"\
"for i=0, 16 do\n"\
    "generator()\n"\
"end\n"\
"\n"\
"print()\n"\
"\n"\
"print('mocniny cisla 3')\n"\
"-- ziskani uzaveru\n"\
"generator = defPosloupnosti(3)\n"\
"\n"\
"-- postupne se budou tisknout\n"\
"-- mocniny cisla 3\n"\
"for i=0, 16 do\n"\
    "generator()\n"\
"end\n"\
"\n"\
"print()\n"\
"\n"\
"print('mocniny cisla 10')\n"\
"-- ziskani uzaveru\n"\
"generator = defPosloupnosti(10)\n"\
"\n"\
"-- postupne se budou tisknout\n"\
"-- mocniny cisla 3\n"\
"for i=0, 16 do\n"\
    "generator()\n"\
"end\n";

<i>/* Hlavni funkce konzolove aplikace */</i>
<strong>int</strong> main(<strong>void</strong>)
{
    <strong>int</strong> result;

    <i>/* vytisteni hlavicky */</i>
    puts(LUA_RELEASE);
    puts(LUA_COPYRIGHT);
    puts(LUA_AUTHORS);
    putchar('\n');

    <i>/* vytvoreni objektu, do nejz se uklada stav interpretu */</i>
    lua_State* L = lua_open();
    <i>/* nacteme zakladni knihovnu obsahujici mj. i funkci print() */</i>
    luaopen_base(L);
    <i>/* nacteni retezce interpretem, jeho preklad a nasledne spusteni */</i>
    result = luaL_dostring(L, SCRIPT);
    <i>/* odstraneni vsech objektu asociovanych se stavem "Lua" */</i>
    lua_close(L);
    <strong>if</strong> (result != 0)
    {
        printf("Error # %d\n", result);
    }
    <i>/* vypocet navratoveho kodu */</i>
    <strong>return</strong> (result != 0);
}

<i>/* finito */</i>
</code-area>

<p>Po překladu a spuštění prvního demonstračního příkladu se na standardní
výstup vypíše následující text:</p>

<code-area>Lua 5.1.3
Copyright (C) 1994-2008 Lua.org, PUC-Rio
R. Ierusalimschy, L. H. de Figueiredo &amp; W. Celes

mocniny cisla 2
0       1
1       2
2       4
3       8
4       16
5       32
6       64
7       128
8       256
9       512
10      1024
11      2048
12      4096
13      8192
14      16384
15      32768
16      65536

mocniny cisla 3
0       1
1       3
2       9
3       27
4       81
5       243
6       729
7       2187
8       6561
9       19683
10      59049
11      177147
12      531441
13      1594323
14      4782969
15      14348907
16      43046721

mocniny cisla 10
0       1
1       10
2       100
3       1000
4       10000
5       100000
6       1000000
7       10000000
8       100000000
9       1000000000
10      10000000000
11      100000000000
12      1000000000000
13      10000000000000
14      1e+014
15      1e+015
16      1e+016
</code-area>



<p><a name="k05"></a></p>
<h1>5. Druhý demonstrační příklad &ndash; spuštění skriptu uloženého v&nbsp;externím souboru</h1>

<p>Ve druhém demonstračním příkladu je ukázán způsob spuštění skriptu, jehož
kód je uložen v&nbsp;externím souboru (a ne v&nbsp;řetězci, jak tomu bylo
v&nbsp;příkladu předchozím). Externě uložený skript je buď možné programově
načíst do céčkového řetězce, ovšem to je poměrně komplikované (musí se
například předem zjišťovat délka řetězce, alokovat paměť pro řetězec atd.).
Jednodušší je použít funkci <strong>luaL_dofile()</strong>, která načtení,
překlad i spuštění skriptu provede automaticky. Návratovou hodnotou této funkce
se signalizuje, zda skript proběhl korektně nebo zda v&nbsp;průběhu jeho
načítání, překladu, spuštění či běhu došlo k&nbsp;nějaké chybě: v&nbsp;případě
korektního běhu se vrátí nula, pokud nastane chyba, vrátí se jednička. Chybu je
také možné vygenerovat programově, tj.&nbsp;ve skriptu, zavoláním funkce
<i>error()</i>, popřípadě z&nbsp;céčkové funkce zavoláním
<strong>lua_error()</strong> (řetězec obsahující chybové hlášení musí být
v&nbsp;tomto případě uložen na zásobníku, což si ukážeme v&nbsp;následujících
kapitolách). Zdrojový kód druhého demonstračního příkladu má následující
tvar:</p>

<code-area><i>/*
 * Druhy demonstracni priklad - spusteni skriptu napsaneho
 * v programovacim jazyce Lua, ktery je ulozeny v externim
 * souboru.
 */</i>

<strong>#include</strong> &lt;stdio.h&gt;
<strong>#include</strong> &lt;stdlib.h&gt;

<i>/* Zakladni a doplnkove funkce interpretu jazyka Lua */</i>
<strong>#include</strong> &lt;lualib.h&gt;
<strong>#include</strong> &lt;lauxlib.h&gt;

<i>/* Hlavni funkce konzolove aplikace */</i>
<strong>int</strong> main(<strong>int</strong> argc, <strong>char</strong> **argv)
{
    <strong>int</strong> result;
    <strong>if</strong> (argc != 2)
    {
        puts("Pouziti: lua62 script.lua");
        <strong>return</strong> 1;
    }

    <i>/* vytisteni hlavicky */</i>
    puts(LUA_RELEASE);
    puts(LUA_COPYRIGHT);
    puts(LUA_AUTHORS);
    putchar('\n');

    <i>/* vytvoreni objektu, do nejz se uklada stav interpretu */</i>
    lua_State* L = lua_open();
    <i>/* nacteme zakladni knihovnu obsahujici mj. i funkci print() */</i>
    luaopen_base(L);
    <i>/* nacteni externiho skriptu, jeho preklad a nasledne spusteni */</i>
    result = luaL_dofile(L, argv[1]);
    <i>/* odstraneni vsech objektu asociovanych se stavem "Lua" */</i>
    lua_close(L);
    <strong>if</strong> (result != 0)
    {
        printf("Error # %d\n", result);
    }
    <i>/* vypocet navratoveho kodu */</i>
    <strong>return</strong> (result != 0);
}

<i>/* finito */</i>
</code-area>

<p>Po překladu druhého demonstračního příkladu lze výsledný spustitelný soubor
zavolat se jménem následujícího skriptu:</p>

<code-area><i>-- Testovaci skript pro druhy demonstracni priklad</i>
<i>-- pouziti uzaveru</i>

<i>-- pomocna funkce vracejici uzaver</i>
<strong>function</strong> defPosloupnosti(n)
    <i>-- pamatovana hodnota, ktera vsak</i>
    <i>-- neni z okolniho programu dostupna</i>
    <strong>local</strong> y = 1
    <i>-- pocitadlo volani = exponent</i>
    <strong>local</strong> index = 0
    <i>-- anonymni funkce vytiskne pamatovanou</i>
    <i>-- hodnotu a nakonec ji vynasobi zvolenou konstantou</i>
    <strong>return</strong> <strong>function</strong>()
        print(index, y)
        y = y * n
        index = index + 1
    <strong>end</strong>
<strong>end</strong>

print("mocniny cisla 2")
<i>-- ziskani uzaveru</i>
generator = defPosloupnosti(2)

<i>-- postupne se budou tisknout</i>
<i>-- mocniny cisla 2</i>
<strong>for</strong> i=0, 16 <strong>do</strong>
    generator()
<strong>end</strong>

print()

print("mocniny cisla 3")
<i>-- ziskani uzaveru</i>
generator = defPosloupnosti(3)

<i>-- postupne se budou tisknout</i>
<i>-- mocniny cisla 3</i>
<strong>for</strong> i=0, 16 <strong>do</strong>
    generator()
<strong>end</strong>

print()

print("mocniny cisla 10")
<i>-- ziskani uzaveru</i>
generator = defPosloupnosti(10)

<i>-- postupne se budou tisknout</i>
<i>-- mocniny cisla 3</i>
<strong>for</strong> i=0, 16 <strong>do</strong>
    generator()
<strong>end</strong>

<i>-- finito</i>
</code-area>

<p>Výsledek po spuštění druhého demonstračního příkladu je shodný
s&nbsp;příkladem prvním, proto ho zde již nebudu uvádět.</p>



<p><a name="k06"></a></p>
<h1>6. Předávání parametrů a návrat hodnot z&nbsp;céčkové funkce</h1>

<p>Jednou z&nbsp;nejdůležitějších funkcí API je zajištění předávání parametrů
do céčkové funkce a návratu vypočtených hodnot zpět do <i>Lua</i> skriptu.
Vzhledem k&nbsp;tomu, že v&nbsp;jazyku <i>Lua</i> se typy parametrů odvozují
z&nbsp;hodnot uložených do proměnných, není možné již v&nbsp;době překladu
provést stoprocentní typovou kontrolu &ndash; tu je nutné ponechat až na dobu
běhu (<i>runtime</i>). Pro usnadnění práce s&nbsp;parametry předávanými ze
skriptu do céčkové (C++) aplikace je k&nbsp;dispozici několik funkcí, především
<strong>lua_gettop()</strong> (počet předaných parametrů) a sada funkcí pro
zjištění skutečného typu <i>i</i>-tého parametru:
<strong>lua_isnumber()</strong>, <strong>lua_isstring()</strong>,
<strong>lua_iscfunction()</strong> atd. (bližší popis bude uveden příště).
Kromě toho existují ještě konverzní funkce typu
<strong>lua_tonumber()</strong>, <strong>lua_tointeger()</strong> či
<strong>lua_tolstring()</strong>, pomocí nichž lze parametry konvertovat. Pro
návrat hodnot z&nbsp;céčkové funkce do skriptu je určený zásobník vytvořený
interpretem, jelikož v&nbsp;<i>Lua</i> je možné, jak jsme se již dozvěděli
v&nbsp;předchozích částech seriálu, vracet hodnot několik. Pro ukládání hodnot
do tohoto zásobníku slouží funkce typu <strong>lua_pushstring()</strong> a
<strong>lua_pushnumber()</strong>. Nesmíme také zapomenout na to, že céčková
funkce musí vrátit (příkazem <strong>return</strong>) celkový počet parametrů
uložených na zásobník.</p>



<p><a name="k07"></a></p>
<h1>7. Třetí demonstrační příklad &ndash; zavolání céčkové funkce ze skriptu</h1>

<p>Ve třetím demonstračním příkladu si ukážeme, jakým způsobem je možné
předávat parametry céčkové funkci, i to, jak lze kontrolovat počet i typ
parametrů a způsob předávání návratových hodnot zpět do <i>Lua</i> skriptu.
V&nbsp;příkladu je vytvořena funkce nazvaná <strong>gcd()</strong>, pomocí níž
je možné vypočítat největší společný dělitel (<i>greatest common divisor</i>)
dvou celých čísel Euklidovým algoritmem, přičemž první číslo by mělo být větší
než druhé. Tato funkce je zaregistrována pro možnost jejího zavolání
z&nbsp;<i>Lua</i> skriptu. Po svém zavolání si funkce nejprve zkontroluje počet
a typ parametrů a pouze tehdy, když jsou funkci předány dva parametry typu
číslo, je funkce provedena. Výsledkem výpočtu je dvojice hodnot &ndash;
největší společný dělitel a počet iterací Euklidova algoritmu, které bylo
zapotřebí provést pro nalezení výsledku. Obě hodnoty jsou uloženy na zásobník
vytvořený interpretem jazyka <i>Lua</i>; návratová hodnota funkce
<strong>gcd()</strong> pak udává počet uložených výsledků (tj.&nbsp;vlastně
hloubku zaplněného zásobníku). Zdrojový kód třetího demonstračního příkladu má
tvar:</p>

<code-area><i>/*
 * Treti demonstracni priklad - zavolani ceckove funkce
 * z Lua skriptu.
 */</i>

<strong>#include</strong> &lt;stdio.h&gt;
<strong>#include</strong> &lt;stdlib.h&gt;

<i>/* Zakladni a doplnkove funkce interpretu jazyka Lua */</i>
<strong>#include</strong> &lt;lualib.h&gt;
<strong>#include</strong> &lt;lauxlib.h&gt;

<i>/* Vypocet nejvetsiho spolecneho delitele */</i>
<strong>static int</strong> gcd(lua_State* L)
{
    <strong>int</strong> x, y, iter = 1;
    <i>/* zjistit pocet parametru pri volani funkce */</i>
    <strong>if</strong> (lua_gettop(L) != 2)
    {
        lua_pushstring(L, "incorrect argument");
        lua_error(L);
    }
    <i>/* kontrola typu obou parametru */</i>
    <strong>if</strong> (!lua_isnumber(L, 1))
    {
        lua_pushstring(L, "incorrect first argument");
        lua_error(L);
    }
    <strong>if</strong> (!lua_isnumber(L, 2))
    {
        lua_pushstring(L, "incorrect second argument");
        lua_error(L);
    }

    <i>/* nacist parametry */</i>
    x = lua_tonumber(L, 1);
    y = lua_tonumber(L, 2);

    <i>/* vypocet nejvetsiho spolecneho delitele */</i>
    <strong>while</strong> (x % y &gt; 0)
    {
        int pom = y;
        y = x % y;
        x = pom;
        iter ++;
    }

    <i>/* prvni vysledek */</i>
    lua_pushnumber(L, y);

    <i>/* druhy vysledek */</i>
    lua_pushnumber(L, iter);

    <i>/* ulozit pocet vysledku na zasobniku */</i>
    return 2;
}

<i>/* Hlavni funkce konzolove aplikace */</i>
<strong>int</strong> main(<strong>int</strong> argc, <strong>char</strong> **argv)
{
    <strong>int</strong> result;
    <strong>if</strong> (argc != 2)
    {
        puts("Pouziti: lua63 script.lua");
        return 1;
    }

    <i>/* vytisteni hlavicky */</i>
    puts(LUA_RELEASE);
    puts(LUA_COPYRIGHT);
    puts(LUA_AUTHORS);
    putchar('\n');

    <i>/* vytvoreni objektu, do nejz se uklada stav interpretu */</i>
    lua_State* L = lua_open();
    <i>/* nacteme zakladni knihovnu obsahujici mj. i funkci print() */</i>
    luaopen_base(L);

    <i>/* registrace ceckove funkce gcd() pod jmenem "gcd" */</i>
    lua_register(L, "gcd", gcd);

    <i>/* nacteni externiho skriptu, jeho preklad a nasledne spusteni */</i>
    result = luaL_dofile(L, argv[1]);

    <i>/* odstraneni vsech objektu asociovanych se stavem "Lua" */</i>
    lua_close(L);
    <strong>if</strong> (result != 0)
    {
        printf("Error # %d\n", result);
    }
    <i>/* vypocet navratoveho kodu */</i>
    <strong>return</strong> (result != 0);
}

<i>/* finito */</i>
</code-area>

<p>Pro otestování korektnosti céčkové funkce <strong>gcd()</strong>
implementované a zaregistrované ve třetím demonstračním příkladu můžeme použít
následující skript napsaný v&nbsp;programovacím jazyce <i>Lua</i>, který vypíše
největší společné dělitele číselných hodnot od 1 do 12 a současně i počet kroků
nutných pro jejich nalezení:</p>

<code-area><i>-- Testovaci skript pro treti demonstracni priklad</i>

print("i", "j", "gcd(i,j)", "#of iterations")

<strong>for</strong> i=1, 12 <strong>do</strong>
    <strong>for</strong> j=1, i <strong>do</strong>
        -- funkce gcd() vraci dvojici hodnot
        result, iter = gcd(i, j)
        print(i, j, result, iter)
    <strong>end</strong>
<strong>end</strong>

<i>-- finito</i>
</code-area>

<p>Všimněte si, že syntaxe pro přiřazení výsledků volané funkce více proměnným
nezávisí na tom, zda se volá funkce naprogramovaná v&nbsp;jazyce <i>Lua</i> či
funkce céčková. Po spuštění třetího demonstračního příkladu s&nbsp;názvem
skriptu předaného jako jediný parametr příkazové řádky získáme tabulku
největších společných dělitelů. V&nbsp;prvních dvou sloupcích jsou zobrazeny
hodnoty, pro něž se největší společný dělitel počítá, ve třetím sloupci
vypočtený výsledek a ve sloupci čtvrtém počet iterací nutných pro získání
výsledku:</p>

<code-area>Lua 5.1.3
Copyright (C) 1994-2008 Lua.org, PUC-Rio
R. Ierusalimschy, L. H. de Figueiredo &amp; W. Celes

i           j           gcd(i,j)    #of iterations
1           1           1           1
2           1           1           1
2           2           2           1
3           1           1           1
3           2           1           2
3           3           3           1
4           1           1           1
4           2           2           1
4           3           1           2
4           4           4           1
5           1           1           1
5           2           1           2
5           3           1           3
5           4           1           2
5           5           5           1
6           1           1           1
6           2           2           1
6           3           3           1
6           4           2           2
6           5           1           2
6           6           6           1
7           1           1           1
7           2           1           2
7           3           1           2
7           4           1           3
7           5           1           3
7           6           1           2
7           7           7           1
8           1           1           1
8           2           2           1
8           3           1           3
8           4           4           1
8           5           1           4
8           6           2           2
8           7           1           2
8           8           8           1
9           1           1           1
9           2           1           2
9           3           3           1
9           4           1           2
9           5           1           3
9           6           3           2
9           7           1           3
9           8           1           2
9           9           9           1
10          1           1           1
10          2           2           1
10          3           1           2
10          4           2           2
10          5           5           1
10          6           2           3
10          7           1           3
10          8           2           2
10          9           1           2
10          10          10          1
11          1           1           1
11          2           1           2
11          3           1           3
11          4           1           3
11          5           1           2
11          6           1           3
11          7           1           4
11          8           1           4
11          9           1           3
11          10          1           2
11          11          11          1
12          1           1           1
12          2           2           1
12          3           3           1
12          4           4           1
12          5           1           3
12          6           6           1
12          7           1           4
12          8           4           2
12          9           3           2
12          10          2           2
12          11          1           2
12          12          12          1
</code-area>



<p><a name="k08"></a></p>
<h1>8. Zdrojové kódy všech demonstračních příkladů i testovacích skriptů</h1>

<p>V&nbsp;následující tabulce jsou uloženy odkazy na zdrojové kódy všech tří
demonstračních příkladů popsaných v&nbsp;předchozích kapitolách. Taktéž jsou
zde uvedeny skripty použité spolu s&nbsp;druhým i se třetím demonstračním
příkladem a výsledky běhu všech tří příkladů (jedná se o standardní výstup
přesměrovaný do souboru po převodu tabulátorů na mezery).</p>

<table>
<tr><th>Soubor</th></tr>
<tr><td><att-url id="717">Zdrojový kód prvního demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="718">Výsledek běhu prvního demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="719">Zdrojový kód druhého demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="720"><i>Lua</i> skript určený pro druhý demonstrační příklad</att-url></td></tr>
<tr><td><att-url id="721">Výsledek běhu druhého demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="722">Zdrojový kód třetího demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="723"><i>Lua</i> skript určený pro třetí demonstrační příklad</att-url></td></tr>
<tr><td><att-url id="724">Výsledek běhu třetího demonstračního příkladu</att-url></td></tr>
</table>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2007</small></p>
</body>
</html>

