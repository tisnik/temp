<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se seznámíme s jazykem nazvaným Moonscript. Syntaxe a především sémantika tohoto jazyka je inspirovaná CoffeeScriptem, ovšem Moonscript je určen pro ekosystém jazyka Lua a je tak použitelný například i pro tvorbu aplikací pro mikrořadiče (ESP32 atd.).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua</a></p>
<p><a href="#k02">2. Svět transpřekladačů</a></p>
<p><a href="#k03">3. Příklad podobného transpřekladače pro odlišný ekosystém: Coconut</a></p>
<p><a href="#k04">4. Instalace Moonscriptu</a></p>
<p><a href="#k05">5. Tradiční začátek &ndash; &bdquo;Hello, world!&ldquo; v&nbsp;Moonscriptu i v&nbsp;jazyce Lua</a></p>
<p><a href="#k06">6. Lokální proměnné</a></p>
<p><a href="#k07">7. Interpolace řetězců</a></p>
<p><a href="#k08">8. Víceřádkové řetězce</a></p>
<p><a href="#k09">9. Nové operátory</a></p>
<p><a href="#k10">10. Kombinace aritmetické, logické i řetězcové operace s&nbsp;přiřazením</a></p>
<p><a href="#k11">11. Modifikovaná syntaxe volání funkcí</a></p>
<p><a href="#k12">12. Definice nových funkcí operátorem -&gt;</a></p>
<p><a href="#k13">13. Prázdná funkce bez parametrů</a></p>
<p><a href="#k14">14. Funkce s&nbsp;tělem, ovšem bez parametrů</a></p>
<p><a href="#k15">15. Návratová hodnota funkce</a></p>
<p><a href="#k16">16. Definice funkce s&nbsp;parametry</a></p>
<p><a href="#k17">17. Návrat většího množství hodnot z&nbsp;funkce</a></p>
<p><a href="#k18">18. Parametry funkce s&nbsp;implicitní hodnotou</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua</h2>

<p><i>&bdquo;The syntax of MoonScript has been heavily inspired by the syntax
of CoffeeScript. MoonScript is CoffeeScript for Lua.&ldquo;</i></p>

<p>S&nbsp;programovacím jazykem <i>Lua</i> jsme se již na stránkách tohoto
serveru setkali, a to dokonce již mnohokrát. Většina článků o tomto jazyku je
shrnuta do seriálu <a
href="https://www.root.cz/serialy/programovaci-jazyk-lua/">Programovací jazyk
Lua</a> a taktéž jsme se Luou zabývali ve druhém seriálu nazvaném <a
href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">Torch:
framework pro strojové učení</a>. Víme již, že se tento programovací jazyk stal
oblíbený například mezi tvůrci her, v&nbsp;nichž je použit pro skriptování. To
ovšem není zdaleka vše, protože Lua je použita například v&nbsp;systému
<i>LuaTeX</i>, v&nbsp;databázi <i>Redis</i>, ve webovém serveru <i>Nginx</i> a
v&nbsp;neposlední řadě i v&nbsp;textovém editoru <i>Neovim</i>. Jednoduše
použitelná syntaxe a současně i poměrně velká vyjadřovací schopnost jazyka Lua
by však pravděpodobně nedostačovala pro jeho masovější rozšíření, a to zejména
v&nbsp;situaci, kdy tuto niku programovacích jazyků do značné míry okupuje
Python, kterému se již úspěšně podařilo &bdquo;odstavit&ldquo; některé
konkurenty.</p>

<p>Zajímavé je i použití jazyka Lua v&nbsp;oblasti mikrořadičů, kam se tento
jazyk (podle mého názoru) hodí lépe, než výše zmíněný Python resp.&nbsp;jeho
varianta nazvaná MicroPython. Ovšem některé syntaktické konstrukce jazyka Lua
(a ještě ve větší míře sémantika) by si zasloužily vylepšení. Samotná Lua je
velmi stabilním jazykem, který se příliš nevyvíjí, takže tvůrci různých
rozšíření jsou postaveni před úkol zachování kompatibility s&nbsp;celým
ekosystémem (tedy s&nbsp;interpretrem Lua i s&nbsp;LuaJITem). Podobný problém
řeší tvůrci nových jazyků pro webové prohlížeče, protože i zde byl (až do
relativně nedávné doby) podporován jediný jazyk &ndash; JavaScript. Řešením
jsou transpřekladače (<i>transpilery</i>), které zdrojový kód napsaný
v&nbsp;jednom jazyku převedou do jazyku jiného, v&nbsp;našich příkladech buď do
jazyka Lua nebo do JavaScriptu. A právě takovým způsobem je implementován
programovací jazyk <i>Moonscript</i>, který je inspirován <i>CoffeeScriptem</i>
(ovšem i tvůrci ES6 se nechali CoffeeScriptem ovlivnit, což ostatně sami
potvrzují). Na Moonscript se můžeme dívat jako na jakýsi hybrid mezi Pythonem,
jazykem Lua a jazykem Ruby.</p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je vhodné poznamenat, že
největší popularity dosáhl <i>CoffeeScript</i> přibližně v&nbsp;roce 2010. Poté
&ndash; společně s&nbsp;rozšiřováním možností samotného JavaScriptu
inspirovaného mj.&nbsp;i CoffeeScriptem &ndash; začala jeho popularita klesat a
dnes je sice stále používán, ale JavaScript v&nbsp;žádném případě nenahradil
(ostatně se to nepodařilo ani projektu Dart). V&nbsp;případě dvojice <i>Lua</i>
+ <i>Moonscript</i> je ovšem situace odlišná, neboť samotný jazyk Lua je již
velmi stabilní, což je ostatně považováno za jednu z&nbsp;jeho velmi dobrých
vlastností.</div></p>

<p><i>Moonscript</i> přináší mnoho zajímavých prvků, například:</p>

<ol>
<li>Jednodušší deklaraci lokálních proměnných</li>
<li>Interpolaci řetězců</li>
<li>Podporu pro víceřádkové řetězce</li>
<li>Deklaraci funkcí operátorem &bdquo;šipky&ldquo;</li>
<li>Deklaraci metod operátorem &bdquo;tlusté šipky&ldquo;</li>
<li>Deklarace funkcí s&nbsp;implicitní hodnotou parametrů</li>
<li>Rozšíření tabulky operátorů</li>
<li>Prakticky každý příkaz je současně i výrazem vracejícím hodnotu (smyčky, podmínky)</li>
<li>Generátorová notace seznamu (<i>list comprehensions</i>)</li>
<li>Generátorová notace tabulky (<i>table comprehensions</i>)</li>
<li>Vylepšený slicing</li>
<li>Deklarace tříd</li>
<li>Deklarace třídních proměnných</li>
<li>Podpora pro anonymní třídy</li>
<li>atd.</li>
</ol>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dnešním článku si ukážeme pouze
vybrané vlastnosti Moonscriptu, které ukazují, jak lze relativně snadno
rozšířit jazyk Lua o &bdquo;syntaktický cukr&ldquo; &ndash; nové operátory,
nový způsob deklarace funkcí, interpolaci řetězců atd.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Svět transpřekladačů</h2>

<p>Problematikou takzvaných transpřekladačů (anglicky <i>transcompilers</i>
nebo taktéž <i>source-to-source compilers</i>) jsme se již na <a
href="https://www.root.cz">stránkách Rootu</a> zabývali, a to dokonce
několikrát. Připomeňme si například projekty <a
href="https://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">ClojureScript</a>
(což je transpřekladač Clojure &rarr; JavaScript), popř.&nbsp;projekty <a
href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/#k06">lua2js</a>
(transpřekladač Lua &rarr; opět JavaScript) a <a
href="https://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/">Wisp</a>
(programovací jazyk podobný Clojure transpřekládaný opět do JavaScriptu).
V&nbsp;předchozích větách byl použit výraz &bdquo;transpřekladač&ldquo;, takže
si ho ve stručnosti vysvětlíme. <i>Transpřekladače</i> jsou nástroje sloužící
pro překlad algoritmů zapsaných v&nbsp;nějakém zdrojovém programovacím jazyce
do zvoleného cílového programovacího jazyka (ovšem nikoli do nativního kódu či
bajtkódu, to je totiž role běžných překladačů).</p>

<p>Transpřekladače se v&nbsp;informatice používají již po několik desetiletí;
například se stále můžeme setkat s&nbsp;nástroji, které převádí kód
z&nbsp;nějakého vyššího programovacího jazyka do Céčka, které je
v&nbsp;současnosti s&nbsp;trochou nadsázky chápáno jako &bdquo;univerzální
assembler&ldquo;. Asi nejznámějším příkladem z&nbsp;této oblasti je nástroj
nazvaný <strong>web2c</strong>, jenž slouží pro transformaci zdrojových kódů
<i>TeXu</i> do céčka. Transpřekladače byly &ndash; a to zejména v&nbsp;minulém
desetiletí, konkrétně před příchodem ES6 &ndash; velmi populární i mezi
programátory webových aplikací, a to zejména z&nbsp;toho důvodu, že webové
prohlížeče nativně podporují většinou pouze JavaScript, který je tak přirozeně
cílovým jazykem transpřekladačů (proto se mu také někdy říká &bdquo;assembler
pro web&ldquo;, viz též <a href="#k20">odkazy na konci článku</a>). Určitou
revolucí byl v&nbsp;této oblasti právě <i>CoffeeScript</i>, ke kterému se dnes
ještě několikrát vrátíme. A&nbsp;mnoho vlastností CoffeeScriptu bylo převzato
do ES6 (ECMAScript 2015), což způsobilo postupný odklon od CoffeeScriptu.</p>

<p>Z&nbsp;praxe můžeme uvést například následující projekty založené na
transpřekladači:</p>

<table>
<tr><th>#</th><th>Jazyk či transpřekladač</th><th>Poznámka</th></tr>
<tr><td>1</td><td><a href="https://zdrojak.cz/clanky/coffeescript-radne-oslazeny-javascript/">CoffeeScript</a></td><td>přidání syntaktického cukru do JavaScriptu, dnes popisovaný Moonscript je jím inspirován</td></tr>
<tr><td>2</td><td><a href="https://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">ClojureScript</a></td><td>překlad aplikací psaných v&nbsp;jazyce Clojure do JavaScriptu</td></tr>
<tr><td>3</td><td>TypeScript</td><td>nadmnožina jazyka JavaScript, přidání datových typů</td></tr>
<tr><td>4</td><td>6to5</td><td>transpřeklad z&nbsp;ECMAScript 6 (v&nbsp;roce 2015 nová varianta JavaScriptu) do starší varianty JavaScriptu</td></tr>
<tr><td>5</td><td>Kaffeine</td><td>rozšíření JavaScriptu (opět!) o nové vlastnosti</td></tr>
<tr><td>6</td><td>RedScript</td><td>programovací jazyk inspirovaný Ruby</td></tr>
<tr><td>7</td><td>GorillaScript</td><td>další rozšíření JavaScriptu (JavaScript evidentně potřeboval různá rozšíření :-)</td></tr>
<tr><td>8</td><td>ghcjs</td><td>transpřekladač pro fanoušky programovacího jazyka Haskell</td></tr>
<tr><td>9</td><td>Haxe</td><td>transpřekladač, mezi jehož cílové jazyky patří i Java a JavaScript</td></tr>
<tr><td>10</td><td><a href="https://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/">Wisp</a></td><td>transpřekladač jazyka podobného Clojure, opět do JavaScriptu</td></tr>
<tr><td>11</td><td>ScriptSharp</td><td>transpřekladač z&nbsp;C# do JavaScriptu</td></tr>
<tr><td>12</td><td>Dart</td><td>transpřekladač z&nbsp;jazyka Dart do JavaScriptu</td></tr>
<tr><td>13</td><td>COBOL &rarr; C</td><td>transpřekladač OpenCOBOL</td></tr>
<tr><td>14</td><td>COBOL &rarr; Java</td><td>transpřekladač P3COBOL</td></tr>
<tr><td>15</td><td><a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/#k06">lua2js</a></td><td>transpřekladač jazyka Lua, opět do JavaScriptu</td></tr>
<tr><td>16</td><td><a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">Coconut</a></td><td>transpřekladač do Pythonu</td></tr>
<td><td>17</td><td><strong>Moonscript</strong></td><td>transpřekladač do jazyka Lua, jímž se budeme zabývat dnes</td></td>
</table>

<p><div class="rs-tip-major">Poznámka: z&nbsp;předchozího seznamu je zřejmé, že
transpřekladače byly či stále jsou používány v&nbsp;prostředí, které podporuje
pouze jediný cílový jazyk, což byl před příchodem technologie WASM případ
webových prohlížečů.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Příklad podobného transpřekladače pro odlišný ekosystém: Coconut</h2>

<p>Jeden zajímavý a přitom s&nbsp;dnešním tématem velmi dobře korespondující
tranpřekladač se jmenuje <i>Coconut</i>. Ten je navržen takovým způsobem, aby
byl zpětně kompatibilní s&nbsp;Pythonem. To znamená, že skript napsaný
v&nbsp;Pythonu je současně i skriptem napsaným v&nbsp;jazyku Coconut (což je
zajímavé, protože do Coconutu byla přidána tři nová klíčová slova
<strong>data</strong>, <strong>match</strong> a <strong>case</strong>, jejichž
význam se však rozlišuje z&nbsp;kontextu). Coconut je tak možné považovat za
sémantické i syntaktické rozšíření Pythonu, přičemž se autor tohoto jazyka
zaměřil především na funkcionální rysy (funkce vyššího řádu, neměnitelné
hodnoty, podpora pro tvorbu kolon a kompozic funkcí atd.) a taktéž do Coconutu
přidal podporu pro pattern matching (inspiraci získal <a
href="https://github.com/Suor/patterns">zde</a>). Coconut může pracovat jako
interpret s&nbsp;interaktivní smyčkou REPL či jako transpřekladač
(transcompiler, transpiler) do jazyka Python, takže je možné použít celý
pythonovský ekosystém. Přesnější informace o tom, se kterými verzemi Pythonu je
Coconut kompatibilní, naleznete na adrese <a
href="http://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions">http://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions</a>.</p>

<p>Vzhledem k&nbsp;tomu, že je programovací jazyk Coconut implementován jako
transpřekladač a současně se jedná o jazyk tvořící nadmnožinu Pythonu, je
v&nbsp;něm možné použít prakticky všechny knihovny pythonovského ekosystému,
což platí zejména pro CPython a PyPy, i když větší problémy nelze předpokládat
ani v&nbsp;případě použití Jythonu či IronPythonu. Navíc je pro všechny
programátory znající Python vlastně velmi jednoduché přejít na Coconut &ndash;
stále je totiž možné využít stávající syntaxi a sémantiku Pythonu a rozšíření
přidaná Coconutem použít jen v&nbsp;těch místech, kde to má v&nbsp;daný okamžik
význam. To je zásadní rozdíl od některých jiných (nejenom funkcionálních)
jazyků, s&nbsp;nimiž se programátor může setkat a které mnohdy vyžadují, aby se
začal učit jak nový programovací jazyk, tak i jeho ekosystém (který je navíc u
nově vznikajících jazyků zpočátku malý, navíc může být spousta knihoven
dostupných jen v&nbsp;alfa verzích).</p>

<p><div class="rs-tip-major">Poznámka: tato potenciálně velmi užitečná a
praktická vlastnost ovšem neplatí pro Moonscript a jeho vztah k&nbsp;jazyku
Lua.</div></p>

<p>Použití transpřekladače však přináší i některé nevýhody, které se projeví
například ve chvíli, kdy v&nbsp;programu vznikne chyba či nezachycená výjimka.
V&nbsp;takovém případě totiž získáme <i>stack trace</i> platný pro výsledný
pythonovský program, nikoli pro uživatelem vytvořený kód. V&nbsp;některých
prostředích lze tomuto negativnímu jevu zabránit použitím technologie <i>source
map</i>, což jsou (zjednodušeně řečeno) soubory s&nbsp;mapováním mezi
řádkem+příkazem v&nbsp;transpilovaném kódu a řádkem+příkazem v&nbsp;originálním
zdrojovém kódu (v&nbsp;tomto případě je i <i>minifikace</i> považována za jednu
z&nbsp;forem transpilace).</p>

<p><div class="rs-tip-major">Poznámka: source mapy však nejsou v&nbsp;dále
popsaném Moonscriptu podporovány, stejně jako nejsou podporovány v&nbsp;celém
ekosystému jazyka Lua.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace Moonscriptu</h2>

<p>Po krátké odbočce do ekosystému programovacího jazyka Python a
transpřekladačů do tohoto dnes velmi populárního programovacího jazyka se
vraťme k&nbsp;projektu <i>Moonscript</i>. Popíšeme si totiž instalaci
Moonscriptu, a to jak s&nbsp;využitím distribuce <a
href="https://www.root.cz/clanky/ulua-univerzalni-distribuce-programovaciho-jazyka-lua/">ULua</a>,
tak i s&nbsp;využitím správce balíčků nazvaného <i>LuaRocks</i>.</p>

<p>Pokud máte nainstalován nástroj <i>ULua</i>, je instalace Moonscriptu
snadná. Nejdříve se přesvědčíme, že daný balíček vůbec existuje:</p>

<pre>
$ <strong>cd ulua/bin</strong>
&nbsp;
$ <strong>./upkg available |grep moonscript</strong>
&nbsp;
+ crescent        | crescent : a command-line program for moonscript - with pretty colors!  | 0.3.0-103, 0.2.0-103, 0.1.1-103
+ moon            | moonscript : A programmer friendly language that compiles to Lua        | 0.5.0-103, 0.4.0-103, 0.3.2-103
+ moongrahams     | moongrahams :  lua/moonscript library for performing bayesian analysis  | 0.0-103
+ moonpick        | moonpick : An alternative moonscript linter.                            | 0.8-103, 0.6-103
+ moonscript      | moonscript : A programmer friendly language that compiles to Lua        | 0.5.0-103, 0.4.0-103, 0.3.2-103
+ placeholder     | moon-watch : better -watch for moonscript(moonc) for MacOS              | 0.2-203
</pre>

<p>Zobrazit si můžeme i podrobnější informace o nalezeném balíčku
<strong>moonscript</strong>:</p>

<pre>
$ <strong>./upkg available moonscript</strong>
&nbsp;
Module information:
name        : moonscript
version     : 0.5.0-103
require     : alt_getopt~0.7, lfs~1.5, lpeg~0.10, luajit~2.0, moon~0.5.0-103, re~0.10
description : moonscript : A programmer friendly language that compiles to Lua
homepage    : http://moonscript.org
license     : MIT
</pre>

<p>Ve třetím kroku provedeme instalaci balíčku <strong>moonscript</strong> i
všech dalších potřebných balíčků, což je zejména balíček <strong>lpeg</strong>
s&nbsp;podporou regulárních výrazů:</p>

<pre>
$ <strong>./upkg add moonscript</strong>
&nbsp;
Installing matching module and its requirements:
+ alt_getopt | alt-getopt : Process application arguments the same way as getopt_long | 0.8.0-103
+ lpeg       | lpeg : Parsing Expression Grammars For Lua                             | 0.12.2-103
+ moon       | moonscript : A programmer friendly language that compiles to Lua       | 0.5.0-103
+ moonscript | moonscript : A programmer friendly language that compiles to Lua       | 0.5.0-103
+ re         | lpeg : Parsing Expression Grammars For Lua                             | 0.12.2-103
Confirm (y/n)?
&nbsp;
Downloading:
+ /pkg/alt_getopt/0.8.0-103 | 100% of 4KB
+ /pkg/moon/0.5.0-103       | 100% of 14KB
+ /pkg/re/0.12.2-103        | 100% of 2KB
+ /pkg/lpeg/0.12.2-103      | 100% of 133KB
+ /pkg/moonscript/0.5.0-103 | 100% of 58KB
Done
</pre>

<p>Po provedení předchozích kroků by se mělo v&nbsp;adresáři
<strong>~/ulua/bin/</strong> objevit několik nových spustitelných souborů:</p>

<pre>
$ <strong>ls -1</strong>
&nbsp;
<strong>moon</strong>
<strong>moonc</strong>
<strong>moonc.cmd</strong>
<strong>moon.cmd</strong>
scilua
scilua.cmd
upkg
upkg.cmd
</pre>

<p>A obsah adresáře <strong>~/ulua</strong> se změní následovně:</p>

<pre>
.
├── alt_getopt
│   └── 0_8_0+103
├── bin
├── clib_libcurl
│   └── 7_42_1+3
├── clib_libopenblas
│   └── 0_2_15
├── cURL
│   └── 0_3_1+103
├── host
│   ├── init
│   ├── pkg
│   └── tmp
├── lcurl
│   └── 0_3_1+103
├── lfs
│   └── 1_6_3+203
├── lpeg
│   └── 0_12_2+103
├── luajit
│   └── 2_1_head20151128
├── <strong>moon</strong>
│   └── 0_5_0+103
├── <strong>moonscript</strong>
│   └── 0_5_0+103
├── pkg
│   └── 1_0_beta10
├── re
│   └── 0_12_2+103
├── sci
│   └── 1_0_beta12
├── sci-lang
│   └── 1_0_beta10
├── serpent
│   └── 0_28+103
└── xsys
    └── 1_0_2
</pre>

<p>Alternativně je možné pro instalaci použít správce balíčků
<strong>luarocks</strong>, a to následovně:</p>

<pre>
$ <strong>luarocks install moonscript</strong>
</pre>

<p>V&nbsp;obou případech by měl být k&nbsp;dispozici příkaz
<strong>moon</strong> a <strong>moonc</strong>:</p>

<pre>
$ <strong>./moon -v</strong>
&nbsp;
MoonScript version 0.5.0
&nbsp;
$ <strong>./moon --help</strong>
Usage: /home/ptisnovs/ulua/bin/../moonscript/0_5_0+103/__bin/moon [options] [script [args]]

    -h          Print this message
    -d          Disable stack trace rewriting
    -c          Collect and print code coverage
    -v          Print version
</pre>

<pre>
$ <strong>./moonc --help</strong>
&nbsp;
Usage: /home/ptisnovs/ulua/bin/../moonscript/0_5_0+103/__bin/moonc [options] files...
&nbsp;
    -h          Print this message
    -w          Watch file/directory
    -t path     Specify where to place compiled files
    -o file     Write output to file
    -p          Write output to standard out
    -T          Write parse tree instead of code (to stdout)
    -X          Write line rewrite map instead of code (to stdout)
    -l          Perform lint on the file instead of compiling
    -b          Dump parse and compile time (doesn't write output)
    -v          Print version
&nbsp;
    --          Read from standard in, print to standard out
                (Must be first and only argument)
</pre>

<p><div class="rs-tip-major">Poznámka: užitečný je zejména přepínač
<strong>-w</strong>, který umožňuje hlídat změny ve zdrojových souborech ve
zvoleném adresáři s&nbsp;tím, že tyto soubory budou okamžitě transpřekládány
z&nbsp;Moonscriptu do jazyka Lua.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Tradiční začátek &ndash; &bdquo;Hello, world!&ldquo; v&nbsp;Moonscriptu i v&nbsp;jazyce Lua</h2>

<p>V&nbsp;programovacím jazyce Lua lze program či skript typu &bdquo;Hello,
world!&ldquo; napsat následovně:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Lua</i>
<i>--</i>
&nbsp;
print("Hello, world!")
</pre>

<p>Ve skutečnosti je možné při volání funkce mající pouze jediný parametr typu
řetězec popř.&nbsp;tabulka použít při volání funkce zápis bez kulatých závorek,
tedy takto:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Lua</i>
<i>--</i>
&nbsp;
print "Hello, world!"
</pre>

<p>Přesně takovým způsobem se zapisuje volání funkce i v&nbsp;Moonscriptu, a to
i pro funkce s&nbsp;větším počtem parametrů, popř.&nbsp;parametrů jiného typu
než jen řetězec a tabulka:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
print "Hello, world!"
</pre>

<p>Překlad předchozího skriptu do jazyka Lua nástrojem <strong>moonc</strong>
by měl vytvořit tento zdrojový soubor plně kompatibilní s&nbsp;jazykem Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
return print("Hello, world!")
</pre>

<p><div class="rs-tip-major">Poznámka: důvodem, proč je volání funkce umístěno
do konstrukce <strong>return</strong>, se budeme zabývat v&nbsp;navazujícím
textu.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Lokální proměnné</h2>

<p>Jedním z&nbsp;méně šťastných rozhodnutí při návrhu programovacího jazyka Lua
bylo, že (automaticky) nově vytvářené proměnné jsou globální, nikoli lokální
(jak je tomu například v&nbsp;Pythonu). To například znamená, že následující
skript vypíše hodnotu <strong>42</strong>, protože proměnná <strong>x</strong>
byla ve funkci definována jako globální:</p>

<pre>
function foo()
    x = 42
end
&nbsp;
foo()
print(x)
</pre>

<p>V&nbsp;Moonscriptu se před (automaticky) vytvářené proměnné po transpřekladu
přidává klíčové slovo <strong>local</strong>, takže proměnná je vytvořena jako
lokální v&nbsp;rámci aktuálního bloku (typicky funkce):</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
message = "Hello, world!"
&nbsp;
print message
</pre>

<p>Výsledek transpřekladu:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local message = "Hello, world!"
return print(message)
</pre>

<p>Samozřejmě ovšem není klíčové slovo <strong>local</strong> přidáváno před
každý přiřazovací výraz, ale pouze při prvním přiřazení:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
message = nil
message = "Hello, world!"
&nbsp;
print message
</pre>

<p>Výsledek transpřekladu tohoto demonstračního skriptu:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local message = nil
message = "Hello, world!"
return print(message)
</pre>

<p>V&nbsp;případě, že se neprovádí přiřazení, ale pouze čtení proměnné, vrátí
se v&nbsp;obou jazycích hodnota <strong>nil</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
print message
</pre>

<p>Výsledek:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
return print(message)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Interpolace řetězců</h2>

<p>Velmi užitečným rozšířením CoffeeScriptu a jím inspirovaného Moonscriptu je
podpora pro takzvanou <i>interpolaci</i> řetězců. Jedná se o mechanismus, který
vývojářům umožňuje psát do řetězce výrazy, které jsou vyhodnoceny, převedeny na
řetězec a vloženy do generovaného řetězce. Tyto výrazy se zapisují mezi znaky
<strong>#{</strong> a <strong>}</strong>. Alternativní zápis klasického
programu typu &bdquo;Hello, world!&ldquo; založený na interpolaci řetězců tedy
může vypadat například takto:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
a = "Hello"
b = "world"
&nbsp;
print "#{a}, #{b}!"
</pre>

<p>Programovací jazyk Lua interpolaci řetězců neumožňuje a proto bylo nutné
předchozí skript transpřeložit tímto způsobem:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local a = "Hello"
local b = "world"
return print(tostring(a) .. ", " .. tostring(b) .. "!")
</pre>

<p>Mezi znaky <strong>#{</strong> a <strong>}</strong> může být zapsán i
složitější výraz:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
x = 6
y = 7
&nbsp;
print "#{x} * #{y} = #{x*y}"
</pre>

<p>Transformace do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local x = 6
local y = 7
return print(tostring(x) .. " * " .. tostring(y) .. " = " .. tostring(x * y))
</pre>

<p>Interpolaci řetězců lze snadno zakázat, a to konkrétně použitím apostrofů
namísto uvozovek při zápisu řetězce:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
x = 6
y = 7
&nbsp;
print '#{x} * #{y} = #{x*y}'
</pre>

<p>Transformace do jazyka Lua nyní interpolaci řetězců nepoužívá:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local x = 6
local y = 7
return print('#{x} * #{y} = #{x*y}')
</pre>

<p><div class="rs-tip-major">Poznámka: jak uvidíme dále, je v&nbsp;Moonscriptu
naprostá většina programových konstrukcí považována za <i>výraz</i>, což se
mj.&nbsp;týká i rozhodovacích konstrukcí typu
<strong>if-then-else</strong>.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Víceřádkové řetězce</h2>

<p>V&nbsp;<i>Moonscriptu</i> jsou, ostatně naprosto stejně jako
v&nbsp;<i>CoffeeScriptu</i>, podporovány víceřádkové řetězce. Ty se přitom
zapisují tím nejjednodušším možným způsobem &ndash; pokud řetězec na řádku
nekončí uvozovkami (nebo apostrofem), jsou odpovídající koncové uvozovky
hledány na dalších řádcích. Není tedy nutné mít speciální syntaktická pravidla
pro jednořádkové a víceřádkové řetězce. Podívejme se nyní na jednoduchý
demonstrační příklad s&nbsp;běžným testovacím &bdquo;dokumentem&ldquo; Lorem
ipsum:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
message = "Lorem ipsum dolor sit amet,
consectetur adipiscing elit, sed do
eiusmod tempor incididunt ut labore et
dolore magna aliqua. Ut enim ad minim
veniam, quis nostrud exercitation ullamco
laboris nisi ut aliquip ex ea commodo
consequat."
&nbsp;
print message
</pre>

<p>Tento skript se převede do jazyka Lua takovým způsobem, že se řetězec
zapsaný na více řádků převede na jednořádkový řetězec, v&nbsp;němž se ovšem
explicitně použijí řídicí znaky <strong>\n</strong> (což je pochopitelně mnohem
méně čitelné, než původní skript):</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local message = "Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit, sed do\neiusmod tempor incididunt ut labore et\ndolore magna aliqua. Ut enim ad minim\nveniam, quis nostrud exercitation ullamco\nlaboris nisi ut aliquip ex ea commodo\nconsequat."
return print(message)
</pre>

<p><div class="rs-tip-major">Poznámka: příkladem může být generování HTML
stránky, pokud se ovšem nepoužije nějaký šablonovací systém.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Nové operátory</h2>

<p>Původní programovací jazyk Lua nabízí programátorům následující sadu
operátorů, které se používají při zápisu aritmetických výrazů, logických
výrazů, relačních výrazů, popř.&nbsp;pro práci s&nbsp;řetězci:</p>

<table>
<tr><th>Priorita</th><th>Kategorie</th><th>Operátor</th><th>Asociativita</th></tr>
<tr><td>1</td><td>unární</td><td>not # -</td><td>zprava doleva</td></tr>
<tr><td>2</td><td>konkatenace</td><td>..</td><td>zprava doleva</td></tr>
<tr><td>3</td><td>multiplikativní</td><td>* / %</td><td>zleva doprava</td></tr>
<tr><td>4</td><td>aditivní</td><td>+ -</td><td>zleva doprava</td></tr>
<tr><td>5</td><td>relační</td><td>&lt; &gt; &lt;= &gt;</td><td>zleva doprava</td></tr>
<tr><td>6</td><td>test na rovnost/nerovnost</td><td>== ~=</td><td>zleva doprava</td></tr>
<tr><td>7</td><td>logický součin</td><td>and</td><td>zleva doprava</td></tr>
<tr><td>I</td><td>logický součet</td><td>or</td><td>zleva doprava</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: do výše uvedené tabulky ještě můžeme
přidat operátor pro umocnění, který však vyžaduje slinkování se standardní
céčkovou matematickou knihovnou a proto nemusí být dostupný ve všech
prostředích &ndash; typicky ho nenajdeme na mikrořadičích.</div></p>

<p>V&nbsp;jazyce Moonscript je počet operátorů zvýšen. Prvním (staro)novým
operátorem je operátor <strong>!=</strong>, který má stejný význam jako
standardní operátor <strong>~=</strong> &ndash; jedná se tedy o test na
nerovnost dvou hodnot. Důvodem pro přidání operátoru <strong>!=</strong> je
pochopitelně lepší srozumitelnost pro programátory znalé některého jazyka
z&nbsp;céčkové vývojové větve programovacích jazyků.</p>

<p>Funkci nového operátoru si můžeme snadno ověřit například na tomto
skriptu:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
x = 1
y = 2
&nbsp;
print x==2
print x!=2
print x~=2
</pre>

<p>Kód transpilovaný do jazyka Lua ukazuje, že <strong>!=</strong> je skutečně
převeden na operátor <strong>~=</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local x = 1
local y = 2
print(x == 2)
print(x ~= 2)
return print(x ~= 2)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Kombinace aritmetické, logické i řetězcové operace s&nbsp;přiřazením</h2>

<p>S&nbsp;operátorem přiřazení, který se zapisuje jediným znakem
<strong>=</strong>, jsme se již setkali, takže jen pro úplnost:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
a = 10
b = "foo"
c = {1,2,3}
&nbsp;
print a
print b
print c
</pre>

<p>Korespondující kód v&nbsp;jazyku Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local a = 10
local b = "foo"
local c = {
  1,
  2,
  3
}
print(a)
print(b)
return print(c)
</pre>

<p>Tento operátor byl rozšířen o možnost provést přiřazení společně
s&nbsp;další aritmetickou, logickou či řetězcovou operací, a to za předpokladu,
že je použita stejná proměnná jak na levé straně, tak i na pravé straně
původního výrazu. To znamená, že výraz:</p>

<pre>
x = x &oplus; y
</pre>

<p>lze zapsat i formou:</p>

<pre>
x &oplus;= y
</pre>

<p>a to pro jakýkoli binární operátor zmíněný <a href="#k09">v&nbsp;předchozí
kapitole</a>.</p>

<p><div class="rs-tip-major">Poznámka: znak &oplus; zde nahrazuje skutečný
operátor.</div></p>

<p>Podívejme se nyní na kombinaci přiřazení s&nbsp;aritmetickou operací:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
a = 10
b = 20
c = 30
&nbsp;
a += 10
b /= 2
c %= 7
&nbsp;
print a
print b
print c
</pre>

<p>Převod do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local a = 10
local b = 20
local c = 30
a = a + 10
b = b / 2
c = c % 7
print(a)
print(b)
return print(c)
</pre>

<p>Přiřazení lze zkombinovat i s&nbsp;operací pro konkatenaci řetězců:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
msg = "Hello, "
msg ..= "world"
msg ..= "!"
&nbsp;
print msg
</pre>

<p>Převod do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local msg = "Hello, "
msg = msg .. "world"
msg = msg .. "!"
return print(msg)
</pre>

<p>A konečně je možné přiřazení zkombinovat s&nbsp;logickými operátory:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
x = true
y = false
&nbsp;
print x
print y
&nbsp;
x and= y
y or= true
&nbsp;
print x
print y
</pre>

<p>Převod do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local x = true
local y = false
print(x)
print(y)
x = x and y
y = y or true
print(x)
return print(y)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Modifikovaná syntaxe volání funkcí</h2>

<p>V&nbsp;Moonscriptu došlo i k&nbsp;modifikaci (resp.&nbsp;přesněji řečeno
k&nbsp;rozšíření) syntaxe při volání funkcí. Nejprve se podívejme na skript,
který je sice psaný v&nbsp;Moonscriptu, ale je současně kompatibilní i
s&nbsp;Luou. Povšimněte si, že u funkce s&nbsp;jediným parametrem typu řetězec
není nutné okolo tohoto parametru psát kulaté závorky:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
print "Hello"
print()
print("world")
print("foo", "bar")
</pre>

<p>Výsledek transpřekladu:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
print("Hello")
print()
print("world")
return print("foo", "bar")
</pre>

<p>V&nbsp;Moonscriptu jsou ve skutečnosti závorky okolo parametrů volitelné a
není je nutné používat. Má to ovšem jeden háček &ndash; jak zajistit volání
funkce bez parametrů. To je řešeno přidáním znaku ! za jméno funkce (ovšem
pokud vám to připadne divné, je pochopitelně stále možné použít prázdné kulaté
závorky):</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
print "Hello"
print!
print "world"
print "foo", "bar"
</pre>

<p>Výsledek transpřekladu:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
print("Hello")
print()
print("world")
return print("foo", "bar")
</pre>

<p><div class="rs-tip-major">Poznámka: až při pohledu na zdrojové kódy psané
v&nbsp;CoffeeScriptu nebo Moonscriptu začne být zřejmé, kolik
&bdquo;balastu&ldquo; vlastně musíme psát v&nbsp;céčkové větvi programovacích
jazyků.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Definice nových funkcí operátorem -&gt;</h2>

<p>V&nbsp;CoffeeScriptu se (alespoň v&nbsp;doméně mainstreamových
programovacích jazyků) poprvé objevil &bdquo;operátor šipky&ldquo; použitý pro
definici nových anonymních funkcí, pochopitelně s&nbsp;tím, že výslednou funkci
je možné přiřadit symbolu a tím ji udělat neanonymní (pojmenovanou). Kromě
operátoru &bdquo;tenké&ldquo; šipky <strong>-&gt;</strong> existuje ještě
operátor &bdquo;tlusté&ldquo; šipky <strong>=&gt;</strong>, který má odlišný
význam, protože mj.&nbsp;zajišťuje navázání na v&nbsp;daném kontextu aktuální
hodnotu <strong>this</strong> resp.&nbsp;<strong>self</strong>. Později se
tento operátor (po určité modifikaci sémantiky, ke které se ještě vrátíme)
objevil i v&nbsp;ES6, takže je dnes široce používán.</p>

<p>Vraťme se však k&nbsp;operátoru &bdquo;tenké&ldquo; šipky, kterým lze
v&nbsp;Moonscriptu nahradit klasickou definici funkce s&nbsp;využitím klíčových
slov <strong>function</strong>, <strong>end</strong> a <strong>return</strong>.
Tento operátor byl převzat z&nbsp;CoffeeScriptu, kde měl následující
podobu:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce CoffeeScript</i>
<i>--</i>
&nbsp;
square = (x) -&gt; x * x
cube   = (x) -&gt; square(x) * x
</pre>

<p>Transpřeklad do JavaScriptu vypadá následovně:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka JavaScript</i>
<i>--</i>
&nbsp;
&nbsp;
var cube, square;
&nbsp;
square = function(x) {
  return x * x;
};
&nbsp;
cube = function(x) {
  return square(x) * x;
};
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Prázdná funkce bez parametrů</h2>

<p>Začneme poněkud umělým příkladem, a to konkrétně funkcí bez parametrů, která
navíc ani nemá žádné tělo. V&nbsp;Moonscriptu se tato funkce deklaruje a volá
takto:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
noop_function = -&gt;
&nbsp;
noop_function!
</pre>

<p>Výsledkem transpřekladu je skutečně definice nové funkce, která má prázdné
tělo, tedy: <strong>function() end</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local noop_function
noop_function = function() end
return noop_function()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Funkce s&nbsp;tělem, ovšem bez parametrů</h2>

<p>Druhou funkcí vytvořenou operátorem šipky, kterou si dnes ukážeme, je
funkce, která má tělo, ovšem neakceptuje žádné parametry. V&nbsp;případě, že
tělo této funkce obsahuje pouze jediný příkaz, je ji možné zapsat (a následně
zavolat) následovně:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
noarg_function = -&gt; print "Hello, world!"
&nbsp;
noarg_function!
</pre>

<p>Povšimněte si, že při transpřekladu do jazyka Lua bude poslední (a současně
i jediný) příkaz v&nbsp;těle funkce zavolán uvnitř konstrukce
<strong>return</strong>, což je pro Moonscript typické:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local noarg_function
noarg_function = function()
  return print("Hello, world!")
end
return noarg_function()
</pre>

<p>Funkce obsahující více příkazů ve svém těle se typicky zapisuje na větší
počet řádků:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
noarg_function = -&gt;
    message = "Hello, "
    message ..= "world!"
    print message
&nbsp;
noarg_function!
</pre>

<p>Ze skriptu transformovaného do jazyka Lua je patrné, že poslední příkaz
v&nbsp;těle funkce je opět zavolán v&nbsp;rámci konstrukce
<strong>return</strong> a tudíž je jeho návratová hodnota návratovou hodnotou
celé funkce:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local noarg_function
noarg_function = function()
  local message = "Hello, "
  message = message .. "world!"
  return print(message)
end
return noarg_function()
</pre>

<p><div class="rs-tip-major">Poznámka: všechny funkce, tedy i
<strong>print</strong>, vrací hodnotu. Touto hodnotou je v&nbsp;případě
neexistence konstrukce <strong>return</strong> hodnota <strong>nil</strong>
(ovšem v&nbsp;Moonscriptu je <strong>return</strong> vždy přidán
automaticky).</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Návratová hodnota funkce</h2>

<p>Předchozí funkce vracely návratovou hodnotu volané funkce
<strong>print</strong>, což neukazuje všechny možnosti, které nám programovací
jazyk Moonscript nabízí. Ukažme si tedy způsob definice funkce, která vrací
skutečnou (vypočtenou) hodnotu. Prozatím nevíme, jak se deklaruje funkce
s&nbsp;parametry, takže použijeme funkci bez parametrů, ovšem s&nbsp;návratovou
hodnotou. Zápis využívající explicitní konstrukci <strong>return</strong> bude
vypadat takto:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
my_random = -&gt;
    return math.random(1, 10)
&nbsp;
for i = 0, 10 do
    print my_random!
</pre>

<p>Překlad do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local my_random
my_random = function()
  return math.random(1, 10)
end
for i = 0, 10 do
  print(my_random())
end
</pre>

<p>Ovšem konstrukci <strong>return</strong> je ve skutečnosti možné vynechat,
protože hodnota posledního výrazu ve funkci je z&nbsp;této funkce vrácena
automaticky:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
my_random = -&gt;
    math.random(1, 10)
&nbsp;
for i = 0, 10 do
    print my_random!
</pre>

<p>Překlad do jazyka Lua je v&nbsp;tomto případě totožný s&nbsp;předchozím
příkladem:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local my_random
my_random = function()
  return math.random(1, 10)
end
for i = 0, 10 do
  print(my_random())
end
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Definice funkce s&nbsp;parametry</h2>

<p>Nyní se podívejme na způsob zápisu funkce s&nbsp;parametry. Jména těchto
parametrů je nutné zapsat do kulatých závorek a uvést je před operátor šipky.
Jednoduchá funkce vracející součin svých dvou parametrů tedy může vypadat
takto:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
multiply = (x, y) -&gt; x * y
&nbsp;
print multiply 6,7
</pre>

<p><div class="rs-tip-major">Poznámka: opět pochopitelně platí, že poslední
(zde jediný) výraz je současně i návratovou hodnotou celé funkce.</div></p>

<p>Takto nadefinovaná funkce je transpilována na příslušný Lua skript
následujícím způsobem:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local multiply
multiply = function(x, y)
  return x * y
end
return print(multiply(6, 7))
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Návrat většího množství hodnot z&nbsp;funkce</h2>

<p>V&nbsp;případě, že je nutné z&nbsp;funkce vrátit větší množství hodnot (což
dovoluje již programovací jazyk Lua), lze použít následující styl zápisu:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
swap = (x, y) -&gt; y, x
&nbsp;
print swap "foo", "bar"
</pre>

<p>V&nbsp;tomto případě je výsledek posledního (a jediného) výrazu ve funkci
vrácen jako dvojice parametrů, což si můžeme snadno ověřit spuštěním
transpilovaného kódu, který by měl vypsat předané parametry, ovšem
v&nbsp;opačném pořadí:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local swap
swap = function(x, y)
  return y, x
end
return print(swap("foo", "bar"))
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Parametry funkce s&nbsp;implicitní hodnotou</h2>

<p>Poněkud složitější je práce transpřekladače Moonscriptu ve chvíli, kdy
budeme potřebovat deklarovat funkci, jejích (některé) parametry budou mít
výchozí hodnotu. To je jazyková konstrukce, kterou jazyk Lua nepodporuje, ovšem
je to v&nbsp;praxi velmi užitečná konstrukce. Proto ji můžeme použít
v&nbsp;Moonscriptu. Způsob zápisu odpovídá (například) programovacímu jazyku
Python:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
sum = (x=0, y=0, z=0) -&gt; x + y + z
&nbsp;
print sum!
print sum 1
print sum 1, 2
print sum 1, 2, 3
</pre>

<p>Vidíme, že funkci <strong>sum</strong> lze volat bez parametrů,
s&nbsp;jedním parametrem, se dvěma parametry nebo s&nbsp;parametry třemi.
Transpřeklad do jazyka Lua bude vypadat takto:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local sum
sum = function(x, y, z)
  if x == nil then
    x = 0
  end
  if y == nil then
    y = 0
  end
  if z == nil then
    z = 0
  end
  return x + y + z
end
print(sum())
print(sum(1))
print(sum(1, 2))
return print(sum(1, 2, 3))
</pre>

<p>Vidíme, že parametry jsou vyhodnocovány v&nbsp;těle funkce! To nám umožňuje
zajímavý trik &ndash; výchozí hodnoty některých parametrů mohou být odvozeny
z&nbsp;jiných výchozích parametrů, protože víme, že výpočet skutečných hodnot
parametrů se provádí zleva doprava:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
weird_sum = (x=0, y=x+1, z=y*2) -&gt; x + y + z
&nbsp;
print sum!
print sum 1
print sum 1, 2
print sum 1, 2, 3
</pre>

<p>Výsledkem je korektní kód reprezentovaný v&nbsp;jazyce Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local weird_sum
weird_sum = function(x, y, z)
  if x == nil then
    x = 0
  end
  if y == nil then
    y = x + 1
  end
  if z == nil then
    z = y * 2
  end
  return x + y + z
end
print(sum())
print(sum(1))
print(sum(1, 2))
return print(sum(1, 2, 3))
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady určené pro poslední stabilní
verzi transpřekladače <i>Moonscript</i> byly uloženy do Git repositáře, který
je dostupný na adrese <a
href="https://github.com/tisnik/moonscript-examples">https://github.com/tisnik/moonscript-examples</a>.
Tyto demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes prozatím malý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis příkladu</th><th>Adresa (zdrojový kód)</th></tr>
<tr><td> 1</td><td>01_hello_world.lua</td><td>tradiční program typu &bdquo;Hello, world!&ldquo; napsaný v&nbsp;Lue</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/01_hello_world.lua">https://github.com/tisnik/moonscript-examples/blob/master/01_hello_world.lua</a></td></tr>
<tr><td> 2</td><td>02_hello_world.lua</td><td>okolo jediného parametru funkce není zapotřebí psát závorky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/02_hello_world.lua">https://github.com/tisnik/moonscript-examples/blob/master/02_hello_world.lua</a></td></tr>
<tr><td> 3</td><td>03_hello_world.moon</td><td>tradiční program typu &bdquo;Hello, world!&ldquo; napsaný v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.moon">https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.moon</a></td></tr>
<tr><td> 4</td><td>03_hello_world.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.lua">https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.lua</a></td></tr>
<tr><td> 5</td><td>04_local_variable.moon</td><td>lokální proměnné v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.moon">https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.moon</a></td></tr>
<tr><td> 6</td><td>04_local_variable.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.lua">https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.lua</a></td></tr>
<tr><td> 7</td><td>05_local_variable.moon</td><td>opětovné přiřazení do lokální proměnné</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.moon">https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.moon</a></td></tr>
<tr><td> 8</td><td>05_local_variable.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.lua">https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.lua</a></td></tr>
<tr><td> 9</td><td>06_local_variable.moon</td><td>čtení z&nbsp;neexistující proměnné</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.moon">https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.moon</a></td></tr>
<tr><td>10</td><td>06_local_variable.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.lua">https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.lua</a></td></tr>
<tr><td>11</td><td>07_string_interpolation.moon</td><td>interpolace řetězců v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.moon">https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.moon</a></td></tr>
<tr><td>12</td><td>07_string_interpolation.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.lua">https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.lua</a></td></tr>
<tr><td>13</td><td>08_string_interpolation.moon</td><td>interpolace řetězců, složitější příklad v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.moon">https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.moon</a></td></tr>
<tr><td>14</td><td>08_string_interpolation.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.lua">https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.lua</a></td></tr>
<tr><td>15</td><td>09_string_interpolation.moon</td><td>zákaz interpolace řetězců v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.moon">https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.moon</a></td></tr>
<tr><td>16</td><td>09_string_interpolation.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.lua">https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.lua</a></td></tr>
<tr><td>17</td><td>10_multiline_string.moon</td><td>víceřádkové řetězce v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.moon">https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.moon</a></td></tr>
<tr><td>18</td><td>10_multiline_string.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.lua">https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.lua</a></td></tr>
<tr><td>19</td><td>11_comparison_operator.moon</td><td>nový operátor pro test na nerovnost v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.moon">https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.moon</a></td></tr>
<tr><td>20</td><td>11_comparison_operator.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.lua">https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.lua</a></td></tr>
<tr><td>21</td><td>12_simple_assignment.moon</td><td>operátor jednoduchého přiřazení</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.moon</a></td></tr>
<tr><td>22</td><td>12_simple_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.lua</a></td></tr>
<tr><td>23</td><td>13_operator_assignment.moon</td><td>přiřazení zkombinované s&nbsp;aritmetickou operací</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.moon</a></td></tr>
<tr><td>24</td><td>13_operator_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.lua</a></td></tr>
<tr><td>25</td><td>14_operator_assignment.moon</td><td>přiřazení zkombinované s&nbsp;připojením řetězce</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.moon</a></td></tr>
<tr><td>26</td><td>14_operator_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.lua</a></td></tr>
<tr><td>27</td><td>15_operator_assignment.moon</td><td>přiřazení zkombinované s&nbsp;logickou operací</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.moon</a></td></tr>
<tr><td>28</td><td>15_operator_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.lua</a></td></tr>
<tr><td>29</td><td>16_function_parameters.moon</td><td>volání funkce bez parametrů, s&nbsp;jedním parametrem i více parametry</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.moon">https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.moon</a></td></tr>
<tr><td>30</td><td>16_function_parameters.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.lua">https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.lua</a></td></tr>
<tr><td>31</td><td>17_function_no_parenthesis.moon</td><td>volání funkce bez použití kulatých závorek</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.moon">https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.moon</a></td></tr>
<tr><td>32</td><td>17_function_no_parenthesis.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.lua">https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.lua</a></td></tr>
<tr><td>33</td><td>18_arrow_empty_function.moon</td><td>deklarace prázdné funkci s&nbsp;využitím operátoru šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.moon</a></td></tr>
<tr><td>34</td><td>18_arrow_empty_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.lua</a></td></tr>
<tr><td>35</td><td>19_arrow_noarg_function.moon</td><td>deklarace funkce bez parametrů s&nbsp;využitím operátoru šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.moon</a></td></tr>
<tr><td>36</td><td>19_arrow_noarg_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.lua</a></td></tr>
<tr><td>37</td><td>20_arrow_noarg_larger_function.moon</td><td>delší funkce bez parametrů vytvořená s&nbsp;využitím operátoru šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.moon</a></td></tr>
<tr><td>38</td><td>20_arrow_noarg_larger_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.lua</a></td></tr>
<tr><td>39</td><td>21_arrow_return_value.moon</td><td>funkce vracející jednu hodnotu vytvořená operátorem šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.moon">https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.moon</a></td></tr>
<tr><td>40</td><td>21_arrow_return_value.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.lua">https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.lua</a></td></tr>
<tr><td>41</td><td>22_arrow_return_value.moon</td><td>návratová hodnota funkce bez nutnosti použití klíčového slova <strong>return</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.moon">https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.moon</a></td></tr>
<tr><td>42</td><td>22_arrow_return_value.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.lua">https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.lua</a></td></tr>
<tr><td>43</td><td>23_arrow_function_parameters.moon</td><td>parametry funkce vytvořené operátorem šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.moon">https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.moon</a></td></tr>
<tr><td>44</td><td>23_arrow_function_parameters.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.lua">https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.lua</a></td></tr>
<tr><td>45</td><td>24_arrow_multiple_return_values.moon</td><td>více návratových hodnot funkce</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.moon">https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.moon</a></td></tr>
<tr><td>46</td><td>24_arrow_multiple_return_values.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.lua">https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.lua</a></td></tr>
<tr><td>47</td><td>25_arrow_default_arguments.moon</td><td>parametry s&nbsp;implicitní hodnotou</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.moon</a></td></tr>
<tr><td>48</td><td>25_arrow_default_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.lua</a></td></tr>
<tr><td>49</td><td>26_arrow_default_arguments.moon</td><td>způsob inicializace parametrů s&nbsp;implicitní hodnotou</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.moon</a></td></tr>
<tr><td>50</td><td>26_arrow_default_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.lua</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránky projektu Moonscript<br />
<a href="https://moonscript.org/">https://moonscript.org/</a>
</li>

<li>Moonscript na GitHubu<br />
<a href="https://github.com/leafo/moonscript">https://github.com/leafo/moonscript</a>
</li>

<li>MoonScript online compiler<br />
<a href="https://moonscript.org/compiler/">https://moonscript.org/compiler/</a>
</li>

<li>Vydání Moonscriptu<br />
<a href="https://github.com/leafo/moonscript/releases">https://github.com/leafo/moonscript/releases</a>
</li>

<li>Moonscript-vim<br />
<a href="https://github.com/leafo/moonscript-vim">https://github.com/leafo/moonscript-vim</a>
</li>

<li>Moonscript Examples<br />
<a href="https://github.com/leafo/moonscript/wiki/Moonscript-Examples">https://github.com/leafo/moonscript/wiki/Moonscript-Examples</a>
</li>

<li>CoffeeScript<br />
<a href="https://coffeescript.org/">https://coffeescript.org/</a>
</li>

<li>CoffeeScript na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/CoffeeScript">https://en.wikipedia.org/wiki/CoffeeScript</a>
</li>

<li>CoffeeScript: řádně oslazený JavaScript<br />
<a href="https://zdrojak.cz/clanky/coffeescript-radne-oslazeny-javascript/">https://zdrojak.cz/clanky/coffeescript-radne-oslazeny-javascript/</a>
</li>

<li>CoffeeScript: druhá dávka steroidů pro vaše skripty<br />
<a href="https://zdrojak.cz/clanky/coffeescript-druha-davka-steroidu-pro-vase-skripty/">https://zdrojak.cz/clanky/coffeescript-druha-davka-steroidu-pro-vase-skripty/</a>
</li>

<li>Why CoffeeScript is still alive<br />
<a href="https://codeburst.io/why-coffeescript-is-still-alive-aeb369b91b85">https://codeburst.io/why-coffeescript-is-still-alive-aeb369b91b85</a>
</li>

<li>The CoffeeScript Wiki<br />
<a href="https://github.com/jashkenas/coffeescript/wiki">https://github.com/jashkenas/coffeescript/wiki</a>
</li>

<li>CoffeeScript In The Wild<br />
<a href="https://github.com/jashkenas/coffeescript/wiki/In-The-Wild">https://github.com/jashkenas/coffeescript/wiki/In-The-Wild</a>
</li>

<li>How CoffeeScript Got Forgotten<br />
<a href="https://betterprogramming.pub/how-coffeescript-got-forgotten-812328225987">https://betterprogramming.pub/how-coffeescript-got-forgotten-812328225987</a>
</li>

<li>ULua: Universal Lua Distribution<br />
<a href="https://ulua.io/index.html">https://ulua.io/index.html</a>
</li>

<li>LuaRocks<br />
<a href="https://luarocks.org/">https://luarocks.org/</a>
</li>

<li>Awesome Lua &ndash; A curated list of quality Lua packages and resources.<br />
<a href="https://github.com/LewisJEllis/awesome-lua">https://github.com/LewisJEllis/awesome-lua</a>
</li>

<li>LuaJIT<br />
<a href="https://luajit.org/">https://luajit.org/</a>
</li>

<li>Running LuaJIT<br />
<a href="https://luajit.org/running.html">https://luajit.org/running.html</a>
</li>

<li>LuaJIT na GitHubu<br />
<a href="https://github.com/luajit">https://github.com/luajit</a>
</li>

<li>Lua Implementations<br />
<a href="http://lua-users.org/wiki/LuaImplementations">http://lua-users.org/wiki/LuaImplementations</a>
</li>

<li>Coconut: funkcionální jazyk s pattern matchingem kompatibilní s Pythonem<br />
<a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/</a>
</li>

<li>Coconut aneb funkcionální nadstavba nad Pythonem (2.část)<br />
<a href="https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/">https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut 1.1.0 (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/1.1.0">https://pypi.python.org/pypi/coconut/1.1.0</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

<li>patterns<br />
<a href="https://github.com/Suor/patterns">https://github.com/Suor/patterns</a>
</li>

<li>Source-to-source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>The Lua VM, on the Web<br />
<a href="https://kripken.github.io/lua.vm.js/lua.vm.js.html">https://kripken.github.io/lua.vm.js/lua.vm.js.html</a>
</li>

<li>Lua.vm.js REPL<br />
<a href="https://kripken.github.io/lua.vm.js/repl.html">https://kripken.github.io/lua.vm.js/repl.html</a>
</li>

<li>lua2js<br />
<a href="https://www.npmjs.com/package/lua2js">https://www.npmjs.com/package/lua2js</a>
</li>

<li>Wisp na GitHubu<br />
<a href="https://github.com/Gozala/wisp">https://github.com/Gozala/wisp</a>
</li>

<li>Wisp playground<br />
<a href="http://www.jeditoolkit.com/try-wisp/">http://www.jeditoolkit.com/try-wisp/</a>
</li>

<li>REPL v prohlížeči<br />
<a href="http://www.jeditoolkit.com/interactivate-wisp/">http://www.jeditoolkit.com/interactivate-wisp/</a>
</li>

<li>Minification (programming)<br />
<a href="https://en.wikipedia.org/wiki/Minification_(programming)">https://en.wikipedia.org/wiki/Minification_(programming)</a>
</li>

<li>Roblox<br />
<a href="https://en.wikipedia.org/wiki/Roblox">https://en.wikipedia.org/wiki/Roblox</a>
</li>

<li>Category:Lua (programming language)-scriptable game engines<br />
<a href="https://en.wikipedia.org/wiki/Category:Lua_(programming_language)-scriptable_game_engines">https://en.wikipedia.org/wiki/Category:Lua_(programming_language)-scriptable_game_engines</a>
</li>

<li>Goodbye Lua (shrnutí následujícího článku)<br />
<a href="https://www.reddit.com/r/lua/comments/4ld6ao/goodbye_lua/">https://www.reddit.com/r/lua/comments/4ld6ao/goodbye_lua/</a>
</li>

<li>Goodbye, Lua<br />
<a href="https://realmensch.org/2016/05/28/goodbye-lua/">https://realmensch.org/2016/05/28/goodbye-lua/</a>
</li>

<li>6th Edition – ECMAScript 2015<br />
<a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015">https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

