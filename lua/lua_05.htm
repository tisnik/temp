<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Funkce v programovacím jazyku Lua - uzávěry</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Funkce v programovacím jazyku Lua - uzávěry</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V páté části seriálu o programovacím jazyku Lua si ukážeme, jakým způsobem je možné pracovat s takzvanými uzávěry (closures). Pomocí uzávěrů lze ve funkcionálních jazycích vytvořit objektový systém (tyto jazyky tedy nemají speciální syntaxi pro třídy a objekty), konstruují se řídicí struktury apod.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Funkce předávané jako parametry</a><br />
<a href="#k02">2. První demonstrační příklad &ndash; funkce předávané jako parametry</a><br />
<a href="#k03">3. Uzávěry</a><br />
<a href="#k04">4. Lokální proměnné přístupné z&nbsp;uzávěrů</a><br />
<a href="#k05">5. Malá odbočka &ndash; uzávěry a JavaScript</a><br />
<a href="#k06">6. Uzávěry a objektově orientované programování</a><br />
<a href="#k07">7. Druhý demonstrační příklad &ndash; použití uzávěrů</a><br />
<a href="#k08">8. Odkazy na Internetu</a><br />
<a href="#k09">9. Obsah dalšího pokračování seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Funkce předávané jako parametry</h1>

<p>V&nbsp;předchozí části seriálu o programovacím jazyku <i>Lua</i> jsme si
ukázali, jakým způsobem se vytváří funkce. Vzhledem k&nbsp;tomu, že funkce je
v&nbsp;<i>Lua</i> plnohodnotným datovým typem, je možné vytvořenou funkci
přiřadit do proměnné &ndash; ostatně samotné pojmenování funkcí
<strong>function jmeno(parametry) ... end</strong> je pouze syntaktickým cukrem
ekvivalentním k&nbsp;zápisu <strong>promenna = function(parametry) ...
end</strong>. Funkce je samozřejmě možné, ostatně jako jakoukoli jinou hodnotu
(libovolného typu), předat i jako parametr jiné funkci. Tento postup se používá
poměrně často, například při registraci takzvaných <i>handlerů událostí</i>,
tj.&nbsp;funkcí volaných ve chvíli, kdy v&nbsp;aplikaci dojde ke specifikované
změně stavu (takto zaregistrované funkce se taktéž nazývají <i>callback
funkce</i>). Funkce předávané formou parametrů (popř.&nbsp;funkce uložené
v&nbsp;asociativním poli) také v&nbsp;některých případech mohou nahradit
neohrabané několikanásobné rozvětvení programu typu <strong>if ... elseif ...
else ... end</strong>.</p>



<p><a name="k02"></a></p>
<h1>2. První demonstrační příklad &ndash; funkce předávané jako parametry</h1>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázáno, jakým způsobem lze
předávat libovolnou funkci jako parametr do jiné funkce. Základ celého programu
tvoří funkce nazvaná <i>printTable</i>, která slouží, jak již její název
napovídá, k&nbsp;tisku tabulky obsahující hodnoty libovolné matematické funkce
(s&nbsp;definičním oborem zahrnujícím i interval 0..90), která je funkci
<i>printTable</i> předána jako její jediný parametr. Dále jsou v&nbsp;programu
vytvořeny dvě uživatelská funkce nazvané <i>fce</i> (tj.&nbsp;uložené do
proměnné pojmenované <i>fce</i>), jejichž vybrané funkční hodnoty jsou pomocí
<i>printTable</i> vytištěny. Vypsány jsou i hodnoty vypočtené pomocí
standardních knihovních funkcí <i>math.sin</i> a <i>math.cos</i> (tyto funkce
jsou do <i>printTable</i> předány přímo bez použití pomocné proměnné).
Povšimněte si, že ve funkci <i>printTable</i> se používá výraz <strong>y =
func(alfa)</strong>, tj.&nbsp;funkce předávaná v&nbsp;parametru se volá zcela
standardním způsobem. Následuje výpis zdrojového kódu druhého demonstračního
příkladu:</p>

<code-area><i>-- Prvni demonstracni priklad:</i>
<i>-- funkce predavane jako parametry</i>

<i>-- pomocna funkce, ktera vytiskne tabulku hodnot</i>
<i>-- pro uhly lezici mezi 0 az 90 stupni</i>
<i>-- na zaklade predane funkce</i>
<strong>function</strong> printTable(func)
    <i>-- tisk adresy funkce v adresnim prostoru VM</i>
    print(func)
    <i>-- tisk uhlu mezi 0 az 90 stupni</i>
    <i>-- a hodnot uzivatelske funkce pro tyto uhly</i>
    <i>-- (je nastaven krok po peti stupnich)</i>
    <strong>for</strong> i=0, 90, 5 <strong>do</strong>
        <i>-- prevod stupnu na radiany</i>
        <strong>local</strong> alfa = math.pi * i / 180.0
        <i>-- volani funkce predane jako parametr</i>
        <strong>local</strong> y = func(alfa)
        print(string.format("%d\t%6.4f", i, y))
    <strong>end</strong>
<strong>end</strong>

<i>-- uzivatelsky definovana funkce ulozena</i>
<i>-- do promenne "fce"</i>
fce = <strong>function</strong>(x)
    <strong>return</strong> math.sin(x)
<strong>end</strong>

<i>-- tisk tabulky</i>
print("fce = function(x) return math.sin(x) end")
printTable(fce)

print()

<i>-- muzeme primo pouzit i knihovni funkci</i>
<i>-- se stejnym vyznamem</i>
print("fce = math.sin")
printTable(math.sin)

print()

<i>-- dalsi uzivatelsky definovana funkce ulozena</i>
<i>-- do promenne "fce" (pri prirazeni se prepise</i>
<i>-- puvodni hodnota teto promenne)</i>
fce=<strong>function</strong>(x)
    <strong>return</strong> math.cos(x)
<strong>end</strong>

<i>-- tisk tabulky</i>
print("fce = function(x) return math.cos(x) end")
printTable(fce)

print()

<i>-- muzeme primo pouzit i knihovni funkci</i>
<i>-- se stejnym vyznamem</i>
print("fce = math.cos")
printTable(math.cos)

<i>-- finito</i>
</code-area>

<p>Výstup získaný po spuštění druhého demonstračního příkladu:</p>

<code-area>fce = function(x) return math.sin(x) end
function: 003DA4E8
0       0.0000
5       0.0872
10      0.1736
15      0.2588
20      0.3420
25      0.4226
30      0.5000
35      0.5736
40      0.6428
45      0.7071
50      0.7660
55      0.8192
60      0.8660
65      0.9063
70      0.9397
75      0.9659
80      0.9848
85      0.9962
90      1.0000

fce = math.sin
function: 003D8900
0       0.0000
5       0.0872
10      0.1736
15      0.2588
20      0.3420
25      0.4226
30      0.5000
35      0.5736
40      0.6428
45      0.7071
50      0.7660
55      0.8192
60      0.8660
65      0.9063
70      0.9397
75      0.9659
80      0.9848
85      0.9962
90      1.0000

fce = function(x) return math.cos(x) end
function: 003DB928
0       1.0000
5       0.9962
10      0.9848
15      0.9659
20      0.9397
25      0.9063
30      0.8660
35      0.8192
40      0.7660
45      0.7071
50      0.6428
55      0.5736
60      0.5000
65      0.4226
70      0.3420
75      0.2588
80      0.1736
85      0.0872
90      0.0000

fce = math.cos
function: 003D84B8
0       1.0000
5       0.9962
10      0.9848
15      0.9659
20      0.9397
25      0.9063
30      0.8660
35      0.8192
40      0.7660
45      0.7071
50      0.6428
55      0.5736
60      0.5000
65      0.4226
70      0.3420
75      0.2588
80      0.1736
85      0.0872
90      0.0000
</code-area>



<p><a name="k03"></a></p>
<h1>3. Uzávěry</h1>

<p>Ve funkcionálních jazycích, mezi něž programovací jazyk <i>Lua</i> některými
svými vlastnostmi bezesporu náleží, se poměrně často používají takzvané
<i>uzávěry</i> (<i>closures</i>), které byly poprvé navrženy a implementovány
ve známém jazyku <i>Scheme</i>. V&nbsp;jazyku <i>Lua</i> se uzávěry konstruují
pomocí anonymní (nepojmenované) funkce vytvořené uvnitř jiné funkce, přičemž
tyto anonymní funkce mají přístup k&nbsp;lokálním proměnným &bdquo;své&ldquo;
vytvářející funkce. Vytvořené anonymní funkce (resp.&nbsp;odkazy na ně) je
možné v&nbsp;jazyku <i>Lua</i> vracet volajícímu programu pomocí příkazu
<strong>return</strong>, neboť funkce jsou v&nbsp;tomto jazyku plnohodnotným
datovým typem, se kterým lze manipulovat podobně, jako s&nbsp;ostatními
datovými typy (čísly, asociativními poli, pravdivostními hodnotami atd). To, že
funkce mohou být návratovými hodnotami jiných funkcí, není nic překvapivého,
ostatně s&nbsp;využitím ukazatelů (na funkce) se podobného efektu dá docílit i
v&nbsp;nízkoúrovňovém céčku.</p>

<p>Zajímavá a velmi důležitá je však jiná vlastnost uzávěrů &ndash; jelikož
jsou uzávěry vytvořeny uvnitř jiné funkce, mají mj.&nbsp;přístup i ke všem
lokálním proměnným této funkce. Co se však stane v&nbsp;případě, že se na tyto
proměnné budeme skutečně uvnitř uzávěru odkazovat (například budeme chtít
modifikovat jejich hodnotu)? Dokonce se můžeme ptát, zde je vůbec následující
příklad korektní, tj.&nbsp;zda po svém spuštění nevypíše chybové hlášení při
pokusu o přístup k&nbsp;proměnné <i>y</i>:</p>

<code-area><i>-- Funkce obsahujici lokalni promennou.</i>
<i>-- Tato funkce vraci anonymni funkci</i>
<i>-- jako svuj vysledek.</i>
<strong>function</strong> generateClosure()
    <i>-- lokalni promenna, ktera neni</i>
    <i>-- z okolniho programu dostupna</i>
    <strong>local</strong> y = 1
    <i>-- anonymni funkce vytiskne hodnotu</i>
    <i>-- lokalni promenne funkce "generateClosure"</i>
    <i>-- a potom se pokusi o zmenu jeji hodnoty:</i>
    <strong>return</strong> <strong>function</strong>()
        print(y)
        y = y + 1
    <strong>end</strong>
<strong>end</strong>

<i>-- ziskame uzaver, tj. instanci anonymni funkce</i>
closure1 = generateClosure()

<i>-- jake hodnoty se vytisknou?</i>
closure1()
closure1()
closure1()
closure1()

<i>-- finito</i>
</code-area>



<p><a name="k04"></a></p>
<h1>4. Lokální proměnné přístupné z&nbsp;uzávěrů</h1>

<p>Na první pohled by se mohlo zdát, že lokální proměnné funkcí zaniknou ve
chvíli, kdy program opustí tělo této funkce (přesněji &ndash; lokální proměnná
existuje jen v&nbsp;rámci svého lexikálního kontextu). Ovšem u funkcionálních
jazyků si každý vytvořený objekt (včetně funkce, zde speciálně uzávěru)
uchovává odkazy na všechny proměnné, které jsou uvnitř objektu použity, nehledě
na jejich lexikální kontext. To ovšem znamená, že pokud je uvnitř nějaké funkce
nazvané <i>generateClosure</i> (viz předchozí příklad) vytvořena anonymní
funkce (uzávěr) přistupující k&nbsp;lokálním proměnným funkce
<i>generateClosure</i> a tato anonymní funkce je vrácena příkazem
<strong>return</strong>, jsou všechny odkazované lokální proměnné vytvořené
uvnitř <i>generateClosure</i> zachovány minimálně po tu dobu, po kterou
existuje vrácený uzávěr. Každé volání uzávěru může s&nbsp;těmito lokálními (a
zdánlivě už neexistujícími) proměnnými pracovat, tj.&nbsp;číst i zapisovat do
nich hodnoty. To znamená, že program uvedený v&nbsp;předchozí kapitole skutečně
funguje &ndash; po svém spuštění vypíše posloupnost 1 &ndash; 2 &ndash; 3
&ndash; 4.</p>

<p>Vzhledem k&nbsp;tomuto chování není ve funkcionálních jazycích podporujících
uzávěry obecně možné všechny lokální proměnné ukládat na zásobník (jeho rámec
je po opuštění funkce zapomenut), ale je nutné využít spíše paměť alokovanou na
haldě (<i>heap</i>), pro jejíž uvolňování je použita nějaká forma automatického
uvolňování nepoužívané paměti (<i>garbage collectoru</i>). Vzhledem
k&nbsp;tomu, že uzávěr pracuje skutečně s&nbsp;odkazem na lokální proměnnou
vytvořenou v&nbsp;nadřazené funkci, vypíše následující program posloupnost 42
&ndash; 43 &ndash; 44 a 45, neboť poslední hodnota proměnné <i>y</i> před
opuštěním funkce byla nastavena na 42:</p>

<code-area><i>-- Funkce obsahujici lokalni promennou.</i>
<i>-- Tato funkce vraci anonymni funkci</i>
<i>-- jako svuj vysledek.</i>
<strong>function</strong> generateClosure()
    <i>-- lokalni promenna, ktera neni</i>
    <i>-- z okolniho programu dostupna</i>
    <strong>local</strong> y = 1
    <i>-- anonymni funkce vytiskne hodnotu</i>
    <i>-- lokalni promenne funkce "generateClosure"</i>
    <i>-- a potom se pokusi o zmenu jeji hodnoty:</i>
    <strong>local</strong> result = <strong>function</strong>()
        print(y)
        y = y + 1
    <strong>end</strong>
    <i>-- po vytvoreni zarodku uzaveru</i>
    <i>-- zmenime hodnotu lokalni promenne</i>
    y = 42
    <i>-- vratime vytvorenou funkci - uzaver</i>
    <strong>return</strong> result
<strong>end</strong>

<i>-- ziskame uzaver, tj. instanci anonymni funkce</i>
closure = generateClosure()

<i>-- vytiskne se posloupnost hodnot 42, 43, 44 a 45</i>
closure()
closure()
closure()
closure()

<i>-- finito</i>
</code-area>

<p>Důležité je, že původní lokální proměnné jsou viditelné pouze uvnitř
uzávěru, nejedná se tedy o proměnné globální &ndash; ty se ostatně ve
funkcionálních jazycích téměř nepoužívají, což je jen dobře (již minule jsme si
řekli, že používání globálních proměnných například omezuje paralelizovatelnost
programu i jeho testování). Samozřejmě platí, že v&nbsp;případě nového volání
funkce <i>generateClosure</i> se vytvoří nové lokální proměnné i nový uzávěr,
tj.&nbsp;jednotlivé uzávěry mají své vlastní kopie původních lokálních
proměnných (lokální proměnné tedy nejsou statické ve smyslu
&bdquo;statičnosti&ldquo; známém například z&nbsp;céčka). Následující program
vytiskne po svém spuštění dvě řady čísel 1 &ndash; 2 &ndash; 3 &ndash; 4,
protože uzávěr nazvaný <i>closure1</i> (přesněji řečeno uzávěr uložený do
proměnné pojmenované <i>closure1</i>) používá odlišnou kopii lokální proměnné
<i>y</i> nadřazené funkce <i>generateClosure</i> než uzávěr nazvaný
<i>closure2</i>.  Každé volání funkce <i>generateClosure</i> tedy vede
k&nbsp;alokaci paměti na haldě; do této paměti je uložena počáteční hodnota
lokální proměnné <i>y</i> a vytvořený uzávěr obsahuje odkaz na tuto
hodnotu:</p>

<code-area><i>-- Funkce obsahujici lokalni promennou.</i>
<i>-- Tato funkce vraci anonymni funkci</i>
<i>-- jako svuj vysledek.</i>
<strong>function</strong> generateClosure()
    <i>-- lokalni promenna, ktera neni</i>
    <i>-- z okolniho programu dostupna</i>
    <strong>local</strong> y = 1
    <i>-- anonymni funkce vytiskne hodnotu</i>
    <i>-- lokalni promenne funkce "generateClosure"</i>
    <i>-- a potom se pokusi o zmenu jeji hodnoty:</i>
    <strong>return</strong> <strong>function</strong>()
        print(y)
        y = y + 1
    <strong>end</strong>
<strong>end</strong>

<i>-- ziskame uzaver, tj. instanci anonymni funkce</i>
closure1 = generateClosure()
closure2 = generateClosure()

<i>-- jake hodnoty se vytisknou?</i>
closure1()
closure1()
closure1()
closure1()
closure2()
closure2()
closure2()
closure2()

<i>-- finito</i>
</code-area>



<p><a name="k05"></a></p>
<h1>5. Malá odbočka &ndash; uzávěry a JavaScript</h1>

<p>Poznamenejme, že prakticky stejným způsobem se uzávěry vytváří a volají
například v&nbsp;<i>JavaScriptu</i>. Tento jazyk má sice mezi vývojáři pověst
spíše amatérského nástroje, ve skutečnosti se však jedná o relativně expresivní
dynamický jazyk, pro který v&nbsp;současnosti existují výkonné interpretry
(původní interpretry použité například ve &bdquo;čtyřkových&ldquo; verzích
webových prohlížečů trpěly výkonnostními problémy i vzájemnou nekompatibilitou)
a samotný jazyk se již nepoužívá pouze na webových stránkách, ale i jako
skriptovací jazyk v&nbsp;různých aplikacích, prostředek pro skriptování VRML či
SVG apod. Následující fragment HTML stránky po svém zobrazení v&nbsp;prohlížeči
a spuštění vloženého skriptu vypíše do okna prohlížeče dvě řady čísel 1 &ndash;
2 &ndash; 3 &ndash; 4; jedná se tedy o stejný výsledek, jaký vypisuje předchozí
program napsaný v&nbsp;programovacím jazyku <i>Lua</i>:</p>

<code-area>
&lt;html&gt;
    &lt;body&gt;
        &lt;script type="text/javascript"&gt;
            <i>// Funkce obsahujici lokalni promennou.</i>
            <i>// Tato funkce vraci anonymni funkci</i>
            <i>// jako svuj vysledek.</i>
            <strong>function</strong> generateClosure()
            {
                <i>// lokalni promenna, ktera neni</i>
                <i>// z okolniho programu dostupna</i>
                <strong>var</strong> y = 1;
                <i>// anonymni funkce vytiskne hodnotu</i>
                <i>// lokalni promenne funkce "generateClosure"</i>
                <i>// a potom se pokusi o zmenu jeji hodnoty:</i>
                <strong>return</strong> <strong>function</strong>()
                {
                    document.write(y + "&lt;br /&gt;");
                    y = y + 1;
                };
            }
            <i>// ziskame uzaver, tj. instanci anonymni funkce</i>
            closure1 = generateClosure();
            closure2 = generateClosure();

            <i>// jake hodnoty se vytisknou?</i>
            closure1();
            closure1();
            closure1();
            closure1();
            closure2();
            closure2();
            closure2();
            closure2();
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code-area>



<p><a name="k06"></a></p>
<h1>6. Uzávěry a objektově orientované programování</h1>

<p>Princip uzávěrů je v&nbsp;mnoha ohledech podobný klasickým objektům známým
z&nbsp;OOP (objektově orientovaného programování), ostatně ve výše zmíněném
jazyku <i>Scheme</i> bylo vytvořeno mnoho objektových knihoven postavených
právě na uzávěrech. Avšak zatímco objekty v&nbsp;OOP jsou primárně (především
ze syntaktického hlediska) založeny na datových položkách (atributech), ke
kterým jsou přidány metody určené pro manipulaci s&nbsp;těmito daty, jsou u
uzávěrů naopak primárním typem funkce, ke kterým jsou připojena data, se
kterými funkce pracuje. Není tedy neobvyklé si například vytvořit více uzávěrů,
které si, podobně jako metody objektů, mezi sebou sdílejí soukromá data &ndash;
lokální proměnné funkce, ve kterých jsou uzávěry vytvořeny. To, který koncept
se v&nbsp;programu použije, záleží především na vlastnostech použitého
programovacího jazyka a osobních preferencích programátora. <i>Lua</i>
podporuje oba koncepty (uzávěry i OOP založené na prototypech), podobně jako
například programovací jazyk <i>JavaScript</i>, <i>Python</i>, <i>Python</i> či
některé dialekty <i>Lispu</i>.</p>

<p>Podpora uzávěrů v&nbsp;některém programovacím jazyce navíc v&nbsp;praxi de
facto vyžaduje, jak jsme si již naznačili o několik odstavců výše, existenci
automatické správy přidělované paměti (<i>garbage collection</i>), neboť
lokální proměnné používané v&nbsp;uzávěrech nelze z&nbsp;výše popsaných důvodů
ukládat na zásobník jako ostatní lokální proměnné, ze kterého by byly
automaticky odstraňovány při opuštění funkce. Taktéž tyto proměnné nelze uložit
do staticky alokovaného paměťového prostoru tak, jak je tomu například u
céčkovských globálních proměnných či statických lokálních proměnných
(v&nbsp;podstatě se z&nbsp;hlediska překladače taktéž jedná o globální
proměnné, ovšem s&nbsp;omezenou viditelností). Z&nbsp;tohoto důvodu se
s&nbsp;podporou uzávěrů setkáme spíše ve vysokoúrovňových programovacích
jazycích, které nějakou formu automatické správy paměti obsahují (u
<i>Scheme</i> se například rozpoznává, které proměnné jsou čistě lokální a
které se používají v&nbsp;uzávěrech a podle toho je také provedena jejich
alokace &ndash; buď na zásobníku nebo na haldě).</p>



<p><a name="k07"></a></p>
<h1>7. Demonstrační příklad &ndash; použití uzávěrů</h1>

<p>V&nbsp;níže vypsaném demonstračním příkladu je ukázáno použití uzávěrů při
výpočtech tabulek celočíselných mocnin o zvoleném základu (například mocnin
čísla 2). Každý řádek vytištěné tabulky obsahuje dvě hodnoty &ndash; exponent a
vypočtenou mocninu. Uzávěr tedy bude přistupovat ke dvojici lokálních
proměnných, přičemž jedna proměnná představuje vypočtenou mocninu a druhá
exponent (ten se průběžně zvyšuje o jedničku). Navíc uzávěr pracuje i
s&nbsp;parametrem funkce, pomocí něhož je při jejím volání specifikován základ.
Každé volání uzávěru znamená, že se nejdříve vytiskne hodnota vypočtená
v&nbsp;průběhu předchozího volání, vypočte se hodnota pro další řádek tabulky
(předchozí hodnota se jednoduše vynásobí základem) a nakonec se zvýší hodnota
exponentu o jedničku. Vzhledem k&nbsp;tomu, že každý vytvořený uzávěr má
k&nbsp;dispozici vlastní lokální proměnné vytvářející funkce (přesněji odkazy
na tyto proměnné), je možné současně počítat více tabulek, například pro různé
základy (v&nbsp;příkladu není použito, můžete si však sami vyzkoušet sloučit
poslední tři programové smyčky). Tento demonstrační příklad byl inspirován
<i>Perlovským</i> kódem popsaným v&nbsp;článku <a
href="http://www.linuxsoft.cz/article.php?id_article=1397">Perl (50) &ndash;
Uzávěry a iterátory</a>:</p>

<code-area><i>-- Demonstracni priklad:</i>
<i>-- pouziti uzaveru</i>

<i>-- pomocna funkce vracejici uzaver</i>
<strong>function</strong> defPosloupnosti(n)
    <i>-- pamatovana hodnota, ktera vsak</i>
    <i>-- neni z okolniho programu dostupna</i>
    <strong>local</strong> y = 1
    <i>-- pocitadlo volani = exponent</i>
    <strong>local</strong> index = 0
    <i>-- anonymni funkce vytiskne pamatovanou</i>
    <i>-- hodnotu a nakonec ji vynasobi zvolenou konstantou</i>
    <strong>return</strong> <strong>function</strong>()
        print(index, y)
        y = y * n
        index = index + 1
    <strong>end</strong>
<strong>end</strong>

print("mocniny cisla 2")
<i>-- ziskani uzaveru</i>
generator = defPosloupnosti(2)

<i>-- postupne se budou tisknout</i>
<i>-- mocniny cisla 2</i>
<strong>for</strong> i=0, 16 <strong>do</strong>
    generator()
<strong>end</strong>

print()

print("mocniny cisla 3")
<i>-- ziskani uzaveru</i>
generator = defPosloupnosti(3)

<i>-- postupne se budou tisknout</i>
<i>-- mocniny cisla 3</i>
<strong>for</strong> i=0, 16 <strong>do</strong>
    generator()
<strong>end</strong>

print()

print("mocniny cisla 10")
<i>-- ziskani uzaveru</i>
generator = defPosloupnosti(10)

<i>-- postupne se budou tisknout</i>
<i>-- mocniny cisla 3</i>
<strong>for</strong> i=0, 16 <strong>do</strong>
    generator()
<strong>end</strong>

<i>-- finito</i>
</code-area>

<p>Druhý demonstrační příklad po svém spuštění vypíše trojici tabulek &ndash;
celočíselné mocniny čísla 2, celočíselné mocniny čísla 3 a konečně celočíselné
mocniny čísla 10:</p>

<code-area>mocniny cisla 2
0       1
1       2
2       4
3       8
4       16
5       32
6       64
7       128
8       256
9       512
10      1024
11      2048
12      4096
13      8192
14      16384
15      32768
16      65536

mocniny cisla 3
0       1
1       3
2       9
3       27
4       81
5       243
6       729
7       2187
8       6561
9       19683
10      59049
11      177147
12      531441
13      1594323
14      4782969
15      14348907
16      43046721

mocniny cisla 10
0       1
1       10
2       100
3       1000
4       10000
5       100000
6       1000000
7       10000000
8       100000000
9       1000000000
10      10000000000
11      100000000000
12      1000000000000
13      10000000000000
14      1e+014
15      1e+015
16      1e+016
</code-area>



<p><a name="k08"></a></p>
<h1>8. Odkazy na Internetu</h1>

<ol>

<li>Programming in Lua (first edition)<br />
<a href="http://www.lua.org/pil/index.html">http://www.lua.org/pil/index.html</a>
</li>

<li>Scope (programming)<br />
<a href="http://en.wikipedia.org/wiki/Scope_(programming)">http://en.wikipedia.org/wiki/Scope_(programming)</a>
</li>

<li>Closure &ndash; 3<br />
<a href="http://animestudioluascripting.blogspot.com/2007/02/closure-3.html">http://animestudioluascripting.blogspot.com/2007/02/closure-3.html</a>
</li>

<li>Anonymous function<br />
<a href="http://en.wikipedia.org/wiki/Anonymous_function">http://en.wikipedia.org/wiki/Anonymous_function</a>
</li>

<li>Perl (50) &ndash; Uzávěry a iterátory<br />
<a href="http://www.linuxsoft.cz/article.php?id_article=1397">http://www.linuxsoft.cz/article.php?id_article=1397</a>
</li>

<li>Lua home page<br />
<a href="http://www.lua.org/ ">http://www.lua.org/ </a>
</li>

<li>Lua: vestavitelný minimalista<br />
<a href="http://www.root.cz/clanky/lua-vestavitelny-minimalista/">http://www.root.cz/clanky/lua-vestavitelny-minimalista/</a>
</li>

<li>Lua<br />
<a href="http://www.linuxexpres.cz/praxe/lua">http://www.linuxexpres.cz/praxe/lua</a>
</li>

<li>CZ Wikipedia: Lua<br />
<a href="http://cs.wikipedia.org/wiki/Lua">http://cs.wikipedia.org/wiki/Lua</a>
</li>

<li>EN Wikipedia: Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>The Lua Programming Language<br />
<a href="http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html">http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html</a>
</li>

<li>Lua Programming Gems<br />
<a href="http://www.lua.org/gems/">http://www.lua.org/gems/</a>
</li>

<li>LuaForge<br />
<a href="http://luaforge.net/">http://luaforge.net/</a>
</li>

<li>Forge project tree<br />
<a href="http://luaforge.net/softwaremap/trove_list.php">http://luaforge.net/softwaremap/trove_list.php</a>
</li>

</ol>



<p><a name="k09"></a></p>
<h1>9. Obsah dalšího pokračování seriálu</h1>

<p>V&nbsp;následujícím pokračování seriálu o programovacím jazyku <i>Lua</i> si
ukážeme, jakým způsobem je možné vytvářené funkce ukládat do asociativních polí
(hešovacích map), protože tento postup je v&nbsp;<i>Lua</i> základem pro tvorbu
objektů (ve smyslu objektově orientovaného programování &ndash; OOP). Taktéž si
řekneme, jak lze interpretr jazyka <i>Lua</i> používat ve vlastních céčkových
či C++ aplikacích a jak mohou skripty napsané v&nbsp;<i>Lua</i> komunikovat
s&nbsp;céčkovými funkcemi či používat datové struktury vytvořené
v&nbsp;céčkovém programu. Uvidíme, že programové rozhraní mezi prostředím
interpretru, ve kterém běží skripty napsané v&nbsp;<i>Lua</i>, a céčkovým
programem je velmi jednoduché, ale taktéž dostatečné na to, aby byla spolupráce
obou částí aplikace efektivní a do značné míry bezproblémová a současně i
bezpečná (samotný skript napsaný v&nbsp;jazyku <i>Lua</i> běží v&nbsp;takzvaném
sandboxu a nemusí mít například povolen přímý přístup k&nbsp;souborovému
systému či aplikačnímu programovému rozhraní jádra).</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

