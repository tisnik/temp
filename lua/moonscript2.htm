<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua (2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua (2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o programovacím jazyku Moonscript, který je (trans)překládaný do jazyka Lua, si nejprve ukážeme novou syntaxi použitou při zápisu metod (včetně zjednodušení přístupu k atributům objektů) a posléze si popíšeme další konstrukce, například generátorovou notaci seznamu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua (2)</a></p>
<p><a href="#k02">2. Funkce, jejíž návratová hodnota se použije jako parametr jiné funkce</a></p>
<p><a href="#k03">3. Metody deklarované s&nbsp;využitím operátoru &bdquo;tlusté šipky&ldquo;</a></p>
<p><a href="#k04">4. Zjednodušený přístup k&nbsp;atributům objektů, implicitní parametry metod</a></p>
<p><a href="#k05">5. Problematika zápisu funkcí s&nbsp;mnoha parametry</a></p>
<p><a href="#k06">6. Kdy jsou kulaté závorky při volání funkce povinné?</a></p>
<p><a href="#k07">7. Generátorová notace seznamu</a></p>
<p><a href="#k08">8. Základní syntaxe generátorové notace seznamu</a></p>
<p><a href="#k09">9. Zkrácený zápis iteračního příkazu v&nbsp;generátorové notaci seznamu</a></p>
<p><a href="#k10">10. Filtrace prvků v&nbsp;zápisu generátorové notace seznamu</a></p>
<p><a href="#k11">11. Generátorová notace seznamu založená na numerické smyčce</a></p>
<p><a href="#k12">12. Malé doplnění: operace s&nbsp;prvky při použití numerické smyčky v&nbsp;generátorové notaci seznamu</a></p>
<p><a href="#k13">*** 13. Generátorová notace slovníku</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. Objektově orientované programování v&nbsp;jazyce Lua</a></p>
<p><a href="#k18">18. Obsah následující části článku o Moonscriptu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua (2)</h2>

<p>Na <a
href="https://www.root.cz/clanky/moonscript-jazyk-inspirovany-coffeescriptem-urceny-pro-ekosystem-jazyka-lua/">úvodní
článek o jazyku Moonscript</a> dnes navážeme. V&nbsp;první části jsme si
popsali především relativně jednoduchý &bdquo;syntaktický cukr&ldquo;, který
byl do Moonscriptu přidán, aby programátorům zjednodušil zápis operací, které
provádí prakticky dennodenně. Jedná se například o nové operátory spojující
přiřazení s&nbsp;další operací, dále pak o přímou podporu pro víceřádkové
řetězce, podporu pro interpolaci řetězců nebo o zkrácený zápis funkcí, který je
založen na použití operátoru &bdquo;tenké šipky&ldquo;. Dnes si ukážeme další
vlastnosti Moonscriptu, které již mnohdy musí být do jazyka Lua transformovány
složitějším způsobem. Jedná se například o generátorovou notaci seznamu,
generátorovou notaci tabulky popř.&nbsp;o podporu objektově orientovaného
programování (což bude ovšem nosné téma třetího článku o Moonscriptu).</p>

<p>Na začátek si připomeňme, jak lze v&nbsp;Moonscriptu definovat novou funkci.
Bude se jednat o funkci se dvěma parametry, která bude vracet součet těchto
parametrů. V&nbsp;Moonscriptu lze celý zápis provést na jediném řádku
s&nbsp;využitím &bdquo;tenké šipky&ldquo;:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
sum = <strong>(x, y) -&gt; x + y</strong>
&nbsp;
print sum 10, 20
</pre>

<p>Transpřeklad do jazyka Lua je v&nbsp;tomto případě přímočarý:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local sum
sum = function(x, y)
  return x + y
end
&nbsp;
return print(sum(10, 20))
</pre>

<p><div class="rs-tip-major">Poznámka: na tento jednoduchý demonstrační příklad
navážeme v&nbsp;dalších kapitolách.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce, jejíž návratová hodnota se použije jako parametr jiné funkce</h2>

<p>Zcela běžně se setkáme s&nbsp;tím, že se má návratová hodnota jedné funkce
použít jako parametr funkce jiné. Typické je například volání nějaké funkce
s&nbsp;následným výpisem její návratové hodnoty funkcí <strong>print</strong>.
Příklad v&nbsp;jazyku Lua je triviální:</p>

<pre>
print(sum(10, 20))
</pre>

<p>V&nbsp;programovacím jazyku Moonscript může být takové volání realizováno
bez použití kulatých závorek, ovšem pouze za předpokladu, že transpřekladač
bude přesně vědět, jak &bdquo;rozdělit&ldquo; parametry zapsané na jediném
řádku. Podívejme se nejprve na (nefunkční) příklad, kdy funkci
<strong>print</strong> předáváme dva parametry &ndash; řetězec
&bdquo;sum:&ldquo; a výsledek volání <strong>sum 10, 20, 30</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
sum = (x, y) -&gt; print "sum", x + y
&nbsp;
<strong>print "sum:", sum 10, 20, 30</strong>
</pre>

<p>V&nbsp;tomto konkrétním příkladu nebylo zřejmé, jaké funkci mají patřit
parametry <strong>20</strong> a <strong>30</strong>, takže transpřekladač
provedl tuto transformaci:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local sum
sum = function(x, y)
  return print("sum", x + y)
end
return <strong>print("sum:", sum(10, 20, 30))</strong>
</pre>

<p>Abychom dosáhli konkrétního chování, je nutné použít kulaté závorky při
volání funkce <strong>sum</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
sum = (x, y) -&gt; print "sum", x + y
&nbsp;
print "sum:", <strong>sum(10, 20)</strong>, 30
</pre>

<p>Výsledek je již v&nbsp;tomto případě korektní a lze ho spustit:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local sum
sum = function(x, y)
  return print("sum", x + y)
end
return <strong>print("sum:", sum(10, 20), 30)</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: k&nbsp;této problematice se ještě
vrátíme <a href="#k06">v&nbsp;šesté kapitole</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Metody deklarované s&nbsp;využitím operátoru &bdquo;tlusté šipky&ldquo;</h2>

<p>Víme již, jak lze deklarovat běžné funkce s&nbsp;využitím operátoru
&bdquo;šipky&ldquo; resp.&nbsp;přesněji řečeno &bdquo;tenké šipky&ldquo; (tenká
se jí říká proto, že začíná znakem &bdquo;-&ldquo;). Ovšem v&nbsp;programovacím
jazyce Lua jsou podporovány i <i>metody</i> &ndash; viz též <a
href="#k17">sedmnáctou kapitolu</a>. A při volání metod se explicitně nebo
implicitně předává i reference na daný objekt, což je reflektováno názvem
tohoto parametru &ndash; <strong>self</strong> (jinde <strong>this</strong>). A
právě aby se tato reference nemusela explicitně zapisovat, lze při deklaraci
metody namísto &bdquo;tenké šipky&ldquo; použít &bdquo;tlustou
šipku&ldquo;.</p>

<p>Metoda <strong>f1</strong> bez dalších parametrů, která vrací referenci na
svůj objekt, může být deklarována následovně:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
f1 = <strong>=&gt; self</strong>
&nbsp;
foo = {}
&nbsp;
print f1(foo)
</pre>

<p>Způsob překladu do jazyka Lua je proveden takto:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local f1
f1 = function(self)
  return self
end
local foo = { }
return print(f1(foo))
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že parametr
<strong>self</strong> byl v&nbsp;tomto případě do vygenerované funkce přidán
automaticky.</div></p>

<p>Nyní se podívejme na nepatrně praktičtější příklad, konkrétně na metodu,
která sníží hodnotu atributu <strong>balance</strong> (předaného objektu) a
zadanou hodnotu (explicitní parametr).  V&nbsp;jazyce Moonscript je jedna
z&nbsp;variant zápisu této funkce následující:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
withdraw = <strong>(value) =&gt; self.balance -= value</strong>
</pre>

<p>Výsledek transpřekladu do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local withdraw
withdraw = function(self, value)
  self.balance = self.balance - value
end
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zjednodušený přístup k&nbsp;atributům objektů, implicitní parametry metod</h2>

<p>Vzhledem k&nbsp;tomu, že v&nbsp;metodách se prakticky vždy přistupuje
k&nbsp;atributům objektu (jehož reference je předána přes automaticky vytvořený
parametr <strong>self</strong>), poskytuje programovací jazyk Moonscript
možnost zjednodušeného přístupu k&nbsp;těmto atributům. Namísto zápisu:</p>

<pre>
self.balance
</pre>

<p>popř.&nbsp;sémanticky totožného zápisu:</p>

<pre>
self["balance"]
</pre>

<p>je možné použít:</p>

<pre>
@balance
</pre>

<p>Ukažme si například, jak lze tímto zkráceným způsobem zapsat metodu, která
od hodnoty uložené na účtu (tedy v&nbsp;atributu <strong>balance</strong>)
odečte předanou hodnotu:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
withdraw = <strong>(value) =&gt; @balance -= value</strong>
</pre>

<p>Způsob převodu do programovacího jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local withdraw
withdraw = function(self, value)
  self.balance = self.balance - value
end
</pre>

<p>Metody pochopitelně mohou akceptovat nepovinné parametry s&nbsp;nastavenou
výchozí hodnotou. Jedná se vlastně o kombinaci zápisu funkce s&nbsp;nepovinnými
parametry se zápisem metody s&nbsp;využitím &bdquo;tlusté šipky&ldquo;:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
withdraw = (<strong>value=0</strong>) =&gt; @balance -= value
</pre>

<p>Způsob transpřekladu takto zapsané metody do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local withdraw
withdraw = function(self, value)
  if value == nil then
    value = 0
  end
  self.balance = self.balance - value
end
</pre>

<p><div class="rs-tip-major">Poznámka: opět můžeme vidět, jak se nepovinné
parametry inicializují uvnitř těla metody &ndash; nejedná se tedy o žádné
magické operace prováděné ještě před zavoláním metody.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Problematika zápisu funkcí s&nbsp;mnoha parametry</h2>

<p>Poněkud problematický může být zápis funkcí nebo metod v&nbsp;případě, že je
použito velké množství parametrů popř.&nbsp;pokud jsou názvy parametrů dlouhé.
V&nbsp;takových případech se nemusí hlavička funkce vlézt na jediný řádek,
zejména ve chvíli, kdy se dodržuje například limit osmdesáti znaků na
programovém řádku. Následuje poněkud umělý příklad s&nbsp;funkcí, která očekává
deset parametrů a vrátí jejich součet:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
supersum = (a, b, c, d, e, f, g, h, i, j) -&gt;
   a + b + c + d + e + f + g + h + i + j
&nbsp;
print supersum 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
</pre>

<p>Jak samotná deklarace této funkce tak i její volání se přeloží do jazyka Lua
takto:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local supersum
supersum = function(a, b, c, d, e, f, g, h, i, j)
  return a + b + c + d + e + f + g + h + i + j
end
return print(supersum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
</pre>

<p>Parametry funkce v&nbsp;její deklaraci můžeme rozdělit na větší množství
řádků, stejně jako výpočet ve funkci realizovaný výrazem. Musíme však dodržet
odsazení!:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
supersum = <strong>(a, b, c, d, e</strong>,
            <strong>f, g, h, i, j)</strong> -&gt;
   a + b + c + d + e +
   f + g + h + i + j
&nbsp;
print supersum 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
</pre>

<p>Překlad do jazyka Lua je stále stejný, tj.&nbsp;totožný s&nbsp;předchozím
příkladem:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local supersum
supersum = function(a, b, c, d, e, f, g, h, i, j)
  return a + b + c + d + e + f + g + h + i + j
end
return print(supersum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
</pre>

<p>Dokonce je možné samotné volání funkce s&nbsp;předáním parametrů zapsat na
větší množství programových řádků. Opět je vhodné dodržet vizuální
odsazení:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
supersum = (a, b, c, d, e,
            f, g, h, i, j) -&gt;
   a + b + c + d + e +
   f + g + h + i + j
&nbsp;
print <strong>supersum 1, 2, 3, 4, 5,</strong>
               <strong>6, 7, 8, 9, 10</strong>
</pre>

<p>Výsledek po transpřekladu do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local supersum
supersum = function(a, b, c, d, e, f, g, h, i, j)
  return a + b + c + d + e + f + g + h + i + j
end
return print(supersum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Kdy jsou kulaté závorky při volání funkce povinné?</h2>

<p>Při zápisu programů v&nbsp;Moonscriptu se většinou obejdeme bez nutnosti
použití kulatých závorek (výjimkou jsou pochopitelně složitější aritmetické
výrazy). Někdy je ovšem nutné překladači &bdquo;pomoci&ldquo; v&nbsp;určení,
kterým funkcím náleží parametry. Jeden z&nbsp;příkladů jsme mohli vidět <a
href="#k02">ve druhé kapitole</a>, situace se ovšem ještě nepatrně mění ve
chvíli, kdy se parametry funkce rozepisují na větší množství programových
řádků. Podívejme se na demonstrační příklad, ve kterém je volána funkce
<strong>print</strong> se třemi parametry &ndash; přičemž konkrétní hodnoty
těchto parametrů jsou získány zavoláním funkce <strong>sum</strong>
s&nbsp;parametry 1, 2, 3 (první volání), 4, 5, 6 (druhé volání) a konečně 7, 8,
9 (třetí volání). Díky rozepsání na tři řádky je nutné kulaté závorky uvést
pouze při prvním volání funkce <strong>sum</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
sum = (a, b, c) -&gt; a + b + c
&nbsp;
print <strong>sum(1, 2, 3)</strong>,
      <strong>sum 4, 5, 6</strong>,
      <strong>sum 7, 8, 9</strong>
</pre>

<p>Způsob překladu do jazyka Lua naznačuje, že Moonscript správně pochopil,
které parametry patří druhému a třetímu volání funkce <strong>sum</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local sum
sum = function(a, b, c)
  return a + b + c
end
return print(<strong>sum(1, 2, 3), sum(4, 5, 6), sum(7, 8, 9)</strong>)
</pre>

<p><div class="rs-tip-major">Poznámka: důležité je, že první volání funkce
<strong>sum</strong> musí být uvedeno na stejném řádku, jako volání funkce
<strong>print</strong>, takže pouze zde jsou kulaté závorky nezbytné.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Generátorová notace seznamu</h2>

<p>V&nbsp;dalším textu se budeme zabývat zejména popisem velmi praktické
konstrukce, díky níž je možné v&nbsp;Moonscriptu používat takzvanou
<i>generátorovou notaci seznamu</i>, což je poněkud nepřesně přeložený anglický
termín <i>list comprehension</i>. O způsobu překladu tohoto termínu se vedly a
pravděpodobně dodnes vedou poměrně vášnivé diskuse; já se zde budu držet
překladu použitého například v&nbsp;knize <i>Ponořme se do Python(u) 3</i>
(původně <i>Dive Into Python 3</i>), kterou si můžete stáhnout na stránkách <a
href="http://knihy.nic.cz/">http://knihy.nic.cz/</a>, popř. si zde objednat i
papírovou verzi knihy.</p>

<p>S&nbsp;využitím generátorové notace seznamu je možné v&nbsp;programovacích
jazycích, které tento zápis podporují, zapsat deklaraci vytvoření nového
seznamu s&nbsp;využitím seznamu jiného, a to pomocí aplikace nějaké zvolené
funkce na všechny prvky zdrojového seznamu. V&nbsp;mnoha programovacích
jazycích je nutné pro generátorovou notaci seznamů používat zvláštní příkaz či
deklaraci, tj.&nbsp;vlastně novou syntaktickou kategorii. Z&nbsp;těch
známějších jazyků podporujících list comprehension se jedná například o Python,
Haskell, Scala či Erlang. Programovací jazyk Moonscript taktéž pro
generátorovou notaci používá vlastní syntaktická pravidla, která budou ukázána
na několika demonstračních příkladech.</p>

<p><div class="rs-tip-major">Poznámka: <i>seznamem</i> zde budeme myslet
tabulku, jejíž prvky mají indexy 1, 2, len(seznam).</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Základní syntaxe generátorové notace seznamu</h2>

<p>Základní způsob zápisu generátorové notace seznamu se do značné míry podobá
Pythonu:</p>

<pre>
doubled = <strong>[item * 2 for i, item in ipairs list]</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si iterace s&nbsp;využitím
generátoru <strong>ipairs</strong>, který v&nbsp;každé iteraci vrátí dvojici
index+hodnota prvku z&nbsp;tabulky.</div></p>

<p>Úplný skript, který nejprve vytvoří seznam s&nbsp;pěti celočíselnými prvky a
následně z&nbsp;tohoto seznamu vygeneruje seznam nový (s&nbsp;prvky
s&nbsp;dvojnásobnou hodnotou), může být zapsán takto:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
print_list = (list) -&gt;
   print "i", "item"
   for i, item in ipairs list
      print i, item
   print!
&nbsp;
&nbsp;
list = { 1, 2, 3, 4, 5 }
&nbsp;
print_list list
&nbsp;
doubled = <strong>[item * 2 for i, item in ipairs list]</strong>
&nbsp;
print_list doubled
</pre>

<p>Převod do jazyka Lua je již komplikovanější, ale stále ještě poměrně dobře
čitelný:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local print_list
print_list = function(list)
  print("i", "item")
  for i, item in ipairs(list) do
    print(i, item)
  end
  return print()
end
local list = {
  1,
  2,
  3,
  4,
  5
}
print_list(list)
local doubled
do
  local _accum_0 = { }
  local _len_0 = 1
  for i, item in ipairs(list) do
    _accum_0[_len_0] = item * 2
    _len_0 = _len_0 + 1
  end
  doubled = _accum_0
end
return print_list(doubled)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si v&nbsp;této oblasti
typického použití &bdquo;akumulátoru&ldquo;.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zkrácený zápis iteračního příkazu v&nbsp;generátorové notaci seznamu</h2>

<p>V&nbsp;předchozím příkladu jsme použili naprosto standardní programovou
smyčku pro průchod prvky seznamu resp.&nbsp;pole. Připomeňme si, že jak pole,
tak i slovníky jsou v&nbsp;jazyce Lua řešeny tabulkou s&nbsp;klíči a hodnotami,
přičemž u polí se používají indexy rostoucí od jedničky do délky pole (a taková
tabulka je interně optimalizována). Průchod je řešen následovně &ndash;
zavoláním generátoru <strong>ipairs</strong>, který pro dané pole (nebo
chcete-li seznam) vrací index a hodnotu:</p>

<pre>
for i, item in <strong>ipairs list</strong>
   print i, item
</pre>

<p>Prakticky stejnou konstrukci jsme použili v&nbsp;zápisu generátorové notace
seznamu:</p>

<pre>
doubled = [item * 2 for i, item in <strong>ipairs list</strong>]
</pre>

<p>Ovšem vzhledem k&nbsp;tomu, že se často opakuje nutnost iterovat nad prvky
seznamu (a zahodit přitom index), existuje v&nbsp;Moonscriptu i kratší zápis,
který sice může vypadat divně, ale je velmi praktický:</p>

<pre>
doubled = [item * 2 for item in <strong>*list</strong>]
</pre>

<p>Tento zápis použijeme v&nbsp;dalším skriptu:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
print_list = (list) -&gt;
   print "i", "item"
   for i, item in ipairs list
      print i, item
   print!
&nbsp;
&nbsp;
list = { 1, 2, 3, 4, 5 }
&nbsp;
print_list list
&nbsp;
doubled = <strong>[item * 2 for item in *list]</strong>
&nbsp;
print_list doubled
</pre>

<p>S&nbsp;výsledkem, který je ovšem odlišný od výsledku, který jsme mohli vidět
v&nbsp;předchozí kapitole:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>

local print_list
print_list = function(list)
  print("i", "item")
  for i, item in ipairs(list) do
    print(i, item)
  end
  return print()
end
local list = {
  1,
  2,
  3,
  4,
  5
}
print_list(list)
local doubled
do
  local _accum_0 = { }
  local _len_0 = 1
  for _index_0 = 1, #list do
    local item = list[_index_0]
    _accum_0[_len_0] = item * 2
    _len_0 = _len_0 + 1
  end
  doubled = _accum_0
end
return print_list(doubled)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se původní programová
smyčka typu <strong>for-each</strong> změnila na standardní počítanou
smyčku!</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Filtrace prvků v&nbsp;zápisu generátorové notace seznamu</h2>

<p>Moonscript je, jak již víme, založen na CoffeeScriptu a ten je inspirován
(kromě jiných jazyků) i Pythonem. V&nbsp;Pythonu můžeme v&nbsp;konstrukci
generátorové notace seznamu prvky filtrovat, a to například následujícím
způsobem, kterým získáme pouze sudé prvky (tedy prvky dělitelné dvěma):</p>

<pre>
evens = [item for item in list <strong>if item % 2 == 0</strong>]
</pre>

<p>V&nbsp;Moonscriptu je zápis nepatrně odlišný, protože se namísto klíčového
slova <strong>if</strong> používá klíčové slovo <strong>when</strong>.
Sémanticky stejný příklad tedy můžeme do Moonscriptu přepsat takto:</p>

<pre>
evens = [item for item in *list <strong>when item % 2 == 0</strong>]
</pre>

<p>Podívejme se nyní na úplný příklad, v&nbsp;němž ze seznamu s&nbsp;prvky 1 až
10 vyfiltrujeme pouze sudé hodnoty, které budou uloženy do nového seznamu:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
print_list = (list) -&gt;
   print "i", "item"
   for i, item in ipairs list
      print i, item
   print!
&nbsp;
&nbsp;
list = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
&nbsp;
print_list list
&nbsp;
evens = <strong>[item for item in *list when item % 2 == 0]</strong>
&nbsp;
print_list evens
</pre>

<p>Transformace tohoto skriptu do jazyka Lua je stále velmi přímočará &ndash;
provedl se přepis na smyčku s&nbsp;vloženou konstrukcí
<strong>if-then</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local print_list
print_list = function(list)
  print("i", "item")
  for i, item in ipairs(list) do
    print(i, item)
  end
  return print()
end
local list = {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
}
print_list(list)
local evens
do
  local _accum_0 = { }
  local _len_0 = 1
  for _index_0 = 1, #list do
    local item = list[_index_0]
    if item % 2 == 0 then
      _accum_0[_len_0] = item
      _len_0 = _len_0 + 1
    end
  end
  evens = _accum_0
end
return print_list(evens)
</pre>

<p>Pochopitelně si můžeme obě možnosti zkombinovat a vytvořit seznam obsahující
původně sudé prvky, ovšem vynásobené konstantou 3 &ndash; viz zvýrazněnou část
skriptu:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
print_list = (list) -&gt;
   print "i", "item"
   for i, item in ipairs list
      print i, item
   print!
&nbsp;
&nbsp;
list = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
&nbsp;
print_list list
&nbsp;
x = <strong>[item*3 for item in *list when item % 2 == 0]</strong>
&nbsp;
print_list x
</pre>

<p>Výsledek po transpřekladu do programovacího jazyka Lua bude vypadat
takto:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local print_list
print_list = function(list)
  print("i", "item")
  for i, item in ipairs(list) do
    print(i, item)
  end
  return print()
end
local list = {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
}
print_list(list)
local x
do
  local _accum_0 = { }
  local _len_0 = 1
  for _index_0 = 1, #list do
    local item = list[_index_0]
    if item % 2 == 0 then
      _accum_0[_len_0] = item * 3
      _len_0 = _len_0 + 1
    end
  end
  x = _accum_0
end
return print_list(x)
</pre>

<p><div class="rs-tip-major">Poznámka: stále se ještě jedná o čitelný kód,
ovšem vývojář by měl být rád za možnost použít mnohem stručnější a idiomaticky
zapsanou generátorovou notaci seznamu.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Generátorová notace seznamu založená na numerické smyčce</h2>

<p>Předchozí demonstrační příklady byly ve skutečnosti vytvořeny neefektivně,
protože nejdříve jsme ručně vytvořili seznam (tabulku) s&nbsp;prvky tvořícími
část aritmetické posloupnosti. Takové prvky lze například v&nbsp;Pythonu
vytvořit generátorem <strong>range</strong>. V&nbsp;Moonscriptu ke stejnému
účelu poslouží programová smyčka typu <strong>for</strong> s&nbsp;čítačem
(někdy se takové smyčce říká &bdquo;numerická smyčka&ldquo;). Vytvoření seznamu
s&nbsp;prvky z&nbsp;rozsahu od 1 do 100, které jsou sudé, bude vypadat
takto:</p>

<pre>
evens = [<strong>i for i=1,100 when i % 2 == 0</strong>]
</pre>

<p>A celý spustitelný program vytvořený v&nbsp;Moonscriptu:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
print_list = (list) -&gt;
   print "i", "item"
   for i, item in ipairs list
      print i, item
   print!
&nbsp;
evens = [i for i=1,100 when i % 2 == 0]
&nbsp;
print_list evens
</pre>

<p>Zajímavé bude zjistit, jak se interně takový seznam se sudými čísly vytvoří
po převodu výše uvedeného programu do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local print_list
print_list = function(list)
  print("i", "item")
  for i, item in ipairs(list) do
    print(i, item)
  end
  return print()
end
local evens
do
  local _accum_0 = { }
  local _len_0 = 1
  for i = 1, 100 do
    if i % 2 == 0 then
      _accum_0[_len_0] = i
      _len_0 = _len_0 + 1
    end
  end
  evens = _accum_0
end
return print_list(evens)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Malé doplnění: operace s&nbsp;prvky při použití numerické smyčky v&nbsp;generátorové notaci seznamu</h2>

<p>Jen pro úplnost si ukažme příklad, v&nbsp;němž se z&nbsp;původní sekvence
prvků od 1 do 100 vytvoří seznam obsahující násobky hodnoty 3, tedy 3, 6, ...
300. Jedno z&nbsp;možných řešení vypadá takto:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
print_list = (list) -&gt;
   print "i", "item"
   for i, item in ipairs list
      print i, item
   print!
&nbsp;
values = <strong>[i*3 for i=1,100]</strong>
&nbsp;
print_list values
</pre>

<p>A výsledný programový kód po transpilaci do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local print_list
print_list = function(list)
  print("i", "item")
  for i, item in ipairs(list) do
    print(i, item)
  end
  return print()
end
local values
do
  local _accum_0 = { }
  local _len_0 = 1
  for i = 1, 100 do
    _accum_0[_len_0] = i * 3
    _len_0 = _len_0 + 1
  end
  values = _accum_0
end
return print_list(values)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Generátorová notace slovníku</h2>

<p></p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>

print_table = (tbl) -&gt;
   print "key", "value"
   for key, value in pairs tbl
      print key, value
   print!

x = {
  name: "Pepek"
  surname: "Vyskoc"
}

lengths = {k,#v for k,v in pairs x}

print_table lengths
</pre>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>

local print_table
print_table = function(tbl)
  print("key", "value")
  for key, value in pairs(tbl) do
    print(key, value)
  end
  return print()
end
local x = {
  name = "Pepek",
  surname = "Vyskoc"
}
local lengths
do
  local _tbl_0 = { }
  for k, v in pairs(x) do
    _tbl_0[k] = #v
  end
  lengths = _tbl_0
end
return print_table(lengths)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>

print_list = (list) -&gt;
   print "i", "item"
   for i, item in ipairs list
      print i, item
   print!

list = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }

slice = [item for item in *list[4,8]]

print_list slice
</pre>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>

local print_list
print_list = function(list)
  print("i", "item")
  for i, item in ipairs(list) do
    print(i, item)
  end
  return print()
end
local list = {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
}
local slice
do
  local _accum_0 = { }
  local _len_0 = 1
  local _max_0 = 8
  for _index_0 = 4, _max_0 < 0 and #list + _max_0 or _max_0 do
    local item = list[_index_0]
    _accum_0[_len_0] = item
    _len_0 = _len_0 + 1
  end
  slice = _accum_0
end
return print_list(slice)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>

print_list = (list) -&gt;
   print "i", "item"
   for i, item in ipairs list
      print i, item
   print!

list = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }

slice = [item for item in *list[4,8] when item % 2 == 0]

print_list slice 
</pre>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>

local print_list
print_list = function(list)
  print("i", "item")
  for i, item in ipairs(list) do
    print(i, item)
  end
  return print()
end
local list = {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
}
local slice
do
  local _accum_0 = { }
  local _len_0 = 1
  local _max_0 = 8
  for _index_0 = 4, _max_0 < 0 and #list + _max_0 or _max_0 do
    local item = list[_index_0]
    if item % 2 == 0 then
      _accum_0[_len_0] = item
      _len_0 = _len_0 + 1
    end
  end
  slice = _accum_0
end
return print_list(slice)
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Objektově orientované programování v&nbsp;jazyce Lua</h2>

<pre>
Account = {balance = 0}

function Account:new(o)
    <i>-- create object if user does not provide one</i>
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end

function Account.withdraw(self, value)
    self.balance = self.balance - value
end

function Account:deposit(value)
    self.balance = self.balance + value
end

local a = Account:new{balance=0}
local b = Account:new{balance=50}

print("account A", a.balance)
print("account B", b.balance)

a:withdraw(100.00)
b:withdraw(100.00)

print("account A", a.balance)
print("account B", b.balance)

a:deposit(200.00)
b:deposit(200.00)

print("account A", a.balance)
print("account B", b.balance)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah následující části článku o Moonscriptu</h2>

<p>Ve třetí části článku o programovacím jazyce <i>Moonscript</i> si ukážeme,
jaké nové syntaktické konstrukce umožňují deklaraci tříd a konstrukci objektů,
tedy instancí těchto tříd. Jedná se o (v&nbsp;kontextu ekosystému
programovacího jazyka Lua) zcela nový koncept, který se nepodobá způsobu práce
s&nbsp;objekty, který jsme si ve stručnosti přiblížili v&nbsp;rámci <a
href="#k17">předchozí kapitoly</a> a který byl sice postaven na jednoduchých
základech, ovšem nepodobal se dnes přece jen populárnějším (resp.&nbsp;přesněji
řečeno <i>mainstreamovým</i>) objektovým systémům.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny <a href="https://www.root.cz/">minule</a> i dnes popsané
demonstrační příklady určené pro <i>Moonscript</i> byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/moonscript-examples">https://github.com/tisnik/moonscript-examples</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes prozatím stále velmi malý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis příkladu</th><th>Adresa (zdrojový kód)</th></tr>
<tr><td> 1</td><td>01_hello_world.lua</td><td>tradiční program typu &bdquo;Hello, world!&ldquo; napsaný v&nbsp;Lue</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/01_hello_world.lua">https://github.com/tisnik/moonscript-examples/blob/master/01_hello_world.lua</a></td></tr>
<tr><td> 2</td><td>02_hello_world.lua</td><td>okolo jediného parametru funkce není zapotřebí psát závorky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/02_hello_world.lua">https://github.com/tisnik/moonscript-examples/blob/master/02_hello_world.lua</a></td></tr>
<tr><td> 3</td><td>03_hello_world.moon</td><td>tradiční program typu &bdquo;Hello, world!&ldquo; napsaný v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.moon">https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.moon</a></td></tr>
<tr><td> 4</td><td>03_hello_world.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.lua">https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.lua</a></td></tr>
<tr><td> 5</td><td>04_local_variable.moon</td><td>lokální proměnné v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.moon">https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.moon</a></td></tr>
<tr><td> 6</td><td>04_local_variable.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.lua">https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.lua</a></td></tr>
<tr><td> 7</td><td>05_local_variable.moon</td><td>opětovné přiřazení do lokální proměnné</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.moon">https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.moon</a></td></tr>
<tr><td> 8</td><td>05_local_variable.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.lua">https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.lua</a></td></tr>
<tr><td> 9</td><td>06_local_variable.moon</td><td>čtení z&nbsp;neexistující proměnné</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.moon">https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.moon</a></td></tr>
<tr><td>10</td><td>06_local_variable.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.lua">https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.lua</a></td></tr>
<tr><td>11</td><td>07_string_interpolation.moon</td><td>interpolace řetězců v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.moon">https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.moon</a></td></tr>
<tr><td>12</td><td>07_string_interpolation.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.lua">https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.lua</a></td></tr>
<tr><td>13</td><td>08_string_interpolation.moon</td><td>interpolace řetězců, složitější příklad v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.moon">https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.moon</a></td></tr>
<tr><td>14</td><td>08_string_interpolation.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.lua">https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.lua</a></td></tr>
<tr><td>15</td><td>09_string_interpolation.moon</td><td>zákaz interpolace řetězců v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.moon">https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.moon</a></td></tr>
<tr><td>16</td><td>09_string_interpolation.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.lua">https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.lua</a></td></tr>
<tr><td>17</td><td>10_multiline_string.moon</td><td>víceřádkové řetězce v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.moon">https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.moon</a></td></tr>
<tr><td>18</td><td>10_multiline_string.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.lua">https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.lua</a></td></tr>
<tr><td>19</td><td>11_comparison_operator.moon</td><td>nový operátor pro test na nerovnost v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.moon">https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.moon</a></td></tr>
<tr><td>20</td><td>11_comparison_operator.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.lua">https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.lua</a></td></tr>
<tr><td>21</td><td>12_simple_assignment.moon</td><td>operátor jednoduchého přiřazení</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.moon</a></td></tr>
<tr><td>22</td><td>12_simple_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.lua</a></td></tr>
<tr><td>23</td><td>13_operator_assignment.moon</td><td>přiřazení zkombinované s&nbsp;aritmetickou operací</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.moon</a></td></tr>
<tr><td>24</td><td>13_operator_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.lua</a></td></tr>
<tr><td>25</td><td>14_operator_assignment.moon</td><td>přiřazení zkombinované s&nbsp;připojením řetězce</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.moon</a></td></tr>
<tr><td>26</td><td>14_operator_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.lua</a></td></tr>
<tr><td>27</td><td>15_operator_assignment.moon</td><td>přiřazení zkombinované s&nbsp;logickou operací</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.moon</a></td></tr>
<tr><td>28</td><td>15_operator_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.lua</a></td></tr>
<tr><td>29</td><td>16_function_parameters.moon</td><td>volání funkce bez parametrů, s&nbsp;jedním parametrem i více parametry</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.moon">https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.moon</a></td></tr>
<tr><td>30</td><td>16_function_parameters.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.lua">https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.lua</a></td></tr>
<tr><td>31</td><td>17_function_no_parenthesis.moon</td><td>volání funkce bez použití kulatých závorek</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.moon">https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.moon</a></td></tr>
<tr><td>32</td><td>17_function_no_parenthesis.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.lua">https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.lua</a></td></tr>
<tr><td>33</td><td>18_arrow_empty_function.moon</td><td>deklarace prázdné funkci s&nbsp;využitím operátoru šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.moon</a></td></tr>
<tr><td>34</td><td>18_arrow_empty_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.lua</a></td></tr>
<tr><td>35</td><td>19_arrow_noarg_function.moon</td><td>deklarace funkce bez parametrů s&nbsp;využitím operátoru šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.moon</a></td></tr>
<tr><td>36</td><td>19_arrow_noarg_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.lua</a></td></tr>
<tr><td>37</td><td>20_arrow_noarg_larger_function.moon</td><td>delší funkce bez parametrů vytvořená s&nbsp;využitím operátoru šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.moon</a></td></tr>
<tr><td>38</td><td>20_arrow_noarg_larger_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.lua</a></td></tr>
<tr><td>39</td><td>21_arrow_return_value.moon</td><td>funkce vracející jednu hodnotu vytvořená operátorem šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.moon">https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.moon</a></td></tr>
<tr><td>40</td><td>21_arrow_return_value.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.lua">https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.lua</a></td></tr>
<tr><td>41</td><td>22_arrow_return_value.moon</td><td>návratová hodnota funkce bez nutnosti použití klíčového slova <strong>return</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.moon">https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.moon</a></td></tr>
<tr><td>42</td><td>22_arrow_return_value.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.lua">https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.lua</a></td></tr>
<tr><td>43</td><td>23_arrow_function_parameters.moon</td><td>parametry funkce vytvořené operátorem šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.moon">https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.moon</a></td></tr>
<tr><td>44</td><td>23_arrow_function_parameters.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.lua">https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.lua</a></td></tr>
<tr><td>45</td><td>24_arrow_multiple_return_values.moon</td><td>více návratových hodnot funkce</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.moon">https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.moon</a></td></tr>
<tr><td>46</td><td>24_arrow_multiple_return_values.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.lua">https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.lua</a></td></tr>
<tr><td>47</td><td>25_arrow_default_arguments.moon</td><td>parametry s&nbsp;implicitní hodnotou</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.moon</a></td></tr>
<tr><td>48</td><td>25_arrow_default_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.lua</a></td></tr>
<tr><td>49</td><td>26_arrow_default_arguments.moon</td><td>způsob inicializace parametrů s&nbsp;implicitní hodnotou</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.moon</a></td></tr>
<tr><td>50</td><td>26_arrow_default_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.lua</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>51</td><td>27_arrow_function.moon</td><td>zopakování z&nbsp;minula &ndash; deklarace funkce operátorem šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/27_arrow_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/27_arrow_function.moon</a></td></tr>
<tr><td>52</td><td>27_arrow_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/27_arrow_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/27_arrow_function.lua</a></td></tr>
<tr><td>53</td><td>28_function_parenthesis.moon</td><td>funkce volaná v&nbsp;pozici parametru jiné funkce a problematika závorek</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/28_function_parenthesis.moon">https://github.com/tisnik/moonscript-examples/blob/master/28_function_parenthesis.moon</a></td></tr>
<tr><td>54</td><td>28_function_parenthesis.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/28_function_parenthesis.lua">https://github.com/tisnik/moonscript-examples/blob/master/28_function_parenthesis.lua</a></td></tr>
<tr><td>55</td><td>29_function_parenthesis.moon</td><td>funkce volaná v&nbsp;pozici parametru jiné funkce a problematika závorek</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/29_function_parenthesis.moon">https://github.com/tisnik/moonscript-examples/blob/master/29_function_parenthesis.moon</a></td></tr>
<tr><td>56</td><td>29_function_parenthesis.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/29_function_parenthesis.lua">https://github.com/tisnik/moonscript-examples/blob/master/29_function_parenthesis.lua</a></td></tr>
<tr><td>57</td><td>30_fat_arrow.moon</td><td>operátor &bdquo;tlusté šipky&ldquo;, funkce bez těla</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/30_fat_arrow.moon">https://github.com/tisnik/moonscript-examples/blob/master/30_fat_arrow.moon</a></td></tr>
<tr><td>58</td><td>30_fat_arrow.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/30_fat_arrow.lua">https://github.com/tisnik/moonscript-examples/blob/master/30_fat_arrow.lua</a></td></tr>
<tr><td>59</td><td>31_fat_arrow.moon</td><td>operátor &bdquo;tlusté šipky&ldquo;, funkce s&nbsp;parametrem a tělem</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/31_fat_arrow.moon">https://github.com/tisnik/moonscript-examples/blob/master/31_fat_arrow.moon</a></td></tr>
<tr><td>60</td><td>31_fat_arrow.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/31_fat_arrow.lua">https://github.com/tisnik/moonscript-examples/blob/master/31_fat_arrow.lua</a></td></tr>
<tr><td>61</td><td>32_fat_arrow.moon</td><td>operátor &bdquo;tlusté šipky&ldquo;, zjednodušený přístup k&nbsp;atributu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/32_fat_arrow.moon">https://github.com/tisnik/moonscript-examples/blob/master/32_fat_arrow.moon</a></td></tr>
<tr><td>62</td><td>32_fat_arrow.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/32_fat_arrow.lua">https://github.com/tisnik/moonscript-examples/blob/master/32_fat_arrow.lua</a></td></tr>
<tr><td>63</td><td>33_fat_arrow.moon</td><td>operátor &bdquo;tlusté šipky&ldquo;, zjednodušený přístup k&nbsp;atributu, výchozí hodnota parametru</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/33_fat_arrow.moon">https://github.com/tisnik/moonscript-examples/blob/master/33_fat_arrow.moon</a></td></tr>
<tr><td>64</td><td>33_fat_arrow.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/33_fat_arrow.lua">https://github.com/tisnik/moonscript-examples/blob/master/33_fat_arrow.lua</a></td></tr>
<tr><td>65</td><td>34_multiline_arguments.moon</td><td>funkce s&nbsp;velkým množstvím parametrů, zápis na jediném řádku</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/34_multiline_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/34_multiline_arguments.moon</a></td></tr>
<tr><td>66</td><td>34_multiline_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/34_multiline_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/34_multiline_arguments.lua</a></td></tr>
<tr><td>67</td><td>35_multiline_arguments.moon</td><td>funkce s&nbsp;velkým množstvím parametrů, zápis na více řádcích</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/35_multiline_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/35_multiline_arguments.moon</a></td></tr>
<tr><td>68</td><td>35_multiline_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/35_multiline_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/35_multiline_arguments.lua</a></td></tr>
<tr><td>69</td><td>36_multiline_arguments.moon</td><td>volání funkce s&nbsp;mnoha parametry, zápis na více řádcích</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/36_multiline_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/36_multiline_arguments.moon</a></td></tr>
<tr><td>70</td><td>36_multiline_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/36_multiline_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/36_multiline_arguments.lua</a></td></tr>
<tr><td>71</td><td>37_multiline_arguments.moon</td><td>problematika závorek při volání funkcí</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/37_multiline_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/37_multiline_arguments.moon</a></td></tr>
<tr><td>72</td><td>37_multiline_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/37_multiline_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/37_multiline_arguments.lua</a></td></tr>
<tr><td>73</td><td>38_list_comprehension.moon</td><td>generátorová notace seznamu, základní konstrukce</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/38_list_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/38_list_comprehension.moon</a></td></tr>
<tr><td>74</td><td>38_list_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/38_list_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/38_list_comprehension.lua</a></td></tr>
<tr><td>75</td><td>39_list_comprehension.moon</td><td>generátorová notace seznamu, náhrada <strong>ipairs</strong> za <strong>*</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/39_list_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/39_list_comprehension.moon</a></td></tr>
<tr><td>76</td><td>39_list_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/39_list_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/39_list_comprehension.lua</a></td></tr>
<tr><td>77</td><td>40_list_comprehension.moon</td><td>generátorová notace seznamu, podmínka <strong>when</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/40_list_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/40_list_comprehension.moon</a></td></tr>
<tr><td>78</td><td>40_list_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/40_list_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/40_list_comprehension.lua</a></td></tr>
<tr><td>79</td><td>41_list_comprehension.moon</td><td>generátorová notace seznamu, kombinace předchozích možností</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/41_list_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/41_list_comprehension.moon</a></td></tr>
<tr><td>80</td><td>41_list_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/41_list_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/41_list_comprehension.lua</a></td></tr>
<tr><td>81</td><td>42_numeric_comprehension.moon</td><td>&bdquo;numerická&ldquo; generátorová notace seznamu, základní varianta</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/42_numeric_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/42_numeric_comprehension.moon</a></td></tr>
<tr><td>82</td><td>42_numeric_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/42_numeric_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/42_numeric_comprehension.lua</a></td></tr>
<tr><td>83</td><td>43_numeric_comprehension.moon</td><td>&bdquo;numerická&ldquo; generátorová notace seznamu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/43_numeric_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/43_numeric_comprehension.moon</a></td></tr>
<tr><td>84</td><td>43_numeric_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/43_numeric_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/43_numeric_comprehension.lua</a></td></tr>
<tr><td>85</td><td>44_table_comprehension.moon</td><td>generátorová notace tabulky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/44_table_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/44_table_comprehension.moon</a></td></tr>
<tr><td>86</td><td>44_table_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/44_table_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/44_table_comprehension.lua</a></td></tr>
<tr><td>87</td><td>45_slicing.moon</td><td>slicing prováděný v&nbsp;konstrukci generátorové notace seznamu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/45_slicing.moon">https://github.com/tisnik/moonscript-examples/blob/master/45_slicing.moon</a></td></tr>
<tr><td>88</td><td>45_slicing.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/45_slicing.lua">https://github.com/tisnik/moonscript-examples/blob/master/45_slicing.lua</a></td></tr>
<tr><td>89</td><td>46_slicing.moon</td><td>slicing prováděný v&nbsp;konstrukci generátorové notace seznamu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/46_slicing.moon">https://github.com/tisnik/moonscript-examples/blob/master/46_slicing.moon</a></td></tr>
<tr><td>90</td><td>46_slicing.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/46_slicing.lua">https://github.com/tisnik/moonscript-examples/blob/master/46_slicing.lua</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránky projektu Moonscript<br />
<a href="https://moonscript.org/">https://moonscript.org/</a>
</li>

<li>Moonscript na GitHubu<br />
<a href="https://github.com/leafo/moonscript">https://github.com/leafo/moonscript</a>
</li>

<li>MoonScript online compiler<br />
<a href="https://moonscript.org/compiler/">https://moonscript.org/compiler/</a>
</li>

<li>Vydání Moonscriptu<br />
<a href="https://github.com/leafo/moonscript/releases">https://github.com/leafo/moonscript/releases</a>
</li>

<li>Moonscript-vim<br />
<a href="https://github.com/leafo/moonscript-vim">https://github.com/leafo/moonscript-vim</a>
</li>

<li>Moonscript Examples<br />
<a href="https://github.com/leafo/moonscript/wiki/Moonscript-Examples">https://github.com/leafo/moonscript/wiki/Moonscript-Examples</a>
</li>

<li>CoffeeScript<br />
<a href="https://coffeescript.org/">https://coffeescript.org/</a>
</li>

<li>CoffeeScript na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/CoffeeScript">https://en.wikipedia.org/wiki/CoffeeScript</a>
</li>

<li>CoffeeScript: řádně oslazený JavaScript<br />
<a href="https://zdrojak.cz/clanky/coffeescript-radne-oslazeny-javascript/">https://zdrojak.cz/clanky/coffeescript-radne-oslazeny-javascript/</a>
</li>

<li>CoffeeScript: druhá dávka steroidů pro vaše skripty<br />
<a href="https://zdrojak.cz/clanky/coffeescript-druha-davka-steroidu-pro-vase-skripty/">https://zdrojak.cz/clanky/coffeescript-druha-davka-steroidu-pro-vase-skripty/</a>
</li>

<li>Why CoffeeScript is still alive<br />
<a href="https://codeburst.io/why-coffeescript-is-still-alive-aeb369b91b85">https://codeburst.io/why-coffeescript-is-still-alive-aeb369b91b85</a>
</li>

<li>The CoffeeScript Wiki<br />
<a href="https://github.com/jashkenas/coffeescript/wiki">https://github.com/jashkenas/coffeescript/wiki</a>
</li>

<li>CoffeeScript In The Wild<br />
<a href="https://github.com/jashkenas/coffeescript/wiki/In-The-Wild">https://github.com/jashkenas/coffeescript/wiki/In-The-Wild</a>
</li>

<li>How CoffeeScript Got Forgotten<br />
<a href="https://betterprogramming.pub/how-coffeescript-got-forgotten-812328225987">https://betterprogramming.pub/how-coffeescript-got-forgotten-812328225987</a>
</li>

<li>Objektově orientované programování v&nbsp;jazyku Lua<br />
<a href="https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua/">https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua/</a>
</li>

<li>Objektově orientované programování v&nbsp;jazyku Lua (II)<br />
<a href="https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua-ii/">https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua-ii/</a>
</li>

<li>ULua: Universal Lua Distribution<br />
<a href="https://ulua.io/index.html">https://ulua.io/index.html</a>
</li>

<li>LuaRocks<br />
<a href="https://luarocks.org/">https://luarocks.org/</a>
</li>

<li>Awesome Lua &ndash; A curated list of quality Lua packages and resources.<br />
<a href="https://github.com/LewisJEllis/awesome-lua">https://github.com/LewisJEllis/awesome-lua</a>
</li>

<li>LuaJIT<br />
<a href="https://luajit.org/">https://luajit.org/</a>
</li>

<li>Running LuaJIT<br />
<a href="https://luajit.org/running.html">https://luajit.org/running.html</a>
</li>

<li>LuaJIT na GitHubu<br />
<a href="https://github.com/luajit">https://github.com/luajit</a>
</li>

<li>Lua Implementations<br />
<a href="http://lua-users.org/wiki/LuaImplementations">http://lua-users.org/wiki/LuaImplementations</a>
</li>

<li>Coconut: funkcionální jazyk s pattern matchingem kompatibilní s Pythonem<br />
<a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/</a>
</li>

<li>Coconut aneb funkcionální nadstavba nad Pythonem (2.část)<br />
<a href="https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/">https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut 1.1.0 (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/1.1.0">https://pypi.python.org/pypi/coconut/1.1.0</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

<li>patterns<br />
<a href="https://github.com/Suor/patterns">https://github.com/Suor/patterns</a>
</li>

<li>Source-to-source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>The Lua VM, on the Web<br />
<a href="https://kripken.github.io/lua.vm.js/lua.vm.js.html">https://kripken.github.io/lua.vm.js/lua.vm.js.html</a>
</li>

<li>Lua.vm.js REPL<br />
<a href="https://kripken.github.io/lua.vm.js/repl.html">https://kripken.github.io/lua.vm.js/repl.html</a>
</li>

<li>lua2js<br />
<a href="https://www.npmjs.com/package/lua2js">https://www.npmjs.com/package/lua2js</a>
</li>

<li>Wisp na GitHubu<br />
<a href="https://github.com/Gozala/wisp">https://github.com/Gozala/wisp</a>
</li>

<li>Wisp playground<br />
<a href="http://www.jeditoolkit.com/try-wisp/">http://www.jeditoolkit.com/try-wisp/</a>
</li>

<li>REPL v prohlížeči<br />
<a href="http://www.jeditoolkit.com/interactivate-wisp/">http://www.jeditoolkit.com/interactivate-wisp/</a>
</li>

<li>Minification (programming)<br />
<a href="https://en.wikipedia.org/wiki/Minification_(programming)">https://en.wikipedia.org/wiki/Minification_(programming)</a>
</li>

<li>Roblox<br />
<a href="https://en.wikipedia.org/wiki/Roblox">https://en.wikipedia.org/wiki/Roblox</a>
</li>

<li>Category:Lua (programming language)-scriptable game engines<br />
<a href="https://en.wikipedia.org/wiki/Category:Lua_(programming_language)-scriptable_game_engines">https://en.wikipedia.org/wiki/Category:Lua_(programming_language)-scriptable_game_engines</a>
</li>

<li>Goodbye Lua (shrnutí následujícího článku)<br />
<a href="https://www.reddit.com/r/lua/comments/4ld6ao/goodbye_lua/">https://www.reddit.com/r/lua/comments/4ld6ao/goodbye_lua/</a>
</li>

<li>Goodbye, Lua<br />
<a href="https://realmensch.org/2016/05/28/goodbye-lua/">https://realmensch.org/2016/05/28/goodbye-lua/</a>
</li>

<li>6th Edition – ECMAScript 2015<br />
<a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015">https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

<!--
    7:00 -  8:00  51000 52000
    8:00 -  9:00  53000 54000
    9:00 - 10:00  55000 56000
   10:00 - 11:00  57000 58000
   11:00 - 12:00  59000 60000
   12:00 - 13:00  61000 62000
   13:00 - 14:00  63000 64000
   14:00 - 15:00  65000 66000
   15:00 - 16:00  67000 68000
-->
