<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Podpora funkcionálního programovaní v jazyku Lua s využitím knihovny Moses (pokračování)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Podpora funkcionálního programovaní v jazyku Lua s využitím knihovny Moses (pokračování)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Podpora funkcionálního programovaní v&nbsp;jazyku Lua s&nbsp;využitím knihovny Moses (pokračování)</a></p>
<p><a href="#k02">*** 2. Funkce <strong>sum</strong> a <strong>product</strong></a></p>
<p><a href="#k03">*** 3. Funkce <strong>mean</strong>, <strong>median</strong>, <strong>min</strong> a <strong>max</strong></a></p>
<p><a href="#k04">*** 4. Pokročilejší zpracování polí: <strong>flatten</strong> a <strong>compact</strong></a></p>
<p><a href="#k05">*** 5. Vytvoření párů hodnot funkcí <strong>xprod</strong></a></p>
<p><a href="#k06">*** 6. Funkce <strong>reduce</strong> aplikovaná na tabulku</a></p>
<p><a href="#k07">*** 7. Zpracování prvků tabulky v&nbsp;opačném směru funkcí <strong>reduceRight</strong></a></p>
<p><a href="#k08">*** 8. Rozdělení tabulky funkcí vyššího řádu <strong>groupBy</strong></a></p>
<p><a href="#k09">*** 9. Iterace prvky tabulky pomocí funkcí <strong>each</strong></a></p>
<p><a href="#k10">*** 10. Rozdíl mezi funkcemi <strong>each</strong> a <strong>eachi</strong></a></p>
<p><a href="#k11">*** 11. Další funkce vyššího řádu procházející tabulkou: <strong>map</strong></a></p>
<p><a href="#k12">*** 12. Zřetězení operací nad tabulkou s&nbsp;využitím <strong>chain</strong></a></p>
<p><a href="#k13">*** 13. Složitější příklady zřetězení operací</a></p>
<p><a href="#k14">*** 14. Funkce vyššího řádu <strong>mapReduce</strong> a <strong>mapReduceRight</strong></a></p>
<p><a href="#k15">*** 15. Iterace prvky tabulky funkcemi <strong>sortedk</strong> a <strong>sortedv</strong></a></p>
<p><a href="#k16">*** 16. Funkce <strong>count</strong> a <strong>countf</strong></a></p>
<p><a href="#k17">*** 17. Funkce <strong>countBy</strong></a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Články o programovacím jazyce Lua i o technologii LuaJITu</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Podpora funkcionálního programovaní v&nbsp;jazyku Lua s&nbsp;využitím knihovny Moses (pokračování)</h2>

<p>Ve druhém článku o knihovně <i>Moses</i> se budeme zpočátku zabývat těmi funkcemi, které jsou primárně určené pro zpracování tabulek. Připomeňme si na tomto místě, že použitá terminologie může být matoucí, protože se pod pojmem tabulka ve skutečnosti skrývá datová struktura známá v&nbsp;jiných jazycích pod jménem slovník. V&nbsp;následující tabulce jsou terminologické rozdíly mezi tandemem <i>Lua+Moses</i> a většinou dalších programovacích jazyků shrnuty:</p>

<table>
<tr><th>#</th><th>Termín použitý v&nbsp;Moses</th><th>Běžný význam</th></tr>
<tr><td>1</td><td>array</td><td>list, set</td></tr>
<tr><td>2</td><td>table</td><td>dictionary</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti může tabulka v&nbsp;jazyku Lua obsahovat dvě části &ndash; &bdquo;seznamovou&ldquo; a &bdquo;slovníkovou&ldquo;. Jedná se o poměrně specifický rys tohoto programovacího jazyka, protože v&nbsp;mnoha jiných jazycích jsou k&nbsp;dispozici dvě odlišné datové struktury většinou i s&nbsp;odlišnými operacemi. V&nbsp;jazyku Lua je situace o to více matoucí, že některé operace &ndash; typicky operace resp.&nbsp;operátor pro zjištění délky struktury &ndash; pracují pouze se &bdquo;seznamovou&ldquo; částí tabulky. Ovšem díky použití knihovny <i>Moses</i> můžeme být od těchto nízkoúrovňových detailů do značné míry odstíněni. Více viz například klasický výklad dostupný na adrese <a href="http://lua-users.org/wiki/TablesTutorial">http://lua-users.org/wiki/TablesTutorial</a>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce <strong>sum</strong> a <strong>product</strong></h2>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk obsahu pole
<strong>function</strong> printArrayInLine(array)
    -- test na prázdné pole
    <strong>if</strong> #array == 0 <strong>then</strong>
        print("*empty*")
        <strong>return</strong>
    <strong>end</strong>
    <strong>for</strong> i, value in ipairs(array) <strong>do</strong>
        io.write(value)
        if i ~= #array then
            io.write(", ")
        <strong>end</strong>
    <strong>end</strong>
    print()
<strong>end</strong>


-- oddělení obsahu
<strong>function</strong> printSeparator()
    print("--------------------------------------------")
<strong>end</strong>


-- první vstupní pole obsahuje sekvenci čísel 1 až 10
a = range(10)

printSeparator()
print("Original array")
printArrayInLine(a)
print()

-- tisk součtu (sumace) a součinu všech hodnot v poli
print("Sum=" .. sum(a))
print("Product=" .. product(a))
</pre>

<p></p>

<pre>
--------------------------------------------
Original array
1, 2, 3, 4, 5, 6, 7, 8, 9, 10

Sum=55
Product=3628800
</pre>

<pre>
-- druhé vstupní pole obsahuje sekvenci čísel 0 až 10
b = range(0, 10)

printSeparator()
print("Original array")
printArrayInLine(b)
print()

-- tisk součtu (sumace) a součinu všech hodnot v poli
print("Sum=" .. sum(b))
print("Product=" .. product(b))
</pre>

<pre>
--------------------------------------------
Original array
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

Sum=55
Product=0
</pre>

<pre>
-- vstupní pole je prázné
a = {}

printSeparator()
print("Original array")
printArrayInLine(a)
print()

-- tisk součtu (sumace) a součinu všech hodnot v poli
print("Sum=" .. sum(a))
print("Product=" .. product(a))
</pre>

<pre>
--------------------------------------------
Original array
*empty*

Sum=0
Product=1
</pre>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- výpočet faktoriálu vstupních hodnot 0 až 10
<strong>for</strong> n = 0, 10 <strong>do</strong>
    -- konstrukce pole
    a = range(1, n)
    -- výpočet a tisk produktu hodnot 1..n == n!
    print(n, product(a))
<strong>end</strong>
</pre>

<pre>
0       0
1       1
2       2
3       6
4       24
5       120
6       720
7       5040
8       40320
9       362880
10      3628800
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Funkce <strong>mean</strong>, <strong>median</strong>, <strong>min</strong> a <strong>max</strong></h2>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk obsahu pole
<strong>function</strong> printArrayInLine(array)
    -- test na prázdné pole
    <strong>if</strong> #array == 0 <strong>then</strong>
        print("*empty*")
        <strong>return</strong>
    <strong>end</strong>
    <strong>for</strong> i, value in ipairs(array) <strong>do</strong>
        io.write(value)
        if i ~= #array then
            io.write(", ")
        <strong>end</strong>
    <strong>end</strong>
    print()
<strong>end</strong>


-- oddělení obsahu
<strong>function</strong> printSeparator()
    print("--------------------------------------------")
<strong>end</strong>


-- vytvoření a naplnění pole o sto prvcích
a={}
<strong>for</strong> i = 1, 100 <strong>do</strong>
    a[i] = math.random(10)
<strong>end</strong>

-- vytištění původního pole
printSeparator()
print("Original array")
printArrayInLine(a)

-- výpočet a tisk základních statistických veličin
print()
print("Mean:   " .. mean(a))
print("Median: " .. median(a))
print("Min:    " .. min(a))
print("Max:    " .. max(a))
</pre>

<p></p>

<pre>
--------------------------------------------
Original array
9, 4, 8, 8, 10, 2, 4, 8, 3, 6, 5, 7, 4, 6, 10, 10, 7, 8, 2, 7, 1, 3, 2, 9, 2, 5, 2, 2, 10, 3, 6, 9, 7, 3, 7, 6, 5, 10, 3, 8, 6, 8, 5, 9, 3, 4, 9, 10, 1, 10, 6, 1, 2, 7, 9, 4, 1, 1, 5, 1, 3, 10, 10, 9, 3, 6, 4, 8, 6, 7, 6, 1, 5, 10, 10, 8, 3, 8, 7, 4, 7, 2, 5, 9, 9, 4, 3, 9, 4, 7, 10, 6, 7, 9, 5, 10, 4, 9, 7, 10

Mean:   5.97
Median: 6.0
Min:    1
Max:    10
</pre>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk obsahu pole
<strong>function</strong> printArrayInLine(array)
    -- test na prázdné pole
    <strong>if</strong> #array == 0 <strong>then</strong>
        print("*empty*")
        <strong>return</strong>
    <strong>end</strong>
    <strong>for</strong> i, value in ipairs(array) do
        io.write(value)
        if i ~= #array then
            io.write(", ")
        <strong>end</strong>
    <strong>end</strong>
    print()
<strong>end</strong>


-- oddělení obsahu
<strong>function</strong> printSeparator()
    print("--------------------------------------------")
<strong>end</strong>


-- vytvoření a naplnění pole o sto prvcích
a={}
<strong>for</strong> i = 1, 100 do
    -- náhodná hodnota v rozsahu 0 až 10
    a[i] = math.random(0, 10)
<strong>end</strong>

-- vytištění původního pole
printSeparator()
print("Original array")
printArrayInLine(a)

-- výpočet a tisk základních statistických veličin
print()
print("Mean:   " .. mean(a))
print("Median: " .. median(a))
print("Min:    " .. min(a))
print("Max:    " .. max(a))
</pre>

<p></p>

<pre>
--------------------------------------------
Original array
9, 4, 8, 8, 10, 2, 3, 8, 3, 6, 5, 6, 4, 5, 10, 10, 6, 7, 1, 6, 0, 2, 1, 8, 1, 4, 1, 1, 10, 2, 5, 9, 6, 3, 7, 5, 5, 10, 3, 8, 5, 8, 4, 9, 3, 3, 8, 10, 0, 10, 5, 0, 2, 7, 9, 3, 0, 0, 5, 0, 2, 10, 9, 9, 2, 5, 4, 8, 5, 7, 5, 0, 4, 10, 10, 7, 3, 8, 7, 3, 7, 1, 4, 9, 9, 3, 2, 9, 3, 7, 10, 6, 7, 9, 4, 10, 4, 8, 7, 10

Mean:   5.5
Median: 5.0
Min:    0
Max:    10
</pre>

<pre>
-- prázdné vstupní pole
a={}

-- vytištění původního pole
printSeparator()
print("Original array")
printArrayInLine(a)

-- výpočet a tisk základních statistických veličin
print()
print("Mean:   " .. mean(a))
print("Median: " .. (median(a) or "nil"))
print("Min:    " .. (min(a) or "nil"))
print("Max:    " .. (max(a) or "nil"))
</pre>

<pre>
--------------------------------------------
Original array
*empty*

Mean:   -nan
Median: nil
Min:    nil
Max:    nil
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Pokročilejší zpracování polí: <strong>flatten</strong> a <strong>compact</strong></h2>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- získaní textové podoby obsahu pole obsahujícího další vnořená pole
<strong>function</strong> nestedArray(array)
    <strong>if</strong> type(array) == 'table' then
        <strong>local</strong> s = '('
        -- použít LISPovské s-výrazy
        <strong>for</strong> i, v in ipairs(array) do
            -- oddělovač
            if i > 1 then
                s = s .. ' '
            <strong>end</strong>
            -- pole mohou být vnořena
            s = s .. nestedArray(v)
        <strong>end</strong>
        return s .. ')'
    <strong>else</strong>
        return tostring(array)
    <strong>end</strong>
<strong>end</strong>


-- oddělení obsahu
<strong>function</strong> printSeparator()
    print("--------------------------------------------")
<strong>end</strong>


-- původní pole
a = {1, 2, 3, {4, 5, 6, {7, 8, 9}, {10, 11}}, 12}
printSeparator()

-- tisk původního pole
print("Original array")
print(nestedArray(a))
print()

-- tisk zploštělého pole
printSeparator()
print("Flatten array")
print(nestedArray(flatten(a)))
</pre>

<p></p>

<pre>
--------------------------------------------
Original array
(1 2 3 (4 5 6 (7 8 9) (10 11)) 12)

--------------------------------------------
Flatten array
(1 2 3 4 5 6 7 8 9 10 11 12)
</pre>

<pre>
-- původní pole
b = {"a", {"b", {"c", {"d", {"e", {"f", {"g"}}}}}}}
printSeparator()

-- tisk původního pole
print("Original array")
print(nestedArray(b))
print()

-- tisk zploštělého pole
print("Flatten array")
print(nestedArray(flatten(b)))
</pre>

<pre>
--------------------------------------------
Original array
(a (b (c (d (e (f (g)))))))

Flatten array
(a b c d e f g)
</pre>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- získaní textové podoby obsahu pole obsahujícího další vnořená pole
<strong>function</strong> nestedArray(array)
    <strong>if</strong> type(array) == 'table' then
        -- použít LISPovské s-výrazy
        <strong>local</strong> s = '('
        <strong>for</strong> i, v in ipairs(array) do
            -- oddělovač
            if i > 1 then
                s = s .. ' '
            <strong>end</strong>
            -- pole mohou být vnořena
            s = s .. nestedArray(v)
        <strong>end</strong>
        return s .. ')'
    <strong>else</strong>
        return tostring(array)
    <strong>end</strong>
<strong>end</strong>


-- oddělení obsahu
<strong>function</strong> printSeparator()
    print("--------------------------------------------")
<strong>end</strong>


-- původní pole
a = {1, 2, 3, {4, 5, 6, {7, 8, 9}, {10, 11}}, 12}
printSeparator()

-- tisk původního pole
print("Original array")
print(nestedArray(a))
print()
printSeparator()

-- tisk zploštělého pole
print("Flatten array")
print(nestedArray(flatten(a, true)))
</pre>

<p></p>

<pre>
--------------------------------------------
Original array
(1 2 3 (4 5 6 (7 8 9) (10 11)) 12)

--------------------------------------------
Flatten array
(1 2 3 4 5 6 (7 8 9) (10 11) 12)
</pre>

<pre>
-- původní pole
b = {"a", {"b", {"c", {"d", {"e", {"f", {"g"}}}}}}}
printSeparator()

-- tisk původního pole
print("Original array")
print(nestedArray(b))
print()

-- tisk zploštělého pole
print("Flatten array")
print(nestedArray(flatten(b, true)))
</pre>

<pre>
--------------------------------------------
Original array
(a (b (c (d (e (f (g)))))))

Flatten array
(a b (c (d (e (f (g))))))
</pre>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- získaní textové podoby obsahu pole obsahujícího další vnořená pole
<strong>function</strong> nestedArray(array)
    <strong>if</strong> type(array) == 'table' then
        -- použít LISPovské s-výrazy
        <strong>local</strong> s = '('
        <strong>for</strong> i, v in ipairs(array) do
            -- oddělovač
            if i > 1 then
                s = s .. ' '
            <strong>end</strong>
            -- pole mohou být vnořena
            s = s .. nestedArray(v)
        <strong>end</strong>
        return s .. ')'
    <strong>else</strong>
        return tostring(array)
    <strong>end</strong>
<strong>end</strong>


-- oddělení obsahu
<strong>function</strong> printSeparator()
    print("--------------------------------------------")
<strong>end</strong>


-- původní pole
a = {1, 2, 3, {4, 5, 6, {7, 8, 9, {10, 11}}, {12, 13, {14, 15}}}, 16}
printSeparator()

-- tisk původního pole
print("Original array")
print(nestedArray(a))

printSeparator()

-- tisk postupně "zplošťovaného" pole
print("Flatten array")

repeat
    b = a
    a = flatten(a, true)
    print(nestedArray(b))
until isEqual(a, b)
</pre>

<pre>
--------------------------------------------
Original array
(1 2 3 (4 5 6 (7 8 9 (10 11)) (12 13 (14 15))) 16)

--------------------------------------------
Flatten array
(1 2 3 (4 5 6 (7 8 9 (10 11)) (12 13 (14 15))) 16)
(1 2 3 4 5 6 (7 8 9 (10 11)) (12 13 (14 15)) 16)
(1 2 3 4 5 6 7 8 9 (10 11) 12 13 (14 15) 16)
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)
</pre>

<pre>
-- původní pole
a = {"a", {"b", {"c", {"d", {"e", {"f", {"g"}}}}}}}
printSeparator()

-- tisk původního pole
print("Original array")
print(nestedArray(a))
print()

-- tisk postupně "zplošťovaného" pole
print("Flatten array")

repeat
    b = a
    a = flatten(a, true)
    print(nestedArray(b))
until isEqual(a, b)
</pre>

<pre>
--------------------------------------------
Original array
(a (b (c (d (e (f (g)))))))

Flatten array
(a (b (c (d (e (f (g)))))))
(a b (c (d (e (f (g))))))
(a b c (d (e (f (g)))))
(a b c d (e (f (g))))
(a b c d e (f (g)))
(a b c d e f (g))
(a b c d e f g)
</pre>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk obsahu pole
<strong>function</strong> printArrayInLine(array)
    -- test na prázdné pole
    <strong>if</strong> #array == 0 then
        print("*empty*")
        return
    <strong>end</strong>
    <strong>for</strong> i, value in ipairs(array) do
        io.write(tostring(value))
        if i ~= #array then
            io.write(", ")
        end
    <strong>end</strong>
    print()
<strong>end</strong>


-- oddělení obsahu
<strong>function</strong> printSeparator()
    print("--------------------------------------------")
<strong>end</strong>


-- tisk původního pole i pole "kompaktního"
<strong>function</strong> printCompacedArray(a)
    printSeparator()
    print("original array")
    printArrayInLine(a)
    print("compacted array")
    printArrayInLine(compact(a))
    print()
<strong>end</strong>


printCompacedArray({})
printCompacedArray({1, 2, 3, 4})
printCompacedArray(zeros(10))
printCompacedArray({true, false, true, false, true, false})
printCompacedArray({"foo", nil, "bar", nil, nil, "baz", nil, nil, nil})
</pre>

<pre>
--------------------------------------------
original array
*empty*
compacted array
*empty*

--------------------------------------------
original array
1, 2, 3, 4
compacted array
1, 2, 3, 4

--------------------------------------------
original array
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
compacted array
0, 0, 0, 0, 0, 0, 0, 0, 0, 0

--------------------------------------------
original array
true, false, true, false, true, false
compacted array
true, true, true

--------------------------------------------
original array
foo
compacted array
foo, bar, baz
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vytvoření párů hodnot funkcí <strong>xprod</strong></h2>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk obsahu pole
<strong>function</strong> printArrayInLine(array)
    -- test na prázdné pole
    <strong>if</strong> #array == 0 then
        print("*empty*")
        return
    <strong>end</strong>
    <strong>for</strong> i, value in ipairs(array) do
        io.write(value)
        if i ~= #array then
            io.write(", ")
        end
    <strong>end</strong>
    print()
<strong>end</strong>


-- získaní textové podoby obsahu pole obsahujícího další vnořená pole
<strong>function</strong> nestedArray(array)
    <strong>if</strong> type(array) == 'table' then
        -- použít LISPovské s-výrazy
        local s = '('
        for i, v in ipairs(array) do
            -- oddělovač
            if i > 1 then
                s = s .. ' '
            end
            -- pole mohou být vnořena
            s = s .. nestedArray(v)
        end
        return s .. ')'
    <strong>else</strong>
        return tostring(array)
    <strong>end</strong>
<strong>end</strong>


-- oddělení obsahu
<strong>function</strong> printSeparator()
    print("--------------------------------------------")
<strong>end</strong>


a = {"foo", "bar", "baz"}
b = range(5)
p = xprod(a, b)

printSeparator()
print("first original array")
printArrayInLine(a)
print()
print("second original array")
printArrayInLine(b)
print()
print("generated pairs")
print(nestedArray(p))
</pre>

<p></p>

<pre>
--------------------------------------------
first original array
foo, bar, baz

second original array
1, 2, 3, 4, 5

generated pairs
((foo 1) (foo 2) (foo 3) (foo 4) (foo 5) (bar 1) (bar 2) (bar 3) (bar 4) (bar 5) (baz 1) (baz 2) (baz 3) (baz 4) (baz 5))
</pre>

<pre>
a = range(100)
b = {}
p = xprod(a, b)
</pre>

<pre>
--------------------------------------------
first original array
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100

second original array
*empty*

generated pairs
()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Funkce <strong>reduce</strong> aplikovaná na tabulku</h2>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- pomocná funkce pro součin jejích dvou parametrů
function multiply(x, y)
    return x * y
end


-- výpočet faktoriálu vstupních hodnot 0 až 10
for n = 0, 10 do
    -- konstrukce pole
    a = range(1, n)
    -- výpočet produktu hodnot 1..n == n!
    prod = reduce(a, multiply)
    -- tisk produktu hodnot 1..n == n!
    print(n, prod)
end
</pre>

<p></p>

<pre>
0       0
1       1
2       2
3       6
4       24
5       120
6       720
7       5040
8       40320
9       362880
10      3628800
</pre>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- výpočet faktoriálu vstupních hodnot 0 až 10
for n = 0, 10 do
    -- konstrukce pole
    a = range(1, n)
    -- výpočet produktu hodnot 1..n == n!
    -- (použila se anonymní funkce)
    prod = reduce(a, function (x, y) return x * y end)
    -- tisk produktu hodnot 1..n == n!
    print(n, prod)
end
</pre>

<pre>
0       0
1       1
2       2
3       6
4       24
5       120
6       720
7       5040
8       40320
9       362880
10      3628800
</pre>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- vstupní pole
a = {"foo", "bar", "baz"}

-- postupné zpracování prvků pole zleva s akumulací výsledku
print(reduce(a, function (x, y) return x .. " " .. y end))
</pre>

<pre>
foo bar baz
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zpracování prvků tabulky v&nbsp;opačném směru funkcí <strong>reduceRight</strong></h2>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- vstupní pole
a = range(10)

-- postupné zpracování prvků pole zleva s akumulací výsledku
print("reduceLeft")
print(reduce(a, function (x, y) return tostring(x) .. " " .. tostring(y) end))

print()

-- postupné zpracování prvků pole zprava s akumulací výsledku
print("reduceRight")
print(reduceRight(a, function (x, y) return tostring(x) .. " " .. tostring(y) end))
</pre>

<p></p>

<pre>
reduceLeft
1 2 3 4 5 6 7 8 9 10

reduceRight
10 9 8 7 6 5 4 3 2 1
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Rozdělení tabulky funkcí vyššího řádu <strong>groupBy</strong></h2>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk obsahu pole
function printArrayInLine(array)
    -- test na prázdné pole
    if #array == 0 then
        print("*empty*")
        return
    end
    for i, value in ipairs(array) do
        io.write(value)
        if i ~= #array then
            io.write(", ")
        end
    end
    print()
end

-- tisk tabulky, jejíž prvky tvoří pole
function printTable(table)
    for key, values in pairs(table) do
        -- tisk klíče
        io.write(key .. ":\t")
        -- tisk hodnot
        printArrayInLine(values)
    end
end

-- oddělení obsahu
function printSeparator()
    print("--------------------------------------------")
end


-- pomocná funkce, která na základě hodnoty prvku vrátí návěští
function labelItem(x)
    if x % 2 == 0 then
        return "even"
    else
        return "odd"
    end
end


-- původní sekvence
a = range(10)

-- tisk původní sekvence
printSeparator()
print("original array")
printArrayInLine(a)
print()

-- rozdělení prvků v sekvenci podle návěští sudá/lichá
g = groupBy(a, labelItem)

-- tisk prvků rozdělených do skupin
printSeparator()
print("groupedBy odd/even")
printTable(g)
</pre>

<p></p>

<pre>
--------------------------------------------
original array
1, 2, 3, 4, 5, 6, 7, 8, 9, 10

--------------------------------------------
groupedBy odd/even
even:   2, 4, 6, 8, 10
odd:    1, 3, 5, 7, 9
</pre>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk obsahu pole
function printArrayInLine(array)
    -- test na prázdné pole
    if #array == 0 then
        print("*empty*")
        return
    end
    for i, value in ipairs(array) do
        io.write(tostring(value))
        if i ~= #array then
            io.write(", ")
        end
    end
    print()
end

-- tisk tabulky, jejíž prvky tvoří pole
function printTable(table)
    for key, values in pairs(table) do
        -- tisk klíče
        io.write(key .. ":\t")
        -- tisk hodnot
        printArrayInLine(values)
    end
end

-- oddělení obsahu
function printSeparator()
    print("--------------------------------------------")
end


-- původní sekvence
a = {1, 2, 3, 4, "a", "b", "c", nil, true, false, 42, function () end, print}

-- tisk původní sekvence
printSeparator()
print("original array")
printArrayInLine(a)
print()

-- rozdělení prvků v sekvenci podle jejich typu
g = groupBy(a, type)

-- tisk prvků rozdělených do skupin podle jejich typu
printSeparator()
print("groupedBy type")
printTable(g)
</pre>

<pre>
--------------------------------------------
original array
1, 2, 3, 4, a, b, c, 

--------------------------------------------
groupedBy type
boolean:        true, false
string: a, b, c
number: 1, 2, 3, 4, 42
function:       function: 0x558e68e62e30, function: 0x7f9bfb7316b0
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Iterace prvky tabulky pomocí funkcí <strong>each</strong></h2>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk tabulky, jejíž prvky tvoří pole
function printTable(table)
    for key, values in pairs(table) do
        -- tisk klíče
        io.write(key .. ":\t")
        -- tisk hodnot
        each(values, function (value) io.write(tostring(value) .. " ") end)
        print()
    end
end

-- oddělení obsahu
function printSeparator()
    print("--------------------------------------------")
end


-- původní sekvence
a = {1, 2, 3, 4, "a", "b", "c", nil, true, false, 42, function () end, print}

-- tisk původní sekvence funkcí each
printSeparator()
print("original array")
each(a, function(value, index) print(value) end)
print()

-- rozdělení prvků v sekvenci podle jejich typu
g = groupBy(a, type)

-- tisk prvků rozdělených do skupin podle jejich typu
printSeparator()
print("groupedBy type")
printTable(g)
</pre>

<p></p>

<pre>
--------------------------------------------
original array
1
2
3
4
a
b
c
true
false
42
function: 0x55603df42e00
function: 0x7fa6a6f706b0

--------------------------------------------
groupedBy type
number:	1 2 3 4 42 
string:	a b c 
function:	function: 0x55603df42e00 function: 0x7fa6a6f706b0 
boolean:	true false 
</pre>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk tabulky, jejíž prvky tvoří pole
function printTable(table)
    -- tisk prvků tabulky pomocí funkce each
    each(table, function(values, key)
            -- tisk klíče
            io.write(key .. ":\t")
            -- tisk hodnot
            each(values, function (value) io.write(tostring(value) .. " ") end)
            print()
        end
    )
end

-- oddělení obsahu
function printSeparator()
    print("--------------------------------------------")
end


-- původní sekvence
a = {1, 2, 3, 4, "a", "b", "c", nil, true, false, 42, function () end, print}

-- tisk původní sekvence funkcí each
printSeparator()
print("original array")
each(a, function(value, index) print(value) end)
print()

-- rozdělení prvků v sekvenci podle jejich typu
g = groupBy(a, type)

printSeparator()
print("groupedBy type")
printTable(g)
</pre>

<pre>
--------------------------------------------
original array
1
2
3
4
a
b
c
true
false
42
function: 0x5590b5e69e00
function: 0x7fe95625b6b0

--------------------------------------------
groupedBy type
number:	1 2 3 4 42 
boolean:	true false 
string:	a b c 
function:	function: 0x5590b5e69e00 function: 0x7fe95625b6b0 
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rozdíl mezi funkcemi <strong>each</strong> a <strong>eachi</strong></h2>

<p></p>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk tabulky, jejíž prvky tvoří pole
function printTable(table)
    -- tisk prvků tabulky funkcí each
    each(table, function(values, key)
            -- tisk klíče
            io.write(key .. ":\t")
            -- tisk hodnot
            eachi(values, function (value) io.write(tostring(value) .. " ") end)
            print()
        end
    )
end

-- oddělení obsahu
function printSeparator()
    print("--------------------------------------------")
end


-- původní sekvence
a = {1, 2, 3, 4, "a", "b", "c", nil, true, false, 42, function () end, print}

-- tisk původní sekvence funkcí eachi
printSeparator()
print("original array")
eachi(a, function(value, index) print(value) end)
print()

-- rozdělení prvků v sekvenci podle jejich typu
g = groupBy(a, type)

printSeparator()
print("groupedBy type")
printTable(g)
</pre>

<p></p>

<pre>
--------------------------------------------
original array
1
2
3
4
a
b
c
true
false
42
function: 0x5620cc0b2e00
function: 0x7efffb42e6b0

--------------------------------------------
groupedBy type
function:	function: 0x5620cc0b2e00 function: 0x7efffb42e6b0 
number:	1 2 3 4 42 
boolean:	true false 
string:	a b c 
</pre>

<pre>
-- načtení knihovny Moses a současně import symbolů do globálního jmenného prostoru
M = require "moses"
M.import()


-- tisk tabulky, jejíž prvky tvoří pole
function printTable(table)
    -- tisk tabulky funkcí eachi
    eachi(table, function(values, key)
            -- tisk klíče
            io.write(key .. ":\t")
            -- tisk hodnot
            eachi(values, function (value) io.write(tostring(value) .. " ") end)
            print()
        end
    )
end

-- oddělení obsahu
function printSeparator()
    print("--------------------------------------------")
end


-- původní sekvence
a = {1, 2, 3, 4, "a", "b", "c", nil, true, false, 42, function () end, print}

-- tisk původní sekvence funkcí eachi
printSeparator()
print("original array")
eachi(a, function(value, index) print(value) end)
print()

-- rozdělení prvků v sekvenci podle jejich typu
g = groupBy(a, type)

printSeparator()
print("groupedBy type")
printTable(g)
</pre>

<pre>
--------------------------------------------
original array
1
2
3
4
a
b
c
true
false
42
function: 0x55ea586d1e00
function: 0x7f31fea176b0

--------------------------------------------
groupedBy type
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další funkce vyššího řádu procházející tabulkou: <strong>map</strong></h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zřetězení operací nad tabulkou s&nbsp;využitím <strong>chain</strong></h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Složitější příklady zřetězení operací</h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Funkce vyššího řádu <strong>mapReduce</strong> a <strong>mapReduceRight</strong></h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Iterace prvky tabulky funkcemi <strong>sortedk</strong> a <strong>sortedv</strong></h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Funkce <strong>count</strong> a <strong>countf</strong></h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Funkce <strong>countBy</strong></h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/functional-lua">https://github.com/tisnik/functional-lua</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem &ndash;
alespoň prozatím &ndash; velmi malý, dnes má přibližně několik jednotek
kilobajtů), můžete namísto toho použít odkazy na jednotlivé demonstrační
příklady a jejich části, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>21_sum_prod.lua</td><td>výpočet součtu a součinu prvků pole</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/21_sum_prod.lua">https://github.com/tisnik/functional-lua/tree/master/moses/21_sum_prod.lua</a></td></tr>
<tr><td> 2</td><td>22_sum_prod_empty_array.lua</td><td>výpočet součtu a součinu prvků prázdného pole</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/22_sum_prod_empty_array.lua">https://github.com/tisnik/functional-lua/tree/master/moses/22_sum_prod_empty_array.lua</a></td></tr>
<tr><td> 3</td><td>23_factorial.lua</td><td>zobrazení faktoriálu vstupních hodnot 1..10</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/23_factorial.lua">https://github.com/tisnik/functional-lua/tree/master/moses/23_factorial.lua</a></td></tr>
<tr><td> 4</td><td>24_mean_median_min_max.lua</td><td>výpočet průměru, mediánu, minimální a maximální hodnoty</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/24_mean_median_min_max.lua">https://github.com/tisnik/functional-lua/tree/master/moses/24_mean_median_min_max.lua</a></td></tr>
<tr><td> 5</td><td>25_mean_median_min_max.lua</td><td>výpočet průměru, mediánu, minimální a maximální hodnoty</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/25_mean_median_min_max.lua">https://github.com/tisnik/functional-lua/tree/master/moses/25_mean_median_min_max.lua</a></td></tr>
<tr><td> 6</td><td>26_mean_median_min_max_zeros.lua</td><td>výpočet průměru, mediánu, minimální a maximální hodnoty prázdného pole</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/26_mean_median_min_max_zeros.lua">https://github.com/tisnik/functional-lua/tree/master/moses/26_mean_median_min_max_zeros.lua</a></td></tr>
<tr><td> 7</td><td>27_flatten.lua</td><td>&bdquo;zploštění&ldquo; pole na všech úrovních</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/27_flatten.lua">https://github.com/tisnik/functional-lua/tree/master/moses/27_flatten.lua</a></td></tr>
<tr><td> 8</td><td>28_flatten_shallow.lua</td><td>první iterace &bdquo;zploštění&ldquo; pole</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/28_flatten_shallow.lua">https://github.com/tisnik/functional-lua/tree/master/moses/28_flatten_shallow.lua</a></td></tr>
<tr><td> 9</td><td>29_flatten_steps.lua</td><td>postupné iterace zploštění pole</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/29_flatten_steps.lua">https://github.com/tisnik/functional-lua/tree/master/moses/29_flatten_steps.lua</a></td></tr>
<tr><td>10</td><td>30_compact.lua</td><td>odstranění prvků <strong>false</strong> a <strong>nil</strong> ze vstupního pole</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/30_compact.lua">https://github.com/tisnik/functional-lua/tree/master/moses/30_compact.lua</a></td></tr>
<tr><td>11</td><td>31_xprod.lua</td><td>vytvoření tabulky se všemi kombinacemi prvků ze vstupních polí</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/31_xprod.lua">https://github.com/tisnik/functional-lua/tree/master/moses/31_xprod.lua</a></td></tr>
<tr><td>12</td><td>32_xprod_empty_array.lua</td><td>vytvoření tabulky se všemi kombinacemi prvků ze vstupních polí, jedno z&nbsp;polí je prázdné</td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/32_xprod_empty_array.lua">https://github.com/tisnik/functional-lua/tree/master/moses/32_xprod_empty_array.lua</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/">https://github.com/tisnik/functional-lua/tree/master/moses/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/">https://github.com/tisnik/functional-lua/tree/master/moses/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/">https://github.com/tisnik/functional-lua/tree/master/moses/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/">https://github.com/tisnik/functional-lua/tree/master/moses/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/">https://github.com/tisnik/functional-lua/tree/master/moses/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/">https://github.com/tisnik/functional-lua/tree/master/moses/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/">https://github.com/tisnik/functional-lua/tree/master/moses/</a></td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/moses/">https://github.com/tisnik/functional-lua/tree/master/moses/</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Články o programovacím jazyce Lua i o technologii LuaJITu</h2>

<p>Předchozí dva články o funkcionálním stylu programování podporovaného
knihovnou <i>Lua Fun</i>:</p>

<ol>

<li>Lua Fun: knihovna pro zpracování konečných i nekonečných sekvencí v&nbsp;jazyce Lua<br />
<a href="https://www.root.cz/clanky/lua-fun-knihovna-pro-zpracovani-konecnych-i-nekonecnych-sekvenci-v-jazyce-lua/">https://www.root.cz/clanky/lua-fun-knihovna-pro-zpracovani-konecnych-i-nekonecnych-sekvenci-v-jazyce-lua/</a>
</li>

<li>Lua Fun: knihovna pro zpracování konečných i nekonečných sekvencí v&nbsp;jazyce Lua (dokončení)<br />
<a href="https://www.root.cz/clanky/lua-fun-knihovna-pro-zpracovani-konecnych-i-nekonecnych-sekvenci-v-jazyce-lua-dokonceni/">https://www.root.cz/clanky/lua-fun-knihovna-pro-zpracovani-konecnych-i-nekonecnych-sekvenci-v-jazyce-lua-dokonceni/</a>
</li>

<li>Podpora funkcionálního programovaní v&nbsp;jazyku Lua s&nbsp;využitím knihovny Moses<br />
<a href="https://www.root.cz/clanky/podpora-funkcionalniho-programovani-v-jazyku-lua-s-vyuzitim-knihovny-moses/">https://www.root.cz/clanky/podpora-funkcionalniho-programovani-v-jazyku-lua-s-vyuzitim-knihovny-moses/</a>
</li>

</ol>

<p>Programovacím jazykem Lua jsme se již na stránkách Rootu poměrně podrobně
zabývali <a
href="https://www.root.cz/serialy/programovaci-jazyk-lua/">v&nbsp;samostatném
seriálu</a>. Jedná se o snadno naučitelný jazyk, který je ovšem (mj.&nbsp;i
díky konceptu metatabulek) rozšiřitelný a poměrně tvárný. Viz též následující
odkazy na již vydané články (včetně odkazu na e-book, jenž na základě těchto
článků později vznikl):</p>

<ol>

<li>Programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua/">https://www.root.cz/clanky/programovaci-jazyk-lua/</a>
</li>

<li>Základní konstrukce v programovacím jazyku Lua<br />
<a href="https://www.root.cz/clanky/zakladni-konstrukce-v-programovacim-jazyku-lua/">https://www.root.cz/clanky/zakladni-konstrukce-v-programovacim-jazyku-lua/</a>
</li>

<li>Operátory a asociativní pole v&nbsp;jazyku Lua<br />
<a href="https://www.root.cz/clanky/operatory-a-asociativni-pole-v-jazyku-lua/">https://www.root.cz/clanky/operatory-a-asociativni-pole-v-jazyku-lua/</a>
</li>

<li>Funkce v&nbsp;programovacím jazyku Lua<br />
<a href="https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua/">https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua/</a>
</li>

<li>Funkce v&nbsp;programovacím jazyku Lua - uzávěry<br />
<a href="https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua-uzavery/">https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua-uzavery/</a>
</li>

<li>Programovací jazyk Lua vestavěný do aplikací<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-vestaveny-do-aplikaci/">https://www.root.cz/clanky/programovaci-jazyk-lua-vestaveny-do-aplikaci/</a>
</li>

<li>Programovací jazyk Lua v&nbsp;aplikacích II<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-aplikacich-ii/">https://www.root.cz/clanky/programovaci-jazyk-lua-v-aplikacich-ii/</a>
</li>

<li>Objektově orientované programování v&nbsp;Lua<br />
<a href="https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua/">https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua/</a>
</li>

<li>Objektově orientované programování v&nbsp;Lua II<br />
<a href="https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua-ii/">https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua-ii/</a>
</li>

<li>Programovací jazyk Lua a koprogramy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-a-koprogramy/">https://www.root.cz/clanky/programovaci-jazyk-lua-a-koprogramy/</a>
</li>

<li>Knihovny a frameworky pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/knihovny-a-frameworky-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/knihovny-a-frameworky-pro-programovaci-jazyk-lua/</a>
</li>

<li>Lua + LÖVE: vytvořte si vlastní hru<br />
<a href="https://www.root.cz/clanky/lua-love-vytvorte-si-vlastni-hru/">https://www.root.cz/clanky/lua-love-vytvorte-si-vlastni-hru/</a>
</li>

<li>Hrátky se systémem LÖVE<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love/">https://www.root.cz/clanky/hratky-se-systemem-love/</a>
</li>

<li>Vytváříme hru v&nbsp;systému LÖVE<br />
<a href="https://www.root.cz/clanky/vytvarime-hru-v-systemu-love/">https://www.root.cz/clanky/vytvarime-hru-v-systemu-love/</a>
</li>

<li>Hrátky se systémem LÖVE - částicové systémy<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-casticove-systemy/">https://www.root.cz/clanky/hratky-se-systemem-love-casticove-systemy/</a>
</li>

<li>Hrátky se systémem LÖVE – kolize a odrazy těles<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-ndash-kolize-a-odrazy-teles/">https://www.root.cz/clanky/hratky-se-systemem-love-ndash-kolize-a-odrazy-teles/</a>
</li>

<li>Hrátky se systémem LÖVE - kolize a odrazy těles II<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-kolize-a-odrazy-teles-ii/">https://www.root.cz/clanky/hratky-se-systemem-love-kolize-a-odrazy-teles-ii/</a>
</li>

<li>Hrátky se systémem LÖVE - pružné vazby mezi tělesy<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-pruzne-vazby-mezi-telesy/">https://www.root.cz/clanky/hratky-se-systemem-love-pruzne-vazby-mezi-telesy/</a>
</li>

<li>Hrátky se systémem LÖVE - dokončení<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-dokonceni/">https://www.root.cz/clanky/hratky-se-systemem-love-dokonceni/</a>
</li>

<li>LuaJ – implementace jazyka Lua v&nbsp;Javě<br />
<a href="https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/">https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/</a>
</li>

<li>LuaJ a skriptování podle specifikace JSR-223<br />
<a href="https://www.root.cz/clanky/luaj-a-skriptovani-podle-specifikace-jsr-223/">https://www.root.cz/clanky/luaj-a-skriptovani-podle-specifikace-jsr-223/</a>
</li>

<li>Metalua: programovatelné rozšíření sémantiky jazyka Lua<br />
<a href="https://www.root.cz/clanky/metalua-programovatelne-rozsireni-semantiky-jazyka-lua/">https://www.root.cz/clanky/metalua-programovatelne-rozsireni-semantiky-jazyka-lua/</a>
</li>

<li>Metalua: užitečná rozšíření jazyka Lua<br />
<a href="https://www.root.cz/clanky/metalua-uzitecna-rozsireni-jazyka-lua/">https://www.root.cz/clanky/metalua-uzitecna-rozsireni-jazyka-lua/</a>
</li>

<li>Programovací jazyk Lua v&nbsp;roli skriptovacího jazyka pro WWW stránky<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/">https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/</a>
</li>

<li>Interpretry, překladače, JIT překladače a transpřekladače programovacího jazyka Lua<br />
<a href="https://www.root.cz/clanky/interpretry-prekladace-jit-prekladace-a-transprekladace-programovaciho-jazyka-lua/">https://www.root.cz/clanky/interpretry-prekladace-jit-prekladace-a-transprekladace-programovaciho-jazyka-lua/</a>
</li>

<li>Kooperace mezi jazykem Lua a nativním (céčkovým) kódem<br />
<a href="https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem/">https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem/</a>
</li>

<li>Kooperace mezi jazykem Lua a nativním (céčkovým) kódem: knihovna FFI<br />
<a href="https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem-knihovna-ffi/">https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem-knihovna-ffi/</a>
</li>

<li>Profilery pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/profilery-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/profilery-pro-programovaci-jazyk-lua/</a>
</li>

<li>Využití knihovny debug v&nbsp;programovacím jazyku Lua<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-debug-v-programovacim-jazyku-lua/">https://www.root.cz/clanky/vyuziti-knihovny-debug-v-programovacim-jazyku-lua/</a>
</li>

<li>Programovací jazyk Lua (e-book)<br />
<a href="https://www.knihydobrovsky.cz/e-kniha/programovaci-jazyk-lua-240253190">https://www.knihydobrovsky.cz/e-kniha/programovaci-jazyk-lua-240253190</a>
</li>

</ol>

<p>Původně byla Lua realizována jako klasický interpret &ndash; prováděl se
automatický a prakticky okamžitý překlad do bajtkódu, který byl následně
interpretován. Později byl vytvořen i plnohodnotný (a nutno podotknout, že až
neobvykle dobrý) just-in-time (JIT) překladač nazvaný LuaJIT. Touto zajímavou
technologií jsme se zabývali v&nbsp;následující sérii článků (které jsou
poněkud paradoxně součástí seriálu o <a
href="https://www.root.cz/serialy/programovaci-jazyk-java-a-jvm/">programovacím
jazyku Java a JVM</a>):</p>

<ol>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (2)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-2/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-2/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (3)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-3/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-3/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (4)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-4/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-4/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (5 – tabulky a pole)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-5-tabulky-a-pole/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-5-tabulky-a-pole/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (6 – překlad programových smyček do mezijazyka LuaJITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-6-preklad-programovych-smycek-do-mezijazyka-luajitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-6-preklad-programovych-smycek-do-mezijazyka-luajitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (7 – dokončení popisu mezijazyka LuaJITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-7-dokonceni-popisu-mezijazyka-luajitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-7-dokonceni-popisu-mezijazyka-luajitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (8 – základní vlastnosti trasovacího JITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-8-zakladni-vlastnosti-trasovaciho-jitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-8-zakladni-vlastnosti-trasovaciho-jitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (9 – další vlastnosti trasovacího JITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-9-dalsi-vlastnosti-trasovaciho-jitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-9-dalsi-vlastnosti-trasovaciho-jitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (10 – JIT překlad do nativního kódu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-10-jit-preklad-do-nativniho-kodu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-10-jit-preklad-do-nativniho-kodu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (11 – JIT překlad do nativního kódu procesorů s architekturami x86 a ARM)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-11-jit-preklad-do-nativniho-kodu-procesoru-s-architekturami-x86-a-arm/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-11-jit-preklad-do-nativniho-kodu-procesoru-s-architekturami-x86-a-arm/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (12 – překlad operací s reálnými čísly)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-12-preklad-operaci-s-realnymi-cisly/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-12-preklad-operaci-s-realnymi-cisly/</a>
</li>

</ol>

<p>A konečně nesmíme zapomenout na to, že kromě původní implementace
interpretru a LuaJITu existuje celá řada dalších implementací tohoto
programovacího jazyka. Některé z&nbsp;těchto implementací byly zmíněny
v&nbsp;následujících článcích:</p>

<ol>

<li>Skriptovací jazyk Lua v&nbsp;aplikacích naprogramovaných v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/">https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/</a>
</li>

<li>Programovací jazyk Lua v&nbsp;roli skriptovacího jazyka pro WWW stránky<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/">https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/</a>
</li>

<li>LuaJ – implementace jazyka Lua v&nbsp;Javě<br />
<a href="https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/">https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/</a>
</li>

<li>Tvorba pluginů pro Vim s&nbsp;využitím programovacího jazyka Lua<br />
<a href="https://www.root.cz/clanky/tvorba-pluginu-pro-vim-s-vyuzitim-programovaciho-jazyka-lua/">https://www.root.cz/clanky/tvorba-pluginu-pro-vim-s-vyuzitim-programovaciho-jazyka-lua/</a>
</li>

</ol>

<p><div class="rs-tip-major">Poznámka: předchozí články sice nepokrývají
ekosystém tohoto jazyka dokonale, ovšem přibližně 90% všech relevantních
informací je uvedeno. To je v&nbsp;případě dalších ekosystémů (Java, Python,
Ruby, ...) prakticky nemožné, resp.&nbsp;to není v&nbsp;silách jediného autora
:-)</div></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositář projektu Lua Fun<br />
<a href="https://github.com/luafun/luafun">https://github.com/luafun/luafun</a>
</li>

<li>Lua Functional 0.1.3 documentation<br />
<a href="https://luafun.github.io/reference.html">https://luafun.github.io/reference.html</a>
</li>

<li>Getting Started<br />
<a href="https://luafun.github.io/getting_started.html">https://luafun.github.io/getting_started.html</a>
</li>

<li>Rockspec knihovny Fun<br />
<a href="https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec">https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec</a>
</li>

<li>Awesome Lua &ndash; A curated list of quality Lua packages and resources.<br />
<a href="https://github.com/LewisJEllis/awesome-lua">https://github.com/LewisJEllis/awesome-lua</a>
</li>

<li>Repositář projektu Moses<br />
<a href="https://github.com/Yonaba/Moses/">https://github.com/Yonaba/Moses/</a>
</li>

<li>Lambda the Ultimate: Coroutines in Lua<br />
<a href="http://lambda-the-ultimate.org/no­de/438">http://lambda-the-ultimate.org/no­de/438</a>
</li>

<li>Coroutines Tutorial<br />
<a href="http://lua-users.org/wiki/Co­routinesTutori­al">http://lua-users.org/wiki/Co­routinesTutori­al</a>
</li>

<li>Lua Coroutines Versus Python Generators<br />
<a href="http://lua-users.org/wiki/Lu­aCoroutinesVer­susPythonGene­rators">http://lua-users.org/wiki/Lu­aCoroutinesVer­susPythonGene­rators</a>
</li>

<li>Programming in Lua 9.1 – Coroutine Basics<br />
<a href="http://www.lu­a.org/pil/9.1­.html">http://www.lu­a.org/pil/9.1­.html</a>
</li>

<li>Wikipedia CZ: Koprogram<br />
<a href="http://cs.wiki­pedia.org/wiki/Ko­program">http://cs.wiki­pedia.org/wiki/Ko­program</a>
</li>

<li>Wikipedia EN: Coroutine<br />
<a href="http://en.wiki­pedia.org/wiki/Co­routine">http://en.wiki­pedia.org/wiki/Co­routine</a>
</li>

<li>Repositář knihovny Moses<br />
<a href="https://github.com/Yonaba/Moses/">https://github.com/Yonaba/Moses/</a>
</li>

<li>Návod k&nbsp;použití knihovny Moses<br />
<a href="https://github.com/Yonaba/Moses/blob/master/doc/tutorial.md">https://github.com/Yonaba/Moses/blob/master/doc/tutorial.md</a>
</li>

<li>How to understand clojure's lazy-seq<br />
<a href="https://stackoverflow.com/questions/44095400/how-to-understand-clojures-lazy-seq">https://stackoverflow.com/questions/44095400/how-to-understand-clojures-lazy-seq</a>
</li>

<li>Lua Implementations<br />
<a href="http://lua-users.org/wiki/LuaImplementations">http://lua-users.org/wiki/LuaImplementations</a>
</li>

<li>Generator (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Generator_(computer_programming)">https://en.wikipedia.org/wiki/Generator_(computer_programming)</a>
</li>

<li>Lambda the Ultimate: Coroutines in Lua,<br />
<a href="http://lambda-the-ultimate.org/node/438">http://lambda-the-ultimate.org/node/438</a>
</li>

<li>Coroutines Tutorial,<br />
<a href="http://lua-users.org/wiki/CoroutinesTutorial">http://lua-users.org/wiki/CoroutinesTutorial</a>
</li>

<li>Lua Coroutines Versus Python Generators,<br />
<a href="http://lua-users.org/wiki/LuaCorouti­nesVersusPythonGenerators">http://lua-users.org/wiki/LuaCorouti­nesVersusPythonGenerators</a>
</li>

<li>Category:Lua na Rosetta code<br />
<a href="https://rosettacode.org/wiki/Category:Lua">https://rosettacode.org/wiki/Category:Lua</a>
</li>

<li>Programming in Lua: 23 – The Debug Library<br />
<a href="http://www.lua.org/pil/23.html">http://www.lua.org/pil/23.html</a>
</li>

<li>Programming in Lua: 23.1 – Introspective Facilities<br />
<a href="http://www.lua.org/pil/23.1.html">http://www.lua.org/pil/23.1.html</a>
</li>

<li>Programming in Lua: 23.2 – Hooks<br />
<a href="http://www.lua.org/pil/23.2.html">http://www.lua.org/pil/23.2.html</a>
</li>

<li>Lua 5.2 Reference Manual: 6.10 – The Debug Library<br />
<a href="http://www.lua.org/manual/5­.2/manual.html#6.10">http://www.lua.org/manual/5­.2/manual.html#6.10</a>
</li>

<li>Turtles all the way down<br />
<a href="https://en.wikipedia.org/wiki/Turtles_all_the_way_down">https://en.wikipedia.org/wiki/Turtles_all_the_way_down</a>
</li>

<li>Issues k&nbsp;projektu LuaFun<br />
<a href="https://github.com/luafun/luafun/issues">https://github.com/luafun/luafun/issues</a>
</li>

<li>Archived | Embed Lua for scriptable apps<br />
<a href="https://developer.ibm.com/tutorials/l-embed-lua/">https://developer.ibm.com/tutorials/l-embed-lua/</a>
</li>

<li>Embedding Lua<br />
<a href="https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml">https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

