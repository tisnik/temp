<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Objektově orientované programování v Lua II</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Objektově orientované programování v Lua II</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V deváté části seriálu o programovacím jazyce Lua si ukážeme, jakým způsobem je možné vytvořit objektový systém s využitím metatabulek, událostí a metametod navázaných na události. Pomocí metatabulek lze zajistit jak volání metod objektu, tak i přetížení operátorů, vytvoření getterů a setterů apod.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Objektově orientované programování v Lua II</a><br />
<a href="#k02">2. Metatabulky a metametody</a><br />
<a href="#k03">3. Volání metod objektu s&nbsp;využitím události __index</a><br />
<a href="#k04">4. První demonstrační příklad: objekt představující komplexní číslo</a><br />
<a href="#k05">5. Přetížení operátorů s&nbsp;využitím metametod</a><br />
<a href="#k06">6. Druhý demonstrační příklad: operátory +, -, * a / nad komplexními čísly</a><br />
<a href="#k07">7. Třetí demonstrační příklad: operátory nad komplexními čísly vracející komplexní číslo</a><br />
<a href="#k08">8. Čtvrtý demonstrační příklad: skrytí metatabulky do uzávěru</a><br />
<a href="#k09">9. Obsah další části seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Objektově orientované programování v Lua II</h1>

<p>V&nbsp;předchozí části seriálu o programovacím jazyce <i>Lua</i> jsme si
ukázali dva základní způsoby vytváření objektů. První způsob je založen na
uzávěrech (<i>closures</i>) při jejichž použití jsou atributy i metody objektu
&bdquo;zabaleny&ldquo; do uzávěru. Druhý způsob je založený na asociativních
polích, do kterých lze kromě atributů objektů uložit i funkce představující
metody daného objektu. Taktéž jsme si řekli, že při deklaraci i volání metod
lze parametr <strong>self</strong> (což je většinou asociativní pole
s&nbsp;atributy objektu) předávat buď explicitně nebo automaticky, což je
přístup použitý například i v&nbsp;&bdquo;klasických&ldquo; programovacích
jazycích typu <i>Java</i> či <i>C++</i> (parametr <strong>self</strong> je zde
přejmenovaný na <strong>this</strong>, jeho význam je však stejný).</p>

<p>Dnes si ukážeme, jakým způsobem lze s&nbsp;využitím takzvaných metatabulek a
metametod vytvořit objekty, jejichž metody jsou volané stylem
<i>objekt.název_metody()</i>. Taktéž si popíšeme způsob přetěžování operátorů,
který je v&nbsp;jazyku <i>Lua</i> velmi jednoduchý a přitom i poněkud
obecnější, než je tomu například v&nbsp;již výše zmíněném jazyku <i>C++</i>
(podstatný rozdíl spočívá v&nbsp;tom, že <i>Lua</i> je dynamický jazyk, takže
některé programové konstrukce lze vytvářet či měnit až za běhu programu,
zatímco <i>C++</i> se spoléhá na silnou typovou kontrolu v&nbsp;době překladu).
Nejprve si připomeňme způsob vytvoření objektu popsaný v&nbsp;předchozí části
tohoto seriálu. Vytvořený objekt se svými vlastnostmi podobá spíše struktuře
(záznamu) či třídě se statickými metodami (funkcemi), což odpovídá tomu, že
<i>Lua</i> nebyl primárně navržen jako objektově orientovaný programovací
jazyk:</p>

<code-area><i>-- Vytvoreni objektu komplexnich cisel a zpusob volani metod</i>

<i>-- Asociativni pole obsahujici metody</i>
Complex={}

<i>-- Konstruktor (ve skutecnosti jen vhodne</i>
<i>-- pojmenovana funkce) ulozena do asociativniho</i>
<i>-- pole Complex.</i>
<strong>function</strong> Complex.new(paramReal, paramImag)
    <strong>local</strong> self={}
    self.real = paramReal
    self.imag = paramImag
    <strong>return</strong> self
<strong>end</strong>

<i>-- Metoda print s implicitnim predanim parametru self</i>
<i>-- (opet se jedna o funkci ulozenou do asociativniho</i>
<i>-- pole Complex, zde je ovsem automaticky doplnovan</i>
<i>-- parametr self)</i>
<strong>function</strong> Complex:print()
    print(self.real.."+i"..self.imag)
<strong>end</strong>

<i>-- Metoda add s implicitnim predanim parametru self</i>
<strong>function</strong> Complex:add(paramReal, paramImag)
    self.real = self.real + paramReal
    self.imag = self.imag + paramImag
<strong>end</strong>

<i>-- vytvoreni dvojice objektu</i>
c = Complex.new(1, 2)
c2 = Complex.new(3, 4)

<i>-- tisk hodnot obou objektu</i>
Complex.print(c)
Complex.print(c2)

<i>-- zmena atributu prvniho objektu</i>
Complex.add(c, 10, 20)

<i>-- tisk hodnot obou objektu</i>
Complex.print(c)
Complex.print(c2)

<i>-- finito</i>
</code-area>



<p><a name="k02"></a></p>
<h1>2. Metatabulky a metametody</h1>

<p>Význačným a do jisté míry i unikátním znakem programovacího jazyka
<i>Lua</i> je možnost přiřadit prakticky každé hodnotě takzvanou
<i>metatabulku</i> (metatable). Přímo z&nbsp;<i>Lua</i> skriptu lze sice
přiřadit metatabulku pouze asociativním polím, nikoli ostatním typům hodnot,
ovšem z&nbsp;céčkového programu (který volá interpretr <i>Lua</i>) je možné
měnit i metatabulku ostatních hodnot pomocí API funkce
<strong>lua_setmetatable()</strong>. Metatabulka je běžné asociativní pole, se
kterým lze provádět stejné operace, jako s&nbsp;každým jiným asociativním polem
v&nbsp;<i>Lue</i>, ovšem význam některých položek uložených v&nbsp;tomto poli
má speciální význam při práci s&nbsp;danou hodnotou (povšimněte si, že
metatabulka je, stejně jako typ, přiřazena přímo hodnotě a nikoli proměnné, což
je význačný rys prakticky všech dynamicky typovaných jazyků). Metatabulku je
možné asociativnímu poli přiřadit funkcí <strong>setmetatable(objekt,
metatabulka)</strong>, opětovné získání metatabulky se provádí funkcí
<strong>getmetatable()</strong>. V&nbsp;případě, že se při volání
<strong>setmetatable()</strong> místo metatabulky předá konstanta
<strong>nil</strong>, je původní metatabulka odstraněna. Naopak funkce
<strong>getmetatable()</strong> může vrátit konstantu <strong>nil</strong>
v&nbsp;případě, že žádná metatabulka nebyla ještě objektu (asociativnímu poli)
přiřazena:</p>

<code-area><i>-- Zaklad prace s metatabulkami</i>

<i>-- Asociativni pole predstavujici zaklad objektu</i>
objekt = {}

<i>-- Asociativni pole, ktere bude pouzito jako metatabulka</i>
metatable = {}

<i>-- Ziskani metatabulky (vrati se nil, ktere se posleze vytiskne)</i>
print(getmetatable(objekt))

<i>-- Prirazeni metatabulky k objektu</i>
setmetatable(objekt, metatable)

<i>-- Ziskani metatabulky (vrati se prazdne pole, nikoli nil)</i>
table = getmetatable(objekt)

print(table)

<i>-- Tisk obsahu metatabulky</i>
<strong>for </strong>key, value <strong>in </strong>ipairs(table) <strong>do</strong>
    print(key, value)
<strong>end</strong>

<i>-- finito</i>
</code-area>



<p><a name="k03"></a></p>
<h1>3. Volání metod objektu s&nbsp;využitím události __index</h1>

<p>Do metatabulky jsou ukládány takzvané <i>metametody</i> navázané na události
(<i>event</i>). Událost je představována svým jménem, tj.&nbsp;řetězcem, který
slouží jako klíč v&nbsp;metatabulce (například "__add", "__eq" či "__index"),
metametoda je naopak libovolná uživatelem definovaná funkce přiřazená
k&nbsp;danému klíči. Pomocí metametod lze určit, jakým způsobem se bude
interpret jazyka <i>Lua</i> chovat v&nbsp;případech, kdy nad objektem, ke
kterému je metatabulka přiřazena, zavoláme nějaký operátor, například
<strong>+</strong>, <strong>*</strong>, <strong>&lt;</strong> či dokonce
<strong>.</strong> (přístup k&nbsp;prvku asociativního pole) nebo
<strong>[]</strong> (stejná operace, ovšem zapisovaná pomocí
&bdquo;indexových&ldquo; závorek). Právě poslední dva operátory jsou důležité
při konstrukci objektového systému, neboť se předefinováním jejich chování dá
zajistit, aby se nějaká metoda volala stylem <i>objekt.název_metody()</i> a
nikoli v&nbsp;první kapitole ukázaným voláním
<i>název_třídy.název_metody(instance_třídy)</i>. V&nbsp;následující tabulce
jsou vypsány operátory, jejichž chování je možné pomocí metametod změnit, i
názvy příslušných metametod (před všechny názvy je přidána dvojice podtržítek,
protože právě v&nbsp;této podobě jsou události pojmenovány při jejich ukládání
do metatabulky):</p>

<table>
<tr><th>Operátor</th><th>Metametoda</th></tr>
<tr><td>+</td><td>__add</td></tr>
<tr><td>-</td><td>__sub</td></tr>
<tr><td>*</td><td>__mul</td></tr>
<tr><td>/</td><td>__div</td></tr>
<tr><td>%</td><td>__mod</td></tr>
<tr><td>^</td><td>__pow</td></tr>
<tr><td>-</td><td>__unm (unární minus)</td></tr>
<tr><td>..</td><td>__concat (původně spojení řetězců)</td></tr>
<tr><td>#</td><td>__len</td></tr>
<tr><td>==</td><td>__eq</td></tr>
<tr><td>&lt;</td><td>__lt</td></tr>
<tr><td>&lt;=</td><td>__le</td></tr>
<tr><td>.</td><td>__index, __newindex</td></tr>
<tr><td>[]</td><td>__index, __newindex</td></tr>
<tr><td>volání funkce</td><td>__call</td></tr>
</table>

<p>Povšimněte si, že význam některých základních operátorů (viz první dva díly
tohoto seriálu) nelze nastavit. Týká se to například operátoru
<strong>&gt;</strong> nebo <strong>~=</strong>. Interpret <i>Lua</i> totiž
automaticky převádí výraz typu <i>a~=b</i> na <i>not(a==b)</i> a <i>a&lt;=b</i>
na <i>not(b&lt;a)</i>; navíc pak předpokládá komutativitu všech relačních
operátorů. Počet parametrů, se kterými je volána metametoda, odpovídá aritě
operátoru &ndash; většina operátorů je binárních, tj.&nbsp;metametoda je
zavolána se dvěma parametry, některé operátory jsou však pouze unární,
především unární minus a operátor zjištění délky či velikosti  objektu
(<strong>#</strong>). Mezi binární operátory jsou počítány i operátory
<strong>[]</strong> a <strong>.</strong>, protože se při jejich volání předává
jak asociativní pole, tak i klíč do tohoto pole. Metametoda přiřazená události
<i>__index</i> je zavolána při čtení z&nbsp;asociativního pole, metametoda
příslušející k&nbsp;události <i>__newindex</i> se volá v&nbsp;případě zápisu
nového prvku (tj.&nbsp;prvku, pro nějž prozatím neexistuje klíč) do
asociativního pole.</p>



<p><a name="k04"></a></p>
<h1>4. První demonstrační příklad: objekt představující komplexní číslo</h1>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán vylepšený způsob
konstrukce objektů představujících komplexní čísla. Nejprve je vytvořena
dvojice globálních asociativních polí <strong>Complex</strong> a
<strong>complex_meta</strong>. V&nbsp;prvním poli budou uloženy funkce
(tj.&nbsp;ve své podstatě metody objektu), druhé pole představuje metatabulku
s&nbsp;jediným záznamem (dvojicí událost:metametoda) <strong>__index =
Complex</strong>, pomocí něhož je zajištěn přístup k&nbsp;metodám pro všechny
objekty typu komplexní číslo. Dále jsou v&nbsp;příkladu vytvořeny dvě
funkce&ndash;metody uložené do asociativního pole <strong>Complex</strong>.
První funkce nese název <strong>new</strong> (jedná se o konstruktor), druhá
funkce se jmenuje <strong>print</strong>.</p>

<p>Při vytváření obou výše zmíněných funkcí byl použit syntaktický cukr ve
formě dvojtečky (namísto tečky), což znamená, že obě funkce mají jeden skrytý
parametr <strong>self</strong>, který je však využitý pouze ve funkci
<strong>print</strong>. Po vytvoření třech objektů typu komplexní číslo je
ukázáno, jakým způsobem lze zavolat funkci&ndash;metodu <strong>print</strong>.
K&nbsp;dispozici jsou tři možnosti &ndash; volání přes &bdquo;třídu&ldquo;
<strong>Complex</strong>, volání přes metatabulku s&nbsp;explicitním naplněním
parametru <strong>self</strong> (většinou se nepoužívá) a konečně volání přes
metatabulku s&nbsp;automatickým naplněním parametru <strong>self</strong>, což
je chování prakticky shodné například s&nbsp;<i>Javou</i> či <i>C++</i>:</p>

<code-area><i>-- Prvni demonstracni priklad:</i>
<i>-- komplexni cislo reprezentovane objektem</i>

Complex = {}

<i>-- Metatabulka pro objekty predstavujici komplexni cisla</i>
complex_meta = {
    <i>-- Pro "objektovy" zpusob volani metod</i>
    __index = Complex
}

<i>-- Konstruktor pro komplexni cisla</i>
<strong>function </strong>Complex:new(real, imag)
    <i>-- asociativni pole pro ulozeni atributu</i>
    <strong>local</strong> value = { real = real, imag = imag }
    return setmetatable(value, complex_meta)
<strong>end</strong>

<i>-- Metoda print</i>
<strong>function </strong>Complex:print()
    print(self.real, self.imag)
<strong>end</strong>

<i>-- Objekty predstavujici komplexni cisla</i>
z1 = Complex:new(1, 2)
z2 = Complex:new(3, 4)
z3 = Complex:new(5, 6)

<i>-- Ruzne zpusoby zavolani metody print()</i>

<i>-- primo pres "tridu" - nepouziva se metatabulka</i>
Complex.print(z1)

<i>-- pres metatabulku, explicitni naplneni parametru self</i>
z2.print(z2)

<i>-- pres metatabulku, vyuziti syntaktickeho cukru</i>
<i>-- pro automaticke naplneni parametru self</i>
z3:print()

<i>-- finito</i>
</code-area>



<p><a name="k05"></a></p>
<h1>5. Přetížení operátorů s&nbsp;využitím metametod</h1>

<p>Pomocí metatabulek a metametod je poměrně snadné <i>přetížit</i> některé
aritmetické nebo relační operátory a vytvořit tak plnohodnotné nové datové
typy. Přetížení (<i>overloading</i>) operátorů v&nbsp;programovacím jazyce
<i>Lua</i> se odlišuje od přetížení implementovaného například
v&nbsp;<i>C++</i> tím, že je kdykoli za běhu programu možné chování přetíženého
operátoru změnit &ndash; přetížený operátor je totiž implementován metametodou
uloženou v&nbsp;metatabulce, přičemž obsah metatabulek lze, stejně jako obsah
dalších tabulek (asociativních polí), libovolně měnit i za běhu programu
(<i>runtime</i>), zatímco v&nbsp;<i>C++</i> lze chování přetíženého operátoru
za běhu změnit pouze pomocí polymorfismu. Samotný způsob přetížení zvoleného
operátoru či operátorů je velmi jednoduchý a již jsme si ho vlastně ukázali
v&nbsp;předchozím demonstračním příkladu &ndash; do metatabulky přiřazené
k&nbsp;objektu postačuje přidat příslušnou událost a metametodu,
tj.&nbsp;funkci přiřazenou ke zvolené události &ndash; viz demonstrační příklad
uvedený v&nbsp;následující kapitole.</p>



<p><a name="k06"></a></p>
<h1>6. Druhý demonstrační příklad: operátory +, -, * a / nad komplexními čísly</h1>

<p>V&nbsp;dnešním druhém demonstračním příkladu je ukázáno, jakým způsobem je
možné přetížit aritmetické operátory součtu, rozdílu, součinu a podílu pro nový
datový typ představující komplexní čísla. Třída komplexních čísel je uložena
v&nbsp;asociativním poli <strong>Complex</strong>, včetně konstruktoru
<strong>Complex:new()</strong> a metody <strong>Complex:print()</strong>.
Tomuto asociativnímu poli je přiřazena metatabulka nazvaná
<strong>complex_meta</strong>, ve které jsou přetíženy operátory
<strong>.</strong>, <strong>[]</strong> (nutné pro volání metod stylem
<i>objekt.název_metody</i>), <strong>+</strong>, <strong>-</strong>,
<strong>*</strong> a <strong>/</strong>. Všechny čtyři přetížené aritmetické
operátory očekávají dva parametry, jež jsou typu komplexní číslo, tj.&nbsp;musí
se jednat o asociativní pole s&nbsp;dvojicí prvků majících klíče "real" a
"imag". Na výpisu zdrojového kódu demonstračního příkladu si povšimněte, že
jednotlivé metametody jsou při konstrukci metatabulky
<strong>complex_meta</strong> od sebe odděleny čárkou (je zapsána za klíčovým
slovem <strong>end</strong>):</p>

<code-area><i>-- Druhy demonstracni priklad:</i>
<i>-- pretizeni operatoru +, -, * a / pro komplexni cisla</i>

Complex = {}

<i>-- Metatabulka pro objekty predstavujici komplexni cisla</i>
complex_meta = {
    <i>-- Pro "objektovy" zpusob volani metod</i>
    __index = Complex,

    <i>-- Metametoda pro operator +</i>
    __add = <strong>function</strong>(x, y)
        <strong>return</strong> { real = x.real + y.real, imag = x.imag + y.imag }
    <strong>end</strong>,

    <i>-- Metametoda pro operator -</i>
    __sub = <strong>function</strong>(x, y)
        <strong>return</strong> { real = x.real - y.real, imag = x.imag - y.imag }
    <strong>end</strong>,

    <i>-- Metametoda pro operator *</i>
    __mul = <strong>function</strong>(x, y)
        <strong>return</strong> { real = x.real * y.real - x.imag * y.imag, imag = x.real * y.imag + x.imag * y.real }
    <strong>end</strong>,

    <i>-- Metametoda pro operator /</i>
    __div = <strong>function</strong>(x, y)
        <strong>local</strong> mag = math.sqrt(y.real ^ 2 + y.imag ^ 2)
        <strong>return</strong> { real = x.real / mag, imag = x.imag / mag }
    <strong>end</strong>
}

<i>-- Konstruktor pro komplexni cisla</i>
<strong>function</strong> Complex:new(real, imag)
    <strong>local</strong> value = { real = real, imag = imag }
    <strong>return</strong> setmetatable(value, complex_meta)
<strong>end</strong>

<i>-- Metoda print</i>
<strong>function</strong> Complex:print()
    print(self.real, self.imag)
<strong>end</strong>

<i>-- Objekty predstavujici komplexni cisla</i>
z1 = Complex:new(4, 3)
z2 = Complex:new(2, 0)

<i>-- Zkouska pretizeni aritmetickych operatoru</i>
x = z1 + z2
print(x.real, x.imag)

y = z1 - z2
print(y.real, y.imag)

z = z1 * z2
print(z.real, z.imag)

w = z1 / z2
print(w.real, w.imag)

<i>-- Vysledek operaci ma sice typ asociativni pole,</i>
<i>-- ale jiz nema prirazenou metatabulku, proto</i>
<i>-- pokus o vyvolani operatoru + vede k chybe</i>
a = x + y

<i>-- finito</i>

</code-area>



<p><a name="k07"></a></p>
<h1>7. Třetí demonstrační příklad: operátory nad komplexními čísly vracející komplexní číslo</h1>

<p>Demonstrační program ukázaný v&nbsp;předchozí kapitole měl jednu poměrně
zásadní vadu &ndash; přetížené operátory sice skutečně vypočítaly na základě
svých dvou operandů (=parametrů metametody) nové komplexní číslo reprezentované
asociativním polem s&nbsp;dvojicí záznamů s&nbsp;klíči "real" a "imag", ovšem
k&nbsp;výslednému objektu již nebyla navázána metatabulka a tudíž ani příslušné
přetížené operátory. Na dvojici komplexních čísel <i>z1</i> a <i>z2</i>
vytvořených pomocí konstruktoru <strong>Complex:new()</strong> tedy bylo možné
aplikovat přetížený operátor <strong>+</strong>, ovšem na výsledek této operace
již <strong>+</strong> nebylo možné zavolat, což v&nbsp;předchozím programu
vedlo k&nbsp;chybě při pokusu o spuštění příkazu <i>a = x + y</i>. Nicméně
tento nedostatek lze jednoduše odstranit &ndash; přetížené operátory mohou
místo jednoduchého asociativního pole vrátit asociativní pole
s&nbsp;metatabulkou přiřazenou pomocí funkce <strong>setmetatable()</strong>
tak, jak je ukázáno v&nbsp;následujícím výpisu kódu. Funkce
<strong>setmetatable()</strong> vrací asociativní pole s&nbsp;přiřazenou
metatabulkou, proto lze celé tělo funkce představující přetížený operátor
zkrátit na jediný řádek.</p>

<code-area><i>-- Treti demonstracni priklad:</i>
<i>-- pretizeni operatoru +, -, * a / pro komplexni cisla</i>
<i>-- vraceny vysledek je taktez "objektem" typu komplexni cislo</i>
Complex = {}

<i>-- Metatabulka pro objekty predstavujici komplexni cisla</i>
complex_meta = {
    <i>-- Pro "objektovy" zpusob volani metod</i>
    __index = Complex,

    <i>-- Metametoda pro operator +</i>
    __add = <strong>function</strong>(x, y)
        <strong>return</strong> setmetatable({real = x.real + y.real, imag = x.imag + y.imag }, complex_meta)
    <strong>end</strong>,

    <i>-- Metametoda pro operator -</i>
    __sub = <strong>function</strong>(x, y)
        <strong>return</strong> setmetatable({ real = x.real - y.real, imag = x.imag - y.imag }, complex_meta)
    <strong>end</strong>,

    <i>-- Metametoda pro operator *</i>
    __mul = <strong>function</strong>(x, y)
        <strong>local</strong> result = { real = x.real * y.real - x.imag * y.imag, imag = x.real * y.imag + x.imag * y.real }
        <strong>return</strong> setmetatable(result, complex_meta)
    <strong>end</strong>,

    <i>-- Metametoda pro operator /</i>
    __div = <strong>function</strong>(x, y)
        <strong>local</strong> mag = math.sqrt(y.real ^ 2 + y.imag ^ 2)
        <strong>return</strong> setmetatable({ real = x.real / mag, imag = x.imag / mag }, complex_meta)
    <strong>end</strong>
}

<i>-- Konstruktor pro komplexni cisla</i>
<strong>function</strong> Complex:new( real, imag )
    <strong>local</strong> value = { real = real, imag = imag }
    <strong>return</strong> setmetatable(value, complex_meta)
<strong>end</strong>

<i>-- Metoda print</i>
<strong>function</strong> Complex:print()
    print(self.real, self.imag)
<strong>end</strong>

<i>-- Objekty predstavujici komplexni cisla</i>
z1 = Complex:new(4, 3)
z2 = Complex:new(2, 0)

<i>-- Zkouska pretizeni aritmetickych operatoru</i>
x = z1 + z2
x:print()

y = z1 - z2
y:print()

z = z1 * z2
z:print()

w = z1 / z2
w:print()

<i>-- Vysledek operaci nad komplexnimi cisly</i>
<i>-- ma prirazenou metatabulku pro komplexni cisla</i>
Complex.print(x + y)
Complex.print(y - z)
Complex.print(z * w)
Complex.print(w / z)

<i>-- finito</i>
</code-area>



<p><a name="k08"></a></p>
<h1>8. Čtvrtý demonstrační příklad: skrytí metatabulky do uzávěru</h1>

<p>Ve čtvrtém příkladu je ukázáno, jakým způsobem je možné &bdquo;skrýt&ldquo;
metatabulku do uzávěru. Korektně naplněnou metatabulku totiž potřebujeme mít
k&nbsp;dispozici ve chvíli vytváření objektu, tj.&nbsp;uvnitř
funkce&ndash;konstruktoru <strong>Complex:new()</strong>. Je tedy možné
metatabulku vytvořit jako lokální proměnnou této funkce, nikoli proměnnou
globální (podobně i asociativní pole pro ukládání atributů je lokální
proměnná). Takto upravený program bude pracovat korektně, ovšem až do chvíle,
kdy se pokusíme použít nějaký přetížený operátor nad proměnnými (hodnotami),
které vznikly předešlou aplikací přetížených operátorů. Důvod je zřejmý &ndash;
při vytvoření nové hodnoty například v&nbsp;metametodě představující operátor
<strong>+</strong> se odkazujeme na neexistující metatabulku nazvanou
<i>metatable</i>. Chybové hlášení se například vypíše ve chvíli, kdy se zavolá
nějaká metoda pracující s&nbsp;objekty typu <strong>Complex</strong>, samotné
zavolání přetíženého operátoru chybu nezpůsobí (za neexistující proměnnou
<i>metatable</i> se totiž dosadí hodnota <i>nil</i>, což je v&nbsp;daném
kontextu korektní):</p>

<code-area>
lua: lua9_5a.lua:55: attempt to call method `print' (a nil value)
stack traceback:
        lua9_5a.lua:55: in function `test'
        lua9_5a.lua:75: in main chunk
        [C]: ?
</code-area>

<p>Takto pojmenovaná metatabulka sice skutečně existovala ve chvíli, kdy byly
vytvářeny &bdquo;primární&ldquo; objekty typu komplexní číslo pomocí
konstruktoru <strong>Complex:new()</strong> (šlo o lokální proměnnou této
metody), ale ve chvíli volání metametody <strong>__add(x, y)</strong> již takto
pojmenovaná metatabulka neexistuje, neboť se nacházíme mimo lexikální rozsah
funkce <strong>Complex:new()</strong> (samotná tabulka může být v&nbsp;operační
paměti přítomna, pokud existuje nějaký objekt s&nbsp;typem komplexní číslo,
ovšem není navázaná na své původní jméno). Řešení tohoto problému je jednoduché
&ndash; víme, že objekty, nad nimiž je daný přetížený operátor (například
<strong>+</strong>) volán, korektně naplněnou metatabulku obsahují, tudíž
můžeme použít volání <strong>getmetatable(x)</strong>,
popř.&nbsp;<strong>getmetatable(y)</strong> pro získání potřebné metatabulky.
Upravený program, který tuto techniku používá, je vypsán pod odstavcem.
Povšimněte si, že jedinou globální proměnnou použitou v&nbsp;tomto příkladu je
asociativní pole <strong>Complex</strong> představující třídu komplexních
čísel.</p>

<code-area><i>-- Ctvrty demonstracni priklad:</i>
<i>-- 1) pretizeni operatoru +, -, * a / pro komplexni cisla</i>
<i>--    vraceny vysledek je taktez "objektem" typu komplexni cislo</i>
<i>-- 2) skryti metatabulky do uzaveru</i>

Complex = {}

<i>-- Konstruktor pro komplexni cisla</i>
<strong>function</strong> Complex:new( real, imag )
    <strong>local</strong> value = { real = real, imag = imag }
    <strong>local</strong> metatable =  {
    <i>-- Pro "objektovy" zpusob volani metod</i>
    __index = Complex,

    <i>-- Metametoda pro operator +</i>
    __add = <strong>function</strong>(x, y)
        <strong>return</strong> setmetatable({real = x.real + y.real, imag = x.imag + y.imag }, getmetatable(x))
    <strong>end</strong>,

    <i>-- Metametoda pro operator -</i>
    __sub = <strong>function</strong>(x, y)
        <strong>return</strong> setmetatable({ real = x.real - y.real, imag = x.imag - y.imag }, getmetatable(x))
    <strong>end</strong>,

    <i>-- Metametoda pro operator *</i>
    __mul = <strong>function</strong>(x, y)
        <strong>local</strong> result = { real = x.real * y.real - x.imag * y.imag, imag = x.real * y.imag + x.imag * y.real }
        <strong>return</strong> setmetatable(result, getmetatable(x))
    <strong>end</strong>,

    <i>-- Metametoda pro operator /</i>
    __div = <strong>function</strong>(x, y)
        <strong>local</strong> mag = math.sqrt(y.real ^ 2 + y.imag ^ 2)
        <strong>return</strong> setmetatable({ real = x.real / mag, imag = x.imag / mag }, getmetatable(x))
    <strong>end</strong> }
    <strong>return</strong> setmetatable(value, metatable)
<strong>end</strong>

<i>-- Metoda print</i>
<strong>function</strong> Complex:print()
    print(self.real, self.imag)
<strong>end</strong>

<i>-- Otestujeme funkcnost tridy Complex</i>
<strong>function</strong> test()
    <i>-- Objekty predstavujici komplexni cisla</i>
    z1 = Complex:new(4, 3)
    z2 = Complex:new(2, 0)

    z1:print()
    z2:print()

    <i>-- Zkouska pretizeni aritmetickych operatoru</i>
    x = z1 + z2
    x:print()

    y = z1 - z2
    y:print()

    z = z1 * z2
    z:print()

    w = z1 / z2
    w:print()

    <i>-- Vysledek operaci nad komplexnimi cisly</i>
    <i>-- ma prirazenou metatabulku pro komplexni cisla</i>
    Complex.print(x + y)
    Complex.print(y - z)
    Complex.print(z * w)
    Complex.print(w / z)
<strong>end</strong>

<i>-- Spusteni testu</i>
test()

<i>-- finito</i>
</code-area>



<p><a name="k09"></a></p>
<h1>9. Obsah další části seriálu</h1>

<p>V&nbsp;následující části seriálu o programovacím jazyce <i>Lua</i> si
ukážeme způsob vytváření setterů a getterů známých například z&nbsp;jazyka
<i>C#</i> s&nbsp;využitím takzvaného proxy objektu, jehož princip je založen
&ndash; jako mnohé další jazykové konstrukce &ndash; na metametodách navázaných
na události <i>__index</i> a <i>__newindex</i>. Dále si vysvětlíme použití
takzvaných koprogramů (<i>coroutines</i>), pomocí nichž je možné vytvořit
programový kód, jehož části se mohou spouštět paralelně. Právě podpora
paralelně běžících částí kódu přímo v&nbsp;syntaxi jazyka může v&nbsp;blízké
budoucnosti znamenat malý převrat v&nbsp;použití programovacích jazyků, protože
jen jejich malá část z&nbsp;nich podporuje skutečné paralelní programování a
z&nbsp;vývoje posledních generací mikroprocesorů je patrné, že dalšího zvýšení
jejich výpočetního výkonu bude dosahováno právě využitím paralelizace, a to jak
na úrovni bloků v&nbsp;aritmeticko-logických jednotkách, tak i celých
procesorových jader (ALU+řadič+vyrovnávací paměť první úrovně).</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

