<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Hrátky se systémem LÖVE - částicové systémy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Hrátky se systémem LÖVE - částicové systémy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V patnácté části seriálu o programovacím jazyce Lua a systému LÖVE si řekneme, jakým způsobem je možné v aplikacích a hrách využívajících systém LÖVE použít částicové systémy (particle systems), například pro vytvoření animovaných efektů ohně, sněhu, mraků, tekoucí vody či různých výbuchů.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Hrátky se systémem LÖVE &ndash; částicové systémy</a><br />
<a href="#k02">2. Vizuální podoba částic</a><br />
<a href="#k03">3. Programové rozhraní systému LÖVE pro práci s&nbsp;částicovými systémy</a><br />
<a href="#k04">4. Změna parametrů částicového systému</a><br />
<a href="#k05">5. První demonstrační příklad &ndash; jednoduchý částicový systém</a><br />
<a href="#k06">6. Druhý demonstrační příklad &ndash; omezení úhlu vyletujících částic</a><br />
<a href="#k07">7. Třetí demonstrační příklad &ndash; částice vyletující ze zdroje pomalou rychlostí</a><br />
<a href="#k08">8. Odkazy na Internetu</a><br />
<a href="#k09">9. Literatura</a><br />
</p>



<p><a name="k01"></a></p>
<h2>1. Hrátky se systémem LÖVE &ndash; částicové systémy</h2>

<p><i>Částicové systémy</i> (také nazývané systémy částic, anglicky <i>particle
systems</i>) představují velice silnou modelovací a animační techniku určenou
pro vytváření takových objektů, které není možné jednoduše reprezentovat svým
povrchem nebo objemem. Jedná se například o&nbsp;objekty představující přírodní
fenomény jakými jsou sníh, déšť, oheň, mlha, dým nebo tekoucí voda. Velikou
předností částicových systémů oproti hraniční či objemové reprezentaci je,
podobně jako u fraktálních technik popsaných v&nbsp;samostatném seriálu,
možnost poměrně jednoduše vytvářet animace. Při použití klasických modelovacích
metod se při animování musí použít složitější techniky, například animační
křivky, morfing, přímá kinematika nebo inverzní kinematika, což klade zvýšené
požadavky jak na vlastní animační systém, tak na znalosti a schopnosti
uživatele obsluhujícího tento systém. U&nbsp;částicových systémů se při animaci
nemusí pracně zadávat jednotlivé polohy částic v&nbsp;čase, ale je možné
jednoduše zadat počáteční polohu a rychlost částic a poté nechat proběhnout
simulaci, ve které se automaticky, podle zadaných fyzikálních vlastností,
vypočítají nové polohy částic. Právě z&nbsp;tohoto důvodu jsou částicové
systémy oblíbené například mezi tvůrci her.</p>

<a href="http://i.iinfo.cz/images/378/lua1501.jpg"><img src="http://i.iinfo.cz/images/378/lua1501-prev.jpg" width="360" height="270" alt="lua1501" /></a>
<p><i>Obrázek 1: Výbuch vytvořený pomocí částicových systémů. Rendering byl
proveden v&nbsp;programu POV-Ray.</i></p>

<p>Celý částicový systém je modelován jako soubor určitých základních prvků
&ndash;<i>částic</i> (particle)&ndash; jejichž vlastnosti se průběžně mění
v&nbsp;čase. Mezi základní vlastnosti částice patří zejména:</p>

<ul>
<li>poloha částice v&nbsp;rovině či prostoru</li>
<li>vektor rychlosti částice</li>
<li>zrychlení částice</li>
<li>hmotnost částice</li>
</ul>

<p>K&nbsp;těmto základním vlastnostem většinou přidáváme i&nbsp;vizuální
vlastnosti, například:</p>

<ul>
<li>velikost částice</li>
<li>tvar a způsob vykreslení částice</li>
<li>barva částice</li>
<li>obrázek představující částici</li>
<li>průhlednost částice</li>
</ul>

<p>Z&nbsp;důvodu vytváření a provádění animací se zavádí také vlastnost doba
života částice. Při simulacích se po uplynutí doby života částice může částice
zrušit nebo se na místě zániku částice mohou generovat další částice (rozpad
částice). U&nbsp;složitějších částicových systémů lze reagovat i na vzájemné
střety částic nebo interakci částic se svým okolím, tj.&nbsp;s&nbsp;tělesy,
které se ve scéně nachází (tyto vlastnosti jsou v&nbsp;systému <i>LÖVE</i>
podporovány jen v&nbsp;omezeném rozsahu).</p>

<a href="http://i.iinfo.cz/images/503/lua1502.jpg"><img src="http://i.iinfo.cz/images/503/lua1502-prev.jpg" width="360" height="270" alt="lua1502" /></a>
<p><i>Obrázek 2: Částicové systémy lze použít i při simulaci tekoucí vody.
Rendering tohoto obrázku byl opět proveden v&nbsp;programu POV-Ray.</i></p>



<p><a name="k02"></a></p>
<h2>2. Vizuální podoba částic</h2>

<p>Jednotlivé částice mohou být v&nbsp;nejjednodušším případě znázorněny jako
pixely, je však možné je zobrazit i&nbsp;jako body o&nbsp;určité velikosti,
kapky, kuličky, šipky nebo jiný geometrický útvar. V&nbsp;některých systémech
je možné ke&nbsp;každé částici přiřadit lokální souřadný systém. Částice je
potom orientována v&nbsp;prostoru (v&nbsp;původním významu byly částice
v&nbsp;počítačové grafice chápány jako bezrozměrné body, které samozřejmě
neměly nadefinovánu žádnou prostorovou orientaci). Této orientace můžeme využít
při vykreslování, protože každé orientované částici můžeme přiřadit normálu,
pomocí které lze spočítat lokální světelné podmínky v&nbsp;místě prostoru, kde
se daná částice nachází. Při výpočtech světelných podmínek lze využít například
Phongův osvětlovací model. V&nbsp;systému <i>LÖVE</i> je situace jednodušší,
protože se nepracuje v&nbsp;prostoru, ale pouze rovině. Částice jsou
z&nbsp;tohoto důvodu reprezentovány rastrovým obrázek, jehož jednotlivé pixely
mohou mít přiřazenou průhlednost &ndash; z&nbsp;tohoto důvodu se velmi často
pro uložení rastrového obrázku s&nbsp;částicí používá formát PNG (<i>Portable
Network Graphics</i>).</p>

<a href="http://i.iinfo.cz/images/293/lua1503.jpg"><img src="http://i.iinfo.cz/images/293/lua1503-prev.jpg" width="360" height="270" alt="lua1503" /></a>
<p><i>Obrázek 3: Částicový systém vykreslený pomocí systému LÖVE. Vizuální
podoba částic je uložena v&nbsp;rastrovém obrázku.</i></p>



<p><a name="k03"></a></p>
<h2>3. Programové rozhraní systému LÖVE pro práci s&nbsp;částicovými systémy</h2>

<p>V&nbsp;systému <i>LÖVE</i> jsou částicové systémy představovány objektem
nazvaným <strong>ParticleSystem</strong>. Částicový systém lze vytvořit pomocí
funkce (konstruktoru) <strong>love.graphics.newParticleSystem(image,
buffer)</strong>, která má dva parametry &ndash; obrázek, pomocí něhož se
vykreslují jednotlivé částice a numerickou hodnotu, kterou je možné omezit
maximální celkový počet částic v&nbsp;částicovém systému (v&nbsp;závislosti na
konfiguraci se totiž může počet částic v&nbsp;různých časových okamžicích
lišit). Po vytvoření částicového systému a nastavení jeho parametrů (viz
následující kapitola) lze částicový systém vykreslit do libovolného místa
obrazovky (okna) pomocí přetížené funkce
<strong>love.graphics.draw(particlesystem, x, y)</strong>, které se předává jak
objekt představující částicový systém, tak i souřadnice na obrazovce, ve
kterých se má nacházet střed částicového systému. Systém <i>LÖVE</i> neobsahuje
žádné další funkce, které by pracovaly s&nbsp;objektem částicového systému,
veškeré nastavení jeho parametrů se provádí přímo voláním jeho metod, které
jsou popsány v&nbsp;navazující kapitole.</p>

<table>
<tr><th>Funkce</th><th>Význam</th></tr>
<tr><td>love.graphics.newParticleSystem(image, buffer)</td><td>vytvoření
částicového systému, v předávaných parametrech je uložený obrázek použitý pro
vykreslení částic, v parametru buffer je předán maximální povolený počet částic
v systému</td></tr>
<tr><td>love.graphics.draw(particleSystem, x y)</td><td>vykreslení částicového
systému na zadané místo na obrazovce</td></tr>
</table>

<p></p>

<a href="http://i.iinfo.cz/images/73/lua1504.jpg"><img src="http://i.iinfo.cz/images/73/lua1504-prev.jpg" width="360" height="270" alt="lua1504" /></a>
<p><i>Obrázek 4: Částicový systém vykreslený pomocí systému LÖVE. Na částice
sice nepůsobí gravitační síla, ale jejich radiální zrychlení je záporné,
tj.&nbsp;částice jsou přitahovány zpět ke středu částicového systému.</i></p>



<p><a name="k04"></a></p>
<h2>4. Změna parametrů částicového systému</h2>

<p>Po vytvoření částicového systému výše popsanou funkcí
<strong>love.graphics.newParticleSystem()</strong> je možné parametry
částicového systému takřka libovolně měnit, spouštět či naopak zastavovat
simulaci pohybu částic atd. Veškerá práce s&nbsp;částicovým systémem je
prováděna pomocí <i>metod</i>, tj.&nbsp;v&nbsp;žargonu programátorů
v&nbsp;jazyku <i>Lua</i> se jedná o funkce, jejichž prvním parametrem je
instance částicového systému. Z&nbsp;tohoto důvodu je možné namísto volání
<i>particleSystem.metoda(particleSystemInstance, parametr1, parametr2, ...)</i>
použít &bdquo;syntaktický cukr&ldquo; v&nbsp;podobě
<i>particleSystemInstance:metoda(parametr1, parametr2, ...)</i> &ndash;
povšimněte si použití dvojtečky oddělující jméno instance částicového systému
od názvu volané metody. V&nbsp;následující tabulce jsou vypsány některé vybrané
metody ovlivňující parametry částicového systému &ndash; jedná se o metody
použité v&nbsp;demonstračních příkladech. Další metody (a samozřejmě i
parametry, které jsou těmito metodami ovlivněny) budou popsány
v&nbsp;navazující části tohoto seriálu:</p>

<table>
<tr><th>Metoda</th><th>Význam</th></tr>
<tr><td>setBuffer()</td><td>Nastavení maximálního počtu částic v systému.
Příliš velký počet částic (řádově desítky až stovky tisíc) již může znamenat
citelné zatížení počítače.</td></tr>
<tr><td>setSprite()</td><td>Nastavení obrázku, který představuje
částice.</td></tr>
<tr><td>setEmmisionRate()</td><td>Počet částic, které mají být vytvořeny
(emitovány) za jednu sekundu. Skutečný počet emitovaných částic však může být
nižší, v&nbsp;závislosti na jejich životnosti a maximálním povoleném počtu
částic v&nbsp;systému.</td></tr>
<tr><td>setLifetime()</td><td>Životnost celého systému částic. Pokud je
překročena doba života částicového systému, přestane emitor vytvářet další
částice. Lze nastavit i hodnotu -1, která znamená neomezenou dobu života
částictového systému.</td></tr>
<tr><td>setDirection()</td><td>Nastavení průměrné hodnoty úhlu, pod kterým
částice vyletují ze svého zdroje (emitoru). Tento parametr má smysl nastavovat
pouze v&nbsp;případě, že je rozptyl menší než 360&deg;.</td></tr>
<tr><td>setSpread()</td><td>Nastavení rozptylu vyletujících částic. Standardně
je nastaven rozptyl 360&deg;, tj.&nbsp;částice jsou emitovány do všech
směrů.</td></tr>
<tr><td>setParticleLife()</td><td>Nastavení průměrné či minimální a maximální
doby života částic. Buď je zadán pouze jeden údaj, který je chápán jako
průměrná doba života částice v&nbsp;sekundách, nebo údaje dva &ndash; minimální
a maximální doba, opět specifikovaná v&nbsp;sekundách.</td></tr>
<tr><td>setPosition()</td><td>Specifikace souřadnic emitoru částic
v&nbsp;rovině.</td></tr>
<tr><td>setSpeed()</td><td>Zadání průměrné, popř.&nbsp;minimální a maximální
počáteční rychlosti částic.</td></tr>
<tr><td>setGravity()</td><td>Specifikace velikosti gravitace, tj.&nbsp;míry
tíhového zrychlení působícího ve směru y-ové osy. Buď je zadána jedna hodnota
představující konstantní míru gravitace nebo dvě hodnoty &ndash; minimální a
maximální hodnotu, která se náhodně v&nbsp;průběhu doby života částicového
systému mění.</td></tr>
<tr><td>setSize()</td><td>Nastavení relativní velikosti částice popř.&nbsp;její
počáteční a koncové velikosti. Částice může v&nbsp;průběhu svého života měnit
velikost &ndash; růst či se naopak zmenšovat. Hodnota 1 značí původní velikost
rastrového obrázku s&nbsp;předlohou částice, 2 dvojnásobnou velikost
atd.</td></tr>
<tr><td>setColor()</td><td>Nastavení barvy částice. Tato funkce pracuje
korektně pouze v&nbsp;případě, že je povolena modulace barev, viz programový
kód callback funkce <strong>draw() </strong>v&nbsp;demonstračních příkladech.
Tuto metodu je možné volat buď s&nbsp;jednou barvou (což znamená, že barva
částice je po dobu jejího života konstantní), nebo s&nbsp;dvojicí barev &ndash;
potom se barva částice průběžně mění z&nbsp;první barvy na barvu
druhou.</td></tr>
<tr><td>start()</td><td>Zapnutí emitoru částic. Po zavolání této metody vytváří
emitor nové částice až do chvíle, než je zavolána metoda stop(), pause() či až
do konce života částicového systému nastaveného metodou
setLifetime().</td></tr>
<tr><td>stop()</td><td>Vypnutí emitoru částic a vymazání interního časovače,
pomocí kterého se testuje, zda již není překročena doba života částicového
systému.</td></tr>
<tr><td>pause()</td><td>Pozastavení emitoru částic.</td></tr>
<tr><td>reset()</td><td>Zastavení emitoru částic, vymazání interního časovače a
odstranění všech částic ze systému.</td></tr>
<tr><td>update()</td><td>Po zavolání této metody se provede změna stavu
částicového systému na základě jeho parametrů, tj.&nbsp;dojde k&nbsp;vytvoření
(emitaci) nových částic, ke zrušení částic, které překročily dobu svého života
i ke změně dalších parametrů částic (polohy, rychlosti, barvy, tvaru, natočení
atd.). Tuto metodu je zapotřebí volat průběžně, ideálně z&nbsp;callback funkce
<strong>draw()</strong> či <strong>update()</strong>.</td></tr>
</table>

<p></p>

<a href="http://i.iinfo.cz/images/527/lua1505.jpg"><img src="http://i.iinfo.cz/images/527/lua1505-prev.jpg" width="360" height="270" alt="lua1505" /></a>
<p><i>Obrázek 5: Částicový systém vytvořený pomocí druhého demonstračního
příkladu. Vektor počáteční rychlosti částic v&nbsp;tomto případě leží mezi
0&deg; a 90&deg; se střední hodnotou 45&deg;.</i></p>



<p><a name="k05"></a></p>
<h2>5. První demonstrační příklad &ndash; jednoduchý částicový systém</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán způsob vytvoření
velmi jednoduchého částicového systému, v&nbsp;němž částice vznikají
v&nbsp;jednom bodě, ze kterého se rozletují libovolným směrem (úhel vyletování
částic není omezený, obsahuje celý kruh o 360&deg;). Na částice působí
gravitační síla, jejíž vektor je orientován kolmo dolů, ovšem průměrná
počáteční rychlost částic je poměrně velká, takže vliv gravitační síly na
trajektorii části je nepatrný (na rozdíl od příkladu třetího). Vizuální podoba
částice je uložena v&nbsp;následujícím obrázku:
<img src="http://i.iinfo.cz/images/207/lua1506.png" width="32" height="32" alt="lua1506" />. Tento obrázek o
rozměrech 32&times;32 pixelů je sice zdánlivě celý bílý, ovšem mění se
průhlednost jednotlivých pixelů &ndash; barva každého pixelu je uložena na 32
bitech, přičemž kromě tří barvových složek R (red), G (green), B (blue) je
čtvrtý bajt rezervován právě pro uložení průhlednosti, tj.&nbsp;hodnoty
&alpha;. Průhlednost pixelů lze zobrazit velmi snadno například
v&nbsp;grafickém editoru <i>GIMP</i> &ndash; postačuje vypnutí barvových kanálů
R, G, B a ponechání pouze &alpha;&ndash;kanálu. Povšimněte si, že metoda
<strong>particleSystem:update(dt)</strong> je volána v&nbsp;callback funkci
<i>update()</i>, která je volána v&nbsp;relativně pravidelných intervalech.
Simulace se spustí klávesou <strong>S</strong>, kdykoli v&nbsp;průběhu simulace
je možné provést restart klávesou <strong>R</strong> popř.&nbsp;program
ukončit pomocí klávesy <strong>Esc</strong>.</p>

<a href="http://i.iinfo.cz/images/149/lua1507.jpg"><img src="http://i.iinfo.cz/images/149/lua1507-prev.jpg" width="370" height="264" alt="lua1507" /></a>
<p><i>Obrázek 7: První demonstrační příklad</i></p>



<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- První demonstrační příklad:
-- Jednoduchý částicový systém
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- asociativní pole představující objekt částicového systému
particleSystem = nil

-- maximální počet částic
particleCount = 1000

-- callback funkce zavolaná při inicializaci aplikace
function load()
    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)
    -- načtení obrázku představujícího jednu částici
    local particleImage = love.graphics.newImage("part1.png")

    -- vytvoření částicového systému s jeho inicializací
    particleSystem = love.graphics.newParticleSystem(particleImage, particleCount)
    particleSystem:setEmissionRate(100)
    particleSystem:setSpeed(100, 400)
    particleSystem:setGravity(200,500)
    particleSystem:setSize(2, 1)
    particleSystem:setColor(love.graphics.newColor(255, 100, 255, 255), love.graphics.newColor(0, 0, 255, 0))
    particleSystem:setPosition(window.width/2, window.height/2)
    particleSystem:setLifetime(1)
    particleSystem:setParticleLife(3)
    particleSystem:setDirection(0)
    particleSystem:setSpread(360)
    particleSystem:stop()
end

-- pravidelně volaná callback funkce
function update(dt)
    if love.keyboard.isDown(love.key_r) then
        love.system.restart()
    end

    -- přepočítat parametry částicového systému
    particleSystem:update(dt)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
    love.graphics.setColorMode(love.color_modulate)
    love.graphics.setBlendMode(love.blend_additive)

    love.graphics.draw(particleSystem, 0, 0)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    if key == love.key_s then
        particleSystem:start()
    end
    if key == love.key_escape then
        love.system.exit()
    end
end

-- finito
</pre>

<a href="http://i.iinfo.cz/images/446/lua1508.jpg"><img src="http://i.iinfo.cz/images/446/lua1508-prev.jpg" width="360" height="270" alt="lua1508" /></a>
<p><i>Obrázek 8: První demonstrační příklad &ndash; začátek simulace.</i></p>



<p><a name="k06"></a></p>
<h2>6. Druhý demonstrační příklad &ndash; omezení úhlu vyletujících částic</h2>

<p>Ve druhém demonstračním příkladu je ukázáno, jakým způsobem je možné omezit
úhel (tj.&nbsp;směr vektoru rychlosti) částic vyletujících ze zdroje částic
(emitoru). Při standardním nastavení vylétávají částice ze zdroje libovolným
směrem, přičemž žádný směr není preferován. Pomocí metod
<strong>particleSystem.setDirection()</strong> a
<strong>particleSystem.setSpread()</strong> je možné změnit jak průměrnou
hodnotu tohoto úhlu, tak i povolenou odchylku od této hodnoty, tj.&nbsp;úhel
&bdquo;vějíře&ldquo;, ze kterého částice ze svého zdroje vyletují.</p>

<a href="http://i.iinfo.cz/images/408/lua1509.jpg"><img src="http://i.iinfo.cz/images/408/lua1509-prev.jpg" width="360" height="270" alt="lua1509" /></a>
<p></p>
<a href="http://i.iinfo.cz/images/114/lua1510.jpg"><img src="http://i.iinfo.cz/images/114/lua1510-prev.jpg" width="365" height="270" alt="lua1510" /></a>
<p><i>Obrázek 9 a 10: Druhý demonstrační příklad &ndash; začátek simulace.</i></p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- Druhý demonstrační příklad:
-- Částice vyletující pouze pod omezeným úhlem
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- asociativní pole představující objekt částicového systému
particleSystem = nil

-- maximální počet částic
particleCount = 4000

-- callback funkce zavolaná při inicializaci aplikace
function load()
    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)
    -- načtení obrázku představujícího jednu částici
    local particleImage = love.graphics.newImage("part1.png")

    -- vytvoření částicového systému s jeho inicializací
    particleSystem = love.graphics.newParticleSystem(particleImage, particleCount)
    particleSystem:setEmissionRate(1000)
    particleSystem:setSpeed(300, 400)
    particleSystem:setGravity(200, 500)
    particleSystem:setSize(1, 1)
    particleSystem:setColor(love.graphics.newColor(50, 50, 255, 255), love.graphics.newColor(0, 255, 255, 0))
    particleSystem:setPosition(100, window.height/2)
    particleSystem:setLifetime(20)
    particleSystem:setParticleLife(7)
    particleSystem:setDirection(270+45)
    particleSystem:setSpread(30)
    particleSystem:stop()
end

-- pravidelně volaná callback funkce
function update(dt)
    if love.keyboard.isDown(love.key_r) then
        love.system.restart()
    end

    -- přepočítat parametry částicového systému
    particleSystem:update(dt)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
    love.graphics.setColorMode(love.color_modulate)
    love.graphics.setBlendMode(love.blend_additive)

    love.graphics.draw(particleSystem, 0, 0)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    if key == love.key_s then
        particleSystem:start()
    end
    if key == love.key_escape then
        love.system.exit()
    end
end

-- finito
</pre>

<a href="http://i.iinfo.cz/images/408/lua1511.jpg"><img src="http://i.iinfo.cz/images/408/lua1511-prev.jpg" width="365" height="270" alt="lua1511" /></a>
<p><i>Obrázek 11: Druhý demonstrační příklad &ndash; průběh simulace.</i></p>

<a href="http://i.iinfo.cz/images/107/lua1512.jpg"><img src="http://i.iinfo.cz/images/107/lua1512-prev.jpg" width="365" height="270" alt="lua1512" /></a>
<p><i>Obrázek 12: Druhý demonstrační příklad &ndash; konec simulace.</i></p>



<p><a name="k07"></a></p>
<h2>7. Třetí demonstrační příklad &ndash; částice vyletující ze zdroje pomalou rychlostí</h2>

<p>Ve třetím demonstračním příkladu je použit částicový systém, jehož částice
mají velmi malou počáteční rychlost. V&nbsp;tomto případě je hlavní silou,
která určuje trajektorii částic, gravitace. Výsledkem je zajímavý efekt
&bdquo;kapající&ldquo; ohnivé koule.</p>

<a href="http://i.iinfo.cz/images/365/lua1513.jpg"><img src="http://i.iinfo.cz/images/365/lua1513-prev.jpg" width="360" height="270" alt="lua1513" /></a>
<p><i>Obrázek 13: Třetí demonstrační příklad &ndash; začátek simulace.</i></p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- Třetí demonstrační příklad:
-- Částice s nízkou počáteční rychlostí
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- asociativní pole představující objekt částicového systému
particleSystem = nil

-- maximální počet částic
particleCount = 1000

-- callback funkce zavolaná při inicializaci aplikace
function load()
    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)
    -- načtení obrázku představujícího jednu částici
    local particleImage = love.graphics.newImage("part1.png")

    -- vytvoření částicového systému s jeho inicializací
    particleSystem = love.graphics.newParticleSystem(particleImage, particleCount)
    particleSystem:setEmissionRate(100)
    particleSystem:setSpeed(30, 60)
    particleSystem:setGravity(200, 500)
    particleSystem:setSize(2, 1)
    particleSystem:setColor(love.graphics.newColor(255, 255, 10, 255), love.graphics.newColor(255, 10, 10, 0))
    particleSystem:setPosition(window.width/2, 50)
    particleSystem:setLifetime(20)
    particleSystem:setParticleLife(5)
    particleSystem:setDirection(0)
    particleSystem:setSpread(360)
    particleSystem:stop()
end

-- pravidelně volaná callback funkce
function update(dt)
    if love.keyboard.isDown(love.key_r) then
        love.system.restart()
    end

    -- přepočítat parametry částicového systému
    particleSystem:update(dt)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
    love.graphics.setColorMode(love.color_modulate)
    love.graphics.setBlendMode(love.blend_additive)

    love.graphics.draw(particleSystem, 0, 0)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    if key == love.key_s then
        particleSystem:start()
    end
    if key == love.key_escape then
        love.system.exit()
    end
end

-- finito
</pre>

<a href="http://i.iinfo.cz/images/494/lua1514.jpg"><img src="http://i.iinfo.cz/images/494/lua1514-prev.jpg" width="360" height="270" alt="lua1514" /></a>
<p><i>Obrázek 14: Třetí demonstrační příklad &ndash; průběh simulace.</i></p>

<a href="http://i.iinfo.cz/images/604/lua1515.jpg"><img src="http://i.iinfo.cz/images/604/lua1515-prev.jpg" width="360" height="270" alt="lua1515" /></a>
<p><i>Obrázek 15: Třetí demonstrační příklad &ndash; konec simulace.</i></p>



<p><a name="k08"></a></p>
<h2>8. Odkazy na Internetu</h2>

<ol>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Tutoriály k&nbsp;systému LÖVE<br />
<a href="http://love2d.org/?page=documentation">http://love2d.org/?page=documentation</a>
</li>

<li>Screenshoty aplikací vytvořených v&nbsp;LÖVE<br />
<a href="http://love2d.org/screenshots">http://love2d.org/screenshots</a></li>

<li>Domovská stránka programovacího jazyka Lua<br />
<a href="http://www.lua.org/ ">http://www.lua.org/ </a>
</li>

<li>Lua<br />
<a href="http://www.linuxexpres.cz/praxe/lua">http://www.linuxexpres.cz/praxe/lua</a>
</li>

<li>Lua<br />
<a href="http://cs.wikipedia.org/wiki/Lua">http://cs.wikipedia.org/wiki/Lua</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>The Lua Programming Language<br />
<a href="http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html">http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html</a>
</li>

<li>Lua Programming Gems<br />
<a href="http://www.lua.org/gems/">http://www.lua.org/gems/</a>
</li>

<li>LuaForge<br />
<a href="http://luaforge.net/">http://luaforge.net/</a>
</li>

<li>Forge project tree<br />
<a href="http://luaforge.net/softwaremap/trove_list.php">http://luaforge.net/softwaremap/trove_list.php</a>
</li>

<li>gamedev.net: Lua<br />
<a href="http://www.gamedev.net/reference/programming/features/lua/">http://www.gamedev.net/reference/programming/features/lua/</a>
</li>

<li>Category:Lua-scripted games<br />
<a href="http://en.wikipedia.org/wiki/Category:Lua-scripted_games">http://en.wikipedia.org/wiki/Category:Lua-scripted_games</a>
</li>

<li>Category:Lua-scriptable games<br />
<a href="http://en.wikipedia.org/wiki/Category:Lua-scriptable_games">http://en.wikipedia.org/wiki/Category:Lua-scriptable_games</a>
</li>

<li>Box2D Physics Engine<br />
<a href="http://www.box2d.org/">http://www.box2d.org/</a></li>

</ol>

<a href="http://i.iinfo.cz/images/166/lua1516.jpg"><img src="http://i.iinfo.cz/images/166/lua1516-prev.jpg" width="360" height="270" alt="lua1516" /></a>



<p><a name="k09"></a></p>
<h2>9. Literatura</h2>

<ol>

<li>Arvo James (editor):<br />
<i>Graphics Gems II</i>,<br />
Academic Press, 1991, ISBN 0-120-54481-9
</li>

<li>Baraff David and Witkin Andrew: <br />
<i>Physically Based Modeling</i>,<br />
SIGGRAPH Course Notes, July 1998, pages B1&ndash;C12
</li>

<li>Beer and Johnson: <br />
<i>Vector Mechanics for Engineers: Dynamics</i>,<br />
Sixth Edition, WCB/McGraw-Hill, New York, 1997, ISBN 0-07121-828-9
</li>

<li>Beneš B., Felkel P., Sochor J. and Žára J.:<br />
<i>Vizualizace</i><br />
Skripta ČVUT, Praha, 1997
</li>

<li>Benson Richard: <br />
<i>Particle Systems</i>,<br />
PowerPoint Presentation, 2002
</li>

<li>Blinn J. F.:<br />
<i>Light Reflection Functions for Simulation of Clouds and Dusty surfaces</i>,<br />
Computer Graphics 16(3), 1982, pages 21&ndash;29
</li>

<li>Blinn J. F.:<br />
<i>Jim Blin's Corner: Dirty Pixels</i>,<br />
Morgan Kaufmann, 1996, ISBN&nbsp;1-558-60455-3
</li>

<li>Foley J., Dam van A., Feiner S., Hughes J.:<br />
<i>Computer Graphics &ndash; Principles and Practice (Second Edition)</i>,<br />
Addison-Wesley, Reading, Massachusetts, 1990, ISBN 0-201-12110-7
</li>

<li>Fuller J. et.al.:<br />
<i>OpenGL Programming Guide</i>,<br />
Silicon Graphics Inc., USA, 1997
</li>

<li>Galagher R. S. (editor): <br />
<i>Computer Visualization (Graphics Techniques for Scientific and Engineering Analysis)</i>,<br />
A Solomon Press Book, CRC Press, 1995, ISBN 0-8493-9050-8
</li>

<li>Glassner, Andrew S. (editor):<br />
<i>Graphics Gems I</i>,<br />
Academic Press, 1990, ISBN 0-122-86166-3
</li>

<li>Gross M.:<br />
<i>Point Based Computer Graphics</i>,<br />
In: Spring Conference on Computer Graphics Preceedings 2002, Budmerice, STUBA, ISBN 80-223-1730-6
</li>

<li>Hausen Ch.: <br />
<i>Visualization of Vector Fields (2D and 3D)</i>,<br />
tutorial, National Laboratory, Los Alamos, 1993
</li>

<li>Heckbert Paul (editor):<br />
<i>Graphics Gems IV</i>,<br />
Academic Press, 1994, ISBN 0-123-36155-9
</li>

<li>Hill F. S. jr:<br />
<i>Computer Graphics using OpenGL</i>,<br />
Prentice Hall, 2001
</li>

<li>Hocknew R. W. and Eastwood J. W.: <br />
<i>Computer Simulation using Particles</i>,<br />
Adam Hilger, New York, 1988
</li>

<li>Intarrante V. and Grosch Ch.: <br />
<i>Visualizing 3D Flow</i>,<br />
IEEE Computer graphics and Applications, July 1998, pages 49&ndash;53
</li>

<li>Kirk David (editor):<br />
<i>Graphics Gems III</i>,<br />
Academic Press, 1992, ISBN 0-124-09673-5
</li>

<li>Landers, J.:<br />
<i>The Ocean Spray in Your Face</i>,<br />
Game Developer, Volume 5, Number 7, July 1998, pages 13&ndash;15.
</li>

<li>Levoy, M. and Whitted, T:<br />
<i>The Use of Points as a Display Primitive</i>,<br />
Technical Report TR 85&ndash;022, University of North Carolina at Chapel Hill, 1985
</li>

<li>Loke T., Tan D., Seah H. and Er M.:<br />
<i>Rendering Fireworks Displays</i>,<br />
IEEE Computer Graphics &amp; Applications, May 1992, Volume 12, Number 3, pages 33&ndash;43
</li>

<li>Magnetat-Thalmann B., Thalmann D. and Arnaldi B.: <br />
<i>Computer Animation and Simulation 2000</i>,<br />
Springer Verlag, Wien, ISBN 3-2118-3549-0
</li>

<li>Max N., Crawfis R. and Williams D.: <br />
<i>Visualization for climate Modeling</i>,<br />
IEEE Computer graphics and Applications, July 1993, pages 34&ndash;40
</li>

<li>Paeth Alan (editor):<br />
<i>Graphics Gems V</i>,<br />
Academic Press, 1995, ISBN: 0-125-43455-3
</li>

<li>Reeves William T.:<br />
<i>Particle Systems &ndash; A Technique for Modeling a Class of Fuzzy objects</i>,<br />
Computer Graphics vol.17, Number 3, July 1983, pages 359&ndash;376
</li>

<li>Reeves William T. and Blau R.: <br />
<i>Approximate and Probabilistic Algorithms for Shading and Rendering Structured Particle System</i>,<br />
Proceedings of SIGGRAPH 1985, Volume 19(3), 1985, pages 313&ndash;322
</li>

<li>Rhudy R.:<br />
<i>Rendering Particle Systems Fast and Accurately</i>,<br />
(listopad 2002)
</li>

<li>Rusinkiewicz Szymon, Levoy M.:<br />
<i>QSplat: A Multiresolution Point Rendering System for Large Meshes</i>,<br />
SIGGRAPH 2000, 2000
</li>

<li>Rusinkiewicz Szymon:<br />
<i>Surface splatting</i>,<br />
SIGGRAPH 2001, 2001
</li>

<li>Sims K.: <br />
<i>Particle Animation and Rendering Using Data Parallel Computation</i>,<br />
Computer Graphics (SIGGRAPH '90), Volume 24, Number 4, August 1990, pages 405&ndash;413
</li>

<li>Stalling D. et al.: <br />
<i>Fast Display of Illuminated Field Lines</i>,<br />
IEEE Transactions of Visualization and Computer Graphics, Volume 3, April 1997, pages 118&ndash;127
</li>

<li>Tišnovský Pavel, Herout Adam: <br />
<i>Adaptive Algorithm for Vector Field Interpolation Based on Octree Structure</i>,<br />
In: Spring Conference on Computer Graphics Preceedings 2002, Budmerice, STUBA, ISBN&nbsp;80-223-1730-6, pages 145&ndash;150
</li>

<li>Tišnovský Pavel, Herout Adam:<br />
<i>Vizualizace vektorových polí s využitím metody sledování částic</i>,<br />
In:&nbsp;Elektrorevue, číslo 20, ročník 2002, Brno, CZ, ISSN 1213-1539,
</li>

<li>Tišnovský Pavel, Herout Adam: <br />
<i>Vector Field Calculations on a Special Hardware Architecture</i>,<br />
In:&nbsp;East-West-Vision 2002 (EWV'02) International Workshop on Computer Vision, Computer Graphics, New Media, 2002, ISBN 3-85403-163 
</li>

<li>Tišnovský Pavel, Herout Adam, Zemčík Pavel: <br />
<i>Particle Rendering Pipeline</i>,<br />
Spring Conference on Computer Graphics 2003 Proceedings, 2003 ISBN 80-223-1837-X 
</li>

<li>Tišnovský Pavel, Herout Adam, Řezáč David:<br />
<i>Vizualizace prostorových potenciálních polí vypočítaných metodou TKSL/C</i>,<br />
In: Proceedings of the International Conference and Competition STUDENT EEICT 2003, Brno, CZ, 2003, pages 310&ndash;314
</li>

<li>Tišnovský Pavel, Herout Adam, Řezáč David:<br />
<i>Visualization of 3D Potential Fields Computed Using TKSL/C</i>,<br />
In: Proceedings of the 9th Conference and Competition STUDENT EEICT 2003, Brno, CZ, 2003, ISBN 80-214-2379-X, pages 583&ndash;587
</li>

<li>Tišnovský Pavel, Herout Adam, Zemčík Pavel:<br />
<i>Cache&ndash;Based Parallel Particle Rendering Engine</i>,<br />
In: ElectronicsLetters.com, ročník 2003, číslo 1, Brno, CZ, ISSN 1213-161X
</li>

<li>Tonnesen David Love: <br />
<i>Dynamically Coupled Particle Systems for Geometric Modeling, Reconstruction, and Animation</i>,<br />
Graduate Department of Computer Science, University of Toronto, 1998
</li>

<li>Watt A., Watt M.:<br />
<i>Advanced Animation and Rendering Techniques, Theory and Practice</i>,<br />
Addison-Wesley, New York, 1992
</li>

<li>Wijk van J.J:<br />
<i>Flow Visualization with Surface Particles</i>,<br />
IEEE Computer Graphics &amp; Applications, July 1993, pages 19&ndash;24
</li>

<li>Wijk van J.J, Hin A. J. S., de Leeuw W. C., Post F. H.:<br />
<i>Three Ways to Show 3D Fluid Flow</i>,<br />
IEEE Computer Graphics \&amp; Applications, September 1994, pages 33&ndash;39
</li>

<li>Witkin, J.:<br />
<i>An Introduction to Physically Based Modeling: Particle System Dynamics</i>,<br />
School of Computer Science, Robotics Institute, Carnegie Mellon University, 1997
</li>

<li>Witkin Andrew, Fleischer Kurt and Bass Alan: <br />
<i>Energy constrains on parametrized models</i>,<br />
Computer Graphics 21, 1987, pages 225&ndash;232
</li>

<li>Žára J., Beneš B., Felkel P.:<br />
<i>Moderní počítačová grafika</i>,<br />
Computer Press, Praha, 1998, ISBN&nbsp;80-7226-049-9
</li>

<li>Žára J., Limpouch A., Beneš B., Werner T.:<br />
<i>Počítačová grafika &ndash; principy a algoritmy</i>,<br />
Grada, Praha, 1992, ISBN&nbsp;80-85623-00-5
</li>

</ol>

<a href="http://i.iinfo.cz/images/332/lua1517.jpg"><img src="http://i.iinfo.cz/images/332/lua1517-prev.jpg" width="360" height="270" alt="lua1517" /></a>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

