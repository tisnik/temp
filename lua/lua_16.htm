<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Hrátky se systémem LÖVE - kolize a odrazy těles</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Hrátky se systémem LÖVE &ndash; kolize a odrazy těles</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Další knihovnou nabízenou "herním" systémem LÖVE, kterou si v seriálu o programovacím jazyku Lua popíšeme, je knihovna nazvaná love.physics, pomocí které je možné provádět simulace vzájemných kolizí i odrazů dvojrozměrných těles s respektováním jejich tvaru, hybnosti i hmotnosti.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Hrátky se systémem LÖVE &ndash; kolize a odrazy těles</a><br />
<a href="#k02">2. Základní objekty využívané v&nbsp;modulu <strong>love.physics</strong></a><br />
<a href="#k03">3. Vytvoření herního světa a hmotných těles</a><br />
<a href="#k04">4. První demonstrační příklad &ndash; pohybující se těleso a statická podlaha</a><br />
<a href="#k05">5. Druhý demonstrační příklad &ndash; změna počáteční rotace tělesa</a><br />
<a href="#k06">6. Třetí demonstrační příklad &ndash; dvojice šikmých statických podlah</a><br />
<a href="#k07">7. Literatura a odkazy na Internetu</a><br />
<a href="#k08">8. Obsah dalšího pokračování seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h2>1. Hrátky se systémem LÖVE &ndash; kolize a odrazy objektů</h2>

<p>V&nbsp;předchozích částech tohoto seriálu jsme si stručně popsali
nejdůležitější knihovnu, na které je postavena největší část funkcionality
celého herního systému <i>LÖVE</i>. Jednalo se o knihovnu
<strong>love.graphics</strong>, která podporuje jak vytvoření okna určeného pro
grafický výstup a přepnutí grafického výstupu do celoobrazovkového režimu, tak
i vykreslování různých grafických objektů, počínaje body, úsečkami, kružnicemi
a polygony, přes fonty a rastrové obrázky, konče tvarově složitými a dynamicky
se měnícími částicovými systémy. Dnes začneme s&nbsp;popisem další knihovny,
která je poměrně přiléhavě nazvaná <strong>love.physics</strong>.
S&nbsp;využitím této knihovny je možné simulovat vzájemné interakce (kolize a
odrazy) dvojrozměrných těles, vytvářet složitější objekty složené
ze vzájemně provázaných základních tvarů (<i>shape</i>) a těles (<i>body</i>) i
ovlivňovat trajektorii pohybujících se těles pomocí externích sil, které mohou
na tato tělesa různým způsobem působit. Taktéž je možné libovolnou část tělesa
navázat ke kurzoru myši, takže se současně s&nbsp;pohybem myši pohybuje i tato
část tělesa, která může ovlivnit i části další, s&nbsp;nimiž je spojena pomocí
programově vytvořené vazby.</p>

<a href="http://i.iinfo.cz/images/466/lua1601.png"><img src="http://i.iinfo.cz/images/466/lua1601-prev.png" width="360" height="270" alt="lua1601" /></a>
<p><i>Obrázek 1: Jednoduchá hra popsaná v&nbsp;předchozích částech tohoto
seriálu, která byla z&nbsp;velké části založena na knihovně
<strong>love.graphics</strong>.</i></p>



<p><a name="k02"></a></p>
<h2>2. Základní objekty využívané v&nbsp;modulu <strong>love.physics</strong></h2>

<p>Před použitím knihovny <strong>love.physics</strong> ve vlastních aplikacích
je nutné pochopit, s&nbsp;jakými objekty tato knihovna pracuje. Většina
operací, tj.&nbsp;především vlastní simulace, pracuje se čtyřmi typy
objektů:</p>

<ol>

<li><strong>World</strong> &ndash; tento objekt představuje celý dvojrozměrný
&bdquo;svět&ldquo;, ve kterém simulace pohybu a vzájemné interakce těles
(kolize, odrazy) probíhá. Jedná se o obdélníkovou oblast, jenž představuje
hranice, ve kterých by měly ležet vrcholy všech těles, přesněji řečeno všech
tvarů, ze kterých se tělesa skládají. Nastavená hranice by měla být dostatečně
velká, aby viditelná tělesa tuto hranici nemohla překročit, protože simulace
probíhají pouze uvnitř herního světa (sami si můžete vyzkoušet, co se stane,
když bude hranice ležet v&nbsp;ploše obrazovky a těleso tuto hranici překročí
&ndash; pohyb tělesa se zastaví a přestanou pracovat i detektory kolizí). Na
druhou stranu příliš rozsáhlý herní svět může zpomalovat výpočty vzájemných
kolizí těles.</li>

<li><strong>Body</strong> &ndash; tento objekt představuje nestlačitelnu hmotu
umístěnou v&nbsp;herním světě. Při vytváření tělesa lze nastavit jeho
souřadnice v&nbsp;rámci herního světa, úhel natočení, hmotnost, těžiště
(v&nbsp;kontextu této knihovny se jedná o bod, ve kterém je soustředěna
hmotnost tělesa) i další fyzikální parametry. V&nbsp;případě, že je hmotnost
tělesa nulová, nepůsobí na těleso gravitace. Existují i speciální typy těles
nazývané střely (<i>bullets</i>), které se od &bdquo;běžných&ldquo; těles
odlišují především použitím přesnějšího (a také pomalejšího) algoritmu pro
detekci kolizí. V&nbsp;případě, že by byl použit základní algoritmus detekce
kolizí a v&nbsp;herním světě by se velkou rychlostí pohybovala například střela
proti tenké stěně, mohlo by se stát, že by střela touto stěnou prolétla, aniž
by byla kolize správně vyhodnocena. Použitím střel se budeme zabývat
v&nbsp;navazující části tohoto seriálu.</li>

<li><strong>Shape</strong> &ndash; geometrický tvar, který může být přiřazený
k&nbsp;tělesu. Tvar představuje hranici tělesa, která je použita při detekci
kolizí. V&nbsp;současné verzi knihovny <strong>love.physics</strong> je
repertoár použitelných tvarů omezen pouze na konvexní uzavřené polygony a
kruhy, protože výpočty kolizí s&nbsp;nekonvexními tvary jsou složitější než
s&nbsp;tvary konvexními (ve skutečnosti se nejedná přímo o omezení knihovny
<strong>love.physics</strong>, ale C++ knihovny <strong>Box2D</strong>, jejíž
funkce a metody jsou interně volány). S&nbsp;využitím tvaru přiřazeného
k&nbsp;tělesu je možné vypočítat i celkovou hmotnost tělesa a souřadnice jeho
těžiště &ndash; viz demonstrační příklady, kde tuto vlastnost využijeme.</li>

<li><strong>Joint</strong> &ndash; tento objekt představuje vazbu mezi tělesy,
které se nachází v&nbsp;herním světě. Existuje několik typů vazeb, například
vazba, u níž je zadána vzdálenost dvou těles, přičemž simulační knihovna se
snaží tato tělesa natočit a posunout tak, aby byla zvolená vazba splněna
(samotný objekt představující vazbu je neviditelný, ovšem samozřejmě je možné
například získat souřadnice koncových bodů vazby a ty vykreslit formou úseček).
Je však možné použít i další typy vazeb, například vazbu představující kladku
či páku apod. V&nbsp;dnešních demonstračních příkladech nejsou vazby použity,
zabývat se jimi budeme až v&nbsp;dalších článcích.</li>

</ol>

<a href="http://i.iinfo.cz/images/637/lua1602.jpg"><img src="http://i.iinfo.cz/images/637/lua1602-prev.jpg" width="360" height="270" alt="lua1602" /></a>
<p><i>Obrázek 2: Částicový systém, v&nbsp;němž mají částice nastavené záporné
radiální zrychlení (směr vektoru tohoto zrychlení odpovídá vektoru počáteční
rychlosti částice).</i></p>



<p><a name="k03"></a></p>
<h2>3. Vytvoření herního světa a hmotných těles</h2>

<p>V&nbsp;předchozí kapitole byly popsány základní typy objektů, se kterými se
při práci s&nbsp;knihovnou <strong>love.physics</strong> můžeme setkat. Nyní si
řekněme, jak se s&nbsp;těmito objekty skutečně pracuje. Nejjednodušší je
vytvoření herního světa, který se zkonstruuje pomocí funkce
<strong>love.physics.newWorld(size_x, size_y)</strong>. Této funkci, která
vrací objekt typu <strong>world</strong>, se předává velikost obdélníku, ve
které se celý simulovaný svět nachází. Jedinou metodou tohoto objektu, kterou
v&nbsp;dnešních příkladech použijeme, je metoda nazvaná <strong>setGravity(gx,
gy)</strong>, pomocí níž se nastavuje &ndash; jak již ostatně samotný název
této metody napovídá &ndash; vektor gravitační síly. Do vytvořeného světa je
možné vložit libovolné množství těles představovaných objekty typu
<strong>Body</strong>.</p>

<a href="http://i.iinfo.cz/images/499/lua1603.jpg"><img src="http://i.iinfo.cz/images/499/lua1603-prev.jpg" width="360" height="270" alt="lua1603" /></a>
<p><i>Obrázek 3: Další částicový systém, v&nbsp;němž mají částice nastavené záporné
radiální zrychlení.</i></p>

<p>Nové těleso se vytváří pomocí funkce
<strong>love.physics.newBody()</strong>, jejímž prvním parametrem je objekt
typu &bdquo;svět&ldquo; (další parametry se mohou lišit, neboť se jedná o
přetíženou funkci). Důvod, proč se nejedná přímo o metodu objektu
<strong>world</strong>, spočívá v&nbsp;návaznosti na knihovnu Box2D, kde se
taktéž jedná o statickou funkci třídy <strong>World</strong>, nikoli o metodu
(ostatně sám autor této jinak skvělé knihovny s&nbsp;mnoha dobrými nápady
přiznává, že její API mohlo být navrženo lépe). Každému vytvořenému tělesu lze
přiřadit několik důležitých fyzikálních vlastností, především hmotnost,
počáteční rychlost a taktéž počáteční rotaci. Hmotnost lze nastavit buď přímo
při zavolání funkce <strong>love.physics.newBody()</strong> nebo později,
například na základě automatického výpočtu hmotnosti ze znalosti tvaru
přiřazeného tělesu (knihovna si interně spočítá plochu tvaru a posléze pomocí
této hodnoty vyčíslí hmotnost celého tělesa).</p>

<img src="http://i.iinfo.cz/images/142/lua1604.png" width="73" height="72" alt="lua1604" />
<p><i>Obrázek 4: Rastrový obrázek (sprite), který je použitý v&nbsp;níže
popsaných demonstračních příkladech pro reprezentaci pohybujícího se tělesa
&ndash; míčku. Některé pixely umístěné mimo míček jsou zcela průhledné. Tento
obrázek musí mít název "green_ball.png" a je nutné, aby byl umístěný ve stejném
adresáři, v&nbsp;jakém se nachází i demonstrační příklady, jinak je nebude
možné spustit.</i></p>

<p>Poslední operací, kterou je nutné i u jednoduchých simulovaných systémů provést, je volba a přiřazení tvaru (<i>shape</i>) ke každému tělesu. Jak jsme si již řekli v&nbsp;předchozí kapitole, je možné pro tvar tělesa použít konvexní polygon či kruh. V&nbsp;demonstračních příkladech se používá polygon ve tvaru obdélníku vytvářený funkcí (opět ne metodou!) nazvanou <strong>love.physics.newRectangleShape()</strong> a míček vytvořený z&nbsp;kruhu funkcí <strong>love.physics.newCircleShape()</strong>. Prvním parametrem těchto funkcí je vždy objekty představující těleso (body), další parametry se samozřejmě liší podle tvaru objektu.</p>

    -- rastrový obrázek představující těleso - míček
    ball = love.graphics.newImage("green_ball.png")

    -- výpočet hmotnosti míčku na základě jeho poloměru
    ball_body:setMassFromShapes()

    -- aplikace síly na míček
    ball_body:applyForce(1000000, 0, 100, 100)




<p><a name="k04"></a></p>
<h2>4. První demonstrační příklad &ndash; pohybující se těleso a statická podlaha</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán způsob použití tvarů
a těles ve velmi jednoduché simulaci. V&nbsp;simulovaném světě se nachází dvě
tělesa &ndash; podlaha představovaná podlouhlým obdélníkem a míček
představovaný kruhovým tvarem, při jehož vykreslení je použit rastrový obrázek
s&nbsp;plně či částečně průhlednými pixely (zde můžeme využít skutečnosti, že
je možné rastrový obrázek při jeho vykreslení natáčet). Podlaha má nastavenou
nulovou hmotnost, takže na ní nepůsobí gravitace, zatímco hmotnost míčku a jeho
těžiště je spočteno automaticky pomocí metody
<strong>setMassFromShapes()</strong>. Před vlastním spuštěním simulace začne na
míček působit síla, jejíž vektor je vodorovný a směřuje doprava (viz metoda
<strong>ball_body:applyForce</strong>). Právě tato síla a gravitace
(resp.&nbsp;tíhové zrychlení) určuje první část trajektorie míčku. Po dopadu na
podlahu a několika tlumených odrazech se míček začne vlivem tření otáčet a
posléze z&nbsp;podlahy spadne. Klávesou <strong>[R]</strong> je možné simulaci
znovu spustit, ovšem na míček již přestane působit horizontální síla; klávesou
<strong>[Esc]</strong> je program ukončen. Vidíme, že i v&nbsp;takto jednoduché
simulaci je nutné počítat s&nbsp;relativně velkým množstvím vlivů a bez použití
knihovny <strong>love.physics</strong> by byly výpočty obtížné.</p>

<a href="http://i.iinfo.cz/images/376/lua1605.png"><img src="http://i.iinfo.cz/images/376/lua1605-prev.png" width="370" height="264" alt="lua1605" /></a>
<p><i>Obrázek 5: První demonstrační příklad &ndash; začátek simulace.</i></p>

<p>Následuje výpis zdrojového kódu prvního demonstračního příkladu:</p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- První demonstrační příklad:
--     simulace pohybu tělesa ve tvaru 2D míčku,
--     které dopadá na obdélníkovou podlahu
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- objekt představující svět, ve kterém se provádí simulace
world = nil

function load()
    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)

    -- vytvoření "světa" o rozměrech 2000x2000 délkových jednotek
    world = love.physics.newWorld(2000, 2000)
    world:setGravity(0, 50)

    -- podlaha na souřadnicích [0, 0] s nulovou hmotností
    ground_body = love.physics.newBody(world, 0, 0, 0)

    -- obdélník (tvar) představující podlahu
    ground_shape = love.physics.newRectangleShape(ground_body, 400, 500, 500, 10)

    -- rastrový obrázek představující těleso - míček
    ball = love.graphics.newImage("green_ball.png")

    -- vytvoření tělesa na zadaných souřadnicích
    ball_body = love.physics.newBody(world, 200, 100)

    -- přiřazení tvaru k tělesu
    ball_shape = love.physics.newCircleShape(ball_body, 31)

    -- výpočet hmotnosti míčku na základě jeho poloměru
    ball_body:setMassFromShapes()

    -- aplikace síly na míček
    ball_body:applyForce(1000000, 0, 100, 100)
end

-- pravidelně volaná callback funkce
function update(dt)
   -- Update the world.
   world:update(dt)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
   -- vykreslení podlahy
   love.graphics.polygon(love.draw_line, ground_shape:getPoints())

   -- vykreslení míčku se správným natočením
   love.graphics.draw(ball, ball_body:getX(), ball_body:getY(), ball_body:getAngle())
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    -- klávesou [ESC] se program ukončí
    if key == love.key_escape then
        love.system.exit()
    end
    -- klávesou [R] se nastaví nové souřadnice
    -- míčku a míček se zastaví
    if key == love.key_r then
        ball_body:setPosition(200, 100)
        ball_body:setVelocity(0, 0)
        ball_body:setSpin(0)
    end
end

-- finito
</pre>

<a href="http://i.iinfo.cz/images/486/lua1606.png"><img src="http://i.iinfo.cz/images/486/lua1606-prev.png" width="370" height="264" alt="lua1606" /></a>
<p><i>Obrázek 6: První demonstrační příklad &ndash; dopad míčku na podlahu.</i></p>

<a href="http://i.iinfo.cz/images/668/lua1607.png"><img src="http://i.iinfo.cz/images/668/lua1607-prev.png" width="370" height="264" alt="lua1607" /></a>
<p><i>Obrázek 7: První demonstrační příklad &ndash; míček padá z&nbsp;podlahy.</i></p>



<p><a name="k05"></a></p>
<h2>5. Druhý demonstrační příklad &ndash; změna počáteční rotace tělesa</h2>

<p>Ve druhém demonstračním příkladu je ukázán vliv rotace tělesa (nazývaného
v&nbsp;knihovně <strong>love.physics</strong> termínem <i>spin</i>). Rotující
těleso &ndash; v&nbsp;tomto demonstračním příkladu se opět jedná o kulatý míček
&ndash; po svém dopadu na podlahu část své rotační energie přemění na dopředný
pohyb, popř.&nbsp;je naopak rotační energie využita k&nbsp;zastavení dopředného
pohybu a začátku pohybu zpětného, v&nbsp;závislosti na směru rotace a úhlu, pod
kterým míček dopadne na podlahu. Pomocí kláves <strong>[0]</strong> až
<strong>[9]</strong> je možné nastavit počáteční rotaci míčku, která se však
využije ve chvíli stlačení klávesy <strong>[R]</strong> (restart).</p>

<a href="http://i.iinfo.cz/images/87/lua1608.png"><img src="http://i.iinfo.cz/images/87/lua1608-prev.png" width="360" height="270" alt="lua1608" /></a>
<p><i>Obrázek 8: Druhý demonstrační příklad &ndash; začátek simulace.</i></p>

<p>V&nbsp;případě, že je počáteční rotace kladná (což značí jeho otáčení ve
směru hodinových ručiček), je míček po dopadu na podlahu urychlen a pohybuje se
doprava, při dostatečně velké záporné rotaci (míček se otáčí proti směru
hodinových ručiček) může dojít buď k&nbsp;pozastavení posunu míčku nebo dokonce
k&nbsp;tomu, že se míček začne pohybovat opačným směrem. V&nbsp;horní části
obrazovky je možné sledovat všechny důležité fyzikální parametry míčku &ndash;
jeho polohu, rychlost i aktuální hodnotu otáčení. Povšimněte si, že právě tato
hodnota se po dopadu (a několikerém odrazu) míčku mění.</p>

<a href="http://i.iinfo.cz/images/237/lua1609.png"><img src="http://i.iinfo.cz/images/237/lua1609-prev.png" width="360" height="270" alt="lua1609" /></a>
<p><i>Obrázek 9: Druhý demonstrační příklad &ndash; pád míčku na podlahu,
prozatím se rotace míčku nesnižuje.</i></p>

<p>Zdrojový kód druhého demonstračního příkladu má tvar:</p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- Druhý demonstrační příklad:
--     simulace pohybu tělesa ve tvaru 2D míčku,
--     které dopadá na obdélníkovou podlahu
--     změna počáteční rotace míčku a ukázka
--     jejího vlivu na trajektorii míčku po dopadu
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- objekt představující svět, ve kterém se provádí simulace
world = nil

-- počáteční rotace míčku
initial_spin = 500

function load()
    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)

    -- načtení fontu
    local font = love.graphics.newFont(love.default_font, 16)
    love.graphics.setFont(font)

    -- vytvoření "světa" o rozměrech 2000x2000 délkových jednotek
    world = love.physics.newWorld(2000, 2000)
    world:setGravity(0, 50)

    -- podlaha na souřadnicích [0, 0] s nulovou hmotností
    ground_body = love.physics.newBody(world, 0, 0, 0)

    -- obdélník (tvar) představující podlahu
    ground_shape = love.physics.newRectangleShape(ground_body, 400, 500, 500, 10)

    -- rastrový obrázek představující těleso - míček
    ball = love.graphics.newImage("green_ball.png")

    -- vytvoření tělesa na zadaných souřadnicích
    ball_body = love.physics.newBody(world, 200, 100)

    -- přiřazení tvaru k tělesu
    ball_shape = love.physics.newCircleShape(ball_body, 31)

    -- výpočet hmotnosti míčku na základě jeho poloměru
    ball_body:setMassFromShapes()

    -- nastavení počáteční rotace míčku
    ball_body:setSpin(initial_spin)

    -- aplikace síly na míček
    ball_body:applyForce(1000000, 0, 100, 100)
end

-- pravidelně volaná callback funkce
function update(dt)
   -- Update the world.
   world:update(dt)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
   love.graphics.setColor(160, 160, 160)

   -- vykreslení podlahy
   love.graphics.polygon(love.draw_line, ground_shape:getPoints())

   -- vykreslení míčku se správným natočením
   love.graphics.draw(ball, ball_body:getX(), ball_body:getY(), ball_body:getAngle())

   love.graphics.setColor(255, 255, 0)
   -- získání aktuálních informací o míčku
   local x, y = ball_body:getPosition()
   local vx, vy = ball_body:getVelocity()
   local spin = ball_body:getSpin()
   -- výpis informací
   love.graphics.draw(string.format("position: %d, %d", x, y), 10, 20)
   love.graphics.draw(string.format("velocity: %d, %d", vx, vy), 10, 40)
   love.graphics.draw(string.format("spin: %d", spin), 10, 60)
   love.graphics.draw(string.format("initial spin: %d ('0'-'9' to change)", initial_spin), 10, 80)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    -- klávesou [ESC] se program ukončí
    if key == love.key_escape then
        love.system.exit()
    end
    -- klávesou [R] se nastaví nové souřadnice
    -- míčku a rotace míčku se zastaví
    if key == love.key_r then
        ball_body:setPosition(200, 100)
        ball_body:setVelocity(80, 0)
        ball_body:setSpin(initial_spin)
    end
    -- změna počáteční rotace míčku
    if key &gt;= love.key_0 and key &lt;= love.key_9 then
        local code = key - love.key_0
        initial_spin = code*200-1000
    end
end

-- finito
</pre>

<a href="http://i.iinfo.cz/images/509/lua1610.png"><img src="http://i.iinfo.cz/images/509/lua1610-prev.png" width="360" height="270" alt="lua1610" /></a>
<p><i>Obrázek 10: Druhý demonstrační příklad &ndash; dopad míčku na podlahu,
rotace se začíná snižovat a míček se vlivem tření pohybuje směrem doleva a
nikoli doprava.</i></p>

<a href="http://i.iinfo.cz/images/323/lua1611.png"><img src="http://i.iinfo.cz/images/323/lua1611-prev.png" width="360" height="270" alt="lua1611" /></a>
<p><i>Obrázek 11: Rotace míčku se snížila, její energie posloužila ke změně
směru pohybu míčku.</i></p>

<a href="http://i.iinfo.cz/images/524/lua1612.png"><img src="http://i.iinfo.cz/images/524/lua1612-prev.png" width="360" height="270" alt="lua1612" /></a>
<p><i>Obrázek 12: Míček padá z&nbsp;horní plochy podlahy.</i></p>



<p><a name="k06"></a></p>
<h2>6. Třetí demonstrační příklad &ndash; dvojice šikmých statických podlah</h2>

<p>Ve třetím demonstračním příkladu se místo podlahy, tj.&nbsp;tělesa
s&nbsp;vodorovnou horní stěnou, na nějž nepůsobí gravitace, používá dvojice
šikmo postavených kvádrů. Míček po dopadu na první kvádr začíná klouzat po jeho
horní části, přičemž se jeho rychlost i rotace postupně urychluje vlivem
gravitace, jejíž vektor je orientován směrem dolů (jak orientaci tohoto
vektoru, tak i jeho délku je sice možné měnit, výsledek však nepůsobí příliš
realisticky).</p>

<a href="http://i.iinfo.cz/images/414/lua1613.png"><img src="http://i.iinfo.cz/images/414/lua1613-prev.png" width="370" height="264" alt="lua1613" /></a>
<p><i>Obrázek 13: Třetí demonstrační příklad &ndash; začátek simulace.</i></p>

<p>Po dopadu na druhý kvádr se rotace míčku zpomalí (viz horní část
obrazovky, do níž se vypisují jeho základní fyzikální parametry) a začíná pohyb
opačným směrem. Podobně jako u druhého demonstračního příkladu, i zde je možné
pomocí kláves <strong>[0]</strong> až <strong>[9]</strong> měnit počáteční
rotaci míčku a ovlivnit tak jeho trajektorii. Změnou globálních konstant
<strong>frame1_angle</strong> a <strong>frame2_angle</strong> lze změnit
natočení obou kvádrů, po jejichž povrchu se míček kutálí.</p>

<a href="http://i.iinfo.cz/images/55/lua1614.png"><img src="http://i.iinfo.cz/images/55/lua1614-prev.png" width="360" height="270" alt="lua1614" /></a>
<p><i>Obrázek 14: Třetí demonstrační příklad &ndash; dopad míčku na první
kvádr.</i></p>

<p>Následuje výpis zdrojového kódu třetího demonstračního příkladu:</p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- Třetí demonstrační příklad: použití šikmých "podlah"
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- objekt představující svět, ve kterém se provádí simulace
world = nil

-- počáteční rotace míčku
initial_spin = 500

-- natočení obou "podlah"
frame1_angle = -20
frame2_angle = 45

function load()
    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)

    -- načtení fontu
    local font = love.graphics.newFont(love.default_font, 16)
    love.graphics.setFont(font)

    -- vytvoření "světa" o rozměrech 2000x2000 délkových jednotek
    world = love.physics.newWorld(2000, 2000)
    world:setGravity(0, 50)

    -- podlaha na souřadnicích [0, 0] s nulovou hmotností
    ground = love.physics.newBody(world, 0, 0, 0)

    -- obdélník představující podlahu
    ground_shape = love.physics.newRectangleShape(ground, 400, 500, 600, 10, frame1_angle)

    bridge = love.physics.newBody(world, 0, -100, 0)
    bridge_shape = love.physics.newRectangleShape(bridge, 200, 300, 300, 10, frame2_angle)

    -- rastrový obrázek představující těleso - míček
    ball = love.graphics.newImage("green_ball.png")

    -- vytvoření tělesa na zadaných souřadnicích
    ball_body = love.physics.newBody(world, 200, 100)

    -- přiřazení tvaru k tělesu
    ball_shape = love.physics.newCircleShape(ball_body, 31)

    -- výpočet hmotnosti na základě jeho poloměru
    ball_body:setMassFromShapes()
end

-- pravidelně volaná callback funkce
function update(dt)
   -- Update the world.
   world:update(dt)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
   love.graphics.setColor(160, 160, 160)

   -- vykreslení podlahy
   love.graphics.polygon(love.draw_line, ground_shape:getPoints())
   love.graphics.polygon(love.draw_line, bridge_shape:getPoints())

   -- vykreslení míčku se správným natočením
   love.graphics.draw(ball, ball_body:getX(), ball_body:getY(), ball_body:getAngle())

   love.graphics.setColor(255, 255, 0)

   -- získání aktuálních informací o míčku
   local x, y = ball_body:getPosition()
   local vx, vy = ball_body:getVelocity()
   local spin = ball_body:getSpin()

   -- výpis informací
   love.graphics.draw(string.format("position: %d, %d", x, y), 10, 20)
   love.graphics.draw(string.format("velocity: %d, %d", vx, vy), 10, 40)
   love.graphics.draw(string.format("spin: %d", spin), 10, 60)
   love.graphics.draw(string.format("initial spin: %d ('0'-'9' to change)", initial_spin), 10, 80)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    -- klávesou [ESC] se program ukončí
    if key == love.key_escape then
        love.system.exit()
    end
    -- klávesou [R] se nastaví nové souřadnice
    -- míčku a rotace míčku se zastaví
    if key == love.key_space then
        -- Apply a random impulse
        body:applyImpulse(100000-math.random(0, 200000), 0)
    end
    if key == love.key_r then
        ball_body:setPosition(200, 100)
        ball_body:setVelocity(0, 0)
        ball_body:setSpin(initial_spin)
    end
    -- změna í rotace míčku
    if key &gt;= love.key_0 and key &lt;= love.key_9 then
        local code = key - love.key_0
        initial_spin = code*200-1000
    end
end

-- finito
</pre>

<a href="http://i.iinfo.cz/images/585/lua1615.png"><img src="http://i.iinfo.cz/images/585/lua1615-prev.png" width="370" height="264" alt="lua1615" /></a>
<p><i>Obrázek 15: Třetí demonstrační příklad &ndash; míček klouže po prvním
kvádru.</i></p>

<a href="http://i.iinfo.cz/images/577/lua1616.png"><img src="http://i.iinfo.cz/images/577/lua1616-prev.png" width="370" height="264" alt="lua1616" /></a>
<p><i>Obrázek 16: Třetí demonstrační příklad &ndash; míček dopadl na druhý
kvádr.</i></p>



<p><a name="k07"></a></p>
<h2>7. Literatura a odkazy na Internetu</h2>

<ol>

<li>Baraff David and Witkin Andrew: <br />
<i>Physically Based Modeling</i>,<br />
SIGGRAPH Course Notes, July 1998, pages B1&ndash;C12
</li>

<li>Magnetat-Thalmann B., Thalmann D. and Arnaldi B.: <br />
<i>Computer Animation and Simulation 2000</i>,<br />
Springer Verlag, Wien, ISBN 3-2118-3549-0
</li>

<li>Box2D Physics Engine (jedná se o engine, na němž je knihovna
<strong>love.physics</strong> založena)<br />
<a href="http://www.box2d.org/">http://www.box2d.org/</a></li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Tutoriály k&nbsp;systému LÖVE<br />
<a href="http://love2d.org/?page=documentation">http://love2d.org/?page=documentation</a>
</li>

<li>Screenshoty aplikací vytvořených v&nbsp;LÖVE<br />
<a href="http://love2d.org/screenshots">http://love2d.org/screenshots</a></li>

<li>Domovská stránka programovacího jazyka Lua<br />
<a href="http://www.lua.org/ ">http://www.lua.org/ </a>
</li>

<li>Lua<br />
<a href="http://www.linuxexpres.cz/praxe/lua">http://www.linuxexpres.cz/praxe/lua</a>
</li>

<li>Lua<br />
<a href="http://cs.wikipedia.org/wiki/Lua">http://cs.wikipedia.org/wiki/Lua</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

</ol>



<p><a name="k08"></a></p>
<h2>8. Obsah dalšího pokračování seriálu</h2>

<p>V&nbsp;navazující části seriálu o programovacím jazyku <i>Lua</i> a systému
<i>LÖVE</i> si ukážeme další (poněkud složitější a taktéž zajímavější) způsoby
využití modulu <i>love.physics</i>, především způsob vytváření složitějších
těles z&nbsp;jednodušších tvarů.  Uvidíme, že zdánlivě jednoduché prostředí pro
simulaci fyzikálně reálného pohybu a kolize těles nabízené tímto modulem ve
skutečnosti umožňuje tvorbu i velmi komplexních systémů, které je navíc možné
interaktivně ovlivňovat uživatelem &ndash; například posunem některých tvarů
pomocí myši.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

