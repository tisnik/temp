<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes dokončíme popis možností jazyka Moonscript, který je transpilován do jazyka Lua. Ukážeme si použití řezů, programových smyček vracejících hodnoty, deklaraci tříd či tzv. destructuring. Porovnáním kódu v Moonscriptu a Lue získáme přehled o vyšší úrovni abstrakce Moonscriptu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Specifikace řezu tabulkou v&nbsp;programové smyčce <strong>for-each</strong></a></p>
<p><a href="#k02">2. Vliv použití záporného horního indexu při řezu tabulkou</a></p>
<p><a href="#k03">3. Explicitní krok specifikovaný při řezu tabulkou</a></p>
<p><a href="#k04">4. Počítaná programová smyčka typu <strong>for</strong> ve funkci hodnoty</a></p>
<p><a href="#k05">5. Realizace filtru programovou smyčkou typu <strong>for</strong></a></p>
<p><a href="#k06">6. Vrácení hodnot generovaných smyčkou <strong>for</strong> z&nbsp;funkce</a></p>
<p><a href="#k07">7. Nepatrně zjednodušený zápis programové smyčky typu <strong>while</strong></a></p>
<p><a href="#k08">8. Objektově orientované programování v&nbsp;jazyce Moonscript</a></p>
<p><a href="#k09">9. Deklarace třídy s&nbsp;konstruktorem, přístup k&nbsp;atributům objektu</a></p>
<p><a href="#k10">10. Zjednodušený přístup k&nbsp;atributům objektů pomocí operátoru <strong>@</strong></a></p>
<p><a href="#k11">11. Volání metod objektu s&nbsp;využitím operátoru <strong>\</strong></a></p>
<p><a href="#k12">12. Metody bez parametrů a s&nbsp;jednopříkazovým tělem</a></p>
<p><a href="#k13">13. Předání parametrů konstruktoru objektu</a></p>
<p><a href="#k14">14. Volání metod přímo z&nbsp;konstruktoru</a></p>
<p><a href="#k15">15. Použití programové konstrukce <strong>with</strong></a></p>
<p><a href="#k16">16. Blok <strong>do</strong></a></p>
<p><a href="#k17">17. Destructuring</a></p>
<p><a href="#k18">18. Příloha: zápis řezu (slice) v&nbsp;různých programovacích jazycích</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Specifikace řezu tabulkou v&nbsp;programové smyčce <strong>for-each</strong></h2>

<p>Již <a
href="https://www.root.cz/clanky/moonscript-jazyk-inspirovany-coffeescriptem-urceny-pro-ekosystem-jazyka-lua-2/">minule</a>
jsme se v&nbsp;kapitole o <i>generátorové notaci seznamu</i> (<i>list
comprehension</i>) zmínili o možnosti použít pouze vybrané prvky ze zdrojového
seznamu (resp.&nbsp;v&nbsp;terminologii jazyka Lua z&nbsp;tabulky), a to
s&nbsp;využitím takzvaných <i>řezů</i> (<i>slice</i>), které můžeme
v&nbsp;podobné podobě znát například z&nbsp;Pythonu, z&nbsp;jazyka Go
popř.&nbsp;z&nbsp;programovacího jazyka Rust (viz též <a href="#k18">přílohu
v&nbsp;osmnácté kapitole</a>). V&nbsp;případě Moonscriptu není možné řez použít
v&nbsp;běžných výrazech (což je poměrně velké omezení), ovšem například ho
můžeme zapsat v&nbsp;programové smyčce typu <strong>for-each</strong>, kterou
lze mj.&nbsp;zkonstruovat i takto:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
items = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
&nbsp;
for item in <strong>*items[2,8]</strong>
  print item
</pre>

<p>Transpilace takto zapsané programové smyčky do jazyka Lua naznačuje způsob
převodu řezu na běžnou počítanou smyčku:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local items = {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
}
local _max_0 = 8
for _index_0 = 2, _max_0 &lt; 0 and #items + _max_0 or _max_0 do
  local item = items[_index_0]
  print(item)
end
</pre>

<p>Po spuštění tohoto demonstračního příkladu se vypíšou hodnoty od 2 do 8:</p>

<pre>
2
3
4
5
6
7
8
</pre>

<p><div class="rs-tip-major">Poznámka: na tomto místě je vhodné zdůraznit, že
se vypíše i hodnota 8, a to na rozdíl od některých jiných programovacích
jazyků, v&nbsp;nichž se hodnoty zapisované do řezu nechápou jako indexy prvků,
ale jako indexy mezer <i>mezi</i> prvky.</div></p>

<p>V&nbsp;případě, že se vynechá první index, dosadí se namísto něj automaticky
jednička (číslování prvků v&nbsp;Moonscriptu začíná od jedničky):</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
items = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
&nbsp;
for item in <strong>*items[,8]</strong>
  print item
</pre>

<p>Opět si uveďme způsob transpilace do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local items = {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
}
local _max_0 = 8
for _index_0 = 1, _max_0 &lt; 0 and #items + _max_0 or _max_0 do
  local item = items[_index_0]
  print(item)
end
</pre>

<p>Výsledek je v&nbsp;tomto případě očekávatelný:</p>

<pre>
1
2
3
4
5
6
7
8
</pre>

<p>Vynechat je ovšem možné i druhý index. V&nbsp;tomto případě se namísto něho
dosadí délka pole/tabulky:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
items = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
&nbsp;
for item in <strong>*items[4,]</strong>
  print item
</pre>

<p>Transpřeklad předchozí programové smyčky tak, že horní mezí bude skutečně
délka tabulky, si můžeme snadno ověřit &ndash; viz zvýrazněnou část kódu:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local items = {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
}
for _index_0 = 4, <strong>#items</strong> do
  local item = items[_index_0]
  print(item)
end
</pre>

<p>Výsledek, který po spuštění předchozího skriptu získáme, bude vypadat
následovně:</p>

<pre>
4
5
6
7
8
9
10
</pre>

<p><div class="rs-tip-major">Poznámka: je zde vidět jedna z&nbsp;výhod
indexování od jedničky &ndash; délka tabulky odpovídá indexu posledního prvku.
Tento způsob má ovšem i některé nevýhody; například mnoho programátorů je dnes
navyklých spíše na indexování od nuly než od jedničky (na druhou stranu ovšem
doménové jazyky popř.&nbsp;jazyky orientované na matematiku, číslování od
jedničky relativně často používají).</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vliv použití záporného horního indexu při řezu tabulkou</h2>

<p>Horní index je možné zapsat formou záporného čísla. V&nbsp;tomto případě se
počítá od konce seznamu/tabulky, nikoli od jejího začátku. Ostatně si můžeme
toto chování velmi snadno ověřit:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
items = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
&nbsp;
for item in <strong>*items[3,-3]</strong>
  print item
</pre>

<p>Implementace při transpilaci do jazyka Lua je přímočará a vlastně ani
nevyžaduje žádné další kroky v&nbsp;porovnání s&nbsp;předchozími demonstračními
příklady:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local items = {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
}
local _max_0 = -3
for _index_0 = 3, <strong>_max_0 &lt; 0 and #items + _max_0 or _max_0</strong> do
  local item = items[_index_0]
  print(item)
end
</pre>

<p>Je zde použita podmínka zapsaná pomocí <strong>and-or</strong>, kterou lze
snadno dešifrovat pro kladnou i zápornou hodnotu <strong>max</strong> a seznamu
délky deset prvků:</p>

<table>
<tr><th>max</th><th>max &lt; 0</th><th>#items + max</th><th>max &lt; 0 and #items + max or max</th><th>Poznámka</th></tr>
<tr><td>+5</td><td>false</td><td>15</td><td>5</td><td>podmínka nesplněna &rarr; vyhodnotí se &bdquo;větev&ldquo; za <strong>or</strong></td></tr>
<tr><td>-4</td><td>true </td><td>6</td><td>6</td><td>podmínka splněna &rarr; vyhodnotí se větev za <strong>and</strong></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: je zde využito zkráceného vyhodnocení
logických výrazů, kdy se na základě hodnoty levého operandu rozhoduje, zda má
smysl vyhodnotit pravý operand či nikoli.</div></p>

<p>Výsledkem po spuštění předchozího příkladu tedy bude sekvence hodnot:</p>

<pre>
3
4
5
6
7
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Explicitní krok specifikovaný při řezu tabulkou</h2>

<p>Mnoho programovacích jazyků u řezů podporuje i určení kroku mezi prvky. I
tuto konstrukci jazyk Moonscript podporuje, takže si ji můžeme otestovat.
V&nbsp;následujícím demonstračním příkladu se řezem vyberou všechny prvky od
začátku do konce seznamu, ovšem s&nbsp;krokem 2 (tedy každý druhý prvek):</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
items = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
&nbsp;
for item in <strong>*items[,,2]</strong>
  print item
</pre>

<p>V&nbsp;takto jednoduchém příkladu je transpilace do jazyka Lua velmi
přímočará, protože krok podporuje i jazyk Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local items = {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
}
for _index_0 = <strong>1, #items, 2</strong> do
  local item = items[_index_0]
  print(item)
end
</pre>

<p>Výsledek získaný po spuštění tohoto skriptu:</p>

<pre>
1
3
5
7
9
</pre>

<p>Programové smyčky s&nbsp;jediným příkazem v&nbsp;těle lze zapsat na jediný
programový řádek, ovšem v&nbsp;tomto případě je nutné přidat klíčové slovo
<strong>do</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
items = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
&nbsp;
<strong>for item in *items[,,2] do print item</strong>
</pre>

<p>Transpřeklad tohoto skriptu do programovacího jazyka Lua je přímočarý:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local items = {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
}
for _index_0 = 1, #items, 2 do
  local item = items[_index_0]
  print(item)
end
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Počítaná programová smyčka typu <strong>for</strong> ve funkci hodnoty</h2>

<p>Již <a
href="https://www.root.cz/clanky/moonscript-jazyk-inspirovany-coffeescriptem-urceny-pro-ekosystem-jazyka-lua/">v&nbsp;úvodním
článku o programovacím jazyce Moonscript</a> jsme si řekli, že většina
konstrukcí v&nbsp;tomto jazyku je ve skutečnosti <i>hodnotou</i>, kterou je
možné dále zpracovat. Výjimkou není ani smyčka <strong>for</strong>
popř.&nbsp;smyčka typu <strong>for-each</strong>, která vrací hodnoty získané
v&nbsp;každé iteraci. Můžeme si to snadno ukázat na příkladu počítané smyčky,
která vrátí deset hodnot získaných vyhodnocením zlomků 1/1, 1/2, 1/3 až 1/10.
Povšimněte si, že tělo smyčky je tvořeno pouze jediným výrazem:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
r = <strong>for i=1,10 1/i</strong>
&nbsp;
for item in *r do print item
</pre>

<p>Zdánlivě triviální jednořádkový zápis je transformován do deseti řádků
v&nbsp;jazyce Lua, což ukazuje, jak sémanticky silný Moonscript je:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
<strong>local r</strong>
<strong>do</strong>
  <strong>local _accum_0 = { }</strong>
  <strong>local _len_0 = 1</strong>
  <strong>for i = 1, 10 do</strong>
    <strong>_accum_0[_len_0] = 1 / i</strong>
    <strong>_len_0 = _len_0 + 1</strong>
  <strong>end</strong>
  <strong>r = _accum_0</strong>
<strong>end</strong>
for _index_0 = 1, #r do
  local item = r[_index_0]
  print(item)
end
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Realizace filtru programovou smyčkou typu <strong>for</strong></h2>

<p>V&nbsp;programových smyčkách implementovaných (nejenom) v&nbsp;jazyce
Moonscript je možné použít konstrukci <strong>continue</strong>, která slouží
k&nbsp;předčasnému ukončení jedné iterace. V&nbsp;případě, že je programová
smyčka <strong>for</strong> použita jako hodnota, má <strong>continue</strong>
ještě jeden důležitý význam &ndash; prvek, který by měl být v&nbsp;rámci dané
iterace vypočítán, není ve výsledku použit. Toto chování je možné využít při
tvorbě filtrů &ndash; ve smyčce generujeme hodnoty prvků seznamu nebo slovníku,
ovšem pro některé vstupní hodnoty budou prvky vyfiltrovány:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
r = <strong>for i=1,10</strong>
  if i &gt;= 4 and i &lt;= 7 <strong>continue</strong>
  <strong>i*2</strong>
&nbsp;
for item in *r do print item 
</pre>

<p>Předchozí zápis vytvoří seznam s&nbsp;celočíselnými hodnotami 1 až 10, ovšem
bez prvků s&nbsp;hodnotami 4, 5, 6 a 7:</p>

<pre>
1
2
3
8
9
10
</pre>

<p>A takto bude vypadat transpřeklad předchozího skriptu do programovacího
jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local r
do
  local _accum_0 = { }
  local _len_0 = 1
  for i = 1, 10 do
    local _continue_0 = false
    repeat
      if i &gt;= 4 and i &lt;= 7 then
        _continue_0 = true
        break
      end
      local _value_0 = i * 2
      _accum_0[_len_0] = _value_0
      _len_0 = _len_0 + 1
      _continue_0 = true
    until true
    if not _continue_0 then
      break
    end
  end
  r = _accum_0
end
for _index_0 = 1, #r do
  local item = r[_index_0]
  print(item)
end
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vrácení hodnot generovaných smyčkou <strong>for</strong> z&nbsp;funkce</h2>

<p>Víme již, že smyčky <strong>for</strong> mohou vracet hodnotu &ndash; seznam
nebo slovník. Také již víme, že poslední výraz ve funkci je implicitně použit
jako návratová hodnota dané funkce. Obě zmíněné vlastnosti by měly vést
k&nbsp;tomu, že pokud v&nbsp;těle funkce použijeme smyčku <strong>for</strong>,
bude z&nbsp;funkce implicitně vrácen seznam nebo slovník získaný
z&nbsp;iteračních cyklů této smyčky. Ve skutečnosti tomu tak ovšem není a to
z&nbsp;toho důvodu, že tvorba návratové hodnoty je relativně složitá/pomalá a
mnohdy se tato hodnota zrovna v&nbsp;případě smyček nepoužije (smyčky bývají
použity <i>imperativně</i>). Proto je nutné v&nbsp;tomto případě (a jedná se o
jediný případ) explicitně použít konstrukci <strong>return</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
f1 = -&gt; <strong>for i=1,10 do i</strong>
f2 = -&gt; <strong>return for i=1,10 do i</strong>
&nbsp;
print f1!
print f2!
</pre>

<p>Povšimněte si, jak zcela odlišným způsobem jsou transpilovány funkce
<strong>f1</strong> a <strong>f2</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local f1
f1 = function()
  for i = 1, 10 do
    local _ = i
  end
end
local f2
f2 = function()
  return (function()
    local _accum_0 = { }
    local _len_0 = 1
    for i = 1, 10 do
      _accum_0[_len_0] = i
      _len_0 = _len_0 + 1
    end
    return _accum_0
  end)()
end
print(f1())
return print(f2())
</pre>

<p><div class="rs-tip-major">Poznámka: to znamená, že volání <strong>print
f1!</strong> vytiskne hodnotu <strong>nil</strong>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Nepatrně zjednodušený zápis programové smyčky typu <strong>while</strong></h2>

<p>Jen pro úplnost se zmiňme o nepatrně jednodušším způsobu zápisu programové
smyčky typu <strong>while</strong>. V&nbsp;jazyce Moonscript není nutné
používat klíčové slovo <strong>do</strong> ani smyčku ukončovat klíčovým slovem
<strong>end</strong>, takže je možné použít následující styl zápisu:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
i = 0
<strong>while i &lt;= 10</strong>
  print i
  i += 1
</pre>

<p>Transpřeklad tohoto skriptu do programovacího jazyka Lua je v&nbsp;tomto
případě přímočarý:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local i = 0
while i &lt;= 10 do
  print(i)
  i = i + 1
end
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Objektově orientované programování v&nbsp;jazyce Moonscript</h2>

<p>Minule jsme se zmínili o způsobu tvorby skriptů používajících OOP techniky
přímo v&nbsp;jazyce Lua. Připomeňme si, že samotný programovací jazyk Lua sice
nenabízí pro deklaraci tříd a objektů vlastní syntaxi, ale to neznamená, že by
objektově orientované programování nebylo možné. Objekty je totiž možné
vytvářet buď na základě uzávěrů (<i>closures</i>) při jejichž použití jsou
atributy i metody objektu &bdquo;zabaleny&ldquo; právě v&nbsp;uzávěru (ostatně
stejný princip je využitý i v&nbsp;některých funkcionálních jazycích), a/nebo
lze využít druhého způsobu založeného na asociativních polích a
<i>metatabulkách</i> a <i>metametodách</i>. Tvorba objektů je pak ze
sémantického hlediska podobná technice používané v&nbsp;původním JavaScriptu,
který byl inspirovaný jazykem Self a takzvaným prototypováním.</p>

<p>Ukazovali jsme si i příklad jednoduché třídy nazvané
<strong>Account</strong> s&nbsp;definicí atributu <strong>balance</strong>,
s&nbsp;konstruktorem a taktéž s&nbsp;dvojicí metod nazvaných
<strong>withdraw</strong> a <strong>deposit</strong> (každá přitom používá
nepatrně odlišný způsob zápisu):</p>

<pre>
<strong>Account = {balance = 0}</strong>
&nbsp;
function <strong>Account:new(o)</strong>
    <i>-- create object if user does not provide one</i>
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end
&nbsp;
function <strong>Account.withdraw(self, value)</strong>
    self.balance = self.balance - value
end
&nbsp;
function <strong>Account:deposit(value)</strong>
    self.balance = self.balance + value
end
&nbsp;
local a = Account:new{balance=0}
local b = Account:new{balance=50}
&nbsp;
print("account A", a.balance)
print("account B", b.balance)
&nbsp;
a:withdraw(100.00)
b:withdraw(100.00)
&nbsp;
print("account A", a.balance)
print("account B", b.balance)
&nbsp;
a:deposit(200.00)
b:deposit(200.00)
&nbsp;
print("account A", a.balance)
print("account B", b.balance)
</pre>

<p>Předchozí příklad využíval triku spočívajícího v&nbsp;modifikaci
metatabulky. Programovací jazyk Moonscript naproti tomu zavádí zcela odlišný
způsob deklarace tříd i metod; liší se i přístup k&nbsp;atributům a volání
metod.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Deklarace třídy s&nbsp;konstruktorem, přístup k&nbsp;atributům objektu</h2>

<p>Ukažme si nyní, jak se deklarují třídy v&nbsp;jazyce Moonscript. Vytvoříme
třídu pojmenovanou <strong>Customer</strong>. Tato třída bude mít konstruktor,
který nastaví (automaticky vytvořené) atributy <strong>name</strong> a
<strong>surname</strong> na hodnoty &bdquo;N/A&ldquo;. Dále zavoláme
konstruktor, čímž se vytvoří instance této třídy a zobrazíme hodnoty obou
atributů objektu:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
<strong>class Customer</strong>
  <strong>new: =&gt;</strong>
    self.name = "N/A"
    self.surname = "N/A"
&nbsp;
c = <strong>Customer!</strong>
print <strong>c.name</strong>
print <strong>c.surname</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že konstruktor je volán
jménem třídy a vzhledem k&nbsp;tomu, že nemá žádné parametry, je nutné uvést
při jeho volání vykřičník.</div></p>

<p>Překlad tohoto demonstračního příkladu do jazyka Lua je již dosti dlouhý
&ndash; zde je jasně patrná větší úroveň abstrakce Moonscriptu:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local Customer
do
  local _class_0
  local _base_0 = { }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self)
      self.name = "N/A"
      self.surname = "N/A"
    end,
    __base = _base_0,
    __name = "Customer"
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  _base_0.__class = _class_0
  Customer = _class_0
end
local c = Customer()
print(c.name)
return print(c.surname)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zjednodušený přístup k&nbsp;atributům objektů pomocí operátoru <strong>@</strong></h2>

<p>V&nbsp;předchozím demonstračním příkladu se k&nbsp;atributům objektu
přistupovalo s&nbsp;využitím standardní tečkové notace, tedy následovně:</p>

<pre>
<strong>new: =&gt;</strong>
  self.name = "N/A"
  self.surname = "N/A"
</pre>

<p>Uvnitř deklarace třídy popř.&nbsp;deklarace metod je však možné použít i
nový operátor <strong>@</strong>, který nevyžaduje zápis
<strong>self.</strong>. Jedná se o nepovinnou syntaxi, která je však užitečná,
neboť přístup k&nbsp;atributu opticky zvýrazní. Následuje příklad použití
tohoto &bdquo;syntaktického cukru&ldquo;:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
<strong>class Customer</strong>
  <strong>new: =&gt;</strong>
    @name = "N/A"
    @surname = "N/A"
&nbsp;
c = Customer!
print c.name
print c.surname
</pre>

<p>Transpřeklad do jazyka Lua je naprosto shodný s&nbsp;předchozím příkladem, o
čemž se můžeme velmi snadno přesvědčit:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local Customer
do
  local _class_0
  local _base_0 = { }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self)
      self.name = "N/A"
      self.surname = "N/A"
    end,
    __base = _base_0,
    __name = "Customer"
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  _base_0.__class = _class_0
  Customer = _class_0
end
local c = Customer()
print(c.name)
return print(c.surname)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Volání metod objektu s&nbsp;využitím operátoru <strong>\</strong></h2>

<p>Dostáváme se k&nbsp;poněkud kontroverzní syntaxi použité v&nbsp;jazyku
Moonscript. Jedná se o zápis volání metod. Nejdříve si ukažme způsob deklarace
běžných metod:</p>

<pre>
set_name: (name) =&gt;
  @name = name
&nbsp;
set_surname: (surname) =&gt;
  @surname = surname
</pre>

<p>Tyto metody se nevolají &bdquo;tečkovou notací&ldquo;, ale s&nbsp;využitím
operátoru <strong>\</strong>:</p>

<pre>
c = Customer!
&nbsp;
<strong>c\set_name "Foo"</strong>
<strong>c\set_surname "Bar"</strong>
</pre>

<p>Úplný skript s&nbsp;deklarací třídy s&nbsp;dvojicí metod může vypadat
následovně:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
class Customer
  new: =&gt;
    @name = "N/A"
    @surname = "N/A"
&nbsp;
  set_name: (name) =&gt;
    @name = name
&nbsp;
  set_surname: (surname) =&gt;
    @surname = surname
&nbsp;
c = Customer!
&nbsp;
print c.name
print c.surname
&nbsp;
c\set_name "Foo"
c\set_surname "Bar"
&nbsp;
print c.name
print c.surname
</pre>

<p>Z&nbsp;transpilovaného kódu je patrné, že se volání metod přeložilo na
<strong>c:set_name(...)</strong> a <strong>c:set_surname(...)</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local Customer
do
  local _class_0
  local _base_0 = {
    set_name = function(self, name)
      self.name = name
    end,
    set_surname = function(self, surname)
      self.surname = surname
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self)
      self.name = "N/A"
      self.surname = "N/A"
    end,
    __base = _base_0,
    __name = "Customer"
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  _base_0.__class = _class_0
  Customer = _class_0
end
local c = Customer()
print(c.name)
print(c.surname)
<strong>c:set_name("Foo")</strong>
<strong>c:set_surname("Bar")</strong>
print(c.name)
return print(c.surname)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Metody bez parametrů a s&nbsp;jednopříkazovým tělem</h2>

<p>Typickým příkladem metody bez parametrů jsou <i>gettery</i> (pokud je tedy
vůbec budete chtít používat). Takové metody nemají žádné parametry a většinou
obsahují pouze konstrukci určenou pro vrácení hodnoty atributu. Takové metody
je možné v&nbsp;jazyce Moonscript psát skutečně minimalisticky:</p>

<pre>
get_name: =&gt;
  @name
&nbsp;
get_surname: =&gt;
  @surname
</pre>

<p>Pochopitelně je možné zvolit i zápis celé metody na jediném řádku:</p>

<pre>
get_name: =&gt; @name
&nbsp;
get_surname: =&gt; @surname
</pre>

<p>Následuje příklad použití takto deklarovaných metod:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
class Customer
  new: =&gt;
    @name = "N/A"
    @surname = "N/A"
&nbsp;
  set_name: (name) =&gt;
    @name = name
&nbsp;
  set_surname: (surname) =&gt;
    @surname = surname
&nbsp;
  <strong>get_name: =&gt;</strong>
    <strong>@name</strong>
&nbsp;
  <strong>get_surname: =&gt;</strong>
    <strong>@surname</strong>
&nbsp;
c = Customer!
&nbsp;
<strong>print c\get_name!</strong>
<strong>print c\get_surname!</strong>
&nbsp;
c\set_name "Foo"
c\set_surname "Bar"
&nbsp;
<strong>print c\get_name!</strong>
<strong>print c\get_surname!</strong>
</pre>

<p>Transpřeklad do programovacího jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local Customer
do
  local _class_0
  local _base_0 = {
    set_name = function(self, name)
      self.name = name
    end,
    set_surname = function(self, surname)
      self.surname = surname
    end,
    get_name = function(self)
      return self.name
    end,
    get_surname = function(self)
      return self.surname
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self)
      self.name = "N/A"
      self.surname = "N/A"
    end,
    __base = _base_0,
    __name = "Customer"
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  _base_0.__class = _class_0
  Customer = _class_0
end
local c = Customer()
print(c:get_name())
print(c:get_surname())
c:set_name("Foo")
c:set_surname("Bar")
print(c:get_name())
return print(c:get_surname())
</pre>

<p><div class="rs-tip-major">Poznámka: opět můžeme vidět dosti podstatně
odlišné úrovně abstrakce.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Předání parametrů konstruktoru objektu</h2>

<p>Konstruktor, který je realizován metodou nazvanou <strong>new</strong>, se
chová podobně jako běžná metoda, tedy až na jediný rozdíl &ndash; vrací
instanci právě vytvořeného objektu a nikoli uživatelem specifikovanou hodnotu.
Ovšem v&nbsp;jiných ohledech se jedná o běžnou metodu, která tedy může
akceptovat parametry. V&nbsp;následující ukázce je konstruktor upraven tak, aby
akceptoval dva parametry. Taktéž je ukázán způsob volání takového
konstruktoru:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
class Customer
  <strong>new: (name, surname) =&gt;</strong>
    <strong>@name = name</strong>
    <strong>@surname = surname</strong>
&nbsp;
  set_name: (name) =&gt;
    @name = name
&nbsp;
  set_surname: (surname) =&gt;
    @surname = surname
&nbsp;
  get_name: =&gt;
    @name
&nbsp;
  get_surname: =&gt;
    @surname
&nbsp;
<strong>c = Customer "foo", "bar"</strong>
&nbsp;
print c\get_name!
print c\get_surname!
&nbsp;
c\set_name "FOO"
c\set_surname "BAR"
&nbsp;
print c\get_name!
print c\get_surname!
</pre>

<p>Transpilace tohoto krátkého skriptu do jazyka Lua je již dosti
sáhodlouhá:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local Customer
do
  local _class_0
  local _base_0 = {
    set_name = function(self, name)
      self.name = name
    end,
    set_surname = function(self, surname)
      self.surname = surname
    end,
    get_name = function(self)
      return self.name
    end,
    get_surname = function(self)
      return self.surname
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self, name, surname)
      self.name = name
      self.surname = surname
    end,
    __base = _base_0,
    __name = "Customer"
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  _base_0.__class = _class_0
  Customer = _class_0
end
local c = Customer("foo", "bar")
print(c:get_name())
print(c:get_surname())
c:set_name("FOO")
c:set_surname("BAR")
print(c:get_name())
return print(c:get_surname())
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Volání metod přímo z&nbsp;konstruktoru</h2>

<p>Často je nutné z&nbsp;konstruktoru nebo z&nbsp;jiných metod volat další
metody toho samého objektu. Vzhledem k&nbsp;tomu, že Moonscript je jazykem
s&nbsp;podporou běžných funkcí, je nutné nějakým způsobem odlišit volání běžné
funkce od volání metody (Java tento problém nemá). K&nbsp;tomuto účelu slouží
opět operátor <strong>@</strong>, kterým lze uvnitř nějaké metody (včetně
konstruktoru) zajistit volání metody jiné. Pokud tedy budeme chtít
z&nbsp;konstruktoru <strong>new</strong> volat settery, lze to zajistit
jednoduše:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
class Customer
  new: (name, surname) =&gt;
    <strong>@set_name(name)</strong>
    <strong>@set_surname(surname)</strong>
&nbsp;
  set_name: (name) =&gt;
    @name = name
&nbsp;
  set_surname: (surname) =&gt;
    @surname = surname
&nbsp;
  get_name: =&gt;
    @name
&nbsp;
  get_surname: =&gt;
    @surname
&nbsp;
c = Customer "foo", "bar"
&nbsp;
print c\get_name!
print c\get_surname!
&nbsp;
c\set_name "FOO"
c\set_surname "BAR"
&nbsp;
print c\get_name!
print c\get_surname!
</pre>

<p>S&nbsp;tímto překladem do jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local Customer
do
  local _class_0
  local _base_0 = {
    set_name = function(self, name)
      self.name = name
    end,
    set_surname = function(self, surname)
      self.surname = surname
    end,
    get_name = function(self)
      return self.name
    end,
    get_surname = function(self)
      return self.surname
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self, name, surname)
      self:set_name(name)
      return self:set_surname(surname)
    end,
    __base = _base_0,
    __name = "Customer"
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  _base_0.__class = _class_0
  Customer = _class_0
end
local c = Customer("foo", "bar")
print(c:get_name())
print(c:get_surname())
c:set_name("FOO")
c:set_surname("BAR")
print(c:get_name())
return print(c:get_surname())
</pre>

<p>Samozřejmě není nutné při volání metod používat kulaté závorky:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
class Customer
  new: (name, surname) =&gt;
    <strong>@set_name name</strong>
    <strong>@set_surname surname</strong>
&nbsp;
  set_name: (name) =&gt;
    @name = name
&nbsp;
  set_surname: (surname) =&gt;
    @surname = surname
&nbsp;
  get_name: =&gt;
    @name
&nbsp;
  get_surname: =&gt;
    @surname
&nbsp;
c = Customer "foo", "bar"
&nbsp;
print c\get_name!
print c\get_surname!
&nbsp;
c\set_name "FOO"
c\set_surname "BAR"
&nbsp;
print c\get_name!
print c\get_surname!
</pre>

<p>Překlad bude naprosto totožný s&nbsp;předchozím příkladem:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local Customer
do
  local _class_0
  local _base_0 = {
    set_name = function(self, name)
      self.name = name
    end,
    set_surname = function(self, surname)
      self.surname = surname
    end,
    get_name = function(self)
      return self.name
    end,
    get_surname = function(self)
      return self.surname
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self, name, surname)
      self:set_name(name)
      return self:set_surname(surname)
    end,
    __base = _base_0,
    __name = "Customer"
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  _base_0.__class = _class_0
  Customer = _class_0
end
local c = Customer("foo", "bar")
print(c:get_name())
print(c:get_surname())
c:set_name("FOO")
c:set_surname("BAR")
print(c:get_name())
return print(c:get_surname())
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Použití programové konstrukce <strong>with</strong></h2>

<p>Pokud se v&nbsp;nějakém bloku kódu často volají metody určitého objektu, lze
tento blok zjednodušit použitím programové konstrukce <strong>with</strong>.
Namísto:</p>

<pre>
c = Customer "foo", "bar"
print c\get_name!
print c\get_surname!
c\set_name "FOO"
c\set_surname "BAR"
print c\get_name!
print c\get_surname!
</pre>

<p>lze psát:</p>

<pre>
<strong>with Customer "foo", "bar"</strong>
  print \get_name!
  print \get_surname!
  \set_name "FOO"
  \set_surname "BAR"
  print \get_name!
  print \get_surname!
</pre>

<p>Opět se pochopitelně podíváme na ucelený spustitelný příklad:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
class Customer
  new: (name, surname) =&gt;
    @set_name name
    @set_surname surname
&nbsp;
  set_name: (name) =&gt;
    @name = name
&nbsp;
  set_surname: (surname) =&gt;
    @surname = surname
&nbsp;
  get_name: =&gt;
    @name
&nbsp;
  get_surname: =&gt;
    @surname
&nbsp;
<strong>with Customer "foo", "bar"</strong>
  print \get_name!
  print \get_surname!
  \set_name "FOO"
  \set_surname "BAR"
  print \get_name!
  print \get_surname!
</pre>

<p>I na způsob jeho transpilace do programovacího jazyka Lua:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local Customer
do
  local _class_0
  local _base_0 = {
    set_name = function(self, name)
      self.name = name
    end,
    set_surname = function(self, surname)
      self.surname = surname
    end,
    get_name = function(self)
      return self.name
    end,
    get_surname = function(self)
      return self.surname
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self, name, surname)
      self:set_name(name)
      return self:set_surname(surname)
    end,
    __base = _base_0,
    __name = "Customer"
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  _base_0.__class = _class_0
  Customer = _class_0
end
do
  local _with_0 = Customer("foo", "bar")
  print(_with_0:get_name())
  print(_with_0:get_surname())
  _with_0:set_name("FOO")
  _with_0:set_surname("BAR")
  print(_with_0:get_name())
  print(_with_0:get_surname())
  return _with_0
end
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Blok <strong>do</strong></h2>

<p>Blok <strong>do</strong> se v&nbsp;jazyce Moonscript používá prakticky
stejným způsobem jako v&nbsp;jazyce Lua, ovšem s&nbsp;tím (očekávaným)
rozdílem, že poslední výraz je z&nbsp;tohoto bloku vrácen a je ho možné
například přiřadit do proměnné:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
z = do
  x = 10
  y = 20
  x + y
&nbsp;
print z
</pre>

<p>Povšimněte si, že proměnné <strong>x</strong> a <strong>y</strong> jsou
lokální skutečně jen v&nbsp;rámci bloku <strong>do</strong>:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local z
do
  local x = 10
  local y = 20
  z = x + y
end
return print(z)
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Destructuring</h2>

<p>V&nbsp;některých programovacích jazycích se setkáme s&nbsp;termínem
<i>destructuring</i>, kterým se většinou označuje &bdquo;rozložení&ldquo;
nějaké datové struktury na jednotlivé prvky a přiřazení těchto položek do
proměnných (viz například jazyky Rust, Python či Clojure). Destructuring lze
využít i v&nbsp;Moonscriptu, a to například pro uložení položek z&nbsp;tabulky
do dvou proměnných:</p>

<pre>
foo = {1,2}
&nbsp;
{x,y} = foo
</pre>

<p>V&nbsp;praxi, například při práci s&nbsp;deserializovaným JSONem, se setkáme
i s&nbsp;destructuringem vnořených položek objektů:</p>

<pre>
obj = {
  numbers: {1,2,3,4}
}
&nbsp;
{numbers: {first, second}} = obj
</pre>

<p>V&nbsp;tomto případě jsme získali hodnoty prvních dvou prvků z&nbsp;vnořené
tabulky <strong>numbers</strong> a uložili jsme je do proměnných
<strong>first</strong> a <strong>second</strong>.</p>

<p>Celý skript ukazující dvě možnosti destructuringu, lze v&nbsp;Moonscriptu
zapsat následovně:</p>

<pre>
<i>--</i>
<i>-- Skript zapsaný v jazyce Moonscript</i>
<i>--</i>
&nbsp;
foo = {1,2}
&nbsp;
{x,y} = foo
print x, y
&nbsp;
obj = {
  numbers: {1,2,3,4}
}
&nbsp;
{numbers: {first, second}} = obj
print first, second
</pre>

<p>Z&nbsp;transpilovaného kódu je patrné, jak je destructuring realizován:</p>

<pre>
<i>--</i>
<i>-- Skript transpilovaný do jazyka Lua</i>
<i>--</i>
&nbsp;
local foo = {
  1,
  2
}
local x, y
x, y = foo[1], foo[2]
print(x, y)
local obj = {
  numbers = {
    1,
    2,
    3,
    4
  }
}
local first, second
first, second = obj.numbers[1], obj.numbers[2]
return print(first, second)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: zápis řezu (slice) v&nbsp;různých programovacích jazycích</h2>

<p>Řezy neboli <i>slices</i> jsou podporovány v&nbsp;mnoha programovacích
jazycích. Syntaxe jejich zápisu se liší, stejně jako chápání (sémantika)
horního indexu (tedy zda má být prvek s&nbsp;tímto indexem součástí řezu či
nikoli). Následující tabulka ukazuje zápis řezů ve vybraných programovacích
jazycích:</p>

<table>
<tr><th>Syntaxe zápisu</th><th>Programovací jazyk(y)</th></tr>
<tr><td>name[první,poslední]</td><td>Moonscript</td></tr>
<tr><td>name[první:poslední]</td><td>ALGOL 68, Julia</td></tr>
<tr><td>name[první:poslední+1:krok]</td><td>Python</td></tr>
<tr><td>name[první:poslední+1]</td><td>Go</td></tr>
<tr><td>name[první..poslední]</td><td>Pascal, Object Pascal, Delphi, Nim</td></tr>
<tr><td>$name[první..poslední]</td><td>Windows PowerShell</td></tr>
<tr><td>@name[první..poslední]</td><td>Perl</td></tr>
<tr><td>name[první..poslední]</td><td>Ruby</td></tr>
<tr><td>name[první...poslední+1]</td><td>Ruby</td></tr>
<tr><td>name[první, délka]</td><td>Ruby</td></tr>
<tr><td>name(první..poslední)</td><td>Ada</td></tr>
<tr><td>name(první:poslední)</td><td>Fortran, GNU Octave, MATLAB</td></tr>
<tr><td>name[[první;;poslední;;krok]]</td><td>Mathematica, Wolfram Language</td></tr>
<tr><td>name.slice(první, poslední+1)</td><td>Haxe, JavaScript, Scala</td></tr>
<tr><td>name[první..&lt;poslední+1]</td><td>Swift</td></tr>
<tr><td>name[první...poslední]</td><td>Swift</td></tr>
<tr><td>name[první..poslední+1]</td><td>D, C#</td></tr>
<tr><td>name[první..poslední+1]</td><td>Rust</td></tr>
<tr><td>name[první..=poslední]</td><td>Rust</td></tr>
<tr><td>name[první:poslední+1]</td><td>Cobra</td></tr>
<tr><td>name.[první..krok..poslední]</td><td>F#</td></tr>
<tr><td>array_slice(proměnná, první, délka)</td><td>PHP</td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>


<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis příkladu</th><th>Adresa (zdrojový kód)</th></tr>
<tr><td> 1</td><td>01_hello_world.lua</td><td>tradiční program typu &bdquo;Hello, world!&ldquo; napsaný v&nbsp;Lue</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/01_hello_world.lua">https://github.com/tisnik/moonscript-examples/blob/master/01_hello_world.lua</a></td></tr>
<tr><td> 2</td><td>02_hello_world.lua</td><td>okolo jediného parametru funkce není zapotřebí psát závorky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/02_hello_world.lua">https://github.com/tisnik/moonscript-examples/blob/master/02_hello_world.lua</a></td></tr>
<tr><td> 3</td><td>03_hello_world.moon</td><td>tradiční program typu &bdquo;Hello, world!&ldquo; napsaný v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.moon">https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.moon</a></td></tr>
<tr><td> 4</td><td>03_hello_world.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.lua">https://github.com/tisnik/moonscript-examples/blob/master/03_hello_world.lua</a></td></tr>
<tr><td> 5</td><td>04_local_variable.moon</td><td>lokální proměnné v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.moon">https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.moon</a></td></tr>
<tr><td> 6</td><td>04_local_variable.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.lua">https://github.com/tisnik/moonscript-examples/blob/master/04_local_variable.lua</a></td></tr>
<tr><td> 7</td><td>05_local_variable.moon</td><td>opětovné přiřazení do lokální proměnné</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.moon">https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.moon</a></td></tr>
<tr><td> 8</td><td>05_local_variable.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.lua">https://github.com/tisnik/moonscript-examples/blob/master/05_local_variable.lua</a></td></tr>
<tr><td> 9</td><td>06_local_variable.moon</td><td>čtení z&nbsp;neexistující proměnné</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.moon">https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.moon</a></td></tr>
<tr><td>10</td><td>06_local_variable.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.lua">https://github.com/tisnik/moonscript-examples/blob/master/06_local_variable.lua</a></td></tr>
<tr><td>11</td><td>07_string_interpolation.moon</td><td>interpolace řetězců v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.moon">https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.moon</a></td></tr>
<tr><td>12</td><td>07_string_interpolation.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.lua">https://github.com/tisnik/moonscript-examples/blob/master/07_string_interpolation.lua</a></td></tr>
<tr><td>13</td><td>08_string_interpolation.moon</td><td>interpolace řetězců, složitější příklad v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.moon">https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.moon</a></td></tr>
<tr><td>14</td><td>08_string_interpolation.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.lua">https://github.com/tisnik/moonscript-examples/blob/master/08_string_interpolation.lua</a></td></tr>
<tr><td>15</td><td>09_string_interpolation.moon</td><td>zákaz interpolace řetězců v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.moon">https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.moon</a></td></tr>
<tr><td>16</td><td>09_string_interpolation.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.lua">https://github.com/tisnik/moonscript-examples/blob/master/09_string_interpolation.lua</a></td></tr>
<tr><td>17</td><td>10_multiline_string.moon</td><td>víceřádkové řetězce v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.moon">https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.moon</a></td></tr>
<tr><td>18</td><td>10_multiline_string.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.lua">https://github.com/tisnik/moonscript-examples/blob/master/10_multiline_string.lua</a></td></tr>
<tr><td>19</td><td>11_comparison_operator.moon</td><td>nový operátor pro test na nerovnost v&nbsp;Moonscriptu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.moon">https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.moon</a></td></tr>
<tr><td>20</td><td>11_comparison_operator.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.lua">https://github.com/tisnik/moonscript-examples/blob/master/11_comparison_operator.lua</a></td></tr>
<tr><td>21</td><td>12_simple_assignment.moon</td><td>operátor jednoduchého přiřazení</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.moon</a></td></tr>
<tr><td>22</td><td>12_simple_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/12_simple_assignment.lua</a></td></tr>
<tr><td>23</td><td>13_operator_assignment.moon</td><td>přiřazení zkombinované s&nbsp;aritmetickou operací</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.moon</a></td></tr>
<tr><td>24</td><td>13_operator_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/13_operator_assignment.lua</a></td></tr>
<tr><td>25</td><td>14_operator_assignment.moon</td><td>přiřazení zkombinované s&nbsp;připojením řetězce</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.moon</a></td></tr>
<tr><td>26</td><td>14_operator_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/14_operator_assignment.lua</a></td></tr>
<tr><td>27</td><td>15_operator_assignment.moon</td><td>přiřazení zkombinované s&nbsp;logickou operací</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.moon">https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.moon</a></td></tr>
<tr><td>28</td><td>15_operator_assignment.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.lua">https://github.com/tisnik/moonscript-examples/blob/master/15_operator_assignment.lua</a></td></tr>
<tr><td>29</td><td>16_function_parameters.moon</td><td>volání funkce bez parametrů, s&nbsp;jedním parametrem i více parametry</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.moon">https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.moon</a></td></tr>
<tr><td>30</td><td>16_function_parameters.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.lua">https://github.com/tisnik/moonscript-examples/blob/master/16_function_parameters.lua</a></td></tr>
<tr><td>31</td><td>17_function_no_parenthesis.moon</td><td>volání funkce bez použití kulatých závorek</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.moon">https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.moon</a></td></tr>
<tr><td>32</td><td>17_function_no_parenthesis.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.lua">https://github.com/tisnik/moonscript-examples/blob/master/17_function_no_parenthesis.lua</a></td></tr>
<tr><td>33</td><td>18_arrow_empty_function.moon</td><td>deklarace prázdné funkci s&nbsp;využitím operátoru šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.moon</a></td></tr>
<tr><td>34</td><td>18_arrow_empty_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/18_arrow_empty_function.lua</a></td></tr>
<tr><td>35</td><td>19_arrow_noarg_function.moon</td><td>deklarace funkce bez parametrů s&nbsp;využitím operátoru šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.moon</a></td></tr>
<tr><td>36</td><td>19_arrow_noarg_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/19_arrow_noarg_function.lua</a></td></tr>
<tr><td>37</td><td>20_arrow_noarg_larger_function.moon</td><td>delší funkce bez parametrů vytvořená s&nbsp;využitím operátoru šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.moon</a></td></tr>
<tr><td>38</td><td>20_arrow_noarg_larger_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/20_arrow_noarg_larger_function.lua</a></td></tr>
<tr><td>39</td><td>21_arrow_return_value.moon</td><td>funkce vracející jednu hodnotu vytvořená operátorem šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.moon">https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.moon</a></td></tr>
<tr><td>40</td><td>21_arrow_return_value.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.lua">https://github.com/tisnik/moonscript-examples/blob/master/21_arrow_return_value.lua</a></td></tr>
<tr><td>41</td><td>22_arrow_return_value.moon</td><td>návratová hodnota funkce bez nutnosti použití klíčového slova <strong>return</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.moon">https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.moon</a></td></tr>
<tr><td>42</td><td>22_arrow_return_value.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.lua">https://github.com/tisnik/moonscript-examples/blob/master/22_arrow_return_value.lua</a></td></tr>
<tr><td>43</td><td>23_arrow_function_parameters.moon</td><td>parametry funkce vytvořené operátorem šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.moon">https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.moon</a></td></tr>
<tr><td>44</td><td>23_arrow_function_parameters.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.lua">https://github.com/tisnik/moonscript-examples/blob/master/23_arrow_function_parameters.lua</a></td></tr>
<tr><td>45</td><td>24_arrow_multiple_return_values.moon</td><td>více návratových hodnot funkce</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.moon">https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.moon</a></td></tr>
<tr><td>46</td><td>24_arrow_multiple_return_values.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.lua">https://github.com/tisnik/moonscript-examples/blob/master/24_arrow_multiple_return_values.lua</a></td></tr>
<tr><td>47</td><td>25_arrow_default_arguments.moon</td><td>parametry s&nbsp;implicitní hodnotou</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.moon</a></td></tr>
<tr><td>48</td><td>25_arrow_default_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/25_arrow_default_arguments.lua</a></td></tr>
<tr><td>49</td><td>26_arrow_default_arguments.moon</td><td>způsob inicializace parametrů s&nbsp;implicitní hodnotou</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.moon</a></td></tr>
<tr><td>50</td><td>26_arrow_default_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/26_arrow_default_arguments.lua</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>51</td><td>27_arrow_function.moon</td><td>zopakování z&nbsp;minula &ndash; deklarace funkce operátorem šipky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/27_arrow_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/27_arrow_function.moon</a></td></tr>
<tr><td>52</td><td>27_arrow_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/27_arrow_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/27_arrow_function.lua</a></td></tr>
<tr><td>53</td><td>28_function_parenthesis.moon</td><td>funkce volaná v&nbsp;pozici parametru jiné funkce a problematika závorek</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/28_function_parenthesis.moon">https://github.com/tisnik/moonscript-examples/blob/master/28_function_parenthesis.moon</a></td></tr>
<tr><td>54</td><td>28_function_parenthesis.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/28_function_parenthesis.lua">https://github.com/tisnik/moonscript-examples/blob/master/28_function_parenthesis.lua</a></td></tr>
<tr><td>55</td><td>29_function_parenthesis.moon</td><td>funkce volaná v&nbsp;pozici parametru jiné funkce a problematika závorek</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/29_function_parenthesis.moon">https://github.com/tisnik/moonscript-examples/blob/master/29_function_parenthesis.moon</a></td></tr>
<tr><td>56</td><td>29_function_parenthesis.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/29_function_parenthesis.lua">https://github.com/tisnik/moonscript-examples/blob/master/29_function_parenthesis.lua</a></td></tr>
<tr><td>57</td><td>30_fat_arrow.moon</td><td>operátor &bdquo;tlusté šipky&ldquo;, funkce bez těla</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/30_fat_arrow.moon">https://github.com/tisnik/moonscript-examples/blob/master/30_fat_arrow.moon</a></td></tr>
<tr><td>58</td><td>30_fat_arrow.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/30_fat_arrow.lua">https://github.com/tisnik/moonscript-examples/blob/master/30_fat_arrow.lua</a></td></tr>
<tr><td>59</td><td>31_fat_arrow.moon</td><td>operátor &bdquo;tlusté šipky&ldquo;, funkce s&nbsp;parametrem a tělem</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/31_fat_arrow.moon">https://github.com/tisnik/moonscript-examples/blob/master/31_fat_arrow.moon</a></td></tr>
<tr><td>60</td><td>31_fat_arrow.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/31_fat_arrow.lua">https://github.com/tisnik/moonscript-examples/blob/master/31_fat_arrow.lua</a></td></tr>
<tr><td>61</td><td>32_fat_arrow.moon</td><td>operátor &bdquo;tlusté šipky&ldquo;, zjednodušený přístup k&nbsp;atributu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/32_fat_arrow.moon">https://github.com/tisnik/moonscript-examples/blob/master/32_fat_arrow.moon</a></td></tr>
<tr><td>62</td><td>32_fat_arrow.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/32_fat_arrow.lua">https://github.com/tisnik/moonscript-examples/blob/master/32_fat_arrow.lua</a></td></tr>
<tr><td>63</td><td>33_fat_arrow.moon</td><td>operátor &bdquo;tlusté šipky&ldquo;, zjednodušený přístup k&nbsp;atributu, výchozí hodnota parametru</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/33_fat_arrow.moon">https://github.com/tisnik/moonscript-examples/blob/master/33_fat_arrow.moon</a></td></tr>
<tr><td>64</td><td>33_fat_arrow.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/33_fat_arrow.lua">https://github.com/tisnik/moonscript-examples/blob/master/33_fat_arrow.lua</a></td></tr>
<tr><td>65</td><td>34_multiline_arguments.moon</td><td>funkce s&nbsp;velkým množstvím parametrů, zápis na jediném řádku</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/34_multiline_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/34_multiline_arguments.moon</a></td></tr>
<tr><td>66</td><td>34_multiline_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/34_multiline_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/34_multiline_arguments.lua</a></td></tr>
<tr><td>67</td><td>35_multiline_arguments.moon</td><td>funkce s&nbsp;velkým množstvím parametrů, zápis na více řádcích</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/35_multiline_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/35_multiline_arguments.moon</a></td></tr>
<tr><td>68</td><td>35_multiline_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/35_multiline_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/35_multiline_arguments.lua</a></td></tr>
<tr><td>69</td><td>36_multiline_arguments.moon</td><td>volání funkce s&nbsp;mnoha parametry, zápis na více řádcích</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/36_multiline_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/36_multiline_arguments.moon</a></td></tr>
<tr><td>70</td><td>36_multiline_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/36_multiline_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/36_multiline_arguments.lua</a></td></tr>
<tr><td>71</td><td>37_multiline_arguments.moon</td><td>problematika závorek při volání funkcí</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/37_multiline_arguments.moon">https://github.com/tisnik/moonscript-examples/blob/master/37_multiline_arguments.moon</a></td></tr>
<tr><td>72</td><td>37_multiline_arguments.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/37_multiline_arguments.lua">https://github.com/tisnik/moonscript-examples/blob/master/37_multiline_arguments.lua</a></td></tr>
<tr><td>73</td><td>38_list_comprehension.moon</td><td>generátorová notace seznamu, základní konstrukce</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/38_list_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/38_list_comprehension.moon</a></td></tr>
<tr><td>74</td><td>38_list_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/38_list_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/38_list_comprehension.lua</a></td></tr>
<tr><td>75</td><td>39_list_comprehension.moon</td><td>generátorová notace seznamu, náhrada <strong>ipairs</strong> za <strong>*</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/39_list_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/39_list_comprehension.moon</a></td></tr>
<tr><td>76</td><td>39_list_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/39_list_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/39_list_comprehension.lua</a></td></tr>
<tr><td>77</td><td>40_list_comprehension.moon</td><td>generátorová notace seznamu, podmínka <strong>when</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/40_list_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/40_list_comprehension.moon</a></td></tr>
<tr><td>78</td><td>40_list_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/40_list_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/40_list_comprehension.lua</a></td></tr>
<tr><td>79</td><td>41_list_comprehension.moon</td><td>generátorová notace seznamu, kombinace předchozích možností</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/41_list_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/41_list_comprehension.moon</a></td></tr>
<tr><td>80</td><td>41_list_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/41_list_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/41_list_comprehension.lua</a></td></tr>
<tr><td>81</td><td>42_numeric_comprehension.moon</td><td>&bdquo;numerická&ldquo; generátorová notace seznamu, základní varianta</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/42_numeric_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/42_numeric_comprehension.moon</a></td></tr>
<tr><td>82</td><td>42_numeric_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/42_numeric_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/42_numeric_comprehension.lua</a></td></tr>
<tr><td>83</td><td>43_numeric_comprehension.moon</td><td>&bdquo;numerická&ldquo; generátorová notace seznamu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/43_numeric_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/43_numeric_comprehension.moon</a></td></tr>
<tr><td>84</td><td>43_numeric_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/43_numeric_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/43_numeric_comprehension.lua</a></td></tr>
<tr><td>85</td><td>44_table_comprehension.moon</td><td>generátorová notace tabulky</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/44_table_comprehension.moon">https://github.com/tisnik/moonscript-examples/blob/master/44_table_comprehension.moon</a></td></tr>
<tr><td>86</td><td>44_table_comprehension.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/44_table_comprehension.lua">https://github.com/tisnik/moonscript-examples/blob/master/44_table_comprehension.lua</a></td></tr>
<tr><td>87</td><td>45_slicing.moon</td><td>slicing prováděný v&nbsp;konstrukci generátorové notace seznamu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/45_slicing.moon">https://github.com/tisnik/moonscript-examples/blob/master/45_slicing.moon</a></td></tr>
<tr><td>88</td><td>45_slicing.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/45_slicing.lua">https://github.com/tisnik/moonscript-examples/blob/master/45_slicing.lua</a></td></tr>
<tr><td>89</td><td>46_slicing.moon</td><td>slicing prováděný v&nbsp;konstrukci generátorové notace seznamu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/46_slicing.moon">https://github.com/tisnik/moonscript-examples/blob/master/46_slicing.moon</a></td></tr>
<tr><td>90</td><td>46_slicing.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/46_slicing.lua">https://github.com/tisnik/moonscript-examples/blob/master/46_slicing.lua</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 91</td><td>47_for_slicing.moon</td><td>specifikace řezu tabulkou v&nbsp;programové smyčce <strong>for-each</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/47_for_slicing.moon">https://github.com/tisnik/moonscript-examples/blob/master/47_for_slicing.moon</a></td></tr>
<tr><td> 92</td><td>47_for_slicing.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/47_for_slicing.lua">https://github.com/tisnik/moonscript-examples/blob/master/47_for_slicing.lua</a></td></tr>
<tr><td> 93</td><td>48_for_slicing.moon</td><td>řez tabulkou v&nbsp;programové smyčce <strong>for-each</strong> bez uvedení dolního indexu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/48_for_slicing.moon">https://github.com/tisnik/moonscript-examples/blob/master/48_for_slicing.moon</a></td></tr>
<tr><td> 94</td><td>48_for_slicing.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/48_for_slicing.lua">https://github.com/tisnik/moonscript-examples/blob/master/48_for_slicing.lua</a></td></tr>
<tr><td> 95</td><td>49_for_slicing.moon</td><td>řez tabulkou v&nbsp;programové smyčce <strong>for-each</strong> bez uvedení horního indexu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/49_for_slicing.moon">https://github.com/tisnik/moonscript-examples/blob/master/49_for_slicing.moon</a></td></tr>
<tr><td> 96</td><td>49_for_slicing.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/49_for_slicing.lua">https://github.com/tisnik/moonscript-examples/blob/master/49_for_slicing.lua</a></td></tr>
<tr><td> 97</td><td>50_for_slicing.moon</td><td>řez tabulkou, vliv použití záporného horního indexu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/50_for_slicing.moon">https://github.com/tisnik/moonscript-examples/blob/master/50_for_slicing.moon</a></td></tr>
<tr><td> 98</td><td>50_for_slicing.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/50_for_slicing.lua">https://github.com/tisnik/moonscript-examples/blob/master/50_for_slicing.lua</a></td></tr>
<tr><td> 99</td><td>51_for_slicing.moon</td><td>krok specifikovaný při řezu tabulkou</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/51_for_slicing.moon">https://github.com/tisnik/moonscript-examples/blob/master/51_for_slicing.moon</a></td></tr>
<tr><td>100</td><td>51_for_slicing.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/51_for_slicing.lua">https://github.com/tisnik/moonscript-examples/blob/master/51_for_slicing.lua</a></td></tr>
<tr><td>101</td><td>52_for_oneline.moon</td><td>programová smyčka typu <strong>for-each</strong> zapsaná na jednom programovém řádku</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/52_for_oneline.moon">https://github.com/tisnik/moonscript-examples/blob/master/52_for_oneline.moon</a></td></tr>
<tr><td>102</td><td>52_for_oneline.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/52_for_oneline.lua">https://github.com/tisnik/moonscript-examples/blob/master/52_for_oneline.lua</a></td></tr>
<tr><td>103</td><td>53_for_as_value.moon</td><td>počítaná programová smyčka typu <strong>for</strong> ve funkci hodnoty</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/53_for_as_value.moon">https://github.com/tisnik/moonscript-examples/blob/master/53_for_as_value.moon</a></td></tr>
<tr><td>104</td><td>53_for_as_value.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/53_for_as_value.lua">https://github.com/tisnik/moonscript-examples/blob/master/53_for_as_value.lua</a></td></tr>
<tr><td>105</td><td>54_for_filter.moon</td><td>realizace filtru programovou smyčkou typu <strong>for</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/54_for_filter.moon">https://github.com/tisnik/moonscript-examples/blob/master/54_for_filter.moon</a></td></tr>
<tr><td>106</td><td>54_for_filter.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/54_for_filter.lua">https://github.com/tisnik/moonscript-examples/blob/master/54_for_filter.lua</a></td></tr>
<tr><td>107</td><td>55_for_from_function.moon</td><td>vrácení hodnot(y) generovaných smyčkou <strong>for</strong> z&nbsp;funkce</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/55_for_from_function.moon">https://github.com/tisnik/moonscript-examples/blob/master/55_for_from_function.moon</a></td></tr>
<tr><td>108</td><td>55_for_from_function.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/55_for_from_function.lua">https://github.com/tisnik/moonscript-examples/blob/master/55_for_from_function.lua</a></td></tr>
<tr><td>109</td><td>56_while.moon</td><td>nepatrně zjednodušený zápis programové smyčky typu <strong>while</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/56_while.moon">https://github.com/tisnik/moonscript-examples/blob/master/56_while.moon</a></td></tr>
<tr><td>110</td><td>56_while.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/56_while.lua">https://github.com/tisnik/moonscript-examples/blob/master/56_while.lua</a></td></tr>
<tr><td>111</td><td>57_simple_class.moon</td><td>deklarace třídy s&nbsp;konstruktorem</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/57_simple_class.moon">https://github.com/tisnik/moonscript-examples/blob/master/57_simple_class.moon</a></td></tr>
<tr><td>112</td><td>57_simple_class.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/57_simple_class.lua">https://github.com/tisnik/moonscript-examples/blob/master/57_simple_class.lua</a></td></tr>
<tr><td>113</td><td>58_attribute_operator.moon</td><td>zjednodušený přístup k&nbsp;atributům objektů pomocí operátoru <strong>@</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/58_attribute_operator.moon">https://github.com/tisnik/moonscript-examples/blob/master/58_attribute_operator.moon</a></td></tr>
<tr><td>114</td><td>58_attribute_operator.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/58_attribute_operator.lua">https://github.com/tisnik/moonscript-examples/blob/master/58_attribute_operator.lua</a></td></tr>
<tr><td>115</td><td>59_methods.moon</td><td>volání metod objektu s&nbsp;využitím operátoru <strong>\</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/59_methods.moon">https://github.com/tisnik/moonscript-examples/blob/master/59_methods.moon</a></td></tr>
<tr><td>116</td><td>59_methods.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/59_methods.lua">https://github.com/tisnik/moonscript-examples/blob/master/59_methods.lua</a></td></tr>
<tr><td>117</td><td>60_methods.moon</td><td>metody bez parametrů a s&nbsp;jednopříkazovým tělem</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/60_methods.moon">https://github.com/tisnik/moonscript-examples/blob/master/60_methods.moon</a></td></tr>
<tr><td>118</td><td>60_methods.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/60_methods.lua">https://github.com/tisnik/moonscript-examples/blob/master/60_methods.lua</a></td></tr>
<tr><td>119</td><td>61_constructor.moon</td><td>předání parametrů konstruktoru objektu</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/61_constructor.moon">https://github.com/tisnik/moonscript-examples/blob/master/61_constructor.moon</a></td></tr>
<tr><td>120</td><td>61_constructor.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/61_constructor.lua">https://github.com/tisnik/moonscript-examples/blob/master/61_constructor.lua</a></td></tr>
<tr><td>121</td><td>62_constructor.moon</td><td>volání metod přímo z&nbsp;konstruktoru</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/62_constructor.moon">https://github.com/tisnik/moonscript-examples/blob/master/62_constructor.moon</a></td></tr>
<tr><td>122</td><td>62_constructor.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/62_constructor.lua">https://github.com/tisnik/moonscript-examples/blob/master/62_constructor.lua</a></td></tr>
<tr><td>123</td><td>63_constructor.moon</td><td>zjednodušený zápis bez závorek</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/63_constructor.moon">https://github.com/tisnik/moonscript-examples/blob/master/63_constructor.moon</a></td></tr>
<tr><td>124</td><td>63_constructor.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/63_constructor.lua">https://github.com/tisnik/moonscript-examples/blob/master/63_constructor.lua</a></td></tr>
<tr><td>125</td><td>64_with.moon</td><td>použití programové konstrukce <strong>with</strong></td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/64_with.moon">https://github.com/tisnik/moonscript-examples/blob/master/64_with.moon</a></td></tr>
<tr><td>126</td><td>64_with.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/64_with.lua">https://github.com/tisnik/moonscript-examples/blob/master/64_with.lua</a></td></tr>
<tr><td>127</td><td>65_do.moon</td><td>blok <strong>do</strong> s&nbsp;návratovou hodnotou</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/65_do.moon">https://github.com/tisnik/moonscript-examples/blob/master/65_do.moon</a></td></tr>
<tr><td>128</td><td>65_do.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/65_do.lua">https://github.com/tisnik/moonscript-examples/blob/master/65_do.lua</a></td></tr>
<tr><td>129</td><td>66_destructuring.moon</td><td>destructuring v&nbsp;jazyce Moonscript</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/66_destructuring.moon">https://github.com/tisnik/moonscript-examples/blob/master/66_destructuring.moon</a></td></tr>
<tr><td>130</td><td>66_destructuring.lua</td><td>transpřeklad předchozího zdrojového kódu do jazyka Lua</td><td><a href="https://github.com/tisnik/moonscript-examples/blob/master/66_destructuring.lua">https://github.com/tisnik/moonscript-examples/blob/master/66_destructuring.lua</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránky projektu Moonscript<br />
<a href="https://moonscript.org/">https://moonscript.org/</a>
</li>

<li>Moonscript na GitHubu<br />
<a href="https://github.com/leafo/moonscript">https://github.com/leafo/moonscript</a>
</li>

<li>MoonScript online compiler<br />
<a href="https://moonscript.org/compiler/">https://moonscript.org/compiler/</a>
</li>

<li>Vydání Moonscriptu<br />
<a href="https://github.com/leafo/moonscript/releases">https://github.com/leafo/moonscript/releases</a>
</li>

<li>Moonscript-vim<br />
<a href="https://github.com/leafo/moonscript-vim">https://github.com/leafo/moonscript-vim</a>
</li>

<li>Moonscript Examples<br />
<a href="https://github.com/leafo/moonscript/wiki/Moonscript-Examples">https://github.com/leafo/moonscript/wiki/Moonscript-Examples</a>
</li>

<li>CoffeeScript<br />
<a href="https://coffeescript.org/">https://coffeescript.org/</a>
</li>

<li>CoffeeScript na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/CoffeeScript">https://en.wikipedia.org/wiki/CoffeeScript</a>
</li>

<li>CoffeeScript: řádně oslazený JavaScript<br />
<a href="https://zdrojak.cz/clanky/coffeescript-radne-oslazeny-javascript/">https://zdrojak.cz/clanky/coffeescript-radne-oslazeny-javascript/</a>
</li>

<li>CoffeeScript: druhá dávka steroidů pro vaše skripty<br />
<a href="https://zdrojak.cz/clanky/coffeescript-druha-davka-steroidu-pro-vase-skripty/">https://zdrojak.cz/clanky/coffeescript-druha-davka-steroidu-pro-vase-skripty/</a>
</li>

<li>Why CoffeeScript is still alive<br />
<a href="https://codeburst.io/why-coffeescript-is-still-alive-aeb369b91b85">https://codeburst.io/why-coffeescript-is-still-alive-aeb369b91b85</a>
</li>

<li>The CoffeeScript Wiki<br />
<a href="https://github.com/jashkenas/coffeescript/wiki">https://github.com/jashkenas/coffeescript/wiki</a>
</li>

<li>CoffeeScript In The Wild<br />
<a href="https://github.com/jashkenas/coffeescript/wiki/In-The-Wild">https://github.com/jashkenas/coffeescript/wiki/In-The-Wild</a>
</li>

<li>How CoffeeScript Got Forgotten<br />
<a href="https://betterprogramming.pub/how-coffeescript-got-forgotten-812328225987">https://betterprogramming.pub/how-coffeescript-got-forgotten-812328225987</a>
</li>

<li>ULua: Universal Lua Distribution<br />
<a href="https://ulua.io/index.html">https://ulua.io/index.html</a>
</li>

<li>LuaRocks<br />
<a href="https://luarocks.org/">https://luarocks.org/</a>
</li>

<li>Awesome Lua &ndash; A curated list of quality Lua packages and resources.<br />
<a href="https://github.com/LewisJEllis/awesome-lua">https://github.com/LewisJEllis/awesome-lua</a>
</li>

<li>LuaJIT<br />
<a href="https://luajit.org/">https://luajit.org/</a>
</li>

<li>Running LuaJIT<br />
<a href="https://luajit.org/running.html">https://luajit.org/running.html</a>
</li>

<li>LuaJIT na GitHubu<br />
<a href="https://github.com/luajit">https://github.com/luajit</a>
</li>

<li>Lua Implementations<br />
<a href="http://lua-users.org/wiki/LuaImplementations">http://lua-users.org/wiki/LuaImplementations</a>
</li>

<li>Coconut: funkcionální jazyk s pattern matchingem kompatibilní s Pythonem<br />
<a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/</a>
</li>

<li>Coconut aneb funkcionální nadstavba nad Pythonem (2.část)<br />
<a href="https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/">https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut 1.1.0 (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/1.1.0">https://pypi.python.org/pypi/coconut/1.1.0</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

<li>patterns<br />
<a href="https://github.com/Suor/patterns">https://github.com/Suor/patterns</a>
</li>

<li>Source-to-source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>The Lua VM, on the Web<br />
<a href="https://kripken.github.io/lua.vm.js/lua.vm.js.html">https://kripken.github.io/lua.vm.js/lua.vm.js.html</a>
</li>

<li>Lua.vm.js REPL<br />
<a href="https://kripken.github.io/lua.vm.js/repl.html">https://kripken.github.io/lua.vm.js/repl.html</a>
</li>

<li>lua2js<br />
<a href="https://www.npmjs.com/package/lua2js">https://www.npmjs.com/package/lua2js</a>
</li>

<li>Wisp na GitHubu<br />
<a href="https://github.com/Gozala/wisp">https://github.com/Gozala/wisp</a>
</li>

<li>Wisp playground<br />
<a href="http://www.jeditoolkit.com/try-wisp/">http://www.jeditoolkit.com/try-wisp/</a>
</li>

<li>REPL v prohlížeči<br />
<a href="http://www.jeditoolkit.com/interactivate-wisp/">http://www.jeditoolkit.com/interactivate-wisp/</a>
</li>

<li>Minification (programming)<br />
<a href="https://en.wikipedia.org/wiki/Minification_(programming)">https://en.wikipedia.org/wiki/Minification_(programming)</a>
</li>

<li>Roblox<br />
<a href="https://en.wikipedia.org/wiki/Roblox">https://en.wikipedia.org/wiki/Roblox</a>
</li>

<li>Category:Lua (programming language)-scriptable game engines<br />
<a href="https://en.wikipedia.org/wiki/Category:Lua_(programming_language)-scriptable_game_engines">https://en.wikipedia.org/wiki/Category:Lua_(programming_language)-scriptable_game_engines</a>
</li>

<li>Goodbye Lua (shrnutí následujícího článku)<br />
<a href="https://www.reddit.com/r/lua/comments/4ld6ao/goodbye_lua/">https://www.reddit.com/r/lua/comments/4ld6ao/goodbye_lua/</a>
</li>

<li>Goodbye, Lua<br />
<a href="https://realmensch.org/2016/05/28/goodbye-lua/">https://realmensch.org/2016/05/28/goodbye-lua/</a>
</li>

<li>6th Edition – ECMAScript 2015<br />
<a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015">https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015</a>
</li>

<li>Assignment (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Assignment_(computer_science)">https://en.wikipedia.org/wiki/Assignment_(computer_science)</a>
</li>

<li>Destructuring in Clojure<br />
<a href="https://clojure.org/guides/destructuring">https://clojure.org/guides/destructuring</a>
</li>

<li>Should Array Index Start at 0 or 1?<br />
<a href="http://xahlee.info/comp/comp_lang_array_index_start_0_or_1.html">http://xahlee.info/comp/comp_lang_array_index_start_0_or_1.html</a>
</li>

<li>Programming Languages where indices start from 1 (NOT 0)<br />
<a href="https://iq.opengenus.org/array-indices-start-from-1/">https://iq.opengenus.org/array-indices-start-from-1/</a>
</li>

<li>Comparison of programming languages (array)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)#Indexing">https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)#Indexing</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>
