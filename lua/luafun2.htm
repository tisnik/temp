<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Lua Fun: knihovna pro zpracování konečných i nekonečných sekvencí v jazyce Lua (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Lua Fun: knihovna pro zpracování konečných i nekonečných sekvencí v jazyce Lua (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Funkce <strong>nth</strong> a přístup k&nbsp;prvkům nekonečných sekvencí</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. Vyhledání prvku či prvků v&nbsp;sekvenci</a></p>
<p><a href="#k13">*** 13. Kompozice sekvencí</a></p>
<p><a href="#k14">*** 14. Přidání indexů k&nbsp;prvkům s&nbsp;využitím funkce <strong>enumerate</strong></a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Články o programovacím jazyce Lua i o technologii LuaJITu</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Funkce <strong>nth</strong> a přístup k&nbsp;prvkům nekonečných sekvencí</h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- generátor nul
print("zeros()")
g = zeros()


-- pokus o přístup k prvkům sekvence
print("10th item:", nth(10, g))
print("1000th item:", nth(1000, g))
print("5th item:", nth(5, g))


-- generátor pseudonáhodných čísel
print()
print("rands(100, 200)")
g = rands(100, 200)


-- pokus o přístup k prvkům sekvence
print("10th item:", nth(10, g))
print("1000th item:", nth(1000, g))
print("5th item:", nth(5, g))


-- generátor stejných řetězců
print()
print("xrepeat('*')")
g = xrepeat("*")


-- pokus o přístup k prvkům sekvence
print("10th item:", nth(10, g))
print("1000th item:", nth(1000, g))
print("5th item:", nth(5, g))


-- generátor druhých mocnin přirozených čísel
print()
print("tabulate()")
g = tabulate(function(x) return (x+1)*(x+1) end)


-- pokus o přístup k prvkům sekvence
print("10th item:", nth(10, g))
print("1000th item:", nth(1000, g))
print("5th item:", nth(5, g))
</pre>

<p></p>

<pre>
zeros()
10th item:      0
1000th item:    0
5th item:       0

rands(100, 200)
10th item:      155
1000th item:    144
5th item:       151

xrepeat('*')
10th item:      *
1000th item:    *
5th item:       *

tabulate()
10th item:      100
1000th item:    1000000
5th item:       25
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk prvků konečné sekvence
function printSequence(sequence)
    for _, value in iter(sequence) do
        print(value)
    end
end


-- vlastní generátor
function my_generator(x)
    print("(iter)", x)
    return (x+1)*(x+1)
end


-- inicializovat vlastní generátor
g = tabulate(my_generator)

-- pokus o přístup k prvkům sekvence

print()
print("getting 9th item")
g9 = nth(9, g)

print()
print("getting 10th item")
g10 = nth(10, g)

print()
print("getting 5th item")
g5 = nth(5, g)

print()
print("9th item:", g9)
print("10th item:", g10)
print("5th item:", g5)


-- pokus o přístup k nultému prvku (který neexistuje)
print()
print("getting 0th item")
g0 = nth(0, g)
</pre>

<p></p>

<pre>
getting 9th item
(iter)  0
(iter)  1
(iter)  2
(iter)  3
(iter)  4
(iter)  5
(iter)  6
(iter)  7
(iter)  8

getting 10th item
(iter)  0
(iter)  1
(iter)  2
(iter)  3
(iter)  4
(iter)  5
(iter)  6
(iter)  7
(iter)  8
(iter)  9

getting 5th item
(iter)  0
(iter)  1
(iter)  2
(iter)  3
(iter)  4

9th item:       81
10th item:      100
5th item:       25

getting 0th item
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk prvků konečné sekvence
function printSequence(sequence)
    for _, value in iter(sequence) do
        print(value)
    end
end


-- vlastní generátor
function my_generator(x)
    print("(iter)", x)
    return (x+1)*(x+1)
end


-- inicializovat vlastní generátor
g = tabulate(my_generator)


-- první podsekvence
print()
print("take_n(5, sequence)")
print("----------------------")
t5 = take_n(5, g)
print("done\n")
printSequence(t5)


-- druhá podsekvence
print()
print("take_n(10, sequence)")
print("----------------------")
t10 = take_n(10, g)
print("done\n")
printSequence(t10)


-- třetí podsekvence
print()
print("take_n(0, sequence)")
print("----------------------")
t0 = take_n(0, g)
print("done\n")
printSequence(t0)
</pre>

<p></p>

<pre>
take_n(5, sequence)
----------------------
done

(iter)  0
1
(iter)  1
4
(iter)  2
9
(iter)  3
16
(iter)  4
25

take_n(10, sequence)
----------------------
done

(iter)  0
1
(iter)  1
4
(iter)  2
9
(iter)  3
16
(iter)  4
25
(iter)  5
36
(iter)  6
49
(iter)  7
64
(iter)  8
81
(iter)  9
100

take_n(0, sequence)
----------------------
done

</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk několika prvků nekonečné sekvence
function printSequence(sequence)
    for _, value in iter(sequence) do
        print(value)
    end
end


-- vlastní generátor
function my_generator(x)
    print("(iter)", x)
    return (x+1)*(x+1)
end


-- inicializovat vlastní generátor
g = tabulate(my_generator)


-- první dvojice podsekvencí
print()
print("split(5, sequence)")
print("----------------------")
s1, s2 = split(5, g)
printSequence(s1)


-- druhá dvojice podsekvencí
print()
print("split(10, sequence)")
print("----------------------")
s1, s2 = split(10, g)
printSequence(s1)


-- třetí dvojice podsekvencí
print()
print("split(0, sequence)")
print("----------------------")
s1, s2 = split(0, g)
printSequence(s1)
</pre>

<p></p>

<pre>
split(5, sequence)
----------------------
(iter)  0
(iter)  1
(iter)  2
(iter)  3
(iter)  4
(iter)  0
1
(iter)  1
4
(iter)  2
9
(iter)  3
16
(iter)  4
25

split(10, sequence)
----------------------
(iter)  0
(iter)  1
(iter)  2
(iter)  3
(iter)  4
(iter)  5
(iter)  6
(iter)  7
(iter)  8
(iter)  9
(iter)  0
1
(iter)  1
4
(iter)  2
9
(iter)  3
16
(iter)  4
25
(iter)  5
36
(iter)  6
49
(iter)  7
64
(iter)  8
81
(iter)  9
100

split(0, sequence)
----------------------
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk několika prvků nekonečné sekvence
function printZippedSequence(sequence, n)
    i = 0
    for index, a, b, c in iter(sequence) do
        i = i + 1
        if i > n then
            break
        end
        print(index, a, b, c)
    end
end


-- vlastní generátor
function my_generator(x)
    return (x+1)*(x+1)
end


-- inicializovat vlastní generátor
g1 = tabulate(my_generator)

-- další generátor nekonečné sekvence 
g2 = xrepeat("*")

-- třetí generátor nekonečné sekvence
g3 = zeros()

-- vytvoření zipu ze tří sekvencí
z1 = zip(g1, g2, g3)
print()
print("Zipped sequence (first ten items from infinite sequnce)")
print("-------------------------------------------------------")
printZippedSequence(z1, 10)
</pre>

<p></p>

<pre>
Zipped sequence (first ten items from infinite sequnce)
-------------------------------------------------------
table: 0x55a58afd17d0   1       *       0
table: 0x55a58afd1900   4       *       0
table: 0x55a58afd1a30   9       *       0
table: 0x55a58afc1d20   16      *       0
table: 0x55a58afc1e50   25      *       0
table: 0x55a58afc1f80   36      *       0
table: 0x55a58afc20b0   49      *       0
table: 0x55a58afe5be0   64      *       0
table: 0x55a58afe5d10   81      *       0
table: 0x55a58afe5e40   100     *       0
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk několika prvků nekonečné sekvence
function printZippedSequence(sequence, n)
    i = 0
    for index, a, b, c in iter(sequence) do
        i = i + 1
        if i > n then
            break
        end
        print(index, a, b, c)
    end
end


-- vlastní generátor
function my_generator(x)
    print("(iter)", x)
    return (x+1)*(x+1)
end


-- inicializovat vlastní generátor
g1 = tabulate(my_generator)

-- další generátor nekonečné sekvence 
g2 = xrepeat("*")

-- třetí generátor nekonečné sekvence
g3 = zeros()

-- vytvoření zipu ze tří sekvencí
z1 = zip(g1, g2, g3)
print()
print("Zipped sequence (first ten items from infinite sequnce)")
print("-------------------------------------------------------")
printZippedSequence(z1, 10)
</pre>

<p></p>

<pre>
Zipped sequence (first ten items from infinite sequnce)
-------------------------------------------------------
(iter)  0
table: 0x556e569c8780   1       *       0
(iter)  1
table: 0x556e569c8950   4       *       0
(iter)  2
table: 0x556e569b8d20   9       *       0
(iter)  3
table: 0x556e569b8e80   16      *       0
(iter)  4
table: 0x556e569b8fe0   25      *       0
(iter)  5
table: 0x556e569b9110   36      *       0
(iter)  6
table: 0x556e569b9270   49      *       0
(iter)  7
table: 0x556e569b93d0   64      *       0
(iter)  8
table: 0x556e569dcbb0   81      *       0
(iter)  9
table: 0x556e569dcd10   100     *       0
(iter)  10
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk prvků konečné sekvence
function printSequence(sequence)
    each(print, sequence)
end


-- vlastní generátor
function my_generator(x)
    return (x+1)*(x+1)
end


-- inicializovat vlastní generátor
g1 = tabulate(my_generator)

-- další generátor nekonečné sekvence 
g2 = xrepeat("*")

-- třetí generátor nekonečné sekvence
g3 = zeros()

-- vytvoření zipu ze tří sekvencí
z1 = zip(g1, g2, g3)

-- získání prvních deseti prvků z původně nekonečné sekvence
t = take_n(10, z1)

-- výstup na terminál
print()
print("Zipped sequence (first ten items from infinite sequnce)")
print("-------------------------------------------------------")
printSequence(t)
</pre>

<p></p>

<pre>
Zipped sequence (first ten items from infinite sequnce)
-------------------------------------------------------
1       *       0
4       *       0
9       *       0
16      *       0
25      *       0
36      *       0
49      *       0
64      *       0
81      *       0
100     *       0
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk prvků konečné sekvence
function printSequence(sequence)
    each(print, sequence)
end


-- vlastní generátor
function my_generator(x)
    return (x+1)*(x+1)
end


-- inicializovat vlastní generátor
g = tabulate(my_generator)


-- první podsekvence
print()
print("take_n(10, sequence)")
print("----------------------")
t10 = take_n(10, g)
printSequence(t10)


-- provést filtraci
f1 = filter(function(x) return x % 2 == 0 end, g)
print()
print("even results")
print("----------------------")
t5 = take_n(5, f1)
printSequence(t5)


-- provést filtraci
f2 = filter(function(x) return not(x % 2 == 0) end, g)
print()
print("odd results")
print("----------------------")
t5 = take_n(5, f2)
printSequence(t5)
</pre>

<p></p>

<pre>
take_n(10, sequence)
----------------------
1
4
9
16
25
36
49
64
81
100

even results
----------------------
4
16
36
64
100

odd results
----------------------
1
9
25
49
81
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- sekvence
months = {
    "Leden",
    "Unor",
    "Brezen",
    "Duben",
    "Kveten",
    "Cerven",
    "Cervenec",
    "Srpen",
    "Zari",
    "Rijen",
    "Listopad",
    "Prosinec"
}

-- pomocná funkce pro tisk prvků konečné sekvence
function printSequence(sequence)
    each(print, sequence)
end


print("Mesice obsahujici znak 'n'")
print("--------------------------")
g1 = grep("n", months)
printSequence(g1)


print()
print("Mesice zacinajici na 'Cer'")
print("--------------------------")
g2 = grep("^Cer", months)
printSequence(g2)


print()
print("Mesice koncici na 'en'")
print("--------------------------")
g3 = grep("en$", months)
printSequence(g3)


print()
print("Vsechny mesice")
print("--------------------------")
g4 = grep(".", months)
printSequence(g4)
</pre>

<p></p>

<pre>
Mesice obsahujici znak 'n'
--------------------------
Leden
Unor
Brezen
Duben
Kveten
Cerven
Cervenec
Srpen
Rijen
Prosinec

Mesice zacinajici na 'Cer'
--------------------------
Cerven
Cervenec

Mesice koncici na 'en'
--------------------------
Leden
Brezen
Duben
Kveten
Cerven
Srpen
Rijen

Vsechny mesice
--------------------------
Leden
Unor
Brezen
Duben
Kveten
Cerven
Cervenec
Srpen
Zari
Rijen
Listopad
Prosinec
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk prvků konečné sekvence
function printSequence(sequence)
    each(print, sequence)
end


-- vlastní generátor
function my_generator(x)
    return (x+1)*(x+1)
end


-- inicializovat vlastní generátor
g = tabulate(my_generator)


-- první podsekvence
print()
print("take_n(10, sequence)")
print("----------------------")
t10 = take_n(10, g)
printSequence(t10)


-- provést filtraci
f1, f2 = partition(function(x) return x % 2 == 0 end, g)
print()
print("even results")
print("----------------------")
t5 = take_n(5, f1)
printSequence(t5)


-- (filtrace uz byla provedena)
print()
print("odd results")
print("----------------------")
t5 = take_n(5, f2)
printSequence(t5)
</pre>

<p></p>

<pre>
take_n(10, sequence)
----------------------
1
4
9
16
25
36
49
64
81
100

even results
----------------------
4
16
36
64
100

odd results
----------------------
1
9
25
49
81
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk prvků konečné sekvence
function printSequence(sequence)
    each(print, sequence)
end


-- vlastní generátor
function my_generator(x)
    return (x+1)*(x+1)
end


-- inicializovat vlastní generátor
g = tabulate(my_generator)


-- první podsekvence
print()
print("take_n(10, sequence)")
print("----------------------")
t10 = take_n(10, g)
printSequence(t10)


-- provést transformaci
m1 = map(function(x) return x % 2 == 0 end, g)
print()
print("even results?")
print("----------------------")
t5 = take_n(5, m1)
printSequence(t5)


-- funkce pro výpočet faktoriálu
function factorial(n)
    for i = 1, n-1 do
        n = n * i
    end
    return n
end


-- provést výpočet faktoriálu
m2 = map(factorial, range(10))
print()
print("factorials")
print("----------------------")
printSequence(m2)
</pre>

<p></p>

<pre>
take_n(10, sequence)
----------------------
1
4
9
16
25
36
49
64
81
100

even results?
----------------------
false
true
false
true
false

factorials
----------------------
1
2
6
24
120
720
5040
40320
362880
3628800
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Opakování sekvence funkcí/generátorem <strong>cycle</strong></h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk několika prvků nekonečné sekvence
function printSequence(sequence, n)
    i = 0
    for index, value in iter(sequence) do
        i = i + 1
        if i > n then
            break
        end
        print(index, value)
    end
end


-- inicializovat generátor celých čísel
g = range(2, 10, 2)


print("original sequence")
print("---------------------------")
printSequence(g, 20)

c = cycle(g)
print()
print("cycles of original sequence")
print("---------------------------")
printSequence(c, 20)
</pre>

<p></p>

<pre>
original sequence
---------------------------
2       2
4       4
6       6
8       8
10      10

cycles of original sequence
---------------------------
2       2
4       4
6       6
8       8
10      10
2       2
4       4
6       6
8       8
10      10
2       2
4       4
6       6
8       8
10      10
2       2
4       4
6       6
8       8
10      10
</pre>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk několika prvků zazipované konečné sekvence
function printZippedSequence(sequence)
    for index, a, b in iter(sequence) do
        print(index, a, b)
    end
end


-- inicializovat generátor celých čísel
g = range(1, 20, 1)

-- opakující se sekvence dvou slov
c = cycle({"liché", "sudé"})

-- vytvoření zipu z obou sekvencí
z = zip(g, c)

-- s tiskem výsledku
printZippedSequence(z)
</pre>

<pre>
table: 0x5648aa99dd20   1       liché
table: 0x5648aa99de30   2       sudé
table: 0x5648aa99df40   3       liché
table: 0x5648aa99e050   4       sudé
table: 0x5648aa99e160   5       liché
table: 0x5648aa99e270   6       sudé
table: 0x5648aa97ccb0   7       liché
table: 0x5648aa97cdc0   8       sudé
table: 0x5648aa97ced0   9       liché
table: 0x5648aa97cfe0   10      sudé
table: 0x5648aa97d0f0   11      liché
table: 0x5648aa97d200   12      sudé
table: 0x5648aa97d310   13      liché
table: 0x5648aa97d420   14      sudé
table: 0x5648aa9a0a30   15      liché
table: 0x5648aa9a0b40   16      sudé
table: 0x5648aa9a0c50   17      liché
table: 0x5648aa9a0d60   18      sudé
table: 0x5648aa9a0e70   19      liché
table: 0x5648aa9a0f80   20      sudé
</pre>
<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk několika prvků zazipované konečné sekvence
function printZippedSequence(sequence)
    for index, a, b, c in iter(sequence) do
        print(index, a, b, c)
    end
end


-- inicializovat generátor celých čísel
g = range(1, 20, 1)

-- opakující se sekvence dvou slov
c1 = cycle({"liché", "sudé"})

-- opakující se sekvence tří slov
c2 = cycle({"", "", "a dělitelné třemi"})

-- vytvoření zipu z obou sekvencí
z = zip(g, c1, c2)

-- s tiskem výsledku
printZippedSequence(z)
</pre>

<pre>
table: 0x558981730950   1       liché   
table: 0x558981720cc0   2       sudé    
table: 0x558981720df0   3       liché   a dělitelné třemi
table: 0x558981720f70   4       sudé    
table: 0x5589817210a0   5       liché   
table: 0x558981745030   6       sudé    a dělitelné třemi
table: 0x558981745160   7       liché   
table: 0x558981745290   8       sudé    
table: 0x5589817453c0   9       liché   a dělitelné třemi
table: 0x5589817497a0   10      sudé    
table: 0x5589817498d0   11      liché   
table: 0x558981749a00   12      sudé    a dělitelné třemi
table: 0x558981749b30   13      liché   
table: 0x558981749c60   14      sudé    
table: 0x558981725940   15      liché   a dělitelné třemi
table: 0x558981725a70   16      sudé    
table: 0x558981725ba0   17      liché   
table: 0x558981725cd0   18      sudé    a dělitelné třemi
table: 0x558981725e00   19      liché   
table: 0x558981725f30   20      sudé    
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Kompozice sekvencí</h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk několika prvků konečné sekvence
function printSequence(sequence)
    for index, value in iter(sequence) do
        print(index, value)
    end
end


-- inicializovat generátor celých čísel
g1 = range(2, 10, 2)

-- další sekvence
g2 = range(10, 2, -2)

-- třetí sekvence
g3 = xrepeat("***")


-- spojení všech tří sekvencí
chained = chain(g1, g2, g3)

-- získání prvních dvaceti prvků z výsledné nekonečné sekvence
trimmed = take_n(20, chained)

print()
print("chained and trimmed sequence")
print("----------------------------")
printSequence(trimmed)

-- vše v jediném příkazu
trimmed2 = take_n(20, chain(range(2, 10, 2), range(10, 2, -2), xrepeat(100)))

print()
print("chained and trimmed sequence")
print("----------------------------")
printSequence(trimmed)
</pre>

<p></p>

<pre>
chained and trimmed sequence
----------------------------
table: 0x559dbad78a60   2
table: 0x559dbad78c40   4
table: 0x559dbad68d60   6
table: 0x559dbad68ee0   8
table: 0x559dbad69060   10
table: 0x559dbad69250   10
table: 0x559dbad693a0   8
table: 0x559dbad91020   6
table: 0x559dbad91170   4
table: 0x559dbad912c0   2
table: 0x559dbad91480   ***
table: 0x559dbad915d0   ***
table: 0x559dbad91720   ***
table: 0x559dbad91870   ***
table: 0x559dbad919c0   ***
table: 0x559dbad91b10   ***
table: 0x559dbad91c60   ***
table: 0x559dbad6e7b0   ***
table: 0x559dbad6e900   ***
table: 0x559dbad6ea50   ***

chained and trimmed sequence
----------------------------
table: 0x559dbad6f680   2
table: 0x559dbad93df0   4
table: 0x559dbad93f40   6
table: 0x559dbad94090   8
table: 0x559dbad941e0   10
table: 0x559dbad943a0   10
table: 0x559dbad944f0   8
table: 0x559dbad94640   6
table: 0x559dbad94790   4
table: 0x559dbad948e0   2
table: 0x559dbad94aa0   ***
table: 0x559dbad94bf0   ***
table: 0x559dbad94d40   ***
table: 0x559dbad94e90   ***
table: 0x559dbad94fe0   ***
table: 0x559dbad95130   ***
table: 0x559dbad95280   ***
table: 0x559dbad953d0   ***
table: 0x559dbad95520   ***
table: 0x559dbad95670   ***
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přidání indexů k&nbsp;prvkům s&nbsp;využitím funkce <strong>enumerate</strong></h2>

<p></p>

<pre>
-- načtení knihovny Lua Fun a současně import symbolů do globálního jmenného prostoru
require "fun"()


-- pomocná funkce pro tisk několika prvků konečné sekvence
function printSequence(sequence)
    for _, a, b in iter(sequence) do
        print(a, b)
    end
end


-- inicializovat generátor celých čísel
g1 = range(2, 10, 2)

-- další sekvence
g2 = range(10, 2, -2)

-- třetí sekvence
g3 = xrepeat("***")


-- spojení všech tří sekvencí
chained = chain(g1, g2, g3)

-- získání prvních dvaceti prvků z výsledné nekonečné sekvence
trimmed = take_n(20, chained)
enumerated = enumerate(trimmed)

print()
print("chained and trimmed sequence")
print("----------------------------")
printSequence(enumerated)

-- vše v jediném příkazu
trimmed2 = take_n(20, chain(range(2, 10, 2), range(10, 2, -2), xrepeat(100)))
enumerated2 = enumerate(trimmed2)

print()
print("chained and trimmed sequence")
print("----------------------------")
printSequence(enumerated2)
</pre>

<p></p>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>iter</td><td>vytvoření iterátoru z&nbsp;různých typů jazyka Lua (pole, mapa, řetězec)</td></tr>
<tr><td>2</td><td>each</td><td>spuštění zvolené funkce pro každý prvek iterátoru</td></tr>
<tr><td>3</td><td>for_each</td><td>jmenný alias pro předchozí funkci</td></tr>
<tr><td>4</td><td>foreach</td><td>jmenný alias pro předchozí funkci</td></tr>
</table>

<p>Generátory</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>range</td><td></td></tr>
<tr><td>2</td><td>duplicate</td><td></td></tr>
<tr><td>3</td><td>xrepeat</td><td></td></tr>
<tr><td>4</td><td>replicate</td><td></td></tr>
<tr><td>5</td><td>tabulate</td><td></td></tr>
<tr><td>6</td><td>zeros</td><td></td></tr>
<tr><td>7</td><td>ones</td><td></td></tr>
<tr><td>8</td><td>rands</td><td></td></tr>
</table>

<p>Přístup k&nbsp;prvkům, řezy sekvencí (slicing) atd.:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>nth</td><td></td></tr>
<tr><td>2</td><td>head</td><td></td></tr>
<tr><td>3</td><td>car</td><td></td></tr>
<tr><td>4</td><td>tail</td><td></td></tr>
<tr><td>5</td><td>cdr</td><td></td></tr>
<tr><td>6</td><td>take_n</td><td></td></tr>
<tr><td>7</td><td>take_while</td><td></td></tr>
<tr><td>8</td><td>take</td><td></td></tr>
<tr><td>9</td><td>drop_n</td><td></td></tr>
<tr><td>10</td><td>drop_while</td><td></td></tr>
<tr><td>11</td><td>drop</td><td></td></tr>
<tr><td>12</td><td>span</td><td></td></tr>
<tr><td>13</td><td>split</td><td></td></tr>
<tr><td>14</td><td>split_at</td><td></td></tr>
</table>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>filter</td><td></td></tr>
<tr><td>2</td><td>remove_if</td><td></td></tr>
<tr><td>3</td><td>grep</td><td></td></tr>
<tr><td>4</td><td>partition</td><td></td></tr>
</table>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>map</td><td></td></tr>
<tr><td>2</td><td>enumerate</td><td></td></tr>
<tr><td>3</td><td>intersperse</td><td></td></tr>
</table>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>zip</td><td></td></tr>
<tr><td>2</td><td>cycle</td><td></td></tr>
<tr><td>3</td><td>chain</td><td></td></tr>
</table>

<p>Operátory:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>operator.le</td><td></td></tr>
<tr><td>2</td><td></td><td></td></tr>
<tr><td>3</td><td></td><td></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/functional-lua">https://github.com/tisnik/functional-lua</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem &ndash;
alespoň prozatím &ndash; velmi malý, dnes má přibližně několik jednotek
kilobajtů), můžete namísto toho použít odkazy na jednotlivé demonstrační
příklady a jejich části, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/functional-lua/tree/master/lua_fun/">https://github.com/tisnik/functional-lua/tree/master/lua_fun/</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Články o programovacím jazyce Lua i o technologii LuaJITu</h2>

<p>Programovacím jazykem Lua jsme se již na stránkách Rootu poměrně podrobně
zabývali. Jedná se o snadno naučitelný jazyk, který je ovšem (mj.&nbsp;i díky
konceptu metatabulek) rozšiřitelný a poměrně tvárný. Viz též následující odkazy
na již vydané články (včetně odkazu na e-book, jenž na základě těchto článků
vznikl):</p>

<ol>

<li>Programovací jazyk Lua <br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua/">https://www.root.cz/clanky/programovaci-jazyk-lua/</a>
</li>

<li>Základní konstrukce v programovacím jazyku Lua<br />
<a href="https://www.root.cz/clanky/zakladni-konstrukce-v-programovacim-jazyku-lua/">https://www.root.cz/clanky/zakladni-konstrukce-v-programovacim-jazyku-lua/</a>
</li>

<li>Operátory a asociativní pole v jazyku Lua<br />
<a href="https://www.root.cz/clanky/operatory-a-asociativni-pole-v-jazyku-lua/">https://www.root.cz/clanky/operatory-a-asociativni-pole-v-jazyku-lua/</a>
</li>

<li>Funkce v programovacím jazyku Lua<br />
<a href="https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua/">https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua/</a>
</li>

<li>Funkce v programovacím jazyku Lua - uzávěry<br />
<a href="https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua-uzavery/">https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua-uzavery/</a>
</li>

<li>Programovací jazyk Lua vestavěný do aplikací<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-vestaveny-do-aplikaci/">https://www.root.cz/clanky/programovaci-jazyk-lua-vestaveny-do-aplikaci/</a>
</li>

<li>Programovací jazyk Lua v aplikacích II<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-aplikacich-ii/">https://www.root.cz/clanky/programovaci-jazyk-lua-v-aplikacich-ii/</a>
</li>

<li>Objektově orientované programování v Lua<br />
<a href="https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua/">https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua/</a>
</li>

<li>Objektově orientované programování v Lua II<br />
<a href="https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua-ii/">https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua-ii/</a>
</li>

<li>Programovací jazyk Lua a koprogramy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-a-koprogramy/">https://www.root.cz/clanky/programovaci-jazyk-lua-a-koprogramy/</a>
</li>

<li>Knihovny a frameworky pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/knihovny-a-frameworky-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/knihovny-a-frameworky-pro-programovaci-jazyk-lua/</a>
</li>

<li>Lua + LÖVE: vytvořte si vlastní hru<br />
<a href="https://www.root.cz/clanky/lua-love-vytvorte-si-vlastni-hru/">https://www.root.cz/clanky/lua-love-vytvorte-si-vlastni-hru/</a>
</li>

<li>Hrátky se systémem LÖVE<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love/">https://www.root.cz/clanky/hratky-se-systemem-love/</a>
</li>

<li>Vytváříme hru v systému LÖVE<br />
<a href="https://www.root.cz/clanky/vytvarime-hru-v-systemu-love/">https://www.root.cz/clanky/vytvarime-hru-v-systemu-love/</a>
</li>

<li>Hrátky se systémem LÖVE - částicové systémy<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-casticove-systemy/">https://www.root.cz/clanky/hratky-se-systemem-love-casticove-systemy/</a>
</li>

<li>Hrátky se systémem LÖVE – kolize a odrazy těles<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-ndash-kolize-a-odrazy-teles/">https://www.root.cz/clanky/hratky-se-systemem-love-ndash-kolize-a-odrazy-teles/</a>
</li>

<li>Hrátky se systémem LÖVE - kolize a odrazy těles II<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-kolize-a-odrazy-teles-ii/">https://www.root.cz/clanky/hratky-se-systemem-love-kolize-a-odrazy-teles-ii/</a>
</li>

<li>Hrátky se systémem LÖVE - pružné vazby mezi tělesy<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-pruzne-vazby-mezi-telesy/">https://www.root.cz/clanky/hratky-se-systemem-love-pruzne-vazby-mezi-telesy/</a>
</li>

<li>Hrátky se systémem LÖVE - dokončení<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-dokonceni/">https://www.root.cz/clanky/hratky-se-systemem-love-dokonceni/</a>
</li>

<li>LuaJ – implementace jazyka Lua v Javě<br />
<a href="https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/">https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/</a>
</li>

<li>LuaJ a skriptování podle specifikace JSR-223<br />
<a href="https://www.root.cz/clanky/luaj-a-skriptovani-podle-specifikace-jsr-223/">https://www.root.cz/clanky/luaj-a-skriptovani-podle-specifikace-jsr-223/</a>
</li>

<li>Metalua: programovatelné rozšíření sémantiky jazyka Lua<br />
<a href="https://www.root.cz/clanky/metalua-programovatelne-rozsireni-semantiky-jazyka-lua/">https://www.root.cz/clanky/metalua-programovatelne-rozsireni-semantiky-jazyka-lua/</a>
</li>

<li>Metalua: užitečná rozšíření jazyka Lua<br />
<a href="https://www.root.cz/clanky/metalua-uzitecna-rozsireni-jazyka-lua/">https://www.root.cz/clanky/metalua-uzitecna-rozsireni-jazyka-lua/</a>
</li>

<li>Programovací jazyk Lua v roli skriptovacího jazyka pro WWW stránky<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/">https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/</a>
</li>

<li>Interpretry, překladače, JIT překladače a transpřekladače programovacího jazyka Lua<br />
<a href="https://www.root.cz/clanky/interpretry-prekladace-jit-prekladace-a-transprekladace-programovaciho-jazyka-lua/">https://www.root.cz/clanky/interpretry-prekladace-jit-prekladace-a-transprekladace-programovaciho-jazyka-lua/</a>
</li>

<li>Kooperace mezi jazykem Lua a nativním (céčkovým) kódem<br />
<a href="https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem/">https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem/</a>
</li>

<li>Kooperace mezi jazykem Lua a nativním (céčkovým) kódem: knihovna FFI<br />
<a href="https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem-knihovna-ffi/">https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem-knihovna-ffi/</a>
</li>

<li>Profilery pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/profilery-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/profilery-pro-programovaci-jazyk-lua/</a>
</li>

<li>Využití knihovny debug v programovacím jazyku Lua<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-debug-v-programovacim-jazyku-lua/">https://www.root.cz/clanky/vyuziti-knihovny-debug-v-programovacim-jazyku-lua/</a>
</li>

<li>Programovací jazyk Lua (e-book)<br />
<a href="https://www.knihydobrovsky.cz/e-kniha/programovaci-jazyk-lua-240253190">https://www.knihydobrovsky.cz/e-kniha/programovaci-jazyk-lua-240253190</a>
</li>

</ol>

<p>Původně byla Lua realizována jako klasický interpret &ndash; prováděl se
automatický a prakticky okamžitý překlad do bajtkódu, který byl následně
interpretován. Později byl vytvořen i plnohodnotný (a nutno podotknout, že až
neobvykle dobrý) just-in-time (JIT) překladač nazvaný LuaJIT. Touto zajímavou
technologií jsme se zabývali v&nbsp;následující sérii článků:</p>

<ol>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (2)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-2/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-2/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (3)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-3/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-3/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (4)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-4/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-4/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (5 – tabulky a pole)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-5-tabulky-a-pole/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-5-tabulky-a-pole/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (6 – překlad programových smyček do mezijazyka LuaJITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-6-preklad-programovych-smycek-do-mezijazyka-luajitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-6-preklad-programovych-smycek-do-mezijazyka-luajitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (7 – dokončení popisu mezijazyka LuaJITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-7-dokonceni-popisu-mezijazyka-luajitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-7-dokonceni-popisu-mezijazyka-luajitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (8 – základní vlastnosti trasovacího JITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-8-zakladni-vlastnosti-trasovaciho-jitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-8-zakladni-vlastnosti-trasovaciho-jitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (9 – další vlastnosti trasovacího JITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-9-dalsi-vlastnosti-trasovaciho-jitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-9-dalsi-vlastnosti-trasovaciho-jitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (10 – JIT překlad do nativního kódu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-10-jit-preklad-do-nativniho-kodu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-10-jit-preklad-do-nativniho-kodu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (11 – JIT překlad do nativního kódu procesorů s architekturami x86 a ARM)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-11-jit-preklad-do-nativniho-kodu-procesoru-s-architekturami-x86-a-arm/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-11-jit-preklad-do-nativniho-kodu-procesoru-s-architekturami-x86-a-arm/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (12 – překlad operací s reálnými čísly)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-12-preklad-operaci-s-realnymi-cisly/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-12-preklad-operaci-s-realnymi-cisly/</a>
</li>

</ol>

<p>A konečně nesmíme zapomenout na to, že kromě původní implementace
interpretru a LuaJITu existuje celá řada dalších implementací tohoto
programovacího jazyka. Některé z&nbsp;těchto implementací byly zmíněny
v&nbsp;následujících článcích:</p>

<ol>

<li>Skriptovací jazyk Lua v&nbsp;aplikacích naprogramovaných v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/">https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/</a>
</li>

<li>Programovací jazyk Lua v&nbsp;roli skriptovacího jazyka pro WWW stránky<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/">https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/</a>
</li>

<li>LuaJ – implementace jazyka Lua v&nbsp;Javě<br />
<a href="https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/">https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/</a>
</li>

<li>Tvorba pluginů pro Vim s&nbsp;využitím programovacího jazyka Lua<br />
<a href="https://www.root.cz/clanky/tvorba-pluginu-pro-vim-s-vyuzitim-programovaciho-jazyka-lua/">https://www.root.cz/clanky/tvorba-pluginu-pro-vim-s-vyuzitim-programovaciho-jazyka-lua/</a>
</li>

</ol>

<p><div class="rs-tip-major">Poznámka: předchozí články sice nepokrývají
ekosystém tohoto jazyka dokonale, ovšem přibližně 90% všech relevantních
informací je uvedeno.</div></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositář projektu Lua Fun<br />
<a href="https://github.com/luafun/luafun">https://github.com/luafun/luafun</a>
</li>

<li>Lua Functional 0.1.3 documentation<br />
<a href="https://luafun.github.io/reference.html">https://luafun.github.io/reference.html</a>
</li>

<li>Getting Started<br />
<a href="https://luafun.github.io/getting_started.html">https://luafun.github.io/getting_started.html</a>
</li>

<li>Rockspec knihovny Fun<br />
<a href="https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec">https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec</a>
</li>

<li>Awesome Lua &ndash; A curated list of quality Lua packages and resources.<br />
<a href="https://github.com/LewisJEllis/awesome-lua">https://github.com/LewisJEllis/awesome-lua</a>
</li>

<li>Repositář projektu Moses<br />
<a href="https://github.com/Yonaba/Moses/">https://github.com/Yonaba/Moses/</a>
</li>

<li>Lambda the Ultimate: Coroutines in Lua<br />
<a href="http://lambda-the-ultimate.org/no­de/438">http://lambda-the-ultimate.org/no­de/438</a>
</li>

<li>Coroutines Tutorial<br />
<a href="http://lua-users.org/wiki/Co­routinesTutori­al">http://lua-users.org/wiki/Co­routinesTutori­al</a>
</li>

<li>Lua Coroutines Versus Python Generators<br />
<a href="http://lua-users.org/wiki/Lu­aCoroutinesVer­susPythonGene­rators">http://lua-users.org/wiki/Lu­aCoroutinesVer­susPythonGene­rators</a>
</li>

<li>Programming in Lua 9.1 – Coroutine Basics<br />
<a href="http://www.lu­a.org/pil/9.1­.html">http://www.lu­a.org/pil/9.1­.html</a>
</li>

<li>Wikipedia CZ: Koprogram<br />
<a href="http://cs.wiki­pedia.org/wiki/Ko­program">http://cs.wiki­pedia.org/wiki/Ko­program</a>
</li>

<li>Wikipedia EN: Coroutine<br />
<a href="http://en.wiki­pedia.org/wiki/Co­routine">http://en.wiki­pedia.org/wiki/Co­routine</a>
</li>

<li>Repositář knihovny Moses<br />
<a href="https://github.com/Yonaba/Moses/">https://github.com/Yonaba/Moses/</a>
</li>

<li>Návod k&nbsp;použití knihovny Moses<br />
<a href="https://github.com/Yonaba/Moses/blob/master/doc/tutorial.md">https://github.com/Yonaba/Moses/blob/master/doc/tutorial.md</a>
</li>

<li>How to understand clojure's lazy-seq<br />
<a href="https://stackoverflow.com/questions/44095400/how-to-understand-clojures-lazy-seq">https://stackoverflow.com/questions/44095400/how-to-understand-clojures-lazy-seq</a>
</li>

<li>Lua Implementations<br />
<a href="http://lua-users.org/wiki/LuaImplementations">http://lua-users.org/wiki/LuaImplementations</a>
</li>

<li>Generator (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Generator_(computer_programming)">https://en.wikipedia.org/wiki/Generator_(computer_programming)</a>
</li>

<li>Lambda the Ultimate: Coroutines in Lua,<br />
<a href="http://lambda-the-ultimate.org/node/438">http://lambda-the-ultimate.org/node/438</a>
</li>

<li>Coroutines Tutorial,<br />
<a href="http://lua-users.org/wiki/CoroutinesTutorial">http://lua-users.org/wiki/CoroutinesTutorial</a>
</li>

<li>Lua Coroutines Versus Python Generators,<br />
<a href="http://lua-users.org/wiki/LuaCorouti­nesVersusPythonGenerators">http://lua-users.org/wiki/LuaCorouti­nesVersusPythonGenerators</a>
</li>

<li>Category:Lua na Rosetta code<br />
<a href="https://rosettacode.org/wiki/Category:Lua">https://rosettacode.org/wiki/Category:Lua</a>
</li>

<li>Programming in Lua: 23 – The Debug Library<br />
<a href="http://www.lua.org/pil/23.html">http://www.lua.org/pil/23.html</a>
</li>

<li>Programming in Lua: 23.1 – Introspective Facilities<br />
<a href="http://www.lua.org/pil/23.1.html">http://www.lua.org/pil/23.1.html</a>
</li>

<li>Programming in Lua: 23.2 – Hooks<br />
<a href="http://www.lua.org/pil/23.2.html">http://www.lua.org/pil/23.2.html</a>
</li>

<li>Lua 5.2 Reference Manual: 6.10 – The Debug Library<br />
<a href="http://www.lua.org/manual/5­.2/manual.html#6.10">http://www.lua.org/manual/5­.2/manual.html#6.10</a>
</li>

<li>Turtles all the way down<br />
<a href="https://en.wikipedia.org/wiki/Turtles_all_the_way_down">https://en.wikipedia.org/wiki/Turtles_all_the_way_down</a>
</li>

<li>Issues k&nbsp;projektu LuaFun<br />
<a href="https://github.com/luafun/luafun/issues">https://github.com/luafun/luafun/issues</a>
</li>

<li>Archived | Embed Lua for scriptable apps<br />
<a href="https://developer.ibm.com/tutorials/l-embed-lua/">https://developer.ibm.com/tutorials/l-embed-lua/</a>
</li>

<li>Embedding Lua<br />
<a href="https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml">https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

