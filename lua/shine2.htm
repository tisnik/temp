<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Jazyk Shine: „lepší“ Lua s novými jazykovými konstrukcemi a vylepšeními (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Jazyk Shine: „lepší“ Lua s novými jazykovými konstrukcemi a vylepšeními (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části miniseriálu o programovacím jazyku Shine budou popsány funkce s proměnným počtem parametrů, datové typy tabulka a pole, práce s řetězci (včetně jejich interpolace) a nezapomeneme se zmínit ani o některých vlastnostech překladače shinec.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Funkce s&nbsp;proměnným počtem parametrů</a></p>
<p><a href="#k02">2. Funkce s&nbsp;povinným parametrem následovaným proměnným počtem parametrů</a></p>
<p><a href="#k03">3. Předání tabulky do funkce</a></p>
<p><a href="#k04">4. Předání pole do funkce</a></p>
<p><a href="#k05">5. Rozdíly mezi tabulkou a polem</a></p>
<p><a href="#k06">6. Odlišná forma zápisu tabulek</a></p>
<p><a href="#k07">7. Od tabulek k&nbsp;polím s&nbsp;plnohodnotnými prvky <strong>nil</strong></a></p>
<p><a href="#k08">8. Manipulace s&nbsp;poli: operace <strong>push</strong> a <strong>pop</strong></a></p>
<p><a href="#k09">9. Manipulace s&nbsp;poli: operace <strong>shift</strong> a <strong>unshift</strong></a></p>
<p><a href="#k10">10. Převod obsahu celého pole na řetězec operací <strong>join</strong></a></p>
<p><a href="#k11">11. Rozdíly mezi řetězci v&nbsp;jazycích Lua a Shine</a></p>
<p><a href="#k12">12. Interpolace řetězců</a></p>
<p><a href="#k13">13. Operátory v&nbsp;jazyce Shine</a></p>
<p><a href="#k14">14. Zobrazení naparsovaného zdrojového kódu převedeného do formy stromu</a></p>
<p><a href="#k15">15. Zobrazení bajtkódu</a></p>
<p><a href="#k16">16. Zobrazení pseudokódu používaného virtuálním strojem s&nbsp;JITem</a></p>
<p><a href="#k17">17. Obsah závěrečné části</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na relevantní články a seriály na Rootu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Funkce s&nbsp;proměnným počtem parametrů</h2>

<p>V&nbsp;jazyce Lua je umožněno vytvářet funkce akceptující proměnný počet
parametrů. Tato technika byla v&nbsp;programovacím jazyce Shine zjednodušena,
takže je možné pojmenovat parametr, do kterého se uloží všechny nepovinné
parametry tak, jakoby se jednalo o tabulku (interně se také jedná o tabulku).
Před jméno tohoto parametru je nutné zapsat trojici teček. V&nbsp;jazyce Lua je
naproti tomu použita pouze trojice teček, ovšem přístup k&nbsp;hodnotám je
složitější.</p>

<p>Podívejme se na jednoduchý příklad, v&nbsp;němž budeme sčítat hodnoty všech
předaných parametrů. Může jich být libovolný počet a nemusíme předat ani jeden
parametr:</p>

<pre>
function sum(...args)
    s = 0
&nbsp;
    for i, v in ipairs(args) do
        s = s + v
    end
&nbsp;
    return s
end
&nbsp;
s = sum(1, 2, 3, 4)
print(s)
&nbsp;
s = sum(1)
print(s)
&nbsp;
s = sum()
print(s)
</pre>

<p>Po spuštění tohoto příkladu se zobrazí očekávané výsledky:</p>

<pre>
10
1
0
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce s&nbsp;povinným parametrem následovaným proměnným počtem parametrů</h2>

<p>Samozřejmě je možné v&nbsp;definici funkce zkombinovat povinné parametry
s&nbsp;proměnným počtem parametrů. Základní koncept je ukázán na dalším
demonstračním příkladu, v&nbsp;němž je definována funkce s&nbsp;jedním povinným
parametrem, za nímž mohou následovat parametry nepovinné:</p>

<pre>
function mac(coefficient, ...args)
    s = 0
&nbsp;
    for i, v in ipairs(args) do
        s = s + v * coefficient
    end
&nbsp;
    return s
end
&nbsp;
s = mac(1.0, 1, 2, 3, 4)
print(s)
&nbsp;
&nbsp;
s = mac(0.5, 1, 2, 3, 4)
print(s)
&nbsp;
&nbsp;
s = mac(2.0, 1, 2, 3, 4)
print(s)
</pre>

<p>Výsledky opět odpovídají očekávání &ndash; vždy se jedná o součet hodnot 1,
2, 3 a 4, ovšem pokaždé s&nbsp;jinou váhou:</p>

<pre>
10
5
20
</pre>

<p>Pro úplnost se ještě podívejme na funkci s&nbsp;jedním parametrem
s&nbsp;výchozí hodnotou (pokud není příslušný argument zadán), za nímž může
následovat libovolný počet parametrů:</p>

<pre>
function mac(coefficient=1.0, ...args)
    s = 0
&nbsp;
    for i, v in ipairs(args) do
        s = s + v * coefficient
    end
&nbsp;
    return s
end
&nbsp;
s = mac(1.0, 1, 2, 3, 4)
print(s)
&nbsp;
&nbsp;
s = mac(0.5, 1, 2, 3, 4)
print(s)
&nbsp;
&nbsp;
s = mac(2.0, 1, 2, 3, 4)
print(s)
&nbsp;
&nbsp;
s = mac(10, 20)
print(s)
&nbsp;
&nbsp;
s = mac(10)
print(s)
</pre>

<p>Takto budou vypadat výsledky pro všechny výše uvedené kombinace argumentů
předaných do funkce nazvané <strong>mac</strong>:</p>

<pre>
10
5
20
200
0
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Předání tabulky do funkce</h2>

<p>Připomeňme si, že jak v&nbsp;jazyce Lua, tak i v&nbsp;jazyce Shine je
základním kontejnerem (tedy datovou strukturou navrženou tak, že může obsahovat
další hodnoty) tabulka (<i>table</i>), která je interně rozdělena na část
s&nbsp;polem a část se slovníkem. Hodnotami uloženými v&nbsp;poli se prochází
pomocí <strong>ipairs</strong> nebo s&nbsp;využitím indexů ve formě selektorů,
zatímco s&nbsp;hodnotami uloženými ve slovníkové části se prochází pomocí
<strong>pairs</strong> nebo s&nbsp;využitím klíčů ve formě selektorů.</p>

<p>Tabulku je pochopitelně možné předat při volání funkce a v&nbsp;případě
jazyka Shine můžeme uvedením typu zajistit, že se nebude předávat hodnota
odlišného typu. Funkci pro výpočet sumy hodnot tedy můžeme upravit tak, že bude
akceptovat jediný povinný parametr typu <i>tabulka</i>, což je ostatně patrné i
z&nbsp;toho, s&nbsp;jakým argumentem se tato funkce volá:</p>

<pre>
function sum(values is Table)
    s = 0
&nbsp;
    for i, v in ipairs(values) do
        s = s + v
    end
&nbsp;
return s
end
&nbsp;
s = sum({1, 2, 3, 4})
print(s)
&nbsp;
s = sum({1})
print(s)
&nbsp;
s = sum({})
print(s)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se této funkci
skutečně předává tabulka.</div></p>

<p>Výsledky:</p>

<pre>
10
1
0
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Předání pole do funkce</h2>

<p>Pole, tedy přesněji řečeno typ <i>Array</i>, je v&nbsp;jazyce Shine podtypem
tabulky, takže do funkce <strong>sum</strong> můžeme přímo předat i pole:</p>

<pre>
function sum(values is Table)
    s = 0
&nbsp;
    for i, v in ipairs(values) do
        s = s + v
    end
&nbsp;
    return s
end
&nbsp;
s = sum([1, 2, 3, 4])
print(s)
&nbsp;
s = sum([1])
print(s)
&nbsp;
s = sum([])
print(s)
</pre>

<p>V&nbsp;takovém případě je ovšem většinou vhodnější povolit předávání pouze
polí a nikoli obecných tabulek. Změníme tedy typ parametru funkce
<strong>sum</strong> z&nbsp;<strong>Table</strong> na
<strong>Array</strong>:</p>

<pre>
function sum(values is Array)
s = 0
&nbsp;
for i, v in ipairs(values) do
    s = s + v
end
&nbsp;
return s
end
&nbsp;
s = sum([1, 2, 3, 4])
print(s)
&nbsp;
s = sum([1])
print(s)
&nbsp;
s = sum([])
print(s)
</pre>

<p>Nyní již nebude možné do takto upravené funkce předat obecnou tabulku:</p>

<pre>
function sum(values is Array)
    s = 0
&nbsp;
    for i, v in ipairs(values) do
        s = s + v
    end
&nbsp;
    return s
end
&nbsp;
s = sum({1, 2, 3, 4})
print(s)
&nbsp;
s = sum({1})
print(s)
&nbsp;
s = sum({})
print(s)
</pre>

<p>V&nbsp;tomto případě se ohlásí chyba:</p>

<pre>
Error: 23_array_type_2.shn:11: bad argument #1 to 'sum' (Array expected got Table)
stack traceback:
        [C]: in function 'error'
        23_array_type_2.shn:1: in function 'sum'
        23_array_type_2.shn:11: in main chunk
        [string "shine"]: in main chunk
        [string "shine"]: in main chunk
        [C]: at 0x56196cdf9510
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Rozdíly mezi tabulkou a polem</h2>

<p>V&nbsp;předchozím textu jsme se již zmínili o tabulkách a polích. Připomeňme
si nejdříve, jak se pracuje s&nbsp;tabulkami. V&nbsp;první řadě se jedná o
slovníky spojené s&nbsp;polem; interně jsou tedy některé prvky vybírány přes
klíč a jiné přes index. To má více důvodů, jedním z&nbsp;nich je snaha o větší
efektivitu jak z&nbsp;pohledu paměti, tak i výpočetní náročnosti. Jednoduchý
slovník může v&nbsp;jazyce Lua vypadat následovně:</p>

<pre>
t = {foo=1, bar=2.5, baz="*"}
&nbsp;
for k, v in pairs(t) do
    print(k, v)
end
</pre>

<p>Naprosto stejně lze se slovníkem pracovat v&nbsp;jazyku Shine:</p>

<pre>
t = {foo=1, bar=2.5, baz="*"}
&nbsp;
for k, v in pairs(t) do
    print(k, v)
end
</pre>

<p>Výsledek:</p>

<pre>
baz     *
foo     1
bar     2.5
</pre>

<p>Jedním z&nbsp;problematických rysů tabulek je fakt, že nelze uložit hodnoty
<strong>nil</strong>:</p>

<pre>
t = {foo=1, bar=nil, baz="*"}
&nbsp;
for k, v in pairs(t) do
    print(k, v)
end
</pre>

<p>Nyní se vypíšou pouze dva prvky z&nbsp;tabulky a nikoli prvky tři:</p>

<pre>
foo     1
baz     *
</pre>

<p>Ovšem naprosto stejně se chová i jazyk Shine:</p>

<pre>
t = {foo=1, bar=nil, baz="*"}
&nbsp;
for k, v in pairs(t) do
    print(k, v)
end
</pre>

<p><div class="rs-tip-major">Poznámka: toto chování je odlišné od Pythonu,
v&nbsp;němž můžeme bez problémů psát:</div></p>

<pre>
x={"foo":1, "bar":None, "baz":"*"}
&nbsp;
for k,v in x.items():
    print(k,v)
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
foo 1
bar None
baz *
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Odlišná forma zápisu tabulek</h2>

<p>Při zápisu definice tabulek se v&nbsp;programovacím jazyku Lua používá jako
oddělovač prvků (či dvojic klíč-hodnota) čárka. V&nbsp;jazyce Shine je tento
zápis samozřejmě taktéž podporován a navíc je možné jednotlivé prvky jednoduše
oddělit prázdným řádkem tak, jak je to ukázáno v&nbsp;dalším demonstračním
příkladu:</p>

<pre>
t = {
    foo=1
    bar=true
    baz="*"
}
&nbsp;
for k, v in pairs(t) do
    print(k, v)
end
</pre>

<p>Výsledek po spuštění v&nbsp;interpretru jazyka Shine:</p>

<pre>
baz     *
foo     1
bar     true
</pre>

<p>Naproti tomu standardní interpret jazyka Lua tento zápis nerozpozná:</p>

<pre>
lua: 27_table_3.lua:3: '}' expected (to close '{' at line 1) near 'bar'
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Od tabulek k&nbsp;polím s&nbsp;plnohodnotnými prvky <strong>nil</strong></h2>

<p>Připomeňme si, že do tabulek není možné uložit hodnotu <strong>nil</strong>,
a to ani do &bdquo;polní&ldquo; části tabulek. Ostatně si to můžeme ověřit
spuštěním tohoto skriptu, v&nbsp;jehož tabulce má poslední prvek právě hodnotu
<strong>nil</strong>:</p>

<pre>
t = {"foo", 2, "bar", true, nil}
&nbsp;
for i, v in ipairs(t) do
    print(i, v)
end
</pre>

<p>Nezávisle na tom, zda použijeme interpret jazyka Lua či Shine, dostaneme
stejné výsledky &ndash; pole se čtyřmi prvky:</p>

<pre>
1       foo
2       2
3       bar
4       true
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti bude situace ještě horší,
pokud <strong>nil</strong> uvedeme jako například třetí prvek:</div></p>

<pre>
t = {"foo", 2, nil, "bar", true, nil}
&nbsp;
for i, v in ipairs(t) do
    print(i, v)
end
</pre>

<p>Nyní bude výsledkem zdánlivě dvouprvková tabulka:</p>

<pre>
1       foo
2       2
</pre>

<p>Ovšem zbylé prvky jsou schovány ve &bdquo;slovníkové&ldquo; části dostupné
přes iterátor <strong>pairs</strong>:</p>

<pre>
t = {"foo", 2, nil, "bar", true, nil}
&nbsp;
for k, v in pairs(t) do
    print(k, v)
end
</pre>

<p>Výsledky:</p>

<pre>
1       foo
2       2
4       bar
5       true
</pre>

<p>Naproti tomu <i>pole</i> v&nbsp;jazyku Shine hodnotu <strong>nil</strong>
obsahovat mohou:</p>

<pre>
t = ["foo", 2, "bar", true, nil]
&nbsp;
for i, v in ipairs(t) do
    print(i, v)
end
</pre>

<p>Výsledky to dokazují:</p>

<pre>
0       foo
1       2
2       bar
3       true
4       nil
</pre>

<p>Prvky <strong>nil</strong> mohou být v&nbsp;poli kdekoli, tedy na začátku,
uprostřed i na konci:</p>

<pre>
t = [nil, "foo", 2, nil, "bar", true, nil]
&nbsp;
for i, v in ipairs(t) do
    print(i, v)
end
</pre>

<p>Pole se i v&nbsp;tomto případě bude stále chovat jako běžné pole:</p>

<pre>
0       nil
1       foo
2       2
3       nil
4       bar
5       true
6       nil
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Manipulace s&nbsp;poli: operace <strong>push</strong> a <strong>pop</strong></h2>

<p>S&nbsp;poli, tedy s&nbsp;hodnotami typu <i>Array</i> lze provádět několik
operací, které jsou dostupné formou metod. Mezi dvě užitečné operace patří
<strong>push</strong> a <strong>pop</strong>. Operace <strong>push</strong>
připojuje prvek na konec pole, tedy na index odpovídající
<strong>#pole</strong>, kde operátor <strong>#</strong> vrací délku pole či
tabulky. A naopak operace <strong>pop</strong> čte a odstraňuje prvky
z&nbsp;konce pole: na pole tedy můžeme nahlížet jako na zásobník, jehož TOS
(<i>Top Of Stack</i>) je umístěn na konci pole:</p>

<pre>
function print_array(t)
    for i, v in ipairs(t) do
        print(i, v)
    end
    print("-------------------")
end
&nbsp;
t = []
&nbsp;
t.push("foo")
t.push("bar")
t.push("baz")
print_array(t)
&nbsp;
for i = 0, 2 do
    t.pop()
    print_array(t)
end
</pre>

<p>Výsledky:</p>

<pre>
0       foo
1       bar
2       baz
-------------------
0       foo
1       bar
-------------------
0       foo
-------------------
-------------------
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Manipulace s&nbsp;poli: operace <strong>shift</strong> a <strong>unshift</strong></h2>

<p>Mezi další dvě operace s&nbsp;poli patří <strong>shift</strong> a
<strong>unshift</strong>, které ovšem mohou být poněkud matoucí (jejich význam
je totiž jakoby prohozen). Operace <strong>unshift</strong> přidává prvek na
začátek pole a odsouvá další prvky na vyšší indexy, zatímco operace
<strong>shift</strong> přečte první prvek z&nbsp;pole, odstraní ho a posune
všechny ostatní prvky o index níže. Ostatně celá funkce obou operací je patrná
z&nbsp;dalšího demonstračního příkladu:</p>

<pre>
function print_array(t)
    for i, v in ipairs(t) do
        print(i, v)
    end
    print("-------------------")
end
&nbsp;
t = []
&nbsp;
t.unshift("foo")
t.unshift("bar")
t.unshift("baz")
print_array(t)
&nbsp;
for i = 0, 2 do
    t.shift()
    print_array(t)
end
</pre>

<p>Nejprve se vypíše pole naplněné trojicí operací <strong>unshift</strong> a
následně se postupně prvky z&nbsp;pole zase čtou a odstraňují:</p>

<pre>
0       baz
1       bar
2       foo
-------------------
0       bar
1       foo
-------------------
0       foo
-------------------
-------------------
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Převod obsahu celého pole na řetězec operací <strong>join</strong></h2>

<p>Podobně jako v&nbsp;dalších programovacích jazycích (Python atd.) je možné
celé pole resp.&nbsp;v&nbsp;již zmíněném Pythonu spíše seznam, převést na
řetězec, a to konkrétně operací typu <strong>join</strong>. V&nbsp;některých
jazycích je tato operace představována metodou třídy <strong>string</strong>,
ovšem v&nbsp;jazyce Shine se jedná o metodu třídy <strong>array</strong>,
tj.&nbsp;její volání má prohozeného příjemce a argument:</p>

<pre>
t = []
&nbsp;
for i = 0, 10 do
    t.push(i)
end
&nbsp;
joined = t.join(",")
print(joined)
&nbsp;
joined = t.join(" ")
print(joined)
&nbsp;
joined = t.join("; ")
print(joined)
</pre>

<p>Výsledky by měly vypadat takto:</p>

<pre>
0,1,2,3,4,5,6,7,8,9,10
0 1 2 3 4 5 6 7 8 9 10
0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Rozdíly mezi řetězci v&nbsp;jazycích Lua a Shine</h2>

<p>I když jazyk Shine do značné míry vychází z&nbsp;jazyka Lua, jsou některé
jazykové konstrukce diametrálně odlišné. Asi nejvíce je to patrné na operátoru
určeném pro spojení dvou řetězců. V&nbsp;jazyce Lua se tento operátor zapisuje
formou dvou teček a je asociativní zleva. To znamená, že můžeme velmi snadno
spojit tři řetězce a vypsat výsledek tohoto spojení (tedy nový řetězec):</p>

<pre>
s1 = "Hello"
s2 = "\x20"
s3 = 'world'
&nbsp;
print(s1 .. s2 .. s3)
</pre>

<p>Výsledkem bude podle očekávání zpráva</p>

<pre>
Hello world
</pre>

<p>Ovšem naprosto stejný kód, tentokrát spuštěný v&nbsp;interpretru jazyka
Shine, vypíše odlišnou hodnotu:</p>

<pre>
s1 = "Hello"
s2 = "\x20"
s3 = 'world'
&nbsp;
print(s1 .. s2 .. s3)
</pre>

<p>Nyní je totiž operátor .. chápán jako specifikace rozsahu u
&bdquo;řezů&ldquo; (slices):</p>

<pre>
$ <strong>shine 32_string.shn </strong>
&nbsp;
Range(Hello, Range( , world))
</pre>

<p>Ve Shine se pro spojení řetězců používá odlišný operátor, a to konkrétně
tilda. Kód je tedy nutné přepsat do této podoby:</p>

<pre>
s1 = "Hello"
s2 = "\x20"
s3 = 'world'
&nbsp;
print(s1 ~ s2 ~ s3)
</pre>

<p><div class="rs-tip-major">Poznámka: tato nekompatibilita je poměrně závažná
v&nbsp;praxi.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Interpolace řetězců</h2>

<p>Podobně jako v&nbsp;mnoha moderních programovacích jazycích lze i ve Shine
využít takzvanou interpolaci řetězců. Řetězec je v&nbsp;tomto případě nutné
chápat jako <i>šablonu</i>, do které se doplňují hodnoty konstant, výrazů a
proměnných. Hodnoty (výrazy), které se mají do řetězce &bdquo;propsat&ldquo;,
je nutné zapsat mezi složené závorky a navíc musí být před levou složenou
závorkou znak %. Navíc platí podmínka, že aby interpolace proběhla, musí být
řetězce uloženy ve dvojitých uvozovkách:</p>

<pre>
s1 = "Hello"
s2 = 'world'
&nbsp;
print("%{s1} %{s2}!")
</pre>

<p>Tento skript po svém spuštění vypíše:</p>

<pre>
Hello world!
</pre>

<p>Pokud ovšem řetězce uložíme do jednoduchých uvozovek (apostrofů),
interpolace neproběhne:</p>

<pre>
s1 = "Hello"
s2 = 'world'
&nbsp;
print('%{s1} %{s2}!')
</pre>

<p>Výsledkem bude v&nbsp;tomto případě výpis původního řetězce:</p>

<pre>
%{s1} %{s2}!
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto ohledu se tedy Shine podobá
shell skriptům.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Operátory v&nbsp;jazyce Shine</h2>

<p>Již <a href="#k12">v&nbsp;předchozí kapitole</a> jsme narazili na nový
význam některých operátorů. Proto si všechny operátory podporované tímto
programovacím jazykem vypišme, a to jak s&nbsp;uvedením priority (od nejvyšší
k&nbsp;nejnižší), tak i asociativity. Většina operátorů existuje již
v&nbsp;jazyce Lua, některé však dostaly odlišný význam a najdeme zde i nové
operátory (unpack atd.):</p>

<table>
<tr><th>Operátor</th><th>Priorita</th><th>Asociativita</th><th>Stručný popis</th></tr>
<tr><td>#_  </td><td>14</td><td>zprava doleva</td><td>délka pole/tabulky</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>**  </td><td>13</td><td>zprava doleva</td><td>umocnění</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>not_</td><td>12</td><td>zprava doleva</td><td>logická negace</td></tr>
<tr><td>!_  </td><td>12</td><td>zprava doleva</td><td>logická negace</td></tr>
<tr><td>~_  </td><td>12</td><td>zprava doleva</td><td>bitová negace</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>*   </td><td>11</td><td>zleva doprava</td><td>součin</td></tr>
<tr><td>/   </td><td>11</td><td>zleva doprava</td><td>podíl</td></tr>
<tr><td>%   </td><td>11</td><td>zleva doprava</td><td>zbytek po dělení (modulo)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>+   </td><td>10</td><td>zleva doprava</td><td>součet</td></tr>
<tr><td>~   </td><td>10</td><td>zleva doprava</td><td>spojení řetězců</td></tr>
<tr><td>-   </td><td>10</td><td>zleva doprava</td><td>rozdíl</td></tr>
<tr><td>..  </td><td>10</td><td>zprava doleva</td><td>operace range (slice)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&gt;&gt;&gt;</td><td>9 </td><td>zleva doprava</td><td>aritmetický posun doprava</td></tr>
<tr><td>&gt;&gt;</td><td>9 </td><td>zleva doprava</td><td>bitový posun doprava</td></tr>
<tr><td>&lt;&lt;</td><td>9 </td><td>zleva doprava</td><td>bitový posun doleva</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&amp;   </td><td>8 </td><td>zleva doprava</td><td>bitová operace AND</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>^   </td><td>7 </td><td>zleva doprava</td><td>bitová operace XOR</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>|   </td><td>6 </td><td>zleva doprava</td><td>bitová operace OR</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&lt; </td><td>5 </td><td>zleva doprava</td><td>relační operace na relaci menší než</td></tr>
<tr><td>&gt; </td><td>5 </td><td>zleva doprava</td><td>relační operace na relaci větší něž</td></tr>
<tr><td>&lt;=</td><td>5 </td><td>zleva doprava</td><td>relační operace na relaci menší nebo rovno</td></tr>
<tr><td>&gt;=</td><td>5 </td><td>zleva doprava</td><td>relační operace na relaci větší nebo rovno</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>is  </td><td>4 </td><td>zleva doprava</td><td>typová shoda</td></tr>
<tr><td>as  </td><td>4 </td><td>zleva doprava</td><td>typová koerce</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>==  </td><td>3 </td><td>zleva doprava</td><td>porovnání na rovnost</td></tr>
<tr><td>!=  </td><td>3 </td><td>zleva doprava</td><td>porovnání na nerovnost</td></tr>
<tr><td>~~  </td><td>3 </td><td>zleva doprava</td><td>operace match</td></tr>
<tr><td>!~  </td><td>3 </td><td>zleva doprava</td><td>negace operace match</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>and </td><td>2 </td><td>zleva doprava</td><td>logický součin</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>or  </td><td>1 </td><td>zleva doprava</td><td>logický součet</td></tr>
<tr><td>..._</td><td>1 </td><td>zprava doleva</td><td>operace unpack</td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zobrazení naparsovaného zdrojového kódu převedeného do formy stromu</h2>

<p>V&nbsp;závěrečné části dnešního článku se podívejme na některé možnosti
nabízené překladačem <strong>shinec</strong> (viz &bdquo;c&ldquo; na konci
tohoto jména). Při použití přepínače <strong>-p</strong> se zobrazí zdrojový
kód po svém naparsování a převodu do formy stromu. Nejedná se o čistý AST ale
spíše o derivační strom s&nbsp;podrobnějšími informacemi o tom, na kterém místě
v&nbsp;původním kódu je uzel (uzly) uložen.</p>

<p>Ukažme si to na následujícím zdrojovém kódu, který obsahuje jediný
výraz:</p>

<pre>
x = 1 + 2
</pre>

<p>Derivační strom si necháme zobrazit tímto příkazem:</p>

<pre>
$ <strong>./shinec -p expression1.shn</strong>
</pre>

<p>A výsledkem by měla být tato (relativně dobře čitelná) struktura:</p>

<pre>
--Shine parse tree:
{
    "type": "Chunk",
    "body": [
        {
            "type": "ExpressionStatement",
            "line": 1,
            "expression": {
                "type": "AssignmentExpression",
                "oper": "=",
                "right": [
                    {
                        "right": {
                            "type": "Literal",
                            "line": 1,
                            "value": 2
                        },
                        "left": {
                            "type": "Literal",
                            "line": 1,
                            "value": 1
                        },
                        "type": "BinaryExpression",
                        "operator": "+",
                        "line": 1
                    }
                ],
                "left": [
                    {
                        "type": "Identifier",
                        "line": 1,
                        "name": "x",
                        "check": true
                    }
                ]
            }
        }
    ]
}
</pre>

<p>Vyzkoušejme si to ještě na nepatrně složitějším příkladu s&nbsp;operátory
s&nbsp;různou prioritou:</p>

<pre>
x = 1 + 2 * 3 ** 4
</pre>

<p>Výsledný derivační strom:</p>

<pre>
--Shine parse tree:
{
    "type": "Chunk",
    "body": [
        {
            "type": "ExpressionStatement",
            "line": 1,
            "expression": {
                "type": "AssignmentExpression",
                "oper": "=",
                "right": [
                    {
                        "right": {
                            "type": "BinaryExpression",
                            "operator": "*",
                            "right": {
                                "type": "BinaryExpression",
                                "operator": "**",
                                "right": {
                                    "type": "Literal",
                                    "line": 1,
                                    "value": 4
                                },
                                "left": {
                                    "type": "Literal",
                                    "line": 1,
                                    "value": 3
                                }
                            },
                            "left": {
                                "type": "Literal",
                                "line": 1,
                                "value": 2
                            }
                        },
                        "left": {
                            "type": "Literal",
                            "line": 1,
                            "value": 1
                        },
                        "type": "BinaryExpression",
                        "operator": "+",
                        "line": 1
                    }
                ],
                "left": [
                    {
                        "type": "Identifier",
                        "line": 1,
                        "name": "x",
                        "check": true
                    }
                ]
            }
        }
    ]
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zobrazení bajtkódu</h2>

<p>Zobrazit si můžeme i bajtkód získaný po parsingu a překladu. Nechme si
například zobrazit bajtkód získaný překladem tohoto jednoduchého skriptu:</p>

<pre>
x = 1
y = 2
z = x + y
print(z)
</pre>

<p>Zobrazení bajtkódu se provede příkazem:</p>

<pre>
$ <strong>shinec -b example.shn</strong>
</pre>

<p>Výsledek by měl vypadat následovně:</p>

<pre>
-- BYTECODE -- expression.shn:0-4
0001    GGET     0   0      ; "require"
0002    KSTR     1   1      ; "core"
0003    CALL     0   2   2
0004    TGETS    0   0   2  ; "__magic__"
0005    GGET     1   3      ; "_G"
0006    TGETS    1   1   4  ; "module"
0007    VARG     2   2   0
0008    TGETS    3   0   5  ; "environ"
0009    CALL     1   1   3
0010    KPRI     1   0
0011    KSHORT   1   1
0012    KPRI     2   0
0013    KSHORT   2   2
0014    KPRI     3   0
0015    ADDVV    3   1   2
0016    GGET     4   6      ; "print"
0017    MOV      5   3
0018    CALL     4   1   2
0019    RET0     0   1
</pre>

<p>Z&nbsp;výsledků je patrné, že se používají instrukce tříadresového kódu,
který bývá efektivnější, než zásobníkový kód používaný například virtuálním
strojem jazyka Python. Instrukce <strong>KPRI</strong> nastaví první operand
(index proměnné) na hodnotu specifikovanou ve druhém operandu, instrukce
<strong>KSHORT</strong> načte konstantu a například <strong>ADDVV</strong>
sečte proměnné s&nbsp;indexy 1 a 2, výsledek uloží do proměnné s&nbsp;indexem
3.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Zobrazení pseudokódu používaného virtuálním strojem s&nbsp;JITem</h2>

<p>Poslední zajímavostí překladače <strong>shinec</strong> je jeho schopnost
zobrazit pseudokód tak, jak je (či bude) zpracováván virtuálním strojem
programovacího jazyka Shine s&nbsp;JITem. Pro tento účel se použije přepínač
<strong>-o</strong>:</p>

<pre>
$ <strong>shinec -o expression.shn</strong>
&nbsp;
;TvmJIT opcode tree:
&nbsp;
(!line "@expression.shn" 1)(!define __magic__ (!index (!call1 require "core") "__magic__"))(!call (!index _G "module") !vararg (!index __magic__ "environ"))
(!line 1) (!define (x) (!nil))(!massign (x) (1))
(!line 2) (!define (y) (!nil))(!massign (y) (2))
(!line 3) (!define (z) (!nil))(!massign (z) ((!add x y)))
(!line 4) (!call print z)
</pre>

<p>Výsledek připomíná &ndash; nikoli náhodou &ndash; Scheme či LISP. Umožňuje
provádění symbolických manipulací při optimalizacích atd.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah závěrečné části</h2>

<p>Ve třetí a současně i závěrečné části miniseriálu o programovacím jazyku
Shine si popíšeme tři důležité vlastnosti Shine, které v&nbsp;původním jazyku
Lua nenalezneme. V&nbsp;první řadě se jedná o podporu tříd tak, jak je tomu
v&nbsp;mnoha dalších mainstreamových jazycích. Dále se zmíníme o <i>pattern
matchingu</i> a taktéž o podpoře takzvaných rozsahů (<i>range</i>),
s&nbsp;nimiž jsme se nepřímo setkali při zmínce o rozdílných vlastnostech
operátoru .. (dvě tečky).</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady popsané v&nbsp;dnešním článku byly uloženy do
veřejného <a href="https://github.com/tisnik/presentations.git">Git
repositáře</a>, z&nbsp;něhož si je můžete snadno stáhnout a otestovat ve své
instalaci jazyka Shine:</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Odkaz</th></tr>
<tr><td>1</td><td>01_hello_world.lua</td><td>program typu &bdquo;Hello, world&ldquo; ve variantě pro programovací jazyky Lua i Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/01_hello_world.lua">https://github.com/tisnik/presentations/blob/master/shine/01_hello_world.lua</a></td></tr>
<tr><td>2</td><td>02_hello_world.lua</td><td>program typu &bdquo;Hello, world&ldquo; ve variantě pro programovací jazyky Lua i Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/02_hello_world.lua">https://github.com/tisnik/presentations/blob/master/shine/02_hello_world.lua</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>03_print_values.lua</td><td>volání funkcí s&nbsp;větším počtem parametrů, varianta pro jazyk Lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/03_print_values.lua">https://github.com/tisnik/presentations/blob/master/shine/03_print_values.lua</a></td></tr>
<tr><td>4</td><td>03_print_values.shn</td><td>volání funkcí s&nbsp;větším počtem parametrů, varianta pro jazyk Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/03_print_values.shn">https://github.com/tisnik/presentations/blob/master/shine/03_print_values.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>04_comments.lua</td><td>zápis komentářů do programového kódu, varianta pro jazyk Lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/04_comments.lua">https://github.com/tisnik/presentations/blob/master/shine/04_comments.lua</a></td></tr>
<tr><td>6</td><td>04_comments.shn</td><td>zápis komentářů do programového kódu, varianta pro jazyk Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/04_comments.shn">https://github.com/tisnik/presentations/blob/master/shine/04_comments.shn</a></td></tr>
<tr><td>7</td><td>05_comments.shn</td><td>zápis komentářů do programového kódu, varianta pro jazyk Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/05_comments.shn">https://github.com/tisnik/presentations/blob/master/shine/05_comments.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>8</td><td>06_function_call.lua</td><td>definice a volání funkcí, varianta pro jazyk Lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/06_function_call.lua">https://github.com/tisnik/presentations/blob/master/shine/06_function_call.lua</a></td></tr>
<tr><td>9</td><td>06_function_call.shn</td><td>definice a volání funkcí, varianta pro jazyk Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/06_function_call.shn">https://github.com/tisnik/presentations/blob/master/shine/06_function_call.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>07_default_values.shn</td><td>výchozí hodnoty parametrů funkcí, první varianta</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/07_default_values.shn">https://github.com/tisnik/presentations/blob/master/shine/07_default_values.shn</a></td></tr>
<tr><td>11</td><td>08_default_values.shn</td><td>výchozí hodnoty parametrů funkcí, druhá varianta</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/08_default_values.shn">https://github.com/tisnik/presentations/blob/master/shine/08_default_values.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>09_type_checks.shn</td><td>specifikace typů parametrů funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/09_type_checks.shn">https://github.com/tisnik/presentations/blob/master/shine/09_type_checks.shn</a></td></tr>
<tr><td>13</td><td>10_variable_types.shn</td><td>specifikace typů proměnných, korektní typy</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/10_variable_types.shn">https://github.com/tisnik/presentations/blob/master/shine/10_variable_types.shn</a></td></tr>
<tr><td>14</td><td>11_variable_types.shn</td><td>specifikace typů proměnných, nekorektní typy</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/11_variable_types.shn">https://github.com/tisnik/presentations/blob/master/shine/11_variable_types.shn</a></td></tr>
<tr><td>15</td><td>12_variable_types_in_function.shn</td><td>specifikace typů parametrů lokálních proměnných</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/12_variable_types_in_function.shn">https://github.com/tisnik/presentations/blob/master/shine/12_variable_types_in_function.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>13_local_variables.lua</td><td>globální vs. lokální proměnné, varianta pro jazyk Lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/13_local_variables.lua">https://github.com/tisnik/presentations/blob/master/shine/13_local_variables.lua</a></td></tr>
<tr><td>17</td><td>13_local_variables.shn</td><td>globální vs. lokální proměnné, varianta pro jazyk Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/13_local_variables.shn">https://github.com/tisnik/presentations/blob/master/shine/13_local_variables.shn</a></td></tr>
<tr><td>18</td><td>14_local_variable.shn</td><td>lokální proměnná, použití modifikátoru <strong>local</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/14_local_variable.shn">https://github.com/tisnik/presentations/blob/master/shine/14_local_variable.shn</a></td></tr>
<tr><td>19</td><td>14_local_variables.lua</td><td>lokální proměnná, použití modifikátoru <strong>local</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/14_local_variables.lua">https://github.com/tisnik/presentations/blob/master/shine/14_local_variables.lua</a></td></tr>
<tr><td>20</td><td>15_global_and_local_variable.shn</td><td>globální i lokální proměnná stejného jména, varianta s&nbsp;<strong>local</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/15_global_and_local_variable.shn">https://github.com/tisnik/presentations/blob/master/shine/15_global_and_local_variable.shn</a></td></tr>
<tr><td>21</td><td>16_global_and_local_variable.shn</td><td>globální i lokální proměnná stejného jména, varianta bez <strong>local</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/16_global_and_local_variable.shn">https://github.com/tisnik/presentations/blob/master/shine/16_global_and_local_variable.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>22</td><td>17_counter_1.lua</td><td>čítač vytvořený s&nbsp;využitím uzávěru, varianta pro jazyk Lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/17_counter_1.lua">https://github.com/tisnik/presentations/blob/master/shine/17_counter_1.lua</a></td></tr>
<tr><td>23</td><td>17_counter_1.shn</td><td>čítač vytvořený s&nbsp;využitím uzávěru, varianta pro jazyk Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/17_counter_1.shn">https://github.com/tisnik/presentations/blob/master/shine/17_counter_1.shn</a></td></tr>
<tr><td>24</td><td>18_counter_1.shn</td><td>zjednodušený zápis předchozího příkladu</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/18_counter_1.shn">https://github.com/tisnik/presentations/blob/master/shine/18_counter_1.shn</a></td></tr>
<tr><td>25</td><td>19_counter_2.lua</td><td>čítač s&nbsp;konfigurovatelným krokem, varianta pro jazyk Lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/19_counter_2.lua">https://github.com/tisnik/presentations/blob/master/shine/19_counter_2.lua</a></td></tr>
<tr><td>26</td><td>19_counter_2.shn</td><td>čítač s&nbsp;konfigurovatelným krokem, varianta pro jazyk Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/19_counter_2.shn">https://github.com/tisnik/presentations/blob/master/shine/19_counter_2.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>27</td><td>20_varargs.shn</td><td>zpracování funkce s&nbsp;proměnným počtem parametrů</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/20_varargs.shn">https://github.com/tisnik/presentations/blob/master/shine/20_varargs.shn</a></td></tr>
<tr><td>28</td><td>21_varargs.shn</td><td>zpracování funkce s&nbsp;proměnným počtem parametrů (jeden z&nbsp;parametrů je povinný)</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/21_varargs.shn">https://github.com/tisnik/presentations/blob/master/shine/21_varargs.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>29</td><td>22_table_type.shn</td><td>parametr funkce typu <strong>table</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/22_table_type.shn">https://github.com/tisnik/presentations/blob/master/shine/22_table_type.shn</a></td></tr>
<tr><td>30</td><td>23_array_type.shn</td><td>parametr funkce typu <strong>array</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/23_array_type.shn">https://github.com/tisnik/presentations/blob/master/shine/23_array_type.shn</a></td></tr>
<tr><td>31</td><td>24_default_var_varargs.shn</td><td>kombinace funkce s&nbsp;výchozí hodnotou parametru a proměnným počtem parametrů</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/24_default_var_varargs.shn">https://github.com/tisnik/presentations/blob/master/shine/24_default_var_varargs.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>32</td><td>25_table_1.lua</td><td>běžné tabulky v&nbsp;jazyce Lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/25_table_1.lua">https://github.com/tisnik/presentations/blob/master/shine/25_table_1.lua</a></td></tr>
<tr><td>33</td><td>25_table_1.shn</td><td>běžné tabulky v&nbsp;jazyce Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/25_table_1.shn">https://github.com/tisnik/presentations/blob/master/shine/25_table_1.shn</a></td></tr>
<tr><td>34</td><td>26_table_2.lua</td><td>tabulky a hodnoty <strong>nil</strong> v&nbsp;jazyce Lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/26_table_2.lua">https://github.com/tisnik/presentations/blob/master/shine/26_table_2.lua</a></td></tr>
<tr><td>35</td><td>26_table_2.shn</td><td>tabulky a hodnoty <strong>nil</strong> v&nbsp;jazyce Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/26_table_2.shn">https://github.com/tisnik/presentations/blob/master/shine/26_table_2.shn</a></td></tr>
<tr><td>36</td><td>27_table_3.lua</td><td>zápis tabulek na více řádků, varianta pro jazyk Lua (nekorektní)</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/27_table_3.lua">https://github.com/tisnik/presentations/blob/master/shine/27_table_3.lua</a></td></tr>
<tr><td>37</td><td>27_table_3.shn</td><td>zápis tabulek na více řádků, varianta pro jazyk Lua (korektní)</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/27_table_3.shn">https://github.com/tisnik/presentations/blob/master/shine/27_table_3.shn</a></td></tr>
<tr><td>38</td><td>28_array_1.lua</td><td>tabulka obsahující jen pole (jazyk Lua)</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/28_array_1.lua">https://github.com/tisnik/presentations/blob/master/shine/28_array_1.lua</a></td></tr>
<tr><td>39</td><td>28_array_1.shn</td><td>skutečné pole v&nbsp;jazyku Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/28_array_1.shn">https://github.com/tisnik/presentations/blob/master/shine/28_array_1.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>40</td><td>29_array_push_pop.shn</td><td>pole a operace typu <strong>push</strong> a <strong>pop</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/29_array_push_pop.shn">https://github.com/tisnik/presentations/blob/master/shine/29_array_push_pop.shn</a></td></tr>
<tr><td>41</td><td>30_array_shift_unshift.shn</td><td>pole a operace typu <strong>shift</strong> a <strong>unshift</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/30_array_shift_unshift.shn">https://github.com/tisnik/presentations/blob/master/shine/30_array_shift_unshift.shn</a></td></tr>
<tr><td>42</td><td>31_array_join.shn</td><td>pole a operace typu <strong>join</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/31_array_join.shn">https://github.com/tisnik/presentations/blob/master/shine/31_array_join.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>32_string.lua</td><td>základní operace s&nbsp;řetězci v&nbsp;jazyce Lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/32_string.lua">https://github.com/tisnik/presentations/blob/master/shine/32_string.lua</a></td></tr>
<tr><td>44</td><td>32_string.shn</td><td>odlišné chování operátoru .. při práci s&nbsp;řetězci v&nbsp;jazyce Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/32_string.shn">https://github.com/tisnik/presentations/blob/master/shine/32_string.shn</a></td></tr>
<tr><td>45</td><td>33_string.shn</td><td>korektní způsob spojení řetězců v&nbsp;jazyce Shine</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/33_string.shn">https://github.com/tisnik/presentations/blob/master/shine/33_string.shn</a></td></tr>
<tr><td>46</td><td>34_interpolation.shn</td>interpolace řetězců, první příklad<td></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/34_interpolation.shn">https://github.com/tisnik/presentations/blob/master/shine/34_interpolation.shn</a></td></tr>
<tr><td>47</td><td>35_interpolation.shn</td>interpolace řetězců, druhý příklad<td></td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/35_interpolation.shn">https://github.com/tisnik/presentations/blob/master/shine/35_interpolation.shn</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>48</td><td>36_expression1.shn</td><td>výraz, který lze naparsovat a převést na AST</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/36_expression1.shn">https://github.com/tisnik/presentations/blob/master/shine/36_expression1.shn</a></td></tr>
<tr><td>49</td><td>37_expression2.shn</td><td>výraz, který lze naparsovat a převést na AST</td><td><a href="https://github.com/tisnik/presentations/blob/master/shine/37_expression2.shn">https://github.com/tisnik/presentations/blob/master/shine/37_expression2.shn</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na relevantní články a seriály na Rootu</h2>

<p>S&nbsp;technologiemi souvisejícími s&nbsp;programovacím jazykem Lua,
LuaJITem, ale i s&nbsp;jazyky postavenými nad ekosystémem Luy (viz například
výše zmíněný Moonscript) jsme se již na stránkách Roota několikrát setkali.
Následují odkazy na více či méně relevantní články k&nbsp;dnes probíranému
tématu:</p>

<ol>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Seriál Torch: framework pro strojové učení<br />
<a href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/</a>
</li>

<li>Skriptovací jazyk Lua v&nbsp;aplikacích naprogramovaných v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/">https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/</a>
</li>

<li>Interpretry, překladače, JIT překladače a transpřekladače programovacího jazyka Lua<br />
<a href="https://www.root.cz/clanky/interpretry-prekladace-jit-prekladace-a-transprekladace-programovaciho-jazyka-lua/">https://www.root.cz/clanky/interpretry-prekladace-jit-prekladace-a-transprekladace-programovaciho-jazyka-lua/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua (2)<br />
<a href="http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-2/">http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-2/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua (3)<br />
<a href="http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-3/">http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-3/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua (4)<br />
<a href="http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-4/">http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-4/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua (5 &ndash; tabulky a pole)<br />
<a href="http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-5-tabulky-a-pole/">http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-5-tabulky-a-pole/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua (6 &ndash; překlad programových smyček do mezijazyka LuaJITu)<br />
<a href="http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-6-preklad-programovych-smycek-do-mezijazyka-luajitu/">http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-6-preklad-programovych-smycek-do-mezijazyka-luajitu/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua (7 &ndash; dokončení popisu mezijazyka LuaJITu)<br />
<a href="http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-7-dokonceni-popisu-mezijazyka-luajitu/">http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-7-dokonceni-popisu-mezijazyka-luajitu/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua (8 &ndash; základní vlastnosti trasovacího JITu)<br />
<a href="http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-8-zakladni-vlastnosti-trasovaciho-jitu/">http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-8-zakladni-vlastnosti-trasovaciho-jitu/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua (9 &ndash; další vlastnosti trasovacího JITu)<br />
<a href="http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-9-dalsi-vlastnosti-trasovaciho-jitu/">http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-9-dalsi-vlastnosti-trasovaciho-jitu/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua (10 &ndash; JIT překlad do nativního kódu)<br />
<a href="http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-10-jit-preklad-do-nativniho-kodu/">http://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-10-jit-preklad-do-nativniho-kodu/</a>
</li>

<li>Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua<br />
<a href="https://www.root.cz/clanky/moonscript-jazyk-inspirovany-coffeescriptem-urceny-pro-ekosystem-jazyka-lua/">https://www.root.cz/clanky/moonscript-jazyk-inspirovany-coffeescriptem-urceny-pro-ekosystem-jazyka-lua/</a>
</li>

<li>Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua (2)<br />
<a href="https://www.root.cz/clanky/moonscript-jazyk-inspirovany-coffeescriptem-urceny-pro-ekosystem-jazyka-lua-2/">https://www.root.cz/clanky/moonscript-jazyk-inspirovany-coffeescriptem-urceny-pro-ekosystem-jazyka-lua-2/</a>
</li>

<li>Moonscript: jazyk inspirovaný CoffeeScriptem určený pro ekosystém jazyka Lua (dokončení)<br />
<a href="https://www.root.cz/clanky/moonscript-jazyk-inspirovany-coffeescriptem-urceny-pro-ekosystem-jazyka-lua-dokonceni/">https://www.root.cz/clanky/moonscript-jazyk-inspirovany-coffeescriptem-urceny-pro-ekosystem-jazyka-lua-dokonceni/</a>
</li>

<li>Použití nástroje RQ (Redis Queue) pro správu úloh zpracovávaných na pozadí<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/">https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/</a>
</li>

<li>Proudy (streams) podporované systémem Redis<br />
<a href="https://www.root.cz/clanky/proudy-streams-podporovane-systemem-redis/">https://www.root.cz/clanky/proudy-streams-podporovane-systemem-redis/</a>
</li>

<li>Proudy (streams) podporované systémem Redis (dokončení)<br />
<a href="https://www.root.cz/clanky/proudy-streams-podporovane-systemem-redis-dokonceni/">https://www.root.cz/clanky/proudy-streams-podporovane-systemem-redis-dokonceni/</a>
</li>

<li>Jazyk Shine: „lepší“ Lua s novými jazykovými konstrukcemi a vylepšeními<br />
<a href="https://www.root.cz/clanky/jazyk-shine-lepsi-lua-s-novymi-jazykovymi-konstrukcemi-a-vylepsenimi/">https://www.root.cz/clanky/jazyk-shine-lepsi-lua-s-novymi-jazykovymi-konstrukcemi-a-vylepsenimi/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositář projektu Shine<br />
<a href="https://github.com/richardhundt/shine">https://github.com/richardhundt/shine</a>
</li>

<li>Languages that compile to Lua<br />
<a href="https://github.com/hengestone/lua-languages?tab=readme-ov-file#languages-that-compile-to-lua">https://github.com/hengestone/lua-languages?tab=readme-ov-file#languages-that-compile-to-lua</a>
</li>

<li>Repositář projektu Lua Fun<br />
<a href="https://github.com/luafun/luafun">https://github.com/luafun/luafun</a>
</li>

<li>Lua Functional 0.1.3 documentation<br />
<a href="https://luafun.github.io/reference.html">https://luafun.github.io/reference.html</a>
</li>

<li>Lua Profiler (GitHub)<br />
<a href="https://github.com/luaforge/luaprofiler">https://github.com/luaforge/luaprofiler</a>
</li>

<li>Lua Profiler (LuaForge)<br />
<a href="http://luaforge.net/projects/luaprofiler/">http://luaforge.net/projects/luaprofiler/</a>
</li>

<li>ctrace<br />
<a href="http://webserver2.tecgraf.puc-rio.br/~lhf/ftp/lua/">http://webserver2.tecgraf.puc-rio.br/~lhf/ftp/lua/</a>
</li>

<li>The Lua VM, on the Web<br />
<a href="https://kripken.github.io/lua.vm.js/lua.vm.js.html">https://kripken.github.io/lua.vm.js/lua.vm.js.html</a>
</li>

<li>Lua.vm.js REPL<br />
<a href="https://kripken.github.io/lua.vm.js/repl.html">https://kripken.github.io/lua.vm.js/repl.html</a>
</li>

<li>lua2js<br />
<a href="https://www.npmjs.com/package/lua2js">https://www.npmjs.com/package/lua2js</a>
</li>

<li>lua2js na GitHubu<br />
<a href="https://github.com/basicer/lua2js-dist">https://github.com/basicer/lua2js-dist</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>LuaJIT 2.0 SSA IR<br />
<a href="http://wiki.luajit.org/SSA-IR-2.0">http://wiki.luajit.org/SSA-IR-2.0</a>
</li>

<li>The LuaJIT Project<br />
<a href="http://luajit.org/index.html">http://luajit.org/index.html</a>
</li>

<li>LuaJIT FAQ<br />
<a href="http://luajit.org/faq.html">http://luajit.org/faq.html</a>
</li>

<li>LuaJIT Performance Comparison<br />
<a href="http://luajit.org/performance.html">http://luajit.org/performance.html</a>
</li>

<li>LuaJIT 2.0 intellectual property disclosure and research opportunities<br />
<a href="http://article.gmane.org/gmane.comp.lang.lua.general/58908">http://article.gmane.org/gmane.comp.lang.lua.general/58908</a>
</li>

<li>LuaJIT Wiki<br />
<a href="http://wiki.luajit.org/Home">http://wiki.luajit.org/Home</a>
</li>

<li>LuaJIT 2.0 Bytecode Instructions<br />
<a href="http://wiki.luajit.org/Bytecode-2.0">http://wiki.luajit.org/Bytecode-2.0</a>
</li>

<li>Programming in Lua (first edition)<br />
<a href="http://www.lua.org/pil/contents.html">http://www.lua.org/pil/contents.html</a>
</li>

<li>Lua 5.2 sources<br />
<a href="http://www.lua.org/source/5.2/">http://www.lua.org/source/5.2/</a>
</li>

<li>REPL<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/ProjectsWithLLVM/">http://llvm.org/ProjectsWithLLVM/</a>
</li>

<li>clang: a C language family frontend for LLVM<br />
<a href="http://clang.llvm.org/">http://clang.llvm.org/</a>
</li>

<li>LLVM Backend ("Fastcomp")<br />
<a href="http://kripken.github.io/emscripten-site/docs/building_from_source/LLVM-Backend.html#llvm-backend">http://kripken.github.io/emscripten-site/docs/building_from_source/LLVM-Backend.html#llvm-backend</a>
</li>

<li>Lambda the Ultimate: Coroutines in Lua,<br />
<a href="http://lambda-the-ultimate.org/node/438">http://lambda-the-ultimate.org/node/438</a>
</li>

<li>Coroutines Tutorial,<br />
<a href="http://lua-users.org/wiki/CoroutinesTutorial">http://lua-users.org/wiki/CoroutinesTutorial</a>
</li>

<li>Lua Coroutines Versus Python Generators,<br />
<a href="http://lua-users.org/wiki/LuaCoroutinesVersusPythonGenerators">http://lua-users.org/wiki/LuaCoroutinesVersusPythonGenerators</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

