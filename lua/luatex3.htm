<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovatelný sázecí systém LuaTeX: interní stav LuaTeXu a využití mechanismu callback funkcí</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovatelný sázecí systém LuaTeX: interní stav LuaTeXu a využití mechanismu callback funkcí</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části seriálu o programovatelném sázecím systému LuaTeX se konečně začneme zabývat interními datovými strukturami LuaTeXu a taktéž mechanismem takzvaných callback funkcí, které je možné použít pro ovlivnění sazby popř. i k&nbsp;ovlivnění generování výsledného PDF dokumentu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovatelný sázecí systém LuaTeX: interní stav LuaTeXu a využití mechanismu callback funkcí</a></p>
<p><a href="#k02">2. Použití standardního výstupu a logovacího souboru pro jednoduché ladění skriptů</a></p>
<p><a href="#k03">3. Devátý demonstrační příklad: využití funkce <strong>debugprint()</strong></a></p>
<p><a href="#k04">4. Expanze TeXovských maker podruhé</a></p>
<p><a href="#k05">5. Desátý demonstrační příklad: výpis expandovaného a neexpandovaného makra <strong>\TeX</strong></a></p>
<p><a href="#k06">6. Čtení čítačů nadstavby LaTeX ve skriptech</a></p>
<p><a href="#k07">7. Jedenáctý demonstrační příklad: přečtení hodnot čítačů &bdquo;page&ldquo;, &bdquo;section&ldquo; a &bdquo;subsection&ldquo;</a></p>
<p><a href="#k08">8. Přístup ke stavovým proměnným systému LuaTeX i ke knihovním modulům</a></p>
<p><a href="#k09">9. Dvanáctý demonstrační příklad: výpis všech stavových proměnných systému LuaTeX</a></p>
<p><a href="#k10">10. Mechanismus callback funkcí systému LuaTeX</a></p>
<p><a href="#k11">11. Třináctý demonstrační příklad: výpis všech callback funkcí</a></p>
<p><a href="#k12">12. Čtrnáctý demonstrační příklad: setříděný výpis všech callback funkcí</a></p>
<p><a href="#k13">13. Příklad callback funkce &ndash; &bdquo;hyphenate&ldquo;</a></p>
<p><a href="#k14">14. Patnáctý demonstrační příklad: realizace prázdné callback funkce volané při dělení slov</a></p>
<p><a href="#k15">15. Repositář s&nbsp;popsanými demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovatelný sázecí systém LuaTeX: interní stav LuaTeXu a využití mechanismu callback funkcí</h2>

<p>V&nbsp;předchozích dvou částech [<a
href="http://www.root.cz/clanky/programovatelny-sazeci-system-luatex/">1</a>]
[<a
href="http://www.root.cz/clanky/luatex-pouziti-zakladniho-rozhrani-mezi-texem-a-skripty/">2</a>]
tohoto seriálu jsme se seznámili zejména se způsobem použití příkazu
<strong>\directlua</strong> i s&nbsp;novým LaTeXovským prostředím
<strong>luacode</strong>. Taktéž jsme si ukázali, jak je možné oddělit vlastní
dokument od skriptů psaných v&nbsp;programovacím jazyce Lua, což je
v&nbsp;mnoha ohledech poměrně užitečná vlastnost. Nicméně prozatím celá
interakce mezi TeXem (resp.&nbsp;jeho upraveným jádrem LuaTeX) a interpretrem
jazyka Lua spočívala v&nbsp;použití funkcí <strong>tex.print()</strong> a
<strong>tex.sprint()</strong>, které dokázaly do vstupního bufferu TeXu přidat
nový řetězec, který TeX následně zpracoval stejným způsobem, jakoby byl tento
text zapsán přímo do vstupního dokumentu.</p>

<p>Velká síla LuaTeXu však ve skutečnosti spočívá v&nbsp;tom, že pro
zpracovávaný dokument se v&nbsp;paměti vytváří datová struktura složená
z&nbsp;takzvaných uzlů (<i>nodes</i>), které je možné vhodným způsobem
modifikovat a tak přímo ovlivňovat způsob sazby dokumentu. Je například možné
do všech míst, v&nbsp;nichž se algoritmy TeXu snažily o rozdělení slova, vložit
nějakou značku, vykreslit do dokumentu na určené místo graf atd. Navíc LuaTeX
podporuje koncept takzvaných callback funkcí, které do značné míry zjednodušují
práci s&nbsp;uzly, protože callback funkce jsou zavolány v&nbsp;přesně
specifikovaných okamžicích. Vhodnou kombinací uživatelsky definovaných callback
funkcí a úpravou uzlů je tak možné dosáhnout mnohdy i velmi komplikovaných
efektů.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Použití standardního výstupu a logovacího souboru pro jednoduché ladění skriptů</h2>

<p>Ještě předtím, než si ukážeme další možnosti interakce mezi algoritmy TeXu a
uživatelskými skripty naprogramovanými v&nbsp;jazyku Lua, si ukažme poměrně
užitečnou funkci nazvanou <strong>debugprint()</strong>, jejíž poslední verzi
naleznete v&nbsp;souboru <a
href="https://github.com/tisnik/presentations/blob/master/luatex/slides/debugprint.lua">debugprint.lua</a>.
Tato funkce je ve skutečnosti až triviálně jednoduchá &ndash; řetězec, který je
jí předán jako jediný parametr, je nejdříve vytištěn na standardní výstup
s&nbsp;využitím standardní funkce <strong>print()</strong> a posléze vložen do
vstupního bufferu TeXu další v&nbsp;LuaTeXu standardní funkcí
<strong>tex.print()</strong>. Společně s&nbsp;tím, že je řetězec vypsán na
standardní výstup, dojde k&nbsp;jeho uložení do logovacího souboru, který má
jméno shodné se zpracovávaným dokumentem, samozřejmě až na odlišnou příponu
(.log namísto .tex):</p>

<pre>
function debugprint(str)
    print(str)
    tex.print(str)
end
</pre>

<p>Poznámka: pokud je nutné zapisovat nějaká data do odlišného souboru, lze
použít příkaz <strong>\openout</strong>, který umožňuje otevření až 127 dalších
souborů. Alternativně je samozřejmě možné využít možností nabízených samotným
interpretrem jazyka Lua a jeho knihovnami &ndash; modul <strong>io</strong> a
popř.&nbsp;<strong>os.execute</strong> (s&nbsp;tím, že mohou nastat problémy
s&nbsp;přenositelností, pokud se bude nějakým způsobem pracovat
s&nbsp;adresářovou strukturou).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Devátý demonstrační příklad: využití funkce <strong>debugprint()</strong></h2>

<p>Ukažme si nyní dva způsoby použití nově definované funkce
<strong>debugprint()</strong>. V&nbsp;souboru pojmenovaném <a
href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test9.lua">test9.lua</a>
je umístěna deklarace dvou dalších uživatelských funkcí naprogramovaných ve
skriptovacím jazyku Lua. První z&nbsp;těchto funkcí se jmenuje
<strong>factorial()</strong> a setkali jsme se s&nbsp;ní již v&nbsp;předchozí
části tohoto seriálu ve dvou demonstračních příkladech. Druhá funkce se jmenuje
<strong>poweroftwo()</strong>. Tato funkce slouží pro vytvoření tabulky
(resp.&nbsp;přesněji řečeno interní části tabulky &ndash; jejích řádků, ovšem
ne již hlavičky), a to právě s&nbsp;využitím volání uživatelsky definované
<strong>debugprint()</strong>. To mj.&nbsp;znamená, že se seznam druhých mocnin
dvojky objeví jak ve vysázeném dokumentu, tak i v&nbsp;logovacím souboru
generovaném LuaTeXem (a samozřejmě též na standardním výstupu):</p>

<pre>
function factorial(n)
    if n &lt;= 1 then
        return 1
    else
        return n * factorial(n-1)
    end
end
&nbsp;
function poweroftwo(from,to)
    for n = from,to do
        debugprint(n .. "&amp;" .. math.pow(2, n))
        debugprint("\\\\")
    end
end
</pre>

<p>Dokument, který tento soubor se skriptem načte a následně použije v&nbsp;něm
definované funkce, vypadá následovně:</p>

<pre>
\documentclass{article}
\usepackage{luacode}
&nbsp;
\directlua{dofile("debugprint.lua")}
\directlua{dofile("test9.lua")}
&nbsp;
\newcommand*{\factorial}[1]{%
  \directlua{debugprint(factorial(#1))}%
}
&nbsp;
\begin{document}
&nbsp;
\section*{Faktorial}
&nbsp;
\subsection*{verze 3}
&nbsp;
\begin{tabular}{|r|r|}
\hline
$n$ &amp; $n!$ \\
\hline
1   &amp; \factorial{1} \\
10  &amp; \factorial{10} \\
100 &amp; \factorial{100} \\
\hline
\end{tabular}
&nbsp;
\section*{Mocniny dvou}
&nbsp;
\subsection*{verze 4}
&nbsp;
\begin{tabular}{|r|r|}
\hline
$n$ &amp; $2^n$ \\
\hline
\directlua{poweroftwo(1,16)}
\hline
\end{tabular}
&nbsp;
\end{document}
</pre>

<img src="https://i.iinfo.cz/images/134/luatex3-1.png" class="image-258790" alt="&#160;" height="262" width="400" />
<p><i>Obrázek 1: První část dokumentu obsahující tabulku s&nbsp;faktoriály 1!,
10! a 100!.</i></p>

<p>Po spuštění LuaTeXu (v&nbsp;našem konkrétním případě LuaLaTeXu) by se na
standardní výstup a současně i do logovacího souboru měly vypsat přibližně
následující řádky. Konkrétní čísla verzí, cesty ke stylům apod. se sice mohou
lišit, ale část s&nbsp;výpočtem faktoriálu a tabulky s&nbsp;druhými mocninami
dvojky by měla vypadat stejně, jako je tomu ve výpisu:</p>

<pre>
~$ lualatex test9.tex
This is LuaTeX, Version beta-0.76.0-2013061217 (rev 4627)
 restricted \write18 enabled.
(./test9.tex
LaTeX2e &lt;2011/06/27&gt;
Babel &lt;3.9f&gt; and hyphenation patterns for 2 languages loaded.
(/usr/share/texlive/texmf-dist/tex/latex/base/article.cls
Document Class: article 2007/10/19 v1.4h Standard LaTeX document class
(/usr/share/texlive/texmf-dist/tex/latex/base/size10.clo))
(/usr/share/texlive/texmf-dist/tex/lualatex/luacode/luacode.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifluatex.sty)
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/luatexbase.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/luatex.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/infwarerr.sty)
(/usr/share/texlive/texmf-dist/tex/latex/etex-pkg/etex.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/luatex-loader.sty
(/usr/share/texlive/texmf-dist/scripts/oberdiek/oberdiek.luatex.lua)))
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/luatexbase-compat.sty)
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/luatexbase-modutils.sty
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/luatexbase-loader.sty
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/luatexbase.loader.lua))
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/modutils.lua))
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/luatexbase-regs.sty)
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/luatexbase-attr.sty
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/attr.lua))
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/luatexbase-cctb.sty
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/cctb.lua))
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/luatexbase-mcb.sty
(/usr/share/texlive/texmf-dist/tex/luatex/luatexbase/mcb.lua))))
No file test9.aux.
1
3628800
9.3326215443944e+157
1&amp;2
\\
2&amp;4
\\
3&amp;8
\\
4&amp;16
\\
5&amp;32
\\
6&amp;64
\\
7&amp;128
\\
8&amp;256
\\
9&amp;512
\\
10&amp;1024
\\
11&amp;2048
\\
12&amp;4096
\\
13&amp;8192
\\
14&amp;16384
\\
15&amp;32768
\\
16&amp;65536
\\
[1{/usr/share/texlive/texmf-dist/fonts/map/pdftex/updmap/pdftex.map}]
(./test9.aux) )
 265 words of node memory still in use:
   2 hlist, 1 vlist, 1 rule, 2 glue, 40 glue_spec, 1 write nodes
   avail lists: 2:13,3:13,4:705,5:6,6:159,7:91,9:82,10:3
&lt;/usr/share/texlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmbx12.pfb&gt;&lt;/usr/s
hare/texlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmmi10.pfb&gt;&lt;/usr/share/te
xlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmmi7.pfb&gt;&lt;/usr/share/texlive/te
xmf-dist/fonts/type1/public/amsfonts/cm/cmr10.pfb&gt;
Output written on test9.pdf (1 page, 37960 bytes).
Transcript written on test9.log.
</pre>

<img src="https://i.iinfo.cz/images/134/luatex3-2.png" class="image-258791" alt="&#160;" height="610" width="400" />
<p><i>Obrázek 2: Druhá část dokumentu obsahující tabulku s&nbsp;mocninami čísla
2.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Expanze TeXovských maker podruhé</h2>

<p>Ještě jednou se na chvíli vraťme k&nbsp;problematice expanze TeXovských
maker. Vzhledem k&nbsp;tomu, že nyní již máme k&nbsp;dispozici pomocnou funkci
<strong>debugprint()</strong>, můžeme mnohem lépe prozkoumat, jak přesně se
<i>LuaTeX</i> při expanzi maker chová. Nejprve si uvedeme variantu desátého
demonstračního příkladu bez použití funkce <strong>debugprint()</strong>. Při
sazbě dokumentu se na standardní výstup (a současně i do příslušného logovacího
souboru) vypíše makro <strong>\TeX</strong> takovým způsobem, jak ho
&bdquo;vidí&ldquo; skript naprogramovaný v&nbsp;jazyku Lua. Posléze se vypíše
výsledek příkazu <strong>\noexpand\TeX</strong>, opět stylem, jak ho vidí
skript vytvořený v&nbsp;programovacím jazyku Lua. Vzhledem k&nbsp;tomu, že jak
expandovaná, tak i neexpandovaná makra se do skriptů předávají formou řetězce,
lze snadno zjistit délku těchto řetězců (ve skutečnosti je funkce pro výpočet
délky řetězce nepatrně upravena pro správné chování v&nbsp;případě vstupu
v&nbsp;UTF-8):</p>

<pre>
\documentclass{article}
\usepackage{luacode}
&nbsp;
\begin{document}
&nbsp;
\section*{Macro expansion}
&nbsp;
\directlua{print("------------------")}
\directlua{print([[\TeX]])}
\directlua{print("------------------")}
\directlua{print([[\noexpand\TeX]])}
\directlua{print("------------------")}
&nbsp;
\directlua{tex.print(string.len([[\TeX]]))}
\\
\directlua{tex.print(string.len([[\noexpand\TeX]]))}
&nbsp;
\end{document}
</pre>

<p>Rozdíl mezi vysázeným dokumentem a řetězcem, který je skutečně předán do
vstupního bufferu LuaTeXu, asi nejlépe ilustruje tato část logovacího
souboru:</p>

<pre>
------------------
T\kern -.1667em\lower .5ex\hbox {E}\kern -.125emX\spacefactor \@m 
------------------
\TeX 
------------------
</pre>

<p>Vidíme, že první řetězec předaný do Lua skriptu již obsahoval expandované
makro (základní příkazy TeXu), zatímco ve druhém případě se do Lua skriptu
předalo původní makro, ovšem již bez prefixu <strong>\noexpand</strong>.</p>

<img src="https://i.iinfo.cz/images/134/luatex3-3.png" class="image-258792" alt="&#160;" height="173" width="400" />
<p><i>Obrázek 3: Dokument s&nbsp;vysázenou délkou řetězce představujícího
expandované a neexpandované makro <strong>\TeX</strong>. Vidíme, že expandované
makro má délku 66 znaků, neexpandované pak pouhých pět znaků.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Desátý demonstrační příklad: výpis expandovaného a neexpandovaného makra <strong>\TeX</strong></h2>

<p>Druhá verze tohoto (v&nbsp;pořadí již desátého) demonstračního příkladu může
využít novou funkci <strong>debugprint()</strong>, a to konkrétně následujícím
způsobem:</p>

<pre>
\documentclass{article}
\usepackage{luacode}
&nbsp;
\directlua{dofile("debugprint.lua")}
&nbsp;
\begin{document}
&nbsp;
\section*{Macro expansion}
&nbsp;
\directlua{print("------------------")}
\directlua{debugprint([[\TeX]])}
\\
\directlua{print("------------------")}
\directlua{debugprint([[\noexpand\TeX]])}
\\
\directlua{print("------------------")}
&nbsp;
\directlua{tex.print(string.len([[\TeX]]))}
\\
\directlua{tex.print(string.len([[\noexpand\TeX]]))}
&nbsp;
\end{document}
</pre>

<p>V&nbsp;logovacím souboru bude podle očekávání zobrazena stejná
informace:</p>

<pre>
------------------
T\kern -.1667em\lower .5ex\hbox {E}\kern -.125emX\spacefactor \@m 
------------------
\TeX 
------------------
</pre>

<p>Poznámka: ukázku vygenerovaného dokumentu zde záměrně neuvádím, protože se
jedná o malý kvíz pro čtenáře &ndash; dokážete bez spuštění LuaTeXu popsat, jak
bude vysázený dokument vypadat a proč?</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Čtení čítačů nadstavby LaTeX ve skriptech</h2>

<p>V&nbsp;některých případech může být velmi užitečné mít možnost přistoupit
k&nbsp;čítačům používaným nadstavbou LaTeX. V&nbsp;LaTeXu jsou čítače využívány
ve chvílích, kdy je zapotřebí nějakým způsobem označit (či očíslovat) určitý
textový objekt či část dokumentu. Typickým příkladem jsou kapitoly a
podkapitoly, protože zde se hodnoty čítačů přímo vkládají do sázených
dokumentů. Podobně je tomu v&nbsp;případě seznamů, číslovaných vzorců či
poznámek pod čarou. Ovšem ve skutečnosti je možné vytvářet i nové čítače,
přičemž každému čítači je přiřazeno unikátní jméno a současně i styl výpisu
hodnoty čítače (arabské číslice, římské číslice atd.). Mezi základní příkazy
pro deklaraci čítačů a změnu jejich hodnoty patří:</p>

<table>
<tr><th>Zápis</th><th>Význam</th></tr>
<tr><td>\newcounter{JménoČítače}</td><td>vytvoření nového čítače</td></tr>
<tr><td>\stepcounter{JménoČítače}</td><td>zvýšení hodnoty čítače o jedničku (často používáno)</td></tr>
<tr><td>\setcounter{JménoČítače}{hodnota}</td><td>nastavení hodnoty čítače na specifikovanou hodnotu</td></tr>
<tr><td>\addtocounter{JménoČítače}{hodnota}</td><td>zvýšení hodnoty čítače o specifikovanou hodnotu</td></tr>
</table>

<p>Pro přístup k&nbsp;hodnotám čítačů existují tyto příkazy:</p>

<table>
<tr><th>Zápis</th><th>Význam</th></tr>
<tr><td>\value{JménoČítače}</td><td>hodnota čítače bez formátování (&bdquo;čisté&ldquo; číslo)</td></tr>
<tr><td>\theJménoČítače</td><td>hodnota čítače se vrátí jako naformátovaný řetězec (vše se píše jako jedno slovo)</td></tr>
<tr><td>\arabic{JménoČítače}</td><td>hodnota čítače ve formě řetězce obsahujícího arabské číslo</td></tr>
</table>

<p>Mezi podporované formáty čítače patří především:</p>

<table>
<tr><th>Výchozí formát</th><th>Ukázka</th></tr>
<tr><td>\arabic  </td><td>1, 2, 3 ...</td></tr>
<tr><td>\alph    </td><td>a, b, c ...</td></tr>
<tr><td>\Alph    </td><td>A, B, C ...</td></tr>
<tr><td>\roman   </td><td>i, ii, iii ...</td></tr>
<tr><td>\Roman   </td><td>I, II, III ...</td></tr>
<tr><td>\fnsymbol</td><td>sekvence symbolů, použito například pro poznámky pod čarou</td></tr>
</table>

<p>V&nbsp;LaTeXu jsou již předdefinovány následující čítače, jejichž význam je
zřejmý už z&nbsp;jejich jména:</p>

<ul>
<li>part</li>
<li>chapter</li>
<li>section</li>
<li>subsection</li>
<li>subsubsection</li>
<li>paragraph</li>
<li>subparagraph</li>
<li>page</li>
<li>figure</li>
<li>table</li>
<li>footnote</li>
<li>mpfootnote</li>
</ul>

<p>Pro prostředí <i>enumerate</i> existují tyto čtyři čítače:</p>

<ul>
<li>enumi</li>
<li>enumii</li>
<li>enumiii</li>
<li>enumiv</li>
</ul>

<p>Pro prostředí <i>eqnarray</i> ještě jeden čítač navíc:</p>

<ul>
<li>equation</li>
</ul>

<p>K&nbsp;hodnotám čítačů lze ze skriptu přistupovat (při čtení) velmi
jednoduše, což si ostatně ukážeme na demonstračním příkladu popsaném
v&nbsp;navazující kapitole.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Jedenáctý demonstrační příklad: přečtení hodnot čítačů &bdquo;page&ldquo;, &bdquo;section&ldquo; a &bdquo;subsection&ldquo;</h2>

<p>K&nbsp;hodnotě vybraného čítače se ve skriptu sice nedá přímo přistoupit
(alespoň ne zcela jednoduše a přímočaře), ovšem můžeme použít malý trik a číst
či zapisovat do čítačů nepřímo &ndash; pokud se Lua funkci předá parametr
pojmenovaný například <strong>\thepage</strong>, je tento parametr ještě před
zavoláním Lua funkce expandován a předá se tak ve skutečnosti již hodnota
čítače. O nastavení čítače na jinou hodnotu se postará volání
<strong>tex.print("\setcounter{JménoČítače}{hodnota}")</strong>
popř.&nbsp;<strong>tex.print("\addtocounter{JménoČítače}{hodnota}")</strong>.
Toto volání lze snadno implementovat v&nbsp;uživatelské funkci.  Podívejme se
na první případ &ndash; čtení hodnot čítačů nazvaných &bdquo;page&ldquo;,
&bdquo;section&ldquo; a &bdquo;subsection&ldquo;:</p>

<pre>
\documentclass{article}
\usepackage{luacode}
&nbsp;
\begin{document}
&nbsp;
\section{First section}
&nbsp;
\subsection{First subsection}
&nbsp;
\directlua{tex.print(\thepage)}
\\
\directlua{tex.print(\thesection)}
\\
\directlua{tex.print(\thesubsection)}
\\
&nbsp;
\subsection{Second subsection}
&nbsp;
\directlua{tex.print(\thepage)}
\\
\directlua{tex.print(\thesection)}
\\
\directlua{tex.print(\thesubsection)}
\\
&nbsp;
\section{Second section}
&nbsp;
\directlua{tex.print(\thepage)}
\\
\directlua{tex.print(\thesection)}
\\
\directlua{tex.print(\thesubsection)}
\\
&nbsp;
\end{document}
</pre>

<img src="https://i.iinfo.cz/images/134/luatex3-4.png" class="image-258793" alt="&#160;" height="621" width="400" />
<p><i>Obrázek 4: Dokument, do něhož se postupně vypisovaly hodnoty čítačů
nazvaných &bdquo;page&ldquo;, &bdquo;section&ldquo; a
&bdquo;subsection&ldquo;.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Přístup ke stavovým proměnným systému LuaTeX i ke knihovním modulům</h2>

<p>Kromě základních modulů (knihoven) dostupných ve všech variantách
interpretru programovacího jazyka Lua se v&nbsp;LuaTeXu používají i další
moduly, především pak moduly <strong>tex</strong>, <strong>callback</strong> a
<strong>lua</strong>. Díky tomu, že jazyk Lua ukládá prakticky všechny údaje do
tabulek a metatabulek, není nic jednoduššího, než si obsah všech těchto
modulů/knihoven nechat vypsat. Povšimněte si, že se následující sekvencí tří
programových smyček vypíšou i odkazy na funkce, ovšem ne již těla samotných
funkcí. Je tomu tak z&nbsp;jednoduchého důvodu &ndash; samotný interpret má
totiž po překladu funkcí k&nbsp;dispozici pouze jejich bajtkód a případné
ladicí informace (čísla řádků atd.):</p>

<pre>
\directlua{
print("------------------")
for k,v in pairs(tex) do
    print(k, v)
end
print("------------------")
for k,v in pairs(callback) do
    print(k, v)
end
print("------------------")
for k,v in pairs(lua) do
    print(k,v)
end
print("------------------")
}
</pre>

<p>Pokud zmíněnou trojici programových smyček skutečně použijete
v&nbsp;testovacím dokumentu, měly by se v&nbsp;průběhu sazby na standardní
výstup vypsat mj.&nbsp;i tyto řádky (konkrétní reference se opět budou
odlišovat):</p>

<pre>
------------------
catcode	table: 0x24f88c0
setnest	function: 0x4a12d0
setlist	function: 0x4a5f30
gettoks	function: 0x4a5620
getnest	function: 0x4a5b50
pdfxformname	function: 0x4a15d0
settoks	function: 0x4a56a0
setmathcode	function: 0x4a3c20
write	function: 0x4a4610
count	table: 0x24f9a90
getbox	function: 0x4a4f10
tprint	function: 0x4a4620
sprint	function: 0x4a45f0
setbox	function: 0x4a4f70
...
...
...
fontname	function: 0x4a1660
------------------
find	function: 0x47eff0
register	function: 0x2496910
list	function: 0x47ef60
------------------
bytecode	table: 0x2460d40
setbytecode	function: 0x48f6b0
setluaname	function: 0x48fa80
version	Lua 5.2
name	table: 0x24ffef0
getbytecode	function: 0x48f930
getluaname	function: 0x48f570
------------------
</pre>

<p>Důležitější jsou však hodnoty dostupné s&nbsp;využitím modulu nazvaného
jednoduše <strong>status</strong>. Jedná se jak o konfigurační hodnoty,
z&nbsp;nichž mnohé jsou nastavené při překladu LuaTeXu a další se nastavují
v&nbsp;průběhu iniTeXu, tak i o hodnoty, které se mění v&nbsp;průběhu sazby.
Těchto konfiguračních hodnot existuje poměrně velké množství a postupně se
s&nbsp;nimi seznámíme. Následující tabulka není úplná, ale měla by postačovat
pro základní orientaci:</p>

<table>
<tr><th>Klíč</th><th>Význam</th></tr>
<tr><td>filename</td><td>jméno právě zpracovávaného vstupního souboru (dokumentu)</td></tr>
<tr><td>linenumber</td><td>číslo načítaného řádku ve vstupním souboru (dokumentu)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>output_file_name</td><td>jméno výstupního souboru</td></tr>
<tr><td>total_pages</td><td>počet již vysázených stránek</td></tr>
<tr><td>pdf_gone</td><td>počet vygenerovaných a zapsaných bajtů ve výsledném PDF souboru</td></tr>
<tr><td>pdf_ptr</td><td>počet nezapsaných bajtů do PDF</td></tr>
<tr><td>dvi_gone</td><td>počet vygenerovaných a zapsaných bajtů ve výsledném DVI souboru</td></tr>
<tr><td>dvi_ptr</td><td>počet nezapsaných bajtů do DVI</td></tr>
<tr><td>log_name</td><td>jméno logovacího souboru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>str_ptr</td><td>počet řetězců (aktuální hodnota)</td></tr>
<tr><td>init_str_ptr</td><td>počet řetězců v&nbsp;iniTeXu</td></tr>
<tr><td>max_string</td><td>maximální povolený (nastavený) počet řetězců</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>node_mem_usage</td><td>řetězec s&nbsp;naformátovanými informacemi o využití paměti</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>font_ptr</td><td>počet aktivně použitých fontů</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>stack_size</td><td>aktuální velikosti interních zásobníků a bufferů</td></tr>
<tr><td>nest_size</td><td>aktuální velikosti interních zásobníků a bufferů</td></tr>
<tr><td>buf_size</td><td>aktuální velikosti interních zásobníků a bufferů</td></tr>
<tr><td>save_size</td><td>aktuální velikosti interních zásobníků a bufferů</td></tr>
<tr><td>param_size</td><td>aktuální velikosti interních zásobníků a bufferů</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>max_in_stack</td><td>maximální velikosti interních zásobníků a bufferů</td></tr>
<tr><td>max_nest</td><td>maximální velikosti interních zásobníků a bufferů</td></tr>
<tr><td>max_buf</td><td>maximální velikosti interních zásobníků a bufferů</td></tr>
<tr><td>max_save</td><td>maximální velikosti interních zásobníků a bufferů</td></tr>
<tr><td>max_param</td><td>maximální velikosti interních zásobníků a bufferů</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Dvanáctý demonstrační příklad: výpis všech stavových proměnných systému LuaTeX</h2>

<p>Seznam všech interních konstant a proměnných popisujících stav LuaTeXu (viz
též <a href="#k08">předchozí kapitolu</a>), je možné si nechat vypsat například
následujícím jednoduchým programem využívajícím funkci
<strong>status.list()</strong>. Vzhledem k&nbsp;tomu, že se má vypsat poměrně
dlouhá tabulka, která přesahuje rámec jednoho listu A4, používá se zde
prostředí <strong>longtable</strong> (někdy je nutné příslušný balíček
doinstalovat). Ve výpisu zdrojového kódu dokumentu si povšimněte, že znaky
použité v&nbsp;některých hodnotách by bylo zapotřebí lépe ošetřit (hodnota
proměnné <strong>best_page_break</strong> je dobrým příkladem).</p>

<img src="https://i.iinfo.cz/images/134/luatex3-5.png" class="image-258794" alt="&#160;" height="571" width="400" />
<p><i>Obrázek 5: První část tabulky s&nbsp;konfiguračními hodnotami.</i></p>

<p>Podívejme se na úplný zdrojový kód tohoto příkladu:</p>

<pre>
\documentclass{article}
\usepackage{luacode}
&nbsp;
\usepackage{longtable}
&nbsp;
\begin{document}
&nbsp;
\section*{Status}
&nbsp;
\begin{luacode*}
tex.print("\\begin{longtable}{|l|p{7cm}|}\\hline")
tex.print("key&amp;value\\\\")
tex.print("\\hline")
local stat = status.list()
for key,val in pairs(stat) do
    tex.print(key:gsub("_", "\\_") .. "&amp;" .. tostring(val):gsub("_", "\\_"))
    tex.print("\\\\")
end
tex.print("\\hline")
tex.print("\\end{longtable}")
\end{luacode*}
&nbsp;
&nbsp;
\end{document}
</pre>

<img src="https://i.iinfo.cz/images/134/luatex3-6.png" class="image-258795" alt="&#160;" height="491" width="400" />
<p><i>Obrázek 6: Další část tabulky s&nbsp;konfiguračními hodnotami.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Mechanismus callback funkcí systému LuaTeX</h2>

<p>Jak jsme si již řekli <a href="#k01">v&nbsp;úvodní kapitole</a>, spočívá
velká síla LuaTeXu v&nbsp;tom, že pro zpracovávaný dokument se v&nbsp;paměti
vytváří datová struktura složená z&nbsp;takzvaných uzlů (<i>nodes</i>), které
je možné vhodným způsobem modifikovat a tak přímo ovlivňovat způsob sazby
dokumentu. Tato modifikace se provádí v&nbsp;takzvaných callback funkcích
volaných v&nbsp;přesně specifikovaných okamžicích. Existují dva typy callback
funkcí &ndash; jeden typ je určen pro rozšíření původní funkcionality, druhý
typ pro náhradu původní funkcionality jiným algoritmem. Některé callback funkce
se volají ve chvíli, kdy se hledají či otevírají různé typy souborů (typicky
soubory s&nbsp;fonty), další callback funkce se volají při sazbě dokumentu a
existuje i několik typů callback funkcí volaných při vytváření PDF výstupu.</p>

<p>Callback funkce, které mohou modifikovat interní podobu struktury dokumentu,
jsou volány s&nbsp;parametrem či parametry odkazujícími na takzvané uzly
(<i>nodes</i>). Každý uzel je vlastně objektem, jemuž je nastaven typ a hodnoty
(například text na řádku či odstavci). Typ uzlu je specifikován celým
číslem:</p>

<table>
<tr><th>Typ uzlu</th><th>Číslo</th></tr>
<tr><td>hlist</td><td>(0)</td></tr>
<tr><td>vlist</td><td>(1)</td></tr>
<tr><td>rule</td><td>(2)</td></tr>
<tr><td>ins</td><td>(3)</td></tr>
<tr><td>mark</td><td>(4)</td></tr>
<tr><td>adjust</td><td>(5)</td></tr>
<tr><td>boundary</td><td>(6)</td></tr>
<tr><td>disc</td><td>(7)</td></tr>
<tr><td>whatsit</td><td>(8)</td></tr>
<tr><td>local_par</td><td>(9)</td></tr>
<tr><td>dir</td><td>(10)</td></tr>
<tr><td>math</td><td>(11)</td></tr>
<tr><td>glue</td><td>(12)</td></tr>
<tr><td>kern</td><td>(13)</td></tr>
<tr><td>penalty</td><td>(14)</td></tr>
<tr><td>unset</td><td>(15)</td></tr>
<tr><td>style</td><td>(16)</td></tr>
<tr><td>choice</td><td>(17)</td></tr>
<tr><td>noad</td><td>(18)</td></tr>
<tr><td>radical</td><td>(19)</td></tr>
<tr><td>fraction</td><td>(20)</td></tr>
<tr><td>accent</td><td>(21)</td></tr>
<tr><td>fence</td><td>(22)</td></tr>
<tr><td>math_char</td><td>(23)</td></tr>
<tr><td>sub_box</td><td>(24)</td></tr>
<tr><td>sub_mlist</td><td>(25)</td></tr>
<tr><td>math_text_char</td><td>(26)</td></tr>
<tr><td>delim</td><td>(27)</td></tr>
<tr><td>margin_kern</td><td>(28)</td></tr>
<tr><td>glyph</td><td>(29)</td></tr>
<tr><td>align_record</td><td>(30)</td></tr>
<tr><td>pseudo_file</td><td>(31)</td></tr>
<tr><td>pseudo_line</td><td>(32)</td></tr>
<tr><td>page_insert</td><td>(33)</td></tr>
<tr><td>split_insert</td><td>(34)</td></tr>
<tr><td>expr_stack</td><td>(35)</td></tr>
<tr><td>nested_list</td><td>(36)</td></tr>
<tr><td>span</td><td>(37)</td></tr>
<tr><td>attribute</td><td>(38)</td></tr>
<tr><td>glue_spec</td><td>(39)</td></tr>
<tr><td>attribute_list</td><td>(40)</td></tr>
<tr><td>temp</td><td>(41)</td></tr>
<tr><td>align_stack</td><td>(42)</td></tr>
<tr><td>movement_stack</td><td>(43)</td></tr>
<tr><td>if_stack</td><td>(44)</td></tr>
<tr><td>unhyphenated</td><td>(45)</td></tr>
<tr><td>hyphenated</td><td>(46)</td></tr>
<tr><td>delta</td><td>(47)</td></tr>
<tr><td>passive</td><td>(48)</td></tr>
<tr><td>shape</td><td>(49)</tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Třináctý demonstrační příklad: výpis všech callback funkcí</h2>

<p>Následující demonstrační příklad slouží k&nbsp;vytvoření dokumentu,
v&nbsp;němž se do tabulky (resp.&nbsp;přesněji řečeno do prostředí
<strong>longtable</strong>) vypíšou jména všech událostí, pro něž je možné
zaregistrovat uživatelsky definované callback funkce. Získaná jména nejsou
žádným způsobem setříděna, takže se do vysázeného dokumentu vypíšou
v&nbsp;takovém pořadí, jaké odpovídá použité <a
href="https://cs.wikipedia.org/wiki/Ha%C5%A1ovac%C3%AD_funkce">hašovací
funkci</a> interpretru programovacího jazyka Lua (teoreticky se tedy pořadí
může na vašem systému lišit, prakticky je však dnes použit v&nbsp;LuaTeXu již
stabilní interpret jazyka Lua, takže je to nepravděpodobné).</p>

<img src="https://i.iinfo.cz/images/134/luatex3-7.png" class="image-258796" alt="&#160;" height="633" width="400" />
<p><i>Obrázek 7: První část tabulky s&nbsp;callback funkcemi.</i></p>

<p>Podívejme se na zdrojový kód tohoto příkladu:</p>

<pre>
\documentclass{article}
\usepackage{luacode}
\usepackage{longtable}
&nbsp;
\begin{document}
&nbsp;
\section*{Callback functions}
&nbsp;
\begin{luacode*}
tex.print("\\begin{longtable}{|l|l|}\\hline")
tex.print("key&amp;value\\\\")
tex.print("\\hline")
&nbsp;
local callbacks = callback.list()
&nbsp;
for name,val in pairs(callbacks) do
    val = callbacks[name]
    tex.print(name:gsub("_", "\\_") .. "&amp;" .. tostring(val):gsub("_", "\\_"))
    tex.print("\\\\")
end
&nbsp;
tex.print("\\hline")
tex.print("\\end{longtable}")
\end{luacode*}
&nbsp;
&nbsp;
\end{document}
</pre>

<img src="https://i.iinfo.cz/images/134/luatex3-8.png" class="image-258797" alt="&#160;" height="313" width="400" />
<p><i>Obrázek 8: Druhá část tabulky s&nbsp;callback funkcemi.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Čtrnáctý demonstrační příklad: setříděný výpis všech callback funkcí</h2>

<p>Následující demonstrační příklad vznikl nepatrnou úpravou příkladu
předchozího. Ukazují se v&nbsp;něm některé možnosti programovacího jazyka Lua a
taktéž jeho jediné datové struktury &ndash; pole. Nejdříve je získán seznam
všech možných volání callback funkcí (stejně, jako tomu bylo v&nbsp;předchozím
příkladu):</p>

<pre>
local callbacks = callback.list()
</pre>

<p>Následně je seznam jmen vložen do pole. To se zde chová jako běžná tabulka,
nikoli jako asociativní pole; je tedy zaručeno pořadí vložení prvků atd.:</p>

<pre>
local callbacks = callback.list()
&nbsp;
local names = {}
for key,val in pairs(callbacks) do
    table.insert(names, key)
end
</pre>

<p>Pole se jmény se seřazeno standardní funkcí
<strong>table.sort()</strong>:</p>

<pre>
table.sort(names)
</pre>

<p>Seřazený seznam jmen je následně použit při výpisu tabulky. Jména zde slouží
jako klíč do původního pole <strong>callbacks</strong>:</p>

<pre>
tex.print("\\begin{longtable}{|r|l|l|}\\hline")
tex.print("i&amp;key&amp;value\\\\")
tex.print("\\hline")
&nbsp;
for i,name in ipairs(names) do
    val = callbacks[name]
    tex.print(i .. "&amp;", name:gsub("_", "\\_") .. "&amp;" .. tostring(val):gsub("_", "\\_"))
    tex.print("\\\\")
end
&nbsp;
tex.print("\\hline")
tex.print("\\end{longtable}")
</pre>

<p>Povšimněte si způsobu náhrady znaku &bdquo;_&ldquo;, který má v&nbsp;TeXu
speciální význam, za dvojici znaků &bdquo;\_&ldquo; (první zpětné lomítko je
zde uvedeno proto, že tento znak má v&nbsp;jazyku Lua speciální význam; to již
ostatně víme z&nbsp;předchozích dvou částí tohoto seriálu).</p>

<img src="https://i.iinfo.cz/images/134/luatex3-9.png" class="image-258798" alt="&#160;" height="733" width="400" />
<p><i>Obrázek 9: První část tabulky s&nbsp;callback funkcemi.</i></p>

<p>Úplný zdrojový kód dokumentu obsahujícího tento demonstrační příklad vypadá
následovně:</p>

<pre>
\documentclass{article}
\usepackage{luacode}
\usepackage{longtable}
&nbsp;
\begin{document}
&nbsp;
\section*{Callback functions}
&nbsp;
\begin{luacode*}
tex.print("\\begin{longtable}{|r|l|l|}\\hline")
tex.print("i&amp;key&amp;value\\\\")
tex.print("\\hline")
&nbsp;
local callbacks = callback.list()
&nbsp;
local names = {}
for key,val in pairs(callbacks) do
    table.insert(names, key)
end
&nbsp;
table.sort(names)
&nbsp;
for i,name in ipairs(names) do
    val = callbacks[name]
    tex.print(i .. "&amp;", name:gsub("_", "\\_") .. "&amp;" .. tostring(val):gsub("_", "\\_"))
    tex.print("\\\\")
end
&nbsp;
tex.print("\\hline")
tex.print("\\end{longtable}")
\end{luacode*}
&nbsp;
&nbsp;
\end{document}
</pre>

<img src="https://i.iinfo.cz/images/134/luatex3-10.png" class="image-258799" alt="&#160;" height="300" width="400" />
<p><i>Obrázek 10: Druhá část tabulky s&nbsp;callback funkcemi.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Příklad callback funkce &ndash; &bdquo;hyphenate&ldquo;</h2>

<p>Vyzkoušejme si nyní vytvořit si vlastní callback funkci, která bude volaná
ve chvíli, kdy interní algoritmy TeXu zjistí, že by bylo vhodné rozdělit nějaké
slovo. V&nbsp;tento okamžik se zavolá námi deklarovaná callback funkce, která
může (ale také nemusí!) modifikovat interní datové uzly LuaTeXu popisující
zpracovávaný dokument. Samotná callback funkce v&nbsp;první verzi pouze vypíše
informace o dvou uzlech, které jsou jí předány. V&nbsp;praxi to znamená, že
k&nbsp;žádnému rozdělení slova ve skutečnosti nedojde, neboť obsah uzlů zůstane
nezměněn:</p>

<pre>
function x(head,tail)
    print()
    print("hyphenation:")
    print(head)
    print(tail)
end
</pre>

<p>Tuto funkci je nutné do LuaTeXu zaregistrovat, a to konkrétně takto:</p>

<pre>
luatexbase.add_to_callback("hyphenate", x, "description", 0)
</pre>

<p>Poznámka: v&nbsp;dokumentaci můžete najít odlišný kód (knihovní funkci)
určený pro zaregistrování callback funkce:</p>

<pre>
callback.register("hyphenate", x)
</pre>

<p>Tento kód však již pravděpodobně nebude správně interpretován; uvádím ho zde
jen kvůli úplnosti.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Patnáctý demonstrační příklad: realizace prázdné callback funkce volané při dělení slov</h2>

<p>Mechanismus registrace uživatelsky definované callback funkce je ukázán
v&nbsp;dnešním posledním demonstračním příkladu. Jedná se o dokument obsahující
delší text, který by byl při použití původních algoritmů TeXu na několika
místech zalomen. Ovšem &bdquo;díky&ldquo; tomu, že jsme zaregistrovali vlastní
callback funkci volanou ve chvíli, kdy má dojít k&nbsp;dělení slova a tato
funkce nijak neovlivňuje strukturu dokumentu, nebude ve skutečnosti rozdělení
nikdy provedeno, o čemž se lze snadno přesvědčit při pohledu na vysázený
dokument:</p>

<a href="http://www.root.cz/obrazek/258800/"><img src="https://i.iinfo.cz/images/134/luatex3-11-prev.png" class="image-258800" alt="&#160;" height="229" width="370" /></a></p>
<p><i>Obrázek 11: Povšimněte si, že ve vysázeném dokumentu nedošlo
k&nbsp;rozdělení ani jednoho slova, protože to naše callback funkce
<strong>x</strong> neumí.</i></p>

<p>Celý zdrojový kód dokumentu s&nbsp;textem i příslušnou callback funkcí
vypadá následovně:</p>

<pre>
\documentclass{article}
\usepackage{luacode}
&nbsp;
\begin{document}
&nbsp;
&nbsp;
\section*{Callback functions}
&nbsp;
\begin{luacode*}
function x(head,tail)
    print()
    print("hyphenation:")
    print(head)
    print(tail)
end
&nbsp;
luatexbase.add_to_callback("hyphenate", x, "description", 0)
&nbsp;
\end{luacode*}
&nbsp;
This section will guide you through the formatting techniques of the text.
Formatting tends to refer to most things to do with appearance, so it makes the
list of possible topics quite eclectic: text style, spacing, etc. If formatting
may also refer to paragraphs and to the page layout, we will focus on the
customization of words and sentences for now.
&nbsp;
A lot of formatting techniques are required to differentiate certain elements
from the rest of the text. It is often necessary to add emphasis to key words
or phrases. Footnotes are useful for providing extra information or
clarification without interrupting the main flow of text. So, for these
reasons, formatting is very important. However, it is also very easy to abuse,
and a document that has been over-done can look and read worse than one with
none at all.
&nbsp;
\LaTeX is so flexible that we will actually only skim the surface, as you can
have much more control over the presentation of your document if you wish.
Having said that, one of the purposes of LaTeX is to take away the stress of
having to deal with the physical presentation yourself, so you need not get too
carried away!
&nbsp;
\end{document}
</pre>

<p>V&nbsp;průběhu sazby se funkce pro rozdělení slov volá hned několikrát, o
čemž se můžeme snadno přesvědčit pohledem do logovacího souboru:</p>

<pre>
No file test15.aux.
&nbsp;
hyphenation:
&lt;node    nil &lt;     30 &gt;    485 : temp 0&gt;
&lt;node   2534 &lt;   2544 &gt;    nil : glue 0&gt;
&nbsp;
hyphenation:
&lt;node    nil &lt;     30 &gt;   2685 : temp 0&gt;
&lt;node   5432 &lt;   5442 &gt;    nil : glue 0&gt;
&nbsp;
hyphenation:
&lt;node    nil &lt;     74 &gt;   5770 : temp 0&gt;
&lt;node     74 &lt;   5770 &gt;    nil : glyph 1&gt;
&nbsp;
hyphenation:
&lt;node    nil &lt;    138 &gt;    234 : temp 0&gt;
&lt;node    138 &lt;    234 &gt;    nil : rule 0&gt;
&nbsp;
hyphenation:
&lt;node    nil &lt;     76 &gt;   5800 : temp 0&gt;
&lt;node     76 &lt;   5800 &gt;    nil : glyph 1&gt;
&nbsp;
hyphenation:
&lt;node    nil &lt;     74 &gt;   5785 : temp 0&gt;
&lt;node     74 &lt;   5785 &gt;    nil : glyph 1&gt;
&nbsp;
hyphenation:
&lt;node    nil &lt;     30 &gt;   5647 : temp 0&gt;
&lt;node   7633 &lt;   7643 &gt;    nil : glue 0&gt;
&nbsp;
hyphenation:
&lt;node    nil &lt;    140 &gt;    234 : temp 0&gt;
&lt;node    140 &lt;    234 &gt;    nil : rule 0&gt;
&nbsp;
hyphenation:
&lt;node    nil &lt;    142 &gt;   8069 : temp 0&gt;
&lt;node   8023 &lt;   8073 &gt;    nil : glue 0&gt;
[1{/usr/share/texlive/texmf-dist/fonts/map/pdftex/updmap/pdftex.map}]
(./test15.aux) )
 266 words of node memory still in use:
   2 hlist, 1 vlist, 1 rule, 2 glue, 40 glue_spec, 1 write nodes
   avail lists: 1:1,2:13,3:12,4:284,5:74,6:976,7:14,9:27,10:7
&lt;/usr/share/texlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmbx12.pfb&gt;&lt;/usr/s
hare/texlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmr10.pfb&gt;&lt;/usr/share/tex
live/texmf-dist/fonts/type1/public/amsfonts/cm/cmr7.pfb&gt;
Output written on test15.pdf (1 page, 36532 bytes).
Transcript written on test15.log.
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;popsanými demonstračními příklady</h2>

<p>Demonstrační příklady popsané v&nbsp;dnešním článku byly uloženy do
veřejného <a href="https://github.com/tisnik/presentations.git">Git
repositáře</a>, z&nbsp;něhož si je můžete snadno stáhnout a otestovat ve své
instalaci LuaTeXu (nezapomeňte přitom na to, že se v&nbsp;některých příkladech
používá prostředí <strong>longtable</strong>):</p>

<table>
<tr><th> #</th><th>Soubor</th><th>Stručný popis</th><th>Odkaz</th></tr>
<tr><td> 1</td><td>test9.tex</td><td>jednoduché logování</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test9.tex">https://github.com/tisnik/presentations/blob/master/luatex/slides/test9.tex</a></td></tr>
<tr><td> 2</td><td>test9.lua</td><td>funkce factorial a poweroftwo</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test9.lua">https://github.com/tisnik/presentations/blob/master/luatex/slides/test9.lua</a></td></tr>
<tr><td> 3</td><td>debugprint.lua</td><td>funkce pro ladicí výpisy</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/debugprint.lua">https://github.com/tisnik/presentations/blob/master/luatex/slides/debugprint.lua</a></td></tr>
<tr><td> 4</td><td>test9.pdf</td><td>PDF soubor vysázený LuaTeXem</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test9.pdf">https://github.com/tisnik/presentations/blob/master/luatex/slides/test9.pdf</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>test10.tex</td><td>výpis expandovaného a neexpandovaného makra</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test10.tex">https://github.com/tisnik/presentations/blob/master/luatex/slides/test10.tex</a></td></tr>
<tr><td> 6</td><td>test10.pdf</td><td>PDF soubor vysázený LuaTeXem</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test10.pdf">https://github.com/tisnik/presentations/blob/master/luatex/slides/test10.pdf</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>test11.tex</td><td>přečtení hodnot vybraných čítačů</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test11.tex">https://github.com/tisnik/presentations/blob/master/luatex/slides/test11.tex</a></td></tr>
<tr><td> 8</td><td>test11.pdf</td><td>PDF soubor vysázený LuaTeXem</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test11.pdf">https://github.com/tisnik/presentations/blob/master/luatex/slides/test11.pdf</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>test12.tex</td><td>výpis všech stavových proměnných systému LuaTeX</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test12.tex">https://github.com/tisnik/presentations/blob/master/luatex/slides/test12.tex</a></td></tr>
<tr><td>10</td><td>test12.pdf</td><td>PDF soubor vysázený LuaTeXem</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test12.pdf">https://github.com/tisnik/presentations/blob/master/luatex/slides/test12.pdf</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>test13.tex</td><td>výpis všech callback funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test13.tex">https://github.com/tisnik/presentations/blob/master/luatex/slides/test13.tex</a></td></tr>
<tr><td>12</td><td>test13.pdf</td><td>PDF soubor vysázený LuaTeXem</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test13.pdf">https://github.com/tisnik/presentations/blob/master/luatex/slides/test13.pdf</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>test14.tex</td><td>setříděný výpis všech callback funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test14.tex">https://github.com/tisnik/presentations/blob/master/luatex/slides/test14.tex</a></td></tr>
<tr><td>14</td><td>test14.pdf</td><td>PDF soubor vysázený LuaTeXem</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test14.pdf">https://github.com/tisnik/presentations/blob/master/luatex/slides/test14.pdf</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>test15.tex</td><td>realizace prázdné callback funkce volané při dělení slov</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test15.tex">https://github.com/tisnik/presentations/blob/master/luatex/slides/test15.tex</a></td></tr>
<tr><td>16</td><td>test15.pdf</td><td>PDF soubor vysázený LuaTeXem</td><td><a href="https://github.com/tisnik/presentations/blob/master/luatex/slides/test15.pdf">https://github.com/tisnik/presentations/blob/master/luatex/slides/test15.pdf</a></td></tr>
</table>

<p>Poznámka: některé dokumenty budou pravděpodobně na vaší instalaci LuaTeXu
vysázeny nepatrné odlišným způsobem. Jedná se především o dokumenty zobrazující
interní konstanty a proměnné popisující stav LuaTeXu atd.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>LuaTex<br />
<a href="http://www.luatex.org/">http://www.luatex.org/</a>
</li>

<li>LuaTex: dokumentace<br />
<a href="http://www.luatex.org/documentation.html">http://www.luatex.org/documentation.html</a>
</li>

<li>LuaTex Wiki<br />
<a href="http://wiki.luatex.org/index.php/Main_Page">http://wiki.luatex.org/index.php/Main_Page</a>
</li>

<li>LuaTeX (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/LuaTeX">https://en.wikipedia.org/wiki/LuaTeX</a>
</li>

<li>Paper o LuaTeXu<br />
<a href="https://www.tug.org/TUGboat/tb28-3/tb90hoekwater-luatex.pdf">https://www.tug.org/TUGboat/tb28-3/tb90hoekwater-luatex.pdf</a>
</li>

<li>TeX (Wikibooks)<br />
<a href="https://en.wikibooks.org/wiki/TeX">https://en.wikibooks.org/wiki/TeX</a>
</li>

<li>LaTeX (Wikibooks)<br />
<a href="https://en.wikibooks.org/wiki/LaTeX">https://en.wikibooks.org/wiki/LaTeX</a>
</li>

<li>LaTeX (Wikibooks, PDF verze)<br />
<a href="https://upload.wikimedia.org/wikipedia/commons/2/2d/LaTeX.pdf">https://upload.wikimedia.org/wikipedia/commons/2/2d/LaTeX.pdf</a>
</li>

<li>The Latin Modern (LM) Family of Fonts<br />
<a href="http://www.gust.org.pl/projects/e-foundry/latin-modern">http://www.gust.org.pl/projects/e-foundry/latin-modern</a>
</li>

<li>Sázecí system TeX<br />
<a href="https://www.phil.muni.cz/~letty/tex/">https://www.phil.muni.cz/~letty/tex/</a>
</li>

<li>CSTeX &ndash; česká a slovenská podpora TeXu<br />
<a href="http://petr.olsak.net/cstex.html">http://petr.olsak.net/cstex.html</a>
</li>

<li>Proč nerad používám LaTeX<br />
<a href="http://petr.olsak.net/ftp/olsak/bulletin/nolatex.pdf">http://petr.olsak.net/ftp/olsak/bulletin/nolatex.pdf</a>
</li>

<li>εχTEX<br />
<a href="http://www.extex.org/index.html">http://www.extex.org/index.html</a>
</li>

<li>PlainTeX (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PlainTeX">https://cs.wikipedia.org/wiki/PlainTeX</a>
</li>

<li>What is the difference between \def and \newcommand? (SO)<br />
<a href="http://tex.stackexchange.com/questions/655/what-is-the-difference-between-def-and-newcommand#658">http://tex.stackexchange.com/questions/655/what-is-the-difference-between-def-and-newcommand#658</a>
</li>

<li>LaTeX/Macros<br />
<a href="https://en.wikibooks.org/wiki/LaTeX/Macros">https://en.wikibooks.org/wiki/LaTeX/Macros</a>
</li>

<li>TeX (StackExchange)<br />
<a href="http://tex.stackexchange.com/">http://tex.stackexchange.com/</a>
</li>

<li>LaTeX/Counters<br />
<a href="https://en.wikibooks.org/wiki/LaTeX/Counters">https://en.wikibooks.org/wiki/LaTeX/Counters</a>
</li>

<li>LuaTeX: Questions and Answers (kniha)<br />
<a href="https://www.amazon.com/LuaTeX-Questions-Answers-George-Duckett/dp/1534601163?ie=UTF8&SubscriptionId=AKIAILSHYYTFIVPWUY6Q&camp=2025&creative=165953&creativeASIN=1534601163&linkCode=xm2&tag=duckduckgo-d-20">https://www.amazon.com/LuaTeX-Questions-Answers-George-Duckett/dp/1534601163?ie=UTF8&SubscriptionId=AKIAILSHYYTFIVPWUY6Q&camp=2025&creative=165953&amp;creativeASIN=1534601163&linkCode=xm2&&amp;tag=duckduckgo-d-20</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

