<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Funkce v programovacím jazyku Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Funkce v programovacím jazyku Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrté části seriálu o programovacím jazyku Lua si popíšeme, jakým způsobem je možné definovat nové funkce, předávat jim parametry (včetně možnosti použití proměnného a volitelného počtu parametrů), získávat návratové hodnoty z funkcí a další užitečné postupy, které Lua převzala především z funkcionálních jazyků.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Definice funkcí</a><br />
<a href="#k02">2. Funkce jako datový typ</a><br />
<a href="#k03">3. Parametry funkcí a jejich návratové hodnoty</a><br />
<a href="#k04">4. Volitelné parametry funkcí</a><br />
<a href="#k05">5. Proměnný počet parametrů</a><br />
<a href="#k06">6. Využití proměnného počtu parametrů</a><br />
<a href="#k07">7. Rekurze, tail rekurze</a><br />
<a href="#k08">8. Obsah další části seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Definice funkcí</h1>

<p>Ve druhé části tohoto seriálu jsme se seznámili se všemi datovými typy,
které je možné v&nbsp;programovacím jazyku <i>Lua</i> použít. Jeden z&nbsp;osmi
podporovaných datových typů představují i funkce &ndash; samotný fakt, že
funkce patří mezi datové typy je z&nbsp;programátorského hlediska velmi
významný, neboť je možné, jak si ukážeme v&nbsp;navazujících kapitolách i další
části seriálu, funkce přiřazovat proměnným, předávat funkce jako parametry
jiným funkcím, ukládat funkce do asociativních polí atd. Ukažme si nyní, jakým
způsobem se funkce většinou definují a pojmenovávají (jak uvidíme dále,
definice pojmenovaných funkcí je pouze &bdquo;syntaktickým cukrem&ldquo;
zavedeným do syntaxe proto, aby se <i>Lua</i> snadněji používala programátorům
zvyklým na imperativní jazyky). Definice pojmenované funkce začíná klíčovým
slovem <strong>function</strong>, za nímž následuje název funkce následovaný
kulatými závorkami, ve kterých mohou být uvedeny parametry funkce. Za těmito
závorkami se nachází tělo funkce, což je ze syntaktického hlediska programový
blok (viz druhá část seriálu, kapitola 4) ukončený klíčovým slovem
<strong>end</strong>.</p>

<p>Funkce může pomocí příkazu <strong>return</strong> vracet libovolné množství
(návratových) hodnot. V&nbsp;případě, že příkaz <strong>return</strong> není
před koncem těla funkce (či uvnitř programových smyček popř.&nbsp;podmínek)
použit, nevrací funkce žádné hodnoty, tj.&nbsp;ze sémantického hlediska se
jedná o proceduru. Uvnitř těla funkce je možné, ostatně jako v&nbsp;kterémkoli
jiném programovém bloku, vytvářet lokální proměnné, na tomtéž místě lze
používat i proměnné globální (i když se to nedoporučuje, protože se tím
narušuje obecná představa o funkcích jakožto objektech, které získávají veškeré
informace o svém okolí pomocí parametrů a naopak okolí může získat informace
z&nbsp;funkce jen pomocí návratové hodnoty či několika hodnot). Následuje
příklad, ve kterém jsou vytvořeny dvě funkce nazvané <i>printHello</i> a
<i>printWorld</i>. První z&nbsp;těchto funkcí používá ve svém těle lokální
proměnnou nazvanou <i>helloStr</i>, druhá funkce se naopak odkazuje na globální
proměnnou <i>worldStr</i>. Povšimněte si, že změna globální proměnné ovlivní i
chování funkce, tj.&nbsp;vytištěný řetězec:</p>

<code-area><i>-- Prvni demonstracni priklad:</i>
<i>-- definice vlastnich funkci</i>

<i>-- funkce obsahujici lokalni promennou</i>
<strong>function</strong> printHello()
    local helloStr = "Hello"
    print(helloStr)
<strong>end</strong>

worldStr="World"

<i>-- funkce vyuzivajici globalni promennou</i>
<strong>function</strong> printWorld()
<i>    -- ke globalni promenne je pripojena</i>
<i>    -- retezcova konstanta (literal)</i>
    print(worldStr .. "!")
<strong>end</strong>

<i>-- volani obou funkci</i>
printHello()
printWorld()

<i>-- zmena globalni promenne</i>
<i>-- se projevi i ve volane funkci</i>
worldStr = 42
printWorld()

<i>-- finito</i>
</code-area>

<p>Text vypsaný na standardní výstup po spuštění prvního demonstračního
příkladu:</p>

<code-area>Hello
World!
42!
</code-area>



<p><a name="k02"></a></p>
<h1>2. Funkce jako datový typ</h1>

<p>V&nbsp;předchozí kapitole jsme si řekli, že definice funkce ve stylu
<strong>function</strong> <i>jméno() tělo funkce </i><strong>end</strong> je ve
skutečnosti pouze &bdquo;syntaktickým cukrem&ldquo;, který byl do
programovacího jazyka <i>Lua</i> přidán především proto, aby se jeho syntaxe
přibližovala běžným imperativním jazykům. Ve skutečnosti totiž parametry funkce
spolu s&nbsp;jejím tělem přestavují hodnotu typu <i>function</i>, kterou je
možné přiřadit do proměnné libovolného jména (dokonce ani k&nbsp;přiřazení
nemusí dojít, což je případ nepojmenovaných lokálních funkcí &ndash;
<i>uzávěrů</i>). &bdquo;Skutečná&ldquo; syntaxe definice funkce tedy neobsahuje
její jméno, jak si ostatně ukážeme na druhém demonstračním příkladu vypsaném
pod odstavcem. Ve zdrojovém textu tohoto příkladu jsou vytvořeny dvě funkce
(tj.&nbsp;ve skutečnosti hodnoty typu <i>function</i>), přičemž první funkce je
přiřazena proměnné pojmenované <i>printHello</i> a druhá funkce proměnné
<i>printWorld</i>. Výsledkem přiřazení je vytvoření totožných pojmenovaných
funkcí, jako v&nbsp;prvním demonstračním příkladu, ovšem pokud se nad příkladem
zamyslíme, zjistíme jednu zajímavou věc &ndash; ve spuštěném programu je možné,
že se hodnota libovolné proměnné může měnit a totéž samozřejmě platí i pro
hodnoty typu <i>function</i>. Jinými slovy to znamená, že v&nbsp;jazyku
<i>Lua</i> je možné funkce znovu definovat, tj.&nbsp;jejich jméno se sice
nemění, ale tělo (tj.&nbsp;implementovaný algoritmus) již ano:</p>

<code-area><i>-- Druhy demonstracni priklad:</i>
<i>-- definice vlastnich funkci bez vyuziti</i>
<i>-- "syntaktickeho cukru"</i>

<i>-- funkce obsahujici lokalni promennou</i>
<i>-- (hodnota typu funkce je prirazena</i>
<i>--  promenne pojmenovane "printHello")</i>
printHello = <strong>function</strong>()
    local helloStr = "Hello"
    print(helloStr)
<strong>end</strong>

worldStr="World"

<i>-- funkce vyuzivajici globalni promennou</i>
<i>-- (hodnota typu funkce je prirazena</i>
<i>--  promenne pojmenovane "printWorld")</i>
printWorld = <strong>function</strong>()
<i>    -- ke globalni promenne je pripojena</i>
<i>    -- retezcova konstanta (literal)</i>
    print(worldStr .. "!")
<strong>end</strong>

<i>-- volani obou funkci</i>
printHello()
printWorld()

<i>-- zmena globalni promenne</i>
<i>-- se projevi i ve volane funkci</i>
worldStr=42
printWorld()

<i>-- finito</i>
</code-area>



<p><a name="k03"></a></p>
<h1>3. Parametry funkcí a jejich návratové hodnoty</h1>

<p>Prakticky každá funkce, pokud má provádět užitečnou činnost, musí nějakým
způsobem komunikovat se svým okolím. V&nbsp;té nejjednodušší (a nejméně vhodné)
podobě lze použít globální proměnné, ke kterým má funkce samozřejmě přístup
&ndash; výsledný program se však sémanticky podobá spíše <i>BASICovým</i>
konstrukcím s&nbsp;podprogramy a nikoli vysokoúrovňovému zápisu algoritmu,
nehledě na to, že funkce používající globální proměnné, se například velmi
těžko testují či používají při paralelním programování. Mnohem lepší je funkci
předávat informace pomocí parametrů, jejichž jména (nikoli typy &ndash; ty
jsou, jak již víme z&nbsp;předchozích částí seriálu, přiřazeny hodnotám) jsou
zapsána uvnitř kulatých závorek. Funkce taktéž může vracet jednu nebo více (!)
hodnot pomocí konstrukce <strong>return seznam_hodnot</strong>. Vzhledem
k&nbsp;existenci operátoru vícenásobného přiřazení a možnosti vrátit větší
množství parametrů jsou tak funkce v&nbsp;jazyku <i>Lua</i> obecnější, než
v&nbsp;některých dalších programovacích jazycích, ve kterých funkce většinou
mohou vracet jen jednu hodnotu (i díky této vlastnosti se v&nbsp;<i>Lua</i>
nemusí zavádět konstrukce typu volání hodnotou a volání odkazem).</p>

<p>Následuje demonstrační příklad, v&nbsp;němž je vytvořeno a následně použito
(zavoláno) několik funkcí. První funkce nazvaná <i>repeatMessage</i> má
parametry, ale nevrací žádnou hodnotu, druhá funkce <i>factorial</i> má jeden
parametr a vrací buď <strong>nil</strong> pro parametr, který neodpovídá
definičnímu oboru faktoriálu, nebo přirozené číslo vyjadřující <i>n!</i>
(samotný faktoriál je vypočten nerekurzivně, jeho rekurzivní zápis je uveden
v&nbsp;navazujících kapitolách). Třetí funkce <i>divMod</i> má dva parametry
<i>x,y</i> a vrací dvě celočíselné hodnoty &ndash; celočíselný podíl <i>x div
y</i> a zbytek po dělení <i>x mod y</i> (někteří historici tvrdí, že právě tato
matematická &bdquo;dvojoperace&ldquo; byla první početní operací, kterou lidé
používali; své využití měla především při rozdělování kořisti). Funkce
<i>divMod</i> je následně použita pro vytvoření tabulky celočíselného dělení i
zbytku po dělení čísla 10 hodnotami od jedné do desíti. Následuje výpis
zdrojového kódu třetího demonstračního příkladu:</p>

<code-area><i>-- Treti demonstracni priklad:</i>
<i>-- funkce s parametry, funkce vracejici hodnoty</i>

<i>-- funkce se dvema parametry,</i>
<i>-- ktera nevraci zadnou hodnotu</i>
<strong>function</strong> repeatMessage(message, count)
    <strong>for</strong> i = 1, count <strong>do</strong>
        print(i, message)
    <strong>end</strong>
<strong>end</strong>

<i>-- nerekurzivni vypocet faktorialu</i>
<i>-- (funkce s jednim parametrem vracejici taktez jednu hodnotu)</i>
<strong>function</strong> factorial(n)
    <strong>local</strong> result = 1
<i>    -- faktorial je definovan pouze pro prirozena cisla a nulu</i>
    <strong>if</strong> n &lt; 0 <strong>then</strong>
        <strong>return</strong> <strong>nil</strong>
    <strong>end</strong>
    <strong>for</strong> i = 1, n <strong>do</strong>
        result = result * i
    <strong>end</strong>
    <strong>return</strong> result
<strong>end</strong>

<i>-- funkce vracejici dve hodnoty: vysledek celociselneho</i>
<i>-- deleni a zbytek po celociselnem deleni</i>
<strong>function</strong> divMod(x,y)
    <strong>return</strong> math.floor(x / y), x % y
<strong>end</strong>

<i>-- volani funkci</i>
repeatMessage("Hello world!", 10)

print()
print("Factorial")
print("n", "n!")
<strong>for</strong> n = -5, 10 <strong>do</strong>
    print(n, factorial(n))
<strong>end</strong>

print()
print("DivMod")
print("n", "10/n", "zbytek")
<strong>for</strong> n = 1, 10 <strong>do</strong>
    x, y = divMod(10, n)
    print(n, x, y)
<strong>end</strong>

<i>-- finito</i>

</code-area>

<p>Výše uvedený demonstrační příklad po svém spuštění vypíše na standardní
výstup následující text:</p>

<code-area>1    Hello world!
2       Hello world!
3       Hello world!
4       Hello world!
5       Hello world!
6       Hello world!
7       Hello world!
8       Hello world!
9       Hello world!
10      Hello world!

Factorial
n       n!
-5      nil
-4      nil
-3      nil
-2      nil
-1      nil
0       1
1       1
2       2
3       6
4       24
5       120
6       720
7       5040
8       40320
9       362880
10      3628800

DivMod
n       10/n    zbytek
1       10      0
2       5       0
3       3       1
4       2       2
5       2       0
6       1       4
7       1       3
8       1       2
9       1       1
10      1       0
</code-area>



<p><a name="k04"></a></p>
<h1>4. Volitelné parametry funkcí</h1>

<p>Programovací jazyk <i>Lua</i> podporuje, podobně jako některé další
programovací jazyky, volitelné parametry u funkcí. Pokud je například funkce
nazvaná <i>fce</i> definována se třemi parametry <i>x</i>, <i>y</i> a <i>z</i>,
není nutné, aby se při volání této funkce skutečně musely uvést hodnoty všech
tří parametrů (příkladem z&nbsp;praxe může být funkce <i>io.open</i>, kterou
lze volat buď jen se jménem otevíraného souboru, nebo lze ve druhém parametru
uvést i režim otevření: pro čtení, zápis, připojení atd.). Pokud je zmíněná
funkce <i>fce</i> volána s&nbsp;hodnotami 1, 2 a 3, jsou samozřejmě parametry
vyplněny v&nbsp;tomtéž pořadí: <i>x=1, y=2, z=3</i>. Ovšem tutéž funkci je také
možné zavolat se žádnou, jednou či dvěma hodnotami &ndash; <i>fce()</i>,
<i>fce(42)</i>, <i>fce(42,6502)</i>. V&nbsp;takovém případě se do zbývajících
parametrů, kterým neodpovídá žádná hodnota při volání funkce, dosadí
<strong>nil</strong>. Tato vlastnost programovacího jazyka <i>Lua</i> je
předvedena v&nbsp;následujícím demonstračním příkladu, ve kterém funkce
<i>fce</i> po svém zavolání vypíše hodnoty svých parametrů:</p>

<code-area><i>-- Ctvrty demonstracni priklad:</i>
<i>-- volitelne parametry funkci</i>

<strong>function</strong> fce(x, y, z)
    print(x, y, z)
<strong>end</strong>

<i>-- volani funkce fce s ruznym poctem parametru</i>
fce(1, 2, 3)
fce(1, 2, 3, 4) <i>-- posledni hodnota se nevyuzije</i>
fce()
fce(42)
fce(42, 6502)
fce(<strong>nil</strong>, 6502)
<i>-- lze pouzit i retezce popr. hodnoty dalsich typu typu</i>
fce("Hello", "world", "!")
fce("Hello".." world", "!" )
fce("Hello".." world".."!" )

<i>-- finito</i>
</code-area>

<p>Program po svém spuštění vypíše následující tabulku:</p>

<code-area>1               2               3
1               2               3
nil             nil             nil
42              nil             nil
42              6502            nil
nil             6502            nil
Hello           world           !
Hello world     !               nil
Hello world!    nil             nil
</code-area>



<p><a name="k05"></a></p>
<h1>5. Proměnný počet parametrů</h1>

<p>Programovací jazyk <i>Lua</i> kromě výše popsaných volitelných parametrů (ty
jsou explicitně vyjmenovány v&nbsp;hlavičce funkce) taktéž podporuje i použití
proměnného počtu parametrů &ndash; v&nbsp;tomto případě jsou v&nbsp;definici
funkce uvedeny pojmenované parametry (ty lze uvnitř funkce používat stejným
způsobem jako lokální proměnné), za nimiž může následovat libovolný počet
parametrů nepojmenovaných, jejichž hodnoty jsou přístupné přes speciální výraz
zapisovaný jako tři tečky &ndash; <strong>...</strong> (v&nbsp;tomto kontextu
se můžeme také setkat s&nbsp;termínem <i>variadické funkce</i> nebo <i>variable
number of arguments - varargs</i>). Například funkci <i>g</i> s&nbsp;definicí
<i>g(x, y, ...)</i> je možné předat nula až <i>n</i> parametrů, přičemž hodnota
prvního parametru je ve funkci přístupná přes identifikátor <i>x</i>, hodnota
druhého parametru přes identifikátor <i>y</i> a hodnota všech dalších parametrů
je přístupná přes výraz <strong>...</strong> &ndash; uvnitř těla funkce lze
použít buď konstrukci typu <i>a,b,c=...</i>, která proměnným <i>a</i>, <i>b</i>
a <i>c</i> přiřadí první tři nepojmenované parametry (pokud těchto parametrů
není dostatečný počet, dosadí se do proměnných hodnota <strong>nil</strong>)
nebo lze seznam hodnot převést na (asociativní) pole pomocí konstrukce
<i>{...}</i>, což si ukážeme v&nbsp;následujícím demonstračním příkladu:</p>

<code-area><i>-- Paty demonstracni priklad:</i>
<i>-- promenny pocet parametru</i>

<i>-- funkce s dvojici pojmenovanych parametru</i>
<i>-- s moznosti pristupu k dalsim parametrum</i>
<i>-- pristupnym pres vyraz ...</i>
<strong>function</strong> g(x, y, ...)
    <i>-- pokud je seznam volitelnych parametru</i>
    <i>-- naplnen alespon jednou hodnotou,</i>
    <i>-- vypise se jeho delka</i>
    <strong>if</strong> ... ~= <strong>nil</strong> <strong>then</strong>
        <i>-- prevod na asociativni pole</i>
        <strong>local</strong> varargs = {...}
        <i>-- vypis delky pole</i>
        print("vararg length: ", #varargs .. " items")
    <strong>end</strong>
    <i>-- vypis obou pojmenovanych parametru</i>
    <i>-- i promennych parametru</i>
    print(x, y, ...)
<strong>end</strong>

<i>-- ukazka volani funkce</i>
g()
g(1)
g(1,2)
g(1,2,3)
g(1,2,3,4)
g(1,2,3,5)
g("a", "b", "c", "d", "e")

<i>-- finito</i>
</code-area>

<p>Po spuštění demonstračního příkladu se na standardní výstup vypíše následující text:</p>

<code-area>nil             nil
1               nil
1               2
vararg length:  1 items
1               2               3
vararg length:  2 items
1               2               3               4
vararg length:  2 items
1               2               3               5
vararg length:  3 items
a               b               c               d               e
</code-area>



<p><a name="k06"></a></p>
<h1>6. Využití proměnného počtu parametrů</h1>

<p>Funkce s&nbsp;proměnným počtem parametrů jsou v&nbsp;některých případech
velmi užitečné. V&nbsp;této kapitole si ukážeme, jakým způsobem lze vytvořit
funkci nazvanou <i>statistic</i>, která pro zadaný seznam číselných hodnot
(seznam může mít libovolnou délku) vrátí uspořádanou trojici: délku předaného
seznamu, součet všech číselných hodnot v&nbsp;seznamu (suma) a průměrnou
hodnotu vypočtenou na základě sumy a zjištěné délky seznamu. Povšimněte si
zejména způsobu využití výrazu <strong>...</strong>. Nejprve je provedeno
porovnání, zda není tento výraz roven hodnotě <strong>nil</strong> &ndash; to
by totiž znamenalo, že při volání funkce nebyly předány žádné parametry a
výpočet průměru nemůže být z&nbsp;tohoto důvodu proveden (došlo by
k&nbsp;dělení nulou). Následně je použita jazyková konstrukce <i>items =
{...}</i>, pomocí níž se seznam předávaných hodnot přetransformuje na regulární
asociativní pole, jehož klíči jsou přirozená čísla. S&nbsp;proměnnou
<i>items</i> lze tedy pracovat stejně jako s&nbsp;jakýmkoli jiným asociativním
polem, čehož je využito při výpočtu sumy:</p>

<code-area><i>-- Sesty demonstracni priklad:</i>
<i>-- vyuziti promenneho poctu parametru</i>

<i>-- funkce vracejici trojici:</i>
<i>-- 1. pocet prvku</i>
<i>-- 2. soucet prvku (suma)</i>
<i>-- 3. aritmeticky prumer jejich hodnot</i>
<strong>function</strong> statistic(...)
   <i>-- pokud nejsou zadany zadne parametry,</i>
   <i>-- neni nutne vypocet provadet</i>
   <strong>if</strong> ... == <strong>nil</strong> <strong>then</strong>
       <strong>return</strong> 0, 0, 0
   <strong>end</strong>
   <i>-- prevod seznamu parametru</i>
   <i>-- na asociativni pole</i>
   items = {...}
   <i>-- pocet prvku</i>
   n = #items
   sum = 0
   <i>-- vypocet sumy</i>
   <strong>for</strong> i=1, n <strong>do</strong>
      sum = sum + items[i]
   <strong>end</strong>
   <strong>return</strong> n, sum, sum/n
<strong>end</strong>

print("n", "sum", "average")
print(statistic())
print(statistic(1, 2, 3, 4))
print(statistic(1, 1, 0, 0))
print(statistic(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))

<i>-- finito</i>
</code-area>

<p></p>

<code-area>n       sum     average
0       0       0
4       10      2.5
4       2       0.5
10      55      5.5
</code-area>



<p><a name="k07"></a></p>
<h1>7. Rekurze, tail rekurze</h1>

<p>V&nbsp;programovacím jazyce <i>Lua</i> je (samozřejmě) podporována i
<i>rekurze</i>, tj.&nbsp;z&nbsp;nějaké funkce je možné přímo či nepřímo volat
tutéž funkci. Pro zápis rekurze není zavedena žádná speciální syntaxe, pouze
dostačuje přímo do těla funkce zapsat volání téže funkce (<i>Pascal</i> naproti
tomu vyžaduje použití předběžné deklarace funkce s&nbsp;klíčovým slovem
<strong>forward</strong>, jazyky <i>C</i> a <i>C++</i> potřebují ze stejného
důvodu jako <i>Pascal</i> znát hlavičky funkcí atd.). Samotná podpora rekurze
samozřejmě není nic překvapivého, spíš by bylo podivné, kdyby nějaký moderní
programovací jazyk tuto vlastnost nepodporoval. Ovšem <i>Lua</i> dokáže,
podobně jako <i>Lisp</i> či <i>Scheme</i>, v&nbsp;některých případech klasickou
rekurzi, kdy se při každém rekurzivním volání ukládají parametry, lokální
proměnné i návratová hodnota na zásobník (jedná se o takzvaný <i>aktivační
záznam funkce</i>), nahradit <i>tail rekurzí</i>, při níž se velikost zásobníku
nezvětšuje, protože parametry jsou předány přes lokální proměnné a návratová
adresa není zpracovávána vůbec (ve své podstatě zde dojde
k&nbsp;&bdquo;rozbalení&ldquo; rekurze na smyčku).</p>

<p>Užitečnost <i>tail rekurze</i> spočívá v&nbsp;tom, že se pomocí ní dají
snadno vyjádřit některé rekurzivní algoritmy, ovšem samotná cena, kterou
zaplatíme za použití rekurze (měřená jako velikost obsazeného místa na
zásobníku) je stejná, jako kdyby byly použity klasické cykly (programové
smyčky). Aby byla <i>tail rekurze</i> skutečně použita, je nutné rekurzivní
volání umístit do posledního příkazu <strong>return</strong> a navíc musí
volající funkce vrátit přímo výsledek funkce volané, bez jeho dalších úprav
(například k&nbsp;výsledku není možné přičíst ani vynásobit konstantu). To je
poměrně přísná podmínka, která se v&nbsp;dalších jazycích podporujících <i>tail
rekurzi</i> většinou nevyskytuje &ndash; překladač <i>Lua</i> totiž prozatím
nedokáže rozpoznat všechny situace, ve kterých by mohl <i>tail rekurzi</i>
skutečně uplatnit.</p>

<p>V&nbsp;demonstračním příkladu na rekurzi jsou vytvořeny dvě rekurzivní
funkce. První slouží k&nbsp;rekurzivnímu výpočtu faktoriálu (jedná se o typický
školní příklad), druhá pak k&nbsp;výpočtu binomického koeficientu &bdquo;n nad
k&ldquo;, tj.&nbsp;celkového počtu kombinací <i>k</i> prvků ze sady <i>n</i>
prvků. Známý vzorec pro výpočet binomického koeficientu: <i>n!/((n-k)!k!)</i>
není pro přímou programovou implementaci příliš vhodný, protože hodnota
faktoriálu roste tak rychle, že i pro relativně malé hodnoty brzy mezivýpočet
přesáhne povolený rozsah čísel typu <i>double</i>. Místo toho však lze použít
rekurzivní vztah: <i>(n nad k)=n/k&times;(n-1 nad k-1)</i> s&nbsp;tím, že <i>(n
nad 0) = 1</i>. Právě tento vztah je převeden do algoritmu v&nbsp;demonstračním
příkladu:</p>

<code-area><i>-- Sedmy demonstracni priklad:</i>
<i>-- vyuziti rekurze</i>

<i>-- funkce pro rekurzivni vypocet faktorialu</i>
<strong>function</strong> factorial(n)
    <i>-- faktorial je definovan pouze pro prirozena cisla a nulu</i>
    <strong>if</strong> n &lt; 0 <strong>then</strong>
        <strong>return</strong> <strong>nil</strong>
    <i>-- rekurze je ukoncena pri n=0</i>
    else<strong>if</strong> n == 0 <strong>then</strong>
        <strong>return</strong> 1
    else
        <strong>return</strong> n*factorial(n-1)
    <strong>end</strong>
<strong>end</strong>

<i>-- vypis tabulky s faktorialy</i>
print()
print("Factorial")
print("n", "n!")
<strong>for</strong> n = -5, 10 <strong>do</strong>
    print(n, factorial(n))
<strong>end</strong>

<i>-- rekurzivni vypocet binomickeho koeficientu</i>
<strong>function</strong> binomical(n, k)
    <strong>if</strong> k == 0 <strong>then</strong>
        <strong>return</strong> 1
    else
        <strong>return</strong> binomical(n - 1, k - 1) * n / k;
    <strong>end</strong>
<strong>end</strong>

<i>-- vypis nekterych hodnot "n nad k"</i>
print()
print("Binomical coefficients")
print("n", "k", "n nad k")
<strong>for</strong> k = 0, 10 <strong>do</strong>
    <strong>for</strong> n = k, 10 <strong>do</strong>
        print(n, k, binomical(n, k))
    <strong>end</strong>
<strong>end</strong>

<i>-- finito</i>

</code-area>

<p>Program po svém spuštění vypíše na standardní výstup text:</p>

<code-area>Factorial
n       n!
-5      nil
-4      nil
-3      nil
-2      nil
-1      nil
0       1
1       1
2       2
3       6
4       24
5       120
6       720
7       5040
8       40320
9       362880
10      3628800

Binomical coefficients
n       k       n nad k
0       0       1
1       0       1
2       0       1
3       0       1
4       0       1
5       0       1
6       0       1
7       0       1
8       0       1
9       0       1
10      0       1
1       1       1
2       1       2
3       1       3
4       1       4
5       1       5
6       1       6
7       1       7
8       1       8
9       1       9
10      1       10
2       2       1
3       2       3
4       2       6
5       2       10
6       2       15
7       2       21
8       2       28
9       2       36
10      2       45
3       3       1
4       3       4
5       3       10
6       3       20
7       3       35
8       3       56
9       3       84
10      3       120
4       4       1
5       4       5
6       4       15
7       4       35
8       4       70
9       4       126
10      4       210
5       5       1
6       5       6
7       5       21
8       5       56
9       5       126
10      5       252
6       6       1
7       6       7
8       6       28
9       6       84
10      6       210
7       7       1
8       7       8
9       7       36
10      7       120
8       8       1
9       8       9
10      8       45
9       9       1
10      9       10
10      10      1
</code-area>



<p><a name="k08"></a></p>
<h1>8. Obsah další části seriálu</h1>

<p>V&nbsp;následující části seriálu o programovacím jazyce <i>Lua</i> si
ukážeme, jakým způsobem je možné pracovat s&nbsp;takzvanými <i>uzávěry</i>, což
jsou nepojmenované lokální funkce používané v&nbsp;některých programových
konstrukcích (především ve funkcionálních jazycích, ke kterým má <i>Lua</i>
v&nbsp;několika ohledech velmi blízko). Také si řekneme, jak lze pracovat
s&nbsp;funkcemi uloženými v&nbsp;asociativních polích, jelikož právě tímto
způsobem uložené funkce tvoří základ objektů (ve smyslu objektově orientovaného
programování). Popíšeme si též princip registrace funkcí vytvořených
v&nbsp;programovacím jazyce <i>C</i> či <i>C++</i>, které se po svém
zaregistrování stávají pro programátory plnohodnotnými
<i>Lua</i>&ndash;funkcemi, jež lze ze skriptů napsaných v&nbsp;<i>Lua</i>
volat, či s&nbsp;nimi dále manipulovat. Uvidíme, že komunikace mezi <i>Lua</i>
a céčkovým či C++ programem je poměrně jednoduchá, především při porovnání
způsobu registrace a volání externích funkcí v&nbsp;jiných skriptovacích
jazycích (ostatně právě tato jednoduchost zapříčinila velkou oblibu jazyka
<i>Lua</i> při tvorbě počítačových her).</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

