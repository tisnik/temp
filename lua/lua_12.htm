<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Lua + LÖVE: vytvořte si vlastní hru</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Lua + LÖVE: vytvořte si vlastní hru</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve dvanácté části seriálu o programovacím jazyku Lua se seznámíme se souborem modulů (knihoven) LÖVE, pomocí nichž je možné vytvářet různé multiplatformní interaktivní aplikace, především hry. Velkou předností LÖVE je snadná použitelnost, takže se do vytvoření jednodušší hry mohou pustit i začátečníci.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Stručný popis systému <i>LÖVE</i></a><br />
<a href="#k02">2. Moduly obsažené v&nbsp;systému <i>LÖVE</i></a><br />
<a href="#k03">3. Nastavení grafického režimu, základy práce s&nbsp;2D grafikou</a><br />
<a href="#k04">4. Podpora přehrávání zvuků a hudby</a><br />
<a href="#k05">5. Použití časovače &ndash; základ interaktivních her a animací</a><br />
<a href="#k06">6. Čtení stavu klávesnice</a><br />
<a href="#k07">7. Práce s&nbsp;myší</a><br />
<a href="#k08">8. Práce s&nbsp;joysticky</a><br />
<a href="#k09">9. Odkazy na Internetu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Stručný popis systému <i>LÖVE</i></h1>

<p>Systém <i>LÖVE</i> je určen pro jednoduchou a především rychlou tvorbu her
s&nbsp;2D grafikou, hudbou a zvuky, které jsou naskriptované
v&nbsp;programovacím jazyce <i>Lua</i>, popř.&nbsp;se v&nbsp;nich využívá
pomocných funkcí naprogramovaných v&nbsp;céčku či C++. Velkou předností systému
<i>LÖVE</i> je jeho snadná použitelnost, spočívající zejména v&nbsp;přehledném
aplikačním programovém rozhraní (API) jednotlivých knihoven přítomných
v&nbsp;tomto systému i jednoduché syntaxi jazyka <i>Lua</i> a jeho dynamickém
typovém systému. Samotný systém <i>LÖVE</i> interně využívá několika céčkových
a C++ knihoven, především <i>boost</i> (obecné algoritmy v&nbsp;C++),
<i>SDL</i> (nastavení grafických režimů), <i>SDL_mixer</i> (podpora hudby a
zvuků), <i>OpenGL</i> (2D grafika, double buffering), <i>DevIL</i> (práce
s&nbsp;rastrovými obrázky) a <i>FreeType 2</i> (vykreslování písma), avšak
vývojář, který pomocí <i>LÖVE</i> vytváří hry či jiné interaktivní aplikace
s&nbsp;2D grafikou, hudbou a zvuky, je od těchto knihoven zcela odstíněn
aplikačním programovým rozhraním systému <i>LÖVE</i>.</p>

<p>V&nbsp;současnosti je systém <i>LÖVE</i> podporován jak na Linuxu, tak i na
operačních systémech Microsoft Windows XP, Vista (lze jej však používat i na
Microsoft Windows 98 SE, ovšem jen při překladu ze zdrojových kódů) i Mac OS X.
Pro GNU/Linux, přesněji pro distribuce založené na Debianu, tj.&nbsp;i pro
Ubuntu, je k&nbsp;dispozici instalační balíček. Instalační program existuje i
pro operační systémy Microsoft Windows, což znamená, že pro vytváření her
v&nbsp;tomto systému ani není nutné, aby byl v&nbsp;systému přítomný překladač
C či C++, což použití <i>LÖVE</i> na těchto operačních systémech zjednodušuje
(samotný <i>LÖVE</i> již v&nbsp;tomto případě obsahuje interpretr jazyka
<i>Lua</i> i všechny požadované knihovny). Pro Mac OS X se instalační program
teprve připravuje, před jeho dokončením je však možné provést instalaci
překladem zdrojových textů &ndash; při překladu se však předpokládá, že jsou
v&nbsp;systému již přítomny všechny potřebné knihovny (viz on-line dokumentace
na domovské stránce systému <i>LÖVE</i>, odkaz na ni je uveden <a
href="#k09">v&nbsp;deváté kapitole</a>).</p>



<p><a name="k02"></a></p>
<h1>2. Moduly obsažené v&nbsp;systému <i>LÖVE</i></h1>

<p>Celý systém <i>LÖVE</i> je rozdělen do několika modulů (knihoven), jejichž
jména vždy začínají prefixem <i>love.</i>, například <i>love.joystick</i> či
<i>love.system</i> (nejedná se samozřejmě o nic jiného, než o jmenný prostor
implementovaný tak, že jsou všechny knihovny uloženy v&nbsp;globálním
asociativním poli pojmenovaném <i>love</i>). Tyto moduly je možné do značné
míry používat nezávisle na sobě. Například pro aplikace, které pouze vyžadují
základní práci s&nbsp;grafikou, tj.&nbsp;načítání a úpravu rastrových obrázků,
vykreslování základních rovinných útvarů, vytvoření okna či přepnutí grafického
režimu a další podobné operace, postačuje použít jen knihovnu
<i>love.graphics</i>; pro programy s&nbsp;animacemi se navíc využívá knihovna
<i>love.timer</i> a při požadavcích na interaktivitu (tj.&nbsp;reakcí aplikace
na operace prováděné uživatelem pomocí klávesnice, myši, touchpadu, joysticku
či jiného vstupního zařízení) má programátor na výběr funkce umístěné
v&nbsp;knihovnách <i>love.mouse</i>, <i>love.keyboard</i> a
<i>love.joystick</i> atd. V&nbsp;následující tabulce jsou vypsány všechny
moduly, jenž jsou v&nbsp;současné verzi systému <i>LÖVE</i> programátorům
nabízeny:</p>

<table>
<tr><th>Název modulu</th><th>Nabízené funkce</th></tr>
<tr><td><i>love.graphics</i>  </td><td>práce s&nbsp;okny, nastavení
celoobrazovkového režimu, povolení či zákaz antialiasingu, vykreslování
rastrových obrázků i základních geometrických tvarů, využití částicových
systémů</td></tr>
<tr><td><i>love.audio</i>     </td><td>základní práce s&nbsp;hudbou a zvuky,
spuštění, pozastavení a zastavení přehrávání, nastavení počtu zvukových kanálů,
načítání hudby ze souborů typu WAV, AIFF, MP3, OGG, MIDI, MOD, XM i dalších
formátů používaných hudebními trackery (viz paralelně běžící seriál o
architekturách počítačů)</td></tr>
<tr><td><i>love.physics</i>   </td><td>řešení kolizí a popř.&nbsp;i vzájemných
odrazů konvexních rovinných útvarů, seskupování těchto útvarů do těles
(anglicky <i>body</i>)</td></tr>
<tr><td><i>love.mouse</i>     </td><td>práce s&nbsp;myší &ndash; nastavení
viditelnosti a pozice kurzoru, programový posun kurzoru na zadané souřadnice,
zjištění aktuální pozice kurzoru myši</td></tr>
<tr><td><i>love.keyboard</i>  </td><td>práce s&nbsp;klávesnicí &ndash;
zjištění, zda je nějaká klávesa stlačena či nikoli (tato &bdquo;knihovna&ldquo;
ve skutečnosti obsahuje pouze jednu funkci, která například rozlišuje mezi
pravým a levým Shiftem, numerický blok klávesnice atd.)</td></tr>
<tr><td><i>love.joystick</i>  </td><td>podpora pro různé typy joysticků či
podobných vstupních zařízeních (více na sobě nezávislých os, tlačítek a dalších
ovládacích prvků)</td></tr>
<tr><td><i>love.filesystem</i></td><td>načítání a ukládání souborů uložených
v&nbsp;adresáři (adresářích) hry; přístup k&nbsp;těmto souborům je tedy
jednodušší, než při použití standardního modulu (knihovny) <i>io</i></td></tr>
<tr><td><i>love.timer</i>     </td><td>na operačním systému nezávislý časovač
s&nbsp;rozlišením jedné milisekundy, podpora pro získání počtu snímků
vykreslených za sekundu (FPS &ndash; frames per second)</td></tr>
<tr><td><i>love.system</i>    </td><td>získání základních informací o systému
<i>LÖVE</i> a taktéž o použité platformě (Windows, Linux atd.)</td></tr>
</table>



<p><a name="k03"></a></p>
<h1>3. Nastavení grafického režimu, základy práce s&nbsp;2D grafikou</h1>

<p>V&nbsp;této kapitole si stručně popíšeme některé funkce dostupné
z&nbsp;modulu <i>love.graphics</i>. Před použitím funkcí pro vykreslování je
nejprve vhodné buď vytvořit okno se zadanou velikostí, do nějž bude
vykreslování prováděno nebo nastavit celoobrazovkový grafický režim &ndash;
<i>fullscreen mode</i> &ndash; ke kterému bude mít aplikace exkluzivní přístup,
což znamená, že se pro celoobrazovkový režim alokuje část video paměti, do
které bude mít přístup pouze jedna aplikace a při porušení této paměti systém
sám požádá o překreslení celé scény. Okno či celoobrazovkový grafický režim lze
nastavit funkcí <i>love.graphics.setMode()</i>, ovšem před voláním této funkce
je vhodné pomocí <i>love.graphics.getModes()</i> nebo
<i>love.graphics.checkMode()</i> zjistit, zda je daný grafický režim podporován
(například na mnoha počítačích existují poměrně restriktivní omezení pro
rozlišení celoobrazovkových režimů). Funkce <i>love.graphics.getModes()</i>
vrátí seznam dostupných celoobrazovkových grafických režimů, zatímco funkce
<i>love.graphics.checkMode()</i> zjistí, zda je možné použít grafický režim se
zadaným rozlišením.</p>

<p>Při vytváření okna nebo přepnutí do celoobrazovkového režimu lze nastavit
požadované horizontální a vertikální rozlišení, dále zvolit, zda se má při
vykreslování čekat na vertikální synchronizaci (na CRT monitorech se jedná o
návrat paprsku do levého horního rohu obrazovky) a taktéž globálně povolit či
zakázat antialiasing hran vykreslovaných obrazců (interně se pro nastavení
antialiasu využívají funkce grafické knihovny <i>OpenGL</i>, která představuje
standardizované aplikační rozhraní ke grafickým akcelerátorům). Po nastavení
grafického režimu je již možné začít pracovat s&nbsp;rastrovými obrázky, které
mohou být na disku uložené v&nbsp;různých souborových formátech (o práci
s&nbsp;grafickými formáty se interně stará knihovna <i>DevIL</i> a
<i>zlib</i>), pracovat s&nbsp;animacemi vytvořenými buď programově či načtenými
z&nbsp;disku, vykreslovat znaky pomocí rastrových fontů (uložených
v&nbsp;externím obrázku) či fontů typu TTF (zde je využita knihovna
<i>FreeType</i>), vykreslovat základní geometrické tvary typu bod, úsečka,
kružnice, trojúhelník či obecný polygon, nebo dokonce vykreslit tak složitý
objekt, jako je částicový systém &ndash; viz navazující část tohoto
seriálu.</p>

<p>Následuje krátký demonstrační příklad, na kterém je ukázán způsob načtení
rastrového obrázku z&nbsp;externího souboru pomocí funkce
<i>love.graphics.newImage()</i> s&nbsp;jeho následným zobrazením, které využívá
&bdquo;přetíženou&ldquo; funkci <i>love.graphics.draw()</i> (chování této
funkce se liší podle, toho, jaké objekty jsou jí předány pro vykreslení; zde se
jedná o objekt typu <i>Image</i>). V&nbsp;níže vypsaném skriptu jsou
nadefinovány pouze dvě funkce nazvané <i>draw</i> a <i>load</i>. Jména těchto
funkcí nebyla zvolená náhodně, jelikož funkce <i>draw</i> je automaticky
zavolána při překreslení okna nebo celé obrazovky a funkce <i>load</i> při
inicializaci aplikace (hry) &ndash; typicky se v&nbsp;ní provádí načtení
konfiguračních souborů, obrázků, fontů či zvuků a hudby. Tento demonstrační
příklad lze najít i v&nbsp;dokumentaci k&nbsp;systému <i>LÖVE</i>, viz odkazy
uvedené <a href="#k09">v&nbsp;deváté kapitole na konci článku</a>:</p>

<code-area><strong>function</strong> load() 
    image = love.graphics.newImage("images/love-ball.png")
<strong>end</strong>

<strong>function</strong> draw()
    love.graphics.draw(image, 400, 300)
<strong>end</strong>
</code-area>



<p><a name="k04"></a></p>
<h1>4. Podpora přehrávání zvuků a hudby</h1>

<p>Pro práci se zvuky a hudbou lze využít modul <i>love.audio</i>, který je
interně založen na knihovně <i>SDL_mixer</i>. Modul <i>love.audio</i> rozlišuje
dva typy objektů: zvuk (<i>Sound</i>) a hudbu (<i>Music</i>). Objekt typu zvuk
může být na disku či jiném obdobném paměťovém médiu uložen ve formátech WAV,
OGG, VOC, AIFF či RIFF. Při načítání těchto souborů, které je většinou
prováděno v&nbsp;callback funkci <i>load</i>, se zvuk dekomprimuje (případ
formátu <i>OGG</i>) a zkonvertuje tak, aby ho bylo možné v&nbsp;libovolný
okamžik ihned přehrát. Tento způsob sice vyžaduje alokaci většího bloku
operační paměti, ovšem před začátkem přehrávání zvuku nedochází
k&nbsp;nežádoucím zpožděním (například při vystřelení ve hře by se zvuk
výstřelu neměl opozdit za animací). Naproti tomu objekty typu hudba
(<i>Music</i>) se z&nbsp;externích souborů načítají a dekódují postupně,
tj.&nbsp;spotřeba paměti je nižší a díky využití vyrovnávacích pamětí
(většinou) nedochází k&nbsp;přerušení přehrávání, ovšem samotný začátek
přehrávání se může poněkud opozdit (což většinou není kritické). Hudbu je možné
mít uloženou v&nbsp;mnoha formátech, včetně MP3, OGG, MIDI, MOD, XM a několika
dalších formátech používaných hudebními trackery. Praktický příklad použití
hudby a zvuků bude ukázán v&nbsp;následující části tohoto seriálu.</p>



<p><a name="k05"></a></p>
<h1>5. Použití časovače &ndash; základ interaktivních her a animací</h1>

<p>Modul <i>love.timer</i> je možné použít pro změření času mezi dvěma po sobě
jdoucími snímky. Jedná se o hodnotu známou pod zkratkou <i>FPS</i>, neboli
<i>frames per second</i>. Rychlost samotné hry by totiž měla být nezávislá na
hodnotě FPS, což znamená, že na pomalejším počítači (nebo na počítači
s&nbsp;pomalejší grafickou kartou) se sice vykreslí menší počet snímků, ovšem
&bdquo;skoky&ldquo; mezi snímky budou větší, aby se na úkor méně kvalitní
animace kompenzoval nižší výpočetní výkon. Pokud například programátor hry
vyžaduje, aby se nějaký objekt za jednu sekundu přesunul z&nbsp;levého okraje
obrazovky na okraj pravý, může být na pomalejším počítači vykresleno pouze 5
snímků (a skok mezi pozicemi objektu tak může dosahovat například 200 pixelů),
zatímco na počítači rychlejším se vykreslí snímků 50 a jednotlivé pozice
objektu v&nbsp;těchto snímcích se budou lišit o 20 pixelů. Přesnost použitého
časovače v&nbsp;současné verzi systému <i>LÖVE</i> dosahuje na podporovaných
platformách 1 ms, v&nbsp;budoucích verzích se však očekává, že se využijí
mnohem přesnější časovače zabudované přímo v&nbsp;mikroprocesorech (moderní
mikroprocesory dokonce dokážou počítat s&nbsp;přesností na jeden takt interních
hodin, což řádově odpovídá desetinám nanosekund).</p>



<p><a name="k06"></a></p>
<h1>6. Čtení stavu klávesnice</h1>

<p>Pro čtení stavu stlačených kláves, ovládání myši a joysticků lze použít
moduly <i>love.keyboard</i>, <i>love.mouse</i> a <i>love.joystick</i>. Modul
<i>love.keyboard</i> obsahuje jedinou funkci <i>love.keyboard.isDown()</i>,
pomocí níž lze zjistit, která klávesa či klávesy jsou v&nbsp;daném okamžiku
stisknuty. Jedná se o práci s&nbsp;klávesnicí na nejnižší úrovni, tj.&nbsp;lze
například rozeznat stavy přeřaďovačů (<strong>Shift</strong>,
<strong>Alt</strong>, <strong>Ctrl</strong>), odlišit numerický blok klávesnice
od kurzorového bloku i numerických kláves umístěných v&nbsp;alfanumerickém
bloku atd. Tuto funkci je možné použít i v&nbsp;případě, že je současně
stlačeno větší množství kláves a klávesnice tuto kombinaci rozezná, což však
nemusí být &ndash; vzhledem k&nbsp;architektuře PC klávesnic &ndash; vždy
splněno. Alternativní způsob čtení stavu klávesnice spočívá ve využití callback
funkcí nazvaných <i>keypressed()</i> a <i>keyreleased()</i>, které jsou
automaticky zavolány vždy při stisku či naopak uvolnění klávesy. Kódy
jednotlivých kláves jsou uloženy ve formě konstant přímo v&nbsp;asociativním
poli <i>love</i>. Každá konstanta představující kód klávesy začíná prefixem
<i>key_</i>, tj.&nbsp;například klávesa <strong>Backspace</strong> je ve všech
třech výše uvedených funkcích reprezentována konstantou
<i>love.key_backspace</i>, pravý <strong>Shift</strong> konstantou
<i>love.key_rshift</i> atd. Podrobnosti si uvedeme příště.</p>



<p><a name="k07"></a></p>
<h1>7. Práce s&nbsp;myší</h1>

<p>Pro ovládání myši i zjištění aktuální pozice kurzoru a stavu všech tlačítek
myši lze využít modul nazvaný <i>love.mouse</i>, jenž obsahuje funkci
<i>love.mouse.setVisible()</i> pro skrytí či naopak zviditelnění kurzoru myši,
funkce <i>love.mouse.getX()</i>, <i>love.mouse.getY()</i> a
<i>love.mouse.getPosition()</i> pro přečtení aktuálních souřadnic kurzoru,
funkci <i>love.mouse.isDown()</i> pro zjištění, které tlačítko či tlačítka myši
jsou v&nbsp;daném okamžiku stlačena a konečně funkci <i>setPosition()</i>
pomocí níž lze změnit souřadnice kurzoru myši a tím i pozici kurzoru na
obrazovce. Kromě výše zmíněných funkcí je možné vytvořit dvě uživatelské
callback funkce nazvané <i>mousepressed()</i> a <i>mousereleased()</i>. Tyto
funkce jsou systémem automaticky zavolány v&nbsp;případě, že je stisknuto či
naopak uvolněno některé tlačítko myši. Vždy jsou naplněny tři parametry &ndash;
aktuální x-ová souřadnice kurzoru myši, y-ová souřadnice a jedna
z&nbsp;konstant <i>love.mouse_left</i>, <i>love.mouse_middle</i> či
<i>love.mouse_right</i> podle toho, které tlačítko myši ji stisknuto či
uvolněno.</p>



<p><a name="k08"></a></p>
<h1>8. Práce s&nbsp;joysticky</h1>

<p>Posledním modulem systému <i>LÖVE</i>, který si v&nbsp;dnešní části seriálu
o jazyku <i>Lua</i> stručně představíme, je modul nazvaný <i>love.joystick</i>,
jenž obsahuje funkce pro zjištění stavu joysticku či dalších podobných
vstupních zařízení, například volantů apod. Pomocí funkce
<i>love.joystick.getNumJoysticks()</i> lze zjistit celkový počet
nainstalovaných joysticků, funkcí <i>love.joystick.getName()</i> se přečte
jméno n-tého joysticku (jména lze využít například v&nbsp;konfiguračních
dialozích vytvářené hry), funkce <i>love.joystick.getNumAxes()</i> a
<i>love.joystick.getNumBalls()</i> slouží pro zjištění počtu os
(otáčení/naklánění) vybraného joysticku popř.&nbsp;počtu trackballů,
v&nbsp;závislosti na tom, které ovládací prvky joystick skutečně obsahuje.</p>

<p>Další funkce se již používají přímo v&nbsp;průběhu hry pro získání
aktuálního stavu vybraného joysticku: <i>love.joystick.isDown()</i> pro
přečtení stavu některého tlačítka joysticku, <i>love.joystick.getAxis()</i> pro
přečtení náklonu vybrané osy či <i>love.joystick.getAxes()</i> pro současné
přečtení náklonu všech os joysticku. Podobně jako v&nbsp;případě klávesnice a
myši, i pro automatickou reakci na změnu stavu tlačítek joysticku lze vytvořit
callback funkce zavolané tehdy, pokud je stlačeno či naopak uvolněno některé
tlačítko joysticku. Těmto globálním funkcím, jenž se musí jmenovat
<i>joystickpressed()</i> a <i>joystickreleased()</i>, je předána konstanta
určující jméno stlačeného či naopak uvolněného tlačítka.</p>



<p><a name="k09"></a></p>
<h1>9. Odkazy na Internetu</h1>

<ol>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Tutoriály k&nbsp;systému LÖVE<br />
<a href="http://love2d.org/?page=documentation">http://love2d.org/?page=documentation</a>
</li>

<li>Screenshoty aplikací vytvořených v&nbsp;LÖVE<br />
<a href="http://love2d.org/screenshots">http://love2d.org/screenshots</a></li>

<li>Domovská stránka programovacího jazyka Lua<br />
<a href="http://www.lua.org/ ">http://www.lua.org/ </a>
</li>

<li>Lua<br />
<a href="http://www.linuxexpres.cz/praxe/lua">http://www.linuxexpres.cz/praxe/lua</a>
</li>

<li>Lua<br />
<a href="http://cs.wikipedia.org/wiki/Lua">http://cs.wikipedia.org/wiki/Lua</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>The Lua Programming Language<br />
<a href="http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html">http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html</a>
</li>

<li>Lua Programming Gems<br />
<a href="http://www.lua.org/gems/">http://www.lua.org/gems/</a>
</li>

<li>LuaForge<br />
<a href="http://luaforge.net/">http://luaforge.net/</a>
</li>

<li>Forge project tree<br />
<a href="http://luaforge.net/softwaremap/trove_list.php">http://luaforge.net/softwaremap/trove_list.php</a>
</li>

<li>gamedev.net: Lua<br />
<a href="http://www.gamedev.net/reference/programming/features/lua/">http://www.gamedev.net/reference/programming/features/lua/</a>
</li>

<li>Category:Lua-scripted games<br />
<a href="http://en.wikipedia.org/wiki/Category:Lua-scripted_games">http://en.wikipedia.org/wiki/Category:Lua-scripted_games</a>
</li>

<li>Category:Lua-scriptable games<br />
<a href="http://en.wikipedia.org/wiki/Category:Lua-scriptable_games">http://en.wikipedia.org/wiki/Category:Lua-scriptable_games</a>
</li>

<li>BZFlag<br />
<a href="http://en.wikipedia.org/wiki/BZFlag">http://en.wikipedia.org/wiki/BZFlag</a>
</li>

<li>BZFlag.org<br />
<a href="http://bzflag.org/">http://bzflag.org/</a>
</li>

<li>GrimE<br />
<a href="http://en.wikipedia.org/wiki/GrimE">http://en.wikipedia.org/wiki/GrimE</a>
</li>

<li>Grim Fandango<br />
<a href="http://www.mobygames.com/game/grim-fandango">http://www.mobygames.com/game/grim-fandango</a>
</li>

<li>Escape from Monkey Island<br />
<a href="http://www.mobygames.com/game/escape-from-monkey-island">http://www.mobygames.com/game/escape-from-monkey-island</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

