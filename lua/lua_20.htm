<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>LuaJ &ndash; implementace jazyka Lua v Javě</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o programovacím jazyku Lua si ukážeme, jakým způsobem je možné využít jednu z poměrně zdařilých implementací tohoto jazyka. Jedná se o implementaci nazvanou příhodně LuaJ, protože je vytvořena, na rozdíl od originální "céčkovské" Luy, v programovacím jazyku Java.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. LuaJ &ndash; implementace jazyka Lua v&nbsp;Javě</a><br />
<a href="#k02">2. Přednosti a zápory implementace LuaJ</a><br />
<a href="#k03">3. Instalace LuaJ a spouštění skriptů</a><br />
<a href="#k04">4. Testovací skript pro zjištění rozdílu mezi Lua a LuaJ v&nbsp;rychlosti interpretace skriptů</a><br />
<a href="#k05">5. Časy běhu skriptu</a><br />
<a href="#k06">6. Spolupráce s&nbsp;knihovnami jazyka Java</a><br />
<a href="#k07">7. Demonstrační příklad &ndash; vytvoření okna pomocí knihovny Swing</a><br />
<a href="#k08">8. Odkazy na Internetu</a><br />
</p>



<p><a name="k01"></a></p>
<h2>1. LuaJ &ndash; implementace jazyka Lua v&nbsp;Javě</h2>

<p>V&nbsp;předchozích částech tohoto seriálu jsme se převážně zabývali popisem
použití interpretru jazyka <i>Lua</i>, který je napsán v&nbsp;ANSI (ISO) C
&ndash; ostatně i systém <i>LÖVE</i> je určen pro céčkovou variantu Luy. Jedná
se o původní implementaci tohoto jazyka, která je přenositelná na velké
množství platforem, od jednoduchých mikrořadičů až po výkonná PC. Kromě této
implementace však existuje i poměrně zdařilá implementace jazyka <i>Lua</i>
nazvaná příhodně <i>LuaJ</i>, protože je vytvořena v&nbsp;programovacím jazyku
<i>Java</i>, přičemž výsledný interpret lze použít jak pro platformu J2SE/J2EE
(desktopy, aplikační servery atd.), tak i J2ME (rozličná mobilní zařízení). Ve
své podstatě se jedná o virtuální stroj (<i>Lua Virtual Machine</i>) běžící ve
druhém virtuálním stroji (<i>JVM &ndash; Java Virtual Machine</i>). Použitím
platformy Java je mj.&nbsp;umožněno, aby vytvářené skripty využívaly bez
větších omezení všech knihoven poskytovaných běhovým prostředím Javy (JRE),
podobně jako tomu je například v&nbsp;případě skriptovacího jazyka <i>Scala</i>
či <i>Jythonu</i> (poměrně oblíbená implementace Pythonu pro JRE).</p>

<p>Dokonce je možné použít interpret jazyka <i>Lua</i> jako standardní
skriptovací engine odpovídající JSR-233 (dynamické skriptování, viz odkazy)
&ndash; právě tímto způsobem je v&nbsp;Javě 6 implementován <i>JavaScript</i>,
jedná se o projekt <i>Mozilla Rhino</i>. Javovská verze jazyka <i>Lua</i> si
přitom zachovává svoji relativně malou velikost &ndash; celý archiv obsahující
jak interpret, tak i překladač, má necelých 160 kB (adresa, ze které se tento
archiv dá stáhnout, je uvedená v&nbsp;poslední kapitole). Varianta pro
platformu J2ME je dokonce ještě o 45 kB menší, protože neobsahuje všechny
knihovny. V&nbsp;dalším textu se budu zabývat především variantou určenou pro
platformu J2SE, která může využívat všechny knihovny, které běhové prostředí
J2SE nabízí, například knihovny AWT a Swing pro tvorbu grafického uživatelského
rozhraní, rozsáhlé knihovny pro práci se soubory a sítěmi (IO, NIO, ...), JDBC
(rozhraní k&nbsp;relačním databázím), RMI (volání metod vzdálených objektů),
JNDI atd. Samozřejmě lze <i>LuaJ</i> použít i s&nbsp;dalšími knihovnami i
celými frameworky, například přidat podporu pro skriptování v&nbsp;<i>Lua</i>
do aplikačních serverů (JBoss, WebSphere) atd.</p>



<p><a name="k02"></a></p>
<h2>2. Přednosti a zápory implementace LuaJ</h2>

<p>Spojení platformy Javy a jazyka <i>Lua</i> je v&nbsp;několika ohledech
výhodné. Programátoři pracující v&nbsp;jazyce <i>Lua</i> tak získávají přístup
k&nbsp;velkému množství různých knihoven, ať již těch standardních (některé
jsme si vypsali v&nbsp;předchozím odstavci), tak i například knihoven
vyvíjených v&nbsp;rámci <i>Apache Software Foundation</i>, což je jistě
významné rozšíření možností tohoto jazyka, především v&nbsp;porovnání
s&nbsp;minimalisticky pojatými standardními knihovnami (coroutine, debug, file,
io, os, string, math, table a package). Na druhou stranu mohou z&nbsp;tohoto
spojení profitovat i programátoři v&nbsp;Javě, protože dostávají do rukou další
výkonný jazyk, který v&nbsp;mnoha ohledech ideálně doplňuje samotnou staticky
typovanou Javu o dynamický skriptovací jazyk umožňující v&nbsp;mnoha případech
rychlejší vývoj a testování &ndash; to je ostatně také důvod, proč se dnes
pozornost vývojářů zaměřuje i na další dynamické jazyky určené pro platformu
Javy, především na <i>Scalu</i> a <i>Jython</i>. Mezi nevýhody lze počítat
především ne zcela dokonalou zpětnou kompatibilitu s&nbsp;původními knihovnami
jazyka <i>Lua</i>, což může znamenat, že některé skripty je nutné upravit
(nekompatibilita je z&nbsp;velké míry způsobena rozdílem mezi rozhraním
operačního systému a rozhraním poskytovaným JRE).</p>



<p><a name="k03"></a></p>
<h2>3. Instalace LuaJ a spouštění skriptů</h2>

<p>Instalace interpretru i překladače <i>LuaJ</i> je velmi jednoduchá a lze ji
provést na každém počítači, který obsahuje <i>JRE</i> (Java Runtime
Environment) alespoň verze 1.5. Po stažení archivu z&nbsp;adresy <a
href="http://luaj.sourceforge.net/">http://luaj.sourceforge.net/</a> je
zapotřebí tento archiv rozbalit, například nástrojem <i>unzip</i>.
V&nbsp;archivu se nachází zdrojové kódy celého interpretru i překladače, dále
pak soubory s&nbsp;testy a nakonec také &ndash; což je z&nbsp;našeho pohledu
nejdůležitější &ndash; dva archivy ve formátu JAR &ndash;
<strong>luaj-j2se-verze.jar</strong> a <strong>luaj-j2me-verze.jar</strong>.
Tyto dva archivy obsahují interpret a překladač jazyka <i>Lua</i> i všechny
základní knihovny. Pro spuštění interpretru lze použít následující příkaz, ve
kterém je zapotřebí nahradit číslo 0.96 aktuální verzí souboru:</p>

<pre>
java -cp luaj-j2se-0.96.jar lua
</pre>

<p>Pokud je nutné přímo spustit nějaký skript napsaný v&nbsp;jazyce Lua, předá
se název skriptu jako první parametr interpretru:</p>

<pre>
java -cp luaj-j2se-0.96.jar lua fib.lua
</pre>

<p>Popř.&nbsp;je možné skript přeložit do bajtkódu jazyka Lua (soubory
s&nbsp;bajtkódem ovšem nemusí být přenositelné na céčkovou verzi
interpretru):</p>

<pre>
java -cp luaj-j2se-0.96.jar luac fib.lua
</pre>



<p><a name="k04"></a></p>
<h2>4. Testovací skript pro zjištění rozdílu mezi Lua a LuaJ v&nbsp;rychlosti interpretace skriptů</h2>

<p>Pro alespoň rámcové zjištění rozdílů rychlosti interpretace Lua skriptů
různými interpretry (&bdquo;céčková&ldquo; <i>lua</i> vs.
&bdquo;javovská&ldquo; <i>luaj</i>) posloužil následující program, který po
svém spuštění vypíše na standardní výstup prvních 25 členů Fibonacciho
posloupnosti i časy výpočtu jednotlivých členů. Pro každý člen posloupnosti se
zvlášť volá rekurzivní funkce bez ohledu na předchozí výsledky (které by bylo
samozřejmě možné využít), což je samozřejmě neefektivní, ovšem na druhou stranu
se lépe měří časové rozdíly intepretace tohoto programu. V&nbsp;testovacím
skriptu se mj.&nbsp;používá i metoda <i>clock()</i> z&nbsp;knihovny <i>os</i>.
Tato knihovna je sice v&nbsp;&bdquo;céčkové&ldquo; verzi interpretru přímo
dostupná, ovšem při použití Javovské verze, tj.&nbsp;<i>luaj</i>, je nejdříve
nutné tuto knihovnu explicitně načíst, o což se postará příkaz
<strong>pcall(require, "org.luaj.lib.j2se.J2seOsLib")</strong>. Zjištění, zda
je knihovna <i>os</i> dostupná je snadné &ndash; jedná se o globální
asociativní pole, takže lze použít jednoduchý test, zda existuje globální
proměnná <i>os</i>:</p>

<pre>
-- Výpočet Fibonacciho posloupnosti s využitím
-- (neefektivního) rekurzivního algoritmu


-- nutné pouze při volání skriptu z LuaJ,
-- při použití "céčkové" Luy lze zakomentovat
print('os lib loaded: ', os ~= nil)
local lib = "org.luaj.lib.j2se.J2seOsLib"
print('require "'..lib..'"', pcall(require, lib) )
print('os lib loaded: ', os ~= nil)


-- funkce provádějící vlastní rekurzivní výpočet
-- Fibonacciho posloupnosti
function fib(n)
    if n &lt; 2 then
        return n
    else
        return fib(n - 1) + fib(n - 2)
    end
end



-- funkce, která vypočte a vytiskne n-té číslo
-- Fibonacciho posloupnosti
-- spolu s měřením času výpočtu
function test(n)
    local time1 = os.clock()
    -- volat stejnou funkci 100x, pro zlepšení
    -- přesnosti výpočtu času
    local value
    for i = 1, 100 do
        value = fib(n)
    end
    local time2 = os.clock()
    local deltaTime = time2 - time1
    -- tisk výsledků výpočtu i měření času
    print(n, value, math.floor(1000.0*time1), math.floor(1000.0*time2), math.floor(1000.0*deltaTime))
end



-- výpis hlavičky tabulky
print("n", "value", "time1", "time2", "delta")

for n = 1, 25 do
    test(n)
end

-- finito
</pre>



<p><a name="k05"></a></p>
<h2>5. Časy běhu skriptu</h2>

<p>Časy výpočtu získané interpretací testovacího skriptu s&nbsp;využitím
původní &bdquo;céčkové&ldquo; varianty jazyka <i>Lua</i>, přeložené
s&nbsp;využitím překladače GCC pomocí dodávaného souboru <i>Makefile</i>, jsou
vypsány v&nbsp;následující tabulce. Poznamenejme, že v&nbsp;souboru
<i>Makefile</i> je mj.&nbsp;použita volba -O2, tj.&nbsp;kód interpreteru je
optimalizován, i když se nejedná o nejúčinnější metodu optimalizace:</p>

<pre>
n       value   time1   time2   delta
1       1       0       0       0
2       1       0       0       0
3       2       0       0       0
4       3       0       0       0
5       5       0       10      10
6       8       10      10      0
7       13      10      10      0
8       21      10      10      0
9       34      10      20      10
10      55      20      30      9
11      89      30      40      10
12      144     40      60      19
13      233     60      100     40
14      377     100     160     60
15      610     160     260     100
16      987     260     420     159
17      1597    420     670     250
18      2584    670     1091    420
19      4181    1091    1762    671
20      6765    1762    2864    1101
21      10946   2864    4656    1791
22      17711   4656    7520    2864
23      28657   7520    12157   4637
24      46368   12157   19598   7440
25      75025   19598   31625   12027
</pre>

<p>V&nbsp;další tabulce jsou vypsány časy interpretace skriptu pomocí
Javovského interpreteru <i>LuaJ</i>, který byla spuštěn na platformě <i>Java
6</i> v&nbsp;režimu client (volba <i>-client</i>). Časy běhu jsou cca 2,5&times;
delší, než ve výše uvedeném případě:</p>

<pre>
n       value   time1   time2   delta
1       1       10      10      0
2       1       10      50      40
3       2       50      60      9
4       3       60      80      20
5       5       80      80      0
6       8       80      80      0
7       13      80      90      9
8       21      90      100     10
9       34      100     120     19
10      55      120     150     30
11      89      150     190     40
12      144     190     260     70
13      233     260     380     120
14      377     380     561     181
15      610     561     861     299
16      987     861     1342    481
17      1597    1342    2123    781
18      2584    2123    3375    1251
19      4181    3375    5398    2022
20      6765    5398    8662    3264
21      10946   8662    13950   5287
22      17711   13950   22512   8562
23      28657   22512   36352   13839
24      46368   36352   58855   22503
25      75025   58855   95247   36392
</pre>

<p>Pokud se při spuštění interpreteru <i>LuaJ</i> povolí režim server (volba
<i>-server</i>), výpočet, tj.&nbsp;doba interpretace skriptu, se podle
očekávání zrychlí, ovšem nedosahuje takové rychlosti, jako při použití céčkové
varianty interpreteru:</p>

<pre>
n       value   time1   time2   delta
1       1       10      10      0
2       1       10      30      19
3       2       30      40      10
4       3       40      651     611
5       5       651     671     20
6       8       671     701     29
7       13      701     772     71
8       21      772     842     69
9       34      852     862     10
10      55      862     882     20
11      89      882     922     40
12      144     922     972     49
13      233     972     1062    90
14      377     1062    1202    139
15      610     1202    1433    231
16      987     1433    1803    369
17      1597    1803    2404    601
18      2584    2404    3365    961
19      4181    3365    4928    1562
20      6765    4928    7471    2543
21      10946   7481    11567   4086
22      17711   11567   18197   6629
23      28657   18197   28942   10745
24      46368   28942   46397   17455
25      75025   46407   74488   28081
</pre>

<p>Po vynesení do grafu můžeme vidět rozdíl v&nbsp;rychlosti interpretace mezi
originálním interpretrem <i>Lua</i> a interpretrem <i>LuaJ</i> spuštěného jak
v&nbsp;režimu client, tak i server. Důležité jsou samozřejmě pouze poměry mezi
jednotlivými časy, nikoli jejich absolutní hodnota (ta se bude lišit
v&nbsp;závislosti na použitém počítači). Samozřejmě, že pokud skript většinu
svého času stráví prováděním vstupně/výstupních operací, komunikací po síti,
práci s&nbsp;GUI či čtením dat z&nbsp;databáze, tak se rozdíly mezi jednotlivými
implementacemi zmenšují.</p>

<a href="http://i.iinfo.cz/images/534/lua2001.png"><img src="http://i.iinfo.cz/images/534/lua2001-prev.png" width="300" height="270" alt="lua2001" /></a>



<p><a name="k06"></a></p>
<h2>6. Spolupráce s&nbsp;knihovnami jazyka Java</h2>

<p>V&nbsp;předchozích kapitolách jsme si řekli, že jedna z&nbsp;největších
předností integrace jazyka <i>Lua</i> s&nbsp;Javou spočívá v&nbsp;možnosti
využití prakticky všech Javovských knihoven z&nbsp;Lua skriptů, tj.&nbsp;přímo
ve skriptu je možné vytvořit instanci libovolné Javovské třídy, přistupovat
k&nbsp;atributům i metodám této instance, registrovat callback funkce zavolané
ve chvíli, kdy uvnitř JVM (<i>Java Virtual Machine</i>) vznikne nějaká událost
atd. Většina této funkcionality je obsažena v&nbsp;knihovně <i>luajava</i>,
která programátorům nabízí funkci <strong>luajava.newInstance()</strong>
určenou vytvoření instance Java třídy zadané svým jménem s&nbsp;předáním
parametrů do konstruktoru, funkci <strong>luajava.createProxy()</strong>, která
zajistí vytvoření Javovského objektu, jenž může zachytit události vzniklé
v&nbsp;JVM a zavolat Lua funkci zaregistrovanou k&nbsp;tomuto typu události aj.
Funkce dostupné v&nbsp;knihovně <i>luajava</i> jsou založeny na Reflection API,
což mj.&nbsp;znamená, že tato knihovna není plně funkční na platformě J2ME
(mobilní zařízení) a vytvoření instancí Javovských tříd je poněkud složitější,
což si ukážeme v&nbsp;navazující části tohoto seriálu.</p>



<p><a name="k07"></a></p>
<h2>7. Demonstrační příklad &ndash; vytvoření okna pomocí knihovny Swing</h2>

<p>V&nbsp;dnešním demonstračním příkladu, jehož výpis je uveden pod tímto
odstavcem, je ukázáno, jakým způsobem je možné vytvářet instance tříd
z&nbsp;Javovských knihoven a jak je možné volat statické metody
(tj.&nbsp;funkce) těchto tříd i (nestatické) metody objektů. Na tomto příkladu
je pravděpodobně nejzajímavější právě způsob vytváření instance tříd pomocí
funkce <i>luajava.newInstance()</i>, protože při volání této funkce je nutné
uvést plné jméno třídy ve formě řetězce (o tom, která třída se skutečně
použije, se rozhoduje až za běhu skriptu) a popř.&nbsp;i parametry předávané
konstruktoru. Vzhledem k&nbsp;tomu, že <i>Lua</i> je dynamicky typovaný jazyk,
neuvádí se samozřejmě typ proměnné, ve které je uložena instance třídy
(<i>Lua</i> ani neobsahuje žádnou syntaktickou konstrukci pro určení typu
proměnné). Volání metod instance třídy se provádí pomocí operátoru
<strong>:</strong>, který, jak již víme z&nbsp;předchozích částí tohoto
seriálu, představuje pouze syntaktický cukr k&nbsp;operátoru <strong>.</strong>
&ndash; jediný rozdíl spočívá v&nbsp;tom, že se při použití operátoru
<strong>:</strong> automaticky doplní před první argument volané funkce
parametr s&nbsp;instancí třídy.</p>

<p>K&nbsp;atributům objektů se přistupuje podobným způsobem, ovšem v&nbsp;tomto
případě se používá se operátor <strong>.</strong>, viz například řádek
s&nbsp;kódem <i>frame:getContentPane():add(pane, borderLayout.CENTER )</i>.
Zajímavé je také to, že je možné přes funkci <i>luajava.createProxy()</i>
zaregistrovat callback funkci (napsanou v&nbsp;Lua skriptu) zavolanou
v&nbsp;případě výskytu nějaké události. V&nbsp;níže uvedeném demonstračním
příkladu se jedná o událost vzniklou při kliknutí myší do vytvořeného okna
(callback funkce je zaregistrována pro celé okno &ndash; <i>frame</i>). Samotné
zaregistrování události vzniklé v&nbsp;JVM (Java Virtual Machine) v&nbsp;tomto
případě zajistí knihovna <i>luajava</i>, která automaticky vytvoří a přes
příslušné API zaregistruje neviditelnou Javovskou třídu, jenž vzniklou událost
zachytí a po zachycení události se zavolá funkce napsaná v&nbsp;Lua skriptu.
Při běžném použití je tento způsob zpracování událostí pro programátory
transparentní.</p>

<pre>
frame = luajava.newInstance( "javax.swing.JFrame", "Texts" );
pane = luajava.newInstance( "javax.swing.JPanel" );
borderFactory = luajava.bindClass( "javax.swing.BorderFactory" )
border = borderFactory:createEmptyBorder( 30, 30, 10, 30 )
pane:setBorder( border )
label = luajava.newInstance( "javax.swing.JLabel", "This is a Label" );

layout = luajava.newInstance( "java.awt.GridLayout", 2, 2 );
pane:setLayout( layout )
pane:add( label )
pane:setBounds( 20, 30, 10, 30 )

borderLayout = luajava.bindClass( "java.awt.BorderLayout" )
frame:getContentPane():add(pane, borderLayout.CENTER )
jframe = luajava.bindClass( "javax.swing.JFrame" )
frame:setDefaultCloseOperation(jframe.EXIT_ON_CLOSE)
frame:pack()
frame:setVisible(true)

local listener = luajava.createProxy("java.awt.event.MouseListener",
    {
        mouseClicked = function(me)
            print("clicked!", me)
        end
    })

frame:addMouseListener(listener)
</pre>



<p><a name="k08"></a></p>
<h2>8. Odkazy na Internetu</h2>

<ol>

<li>
James Roseborough, Ian Farmer: Getting Started with LuaJ<br />
dokument obsažený přímo v&nbsp;instalaci <i>LuaJ</i>
</li>

<li>
SourceForge Luaj Project Page<br />
<a href="http://luaj.sourceforge.net/">http://luaj.sourceforge.net/</a>
</li>

<li>
SourceForge Luaj Download Area<br />
<a href="http://sourceforge.net/project/platformdownload.php?group_id=197627">http://sourceforge.net/project/platformdownload.php?group_id=197627</a>
</li>

<li>
LuaForge Luaj Project Page<br />
<a href="http://luaforge.net/projects/luaj/">http://luaforge.net/projects/luaj/</a>
</li>

<li>
LuaForge Luaj Project Area<br />
<a href="http://luaforge.net/frs/?group_id=457">http://luaforge.net/frs/?group_id=457</a>
</li>

<li>Lua home page<br />
<a href="http://www.lua.org/ ">http://www.lua.org/ </a>
</li>

<li>Lua: vestavitelný minimalista<br />
<a href="http://www.root.cz/clanky/lua-vestavitelny-minimalista/">http://www.root.cz/clanky/lua-vestavitelny-minimalista/</a>
</li>

<li>Lua<br />
<a href="http://www.linuxexpres.cz/praxe/lua">http://www.linuxexpres.cz/praxe/lua</a>
</li>

<li>Lua<br />
<a href="http://cs.wikipedia.org/wiki/Lua">http://cs.wikipedia.org/wiki/Lua</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>The Lua Programming Language<br />
<a href="http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html">http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html</a>
</li>

<li>Lua Programming Gems<br />
<a href="http://www.lua.org/gems/">http://www.lua.org/gems/</a>
</li>

<li>LuaForge<br />
<a href="http://luaforge.net/">http://luaforge.net/</a>
</li>

<li>Forge project tree<br />
<a href="http://luaforge.net/softwaremap/trove_list.php">http://luaforge.net/softwaremap/trove_list.php</a>
</li>

<li>JSR 223: Scripting for the JavaTM Platform:<br />
<a href="http://jcp.org/en/jsr/detail?id=223">http://jcp.org/en/jsr/detail?id=223</a>
</li>

<li>Apache Software Foundation:<br />
<a href="http://www.apache.org">http://www.apache.org</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

