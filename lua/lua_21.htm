<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>LuaJ a skriptování podle specifikace JSR-223</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>LuaJ a skriptování podle specifikace JSR-223</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o programovacím jazyku Lua si ukážeme různé způsoby využití interpretru a překladače LuaJ, což je implementace jazyka Lua určená pro "Javovské" platformy J2SE i J2ME. Budeme se též zabývat využitím tohoto interpretru ve formě odpovídající API specifikovaného v JSR-223.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Projekt LuaJ: spolupráce skriptů napsaných v&nbsp;jazyce Lua s Javou</a><br />
<a href="#k02">2. Přímé spuštění interpretru Luaj z&nbsp;příkazového řádku</a><br />
<a href="#k03">3. Překlad skriptu do bajtkódu a následná interpretace bajtkódu</a><br />
<a href="#k04">4. Načtení a spuštění skriptu z&nbsp;Javovské aplikace</a><br />
<a href="#k05">5. První demonstrační příklad &ndash; skript spuštěný z&nbsp;Javovské aplikace</a><br />
<a href="#k06">6. Druhý demonstrační příklad &ndash; bajtkód skriptu spuštěný z&nbsp;Javovské aplikace</a><br />

<a href="#k07">7. JSR-223 a její význam při implementaci skriptovacích jazyků pro Javu</a><br />
<a href="#k08">8. Využití tříd implementujících rozhraní ScriptEngine,
ScriptEngineFactory a ScriptEngineManager</a><br />
<a href="#k09">9. Literatura a odkazy na Internetu</a><br />
</p>



<p><a name="k01"></a></p>
<h2>1. Projekt LuaJ: spolupráce skriptů napsaných v&nbsp;jazyce Lua s Javou</h2>

<p>V&nbsp;předchozí části tohoto seriálu jsme se seznámili s&nbsp;poměrně
zdařilou implementací jazyka <i>Lua</i> nazvanou <i>LuaJ</i>. Jedná se o
nástroj vytvořený v&nbsp;Javě, přičemž výsledný interpret i překladač je možné
použít jak pro platformu J2SE/J2EE (desktopy, aplikační servery atd.), tak i
J2ME (rozličná mobilní zařízení). Ve své podstatě se jedná o virtuální stroj
(<i>Lua Virtual Machine</i>) běžící ve druhém virtuálním stroji (<i>JVM &ndash;
Java Virtual Machine</i>), což sice znamená, že Lua skripty běží pomaleji, než
v&nbsp;originálním &bdquo;céčkovém&ldquo; interpretru jazyka <i>Lua</i>, na
druhou stranu však mohou vývojáři používat celou řadu Javovských knihoven, od
těch standardních dodávaných spolu s&nbsp;JDK/JRE (<i>Java Development
Kit</i>/<i>Java Runtime Environment</i>), tak i například knihoven a frameworků
vyvíjených v&nbsp;rámci projektu <i>Apache</i>. Dnes si ukážeme několik způsobů
využití <i>LuaJ</i> a taktéž se seznámíme se specifikací JSR-223, ve které je
mj.&nbsp;popsáno univerzální aplikační programové rozhraní, které je možné
použít pro přístup k&nbsp;prakticky libovolnému skriptovacímu jazyku, jehož
interpret běží na platformě J2SE.</p>



<p><a name="k02"></a></p>
<h2>2. Přímé spuštění interpretru Luaj z&nbsp;příkazového řádku</h2>

<p>Programátor, který se rozhodne využívat Lua skripty pro rozšíření své
Javovské aplikace, má k&nbsp;dispozici několik způsobů, jakými může Lua skript
spouštět. Nejjednodušší způsob, který jsme si již ukázali v&nbsp;předchozí
části tohoto seriálu, spočívá v&nbsp;přímém spuštění interpretru či překladače,
který je dostupný v&nbsp;archivu <strong>luaj-j2se-verze.jar</strong>
popř.&nbsp;<strong>luaj-j2me-verze.jar</strong> (místo slova <i>verze</i> se
samozřejmě musí dosadit konkrétní číslo verze, tj.&nbsp;například 0.96). Tyto
dva archivy, jenž jsou dostupné na stránce projektu <a
href="http://luaj.sourceforge.net/">LuaJ</a>, obsahují interpret a překladač
jazyka <i>Lua</i> i všechny potřebné základní knihovny, které známe
z&nbsp;céčkové verze Lua.</p>

<p>Předností tohoto způsobu spouštění skriptů je značná jednoduchost (není
zapotřebí spouštět překladač <strong>javac</strong> ani nastavovat cesty) a
v&nbsp;neposlední řadě také to, že není nutné, aby na počítači bylo
nainstalované celé vývojové prostředí jazyka Java &ndash; ve skutečnosti
postačuje pouze JRE (Java Runtime Environment) verze 1.5, takže se v&nbsp;mnoha
případech zjednoduší i instalace aplikace. V&nbsp;případě, že je nutné přímo
spustit nějaký skript napsaný v&nbsp;jazyce Lua, předá se název tohoto skriptu
jako první parametr interpretru. V&nbsp;níže uvedeném příkladu představuje
<strong>lua</strong> název Javovské třídy s&nbsp;interpretrem uložené
v&nbsp;archivu <strong>luaj-j2se-0.96.jar</strong>, zatímco
<strong>test.lua</strong> je název spouštěného skriptu. V&nbsp;případě, že
má skript využívat další třídy, musí se nastavit cesta (<i>classpath</i>) i
k&nbsp;těmto třídám, popř.&nbsp;k&nbsp;archivu, ve kterém jsou přeložené třídy
zabaleny:</p>

<pre>
java -cp luaj-j2se-0.96.jar lua test.lua
</pre>



<p><a name="k03"></a></p>
<h2>3. Překlad skriptu do bajtkódu a následná interpretace bajtkódu</h2>

<p>Druhá možnost spuštění Lua skriptů spočívá v&nbsp;jejich překladu do
bajtkódu virtuálního stroje jazyka <i>Lua</i> s&nbsp;následnou interpretací
tohoto bajtkódu. V&nbsp;praxi je tedy možné, aby byla celá aplikace či její
část dodávána ve formě binárních (a běžným způsobem nečitelných) souborů
<i>*.luac</i>, ve kterých je uložen již přeložený bajtkód Lua skriptů (pozor
&ndash; v&nbsp;žádném případě se nejedná o bajtkód interpretovaný pomocí JVM!).
Toto řešení má několik předností a samozřejmě i záporů. Mezi přednosti patří,
že opět není nutné, aby na počítači bylo nainstalováno celé JDK, postačuje
pouze JRE. Taktéž se fáze překladu skriptů provede pouze jedenkrát &ndash;
uživatelé aplikace budou využívat již přeložený bajtkód, což může například
v&nbsp;případě mobilních zařízení představovat jak určitou úsporu potřebné
kapacity operační paměti (aplikace nemusí obsahovat překladač <i>luac</i>, což
znamená úsporu cca 100 kB) i času startu aplikace. Překlad Lua skriptu do
bajtkódu je možné provést buď původním &bdquo;céčkovým&ldquo; překladačem
<i>luac</i> nebo jeho Javovskou verzí:</p>

<pre>
luac -o test1.luac test.lua
java -cp luaj-j2se-0.96.jar luac -o test2.luac test.lua
</pre>

<p>Obsah souborů s&nbsp;bajtkódem sice většinou nemá stejný obsah, o čemž se
můžeme přesvědčit například příkazem <i>diff</i>, ovšem v&nbsp;interpret
<i>LuaJ</i> dokáže (alespoň v&nbsp;současné verzi) zpracovat oba bajtkódy:</p>

<pre>
java -cp luaj-j2se-0.96.jar lua test1.luac
java -cp luaj-j2se-0.96.jar lua test2.luac
</pre>



<p><a name="k04"></a></p>
<h2>4. Načtení a spuštění skriptu z&nbsp;Javovské aplikace</h2>

<p>Výše uvedený způsob kooperace mezi Lua skripty a třídami naprogramovanými
v&nbsp;jazyce Java je vhodné použít v&nbsp;těch případech, kdy Lua skript
představuje řídicí část celé aplikace (&bdquo;lepidlo&ldquo;), které na základě
zapsaného algoritmu postupně vytváří instance Javovských tříd a poté přistupuje
k&nbsp;metodám a atributům těchto tříd. V&nbsp;určitém ohledu se tento přístup
podobá například shellovým skriptům nebo skriptům napsaným v&nbsp;jazyce TCL,
jenž taktéž postupně volají jednoduché externí utility či celé aplikace.
V&nbsp;mnoha případech je však vhodnější zvolit zcela opačný postup, při kterém
se přímo v&nbsp;aplikaci naprogramované v&nbsp;jazyce Java spustí interpret
jazyka Lua. Tento přístup je sice implementačně poněkud složitější, umožňuje
však rozšíření takřka libovolného programu o možnost skriptování, což &ndash;
jak se v&nbsp;historii výpočetní techniky již několikrát ukázalo &ndash; může
představovat významnou konkurenční výhodu aplikace (viz například AutoCAD,
kancelářské balíky či webové prohlížeče s&nbsp;JavaScriptem). Ve skutečnosti
existují dokonce dvě možnosti zabudování interpretru jazyka Lua do aplikací,
které si popíšeme v&nbsp;následujících kapitolách.</p>



<p><a name="k05"></a></p>
<h2>5. První demonstrační příklad &ndash; skript spuštěný z&nbsp;Javovské aplikace</h2>

<p>První ze způsobů spuštění skriptu naprogramovaného v&nbsp;jazyce Lua
z&nbsp;Javovské aplikace je ukázán na jednoduchém příkladu, jehož zdrojový text
je uveden pod tímto odstavcem. Jedná se o Javovskou aplikaci, která po svém
spuštění vytvoří instanci třídy reprezentující stav virtuálního stroje jazyka
Lua a posléze zavolá metodou <strong>vm.call()</strong> s&nbsp;parametry
odpovídajícími volání <i>dofile("fib.lua")</i> z&nbsp;Lua skriptu (této funkci
je předaný jediný parametr a funkce nevrací žádnou hodnotu; proto se také při
volání metody vm.call() předává jednička v&nbsp;prvním argumentu a nula
v&nbsp;argumentu druhém). Globální funkci <i>dofile()</i> již známe
z&nbsp;předchozích částí tohoto seriálu &ndash; načte zdrojový soubor se
skriptem či jeho bajtkód, poté provede překlad zdrojového souboru a následně
spuštění bajtkódu (tj.&nbsp;jeho interpretaci virtuálním strojem). Povšimněte
si taktéž příkazu <strong>org.luaj.compiler.LuaC.install();</strong>. Pomocí
tohoto příkazu se zajistí vytvoření instance překladače jazyka Lua, takže je
možné, aby globální funkce <i>dofile()</i> skutečně dokázala načíst a zpracovat
i skripty ve zdrojovém tvaru, tj.&nbsp;nikoli pouze již předem přeložený
bajtkód.</p>

<pre>
/**
 * Jednoducha Javovska aplikace, ktera po svem spusteni
 * nacte skript ulozeny v souboru "fib.lua" a nasledne
 * ho spusti.
**/

// Preklad tridy:
//     javac -cp luaj-j2se-verze.jar FibTest.java
//
// Spusteni programu se skriptem:
//     java -cp luaj-j2se-verze.jar;. FibTest
//   popr.
//     java -cp luaj-j2se-verze.jar:. FibTest

import org.luaj.platform.*;
import org.luaj.vm.*;

public class FibTest
{
    public static void main(String[] args)
    {
        // jmeno skriptu
        String script = "fib.lua";
        Platform.setInstance( new J2sePlatform() );
        // vytvoreni instance virtualniho stroje
        // jazyka Lua
        LuaState vm = Platform.newLuaState();
        // vytvoreni instance prekladace
        // jazyka Lua
        org.luaj.compiler.LuaC.install();
        // nacteni skriptu
        vm.getglobal( "dofile" );
        vm.pushstring( script );
        // spusteni skriptu - zavolani funkce dofile
        // ktera akceptuje jeden parametr (1) a nevraci
        // zadny vysledek (0)
        vm.call( 1, 0 );
    }
}

// finito
</pre>



<p><a name="k06"></a></p>
<h2>6. Druhý demonstrační příklad &ndash; bajtkód skriptu spuštěný z&nbsp;Javovské aplikace</h2>

<p>Ve druhém demonstračním příkladu si ukážeme, jakým způsobem lze pracovat
s&nbsp;Lua skriptem, který je již před spuštěním aplikace přeložený do bajtkódu
postupem popsaným <a href="#k03">ve třetí kapitole</a>. Tento příklad se
v&nbsp;mnoha ohledech podobá předchozímu demonstračnímu příkladu, ovšem
s&nbsp;tím rozdílem, že se zde neprovádí inicializace překladače jazyka Lua (ve
skutečnosti nemusí být překladač vůbec přístupný, tj.&nbsp;spolu
s&nbsp;aplikací se nemusí dodávat ani příslušné třídy) a navíc se globální
funkci <i>dofile()</i> nepředává název zdrojového kódu skriptu, ale název
souboru, ve kterém je uložený jeho bajtkód. Povšimněte si, že při spuštění této
aplikace je nutné pomocí volby <i>-cp</i> nastavit cestu ke knihovnám
interpretru (ty jsou uloženy, spolu se standardními knihovnami, v&nbsp;archivu
<i>luaj-j2se-verze.jar</i>) i cestu, na které je uložena samotná aplikace.
V&nbsp;tomto jednoduchém případě se jedná o aktuální adresář, proto je ve volbě
<i>-cp</i> použita i tečka oddělená od jména archivu buď středníkem (Windows)
nebo dvojtečkou (unixové systémy):</p>

<pre>
/**
 * Jednoducha Javovska aplikace, ktera po svem spusteni
 * nacte a spusti skript prelozeny do bajtkodu, ktery
 * je ulozen v souboru "fib.luac"
**/

// Preklad tridy:
//     javac -cp luaj-j2se-verze.jar FibTest2.java
//
// Spusteni programu s prelozenym skriptem:
//     java -cp luaj-j2se-verze.jar;. FibTest2
//   popr.
//     java -cp luaj-j2se-verze.jar:. FibTest2

import org.luaj.platform.*;
import org.luaj.vm.*;

public class FibTest2
{
    public static void main(String[] args)
    {
        // jmeno skriptu
        String compiledScript = "fib.luac";
        Platform.setInstance( new J2sePlatform() );
        // vytvoreni instance virtualniho stroje
        // jazyka Lua
        LuaState vm = Platform.newLuaState();
        // nacteni skriptu
        vm.getglobal( "dofile" );
        vm.pushstring( compiledScript );
        // spusteni skriptu - zavolani funkce dofile
        // ktera akceptuje jeden parametr (1) a nevraci
        // zadny vysledek (0)
        vm.call( 1, 0 );
    }
}

// finito
</pre>



<p><a name="k07"></a></p>
<h2>7. JSR-223 a její význam při implementaci skriptovacích jazyků pro Javu</h2>

<p>Ve <a href="#k04">čtvrté kapitole</a> jsme si mj.&nbsp;řekli, že existují
dva způsoby spuštění skriptů napsaných v&nbsp;programovacím jazyce Lua
z&nbsp;Javy. První způsob jsme si ukázali na dvojici demonstračních příkladů,
ve kterých se přímo využívaly třídy dostupné z&nbsp;balíčků
<strong>org.luaj.platform</strong> a <strong>org.luaj.vm</strong>. Existuje
však ještě jeden způsob volání skriptů, jenž má tu výhodu, že je při něm
využito standardního API, které je použitelné kromě samotného jazyka Lua i pro
poměrně velkou skupinu dalších skriptovacích jazyků naprogramovaných
v&nbsp;Javě. Aplikační programové rozhraní, pomocí něhož mezi sebou mohou
komunikovat skripty a Javovské programy, je popsané v&nbsp;<i>JSR-223</i>
neboli <i>Java Specification Request &ndash; Scripting for the
Java<sup>TM</sup> Platform</i>. Existence <i>JSR-223</i> je velmi důležitá,
protože význam dynamicky typovaných skriptovacích jazyků neustále roste,
společně s&nbsp;rostoucí složitostí vytvářených aplikací. V&nbsp;současnosti je
možné přes toto API využít již velkou skupinu programovacích jazyků, především
<i>Python</i> (Jython), <i>Groovy</i>, <i>Ruby</i> (JRuby) či <i>TCL</i> (JACL)
&ndash; viz následující tabulku:</p>

<table>
<tr><th>Jazyk</th><th>Název implementace</th><th>Popis</th></tr>
<tr><td>AWK</td><td>Jawk</td><td>implementace jazyka <i>awk</i>, který se
v&nbsp;unixových systémech používá pro vyhledávání vzorů a zpracování
textů</td></tr>
<tr><td>BeanShell</td><td>BeanShell</td><td>dynamicky typovaný skriptovací
jazyk se syntaxí podobnou samotné <i>Javě</i></td></tr>
<tr><td>Groovy</td><td>Groovy</td><td>taktéž se jedná o dynamicky typovaný
skriptovací jazyk se syntaxí podobnou <i>Javě</i>, ovšem na rozdíl od
BeanShellu je Groovy už dnes mezi vývojáři poměrně populární</td></tr>
<tr><td>Jaskell</td><td>Jaskell</td><td>funkcionální jazyk odvozený od
standardního <i>Haskellu</i>, ovšem s&nbsp;přidanou podporou pro Javovské
třídy</td></tr>
<tr><td>JavaScript</td><td>Rhino</td><td>pravděpodobně nejznámější skriptovací
jazyk s&nbsp;rozhraním dle JSR-223, který je dodáván přímo se sunovskou Javou
SE 6</td></tr>
<tr><td>Jelly</td><td>Jelly</td><td>nástroj pro transformaci XML do
spustitelného kódu, podporuje značky použitelné pro popis základních
programových konstrukcí &ndash; smyčka, rozhodování atd.</td></tr>
<tr><td>JudoScript</td><td>JudoScript</td><td>málo rozšířený skriptovací
jazyk</td></tr>
<tr><td>Pnuts</td><td>Pnuts</td><td>jednoduchý a snadno použitelný skriptovací
jazyk</td></tr>
<tr><td>Python</td><td>Jython</td><td>implementace známého a oblíbeného
programovacího jazyka <i>Python</i> pro platformu <i>Java</i></td></tr>
<tr><td>Ruby</td><td>JRuby</td><td>dnes populární skriptovací jazyk
s&nbsp;podporou OOP</td></tr>
<tr><td>Scheme</td><td>SISC</td><td>programovací jazyk inspirovaný Lispem,
ovšem (na rozdíl od klasického Lispu) se statickým rozsahem proměnných a
poněkud odlišnou sémantikou některých konstrukcí</td></tr>
<tr><td>Sleep</td><td>Sleep</td><td>jazyk inspirovaný Perlem</td></tr>
<tr><td>Tck</td><td>Jacl</td><td>implementace známého skriptovacího jazyka
<i>Tcl</i> (Tool Command Language), který vytvořil známý popularizátor
skriptovacích jazyků John K. Ousterhout (mj.&nbsp;spoluzakladatel společnosti
Scriptics)</td></tr>
</table>

<p>Celé API specifikované v&nbsp;JSR-223 je představováno několika rozhraními a
(abstraktními) třídami z&nbsp;balíčku <strong>javax.script</strong>,
z&nbsp;nichž ty nejdůležitější jsou vypsány v&nbsp;následujících dvou
tabulkách:</p>

<table>
<tr><th>Rozhraní</th></tr>
<tr><td>Bindings           </td></tr>
<tr><td>Compilable         </td></tr>
<tr><td>Invocable          </td></tr>
<tr><td>ScriptContext      </td></tr>
<tr><td>ScriptEngine       </td></tr>
<tr><td>ScriptEngineFactory</td></tr>
</table>

<table>
<tr><th>Třída</th></tr>
<tr><td>AbstractScriptEngine</td></tr>
<tr><td>CompiledScript      </td></tr>
<tr><td>ScriptEngineManager </td></tr>
<tr><td>SimpleBindings      </td></tr>
<tr><td>SimpleScriptContext </td></tr>
<tr><td>ScriptException     </td></tr>
</table>

<p>Základem je třída <strong>ScriptEngineManager</strong>, pomocí níž lze
manipulovat s&nbsp;jednotlivými interpretry, které jsou k&nbsp;dispozici.
Například následujícím velmi jednoduchým kódem je možné zjistit, které
interpretry jsou v&nbsp;dané chvíli k&nbsp;dispozici, verze interpretrů, jejich
aliasy a především instanci třídy implementující rozhraní
<strong>ScriptEngine</strong>, kterou lze použít pro přístup k&nbsp;vybranému
interpretru:</p>

<pre>
ScriptEngineManager mgr = new ScriptEngineManager();
List&lt;ScriptEngineFactory&gt; factories = mgr.getEngineFactories();
</pre>

<p>Mnohem častěji však programátor potřebuje ve svém projektu použít předem
známý interpretr (jehož jméno tudíž má k&nbsp;dispozici a nemusí ho zjišťovat)
a spustit pomocí něho nějaký skript. V&nbsp;následujícím kódu je inicializován
interpretr <i>JavaScriptu</i>, který je, jak jsme si již řekli
v&nbsp;předchozích odstavcích, dodáván spolu se sunovskou Javou 1.6 jako její
standardní součást (jedná se o známou implementaci <i>Mozilla Rhino</i>):</p>

<pre>
ScriptEngineManager mgr = new ScriptEngineManager();
ScriptEngine jsEngine = mgr.getEngineByName("JavaScript");
try
{
    jsEngine.eval("print('Hello, world!')");
}
catch (ScriptException ex)
{
    ex.printStackTrace();
}  
</pre>



<p><a name="k08"></a></p>
<h2>8. Využití tříd implementujících rozhraní ScriptEngine, ScriptEngineFactory
a ScriptEngineManager</h2>

<p>V&nbsp;dnešním posledním úryvku programového kódu je ukázáno, jakým způsobem
je možné zajistit vytvoření instance překladače a interpretru jazyka <i>Lua</i>
pomocí API definovaného v&nbsp;JSR-223. Povšimněte si, že konkrétní interpret
lze vyhledat jak podle svého jména (předchozí kapitola), tak i na základě
koncovky jmen souborů se skripty. Aby bylo možné následující kód spustit bez
vyvolání výjimky, je nutné, aby se při spuštění aplikace specifikovala cesta
k&nbsp;archivu <strong>luaj-j2se-verze.jar</strong>, podobně jako
v&nbsp;případě prvních dvou demonstračních příkladů:</p>

<pre>
ScriptEngineManager sem = new ScriptEngineManager();
ScriptEngine e = sem.getEngineByExtension(".lua");
ScriptEngineFactory f = e.getFactory();
System.out.println( "Engine name: " +f.getEngineName() );
System.out.println( "Engine Version: " +f.getEngineVersion() );
System.out.println( "LanguageName: " +f.getLanguageName() );
System.out.println( "Language Version: " +f.getLanguageVersion() );
String statement = f.getOutputStatement("\"hello, world\"");
System.out.println(statement);
try
{
    e.eval(statement);
    
    e.put("x", 25);
    e.eval("y = math.sqrt(x)");
    System.out.println( "y="+e.get("y") );

    e.put("x", 2);
    e.eval("y = math.sqrt(x)");
    System.out.println( "y="+e.get("y") );
}
catch (ScriptException ex)
{
    ex.printStackTrace();
}
</pre>



<p><a name="k09"></a></p>
<h2>9. Literatura a odkazy na Internetu</h2>

<ol>

<li>
James Roseborough, Ian Farmer: Getting Started with LuaJ:<br />
dokument obsažený přímo v&nbsp;instalaci <i>LuaJ</i>
</li>

<li>
SourceForge Luaj Project Page:<br />
<a href="http://luaj.sourceforge.net/">http://luaj.sourceforge.net/</a>
</li>

<li>
SourceForge Luaj Download Area:<br />
<a href="http://sourceforge.net/project/platformdownload.php?group_id=197627">http://sourceforge.net/project/platformdownload.php?group_id=197627</a>
</li>

<li>
LuaForge Luaj Project Page:<br />
<a href="http://luaforge.net/projects/luaj/">http://luaforge.net/projects/luaj/</a>
</li>

<li>
LuaForge Luaj Project Area:<br />
<a href="http://luaforge.net/frs/?group_id=457">http://luaforge.net/frs/?group_id=457</a>
</li>

<li>
JSR 223: Scripting for the Java<sup>TM</sup> Platform:<br />
<a href="http://www.jcp.org/en/jsr/detail?id=223">http://www.jcp.org/en/jsr/detail?id=223</a>
</li>

<li>
Scripting for the Java Platform:<br />
<a href="http://java.sun.com/developer/technicalArticles/J2SE/Desktop/scripting/">http://java.sun.com/developer/technicalArticles/J2SE/Desktop/scripting/</a>
</li>

<li>
JSR-000223 Scripting for the Java<sup>TM</sup> Platform (Proposed Final Draft):<br />
<a href="http://jcp.org/aboutJava/communityprocess/pfd/jsr223/index.html">http://jcp.org/aboutJava/communityprocess/pfd/jsr223/index.html</a>
</li>

<li>
Scripting for Java (scripting.dev.java.net):<br />
<a href="https://scripting.dev.java.net/">https://scripting.dev.java.net/</a>
</li>

<li>
Rhino: JavaScript for Java:<br />
<a href="http://www.mozilla.org/rhino/">http://www.mozilla.org/rhino/</a>
</li>

<li>
Apache Software Foundation:<br />
<a href="http://www.apache.org">http://www.apache.org</a>
</li>

<li>
LuaForge:<br />
<a href="http://luaforge.net/">http://luaforge.net/</a>
</li>

<li>
LuaForge project tree:<br />
<a href="http://luaforge.net/softwaremap/trove_list.php">http://luaforge.net/softwaremap/trove_list.php</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

