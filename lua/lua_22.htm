<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Metalua - programovatelné rozšíření sémantiky jazyka Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Metalua - programovatelné rozšíření sémantiky jazyka Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Velmi zajímavé a současně i užitečné rozšíření původního, ve své podstatě minimalistického, programovacího jazyka Lua představuje projekt nazvaný Metalua, který umožňuje metaprogramování, tj. řízenou změnu programového kódu generovaného překladačem. S využitím metaprogramování lze například do jazyka Lua přidat další operátory atd.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Metalua &ndash; programovatelné rozšíření sémantiky jazyka Lua</a><br />
<a href="#k02">2. Metaprogramování</a><br />
<a href="#k03">3. Zjednodušená syntaxe při zápisu anonymních funkcí</a><br />
<a href="#k04">4. Funkce zapisované v&nbsp;podobě infixového operátoru</a><br />
<a href="#k05">5. Syntaktické stromy &ndash; AST</a><br />
<a href="#k06">6. Manipulace se syntaktickými stromy</a><br />
<a href="#k07">7. Rozšíření syntaxe a sémantiky jazyka Lua</a><br />
<a href="#k08">9. Odkazy na Internetu</a><br />
</p>



<p><a name="k01"></a></p>
<h2>1. Metalua &ndash; programovatelné rozšíření sémantiky jazyka Lua</h2>

<p>V&nbsp;předchozích dvou částech tohoto seriálu jsme si popsali jednu
z&nbsp;&bdquo;alternativních&ldquo; implementací jazyka <i>Lua</i> &ndash;
jednalo se o projekt <i>LuaJ</i>, který umožňuje vzájemnou interakci mezi
programem napsaným v&nbsp;Javě a Lua skripty. Dnes se budeme zabývat další
implementací tohoto jazyka nazvanou příhodně <i>Metalua</i>, která je oproti
standardnímu interpretru rozšířena (a to dosti podstatným způsobem) o možnost
<i>metaprogramování</i>. V&nbsp;rámci projektu <i>Metalua</i> došlo ke změně
vlastního překladače jazyka (překladač se stará o transformaci zdrojového textu
programu do bajtkódu), který je rozšířen o některé vlastnosti, které můžeme
najít například v&nbsp;Lispovských jazycích &ndash; podporu maker,
metaprogramování a možnost rozšíření syntaxe jazyka o další jazykové
konstrukce, například nové operátory, další typy smyček, řídicí struktury atd.
Tyto vlastnosti jsou do překladače přidány takovým způsobem, že je možné
vlastní překládaný kód modifikovat na základě speciálních konstrukcí
zapisovaných přímo do zdrojového kódu programu. Programový kód, přesněji řečeno
jemu odpovídající AST &ndash; <i>abstract syntax tree</i>, je tedy modifikován
už v&nbsp;době překladu (<i>compile time</i>), nikoli až v&nbsp;době běhu
(<i>runtime</i>).</p>



<p><a name="k02"></a></p>
<h2>2. Metaprogramování</h2>

<p>Metaprogramování není pouze doménou Lispu (Scheme) a jazyka Lua &ndash;
projekty podobné <i>Metalua</i> existují i pro další dynamické programovací
jazyky, například projekt <i>Moose</i> pro <i>Perl</i> či <i>Joose</i> pro
<i>JavaScript</i>. Jedna z&nbsp;forem metaprogramování je založena na
šablonách, které jsou podporovány především v&nbsp;jazyku <i>C++</i> a dále pak
například v&nbsp;programovacích jazycích <i>Curl</i>, <i>D</i>, <i>Eiffel</i>,
<i>Haskell</i> či <i>ML</i>. V&nbsp;Lispovských jazycích (včetně jazyka Scheme)
je manipulace s&nbsp;překládaným (transformovaným) či již interpretovaným kódem
velmi jednoduchá, protože zde existuje přímá a jednoznačná ekvivalence mezi
kódem a daty (vše je chápáno jako seznam, přesněji sekvence provázaných
tečka-dvojic tvořících binární strom, odpovídající výše zmíněnému AST), tudíž
lze s&nbsp;kódem manipulovat stejně jako s&nbsp;jinými daty, dokonce i za
použití stejných &bdquo;seznamových&ldquo; operací. Tuto velmi mocnou techniku
se tvůrci systému <i>Metalua</i> snažili použít i pro jazyk <i>Lua</i>, což se
jim v&nbsp;rámci daných možností podařilo, dokonce poměrně elegantním způsobem
&ndash; přidáním pouhých dvou <i>metaoperátorů</i> do jazyka (a samozřejmě
poměrně velkou úpravou vlastního překladače, tato úprava je však před běžným
programátorem skryta). </p>



<p><a name="k03"></a></p>
<h2>3. Zjednodušená syntaxe při zápisu anonymních funkcí</h2>

<p>Prvním (v&nbsp;tomto případě syntaktickým) rozšířením zavedeným
v&nbsp;projektu <i>Metalua</i> je možnost zjednodušeného zápisu anonymních
funkcí, které se poměrně často používají především v&nbsp;programech zapsaných
funkcionálně (tj.&nbsp;tak, aby funkce neměly vedlejší efekty &ndash; <i>side
effect</i>). Anonymní funkce jsou samozřejmě podporovány i v&nbsp;původní verzi
jazyka <i>Lua</i>, ovšem jejich zápis byl zbytečně zdlouhavý &ndash; anonymní
funkce se používají na jednom jediném místě, proto není vhodné, aby se
v&nbsp;jejich definici vyskytovala dlouhá klíčová slova
<strong>function</strong>, <strong>return</strong> či <strong>end</strong>.
Namísto toho zavádí <i>Metalua</i> alternativní syntaxi založenou na použití
znaku <i>|</i> (roura, pipe), který odděluje parametry funkce od jejího těla.
Například anonymní funkce, jenž sečte své dva parametry a vrátí výsledek tohoto
součtu, by se s&nbsp;použitím standardní syntaxe zapsala následovně:</p>

<pre>
function(x,y) return x+y end
</pre>

<p>V&nbsp;<i>Metalua</i> lze kromě výše uvedeného zápisu použít tento tvar:</p>

<pre>
|x,y| x+y
</pre>

<p>Připomeňme si, že v&nbsp;jazyce <i>Lua</i> je možné funkce přiřazovat do
proměnných, ukládat je do asociativních polí či předávat jako parametry jiným
funkcím. Právě v&nbsp;těchto případech je možné s&nbsp;výhodou použít výše
uvedenou zjednodušenou syntaxi. Dokonce je možné tímto způsobem vytvořit
bezparametrickou anonymní funkci, která například může být použita v&nbsp;čase
návrhu programu na místě, které je posléze nahrazeno složitějším kódem:</p>

<pre>
| | 1234
</pre>



<p><a name="k04"></a></p>
<h2>4. Funkce zapisované v&nbsp;podobě infixového operátoru</h2>

<p>Dalším rozšířením původního jazyka <i>Lua</i>, které je podporováno
v&nbsp;projektu <i>Metalua</i>, je podpora zápisu funkcí v&nbsp;infixové
podobě, tj.&nbsp;jméno funkce v&nbsp;tomto případě leží mezi dvojicí operandů,
které jsou funkci předány jako její parametry. V&nbsp;některých případech,
například při vytváření programů provádějících různé složitější matematické
operace nad různými strukturami (vektory, polynomy, maticemi, kvaterniony
atd.), může být infixový způsob volání funkcí jednodušší na pochopení funkce
algoritmu, než tradiční způsob prefixový. Dokonce ani nutné do jazyka přidávat
podporu pro přetížení operátorů. Funkce akceptující dva parametry může být
stále volána &bdquo;standardním&ldquo; prefixovým způsobem nebo způsobem
infixovým &ndash; v&nbsp;tomto případě se však její název musí zapsat mezi
zpětné apostrofy. Mějme například funkci <strong>plus</strong> vytvořenou
jedním z&nbsp;následujících způsobů (poslední uvedený způsob jsme si ukázali
v&nbsp;předchozí kapitole &ndash; jedná se o vytvoření anonymní funkce
s&nbsp;jejím následným přiřazením do proměnné):</p>

<pre>
function plus(x,y) return x+y end
plus=function(x,y) return x+y end
plus=|x,y| x+y
</pre>

<p>Tuto funkci lze zavolat dvěma způsoby:</p>

<pre>
plus(1,2)
1 `plus` 2
</pre>

<p>Samozřejmě lze vytvořit i složitější funkce, například pro provádění
skalárního součinu dvou vektorů:</p>

<pre>
function cdot(v1, v2) return v1.x * v2.x + v1.y * v2.y end

vektor1={x=10,y=20}
vektor2={x=1,y=2}
print(cdot(vektor1,vektor2))
print(vektor1 `cdot` vekto2)
</pre>



<p><a name="k05"></a></p>
<h2>5. Syntaktické stromy &ndash; AST</h2>

<p>Při použití systému <i>Metalua</i> má programátor přístup i k&nbsp;takzvaným
<i>syntaktickým stromům</i> &ndash; abstract syntax tree, neboli <i>AST</i>.
Jedná se o datovou strukturu, do které se pomocí parseru převádí zdrojový kód
programu před jeho kompilací do bajtkódu. Pro uživatele většiny programovacích
jazyků probíhá tento proces skrytě, ovšem v&nbsp;systému <i>Metalua</i>
existují možnosti řízené modifikace <i>AST</i>, převodu části vybraného
zdrojového kódu do <i>AST</i> atd. Celý proces překladu vypadá následovně:</p>

<pre>
                  ______               ________
+-----------+    /      \    +---+    /        \    +--------+
|SOURCE FILE|--&gt;&lt; Parser &gt;--&gt;|AST|--&gt;&lt; Compiler &gt;--&gt;|BYTECODE|
+-----------+    \______/    +---+    \________/    +--------+
</pre>

<p>V&nbsp;uzlech <i>AST</i> jsou uloženy takzvané tagy, přičemž každý tag je
reprezentován svým názvem (například Table či Call) a podstromem, jehož uzly
jsou přímo atomické hodnoty (čísla, pravdivostní hodnoty, řetězce) nebo další
podstromy. Následují příklady některých uzlů reprezentujících typické části
programu (tagy jsou uvozeny zpětnými apostrofy):</p>

<pre>
Prázdná tabulka vytvořená například pomocí {}:
`Table{ }

Tabulka se třemi prvky {1, 2, "a"}:
`Table{ `Number 1, `Number 2, `String "a" };

Volání funkce se dvěma parametry print(foo, "bar"):
`Call{ `Id "print", `Id "foo", `String "bar" }

Volání funkce s&nbsp;libovolným množstvím parametrů f(x, ...):
`Call{ `Id "f", `Id "x", `Dots }

Jednoduchý aritmetický výraz 1+2*3:
`Op{ 'add', `Number 1, `Op{ 'mul', `Number 2, `Number 3 } }
(v tomto případě je vytvořen podstrom reprezentující druhou část výrazu)

Programová smyčka typu while [foo] do [bar1]; [bar2]; ...:
`While{ [foo], { [bar1], [bar2], ... } }.
</pre>



<p><a name="k06"></a></p>
<h2>6. Manipulace se syntaktickými stromy</h2>

<p>Výše popsaná struktura syntaktických stromů je sice z&nbsp;teoretického
hlediska úplná a přesná, ovšem není příliš čitelná. Z&nbsp;tohoto důvodu by
manipulace se stromem v&nbsp;uvedené podobě byla nepřehledná, čehož si byli
vědomi i autoři systému <i>Metalua</i>. Proto zavedli dvojici symbolů
(metaoperátorů) <strong>+{<strong> a </strong>}</strong>, pomocí nichž je možné
zapisovat části programového kódu (výrazy, příkazy, bloky příkazů)
v&nbsp;jazyku Lua, které se posléze samy převedou na uzly AST. Druhá dvojice
symbolů <strong>-{</strong> a <strong>}</strong> naopak slouží k&nbsp;přímému
vkládání části AST (získaného prakticky libovolným postupem, typicky právě
pomocí symbolů <strong>+{}</strong>) do generovaného výsledného stromu, který
je posléze přeložen do bajtkódu. Naproti tomu metaoperátor <strong>-{}</strong>
může obsahovat kód, který je během překladu vložený do AST a může tak ovlivnit
činnost překladače. V&nbsp;následující kapitole je ukázán způsob rozšíření
jazyka <i>Lua</i> ternární operátor ?:, ve kterém se oba metaoperátory používají:
jeden pro generování nových uzlů do AST ze zdrojového kódu, druhý pro "přenos"
kódu, který představuje všechny tři operandy ternárního operátoru.</p>

<p>Pokud například potřebujeme, aby se na určitém místě vložil do AST podstrom
představující jednoduchý matematický výraz <strong>1+2</strong>, není nutné
psát:</p>

<pre>
`Op{ 'add', `Number 1, 'Number 2}
</pre>

<p>Ale postačuje použít metaoperátor <strong>+{}</strong>:</p>

<pre>
+{expr: 2+2}
</pre>

<p>Popř.&nbsp;dokonce pouze:</p>

<pre>
+{2+2}
</pre>



<p><a name="k07"></a></p>
<h2>7. Rozšíření syntaxe a sémantiky jazyka Lua</h2>

<p>Pro rozšíření syntaxe a současně i sémantiky jazyka <i>Lua</i> se kromě
manipulace s&nbsp;AST, používají i dva užitečné nástroje &ndash;
<strong>gg</strong> (<i>grammar generator</i>) a <strong>mlp</strong>
(<i>Metalua parser</i>). Ve skutečnosti je <strong>mlp</strong> postavený na
<strong>gg</strong>. Tyto nástroje si popíšeme v&nbsp;navazující části tohoto
seriálu, ovšem již dnes si můžeme ukázat způsob rozšíření jazyka <i>Lua</i> o
ternární operátor, který důvěrně znají programátoři v&nbsp;C, C++, Javě či
JavaScriptu. V&nbsp;první části příkladu je nadefinována funkce <i>b()</i>,
která na základě pravdivostní hodnoty parametru <i>x</i> vyhodnotí buď první
část programového kódu přenesenou v&nbsp;parametru <i>suffix</i>, nebo část
druhou. Důležité je, že se vyhodnotí vždy jen jedna část kódu, to znamená, že
případné vedlejší efekty jsou eliminovány (podobným způsobem pracují i
speciální formy v&nbsp;Lispu). Následovně je pomocí nástroje
<strong>mlp</strong> rozšířena syntaxe jazyka tak, aby se ternární operátor
transformoval právě na volání funkce <i>b</i> a to tak, že kód před otazníkem
je přenesen v&nbsp;prvním parametru a kód před čárkou a za čárkou
v&nbsp;parametru druhém (ternární operátor tedy ve skutečnosti používá pro
oddělení druhého a třetího operandu čárku, to je však dáno tím, že dvojtečka
již má v&nbsp;syntaxi jiný význam, který sice lze rozšířit, ale výsledek by byl
poněkud delší).</p>

<pre>
-- přidání ternárního operátoru do sémantiky jazyka
-- (tento operátor je použitý v jazycích odvozených od céčka:
--  C++, Java, JavaScript atd.)
-- Povšimněte si zde použití metaoperátoru +{} a -{}
local function b(x, suffix)
   local v, ontrue, onfalse = mlp.gensym "test", unpack (suffix)
   return `Stat{ 
      +{ block:
         local -{v}
         if -{x} then (-{v}) = -{ontrue} else (-{v}) = -{onfalse or `Nil} end },
      v }
end

-- vlastní rozšíření syntaxe pomocí nástroje mlp - Metalua parser,
-- který si popíšeme v následující části tohoto seriálu
mlp.expr.suffix:add{ "?", mlp.expr, gg.onkeyword{ ",", mlp.expr }, prec=5, builder=b }
</pre>



<p><a name="k08"></a></p>
<h2>8. Odkazy na Internetu</h2>

<ol>

<li>
Lambda the Ultimate: Metalua<br />
<a href="http://lambda-the-ultimate.org/node/2105">http://lambda-the-ultimate.org/node/2105</a>
</li>

<li>
Metalua: Static meta-programming for Lua<br />
<a href="http://metalua.luaforge.net/">http://metalua.luaforge.net/</a>
</li>

<li>
Meta Lua (lua-users wiki)<br />
<a href="http://lua-users.org/wiki/MetaLua">http://lua-users.org/wiki/MetaLua</a>
</li>

<li>
Meta Lua Recipes<br />
<a href="http://lua-users.org/wiki/MetaLuaRecipes">http://lua-users.org/wiki/MetaLuaRecipes</a>
</li>

<li>
The art of metaprogramming, Part 1: Introduction to metaprogramming<br />
<a href="http://www.ibm.com/developerworks/linux/library/l-metaprog1.html">http://www.ibm.com/developerworks/linux/library/l-metaprog1.html</a>
</li>

<li>
Template metaprogramming<br />
<a href="http://en.wikipedia.org/wiki/Template_metaprogramming">http://en.wikipedia.org/wiki/Template_metaprogramming</a>
</li>

<li>
Metaprogramming<br />
<a href="http://en.wikipedia.org/wiki/Metaprogramming">http://en.wikipedia.org/wiki/Metaprogramming</a>
</li>

<li>
Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>
Moose (Perl)<br />
<a href="http://www.iinteractive.com/moose/">http://www.iinteractive.com/moose/</a>
</li>

<li>
Joose (framework)<br />
<a href="http://code.google.com/p/joose-js/">http://code.google.com/p/joose-js/</a>
</li>

<li>
Code Generation vs. Metaprogramming<br />
<a href="http://qcodo.com/documentation/article.php/6">http://qcodo.com/documentation/article.php/6</a>
</li>

<li>
LuaForge:<br />
<a href="http://luaforge.net/">http://luaforge.net/</a>
</li>

<li>
LuaForge project tree:<br />
<a href="http://luaforge.net/softwaremap/trove_list.php">http://luaforge.net/softwaremap/trove_list.php</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

