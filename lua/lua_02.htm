<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Základní konstrukce v programovacím jazyku Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Základní programové konstrukce v programovacím jazyku Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části seriálu o programovacím jazyku Lua se seznámíme se základními programovými konstrukcemi a datovými typy, jež jsou v tomto jazyce podporovány. Ukážeme si především práci s proměnnými, tvorbu bloků, podmíněných příkazů a také programových smyček.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Základní programové konstrukce v programovacím jazyku Lua</a><br />
<a href="#k02">2. Podporované datové typy</a><br />
<a href="#k03">3. Proměnné a přiřazení hodnoty do proměnných</a><br />
<a href="#k04">4. Bloky a jejich význam při ovlivňování viditelnosti proměnných</a><br />
<a href="#k05">5. Podmínky</a><br />
<a href="#k06">6. Programová smyčka typu <i>while</i></a><br />
<a href="#k07">7. Programová smyčka typu <i>repeat&ndash;until</i></a><br />
<a href="#k08">8. Dvojí podoba programové smyčky typu <i>for</i></a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Základní programové konstrukce v programovacím jazyku Lua</h1>

<p>V&nbsp;dnešní části seriálu o programovacím jazyku <i>Lua</i> se podrobněji
seznámíme se základní syntaxí tohoto jazyka a způsobem zápisu programových
konstrukcí, mezi něž se řadí především programové bloky, podmínky a počítané i
nepočítané smyčky. V&nbsp;úvodní části tohoto seriálu jsme si řekli, že tvůrci
programovacího jazyka <i>Lua</i> se při návrhu syntaxe inspirovali především
syntaxí jazyků <i>Modula</i>, <i>Pascal</i> a částečně i <i>Fortran</i>; způsob
zápisu vícenásobného přiřazení je naopak &bdquo;vypůjčen&ldquo; z&nbsp;jiných
vysokoúrovňových skriptovacích jazyků. Avšak vzhledem k&nbsp;tomu, že
<i>Lua</i> je dynamicky typovaný jazyk, tj.&nbsp;datové typy nejsou přiřazené
proměnným, ale jejich hodnotám, tak se i syntaxe (a samozřejmě taktéž
sémantika) od těchto staticky typovaných jazyků v&nbsp;několika směrech poměrně
zásadním způsobem odlišuje &ndash; týká se to zejména způsobu vytváření
lokálních i globálních proměnných a funkcí. Interpretr <i>Lua</i> taktéž dokáže
(opět díky dynamickému typování) automaticky provádět některé základní konverze
mezi datovými typy, což v&nbsp;mnoha případech vede ke značnému zjednodušení a
zpřehlednění vytvářených programů.</p>

<p>Před popisem jednotlivých programových konstrukcí si ještě musíme říci,
jakým způsobem lze dále uváděné demonstrační příklady spouštět. Po instalaci
<i>Lua</i> by se měly vytvořit mj.&nbsp;i soubory <strong>lua</strong>
(překladač i interpret, na MS Windows jde o soubor <strong>lua.exe</strong>),
<strong>luac</strong> (pouze překladač do bajtkódu, na MS Windows se jmenuje
<strong>luac.exe</strong>), <strong>liblua.a</strong> (statická knihovna) a
<strong>liblua_verze.so</strong> (popř.&nbsp;na operačním systému Microsoft
Windows soubor <strong>lua_verze.dll</strong>). Pro pouhé spouštění vlastních
programů (skriptů) je nejjednodušší využít překladač a současně i interpretr
<strong>lua</strong> (jedná se o spustitelný soubor, typicky umístěný
v&nbsp;adresáři <i>/usr/bin</i>). Spuštění vlastního skriptu je snadné:</p>

<code-area>
lua jméno_skriptu_lua
</code-area>

<p>Pokud má skript hromadně (neinteraktivně) zpracovávat textová či binární
data, lze samozřejmě použít všechny běžné prostředky příkazové řádky, jakými
jsou přesměrování standardního vstupu, výstupu i chybového výstupu, roury
atd.</p>



<p><a name="k02"></a></p>
<h1>2. Podporované datové typy</h1>

<p>V&nbsp;programovacím jazyku <i>Lua</i> lze používat osm datových typů
vypsaných v&nbsp;tabulce níže. V&nbsp;úvodním odstavci jsme si řekli, že
<i>Lua</i> patří mezi dynamicky typované jazyky, tj.&nbsp;typy nejsou přiřazené
proměnným, ale jejich hodnotám. To mj.&nbsp;také znamená, že se při vytváření
proměnných neuvádí jejich typ, překladač použitý datový typ rozpozná přímo
z&nbsp;toho, jakým způsobem je hodnota proměnné zapsána (pokud je místo
konstantní hodnoty použit výraz či volání funkce, vyhodnocuje se typ výsledku
výrazu či výsledku volání funkce). Samotný název datového typu (první sloupec
tabulky) tedy není rezervovaným ani klíčovým slovem, naopak některé hodnoty
určitých datových typů (především <strong>nil</strong>, <strong>true</strong>,
<strong>false</strong>) klíčovými hodnotami jsou. Určitou výjimkou je první
datový typ, který je pojmenovaný stejně jako (jediná a v&nbsp;celém programu
jedinečná) hodnota tohoto typu: <strong>nil</strong>. Podrobnosti o tomto
užitečném datovém typu si uvedeme v&nbsp;následující části seriálu.</p>

<table>
<tr><th>Datový typ</th><th>Význam</th></tr>
<tr><td>nil     </td><td>datový typ hodnoty <strong>nil</strong>, která je v&nbsp;celém programu jedinečná; tato hodnota se definitoricky odlišuje od všech ostatních hodnot (nutná podmínka pro správné porovnávání); některými vlastnostmi se podobá céčkovému <i>NULL</i> či Javovskému <i>null</i></td></tr>
<tr><td>boolean </td><td>datový typ pravdivostních hodnot <strong>true</strong> a <strong>false</strong></td></tr>
<tr><td>number  </td><td>reálné číslo podle IEEE 754 s&nbsp;dvojnásobnou přesností (v&nbsp;céčku či Javě se jedná o typ <i>double</i>); při překladu jazyka je však možné tento typ změnit, například na celá čísla</td></tr>
<tr><td>string  </td><td>řetězec</td></tr>
<tr><td>function</td><td>funkce, buď vytvořená přímo ve skriptu či zaregistrovaná céčková funkce; s&nbsp;funkcemi lze manipulovat podobně jako s&nbsp;dalšími datovými typy, včetně jejich přiřazení do proměnných, uvedení funkce jako parametru jiné funkce atd.</td></tr>
<tr><td>userdata</td><td>data vytvořená v&nbsp;hostitelském (céčkovém) programu; v&nbsp;samotném skriptu je jejich použití omezeno (interpretr nemá dostatek informací o struktuře skutečně uložených dat)</td></tr>
<tr><td>thread  </td><td>vlákno použité pro implementaci koprogramů (<i>coroutine</i>)</td></tr>
<tr><td>table   </td><td>asociativní pole &ndash; velmi flexibilní datový typ, na kterém je založena většina funkcionality jazyka <i>Lua</i>, včetně objektového systému (v&nbsp;asociativním poli mohou být umístěny mj.&nbsp;i funkce)</td></tr>
</table>



<p><a name="k03"></a></p>
<h1>3. Proměnné a přiřazení hodnoty do proměnných</h1>

<p>V&nbsp;programovacím jazyku <i>Lua</i> je možné, ostatně jako
v&nbsp;prakticky každém imperativním jazyku, pracovat s&nbsp;proměnnými
(symbolicky pojmenovanými bloky paměti). Proměnné mohou být <i>globální</i>
(platné od místa svého vytvoření v&nbsp;celém skriptu) a <i>lokální</i> (platné
v&nbsp;daném bloku či podbloku) &ndash; viz další kapitola. Proměnná je
v&nbsp;tom nejjednodušším případě vytvořena velmi jednoduše &ndash; přiřazením
hodnoty ke jménu proměnné pomocí jednoduchého či vícenásobného přiřazení, viz
následující příklad (globální funkce <i>print</i> dokáže vytisknout několik
hodnot, mezi něž vkládá tabelační zarážku; pro složitější formátování je
výhodnější použít <i>string.format</i>):</p>

<code-area>
x=10                       <i>-- vytvoreni globalni promenne x s ciselnou hodnotou</i>
print("x=", x)

url="www.root.cz"          <i>-- vytvoreni globalni promenne s retezcovou hodnotou</i>
print("url=", url)

a=nil                      <i>-- vytvoreni globalni promenne s hodnotou nil</i>
print("a=", a)

b=true                     <i>-- vytvoreni globalni promenne s logickou hodnotou</i>
print("b=", b)

c=false                    <i>-- vytvoreni globalni promenne s logickou hodnotou</i>
print("c=", c)
</code-area>

<p>Skript po svém spuštění vypíše následující text:</p>

<code-area>
x=	10
url=	www.root.cz
a=	nil
b=	true
c=	false
</code-area>

<p>Jména proměnných (a také funkcí) mohou obsahovat znaky malé i velké abecedy,
podtržítko a číslice, ovšem prvním znakem nesmí být číslice, podobně jako
v&nbsp;mnoha dalších programovacích jazycích. To, které znaky náleží do
abecedy, závisí na nastavené lokalizaci, ovšem kvůli snadnému přenosu
zdrojových kódů je vhodnější se omezit pouze na abecedu anglickou. <i>Lua</i>
patří mezi jazyky, ve kterých se ve jménech proměnných berou v&nbsp;úvahu i
velikosti jednotlivých znaků (minusky vs verzálky), tj.&nbsp;například
<i>pokus</i>, <i>Pokus</i> a <i>POKUS</i> mohou být jména tří odlišných
proměnných. Jméno proměnné či funkce se taktéž nesmí shodovat s&nbsp;žádným
klíčovým slovem jazyka <i>Lua</i> &ndash; viz následující tabulka se seznamem
všech abecedně seřazených klíčových (rezervovaných) slov (vzhledem k&nbsp;výše
zmíněnému rozlišování velkých a malých písmen je však možné si například
vytvořit proměnnou nazvanou <i>Break</i> či <i>NIL</i>, i když to bude pro
čtenáře vašeho kódu minimálně matoucí):</p>

<table>
<tr><th></th><th>Klíčová slova jazyka Lua</th></tr>
<tr><td>1</td><td><strong>and</strong></td></tr>
<tr><td>2</td><td><strong>break</strong></td></tr>
<tr><td>3</td><td><strong>do</strong></td></tr>
<tr><td>4</td><td><strong>else</strong></td></tr>
<tr><td>5</td><td><strong>elseif</strong></td></tr>
<tr><td>6</td><td><strong>end</strong></td></tr>
<tr><td>7</td><td><strong>false</strong></td></tr>
<tr><td>8</td><td><strong>for</strong></td></tr>
<tr><td>9</td><td><strong>function</strong></td></tr>
<tr><td>10</td><td><strong>if</strong></td></tr>
<tr><td>11</td><td><strong>in</strong></td></tr>
<tr><td>12</td><td><strong>local</strong></td></tr>
<tr><td>13</td><td><strong>nil</strong></td></tr>
<tr><td>14</td><td><strong>not</strong></td></tr>
<tr><td>15</td><td><strong>or</strong></td></tr>
<tr><td>16</td><td><strong>repeat</strong></td></tr>
<tr><td>17</td><td><strong>return</strong></td></tr>
<tr><td>18</td><td><strong>then</strong></td></tr>
<tr><td>19</td><td><strong>true</strong></td></tr>
<tr><td>20</td><td><strong>until</strong></td></tr>
<tr><td>21</td><td><strong>while</strong></td></tr>
</table>

<p>Při spuštění interpretru je vytvořeno několik globálních objektů
(proměnných, konstant a funkcí), které může skript při svém běhu využít.
V&nbsp;případě, že se vytvoří globální proměnná se stejným jménem, jaký má
takový objekt, nebude již možné tento objekt v&nbsp;další části skriptu použít.
V&nbsp;demonstračním příkladu vypsaném níže je ukázáno, jak je možné
znepřístupnit funkci <i>print</i>:</p>

<code-area>
funkce=print               <i>-- promennym lze priradit i funkci</i>
print("funkce=", funkce)

print=1                    <i>-- pozor! prepis globalniho objektu (zde funkce)</i>
                           <i>-- legalni, nicmene zpusobi problemy dale</i>
print("dofile=", print)    <i>-- nyni jiz funkce print neni dostupna</i>
</code-area>

<p>Výstup skriptu (chybová hláška je přesměrována na chybový výstup):</p>

<code-area>
funkce=	function: 003D49F0
lua: 1promenne.lua:29: attempt to call global 'print' (a number value)
stack traceback:
	1promenne.lua:29: in main chunk
	[C]: ?
</code-area>

<p>Z&nbsp;výše uvedeného důvodu je vhodné, abyste se při pojmenování vlastních
objektů (proměnných, konstant či funkcí) raději vyhnuli následujícím
identifikátorům, jejichž přesný význam si ještě v&nbsp;tomto seriálu
popíšeme:</p>

<table>
<tr><th></th><th>Globální objekty</th></tr>
<tr><td>1</td><td><i>_G</i></td></tr>
<tr><td>2</td><td><i>_VERSION</i></td></tr>
<tr><td>3</td><td><i>assert</i></td></tr>
<tr><td>4</td><td><i>collectgarbage</i></td></tr>
<tr><td>5</td><td><i>dofile</i></td></tr>
<tr><td>6</td><td><i>error</i></td></tr>
<tr><td>7</td><td><i>getfenv</i></td></tr>
<tr><td>8</td><td><i>getmetatable</i></td></tr>
<tr><td>9</td><td><i>ipairs</i></td></tr>
<tr><td>10</td><td><i>load</i></td></tr>
<tr><td>11</td><td><i>loadfile</i></td></tr>
<tr><td>12</td><td><i>loadstring</i></td></tr>
<tr><td>13</td><td><i>module</i></td></tr>
<tr><td>14</td><td><i>next</i></td></tr>
<tr><td>15</td><td><i>pairs</i></td></tr>
<tr><td>16</td><td><i>pcall</i></td></tr>
<tr><td>17</td><td><i>print</i></td></tr>
<tr><td>18</td><td><i>rawequal</i></td></tr>
<tr><td>19</td><td><i>rawget</i></td></tr>
<tr><td>20</td><td><i>rawset</i></td></tr>
<tr><td>21</td><td><i>require</i></td></tr>
<tr><td>22</td><td><i>select</i></td></tr>
<tr><td>23</td><td><i>setfenv</i></td></tr>
<tr><td>24</td><td><i>setmetatable</i></td></tr>
<tr><td>25</td><td><i>tonumber</i></td></tr>
<tr><td>26</td><td><i>tostring</i></td></tr>
<tr><td>27</td><td><i>type</i></td></tr>
<tr><td>28</td><td><i>unpack</i></td></tr>
<tr><td>29</td><td><i>xpcall</i></td></tr>
</table>

<p>Při přiřazení hodnot do proměnných lze použít takzvané <i>vícenásobné
přiřazení</i>. Jedná se ve své podstatě jen o syntaktický cukr, který však může
vést ke zjednodušení zápisu programu a dokonce i k&nbsp;ušetření paměťového
místa v&nbsp;případech, kdy by bylo při absenci vícenásobného přiřazení nutné
použít pomocnou proměnnou. Následuje ukázka, jakým způsobem se vícenásobné
přiřazení zapisuje, včetně jeho typického použití při prohození obsahu dvou
proměnných:</p>

<code-area>
i,j=10,20                  -- <i>vicenasobne prirazeni</i>
print("i=", i)
print("j=", j)

i,j=j,i                    -- <i>prohozeni obsahu dvou promennych</i>
print("i=", i)
print("j=", j)
</code-area>

<p>Výstup skriptu po jeho spuštění:</p>

<code-area>
i=	10
j=	20
i=	20
j=	10
</code-area>



<p><a name="k04"></a></p>
<h1>4. Bloky a jejich význam při ovlivňování viditelnosti proměnných</h1>

<p>Programovací jazyk <i>Lua</i> má zaveden koncept takzvaných
&bdquo;bloků&ldquo;. Jedná se o části kódu zapsané mezi klíčová slova
<strong>do</strong> a <strong>end</strong> (naproti tomu jazyky odvozené od
Céčka používají k&nbsp;prakticky stejnému účelu znaky <strong>{</strong> a
<strong>}</strong>). Význam bloků spočívá v&nbsp;tom, že se pomocí nich dají
omezit viditelnosti proměnných &ndash; každá lokální proměnná vytvořená
v&nbsp;bloku je viditelná pouze v&nbsp;tomto bloku nebo v&nbsp;blocích
vložených. Bloky se v&nbsp;některých případech používají také tehdy, když je
nutné doprostřed části kódu vložit příkazy <strong>return</strong> nebo
<strong>break</strong>. Ve specifikaci jazyka je totiž předepsáno, že se tyto
příkazy vždy musí vyskytovat na konci bloku. Pokud však vytvoříme vnitřní blok
s&nbsp;jediným příkazem, například <strong>do return end</strong> či <strong>do
break end</strong>, je tato podmínka splněna (popravdě řečeno se s&nbsp;tímto
idiomem příliš často nesetkáme). V&nbsp;blocích je možné vytvářet <i>lokální
proměnné</i>, které mohou překrýt viditelnost proměnných z&nbsp;nadřazených
bloků. Následuje demonstrační příklad ukazující překrytí viditelnost globální
proměnné a proměnné vytvořené v&nbsp;nadřazeném bloku:</p>

<code-area>
x=10                              <i>-- vytvoreni globalni promenne x</i>
print("globalni x=", x)

<strong>do</strong>                                <i>-- zacatek bloku</i>
    <strong>local</strong> x=20                    <i>-- vytvoreni lokalni promenne x</i>
    print("1. lokalni x=", x)
    <strong>do</strong>                            <i>-- zacatek zanoreneho bloku</i>

        <strong>local</strong> x=30                <i>-- vytvoreni lokalni promenne x</i>
        print("2. lokalni x=", x)
    <strong>end</strong>                           <i>-- konec zanoreneho bloku</i>
    print("1. lokalni x=", x)
<strong>end</strong>                               <i>-- konec bloku</i>

print("globalni x=", x)
</code-area>

<p>Skript po svém spuštění vytiskne následující text, z&nbsp;něhož je patrné,
že uvnitř bloků se používá odlišná lokální proměnná, než v&nbsp;bloku
nadřazeném:</p>

<code-area>
globalni x=     10
1. lokalni x=   20
2. lokalni x=   30
1. lokalni x=   20
globalni x=     10
</code-area>



<p><a name="k05"></a></p>
<h1>5. Podmínky</h1>

<p>Jazyk <i>Lua</i> obsahuje úplnou programovou konstrukci typu
<i>if-then-else</i>, pomocí níž je možné blok příkazů provést pouze při splnění
nějaké podmínky (výrazu, který se vyhodnotí na pravdivostní hodnotu
<strong>true</strong> či <strong>false</strong>). Tuto programovou konstrukci
je možné podle potřeb zapsat různým způsobem. V&nbsp;nejjednodušším případě se
používá forma obsahující pouze jeden programový blok (takzvanou
<i>větev</i>):</p>

<code-area>
<strong>if</strong> výraz <strong>then</strong>
    programový blok vykonaný při splnění podmínky
<strong>end</strong>
</code-area>

<p>Jak jsme se již zmínili v&nbsp;předchozím odstavci, je podporována i úplná
konstrukce <i>if-then-else</i> s&nbsp;oběma větvemi. Příkazy v&nbsp;první větvi
jsou vykonány při splnění podmínky, příkazy ve větvi druhé naopak při jejím
nesplnění:</p>

<code-area>
<strong>if</strong> výraz <strong>then</strong>
    programový blok vykonaný při splnění podmínky
<strong>else</strong>
    programový blok vykonaný při nesplnění podmínky
<strong>end</strong>
</code-area>

<p>Navíc je možné (jako náhradu za chybějící konstrukci <i>switch</i>) použít
více větví, přičemž u každé větve je uvedena vlastní podmínka:</p>

<strong>if</strong> výraz <strong>then</strong>
    programový blok vykonaný při splnění první podmínky
<strong>elseif</strong> výraz <strong>then</strong>
    programový blok vykonaný při splnění druhé podmínky
<strong>elseif</strong> výraz <strong>then</strong>
    programový blok vykonaný při splnění třetí podmínky
<strong>else</strong>
    programový blok vykonaný při nesplnění podmínky
<strong>end</strong>

<p>Chybějící konstrukce <i>switch</i> se v&nbsp;mnoha případech nahrazuje také
pomocí asociativních polí, což je technika, kterou si ukážeme v&nbsp;některém
z&nbsp;dalších pokračování tohoto seriálu (ostatně právě absence
implementace asociativních polí a funkcí jakožto plnohodnotných datových typů
v&nbsp;mnoha jiných jazycích programátory nutí <i>switch</i> používat, i když
mnohdy velmi neefektivně).</p>

<p>V&nbsp;podmíněném bloku se samozřejmě může nacházet i další podmínka.
Důležité v&nbsp;tomto případě je, jakým způsobem překladač určí, kterému bloku
náleží příslušné větve <strong>elseif</strong> a <strong>else</strong>. Na
rozdíl od <i>Pascalu</i>, ve kterém byla zavedena &ndash; pro začátečníky
poněkud matoucí &ndash; pravidla, je v&nbsp;<i>Lua</i> vše jednoduché: každý
blok (a celý podmíněný příkaz i se všemi větvemi blokem je) musí být ukončen
klíčovým slovem <strong>end</strong>, podle čehož se také určuje, kterému
podmíněnému příkazu větve <strong>elseif</strong> a <strong>else</strong>
náleží. Následuje ukázka získaná z&nbsp;reálného skriptu, jednotlivé podmíněné
příkazy jsou zvýrazněny odsazením (které sice není součástí syntaxe jako
v&nbsp;<i>Pythonu</i>, ale je samozřejmě vhodné ho kvůli zvýšení čitelnosti
používat):</p>

<code-area>
<strong>if</strong> event=="call" <strong>then</strong>
    level=level+1
<strong>els</strong>e
    level=level-1
    <strong>if</strong> level&lt;0 <strong>then</strong>
        level=0
    <strong>en</strong>d
<strong>en</strong>d
<strong>if</strong> t.what=="main" <strong>then</strong>
    <strong>if</strong> event=="call" <strong>then</strong>
        io.write("begin ", t.short_src)
    <strong>els</strong>e
        io.write("end ", t.short_src)
    <strong>en</strong>d
<strong>elseif</strong> t.what=="Lua" <strong>then</strong>
    io.write(event, " ", t.name or "(Lua)"," &lt;",t.linedefined,":",t.short_src,"&gt;")
<strong>els</strong>e
    io.write(event, " ", t.name or "(C)"," [",t.what,"] ")
<strong>en</strong>d
</code-area>



<p><a name="k06"></a></p>
<h1>6. Programová smyčka typu <i>while</i></h1>

<p>Části kódu, které se mají při běhu programu opakovat, je možné zapsat buď
pomocí rekurze (tu si ukážeme při popisu funkcí), nebo pomocí programových
smyček (<i>loop</i>). Základním typem smyčky je smyčka s&nbsp;podmínkou na
začátku typu <i>while</i>, jejíž způsob zápisu v&nbsp;jazyce <i>Lua</i> je
následující:</p>

<code-area>
<strong>while</strong> podmínka <strong>do</strong>
    programový blok vykonaný při splnění první podmínky
<strong>end</strong>
</code-area>

<p>Smyčka je vykonávána tak dlouho, dokud je podmínka vyhodnocena jako pravdivá
(má pravdivostní hodnotu <strong>true</strong>). V&nbsp;případě, že je podmínka
již na začátku vyhodnocena jako nepravdivá, neproběhne smyčka ani jednou (na to
je zapotřebí dávat pozor při zápisu algoritmu &ndash; někdy se může zapomenout
na to, že je zapotřebí proměnné vystupující v&nbsp;podmínce vhodně
inicializovat již před vstupem do smyčky). Naopak pokud se podmínka po vstupu
do smyčky nemění, bude se program nacházet v&nbsp;oblíbené nekonečné smyčce
(<i>infinite loop</i>). Následuje příklad použití smyčky typu <i>while</i> při
výpočtu Fibonacciho posloupnosti od jedničky až po mezní hodnotu (zapsanou do
proměnné <i>n</i>). Povšimněte si dvojího použití vícenásobného přiřazení,
které celý program zjednodušuje:</p>

<code-area>
<i>-- vypocet Fibonacciho posloupnosti az do mezni hodnoty</i>
n = 1000
a, b = 1, 1
<strong>while</strong> a &lt;= n <strong>do</strong>
    print(a)
    a, b = b, a+b
<strong>end</strong>
</code-area>

<p>Výstup programu pro zadané <i>n=1000</i>:</p>

<code-area>
1
1
2
3
5
8
13
21
34
55
89
144
233
377
610
987
</code-area>



<p><a name="k07"></a></p>
<h1>7. Programová smyčka typu <i>repeat&ndash;until</i></h1>

<p>Méně často používaným typem smyčky je smyčka typu <i>repeat-until</i>. Opět
se jedná o smyčku s&nbsp;podmínkou, tentokrát je však podmínka zapsána (a při
běhu programu vyhodnocována) až na samotném konci smyčky. To znamená, že tato
smyčka proběhne vždy minimálně jedenkrát, protože teprve až po prvním
proběhnutí smyčky se podmínka může vyhodnotit. Na rozdíl od výše popsané smyčky
typu <i>while</i> je u smyčky <i>repeat-until</i> smysl podmínky otočen &ndash;
další běh smyčky je proveden v&nbsp;případě, že je podmínka vyhodnocena na
pravdivostní hodnotu <strong>false</strong> (v&nbsp;případě nejasnosti můžeme
použít mnemotechnickou pomůcku &ndash; vždy když je podmínka splněna, běh
programu pokračuje od zápisu podmínky směrem &bdquo;dolů&ldquo;, což
v&nbsp;případě smyčky <i>while</i> znamená <strong>do</strong> těla smyčky a u
smyčky <i>repeat-until</i> <strong>za</strong> smyčku). Zajímavé a užitečné je,
že programový blok představovaný tímto typem smyčky, končí až za zápisem
podmínky, což mj.&nbsp;znamená, že v&nbsp;podmínce se mohou vyskytovat lokální
proměnné definované uvnitř těla smyčky &ndash; je to sice poněkud netypická
vlastnost, která však může celý program zjednodušit, neboť se pomocné proměnné
vytváří pouze v&nbsp;bloku, ve kterém jsou skutečně zapotřebí. Výše uvedený
program pro výpočet Fibonacciho posloupnosti lze přepsat pomocí smyčky
<i>repeat-until</i> následovně:</p>

<code-area>
<i>-- vypocet Fibonacciho posloupnosti az do mezni hodnoty</i>
n = 1000
a, b = 1, 1
<strong>repeat</strong>
    print(a)
    a, b = b, a+b
<strong>until</strong> a &lt; n
</code-area>

<p><strong>Pozor:</strong> nejedná se o zcela identické programy, jejich
výsledek se bude pro určité hodnoty <i>n</i> lišit. Zkuste si sami &ndash; bez
pomoci překladače &ndash; zjistit, pro jaké <i>n</i> bude chování obou programů
odlišné.</p>



<p><a name="k08"></a></p>
<h1>8. Dvojí podoba programové smyčky typu <i>for</i></h1>

<p>Posledním typem smyčky, kterou je jazyk <i>Lua</i> v&nbsp;současné verzi
vybaven, je počítaná smyčka typu <i>for</i> a smyčka <i>foreach</i> používající
<i>iterátory</i>. Syntaxe zápisu tohoto typu smyčky je různá podle toho, jakého
výsledku potřebujeme s&nbsp;využitím smyčky dosáhnout. Nejjednodušší formu má
tato smyčka v&nbsp;případě, že potřebujeme do zvolené proměnné postupně
dosazovat celočíselné hodnoty od <i>x1</i> do <i>x2</i> (hodnoty se zvyšují po
jedničce):</p>

<code-area>
<strong>for</strong> prom=x1, x2 <strong>do</strong>
    blok příkazů umístěný v těle smyčky
<strong>end</strong>
</code-area>

<p>V&nbsp;případě, že se má krok, tj.&nbsp;hodnota, o kterou se má řídicí
proměnná smyčky zvýšit či snížit, lišit od jedničky, používá se rozšířená
podoba počítané smyčky <i>for</i>:</p>

<code-area>
<strong>for</strong> prom=x1, x2, krok<strong>do</strong>
    blok příkazů umístěný v těle smyčky
<strong>end</strong>
</code-area>

<p>Počítanou smyčku typu <i>for</i> jsme použili i v&nbsp;první části tohoto
seriálu při vykreslování obrazců pomocí želví grafiky:</p>

<code-area>
<strong>function</strong> star(step1, step2)
    <strong>for</strong> i=0, 35 <strong>do</strong>
        <strong>for</strong> j=0, 6 <strong>do</strong>
            left(2*360/7)
            forward(step1)
        <strong>end</strong>
        left(step2)
    <strong>end</strong>
<strong>end</strong>

clean()
star(300,10)
</code-area>

<p>V&nbsp;<i>Lua</i> existuje i smyčka typu <i>foreach</i>, kterou je možné
použít například při procházení všemi prvky asociativního pole (obecně při
vyhodnocování s&nbsp;využitím iterátoru). Způsob zápisu tohoto typu smyčky,
který si blíže popíšeme až v&nbsp;následující části tohoto seriálu, je
následující:</p>

<code-area>
<strong>for</strong> namelist <strong>in</strong> explist <strong>do</strong>
    blok příkazů umístěný v těle smyčky
<strong>end</strong>
</code-area>

<p>Následuje příklad použití tohoto typu smyčky při výpisu čísla a jména
jednotlivých měsíců v&nbsp;roce (zde se využívá faktu, že asociativní pole lze
inicializovat i bez uvedení klíčů &ndash; v&nbsp;tomto případě jsou použita
přirozená čísla):</p>

<code-area>
months={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"}

<strong>for</strong> poradi,month <strong>in</strong> pairs(months) <strong>do</strong>
    print(poradi, month)
<strong>end</strong>
</code-area>

<p>Výstup programu:</p>

<code-area>
1       Jan
2       Feb
3       Mar
4       Apr
5       May
6       Jun
7       Jul
8       Aug
9       Sep
10      Oct
11      Nov
12      Dec
</code-area>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2007</small></p>
</body>
</html>

