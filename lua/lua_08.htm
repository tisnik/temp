<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Objektově orientované programování v Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Objektově orientované programování v Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V osmé části seriálu o programovacím jazyce Lua si ukážeme složitější příklad, v němž použijeme volání céčkových funkcí ze skriptů psaných v Lua, včetně kontroly počtu a typů parametrů. Dále si vysvětlíme, jakým způsobem lze v jazyku Lua psát aplikace s využitím objektově orientovaného programování.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Demonstrační příklad &ndash; podpora bitmapové grafiky pro Lua skripty</a><br />
<a href="#k02">2. Testovací skripty využívající rozhraní pro bitmapovou grafiku</a><br />
&nbsp;&nbsp;&nbsp;<a href="#k021">2.1 Vykreslení jednoduchého obrazce založeného na aliasu</a><br />
&nbsp;&nbsp;&nbsp;<a href="#k022">2.2 Vykreslení Mandelbrotovy množiny</a><br />
&nbsp;&nbsp;&nbsp;<a href="#k023">2.3 Napodobení demo efektu &bdquo;plasmy&ldquo;</a><br />
&nbsp;&nbsp;&nbsp;<a href="#k024">2.4 RGB spirála</a><br />
&nbsp;&nbsp;&nbsp;<a href="#k025">2.5 Animace &ndash; amplitudová modulace (AM)</a><br />
<a href="#k03">3. Objektově orientované programování v&nbsp;jazyku Lua</a><br />
<a href="#k04">4. Vlastnosti asociativních polí</a><br />
<a href="#k05">5. Vytvoření objektu pomocí uzávěru</a><br />
<a href="#k06">6. Deklarace metod vně konstruktoru</a><br />
<a href="#k07">7. Alternativní způsob zápisu metod</a><br />
<a href="#k08">8. Odkazy na Internetu</a><br />
<a href="#k09">9. Obsah další části seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Demonstrační příklad &ndash; podpora bitmapové grafiky pro Lua skripty</h1>

<p>V&nbsp;předchozí části seriálu o programovacím jazyce <i>Lua</i> jsme si
ukázali, jakým způsobem je možné v&nbsp;aplikaci využívající interpretr
<i>Lua</i> provést registraci céčkové funkce tak, aby ji bylo možné volat
z&nbsp;Lua skriptů. Také jsme si popsali některé funkce aplikačního
programového rozhraní (API) interpretru, jenž slouží k&nbsp;získání parametrů
předávaných z&nbsp;Lua skriptu céčkové funkci, včetně kontroly počtu skutečně
předaných parametrů a jejich typu. Tyto znalosti využijeme v&nbsp;dnešním
demonstračním příkladu, který je poněkud rozsáhlejší, než příklady předchozí.
Jedná se o aplikaci se zabudovaným interpretrem jazyka <i>Lua</i>, který je
rozšířený o několik funkcí sloužících pro tvorbu bitmapových (rastrových)
obrázků ukládaných do souborů typu <i>PPM &ndash; Portable Pixel Map</i>. Tento
příklad je &ndash; po dalším rozšíření, zejména přidání podpory kreslení čar,
výplní a textů &ndash; využitelný pro výuku základů počítačové grafiky (ostatně
právě z&nbsp;tohoto důvodu pro potřeby škol vznikl). V&nbsp;aplikaci jsou
zaregistrovány čtyři céčkové funkce, které je možné z&nbsp;Lua skriptů
volat:</p>

<table>
<tr><th>Název funkce</th><th>Parametry</th><th>Význam</th></tr>
<tr><td>createBitmap</td><td>width, height</td><td>Vytvoření bitmapy se zadanou šířkou a výškou</td></tr>
<tr><td>clearBitmap</td><td>&ndash;</td><td>Vymazání celé bitmapy černou barvou</td></tr>
<tr><td>saveBitmap</td><td>filename</td><td>Uložení bitmapy do externího souboru se specifikovaným jménem</td></tr>
<tr><td>putpixel</td><td>x, y, r, g, b</td><td>Vybarvení pixelu na souřadnicích [x,y] barvou [r,g,b]</td></tr>
</table>

<p>Vzhledem k&nbsp;tomu, že se jedná o aplikaci navrženou pro školní prostředí
s&nbsp;relativně omezenou výkonností počítačů (popis některých počítačových
učeben s&nbsp;darovanými počítači a způsob jejich administrace by vydal na
samostatný článek), je možné pracovat vždy pouze s&nbsp;jednou bitmapou, jejíž
maximální rozměry jsou 1024&times;1024 pixelů, což při formátu uložení 24 bitů
na pixel představuje oblast paměti o velikosti 3 MB. Při volání všech čtyř
zmíněných funkcí se kontroluje jak počet parametrů, tak i jejich typ a rozsah
&ndash; například souřadnice vybarvovaného pixelu musí ležet uvnitř rastrového
obrázku. V&nbsp;případě, že parametry nejsou zadány korektně či dojde
k&nbsp;jinému chybovému stavu (pokus o uložení bitmapy, která ještě nebyla
vytvořena atd.), je na zásobník interpretru jazyka <i>Lua</i> uložena chybová
zpráva, skript je ukončen a následně je vypsán aktuální stav zásobníku, který
obsahuje mj.&nbsp;i chybovou zprávu (může se samozřejmě jednat i o zprávu
vytvořenou vlastním interpretrem, například ve chvíli, kdy skript obsahuje
syntaktickou chybu).</p>

<p><att-url id="736">Zdrojový kód aplikace</att-url> má velikost cca 6&nbsp;kB,
přičemž pro zjednodušení zápisu programu je využíváno několik maker
(<strong>LUA_ERROR</strong>, <strong>NUMBER_OF_PARAMETERS</strong>,
<strong>NUMBERP</strong>, <strong>CHECK_RANGE</strong> a další), takže přidání
a registrace dalších céčkových funkcí pro práci s&nbsp;rastrovou grafikou je
snadné:</p>

<code-area><i>/*</i>
<i> * Čtvrtý demonstrační příklad</i>
<i> *</i>
<i> * Základní podpora pro práci s bitmapovou grafikou v jazyce Lua.</i>
<i> *</i>
<i> * Autor: Pavel Tišnovský, 2009, lze šířit v souladu s GPL</i>
<i> */</i>

<strong>#include</strong> &lt;stdlib.h&gt;
<strong>#include</strong> &lt;stdio.h&gt;
<strong>#include</strong> &lt;mem.h&gt;
<strong>#include</strong> &lt;lauxlib.h&gt;
<strong>#include</strong> &lt;lualib.h&gt;

<i>/* Maximální povolené rozměry bitmapy */</i>
<strong>#define</strong> MAX_BITMAP_WIDTH 1024
<strong>#define</strong> MAX_BITMAP_HEIGHT 1024

<i>/* Povolení kontroly rozsahu barvových komponent pixelu */</i>
/*#define CHECK_COLOR_COMPONENTS*/

<i>/* Makro, které na zásobník uloží zprávu o chybě */</i>
<strong>#define</strong> LUA_ERROR(errorMessage) {lua_pushstring(L, (errorMessage)); lua_error(L);}

<i>/* Makro pro kontrolu počtu parametrů */</i>
<strong>#define</strong> NUMBER_OF_PARAMETERS(cnt) <strong>if</strong> (lua_gettop(L)!=(cnt)) LUA_ERROR("incorrect number of parameters")

<i>/* Makro pro kontrolu, zda je parametr specifikovaný indexem, typu číslo */</i>
<strong>#define</strong> NUMBERP(index) <strong>if</strong> (!lua_isnumber(L, (index))) LUA_ERROR("type mishmash - number expected")

<i>/* Makro pro kontrolu, zda je parametr specifikovaný indexem, typu řetězec */</i>
<strong>#define</strong> STRINGP(index) <strong>if</strong> (!lua_isstring(L, (index))) LUA_ERROR("type mishmash - string expected")

<strong>#define</strong> CHECK_RANGE(x, min, max, errorMessage) <strong>if</strong> ((x)&lt;(min) || (x)&gt;(max)) LUA_ERROR(errorMessage)

<strong>#define</strong> LUA_FUNC <strong>static</strong> <strong>int</strong>
<strong>#define</strong> LUA_OK <strong>return</strong> 0;

<i>/* Struktura popisující bitmapu */</i>
<strong>typedef</strong> <strong>struct</strong>
{
    <strong>unsigned</strong> <strong>int</strong> width;
    <strong>unsigned</strong> <strong>int</strong> height;
    <strong>unsigned</strong> <strong>char</strong> *array;
    <strong>unsigned</strong> long size;
} Bitmap;

Bitmap *bmp = NULL;

<i>/*</i>
<i> * Vytvoření bitmapy s 24bpp (truecolor)</i>
<i> */</i>
Bitmap * bitmapCreate(<strong>unsigned</strong> <strong>int</strong> width, <strong>unsigned</strong> <strong>int</strong> height)
{
    Bitmap *bitmap=(Bitmap*)malloc(sizeof(Bitmap));
    <strong>if</strong> (bitmap == NULL)
    {
        <strong>return</strong> NULL;
    }
    bitmap-&gt;width=width;
    bitmap-&gt;height=height;
    bitmap-&gt;size=3*width*height;
    bitmap-&gt;array=(<strong>unsigned</strong> <strong>char</strong>*)malloc(bitmap-&gt;size*sizeof(<strong>unsigned</strong> <strong>char</strong>));
    <strong>if</strong> (bitmap-&gt;array == NULL)
    {
        free(bitmap);
        <strong>return</strong> NULL;
    }
    <strong>return</strong> bitmap;
}

<i>/*</i>
<i> * Dealokace paměti s bitmapou</i>
<i> */</i>
<strong>void</strong> bitmapDestroy(Bitmap *bitmap)
{
    <strong>if</strong> (!bitmap || !bitmap-&gt;array)
    {
        <strong>return</strong>;
    }
    free(bitmap-&gt;array);
    free(bitmap);
}

<i>/*</i>
<i> * Vymazání obsahu bitmapy</i>
<i> */</i>
<strong>void</strong> bitmapClear(Bitmap *bitmap)
{
    <strong>if</strong> (!bitmap || !bitmap-&gt;array)
    {
        <strong>return</strong>;
    }
    memset(bitmap-&gt;array, 0x00, bitmap-&gt;size);
}

<i>/*</i>
<i> * Vykreslení jednoho pixelu do bitmapy. Pixel je zadaný</i>
<i> * svými souřadnicemi a barvou v barvovém prostoru RGB.</i>
<i> */</i>
<strong>void</strong> bitmapPutPixel(Bitmap *bitmap, <strong>int</strong> x, <strong>int</strong> y, <strong>unsigned</strong> <strong>char</strong> r, <strong>unsigned</strong> <strong>char</strong> g, <strong>unsigned</strong> <strong>char</strong> b)
{
    <strong>unsigned</strong> <strong>char</strong> *p;
    <strong>if</strong> (!bitmap || !bitmap-&gt;array)
    {
        <strong>return</strong>;
    }
    <strong>if</strong> (x&lt;0 || y&lt;0 || x&gt;=bitmap-&gt;width || y&gt;=bitmap-&gt;height)
    {
        <strong>return</strong>;
    }
    p=bitmap-&gt;array+(3*(x+y*bitmap-&gt;width));
    *p++=r;
    *p++=g;
    *p=b;
}

<i>/*</i>
<i> * Uložení bitmapy do souboru typu PPM (Portable PixelMap)</i>
<i> */</i>
<strong>int</strong> bitmapSave(Bitmap *bitmap, const <strong>char</strong> *name)
{
    FILE *fout = fopen(name, "wb");
    <strong>if</strong> (!bitmap || !bitmap-&gt;array)
    {
        <strong>return</strong> 0;
    }
    <strong>if</strong> (fout != NULL)
    {
        <strong>int</strong> result = 1;
<i>        /* Kontrola zápisu hlavičky */</i>
        result &amp;= (fprintf(fout, "P6\n"\
               "# Created by Lua script\n"
               "%d %d\n255\n", bitmap-&gt;width, bitmap-&gt;height) &gt; 0);
<i>        /* Kontrola zápisu vlastní bitmapy */</i>
        result &amp;= (fwrite(bitmap-&gt;array, bitmap-&gt;size, 1, fout) == 1);
<i>        /* Kontrola uzavření souboru */</i>
        result &amp;= (fclose(fout) == 0);
        <strong>return</strong> result;
    }
    <strong>return</strong> 0;
}

<i>/*</i>
<i> * Funkce volaná ze skriptu</i>
<i> */</i>
LUA_FUNC createBitmap(lua_State* L)
{
    <strong>int</strong> width, height;
    <strong>if</strong> (bmp)
    {
        LUA_ERROR("bitmap is already created");
    }

<i>    /* Kontrola počtu parametrů */</i>
    NUMBER_OF_PARAMETERS(2);
<i>    /* Kontrola typu parametrů */</i>
    NUMBERP(1);
    NUMBERP(2);
    width = lua_tointeger(L, 1);
    height = lua_tointeger(L, 2);
<i>    /* Kontrola hodnot parametrů */</i>
    CHECK_RANGE(width, 0, MAX_BITMAP_WIDTH, "bitmap width is out of range");
    CHECK_RANGE(height, 0, MAX_BITMAP_HEIGHT, "bitmap height is out of range");
<i>    /* Vše v pořádku - vytvoříme bitmapu */</i>
    bmp = bitmapCreate(width, height);
    <strong>if</strong> (bmp == NULL)
    {
        LUA_ERROR("bitmapCreate failed");
    }
    LUA_OK
}

<i>/*</i>
<i> * Funkce volaná ze skriptu</i>
<i> */</i>
LUA_FUNC clearBitmap(lua_State* L)
{
<i>    /* Kontrola počtu parametrů */</i>
    NUMBER_OF_PARAMETERS(0);
    <strong>if</strong> (bmp == NULL)
    {
        LUA_ERROR("bitmap does not exist");
    }
    bitmapClear(bmp);
    LUA_OK
}

<i>/*</i>
<i> * Funkce volaná ze skriptu</i>
<i> */</i>
LUA_FUNC saveBitmap(lua_State* L)
{
    <strong>if</strong> (bmp == NULL)
    {
        LUA_ERROR("bitmap does not exist");
    }
<i>    /* Kontrola počtu parametrů */</i>
    NUMBER_OF_PARAMETERS(1);
<i>    /* Kontrola typu parametrů */</i>
    STRINGP(1);
    <strong>if</strong> (!bitmapSave(bmp, lua_tostring(L, 1)))
        LUA_ERROR("save bitmap to file failed");
    LUA_OK
}

<i>/*</i>
<i> * Funkce volaná ze skriptu</i>
<i> */</i>
LUA_FUNC putpixel(lua_State* L)
{
    <strong>int</strong> i, x, y, r, g, b;
    <strong>if</strong> (bmp == NULL)
    {
        LUA_ERROR("bitmap does not exist");
    }
<i>    /* Kontrola počtu parametrů */</i>
    NUMBER_OF_PARAMETERS(5);
<i>    /* Kontrola typu parametrů - 5 číselných hodnot */</i>
    <strong>for</strong> (i=1; i&lt;=5; i++)
    {
        NUMBERP(i);
    }
<i>    /* Kontrola hodnot parametrů */</i>
    x = lua_tointeger(L, 1);
    y = lua_tointeger(L, 2);
    r = lua_tointeger(L, 3);
    g = lua_tointeger(L, 4);
    b = lua_tointeger(L, 5);
    CHECK_RANGE(x, 0, bmp-&gt;width-1, "x coordinate is out of range");
    CHECK_RANGE(y, 0, bmp-&gt;height-1, "y coordinate is out of range");
<strong>#if defined</strong>(CHECK_COLOR_COMPONENTS)
    CHECK_RANGE(r, 0, 255, "red color component outside 0-255");
    CHECK_RANGE(g, 0, 255, "green color component outside 0-255");
    CHECK_RANGE(b, 0, 255, "blue color component outside 0-255");
<strong>#endif</strong>
    bitmapPutPixel(bmp, x, y, (<strong>unsigned</strong> <strong>char</strong>)r, (<strong>unsigned</strong> <strong>char</strong>)g, (<strong>unsigned</strong> <strong>char</strong>)b);
    LUA_OK
}

<i>/*</i>
<i> * Registrace funkcí dostupných pro programy (skripty) napsané v Lua</i>
<i> */</i>
<strong>void</strong> registerLuaFunctions(lua_State* L)
{
    lua_register(L, "createBitmap", createBitmap);
    lua_register(L, "clearBitmap", clearBitmap);
    lua_register(L, "saveBitmap", saveBitmap);
    lua_register(L, "putpixel", putpixel);
}

<i>/*</i>
<i> * Výpis obsahu zásobníku intepreteru</i>
<i> */</i>
<strong>void</strong> printLuaStack(lua_State* L)
{
    <strong>int</strong> i, max;
    max = lua_gettop(L);
    fprintf(stderr, "Stack items:\n");
    <strong>for</strong> (i = 1; i &lt;= max; i++)
    {
        fprintf(stderr, "%d/%d\t%s\n", i, max, lua_tostring(L, i));
    }
}

<i>/*</i>
<i> * Hlavní funkce konzolové aplikace</i>
<i> */</i>
<strong>int</strong> main(<strong>int</strong> argc, <strong>char</strong> **argv)
{
    <strong>int</strong> result;
    lua_State* L = lua_open();
    luaL_openlibs(L);
    registerLuaFunctions(L);
    result = luaL_dofile(L, argv[1]);
<i>    /* Zpracování chyby */</i>
    if (result != 0)
    {
        fprintf(stderr, "Error # %d\n", result);
    }
    printLuaStack(L);
    lua_close(L);
    bitmapDestroy(bmp);
    <strong>return</strong> (result != 0);
}

<i>/*</i>
<i> * finito</i>
<i> */</i>

</code-area>



<p><a name="k02"></a></p>
<h1>2. Testovací skripty využívající rozhraní pro bitmapovou grafiku</h1>

<p>Výše popsaná aplikace sice rozšiřuje interpretr jazyka <i>Lua</i> o pouhé
čtyři funkce, ovšem pro mnoho úloh počítačové grafiky jsou tyto čtyři funkce
dostačující &ndash; ve skutečnosti s&nbsp;nimi lze napsat prakticky jakýkoli
algoritmus jehož výsledkem je rastrový obrázek, včetně 3D grafiky; jediným
problémem je rychlost výpočtu. V&nbsp;této kapitole bude uvedeno několik
jednoduchých a krátkých (velikost menší než 1&nbsp;kB) testovacích skriptů,
jejichž výsledkem je buď statický rastrový obrázek, nebo sekvence obrázků,
kterou lze za pomoci externích nástrojů (<strong>ppmtogif</strong>,
<strong>gifsicle</strong> aj.) spojit do animace.</p>



<p><a name="k021"></a></p>
<h2>2.1 Vykreslení jednoduchého obrazce založeného na aliasu</h2>

<code-area><i>-- Vytvoreni jednoducheho obrazce zalozeneho na aliasu</i>

width=256
height=256

createBitmap(width, height)
clearBitmap()

<strong>for</strong> y=0, height-1 <strong>do</strong>
    <strong>for</strong> x=0, width-1 <strong>do</strong>
        <strong>local</strong> r=x
        <strong>local</strong> g=127+127*math.cos(((x-width/2)^2+(y-64)^2)/10)
        <strong>local</strong> b=y
        putpixel(x, y, r, g, b)
    <strong>end</strong>
<strong>end</strong>

saveBitmap("lua8_1.ppm")

<i>-- finito</i>
</code-area>

<image id="8858" />



<p><a name="k022"></a></p>
<h2>2.2 Vykreslení Mandelbrotovy množiny</h2>

<code-area><i>-- Vykresleni Mandelbrotovy mnoziny</i>

width=320
height=240
maxiter=120

<strong>function</strong> mandelbrot(x, y, maxiter)
    <strong>local</strong> zx, zy, cx, cy=0, 0, x, y
    <strong>local</strong> iter
    <strong>for</strong> iter=0, maxiter <strong>do</strong>
        <strong>local</strong> zx2, zy2 = zx*zx, zy*zy
        <i>-- z=z^2+c</i>
        zx, zy = zx2-zy2+cx, 2*zx*zy+cy
        <i>-- test na bailout</i>
        if zx2+zy2&gt;4 then
            <strong>return</strong> iter
        <strong>end</strong>
    <strong>end</strong>
    <strong>return</strong> 0
<strong>end</strong>

createBitmap(width, height)
clearBitmap()

<strong>for</strong> y=0, height-1 <strong>do</strong>
    <strong>for</strong> x=0, width-1 <strong>do</strong>
        <strong>local</strong> i=mandelbrot(x/(width/4)-2, y/(height/3)-1.5, maxiter)
        putpixel(x, y, 20*i, 40*i, 60*i)
    <strong>end</strong>
<strong>end</strong>

saveBitmap("lua8_2.ppm")

<i>-- finito</i>
</code-area>

<image id="8859" />



<p><a name="k023"></a></p>
<h2>2.3 Napodobení demo efektu &bdquo;plasmy&ldquo;</h2>

<code-area><i>-- Vykresleni plasmy</i>

width=256
height=256

createBitmap(width, height)
clearBitmap()

<strong>function</strong> putpixel2(x, y, c)
    putpixel(x, y, c, c, c)
<strong>end</strong>

<strong>function</strong> plasma(x1, y1, x2, y2, c1, c2, c3, c4)
    <strong>local</strong> xc, yc = (x1+x2)/2, (y1+y2)/2
    <i>-- podminka pro rekurzivni deleni</i>
    <strong>if</strong> x2-x1&lt;1 <strong>then</strong>
        <strong>return</strong>
    <strong>end</strong>
    <i>-- 1---12--2</i>
    <i>-- |   |   |</i>
    <i>-- 13--cc--24</i>
    <i>-- |   |   |</i>
    <i>-- 3---34--4</i>
    <i>-- barvy ve stredech stran ctverce</i>
    <strong>local</strong> c12, c13, c24, c34 = (c1+c2)/2, (c1+c3)/2, (c2+c4)/2, (c3+c4)/2
    <i>-- posun prostredniho bodu</i>
    <strong>local</strong> cc=(c12+c34)/2+math.random(x2-x1)*2-(x2-x1)
    cc=math.min(cc, 255)
    cc=math.max(cc, 0)
    putpixel2(x1, y1, c1)
    putpixel2(xc, y1, c12)
    putpixel2(x1, yc, c13)
    putpixel2(xc, yc, cc)
    <i>-- rekurzivni rozdeleni ctverce</i>
    plasma(x1, y1, xc, yc, c1, c12, c13, cc)
    plasma(xc, y1, x2, yc, c12, c2, cc, c24)
    plasma(x1, yc, xc, y2, c13, cc, c3, c34)
    plasma(xc, yc, x2, y2, cc, c24, c34, c4)
<strong>end</strong>

math.randomseed(42)
plasma(0, 0, width-1, height-1, 127, 0, 127, 240)

saveBitmap("lua8_3.ppm")

<i>-- finito</i>
</code-area>

<image id="8860" />



<p><a name="k024"></a></p>
<h2>2.4 RGB spirála</h2>

<code-area><i>-- Vytvoreni obrazce se spiralou</i>

width=256
height=256

createBitmap(width, height)
clearBitmap()

<strong>for</strong> y=0, 255 <strong>do</strong>
    <strong>for</strong> x=0, 255 <strong>do</strong>
        <strong>local</strong> xc=x-width/2
        <strong>local</strong> yc=y-height/2
        <strong>local</strong> angle=math.atan2(xc, yc)
        <strong>local</strong> magnitude=math.sqrt(xc^2 + yc^2)
        <strong>local</strong> r=127+127*math.cos(20*angle)
        <strong>local</strong> g=127+127*math.cos(10*angle+1/4*magnitude)
        <strong>local</strong> b=127+127*math.cos(00*angle+1/6*magnitude)
        putpixel(x, y, r, g, b)
    <strong>end</strong>
<strong>end</strong>

saveBitmap("lua8_4.ppm")

<i>-- finito</i>
</code-area>

<image id="8861" />



<p><a name="k025"></a></p>
<h2>2.5 Animace &ndash; amplitudová modulace (AM)</h2>

<code-area><i>-- Animace amplitudove modulace pri postupne</i>
<i>-- zmene frekvence druheho signalu</i>

width=400
height=300

createBitmap(width, height)

<i>-- amplituda a frekvence prvniho signalu</i>
a1=70
f1=4

<i>-- amplituda a menici se frekvence druheho signalu</i>
a2=30

<strong>for</strong> f2=10, 50 <strong>do</strong>
    clearBitmap()
    <strong>for</strong> x=0, width-1, 0.1 <strong>do</strong>
        wave1 = a1*math.cos(f1*x/(width/2))
        y=height/3 + wave1
        putpixel(x, y, 255, 0, 0)

        wave2 = a2*math.cos(f2*x/(width/2))
        y=height/3 + wave2
        putpixel(x, y, 0, 0, 255)

        <i>-- vypocet AM</i>
        y=3*height/4 + wave1*wave2/50
        putpixel(x, y, 255, 255, 255)
    <strong>end</strong>

    saveBitmap("lua8_5_"..f2..".ppm")
<strong>end</strong>

<i>-- finito</i>
</code-area>

<image id="8862" />



<p><a name="k03"></a></p>
<h1>3. Objektově orientované programování v&nbsp;jazyku Lua</h1>

<p>V&nbsp;předchozích částech tohoto seriálu jsme si popsali velkou část
důležitých vlastností programovacího jazyka <i>Lua</i>. V&nbsp;dnešní části a
v&nbsp;části navazující si ukážeme, jakým způsobem lze používat
<i>metatabulky</i> a <i>metametody</i> při psaní skriptů využívajících
objektově orientovaný přístup. Již v&nbsp;pátém dílu jsme si řekli, že
<i>Lua</i> sice nenabízí pro deklaraci tříd a objektů vlastní syntaxi, ale to
neznamená, že by objektově orientované programování nebylo možné &ndash;
objekty lze vytvářet buď na základě <i>uzávěrů</i> (closures) při jejichž
použití jsou atributy i metody objektu &bdquo;zabaleny&ldquo; právě
v&nbsp;uzávěru (ostatně stejný princip je využitý i v&nbsp;některých
funkcionálních jazycích), a/nebo lze využít druhého způsobu založeného na
asociativních polích a již zmíněných metatabulkách a metametodách. Tvorba
objektů je pak ze sémantického hlediska podobná technice používané
v&nbsp;<i>JavaScriptu</i>, který byl inspirovaný jazykem <i>Self</i> a
takzvaným <i>prototypováním</i>. Právě těmito technikami se budeme zabývat
v&nbsp;následujících kapitolách.</p>



<p><a name="k04"></a></p>
<h1>4. Vlastnosti asociativních polí</h1>

<p>Mezi podporované datové typy programovacího jazyka <i>Lua</i> patří i
<i>asociativní pole</i>, někdy také nazývané <i>hashmapa (hešmapa)</i> či
<i>hešovací mapa</i>. Jedná se, jak jsme si již řekli ve třetí části seriálu, o
datovou strukturu, v&nbsp;níž jsou uloženy dvojice <i>klíč&ndash;hodnota</i>,
přičemž <i>klíčem</i> může být hodnota libovolného datového typu kromě typu
<strong>nil</strong> a <i>hodnota</i> může být zcela libovolná (může se jednat
i o další asociativní pole, řetězec, funkci atd.). Právě možnost uložení funkce
do asociativního pole je důležitá při konstrukci objektů. V&nbsp;případě, že
klíče jsou představovány posloupností přirozených čísel, jsou asociativní pole
ze sémantického hlediska rovnocenná klasicky chápaným indexovaným polím. Jazyk
<i>Lua</i> dokonce umožňuje, aby se při vytváření (konstrukci) asociativního
pole klíče vynechaly &ndash; v&nbsp;tomto případě překladač automaticky
potřebné klíče (indexy) doplní tak, že první hodnotě přiřadí klíč 1, druhé
hodnotě 2 atd. (dojde tedy k&nbsp;vytvoření pole, jehož indexy jsou přirozená
čísla). Následují ukázky vytvoření (konstrukce) různých asociativních polí:</p>

<code-area><i>-- konstrukce asociativního pole se třemi položkami</i>
poleA={klic1="hodnota1", klic2="hodnota2", klic3="hodnota3"}

<i>-- při vynechání klíčů se automaticky doplní hodnoty 1, 2 a 3</i>
poleB={"hodnota1", "hodnota2", "hodnota3"}

<i>-- promíchání obou předešlých způsobů ("hodnota2" má přiřazený klíč 1 a "hodnota4" klíč 2)</i>
poleC={klic1="hodnota1", "hodnota2", klic2="hodnota3", "hodnota4"}

<i>-- přepis hodnot některých položek ("hodnota1" na "hodnotax") asociativního pole</i>
<i>-- ve chvíli, kdy tyto položky mají stejné klíče (každý klíč musí být jedinečný)</i>
poleD={klic1="hodnota1", "hodnota2", klic2="hodnota3", "hodnota4", klic1="hodnotax"}
</code-area>

<p>Po zkonstruování asociativního pole je možné přistupovat k&nbsp;jeho
jednotlivým prvkům pomocí zápisu, který je prakticky stejný ve většině
současných programovacích jazyků: <i>identifikátor_pole[klíč]</i>. Za
identifikátor (jméno) asociativního pole se do hranatých závorek zapíše klíč,
což může být libovolná hodnota (typicky číslo či řetězec), proměnná či výraz.
V&nbsp;případě, že se v&nbsp;asociativním poli nachází prvek s&nbsp;daným
klíčem, je hodnota tohoto prvku vrácena. Pokud prvek naopak nalezen není, vrátí
se hodnota <strong>nil</strong>. Kromě tohoto způsobu zápisu nabízí <i>Lua</i>
i alternativní způsob (syntaktický cukr, syntactic sugar), který se často
používá v&nbsp;případech, kdy jsou asociativní pole použita ve funkci záznamu
(<i>record, struct</i>) či objektu (zde je možné, jak uvidíme dále, použít i
variantu s&nbsp;dvojtečkou namísto tečky, přičemž překladač automaticky doplní
k&nbsp;deklarované či volané funkci jeden parametr nazvaný
<strong>self</strong>). Tento způsob se zapisuje následovně:
<i>identifikátor_pole.klíč</i>, tj.&nbsp;klíč zde není uveden v&nbsp;hranatých
závorkách, ale za identifikátorem pole, od něhož je oddělen tečkou (pokud se
jedná o řetězec, není uzavřen v&nbsp;uvozovkách). Příklad použití:</p>

<code-area>pole={klic1="hodnota1", "hodnota2", klic2="hodnota3", "hodnota4"}

print(pole["klic1"])
print(pole["klic2"])
print(pole["klic3"]) <i>-- neexistující prvek, vypíše se "nil"</i>
print(pole.klic1)
print(pole.klic2)
print(pole.klic3)    <i>-- neexistující prvek, vypíše se "nil"</i>
</code-area>



<p><a name="k05"></a></p>
<h1>5. Vytvoření objektu pomocí uzávěru</h1>

<p>Objekty s&nbsp;atributy (datovými složkami) i metodami, které s&nbsp;těmito
atributy pracují, je možné poměrně jednoduchým způsobem vytvořit pomocí
uzávěru. Funkce, která uzávěr vytváří, se v&nbsp;tomto případě chová jako
<i>konstruktor</i>, který objekt explicitně vytvoří (jedná se o lokální
proměnnou funkce) a následně vrátí volajícímu programu. Nejjednodušším
způsobem, jakým je možné objekt reprezentovat, je asociativní pole popsané
v&nbsp;předchozí kapitole. Do tohoto pole se uloží jak všechny atributy
objektu, tak i funkce (vystupující v&nbsp;roli metod). Tento &ndash; řekněme
funkcionální &ndash; přístup je ukázán na následujícím demonstračním příkladu,
ve kterém je pomocí funkce/konstruktoru <strong>Complex</strong> vytvořen
objekt reprezentující komplexní číslo. Tato funkce vrací lokální asociativní
pole nazvané příhodně <strong>self</strong>, ve kterém jsou vytvořeny atributy
<strong>real</strong> a <strong>imag</strong> i funkce/metody
<strong>print</strong> a <strong>add</strong>. Každé volání funkce
<strong>Complex</strong> vrací nové asociativní pole, tj.&nbsp;nový objekt, což
je chování, které od konstruktoru většinou požadujeme (pokud bychom naopak
potřebovali vytvořit <i>jedináčka</i>, postačuje odstranit klíčové slovo
<strong>local</strong>). Povšimněte si, že v&nbsp;tomto případě nedošlo ke
skrytí atributů před okolním programem (privátní atributy
resp.&nbsp;metody):</p>

<code-area><i>-- Vytvoreni objektu pomoci uzaveru</i>

<i>-- Konstruktor objektu</i>
<strong>function</strong> Complex(paramReal, paramImag)
    <i>-- asociativni pole, ve kterem jsou ulozeny</i>
    <i>-- jak atributy objektu, tak i jeho metody</i>
    <strong>local</strong> self={}

    <i>-- vytvoreni a inicializace atributu</i>
    self.real = paramReal
    self.imag = paramImag

    <i>-- vytvoreni metody print</i>
    self.print = <strong>function</strong>()
        print(self.real.."+i"..self.imag)
    <strong>end</strong>

    <i>-- vytvoreni metody add</i>
    self.add = <strong>function</strong>(paramReal, paramImag)
        self.real = self.real + paramReal
        self.imag = self.imag + paramImag
    <strong>end</strong>

    <i>-- navratovou hodnotou konstruktoru je uzaver</i>
    <strong>return</strong> self
<strong>end</strong>

<i>-- vytvoreni dvojice objektu</i>
c1 = Complex(1, 2)
c2 = Complex(3, 4)

<i>-- tisk hodnot obou objektu</i>
c1.print()
c2.print()

<i>-- zmena atributu prvniho objektu</i>
c1.add(10, 20)

<i>-- tisk hodnot obou objektu</i>
c1.print()
c2.print()

<i>-- finito</i>
</code-area>



<p><a name="k06"></a></p>
<h1>6. Deklarace metod vně konstruktoru</h1>

<p>V&nbsp;předchozím programu byl celý objekt (= uzávěr) zkonstruován přímo ve
funkci <strong>Complex</strong>. V&nbsp;některých případech, zejména při
vytváření objektů s&nbsp;větším množstvím metod, nemusí být tento způsob příliš
přehledný. Je však možné použít i jiný způsob, při němž jsou použity externí
funkce (uložené v&nbsp;asociativním poli nazvaném <strong>Complex</strong>),
které jako svůj první parametr akceptují asociativní pole s&nbsp;atributy,
s&nbsp;nimiž má funkce pracovat. Pole s&nbsp;atributy je vytvořeno
funkcí/konstruktorem <strong>Complex.new</strong>. Jednou z&nbsp;nevýhod tohoto
přístupu je nutnost explicitního uvádění parametru <strong>self</strong> při
vytváření funkcí/metod (v&nbsp;následující kapitole si ukážeme, jak je možné
&ndash; opět pomocí syntaktického cukru, nikoli nové jazykové konstrukce
&ndash; zařídit implicitní předávání tohoto parametru. Taktéž způsob volání
jednotlivých metod je poněkud neobvyklý, protože se používá zápis
<strong>Complex.print(objekt)</strong> namísto obvyklejšího a kratšího
<strong>objekt.print()</strong>. I tento zápis lze samozřejmě v&nbsp;jazyku
<i>Lua</i> použít, je ovšem nutné manipulovat s&nbsp;metatabulkou objektu, což
je technika, kterou si vysvětlíme příště.</p>

<code-area><i>-- Deklarace metod vne konstruktoru</i>

<i>-- Asociativni pole obsahujici metody</i>
Complex={}

<i>-- Konstruktor (ve skutecnosti jen vhodne</i>
<i>-- pojmenovana funkce)</i>
<strong>function</strong> Complex.new(paramReal, paramImag)
    <strong>local</strong> self={}
    self.real = paramReal
    self.imag = paramImag
    <strong>return</strong> self
<strong>end</strong>

<i>-- Metoda print s explicitnim predanim parametru self</i>
<strong>function</strong> Complex.print(self)
    print(self.real.."+i"..self.imag)
<strong>end</strong>

<i>-- Metoda add s explicitnim predanim parametru self</i>
<strong>function</strong> Complex.add(self, paramReal, paramImag)
    self.real = self.real + paramReal
    self.imag = self.imag + paramImag
<strong>end</strong>

<i>-- vytvoreni dvojice objektu</i>
c = Complex.new(1, 2)
c2 = Complex.new(3, 4)

<i>-- tisk hodnot obou objektu</i>
Complex.print(c)
Complex.print(c2)

<i>-- zmena atributu prvniho objektu</i>
Complex.add(c, 10, 20)

<i>-- tisk hodnot obou objektu</i>
Complex.print(c)
Complex.print(c2)

<i>-- finito</i>
</code-area>



<p><a name="k07"></a></p>
<h1>7. Alternativní způsob zápisu metod</h1>

<p>V&nbsp;následujícím příkladu je ukázáno, jakým způsobem je možné deklarovat
metody, do nichž se parametr nazvaný <strong>self</strong> předává implicitně,
tj.&nbsp;není v&nbsp;hlavičce metody použitý. V&nbsp;případě, že se místo
zápisu <strong>function A.b</strong> použije zápis <strong>function
A:b</strong>, tj.&nbsp;tečka se přepíše na dvojtečku, doplní překladač
automaticky <strong>self</strong> jako první parametr funkce, tj.&nbsp;tento
parametr sice není v&nbsp;hlavičce funkce uveden, ale lze s&nbsp;ním uvnitř
funkce normálně pracovat. Jedná se o pouhý syntaktický cukr, který nijak
chování funkce nemění &ndash; už jsme si ostatně uvedli, že i vlastní zápis
<strong>A.b</strong> je taktéž syntaktickým cukrem ekvivalentním
k&nbsp;<strong>A["b"]</strong>. Při samotném volání funkcí/metod je však stále
nutné použít zápisu <strong>Complex.print(objekt)</strong>, protože prozatím
neumíme manipulovat s&nbsp;metatabulkami a metametodami. Až si
v&nbsp;následující části seriálu ukážeme i tuto techniku, uvidíme, že i samotné
volání metod objektu je možné zjednodušit a zpřehlednit, nehledě na to, že nám
tím otevírá cesta k&nbsp;tvorbě hierarchie objektů
(tj.&nbsp;k&nbsp;dědičnosti).</p>

<code-area><i>-- Alternativni zpusob deklarace a volani metod</i>

<i>-- Asociativni pole obsahujici metody</i>
Complex={}

<i>-- Konstruktor (ve skutecnosti jen vhodne</i>
<i>-- pojmenovana funkce)</i>
<strong>function</strong> Complex.new(paramReal, paramImag)
    <strong>local</strong> self={}
    self.real = paramReal
    self.imag = paramImag
    <strong>return</strong> self
<strong>end</strong>

<i>-- Metoda print s implicitnim predanim parametru self</i>
<strong>function</strong> Complex:print()
    print(self.real.."+i"..self.imag)
<strong>end</strong>

<i>-- Metoda add s implicitnim predanim parametru self</i>
<strong>function</strong> Complex:add(paramReal, paramImag)
    self.real = self.real + paramReal
    self.imag = self.imag + paramImag
<strong>end</strong>

<i>-- vytvoreni dvojice objektu</i>
c = Complex.new(1, 2)
c2 = Complex.new(3, 4)

<i>-- tisk hodnot obou objektu</i>
Complex.print(c)
Complex.print(c2)

<i>-- zmena atributu prvniho objektu</i>
Complex.add(c, 10, 20)

<i>-- tisk hodnot obou objektu</i>
Complex.print(c)
Complex.print(c2)

<i>-- finito</i>
</code-area>



<p><a name="k08"></a></p>
<h1>8. Odkazy na Internetu</h1>

<ol>

<li>EN Wikipedia: Prototype Based Programming,<br />
<a href="http://en.wikipedia.org/wiki/Prototype_based_programming">http://en.wikipedia.org/wiki/Prototype_based_programming</a>
</li>

<li>Programming in Lua (first edition)<br />
<a href="http://www.lua.org/pil/index.html">http://www.lua.org/pil/index.html</a>
</li>

<li>Lua home page<br />
<a href="http://www.lua.org/ ">http://www.lua.org/ </a>
</li>

<li>Lua: vestavitelný minimalista<br />
<a href="http://www.root.cz/clanky/lua-vestavitelny-minimalista/">http://www.root.cz/clanky/lua-vestavitelny-minimalista/</a>
</li>

<li>Lua<br />
<a href="http://www.linuxexpres.cz/praxe/lua">http://www.linuxexpres.cz/praxe/lua</a>
</li>

<li>CZ Wikipedia: Lua<br />
<a href="http://cs.wikipedia.org/wiki/Lua">http://cs.wikipedia.org/wiki/Lua</a>
</li>

<li>EN Wikipedia: Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>The Lua Programming Language<br />
<a href="http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html">http://www.tiobe.com/index.php/paperinfo/tpci/Lua.html</a>
</li>

<li>Lua Programming Gems<br />
<a href="http://www.lua.org/gems/">http://www.lua.org/gems/</a>
</li>

<li>LuaForge<br />
<a href="http://luaforge.net/">http://luaforge.net/</a>
</li>

<li>Forge project tree<br />
<a href="http://luaforge.net/softwaremap/trove_list.php">http://luaforge.net/softwaremap/trove_list.php</a>
</li>

</ol>



<p><a name="k09"></a></p>
<h1>9. Obsah další části seriálu</h1>

<p>V&nbsp;následující části seriálu o programovacím jazyce <i>Lua</i> budou
popsány další možnosti tohoto jazyka při psaní skriptů využívajících objektově
orientovaný přístup. Ukážeme si například, jakým způsobem lze s&nbsp;využitím
metatabulek a metametod vytvořit settery a gettery (tj.&nbsp;metody používané
pro nastavování popř.&nbsp;čtení atributů objektů) tak, aby se mohly zapisovat
pomocí operátoru přiřazení, podobně jako například v&nbsp;jazyku <i>C#</i>, a
nikoli explicitním voláním metody. Taktéž si ukážeme, jak lze přetěžovat
operátory i další způsob volání metod, který je syntakticky shodný
s&nbsp;voláním metod v&nbsp;jazycích C++ či Java. Ve výše uvedeném příkladu by
se tedy namísto volání <strong>Complex.print(c1)</strong> použila konstrukce
<strong>c1:print()</strong>, ovšem pouze za předpokladu, že je vhodným způsobem
předefinováno chování metametody <strong>__index</strong>.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

