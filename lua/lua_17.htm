<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Hrátky se systémem LÖVE - kolize a odrazy těles II</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Hrátky se systémem LÖVE - kolize a odrazy těles II</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Interakce většího množství objektů ve scéně</a><br />
<a href="#k02">2. První demonstrační příklad &ndash; simulace pádu dominových kostek</a><br />
<a href="#k03">3. Detekce kolizí a obalová tělesa</a><br />
<a href="#k04">4. Druhý demonstrační příklad &ndash; zobrazení obalových těles pro různé tvary</a><br />
***<a href="#k05">5. Nastavení fyzikálních vlastností těles</a><br />
***<a href="#k06">6. Třetí demonstrační příklad &ndash; změna hmotnosti a pružnosti těles</a><br />
***<a href="#k07">7. Tvorba a ukládání animací v&nbsp;systému LÖVE</a><br />
***<a href="#k08">8. Obsah dalšího pokračování seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Interakce většího množství objektů ve scéně</h1>

<p>V&nbsp;předchozí části tohoto seriálu jsme si řekli, že s&nbsp;využitím
knihovny <strong>love.physics</strong> je možné simulovat vzájemné interakce
(kolize a odrazy) dvojrozměrných těles, vytvářet složitější objekty složené ze
vzájemně provázaných základních tvarů (<i>shape</i>) a těles (<i>body</i>) i
ovlivňovat trajektorii pohybujících se těles pomocí externích sil, které mohou
na tato tělesa různým způsobem působit. Taktéž je možné libovolnou část tělesa
navázat ke kurzoru myši, takže se současně s&nbsp;pohybem myši pohybuje i tato
část tělesa, která může ovlivnit i části další, s&nbsp;nimiž je spojena pomocí
programově vytvořené vazby apod. Pomocí této knihovny je například možné
poměrně jednoduše vytvořit hru typu <i>pinball</i>, ve které se bude pohybovat
a odrážet kulička na základě fyzikálních zákonů; zkonstruovat lze i systémy
typu hmota&ndash;pružina (<i>mass and spring</i>) apod. Ve většině reálných
simulací se však setkáme s&nbsp;tím, že spolu interaguje větší množství
pohybujících se objektů, což je i případ dominových kostek použitých
v&nbsp;prvním demonstračním příkladu.</p>



<p><a name="k02"></a></p>
<h1>2. První demonstrační příklad &ndash; simulace pádu dominových kostek</h1>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázána simulace míčku
narážejícího do kostek domina. Vzhledem k&nbsp;tomu, že se jedná pouze o
simulaci prováděnou v&nbsp;dvourozměrném prostoru, je možné kostky domina
reprezentovat úzkými obdélníky postavenými na podlaze vytvořené taktéž pomocí
obdélníku. Hmotnost i moment setrvačnosti kostek domina je vypočítána
automaticky z&nbsp;tvaru tělesa pomocí metody
<strong>setMassFromShapes()</strong>. Tatáž metoda je použita i u míčku, jehož
tvar odpovídá kruhu. Míček nejprve volným pádem dopadne na šiknou plošku, po
níž sklouzne (a částečně se i odvalí, což způsobí jeho rotaci) na podlahu.
Posléze následuje náraz do první kostky domina a pád dalších kostek. Zajímavý
je způsob vykreslení jednotlivých objektů ve scéně &ndash; s&nbsp;výhodou se
zde používá metoda <strong>love.graphics.polygon()</strong>, která akceptuje
dva parametry &ndash; styl vykreslovaného polygonu a seznam jeho vrcholů. Není
tedy nutné složitě zjišťovat souřadnice jednotlivých vrcholů polygonů
(obdélníků) představujících jednotlivá tělesa ani používat jejich rozklad na
úsečky &ndash; veškeré vykreslení je provedeno jedinou metodou. Kód tohoto
demonstračního příkladu má tvar:</p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- První demonstrační příklad: použití šikmých
-- "podlah", úzké kvádry v roli kostek domina.
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- objekt představující svět, ve kterém se provádí simulace
world = nil

-- počet kostek domina
dominos_count = 5

-- počitadlo snímků
frame = 0

function load()
    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)

    -- načtení fontu
    local font = love.graphics.newFont(love.default_font, 16)
    love.graphics.setFont(font)

    -- vytvoření "světa" o rozměrech 2000x2000 délkových jednotek
    world = love.physics.newWorld(2000, 2000)
    world:setGravity(0, 50)

    -- podlaha na souřadnicích [0, 0] s nulovou hmotností
    ground_body = love.physics.newBody(world, 0, 0, 0)

    -- obdélník představující podlahu
    ground_shape = love.physics.newRectangleShape(ground_body, 400, 500, 700, 10, 00)

    -- šikmý plát pro "rozjetí" míčku
    plate_body = love.physics.newBody(world, 0, -100, 0)
    plate_shape = love.physics.newRectangleShape(plate_body, 100, 350, 300, 10, 60)

    -- rastrový obrázek představující těleso - míček
    ball = love.graphics.newImage("green_ball.png")

    -- vytvoření tělesa na zadaných souřadnicích
    ball_body = love.physics.newBody(world, 100, 100)

    -- přiřazení tvaru k tělesu
    ball_shape = love.physics.newCircleShape(ball_body, 31)
    ball_shape:setRestitution(0.6)

    -- výpočet hmotnosti na základě jeho poloměru
    ball_body:setMassFromShapes()

    -- dvě pole - tělesa představující kostky domina a jejich tvary
    domino_bodies = {}
    domino_shapes = {}
    for i = 1, dominos_count do
        domino_bodies[i] = love.physics.newBody(world, 0, 0, 0)
        domino_shapes[i] = love.physics.newRectangleShape(domino_bodies[i], 300+i*75, 400, 16, 200)
        domino_bodies[i]:setMassFromShapes()
    end
end

-- pravidelně volaná callback funkce
function update(dt)
    world:update(dt)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
    love.graphics.setColor(160, 160, 160)
    love.graphics.setLineWidth(2)

    -- vykreslení podlahy a nakloněné roviny
    love.graphics.polygon(love.draw_line, ground_shape:getPoints())
    love.graphics.polygon(love.draw_line, plate_shape:getPoints())

    -- vykreslení míčku se správným natočením
    love.graphics.draw(ball, ball_body:getX(), ball_body:getY(), ball_body:getAngle())

    -- vykreslení kostek domina
    love.graphics.setColor(250, 160, 0)
    for i = 1, dominos_count do
        love.graphics.polygon(love.draw_line, domino_shapes[i]:getPoints())
    end

    -- výpis počitadla snímků
    love.graphics.setColor(255, 0, 255)
    love.graphics.draw(string.format("frame: %d", frame), 10, 20)
    frame = frame + 1

    -- výpis informací o pohybujícím se míčku
    love.graphics.setColor(255, 255, 0)

    -- získání aktuálních informací o míčku
    local x, y = ball_body:getPosition()
    local vx, vy = ball_body:getVelocity()
    local spin = ball_body:getSpin()

    -- výpis aktuálních informací o míčku
    love.graphics.draw(string.format("position: %d, %d", x, y), 10, 40)
    love.graphics.draw(string.format("velocity: %d, %d", vx, vy), 10, 60)
    love.graphics.draw(string.format("spin: %d", spin), 10, 80)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    -- klávesou [ESC] nebo [Q] se celá simulace ukončí
    if key == love.key_escape or key == love.key_q then
        love.system.exit()
    end
end

-- finito
</pre>

*** image ***
<p><i>Animace 1: Náraz míčku do kostek domina &ndash; zdánlivě jednoduchý
systém, který je však založený na poměrně složitých algoritmech detekce kolizí
a simulace vzájemné interakce těles.</i></p>



<p><a name="k03"></a></p>
<h1>3. Detekce kolizí a obalová tělesa</h1>

<p>V&nbsp;mnoha aplikacích, především ve hrách, je nutné zaregistrovat okamžik,
ve kterém dojde ke kolizi dvou či více těles. Může se například jednat o střet
hráče se stěnou (hry typu Doom), náraz střely do protihráče apod. Samotná
detekce kolizí je &ndash; i když jsou veškeré výpočty prováděny pouze
v&nbsp;dvourozměrné ploše &ndash; poměrně výpočetně náročná, proto je také
množina tvarů, které je možné navázat na tělesa, omezená na kruhy a (uzavřené)
konvexní polygony s&nbsp;maximálně osmi hranami. Každý tvar (<i>shape</i>) je
navíc vždy uzavřen do takzvaného &bdquo;obalového tělesa&ldquo; (<i>bounding
box</i>), jehož strany jsou rovnoběžné se souřadnými osami a tudíž je detekce
kolizí výrazně jednodušší než v&nbsp;případě obecného polygonu či kruhu.
Obalový box je možné získat metodou <strong>getBoundingBox()</strong>, což si
taktéž ukážeme v&nbsp;následujícím demonstračním příkladu. Při každé změně
pozice i natočení tvaru je velikost obalového tělesa přepočítána tak, aby tvar
vždy ležel uvnitř tohoto tělesa a současně byla jeho plocha minimální (jak bude
z&nbsp;animací patrné, tato podmínka není vždy splněna). Detekce kolizí probíhá
vždy nejprve nad obalovými tělesy a teprve v&nbsp;okamžiku, kdy dojde
k&nbsp;jejich prolnutí nastává obecně složitější část výpočtu &ndash; detekce
kolize samotných tvarů.</p>

*** image ***
<p><i>Animace 2: Šedou barvou naznačená obalová tělesa míčku, nakloněných rovin
i jednotlivých kostek domina. Tato animace byla vytvořena pomocí druhého
demonstračního příkladu popsaného v&nbsp;následující kapitole.</i></p>



<p><a name="k04"></a></p>
<h1>4. Druhý demonstrační příklad &ndash; zobrazení obalových těles pro různé tvary</h1>

<p>V&nbsp;dnešním druhém demonstračním příkladu je ukázáno, jakým způsobem lze
získat a zobrazit obalové těleso pro různé tvary. Po spuštění příkladu je možné
pomocí klávesy <strong>[B]</strong> zapínat či vypínat zobrazení obalových
těles všech tvarů, které se ve scéně nachází &ndash; jak samotného míčku, tak i
nakloněné roviny, podlahy a všech dominových kostek (obalová tělesa jsou
vykreslena šedou barvou). Navíc je možné změnou globální konstanty
<strong>shape_type</strong> místo kulatého míčku zvolit použití pravidelného
čtyřúhelníku (čtverce), šestiúhelníku či osmiúhelníku. Za zmínku stojí použití
funkce <strong>unpack()</strong> pomocí níž se hodnoty uložené
v&nbsp;(asociativním) poli transformují do seznamu hodnot. Tímto způsobem je
možné připravit parametry pro metodu
<strong>love.physics.newPolygonShape()</strong>, která vyžaduje, aby po prvním
parametru (objektu typu těleso) následovaly souřadnice jednotlivých vrcholů
polygonu, tj.&nbsp;hodnoty x1, y1, x2, y2, x3, y3 atd., zatímco v&nbsp;programu
jsou tyto hodnoty uložené v&nbsp;asociativním poli.</p>

*** image ***
<p><i>Animace 3: U čtvercového tvaru je obalové těleso vypočteno zcela
přesně.</i></p>

<p>Následuje výpis zdrojového kódu druhého demonstračního příkladu:</p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- Druhý demonstrační příklad: vykreslení obalových
-- boxů a změna tvaru tělesa.
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- objekt představující svět, ve kterém se provádí simulace
world = nil

-- počet kostek domina
dominos_count = 7

-- počitadlo snímků
frame = 0

-- příznak zobrazení obalového boxu
draw_bounding_box = false

-- typ pohybujícího se tělesa
-- povolené hodnoty:
--     "ball"
--     "square"
--     "hexagon"
--     "octagon"
shape_type = "octagon"

function load()
    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)

    -- načtení fontu
    local font = love.graphics.newFont(love.default_font, 16)
    love.graphics.setFont(font)

    -- vytvoření "světa" o rozměrech 2000x2000 délkových jednotek
    world = love.physics.newWorld(2000, 2000)
    world:setGravity(0, 50)

    -- podlaha na souřadnicích [0, 0] s nulovou hmotností
    ground_body = love.physics.newBody(world, 0, 0, 0)

    -- obdélník představující podlahu
    ground_shape = love.physics.newRectangleShape(ground_body, 400, 550, 700, 10, 00)

    -- šikmý plát pro "rozjetí" míčku
    plate_body = love.physics.newBody(world, 0, -100, 0)
    plate_shape = love.physics.newRectangleShape(plate_body, 100, 490, 300, 10, 45)

    -- rastrový obrázek představující těleso - míček
    ball = love.graphics.newImage("green_ball.png")

    -- vytvoření tělesa na zadaných souřadnicích
    ball_body = love.physics.newBody(world, 100, 100)

    -- přiřazení tvaru k tělesu
    if shape_type=="ball" then
        ball_shape = love.physics.newCircleShape(ball_body, 31)
    end
    if shape_type=="square" then
        ball_shape = love.physics.newPolygonShape(ball_body, unpack(construct_polygon(4)))
    end
    if shape_type=="hexagon" then
        ball_shape = love.physics.newPolygonShape(ball_body, unpack(construct_polygon(6)))
    end
    if shape_type=="octagon" then
        ball_shape = love.physics.newPolygonShape(ball_body, unpack(construct_polygon(8)))
    end
    ball_shape:setRestitution(0.6)

    -- výpočet hmotnosti na základě jeho tvaru
    ball_body:setMassFromShapes()

    -- dvě pole - tělesa představující kostky domina a jejich tvary
    domino_bodies = {}
    domino_shapes = {}
    -- vytvoření kostek domina a výpočet jejich hmotnosti
    for i = 1, dominos_count do
        domino_bodies[i] = love.physics.newBody(world, 0, 0, 0)
        domino_shapes[i] = love.physics.newRectangleShape(domino_bodies[i], 300+i*55, 450, 10, 200)
        domino_bodies[i]:setMassFromShapes()
    end
end

-- vytvoření seznamu bodů tvořících vrcholy pravidelného n-úhelníku
function construct_polygon(n)
    points = {}
    for i=0, n do
        points[i*2] = 30*math.cos(math.rad(i*360/n))
        points[i*2+1] = 30*math.sin(math.rad(i*360/n))
    end
    return points
end

-- pravidelně volaná callback funkce
function update(dt)
    world:update(dt)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
    love.graphics.setColor(160, 250, 160)
    love.graphics.setLineWidth(2)

    -- vykreslení podlahy a nakloněné roviny
    love.graphics.polygon(love.draw_line, ground_shape:getPoints())
    love.graphics.polygon(love.draw_line, plate_shape:getPoints())
    if draw_bounding_box then
        love.graphics.setColor(128, 128, 128)
        love.graphics.polygon(love.draw_line, ground_shape:getBoundingBox())
        love.graphics.polygon(love.draw_line, plate_shape:getBoundingBox())
    end

    -- vykreslení míčku či polygonu se správným natočením
    if shape_type=="ball" then
        love.graphics.draw(ball, ball_body:getX(), ball_body:getY(), ball_body:getAngle())
    else
        love.graphics.setColor(250, 128, 128)
        love.graphics.polygon(love.draw_line, ball_shape:getPoints())
    end

    -- vykreslení obalového kvádru v případě, že uživatel stlačil klávesu [B]
    if draw_bounding_box then
        love.graphics.setColor(128, 128, 128)
        love.graphics.polygon(love.draw_line, ball_shape:getBoundingBox())
    end

    -- vykreslení kostek domina
    for i = 1, dominos_count do
        love.graphics.setColor(250, 160, 0)
        love.graphics.polygon(love.draw_line, domino_shapes[i]:getPoints())
        -- vykreslení obalového kvádru v případě, že uživatel stlačil klávesu [B]
        if draw_bounding_box then
            love.graphics.setColor(128, 128, 128)
            love.graphics.polygon(love.draw_line, domino_shapes[i]:getBoundingBox())
        end
    end

    -- výpis počitadla snímků
    love.graphics.setColor(255, 0, 255)
    love.graphics.draw(string.format("frame: %d", frame), 10, 20)
    frame = frame + 1

    -- výpis informací o pohybujícím se míčku či polygonu
    love.graphics.setColor(255, 255, 0)

    -- získání aktuálních informací o míčku
    local x, y = ball_body:getPosition()
    local vx, vy = ball_body:getVelocity()
    local spin = ball_body:getSpin()

    -- výpis aktuálních informací o míčku či polygonu
    love.graphics.draw(string.format("position: %d, %d", x, y), 10, 40)
    love.graphics.draw(string.format("velocity: %d, %d", vx, vy), 10, 60)
    love.graphics.draw(string.format("spin: %d", spin), 10, 80)

    -- výpis nápovědy
    love.graphics.setColor(0, 255, 128)
    love.graphics.draw("[b] show/hide bounding box", 560, 20)
    love.graphics.draw("[q] quit", 560, 40)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    -- klávesou [ESC] nebo [Q] se celá simulace ukončí
    if key == love.key_escape or key == love.key_q then
        love.system.exit()
    end
    -- povolení či zákaz zobrazení obalového boxu
    if key == love.key_b then
        draw_bounding_box = not draw_bounding_box
    end
end

-- finito
</pre>

*** image ***
<p><i>Animace 4: Povšimněte si, že u šestiúhelníku dochází ke změně velikosti
obalového těleso na základě jeho rotace. Obalové těleso však není ve všech
případech minimální.</i></p>

*** image ***
<p><i>Animace 5: I u osmiúhelníku není obalové těleso vždy minimální.
Osmiúhelníkový polygon je pro systém LÖVE mezním tvarem &ndash; více vrcholů (a
tím pádem i hran) již polygon nesmí mít.</i></p>



<p><a name="k05"></a></p>
<h1>5. Nastavení fyzikálních vlastností těles</h1>

<p></p>

*** image ***


<p><a name="k06"></a></p>
<h1>6. Třetí demonstrační příklad &ndash; změna hmotnosti a pružnosti těles</h1>

<p></p>

*** image ***

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua"
--
-- Třetí demonstrační příklad: změna hmotnosti
-- a odrazivosti tělesa.
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- objekt představující svět, ve kterém se provádí simulace
world = nil

-- počet kostek domina
dominos_count = 7

-- počitadlo snímků
frame = 0

-- příznak zobrazení obalového boxu
draw_bounding_box = false

-- typ pohybujícího se tělesa
-- povolené hodnoty:
--     "ball"
--     "square"
--     "hexagon"
--     "octagon"
shape_type = "octagon"

-- hmotnost tělesa
body_mass = 200000

-- odrazivost tělesa
body_restitution = 0.6

function load()
    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)

    -- načtení fontu
    local font = love.graphics.newFont(love.default_font, 16)
    love.graphics.setFont(font)

    -- vytvoření "světa" o rozměrech 2000x2000 délkových jednotek
    world = love.physics.newWorld(2000, 2000)
    world:setGravity(0, 50)

    -- podlaha na souřadnicích [0, 0] s nulovou hmotností
    ground_body = love.physics.newBody(world, 0, 0, 0)

    -- obdélník představující podlahu
    ground_shape = love.physics.newRectangleShape(ground_body, 400, 550, 700, 10, 00)

    -- šikmý plát pro "rozjetí" míčku
    plate_body = love.physics.newBody(world, 0, -100, 0)
    plate_shape = love.physics.newRectangleShape(plate_body, 100, 490, 300, 10, 45)

    -- rastrový obrázek představující těleso - míček
    ball = love.graphics.newImage("green_ball.png")

    -- vytvoření tělesa na zadaných souřadnicích
    ball_body = love.physics.newBody(world, 100, 100)

    -- přiřazení tvaru k tělesu
    if shape_type=="ball" then
        ball_shape = love.physics.newCircleShape(ball_body, 31)
    end
    if shape_type=="square" then
        ball_shape = love.physics.newPolygonShape(ball_body, unpack(construct_polygon(4)))
    end
    if shape_type=="hexagon" then
        ball_shape = love.physics.newPolygonShape(ball_body, unpack(construct_polygon(6)))
    end
    if shape_type=="octagon" then
        ball_shape = love.physics.newPolygonShape(ball_body, unpack(construct_polygon(8)))
    end
    ball_shape:setRestitution(body_restitution)

    -- výpočet hmotnosti na základě jeho tvaru
    ball_body:setMassFromShapes()
    ball_body:setMass(0, 0, body_mass, ball_body:getInertia())

    -- dvě pole - tělesa představující kostky domina a jejich tvary
    domino_bodies = {}
    domino_shapes = {}
    -- vytvoření kostek domina a výpočet jejich hmotnosti
    for i = 1, dominos_count do
        domino_bodies[i] = love.physics.newBody(world, 0, 0, 0)
        domino_shapes[i] = love.physics.newRectangleShape(domino_bodies[i], 300+i*55, 450, 10, 200)
        domino_bodies[i]:setMassFromShapes()
    end
end

-- vytvoření seznamu bodů tvořících vrcholy pravidelného n-úhelníku
function construct_polygon(n)
    points = {}
    for i=0, n do
        points[i*2] = 30*math.cos(math.rad(i*360/n))
        points[i*2+1] = 30*math.sin(math.rad(i*360/n))
    end
    return points
end

-- pravidelně volaná callback funkce
function update(dt)
    world:update(dt/4)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
    love.graphics.setColor(160, 250, 160)
    love.graphics.setLineWidth(2)

    -- vykreslení podlahy a nakloněné roviny
    love.graphics.polygon(love.draw_line, ground_shape:getPoints())
    love.graphics.polygon(love.draw_line, plate_shape:getPoints())
    if draw_bounding_box then
        love.graphics.setColor(128, 128, 128)
        love.graphics.polygon(love.draw_line, ground_shape:getBoundingBox())
        love.graphics.polygon(love.draw_line, plate_shape:getBoundingBox())
    end

    -- vykreslení míčku či polygonu se správným natočením
    if shape_type=="ball" then
        love.graphics.draw(ball, ball_body:getX(), ball_body:getY(), ball_body:getAngle())
    else
        love.graphics.setColor(250, 128, 128)
        love.graphics.polygon(love.draw_line, ball_shape:getPoints())
    end

    -- vykreslení obalového kvádru v případě, že uživatel stlačil klávesu [B]
    if draw_bounding_box then
        love.graphics.setColor(128, 128, 128)
        love.graphics.polygon(love.draw_line, ball_shape:getBoundingBox())
    end

    -- vykreslení kostek domina
    for i = 1, dominos_count do
        love.graphics.setColor(250, 160, 0)
        love.graphics.polygon(love.draw_line, domino_shapes[i]:getPoints())
        -- vykreslení obalového kvádru v případě, že uživatel stlačil klávesu [B]
        if draw_bounding_box then
            love.graphics.setColor(128, 128, 128)
            love.graphics.polygon(love.draw_line, domino_shapes[i]:getBoundingBox())
        end
    end

    -- výpis počitadla snímků
    love.graphics.setColor(255, 0, 255)
    love.graphics.draw(string.format("frame: %d", frame), 10, 20)
    frame = frame + 1

    -- výpis informací o pohybujícím se míčku či polygonu
    love.graphics.setColor(255, 255, 0)

    -- získání aktuálních informací o míčku
    local x, y = ball_body:getPosition()
    local vx, vy = ball_body:getVelocity()
    local spin = ball_body:getSpin()

    -- výpis aktuálních informací o míčku či polygonu
    love.graphics.draw(string.format("position: %d, %d", x, y), 10, 40)
    love.graphics.draw(string.format("velocity: %d, %d", vx, vy), 10, 60)
    love.graphics.draw(string.format("spin: %d", spin), 10, 80)
    love.graphics.draw(string.format("mass: %d", ball_body:getMass()), 10, 100)
    love.graphics.draw(string.format("restitution: %f", body_restitution), 10, 120)

    -- výpis nápovědy
    love.graphics.setColor(0, 255, 128)
    love.graphics.draw("[b] show/hide bounding box", 560, 20)
    love.graphics.draw("[q] quit", 560, 40)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    -- klávesou [ESC] nebo [Q] se celá simulace ukončí
    if key == love.key_escape or key == love.key_q then
        love.system.exit()
    end
    -- povolení či zákaz zobrazení obalového boxu
    if key == love.key_b then
        draw_bounding_box = not draw_bounding_box
    end
end

-- finito
</pre>



<p><a name="k07"></a></p>
<h1>7. Tvorba a ukládání animací v&nbsp;systému LÖVE</h1>

<p></p>
http://www.lcdf.org/gifsicle/

Manuálová stránka
http://www.lcdf.org/gifsicle/man.html


<p><a name="k08"></a></p>
<h1>8. Obsah dalšího pokračování seriálu</h1>

<p></p>

*** image ***
<p><i>Animace 8: </i></p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

