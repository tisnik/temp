<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vytváříme hru v systému LÖVE</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Hrátky se systémem LÖVE II - jednoduchá hra</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtrnácté části seriálu o programovacím jazyku Lua bude ukázán způsob vytvoření jednoduché 2D hry s využitím systému LÖVE. Vzhledem ke snadno použitelnému API nabízeného systémem LÖVE je tvorba podobných typů her snadná a rychlá (řádově desítky minut), což je ideální například pro tvorbu prototypů.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Hrátky se systémem LÖVE II - jednoduchá hra</a><br />
<a href="#k02">2. Zdrojový kód hry</a><br />
<a href="#k03">3. Základní kostra hry</a><br />
<a href="#k04">4. Načtení všech potřebných objektů a inicializace hry</a><br />
<a href="#k05">5. Zpracování událostí</a><br />
<a href="#k06">6. Režimy hry a způsob jejich přepínání</a><br />
<a href="#k07">7. Výpočet trajektorie hráče</a><br />
<a href="#k08">8. Pohyb protihráčů a detekce kolizí</a><br />
<a href="#k09">9. Závěrečná animace a ukončení hry</a><br />
</p>



<p><a name="k01"></a></p>
<h2>1. Hrátky se systémem LÖVE II - jednoduchá hra</h2>

<p>V&nbsp;předchozích dvou částech tohoto seriálu jsme se seznámili se základy
systému <i>LÖVE</i>, především s&nbsp;aplikačním programovým rozhraním (API)
jednotlivých knihoven i způsobem využití takzvaných callback funkcí,
tj.&nbsp;funkcí, které tento systém automaticky zavolá ve chvíli, kdy nastane
nějaká událost, například stisk klávesy, pohyb myši, &bdquo;tik&ldquo; časovače
či kdy dojde k&nbsp;žádosti operačního systému o překreslení okna či obrazovky.
Také již víme, jakým způsobem je možné načítat některé typy objektů, například
rastrové obrázky, zvuky, hudbu či fonty ze souborů umístěných buď
v&nbsp;adresáři s&nbsp;rozbalenou hrou (jedná se o adresář obsahující
mj.&nbsp;i soubory <strong>game.conf</strong> a <strong>main.lua</strong>) nebo
přímo v&nbsp;archivu s&nbsp;hrou, tj.&nbsp;v&nbsp;souboru
<strong>hra.love</strong>. Tento archiv vznikne komprimací všech souborů
umístěných v&nbsp;jednom adresáři programem typu <i>zip</i> s&nbsp;následnou
změnou koncovky archivu, tj.&nbsp;například příkazem <strong>zip -9 hra.love
*.*</strong>. Dnes si ukážeme, jak lze s&nbsp;využitím systému <i>LÖVE</i> a
taktéž některých vlastností programovacího jazyka <i>Lua</i> vytvořit
jednoduchou 2D hru s&nbsp;objektem představujícím hráče a několika počítačem
řízenými protihráči.</p>

*** image ***
<p><i>Obrázek 1: Úvodní obrazovka hry</i></p>



<p><a name="k02"></a></p>
<h2>2. Zdrojový kód hry</h2>

<p>Zdrojový kód hry, který mj.&nbsp;<a href="*** priloha ***">můžete získat po rozbalení
archivu s&nbsp;hrou</a>, popř.&nbsp;ho lze studovat na níže uvedeném výpisu, má
přesně 256 řádků (bez komentářů dokonce pouze 200 řádků) a byl vytvořen za cca
hodinu, protože snadno použitelné API systému <i>LÖVE</i> i dynamický jazyk
<i>Lua</i> skutečně dokážou poměrně výrazným způsobem ušetřit programátorův
čas.</p>

<pre>
<i>-----------------------------------------------------------------------</i>
<i>-- Seriál "Programovací jazyk Lua"</i>
<i>--</i>
<i>-- Jednoduchá hra vytvořená s využitím systému LÖVE napsaná na 256 řádcích</i>
<i>-----------------------------------------------------------------------</i>

<i>-- časový interval mezi jednotlivými snímky</i>
sleepInMs = 50

<i>-- velikost okna</i>
window = {
    width = 800,
    height = 600
}

<i>-- objekt představující hráče - raketu</i>
rocket = {
    x = window.width/2,
    y = window.height/2,
    v = 0,
    rotation = 0,
    deltaAlfa = 8,
    acceleration = 1.5,
    dampingFactor = 0.95
}

<i>-- objekt představující protivníky</i>
stars = {
    count = 10,
    maxVelocity = 50
}

<i>-- výbuch rakety = dvacet červených teček</i>
redBalls = {
    count = 20,
    velocity = 6,
    numberOfFrames = 70
}

<i>-- callback funkce zavolaná při inicializaci aplikace</i>
<strong>function</strong> load()
    <i>-- načíst fonty</i>
    font1 = love.graphics.newFont("DejaVuLGCSansMono.ttf", 20)
    font2 = love.graphics.newFont("DejaVuLGCSansMono.ttf", 20*6)
    <i>-- nastavit grafický režim</i>
    love.graphics.setMode(window.width, window.height, false, false, 0)
    <i>-- načíst všechny obrázky</i>
    background = love.graphics.newImage("tile-space.jpg")
    rocket.image = love.graphics.newImage("rocket.gif")
    stars.image = love.graphics.newImage("orgstar.gif")
    redBalls.image = love.graphics.newImage("redball.gif")
    <i>-- načíst zvuky</i>
    crashSound = love.audio.newSound("pluck.wav")
    crashSound2 = love.audio.newSound("beam.wav")
    <i>-- inicializace všech protivníků</i>
    <strong>for</strong> i = 1, stars.count <strong>do</strong>
        stars[i] = {
            x = window.width/2 + 295 * math.cos(i * 2 * math.pi / stars.count),
            y = window.height/2 + 295 * math.sin(i * 2 * math.pi / stars.count),
            damping = 5 + i
        }
    <strong>end</strong>
    <i>-- začít přehrávat úvodní zvuk</i>
    love.audio.play(love.audio.newSound("drama.wav"))
<strong>end</strong>

<i>-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí překreslit okno</i>
draw = <strong>function</strong>()
    drawBeginning()
<strong>end</strong>

<i>-- první režim hry - pouze se přehrává melodie a zobrazuje se hrací pole</i>
<strong>function</strong> drawBeginning()
    drawScene()
    <i>-- čekání na konec přehrání úvodní melodie</i>
    <strong>if</strong> not love.audio.isPlaying() <strong>then</strong>
        <i>-- změna režimu hry - bude se volat jiná překreslovací funkce</i>
        draw = <strong>function</strong>()
            drawGame()
        <strong>end</strong>
    <strong>end</strong>
    love.graphics.setColor(0, 255, 255)
    love.graphics.setFont(font2)
    love.graphics.draw("Prepare...", 50, window.height/2-50)
    <i>-- čekání před vykreslením dalšího snímku</i>
    love.timer.sleep(sleepInMs)
<strong>end</strong>

<i>-- druhý režim hry - vlastní hra</i>
<strong>function</strong> drawGame()
    <i>-- posun hráče</i>
    moveRocket()
    <i>-- posun protivníků</i>
    moveStars()
    <i>-- vykreslení celé scény</i>
    drawScene()
    <i>-- čekání před vykreslením dalšího snímku</i>
    love.timer.sleep(sleepInMs)
<strong>end</strong>

<i>-- vykreslení scény ve druhém režimu</i>
<strong>function</strong> drawScene()
    drawBackground()
    drawRocket()
    drawStars()
    drawInfo()
<strong>end</strong>

<i>-- třetí režim hry - výbuch s nápisem "Game over"</i>
<strong>function</strong> drawExplosion()
    drawBackground()
    <i>-- čekání na konec animace výbuchu, potom ukončení hry</i>
    redBalls.numberOfFrames = redBalls.numberOfFrames - 1
    <strong>if</strong> redBalls.numberOfFrames &gt; 0 <strong>then</strong>
        <i>-- posun úlomků rakety</i>
        <strong>for</strong> i = 1, redBalls.count <strong>do</strong>
            redBalls[i].x=redBalls[i].x+redBalls[i].vx
            redBalls[i].y=redBalls[i].y+redBalls[i].vy
            love.graphics.draw(redBalls.image, redBalls[i].x, redBalls[i].y)
        <strong>end</strong>
    <strong>end</strong>
    <i>-- výpis "Game over"</i>
    love.graphics.setFont(font2)
    love.graphics.setColor(255, 0, 255)
    love.graphics.draw("Game over", 50, window.height/2)
    <i>-- čekání před vykreslením dalšího snímku</i>
    love.timer.sleep(sleepInMs)
<strong>end</strong>

<i>-- výpis informací v dolní části okna</i>
<strong>function</strong> drawInfo()
    love.graphics.setFont(font1)
    love.graphics.setColor(255, 200, 255)
    love.graphics.draw("Esc: exit, left: turn left, right: turn fight, up: accelerate", 10, window.height-30)
<strong>end</strong>

<i>-- vykreslení hracího pole - několik na sebe navazujících dlaždic</i>
<strong>function</strong> drawBackground()
    <strong>local</strong> y = 0;
    <strong>while</strong> y &lt;= window.height <strong>do</strong>
        <strong>local</strong> x = 0
        <strong>while</strong> x &lt;= window.width <strong>do</strong>
            love.graphics.draw(background, x, y)
            x = x + background:getWidth()
        <strong>end</strong>
        y = y + background:getHeight()
    <strong>end</strong>
<strong>end</strong>

<i>-- vykreslení rakety</i>
<strong>function</strong> drawRocket()
    <strong>local</strong> x = rocket.x
    <strong>local</strong> y = rocket.y
    love.graphics.draw(rocket.image, x, y, rocket.rotation)
<strong>end</strong>

<i>-- vykreslení protivníků</i>
<strong>function</strong> drawStars()
    <strong>for</strong> i = 1, stars.count <strong>do</strong>
        love.graphics.draw(stars.image, stars[i].x, stars[i].y)
    <strong>end</strong>
<strong>end</strong>

<i>-- posun rakety a její natočení na základě kláves</i>
<i>-- [Left], [Right] a [Up]</i>
<strong>function</strong> moveRocket()
    <strong>if</strong> love.keyboard.isDown(love.key_left) <strong>then</strong>
        rocket.rotation = rocket.rotation - rocket.deltaAlfa
    <strong>end</strong>
    <strong>if</strong> love.keyboard.isDown(love.key_right) <strong>then</strong>
        rocket.rotation = rocket.rotation + rocket.deltaAlfa
    <strong>end</strong>
    <strong>if</strong> love.keyboard.isDown(love.key_up) <strong>then</strong>
        rocket.v = rocket.v + rocket.acceleration
    <strong>end</strong>
    <i>-- posun rakety na základě její rychlosti a natočení</i>
    rocket.x = rocket.x + rocket.v * math.sin(math.rad(rocket.rotation))
    rocket.y = rocket.y - rocket.v * math.cos(math.rad(rocket.rotation))
    rocket.v = rocket.v * rocket.dampingFactor
    <i>-- v případě opuštění hracího pole se raketa ukáže na protější straně</i>
    <strong>if</strong> rocket.x &lt; 0 <strong>then</strong>
        rocket.x = window.width
        love.audio.play(crashSound)
    <strong>end</strong>
    <strong>if</strong> rocket.x &gt; window.width <strong>then</strong>
        rocket.x = 0
        love.audio.play(crashSound)
    <strong>end</strong>
    <strong>if</strong> rocket.y &lt; 0 <strong>then</strong>
        rocket.y = window.height
        love.audio.play(crashSound)
    <strong>end</strong>
    <strong>if</strong> rocket.y &gt; window.height <strong>then</strong>
        rocket.y = 0
        love.audio.play(crashSound)
    <strong>end</strong>
<strong>end</strong>

<i>-- posun všech protivníků směrem ke hráči</i>
<strong>function</strong> moveStars()
    <strong>for</strong> i = 1, stars.count <strong>do</strong>
        moveStar(stars[i])
    <strong>end</strong>
<strong>end</strong>

<i>-- posun jednoho protivníka směrem ke hráči</i>
<strong>function</strong> moveStar(star)
    <strong>local</strong> vx, vy
    vx = rocket.x - star.x
    vy = rocket.y - star.y
    <i>-- zamezit příliš rychlému pohybu</i>
    vx = math.max(math.min(vx, stars.maxVelocity), -stars.maxVelocity)
    vy = math.max(math.min(vy, stars.maxVelocity), -stars.maxVelocity)
    <i>-- vlastní posun o vypočtený vektor</i>
    star.x = star.x + vx / star.damping
    star.y = star.y + vy / star.damping
    <i>-- zjistit, zda nastala kolize</i>
    <strong>if</strong> isCollision(star) <strong>then</strong>
        processColission()
        return
    <strong>end</strong>
<strong>end</strong>

<i>-- funkce vrátí true v případě, že dojde ke kolizi rakety s protivníkem</i>
<strong>function</strong> isCollision(star)
    return math.abs(star.x - rocket.x) &lt; rocket.image:getWidth()/2
       and math.abs(star.y - rocket.y) &lt; rocket.image:getHeight()/2
<strong>end</strong>

<i>-- pokud nastane kolize, změní se mód hry - bude se volat rutina drawExplosion()</i>
<strong>function</strong> processColission()
    love.audio.play(crashSound2)
    <i>-- změna překreslovací rutiny</i>
    draw = <strong>function</strong>()
        drawExplosion()
    <strong>end</strong>
    <i>-- inicializace objektů představujících rozbitou raketu</i>
    <strong>for</strong> i = 1, redBalls.count <strong>do</strong>
        redBalls[i]= {
            x=rocket.x,
            y=rocket.y,
            vx=redBalls.velocity * math.cos(i * 2 * math.pi / redBalls.count),
            vy=redBalls.velocity * math.sin(i * 2 * math.pi / redBalls.count)
        }
    <strong>end</strong>
<strong>end</strong>

<i>-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu</i>
<strong>function</strong> keypressed(key)
    <strong>if</strong> key == love.key_escape <strong>then</strong>
        love.system.exit()
    <strong>end</strong>
<strong>end</strong>

<i>-- finito</i>
</pre>



<p><a name="k03"></a></p>
<h2>3. Základní kostra hry</h2>

<p>Herní scénář je velmi jednoduchý; vymýšlel ho můj malý syn, který si
prosadil, že tam prostě musí být raketa nebo aspoň létající balon :-) (slíbená
&bdquo;plošinovka&ldquo; tedy bude ukázána příště, musím ještě nalézt vhodné
obrázky do hry šířené pod licencí kompatibilní s&nbsp;LGPL). Na herní ploše se
pohybuje raketka natáčená klávesami <strong>[Šipka doleva]</strong> a
<strong>[Šipka doprava]</strong>, jejíž motory se spouští klávesou
<strong>[Šipka nahoru]</strong>. Poslední aktivní klávesou je
<strong>[Esc]</strong>, kterou je možné hru v&nbsp;jakémkoli okamžiku ukončit.
Úkolem raketky je uniknout protihráčům, kteří se vždy pohybují směrem k&nbsp;ní
(ovšem každý protihráč s&nbsp;jinou rychlostí). Protihráčům lze uniknout jak
rychlým letem, tak i pomocí malého triku &ndash; po dosažení jednoho
z&nbsp;okrajů herního pole se raketa ukáže na protilehlém okraji, ovšem sami
protihráči nedokážou přes okraj přeletět. Po střetu raketky s&nbsp;některým
z&nbsp;protihráčů dojde k&nbsp;výbuchu a hra je ukončena &ndash; po stisku
klávesy <strong>Esc</strong> se okno hry uzavře (samozřejmě by bylo možné
přidat výsledkovou tabulkou s&nbsp;dosaženými časy, hru pro více hráčů atd.,
v&nbsp;tomto seriálu nám však jde hlavně o vysvětlení herních principů).</p>

*** image ***
<p><i>Obrázek 2: Screenshot zachycený v&nbsp;průběhu hry</i></p>

<p>Celá hra je, jak z&nbsp;hlediska hráčů, tak i programátorů, rozdělena do tří režimů:</p>

<ol>
<li>Nejprve se přehraje úvodní melodie se zobrazeným hracím polem a nápisem
&bdquo;Prepare&ldquo; (viz první screenshot). Po přehrání úvodní melodie se hra
automaticky přepíná do druhého režimu.</li>
<li>Vlastní hra &ndash; pohyb hráče i protivníků s&nbsp;detekcí kolizí. Průběh
hry je zachycený na druhém screenshotu.</li>
<li>Kolize a následná exploze rakety (hráče) s&nbsp;ukončením hry, viz třetí
screenshot.</li>
</ol>

*** image ***
<p><i>Obrázek 3: Exploze rakety a ukončení hry</i></p>



<p><a name="k04"></a></p>
<h2>4. Načtení všech potřebných objektů a inicializace hry</h2>

<p>Před prvním zobrazením úvodní obrazovky je nejprve nutné načíst všechny
potřebné objekty do operační paměti. Průběžné načítání objektů je sice také
možné, ovšem může zapříčinit prodlevy ve hře, které se projevují trháním
animace. V&nbsp;naší jednoduché hře se používá pouze osm objektů uložených
v&nbsp;samostatných souborech, které jsou následně zabaleny do archivu
s&nbsp;hrou. Jedná se následující soubory:</p>

<table>
<tr><th>Poř.</th><th>Soubor</th><th>Význam</th></tr>
<tr><td>1</td><td>drama.wav</td><td>Úvodní melodie trvající cca 7 sekund</td></tr>
<tr><td>2</td><td>pluck.wav</td><td>Zvuk přehraný při přeletu raketky přes okraj hrací plochy</td></tr>
<tr><td>3</td><td>beam.wav</td><td>Zvuk přehraný v&nbsp;průběhu detonace raketky</td></tr>
<tr><td>4</td><td>tile-space.jpg</td><td>Dlaždice použitá pro vytvoření pozadí hrací plochy</td></tr>
<tr><td>5</td><td>rocket.gif</td><td>Obrázek raketky</td></tr>
<tr><td>6</td><td>orgstar.gif</td><td>Obrázek představující protihráče</td></tr>
<tr><td>7</td><td>redball.gif</td><td>Obrázek použitý při detonaci raketky</td></tr>
<tr><td>8</td><td>DejaVuLGCSansMono.ttf</td><td>Font použitý ve hře</td></tr>
</table>

*** image ***
<p><i>Obrázek 4: Dlaždice použitá pro vytvoření pozadí hrací plochy (dlaždice
je obrázek, jehož okraje na sebe plynule navazují, což mj.&nbsp;znamená, že
může být velmi malý a přesto s&nbsp;ním lze kontinuálně pokrýt velkou
plochu). O vykreslení pozadí složeného z&nbsp;dlaždic se stará funkce
drawBackground().</i></p>

<p>O načtení všech potřebných objektů se stará callback funkce
<strong>load()</strong>, která kromě jiného provádí i inicializaci protihráčů a
nakonec spustí úvodní melodii (poslední řádek). Povšimněte si například řádku
začínajícího <i>rocket.image =</i>, v&nbsp;němž se do &bdquo;objektu&ldquo;
(zde spíše jen do datové struktury typu záznam) nazvaného
<strong>rocket</strong> přidává další atribut.</p>

<pre>
<i>-- callback funkce zavolaná při inicializaci aplikace</i>
<strong>function</strong> load()
    <i>-- načíst fonty</i>
    font1 = love.graphics.newFont("DejaVuLGCSansMono.ttf", 20)
    font2 = love.graphics.newFont("DejaVuLGCSansMono.ttf", 20*6)
    <i>-- nastavit grafický režim</i>
    love.graphics.setMode(window.width, window.height, false, false, 0)
    <i>-- načíst všechny obrázky</i>
    background = love.graphics.newImage("tile-space.jpg")
    rocket.image = love.graphics.newImage("rocket.gif")
    stars.image = love.graphics.newImage("orgstar.gif")
    redBalls.image = love.graphics.newImage("redball.gif")
    <i>-- načíst zvuky</i>
    crashSound = love.audio.newSound("pluck.wav")
    crashSound2 = love.audio.newSound("beam.wav")
    <i>-- inicializace všech protivníků</i>
    <strong>for</strong> i = 1, stars.count <strong>do</strong>
        stars[i] = {
            x = window.width/2 + 295 * math.cos(i * 2 * math.pi / stars.count),
            y = window.height/2 + 295 * math.sin(i * 2 * math.pi / stars.count),
            damping = 5 + i
        }
    <strong>end</strong>
    <i>-- začít přehrávat úvodní zvuk</i>
    love.audio.play(love.audio.newSound("drama.wav"))
<strong>end</strong>
</pre>



<p><a name="k05"></a></p>
<h2>5. Zpracování událostí</h2>

<p>Programové ovládání celé hry je založeno na takzvaných <i>callback
funkcích</i>, které jsou automaticky volány systémem <i>LÖVE</i> po příchodu
nějaké události. V&nbsp;demonstrační hře se používá několik callback funkcí.
Aby je systém <i>LÖVE</i> rozpoznal, musí mít tyto funkce jednoznačná (předem
daná) jména i parametry, což je rozdíl oproti jiným systémům, kde lze callback
funkce či metody pojmenovat libovolně &ndash; ovšem na druhou stranu je
zapotřebí tyto funkce/metody registrovat; tuto činnost není nutné
v&nbsp;systému <i>LÖVE</i> provádět:</p>

<table>
<tr><th>Callback funkce</th><th>Význam</th></tr>
<tr><td>load()</td><td>callback funkce zavolaná při inicializaci aplikace</td></tr>
<tr><td>draw()</td><td>callback funkce volaná průběžně ve chvíli, kdy je zapotřebí překreslit okno se hrou</td></tr>
<tr><td>keypressed(key)</td><td>callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu</td></tr>
</table>

*** image ***
<p><i>Obrázek 5: Obrázek představující raketku (hráče). Jedná se o rastrový
obrázek uložený ve formátu GIF, jehož jedna barva je průhledná, takže se ve
skutečnosti na pozadí hry nevykreslí obdélník, ale pouze ty pixely, které
skutečně tvoří tělo rakety. Malý kvíz: uhodne někdo, z&nbsp;které (velmi staré)
hry tento obrázek pochází?</i></p>

<p>Zdrojový kód callback funkce <strong>load()</strong> byl již uveden
v&nbsp;předchozí kapitole, tělo funkce <strong>draw()</strong> je dynamicky
měněno při přepínání jednotlivých režimů hry (viz další kapitoly) a callback
funkce <strong>keypressed(key)</strong> je velmi jednoduchá, protože se
v&nbsp;ní pouze testuje, zda je stlačena klávesa <strong>[Esc]</strong>.
Vzhledem k&nbsp;tomu, že se tato callback funkce volá nezávisle na zrovna
aktivním režimu hry, lze klávesou <strong>[Esc]</strong> hru ukončit takřka
v&nbsp;kterémkoli okamžiku:</p>

<pre>
<i>-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu</i>
<strong>function</strong> keypressed(key)
    <strong>if</strong> key == love.key_escape <strong>then</strong>
        love.system.exit()
    <strong>end</strong>
<strong>end</strong>
</pre>



<p><a name="k06"></a></p>
<h2>6. Režimy hry a způsob jejich přepínání</h2>

<p>Jedním ze zajímavých konceptů, který je ve hře použit, je způsob přepínání
jednotlivých režimů hry (úvodní obrazovka, vlastní hra, detonace na konci hry).
Celé řízení hry je provedeno v&nbsp;callback funkci <strong>draw()</strong>,
která je volána v&nbsp;relativně pravidelných intervalech, takže není nutné
využívat časovač. Mohlo by se zdát, že &ndash; vzhledem k&nbsp;tomu, že se
v&nbsp;každém režimu ve scéně zobrazují jiné objekty &ndash; je nutné ve funkci
<strong>draw()</strong> použít nějakou formu rozhodovací struktury typu
<i>if-elseif-else</i> popř.&nbsp;<i>switch-case</i> řízené na základě globální
proměnné či proměnné uložení v&nbsp;uzávěru (<i>closure</i>). Ve skutečnosti to
však není nutné, protože tělo callback funkce <strong>draw()</strong> lze
dynamicky měnit za běhu aplikace. Podívejme se nyní, jakým způsobem je
provedeno přepnutí mezi prvním a druhým režimem, tj.&nbsp;mezi úvodní
obrazovkou a vlastní hrou. Již víme, že v&nbsp;callback funkci
<strong>load()</strong> se na závěr načte a spustí úvodní melodie.
V&nbsp;pravidelně volané callback funkci <strong>draw()</strong> se posléze
provádí test, zda je melodie stále přehrávána a ve chvíli, kdy se dojde
k&nbsp;jejímu konci, je tělo funkce <strong>draw()</strong> přepsáno, takže
příští událost volaná před překreslením okna je zpracovávána již jiným
programovým kódem (z&nbsp;funkce <strong>draw()</strong> je přímo volána funkce
<strong>drawGame()</strong>):</p>

<pre>
<i>-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí překreslit okno</i>
draw = <strong>function</strong>()
    drawBeginning()
<strong>end</strong>

<i>-- první režim hry - pouze se přehrává melodie a zobrazuje se hrací pole</i>
<strong>function</strong> drawBeginning()
    drawScene()
    <i>-- čekání na konec přehrání úvodní melodie</i>
    <strong>if</strong> not love.audio.isPlaying() <strong>then</strong>
        <i>-- změna režimu hry - bude se volat jiná překreslovací funkce</i>
        draw = <strong>function</strong>()
            drawGame()
        <strong>end</strong>
    <strong>end</strong>
    love.graphics.setColor(0, 255, 255)
    love.graphics.setFont(font2)
    love.graphics.draw("Prepare...", 50, window.height/2-50)
    <i>-- čekání před vykreslením dalšího snímku</i>
    love.timer.sleep(sleepInMs)
<strong>end</strong>
</pre>

*** image ***
<p><i>Obrázek 6: Obrázek představující protihráče. Opět se jedná o rastrový
obrázek s&nbsp;průhledným pozadím.</i></p>



<p><a name="k07"></a></p>
<h2>7. Výpočet trajektorie hráče</h2>

<p>Trajektorie rakety (hráče) je počítána na základě její aktuální rychlosti a
stavu kláves <strong>[Šipka doprava]</strong>, <strong>[Šipka doleva]</strong>
a <strong>[Šipka nahoru]</strong>. Pomocí těchto kláves, jejichž stav se
zjišťuje přímo v&nbsp;callback funkci <strong>draw()</strong>, lze raketou
natáčet doprava a doleva (úhel natočení je uložen v&nbsp;atributu
<i>rocket.rotation</i>) a zapnout její motory, kterými se zvyšuje její
rychlost. Ta je pro jednoduchost reprezentována pouze skalární hodnotou
<i>rocket.v</i> a nikoli vektorem, což mj.&nbsp;znamená, že se raketa vždy
pohybuje ve směru jejího natočení, na rozdíl od her typu <i>Asteroids!</i>, kde
se bere do úvahy i setrvačnost (úprava pro výpočet setrvačnosti je jednoduchá,
ovšem ovládání hry by se ztížilo). Rychlost rakety lze zvýšit klávesou
<strong>[Šipka nahoru]</strong>, ovšem navíc je rychlost v&nbsp;každém snímku
snižována o hodnotu <i>rocket.dampingFactor</i>. Pokud je tato konstanta
nastavena na jedničku, bude se raketa pohybovat v&nbsp;prostředí, které neklade
žádný odpor (viz již zmiňovaná hra <i>Asteroids!</i>), hodnota menší než jedna
naopak vede k&nbsp;tomu, že je raketa neustále brzděna, což mj.&nbsp;omezuje
(bez nutnosti použití explicitní podmínky v&nbsp;programu) i její maximální
rychlost, která může dosáhnout hodnoty vypočtené podle vztahu:<br />
<i>v<sub>max</sub>=(rocket.acceleration &times; rocket.dampingFactor) / (1 - rocket.dampingFactor)</i>
</p>

<p>Pro představu, jak celá trajektorie rakety může vypadat, je možné původní
programový kód hry nahradit následujícím skriptem. V&nbsp;něm se na základě
stlačených kláves (kurzorových šipek) mění orientace i poloha rakety, přičemž
se do pomocného asociativního pole nazvaného <strong>rockets</strong> ukládají
i všechny předchozí souřadnice rakety v&nbsp;ploše, které jsou následně
vykresleny v&nbsp;callback funkci <strong>draw()</strong>.</p>

*** image ***
<p><i>Obrázek 7: Trajektorie hráče vypočtená na základě postupného natáčení
rakety a zapínání či vypínání jejích motorů. Čím pomaleji se raketa pohybuje,
tím menší prostor zůstává mezi jednotlivými obrázky (sprity). Pomalejší pohyb
taktéž umožňuje zatáčet v&nbsp;oblouku s&nbsp;menším poloměrem než při
rychlosti větší.</i></p>

<pre>
<i>-----------------------------------------------------------------------</i>
<i>-- Seriál "Programovací jazyk Lua"</i>
<i>--</i>
<i>-- Zobrazení trajektorie rakety</i>
<i>-----------------------------------------------------------------------</i>

<i>-- časový interval mezi jednotlivými snímky</i>
sleepInMs = 50

<i>-- velikost okna</i>
window = {
    width = 800,
    height = 600
}

<i>-- objekt představující hráče - raketu</i>
rocket = {
    x = window.width/2,
    y = window.height/2,
    v = 0,
    rotation = 0,
    deltaAlfa = 8,
    acceleration = 1.5,
    dampingFactor = 0.95
}

<i>-- pole pro úschovu pozice a natočení rakety v minulosti</i>
rockets = {}

<i>-- callback funkce zavolaná při inicializaci aplikace</i>
<strong>function</strong> load()
    <i>-- načíst fonty</i>
    font1 = love.graphics.newFont("DejaVuLGCSansMono.ttf", 20)
    <i>-- nastavit grafický režim</i>
    love.graphics.setMode(window.width, window.height, false, false, 0)
    <i>-- načíst všechny obrázky</i>
    background = love.graphics.newImage("tile-space.jpg")
    rocket.image = love.graphics.newImage("rocket.gif")
<strong>end</strong>

<i>-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí překreslit okno</i>
draw = <strong>function</strong>()
    <i>-- posun hráče</i>
    moveRocket()
    <i>-- vykreslení celé scény</i>
    drawScene()
    <i>-- čekání před vykreslením dalšího snímku</i>
    love.timer.sleep(sleepInMs)
<strong>end</strong>

<i>-- vykreslení scény ve druhém režimu</i>
<strong>function</strong> drawScene()
    drawBackground()
    drawRocket()
    drawInfo()
<strong>end</strong>

<i>-- výpis informací v dolní části okna</i>
<strong>function</strong> drawInfo()
    love.graphics.setFont(font1)
    love.graphics.setColor(255, 200, 255)
    love.graphics.draw("" .. #rockets, 10, window.height-30)
<strong>end</strong>

<i>-- vykreslení hracího pole - několik na sebe navazujících dlaždic</i>
<strong>function</strong> drawBackground()
    <strong>local</strong> y = 0;
    <strong>while</strong> y &lt;= window.height <strong>do</strong>
        <strong>local</strong> x = 0
        <strong>while</strong> x &lt;= window.width <strong>do</strong>
            love.graphics.draw(background, x, y)
            x = x + background:getWidth()
        <strong>end</strong>
        y = y + background:getHeight()
    <strong>end</strong>
<strong>end</strong>

<i>-- vykreslení rakety i celé její trajektorie</i>
<strong>function</strong> drawRocket()
    <strong>local</strong> x = rocket.x
    <strong>local</strong> y = rocket.y
    <strong>for</strong> i=1, #rockets <strong>do</strong>
        <strong>local</strong> x = rockets[i].x
        <strong>local</strong> y = rockets[i].y
        <strong>local</strong> rotation = rockets[i].rotation
        love.graphics.draw(rocket.image, x, y, rockets[i].rotation)
    <strong>end</strong>
<strong>end</strong>

<i>-- posun rakety a její natočení na základě kláves</i>
<i>-- [Left], [Right] a [Up]</i>
<strong>function</strong> moveRocket()
    <strong>if</strong> love.keyboard.isDown(love.key_left) <strong>then</strong>
        rocket.rotation = rocket.rotation - rocket.deltaAlfa
    <strong>end</strong>
    <strong>if</strong> love.keyboard.isDown(love.key_right) <strong>then</strong>
        rocket.rotation = rocket.rotation + rocket.deltaAlfa
    <strong>end</strong>
    <strong>if</strong> love.keyboard.isDown(love.key_up) <strong>then</strong>
        rocket.v = rocket.v + rocket.acceleration
    <strong>end</strong>
    <i>-- posun rakety na základě její rychlosti a natočení</i>
    rocket.x = rocket.x + rocket.v * math.sin(math.rad(rocket.rotation))
    rocket.y = rocket.y - rocket.v * math.cos(math.rad(rocket.rotation))
    rocket.v = rocket.v * rocket.dampingFactor
    <i>-- v případě opuštění hracího pole se raketa ukáže na protější straně</i>
    <strong>if</strong> rocket.x &lt; 0 <strong>then</strong>
        rocket.x = window.width
    <strong>end</strong>
    <strong>if</strong> rocket.x &gt; window.width <strong>then</strong>
        rocket.x = 0
    <strong>end</strong>
    <strong>if</strong> rocket.y &lt; 0 <strong>then</strong>
        rocket.y = window.height
    <strong>end</strong>
    <strong>if</strong> rocket.y &gt; window.height <strong>then</strong>
        rocket.y = 0
    <strong>end</strong>
    <i>-- zapamatovat si pozici rakety i její natočení</i>
    <i>-- (užitečný idiom, jak se k asociativnímu poli chovat jako k seznamu)</i>
    rockets[#rockets + 1] = {
        x = rocket.x,
        y = rocket.y,
        rotation = rocket.rotation
    }
<strong>end</strong>

<i>-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu</i>
<strong>function</strong> keypressed(key)
    <strong>if</strong> key == love.key_escape <strong>then</strong>
        love.system.exit()
    <strong>end</strong>
<strong>end</strong>

<i>-- finito</i>
</pre>



<p><a name="k08"></a></p>
<h2>8. Pohyb protihráčů a detekce kolizí</h2>

<p>Výpočet pohybu protihráčů je do značné míry zjednodušen. Protihráči se vždy
pohybují ve směru rakety, ovšem každý s&nbsp;jinou rychlostí. Maximální
horizontální a vertikální rychlost je omezena konstantou
<strong>stars.maxVelocity</strong>, což mj.&nbsp;znamená, že se protihráči
nejrychleji pohybují po úhlopříčce &ndash; tuto znalost lze využít ke snazšímu
úniku před nimi. Maximální rychlost rakety je však vyšší než rychlost
protihráčů, pokud samozřejmě nedojde ke změně konstant
<strong>stars.maxVelocity</strong>, <strong>rocket.dampingFactor</strong> či
<strong>rocket.acceleration</strong>. V&nbsp;programovém kódu pro výpočet
pohybu protihráčů se nachází i detekce kolize protihráče s&nbsp;raketou. Její
výpočet je taktéž zjednodušen, protože se pouze testuje, zda se protihráč
(přesněji jeho střed) nenachází v&nbsp;obdélníku o velikosti bitmapy rakety,
tj.&nbsp;44&times;34 pixelů. Jednu z&nbsp;možných úprav, které vedou ke
zpřesnění tohoto výpočtu, si ukážeme v&nbsp;navazující části tohoto seriálu.
Následuje výpis části kódu, který se stará o výpočet trajektorie protivníků i
detekci kolize (povšimněte si, že pokud dojde ke kolizi, tak se hra ve funkci
<strong>processColission()</strong> přepne do třetího režimu):</p>

<pre>
<i>-- posun všech protivníků směrem ke hráči</i>
<strong>function</strong> moveStars()
    <strong>for</strong> i = 1, stars.count <strong>do</strong>
        moveStar(stars[i])
    <strong>end</strong>
<strong>end</strong>

<i>-- posun jednoho protivníka směrem ke hráči</i>
<strong>function</strong> moveStar(star)
    <strong>local</strong> vx, vy
    vx = rocket.x - star.x
    vy = rocket.y - star.y
    <i>-- zamezit příliš rychlému pohybu</i>
    vx = math.max(math.min(vx, stars.maxVelocity), -stars.maxVelocity)
    vy = math.max(math.min(vy, stars.maxVelocity), -stars.maxVelocity)
    <i>-- vlastní posun o vypočtený vektor</i>
    star.x = star.x + vx / star.damping
    star.y = star.y + vy / star.damping
    <i>-- zjistit, zda nastala kolize</i>
    <strong>if</strong> isCollision(star) <strong>then</strong>
        processColission()
        return
    <strong>end</strong>
<strong>end</strong>

<i>-- funkce vrátí true v případě, že dojde ke kolizi rakety s protivníkem</i>
<strong>function</strong> isCollision(star)
    return math.abs(star.x - rocket.x) &lt; rocket.image:getWidth()/2
       and math.abs(star.y - rocket.y) &lt; rocket.image:getHeight()/2
<strong>end</strong>

<i>-- pokud nastane kolize, změní se mód hry - bude se volat rutina drawExplosion()</i>
<strong>function</strong> processColission()
    love.audio.play(crashSound2)
    <i>-- změna překreslovací rutiny</i>
    draw = <strong>function</strong>()
        drawExplosion()
    <strong>end</strong>
    <i>-- inicializace objektů představujících rozbitou raketu</i>
    <strong>for</strong> i = 1, redBalls.count <strong>do</strong>
        redBalls[i]= {
            x=rocket.x,
            y=rocket.y,
            vx=redBalls.velocity * math.cos(i * 2 * math.pi / redBalls.count),
            vy=redBalls.velocity * math.sin(i * 2 * math.pi / redBalls.count)
        }
    <strong>end</strong>
<strong>end</strong>

</pre>



<p><a name="k09"></a></p>
<h2>9. Závěrečná animace a ukončení hry</h2>

<p>Poslední režim hry je představovaný závěrečnou animací detonace a slavným
nápisem &bdquo;Game over&ldquo;. Prozatím jsme si nepopsali, jakým způsobem lze
v&nbsp;systému <i>LOVE</i> využít částicové systémy, proto je detonace rakety
velmi primitivní &ndash; z&nbsp;místa kolize rakety a protihráče se rozlétnou
červené balonky (další z&nbsp;požadavků syna :-) a současně se přehraje zvuk
výbuchu. Počet snímků, které závěrečná animace obsahuje, je omezen konstantou
<strong>redBalls.numberOfFrames</strong>, přičemž po zobrazení těchto snímků
hra pouze zobrazuje pozadí s&nbsp;nápisem &bdquo;Game over&ldquo; a čeká na
stisk klávesy <strong>[Esc]</strong>.</p>

<pre>
<i>-- třetí režim hry - výbuch s nápisem "Game over"</i>
<strong>function</strong> drawExplosion()
    drawBackground()
    <i>-- čekání na konec animace výbuchu, potom ukončení hry</i>
    redBalls.numberOfFrames = redBalls.numberOfFrames - 1
    <strong>if</strong> redBalls.numberOfFrames &gt; 0 <strong>then</strong>
        <i>-- posun úlomků rakety</i>
        <strong>for</strong> i = 1, redBalls.count <strong>do</strong>
            redBalls[i].x=redBalls[i].x+redBalls[i].vx
            redBalls[i].y=redBalls[i].y+redBalls[i].vy
            love.graphics.draw(redBalls.image, redBalls[i].x, redBalls[i].y)
        <strong>end</strong>
    <strong>end</strong>
    <i>-- výpis "Game over"</i>
    love.graphics.setFont(font2)
    love.graphics.setColor(255, 0, 255)
    love.graphics.draw("Game over", 50, window.height/2)
    <i>-- čekání před vykreslením dalšího snímku</i>
    love.timer.sleep(sleepInMs)
<strong>end</strong>
</pre>

*** image ***
<p><i>Obrázek 8: Obrázek s&nbsp;průhledným pozadím, který je použitý pro napodobení detonace raketky.</i></p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

