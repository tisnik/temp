<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>ULua: univerzální distribuce programovacího jazyka Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>ULua: univerzální distribuce programovacího jazyka Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. ULua: univerzální distribuce programovacího jazyka Lua</a></p>
<p><a href="#k02">2. Lua ve funkci univerzálního vestavitelného skriptovacího jazyka</a></p>
<p><a href="#k03">3. Projekt ULua se představuje</a></p>
<p><a href="#k04">4. Instalace nástroje ULua</a></p>
<p><a href="#k05">5. Spuštění interpretru LuaJIT poskytovaného nástrojem ULua</a></p>
<p><a href="#k06">6. Správce balíčků <strong>upkg</strong></a></p>
<p><a href="#k07">7. Výpis dostupných balíčků, které lze nainstalovat</a></p>
<p><a href="#k08">8. Ukázka instalace knihovny <strong>moses</strong></a></p>
<p><a href="#k09">9. Otestování nainstalované knihovny <strong>moses</strong></a></p>
<p><a href="#k10">10. Ukázka instalace knihovny <strong>deque</strong></a></p>
<p><a href="#k11">11. Otestování nainstalované knihovny <strong>deque</strong></a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. Spustitelné soubory nainstalované v&nbsp;rámci instalace balíčku</a></p>
<p><a href="#k14">14. Zobrazení stavu ekosystému Lua spravovaného nástrojem ULua</a></p>
<p><a href="#k15">*** 15. Povýšení balíčků na poslední dostupnou verzi</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Články a seriály o jazyku Lua a souvisejících technologiích na Rootu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. ULua: univerzální distribuce programovacího jazyka Lua</h2>

<p>S&nbsp;programovacím jazykem <i>Lua</i> jsme se již na stránkách tohoto
serveru setkali, a to dokonce již mnohokrát. Většina článků o tomto jazyku je
shrnuta do seriálu <a
href="https://www.root.cz/serialy/programovaci-jazyk-lua/">Programovací jazyk
Lua</a> a taktéž jsme se Luou zabývali ve druhém seriálu nazvaném <a
href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">Torch:
framework pro strojové učení</a>. Víme již, že se tento programovací jazyk stal
oblíbený například mezi tvůrci her, v&nbsp;nichž je použit pro skriptování. To
ovšem není zdaleka vše, protože Lua je použita například v&nbsp;systému
<i>LuaTeX</i>, v&nbsp;databázi <i>Redis</i>, ve webovém serveru <i>Nginx</i> a
v&nbsp;neposlední řadě i v&nbsp;textovém editoru <i>Neovim</i>. Jednoduše
použitelná syntaxe a současně i poměrně velká vyjadřovací schopnost jazyka Lua
by však pravděpodobně nedostačovala pro jeho masovější rozšíření, a to zejména
v&nbsp;situaci, kdy tuto niku programovacích jazyků do značné míry okupuje
Python, kterému se již úspěšně podařilo &bdquo;odstavit&ldquo; některé
konkurenty.</p>

<p>Hlavním důvodem, proč jsou některé hry, například <i>Escape from Monkey
Island</i>, <i>Grim Fandango</i>, <i>Fish Fillets</i>, <i>Neverwinter
Nights</i> či <i>MDK2</i> z&nbsp;menší či větší části naprogramované právě
v&nbsp;jazyku Lua, spočívá v&nbsp;tom, že kombinace nízkoúrovňového a
skriptovacího jazyka umožňuje soustředit se při vývoji na podstatné věci
&ndash; herní engine vytvořit co nejefektivnější s&nbsp;využitím všech možností
nízkoúrovňového jazyka a naopak herní scénář a logiku hry naskriptovat
s&nbsp;co největším urychlením cyklu oprava–překlad–spuštění. V&nbsp;mnoha
případech se také využívá další užitečné vlastnosti jazyka Lua &ndash; celý
překladač i interpret vygenerovaného bajtkódu (popř.&nbsp;pouze interpret) je
možné velmi snadno zabudovat do jiné aplikace, přičemž se výsledná velikost
spustitelného souboru této aplikace zvětší o cca 70 kB (popř.&nbsp;lze volat
dynamickou knihovnu o řádově stejné velikosti), což není mnoho, když si
uvědomíme, že dostáváme k&nbsp;dispozici plnohodnotný vysokoúrovňový
programovací jazyk (ostatně Lua se díky své malé velikosti používá i pro pouhé
zpracování konfiguračních souborů, které díky tomu mohou obsahovat různé
konstanty, výrazy atd.).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Lua ve funkci univerzálního vestavitelného skriptovacího jazyka</h2>

<p>Mnozí programátoři, mezi jinými i John Walker (jeden z&nbsp;vývojářů
AutoCADu) se netají tím, že právě zabudování programovacího (skriptovacího)
jazyka do jejich aplikací mělo velký význam pro jejich úspěch, protože to
umožnilo mnoha dalším vývojářům rozšiřovat funkčnost původní aplikace a tím
zvýšit její atraktivitu pro uživatele (a to bez jakékoli snahy či finanční
pomoci od tvůrců původní rozšiřitelné aplikace).</p>

<p><div class="rs-tip-major">Poznámka: původním skriptovacím jazykem AutoCADu
byl AutoLISP.</div></p>

<p>Lua se skutečně, a nejedná se zdaleka pouze o hry, velmi často používá jako
vestavěný skriptovací jazyk, takže jeho uživatelé jsou zvyklí na určitou formu
minimalismu (pokud bychom totiž měli Luu charakterizovat třemi slovy, zněla by
takto: &bdquo;minimalistický vysokoúrovňový jazyk&ldquo;). Ovšem důraz na
minimalistické pojetí jak samotného jazyka, tak i jeho ekosystému je dvojsečná
zbraň. Zejména se to týká právě zmíněného ekosystému, který stále není tak
dotažený, jako například ekosystém (částečně) konkurenčního Pythonu. Existuje
sice nástroj pro správu balíčků <strong>LuaRocks</strong>, ovšem ne všechny
knihovny pro Luu ho využívají a navíc zabalení tak velkých projektů, jako je
výše zmíněný <i>Torch</i> či <i>Sci-lua</i>, je problematické, protože většinou
vyžaduje i použití LuaJITu namísto standardního interpretru Luy. Existuje větší
množství projektů, které se snaží o vylepšení tohoto stavu. Jeden
z&nbsp;nejdotaženějších projektů se nazývá <i>ULua</i> neboli
&bdquo;Univerzální distribuce jazyka Lua&ldquo;. A právě tímto projektem se
budeme zabývat v&nbsp;navazujících kapitolách.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Projekt ULua se představuje</h2>

<p>Projekt <i>ULua</i> v&nbsp;první řadě obsahuje <i>LuaJIT</i>. Již
z&nbsp;názvu tohoto nástroje je zřejmé, že se jedná o takzvaný <i>Just in
Time</i> překladač, který je možné použít společně s&nbsp;programovacím jazykem
Lua. Překlad do nativního kódu je tedy prováděn při běhu aplikace, a to na
základě dynamické analýzy chování za běhu &ndash; jen tak je totiž možné
zjistit, které cesty v&nbsp;programu se mají přeložit do nativního kódu bez
nutnosti použití podmíněných skoků, odvodit skutečně použité datové typy atd.
LuaJIT je z&nbsp;velké části dílem jediného programátora, který se jmenuje
<i>Mike Pall</i>. To je velmi zajímavá skutečnost, zvláště když si uvědomíme,
že LuaJIT je v&nbsp;současné verzi velmi kvalitní produkt podporující větší
množství procesorových architektur (na tomto místě je pro porovnání důležité se
zmínit o tom, jak dlouho trvalo, než byl JIT pro JVM adaptován například pro
procesory ARM či ARM64; u dalších architektur jsme stále odkázáni na Zero a
Shark). Přechod na LuaJIT je pro běžného programátora triviální.</p>

<p>Ovšem součástí projektu <i>ULua</i> je i správce balíčků nazvaný
<strong>upkg</strong>. Tento správce balíčků dokáže nainstalovat jeden
z&nbsp;300 v&nbsp;současnosti podporovaných balíčků a to včetně závislých
nativních knihoven (a spousta balíčků pro jazyk Lua má i svoji nativní
část).</p>

<p><div class="rs-tip-major">Poznámka: 300 balíčků sice zní jako malé číslo,
zvláště v&nbsp;porovnání s&nbsp;Pypi, které se chlubí 320
<strong>tisíci</strong> balíčky. Skutečně se jedná o malé číslo, ovšem většina
z&nbsp;oněch 300 balíčků je poměrně pečlivě vybrána a neobsahuje různé
&bdquo;školní&ldquo; projekty nebo výsledky pokusu vývojářů o použití Pypi.
Mezi oněmi třemi stovkami balíčků nalezneme i <strong>sci</strong> a
<strong>sci-lang</strong>, kterými se budeme zabývat v&nbsp;samostatném
článku.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace nástroje ULua</h2>

<p>Průběh instalace nástroje <i>ULua</i> si ukážeme na systému s&nbsp;Fedorou
34, i když ve skutečnosti bude instalace prakticky totožná i na dalších
distribucích Linuxu:</p>

<pre>
$ <strong>cat /etc/redhat-release</strong>
&nbsp;
Fedora release 34 (Thirty Four)
</pre>

<p><div class="rs-tip-major">Poznámka: instalace se provede nezávisle na tom,
zda již v&nbsp;systému máte přítomen interpret jazyka Lua či nikoli.</div></p>

<p>Nejprve je nutné stáhnout Zip archiv obsahující kostru nástroje <i>ULua</i>
nezávislou na použitém operačním systému (lze ho tedy použít i například na
Windows atd.):</p>

<pre>
$ <strong>wget https://ulua.io/download/ulua~latest.zip</strong>
&nbsp;
--2021-09-23 08:43:52--  https://ulua.io/download/ulua~latest.zip
Resolving ulua.io (ulua.io)... 2606:4700:3032::6815:2d44, 2606:4700:3030::ac43:d2c0, 104.21.45.68, ...
Connecting to ulua.io (ulua.io)|2606:4700:3032::6815:2d44|:443... failed: No route to host.
Connecting to ulua.io (ulua.io)|2606:4700:3030::ac43:d2c0|:443... failed: No route to host.
Connecting to ulua.io (ulua.io)|104.21.45.68|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 6868561 (6.5M) [application/zip]
Saving to: ‘ulua~latest.zip’
&nbsp;
ulua~latest.zip                         100%[==============================================================================&gt;]   6.55M  --.-KB/s    in 0.08s
&nbsp;
2021-09-23 08:43:53 (84.2 MB/s) - ‘ulua~latest.zip’ saved [6868561/6868561]
</pre>

<p>Ve druhém kroku pochopitelně Zip archiv rozbalíme:</p>

<pre>
$ <strong>unzip ulua~latest.zip</strong>
&nbsp;
Archive:  ulua~latest.zip
   creating: ulua/
   creating: ulua/bin/
&nbsp;
&nbsp;
&nbsp;
  inflating: ulua/serpent/0_28+103/__t/bench.lua
  inflating: ulua/serpent/0_28+103/__t/test.lua
  inflating: ulua/serpent/0_28+103/init.lua
</pre>

<p>Po rozbalení by měl vzniknout adresář nazvaný <strong>ulua</strong>, do
kterého se přesuneme:</p>

<pre>
$ <strong>cd ulua</strong>
</pre>

<p>Struktura tohoto adresáře ihned po instalaci by měla vypadat následovně:</p>

<pre>
$ <strong>tree -d -L 3</strong>
&nbsp;
.
└── ulua
    ├── bin
    ├── clib_libcurl
    │   └── 7_42_1+3
    ├── cURL
    │   └── 0_3_1+103
    ├── host
    │   ├── init
    │   ├── pkg
    │   └── tmp
    ├── lcurl
    │   └── 0_3_1+103
    ├── lfs
    │   └── 1_6_3+203
    ├── luajit
    │   └── 2_1_head20151128
    ├── pkg
    │   └── 1_0_beta10
    └── serpent
        └── 0_28+103
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Spuštění interpretru LuaJIT poskytovaného nástrojem ULua</h2>

<p>Přímo v&nbsp;adresáři <strong>ulua</strong> nalezneme interpret
programovacího jazyka Lua. Ovšem ve skutečnosti se nejedná o standardní
(původní) interpret, ale o <i>LuaJIT</i> zmíněný v&nbsp;úvodních kapitolách (i
když jméno spustitelného souboru s&nbsp;interpretrem je stále
<strong>lua</strong>). Před spuštěním <i>LuaJITu</i> je nutné zvolit použitou
architekturu, resp.&nbsp;na platformě x86/x86-64 zvolit, zda se má použít
32bitová varianta nebo varianta 64bitová. Volba se provede přes proměnnou
prostředí nazvanou <strong>BIT</strong>, tedy následujícím způsobem:</p>

<pre>
$ <strong>export BIT=64</strong>
</pre>

<p>Nyní je již možné interpret spustit a začít používat:</p>

<pre>
$ <strong>./lua</strong>
&nbsp;
LuaJIT 2.1.0-beta1 -- Copyright (C) 2005-2015 Mike Pall. http://luajit.org/
JIT: ON SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse
&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: mnohem častěji se pochopitelně setkáme
s&nbsp;tím, že se interpretru předá název souboru se skriptem, který se má
spustit (interpretovat).</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Správce balíčků <strong>upkg</strong></h2>

<p>Dalším důležitým spustitelným souborem, který je součástí projektu
<i>ULua</i>, je správce balíčků nazvaný <i>Universal Lua package manager</i>
neboli zkráceně <strong>upkg</strong>. Ten se ovšem nenachází přímo
v&nbsp;adresáři <strong>ulua</strong> ale v&nbsp;podadresáři
<strong>ulua/bin</strong>. Přesuneme se tedy do tohoto podadresáře:</p>

<pre>
$ <strong>cd bin</strong>
&nbsp;
$ <strong>pwd</strong>
/home/tester/ulua/bin
</pre>

<p>Nyní je možné tohoto správce balíčků spustit:</p>

<pre>
$ <strong>./upkg</strong>
&nbsp;
Universal Lua package manager. Usage:
upkg command [-s] [name] [version]
  command : one of "status", "available", "add", "remove", "update"
  -s      : enable searching (only for "status" and "available" commands)
  name    : module name
  version : module version
</pre>

<p>Vidíme, že jsou podporovány základní příkazy pro manipulaci s&nbsp;balíčky,
tedy <strong>add</strong>, <strong>remove</strong> i <strong>update</strong>.
Kromě toho je možné zobrazit seznam dostupných balíčků příkazem
<strong>available</strong>, popř.&nbsp;si nechat zobrazit aktuální stav
nainstalovaných balíčků příkazem <strong>status</strong>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výpis dostupných balíčků, které lze nainstalovat</h2>

<p>Víme již, že systém <i>ULua</i> v&nbsp;současnosti oficiálně podporuje
přibližně tři sta balíčků. Tyto balíčky (a jejich verze, typicky sémantické
verze) lze zobrazit následujícím příkazem:</p>

<pre>
$ <strong>./upkg available</strong>
</pre>

<p>Výsledek je v&nbsp;textu článku zkrácen:</p>

<pre>
Available modules:
+ 30log                     | 30log : 30 lines library for object orientation                                  | 1.3.0-103, 1.0.0-103, 0.9.1-103
+ 30log-clean               | 30log : 30 lines library for object orientation                                  | 1.3.0-103
+ 30log-commons             | 30log : 30 lines library for object orientation                                  | 1.3.0-103
+ 30log-global              | 30log : 30 lines library for object orientation                                  | 1.3.0-103
+ 30log-singleton           | 30log : 30 lines library for object orientation                                  | 1.3.0-103
+ 30logclean                | 30log : 30 lines library for object orientation                                  | 1.0.0-103, 0.9.1-103
+ 30logglobal               | 30log : 30 lines library for object orientation                                  | 1.0.0-103, 0.9.1-103
+ AesFileEncrypt            | aesfileencrypt : A simple file encryption library                                | 0.1.3-103
...
...
...
+ xml                       | xml : Very fast xml parser based on RapidXML                                     | 1.1.3-103
+ xml2lua                   | xml2lua : An XML Parser written entirely in Lua that works for Lua 5.1 to 5.3    | 1.2-403, 1.2-203, 1.0-103, 1.0-3
+ xmlhandler                | xml2lua : An XML Parser written entirely in Lua that works for Lua 5.1 to 5.3    | 1.2-403, 1.2-203, 1.0-103, 1.0-3
+ xssfilter                 | xssfilter : A filter to prevernt cross-site scripting (XSS) attacks              | 10.12.28-103
+ xsys                      | extended Lua system                                                              | 1.0.2
+ xxtea                     | xxtea : XXTEA for Lua.                                                           | 1.0.1-103, 1.0.0-103
+ yaml                      | yaml : Very fast yaml parser based on libYAML by Kirill Simonov                  | 1.1.2-103
+ zmq                       | lzmq-zmq : Wrapper around lzmq library to be compatiable with lua-zmq library    | 0.1.0-103
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Ukázka instalace knihovny <strong>moses</strong></h2>

<p>Ukažme si nyní způsob instalace knihovny <strong>moses</strong>, s&nbsp;níž
jsme se již na stránkách Roota setkali ve dvojici článků (viz též <a
href="#k19">devatenáctou kapitolu</a>). Nejprve se přesvědčíme, že je tato
knihovna dostupná ve formě balíčku spravovaného nástrojem <i>ULua</i>:</p>

<pre>
$ <strong>./upkg available |grep moses</strong>
&nbsp;
+ moses                     | moses : Utility-belt library for functional programming in Lua                   | 2.1.0-103, 1.6.1-103, 1.4.0-103
+ moses_min                 | moses : Utility-belt library for functional programming in Lua                   | 2.1.0-103, 1.6.1-103, 1.4.0-103
</pre>

<p>Samotná instalace proběhne prakticky okamžitě po zadání následujícího
příkazu:</p>

<pre>
$ <strong>./upkg add moses</strong>
&nbsp;
Installing matching module and its requirements:
+ moses     | moses : Utility-belt library for functional programming in Lua | 2.1.0-103
+ moses_min | moses : Utility-belt library for functional programming in Lua | 2.1.0-103
Confirm (y/n)? <strong>y</strong>
Downloading:
+ /pkg/moses_min/2.1.0-103 | 100% of 93KB
+ /pkg/moses/2.1.0-103     | 100% of 101KB
Done
</pre>

<p>Nyní by se měla struktura adresáře <strong>ulua</strong> změnit, protože do
něho byly přidány dva podadresáře, které jsou v&nbsp;následujícím výpisu
zvýrazněny:</p>

<pre>
$ <strong>tree -d -L 3</strong>
&nbsp;
.
└── ulua
    ├── bin
    ├── clib_libcurl
    │   └── 7_42_1+3
    ├── cURL
    │   └── 0_3_1+103
    ├── host
    │   ├── init
    │   ├── pkg
    │   └── tmp
    ├── lcurl
    │   └── 0_3_1+103
    ├── lfs
    │   └── 1_6_3+203
    ├── luajit
    │   └── 2_1_head20151128
    ├── <strong>moses</strong>
    │   └── <strong>2_1_0+103</strong>
    ├── <strong>moses_min</strong>
    │   └── <strong>2_1_0+103</strong>
    ├── pkg
    │   └── 1_0_beta10
    └── serpent
        └── 0_28+103
&nbsp;
24 directories
</pre>

<p><div class="rs-tip-major">Poznámka: nyní již dává struktura adresáře
<strong>ulua</strong> větší smysl &ndash; kromě interpretru <i>LuaJIT</i> a
speciálního podadresáře <strong>bin</strong> obsahuje další podadresáře,
z&nbsp;nichž každý obsahuje určitou verzi balíčku určeného pro jazyk Lua. Tyto
podadresáře jsou kompletně spravovány nástrojem
<strong>upkg</strong>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Otestování nainstalované knihovny <strong>moses</strong></h2>

<p>Nyní si můžeme vytvořit jednoduchý skript, na němž si ověříme, zda byla
knihovna <strong>moses</strong> skutečně nainstalována korektně. Tento skript
může vypadat následovně:</p>

<pre>
M = require "moses"
&nbsp;
&nbsp;
<i>-- tisk obsahu pole</i>
function <strong>printArray</strong>(array)
    for index, value in ipairs(array) do
        print(index, value)
    end
end
&nbsp;
&nbsp;
<i>-- oddělení obsahu</i>
function <strong>printSeparator</strong>()
    print("-------------------------------")
end
&nbsp;
&nbsp;
<i>-- prázdné pole při neuvedení rozsahu</i>
a0 = M.range()
printSeparator()
print("range()")
printArray(a0)
&nbsp;
&nbsp;
<i>-- první pole začínající standardně od jedničky</i>
a1 = M.range(10)
printSeparator()
print("range(10)")
printArray(a1)
&nbsp;
&nbsp;
<i>-- druhé pole s explicitní specifikací hodnoty prvního prvku</i>
a2 = M.range(1, 10)
printSeparator()
print("range(1, 10)")
printArray(a2)
&nbsp;
&nbsp;
<i>-- třetí pole se specifikací kroku (rozdílu mezi dvěma prvky)</i>
a3 = M.range(1, 10, 2)
printSeparator()
print("range(1, 10, 2)")
printArray(a3)
&nbsp;
&nbsp;
<i>-- čtvrté pole s prvky počítanými pozpátku</i>
a4 = M.range(10, 1)
printSeparator()
print("range(10, 1)")
printArray(a4)
&nbsp;
&nbsp;
<i>-- páté pole počítané pozpátku s kladným krokem</i>
a5 = M.range(10, 1, 2)
printSeparator()
print("range(10, 1, 2)")
printArray(a5)
&nbsp;
&nbsp;
<i>-- šesté pole počítané pozpátku se záporným krokem</i>
a6 = M.range(10, 1, -2)
printSeparator()
print("range(10, 1, -2)")
printArray(a6)
&nbsp;
&nbsp;
<i>-- sedmé pole s neceločíselným krokem</i>
a7 = M.range(1, 5, 0.5)
printSeparator()
print("range(10, 5, 0.5)")
printArray(a7)
&nbsp;
&nbsp;
<i>-- osmé pole s neceločíselným krokem a počáteční hodnotou typu double</i>
a8 = M.range(1.0, 5, 0.5)
printSeparator()
print("range(10, 5, 0.5)")
printArray(a8)
&nbsp;
&nbsp;
<i>-- deváté pole testující vliv problematické hodnoty 0.1</i>
a9 = M.range(0, 1, 0.1)
printSeparator()
print("range(0, 1, 0.1)")
printArray(a9)
&nbsp;
&nbsp;
<i>-- desáté pole s počáteční hodnotou typu double</i>
a10 = M.range(0.0, 1, 0.1)
printSeparator()
print("range(0.0, 1, 0.1)")
printArray(a9)
</pre>

<p>Skript spustíme běžným způsobem, pouze musíme použít lokální interpret
jazyka Lua:</p>

<pre>
$ <strong>ulua/lua test1.lua</strong>
</pre>

<p>Skript by se měl spustit a vypsat korektní výsledky:</p>

<pre>
-------------------------------
range()
-------------------------------
range(10)
1	1
2	2
3	3
4	4
5	5
6	6
7	7
8	8
9	9
10	10
-------------------------------
range(1, 10)
1	1
2	2
3	3
4	4
5	5
6	6
7	7
8	8
9	9
10	10
-------------------------------
range(1, 10, 2)
1	1
2	3
3	5
4	7
5	9
-------------------------------
range(10, 1)
1	10
2	9
3	8
4	7
5	6
6	5
7	4
8	3
9	2
10	1
-------------------------------
range(10, 1, 2)
1	10
-------------------------------
range(10, 1, -2)
1	10
2	8
3	6
4	4
5	2
-------------------------------
range(10, 5, 0.5)
1	1
2	1.5
3	2
4	2.5
5	3
6	3.5
7	4
8	4.5
9	5
-------------------------------
range(10, 5, 0.5)
1	1
2	1.5
3	2
4	2.5
5	3
6	3.5
7	4
8	4.5
9	5
-------------------------------
range(0, 1, 0.1)
1	0
2	0.1
3	0.2
4	0.3
5	0.4
6	0.5
7	0.6
8	0.7
9	0.8
10	0.9
11	1
-------------------------------
range(0.0, 1, 0.1)
1	0
2	0.1
3	0.2
4	0.3
5	0.4
6	0.5
7	0.6
8	0.7
9	0.8
10	0.9
11	1
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Ukázka instalace knihovny <strong>deque</strong></h2>

<p>Prakticky stejným způsobem si můžeme nainstalovat i další balíčky, například
balíček s&nbsp;knihovnou implementující obousměrnou frontu, resp.&nbsp;přesněji
řečeno frontu, do které je možné přidávat prvky jak na začátek, tak i na konec.
Balíček s&nbsp;touto knihovnou se jmenuje <strong>deque</strong>:</p>

<pre>
$ <strong>./upkg available |grep deq</strong>
&nbsp;
+ deque                     | deque : Implementation of a double-ended queue in Lua.                           | 1.0-103
</pre>

<p>Průběh instalace je totožný s&nbsp;instalací balíčku
<strong>moses</strong></p>

<pre>
$ <strong>./upkg add deque</strong>
&nbsp;
Installing matching module and its requirements:
+ deque | deque : Implementation of a double-ended queue in Lua. | 1.0-103
Confirm (y/n)? y
Downloading:
+ /pkg/deque/1.0-103 | 100% of 3KB
Done
</pre>

<p>Výsledná struktura adresáře <strong>ulua</strong>:</p>

<pre>
$ <strong>tree -d -L 3</strong>
&nbsp;
.
└── ulua
    ├── bin
    ├── clib_libcurl
    │   └── 7_42_1+3
    ├── cURL
    │   └── 0_3_1+103
    ├── <strong>deque</strong>
    │   └── <strong>1_0+103</strong>
    ├── host
    │   ├── init
    │   ├── pkg
    │   └── tmp
    ├── lcurl
    │   └── 0_3_1+103
    ├── lfs
    │   └── 1_6_3+203
    ├── luajit
    │   └── 2_1_head20151128
    ├── moses
    │   └── 2_1_0+103
    ├── moses_min
    │   └── 2_1_0+103
    ├── pkg
    │   └── 1_0_beta10
    └── serpent
        └── 0_28+103
&nbsp;
24 directories
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Otestování nainstalované knihovny <strong>deque</strong></h2>

<p>Základní funkce poskytované knihovnou <strong>deque</strong>, která je
dostupná v&nbsp;rámci balíčku se stejným jménem, otestujeme snadno tímto
skriptem, který ověří práci s&nbsp;frontou:</p>

<pre>
local deque = <strong>require "deque"</strong>
&nbsp;
local q = deque.new()
print(q)
&nbsp;
for key,value in pairs(getmetatable(q)) do
    print(key, value)
end
&nbsp;
q:pushRight("prvni")
q:pushRight("druhy")
q:pushRight("treti")
&nbsp;
print(q:popRight())
print(q:popRight())
print(q:popRight())
</pre>

<p>Výsledek po spuštění tohoto skriptu:</p>

<pre>
Deque containing 0 item(s)
iterLeft	function: 0x407f41e8
new	function: 0x407f5830
peekRight	function: 0x407f4248
iter	function: 0x407f41e8
sendLeft	function: 0x407f4288
__index	table: 0x407f2ad0
isEmpty	function: 0x407f32d0
peekLeft	function: 0x407f4228
iterRight	function: 0x407f4208
popRight	function: 0x407f41c8
pushLeft	function: 0x407f3358
popLeft	function: 0x407f4188
reverse	function: 0x407f42a8
sendRight	function: 0x407f4268
pushRight	function: 0x407f3398
__tostring	function: 0x407f2af8
clear	function: 0x407f57f8
getIndex	function: 0x407f3338
treti
druhy
prvni
</pre>

<p><div class="rs-tip-major">Poznámka: pochopitelně by bylo vhodné ověřit i
další metody objektu typu <strong>deque</strong>.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

$ <strong>./upkg available |grep sci</strong>

+ adoc_cmd_ext              | adoc_cmd_ext : A library and script to handle AsciiDoc Command language extens.. | 0.1.0-3
+ ascii85                   | lascii85 : An ASCII85 library for Lua                                            | 20120927-103
+ printable_chars           | printable_chars : Functions to get the ascii printable chars from a byte string. | 0.1-403, 0.1-203
+ sci                       | general purpose scientific computing library                                     | 1.0.beta12, 1.0.beta11, 1.0.beta10, 1.0.beta9
+ sci-lang                  | Syntax extensions to LuaJIT for scientific computing                             | 1.0.beta10

$ <strong>./upkg add sci</strong>

Installing matching module and its requirements:
+ clib_libopenblas | OpenBLAS : An optimized BLAS library         | 0.2.15
+ sci              | general purpose scientific computing library | 1.0.beta12
+ xsys             | extended Lua system                          | 1.0.2
Confirm (y/n)? y

$ <strong>tree -d -L 2</strong>
.
├── bin
├── clib_libcurl
│   └── 7_42_1+3
├── clib_libopenblas
│   └── 0_2_15
├── cURL
│   └── 0_3_1+103
├── deque
│   └── 1_0+103
├── host
│   ├── init
│   ├── pkg
│   └── tmp
├── lcurl
│   └── 0_3_1+103
├── lfs
│   └── 1_6_3+203
├── luajit
│   └── 2_1_head20151128
├── moses
│   └── 2_1_0+103
├── moses_min
│   └── 2_1_0+103
├── pkg
│   └── 1_0_beta10
├── <strong>sci</strong>
│   └── <strong>1_0_beta12</strong>
├── serpent
│   └── 0_28+103
└── xsys
    └── 1_0_2

31 directories


<p><a name="k13"></a></p>
<h2 id="k13">13. Spustitelné soubory nainstalované v&nbsp;rámci instalace balíčku</h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zobrazení stavu ekosystému Lua spravovaného nástrojem ULua</h2>

<p>Jednoduchým způsobem lze zjistit i aktuální stav lokálního ekosystému
programovacího jazyka Lua spravovaného nástrojem <i>ULua</i>. Nejprve se opět
přesuneme do podadresáře <strong>ulua/bin</strong>:</p>

<pre>
$ <strong>cd ~/ulua/bin</strong>
&nbsp;
$ <strong>pwd</strong>
/home/tester/ulua/bin
</pre>

<p>A zadáme příkaz:</p>

<pre>
$ <strong>./upkg status</strong>
</pre>

<p>V&nbsp;případě, že jste postupovali podle kroků popsaných v&nbsp;předchozích
kapitolách, měly by se zobrazit tyto balíčky (a i jejich verze by měly
odpovídat níže zobrazeným sémantickým verzím):</p>

<pre>
Installed modules:
+ cURL             | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ clib_libcurl     | free and easy-to-use client-side URL transfer library                | 7.42.1-3
+ clib_libopenblas | OpenBLAS : An optimized BLAS library                                 | 0.2.15
+ deque            | deque : Implementation of a double-ended queue in Lua.               | 1.0-103
+ lcurl            | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ lfs              | luafilesystem : File System Library for the Lua Programming Language | 1.6.3-203
+ luajit           | LuaJIT: Just-In-Time Compiler (JIT) for Lua                          | 2.1.head20151128
+ moses            | moses : Utility-belt library for functional programming in Lua       | 2.1.0-103
+ moses_min        | moses : Utility-belt library for functional programming in Lua       | 2.1.0-103
+ pkg              | ULua package manager                                                 | 1.0.beta10
+ sci              | general purpose scientific computing library                         | 1.0.beta12
+ sci-lang         | Syntax extensions to LuaJIT for scientific computing                 | 1.0.beta10
+ serpent          | serpent : Lua serializer and pretty printer                          | 0.28-103
+ xsys             | extended Lua system                                                  | 1.0.2
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Povýšení balíčků na poslední dostupnou verzi</h2>

<pre>
$ <strong>./upkg update</strong>
&nbsp;
Installing updated modules and their requirements:
+ lfs | luafilesystem : File System Library for the Lua Programming Language | 1.7.0-203
Removing obsoleted modules:
+ lfs | luafilesystem : File System Library for the Lua Programming Language | 1.6.3-203
Confirm (y/n)?     
</pre>

<pre>
Downloading:
+ /pkg/lfs/1.7.0-203 | 100% of 73KB
Done
</pre>

<pre>
$ <strong>./upkg status</strong>
&nbsp;
Installed modules:
+ cURL             | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ clib_libcurl     | free and easy-to-use client-side URL transfer library                | 7.42.1-3
+ clib_libopenblas | OpenBLAS : An optimized BLAS library                                 | 0.2.15
+ deque            | deque : Implementation of a double-ended queue in Lua.               | 1.0-103
+ lcurl            | cURL: Lua binding to libcurl                                         | 0.3.1-103
+ lfs              | luafilesystem : File System Library for the Lua Programming Language | <strong>1.7.0-203</strong>
+ luajit           | LuaJIT: Just-In-Time Compiler (JIT) for Lua                          | 2.1.head20151128
+ moses            | moses : Utility-belt library for functional programming in Lua       | 2.1.0-103
+ moses_min        | moses : Utility-belt library for functional programming in Lua       | 2.1.0-103
+ pkg              | ULua package manager                                                 | 1.0.beta10
+ sci              | general purpose scientific computing library                         | 1.0.beta12
+ sci-lang         | Syntax extensions to LuaJIT for scientific computing                 | 1.0.beta10
+ serpent          | serpent : Lua serializer and pretty printer                          | 0.28-103
+ xsys             | extended Lua system                                                  | 1.0.2
</pre>


<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Články a seriály o jazyku Lua a souvisejících technologiích na Rootu</h2>

<ol>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Seriál Torch: framework pro strojové učení<br />
<a href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/</a>
</li>

<li>Skriptovací jazyk Lua v&nbsp;aplikacích naprogramovaných v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/">https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/</a>
</li>

<li>LuaJIT &ndash; Just in Time překladač pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/</a>
</li>

<li>Použití nástroje RQ (Redis Queue) pro správu úloh zpracovávaných na pozadí<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/">https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/</a>
</li>

<li>Proudy (streams) podporované systémem Redis<br />
<a href="https://www.root.cz/clanky/proudy-streams-podporovane-systemem-redis/">https://www.root.cz/clanky/proudy-streams-podporovane-systemem-redis/</a>
</li>

<li>Proudy (streams) podporované systémem Redis (dokončení)<br />
<a href="https://www.root.cz/clanky/proudy-streams-podporovane-systemem-redis-dokonceni/">https://www.root.cz/clanky/proudy-streams-podporovane-systemem-redis-dokonceni/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python<br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python (dokončení)<br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/</a>
</li>

<li>Použití databáze Redis v&nbsp;aplikacích naprogramovaných v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/pouziti-databaze-redis-v-aplikacich-naprogramovanych-v-go/">https://www.root.cz/clanky/pouziti-databaze-redis-v-aplikacich-naprogramovanych-v-go/</a>
</li>

<li>Použití databáze Redis v&nbsp;aplikacích naprogramovaných v&nbsp;Go (2)<br />
<a href="https://www.root.cz/clanky/pouziti-databaze-redis-v-aplikacich-naprogramovanych-v-go-2/">https://www.root.cz/clanky/pouziti-databaze-redis-v-aplikacich-naprogramovanych-v-go-2/</a>
</li>

</ol>




<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>ULua: Universal Lua Distribution<br />
<a href="https://ulua.io/index.html">https://ulua.io/index.html</a>
</li>

<li>deque<br />
<a href="https://github.com/catwell/cw-lua/blob/master/deque/deque.test.lua">https://github.com/catwell/cw-lua/blob/master/deque/deque.test.lua</a>
</li>

<li>Repositář projektu Lua Fun<br />
<a href="https://github.com/luafun/luafun">https://github.com/luafun/luafun</a>
</li>

<li>Lua Functional 0.1.3 documentation<br />
<a href="https://luafun.github.io/reference.html">https://luafun.github.io/reference.html</a>
</li>

<li>Lua Functional: Getting Started<br />
<a href="https://luafun.github.io/getting_started.html">https://luafun.github.io/getting_started.html</a>
</li>

<li>LuaRocks<br />
<a href="https://luarocks.org/">https://luarocks.org/</a>
</li>

<li>Documentation<br />
<a href="Dokumentace ke správci balíčků LuaRocks">Dokumentace ke správci balíčků LuaRocks</a>
</li>

<li>Rockspec knihovny Fun<br />
<a href="https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec">https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec</a>
</li>

<li>Awesome Lua &ndash; A curated list of quality Lua packages and resources.<br />
<a href="https://github.com/LewisJEllis/awesome-lua">https://github.com/LewisJEllis/awesome-lua</a>
</li>

<li>LuaJIT<br />
<a href="https://luajit.org/">https://luajit.org/</a>
</li>

<li>Running LuaJIT<br />
<a href="https://luajit.org/running.html">https://luajit.org/running.html</a>
</li>

<li>LuaJIT na GitHubu<br />
<a href="https://github.com/luajit">https://github.com/luajit</a>
</li>

<li>Repositář projektu Moses<br />
<a href="https://github.com/Yonaba/Moses/">https://github.com/Yonaba/Moses/</a>
</li>

<li>Návod k&nbsp;použití knihovny Moses<br />
<a href="https://github.com/Yonaba/Moses/blob/master/doc/tutorial.md">https://github.com/Yonaba/Moses/blob/master/doc/tutorial.md</a>
</li>

<li>Lambda the Ultimate: Coroutines in Lua<br />
<a href="http://lambda-the-ultimate.org/no­de/438">http://lambda-the-ultimate.org/no­de/438</a>
</li>

<li>Coroutines Tutorial<br />
<a href="http://lua-users.org/wiki/Co­routinesTutori­al">http://lua-users.org/wiki/Co­routinesTutori­al</a>
</li>

<li>Lua Coroutines Versus Python Generators<br />
<a href="http://lua-users.org/wiki/Lu­aCoroutinesVer­susPythonGene­rators">http://lua-users.org/wiki/Lu­aCoroutinesVer­susPythonGene­rators</a>
</li>

<li>Programming in Lua 9.1 – Coroutine Basics<br />
<a href="http://www.lu­a.org/pil/9.1­.html">http://www.lu­a.org/pil/9.1­.html</a>
</li>

<li>How to understand clojure's lazy-seq<br />
<a href="https://stackoverflow.com/questions/44095400/how-to-understand-clojures-lazy-seq">https://stackoverflow.com/questions/44095400/how-to-understand-clojures-lazy-seq</a>
</li>

<li>Lua Implementations<br />
<a href="http://lua-users.org/wiki/LuaImplementations">http://lua-users.org/wiki/LuaImplementations</a>
</li>

<li>Generator (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Generator_(computer_programming)">https://en.wikipedia.org/wiki/Generator_(computer_programming)</a>
</li>

<li>Lua 5.2 Reference Manual: 6.10 – The Debug Library<br />
<a href="http://www.lua.org/manual/5­.2/manual.html#6.10">http://www.lua.org/manual/5­.2/manual.html#6.10</a>
</li>

<li>Issues k&nbsp;projektu LuaFun<br />
<a href="https://github.com/luafun/luafun/issues">https://github.com/luafun/luafun/issues</a>
</li>

<li>Archived | Embed Lua for scriptable apps<br />
<a href="https://developer.ibm.com/tutorials/l-embed-lua/">https://developer.ibm.com/tutorials/l-embed-lua/</a>
</li>

<li>Embedding Lua<br />
<a href="https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml">https://www.oreilly.com/library/view/lua-quick-start/9781789343229/3a6f3daf-f74c-4a25-a125-584da58568e4.xhtml</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

