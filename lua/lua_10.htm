<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Lua a koprogramy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Lua a koprogramy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V desáté části seriálu o programovacím jazyce Lua si vysvětlíme způsob použití takzvaných koprogramů (coroutines), pomocí nichž je možné ve vytvářených skriptech implementovat například kooperativní multithreading, pracovat s vlastními iterátory, napodobit generátory známé z programovacího jazyka Python atd.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Programovací jazyk Lua a koprogramy</a><br />
<a href="#k02">2. Funkce umožňující práci s&nbsp;koprogramy</a><br />
<a href="#k03">3. Stavy koprogramu</a><br />
<a href="#k04">4. Přerušení koprogramu a obnova jeho běhu</a><br />
<a href="#k05">5. Inicializace koprogramu pomocí parametrů</a><br />
<a href="#k06">6. Předávání parametrů mezi koprogramem a volající funkcí</a><br />
<a href="#k07">7. Zdrojové kódy všech demonstračních příkladů</a><br />
<a href="#k08">8. Odkazy na Internetu</a><br />
<a href="#k09">9. Obsah dalšího pokračování seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Programovací jazyk Lua a koprogramy</h1>

<p>V&nbsp;programovacím jazyku <i>Lua</i> je implementována podpora pro
takzvané <i>koprogramy</i> (<i>coroutines</i>). Koprogram je možné chápat jako
zobecnění podprogramu, procedury, funkce či metody. Volání běžných podprogramů
a návrat z&nbsp;nich je řízen pomocí zásobníku (<i>stack</i>) &ndash; při
každém volání podprogramu je adresa aktuálního místa, kde se výpočet nachází,
uložena na zásobník a při ukončení podprogramu je tato adresa ze zásobníku
vyjmuta a řízení se vrátí na (přesněji těsně za) místo, ve kterém byl
podprogram, metoda či funkce volána. To znamená, že podprogram má jen jeden
vstupní bod a při ukončení podpogramu se musí v&nbsp;případě potřeby podprogram
opět zavolat od tohoto vstupního bodu (přerušený výpočet nelze po návratu
z&nbsp;podprogramu dokončit), což odpovídá klasicky chápanému strukturovanému
programování. Díky tomu, že jednou přerušený podprogram již není možné obnovit,
může celá aplikace používat pouze jediný zásobník pro předávání parametrů i
návratových hodnot (výjimkou jsou samozřejmě uzávěry, jejichž lokální proměnné
nejsou ukládány na zásobník, ale na haldu &ndash; <i>heap</i>).</p>

<p>Naproti tomu v&nbsp;případě použití <i>koprogramů</i> je možné jednoduchým
způsobem definovat libovolné množství vstupních bodů, které se mohou nacházet
v&nbsp;jejich těle na prakticky libovolném místě (včetně vnitřních částí
smyček). Činnost koprogramu lze v&nbsp;těchto bodech přerušit a vrátit řízení
volajícímu programu, ovšem s&nbsp;tím, že se vnitřní stav koprogramu zachová a
běh koprogramu tak lze od tohoto bodu znovu spustit (nespouští se tedy od svého
začátku, ale od bodu, kde byl výpočet přerušen). Navíc je možné v&nbsp;těchto
bodech předávat parametry jak z&nbsp;volajícího programu do koprogramu, tak i
opačným směrem &ndash; toto předání parametrů je bezpečné (mohli bychom říci
jazykem Javistů <i>threadsafe</i>, i když koprogramy nepoužívají vlákna
operačního systému), v&nbsp;podstatě se jedná o jediný (a dostatečný)
synchronizační mechanismus, který je při práci s&nbsp;koprogramy zapotřebí.
Vzhledem k&nbsp;tomu, že je nutné uchovávat stav koprogramu i tehdy, když je
jeho výpočet přerušen, musí mít koprogramy vlastní zásobník, který je
v&nbsp;operační paměti alokován ve chvíli, kdy je koprogram vytvořen (o jeho
dealokaci se postará garbage collector).</p>

<p>S&nbsp;využitím koprogramů lze velmi jednoduše implementovat kooperativní
multithreading, ovšem s&nbsp;tím omezením, že se ve skutečnosti nepoužívají
vlákna (thready) operačního systému, protože volající program je při zavolání
koprogramu pozastaven, aby mohl počkat na výsledek jeho běhu. To na jednu
stranu zjednodušuje implementaci vláken v&nbsp;<i>Lua</i> (vlákna jsou tak
podporována na všech platformách, nezávisle na použitém operačním systému), na
stranu druhou se nevyužívá všech možností moderních vícejádrových
mikroprocesorů. V&nbsp;současné verzi jazyka <i>Lua</i> lze multithreading
nabízený operačním systémem využít přes vlastní API vytvořené aplikací, která
interpretr <i>Lua</i> obsahuje (tj.&nbsp;céčkový program má zaregistrovány
funkce pro vytvoření vlákna, jeho zrušení atd.), ovšem veškerou synchronizaci
mezi vlákny, například při předávání dat, je nutné provádět také přes toto API,
typicky implementací semaforů, synchronizovaného asociativního pole apod. (při
použití asociativního pole lze využít metametod navázaných na události
<strong>__index</strong> a <strong>__newindex</strong> popsaných
v&nbsp;předchozí části seriálu).</p>

<p>Také je možné použít opačný přístup &ndash; v&nbsp;céčkovém programu lze (od
verze 5.1) vytvořit několik <i>prostředí</i> (<i>environment</i>) interpretru,
přičemž každé prostředí může běžet v&nbsp;jiném vlákně či procesu. Jednou
z&nbsp;pěkných a především snadno použitelných implementací
&bdquo;skutečného&ldquo; paralelního multithreadingu představuje projekt <i>Lua
Lanes</i>, který navíc zavádí komunikaci mezi vlákny ve stylu jazyka
<i>Linda</i> &ndash; viz <a
href="http://kotisivu.dnainternet.net/askok/bin/lanes/">http://kotisivu.dnainternet.net/askok/bin/lanes/</a>.</p>



<p><a name="k02"></a></p>
<h1>2. Funkce umožňující práci s&nbsp;koprogramy</h1>

<p>V&nbsp;programovacím jazyce <i>Lua</i> není podpora pro práci
s&nbsp;<i>koprogramy</i> implementována formou speciální syntaktické konstrukce
jazyka tak, jako je tomu v&nbsp;některých dalších programovacích jazycích
implementujících koprogramy (neexistuje zde například klíčové slovo pro
přerušení práce koprogramu, zatímco třeba Python pro podobnou činnost rezervuje
slovo <strong>yield</strong>), ale &ndash; jak se již v&nbsp;<i>Lua</i> stalo
dobrým zvykem &ndash; je vše řešeno pomocí funkcí a asociativních polí. Samotný
koprogram je ve své podstatě pojmenovaná či anonymní funkce s&nbsp;vlastním
zásobníkem, který je oddělený od zásobníku volajícího programu. Pro vytváření,
řízení a zjišťování stavů koprogramů lze využít šest funkcí ležících
v&nbsp;prostoru jmen nazvaném <strong>coroutine</strong> (prostor jmen není nic
jiného než takto pojmenované globální asociativní pole se šesti
&bdquo;veřejnými&ldquo; funkcemi a několika pomocnými atributy), jejichž význam
je uveden v&nbsp;následující tabulce. Některé níže vypsané funkce budou použity
i v&nbsp;demonstračních příkladech popsaných v&nbsp;navazujících
kapitolách:</p>

<table>
<tr><th>Název funkce</th><th>Význam</th></tr>
<tr><td>coroutine.create() </td><td>vytvoření koprogramu</td></tr>
<tr><td>coroutine.resume() </td><td>spuštění či znovuspuštění koprogramu</td></tr>
<tr><td>coroutine.running()</td><td>funkce vrátí právě běžící koprogram (pro hlavní vlákno se vrací <strong>nil</strong>)</td></tr>
<tr><td>coroutine.status() </td><td>funkce vrátí aktuální stav koprogramu &ndash; zda běží, je pozastaven či zda je běh koprogramu již ukončen</td></tr>
<tr><td>coroutine.wrap()   </td><td>vytvoření koprogramu, vrací se funkce, která koprogram spustí</td></tr>
<tr><td>coroutine.yield()  </td><td>pozastavení koprogramu a případný přenos parametrů volajícímu programu</td></tr>
</table>



<p><a name="k03"></a></p>
<h1>3. Stavy koprogramu</h1>

<p>Koprogram se v&nbsp;určitém čase může nacházet v&nbsp;jednom ze čtyř stavů:
<strong>running</strong>, <strong>normal</strong>, <strong>suspended</strong>
či <strong>dead</strong>. Stav koprogramu lze kdykoli zjistit zavoláním výše
uvedené funkce <i>coroutine.status()</i>, která vrátí stav koprogramu jako
řetězec: "running", "normal", "suspended" popř.&nbsp;"dead". Ve stavu "running"
se může nacházet vždy jen jeden koprogram, a to ten, který funkci
<i>coroutine.status()</i> volá. Ve stavu "suspended" se nachází koprogram po
svém vytvoření funkcí <i>coroutine.create()</i> či <i>coroutine.wrap()</i>,
nebo ve chvíli, kdy je uvnitř jeho těla zavolána funkce "coroutine.yield()",
tj.&nbsp;koprogram je pozastaven a čeká na své znovuspuštění. Stav "normal" je
nastaven u aktivního koprogramu, který zavolal jiný koprogram (a čeká tedy na
přerušení či ukončení jeho běhu), kdežto stav "dead" je vrácen pro již
neaktivní koprogram, tj.&nbsp;koprogram, jehož tělo bylo ukončeno příkazem
<strong>return</strong> nebo se došlo na jeho konec (zde se nachází implicitní
<strong>return</strong>, podobně jako u běžných funkcí).</p>

<p>V&nbsp;prvním demonstračním příkladu je ukázán způsob vytvoření koprogramu
pomocí <i>coroutine.create()</i>, jeho spuštění funkcí
<i>coroutine.resume()</i> a dotaz na aktuální stav koprogramu voláním funkce
<i>coroutine.status()</i>. Vzhledem k&nbsp;tomu, že samotné tělo koprogramu,
které je představované funkcí <i>funkceKoprogramu()</i>, neobsahuje volání
<i>coroutine.yield()</i>, má tento vzorový koprogram stejné chování, jako běžný
podprogram, i když jeho interní struktura je odlišná (zejména kvůli existenci
samostatného běhového zásobníku):</p>

<code-area><i>-- Prvni demonstracni priklad prace s koprogramy:</i>
<i>-- vytvoreni koprogramu, vypis jeho stavu a spusteni</i>



<i>-- funkce, pro kterou bude koprogram vytvoren</i>
<strong>function</strong> funkceKoprogramu()
    print("*** Koprogram byl spusten ***")
<strong>end</strong>

<i>-- vytvoreni koprogramu</i>
koprogram = coroutine.create(funkceKoprogramu)

<i>-- vypis typu objektu</i>
print("Typ objektu:", koprogram)

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu:", coroutine.status(koprogram))

<i>-- spusteni koprogramu</i>
coroutine.resume(koprogram)

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu:", coroutine.status(koprogram))

<i>-- finito</i>
</code-area>

<p>Výše uvedený skript po svém spuštění vypíše na standardní výstup tyto
informace:</p>

<code-area>Typ objektu:      thread: 0x80519c8
Stav koprogramu:  suspended
*** Koprogram byl spusten ***
Stav koprogramu:  dead
</code-area>

<p>Většinou se však v&nbsp;<i>Lua</i> skriptech setkáme s&nbsp;odlišným
způsobem zápisu koprogramu, ve kterém je jeho tělo zapsáno formou anonymní
funkce přímo ve volání <i>coroutine.create()</i> či <i>coroutine.wrap()</i>
&ndash; není totiž důvod, aby byla funkce pojmenovaná, neboť je
&bdquo;schována&ldquo; uvnitř koprogramu. Druhý demonstrační příklad po svém
spuštění vypíše stejný text, jako příklad první:</p>

<code-area><i>-- Druhy demonstracni priklad prace s koprogramy:</i>
<i>-- vytvoreni koprogramu, vypis jeho stavu a spusteni</i>
<i>-- (anonymni) funkce koprogramu je vytvorena primo</i>
<i>-- ve volani coroutine.create()</i>



<i>-- vytvoreni koprogramu s vyuzitim anonymni funkce</i>
koprogram = coroutine.create(
    <strong>function</strong>()
        print("*** Koprogram byl spusten ***")
    <strong>end</strong>
)

<i>-- vypis typu objektu</i>
print("Typ objektu:", koprogram)

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu:", coroutine.status(koprogram))

<i>-- spusteni koprogramu</i>
coroutine.resume(koprogram)

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu:", coroutine.status(koprogram))

<i>-- finito</i>
</code-area>



<p><a name="k04"></a></p>
<h1>4. Přerušení koprogramu a obnova jeho běhu</h1>

<p>Ve druhé kapitole jsme si řekli, že pro (dočasné) přerušení běhu koprogramu
se používá funkce <i>coroutine.yield()</i>. Tato funkce se může nacházet
v&nbsp;takřka libovolném místě těla koprogramu, včetně programových smyček. Ve
chvíli, kdy se tato funkce zavolá, je běh koprogramu přerušen a řízení se vrátí
zpět do volající části programu (tou může být buď hlavní vlákno, nebo libovolný
jiný koprogram). Spuštění či obnova běhu koprogramu se provede zavoláním funkce
<i>coroutine.resume()</i>, jejímž parametrem je instance koprogramu
(z&nbsp;předchozích částí tohoto seriálu již víme, že mezi datové typy jazyka
<i>Lua</i> náleží i typ <i>thread</i>, což není nic jiného, než instance
koprogramu získaná pomocí <i>coroutine.create()</i>). V&nbsp;následujícím
demonstračním příkladu je koprogram nejprve spuštěn funkcí
<i>coroutine.resume()</i> (na standardní výstup se vypíše první řetězec
začínající třemi hvězdičkami), posléze je běh koprogramu přerušen zavoláním
<i>coroutine.yield()</i> s&nbsp;tím, že řízení je předáno volajícímu programu a
následně je běh koprogramu obnoven od místa svého přerušení opětovným zavoláním
funkce <i>coroutine.resume()</i>, což se projeví výpisem druhéhe řetězce
začínajícího třemi hvězdičkami:</p>

<code-area><i>-- Treti demonstracni priklad prace s koprogramy:</i>
<i>-- vytvoreni koprogramu, zavolani coroutine.yield()</i>
<i>-- a nasledne coroutine.resume()</i>



<i>-- vytvoreni koprogramu s vyuzitim anonymni funkce</i>
koprogram = coroutine.create(
    <strong>function</strong>()
        print("*** telo koprogramu pred zavolanim yield ***")
        coroutine.yield()
        print("*** telo koprogramu po zavolani yield ***")
    <strong>end</strong>
)

<i>-- vypis typu objektu</i>
print("Typ objektu:", koprogram)

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu:", coroutine.status(koprogram))

<i>-- spusteni koprogramu</i>
coroutine.resume(koprogram)

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu:", coroutine.status(koprogram))

<i>-- spusteni koprogramu</i>
coroutine.resume(koprogram)

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu:", coroutine.status(koprogram))

<i>-- finito</i>
</code-area>
 
<p>Třetí demonstrační příklad po svém spuštění vypíše na standardní výstup následující řádky:</p>

<code-area>Typ objektu: thread: 0x8051270
Stav koprogramu:        suspended
*** telo koprogramu pred zavolanim yield ***
Stav koprogramu:        suspended
*** telo koprogramu po zavolani yield ***
Stav koprogramu:        dead
</code-area>

<p>Čtvrtý demonstrační příklad je již poněkud složitější, protože volání
&bdquo;přerušovací&ldquo; funkce <i>coroutine.yield()</i> je v&nbsp;těle
koprogramu umístěno uvnitř programové smyčky, tj.&nbsp;při každém průchodu
smyčkou dojde k&nbsp;jeho pozastavení a předání řízení volajícímu kódu.
Koprogram je spouštěn a znovuspouštěn ve smyčce typu <i>while</i>, protože
funkce <i>coroutine.resume()</i> vrací pravdivostní hodnotu
<strong>true</strong> či <strong>false</strong> podle toho, zda se
znovuspuštění koprogramu podařilo či zda při jeho běhu nenastala nějaká chyba
(v&nbsp;případě, že se dojde na konec koprogramu, vrací se hodnota
<strong>false</strong>):</p>

<code-area><i>-- Ctvrty demonstracni priklad prace s koprogramy:</i>
<i>-- vytvoreni koprogramu, ktery 10x zavola coroutine.yield()</i>
<i>-- a sam sebe tak prerusi</i>
<i>-- koprogram je ve smycce obnovovan pomoci coroutine.resume()</i>


<i>-- vytvoreni koprogramu s vyuzitim anonymni funkce</i>
koprogram = coroutine.create(
    <strong>function</strong>()
        <strong>for</strong> i=1, 10 <strong>do</strong>
            print("*** telo koprogramu pred zavolanim yield: "..i.." ***")
            coroutine.yield()
            print("*** telo koprogramu po zavolani yield: "..i.." ***")
        <strong>end</strong>
    <strong>end</strong>
)

<i>-- vypis typu objektu</i>
print("Typ objektu:", koprogram)

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu pred vstupem do smycky while:", coroutine.status(koprogram))

counter = 0
<i>-- spusteni a znovuspusteni koprogramu</i>
<strong>while</strong> coroutine.resume(koprogram) <strong>do</strong>
    counter = counter + 1
    print("Funkce coroutine.resume() volano "..counter.."x")
    print("Stav koprogramu ve smycce while:", coroutine.status(koprogram))
<strong>end</strong>

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu po ukonceni smycky while:", coroutine.status(koprogram))

<i>-- finito</i>
</code-area>

<p>Následuje ukázka zpráv, které čtvrtý demonstrační příklad po svém spuštění
vypíše:</p>

<code-area>Typ objektu:         thread: 0x8051ea0
Stav koprogramu pred vstupem do smycky while:   suspended
*** telo koprogramu pred zavolanim yield: 1 ***
Funkce coroutine.resume() volano 1x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 1 ***
*** telo koprogramu pred zavolanim yield: 2 ***
Funkce coroutine.resume() volano 2x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 2 ***
*** telo koprogramu pred zavolanim yield: 3 ***
Funkce coroutine.resume() volano 3x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 3 ***
*** telo koprogramu pred zavolanim yield: 4 ***
Funkce coroutine.resume() volano 4x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 4 ***
*** telo koprogramu pred zavolanim yield: 5 ***
Funkce coroutine.resume() volano 5x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 5 ***
*** telo koprogramu pred zavolanim yield: 6 ***
Funkce coroutine.resume() volano 6x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 6 ***
*** telo koprogramu pred zavolanim yield: 7 ***
Funkce coroutine.resume() volano 7x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 7 ***
*** telo koprogramu pred zavolanim yield: 8 ***
Funkce coroutine.resume() volano 8x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 8 ***
*** telo koprogramu pred zavolanim yield: 9 ***
Funkce coroutine.resume() volano 9x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 9 ***
*** telo koprogramu pred zavolanim yield: 10 ***
Funkce coroutine.resume() volano 10x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 10 ***
Funkce coroutine.resume() volano 11x
Stav koprogramu ve smycce while:                dead
Stav koprogramu po ukonceni smycky while:       dead
</code-area>



<p><a name="k05"></a></p>
<h1>5. Inicializace koprogramu pomocí parametrů</h1>

<p>V&nbsp;předchozích kapitolách jsme si řekli, že koprogram je vytvářený
pomocí konstruktorů <i>coroutine.create()</i> či <i>coroutine.wrap()</i>,
kterým se předává pojmenovaná či anonymní funkce, jenž představuje tělo
koprogramu. Jistě by bylo žádoucí této funkci předávat nějaké inicializační
parametry, například proměnné (asociativní pole apod.), se kterými může
koprogram pracovat, názvy souborů či databázových připojení atd. To je
samozřejmě možné &ndash; při spouštění či znovuspouštění koprogramu lze pomocí
<i>coroutine.resume()</i> předat koprogramu libovolné množství parametrů.
Jejich zpracování se liší &ndash; pokud je koprogram spouštěn od svého začátku,
jsou tyto parametry předávány tak, jak je to u funkcí běžné &ndash; pomocí
pojmenovaných argumentů v&nbsp;její hlavičce, v&nbsp;opačném případě se
parametry předají jako návratová hodnota funkce <i>coroutine.yield</i> (viz
další kapitola). První popisované chování je ukázáno v&nbsp;dalším
demonstračním příkladu, ve kterém první volání <i>coroutine.resume()</i>
obsahuje nepovinný parametr, kterým se určuje počet opakování smyčky uvnitř
těla koprogramu. Následuje výpis zdrojového kódu pátého demonstračního
příkladu:</p>

<code-area>
<i>-- Paty demonstracni priklad prace s koprogramy:</i>
<i>-- predani parametru koprogramu pri jeho prvnim spusteni</i>


<i>-- vytvoreni koprogramu s vyuzitim anonymni funkce</i>
koprogram = coroutine.create(
    <strong>function</strong>(opakovani)
        print("Predany pocet opakovani: ", opakovani)
        <strong>if</strong> opakovani &lt;= 1 <strong>then</strong>
            <strong>return</strong>
        <strong>end</strong>
        <strong>for</strong> i=1, opakovani <strong>do</strong>
            print("*** telo koprogramu pred zavolanim yield: "..i.." ***")
            coroutine.yield()
            print("*** telo koprogramu po zavolani yield: "..i.." ***")
        <strong>end</strong>
    <strong>end</strong>
)

<i>-- vypis typu objektu</i>
print("Typ objektu:", koprogram)

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu pred jeho spustenim:", coroutine.status(koprogram))

coroutine.resume(koprogram, 5)

print("Stav koprogramu pred vstupem do smycky:", coroutine.status(koprogram))

counter = 0
<i>-- spusteni a znovuspusteni koprogramu</i>
<strong>while</strong> coroutine.resume(koprogram) <strong>do</strong>
    counter = counter + 1
    print("Funkce coroutine.resume() volana "..counter.."x")
    print("Stav koprogramu ve smycce while:", coroutine.status(koprogram))
<strong>end</strong>

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu po ukonceni smycky while:", coroutine.status(koprogram))

<i>-- finito</i>
</code-area>

<p>Hlášení vypsané pátým demonstračním příkladem na standardní výstup po jeho
spuštění:</p>

<code-area>Typ objektu:    thread: 0x80520f0
Stav koprogramu pred jeho spustenim:            suspended
Predany pocet opakovani:        5
*** telo koprogramu pred zavolanim yield: 1 ***
Stav koprogramu pred vstupem do smycky:         suspended
*** telo koprogramu po zavolani yield: 1 ***
*** telo koprogramu pred zavolanim yield: 2 ***
Funkce coroutine.resume() volana 1x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 2 ***
*** telo koprogramu pred zavolanim yield: 3 ***
Funkce coroutine.resume() volana 2x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 3 ***
*** telo koprogramu pred zavolanim yield: 4 ***
Funkce coroutine.resume() volana 3x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 4 ***
*** telo koprogramu pred zavolanim yield: 5 ***
Funkce coroutine.resume() volana 4x
Stav koprogramu ve smycce while:                suspended
*** telo koprogramu po zavolani yield: 5 ***
Funkce coroutine.resume() volana 5x
Stav koprogramu ve smycce while:                dead
Stav koprogramu po ukonceni smycky while:       dead
</code-area>



<p><a name="k06"></a></p>
<h1>6. Předávání parametrů mezi koprogramem a volající funkcí</h1>

<p>V&nbsp;dnešním posledním demonstračním příkladu je ukázán způsob obousměrné
komunikace mezi volajícím programem a koprogramem. Pro přenos dat lze využít
funkce <i>coroutine.resume()</i> i <i>coroutine.yield()</i>. Obě tyto funkce
akceptují libovolný počet parametrů (u <i>coroutine.resume()</i> je navíc první
parametr s&nbsp;instancí koprogramu povinný, zbylé parametry jsou volitelné),
takže je možné předat libovolné množství údajů, nezávisle na jejich typu.
Koprogram v&nbsp;šestém příkladu převezme dva parametry <i>a</i>, <i>b</i> a
pomocí funkce <i>coroutine.yield()</i> vrátí dvojici numerických hodnot
obsahujících součet a rozdíl těchto parametrů (tato dvojice představuje
návratovou hodnotu funkce <i>coroutine.resume()</i>, ke které je navíc přidán
pravdivostní příznak představující výsledek běhu koprogramu &ndash; viz
předchozí kapitoly). Po znovuspuštění koprogramu se vypočítá součin a rozdíl
obou parametrů, které jsou vráceny pomocí příkazu <strong>return</strong> na
konci těla koprogramu (po návratu pomocí <strong>return</strong> se koprogram
již nachází ve stavu "dead", což lze zjistit pomocí
<i>coroutine.stavus()</i>).</p>

<code-area>
<i>-- Sesty demonstracni priklad prace s koprogramy:</i>
<i>-- predavani parametru mezi koprogramem a volajici funkci</i>



<i>-- vytvoreni koprogramu s vyuzitim anonymni funkce</i>
koprogram = coroutine.create(
    <strong>function</strong>(a,b)
        print("Predane parametry do koprogramu: ", a, b);
        coroutine.yield(a + b, a - b)
        print("*** telo koprogramu po zavolani yield")
        <strong>return</strong> a * b, a / b
    <strong>end</strong>
)

<i>-- vypis typu objektu</i>
print("Typ objektu:", koprogram)

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu pred jeho spustenim:", coroutine.status(koprogram))

print("Vysledek prvniho volani resume: ", coroutine.resume(koprogram, 1, 2))

print("Vysledek druheho volani resume: ", coroutine.resume(koprogram))

<i>-- zjisteni a vypis stavu koprogramu</i>
print("Stav koprogramu po jeho ukonceni:", coroutine.status(koprogram))

-- finito
</code-area>

<p>Výsledek běhu šestého demonstračního příkladu:</p>

<code-area>Typ objektu:    thread: 0x8051250
Stav koprogramu pred jeho spustenim:            suspended
Predane parametry do koprogramu:                1               2
Vysledek prvniho volani resume:                 true            3               -1
*** telo koprogramu po zavolani yield
Vysledek druheho volani resume:                 true            2               0.5
Stav koprogramu po jeho ukonceni:               dead
</code-area>



<p><a name="k07"></a></p>
<h1>7. Zdrojové kódy všech demonstračních příkladů</h1>

<p>V&nbsp;následující tabulce jsou uloženy odkazy na zdrojové kódy všech šesti
demonstračních příkladů popsaných v&nbsp;předchozích kapitolách. Taktéž jsou
zde uvedeny odkazy na výsledky běhu testovacích příkladů &ndash; jedná se o
standardní výstup přesměrovaný běžnými prostředky operačního systému do souboru
po převodu tabulátorů na mezery:</p>

<table>
<tr><th>Soubor</th></tr>
<tr><td><att-url id="737">Zdrojový kód prvního demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="738">Výsledek běhu prvního demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="739">Zdrojový kód druhého demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="740">Výsledek běhu druhého demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="741">Zdrojový kód třetího demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="742">Výsledek běhu třetího demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="743">Zdrojový kód čtvrtého demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="744">Výsledek běhu čtvrtého demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="745">Zdrojový kód pátého demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="746">Výsledek běhu pátého demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="747">Zdrojový kód šestého demonstračního příkladu</att-url></td></tr>
<tr><td><att-url id="748">Výsledek běhu šestého demonstračního příkladu</att-url></td></tr>
</table>


<p><a name="k08"></a></p>
<h1>8. Odkazy na Internetu</h1>

<ol>

<li>Lambda the Ultimate: Coroutines in Lua,<br />
<a href="http://lambda-the-ultimate.org/node/438">http://lambda-the-ultimate.org/node/438</a>
</li>

<li>Coroutines Tutorial,<br />
<a href="http://lua-users.org/wiki/CoroutinesTutorial">http://lua-users.org/wiki/CoroutinesTutorial</a>
</li>

<li>Lua Coroutines Versus Python Generators,<br />
<a href="http://lua-users.org/wiki/LuaCoroutinesVersusPythonGenerators">http://lua-users.org/wiki/LuaCoroutinesVersusPythonGenerators</a>
</li>

<li>Programming in Lua 9.1 &ndash; Coroutine Basics,<br />
<a href="http://www.lua.org/pil/9.1.html">http://www.lua.org/pil/9.1.html</a>
</li>

<li>Wikipedia CZ: Koprogram,<br />
<a href="http://cs.wikipedia.org/wiki/Koprogram">http://cs.wikipedia.org/wiki/Koprogram</a>
</li>

<li>Wikipedia EN: Coroutine,<br />
<a href="http://en.wikipedia.org/wiki/Coroutine">http://en.wikipedia.org/wiki/Coroutine</a>
</li>

<li>Lua Lanes,<br />
<a href="http://kotisivu.dnainternet.net/askok/bin/lanes/">http://kotisivu.dnainternet.net/askok/bin/lanes/</a>
</li>

</ol>



<p><a name="k09"></a></p>
<h1>9. Obsah dalšího pokračování seriálu</h1>

<p>V&nbsp;následující části seriálu o programovacím jazyku <i>Lua</i> si
popíšeme funkce a proměnné dostupné ve standardních knihovnách dodávaných
společně s&nbsp;překladačem a interpretrem tohoto jazyka. Taktéž se budeme
zabývat několika užitečnými externími knihovnami, frameworky a rozšířeními
samotného jazyka (typickou ukázkou sémantického rozšíření jazyka je
<i>Metalua</i>). Externích knihoven a jazykových rozšíření v&nbsp;současnosti
existuje již značné množství, od knihoven určených pro numerické výpočty
(<i>Numeric Lua</i>, která je mimochodem založena na části skvělé
<i>Netlib</i>), přes různé grafické a multimediální knihovny, knihovny
použitelné pro tvorbu grafického uživatelského rozhraní (GTK+ apod.) a knihovny
pro tvorbu her až po webové frameworky, například poměrně úspěšný projekt
<i>Kepler</i>.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

