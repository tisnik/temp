<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Operátory a asociativní pole v programovacím jazyku Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Operátory a asociativní pole v programovacím jazyku Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části seriálu o programovacím jazyku Lua si popíšeme všechny operátory nabízené tímto jazykem a taktéž se zmíníme o práci s asociativními poli, protože tento datový typ představuje základ jak pro tvorbu "klasických" indexovaných polí, tak i seznamů, zásobníků, front, stromů, struktur typu záznam a dokonce i objektů.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Aritmetické operátory</a><br />
<a href="#k02">2. Logické operátory</a><br />
<a href="#k03">3. Relační operátory</a><br />
<a href="#k04">4. Spojení řetězců a operátor vracející délku struktury</a><br />
<a href="#k05">5. Priority operátorů</a><br />
<a href="#k06">6. Asociativní pole</a><br />
<a href="#k07">7. Vytvoření asociativního pole</a><br />
<a href="#k08">8. Přístup k&nbsp;prvkům asociativního pole</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Aritmetické operátory</h1>

<p>Programovací jazyk <i>Lua</i> obsahuje celkem sedm základních aritmetických
operátorů aplikovatelných na číselné hodnoty či proměnné (viz předchozí část
tohoto seriálu), popř.&nbsp;na řetězce převedené automaticky na čísla. Jedná se
o součet, rozdíl, součin, podíl (neceločíselný), dělení modulo (zbytek po
dělení), umocnění a v&nbsp;neposlední řadě též unární minus (změna znaménka);
všechny zmíněné operátory jsou vypsány v&nbsp;tabulce pod odstavcem. Při práci
s&nbsp;číselnými hodnotami si musíme dát pozor na některé problémy, které mohou
vznikat na základě zvolené reprezentace čísel.  Pokud používáme standardně
přeložený interpretr jazyka <i>Lua</i>, jsme v&nbsp;přesnosti i rozsahu
využitelných (reprezentovatelných) hodnot omezeni 64bitovým datovým typem
<i>double</i> definovaným v&nbsp;normě <i>IEEE 754</i>.  Nejvyšší
reprezentovatelná hodnota dosahuje 1,8&times;10<sup>308</sup>, nejmenší možná
nenulová kladná hodnota je rovna 2,2&times;10<sup>-308</sup>.  Pro exponent je
vyhrazeno 11 bitů a pro mantisu zbývajících 53 bitů (přesněji 52 bitů plus bit
znaménkový), což pro nás jako programátory znamená, že pouze 53bitová celá
čísla lze v&nbsp;tomto formátu reprezentovat zcela přesně, po překročení tohoto
rozsahu již dochází k&nbsp;zaokrouhlení či ořezání nejnižších bitů zpracovávané
hodnoty (jinými slovy &ndash; typ <i>long</i> se obecně na typ <i>double</i>
převede s&nbsp;chybou, přijdeme totiž o informace uložené v&nbsp;posledních 11
bitech s&nbsp;nejnižší váhou).</p>

<table>
<tr><th>Symbol operátoru</th><th>Arita</th><th>Popis</th></tr>
<tr><td><strong>+</strong></td><td>binární</td><td>součet</td></tr>
<tr><td><strong>-</strong></td><td>binární</td><td>rozdíl</td></tr>
<tr><td><strong>*</strong></td><td>binární</td><td>součin</td></tr>
<tr><td><strong>/</strong></td><td>binární</td><td>podíl (reálná čísla)</td></tr>
<tr><td><strong>%</strong></td><td>binární</td><td>dělení modulo</td></tr>
<tr><td><strong>^</strong></td><td>binární</td><td>umocňování</td></tr>
<tr><td><strong>-</strong></td><td>unární</td><td>unární minus</td></tr>
</table>

<p>Následuje ukázka krátkého demonstračního programu (skriptu) napsaného
v&nbsp;jazyce <i>Lua</i>, na kterém je vysvětlen způsob použití všech výše
popsaných aritmetických operátorů při výpočtu součtu, rozdílu, součinu, podílu
i zbytku po dělení dvou konstant, stejně jako umocnění první konstanty
konstantou druhou (<i>x<sup>y</sup></i>). Pomocí operátoru umocňování lze
vypočítat i druhou odmocninu jakékoli nezáporné hodnoty bez nutnosti použití
knihovní funkce <i>math.sqrt()</i> (základní knihovní funkce si popíšeme
v&nbsp;některé z&nbsp;dalších částí tohoto seriálu). V&nbsp;demonstračním
příkladu je vypočtena druhá odmocnina hodnoty 2. Program ve své závěrečné části
vypíše dvě tabulky &ndash; první tabulka obsahuje celé kladné mocniny dvojky
(tyto hodnoty programátoři většinou znají nazpaměť :-) a následně i záporné
mocniny dvojky (tj.&nbsp;vlastně hodnoty <i>1/(2<sup>n</sup>)</i>, protože
záporný exponent odpovídá výpočtu převrácené hodnoty hodnoty s&nbsp;kladným
exponentem). Zdrojový kód demonstračního příkladu je velmi jednoduchý:</p>

<code-area>-- priklad na pouziti aritmetickych operatoru

-- promenne, se kterymi se budou vypocty provadet
a=10
b=20

-- vypiseme hodnoty promennych
print("a=", a)
print("b=", b)

-- vysledky aritmetickych vyrazu
print("a+b=", a+b)
print("a-b=", a-b)
print("a*b=", a*b)
print("a/b=", a/b) -- vysledkem teto operace je realne cislo
print("a%b=", a%b)
print("a^b=", a^b)

-- pomoci operatoru umocnovani lze vypocitat i odmocninu
print("sqrt(2)=", 2^(0.5))

-- vypocet celych kladnych mocnin zakladu 2
print()
print("mocniny cisla 2")

print("x", "2^x")
for x=0,16 do
    print(x, 2^x)
end

-- vypocet celych zapornych mocnin zakladu 2
print()
print("x", "2^(-x)")
for x=0,16 do
    print(x, 2^(-x))
end

-- finito
</code-area>

<p>Výše uvedený program po svém spuštění vygeneruje následující výstup:</p>

<code-area>a=        10
b=        20
a+b=      30
a-b=      -10
a*b=      200
a/b=      0.5
a%b=      10
a^b=      1e+020
sqrt(2)=  1.4142135623731

mocniny cisla 2
x         2^x
0         1
1         2
2         4
3         8
4         16
5         32
6         64
7         128
8         256
9         512
10        1024
11        2048
12        4096
13        8192
14        16384
15        32768
16        65536

x         2^(-x)
0         1
1         0.5
2         0.25
3         0.125
4         0.0625
5         0.03125
6         0.015625
7         0.0078125
8         0.00390625
9         0.001953125
10        0.0009765625
11        0.00048828125
12        0.000244140625
13        0.0001220703125
14        6.103515625e-005
15        3.0517578125e-005
16        1.52587890625e-005
</code-area>

<p>Při použití operátoru umocnění si musíme dát pozor na jeho asociativitu,
která je opačná, než u ostatních operátorů (umocnění je automaticky
&bdquo;uzávorkováno&ldquo; zprava). V&nbsp;následujícím demonstračním příkladu
je ukázáno, jakým způsobem je vypočten výraz <i>a^b^c</i> &ndash; výsledek je
shodný, jako při použití výrazu <i>a^(b^c)</i>, tj.&nbsp;implicitní závorky
jsou vloženy zprava a nikoli zleva, tak, jako tomu je u většiny ostatních
binárních operátorů:</p>

<code-area>-- test asociativity operatoru umocnovani

-- promenne, ktere v programu pouzijeme
a=2
b=3
c=4

-- vypis hodnot promennych
print("a=", a)
print("b=", b)
print("c=", c)

-- vypis vysledku vyrazu s operatorem umocnovani
print("a^b^c=", a^b^c)
print("(a^b)^c=", (a^b)^c)
print("a^(b^c)=", a^(b^c))

-- finito
</code-area>

<p>Výstup z&nbsp;výše uvedeného programu po jeho spuštění:</p>

<code-area>a=        2
b=        3
c=        4
a^b^c=    2.4178516392293e+024
(a^b)^c=  4096
a^(b^c)=  2.4178516392293e+024
</code-area>

<p>Následuje nepatrně složitější příklad, pomocí něhož lze vypočítat několik
prvních číslic hodnoty &pi; pomocí opakovaného výpočtu aritmetického a
geometrického průměru dvou proměnných, jejichž počáteční hodnota je nastavena
na 0 resp. 1/2. Převrácená hodnota obou proměnných se postupně přibližuje
k&nbsp;hodnotě čísla &pi; (ve skutečnosti se nejedná o nijak rychlý ani
efektivní algoritmus, je však velmi jednoduchý):</p>

<code-area>-- prakticke pouziti aritmetickych operatoru
-- pri iterativnim vypoctu cisla Pi

-- hodnoty vstupujici do vypoctu
a=0
b=1/2
for x=1, 30 do
    -- aritmeticky prumer
    a=(a+b)/2
    -- geometricky prumer
    b=(a*b)^(1/2)
    -- k cislu Pi se priblizujeme zespodu od
    -- dvojky (1/b) a zvrchu od ctverky (1/a)
    print(x, 1/a, 1/b)
end

-- finito
</code-area>

<p>Výstup programu:</p>

<code-area>1       4               2.8284271247462
2       3.3137084989848 3.0614674589207
3       3.1825978780745 3.1214451522581
4       3.1517249074293 3.1365484905459
5       3.1441183852459 3.1403311569548
6       3.1422236299425 3.1412772509328
7       3.141750369169  3.1415138011443
8       3.1416320807032 3.1415729403671
9       3.1416025102568 3.1415877252772
10      3.1415951177496 3.1415914215112
11      3.1415932696293 3.1415923455701
12      3.1415928075996 3.1415925765849
13      3.1415926920923 3.1415926343386
14      3.1415926632154 3.141592648777
15      3.1415926559962 3.1415926523866
16      3.1415926541914 3.141592653289
17      3.1415926537402 3.1415926535146
18      3.1415926536274 3.141592653571
19      3.1415926535992 3.1415926535851
20      3.1415926535921 3.1415926535886
21      3.1415926535904 3.1415926535895
22      3.1415926535899 3.1415926535897
23      3.1415926535898 3.1415926535898
24      3.1415926535898 3.1415926535898
25      3.1415926535898 3.1415926535898
26      3.1415926535898 3.1415926535898
27      3.1415926535898 3.1415926535898
28      3.1415926535898 3.1415926535898
29      3.1415926535898 3.1415926535898
30      3.1415926535898 3.1415926535898
</code-area>



<p><a name="k02"></a></p>
<h1>2. Logické operátory</h1>

<p>Při zápisu logických výrazů v&nbsp;podmínkách a programových smyčkách se
často využívají logické operátory. V&nbsp;programovacím jazyku <i>Lua</i>
nejsou tyto operátory reprezentovány speciálními symboly (tak jako u jazyků
odvozených od Céčka), ale klíčovými slovy <strong>and</strong> (logický
součin), <strong>or</strong> (logický součet) a <strong>not</strong> (logická
negace) &ndash; viz tabulku vypsanou pod odstavcem. Jako operandy logických
operátorů mohou vystupovat jak logické proměnné a konstanty
(<strong>true</strong>, <strong>false</strong>), tak i hodnoty dalších datových
typů, přičemž pouze hodnoty <strong>false</strong> a <strong>nil</strong> jsou
považovány za &bdquo;nepravdu&ldquo;, všechny ostatní hodnoty jsou
definitoricky pravdivé (pozor &ndash; některé jiné jazyky považují za hodnotu
&bdquo;nepravda&ldquo; i prázdné řetězce, v&nbsp;<i>Lua</i> to však neplatí,
jak si ostatně ukážeme na demonstračním příkladu). Následuje tabulka
s&nbsp;trojicí podporovaných logických operátorů:</p>

<table>
<tr><th>Symbol operátoru</th><th>Arita</th><th>Popis</th></tr>
<tr><td><strong>and</strong></td><td>binární</td><td>logický součin</td></tr>
<tr><td><strong>or </strong></td><td>binární</td><td>logický součet</td></tr>
<tr><td><strong>not</strong></td><td>unární</td><td>logická negace</td></tr>
</table>

<p>Od mnoha dalších programovacích jazyků se <i>Lua</i> odlišuje v&nbsp;tom, že
výsledkem vyhodnocení logických operátorů nemusí být nutně jedna z&nbsp;hodnot
<strong>true</strong> či <strong>false</strong>, ale přímo jeden
z&nbsp;operandů &ndash; pokud je hodnota prvního operandu u operátoru
<strong>and</strong> rovna <strong>false</strong> či <strong>nil</strong>, je
tato hodnota přímo vrácena bez její další konverze (pokud se jedná o výraz, je
samozřejmě následně vyčíslen). V&nbsp;opačném případě je vrácena hodnota
druhého operandu bez jeho převodu na logickou hodnotu. Logický operátor
<strong>or</strong> pracuje podobně &ndash; pokud je jeho první operand
rozdílný od <strong>false</strong> či <strong>nil</strong>, vrátí přímo jeho
hodnotu, v&nbsp;opačném případě vrátí druhý operand (mnoho podmínek lze díky
tomuto chování nahradit pouze logickým výrazem). Oba zmíněné logické operátory
vyhodnocují druhý operand pouze v&nbsp;případě nutnosti, tj.&nbsp;pokud
výsledek není známý už z&nbsp;vyhodnocení operandu prvního (jedná se o takzvané
<i>zkrácené vyhodnocování</i> neboli <i>short cut evaluation</i>). Tato
vlastnost vede k&nbsp;častému používání idiomu typu <i>if t~=nil and
t.currentline&gt;=0 then</i>, který by nemohl být použitý u jazyků, které
zkrácené vyhodnocování logických výrazů neprovádějí.</p>

<p>Následuje příklad, který některé vlastnosti logických operátorů
přiblíží:</p>

<code-area>-- logicke operatory
print()
print("logicky operator and")
print("false and false  =", false and false)
print("true  and false  =", true  and false)
print("false and true   =", false and true )
print("true  and true   =", true  and true )
print("true  and 'ahoj' =", true  and 'ahoj')
print("true  and nil    =", true  and nil)
print("false and 'ahoj' =", false and 'ahoj')
print("nil   and 'ahoj' =", nil   and 'ahoj')
print("'ahoj' and nil   =", 'ahoj'and nil)

print()
print("logicky operator or")
print("false or false  =", false or false)
print("true  or false  =", true  or false)
print("false or true   =", false or true )
print("true  or true   =", true  or true )
print("true  or 'ahoj' =", true  or 'ahoj')
print("true  or nil    =", true  or nil)
print("false or 'ahoj' =", false or 'ahoj')
print("nil   or 'ahoj' =", nil   or 'ahoj')
print("'ahoj' or nil   =", 'ahoj'or nil)

print()
print("logicky operator not")
print("not false=", not false)
print("not true =", not true)
print("not nil  =", not nil)
print("not ''   =", not '') -- prazdny retezec je "pravdivy"
print("not not ''=", not not '')

-- finito
</code-area>

<p>Výstup příkladu po jeho spuštění:</p>

<code-area>logicky operator and
false and false  =      false
true  and false  =      false
false and true   =      false
true  and true   =      true
true  and 'ahoj' =      ahoj
true  and nil    =      nil
false and 'ahoj' =      false
nil   and 'ahoj' =      nil
'ahoj' and nil   =      nil

logicky operator or
false or false  =       false
true  or false  =       true
false or true   =       true
true  or true   =       true
true  or 'ahoj' =       true
true  or nil    =       true
false or 'ahoj' =       ahoj
nil   or 'ahoj' =       ahoj
'ahoj' or nil   =       ahoj

logicky operator not
not false=      true
not true =      false
not nil  =      true
not ''   =      false
not not ''=     true
</code-area>



<p><a name="k03"></a></p>
<h1>3. Relační operátory</h1>

<p>Programovací jazyk <i>Lua</i> obsahuje obvyklou sadu šesti relačních
operátorů vracejících pravdivostní hodnotu <strong>true</strong> či
<strong>false</strong>, které jsou vypsány v&nbsp;tabulce umístěné pod tímto
odstavcem. Tyto operátory mohou sloužit jak pro vzájemné porovnání číselných
hodnot, tak i řetězců (lexikografické porovnání) a v&nbsp;některých případech i
dalších datových typů (například u tabulek jsou porovnávány reference, nikoli
jejich obsah). Důležitý je především operátor rovnosti <strong>==</strong> a
jeho negace <strong>~=</strong>. Tento operátor nejprve porovnává typ obou
operandů a pokud se typy liší, vrací se automaticky hodnota
<strong>false</strong> (nedojde tedy k&nbsp;automatické konverzi!). Teprve
v&nbsp;případě, že jsou typy obou operandů shodné, dojde k&nbsp;jejich
skutečnému porovnání. V&nbsp;praxi to například znamená, že výsledek porovnání
<i>"10"==10</i> bude vždy <strong>false</strong>, i když v&nbsp;jiných
případech (aritmetické operátory atd.) by <i>Lua</i> v&nbsp;případě potřeby
provedla konverzi řetězce na číselnou hodnotu či naopak konverzi číselné
hodnoty na řetězec.</p>

<table>
<tr><th>Symbol operátoru</th><th>Arita</th><th>Popis</th></tr>
<tr><td><strong>==   </strong></td><td>binární</td><td>rovnost</td></tr>
<tr><td><strong>~=   </strong></td><td>binární</td><td>nerovnost</td></tr>
<tr><td><strong>&lt; </strong></td><td>binární</td><td>menší než</td></tr>
<tr><td><strong>&gt; </strong></td><td>binární</td><td>větší než</td></tr>
<tr><td><strong>&lt;=</strong></td><td>binární</td><td>menší nebo rovno</td></tr>
<tr><td><strong>&gt;=</strong></td><td>binární</td><td>větší nebo rovno</td></tr>
</table>

<p>Následuje demonstrační příklad, ve kterém jsou relační operátory použity pro
porovnání řetězců i číselných hodnot:</p>

<code-area>-- lexikograficke porovnani retezcu
print("'a'&lt;'b': ", "a" &lt; "b")
print("'a'&lt;='b': ", "a" &lt;= "b")
print("'aa' &lt; 'ab': ", "aa" &lt; "ab")
print("'aaaaaa' ~= 'aaaaab'", "aaaaaa" ~= "aaaaab")

-- pozor, operator == nejprve porovnava
-- typy operandu a az po jejich shode
-- vlastni hodnoty
print('"a"=="a":',   "a"=="a")
print('10==10:',     10==10)
print('"10"=="10":', "10"=="10")
print('"10"==10:',   "10"==10) -- !!!!

-- finito
</code-area>

<p>Výstup programu:</p>

<code-area>'a'&lt;'b':          true
'a'&lt;='b':         true
'aa' &lt; 'ab':      true
'aaaaaa' ~= 'aaaaab' true
"a"=="a":            true
10==10:              true
"10"=="10":          true
"10"==10:            false
</code-area>



<p><a name="k04"></a></p>
<h1>4. Spojení řetězců a operátor vracející délku struktury</h1>

<p>Dva poslední operátory, se kterými se dnes seznámíme, slouží ke spojení dvou
řetězců a zjištění délky řetězce či jiné datové struktury (typicky
asociativního pole). Řetězce je možné spojit pomocí operátoru zapisovaného
dvojicí teček <strong>..</strong>. Tento (na první pohled možná poněkud
nadbytečný) operátor byl do jazyka přidán zejména kvůli automatickým typovým
konverzím, protože výraz typu <i>"10"+"20"</i> je vyhodnocen &ndash; nezávisle
na tom, že oba operandy jsou řetězce &ndash; na hodnotu <i>30</i>
v&nbsp;důsledku výše zmíněné automatické typové konverze. Unární operátor
<strong>#</strong> vrací délku řetězce nebo jiné datové struktury (pole).
Například příkaz <i>print(#"Hello world!")</i> vypíše na standardní výstup
číslo 12. Vypočtená délka se liší podle toho, na jaký typ dat je operátor
<strong>#</strong> aplikován. U řetězců se vrátí počet bajtů nutných pro jejich
uložení do operační paměti (ve skutečnosti je nutné kromě vlastního řetězce do
paměti uložit i jeho délku, ta se však do výsledku nezapočítá) u asociativního
pole s&nbsp;celočíselnými (po sobě jdoucími) indexy pak počet jeho prvků
&ndash; viz další kapitoly.</p>

<table>
<tr><th>Symbol operátoru</th><th>Arita</th><th>Popis</th></tr>
<tr><td><strong>..</strong></td><td>binární</td><td>spojení dvou řetězců nebo číslic převedených na řetězec</td></tr>
<tr><td><strong>#</strong></td><td>unární</td><td>délka řetězce nebo velikost asociativního pole</td></tr>
</table>



<p><a name="k05"></a></p>
<h1>5. Priority operátorů</h1>

<p>Jednotlivé operátory popsané v&nbsp;předchozích kapitolách je možné rozdělit
podle jejich <i>priority</i> do osmi skupin. Priorita, pomocí níž se určuje,
které části výrazu se vyhodnotí nejdříve, se určuje již při překladu programu.
Operátorem s&nbsp;nejvyšší prioritou je umocňování <strong>^</strong>, naopak
nejnižší prioritu má logický operátor <strong>or</strong>. Při pohledu na níže
uvedenou tabulku zjistíme, že priority operátorů jsou zvoleny velmi rozumně
&ndash; odpovídají jak matematickým pravidlům (umocňování má nejvyšší prioritu,
následuje násobení a dělení, naopak sčítání a odčítání jsou aritmetické
operátory s&nbsp;nejnižší prioritou), tak i požadavkům z&nbsp;programátorské
praxe, aby se zabránilo nutnosti používání zbytečných závorek například při
psaní příkazů typu:<br />
<i>if x&gt;10 and x&lt;20 or x&gt;110 and x&lt;120 then ... end</i>.</p>
     
<table>
<tr><th>Priorita</th><th>Operátory</th></tr>
<tr><td>1 (nejvyšší)</td><td><strong>^</strong></td></tr>
<tr><td>2           </td><td><strong>not # unární minus (-)</strong></td></tr>
<tr><td>3           </td><td><strong>* / %</strong></td></tr>
<tr><td>4           </td><td><strong>+ -</strong></td></tr>
<tr><td>5           </td><td><strong>..</strong></td></tr>
<tr><td>6           </td><td><strong>== ~= &lt; &gt; &lt;= &gt;=</strong></td></tr>
<tr><td>7           </td><td><strong>and</strong></td></tr>
<tr><td>8 (nejnižší)</td><td><strong>or</strong></td></tr>
</table>



<p><a name="k06"></a></p>
<h1>6. Asociativní pole</h1>

<p>V&nbsp;předchozí části tohoto seriálu jsme si popsali jednotlivé datové
typy, se kterými můžeme v&nbsp;programovacím jazyku <i>Lua</i> pracovat. Mezi
podporovanými datovými typy se nachází i <i>asociativní pole</i>, někdy také
nazývané <i>hashmapa</i>. Jedná se o datovou strukturu, v&nbsp;níž jsou uloženy
dvojice klíč&ndash;hodnota, kde klíčem může být libovolný typ kromě typu
<strong>nil</strong>, hodnota může být libovolná (může se jednat i o další
pole, funkci atd.). V&nbsp;případě, že za klíče jsou zvolena přirozená čísla,
jsou asociativní pole ze sémantického hlediska rovnocenná klasicky chápaným
indexovaným polím. Tento datový typ tak představuje základ jak pro tvorbu
indexovaných polí, tak i seznamů, zásobníků, front, stromů, struktur typu
záznam (jako klíče jsou v&nbsp;tomto případě použity řetězce) a dokonce i
objektů (jako hodnoty uložené v&nbsp;asociativním poli lze totiž použít i
funkce, které tak vystupují v&nbsp;roli metod). V&nbsp;následujících kapitolách
si ukážeme základy práce s&nbsp;asociativním polem, podrobnější (a zajímavější)
způsoby práce budou vysvětleny v&nbsp;navazující části tohoto seriálu.</p>



<p><a name="k07"></a></p>
<h1>7. Vytvoření asociativního pole</h1>

<p>Existuje několik různých způsobů, pomocí nichž je možné vytvořit asociativní
pole. Nejjednodušší způsob spočívá v&nbsp;konstrukci pole jediným příkazem,
v&nbsp;němž jsou vypsány všechny ukládané dvojice klíč&ndash;hodnota:</p>

<code-area>
pole={klic1="hodnota1", klic2="hodnota2"}
</code-area>

<p>Popř.&nbsp;je povolené za poslední dvojicí uvést čárku navíc. Tato čárka se
může objevit například v&nbsp;automaticky generovaném kódu (mimochodem
například populární formát <i>JSON</i> založený na JavaScriptu tuto čárku
nepovoluje, což zbytečně komplikuje všechny generátory dat). Verze
s&nbsp;nadbytečnou čárkou vypadá velmi podobně jako předchozí úryvek kódu:</p>

<code-area>
pole={klic1="hodnota1", klic2="hodnota2"}
</code-area>

<p>V&nbsp;případě, že se má vytvořit &bdquo;klasické&ldquo; pole
s&nbsp;celočíselnými indexy, je možné specifikaci klíčů vynechat. V&nbsp;tomto
případě překladač sám potřebné indexy doplní; ovšem musíme si dát pozor na to,
že v&nbsp;<i>Lua</i> indexy začínají od jedničky, nikoli od nuly, jak je tomu
v&nbsp;některých dalších programovacích jazycích! (důvod hledejme
v&nbsp;historii tohoto jazyka, který byl určen zejména pro laiky a nikoli
profesionální programátory). Alternativní konstrukce pole s&nbsp;automaticky
generovanými klíči vypadá následovně:</p>

<code-area>
pole={"hodnota1", "hodnota2", "hodnota3",}
</code-area>

<p>Oba dva způsoby je možné navzájem promíchat. V&nbsp;tomto případě se u prvků
neobsahujících klíč budou automaticky dopočítávat indexy, a u prvků, jež klíč
obsahují, se samozřejmě klíč do asociativního pole uloží v&nbsp;nezměněné
podobě. Důležité je, že i explicitním zadáním celočíselného klíče se nemění
hodnota interního čítače, pomocí kterého překladač asociativní pole konstruuje
(jinými slovy &ndash; nemůžeme překladači jednoduše nařídit, aby například
začal automaticky číslování od hodnoty 42). Vše možná osvětlí následující
příklad, ve kterém se asociativní pole konstruuje s&nbsp;prvky, z&nbsp;nichž u
některých je klíč uveden explicitně a u dalších se ponechává generování klíče
(tj.&nbsp;v&nbsp;tomto případě indexu) na překladači. O výpis celého pole se
stará smyčka typu <i>foreach</i> spolu s&nbsp;funkcí <i>pairs</i>, pomocí níž
je možné iterovat celým asociativním polem:</p>

<code-area>pole={klic1="hodnota1", "hodnota2", klic2="hodnota3", "hodnota4"}

for klic,hodnota in pairs(pole) do
    print(klic, hodnota)
end
</code-area>

<p>Výstup programu:</p>

<code-area>1       hodnota2
2       hodnota4
klic1   hodnota1
klic2   hodnota3
</code-area>

<p>Vzhledem k&nbsp;tomu, že klíč je v&nbsp;poli vždy jedinečný (může existovat
maximálně jeden prvek s&nbsp;daným klíčem), může nastat situace, že se při
konstrukci pole prvky navzájem přepíšou, jako tomu je v&nbsp;následujícím
případě, kde je původní hodnota <i>"hodnota1"</i> přepsána novým řetězcem
<i>"hodnotax"</i>:</p>

<code-area>pole={klic1="hodnota1", "hodnota2", klic2="hodnota3", "hodnota4", klic1="hodnotax", }
</code-area>



<p><a name="k08"></a></p>
<h1>8. Přístup k&nbsp;prvkům asociativního pole</h1>

<p>Po zkonstruování asociativního pole je možné přistupovat k&nbsp;jeho
jednotlivým prvkům pomocí zápisu, který je prakticky shodný ve většině
současných programovacích jazyků: <i>identifikátor_pole[klíč]</i>. Za
identifikátor (jméno) asociativního pole se do hranatých závorek zapíše klíč,
což může být libovolná hodnota (typicky číslo či řetězec), proměnná či výraz.
V&nbsp;případě, že se v&nbsp;asociativním poli nachází prvek s&nbsp;daným
klíčem, je hodnota tohoto prvku vrácena. Pokud prvek naopak nalezen není, vrátí
se hodnota <strong>nil</strong>. Kromě tohoto způsobu zápisu nabízí <i>Lua</i>
i alternativní způsob (syntaktický cukr), který se často používá
v&nbsp;případech, kdy jsou asociativní pole použita ve funkci záznamu
(<i>record, struct</i>) či objektu. Tento způsob se zapisuje následovně:
<i>identifikátor_pole.klíč</i>, tj.&nbsp;klíč zde není uveden v&nbsp;hranatých
závorkách, ale za identifikátorem pole, od něhož je oddělen tečkou. Příklad
použití:</p>

<code-area>pole={klic1="hodnota1", "hodnota2", klic2="hodnota3", "hodnota4"}

print(pole["klic1"])
print(pole["klic2"])
print(pole["klic3"]) -- neexistujici prvek, vypise se "nil"
print(pole.klic1)
print(pole.klic2)
print(pole.klic3)    -- neexistujici prvek, vypise se "nil"
</code-area>

<p>Po spuštění programu se na standardní výstup vypíše:</p>

<code-area>hodnota1
hodnota3
nil
hodnota1
hodnota3
nil
</code-area>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

