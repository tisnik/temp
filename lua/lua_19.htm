<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Hrátky se systémem LÖVE - dokončení</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Hrátky se systémem LÖVE - dokončení</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o programovacím jazyku Lua dokončíme popis &bdquo;herního&ldquo; systému LÖVE. Řekneme si, jaké další vazby mezi tělesy je možné v tomto systému použít. Popis bude, podobně jako v předchozích částech seriálu, doprovázen animacemi i několika demonstračními příklady.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Typy vazeb mezi tělesy a vytvoření těchto vazeb</a><br />
<a href="#k02">2. Vazba typu &bdquo;DistanceJoint&ldquo;</a><br />
<a href="#k03">3. Vazba typu &bdquo;MouseJoint&ldquo;</a><br />
<a href="#k04">4. První demonstrační příklad &ndash; použití vazby typu &bdquo;MouseJoint&ldquo;</a><br />
<a href="#k05">5. Vazba typu &bdquo;RevoluteJoint&ldquo;</a><br />
<a href="#k06">6. Druhý demonstrační příklad &ndash; vazba typu &bdquo;RevoluteJoint&ldquo;</a><br />
<a href="#k07">7. Vazba typu &bdquo;PrismaticJoint&ldquo;</a><br />
<a href="#k08">8. Literatura a odkazy na Internetu</a><br />
<a href="#k09">9. Obsah další části seriálu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Typy vazeb mezi tělesy a vytvoření těchto vazeb</h1>

<p>V&nbsp;dnešní části seriálu o programovacím jazyku <i>Lua</i> a knihovnách
vytvořených pro tento jazyk dokončíme popis herního systému <i>LÖVE</i>.
Ukážeme si způsob vytvoření a využití dalších tří typů vazeb mezi
dvourozměrnými tělesy, pomocí nichž je například možné simulovat chování
kladky, páky či podobného jednoduchého stroje. V&nbsp;předchozí části tohoto
seriálu jsme si popsali a na několika demonstračních příkladech ukázali využití
pružné (elastické) vazby představované objekty typu
<strong>love.physics.DistanceJoint</strong>, kromě nich je však možné použít i
vazby reprezentované objekty typu <strong>love.physics.RevoluteJoint</strong>
(rotace těles okolo společného bodu, rotaci je dokonce možné pohánět pomocí
motoru přiřazeného k&nbsp;tomuto typu vazby),
<strong>love.physics.PrismaticJoint</strong> (posun těles po společné ose, opět
s&nbsp;využitím pohonu přiřazeného k&nbsp;vazbě) a také
<strong>love.physics.MouseJoint</strong> (posun tělesa pomocí myši). Všechny
čtyři typy objektů představujících vazby mezi tělesy jsou pro přehlednost
vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Název objektu</th><th>Popis</th></tr>
<tr><td>love.physics.DistanceJoint</td><td>pružná vazba, která se snaží
zachovat konstantní vzdálenost mezi tělesy, jenž jsou touto vazbou
spojeny</td></tr>
<tr><td>love.physics.RevoluteJoint</td><td>definice společné osy otáčení pro
dvojici těles</td></tr>
<tr><td>love.physics.PrismaticJoint</td><td>definice společné osy posuvu pro
dvojici těles</td></tr>
<tr><td>love.physics.MouseJoint</td><td>vazba, pomocí níž je možné působit na
zvolené těleso silou, jejíž vektor je odvozen od aktuální souřadnice kurzoru
myši a polohou koncového bodu vazby</td></tr>
</table>

<p>Každý objekt reprezentující vazbu se vytváří pomocí jednoho ze čtyř
konstruktorů, které jsou vypsány v&nbsp;tabulce níže. První tři typy vazeb se
vytváří vždy mezi dvojicí existujících těles, tj.&nbsp;první dva parametry
představují objekt typu těleso (<i>body</i>). Pouze u posledního typu vazby je
určeno jen jedno těleso &ndash; druhým objektem je v&nbsp;tomto případě vždy
kurzor myši, resp.&nbsp;jeho aktivní bod.</p>

<table>
<tr><th>Konstruktor</th><th>Počet parametrů</th><th>Parametry</th></tr>
<tr><td>love.physics.newDistanceJoint() </td><td>6</td><td>dvě tělesa a koncové
body pružné vazby (kotvicí body)</td></tr>
<tr><td>love.physics.newRevoluteJoint() </td><td>4</td><td>dvě tělesa a
souřadnice kotvicího bodu (osy) v&nbsp;rovině</td></tr>
<tr><td>love.physics.newPrismaticJoint()</td><td>6</td><td>dvě tělesa,
souřadnice kotvicího bodu v&nbsp;rovině a bod určující (spolu s&nbsp;kotvicím
bodem) společnou osu pro posuv</td></tr>
<tr><td>love.physics.newMouseJoint()    </td><td>3</td><td>jedno těleso a
koncový bod vazby (druhé těleso i příslušný kotvicí bod odpovídá kurzoru
myši)</td></tr>
</table>



<p><a name="k02"></a></p>
<h1>2. Vazba typu &bdquo;DistanceJoint&ldquo;</h1>

<p>Vazbu typu <i>DistanceJoint</i> jsme si již poměrně dopodrobna popsali
v&nbsp;předchozí části tohoto seriálu, spolu s&nbsp;několika demonstračními
příklady. Pomocí objektů typu <strong>love.physics.DistanceJoint</strong> je
možné vytvořit elastické vazby, které simulují (tlumené) pružiny natažené mezi
dvojicí těles, které se v&nbsp;průběhu simulace snaží dosáhnout své klidové
délky. Při natažení či stlačení pružiny, tj.&nbsp;ve chvíli, kdy se změní
nastavená vzdálenost mezi tělesy, začne na obě tělesa spojená touto vazbou
působit síla úměrná rozdílu mezi klidovou délkou a délkou aktuální. Systém
<i>LÖVE</i> se snaží napodobit reálné pružiny, takže se při výpočtu sil
působících na obě tělesa bere do úvahy i tlumení, které mj.&nbsp;zabraňuje
numerickým nestabilitám ve výpočtech (pokud by tlumení bylo nulové, mohlo by
při numerických výpočtech dojít ke stálému růstu vzdáleností i sil působících
mezi tělesy, takže by zákmity pružiny neustále rostly). V&nbsp;tabulce níže
jsou vypsány metody nabízené objektem typu
<strong>love.physics.DistanceJoint</strong>:</p>

<table>
<tr><th>Název metody</th><th>Popis</th></tr>
<tr><td>getLength()   </td><td>získání klidové vzdálenosti mezi oběma tělesy.</td></tr>
<tr><td>getFrequency()</td><td>získání rychlosti reakce pružiny na její natažení či stlačení.</td></tr>
<tr><td>getDamping()  </td><td>získání míry tlumení pružiny (eliminace zákmitů).</td></tr>
<tr><td>setLength()   </td><td>nastavení klidové vzdálenosti mezi oběma tělesy.</td></tr>
<tr><td>setFrequency()</td><td>nastavení rychlosti reakce pružiny na její natažení či stlačení.</td></tr>
<tr><td>setDamping()  </td><td>nastavení míry tlumení.</td></tr>
<tr><td>destroy()     </td><td>explicitní zrušení elastické vazby (většinou není nutné provádět).</td></tr>
</table>

<br /><br />

<img src="http://i.iinfo.cz/images/43/lua1901.gif" width="400" height="300" alt="lua1901" />
<p><i>Animace 1: Využití objektů typu DistanceJoint pro vytvoření systémů těles
propojených elastickými vazbami.</i></p>



<p><a name="k03"></a></p>
<h1>3. Vazba typu &bdquo;MouseJoint&ldquo;</h1>

<p>Vazba typu <i>MouseJoint</i> se používá tehdy, pokud je zapotřebí působit na
těleso silou, jenž je odvozena od aktuální pozice kurzoru myši,
tj.&nbsp;tělesem je možné posunovat popř.&nbsp;otáčet pomocí myši nebo i
programově, protože místo souřadnic kurzoru myši lze dosadit libovolnou dvojici
numerických hodnot. V&nbsp;určitém ohledu se tato vazba, vytvořená
konstruktorem <strong>love.physics.newMouseJoint()</strong>, podobá pružné
vazbě vytvořené pomocí objektu <i>DistanceJoint</i>, ovšem s&nbsp;tím rozdílem,
že se u vazby <i>MouseJoint</i> nezadává vzdálenost mezi kurzorem myši a bodem
ležícím uvnitř tělesa, ale pouze jediný koncový bod, z&nbsp;jehož pozice a
souřadnice kurzoru myši se odvozuje síla, která na těleso působí. Čím více se
kurzor vzdálí od bodu zadaného metodou <strong>setTarget()</strong>
(popř.&nbsp;přímo při volání konstruktoru), tím větší na těleso působí síla,
která však nemůže přesáhnout hodnotu nastavenou pomocí metody
<strong>setMaxForce()</strong>. Vektor síly, tj.&nbsp;jeho orientace i
velikost, je samozřejmě vypočten na základě zadaného koncového bodu a aktuální
polohy myši na obrazovce.</p>

<table>
<tr><th>Název metody</th><th>Popis</th></tr>
<tr><td>getTarget()   </td><td>vrací souřadnice koncového bodu této vazby (dvojici hodnot x, y)</td></tr>
<tr><td>getMaxForce() </td><td>vrací maximální nastavenou sílu, kterou může tato vazba na těleso působit</td></tr>
<tr><td>setTarget()   </td><td>nastavení (změna) koncového bodu vazby</td></tr>
<tr><td>setMaxForce() </td><td>nastavení maximální síly, kterou může vazba působit na vybrané těleso při změně pozice kurzoru myši či při pohybu tělesa</td></tr>
<tr><td>destroy()     </td><td>explicitní zrušení této vazby (většinou není nutné provádět).</td></tr>
</table>



<p><a name="k04"></a></p>
<h1>4. První demonstrační příklad &ndash; použití vazby typu &bdquo;MouseJoint&ldquo;</h1>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázáno, jakým způsobem je
možné použít vazbu typu <i>MouseJoint</i> pro změnu polohy vybraného tělesa
v&nbsp;simulovaném 2D světě. Ve vytvořené scéně se nachází větší množství
těles, přičemž každému tělesu je přiřazen tvar (shape) odpovídající obdélníku.
Jedno z&nbsp;těles, které je vykresleno žlutou barvou, je pomocí již zmíněné
vazby <i>MouseJoint</i> spojeno s&nbsp;kurzorem myši. Po spuštění příkladu se
kurzor myši nachází uprostřed tohoto tělesa, kam byl umístěn pomocí metody
<strong>love.mouse.setPosition(x,y)</strong>, a při každém jeho pohybu a
stlačení některého z&nbsp;tlačítek myši na těleso působí síla, která ho
z&nbsp;původní polohy vychyluje &ndash; viz animace uvedená pod výpisem
zdrojového kódu tohoto demonstračního příkladu. Červenou úsečkou je naznačen
vektor síly. Směr i velikost tohoto vektoru samozřejmě odpovídá odchylce pozice
kurzoru myši (ve chvíli, kdy bylo stlačeno některé její tlačítko) od jeho
výchozí polohy v&nbsp;tělese. Zdrojový kód tohoto demonstračního příkladu má
tvar:</p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua", část číslo 19
--
-- První demonstrační příklad: využití vazby
-- typu MouseJoint.
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- objekt představující svět, ve kterém se provádí simulace
world = nil

-- odrazivost tělesa
body_restitution = 0.3

-- počitadlo snímků
frame = 0

-- pole těles
bodies = {}

-- pole tvarů
shapes = {}

-- těleso a tvar ovládaný myší
mouse_body = nil
mouse_shape = nil

-- inicializace všech potřebných objektů a datových struktur
function load()

    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)

    -- načtení fontu
    local font = love.graphics.newFont(love.default_font, 16)
    love.graphics.setFont(font)

    -- vytvoření "světa" o rozměrech 2000x2000 délkových jednotek
    world = love.physics.newWorld(2000, 2000)
    world:setGravity(0, 50)

    -- podlaha na souřadnicích [0, 0] s nulovou hmotností
    ground_body = love.physics.newBody(world, 0, 0, 0)

    -- obdélník představující podlahu
    ground_shape = love.physics.newRectangleShape(ground_body, 400, 550, 700, 10)

    createBodies()
    createShapes()

    createMouseBody()
end

-- vytvoření těles na zadaných souřadnicích
function createBodies()
    bodies[0] = love.physics.newBody(world, 200, 550-100)
    bodies[1] = love.physics.newBody(world, 350, 550-100)
    bodies[2] = love.physics.newBody(world, 500, 550-100)
    bodies[3] = love.physics.newBody(world, 650, 550-100)
    bodies[4] = love.physics.newBody(world, 275, 550-250)
    bodies[5] = love.physics.newBody(world, 425, 550-250)
    bodies[6] = love.physics.newBody(world, 575, 550-250)
end

-- vytvoření tvarů k tělesům uloženým v asociativním poli bodies
function createShapes()
    for i = 0, #bodies do
        -- přiřazení tvaru k tělesu
        shapes[i] = love.physics.newRectangleShape(bodies[i], 0, 0, 100, 100)

        -- nastavení odrazivosti
        shapes[i]:setRestitution(body_restitution)

        -- výpočet hmotnosti
        bodies[i]:setMassFromShapes()
    end
end

-- vytvoření tělesa ovládaného myší
function createMouseBody()
    -- těleso ovládané myší
    mouse_body = love.physics.newBody(world, 420, 100)
    mouse_shape = love.physics.newRectangleShape(mouse_body, 0, 0, 50, 50)
    -- nastavení odrazivosti tělesa
    mouse_shape:setRestitution(body_restitution)

    -- výpočet hmotnosti tělesa
    mouse_body:setMassFromShapes()

    -- povolení zobrazení kurzoru myši a vytvoření vazby
    love.mouse.setVisible(true)
    love.mouse.setPosition(420, 100)
    mouseJoint = love.physics.newMouseJoint(mouse_body, 420, 100)
    --mouseJoint:setMaxForce(10000000)
end

-- pravidelně volaná callback funkce
function update(dt)
    world:update(dt)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
    love.graphics.setColor(160, 250, 160)
    love.graphics.setLineWidth(2)

    -- vykreslení podlahy a dalších nepohyblivých předmětů
    love.graphics.polygon(love.draw_line, ground_shape:getPoints())

    -- vykreslení všech těles
    love.graphics.setColor(250, 160, 250)
    for i=0, #bodies do
        local body = bodies[i]
        love.graphics.polygon(love.draw_line, shapes[i]:getPoints())
    end

    -- vykreslení ovládaného tělesa
    love.graphics.setColor(250, 250, 0)
    love.graphics.polygon(love.draw_line, mouse_shape:getPoints())

    -- vykreslení vektoru představujícího vazbu
    love.graphics.setColor(250, 100, 100)
    -- první koncový bod úsečky je získán přímo z objektu představujícího vazbu
    local x, y = mouseJoint:getTarget()
    -- druhý koncový bod je představován středem tělesa
    love.graphics.line(x, y, mouse_body:getX(), mouse_body:getY())

    -- výpis počitadla snímků
    love.graphics.setColor(255, 0, 255)
    love.graphics.draw(string.format("frame: %d", frame), 10, 20)
    frame = frame + 1

    -- výpis nápovědy
    love.graphics.setColor(0, 255, 128)
    love.graphics.draw("[q] quit", 560, 20)
    love.graphics.draw("[r] restart", 560, 40)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    -- klávesou [ESC] nebo [Q] se celá simulace ukončí
    if key == love.key_escape or key == love.key_q then
        love.system.exit()
    end
    -- klávesou [R] se celý systém restartuje
    if key == love.key_r then
        love.system.restart()
    end
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí či pustí nějaké tlačítko myši
function mousepressed(x, y, button)
    -- nastavení nového výchozího bodu pro vazbu
    mouseJoint:setTarget(x,y)
end

-- finito

</pre>

<img src="http://i.iinfo.cz/images/265/lua1902.gif" width="400" height="300" alt="lua1902" />
<p><i>Animace 2: Posun žlutého tělesa pomocí myši.</i></p>



<p><a name="k05"></a></p>
<h1>5. Vazba typu &bdquo;RevoluteJoint&ldquo;</h1>

<p>Dalším typem vazby podporované systémem <i>LÖVE</i>, je vazba typu
<i>RevoluteJoint</i>. Pomocí této vazby je možné simulovat například kladku,
páku nebo jakoukoli dvojici těles, které jsou v&nbsp;jednom bodu spojeny osou a
mohou se okolo této osy otáčet. Vzhledem k&nbsp;tomu, že jsou veškeré simulace
prováděny v&nbsp;rovině, musí systém <i>LÖVE</i> pracovat pouze s&nbsp;jedním
stupněm volnosti. Při vytváření této vazby se zadávají čtyři parametry &ndash;
obě tělesa, která mají být pomocí této vazby propojena a souřadnice bodu, jenž
reprezentuje osu otáčení (střed kladky popř.&nbsp;bod, okolo kterého se otáčí
páka). Tuto vazbu je možné nakonfigurovat tak, aby úhel mezi oběma tělesy
(měřený v&nbsp;ose otáčení) zůstával v&nbsp;nastavených limitech &ndash; pro
tento účel slouží metody <strong>setLimitsEnabled()</strong>,
<strong>setUpperLimit()</strong>, <strong>setLowerLimit()</strong> a
<strong>setLimits()</strong>. Limitní úhly se zadávají v&nbsp;radiánech. Taktéž
je možné k&nbsp;ose připojit fiktivní <i>motor</i>, který oběma tělesy otáčí.
Pro povolení použití motoru a nastavení jeho vlastnostní se využívají metody
<strong>setMotorEnabled()</strong>, <strong>setMotorSpeed()</strong> (rychlost
otáčení) a <strong>setMaxMotorTorque()</strong> (točivá síla motoru, kterou
může působit na tělesa).</p>

<img src="http://i.iinfo.cz/images/117/lua1903.gif" width="139" height="97" alt="lua1903" />
<p><i>Obrázek 1: Vazba typu RevoluteJoint.</i></p>

<table>
<tr><th>Název metody</th><th>Popis</th></tr>
<tr><td>getAngle()               </td><td>získání aktuálně vypočteného úhlu</td></tr>
<tr><td>getSpeed()               </td><td>získání aktuální úhlové rychlosti</td></tr>
<tr><td>isMotorEnabled()         </td><td>vrátí hodnotu true pokud je povolené použití motoru</td></tr>
<tr><td>isLimitsEnabled()        </td><td>vrátí hodnotu true pokud jsou povoleny limity při výpočtu vazby mezi dvojicí těles</td></tr>
<tr><td>getMaxMotorTorque()      </td><td>vrátí maximální nastavenou točivou sílu motoru</td></tr>
<tr><td>getMotorSpeed()          </td><td>aktuální rychlost motoru</td></tr>
<tr><td>getMotorTorque()         </td><td>aktuální točivá síla motoru</td></tr>
<tr><td>getLowerLimit()          </td><td>vrátí dolní limit vazby</td></tr>
<tr><td>getUpperLimit()          </td><td>vrátí horní limit vazby</td></tr>
<tr><td>getLimits()              </td><td>vrátí dvojici: dolní i horní limit vazby</td></tr>
<tr><td>setMotorEnabled( motor ) </td><td>povolí či zakáže použití motoru</td></tr>
<tr><td>setMaxMotorTorque( force )</td><td>nastaví maximální točivou sílu motoru</td></tr>
<tr><td>setMotorSpeed( speed )   </td><td>nastaví rychlost motoru</td></tr>
<tr><td>setLimitsEnabled( limit )</td><td>povolí či zakáže použití limitů</td></tr>
<tr><td>setUpperLimit( upper )   </td><td>nastaví horní limit vazby</td></tr>
<tr><td>setLowerLimit( lower )   </td><td>nastaví spodní limit vazby</td></tr>
<tr><td>setLimits( lower, upper )</td><td>nastaví dolní i horní limit vazby</td></tr>
<tr><td>destroy()     </td><td>explicitní zrušení této vazby (většinou není nutné provádět).</td></tr>
</table>



<p><a name="k06"></a></p>
<h1>6. Druhý demonstrační příklad &ndash; vazba typu &bdquo;RevoluteJoint&ldquo;</h1>

<p>V&nbsp;dnešním druhém demonstračním příkladu je ukázáno použití vazby typu
<i>RevoluteJoint</i>. V&nbsp;simulované scéně se nachází trojice těles
představujících páky. Vždy dvojice pák (první a druhá, popř.&nbsp;druhá a
třetí) má nastavenu společnou osu otáčení. Díky působení gravitace na druhou a
třetí páku (první páka je vytvořena takovým způsobem, aby na ni gravitace
nepůsobila &ndash; viz příslušný konstruktor) se celá soustava pák při simulaci
pohybuje, ovšem nastavené vazby nedovolí, aby se páky od sebe oddělily &ndash;
jediný povolený pohyb je rotace okolo nastavených os. Odstraněním poznámek u
příkazů joints[1]:setMotorEnabled(true), joints[1]:setMotorSpeed(200) a
joints[1]:setMaxMotorTorque(100000000) je možné ke druhé ose rotace připojit
&bdquo;motor&ldquo; o zadané rychlosti otáčení a síle. Tento typ vazby je
základem pro výpočet inverzní kinematiky. Následuje výpis zdrojového kódu
dnešního druhého demonstračního příkladu:</p>

<pre>
-------------------------------------------------
-- Seriál "Programovací jazyk Lua", část číslo 19
--
-- Druhý demonstrační příklad: využití vazby
-- typu RevoluteJoint.
-------------------------------------------------

-- rozměry okna
window = {
    width = 800,
    height = 600
}

-- objekt představující svět, ve kterém se provádí simulace
world = nil

-- odrazivost tělesa
body_restitution = 0.3

-- počitadlo snímků
frame = 0

-- pole těles
bodies = {}

-- pole tvarů
shapes = {}

-- inicializace všech potřebných objektů a datových struktur
function load()

    -- inicializace grafického režimu
    love.graphics.setMode(window.width, window.height, false, false, 0)

    -- načtení fontu
    local font = love.graphics.newFont(love.default_font, 16)
    love.graphics.setFont(font)

    -- vytvoření "světa" o rozměrech 2000x2000 délkových jednotek
    world = love.physics.newWorld(2000, 2000)
    -- zákaz gravitace
    world:setGravity(0, 50)

    -- podlaha na souřadnicích [0, 0] s nulovou hmotností
    ground_body = love.physics.newBody(world, 0, 0, 0)

    -- obdélník představující podlahu
    ground_shape = love.physics.newRectangleShape(ground_body, 400, 550, 700, 10)

    createBodies()
    createShapes()
    createJoint()
end

-- vytvoření těles na zadaných souřadnicích
function createBodies()
    bodies[0] = love.physics.newBody(world, 300, 200, 0)
    bodies[1] = love.physics.newBody(world, 300+200-20, 200)
    bodies[2] = love.physics.newBody(world, 300+200-40+200, 200)
end

-- vytvoření tvarů k tělesům uloženým v asociativním poli bodies
function createShapes()
    -- přiřazení tvaru k tělesu
    shapes[0] = love.physics.newRectangleShape(bodies[0], 0, 0, 200, 20)
    shapes[1] = love.physics.newRectangleShape(bodies[1], 0, 0, 200, 20)
    shapes[2] = love.physics.newRectangleShape(bodies[2], -20, 0, 150, 20)

    -- nastavení odrazivosti
    shapes[1]:setRestitution(body_restitution)
    shapes[2]:setRestitution(body_restitution)

    -- výpočet hmotnosti
    bodies[1]:setMassFromShapes()
    bodies[2]:setMassFromShapes()
end

-- vytvoření vazby
function createJoint()
    revolvePoint = {}
    revolvePoint.x= bodies[0]:getX() + 100 - 10
    revolvePoint.y= bodies[0]:getY()
    joints = {}
    joints[0] = love.physics.newRevoluteJoint(bodies[0], bodies[1], revolvePoint.x, revolvePoint.y)
    revolvePoint.x= bodies[1]:getX() + 100 - 10
    revolvePoint.y= bodies[1]:getY()
    joints[1] = love.physics.newRevoluteJoint(bodies[1], bodies[2], revolvePoint.x, revolvePoint.y)
    --joints[1]:setMotorEnabled(true)
    --joints[1]:setMotorSpeed(200)
    --joints[1]:setMaxMotorTorque(100000000)
end

-- pravidelně volaná callback funkce
function update(dt)
    world:update(dt/8)
end

-- callback funkce volaná průběžně ve chvíli, kdy je zapotřebí
-- překreslit obsah okna
function draw()
    love.graphics.setColor(160, 250, 160)
    love.graphics.setLineWidth(2)

    -- vykreslení podlahy a dalších nepohyblivých předmětů
    love.graphics.polygon(love.draw_line, ground_shape:getPoints())

    -- vykreslení všech těles
    love.graphics.setColor(160, 250, 250)
    for i=0, #bodies do
        local body = bodies[i]
        love.graphics.polygon(love.draw_line, shapes[i]:getPoints())
    end

    -- výpis počitadla snímků a dalších informací
    love.graphics.setColor(255, 0, 255)
    love.graphics.draw(string.format("frame: %d", frame), 10, 20)
    frame = frame + 1

    -- výpis nápovědy
    love.graphics.setColor(0, 255, 128)
    love.graphics.draw("[q] quit", 560, 20)
    love.graphics.draw("[r] restart", 560, 40)
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí nějakou klávesu
function keypressed(key)
    -- klávesou [ESC] nebo [Q] se celá simulace ukončí
    if key == love.key_escape or key == love.key_q then
        love.system.exit()
    end
    -- klávesou [R] se celý systém restartuje
    if key == love.key_r then
        love.system.restart()
    end
end

-- callback funkce volaná ve chvíli, kdy uživatel stlačí či pustí nějaké tlačítko myši
function mousepressed(x, y, button)
    -- nastavení nového výchozího bodu pro vazbu
    mouseJoint:setTarget(x,y)
end

-- finito

</pre>

<img src="http://i.iinfo.cz/images/530/lua1904.gif" width="400" height="300" alt="lua1904" />
<p><i>Animace 3: Použití vazby typu RevoluteJoint.</i></p>



<p><a name="k07"></a></p>
<h1>7. Vazba typu &bdquo;PrismaticJoint&ldquo;</h1>

<p>Posledním typem vazby mezi tělesy, který je v&nbsp;systému <i>LÖVE</i>
podporován, je vazba typu <i>PrismaticJoint</i>. S&nbsp;využitím této vazby je
možné spojit dvojici těles tak, aby se od sebe mohly vzdalovat (či se naopak
k&nbsp;sobě přibližovat) pouze po jedné ose, tj.&nbsp;stupeň volnosti pohybu je
o jednu dimenzi snížen. Podobně jako u předchozí vazby, i zde je možné nastavit
limity, popř.&nbsp;lze k&nbsp;vazbě připojit motor, který může oběma tělesy po
zadané ose pohybovat.</p>

<img src="http://i.iinfo.cz/images/129/lua1905.gif" width="165" height="134" alt="lua1905" />
<p><i>Obrázek 2: Vazba typu PrismaticJoint.</i></p>

<table>
<tr><th>Název metody</th><th>Popis</th></tr>
<tr><td>getTranslation()         </td><td>získání aktuálně vypočteného posunu</td></tr>
<tr><td>getSpeed()               </td><td>získání aktuální rychlosti</td></tr>
<tr><td>isMotorEnabled()         </td><td>vrátí hodnotu true pokud je povolené použití motoru</td></tr>
<tr><td>isLimitsEnabled()        </td><td>vrátí hodnotu true pokud jsou povoleny limity při výpočtu vazby mezi dvojicí těles</td></tr>
<tr><td>getMaxMotorForce()       </td><td>vrátí maximální nastavenou sílu motoru</td></tr>
<tr><td>getMotorSpeed()          </td><td>aktuální rychlost motoru</td></tr>
<tr><td>getMotorForce()          </td><td>aktuální síla motoru</td></tr>
<tr><td>getLowerLimit()          </td><td>vrátí dolní limit vazby</td></tr>
<tr><td>getUpperLimit()          </td><td>vrátí horní limit vazby</td></tr>
<tr><td>getLimits()              </td><td>vrátí dvojici: dolní i horní limit vazby</td></tr>
<tr><td>setMotorEnabled( motor ) </td><td>povolí či zakáže použití motoru</td></tr>
<tr><td>setMaxMotorForce( force )</td><td>nastaví maximální sílu motoru</td></tr>
<tr><td>setMotorSpeed( speed )   </td><td>nastaví rychlost motoru</td></tr>
<tr><td>setLimitsEnabled( limit )</td><td>povolí či zakáže použití limitů</td></tr>
<tr><td>setUpperLimit( upper )   </td><td>nastaví horní limit vazby</td></tr>
<tr><td>setLowerLimit( lower )   </td><td>nastaví spodní limit vazby</td></tr>
<tr><td>setLimits( lower, upper )</td><td>nastaví dolní i horní limit vazby</td></tr>
<tr><td>destroy()     </td><td>explicitní zrušení této vazby (většinou není nutné provádět).</td></tr>
</table>




<p><a name="k08"></a></p>
<h1>8. Literatura a odkazy na Internetu</h1>

<ol>

<li>Baraff David and Witkin Andrew: <br />
<i>Physically Based Modeling</i>,<br />
SIGGRAPH Course Notes, July 1998, pages B1&ndash;C12
</li>

<li>Magnetat-Thalmann B., Thalmann D. and Arnaldi B.: <br />
<i>Computer Animation and Simulation 2000</i>,<br />
Springer Verlag, Wien, ISBN 3-2118-3549-0
</li>

<li>Box2D Physics Engine (jedná se o engine, na němž je knihovna
<strong>love.physics</strong> založena)<br />
<a href="http://www.box2d.org/">http://www.box2d.org/</a></li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Tutoriály k&nbsp;systému LÖVE<br />
<a href="http://love2d.org/?page=documentation">http://love2d.org/?page=documentation</a>
</li>

<li>Screenshoty aplikací vytvořených v&nbsp;LÖVE<br />
<a href="http://love2d.org/screenshots">http://love2d.org/screenshots</a></li>

<li>Domovská stránka programovacího jazyka Lua<br />
<a href="http://www.lua.org/ ">http://www.lua.org/ </a>
</li>

<li>Lua<br />
<a href="http://www.linuxexpres.cz/praxe/lua">http://www.linuxexpres.cz/praxe/lua</a>
</li>

<li>Lua<br />
<a href="http://cs.wikipedia.org/wiki/Lua">http://cs.wikipedia.org/wiki/Lua</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

</ol>



<p><a name="k09"></a></p>
<h1>9. Obsah další části seriálu</h1>

<p>V&nbsp;následující části seriálu o programovacím jazyku <i>Lua</i> si
ukážeme, jakým způsobem je možné použít jednu z&nbsp;poměrně zdařilých
implementací tohoto jazyka. Jedná se o implementaci nazvanou příhodně
<i>LuaJ</i>, protože je vytvořena v&nbsp;programovacím jazyku <i>Java</i>,
přičemž výsledný interpret lze použít jak pro platformu J2SE (desktopy), tak i
J2ME (rozličná mobilní zařízení). Ve své podstatě se jedná o virtuální stroj
(<i>Lua Virtual Machine</i>) běžící ve druhém virtuálním stroji (<i>JVM &ndash;
Javva Virtual Machine</i>). Použitím platformy Java je mj.&nbsp;umožněno, aby
vytvářené skripty využívaly bez větších omezení všech knihoven poskytovaných
běhovým prostředím Javy (JRE), podobně jako tomu je například v&nbsp;případě
skriptovacího jazyka <i>Scala</i> či <i>Jythonu</i> (implementace Pythonu pro
JRE). Dokonce je možné použít interpret jazyka <i>Lua</i> jako standardní
skriptovací engine odpovídající JSR-233 (dynamické skriptování). Javovská verze
jazyka <i>Lua</i> si přitom zachovává svoji relativně malou velikost &ndash;
celý archiv obsahující jak interpret, tak i překladač, má necelých 160 kB.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

