<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Fun: knihovna pro zpracování konečných i nekonečných sekvenců v jazyce Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Fun: knihovna pro zpracování konečných i nekonečných sekvencí v jazyce Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Sekvence, a to včetně sekvencí nekonečných, jsou velmi užitečnou datovou abstrakcí, s níž jsme se již nesčetněkrát setkali zejména při popisu programovacího jazyka Clojure. Podobný koncept ovšem můžeme využít i v programovacím jazyce Lua, a to díky existenci knihovny s výmluvným názvem fun.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Fun: knihovna pro zpracování konečných i nekonečných sekvencí v&nbsp;jazyce Lua</a></p>
<p><a href="#k02">*** 2. Sekvence a lazy sekvence v&nbsp;programovacím jazyku Clojure</a></p>
<p><a href="#k03">*** 3. Koncepty, na nichž je postavena knihovna Fun</a></p>
<p><a href="#k04">*** 4. Instalace knihovny Fun, první otestování její funkcionality</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Články o programovacím jazyce Lua i o technologii LuaJITu</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Fun: knihovna pro zpracování konečných i nekonečných sekvencí v&nbsp;jazyce Lua</h2>

<p></p>

https://github.com/luafun/luafun/commits/master



<p><a name="k02"></a></p>
<h2 id="k02">2. Sekvence a lazy sekvence v&nbsp;programovacím jazyku Clojure</h2>

<p>Koncept nekonečných sekvencí sice není v&nbsp;oblasti programovacích jazyků žádnou žhavou novinkou, ovšem do praktické podoby byl dopracován až relativně pozdě. Velmi dobrým příkladem programovacího jazyka, jenž je na tomto konceptu do značné míry postaven, je jazyk <i>Clojure</i>, takže si v&nbsp;této kapitole dovolím malou odbočku k&nbsp;tomuto jazyku (ta je vhodná mj.&nbsp;i proto, že se seznámíme s&nbsp;použitými konvencemi pojmenování, protože ty ještě nejsou zcela ustálené).</p>

<p>Mnoho funkcí a maker, které nalezneme ve <a href="https://clojuredocs.org/core-library">standardní knihovně</a> <a href="https://clojure.org/">programovacího jazyka Clojure</a> souvisí s&nbsp;takzvanými <i>sekvencemi</i>. Tímto termínem se označuje programové rozhraní, které svými základními možnostmi zhruba odpovídá iterátorům známým z&nbsp;programovacího jazyka Java. V&nbsp;Clojure existuje velké množství funkcí, které dokážou pracovat se sekvencemi, ať již se jedná o běžné sekvence (jejichž prvky jsou přímo uloženy v&nbsp;operační paměti), nebo takzvané <i>líné sekvence</i> (<i>lazy sekvence</i>), které nové prvky vytváří či zjišťují až při konkrétním přístupu na tyto prvky. Mezi tyto funkce patří například <strong>sort</strong>, <strong>sort-by</strong>, <strong>take</strong> či <strong>flatten</strong>. Díky tomu, že všechny standardní <i>kolekce</i> (seznamy, vektory, ...) jsou současně i sekvencemi, lze tyto funkce aplikovat i na kolekce, ovšem ve skutečnosti jsou sekvencemi i další typy objektů, zejména pak I/O proudy (tímto směrem se posunuly i standardní knihovny Javy), řetězce (což jsou sekvence znaků) atd.</p>

<p>Naprostý základ pro práci se sekvencemi tvoří trojice funkcí nazvaných <strong>first</strong>, <strong>rest</strong> a <strong>next</strong>. Funkce <strong>first</strong> vrací první prvek v&nbsp;sekvenci, popř.&nbsp;speciální hodnotu <strong>nil</strong> v&nbsp;případě, že je sekvence prázdná. Funkce <strong>rest</strong> i <strong>next</strong> vrací zbylé prvky v&nbsp;sekvenci, ovšem liší se tím, jaká hodnota se vrátí ve chvíli, kdy již v&nbsp;sekvenci nezbyly žádné prvky (kromě prvního). V&nbsp;tomto případě vrátí <strong>rest</strong> prázdnou sekvenci (například prázdný seznam), zatímco funkce <strong>next</strong> vrátí již zmíněnou speciální hodnotu <strong>nil</strong>. U běžných sekvencí, například seznamů, jsou tyto funkce implementovány přímočaře, ovšem v&nbsp;případě <i>lazy sekvencí</i> se prvky vrácené pomocí funkce <strong>first</strong> vyhodnocují až za běhu, například pomocí nějaké generátorové funkce. Tímto způsobem je možné pracovat i s&nbsp;nekonečnými sekvencemi, u nichž už z&nbsp;principu nelze dopředu znát celkový počet prvků atd.</p>

<p>Velmi dobrým příkladem lazy sekvence je funkce <strong>range</strong>, která dokonce existuje v&nbsp;několika podobách, jež se od sebe z&nbsp;hlediska programátora-uživatele liší především různým počtem parametrů. Pokud se této funkci nepředá žádný parametr, vrátí funkce <strong>range</strong> sekvenci celých čísel od nuly do nekonečna. Zde je patrné, proč se musí jednat o lazy sekvenci &ndash; nekonečnou řadu celých čísel by samozřejmě v&nbsp;případě normální sekvence nebylo možné uložit do operační paměti. Pokud se funkci <strong>range</strong> předá pouze jediný parametr (kterým musí být celé číslo &ndash; je kontrolováno v&nbsp;runtime), je vrácena sekvence celých čísel od 0 do zadané hodnoty-1. Opět se jedná o nefalšovanou lazy sekvenci, takže se nemusíte bát používat i velké <strong>n</strong>. Dále již následují v&nbsp;podstatě jen kosmetické úpravy &ndash; volání funkce <strong>range</strong> se dvěma parametry <strong>m</strong>, <strong>n</strong> vytvoří sekvenci celých čísel od <strong>m</strong> do <strong>n-1</strong> a pokud je použit ještě třetí parametr, určuje se jím krok, který může být i záporný.</p>

<p>Takto navrženou funkci <strong>range</strong> nalezneme například i v&nbsp;knihovně <strong>clj</strong> určené pro Python. Je přitom zachováno standardní chování <strong>range</strong> ze <a href="https://docs.python.org/3.7/library/functions.html#func-range">základní knihovny Pythonu</a>, ovšem v&nbsp;případě potřeby může tato funkce (volaná bez parametrů) vytvořit nekonečnou lazy sekvenci!</p>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Koncepty, na nichž je postavena knihovna Fun</h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace knihovny Fun, první otestování její funkcionality</h2>

https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Články o programovacím jazyce Lua i o technologii LuaJITu</h2>

<ol>
</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositář projektu luafun<br />
<a href="https://github.com/luafun/luafun">https://github.com/luafun/luafun</a>
</li>

<li>Lua Functional 0.1.3 documentation<br />
<a href="https://luafun.github.io/reference.html">https://luafun.github.io/reference.html</a>
</li>

<li>Getting Started<br />
<a href="https://luafun.github.io/getting_started.html">https://luafun.github.io/getting_started.html</a>
</li>

<li>Rockspec knihovny Fun<br />
<a href="https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec">https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

