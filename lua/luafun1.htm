<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Lua Fun: knihovna pro zpracování konečných i nekonečných sekvenců v jazyce Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Lua Fun: knihovna pro zpracování konečných i nekonečných sekvencí v jazyce Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Sekvence, a to včetně sekvencí nekonečných, jsou velmi užitečnou datovou abstrakcí, s níž jsme se již nesčetněkrát setkali zejména při popisu programovacího jazyka Clojure. Podobný koncept ovšem můžeme využít i v programovacím jazyce Lua, a to díky existenci knihovny s výmluvným názvem Lua Fun.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Lua Fun: knihovna pro zpracování konečných i nekonečných sekvencí v&nbsp;jazyce Lua</a></p>
<p><a href="#k02">*** 2. Sekvence a lazy sekvence v&nbsp;programovacím jazyku Clojure</a></p>
<p><a href="#k03">*** 3. Koncepty, na nichž je postavena knihovna Lua Fun</a></p>
<p><a href="#k04">*** 4. Instalace knihovny Lua Fun, první otestování její funkcionality</a></p>
<p><a href="#k05">*** 5. Generátory konečných i nekonečných sekvencí</a></p>
<p><a href="#k06">*** 6. Generátor <strong>range</strong> (konečná sekvence)</a></p>
<p><a href="#k07">*** 7. Generátory nekonečných sekvencí</a></p>
<p><a href="#k08">*** 8. Získání prvního prvku sekvence popř.&nbsp;sekvence bez prvního prvku</a></p>
<p><a href="#k09">*** 9. Funkce pro získání podsekvencí (slicing)</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Články o programovacím jazyce Lua i o technologii LuaJITu</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Lua Fun: knihovna pro zpracování konečných i nekonečných sekvencí v&nbsp;jazyce Lua</h2>

<p><i>Lua Fun. Simple, Efficient and Functional. In Lua. With JIT.</i></p>

<p></p>

https://github.com/luafun/luafun/commits/master

https://github.com/Yonaba/Moses/

<p><div class="rs-tip-major">Poznámka: když už pro nic jiného může být knihovna <i>Lua Fun</i></div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Sekvence a lazy sekvence v&nbsp;programovacím jazyku Clojure</h2>

<p>Koncept nekonečných sekvencí sice není v&nbsp;oblasti programovacích jazyků žádnou žhavou novinkou, ovšem do praktické podoby byl dopracován až relativně pozdě. Velmi dobrým příkladem programovacího jazyka, jenž je na tomto konceptu do značné míry postaven, je jazyk <i>Clojure</i>, takže si v&nbsp;této kapitole dovolím malou odbočku k&nbsp;tomuto jazyku (ta je vhodná mj.&nbsp;i proto, že se seznámíme s&nbsp;použitými konvencemi pojmenování, protože ty ještě nejsou zcela ustálené).</p>

<p>Mnoho funkcí a maker, které nalezneme ve <a href="https://clojuredocs.org/core-library">standardní knihovně</a> <a href="https://clojure.org/">programovacího jazyka Clojure</a> souvisí s&nbsp;takzvanými <i>sekvencemi</i>. Tímto termínem se označuje programové rozhraní, které svými základními možnostmi zhruba odpovídá iterátorům známým z&nbsp;programovacího jazyka Java. V&nbsp;Clojure existuje velké množství funkcí, které dokážou pracovat se sekvencemi, ať již se jedná o běžné sekvence (jejichž prvky jsou přímo uloženy v&nbsp;operační paměti), nebo takzvané <i>líné sekvence</i> (<i>lazy sekvence</i>), které nové prvky vytváří či zjišťují až při konkrétním přístupu na tyto prvky. Mezi tyto funkce patří například <strong>sort</strong>, <strong>sort-by</strong>, <strong>take</strong> či <strong>flatten</strong>. Díky tomu, že všechny standardní <i>kolekce</i> (seznamy, vektory, ...) jsou současně i sekvencemi, lze tyto funkce aplikovat i na kolekce, ovšem ve skutečnosti jsou sekvencemi i další typy objektů, zejména pak I/O proudy (tímto směrem se posunuly i standardní knihovny Javy), řetězce (což jsou sekvence znaků) atd.</p>

<p>Naprostý základ pro práci se sekvencemi tvoří trojice funkcí nazvaných <strong>first</strong>, <strong>rest</strong> a <strong>next</strong>. Funkce <strong>first</strong> vrací první prvek v&nbsp;sekvenci, popř.&nbsp;speciální hodnotu <strong>nil</strong> v&nbsp;případě, že je sekvence prázdná. Funkce <strong>rest</strong> i <strong>next</strong> vrací zbylé prvky v&nbsp;sekvenci, ovšem liší se tím, jaká hodnota se vrátí ve chvíli, kdy již v&nbsp;sekvenci nezbyly žádné prvky (kromě prvního). V&nbsp;tomto případě vrátí <strong>rest</strong> prázdnou sekvenci (například prázdný seznam), zatímco funkce <strong>next</strong> vrátí již zmíněnou speciální hodnotu <strong>nil</strong>. U běžných sekvencí, například seznamů, jsou tyto funkce implementovány přímočaře, ovšem v&nbsp;případě <i>lazy sekvencí</i> se prvky vrácené pomocí funkce <strong>first</strong> vyhodnocují až za běhu, například pomocí nějaké generátorové funkce. Tímto způsobem je možné pracovat i s&nbsp;nekonečnými sekvencemi, u nichž už z&nbsp;principu nelze dopředu znát celkový počet prvků atd.</p>

<p>Velmi dobrým příkladem lazy sekvence je funkce <strong>range</strong>, která dokonce existuje v&nbsp;několika podobách, jež se od sebe z&nbsp;hlediska programátora-uživatele liší především různým počtem parametrů. Pokud se této funkci nepředá žádný parametr, vrátí funkce <strong>range</strong> sekvenci celých čísel od nuly do nekonečna. Zde je patrné, proč se musí jednat o lazy sekvenci &ndash; nekonečnou řadu celých čísel by samozřejmě v&nbsp;případě normální sekvence nebylo možné uložit do operační paměti. Pokud se funkci <strong>range</strong> předá pouze jediný parametr (kterým musí být celé číslo &ndash; je kontrolováno v&nbsp;runtime), je vrácena sekvence celých čísel od 0 do zadané hodnoty-1. Opět se jedná o nefalšovanou lazy sekvenci, takže se nemusíte bát používat i velké <strong>n</strong>. Dále již následují v&nbsp;podstatě jen kosmetické úpravy &ndash; volání funkce <strong>range</strong> se dvěma parametry <strong>m</strong>, <strong>n</strong> vytvoří sekvenci celých čísel od <strong>m</strong> do <strong>n-1</strong> a pokud je použit ještě třetí parametr, určuje se jím krok, který může být i záporný.</p>

<p>Takto navrženou funkci <strong>range</strong> nalezneme například i v&nbsp;knihovně <strong>clj</strong> určené pro Python. Je přitom zachováno standardní chování <strong>range</strong> ze <a href="https://docs.python.org/3.7/library/functions.html#func-range">základní knihovny Pythonu</a>, ovšem v&nbsp;případě potřeby může tato funkce (volaná bez parametrů) vytvořit nekonečnou lazy sekvenci!</p>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Koncepty, na nichž je postavena knihovna Lua Fun</h2>

<p>V&nbsp;programovacím jazyku Lua se chování skutečných sekvencí a lazy sekvencí (včetně sekvencí potenciálně nekonečných) může napodobit s&nbsp;využitím takzvaných <i>generátorů</i>.</p>

<pre>
local iterator_mt = {
    -- usually called by for-in loop
    __call = function(self, param, state)
        return self.gen(param, state)
    end;
    __tostring = function(self)
        return '<generator>'
    end;
    -- add all exported methods
    __index = methods;
}

local wrap = function(gen, param, state)
    return setmetatable({
        gen = gen,
        param = param,
        state = state
    }, iterator_mt), param, state
end
exports.wrap = wrap

local unwrap = function(self)
    return self.gen, self.param, self.state
end
methods.unwrap = unwrap
</pre>

<pre>
local duplicate_table_gen = function(param_x, state_x)
    return state_x + 1, unpack(param_x)
end

local duplicate_gen = function(param_x, state_x)
    return state_x + 1, param_x
end

local duplicate = function(...)
    if select('#', ...) <= 1 then
        return wrap(duplicate_gen, select(1, ...), 0)
    else
        return wrap(duplicate_table_gen, {...}, 0)
    end
end
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace knihovny Lua Fun, první otestování její funkcionality</h2>

https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec

<pre>
$ <strong>lua</strong>
&nbsp;
Lua 5.3.4  Copyright (C) 1994-2017 Lua.org, PUC-Rio
</pre>

<pre>
> require "fun"()
</pre>

<pre>
> range(10)
<generator>     table: 0x5642ba54b010   0
</pre>

<pre>
$ <strong>luajit</strong>
LuaJIT 2.1.0-beta3 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/
JIT: ON SSE2 SSE3 SSE4.1 BMI2 fold cse dce fwd dse narrow loop abc sink fuse
</pre>

<pre>
> require "fun"()
> range(10)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Generátory konečných i nekonečných sekvencí</h2>

<pre>
12:29 $ lua
Lua 5.3.4  Copyright (C) 1994-2017 Lua.org, PUC-Rio
> require "fun"()

range(10)
<generator>     table: 0x556eee33bfc0   0

totable(range(10))
table: 0x556eee32a270

for index, value in ipairs(totable(range(10))) do
    print(index, value)
end
1       1
2       2
3       3
4       4
5       5
6       6
7       7
8       8
9       9
10      10

for index, value in iter(range(10)) do
    print(index, value)
end
1       1
2       2
3       3
4       4
5       5
6       6
7       7
8       8
9       9
10      10
</pre>

<pre>
function printTable(table)
for index, value in iter(table) do
print(index, value)
end
end
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Generátor <strong>range</strong> (konečná sekvence)</h2>

<pre>
printTable(range(10))

1       1
2       2
3       3
4       4
5       5
6       6
7       7
8       8
9       9
10      10
</pre>

<pre>
for index, value in range(10) do
    print(index, value)
end
1       1
2       2
3       3
4       4
5       5
6       6
7       7
8       8
9       9
10      10
</pre>

<pre>
printTable(range(0, 10))
0       0
1       1
2       2
3       3
4       4
5       5
6       6
7       7
8       8
9       9
10      10
</pre>

printTable(range(0, 10, 2))
0       0
2       2
4       4
6       6
8       8
10      10

printTable(range(10, 0))
10      10
9       9
8       8
7       7
6       6
5       5
4       4
3       3
2       2
1       1
0       0

printTable(range(10, 0, -2))
10      10
8       8
6       6
4       4
2       2
0       0

printTable(range(0.5, 10, 0.5))
0.5     0.5
1.0     1.0
1.5     1.5
2.0     2.0
2.5     2.5
3.0     3.0
3.5     3.5
4.0     4.0
4.5     4.5
5.0     5.0
5.5     5.5
6.0     6.0
6.5     6.5
7.0     7.0
7.5     7.5
8.0     8.0
8.5     8.5
9.0     9.0
9.5     9.5
10.0    10.0

printTable(range(0.0, 1.0, 0.1))
0.0     0.0
0.1     0.1
0.2     0.2
0.3     0.3
0.4     0.4
0.5     0.5
0.6     0.6
0.7     0.7
0.8     0.8
0.9     0.9
1.0     1.0

<pre>
for index, value in range(0.0, 1.0, 0.1) do
    print(index, value)
end
0.0     0.0
0.1     0.1
0.2     0.2
0.3     0.3
0.4     0.4
0.5     0.5
0.6     0.6
0.7     0.7
0.8     0.8
0.9     0.9
1.0     1.0
</pre>

<pre>
for i, v in range(0, 10, 0) do
    print(i, v)
end
&nbsp;
./fun.lua:221: step must not be zero
stack traceback:
        [C]: in function 'assert'
        ./fun.lua:221: in function 'range'
        stdin:1: in main chunk
        [C]: in ?
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Generátory nekonečných sekvencí</h2>

> zeros()
<generator>     0       0

> ones()
<generator>     1       0

<pre>
> xrepeat(42)
&nbsp;
<generator>     42      0
</pre>

<pre>
> xrepeat("Hello")
&nbsp;
<generator>     Hello   0
</pre>

> duplicate(42)
<generator>     42      0
> duplicate("Hello")
<generator>     Hello   0

<pre>
i=10
for index, value in duplicate("Hello") do
    print(index, value)
    i = i - 1
    if i == 0 then
        break
    end
end
&nbsp;
1       Hello
2       Hello
3       Hello
4       Hello
5       Hello
6       Hello
7       Hello
8       Hello
9       Hello
10      Hello
</pre>

> tabulate(function(x) return x*x end)
<generator>     function: 0x55612b716780        0

<pre>
for index, value in tabulate(function(x) return x*x end) do
    print(index, value)
    if value > 100 then
        break
    end
end
1       0
2       1
3       4
4       9
5       16
6       25
7       36
8       49
9       64
10      81
11      100
12      121
</pre>

<pre>
function factorial(n)
    for i=1,n-1 do
        n=n*i
    end
    return n
end
</pre>

<pre>
for n, fact in tabulate(factorial) do
    print(n, fact)
    if fact > 100000 then
        break
    end
end
&nbsp;
1       0
2       1
3       2
4       6
5       24
6       120
7       720
8       5040
9       40320
10      362880
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Získání prvního prvku sekvence popř.&nbsp;sekvence bez prvního prvku</h2>

<p>V&nbsp;úvodních kapitolách jsme si řekli, že v&nbsp;programovacím jazyku Clojure, který zde chápeme jako etalon práce se sekvencemi, je celá koncepce založena na trojici funkcí nazvaných <strong>first</strong>, <strong>rest</strong> a <strong>next</strong>. Funkce <strong>first</strong> vrací první prvek sekvence, funkce <strong>rest</strong> novou sekvenci bez prvního prvku (ovšem interně se pochopitelně nemusí provádět kopie původní sekvence) a <strong>next</strong> se používá při průchodu sekvencí (což ovšem není téma této kapitoly). Funkce <strong>first</strong> a <strong>rest</strong> jsou skutečně naprostým základem a nalezneme je i v&nbsp;knihovně <i>Lua Fun</i>:</p>

<table>
<tr><th></th><th></th></tr>
<tr><td></td><td></td></tr>
</table>

<pre>
> head({})
./fun.lua:323: head: iterator is empty
stack traceback:
        [C]: in function 'error'
        ./fun.lua:323: in function <./fun.lua:321>
        (...tail calls...)
        [C]: in ?
> head({1,2,3})
1

> head(range(10))
1

> head(duplicate("hello"))
hello

> head(tabulate(function (x) return x+1 end))
1

</pre>
> tail({})
<generator>     nil     nil
> tail({1,2,3})
<generator>     table: 0x55612b7276d0   1

> tail(tabulate(function (x) return x+1 end))
<generator>     function: 0x55612b7267d0        1
> head(tail({1,2,3}))
2

> head(tail(tail({1,2,3})))
3



<p><a name="k09"></a></p>
<h2 id="k09">9. Funkce pro získání podsekvencí (slicing)</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Články o programovacím jazyce Lua i o technologii LuaJITu</h2>

<p>Programovacím jazykem Lua jsme se již na stránkách Rootu poměrně podrobně zabývali. Jedná se o snadno naučitelný jazyk, který je ovšem (mj.&nbsp;i díky konceptu metatabulek) rozšiřitelný a poměrně tvárný. Viz následující odkazy (včetně odkazu na e-book, jenž na základě článků vznikl):</p>

<ol>

<li>Programovací jazyk Lua <br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua/">https://www.root.cz/clanky/programovaci-jazyk-lua/</a>
</li>

<li>Základní konstrukce v programovacím jazyku Lua<br />
<a href="https://www.root.cz/clanky/zakladni-konstrukce-v-programovacim-jazyku-lua/">https://www.root.cz/clanky/zakladni-konstrukce-v-programovacim-jazyku-lua/</a>
</li>

<li>Operátory a asociativní pole v jazyku Lua<br />
<a href="https://www.root.cz/clanky/operatory-a-asociativni-pole-v-jazyku-lua/">https://www.root.cz/clanky/operatory-a-asociativni-pole-v-jazyku-lua/</a>
</li>

<li>Funkce v programovacím jazyku Lua<br />
<a href="https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua/">https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua/</a>
</li>

<li>Funkce v programovacím jazyku Lua - uzávěry<br />
<a href="https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua-uzavery/">https://www.root.cz/clanky/funkce-v-programovacim-jazyku-lua-uzavery/</a>
</li>

<li>Programovací jazyk Lua vestavěný do aplikací<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-vestaveny-do-aplikaci/">https://www.root.cz/clanky/programovaci-jazyk-lua-vestaveny-do-aplikaci/</a>
</li>

<li>Programovací jazyk Lua v aplikacích II<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-aplikacich-ii/">https://www.root.cz/clanky/programovaci-jazyk-lua-v-aplikacich-ii/</a>
</li>

<li>Objektově orientované programování v Lua<br />
<a href="https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua/">https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua/</a>
</li>

<li>Objektově orientované programování v Lua II<br />
<a href="https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua-ii/">https://www.root.cz/clanky/objektove-orientovane-programovani-v-lua-ii/</a>
</li>

<li>Programovací jazyk Lua a koprogramy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-a-koprogramy/">https://www.root.cz/clanky/programovaci-jazyk-lua-a-koprogramy/</a>
</li>

<li>Knihovny a frameworky pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/knihovny-a-frameworky-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/knihovny-a-frameworky-pro-programovaci-jazyk-lua/</a>
</li>

<li>Lua + LÖVE: vytvořte si vlastní hru<br />
<a href="https://www.root.cz/clanky/lua-love-vytvorte-si-vlastni-hru/">https://www.root.cz/clanky/lua-love-vytvorte-si-vlastni-hru/</a>
</li>

Hrátky se systémem LÖVE
https://www.root.cz/clanky/hratky-se-systemem-love/

Vytváříme hru v systému LÖVE
https://www.root.cz/clanky/vytvarime-hru-v-systemu-love/

Hrátky se systémem LÖVE - částicové systémy
https://www.root.cz/clanky/hratky-se-systemem-love-casticove-systemy/

Hrátky se systémem LÖVE – kolize a odrazy těles
https://www.root.cz/clanky/hratky-se-systemem-love-ndash-kolize-a-odrazy-teles/

Hrátky se systémem LÖVE - kolize a odrazy těles II
https://www.root.cz/clanky/hratky-se-systemem-love-kolize-a-odrazy-teles-ii/

Hrátky se systémem LÖVE - pružné vazby mezi tělesy
https://www.root.cz/clanky/hratky-se-systemem-love-pruzne-vazby-mezi-telesy/

Hrátky se systémem LÖVE - dokončení
https://www.root.cz/clanky/hratky-se-systemem-love-dokonceni/

LuaJ – implementace jazyka Lua v Javě
https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/

LuaJ a skriptování podle specifikace JSR-223
https://www.root.cz/clanky/luaj-a-skriptovani-podle-specifikace-jsr-223/

Metalua: programovatelné rozšíření sémantiky jazyka Lua
https://www.root.cz/clanky/metalua-programovatelne-rozsireni-semantiky-jazyka-lua/

Metalua: užitečná rozšíření jazyka Lua
https://www.root.cz/clanky/metalua-uzitecna-rozsireni-jazyka-lua/

Programovací jazyk Lua v roli skriptovacího jazyka pro WWW stránky
https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/

Interpretry, překladače, JIT překladače a transpřekladače programovacího jazyka Lua
https://www.root.cz/clanky/interpretry-prekladace-jit-prekladace-a-transprekladace-programovaciho-jazyka-lua/

Kooperace mezi jazykem Lua a nativním (céčkovým) kódem
https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem/

Kooperace mezi jazykem Lua a nativním (céčkovým) kódem: knihovna FFI
https://www.root.cz/clanky/kooperace-mezi-jazykem-lua-a-nativnim-ceckovym-kodem-knihovna-ffi/

Profilery pro programovací jazyk Lua
https://www.root.cz/clanky/profilery-pro-programovaci-jazyk-lua/

Využití knihovny debug v programovacím jazyku Lua
https://www.root.cz/clanky/vyuziti-knihovny-debug-v-programovacim-jazyku-lua/

</ol>

<p>Původně byla Lua realizována jako klasický interpret &ndash; prováděl se automatický a prakticky okamžitý překlad do bajtkódu, který byl následně interpretován. Později byl vytvořen i plnohodnotný (a až neobvykle dobrý) just-in-time (JIT) překladač nazvaný LuaJIT. Touto zajímavou technologií jsme se zabývali v&nbsp;následující sérii článků:</p>

<ol>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (2)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-2/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-2/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (3)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-3/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-3/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (4)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-4/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-4/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (5 – tabulky a pole)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-5-tabulky-a-pole/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-5-tabulky-a-pole/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (6 – překlad programových smyček do mezijazyka LuaJITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-6-preklad-programovych-smycek-do-mezijazyka-luajitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-6-preklad-programovych-smycek-do-mezijazyka-luajitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (7 – dokončení popisu mezijazyka LuaJITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-7-dokonceni-popisu-mezijazyka-luajitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-7-dokonceni-popisu-mezijazyka-luajitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (8 – základní vlastnosti trasovacího JITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-8-zakladni-vlastnosti-trasovaciho-jitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-8-zakladni-vlastnosti-trasovaciho-jitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (9 – další vlastnosti trasovacího JITu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-9-dalsi-vlastnosti-trasovaciho-jitu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-9-dalsi-vlastnosti-trasovaciho-jitu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (10 – JIT překlad do nativního kódu)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-10-jit-preklad-do-nativniho-kodu/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-10-jit-preklad-do-nativniho-kodu/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (11 – JIT překlad do nativního kódu procesorů s architekturami x86 a ARM)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-11-jit-preklad-do-nativniho-kodu-procesoru-s-architekturami-x86-a-arm/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-11-jit-preklad-do-nativniho-kodu-procesoru-s-architekturami-x86-a-arm/</a>
</li>

<li>LuaJIT – Just in Time překladač pro programovací jazyk Lua (12 – překlad operací s reálnými čísly)<br />
<a href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-12-preklad-operaci-s-realnymi-cisly/">https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua-12-preklad-operaci-s-realnymi-cisly/</a>
</li>

</ol>

<p>A konečně nesmíme zapomenout na to, že kromě původní implementace interpretru a LuaJITu existuje celá řada dalších implementací tohoto programovacího jazyka. Některé z&nbsp;těchto implementací byly zmíněny v&nbsp;následujících článcích:</p>

<ol>

<li>Skriptovací jazyk Lua v&nbsp;aplikacích naprogramovaných v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/">https://www.root.cz/clanky/skriptovaci-jazyk-lua-v-aplikacich-naprogramovanych-v-go/</a>
</li>

<li>Programovací jazyk Lua v&nbsp;roli skriptovacího jazyka pro WWW stránky<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/">https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/</a>
</li>

<li>LuaJ – implementace jazyka Lua v&nbsp;Javě<br />
<a href="https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/">https://www.root.cz/clanky/luaj-ndash-implementace-jazyka-lua-v-jave/</a>
</li>

<li>Tvorba pluginů pro Vim s&nbsp;využitím programovacího jazyka Lua<br />
<a href="https://www.root.cz/clanky/tvorba-pluginu-pro-vim-s-vyuzitim-programovaciho-jazyka-lua/">https://www.root.cz/clanky/tvorba-pluginu-pro-vim-s-vyuzitim-programovaciho-jazyka-lua/</a>
</li>

</ol>

<p><div class="rs-tip-major">Poznámka: předchozí články sice nepokrývají ekosystém tohoto jazyka dokonale, ovšem přibližně 90% všech relevantních informací je uvedeno.</div></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositář projektu Lua Fun<br />
<a href="https://github.com/luafun/luafun">https://github.com/luafun/luafun</a>
</li>

<li>Lua Functional 0.1.3 documentation<br />
<a href="https://luafun.github.io/reference.html">https://luafun.github.io/reference.html</a>
</li>

<li>Getting Started<br />
<a href="https://luafun.github.io/getting_started.html">https://luafun.github.io/getting_started.html</a>
</li>

<li>Rockspec knihovny Fun<br />
<a href="https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec">https://raw.githubusercontent.com/luafun/luafun/master/fun-scm-1.rockspec</a>
</li>

<li>Awesome Lua &ndash; A curated list of quality Lua packages and resources.<br />
<a href="https://github.com/LewisJEllis/awesome-lua">https://github.com/LewisJEllis/awesome-lua</a>
</li>

<li>Repositář projektu Moses<br />
<a href="https://github.com/Yonaba/Moses/">https://github.com/Yonaba/Moses/</a>
</li>

<li>Lambda the Ultimate: Coroutines in Lua<br />
<a href="http://lambda-the-ultimate.org/no­de/438">http://lambda-the-ultimate.org/no­de/438</a>
</li>

<li>Coroutines Tutorial<br />
<a href="http://lua-users.org/wiki/Co­routinesTutori­al">http://lua-users.org/wiki/Co­routinesTutori­al</a>
</li>

<li>Lua Coroutines Versus Python Generators<br />
<a href="http://lua-users.org/wiki/Lu­aCoroutinesVer­susPythonGene­rators">http://lua-users.org/wiki/Lu­aCoroutinesVer­susPythonGene­rators</a>
</li>

<li>Programming in Lua 9.1 – Coroutine Basics<br />
<a href="http://www.lu­a.org/pil/9.1­.html">http://www.lu­a.org/pil/9.1­.html</a>
</li>

<li>Wikipedia CZ: Koprogram<br />
<a href="http://cs.wiki­pedia.org/wiki/Ko­program">http://cs.wiki­pedia.org/wiki/Ko­program</a>
</li>

<li>Wikipedia EN: Coroutine<br />
<a href="http://en.wiki­pedia.org/wiki/Co­routine">http://en.wiki­pedia.org/wiki/Co­routine</a>
</li>

<li>Repositář knihovny Moses<br />
<a href="https://github.com/Yonaba/Moses/">https://github.com/Yonaba/Moses/</a>
</li>

<li>Návod k&nbsp;použití knihovny Moses<br />
<a href="https://github.com/Yonaba/Moses/blob/master/doc/tutorial.md">https://github.com/Yonaba/Moses/blob/master/doc/tutorial.md</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

