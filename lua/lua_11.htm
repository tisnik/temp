<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Knihovny a frameworky pro programovací jazyk Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Knihovny a frameworky pro programovací jazyk Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V jedenáctém a následně i dvanáctém pokračování seriálu o programovacím jazyce Lua budou popsány standardní knihovny dodávané společně s překladačem a interpretrem tohoto jazyka. Taktéž se budeme zabývat několika užitečnými externími knihovnami, frameworky a v neposlední řadě i sémantickými rozšířeními Lua.</p>



<h1>Obsah</h1>
<p>
<a href="#k01">1. Knihovny a frameworky pro programovací jazyk Lua</a><br />
<a href="#k02">2. Standardní knihovny dodávané s&nbsp;interpretrem jazyka Lua</a><br />
<a href="#k03">3. Vstupně-výstupní operace</a><br />
<a href="#k04">4. Matematické funkce, práce s&nbsp;řetězci a s&nbsp;tabulkami</a><br />
<a href="#k05">5. Externí knihovny</a><br />
<a href="#k06">6. Webové servery a frameworky</a><br />
<a href="#k07">7. Alternativní implementace překladače a interpretru Lua</a><br />
<a href="#k08">8. Rozšíření sémantiky jazyka &ndash; metalua</a><br />
<a href="#k09">9. Odkazy na Internetu</a><br />
</p>



<p><a name="k01"></a></p>
<h1>1. Knihovny a frameworky pro programovací jazyk Lua</h1>

<p>V&nbsp;předchozích částech tohoto seriálu jsme v&nbsp;demonstračních
příkladech již mnohokrát použili některé funkce ze standardních knihoven jazyka
<i>Lua</i>, které jsou dodávány již v&nbsp;základní instalaci spolu
s&nbsp;překladačem a interpretrem. Funkce nabízené těmito knihovnami budou
popsány ve <a href="#k02">druhé</a>, <a href="#k03">třetí</a> i <a
href="#k04">čtvrté kapitole</a>. V&nbsp;navazujících kapitolách si stručně
popíšeme některé zajímavé externí knihovny, zejména ty, které jsou dodávané
s&nbsp;licencemi umožňujícími použití těchto knihoven ve vlastních projektech
bez zásadních licenčních omezení (LGPL apod.). Použitelných externích knihoven
v&nbsp;současnosti existuje již značné množství, od jednoduchých knihoven
určených například pro numerické výpočty, přes různé grafické a multimediální
knihovny a knihovny umožňující snadnou tvorbu grafického uživatelského rozhraní
(s&nbsp;využitím GTK+ apod.) až po poměrně rozsáhlé webové frameworky, které
obsahují jak podporu pro příjem a následné zpracování HTTP požadavků
(tj.&nbsp;vlastní jednovláknový či vícevláknový webový server), tak i funkce
pro přístup k&nbsp;relačním databázím, zpracování <i>XML</i> i <i>JSON</i>
formátu, snadnou tvorbu dynamických HTML stránek s&nbsp;využitím šablon
atd.</p>



<p><a name="k02"></a></p>
<h1>2. Standardní knihovny dodávané s&nbsp;interpretrem jazyka Lua</h1>

<p>V&nbsp;základní instalaci jazyka <i>Lua</i> je, prakticky bez ohledu na
použitou platformu, přítomno i několik standardních knihoven, jejichž funkce je
možné volat z&nbsp;<i>Lua</i> skriptů a nepřímo též z&nbsp;céčkového programu
v&nbsp;případě, že je interpretr jazyka <i>Lua</i> zabudován do větší aplikace.
Standardní knihovny pokrývají základní potřeby tvůrců skriptů &ndash; usnadňují
zpracování řetězců i asociativních polí, nabízí matematické funkce, funkce pro
práci se soubory a pro styk s&nbsp;operačním systémem (vytvoření nového procesu
apod.) a v&nbsp;neposlední řadě nabízí i rozhraní pro externí debuggery a
profilery kódu (toto rozhraní je v&nbsp;případě potřeby možné použít i pro jiné
účely, ovšem z&nbsp;několika důvodů to není tvůrci jazyka doporučováno).
Většina funkcí ze základních knihoven je umístěna ve vlastním jmenném prostoru
(<i>namespace</i>), tj.&nbsp;jedná se o funkce uložené do vhodně pojmenovaného
asociativního pole, ovšem nejčastěji používané funkce a proměnné nemají vlastní
jmenný prostor a jsou tak přístupné přímo pod svým jménem (před kterým se
neuvádí jmenný prostor oddělený od jména tečkou). Jedná se o následující funkce
a proměnné (podrobnějším popisem některých dále vypsaných funkcí se budeme
zabývat v&nbsp;navazujících částech tohoto seriálu):</p>

<table>
<tr><th>Název funkce/proměnné</th><th>Popis</th></tr>
<tr><td>_G            </td><td>proměnná obsahující globální <i>prostředí</i>,
do nějž jsou ukládány všechny funkce i proměnné</td></tr>
<tr><td>_VERSION      </td><td>proměnná obsahující jméno a verzi interpretru
jazyka <i>Lua</i> v&nbsp;řetězcové podobě</td></tr>
<tr><td>assert        </td><td>kontrola, zda je zadaná podmínka splněna;
v&nbsp;případě jejího nesplnění je vypsáno chybové hlášení (lze použít i pro
typovou kontrolu)</td></tr>
<tr><td>collectgarbage</td><td>funkce, pomocí níž je možné spustit, zastavit či
nakonfigurovat garbage collector, jenž se stará o uvolňování paměti po již
neaktivních objektech</td></tr>
<tr><td>dofile        </td><td>soubor, který je této funkci předán jako
parametr, je spuštěn jako <i>Lua</i> skript</td></tr>
<tr><td>error         </td><td>výpis chybového hlášení a ukončení právě
probíhající chráněné funkce (viz další část tohoto seriálu)</td></tr>
<tr><td>getfenv       </td><td>vrací prostředí, ve kterém je spuštěna právě
aktivní funkce</td></tr>
<tr><td>getmetatable  </td><td>tuto funkci jsme již použili v&nbsp;předchozích
částech seriálu &ndash; slouží pro získání metatabulky nějakého
objektu</td></tr>
<tr><td>ipairs        </td><td>i tuto funkci již známe &ndash; lze ji využít
pro získání iterátoru, pomocí nějž lze iterovat přes všechny prvky
pole</td></tr>
<tr><td>load          </td><td>načtení (nebo zkonstruování) bloku příkazů
zadanou callback funkcí</td></tr>
<tr><td>loadfile      </td><td>načtení bloku příkazů ze souboru zadaného svým
jménem</td></tr>
<tr><td>loadstring    </td><td>načtení bloků příkazů z&nbsp;řetězce (ten může
být například získán deserializací skriptu z&nbsp;archivu nebo zkonstruován na
základě uživatelského vstupu)</td></tr>
<tr><td>next          </td><td>lze použít pro procházení tabulkou &ndash; pro
zadanou tabulku a index prvku vrátí index dalšího prvku v&nbsp;tabulce i
hodnotu tohoto prvku</td></tr>
<tr><td>pairs         </td><td>tato funkce vrací pro zadanou tabulku trojici
hodnot: funkci <i>next</i>, vlastní tabulku a hodnotu <strong>nil</strong>,
takže ji lze využít pro konstrukci smyčky za účelem procházení
tabulky</td></tr>
<tr><td>pcall         </td><td>spuštění funkce v&nbsp;chráněném
režimu</td></tr>
<tr><td>print         </td><td>základní funkce pro výpis hodnot na standardní
výstup, která akceptuje libovolný počet a typ parametrů</td></tr>
<tr><td>rawequal      </td><td>zjištění, zda jsou dva objekty shodné bez volání
metametody <i>__eq</i> z&nbsp;metatabulky, lze tak obejít přetížení tohoto
operátoru</td></tr>
<tr><td>rawget        </td><td>získání hodnoty uložené na zadaném indexu
v&nbsp;tabulce (asociativním poli) bez volání metametody <i>__index</i>
z&nbsp;metatabulky &ndash; i tato funkce tedy obchází uživatelsky přetížené
operátory</td></tr>
<tr><td>rawset        </td><td>uložení hodnoty do tabulky (asociativního pole),
opět bez volání přetíženého operátoru představovaného metametodou
<i>__newindex</i></td></tr>
<tr><td>module        </td><td>vytvoření modulu se zadaným jménem. Podrobnosti
o modulech si řekneme v&nbsp;navazujících částech tohoto seriálu.</td></tr>
<tr><td>require       </td><td>načtení modulu se zadaným jménem, ovšem jen
tehdy, pokud již daný modul není načtený</td></tr>
<tr><td>select        </td><td>získání hodnot všech parametrů uložených za
parametrem se zadaným indexem, popř.&nbsp;získání počtu těchto
parametrů</td></tr>
<tr><td>setfenv       </td><td>nastavení prostředí pro zvolenou funkci</td></tr>
<tr><td>setmetatable  </td><td>nastavení metatabulky pro zadaný objekt</td></tr>
<tr><td>tonumber      </td><td>převod řetězcové hodnoty na číslo, lze
specifikovat i základ pro převod (dvojková, osmičková, desítková, šestnáctková
atd. soustava)</td></tr>
<tr><td>tostring      </td><td>převod libovolné hodnoty na řetězec; funkci pro
převod na řetězec lze &bdquo;přetížit&ldquo; zápisem události <i>__tostring</i>
do metatabulky</td></tr>
<tr><td>type          </td><td>pro libovolný objekt vrátí jeho typ
v&nbsp;řetězcové podobě (tuto funkci jsme již použili v&nbsp;předchozích
částech seriálu)</td></tr>
<tr><td>unpack        </td><td>získání několika po sobě uložených položek z&nbsp;tabulky</td></tr>
<tr><td>xpcall        </td><td>spuštění funkce v&nbsp;chráněném režimu se
specifikací další funkce (předané jako druhý parametr), která je použita pro
zpracování chyby (<i>error
handler</i>)</td></tr>
</table>



<p><a name="k03"></a></p>
<h1>3. Vstupně-výstupní operace</h1>

<p>Funkce pro vstupně/výstupní operace jsou rozděleny do dvou standardních
knihoven. V&nbsp;knihovně <i>io</i> můžeme najít funkce pracující
s&nbsp;implicitním objektem představujícím otevřený soubor
(<i>deskriptorem</i>). Tento soubor je nejprve otevřen a jeho deskriptor je
uschován přímo v&nbsp;asociativním poli <i>io</i>). Naproti tomu knihovna
<i>file</i> obsahuje funkce použitelné jako metody &ndash; jejich prvním
parametrem je vždy deskriptor otevřeného souboru, proto lze místo volání typu
<i>file.názevFunkce(deskriptor)</i> použít syntaktický cukr a volání provést
&bdquo;objektově&ldquo;: <i>deskriptor:názevFunkce()</i>, což je nejen kratší,
ale i přehlednější (podrobnější informace o této vlastnosti jazyka <i>Lua</i>
byla uvedena v&nbsp;části věnované objektově orientovanému programování).</p>

<table>
<tr><th>Název funkce</th><th>Význam</th></tr>
<tr><td>io.close  </td><td>uzavření souboru</td></tr>
<tr><td>io.flush  </td><td>uložení všech dat z&nbsp;vyrovnávacích
pamětí</td></tr>
<tr><td>io.input  </td><td>otevření souboru v&nbsp;textovém režimu pro
čtení</td></tr>
<tr><td>io.lines  </td><td>otevření souboru a vrácení iterátoru, který lze
použít při čtení dat po celých řádcích</td></tr>
<tr><td>io.open   </td><td>otevření souboru v&nbsp;zadaném režimu (čtení,
zápis, připojení na konec souboru, binární čtení/zápis/připojení)</td></tr>
<tr><td>io.output </td><td>otevření souboru v&nbsp;textovém režimu pro
zápis</td></tr>
<tr><td>io.popen  </td><td>spuštění programu v&nbsp;samostatném procesu a
získání standardního vstupu či výstupu tohoto programu (lze použít pro posílání
či naopak příjem dat)</td></tr>
<tr><td>io.read   </td><td>čtení dat ze souboru v&nbsp;uživatelsky nastaveném
formátu</td></tr>
<tr><td>io.stderr </td><td>deskriptor souboru představující standardní chybový
výstup</td></tr>
<tr><td>io.stdin  </td><td>deskriptor souboru představující standardní
vstup</td></tr>
<tr><td>io.stdout </td><td>deskriptor souboru představující standardní
výstup</td></tr>
<tr><td>io.tmpfile</td><td>vytvoření dočasného souboru, který je smazán po
ukončení skriptu</td></tr>
<tr><td>io.type   </td><td>zjištění, zda daná hodnota představuje otevřený či
uzavřený soubor (vrací se řetězec "file" popř.&nbsp;"closed file"). Pokud je
hodnota jiného typu, vrátí se <strong>nil</strong>.</td></tr>
<tr><td>io.write  </td><td>zápis dat do souboru v&nbsp;uživatelsky nastaveném
formátu</td></tr>
</table>

<p>Funkce dostupné z&nbsp;knihovny <i>file</i>:</p>

<table>
<tr><th>Název funkce</th><th>Význam</th></tr>
<tr><td>file:close  </td><td>uzavření souboru</td></tr>
<tr><td>file:flush  </td><td>vyprázdnění vyrovnávacích pamětí a zápis jejich obsahu do souboru</td></tr>
<tr><td>file:lines  </td><td>vrací iterátor, pomocí něhož lze ve smyčce načítat data ze souboru po jednotlivých řádcích</td></tr>
<tr><td>file:read   </td><td>načtení dat ze souboru ve specifikovaném formátu</td></tr>
<tr><td>file:seek   </td><td>nastavení aktivního místa v&nbsp;souboru, od kterého se bude provádět čtení či zápis</td></tr>
<tr><td>file:setvbuf</td><td>nastavení vyrovnávací paměti pro soubor &ndash; vyrovnávací paměť může být zakázána, povolena globálně či povolena jen pro jeden řádek</td></tr>
<tr><td>file:write  </td><td>zápis dat &ndash; numerických hodnot či řetězců
&ndash; do souboru</td></tr>
</table>



<p><a name="k04"></a></p>
<h1>4. Matematické funkce, práce s&nbsp;řetězci a s&nbsp;tabulkami</h1>

<p>Ve standardních knihovnách jazyka <i>Lua</i> jsou dostupné i základní
matematické (logaritmické, goniometrické atd.) funkce, funkce zjednodušující
práci s&nbsp;řetězci a taktéž funkce pro práci s&nbsp;tabulkami (poli), pomocí
nichž lze do tabulek vkládat nové položky, mazat položky či celou tabulku
setřídit. Nejprve bude uveden výpis všech dostupných matematických funkcí:</p>

<table>
<tr><th>Název funkce</th><th>Význam</th></tr>
<tr><td>math.abs       </td><td>výpočet absolutní hodnoty</td></tr>
<tr><td>math.acos      </td><td>arkus kosinus</td></tr>
<tr><td>math.asin      </td><td>arkus sinus</td></tr>
<tr><td>math.atan      </td><td>arkus tangens</td></tr>
<tr><td>math.atan2     </td><td>arkus tangens volaný se dvěma parametry představujícími dvě přepony pravoúhlého trojúhelníka</td></tr>
<tr><td>math.ceil      </td><td>zaokrouhlení směrem ke kladnému nekonečnu</td></tr>
<tr><td>math.cos       </td><td>kosinus</td></tr>
<tr><td>math.cosh      </td><td>hyperbolický kosinus</td></tr>
<tr><td>math.deg       </td><td>převod z&nbsp;radiánů na úhel zadaný ve stupních</td></tr>
<tr><td>math.exp       </td><td>e<sup>x</sup></td></tr>
<tr><td>math.floor     </td><td>zaokrouhlení směrem k&nbsp;zápornému nekonečnu</td></tr>
<tr><td>math.fmod      </td><td>výpočet zbytku po dělení</td></tr>
<tr><td>math.frexp     </td><td>výpočet hodnot <i>m</i> a <i>e</i> z&nbsp;výrazu x=m2<sup>e</sup></td></tr>
<tr><td>math.huge      </td><td>vrací nejvyšší reprezentovatelné číslo</td></tr>
<tr><td>math.ldexp     </td><td>výpočet m2<sup>e</sup></td></tr>
<tr><td>math.log       </td><td>přirozený logaritmus</td></tr>
<tr><td>math.log10     </td><td>desítkový logaritmus</td></tr>
<tr><td>math.max       </td><td>maximální hodnota z&nbsp;předané sekvence (její délka není omezena)</td></tr>
<tr><td>math.min       </td><td>minimální hodnota z&nbsp;předané sekvence (její délka není omezena)</td></tr>
<tr><td>math.modf      </td><td>výpočet celé a desetinné části předané hodnoty</td></tr>
<tr><td>math.pi        </td><td>konstanta &Pi;</td></tr>
<tr><td>math.pow       </td><td>výpočet x<sup>y</sup></td></tr>
<tr><td>math.rad       </td><td>převod úhlu zadaného ve stupních na radiány</td></tr>
<tr><td>math.random    </td><td>vrací náhodné číslo (založeno na céčkové funkci rand())</td></tr>
<tr><td>math.randomseed</td><td>nastavení "semínka" pro generátor náhodných čísel</td></tr>
<tr><td>math.sin       </td><td>sinus</td></tr>
<tr><td>math.sinh      </td><td>hyperbolický sinus</td></tr>
<tr><td>math.sqrt      </td><td>druhá odmocnina</td></tr>
<tr><td>math.tan       </td><td>tangens</td></tr>
<tr><td>math.tanh      </td><td>hyperbolický tangens</td></tr>
</table>

<p>Mezi funkce pro práci s&nbsp;řetězci patří:</p>

<table>
<tr><th>Název funkce</th><th>Význam</th></tr>
<tr><td>string.byte   </td><td>vrátí sekvenci numerických hodnot
představujících kódy znaků v&nbsp;řetězci</td></tr>
<tr><td>string.char   </td><td>opak předchozí funkce &ndash; převod sekvence
numerických hodnot na řetězec</td></tr>
<tr><td>string.dump   </td><td>tato funkce dokáže vrátit řetězcovou
reprezentaci funkce předané jako parametr, vhodné pro serializaci (opakem je
výše uvedená funkce loadstring)</td></tr>
<tr><td>string.find   </td><td>vyhledávání podřetězce v&nbsp;řetězci, lze
použít i regulární výraz</td></tr>
<tr><td>string.format </td><td>zadané parametry jsou zformátovány a převedeny
na řetězec, odpovídá céčkovské sprintf()</td></tr>
<tr><td>string.gmatch </td><td>vrací iterátor na základě zadaného regulárního
výrazu</td></tr>
<tr><td>string.gsub   </td><td>globální nahrazení části řetězce na základě
regulárního výrazu (velmi užitečná funkce, kterou si ještě popíšeme)</td></tr>
<tr><td>string.len    </td><td>vrací délku řetězce</td></tr>
<tr><td>string.lower  </td><td>převod znaků na malá písmena</td></tr>
<tr><td>string.match  </td><td>zjištění, zda řetězec obsahuje text
specifikovaný regulárním výrazem</td></tr>
<tr><td>string.rep    </td><td>řetězec předaný jako parametr se n-krát zopakuje
ve výsledném řetězci</td></tr>
<tr><td>string.reverse</td><td>vrátí řetězec s&nbsp;opačným pořadím
znaků</td></tr>
<tr><td>string.sub    </td><td>nahrazení části řetězce na základě regulárního
výrazu (velmi užitečná funkce, kterou si ještě popíšeme)</td></tr>
<tr><td>string.upper  </td><td>převod řetězce na velká písmena</td></tr>
</table>

<p>Poslední sada funkcí zjednodušuje práci s&nbsp;tabulkami (implementovanými
většinou jako asociativní pole):</p>

<table>
<tr><th>Název funkce</th><th>Význam</th></tr>
<tr><td>table.concat</td><td>pomocí této funkce lze hodnoty z&nbsp;tabulky
převést na řetězec, v&nbsp;němž jsou jednotlivé položky odděleny zadaným
separátorem (například čárkou či středníkem)</td></tr>
<tr><td>table.insert</td><td>vložení nové hodnoty na zadaný index (zbylé
položky v&nbsp;poli se posunou)</td></tr>
<tr><td>table.maxn  </td><td>vrátí maximální index použitý v&nbsp;tabulce
(asociativním poli)</td></tr>
<tr><td>table.remove</td><td>vymazání hodnoty uložené na zadaném indexu (zbylé
položky v&nbsp;poli se posunou)</td></tr>
<tr><td>table.sort  </td><td>setřídění tabulky, lze zadat i vlastní funkci
volanou při porovnávání dvou položek tabulky</td></tr>
</table>



<p><a name="k05"></a></p>
<h1>5. Externí knihovny</h1>

<p>V&nbsp;úvodních odstavcích této části seriálu o programovacím jazyku
<i>Lua</i> jsme si řekli, že v&nbsp;současnosti již existuje velké množství
externích knihoven, s&nbsp;jejichž pomocí lze tento jazyk využít v&nbsp;mnoha
odvětvích. Pro práci s&nbsp;2D a 3D grafikou slouží především knihovny
<i>luacairo</i> (<a
href="http://luaforge.net/projects/luacairo/">http://luaforge.net/projects/luacairo/</a>)
a <i>LuaGL</i> (<a
href="http://luagl.wikidot.com/">http://luagl.wikidot.com/</a>) podporující
kromě vlastního OpenGL i GLUT (OpenGL Utility Toolkit); pamětníci
multiplatformní herní knihovny <i>Allegro</i> (která původně vznikla na Atari
ST a dnes je podporována na DOSu, MS Windows a samozřejmě i Linuxu) jistě ocení
existenci <i>LuAllegro</i> (<a
href="http://luaforge.net/projects/luallegro/">http://luaforge.net/projects/luallegro/</a>)
či rozhraní pro knihovnu <i>SDL</i> s&nbsp;podobnou funkcionalitou &ndash;
<i>LuaSDL</i>. Pro vytváření dynamických souborů PDF lze použít <i>lpdf</i> (<a
href="http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/#lpdf">http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/#lpdf</a>)
a s&nbsp;relačními databázemi postavenými na standardu SQL lze pracovat pomocí
<i>LuaSQL</i>. Seznam většiny volně dostupných knihoven lze získat na adrese <a
href="http://lua-users.org/wiki/LibrariesAndBindings">http://lua-users.org/wiki/LibrariesAndBindings</a>,
popřípadě přímo na <a
href="http://luaforge.net/softwaremap/trove_list.php">LuaForge</a>. Některými
dalšími knihovnami, určenými například pro tvorbu či skriptování her, se budeme
podrobněji zabývat v&nbsp;navazující části tohoto seriálu.</p>



<p><a name="k06"></a></p>
<h1>6. Webové servery a frameworky</h1>

<p>Programovací jazyk <i>Lua</i> je možné, ostatně jako téměř každý dnes
používaný jazyk, použít pro zpracování dotazů posílaných na <i>HTTP</i> server,
jejichž výsledkem má být dynamicky generovaná HTML stránka, rastrový obrázek či
vektorová kresba, soubor ve formátu <i>PDF</i> či další dynamický obsah
vytvářený na základě uživatelova dotazu. Pro úlohy, které se nespouští
s&nbsp;příliš velkou frekvencí, nebo v&nbsp;případě, že nemáme jinou možnost
(omezení daná provozovatelem serveru) je možné využít rozhraní <i>CGI</i>
nabízené prakticky všemi v&nbsp;současnosti používanými webovými servery (práce
přes <i>CGI</i> se v&nbsp;podstatě omezuje na zpracování proměnných prostředí,
standardního vstupu a tisku na standardní výstup). Toto řešení ovšem není
optimální pro často volané dynamické stránky, protože je nutné pro každý dotaz
zavolat nový interpretr <i>Lua</i> jako novou úlohu operačního systému, což je
&ndash; i přes velmi malé systémové nároky interpretru &ndash; relativně
pomalé. Navíc tvoří samotné zpracování HTTP požadavku mnohdy jen velmi malou
část webových aplikací &ndash; většinou je zapotřebí komunikovat
s&nbsp;databází, zpracovávat XML, číst a zapisovat cookies, uchovávat stav
session mezi jednotlivými požadavky, jednoduše generovat výsledné HTTP stránky
s&nbsp;využitím šablon atd.</p>

<p>Pro tyto účely lze použít webový framework nazvaný <i>Kepler</i>, který je
z&nbsp;větší části představován přímo <i>Lua</i> knihovnami. Tento framework se
skládá z&nbsp;více částí, zejména HTTP serveru <i>Xavante</i> (Xavante je
mj.&nbsp;i označení jazyka Brazilských domorodců), podporou pro práci
s&nbsp;SQL (<i>LuaSQL</i>), podporou rozhraní CGI (<i>CGILua</i>), XML
(užitečné například při použití AJAXu na webových stránkách či komunikaci
s&nbsp;webovými službami) atd. Nad tímto frameworkem je (můžeme říci, že i jako
technologické demo) postavena Wiki nazvaná <i>Sputnik</i>. Ve skutečnosti je
většina stránek věnovaných jazyku <i>Lua</i> provozována právě na Sputniku
&ndash; viz odkazy uvedené v&nbsp;deváté kapitole. Součástí frameworku
<i>Kepler</i> je i podpora pro snazší vytváření dynamických stránek.
Nejpřímější cestu pro tvorbu dynamických HTML stránek představuje použití
knihovny <i>CGILua</i> a takzvaných here řetězců (<i>here string</i>),
tj.&nbsp;řetězcových literálů, při jejichž interpretaci jsou zachovány i
formátovací znaky, včetně konců řádků &ndash; jedná se o řetězce
s&nbsp;prakticky libovolnou délkou, které jsou ukončeny dohodnutou sekvencí
znaků (většinou se nejedná o uvozovky, protože ty tvoří běžnou součást
řetězců). Jednoduchou dynamickou webovou stránku lze vytvořit následujícím
způsobem:</p>

<code-area>cgilua.htmlheader()
cgilua.put([[
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Hello World&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;strong&gt;Hello World!&lt;/strong&gt;
&lt;/body&gt;
&lt;/html&gt;]])
</code-area>

<p>Práce s&nbsp;here řetězci však není v&nbsp;případě rozsáhlejší stránky
příliš snadná a mnohdy vede k&nbsp;nežádoucímu míchání statického HTML kódu
s&nbsp;částmi <i>Lua</i> skriptu. Jednodušší je použít technologii, která je
inspirována PHP a JSP (Java Server Pages), při níž je zvolen ve své podstatě
opačný postup &ndash; namísto <i>Lua</i> skriptu, který se sám stará o
postupnou tvorbu HTML stránky, jsou zde do kostry HTML stránky vloženy
speciální značky sloužící k&nbsp;zápisu <i>Lua</i> skriptů či vkládání hodnot
vypočtených výrazů do vytvářené stránky (náhrada za explicitní volání funkce
<i>print</i>). Při pohledu na následující kód bude podobnost s&nbsp;PHP či JSP
zřejmá. Tento kód je před svým dalším zpracováním nejprve transformován do
podoby validního <i>Lua</i> skriptu a posléze přeložen a interpretován, přičemž
výsledkem je HTML stránka zaslaná serverem do uživatelova webového
prohlížeče:</p>

<code-area>&lt;html&gt;
&lt;?lua
if cgilua.QUERY.language == 'english' then
  greeting = 'Hello World!'
elseif cgilua.QUERY.language == 'portuguese' then
  greeting = 'Olá Mundo!'
else
  greeting = '[unknown language]'
end
?&gt;
&lt;head&gt;
  &lt;title&gt;&lt;%= greeting %&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;strong&gt;&lt;%= greeting %&gt;&lt;/strong&gt;
&lt;/body&gt;
&lt;/html&gt;
</code-area>



<p><a name="k07"></a></p>
<h1>7. Alternativní implementace překladače a interpretru Lua</h1>

<p>Původní překladač a interpretr jazyka <i>Lua</i> je naprogramován
v&nbsp;čistém céčku (ANSI/ISO C), ovšem kromě tohoto &bdquo;etalonu&ldquo;
(oficiální standard prozatím neexistuje) existují i další implementace jazyka,
jejichž výhodou je například to, že je lze snadno zabudovat do aplikací
určených pro běhové prostředí .NET či JRE (Java Runtime Environment), aniž by
bylo nutné vkládat mezi <i>Lua</i> skripty a tato prostředí mezistupeň
v&nbsp;podobě céčkových funkcí. Velmi zdařilou implementací je <i>LuaJ</i>, jež
je, jak ostatně už její název napovídá, vytvořena v&nbsp;Javě a lze ji tak
použít prakticky na jakémkoli počítači s&nbsp;dostupným JRE (viz ukázkový
příklad uvedený níže, ve kterém je v&nbsp;<i>Lua</i> naskriptována jednoduchá
aplikace používající pro tvorbu grafického uživatelského rozhraní knihovnu
Swing). Samozřejmě existují i poměrně kvalitní implementace <i>Luy</i> pro
prostředí .NET s&nbsp;názvy <i>Lua.NET</i> (akademický projekt), <i>LuaCLR</i>
(s&nbsp;MIT licencí) a <i>Lua2IL</i> &ndash; vid odkazy uvedené v&nbsp;deváté
kapitole.</p>

<code-area>frame = luajava.newInstance( "javax.swing.JFrame", "Texts" );
pane = luajava.newInstance( "javax.swing.JPanel" );
borderFactory = luajava.bindClass( "javax.swing.BorderFactory" )
border = borderFactory:createEmptyBorder( 30, 30, 10, 30 )
pane:setBorder( border )
label = luajava.newInstance( "javax.swing.JLabel", "This is a Label" );

layout = luajava.newInstance( "java.awt.GridLayout", 2, 2 );
pane:setLayout( layout )
pane:add( label )
pane:setBounds( 20, 30, 10, 30 )

borderLayout = luajava.bindClass( "java.awt.BorderLayout" )
frame:getContentPane():add(pane, borderLayout.CENTER )
jframe = luajava.bindClass( "javax.swing.JFrame" )
frame:setDefaultCloseOperation(jframe.EXIT_ON_CLOSE)
frame:pack()
frame:setVisible(true)

local listener = luajava.createProxy("java.awt.event.MouseListener",
    {
        mouseClicked = function(me)
            print("clicked!", me)
        end
    })

frame:addMouseListener(listener)
</code-area>

<p>Kromě těchto dvou hlavních &bdquo;alternativních&ldquo; překladačů a
interpretrů je možné získat překladač a/nebo interpretr jazyka <i>Lua</i>
napsaný v&nbsp;Lispu či JavaScriptu (teoreticky je tak možné <i>Luu</i> použít
na webových stránkách, i když dvojí interpretace se negativně projeví nižší
rychlostí běhu takové aplikace) či překladač do bajtkódu zpracovávaného
virtuálním strojem <i>Parrot</i> (tento překladač je kupodivu vytvořen
v&nbsp;Perlu a ne v&nbsp;samotné <i>Lua</i> či céčku &ndash; samotné virtuální
stroje <i>Lua</i> a <i>Parrotu</i> jsou si v&nbsp;mnohém podobné). Zajímavý je
taktéž překladač z&nbsp;<i>Lua</i> do céčka, což je vlastně transformátor
bajtkódu tohoto jazyka na volání céčkových funkcí &ndash; kromě zvýšení
rychlosti běhu skriptu je taktéž umožněno šíření přeloženého programu, ve
kterém není obsažen ani původní skript ani jeho bajtkód, čímž je umožněno, aby
na cílové platformě nemusel být přítomen ani překladač ani interpretr jazyka
<i>Lua</i> (důležité například u jednočipových mikropočítačů s&nbsp;omezenou
kapacitou operační paměti).</p>



<p><a name="k08"></a></p>
<h1>8. Rozšíření sémantiky jazyka &ndash; metalua</h1>

<p>Velmi zajímavé a současně i užitečné rozšíření původního (ve své podstatě
minimalistického) programovacího jazyka <i>Lua</i> představuje projekt
<i>metalua</i>. Jedná se o změnu vlastního překladače, který je rozšířen o
některé vlastnosti, které můžeme najít například v&nbsp;Lispovských jazycích
&ndash; podporu maker, metaprogramování a možnosti rozšíření syntaxe jazyka o
další jazykové konstrukce (nové operátory, další typy smyček, řídicí struktury
atd.). Tyto vlastnosti jsou do překladače přidány takovým způsobem, že je možné
vlastní překládaný kód modifikovat na základě speciálních konstrukcí
zapisovaných přímo do zdrojového kódu programu (kód, přesněji jemu odpovídající
AST &ndash; <i>abstract syntax tree</i>, je tedy modifikován v&nbsp;době
překladu, nikoli běhu). V&nbsp;Lispovských jazycích je manipulace
s&nbsp;překládaným či interpretovaným kódem velmi jednoduchá, protože zde
existuje ekvivalence mezi kódem a daty (vše je chápáno jako seznam, přesněji
sekvence provázaných tečka-dvojic tvořících binární strom, odpovídající výše
zmíněnému AST), tudíž lze s&nbsp;kódem manipulovat stejně jako s&nbsp;jinými
daty. Tuto velmi mocnou techniku se tvůrci systému <i>metalua</i> snažili
použít i pro jazyk <i>Lua</i>, což se jim v&nbsp;rámci daných možností
podařilo. Možnostmi systému <i>metalua</i> se ještě budeme zabývat
v&nbsp;následujících částech tohoto seriálu, dnes si pro ilustraci pouze
ukážeme některé možnosti, které toto rozšíření může programátorům přinést:</p>

<code-area><i>-- rozšíření syntaxe počítané smyčky for při konstrukci pole</i>
x = { i <strong>for</strong> i = 2, 50, 2 }

<i>-- filtrace hodnot (sudá čísla) na základě zapsané podmínky</i>
y = { i <strong>for</strong> i = 1, 50 <strong>if</strong> i%2==0 }

<i>-- přidání ternárního operátoru do sémantiky jazyka</i>
<i>-- (tento operátor je použitý v jazycích odvozených od céčka:</i>
<i>--  C++, Java, JavaScript atd.)</i>
<i>-- Povšimněte si nové konstrukce +{ a }, která v&nbsp;původní Lua neexistuje</i>
<strong>local function</strong> b(x, suffix)
   <strong>local</strong> v, ontrue, onfalse = mlp.gensym "test", unpack (suffix)
   <strong>return</strong> `Stat{ 
      +{ block:
         local -{v}
         if -{x} then (-{v}) = -{ontrue} else (-{v}) = -{onfalse or `Nil} end },
      v }
end

mlp.expr.suffix:add{ "?", mlp.expr, gg.onkeyword{ ",", mlp.expr }, prec=5, builder=b }
</code-area>



<p><a name="k09"></a></p>
<h1>9. Odkazy na Internetu</h1>

<ol>

<li>LuaForge<br />
<a href="http://luaforge.net/">http://luaforge.net/</a>
</li>

<li>LuaForge: Project Tree<br />
<a href="http://luaforge.net/softwaremap/trove_list.php">http://luaforge.net/softwaremap/trove_list.php</a>
</li>

<li>lua-users.org<br />
<a href="http://lua-users.org/">http://lua-users.org/</a>
</li>

<li>Lua Faq<br />
<a href="http://lua-users.org/wiki/LuaFaq">http://lua-users.org/wiki/LuaFaq</a>
</li>

<li>Lua Addons<br />
<a href="http://lua-users.org/wiki/LuaAddons">http://lua-users.org/wiki/LuaAddons</a>
</li>

<li>Libraries And Bindings<br />
<a href="http://lua-users.org/wiki/LibrariesAndBindings">http://lua-users.org/wiki/LibrariesAndBindings</a>
</li>

<li>Lua Power Patches<br />
<a href="http://lua-users.org/wiki/LuaPowerPatches">http://lua-users.org/wiki/LuaPowerPatches</a>
</li>

<li>Lua Implementations<br />
<a href="http://lua-users.org/wiki/LuaImplementations">http://lua-users.org/wiki/LuaImplementations</a>
</li>

<li>Metalua<br />
<a href="http://metalua.luaforge.net/">http://metalua.luaforge.net/</a>
</li>

<li>Metalua manual<br />
<a href="http://metalua.luaforge.net/manual000.html">http://metalua.luaforge.net/manual000.html</a>
</li>

<li>luacairo<br />
<a href="http://luaforge.net/projects/luacairo/">http://luaforge.net/projects/luacairo/</a>
</li>

<li>LuAllegro<br />
<a href="http://luaforge.net/projects/luallegro/">http://luaforge.net/projects/luallegro/</a>
</li>

<li>Kepler Project<br />
<a href="http://www.keplerproject.org/">http://www.keplerproject.org/</a>
</li>

<li>LuaRocks<br />
<a href="http://www.luarocks.org/">http://www.luarocks.org/</a>
</li>

<li>An Extensible Wiki Engine in Lua<br />
<a href="http://spu.tnik.org/">http://spu.tnik.org/</a>
</li>

<li>Ukázka customizaci Sputniku<br />
<a href="http://spu.tnik.org/en/Sightings">http://spu.tnik.org/en/Sightings</a>
</li>

<li>Interactive Lua<br />
<a href="http://lua-users.org/wiki/InteractiveLua">http://lua-users.org/wiki/InteractiveLua</a>
</li>

<li>LuaGL<br />
<a href="http://luagl.wikidot.com/">http://luagl.wikidot.com/</a>
</li>

<li>lpdf<br />
<a href="http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/#lpdf">http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/#lpdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2009</small></p>
</body>
</html>

