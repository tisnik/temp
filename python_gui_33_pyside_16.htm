<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nastavení stylů vykreslování widgetů, oken i dialogů v knihovně PySide</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nastavení stylů vykreslování widgetů, oken i dialogů v knihovně PySide</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o knihovnách určených pro tvorbu grafického uživatelského rozhraní v&nbsp;Pythonu si ukážeme, jakým způsobem je možné v&nbsp;knihovně PySide nastavit styl vykreslování ovládacích prvků (widgetů), oken i celých standardních dialogů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nastavení stylů vykreslování widgetů, oken i dialogů v&nbsp;knihovně PySide</a></p>
<p><a href="#k02">2. Konfigurace stylu přes argumenty zadané na příkazovém řádku</a></p>
<p><a href="#k03">3. První demonstrační příklad &ndash; zobrazení většiny standardních widgetů a dialogů</a></p>
<p><a href="#k04">4. Způsob vykreslování widgetů, standardní třídy se styly</a></p>
<p><a href="#k05">5. Použití tříd <strong>QApplication</strong> a <strong>QStyleFactory</strong> pro změnu stylu vykreslování celé aplikace</a></p>
<p><a href="#k06">6. Druhý demonstrační příklad &ndash; výběr stylu vykreslování pro celou aplikaci</a></p>

<p><a href="#k07">7. Galerie standardních stylů dostupných na Linuxu</a></p>
<p><a href="#k08">8. Styl aplikovaný na standardní dialog pro výběr barvy i pro zobrazení zprávy</a></p>
<p><a href="#k09">9. Změna stylů jednotlivých widgetů pomocí metody <strong>QWidget.setStyle()</strong></a></p>
<p><a href="#k10">10. Třetí demonstrační příklad &ndash; nastavení individuálních stylů jednotlivých widgetů</a></p>
<p><a href="#k11">11. Změna stylů jednotlivých widgetů pomocí metody <strong>QWidget.setStyleSheet()</strong></a></p>
<p><a href="#k12">12. Čtvrtý demonstrační příklad &ndash; změna pozadí jednotlivých widgetů</a></p>
<p><a href="#k13">13. Kaskádní styly v&nbsp;knihovně PySide</a></p>
<p><a href="#k14">14. Stylesheet platný pro celou aplikaci</a></p>
<p><a href="#k15">15. Pátý demonstrační příklad &ndash; použití stylesheetu platného pro celou aplikaci</a></p>
<p><a href="#k16">16. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k17">17. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nastavení stylů vykreslování widgetů, oken i dialogů v&nbsp;knihovně PySide</h2>

<p><a
href="https://www.root.cz/clanky/konfigurace-standardnich-dialogu-nabizenych-knihovnou-pyside/nazory/">V&nbsp;diskuzi</a>
pod <a
href="https://www.root.cz/clanky/konfigurace-standardnich-dialogu-nabizenych-knihovnou-pyside/">předchozím
článkem</a> mj.&nbsp;zazněl i oprávněný dotaz, proč se na screenshotech
použitých v&nbsp;tomto seriálu používá styl widgetů a dialogů, který připomíná
aplikace naprogramované s&nbsp;využitím &bdquo;konkurenční&ldquo; knihovny GTK+
a který pro svůj minimalismus vypadá poněkud zastarale. Knihovna Qt, nad níž je
framework PySide postaven, ovšem umožňuje dosti flexibilně měnit styl
vykreslování widgetů, oken i standardních dialogů, a to dokonce na několika
úrovních: pro celé desktopové prostředí, pro celou aplikaci popř.&nbsp;dokonce
pro jednotlivé widgety. Navíc je možné ke standardním stylům doprogramovat i
styly vlastní, nebo se dá do určité míry upravit vzhled widgetů s&nbsp;využitím
CSS (<i>Cascading Style Sheets</i>). V&nbsp;dalších kapitolách si jednotlivé
možnosti popíšeme (kromě nastavení desktopového prostředí, to již spadá mimo
rámec tohoto seriálu).</p>

<a href="https://www.root.cz/obrazek/322682/"><img src="https://i.iinfo.cz/images/233/pyside15-3-prev.png" class="image-322682" alt="&#160;" height="80" width="370" /></a>
<p><i>Obrázek 1: Screenshot z&nbsp;předchozího článku.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Konfigurace stylu přes argumenty zadané na příkazovém řádku</h2>

<p>Jednou z&nbsp;nejjednodušších možností nastavení &bdquo;globálního&ldquo;
stylu platného pro celou aplikaci (včetně standardních dialogů) je použití
přepínače <strong>-style <i>jméno_stylu</i></strong> na příkazové řádce. Tento
přepínač je (podobně jako některé další přepínače) automaticky zpracován třídou
<strong>QApplication</strong>. Připomeňme si, jakým způsobem se konstruuje
instance třídy <strong>QApplication</strong>, přesněji řečeno jaké parametry se
jí předávají:</p>

<pre>
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    ...
    ...
    ...
</pre>

<p><div class="rs-tip-major">Poznámka: vzhledem k&nbsp;tomu, že standardní
přepínače jsou automaticky zpracovány třídou <strong>QApplication</strong> a
následně jsou odstraněny ze seznamu argumentů příkazového řádku, je vhodné
argumenty programově zpracovat <i>až</i> po vytvoření instance
<strong>QApplication</strong>. Díky tomu se již nemusíme o argumenty určené pro
konfiguraci knihovny <i>PySide</i> (a tím pádem i pro Qt) starat.</div></p>

<p>Mezi podporovaná jména stylů patří:</p>

<ul>
<li>CDE</li>
<li>Cleanlooks</li>
<li>GTK+</li>
<li>Motif</li>
<li>Plastique</li>
<li>Windows</li>
</ul>

<p>Jména stylů byla získána tímto pomocným skriptem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import modulu pro GUI</i>
from PySide import QtGui
&nbsp;
&nbsp;
def main():
    for key in QtGui.QStyleFactory.keys():
        print(key)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad &ndash; zobrazení většiny standardních widgetů a dialogů</h2>

<p>Dnešní první demonstrační příklad, jehož zdrojový kód můžete získat
z&nbsp;adresy <a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/135_most_widgets.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/135_most_widgets.py</a>,
je poněkud delší, než příklady, s&nbsp;nimiž jsme se setkali v&nbsp;předchozích
částech tohoto seriálu. Je tomu tak z&nbsp;toho důvodu, že v&nbsp;příkladu
používáme většinu popsaných ovládacích prvků (widgetů), nástrojový pruh
(toolbar), hlavní menu i některé standardní dialogy. Mnoho typů widgetů
používáme samozřejmě z&nbsp;toho důvodu, aby bylo patrné, jakým způsobem se
změna stylu projeví na různých ovládacích prvcích.</p>

<a href="https://www.root.cz/obrazek/323265/"><img src="https://i.iinfo.cz/images/489/pyside16-1-prev.png" class="image-323265" alt="&#160;" height="270" width="346" /></a>
<p><i>Obrázek 2: První demonstrační příklad vykreslený výchozím stylem
napodobujícím GTK (výchozí styl je však závislý na konfiguraci systému,
použitém desktopovém prostředí atd.).</i></p>

<p>Výchozí styl lze přepnout z&nbsp;příkazové řádky:</p>

<pre>
./135_most_widgets.py -style motif
./135_most_widgets.py -style plastique
./135_most_widgets.py -style windows
</pre>

<p>atd.</p>

<p>Následuje výpis zdrojového kódu demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
&nbsp;
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
        openFileButton = self.prepareOpenFileButton()
        colorDialogButton = self.prepareColorDialogButton()
        messageBoxButton = self.prepareMessageBoxButton()
&nbsp;
        <i># vytvoření testovacích widgetů vkládaných do okna</i>
        tree = self.prepareTree()
        slider = self.prepareSlider()
        lineEdit = self.prepareLineEdit()
        textEdit = self.prepareTextEdit()
        dial = self.prepareDial()
&nbsp;
        <i># různě ostylovaná návěští</i>
        testLabel1 = QtGui.QLabel("Normal/Default")
        testLabel2 = QtGui.QLabel("Box")
        testLabel3 = QtGui.QLabel("Panel")
        testLabel4 = QtGui.QLabel("Win Panel")
        testLabel5 = QtGui.QLabel("HLine")
        testLabel6 = QtGui.QLabel("VLine")
        testLabel7 = QtGui.QLabel("StyledPanel")
&nbsp;
        testLabel2.setFrameStyle(QtGui.QFrame.Box)
        testLabel3.setFrameStyle(QtGui.QFrame.Panel)
        testLabel4.setFrameStyle(QtGui.QFrame.WinPanel)
        testLabel5.setFrameStyle(QtGui.QFrame.HLine)
        testLabel6.setFrameStyle(QtGui.QFrame.VLine)
        testLabel7.setFrameStyle(QtGui.QFrame.StyledPanel)
&nbsp;
        <i># testovací přepínací tlačítka</i>
        testRadioButton1 = QtGui.QRadioButton("radio button #1")
        testRadioButton2 = QtGui.QRadioButton("radio button #2")
        testRadioButton3 = QtGui.QRadioButton("radio button #3")
&nbsp;
        <i># testovací zaškrtávací tlačítka</i>
        testCheckBox1 = QtGui.QCheckBox("check box 1")
        testCheckBox2 = QtGui.QCheckBox("check box 2")
&nbsp;
        <i># které tlačítko bude vybráno</i>
        testRadioButton3.setChecked(True)
        testCheckBox2.setChecked(True)
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QHBoxLayout()
        leftLayout = QtGui.QVBoxLayout()
        centerLayout = QtGui.QVBoxLayout()
        rightLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna - levý sloupec</i>
        leftLayout.addWidget(tree)
        leftLayout.addWidget(slider)
&nbsp;
        <i># umístění widgetů do okna - prostřední sloupec</i>
        centerLayout.addWidget(lineEdit)
        centerLayout.addWidget(textEdit)
        centerLayout.addWidget(openFileButton)
        centerLayout.addWidget(colorDialogButton)
        centerLayout.addWidget(messageBoxButton)
        centerLayout.addWidget(quitButton)
&nbsp;
        <i># umístění widgetů do okna - pravý sloupec</i>
        rightLayout.addWidget(testRadioButton1)
        rightLayout.addWidget(testRadioButton2)
        rightLayout.addWidget(testRadioButton3)
        rightLayout.addWidget(testCheckBox1)
        rightLayout.addWidget(testCheckBox2)
&nbsp;
        rightLayout.addWidget(testLabel1)
        rightLayout.addWidget(testLabel2)
        rightLayout.addWidget(testLabel3)
        rightLayout.addWidget(testLabel4)
        rightLayout.addWidget(testLabel5)
        rightLayout.addWidget(testLabel6)
        rightLayout.addWidget(testLabel7)
        rightLayout.addWidget(dial)
&nbsp;
        <i># umístění layoutů do hlavního layoutu</i>
        topLayout.addLayout(leftLayout)
        topLayout.addLayout(centerLayout)
        topLayout.addLayout(rightLayout)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareOpenFileButton</strong>(self):
        <i># tlačítko</i>
        openFileButton = QtGui.QPushButton('Open file...', self)
        openFileButton.resize(openFileButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        openFileButton.clicked.connect(self.showOpenFileDialog)
        return openFileButton
&nbsp;
    def <strong>prepareMessageBoxButton</strong>(self):
        <i># tlačítko</i>
        messageBoxButton = QtGui.QPushButton('Message Box', self)
        messageBoxButton.resize(messageBoxButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        messageBoxButton.clicked.connect(self.showCustomMessageBox)
        return messageBoxButton
&nbsp;
    def <strong>prepareLineEdit</strong>(self):
        <i># jednořádkové vstupní textové pole</i>
        lineEdit = QtGui.QLineEdit(self)
        <i># naplnění textového pole textem</i>
        lineEdit.setText(u"příliš žluťoučký kůň úpěl ďábelské ódy")
        return lineEdit
&nbsp;
    def <strong>prepareTextEdit</strong>(self):
        <i># víceřádkové vstupní textové pole</i>
        textEdit = QtGui.QTextEdit(self)
&nbsp;
        <i># nastavení základních vlastností textového pole</i>
        textEdit.setAcceptRichText(False)
        textEdit.setLineWrapMode(QtGui.QTextEdit.NoWrap)
&nbsp;
        <i># vložení obsahu souboru do víceřádkového textového pole</i>
        with open("01_empty_window.py", "r") as fin:
            content = fin.read().decode('utf8')
            textEdit.insertPlainText(content)
&nbsp;
        return textEdit
&nbsp;
    def <strong>prepareColorDialogButton</strong>(self):
        <i># tlačítko s popisem</i>
        colorDialogButton = QtGui.QPushButton('Select color', self)
        colorDialogButton.resize(colorDialogButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        colorDialogButton.clicked.connect(self.showColorDialog)
        return colorDialogButton
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showOpenFileDialog</strong>(self):
        <i># handler po stlačení tlačítka "Open file..."</i>
        fileName = QtGui.QFileDialog.getOpenFileName(self, "Open file", u".")
&nbsp;
        self.showMessageBox(u'Vybraný soubor\n{f}'.format(f=fileName))
&nbsp;
    def <strong>showColorDialog</strong>(self):
        <i># handler po stlačení tlačítka "Select color"</i>
        colorDialog = QtGui.QColorDialog()
        colorDialog.setCurrentColor(QtGui.QColor("#aabbcc"))
        result = colorDialog.exec_()
&nbsp;
        selected = colorDialog.selectedColor()
        message = "Selected color: {r} {g} {b}\nClicked on: {c}".format(
            r=selected.red(),
            g=selected.green(),
            b=selected.blue(),
            c="Ok" if result == 1 else "Cancel")
&nbsp;
        self.showMessageBox(message)
&nbsp;
    def <strong>showMessageBox</strong>(self, text):
        msgBox = QtGui.QMessageBox()
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>showCustomMessageBox</strong>(self):
        <i># handler po stlačení tlačítka "Message Box"</i>
        <i># vytvoření dialogu</i>
        msgBox = QtGui.QMessageBox()
&nbsp;
        <i># nastavení zprávy a ikony, která se má zobrazit vedle zprávy</i>
        msgBox.setText(u'Zpráva')
        msgBox.setIcon(QtGui.QMessageBox.Critical)
&nbsp;
        <i># nastavení tlačítek, které mají být součástí dialogu</i>
        msgBox.addButton("Help", QtGui.QMessageBox.HelpRole)
        msgBox.addButton("Accept", QtGui.QMessageBox.AcceptRole)
        msgBox.addButton("Reject", QtGui.QMessageBox.RejectRole)
&nbsp;
        <i># zobrazení dialogu</i>
        msgBox.exec_()
&nbsp;
    def <strong>prepareTree</strong>(self):
        <i># vytvoření stromu</i>
        tree = QtGui.QTreeWidget(self)
        tree.setHeaderLabel("strom")
        tree.setColumnCount(1)
&nbsp;
        <i># naplnění stromu daty</i>
        items = []
        for i in range(1, 11):
            item = QtGui.QTreeWidgetItem(None, ["prvek #{i}".format(i=i)])
            items.append(item)
            QtGui.QTreeWidgetItem(item, ["podprvek A"])
            QtGui.QTreeWidgetItem(item, ["podprvek B"])
            QtGui.QTreeWidgetItem(item, ["podprvek C"])
        tree.insertTopLevelItems(0, items)
&nbsp;
        <i># po vložení všech prvků do stromu je můžeme rozbalit</i>
        skip = False
        for item in items:
            if not skip:
                item.setExpanded(True)
            skip = not skip
&nbsp;
        return tree
&nbsp;
    def <strong>prepareSlider</strong>(self):
        <i># vytvoření slideru</i>
        slider = QtGui.QSlider(QtCore.Qt.Horizontal)
&nbsp;
        return slider
&nbsp;
    def <strong>prepareDial</strong>(self):
        <i># vytvoření widgetu</i>
        dial = QtGui.QDial()
&nbsp;
        return dial
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Common widgets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Způsob vykreslování widgetů, standardní třídy se styly</h2>

<p>Vzhledem k&nbsp;tomu, že vykreslování všech prvků GUI (s&nbsp;výjimkou
dekorace oken) řídí knihovna Qt (dostupná přes PySide), je možné relativně
snadno změnit styl vykreslování &bdquo;pouhou&ldquo; reimplementací kódu, který
se stará o vykreslení jednotlivých widgetů. To lze provést implementací nové
třídy odvozené od třídy <strong>QStyle</strong>, což má tu výhodu, že je možné
předefinovat vzhled pouze některých widgetů. Ve skutečnosti již několik tříd
přímo či nepřímo odvozených od <strong>QStyle</strong> existuje a je možné je
vybrat buď při startu a inicializaci aplikace nebo při jejím běhu. Standardně
se jedná o tyto třídy:</p>

<table>
<tr><th>Třída se stylem</th></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPlastiqueStyle.html">QPlastiqueStyle</a></td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMacStyle.html">QMacStyle</a></td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCleanlooksStyle.html">QCleanlooksStyle</a></td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGtkStyle.html">QGtkStyle</a></td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMotifStyle.html">QMotifStyle</a></td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCDEStyle.html">QCDEStyle</a></td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWindowsStyle.html">QWindowsStyle</a></td></tr>
</table>

<p>Poznámka: konkrétní vzhled widgetů je ještě závislý na použitém operačním
systému atd. To se týká především třídy <strong>QWindowsStyle</strong>, jež se
snaží widgety přizpůsobit konkrétnímu systému (od Windows XP výše).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití tříd <strong>QApplication</strong> a <strong>QStyleFactory</strong> pro změnu stylu vykreslování celé aplikace</h2>

<p>Ve chvíli, kdy budeme potřebovat změnit styl vykreslování celé aplikace,
tj.&nbsp;všech oken, dialogů i ovládacích prvků (widgetů), máme dvě možnosti.
Lze samozřejmě použít již výše zmíněný přepínač <strong>-style</strong>, což je
sice flexibilní řešení, ovšem pro některé uživatele může být poměrně
komplikované tuto konfiguraci provést. Druhou možností je přímo ve zdrojovém
kódu aplikace zavolat statickou metodu pojmenovanou
<strong>QApplication.setStyle()</strong>, které se předá název požadovaného
stylu. Volání se provede následujícím způsobem:</p>

<pre>
QtGui.QApplication.setStyle("plastique")
</pre>

<p>Funkce <strong>setStyle</strong> je statická z&nbsp;toho důvodu, aby ji bylo
možné zavolat ještě před inicializací aplikace a začátkem tvorby jednotlivých
oken a dialogů. Doporučuje se ji skutečně zavolat ještě před programovým
řádkem:</p>

<pre>
app = QtGui.QApplication(sys.argv)
</pre>

<p>Ve skutečnosti však ve druhém příkladu uvidíte, že se dá změna stylu provést
i v&nbsp;běžící aplikaci (minimálně na Linuxu).</p>

<p>Jména aktuálně podporovaných stylů vrací další statická funkce, tentokrát
<strong>QStyleFactory.keys()</strong>:</p>

<pre>
QtGui.QStyleFactory.keys()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý demonstrační příklad &ndash; výběr stylu vykreslování pro celou aplikaci</h2>

<p>V&nbsp;dnešním druhém demonstračním příkladu je ukázáno, jak lze provést
změnu stylu vykreslování, a to dokonce dvěma způsoby. Nejprve je nastaven
výchozí styl ještě před vlastní inicializací aplikace (což je nejbezpečnější
způsob):</p>

<pre>
QtGui.QApplication.setStyle("plastique")
app = QtGui.QApplication(sys.argv)
</pre>

<p>Následně vytvoříme položky menu pro všechny styly, které jsou aktuálně
k&nbsp;dispozici a které programově nalezneme (nabídka stylů se totiž může
lišit):</p>

<pre>
<i># položka Style v hlavním menu</i>
styleMenu = menubar.addMenu('&amp;Style')
&nbsp;
<i># jednotlivé položky menu s nabízenými styly</i>
for key in QtGui.QStyleFactory.keys():
    styleMenuItem = QtGui.QAction(key, self)
    styleMenuItem.triggered.connect(lambda key=key: self.setStyle(key))
    styleMenu.addAction(styleMenuItem)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si triku, kterým zajistíme,
aby se handler <strong>setStyle</strong> pokaždé volal s&nbsp;jiným parametrem.
Musíme zde použít anonymní funkci a navíc pro ni vytvořit lokální parametr
<strong>key</strong>.</div></p>

<p>Handler zajišťující nastavení stylu vybraného uživatelem je velmi
jednoduchý, protože se mu přímo předá jméno stylu (viz též předchozí kapitolu
s&nbsp;popisem metody <strong>QApplication.setStyle()</strong>):</p>

<pre>
def <strong>setStyle</strong>(self, styleName):
    <i># nastavení vybraného stylu</i>
    QtGui.QApplication.setStyle(styleName)
</pre>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
&nbsp;
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
        openFileButton = self.prepareOpenFileButton()
        colorDialogButton = self.prepareColorDialogButton()
        messageBoxButton = self.prepareMessageBoxButton()
&nbsp;
        <i># vytvoření testovacích widgetů vkládaných do okna</i>
        tree = self.prepareTree()
        slider = self.prepareSlider()
        lineEdit = self.prepareLineEdit()
        textEdit = self.prepareTextEdit()
        dial = self.prepareDial()
&nbsp;
        <i># různě ostylovaná návěští</i>
        testLabel1 = QtGui.QLabel("Normal/Default")
        testLabel2 = QtGui.QLabel("Box")
        testLabel3 = QtGui.QLabel("Panel")
        testLabel4 = QtGui.QLabel("Win Panel")
        testLabel5 = QtGui.QLabel("HLine")
        testLabel6 = QtGui.QLabel("VLine")
        testLabel7 = QtGui.QLabel("StyledPanel")
&nbsp;
        testLabel2.setFrameStyle(QtGui.QFrame.Box)
        testLabel3.setFrameStyle(QtGui.QFrame.Panel)
        testLabel4.setFrameStyle(QtGui.QFrame.WinPanel)
        testLabel5.setFrameStyle(QtGui.QFrame.HLine)
        testLabel6.setFrameStyle(QtGui.QFrame.VLine)
        testLabel7.setFrameStyle(QtGui.QFrame.StyledPanel)
&nbsp;
        <i># testovací přepínací tlačítka</i>
        testRadioButton1 = QtGui.QRadioButton("radio button #1")
        testRadioButton2 = QtGui.QRadioButton("radio button #2")
        testRadioButton3 = QtGui.QRadioButton("radio button #3")
&nbsp;
        <i># testovací zaškrtávací tlačítka</i>
        testCheckBox1 = QtGui.QCheckBox("check box 1")
        testCheckBox2 = QtGui.QCheckBox("check box 2")
&nbsp;
        <i># které tlačítko bude vybráno</i>
        testRadioButton3.setChecked(True)
        testCheckBox2.setChecked(True)
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QHBoxLayout()
        leftLayout = QtGui.QVBoxLayout()
        centerLayout = QtGui.QVBoxLayout()
        rightLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna - levý sloupec</i>
        leftLayout.addWidget(tree)
        leftLayout.addWidget(slider)
&nbsp;
        <i># umístění widgetů do okna - prostřední sloupec</i>
        centerLayout.addWidget(lineEdit)
        centerLayout.addWidget(textEdit)
        centerLayout.addWidget(openFileButton)
        centerLayout.addWidget(colorDialogButton)
        centerLayout.addWidget(messageBoxButton)
        centerLayout.addWidget(quitButton)
&nbsp;
        <i># umístění widgetů do okna - pravý sloupec</i>
        rightLayout.addWidget(testRadioButton1)
        rightLayout.addWidget(testRadioButton2)
        rightLayout.addWidget(testRadioButton3)
        rightLayout.addWidget(testCheckBox1)
        rightLayout.addWidget(testCheckBox2)
&nbsp;
        rightLayout.addWidget(testLabel1)
        rightLayout.addWidget(testLabel2)
        rightLayout.addWidget(testLabel3)
        rightLayout.addWidget(testLabel4)
        rightLayout.addWidget(testLabel5)
        rightLayout.addWidget(testLabel6)
        rightLayout.addWidget(testLabel7)
        rightLayout.addWidget(dial)
&nbsp;
        <i># umístění layoutů do hlavního layoutu</i>
        topLayout.addLayout(leftLayout)
        topLayout.addLayout(centerLayout)
        topLayout.addLayout(rightLayout)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareOpenFileButton</strong>(self):
        <i># tlačítko</i>
        openFileButton = QtGui.QPushButton('Open file...', self)
        openFileButton.resize(openFileButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        openFileButton.clicked.connect(self.showOpenFileDialog)
        return openFileButton
&nbsp;
    def <strong>prepareMessageBoxButton</strong>(self):
        <i># tlačítko</i>
        messageBoxButton = QtGui.QPushButton('Message Box', self)
        messageBoxButton.resize(messageBoxButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        messageBoxButton.clicked.connect(self.showCustomMessageBox)
        return messageBoxButton
&nbsp;
    def <strong>prepareLineEdit</strong>(self):
        <i># jednořádkové vstupní textové pole</i>
        lineEdit = QtGui.QLineEdit(self)
        <i># naplnění textového pole textem</i>
        lineEdit.setText(u"příliš žluťoučký kůň úpěl ďábelské ódy")
        return lineEdit
&nbsp;
    def <strong>prepareTextEdit</strong>(self):
        <i># víceřádkové vstupní textové pole</i>
        textEdit = QtGui.QTextEdit(self)
&nbsp;
        <i># nastavení základních vlastností textového pole</i>
        textEdit.setAcceptRichText(False)
        textEdit.setLineWrapMode(QtGui.QTextEdit.NoWrap)
&nbsp;
        <i># vložení obsahu souboru do víceřádkového textového pole</i>
        with open("01_empty_window.py", "r") as fin:
            content = fin.read().decode('utf8')
            textEdit.insertPlainText(content)
&nbsp;
        return textEdit
&nbsp;
    def <strong>prepareColorDialogButton</strong>(self):
        <i># tlačítko s popisem</i>
        colorDialogButton = QtGui.QPushButton('Select color', self)
        colorDialogButton.resize(colorDialogButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        colorDialogButton.clicked.connect(self.showColorDialog)
        return colorDialogButton
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showOpenFileDialog</strong>(self):
        <i># handler po stlačení tlačítka "Open file..."</i>
        fileName = QtGui.QFileDialog.getOpenFileName(self, "Open file", u".")
&nbsp;
        self.showMessageBox(u'Vybraný soubor\n{f}'.format(f=fileName))
&nbsp;
    def <strong>showColorDialog</strong>(self):
        <i># handler po stlačení tlačítka "Select color"</i>
        colorDialog = QtGui.QColorDialog()
        colorDialog.setCurrentColor(QtGui.QColor("#aabbcc"))
        result = colorDialog.exec_()
&nbsp;
        selected = colorDialog.selectedColor()
        message = "Selected color: {r} {g} {b}\nClicked on: {c}".format(
            r=selected.red(),
            g=selected.green(),
            b=selected.blue(),
            c="Ok" if result == 1 else "Cancel")
&nbsp;
        self.showMessageBox(message)
&nbsp;
    def <strong>showMessageBox</strong>(self, text):
        msgBox = QtGui.QMessageBox()
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>showCustomMessageBox</strong>(self):
        <i># handler po stlačení tlačítka "Message Box"</i>
        <i># vytvoření dialogu</i>
        msgBox = QtGui.QMessageBox()
&nbsp;
        <i># nastavení zprávy a ikony, která se má zobrazit vedle zprávy</i>
        msgBox.setText(u'Zpráva')
        msgBox.setIcon(QtGui.QMessageBox.Critical)
&nbsp;
        <i># nastavení tlačítek, které mají být součástí dialogu</i>
        msgBox.addButton("Help", QtGui.QMessageBox.HelpRole)
        msgBox.addButton("Accept", QtGui.QMessageBox.AcceptRole)
        msgBox.addButton("Reject", QtGui.QMessageBox.RejectRole)
&nbsp;
        <i># zobrazení dialogu</i>
        msgBox.exec_()
&nbsp;
    def <strong>prepareTree</strong>(self):
        <i># vytvoření stromu</i>
        tree = QtGui.QTreeWidget(self)
        tree.setHeaderLabel("strom")
        tree.setColumnCount(1)
&nbsp;
        <i># naplnění stromu daty</i>
        items = []
        for i in range(1, 11):
            item = QtGui.QTreeWidgetItem(None, ["prvek #{i}".format(i=i)])
            items.append(item)
            QtGui.QTreeWidgetItem(item, ["podprvek A"])
            QtGui.QTreeWidgetItem(item, ["podprvek B"])
            QtGui.QTreeWidgetItem(item, ["podprvek C"])
        tree.insertTopLevelItems(0, items)
&nbsp;
        <i># po vložení všech prvků do stromu je můžeme rozbalit</i>
        skip = False
        for item in items:
            if not skip:
                item.setExpanded(True)
            skip = not skip
&nbsp;
        return tree
&nbsp;
    def <strong>prepareSlider</strong>(self):
        <i># vytvoření slideru</i>
        slider = QtGui.QSlider(QtCore.Qt.Horizontal)
&nbsp;
        return slider
&nbsp;
    def <strong>prepareDial</strong>(self):
        <i># vytvoření widgetu</i>
        dial = QtGui.QDial()
&nbsp;
        return dial
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMessageBox")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># položka Style v hlavním menu</i>
        styleMenu = menubar.addMenu('&amp;Style')
&nbsp;
        <i># jednotlivé položky menu s nabízenými styly</i>
        for key in QtGui.QStyleFactory.keys():
            styleMenuItem = QtGui.QAction(key, self)
            styleMenuItem.triggered.connect(lambda key=key: self.setStyle(key))
            styleMenu.addAction(styleMenuItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>setStyle</strong>(self, styleName):
        <i># nastavení vybraného stylu</i>
        QtGui.QApplication.setStyle(styleName)
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i>#QtGui.QApplication.setStyle("plastique")</i>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Galerie standardních stylů dostupných na Linuxu</h2>

<p>V&nbsp;této kapitole je ukázáno, jak bude vypadat náš demonstrační příklad
při použití různých stylů. Povšimněte si, že styl ovlivňuje jak všechny widgety
v&nbsp;hlavním okně, tak i způsob zobrazení standardních dialogů:</p>

<a href="https://www.root.cz/obrazek/323266/"><img src="https://i.iinfo.cz/images/489/pyside16-2-prev.png" class="image-323266" alt="&#160;" height="270" width="346" /></a>
<p><i>Obrázek 3: První demonstrační příklad s&nbsp;nastaveným stylem <strong>Windows</strong>.</i></p>

<a href="https://www.root.cz/obrazek/323267/"><img src="https://i.iinfo.cz/images/489/pyside16-3-prev.png" class="image-323267" alt="&#160;" height="270" width="346" /></a>
<p><i>Obrázek 4: První demonstrační příklad s&nbsp;nastaveným stylem <strong>Motif</strong>.</i></p>

<a href="https://www.root.cz/obrazek/323268/"><img src="https://i.iinfo.cz/images/489/pyside16-4-prev.png" class="image-323268" alt="&#160;" height="270" width="346" /></a>
<p><i>Obrázek 5: První demonstrační příklad s&nbsp;nastaveným stylem <strong>CDE</strong>.</i></p>

<a href="https://www.root.cz/obrazek/323269/"><img src="https://i.iinfo.cz/images/489/pyside16-5-prev.png" class="image-323269" alt="&#160;" height="270" width="346" /></a>
<p><i>Obrázek 6: První demonstrační příklad s&nbsp;nastaveným stylem <strong>Plastique</strong>.</i></p>

<a href="https://www.root.cz/obrazek/323270/"><img src="https://i.iinfo.cz/images/489/pyside16-6-prev.png" class="image-323270" alt="&#160;" height="270" width="346" /></a>
<p><i>Obrázek 7: První demonstrační příklad s&nbsp;nastaveným stylem <strong>GTK+</strong>.</i></p>

<a href="https://www.root.cz/obrazek/323271/"><img src="https://i.iinfo.cz/images/489/pyside16-7-prev.png" class="image-323271" alt="&#160;" height="270" width="346" /></a>
<p><i>Obrázek 8: První demonstrační příklad s&nbsp;nastaveným stylem <strong>Cleanlooks</strong>.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Styl aplikovaný na standardní dialog pro výběr barvy i pro zobrazení zprávy</h2>

<p>Nejvíce je patrný vliv změny stylu o standardního dialogu pro výběr barvy a
to z&nbsp;toho důvodu, že tento dialog obsahuje větší množství ovládacích
prvků, zejména &bdquo;přetáčecích&ldquo; editačních políček určených pro zadání
barvových složek v&nbsp;modelu HSV a RGB:</p>

<a href="https://www.root.cz/obrazek/323272/"><img src="https://i.iinfo.cz/images/489/pyside16-8-prev.png" class="image-323272" alt="&#160;" height="270" width="370" /></a>
<p><i>Obrázek 9: Dialog pro výběr barvy s&nbsp;nastaveným stylem <strong>Windows</strong>.</i></p>

<a href="https://www.root.cz/obrazek/323273/"><img src="https://i.iinfo.cz/images/489/pyside16-9-prev.png" class="image-323273" alt="&#160;" height="270" width="348" /></a>
<p><i>Obrázek 10: Dialog pro výběr barvy s&nbsp;nastaveným stylem <strong>Motif</strong>.</i></p>

<a href="https://www.root.cz/obrazek/323274/"><img src="https://i.iinfo.cz/images/489/pyside16-10-prev.png" class="image-323274" alt="&#160;" height="270" width="351" /></a>
<p><i>Obrázek 11: Dialog pro výběr barvy s&nbsp;nastaveným stylem <strong>CDE</strong>.</i></p>

<a href="https://www.root.cz/obrazek/323275/"><img src="https://i.iinfo.cz/images/489/pyside16-11-prev.png" class="image-323275" alt="&#160;" height="267" width="370" /></a>
<p><i>Obrázek 12: Dialog pro výběr barvy s&nbsp;nastaveným stylem <strong>Plastique</strong>.</i></p>

<a href="https://www.root.cz/obrazek/323276/"><img src="https://i.iinfo.cz/images/489/pyside16-12-prev.png" class="image-323276" alt="&#160;" height="270" width="361" /></a>
<p><i>Obrázek 13: Dialog pro výběr barvy s&nbsp;nastaveným stylem <strong>GTK+</strong>.</i></p>

<a href="https://www.root.cz/obrazek/323277/"><img src="https://i.iinfo.cz/images/489/pyside16-13-prev.png" class="image-323277" alt="&#160;" height="270" width="357" /></a>
<p><i>Obrázek 14: Dialog pro výběr barvy s&nbsp;nastaveným stylem <strong>Cleanlooks</strong>.</i></p>

<p>U standardních dialogů se zprávou a informační ikonou dochází pochopitelně
jak ke změně tvarů tlačítek, tak i ke změně ikony, která by měla odpovídat
nativním widgetům:</p>

<img src="https://i.iinfo.cz/images/489/pyside16-14.png" class="image-323278" alt="&#160;" height="113" width="267" />
<p><i>Obrázek 15: Dialog se zprávou s&nbsp;nastaveným stylem <strong>Windows</strong>.</i></p>

<img src="https://i.iinfo.cz/images/489/pyside16-15.png" class="image-323279" alt="&#160;" height="122" width="261" />
<p><i>Obrázek 16: Dialog se zprávou s&nbsp;nastaveným stylem <strong>Motif</strong>.</i></p>

<img src="https://i.iinfo.cz/images/489/pyside16-16.png" class="image-323280" alt="&#160;" height="120" width="261" />
<p><i>Obrázek 17: Dialog se zprávou s&nbsp;nastaveným stylem <strong>CDE</strong>.</i></p>

<img src="https://i.iinfo.cz/images/489/pyside16-17.png" class="image-323281" alt="&#160;" height="116" width="271" />
<p><i>Obrázek 18: Dialog se zprávou s&nbsp;nastaveným stylem <strong>Plastique</strong>.</i></p>

<img src="https://i.iinfo.cz/images/489/pyside16-18.png" class="image-323282" alt="&#160;" height="127" width="291" />
<p><i>Obrázek 19: Dialog se zprávou s&nbsp;nastaveným stylem <strong>GTK+</strong>.</i></p>

<img src="https://i.iinfo.cz/images/489/pyside16-19.png" class="image-323283" alt="&#160;" height="119" width="281" />
<p><i>Obrázek 20: Dialog se zprávou s&nbsp;nastaveným stylem <strong>Cleanlooks</strong>.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Změna stylů jednotlivých widgetů pomocí metody <strong>QWidget.setStyle()</strong></h2>

<p>Podívejme se nyní, jak je možné zajistit změnu stylu jednotlivých widgetů.
Nejprve si připravíme sekvenci se všemi dostupnými styly. Alternativně je možné
připravit i slovník, kde klíčem budou jména stylů a hodnotami instance třídy
<strong>QStyle</strong> a jejich potomků (to je pravděpodobně praktičtější, my
však budeme chtít použít všechny dostupné styly, takže vytváříme jen sekvenci).
Povšimněte si, jak se vytvoří objekt se stylem pomocí tovární metody
<strong>QStyleFactory.create</strong>:</p>

<pre>
@staticmethod
def <strong>prepareStyles</strong>():
    <i># vytvoření sekvence se všemi dostupnými styly</i>
    style_names = QtGui.QStyleFactory.keys()
    styles = [QtGui.QStyleFactory.create(style_name)
              for style_name in style_names]
    return styles
</pre>

<p>Připravíme si funkci, která vytvoří horizontální posuvník a přitom použije
styl předaný do funkce v&nbsp;parametru <strong>style</strong>. Příprava takové
funkce je snadná (pokud samozřejmě nebudeme potřebovat specifikovat i další
parametry posuvníku, například rozsah, značky apod.):</p>

<pre>
def <strong>prepareSlider</strong>(self, style):
    <i># vytvoření slideru</i>
    slider = QtGui.QSlider(QtCore.Qt.Horizontal)
    slider.setStyle(style)
    return slider
</pre>

<p>Posuvník následně můžeme do stejného okna vykreslit hned několikrát, pokaždé
s&nbsp;různým stylem a navíc nezávisle na stylu nastaveném pro celou
aplikaci:</p>

<pre>
for style in styles:
    slider = self.prepareSlider(style)
    leftLayout.addWidget(slider)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Třetí demonstrační příklad &ndash; nastavení individuálních stylů jednotlivých widgetů</h2>

<p>V&nbsp;dnešním třetím demonstračním příkladu je vytvořeno hlavní okno, které
obsahuje ovládací prvky uspořádané do tří sloupců. Každý widget je přitom
vykreslen několikrát, pokaždé s&nbsp;jiným stylem. Můžeme si tak jednoduše na
jediném okně ověřit, jak se změna stylu projeví na jednotlivých widgetech a do
jaké míry se změní jejich chování, tj.&nbsp;reakce na operace prováděné
uživatelem:</p>

<img src="https://i.iinfo.cz/images/489/pyside16-20.png" class="image-323284" alt="&#160;" height="573" width="434" />
<p><i>Obrázek 21: Screenshot dnešního třetího demonstračního příkladu při
použití globálního stylu <strong>Windows</strong>.</i></p>

<p>Vykreslení jednořádkových vstupních textových polí různým stylem:</p>

<pre>
def <strong>prepareLineEdit</strong>(self, style):
    <i># jednořádkové vstupní textové pole</i>
    lineEdit = QtGui.QLineEdit(self)
    <i># naplnění textového pole textem</i>
    lineEdit.setText(u"příliš žluťoučký kůň úpěl ďábelské ódy")
    lineEdit.setStyle(style)
    return lineEdit
&nbsp;
<i># umístění widgetů do okna - levý sloupec</i>
for style in styles:
    lineEdit = self.prepareLineEdit(style)
    leftLayout.addWidget(lineEdit)
</pre>

<img src="https://i.iinfo.cz/images/489/pyside16-21.png" class="image-323285" alt="&#160;" height="573" width="434" />
<p><i>Obrázek 22: Screenshot dnešního třetího demonstračního příkladu při
použití globálního stylu <strong>Motif</strong>.</i></p>

<p>Vykreslení posuvníků různým stylem (viz předchozí kapitolu):</p>

<pre>
def <strong>prepareSlider</strong>(self, style):
    <i># vytvoření slideru</i>
    slider = QtGui.QSlider(QtCore.Qt.Horizontal)
    slider.setStyle(style)
    return slider
&nbsp;
for style in styles:
    slider = self.prepareSlider(style)
    leftLayout.addWidget(slider)
</pre>

<img src="https://i.iinfo.cz/images/489/pyside16-22.png" class="image-323286" alt="&#160;" height="573" width="434" />
<p><i>Obrázek 23: Screenshot dnešního třetího demonstračního příkladu při
použití globálního stylu <strong>CDE</strong>.</i></p>

<p>Vykreslení přepínacích tlačítek (po dvojicích):</p>

<pre>
def <strong>prepareRadioButton</strong>(self, style, text, checked):
    <i># vytvoření přepínacího tlačítka</i>
    radioButton = QtGui.QRadioButton(text)
    radioButton.setStyle(style)
    radioButton.setChecked(checked)
    return radioButton
&nbsp;
for style in styles:
    <i># testovací přepínací tlačítka</i>
    testRadioButton1 = self.prepareRadioButton(style, "radio button #1", False)
    testRadioButton2 = self.prepareRadioButton(style, "radio button #2", True)
    <i># vložení přepínacích tlačítek na plochu okna</i>
    centerLayout.addWidget(testRadioButton1)
    centerLayout.addWidget(testRadioButton2)
    centerLayout.addWidget(QtGui.QLabel(""))
</pre>

<img src="https://i.iinfo.cz/images/489/pyside16-23.png" class="image-323287" alt="&#160;" height="573" width="434" />
<p><i>Obrázek 24: Screenshot dnešního třetího demonstračního příkladu při
použití globálního stylu <strong>Plastique</strong>.</i></p>

<p>Vykreslení zaškrtávacích tlačítek (vždy po dvojicích):</p>

<pre>
def <strong>prepareCheckBox</strong>(self, style, text, checked):
    <i># vytvoření zaškrtávacího tlačítka</i>
    checkBox = QtGui.QCheckBox(text)
    checkBox.setStyle(style)
    checkBox.setChecked(checked)
    return checkBox
&nbsp;
<i># umístění widgetů do okna - pravý sloupec</i>
for style in styles:
    <i># testovací zaškrtávací tlačítka</i>
    testCheckBox1 = self.prepareCheckBox(style, "check box #1", False)
    testCheckBox2 = self.prepareCheckBox(style, "check box #2", True)
    <i># vložení widgetů tlačítek na plochu okna</i>
    rightLayout.addWidget(testCheckBox1)
    rightLayout.addWidget(testCheckBox2)
    rightLayout.addWidget(QtGui.QLabel(""))
</pre>

<img src="https://i.iinfo.cz/images/489/pyside16-24.png" class="image-323288" alt="&#160;" height="573" width="434" />
<p><i>Obrázek 25: Screenshot dnešního třetího demonstračního příkladu při
použití globálního stylu <strong>GTK+</strong>.</i></p>

<p>Opět se podívejme na úplný zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    @staticmethod
    def <strong>prepareStyles</strong>():
        <i># vytvoření sekvence se všemi dostupnými styly</i>
        style_names = QtGui.QStyleFactory.keys()
        styles = [QtGui.QStyleFactory.create(style_name)
                  for style_name in style_names]
        return styles
&nbsp;
    def <strong>prepareGUI</strong>(self):
        styles = MainWindowContent.prepareStyles()
&nbsp;
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QHBoxLayout()
        leftLayout = QtGui.QVBoxLayout()
        centerLayout = QtGui.QVBoxLayout()
        rightLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna - levý sloupec</i>
        for style in styles:
            lineEdit = self.prepareLineEdit(style)
            leftLayout.addWidget(lineEdit)
&nbsp;
        for style in styles:
            slider = self.prepareSlider(style)
            leftLayout.addWidget(slider)
&nbsp;
        leftLayout.addWidget(QtGui.QLabel(""))
        leftLayout.addWidget(quitButton)
&nbsp;
        <i># umístění widgetů do okna - prostřední sloupec</i>
        for style in styles:
            <i># testovací přepínací tlačítka</i>
            testRadioButton1 = self.prepareRadioButton(style, "radio button #1", False)
            testRadioButton2 = self.prepareRadioButton(style, "radio button #2", True)
            <i># vložení přepínacích tlačítek na plochu okna</i>
            centerLayout.addWidget(testRadioButton1)
            centerLayout.addWidget(testRadioButton2)
            centerLayout.addWidget(QtGui.QLabel(""))
&nbsp;
        <i># umístění widgetů do okna - pravý sloupec</i>
        for style in styles:
            <i># testovací zaškrtávací tlačítka</i>
            testCheckBox1 = self.prepareCheckBox(style, "check box #1", False)
            testCheckBox2 = self.prepareCheckBox(style, "check box #2", True)
            <i># vložení widgetů tlačítek na plochu okna</i>
            rightLayout.addWidget(testCheckBox1)
            rightLayout.addWidget(testCheckBox2)
            rightLayout.addWidget(QtGui.QLabel(""))
&nbsp;
        <i># umístění layoutů do hlavního layoutu</i>
        topLayout.addLayout(leftLayout)
        topLayout.addLayout(centerLayout)
        topLayout.addLayout(rightLayout)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareLineEdit</strong>(self, style):
        <i># jednořádkové vstupní textové pole</i>
        lineEdit = QtGui.QLineEdit(self)
        <i># naplnění textového pole textem</i>
        lineEdit.setText(u"příliš žluťoučký kůň úpěl ďábelské ódy")
        lineEdit.setStyle(style)
        return lineEdit
&nbsp;
    def <strong>prepareSlider</strong>(self, style):
        <i># vytvoření slideru</i>
        slider = QtGui.QSlider(QtCore.Qt.Horizontal)
        slider.setStyle(style)
        return slider
&nbsp;
    def <strong>prepareRadioButton</strong>(self, style, text, checked):
        <i># vytvoření přepínacího tlačítka</i>
        radioButton = QtGui.QRadioButton(text)
        radioButton.setStyle(style)
        radioButton.setChecked(checked)
        return radioButton
&nbsp;
    def <strong>prepareCheckBox</strong>(self, style, text, checked):
        <i># vytvoření zaškrtávacího tlačítka</i>
        checkBox = QtGui.QCheckBox(text)
        checkBox.setStyle(style)
        checkBox.setChecked(checked)
        return checkBox
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMessageBox")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># položka Style v hlavním menu</i>
        styleMenu = menubar.addMenu('&amp;Style')
&nbsp;
        <i># jednotlivé položky menu s nabízenými styly</i>
        for key in QtGui.QStyleFactory.keys():
            styleMenuItem = QtGui.QAction(key, self)
            styleMenuItem.triggered.connect(lambda key=key: self.setStyle(key))
            styleMenu.addAction(styleMenuItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>setStyle</strong>(self, styleName):
        <i># nastavení vybraného stylu</i>
        QtGui.QApplication.setStyle(styleName)
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># QtGui.QApplication.setStyle("plastique")</i>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<img src="https://i.iinfo.cz/images/489/pyside16-25.png" class="image-323289" alt="&#160;" height="573" width="434" />
<p><i>Obrázek 26: Screenshot dnešního třetího demonstračního příkladu při
použití globálního stylu <strong>Cleanlooks</strong>.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Změna stylů jednotlivých widgetů pomocí metody <strong>QWidget.setStyleSheet()</strong></h2>

<p>Styl vykreslování se nemusí nastavovat pouze pro celou aplikaci. Knihovna
<i>PySide</i> totiž u všech widgetů nabízí metodu
<strong>QWidget.setStyleSheet()</strong>. Této metodě je možné předat řetězec
se zápisem specifikace CSS (<i>Cascading Style Sheet</i>). Tímto velmi
jednoduchým způsobem je možné ovlivnit především popředí a pozadí widgetu, jeho
okraj (<i>border</i>), použitý font atd. Ukažme si to na způsobu změny pozadí
nějakého ovládacího prvku, například tlačítka <strong>QPushButton</strong>.
Barvu pozadí lze specifikovat různě, například jménem barvy:</p>

<pre>
"background-color: red"
</pre>

<p>popř.&nbsp;přímo hexa tripletem s&nbsp;barvovými složkami RGB (známým
z&nbsp;HTML a samozřejmě i z&nbsp;CSS):</p>

<pre>
"background-color: #c0ff40"
</pre>

<p>nebo dokonce:</p>

<pre>
"background-color: rgba(188, 188, 188, 50)"
</pre>

<p>Metodu <strong>setStyleSheet</strong> můžeme využít například
v&nbsp;uživatelské funkci nazvané <strong>prepareButtonWithBackground</strong>,
které se předá požadovaná barva pozadí zapsaná řetězcem. Může se jednat jak o
jméno barvy ("red"), tak i o její kód ("#c0ff40") atd. Z&nbsp;kódu barvy se
vytvoří úplná specifikace CSS, která se nakonec použije:</p>

<pre>
def <strong>prepareButtonWithBackground</strong>(self, background):
    <i># tlačítko s popisem</i>
    button = QtGui.QPushButton(background, self)
&nbsp;
    <i># nastavení stylu</i>
    styleSheet = "background-color: {background}".format(background=background)
    button.setStyleSheet(styleSheet)
&nbsp;
    button.resize(button.sizeHint())
&nbsp;
    return button
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Čtvrtý demonstrační příklad &ndash; změna pozadí jednotlivých widgetů</h2>

<p>V&nbsp;dnešním čtvrtém demonstračním příkladu si ukážeme způsob změny pozadí
několika tlačítek umístěných do hlavního okna aplikace. Tlačítka jsou vytvořena
funkcí <strong>prepareButtonWithBackground</strong> popsanou <a
href="#k11">v&nbsp;předchozí kapitole</a>. Celkem jsou vytvořena tři tlačítka
s&nbsp;různým pozadím:</p>

<pre>
button1 = self.prepareButtonWithBackground("#e08080")
button2 = self.prepareButtonWithBackground("lightblue")
button3 = self.prepareButtonWithBackground("yellow")
</pre>

<p>Výsledná podoba hlavního okna aplikace bude vypadat takto (stále je však
možné vybrat styl zobrazení celé aplikace, což je nezávislé na nastavení pozadí
vybraných prvků):</p>

<img src="https://i.iinfo.cz/images/175/pyside16-27-1.png" class="image-323293" alt="&#160;" height="139" width="361" />
<p><i>Obrázek 27: Hlavní okno aplikace se třemi tlačítky, u nichž bylo změno
pozadí. Čtvrté tlačítko má pozadí specifikované použitým stylem.</i></p>

<p>Následuje výpis zdrojového kódu tohoto demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># další tlačítka</i>
        button1 = self.prepareButtonWithBackground("#e08080")
        button2 = self.prepareButtonWithBackground("lightblue")
        button3 = self.prepareButtonWithBackground("yellow")
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QHBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(button1)
        topLayout.addWidget(button2)
        topLayout.addWidget(button3)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareButtonWithBackground</strong>(self, background):
        <i># tlačítko s popisem</i>
        button = QtGui.QPushButton(background, self)
&nbsp;
        <i># nastavení stylu</i>
        styleSheet = "background-color: {background}".format(background=background)
        button.setStyleSheet(styleSheet)
&nbsp;
        button.resize(button.sizeHint())
&nbsp;
        return button
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMessageBox")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># položka Style v hlavním menu</i>
        styleMenu = menubar.addMenu('&amp;Style')
&nbsp;
        <i># jednotlivé položky menu s nabízenými styly</i>
        for key in QtGui.QStyleFactory.keys():
            styleMenuItem = QtGui.QAction(key, self)
            styleMenuItem.triggered.connect(lambda key=key: self.setStyle(key))
            styleMenu.addAction(styleMenuItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>setStyle</strong>(self, styleName):
        <i># nastavení vybraného stylu</i>
        QtGui.QApplication.setStyle(styleName)
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># QtGui.QApplication.setStyle("plastique")</i>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Kaskádní styly v&nbsp;knihovně PySide</h2>

<p>V&nbsp;knihovně <i>PySide</i> je možné použít kaskádní styly nejenom pro
změnu vzhledu jednotlivých ovládacích prvků, ale i pro nastavení stylu
vykreslování celé aplikace. Zápis kaskádních stylů odpovídá klasickým CSS
používaným při tvorbě HTML stránek. Jeden z&nbsp;podstatných rozdílů spočívá
v&nbsp;tom, jak jsou chápány selektory. V&nbsp;CSS je možné styl přiřadit
libovolné značce (její jméno je selektorem), v&nbsp;PySide se namísto jména
značky používají přímo jména tříd jednotlivých ovládacích prvků. Některé
vlastnosti mají v&nbsp;HTML i PySide prakticky stejný význam (příkladem může
být barva pozadí prvku), ovšem některé nalezneme jen v&nbsp;HTML (ty nás
nebudou zajímat) a další zase pouze v&nbsp;PySide resp.&nbsp;v&nbsp;knihovně
Qt.</p>

<p>Jména widgetů, u nichž je možné měnit jejich vlastnosti s&nbsp;využitím
kaskádních stylů:</p>

<table>
<tr><th>Název widgetu</th></tr>
<tr><td>QAbstractScrollArea</td></tr>
<tr><td>QCheckBox</td></tr>
<tr><td>QColumnView</td></tr>
<tr><td>QComboBox</td></tr>
<tr><td>QDateEdit</td></tr>
<tr><td>QDateTimeEdit</td></tr>
<tr><td>QDialog</td></tr>
<tr><td>QDialogButtonBox</td></tr>
<tr><td>QDockWidget</td></tr>
<tr><td>QDoubleSpinBox</td></tr>
<tr><td>QFrame</td></tr>
<tr><td>QGroupBox</td></tr>
<tr><td>QHeaderView</td></tr>
<tr><td>QLabel</td></tr>
<tr><td>QLineEdit</td></tr>
<tr><td>QListView</td></tr>
<tr><td>QListWidget</td></tr>
<tr><td>QMainWindow</td></tr>
<tr><td>QMenu</td></tr>
<tr><td>QMenuBar</td></tr>
<tr><td>QMessageBox</td></tr>
<tr><td>QProgressBar</td></tr>
<tr><td>QPushButton</td></tr>
<tr><td>QRadioButton</td></tr>
<tr><td>QScrollBar</td></tr>
<tr><td>QSizeGrip</td></tr>
<tr><td>QSlider</td></tr>
<tr><td>QSpinBox</td></tr>
<tr><td>QSplitter</td></tr>
<tr><td>QStatusBar</td></tr>
<tr><td>QTabBar</td></tr>
<tr><td>QTabWidget</td></tr>
<tr><td>QTableView</td></tr>
<tr><td>QTableWidget</td></tr>
<tr><td>QTextEdit</td></tr>
<tr><td>QTimeEdit</td></tr>
<tr><td>QToolBar</td></tr>
<tr><td>QToolButton</td></tr>
<tr><td>QToolBox</td></tr>
<tr><td>QToolTip</td></tr>
<tr><td>QTreeView</td></tr>
<tr><td>QTreeWidget</td></tr>
<tr><td>QWidget</td></tr>
</table>

<p>Nastavit je možné následující vlastnosti, ovšem ne všechny samozřejmě mají
význam u všech elementů (například u některých elementů nelze nastavit okraje
&ndash; <i>border</i> atd.):</p>

<table>
<tr><th>Jméno vlastnosti</th></tr>
<tr><td>alternate-background-color</td></tr>
<tr><td>background</td></tr>
<tr><td>background-color</td></tr>
<tr><td>background-image</td></tr>
<tr><td>background-repeat</td></tr>
<tr><td>background-position</td></tr>
<tr><td>background-attachment</td></tr>
<tr><td>background-clip</td></tr>
<tr><td>background-origin</td></tr>
<tr><td>border</td></tr>
<tr><td>border-top</td></tr>
<tr><td>border-right</td></tr>
<tr><td>border-bottom</td></tr>
<tr><td>border-left</td></tr>
<tr><td>border-color</td></tr>
<tr><td>border-top-color</td></tr>
<tr><td>border-right-color</td></tr>
<tr><td>border-bottom-color</td></tr>
<tr><td>border-left-color</td></tr>
<tr><td>border-image</td></tr>
<tr><td>border-radius</td></tr>
<tr><td>border-top-left-radius</td></tr>
<tr><td>border-top-right-radius</td></tr>
<tr><td>border-bottom-right-radius</td></tr>
<tr><td>border-bottom-left-radius</td></tr>
<tr><td>border-style</td></tr>
<tr><td>border-top-style</td></tr>
<tr><td>border-right-style</td></tr>
<tr><td>border-bottom-style</td></tr>
<tr><td>border-left-style</td></tr>
<tr><td>border-width</td></tr>
<tr><td>border-top-width</td></tr>
<tr><td>border-right-width</td></tr>
<tr><td>border-bottom-width</td></tr>
<tr><td>border-left-width</td></tr>
<tr><td>bottom</td></tr>
<tr><td>button-layout</td></tr>
<tr><td>color</td></tr>
<tr><td>dialogbuttonbox-buttons-have-icons</td></tr>
<tr><td>font</td></tr>
<tr><td>font-family</td></tr>
<tr><td>font-size</td></tr>
<tr><td>font-style</td></tr>
<tr><td>font-weight</td></tr>
<tr><td>gridline-color</td></tr>
<tr><td>height</td></tr>
<tr><td>icon-size</td></tr>
<tr><td>image</td></tr>
<tr><td>image-position</td></tr>
<tr><td>left</td></tr>
<tr><td>lineedit-password-character</td></tr>
<tr><td>lineedit-password-mask-delay</td></tr>
<tr><td>margin</td></tr>
<tr><td>margin-top</td></tr>
<tr><td>margin-right</td></tr>
<tr><td>margin-bottom</td></tr>
<tr><td>margin-left</td></tr>
<tr><td>max-height</td></tr>
<tr><td>max-width</td></tr>
<tr><td>messagebox-text-interaction-flags</td></tr>
<tr><td>min-height</td></tr>
<tr><td>min-width</td></tr>
<tr><td>opacity*</td></tr>
<tr><td>outline</td></tr>
<tr><td>outline-color</td></tr>
<tr><td>outline-offset</td></tr>
<tr><td>outline-style</td></tr>
<tr><td>outline-radius</td></tr>
<tr><td>outline-bottom-left-radius</td></tr>
<tr><td>outline-bottom-right-radius</td></tr>
<tr><td>outline-top-left-radius</td></tr>
<tr><td>outline-top-right-radius</td></tr>
<tr><td>padding</td></tr>
<tr><td>padding-top</td></tr>
<tr><td>padding-right</td></tr>
<tr><td>padding-bottom</td></tr>
<tr><td>padding-left</td></tr>
<tr><td>paint-alternating-row-colors-for-empty-area</td></tr>
<tr><td>position</td></tr>
<tr><td>right</td></tr>
<tr><td>selection-background-color</td></tr>
<tr><td>selection-color</td></tr>
<tr><td>show-decoration-selected</td></tr>
<tr><td>spacing</td></tr>
<tr><td>subcontrol-origin</td></tr>
<tr><td>subcontrol-position</td></tr>
<tr><td>titlebar-show-tooltips-on-buttons</td></tr>
<tr><td>widget-animation-duration</td></tr>
<tr><td>text-align</td></tr>
<tr><td>text-decoration</td></tr>
<tr><td>top</td></tr>
<tr><td>width</td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Stylesheet platný pro celou aplikaci</h2>

<p>Podívejme se nyní, jakým způsobem je možné nastavit stylesheet, který bude
platný pro celou aplikaci. Je to snadné. Nejdříve do řetězce uložíme vlastní
stylesheet (klidně ho můžeme načíst z&nbsp;externího souboru atd.) a následně
zavoláme metodu <strong>QApplication.setStyleSheet(sheet)</strong>:</p>

<pre>
styleSheet = """
    QPushButton { color: #404040;
                  background-color: rgba(188, 188, 188, 50);
                  font-size: 12px;
                  border: 2px solid #c0c0c0;
                }
    QLabel { color: #404040;
             background-color: rgba(255, 188, 20, 50);
             font-size: 14px;
           }
"""
&nbsp;
self.setStyleSheet(styleSheet)
</pre>

<p>Alternativně je možné stylesheet předat i přes parametry příkazové
řádky:</p>

<pre>
./test.py -stylesheet jméno_souboru.css
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Pátý demonstrační příklad &ndash; použití stylesheetu platného pro celou aplikaci</h2>

<p>V&nbsp;dnešním pátém a současně i posledním demonstračním příkladu je ukázán
způsob použití <i>stylesheetu</i> platného pro celou aplikaci. Ve stylesheetu
nastavujeme vlastnosti pouze dvou widgetů, konkrétně textového popisku
<strong>QLabel</strong> a standardního tlačítka <strong>QPushButton</strong>.
Sami si můžete vyzkoušet vliv modifikace změny stylesheetu na způsob zobrazení
hlavního okna aplikace.</p>

<img src="https://i.iinfo.cz/images/489/pyside16-26.png" class="image-323290" alt="&#160;" height="131" width="244" />
<p><i>Obrázek 28: Screenshot pátého demonstračního příkladu s&nbsp;aplikací
vlastního stylesheetu.</i></p>

<p>Opět následuje výpis zdrojového kódu tohoto demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># další tlačítka</i>
        button1 = self.prepareButtonWithBackground("#e08080")
        button2 = self.prepareButtonWithBackground("lightblue")
        button3 = self.prepareButtonWithBackground("yellow")
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QHBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(button1)
        topLayout.addWidget(button2)
        topLayout.addWidget(button3)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareButtonWithBackground</strong>(self, background):
        <i># tlačítko s popisem</i>
        button = QtGui.QPushButton(background, self)
&nbsp;
        <i># nastavení stylu</i>
        styleSheet = "background-color: {background}".format(background=background)
        button.setStyleSheet(styleSheet)
&nbsp;
        button.resize(button.sizeHint())
&nbsp;
        return button
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># položka Style v hlavním menu</i>
        styleMenu = menubar.addMenu('&amp;Style')
&nbsp;
        <i># jednotlivé položky menu s nabízenými styly</i>
        for key in QtGui.QStyleFactory.keys():
            styleMenuItem = QtGui.QAction(key, self)
            styleMenuItem.triggered.connect(lambda key=key: self.setStyle(key))
            styleMenu.addAction(styleMenuItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
        styleSheet = """
            QPushButton { color: #404040;
                          background-color: rgba(188, 188, 188, 50);
                          font-size: 12px;
                          border: 2px solid #c0c0c0;
                        }
            QLabel { color: #404040;
                     background-color: rgba(255, 188, 20, 50);
                     font-size: 14px;
                   }
        """
        self.setStyleSheet(styleSheet)
&nbsp;
    def <strong>setStyle</strong>(self, styleName):
        <i># nastavení vybraného stylu</i>
        QtGui.QApplication.setStyle(styleName)
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># QtGui.QApplication.setStyle("plastique")</i>
    <i># QtGui.QApplication.setStyleSheet("background-color: #407040; color: white")</i>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech pěti dnes popsaných demonstračních příkladů společně
s&nbsp;jedním pomocným skriptem byly opět, podobně jako tomu bylo i
v&nbsp;předchozích článcích, uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td>1</td><td>135_most_widgets.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/135_most_widgets.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/135_most_widgets.py</a></td></tr>
<tr><td>2</td><td>136_set_style.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/136_set_style.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/136_set_style.py</a></td></tr>
<tr><td>3</td><td>137_widget_set_style.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/137_widget_set_style.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/137_widget_set_style.py</a></td></tr>
<tr><td>4</td><td>138_widget_background.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/138_widget_background.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/138_widget_background.py</a></td></tr>
<tr><td>5</td><td>139_custom_stylesheets.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/139_custom_stylesheets.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/139_custom_stylesheets.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>140_print_available_styles.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/140_print_available_styles.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/140_print_available_styles.py</a></td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyle.html</a>
</li>

<li>QCommonStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCommonStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCommonStyle.html</a>
</li>

<li>QPlastiqueStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPlastiqueStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPlastiqueStyle.html</a>
</li>

<li>QMacStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMacStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMacStyle.html</a>
</li>

<li>QCleanlooksStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCleanlooksStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCleanlooksStyle.html</a>
</li>

<li>QGtkStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGtkStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGtkStyle.html</a>
</li>

<li>QCDEStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCDEStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCDEStyle.html</a>
</li>

<li>QMotifStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMotifStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMotifStyle.html</a>
</li>

<li>QWindowsStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWindowsStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWindowsStyle.html</a>
</li>

<li>QStyleFactory<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleFactory.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleFactory.html</a>
</li>

<li>QStyleOptionHeader<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleOptionHeader.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleOptionHeader.html</a>
</li>

<li>QAbstractSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/AbstractSlider.html</a>
</li>

<li>QScrollBar<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QScrollBar.html">https://pyside.github.io/docs/pyside/PySide/QtGui/ScrollBar.html</a>
</li>

<li>QSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Slider.html</a>
</li>

<li>QDial<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDial.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Dial.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>QTableWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html</a>
</li>

<li>QTableWidgetItem<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html</a>
</li>

<li>QTreeWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html</a>
</li>

<li>QTreeWidgetItem <br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QErrorMessage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html</a>
</li>

<li>QInputDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html</a>
</li>

<li>QColorDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QLineEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html</a>
</li>

<li>QTextEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QIntValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html</a>
</li>

<li>QRegExpValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

