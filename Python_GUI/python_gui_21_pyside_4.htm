<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu s využitím frameworku PySide: přepínací tlačítka a tvorba hlavních oken aplikací</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu s využitím frameworku PySide: přepínací tlačítka a tvorba hlavních oken aplikací</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Čtvrtý článek o knihovně PySide je rozdělen do tří částí. V&nbsp;úvodní části si ukážeme použití přepínacích tlačítek (radio buttons), v&nbsp;části druhé způsob deklarace klávesových zkratek pro widgety a v části poslední se budeme zabývat popisem třídy QMainWindow.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Přepínací tlačítka (radio buttons)</a></p>
<p><a href="#k02">2. Chování jediného přepínacího tlačítka v&nbsp;okně/dialogu</a></p>
<p><a href="#k03">3. První demonstrační příklad</a></p>
<p><a href="#k04">4. Použití přepínacích tlačítek, které nejsou sdruženy do jediné skupiny</a></p>
<p><a href="#k05">5. Druhý demonstrační příklad</a></p>
<p><a href="#k06">6. Vypnutí režimu automatického sdružování přepínacích tlačítek do jedné skupiny</a></p>
<p><a href="#k07">7. Třetí demonstrační příklad</a></p>
<p><a href="#k08">8. Vytvoření explicitních skupin přepínacích tlačítek</a></p>
<p><a href="#k09">9. Čtvrtý demonstrační příklad</a></p>
<p><a href="#k10">10. Použití klávesových zkratek namísto myši při přístupu ke standardním widgetům</a></p>
<p><a href="#k11">11. Pátý demonstrační příklad</a></p>
<p><a href="#k12">12. Explicitní klávesové zkratky (Ctrl+?, Shift+?, Alt+?)</a></p>
<p><a href="#k13">13. Šestý demonstrační příklad</a></p>
<p><a href="#k14">14. Třída <strong>QMainWindow</strong> a její odlišnosti od <strong>QWidget</strong></a></p>
<p><a href="#k15">15. Zobrazení hlavního okna</a></p>
<p><a href="#k16">16. Přidání tlačítka do centrální části hlavního okna</a></p>
<p><a href="#k17">17. Lepší přístup &ndash; odvození vlastního widgetu pro centrální část hlavního okna</a></p>
<p><a href="#k18">18. Složitější layout komponent, stavový řádek a další vylepšení</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Přepínací tlačítka (radio buttons)</h2>

<p><a
href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-dalsi-dostupne-ovladaci-prvky/">Minule</a>
jsme si popsali způsob práce se standardními tlačítky představovanými třídou
<strong>QPushButton</strong> (popř.&nbsp;jejími potomky) a taktéž se
zaškrtávacími tlačítky, které jsou v&nbsp;knihovně <i>PySide</i> představována
třídou <strong>QCheckBox</strong>. Připomeňme si jen, že zaškrtávací tlačítka
mohou být použita pro výběr ze dvou či ze tří stavů a že je možné je spojovat
do skupin, v&nbsp;nichž je možné zaškrtnout pouze jediné tlačítko. A právě přes
tuto vlastnost se dostáváme ke třetí variantě tlačítka. Touto variantou je
přepínač neboli <i>radio button</i>. Jedná se o zcela běžný prvek grafických
uživatelských rozhraní, který se používá především ve chvíli, kdy je nutné
zajistit, aby byl vybrán jen jediný prvek z&nbsp;dané množiny <i>n</i> prvků.
Množina voleb by jen měla být dostatečně malá a ideálně předem známá, jinak je
výhodnější použít widget typu seznam.</p>

<img src="https://i.iinfo.cz/images/465/tkinter4-2.png" class="image-299730" alt="&#160;" width="230" height="193" />
<p><i>Obrázek 1: Se skupinami přepínacích tlačítek jsme se již setkali při
popisu možností knihovny Tkinter.</i></p>

<p>V&nbsp;knihovně <i>PySide</i> jsou přepínací tlačítka představována
instancemi tříd typu <strong>QRadioButton</strong>. Předkem této třídy je
<strong>QAbstractButton</strong>, podobně jako u všech dalších typů
tlačítek.</p>

<img src="https://i.iinfo.cz/images/151/pyside3a-1.png" class="image-315218" alt="&#160;" height="136" width="400" />
<p><i>Obrázek 2: Hierarchie widgetů odvozených obecného ovládacího prvku
<strong>QWidget</strong>.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Chování jediného přepínacího tlačítka v&nbsp;okně/dialogu</h2>

<p>Přepínací tlačítka se typicky a v&nbsp;naprosté většině případů spojují do
skupin, ovšem v&nbsp;extrémním případě může skupina obsahovat jen jediné
tlačítko. Zajímavé je, že při použití jediného přepínacího tlačítka se různé
toolkity (knihovny a frameworky pro tvorbu grafického uživatelského rozhraní)
chovají odlišně. Nejprve si ukažme chování standardního Pythonovského GUI
toolkitu, tedy knihovny <i>Tkinter</i>. Aplikace s&nbsp;oknem, v&nbsp;němž je
(kromě dalších ovládacích prvků) jen jediné přepínací tlačítko, vypadá
následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
import tkinter
&nbsp;
import sys
&nbsp;
&nbsp;
def <strong>print_state</strong>():
    print(radio_var.get())
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
radio_var = tkinter.StringVar()
&nbsp;
radio1 = tkinter.Radiobutton(root, variable=radio_var, value="Radio button",
                             text="Radio button")
&nbsp;
testButton = tkinter.Button(root, text="Print state", command=print_state)
&nbsp;
quitButton = tkinter.Button(root, text="Quit", command=exit)
&nbsp;
radio1.grid(column=1, row=1)
testButton.grid(column=1, row=2, sticky="we", padx=6, pady=6)
quitButton.grid(column=1, row=3, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

<p>Po spuštění této aplikace se zobrazí toto okno:</p>

<img src="https://i.iinfo.cz/images/151/pyside3a-2.png" class="image-315219" alt="&#160;" height="130" width="109" />
<p><i>Obrázek 3: Okno s&nbsp;jediným přepínacím tlačítkem po spuštění aplikace
naprogramované s&nbsp;využitím knihovny Tkinter.</i></p>

<p>Přepínací tlačítko je samozřejmě možné vybrat (nebude již zašedlé), ale
výběr již nelze zrušit (pokud samozřejmě nenaprogramujeme odlišné chování):</p>

<img src="https://i.iinfo.cz/images/151/pyside3a-3.png" class="image-315220" alt="&#160;" height="130" width="109" />
<p><i>Obrázek 4: Přepínací tlačítko je sice možné vybrat, ale již ne &bdquo;odvybrat&ldquo;.</i></p>

<p>V&nbsp;knihovně <i>PySide</i> je chování aplikace (resp.&nbsp;přesněji
řečeno okna či dialogu) s&nbsp;jediným přepínacím tlačítkem odlišné, protože se
tento widget začne chovat jako běžné zaškrtávací tlačítko. Vzhled je ovšem
samozřejmě odlišný:</p>

<img src="https://i.iinfo.cz/images/151/pyside3a-4.png" class="image-315221" alt="&#160;" height="137" width="135" />
<p><i>Obrázek 5: Aplikace naprogramovaná v&nbsp;PySide; výchozí stav.</i></p>

<img src="https://i.iinfo.cz/images/151/pyside3a-5.png" class="image-315222" alt="&#160;" height="137" width="135" />
<p><i>Obrázek 6: Přepínací tlačítko je možné vybrat...</i></p>

<img src="https://i.iinfo.cz/images/151/pyside3a-6.png" class="image-315223" alt="&#160;" height="137" width="135" />
<p><i>Obrázek 7: ...a výběr lze také zrušit.</i></p>

<p>V&nbsp;knihovně PySide se přepínací tlačítko vytvoří velmi jednoduše;
postačuje totiž zavolat konstruktor třídy <strong>QRadioButton</strong> a
předat mu text, který má být na tlačítku zobrazen (i když to tak vizuálně
nevypadá, zahrnuje aktivní plocha tlačítka i celý text, nejenom vlastní
přepínací &bdquo;kolečko&ldquo;):</p>

<pre>
testRadioButton = QtGui.QRadioButton("radio button")
</pre>

<p>Kdykoli později můžeme otestovat, jestli je dané tlačítko vybráno, zavoláním
metody <strong>isChecked</strong>, která vrací pravdivostní (booleovskou)
hodnotu:</p>

<pre>
testRadioButton.isChecked()
</pre>

<p>Kromě toho je možné pracovat se všemi čtyřmi signály:</p>

<table>
<tr><th>Jméno signálu</th><th>Význam</th></tr>
<tr><td>clicked</td><td>vyslán <strong>po</strong> stisku a puštění tlačítka</td></tr>
<tr><td>pressed</td><td>vyslán ve chvíli, kdy došlo ke stlačení</td></tr>
<tr><td>released</td><td>vyslán ve chvíli, kdy došlo k&nbsp;puštění tlačítka</td></tr>
<tr><td>toggled</td><td>vyslán po změně stavu tlačítka (zapnuto/vypnuto)</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad</h2>

<p>Podívejme se nyní na způsob implementace jednoduché aplikace, po jejímž
spuštění se zobrazí okno obsahující trojici aktivních ovládacích prvků &ndash;
přepínacího tlačítka, běžného tlačítka pro zjištění stavu aplikace a dalšího
běžného tlačítka sloužícího k&nbsp;ukončení běhu aplikace. Vzhledem
k&nbsp;jednoduchosti GUI aplikace použijeme pro rozmístění komponent obyčejný
<strong>QVBoxLayout</strong>. Logika pro zjištění stavu přepínacího tlačítka je
připravena na situaci, kdy do okna přidáme další ovládací prvky:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Single radio button")
&nbsp;
        <i># testovací přepínací tlačítko</i>
        self.testRadioButton = QtGui.QRadioButton("radio button")
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState(self):</strong>
        print("-" * 50)
        MainWindow.printStateForRadioButton("radio button", self.testRadioButton)
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton(name, radioButton):</strong>
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Použití přepínacích tlačítek, které nejsou sdruženy do jediné skupiny</h2>

<p>Jediné přepínací tlačítko se samozřejmě většinou nepoužívá; setkáme se spíše
se skupinou dvou až (přibližně) deseti tlačítek. Pokud tato tlačítka přímo
vložíme do okna aplikace, bude jejich chování záviset na nastavení vlastnosti
<strong>autoExclusive</strong>. Implicitně je tato vlastnost u přepínacích
tlačítek nastavena, takže je možné vybrat maximálně jediné tlačítko ze skupiny
(nemusí být ovšem vybráno žádné tlačítko). Skupinu ve skutečnosti není
zapotřebí explicitně nastavovat &ndash; pokud to totiž neuděláme, budou
tlačítka sdružena do skupin podle toho widgetu, na jehož plochu jsou umístěna.
A vzhledem k&nbsp;tomu, že tlačítka umístíme přímo do okna, budou všechna
implicitně patřit do jediné skupiny. Můžeme se o tom snadno přesvědčit.</p>

<p>Nejprve vytvoříme sadu šesti přepínacích tlačítek:</p>

<pre>
<i># testovací přepínací tlačítka</i>
testRadioButton1 = QtGui.QRadioButton("radio button #1")
testRadioButton2 = QtGui.QRadioButton("radio button #2")
testRadioButton3 = QtGui.QRadioButton("radio button #3")
testRadioButton4 = QtGui.QRadioButton("radio button #4")
testRadioButton5 = QtGui.QRadioButton("radio button #5")
testRadioButton6 = QtGui.QRadioButton("radio button #6")
</pre>

<p>Následně (není to ovšem povinnost) jedno z&nbsp;tlačítek vybereme:</p>

<pre>
<i># které tlačítko bude vybráno</i>
testRadioButton3.setChecked(True)
</pre>

<p>Nakonec vložíme tlačítka přímo na plochu okna (zde konkrétně přes správce
rozvržení <strong>QVBoxLayout</strong>):</p>

<pre>
<i># umístění widgetů do okna</i>
layout.addWidget(testRadioButton1)
layout.addWidget(testRadioButton2)
layout.addWidget(testRadioButton3)
layout.addWidget(testRadioButton4)
layout.addWidget(testRadioButton5)
layout.addWidget(testRadioButton6)
</pre>

<img src="https://i.iinfo.cz/images/123/pyside4b-1.png" class="image-315224" alt="&#160;" height="277" width="158" />
<p><i>Obrázek 8: Výchozí stav aplikace, kdy je vybráno třetí tlačítko.</i></p>

<img src="https://i.iinfo.cz/images/123/pyside4b-2.png" class="image-315225" alt="&#160;" height="277" width="158" />
<p><i>Obrázek 9: Přepnutí na první tlačítko (myší či klávesnicí).</i></p>

<p>Pokud zakomentujeme tento řádek, nebude ve výchozím stavu vybráno žádné
tlačítko:</p>

<pre>
self.testRadioButton3.setChecked(True)
</pre>

<img src="https://i.iinfo.cz/images/123/pyside4b-3.png" class="image-315226" alt="&#160;" height="277" width="158" />
<p><i>Obrázek 10: Výchozí stav ve chvíli, kdy není vybráno žádné tlačítko.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Druhý demonstrační příklad</h2>

<p>Ve druhém demonstračním příkladu je ukázán způsob použití většího množství
přepínacích tlačítek vložených do jediného okna aplikace. U tlačítek není
specifikována žádná skupina, což povede k&nbsp;tomu, že se tlačítka automaticky
přepnou do režimu exkluzivity výběru (tj.&nbsp;bude možné vybrat vždy maximálně
jedno tlačítko v&nbsp;celém oknu):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Six radio buttons")
&nbsp;
        <i># testovací přepínací tlačítka</i>
        self.testRadioButton1 = QtGui.QRadioButton("radio button #1")
        self.testRadioButton2 = QtGui.QRadioButton("radio button #2")
        self.testRadioButton3 = QtGui.QRadioButton("radio button #3")
        self.testRadioButton4 = QtGui.QRadioButton("radio button #4")
        self.testRadioButton5 = QtGui.QRadioButton("radio button #5")
        self.testRadioButton6 = QtGui.QRadioButton("radio button #6")
&nbsp;
        <i># které tlačítko bude vybráno</i>
        self.testRadioButton3.setChecked(True)
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton1)
        layout.addWidget(self.testRadioButton2)
        layout.addWidget(self.testRadioButton3)
        layout.addWidget(self.testRadioButton4)
        layout.addWidget(self.testRadioButton5)
        layout.addWidget(self.testRadioButton6)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState</strong>(self):
        print("-" * 50)
        MainWindow.printStateForRadioButton("#1", self.testRadioButton1)
        MainWindow.printStateForRadioButton("#2", self.testRadioButton2)
        MainWindow.printStateForRadioButton("#3", self.testRadioButton3)
        MainWindow.printStateForRadioButton("#4", self.testRadioButton4)
        MainWindow.printStateForRadioButton("#5", self.testRadioButton5)
        MainWindow.printStateForRadioButton("#6", self.testRadioButton6)
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton</strong>(name, radioButton):
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vypnutí režimu automatického sdružování přepínacích tlačítek do jedné skupiny</h2>

<p><a href="#k04">Výše popsaný</a> režim automatického sdružování přepínacích
tlačítek do jedné skupiny můžeme vypnout, a to buď pro všechna tlačítka, nebo
jen pro tlačítka vybraná. Vyzkoušejme si druhou možnost. Nejprve opět vytvoříme
šest přepínacích tlačítek:</p>

<pre>
<i># testovací přepínací tlačítka</i>
testRadioButton1 = QtGui.QRadioButton("radio button #1")
testRadioButton2 = QtGui.QRadioButton("radio button #2")
testRadioButton3 = QtGui.QRadioButton("radio button #3")
testRadioButton4 = QtGui.QRadioButton("radio button #4")
testRadioButton5 = QtGui.QRadioButton("radio button #5")
testRadioButton6 = QtGui.QRadioButton("radio button #6")
</pre>

<p>Poté u prvních tří tlačítek vypneme režim automatického zajišťování
exkluzivity výběru:</p>

<pre>
<i># první tři tlačítka nebudou automaticky přidána do společné skupiny</i>
testRadioButton1.setAutoExclusive(False)
testRadioButton2.setAutoExclusive(False)
testRadioButton3.setAutoExclusive(False)
</pre>

<p>Chování je ukázáno na následující sekvenci screenshotů:</p>

<img src="https://i.iinfo.cz/images/123/pyside4b-4.png" class="image-315227" alt="&#160;" height="301" width="158" />
<p><i>Obrázek 11: Výchozí stav aplikace, kdy není vybráno žádné
tlačítko.</i></p>

<img src="https://i.iinfo.cz/images/123/pyside4b-5.png" class="image-315228" alt="&#160;" height="301" width="158" />
<p><i>Obrázek 12: Ve druhé (spodní) trojici lze vždy vybrat maximálně jedno
tlačítko.</i></p>

<img src="https://i.iinfo.cz/images/123/pyside4b-6.png" class="image-315229" alt="&#160;" height="301" width="158" />
<p><i>Obrázek 13: První (horní) trojice umožňuje libovolnou kombinaci
výběru.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Třetí demonstrační příklad</h2>

<p>Třetí demonstrační příklad se do značné míry podobá příkladu druhému,
s&nbsp;nímž jsme se seznámili <a href="#k05">v&nbsp;páto kapitole</a>. Jediný
podstatný rozdíl spočívá v&nbsp;tom, že první tři přepínací tlačítka nemají
povolen režim exkluzivního výběru. Tato tlačítka jsou od další trojice vizuálně
oddělena:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Non exclusive selection")
&nbsp;
        <i># testovací přepínací tlačítka</i>
        self.testRadioButton1 = QtGui.QRadioButton("radio button #1")
        self.testRadioButton2 = QtGui.QRadioButton("radio button #2")
        self.testRadioButton3 = QtGui.QRadioButton("radio button #3")
        self.testRadioButton4 = QtGui.QRadioButton("radio button #4")
        self.testRadioButton5 = QtGui.QRadioButton("radio button #5")
        self.testRadioButton6 = QtGui.QRadioButton("radio button #6")
&nbsp;
        <i># první tři tlačítka nebudou automaticky přidána do společné skupiny</i>
        self.testRadioButton1.setAutoExclusive(False)
        self.testRadioButton2.setAutoExclusive(False)
        self.testRadioButton3.setAutoExclusive(False)
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># horizontální oddělovač</i>
        horizontalLine = QtGui.QLabel()
        horizontalLine.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton1)
        layout.addWidget(self.testRadioButton2)
        layout.addWidget(self.testRadioButton3)
        layout.addWidget(horizontalLine)
        layout.addWidget(self.testRadioButton4)
        layout.addWidget(self.testRadioButton5)
        layout.addWidget(self.testRadioButton6)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState(self):</strong>
        print("-" * 50)
        MainWindow.printStateForRadioButton("#1", self.testRadioButton1)
        MainWindow.printStateForRadioButton("#2", self.testRadioButton2)
        MainWindow.printStateForRadioButton("#3", self.testRadioButton3)
        MainWindow.printStateForRadioButton("#4", self.testRadioButton4)
        MainWindow.printStateForRadioButton("#5", self.testRadioButton5)
        MainWindow.printStateForRadioButton("#6", self.testRadioButton6)
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton(name, radioButton):</strong>
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vytvoření explicitních skupin přepínacích tlačítek</h2>

<p>V&nbsp;případě, že se mají v&nbsp;dialogu objevit přepínací tlačítka tvořící
větší množství skupin, již musíme jednotlivé skupiny explicitně definovat. Není
to nic těžkého, ostatně jsme se s&nbsp;tímto problémem již setkali minule při
popisu tvorby skupiny zaškrtávacích tlačítek. Podívejme se tedy na postup ve
chvíli, kdy budeme potřebovat vytvořit tři skupiny přepínacích tlačítek,
přičemž v&nbsp;každé skupině budou pro jednoduchost pouze dvě tlačítka. Nejprve
jednotlivá tlačítka vytvoříme, což už dobře známe:</p>

<pre>
<i># testovací přepínací tlačítka</i>
&nbsp;
<i># první skupina</i>
testRadioButton1 = QtGui.QRadioButton("radio button #1")
testRadioButton2 = QtGui.QRadioButton("radio button #2")
&nbsp;
<i># druhá skupina</i>
testRadioButton3 = QtGui.QRadioButton("radio button #3")
testRadioButton4 = QtGui.QRadioButton("radio button #4")
&nbsp;
<i># třetí skupina</i>
testRadioButton5 = QtGui.QRadioButton("radio button #5")
testRadioButton6 = QtGui.QRadioButton("radio button #6")
</pre>

<p>Dále musíme tlačítka sloučit do skupin, takže si jednotlivé skupiny
vytvoříme. Stačí nám přitom dvě skupiny, a to z&nbsp;toho důvodu, že zbylá
tlačítka budou patřit přímo do okna a vytvoří tedy automaticky skupinu
vlastní:</p>

<pre>
<i># dvě explicitní skupiny tlačítek</i>
buttonGroup1and2 = QtGui.QButtonGroup()
buttonGroup3and4 = QtGui.QButtonGroup()
</pre>

<p>Nastavíme chování tlačítek v&nbsp;jednotlivých skupinách:</p>

<pre>
<i># chování tlačítek ve skupinách</i>
buttonGroup1and2.setExclusive(True)
buttonGroup3and4.setExclusive(True)
</pre>

<p>Přidáme dvě tlačítka do první skupiny:</p>

<pre>
<i># přidání přepínacích tlačítek do skupin</i>
buttonGroup1and2.addButton(testRadioButton1)
buttonGroup1and2.addButton(testRadioButton2)
</pre>

<p>A další dvě tlačítka do skupiny druhé:</p>

<pre>
<i># přidání přepínacích tlačítek do skupin</i>
buttonGroup3and4.addButton(testRadioButton3)
buttonGroup3and4.addButton(testRadioButton4)
</pre>

<p>Následně již jednotlivá tlačítka vložíme do okna, samozřejmě společně
s&nbsp;vizuálním oddělovačem jednotlivých skupin:</p>

<pre>
<i># umístění widgetů do okna</i>
layout.addWidget(testRadioButton1)
layout.addWidget(testRadioButton2)
&nbsp;
layout.addWidget(horizontalLine1)
&nbsp;
layout.addWidget(testRadioButton3)
layout.addWidget(testRadioButton4)
&nbsp;
layout.addWidget(horizontalLine2)
&nbsp;
layout.addWidget(testRadioButton5)
layout.addWidget(testRadioButton6)
</pre>

<p>Chování takto upravené aplikace je ukázáno na další sérii screenshotů:</p>

<img src="https://i.iinfo.cz/images/278/pyside4c-1.png" class="image-315390" alt="&#160;" height="325" width="158" />
<p><i>Obrázek 14: Výchozí stav přepínačů &ndash; žádné tlačítko není
vybráno.</i></p>

<img src="https://i.iinfo.cz/images/278/pyside4c-2.png" class="image-315391" alt="&#160;" height="325" width="158" />
<p><i>Obrázek 15: Přepínaní je možné provádět v&nbsp;každé skupině
zvlášť.</i></p>

<img src="https://i.iinfo.cz/images/278/pyside4c-3.png" class="image-315392" alt="&#160;" height="325" width="158" />
<p><i>Obrázek 16: Samozřejmě nezávisle na ostatních skupinách.</i></p>

<img src="https://i.iinfo.cz/images/278/pyside4c-4.png" class="image-315393" alt="&#160;" height="158" width="290" />
<p><i>Obrázek 17: Stav přepínačů zjištěných ve chvíli, kdy je aplikace ve stavu
zobrazeném na předchozím screenshotu.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Čtvrtý demonstrační příklad</h2>

<p>V&nbsp;dnešním třetím demonstračním příkladu je ukázáno, jakým způsobem je
možné v&nbsp;případě potřeby rozdělit přepínací tlačítka do skupin. Zde se
konkrétně používají dvě explicitně definované skupiny tlačítek, přičemž zbylá
přepínací tlačítka mají vlastní (výchozí) skupinu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Custom radio button groups")
&nbsp;
        <i># dvě explicitní skupiny tlačítek</i>
        self.buttonGroup1and2 = QtGui.QButtonGroup()
        self.buttonGroup3and4 = QtGui.QButtonGroup()
&nbsp;
        <i># chování tlačítek ve skupinách</i>
        self.buttonGroup1and2.setExclusive(True)
        self.buttonGroup3and4.setExclusive(True)
&nbsp;
        <i># testovací přepínací tlačítka</i>
        self.testRadioButton1 = QtGui.QRadioButton("radio button #1")
        self.testRadioButton2 = QtGui.QRadioButton("radio button #2")
        self.testRadioButton3 = QtGui.QRadioButton("radio button #3")
        self.testRadioButton4 = QtGui.QRadioButton("radio button #4")
        self.testRadioButton5 = QtGui.QRadioButton("radio button #5")
        self.testRadioButton6 = QtGui.QRadioButton("radio button #6")
&nbsp;
        <i># přidání přepínacích tlačítek do skupin</i>
        self.buttonGroup1and2.addButton(self.testRadioButton1)
        self.buttonGroup1and2.addButton(self.testRadioButton2)
        self.buttonGroup3and4.addButton(self.testRadioButton3)
        self.buttonGroup3and4.addButton(self.testRadioButton4)
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># horizontální oddělovače</i>
        horizontalLine1 = QtGui.QLabel()
        horizontalLine1.setFrameStyle(QtGui.QFrame.HLine)
        horizontalLine2 = QtGui.QLabel()
        horizontalLine2.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton1)
        layout.addWidget(self.testRadioButton2)
        layout.addWidget(horizontalLine1)
        layout.addWidget(self.testRadioButton3)
        layout.addWidget(self.testRadioButton4)
        layout.addWidget(horizontalLine2)
        layout.addWidget(self.testRadioButton5)
        layout.addWidget(self.testRadioButton6)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState(self):</strong>
        print("-" * 50)
        MainWindow.printStateForRadioButton("#1", self.testRadioButton1)
        MainWindow.printStateForRadioButton("#2", self.testRadioButton2)
        MainWindow.printStateForRadioButton("#3", self.testRadioButton3)
        MainWindow.printStateForRadioButton("#4", self.testRadioButton4)
        MainWindow.printStateForRadioButton("#5", self.testRadioButton5)
        MainWindow.printStateForRadioButton("#6", self.testRadioButton6)
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton(name, radioButton):</strong>
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Použití klávesových zkratek namísto myši při přístupu ke standardním widgetům</h2>

<p>Ve druhé třetině článku se budeme zabývat přiřazením klávesových zkratek
k&nbsp;jednotlivým aktivním ovládacím prvkům. Při tvorbě zkratek můžeme použít
dva přístupy &ndash; buď se spolehneme na použití kombinace klávesy
<strong>Alt</strong> s&nbsp;dalším znakem, nebo budeme muset vytvořit vlastní
klávesovou zkratku, která ovšem může být mnohonásobně komplikovanější a může
obsahovat i sekvenci po sobě stisknutých kombinací kláves. Nejdříve se však
budeme zabývat prvním případem, tj.&nbsp;klávesovými zkratkami ve tvaru
<strong>Alt+znak</strong>. Příslušný znak může být součástí textu na ovládacím
prvku; postačí před něj vložit znak &amp;. Příslušný znak bude většinou
zobrazen s&nbsp;podtržením a bude i správně reagovat na ovládání
z&nbsp;klávesnice. Ukažme si příklad použití tohoto postupu pro různé typy
widgetů:</p>

<pre>
<i># testovací zaškrtávací tlačítka</i>
testCheckBox1 = QtGui.QCheckBox("check box &amp;x")
testCheckBox2 = QtGui.QCheckBox("check box &amp;y")
testCheckBox3 = QtGui.QCheckBox("check box &amp;z")
&nbsp;
<i># testovací přepínací tlačítka</i>
estRadioButton1 = QtGui.QRadioButton("radio button &amp;a")
estRadioButton2 = QtGui.QRadioButton("radio button &amp;b")
estRadioButton3 = QtGui.QRadioButton("radio button &amp;c")
&nbsp;
<i># tlačítko pro zjištění stavů přepínačů</i>
testButton = QtGui.QPushButton("&amp;Print state")
&nbsp;
<i># tlačítko pro ukončení aplikace</i>
quitButton = QtGui.QPushButton("&amp;Quit")
</pre>

<img src="https://i.iinfo.cz/images/278/pyside4c-5.png" class="image-315394" alt="&#160;" height="325" width="147" />
<p><i>Obrázek 18: Ovládací prvky, k&nbsp;nimž je přiřazena kombinace
<strong>Alt+znak</strong>.</i></p>

<p>Pokud budeme chtít pouze zobrazit znak &amp;, musíme ho zdvojit a tím
negovat jeho speciální význam:</p>

<pre>
<i># testovací zaškrtávací tlačítka</i>
testCheckBox1 = QtGui.QCheckBox("check box &amp;&amp;x")
testCheckBox2 = QtGui.QCheckBox("check box &amp;&amp;y")
testCheckBox3 = QtGui.QCheckBox("check box &amp;&amp;z")
&nbsp;
<i># testovací přepínací tlačítka</i>
estRadioButton1 = QtGui.QRadioButton("radio button &amp;&amp;a")
estRadioButton2 = QtGui.QRadioButton("radio button &amp;&amp;b")
estRadioButton3 = QtGui.QRadioButton("radio button &amp;&amp;c")
&nbsp;
<i># tlačítko pro zjištění stavů přepínačů</i>
testButton = QtGui.QPushButton("&amp;&amp;Print state")
&nbsp;
<i># tlačítko pro ukončení aplikace</i>
quitButton = QtGui.QPushButton("&amp;&amp;Quit")
</pre>

<img src="https://i.iinfo.cz/images/278/pyside4c-6.png" class="image-315395" alt="&#160;" height="325" width="158" />
<p><i>Obrázek 19: Ovládací prvky se zobrazením znaku &amp; (nemá zde žádný
speciální význam).</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pátý demonstrační příklad</h2>

<p>V&nbsp;pořadí pátém demonstračním příkladu je ukázáno, jak lze
k&nbsp;jednotlivým ovládacím prvkům, tj.&nbsp;k&nbsp;běžným tlačítkům,
zaškrtávacím tlačítkům i k&nbsp;tlačítkům přepínacím přiřadit klávesové
zkratky. Po spuštění příkladu si můžete sami vyzkoušet použít kombinaci
<strong>Alt+znak</strong> pro stisk příslušného tlačítka bez nutnosti použít
myš či přepínat fokus s&nbsp;využitím <strong>Tab</strong>:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Shortcuts")
&nbsp;
        <i># testovací zaškrtávací tlačítka</i>
        self.testCheckBox1 = QtGui.QCheckBox("check box &amp;x")
        self.testCheckBox2 = QtGui.QCheckBox("check box &amp;y")
        self.testCheckBox3 = QtGui.QCheckBox("check box &amp;z")
        self.testCheckBox1.setCheckState(QtCore.Qt.Unchecked)
        self.testCheckBox2.setCheckState(QtCore.Qt.Checked)
        self.testCheckBox3.setCheckState(QtCore.Qt.Unchecked)
&nbsp;
        <i># testovací přepínací tlačítka</i>
        self.testRadioButton1 = QtGui.QRadioButton("radio button &amp;a")
        self.testRadioButton2 = QtGui.QRadioButton("radio button &amp;b")
        self.testRadioButton3 = QtGui.QRadioButton("radio button &amp;c")
        self.testRadioButton2.setChecked(True)
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("&amp;Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("&amp;Quit")
&nbsp;
        <i># horizontální oddělovače</i>
        horizontalLine1 = QtGui.QLabel()
        horizontalLine1.setFrameStyle(QtGui.QFrame.HLine)
        horizontalLine2 = QtGui.QLabel()
        horizontalLine2.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton1)
        layout.addWidget(self.testRadioButton2)
        layout.addWidget(self.testRadioButton3)
        layout.addWidget(horizontalLine1)
        layout.addWidget(self.testCheckBox1)
        layout.addWidget(self.testCheckBox2)
        layout.addWidget(self.testCheckBox3)
        layout.addWidget(horizontalLine2)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState(self):</strong>
        print("-" * 50)
        MainWindow.printStateForRadioButton("#1", self.testRadioButton1)
        MainWindow.printStateForRadioButton("#2", self.testRadioButton2)
        MainWindow.printStateForRadioButton("#3", self.testRadioButton3)
        MainWindow.printStateForCheckbox("#1", self.testCheckBox1)
        MainWindow.printStateForCheckbox("#2", self.testCheckBox2)
        MainWindow.printStateForCheckbox("#3", self.testCheckBox3)
&nbsp;
    @staticmethod
    def <strong>printStateForCheckbox(name, checkbox):</strong>
        state = "checked" if checkbox.isChecked() else "unchecked"
        print("Checkbox {name} is {state}".format(name=name, state=state))
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton(name, radioButton):</strong>
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Explicitní klávesové zkratky (Ctrl+?, Shift+?, Alt+?)</h2>

<p>Pokud kombinace <strong>Alt+znak</strong> z&nbsp;nějakého důvodu nedostačuje
pro potřeby aplikace, je nutné použít nepatrně složitější způsob deklarace
klávesových zkratek. Tento způsob využívá metodu <a
href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html#PySide.QtGui.PySide.QtGui.QAbstractButton.setShortcut">setShortcut</a>
deklarovanou ve třídě <strong>QAbstractButton</strong>. Této metodě se předává
objekt typu <a
href="https://pyside.github.io/docs/pyside/PySide/QtGui/QKeySequence.html#PySide.QtGui.QKeySequence">QKeySequence</a>.
Instance <strong>QKeySequence</strong> lze získat různými způsoby, ovšem pokud
nebudeme chtít klávesovou zkratku zobrazit uživateli (což u běžného dialogu asi
nemá význam, na rozdíl od položek menu), je nejjednodušší použít
konstruktor:</p>

<pre>
QKeySequence("klávesová zkratka")
</pre>

<p>Pozor: ve chvíli, kdy k&nbsp;ovládacímu prvku přiřadíte vlastní klávesovou
zkratku, nebude možné použít implicitní zkratku <strong>Alt+znak</strong>, i
když bude příslušný znak podtržený!</p>

<p>Příklady použití ukazují, jaké klávesové zkratky (nutno říci, že v&nbsp;této
podobě jsou systémově závislé) se mohou v&nbsp;řetězci objevit:</p>

<pre>
<i># klávesové zkratky</i>
testRadioButton1.setShortcut(QtGui.QKeySequence("Ctrl+A"))
testRadioButton2.setShortcut(QtGui.QKeySequence("Ctrl+B"))
testRadioButton3.setShortcut(QtGui.QKeySequence("Ctrl+C"))
&nbsp;
testCheckBox1.setShortcut(QtGui.QKeySequence("F1"))
testCheckBox2.setShortcut(QtGui.QKeySequence("F2"))
testCheckBox3.setShortcut(QtGui.QKeySequence("F3"))
&nbsp;
testButton.setShortcut(QtGui.QKeySequence("Shift+P"))
quitButton.setShortcut(QtGui.QKeySequence("Esc"))
</pre>

<img src="https://i.iinfo.cz/images/278/pyside4c-7.png" class="image-315396" alt="&#160;" height="325" width="206" />
<p><i>Obrázek 20: Aplikace, kterou je možné ovládat klávesovými
zkratkami.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Šestý demonstrační příklad</h2>

<p>Způsob deklarace klávesových zkratek přiřazených k&nbsp;jednotlivým
komponentám grafického uživatelského rozhraní je ukázán v&nbsp;dnešním šestém
demonstračním příkladu, jehož zdrojový kód je vypsán pod tímto odstavcem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Custom shortcuts")
&nbsp;
        <i># testovací zaškrtávací tlačítka</i>
        self.testCheckBox1 = QtGui.QCheckBox("check box x (F1)")
        self.testCheckBox2 = QtGui.QCheckBox("check box y (F2)")
        self.testCheckBox3 = QtGui.QCheckBox("check box z (F3)")
        self.testCheckBox1.setCheckState(QtCore.Qt.Unchecked)
        self.testCheckBox2.setCheckState(QtCore.Qt.Checked)
        self.testCheckBox3.setCheckState(QtCore.Qt.Unchecked)
&nbsp;
        <i># testovací přepínací tlačítka</i>
        self.testRadioButton1 = QtGui.QRadioButton("radio button a (Ctrl+A)")
        self.testRadioButton2 = QtGui.QRadioButton("radio button b (Ctrl+B)")
        self.testRadioButton3 = QtGui.QRadioButton("radio button c (Ctrl+C)")
        self.testRadioButton2.setChecked(True)
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("Print state (Shift+P)")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit (Esc)")
&nbsp;
        <i># klávesové zkratky</i>
        self.testRadioButton1.setShortcut(QtGui.QKeySequence("Ctrl+A"))
        self.testRadioButton2.setShortcut(QtGui.QKeySequence("Ctrl+B"))
        self.testRadioButton3.setShortcut(QtGui.QKeySequence("Ctrl+C"))
&nbsp;
        self.testCheckBox1.setShortcut(QtGui.QKeySequence("F1"))
        self.testCheckBox2.setShortcut(QtGui.QKeySequence("F2"))
        self.testCheckBox3.setShortcut(QtGui.QKeySequence("F3"))
&nbsp;
        testButton.setShortcut(QtGui.QKeySequence("Shift+P"))
        quitButton.setShortcut(QtGui.QKeySequence("Esc"))
&nbsp;
        <i># horizontální oddělovače</i>
        horizontalLine1 = QtGui.QLabel()
        horizontalLine1.setFrameStyle(QtGui.QFrame.HLine)
        horizontalLine2 = QtGui.QLabel()
        horizontalLine2.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton1)
        layout.addWidget(self.testRadioButton2)
        layout.addWidget(self.testRadioButton3)
        layout.addWidget(horizontalLine1)
        layout.addWidget(self.testCheckBox1)
        layout.addWidget(self.testCheckBox2)
        layout.addWidget(self.testCheckBox3)
        layout.addWidget(horizontalLine2)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState(self):</strong>
        print("-" * 50)
        MainWindow.printStateForRadioButton("#1", self.testRadioButton1)
        MainWindow.printStateForRadioButton("#2", self.testRadioButton2)
        MainWindow.printStateForRadioButton("#3", self.testRadioButton3)
        MainWindow.printStateForCheckbox("#1", self.testCheckBox1)
        MainWindow.printStateForCheckbox("#2", self.testCheckBox2)
        MainWindow.printStateForCheckbox("#3", self.testCheckBox3)
&nbsp;
    @staticmethod
    def <strong>printStateForCheckbox(name, checkbox):</strong>
        state = "checked" if checkbox.isChecked() else "unchecked"
        print("Checkbox {name} is {state}".format(name=name, state=state))
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton(name, radioButton):</strong>
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Třída <strong>QMainWindow</strong> a její odlišnosti od <strong>QWidget</strong></h2>

<p>V&nbsp;poslední třetině článku si ukážeme, jakým způsobem je možné použít
třídu <strong>QMainWindow</strong> pro vytvoření hlavního okna aplikace.
Všechny předchozí příklady byly založeny na použití obecné komponenty
<strong>QWidget</strong>, od níž jsme odvodili vlastní třídu s&nbsp;odlišnými
vlastnostmi (a samozřejmě i vzhledem):</p>

<pre>
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
</pre>

<p>Využití <strong>QWidgetu</strong> je možné doporučit v&nbsp;případě, že vše,
co vyžadujeme, je prázdné okno či dialog, na jehož plochu budeme vkládat další
komponenty. Ovšem na hlavní okno aplikace jsou kladeny poněkud odlišné
požadavky, neboť uživatelé očekávají:</p>

<ol>
<li>Existenci hlavního menu</li>
<li>Existenci stavového řádku</li>
<li>Většinou taktéž toolbar</li>
<li>U některých aplikací taby s&nbsp;jednotlivými listy</li>
</ol>

<p>Právě v&nbsp;tomto případě není nutné všechny očekávané vlastnosti
implementovat ručně, ale lze namísto <strong>QWidgetu</strong> použít právě
třídu <a
href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">QMainWindow</a>.
Plocha hlavního okna je rozdělena na oblasti, do kterých lze vkládat zmíněné
hlavní menu (představované komponentou <strong>QMenuBar</strong>), stavový
řádek představovaný komponentou <strong>QStatusBar</strong>, dále zde existuje
oblast určená pro vložení toolbaru a tzv.&nbsp;centrální plocha, do které je
možné (většinou nepřímo) vkládat další ovládací prvky.</p>

<img src="https://i.iinfo.cz/images/361/pyside4d-1.png" class="image-315411" alt="&#160;" height="127" width="202" />
<p><i>Obrázek 21: Okno vytvořené odvozením od komponenty <strong>QMainWindow</strong>.</i></p>

<p>Kostra aplikace používající třídu <strong>QMainWindow</strong> může vypadat
prakticky stejně, jako aplikace založená na třídě <strong>QWidget</strong>:</p>

<pre>
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
</pre>

<p>O dalších odlišnostech, které jsou mnohdy zásadního charakteru, se dozvíme
v&nbsp;dalších kapitolách.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zobrazení hlavního okna</h2>

<p>Způsob použití třídy <strong>QMainWindow</strong> pro odvození třídy
reprezentující konkrétní hlavní okno aplikace je ukázán v&nbsp;dalším
demonstračním příkladu, jehož zdrojový kód je vypsán pod tímto odstavcem.
Povšimněte si, že se tato aplikace prakticky nijak neliší od aplikací,
v&nbsp;nichž jsme hlavní okno odvodili od obecného ovládacího prvku
<strong>QWidget</strong>. Ve skutečnosti však bude chování odlišné, což uvidíme
ve chvíli, kdy do hlavního okna budeme vkládat stavový řádek, hlavní menu,
nástrojový pruh či &bdquo;pouze&ldquo; libovolné další ovládací prvky:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow")
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Přidání tlačítka do centrální části hlavního okna</h2>

<p>Jak se vlastně do hlavního okna přidávají další widgety? Už ve čtrnácté
kapitole jsme si řekli, že hlavní okno se v&nbsp;některých ohledech odlišuje od
obecného widgetu <strong>QWidget</strong>, a to především v&nbsp;tom ohledu, že
v&nbsp;hlavním oknu už jsou předem vyhrazené oblasti na speciální ovládací
prvky. Proto není vhodné přidávat na hlavní okno další komponenty stylem:</p>

<pre>
<i># návěští</i>
label = QtGui.QLabel("Hello world!", self)
<i># posun v rámci nadřazeného widgetu</i>
label.move(100, 100)
</pre>

<p>Widget (či widgety) budeme vkládat do centrální oblasti, která se
v&nbsp;případě potřeby automaticky zvětší a ostatní nepoužité oblasti se zmenší
na nulovou plochu:</p>

<pre>
<i># tlačítko pro ukončení aplikace</i>
quitButton = QtGui.QPushButton("Quit")
<i># vložení komponenty do okna</i>
self.setCentralWidget(quitButton)
</pre>

<img src="https://i.iinfo.cz/images/361/pyside4d-2.png" class="image-315412" alt="&#160;" height="127" width="202" />
<p><i>Obrázek 22: Hlavní okno aplikace s&nbsp;tlačítkem Quit.</i></p>

<p>Celý příklad, který po svém spuštění zobrazí hlavní okno s&nbsp;jediným
tlačítkem Quit, vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(quitButton)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Lepší přístup &ndash; odvození vlastního widgetu pro centrální část hlavního okna</h2>

<p>V&nbsp;předchozím příkladu se tlačítko Quit zvětšilo tak, že vyplnilo celou
plochu hlavního okna (resp.&nbsp;přesněji řečeno jeho centrální oblasti). Ovšem
ve chvíli, kdy budeme chtít do okna přidávat další ovládací prvky (a to asi
budeme, protože okno s&nbsp;jediným tlačítkem je poněkud nepraktické),
využijeme správce rozvržení neboli <i>layout manager</i>. Podívejme se nyní na
jeden z&nbsp;možných přístupů. Vytvoříme novou třídu představující
&bdquo;vnitřek&ldquo; hlavního okna. Tato třída bude odvozena od
<strong>QWidget</strong>, tedy stylem, s&nbsp;nímž jsme se již setkali. Můžeme
zde použít libovolného správce rozvržení, atd. atd.</p>

<pre>
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton("Quit", self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(QtCore.QCoreApplication.instance().quit)
</pre>

<p>Následně náš nový widget (obsahující libovolné množství dalších widgetů)
vložíme do hlavního okna, konkrétně do jeho centrální oblasti:</p>

<pre>
def <strong>prepareGUI(self):</strong>
    <i># velikost není potřeba specifikovat</i>
    <i># self.resize(320, 240)</i>
    self.setWindowTitle("QMainWindow")
&nbsp;
    <i># vložení komponenty do okna</i>
    self.setCentralWidget(MainWindowContent())
</pre>

<img src="https://i.iinfo.cz/images/361/pyside4d-3.png" class="image-315413" alt="&#160;" height="127" width="202" />
<p><i>Obrázek 23: Hlavní okno aplikace s&nbsp;tlačítkem Quit.</i></p>

<p>Celý příklad s&nbsp;dvojicí tříd vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton("Quit", self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(QtCore.QCoreApplication.instance().quit)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Složitější layout komponent, stavový řádek a další vylepšení</h2>

<p>Rozdělení funkcionality hlavního okna do dvou tříd může vést k&nbsp;větší
přehlednosti zdrojového kódu, ovšem někdy se setkáme s&nbsp;nutností posílání
zpráv mezi instancemi obou tříd. V&nbsp;následujícím příkladu je řešen problém
jednoduchého čítače, jehož hodnota je zvýšena po každém stisku tlačítka:</p>

<img src="https://i.iinfo.cz/images/361/pyside4d-4.png" class="image-315414" alt="&#160;" height="127" width="202" />
<p><i>Obrázek 24: Hlavní okno aplikace ihned po spuštění.</i></p>

<img src="https://i.iinfo.cz/images/361/pyside4d-5.png" class="image-315415" alt="&#160;" height="127" width="202" />
<p><i>Obrázek 25: Stav aplikace po několikerém stisku tlačítka.</i></p>

<p>Čítač je ovšem umístěn do stavového řádku hlavního okna, takže je nutné, aby
tlačítko (které je součástí třídy <strong>MainWindowContent</strong>)
komunikovalo se stavovým řádkem (ten je ovšem součástí třídy
<strong>MainWindow</strong>). Jedno z&nbsp;řešení &ndash; schválně zatím
neřeknu, jak moc je dobré &ndash; je ukázáno níže. Sami se zkuste zamyslet nad
dalšími způsoby řešení tohoto problému. Některé z&nbsp;nich si popíšeme
příště:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># tlačítko 1</i>
        self.counterButton = QtGui.QPushButton("Counter", self)
        self.counterButton.resize(self.counterButton.sizeHint())
&nbsp;
        <i># tlačítko 2</i>
        quitButton = QtGui.QPushButton("Quit", self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.counterButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného hlavního okna
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
        self._counter = 0
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow")
&nbsp;
        self.statusBar().showMessage("QMainWindow")
&nbsp;
        content = MainWindowContent()
        self.setCentralWidget(content)
&nbsp;
        <i># jedna z variant naprogramování reakce na stisk tlačítka</i>
        content.counterButton.clicked.connect(self.counterClicked)
&nbsp;
    def <strong>counterClicked(self):</strong>
        self._counter += 1
        self.statusBar().showMessage(str(self._counter))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech jedenácti dnes popsaných demonstračních příkladů byly
opět, podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>106_one_radio_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/106_one_radio_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/106_one_radio_button.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>35_one_radio_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/35_one_radio_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/35_one_radio_button.py</a></td></tr>
<tr><td>36_radio_buttons.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/36_radio_buttons.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/36_radio_buttons.py</a></td></tr>
<tr><td>37_radio_button_no_autoexclusive.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/37_radio_button_no_autoexclusive.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/37_radio_button_no_autoexclusive.py</a></td></tr>
<tr><td>38_custom_radio_button_groups.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/38_custom_radio_button_groups.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/38_custom_radio_button_groups.py</a></td></tr>
<tr><td>39_shortcuts.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/39_shortcuts.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/39_shortcuts.py</a></td></tr>
<tr><td>40_custom_shortcuts.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/40_custom_shortcuts.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/40_custom_shortcuts.py</a></td></tr>
<tr><td>41_main_window.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/41_main_window.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/41_main_window.py</a></td></tr>
<tr><td>42_main_window_and_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/42_main_window_and_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/42_main_window_and_button.py</a></td></tr>
<tr><td>43_main_window_layout.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/43_main_window_layout.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/43_main_window_layout.py</a></td></tr>
<tr><td>44_status_bar.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/44_status_bar.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/44_status_bar.py</a></td></tr>
</table>

<p>Poznámka: první příklad je naprogramován s&nbsp;využitím Tkinteru a ukazuje
chování jediného přepínacího tlačítka v&nbsp;této knihovně.</p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

