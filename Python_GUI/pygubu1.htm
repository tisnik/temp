<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Interaktivní tvorba grafického uživatelského rozhraní s využitím nástroje Pygubu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Interaktivní tvorba grafického uživatelského rozhraní s využitím nástroje Pygubu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se seznámíme s nástrojem s poněkud prapodivným jménem Pygubu. Jedná se o poměrně jednoduchý nástroj určený pro interaktivní tvorbu grafického uživatelského rozhraní pro aplikace vyvíjené v Pythonu s využitím knihovny Tkinter.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Interaktivní tvorba grafického uživatelského rozhraní s&nbsp;využitím nástroje Pygubu</a></p>
<p><a href="#k02">2. Základní informace o knihovně Tkinter</a></p>
<p><a href="#k03">3. Programová tvorba aplikací s&nbsp;grafickým uživatelským rozhraním v&nbsp;Tkinteru</a></p>
<p><a href="#k04">4. Příklad jednoduché aplikace s&nbsp;imperativně popsaným GUI</a></p>
<p><a href="#k05">5. Nástroje typu RAD &ndash; Rapid Application Development</a></p>
<p><a href="#k06">6. Instalace nástroje Pygubu</a></p>
<p><a href="#k07">7. Návrh UI prvního demonstračního příkladu s&nbsp;oknem a dvojicí ovládacích prvků</a></p>
<p><a href="#k08">8. Zdrojový kód prvního demonstračního příkladu</a></p>
<p><a href="#k09">9. Přidání hlavního menu do okna aplikace</a></p>
<p><a href="#k10">10. První varianta zdrojového kódu druhého příkladu</a></p>
<p><a href="#k11">11. Odstranění základních chyb: inicializace menu a specifikace adresáře s&nbsp;ikonami</a></p>
<p><a href="#k12">12. Specifikace callback funkcí volaných při práci s&nbsp;uživatelským rozhraním</a></p>
<p><a href="#k13">13. Zdrojový kód třetího demonstračního příkladu</a></p>
<p><a href="#k14">14. Možná alternativní řešení</a></p>
<p><a href="#k15">15. Gambas &ndash; Gambas Almost Means BASIC</a></p>
<p><a href="#k16">16. Lazarus</a></p>
<p><a href="#k17">17. PySide a Qt Creator</a></p>
<p><a href="#k18">18. Závěrečné zhodnocení</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Interaktivní tvorba grafického uživatelského rozhraní s&nbsp;využitím nástroje Pygubu</h2>

<p>Na stránkách serveru <a href="https://www.root.cz">Root.cz</a> jsme se již
mnohokrát setkali <a href="https://www.root.cz/n/python/">s&nbsp;programovacím
jazykem Python</a>. Zabývali jsme se různými oblastmi nasazení tohoto
v&nbsp;současnosti <a href="https://pypl.github.io/PYPL.html">velmi populárního
jazyka</a>, a to jak na <i>backendu</i>, tak i na <i>frontendu</i> (i když je
na tomto místě nutné poznamenat, že použití Pythonu na frontendu je dosti
alternativním řešením, které trpí několika nedostatky &ndash; viz též článek <a
href="https://www.root.cz/clanky/brython-aneb-pouziti-jazyka-python-ve-skriptech-primo-v-prohlizeci/">Brython
aneb použití jazyka Python ve skriptech přímo v prohlížeči</a>). Python je
ovšem velmi dobře použitelný i pro tvorbu desktopových aplikací
s&nbsp;grafickým uživatelským rozhraním, což je téma, kterému jsme se
podrobněji věnovali <a
href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">v&nbsp;samostatném
seriálu</a>; ostatně dnešní článek bude do tohoto seriálu taktéž zařazen. Dnes
se seznámíme s&nbsp;poměrně jednoduchým nástrojem, který se jmenuje
<i>Pygubu</i>. Jedná se o nástroj, který lze použít pro návrh grafického
uživatelského rozhraní (typicky různých dialogů) desktopových aplikací
vyvíjených v&nbsp;Pythonu s&nbsp;tím, že pro vlastní GUI bude použita knihovna
<i>Tkinter</i>.</p>

<img src="https://i.iinfo.cz/images/257/pygubu-1.png" class="image-445652" alt="&#160;" width="642" height="537" />
<p><i>Obrázek 1: Obrazovka nástroje Pygubu designer určeného pro návrh
grafického uživatelského rozhraní aplikací vytvářených v&nbsp;Pythonu.</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;posledních několika letech se
můžeme setkat s&nbsp;tím, že se desktopové aplikace začínají vytvářet
s&nbsp;využitím webových technologií. Typickým příkladem jsou aplikace
postavené na technologii <a href="https://www.electronjs.org/">Electron</a>.
Těmito typy aplikací &ndash; které pochopitelně opět trpí několika neduhy
&ndash; se ovšem v&nbsp;dnešním článku zabývat nebudeme.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní informace o knihovně Tkinter</h2>

<p>Nástroj Pygubu designer a Pythonovská knihovna Pygubu jsou určeny pro návrh
grafického uživatelského rozhraní založeného na knihovně <i>Tkinter</i>.
S&nbsp;touto knihovnou jsme se již několikrát setkali, takže si v&nbsp;této
kapitole pouze ve stručnosti připomeneme některé její základní vlastnosti.</p>

<p>Pythonovská knihovna nazvaná <i>Tkinter</i> tvoří rozhraní ke knihovně
<i>Tk</i>, přičemž <i>Tk</i> je takzvaný <i>toolkit</i> (z&nbsp;pohledu
programovacího jazyka se přitom jedná o knihovnu) určený pro jednoduchý a
rychlý vývoj programů obsahujících grafické uživatelské rozhraní. Autorem
tohoto toolkitu je, podobně jako v&nbsp;případě programovacího jazyka
<i>Tcl</i>, <a href="https://en.wikipedia.org/wiki/John_Ousterhout">John
Ousterhout</a>, mezi jehož zájmy v&nbsp;minulosti patřila automatizace
(skriptovatelnost) aplikací a právě tvorba grafických uživatelských rozhraní.
V&nbsp;minulosti byl tento toolkit velmi oblíbený, proto se dodával (a stále
dodává) spolu s&nbsp;instalací programovacího jazyka <i>Tcl</i> a &ndash; což
nás v&nbsp;kontextu dnešního článku zajímá mnohem více &ndash; i s&nbsp;jazykem
Python společně s&nbsp;rozhraním <i>Tkinter</i>. I z&nbsp;tohoto důvodu se také
v&nbsp;různých materiálech a dokumentech často setkáme se společným názvem
<i>Tcl/Tk</i>. Samotný název <i>Tk</i> jednoduše znamená zkratku výše použitého
slova <i>ToolKit</i>.</p>

<p>Důležitou vlastností knihovny <i>Tk</i>, která zůstala zachována i
v&nbsp;<i>Tkinteru</i>, je úsporný, flexibilní a přitom čitelný zápis programu
se specifikací ovládacích prvků, jejich umístění v&nbsp;oknech, vlastností i
<i>callback funkcí</i> volaných v&nbsp;důsledku uživatelské činnosti. Udává se,
že poměr psaného kódu v&nbsp;<i>Tcl/Tk</i> je vůči dnes již obstarožnímu a
prakticky zapomenutému <i>Motifu</i> na hodnotách 1:20 a vůči základnímu
<i>Xlibu</i> dokonce 1:100! (vše se samozřejmě týká tvorby grafického
uživatelského rozhraní). Na tomto místě je však nutné podotknout, že Motif je
z&nbsp;dnešního pohledu již zastaralá knihovna a navíc dnes mnoho moderních
knihoven pro GUI podporuje deklaraci grafického uživatelského rozhraní
v&nbsp;konfiguračních souborech, nikoli tedy programem (což má své výhody, ale
samozřejmě i zápory). Nicméně i dnes představuje kombinace Tcl+Tk či ještě lépe
Python+Tkinter poměrně dobrou volbu pro mnoho typů aplikací s&nbsp;GUI.</p>

<p><div class="rs-tip-major">Poznámka: jak uvidíme dále, umožňuje Pygubu
oddělení definice grafického uživatelského rozhraní od programového kódu.
Inspirace je nasnadě &ndash; jedná se o projekt <a
href="https://glade.gnome.org/">Glade</a>.</div></p>

<p>V&nbsp;průběhu postupného vývoje novějších (avšak ne nutně dokonalejších)
programovacích nástrojů byla knihovna <i>Tk</i> kromě Tcl použita i
v&nbsp;mnoha dalších programovacích jazycích. Pravděpodobně nejznámější je,
samozřejmě kromě samotné dvojice <i>Tcl/Tk</i>, modul určený pro programovací
jazyk <i>Perl</i> (Perl/Tk) a <i>Python</i> (Tkinter &ndash; Tk Interface, což
je téma navazující kapitoly). Knihovnu <i>Tk</i> je však samozřejmě možné
použít i v dalších programovacích jazycích, i když v&nbsp;mnoha případech ne
tak snadně a efektivně, jako ze samotného <i>Tcl</i>. V&nbsp;praxi se často
s&nbsp;výhodou používá či používalo spojení programů napsaných
v&nbsp;programovacím jazyku <i>C</i> či s&nbsp;<i>C++</i> s&nbsp;grafickým
uživatelským rozhraním, které je vytvořeno pomocí <i>Tcl</i> a <i>Tk</i>.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;následujících kapitolách
předpokládáme, že je knihovna Tkinter nainstalována (což je v&nbsp;některých
systémech splněno instalací samotného prostředí Pythonu). Způsob instalace
knihovny Tkinter je podrobněji popsán <a
href="https://www.tutorialspoint.com/how-to-install-tkinter-in-python">na této
stránce</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Programová tvorba aplikací s&nbsp;grafickým uživatelským rozhraním v&nbsp;Tkinteru</h2>

<p>Pro ilustraci si ukažme, jak jednoduchá může být (značně primitivní)
aplikace s&nbsp;jedním oknem a textovým návěštím umístěným do tohoto okna. Celý
zdrojový kód aplikace vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
&nbsp;
root = Tk()
&nbsp;
label = Label(root, text="Hello world!")
&nbsp;
label.pack()
&nbsp;
root.mainloop()
</pre>

<p>Ve skutečnosti se však v&nbsp;současnosti používá takzvané <i>TTk</i> neboli
<i>Themed Tk)</i> a program bude muset být nepatrně upraven. Konkrétně se přidá
jeden import navíc a namísto <strong>Label()</strong> se zavolá konstruktor
<strong>ttk.Label()</strong>), takže nová varianta programu bude vypadat
takto:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
root = Tk()
&nbsp;
label = ttk.Label(root, text="Hello world!")
&nbsp;
label.pack()
&nbsp;
root.mainloop()
</pre>

<p>Na obou příkladech je patrné, že grafické uživatelské rozhraní se tvoří
programově a není nijak odděleno od zbytku programového kódu. To má své výhody
(kontextová nápověda a automatické doplňování), ale i mnoho nevýhod, které jsou
odstraněny právě v&nbsp;projektu Pygubu.</p>

<p><div class="rs-tip-major">Poznámka: na Rootu již <a
href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">vyšel
zajímavý článek o Tkinteru</a>, v&nbsp;jehož rámci byla vytvořena jednoduchá
hra typu Arkanoid/Breakout.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příklad jednoduché aplikace s&nbsp;imperativně popsaným GUI</h2>

<p>Aby bylo ještě více patrné, jak úzce propojený je programový kód a
vlastnosti grafického uživatelského rozhraní, pokud se používá knihovna
<i>Tkinter</i>, ukážeme si ještě jeden demonstrační příklad. Tentokrát se do
hlavního okna aplikace (neboli formuláře) vloží čtveřice tlačítek a umístí se
do mřížky (<i>grid</i>). Navíc se explicitně určí, ke kterým okrajům buněk
budou tlačítka &bdquo;přilepena&ldquo;. Po stisku všech tlačítek dojde
k&nbsp;ukončení aplikace:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="1st btn", command=lambda: sys.exit(0))
button2 = ttk.Button(root, text="Second button", command=lambda: sys.exit(0))
button3 = ttk.Button(root, text="Third button", command=lambda: sys.exit(0))
button4 = ttk.Button(root, text="This is fourth button, the last one",
                     command=lambda: sys.exit(0))
&nbsp;
button1.grid(column=1, row=1, sticky="we")
button2.grid(column=2, row=2, sticky="we")
button3.grid(column=1, row=3, sticky="we")
button4.grid(column=3, row=1, rowspan=4, sticky="nswe")
&nbsp;
root.mainloop()
</pre>

<a href="https://www.root.cz/obrazek/297642/"><img src="https://i.iinfo.cz/images/238/tkinter1-18-prev.png" class="image-297642" alt="&#160;" width="370" height="96" /></a>
<p><i>Obrázek 2: Čtvrté tlačítko používá &bdquo;přilepení&ldquo; ke všem
stranám spojené buňky.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nástroje typu RAD &ndash; Rapid Application Development</h2>

<p>Programová a tedy de facto i ruční tvorba grafického uživatelského rozhraní
trpí hned několika dosti zásadními neduhy. Zejména se jedná o mnohdy zbytečně
nízkoúrovňovou práci, ovšem horší problém spočívá v&nbsp;tom, že požadavek na
změnu GUI (například i pouhé posunutí nějakého ovládacího prvku) vyžaduje zásah
do programového kódu, který navíc není či nemusí vždy být triviální a
intuitivní. Tohoto úskalí si byly některé softwarové firmy vědomy již minimálně
od začátku devadesátých let minulého století a právě z&nbsp;tohoto důvodu
vznikly nástroje typu <i>RAD</i> neboli <i>Rapid Application Development</i>.
Tyto nástroje umožňují nejenom velmi rychlou tvorbu grafického uživatelského
rozhraní s&nbsp;využitím návrhářů GUI, ale &ndash; což je možná ještě
důležitější &ndash; obousměrnou vazbu mezi grafickým uživatelským rozhraním a
programovým kódem. Dnes se zkratkou RAD označují (alespoň v&nbsp;některých
případech) i nástroje typu Glade, které ovšem ve skutečnosti
&bdquo;pouze&ldquo; slouží k&nbsp;návrhu GUI. Striktně řečeno do této kategorie
Pygubu nespadá (není provedena obousměrná vazba s&nbsp;kódem), o čemž se
ostatně přesvědčíme v&nbsp;následujícím textu.</p>

<a href="http://i.iinfo.cz/images/75/llang02images-1.jpg"><img src="http://i.iinfo.cz/images/75/llang02images-1-prev.jpg" width="370" height="248" alt=" " /></a>
<p><i>Obrázek 3: Historická první verze vývojového prostředí Delphi 1.0
běžícího ve Windows 3.11.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instalace nástroje Pygubu</h2>

<p>Ve druhé části článku si ukážeme použití nástroje Pygubu prakticky. Samotná
instalace Pygubu je přitom velmi jednoduchá, neboť Pygubu je dostupný jako
běžný balíček pro Python nabízený na <a
href="https://pypi.org/project/pygubu/">PyPi</a>, a to včetně <a
href="https://pypi.org/project/pygubu-designer/">designeru</a>. Pro instalaci
tedy použijeme buď nástroj <strong>pip</strong> nebo <strong>pip3</strong>,
v&nbsp;závislosti na tom, jakým způsobem je Python nakonfigurován:</p>

<pre>
$ <strong>pip3 install --user pygubu</strong>
&nbsp;
Collecting pygubu
  Downloading https://files.pythonhosted.org/packages/ac/e5/ce8d5241a3119045e77ae0e47a182415069e9a7419125d604d2cc4ffcc8f/pygubu-0.9.8.6-py3-none-any.whl (190kB)
    100% |████████████████████████████████| 194kB 1.2MB/s
Requirement already satisfied: appdirs&gt;=1.3 in ./.local/lib/python3.6/site-packages (from pygubu)
Installing collected packages: pygubu
Successfully installed pygubu-0.9.8.6
</pre>

<p><div class="rs-tip-major">Poznámka: pochopitelně je možné instalaci nástroje
Pygubu provést v&nbsp;rámci virtuálního prostředí Pythonu, resp.&nbsp;přesněji
řečeno s&nbsp;využitím <i>virtualenv</i> či <i>venv</i>. Postačuje vytvořit
adresářovou strukturu s&nbsp;virtuálním prostředím, inicializovat ho a následně
spustit instalaci v&nbsp;rámci právě vytvořeného a inicializovaného virtuálního
prostředí:</div></p>

<pre>
$ <strong>python3 -m venv pygubu</strong>
</pre>

<p>Dále virtuální prostředí aktivujeme:</p>

<pre>
$ <strong>source pygubu/bin/activate</strong>
</pre>

<p>To by se mělo projevit úpravou výzvy (<i>prompt</i>):</p>

<pre>
(pygubu) bash-4.4$ 
</pre>

<p>Nakonec provedeme instalaci:</p>

<pre>
(pygubu) bash-4.4$ <strong>pip3 install --user pygubu</strong>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Návrh UI prvního demonstračního příkladu s&nbsp;oknem a dvojicí ovládacích prvků</h2>

<p>Nyní již máme k&nbsp;dispozici všechny balíčky potřebné pro spuštění
návrháře grafického uživatelského rozhraní. Samotný návrhář se jmenuje
<strong>pygubu-designer</strong> a spustit ho můžeme stejným způsobem, jako
jakoukoli jinou aplikaci:</p>

<pre>
$ <strong>pygubu-designer</strong>
</pre>

<p>Po spuštění by se mělo objevit hlavní okno návrháře grafického uživatelského
rozhraní, které vypadá následovně:</p>

<img src="https://i.iinfo.cz/images/257/pygubu-2.png" class="image-445653" alt="&#160;" width="642" height="537" />
<p><i>Obrázek 4: Hlavní okno návrháře grafického uživatelského rozhraní
s&nbsp;informacemi o verzi (od verze 0.10 došlo k&nbsp;oddělení Pygubu od
Pygubu designeru).</i></p>

<p>V&nbsp;případě, že se <strong>pygubu-designer</strong> nespustí, je to
většinou způsobeno tím, že není korektně nainstalována knihovna <i>Tkinter</i>
&ndash; tato informace se zobrazí v&nbsp;terminálu.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti může být styl zobrazení
odlišný, protože knihovna Tkinter podporuje (přes Tk) několik stylů zobrazení
oken i jednotlivých ovládacích prvků (widgetů). Přepínání mezi jednotlivými
styly se provádí přes položku hlavního menu <strong>Preview &rarr; ttk
theme</strong>.</div></p>

<p>Ukažme si nyní způsob vytvoření grafického uživatelského rozhraní velmi
jednoduché aplikace obsahující pouze hlavní okno, do něhož je vloženo několik
ovládacích prvků (<i>widgetů</i>). Okno, resp.&nbsp;přesněji řečeno prvek GUI,
který okno představuje, se v&nbsp;knihovně <i>Tkinter</i> nazývá
<strong>ttk.Frame</strong> a nalezneme ho v&nbsp;sekci <i>Containers</i>
(protože se skutečně jedná o kontejner, do něhož se vkládají další prvky).</p>

<a href="https://www.root.cz/obrazek/445654/"><img src="https://i.iinfo.cz/images/257/pygubu-3-prev.png" class="image-445654" alt="&#160;" width="348" height="270" /></a>
<p><i>Obrázek 5: Rámec (okno aplikace) s&nbsp;dvojicí dalších prvků.</i></p>

<p>Do hlavního okna vložíme další dva ovládací prvky, například tlačítko a
zatrhávací box. U prvků je nutné v&nbsp;panelu <i>Layout</i> zvolit, jakým
způsobem mají být do hlavního okna (resp.&nbsp;jeho mřížky) vloženy a zda se
mají &bdquo;přilepit&ldquo; k&nbsp;jednotlivým okrajům buněk:</p>

<a href="https://www.root.cz/obrazek/445655/"><img src="https://i.iinfo.cz/images/257/pygubu-4-prev.png" class="image-445655" alt="&#160;" width="348" height="270" /></a>
<p><i>Obrázek 6: Specifikace umístění ovládacích prvků do mřížky hlavního
okna.</i></p>

<p><div class="rs-tip-major">Poznámka: pokud znáte knihovnu Tkinter, je vám již
zřejmé, že se ve výchozím nastavení používá <i>Grid layout</i>.</div></p>

<p>Ve chvíli, kdy je návrh grafického uživatelského rozhraní aplikace ukončen,
je nutné návrh uložit do souboru s&nbsp;koncovkou <strong>.ui</strong>. Ve
skutečnosti se jedná o soubory založené na jazyku XML, o čemž se ostatně můžeme
velmi snadno přesvědčit pohledem do těchto souborů:</p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface&gt;
  &lt;object class="ttk.Frame" id="Frame_1"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout&gt;
      &lt;property name="column"&gt;3&lt;/property&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="row"&gt;3&lt;/property&gt;
    &lt;/layout&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="Button_2"&gt;
        &lt;property name="text" translatable="yes"&gt;Button_2&lt;/property&gt;
        &lt;layout&gt;
          &lt;property name="column"&gt;0&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;0&lt;/property&gt;
          &lt;property name="sticky"&gt;ne&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Checkbutton" id="Checkbutton_1"&gt;
        &lt;property name="text" translatable="yes"&gt;Checkbutton_1&lt;/property&gt;
        &lt;layout&gt;
          &lt;property name="column"&gt;1&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;1&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: využití jazyka XML je v&nbsp;tomto
ohledu poměrně dobrým nápadem, protože soubory s&nbsp;popisem grafického
uživatelského rozhraní jsou snadno editovatelné i mimo vlastní
<strong>pygubu-designer</strong> (což v&nbsp;praxi oceníme zejména při
přidávání nových položek do menu). Další předností je, že změny provedené
v&nbsp;grafickém uživatelském rozhraní jsou snadno verzovatelné například
v&nbsp;Gitu či v&nbsp;jiném systému pro správu verzí. Podobným způsobem pracuje
s&nbsp;návrhem GUI například i dále zmíněný projekt Lazarus a ostatně i jeho
idový předchůdce &ndash; systém Delphi (ve kterém bylo možné zvolit buď binární
nebo textový formát).</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zdrojový kód prvního demonstračního příkladu</h2>

<p>Podívejme se nyní, jak by mohla vypadat první verze programu, který načte
návrh grafického uživatelského rozhraní a použije ho pro zobrazení hlavního
okna aplikace i jednotlivých ovládacích prvků. V&nbsp;programu je uvedeno (a
okomentováno) několik kroků nutných pro inicializaci GUI i pro spuštění hlavní
smyčky, která interně reaguje na jednotlivé události vznikající činností
uživatele (tato smyčka se nazývá <i>event loop</i> a v&nbsp;určité podobě ji
nalezneme u všech aplikací s&nbsp;grafickým uživatelským rozhraním, a ostatně i
her založených na SDL2 či podobné knihovně):</p>

<pre>
<i>"""Pygubu and Tkinter: user interface initialization."""</i>
&nbsp;
<i># example1.py</i>
&nbsp;
import tkinter as tk
import pygubu
&nbsp;
&nbsp;
class <strong>Example1App</strong>:
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>__init__(self)</strong>:
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example1.ui')
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('Frame_1')
&nbsp;
    def <strong>run(self)</strong>:
        <i>"""Start the UI."""</i>
        self.mainwindow.mainloop()
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># run the application</i>
    app = Example1App()
    app.run()
</pre>

<p>Ze zdrojového kódu je patrné, že se v&nbsp;něm provádí několik činností:</p>

<ul>
<li>Zkonstruuje se instance třídy představující celou aplikaci.</li>
<li>Zkonstruuje se instance třídy <strong>Builder</strong>.</li>
<li>Načte se soubor s&nbsp;návrhem GUI &ndash; zde se inicializují všechny potřebné objekty.</li>
<li>Získá se instance třídy představující hlavní okno aplikace.</li>
<li>Spustí se smyčka pro zpracování událostí (představovaná metodou z&nbsp;knihovny Tkinter).</li>
</ul>

<img src="https://i.iinfo.cz/images/257/pygubu-5.png" class="image-445656" alt="&#160;" width="195" height="72" />
<p><i>Obrázek 5: GUI demonstračního příkladu po jeho spuštění.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přidání hlavního menu do okna aplikace</h2>

<p>V&nbsp;dnešním druhém demonstračním příkladu založeném opět na nástroji
<strong>pygubu</strong> si ukážeme, jakým způsobem se do hlavního okna aplikace
vloží menu, přesněji řečeno pruh menu s&nbsp;několika položkami, přičemž se pro
výběru nějaké položky zobrazí plnohodnotné rozbalovací menu (<i>pull-down
menu</i>). V&nbsp;rozbalovacím menu se budou nacházet jednotlivé příkazy, které
navíc budou obsahovat ikony reprezentované samostatnými soubory typu PNG.
Průběh přidání menu je zobrazen na následujících screenshotech:</p>

<a href="https://www.root.cz/obrazek/445657/"><img src="https://i.iinfo.cz/images/257/pygubu-6-prev.png" class="image-445657" alt="&#160;" width="301" height="270" /></a>
<p><i>Obrázek 6: Menu se připravuje nezávisle na hlavním oknu aplikace
(propojení je provedeno až v&nbsp;programu, nikoli v&nbsp;UI při návrhu). U
jednotlivých položek lze zvolit index znaku, který bude podtržen a současně
bude sloužit pro rychlý výběr položky menu. Navíc u jednotlivých položek můžeme
specifikovat soubor s&nbsp;ikonou i umístění této ikony s&nbsp;textem
(vlastnost <strong>compound</strong>).</i></p>

<a href="https://www.root.cz/obrazek/445658/"><img src="https://i.iinfo.cz/images/257/pygubu-7-prev.png" class="image-445658" alt="&#160;" width="301" height="270" /></a>
<p><i>Obrázek 7: Přidat je možné i vizuální separátor mezi jednotlivými
položkami menu.</i></p>

<img src="https://i.iinfo.cz/images/257/pygubu-8.png" class="image-445659" alt="&#160;" width="642" height="537" />
<p><i>Obrázek 8: Položky lze v&nbsp;rámci menu přeskupit klávesovými zkratkami
<strong>Ctrl+I</strong> a <strong>Ctrl+K</strong> (což pravděpodobně odkazuje
na alternativní klávesové zkratky pro posun kurzoru &ndash;
<strong>IJKL</strong>).</i></p>

<p>Výsledný XML soubor s&nbsp;popisem návrhu UI aplikace by měl vypadat
následovně:</p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface&gt;
  &lt;object class="tk.Menu" id="MainMenu"&gt;
    &lt;child&gt;
      &lt;object class="tk.Menuitem.Submenu" id="FileMenu"&gt;
        &lt;property name="font"&gt;TkDefaultFont&lt;/property&gt;
        &lt;property name="label" translatable="yes"&gt;File&lt;/property&gt;
        &lt;property name="relief"&gt;raised&lt;/property&gt;
        &lt;property name="state"&gt;normal&lt;/property&gt;
        &lt;property name="tearoff"&gt;false&lt;/property&gt;
        &lt;property name="underline"&gt;0&lt;/property&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_New"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;document-new.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;New&lt;/property&gt;
            &lt;property name="state"&gt;normal&lt;/property&gt;
            &lt;property name="underline"&gt;0&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Open"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;document-open.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Open&lt;/property&gt;
            &lt;property name="underline"&gt;0&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Separator" id="Separator_1" /&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Quit"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;application-exit.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Quit&lt;/property&gt;
            &lt;property name="underline"&gt;0&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="tk.Menuitem.Submenu" id="EditMenu"&gt;
        &lt;property name="label" translatable="yes"&gt;Edit&lt;/property&gt;
        &lt;property name="underline"&gt;0&lt;/property&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Cut"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-cut.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Cut&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Copy"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-copy.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Copy&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Paste"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-paste.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Paste&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Separator" id="Separator_2" /&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Delete"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-delete.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Delete&lt;/property&gt;
            &lt;property name="state"&gt;disabled&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
  &lt;object class="ttk.Frame" id="MainWindow"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout&gt;
      &lt;property name="column"&gt;0&lt;/property&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="row"&gt;0&lt;/property&gt;
    &lt;/layout&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: kdykoli, i během návrhu UI, je možné si
nechat navrhované okno s&nbsp;ovládacími prvky zobrazit takovým způsobem, jak
bude vypadat výsledná aplikace. K&nbsp;tomuto účelu slouží klávesová zkratka
<strong>F5</strong>, ovšem příslušný příkaz je dostupný i z&nbsp;hlavního menu
návrháře.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. První varianta zdrojového kódu druhého příkladu</h2>

<p>První varianta zdrojového kódu dnešního druhého demonstračního příkladu může
vypadat následovně. Používáme zde poněkud jinou šablonu, než v&nbsp;příkladu
prvním, ovšem této šablony se budeme držet i v&nbsp;dalších příkladech:</p>

<pre>
<i>"""Pygubu and Tkinter: main menu in main window (not working properly)."""</i>
&nbsp;
<i># example2A.py</i>
&nbsp;
import tkinter as tk
import pygubu
&nbsp;
&nbsp;
class <strong>Example2App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui(self)</strong>:
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example2.ui')
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Set main menu</i>
        self.mainmenu = menu = builder.get_object('MainMenu', self.master)
        self.set_menu(menu)
&nbsp;
        <i># step $5: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># run the application</i>
    app = Example2App()
    app.run()
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se snažíme získat
instanci objektu představujícího hlavní menu a explicitně nastavujeme, že
hlavní okno má obsahovat i toto menu.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odstranění základních chyb: inicializace menu a specifikace adresáře s&nbsp;ikonami</h2>

<p>Předchozí verze demonstračního příkladu ve skutečnosti obsahuje jednu
zásadní chybu, která se projeví při snaze o jeho spuštění:</p>

<pre>
$ <strong>python3 example2A.py</strong>
&nbsp;
Traceback (most recent call last):
  File "example2A.py", line 33, in <module>
    app = Example2App()
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pygubu/__init__.py", line 24, in __init__
    self.toplevel = master.winfo_toplevel()
AttributeError: 'NoneType' object has no attribute 'winfo_toplevel'
</pre>

<p>Tuto chybu lze napravit přidáním příkazu zavolaného ještě před inicializací
třídy představující aplikaci:</p>

<pre>
<strong>root = tk.Tk()</strong>
</pre>

<p>Zdrojový kód příkladu tedy bude nepatrně odlišný:</p>

<pre>
<i>"""Pygubu and Tkinter: main menu in main window (resources not setup)."""</i>
&nbsp;
<i># example2B.py</i>
&nbsp;
import tkinter as tk
import pygubu
&nbsp;
&nbsp;
class Example2App(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui(self)</strong>:
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example2.ui')
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Set main menu</i>
        self.mainmenu = menu = builder.get_object('MainMenu', self.master)
        self.set_menu(menu)
&nbsp;
        <i># step $5: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    <strong>root = tk.Tk()</strong>
&nbsp;
    <i># run the application</i>
    app = Example2App(root)
    app.run()
</pre>

<p>I při spuštění druhé varianty však nalezneme jednu chybu:</p>

<pre>
$ <strong>python3 example2B.py </strong>
&nbsp;
WARNING:pygubu.builder:Image 'document-new.png' not found in resource paths.
WARNING:pygubu.builder:Image 'document-open.png' not found in resource paths.
WARNING:pygubu.builder:Image 'application-exit.png' not found in resource paths.
WARNING:pygubu.builder:Image 'edit-cut.png' not found in resource paths.
WARNING:pygubu.builder:Image 'edit-copy.png' not found in resource paths.
WARNING:pygubu.builder:Image 'edit-paste.png' not found in resource paths.
WARNING:pygubu.builder:Image 'edit-delete.png' not found in resource paths.
</pre>

<p>Tato chyba spočívá v&nbsp;tom, že program nenalezne soubory s&nbsp;ikonami.
Ještě před vytvořením menu a hlavního okna je nutné specifikovat cestu
k&nbsp;těmto souborům:</p>

<pre>
<i># step #2B: Specify path to images and other resources</i>
<strong>builder.add_resource_path(".")</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: ještě lepší je s&nbsp;využitím modulu
<strong>os</strong> získat a specifikovat absolutní cestu.</div></p>

<p>Upravený, nyní již plně funkční příklad, vypadá takto:</p>

<pre>
<i>"""Pygubu and Tkinter: main menu in main window (working example)."""</i>
&nbsp;
<i># example2C.py</i>
&nbsp;
import tkinter as tk
import pygubu
&nbsp;
&nbsp;
class <strong>Example2App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui(self)</strong>:
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example2.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        <strong>builder.add_resource_path(".")</strong>
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Set main menu</i>
        self.mainmenu = menu = builder.get_object('MainMenu', self.master)
        self.set_menu(menu)
&nbsp;
        <i># step $5: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    <strong>root = tk.Tk()</strong>
&nbsp;
    <i># run the application</i>
    app = Example2App(root)
    app.run()
</pre>

<img src="https://i.iinfo.cz/images/257/pygubu-9.png" class="image-445660" alt="&#160;" width="202" height="257" />
<p><i>Obrázek 9: Aplikace s&nbsp;menu, položky menu mají přiřazeny
ikony.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Specifikace callback funkcí volaných při práci s&nbsp;uživatelským rozhraním</h2>

<p>Dalším neméně důležitým krokem je specifikace <i>callback</i> funkcí, které
jsou volány ve chvíli, kdy uživatel v&nbsp;grafickém uživatelském rozhraní
provede nějakou operaci. V&nbsp;tomto článku si ukážeme nejpřímější řešení,
které spočívá v&nbsp;tom, že se u každého ovládacího prvku (tedy položky menu
popř.&nbsp;u tlačítka) zvolí jméno funkce vyvolané po výběru nebo stisku daného
ovládacího elementu:</p>

<a href="https://www.root.cz/obrazek/445661/"><img src="https://i.iinfo.cz/images/257/pygubu-10-prev.png" class="image-445661" alt="&#160;" width="282" height="270" /></a>
<p><i>Obrázek 10: Vyplnění políčka <strong>Specific/Command</strong> u nového
tlačítka přidaného do návrhu GUI vyvíjené aplikace.</i></p>

<p>Z&nbsp;výpisu obsahu souboru s&nbsp;popisem návrhu GUI je patrné, že jména
funkcí byla přidána jak pro položku menu <strong>File&rarr;Quit</strong>, tak i
pro nové tlačítko vložené do formuláře:</p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface&gt;
  &lt;object class="tk.Menu" id="MainMenu"&gt;
    &lt;child&gt;
      &lt;object class="tk.Menuitem.Submenu" id="FileMenu"&gt;
        &lt;property name="font"&gt;TkDefaultFont&lt;/property&gt;
        &lt;property name="label" translatable="yes"&gt;File&lt;/property&gt;
        &lt;property name="relief"&gt;raised&lt;/property&gt;
        &lt;property name="state"&gt;normal&lt;/property&gt;
        &lt;property name="tearoff"&gt;false&lt;/property&gt;
        &lt;property name="underline"&gt;0&lt;/property&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_New"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;document-new.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;New&lt;/property&gt;
            &lt;property name="state"&gt;normal&lt;/property&gt;
            &lt;property name="underline"&gt;0&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Open"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;document-open.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Open&lt;/property&gt;
            &lt;property name="underline"&gt;0&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Separator" id="Separator_1" /&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Quit"&gt;
            <strong>&lt;property name="command"&gt;on_command_quit_selected&lt;/property&gt;</strong>
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;application-exit.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Quit&lt;/property&gt;
            &lt;property name="underline"&gt;0&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="tk.Menuitem.Submenu" id="EditMenu"&gt;
        &lt;property name="label" translatable="yes"&gt;Edit&lt;/property&gt;
        &lt;property name="underline"&gt;0&lt;/property&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Cut"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-cut.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Cut&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Copy"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-copy.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Copy&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Paste"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-paste.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Paste&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Separator" id="Separator_2" /&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Delete"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-delete.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Delete&lt;/property&gt;
            &lt;property name="state"&gt;disabled&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
  &lt;object class="ttk.Frame" id="MainWindow"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout&gt;
      &lt;property name="column"&gt;0&lt;/property&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="row"&gt;0&lt;/property&gt;
    &lt;/layout&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="Button_Hello"&gt;
        <strong>&lt;property name="command"&gt;on_button_clicked&lt;/property&gt;</strong>
        &lt;property name="compound"&gt;top&lt;/property&gt;
        &lt;property name="state"&gt;normal&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Quit&lt;/property&gt;
        &lt;property name="underline"&gt;0&lt;/property&gt;
        &lt;layout&gt;
          &lt;property name="column"&gt;0&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;0&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zdrojový kód třetího demonstračního příkladu</h2>

<p>Ve zdrojovém kódu příkladu je nutné provést dvě úpravy. První úprava spočívá
v&nbsp;nakonfigurování callback funkcí:</p>

<pre>
<i># step $5: Configure callbacks</i>
<strong>builder.connect_callbacks(self)</strong>
</pre>

<p>Nesmíme samozřejmě zapomenout na vlastní callback funkce (ve skutečnosti se
jedná o metody, ovšem princip je totožný). Jména funkcí odpovídají jménům
specifikovaným v&nbsp;Pygubu-designeru:</p>

<pre>
def <strong>on_button_clicked(self)</strong>:
    <i>"""Define handler for Quit button."""</i>
    tk.messagebox.showinfo('Message', 'You clicked on Quit button')
    root.destroy()
&nbsp;
def <strong>on_command_quit_selected(self)</strong>:
    <i>"""Define handler for Quit command."""</i>
    tk.messagebox.showinfo('Message', 'You selected Quit command')
    root.destroy()
</pre>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
<i>"""Pygubu and Tkinter: main menu in main window, callback functions (working example)."""</i>
&nbsp;
<i># example3.py</i>
&nbsp;
import tkinter as tk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example3App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui(self)</strong>:
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example3.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Set main menu</i>
        self.mainmenu = menu = builder.get_object('MainMenu', self.master)
        self.set_menu(menu)
&nbsp;
        <i># step $5: Configure callbacks</i>
        <strong>builder.connect_callbacks(self)</strong>
&nbsp;
    def <strong>on_button_clicked(self)</strong>:
        <i>"""Define handler for Quit button."""</i>
        tk.messagebox.showinfo('Message', 'You clicked on Quit button')
        root.destroy()
&nbsp;
    def <strong>on_command_quit_selected(self)</strong>:
        <i>"""Define handler for Quit command."""</i>
        tk.messagebox.showinfo('Message', 'You selected Quit command')
        root.destroy()
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    <i># run the application</i>
    app = Example3App(root)
    app.run()
</pre>

<img src="https://i.iinfo.cz/images/257/pygubu-11.png" class="image-445662" alt="&#160;" width="85" height="83" />
<p><i>Obrázek 11: Takto vypadá třetí demonstrační příklad po spuštění.</i></p>

<img src="https://i.iinfo.cz/images/257/pygubu-12.png" class="image-445663" alt="&#160;" width="282" height="119" /></p>
<p><i>Obrázek 12: Akce provedená po stisku tlačítka
<strong>Quit</strong>.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Možná alternativní řešení</h2>

<p>V&nbsp;závěru dnešního článku se ve stručnosti seznámíme s&nbsp;některými
alternativními projekty, které vývojářům většinou nabízí plnohodnotné
<i>RAD</i> (na rozdíl od poměrně úzce specializovaného projektu
<strong>pygubu</strong>). Do této skupiny aplikací patří především projekt <a
href="#k16">Lazarus</a> založený na programovacím jazyku Object Pascal,
resp.&nbsp;přesněji řečeno na jeho volně šiřitelné variantě, dále pak projekt
<a href="#k15">Gambas</a>, jenž vývojářům přináší obdobu <a
href="https://www.techworm.net/2017/11/perl-hated-programming-language-developers-says-report.html">nechvalně
proslulého</a> programovacího jazyka Visual Basic (ovšem spíše se jedná o
dialekt) a konečně nesmíme zapomenout ani na projekt <a href="#k17">Qt
Creator</a> (dříve <i>Qt Designer</i>). S&nbsp;příchodem aplikací založených na
webových technologiích sice význam těchto nástrojů klesl, ovšem například pro
vnitropodnikové aplikace se stále (podle mého skromného názoru) jedná o velmi
snadno a především rychle použitelnou technologii vyžadující méně vstupních
znalostí (a méně systémových prostředků na straně uživatele).</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti existuje celá řada
projektů určených pro interaktivní návrh GUI. Většina těch známějších je
zmíněna na stránce <a
href="https://en.wikipedia.org/wiki/Graphical_user_interface_builder">Graphical
user interface builder</a>, jazyky pro popis návrhu GUI nalezneme na stránce <a
href="https://en.wikipedia.org/wiki/User_interface_markup_language">User
interface markup language</a>.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Gambas &ndash; Gambas Almost Means BASIC</h2>

<p>První &bdquo;alternativní&ldquo; integrované vývojové prostředí
s&nbsp;možnostmi RAD, s&nbsp;nímž se v&nbsp;dnešním článku alespoň ve
stručnosti seznámíme, se jmenuje <i>Gambas</i> (<i>Gambas Almost Means
BASic</i>). Jak již druhá část jména tohoto IDE napovídá, jedná se o
integrované vývojové prostředí, v&nbsp;němž se používá programovací jazyk
odvozený od <i>Visual Basicu</i>. Autor Gambasu, jímž je programátor <i>Benoit
Minisini</i>, sám v&nbsp;přiložené dokumentaci píše, že na vývoji Gambasu začal
původně pracovat především z&nbsp;toho důvodu, že mu množství chyb a různých
nekonzistencí, které můžeme najít v&nbsp;původním Visual Basicu (nikoli VB
.NET) prostě připadalo rozkošné, takže se nechal Visual Basicem inspirovat (a
tím pádem demonstroval tvrzení &bdquo;worse is better&ldquo;).</p>

<img src="https://i.iinfo.cz/images/428/gambas-1.png" class="image-445649" alt="&#160;" width="484" height="416" />
<p><i>Obrázek 13: Dnes již historická verze Gambasu 1.0.</i></p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je však nutné vysvětlit,
že Gambas ve své současné verzi (v&nbsp;praxi se ještě stále používá jak verze
1.x, tak i v&nbsp;mnoha ohledech vylepšená verze 2.x a 3.x, poslední stabilní
verzí je 3.15.2) je stabilní a poměrně schopné vývojové prostředí a i
programovací jazyk založený na strukturovaném Visual Basicu rozšířeném o
konstrukce určené pro práci s&nbsp;objekty, nemá s&nbsp;prapůvodním BASICem
s&nbsp;čísly řádků a nestrukturovanými konstrukcemi založenými na příkazu GOTO
prakticky nic společného.</div></p>

<img src="https://i.iinfo.cz/images/428/gambas-2.png" class="image-445650" alt="&#160;" width="450" height="337" />
<p><i>Obrázek 14: SDI prostředí Gambasu.</i></p>

<p>Ovšem tím hlavním důvodem, proč se v&nbsp;tomto článku vůbec integrovaným
vývojovým prostředím Gambas zabýváme, však není zvolený programovací jazyk, ale
další velmi důležitá součást tohoto IDE &ndash; jedná se totiž o interaktivní
grafický návrhář formulářů, díky jehož existenci je možné velmi jednoduše a
především rychle a navíc s&nbsp;relativně velkým komfortem vytvořit i poměrně
složitou aplikaci s&nbsp;plnohodnotným grafickým uživatelským rozhraním.</p>

<img src="https://i.iinfo.cz/images/428/gambas-3.png" class="image-445651" alt="&#160;" width="577" height="519" />
<p><i>Obrázek 15: Dialog pro vytvoření nového projektu v&nbsp;Gambasu.</i></p>

<p>Interaktivní návrhář formulářů v&nbsp;prostředí Gambas je samozřejmě
obousměrně propojen s&nbsp;ostatními částmi integrovaného vývojového prostředí,
zejména s&nbsp;programátorským editorem zdrojových kódů. To například znamená,
že pokud se na formuláři vytvoří nové tlačítko, je možné ihned začít psát
obslužný kód zavolaný ve chvíli, kdy bude toto tlačítko na reálném GUI použito.
Způsob propojení návrháře a programátorského editoru je obdobný způsobu, který
byl využit v&nbsp;již  výše zmíněném Visual Basicu (Microsoft) a později taktéž
ve slavném Delphi vytvořeném a prodávaném společností Borland. Později došlo
k&nbsp;rozšíření tohoto úspěšného konceptu i do dalších IDE.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Lazarus</h2>

<p>Dalším integrovaným vývojovým prostředím, s&nbsp;nímž se v&nbsp;dnešním
článku alespoň ve stručnosti seznámíme, je multiplatformní IDE nazvané
<i>Lazarus</i>, které lze v&nbsp;současnosti provozovat na Linuxu, FreeBSD, Mac
OS X i na systémech Microsoft Windows. Jedná se o programátorské prostředí,
které se snaží o napodobení stylu vývoje aplikací použitého ve známém a
především v&nbsp;minulosti velmi populárním komerčním IDE nazvaném
<i>Delphi</i>, jenž bylo vyvíjeno původně společností Borland a později firmou
Embarcadero Technologies (Delphi bylo původně určeno pro šestnáctibitový systém
Windows 3.x a později bylo upraveno pro 32bitové systémy Windows 95, Windows NT
i navazující řadu operačních systémů společnosti Microsoft).</p>

<img src="https://i.iinfo.cz/images/375/lazarus-1.png" class="image-445645" alt="&#160;" width="622" height="415" />
<p><i>Obrázek 16: Konfigurace prostředí Lazarus.</i></p>

<p>Vzhledem k&nbsp;tomu, že je Delphi založeno na programovacím jazyku Object
Pascal, je v&nbsp;integrovaném vývojovém prostředí Lazarus vytvořeno propojení
s&nbsp;multiplatformním překladačem <i>fpc</i> programovacího jazyka <i>Free
Pascal</i> a samotné prostředí obsahuje jak poměrně pokročilý programátorský
editor (se zvýrazněním syntaxe, foldingem, šablonami atd.) tak i interaktivní
grafický editor určený pro návrh formulářů aplikace. Nesmíme samozřejmě
zapomenout ani na ladicí program (debugger), který je do Lazaru plně integrován
(stejně jako debugger do Delphi &ndash; ostatně vývojová prostředí firmy
Borland byla oblíbena mj.&nbsp;i díky kvalitním interním debuggerům).</p>

<a href="https://www.root.cz/obrazek/445646/"><img src="https://i.iinfo.cz/images/375/lazarus-2-prev.png" class="image-445646" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 17: Integrované vývojové prostředí Lazara.</i></p>

<a href="https://www.root.cz/obrazek/445647/"><img src="https://i.iinfo.cz/images/375/lazarus-3-prev.png" class="image-445647" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 18: Informace o použité verzi.</i></p>

<a href="https://www.root.cz/obrazek/445648/"><img src="https://i.iinfo.cz/images/375/lazarus-4-prev.png" class="image-445648" alt="&#160;" width="370" height="267" /></a></p>
<p><i>Obrázek 19: Návrh formuláře se ihned projeví i v&nbsp;programovém
kódu.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. PySide a Qt Creator</h2>

<p>Ještě lepší alternativou k&nbsp;Pygubu může být <i>PySide</i> založené na frameworku Qt. Zde se používají tzv.&nbsp;UI soubory popř.&nbsp;QML (<i>Qt Modeling Language</i>).</p>

<p>Do souborů UI se ukládají popisy jednotlivých uživatelsky definovaných
ovládacích prvků (widgetů), formulářů i celých oken. Jedná se o formát založený
na XML, což znamená, že tyto soubory je možné relativně snadno zpracovat i
dalšími nástroji (XML editory atd.). Tyto soubory lze vytvářet například <i>Qt
Creatorem</i>. Ve chvíli, kdy je soubor UI s&nbsp;popisem nějakého prvku GUI
(widget, formulář, okno) vytvořen, dá se použít několika různými způsoby:</p>

<ul>

<li>Soubor UI lze načíst do běžící aplikace naprogramované v&nbsp;C++
s&nbsp;využitím třídy <strong>QUiLoader</strong>.</li>

<li>Soubor UI lze načíst do běžící aplikace naprogramované v&nbsp;Pythonu, opět
s&nbsp;využitím třídy <strong>QUiLoader</strong>.</li>

<li>Soubor UI je možné konvertovat na zdrojový kód v&nbsp;C++ nástrojem
<i>UIC</i> (<i>User Interface Compiler</i>).</li>

<li>Soubor UI je možné konvertovat na zdrojový kód v&nbsp;Pythonu nástrojem
<i>Python-uic</i>. Výsledek by měl být dobře pochopitelný, protože se používají
postupy, které jsme si popsali v&nbsp;předchozích článcích.</li>

</ul>

<p>Jedním z&nbsp;nástrojů, který dokáže vytvářet soubory <strong>.ui</strong>,
je aplikace nazvaná <i>Qt Creator</i>. Jak již název tohoto nástroje napovídá,
jedná se o IDE určené primárně pro desktopové prostředí KDE založené na
knihovně Qt, ovšem ve skutečnosti nám samozřejmě nic nebrání použít Qt Creator
i na desktopu se spuštěným Gnome Shellem popř.&nbsp;nějakým
&bdquo;alternativním&ldquo; desktopovým prostředím (jediným problémem bude
nepatrně delší čas spouštění zapříčiněný načítáním knihovny Qt do paměti). To,
že je Qt Creator původně orientován na vývoj aplikací postavených na knihovně
Qt a tím pádem i na programovacím jazyku C++, je patrné již při pohledu na
screenshoty, kde jsou ukázány dialogy zobrazené při vytváření nového
projektu.</p>

<p><div class="rs-tip-major">Poznámka: dříve (před Qt 5) existovala samostatná
aplikace nazvaná <i>Qt Designer</i>, která byla určená prakticky výhradně na
návrh GUI. Dnes jsou funkce obou nástrojů sjednoceny právě v&nbsp;<i>Qt
Creatoru</i>, i když se například ve starší dokumentaci stále setkáme
s&nbsp;původním názvem.</div></p>

<a href="https://www.root.cz/obrazek/329330/"><img src="https://i.iinfo.cz/images/619/qtcreator-3-prev.png" class="image-329330" alt="&#160;" width="370" height="264" /></a>
<p><i>Obrázek 20: Vítací obrazovka dnes již poněkud starší verze Qt
Creatoru.</i></p>

<p>Formát souborů vytvářených Qt Creatorem se však odlišuje od stejně
pojmenovaných souborů vytvářených systémem Pygubu:</p>

<pre>
&lt;ui version="4.0"&gt;
 &lt;class&gt;MainWindow&lt;/class&gt;
 &lt;widget class="QMainWindow" name="MainWindow" &gt;
  &lt;property name="geometry" &gt;
   &lt;rect&gt;
    &lt;x&gt;0&lt;/x&gt;
    &lt;y&gt;0&lt;/y&gt;
    &lt;width&gt;400&lt;/width&gt;
    &lt;height&gt;300&lt;/height&gt;
   &lt;/rect&gt;
  &lt;/property&gt;
  &lt;property name="windowTitle" &gt;
   &lt;string&gt;MainWindow&lt;/string&gt;
  &lt;/property&gt;
  &lt;widget class="QMenuBar" name="menuBar" /&gt;
  &lt;widget class="QToolBar" name="mainToolBar" /&gt;
  &lt;widget class="QWidget" name="centralWidget" /&gt;
  &lt;widget class="QStatusBar" name="statusBar" /&gt;
 &lt;/widget&gt;
 &lt;layoutDefault spacing="6" margin="11" /&gt;
 &lt;pixmapfunction&gt;&lt;/pixmapfunction&gt;
 &lt;resources/&gt;
 &lt;connections/&gt;
&lt;/ui&gt;
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Závěrečné zhodnocení</h2>

<p>Nástroj Pygubu, s&nbsp;jehož základními možnostmi jsme se seznámili
především v&nbsp;polovině dnešního článku, nemůžeme považovat za plnohodnotný
nástroj typu RAD a ve skutečnosti to ani není jeho cílem. Jedná se
&bdquo;pouze&ldquo; o relativně jednoduchou utilitu a současně i knihovnu pro
programovací jazyk Python umožňující interaktivní návrh formulářů
popř.&nbsp;uceleného grafického uživatelského rozhraní složeného
z&nbsp;jednotlivých formulářů a typicky i hlavního okna aplikace. Zda se jedná
o výhodu či nevýhodu již záleží na konkrétním způsobu použití, protože některým
vývojářům může vadit, že Pygubu není integrován do nějakého IDE pro Python
(Visual Studio Code, Pycharm atd.); navíc zde existuje nutnost vytvářet
programový kód zvlášť. Díky tomu, že je GUI založeno na knihovně Tkinter, je
výsledná aplikace snadno přenositelná na různé operační systémy, přičemž nový
vzhled ovládacích prvků přidaný do TCL/Tk do značné míry odstranil jednu
z&nbsp;velkých nevýhod této knihovny &ndash; &bdquo;retro&ldquo; styl aplikací
založených na Tkinteru resp.&nbsp;přesněji řečeno na kombinaci TCL/Tk, kterou
Tkinter interně volá.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech tří dnes popsaných demonstračních příkladů určených pro
Python 3 a nejnovější stabilní verzi knihovny Pygubu (a pochopitelně i pro
Pygubu designer) byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th>#</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>example1.ui</td><td>soubor s&nbsp;návrhem GUI prvního demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.ui</a></td></tr>
<tr><td>2</td><td>example1.py</td><td>implementace prvního demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>example2.ui</td><td>soubor s&nbsp;návrhem GUI druhého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2.ui</a></td></tr>
<tr><td>4</td><td>example2A.py</td><td>implementace třetího demonstračního příkladu (bez menu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2A.py</a></td></tr>
<tr><td>5</td><td>example2B.py</td><td>implementace třetího demonstračního příkladu (nespecifikován adresář s&nbsp;ikonami)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2B.py</a></td></tr>
<tr><td>6</td><td>example2C.py</td><td>implementace třetího demonstračního příkladu (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2C.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>example3.ui</td><td>soubor s&nbsp;návrhem GUI třetího demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.ui</a></td></tr>
<tr><td>8</td><td>example3.py</td><td>implementace třetího demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.py</a></td></tr>
</table>

<p>Ve druhém a třetím demonstračním příkladu jsou navíc použity i ikony
v&nbsp;menu. Tyto ikony jsou uloženy samostatně ve formátu PNG a měly by být
umístěny do stejného adresáře, ze kterého se spouští aplikace:</p>

<table>
<tr><th>#</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>application-exit.png</td><td>ikona pro položku menu sloužící k&nbsp;ukončení aplikace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/application-exit.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/application-exit.png</a></td></tr>
<tr><td>2</td><td>document-new.png</td><td>ikona pro položku menu File&rarr;New</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-new.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-new.png</a></td></tr>
<tr><td>3</td><td>document-open.png</td><td>ikona pro položku menu File&rarr;Open</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-open.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-open.png</a></td></tr>
<tr><td>4</td><td>edit-copy.png</td><td>ikona pro položku menu Edit&rarr;Copy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-copy.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-copy.png</a></td></tr>
<tr><td>5</td><td>edit-cut.png</td><td>ikona pro položku menu Edit&rarr;Cut</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-cut.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-cut.png</a></td></tr>
<tr><td>6</td><td>edit-paste.png</td><td>ikona pro položku menu Edit&rarr;Paste</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-paste.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-paste.png</a></td></tr>
<tr><td>7</td><td>edit-delete.png</td><td>ikona pro položku menu Edit&rarr;Delete</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-delete.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-delete.png</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Seriál Grafické uživatelské rozhraní v Pythonu<br />
<a href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/</a>
</li>

<li>Pygubu na PyPi<br />
<a href="https://pypi.org/project/pygubu/">https://pypi.org/project/pygubu/</a>
</li>

<li>Repositář projektu Pygubu<br />
<a href="https://github.com/alejandroautalan/pygubu">https://github.com/alejandroautalan/pygubu</a>
</li>

<li>pygubu-designer na PyPi<br />
<a href="https://pypi.org/project/pygubu-designer/">https://pypi.org/project/pygubu-designer/</a>
</li>

<li>Repositář projektu pygubu-designer<br />
<a href="https://github.com/alejandroautalan/pygubu-designer">https://github.com/alejandroautalan/pygubu-designer</a>
</li>

<li>Pygubu Wiki<br />
<a href="https://github.com/alejandroautalan/pygubu/wiki">https://github.com/alejandroautalan/pygubu/wiki</a>
</li>

<li>How to install Tkinter in Python?<br />
<a href="https://www.tutorialspoint.com/how-to-install-tkinter-in-python">https://www.tutorialspoint.com/how-to-install-tkinter-in-python</a>
</li>

<li>Stránky projektu Glade<br />
<a href="https://glade.gnome.org/">https://glade.gnome.org/</a>
</li>

<li>Hra Breakout napísaná v&nbsp;Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Brython aneb použití jazyka Python ve skriptech přímo v prohlížeči<br />
<a href="https://www.root.cz/clanky/brython-aneb-pouziti-jazyka-python-ve-skriptech-primo-v-prohlizeci/">https://www.root.cz/clanky/brython-aneb-pouziti-jazyka-python-ve-skriptech-primo-v-prohlizeci/</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>Rapid application development<br />
<a href="https://en.wikipedia.org/wiki/Rapid_application_development">https://en.wikipedia.org/wiki/Rapid_application_development</a>
</li>

<li>Non-functional requirement<br />
<a href="https://en.wikipedia.org/wiki/Non-functional_requirement">https://en.wikipedia.org/wiki/Non-functional_requirement</a>
</li>

<li>Graphical user interface builder<br />
<a href="https://en.wikipedia.org/wiki/Graphical_user_interface_builder">https://en.wikipedia.org/wiki/Graphical_user_interface_builder</a>
</li>

<li>User interface markup language<br />
<a href="https://en.wikipedia.org/wiki/User_interface_markup_language">https://en.wikipedia.org/wiki/User_interface_markup_language</a>
</li>

<li>Top 10 programming languages that developers hate the most<br />
<a href="https://www.techworm.net/2017/11/perl-hated-programming-language-developers-says-report.html">https://www.techworm.net/2017/11/perl-hated-programming-language-developers-says-report.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

