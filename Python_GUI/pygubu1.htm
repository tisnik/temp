<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se seznámíme s nástrojem s poněkud prapodivným jménem Pygubu. Jedná se o poměrně jednoduchý nástroj určený pro interaktivní tvorbu grafického uživatelského rozhraní pro aplikace vyvíjené v Pythonu s využitím knihovny Tkinter.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Interaktivní tvorba grafického uživatelského rozhraní s&nbsp;využitím nástroje Pygubu</a></p>
<p><a href="#k02">*** 2. Základní informace o knihovně Tkinter</a></p>
<p><a href="#k03">*** 3. Programová tvorba aplikací s&nbsp;grafickým uživatelským rozhraním v&nbsp;Tkinteru</a></p>
<p><a href="#k04">*** 4. Příklad jednoduché aplikace s&nbsp;imperativně popsaným GUI</a></p>
<p><a href="#k05">*** 5. Nástroje typu RAD &ndash; Rapid Application Development</a></p>
<p><a href="#k06">*** 6. Instalace nástroje Pygubu</a></p>
<p><a href="#k07">*** 7. Návrh UI prvního demonstračního příkladu s&nbsp;oknem a dvojicí ovládacích prvků</a></p>
<p><a href="#k08">*** 8. Zdrojový kód prvního demonstračního příkladu</a></p>
<p><a href="#k09">*** 9. Přidání hlavního menu do okna aplikace</a></p>
<p><a href="#k10">*** 10. První varianta zdrojového kódu druhého příkladu</a></p>
<p><a href="#k11">*** 11. Odstranění základních chyb: inicializace menu a specifikace adresáře s&nbsp;ikonami</a></p>
<p><a href="#k12">*** 12. Specifikace callback funkcí volaných při práci s&nbsp;uživatelským rozhraním</a></p>
<p><a href="#k13">*** 13. Zdrojový kód třetího demonstračního příkladu</a></p>
<p><a href="#k14">*** 14. Možná alternativní řešení</a></p>
<p><a href="#k15">*** 15. Gambas &ndash; Gambas Almost Means BASIC</a></p>
<p><a href="#k16">*** 16. Lazarus</a></p>
<p><a href="#k17">*** 17. PySide a Qt Creator</a></p>
<p><a href="#k18">*** 18. Závěrečné zhodnocení</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Interaktivní tvorba grafického uživatelského rozhraní s&nbsp;využitím nástroje Pygubu</h2>

<p>Na stránkách <a href="https://www.root.cz">Roota</a> jsme se již mnohokrát setkali <a href="">s&nbsp;programovacím jazykem Python</a>. Zabývali jsme se různými oblastmi nasazení tohoto v&nbsp;současnosti <a href="">velmi populárního jazyka</a>, a to jak na <i>backendu</i>, tak i na <i>frontendu</i> (i když je na tomto místě nutné poznamenat, že použití Pythonu na frontendu je dosti alternativním řešením, které trpí několika nedostatky). Python je ovšem velmi dobře použitelný i pro tvorbu desktopových aplikací s&nbsp;grafickým uživatelským rozhraním, což je téma, kterému jsme se podrobněji věnovali <a href="">v&nbsp;samostatném seriálu</a>; ostatně dnešní článek bude do tohoto seriálu taktéž zařazen. Dnes se seznámíme s&nbsp;poměrně jednoduchým nástrojem, který se jmenuje <i>Pygubu</i>. Jedná se o nástroj, který lze použít pro návrh grafického uživatelského rozhraní (typicky různých dialogů) desktopových aplikací vyvíjených v&nbsp;Pythonu s&nbsp;tím, že pro vlastní GUI bude použita knihovna <i>Tkinter</i>.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;posledních několika letech se můžeme setkat s&nbsp;tím, že se desktopové aplikace začínají vytvářet s&nbsp;využitím webových technologií. Typickým příkladem jsou aplikace postavené na technologii <a href="">Electron</a>. Těmito typy aplikací &ndash; které pochopitelně opět trpí několika neduhy &ndash; se ovšem v&nbsp;dnešním článku zabývat nebudeme.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní informace o knihovně Tkinter</h2>

<p>Nástroj Pygubu je určen pro návrh grafického uživatelského rozhraní založeného na knihovně <i>Tkinter</i>. S&nbsp;touto knihovnou jsme se již několikrát setkali, takže si v&nbsp;této kapitole pouze ve stručnosti připomeňme některé její základní vlastnosti.</p>

<p>Pythonovská knihovna nazvaná <i>Tkinter</i> tvoří rozhraní ke knihovně <i>Tk</i>, přičemž <i>Tk</i> je takzvaný <i>toolkit</i> (z&nbsp;pohledu programovacího jazyka se přitom jedná o knihovnu) určený pro jednoduchý a rychlý vývoj programů obsahujících grafické uživatelské rozhraní. Autorem tohoto toolkitu je, podobně jako v&nbsp;případě programovacího jazyka <i>Tcl</i>, <a href="https://en.wikipedia.org/wiki/John_Ousterhout">John Ousterhout</a>, mezi jehož zájmy v&nbsp;minulosti patřila automatizace (skriptovatelnost) aplikací a právě tvorba grafických uživatelských rozhraní.  V&nbsp;minulosti byl tento toolkit velmi oblíbený, proto se dodával (a stále dodává) spolu s&nbsp;instalací programovacího jazyka <i>Tcl</i> a &ndash; což nás dnes zajímá mnohem více &ndash; i s&nbsp;jazykem Python společně s&nbsp;rozhraním <i>Tkinter</i>. I z&nbsp;tohoto důvodu se také v&nbsp;různých materiálech a dokumentech často setkáme se společným názvem <i>Tcl/Tk</i>.  Samotný název <i>Tk</i> jednoduše znamená zkratku slova <i>ToolKit</i>.</p>

<p>Důležitou vlastností knihovny <i>Tk</i>, která zůstala zachována i v&nbsp;<i>Tkinteru</i>, je úsporný, flexibilní a přitom čitelný zápis programu se specifikací ovládacích prvků, jejich umístění v&nbsp;oknech, vlastností i <i>callback funkcí</i> volaných v&nbsp;důsledku uživatelské činnosti. Udává se, že poměr psaného kódu v&nbsp;<i>Tcl/Tk</i> je vůči dnes již obstarožnímu a prakticky zapomenutému <i>Motifu</i> na hodnotách 1:20 a vůči základnímu <i>Xlibu</i> dokonce 1:100! (vše se samozřejmě týká tvorby grafického uživatelského rozhraní). Na tomto místě je však nutné podotknout, že Motif je z&nbsp;dnešního pohledu již zastaralá knihovna a navíc dnes mnoho moderních knihoven pro GUI podporuje deklaraci grafického uživatelského rozhraní v&nbsp;konfiguračních souborech, nikoli tedy programem (což má své výhody, ale samozřejmě i zápory). Nicméně i dnes představuje kombinace Tcl+Tk či ještě lépe Python+Tkinter poměrně dobrou volbu pro mnoho typů aplikací s&nbsp;GUI.</p>

<p>V&nbsp;průběhu postupného vývoje novějších (avšak ne nutně dokonalejších) programovacích nástrojů byla knihovna <i>Tk</i> kromě Tcl použita i v&nbsp;mnoha dalších programovacích jazycích. Pravděpodobně nejznámější je, samozřejmě kromě samotné dvojice <i>Tcl/Tk</i>, modul určený pro programovací jazyk <i>Perl</i> (Perl/Tk) a <i>Python</i> (Tkinter &ndash; Tk Interface, což je téma navazujícího článku). Knihovnu <i>Tk</i> je však samozřejmě možné použít i v dalších programovacích jazycích, i když v&nbsp;mnoha případech ne tak snadně a efektivně, jako ze samotného <i>Tcl</i>. V&nbsp;praxi se často s&nbsp;výhodou používá či používalo spojení programů napsaných v&nbsp;programovacím jazyku <i>C</i> či s&nbsp;<i>C++</i> s&nbsp;grafickým uživatelským rozhraním, které je vytvořeno pomocí <i>Tcl</i> a <i>Tk</i>.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;následujících kapitolách předpokládáme, že je knihovna Tkinter nainstalována (což je v&nbsp;některých systémech splněno instalací samotného prostředí Pythonu). Způsob instalace knihovny Tkinter je podrobněji popsán <a href="">na této stránce</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Programová tvorba aplikací s&nbsp;grafickým uživatelským rozhraním v&nbsp;Tkinteru</h2>

<p>Pro ilustraci si ukažme, jak jednoduchá může být (značně primitivní) aplikace s&nbsp;jedním oknem a textovým návěštím umístěným do tohoto okna:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
&nbsp;
root = Tk()
&nbsp;
label = Label(root, text="Hello world!")
&nbsp;
label.pack()
&nbsp;
root.mainloop()
</pre>

<p>Ve skutečnosti se však v&nbsp;současnosti používá takzvané <i>TTk</i> neboli <i>Themed Tk)</i> a program bude muset být nepatrně upraven (přidá se import a namísto <strong>Label()</strong> se zavolá konstruktor <strong>ttk.Label()</strong>):</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
root = Tk()
&nbsp;
label = ttk.Label(root, text="Hello world!")
&nbsp;
label.pack()
&nbsp;
root.mainloop()
</pre>

<p><div class="rs-tip-major">Poznámka: na Rootu již <a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">vyšel zajímavý článek o Tkinteru</a>, v&nbsp;jehož rámci byla vytvořena jednoduchá hra typu Arkanoid/Breakout.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příklad jednoduché aplikace s&nbsp;imperativně popsaným GUI</h2>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = Tk()
&nbsp;
button1 = ttk.Button(root, text="1st btn", command=lambda: sys.exit(0))
button2 = ttk.Button(root, text="Second button", command=lambda: sys.exit(0))
button3 = ttk.Button(root, text="Third button", command=lambda: sys.exit(0))
button4 = ttk.Button(root, text="This is fourth button, the last one",
                     command=lambda: sys.exit(0))
&nbsp;
button1.grid(column=1, row=1, sticky="we")
button2.grid(column=2, row=2, sticky="we")
button3.grid(column=1, row=3, sticky="we")
button4.grid(column=3, row=1, rowspan=4, sticky="nswe")
&nbsp;
root.mainloop()
</pre>

<a href="https://www.root.cz/obrazek/297642/"><img src="https://i.iinfo.cz/images/238/tkinter1-18-prev.png" class="image-297642" alt="&#160;" width="370" height="96" /></a>
<p><i>Obrázek 18: Čtvrté tlačítko používá &bdquo;přilepení&ldquo; ke všem
stranám spojené buňky.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nástroje typu RAD &ndash; Rapid Application Development</h2>

<p>Programová a tedy de facto i ruční tvorba grafického uživatelského rozhraní trpí hned několika neduhy. Zejména se jedná o mnohdy zbytečně nízkoúrovňovou práci, ovšem horší problém spočívá v&nbsp;tom, že požadavek na změnu GUI (například i pouhé posunutí nějakého ovládacího prvku) vyžaduje zásah do programového kódu, který navíc není či nemusí vždy být triviální a intuitivní. Tohoto úskalí si byly některé softwarové firmy vědomy již minimálně v ???? a právě z&nbsp;tohoto důvodu vznikly nástroje typu <i>RAD</i> neboli <i></i>. Tyto nástroje umožňují nejenom velmi rychlou tvorbu grafického uživatelského rozhraní s&nbsp;pomocí návrhářů GUI, ale &ndash; což je možná ještě důležitější &ndash; obousměrnou vazbu mezi grafickým uživatelským rozhraním a programovým kódem.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instalace nástroje Pygubu</h2>

<p>Ve druhé části článku si ukážeme použití nástroje Pygubu prakticky. Samotná instalace Pygubu je přitom velmi jednoduchá, neboť Pygubu je dostupný jako běžný balíček pro Python nabízený na <a href="">PyPi</a>. Pro instalaci tedy použijeme buď nástroj <strong>pip</strong> nebo <strong>pip3</strong>, v&nbsp;závislosti na tom, jakým způsobem je Python nakonfigurován:</p>

<pre>
$ <strong>pip3 install --user pygubu</strong>
&nbsp;
Collecting pygubu
  Downloading https://files.pythonhosted.org/packages/ac/e5/ce8d5241a3119045e77ae0e47a182415069e9a7419125d604d2cc4ffcc8f/pygubu-0.9.8.6-py3-none-any.whl (190kB)
    100% |████████████████████████████████| 194kB 1.2MB/s
Requirement already satisfied: appdirs&gt;=1.3 in ./.local/lib/python3.6/site-packages (from pygubu)
Installing collected packages: pygubu
Successfully installed pygubu-0.9.8.6
</pre>

<p><div class="rs-tip-major">Poznámka: pochopitelně je možné instalaci nástroje Pygubu provést v&nbsp;rámci virtuálního prostředí Pythonu, resp.&nbsp;přesněji řečeno s&nbsp;využitím <i>virtualenv</i> či <i>venv</i>. Postačuje vytvořit adresářovou strukturu s&nbsp;virtuálním prostředím, inicializovat ho a následně spustit instalaci v&nbsp;rámci právě vytvořeného a inicializovaného prostředí:</div></p>

<pre>
$ <strong>python3 -m venv pygubu</strong>
</pre>

<p>Dále virtuální prostředí aktivujeme:</p>

<pre>
$ <strong>source pygubu/bin/activate</strong>
</pre>

<p>To by se mělo projevit úpravou výzvy (<i>prompt</i>):</p>

<pre>
(pygubu) bash-4.4$ 
</pre>

<pre>
(pygubu) bash-4.4$ <strong>pip3 install --user pygubu</strong>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Návrh UI prvního demonstračního příkladu s&nbsp;oknem a dvojicí ovládacích prvků</h2>

<p></p>

<pre>
<?xml version='1.0' encoding='utf-8'?>
<interface>
  <object class="ttk.Frame" id="Frame_1">
    <property name="height">200</property>
    <property name="width">200</property>
    <layout>
      <property name="column">3</property>
      <property name="propagate">True</property>
      <property name="row">3</property>
    </layout>
    <child>
      <object class="ttk.Button" id="Button_2">
        <property name="text" translatable="yes">Button_2</property>
        <layout>
          <property name="column">0</property>
          <property name="propagate">True</property>
          <property name="row">0</property>
          <property name="sticky">ne</property>
        </layout>
      </object>
    </child>
    <child>
      <object class="ttk.Checkbutton" id="Checkbutton_1">
        <property name="text" translatable="yes">Checkbutton_1</property>
        <layout>
          <property name="column">1</property>
          <property name="propagate">True</property>
          <property name="row">1</property>
        </layout>
      </object>
    </child>
  </object>
</interface>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zdrojový kód prvního demonstračního příkladu</h2>

<p></p>

<pre>
"""Pygubu and Tkinter: user interface initialization."""

# example1.py

import tkinter as tk
import pygubu


class Example1App:
    """Class representing a Tkinter based application."""

    def __init__(self):
        """Construct and initializes all UI-related data structures."""
        # step #1: Create a builder
        self.builder = builder = pygubu.Builder()

        # step #2: Load an ui file
        builder.add_from_file('example1.ui')

        # step #3: Create the mainwindow
        self.mainwindow = builder.get_object('Frame_1')

    def run(self):
        """Start the UI."""
        self.mainwindow.mainloop()


if __name__ == '__main__':
    # run the application
    app = Example1App()
    app.run()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přidání hlavního menu do okna aplikace</h2>

<p></p>

<pre>
<?xml version='1.0' encoding='utf-8'?>
<interface>
  <object class="tk.Menu" id="MainMenu">
    <child>
      <object class="tk.Menuitem.Submenu" id="FileMenu">
        <property name="font">TkDefaultFont</property>
        <property name="label" translatable="yes">File</property>
        <property name="relief">raised</property>
        <property name="state">normal</property>
        <property name="tearoff">false</property>
        <property name="underline">0</property>
        <child>
          <object class="tk.Menuitem.Command" id="Command_New">
            <property name="command_id_arg">false</property>
            <property name="compound">left</property>
            <property name="image">document-new.png</property>
            <property name="label" translatable="yes">New</property>
            <property name="state">normal</property>
            <property name="underline">0</property>
          </object>
        </child>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Open">
            <property name="command_id_arg">false</property>
            <property name="compound">left</property>
            <property name="image">document-open.png</property>
            <property name="label" translatable="yes">Open</property>
            <property name="underline">0</property>
          </object>
        </child>
        <child>
          <object class="tk.Menuitem.Separator" id="Separator_1" />
        </child>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Quit">
            <property name="command_id_arg">false</property>
            <property name="compound">left</property>
            <property name="image">application-exit.png</property>
            <property name="label" translatable="yes">Quit</property>
            <property name="underline">0</property>
          </object>
        </child>
      </object>
    </child>
    <child>
      <object class="tk.Menuitem.Submenu" id="EditMenu">
        <property name="label" translatable="yes">Edit</property>
        <property name="underline">0</property>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Cut">
            <property name="command_id_arg">false</property>
            <property name="compound">left</property>
            <property name="image">edit-cut.png</property>
            <property name="label" translatable="yes">Cut</property>
          </object>
        </child>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Copy">
            <property name="command_id_arg">false</property>
            <property name="compound">left</property>
            <property name="image">edit-copy.png</property>
            <property name="label" translatable="yes">Copy</property>
          </object>
        </child>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Paste">
            <property name="command_id_arg">false</property>
            <property name="compound">left</property>
            <property name="image">edit-paste.png</property>
            <property name="label" translatable="yes">Paste</property>
          </object>
        </child>
        <child>
          <object class="tk.Menuitem.Separator" id="Separator_2" />
        </child>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Delete">
            <property name="command_id_arg">false</property>
            <property name="compound">left</property>
            <property name="image">edit-delete.png</property>
            <property name="label" translatable="yes">Delete</property>
            <property name="state">disabled</property>
          </object>
        </child>
      </object>
    </child>
  </object>
  <object class="ttk.Frame" id="MainWindow">
    <property name="height">200</property>
    <property name="width">200</property>
    <layout>
      <property name="column">0</property>
      <property name="propagate">True</property>
      <property name="row">0</property>
    </layout>
  </object>
</interface>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. První varianta zdrojového kódu druhého příkladu</h2>

<p></p>

<pre>
"""Pygubu and Tkinter: main menu in main window (not working properly)."""

# example2A.py

import tkinter as tk
import pygubu


class Example2App(pygubu.TkApplication):
    """Class representing a Tkinter based application."""

    def _create_ui(self):
        """Construct and initializes all UI-related data structures."""
        # step #1: Create a builder
        self.builder = builder = pygubu.Builder()

        # step #2: Load an ui file
        builder.add_from_file('example2.ui')

        # step #3: Create the mainwindow
        self.mainwindow = builder.get_object('MainWindow', self.master)

        # step #4: Set main menu
        self.mainmenu = menu = builder.get_object('MainMenu', self.master)
        self.set_menu(menu)

        # step $5: Configure callbacks
        builder.connect_callbacks(self)


if __name__ == '__main__':
    # run the application
    app = Example2App()
    app.run()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odstranění základních chyb: inicializace menu a specifikace adresáře s&nbsp;ikonami</h2>

<p></p>

<pre>
"""Pygubu and Tkinter: main menu in main window (resources not setup)."""

# example2B.py

import tkinter as tk
import pygubu


class Example2App(pygubu.TkApplication):
    """Class representing a Tkinter based application."""

    def _create_ui(self):
        """Construct and initializes all UI-related data structures."""
        # step #1: Create a builder
        self.builder = builder = pygubu.Builder()

        # step #2: Load an ui file
        builder.add_from_file('example2.ui')

        # step #3: Create the mainwindow
        self.mainwindow = builder.get_object('MainWindow', self.master)

        # step #4: Set main menu
        self.mainmenu = menu = builder.get_object('MainMenu', self.master)
        self.set_menu(menu)

        # step $5: Configure callbacks
        builder.connect_callbacks(self)


if __name__ == '__main__':
    # needed to have a menu
    root = tk.Tk()

    # run the application
    app = Example2App(root)
    app.run()
</pre>

<pre>
"""Pygubu and Tkinter: main menu in main window (working example)."""

# example2B.py

import tkinter as tk
import pygubu


class Example2App(pygubu.TkApplication):
    """Class representing a Tkinter based application."""

    def _create_ui(self):
        """Construct and initializes all UI-related data structures."""
        # step #1: Create a builder
        self.builder = builder = pygubu.Builder()

        # step #2: Load an ui file
        builder.add_from_file('example2.ui')

        # step #2B: Specify path to images and other resources
        builder.add_resource_path(".")

        # step #3: Create the mainwindow
        self.mainwindow = builder.get_object('MainWindow', self.master)

        # step #4: Set main menu
        self.mainmenu = menu = builder.get_object('MainMenu', self.master)
        self.set_menu(menu)

        # step $5: Configure callbacks
        builder.connect_callbacks(self)


if __name__ == '__main__':
    # needed to have a menu
    root = tk.Tk()

    # run the application
    app = Example2App(root)
    app.run()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Specifikace callback funkcí volaných při práci s&nbsp;uživatelským rozhraním</h2>

<p></p>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zdrojový kód třetího demonstračního příkladu</h2>

<p></p>

<pre>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Možná alternativní řešení</h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Gambas &ndash; Gambas Almost Means BASIC</h2>

První &bdquo;alternativní&ldquo; integrované vývojové prostředí s&nbsp;možnostmi RAD, s&nbsp;nímž se v&nbsp;dnešním článku ve stručnosti seznámíme, se jmenuje <i>Gambas</i> (<i>Gambas Almost Means BASic</i>). Jak již druhá část jména tohoto IDE napovídá, jedná se o integrované vývojové prostředí, v&nbsp;němž se používá programovací jazyk odvozený od <i>Visual Basicu</i>. Autor Gambasu, jímž je programátor <i>Benoit Minisini</i>, sám v&nbsp;přiložené dokumentaci píše, že na vývoji Gambasu začal původně pracovat především z&nbsp;toho důvodu, že mu množství chyb a různých nekonzistencí, které můžeme najít v&nbsp;původním Visual Basicu (nikoli VB .NET) prostě připadalo rozkošné, takže se nechal Visual Basicem inspirovat.</p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je však nutné vysvětlit, že Gambas ve své současné verzi (v&nbsp;praxi se ještě stále používá jak verze 1.x, tak i v&nbsp;mnoha ohledech vylepšená verze 2.x a 3.x, poslední stabilní verzí je 3.15.2) je stabilní a poměrně schopné vývojové prostředí a i programovací jazyk založený na strukturovaném Visual Basicu rozšířeném o konstrukce určené pro práci s&nbsp;objekty, nemá s&nbsp;prapůvodním BASICem s&nbsp;čísly řádků a nestrukturovanými konstrukcemi založenými na příkazu GOTO prakticky nic společného.</div></p>

<p>Ovšem tím hlavním důvodem, proč se v&nbsp;tomto článku vůbec integrovaným vývojovým prostředím Gambas zabýváme, však není zvolený programovací jazyk, ale další velmi důležitá součást tohoto IDE &ndash; jedná se totiž o interaktivní grafický návrhář formulářů, díky jehož existenci je možné velmi jednoduše a především rychle a navíc s&nbsp;relativně velkým komfortem vytvořit i poměrně složitou aplikaci s&nbsp;plnohodnotným grafickým uživatelským rozhraním.</p>

<p>Interaktivní návrhář formulářů v&nbsp;prostředí Gambas je samozřejmě obousměrně propojen s&nbsp;ostatními částmi integrovaného vývojového prostředí, zejména s&nbsp;programátorským editorem zdrojových kódů. To například znamená, že pokud se na formuláři vytvoří nové tlačítko, je možné ihned začít psát obslužný kód zavolaný ve chvíli, kdy bude toto tlačítko na reálném GUI použito. Způsob propojení návrháře a programátorského editoru je obdobný způsobu, který byl využit v&nbsp;již  výše zmíněném Visual Basicu (Microsoft) a později taktéž ve slavném Delphi vytvořeném a prodávaném společností Borland. Později došlo k&nbsp;rozšíření tohoto úspěšného konceptu i do dalších IDE.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Lazarus</h2>

<p>Dalším integrovaným vývojovým prostředím, s&nbsp;nímž se v&nbsp;dnešním článku ve stručnosti seznámíme, je multiplatformní IDE nazvané <i>Lazarus</i>, které lze v&nbsp;současnosti provozovat na Linuxu, FreeBSD, Mac OS X i na systémech Microsoft Windows. Jedná se o programátorské prostředí, které se snaží o napodobení stylu vývoje aplikací použitého ve známém a především v&nbsp;minulosti velmi populárním komerčním IDE nazvaném <i>Delphi</i>, jenž bylo vyvíjeno původně společností Borland a později firmou Embarcadero Technologies (Delphi bylo původně určeno pro šestnáctibitový systém Windows 3.x a později bylo upraveno pro 32bitové systémy Windows 95, Windows NT i navazující řadu operačních systémů společnosti Microsoft).</p>

<p>Vzhledem k&nbsp;tomu, že je Delphi založeno na programovacím jazyku Object Pascal, je v&nbsp;integrovaném vývojovém prostředí Lazarus vytvořeno propojení s&nbsp;multiplatformním překladačem <i>fpc</i> programovacího jazyka <i>Free Pascal</i> a samotné prostředí obsahuje jak poměrně pokročilý programátorský editor (se zvýrazněním syntaxe, foldingem, šablonami atd.) tak i interaktivní grafický editor určený pro návrh formulářů aplikace. Nesmíme samozřejmě zapomenout ani na ladicí program (debugger), který je do Lazaru plně integrován (stejně jako debugger do Delphi &ndash; ostatně vývojová prostředí firmy Borland byla oblíbena mj.&nbsp;i díky kvalitním interním debuggerům).</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. PySide a Qt Creator</h2>

Pro PySide založeném na frameworku Qt se používají tzv.&nbsp;UI soubory popř.&nbsp;QML (<i>Qt Modeling Language</i>).

<p>Do souborů UI se ukládají popisy jednotlivých uživatelsky definovaných
ovládacích prvků (widgetů), formulářů i celých oken. Jedná se o formát založený
na XML, což znamená, že tyto soubory je možné relativně snadno zpracovat i
dalšími nástroji (XML editory atd.). Tyto soubory lze vytvářet například <i>Qt
Creatorem</i>, což je téma, kterému se ve stručnosti budeme věnovat <a
href="#k03">v&nbsp;navazující kapitole</a>. Ve chvíli, kdy je soubor UI
s&nbsp;popisem nějakého prvku GUI (widget, formulář, okno) vytvořen, dá se
použít několika různými způsoby:</p>

<ul>

<li>Soubor UI lze načíst do běžící aplikace naprogramované v&nbsp;C++ s&nbsp;využitím třídy <strong>QUiLoader</strong>.</li>

<li>Soubor UI lze načíst do běžící aplikace naprogramované v&nbsp;Pythonu, opět s&nbsp;využitím třídy <strong>QUiLoader</strong>.</li>

<li>Soubor UI je možné konvertovat na zdrojový kód v&nbsp;C++ nástrojem <i>UIC</i> (<i>User Interface Compiler</i>).</li>

<li>Soubor UI je možné konvertovat na zdrojový kód v&nbsp;Pythonu nástrojem <i>Python-uic</i>. Výsledek by měl být dobře pochopitelný, protože se používají postupy, které jsme si popsali v&nbsp;předchozích článcích.</li>

</ul>

<p>Jedním z&nbsp;nástrojů, který dokáže vytvářet soubory <strong>.ui</strong>, je aplikace nazvaná <i>Qt Creator</i>. Jak již název tohoto nástroje napovídá, jedná se o IDE určené primárně pro desktopové prostředí KDE založené na knihovně Qt, ovšem ve skutečnosti nám samozřejmě nic nebrání použít Qt Creator i na desktopu se spuštěným Gnome Shellem popř.&nbsp;nějakým &bdquo;alternativním&ldquo; desktopovým prostředím (jediným problémem bude delší čas spouštění zapříčiněný načítáním knihovny Qt do paměti). To, že je Qt Creator původně orientován na vývoj aplikací postavených na knihovně Qt a tím pádem i na programovacím jazyku C++, je patrné již při pohledu na první screenshoty, kde jsou ukázány dialogy zobrazené při vytváření nového projektu.</p>

<p><div class="rs-tip-major">Poznámka: dříve (před Qt 5) existovala samostatná aplikace nazvaná <i>Qt Designer</i>, která byla určená prakticky výhradně na návrh GUI. Dnes jsou funkce obou nástrojů sjednoceny právě v&nbsp;<i>Qt Creatoru</i>, i když se například ve starší dokumentaci stále setkáme s&nbsp;původním názvem.</div></p>

<a href="https://www.root.cz/obrazek/329330/"><img src="https://i.iinfo.cz/images/619/qtcreator-3-prev.png" class="image-329330" alt="&#160;" width="370" height="264" /></a>
<p><i>Obrázek 3: Vítací obrazovka dnes již poněkud starší verze Qt Creatoru.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Závěrečné zhodnocení</h2>

<p>Nástroj Pygubu nemůžeme považovat za plnohodnotný nástroj typu RAD a ani to není jeho cílem. Jedná se &bdquo;pouze&ldquo; o relativně jednoduchou utilitu a současně i knihovnu pro Python umožňující interaktivní návrh formulářů popř.&nbsp;uceleného grafického uživatelského rozhraní. Zda se jedná o výhodu či nevýhodu již záleží na konkrétním způsobu použití, protože některým vývojářům může vadit, že Pygubu není integrován do nějakého IDE pro Python (Visual Studio Code, Pycharm atd.). Díky tomu, že je GUI založeno na knihovně Tkinter, je výsledná aplikace snadno přenositelná na různé operační systémy, přičemž nový vzhled ovládacích prvků v&nbsp;TCL/Tk do značné míry odstranil jednu z&nbsp;velkých nevýhod této knihovny &ndash; &bdquo;retro&ldquo; styl aplikací založených na Tkinteru resp.&nbsp;přesněji řečeno na kombinaci TCL/Tk.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 a nejnovější stabilní verzi knihovny Pygubu (a Pygubu designer) byly
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th>#</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>example1.ui</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.ui</a></td></tr>
<tr><td>2</td><td>example1.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>example2.ui</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2.ui</a></td></tr>
<tr><td>4</td><td>example2A.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2A.py</a></td></tr>
<tr><td>5</td><td>example2B.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2B.py</a></td></tr>
<tr><td>6</td><td>example2C.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2C.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>example3.ui</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.ui</a></td></tr>
<tr><td>8</td><td>example3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.py</a></td></tr>
</table>

<p></p>

<table>
<tr><th>#</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>application-exit.png</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/application-exit.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/application-exit.png</a></td></tr>
<tr><td>2</td><td>document-new.png</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-new.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-new.png</a></td></tr>
<tr><td>3</td><td>document-open.png</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-open.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-open.png</a></td></tr>
<tr><td>4</td><td>edit-copy.png</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-copy.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-copy.png</a></td></tr>
<tr><td>5</td><td>edit-cut.png</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-cut.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-cut.png</a></td></tr>
<tr><td>6</td><td>edit-delete.png</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-delete.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-delete.png</a></td></tr>
<tr><td>7</td><td>edit-paste.png</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-paste.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-paste.png</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Pygubu na PyPi<br />
<a href="https://pypi.org/project/pygubu/">https://pypi.org/project/pygubu/</a>
</li>

<li>Repositář projektu Pygubu<br />
<a href="https://github.com/alejandroautalan/pygubu">https://github.com/alejandroautalan/pygubu</a>
</li>

<li>pygubu-designer na PyPi<br />
<a href="https://pypi.org/project/pygubu-designer/">https://pypi.org/project/pygubu-designer/</a>
</li>

<li>Repositář projektu pygubu-designer<br />
<a href="https://github.com/alejandroautalan/pygubu-designer">https://github.com/alejandroautalan/pygubu-designer</a>
</li>

<li>Hra Breakout napísaná v&nbsp;Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>Rapid application development<br />
<a href="https://en.wikipedia.org/wiki/Rapid_application_development">https://en.wikipedia.org/wiki/Rapid_application_development</a>
</li>

<li>Non-functional requirement<br />
<a href="https://en.wikipedia.org/wiki/Non-functional_requirement">https://en.wikipedia.org/wiki/Non-functional_requirement</a>
</li>

<li>Graphical user interface builder<br />
<a href="https://en.wikipedia.org/wiki/Graphical_user_interface_builder">https://en.wikipedia.org/wiki/Graphical_user_interface_builder</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

