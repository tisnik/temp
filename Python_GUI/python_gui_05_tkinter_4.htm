<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické uživatelské rozhraní v Pythonu: menu v knihovně Tkinter</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické uživatelské rozhraní v Pythonu: menu v knihovně Tkinter</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o knihovnách pro tvorbu GUI v Pythonu budeme pokračovat v popisu knihovny Tkinter. Zaměříme se na problematiku tvorby menu, která tvoří nedílnou součást většiny složitějších aplikací využívajících grafické uživatelské rozhraní.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Použití nabídek (menu) v&nbsp;knihovně Tkinter</a></p>
<p><a href="#k02">2. Typy nabídek/menu</a></p>
<p><a href="#k03">3. Toplevel menu (menubar)</a></p>
<p><a href="#k04">4. Demonstrační příklad &ndash; vytvoření menubaru</a></p>
<p><a href="#k05">5. Menubar v&nbsp;kombinaci s&nbsp;dalšími widgety</a></p>
<p><a href="#k06">6. Popup menu (kontextové menu)</a></p>
<p><a href="#k07">7. Demonstrační příklad &ndash; vytvoření kontextového menu a navázání jeho zobrazení na tlačítko myši</a></p>
<p><a href="#k08">8. Roletové menu (pull down)</a></p>
<p><a href="#k09">9. Demonstrační příklad &ndash; základní roletové menu</a></p>
<p><a href="#k10">10. Zákaz &bdquo;odtrhovacího&ldquo; menu</a></p>
<p><a href="#k11">11. Změna barev jednotlivých položek menu</a></p>
<p><a href="#k12">12. Podtržení znaků v&nbsp;položkách menu pro jejich rychlý výběr</a></p>
<p><a href="#k13">13. Přidání obrázků (ikon) k&nbsp;položkám menu</a></p>
<p><a href="#k14">14. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k15">15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Použití nabídek (menu) v&nbsp;knihovně Tkinter</h2>

<p>Nabídky (menu) patří mezi nedílnou součást prakticky každého složitějšího
programu s&nbsp;grafickým uživatelským rozhraním. Systém menu zobrazuje
uživateli GUI aplikace jednu nebo více zobrazitelných nabídek, které je možné
vybrat, nastavit nebo přepnout; na rozdíl od dialogů však menu na ploše
obrazovky zabírá jen minimální místo či dokonce žádné místo v&nbsp;případě
kontextových menu. Bývá dobrým zvykem, že menu ve své struktuře obsahuje
<strong>všechny</strong> příkazy a parametry provozované aplikace (ne všechny
příkazy musí být samozřejmě po celou dobu běhu aplikace dostupné, někdy mohou
být &bdquo;zašedlé&ldquo;).</p>

<img src="http://i.iinfo.cz/images/36/editors3-1-1.png" class="image-214372" alt="x" height="384" width="512" />
<p><i>Obrázek 1: Velmi jednoduchý textový procesor nazvaný Typewriter, který
byl naprogramován pro mikropočítače ZX Spectrum, používá asi nejjednodušší
systém menu vůbec (ostatně podle takových nabídek vůbec menu dostala svůj
název).</i></p>

<p>Dnes se bohužel i u profesionálních aplikací stává, že je toto pravidlo
často porušováno a některé příkazy zůstávají skryty pouze v&nbsp;dialozích nebo
konfiguračních souborech. Mezi velké výhody menu patří to, že si uživatel
nemusí pamatovat způsob zadávání parametrů (například pomocí klíčových slov
nebo formulářů) &ndash; vše je snadno dosažitelné právě ze struktury menu. Také
pro programátory je tvorba menu mnohdy jednodušší než návrh dialogových boxů
(což ostatně uvidíme v&nbsp;dalších kapitolách). Na druhou stranu může systém
menu zdržovat v&nbsp;práci zkušenější uživatele.  Z&nbsp;tohoto důvodu je
vhodné menu vhodným způsobem spojit s&nbsp;dalšími prvky grafického
uživatelského rozhraní (tlačítky, výběrovými boxy a především tzv.&nbsp;horkými
klávesami).</p>

<a href="http://i.iinfo.cz/images/64/gui04-11.png"><img src="http://i.iinfo.cz/images/64/gui04-11-prev.png" alt=" " height="231" width="370" /></a>
<p><i>Obrázek 2: Klasická roletová menu se používala už v&nbsp;počítačovém
dávnověku, například i v&nbsp;Microsoft Windows 1.0 spuštěné na emulátoru
počítače PC XT s grafickou kartou CGA.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Typy nabídek/menu</h2>

<p>V&nbsp;některých systémech GUI je menu složeno z&nbsp;jednodušších objektů
(widgetů). Z&nbsp;toho také vyplývá, že se zde menu chová jako <i>kontejner</i>
schopný pojmout další widgety. Existují však i GUI systémy, v&nbsp;nichž je
menu považováno za jeden dynamicky se měnící widget, který je rozdělen do
jednotlivých objektů &ndash; položek menu (to má výhodu v&nbsp;tom, že se pro
menu alokuje méně systémových zdrojů; to však dnes již nebývá kritickým
parametrem jako v&nbsp;dobách, kdy se například každému widgetu přiřazovalo jen
šestnáctibitové číslo, které navíc muselo být pro celý systém unikátní).</p>

<img src="http://i.iinfo.cz/images/590/gui06-8.png" alt=" " height="200" width="319" />
<p><i>Obrázek 3: Grafické uživatelské rozhraní grafického editoru DEGAS Elite
s&nbsp;toplevel menu i s&nbsp;takzvaným screen menu.</i></p>

<p>Příkazy je možné z&nbsp;menu vyvolat pomocí tlačítek
(<strong>push-button/button</strong>). S&nbsp;využitím tlačítek se přímo
spouští nějaká naprogramovaná akce. Dále je možné v&nbsp;menu používat
zaškrtávací/výběrová tlačítka (<strong>check-button/checkbutton</strong>) a
přepínací tlačítka (<strong>radio-button/radiobutton</strong>). V&nbsp;případě,
že je menu hierarchicky strukturováno, je k&nbsp;dispozici ještě tlačítko,
které slouží k&nbsp;přechodu na nižší úroveň. Některé programy, například
původní vývojová prostředí firmy Borland, používaly pouze jednoúrovňové menu,
v&nbsp;dalších programech jsou menu mnohdy složitě strukturovaná a uživatelsky
konfigurovatelná (GIMP apod.).</p>

<p>V&nbsp;průběhu vývoje grafických uživatelských rozhraní se ustálily čtyři
hlavní typy menu:</p>

<ol>
<li>roletové menu (<strong>pull down</strong>)</li>
<li>vynořující se menu (<strong>pop up/popup</strong>) - také nazývané kontextové menu</li>
<li>výběrové menu (<strong>option</strong>)</li>
<li>kaskádové menu (<strong>cascading</strong>)</li>
</ol>

<p>V&nbsp;navazujících kapitolách si jednotlivé typy menu popíšeme, spolu
s&nbsp;ukázkami jejich podpory v&nbsp;knihovně Tkinter.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Toplevel menu (menubar)</h2>

<p>Některé aplikace ze systému menu používají pouze jednoduchou lištu, na které
jsou statická tlačítka popř.&nbsp;se položky menu dynamicky mění. Tento způsob
však ztratil svůj půvab ve chvíli, kdy množství funkcí dostupných z&nbsp;menu
rapidně vzrostlo na desítky a někdy i stovky příkazů. Příkladem aplikací
využívajících pouze lištu menu je například <strong>Lotus 1-2-3</strong> nebo
z&nbsp;ještě starších aplikací textový editor <strong>Cheops Writer</strong>
dostupný pro osmibitové domácí mikropočítače <a
href="http://www.root.cz/clanky/graficke-karty-a-graficke-akceleratory-2">Atari</a>.
Opakem menu zobrazovaného pouze na liště je takzvané <i>screen menu</i>
používané například u starších verzí <strong>AutoCADu</strong> &ndash; toto
menu se později jako velká &bdquo;novinka&ldquo; objevilo i u Microsoft Office.
V&nbsp;knihovně <i>Tkinter</i> se menu s&nbsp;jedinou lištou (toplevel menu)
vytváří velmi snadno, jak je ostatně patrné z&nbsp;prvního demonstračního
příkladu popsaného <a href="#k04">v&nbsp;navazující kapitole</a>.</p>

<img src="http://i.iinfo.cz/images/173/editors-3-2-24.png" class="image-214404" alt="xxx" height="480" width="672" />
<p><i>Obrázek 4: Textový procesor Cheops'Writer: dvouřádkové menu hlavní menu
(toplevel menu) textového procesoru navržené ve stylu Lotus 1–2–3.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Demonstrační příklad &ndash; vytvoření menubaru</h2>

<p>Dnešní první demonstrační příklad je velmi jednoduchý, protože je v&nbsp;něm
ukázán způsob vytvoření &bdquo;toplevel&ldquo; menu (neboli menubaru)
obsahujícího pouze dvě příkazová tlačítka. Po stisku prvního tlačítka se zavolá
uživatelsky definovaná funkce <strong>test</strong>, po stisku tlačítka druhého
pak metoda <strong>root.quit()</strong>, která ukončí běh aplikace:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
menubar.add_command(label="Test", command=test)
menubar.add_command(label="Quit", command=root.quit)
&nbsp;
root.config(menu=menubar)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/465/tkinter4-1.png" class="image-299729" alt="&#160;" width="202" height="257" />
<p><i>Obrázek 5: První demonstrační příklad.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Menubar v&nbsp;kombinaci s&nbsp;dalšími widgety</h2>

<p>V&nbsp;dalším příkladu je ukázáno, že menubar je možné bez problému
kombinovat s&nbsp;dalšími widgety. Samotný menubar je přitom jakoby vyjmut
z&nbsp;mřížky, do níž se vkládají ostatní widgety tvořící GUI aplikace, takže
widgety se mohou vkládat i do prvního řádku mřížky, který ve skutečnosti leží
až pod menubarem:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
menubar.add_command(label="Test", command=test)
menubar.add_command(label="Quit", command=root.quit)
&nbsp;
root.config(menu=menubar)
&nbsp;
style = ttk.Style()
style.theme_use("alt")
style.configure('Red.TButton', background='#ff8080')
&nbsp;
radio_var = tkinter.StringVar()
radio_var.set("Python")
&nbsp;
langs = ("Assembler", "Basic", "Brainfuck", "C", "Python")
&nbsp;
f1 = ttk.LabelFrame(root, text="Languages")
f2 = ttk.LabelFrame(root, text="Commands")
&nbsp;
radio_buttons = (ttk.Radiobutton(f1, text=lang, value=lang,
                                 variable=radio_var)
                 for lang in langs)
&nbsp;
showButton = ttk.Button(f2, text="Show var",
                        command=lambda: print(radio_var.get()))
&nbsp;
quitButton = ttk.Button(f2, text="Exit", style='Red.TButton',
                        command=root.quit)
&nbsp;
for i, radio_button in enumerate(radio_buttons):
    radio_button.grid(column=1, row=i, sticky="w")
&nbsp;
showButton.grid(column=1, row=1, sticky="we", padx=6, pady=6)
quitButton.grid(column=1, row=2, sticky="we", padx=6, pady=6)
&nbsp;
f1.grid(column=1, row=1, sticky="ne", padx=6, pady=6)
f2.grid(column=2, row=1, sticky="ne", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/465/tkinter4-2.png" class="image-299730" alt="&#160;" width="230" height="193" />
<p><i>Obrázek 6: Druhý demonstrační příklad.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Popup menu (kontextové menu)</h2>

<p>Vynořující se menu (<strong>pop up/popup</strong>), která jsou někdy
nazývána také kontextová menu, jsou charakteristická tím, že se mohou zobrazit
(vynořit) v&nbsp;kterémkoli místě okna aplikace (netypický zástupce
vynořujícího se menu byl použit například ve známém textovém editoru
<strong>T602</strong>, zde se však menu vynořovalo vždy na stejném místě).
Často se podle místa také mění příkazy dostupné z&nbsp;menu. Toto menu je
výhodné v&nbsp;tom, že spoří místo v&nbsp;okně a navíc se při ovládání aplikace
myší nemusí při vyvolání menu dojíždět až na lištu, jak tomu je v&nbsp;případě
roletových menu. Rovněž dynamická (kontextová) změna příkazů v&nbsp;menu je
velmi výhodná, protože uživatel dostane k dispozici pouze ty příkazy, které
mají pro vybraný objekt smysl. Jediná nevýhoda tohoto typu menu spočívá
v&nbsp;tom, že uživatel musí o existenci menu předem vědět nebo
experimentovat.</p>

<p>V&nbsp;knihovně Tkinter se s&nbsp;kontextovými menu pracuje poměrně
jednoduše (význam parametru <strong>tearoff</strong> si vysvětlíme
v&nbsp;dalším textu):</p>

<pre>
popup = tkinter.Menu(root, tearoff=0)
&nbsp;
popup.add_command(label="Open")
popup.add_command(label="Save")
popup.add_separator()
popup.add_command(label="Exit", command=root.quit)
</pre>

<p>Nesmíme ovšem zapomenout na navázání nějaké události k&nbsp;vyvolání
(zobrazení) tohoto typu menu. Typicky se pro vyvolání tohoto menu používá pravé
tlačítko myši, jak je ostatně naznačeno v&nbsp;následujícím úryvku kódu
(připomeňme si, že tlačítka myši jsou v&nbsp;knihovně Tkinter číslována trošku
zmateně, takže pravé tlačítko má číslo 3):</p>

<pre>
root.bind("&lt;Button-3&gt;", on_popup)
</pre>

<p>Výše uvedený zápis zavolá funkci <strong>on_popup</strong> ve chvíli, kdy je
na ploše hlavního okna stisknuto pravé tlačítko myši. Samotná funkce
<strong>on_popup</strong> vypadá následovně:</p>

<pre>
def on_popup(event):
    popup.post(event.x_root-5, event.y_root-5)
</pre>

<p>Při umístění menu pomocí metody <strong>popup.post()</strong> je možné
použít speciální atributy <strong>x_root</strong> a <strong>y_root</strong>
objektu <strong>event</strong>, které udávají absolutní pozici kurzoru
myši.</p>

<p>Poznámka: od pozice kurzoru odečítám hodnotu 5 pixelů, protože
v&nbsp;takovém případě bude kurzor automaticky umístěn na první položku menu
(resp.&nbsp;přesněji řečeno bude první položka menu posunuta tak, aby byla pod
kurzorem myši).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Demonstrační příklad &ndash; vytvoření kontextového menu a navázání jeho zobrazení na tlačítko myši</h2>

<p>Všechny důležité funkce nutné pro vytvoření kontextového menu jsme si již
popsali <a href="#k06">v&nbsp;předchozí kapitole</a>, takže se nyní podívejme
na to, jak je možné kontextové menu přidat do aplikace s&nbsp;jediným (prozatím
prázdným) oknem a jak se zobrazení tohoto menu naváže na pravé tlačítko
myši:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
popup = tkinter.Menu(root, tearoff=0)
&nbsp;
popup.add_command(label="Open")
popup.add_command(label="Save")
popup.add_separator()
popup.add_command(label="Exit", command=root.quit)
&nbsp;
&nbsp;
def on_popup(event):
    popup.post(event.x_root-5, event.y_root-5)
&nbsp;
&nbsp;
root.bind("&lt;Button-3&gt;", on_popup)
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/465/tkinter4-3.png" class="image-299731" alt="&#160;" width="202" height="227" />
<p><i>Obrázek 7: Kontextové menu ve třetím demonstračním příkladu.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Roletové menu (pull down)</h2>

<p>Roletové menu (<strong>pull down</strong>) patří mezi základní typy menu a
je proto dostupné prakticky ze všech aplikací využívajících grafické
uživatelské rozhraní. Z&nbsp;celého menu je bez jeho aktivace viditelná pouze
nejvyšší úroveň, která se nachází na takzvané liště. Standardně bývá lišta
umístěna v&nbsp;horní části okna aplikace, i když samozřejmě existují různé
výjimky. Mezi výhody tohoto typu menu patří skutečnost, že uživatel vždy vidí
nejvyšší úroveň příkazů a nemusí tedy složitě pátrat nebo slepě zkoušet, ve
kterém místě se menu aktivuje (to je případ mnohých multimediálních přehrávačů,
u kterých autoři preferují &bdquo;originalitu&ldquo; namísto použitelnosti :-).
Další výhoda roletového menu spočívá ve stálé viditelnosti klíčů (horkých
kláves) pro příkazy na základní úrovni (pokud tedy není viditelnost klíčů
zakázána, což se kupodivu také poměrně často děje).</p>

<img src="https://i.iinfo.cz/images/465/tkinter4-4.png" class="image-299732" alt="&#160;" width="202" height="257" />
<p><i>Obrázek 8: Roletové menu zobrazené čtvrtým příkladem.</i></p>

<p>V&nbsp;knihovně <i>Tkinter</i> je roletové menu vytvořeno jednoduše přidáním
objektu typu <strong>Menu</strong> do toplevel menu (což již známe) metodou
<strong>add_cascade</strong>:</p>

<pre>
menubar = tkinter.Menu(root)
&nbsp;
filemenu = tkinter.Menu(menubar)
editmenu = tkinter.Menu(menubar)
helpmenu = tkinter.Menu(menubar)
&nbsp;
menubar.add_cascade(label="File", menu=filemenu)
menubar.add_cascade(label="Edit", menu=editmenu)
menubar.add_cascade(label="Help", menu=helpmenu)
</pre>

<img src="https://i.iinfo.cz/images/465/tkinter4-5.png" class="image-299733" alt="&#160;" width="206" height="259" />
<p><i>Obrázek 9: Roletové menu bez &bdquo;odtrhovací&ldquo; části.</i></p>

<p>Do jednotlivých roletových menu se přidávají položky metodami
<strong>add_command</strong>, <strong>add_cascade</strong>,
<strong>add_checkbutton</strong> či <strong>add_radiobutton</strong>. Taktéž
lze přidat oddělovač metodou <strong>add_cascade</strong>.</p>

<img src="https://i.iinfo.cz/images/465/tkinter4-6.png" class="image-299734" alt="&#160;" width="155" height="209" />
<p><i>Obrázek 10: Roletové menu bez &bdquo;odtrhovací&ldquo; části (klasický
styl Windows XP).</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Demonstrační příklad &ndash; základní roletové menu</h2>

<p>V&nbsp;následujícím demonstračním příkladu jsou vytvořena tři roletová menu,
která jsou pod jmény File, Edit a Help přidána do toplevel menu. Prozatím
nepoužíváme žádnou speciální konfiguraci, takže jsou menu zobrazena
s&nbsp;použitím výchozího stylu, bez horkých klíčů, ikon atd.:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
filemenu = tkinter.Menu(menubar)
filemenu.add_command(label="Open")
filemenu.add_command(label="Save")
filemenu.add_separator()
filemenu.add_command(label="Exit", command=root.quit)
menubar.add_cascade(label="File", menu=filemenu)
&nbsp;
editmenu = tkinter.Menu(menubar)
editmenu.add_command(label="Undo")
editmenu.add_separator()
editmenu.add_command(label="Cut")
editmenu.add_command(label="Copy")
editmenu.add_command(label="Paste")
editmenu.add_command(label="Delete")
editmenu.add_separator()
editmenu.add_command(label="Select All")
menubar.add_cascade(label="Edit", menu=editmenu)
&nbsp;
helpmenu = tkinter.Menu(menubar)
helpmenu.add_command(label="About", command=test)
menubar.add_cascade(label="Help", menu=helpmenu)
&nbsp;
root.config(menu=menubar)
&nbsp;
root.mainloop()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zákaz &bdquo;odtrhovacího&ldquo; menu</h2>

<p>Pravděpodobně jste si v&nbsp;předchozích demonstračních příkladech povšimli,
že roletová menu byla &bdquo;odtrhovací&ldquo;, tj.&nbsp;výběrem čárkované čáry
zobrazené ve vrchní části menu se menu může odtrhnout od svého okna a vytvořit
tak okno samostatné. To je velmi výhodné, protože velkou část grafického
uživatelského rozhraní je možné nahradit právě těmito typy menu a podle
preferencí uživatele mohou být příkazy buď stále viditelné, nebo skryté
v&nbsp;menu. Ze známých aplikací využívá tuto možnost například
<strong>Gvim</strong> (pouze na některých GUI systémech), rastrový grafický
editor <strong>GIMP</strong> a taktéž další rastrový grafický editor
<i>mtPaint</i>.</p>

<p>Na druhou stranu nejsou uživatelé na podobné chování zvyklí, takže mohou
požadovat &bdquo;obyčejná menu&ldquo;. Toho lze snadno dosáhnout. Buď se
globálně (pro dané okno či pro celou hierarchii oken) nastaví konfigurační
volba <strong>*tearOff</strong> na False:</p>

<pre>
root.option_add('*tearOff', False)
</pre>

<p>Nebo se při vytváření každého menu explicitně nastaví parametr
<strong>tearOff</strong> na nulu:</p>

<pre>
filemenu = tkinter.Menu(menubar, tearoff=0)
helpmenu = tkinter.Menu(menubar, tearoff=0)
...
...
...
</pre>

<img src="https://i.iinfo.cz/images/465/tkinter4-7.png" class="image-299735" alt="&#160;" width="202" height="257" />
<p><i>Obrázek 11: Menu bez odtrhovací části.</i></p>

<p>V&nbsp;dalším příkladu je &bdquo;odtrhování&ldquo; všech menu zakázáno
globálně prvním zmíněným způsobem:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
<strong>root.option_add('*tearOff', False)</strong>
&nbsp;
filemenu = tkinter.Menu(menubar)
filemenu.add_command(label="Open")
filemenu.add_command(label="Save")
filemenu.add_separator()
filemenu.add_command(label="Exit", command=root.quit)
menubar.add_cascade(label="File", menu=filemenu)
&nbsp;
editmenu = tkinter.Menu(menubar)
editmenu.add_command(label="Undo")
editmenu.add_separator()
editmenu.add_command(label="Cut")
editmenu.add_command(label="Copy")
editmenu.add_command(label="Paste")
editmenu.add_command(label="Delete")
editmenu.add_separator()
editmenu.add_command(label="Select All")
menubar.add_cascade(label="Edit", menu=editmenu)
&nbsp;
helpmenu = tkinter.Menu(menubar)
helpmenu.add_command(label="About", command=test)
menubar.add_cascade(label="Help", menu=helpmenu)
&nbsp;
root.config(menu=menubar)
&nbsp;
root.mainloop()
</pre>

<p>V&nbsp;příkladu druhém je menu <strong>File</strong> a <strong>Help</strong>
&bdquo;normální&ldquo;, zatímco menu <strong>Edit</strong> je odtrhovací:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
filemenu = tkinter.Menu(menubar, <strong>tearoff=0</strong>)
filemenu.add_command(label="Open")
filemenu.add_command(label="Save")
filemenu.add_separator()
filemenu.add_command(label="Exit", command=root.quit)
menubar.add_cascade(label="File", menu=filemenu)
&nbsp;
editmenu = tkinter.Menu(menubar)
editmenu.add_command(label="Undo")
editmenu.add_separator()
editmenu.add_command(label="Cut")
editmenu.add_command(label="Copy")
editmenu.add_command(label="Paste")
editmenu.add_command(label="Delete")
editmenu.add_separator()
editmenu.add_command(label="Select All")
menubar.add_cascade(label="Edit", menu=editmenu)
&nbsp;
helpmenu = tkinter.Menu(menubar, <strong>tearoff=0</strong>)
helpmenu.add_command(label="About", command=test)
menubar.add_cascade(label="Help", menu=helpmenu)
&nbsp;
root.config(menu=menubar)
&nbsp;
root.mainloop()
</pre>

<p>Poznámka: povšimněte si použití metody <strong>add_separator</strong> pro
vizuální oddělení jednotlivých položek menu.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Změna barev jednotlivých položek menu</h2>

<p>Podobně jako u většiny standardních widgetů lze i u položek menu měnit barvy
textu či barvy pozadí. Na dalším demonstračním příkladu je ukázáno, jakým
způsobem je možné vytvořit různobarevné položky. Položky však nejsou vytvářeny
otrocky jedna po druhé, ale je použita n-tice nazvaná <strong>colors</strong>,
která se zpracovává s&nbsp;využitím <a
href="http://diveintopython3.py.cz/comprehensions.html">generátorové notace
seznamu</a>:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
filemenu = tkinter.Menu(menubar, tearoff=0)
filemenu.add_command(label="Open")
filemenu.add_command(label="Save")
filemenu.add_separator()
filemenu.add_command(label="Exit", command=root.quit)
menubar.add_cascade(label="File", menu=filemenu)
&nbsp;
editmenu = tkinter.Menu(menubar, tearoff=0)
editmenu.add_command(label="Undo")
editmenu.add_separator()
editmenu.add_command(label="Cut")
editmenu.add_command(label="Copy")
editmenu.add_command(label="Paste")
editmenu.add_command(label="Delete")
editmenu.add_separator()
editmenu.add_command(label="Select All")
menubar.add_cascade(label="Edit", menu=editmenu)
&nbsp;
colors = ("white", "yellow", "orange", "red", "magenta",
          "blue", "cyan", "green")
colormenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
for color in colors:
    colormenu.add_command(label=color, background=color)
&nbsp;
menubar.add_cascade(label="Colors", menu=colormenu)
&nbsp;
helpmenu = tkinter.Menu(menubar, tearoff=0)
helpmenu.add_command(label="About", command=test)
menubar.add_cascade(label="Help", menu=helpmenu)
&nbsp;
root.config(menu=menubar)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/465/tkinter4-8.png" class="image-299736" alt="&#160;" width="187" height="202" />
<p><i>Obrázek 12: Výběr barev v&nbsp;minoritním OS.</i></p>

<img src="https://i.iinfo.cz/images/465/tkinter4-9.png" class="image-299737" alt="&#160;" width="281" height="261" />
<p><i>Obrázek 13: Výběr barev v&nbsp;Linuxu.</i></p>

<img src="https://i.iinfo.cz/images/465/tkinter4-10.png" class="image-299738" alt="&#160;" width="202" height="257" />
<p><i>Obrázek 14: Opět výběr barev v&nbsp;Linuxu.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Podtržení znaků v&nbsp;položkách menu pro jejich rychlý výběr</h2>

<p>Jednotlivé položky menu je možné modifikovat pomocí několika příkazů.
Pravděpodobně nejpoužívanější modifikací je přiřazení <i>horkých klíčů</i>
jednotlivým položkám. To se provádí pomocí volby <strong>underline</strong>, za
kterou následuje index znaku, který má být podtržen. První znak má index rovný
nule. V&nbsp;některých GUI systémech je horký klíč specifikován přímo
v&nbsp;textu jednotlivých položek pomocí speciálního znaku (například
ampersandu). Tuto funkcionalitu je do knihovny <i>Tkinter</i> také možné
doplnit pomocí jednoduché procedury, která bude mít jako své parametry
identifikátor menu a řetězec se speciálním znakem.</p>

<p>Poznámka: horké klíče (hotkeys) se odlišují od klávesových zkratek, protože
je jejich použití pouze lokální v&nbsp;rámci jediného menu. Pro větší zmatky se
však tento termín někdy používá i v&nbsp;kontextu globálně použitelné klávesové
zkratky.</p>

<img src="https://i.iinfo.cz/images/465/tkinter4-11.png" class="image-299739" alt="&#160;" width="202" height="258" />
<p><i>Obrázek 15: Menu obsahuje položky s&nbsp;horkými klíči.</i></p>

<p>Použití indexu je samozřejmě univerzálnější, takže se podívejme, jak je
realizováno:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
filemenu = tkinter.Menu(menubar, tearoff=0)
filemenu.add_command(label="Open", underline=0)
filemenu.add_command(label="Save", underline=0)
filemenu.add_separator()
filemenu.add_command(label="Exit", underline=1, command=root.quit)
menubar.add_cascade(label="File", menu=filemenu, underline=0)
&nbsp;
editmenu = tkinter.Menu(menubar, tearoff=0)
editmenu.add_command(label="Undo", underline=0)
editmenu.add_separator()
editmenu.add_command(label="Cut", underline=2)
editmenu.add_command(label="Copy", underline=0)
editmenu.add_command(label="Paste", underline=0)
editmenu.add_command(label="Delete", underline=2)
editmenu.add_separator()
editmenu.add_command(label="Select All", underline=7)
menubar.add_cascade(label="Edit", menu=editmenu, underline=0)
&nbsp;
colors = ("white", "yellow", "orange", "red", "magenta",
          "blue", "cyan", "green")
colormenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
for color in colors:
    colormenu.add_command(label=color, background=color)
&nbsp;
menubar.add_cascade(label="Colors", menu=colormenu, underline=0)
&nbsp;
helpmenu = tkinter.Menu(menubar, tearoff=0)
helpmenu.add_command(label="About", command=test, underline=0)
menubar.add_cascade(label="Help", menu=helpmenu, underline=0)
&nbsp;
root.config(menu=menubar)
&nbsp;
root.mainloop()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Přidání obrázků (ikon) k&nbsp;položkám menu</h2>

<p>K&nbsp;jednotlivým položkám menu je možné přidat i ikony, tedy rastrové
obrázky.  Obrázky je možné vytvořit programově, mnohem častěji se však
nahrávají z externích souborů. V&nbsp; následujícím demonstračním příkladu je
ukázáno, jakým způsobem je možné rastrové obrázky nahrát ze souboru. Základem
je použití konstruktoru:</p>

<pre>
image_object = tkinter.PhotoImage(file="jméno_souboru_s_ikonou")
</pre>

<p>Tento konstruktor dokáže načíst obrázek v&nbsp;některém z&nbsp;podporovaných
formátů, mezi něž patří především GIF (nikoli však již PNG). U obrázků je nutné
si dát pozor na to, aby objekt nebyl automaticky odstraněn správcem paměti,
který nedokáže detekovat existenci reference v&nbsp;knihovně Tk. Z&nbsp;tohoto
důvodu budou všechny obrázky (prozatím) načteny do globálních proměnných:</p>

<pre>
open_image = tkinter.PhotoImage(file="icons/document-open.gif")
save_image = tkinter.PhotoImage(file="icons/document-save.gif")
exit_image = tkinter.PhotoImage(file="icons/application-exit.gif")
undo_image = tkinter.PhotoImage(file="icons/edit-undo.gif")
cut_image = tkinter.PhotoImage(file="icons/edit-cut.gif")
copy_image = tkinter.PhotoImage(file="icons/edit-copy.gif")
paste_image = tkinter.PhotoImage(file="icons/edit-paste.gif")
delete_image = tkinter.PhotoImage(file="icons/edit-delete.gif")
select_all_image = tkinter.PhotoImage(file="icons/edit-select-all.gif")
</pre>

<p>Dále je možné přiřadit obrázek k&nbsp;položce menu. Parametr
<strong>compound</strong> je důležitý, jinak bude obrázek zobrazen namísto
nápisu, zatímco my potřebujeme mít zobrazen jak obrázek, tak i nápis
současně:</p>

<pre>
filemenu.add_command(label="Open", underline=0, image=open_image,
                     compound="left")
</pre>

<img src="https://i.iinfo.cz/images/465/tkinter4-12.png" class="image-299740" alt="&#160;" width="202" height="257" />
<p><i>Obrázek 16: Menu s&nbsp;ikonami.</i></p>

<p>Poznámka: pokud máte ikony uložené ve formátu PNG, použijte pro konverzi
knihovnu PIL (Python Imaging Library).</p>

<p>Úplný zdrojový kód vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
open_image = tkinter.PhotoImage(file="icons/document-open.gif")
save_image = tkinter.PhotoImage(file="icons/document-save.gif")
exit_image = tkinter.PhotoImage(file="icons/application-exit.gif")
undo_image = tkinter.PhotoImage(file="icons/edit-undo.gif")
cut_image = tkinter.PhotoImage(file="icons/edit-cut.gif")
copy_image = tkinter.PhotoImage(file="icons/edit-copy.gif")
paste_image = tkinter.PhotoImage(file="icons/edit-paste.gif")
delete_image = tkinter.PhotoImage(file="icons/edit-delete.gif")
select_all_image = tkinter.PhotoImage(file="icons/edit-select-all.gif")
&nbsp;
filemenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
filemenu.add_command(label="Open", underline=0, image=open_image,
                     compound="left")
&nbsp;
filemenu.add_command(label="Save", underline=0, image=save_image,
                     compound="left")
&nbsp;
filemenu.add_separator()
&nbsp;
filemenu.add_command(label="Exit", underline=1, image=exit_image,
                     compound="left", command=root.quit)
&nbsp;
menubar.add_cascade(label="File", menu=filemenu, underline=0)
&nbsp;
&nbsp;
editmenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
editmenu.add_command(label="Undo", underline=0, image=undo_image,
                     compound="left")
&nbsp;
editmenu.add_separator()
&nbsp;
editmenu.add_command(label="Cut", underline=2, image=cut_image,
                     compound="left")
&nbsp;
editmenu.add_command(label="Copy", underline=0, image=copy_image,
                     compound="left")
&nbsp;
editmenu.add_command(label="Paste", underline=0, image=paste_image,
                     compound="left")
&nbsp;
editmenu.add_command(label="Delete", underline=2, image=delete_image,
                     compound="left")
&nbsp;
editmenu.add_separator()
&nbsp;
editmenu.add_command(label="Select All", underline=7, image=select_all_image,
                     compound="left")
&nbsp;
menubar.add_cascade(label="Edit", menu=editmenu, underline=0)
&nbsp;
&nbsp;
colors = ("white", "yellow", "orange", "red", "magenta",
          "blue", "cyan", "green")
colormenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
for color in colors:
    colormenu.add_command(label=color, background=color)
&nbsp;
menubar.add_cascade(label="Colors", menu=colormenu, underline=0)
&nbsp;
helpmenu = tkinter.Menu(menubar, tearoff=0)
helpmenu.add_command(label="About", command=test, underline=0)
menubar.add_cascade(label="Help", menu=helpmenu, underline=0)
&nbsp;
root.config(menu=menubar)
&nbsp;
root.mainloop()
</pre>

<p>Program si samozřejmě můžeme značně zjednodušit, například tak, že se
obrázky načtou v&nbsp;jediné smyčce do slovníku:</p>

<pre>
image_names = [
    "document-open",
    "document-save",
    "application-exit",
    "edit-undo",
    "edit-cut",
    "edit-copy",
    "edit-paste",
    "edit-delete",
    "edit-select-all"]
&nbsp;
images = {}
for image_name in image_names:
    images[image_name] = tkinter.PhotoImage(file="icons/%s.gif" % image_name)
</pre>

<p>Následně je možné si obrázky jednoduše ze slovníku
&bdquo;vytáhnout&ldquo;:</p>

<pre>
filemenu.add_command(label="Open", underline=0, image=images["document-open"],
                     compound="left")
</pre>

<p>Úplný zdrojový kód vypadá takto:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
def test():
    print("Test!")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
image_names = [
    "document-open",
    "document-save",
    "application-exit",
    "edit-undo",
    "edit-cut",
    "edit-copy",
    "edit-paste",
    "edit-delete",
    "edit-select-all"]
&nbsp;
images = {}
for image_name in image_names:
    images[image_name] = tkinter.PhotoImage(file="icons/%s.gif" % image_name)
&nbsp;
filemenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
filemenu.add_command(label="Open", underline=0, image=images["document-open"],
                     compound="left")
&nbsp;
filemenu.add_command(label="Save", underline=0, image=images["document-save"],
                     compound="left")
&nbsp;
filemenu.add_separator()
&nbsp;
filemenu.add_command(label="Exit", underline=1,
                     image=images["application-exit"], compound="left",
                     command=root.quit)
&nbsp;
menubar.add_cascade(label="File", menu=filemenu, underline=0)
&nbsp;
&nbsp;
editmenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
editmenu.add_command(label="Undo", underline=0, image=images["edit-undo"],
                     compound="left")
&nbsp;
editmenu.add_separator()
&nbsp;
editmenu.add_command(label="Cut", underline=2, image=images["edit-cut"],
                     compound="left")
&nbsp;
editmenu.add_command(label="Copy", underline=0, image=images["edit-copy"],
                     compound="left")
&nbsp;
editmenu.add_command(label="Paste", underline=0, image=images["edit-paste"],
                     compound="left")
&nbsp;
editmenu.add_command(label="Delete", underline=2, image=images["edit-delete"],
                     compound="left")
&nbsp;
editmenu.add_separator()
&nbsp;
editmenu.add_command(label="Select All", underline=7,
                     image=images["edit-select-all"], compound="left")
&nbsp;
menubar.add_cascade(label="Edit", menu=editmenu, underline=0)
&nbsp;
&nbsp;
colors = ("white", "yellow", "orange", "red", "magenta",
          "blue", "cyan", "green")
colormenu = tkinter.Menu(menubar, tearoff=0)
&nbsp;
for color in colors:
    colormenu.add_command(label=color, background=color)
&nbsp;
menubar.add_cascade(label="Colors", menu=colormenu, underline=0)
&nbsp;
helpmenu = tkinter.Menu(menubar, tearoff=0)
helpmenu.add_command(label="About", command=test, underline=0)
menubar.add_cascade(label="Help", menu=helpmenu, underline=0)
&nbsp;
root.config(menu=menubar)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/465/tkinter4-13.png" class="image-299741" alt="&#160;" width="202" height="257" />
<p><i>Obrázek 17: Menu s&nbsp;ikonami.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naleznete pod
následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>45_toplevel_menu.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/45_toplevel_menu.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/45_toplevel_menu.py</a></td></tr>
<tr><td>46_toplevel_menu_other_gui.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/46_toplevel_menu_other_gui.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/46_toplevel_menu_other_gui.py</a></td></tr>
<tr><td>47_popup_menu.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/47_popup_menu.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/47_popup_menu.py</a></td></tr>
<tr><td>48_pulldown_menu.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/48_pulldown_menu.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/48_pulldown_menu.py</a></td></tr>
<tr><td>49_pulldown_menu_no_tearoff.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/49_pulldown_menu_no_tearoff.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/49_pulldown_menu_no_tearoff.py</a></td></tr>
<tr><td>50_pulldown_menu_no_tearoff.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/50_pulldown_menu_no_tearoff.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/50_pulldown_menu_no_tearoff.py</a></td></tr>
<tr><td>51_menu_colors.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/51_menu_colors.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/51_menu_colors.py</a></td></tr>
<tr><td>52_menu_keys.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/52_menu_keys.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/52_menu_keys.py</a></td></tr>
<tr><td>53_menu_images.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/53_menu_images.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/53_menu_images.py</a></td></tr>
<tr><td>54_menu_images2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/54_menu_images2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/54_menu_images2.py</a></td></tr>
</table>

<p>Použité ikony naleznete na adrese <a
href="https://github.com/tisnik/presentations/tree/master/Python_GUI/Tkinter/icons">https://github.com/tisnik/presentations/tree/master/Python_GUI/Tkinter/icons</a>
i s&nbsp;příslušnou licencí k&nbsp;použití.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

