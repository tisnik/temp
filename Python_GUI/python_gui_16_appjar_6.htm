<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu: widgety pro zobrazení grafických informací nabízené knihovnou appJar</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu: widgety pro zobrazení grafických informací nabízené knihovnou appJar</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;šestém a současně i předposledním článku o knihovně appJar určené pro jednoduchou tvorbu aplikací s&nbsp;grafickým uživatelským rozhraním v&nbsp;Pythonu se budeme věnovat popisu těch ovládacích prvků, které lze použít pro zobrazení grafických informací.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Ovládací prvky a další prostředky určené pro zobrazení grafických informací</a></p>
<p><a href="#k02">2. Ovládací prvek typu <strong>Image</strong></a></p>
<p><a href="#k03">3. Malá odbočka &ndash; programové vytvoření procedurální textury s&nbsp;obrázkem</a></p>
<p><a href="#k04">4. První demonstrační příklad &ndash; moaré jako obrázek ve stupních šedi</a></p>
<p><a href="#k05">5. Druhý demonstrační příklad &ndash; aplikace barvové palety</a></p>
<p><a href="#k06">6. Použití ovládacího prvku typu <strong>Image</strong></a></p>
<p><a href="#k07">7. Rastrový obrázek uložený přímo ve zdrojovém kódu aplikace</a></p>
<p><a href="#k08">8. Postup při uložení obrázku do zdrojového kódu</a></p>
<p><a href="#k09">9. Použití ovládacího prvku typu <strong>Image</strong> a obrázku ze zdrojového kódu</a></p>
<p><a href="#k10">10. Ovládací prvek zobrazující koláčový diagram</a></p>
<p><a href="#k11">11. Zobrazení mřížky LED (emulace počítače Micro Bit)</a></p>
<p><a href="#k12">12. Programová změna světlosti jednotlivých LED</a></p>
<p><a href="#k13">13. Použití prvku <strong>Canvas</strong> z&nbsp;Tkinteru</a></p>
<p><a href="#k14">14. Ukázka použití <strong>Canvasu</strong></a></p>
<p><a href="#k15">15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Ovládací prvky a další prostředky určené pro zobrazení grafických informací</h2>

<p>Knihovna <i>appJar</i> vývojářům nabízí pouze velmi omezené množství
ovládacích prvků, které je možné použít pro zobrazení grafických informací, ať
již se to týká rastrové grafiky či grafiky vektorové. Existují vlastně pouze
tři widgety, které práci s&nbsp;grafikou do jisté míry podporují. Prvním
z&nbsp;těchto ovládacích prvků je widget nazvaný <strong>Image</strong>, jenž
dokáže na ploše okna či dialogu zobrazit rastrový obrázek, který je načtený
z&nbsp;externího souboru nebo ho je alternativně možné načíst z&nbsp;pole bajtů
či znaků, které obsahují zakódovaná data obrázku. Dále tento widget dokáže
reagovat na stisk tlačítka myši. Druhý widget je již specializovaný, protože
slouží pro zobrazení koláčového grafu, ovšem jen s&nbsp;omezenými možnostmi
nastavení parametrů zobrazení.</p>

<p>Třetí ovládací prvek, který do jisté míry podporuje zobrazení grafických
informací, je widget simulující matici LED na jednodeskovém mikropočítači
Micro Bit. Tato matice sice má &bdquo;rozlišení&ldquo; pouze 5&times;5 bodů
(pixelů), ovšem kupodivu právě tento widget je mezi dětmi oblíbený (což je
vlastně na první pohled dost paradoxní, zvláště když vezmeme v&nbsp;úvahu
možnosti dnešních počítačů a jejich GPU).</p>

<p>Pokud tyto možnosti nabízené přímo knihovnou <i>appJar</i> nebudou
dostačující (a to pro složitější aplikace zcela jistě nebudou), je možné využít
prostředky Tkinteru, tj.&nbsp;především prvek <i>Canvas</i>. I s&nbsp;touto
možností se seznámíme, protože díky Tkinteru a Canvasu je možné skloubit hned
dvě užitečné výukové pomůcky &ndash; <i>appJar</i> pro GUI a modul
<i>turtle</i> pro želví grafiku.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Ovládací prvek typu <strong>Image</strong></h2>

<p>Prvním ovládacím prvkem, který si v&nbsp;dnešním článku popíšeme, je widget
nazvaný jednoduše <strong>Image</strong>. Víme již, že tento widget dokáže na
plochu okna nebo dialogu umístit rastrový obrázek, který může být načtený
z&nbsp;externích souborů typu <a
href="https://www.root.cz/clanky/graficke-formaty-ve-znameni-unixu/#k07">PPM</a>
(<i>Portable PixelMap</i>), <a
href="https://www.root.cz/serialy/graficky-format-gif/">GIF</a> (<i>Graphics
Interchange Format</i>), <a
href="https://www.root.cz/clanky/png-is-not-gif/">PNG</a> (<i>Portable Network
Graphics</i>) popř.&nbsp;<a
href="https://www.root.cz/clanky/jpeg-kral-rastrovych-grafickych-formatu/">JPEG</a>.</p>

<p>Ovšem musíme si dát pozor na to, že pouze první dva formáty jsou přímo
podporovány knihovnou <i>TkInter</i>, nad níž je <i>appJar</i> postavena. To
mj.&nbsp;znamená, že se při načítání obrázků uložených ve formátech PNG a JPEG
musí obrázek dekódovat, a to knihovnami naprogramovanými přímo v&nbsp;Pythonu
(tyto knihovny jsou součástí instalace <i>appJar</i>). To s&nbsp;sebou přináší
výhodu snadné přenositelnosti (není nutné přistupovat k&nbsp;nativním
knihovnám, řešit nekompatibility mezi knihovnami apod.), na druhou stranu je
však dekódování rastrových obrázků dosti pomalé, což se negativně projeví u
rozměrnějších obrázků a/nebo u aplikací spouštěných například na jednodeskových
mikropočítačích Raspberry Pi a podobně &bdquo;výkonných&ldquo; strojích.</p>

<p>Poznámka: alternativně je možné pro převod obrázků z&nbsp;prakticky
libovolného formátu do GIFu použít knihovny <i>PIL</i> neboli (<a
href="https://pypi.python.org/pypi/PIL">Python Imaging Library</a>) či <a
href="https://pypi.python.org/pypi/Pillow/4.2.1">Pillow</a> (fork dnes již
nevyvíjené knihovny PIL), to však již vyžaduje zásahy do konfigurace systému,
na němž má být vyvíjená aplikace provozována.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Malá odbočka &ndash; programové vytvoření procedurální textury s&nbsp;obrázkem</h2>

<p>Ještě předtím, než si ukážeme, jakým způsobem je možné v&nbsp;knihovně
<i>appJar</i> použít rastrové obrázky, si jeden takový obrázek programově
vytvoříme. Bude se jednat o procedurální texturu založenou na efektu takzvaného
<i>moaré</i>. Tuto procedurální texturu (či možná lépe řečeno rastrový vzorek)
vytvořil John Connett z&nbsp;Minnesotské univerzity. O tomto vzorku, který
v&nbsp;podstatě názorně ukazuje vliv aliasu při tvorbě rastrových obrázků,
později pojednal i A.&nbsp;K.&nbsp;Dewdney v&nbsp;časopise <i>Scientific
American</i>. Popisovaný vzorek je generovaný velmi jednoduchým a taktéž
dostatečně rychlým způsobem: každému pixelu ve vytvářeném rastrovém obrázku
(bitmapě) je přiřazena dvojice souřadnic <i>[x, y]</i>. Tyto souřadnice obecně
neodpovídají celočíselným indexům pixelu, které můžeme například označit <i>[i,
j]</i> (záleží totiž na zvoleném faktoru zvětšení popř.&nbsp;zmenšení vzorku).
Posléze je pro každý pixel vypočtena hodnota <i>z</i> na základě jednoduchého
vztahu <i>z=x<sup>2</sup>+y<sup>2</sup></i>.</p>

<img src="https://i.iinfo.cz/images/312/appjar6-1.png" class="image-309897" alt="&#160;" width="400" height="400" />
<p><i>Obrázek 1: Moaré s&nbsp;kružnicovým vzorkem.</i></p>

<p>A to je vlastně celý algoritmus, ke kterému ještě přidáme část, která na
základě vypočtené hodnoty <i>z</i> vybere vhodnou barvu z&nbsp;barvové palety a
pixel následně touto barvou vyplní. Tímto přímočarým, rychlým a současně i
jednoduchým způsobem je možné vytvářet mnohdy fantastické vzorky; pouze stačí
měnit barvovou paletu (ideální jsou plynulé přechody mezi barvami &ndash;
<i>gradient</i>) a měřítko, pomocí kterého se převádí celočíselné pozice pixelů
v&nbsp;rastru <i>[i, j]</i> na souřadnice <i>[x, y]</i>.</p>

<img src="https://i.iinfo.cz/images/312/appjar6-2.png" class="image-309898" alt="&#160;" width="400" height="400" />
<p><i>Obrázek 2: Mez zvětšení, při kterém již kružnicový vzorek začíná
mizet.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad &ndash; moaré jako obrázek ve stupních šedi</h2>

<p>Způsob tvorby moaré s&nbsp;kružnicovým vzorkem je ukázán v&nbsp;dnešním
prvním demonstračním příkladu, který je založen na funkci nazvané
<strong>recalc_circle_pattern()</strong>. Tato funkce provádí výpočet popsaný
<a href="#k03">v&nbsp;předchozí kapitole</a>, na konci pak převádí vypočtenou
hodnotu do celočíselného rozsahu 0..255:</p>

<pre>
<i># Funkce provadejici vypocet moare s kruznicovym vzorkem</i>
def recalc_circle_pattern(image, xmin, ymin, xmax, ymax):
    width, height = image.size       # rozmery obrazku
    stepx = (xmax - xmin)/width
    stepy = (ymax - ymin)/height
    print(xmin, xmax, ymin, ymax, width, height, stepx, stepy)
&nbsp;
    y1 = ymin
    for y in range(0, height):
        x1 = xmin
        for x in range(0, width):
            x1 += stepx
            x2 = x1 * x1
            y2 = y1 * y1
            i = (int)(x2 + y2) &amp; 255
            color = (i, i, i)
            image.putpixel((x, y), color)
        y1 += stepy
</pre>

<img src="https://i.iinfo.cz/images/312/appjar6-3.png" class="image-309899" alt="&#160;" width="400" height="400" />
<p><i>Obrázek 3: Při určitém měřítku narazíme na limit, pod kterým již nevidíme
další detaily (viz střed obrázku, při jehož zvětšení již další detaily nebudou
patrné).</i></p>

<p>Obrázek je vytvořen knihovnou PIL, která se současně postará o jeho uložení
do souboru formátu PNG:</p>

<pre>
from PIL import Image
&nbsp;
mez = (2 &lt;&lt; 5) + 50 * 2.5
image = Image.new("RGB", (IMAGE_WIDTH, IMAGE_HEIGHT))
&nbsp;
recalc_circle_pattern(image, -mez, -mez, mez, mez)
image.save("bw_moare.png")
</pre>

<img src="https://i.iinfo.cz/images/312/appjar6-4.png" class="image-309900" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 4: Procedurální textura vytvořená dnešním prvním demonstračním
příkladem.</i></p>

<p>Následuje výpis úplného zdrojového kódu prvního demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vytvoreni obrazku s "kruznicovym moare"</i>
&nbsp;
from PIL import Image
&nbsp;
<i># velikost obrazku</i>
<i># mocninou cisla 2</i>
IMAGE_WIDTH = 256
IMAGE_HEIGHT = 256
&nbsp;
&nbsp;
<i># Funkce provadejici vypocet moare s kruznicovym vzorkem</i>
def recalc_circle_pattern(image, xmin, ymin, xmax, ymax):
    width, height = image.size       # rozmery obrazku
    stepx = (xmax - xmin)/width
    stepy = (ymax - ymin)/height
&nbsp;
    y1 = ymin
    for y in range(0, height):
        x1 = xmin
        for x in range(0, width):
            x1 += stepx
            x2 = x1 * x1
            y2 = y1 * y1
            i = (int)(x2 + y2) &amp; 255
            color = (i, i, i)
            image.putpixel((x, y), color)
        y1 += stepy
&nbsp;
&nbsp;
mez = (2 &lt;&lt; 5) + 50 * 2.5
image = Image.new("RGB", (IMAGE_WIDTH, IMAGE_HEIGHT))
&nbsp;
recalc_circle_pattern(image, -mez, -mez, mez, mez)
image.save("bw_moare.png")
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Druhý demonstrační příklad &ndash; aplikace barvové palety</h2>

<p>Obrázky vykreslené ve stupních šedi sice mohou být pro některé projekty
zajímavé (survival horory atd.), ovšem většinou požadujeme obrázky barevné. Ve
skutečnosti je řešení jednoduché &ndash; postačuje ke každému vypočtenému
indexu vybrat vhodnou barvu z&nbsp;barvové palety. Tradičně mají barvové palety
256 barev, ovšem samozřejmě je v&nbsp;případě potřeby možné vytvořit
rozsáhlejší či naopak menší palety. Pro účely našeho demonstračního příkladu
použijeme barvovou paletu získanou z&nbsp;datových souborů programu
<i>Fractint</i> a převedenou na Pythonovskou n-tici (samozřejmě lze použít i
seznam). Upravená funkce pro vytvoření textury bude vypadat následovně:</p>

<pre>
<i># Funkce provadejici vypocet moare s kruznicovym vzorkem</i>
def recalc_circle_pattern(image, palette, xmin, ymin, xmax, ymax):
    width, height = image.size       # rozmery obrazku
    stepx = (xmax - xmin)/width
    stepy = (ymax - ymin)/height
&nbsp;
    y1 = ymin
    for y in range(0, height):
        x1 = xmin
        for x in range(0, width):
            x1 += stepx
            x2 = x1 * x1
            y2 = y1 * y1
            i = (int)(x2 + y2) &amp; 255
            color = (<strong>palette[i][0], palette[i][1], palette[i][2]</strong>)
            image.putpixel((x, y), color)
        y1 += stepy
</pre>

<img src="https://i.iinfo.cz/images/312/appjar6-5.png" class="image-309901" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 5: Procedurální textura vytvořená dnešním druhým demonstračním
příkladem.</i></p>

<p>Opět následuje výpis úplného zdrojového kódu demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vytvoreni obrazku s "kruznicovym moare"</i>
&nbsp;
from PIL import Image
&nbsp;
<i># velikost obrazku</i>
<i># mocninou cisla 2</i>
IMAGE_WIDTH = 256
IMAGE_HEIGHT = 256
&nbsp;
&nbsp;
<i># taken from Fractint</i>
palette = (
        (000, 000,   0), (000, 000,   0), (000, 000,   4), (000, 000,  12),
        (000, 000,  16), (000, 000,  24), (000, 000,  32), (000, 000,  36),
        (000, 000,  44), (000, 000,  48), (000, 000,  56), (000, 000,  64),
        (000, 000,  68), (000, 000,  76), (000, 000,  80), (000, 000,  88),
        (000, 000,  96), (000, 000, 100), (000, 000, 108), (000, 000, 116),
        (000, 000, 120), (000, 000, 128), (000, 000, 132), (000, 000, 140),
        (000, 000, 148), (000, 000, 152), (000, 000, 160), (000, 000, 164),
        (000, 000, 172), (000, 000, 180), (000, 000, 184), (000, 000, 192),
        (000, 000, 200), (000,   4, 200), (000,  12, 200), (000,  16, 204),
        (000,  24, 204), (000,  28, 208), (000,  36, 208), (000,  40, 208),
        (000,  48, 212), (000,  56, 212), (000,  60, 216), (000,  68, 216),
        (000,  72, 216), (000,  80, 220), (000,  84, 220), (000,  92, 224),
        (000, 100, 224), (000, 104, 224), (000, 112, 228), (000, 116, 228),
        (000, 124, 232), (000, 128, 232), (000, 136, 232), (000, 140, 236),
        (000, 148, 236), (000, 156, 240), (000, 160, 240), (000, 168, 240),
        (000, 172, 244), (000, 180, 244), (000, 184, 248), (000, 192, 248),
        (000, 200, 252),   (4, 200, 252),  (12, 200, 252),  (20, 204, 252),
        (28,  204, 252),  (36, 208, 252),  (44, 208, 252),  (52, 208, 252),
        (60,  212, 252),  (68, 212, 252),  (76, 216, 252),  (84, 216, 252),
        (92,  216, 252), (100, 220, 252), (108, 220, 252), (116, 224, 252),
        (124, 224, 252), (132, 224, 252), (140, 228, 252), (148, 228, 252),
        (156, 232, 252), (164, 232, 252), (172, 232, 252), (180, 236, 252),
        (188, 236, 252), (196, 240, 252), (204, 240, 252), (212, 240, 252),
        (220, 244, 252), (228, 244, 252), (236, 248, 252), (244, 248, 252),
        (252, 252, 252), (248, 252, 252), (244, 252, 252), (240, 252, 252),
        (232, 252, 252), (228, 252, 252), (224, 252, 252), (216, 252, 252),
        (212, 252, 252), (208, 252, 252), (200, 252, 252), (196, 252, 252),
        (192, 252, 252), (184, 252, 252), (180, 252, 252), (176, 252, 252),
        (168, 252, 252), (164, 252, 252), (160, 252, 252), (156, 252, 252),
        (148, 252, 252), (144, 252, 252), (140, 252, 252), (132, 252, 252),
        (128, 252, 252), (124, 252, 252), (116, 252, 252), (112, 252, 252),
        (108, 252, 252), (100, 252, 252),  (96, 252, 252),  (92, 252, 252),
        (84,  252, 252),  (80, 252, 252),  (76, 252, 252),  (72, 252, 252),
        (64,  252, 252),  (60, 252, 252),  (56, 252, 252),  (48, 252, 252),
        (44,  252, 252),  (40, 252, 252),  (32, 252, 252),  (28, 252, 252),
        (24,  252, 252),  (16, 252, 252),  (12, 252, 252),   (8, 252, 252),
        (000, 252, 252), (000, 248, 252), (000, 244, 252), (000, 240, 252),
        (000, 232, 252), (000, 228, 252), (000, 224, 252), (000, 216, 252),
        (000, 212, 252), (000, 208, 252), (000, 200, 252), (000, 196, 252),
        (000, 192, 252), (000, 184, 252), (000, 180, 252), (000, 176, 252),
        (000, 168, 252), (000, 164, 252), (000, 160, 252), (000, 156, 252),
        (000, 148, 252), (000, 144, 252), (000, 140, 252), (000, 132, 252),
        (000, 128, 252), (000, 124, 252), (000, 116, 252), (000, 112, 252),
        (000, 108, 252), (000, 100, 252), (000,  96, 252), (000,  92, 252),
        (000,  84, 252), (000,  80, 252), (000,  76, 252), (000,  72, 252),
        (000,  64, 252), (000,  60, 252), (000,  56, 252), (000,  48, 252),
        (000,  44, 252), (000,  40, 252), (000,  32, 252), (000,  28, 252),
        (000,  24, 252), (000,  16, 252), (000,  12, 252), (000,   8, 252),
        (000, 000, 252), (000, 000, 248), (000, 000, 244), (000, 000, 240),
        (000, 000, 236), (000, 000, 232), (000, 000, 228), (000, 000, 224),
        (000, 000, 220), (000, 000, 216), (000, 000, 212), (000, 000, 208),
        (000, 000, 204), (000, 000, 200), (000, 000, 196), (000, 000, 192),
        (000, 000, 188), (000, 000, 184), (000, 000, 180), (000, 000, 176),
        (000, 000, 172), (000, 000, 168), (000, 000, 164), (000, 000, 160),
        (000, 000, 156), (000, 000, 152), (000, 000, 148), (000, 000, 144),
        (000, 000, 140), (000, 000, 136), (000, 000, 132), (000, 000, 128),
        (000, 000, 124), (000, 000, 120), (000, 000, 116), (000, 000, 112),
        (000, 000, 108), (000, 000, 104), (000, 000, 100), (000, 000,  96),
        (000, 000,  92), (000, 000,  88), (000, 000,  84), (000, 000,  80),
        (000, 000,  76), (000, 000,  72), (000, 000,  68), (000, 000,  64),
        (000, 000,  60), (000, 000,  56), (000, 000,  52), (000, 000,  48),
        (000, 000,  44), (000, 000,  40), (000, 000,  36), (000, 000,  32),
        (000, 000,  28), (000, 000,  24), (000, 000,  20), (000, 000,  16),
        (000, 000,  12), (000, 000,   8), (000, 000,   0), (000, 000,   0))
&nbsp;
&nbsp;
<i># Funkce provadejici vypocet moare s kruznicovym vzorkem</i>
def recalc_circle_pattern(image, palette, xmin, ymin, xmax, ymax):
    width, height = image.size       # rozmery obrazku
    stepx = (xmax - xmin)/width
    stepy = (ymax - ymin)/height
&nbsp;
    y1 = ymin
    for y in range(0, height):
        x1 = xmin
        for x in range(0, width):
            x1 += stepx
            x2 = x1 * x1
            y2 = y1 * y1
            i = (int)(x2 + y2) &amp; 255
            color = (palette[i][0], palette[i][1], palette[i][2])
            image.putpixel((x, y), color)
        y1 += stepy
&nbsp;
&nbsp;
mez = (2 &lt;&lt; 5) + 50 * 2.5
image = Image.new("RGB", (IMAGE_WIDTH, IMAGE_HEIGHT))
&nbsp;
recalc_circle_pattern(image, palette, -mez, -mez, mez, mez)
image.save("moare.png")
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Použití ovládacího prvku typu <strong>Image</strong></h2>

<p>Obrázky pro otestování již máme připraveny, takže se nyní podívejme na to,
jakým způsobem je možné obrázek načíst a následně vložit na plochu hlavního
okna aplikace. Ve skutečnosti je to velmi snadné, protože přímo při vytváření
widgetu s&nbsp;obrázkem můžeme specifikovat soubor, z&nbsp;něhož se má obrázek
načíst. Současně se z&nbsp;rozměrů obrázku zjistí velikost widgetu (prvním
parametrem se specifikuje identifikátor widgetu):</p>

<pre>
app.addImage("image", "moare.png")
</pre>

<img src="https://i.iinfo.cz/images/312/appjar6-6.png" class="image-309902" alt="&#160;" width="264" height="320" />
<p><i>Obrázek 6: Screenshot příkladu, v&nbsp;němž je použit widget typu
<strong>Image</strong>.</i></p>

<p>Celý příklad, který po svém spuštění zobrazí rastrový obrázek načtený
z&nbsp;externího souboru, vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import tkinter
&nbsp;
&nbsp;
app = gui()
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
<strong>app.addImage("image", "moare.png")</strong>
&nbsp;
app.go()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Rastrový obrázek uložený přímo ve zdrojovém kódu aplikace</h2>

<p>V&nbsp;některých případech můžeme chtít, například kvůli zjednodušení
instalace vyvíjené aplikace, aby byl rastrový obrázek přímo součástí zdrojových
kódů. I to je možné zařídit, ovšem tato možnost se obvykle používá pouze pro
obrázky s&nbsp;malým rozlišením, protože obrázek uložený přímo ve zdrojových
kódech zabere větší prostor (o více než 33%). V&nbsp;dalším textu se dozvíme,
proč tomu tak je. Aby bylo možné ukládat data rastrového obrázku přímo ve
zdrojových kódech, je nutné je nejprve vhodným způsobem zakódovat, protože ne
všechny znaky je možné ve zdrojových kódech použít (některé jsou
&bdquo;jen&ldquo; nečitelně či needitovatelné, další pak mají speciální
význam).</p>

<p>Z&nbsp;tohoto důvodu podporuje knihovna <i>appJar</i> načítání obrázků
zakódovaných s&nbsp;využitím <a
href="https://cs.wikipedia.org/wiki/Base64">Base64</a>. Výsledek je umístěn do
běžného řetězce reprezentovatelného v&nbsp;programovacím jazyku Python.
Povšimněte si, že libovolná data zakódovaná do <i>Base64</i> lze skutečně
reprezentovat řetězcem, protože se ve výsledku nebudou nacházet žádné znaky,
které by tomu bránily (v&nbsp;Base64 se totiž používají jen znaky a-z, A-Z,
0-9, plus, lomítko, znak = a taktéž znak pro konec řádku). Navíc mají řádky
výsledného řetězce jen 64 až 76 znaků na každém řádku, což odpovídá doporučení
PEP-8.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Postup při uložení obrázku do zdrojového kódu</h2>

<p>Podívejme se nyní na způsob uložení dat rastrového obrázku přímo do
zdrojových kódů. Zdrojem bude libovolný soubor s&nbsp;rastrovým obrázkem malých
rozměrů. Ideální je formát GIF. Obrázek nejprve zakódujeme do <i>Base64</i> a
výsledek uložíme do pomocného textového souboru:</p>

<pre>
base64 obrázek.gif &gt; obrázek.py
</pre>

<img src="https://i.iinfo.cz/images/312/appjar6-7.gif" class="image-309903" alt="&#160;" width="22" height="22" />
<p><i>Obrázek 7: Ikona uložená ve formátu GIF, kterou přes utilitu base64
převedeme do plnohodnotného řetězce jazyka Python.</i></p>

<p>Pokud například budeme převádět ikonu <strong>application-exit.gif</strong>
získanou z&nbsp;adresy (<a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/icons/application-exit.gif">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/icons/application-exit.gif</a>),
použijeme příkaz:</p>

<pre>
base64 application-exit.gif &gt; application-exit.py
</pre>

<p>Zakódováním by měl vzniknout přesně tento soubor:</p>

<pre>
R0lGODlhFgAWAPZJAAAAAHgCAYcHBYgZGZUJA5cRCpsYEpkkFpkrJKQLBKgYBaQQELQCArEYGKQo
Fq4yFrUlBrAoE7g5F6g0J6Y2NqlMO6lJRrVLRLpSSLZaWbxpacg1B9U7BMwpKMw5ONQnJ9w4OMlH
FttDBtFOFudJBPNPAPdTAMFbTsZmV8J3d+FiYut9fauCebGHfqyLhK6cnLaMhL+Si7ynp8mIiMaW
j86Skt+KitGZmcSsq92trd6yrd+ysuuIh+6oqOS7reW3svKqqurDtM7OztjY2OTMyujT0/DExOjo
6Pj4+P///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5
BAEAAEkALAAAAAAWABYAAAf+gEmCg4SFg0hIgz0rIB+Oj5AdjypANoI8Rjs5mzs7Pz2boZw9HoId
N6ipqquoOQ2CDDOyLy81sreztTM3C7CyOEdHMriyMsE4MzW9SQwpKURIR0gyzs7G0UQpM8sMGt5F
wUc43sbB2RozBoIJGe0aRMFFOMDmGu0pBevt+/BHQ/9DiOzTkIKAoAUUKFS4gAEDEYABUZyoMIFA
AYNJFhAQQEBBBAkuILaAoCDBxgICDm7sCIEFRCFCWJAkQMBAyiQGaCZQ0CLYEB8+YA4ZqaDmzZwd
Y4QLQoKEj39HYkBIcOAoTRpLSZQwUSLIkGA0FDgIIOgATR/RgojQypVEEGlMP8SSRXLgogIfQTZw
WNuUA4cgcQk4SInEQl0FECDoFbFWBIcNG0gqmDDXQgUHDyRICBFihOcRnDU/mICAbJIBAVKrXs16
taHXsAUFAgA7
</pre>

<p>Povšimněte si, že vytvořený soubor je větší, než originál. Je tomu tak
především z&nbsp;toho důvodu, že se v&nbsp;kódování Base64 používá jen 64
vybraných znaků a nikoli všech 256 možných hodnot, tudíž se každé tři bajty
(3&times;8=24 bitů) uloží ve čtyřech znacích (4&times;6=24 bitů). Navíc se do
výsledného souboru ukládají znaky pro konec řádku a na samotném konci pak
výplně tvořené znaky &bdquo;=&ldquo;.</p>

<p>Ve druhém kroku otevřeme vytvořený soubor &bdquo;application-exit.py&ldquo;
v&nbsp;textovém editoru a dopíšeme na první řádek deklaraci proměnné a její
inicializaci řetězcem. Vzhledem k&nbsp;tomu, že se jedná o víceřádkový řetězec,
použije se trojice uvozovek (konce řádků se v&nbsp;Base64 ignorují, takže
vlastní data klidně mohou začít až na řádku následujícím):</p>

<pre>
image_data = """
</pre>

<p>Na posledním řádku pak pouze řetězec uzavřeme:</p>

<pre>
"""
</pre>

<p>Výsledkem by měl být následující úryvek zdrojového kódu, který je bez
problémů interpretovatelný Pythonem:</p>

<pre>
image_data = """
R0lGODlhFgAWAPZJAAAAAHgCAYcHBYgZGZUJA5cRCpsYEpkkFpkrJKQLBKgYBaQQELQCArEYGKQo
Fq4yFrUlBrAoE7g5F6g0J6Y2NqlMO6lJRrVLRLpSSLZaWbxpacg1B9U7BMwpKMw5ONQnJ9w4OMlH
FttDBtFOFudJBPNPAPdTAMFbTsZmV8J3d+FiYut9fauCebGHfqyLhK6cnLaMhL+Si7ynp8mIiMaW
j86Skt+KitGZmcSsq92trd6yrd+ysuuIh+6oqOS7reW3svKqqurDtM7OztjY2OTMyujT0/DExOjo
6Pj4+P///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5
BAEAAEkALAAAAAAWABYAAAf+gEmCg4SFg0hIgz0rIB+Oj5AdjypANoI8Rjs5mzs7Pz2boZw9HoId
N6ipqquoOQ2CDDOyLy81sreztTM3C7CyOEdHMriyMsE4MzW9SQwpKURIR0gyzs7G0UQpM8sMGt5F
wUc43sbB2RozBoIJGe0aRMFFOMDmGu0pBevt+/BHQ/9DiOzTkIKAoAUUKFS4gAEDEYABUZyoMIFA
AYNJFhAQQEBBBAkuILaAoCDBxgICDm7sCIEFRCFCWJAkQMBAyiQGaCZQ0CLYEB8+YA4ZqaDmzZwd
Y4QLQoKEj39HYkBIcOAoTRpLSZQwUSLIkGA0FDgIIOgATR/RgojQypVEEGlMP8SSRXLgogIfQTZw
WNuUA4cgcQk4SInEQl0FECDoFbFWBIcNG0gqmDDXQgUHDyRICBFihOcRnDU/mICAbJIBAVKrXs16
taHXsAUFAgA7
"""
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití ovládacího prvku typu <strong>Image</strong> a obrázku ze zdrojového kódu</h2>

<p>Ve chvíli, kdy již máme zakódovaná data s&nbsp;obrázkem uložena do řetězce,
je možné tato data využít pro vytvoření widgetu s&nbsp;obrázkem. Pouze namísto
zavolání metody <strong>addImage</strong>:</p>

<pre>
app.addImage("image", "moare.png")
</pre>

<p>použijeme metodu pojmenovanou <strong>addImageData</strong>, a to
následujícím způsobem:</p>

<pre>
app.addImageData("image", image_data)
</pre>

<img src="https://i.iinfo.cz/images/312/appjar6-8.png" class="image-309904" alt="&#160;" width="230" height="111" />
<p><i>Obrázek 8: Screenshot příkladu, v&nbsp;němž je použit widget typu
<strong>Image</strong> a obrázek uložený přímo ve zdrojovém kódu.</i></p>

<p>Celý příklad, který po svém spuštění zobrazí na ploše okna ikonu, bude
vypadat následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import tkinter
&nbsp;
&nbsp;
image_data = """
R0lGODlhFgAWAPZJAAAAAHgCAYcHBYgZGZUJA5cRCpsYEpkkFpkrJKQLBKgYBaQQELQCArEYGKQo
Fq4yFrUlBrAoE7g5F6g0J6Y2NqlMO6lJRrVLRLpSSLZaWbxpacg1B9U7BMwpKMw5ONQnJ9w4OMlH
FttDBtFOFudJBPNPAPdTAMFbTsZmV8J3d+FiYut9fauCebGHfqyLhK6cnLaMhL+Si7ynp8mIiMaW
j86Skt+KitGZmcSsq92trd6yrd+ysuuIh+6oqOS7reW3svKqqurDtM7OztjY2OTMyujT0/DExOjo
6Pj4+P///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5
BAEAAEkALAAAAAAWABYAAAf+gEmCg4SFg0hIgz0rIB+Oj5AdjypANoI8Rjs5mzs7Pz2boZw9HoId
N6ipqquoOQ2CDDOyLy81sreztTM3C7CyOEdHMriyMsE4MzW9SQwpKURIR0gyzs7G0UQpM8sMGt5F
wUc43sbB2RozBoIJGe0aRMFFOMDmGu0pBevt+/BHQ/9DiOzTkIKAoAUUKFS4gAEDEYABUZyoMIFA
AYNJFhAQQEBBBAkuILaAoCDBxgICDm7sCIEFRCFCWJAkQMBAyiQGaCZQ0CLYEB8+YA4ZqaDmzZwd
Y4QLQoKEj39HYkBIcOAoTRpLSZQwUSLIkGA0FDgIIOgATR/RgojQypVEEGlMP8SSRXLgogIfQTZw
WNuUA4cgcQk4SInEQl0FECDoFbFWBIcNG0gqmDDXQgUHDyRICBFihOcRnDU/mICAbJIBAVKrXs16
taHXsAUFAgA7
"""
&nbsp;
app = gui()
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addLabel("label", "Image loaded from data (string)")
<strong>app.addImageData("image", image_data)</strong>
&nbsp;
app.go()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Ovládací prvek zobrazující koláčový diagram</h2>

<p>Další ovládací prvek, který v&nbsp;knihovně <i>appJar</i> najdeme, dokáže
zobrazit koláčový diagram (graf) pro zvolená data. Možnosti koláčového diagramu
jsou však omezeny, například nefunguje legenda (tu lze přidat do jiného
widgetu), chybí popisky výsečí, není možné jednoduše modifikovat barvy
jednotlivých výsečí a jelikož se pro zobrazení používá Canvas z&nbsp;knihovny
<i>Tkinter</i>, není použit antialiasing, což je jasně patrné jak na obloucích,
tak i na šikmých úsečkách.</p>

<p>Vstupní data pro koláčový graf jsou uložena ve slovníku, kde klíče tvoří
popisky výsečí a hodnoty udávají relativní velikost výseče. Pro ukázku jsem
použil počet křesel obsazených stranami v&nbsp;posledních volbách. Data jsou
seřazena podle čísel stran, nikoli podle preferencí autora :-):</p>

<pre>
data = {
    "ODS": 25,
    "CSSD": 15,
    "STAN": 6,
    "KSCM": 15,
    "Pirati": 22,
    "TOP 09": 7,
    "ANO":  78,
    "KDU-CSL": 10,
    "SPD": 22}
</pre>

<p>Koláčový graf se do hlavního okna aplikace přidá velmi jednoduše:</p>

<pre>
app.addPieChart("piechart", data)
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<img src="https://i.iinfo.cz/images/312/appjar6-9.png" class="image-309905" alt="&#160;" width="384" height="327" />
<p><i>Obrázek 9: Koláčový diagram (graf) zobrazený předchozím příkazem.</i></p>

<p>Podívejme se na úplný kód příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import tkinter
&nbsp;
&nbsp;
app = gui()
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
data = {
    "ODS": 25,
    "CSSD": 15,
    "STAN": 6,
    "KSCM": 15,
    "Pirati": 22,
    "TOP 09": 7,
    "ANO":  78,
    "KDU-CSL": 10,
    "SPD": 22}
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
<strong>app.addPieChart("piechart", data)</strong>
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/312/appjar6-10.png" class="image-309906" alt="&#160;" width="384" height="327" />
<p><i>Obrázek 10: Bublinová nápověda zobrazí data u vybrané výseče.</i></p>

<p>Poznámka: pokud vám nevyhovují barvy jednotlivých výsečí (jsou docela nudné
a navzájem podobné), lze je upravit buď přímo ve zdrojovém kódu
<strong>appjar.py</strong> nebo si můžete ze třídy <strong>PieChart</strong>
odvodit třídu vlastní:</p>

<pre>
class PieChart(Canvas):
    # constant for available colours
    COLOURS = [
        "#023fa5",
        "#7d87b9",
        "#bec1d4",
        "#d6bcc0",
        "#bb7784",
        "#8e063b",
        "#4a6fe3",
        "#8595e1",
        "#b5bbe3",
        "#e6afb9",
        "#e07b91",
        "#d33f6a",
        "#11c638",
        "#8dd593",
        "#c6dec7",
        "#ead3c6",
        "#f0b98d",
        "#ef9708",
        "#0fcfc0",
        "#9cded6",
        "#d5eae7",
        "#f3e1eb",
        "#f6c4e1",
        "#f79cd4"]
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zobrazení mřížky LED (emulace počítače Micro Bit)</h2>

<p>O tom, že je knihovna <i>appJar</i> určena primárně pro výuku programování,
svědčí i existence posledního ovládacího prvku. Jedná se o specializovaný
widget, který dokáže zobrazit mřížku 5&times;5 čtverečků, které svou barvou
napodobují <a href="http://microbit.org/guide/features/#leds">mřížku LED</a>
z&nbsp;populárního jednodeskového mikropočítače <a
href="http://microbit.org/">Micro Bit</a>, jenž se poměrně masivně začal
používat i v&nbsp;tuzemsku (což je ostatně jen dobře, mj.&nbsp;i díky
rozsáhlému ekosystému, který okolo tohoto zařízení vznikl).</p>

<p>Mřížka s&nbsp;dvaceti pěti LED se do okna aplikace vkládá naprosto stejným
způsobem, jako jakýkoli jiný ovládací prvek, tj.&nbsp;metodou
<strong>addJménoWidtgetu("identifikátor_widgetu")</strong>:</p>

<pre>
app.addMicroBit("microbit")
</pre>

<p>Pokud budeme chtít rozsvítit či naopak zhasnout všechny LED, je možné použít
metodu <strong>setMicroBitImage</strong>. Této metodě se kromě identifikátoru
widgetu předává i řetězec obsahující intenzitu světla všech LED, přičemž
intenzita může být v&nbsp;rozsahu od nuly do devíti. LED jsou rozděleny do
řádků, které jsou od sebe odděleny dvojtečkou. To znamená, že pokud budeme
chtít zobrazit velké písmeno &bdquo;M&ldquo;, vytvoříme si nejdříve (například
na papír) bitmapu s&nbsp;tvarem písmena:</p>

<pre>
*   *
** **
* * *
*   *
*   *
</pre>

<p>Zvolíme si intenzitu svitu diod - 0 pro zhasnuté diody, 9 pro diody
rozsvícené:</p>

<pre>
90009
99099
90909
90009
90009
</pre>

<p>Převedeme intenzity na řetězec:</p>

<pre>
90009:99099:90909:90009:90009
</pre>

<p>A zavoláme výše zmíněnou metodu <strong>setMicroBitImage</strong>:</p>

<pre>
app.setMicroBitImage("microbit", "90009:99099:90909:90009:90009")
</pre>

<img src="https://i.iinfo.cz/images/312/appjar6-11.png" class="image-309907" alt="&#160;" width="276" height="282" />
<p><i>Obrázek 11: Písmeno &bdquo;M&ldquo; zobrazené v&nbsp;matici 5&times;5
&bdquo;LED&ldquo;.</i></p>

<p>Opět si ukažme příklad, v&nbsp;němž se tento neobvyklý ovládací prvek
použije:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import tkinter
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addMicroBit("microbit")
app.setMicroBitImage("microbit", "90009:99099:90909:90009:90009")
app.go()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Programová změna světlosti jednotlivých LED</h2>

<p>Světlost LED v&nbsp;matici je možné změnit metodou nazvanou
<strong>setMicroBitPixel</strong>, které se předá čtveřice parametrů &ndash;
identifikátor widgetu, x-ová souřadnice LED v&nbsp;matici (0-4), y-ová
souřadnice LED v&nbsp;matici (taktéž 0-4) a světlost pixelu v&nbsp;rozmezí 0 až
9. Všechny celočíselné hodnoty jsou po zavolání metody zkontrolovány oproti
uvedeným rozsahům:</p>

<pre>
app.setMicroBitPixel("microbit", x, y, brightness)
</pre>

<p>Pokud například budeme chtít zobrazit diagonální gradientní přechod od
světlosti 1 do 9, lze to provést následovně:</p>

<pre>
for y in range(0, 5):
    for x in range(0, 5):
        brightness = x + y + 1
        app.setMicroBitPixel("microbit", x, y, brightness)
</pre>

<p>Pokud budete potřebovat všechny LED vypnout, zajistí to metoda:</p>

<pre>
app.clearMicroBit("microbit")
</pre>

<img src="https://i.iinfo.cz/images/312/appjar6-12.png" class="image-309908" alt="&#160;" width="276" height="282" />
<p><i>Obrázek 12: Gradientní přechod zobrazený LED v&nbsp;matici
5&times;5.</i></p>

<p>Opět následuje výpis celého zdrojového kódu příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import tkinter
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
app.addMicroBit("microbit")
&nbsp;
for y in range(0, 5):
    for x in range(0, 5):
        brightness = x + y + 1
        app.setMicroBitPixel("microbit", x, y, brightness)
&nbsp;
app.go()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Použití prvku <strong>Canvas</strong> z&nbsp;Tkinteru</h2>

<p>Ve chvíli, kdy je zapotřebí zobrazit složitější grafické prvky, než jsou
nemodifikovatelné rastrové obrázky, koláčové diagramy nebo matice 5&times;5
&bdquo;LED&ldquo;, je nutné obejít základní možnosti knihovny <i>appJar</i> a
namísto toho použít nám již známé prostředky nabízené knihovnou <i>Tkinter</i>,
které jsme si představili v&nbsp;trojici článků [<a
href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-canvasem/">1</a>]
[<a
href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-2-cast/">2</a>]
a [<a
href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-dokonceni/">3</a>].
Využijeme přitom toho, že referenci na objekt představující hlavní okno
aplikace lze získat velmi snadno:</p>

<pre>
app = gui()
root = app.topLevel
</pre>

<p>Kreslicí plátno (<i>canvas</i>) poté na hlavním oknu vytvoříme přesně stejným
způsobem, jaký již známe z&nbsp;knihovny Tkinter:</p>

<pre>
canvas = tkinter.Canvas(root, width=šířka_plátna, height=výška_plátna)
canvas.pack()
</pre>

<p>Jediný problém spočívá v&nbsp;tom, že se plátno sice na hlavní okno umístí,
ale knihovna <i>appJar</i> není o této operaci korektně informována. Výsledkem
je, že plátno bude vždy zobrazené ve spodní části okna, což však pro mnoho
aplikací nebude velkým problémem (pokud ano, je nutné pracovat s&nbsp;interním
objektem <strong>all.ContainerStack</strong>, jehož vlastnosti se ovšem mohou
v&nbsp;dalších verzích knihovny appJar lišit).</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Ukázka použití <strong>Canvasu</strong></h2>

<p>Podívejme se nyní na způsob použití kreslicího plátna (canvasu)
v&nbsp;praxi. Na hlavní okno vložíme kromě kreslicího plátna i další
widget, konkrétně hlavní menu:</p>

<pre>
app = gui()
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
canvas = tkinter.Canvas(app.topLevel, width=256, height=256)
canvas.pack()
</pre>

<p>Na kreslicí plátno poté vykreslíme několik objektů:</p>

<pre>
canvas.create_oval(10, 10, 100, 100, fill="red", outline="blue", width=3)
canvas.create_line(0, 0, 255, 255, width=5)
canvas.create_line(0, 255, 255, 0, dash=123)
&nbsp;
canvas.create_rectangle(70, 140, 230, 180, fill="white")
canvas.create_text(150, 160, text="Hello world!", fill="brown",
                   font="Helvetica 20")
</pre>

<p>Výsledek můžeme vidět na dalším obrázku:</p>

<img src="https://i.iinfo.cz/images/312/appjar6-13.png" class="image-309909" alt="&#160;" width="260" height="317" />
<p><i>Obrázek 13: Kreslicí plátno vložené do okna aplikace vytvořené přes appJar.</i></p>

<p>Celý zdrojový kód příkladu s&nbsp;kreslicím plátnem vloženým do aplikace
vytvořené přes <i>appJar</i> vypadá takto:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import tkinter
&nbsp;
&nbsp;
app = gui()
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
canvas = <strong>tkinter.Canvas(app.topLevel, width=256, height=256)</strong>
<strong>canvas.pack()</strong>
&nbsp;
canvas.create_oval(10, 10, 100, 100, fill="red", outline="blue", width=3)
canvas.create_line(0, 0, 255, 255, width=5)
canvas.create_line(0, 255, 255, 0, dash=123)
canvas.create_rectangle(70, 140, 230, 180, fill="white")
canvas.create_text(150, 160, text="Hello world!", fill="brown",
                   font="Helvetica 20")
&nbsp;
app.go()
</pre>

<p>Poznámka: knihovna <i>appJar</i> pro pojmenování metod používá CamelCase
zatímco knihovna <i>Tkinter</i> u svých identifikátorů používá oddělení slov
podtržítkem, takže je výsledek dosti nekonzistentní. To je jedna
z&nbsp;nevýhod, s&nbsp;nimiž se setkáme při kombinaci možností obou
knihoven.</p>

<p>Kreslicí plátno si zachovává všechny vlastnosti, které již známe
z&nbsp;knihovny Tkinter. Můžeme tak zajistit například změnu stylu vybrané
entity po najetí myši, například:</p>

<pre>
canvas.create_rectangle(230, 110, 270, 190, fill=None, activeoutline='yellow',
                        width=5)
&nbsp;
canvas.create_oval(320, 220, 380, 280, fill=None, activefill='#8080ff',
                   width=5)
</pre>

<img src="https://i.iinfo.cz/images/312/appjar6-14.png" class="image-309910" alt="&#160;" width="404" height="461" />
<p><i>Obrázek 14: Kreslicí plátno s&nbsp;několika aktivními prvky reagujícími
na najetí myši.</i></p>

<p>V&nbsp;dalším příkladu je na plátno vloženo patnáct prvků, které reagují na
najetí myši (onMouseOver):</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import tkinter
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
def basicCanvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    drawGrid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def drawGrid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
canvas = basicCanvas(app.topLevel, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_rectangle(10, 30, 90, 70, fill='#ff8080', width=2,
                        activefill='white')
&nbsp;
canvas.create_rectangle(110, 30, 190, 70, fill='#ff8080', width=2,
                        dash=(5, 5), activedash=1)
&nbsp;
canvas.create_rectangle(30, 110, 70, 190, fill='#ff8080',
                        activeoutline='yellow')
&nbsp;
canvas.create_rectangle(20, 220, 80, 280, fill='#ff8080',
                        activeoutline='yellow', activewidth='5')
&nbsp;
canvas.create_oval(130, 110, 170, 190, fill='#8080ff', width=2,
                   activedash=(10, 10))
&nbsp;
canvas.create_oval(120, 220, 180, 280, fill=None, activefill='#8080ff')
&nbsp;
canvas.create_rectangle(210, 30, 290, 70, fill=None, width=2,
                        activefill='white')
&nbsp;
canvas.create_rectangle(310, 30, 390, 70, fill=None, width=2, dash=(5, 5),
                        activedash=1)
&nbsp;
canvas.create_rectangle(230, 110, 270, 190, fill=None, activeoutline='yellow',
                        width=5)
&nbsp;
canvas.create_rectangle(220, 220, 280, 280, fill=None, activeoutline='yellow',
                        activewidth='5')
&nbsp;
canvas.create_oval(330, 110, 370, 190, fill=None, width=2, activedash=(10, 10))
&nbsp;
canvas.create_oval(320, 220, 380, 280, fill=None, activefill='#8080ff',
                   width=5)
&nbsp;
canvas.create_line(10, 330, 90, 370, fill='#80ff80', width=2,
                   activefill='white')
&nbsp;
canvas.create_line(110, 330, 190, 370, fill='#80ff80', width=20,
                   activefill='white')
&nbsp;
canvas.create_line(210, 330, 290, 370, fill='#80ff80', width=20,
                   activefill='white', dash=10)
&nbsp;
&nbsp;
canvas.pack()
&nbsp;
app.go()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech devíti dnes popsaných demonstračních příkladů byly opět
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>69_make_bw_moare.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/69_make_bw_moare.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/69_make_bw_moare.py</a></td></tr>
<tr><td>70_make_color_moare.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/70_make_color_moare.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/70_make_color_moare.py</a></td></tr>
<tr><td>71_display_image.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/71_display_image.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/71_display_image.py</a></td></tr>
<tr><td>72_display_image_from_data.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/72_display_image_from_data.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/72_display_image_from_data.py</a></td></tr>
<tr><td>73_piechart.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/73_piechart.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/73_piechart.py</a></td></tr>
<tr><td>74_microbit_LEDs.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/74_microbit_LEDs.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/74_microbit_LEDs.py</a></td></tr>
<tr><td>75_microbit_pixels.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/75_microbit_pixels.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/75_microbit_pixels.py</a></td></tr>
<tr><td>76_canvas.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/76_canvas.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/76_canvas.py</a></td></tr>
<tr><td>77_canvas2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/77_canvas2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/77_canvas2.py</a></td></tr>
</table>

<p>Poznámka: pro úspěšné spuštění těchto příkladů musíte mít v&nbsp;aktuálním
adresáři rozbalenou knihovnu <i>appJar</i>!. Podrobnosti o instalaci jsme si
řekli <a
href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/">v&nbsp;úvodním
článku</a>.</p>

<img src="https://i.iinfo.cz/images/312/appjar6-15.png" class="image-309911" alt="&#160;" width="260" height="317" />
<p><i>Obrázek 15: Příště si mj.&nbsp;ukážeme použití modulu turtle společně
s&nbsp;knihovnou appJar.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

