<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Pygubu designer ve funkci jednosměrného RAD</a></p>
<p><a href="#k02">2. Vygenerování ukázkového zdrojového kódu</a></p>
<p><a href="#k03">3. Vygenerování kódu založeného na knihovně Tkinter</a></p>
<p><a href="#k04">4. Práce s&nbsp;dialogem obsahujícím zaškrtávací pole</a></p>
<p><a href="#k05">5. Kostra demonstračního příkladu pro zobrazení dialogu se zaškrtávacími poli</a></p>
<p><a href="#k06">6. Automatické nastavení proměnných při změně stavu zaškrtávacího pole</a></p>
<p><a href="#k07">7. Zobrazení aktuálního stavu zaškrtávacích polí</a></p>
<p><a href="#k08">8. Nastavení výchozího stavu zaškrtávacích polí</a></p>
<p><a href="#k09">9. Widget představující vstupní textové pole</a></p>
<p><a href="#k10">10. Realizace formuláře s&nbsp;textovým polem</a></p>
<p><a href="#k11">11. Průběžná validace textu zapisovaného do textového pole</a></p>
<p><a href="#k12">12. Realizace formuláře s&nbsp;validovaným textovým polem</a></p>
<p><a href="#k13">13. Práce s&nbsp;grafikou v&nbsp;knihovně Tkinter</a></p>
<p><a href="#k14">14. Widget <strong>canvas</strong></a></p>
<p><a href="#k15">15. Realizace formuláře s&nbsp;kreslicím plátnem (canvasem)</a></p>
<p><a href="#k16">16. První skript, který zobrazí formulář s&nbsp;prázdným kreslicím plátnem</a></p>
<p><a href="#k17">*** 17. Kreslení na plátno</a></p>
<p><a href="#k18">*** 18. Ukázka dalších možností kreslicího plátna</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Pygubu designer ve funkci jednosměrného RAD</h2>

<p>V&nbsp;předchozích dvou článcích jsme si na několika místech řekli, že
Pygubu designer nelze považovat za plnohodnotný nástroj typu <i>RAD</i>
(<i>Rapid Application Development</i>), a to především z&nbsp;toho důvodu, že
se jedná o &bdquo;pouhého&ldquo; návrháře GUI bez obousměrné vazby na zdrojový
kód. Nicméně v&nbsp;poslední verzi Pygubu-designeru se objevila první vlaštovka
RAD nástroje &ndash; Pygubu designer totiž nyní umožňuje z&nbsp;návrhu
grafického uživatelského rozhraní vygenerovat dva typy zdrojových kódů, které
budou ukázány v&nbsp;navazující dvojici kapitol.</p>

<p>Vraťme se nyní k&nbsp;poslední aplikaci, která byla popsána minule.
Uživatelská část této aplikace se skládá z&nbsp;okna, do kterého je vložena
pětice tlačítek:</p>

*** image ***
<p><i>Obrázek 1: Grafický návrh uživatelského rozhraní aplikace.</i></p>

<p>Tlačítka budou reagovat na operace provedené uživatelem, protože je u
každého specifikována callback funkce (resp.&nbsp;přesněji řečeno metoda),
která se zavolá po stisku tohoto tlačítka (libovolným ovladačem &ndash;
klávesnicí nebo myší):</p>

*** image ***
<p><i>Obrázek 2: Nastavení callback funkce (resp.&nbsp;metody) i dalších
parametrů jednotlivých tlačítek.</i></p>

<p>Při návrhu tohoto formuláře byl použit <i>grid layout</i> neboli mřížka, do
které se jednotlivé ovládací prvky vkládají. U každého prvku lze určit, ke
kterým okrajům buňky bude &bdquo;přilepen&ldquo;:</p>

*** image ***
<p><i>Obrázek 3: Použití grid layoutu (mřížky) a určení, ke kterým okrajům
mřížky se mají tlačítka přilepit (sticky).</i></p>

<p>Vygenerovaný soubor s&nbsp;návrhem grafického uživatelského rozhraní by měl
vypadat následovně:</p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface version="1.1"&gt;
  &lt;object class="ttk.Frame" id="MainWindow"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout manager="pack"&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="side"&gt;top&lt;/property&gt;
    &lt;/layout&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="ok_cancel"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_ok_cancel_click&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Ok + Cancel&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;0&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;0&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="retry_cancel"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_retry_cancel_click&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Retry + Cancel&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;1&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;0&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="yes_no"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_yes_no_click&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Yes + No&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;0&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;1&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="exit"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_exit_click&lt;/property&gt;
        &lt;property name="style"&gt;Red.TButton&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Exit&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;1&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;4&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="question"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_question_click&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Question&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;1&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;1&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vygenerování ukázkového zdrojového kódu</h2>

<p>V&nbsp;horní části uživatelského rozhraní nástroje Pygubu je možné se
přepnout mezi taby <strong>Design</strong> a <strong>Code</strong> (což je
právě ona novinka, která v&nbsp;dřívějších verzích nebyla dostupná).
V&nbsp;případě, že se přepnete na tab <strong>Code</strong>, lze si tlačítkem
<strong>Application</strong> nechat vygenerovat kostru aplikace (ovšem bez
implementace callback metod atd.):</p>

*** image ***
<p><i>Obrázek 4: Vygenerování základní struktury kódu aplikace.</i></p>

<p>Vygenerovaný kód, který je závislý na knihovně <i>pygubu</i>, vypadá
následovně:</p>

<pre>
import os
import pygubu
&nbsp;
&nbsp;
PROJECT_PATH = os.path.dirname(__file__)
PROJECT_UI = os.path.join(PROJECT_PATH, "example7.ui")
&nbsp;
&nbsp;
class <strong>Example7App</strong>:
    def <strong>__init__</strong>(self):
        self.builder = builder = pygubu.Builder()
        builder.add_resource_path(PROJECT_PATH)
        builder.add_from_file(PROJECT_UI)
        self.mainwindow = builder.get_object('MainWindow')
        builder.connect_callbacks(self)
&nbsp;
    def <strong>on_button_ok_cancel_click</strong>(self):
        pass
&nbsp;
    def <strong>on_button_retry_cancel_click</strong>(self):
        pass
&nbsp;
    def <strong>on_button_yes_no_click</strong>(self):
        pass
&nbsp;
    def <strong>on_button_exit_click</strong>(self):
        pass
&nbsp;
    def <strong>on_button_question_click</strong>(self):
        pass
&nbsp;
    def <strong>run</strong>(self):
        self.mainwindow.mainloop()
&nbsp;
if __name__ == '__main__':
    import tkinter as tk
    root = tk.Tk()
    app = Example7App(root)
    app.run()
</pre>

<p>Jen pro zajímavost se podívejme na to, jak vypadala aplikace, kterou jsem
vytvořil ručně v&nbsp;rámci <a
href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-s-vyuzitim-nastroje-pygubu-2/">předchozího
článku</a>:</p>

<pre>
<i>"""Pygubu and Tkinter: changing style."""</i>
&nbsp;
<i># Example7.py</i>
&nbsp;
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example7App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui</strong>(self):
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example7.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
        root.bind('&lt;Control-q&gt;', lambda event: self.on_button_exit_click())
&nbsp;
    def <strong>on_button_ok_cancel_click</strong>(self):
        <u>messagebox.askokcancel("askokcancel()", "askokcancel()")</u>
&nbsp;
    def <strong>on_button_yes_no_click</strong>(self):
        <u>messagebox.askyesno("askyesno()", "askyesno()")</u>
&nbsp;
    def <strong>on_button_retry_cancel_click</strong>(self):
        <u>messagebox.askretrycancel("askretrycancel()", "askretrycancel()")</u>
&nbsp;
    def <strong>on_button_question_click</strong>(self):
        <u>messagebox.askquestion("askquestion()", "askquestion()")</u>
&nbsp;
    def <strong>on_button_exit_click</strong>(self):
        root.destroy()
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    <i># style</i>
    style = ttk.Style()
&nbsp;
    <i># run the application</i>
    app = Example7App(root)
    app.run()
</pre>

<p><div class="rs-tip-major">Poznámka: podobnost obou zdrojových kódů spočívá
v&nbsp;tom, že Pygubu nám nabízí vývojářům jednu cestu, kterou je možné se bez
problémů ubírat (i když nám na druhou stranu další možnosti aktivně
neblokuje).</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vygenerování kódu založeného na knihovně Tkinter</h2>

<p>Druhé tlačítko, které na tabu <strong>Code</strong> nalezneme, se jmenuje
<strong>Code Script</strong>. Toto tlačítko taktéž vygeneruje zdrojový kód,
ovšem tento zdrojový kód již na knihovně <i>pygubu</i> nezávisí &ndash; jedinou
závislostí je knihovna <i>Tkinter</i>, která je v&nbsp;Pythonu standardní. To
vlastně znamená, že následující (vygenerovaný) kód by měl být spustitelný na
každém počítači se standardně nainstalovaným Pythonem:</p>

<pre>
import tkinter as tk
import tkinter.ttk as ttk
&nbsp;
&nbsp;
class <strong>Example7App</strong>:
    def <strong>__init__</strong>(self, master=None):
        <i># build ui</i>
        self.MainWindow = ttk.Frame(master)
        self.ok_cancel = ttk.Button(self.MainWindow)
        self.ok_cancel.configure(text='Ok + Cancel')
        self.ok_cancel.grid(column='0', row='0', sticky='ew')
        self.ok_cancel.configure(command=self.on_button_ok_cancel_click)
        self.retry_cancel = ttk.Button(self.MainWindow)
        self.retry_cancel.configure(text='Retry + Cancel')
        self.retry_cancel.grid(column='1', row='0', sticky='ew')
        self.retry_cancel.configure(command=self.on_button_retry_cancel_click)
        self.yes_no = ttk.Button(self.MainWindow)
        self.yes_no.configure(text='Yes + No')
        self.yes_no.grid(column='0', row='1', sticky='ew')
        self.yes_no.configure(command=self.on_button_yes_no_click)
        self.exit = ttk.Button(self.MainWindow)
        self.exit.configure(style='Red.TButton', text='Exit')
        self.exit.grid(column='1', row='4', sticky='ew')
        self.exit.configure(command=self.on_button_exit_click)
        self.question = ttk.Button(self.MainWindow)
        self.question.configure(text='Question')
        self.question.grid(column='1', row='1', sticky='ew')
        self.question.configure(command=self.on_button_question_click)
        self.MainWindow.configure(height='200', width='200')
        self.MainWindow.pack(side='top')
&nbsp;
        <i># Main widget</i>
        self.mainwindow = self.MainWindow
&nbsp;
    def <strong>on_button_ok_cancel_click</strong>(self):
        pass
&nbsp;
    def <strong>on_button_retry_cancel_click</strong>(self):
        pass
&nbsp;
    def <strong>on_button_yes_no_click</strong>(self):
        pass
&nbsp;
    def <strong>on_button_exit_click</strong>(self):
        pass
&nbsp;
    def <strong>on_button_question_click</strong>(self):
        pass
&nbsp;
    def <strong>run</strong>(self):
        self.mainwindow.mainloop()
&nbsp;
if __name__ == '__main__':
    import tkinter as tk
    root = tk.Tk()
    app = Example7App(root)
    app.run()
</pre>

<p><div class="rs-tip-major">Poznámka: po doplnění kódů callback metod se bude
jednat o plně přenositelný skript.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Práce s&nbsp;dialogem obsahujícím zaškrtávací pole</h2>

<p>Nyní již umíme reagovat na výběr těch ovládacích prvků, které přímo spouští
nějakou akci. Typicky se jedná o položky menu a taktéž o příkazová tlačítka.
Ovšem mnohdy se setkáme s&nbsp;nutností použít i zaškrtávací pole neboli
<i>checkboxy</i>. I tyto prvky (<i>widgety</i>) pochopitelně v&nbsp;knihovně
Tkinter existují a jsou přímo podporovány i Pygubu designerem. Vytvoříme si
tedy návrh aplikace se třemi zaškrtávacími poli a taktéž s&nbsp;tlačítkem,
které bude použito pro zobrazení stavu všech polí:</p>

*** image ***
<p><i>Obrázek 5: Návrh grafického uživatelského rozhraní aplikace se třemi
zaškrtávacími poli.</i></p>

*** image ***
<p><i>Obrázek 6: Tlačítko <strong>Display Selections</strong> spustí callback
metodu <strong>on_button_display_selections_click</strong>.</i></p>

*** image ***
<p><i>Obrázek 7: Pro změnu oproti předchozímu demonstračními příkladu nyní
použijeme pack layout manager, kde u tlačítek zvolíme, že v&nbsp;horizontálním
směru mají vyplnit celou šířku okna (parametr <strong>fill</strong>).</i></p>

<p>Výsledný soubor s&nbsp;popisem návrhu grafického uživatelského rozhraní
aplikace by měl vypadat následovně:</p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface version="1.1"&gt;
  &lt;object class="ttk.Frame" id="MainWindow"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout manager="pack"&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="side"&gt;top&lt;/property&gt;
    &lt;/layout&gt;
    &lt;child&gt;
      &lt;object class="ttk.Checkbutton" id="checkbutton_a"&gt;
        &lt;property name="text" translatable="yes"&gt;Selection A&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Checkbutton" id="checkbutton_b"&gt;
        &lt;property name="text" translatable="yes"&gt;Selection B&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Checkbutton" id="checkbutton_c"&gt;
        &lt;property name="text" translatable="yes"&gt;Selection C&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="button_display_values"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_display_selections_click&lt;/property&gt;
        &lt;property name="compound"&gt;left&lt;/property&gt;
        &lt;property name="image"&gt;display.png&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Display selections&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="expand"&gt;true&lt;/property&gt;
          &lt;property name="fill"&gt;x&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="button_quit"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_quit_button_click&lt;/property&gt;
        &lt;property name="compound"&gt;left&lt;/property&gt;
        &lt;property name="image"&gt;application-exit.png&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Quit&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="expand"&gt;true&lt;/property&gt;
          &lt;property name="fill"&gt;x&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Kostra demonstračního příkladu pro zobrazení dialogu se zaškrtávacími poli</h2>

<p>Nejprve si ukažme kostru demonstračního příkladu, který po svém spuštění
zobrazí dialog se zaškrtávacími poli. Prozatím jsou implementovány pouze dvě
operace &ndash; reakce na stisk tlačítka pro ukončení aplikace a reakce na
stisk klávesové zkratky <strong>Ctrl+Q</strong> se stejným významem &ndash;
okamžité ukončení aplikace:</p>

<pre>
<i>"""Pygubu and Tkinter: using check boxes."""</i>
&nbsp;
<i># Example8.py</i>
&nbsp;
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example8App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui</strong>(self):
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example8.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step $4: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
        root.bind('&lt;Control-q&gt;', lambda event: self.on_quit_button_click())
&nbsp;
    def <strong>on_quit_button_click</strong>(self):
        root.destroy()
&nbsp;
    def <strong>on_button_display_selections_click</strong>(self):
        pass
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    <i># style</i>
    style = ttk.Style()
&nbsp;
    <i># run the application</i>
    app = Example8App(root)
    app.run()
</pre>

*** image ***
<p><i>Obrázek 8: Po spuštění příkladu je zřejmé, že zaškrtávací pole mají tři
stavy.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Automatické nastavení proměnných při změně stavu zaškrtávacího pole</h2>

<p>Velmi praktická je další vlastnost widgetu <strong>checkbutton</strong>.
Stav přepínacího tlačítka je totiž možné navázat na vybranou proměnnou, která
tak bude automaticky sledovat jeho stav. Pokud je tlačítko nastaveno (je
v&nbsp;něm znak &times; nebo &check;), bude do proměnné implicitně vložena
hodnota 1, pokud je naopak nenastaveno, nastaví se nulová hodnota. Sledující
proměnnou je v&nbsp;případě přímého použití knihovny <i>Tkinter</i> nutné
vytvořit konstruktorem <strong>tkinter.IntVar()</strong> a specifikovat ji
pojmenovaným parametrem <strong>variable</strong>:</p>

<pre>
<strong>delete_internet = tkinter.IntVar()</strong>
&nbsp;
checkbutton = ttk.Checkbutton(root, text="Delete Internet?",
                              <strong>variable=delete_internet</strong>)
</pre>

<p>K&nbsp;hodnotě sledující proměnné se můžeme dostat s&nbsp;využitím getteru,
tedy metody <strong>get()</strong>:</p>

<pre>
checkbutton = ttk.Checkbutton(root, text="Delete Internet?",
                              variable=delete_internet,
                              command=<strong>lambda: print(delete_internet.get())</strong>)
</pre>

<p>V&nbsp;Pygubu designeru se toto chování nastavuje s&nbsp;využitím vlastnosti
<strong>variable</strong>. Navíc je možné zvolit hodnotu proměnné ve chvíli,
kdy je tlačítko vybráno (zašrkrtnuto) a kdy nikoli:</p>

*** image ***
<p><i>Obrázek 9: Nastavení vlastností zaškrtávacího tlačítka.</i></p>

<p>Soubor s&nbsp;návrhem grafického uživatelského rozhraní se změní
následujícím způsobem:</p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface version="1.1"&gt;
  &lt;object class="ttk.Frame" id="MainWindow"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout manager="pack"&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="side"&gt;top&lt;/property&gt;
    &lt;/layout&gt;
    &lt;child&gt;
      &lt;object class="ttk.Checkbutton" id="checkbutton_a"&gt;
        <strong>&lt;property name="offvalue"&gt;no&lt;/property&gt;</strong>
        <strong>&lt;property name="onvalue"&gt;yes&lt;/property&gt;</strong>
        &lt;property name="state"&gt;normal&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Selection A&lt;/property&gt;
        <strong>&lt;property name="variable"&gt;string:checkbutton_a&lt;/property&gt;</strong>
        &lt;layout manager="pack"&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Checkbutton" id="checkbutton_b"&gt;
        <strong>&lt;property name="offvalue"&gt;no&lt;/property&gt;</strong>
        <strong>&lt;property name="onvalue"&gt;yes&lt;/property&gt;</strong>
        &lt;property name="state"&gt;normal&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Selection B&lt;/property&gt;
        <strong>&lt;property name="variable"&gt;string:checkbutton_b&lt;/property&gt;</strong>
        &lt;layout manager="pack"&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Checkbutton" id="checkbutton_c"&gt;
        <strong>&lt;property name="offvalue"&gt;no&lt;/property&gt;</strong>
        <strong>&lt;property name="onvalue"&gt;yes&lt;/property&gt;</strong>
        &lt;property name="state"&gt;normal&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Selection C&lt;/property&gt;
        <strong>&lt;property name="variable"&gt;string:checkbutton_c&lt;/property&gt;</strong>
        &lt;layout manager="pack"&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="button_display_values"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_display_selections_click&lt;/property&gt;
        &lt;property name="compound"&gt;left&lt;/property&gt;
        &lt;property name="image"&gt;display.png&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Display selections&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="expand"&gt;true&lt;/property&gt;
          &lt;property name="fill"&gt;x&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="button_quit"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_quit_button_click&lt;/property&gt;
        &lt;property name="compound"&gt;left&lt;/property&gt;
        &lt;property name="image"&gt;application-exit.png&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Quit&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="expand"&gt;true&lt;/property&gt;
          &lt;property name="fill"&gt;x&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zobrazení aktuálního stavu zaškrtávacích polí</h2>

<p>V&nbsp;následujícím demonstračním příkladu je ukázáno, jakým způsobem lze
zjistit aktuální stav zaškrtávacích polí. Nejprve přistoupíme k&nbsp;atributu
<strong>tkvariables</strong> objektu <strong>builder</strong>:</p>

<pre>
vars = self.builder.tkvariables
</pre>

<p>Následně se k&nbsp;proměnným knihovny Tkinter přistupuje následovně:</p>

<pre>
vars["checkbutton_a"].get()
vars["checkbutton_b"].get()
vars["checkbutton_c"].get()
</pre>

<p>Konkrétně tedy můžeme snadno připravit zprávu pro dialogový box:</p>

<pre>
message = \
    "Checkbutton A: {}\n" \
    "Checkbutton B: {}\n" \
    "Checkbutton C: {}\n".format(vars["checkbutton_a"].get(),
                                 vars["checkbutton_b"].get(),
                                 vars["checkbutton_c"].get())
</pre>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
<i>"""Pygubu and Tkinter: using check boxes."""</i>
&nbsp;
<i># Example9A.py</i>
&nbsp;
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example9App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui</strong>(self):
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example9.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
        root.bind('&lt;Control-q&gt;', lambda event: self.on_quit_button_click())
&nbsp;
    def on_quit_button_click(self):
        root.destroy()
&nbsp;
    def <strong>on_button_display_selections_click</strong>(self):
        vars = self.builder.tkvariables
&nbsp;
        message = \
            "Checkbutton A: {}\n" \
            "Checkbutton B: {}\n" \
            "Checkbutton C: {}\n".format(vars["checkbutton_a"].get(),
                                         vars["checkbutton_b"].get(),
                                         vars["checkbutton_c"].get())
        messagebox.askokcancel("askokcancel()", message)
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    <i># style</i>
    style = ttk.Style()
&nbsp;
    <i># run the application</i>
    app = Example9App(root)
    app.run()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Nastavení výchozího stavu zaškrtávacích polí</h2>

<p>Výchozí stav zaškrtávacích polí je opět možné nastavit přes proměnné, které
knihovna <i>Tkinter</i> sleduje popř.&nbsp;nastavuje. V&nbsp;našem konkrétním
příkladu, v&nbsp;němž máme definovány tři sledovací proměnné
<strong>checkbutton_a</strong>, <strong>checkbutton_b</strong> a
<strong>checkbutton_c</strong> pro trojici zaškrtávacích polí, se jejich
nastavení do zvoleného výchozího stavu provede následujícím způsobem:</p>

<pre>
vars = self.builder.tkvariables
&nbsp;
vars["checkbutton_a"].set("no")
vars["checkbutton_b"].set("no")
vars["checkbutton_c"].set("no")
</pre>

<p>Demonstrační příklad lze upravit takto (viz zvýrazněné části):</p>

<pre>
<i>"""Pygubu and Tkinter: using check boxes."""</i>
&nbsp;
<i># Example9B.py</i>
&nbsp;
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example9App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui</strong>(self):
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example9.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
        <i># step #5: Set variables</i>
        <strong>vars = self.builder.tkvariables</strong>
        <strong>vars["checkbutton_a"].set("no")</strong>
        <strong>vars["checkbutton_b"].set("no")</strong>
        <strong>vars["checkbutton_c"].set("no")</strong>
&nbsp;
        root.bind('&lt;Control-q&gt;', lambda event: self.on_quit_button_click())
&nbsp;
    def <strong>on_quit_button_click</strong>(self):
        root.destroy()
&nbsp;
    def <strong>on_button_display_selections_click</strong>(self):
        vars = self.builder.tkvariables
&nbsp;
        message = \
            "Checkbutton A: {}\n" \
            "Checkbutton B: {}\n" \
            "Checkbutton C: {}\n".format(vars["checkbutton_a"].get(),
                                         vars["checkbutton_b"].get(),
                                         vars["checkbutton_c"].get())
        messagebox.askokcancel("Selections", message)
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    <i># style</i>
    style = ttk.Style()
&nbsp;
    <i># run the application</i>
    app = Example9App(root)
    app.run()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Widget představující vstupní textové pole</h2>

<p>S&nbsp;využitím widgetu typu <strong>entry</strong> je možné v&nbsp;okně či
dialogu zobrazit jeden řádek textu. Od staticky pojatého widgetu
<strong>label</strong> se tento widget liší především v&nbsp;tom, že zobrazený
řádek textu je možné editovat. Při editaci jsou k&nbsp;dispozici základní
klávesy pro pohyb kurzoru (šipka doleva, šipka doprava, klávesa [Home] a
klávesa [End]) a mimo jiné také další klávesové zkratky, které jsou známé
například z&nbsp;shellu či editoru <strong>Emacs</strong>, <strong>Joe</strong>
a <strong>Pico</strong>: [Ctrl+A] (posun na začátek textu), [Ctrl+E] (posun na
konec textu). K tomu připočítejme dnes již standardní klávesy pro práci se
schránkou: [Ctrl+C], [Ctrl+V] a [Ctrl+X] a na některých systémech i kombinace
kláves [Ctrl+Insert], [Shift+Insert] a [Shift+Delete]. Bude ovšem fungovat i
použití výběru, tedy stisk prostředního tlačítka myši vloží obsah výběru do
widgetu <strong>entry</strong>.</p>

<p><div class="rs-tip-major">Poznámka: pozor je nutné dát na to, že dochází
k&nbsp;některým kolizím s&nbsp;dalšími ustálenými zkratkami. Týká se to
především zkratky [Ctrl+A] pro přesun kurzoru na začátek textu v&nbsp;textovém
poli versus rozšíření výběru na celé textové pole.</div></p>

<p>Text se do widgetu přiřazuje metodou <strong>insert</strong>:</p>

<pre>
entry = ttk.Entry(root)
entry.insert(0, "xyzzy")
</pre>

<p>I k&nbsp;widgetu <i>entry</i> je možné zaregistrovat &bdquo;sledovací
proměnnou&ldquo;, jejíž hodnota bude reflektovat stav textu v&nbsp;tomto prvku.
Sledovací proměnná bude mít typ <strong>StringVar</strong>:</p>

<pre>
value = tkinter.StringVar()
</pre>

<p>Nastavení sledování:</p>

<pre>
entry = ttk.Entry(root, textvariable=value)
</pre>

<p>Podobně lze postupovat i při použití Pygube designeru. Nejprve si ukažme,
jak se textové pole vloží do formuláře a jak se definuje okraj okolo tohoto
widgetu (textové pole je totiž jedním z&nbsp;widgetů, které typicky okolo sebe
nějaký okraj vyžaduje kvůli vzhledu):</p>

*** image ***
<p><i>Obrázek 10: Návrh dialogu se vstupním textovým polem.</i></p>

*** image ***
<p><i>Obrázek 11: Úprava widgetu takovým způsobem, aby okolo něj vznikl
nevyužitý okraj, který widget vizuálně odděluje od svého okolí.</i></p>

<p>Výsledný soubor s&nbsp;návrhem formuláře vypadá takto:</p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface version="1.1"&gt;
  &lt;object class="ttk.Frame" id="MainWindow"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout manager="pack"&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="side"&gt;top&lt;/property&gt;
    &lt;/layout&gt;
    &lt;child&gt;
      &lt;object class="ttk.Entry" id="text_entry"&gt;
        &lt;property name="textvariable"&gt;string:input_text&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="anchor"&gt;center&lt;/property&gt;
          &lt;property name="padx"&gt;10&lt;/property&gt;
          &lt;property name="pady"&gt;10&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="button_display_text"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_display_text_click&lt;/property&gt;
        &lt;property name="compound"&gt;left&lt;/property&gt;
        &lt;property name="image"&gt;display.png&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Display text&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="expand"&gt;true&lt;/property&gt;
          &lt;property name="fill"&gt;x&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="button_quit"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_quit_button_click&lt;/property&gt;
        &lt;property name="compound"&gt;left&lt;/property&gt;
        &lt;property name="image"&gt;application-exit.png&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Quit&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="expand"&gt;true&lt;/property&gt;
          &lt;property name="fill"&gt;x&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Realizace formuláře s&nbsp;textovým polem</h2>

<p>Podívejme se nyní na způsob realizace programové části formuláře, který
obsahuje textové pole. Při inicializaci formuláře nastavíme sledovací proměnnou
nazvanou <strong>input_text</strong> na zvolenou výchozí hodnotu, což se ihned
projeví i ve vlastním formuláři zobrazeném uživateli:</p>

<pre>
vars = self.builder.tkvariables
vars["input_text"].set("")
</pre>

<p>Následně implementujeme tělo callback metody zavolané ve chvíli, kdy
uživatel klikne na tlačítko určené pro zobrazení aktuálního obsahu textového
pole. Vše je opět vyřešeno přes sledovací proměnnou:</p>

<pre>
<strong>def on_button_display_text_click(self):</strong>
    vars = self.builder.tkvariables
    text = vars["input_text"].get()
</pre>

<p>Úplný zdrojový kód v&nbsp;pořadí již desátého demonstračního příkladu vypadá
následovně. Zvýrazněny jsou ty části kódu, které se týkají zpracování textu
z&nbsp;textového pole:</p>

<pre>
<i>"""Pygubu and Tkinter: text entry."""</i>
&nbsp;
<i># Example10.py</i>
&nbsp;
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example10App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui</strong>(self):
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('exampleA.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
        <i># step #5: Set variables</i>
        vars = self.builder.tkvariables
        vars["input_text"].set("")
&nbsp;
        root.bind('&lt;Control-q&gt;', lambda event: self.on_quit_button_click())
&nbsp;
    def <strong>on_quit_button_click</strong>(self):
        root.destroy()
&nbsp;
    def <strong>on_button_display_text_click</strong>(self):
        vars = self.builder.tkvariables
        text = vars["input_text"].get()
&nbsp;
        messagebox.askokcancel("Text entered by user:", text)
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    <i># style</i>
    style = ttk.Style()
&nbsp;
    <i># run the application</i>
    app = Example10App(root)
    app.run()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Průběžná validace textu zapisovaného do textového pole</h2>

<p>V&nbsp;mnoha aplikacích se setkáme s&nbsp;požadavkem na textové pole, jehož
vstup je nějakým způsobem omezený (a následně validovaný). Příkladem může být
textové pole určené pro zápis kladného čísla, pole pro vstup rodného čísla,
čísla platební karty atd. atd. I tuto kontrolu je možné v&nbsp;knihovně Tkinter
zajistit &ndash; a to buď průběžně (již v&nbsp;průběhu zadávání textu) nebo až
následně, po ukončení zadávání (a oba způsoby mají své pro i proti). Ukážeme si
způsob průběžné validace textu přímo při jeho zápisu, což vlastně znamená, že
neplatné znaky nebude vůbec možné do textového pole vložit:</p>

*** image ***
<p><i>Obrázek 12: Nastavení validace zapisovaného textu. Pokud je zapotřebí
zajistit kontrolu prováděnou ihned při zápisu jednotlivých znaků, je nutné ve
vlastnosti <strong>validate</strong> zvolit volbu <strong>key</strong>.</i></p>

*** image ***
<p><i>Obrázek 13: Specifikace argumentu předávaného validátoru. Hodnota
zadávaná do textového pole bude průběžně posílána do zvolené callback metody
nazvaný <strong>validate_input_text</strong>. To zajišťuje parametr
<strong>%P</strong>.</i></p>

<p>Výsledný návrh formuláře, který nyní obsahuje i specifikaci <i>chování</i>
(což je důležité &ndash; chování GUI je součástí návrhu GUI a nikoli logiky
aplikace), bude vypadat takto:</p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface version="1.1"&gt;
  &lt;object class="ttk.Frame" id="MainWindow"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout manager="pack"&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="side"&gt;top&lt;/property&gt;
    &lt;/layout&gt;
    &lt;child&gt;
      &lt;object class="ttk.Entry" id="text_entry"&gt;
        &lt;property name="textvariable"&gt;string:input_text&lt;/property&gt;
        &lt;property name="validate"&gt;key&lt;/property&gt;
        &lt;property args="%P" cbtype="entry_validate" name="validatecommand" type="command"&gt;validate_input_text&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="anchor"&gt;center&lt;/property&gt;
          &lt;property name="padx"&gt;10&lt;/property&gt;
          &lt;property name="pady"&gt;10&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="button_display_text"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_display_text_click&lt;/property&gt;
        &lt;property name="compound"&gt;left&lt;/property&gt;
        &lt;property name="image"&gt;display.png&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Display text&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="expand"&gt;true&lt;/property&gt;
          &lt;property name="fill"&gt;x&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="button_quit"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_quit_button_click&lt;/property&gt;
        &lt;property name="compound"&gt;left&lt;/property&gt;
        &lt;property name="image"&gt;application-exit.png&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Quit&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="expand"&gt;true&lt;/property&gt;
          &lt;property name="fill"&gt;x&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Realizace formuláře s&nbsp;validovaným textovým polem</h2>

<p>Metoda určená pro průběžnou validaci zadávaného textu bude kontrolovat, zda
text obsahuje číslice popř.&nbsp;jestli je textové pole prázdné (což je výchozí
stav). Implementace validátoru je v&nbsp;tomto případě triviální, protože
výsledek validace odpovídá návratové hodnotě validátoru:</p>

<pre>
def <strong>validate_input_text</strong>(self, value):
    if value.isdigit():
        return True
    elif value is "":
        return True
    else:
        return False
</pre>

<p><div class="rs-tip-major">Poznámka: pochopitelně je možné přidat další
validátor použitý PO zápisu textu, tj.&nbsp;ve chvíli, kdy textové pole ztratí
<i>fokus</i>. V&nbsp;takovém případě bychom kontrolovali (či mohli kontrolovat)
i to, zda není textové pole prázdné.</div></p>

<p>Úplný zdrojový kód takto upraveného demonstračního příkladu vypadá
následovně:</p>

<pre>
<i>"""Pygubu and Tkinter: text entry and validators."""</i>
&nbsp;
<i># Example11.py</i>
&nbsp;
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example11App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui</strong>(self):
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('exampleB.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
        <i># step #5: Set variables</i>
        vars = self.builder.tkvariables
        vars["input_text"].set("")
&nbsp;
        root.bind('&lt;Control-q&gt;', lambda event: self.on_quit_button_click())
&nbsp;
    def <strong>on_quit_button_click</strong>(self):
        root.destroy()
&nbsp;
    def <strong>on_button_display_text_click</strong>(self):
        vars = self.builder.tkvariables
        text = vars["input_text"].get()
&nbsp;
        messagebox.askokcancel("Text entered by user:", text)
&nbsp;
    def <strong>validate_input_text</strong>(self, value):
        if value.isdigit():
            return True
        elif value is "":
            return True
        else:
            return False
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    <i># style</i>
    style = ttk.Style()
&nbsp;
    <i># run the application</i>
    app = Example11App(root)
    app.run()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Práce s&nbsp;grafikou v&nbsp;knihovně Tkinter</h2>

<p>Práci s&nbsp;grafikou můžeme chápat ve dvou úrovních. Na vyšší úrovni
manipulujeme s&nbsp;jednotlivými geometricky popsanými tvary, jakými jsou
například úsečka, obdélník, kruh, text či spline křivka. Každému tvaru může být
přiřazeno značné množství atributů, jedná se například o tloušťku čáry, kterou
je vykreslena hranice objektu, barva a styl výplně uzavřených objektů či font
vykreslovaného textu. Na úrovni nižší se může manipulovat přímo s&nbsp;pixely,
které tvoří zobrazovaný rastrový obrázek. V&nbsp;knihovně <i>Tkinter</i> je pro
práci na vyšší úrovni určen widget <strong>canvas</strong> spolu s&nbsp;dalšími
objektu, na nižší úrovni pak widgety (resp.&nbsp;objekty)
<strong>bitmap</strong>, <strong>image</strong> a <strong>photo</strong>.
Objekt typu <strong>image</strong> přitom zapouzdřuje více typů obrázků, od
monochromatického <strong>BitmapImage</strong> přes vícebarevný
<strong>PhotoImage</strong> až po uživatelsky vytvářené formáty.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Widget <strong>canvas</strong></h2>

<p>Jak jsme si již řekli v&nbsp;<a href="#k13">předchozí kapitole</a>, je pro
práci s&nbsp;grafikou na vyšší úrovni nabízen v&nbsp;knihovně <i>Tkinter</i>
widget <strong>canvas</strong>, česky bychom mohli tento název přeložit jako
(malířské) <strong>plátno</strong>. Nenechte se ovšem zmýlit tímto názvem,
který má v&nbsp;jiných programových knihovnách odlišný (většinou jednodušší)
význam, zde se skutečně jedná o velmi mocný widget, který současně slouží jako
kontejner pro další objekty.</p>

<p>Vkládané objekty si své vlastnosti zachovávají, tj.&nbsp;lze s&nbsp;nimi i
po jejich vykreslení interaktivně i programově pohybovat, měnit jejich
vlastnosti apod. K&nbsp;tomu musíme připočítat možnost uložit celé plátno do
PostScriptového souboru se zachováním vektorových charakteristik plátna
(tj.&nbsp;neprovádí se ztrátový převod na bitmapy). To mj.&nbsp;znamená, že se
vlastnosti <strong>canvasu</strong> do určité míry podobají použití SVG na
webových stránkách; naproti tomu &bdquo;webový canvas&ldquo; je vlastně pouze
bitmapa, do níž se objekty vykreslují a ihned po jejich vykreslení se jejich
vlastnosti ztratí (zůstanou jen barevné pixely).</p>

<p>Každý objekt, který je na plátno umístěn, musí mít specifikovány souřadnice
počátečního a koncového bodu, v&nbsp;případě lomených čar, spline křivek a
polygonů se samozřejmě specifikuje bodů více. Souřadnice bodů mohou být zadány
pomocí více jednotek, jež se rozlišují podle jednoho písmene zapsaného za
numerickou hodnotou (hodnoty jsou samozřejmě platné pouze při správně
nakalibrované obrazovce, což kupodivu mnoho systémů dodnes nedodržuje):</p>

<table>
<tr><th>Přípona</th><th>Význam</th></tr>
<tr><td><strong>m</strong></td><td>milimetry</td></tr>
<tr><td><strong>c</strong></td><td>centimetry</td></tr>
<tr><td><strong>i</strong></td><td>palce</td></tr>
<tr><td><strong>p</strong></td><td>body (implicitní hodnota)</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že potřebujete použít
například milimetry, je nutné souřadnice zapisovat do řetězce.</div></p>

<p>V&nbsp;následující tabulce je ukázáno, jaké objekty je možné na plátno
pokládat (a tím je vlastně ihned vykreslit):</p>

<table>
<tr><th>Jméno objektu</th><th>Význam</th></tr>
<tr><td><strong>arc</strong></td><td>kruhový nebo eliptický oblouk</td></tr>
<tr><td><strong>bitmap</strong></td><td>bitmapový obrázek</td></tr>
<tr><td><strong>image</strong></td><td>obecně vícebarevný rastrový obrázek</td></tr>
<tr><td><strong>line</strong></td><td>úsečka, lomená úsečka nebo dokonce hladká spline křivka (!)</td></tr>
<tr><td><strong>oval</strong></td><td>uzavřená kružnice nebo elipsa</td></tr>
<tr><td><strong>polygon</strong></td><td>uzavřený polygon či tvar vytvořený ze spline křivek</td></tr>
<tr><td><strong>rectangle</strong></td><td>čtverec nebo obdélník</td></tr>
<tr><td><strong>text</strong></td><td>textový řetězec</td></tr>
<tr><td><strong>window</strong></td><td>vnořené okno se samostatným řízením</td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Realizace formuláře s&nbsp;kreslicím plátnem (canvasem)</h2>

<p>Pro otestování některých možností, které nám kreslicí plátno nabízí,
vytvoříme jednoduchý formulář, který bude prozatím obsahovat pouze vlastní
plátno a taktéž tlačítko sloužící pro ukončení činnosti aplikace:</p>

*** image ***
<p><i>Obrázek 14: Návrh dialogu s&nbsp;jediným tlačítkem a s&nbsp;kreslicí
plochou.</i></p>

<p>Vlastní návrh formuláře je v&nbsp;tomto případě skutečně triviální:</p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface version="1.1"&gt;
  &lt;object class="ttk.Frame" id="MainWindow"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout manager="pack"&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="side"&gt;top&lt;/property&gt;
    &lt;/layout&gt;
    &lt;child&gt;
      <strong>&lt;object class="tk.Canvas" id="canvas"&gt;</strong>
        <strong>&lt;layout manager="pack"&gt;</strong>
          <strong>&lt;property name="propagate"&gt;True&lt;/property&gt;</strong>
          <strong>&lt;property name="side"&gt;top&lt;/property&gt;</strong>
        <strong>&lt;/layout&gt;</strong>
      <strong>&lt;/object&gt;</strong>
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="quit"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_quit_button_click&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Quit&lt;/property&gt;
        &lt;layout manager="pack"&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="side"&gt;top&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že jsme opět využili
správce geometrie <i>pack</i> a nikoli <i>grid</i>, i když naprosto stejného
výsledku lze dosáhnout s&nbsp;využitím obou správců.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. První skript, který zobrazí formulář s&nbsp;prázdným kreslicím plátnem</h2>

<p>Skript, který bez dalších operací pouze zobrazí formulář obsahující prázdné
kreslicí plátno a bude očekávat uzavření formuláře (a tím pádem i ukončení celé
aplikace), bude vypadat následovně:</p>

<pre>
<i>"""Pygubu and Tkinter: changing style."""</i>
&nbsp;
<i># Example12.py</i>
&nbsp;
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example12App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui</strong>(self):
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('exampleC.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
        root.bind('&lt;Control-q&gt;', lambda event: self.on_quit_button_click())
&nbsp;
    def <strong>on_quit_button_click</strong>(self):
        root.destroy()
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    <i># style</i>
    style = ttk.Style()
&nbsp;
    <i># run the application</i>
    app = Example12App(root)
    app.run()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Kreslení na plátno</h2>

<p>V&nbsp;následujícím demonstračním příkladu je ukázáno jednoduché použití
plátna, na které jsou s&nbsp;využitím metody
<strong>create_TYP_OBJEKTU</strong> vloženy jednoduché objekty &ndash; úsečka,
kruh, text, polygon atd.. Vzhledem k&nbsp;tomu, že se při specifikaci souřadnic
neuvádí u číselných hodnot žádná přípona (používáme celá čísla), předpokládá
se, že jsou všechny hodnoty zapsané v&nbsp;bodech (pixelech). To také znamená,
že na různých obrazovkách a při různých rozlišeních budou mít nakreslené
objekty jinou velikost, což nám v&nbsp;tomto případě nemusí vadit.</p>

<p></p>

*** image ***
<p><i>Obrázek 15: Nastavení minimální výšky kreslicího plátna.</i></p>

<p></p>

<pre>
<i>"""Pygubu and Tkinter: changing style."""</i>
&nbsp;
<i># Example13.py</i>
&nbsp;
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example13App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui</strong>(self):
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('exampleD.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
        root.bind('&lt;Control-q&gt;', lambda event: self.on_quit_button_click())
        root.bind('&lt;Control-d&gt;', lambda event: self.on_draw_button_click())
&nbsp;
    def <strong>on_quit_button_click</strong>(self):
        root.destroy()
&nbsp;
    def <strong>on_draw_button_click</strong>(self):
        canvas = self.builder.get_object("canvas")
&nbsp;
        width = canvas.winfo_width()
        height = canvas.winfo_height()
        grid_size = 30
&nbsp;
        <i># draw something onto canvas</i>
        for x in range(0, width, grid_size):
            canvas.create_line(x, 0, x, height, dash=7, fill="gray")
        for y in range(0, height, grid_size):
            canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
        canvas.create_line(0, 0, 100, 100, fill='red', width=2, dash=8)
&nbsp;
        canvas.create_arc(100, 1, 200, 100, outline='blue', start=45,
                          extent=180, style=tk.ARC, width=2)
&nbsp;
        canvas.create_oval(200, 1, 300, 100)
&nbsp;
        canvas.create_oval(325, 25, 375, 75, fill="#a0a0ff")
&nbsp;
        canvas.create_rectangle(50, 125, 150, 175, fill="#a0a0ff")
&nbsp;
        canvas.create_text(300, 150, text="Hello world!", font="Helvetica 20")
&nbsp;
        canvas.create_polygon(50, 205, 200, 280, 50, 355, fill="#80ff80")
&nbsp;
        canvas.create_polygon(230, 205, 370, 280, 230, 355, fill="black",
                              outline="red", width="5")
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    <i># style</i>
    style = ttk.Style()
&nbsp;
    <i># run the application</i>
    app = Example13App(root)
    app.run()
</pre>

*** image ***
<p><i>Obrázek 16: Vykreslení základních obrazců na plátno.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Ukázka dalších možností kreslicího plátna</h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech předminule, minule i dnes popsaných demonstračních
příkladů určených pro Python 3 a nejnovější stabilní verzi knihovny Pygubu (a
pochopitelně i pro Pygubu designer) byly uloženy do Git repositáře dostupného
na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Ovládací prvky vložené do hlavního okna aplikace</td><td>&nbsp;</td></tr>
<tr><td> 1</td><td>example1.ui</td><td>soubor s&nbsp;návrhem GUI prvního demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.ui</a></td></tr>
<tr><td> 2</td><td>example1.py</td><td>implementace prvního demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Menu, jehož jednotlivé položky obsahují i ikony</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>example2.ui</td><td>soubor s&nbsp;návrhem GUI druhého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2.ui</a></td></tr>
<tr><td> 4</td><td>example2A.py</td><td>implementace třetího demonstračního příkladu (bez menu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2A.py</a></td></tr>
<tr><td> 5</td><td>example2B.py</td><td>implementace třetího demonstračního příkladu (nespecifikován adresář s&nbsp;ikonami)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2B.py</a></td></tr>
<tr><td> 6</td><td>example2C.py</td><td>implementace třetího demonstračního příkladu (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2C.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Menu, jehož položky volají zvolené metody</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>example3.ui</td><td>soubor s&nbsp;návrhem GUI třetího demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.ui</a></td></tr>
<tr><td> 8</td><td>example3.py</td><td>implementace třetího demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&bdquo;Odtrhávací&ldquo; menu</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>example4.ui</td><td>soubor s&nbsp;návrhem GUI čtvrtého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example4.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example4.ui</a></td></tr>
<tr><td>10</td><td>example4.py</td><td>implementace čtvrtého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Klávesové zkratky přiřazené položkám menu</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>example5.ui</td><td>soubor s&nbsp;návrhem GUI pátého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example5.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example5.ui</a></td></tr>
<tr><td>12</td><td>example5.py</td><td>implementace pátého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example5.py</a></td></tr>
<tr><td>13</td><td>example5B.py</td><td>implementace pátého demonstračního příkladu s&nbsp;reakcemi na stisk kláves</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example5B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example5B.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Změna tématu zobrazení za běhu aplikace</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>example6.ui</td><td>soubor s&nbsp;návrhem GUI šestého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example6.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example6.ui</a></td></tr>
<tr><td>15</td><td>example6.py</td><td>implementace šestého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Standardní dialogová okna</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>example7.ui</td><td>soubor s&nbsp;návrhem GUI sedmého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example7.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example7.ui</a></td></tr>
<tr><td>17</td><td>example7.py</td><td>implementace sedmého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Práce s&nbsp;dialogem obsahujícím zaškrtávací pole</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>example8.ui</td><td>soubor s&nbsp;návrhem GUI osmého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example8.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example8.ui</a></td></tr>
<tr><td>19</td><td>example8.py</td><td>implementace osmého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Automatické nastavení proměnných při změně stavu zaškrtávacího pole</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>example9.ui</td><td>soubor s&nbsp;návrhem GUI devátého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example9.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example9.ui</a></td></tr>
<tr><td>21</td><td>example9.py</td><td>implementace devátého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example9.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Realizace formuláře s&nbsp;textovým polem</td><td>&nbsp;</td></tr>
<tr><td>22</td><td>exampleA.ui</td><td>soubor s&nbsp;návrhem GUI desátého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleA.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleA.ui</a></td></tr>
<tr><td>23</td><td>exampleA.py</td><td>implementace desátého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleA.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleA.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Realizace formuláře s&nbsp;validovaným textovým polem</td><td>&nbsp;</td></tr>
<tr><td>24</td><td>exampleB.ui</td><td>soubor s&nbsp;návrhem GUI jedenáctého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleB.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleB.ui</a></td></tr>
<tr><td>25</td><td>exampleB.py</td><td>implementace jedenáctého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleB.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleB.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Realizace formuláře s&nbsp;kreslicím plátnem (canvasem)</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>exampleC.ui</td><td>soubor s&nbsp;návrhem GUI dvanáctého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleC.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleC.ui</a></td></tr>
<tr><td>27</td><td>exampleC.py</td><td>implementace dvanáctého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleC.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleC.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>Kreslení do canvasu</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>exampleD.ui</td><td>soubor s&nbsp;návrhem GUI třináctého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleD.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleD.ui</a></td></tr>
<tr><td>29</td><td>exampleD.py</td><td>implementace třináctého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleD.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/exampleD.py</a></td></tr>
</table>

<p>Ve druhém a třetím demonstračním příkladu, jsou navíc použity i ikony
v&nbsp;menu, stejně jako v&nbsp;příkladech používajících tlačítko pro uzavření
aplikace. Tyto ikony jsou uloženy samostatně ve formátu PNG a měly by být
umístěny do stejného adresáře, ze kterého se spouští aplikace:</p>

<table>
<tr><th>#</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>application-exit.png</td><td>ikona pro položku menu sloužící k&nbsp;ukončení aplikace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/application-exit.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/application-exit.png</a></td></tr>
<tr><td>2</td><td>document-new.png</td><td>ikona pro položku menu File&rarr;New</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-new.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-new.png</a></td></tr>
<tr><td>3</td><td>document-open.png</td><td>ikona pro položku menu File&rarr;Open</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-open.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-open.png</a></td></tr>
<tr><td>4</td><td>edit-copy.png</td><td>ikona pro položku menu Edit&rarr;Copy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-copy.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-copy.png</a></td></tr>
<tr><td>5</td><td>edit-cut.png</td><td>ikona pro položku menu Edit&rarr;Cut</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-cut.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-cut.png</a></td></tr>
<tr><td>6</td><td>edit-paste.png</td><td>ikona pro položku menu Edit&rarr;Paste</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-paste.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-paste.png</a></td></tr>
<tr><td>7</td><td>edit-delete.png</td><td>ikona pro položku menu Edit&rarr;Delete</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-delete.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-delete.png</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td></td><td>&nbsp;</td></tr>
<tr><td>8</td><td>application-exit.png</td><td>ikona pro tlačítko použité pro ukončení aplikace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/application-exit.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/application-exit.png</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Seriál Grafické uživatelské rozhraní v&nbsp;Pythonu<br />
<a href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/</a>
</li>

<li>Pygubu na PyPi<br />
<a href="https://pypi.org/project/pygubu/">https://pypi.org/project/pygubu/</a>
</li>

<li>Repositář projektu Pygubu<br />
<a href="https://github.com/alejandroautalan/pygubu">https://github.com/alejandroautalan/pygubu</a>
</li>

<li>pygubu-designer na PyPi<br />
<a href="https://pypi.org/project/pygubu-designer/">https://pypi.org/project/pygubu-designer/</a>
</li>

<li>Repositář projektu pygubu-designer<br />
<a href="https://github.com/alejandroautalan/pygubu-designer">https://github.com/alejandroautalan/pygubu-designer</a>
</li>

<li>Pygubu Wiki<br />
<a href="https://github.com/alejandroautalan/pygubu/wiki">https://github.com/alejandroautalan/pygubu/wiki</a>
</li>

<li>How to install Tkinter in Python?<br />
<a href="https://www.tutorialspoint.com/how-to-install-tkinter-in-python">https://www.tutorialspoint.com/how-to-install-tkinter-in-python</a>
</li>

<li>Stránky projektu Glade<br />
<a href="https://glade.gnome.org/">https://glade.gnome.org/</a>
</li>

<li>Hra Breakout napísaná v&nbsp;Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Brython aneb použití jazyka Python ve skriptech přímo v prohlížeči<br />
<a href="https://www.root.cz/clanky/brython-aneb-pouziti-jazyka-python-ve-skriptech-primo-v-prohlizeci/">https://www.root.cz/clanky/brython-aneb-pouziti-jazyka-python-ve-skriptech-primo-v-prohlizeci/</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>Rapid application development<br />
<a href="https://en.wikipedia.org/wiki/Rapid_application_development">https://en.wikipedia.org/wiki/Rapid_application_development</a>
</li>

<li>Non-functional requirement<br />
<a href="https://en.wikipedia.org/wiki/Non-functional_requirement">https://en.wikipedia.org/wiki/Non-functional_requirement</a>
</li>

<li>Graphical user interface builder<br />
<a href="https://en.wikipedia.org/wiki/Graphical_user_interface_builder">https://en.wikipedia.org/wiki/Graphical_user_interface_builder</a>
</li>

<li>User interface markup language<br />
<a href="https://en.wikipedia.org/wiki/User_interface_markup_language">https://en.wikipedia.org/wiki/User_interface_markup_language</a>
</li>

<li>Top 10 programming languages that developers hate the most<br />
<a href="https://www.techworm.net/2017/11/perl-hated-programming-language-developers-says-report.html">https://www.techworm.net/2017/11/perl-hated-programming-language-developers-says-report.html</a>
</li>

<li>Raspberry Pi Tutorial: Create your own GUI (Graphical User Interface) with TkInter and Python<br />
<a href="https://www.youtube.com/watch?v=Bvq0LdBn0dY">https://www.youtube.com/watch?v=Bvq0LdBn0dY</a>
</li>

<li>Raspberry Pi Workshop - Chapter 4 - Your First GUI with TkInter and Python<br />
<a href="https://www.youtube.com/watch?v=ap-ABFNCBoE">https://www.youtube.com/watch?v=ap-ABFNCBoE</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

