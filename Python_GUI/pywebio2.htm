<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>PyWebIO: interaktivní webové dialogy a formuláře v čistém Pythonu (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>PyWebIO: interaktivní webové dialogy a formuláře v čistém Pythonu (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. PyWebIO: interaktivní webové dialogy a formuláře v&nbsp;čistém Pythonu (dokončení)</a></p>
<p><a href="#k02">2. Postupné zadávání údajů v&nbsp;na sebe navazujících vstupních prvcích</a></p>
<p><a href="#k03">3. Seskupení ovládacích prvků do jediného formuláře</a></p>
<p><a href="#k04">4. Specifikace typů vstupních dat ve vstupních formulářích</a></p>
<p><a href="#k05">5. Tvorba a využití vlastních validátorů ve vstupních formulářích</a></p>
<p><a href="#k06">6. Zobrazení vyskakovacího okna</a></p>
<p><a href="#k07">7. Alternativní způsob zobrazení vyskakovacího okna</a></p>
<p><a href="#k08">8. Umístění prvků do sloupců, řádků a mřížky</a></p>
<p><a href="#k09">*** 9. Změna stylu vykreslení prvků</a></p>
<p><a href="#k10">*** 10. Sady prvků, které je možné skrýt</a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. PyWebIO: interaktivní webové dialogy a formuláře v&nbsp;čistém Pythonu (dokončení)</h2>

<p>Na <a
href="https://www.root.cz/clanky/pywebio-interaktivni-webove-dialogy-a-formulare-v-cistem-pythonu/">úvodní
článek o knihovně <i>PyWebIO</i></a> dnes navážeme. Nejprve si popíšeme způsob
tvorby složitějších formulářů, které se skládají z&nbsp;většího množství
ovládacích prvků. Zabývat se budeme i kontrolou údajů zapisovaných do
formulářů, a to jak specifikací datových typů (celé číslo, řetězec atd.), tak i
s&nbsp;využitím vlastních <i>validátorů</i> naprogramovaných přímo
v&nbsp;Pythonu a volaných automaticky při vyplňování formulářů.</p>

<a href="https://www.root.cz/obrazek/570474/"><img src="https://i.iinfo.cz/images/625/pywebio-1-21-prev.png" class="image-570474" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="59" /></a>
<p><i>Obrázek 1: Výběrová tlačítka zobrazená ve webové aplikaci vytvořené
s&nbsp;využitím knihovny PyWebIO.</i></p>

<p>Nezapomeneme ale ani na další vlastnosti; například na použití různých forem
výstupů.  Knihovnu <i>PyWebIO</i> je totiž možné v&nbsp;případě potřeby použít
společně s&nbsp;dalšími knihovnami. Například lze relativně jednoduše
realizovat vykreslení grafů do dynamicky generované webové stránky. Pro tento
účel lze využít například knihovnu <a
href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">Matplotlib</a>,
ale taktéž knihovny <i>Bokeh</i>, <i>pyecharts</i>, <i>plotly</i>,
<i>pyg2plot</i> či <i>cutecharts.py</i>.</p>

<a href="https://www.root.cz/obrazek/570473/"><img src="https://i.iinfo.cz/images/625/pywebio-1-20-prev.png" class="image-570473" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="91" /></a>
<p><i>Obrázek 2: Výběrové boxy zobrazené ve webové aplikaci vytvořené
s&nbsp;využitím knihovny PyWebIO.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Postupné zadávání údajů v&nbsp;na sebe navazujících vstupních prvcích</h2>

<p>V&nbsp;prvním demonstračním příkladu, který si v&nbsp;dnešním článku
ukážeme, je realizováno postupné zadávání jednotlivých údajů v&nbsp;na sebe
navazujících vstupních prvcích. Tento přístup nejvíce odpovídá klasickým
skriptům s&nbsp;příkazy <strong>input</strong> a <strong>print</strong>, což je
z&nbsp;vývojářského hlediska sice zcela nejjednodušší řešení, ale pro uživatele
již nemusí být toto řešení příliš praktické, protože se nedá (jednoduše) vrátit
k&nbsp;již zadaným údajům:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># vstupní údaje</i>
<strong>out.put_text("Jméno")</strong>
name = <strong>inp.input()</strong>
&nbsp;
<strong>out.put_text("Příjmení")</strong>
surname = <strong>inp.input()</strong>
&nbsp;
<strong>out.put_text("Ulice")</strong>
street = <strong>inp.input()</strong>
&nbsp;
<strong>out.put_text("ČP")</strong>
conscription_number = <strong>inp.input()</strong>
&nbsp;
<strong>out.put_text("Město")</strong>
city = <strong>inp.input()</strong>
&nbsp;
<strong>out.put_text("PSČ")</strong>
postal_code = <strong>inp.input()</strong>
&nbsp;
&nbsp;
<i># výpis výsledků</i>
<strong>out.put_info("Zakázka bude poslána na adresu")</strong>
&nbsp;
<strong>out.put_info(f"{name} {surname}\n{street} {conscription_number}\n{postal_code} {city}")</strong>
</pre>

<p>Z&nbsp;pohledu uživatele, který tuto aplikaci spustí, se postupně zobrazují
jednotlivé vstupní prvky a po zadání příslušného údaje se přejde k&nbsp;dalšímu
prvku:</p>

*** image ***
<p><i>Obrázek 3: Postupné zobrazování jednotlivých vstupních prvků na webové
stránce.</i></p>

*** image ***
<p><i>Obrázek 4: Postupné zobrazování jednotlivých vstupních prvků na webové
stránce.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Seskupení ovládacích prvků do jediného formuláře</h2>

<p>Mnohem užitečnější by bylo zobrazení celého formuláře, do něhož by byly
všechny prvky umístěny a uživatel by s&nbsp;nimi mohl pracovat na jediném
místě. I tuto funkcionalitu knihovna <i>PyWebIO</i> podporuje &ndash; postačuje
použít prvek typu <strong>input_group</strong>, v&nbsp;jehož konstruktoru se
předává seznam dalších vstupních prvků. Každý z&nbsp;těchto prvků musí být
pojmenovaný, aby bylo možné po vyplnění formuláře načíst jednotlivé
položky:</p>

<pre>
info = <strong>inp.input_group</strong>("Adresa",[
  <strong>inp.input("Jméno", name="name")</strong>,
  <strong>inp.input("Příjmení", name="surname")</strong>,
  <strong>inp.input("Ulice", name="street")</strong>,
  <strong>inp.input("ČP", name="conscription_number")</strong>,
  <strong>inp.input("Město", name="city")</strong>,
  <strong>inp.input("PSČ", name="postal_code")</strong>
])
</pre>

*** image ***
<p><i>Obrázek 4: Formulář s&nbsp;větším množstvím vstupních prvků.</i></p>

*** image ***
<p><i>Obrázek 5: Vyplněný formulář před odesláním.</i></p>

<p>Po vyplnění formuláře je v&nbsp;proměnné <strong>info</strong> uložen
slovník, jehož klíči jsou jména ovládacích prvků a hodnotami vstupní údaje
zapsané uživatelem:</p>

*** image ***
<p><i>Obrázek 6: Využití dat ve vyplněném formuláři.</i></p>

<p>Úplný skript založený na sdružení několika vstupních prvků do formuláře může
vypadat následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># vstupní údaje</i>
info = <strong>inp.input_group</strong>("Adresa",[
  <strong>inp.input("Jméno", name="name")</strong>,
  <strong>inp.input("Příjmení", name="surname")</strong>,
  <strong>inp.input("Ulice", name="street")</strong>,
  <strong>inp.input("ČP", name="conscription_number")</strong>,
  <strong>inp.input("Město", name="city")</strong>,
  <strong>inp.input("PSČ", name="postal_code")</strong>
])
&nbsp;
<i># výpis výsledků</i>
<strong>out.put_info("Zakázka bude poslána na adresu")</strong>
&nbsp;
<strong>out.put_info(f"{info['name']} {info['surname']}\n{info['street']} {info['conscription_number']}\n{info['postal_code']} {info['city']}")</strong>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Specifikace typů vstupních dat ve vstupních formulářích</h2>

<p>Kromě jmen jednotlivých vstupních prvků je možné specifikovat i jejich typ,
například &bdquo;text (řetězec)&ldquo;, &bdquo;celé číslo&ldquo; atd. Typ je
přitom kontrolován před odesláním formuláře:</p>

*** image ***
<p><i>Obrázek 7: Kontrola typu zadávaných údajů před odesláním
formuláře.</i></p>

<p>Způsob specifikace typu vstupu je ukázán v&nbsp;dalším demonstračním
příkladu, jehož úplný zdrojový kód vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># vstupní údaje</i>
info = inp.input_group("Adresa",[
  inp.input("Jméno", name="name", <strong>type=inp.TEXT</strong>),
  inp.input("Příjmení", name="surname", <strong>type=inp.TEXT</strong>),
  inp.input("Ulice", name="street", <strong>type=inp.TEXT</strong>),
  inp.input("ČP", name="conscription_number", <strong>type=inp.NUMBER</strong>),
  inp.input("Město", name="city", <strong>type=inp.TEXT</strong>),
  inp.input("PSČ", name="postal_code", <strong>type=inp.NUMBER</strong>)
])
&nbsp;
<i># výpis výsledků</i>
out.put_info("Zakázka bude poslána na adresu")
&nbsp;
out.put_info(f"{info['name']} {info['surname']}\n{info['street']} {info['conscription_number']}\n{info['postal_code']} {info['city']}")
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Tvorba a využití vlastních validátorů ve vstupních formulářích</h2>

<p>Kontrola zadávaných údajů pouze na základě jejich datového typu není
v&nbsp;praxi dostatečná, protože je například nutné zajistit vstup číselných
údajů v&nbsp;předem známém rozsahu, zadání textových dat z&nbsp;nějakého
slovníku atd. K&nbsp;dodatečné kontrole slouží takzvané <i>validátory</i>, což
jsou funkce, které v&nbsp;případě korektního vstupu vrací hodnotu
<strong>None</strong> a v&nbsp;opačném případě vrací informaci o chybě (typicky
ve formě řetězce). Nejprve si ukažme, jak se validátory specifikují při tvorbě
formuláře:</p>

<pre>
<i># vstupní údaje</i>
info = inp.input_group("Adresa",[
  inp.input("Jméno", name="name", type=inp.TEXT),
  inp.input("Příjmení", name="surname", type=inp.TEXT),
  inp.input("Ulice", name="street", type=inp.TEXT),
  inp.input("ČP", name="conscription_number", type=inp.NUMBER),
  inp.input("Město", name="city", type=inp.TEXT, <strong>validate=check_city</strong>),
  inp.input("PSČ", name="postal_code", type=inp.NUMBER, <strong>validate=check_postal_code</strong>)
])
</pre>

<p>Velmi primitivní validátor pro kontrolu PSČ by mohl vypadat následovně
(v&nbsp;praxi by se použila databáze známých PSČ):</p>

<pre>
def <strong>check_postal_code</strong>(value):
    if value &lt;= 10000:
        return "Neplatné PSČ - příliš malá hodnota"
    elif value &gt; 99999:
        return "Neplatné PSČ - příliš velká hodnota"
</pre>

<p>Kontrola, zda je zadáno správné jméno města, je řešena dalším
validátorem:</p>

<pre>
def <strong>check_city</strong>(name):
    if name not in cities:
        return "Neznámé město"
</pre>

<p>Přičemž (opět pro jednoduchost) obsahuje databáze pouze deset
nejlidnatějších měst:</p>

<pre>
cities = (
        "Praha",
        "Brno",
        "Ostrava",
        "Plzeň",
        "Liberec",
        "Olomouc",
        "České Budějovice",
        "Hradec Králové",
        "Ústí nad Labem",
        "Pardubice"
        )
</pre>

*** image ***
<p><i>Obrázek 8: Kontrola typu zadávaných údajů před odesláním formuláře
provedená na základě validátorů.</i></p>

<p>Úplný skript s&nbsp;takto definovaným formulářem by mohl vypadat
následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
cities = (
        "Praha",
        "Brno",
        "Ostrava",
        "Plzeň",
        "Liberec",
        "Olomouc",
        "České Budějovice",
        "Hradec Králové",
        "Ústí nad Labem",
        "Pardubice"
        )
&nbsp;
&nbsp;
def <strong>check_postal_code</strong>(value):
    if value &lt;= 10000:
        return "Neplatné PSČ - příliš malá hodnota"
    elif value &gt; 99999:
        return "Neplatné PSČ - příliš velká hodnota"
&nbsp;
&nbsp;
def <strong>check_city</strong>(name):
    if name not in cities:
        return "Neznámé město"
&nbsp;
&nbsp;
<i># vstupní údaje</i>
info = inp.input_group("Adresa",[
  inp.input("Jméno", name="name", type=inp.TEXT),
  inp.input("Příjmení", name="surname", type=inp.TEXT),
  inp.input("Ulice", name="street", type=inp.TEXT),
  inp.input("ČP", name="conscription_number", type=inp.NUMBER),
  inp.input("Město", name="city", type=inp.TEXT, <strong>validate=check_city</strong>),
  inp.input("PSČ", name="postal_code", type=inp.NUMBER, <strong>validate=check_postal_code</strong>)
])
&nbsp;
<i># výpis výsledků</i>
out.put_info("Zakázka bude poslána na adresu")
&nbsp;
out.put_info(f"{info['name']} {info['surname']}\n{info['street']} {info['conscription_number']}\n{info['postal_code']} {info['city']}")
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení vyskakovacího okna</h2>

<p>V&nbsp;knihovně <i>PyWebIO</i> nalezneme i podporu pro zobrazení
jednoduchých vyskakovacích oken. Postačuje použít výstupní prvek nazvaný
<strong>popup</strong>, kterému se předá jak titulek vyskakovacího okna, tak i
výstupní prvky, které se v&nbsp;okně mají zobrazit. Volání konstruktoru tohoto
ovládacího prvku tedy může vypadat následovně:</p>

<pre>
out.popup('Odeslání zakázky', [
    out.put_html('<h3>Odeslání zakázky</h3>'),
    out.put_info("Zakázka bude poslána na adresu"),
    out.put_info(f"{info['name']} {info['surname']}\n{info['street']} {info['conscription_number']}\n{info['postal_code']} {info['city']}"),
    out.put_buttons(['OK'], onclick=lambda _: close_popup())
])
</pre>

<p>S&nbsp;tímto výsledkem:</p>

*** image ***
<p><i>Obrázek 9: Vyskakovací okno zobrazené po vyplnění a odeslání
formuláře.</i></p>

<p>Úplný skript s&nbsp;takto definovaným formulářem a s&nbsp;následným
zobrazením vyskakovacího okna by mohl vypadat následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
cities = (
        "Praha",
        "Brno",
        "Ostrava",
        "Plzeň",
        "Liberec",
        "Olomouc",
        "České Budějovice",
        "Hradec Králové",
        "Ústí nad Labem",
        "Pardubice"
        )
&nbsp;
def <strong>check_postal_code</strong>(value):
    if value &lt;= 10000:
        return "Neplatné PSČ - příliš malá hodnota"
    elif value &gt; 99999:
        return "Neplatné PSČ - příliš velká hodnota"
&nbsp;
&nbsp;
def <strong>check_city</strong>(name):
    if name not in cities:
        return "Neznámé město"
&nbsp;
&nbsp;
<i># vstupní údaje</i>
info = inp.input_group("Adresa",[
  inp.input("Jméno", name="name", type=inp.TEXT),
  inp.input("Příjmení", name="surname", type=inp.TEXT),
  inp.input("Ulice", name="street", type=inp.TEXT),
  inp.input("ČP", name="conscription_number", type=inp.NUMBER),
  inp.input("Město", name="city", type=inp.TEXT, validate=check_city),
  inp.input("PSČ", name="postal_code", type=inp.NUMBER, validate=check_postal_code)
])
&nbsp;
<i># výpis výsledků</i>
out.popup('Odeslání zakázky', [
    out.put_html('<h3>Odeslání zakázky</h3>'),
    out.put_info("Zakázka bude poslána na adresu"),
    out.put_info(f"{info['name']} {info['surname']}\n{info['street']} {info['conscription_number']}\n{info['postal_code']} {info['city']}"),
    out.put_buttons(['OK'], onclick=lambda _: close_popup())
])
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Alternativní způsob zobrazení vyskakovacího okna</h2>

<p>Ve zdrojových kódech, v&nbsp;nichž se knihovna <i>PyWebIO</i> využívá, se
velmi často setkáme s&nbsp;využitím kontextu/kontextů. Předchozí část skriptu,
která sloužila pro zobrazení vyskakovacího okna, je možné přepsat následujícím
způsobem, který je (alespoň podle mého názoru) přehlednější, než předání
seznamu ovládacích prvků do konstruktoru <strong>popup</strong>. Tento způsob
je založen na struktuře <strong>with</strong>:</p>

<pre>
with out.popup('Odeslání zakázky') as s:
    out.put_html('<h3>Odeslání zakázky</h3>'),
    out.put_info("Zakázka bude poslána na adresu"),
    out.put_info(f"{info['name']} {info['surname']}\n{info['street']} {info['conscription_number']}\n{info['postal_code']} {info['city']}"),
    out.put_buttons(['OK'], onclick=lambda _: close_popup())
</pre>

<p>Úplný zdrojový kód takto upraveného demonstračního příkladu vypadá
následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
cities = (
        "Praha",
        "Brno",
        "Ostrava",
        "Plzeň",
        "Liberec",
        "Olomouc",
        "České Budějovice",
        "Hradec Králové",
        "Ústí nad Labem",
        "Pardubice"
        )
&nbsp;
def <strong>check_postal_code</strong>(value):
    if value &lt;= 10000:
        return "Neplatné PSČ - příliš malá hodnota"
    elif value &gt; 99999:
        return "Neplatné PSČ - příliš velká hodnota"
&nbsp;
&nbsp;
def <strong>check_city</strong>(name):
    if name not in cities:
        return "Neznámé město"
&nbsp;
&nbsp;
<i># vstupní údaje</i>
info = inp.input_group("Adresa",[
  inp.input("Jméno", name="name", type=inp.TEXT),
  inp.input("Příjmení", name="surname", type=inp.TEXT),
  inp.input("Ulice", name="street", type=inp.TEXT),
  inp.input("ČP", name="conscription_number", type=inp.NUMBER),
  inp.input("Město", name="city", type=inp.TEXT, validate=check_city),
  inp.input("PSČ", name="postal_code", type=inp.NUMBER, validate=check_postal_code)
])
&nbsp;
<i># výpis výsledků</i>
with out.popup('Odeslání zakázky') as s:
    out.put_html('<h3>Odeslání zakázky</h3>'),
    out.put_info("Zakázka bude poslána na adresu"),
    out.put_info(f"{info['name']} {info['surname']}\n{info['street']} {info['conscription_number']}\n{info['postal_code']} {info['city']}"),
    out.put_buttons(['OK'], onclick=lambda _: close_popup())
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Umístění prvků do sloupců, řádků a mřížky</h2>

<p>Vstupní popř.&nbsp;výstupní prvky ve formuláři lze umístit do sloupců
(<strong>put_col</strong>), řádků (<strong>put_row</strong>)  nebo do mřížky
(<strong>put_grid</strong>). Podívejme se nyní na (triviální) způsob, jak se
vždy dvojice výstupních prvků umístí do jediného řádku:</p>

<pre>
<i># výpis výsledků</i>
out.put_info("Zakázka bude poslána na adresu")
&nbsp;
out.put_row([
    out.put_text(info['name']),
    out.put_text(info['surname']),
], size="30% 30%")
&nbsp;
out.put_row([
    out.put_text(info['street']),
    out.put_text(info['conscription_number']),
], size="30% 10%")
&nbsp;
out.put_row([
    out.put_text(info['postal_code']),
    out.put_text(info['city']),
], size="10% 20%")
</pre>

*** image ***
<p><i>Obrázek 10: Zobrazení informací, z&nbsp;nichž některé jsou zobrazeny na
stejném řádku.</i></p>

<p>Úplný zdrojový kód takto upraveného demonstračního příkladu vypadá
následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
cities = (
        "Praha",
        "Brno",
        "Ostrava",
        "Plzeň",
        "Liberec",
        "Olomouc",
        "České Budějovice",
        "Hradec Králové",
        "Ústí nad Labem",
        "Pardubice"
        )
&nbsp;
def <strong>check_postal_code</strong>(value):
    if value &lt;= 10000:
        return "Neplatné PSČ - příliš malá hodnota"
    elif value &gt; 99999:
        return "Neplatné PSČ - příliš velká hodnota"
&nbsp;
&nbsp;
def <strong>check_city</strong>(name):
    if name not in cities:
        return "Neznámé město"
&nbsp;
&nbsp;
<i># vstupní údaje</i>
info = inp.input_group("Adresa",[
  inp.input("Jméno", name="name", type=inp.TEXT),
  inp.input("Příjmení", name="surname", type=inp.TEXT),
  inp.input("Ulice", name="street", type=inp.TEXT),
  inp.input("ČP", name="conscription_number", type=inp.NUMBER),
  inp.input("Město", name="city", type=inp.TEXT, validate=check_city),
  inp.input("PSČ", name="postal_code", type=inp.NUMBER, validate=check_postal_code)
])
&nbsp;
<i># výpis výsledků</i>
out.put_info("Zakázka bude poslána na adresu")
&nbsp;
out.put_row([
    out.put_text(info['name']),
    out.put_text(info['surname']),
], size="30% 30%")
&nbsp;
out.put_row([
    out.put_text(info['street']),
    out.put_text(info['conscription_number']),
], size="30% 10%")
&nbsp;
out.put_row([
    out.put_text(info['postal_code']),
    out.put_text(info['city']),
], size="10% 20%")
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Změna stylu vykreslení prvků</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
cities = (
        "Praha",
        "Brno",
        "Ostrava",
        "Plzeň",
        "Liberec",
        "Olomouc",
        "České Budějovice",
        "Hradec Králové",
        "Ústí nad Labem",
        "Pardubice"
        )
&nbsp;
def <strong>check_postal_code</strong>(value):
    if value &lt;= 10000:
        return "Neplatné PSČ - příliš malá hodnota"
    elif value &gt; 99999:
        return "Neplatné PSČ - příliš velká hodnota"
&nbsp;
&nbsp;
def <strong>check_city</strong>(name):
    if name not in cities:
        return "Neznámé město"
&nbsp;
&nbsp;
<i># vstupní údaje</i>
info = inp.input_group("Adresa",[
  inp.input("Jméno", name="name", type=inp.TEXT),
  inp.input("Příjmení", name="surname", type=inp.TEXT),
  inp.input("Ulice", name="street", type=inp.TEXT),
  inp.input("ČP", name="conscription_number", type=inp.NUMBER),
  inp.input("Město", name="city", type=inp.TEXT, validate=check_city),
  inp.input("PSČ", name="postal_code", type=inp.NUMBER, validate=check_postal_code)
])
&nbsp;
<i># výpis výsledků</i>
out.put_info("Zakázka bude poslána na adresu")
&nbsp;
out.put_row([
    out.put_text(info['name']).style('color:red'),
    out.put_text(info['surname']).style('color:red'),
], size="30% 30%")
&nbsp;
out.put_row([
    out.put_text(info['street']).style('font-size:75%'),
    out.put_text(info['conscription_number']).style('font-size:75%'),
], size="30% 10%")
&nbsp;
out.put_row([
    out.put_text(info['postal_code']),
    out.put_text(info['city']),
], size="10% 20%").style('background-color:#ccffcc')
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Sady prvků, které je možné skrýt</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
cities = (
        "Praha",
        "Brno",
        "Ostrava",
        "Plzeň",
        "Liberec",
        "Olomouc",
        "České Budějovice",
        "Hradec Králové",
        "Ústí nad Labem",
        "Pardubice"
        )
&nbsp;
def <strong>check_postal_code</strong>(value):
    if value &lt;= 10000:
        return "Neplatné PSČ - příliš malá hodnota"
    elif value &gt; 99999:
        return "Neplatné PSČ - příliš velká hodnota"
&nbsp;
&nbsp;
def <strong>check_city</strong>(name):
    if name not in cities:
        return "Neznámé město"
&nbsp;
&nbsp;
<i># vstupní údaje</i>
info = inp.input_group("Adresa",[
  inp.input("Jméno", name="name", type=inp.TEXT),
  inp.input("Příjmení", name="surname", type=inp.TEXT),
  inp.input("Ulice", name="street", type=inp.TEXT),
  inp.input("ČP", name="conscription_number", type=inp.NUMBER),
  inp.input("Město", name="city", type=inp.TEXT, validate=check_city),
  inp.input("PSČ", name="postal_code", type=inp.NUMBER, validate=check_postal_code)
])
&nbsp;
<i># výpis výsledků</i>
out.put_info("Zakázka bude poslána na adresu")
&nbsp;
with out.put_collapse("Jméno a příjmení"):
    out.put_row([
        out.put_text(info['name']).style('color:red'),
        out.put_text(info['surname']).style('color:red'),
    ], size="30% 30%")
&nbsp;
with out.put_collapse("Adresa"):
    out.put_row([
        out.put_text(info['street']).style('font-size:75%'),
        out.put_text(info['conscription_number']).style('font-size:75%'),
    ], size="30% 10%")
&nbsp;
    out.put_row([
        out.put_text(info['postal_code']),
        out.put_text(info['city']),
    ], size="10% 20%").style('background-color:#ccffcc')
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/pywebio-interaktivni-webove-dialogy-a-formulare-v-cistem-pythonu/">minule</a>
i dnes popsaných demonstračních příkladů určených pro programovací jazyk Python
3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_basic_output.py</td><td>zobrazení běžného textu ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/01_basic_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/01_basic_output.py</a></td></tr>
<tr><td> 2</td><td>02_table.py</td><td>zobrazení tabulky ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/02_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/02_table.py</a></td></tr>
<tr><td> 3</td><td>03_table.py</td><td>programová příprava tabulky zobrazené ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/03_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/03_table.py</a></td></tr>
<tr><td> 4</td><td>04_table.py</td><td>programová příprava tabulky zobrazené ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/04_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/04_table.py</a></td></tr>
<tr><td> 5</td><td>05_color.py</td><td>podpora pro symbolické názvy barev</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/05_color.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/05_color.py</a></td></tr>
<tr><td> 6</td><td>06_message.py</td><td>výpis ostylovaných zpráv do webové stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/06_message.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/06_message.py</a></td></tr>
<tr><td> 7</td><td>07_put_html.py</td><td>podpora pro výstup HTML kódu z&nbsp;PyWebIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/07_put_html.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/07_put_html.py</a></td></tr>
<tr><td> 8</td><td>08_put_markdown.py</td><td>výpis textu (dokumentu) napsaného ve značkovacím jazyku Markdown</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/08_put_markdown.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/08_put_markdown.py</a></td></tr>
<tr><td> 9</td><td>09_put_code.py</td><td>výpis zdrojového kódu se zvýrazněním syntaxe</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/09_put_code.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/09_put_code.py</a></td></tr>
<tr><td>10</td><td>10_progress_bar.py</td><td>animované zobrazení průběhu operace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/10_progress_bar.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/10_progress_bar.py</a></td></tr>
<tr><td>11</td><td>11_loading.py</td><td>informace o výpočtu či načítání stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/11_loading.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/11_loading.py</a></td></tr>
<tr><td>12</td><td>12_loading.py</td><td>informace o výpočtu či načítání stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/12_loading.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/12_loading.py</a></td></tr>
<tr><td>13</td><td>13_input.py</td><td>vstupní textové pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/13_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/13_input.py</a></td></tr>
<tr><td>14</td><td>14_input.py</td><td>vylepšená vstupní textová pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/14_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/14_input.py</a></td></tr>
<tr><td>15</td><td>15_input_numbers.py</td><td>kontrola korektnosti numerických údajů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/15_input_numbers.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/15_input_numbers.py</a></td></tr>
<tr><td>16</td><td>16_input_numbers_required.py</td><td>povinné vstupní parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/16_input_numbers_required.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/16_input_numbers_required.py</a></td></tr>
<tr><td>17</td><td>17_radio.py</td><td>přepínače</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/17_radio.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/17_radio.py</a></td></tr>
<tr><td>18</td><td>18_checkbox.py</td><td>výběrové boxy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/18_checkbox.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/18_checkbox.py</a></td></tr>
<tr><td>19</td><td>19_actions.py</td><td>skupina akcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/19_actions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/19_actions.py</a></td></tr>
<tr><td>20</td><td>20_slider.py</td><td>interaktivní posuvník</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/20_slider.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/20_slider.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>21_more_inputs.py</td><td>postupné zadávání údajů v&nbsp;na sebe navazujících vstupních prvcích</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/21_more_inputs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/21_more_inputs.py</a></td></tr>
<tr><td>22</td><td>22_more_inputs.py</td><td>seskupení ovládacích prvků do jediného formuláře</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/22_more_inputs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/22_more_inputs.py</a></td></tr>
<tr><td>23</td><td>23_input_validators.py</td><td>specifikace typů vstupních dat ve vstupních formulářích</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/23_input_validators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/23_input_validators.py</a></td></tr>
<tr><td>24</td><td>24_better_validators.py</td><td>tvorba a využití vlastních validátorů ve vstupních formulářích</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/24_better_validators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/24_better_validators.py</a></td></tr>
<tr><td>25</td><td>25_popup.py</td><td>zobrazení vyskakovacího okna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/25_popup.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/25_popup.py</a></td></tr>
<tr><td>26</td><td>26_popup.py</td><td>zobrazení vyskakovacího okna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/26_popup.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/26_popup.py</a></td></tr>
<tr><td>27</td><td>27_rows.py</td><td>zarovnání prvků do sloupců, řádků a mřížek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/27_rows.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/27_rows.py</a></td></tr>
<tr><td>28</td><td>28_style.py</td><td>změna stylu zobrazení ovládacích prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/28_style.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/28_style.py</a></td></tr>
<tr><td>29</td><td>29_collapse.py</td><td>sady prvků, které je možné skrýt</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/29_collapse.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/29_collapse.py</a></td></tr>
<tr><td>30</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>31</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Low code Python web framework<br />
<a href="https://www.pyweb.io/">https://www.pyweb.io/</a>
</li>

<li>Repositář projektu<br />
<a href="https://github.com/pywebio/PyWebIO/">https://github.com/pywebio/PyWebIO/</a>
</li>

<li>Getting Started<br />
<a href="https://www.pyweb.io/tutorial.html">https://www.pyweb.io/tutorial.html</a>
</li>

<li>Dokumentace<br />
<a href="https://pywebio.readthedocs.io/en/latest/">https://pywebio.readthedocs.io/en/latest/</a>
</li>

<li>Why PyWebIO?<br />
<a href="https://github.com/pywebio/PyWebIO/wiki/Why-PyWebIO%3F">https://github.com/pywebio/PyWebIO/wiki/Why-PyWebIO%3F</a>
</li>

<li>PyWebIO demos<br />
<a href="https://pywebio-demos.pywebio.online/">https://pywebio-demos.pywebio.online/</a>
</li>

<li>PyWebIO Chart Gallery<br />
<a href="https://pywebio-charts.pywebio.online/">https://pywebio-charts.pywebio.online/</a>
</li>

<li>Awesome Python<br />
<a href="https://awesome-python.com/">https://awesome-python.com/</a>
</li>

<li>A complete guide to web development in Python<br />
<a href="https://www.educative.io/blog/web-development-in-python">https://www.educative.io/blog/web-development-in-python</a>
</li>

<li>Python Web Development Tutorials<br />
<a href="https://realpython.com/tutorials/web-dev/">https://realpython.com/tutorials/web-dev/</a>
</li>

<li>What is Flask Python<br />
<a href="https://pythonbasics.org/what-is-flask-python/">https://pythonbasics.org/what-is-flask-python/</a>
</li>

<li>CherryPy<br />
<a href="https://cherrypy.dev/">https://cherrypy.dev/</a>
</li>

<li>Projekt Zenity<br />
<a href="https://wiki.gnome.org/Projects/Zenity">https://wiki.gnome.org/Projects/Zenity</a>
</li>

<li>Nástroj Dialog<br />
<a href="http://invisible-island.net/dialog/">http://invisible-island.net/dialog/</a>
</li>

<li>Plotly<br />
<a href="https://plotly.com/">https://plotly.com/</a>
</li>

<li>Bokeh<br />
<a href="https://bokeh.org/">https://bokeh.org/</a>
</li>

<li>pyecharts<br />
<a href="https://github.com/pyecharts/pyecharts/blob/master/README.en.md">https://github.com/pyecharts/pyecharts/blob/master/README.en.md</a>
</li>

<li>Tvorba grafů v&nbsp;Jupyter Notebooku s&nbsp;využitím knihovny Matplotlib<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/</a>
</li>

<li>Alternatives to PyWebIO<br />
<a href="https://stackshare.io/pywebio/alternatives">https://stackshare.io/pywebio/alternatives</a>
</li>

<li>The fastest way to build and share data apps &ndash; Streamlit<br />
<a href="https://streamlit.io/">https://streamlit.io/</a>
</li>

<li>Dash Enterprise<br />
<a href="https://plotly.com/dash/">https://plotly.com/dash/</a>
</li>

<li>pglet<br />
<a href="https://pglet.io/">https://pglet.io/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

