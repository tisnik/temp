<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Kreslicí plátno v knihovně PySimpleGUI</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Kreslicí plátno v knihovně PySimpleGUI</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Kreslicí plátno v&nbsp;knihovně PySimpleGUI</a></p>
<p><a href="#k02">2. Ovládací prvek <strong>canvas</strong></a></p>
<p><a href="#k03">3. Specifikace souřadnic a rozměrů grafických prvků</a></p>
<p><a href="#k04">4. Seznam podporovaných grafických objektů, které lze vykreslit</a></p>
<p><a href="#k05">5. Prázdné plátno na ploše okna</a></p>
<p><a href="#k06">6. Vykreslení základních grafických prvků na kreslicí plochu</a></p>
<p><a href="#k07">7. Lomené čáry (polyčáry)</a></p>
<p><a href="#k08">8. Spline křivky</a></p>
<p><a href="#k09">9. Kružnice, kruh nebo elipsa</a></p>
<p><a href="#k10">10. Odstranění všech grafických tvarů z&nbsp;plátna</a></p>
<p><a href="#k11">11. Upravený příklad s&nbsp;podporou vykreslení kružnic, polyčar a spline křivek</a></p>
<p><a href="#k12">12. Oblouky, kruhové výseče a kruhové úseče</a></p>
<p><a href="#k13">13. Rozšíření demonstračního příkladu o kruhové výseče a úseče</a></p>
<p><a href="#k14">14. Nastavení stylů vykreslovaných prvků</a></p>
<p><a href="#k15">15. Vykreslení šipek</a></p>
<p><a href="#k16">16. Styl ukončení liniových obrazců a způsob vykreslení jejich zalomení</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Kreslicí plátno v&nbsp;knihovně PySimpleGUI</h2>

<p>Práci s&nbsp;grafikou, konkrétně s&nbsp;2D grafikou, můžeme chápat ve dvou
úrovních. Na vyšší úrovni manipulujeme s&nbsp;jednotlivými geometricky
popsanými tvary, jakými jsou například úsečka, obdélník, kruh, text či spline
křivka. Každému tvaru může být přiřazeno značné množství atributů, jedná se
například o tloušťku čáry, kterou je vykreslena hranice objektu, barva a styl
výplně uzavřených objektů či font vykreslovaného textu. Na úrovni nižší se může
manipulovat přímo s&nbsp;pixely, které tvoří zobrazovaný rastrový obrázek.</p>

<p>V&nbsp;knihovně <i>PySimpleGUI</i> je pro práci na zmíněné vyšší úrovni
určen widget <strong>canvas</strong> spolu s&nbsp;dalšími objekty, na nižší
úrovni pak widgety (resp.&nbsp;přesněji řečeno objekty)
<strong>bitmap</strong>, <strong>image</strong> a <strong>photo</strong>.
Objekt typu <strong>image</strong> přitom zapouzdřuje více typů obrázků, od
monochromatického <strong>BitmapImage</strong> přes vícebarevný
<strong>PhotoImage</strong> až po uživatelsky vytvářené formáty.</p>

<p><div class="rs-tip-major">Poznámka: interně je tento prvek GUI realizován
v&nbsp;knihovně <i>TkInter</i>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Ovládací prvek <strong>canvas</strong></h2>

<p>Jak jsme si již řekli v&nbsp;<a href="#k01">úvodní kapitole</a>, je pro
práci s&nbsp;grafikou na vyšší úrovni nabízen v&nbsp;knihovně
<i>PySimpleGUI</i> widget <strong>canvas</strong>, česky bychom mohli tento
název přeložit jako (malířské) <strong>plátno</strong>. Nenechte se ovšem
zmýlit tímto názvem, který má v&nbsp;jiných programových knihovnách odlišný
(většinou jednodušší) význam, zde se jedná o velmi mocný widget, který současně
slouží jako kontejner pro další objekty.</p>

<p>Vkládané objekty si své vlastnosti zachovávají, tj.&nbsp;je možné
s&nbsp;nimi i po jejich vykreslení interaktivně i programově pohybovat, měnit
jejich vlastnosti apod. K&nbsp;tomu musíme připočítat možnost uložit celé
plátno do PostScriptového souboru se zachováním vektorových charakteristik
plátna (tj.&nbsp;neprovádí se ztrátový převod na bitmapy). To mj.&nbsp;znamená,
že se vlastnosti <strong>canvasu</strong> do určité míry podobají použití SVG
na webových stránkách; naproti tomu &bdquo;webový canvas&ldquo; je vlastně
pouze bitmapa, do níž se objekty vykreslují a ihned po jejich vykreslení se
jejich vlastnosti ztratí (zůstanou jen barevné pixely).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Specifikace souřadnic a rozměrů grafických prvků</h2>

<p>Každý objekt, který je na kreslicí plátno umístěn, musí mít specifikovány
souřadnice počátečního a koncového bodu, v&nbsp;případě lomených čar, spline
křivek a polygonů se samozřejmě specifikuje bodů více. Souřadnice bodů mohou
být zadány pomocí více jednotek, jež se rozlišují podle jednoho písmene
zapsaného za numerickou hodnotou (hodnoty jsou samozřejmě platné pouze při
správně nakalibrované obrazovce, což kupodivu mnoho systémů dodnes
nedodržuje):</p>

<table>
<tr><th>Přípona</th><th>Význam</th></tr>
<tr><td><strong>m</strong></td><td>milimetry</td></tr>
<tr><td><strong>c</strong></td><td>centimetry</td></tr>
<tr><td><strong>i</strong></td><td>palce</td></tr>
<tr><td><strong>p</strong></td><td>body (implicitní hodnota)</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že potřebujete použít
například milimetry, je nutné souřadnice zapisovat do řetězce, tedy například
"50mm" či "5cm".</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Seznam podporovaných grafických objektů, které lze vykreslit</h2>

<p>V následující tabulce jsou vypsány ty grafické objekty, které je možné na
plátno pokládat a tím pádem je vykreslovat (a popř.&nbsp;s&nbsp;nimi dále
manipulovat):</p>

<table>
<tr><th>Jméno objektu</th><th>Význam</th></tr>
<tr><td><strong>arc</strong></td><td>kruhový nebo eliptický oblouk</td></tr>
<tr><td><strong>bitmap</strong></td><td>bitmapový obrázek</td></tr>
<tr><td><strong>image</strong></td><td>obecně vícebarevný rastrový obrázek</td></tr>
<tr><td><strong>line</strong></td><td>úsečka, lomená úsečka nebo dokonce hladká spline křivka (!)</td></tr>
<tr><td><strong>oval</strong></td><td>uzavřená kružnice nebo elipsa (nenechte se zmást matoucím názvem)</td></tr>
<tr><td><strong>polygon</strong></td><td>uzavřený polygon či tvar vytvořený ze spline křivek</td></tr>
<tr><td><strong>rectangle</strong></td><td>čtverec nebo obdélník</td></tr>
<tr><td><strong>text</strong></td><td>textový řetězec</td></tr>
<tr><td><strong>window</strong></td><td>vnořené okno se samostatným řízením</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. Prázdné plátno na ploše okna</h2>

<p>Již <a
href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-vyuzitim-knihovny-pysimplegui-2/">minule</a>
jsme si ukázali, jakým způsobem se kreslicí plátno vkládá na plochu okna.
Připomeňme si, že se plátno chová stejně jako jakýkoli jiný prvek grafického
uživatelského rozhraní &ndash; je tedy součástí <i>layoutu</i> okna. Většinou
však musíme explicitně specifikovat rozměry plátna, které se typicky uvádí
v&nbsp;pixelech:</p>

<pre>
right_column = [
    [
        sg.Canvas(background_color='white', <strong>size=(320, 240)</strong>),
    ],
]
&nbsp;
layout = [
    [
        sg.Frame("Commands", left_column),
        sg.Frame("Canvas", right_column),
    ],
]
</pre>

<p>Výsledek může vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-19.webp" class="image-1113239" width="478" height="307" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Prázdné plátno umístěné do okna.</i></p>

<p>Úplný zdrojový kód příkladu, který po svém spuštění zobrazí okno a na něm
(kromě dalších ovládacích prvků) i kreslicí plátno:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [sg.Button("Exit", size=(8, 0))],
]
&nbsp;
right_column = [
    [
        sg.Canvas(background_color='white', <strong>size=(320, 240)</strong>),
    ],
]
&nbsp;
layout = [
    [
        sg.Frame("Commands", left_column),
        sg.Frame("Canvas", right_column),
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #30", layout, use_custom_titlebar=False)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vykreslení základních grafických prvků na kreslicí plochu</h2>

<p>V&nbsp;následujícím demonstračním příkladu je ukázáno jednoduché použití
plátna, na které jsou s&nbsp;využitím metody
<strong>create_TYP_OBJEKTU</strong> vloženy jednoduché objekty &ndash; zde
konkrétně dvojice úseček. Vzhledem k&nbsp;tomu, že se při specifikaci souřadnic
neuvádí u číselných hodnot žádná přípona (používáme celá čísla), předpokládá
se, že jsou všechny hodnoty zapsané v&nbsp;bodech (pixelech). To také znamená,
že na různých obrazovkách a při různých rozlišeních budou mít nakreslené
objekty jinou velikost, což nám v&nbsp;tomto případě nemusí vadit.</p>

<pre>
<i># reference na plátno z knihovny Tk</i>
tkcanvas = canvas.TKCanvas
&nbsp;
<i># získat velikost plátna (v pixelech)</i>
size = canvas.get_size()
&nbsp;
<i># vykreslit dvojici úseček</i>
tkcanvas.create_line(0, 0, size[0]-1, size[1]-1)
tkcanvas.create_line(0, size[1]-1, size[0]-1, 0)
</pre>

*** image ***
<p><i>Obrázek 2: Dvojice úseček vykreslená na plátno.</i></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># kreslicí plátno</i>
canvas = sg.Canvas(background_color='#ccffcc', size=(400, 400))
&nbsp;
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [sg.Button("Draw lines", size=(8, 0))],
    [sg.Button("Exit", size=(8, 0))],
]
&nbsp;
right_column = [
    [
        canvas
    ],
]
&nbsp;
layout = [
    [
        sg.Frame("Commands", left_column),
        sg.Frame("Canvas", right_column),
    ],
]
&nbsp;
&nbsp;
def <strong>draw_lines</strong>(canvas):
    <i>"""Vykreslení úseček na plátno."""</i>
    <i># reference na plátno z knihovny Tk</i>
    tkcanvas = canvas.TKCanvas
    &nbsp;
    <i># získat velikost plátna (v pixelech)</i>
    size = canvas.get_size()
    &nbsp;
    <i># vykreslit dvojici úseček</i>
    tkcanvas.create_line(0, 0, size[0]-1, size[1]-1)
    tkcanvas.create_line(0, size[1]-1, size[0]-1, 0)
&nbsp;
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #31", layout, use_custom_titlebar=False, finalize=True)
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení jediné události</i>
    event, values = window.read()
    print("Event: ", event, "    Values: ", values)
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event in {"Exit", sg.WIN_CLOSED}:
        break
    elif event == "Draw lines":
        draw_lines(canvas)
        window.refresh()
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Lomené čáry (polyčáry)</h2>

<p>Pro práci s&nbsp;neuzavřenými křivkami je možné použít geometrický objekt
<strong>line</strong>.  Na první pohled se jedná o velmi jednoduchý objekt, ve
skutečnosti s&nbsp;ním však lze vytvářet i velmi složité obrazce složené
například ze <i>spline</i> křivek. V&nbsp;nejjednodušším případě se pomocí
objektu <strong>line</strong> vykreslí pouze jedna úsečka:</p>

<pre>
def <strong>draw_lines</strong>(canvas, tkcanvas):
    <i>"""Vykreslení úseček na plátno."""</i>
    size = canvas.get_size()
    tkcanvas.create_line(0, 0, size[0]-1, size[1]-1)
    tkcanvas.create_line(0, size[1]-1, size[0]-1, 0)
</pre>

<p>Dále je možné specifikovat více bodů (vrcholů), což značí, že se na plátno
vykreslí místo jedné úsečky lomená čára (polyčára, polyline):</p>

<pre>
def <strong>draw_polyline</strong>(canvas, tkcanvas):
    <i>"""Vykreslení polyčáry na plátno."""</i>
    border = 1
    size = canvas.get_size()
    tkcanvas.create_line(
            border, size[1]-border,
            size[0]/3, border,
            size[0]*2/3, size[1]-border,
            size[0]-border, border)
</pre>

<p><div class="rs-tip-major">Poznámka: počet vrcholů polyčáry není nijak
významně omezen.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Spline křivky</h2>

<p>Při vytváření polyčar je možné specifikovat poměrně velké množství voleb.
Pravděpodobně nejpoužívanější jsou volby <strong>fill</strong> (volba barvy
úsečky), <strong>width</strong> (tloušťka čáry), <strong>joinstyle</strong>
(způsob ukončení hran) a <strong>arrow</strong> (vykreslení šipek na konci
čar). Kromě toho je také možné specifikovat, že se má místo lomené čáry
vykreslit <i>spline křivka</i>. To zajišťuje volba <strong>smooth</strong>
s&nbsp;booleovskou hodnotou a popř.&nbsp;i <strong>splinesteps</strong>
s&nbsp;celočíselnou hodnotou, kterou se zadává, na kolik úsečkových segmentů má
být každá část lomené čáry rozdělena. Způsob vykreslení spline křivky na canvas
je ukázán v&nbsp;další funkci:</p>

<pre>
def <strong>draw_spline</strong>(canvas, tkcanvas):
    <i>"""Vykreslení spline křivky na plátno."""</i>
    border = 1
    size = canvas.get_size()
    tkcanvas.create_line(
            border, size[1]-border,
            size[0]/3, border,
            size[0]*2/3, size[1]-border,
            size[0]-border, border,
            smooth=smooth)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Kružnice, kruh nebo elipsa</h2>

<p>Všechny tři tvary vypsané v&nbsp;nadpisu této kapitoly, tedy jak kružnice,
tak i kruh či elipsa, se na plochu kreslicího plátna přidávají stejnou metodou.
Ta se jmenuje poněkud nepřesně <strong>create_oval</strong>, ovšem výsledkem je
namísto oválu skutečně kružnice nebo elipsa. Dalšími parametry je posléze možné
zvolit, jestli se má daný geometrický útvar vykreslit vyplněný (tedy kruh a
vyplněná elipsa) nebo nevyplněný (tedy kružnice a nevyplněná elipsa):</p>

<pre>
def <strong>draw_ellipse</strong>(canvas, tkcanvas):
    <i>"""Vykreslení oválu na plátno."""</i>
    border = 5
    size = canvas.get_size()
    tkcanvas.create_oval(border, border, size[0]-border, size[1]-border)
</pre>

*** image ***
<p><i>Obrázek </i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odstranění všech grafických tvarů z&nbsp;plátna</h2>

<p>Jak jsme si již řekli v&nbsp;úvodním textu, je nutné kreslicí plátno
realizované v&nbsp;knihovně <i>PySimpleGUI</i> (a interně řešené přes knihovnu
<i>TkInter</i>) chápat nikoli jako pouhou tabuli nebo papír, na který se
vykreslí tvar, jenž je převeden na sadu pixelů. Spíše se jedná o kontejner, do
kterého se vkládají geometrické tvary a plátno je automaticky vizualizuje.
Později je možné měnit parametry těchto tvarů nebo je z&nbsp;plátna zcela
odstranit. Vymazání plátna, tj.&nbsp;odstranění všech geometrických tvarů,
které jsou zde umístěny, se provede následovně:</p>

<pre>
def <strong>clear_canvas</strong>(tkcanvas):
    <i>"""Vymazání všech objektů z kreslicího plátna."""</i>
    tkcanvas.delete("all")
</pre>

*** image ***
<p><i>Obrázek </i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Upravený příklad s&nbsp;podporou vykreslení kružnic, polyčar a spline křivek</h2>

<p>Nyní již nastal čas si uvést upravený zdrojový kód demonstračního příkladu,
který uživatelům umožní vykreslovat úsečky, polyčáry, spline křivky a kružnice.
Kreslicí plátno lze kdykoli smazat použitím k&nbsp;tomu určeného tlačítka:</p>

*** image ***
<p><i>Obrázek </i></p>

<p>Úplný zdrojový kód takto upraveného příkladu vypadá následovně:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># kreslicí plátno</i>
canvas = sg.Canvas(background_color='#ccffcc', size=(400, 400))
&nbsp;
&nbsp;
button_size = (10, 0)
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [sg.Button("Draw lines", size=button_size)],
    [sg.Button("Draw ellipse", size=button_size)],
    [sg.Button("Draw polyline", size=button_size)],
    [sg.Button("Draw spline", size=button_size)],
    [sg.Button("Clear canvas", size=button_size)],
    [sg.Button("Exit", size=button_size)],
]
&nbsp;
right_column = [
    [
        canvas
    ],
]
&nbsp;
layout = [
    [
        sg.Frame("Commands", left_column),
        sg.Frame("Canvas", right_column),
    ],
]
&nbsp;
&nbsp;
def <strong>draw_lines</strong>(canvas, tkcanvas):
    <i>"""Vykreslení úseček na plátno."""</i>
    size = canvas.get_size()
    tkcanvas.create_line(0, 0, size[0]-1, size[1]-1)
    tkcanvas.create_line(0, size[1]-1, size[0]-1, 0)
&nbsp;
&nbsp;
def <strong>draw_ellipse</strong>(canvas, tkcanvas):
    <i>"""Vykreslení oválu na plátno."""</i>
    border = 5
    size = canvas.get_size()
    tkcanvas.create_oval(border, border, size[0]-border, size[1]-border)
&nbsp;
&nbsp;
def <strong>draw_polyline</strong>(canvas, tkcanvas, smooth):
    <i>"""Vykreslení polyčáry na plátno."""</i>
    border = 1
    size = canvas.get_size()
    tkcanvas.create_line(
            border, size[1]-border,
            size[0]/3, border,
            size[0]*2/3, size[1]-border,
            size[0]-border, border,
            smooth=smooth)
&nbsp;
&nbsp;
def <strong>clear_canvas</strong>(tkcanvas):
    <i>"""Vymazání všech objektů z kreslicího plátna."""</i>
    tkcanvas.delete("all")
&nbsp;
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #32", layout, use_custom_titlebar=False, finalize=True)
&nbsp;
<i># reference na plátno z knihovny Tk</i>
tkcanvas = canvas.TKCanvas
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení jediné události</i>
    event, values = window.read()
    print("Event: ", event, "    Values: ", values)
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event in {"Exit", sg.WIN_CLOSED}:
        break
    elif event == "Draw lines":
        draw_lines(canvas, tkcanvas)
    elif event == "Draw ellipse":
        draw_ellipse(canvas, tkcanvas)
    elif event == "Draw polyline":
        draw_polyline(canvas, tkcanvas, False)
    elif event == "Draw spline":
        draw_polyline(canvas, tkcanvas, True)
    elif event == "Clear canvas":
        clear_canvas(tkcanvas)
    window.refresh()
&nbsp;
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Oblouky, kruhové výseče a kruhové úseče</h2>

<p>Poněkud zvláštní postavení mezi grafickými entitami má objekt pojmenovaný
<strong>arc</strong>, pomocí kterého lze, jak již ostatně jeho název napovídá,
vytvářet několik geometrických tvarů, konkrétně oblouky a také kruhové či
eliptické výseče. S&nbsp;využitím <strong>arc</strong> je tedy možné vytvořit
jak liniový objekt, tak i objekt plošný (a potenciálně vyplněný). Příkaz pro
vytvoření a zobrazení oblouku vypadá následovně:</p>

<pre>
canvas.create_arc(x1, y1, x2, y2, další nepovinné volby)
</pre>

<p>popř.:</p>

<pre>
canvas.create_arc(seznam souřadnic, další nepovinné volby)
</pre>

<p>V&nbsp;případě, že skutečně potřebujeme vytvořit oblouk a nikoli kruhovou
výseč nebo úseč, musí se použít nepovinný (pojmenovaný) parametry
<strong>style</strong>, jehož hodnota musí být nastavena na konstantu
<strong>tkinter.ARC</strong>:</p>

<pre>
canvas.create_arc(0, 0, 100, 100,
                  outline='red',
                  style=tkinter.ARC,
                  width=2)
</pre>

<p>Pomocí souřadnic <strong>[x1, y1]</strong> a <strong>[x2, y2]</strong> se
specifikuje obalový obdélník oblouku (jedná se o dva protilehlé vrcholy). Pokud
se zadá obdélník se stejně dlouhými hranami, je vytvořen kruhový oblouk,
v&nbsp;opačném případě se jedná o oblouk eliptický. Nejdůležitějšími
nepovinnými volbami jsou <strong>start=hodnota</strong> a
<strong>extent=hodnota</strong> (nikoli <strong>extend</strong>, sám tuto chybu
dělám velmi často). Těmito volbami se udává počáteční a koncový úhel - mezi
zadanými úhly bude oblouk vytvořen. Pomocí voleb <strong>outline, fill,
stipple</strong> atd. je možné nastavit způsob zobrazení obrysů i výplně
oblouků.</p>

<p><div class="rs-tip-major">Poznámka: první úhel může být větší než úhel
druhý. Ostatně nejlepší je si vše otestovat v&nbsp;praxi, protože zrovna práce
s&nbsp;oblouky byla jedinou &bdquo;grafickou&ldquo; chybou v&nbsp;CADové
aplikaci tvořené právě s&nbsp;využitím kreslicího plátna.</div></p>

<p>V&nbsp;případě, že při použití metody <strong>canvas.create_arc()</strong>
nebudeme specifikovat hodnotu pojmenovaného parametru <strong>style</strong>,
popř.&nbsp;mu přiřadíme hodnotu <strong>tkinter.PIESLICE</strong>, vykreslí se
<a href="https://cs.wikipedia.org/wiki/Kruhov%C3%A1_v%C3%BDse%C4%8D">kruhová
výseč</a>.</p>

<pre>
def <strong>draw_pieslices</strong>(canvas, tkcanvas):
    <i>"""Vykreslení kruhových výsečí na plátno."""</i>
    tkcanvas.create_arc(1, 1, 100, 100, fill="#ff8080")
    tkcanvas.create_arc(100, 100, 200, 200, fill="#8080ff", start=45)
    tkcanvas.create_arc(200, 1, 300, 100, fill="#80ffff", extent=180)
    tkcanvas.create_arc(300, 100, 399, 199, fill="#ffff80", start=45, extent=270)
&nbsp;
    tkcanvas.create_arc(1, 200, 100, 300, fill="#ff8080", start=90, extent=270)
    tkcanvas.create_arc(100, 300, 199, 399, fill="#8080ff", start=90 + 45, extent=270)
    tkcanvas.create_arc(200, 200, 299, 299, fill="#80ffff", start=180, extent=180)
    tkcanvas.create_arc(300, 300, 399, 399, fill="#ffff80", start=-45, extent=90)
</pre>

<p><div class="rs-tip-major">Poznámka: výseč ve skutečnosti nemusí být pouze
kruhová, protože se, podobně jako u oblouku, tvar specifikuje s&nbsp;využitím
souřadnic protilehlých vrcholů obalového obdélníku, takže lze tvořit i
eliptickou výseč.</div></p>

<p>Knihovna Tkinter (z&nbsp;níž PySimpleGUI canvas používá) umožňuje, aby
metoda <strong>canvas.create_arc()</strong> alternativně vykreslila i <a
href="https://cs.wikipedia.org/wiki/Kruhov%C3%A1_%C3%BAse%C4%8D">kruhovou
úseč</a>. Postačuje použít pojmenovaný nepovinný parametr
<strong>style=tkinter.CHORD</strong>:</p>

<pre>
def <strong>draw_chords</strong>(canvas, tkcanvas):
    <i>"""Vykreslení kruhových úsečí na plátno."""</i>
    tkcanvas.create_arc(0, 0, 100, 100, fill="#ff8080", style=tkinter.CHORD)
    tkcanvas.create_arc(100, 100, 200, 200, fill="#8080ff", start=45, style=tkinter.CHORD)
    tkcanvas.create_arc(200, 0, 300, 100, fill="#80ffff", extent=180, style=tkinter.CHORD)
    tkcanvas.create_arc(300, 100, 399, 199, fill="#ffff80", start=45, extent=270, style=tkinter.CHORD)
&nbsp;
    tkcanvas.create_arc(0, 200, 100, 300, fill="#ff8080", start=90, extent=270, style=tkinter.CHORD)
    tkcanvas.create_arc(100, 300, 199, 399, fill="#8080ff", start=90 + 45, extent=270, style=tkinter.CHORD)
    tkcanvas.create_arc(200, 200, 299, 299, fill="#80ffff", start=180, extent=180, style=tkinter.CHORD)
    tkcanvas.create_arc(300, 300, 399, 399, fill="#ffff80", start=-45, extent=90, style=tkinter.CHORD)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Rozšíření demonstračního příkladu o kruhové výseče a úseče</h2>

<p>Opět si tedy můžeme rozšířit původní demonstrační příklad, tentokrát o
možnost vykreslovat kruhové výseče a úseče. Grafické uživatelské rozhraní
příkladu se samozřejmě muselo změnit (přidala se nová tlačítka), a to konkrétně
do následující podoby:</p>

*** image ***
<p><i>Obrázek </i></p>

<p>Úplný zdrojový kód takto upraveného příkladu vypadá následovně:</p>

<pre>
import PySimpleGUI as sg
import tkinter
&nbsp;
<i># kreslicí plátno</i>
canvas = sg.Canvas(background_color='#ccffcc', size=(400, 400))
&nbsp;
&nbsp;
button_size = (10, 0)
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [sg.Button("Draw lines", size=button_size)],
    [sg.Button("Draw ellipse", size=button_size)],
    [sg.Button("Draw polyline", size=button_size)],
    [sg.Button("Draw spline", size=button_size)],
    [sg.Button("Draw pieslices", size=button_size)],
    [sg.Button("Draw chords", size=button_size)],
    [sg.Button("Clear canvas", size=button_size)],
    [sg.Button("Exit", size=button_size)],
]
&nbsp;
right_column = [
    [
        canvas
    ],
]
&nbsp;
layout = [
    [
        sg.Frame("Commands", left_column),
        sg.Frame("Canvas", right_column),
    ],
]
&nbsp;
&nbsp;
def <strong>draw_lines</strong>(canvas, tkcanvas):
    <i>"""Vykreslení úseček na plátno."""</i>
    size = canvas.get_size()
    tkcanvas.create_line(0, 0, size[0]-1, size[1]-1)
    tkcanvas.create_line(0, size[1]-1, size[0]-1, 0)
&nbsp;
&nbsp;
def <strong>draw_ellipse</strong>(canvas, tkcanvas):
    <i>"""Vykreslení oválu na plátno."""</i>
    border = 5
    size = canvas.get_size()
    tkcanvas.create_oval(border, border, size[0]-border, size[1]-border)
&nbsp;
&nbsp;
def <strong>draw_pieslices</strong>(canvas, tkcanvas):
    <i>"""Vykreslení kruhových výsečí na plátno."""</i>
    tkcanvas.create_arc(1, 1, 100, 100, fill="#ff8080")
    tkcanvas.create_arc(100, 100, 200, 200, fill="#8080ff", start=45)
    tkcanvas.create_arc(200, 1, 300, 100, fill="#80ffff", extent=180)
    tkcanvas.create_arc(300, 100, 399, 199, fill="#ffff80", start=45, extent=270)
&nbsp;
    tkcanvas.create_arc(1, 200, 100, 300, fill="#ff8080", start=90, extent=270)
    tkcanvas.create_arc(100, 300, 199, 399, fill="#8080ff", start=90 + 45, extent=270)
    tkcanvas.create_arc(200, 200, 299, 299, fill="#80ffff", start=180, extent=180)
    tkcanvas.create_arc(300, 300, 399, 399, fill="#ffff80", start=-45, extent=90)
&nbsp;
&nbsp;
def <strong>draw_chords</strong>(canvas, tkcanvas):
    <i>"""Vykreslení kruhových úsečí na plátno."""</i>
    tkcanvas.create_arc(0, 0, 100, 100, fill="#ff8080", style=tkinter.CHORD)
    tkcanvas.create_arc(100, 100, 200, 200, fill="#8080ff", start=45, style=tkinter.CHORD)
    tkcanvas.create_arc(200, 0, 300, 100, fill="#80ffff", extent=180, style=tkinter.CHORD)
    tkcanvas.create_arc(300, 100, 399, 199, fill="#ffff80", start=45, extent=270, style=tkinter.CHORD)
&nbsp;
    tkcanvas.create_arc(0, 200, 100, 300, fill="#ff8080", start=90, extent=270, style=tkinter.CHORD)
    tkcanvas.create_arc(100, 300, 199, 399, fill="#8080ff", start=90 + 45, extent=270, style=tkinter.CHORD)
    tkcanvas.create_arc(200, 200, 299, 299, fill="#80ffff", start=180, extent=180, style=tkinter.CHORD)
    tkcanvas.create_arc(300, 300, 399, 399, fill="#ffff80", start=-45, extent=90, style=tkinter.CHORD)
&nbsp;
&nbsp;
def <strong>draw_polyline</strong>(canvas, tkcanvas, smooth):
    <i>"""Vykreslení polyčáry na plátno."""</i>
    border = 1
    size = canvas.get_size()
    tkcanvas.create_line(
            border, size[1]-border,
            size[0]/3, border,
            size[0]*2/3, size[1]-border,
            size[0]-border, border,
            smooth=smooth)
&nbsp;
&nbsp;
def <strong>clear_canvas</strong>(tkcanvas):
    <i>"""Vymazání všech objektů z kreslicího plátna."""</i>
    tkcanvas.delete("all")
&nbsp;
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #33", layout, use_custom_titlebar=False, finalize=True)
&nbsp;
<i># reference na plátno z knihovny Tk</i>
tkcanvas = canvas.TKCanvas
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení jediné události</i>
    event, values = window.read()
    print("Event: ", event, "    Values: ", values)
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event in {"Exit", sg.WIN_CLOSED}:
        break
    elif event == "Draw lines":
        draw_lines(canvas, tkcanvas)
    elif event == "Draw ellipse":
        draw_ellipse(canvas, tkcanvas)
    elif event == "Draw polyline":
        draw_polyline(canvas, tkcanvas, False)
    elif event == "Draw spline":
        draw_polyline(canvas, tkcanvas, True)
    elif event == "Draw pieslices":
        draw_pieslices(canvas, tkcanvas)
    elif event == "Draw chords":
        draw_chords(canvas, tkcanvas)
    elif event == "Clear canvas":
        clear_canvas(tkcanvas)
    window.refresh()
&nbsp;
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Nastavení stylů vykreslovaných prvků</h2>

<p>Grafické objekty vkládané na plátno mohou mít nastaveno velké množství
vlastností, jak je ukázáno na modifikaci předchozího příkladu (nejsou zde
ukázány zdaleka všechny vlastnosti, ty jsou uvedeny a podrobně popsány
v&nbsp;helpu):</p>

<table>
<tr><th>Vlastnost</th><th>Popis</th></tr>
<tr><td>outline</td><td>barva obrysu</td></tr>
<tr><td>fill</td><td>barva výplně</td></tr>
<tr><td>width</td><td>šířka obrysu</td></tr>
<tr><td>dash</td><td>vzorek při vykreslování úseček a polyčar</td></tr>
<tr><td>font</td><td>popis použitého fontu</td></tr>
<tr><td>cap</td><td>styl zakončení objektů s šířkou větší než jeden pixel</td></tr>
<tr><td>join</td><td>styl spojení navazujících úseček s šířkou větší než jeden pixel</td></tr>
<tr><td>arrow</td><td>doplnění šipky na začátek či konec</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: některé z&nbsp;výše uvedených voleb si
ukážeme v&nbsp;navazujících příkladech.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vykreslení šipek</h2>

<p>V&nbsp;některých aplikacích může být velmi užitečná podpora pro kresbu šipek
k&nbsp;libovolné úsečce. Lze specifikovat, který konec (či konce) úsečky má být
opatřen šipkou:</p>

<pre>
tkcanvas.create_line(110, 50, 190, 50, <strong>arrow=tkinter.FIRST</strong>)
tkcanvas.create_line(210, 50, 290, 50, <strong>arrow=tkinter.LAST</strong>)
tkcanvas.create_line(310, 50, 390, 50, <strong>arrow=tkinter.BOTH</strong>)
</pre>

<p>Také je možné nastavit tvar šipky pomocí <a
href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/img/arrowshape.png">tří
vzdáleností d1, d2 a d3</a>, které se předávají pomocí n-tice tak, jak je to
ukázáno níže:</p>

<pre>
tkcanvas.create_line(10, 350, 90, 350,
                     width=2,
                     arrow=tkinter.BOTH,
                     <strong>arrowshape=(10, 10, 10)</strong>)
</pre>

<p><div class="rs-tip-major">Poznámka: šipky jsou samozřejmě vykresleny
korektně i ve chvíli, kdy je úsečka kreslena pod jiným úhlem.</div></p>

<p>V&nbsp;následující funkci je provedeno vykreslení šipek, a to několika
různými způsoby:</p>

<pre>
def <strong>draw_arrows</strong>(canvas, tkcanvas):
    <i>"""Vykreslení šipek."""</i>
    tkcanvas.create_line(10, 50, 90, 50)
    tkcanvas.create_line(110, 50, 190, 50, arrow=tkinter.FIRST)
    tkcanvas.create_line(210, 50, 290, 50, arrow=tkinter.LAST)
    tkcanvas.create_line(310, 50, 390, 50, arrow=tkinter.BOTH)
&nbsp;
    tkcanvas.create_line(10, 150, 90, 150, width=5)
&nbsp;
    tkcanvas.create_line(110, 150, 190, 150, width=5, arrow=tkinter.FIRST)
    tkcanvas.create_line(210, 150, 290, 150, width=5, arrow=tkinter.LAST)
    tkcanvas.create_line(310, 150, 390, 150, width=5, arrow=tkinter.BOTH)
&nbsp;
    tkcanvas.create_line(10, 250, 90, 250, width=2, arrow=tkinter.LAST, arrowshape=(10, 10, 10))
    tkcanvas.create_line(110, 250, 190, 250, width=2, arrow=tkinter.LAST, arrowshape=(10, 20, 10))
    tkcanvas.create_line(210, 250, 290, 250, width=2, arrow=tkinter.LAST, arrowshape=(10, 5, 10))
    tkcanvas.create_line(310, 250, 390, 250, width=2, arrow=tkinter.LAST, arrowshape=(10, 0, 10))
&nbsp;
    tkcanvas.create_line(10, 350, 90, 350, width=2, arrow=tkinter.BOTH, arrowshape=(10, 10, 10))
    tkcanvas.create_line(110, 350, 190, 350, width=2, arrow=tkinter.BOTH, arrowshape=(10, 20, 10))
    tkcanvas.create_line(210, 350, 290, 350, width=2, arrow=tkinter.BOTH, arrowshape=(10, 5, 10))
    tkcanvas.create_line(310, 350, 390, 350, width=2, arrow=tkinter.BOTH, arrowshape=(10, 0, 10))
</pre>

*** image ***
<p><i>Obrázek: </i></p>

<p>A takto vypadá celý zdrojový kód demonstračního příkladu doplněného o
možnost vykreslení šipek na kreslicí plátno:</p>

<pre>
import PySimpleGUI as sg
import tkinter
&nbsp;
<i># kreslicí plátno</i>
canvas = sg.Canvas(background_color='#ccffcc', size=(400, 400))
&nbsp;
&nbsp;
button_size = (10, 0)
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [sg.Button("Draw lines", size=button_size)],
    [sg.Button("Draw ellipse", size=button_size)],
    [sg.Button("Draw polyline", size=button_size)],
    [sg.Button("Draw spline", size=button_size)],
    [sg.Button("Draw pieslices", size=button_size)],
    [sg.Button("Draw chords", size=button_size)],
    [sg.Button("Draw arrows", size=button_size)],
    [sg.Button("Clear canvas", size=button_size)],
    [sg.Button("Exit", size=button_size)],
]
&nbsp;
right_column = [
    [
        canvas
    ],
]
&nbsp;
layout = [
    [
        sg.Frame("Commands", left_column),
        sg.Frame("Canvas", right_column),
    ],
]
&nbsp;
&nbsp;
def <strong>draw_lines</strong>(canvas, tkcanvas):
    <i>"""Vykreslení úseček na plátno."""</i>
    size = canvas.get_size()
    tkcanvas.create_line(0, 0, size[0]-1, size[1]-1)
    tkcanvas.create_line(0, size[1]-1, size[0]-1, 0)
&nbsp;
&nbsp;
def <strong>draw_ellipse</strong>(canvas, tkcanvas):
    <i>"""Vykreslení oválu na plátno."""</i>
    border = 5
    size = canvas.get_size()
    tkcanvas.create_oval(border, border, size[0]-border, size[1]-border)
&nbsp;
&nbsp;
def <strong>draw_pieslices</strong>(canvas, tkcanvas):
    <i>"""Vykreslení kruhových výsečí na plátno."""</i>
    tkcanvas.create_arc(1, 1, 100, 100, fill="#ff8080")
    tkcanvas.create_arc(100, 100, 200, 200, fill="#8080ff", start=45)
    tkcanvas.create_arc(200, 1, 300, 100, fill="#80ffff", extent=180)
    tkcanvas.create_arc(300, 100, 399, 199, fill="#ffff80", start=45, extent=270)
&nbsp;
    tkcanvas.create_arc(1, 200, 100, 300, fill="#ff8080", start=90, extent=270)
    tkcanvas.create_arc(100, 300, 199, 399, fill="#8080ff", start=90 + 45, extent=270)
    tkcanvas.create_arc(200, 200, 299, 299, fill="#80ffff", start=180, extent=180)
    tkcanvas.create_arc(300, 300, 399, 399, fill="#ffff80", start=-45, extent=90)
&nbsp;
&nbsp;
def <strong>draw_chords</strong>(canvas, tkcanvas):
    <i>"""Vykreslení kruhových úsečí na plátno."""</i>
    tkcanvas.create_arc(0, 0, 100, 100, fill="#ff8080", style=tkinter.CHORD)
    tkcanvas.create_arc(100, 100, 200, 200, fill="#8080ff", start=45, style=tkinter.CHORD)
    tkcanvas.create_arc(200, 0, 300, 100, fill="#80ffff", extent=180, style=tkinter.CHORD)
    tkcanvas.create_arc(300, 100, 399, 199, fill="#ffff80", start=45, extent=270, style=tkinter.CHORD)
&nbsp;
    tkcanvas.create_arc(0, 200, 100, 300, fill="#ff8080", start=90, extent=270, style=tkinter.CHORD)
    tkcanvas.create_arc(100, 300, 199, 399, fill="#8080ff", start=90 + 45, extent=270, style=tkinter.CHORD)
    tkcanvas.create_arc(200, 200, 299, 299, fill="#80ffff", start=180, extent=180, style=tkinter.CHORD)
    tkcanvas.create_arc(300, 300, 399, 399, fill="#ffff80", start=-45, extent=90, style=tkinter.CHORD)
&nbsp;
&nbsp;
def <strong>draw_arrows</strong>(canvas, tkcanvas):
    <i>"""Vykreslení šipek."""</i>
    tkcanvas.create_line(10, 50, 90, 50)
    tkcanvas.create_line(110, 50, 190, 50, arrow=tkinter.FIRST)
    tkcanvas.create_line(210, 50, 290, 50, arrow=tkinter.LAST)
    tkcanvas.create_line(310, 50, 390, 50, arrow=tkinter.BOTH)
&nbsp;
    tkcanvas.create_line(10, 150, 90, 150, width=5)
&nbsp;
    tkcanvas.create_line(110, 150, 190, 150, width=5, arrow=tkinter.FIRST)
    tkcanvas.create_line(210, 150, 290, 150, width=5, arrow=tkinter.LAST)
    tkcanvas.create_line(310, 150, 390, 150, width=5, arrow=tkinter.BOTH)
&nbsp;
    tkcanvas.create_line(10, 250, 90, 250, width=2, arrow=tkinter.LAST, arrowshape=(10, 10, 10))
    tkcanvas.create_line(110, 250, 190, 250, width=2, arrow=tkinter.LAST, arrowshape=(10, 20, 10))
    tkcanvas.create_line(210, 250, 290, 250, width=2, arrow=tkinter.LAST, arrowshape=(10, 5, 10))
    tkcanvas.create_line(310, 250, 390, 250, width=2, arrow=tkinter.LAST, arrowshape=(10, 0, 10))
&nbsp;
    tkcanvas.create_line(10, 350, 90, 350, width=2, arrow=tkinter.BOTH, arrowshape=(10, 10, 10))
    tkcanvas.create_line(110, 350, 190, 350, width=2, arrow=tkinter.BOTH, arrowshape=(10, 20, 10))
    tkcanvas.create_line(210, 350, 290, 350, width=2, arrow=tkinter.BOTH, arrowshape=(10, 5, 10))
    tkcanvas.create_line(310, 350, 390, 350, width=2, arrow=tkinter.BOTH, arrowshape=(10, 0, 10))
&nbsp;
&nbsp;
def <strong>draw_polyline</strong>(canvas, tkcanvas, smooth):
    <i>"""Vykreslení polyčáry na plátno."""</i>
    border = 1
    size = canvas.get_size()
    tkcanvas.create_line(
            border, size[1]-border,
            size[0]/3, border,
            size[0]*2/3, size[1]-border,
            size[0]-border, border,
            smooth=smooth)
&nbsp;
&nbsp;
def <strong>clear_canvas</strong>(tkcanvas):
    <i>"""Vymazání všech objektů z kreslicího plátna."""</i>
    tkcanvas.delete("all")
&nbsp;
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #34", layout, use_custom_titlebar=False, finalize=True)
&nbsp;
<i># reference na plátno z knihovny Tk</i>
tkcanvas = canvas.TKCanvas
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení jediné události</i>
    event, values = window.read()
    print("Event: ", event, "    Values: ", values)
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event in {"Exit", sg.WIN_CLOSED}:
        break
    elif event == "Draw lines":
        draw_lines(canvas, tkcanvas)
    elif event == "Draw ellipse":
        draw_ellipse(canvas, tkcanvas)
    elif event == "Draw polyline":
        draw_polyline(canvas, tkcanvas, False)
    elif event == "Draw spline":
        draw_polyline(canvas, tkcanvas, True)
    elif event == "Draw pieslices":
        draw_pieslices(canvas, tkcanvas)
    elif event == "Draw chords":
        draw_chords(canvas, tkcanvas)
    elif event == "Draw arrows":
        draw_arrows(canvas, tkcanvas)
    elif event == "Clear canvas":
        clear_canvas(tkcanvas)
    window.refresh()
&nbsp;
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Styl ukončení liniových obrazců a způsob vykreslení jejich zalomení</h2>

<p>Styl zakončení objektů s&nbsp;šířkou větší, než je jeden pixel, se řídí
nepovinným parametrem <strong>cap</strong>. Naproti tomu parametr
<strong>join</strong> určuje, jak se mají napojit navazující úsečky
v&nbsp;polyčáře, které jsou opět širší než jeden pixel.</p>

<p><div class="rs-tip-major">Poznámka: u objektů s&nbsp;šířkou jednoho pixelu
se používá klasický Bresenhamův algoritmus.</div></p>

<p>Hodnoty parametru <strong>cap</strong>:</p>

<table>
<tr><th>Hodnota</th><th>Význam</th></tr>
<tr><td>tkinter.BUTT</td><td>úsečka je ukončena přesně v&nbsp;koncových bodech</td></tr>
<tr><td>tkinter.PROJECTING</td><td>úsečka je ukončena za koncovými body ve vzdálenosti odpovídající šířce/2</td></tr>
<tr><td>tkinter.ROUND</td><td>oba konce úsečky jsou zaobleny (polokruh)</td></tr>
</table>

<p>Hodnoty parametru <strong>join</strong>:</p>

<table>
<tr><th>Hodnota</th><th>Význam</th></tr>
<tr><td>tkinter.ROUND</td><td>v&nbsp;místě lomu polyčáry je umístěn kruh o průměru odpovídajícímu její šířce</td></tr>
<tr><td>tkinter.BEVEL</td><td>lom polyčáry je &bdquo;useknut&ldquo; v&nbsp;koncovém bodě</td></tr>
<tr><td>tkinter.MITER</td><td>hrany úseček jsou protaženy až do místa, kde se protínají</td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
import PySimpleGUI as sg
import tkinter

# kreslicí plátno
canvas = sg.Canvas(background_color='#ccffcc', size=(400, 400))


# ovládací prvky, které se mají zobrazit v okně
left_column = [
    [sg.Button("Draw lines", size=(8, 0))],
    [sg.Button("Exit", size=(8, 0))],
]

right_column = [
    [
        canvas
    ],
]

layout = [
    [
        sg.Frame("Commands", left_column),
        sg.Frame("Canvas", right_column),
    ],
]


def draw_lines(canvas):
    """Vykreslení úseček na plátno."""
    # reference na plátno z knihovny Tk
    tkcanvas = canvas.TKCanvas

    # úsečky s nastavenými grafickými vlastnostmi
    tkcanvas.create_line(10, 10, 90, 90)
    tkcanvas.create_line(110, 10, 190, 90, fill="#8080ff")
    tkcanvas.create_line(210, 10, 290, 90, fill="#ffff80", width=8)
    tkcanvas.create_line(310, 10, 390, 90, fill="#80aa80", width=8, dash=15)

    tkcanvas.create_line(10, 110, 90, 190, fill="red", width=12)
    tkcanvas.create_line(110, 110, 190, 190, fill="red", width=12, cap=tkinter.BUTT)
    tkcanvas.create_line(210, 110, 290, 190, fill="red", width=12, cap=tkinter.PROJECTING)
    tkcanvas.create_line(310, 110, 390, 190, fill="red", width=12, cap=tkinter.ROUND)

    tkcanvas.create_line(10, 110, 90, 190, fill="white")
    tkcanvas.create_line(110, 110, 190, 190, fill="white")
    tkcanvas.create_line(210, 110, 290, 190, fill="white")
    tkcanvas.create_line(310, 110, 390, 190, fill="white")

    tkcanvas.create_line(10, 210, 50, 290, 90, 210, fill="red", width=12)
    tkcanvas.create_line(110, 210, 150, 290, 190, 210, fill="red", width=12, cap=tkinter.BUTT)
    tkcanvas.create_line(210, 210, 250, 290, 290, 210, fill="red", width=12, cap=tkinter.PROJECTING)
    tkcanvas.create_line(310, 210, 350, 290, 390, 210, fill="red", width=12, cap=tkinter.ROUND)

    # pomocné úsečky
    tkcanvas.create_line(10, 210, 50, 290, 90, 210, fill="white")
    tkcanvas.create_line(110, 210, 150, 290, 190, 210, fill="white")
    tkcanvas.create_line(210, 210, 250, 290, 290, 210, fill="white")
    tkcanvas.create_line(310, 210, 350, 290, 390, 210, fill="white")

    tkcanvas.create_line(10, 310, 50, 390, 90, 310, fill="red", width=12)
    tkcanvas.create_line(110, 310, 150, 390, 190, 310, fill="red", width=12, join=tkinter.ROUND)
    tkcanvas.create_line(210, 310, 250, 390, 290, 310, fill="red", width=12, join=tkinter.BEVEL)
    tkcanvas.create_line(310, 310, 350, 390, 390, 310, fill="red", width=12, join=tkinter.MITER)

    # pomocné úsečky
    tkcanvas.create_line(10, 310, 50, 390, 90, 310, fill="white")
    tkcanvas.create_line(110, 310, 150, 390, 190, 310, fill="white")
    tkcanvas.create_line(210, 310, 250, 390, 290, 310, fill="white")
    tkcanvas.create_line(310, 310, 350, 390, 390, 310, fill="white")


# vytvoření okna s ovládacími prvky
window = sg.Window("Window #35", layout, use_custom_titlebar=False, finalize=True)

# obsluha smyčky událostí (event loop)
while True:
    # přečtení jediné události
    event, values = window.read()
    print("Event: ", event, "    Values: ", values)

    # reakce na událost "uzavření okna"
    if event in {"Exit", sg.WIN_CLOSED}:
        break
    elif event == "Draw lines":
        draw_lines(canvas)
        window.refresh()

# po přečtení události okno zavřeme
window.close()
</pre>


<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
import PySimpleGUI as sg
import tkinter

# kreslicí plátno
canvas = sg.Canvas(background_color='#ccffcc', size=(400, 400))


# ovládací prvky, které se mají zobrazit v okně
left_column = [
    [sg.Button("Draw lines", size=(8, 0))],
    [sg.Button("Exit", size=(8, 0))],
]

right_column = [
    [
        canvas
    ],
]

layout = [
    [
        sg.Frame("Commands", left_column),
        sg.Frame("Canvas", right_column),
    ],
]


def draw_lines(canvas):
    """Vykreslení úseček na plátno."""
    # reference na plátno z knihovny Tk
    tkcanvas = canvas.TKCanvas

    # úsečky s nastavenými grafickými vlastnostmi
    tkcanvas.create_line(10, 10, 90, 90)
    tkcanvas.create_line(110, 10, 190, 90, fill="#8080ff")
    tkcanvas.create_line(210, 10, 290, 90, fill="#ffff80", width=8)
    tkcanvas.create_line(310, 10, 390, 90, fill="#80aa80", width=8, dash=15)

    tkcanvas.create_line(10, 110, 90, 190, width=2, dash=(12, 3))
    tkcanvas.create_line(110, 110, 190, 190, width=2, dash=(9, 6))
    tkcanvas.create_line(210, 110, 290, 190, width=2, dash=(6, 9))
    tkcanvas.create_line(310, 110, 390, 190, width=2, dash=(3, 12))

    tkcanvas.create_line(10, 210, 90, 290, width=2, dash=(12, 2, 2, 2))
    tkcanvas.create_line(110, 210, 190, 290, width=2, dash=(12, 2, 4, 2))
    tkcanvas.create_line(210, 210, 290, 290, width=2, dash=(12, 4, 2, 4))
    tkcanvas.create_line(310, 210, 390, 290, width=2, dash=(12, 2, 2, 2, 2, 2))

    tkcanvas.create_line(10, 310, 90, 390, width=2, dash=(12, 2, 2, 2), dashoff=0)
    tkcanvas.create_line(110, 310, 190, 390, width=2, dash=(12, 2, 4, 2), dashoff=5)
    tkcanvas.create_line(210, 310, 290, 390, width=2, dash=(12, 4, 2, 4), dashoff=10)
    tkcanvas.create_line(310, 310, 390, 390, width=2, dash=(12, 2, 2, 2, 2, 2), dashoff=-5)


# vytvoření okna s ovládacími prvky
window = sg.Window("Window #36", layout, use_custom_titlebar=False, finalize=True)

# obsluha smyčky událostí (event loop)
while True:
    # přečtení jediné události
    event, values = window.read()
    print("Event: ", event, "    Values: ", values)

    # reakce na událost "uzavření okna"
    if event in {"Exit", sg.WIN_CLOSED}:
        break
    elif event == "Draw lines":
        draw_lines(canvas)
        window.refresh()

# po přečtení události okno zavřeme
window.close()
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si <a
href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-pysimplegui/">v&nbsp;předmiminulém</a>,
<a
href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-vyuzitim-knihovny-pysimplegui-2/">minulém</a>
i dnešním článku ukázali, naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady. Pro jejich spuštění je pochopitelně
nutné mít nainstalován balíček <i>PySimpleGUI</i>:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>01-empty-window.py</td><td>prázdné okno</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/01-empty-window.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/01-empty-window.py</a></td></tr>
<tr><td> 2</td><td>02-empty-window-event-loop.py</td><td>prázdné okno, implementace klasické smyčky událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/02-empty-window-event-loop.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/02-empty-window-event-loop.py</a></td></tr>
<tr><td> 3</td><td>03-window-with-text-label.py</td><td>okno se specifikovanou velikostí a s&nbsp;vloženým textovým prvkem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/03-window-with-text-label.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/03-window-with-text-label.py</a></td></tr>
<tr><td> 4</td><td>04-window-with-text-label.py</td><td>okno s&nbsp;automaticky vypočtenou velikostí a s&nbsp;vloženým textovým prvkem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/04-window-with-text-label.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/04-window-with-text-label.py</a></td></tr>
<tr><td> 5</td><td>05-more-controls.py</td><td>pětice ovládacích prvků přidaných do okna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/05-more-controls.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/05-more-controls.py</a></td></tr>
<tr><td> 6</td><td>06-info.py</td><td>informační okno (dialog) bez navázané smyčky událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/06-info.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/06-info.py</a></td></tr>
<tr><td> 7</td><td>07-events.py</td><td>tisk všech zaregistrovaných a přečtených událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/07-events.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/07-events.py</a></td></tr>
<tr><td> 8</td><td>08-events-cancel.py</td><td>tisk zaregistrovaných událostí, reakce na stisk tlačítka <strong>Cancel</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/08-events-cancel.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/08-events-cancel.py</a></td></tr>
<tr><td> 9</td><td>09-one-shot-window.py</td><td>dialog pro zadání údajů do textových políček, bez smyčky událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/09-one-shot-window.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/09-one-shot-window.py</a></td></tr>
<tr><td>10</td><td>10-sizing.py</td><td>explicitní nastavení velikostí jednotlivých ovládacích prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/10-sizing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/10-sizing.py</a></td></tr>
<tr><td>11</td><td>11-even-more-controls.py</td><td>přidání dalších ovládacích prvků do okna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/11-even-more-controls.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/11-even-more-controls.py</a></td></tr>
<tr><td>12</td><td>12-different-theme.py</td><td>nastavení odlišného barvového tématu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/12-different-theme.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/12-different-theme.py</a></td></tr>
<tr><td>13</td><td>13-print-themes.py</td><td>tisk jmen všech dostupných témat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/13-print-themes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/13-print-themes.py</a></td></tr>
<tr><td>14</td><td>14-print-themes-2.py</td><td>tisk jmen všech dostupných témat, lepší varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/14-print-themes-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/14-print-themes-2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>15-select-theme.py</td><td>interaktivní změna tématu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/15-select-theme.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/15-select-theme.py</a></td></tr>
<tr><td>16</td><td>16-better-select-theme.py</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/16-better-select-theme.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/16-better-select-theme.py</a></td></tr>
<tr><td>17</td><td>17-default-alignment.py</td><td>výchozí zarovnání ovládacích prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/17-default-alignment.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/17-default-alignment.py</a></td></tr>
<tr><td>18</td><td>18-center-alignment.py</td><td>horizontální vycentrování ovládacích prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/18-center-alignment.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/18-center-alignment.py</a></td></tr>
<tr><td>19</td><td>19-right-alignment.py</td><td>zarovnání ovládacích prvků doprava</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/19-right-alignment.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/19-right-alignment.py</a></td></tr>
<tr><td>20</td><td>20-push.py</td><td>&bdquo;pružiny&ldquo; použité při rozmístění prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/20-push.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/20-push.py</a></td></tr>
<tr><td>21</td><td>21-columns.py</td><td>umístění prvků do sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/21-columns.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/21-columns.py</a></td></tr>
<tr><td>22</td><td>22-columns.py</td><td>umístění prvků do sloupců, sloupce uvnitř sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/22-columns.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/22-columns.py</a></td></tr>
<tr><td>23</td><td>23-separators.py</td><td>horizontální a vertikální oddělovače</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/23-separators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/23-separators.py</a></td></tr>
<tr><td>24</td><td>24-frames.py</td><td>umístění prvků do rámců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/24-frames.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/24-frames.py</a></td></tr>
<tr><td>25</td><td>25-menu.py</td><td>hlavní menu v&nbsp;okně aplikace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/25-menu.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/25-menu.py</a></td></tr>
<tr><td>26</td><td>26-status-bar.py</td><td>stavový řádek v&nbsp;okně aplikace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/26-status-bar.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/26-status-bar.py</a></td></tr>
<tr><td>27</td><td>27-custom-titlebar.py</td><td>změna způsobu zobrazení titulkové lišty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/27-custom-titlebar.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/27-custom-titlebar.py</a></td></tr>
<tr><td>28</td><td>28-context-menu.py</td><td>kontextové menu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/28-context-menu.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/28-context-menu.py</a></td></tr>
<tr><td>29</td><td>29-canvas.py</td><td>vytvoření kreslicího plátna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/29-canvas.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/29-canvas.py</a></td></tr>
<tr><td>30</td><td>30-canvas-size-background.py</td><td>specifikace velikosti plátna a barvy jeho pozadí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/30-canvas-size-background.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/30-canvas-size-background.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>31-draw-on-canvas.py</td><td>vykreslení úseček na plátno</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/31-draw-on-canvas.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/31-draw-on-canvas.py</a></td></tr>
<tr><td>32</td><td>32-more-shapes.py</td><td>ukázka většího množství geometrických tvarů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/32-more-shapes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/32-more-shapes.py</a></td></tr>
<tr><td>33</td><td>33-pieslice-and-chord.py</td><td>kruhové výseče a úseče</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/33-pieslice-and-chord.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/33-pieslice-and-chord.py</a></td></tr>
<tr><td>34</td><td>34-arrows.py</td><td>různé tvary šipek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/34-arrows.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/34-arrows.py</a></td></tr>
<tr><td>35</td><td>35-line-styles.py</td><td>styly vykreslování úseček</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/35-line-styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/35-line-styles.py</a></td></tr>
<tr><td>36</td><td>36-line-dashes.py</td><td>styly vykreslování úseček</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/36-line-dashes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/36-line-dashes.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PySimpleGUI<br />
<a href="https://www.pysimplegui.org/en/latest/">https://www.pysimplegui.org/en/latest/</a>
</li>

<li>Kivy na GitHubu<br />
<a href="https://github.com/kivy/kivy">https://github.com/kivy/kivy</a>
</li>

<li>DearPyGui na GitHubu<br />
<a href="https://github.com/hoffstadt/DearPyGui">https://github.com/hoffstadt/DearPyGui</a>
</li>

<li>PySimpleGUI Tutorial<br />
<a href="https://www.tutorialspoint.com/pysimplegui/index.htm">https://www.tutorialspoint.com/pysimplegui/index.htm</a>
</li>

<li>PySimpleGUI - Canvas Element<br />
<a href="https://www.tutorialspoint.com/pysimplegui/pysimplegui_canvas_element.htm">https://www.tutorialspoint.com/pysimplegui/pysimplegui_canvas_element.htm</a>
</li>

<li>Dokumentace ke knihovně PySimpleGUI<br />
<a href="https://www.pysimplegui.org/en/latest/">https://www.pysimplegui.org/en/latest/</a>
</li>

<li>Dokumentace ke knihovně DearPyGui<br />
<a href="https://dearpygui.readthedocs.io/en/latest/index.html#">https://dearpygui.readthedocs.io/en/latest/index.html#</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>Stránky projektu wxPython<br />
<a href="https://wxpython.org/">https://wxpython.org/</a>
</li>

<li>wxPython Project Phoenix (na GitHubu)<br />
<a href="https://github.com/wxWidgets/Phoenix/blob/wxPython-4.0.3/README.rst">https://github.com/wxWidgets/Phoenix/blob/wxPython-4.0.3/README.rst</a>
</li>

<li>wxPython API Documentation<br />
<a href="https://docs.wxpython.org/index.html">https://docs.wxpython.org/index.html</a>
</li>

<li>wxWidgets<br />
<a href="https://wxwidgets.org/">https://wxwidgets.org/</a>
</li>

<li>wxPython 4.0.3 na PyPi<br />
<a href="https://pypi.org/project/wxPython/4.0.3/">https://pypi.org/project/wxPython/4.0.3/</a>
</li>

<li>wxGlade - a GUI builder for wxWidgets<br />
<a href="http://wxglade.sourceforge.net/">http://wxglade.sourceforge.net/</a>
</li>

<li>Repositář projektu wxGlade<br />
<a href="https://github.com/wxGlade/wxGlade/">https://github.com/wxGlade/wxGlade/</a>
</li>

<li>wxGlade’s documentation<br />
<a href="http://wxglade.sourceforge.net/docs/index.html">http://wxglade.sourceforge.net/docs/index.html</a>
</li>

<li>Graphical User Interfaces (GUI)<br />
<a href="https://pythonspot.com/gui/">https://pythonspot.com/gui/</a>
</li>

<li>wxPyWiki<br />
<a href="https://wiki.wxpython.org/FrontPage">https://wiki.wxpython.org/FrontPage</a>
</li>

<li>Getting started with wxPython<br />
<a href="https://wiki.wxpython.org/Getting%20Started#A_First_Application:_.22Hello.2C_World.22">https://wiki.wxpython.org/Getting%20Started#A_First_Application:_.22Hello.2C_World.22</a>
</li>

<li>wxPython GUI tutorial<br />
<a href="https://pythonspot.com/wxpython-gui-tutorial/">https://pythonspot.com/wxpython-gui-tutorial/</a>
</li>

<li>wxPython tutorial<br />
<a href="http://zetcode.com/wxpython/">http://zetcode.com/wxpython/</a>
</li>

<li>Build wxPython On Raspberry Pi<br />
<a href="https://wiki.wxpython.org/BuildWxPythonOnRaspberryPi">https://wiki.wxpython.org/BuildWxPythonOnRaspberryPi</a>
</li>

<li>wxPython History<br />
<a href="https://wxpython.org/pages/history/index.html">https://wxpython.org/pages/history/index.html</a>
</li>

<li>Installing wxPython 4.0 (Project Phoenix) on Fedora 27<br />
<a href="https://blog.wizardsoftheweb.pro/installing-wxpython-on-fedora/">https://blog.wizardsoftheweb.pro/installing-wxpython-on-fedora/</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Hand Coded GUI Versus Qt Designer GUI<br />
<a href="https://stackoverflow.com/questions/387092/hand-coded-gui-versus-qt-designer-gui">https://stackoverflow.com/questions/387092/hand-coded-gui-versus-qt-designer-gui</a>
</li>

<li>Qt Creator Manual<br />
<a href="http://doc.qt.io/qtcreator/">http://doc.qt.io/qtcreator/</a>
</li>

<li>Qt Designer Manual<br />
<a href="http://doc.qt.io/qt-5/qtdesigner-manual.html">http://doc.qt.io/qt-5/qtdesigner-manual.html</a>
</li>

<li>Qt Creator (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Qt_Creator">https://en.wikipedia.org/wiki/Qt_Creator</a>
</li>

<li>QIODevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QIODevice.html#PySide.QtCore.QIODevice">https://pyside.github.io/docs/pyside/PySide/QtCore/QIODevice.html#PySide.QtCore.QIODevice</a>
</li>

<li>QFile<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QFile.html#PySide.QtCore.QFile">https://pyside.github.io/docs/pyside/PySide/QtCore/QFile.html#PySide.QtCore.QFile</a>
</li>

<li>QUiLoader<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtUiTools/QUiLoader.html#PySide.QtUiTools.PySide.QtUiTools.QUiLoader.load">https://pyside.github.io/docs/pyside/PySide/QtUiTools/QUiLoader.html#PySide.QtUiTools.PySide.QtUiTools.QUiLoader.load</a>
</li>

<li>QSvgWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html">https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html</a>
</li>

<li>QByteArray<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html">https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

