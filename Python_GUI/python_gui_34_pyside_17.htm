<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu: použití kaskádových stylů v PySide</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu: použití kaskádových stylů v PySide</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;dnešní části seriálu o tvorbě grafického uživatelského rozhraní v&nbsp;Pythonu si ukážeme některé zajímavé možnosti ovlivnění stylů vykreslování ovládacích prvků, které programátorům nabízí knihovna PySide díky podpoře kaskádových stylů (CSS).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba GUI v&nbsp;Pythonu: použití kaskádových stylů v&nbsp;PySide</a></p>
<p><a href="#k02">2. Použití vlastních kaskádových stylů pro úpravu stylu celé aplikace</a></p>
<p><a href="#k03">3. První demonstrační příklad &ndash; použití vlastních kaskádových stylů přímo v&nbsp;aplikaci</a></p>
<p><a href="#k04">4. Galerie: screenshoty prvního příkladu při použití všech základních podporovaných stylů</a></p>
<p><a href="#k05">5. Využití externích kaskádových stylů</a></p>
<p><a href="#k06">6. Význam jednotlivých vlastností deklarovaných v&nbsp;souboru <strong>stylesheet.css</strong></a></p>
<p><a href="#k07">7. Druhý demonstrační příklad &ndash; načtení externího kaskádového stylu</a></p>
<p><a href="#k08">8. Galerie: screenshoty druhého příkladu při použití všech základních podporovaných stylů</a></p>
<p><a href="#k09">9. Selektory v&nbsp;kaskádních stylech i v&nbsp;programovém kódu</a></p>
<p><a href="#k10">10. Třetí demonstrační příklad &ndash; použití selektorů pro výběr typu tlačítek</a></p>
<p><a href="#k11">11. Galerie: screenshoty třetího příkladu při použití všech základních podporovaných stylů</a></p>
<p><a href="#k12">12. Pseudotřídy: styly tlačítek ve chvíli stisku popř. když je nad nimi umístěn kurzor myši</a></p>
<p><a href="#k13">13. Nastavení pozadí u vybraných prvků GUI</a></p>
<p><a href="#k14">14. Čtvrtý demonstrační příklad &ndash; použití různých kaskádových stylů (pseudotřídy, pozadí prvků, ...)</a></p>
<p><a href="#k15">15. Galerie: screenshoty čtvrtého příkladu při použití všech základních podporovaných stylů</a></p>
<p><a href="#k16">16. Nastavení stylů zaškrtávacích tlačítek</a></p>
<p><a href="#k17">17. Pátý demonstrační příklad &ndash; vlastní styl zaškrtávacích tlačítek</a></p>
<p><a href="#k18">18. Galerie: screenshoty pátého příkladu při použití všech základních podporovaných stylů</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba GUI v&nbsp;Pythonu: použití kaskádových stylů v&nbsp;PySide</h2>

<p><a
href="https://www.root.cz/clanky/nastaveni-stylu-vykreslovani-widgetu-oken-i-dialogu-v-knihovne-pyside/">V&nbsp;předchozí
části</a> seriálu <a
href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">o
tvorbě aplikací s&nbsp;grafickým uživatelským rozhraním v&nbsp;Pythonu</a> jsme
si ukázali některé možnosti změny stylů vykreslování jak jednotlivých
ovládacích prvků, tak i celých dialogů a aplikací s&nbsp;využitím knihovny
PySide. Připomeňme si, že tato knihovna na většině podporovaných platforem
nabízí šest základních stylů ovlivňujících vzhled a do určité míry i chování
widgetů. Jedná se o tyto styly, které je možné v&nbsp;případě potřeby nastavit
pomocí parametru příkazové řádky <strong>-style</strong> nebo programově při
běhu aplikace:</p>

<ul>
<li>CDE</li>
<li>Cleanlooks</li>
<li>GTK+</li>
<li>Motif</li>
<li>Plastique</li>
<li>Windows</li>
</ul>

<a href="https://www.root.cz/obrazek/323269/"><img src="https://i.iinfo.cz/images/489/pyside16-5-prev.png" class="image-323269" alt="&nbsp;" width="346" height="270" /></a>
<p><i>Obrázek 1: Ovládací prvky vykreslené při použití standardního stylu
nazvaného <strong>Plastique</strong>.</i></p>

<p>Kromě toho je však možné změnit styl vykreslování s&nbsp;využitím
kaskádových stylů neboli CSS (<i>Cascading Style Sheet</i>). I o této možnosti
jsme se minule zmínili; dnes si však použití kaskádových stylů vyzkoušíme na
větším množství demonstračních příkladů, a to včetně speciálních voleb platných
jen pro některý typ ovládacích prvků (zaškrtávací tlačítko, scrollovací oblast
atd.).</p>

<img src="https://i.iinfo.cz/images/489/pyside16-26.png" class="image-323290" alt="&nbsp;" width="244" height="131" />
<p><i>Obrázek 2: Změna vzhledu ovládacích prvků s&nbsp;využitím kaskádových
stylů.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Použití vlastních kaskádových stylů pro úpravu stylu celé aplikace</h2>

<p>Zdánlivě nejjednodušším způsobem použití kaskádních stylů je vytvoření
řetězce obsahujícího příslušná pravidla s&nbsp;následným zavoláním metody
<strong>QMainWindow.setStyleSheet()</strong>, které se tento řetězec předá.
Způsob programového nastavení vlastních kaskádových stylů může vypadat
následovně (úplný kód je uveden <a href="#k03">v&nbsp;navazující
kapitole</a>):</p>

<pre>
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        ...
        ...
        ...
&nbsp;
    def <strong>prepareGUI</strong>(self):
        ...
        ...
        ...
        styleSheet = """
            QWidget {border-radius: 10px;
                     border: 1px solid gray;}
            QPushButton { color: #404040;
                          background-color: rgba(188, 188, 188, 50);
                          font-size: 18px;
                          border: 1px solid black;
                          outline-color: red;
                        }
            QLabel { color: #404040;
                     background-color: rgba(255, 188, 20, 0);
                     border: 0px;
                     font-size: 14px;
                   }
            QToolBar { margin: 10px; }
            QLineEdit { background-color: #c0ffc0;
                        selection-background-color:  red;
                        selection-color:  white;
                        font-size: 24px;}
        """
        self.setStyleSheet(styleSheet)
        ...
        ...
        ...
</pre>

<p>Tento způsob však má několik nevýhod, zejména pak:</p>

<ul>

<li>Není možné jednoduše nahradit jeden styl za jiný (například jen pro jednu
vybranou platformu). Ztrácíme tedy flexibilitu.</li>

<li>Tím, že je CSS zapsán v&nbsp;obecném řetězci, přijdeme o možnosti nabízené
moderními textovými editory (zvýraznění syntaxe, automatické doplňování
atd.)</li>

<li>Taktéž přijdeme o možnost použít <a
href="https://codebeautify.org/cssvalidate">validátory</a> a <a
href="http://csslint.net/">lintery</a> CSS (popravdě ale velké množství
validátorů bude hlásit chyby z&nbsp;toho důvodu, že se používají ve světě WWW
neznámé vlastnosti/properties).</li>

</ul>

<img src="https://i.iinfo.cz/images/186/pyside17-1-1.png" class="image-324086" alt="&#160;" width="403" height="327" />
<p><i>Obrázek 3: Změna stylu vykreslení ovládacích prvků aplikace, a to včetně
hlavního menu, s&nbsp;využitím kaskádových stylů.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad &ndash; použití vlastních kaskádových stylů přímo v&nbsp;aplikaci</h2>

<p>Použití řetězce obsahujícího programátorem definované kaskádové styly (které
jsou tak zabudovány přímo do aplikace), je ukázáno v&nbsp;dnešním prvním
demonstračním příkladu, jehož zdrojový kód je zobrazen pod tímto odstavcem.
Povšimněte si, že se nejedná o příliš flexibilní a vlastně ani o dobře čitelné
či udržovatelné řešení:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># další tlačítka</i>
        button1 = self.prepareButtonWithBackground("#e08080")
        button2 = self.prepareButtonWithBackground("lightblue")
        button3 = self.prepareButtonWithBackground("yellow")
&nbsp;
        <i># ostatní widgety</i>
        lineEdit = self.prepareLineEdit()
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(button1)
        topLayout.addWidget(button2)
        topLayout.addWidget(button3)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(lineEdit)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareLineEdit</strong>(self):
        <i># jednořádkové vstupní textové pole</i>
        lineEdit = QtGui.QLineEdit(self)
        <i># naplnění textového pole textem</i>
        lineEdit.setText(u"příliš žluťoučký kůň úpěl ďábelské ódy")
        return lineEdit
&nbsp;
    def <strong>prepareButtonWithBackground</strong>(self, background):
        <i># tlačítko s popisem</i>
        button = QtGui.QPushButton(background, self)
&nbsp;
        <i># nastavení stylu</i>
        styleSheet = "background-color: {background}".format(background=background)
        button.setStyleSheet(styleSheet)
&nbsp;
        button.resize(button.sizeHint())
&nbsp;
        return button
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        self.resize(400, 300)
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># položka Style v hlavním menu</i>
        styleMenu = menubar.addMenu('&amp;Style')
&nbsp;
        <i># jednotlivé položky menu s nabízenými styly</i>
        for key in QtGui.QStyleFactory.keys():
            styleMenuItem = QtGui.QAction(key, self)
            styleMenuItem.triggered.connect(lambda key=key: self.setStyle(key))
            styleMenu.addAction(styleMenuItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
        styleSheet = """
            QWidget {border-radius: 10px;
                     border: 1px solid gray;}
            QPushButton { color: #404040;
                          background-color: rgba(188, 188, 188, 50);
                          font-size: 18px;
                          border: 1px solid black;
                          outline-color: red;
                        }
            QLabel { color: #404040;
                     background-color: rgba(255, 188, 20, 0);
                     border: 0px;
                     font-size: 14px;
                   }
            QToolBar { margin: 10px; }
            QLineEdit { background-color: #c0ffc0;
                        selection-background-color:  red;
                        selection-color:  white;
                        font-size: 24px;}
        """
        self.setStyleSheet(styleSheet)
&nbsp;
    def <strong>setStyle</strong>(self, styleName):
        <i># nastavení vybraného stylu</i>
        QtGui.QApplication.setStyle(styleName)
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># QtGui.QApplication.setStyle("plastique")</i>
    <i># QtGui.QApplication.setStyleSheet("background-color: #407040; color: white")</i>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Galerie: screenshoty prvního příkladu při použití všech základních podporovaných stylů</h2>

<p>Podívejme se nyní, jak se změní okno prvního demonstračního příkladu při
výběru některého ze šesti dostupných standardních stylů. Ze screenshotů je
patrné, že kaskádní styly nastavené programátorem mají větší prioritu, ovšem
změna stylu se projeví například na tvaru handleru nástrojového pruhu atd.:</p>

<img src="https://i.iinfo.cz/images/186/pyside17-1-2.png" class="image-324087" alt="&#160;" width="402" height="327" />
<p><i>Obrázek 4: Okno prvního demonstračního příkladu po výběru standardního
stylu <strong>Windows</strong>.</i></p>

<img src="https://i.iinfo.cz/images/186/pyside17-1-3.png" class="image-324088" alt="&#160;" width="402" height="327" />
<p><i>Obrázek 5: Okno prvního demonstračního příkladu po výběru standardního
stylu <strong>Motif</strong>.</i></p>

<img src="https://i.iinfo.cz/images/186/pyside17-1-4.png" class="image-324089" alt="&#160;" width="402" height="327" />
<p><i>Obrázek 6: Okno prvního demonstračního příkladu po výběru standardního
stylu <strong>CDE</strong>.</i></p>

<img src="https://i.iinfo.cz/images/186/pyside17-1-5.png" class="image-324090" alt="&#160;" width="402" height="332" />
<p><i>Obrázek 7: Okno prvního demonstračního příkladu po výběru standardního
stylu <strong>Plastique</strong>.</i></p>

<img src="https://i.iinfo.cz/images/186/pyside17-1-6.png" class="image-324091" alt="&#160;" width="402" height="332" />
<p><i>Obrázek 8: Okno prvního demonstračního příkladu po výběru standardního
stylu <strong>GTK+</strong>.</i></p>

<img src="https://i.iinfo.cz/images/186/pyside17-1-7.png" class="image-324092" alt="&#160;" width="402" height="332" />
<p><i>Obrázek 9: Okno prvního demonstračního příkladu po výběru standardního
stylu <strong>Cleanlooks</strong>.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Využití externích kaskádových stylů</h2>

<p>Podívejme se nyní na způsob využití externích kaskádových stylů, což je
řešení, které nám přinese jak lepší flexibilitu, tak i možnost editovat soubor
s&nbsp;kaskádovými styly způsobem odpovídajícím 21.století. Nejprve vytvoříme
samostatný soubor nazvaný <a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet.css">stylesheet.css</a>.
Obsah tohoto souboru bude následující:</p>

<pre>
QWidget {
    border-radius: 10px;
    border: 1px solid gray;
}
&nbsp;
QPushButton {
    color: #404040;
    background-color: rgba(188, 188, 188, 50);
    font-size: 18px;
    border: 1px solid black;
    outline-color: red;
}
&nbsp;
QLabel {
    color: #404040;
    background-color: rgba(255, 188, 20, 0);
    border: 0px;
    font-size: 14px;
}
&nbsp;
QToolBar {
    margin: 10px;
}
&nbsp;
QLineEdit {
    background-color: #c0ffc0;
    selection-background-color:  red;
    selection-color:  white;
    font-size: 24px;
}
</pre>

<p>O načtení kaskádového stylu uloženého v&nbsp;externím souboru
s&nbsp;následným nastavením stylů vykreslování se postará následující trojice
programových řádků:</p>

<pre>
with open("stylesheet.css") as fin:
    styleSheet = fin.read()
    self.setStyleSheet(styleSheet)
</pre>

<a href="https://www.root.cz/obrazek/324093/"><img src="https://i.iinfo.cz/images/88/pyside17-2-1-prev.png" class="image-324093" alt="&#160;" width="291" height="270" /></a>
<p><i>Obrázek 10: Editace souboru <strong>stylesheet.css</strong>
v&nbsp;programátorském editoru se zvýrazněním syntaxe.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Význam jednotlivých vlastností deklarovaných v&nbsp;souboru <strong>stylesheet.css</strong></h2>

<p>Podívejme se nyní podrobněji na jednotlivé vlastnosti, které jsou
deklarovány v&nbsp;souboru <strong>stylesheet.css</strong>. V&nbsp;prvním bloku
jsou deklarovány vlastnosti platné pro všechny ovládací prvky, samozřejmě
s&nbsp;výjimkou těch prvků, u nichž obecnou vlastnost &bdquo;přebijeme&ldquo;
vlastností konkrétní. Je zde deklarováno, že ovládací prvky mají mít šedý okraj
široký jeden pixel a rohy mají být zaobleny obloukem s&nbsp;poloměrem deseti
pixelů (nutno říci, že ne všechny widgety okraj obsahují či podporují):</p>

<pre>
QWidget {
    border-radius: 10px;
    border: 1px solid gray;
}
</pre>

<p>Dále deklarujeme vlastnosti zobrazení platné pro klasická tlačítka.
Nastavena je barva textu, barva pozadí (s&nbsp;průhledností), velikost písma
(tj.&nbsp;popisků tlačítek) a v&nbsp;neposlední řade i vlastnosti okraje.
Ostatně právě zde &bdquo;přebíjíme&ldquo; původní šedou barvu barvou
černou:</p>

<pre>
QPushButton {
    color: #404040;
    background-color: rgba(188, 188, 188, 50);
    font-size: 18px;
    border: 1px solid black;
    outline-color: red;
}
</pre>

<p>Stejným způsobem měníme vlastnost popisků (labels). Povšimněte si, že šířka
okraje je nastavena na 0 pixelů, tj.&nbsp;okraj nebude zobrazen:</p>

<pre>
QLabel {
    color: #404040;
    background-color: rgba(255, 188, 20, 0);
    border: 0px;
    font-size: 14px;
}
</pre>

<p>U nástrojového pruhu je zvětšena mezera mezi plochou vyhrazenou pro tento
widget a skutečně použitou plochou widgetu. Ze všech stran jsme vytvořili
prázdný prostor o šířce deseti pixelů:</p>

<pre>
QToolBar {
    margin: 10px;
}
</pre>

<p>A konečně měníme i vlastnosti jednořádkového textového pole. Zde stojí za
povšimnutí fakt, že je možné modifikovat i barvu vybraného textu
popř.&nbsp;barvu samotného výběru:</p>

<pre>
QLineEdit {
    background-color: #c0ffc0;
    selection-background-color:  red;
    selection-color:  white;
    font-size: 24px;
}
</pre>

<img src="https://i.iinfo.cz/images/88/pyside17-2-2.png" class="image-324094" alt="&#160;" width="402" height="327" />
<p><i>Obrázek 11: Modifikovaná barva textu a výběru.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Druhý demonstrační příklad &ndash; načtení externího kaskádového stylu</h2>

<p>Implementace načtení externího kaskádového stylu je ukázána v&nbsp;dnešním
druhém demonstračním příkladu, jehož zdrojový kód je zobrazen pod tímto
odstavcem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># další tlačítka</i>
        button1 = self.prepareButtonWithBackground("#e08080")
        button2 = self.prepareButtonWithBackground("lightblue")
        button3 = self.prepareButtonWithBackground("yellow")
&nbsp;
        <i># ostatní widgety</i>
        lineEdit = self.prepareLineEdit()
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(button1)
        topLayout.addWidget(button2)
        topLayout.addWidget(button3)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(lineEdit)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareLineEdit</strong>(self):
        <i># jednořádkové vstupní textové pole</i>
        lineEdit = QtGui.QLineEdit(self)
        <i># naplnění textového pole textem</i>
        lineEdit.setText(u"příliš žluťoučký kůň úpěl ďábelské ódy")
        return lineEdit
&nbsp;
    def <strong>prepareButtonWithBackground</strong>(self, background):
        <i># tlačítko s popisem</i>
        button = QtGui.QPushButton(background, self)
&nbsp;
        <i># nastavení stylu</i>
        styleSheet = "background-color: {background}".format(background=background)
        button.setStyleSheet(styleSheet)
&nbsp;
        button.resize(button.sizeHint())
&nbsp;
        return button
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        self.resize(400, 300)
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># položka Style v hlavním menu</i>
        styleMenu = menubar.addMenu('&amp;Style')
&nbsp;
        <i># jednotlivé položky menu s nabízenými styly</i>
        for key in QtGui.QStyleFactory.keys():
            styleMenuItem = QtGui.QAction(key, self)
            styleMenuItem.triggered.connect(lambda key=key: self.setStyle(key))
            styleMenu.addAction(styleMenuItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
        with open("stylesheet.css") as fin:
            styleSheet = fin.read()
            self.setStyleSheet(styleSheet)
&nbsp;
    def <strong>setStyle</strong>(self, styleName):
        <i># nastavení vybraného stylu</i>
        QtGui.QApplication.setStyle(styleName)
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># QtGui.QApplication.setStyle("plastique")</i>
    <i># QtGui.QApplication.setStyleSheet("background-color: #407040; color: white")</i>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Galerie: screenshoty druhého příkladu při použití všech základních podporovaných stylů</h2>

<p>V&nbsp;této kapitole je opět ukázána galerie screenshotů dnešního druhého
demonstračního příkladu, tentokrát včetně ukázky stylu výběru textu
v&nbsp;jednořádkovém vstupním textovém poli:</p>

<img src="https://i.iinfo.cz/images/88/pyside17-2-3.png" class="image-324095" alt="&#160;" width="402" height="327" />
<p><i>Obrázek 12: Okno druhého demonstračního příkladu po výběru standardního
stylu <strong>Windows</strong>.</i></p>

<img src="https://i.iinfo.cz/images/88/pyside17-2-4.png" class="image-324096" alt="&#160;" width="402" height="327" />
<p><i>Obrázek 13: Okno druhého demonstračního příkladu po výběru standardního
stylu <strong>Motif</strong>.</i></p>

<img src="https://i.iinfo.cz/images/88/pyside17-2-5.png" class="image-324098" alt="&#160;" width="402" height="332" />
<p><i>Obrázek 14: Okno druhého demonstračního příkladu po výběru standardního
stylu <strong>CDE</strong>.</i></p>

<img src="https://i.iinfo.cz/images/88/pyside17-2-6.png" class="image-324098" alt="&#160;" width="402" height="332" />
<p><i>Obrázek 15: Okno druhého demonstračního příkladu po výběru standardního
stylu <strong>Plastique</strong>.</i></p>

<img src="https://i.iinfo.cz/images/88/pyside17-2-7.png" class="image-324099" alt="&#160;" width="402" height="332" />
<p><i>Obrázek 16: Okno druhého demonstračního příkladu po výběru standardního
stylu <strong>GTK+</strong>.</i></p>

<img src="https://i.iinfo.cz/images/88/pyside17-2-8.png" class="image-324100" alt="&#160;" width="402" height="332" />
<p><i>Obrázek 17: Okno druhého demonstračního příkladu po výběru standardního
stylu <strong>Cleanlooks</strong>.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Selektory v&nbsp;kaskádních stylech i v&nbsp;programovém kódu</h2>

<p>V&nbsp;kaskádních stylech jsme prozatím používali pouze selektory obsahující
jména tříd, například <strong>QPushButton</strong>, <strong>QWidget</strong>
atd. Tyto selektory odpovídají jménům značek v&nbsp;XML či HTML. Ovšem
selektory mohou být i komplikovanější. Podívejme se na typický příklad. Budeme
chtít vytvořit specifikace stylů pro tři typy tlačítek: potvrzovací tlačítko,
tlačítko pro zobrazení nápovědy a konečně tlačítko, kterým se nějaká akce
zakazuje popř.&nbsp;se jím zavírá dialogové okno. Takový styl není možné
přiřadit celé třídě <strong>QPushButton</strong>, ovšem můžeme použít
následující trik, který by v&nbsp;HTML/XML odpovídal identifikátoru prvku:</p>

<pre>
QPushButton<strong>#ok</strong> {
    background-color: #c0ffc0;
}
&nbsp;
QPushButton<strong>#cancel</strong> {
    background-color: #ffc0c0;
}
&nbsp;
QPushButton<strong>#help</strong> {
    background-color: #c0c0ff;
}
</pre>

<p>Jak se přiřadí &bdquo;ID&ldquo; k&nbsp;nějakému widgetu? Pro tento účel se
používá metoda nazvaná poněkud jinak, než bychom očekávali: <a
href="https://pyside.github.io/docs/pyside/PySide/QtCore/QObject.html#PySide.QtCore.PySide.QtCore.QObject.setObjectName">QObject.setObjectName</a>,
přičemž není nutné zaručit unikátnost widgetu s&nbsp;tímto jménem (na rozdíl od
HTML/XML). Následující metoda vytvoří nové tlačítko a přiřadí mu příslušné
jméno:</p>

<pre>
def <strong>prepareButtonWithClass</strong>(self, className):
    <i># tlačítko s popisem</i>
    button = QtGui.QPushButton(className, self)
&nbsp;
    <i># nastavení třídy</i>
    button.setObjectName(className)
&nbsp;
    button.resize(button.sizeHint())
&nbsp;
    return button
</pre>

<p>Příklad použití &ndash; vytvoření trojice tlačítek:</p>

<pre>
button1 = self.prepareButtonWithClass("ok")
button2 = self.prepareButtonWithClass("cancel")
button3 = self.prepareButtonWithClass("help")
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Třetí demonstrační příklad &ndash; použití selektorů pro výběr typu tlačítek</h2>

<p>Způsob použití selektorů pro výběr typu tlačítek (Ok, Cancel, ...) je ukázán
v&nbsp;dnešním třetím demonstračním příkladu, jehož úplný zdrojový kód je
umístěn pod tímto odstavcem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># další tlačítka</i>
        button1 = self.prepareButtonWithClass("ok")
        button2 = self.prepareButtonWithClass("cancel")
        button3 = self.prepareButtonWithClass("help")
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(button1)
        topLayout.addWidget(button2)
        topLayout.addWidget(button3)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareButtonWithClass</strong>(self, className):
        <i># tlačítko s popisem</i>
        button = QtGui.QPushButton(className, self)
&nbsp;
        <i># nastavení třídy</i>
        button.setObjectName(className)
&nbsp;
        button.resize(button.sizeHint())
&nbsp;
        return button
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(400, 300)</i>
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># položka Style v hlavním menu</i>
        styleMenu = menubar.addMenu('&amp;Style')
&nbsp;
        <i># jednotlivé položky menu s nabízenými styly</i>
        for key in QtGui.QStyleFactory.keys():
            styleMenuItem = QtGui.QAction(key, self)
            styleMenuItem.triggered.connect(lambda key=key: self.setStyle(key))
            styleMenu.addAction(styleMenuItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
        with open("stylesheet2.css") as fin:
            styleSheet = fin.read()
            self.setStyleSheet(styleSheet)
&nbsp;
    def <strong>setStyle</strong>(self, styleName):
        <i># nastavení vybraného stylu</i>
        QtGui.QApplication.setStyle(styleName)
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># QtGui.QApplication.setStyle("plastique")</i>
    <i># QtGui.QApplication.setStyleSheet("background-color: #407040; color: white")</i>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Galerie: screenshoty třetího příkladu při použití všech základních podporovaných stylů</h2>

<p>V&nbsp;této kapitole je ukázána galerie screenshotů dnešního třetího
demonstračního příkladu:</p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-1.png" class="image-324101" alt="&#160;" width="202" height="260" />
<p><i>Obrázek 18: Okno třetího demonstračního příkladu po výběru standardního
stylu <strong>Windows</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-2.png" class="image-324102" alt="&#160;" width="202" height="260" />
<p><i>Obrázek 19: Okno třetího demonstračního příkladu po výběru standardního
stylu <strong>Motif</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-3.png" class="image-324103" alt="&#160;" width="202" height="260" />
<p><i>Obrázek 20: Okno třetího demonstračního příkladu po výběru standardního
stylu <strong>CDE</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-4.png" class="image-324104" alt="&#160;" width="202" height="271" />
<p><i>Obrázek 21: Okno třetího demonstračního příkladu po výběru standardního
stylu <strong>Plastique</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-5.png" class="image-324105" alt="&#160;" width="202" height="271" />
<p><i>Obrázek 22: Okno třetího demonstračního příkladu po výběru standardního
stylu <strong>GTK+</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-6.png" class="image-324106" alt="&#160;" width="202" height="271" />
<p><i>Obrázek 23: Okno třetího demonstračního příkladu po výběru standardního
stylu <strong>Cleanlooks</strong>.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pseudotřídy: styly tlačítek ve chvíli stisku popř. když je nad nimi umístěn kurzor myši</h2>

<p>Knihovna PySide podporuje i použití takzvaných <i>pseudotříd</i> při
specifikaci selektorů těch ovládacích prvků, které mají vypadat odlišně
například ve chvíli, kdy jsou vybrány, je nad nimi umístěn kurzor myši či se na
ně kliklo. Podívejme se na příklad s&nbsp;našimi třemi tlačítky typu
&bdquo;ok&ldquo;, &bdquo;cancel&ldquo; a &bdquo;help&ldquo;. Základní
&bdquo;klidový&ldquo; styl těchto tlačítek již známe:</p>

<pre>
QPushButton#ok {
    background-color: #b0ffb0;
}
&nbsp;
QPushButton#cancel {
    background-color: #ffb0b0;
}
&nbsp;
QPushButton#help {
    background-color: #b0b0ff;
}
</pre>

<img src="https://i.iinfo.cz/images/246/pyside17-3-7.png" class="image-324107" alt="&#160;" width="202" height="271" />
<p><i>Obrázek 24: Tlačítka ve výchozím stavu.</i></p>

<p>Pseudotřídou <strong>hover</strong> můžeme specifikovat pozadí tlačítek ve
chvíli, kdy je nad nimi kurzor myši. Tlačítka uděláme nepatrně světlejší:</p>

<pre>
QPushButton#ok:hover {
    background-color: #d0ffd0;
}
&nbsp;
QPushButton#cancel:hover {
    background-color: #ffd0d0;
}
&nbsp;
QPushButton#help:hover {
    background-color: #d0d0ff;
}
</pre>

<img src="https://i.iinfo.cz/images/246/pyside17-3-8.png" class="image-324108" alt="&#160;" width="202" height="271" />
<p><i>Obrázek 25: Nad jedním tlačítkem (Cancel) byl umístěn kurzor
myši.</i></p>

<p>Pseudotřídou <strong>pressed</strong> pak specifikujeme pozadí tlačítek ve
chvíli, kdy jsou stisknuta. V&nbsp;tomto případě budou tlačítka tmavší:</p>

<pre>
QPushButton#ok:pressed {
    background-color: #a0d0a0;
}
&nbsp;
QPushButton#cancel:pressed {
    background-color: #d0a0a0;
}
&nbsp;
QPushButton#help:pressed {
    background-color: #a0a0d0;
}
</pre>

<img src="https://i.iinfo.cz/images/246/pyside17-3-9.png" class="image-324109" alt="&#160;" width="202" height="271" />
<p><i>Obrázek 26: Tlačítko (Cancel) bylo vybráno a stisknuto.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Nastavení pozadí u vybraných prvků GUI</h2>

<p>U některých typů aplikací, které jsou například skinovatelné (multimediální
přehrávače atd.) může být požadováno, aby vybrané ovládací prvky grafického
uživatelského rozhraní zobrazovaly na svém pozadí rastrový obrázek. I to je
samozřejmě možné zařídit, a to s&nbsp;využitím vlastnosti
<strong>background-image</strong>. Té se předá adresa (většinou lokální)
s&nbsp;obrázkem:</p>

<pre>
QMainWindow {
    background-image: url("pixmaps/voronoi.png");
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Čtvrtý demonstrační příklad &ndash; použití různých kaskádových stylů (pseudotřídy, pozadí prvků, ...)</h2>

<p>Možnosti kaskádových stylů popsané <a href="#k12">ve dvanácté</a> a <a
href="#k13">třinácté kapitole</a> jsou použity v&nbsp;dnešním čtvrtém
demonstračním příkladu. Po jeho spuštění se zobrazí okno s&nbsp;trojicí
tlačítek, přičemž tato tlačítka reagují změnou odstínu jak na pouhé najetí
kurzorem myši, tak i na kliknutí. Pokud navíc namísto souboru <a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet3.css">stylesheet3.css</a>
použijete soubor <a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet4.css">stylesheet4</a>,
nastaví se i pozadí hlavního okna:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># další tlačítka</i>
        button1 = self.prepareButtonWithClass("ok")
        button2 = self.prepareButtonWithClass("cancel")
        button3 = self.prepareButtonWithClass("help")
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(button1)
        topLayout.addWidget(button2)
        topLayout.addWidget(button3)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareButtonWithClass</strong>(self, className):
        <i># tlačítko s popisem</i>
        button = QtGui.QPushButton(className, self)
&nbsp;
        <i># nastavení třídy</i>
        button.setObjectName(className)
&nbsp;
        button.resize(button.sizeHint())
&nbsp;
        return button
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(400, 300)</i>
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># položka Style v hlavním menu</i>
        styleMenu = menubar.addMenu('&amp;Style')
&nbsp;
        <i># jednotlivé položky menu s nabízenými styly</i>
        for key in QtGui.QStyleFactory.keys():
            styleMenuItem = QtGui.QAction(key, self)
            styleMenuItem.triggered.connect(lambda key=key: self.setStyle(key))
            styleMenu.addAction(styleMenuItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
        with open("stylesheet3.css") as fin:
            styleSheet = fin.read()
            self.setStyleSheet(styleSheet)
&nbsp;
    def <strong>setStyle</strong>(self, styleName):
        <i># nastavení vybraného stylu</i>
        QtGui.QApplication.setStyle(styleName)
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># QtGui.QApplication.setStyle("plastique")</i>
    <i># QtGui.QApplication.setStyleSheet("background-color: #407040; color: white")</i>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Galerie: screenshoty čtvrtého příkladu při použití všech základních podporovaných stylů</h2>

<p>Na následující šestici screenshotů si povšimněte jedné zajímavosti &ndash; u
některých standardních stylů je možné nastavit pozadí nástrojového pruhu,
kdežto u stylů jiných má nástrojový pruh pouze jednobarevné pozadí
(popř.&nbsp;barvový přechod), ovšem nikoli rastrový obrázek:</p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-10.png" class="image-324110" alt="&#160;" width="202" height="260" />
<p><i>Obrázek 27: Okno čtvrtého demonstračního příkladu po výběru standardního
stylu <strong>Windows</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-11.png" class="image-324111" alt="&#160;" width="202" height="260" />
<p><i>Obrázek 28: Okno čtvrtého demonstračního příkladu po výběru standardního
stylu <strong>Motif</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-12.png" class="image-324112" alt="&#160;" width="202" height="260" />
<p><i>Obrázek 29: Okno čtvrtého demonstračního příkladu po výběru standardního
stylu <strong>CDE</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-13.png" class="image-324113" alt="&#160;" width="202" height="271" />
<p><i>Obrázek 30: Okno čtvrtého demonstračního příkladu po výběru standardního
stylu <strong>Plastique</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-14.png" class="image-324114" alt="&#160;" width="202" height="271" />
<p><i>Obrázek 31: Okno čtvrtého demonstračního příkladu po výběru standardního
stylu <strong>GTK+</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-15.png" class="image-324115" alt="&#160;" width="202" height="271" />
<p><i>Obrázek 32: Okno čtvrtého demonstračního příkladu po výběru standardního
stylu <strong>Cleanlooks</strong>.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Nastavení stylů zaškrtávacích tlačítek</h2>

<p>Na závěr si ukažme, jak lze relativně snadno změnit styly zaškrtávacích
tlačítek. Samotná ikona tlačítka má minimálně šest podob vzniklých těmito
kombinacemi &ndash; zaškrtnuto/nezaškrtnuto, kurzor myši je/není nad tlačítkem,
tlačítko je/není vybráno. Proto si připravíme šestici ikon:</p>

<table>
<tr><th>Soubor</th><th>Ukázka ikony</th></tr>
<tr><td>checkbox_off_hover.png  </td><td><img src="https://i.iinfo.cz/images/122/pyside17-4-1.png" class="image-324122" alt="&#160;" width="16" height="16" /></td></tr>
<tr><td>checkbox_off.png        </td><td><img src="https://i.iinfo.cz/images/122/pyside17-4-2.png" class="image-324123" alt="&#160;" width="16" height="16" /></td></tr>
<tr><td>checkbox_off_pressed.png</td><td><img src="https://i.iinfo.cz/images/122/pyside17-4-3.png" class="image-324124" alt="&#160;" width="16" height="16" /></td></tr>
<tr><td>checkbox_on_hover.png   </td><td><img src="https://i.iinfo.cz/images/122/pyside17-4-4.png" class="image-324125" alt="&#160;" width="16" height="16" /></td></tr>
<tr><td>checkbox_on.png         </td><td><img src="https://i.iinfo.cz/images/122/pyside17-4-5.png" class="image-324126" alt="&#160;" width="16" height="16" /></td></tr>
<tr><td>checkbox_on_pressed.png </td><td><img src="https://i.iinfo.cz/images/122/pyside17-4-6.png" class="image-324127" alt="&#160;" width="16" height="16" /></td></tr>
</table>

<p>Tyto ikony se opět vyberou s&nbsp;využitím pseudotříd. Povšimněte si, že je
možné v&nbsp;selektoru specifikovat větší množství tříd:</p>

<pre>
QCheckBox::indicator:<strong>unchecked</strong> {
    image: url(icons/checkbox_off.png);
}
&nbsp;
QCheckBox::indicator:<strong>unchecked:hover</strong> {
    image: url(icons/checkbox_off_hover.png);
}
&nbsp;
QCheckBox::indicator:<strong>unchecked:pressed</strong> {
    image: url(icons/checkbox_off_pressed.png);
}
&nbsp;
QCheckBox::indicator:<strong>checked</strong> {
    image: url(icons/checkbox_on.png);
}
&nbsp;
QCheckBox::indicator:<strong>checked:hover</strong> {
    image: url(icons/checkbox_on_hover.png);
}
&nbsp;
QCheckBox::indicator:<strong>checked:pressed</strong> {
    image: url(icons/checkbox_on_pressed.png);
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Pátý demonstrační příklad &ndash; vlastní styl zaškrtávacích tlačítek</h2>

<p>V&nbsp;pátém a současně i dnešním posledním demonstračním příkladu je
ukázáno, jakým způsobem je možné změnit styl vykreslování zaškrtávacích
tlačítek, tj.&nbsp;ovládacích prvků představovaných instancemi třídy
<strong>QCheckBox</strong> popř.&nbsp;instancemi potomků této třídy. Po
spuštění příkladu si vyzkoušejte na zaškrtávací tlačítka klikat &ndash; mělo by
postupně dojít k&nbsp;zobrazení všech šesti bitmapových obrázků zmíněných <a
href="#k16">v&nbsp;předchozí kapitole</a>:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># testovací zaškrtávací tlačítka</i>
        testCheckBox1 = QtGui.QCheckBox("check box 1")
        testCheckBox2 = QtGui.QCheckBox("check box 2")
&nbsp;
        <i># které tlačítko bude vybráno</i>
        testCheckBox2.setChecked(True)
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(testCheckBox1)
        topLayout.addWidget(testCheckBox2)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(400, 300)</i>
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># položka Style v hlavním menu</i>
        styleMenu = menubar.addMenu('&amp;Style')
&nbsp;
        <i># jednotlivé položky menu s nabízenými styly</i>
        for key in QtGui.QStyleFactory.keys():
            styleMenuItem = QtGui.QAction(key, self)
            styleMenuItem.triggered.connect(lambda key=key: self.setStyle(key))
            styleMenu.addAction(styleMenuItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
        with open("stylesheet5.css") as fin:
            styleSheet = fin.read()
            self.setStyleSheet(styleSheet)
&nbsp;
    def <strong>setStyle</strong>(self, styleName):
        <i># nastavení vybraného stylu</i>
        QtGui.QApplication.setStyle(styleName)
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># QtGui.QApplication.setStyle("plastique")</i>
    <i># QtGui.QApplication.setStyleSheet("background-color: #407040; color: white")</i>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Galerie: screenshoty pátého příkladu při použití všech základních podporovaných stylů</h2>

<p>Dnes již naposledy se můžeme podívat na screenshoty získané při běhu
dnešního pátého demonstračního příkladu, opět při použití různých základních
stylů:</p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-16.png" class="image-324116" alt="&#160;" width="202" height="207" />
<p><i>Obrázek 33: Okno pátého demonstračního příkladu po výběru standardního
stylu <strong>Windows</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-17.png" class="image-324117" alt="&#160;" width="202" height="207" />
<p><i>Obrázek 34: Okno pátého demonstračního příkladu po výběru standardního
stylu <strong>Motif</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-18.png" class="image-324118" alt="&#160;" width="202" height="207" />
<p><i>Obrázek 35: Okno pátého demonstračního příkladu po výběru standardního
stylu <strong>CDE</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-19.png" class="image-324119" alt="&#160;" width="202" height="207" />
<p><i>Obrázek 36: Okno pátého demonstračního příkladu po výběru standardního
stylu <strong>Plastique</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-20.png" class="image-324120" alt="&#160;" width="202" height="207" />
<p><i>Obrázek 37: Okno pátého demonstračního příkladu po výběru standardního
stylu <strong>GTK+</strong>.</i></p>

<img src="https://i.iinfo.cz/images/246/pyside17-3-21.png" class="image-324121" alt="&#160;" width="202" height="207" />
<p><i>Obrázek 38: Okno pátého demonstračního příkladu po výběru standardního
stylu <strong>Cleanlooks</strong>.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů společně
s&nbsp;jedním pomocným skriptem byly opět, podobně jako tomu bylo i
v&nbsp;předchozích článcích, uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td>1</td><td>141_custom_stylesheet2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/141_custom_stylesheet2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/141_custom_stylesheet2.py</a></td></tr>
<tr><td>2</td><td>142_external_stylesheet.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/142_external_stylesheet.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/142_external_stylesheet.py</a></td></tr>
<tr><td>3</td><td>143_style_selectors.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/143_style_selectors.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/143_style_selectors.py</a></td></tr>
<tr><td>4</td><td>144_pseudo_classes.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/144_pseudo_classes.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/144_pseudo_classes.py</a></td></tr>
<tr><td>5</td><td>145_checkbox_style.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/145_checkbox_style.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/145_checkbox_style.py</a></td></tr>
</table>

<p>Následují soubory obsahující kaskádové styly používané výše zmíněnými
demonstračními příklady:</p>

<table>
<tr><th>#</th><th>Stylesheet</th><th>Adresa</th></tr>
<tr><td>1</td><td>stylesheet.css</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet.css">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet.css</a></td></tr>
<tr><td>2</td><td>stylesheet2.css</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet2.css">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet2.css</a></td></tr>
<tr><td>3</td><td>stylesheet3.css</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet3.css">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet3.css</a></td></tr>
<tr><td>4</td><td>stylesheet4.css</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet4.css">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet4.css</a></td></tr>
<tr><td>5</td><td>stylesheet5.css</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet5.css">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/stylesheet5.css</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyle.html</a>
</li>

<li>QCommonStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCommonStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCommonStyle.html</a>
</li>

<li>QPlastiqueStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPlastiqueStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPlastiqueStyle.html</a>
</li>

<li>QMacStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMacStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMacStyle.html</a>
</li>

<li>QCleanlooksStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCleanlooksStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCleanlooksStyle.html</a>
</li>

<li>QGtkStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGtkStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGtkStyle.html</a>
</li>

<li>QCDEStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCDEStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCDEStyle.html</a>
</li>

<li>QMotifStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMotifStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMotifStyle.html</a>
</li>

<li>QWindowsStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWindowsStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWindowsStyle.html</a>
</li>

<li>QStyleFactory<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleFactory.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleFactory.html</a>
</li>

<li>QStyleOptionHeader<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleOptionHeader.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleOptionHeader.html</a>
</li>

<li>QAbstractSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/AbstractSlider.html</a>
</li>

<li>QScrollBar<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QScrollBar.html">https://pyside.github.io/docs/pyside/PySide/QtGui/ScrollBar.html</a>
</li>

<li>QSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Slider.html</a>
</li>

<li>QDial<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDial.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Dial.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>QTableWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html</a>
</li>

<li>QTableWidgetItem<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html</a>
</li>

<li>QTreeWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html</a>
</li>

<li>QTreeWidgetItem <br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QErrorMessage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html</a>
</li>

<li>QInputDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html</a>
</li>

<li>QColorDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QLineEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html</a>
</li>

<li>QTextEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QIntValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html</a>
</li>

<li>QRegExpValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

