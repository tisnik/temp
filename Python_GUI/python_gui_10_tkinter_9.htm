<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické uživatelské rozhraní v Pythonu: použití dialogových oken v knihovně Tkinter</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické uživatelské rozhraní v Pythonu: použití dialogových oken v knihovně Tkinter</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V posledním článku o knihovně Tkinter určené pro tvorbu grafického uživatelského rozhraní v Pythonu si ukážeme, jakým způsobem se vytváří modální i nemodální dialogová okna. Bude se jednat jak o standardní dialogy (výběr souboru atd.), tak i o dialogy definované vývojářem.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Základy práce s&nbsp;dialogovými okny</a></p>
<p><a href="#k02">2. Modální a nemodální dialogová okna</a></p>
<p><a href="#k03">3. Standardní dialogová okna pro zobrazení zprávy uživateli</a></p>
<p><a href="#k04">4. První demonstrační příklad: zobrazení informačních dialogů s&nbsp;tlačítkem <strong>Ok</strong></a></p>
<p><a href="#k05">5. Standardní dialogová okna s&nbsp;otázkou (Ok/Cancel, Yes/No, Ok/Retry)</a></p>
<p><a href="#k06">6. Druhý demonstrační příklad: dialogová okna s&nbsp;otázkou položenou uživateli</a></p>
<p><a href="#k07">7. Konfigurace standardních dialogových oken podle přání programátora</a></p>
<p><a href="#k08">8. Třetí demonstrační příklad: úprava dialogového okna vyvolaného funkcí <strong>askquestion</strong></a></p>
<p><a href="#k09">9. Programátorem definovaná dialogová okna</a></p>
<p><a href="#k10">10. Čtvrtý příklad &ndash; jednoduché okno pro vyplnění informací o uživateli</a></p>
<p><a href="#k11">11. Vylepšení dialogového okna &ndash; nastavení modality, nastavení implicitně vybraného tlačítka a použití kláves pro uzavření dialogu</a></p>
<p><a href="#k12">12. Pátý příklad &ndash; integrace vylepšeného dialogového okna</a></p>
<p><a href="#k13">13. Další standardní dialogová okna: otevření dokumentu a uložení dokumentu pod novým jménem</a></p>
<p><a href="#k14">14. Šestý příklad &ndash; použití dialogového okna pro otevření dokumentu</a></p>
<p><a href="#k15">15. Sedmý příklad &ndash; dialog pro uložení dokumentu pod novým jménem</a></p>
<p><a href="#k16">16. Osmý příklad &ndash; výběr barvy z&nbsp;palety</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Základy práce s&nbsp;dialogovými okny</h2>

<p>Dialogová okna jsou v&nbsp;grafických uživatelských prostředích využívána
poměrně často. Tyto prvky grafického uživatelského rozhraní vlastně vznikly
postupnou evolucí. První aplikace s&nbsp;GUI většinou obsahovaly jednoduché
drop-down menu, které se dále nevětvilo. Se zvyšující se složitostí aplikací se
menu začalo postupně větvit až do okamžiku, v&nbsp;němž se překročil určitý bod
komplexnosti, kdy se práce s&nbsp;menu stávala neefektivní. V&nbsp;tomto bodě
se začaly vytvářet (většinou modální) dialogová okna, která na své ploše
sdružovala několik ovládacích prvků. Jak však z&nbsp;každodenní zkušenosti
víme, i dialogová okna se brzy zaplnila a pro jejich zjednodušení
(resp.&nbsp;rozčlenění) se v&nbsp;dnešní době používá několik řešení: okna se
záložkami (<i>notebook</i>, <i>tabbed notebook</i>), ikony po straně okna
sdružující spolu související operace, nebo postupné procházení několika dialogy
ve stylu &bdquo;wizardů&ldquo;.</p>

<p>Kromě zvládnutí vyšší komplexnosti aplikací hrají dialogová okna i další
roli &ndash; pomáhají totiž standardizovat některé společné části aplikací.
Například pro otevření souboru, uložení souboru, tisk dokumentu nebo výběr
barvy je možné (a velmi vhodné) použít standardní dialog dodávaný s&nbsp;GUI
systémem. Do jaké míry se tento systém standardizace využívá, čtenář patrně
vidí na svém desktopu sám: určitá míra standardizace je patrná, také je však
zřejmé, že mnohé aplikace využívají jiné GUI knihovny, o míchání několika
desktopových prostředích ani nemluvě (to zdaleka není pouze problém GNU
softwaru, &bdquo;lidová tvořivost&ldquo; je vidět i na komerčních
programech).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Modální a nemodální dialogová okna</h2>

<p>Při práci s&nbsp;dialogovými okny rozlišujeme dialogy <i>modální</i> a
<i>nemodální</i>. Modální dialogy převezmou řízení celé aplikace a nedovolí
uživateli pokračovat v&nbsp;práci, dokud nevybere z&nbsp;dialogu nějaký příkaz.
Naproti tomu jsou nemodální okna zobrazena &bdquo;paralelně&ldquo;
s&nbsp;aplikací a neblokují vstup do aplikace (kromě toho, že jsou většinou
zobrazena nad aplikací). Vzhledem k&nbsp;tomu, že jsou modální okna
programátorsky jednodušeji zvládnutelná, používají se častěji, a to i
v&nbsp;těch případech, kdy modální okno uživatele zdržuje či mu komplikuje
práci.  Typickým příkladem je dialog pro vyhledávání (například řetězců), který
by měl být prakticky vždy nemodální, ale mnohé aplikace ho implementují jako
dialog modální.</p>

<p>V&nbsp;každém případě však knihovna <i>Tkinter</i> umožňuje použití několika
standardních dialogů pro nejčastěji používané činnosti se soubory a dokumenty.
Kromě toho je možné pomocí jednoho příkazu vytvořit i vlastní dialogové okno,
složitější dialogová okna se vytváří podobně jako každé jiné okno (pouze se
musí nastavit modalita, pokud je vyžadována).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Standardní dialogová okna pro zobrazení zprávy uživateli</h2>

<p>V&nbsp;modulu <strong>tkinter.messagebox</strong> najdeme několik funkcí
sloužících pro vytvoření dialogového okna, v&nbsp;němž se zobrazí zpráva
uživateli společně s&nbsp;tlačítkem <strong>OK</strong>. Kromě vlastní zprávy
je možné specifikovat i titulek okna (ten se může zobrazit v&nbsp;seznamu
oken). Jednotlivé funkce se od sebe odlišují tím, jaká ikona je
v&nbsp;dialogovém oknu zobrazena:</p>

<table>
<tr><th>Funkce</th><th>Ikona</th></tr>
<tr><td>showinfo()</td><td><img src="https://i.iinfo.cz/images/575/tkinter9-13.png" class="image-304028" alt="&#160;" width="32" height="32" /></td></tr>
<tr><td>showwarning()</td><td><img src="https://i.iinfo.cz/images/575/tkinter9-14.png" class="image-304029" alt="&#160;" width="32" height="32" /></td></tr>
<tr><td>showerror()</td><td><img src="https://i.iinfo.cz/images/575/tkinter9-15.png" class="image-304030" alt="&#160;" width="32" height="32" /></td></tr>
</table>

<p>Poznámka: ve skutečnosti se mohou ikony na různých systémech odlišovat,
jejich význam však bude odpovídat typu dialogového okna. Výše zobrazená trojice
ikon byla získána na Linuxu s&nbsp;Fluxboxem.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad: zobrazení informačních dialogů s&nbsp;tlačítkem <strong>Ok</strong></h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu se zobrazí okno
s&nbsp;tlačítky, po jejichž stisku se vykreslí příslušný standardní informační
dialog:</p>

<pre>
messagebox.showinfo("Title", "Text"))
&nbsp;
messagebox.showwarning("Title", "Text"))
&nbsp;
messagebox.showerror("Title", "Text"))
</pre>

<img src="https://i.iinfo.cz/images/575/tkinter9-1.png" class="image-304016" alt="&#160;" width="107" height="119" />
<p><i>Obrázek 1: Informační dialog vytvořený funkcí
<strong>messagebox.showinfo()</strong>.</i></p>

<p>Na začátku programu nezapomeňte na následující import:</p>

<pre>
from tkinter import messagebox
</pre>

<img src="https://i.iinfo.cz/images/575/tkinter9-2.png" class="image-304017" alt="&#160;" width="107" height="119" />
<p><i>Obrázek 2: Informační dialog vytvořený funkcí
<strong>messagebox.showwarning()</strong>.</i></p>

<p>Úplný zdrojový kód prvního příkladu vypadá takto:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
from tkinter import messagebox
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
&nbsp;
infoButton = tkinter.Button(root, text="Info box",
                            command=lambda: messagebox.showinfo(
                                "Title",
                                "Text"))
&nbsp;
warningButton = tkinter.Button(root, text="Warning box",
                               command=lambda: messagebox.showwarning(
                                   "Title",
                                   "Text"))
&nbsp;
errorButton = tkinter.Button(root, text="Error box",
                             command=lambda: messagebox.showerror(
                                 "Title",
                                 "Text"))
&nbsp;
quitButton = tkinter.Button(root, text="Exit", command=exit)
&nbsp;
infoButton.pack(fill=tkinter.BOTH)
warningButton.pack(fill=tkinter.BOTH)
errorButton.pack(fill=tkinter.BOTH)
&nbsp;
tkinter.Label(text="").pack()
&nbsp;
quitButton.pack(fill=tkinter.BOTH)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/575/tkinter9-3.png" class="image-304018" alt="&#160;" width="107" height="119" />
<p><i>Obrázek 3: Informační dialog vytvořený funkcí
<strong>messagebox.showerror()</strong>.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Standardní dialogová okna s&nbsp;otázkou (Ok/Cancel, Yes/No, Ok/Retry)</h2>

<p>Knihovna <i>Tkinter</i> obsahuje i několik standardních dialogových oken,
v&nbsp;nichž se po uživateli vyžaduje reagovat na položenou otázku
popř.&nbsp;na nějaký stav aplikace (nepodařený tisk atd.) stiskem jednoho
z&nbsp;nabízených tlačítek. Tato dialogová okna jsou opět vyvolána funkcemi,
které nalezneme v&nbsp;modulu <strong>tkinter.messagebox</strong>:</p>

<table>
<tr><th>Funkce</th><th>Ikona</th><th>Zobrazená tlačítka</th></tr>
<tr><td>askokcancel()</td><td><img src="https://i.iinfo.cz/images/575/tkinter9-16.png" class="image-304031" alt="&#160;" width="32" height="32" /></td><td>OK+Cancel</td></tr>
<tr><td>askretrycancel()</td><td><img src="https://i.iinfo.cz/images/575/tkinter9-14.png" class="image-304029" alt="&#160;" width="32" height="32" /></td><td>Retry+Cancel</td></tr>
<tr><td>askyesno()</td><td><img src="https://i.iinfo.cz/images/575/tkinter9-16.png" class="image-304031" alt="&#160;" width="32" height="32" /></td><td></td>Yes+No</tr>
<tr><td>askquestion()</td><td><img src="https://i.iinfo.cz/images/575/tkinter9-16.png" class="image-304031" alt="&#160;" width="32" height="32" /></td><td>ve výchozím nastavení Yes+No</td></tr>
</table>

<p>Poznámka: <a href="#k07">v&nbsp;sedmé kapitole</a> je popsáno, jakým
způsobem je možné dialogy nakonfigurovat, aby se zobrazily ty ikony a tlačítka,
která programátor v&nbsp;daný okamžik vyžaduje.</p>

<img src="https://i.iinfo.cz/images/575/tkinter9-4.png" class="image-304019" alt="&#160;" width="319" height="121" />
<p><i>Obrázek 4: Dialog &nbsp;otázkou vytvořený funkcí
<strong>messagebox.askokcancel()</strong>.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý demonstrační příklad: dialogová okna s&nbsp;otázkou položenou uživateli</h2>

<p>Druhý demonstrační příklad se podobá příkladu prvnímu, ovšem používáme
v&nbsp;něm standardní dialogová okna s&nbsp;otázkou, na kterou uživatel musí
odpovědět. Po spuštění příkladu si vyzkoušejte, jaké návratové hodnoty
z&nbsp;těchto modálních oken získáme (hodnoty se přímo tisknou na standardní
výstup, takže je to velmi jednoduché).</p>

<img src="https://i.iinfo.cz/images/575/tkinter9-5.png" class="image-304020" alt="&#160;" width="212" height="119" />
<p><i>Obrázek 5: Dialog &nbsp;otázkou vytvořený funkcí
<strong>messagebox.askretrycancel()</strong>.</i></p>

<p>Následuje výpis zdrojového kódu dnešního druhého demonstračního
příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
from tkinter import messagebox
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def showOkCancelMessageBox():
    print(messagebox.askokcancel("Otázečka na závěr",
                                 "Skutečně, ale skutečně ukončit program?"))
&nbsp;
&nbsp;
def showRetryCancelMessageBox():
    print(messagebox.askretrycancel("Chyba při tisku",
                                    "Opakovat tisk?"))
&nbsp;
&nbsp;
def showYesNoMessageBox():
    print(messagebox.askyesno("Otázečka na závěr",
                              "Skutečně, ale skutečně ukončit program?"))
&nbsp;
&nbsp;
def showQuestionMessageBox():
    print(messagebox.askquestion("Otázečka na závěr",
                                 "Provést zálohu?"))
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
showOkCancelButton = tkinter.Button(root, text="Show Ok/Cancel message box",
                                    command=showOkCancelMessageBox)
&nbsp;
showRetryCancelButton = tkinter.Button(root, text="Show Retry/Cancel box",
                                       command=showRetryCancelMessageBox)
&nbsp;
showYesNoButton = tkinter.Button(root, text="Show Yes.No box",
                                 command=showYesNoMessageBox)
&nbsp;
showQuestionButton = tkinter.Button(root, text="Show question box",
                                    command=showQuestionMessageBox)
&nbsp;
quitButton = tkinter.Button(root, text="Exit", command=exit)
&nbsp;
showOkCancelButton.pack(fill=tkinter.BOTH)
showRetryCancelButton.pack(fill=tkinter.BOTH)
showYesNoButton.pack(fill=tkinter.BOTH)
showQuestionButton.pack(fill=tkinter.BOTH)
&nbsp;
tkinter.Label(text="").pack()
&nbsp;
quitButton.pack(fill=tkinter.BOTH)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/575/tkinter9-6.png" class="image-304021" alt="&#160;" width="319" height="121" />
<p><i>Obrázek 6: Dialog &nbsp;otázkou vytvořený funkcí
<strong>messagebox.askyesno()</strong>.</i></p>

<img src="https://i.iinfo.cz/images/575/tkinter9-7.png" class="image-304022" alt="&#160;" width="212" height="119" />
<p><i>Obrázek 7: Dialog &nbsp;otázkou vytvořený funkcí
<strong>messagebox.askquestion()</strong>.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Konfigurace standardních dialogových oken podle přání programátora</h2>

<p>Ve skutečnosti je možné dialogová okna upravovat pomocí nepovinných
(pojmenovaných) parametrů, především pak:</p>

<table>
<tr><th>Parametr</th><th>Význam</th><th>Možné hodnoty</th></tr>
<tr><td>type</td><td>typ dialogu</td><td>ABORTRETRYIGNORE, OK, OKCANCEL, RETRYCANCEL, YESNO, YESNOCANCEL</td></tr>
<tr><td>default</td><td>které tlačítko bude implicitně vybráno</td><td>ABORT, RETRY, IGNORE, OK, CANCEL, YES, NO</td></tr>
<tr><td>icon</td><td>jméno ikony</td><td>ERROR, INFO, QUESTION, WARNING</td></tr>
</table>

<p>Typicky se pro úpravy používá &bdquo;univerzální&ldquo; dialog vyvolaný
funkcí <strong>askquestion()</strong>:</p>

<pre>
messagebox.askquestion("Otázečka na závěr",
                       ("Provést zálohu?\n"
                        "Naformátovat disk?\n"
                        "Kontaktovat NSA?"),
                       icon=messagebox.ERROR,
                       type=messagebox.ABORTRETRYIGNORE)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Třetí demonstrační příklad: úprava dialogového okna vyvolaného funkcí <strong>askquestion</strong></h2>

<p>V&nbsp;dnešním třetím demonstračním příkladu je ukázán způsob zobrazení
dialogového okna s&nbsp;trojicí tlačítek <strong>Abort</strong>,
<strong>Retry</strong> a <strong>Ignore</strong>. V&nbsp;okně se navíc kromě
zprávy zobrazí i ikona představující chybu, která na Linux s&nbsp;Fluxboxem
vypadá jako značka zákazu vjezdu do jednosměrky:</p>

<img src="https://i.iinfo.cz/images/575/tkinter9-8.png" class="image-304023" alt="&#160;" width="317" height="138" />
<p><i>Obrázek 8: Dialog &nbsp;otázkou vytvořený funkcí
<strong>messagebox.askquestion()</strong>, v&nbsp;níž jsou umístěna uživatelem
zvolená tlačítka i ikona.</i></p>

<p>Následuje výpis zdrojového kódu dnešního třetího demonstračního
příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
from tkinter import messagebox
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def showQuestionMessageBox():
    print(messagebox.askquestion("Otázečka na závěr",
                                 ("Provést zálohu?\n"
                                  "Naformátovat disk?\n"
                                  "Kontaktovat NSA?"),
                                 icon=messagebox.ERROR,
                                 type=messagebox.ABORTRETRYIGNORE))
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
showQuestionButton = tkinter.Button(root, text="Show question box",
                                    command=showQuestionMessageBox)
&nbsp;
quitButton = tkinter.Button(root, text="Exit", command=exit)
&nbsp;
showQuestionButton.pack(fill=tkinter.BOTH)
&nbsp;
tkinter.Label(text="").pack()
&nbsp;
quitButton.pack(fill=tkinter.BOTH)
&nbsp;
root.mainloop()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Programátorem definovaná dialogová okna</h2>

<p>Standardní dialogová okna samozřejmě nemohou vyhovovat ve všech případech,
takže si vývojáři mnohdy musí chování i vzhled dialogových oken naprogramovat.
Jeden z&nbsp;možných způsobů je popsán v&nbsp;následujícím textu. Nejprve
budeme deklarovat novou třídu odvozenou od třídy
<strong>tkinter.Toplevel</strong>, která představuje jakékoli okno.
V&nbsp;konstruktoru zavoláme konstruktor předka:</p>

<pre>
class Dialog(tkinter.Toplevel):
&nbsp;
    def __init__(self, parent):
        tkinter.Toplevel.__init__(self, parent)
</pre>

<p>Následně vytvoříme widgety, které budou v&nbsp;dialogovém oknu zobrazeny.
Pro jednoduchost se bude jednat o dvojici vstupních polí, tlačítko pro
potvrzení dialogu a dvě pomocná návěští. Po stisku tlačítka OK se zavolá metoda
<strong>ok()</strong>:</p>

<pre>
        label1 = tkinter.Label(self, text="First name")
        label2 = tkinter.Label(self, text="Surname")
        &nbsp;
        self.entryFirstName = tkinter.Entry(self)
        self.entrySurname = tkinter.Entry(self)
        &nbsp;
        okButton = tkinter.Button(self, text="OK", command=self.ok)
</pre>

<p>Posléze widgety umístíme do dialogového okna způsobem, který již dobře
známe:</p>

<pre>
        label1.grid(row=1, column=1, sticky="W", padx=5, pady=5)
        label2.grid(row=2, column=1, sticky="W", padx=5, pady=5)
        self.entryFirstName.grid(row=1, column=2, sticky="WE")
        self.entrySurname.grid(row=2, column=2, sticky="WE")
        &nbsp;
        okButton.grid(row=4, column=2, sticky="W")
</pre>

<p>Druhá metoda bude reagovat na stisk tlačítka OK:</p>

<pre>
    def ok(self):
        print("first name:", self.entryFirstName.get())
        print("surname:", self.entrySurname.get())
        self.destroy()
</pre>

<p>Zobrazení dialogu navážeme na nějaké tlačítko zobrazené v&nbsp;hlavním
okně:</p>

<pre>
showDialogButton = tkinter.Button(root, text="Show dialog",
                                  command=lambda: Dialog(root))
</pre>

<img src="https://i.iinfo.cz/images/575/tkinter9-9.png" class="image-304024" alt="&#160;" width="246" height="114" />
<p><i>Obrázek 9: Dialogové okno vytvořené programátorem.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Čtvrtý příklad &ndash; jednoduché okno pro vyplnění informací o uživateli</h2>

<p>Třídu <strong>Dialog</strong> popsanou <a href="#k09">v&nbsp;předchozí
kapitole</a> použijeme v&nbsp;dnešním čtvrtém demonstračním příkladu, jehož
zdrojový kód vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
from tkinter import messagebox
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
class Dialog(tkinter.Toplevel):
&nbsp;
    def __init__(self, parent):
        tkinter.Toplevel.__init__(self, parent)
&nbsp;
        label1 = tkinter.Label(self, text="First name")
        label2 = tkinter.Label(self, text="Surname")
&nbsp;
        self.entryFirstName = tkinter.Entry(self)
        self.entrySurname = tkinter.Entry(self)
&nbsp;
        okButton = tkinter.Button(self, text="OK", command=self.ok)
&nbsp;
        label1.grid(row=1, column=1, sticky="W", padx=5, pady=5)
        label2.grid(row=2, column=1, sticky="W", padx=5, pady=5)
        self.entryFirstName.grid(row=1, column=2, sticky="WE")
        self.entrySurname.grid(row=2, column=2, sticky="WE")
&nbsp;
        okButton.grid(row=4, column=2, sticky="W")
&nbsp;
    def ok(self):
        print("first name:", self.entryFirstName.get())
        print("surname:", self.entrySurname.get())
        self.destroy()
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
showDialogButton = tkinter.Button(root, text="Show dialog",
                                  command=lambda: Dialog(root))
&nbsp;
quitButton = tkinter.Button(root, text="Exit", command=exit)
&nbsp;
showDialogButton.pack(fill=tkinter.BOTH)
&nbsp;
tkinter.Label(text="").pack()
&nbsp;
quitButton.pack(fill=tkinter.BOTH)
&nbsp;
root.mainloop()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vylepšení dialogového okna &ndash; nastavení modality, nastavení implicitně vybraného tlačítka a použití kláves pro uzavření dialogu</h2>

<p>Dialogové okno vytvořené v&nbsp;rámci předchozího příkladu se vlastně
nechová podle očekávání &ndash; není modální, lze ho otevřít vícekrát (schválně
si to vyzkoušejte), nelze použít klávesy Enter a Esc pro potvrzení volby
resp.&nbsp;po opuštění okna atd. Zkusme tedy nyní chování okna vylepšit.</p>

<p>Nejprve svážeme dialogové okno se svým předkem (ten je předán konstruktoru
v&nbsp;parametru nazvaném <strong>parent</strong>). Díky tomu by se dialogové
okno nemělo ukázat v&nbsp;seznamu oken:</p>

<pre>
# dialog bude svazan se svym predkem
# (nemel by se zobrazit v seznamu oken)
self.transient(parent)
</pre>

<p>Dále zajistíme chování dialogového okna ve chvíli, kdy uživatel stlačí ikonu
pro uzavření okna (jak vypadá, je věcí správce oken). Můžeme pokus o uzavření
dialogu ignorovat, naprogramovat si vlastní akci nebo ho akceptovat:</p>

<pre>
# chovani pri pokusu o zavreni okna pres "x" (lze zakazat)
self.protocol("WM_DELETE_WINDOW", self.destroy)
</pre>

<p>V&nbsp;následujícím kroku zajistíme, že první vstupní pole získá fokus
(uživatel do něj nemusí klikat myší) a současně nebude  možné, aby předek fokus
převzal &ndash; jinými slovy nebude možné se přepnout na hlavní okno
aplikace:</p>

<pre>
# predek neziska fokus
self.grab_set()
&nbsp;
# ziskani fokusu
self.entryFirstName.focus_set()
</pre>

<p>Poslední úprava spočívá v&nbsp;tom, že se po stisku klávesy Enter (zde
z&nbsp;historických důvodů nazývané Return) zavolá metoda <strong>ok()</strong>
a po stisku klávesy Esc metoda <strong>destroy()</strong>. Stisk Enteru je tedy
shodný se stiskem widgetu OK zatímco stisk Esc s&nbsp;uzavřením dialogu:</p>

<pre>
# implicitni chovani klaves Return/Enter a Escape
self.bind("&lt;Return&gt;", lambda event: self.ok())
self.bind("&lt;Escape&gt;", lambda event: self.destroy())
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pátý příklad &ndash; integrace vylepšeného dialogového okna</h2>

<p>Vylepšená třída <strong>Dialog</strong> je použita v&nbsp;pátém
příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
from tkinter import messagebox
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
class Dialog(tkinter.Toplevel):
&nbsp;
    def __init__(self, parent):
        tkinter.Toplevel.__init__(self, parent)
&nbsp;
        # dialog bude svazan se svym predkem
        # (nemel by se zobrazit v seznamu oken)
        self.transient(parent)
&nbsp;
        label1 = tkinter.Label(self, text="First name")
        label2 = tkinter.Label(self, text="Surname")
&nbsp;
        self.entryFirstName = tkinter.Entry(self)
        self.entrySurname = tkinter.Entry(self)
&nbsp;
        okButton = tkinter.Button(self, text="OK", command=self.ok)
&nbsp;
        label1.grid(row=1, column=1, sticky="W", padx=5, pady=5)
        label2.grid(row=2, column=1, sticky="W", padx=5, pady=5)
        self.entryFirstName.grid(row=1, column=2, sticky="WE")
        self.entrySurname.grid(row=2, column=2, sticky="WE")
        okButton.grid(row=4, column=2, sticky="W")
&nbsp;
        # chovani pri pokusu o zavreni okna pres "x" (lze zakazat)
        self.protocol("WM_DELETE_WINDOW", self.destroy)
&nbsp;
        # predek neziska fokus
        self.grab_set()
&nbsp;
        # implicitni chovani klaves Return/Enter a Escape
        self.bind("&lt;Return&gt;", lambda event: self.ok())
        self.bind("&lt;Escape&gt;", lambda event: self.destroy())
&nbsp;
        # ziskani fokusu
        self.entryFirstName.focus_set()
&nbsp;
    def ok(self):
        print("first name:", self.entryFirstName.get())
        print("surname:", self.entrySurname.get())
        self.destroy()
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
showDialogButton = tkinter.Button(root, text="Show dialog",
                                  command=lambda: Dialog(root))
&nbsp;
quitButton = tkinter.Button(root, text="Exit", command=exit)
&nbsp;
showDialogButton.pack(fill=tkinter.BOTH)
&nbsp;
tkinter.Label(text="").pack()
&nbsp;
quitButton.pack(fill=tkinter.BOTH)
&nbsp;
root.mainloop()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Další standardní dialogová okna: otevření dokumentu a uložení dokumentu pod novým jménem</h2>

<p>V&nbsp;podpůrných modulech knihovny <i>Tkinter</i> najdeme ještě další tři
funkce, po jejichž zavolání se zobrazí standardní dialogová okna. Jedná se o
dialog určený pro výběr souboru/dokumentu, který se má otevřít, dále o velmi
podobný dialog určený pro uložení dokumentu pod jiným jménem a konečně o dialog
určený pro výběr barvy z&nbsp;barvové palety:</p>

<table>
<tr><th>Modul</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>tkinter.filedialog</td><td>Open()</td><td>dialog pro otevření dokumentu/souboru</td></tr>
<tr><td>tkinter.filedialog</td><td>SaveAs()</td><td>dialog pro uložení dokumentu pod jiným jménem</td></tr>
<tr><td>tkinter.colorchooser</td><td>askcolor()</td><td>dialog pro výběr barvy z&nbsp;palety</td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Šestý příklad &ndash; použití dialogového okna pro otevření dokumentu</h2>

<p>Otevření či načtení souboru patří mezi často používané operace, proto má
mnoho systémů s&nbsp;grafickým uživatelským rozhraním zabudovaný dialog pro
výběr jména souboru. Pomocí knihovny <i>Tkinter</i> je možné k&nbsp;tomuto
dialogu přistupovat. Potřebná funkce se jmenuje <strong>Open</strong> a
nalezneme ji v&nbsp;modulu <strong>tkinter.filedialog</strong>. Její použití
může vypadat následovně:</p>

<pre>
def openFileDialog():
    filetypes = [('Python sources', '*.py'),
                 ('Lua sources', '*.lua'),
                 ('All files', '*')]
    dialog = filedialog.Open(root, filetypes=filetypes)
    print(dialog.show())
</pre>

<p>V&nbsp;nepovinném parametru <strong>filetypes</strong> je možné specifikovat
typy souborů, které mohou být vybrány. Kromě toho lze přes parametry
<strong>initialdir</strong> a <strong>initialfile</strong> specifikovat adresář
popř.&nbsp;i jméno implicitně vybraného souboru. Pokud dojde k&nbsp;výběru
souboru, vrátí se plná cesta k&nbsp;němu, v&nbsp;opačném případě (stisk
tlačítka Cancel) se vrátí prázdný řetězec. V&nbsp;případě, že je pomocí volby
<strong>multiple</strong> povolen výběr více souborů, jsou v&nbsp;návratové
hodnotě obsaženy všechny vybrané soubory.</p>

<img src="https://i.iinfo.cz/images/575/tkinter9-10.png" class="image-304025" alt="&#160;" width="488" height="279" />
<p><i>Obrázek 10: Dialogové okno pro výběr dokumentu/souboru pro otevření.</i></p>

<p>Podívejme se nyní, jak lze tuto funkci použít prakticky:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import filedialog
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def openFileDialog():
    filetypes = [('Python sources', '*.py'),
                 ('Lua sources', '*.lua'),
                 ('All files', '*')]
    dialog = filedialog.Open(root, filetypes=filetypes)
    print(dialog.show())
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
openFileButton = tkinter.Button(root,
                                text="Open file dialog",
                                command=openFileDialog)
&nbsp;
quitButton = tkinter.Button(root, text="Exit", command=exit)
&nbsp;
openFileButton.pack(fill=tkinter.BOTH)
&nbsp;
tkinter.Label(text="").pack()
&nbsp;
quitButton.pack(fill=tkinter.BOTH)
&nbsp;
root.mainloop()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Sedmý příklad &ndash; dialog pro uložení dokumentu pod novým jménem</h2>

<p>Dialogové okno určené pro uložení dokumentu se v&nbsp;mnohém podobá
dialogovému oknu pro jeho otevření. Jediný rozdíl spočívá v&nbsp;odlišném
popisu příkazových tlačítek v&nbsp;dialogovém oknu, odlišném titulku (pokud
není titulek zadán programově) a také v&nbsp;tom, že soubor, který je určen pro
zápis, nemusí existovat &ndash; při otevírání souboru probíhají kontroly na
jeho existenci.</p>

<img src="https://i.iinfo.cz/images/575/tkinter9-11.png" class="image-304026" alt="&#160;" width="488" height="279" />
<p><i>Obrázek 11: Dialogové okno pro výběr dokumentu/souboru pro uložení.</i></p>

<p>V&nbsp;dalším demonstračním příkladu je ukázáno, jakým způsobem je možné
vytvořit dialogové okno, které uživateli umožní výběr souboru pro zápis:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import filedialog
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def saveFileDialog():
    filetypes = [('Python sources', '*.py'),
                 ('Lua sources', '*.lua'),
                 ('All files', '*')]
    dialog = filedialog.SaveAs(root, filetypes=filetypes)
    print(dialog.show())
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
saveFileButton = tkinter.Button(root,
                                text="Save as file dialog",
                                command=saveFileDialog)
&nbsp;
quitButton = tkinter.Button(root, text="Exit", command=exit)
&nbsp;
saveFileButton.pack(fill=tkinter.BOTH)
&nbsp;
tkinter.Label(text="").pack()
&nbsp;
quitButton.pack(fill=tkinter.BOTH)
&nbsp;
root.mainloop()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Osmý příklad &ndash; výběr barvy z&nbsp;palety</h2>

<p>Také pro výběr barvy je možné použít standardní systémové okno. Způsob
zobrazení tohoto okna je, podobně jako při otevírání i ukládání souborů,
závislý na použitém operačním systému a jeho grafickém uživatelském rozhraní
(popravdě řečeno je linuxová varianta dosti nepřehledná). Pokud je barva
vybrána, je její hodnota vrácena jako dvojice, přičemž první prvek dvojice
obsahuje hodnoty R,G,B (jedná se tedy o trojici) a druhý prvek obsahuje barvu
zakódovanou v&nbsp;hexa tripletu <strong>#rrggbb</strong>, což je způsob
kódování barvy, který můžete znát například z&nbsp;HTML. Při zavolání dialogu
můžete specifikovat implicitně vybranou barvu:</p>

<pre>
rgb_values, hexa_triplet = colorchooser.askcolor(color="lightgreen",
                                                 title="Please select any color")
print(rgb_values)
print(hexa_triplet)
</pre>

<img src="https://i.iinfo.cz/images/575/tkinter9-12.png" class="image-304027" alt="&#160;" width="418" height="222" />
<p><i>Obrázek 12: Výběr barvy.</i></p>

<p>Následuje výpis zdrojového kódu dnešního posledního demonstračního
příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import colorchooser
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def chooseColorDialog():
    rgb_values, hexa_triplet = colorchooser.askcolor(color="lightgreen",
                                                     title="Please select any color")
    print(rgb_values)
    print(hexa_triplet)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
chooseColorButton = tkinter.Button(root,
                                   text="Choose color",
                                   command=chooseColorDialog)
&nbsp;
quitButton = tkinter.Button(root, text="Exit", command=exit)
&nbsp;
chooseColorButton.pack(fill=tkinter.BOTH)
&nbsp;
tkinter.Label(text="").pack()
&nbsp;
quitButton.pack(fill=tkinter.BOTH)
&nbsp;
root.mainloop()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech osmi dnes popsaných demonstračních příkladů naleznete
pod následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>98_tkdialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/98_tkdialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/98_tkdialog.py</a></td></tr>
<tr><td>99_ask_dialogs.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/99_ask_dialogs.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/99_ask_dialogs.py</a></td></tr>
<tr><td>100_ask_question_config.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/100_ask_question_config.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/100_ask_question_config.py</a></td></tr>
<tr><td>101_custom_dialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/101_custom_dialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/101_custom_dialog.py</a></td></tr>
<tr><td>102_better_custom_dialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/102_better_custom_dialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/102_better_custom_dialog.py</a></td></tr>
<tr><td>103_open_file_dialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/103_open_file_dialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/103_open_file_dialog.py</a></td></tr>
<tr><td>104_save_file_dialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/104_save_file_dialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/104_save_file_dialog.py</a></td></tr>
<tr><td>105_color_chooser.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/105_color_chooser.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/105_color_chooser.py</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

