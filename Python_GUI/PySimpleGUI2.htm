<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba grafického uživatelského rozhraní v Pythonu s využitím knihovny PySimpleGUI (2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba grafického uživatelského rozhraní v Pythonu s využitím knihovny PySimpleGUI (2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Pro aplikace se složitějšími dialogy je nutné umět lépe rozmisťovat ovládací prvky na ploše oken a dialogů. K tomuto účelu slouží kontejnery, které si dnes popíšeme. Také si ukážeme způsob naprogramování reakce na události, které vzniknou ihned po výběru prvku ve výběrovém boxu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím knihovny PySimpleGUI (2)</a></p>
<p><a href="#k02">2. Interaktivní výběr barevného tématu aplikace v&nbsp;GUI</a></p>
<p><a href="#k03">3. Změna tématu ihned po jeho výběru z&nbsp;výběrového boxu</a></p>
<p><a href="#k04">4. Výchozí zarovnání prvků v&nbsp;okně či kontejneru</a></p>
<p><a href="#k05">5. Vycentrování prvků a zarovnání prvků doprava</a></p>
<p><a href="#k06">6. Neviditelný prvek typu &bdquo;pružina&ldquo;</a></p>
<p><a href="#k07">7. Další typ kontejneru &ndash; <strong>Column</strong></a></p>
<p><a href="#k08">8. Kontejnery je možné vložit do jiných kontejnerů</a></p>
<p><a href="#k09">9. Vizuální oddělení GUI prvků</a></p>
<p><a href="#k10">10. Rámce (<strong>Frame</strong>)</a></p>
<p><a href="#k11">11. Přidání hlavního menu do okna aplikace</a></p>
<p><a href="#k12">12. Přidání stavového řádku do okna aplikace</a></p>
<p><a href="#k13">13. Vlastní způsob vykreslení titulku okna</a></p>
<p><a href="#k14">14. Přidání kontextového menu</a></p>
<p><a href="#k15">15. Kreslicí plátno (<i>canvas</i>)</a></p>
<p><a href="#k16">16. Přidání kreslicího plátna do okna aplikace</a></p>
<p><a href="#k17">17. Specifikace velikosti a barvy pozadí kreslicího plátna</a></p>
<p><a href="#k18">18. Obsah navazujícího článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím knihovny PySimpleGUI (2)</h2>

<p><a
href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-pysimplegui/">V&nbsp;úvodním
článku o knihovně PySimpleGUI</a> jsme se dozvěděli, jak je možné vytvořit okno
či dialog se základními prvky GUI. Ovšem pro tvorbu aplikací se složitějšími
dialogy je nutné umět lépe rozmisťovat jednotlivé ovládací prvky na ploše oken
a dialogů. K&nbsp;tomuto účelu slouží takzvané <i>kontejnery</i>, které si
popíšeme dnes. Taktéž si ukážeme využití kreslicí plochy a v&nbsp;neposlední
řadě i způsob naprogramování reakce na události, které vzniknou například ihned
po výběru prvku ve výběrovém boxu (v&nbsp;takovém případě totiž PySimpleGUI ve
výchozím nastavení žádnou událost nevytváří, což může být pro některé typy
aplikací omezující).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Interaktivní výběr barevného tématu aplikace v&nbsp;GUI</h2>

<p>Podívejme se nyní na způsob realizace výběru barevného tématu (ze všech
dostupných témat) přímo z&nbsp;GUI aplikace. Je to relativně snadné. Nejdříve
získáme jména všech témat postupem, který již známe z&nbsp;minula:</p>

<pre>
themes = sorted(sg.list_of_look_and_feel_values())
</pre>

<p>Posléze do okna aplikace vložíme ovládací GUI prvek <strong>Combo</strong>,
nastavíme jeho jméno (resp.&nbsp;klíč), seznam všech témat a výchozí téma,
které má být v&nbsp;prvku předvybrané:</p>

<pre>
sg.Combo(themes, default_value=selected_theme, readonly=True, key="theme")
</pre>

<p>A konečně ve smyčce událostí zajistíme, že když uživatel nějaké téma vybere
a stiskne tlačítko <strong>Change</strong>, bude stávající okno zavřeno, změní
se téma a vytvoří se okno nové:</p>

<pre>
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
&nbsp;
    <i># reakce na výběr tématu</i>
    if event == "Change":
        selected_theme = values["theme"]
        window.close()
        window = main_window(selected_theme)
</pre>

<p>Výsledky mohou vypadat takto:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-1.webp" class="image-1113221" width="254" height="95" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Interaktivní výběr barevného tématu.</i></p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-2.webp" class="image-1113222" width="254" height="95" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 2: Interaktivní výběr barevného tématu.</i></p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-3.webp" class="image-1113223" width="254" height="95" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 3: Interaktivní výběr barevného tématu.</i></p>

<p>Pro úplnost si ukažme celý zdrojový kód demonstračního příkladu:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
themes = sorted(sg.list_of_look_and_feel_values())
&nbsp;
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
def main_window(theme=None):
    selected_theme = theme or themes[0]
&nbsp;
    <i># ovládací prvky, které se mají zobrazit v okně</i>
    layout = [
        [
            sg.Text("Theme"),
            sg.Combo(themes, default_value=selected_theme, readonly=True, key="theme"),
        ],
        [
            sg.Button("Change"),
            sg.Cancel("Exit")
        ],
    ]
&nbsp;
    sg.theme(selected_theme)
    return sg.Window("Window #4", layout)
&nbsp;
&nbsp;
window = main_window()
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event in {sg.WIN_CLOSED, "Exit"}:
        break
&nbsp;
    <i># reakce na výběr tématu</i>
    if event == "Change":
        selected_theme = values["theme"]
        window.close()
        window = main_window(selected_theme)
&nbsp;
<i># po výskoku ze smyčky událostí aplikaci ukončíme</i>
window.close()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Změna tématu ihned po jeho výběru z&nbsp;výběrového boxu</h2>

<p>V&nbsp;demonstračním příkladu, který byl popsán <a
href="#k02">v&nbsp;předchozí kapitole</a>, bylo nutné téma nejdříve vybrat a
poté stisknout tlačítko <strong>Change</strong>. To může být poněkud
nepraktické, ovšem GUI prvek <strong>Combo</strong> ve svém výchozím nastavení
negeneruje žádné události, takže je nutné generování událostí nejprve povolit.
Ve skutečnosti je to velmi jednoduché, protože u tohoto ovládacího prvku
postačí specifikace nepovinného parametru <strong>enable_events</strong>:</p>

<pre>
sg.Combo(themes, default_value=selected_theme, readonly=True, key="theme", <strong>enable_events=True</strong>)
</pre>

<p>Z&nbsp;okna odstraníme tlačítko <strong>Change</strong> (je už zbytečné) a
upravíme smyčku událostí takovým způsobem, aby reagovala na událost
&bdquo;theme&ldquo; (což je jméno, resp.&nbsp;klíč kombo boxu):</p>

<pre>
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event in {sg.WIN_CLOSED, "Exit"}:
        break
&nbsp;
    <i># reakce na výběr tématu</i>
    if event == "theme":
        selected_theme = values["theme"]
        window.close()
        window = main_window(selected_theme)
</pre>

<p>Výsledky:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-4.webp" class="image-1113224" width="254" height="95" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 4: Interaktivní výběr barevného tématu upravenou aplikací.</i></p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-5.webp" class="image-1113225" width="254" height="95" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 5: Interaktivní výběr barevného tématu upravenou aplikací.</i></p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-6.webp" class="image-1113226" width="254" height="93" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 6: Interaktivní výběr barevného tématu upravenou aplikací.</i></p>

<p>Opět se pro úplnost podívejme na celý zdrojový kód takto upravené
aplikace:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
themes = sorted(sg.list_of_look_and_feel_values())
&nbsp;
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
def main_window(theme=None):
    selected_theme = theme or themes[0]
&nbsp;
    <i># ovládací prvky, které se mají zobrazit v okně</i>
    layout = [
        [
            sg.Text("Theme"),
            sg.Combo(themes, default_value=selected_theme, readonly=True, key="theme", enable_events=True),
        ],
        [
            sg.Cancel("Exit")
        ],
    ]
&nbsp;
    sg.theme(selected_theme)
    return sg.Window("Window #4", layout)
&nbsp;
&nbsp;
window = main_window()
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event in {sg.WIN_CLOSED, "Exit"}:
        break
&nbsp;
    <i># reakce na výběr tématu</i>
    if event == "theme":
        selected_theme = values["theme"]
        window.close()
        window = main_window(selected_theme)
&nbsp;
<i># po výskoku ze smyčky událostí aplikaci ukončíme</i>
window.close()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výchozí zarovnání prvků v&nbsp;okně či kontejneru</h2>

<p>V&nbsp;případě, že budeme vytvářet <i>layout</i> složitějšího dialogu, je
mnohdy nutné měnit i zarovnání prvků. Ve výchozím nastavení jsou prvky
zarovnány doleva. To si můžeme velmi snadno otestovat spuštěním dalšího
skriptu, který zobrazí čtyři GUI prvky (samá tlačítka), z&nbsp;nichž každý je
umístěn na samostatném řádku. Jednotlivé prvky mají rozdílnou šířku, takže je
jejich zarovnání zcela jasně patrné:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [
        sg.Button("S"),
    ],
    [
        sg.Button("Button"),
    ],
    [
        sg.Button("Long button"),
    ],
    [
        sg.Submit()
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #17", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>

<p>Výsledné okno by mělo vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-7.webp" class="image-1113227" width="132" height="173" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 7: Okno se čtyřmi tlačítky zarovnanými doleva.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vycentrování prvků a zarovnání prvků doprava</h2>

<p>Zarovnání prvků není vlastností jednotlivých prvků, ale vlastností
<i>kontejneru</i>, v&nbsp;nichž jsou prvky umístěny. My prozatím jako kontejner
používáme celé okno aplikace, takže zarovnání bude muset být specifikováno zde.
Pokusme se například prvky vycentrovat:</p>

<pre>
window = sg.Window("Window #18", layout, <strong>element_justification="c"</strong>)
</pre>

<p>Výsledek by měl být odlišný:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-8.webp" class="image-1113228" width="132" height="173" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 8: Okno se čtyřmi tlačítky vycentrovanými tlačítky.</i></p>

<p>Celý skript vypadá takto:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [
        sg.Button("S"),
    ],
    [
        sg.Button("Button"),
    ],
    [
        sg.Button("Long button"),
    ],
    [
        sg.Submit()
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #18", layout, element_justification="c")
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>

<p>Prvky samozřejmě můžeme nechat zarovnat doprava:</p>

<pre>
window = sg.Window("Window #18", layout, <strong>element_justification="r"</strong>)
</pre>

<p>Tentokrát s&nbsp;tímto výsledkem:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-9.webp" class="image-1113229" width="132" height="173" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 9: Okno se čtyřmi tlačítky zarovnanými doprava.</i></p>

<p>A takto vypadá výsledný skript, který okno s&nbsp;GUI prvky vytvořil a
zobrazil:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [
        sg.Button("S"),
    ],
    [
        sg.Button("Button"),
    ],
    [
        sg.Button("Long button"),
    ],
    [
        sg.Submit()
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #18", layout, element_justification="r")
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Neviditelný prvek typu &bdquo;pružina&ldquo;</h2>

<p>Kromě viditelných GUI prvků můžeme do okna (kontejneru) přidávat i některé
neviditelné prvky. Důležitým prvkem je &bdquo;pružina&ldquo;
(<strong>Push</strong>), která od sebe odsouvá další prvky na stejném řádku.
Pokud se na řádku použije více pružin, mají všechny stejnou sílu. To nám
umožňuje například vycentrovat prvek tak, že před něj i za něj vložíme
pružinu.</p>

<p>Pokusme se nyní na každý řádek vložit dvě tlačítka a vkládat mezi ně (na
různé pozice) pružiny:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [
        sg.Button("Button1"),
        sg.Button("Button2"),
    ],
    [
        <strong>sg.Push()</strong>,
        sg.Button("Button1"),
        sg.Button("Button2"),
    ],
    [
        sg.Button("Button1"),
        <strong>sg.Push()</strong>,
        sg.Button("Button2"),
    ],
    [
        sg.Button("Button1"),
        sg.Button("Button2"),
        <strong>sg.Push()</strong>,
    ],
    [
        <strong>sg.Push()</strong>,
        sg.Button("Button1"),
        sg.Button("Button2"),
        <strong>sg.Push()</strong>,
    ],
    [
        <strong>sg.Push()</strong>,
        sg.Button("Button1"),
        <strong>sg.Push()</strong>,
        sg.Button("Button2"),
        <strong>sg.Push()</strong>,
    ],
    [
        sg.Submit()
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #20", layout, size=(320, 240))
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>

<p>Výsledkem by měly být takto rozmístěné prvky:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-10.webp" class="image-1113230" width="326" height="287" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 10: Tlačítka, mezi které jsou vkládány pružiny.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Další typ kontejneru &ndash; <strong>Column</strong></h2>

<p>Poměrně často je vhodné jednotlivé prvky grafického uživatelského rozhraní
rozmístit do sloupců a nikoli do řádků. V&nbsp;knihovně PySimpleGUI sice pro
tento účel nelze využít &bdquo;mřížku&ldquo; (<i>grid</i>), ovšem programátoři
mají k&nbsp;dispozici <i>kontejner</i> nazvaný jednoduše a příznačně
<strong>Column</strong>. Díky tomu, že se jedná o kontejner, lze do něj vkládat
další komponenty. Přitom se používá stále stejný koncept &ndash; komponenty
jsou uloženy v&nbsp;dvourozměrném seznamu. Podívejme se, jak lze komponenty
rozdělit do dvou sloupců:</p>

<pre>
left_column = [
    [první řádek komponent],
    [druhý řádek komponent],
    ...
]
&nbsp;
right_column = [
    [první řádek komponent],
    [druhý řádek komponent],
    ...
]
</pre>

<p>Tyto sloupce se vloží na plochu okna stejně, jako jakékoli další komponenty.
Pod sloupce je umístěn další řádek s&nbsp;tlačítkem:</p>

<pre>
layout = [
    [
        <strong>sg.Column(left_column)</strong>,
        <strong>sg.Column(right_column)</strong>,
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
]
</pre>

<p>Výsledek může vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-11.webp" class="image-1113231" width="470" height="177" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 11: Komponenty rozmístěné do dvou sloupců.</i></p>

<p>Celý zdrojový kód demonstračního příkladu vypadá následovně:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [
        sg.Text("Name", size=(8, 0)),
        sg.InputText(key="name", size=(20, 0))
    ],
    [
        sg.Text("Surname", size=(8, 0)),
        sg.InputText(key="surname", size=(20, 0))
    ],
]
&nbsp;
right_column = [
    [
        sg.Text("Role", size=(8, 0)),
        sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
    ],
    [
        sg.Text("Register e-mail", size=(8, 0)),
        sg.Checkbox("", default=True, key="register e-mail")
    ],
    [
        sg.Text("Color theme", size=(8, 0)),
        sg.Radio("Light", "THEME", default=False, key="light_theme"),
        sg.Radio("Dark", "THEME", default=True, key="dark_theme"),
    ],
]
&nbsp;
layout = [
    [
        sg.Column(left_column),
        sg.Column(right_column),
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #21", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Kontejnery je možné vložit do jiných kontejnerů</h2>

<p>Kontejnery (kromě vlastních oken) mají jednu důležitou vlastnost &ndash; je
možné je vkládat (i se všemi komponentami v&nbsp;nich) do dalších kontejnerů.
To mj.&nbsp;znamená, že komponenta typu <i>Column</i> může být vložena do
dalšího &bdquo;sloupce&ldquo; atd. Tento koncept je ukázán na dalším
demonstračním příkladu, kde v&nbsp;pravém sloupci je umístěn další sloupec
s&nbsp;komponentami &ndash; radiovými tlačítky):</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [
        sg.Text("Name", size=(8, 0)),
        sg.InputText(key="name", size=(20, 0))
    ],
    [
        sg.Text("Surname", size=(8, 0)),
        sg.InputText(key="surname", size=(20, 0))
    ],
]
&nbsp;
right_column = [
    [
        sg.Text("Role", size=(8, 0)),
        sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
    ],
    [
        sg.Text("Register e-mail", size=(8, 0)),
        sg.Checkbox("", default=True, key="register e-mail")
    ],
    [
        sg.Text("Color theme", size=(8, 0)),
        sg.Column([
            [sg.Radio("Light", "THEME", default=False, key="light_theme")],
            [sg.Radio("Dark", "THEME", default=True, key="dark_theme")],
        ]),
    ],
]
&nbsp;
layout = [
    [
        sg.Column(left_column),
        sg.Column(right_column),
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #22", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>

<p>Výsledný design okna:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-12.webp" class="image-1113232" width="465" height="197" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 12: Komponenty rozmístěné do dvou sloupců. V&nbsp;pravém sloupci
je jako jedna z&nbsp;komponent umístěn ještě jeden sloupec.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vizuální oddělení GUI prvků</h2>

<p>Pro vizuální oddělení prvků grafického uživatelského rozhraní se používají
horizontální a vertikální oddělovače (separátory), které jsou představovány
pasivními komponentami <strong>HSep</strong> a <strong>VSep</strong>.
V&nbsp;dalším demonstračním příkladu jsou použity oba typy separátorů tak, aby
vzniklo okno s&nbsp;následujícím rozložením:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-13.webp" class="image-1113233" width="477" height="205" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 13: Horizontální a vertikální oddělovače (separátory).</i></p>

<p>Vertikální separátor je vložen mezi oba sloupce, horizontální separátor pak
na samostatný řádek:</p>

<pre>
layout = [
    [
        sg.Column(left_column),
        <strong>sg.VSep()</strong>,
        sg.Column(right_column),
    ],
    [
        <strong>sg.HSep()</strong>,
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
]
</pre>

<p>Takto vypadá úplný zdrojový kód demonstračního příkladu, který oba typy
oddělovačů používá:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [
        sg.Text("Name", size=(8, 0)),
        sg.InputText(key="name", size=(20, 0))
    ],
    [
        sg.Text("Surname", size=(8, 0)),
        sg.InputText(key="surname", size=(20, 0))
    ],
]
&nbsp;
right_column = [
    [
        sg.Text("Role", size=(8, 0)),
        sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
    ],
    [
        sg.Text("Register e-mail", size=(8, 0)),
        sg.Checkbox("", default=True, key="register e-mail")
    ],
    [
        sg.Text("Color theme", size=(8, 0)),
        sg.Column([
            [sg.Radio("Light", "THEME", default=False, key="light_theme")],
            [sg.Radio("Dark", "THEME", default=True, key="dark_theme")],
        ]),
    ],
]
&nbsp;
layout = [
    [
        sg.Column(left_column),
        sg.VSep(),
        sg.Column(right_column),
    ],
    [
        sg.HSep(),
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #23", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rámce (<strong>Frame</strong>)</h2>

<p>V&nbsp;případě, že se namísto kontejneru <strong>Column</strong> použije
kontejner <strong>Frame</strong>, budou komponenty umístěné na tento kontejner
orámovány. Navíc je možné každý pro každý rámec (<i>frame</i>) specifikovat
jeho titulek, takže rozvržení celého okna (dialogu) můžeme realizovat i
takto:</p>

<pre>
layout = [
    [
        <strong>sg.Frame("User", left_column)</strong>,
        <strong>sg.Frame("Settings", right_column)</strong>,
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
]
</pre>

<p>S&nbsp;výsledkem:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-14.webp" class="image-1113234" width="473" height="215" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 14: Komponenty umístěné do rámců (frames).</i></p>

<p>A pro úplnost si ukažme úplný zdrojový kód takto upraveného demonstračního
příkladu:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [
        sg.Text("Name", size=(8, 0)),
        sg.InputText(key="name", size=(20, 0))
    ],
    [
        sg.Text("Surname", size=(8, 0)),
        sg.InputText(key="surname", size=(20, 0))
    ],
]
&nbsp;
right_column = [
    [
        sg.Text("Role", size=(8, 0)),
        sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
    ],
    [
        sg.Text("Register e-mail", size=(8, 0)),
        sg.Checkbox("", default=True, key="register e-mail")
    ],
    [
        sg.Text("Color theme", size=(8, 0)),
        sg.Column([
            [sg.Radio("Light", "THEME", default=False, key="light_theme")],
            [sg.Radio("Dark", "THEME", default=True, key="dark_theme")],
        ]),
    ],
]
&nbsp;
layout = [
    [
        sg.Frame("User", left_column),
        sg.Frame("Settings", right_column),
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #24", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Přidání hlavního menu do okna aplikace</h2>

<p>Knihovna PySimpleGUI pochopitelně podporuje i specifikaci menu. Přímo na
plochu okna (v&nbsp;jeho horní části, jak je zvykem) se umisťuje hlavní menu,
které je realizováno komponentou nazvanou jednoduše <strong>Menu</strong>:</p>

<pre>
layout = [
    [<strong>sg.Menu(menu)</strong>],
    ...
    ...
    ...
]
</pre>

<p>Samotné menu je pak v&nbsp;tom nejjednodušším případě realizováno formou
vnořeného seznamu. Jednotlivé podseznamy obsahují dva prvky: jméno příslušného
rozbalovacího menu a druhým prvkem je další podseznam s&nbsp;jednotlivými
položkami menu. Hlavní menu s&nbsp;dvojicí rozbalovacích menu může být
definováno následovně:</p>

<pre>
menu = [
        ["File", ["New", "Open", "Save", "---", "Exit"]],
        ["Help", ["About"]],
        ]
</pre>

<p>Výsledné okno s&nbsp;hlavním menu může vypadat takto:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-15.webp" class="image-1113235" width="473" height="248" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 15: Okno aplikace s&nbsp;hlavním menu.</i></p>

<p>Celý zdrojový kód demonstračního příkladu s&nbsp;oknem a hlavním menu:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [
        sg.Text("Name", size=(8, 0)),
        sg.InputText(key="name", size=(20, 0))
    ],
    [
        sg.Text("Surname", size=(8, 0)),
        sg.InputText(key="surname", size=(20, 0))
    ],
]
&nbsp;
right_column = [
    [
        sg.Text("Role", size=(8, 0)),
        sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
    ],
    [
        sg.Text("Register e-mail", size=(8, 0)),
        sg.Checkbox("", default=True, key="register e-mail")
    ],
    [
        sg.Text("Color theme", size=(8, 0)),
        sg.Column([
            [sg.Radio("Light", "THEME", default=False, key="light_theme")],
            [sg.Radio("Dark", "THEME", default=True, key="dark_theme")],
        ]),
    ],
]
&nbsp;
<strong>menu = [</strong>
        <strong>["File", ["New", "Open", "Save", "---", "Exit"]],</strong>
        <strong>["Help", ["About"]],</strong>
        <strong>]</strong>
&nbsp;
layout = [
    [<strong>sg.Menu(menu)</strong>],
    [
        sg.Frame("User", left_column),
        sg.Frame("Settings", right_column),
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #25", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Přidání stavového řádku do okna aplikace</h2>

<p>Kromě hlavního menu se v&nbsp;aplikacích s&nbsp;grafickým uživatelským
rozhraním mnohdy setkáme i s&nbsp;realizací stavového řádku. V&nbsp;knihovně
PySimpleGUI je stavový řádek představován GUI komponentou nazvanou
<strong>StatusBar</strong>, která v&nbsp;tom nejjednodušším případě bude
obsahovat pouze nějaký text (ten lze později měnit). Typicky bývá stavový řádek
umístěn v&nbsp;dolní části okna, tedy například takto:</p>

<pre>
layout = [
    [sg.Menu(menu)],
    [
        sg.Frame("User", left_column),
        sg.Frame("Settings", right_column),
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
    [<strong>sg.StatusBar("Status bar")</strong>],
]
</pre>

<p>Výsledek bude vypadat takto:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-16.webp" class="image-1113236" width="473" height="272" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 16: Okno aplikace s&nbsp;přidaným stavovým řádkem.</i></p>

<p>Opět nezapomeneme na úplný zdrojový kód aplikace s&nbsp;oknem, v&nbsp;němž
je kromě dalších komponent použit i stavový řádek:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [
        sg.Text("Name", size=(8, 0)),
        sg.InputText(key="name", size=(20, 0))
    ],
    [
        sg.Text("Surname", size=(8, 0)),
        sg.InputText(key="surname", size=(20, 0))
    ],
]
&nbsp;
right_column = [
    [
        sg.Text("Role", size=(8, 0)),
        sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
    ],
    [
        sg.Text("Register e-mail", size=(8, 0)),
        sg.Checkbox("", default=True, key="register e-mail")
    ],
    [
        sg.Text("Color theme", size=(8, 0)),
        sg.Column([
            [sg.Radio("Light", "THEME", default=False, key="light_theme")],
            [sg.Radio("Dark", "THEME", default=True, key="dark_theme")],
        ]),
    ],
]
&nbsp;
menu = [
        ["File", ["New", "Open", "Save", "---", "Exit"]],
        ["Help", ["About"]],
        ]
&nbsp;
layout = [
    [sg.Menu(menu)],
    [
        sg.Frame("User", left_column),
        sg.Frame("Settings", right_column),
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
    [<strong>sg.StatusBar("Status bar")</strong>],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #26", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vlastní způsob vykreslení titulku okna</h2>

<p>Titulek okna (resp.&nbsp;přesněji řečeno oken) lze při použití knihovny
PySimpleGUI vykreslit dvěma způsoby. Výchozí způsob využívá vlastnosti okenního
manažeru (<i>Window Manager</i>), ovšem pokud při konstrukci okna použijeme
parametr <strong>use_custom_titlebar</strong> nastavený na hodnotu
<strong>True</strong>, bude vlastně vykresleno okno bez standardního
titulkového pruhu. Ten bude následně vykreslen přímo v&nbsp;ploše okna
knihovnou PySimpleGUI a bude tedy vypadat odlišně:</p>

<pre>
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #27", layout, use_custom_titlebar=True)
</pre>

<p>Výsledek může vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/380/pysimplegui2-2.webp" class="image-1113240" width="447" height="262" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 17: Vlastní způsob vykreslení titulku okna.</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto případě je lepší se obejít
bez hlavního menu. Navíc mohou mít některé okenní manažery problém
s&nbsp;určením, které okno je právě aktivní (například při vytváření
screenshotů).</div></p>

<p>A samozřejmě si ukážeme i úplný zdrojový kód příkladu:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [
        sg.Text("Name", size=(8, 0)),
        sg.InputText(key="name", size=(20, 0))
    ],
    [
        sg.Text("Surname", size=(8, 0)),
        sg.InputText(key="surname", size=(20, 0))
    ],
]
&nbsp;
right_column = [
    [
        sg.Text("Role", size=(8, 0)),
        sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
    ],
    [
        sg.Text("Register e-mail", size=(8, 0)),
        sg.Checkbox("", default=True, key="register e-mail")
    ],
    [
        sg.Text("Color theme", size=(8, 0)),
        sg.Column([
            [sg.Radio("Light", "THEME", default=False, key="light_theme")],
            [sg.Radio("Dark", "THEME", default=True, key="dark_theme")],
        ]),
    ],
]
&nbsp;
menu = [
        ["File", ["New", "Open", "Save", "---", "Exit"]],
        ["Help", ["About"]],
        ]
&nbsp;
layout = [
    [sg.Menu(menu)],
    [
        sg.Frame("User", left_column),
        sg.Frame("Settings", right_column),
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
    [sg.StatusBar("Status bar")],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #27", layout, use_custom_titlebar=True)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přidání kontextového menu</h2>

<p>Další důležitou komponentou, především pro aplikace používané profesionály,
je komponenta představující kontextové menu. Samotná definice kontextového menu
je poněkud zvláštní, protože se typicky jedná o menu bez
&bdquo;rozbalovacího&ldquo; elementu. Proto se mnohdy setkáme s&nbsp;touto
definicí:</p>

<pre>
context_menu = ["", ["About", "---", "Exit"]]
</pre>

<p>Kontextové menu se do okna aplikace přidá takto:</p>

<pre>
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #28", layout, use_custom_titlebar=False, <strong>right_click_menu=context_menu</strong>)
</pre>

<p>Úplný zdrojový kód aplikace s&nbsp;kontextovým menu:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [
        sg.Text("Name", size=(8, 0)),
        sg.InputText(key="name", size=(20, 0))
    ],
    [
        sg.Text("Surname", size=(8, 0)),
        sg.InputText(key="surname", size=(20, 0))
    ],
]
&nbsp;
right_column = [
    [
        sg.Text("Role", size=(8, 0)),
        sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
    ],
    [
        sg.Text("Register e-mail", size=(8, 0)),
        sg.Checkbox("", default=True, key="register e-mail")
    ],
    [
        sg.Text("Color theme", size=(8, 0)),
        sg.Column([
            [sg.Radio("Light", "THEME", default=False, key="light_theme")],
            [sg.Radio("Dark", "THEME", default=True, key="dark_theme")],
        ]),
    ],
]
&nbsp;
menu = [
        ["File", ["New", "Open", "Save", "---", "Exit"]],
        ["Help", ["About"]],
        ]
&nbsp;
layout = [
    [sg.Menu(menu)],
    [
        sg.Frame("User", left_column),
        sg.Frame("Settings", right_column),
    ],
    [
        sg.Push(),
        sg.Submit(),
        sg.Push(),
    ],
    [sg.StatusBar("Status bar")],
]
&nbsp;
context_menu = ["", ["About", "---", "Exit"]]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #28", layout, use_custom_titlebar=False, right_click_menu=context_menu)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Kreslicí plátno (<i>canvas</i>)</h2>

<p>Poměrně důležitou součástí knihovny <i>PySimpleGUI</i> je podpora kreslení
grafických objektů na takzvané <i>kreslicí plátno</i> neboli <i>canvas</i>.
Jedná se o techniku, která je do značné míry postavena na knihovně
<i>TkInter</i>, v&nbsp;níž je podpora kreslicího plátna velmi sofistikovaná (a
vlastně se těžko hledá její přímá obdoba či náhrada v&nbsp;jiných GUI
toolkitech). V&nbsp;dalším textu (i v&nbsp;části třetího článku) se budeme
tomuto tématu věnovat, protože v&nbsp;některých oblastech může být použití
kreslicího plátna velmi užitečné.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Přidání kreslicího plátna do okna aplikace</h2>

<p>Kreslicí plátno se z&nbsp;pohledu knihovny PySimpleGUI chová jako běžný
prvek grafického uživatelského rozhraní. Vytváří se konstruktorem
<strong>PySimpleGUI.Canvas</strong> a &ndash; jak uvidíme dále &ndash; můžeme
při jeho konstrukci předat několik důležitých parametrů. Pokusme se ovšem pro
začátek na plochu okna vložit kreslicí plátno vytvořené pouze zavoláním jeho
konstruktoru, tj.&nbsp;bez předání dalších parametrů. Okno aplikace rozdělíme
na levou a pravou část, přičemž plátno bude umístěno do pravé části:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [sg.Button("Exit", size=(8, 0))],
]
&nbsp;
right_column = [
    [
        <strong>sg.Canvas()</strong>,
    ],
]
&nbsp;
layout = [
    [
        sg.Frame("Commands", left_column),
        sg.Frame("Canvas", right_column),
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #29", layout, use_custom_titlebar=True)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>

<p>Výsledek by měl vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-18.webp" class="image-1113238" width="203" height="95" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 18: Kreslicí plátno ve výchozí velikosti přidané na plochu
okna.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Specifikace velikosti a barvy pozadí kreslicího plátna</h2>

<p>U kreslicího plátna mnohdy budeme potřebovat specifikovat jeho rozměry. Na
rozdíl od ostatních GUI komponent, jejichž velikosti se specifikují ve znacích
(což je ovšem dosti vágní označení, které odpovídá logickým jednotkám
&bdquo;em&ldquo; a &bdquo;x&ldquo;), se rozměry plátna zadávají přímo
v&nbsp;pixelech, což je pro tuto komponentu lepší řešení. A taktéž můžeme přímo
specifikovat barvu pozadí plátna. Pro tento účel slouží nepovinný parametr
nazvaný <strong>background_color</strong>:</p>

<pre>
sg.Canvas(<strong>background_color='white'</strong>, <strong>size=(320, 240)</strong>),
</pre>

<p>Výsledek by měl vypadat takto:</p>

<img src="https://i.iinfo.cz/images/300/pysimplegui2-19.webp" class="image-1113239" width="478" height="307" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 19: Kreslicí plátno ve specifikované velikosti a se zadanou
barvou pozadí přidané na plochu okna.</i></p>

<p>Úplný zdrojový kód dnešního posledního demonstračního příkladu vypadá
následovně:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
left_column = [
    [sg.Button("Exit", size=(8, 0))],
]
&nbsp;
right_column = [
    [
        <strong>sg.Canvas(background_color='white', size=(320, 240))</strong>,
    ],
]
&nbsp;
layout = [
    [
        sg.Frame("Commands", left_column),
        sg.Frame("Canvas", right_column),
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #29", layout, use_custom_titlebar=True)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah navazujícího článku</h2>

<p>Ve třetím článku o knihovně <i>PySimpleGUI</i> se budeme zabývat převážně
tím, jakým způsobem lze využít kreslicí plátno (<i>canvas</i>). Jedná se totiž
o důležitou komponentu, která se používá například i pro tvorbu a vykreslení
grafů, diagramů, různých složitějších struktur, ale i herního prostředí
atd.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si <a
href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-pysimplegui/">v&nbsp;minulém</a>
i dnešním článku ukázali, naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady. Pro jejich spuštění je pochopitelně
nutné mít nainstalován balíček <i>PySimpleGUI</i>:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>01-empty-window.py</td><td>prázdné okno</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/01-empty-window.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/01-empty-window.py</a></td></tr>
<tr><td> 2</td><td>02-empty-window-event-loop.py</td><td>prázdné okno, implementace klasické smyčky událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/02-empty-window-event-loop.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/02-empty-window-event-loop.py</a></td></tr>
<tr><td> 3</td><td>03-window-with-text-label.py</td><td>okno se specifikovanou velikostí a s&nbsp;vloženým textovým prvkem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/03-window-with-text-label.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/03-window-with-text-label.py</a></td></tr>
<tr><td> 4</td><td>04-window-with-text-label.py</td><td>okno s&nbsp;automaticky vypočtenou velikostí a s&nbsp;vloženým textovým prvkem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/04-window-with-text-label.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/04-window-with-text-label.py</a></td></tr>
<tr><td> 5</td><td>05-more-controls.py</td><td>pětice ovládacích prvků přidaných do okna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/05-more-controls.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/05-more-controls.py</a></td></tr>
<tr><td> 6</td><td>06-info.py</td><td>informační okno (dialog) bez navázané smyčky událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/06-info.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/06-info.py</a></td></tr>
<tr><td> 7</td><td>07-events.py</td><td>tisk všech zaregistrovaných a přečtených událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/07-events.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/07-events.py</a></td></tr>
<tr><td> 8</td><td>08-events-cancel.py</td><td>tisk zaregistrovaných událostí, reakce na stisk tlačítka <strong>Cancel</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/08-events-cancel.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/08-events-cancel.py</a></td></tr>
<tr><td> 9</td><td>09-one-shot-window.py</td><td>dialog pro zadání údajů do textových políček, bez smyčky událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/09-one-shot-window.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/09-one-shot-window.py</a></td></tr>
<tr><td>10</td><td>10-sizing.py</td><td>explicitní nastavení velikostí jednotlivých ovládacích prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/10-sizing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/10-sizing.py</a></td></tr>
<tr><td>11</td><td>11-even-more-controls.py</td><td>přidání dalších ovládacích prvků do okna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/11-even-more-controls.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/11-even-more-controls.py</a></td></tr>
<tr><td>12</td><td>12-different-theme.py</td><td>nastavení odlišného barvového tématu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/12-different-theme.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/12-different-theme.py</a></td></tr>
<tr><td>13</td><td>13-print-themes.py</td><td>tisk jmen všech dostupných témat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/13-print-themes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/13-print-themes.py</a></td></tr>
<tr><td>14</td><td>14-print-themes-2.py</td><td>tisk jmen všech dostupných témat, lepší varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/14-print-themes-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/14-print-themes-2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>15-select-theme.py</td><td>interaktivní změna tématu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/15-select-theme.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/15-select-theme.py</a></td></tr>
<tr><td>16</td><td>16-better-select-theme.py</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/16-better-select-theme.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/16-better-select-theme.py</a></td></tr>
<tr><td>17</td><td>17-default-alignment.py</td><td>výchozí zarovnání ovládacích prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/17-default-alignment.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/17-default-alignment.py</a></td></tr>
<tr><td>18</td><td>18-center-alignment.py</td><td>horizontální vycentrování ovládacích prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/18-center-alignment.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/18-center-alignment.py</a></td></tr>
<tr><td>19</td><td>19-right-alignment.py</td><td>zarovnání ovládacích prvků doprava</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/19-right-alignment.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/19-right-alignment.py</a></td></tr>
<tr><td>20</td><td>20-push.py</td><td>&bdquo;pružiny&ldquo; použité při rozmístění prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/20-push.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/20-push.py</a></td></tr>
<tr><td>21</td><td>21-columns.py</td><td>umístění prvků do sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/21-columns.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/21-columns.py</a></td></tr>
<tr><td>22</td><td>22-columns.py</td><td>umístění prvků do sloupců, sloupce uvnitř sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/22-columns.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/22-columns.py</a></td></tr>
<tr><td>23</td><td>23-separators.py</td><td>horizontální a vertikální oddělovače</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/23-separators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/23-separators.py</a></td></tr>
<tr><td>24</td><td>24-frames.py</td><td>umístění prvků do rámců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/24-frames.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/24-frames.py</a></td></tr>
<tr><td>25</td><td>25-menu.py</td><td>hlavní menu v&nbsp;okně aplikace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/25-menu.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/25-menu.py</a></td></tr>
<tr><td>26</td><td>26-status-bar.py</td><td>stavový řádek v&nbsp;okně aplikace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/26-status-bar.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/26-status-bar.py</a></td></tr>
<tr><td>27</td><td>27-custom-titlebar.py</td><td>změna způsobu zobrazení titulkové lišty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/27-custom-titlebar.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/27-custom-titlebar.py</a></td></tr>
<tr><td>28</td><td>28-context-menu.py</td><td>kontextové menu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/28-context-menu.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/28-context-menu.py</a></td></tr>
<tr><td>29</td><td>29-canvas.py</td><td>vytvoření kreslicího plátna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/29-canvas.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/29-canvas.py</a></td></tr>
<tr><td>30</td><td>30-canvas-size-background.py</td><td>specifikace velikosti plátna a barvy jeho pozadí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/30-canvas-size-background.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/30-canvas-size-background.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PySimpleGUI<br />
<a href="https://www.pysimplegui.org/en/latest/">https://www.pysimplegui.org/en/latest/</a>
</li>

<li>Kivy na GitHubu<br />
<a href="https://github.com/kivy/kivy">https://github.com/kivy/kivy</a>
</li>

<li>DearPyGui na GitHubu<br />
<a href="https://github.com/hoffstadt/DearPyGui">https://github.com/hoffstadt/DearPyGui</a>
</li>

<li>PySimpleGUI Tutorial<br />
<a href="https://www.tutorialspoint.com/pysimplegui/index.htm">https://www.tutorialspoint.com/pysimplegui/index.htm</a>
</li>

<li>PySimpleGUI - Canvas Element<br />
<a href="https://www.tutorialspoint.com/pysimplegui/pysimplegui_canvas_element.htm">https://www.tutorialspoint.com/pysimplegui/pysimplegui_canvas_element.htm</a>
</li>

<li>Dokumentace ke knihovně PySimpleGUI<br />
<a href="https://www.pysimplegui.org/en/latest/">https://www.pysimplegui.org/en/latest/</a>
</li>

<li>Dokumentace ke knihovně DearPyGui<br />
<a href="https://dearpygui.readthedocs.io/en/latest/index.html#">https://dearpygui.readthedocs.io/en/latest/index.html#</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>Stránky projektu wxPython<br />
<a href="https://wxpython.org/">https://wxpython.org/</a>
</li>

<li>wxPython Project Phoenix (na GitHubu)<br />
<a href="https://github.com/wxWidgets/Phoenix/blob/wxPython-4.0.3/README.rst">https://github.com/wxWidgets/Phoenix/blob/wxPython-4.0.3/README.rst</a>
</li>

<li>wxPython API Documentation<br />
<a href="https://docs.wxpython.org/index.html">https://docs.wxpython.org/index.html</a>
</li>

<li>wxWidgets<br />
<a href="https://wxwidgets.org/">https://wxwidgets.org/</a>
</li>

<li>wxPython 4.0.3 na PyPi<br />
<a href="https://pypi.org/project/wxPython/4.0.3/">https://pypi.org/project/wxPython/4.0.3/</a>
</li>

<li>wxGlade - a GUI builder for wxWidgets<br />
<a href="http://wxglade.sourceforge.net/">http://wxglade.sourceforge.net/</a>
</li>

<li>Repositář projektu wxGlade<br />
<a href="https://github.com/wxGlade/wxGlade/">https://github.com/wxGlade/wxGlade/</a>
</li>

<li>wxGlade’s documentation<br />
<a href="http://wxglade.sourceforge.net/docs/index.html">http://wxglade.sourceforge.net/docs/index.html</a>
</li>

<li>Graphical User Interfaces (GUI)<br />
<a href="https://pythonspot.com/gui/">https://pythonspot.com/gui/</a>
</li>

<li>wxPyWiki<br />
<a href="https://wiki.wxpython.org/FrontPage">https://wiki.wxpython.org/FrontPage</a>
</li>

<li>Getting started with wxPython<br />
<a href="https://wiki.wxpython.org/Getting%20Started#A_First_Application:_.22Hello.2C_World.22">https://wiki.wxpython.org/Getting%20Started#A_First_Application:_.22Hello.2C_World.22</a>
</li>

<li>wxPython GUI tutorial<br />
<a href="https://pythonspot.com/wxpython-gui-tutorial/">https://pythonspot.com/wxpython-gui-tutorial/</a>
</li>

<li>wxPython tutorial<br />
<a href="http://zetcode.com/wxpython/">http://zetcode.com/wxpython/</a>
</li>

<li>Build wxPython On Raspberry Pi<br />
<a href="https://wiki.wxpython.org/BuildWxPythonOnRaspberryPi">https://wiki.wxpython.org/BuildWxPythonOnRaspberryPi</a>
</li>

<li>wxPython History<br />
<a href="https://wxpython.org/pages/history/index.html">https://wxpython.org/pages/history/index.html</a>
</li>

<li>Installing wxPython 4.0 (Project Phoenix) on Fedora 27<br />
<a href="https://blog.wizardsoftheweb.pro/installing-wxpython-on-fedora/">https://blog.wizardsoftheweb.pro/installing-wxpython-on-fedora/</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Hand Coded GUI Versus Qt Designer GUI<br />
<a href="https://stackoverflow.com/questions/387092/hand-coded-gui-versus-qt-designer-gui">https://stackoverflow.com/questions/387092/hand-coded-gui-versus-qt-designer-gui</a>
</li>

<li>Qt Creator Manual<br />
<a href="http://doc.qt.io/qtcreator/">http://doc.qt.io/qtcreator/</a>
</li>

<li>Qt Designer Manual<br />
<a href="http://doc.qt.io/qt-5/qtdesigner-manual.html">http://doc.qt.io/qt-5/qtdesigner-manual.html</a>
</li>

<li>Qt Creator (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Qt_Creator">https://en.wikipedia.org/wiki/Qt_Creator</a>
</li>

<li>QIODevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QIODevice.html#PySide.QtCore.QIODevice">https://pyside.github.io/docs/pyside/PySide/QtCore/QIODevice.html#PySide.QtCore.QIODevice</a>
</li>

<li>QFile<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QFile.html#PySide.QtCore.QFile">https://pyside.github.io/docs/pyside/PySide/QtCore/QFile.html#PySide.QtCore.QFile</a>
</li>

<li>QUiLoader<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtUiTools/QUiLoader.html#PySide.QtUiTools.PySide.QtUiTools.QUiLoader.load">https://pyside.github.io/docs/pyside/PySide/QtUiTools/QUiLoader.html#PySide.QtUiTools.PySide.QtUiTools.QUiLoader.load</a>
</li>

<li>QSvgWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html">https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html</a>
</li>

<li>QByteArray<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html">https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

