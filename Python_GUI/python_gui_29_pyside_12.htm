<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Složitější ovládací prvky ve frameworku PySide: tabulky a stromy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Složitější ovládací prvky ve frameworku PySide: tabulky a stromy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve dvanáctém článku o frameworku PySide si popíšeme složitější ovládací prvky, které jsou však v aplikacích poměrně často používány. Jedná se o tabulky představované třídou <strong>QTableWidget</strong> a o stromy, které naopak vytvoříme z třídy <strong>QTreeWidget</strong>.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Složitější ovládací prvky ve frameworku PySide: tabulky a stromy</a></p>
<p><a href="#k02">2. Ovládací prvek typu <strong>QTableWidget</strong> aneb konfigurovatelná tabulka</a></p>
<p><a href="#k03">3. První demonstrační příklad: jednoduchá tabulka s&nbsp;rozměry 5&times;5 buněk</a></p>
<p><a href="#k04">4. Druhý demonstrační příklad: alternativní nastavení rozměrů tabulky</a></p>
<p><a href="#k05">5. Programová a manuální modifikace buněk tabulky</a></p>
<p><a href="#k06">6. Bublinová nápověda přiřazená k&nbsp;jednotlivým buňkám tabulky</a></p>
<p><a href="#k07">7. Třetí demonstrační příklad: nastavení obsahu jednotlivých buněk tabulky</a></p>
<p><a href="#k08">8. Reakce na události vznikající při práci s&nbsp;tabulkou</a></p>
<p><a href="#k09">9. Čtvrtý demonstrační příklad: reakce na základní typy událostí</a></p>
<p><a href="#k10">10. Zpracování událostí při kliknutí na titulky sloupců nebo řádků</a></p>
<p><a href="#k11">11. Pátý demonstrační příklad: reakce na kliknutí na titulky sloupců nebo řádků</a></p>
<p><a href="#k12">12. Ovládací prvek typu <strong>QTreeWidget</strong> aneb strom</a></p>
<p><a href="#k13">13. Vytvoření prázdného stromu a specifikace popisu sloupců</a></p>
<p><a href="#k14">14. Vložení prvků typu <strong>QTreeWidgetItem</strong> do stromu</a></p>
<p><a href="#k15">15. Šestý demonstrační příklad: strom, jehož prvky mají pouze jednu hodnotu</a></p>
<p><a href="#k16">16. Obsah následující části seriálu</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Složitější ovládací prvky ve frameworku PySide: tabulky a stromy</h2>

<p>Kromě již popsaných relativně jednoduchých ovládacích prvků nabízí framework
PySide programátorům (a nepřímo i uživatelům) několik složitějších widgetů.
V&nbsp;první řadě se jedná o widget <strong>QTextEdit</strong>, s&nbsp;nímž
jsme se seznámili minule a k&nbsp;jehož podrobnějšímu popisu se v&nbsp;tomto
seriálu ještě vrátíme. Ovšem existují i další složitější a přitom velmi
užitečné a často využívané ovládací prvky.</p>

<img src="https://i.iinfo.cz/images/104/appjar5-4.png" class="image-308896" alt="&#160;" width="401" height="344" />
<p><i>Obrázek 1: S&nbsp;widgetem zobrazujícím tabulku jsme se již setkali při
popisu knihovny <strong>appJar</strong>.</i></p>

<p>Mezi ně patří především <a href="#k02">tabulka</a> a <a
href="#k12">strom</a>. Tabulku je možné vytvořit s&nbsp;využitím ovládacího
prvku nazvaného <strong>QTableWidget</strong> (popř.&nbsp;odvozením nové třídy
od <strong>QTableWidget</strong>), strom je představován prvkem pojmenovaným
<strong>QTreeWidget</strong>. Dnes si ukážeme základy použití těchto dvou typů
widgetů, ovšem pro jejich plné využití je nutné použít model MVC
(<i>model-view-controller</i>), v&nbsp;němž tabulka či strom slouží jako pohled
na data.</p>

<img src="https://i.iinfo.cz/images/104/appjar5-15.png" class="image-308907" alt="&#160;" width="411" height="354" />
<p><i>Obrázek 2: Knihovna <strong>appJar</strong> obsahuje i podporu pro widget
zobrazující stromovou datovou strukturu, i když se nejedná o tak dobře
konfigurovatelný ovládací prvek, jako je tomu v&nbsp;případě frameworku
<strong>PySide</strong> a widgetu <strong>QTreeWidget</strong>.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Ovládací prvek typu <strong>QTableWidget</strong> aneb konfigurovatelná tabulka</h2>

<p>Prvním widgetem, s&nbsp;nímž se v&nbsp;dnešním článku setkáme, je ovládací
prvek určený pro zobrazení tabulky s&nbsp;měnitelným obsahem. Tento ovládací
prvek se jmenuje příhodně <strong>QTableWidget</strong>. Ve výchozím nastavení
je zobrazena tabulka obsahující titulky sloupců a řádků, což vlastně není nic
nového, protože stejnou funkcionalitu nabízí všechny tabulkové procesory. A
podobně jako u tabulkových procesorů je možné myší (nebo i programově) vybírat
jednotlivé buňky, vybírat celé sloupce nebo řádky, editovat obsah buněk, měnit
šířku řádků a výšku sloupců apod.</p>

<img src="https://i.iinfo.cz/images/81/pyside12a-1.png" class="image-320581" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 3: Změna šířky sloupce a výšky řádku.</i></p>

<p>Tabulka navíc ve chvíli, kdy se její obsah nevejde do vybrané plochy okna
(či jiného kontejneru), automaticky zobrazí scrollbary, což je užitečné,
protože se o tuto funkcionalitu nemusí starat programátor. Kromě toho se při
práci s&nbsp;tabulkou může generovat množství různých signálů, na které lze
programově reagovat a například setřídit tabulku podle toho sloupce, na který
uživatel klikl.</p>

<img src="https://i.iinfo.cz/images/81/pyside12a-2.png" class="image-320582" alt="&#160;" height="204" width="386" />
<p><i>Obrázek 4: Tabulka se zobrazenými scrollbary.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad: jednoduchá tabulka s&nbsp;rozměry 5&times;5 buněk</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázáno, jakým způsobem je
možné vytvořit jednoduchou tabulku a následně ji vložit do okna aplikace.
Samotné vytvoření tabulky je triviální, protože se o vše podstatné postará
konstruktor <strong>QTableWidget</strong> volaný z&nbsp;metody
<strong>prepareTable</strong>. Tomuto konstruktoru předáme rozměry tabulky a
taktéž referenci na kontejner, do kterého má být tabulka vložena:</p>

<pre>
def <strong>prepareTable</strong>(self):
    <i># vytvoření tabulky</i>
    return QtGui.QTableWidget(5, 5, self)
</pre>

<p>Umístění tabulky do okna zajistí nám již známý správce geometrie:</p>

<pre>
table = self.prepareTable()
quitButton = self.prepareQuitButton()
&nbsp;
<i># vytvoření správce geometrie</i>
layout = QtGui.QVBoxLayout()
&nbsp;
<i># umístění widgetů do okna</i>
layout.addWidget(table)
layout.addWidget(quitButton)
&nbsp;
<i># nastavení správce geometrie a vložení všech komponent do okna</i>
self.setLayout(layout)
</pre>

<p>Výsledkem by mělo být toto okno:</p>

<img src="https://i.iinfo.cz/images/81/pyside12a-3.png" class="image-320583" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 5: Screenshot prvního demonstračního příkladu.</i></p>

<p>Následuje výpis zdrojového kódu prvního demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># vytvoření widgetů vkládaných do okna</i>
        table = self.prepareTable()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(table)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareTable</strong>(self):
        <i># vytvoření tabulky</i>
        return QtGui.QTableWidget(5, 5, self)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        self.resize(450, 300)
        self.setWindowTitle("QTableWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Druhý demonstrační příklad: alternativní nastavení rozměrů tabulky</h2>

<p>Druhý demonstrační příklad si popíšeme pouze velmi stručně, protože se od
příkladu prvního odlišuje jen v&nbsp;tom, jakým způsobem se specifikují rozměry
tabulky. Namísto volání konstruktoru s&nbsp;předáním rozměrů tabulky:</p>

<pre>
table = QtGui.QTableWidget(5, 5, self)
</pre>

<p>se nejprve tabulka vytvoří a teprve poté se explicitně nastaví počet řádků a
sloupců:</p>

<pre>
table = QtGui.QTableWidget(self)
table.setColumnCount(5)
table.setRowCount(5)
</pre>

<p>Výsledek se nijak neliší od příkladu prvního:</p>

<img src="https://i.iinfo.cz/images/81/pyside12a-4.png" class="image-320584" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 6: Screenshot druhého demonstračního příkladu.</i></p>

<p>Opět následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># vytvoření widgetů vkládaných do okna</i>
        table = self.prepareTable()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(table)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareTable</strong>(self):
        <i># vytvoření tabulky</i>
        table = QtGui.QTableWidget(self)
        table.setColumnCount(5)
        table.setRowCount(5)
        return table
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        self.resize(450, 300)
        self.setWindowTitle("QTableWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Programová a manuální modifikace buněk tabulky</h2>

<p>Tabulka vytvořená s&nbsp;využitím frameworku <i>PySide</i> není
v&nbsp;žádném případě pouze statickým prvkem grafického uživatelského rozhraní.
Je tomu právě naopak, protože jednotlivé buňky tabulky je možné modifikovat, a
to jak uživatelem, tak i programově. Modifikace prováděná uživatelem se
používají snadno: dvojklikem na buňku, výběrem buňky a stiskem klávesy
<strong>F2</strong>, popř.&nbsp;(což je nejjednodušší řešení) výběrem buňky
následovaným libovolnou sekvencí alfanumerických znaků, které se ihned začnou
do vybrané části tabulky vkládat.</p>

<p>Programová změna tabulky je založena na použití metody
<strong>QTableWidget.setItem()</strong>. Této metodě je nutné předat index
řádku a index sloupce (indexy se začínají počítat nuly) a taktéž referenci na
objekt typu <strong>QTableWidgetItem</strong>. V&nbsp;nejjednodušším případě se
tento objekt vytvoří konstruktorem, kterému se předá řetězec, jenž se má
v&nbsp;tabulce zobrazit:</p>

<pre>
item = QtGui.QTableWidgetItem("pokus")
table.setItem(j, i, item)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Bublinová nápověda přiřazená k&nbsp;jednotlivým buňkám tabulky</h2>

<p>Při přesunu kurzoru myši nad tabulku mohou jednotlivé buňky tabulky zobrazit
bublinovou nápovědu. Ta se ve skutečnosti nastavuje velmi jednoduše metodou
<strong>QTreeWidgetItem.setToolTip()</strong>. Podívejme se na příklad, který
vše osvětlí:</p>

<pre>
item = QtGui.QTableWidgetItem("pokus")
item.setToolTip("toto je nápověda k buňce 'pokus'")
table.setItem(j, i, item)
</pre>

<p>Bublinovou nápovědu použijeme i ve třetím demonstračním příkladu, který je
popsán <a href="#k07">v&nbsp;navazující kapitole</a>.</p>

<img src="https://i.iinfo.cz/images/81/pyside12a-5.png" class="image-320585" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 7: Způsob zobrazení bublinové nápovědy.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Třetí demonstrační příklad: nastavení obsahu jednotlivých buněk tabulky</h2>

<p><a href="#k05">Výše popsaná</a> metoda
<strong>QTableWidget.setItem()</strong> je použita ve třetím příkladu pro
vytvoření tabulky o rozměrech 10&times;10 buněk. Do této tabulky jsou
programově vypsány hodnoty malé násobilky. Navíc se u každé hodnoty nastaví
bublinová nápověda zmíněná <a href="#k06">v&nbsp;předchozí kapitole</a>:</p>

<pre>
def <strong>prepareTable</strong>(self):
    <i># vytvoření tabulky</i>
    table = QtGui.QTableWidget(self)
    table.setColumnCount(10)
    table.setRowCount(10)
&nbsp;
    <i># naplnění tabulky</i>
    for j in range(1, 11):
        for i in range(1, 11):
            item = QtGui.QTableWidgetItem(str(i*j))
            tooltip = u"výsledek součinu {x}×{y}".format(x=i, y=j)
            item.setToolTip(tooltip)
            table.setItem(j-1, i-1, item)
    return table
</pre>

<img src="https://i.iinfo.cz/images/81/pyside12a-6.png" class="image-320586" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 8: Screenshot třetího demonstračního příkladu.</i></p>

<p>Opět se podívejme na výpis zdrojového kódu dnešního třetího demonstračního
příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># vytvoření widgetů vkládaných do okna</i>
        table = self.prepareTable()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(table)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareTable</strong>(self):
        <i># vytvoření tabulky</i>
        table = QtGui.QTableWidget(self)
        table.setColumnCount(10)
        table.setRowCount(10)
&nbsp;
        <i># naplnění tabulky</i>
        for j in range(1, 11):
            for i in range(1, 11):
                item = QtGui.QTableWidgetItem(str(i*j))
                tooltip = u"výsledek součinu {x}×{y}".format(x=i, y=j)
                item.setToolTip(tooltip)
                table.setItem(j-1, i-1, item)
        return table
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        self.resize(450, 300)
        self.setWindowTitle("QTableWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Reakce na události vznikající při práci s&nbsp;tabulkou</h2>

<p>Již <a href="#k02">ve druhé kapitole</a> jsme si řekli, že se při práci
s&nbsp;tabulkou generuje poměrně velké množství signálů, které je možné navázat
na callback funkce či metody. Ve chvíli, kdy dojde k&nbsp;události
reprezentované daným signálem, bude příslušná callback funkce/metoda zavolána a
programátor tak může adekvátně zareagovat na akce prováděné uživatelem.
Podívejme se na nejjednodušší a možná i nejčastěji používanou událost &ndash;
výběr buňky v&nbsp;tabulce. Příslušný signál spojíme s&nbsp;callback metodou
takto:</p>

<pre>
table.cellClicked.connect(self.onCellClicked)
</pre>

<p>Callback metoda musí v&nbsp;tomto případě akceptovat tři argumenty:</p>

<ol>
<li>Referenci na objekt (<i>self</i>, <i>this</i>). Kdyby se nejednalo o
metodu, tento objekt by se nepoužil.</li>
<li>Index řádku, v&nbsp;němž se nachází vybraná buňka.</li>
<li>Index sloupce, v&nbsp;němž se nachází vybraná buňka.</li>
</ol>

<p>Callback metoda tedy může vypadat takto:</p>

<pre>
def <strong>onCellClicked</strong>(self, row, column):
    message = u"kliknuto na buňku [{x}, {y}]".format(x=column, y=row)
    self.textEdit.appendPlainText(message)
</pre>

<p>Další typ události je nepatrně složitější. Tato událost vznikne ve chvíli,
když se změní fokus vybrané buňky (ne její obsah, ale výběr):</p>

<pre>
table.currentCellChanged.connect(self.onCurrentCellChanged)
</pre>

<p>V&nbsp;tomto případě musí callback metoda akceptovat jak souřadnice původní
buňky, tak i souřadnice nově vybrané (fokusované) buňky:</p>

<pre>
def <strong>onCurrentCellChanged</strong>(self, row1, column1, row2, column2):
    message = u"změna fokusu z buňky [{x2}, {y2}] na buňku [{x1}, {y1}]".format(
        x1=column1, y1=row1, x2=column2, y2=row2)
    self.textEdit.appendPlainText(message)
</pre>

<p>Mohlo by se zdát, že není nutné mít zaregistrované oba typy událostí, ovšem
ve skutečnosti nemusí nastat situace, kdy při akcích prováděných uživatelem
dojde k&nbsp;oběma typům událostí. Ostatně se podívejte na následující dvojici
screenshotů:</p>

<img src="https://i.iinfo.cz/images/532/pyside12b-1.png" class="image-320587" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 9: Při výběru jednotlivých buněk se generují oba typy
událostí.</i></p>

<img src="https://i.iinfo.cz/images/532/pyside12b-2.png" class="image-320588" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 10: Při výběru celých sloupců se generuje jen jeden typ
události.</i></p>

<p>Další často používanou událostí je událost, která nastane ve chvíli, kdy
uživatel změní obsah nějaké buňky tabulky:</p>

<pre>
table.cellChanged.connect(self.onCellChanged)
</pre>

<p>Handler této události musí (nezávisle na tom, zda se jedná o metodu či o
obyčejnou funkci) akceptovat mj. i souřadnice modifikované buňky. Její nový
obsah se získá snadno metodou <strong>QTableWidget.item(řádek,
sloupec)</strong>:</p>

<pre>
def <strong>onCellChanged</strong>(self, row, column):
    value = self.table.item(row, column).text()
    message = u"změna obsahu buňky [{x}, {y}] na hodnotu {v}".format(
        x=column, y=row, v=value)
    self.textEdit.appendPlainText(message)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Čtvrtý demonstrační příklad: reakce na základní typy událostí</h2>

<p>V&nbsp;dnešním čtvrtém demonstračním příkladu je realizována programová
reakce na základní typy událostí, které mohou při práci s&nbsp;tabulkou nastat.
Pro všechny tři základní události, tj.&nbsp;pro signály
<strong>cellClicked</strong>, <strong>currentCellChanged</strong> a
<strong>cellChanged</strong> jsou zaregistrovány příslušné handlery, které po
svém zavolání vypíšou informace do několikařádkového textového widgetu. Ten je
vytvořen jednoduše (viz též předchozí část tohoto seriálu):</p>

<pre>
def <strong>prepareTextEdit</strong>(self):
    <i># víceřádkové vstupní textové pole</i>
    textEdit = QtGui.QPlainTextEdit(self)
    textEdit.setReadOnly(True)
    return textEdit
</pre>

<p>Poznámka: vzhledem k&nbsp;tomu, že potřebujeme čistý textový výstup (bez
dalšího formátování), je použit widget <strong>QPlainTextEdit</strong> a nikoli
<strong>QTextEdit</strong>.</p>

<img src="https://i.iinfo.cz/images/532/pyside12b-3.png" class="image-320589" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 11: Screenshot čtvrtého demonstračního příkladu.</i></p>

<p>Opět následuje výpis zdrojového kódu tohoto demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># vytvoření widgetů vkládaných do okna</i>
        self.table = self.prepareTable()
        self.textEdit = self.prepareTextEdit()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.table)
        layout.addWidget(self.textEdit)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareTextEdit</strong>(self):
        <i># víceřádkové vstupní textové pole</i>
        textEdit = QtGui.QPlainTextEdit(self)
        textEdit.setReadOnly(True)
        return textEdit
&nbsp;
    def <strong>prepareTable</strong>(self):
        <i># vytvoření tabulky</i>
        table = QtGui.QTableWidget(self)
        table.setColumnCount(10)
        table.setRowCount(10)
&nbsp;
        <i># naplnění tabulky</i>
        for j in range(1, 11):
            for i in range(1, 11):
                item = QtGui.QTableWidgetItem(str(i*j))
                tooltip = u"výsledek součinu {x}×{y}".format(x=i, y=j)
                item.setToolTip(tooltip)
                table.setItem(j-1, i-1, item)
&nbsp;
        <i># registrace callback funkcí</i>
        table.cellClicked.connect(self.onCellClicked)
        table.currentCellChanged.connect(self.onCurrentCellChanged)
        table.cellChanged.connect(self.onCellChanged)
&nbsp;
        return table
&nbsp;
    def <strong>onCellClicked</strong>(self, row, column):
        message = u"kliknuto na buňku [{x}, {y}]".format(x=column, y=row)
        self.textEdit.appendPlainText(message)
&nbsp;
    def <strong>onCurrentCellChanged</strong>(self, row1, column1, row2, column2):
        message = u"změna fokusu z buňky [{x2}, {y2}] na buňku [{x1}, {y1}]".format(
            x1=column1, y1=row1, x2=column2, y2=row2)
        self.textEdit.appendPlainText(message)
&nbsp;
    def <strong>onCellChanged</strong>(self, row, column):
        value = self.table.item(row, column).text()
        message = u"změna obsahu buňky [{x}, {y}] na hodnotu {v}".format(
            x=column, y=row, v=value)
        self.textEdit.appendPlainText(message)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        self.resize(450, 450)
        self.setWindowTitle("QTableWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zpracování událostí při kliknutí na titulky sloupců nebo řádků</h2>

<p>Poměrně často se setkáme s&nbsp;nutností seřazení tabulky podle určitého
sloupce. Tuto operaci je možné implementovat relativně jednoduše &ndash;
postačí jen zareagovat na kliknutí na titulek daného sloupce. Nejprve tedy
propojíme příslušný signál s&nbsp;handlerem:</p>

<pre>
table.horizontalHeader().sectionClicked.connect(self.onHorizontalHeaderClicked)
</pre>

<p>A následně můžeme napsat tělo handleru:</p>

<pre>
def <strong>onHorizontalHeaderClicked</strong>(self, c):
    message = u"vybrán sloupec {c}".format(c=c)
    self.textEdit.appendPlainText(message)
</pre>

<p>Podobným způsobem je možné reagovat na kliknutí na titulek jednotlivých
řádků:</p>

<pre>
table.verticalHeader().sectionClicked.connect(self.onVerticalHeaderClicked)
</pre>

<p>Opět se podívejme, jak může vypadat tělo handleru této události:</p>

<pre>
def <strong>onVerticalHeaderClicked</strong>(self, r):
    message = u"vybrán řádek {r}".format(r=r)
    self.textEdit.appendPlainText(message)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pátý demonstrační příklad: reakce na kliknutí na titulky sloupců nebo řádků</h2>

<p>Pátý příklad vznikl rozšířením příkladu čtvrtého o dvě další callback
funkce, které se zavolají ve chvíli, kdy uživatel klikne na titulek sloupce
popř.&nbsp;na titulek řádku. Callback funkce pouze vypíšou zprávu o výběru,
ovšem v&nbsp;praxi by například mohlo dojít k&nbsp;seřazení dat podle vybraného
sloupce atd.:</p>

<img src="https://i.iinfo.cz/images/532/pyside12b-4.png" class="image-320590" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 12: Výpis informace ve chvíli, kdy je vybrán sloupec popř. řádek
kliknutím na titulek.</i></p>

<p>Podívejme se na výpis zdrojového kódu dnešního pátého demonstračního
příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># vytvoření widgetů vkládaných do okna</i>
        self.table = self.prepareTable()
        self.textEdit = self.prepareTextEdit()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.table)
        layout.addWidget(self.textEdit)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareTextEdit</strong>(self):
        <i># víceřádkové vstupní textové pole</i>
        textEdit = QtGui.QPlainTextEdit(self)
        textEdit.setReadOnly(True)
        return textEdit
&nbsp;
    def <strong>prepareTable</strong>(self):
        <i># vytvoření tabulky</i>
        table = QtGui.QTableWidget(self)
        table.setColumnCount(10)
        table.setRowCount(10)
&nbsp;
        <i># naplnění tabulky</i>
        for j in range(1, 11):
            for i in range(1, 11):
                item = QtGui.QTableWidgetItem(str(i*j))
                tooltip = u"výsledek součinu {x}×{y}".format(x=i, y=j)
                item.setToolTip(tooltip)
                table.setItem(j-1, i-1, item)
&nbsp;
        <i># registrace callback funkcí</i>
        table.cellClicked.connect(self.onCellClicked)
        table.currentCellChanged.connect(self.onCurrentCellChanged)
        table.cellChanged.connect(self.onCellChanged)
&nbsp;
        <i># callback funkce při výběru sloupců nebo celých řádků</i>
        table.horizontalHeader().sectionClicked.connect(self.onHorizontalHeaderClicked)
        table.verticalHeader().sectionClicked.connect(self.onVerticalHeaderClicked)
&nbsp;
        return table
&nbsp;
    def <strong>onCellClicked</strong>(self, row, column):
        message = u"kliknuto na buňku [{x}, {y}]".format(x=column, y=row)
        self.textEdit.appendPlainText(message)
&nbsp;
    def <strong>onCurrentCellChanged</strong>(self, row1, column1, row2, column2):
        message = u"změna fokusu z buňky [{x2}, {y2}] na buňku [{x1}, {y1}]".format(
            x1=column1, y1=row1, x2=column2, y2=row2)
        self.textEdit.appendPlainText(message)
&nbsp;
    def <strong>onCellChanged</strong>(self, row, column):
        value = self.table.item(row, column).text()
        message = u"změna obsahu buňky [{x}, {y}] na hodnotu {v}".format(
            x=column, y=row, v=value)
        self.textEdit.appendPlainText(message)
&nbsp;
    def <strong>onHorizontalHeaderClicked</strong>(self, c):
        message = u"vybrán sloupec {c}".format(c=c)
        self.textEdit.appendPlainText(message)
&nbsp;
    def <strong>onVerticalHeaderClicked</strong>(self, r):
        message = u"vybrán řádek {r}".format(r=r)
        self.textEdit.appendPlainText(message)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        self.resize(450, 450)
        self.setWindowTitle("QTableWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Ovládací prvek typu <strong>QTreeWidget</strong> aneb strom</h2>

<p>Druhým ovládacím prvkem, s&nbsp;nímž se v&nbsp;dnešním článku alespoň ve
stručnosti seznámíme, je strom. Ten je představovaný třídou
<strong>QTreeWidget</strong> nebo jejími potomky. S&nbsp;ovládacím prvkem,
který dokáže zobrazit stromovou strukturu, jsme se již setkali při popisu
knihovny <i>appJar</i>, v&nbsp;níž ovšem bylo možné použít jen jediný typ
zdrojových dat &ndash; soubor ve formátu XML. Naproti tomu je widget typu
<strong>QTreeWidget</strong> obecnější, neboť se v&nbsp;něm stromová struktura
skládá z&nbsp;prvků typu <strong>QTreeWidgetItem</strong>, které opět mohou
obsahovat další prvky téhož typu. V&nbsp;nejjednodušším případě jsou prvky
představovány jednořádkovým textem, ovšem je možné použít i ikony
popř.&nbsp;složitější struktury (například lze zobrazit několik sloupců
s&nbsp;hodnotami).</p>

<img src="https://i.iinfo.cz/images/104/appjar5-12.png" class="image-308904" alt="&#160;" width="190" height="230" />
<p><i>Obrázek 13: Strom vytvořený z&nbsp;XML v&nbsp;knihovně appJar.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vytvoření prázdného stromu a specifikace popisu sloupců</h2>

<p>Vytvoření prázdného stromu je ještě jednodušší, než vytvoření prázdné
tabulky, protože není nutné specifikovat žádné rozměry:</p>

<pre>
tree = QtGui.QTreeWidget(self)
</pre>

<img src="https://i.iinfo.cz/images/532/pyside12b-5.png" class="image-320591" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 14: Výchozí podoba stromu není příliš pěkná.</i></p>

<p>Implicitně se i v&nbsp;případě stromu zobrazuje titulkový pruh, který můžeme
snadno upravit. Navíc můžeme (resp.&nbsp;většinou musíme) specifikovat počet
sloupců. Následující dva příklady nastaví titulek zobrazený na pruhu a současně
se specifikuje, že se má použít jen jediný sloupec:</p>

<pre>
tree.setHeaderLabel("strom")
tree.setColumnCount(1)
</pre>

<img src="https://i.iinfo.cz/images/532/pyside12b-6.png" class="image-320592" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 15: Nastavení nadpisu jediného sloupce.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Vložení prvků typu <strong>QTreeWidgetItem</strong> do stromu</h2>

<p>Prvky vkládané do stromu jsou typu <strong>QTreeWidgetItem</strong>.
V&nbsp;nejjednodušším případě mohou jednotlivé prvky reprezentovat pouhý text,
i tak ale tento text musíme předávat jako jednoprvkový seznam, protože jsme si
již v&nbsp;předchozí kapitole řekli, že se prvky stromu mohou zobrazit
v&nbsp;několika sloupcích. Prvním parametrem konstruktoru je předek daného
prvku:</p>

<pre>
items = []
for i in range(1, 11):
    item = QtGui.QTreeWidgetItem(None, ["prvek #{i}".format(i=i)])</i>
    items.append(item)
tree.insertTopLevelItems(0, items)
</pre>

<img src="https://i.iinfo.cz/images/532/pyside12b-7.png" class="image-320593" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 16: Strom s&nbsp;několika prvky (uzly) na nejvyšší
úrovni.</i></p>

<p>Relativně snadno můžeme vytvořit skutečnou stromovou strukturu, v&nbsp;níž
je každý prvek na nejvyšší úrovni uzlem obsahujícím (například) tři další
poduzly:</p>

<pre>
<i># vytvoření stromu</i>
tree = QtGui.QTreeWidget(self)
tree.setHeaderLabel("strom")
tree.setColumnCount(1)
items = []
for i in range(1, 11):
    item = QtGui.QTreeWidgetItem(None, ["prvek #{i}".format(i=i)])
    items.append(item)
    QtGui.QTreeWidgetItem(item, ["podprvek A"])
    QtGui.QTreeWidgetItem(item, ["podprvek B"])
    QtGui.QTreeWidgetItem(item, ["podprvek C"])
tree.insertTopLevelItems(0, items)
</pre>

<img src="https://i.iinfo.cz/images/532/pyside12b-8.png" class="image-320594" alt="&#160;" height="477" width="452" />
<p><i>Obrázek 17: Strom s&nbsp;uzly, z&nbsp;nichž každý obsahuje tři
poduzly.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Šestý demonstrační příklad: strom, jehož prvky mají pouze jednu hodnotu</h2>

<p>Předchozí úryvek kódu je použit v&nbsp;dnešním šestém a sedmém příkladu.
Tyto příklady se od sebe liší jen jednou maličkostí &ndash; zda se pro každý
uzel na nejvyšší úrovni vytváří i poduzly či nikoli:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># vytvoření widgetů vkládaných do okna</i>
        self.tree = self.prepareTree()
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.tree)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>prepareTree</strong>(self):
        <i># vytvoření stromu</i>
        tree = QtGui.QTreeWidget(self)
        tree.setHeaderLabel("strom")
        tree.setColumnCount(1)
        items = []
        for i in range(1, 11):
            item = QtGui.QTreeWidgetItem(None, ["prvek #{i}".format(i=i)])
            items.append(item)
        tree.insertTopLevelItems(0, items)
&nbsp;
        return tree
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        self.resize(450, 450)
        self.setWindowTitle("QTreeWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Obsah následující části seriálu</h2>

<p>V&nbsp;navazující části seriálu o tvorbě aplikací s&nbsp;grafickým
uživatelským rozhraním v&nbsp;Pythonu se zaměříme na podrobnější popis tří
složitějších widgetů, s&nbsp;nimiž jsme se setkali minule a dnes:</p>

<ol>
<li><strong>QTextEdit</strong></li>
<li><strong>QTableWidget</strong></li>
<li><strong>QTreeWidget</strong></li>
</ol>

<p>Nejvíce času budeme věnovat použití ovládacího prvku zobrazujícího stromové
struktury, protože se tento prvek používá poměrně často a současně je příprava
dat pro něj poněkud složitější.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech sedmi dnes popsaných demonstračních příkladů byly opět,
podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>100_qtable_widget.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/100_qtable_widget.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/100_qtable_widget.py</a></td></tr>
<tr><td>101_qtable_widget_setsize.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/101_qtable_widget_setsize.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/101_qtable_widget_setsize.py</a></td></tr>
<tr><td>102_qtable_widget_setitem.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/102_qtable_widget_setitem.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/102_qtable_widget_setitem.py</a></td></tr>
<tr><td>103_qtable_widget_signals.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/103_qtable_widget_signals.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/103_qtable_widget_signals.py</a></td></tr>
<tr><td>104_qtable_widget_select_column_row.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/104_qtable_widget_select_column_row.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/104_qtable_widget_select_column_row.py</a></td></tr>
<tr><td>105_qtree_widget.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/105_qtree_widget.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/105_qtree_widget.py</a></td></tr>
<tr><td>106_qtree_widget_structure.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/106_qtree_widget_structure.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/106_qtree_widget_structure.py</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>QTableWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html</a>
</li>

<li>QTableWidgetItem<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html</a>
</li>

<li>QTreeWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html</a>
</li>

<li>QTreeWidgetItem <br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QLineEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html</a>
</li>

<li>QTextEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QIntValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html</a>
</li>

<li>QRegExpValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

