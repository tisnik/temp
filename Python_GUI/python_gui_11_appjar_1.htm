<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba grafického uživatelského rozhraní v Pythonu s využitím knihovny appJar</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba grafického uživatelského rozhraní v Pythonu s využitím knihovny appJar</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Další knihovna určená pro tvorbu aplikací s grafickým uživatelským rozhraním v Pythonu se jmenuje appJar. Jedná se o knihovnu, jejímž primárním cílem je umožnit tvorbu GUI s minimálním úsilím a minimálními znalostmi, takže ji je možné použít například při výuce.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím knihovny appJar</a></p>
<p><a href="#k02">2. Základní informace o knihovně appJar</a></p>
<p><a href="#k03">3. Instalace knihovny appJar</a></p>
<p><a href="#k04">4. První demonstrační příklad &ndash; okno s&nbsp;nápisem &bdquo;Hello world!&ldquo;</a></p>
<p><a href="#k05">5. Typy widgetů, které knihovna appJar programátorům nabízí</a></p>
<p><a href="#k06">6. Vytvoření okna s&nbsp;několika tlačítky</a></p>
<p><a href="#k07">7. &bdquo;Přilepení&ldquo; tlačítek k&nbsp;okrajům okna</a></p>
<p><a href="#k08">8. Konfigurace umístění tlačítek v&nbsp;dialogu</a></p>
<p><a href="#k09">9. Skupina tlačítek vytvořená jedním příkazem</a></p>
<p><a href="#k10">10. Naprogramování reakce na stisk tlačítek</a></p>
<p><a href="#k11">11. Nastavení základních atributů widgetů</a></p>
<p><a href="#k12">12. Ovládací prvek <strong>link</strong></a></p>
<p><a href="#k13">13. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím knihovny appJar</h2>

<p>V&nbsp;předchozích devíti částech <a
href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">seriálu
o tvorbě grafického uživatelského rozhraní v&nbsp;Pythonu</a> jsme si popsali
všechny důležité koncepty, na nichž je postavena knihovna <a
href="https://wiki.python.org/moin/TkInter">Tkinter</a>, která ve skutečnosti
tvoří relativně úzké rozhraní mezi interpretrem <a
href="https://www.python.org/">programovacího jazyka Python</a> a <a
href="http://wiki.tcl.tk/487">knihovnou Tk</a>. S&nbsp;využitím <i>Tkinteru</i>
je možné začít psát plnohodnotné aplikace vybavené grafickým uživatelským
rozhraním, a to poměrně rychle a s&nbsp;malými vstupními znalostmi, ovšem na
Tkinteru je stále v&nbsp;některých ohledech patrné, že je skutečně
&bdquo;pouze&ldquo; rozhraním ke knihovně určené pro jiný programovací jazyk.
Příkladem může být například způsob pojmenování událostí, pojmenování
základních kláves či specifikace, který znak v&nbsp;položce menu má být
podtržený.</p>

<img src="https://i.iinfo.cz/images/557/tkinter6-8.png" class="image-301711" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 1: Knihovna Tkinter je vybavena i univerzálně použitelným
widgetem představujícím kreslicí plochu.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní informace o knihovně appJar</h2>

<p>Aby se vývoj aplikací vybavených grafickým uživatelským rozhraním ještě více
zjednodušil, byla vytvořena knihovna nazvaná <i>appJar</i>. Tvůrcem této
knihovny je Richard Jarvis, který pracuje jako učitel. Richardovým cílem bylo
navrhnout <i>appJar</i> takovým způsobem, aby byla programová tvorba grafického
uživatelského rozhraní co nejjednodušší a aby tak bylo možné knihovnu
<i>appJar</i> použít ve výuce. Tento cíl se skutečně do značné míry podařilo
splnit, takže v&nbsp;současnosti představuje <i>appJar</i> s&nbsp;velkou
pravděpodobností ten nejrychlejší a současně i nejjednodušší způsob, jakým lze
v&nbsp;Pythonu vytvořit aplikaci s&nbsp;grafickým uživatelským rozhraním, i
když je nutné poznamenat, že některé pokročilejší ovládací prvky nejsou
k&nbsp;dispozici (některé nejsou k&nbsp;dispozici ani v&nbsp;původním Tkinteru,
ostatně i proto vznikla rozšiřující knihovna <a
href="https://docs.python.org/3.5/library/tkinter.tix.html">tkinter.tix</a>,
jejíž možnosti si popíšeme příště).</p>

<p>Knihovna <i>appJar</i> ovšem navíc obsahuje i další podpůrné moduly, které
jsou při tvorbě GUI užitečné. Jedná se především o:</p>

<ul>

<li>Sadu ikon uložených ve formátu PNG, které je možné v&nbsp;aplikacích použít
a které jsou uvolněny pod CCPL (<i>Creative Commons Public License</i>). Tyto
ikony je možné získat v&nbsp;různých velikostech na adrese <a
href="http://www.defaulticon.com/">http://www.defaulticon.com/</a>.</li>

<li>Moduly nazvané <strong>png.py</strong> a <strong>tkinter_png.py</strong>,
které zajišťují načítání rastrových obrázků ve formátu <a
href="https://www.root.cz/clanky/png-is-not-gif/">PNG</a>. To mj.&nbsp;znamená,
že aplikace s&nbsp;GUI je možné vyvíjet a spouštět i na těch systémech, kde
není nainstalována knihovna PIL. Moduly jsou implementovány v&nbsp;čistém
Pythonu, takže není nutné provádět překlad (a tím pádem &bdquo;bojovat&ldquo;
s&nbsp;překladačem céčka, jeho knihovnami atd.).</li>

<li>Modul <strong>nanojpeg.py</strong>, který zajišťuje načítání rastrových
obrázků ve formátu <a
href="https://www.root.cz/clanky/jpeg-kral-rastrovych-grafickych-formatu/">JPEG</a>.
Opět se jedná o modul psaný v&nbsp;čistém Pythonu, takže se v&nbsp;žádném
případě nejedná o nejrychlejší implementace dekodéru JPEGu, ale na druhou
stranu je tato implementace plně přenositelná (v&nbsp;tom smyslu, že pouze
postačuje nakopírovat zdrojové kódy modulu na počítač vybavený interpretrem
Pythonu, bez nutnosti instalovat či konfigurovat překladač céčka).</li>

<li>Modul <a href="http://freecode.com/projects/tkdnd">TkDND</a> zajišťující
v&nbsp;aplikacích funkci &bdquo;drag and drop&ldquo;. Jedná se o jediný modul,
který vyžaduje nativní knihovny, které jsou součástí instalace
<i>appJar</i>.</li>

</ul>

<a href="https://www.root.cz/obrazek/305132/"><img src="https://i.iinfo.cz/images/498/appjar1-1-prev.png" class="image-305132" alt="&#160;" width="370" height="175" /></a>
<p><i>Obrázek 2: Sada ikon dodávaná společně s&nbsp;knihovnou appJar.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace knihovny appJar</h2>

<p>Ve skutečnosti není nutné knihovnu <i>appJar</i> složitě instalovat, což je
na školách obecně problematické, neboť to vyžaduje koordinaci učitele
s&nbsp;administrátorem (samozřejmě je nutné mít na počítači nainstalovaný
Python, a to buď Python 2.x nebo 3.x, dokonce ani nejsou vyžadovány poslední
verze Pythonu; opět kvůli snadnému použití na školách). Namísto instalace je
pouze nutné z&nbsp;projektových stránek umístěných na adrese <a
href="http://appjar.info/">http://appjar.info/</a> stáhnout ZIP archiv a ten
rozbalit do adresáře s&nbsp;projektem (a popřípadě nastavit
<strong>.gitignore</strong>, aby se vzniklý podadresář neukládal do repositáře
vašeho projektu).</p>

<p>Struktura adresáře rozbalené knihovny <i>appJar</i> by měla vypadat zhruba
takto:</p>

<pre>
.
├── appjar.py
├── examples
│   └── showcase.py
├── gpl-3.0.txt
├── __init__.py
├── lib
│   ├── __init__.py
│   ├── license.txt
│   ├── nanojpeg.py
│   ├── png.py
│   ├── README.txt
│   ├── tkdnd2.8
│   │   ├── pkgIndex.tcl
│   │   ├── tcl_files
│   │   │   ├── tkdnd_compat.tcl
│   │   │   ├── tkdnd_generic.tcl
│   │   │   ├── tkdnd_macosx.tcl
│   │   │   ├── tkdnd_unix.tcl
│   │   │   └── tkdnd_windows.tcl
│   │   ├── tcl_libs
│   │   │   ├── libtkdnd2.8_arm.so
│   │   │   ├── libtkdnd2.8.dll
│   │   │   ├── libtkdnd2.8.dylib
│   │   │   ├── libtkdnd2.8_lin32.so
│   │   │   ├── libtkdnd2.8_lin64.so
│   │   │   ├── libtkdnd2.8.so
│   │   │   └── libtkdnd2.8_win64.dll
│   │   └── tkdnd.tcl
│   ├── TkDND_wrapper.py
│   ├── tkinter_png.py
│   └── tooltip.py
└── resources
    └── icons
        ├── 3d-cube.png
        ├── 3d-cylinder.png
        ...
        ...
        ...
</pre>

<p>Poznámka: povšimněte si, že modul <strong>TkDND</strong> využívá nativní
knihovnu, takže ho bylo nutné přeložit pro všechny (?) běžné architektury. Je
to ostatně patrné při pohledu do adresáře
<strong>appJar/lib/tkdnd2.8/tcl_libs</strong>, v&nbsp;němž by se měly nacházet
tyto soubory:</p>

<pre>
libtkdnd2.8_arm.so
libtkdnd2.8.dll
libtkdnd2.8.dylib
libtkdnd2.8_lin32.so
libtkdnd2.8_lin64.so
libtkdnd2.8.so
libtkdnd2.8_win64.dll
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad &ndash; okno s&nbsp;nápisem &bdquo;Hello world!&ldquo;</h2>

<p>Před podrobnějším popisem vlastností knihovny <i>appJar</i> si ukažme velmi
jednoduchý demonstrační příklad, v&nbsp;němž se vytvoří okno obsahující textové
návěští s&nbsp;textem &bdquo;Hello world!&ldquo;. Pokud nebudeme počítat první
řádek, který vlastně není zcela zapotřebí (záleží na tom, jak se bude projekt
spouštět), bude mít celý příklad pouhé čtyři textové řádky, což je méně, než
v&nbsp;případě přímého použití knihovny <i>Tkinter</i>:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
app.addLabel("title", "Hello world!")
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-2.png" class="image-305133" alt="&#160;" width="95" height="57" />
<p><i>Obrázek 3: Takto vypadá dnešní první demonstrační příklad po
spuštění.</i></p>

<p>Poznámka: úvodní řádek se <a
href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29">shebangem</a> je možné
vynechat, pokud se bude skript spouštět přes interpret Pythonu.</p>

<p>První skutečný řádek programu načte z&nbsp;modulu <strong>appJar</strong>
deklaraci třídy <strong>gui</strong>:</p>

<pre>
from appJar import gui
</pre>

<p>Tato třída skutečně reprezentuje základní prvek grafického uživatelského
rozhraní. Zjednodušeně řečeno si můžeme instanci této třídy představit jako
hlavní okno aplikace, do něhož můžeme vkládat widgety, vytvářet přes něj další
podokna (<i>sub windows</i>) a spouštět smyčku obsluhy událostí. Vytvoření
hlavního okna aplikace je triviální:</p>

<pre>
app = gui()
</pre>

<p>Na třetím řádku přidáme do hlavního okna aplikace textové návěští.
Povšimněte si, že při vytváření návěští zadáváme takzvaný titulek
(<i>title</i>) představující jméno návěští a samozřejmě také text, který se má
zobrazit uživateli:</p>

<pre>
app.addLabel("title", "Hello world!")
</pre>

<p>Na posledním řádku spustíme obsluhu smyčky událostí, a to metodou nazvanou
<strong>go</strong>. Implicitně se této metodě předává pouze <i>self</i>,
v&nbsp;případě potřeby je však možné specifikovat jazyk GUI:</p>

<pre>
app.go()
</pre>

<p>Poznámka: tato metoda by se měla volat po inicializaci všech prvků GUI.
Současně se jedná o poslední explicitně zavolaný příkaz v&nbsp;aplikace &ndash;
ostatní volání zajistí handler smyčky událostí.</p>

<p>Pro porovnání si ukažme, jak by se podobný příklad implementoval přímo
s&nbsp;použitím <i>Tkinteru</i>. V&nbsp;tomto případě musíme explicitně
vytvořit nové okno (<i>root</i>), vytvořit návěští, vložit ho do okna a zavolat
smyčku obsluhy událostí:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from tkinter import *
&nbsp;
root = Tk()
&nbsp;
label = Label(root, text="Hello world!")
&nbsp;
label.pack()
&nbsp;
root.mainloop()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Typy widgetů, které knihovna appJar programátorům nabízí</h2>

<p>Knihovna <i>appJar</i> nabízí vývojářům poměrně velké množství widgetů.
Některé widgety jsou interně značně komplikované (příkladem může být DatePicker
a Properties), ovšem programové ovládání těchto widgetů je ve skutečnosti velmi
snadné &ndash; většina widgetů pouze na základě uživatelského vstupu nastaví
hodnotu specifikovaného atributu. V&nbsp;následující tabulce jsou všechny
podporované widgety vypsány:</p>

<table>
<tr><th>Jméno widgetu</th><th>Stručný popis</th></tr>
<tr><td>Label</td><td>textové návěští neměnitelné uživatelem</td></tr>
<tr><td>Message</td><td>několikařádkové textové návěští</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Entry</td><td>šest typů vstupních polí (základní + 5 speciálních)</td></tr>
<tr><td>TextArea</td><td>několikařádkové vstupní pole</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Button</td><td>klasické &bdquo;klikací&ldquo; tlačítko, existují však i další varianty (tlačítko s&nbsp;ikonou atd.)</td></tr>
<tr><td>RadioButton</td><td>přepínací tlačítko, které je typicky sdružováno do větších skupin</td></tr>
<tr><td>CheckBox</td><td>zaškrtávací tlačítko</td></tr>
<tr><td>Properties</td><td>skupina zaškrtávacích tlačítek</td></tr>
<tr><td>OptionBox</td><td>výběrové pole se seznamem voleb (drop-down box)</td></tr>
<tr><td>SpinBox</td><td>výběrové pole s&nbsp;přetáčením voleb</td></tr>
<tr><td>ListBox</td><td>seznam prvků s&nbsp;možností výběru jednoho prvku či skupiny prvků</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Scale</td><td>scrollovací prvek</td></tr>
<tr><td>DatePicker</td><td>výběr data</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Link</td><td>klikací odkaz</td></tr>
<tr><td>WebLink</td><td>klikací odkaz</td></tr>
<tr><td>Grip</td><td>ploška sloužící k&nbsp;přesunu okna/dialogu/toolbaru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Meter</td><td>(pasivní) zobrazení průběhu výpočtu atd.</td></tr>
<tr><td>Separator</td><td>(pasivní) horizontální či vertikální oddělení widgetů</td></tr>
</table>

<p>Poznámka: povšimněte si, že widgety typu rozbalovací strom či tabulka
(prozatím) nejsou podporovány, což může znepříjemnit vývoj aplikací se
složitějším GUI.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření okna s&nbsp;několika tlačítky</h2>

<p>Nejjednodušším aktivním widgetem jsou tlačítka (<strong>Button</strong>),
takže si nějaká přidejme do našeho demonstračního projektu. Zatímco návěští se
přidávala metodou <strong>addLabel()</strong>, u tlačítek se používá metoda
<strong>addButton()</strong>. Této metodě se předávají dva parametry &ndash;
text zobrazený na tlačítku a reference na callback funkci, která se zavolá při
stisku tlačítka. Pokud namísto reference předáme hodnotu <strong>None</strong>,
nebude tlačítko na stisk reagovat (resp. vizuálně se &bdquo;zamáčkne&ldquo;,
ale nic dalšího se nestane):</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
app.addLabel("title", "Hello world!")
&nbsp;
app.addButton("Ok", None)
app.addButton("Quit", None)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-3.png" class="image-305134" alt="&#160;" width="95" height="127" />
<p><i>Obrázek 4: Screenshot druhého demonstračního příkladu.</i></p>

<p>Existují i další varianty tlačítka, především tlačítko s&nbsp;ikonou a
tlačítko s&nbsp;libovolným obrázkem. Tento typ tlačítek si ukážeme příště.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. &bdquo;Přilepení&ldquo; tlačítek k&nbsp;okrajům okna</h2>

<p>Widgety se do okna umisťují automaticky do neviditelné mřížky (grid), ovšem
jejich velikost i relativní pozici je samozřejmě možné upravovat. K&nbsp;tomu
slouží několik metod třídy <strong>gui</strong>, které nastavují konfiguraci
platnou pro všechny dále vytvářené widgety:</p>

<table>
<tr><th>Metoda</th><th>Význam</th></tr>
<tr><td>setSticky()</td><td>přilepení widgetů k&nbsp;okraji buněk</td></tr>
<tr><td>setStretch()</td><td>řídí chování widgetů při změně velikosti okna</td></tr>
<tr><td>setExpand()</td><td>interně má stejný význam jako <strong>setStretch()</strong></td></tr>
<tr><td>setPadX()</td><td>mezery mezi buňkami umístěnými vedle sebe</td></tr>
<tr><td>setPadY()</td><td>mezery mezi buňkami umístěnými nad sebou</td></tr>
<tr><td>setPadding()</td><td>kombinace předchozích dvou metod</td></tr>
</table>

<p>Nejužitečnější je metoda <strong>setSticky()</strong>, která určuje, ke
kterému okraji buňky má být widget &bdquo;přilepen&ldquo;. Možné jsou kombinace
znaků N, S, W, E (podle světových stran, podobně jako v&nbsp;knihovně Tkinter).
V&nbsp;dalším příkladu je specifikováno, aby se všechny widgety přilepily
k&nbsp;západnímu (levému) i východnímu (pravému) okraji buňky, což znamená, že
tlačítka budou při změně velikosti okna zvětšována a zmenšována a navíc budou
mít i stejnou šířku:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!")
&nbsp;
app.addButton("Ok", None)
app.addButton("Quit", None)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-4.png" class="image-305135" alt="&#160;" width="95" height="127" />
<p><i>Obrázek 5: Screenshot třetího demonstračního příkladu.</i></p>

<p>Poznámka: volání metody <strong>setSticky()</strong> ovlivní chování všech
<i>dále vytvořených</i> widgetů, nejedná se tedy o globální konfiguraci.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Konfigurace umístění tlačítek v&nbsp;dialogu</h2>

<p>Ve skutečnosti mají metody pro vytvoření widgetů čtveřici nepovinných
(pojmenovaných) parametrů sloužících k&nbsp;určení, do jaké buňky mřížky má být
widget vložen a kolik buněk zabere:</p>

<pre>
row=None, column=0, colspan=0, rowspan=0
</pre>

<p>Implicitně jsou widgety umisťovány pod sebe (row=None, column=0), ale to je
samozřejmě možné změnit specifikací parametrů <strong>row</strong> a
<strong>column</strong>:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addButton("Ok", None, 1, 0)
app.addButton("Quit", None, 1, 1)
&nbsp;
app.go()
</pre>

<p>Alternativně je možné nepovinné parametry při volání pojmenovat, což je
čitelnější, protože si nemusíte pamatovat pořadí parametrů:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addButton("Ok", None, row=1, column=0) 
app.addButton("Quit", None, row=1, column=1)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-5.png" class="image-305136" alt="&#160;" width="111" height="92" />
<p><i>Obrázek 6: Screenshot čtvrtého demonstračního příkladu.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Skupina tlačítek vytvořená jedním příkazem</h2>

<p>Poměrně často se setkáme s&nbsp;nutností vložit do okna větší množství
tlačítek umístěných vedle sebe. K&nbsp;tomuto účelu je možné použít metodu
<strong>addButtons()</strong>, které se předá seznam jmen tlačítek a dále
reference na callback funkci, která se má zavolat při stisku jakéhokoli
tlačítka ve skupině. Alternativně lze předat seznam callback funkcí, potom bude
po stisku každého tlačítka zavolána odpovídající callback funkce. Případné
další nepovinné parametry jsou shodné s&nbsp;metodou
<strong>addButton()</strong>:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addButtons(["Ok", "Quit"], None, 1, 0)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-6.png" class="image-305137" alt="&#160;" width="111" height="92" />
<p><i>Obrázek 7: Screenshot pátého demonstračního příkladu.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Naprogramování reakce na stisk tlačítek</h2>

<p>Tlačítka v&nbsp;aplikacích samozřejmě neslouží jen pro potěchu oka; naopak
musí nějakým způsobem reagovat na akce prováděné uživatelem. K&nbsp;tomu slouží
callback funkce, jejichž jméno se zadává při vkládání tlačítek do okna:</p>

<pre>
app.addButton("Ok", onButtonPress)
</pre>

<p>Podobně je možné specifikovat callback funkci pro skupinu tlačítek:</p>

<pre>
app.addButtons(["Ok", "Quit"], onButtonPress, 1, 0)
</pre>

<p>V&nbsp;případě, že dojde ke stisku nějakého tlačítka, je callback funkce
zavolána a do jejího (jediného) parametru se předá text na tlačítku. To
znamená, že pokud je jedna callback funkce použita pro obsluhu většího množství
tlačítek, můžeme na základě předaného parametru rozhodnout, o jaké tlačítko se
jednalo. V&nbsp;následující callback funkci je rozhodování jednoduché:</p>

<pre>
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        app.infoBox("Ok, Ok", "Ok button pressed")
</pre>

<p>Úplný zdrojový kód příkladu, v&nbsp;němž je použita výše popsaná callback
funkce, vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        app.infoBox("Ok, Ok", "Ok button pressed")
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addButtons(["Ok", "Quit"], onButtonPress, 1, 0)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-7.png" class="image-305138" alt="&#160;" width="218" height="211" />
<p><i>Obrázek 8: Screenshot šestého demonstračního příkladu.</i></p>

<p>Ve skutečných aplikacích bývá výhodnější reagovat na stisk každého tlačítka
v&nbsp;samostatné callback funkci:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onQuitButtonPress(buttonName):
    app.stop()
&nbsp;
&nbsp;
def onOkButtonPress(buttonName):
    app.infoBox("Ok, Ok", "Ok button pressed")
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addButtons(["Ok", "Quit"], [onOkButtonPress, onQuitButtonPress], 1, 0)
&nbsp;
app.go()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Nastavení základních atributů widgetů</h2>

<p>U widgetů je možné do jisté míry nastavovat i jejich vzhled. Příkladem mohou
být textová návěští, u nichž lze nastavit jejich pozadí, a to konkrétně metodou
<strong>setLabelBg()</strong>. Prvním parametrem této metody je titulek
návěští, dalším parametrem pak barva. Ta se specifikuje buď jménem nebo hexa
trojicí <strong>#rrggbb</strong>, podobně jako v&nbsp;knihovně Tkinter, na HTML
stránkách či v&nbsp;CSS:</p>

<pre>
app.addLabel("redLabel", "Red")
app.setLabelBg("redLabel", "red")
</pre>

<p>Podívejme se nyní na příklad, v&nbsp;němž je vytvořeno pět návěští, každé
s&nbsp;jinou barvou pozadí:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addLabel("redLabel", "Red")
app.addLabel("orangeLabel", "Orange")
app.addLabel("yellowLabel", "Yellow")
app.addLabel("greenLabel", "Green")
app.addLabel("blueLabel", "Blue")
&nbsp;
app.setLabelBg("redLabel", "red")
app.setLabelBg("orangeLabel", "orange")
app.setLabelBg("yellowLabel", "yellow")
app.setLabelBg("greenLabel", "green")
app.setLabelBg("blueLabel", "blue")
&nbsp;
app.addButton("Quit", onButtonPress)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-8.png" class="image-305139" alt="&#160;" width="95" height="217" />
<p><i>Obrázek 9: Screenshot sedmého demonstračního příkladu.</i></p>

<p>Pokud preferujete použití <a
href="https://en.wikipedia.org/wiki/Web_colors#Hex_triplet">trojice barvových
složen v&nbsp;šestnáctkové soustavě</a>, není nic jednoduššího:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addLabel("redLabel", "Red")
app.addLabel("orangeLabel", "Orange")
app.addLabel("yellowLabel", "Yellow")
app.addLabel("greenLabel", "Green")
app.addLabel("blueLabel", "Blue")
&nbsp;
app.setLabelBg("redLabel", "#ff0000")
app.setLabelBg("orangeLabel", "#ff8000")
app.setLabelBg("yellowLabel", "#ffff00")
app.setLabelBg("greenLabel", "#ff00ff")
app.setLabelBg("blueLabel", "#0000ff")
&nbsp;
app.addButton("Quit", onButtonPress)
&nbsp;
app.go()
</pre>

<p>Lze použít i zkrácený zápis hexa tripletu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addLabel("redLabel", "Red")
app.addLabel("orangeLabel", "Orange")
app.addLabel("yellowLabel", "Yellow")
app.addLabel("greenLabel", "Green")
app.addLabel("blueLabel", "Blue")
&nbsp;
app.setLabelBg("redLabel", "#f00")
app.setLabelBg("orangeLabel", "#f80")
app.setLabelBg("yellowLabel", "#ff0")
app.setLabelBg("greenLabel", "#0f0")
app.setLabelBg("blueLabel", "#00f")
&nbsp;
app.addButton("Quit", onButtonPress)
&nbsp;
app.go()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Ovládací prvek <strong>link</strong></h2>

<p>Widget <strong>Link</strong>, který se do okna přidává s&nbsp;využitím
metody <strong>addLink()</strong>, se svým chováním podobá tlačítkům, protože
taktéž reaguje na kliknutí myší popř.&nbsp;na stisk tlačítka pomocí klávesnice
(přesunutí fokusu + použití mezerníku). Vizuálně ovšem widget
<strong>Link</strong> skutečně připomíná hypertextový odkaz používaný na
webových stránkách, což je ostatně patrné z&nbsp;tohoto příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onLinkClick(link):
    print(link)
    app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addLink("Quit", onLinkClick)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-9.png" class="image-305140" alt="&#160;" width="95" height="82" />
<p><i>Obrázek 10: Okno s&nbsp;odkazem &ndash; widgetem
<strong>Link</strong>.</i></p>

<p>Podívejme se na složitější příklad, který kombinuje odkaz (link)
s&nbsp;textovými návěštími, u nichž se změnila barva pozadí:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onLinkClick(link):
    print(link)
    app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("we")
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addLabel("redLabel", "Red")
app.addLabel("orangeLabel", "Orange")
app.addLabel("yellowLabel", "Yellow")
app.addLabel("greenLabel", "Green")
app.addLabel("blueLabel", "Blue")
&nbsp;
app.setLabelBg("redLabel", "red")
app.setLabelBg("orangeLabel", "orange")
app.setLabelBg("yellowLabel", "yellow")
app.setLabelBg("greenLabel", "green")
app.setLabelBg("blueLabel", "blue")
&nbsp;
app.addLink("Quit", onLinkClick)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-10.png" class="image-305141" alt="&#160;" width="95" height="207" />
<p><i>Obrázek 11: Screenshot osmého demonstračního příkladu.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech osmi dnes popsaných demonstračních příkladů naleznete
pod následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>01_hello_world.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/01_hello_world.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/01_hello_world.py</a></td></tr>
<tr><td>02_buttons.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/02_buttons.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/02_buttons.py</a></td></tr>
<tr><td>03_buttons_set_sticky.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/03_buttons_set_sticky.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/03_buttons_set_sticky.py</a></td></tr>
<tr><td>04_buttons_placement.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/04_buttons_placement.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/04_buttons_placement.py</a></td></tr>
<tr><td>05_buttons_placement_v2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/05_buttons_placement_v2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/05_buttons_placement_v2.py</a></td></tr>
<tr><td>06_buttons_group.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/06_buttons_group.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/06_buttons_group.py</a></td></tr>
<tr><td>07_buttons_event.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/07_buttons_event.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/07_buttons_event.py</a></td></tr>
<tr><td>08_buttons_events.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/08_buttons_events.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/08_buttons_events.py</a></td></tr>
<tr><td>09_attributes.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/09_attributes.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/09_attributes.py</a></td></tr>
<tr><td>10_simple_link.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/10_simple_link.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/10_simple_link.py</a></td></tr>
<tr><td>11_link.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/11_link.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/11_link.py</a></td></tr>
</table>


<p>Poznámka: pro úspěšné spuštění těchto příkladů musíte mít v&nbsp;aktuální
adresáři rozbalenou knihovnu <i>appJar</i>!</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

