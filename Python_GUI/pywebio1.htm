<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>PyWebIO: interaktivní webové dialogy a formuláře naprogramované v čistém Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>PyWebIO: interaktivní webové dialogy a formuláře naprogramované v čistém Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V mnoha situacích potřebuje programátor vytvořit aplikaci s formuláři a dialogy, popř. s grafy, tedy aplikaci s GUI. Pokud používá Python, může využít již popsané knihovny Tkinter, PyObject, PyQt/PySide atd. Alternativně je ovšem možné vytvořit webovou aplikaci, a to čistě v Pythonu: bez HTML, CSS a JavaScriptu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. PyWebIO: interaktivní webové dialogy a formuláře naprogramované v&nbsp;čistém Pythonu</a></p>
<p><a href="#k02">2. Klasické knihovny pro tvorbu GUI: systém událostí popř.&nbsp;signálů+slotů</a></p>
<p><a href="#k03">3. Koncept vstupu a výstupu (I/O) namísto architektury založené na systému událostí</a></p>
<p><a href="#k04">4. Instalace knihovny PyWebIO</a></p>
<p><a href="#k05">5. Zobrazení informací na webové stránce &ndash; modul <strong>pywebio.output</strong></a></p>
<p><a href="#k06">6. Tabulky</a></p>
<p><a href="#k07">7. Informace o probíhajících operacích, zobrazení zprávy</a></p>
<p><a href="#k08">8. Zobrazení fragmentu dokumentu zapsaného v&nbsp;HTML, Markdownu i ve formě zdrojového kódu</a></p>
<p><a href="#k09">9. Animace průběhu výpočtu</a></p>
<p><a href="#k10">10. Animace zobrazená při načítání nebo v&nbsp;průběhu výpočtu</a></p>
<p><a href="#k11">11. Vstupní textové pole</a></p>
<p><a href="#k12">12. Sdružení několika vstupních polí do jediného formuláře</a></p>
<p><a href="#k13">13. Specifikace typu vstupních hodnot, rozlišení povinných a nepovinných hodnot</a></p>
<p><a href="#k14">14. Rádiová tlačítka (přepínače)</a></p>
<p><a href="#k15">15. Výběrové boxy</a></p>
<p><a href="#k16">16. Výběr z&nbsp;několika nabízených variant</a></p>
<p><a href="#k17">17. Posuvník</a></p>
<p><a href="#k18">18. Obsah navazujícího článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. PyWebIO: interaktivní webové dialogy a formuláře naprogramované v&nbsp;čistém Pythonu</h2>

<p>Jak již bylo napsáno v&nbsp;perexu dnešního článku, existují situace, kdy
vývojář potřebuje vytvořit aplikaci s&nbsp;formuláři a dialogy, popř. i
s&nbsp;grafy, tedy aplikaci s&nbsp;grafickým uživatelským rozhraním.
V&nbsp;případě, že používá programovací jazyk Python, je možné pro tento účel
využít již popsané knihovny Tkinter, PyObject, PyQt/PySide atd. (viz též seznam
článků vydaných v&nbsp;rámci seriálu <a
href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">o
grafickém uživatelském rozhraní v&nbsp;Pythonu</a>). Alternativně je ovšem
možné vytvořit lokálně či vzdáleně použitelnou webovou aplikaci, a to čistě
v&nbsp;Pythonu: tedy bez explicitní práce s&nbsp;HTML, CSS a JavaScriptem. Pro
tento účel poměrně dobře poslouží hned několik zajímavých knihoven a
frameworků. My se dnes zaměříme na asi vůbec nejsnadněji použitelnou knihovnu
nazvanou velmi příhodně <i>PyWebIO</i>.</p>

<img src="https://i.iinfo.cz/images/257/pygubu-1.png" class="image-445652" alt="&#160;" width="642" height="537" />
<p><i>Obrázek 1: Obrazovka nástroje Pygubu designer určeného pro návrh
grafického uživatelského rozhraní aplikací vytvářených v&nbsp;Pythonu.
Výsledkem je kód založený na knihovně Tkinter.</i></p>

<p>Na tomto místě se ve stručnosti zmiňme o dvou projektech s&nbsp;podobným
cílem. První z&nbsp;těchto projektů se jmenuje <a
href="https://streamlit.io/">Streamlit</a> a budeme se jím zabývat
v&nbsp;samostatném článku. A druhý podobný projekt se jmenuje <a
href="https://pglet.io/">pglet</a> (ten dokonce podporuje větší množství
programovacích jazyků).</p>

<img src="https://i.iinfo.cz/images/81/pyside12a-6.png" class="image-320586" alt="&#160;" height="327" width="452" />
<p><i>Obrázek 2: Jednoduchá aplikace využívající knihovnu PySide.</i></p>

<p><div class="rs-tip-major">Poznámka: interně se pochopitelně technologie
HTML, CSS a JavaScript ve webové aplikaci musí používat (stejně jako webový
server na straně Pythonu), ovšem programátor se s&nbsp;těmito technologiemi
nemusí (pokud vyloženě nepotřebuje) při použití knihovny <i>PyWebIO</i> setkat.
Veškerá práce s&nbsp;GUI se z&nbsp;pohledu programátora omezuje na několik
funkcí určených pro vstup dat popř.&nbsp;pro jejich výstup.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Klasické knihovny pro tvorbu GUI: systém událostí popř.&nbsp;signálů+slotů</h2>

<p>Většina knihoven určených pro tvorbu grafického uživatelského rozhraní
(v&nbsp;Pythonu) je založena buď na systému událostí nebo na takzvaných
<i>signálech</i> a <i>slotech</i>. V&nbsp;obou případech se na jednu stranu
jedná o velmi flexibilní způsob tvorby GUI, ovšem při tvorbě jednodušších
formulářů a dialogů může být tato flexibilita někdy na obtíž, protože se
architektura aplikace musí (alespoň do jisté míry) přizpůsobit celému konceptu
GUI. Ostatně si to můžeme ukázat na jednoduchém příkladu naprogramovaném
s&nbsp;využitím snad nejsnadněji použitelné &bdquo;klasické&ldquo; knihovny pro
tvorbu GUI. Jedná se o knihovnu nazvanou <i>AppJar</i>:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        app.infoBox("Ok, Ok", "Ok button pressed")
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addButtons(["Ok", "Quit"], onButtonPress, 1, 0)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/498/appjar1-7.png" class="image-305138" alt="&#160;" width="218" height="211" />
<p><i>Obrázek 3: Screenshot jednoduché aplikace představované předchozím
skriptem.</i></p>

<p>V&nbsp;knihovně <i>PySide</i> naproti tomu může každý ovládací prvek
(widget) generovat signály, a to konkrétně v&nbsp;případě vzniku nějaké
události (tou může být například stisk tlačítka, změna pozice posuvníku, změna
velikosti okna atd.) nebo změny stavu widgetu. Signály mohou být napojené na
takzvané <i>sloty</i>, což je pojmenování pro funkce, které mohou reagovat na
příchozí signál. V&nbsp;knihovně Qt, nad níž je PySide postaven, jsou signály
zpracovávány nativními funkcemi, PySide ovšem celý koncept signálů a slotů
dokáže &bdquo;obalit&ldquo; takovým způsobem, že sloty jsou běžnými
Pythonovskými funkcemi či metodami. Musíme však explicitně specifikovat
propojení mezi signálem (resp.&nbsp;jeho typem) a slotem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># callback funkce</i>
def <strong>closeApplication</strong>():
    print("Closing...")
    sys.exit(0)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        self.resize(320, 240)
        self.setWindowTitle("Quit Button")
&nbsp;
        <i># tlačítko</i>
        button = QtGui.QPushButton("Quit", self)
        button.resize(button.sizeHint())
        button.setToolTip("Immediately quit this application")
&nbsp;
        <i># navázání akce na signál</i>
        <strong>button.clicked.connect(closeApplication)</strong>
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<img src="https://i.iinfo.cz/images/488/pyside2-1.png" class="image-313946" alt="&#160;" height="267" width="322" />
<p><i>Obrázek 4: Tlačítko umístěné v&nbsp;oknu předchozího příkladu.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Koncept vstupu a výstupu (I/O) namísto architektury založené na systému událostí</h2>

<p>Knihovna <i>PyWebIO</i> je navržena takovým způsobem, aby vývojáře v&nbsp;co
největší míře odstínila od nutnosti &bdquo;otočení&ldquo; logiky aplikace, a to
jen proto, aby v&nbsp;ní bylo bylo možné použít grafické uživatelské rozhraní.
Autoři se naopak snažili o to, aby byla v&nbsp;programovém kódu zachována
původní logika typu &bdquo;dotaz na údaje zadávané uživatelem&ldquo; &rarr;
&bdquo;výpočet a odpověď vypsaná uživateli&ldquo;. Jedná se o koncept, na němž
je postavena klasická příkazová řádka a částečně i nástroje typu
&bdquo;diář&ldquo;, tedy například <i>Jupyter Notebook</i>.</p>

<p>Podívejme se nyní na triviální skript napsaný v&nbsp;Pythonu, po jehož
spuštění se počítač uživatele (postupně) zeptá na zadání vstupních hodnot. Na
základě těchto hodnot je proveden výpočet a výsledek je zobrazen do terminálu.
Povšimněte si, že počítač v&nbsp;tomto případě vede s&nbsp;uživatelem dialog,
jenž je řízený skriptem. Jedná se skutečně o triviální příklad, v&nbsp;němž
nemá uživatel žádnou možnost dalšího ovlivnění výpočtu (na rozdíl od většiny
aplikací ovládaných z&nbsp;příkazového řádku, kde je naopak většinou vše řízeno
uživatelem):</p>

<pre>
<i># Body Mass Index calculator</i>
&nbsp;
print("Mass (kg): ")
mass = int(input())
&nbsp;
print("Height (cm): ")
height = int(input())
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
print("BMI = ", bmi)
</pre>

<a href="https://www.root.cz/obrazek/570454/"><img src="https://i.iinfo.cz/images/625/pywebio-1-1-prev.png" class="image-570454" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="241" /></a>
<p><i>Obrázek 5: Dialog počítače s&nbsp;uživatelem.</i></p>

<p>Tento příklad lze snadno převést do formy využívající knihovnu
<i>PyWebIO</i>. V&nbsp;případě, že vynecháme příkaz <strong>import</strong>
(ten je zde ovšem nezbytný), spočívá celý přepis skriptu pouze v&nbsp;náhradě
funkce <strong>print</strong> za funkci <strong>put_text</strong>. Žádné další
úpravy nejsou nutné &ndash; a přece je výsledkem interaktivní &bdquo;webová
aplikace&ldquo;(!):</p>

<pre>
<i># Body Mass Index calculator</i>
&nbsp;
put_text("Mass (kg): ")
mass = int(input())
&nbsp;
put_text("Height (cm): ")
height = int(input())
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
put_text("BMI = ", bmi)
</pre>

<a href="https://www.root.cz/obrazek/570455/"><img src="https://i.iinfo.cz/images/625/pywebio-1-2-prev.png" class="image-570455" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="83" /></a>
<p><i>Obrázek 6: Webové rozhraní skriptu se zobrazeným textem.</i></p>

<p>Na základě této ukázky by se mohlo zdát, že <i>PyWebIO</i> pouze umožňuje
změnit způsob chování interaktivního vstupu (funkce <strong>input</strong>) a
výstupu (funkce <strong>print</strong>), zatímco samotný skript nebude mít
možnost žádným dalším způsobem ovlivnit vzhled webové aplikace například během
výpočtu. Ovšem ve skutečnosti jsou možnosti <i>PyWebIO</i> širší, což naznačuje
následující skript, jenž zobrazí &bdquo;teploměr&ldquo; (tedy neinteraktivní
prvek uživatelského rozhraní), jehož hodnota postupně roste on 0 do 100%
(v&nbsp;tomto konkrétním případě jsou výpočty simulovány funkcí
<strong>time.sleep</strong> &ndash; tu by však pochopitelně bylo možné nahradit
reálným kódem):</p>

<pre>
put_processbar('bar');
&nbsp;
for i in range(1, 11):
    set_processbar('bar', i / 10)
    time.sleep(0.1)
</pre>

<p><div class="rs-tip-major">Poznámka: podobně je koncipovaný i projekt
<i>Zenity</i>, což je nástroj volatelný z&nbsp;příkazové řádky. Tomuto nástroji
se předají informace o tom, jaké ovládací prvky má zobrazit a popř.&nbsp;i
výchozí data v&nbsp;těchto prvcích. Následně se zobrazí dialog, čeká se na akci
uživatele a následně Zenity vrátí výsledek. Zenity však není jediný nástroj
tohoto typu. Existuje například i nástroj <i>Dialog</i>, i když způsob
zobrazení formulářů a dialogů je realizován s&nbsp;využitím odlišných
technologií.</div></p>

<p>Na tomto místě je dobré upozornit na fakt, že je zřejmé, že koncept založený
na prostém vstupu a výstupu není dostatečně obecný, aby se s&nbsp;jeho využitím
mohly tvořit i aplikace se složitěji pojatým ovládáním (například webové hry
nebo plně interaktivní aplikace typu Google Doc). Ovšem až překvapivé množství
webových aplikací se skutečně skládá ze sady formulářů a dialogů. Příkladem
jsou servery typu Root.cz s&nbsp;možností zadání jednoduché ankety, ale
například i webová aplikace určená pro vyplňování daňových přiznání. PyWebIO je
navíc určeno nikoli pouze pro tvorbu výše zmíněných
&bdquo;plnohodnotných&ldquo; webových aplikací, ale je například oblíben
vývojáři z&nbsp;oblasti strojového učení (<i>machine learning</i>), kde je
mnohdy potřeba zadat vstupní parametry a následně například vykreslit výsledek
analýz či výpočtů (navíc mohou být odborníci na strojové učení odstíněni od
&bdquo;pohyblivých cílů&ldquo; typu Angular/React/Vue atd.).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace knihovny PyWebIO</h2>

<p>Knihovna <i>PyWebIO</i> je nabízena přes <a
href="https://pypi.org/project/pywebio">PyPi</a>, takže její instalace by měla
být jednoduchá a přímočará. Knihovnu nainstalujeme pro aktuálně přihlášeného
uživatele:</p>

<pre>
$ <strong>pip3 install --user pywebio</strong>
&nbsp;
Collecting pywebio
  Downloading pywebio-1.5.2.tar.gz (450 kB)
     |████████████████████████████████| 450 kB 953 kB/s            
  Preparing metadata (setup.py) ... done
Collecting tornado&gt;=5.0
  Downloading tornado-6.1-cp38-cp38-manylinux2010_x86_64.whl (427 kB)
     |████████████████████████████████| 427 kB 1.6 MB/s            
Collecting user-agents
  Downloading user_agents-2.2.0-py3-none-any.whl (9.6 kB)
Collecting ua-parser&gt;=0.10.0
  Downloading ua_parser-0.10.0-py2.py3-none-any.whl (35 kB)
Building wheels for collected packages: pywebio
  Building wheel for pywebio (setup.py) ... done
  Created wheel for pywebio: filename=pywebio-1.5.2-py3-none-any.whl size=459628 sha256=3a86f8dfcb5992e4f1cd5c76cede3aceecaf25d07edde9f57848824cb6500c0c
  Stored in directory: /home/ptisnovs/.cache/pip/wheels/e7/dc/43/f395fa089831aeb5fa3eb3c577ec3ea53636b45fb03a32c301
Successfully built pywebio
Installing collected packages: ua-parser, user-agents, tornado, pywebio
Successfully installed pywebio-1.5.2 tornado-6.1 ua-parser-0.10.0 user-agents-2.2.0
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se kromě vlastní
knihovny <i>PyWebIO</i> nainstalovaly i další balíčky, zejména balíček
<i>Tornado</i>, k&nbsp;jehož významu se ještě dostaneme.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Zobrazení informací na webové stránce &ndash; modul <strong>pywebio.output</strong></h2>

<p>Knihovna <i>PyWebIO</i> je rozdělena do několika balíčků (modulů). Nejprve
se seznámíme se základními vlastnostmi balíčku nazvaného
<strong>pywebio.output</strong>. Jak již název tohoto balíčku naznačuje, je
určen pro zajištění výstupu informací přes webové rozhraní (tedy přes dynamicky
generovanou a postupně aktualizovanou webovou stránku). Nejjednodušší je výstup
(zobrazení) textu, což je realizováno funkcí nazvanou
<strong>put_text</strong>. V&nbsp;nejjednodušší podobě může textový výstup
vypadat následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
<strong>out.put_text("Hello world!")</strong>
</pre>

<p>Po spuštění tohoto skriptu by se mělo otevřít okno s&nbsp;webovým
prohlížečem popř. (pokud je již prohlížeč spuštěn) by se měl otevřít nový tab,
jenž bude obsahovat pouze zprávu zobrazenou uživateli:</p>

<img src="https://i.iinfo.cz/images/625/pywebio-1-3.png" class="image-570456" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="211" height="126" />
<p><i>Obrázek 7: Webové rozhraní skriptu se zobrazeným textem.</i></p>

<p><div class="rs-tip-major">Poznámka: je dobré si uvědomit, kolik operací
vlastně muselo proběhnout na pozadí. Musel se například spustit webový server,
nějakým způsobem zajistit otevření okna (či tabu) prohlížeče, poslat prohlížeči
kostru aplikace a následně zajistit komunikaci mezi backendem a frontendem
&ndash; tato komunikace je oboustranná a probíhá prakticky neustále (implicitně
jsou použity Web Sockety). Skript tak dokáže například zareagovat i na situaci,
kdy je okno/tab prohlížeče uzavřeno:</div></p>

<pre>
Traceback (most recent call last):
  File "13_input.py", line 11, in &lt;module&gt;
    mass = int(inp.input())
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/input.py", line 257, in input
    return single_input(item_spec, valid_func, preprocess_func, onchange_func)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/session/__init__.py", line 283, in inner
    return run_as_function(gen)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/utils.py", line 296, in run_as_function
    res = gen.send(res)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/io_ctrl.py", line 260, in single_input
    data = yield input_control(spec=spec,
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/session/__init__.py", line 283, in inner
    return run_as_function(gen)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/utils.py", line 296, in run_as_function
    res = gen.send(res)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/io_ctrl.py", line 280, in input_control
    data = yield input_event_handle(item_valid_funcs, form_valid_funcs, preprocess_funcs, onchange_funcs)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/session/__init__.py", line 283, in inner
    return run_as_function(gen)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/utils.py", line 296, in run_as_function
    res = gen.send(res)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/io_ctrl.py", line 334, in input_event_handle
    event = yield next_client_event()
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/session/__init__.py", line 283, in inner
    return run_as_function(gen)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/utils.py", line 296, in run_as_function
    res = gen.send(res)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/session/__init__.py", line 290, in next_client_event
    res = yield get_current_session().next_client_event()
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pywebio/session/threadbased.py", line 138, in next_client_event
    raise SessionClosedException
pywebio.exceptions.SessionClosedException
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Tabulky</h2>

<p>Velmi často je nutné vhodnou formou zobrazit výsledek nějakého výpočtu či
simulace, přičemž tento výsledek má tabulární podobu (typicky se jedná o 2D
tabulku). Knihovna <i>PyWebIO</i> pochopitelně podporuje i zobrazení
tabulárních dat. Taková data mohou být v&nbsp;programovacím jazyce Python
reprezentována například jako seznam seznamů, seznam n-tic, jako vnořené n-tice
atd. Zobrazení obsahu těchto datových struktur na dynamicky vytvářené a
aktualizované webové stránce je triviální &ndash; viz též zdrojový kód dnešního
druhého demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
<strong>out.put_table</strong>([
    ['Language', 'Ratings'],
    ['C', '15.95'],
    ['Java', '13.48'],
    ['Python', '10.47'],
    ['C++', '7.11'],
    ['C#', '4.58'],
    ['Visual Basic', '4.12'],
    ['JavaScript', '2.54'],
    ['PHP', '2.49'],
    ['R', '2.37'],
    ['SQL', '1.76'],
    ['Go', '1.46'],
    ['Swift', '1.38'],
    ['Perl', '1.30'],
    ['Assembly language', '1.30'],
    ['Ruby', '1.24'],
    ['MATLAB', '1.10'],
    ['Groovy', '0.99'],
    ['Rust', '0.92'],
    ['Objective-C', '0.85'],
    ['Dart', '0.77'],
])
</pre>

<a href="https://www.root.cz/obrazek/570457/"><img src="https://i.iinfo.cz/images/625/pywebio-1-4-prev.png" class="image-570457" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="120" height="270" /></a>
<p><i>Obrázek 8: Webové rozhraní skriptu se zobrazenou tabulkou.</i></p>

<p>Namísto statických dat použitých v&nbsp;předchozím příkladu je pochopitelně
možné zobrazit i výsledek nějakého výpočtu, což je ukázáno v&nbsp;dalším
skriptu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
values = [(x, 1.0/x) for x in range(1, 20)]
&nbsp;
<strong>out.put_table(values)</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto případě je výsledek výpočtu
uložen ve formě seznamu n-tic.</div></p>

<a href="https://www.root.cz/obrazek/570458/"><img src="https://i.iinfo.cz/images/625/pywebio-1-5-prev.png" class="image-570458" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="116" height="270" /></a>
<p><i>Obrázek 9: Webové rozhraní skriptu se zobrazenou tabulkou.</i></p>

<p>Data v&nbsp;tabulce lze v&nbsp;případě potřeby i naformátovat:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
values = [(x, "{:5.3f}".format(1.0/x)) for x in range(1, 20)]
&nbsp;
<strong>out.put_table(values)</strong>
</pre>

<a href="https://www.root.cz/obrazek/570459/"><img src="https://i.iinfo.cz/images/625/pywebio-1-6-prev.png" class="image-570459" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="56" height="270" /></a>
<p><i>Obrázek 10: Webové rozhraní skriptu se zobrazenou tabulkou.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Informace o probíhajících operacích, zobrazení zprávy</h2>

<p>Mezi další pasivní ovládací prvky, které lze na webové stránce použít, jsou
prvky, které uživatele vizuálně informují o probíhající operaci (například o
výpočtu, načítání dat atd.). U těchto prvků je možné volit jednu z&nbsp;osmi
logických jmen barev:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
for color in ('primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'):
    <strong>out.put_text(color, color)</strong>
    <strong>out.put_loading(shape='border', color=color)</strong>
</pre>

<a href="https://www.root.cz/obrazek/570460/"><img src="https://i.iinfo.cz/images/625/pywebio-1-7-prev.png" class="image-570460" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="78" height="270" /></a>
<p><i>Obrázek 11: Webové rozhraní skriptu s&nbsp;osmi zobrazenými prvky
s&nbsp;informací o probíhající (prozatím nedokončené) operaci.</i></p>

<p>V&nbsp;mnoha případech je nutné zobrazit uživateli zprávu s&nbsp;určitým
významem (sémantikou). V&nbsp;knihovně <i>PyWebIO</i> lze vypsat informační
zprávy, dále zprávu o úspěšně dokončené operaci, zprávu s&nbsp;varováním i
zprávu o chybě. Výpis těchto zpráv je stejně snadný jako výpis běžného textu
&ndash; liší se jen jméno použité funkce:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
out.put_info("Info message")
out.put_success("Success message")
out.put_warning("Warning message")
out.put_error("Error message")
</pre>

<a href="https://www.root.cz/obrazek/570461/"><img src="https://i.iinfo.cz/images/625/pywebio-1-8-prev.png" class="image-570461" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="126" /></a>
<p><i>Obrázek 12: Čtyři typy zpráv podporovaných knihovnou PyWebIO.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zobrazení fragmentu dokumentu zapsaného v&nbsp;HTML, Markdownu i ve formě zdrojového kódu</h2>

<p>Část údajů zobrazená ve webové aplikaci může být zapsána přímo v&nbsp;HTML
(například se může jednat o část vytvořenou nějakým šablonovacím systémem). Pro
zobrazení fragmentu HTML se používá výstupní funkce
<strong>put_html</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
html = """
&lt;h1&gt;Header&lt;/h1&gt;
&nbsp;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td style='background:#ff8080'&gt;Cell&lt;/td&gt;
    &lt;td style='background:#ffff80'&gt;Cell&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
"""
&nbsp;
out.put_html(html)
</pre>

<img src="https://i.iinfo.cz/images/625/pywebio-1-9.png" class="image-570462" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="201" height="184" />
<p><i>Obrázek 13: Fragment HTML zobrazený ve webové aplikaci.</i></p>

<p>Stejně snadno lze zobrazit dokument napsaný v&nbsp;Markdownu. Namísto funkce
<strong>put_html</strong> se v&nbsp;tomto případě použije funkce nazvaná
<strong>put_markdown</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
markdown = '''
Markdown rendering
==================
&nbsp;
Lorem ipsum
-----------
&nbsp;
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
'''
&nbsp;
<strong>out.put_markdown(markdown)</strong>
</pre>

<a href="https://www.root.cz/obrazek/570463/"><img src="https://i.iinfo.cz/images/625/pywebio-1-10-prev.png" class="image-570463" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="179" /></a>
<p><i>Obrázek 14: Dokument zapsaný v&nbsp;Markdownu zobrazený ve webové
aplikaci.</i></p>

<p>A konečně je možné ve webové aplikaci zobrazit zdrojový kód s&nbsp;obarvenou
syntaxí. Pro tento účel se používá funkce <strong>put_code</strong>, které se
předává i jméno jazyka, v&nbsp;němž jsou zdrojové kódy zapsány:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
code = """
<i># Body Mass Index calculator</i>
&nbsp;
print("Mass (kg): ")
mass = int(input())
&nbsp;
print("Height (cm): ")
height = int(input())
&nbsp;
<i># předod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
print("BMI = ", bmi)
"""
&nbsp;
<strong>out.put_code(code, language="python", rows=15)</strong>
&nbsp;
code2 = r"""
package main
&nbsp;
import "fmt"
&nbsp;
// I represents a new interface type (in this case empty interface)
type I interface{}
&nbsp;
// T represents an user-defined data type
type T struct{}
&nbsp;
func main() {
        var t *T
        if t == nil {
                fmt.Println("t is nil")
        } else {
                fmt.Println("t is not nil")
        }
        var i I = t
        if i == nil {
                fmt.Println("i is nil")
        } else {
                fmt.Println("i is not nil")
        }

}
"""
&nbsp;
<strong>out.put_code(code2, language="go", rows=15)</strong>
</pre>

<a href="https://www.root.cz/obrazek/570464/"><img src="https://i.iinfo.cz/images/625/pywebio-1-11-prev.png" class="image-570464" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="258" /></a>
<p><i>Obrázek 15: Dva zdrojové kódy zobrazené ve webové aplikaci.</i></p>

<p><div class="rs-tip-major">Poznámka: k&nbsp;zobrazení zdrojového kódu se
ještě vrátíme v&nbsp;navazujícím článku. Knihovna <i>PyWebIO</i> totiž obsahuje
i poměrně sofistikovaný textový editor, což je interně textové pole na webové
stránce, které ovšem kromě dalších možností nabízí i zvýraznění syntaxe
zdrojových kódů či konfiguračních souborů.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Animace průběhu výpočtu</h2>

<p>Se způsobem zobrazení animace ve chvíli, kdy se načítají data nebo se
provádí výpočet, jsme se již setkali, takže si jen v&nbsp;krátkosti připomeňme,
že pro tento účel se používá ovládací prvek <i>process bar</i>, jehož aktuální
hodnotu v&nbsp;rozsahu 0 až 1 je možné programově měnit. V&nbsp;případě potřeby
je možné využít i větší množství těchto ovládacích prvků (například pro
zobrazení průběhu dílčích operací):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
import time
&nbsp;
&nbsp;
<strong>out.put_processbar('bar');</strong>
&nbsp;
for i in range(1, 11):
    <strong>out.set_processbar('bar', i / 10)</strong>
    time.sleep(0.1)
</pre>

<a href="https://www.root.cz/obrazek/570465/"><img src="https://i.iinfo.cz/images/625/pywebio-1-12-prev.png" class="image-570465" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="21" /></a>
<p><i>Obrázek 16: Animace průběhu výpočtu.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Animace zobrazená při načítání nebo v&nbsp;průběhu výpočtu</h2>

<p>V&nbsp;případě, že není zřejmé, jak dlouho má nějaká operace trvat (a tedy
není možné použít <i>processbar</i>), lze využít ovládací prvek nazvaný
<i>loading</i>, který na ploše webové aplikace zobrazí animaci oznamující, že
probíhá nějaká operace. Po dokončení této operace se v&nbsp;aktuálním
<i>kontextu</i> pouze vypíše informace o dokončení (či jakákoli další data),
jak je ukázáno v&nbsp;následujícím příkladu (s&nbsp;kontextem lze
v&nbsp;Pythonu nejsnáze pracovat s&nbsp;využitím bloku
<strong>with</strong>):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
import time
&nbsp;
&nbsp;
with <strong>out.put_loading(shape='border', color='primary')</strong>:
    time.sleep(5)
    out.put_text("Done")
</pre>

<img src="https://i.iinfo.cz/images/625/pywebio-1-13.png" class="image-570466" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="196" height="174" />
<p><i>Obrázek 17: Jeden snímek animace zobrazené při načítání nebo
v&nbsp;průběhu výpočtu.</i></p>

<p>Podporovány jsou i sémantické názvy barev:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
import time
&nbsp;
&nbsp;
i = 0
&nbsp;
for color in ('primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'):
    with <strong>out.put_loading(shape='border', color=color)</strong>:
        time.sleep(1)
        out.put_text(i)
        i += 1
&nbsp;
out.put_text("Done")
</pre>

<img src="https://i.iinfo.cz/images/625/pywebio-1-14.png" class="image-570467" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="203" height="403" />
<p><i>Obrázek 18: Specifikace barvy prvku.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vstupní textové pole</h2>

<p>Pro vstup textových popř.&nbsp;pouze číselných údajů slouží vstupní textové
pole, které se zobrazuje funkcí s&nbsp;plným jménem
<strong>pywebio.input.input</strong>. V&nbsp;případě, že je tato funkce
zavolána, zobrazí se na webové stránce vstupní pole a teprve po zadání a
potvrzení údajů bude program pokračovat dalším zapsaným příkazem. Přepis
původní aplikace určené pro ovládání z&nbsp;terminálu do &bdquo;webové
podoby&ldquo; může vypadat následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># Body Mass Index calculator</i>
&nbsp;
out.put_text("Mass (kg): ")
mass = int(<strong>inp.input()</strong>)
&nbsp;
out.put_text("Height (cm): ")
height = int(<strong>inp.input()</strong>)
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
out.put_info("BMI = ", bmi)
</pre>

<a href="https://www.root.cz/obrazek/570468/"><img src="https://i.iinfo.cz/images/625/pywebio-1-15-prev.png" class="image-570468" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="98" /></a>
<p><i>Obrázek 19: Vstupní textové pole zobrazené ve webové aplikaci.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Sdružení několika vstupních polí do jediného formuláře</h2>

<p>Velmi často se setkáme s&nbsp;požadavkem na zadání většího množství údajů do
několika vstupních polí. S&nbsp;využitím funkce
<strong>pywebio.input.input_group</strong> je možné sdružit libovolné množství
vstupních prvků, tedy i textových polí, a zobrazit je společně. Po zápisu a
potvrzení údajů se vrátí <i>slovník</i>, jehož klíče jsou specifikovány při
tvorbě vstupních polí parametrem <strong>name</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># Body Mass Index calculator</i>
&nbsp;
info = <strong>inp.input_group("Entry",[</strong>
  <strong>inp.input("Mass (kg)", name="mass"),</strong>
  <strong>inp.input("Height (cm)", name="height")</strong>
<strong>])</strong>
&nbsp;
mass = float(info["mass"])
height = float(info["height"])
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
out.put_info("BMI = ", bmi)
</pre>

<p>Výsledkem by měl být následující formulář:</p>

<a href="https://www.root.cz/obrazek/570469/"><img src="https://i.iinfo.cz/images/625/pywebio-1-16-prev.png" class="image-570469" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="124" /></a>
<p><i>Obrázek 20: Dvojice vstupních polí sdružená do jediného
formuláře.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Specifikace typu vstupních hodnot, rozlišení povinných a nepovinných hodnot</h2>

<p>Mnohá vstupní pole mají akceptovat pouze omezenou množinu znaků
popř.&nbsp;zadávaných hodnot. Příkladem může být náš skript, který po uživateli
vyžaduje zápis hmotnosti a výšky. V&nbsp;obou případech se jedná o číselné
údaje, takže má smysl omezit množinu znaků a jejich kombinací, které může
uživatel v&nbsp;těchto dvou vstupních polích použít. Konkrétně je možné u
vstupních polí specifikovat, že lze povolit pouze zadání čísel, a to
s&nbsp;využitím nepovinného parametru <strong>type</strong> (viz zvýrazněnou
část zdrojového kódu):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># Body Mass Index calculator</i>
&nbsp;
info = inp.input_group("Entry",[
  inp.input("Mass (kg)", name="mass", <strong>type=inp.NUMBER</strong>),
  inp.input("Height (cm)", name="height", <strong>type=inp.NUMBER</strong>)
])
&nbsp;
mass = info["mass"]
height = info["height"]
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
out.put_info("BMI = ", bmi)
</pre>

<a href="https://www.root.cz/obrazek/570470/"><img src="https://i.iinfo.cz/images/625/pywebio-1-17-prev.png" class="image-570470" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="122" /></a>
<p><i>Obrázek 21: Vstupní pole pro vstup číselných údajů.</i></p>

<p>Dále je velmi vhodné specifikovat, které vstupní hodnoty se musí vyplnit a
které hodnoty jsou naopak nepovinné. K&nbsp;zadání této informace slouží
nepovinný parametr <strong>required</strong>. Opět se podívejte na zvýrazněnou
část zdrojového kódu, v&nbsp;níž je tento parametr použit:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># Body Mass Index calculator</i>
&nbsp;
info = inp.input_group("Entry",[
  inp.input("Mass (kg)", name="mass", type=inp.NUMBER, <strong>required=True</strong>),
  inp.input("Height (cm)", name="height", type=inp.NUMBER, <strong>required=True</strong>)
])
&nbsp;
mass = info["mass"]
height = info["height"]
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
out.put_info("BMI = ", bmi)
</pre>

<a href="https://www.root.cz/obrazek/570471/"><img src="https://i.iinfo.cz/images/625/pywebio-1-18-prev.png" class="image-570471" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="123" /></a>
<p><i>Obrázek 22: Vstupní pole, které je nutné vyplnit.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Rádiová tlačítka (přepínače)</h2>

<p>Dalším velmi často používaným ovládacím prvkem (přesněji řečeno
specializovanou variantou tlačítka) je takzvaný <strong>Radiobutton</strong>
(přepínač). Tento typ widgetu se od klasických tlačítek
(<strong>Button</strong>) odlišuje především tím, že je používán ve větších
skupinách. Z&nbsp;každé skupiny přitom může být vybrán (nastaven) pouze jeden
přepínač, od čehož je ostatně odvozen původní anglický název tohoto ovládacího
prvku, protože připomíná <a
href="https://en.wikipedia.org/wiki/Radio_button#Etymology">přepínač kanálů na
starších rádiích</a>. Rádiová tlačítka jsou podporována i knihovnou
<i>PyWebIO</i>, o čemž se ostatně můžeme velmi snadno přesvědčit spuštěním
následujícího skriptu. Měl by se zobrazit jednoduchý formulář s&nbsp;třemi
nabídkami a taktéž s&nbsp;tlačítky <strong>Submit</strong> a
<strong>Reset</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
answer = <strong>inp.radio(label="test", options=["varianta 1", "varianta 2", "varianta 3"])</strong>
&nbsp;
out.put_info("Odpověď")
out.put_text(answer)
</pre>

<a href="https://www.root.cz/obrazek/570472/"><img src="https://i.iinfo.cz/images/625/pywebio-1-19-prev.png" class="image-570472" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="91" /></a>
<p><i>Obrázek 23: Přepínače zobrazené ve webové aplikaci.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Výběrové boxy</h2>

<p>Dalším typem grafického ovládacího prvku (widgetu) je takzvaný
<strong>checkbutton</strong>, dnes poněkud nepřesně nazývaný <i>checkbox</i>.
Od obyčejného tlačítka se tento widget liší především tím, že je vizuálně
patrný jeho stav &ndash; nastaveno/nenastaveno. Tento typ tlačítek je
zobrazován různým způsobem, typicky se však jedná o čtvereček, který je buď
zatržený (znak &check; či &times;) nebo prázdný; v&nbsp;některých GUI
prostředích se však stav tlačítka reprezentuje pouze jeho barvou.
V&nbsp;nejjednodušším případě se přepínací tlačítko vytvoří následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
answer = <strong>inp.checkbox(label="test", options=["varianta 1", "varianta 2", "varianta 3"])</strong>
&nbsp;
out.put_info("Odpověď")
out.put_text(answer)
</pre>

<a href="https://www.root.cz/obrazek/570473/"><img src="https://i.iinfo.cz/images/625/pywebio-1-20-prev.png" class="image-570473" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="91" /></a>
<p><i>Obrázek 24: Výběrové boxy zobrazené ve webové aplikaci.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Výběr z&nbsp;několika nabízených variant</h2>

<p>Výběr akce či odpovědi z&nbsp;několika předem známých variant lze realizovat
i odlišným způsobem &ndash; použitím ovládacího prvku <strong>actions</strong>.
Ve skutečnosti se v&nbsp;tomto případě zobrazí několik tlačítek, z&nbsp;nichž
je (logicky) možné vybrat pouze jediné. Tlačítka se funkci
<strong>actions</strong> předávají v&nbsp;pojmenovaném parametru
<strong>buttons</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
answer = <strong>inp.actions(label="test", buttons=["varianta 1", "varianta 2", "varianta 3"])</strong>
&nbsp;
out.put_info("Odpověď")
out.put_text(answer)
</pre>

<a href="https://www.root.cz/obrazek/570474/"><img src="https://i.iinfo.cz/images/625/pywebio-1-21-prev.png" class="image-570474" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="59" /></a>
<p><i>Obrázek 25: Výběrová tlačítka zobrazené ve webové aplikaci.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Posuvník</h2>

<p>Poslední ovládací prvek, který si dnes popíšeme, se nazývá <i>slider</i>,
ovšem v&nbsp;jiných knihovnách se například setkáme i s&nbsp;označením
<i>slider</i>. Jedná se o interaktivní ovládací prvek, který uživateli umožňuje
výběr hodnoty v&nbsp;zadaném rozsahu (a popř.&nbsp;i se specifikovaným krokem).
Výchozí hodnota posuvníku se nastavuje parametrem <strong>value</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
weight = <strong>inp.slider(label="Váha", value=75, min_value=30, max_value=150)</strong>
&nbsp;
out.put_info("Váha")
out.put_text(weight)
</pre>

<a href="https://www.root.cz/obrazek/570475/"><img src="https://i.iinfo.cz/images/625/pywebio-1-22-prev.png" class="image-570475" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="72" /></a>
<p><i>Obrázek 26: Posuvník zobrazený ve webové aplikaci.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah navazujícího článku</h2>

<p>V&nbsp;navazujícím článku se zaměříme především na způsoby deklarace
složitějších formulářů s&nbsp;větším množstvím vstupních prvků, dále se správou
sezení (<i>session</i>) a taktéž na použití různých forem výstupů. Knihovnu
<i>PyWebIO</i> je totiž možné v&nbsp;případě potřeby použít společně
s&nbsp;dalšími knihovnami. Například lze relativně jednoduše realizovat
vykreslení grafů do dynamicky generované webové stránky. Pro tento účel lze
využít například knihovnu <a
href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">Matplotlib</a>,
ale taktéž knihovny <i>Bokeh</i>, <i>pyecharts</i>, <i>plotly</i>,
<i>pyg2plot</i> či <i>cutecharts.py</i>.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_basic_output.py</td><td>zobrazení běžného textu ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/01_basic_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/01_basic_output.py</a></td></tr>
<tr><td> 2</td><td>02_table.py</td><td>zobrazení tabulky ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/02_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/02_table.py</a></td></tr>
<tr><td> 3</td><td>03_table.py</td><td>programová příprava tabulky zobrazené ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/03_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/03_table.py</a></td></tr>
<tr><td> 4</td><td>04_table.py</td><td>programová příprava tabulky zobrazené ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/04_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/04_table.py</a></td></tr>
<tr><td> 5</td><td>05_color.py</td><td>podpora pro symbolické názvy barev</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/05_color.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/05_color.py</a></td></tr>
<tr><td> 6</td><td>06_message.py</td><td>výpis ostylovaných zpráv do webové stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/06_message.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/06_message.py</a></td></tr>
<tr><td> 7</td><td>07_put_html.py</td><td>podpora pro výstup HTML kódu z&nbsp;PyWebIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/07_put_html.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/07_put_html.py</a></td></tr>
<tr><td> 8</td><td>08_put_markdown.py</td><td>výpis textu (dokumentu) napsaného ve značkovacím jazyku Markdown</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/08_put_markdown.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/08_put_markdown.py</a></td></tr>
<tr><td> 9</td><td>09_put_code.py</td><td>výpis zdrojového kódu se zvýrazněním syntaxe</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/09_put_code.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/09_put_code.py</a></td></tr>
<tr><td>10</td><td>10_progress_bar.py</td><td>animované zobrazení průběhu operace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/10_progress_bar.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/10_progress_bar.py</a></td></tr>
<tr><td>11</td><td>11_loading.py</td><td>informace o výpočtu či načítání stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/11_loading.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/11_loading.py</a></td></tr>
<tr><td>12</td><td>12_loading.py</td><td>informace o výpočtu či načítání stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/12_loading.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/12_loading.py</a></td></tr>
<tr><td>13</td><td>13_input.py</td><td>vstupní textové pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/13_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/13_input.py</a></td></tr>
<tr><td>14</td><td>14_input.py</td><td>vylepšená vstupní textová pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/14_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/14_input.py</a></td></tr>
<tr><td>15</td><td>15_input_numbers.py</td><td>kontrola korektnosti numerických údajů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/15_input_numbers.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/15_input_numbers.py</a></td></tr>
<tr><td>16</td><td>16_input_numbers_required.py</td><td>povinné vstupní parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/16_input_numbers_required.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/16_input_numbers_required.py</a></td></tr>
<tr><td>17</td><td>17_radio.py</td><td>přepínače</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/17_radio.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/17_radio.py</a></td></tr>
<tr><td>18</td><td>18_checkbox.py</td><td>výběrové boxy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/18_checkbox.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/18_checkbox.py</a></td></tr>
<tr><td>19</td><td>19_actions.py</td><td>skupina akcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/19_actions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/19_actions.py</a></td></tr>
<tr><td>20</td><td>20_slider.py</td><td>interaktivní posuvník</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/20_slider.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/20_slider.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Low code Python web framework<br />
<a href="https://www.pyweb.io/">https://www.pyweb.io/</a>
</li>

<li>Repositář projektu<br />
<a href="https://github.com/pywebio/PyWebIO/">https://github.com/pywebio/PyWebIO/</a>
</li>

<li>Getting Started<br />
<a href="https://www.pyweb.io/tutorial.html">https://www.pyweb.io/tutorial.html</a>
</li>

<li>Dokumentace<br />
<a href="https://pywebio.readthedocs.io/en/latest/">https://pywebio.readthedocs.io/en/latest/</a>
</li>

<li>Why PyWebIO?<br />
<a href="https://github.com/pywebio/PyWebIO/wiki/Why-PyWebIO%3F">https://github.com/pywebio/PyWebIO/wiki/Why-PyWebIO%3F</a>
</li>

<li>PyWebIO demos<br />
<a href="https://pywebio-demos.pywebio.online/">https://pywebio-demos.pywebio.online/</a>
</li>

<li>PyWebIO Chart Gallery<br />
<a href="https://pywebio-charts.pywebio.online/">https://pywebio-charts.pywebio.online/</a>
</li>

<li>Awesome Python<br />
<a href="https://awesome-python.com/">https://awesome-python.com/</a>
</li>

<li>A complete guide to web development in Python<br />
<a href="https://www.educative.io/blog/web-development-in-python">https://www.educative.io/blog/web-development-in-python</a>
</li>

<li>Python Web Development Tutorials<br />
<a href="https://realpython.com/tutorials/web-dev/">https://realpython.com/tutorials/web-dev/</a>
</li>

<li>What is Flask Python<br />
<a href="https://pythonbasics.org/what-is-flask-python/">https://pythonbasics.org/what-is-flask-python/</a>
</li>

<li>CherryPy<br />
<a href="https://cherrypy.dev/">https://cherrypy.dev/</a>
</li>

<li>Projekt Zenity<br />
<a href="https://wiki.gnome.org/Projects/Zenity">https://wiki.gnome.org/Projects/Zenity</a>
</li>

<li>Nástroj Dialog<br />
<a href="http://invisible-island.net/dialog/">http://invisible-island.net/dialog/</a>
</li>

<li>Plotly<br />
<a href="https://plotly.com/">https://plotly.com/</a>
</li>

<li>Bokeh<br />
<a href="https://bokeh.org/">https://bokeh.org/</a>
</li>

<li>pyecharts<br />
<a href="https://github.com/pyecharts/pyecharts/blob/master/README.en.md">https://github.com/pyecharts/pyecharts/blob/master/README.en.md</a>
</li>

<li>Tvorba grafů v&nbsp;Jupyter Notebooku s&nbsp;využitím knihovny Matplotlib<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/</a>
</li>

<li>Alternatives to PyWebIO<br />
<a href="https://stackshare.io/pywebio/alternatives">https://stackshare.io/pywebio/alternatives</a>
</li>

<li>The fastest way to build and share data apps &ndash; Streamlit<br />
<a href="https://streamlit.io/">https://streamlit.io/</a>
</li>

<li>Dash Enterprise<br />
<a href="https://plotly.com/dash/">https://plotly.com/dash/</a>
</li>

<li>pglet<br />
<a href="https://pglet.io/">https://pglet.io/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

