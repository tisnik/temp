<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>PyWebIO: interaktivní webové dialogy a formuláře naprogramované v čistém Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>PyWebIO: interaktivní webové dialogy a formuláře naprogramované v čistém Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V mnoha situacích potřebuje programátor vytvořit aplikaci s formuláři a dialogy, popř. s grafy, tedy aplikaci s GUI. Pokud používá Python, může využít již popsané knihovny Tkinter, PyObject, PyQt/PySide atd. Alternativně je ovšem možné vytvořit webovou aplikaci, a to čistě v Pythonu: bez HTML, CSS a JavaScriptu.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. PyWebIO: interaktivní webové dialogy a formuláře naprogramované v&nbsp;čistém Pythonu</a></p>
<p><a href="#k02">*** 2. Klasické knihovny pro tvorbu GUI: systém událostí popř.&nbsp;signálů+slotů</a></p>
<p><a href="#k03">*** 3. Koncept vstupu a výstupu (I/O) namísto architektury založené na systému událostí</a></p>
<p><a href="#k04">*** 4. Instalace knihovny PyWebIO</a></p>
<p><a href="#k05">*** 5. Zobrazení informací na webové stránce &ndash; modul <strong>pywebio.output</strong></a></p>
<p><a href="#k06">*** 6. Tabulky</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. PyWebIO: interaktivní webové dialogy a formuláře naprogramované v&nbsp;čistém Pythonu</h2>

<p>Jak již bylo napsáno v&nbsp;perexu článku, existují situace, kdy potřebuje vývojář vytvořit aplikaci s&nbsp;formuláři a dialogy, popř. i s&nbsp;grafy, tedy aplikaci s&nbsp;grafickým uživatelským rozhraním. V&nbsp;případě, že používá programovací jazyk Python, je možné pro tento využít již popsané knihovny Tkinter, PyObject, PyQt/PySide atd. (viz též seznam článků v&nbsp;seriálu <a href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">o GUI v&nbsp;Pythonu</a>). Alternativně je ovšem možné vytvořit webovou aplikaci, a to čistě v&nbsp;Pythonu: bez HTML, CSS a JavaScriptu. Pro tento účel slouží hned několik zajímavých knihoven a frameworků. My se dnes zaměříme na asi vůbec nejsnadněji použitelnou knihovnu nazvanou <i>PyWebIO</i>.</p>

<p><div class="rs-tip-major">Poznámka: interně se pochopitelně HTML, CSS a JavaScript musí používat (stejně jako webový server na straně Pythonu), ovšem programátor se s&nbsp;těmito technologiemi nemusí (pokud vyloženě nepotřebuje) při použití knihovny <i>PyWebIO</i> setkat.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Klasické knihovny pro tvorbu GUI: systém událostí popř.&nbsp;signálů+slotů</h2>

<p>Většina knihoven určených pro tvorbu grafického uživatelského rozhraní (v&nbsp;Pythonu) je založena buď na systému událostí nebo na takzvaných <i>signálech</i> a <i>slotech</i>. V&nbsp;obou případech se na jednu stranu jedná o velmi flexibilní způsob tvorby GUI, ovšem při tvorbě jednodušších formulářů a dialogů může být tato flexibilita někdy na obtíž, protože se architektura aplikace musí (alespoň do jisté míry) přizpůsobit celému GUI. Ostatně si to můžeme uvést na jednoduchém příkladu naprogramovaném s&nbsp;využitím snad nejjednodušší &bdquo;klasické&ldquo; knihovny pro tvorbu GUI. Jedná se o knihovnu AppJar:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        app.infoBox("Ok, Ok", "Ok button pressed")
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addButtons(["Ok", "Quit"], onButtonPress, 1, 0)
&nbsp;
app.go()
</pre>

<p>V&nbsp;knihovně <i>PySide</i> naproti tomu může každý ovládací prvek (widget) generovat signály, a to konkrétně v&nbsp;případě vzniku nějaké události (tou může být například stisk tlačítka, změna pozice posuvníku, změna velikosti okna atd.) nebo změny stavu widgetu. Signály mohou být napojené na takzvané <i>sloty</i>, což je pojmenování pro funkce, které mohou reagovat na příchozí signál. V&nbsp;knihovně Qt, nad níž je PySide postaven, jsou signály zpracovávány nativními funkcemi, PySide ovšem celý koncept signálů a slotů dokáže &bdquo;obalit&ldquo; takovým způsobem, že sloty jsou běžnými Pythonovskými funkcemi či metodami. Musíme však explicitně specifikovat propojení mezi signálem (resp.&nbsp;jeho typem) a slotem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># callback funkce</i>
def closeApplication():
    print("Closing...")
    sys.exit(0)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class MainWindow(QtGui.QWidget):
&nbsp;
    def __init__(self):
        # zavoláme konstruktor předka
        super(MainWindow, self).__init__()
&nbsp;
        # konfigurace GUI + přidání widgetu do okna
        self.prepareGUI()
&nbsp;
    def prepareGUI(self):
        self.resize(320, 240)
        self.setWindowTitle("Quit Button")
&nbsp;
        # tlačítko
        button = QtGui.QPushButton("Quit", self)
        button.resize(button.sizeHint())
        button.setToolTip("Immediately quit this application")
&nbsp;
        # navázání akce na signál
        <strong>button.clicked.connect(closeApplication)</strong>
&nbsp;
    def run(self, app):
        # zobrazení okna na obrazovce
        self.show()
        # vstup do smyčky událostí (event loop)
        app.exec_()
&nbsp;
&nbsp;
def main():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Koncept vstupu a výstupu (I/O) namísto architektury založené na systému událostí</h2>

<p>Knihovna <i>PyWebIO</i> je navržena takovým způsobem, aby vývojáře v&nbsp;co největší míře odstínila od &bdquo;otočení&ldquo; logiky aplikace proto, aby bylo v&nbsp;ní bylo možné použít grafické uživatelské rozhraní. Autoři se naopak snažili o to, aby byla v&nbsp;programovém kódu zachována původní logika typu &bdquo;dotaz na údaje zadávané uživatelem&ldquo; &rarr; &bdquo;výpočet a odpověď vypsaná uživateli&ldquo;. Jedná se o koncept, na němž je postavena klasická příkazová řádka a částečně i nástroje typu &bdquo;diář&ldquo;, tedy například <i>Jupyter Notebook</i>.</p>

<pre>
<i># Body Mass Index calculator</i>
&nbsp;
print("Mass (kg): ")
mass = int(input())
&nbsp;
print("Height (cm): ")
height = int(input())
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
print("BMI = ", bmi)
</pre>

<pre>
<i># Body Mass Index calculator</i>
&nbsp;
put_text("Mass (kg): ")
mass = int(input())
&nbsp;
put_text("Height (cm): ")
height = int(input())
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
put_info("BMI = ", bmi)
</pre>

<pre>
put_processbar('bar');
&nbsp;
for i in range(1, 11):
    set_processbar('bar', i / 10)
    time.sleep(0.1)
</pre>

<p><div class="rs-tip-major">Poznámka: podobně je koncipovaný i projekt <i>Zenity</i>, což je nástroj volatelný z&nbsp;příkazové řádky. Tomuto nástroji se předají informace o tom, jaké ovládací prvky má zobrazit a popř.&nbsp;i výchozí data v&nbsp;těchto prvcích. Následně se zobrazí dialog, čeká se na akci uživatele a následně Zenity vrátí výsledek. Podobně je koncipován i nástroj <i>Dialog</i>, i když způsob zobrazení formulářů a dialogů je realizován s&nbsp;využitím odlišných technologií.</div></p>

<p>Je zřejmé, že koncept založený na prostém vstupu a výstupu není dostatečně obecný, aby se s&nbsp;jeho využitím mohly tvořit i aplikace se složitěji pojatým ovládáním (například webové hry nebo plně interaktivní aplikace typu Google Doc). Ovšem až překvapivé množství webových aplikací se skutečně skládá ze sady formulářů a dialogů. Příkladem jsou servery typu Root.cz s&nbsp;možností zadání jednoduché ankety, ale například i webová aplikace určená pro vyplňování daňových přiznání. PyWebIO je navíc určeno nikoli pro tvorbu výše zmíněných &bdquo;plnohodnotných&ldquo; webových aplikací, ale je například oblíben vývojáři z&nbsp;oblasti strojového učení (<i>machine learning</i>), kde je mnohdy potřeba zadat vstupní parametry a následně například vykreslit výsledek analýz či výpočtů.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace knihovny PyWebIO</h2>

<p>Knihovna <i>PyWebIO</i> je nabízena přes <a
href="https://pypi.org/project/pywebio">PyPi</a>, takže její instalace by měla
být jednoduchá a přímočará. Knihovnu nainstalujeme pro aktuálně přihlášeného
uživatele:</p>

<pre>
$ <strong>pip3 install --user pywebio</strong>
&nbsp;
Collecting pywebio
  Downloading pywebio-1.5.2.tar.gz (450 kB)
     |████████████████████████████████| 450 kB 953 kB/s            
  Preparing metadata (setup.py) ... done
Collecting tornado&gt;=5.0
  Downloading tornado-6.1-cp38-cp38-manylinux2010_x86_64.whl (427 kB)
     |████████████████████████████████| 427 kB 1.6 MB/s            
Collecting user-agents
  Downloading user_agents-2.2.0-py3-none-any.whl (9.6 kB)
Collecting ua-parser&gt;=0.10.0
  Downloading ua_parser-0.10.0-py2.py3-none-any.whl (35 kB)
Building wheels for collected packages: pywebio
  Building wheel for pywebio (setup.py) ... done
  Created wheel for pywebio: filename=pywebio-1.5.2-py3-none-any.whl size=459628 sha256=3a86f8dfcb5992e4f1cd5c76cede3aceecaf25d07edde9f57848824cb6500c0c
  Stored in directory: /home/ptisnovs/.cache/pip/wheels/e7/dc/43/f395fa089831aeb5fa3eb3c577ec3ea53636b45fb03a32c301
Successfully built pywebio
Installing collected packages: ua-parser, user-agents, tornado, pywebio
Successfully installed pywebio-1.5.2 tornado-6.1 ua-parser-0.10.0 user-agents-2.2.0
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se kromě vlastní
knihovny <i>PyWebIO</i> nainstalovaly i další balíčky, zejména balíček
<i>Tornado</i>, k&nbsp;jehož významu se ještě dostaneme.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Zobrazení informací na webové stránce &ndash; modul <strong>pywebio.output</strong></h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import pywebio.output as out


out.put_text("Hello world!")
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Tabulky</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
out.put_table([
    ['Language', 'Ratings'],
    ['C', '15.95'],
    ['Java', '13.48'],
    ['Python', '10.47'],
    ['C++', '7.11'],
    ['C#', '4.58'],
    ['Visual Basic', '4.12'],
    ['JavaScript', '2.54'],
    ['PHP', '2.49'],
    ['R', '2.37'],
    ['SQL', '1.76'],
    ['Go', '1.46'],
    ['Swift', '1.38'],
    ['Perl', '1.30'],
    ['Assembly language', '1.30'],
    ['Ruby', '1.24'],
    ['MATLAB', '1.10'],
    ['Groovy', '0.99'],
    ['Rust', '0.92'],
    ['Objective-C', '0.85'],
    ['Dart', '0.77'],
])
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
values = [(x, 1.0/x) for x in range(1, 20)]
&nbsp;
out.put_table(values)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
values = [(x, "{:5.3f}".format(1.0/x)) for x in range(1, 20)]
&nbsp;
out.put_table(values)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
for color in ('primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'):
    out.put_text(color, color)
    out.put_loading(shape='border', color=color)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
out.put_info("Info message")
out.put_success("Success message")
out.put_warning("Warning message")
out.put_error("Error message")
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
html = """
&lt;h1&gt;Header&lt;/h1&gt;
&nbsp;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td style='background:#ff8080'&gt;Cell&lt;/td&gt;
    &lt;td style='background:#ffff80'&gt;Cell&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
"""
&nbsp;
out.put_html(html)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
markdown = '''
Markdown rendering
==================
&nbsp;
Lorem ipsum
-----------
&nbsp;
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
'''
&nbsp;
out.put_markdown(markdown)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
&nbsp;
code = """
<i># Body Mass Index calculator</i>
&nbsp;
print("Mass (kg): ")
mass = int(input())
&nbsp;
print("Height (cm): ")
height = int(input())
&nbsp;
<i># předod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
print("BMI = ", bmi)
"""
&nbsp;
out.put_code(code, language="python", rows=15)
&nbsp;
code2 = r"""
package main
&nbsp;
import "fmt"
&nbsp;
// I represents a new interface type (in this case empty interface)
type I interface{}
&nbsp;
// T represents an user-defined data type
type T struct{}
&nbsp;
func main() {
	var t *T
	if t == nil {
		fmt.Println("t is nil")
	} else {
		fmt.Println("t is not nil")
	}
	var i I = t
	if i == nil {
		fmt.Println("i is nil")
	} else {
		fmt.Println("i is not nil")
	}

}
"""
&nbsp;
out.put_code(code2, language="go", rows=15)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
import time
&nbsp;
&nbsp;
out.put_processbar('bar');
&nbsp;
for i in range(1, 11):
    out.set_processbar('bar', i / 10)
    time.sleep(0.1)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
import time
&nbsp;
&nbsp;
with out.put_loading(shape='border', color='primary'):
    time.sleep(5)
    out.put_text("Done")
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.output as out
&nbsp;
import time
&nbsp;
&nbsp;
i = 0
&nbsp;
for color in ('primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'):
    with out.put_loading(shape='border', color=color):
        time.sleep(1)
        out.put_text(i)
        i += 1
&nbsp;
out.put_text("Done")
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># Body Mass Index calculator</i>
&nbsp;
out.put_text("Mass (kg): ")
mass = int(inp.input())
&nbsp;
out.put_text("Height (cm): ")
height = int(inp.input())
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
out.put_info("BMI = ", bmi)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># Body Mass Index calculator</i>
&nbsp;
info = inp.input_group("Entry",[
  inp.input("Mass (kg)", name="mass"),
  inp.input("Height (cm)", name="height")
])
&nbsp;
mass = float(info["mass"])
height = float(info["height"])
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
out.put_info("BMI = ", bmi)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># Body Mass Index calculator</i>
&nbsp;
info = inp.input_group("Entry",[
  inp.input("Mass (kg)", name="mass", type=inp.NUMBER),
  inp.input("Height (cm)", name="height", type=inp.NUMBER)
])
&nbsp;
mass = info["mass"]
height = info["height"]
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
out.put_info("BMI = ", bmi)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
<i># Body Mass Index calculator</i>
&nbsp;
info = inp.input_group("Entry",[
  inp.input("Mass (kg)", name="mass", type=inp.NUMBER, required=True),
  inp.input("Height (cm)", name="height", type=inp.NUMBER, required=True)
])
&nbsp;
mass = info["mass"]
height = info["height"]
&nbsp;
<i># převod výšky na metry</i>
height = height / 100.0
&nbsp;
<i># výpočet (bez jakýchkoli kontrol)</i>
bmi = mass / (height * height)
&nbsp;
<i># výpis výsledku</i>
out.put_info("BMI = ", bmi)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
answer = inp.radio(label="test", options=["varianta 1", "varianta 2", "varianta 3"])
&nbsp;
out.put_info("Odpověď")
out.put_text(answer)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
answer = inp.checkbox(label="test", options=["varianta 1", "varianta 2", "varianta 3"])
&nbsp;
out.put_info("Odpověď")
out.put_text(answer)
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
answer = inp.actions(label="test", buttons=["varianta 1", "varianta 2", "varianta 3"])
&nbsp;
out.put_info("Odpověď")
out.put_text(answer)
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pywebio.input as inp
import pywebio.output as out
&nbsp;
&nbsp;
weight = inp.slider(label="Váha", value=75, min_value=30, max_value=150)
&nbsp;
out.put_info("Váha")
out.put_text(weight)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_basic_output.py</td><td>zobrazení běžného textu ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/01_basic_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/01_basic_output.py</a></td></tr>
<tr><td> 2</td><td>02_table.py</td><td>zobrazení tabulky ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/02_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/02_table.py</a></td></tr>
<tr><td> 3</td><td>03_table.py</td><td>programová příprava tabulky zobrazené ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/03_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/03_table.py</a></td></tr>
<tr><td> 4</td><td>04_table.py</td><td>programová příprava tabulky zobrazené ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/04_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/04_table.py</a></td></tr>
<tr><td> 5</td><td>05_color.py</td><td>podpora pro symbolické názvy barev</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/05_color.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/05_color.py</a></td></tr>
<tr><td> 6</td><td>06_message.py</td><td>výpis ostylovaných zpráv do webové stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/06_message.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/06_message.py</a></td></tr>
<tr><td> 7</td><td>07_put_html.py</td><td>podpora pro výstup HTML kódu z&nbsp;PyWebIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/07_put_html.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/07_put_html.py</a></td></tr>
<tr><td> 8</td><td>08_put_markdown.py</td><td>výpis textu (dokumentu) napsaného ve značkovacím jazyku Markdown</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/08_put_markdown.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/08_put_markdown.py</a></td></tr>
<tr><td> 9</td><td>09_put_code.py</td><td>výpis zdrojového kódu se zvýrazněním syntaxe</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/09_put_code.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/09_put_code.py</a></td></tr>
<tr><td>10</td><td>10_progress_bar.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/10_progress_bar.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/10_progress_bar.py</a></td></tr>
<tr><td>11</td><td>11_loading.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/11_loading.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/11_loading.py</a></td></tr>
<tr><td>12</td><td>12_loading.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/12_loading.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/12_loading.py</a></td></tr>
<tr><td>13</td><td>13_input.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/13_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/13_input.py</a></td></tr>
<tr><td>14</td><td>14_input.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/14_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/14_input.py</a></td></tr>
<tr><td>15</td><td>15_input_numbers.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/15_input_numbers.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/15_input_numbers.py</a></td></tr>
<tr><td>16</td><td>16_input_numbers_required.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/16_input_numbers_required.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/16_input_numbers_required.py</a></td></tr>
<tr><td>17</td><td>17_radio.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/17_radio.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/17_radio.py</a></td></tr>
<tr><td>18</td><td>18_checkbox.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/18_checkbox.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/18_checkbox.py</a></td></tr>
<tr><td>19</td><td>19_actions.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/19_actions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/19_actions.py</a></td></tr>
<tr><td>20</td><td>20_slider.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/20_slider.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/20_slider.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Low code Python web framework<br />
<a href="https://www.pyweb.io/">https://www.pyweb.io/</a>
</li>

<li>Repositář projektu<br />
<a href="https://github.com/pywebio/PyWebIO/">https://github.com/pywebio/PyWebIO/</a>
</li>

<li>Getting Started<br />
<a href="https://www.pyweb.io/tutorial.html">https://www.pyweb.io/tutorial.html</a>
</li>

<li>Dokumentace<br />
<a href="https://pywebio.readthedocs.io/en/latest/">https://pywebio.readthedocs.io/en/latest/</a>
</li>

<li>Why PyWebIO?<br />
<a href="https://github.com/pywebio/PyWebIO/wiki/Why-PyWebIO%3F">https://github.com/pywebio/PyWebIO/wiki/Why-PyWebIO%3F</a>
</li>

<li>PyWebIO demos<br />
<a href="https://pywebio-demos.pywebio.online/">https://pywebio-demos.pywebio.online/</a>
</li>

<li>PyWebIO Chart Gallery<br />
<a href="https://pywebio-charts.pywebio.online/">https://pywebio-charts.pywebio.online/</a>
</li>

<li>Awesome Python<br />
<a href="https://awesome-python.com/">https://awesome-python.com/</a>
</li>

<li>A complete guide to web development in Python<br />
<a href="https://www.educative.io/blog/web-development-in-python">https://www.educative.io/blog/web-development-in-python</a>
</li>

<li>Python Web Development Tutorials<br />
<a href="https://realpython.com/tutorials/web-dev/">https://realpython.com/tutorials/web-dev/</a>
</li>

<li>What is Flask Python<br />
<a href="https://pythonbasics.org/what-is-flask-python/">https://pythonbasics.org/what-is-flask-python/</a>
</li>

<li>CherryPy<br />
<a href="https://cherrypy.dev/">https://cherrypy.dev/</a>
</li>

<li>Projekt Zenity<br />
<a href="https://wiki.gnome.org/Projects/Zenity">https://wiki.gnome.org/Projects/Zenity</a>
</li>

<li>Nástroj Dialog<br />
<a href="http://invisible-island.net/dialog/">http://invisible-island.net/dialog/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

