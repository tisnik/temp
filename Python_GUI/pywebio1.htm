<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>PyWebIO: interaktivní webové dialogy a formuláře naprogramované v čistém Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>PyWebIO: interaktivní webové dialogy a formuláře naprogramované v čistém Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V mnoha situacích potřebuje programátor vytvořit aplikaci s formuláři a dialogy, popř. s grafy, tedy aplikaci s GUI. Pokud používá Python, může využít již popsané knihovny Tkinter, PyObject, PyQt/PySide atd. Alternativně je ovšem možné vytvořit webovou aplikaci, a to čistě v Pythonu: bez HTML, CSS a JavaScriptu.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. PyWebIO: interaktivní webové dialogy a formuláře naprogramované v&nbsp;čistém Pythonu</a></p>
<p><a href="#k02">*** 2. Klasické knihovny pro tvorbu GUI: systém událostí popř.&nbsp;signálů+slotů</a></p>
<p><a href="#k03">*** 3. Koncept vstupu a výstupu (I/O) namísto architektury založené na systému událostí</a></p>
<p><a href="#k04">*** 4. Instalace knihovny PyWebIO</a></p>
<p><a href="#k05">*** 5. Zobrazení informací na webové stránce &ndash; modul <strong>pywebio.output</strong></a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. PyWebIO: interaktivní webové dialogy a formuláře naprogramované v&nbsp;čistém Pythonu</h2>

<p>Jak již bylo napsáno v&nbsp;perexu článku, existují situace, kdy potřebuje vývojář vytvořit aplikaci s&nbsp;formuláři a dialogy, popř. i s&nbsp;grafy, tedy aplikaci s&nbsp;grafickým uživatelským rozhraním. V&nbsp;případě, že používá programovací jazyk Python, je možné pro tento využít již popsané knihovny Tkinter, PyObject, PyQt/PySide atd. (viz též seznam článků v&nbsp;seriálu <a href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">o GUI v&nbsp;Pythonu</a>). Alternativně je ovšem možné vytvořit webovou aplikaci, a to čistě v&nbsp;Pythonu: bez HTML, CSS a JavaScriptu. Pro tento účel slouží hned několik zajímavých knihoven a frameworků. My se dnes zaměříme na asi vůbec nejsnadněji použitelnou knihovnu nazvanou <i>PyWebIO</i>.</p>

<p><div class="rs-tip-major">Poznámka: interně se pochopitelně HTML, CSS a JavaScript musí používat (stejně jako webový server na straně Pythonu), ovšem programátor se s&nbsp;těmito technologiemi nemusí (pokud vyloženě nepotřebuje) při použití knihovny <i>PyWebIO</i> setkat.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Klasické knihovny pro tvorbu GUI: systém událostí popř.&nbsp;signálů+slotů</h2>

<p>Většina knihoven určených pro tvorbu grafického uživatelského rozhraní (v&nbsp;Pythonu) je založena buď na systému událostí nebo na takzvaných <i>signálech</i> a <i>slotech</i>. V&nbsp;obou případech se na jednu stranu jedná o velmi flexibilní způsob tvorby GUI, ovšem při tvorbě jednodušších formulářů a dialogů může být tato flexibilita někdy na obtíž, protože se architektura aplikace musí (alespoň do jisté míry) přizpůsobit celému GUI. Ostatně si to můžeme uvést na jednoduchém příkladu naprogramovaném s&nbsp;využitím snad nejjednodušší &bdquo;klasické&ldquo; knihovny pro tvorbu GUI. Jedná se o knihovnu AppJar:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        app.infoBox("Ok, Ok", "Ok button pressed")
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.addLabel("title", "Hello world!", colspan=2)
&nbsp;
app.addButtons(["Ok", "Quit"], onButtonPress, 1, 0)
&nbsp;
app.go()
</pre>

<p>V&nbsp;knihovně <i>PySide</i> naproti tomu může každý ovládací prvek (widget) generovat signály, a to konkrétně v&nbsp;případě vzniku nějaké události (tou může být například stisk tlačítka, změna pozice posuvníku, změna velikosti okna atd.) nebo změny stavu widgetu. Signály mohou být napojené na takzvané <i>sloty</i>, což je pojmenování pro funkce, které mohou reagovat na příchozí signál. V&nbsp;knihovně Qt, nad níž je PySide postaven, jsou signály zpracovávány nativními funkcemi, PySide ovšem celý koncept signálů a slotů dokáže &bdquo;obalit&ldquo; takovým způsobem, že sloty jsou běžnými Pythonovskými funkcemi či metodami. Musíme však explicitně specifikovat propojení mezi signálem (resp.&nbsp;jeho typem) a slotem:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# callback funkce
def closeApplication():
    print("Closing...")
    sys.exit(0)
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class MainWindow(QtGui.QWidget):
&nbsp;
    def __init__(self):
        # zavoláme konstruktor předka
        super(MainWindow, self).__init__()
&nbsp;
        # konfigurace GUI + přidání widgetu do okna
        self.prepareGUI()
&nbsp;
    def prepareGUI(self):
        self.resize(320, 240)
        self.setWindowTitle("Quit Button")
&nbsp;
        # tlačítko
        button = QtGui.QPushButton("Quit", self)
        button.resize(button.sizeHint())
        button.setToolTip("Immediately quit this application")
&nbsp;
        # navázání akce na signál
        <strong>button.clicked.connect(closeApplication)</strong>
&nbsp;
    def run(self, app):
        # zobrazení okna na obrazovce
        self.show()
        # vstup do smyčky událostí (event loop)
        app.exec_()
&nbsp;
&nbsp;
def main():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Koncept vstupu a výstupu (I/O) namísto architektury založené na systému událostí</h2>

<pre>
# Body Mass Index calculator

print("Mass (kg): ")
mass = int(input())

print("Height (cm): ")
height = int(input())

# předod výšky na metry
height = height / 100.0

# výpočet (bez jakýchkoli kontrol)
bmi = mass / (height * height)

# výpis výsledku
print("BMI = ", bmi)
</pre>

<p><div class="rs-tip-major">Poznámka: podobně je koncipovaný i projekt <i>Zenity</i>, což je nástroj volatelný z&nbsp;příkazové řádky. Tomuto nástroji se předají informace o tom, jaké ovládací prvky má zobrazit a popř.&nbsp;i výchozí data v&nbsp;těchto prvcích. Následně se zobrazí dialog, čeká se na akci uživatele a následně Zenity vrátí výsledek. Podobně je koncipován i nástroj <i>Dialog</i>, i když způsob zobrazení formulářů a dialogů je realizován s&nbsp;využitím odlišných technologií.</div></p>

<p>Je zřejmé, že koncept založený na prostém vstupu a výstupu není dostatečně obecný, aby se s&nbsp;jeho využitím mohly tvořit i aplikace se složitěji pojatým ovládáním (například webové hry nebo plně interaktivní aplikace typu Google Doc). Ovšem až překvapivé množství webových aplikací se skutečně skládá ze sady formulářů a dialogů. Příkladem jsou servery typu Root.cz s&nbsp;možností zadání jednoduché ankety, ale například i webová aplikace určená pro vyplňování daňových přiznání. PyWebIO je navíc určeno nikoli pro tvorbu výše zmíněných &bdquo;plnohodnotných&ldquo; webových aplikací, ale je například oblíben vývojáři z&nbsp;oblasti strojového učení (<i>machine learning</i>), kde je mnohdy potřeba zadat vstupní parametry a následně například vykreslit výsledek analýz či výpočtů.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace knihovny PyWebIO</h2>

<p>Knihovna <i>PyWebIO</i> je nabízena přes <a
href="https://pypi.org/project/pywebio">PyPi</a>, takže její instalace by měla
být jednoduchá a přímočará. Knihovnu nainstalujeme pro aktuálně přihlášeného
uživatele:</p>

<pre>
$ <strong>pip3 install --user pywebio</strong>
&nbsp;
Collecting pywebio
  Downloading pywebio-1.5.2.tar.gz (450 kB)
     |████████████████████████████████| 450 kB 953 kB/s            
  Preparing metadata (setup.py) ... done
Collecting tornado&gt;=5.0
  Downloading tornado-6.1-cp38-cp38-manylinux2010_x86_64.whl (427 kB)
     |████████████████████████████████| 427 kB 1.6 MB/s            
Collecting user-agents
  Downloading user_agents-2.2.0-py3-none-any.whl (9.6 kB)
Collecting ua-parser&gt;=0.10.0
  Downloading ua_parser-0.10.0-py2.py3-none-any.whl (35 kB)
Building wheels for collected packages: pywebio
  Building wheel for pywebio (setup.py) ... done
  Created wheel for pywebio: filename=pywebio-1.5.2-py3-none-any.whl size=459628 sha256=3a86f8dfcb5992e4f1cd5c76cede3aceecaf25d07edde9f57848824cb6500c0c
  Stored in directory: /home/ptisnovs/.cache/pip/wheels/e7/dc/43/f395fa089831aeb5fa3eb3c577ec3ea53636b45fb03a32c301
Successfully built pywebio
Installing collected packages: ua-parser, user-agents, tornado, pywebio
Successfully installed pywebio-1.5.2 tornado-6.1 ua-parser-0.10.0 user-agents-2.2.0
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se kromě vlastní
knihovny <i>PyWebIO</i> nainstalovaly i další balíčky, zejména balíček
<i>Tornado</i>, k&nbsp;jehož významu se ještě dostaneme.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Zobrazení informací na webové stránce &ndash; modul <strong>pywebio.output</strong></h2>

<p></p>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import pywebio.output as out


out.put_text("Hello world!")
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import pywebio.output as out


out.put_table([
    ['Language', 'Ratings'],
    ['C', '15.95'],
    ['Java', '13.48'],
    ['Python', '10.47'],
    ['C++', '7.11'],
    ['C#', '4.58'],
    ['Visual Basic', '4.12'],
    ['JavaScript', '2.54'],
    ['PHP', '2.49'],
    ['R', '2.37'],
    ['SQL', '1.76'],
    ['Go', '1.46'],
    ['Swift', '1.38'],
    ['Perl', '1.30'],
    ['Assembly language', '1.30'],
    ['Ruby', '1.24'],
    ['MATLAB', '1.10'],
    ['Groovy', '0.99'],
    ['Rust', '0.92'],
    ['Objective-C', '0.85'],
    ['Dart', '0.77'],
])
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import pywebio.output as out


values = [(x, 1.0/x) for x in range(1, 20)]

out.put_table(values)
</pre>

<pre>
#!/usr/bin/env python3
# vim: set fileencoding=utf-8

import pywebio.output as out


values = [(x, "{:5.3f}".format(1.0/x)) for x in range(1, 20)]

out.put_table(values)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_basic_output.py</td><td>zobrazení běžného textu ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/01_basic_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/01_basic_output.py</a></td></tr>
<tr><td> 2</td><td>02_table.py</td><td>zobrazení tabulky ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/02_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/02_table.py</a></td></tr>
<tr><td> 3</td><td>03_table.py</td><td>programová příprava tabulky zobrazené ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/03_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/03_table.py</a></td></tr>
<tr><td> 4</td><td>04_table.py</td><td>programová příprava tabulky zobrazené ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/04_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/04_table.py</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
<tr><td>20</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Low code Python web framework<br />
<a href="https://www.pyweb.io/">https://www.pyweb.io/</a>
</li>

<li>Repositář projektu<br />
<a href="https://github.com/pywebio/PyWebIO/">https://github.com/pywebio/PyWebIO/</a>
</li>

<li>Getting Started<br />
<a href="https://www.pyweb.io/tutorial.html">https://www.pyweb.io/tutorial.html</a>
</li>

<li>Dokumentace<br />
<a href="https://pywebio.readthedocs.io/en/latest/">https://pywebio.readthedocs.io/en/latest/</a>
</li>

<li>Why PyWebIO?<br />
<a href="https://github.com/pywebio/PyWebIO/wiki/Why-PyWebIO%3F">https://github.com/pywebio/PyWebIO/wiki/Why-PyWebIO%3F</a>
</li>

<li>PyWebIO demos<br />
<a href="https://pywebio-demos.pywebio.online/">https://pywebio-demos.pywebio.online/</a>
</li>

<li>PyWebIO Chart Gallery<br />
<a href="https://pywebio-charts.pywebio.online/">https://pywebio-charts.pywebio.online/</a>
</li>

<li>Awesome Python<br />
<a href="https://awesome-python.com/">https://awesome-python.com/</a>
</li>

<li>A complete guide to web development in Python<br />
<a href="https://www.educative.io/blog/web-development-in-python">https://www.educative.io/blog/web-development-in-python</a>
</li>

<li>Python Web Development Tutorials<br />
<a href="https://realpython.com/tutorials/web-dev/">https://realpython.com/tutorials/web-dev/</a>
</li>

<li>What is Flask Python<br />
<a href="https://pythonbasics.org/what-is-flask-python/">https://pythonbasics.org/what-is-flask-python/</a>
</li>

<li>CherryPy<br />
<a href="https://cherrypy.dev/">https://cherrypy.dev/</a>
</li>

<li>Projekt Zenity<br />
<a href="https://wiki.gnome.org/Projects/Zenity">https://wiki.gnome.org/Projects/Zenity</a>
</li>

<li>Nástroj Dialog<br />
<a href="http://invisible-island.net/dialog/">http://invisible-island.net/dialog/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

