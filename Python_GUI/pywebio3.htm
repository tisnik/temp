<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Kombinace PyWebIO, Matplotlibu, Pandasu a Minia aneb webová aplikace za půl hodiny</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Kombinace PyWebIO, Matplotlibu, Pandasu a Minia aneb webová aplikace za půl hodiny</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes si ukážeme, jakým způsobem lze poměrně rychle (doslova za půl hodiny) vytvořit jednoduchou webovou aplikaci sloužící pro zobrazení naměřených dat, která jsou uložena v S3/Miniu. Kromě prostého zobrazení dat bude webová aplikace poskytovat i grafy s hodnotami a regresní přímkou.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Kombinace PyWebIO, Matplotlibu, Pandasu a Minia aneb webová aplikace za půl hodiny</a></p>
<p><a href="#k02">2. Formát vstupních dat</a></p>
<p><a href="#k03">3. Zobrazení grafu s&nbsp;naměřenými daty i regresní přímkou</a></p>
<p><a href="#k04">4. Načtení dat přímo do datového rámce knihovny Pandas</a></p>
<p><a href="#k05">5. Projekt MinIO</a></p>
<p><a href="#k06">6. Spuštění Minia v&nbsp;režimu serveru</a></p>
<p><a href="#k07">7. Načtení seznamu objektů uložených v&nbsp;Miniu</a></p>
<p><a href="#k08">8. Seznam datových souborů s&nbsp;výsledky měření</a></p>
<p><a href="#k09">9. Načtení objektů z&nbsp;Minia</a></p>
<p><a href="#k10">10. Přečtení dat uložených ve formátu CSV</a></p>
<p><a href="#k11">11. Zobrazení grafu z&nbsp;dat načtených z&nbsp;Minia</a></p>
<p><a href="#k12">12. Od skriptu k&nbsp;dynamické webové stránce s&nbsp;využitím PyWebIO</a></p>
<p><a href="#k13">13. Prázdná dynamická webová stránka</a></p>
<p><a href="#k14">14. Zobrazení seznamu senzorů</a></p>
<p><a href="#k15">15. Popup okna v&nbsp;PyWebIO</a></p>
<p><a href="#k16">16. Zobrazení popup okna s&nbsp;daty senzoru</a></p>
<p><a href="#k17">17. Zobrazení popup okna s&nbsp;grafem</a></p>
<p><a href="#k18">18. Závěr</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Kombinace PyWebIO, Matplotlibu, Pandasu a Minia aneb webová aplikace za půl hodiny</h2>

<p><a
href="https://www.root.cz/clanky/pywebio-interaktivni-webove-dialogy-a-formulare-v-cistem-pythonu-dokonceni/">V&nbsp;úvodníku
článku o knihovně PyWebIO</a> bylo napsáno: v&nbsp;mnoha situacích potřebuje
programátor vytvořit aplikaci s&nbsp;formuláři a dialogy, popř. s&nbsp;grafy,
tedy aplikaci s&nbsp;GUI. Pokud používá Python, může využít již popsané
knihovny Tkinter, PyObject, PyQt/PySide atd. Alternativně je ovšem možné
vytvořit webovou aplikaci, a to čistě v&nbsp;Pythonu: bez HTML, CSS a
JavaScriptu. Pro tento účel slouží knihovna PyWebIO.</p>

<p>Dnes si v&nbsp;několika krocích ukážeme vytvoření takové aplikace, přičemž
funkční požadavky (odvozené z&nbsp;praxe) jsou ve stručnosti následující:</p>

<ol>
<li>Má se zobrazit seznam senzorů, které posílají data do S3 nebo Minia (tedy storage)</li>
<li>U každého senzoru se zobrazí jeho jméno, datum odeslání dat a dvojice ovládacích prvků &bdquo;Data&ldquo; a &bdquo;Graf&ldquo;</li>
<li>Po výběru ovládacího prvku &bdquo;Data&ldquo; se zobrazí popup okno s&nbsp;tabulkou s&nbsp;daty získanými senzorem (například teploměrem)</li>
<li>Po výběru ovládacího prvku &bdquo;Graf&ldquo; se zobrazí popup okno s&nbsp;průběhem hodnot a taktéž s&nbsp;regresní přímkou (resp.&nbsp;úsečkou)</li>
</ol>

<p>Začneme skutečně od začátku &ndash; od tohoto primitivního skriptu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
&nbsp;
def <strong>main</strong>():
    pass
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
</pre>

<p>Na konci článku budeme mít prakticky plnohodnotnou webovou aplikaci určenou
pro nasazení v&nbsp;intranetu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Formát vstupních dat</h2>

<p>Vstupní data získaná jednotlivými senzory jsou uložena ve formátu CSV
(<i>Comma Separated Values</i>) a mají jednoduchou strukturu &ndash; první
sloupec obsahuje časová razítka, druhý sloupec naměřenou hodnotu:</p>

<pre>
"Time","Value"
2020-12-01 06:21:00,30
2020-12-01 06:21:20,4
2020-12-01 06:21:40,5
2020-12-01 06:22:00,5
2020-12-01 06:22:20,5
2020-12-01 06:22:40,8
2020-12-01 06:23:00,8
2020-12-01 06:23:20,8
2020-12-01 06:23:40,11
2020-12-01 06:24:00,11
2020-12-01 06:24:20,10
2020-12-01 06:24:40,21
2020-12-01 06:25:00,21
2020-12-01 06:25:20,25
2020-12-01 06:25:40,22
2020-12-01 06:26:00,22
2020-12-01 06:26:20,23
2020-12-01 06:26:40,23
2020-12-01 06:27:00,23
2020-12-01 06:27:20,13
2020-12-01 06:27:40,15
2020-12-01 06:28:00,15
2020-12-01 06:28:20,13
2020-12-01 06:28:40,16
2020-12-01 06:29:00,16
2020-12-01 06:29:20,16
2020-12-01 06:29:40,11
2020-12-01 06:30:00,11
2020-12-01 06:30:20,22
2020-12-01 06:30:40,15
2020-12-01 06:31:00,15
2020-12-01 06:31:20,12
2020-12-01 06:31:40,18
2020-12-01 06:32:00,18
2020-12-01 06:32:20,23
2020-12-01 06:32:40,19
2020-12-01 06:33:00,19
2020-12-01 06:33:20,22
2020-12-01 06:33:40,9
2020-12-01 06:34:00,9
2020-12-01 06:34:20,9
2020-12-01 06:34:40,22
2020-12-01 06:35:00,20
2020-12-01 06:35:20,20
2020-12-01 06:35:40,17
2020-12-01 06:36:00,13
2020-12-01 06:36:20,13
2020-12-01 06:36:40,11
2020-12-01 06:37:00,16
</pre>

<p>Pro každý senzor existuje samostatný datový soubor.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zobrazení grafu s&nbsp;naměřenými daty i regresní přímkou</h2>

<p>S&nbsp;problematikou tvorby grafů s&nbsp;využitím knihovny Matplotlib jsme
se seznámili například v&nbsp;článku <a
href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">Tvorba
grafů v&nbsp;Jupyter Notebooku s&nbsp;využitím knihovny Matplotlib</a>. Ukažme
si tedy, jak lze vykreslit graf z&nbsp;hodnot, které jsou přečteny ze souboru
CSV a zobrazeny formou základního grafu s&nbsp;průběhem &bdquo;funkce&ldquo;.
Pro větší zajímavost je do grafu vložena i regresní přímka, která byla
z&nbsp;pohledu Matplotlibu <a
href="https://www.root.cz/clanky/krivky-urcene-polynomem-nejpouzivanejsi-krivky-v-soucasnosti/#k08">popsána
zde</a>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import csv
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_values.py input_file.csv")
    print("Example:")
    print("  plot_values.py overall.csv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_csv = sys.argv[1]
&nbsp;
<i># Try to open the CSV file specified.</i>
with open(input_csv) as csv_input:
    <i># And open this file as CSV</i>
    csv_reader = csv.reader(csv_input)
&nbsp;
    <i># Skip header</i>
    next(csv_reader, None)
    rows = 0
&nbsp;
    <i># Read all rows from the provided CSV file</i>
    data = [(row[0], int(row[1])) for row in csv_reader]
    print(data)
&nbsp;
<i># Linear regression</i>
time = [item[0] for item in data]
messages = [item[1] for item in data]
&nbsp;
<i># Linear regression</i>
x = np.arange(0, len(messages))
coef = np.polyfit(x, messages, 1)
poly1d_fn = np.poly1d(coef)
&nbsp;
<i># Create new graph</i>
plt.plot(messages, "b", poly1d_fn(np.arange(0, len(messages))), "y--")
&nbsp;
<i># Title of a graph</i>
plt.title("Sensor values")
&nbsp;
<i># Add a label to x-axis</i>
plt.xlabel("Time")
&nbsp;
<i># Add a label to y-axis</i>
plt.ylabel("Values")
&nbsp;
plt.legend(loc="upper right")
&nbsp;
<i># Set the plot layout</i>
plt.tight_layout()
&nbsp;
<i># And save the plot into raster format and vector format as well</i>
plt.savefig("graph.png")
plt.savefig("graph.svg")
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>

<p>Výsledek může vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/295/pywebio-3-1.png" class="image-574162" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 1: Graf vykreslený předchozím skriptem.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Načtení dat přímo do datového rámce knihovny Pandas</h2>

<p>Načtení dat lze ve skutečnosti realizovat ještě jednodušeji, a to <a
href="https://www.root.cz/clanky/knihovna-pandas-zaklady-prace-s-datovymi-ramci/#k02">s&nbsp;využitím
knihovny Pandas</a> (ta nám později nabídne i vykreslení tabulky do HTML).
Malou úpravou získáme tento skript; samotný graf by měl být pro stejná vstupní
data totožný:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_values_pandas.py input_file.csv")
    print("Example:")
    print("  plot_values_pandas.py overall.csv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_csv = sys.argv[1]
&nbsp;
<i># Try to open the CSV file specified.</i>
df = pd.read_csv(input_csv)
&nbsp;
<i># Print info about data frame</i>
print(df.info())
print(df.describe())
&nbsp;
<i># Linear regression</i>
time = df["Time"]
messages = df["Value"]
&nbsp;
<i># Linear regression</i>
x = np.arange(0, len(messages))
coef = np.polyfit(x, messages, 1)
poly1d_fn = np.poly1d(coef)
&nbsp;
<i># Create new graph</i>
plt.plot(messages, "b", poly1d_fn(np.arange(0, len(messages))), "y--")
&nbsp;
<i># Title of a graph</i>
plt.title("Sensor values")
&nbsp;
<i># Add a label to x-axis</i>
plt.xlabel("Time")
&nbsp;
<i># Add a label to y-axis</i>
plt.ylabel("Values")
&nbsp;
plt.legend(loc="upper right")
&nbsp;
<i># Set the plot layout</i>
plt.tight_layout()
&nbsp;
<i># And save the plot into raster format and vector format as well</i>
plt.savefig("graph.png")
plt.savefig("graph.svg")
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/295/pywebio-3-2.png" class="image-574163" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 2: Graf vykreslený předchozím skriptem.</i></p>

<p>Aby bylo později možné graf (resp.&nbsp;přesněji řečeno jeho rasterizovanou
podobu) uložit do datového bufferu a následně poslat do webové aplikace, budeme
muset skript nepatrně upravit &ndash; použijeme konstrukci <strong>fig, ax =
plt.subplots()</strong> a skript se tedy změní následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_values_pandas.py input_file.csv")
    print("Example:")
    print("  plot_values_pandas.py overall.csv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_csv = sys.argv[1]
&nbsp;
<i># Try to open the CSV file specified.</i>
df = pd.read_csv(input_csv)
&nbsp;
<i># Print info about data frame</i>
print(df.info())
print(df.describe())
&nbsp;
<i># Linear regression</i>
time = df["Time"]
messages = df["Value"]
&nbsp;
<i># Linear regression</i>
x = np.arange(0, len(messages))
coef = np.polyfit(x, messages, 1)
poly1d_fn = np.poly1d(coef)
&nbsp;
<i># Create a figure containing a single axes.</i>
fig, ax = plt.subplots()
&nbsp;
<i># Create new graph</i>
ax.plot(messages, "b", poly1d_fn(np.arange(0, len(messages))), "y--")
&nbsp;
<i># Title of a graph</i>
ax.set_title("Sensor values")
&nbsp;
<i># Add a label to x-axis</i>
ax.set_xlabel("Time")
&nbsp;
<i># Add a label to y-axis</i>
ax.set_ylabel("Values")
&nbsp;
ax.legend(loc="upper right")
&nbsp;
<i># And save the plot into raster format and vector format as well</i>
fig.savefig("sensors.png")
fig.savefig("sensors.svg")
&nbsp;
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: nyní se tedy operace provádí
s&nbsp;objekty nazvanými <strong>fig</strong> a <strong>ax</strong> (figure a
axis).</div></p>

<img src="https://i.iinfo.cz/images/295/pywebio-3-3.png" class="image-574164" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 3: Graf vykreslený předchozím skriptem.</i></p>

<p><div class="rs-tip-major">Poznámka: nyní již víme, jakým způsobem bude možné
zobrazit graf s&nbsp;hodnotami získanými ze senzorů i další potřebné údaje
(regresní úsečku atd.). Následujícím krokem bude zajištění načtení hodnot
uložených ve vhodném datovém úložišti, konkrétně v&nbsp;AWS S3 nebo ve službě
Minio, které z&nbsp;pohledu rozhraní nabízí všechny potřebné základní operace
prakticky totožné s&nbsp;Miniem.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Projekt MinIO</h2>

<p>V&nbsp;této kapitole se ve stručnosti seznámíme s&nbsp;projektem nazvaným
<i>MinIO</i>. Jedná se o sadu několika služeb a nástrojů, které uživatelům
poskytují distribuované datové úložiště určené pro ukládání obecných
(strukturovaných i nestrukturovaných) dat. Typicky se jedná o soubory používané
v&nbsp;oblasti AI (<i>Artifical Intelligence</i>) a ML (<i>Machine
Learning</i>), ovšem kromě těchto populárních (a vlastně do značné míry i
módních) oblastí IT je pochopitelně možné službu MinIO použít i pro ukládání
logů, souborů, k&nbsp;nimž je zapotřebí rychle přistupovat z&nbsp;mnoha
různých, mnohdy vzájemně vzdálených oblastí (zde využijeme možnost
distribuovaného systému), jako centrální úložiště dokumentů, obrázků, videí,
pochopitelně i obrazů souborových systémů pro Docker apod. MinIO dosahuje velmi
slušné rychlosti přístupu k&nbsp;datům (při vhodně nadimenzované síti, která je
většinou limitujícím faktorem) a mj.&nbsp;i díky velmi dobré stabilitě ukazuje
přednosti <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovacího jazyka
Go</a>, v&nbsp;němž je celý systém naprogramován.</p>

<p>Jedním z&nbsp;nejdůležitějších a v&nbsp;důsledku i nejpraktičtějších
vlastností projektu MinIO je fakt, že se pro přístup k&nbsp;datům používá
stejná technologie, jaká je implementována i v&nbsp;populární službě <i>Amazon
S3</i> či možná přesněji <i>AWS S3</i>. To mj.&nbsp;znamená, že dodávaný
<i>MinIO Client SDK</i> popsaný v&nbsp;navazujících kapitolách může sloužit jak
pro přístup k&nbsp;datům uloženým v&nbsp;Miniu, tak i k&nbsp;datům uloženým ve
cloudu na S3. Díky tomu lze například snadněji nastavit konfiguraci pro vývoj,
konfiguraci CI, zajistit si možnost využití veřejného cloudu (S3) nebo naopak
privátního cloudu (založeného na Miniu) atd. Navíc je <i>MinIO Client SDK</i>
určen jen pro přístup k&nbsp;datům a nikoli pro ovládání dalších služeb, takže
je jeho zahrnutí do vyvíjené aplikace méně náročné na systémové prostředky.
Musíme si totiž uvědomit, že přístup k&nbsp;datům je mnohdy zapotřebí i
z&nbsp;relativně málo výkonných zařízení IoT atd. (mj.&nbsp;i z&nbsp;tohoto
důvodu se MinIO co do snadnosti integrace porovnává s&nbsp;Redisem, i když
oblasti nasazení těchto dvou technologií jsou mnohdy značně odlišné).</p>

<p><div class="rs-tip-major">Poznámka: zkratka S3 vznikla ze sousloví
&bdquo;Simple Storage Service&ldquo; a skutečně se jedná o implementaci služby,
která je snadno použitelná, a to prakticky ve všech mainstreamových
programovacích jazycích.</div></p>

<p>Instalace služby (přesněji řečeno serverové části) projektu <i>MinIO</i> je
snadná a přímočará. Jelikož se jedná o aplikaci naprogramovanou v&nbsp;jazyce
Go, je služba dodávána ve formě jediného (i když relativně objemného)
spustitelného souboru. K&nbsp;dispozici je ovšem i obraz pro Docker, překlad
lze provést ze zdrojových souborů atd. Dnes se zaměříme na první způsob, tedy
na stažení již připravených souborů projektu <i>MinIO</i>. Musíme si pouze
vybrat soubor pro právě používaný operační systém a procesorovou architekturu.
Pro testování budu používat Linux a architekturu x86-64. Službu <i>MinIO</i>,
přesněji řečeno spustitelný binární soubor, který po svém spuštění službu
nabídne, získáme jednoduše jediným příkazem:</p>

<pre>
$ <strong>wget https://dl.min.io/server/minio/release/linux-amd64/minio</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: celková velikost tohoto souboru
přesahuje 40 megabajtů a stahování může být relativně pomalé. Může se stát, že
budete potřebovat i několik minut.</div></p>

<p>Následně je nutné nastavit příznak &bdquo;x&ldquo; pro stažený soubor, aby
bylo možné službu spustit přímo z&nbsp;příkazového řádku:</p>

<pre>
$ <strong>chmod +x minio</strong>
</pre>

<p>Dále pro jistotu otestujeme, zda je stažený soubor skutečně spustitelný:</p>

<pre>
$ <strong>./minio version</strong>
</pre>

<p>Podobným způsobem lokálně nainstalujeme i konzoli projektu <i>MinIO</i>. Ta
se jmenuje <strong>mc</strong>. Nejdříve stáhneme příslušný spustitelný soubor
pro zvolený operační systém a architekturu mikroprocesoru:</p>

<pre>
$ <strong>wget https://dl.min.io/client/mc/release/linux-amd64/mc</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: opět se připravte na spíše pomalejší
stahování.</div></p>

<p>Následně, podobně jako v&nbsp;předchozích krocích, nastavíme příznak
&bdquo;x&ldquo;, aby byla konzole spustitelná:</p>

<pre>
$ <strong>chmod +x mc</strong>
</pre>

<p>A ověříme si, že tomu tak skutečně je:</p>

<pre>
$ <strong>./mc version</strong>
&nbsp;
Version: 2019-10-09T22:54:57Z
Release-tag: RELEASE.2019-10-09T22-54-57Z
Commit-id: f93fe1330a3647b1afaff0ed8c188d2897bf391e
</pre>

<p><div class="rs-tip-major">Poznámka: jméno konzole <strong>mc</strong> může
kolidovat se známým souborovým manažerem <i>Midnight Commander</i>. To nám však
prozatím nebude příliš vadit, protože jsme provedli pouze lokální instalaci a
budeme tedy rozlišovat mezi těmito příkazy:</div></p>

<pre>
$ <strong>mc</strong>
$ <strong>./mc</strong>
</pre>

<p>A konečně v&nbsp;posledním kroku nainstalujeme balíček pro Python, který
zajistí přístup k&nbsp;běžícímu Miniu (nebo i k&nbsp;S3):</p>

<pre>
$ <strong>pip3 install --user minio</strong>
&nbsp;
Requirement already satisfied: minio in ./.local/lib/python3.6/site-packages
Requirement already satisfied: urllib3 in /usr/lib/python3.6/site-packages (from minio)
Requirement already satisfied: pytz in /usr/lib/python3.6/site-packages (from minio)
Requirement already satisfied: certifi in ./.local/lib/python3.6/site-packages (from minio)
Requirement already satisfied: python-dateutil in ./.local/lib/python3.6/site-packages (from minio)
Requirement already satisfied: six&gt;=1.5 in ./.local/lib/python3.6/site-packages (from python-dateutil-&gt;minio)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Spuštění Minia v&nbsp;režimu serveru</h2>

<p>Pokud již máme připravený spustitelný soubor nazvaný <strong>minio</strong>
(viz též <a href="#05">předchozí kapitolu</a>), je inicializace a následné
spuštění služby MinIO na lokálním počítači otázkou jediného příkazu. Musíme
pouze specifikovat, že se má spustit server a na jakém disku a adresáři budou
umístěny soubory spravované službou MinIO:</p>

<pre>
$ <strong>./minio server .</strong>
</pre>

<p>Zprávy zobrazené po spuštění serveru:</p>

<pre>
API: http://192.168.1.34:9000  http://192.168.122.1:9000  http://192.168.130.1:9000  http://127.0.0.1:9000
RootUser: minioadmin
RootPass: minioadmin
&nbsp;
Console: http://192.168.1.34:40747 http://192.168.122.1:40747 http://192.168.130.1:40747 http://127.0.0.1:40747
RootUser: minioadmin
RootPass: minioadmin
&nbsp;
Command-line: https://docs.min.io/docs/minio-client-quickstart-guide
   $ mc alias set myminio http://192.168.1.34:9000 minioadmin minioadmin
&nbsp;
Documentation: https://docs.min.io
</pre>

<p>Povšimněte si, že se po spuštění zobrazily všechny informace nutné pro
spuštění webového rozhraní, pro použití konzole ovládané z&nbsp;příkazového
řádku i pro instalaci SDK pro podporované programovací jazyky. Dále jsme
získali i dvojici klíčů, které použijeme v&nbsp;následujících kapitolách, a to
jak při přístupu přes webovou konzoli, tak i v&nbsp;demonstračních příkladech
založených na SDK Minia.</p>

<p><div class="rs-tip-major">Poznámka: konkrétní chování Minia se
v&nbsp;různých verzích může nepatrně odlišovat od výše uvedených informací.
Ovšem základní chování služby zůstává zachováno.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Načtení seznamu objektů uložených v&nbsp;Miniu</h2>

<p>Nyní navážeme na kostru celé &bdquo;aplikace&ldquo; uvedené <a
href="#k01">v&nbsp;první kapitole</a> a přidáme do ní základní funkcionalitu
&ndash; získání a zobrazení seznamu objektů uložených v&nbsp;Miniu
v&nbsp;určitém <i>bucketu</i>. Jedná se o relativně jednoduchou operaci,
protože klient pro Minio nabízí přímo k&nbsp;tomu určenou metodu nazvanou
<strong>list_objects</strong>, které se pouze předá jméno bucketu. Samozřejmě
je ovšem nejprve nutné se připojit k&nbsp;Miniu se specifikací adresy a dvojice
klíčů (ty lze zajistit přidáním nového uživatele přes konzoli Minia):</p>

<pre>
client = Minio(
    minio_address,
    minio_access_key,
    minio_secret_key,
    secure=False
)
</pre>

<p>Celý příklad bude po úpravách vypadat následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from minio import Minio
&nbsp;
bucket_name = "sensors"
minio_address = "localhost:9000"
minio_access_key = "tester"
minio_secret_key = "tester01"
&nbsp;
&nbsp;
def <strong>main</strong>():
    client = Minio(
        minio_address,
        minio_access_key,
        minio_secret_key,
        secure=False
    )
&nbsp;
    found = client.bucket_exists(bucket_name)
    print("Bucket found:", found)
&nbsp;
    objects = client.list_objects(bucket_name, recursive=False)
&nbsp;
    for obj in objects:
        print(obj.bucket_name, obj.object_name, obj.last_modified,
              obj.etag, obj.size, obj.content_type)
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
</pre>

<p>Příklad výsledku pro náhodně přidané soubory (objekty):</p>

<pre>
$ <strong>python3 sensors_v02.py</strong>
&nbsp;
Bucket found: True
sensors pyreverse 2022-05-06 14:45:33.030000+00:00 f992f0e93eaa023caa2e9a735c344fa9 1857 None
sensors storage.go 2022-05-06 14:45:28.235000+00:00 63a36e97f46ac991ebe883c569a0fd5b 40041 None
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Seznam datových souborů s&nbsp;výsledky měření</h2>

<p>Nyní do Minia přidáme několik datových souborů, jejichž jména budou
odpovídat jménům senzorů. Bude se jednat o soubory ve formátu CSV obsahující
dvojici sloupců. Viz též příklad uvedený <a href="#k02">ve druhé kapitole</a>,
popř.&nbsp;seznam souborů nabídnutých v&nbsp;repositáři s&nbsp;demonstračními
příklady.</p>

<p>Datové soubory lze nahrát přes konzoli Minia (<strong>mc</strong>) nebo přes
webovou administrační konzoli (zde ručně):</p>

<a href="https://www.root.cz/obrazek/574165/"><img src="https://i.iinfo.cz/images/295/pywebio-3-4-prev.png" class="image-574165" data-prev-filename="https://i.iinfo.cz/images/295/pywebio-3-4-prev.png" data-prev-width="370" data-prev-height="227" data-large-filename="https://i.iinfo.cz/images/295/pywebio-3-4-large.png" data-large-width="720" data-large-height="442" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="227" /></a>
<p><i>Obrázek 4: Přidání nového uživatele přes administrační konzoli.</i></p>

<a href="https://www.root.cz/obrazek/574166/"><img src="https://i.iinfo.cz/images/295/pywebio-3-5-prev.png" class="image-574166" data-prev-filename="https://i.iinfo.cz/images/295/pywebio-3-5-prev.png" data-prev-width="370" data-prev-height="212" data-large-filename="https://i.iinfo.cz/images/295/pywebio-3-5-large.png" data-large-width="720" data-large-height="412" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="212" /></a>
<p><i>Obrázek 5: Přidání souboru do Minia přes administrační konzoli.</i></p>

<a href="https://www.root.cz/obrazek/574167/"><img src="https://i.iinfo.cz/images/295/pywebio-3-6-prev.png" class="image-574167" data-prev-filename="https://i.iinfo.cz/images/295/pywebio-3-6-prev.png" data-prev-width="370" data-prev-height="113" data-large-filename="https://i.iinfo.cz/images/295/pywebio-3-6-large.png" data-large-width="720" data-large-height="221" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="113" /></a>
<p><i>Obrázek 6: Seznam souborů (objektů) uložených v&nbsp;Miniu.</i></p>

<p>Po opětovném spuštění příkladu <a href="#k07">z&nbsp;předchozí kapitoly</a>
získáme tyto výsledky (časová razítka se samozřejmě budou odlišovat):</p>

<pre>
$ <strong>python3 sensors_v02.py</strong>
&nbsp;
Bucket found: True
sensors sensor_1.csv 2022-05-06 16:04:59.590000+00:00 6761c54a2d4d19342b0583a2350c2007 21181 None
sensors sensor_2.csv 2022-05-06 16:05:03.488000+00:00 cdc3fca684b7e7d3cba1a040caf6b571 1135 None
sensors sensor_3.csv 2022-05-06 16:05:06.402000+00:00 fbbfc6fa348238aecffca3b8fad32716 1507 None
sensors sensor_4.csv 2022-05-06 16:05:09.237000+00:00 e6822d4390400f5045a787c169036a1c 1089 None
sensors sensor_5.csv 2022-05-06 16:05:11.655000+00:00 5a48f56ce4057e360473007af2e82284 1338 None
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Načtení objektů z&nbsp;Minia</h2>

<p>Dalším krokem bude načtení objektů (tedy uložených dat bez jejich další
interpretace) z&nbsp;Minia. Jedná se o rychlou operaci, která však vyžaduje
dekódování dat, protože údaje poskytnuté přímo Miniem obsahují (kromě dalších
věcí) i krátkou hlavičku. Ve chvíli, kdy známe jméno objektu a bucketu,
v&nbsp;němž je objekt uložen, je získání původních dat otázka dvou řádků
kódu:</p>

<pre>
response = client.get_object(bucket_name, obj.object_name)
data = response.read().decode()
...
...
...
</pre>

<p>Popř.&nbsp;i s&nbsp;kontrolou chyb a uzavřením prostředků:</p>

<pre>
try:
    response = client.get_object(bucket_name, obj.object_name)
    data = response.read().decode()
    ...
    ...
    ...
except ResponseError as err:
    print(err)
finally:
    response.close()
    response.release_conn()
</pre>

<p>Upravená verze příkladu, který získá všechna data uložená v&nbsp;daném
bucketu, může vypadat takto:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from minio import Minio, ResponseError
&nbsp;
bucket_name = "sensors"
minio_address = "localhost:9000"
minio_access_key = "tester"
minio_secret_key = "tester01"
&nbsp;
&nbsp;
def <strong>main</strong>():
    client = Minio(
        minio_address,
        minio_access_key,
        minio_secret_key,
        secure=False
    )
&nbsp;
    found = client.bucket_exists(bucket_name)
    print("Bucket found:", found)
&nbsp;
    objects = client.list_objects(bucket_name, recursive=False)
&nbsp;
    for obj in objects:
        print(obj.bucket_name, obj.object_name, obj.last_modified,
              obj.etag, obj.size, obj.content_type)
        try:
            response = client.get_object(bucket_name, obj.object_name)
            data = response.read().decode()
            print(data)
        except ResponseError as err:
            print(err)
        finally:
            response.close()
            response.release_conn()
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přečtení dat uložených ve formátu CSV</h2>

<p>Víme, že data získaná z&nbsp;Minia jsou ve skutečnosti uložena ve formátu
CSV, takže je nutné je správně interpretovat. Pro tento účel použijeme knihovnu
Pandas, přičemž je při převodu vhodné použít paměťový buffer realizovaný
například v&nbsp;balíčku <strong>io.StringIO</strong>. Načtení objektu
z&nbsp;Minia a jeho převod na datový rámec knihovny Pandas může vypadat
následovně. Načtení i převod do datového rámce je realizován na pouhých tří
řádcích:</p>

<pre>
response = client.get_object(bucket_name, obj.object_name)
buff = StringIO(response.read().decode())
data = pd.read_csv(buff)
</pre>

<p>Úplný zdrojový kód takto upraveného demonstračního příkladu bude vypadat
následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from minio import Minio, ResponseError
import pandas as pd
from io import StringIO
&nbsp;
bucket_name = "sensors"
minio_address = "localhost:9000"
minio_access_key = "tester"
minio_secret_key = "tester01"
&nbsp;
&nbsp;
def <strong>main</strong>():
    client = Minio(
        minio_address,
        minio_access_key,
        minio_secret_key,
        secure=False
    )
&nbsp;
    found = client.bucket_exists(bucket_name)
    print("Bucket found:", found)
&nbsp;
    objects = client.list_objects(bucket_name, recursive=False)
&nbsp;
    for obj in objects:
        print(obj.bucket_name, obj.object_name, obj.last_modified,
              obj.etag, obj.size, obj.content_type)
        try:
            response = client.get_object(bucket_name, obj.object_name)
            buff = StringIO(response.read().decode())
            data = pd.read_csv(buff)
            print(data)
        except ResponseError as err:
            print(err)
        finally:
            response.close()
            response.release_conn()
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zobrazení grafu z&nbsp;dat načtených z&nbsp;Minia</h2>

<p>Nyní zkombinujeme kód, který byl ukázán <a href="#k03">ve třetí kapitole</a>
(zobrazení grafu na základě obsahu datového rámce) a taktéž <a
href="#k10">v&nbsp;kapitole předchozí</a> (načtení datového rámce
z&nbsp;Minia). Skutečně se prakticky jedná o spojení obou příkladů
s&nbsp;nepatrným refaktoringem, takže se přímo podívejme na to, jak tento
příklad bude vypadat:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from minio import Minio, ResponseError
import pandas as pd
from io import StringIO
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
&nbsp;
matplotlib.use('agg')  # required, use a non-interactive backend
&nbsp;
bucket_name = "sensors"
minio_address = "localhost:9000"
minio_access_key = "tester"
minio_secret_key = "tester01"
&nbsp;
&nbsp;
def <strong>create_graph</strong>(filename, df):
    <i># Linear regression</i>
    time = df["Time"]
    messages = df["Value"]
&nbsp;
    <i># Linear regression</i>
    x = np.arange(0, len(messages))
    coef = np.polyfit(x, messages, 1)
    poly1d_fn = np.poly1d(coef)
&nbsp;
    <i># Create a figure containing a single axes.</i>
    fig, ax = plt.subplots()
&nbsp;
    <i># Create new graph</i>
    ax.plot(messages, "b", poly1d_fn(np.arange(0, len(messages))), "y--")
&nbsp;
    <i># Title of a graph</i>
    ax.set_title("Sensor values")
&nbsp;
    <i># Add a label to x-axis</i>
    ax.set_xlabel("Time")
&nbsp;
    <i># Add a label to y-axis</i>
    ax.set_ylabel("Values")
&nbsp;
    ax.legend(loc="upper right")
&nbsp;
    <i># And save the plot into raster format and vector format as well</i>
    fig.savefig(filename)
&nbsp;
&nbsp;
def <strong>main</strong>():
    client = Minio(
        minio_address,
        minio_access_key,
        minio_secret_key,
        secure=False
    )
&nbsp;
    found = client.bucket_exists(bucket_name)
    print("Bucket found:", found)
&nbsp;
    objects = client.list_objects(bucket_name, recursive=False)
&nbsp;
    for obj in objects:
        print(obj.bucket_name, obj.object_name, obj.last_modified,
              obj.etag, obj.size, obj.content_type)
        try:
            response = client.get_object(bucket_name, obj.object_name)
            buff = StringIO(response.read().decode())
            df = pd.read_csv(buff)
            filename = obj.object_name[0:-4] + ".png"
            create_graph(filename, df)
        except ResponseError as err:
            print(err)
        finally:
            response.close()
            response.release_conn()
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
</pre>

<p>Tento skript vytvoří tolik grafů, kolik datových souborů našel
v&nbsp;Miniu:</p>

<img src="https://i.iinfo.cz/images/295/pywebio-3-7.png" class="image-574168" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 7: Druhý vykreslený graf.</i></p>

<img src="https://i.iinfo.cz/images/295/pywebio-3-8.png" class="image-574169" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="640" height="480" />
<p><i>Obrázek 8: Třetí vykreslený graf.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Od skriptu k&nbsp;dynamické webové stránce s&nbsp;využitím PyWebIO</h2>

<p>V&nbsp;rámci dalších kapitol předěláme výše uvedený skript do podoby webové
aplikace, která uživateli nabídne seznam senzorů a poté možnost si zobrazit
příslušný graf popř.&nbsp;přímo data získaná senzorem. Pro tento účel použijeme
knihovnu PyWebIO, s&nbsp;níž jsme se již na stránkách Roota seznámili.</p>

<p>Knihovna <i>PyWebIO</i> je nabízena přes <a
href="https://pypi.org/project/pywebio">PyPi</a>, takže její instalace by měla
být jednoduchá a přímočará. Knihovnu nainstalujeme pro aktuálně přihlášeného
uživatele:</p>

<pre>
$ p<strong>ip3 install --user pywebio</strong>
&nbsp;
Collecting pywebio
  Downloading https://files.pythonhosted.org/packages/a5/bd/d4e775b6bf43dc83d1c1c596ae91c5ce58baf9199ac28b67b8886a9de8aa/pywebio-1.6.0.tar.gz (468kB)
    100% |████████████████████████████████| 471kB 200kB/s 
Collecting tornado&gt;=5.0 (from pywebio)
  Downloading https://files.pythonhosted.org/packages/01/d1/8750ad20cbcefb499bb8b405e243f83c2c89f78d139e6f8c8d800640f554/tornado-6.1-cp36-cp36m-manylinux1_x86_64.whl (427kB)
    100% |████████████████████████████████| 430kB 874kB/s 
Collecting user-agents (from pywebio)
  Downloading https://files.pythonhosted.org/packages/8f/1c/20bb3d7b2bad56d881e3704131ddedbb16eb787101306887dff349064662/user_agents-2.2.0-py3-none-any.whl
Collecting ua-parser&gt;=0.10.0 (from user-agents-&gt;pywebio)
  Downloading https://files.pythonhosted.org/packages/9d/22/4d16b08db329fd440eed366d35e4dd7195c9babb4ecac5218f28081522a2/ua_parser-0.10.0-py2.py3-none-any.whl
Building wheels for collected packages: pywebio
  Running setup.py bdist_wheel for pywebio ... done
  Stored in directory: /home/ptisnovs/.cache/pip/wheels/fb/29/d3/09c684d68476f021ef044809643cee71560603503907dd42b3
Successfully built pywebio
Installing collected packages: tornado, ua-parser, user-agents, pywebio
Successfully installed pywebio-1.6.0 tornado-6.1 ua-parser-0.10.0 user-agents-2.2.0
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Prázdná dynamická webová stránka</h2>

<p>Začneme tou nejjednodušší možnou podobou webové aplikace &ndash; stránkou,
v&nbsp;níž se pouze zobrazí informační zpráva. První varianta takové aplikace
může vypadat následovně:</p>

<pre>
from pywebio import *
from pywebio.input import *
from pywebio.output import *
&nbsp;
&nbsp;
def <strong>main</strong>():
    put_info("Výsledky měření senzorů")
&nbsp;
&nbsp;
start_server(main, port=8080, debug=True)
</pre>

<p>Po spuštění tohoto skriptu by se měl spustit webový server na zadané adrese,
který uživateli poskytne následující podobu webové aplikace:</p>

<a href="https://www.root.cz/obrazek/574170/"><img src="https://i.iinfo.cz/images/295/pywebio-3-9-prev.png" class="image-574170" data-prev-filename="https://i.iinfo.cz/images/295/pywebio-3-9-prev.png" data-prev-width="370" data-prev-height="36" data-large-filename="https://i.iinfo.cz/images/295/pywebio-3-9-large.png" data-large-width="720" data-large-height="71" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="36" /></a>
<p><i>Obrázek 9: Webová aplikace v&nbsp;její první (surové) podobě nenabízí
příliš funkcí.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zobrazení seznamu senzorů</h2>

<p>V&nbsp;dalším kroku zobrazíme ve webové aplikaci seznam senzorů. Bude se
jednat o upravený seznam objektů získaných z&nbsp;Minia:</p>

<pre>
objects = client.list_objects(bucket_name, recursive=False)
</pre>

<p>Tento seznam zobrazíme formou tabulky, která se vytvoří (poměrně primitivním
a neidiomatickým způsobem) například takto:</p>

<pre>
table = [['Senzor', 'Datum', 'Graf', 'Info']]
&nbsp;
for obj in objects:
    row = [obj.object_name,
           obj.last_modified,
           "Graf",
           "Info"]
    table.append(row)
</pre>

<p>Zobrazení tabulky je přímočaré:</p>

<pre>
put_table(table)
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<img src="https://i.iinfo.cz/images/295/pywebio-3-11.png" class="image-574172" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="592" height="383" />
<p><i>Obrázek 10: Seznam senzorů zobrazených ve webové aplikaci.</i></p>

<p>A pro úplnost si ukažme celý zdrojový kód tohoto demonstračního
příkladu:</p>

<pre>
from pywebio import *
from pywebio.input import *
from pywebio.output import *
&nbsp;
from minio import Minio, ResponseError
&nbsp;
&nbsp;
bucket_name = "sensors"
minio_address = "localhost:9000"
minio_access_key = "tester"
minio_secret_key = "tester01"
&nbsp;
client = Minio(
    minio_address,
    minio_access_key,
    minio_secret_key,
    secure=False
)
&nbsp;
&nbsp;
def <strong>main</strong>():
    put_info("Výsledky měření senzorů")
    found = client.bucket_exists(bucket_name)
&nbsp;
    if not found:
        put_error("Data nelze přečíst - chybné připojení k Miniu")
&nbsp;
    objects = client.list_objects(bucket_name, recursive=False)
&nbsp;
    table = [['Senzor', 'Datum', 'Graf', 'Info']]
&nbsp;
    for obj in objects:
        row = [obj.object_name,
               obj.last_modified,
               "Graf",
               "Info"]
        table.append(row)
&nbsp;
    put_table(table)
&nbsp;
start_server(main, port=8080, debug=True)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Popup okna v&nbsp;PyWebIO</h2>

<p>U každého senzoru by se měly objevit ovládací prvky určené pro zobrazení dat
získaných senzorem popř.&nbsp;určené pro zobrazení grafu získaného
z&nbsp;těchto dat. Tyto údaje se mají zobrazit v&nbsp;popup okně, které se
v&nbsp;PyWebIO vytvoří zavoláním funkce <strong>popup</strong>, které se předá
titulek a taktéž seznam ovládacích prvků:</p>

<pre>
def <strong>show_data</strong>(sensor):
    popup(f"Data ze senzoru {sensor}", [
        put_text(f"Data ze senzoru {sensor}"),
    ])
</pre>

<p>Musíme tedy rozšířit tabulku se seznamem vektorů o ovládací prvky, po
jejichž výběru se zavolá funkce <strong>show_data</strong>
popř.&nbsp;<strong>show_graph</strong>. To lze zajistit mnoha způsoby,
například následovně:</p>

<pre>
for obj in objects:
    row = [obj.object_name,
           obj.last_modified,
           <strong>put_button("Graf", onclick=partial(show_graph, sensor=obj.object_name))</strong>,
           <strong>put_button("Data", onclick=partial(show_data, sensor=obj.object_name))</strong>]
    table.append(row)
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<img src="https://i.iinfo.cz/images/295/pywebio-3-11.png" class="image-574172" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="592" height="383" />
<p><i>Obrázek 11: Upravený seznam senzorů s&nbsp;novými ovládacími
prvky.</i></p>

<a href="https://www.root.cz/obrazek/574173/"><img src="https://i.iinfo.cz/images/295/pywebio-3-12-prev.png" class="image-574173" data-prev-filename="https://i.iinfo.cz/images/295/pywebio-3-12-prev.png" data-prev-width="370" data-prev-height="204" data-large-filename="https://i.iinfo.cz/images/295/pywebio-3-12.png" data-large-width="687" data-large-height="379" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="204" /></a>
<p><i>Obrázek 12: Prozatím prázdné popup okno s&nbsp;tabulkou dat.</i></p>

<a href="https://www.root.cz/obrazek/574174/"><img src="https://i.iinfo.cz/images/295/pywebio-3-13-prev.png" class="image-574174" data-prev-filename="https://i.iinfo.cz/images/295/pywebio-3-13-prev.png" data-prev-width="370" data-prev-height="201" data-large-filename="https://i.iinfo.cz/images/295/pywebio-3-13.png" data-large-width="693" data-large-height="377" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="201" /></a>
<p><i>Obrázek 13: Prozatím prázdné popup okno s&nbsp;grafem.</i></p>

<p>A pro úplnost si opět ukažme celý zdrojový kód tohoto demonstračního
příkladu:</p>

<pre>
from pywebio import *
from pywebio.input import *
from pywebio.output import *
from functools import partial
&nbsp;
from minio import Minio, ResponseError
&nbsp;
&nbsp;
bucket_name = "sensors"
minio_address = "localhost:9000"
minio_access_key = "tester"
minio_secret_key = "tester01"
&nbsp;
client = Minio(
    minio_address,
    minio_access_key,
    minio_secret_key,
    secure=False
)
&nbsp;
&nbsp;
def <strong>show_data</strong>(sensor):
    popup(f"Data ze senzoru {sensor}", [
        put_text(f"Data ze senzoru {sensor}"),
    ])
&nbsp;
&nbsp;
def <strong>show_graph</strong>(sensor):
    popup(f"Graf pro senzor {sensor}", [
        put_text(f"Graf pro senzor {sensor}"),
    ])
&nbsp;
&nbsp;
def <strong>main</strong>():
    put_info("Výsledky měření senzorů")
    found = client.bucket_exists(bucket_name)
&nbsp;
    if not found:
        put_error("Data nelze přečíst - chybné připojení k Miniu")
&nbsp;
    objects = client.list_objects(bucket_name, recursive=False)
&nbsp;
    table = [['Senzor', 'Datum', 'Graf', 'Info']]
&nbsp;
    for obj in objects:
        row = [obj.object_name,
               obj.last_modified,
               put_button("Graf", onclick=partial(show_graph, sensor=obj.object_name)),
               put_button("Data", onclick=partial(show_data, sensor=obj.object_name))]
        table.append(row)
&nbsp;
    put_table(table)
&nbsp;
&nbsp;
start_server(main, port=8080, debug=True)
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Zobrazení popup okna s&nbsp;daty senzoru</h2>

<p>Předposlední funkcí, kterou ještě musíme implementovat, je zobrazení tabulky
s&nbsp;daty senzoru. Samotná data načteme do datového rámce knihovny Pandas a
potom datový rámec &bdquo;vykreslíme&ldquo; do HTML fragmentu. Posléze již
postačuje tento fragment vložit do popup okna funkcí
<strong>put_html</strong>:</p>

<pre>
def <strong>show_data</strong>(bucket_name, sensor):
    response = client.get_object(bucket_name, sensor)
    buff = StringIO(response.read().decode())
    df = pd.read_csv(buff)
&nbsp;
    popup(f"Data ze senzoru {sensor}", [
        put_text(f"Data ze senzoru {sensor}"),
        put_html(df.to_html(border=0)),
    ])
</pre>

<a href="https://www.root.cz/obrazek/574175/"><img src="https://i.iinfo.cz/images/295/pywebio-3-14-prev.png" class="image-574175" data-prev-filename="https://i.iinfo.cz/images/295/pywebio-3-14-prev.png" data-prev-width="316" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/295/pywebio-3-14-large.png" data-large-width="614" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="316" height="270" /></a>
<p><i>Obrázek 14: Zobrazení obsahu datového rámce do popup okna, které je
pochopitelně plně skrolovatelné.</i></p>

<pre>
from pywebio import *
from pywebio.input import *
from pywebio.output import *
from functools import partial
&nbsp;
from io import StringIO
from minio import Minio, ResponseError
&nbsp;
import pandas as pd
&nbsp;
&nbsp;
bucket_name = "sensors"
minio_address = "localhost:9000"
minio_access_key = "tester"
minio_secret_key = "tester01"
&nbsp;
client = Minio(
    minio_address,
    minio_access_key,
    minio_secret_key,
    secure=False
)
&nbsp;
&nbsp;
def <strong>show_data</strong>(bucket_name, sensor):
    response = client.get_object(bucket_name, sensor)
    buff = StringIO(response.read().decode())
    df = pd.read_csv(buff)
&nbsp;
    popup(f"Data ze senzoru {sensor}", [
        put_text(f"Data ze senzoru {sensor}"),
        put_html(df.to_html(border=0)),
    ])
&nbsp;
&nbsp;
def <strong>show_graph</strong>(sensor):
    popup(f"Graf pro senzor {sensor}", [
        put_text(f"Graf pro senzor {sensor}"),
    ])
&nbsp;
&nbsp;
def <strong>main</strong>():
    put_info("Výsledky měření senzorů")
    found = client.bucket_exists(bucket_name)
&nbsp;
    if not found:
        put_error("Data nelze přečíst - chybné připojení k Miniu")
&nbsp;
    objects = client.list_objects(bucket_name, recursive=False)
&nbsp;
    table = [['Senzor', 'Datum', 'Graf', 'Info']]
&nbsp;
    for obj in objects:
        row = [obj.object_name,
               obj.last_modified,
               put_button("Graf", onclick=partial(show_graph, sensor=obj.object_name)),
               put_button("Data", onclick=partial(show_data, bucket_name=bucket_name, sensor=obj.object_name))]
        table.append(row)
&nbsp;
    put_table(table)
&nbsp;
&nbsp;
start_server(main, port=8080, debug=True)
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Zobrazení popup okna s&nbsp;grafem</h2>

<p>V&nbsp;poslední variantě našeho programu zajistíme vykreslení grafu
s&nbsp;údaji získanými z&nbsp;vybraného senzoru do operační paměti
s&nbsp;následným zobrazením popup okna s&nbsp;tímto grafem. Graf vykreslujeme
do operační paměti (přesněji řečeno do bufferu alokovaného v&nbsp;paměti)
z&nbsp;toho důvodu, aby nebylo nutné na straně serveru vytvářet dočasný
obrázek, který by se posléze přenesl na klienta (vytváření dočasných souborů
není z&nbsp;mnoha hledisek efektivní a ani pro to není v&nbsp;tomto případě
žádný praktický důvod).</p>

<p>Prázdný graf je zkonstruován následovně:</p>

<pre>
fig, ax = plt.subplots()
</pre>

<p>Do grafu posléze vykreslíme potřebné údaje, tj.&nbsp;jak průběh hodnot, tak
i osy, legendu, regresní úsečku atd.:</p>

<pre>
ax.plot(messages, "b", poly1d_fn(np.arange(0, len(messages))), "y--")
...
...
...
</pre>

<p>Po provedení těchto operací posléze zajistíme vykreslení grafu do paměťového
bufferu, jenž bude obsahovat rastrovou reprezentaci grafu. Ihned po vykreslení
grafu uvolníme paměť alokovanou pro graf (což ovšem není vždy nutné
provádět):</p>

<pre>
buf = io.BytesIO()
fig.savefig(buf)
fig.clear()
plt.close(fig)
</pre>

<p>Graf, resp.&nbsp;přesněji řečeno rastrový obrázek s&nbsp;grafem, se vloží do
popup okna na webové stránce příkazem <strong>put_image</strong>:</p>

<pre>
    popup(f"Graf pro senzor {name}", [
        put_text(f"Graf pro senzor {name}"),
        put_image(buf.getvalue())
    ])
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<a href="https://www.root.cz/obrazek/574176/"><img src="https://i.iinfo.cz/images/295/pywebio-3-15-prev.png" class="image-574176" data-prev-filename="https://i.iinfo.cz/images/295/pywebio-3-15-prev.png" data-prev-width="367" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/295/pywebio-3-15.png" data-large-width="695" data-large-height="512" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="367" height="270" /></a>
<p><i>Obrázek 15: Jeden z&nbsp;grafů vybraných uživatelem a zobrazených
v&nbsp;popup okně.</i></p>

<p>Úplný zdrojový kód poslední varianty demonstračního příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from pywebio import *
from pywebio.input import *
from pywebio.output import *
from functools import partial
&nbsp;
from io import StringIO
from minio import Minio, ResponseError
&nbsp;
import io
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
&nbsp;
matplotlib.use('agg')  # required, use a non-interactive backend
&nbsp;
bucket_name = "sensors"
minio_address = "localhost:9000"
minio_access_key = "tester"
minio_secret_key = "tester01"
&nbsp;
client = Minio(
    minio_address,
    minio_access_key,
    minio_secret_key,
    secure=False
)
&nbsp;
&nbsp;
def <strong>read_data_frame</strong>(bucket_name, sensor):
    response = client.get_object(bucket_name, sensor)
    buff = StringIO(response.read().decode())
    return pd.read_csv(buff)
&nbsp;
&nbsp;
def <strong>show_data</strong>(bucket_name, sensor):
    name = sensor[0:-4]
&nbsp;
    df = read_data_frame(bucket_name, sensor)
&nbsp;
    popup(f"Data ze senzoru {name}", [
        put_text(f"Data ze senzoru {name}"),
        put_html(df.to_html(border=0)),
    ])
&nbsp;
&nbsp;
def <strong>show_graph</strong>(bucket_name, sensor):
    name = sensor[0:-4]
&nbsp;
    df = read_data_frame(bucket_name, sensor)
&nbsp;
    <i># Linear regression</i>
    time = df["Time"]
    messages = df["Value"]
&nbsp;
    <i># Linear regression</i>
    x = np.arange(0, len(messages))
    coef = np.polyfit(x, messages, 1)
    poly1d_fn = np.poly1d(coef)
&nbsp;
    <i># Create a figure containing a single axes.</i>
    fig, ax = plt.subplots()
&nbsp;
    <i># Create new graph</i>
    ax.plot(messages, "b", poly1d_fn(np.arange(0, len(messages))), "y--")
&nbsp;
    <i># Title of a graph</i>
    ax.set_title("Sensor values")
&nbsp;
    <i># Add a label to x-axis</i>
    ax.set_xlabel("Time")
&nbsp;
    <i># Add a label to y-axis</i>
    ax.set_ylabel("Values")
&nbsp;
    ax.legend(loc="upper right")
&nbsp;
    <i># Save into buffer, not into file</i>
    buf = io.BytesIO()
    fig.savefig(buf)
    fig.clear()
    plt.close(fig)
&nbsp;
    popup(f"Graf pro senzor {name}", [
        put_text(f"Graf pro senzor {name}"),
        put_image(buf.getvalue())
    ])
&nbsp;
&nbsp;
def <strong>main</strong>():
    put_info("Výsledky měření senzorů")
    found = client.bucket_exists(bucket_name)
&nbsp;
    if not found:
        put_error("Data nelze přečíst - chybné připojení k Miniu")
&nbsp;
    objects = client.list_objects(bucket_name, recursive=False)
&nbsp;
    table = [['Senzor', 'Datum', 'Graf', 'Info']]
&nbsp;
    for obj in objects:
        row = [obj.object_name,
               obj.last_modified,
               put_button("Graf", onclick=partial(show_graph, bucket_name=bucket_name, sensor=obj.object_name)),
               put_button("Data", onclick=partial(show_data, bucket_name=bucket_name, sensor=obj.object_name))]
        table.append(row)
&nbsp;
    put_table(table)
&nbsp;
&nbsp;
start_server(main, port=8080, debug=True)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Závěr</h2>

<p>Z&nbsp;jednotlivých fragmentů, konkrétně ze skriptu pro zobrazení grafu a ze
skriptu pro načtení dat z&nbsp;Minia, lze (s&nbsp;alespoň základní znalostí
možností knihovny PyWebIO) sestavit celou &bdquo;webovou aplikaci&ldquo;
skutečně přibližně za půl hodiny (tedy mnohem rychleji, než trvalo sepsání
tohoto článku :-). Nejedná se sice o zabezpečenou aplikaci určenou pro nasazení
v&nbsp;prostředí divokého západu Internetu, ale může se jednat o základ poměrně
robustní intranetové aplikace, navíc vytvořitelné skutečně pouze se znalostí
Pythonu a jeho knihoven. Vyšší cíle, tj.&nbsp;například tvorbu webových
aplikací typu Google Doc, si PyWebIO nedává.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/pywebio-interaktivni-webove-dialogy-a-formulare-v-cistem-pythonu/">předminule</a>,
<a
href="https://www.root.cz/clanky/pywebio-interaktivni-webove-dialogy-a-formulare-v-cistem-pythonu-dokonceni/">minule</a>
i dnes popsaných demonstračních příkladů určených pro programovací jazyk Python
3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_basic_output.py</td><td>zobrazení běžného textu ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/01_basic_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/01_basic_output.py</a></td></tr>
<tr><td> 2</td><td>02_table.py</td><td>zobrazení tabulky ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/02_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/02_table.py</a></td></tr>
<tr><td> 3</td><td>03_table.py</td><td>programová příprava tabulky zobrazené ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/03_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/03_table.py</a></td></tr>
<tr><td> 4</td><td>04_table.py</td><td>programová příprava tabulky zobrazené ve webovém prohlížeči</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/04_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/04_table.py</a></td></tr>
<tr><td> 5</td><td>05_color.py</td><td>podpora pro symbolické názvy barev</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/05_color.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/05_color.py</a></td></tr>
<tr><td> 6</td><td>06_message.py</td><td>výpis ostylovaných zpráv do webové stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/06_message.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/06_message.py</a></td></tr>
<tr><td> 7</td><td>07_put_html.py</td><td>podpora pro výstup HTML kódu z&nbsp;PyWebIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/07_put_html.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/07_put_html.py</a></td></tr>
<tr><td> 8</td><td>08_put_markdown.py</td><td>výpis textu (dokumentu) napsaného ve značkovacím jazyku Markdown</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/08_put_markdown.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/08_put_markdown.py</a></td></tr>
<tr><td> 9</td><td>09_put_code.py</td><td>výpis zdrojového kódu se zvýrazněním syntaxe</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/09_put_code.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/09_put_code.py</a></td></tr>
<tr><td>10</td><td>10_progress_bar.py</td><td>animované zobrazení průběhu operace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/10_progress_bar.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/10_progress_bar.py</a></td></tr>
<tr><td>11</td><td>11_loading.py</td><td>informace o výpočtu či načítání stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/11_loading.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/11_loading.py</a></td></tr>
<tr><td>12</td><td>12_loading.py</td><td>informace o výpočtu či načítání stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/12_loading.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/12_loading.py</a></td></tr>
<tr><td>13</td><td>13_input.py</td><td>vstupní textové pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/13_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/13_input.py</a></td></tr>
<tr><td>14</td><td>14_input.py</td><td>vylepšená vstupní textová pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/14_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/14_input.py</a></td></tr>
<tr><td>15</td><td>15_input_numbers.py</td><td>kontrola korektnosti numerických údajů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/15_input_numbers.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/15_input_numbers.py</a></td></tr>
<tr><td>16</td><td>16_input_numbers_required.py</td><td>povinné vstupní parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/16_input_numbers_required.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/16_input_numbers_required.py</a></td></tr>
<tr><td>17</td><td>17_radio.py</td><td>přepínače</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/17_radio.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/17_radio.py</a></td></tr>
<tr><td>18</td><td>18_checkbox.py</td><td>výběrové boxy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/18_checkbox.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/18_checkbox.py</a></td></tr>
<tr><td>19</td><td>19_actions.py</td><td>skupina akcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/19_actions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/19_actions.py</a></td></tr>
<tr><td>20</td><td>20_slider.py</td><td>interaktivní posuvník</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/20_slider.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/20_slider.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>21_more_inputs.py</td><td>postupné zadávání údajů v&nbsp;na sebe navazujících vstupních prvcích</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/21_more_inputs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/21_more_inputs.py</a></td></tr>
<tr><td>22</td><td>22_more_inputs.py</td><td>seskupení ovládacích prvků do jediného formuláře</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/22_more_inputs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/22_more_inputs.py</a></td></tr>
<tr><td>23</td><td>23_input_validators.py</td><td>specifikace typů vstupních dat ve vstupních formulářích</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/23_input_validators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/23_input_validators.py</a></td></tr>
<tr><td>24</td><td>24_better_validators.py</td><td>tvorba a využití vlastních validátorů ve vstupních formulářích</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/24_better_validators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/24_better_validators.py</a></td></tr>
<tr><td>25</td><td>25_popup.py</td><td>zobrazení vyskakovacího okna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/25_popup.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/25_popup.py</a></td></tr>
<tr><td>26</td><td>26_popup.py</td><td>zobrazení vyskakovacího okna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/26_popup.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/26_popup.py</a></td></tr>
<tr><td>27</td><td>27_rows.py</td><td>zarovnání prvků do sloupců, řádků a mřížek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/27_rows.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/27_rows.py</a></td></tr>
<tr><td>28</td><td>28_style.py</td><td>změna stylu zobrazení ovládacích prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/28_style.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/28_style.py</a></td></tr>
<tr><td>29</td><td>29_collapse.py</td><td>sady prvků, které je možné skrýt</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/29_collapse.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/29_collapse.py</a></td></tr>
<tr><td>30</td><td>30_image.py</td><td>zobrazení rastrového obrázku přečteného ze specifikovaného zdroje</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/30_image.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/30_image.py</a></td></tr>
<tr><td>31</td><td>31_mandelbrot.py</td><td>výpočet a zobrazení Mandelbrotovy množiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/31_mandelbrot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/31_mandelbrot.py</a></td></tr>
<tr><td>32</td><td>32_fm_synth.py</td><td>interaktivní změna parametrů výpočtu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/32_fm_synth.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/32_fm_synth.py</a></td></tr>
<tr><td>32</td><td>server1</td><td>Server s&nbsp;několika aplikacemi, první řešení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/server1">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/server1</a></td></tr>
<tr><td>33</td><td>server2</td><td>Server s&nbsp;několika aplikacemi, druhé řešení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/server2">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/server2</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>34</td><td>plot_values.py</td><td>načtení CSV s&nbsp;následným vykreslením grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/plot_values.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/plot_values.py</a></td></tr>
<tr><td>35</td><td>plot_values_pandas.py</td><td>použití knihovny Pandas pro načtení grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/plot_values_pandas.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/plot_values_pandas.py</a></td></tr>
<tr><td>36</td><td>plot_values_pandas_2.py</td><td>vylepšené vykreslení grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/plot_values_pandas_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/plot_values_pandas_2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>37</td><td>sensors_v01.py</td><td>kostra příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v01.py</a></td></tr>
<tr><td>38</td><td>sensors_v02.py</td><td>seznam datových souborů s&nbsp;výsledky měření</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v02.py</a></td></tr>
<tr><td>39</td><td>sensors_v03.py</td><td>načtení objektů z&nbsp;Minia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v03.py</a></td></tr>
<tr><td>40</td><td>sensors_v04.py</td><td>přečtení dat uložených ve formátu CSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v04.py</a></td></tr>
<tr><td>41</td><td>sensors_v05.py</td><td>zobrazení grafu z&nbsp;dat načtených z&nbsp;Minia</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v05.py</a></td></tr>
<tr><td>42</td><td>sensors_v06.py</td><td>prázdná dynamická webová stránka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v06.py</a></td></tr>
<tr><td>43</td><td>sensors_v07.py</td><td>zobrazení seznamu senzorů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v07.py</a></td></tr>
<tr><td>44</td><td>sensors_v08.py</td><td>popup okna v&nbsp;PyWebIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v08.py</a></td></tr>
<tr><td>45</td><td>sensors_v09.py</td><td>zobrazení popup okna s&nbsp;daty senzoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v09.py</a></td></tr>
<tr><td>46</td><td>sensors_v10.py</td><td>zobrazení popup okna s&nbsp;grafem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pywebio/sensors_v10.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Low code Python web framework<br />
<a href="https://www.pyweb.io/">https://www.pyweb.io/</a>
</li>

<li>Repositář projektu<br />
<a href="https://github.com/pywebio/PyWebIO/">https://github.com/pywebio/PyWebIO/</a>
</li>

<li>Getting Started<br />
<a href="https://www.pyweb.io/tutorial.html">https://www.pyweb.io/tutorial.html</a>
</li>

<li>Dokumentace<br />
<a href="https://pywebio.readthedocs.io/en/latest/">https://pywebio.readthedocs.io/en/latest/</a>
</li>

<li>Why PyWebIO?<br />
<a href="https://github.com/pywebio/PyWebIO/wiki/Why-PyWebIO%3F">https://github.com/pywebio/PyWebIO/wiki/Why-PyWebIO%3F</a>
</li>

<li>PyWebIO demos<br />
<a href="https://pywebio-demos.pywebio.online/">https://pywebio-demos.pywebio.online/</a>
</li>

<li>PyWebIO Chart Gallery<br />
<a href="https://pywebio-charts.pywebio.online/">https://pywebio-charts.pywebio.online/</a>
</li>

<li>Awesome Python<br />
<a href="https://awesome-python.com/">https://awesome-python.com/</a>
</li>

<li>A complete guide to web development in Python<br />
<a href="https://www.educative.io/blog/web-development-in-python">https://www.educative.io/blog/web-development-in-python</a>
</li>

<li>Python Web Development Tutorials<br />
<a href="https://realpython.com/tutorials/web-dev/">https://realpython.com/tutorials/web-dev/</a>
</li>

<li>What is Flask Python<br />
<a href="https://pythonbasics.org/what-is-flask-python/">https://pythonbasics.org/what-is-flask-python/</a>
</li>

<li>CherryPy<br />
<a href="https://cherrypy.dev/">https://cherrypy.dev/</a>
</li>

<li>Projekt Zenity<br />
<a href="https://wiki.gnome.org/Projects/Zenity">https://wiki.gnome.org/Projects/Zenity</a>
</li>

<li>Nástroj Dialog<br />
<a href="http://invisible-island.net/dialog/">http://invisible-island.net/dialog/</a>
</li>

<li>Plotly<br />
<a href="https://plotly.com/">https://plotly.com/</a>
</li>

<li>Bokeh<br />
<a href="https://bokeh.org/">https://bokeh.org/</a>
</li>

<li>pyecharts<br />
<a href="https://github.com/pyecharts/pyecharts/blob/master/README.en.md">https://github.com/pyecharts/pyecharts/blob/master/README.en.md</a>
</li>

<li>Tvorba grafů v&nbsp;Jupyter Notebooku s&nbsp;využitím knihovny Matplotlib<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/</a>
</li>

<li>Alternatives to PyWebIO<br />
<a href="https://stackshare.io/pywebio/alternatives">https://stackshare.io/pywebio/alternatives</a>
</li>

<li>The fastest way to build and share data apps &ndash; Streamlit<br />
<a href="https://streamlit.io/">https://streamlit.io/</a>
</li>

<li>Dash Enterprise<br />
<a href="https://plotly.com/dash/">https://plotly.com/dash/</a>
</li>

<li>pglet<br />
<a href="https://pglet.io/">https://pglet.io/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

