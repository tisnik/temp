<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Interaktivní tvorba grafického uživatelského rozhraní s využitím nástroje Pygubu (2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Interaktivní tvorba grafického uživatelského rozhraní s využitím nástroje Pygubu (2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o nástroji Pygubu určeného pro návrh grafického uživatelského rozhraní v Pythonu založeného na knihovně Tkinter si ukážeme některé další možnosti nabízené Tkinterem. Tyto možnosti jsou pochopitelně podporovány i v Pygubu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Interaktivní tvorba grafického uživatelského rozhraní s&nbsp;využitím nástroje Pygubu (2)</a></p>
<p><a href="#k02">2. Krátké připomenutí: příklady popsané minule</a></p>
<p><a href="#k03">3. Widgety v&nbsp;knihovně Tkinter</a></p>
<p><a href="#k04">4. Kontejnery</a></p>
<p><a href="#k05">5. Správce geometrie <strong>pack</strong></a></p>
<p><a href="#k06">6. Správce geometrie <strong>grid</strong></a></p>
<p><a href="#k07">7. Základní typy widgetů v&nbsp;knihovně Tk/Tkinter</a></p>
<p><a href="#k08">8. Vlastnosti widgetů</a></p>
<p><a href="#k09">9. &bdquo;Odtrhávací&ldquo; menu</a></p>
<p><a href="#k10">10. Realizace aplikace s&nbsp;&bdquo;odtrhávacím&ldquo; menu</a></p>
<p><a href="#k11">11. Klávesové zkratky navázané na jednotlivé položky menu</a></p>
<p><a href="#k12">*** 12. Realizace aplikace se specifikovanými klávesovými zkratkami</a></p>
<p><a href="#k13">13. Registrace handleru události po stisku klávesové zkratky</a></p>
<p><a href="#k14">14. Změna tématu zobrazení za běhu aplikace</a></p>
<p><a href="#k15">*** 15. Návrh aplikace s&nbsp;podobným chováním v&nbsp;nástroji Pygubu</a></p>
<p><a href="#k16">*** 16. Implementace handlerů zavolaných po stisku tlačítek na GUI</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Interaktivní tvorba grafického uživatelského rozhraní s&nbsp;využitím nástroje Pygubu (2)</h2>

<p><a
href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/">V&nbsp;úvodním
článku</a> o projektu <i>Pygubu</i> jsme si řekli základní informace o
možnostech poskytovaných tímto užitečným nástrojem. Ukázali jsme si taktéž
trojici jednoduchých demonstračních příkladů a na závěr jsme se zmínili o
některých alternativních projektech, především o RAD (Rapid Application
Development) nástrojích <a
href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/#k16">Lazarus</a>,
<a
href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/#k15">Gambas</a>
a <a
href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/#k17">Qt
Creator</a>. Dnes si ukážeme některé další možnosti, které jsou nabízeny
knihovnu Tkinter a podporovány v&nbsp;Pygubu. Většina dále popisovaných
vlastností bude ukázána i na demonstračních příkladech, podobně jako tomu bylo
i minule.</p>

<img src="https://i.iinfo.cz/images/323/pygubu2-1.png" class="image-445768" alt="&#160;" width="422" height="474" />
<p><i>Obrázek 1: Dnes pro porovnání použijeme nejnovější verzi Pygubu
designeru: 0.10.9, jejíž rozhraní je odlišné od předchozích verzí. Navíc byly
přidány i některé užitečné vlastnosti, například podpora pro specifikaci
klávesových zkratek u položek menu.</i></p>

<p><div class="rs-tip-major">Poznámka: možná se může zdát, že podrobnější popis
možností Tkinteru není při návrhu grafického uživatelského rozhraní důležitý,
protože všechny operace přece provede Pygubu automaticky za vývojáře. Ve
skutečnosti tomu tak není, a to zejména kvůli tomu, že Tkinter je velmi
flexibilní a dynamicky se chovající knihovnou, která se v&nbsp;mnoha ohledech
odlišuje například od &bdquo;čistého&ldquo; GTK. Navíc Pygubu používá
terminologii Tkinteru, kterou je tedy taktéž dobré znát.</div></p>

<img src="https://i.iinfo.cz/images/323/pygubu2-2.png" class="image-445769" alt="&#160;" width="642" height="537" />
<p><i>Obrázek 2: Grafické uživatelské rozhraní Pygubu designeru verze
0.10.9.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Krátké připomenutí: příklady popsané minule</h2>

<p>Připomeňme si, že <a
href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/">v&nbsp;předchozím
článku</a> jsme si ukázali trojici (velmi jednoduchých až triviálních)
demonstračních příkladů. Odkazy na tyto příklady naleznete <a
href="#k19">v&nbsp;devatenácté kapitole</a>.</p>

<img src="https://i.iinfo.cz/images/257/pygubu-1.png" class="image-445652" alt="&#160;" width="642" height="537" />
<p><i>Obrázek 3: Pro porovnání &ndash; takto vypadá Pygubu designer verze
0.9.</i></p>

<p><a
href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/#k07">V&nbsp;prvním
demonstračním příkladu</a> byla do okna aplikace (což je prvek grafického
uživatelského rozhraní nazvaný <i>frame</i>) vložena trojice ovládacích prvků
GUI (takzvaných <i>widgetů</i>, o nichž se podrobněji zmíníme v&nbsp;dalším
textu). Přitom byly jednotlivé ovládací prvky umístěny v&nbsp;rámci pravidelné
mřížky (<i>grid</i>), která je sice neviditelná, ovšem umožňuje
&bdquo;pozicovat&ldquo; jednotlivé prvky v&nbsp;GUI nezávisle na rozlišení
obrazovky a současně i nezávisle na zvolené velikosti okna. Toto řešení
představuje poměrně zásadní odklon od staršího tradičního pohledu na GUI,
v&nbsp;němž byly prvky umisťovány absolutně, tedy zadáním souřadnic vztažených
k&nbsp;nějakému významnému bodu okna (typicky k&nbsp;levému hornímu rohu
pracovní plochy okna &ndash; titulkový pruh ležel nad touto pracovní plochou),
a například změna měřítka celého GUI v&nbsp;rámci nastavení operačního systému
nebyla ve všech aplikacích korektně reflektována.</p>

<a href="https://www.root.cz/obrazek/445654/"><img src="https://i.iinfo.cz/images/257/pygubu-3-prev.png" class="image-445654" alt="&#160;" width="348" height="270" /></a>
<p><i>Obrázek 4: Rámec (okno aplikace) s&nbsp;dvojicí dalších prvků jsou
základem prvního příkladu.</i></p>

<p><a
href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/#k09">Ve
druhém demonstračním příkladu</a> jsme do hlavního (a současně i jediného) okna
aplikace vložili menu. Na panelu menu byly zobrazeny dvě položky
(<strong>File</strong> a <strong>Edit</strong>), po jejichž výběru se rozbalila
skutečná menu s&nbsp;dalšími položkami, přičemž každá položka byla
reprezentována jak textovým popisem, tak i ikonou uloženou v&nbsp;souboru <a
href="https://www.root.cz/clanky/png-is-not-gif/">typu PNG</a> (ovšem
podporovány jsou i další formáty, a to díky využití knihovny <a
href="https://python-pillow.org/">PIL/Pilow</a>; samotná knihovna Tkinter/Tk ze
známějších formátů podporuje pouze <a
href="https://www.root.cz/serialy/graficky-format-gif/">formát GIF</a>). U
textového popisku je možné zvolit index znaku, který bude podtržený a který lze
využít pro rychlý výběr dané položky (to mj.&nbsp;znamená, že by daný znak měl
být v&nbsp;rámci všech ostatních vybraných znaků v&nbsp;menu unikátní). Mezi
jednotlivými položkami menu je možné vložit takzvaný <i>separátor</i>, což je
pouze vizuální oddělovač, který nedokáže reagovat na operace prováděné
uživatelem.</p>

<a href="https://www.root.cz/obrazek/445658/"><img src="https://i.iinfo.cz/images/257/pygubu-7-prev.png" class="image-445658" alt="&#160;" width="301" height="270" /></a>
<p><i>Obrázek 5: Návrh vzhledu hlavního menu aplikace.</i></p>

<p><a
href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/#k12">Ve
třetím a současně i posledním demonstračním příkladu</a> bylo provedeno
propojení mezi ovládacími prvky grafického uživatelského rozhraní na jedné
straně s&nbsp;Pythonovským kódem na straně druhé. Co to ovšem znamená
v&nbsp;praxi? Pygubu nepracuje stejným způsobem jako plnohodnotné RAD, nedokáže
tedy propojit návrh GUI s&nbsp;programovým kódem. Ovšem umožňuje specifikovat
takzvanou <i>callback funkci</i> (ve skutečnosti však spíše callback metodu),
která se má zavolat ve chvíli, kdy je nějaký prvek grafického uživatelského
rozhraní vybrán. V&nbsp;Pygubu je nutné zapsat jméno příslušné metody, přičemž
vazba mezi tímto jménem a konkrétní metodou implementovanou v&nbsp;Pythonu je
provedena až v&nbsp;čase běhu aplikace (tedy v&nbsp;<i>runtime</i>). To je
poměrně významný posun oproti některým tradičním RAD, v&nbsp;nichž se tato
vazba vytváří již v&nbsp;čase návrhu aplikace (můžeme tedy říci, že
v&nbsp;<i>compile time</i>). Zde je nutné poznamenat, že oba přístupy mají své
přednosti, ale i zápory (kontrola aplikace při jejím návrhu versus mnohem větší
flexibilita).</p>

<img src="https://i.iinfo.cz/images/257/pygubu-11.png" class="image-445662" alt="&#160;" width="85" height="83" />
<p><i>Obrázek 6: Třetí demonstrační příklad po spuštění.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Widgety v&nbsp;knihovně Tkinter</h2>

<p>Základem prakticky všech v&nbsp;současnosti používaných grafických
uživatelských rozhraní jsou takzvané <strong>widgety</strong>, které jsou někdy
poněkud nepřesně označovány také jako <strong>komponenty</strong>.
Z&nbsp;pohledu uživatele aplikací s&nbsp;grafickým uživatelským rozhraním se
jedná o grafické prvky zobrazené na obrazovce, které mají předem známé chování
a předvídatelnou funkci. V&nbsp;mnoha případech je chování
<strong>widgetů</strong> standardizováno či alespoň doporučováno &ndash; viz
například doporučení pro (dnes již notně zastaralý) Motif, Microsoft Windows,
Mac OS a v&nbsp;neposlední řadě také doporučení pro GNOME a KDE.</p>

<img src="https://i.iinfo.cz/images/323/pygubu2-3.png" class="image-445770" alt="&#160;" width="320" height="144" />
<p><i>Obrázek 7: Základní sada widgetů nabízená v&nbsp;rámci Ttk.</i></p>

<p>Velká část widgetů se snaží svým vzhledem do jisté míry reflektovat objekty
z&nbsp;reálného světa (tlačítka, &bdquo;teploměry&ldquo;, přepínače programů,
objekty známé z&nbsp;papírových formulářů apod.). Z&nbsp;pohledu programátora
(a zejména programátora používajícího programovací jazyk Python) je naproti
tomu <strong>widget</strong> objektem, kterému lze nastavit určitý stav a který
reaguje na události, které při své práci generuje uživatel (přesouvání objektů
na obrazovce, stlačování obrazů tlačítek pomocí myši či stylusu, psaní textu,
gesta na dotykové obrazovce atd.).</p>

<img src="https://i.iinfo.cz/images/323/pygubu2-4.png" class="image-445771" alt="&#160;" width="269" height="100" />
<p><i>Obrázek 8: Widgety přidané v&nbsp;rámci projektu Pygubu (nejedná se tedy
o widgety ze standardní sady).</i></p>

<p>Mnoho widgetů nalezneme přímo v&nbsp;knihovně Tk, další pak v&nbsp;její
rozšířené variantě Ttk a projekt Pygubu navíc umožňuje vytvářet a přidávat
další typy widgetů plně integrovatelných do vyvíjených aplikací.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Kontejnery</h2>

<p>Samotné widgety nejsou na obrazovce prakticky nikdy zcela osamocené, ostatně
většina knihoven pro GUI by samostatný widget ani nedokázala zobrazit. Ve
skutečnosti se téměř vždy nachází v&nbsp;nějakém okně, dialogu či dalším
nadřazeném widgetu. Programátoři grafických uživatelských rozhraní se často
setkají s&nbsp;pojmem <strong>kontejner</strong>. Jedná se o komponentu, na
kterou lze vkládat různé <a href="#k03">widgety</a> a mnohdy i další
kontejnery. Obecně tak interně vzniká stromová datová struktura jejíž kořen je
představován plochou na obrazovce, na které jsou umístěna okna aplikací (dnes
je ovšem i samotná plocha obrazovky součástí větší virtuální plochy zobrazované
obecně na více monitorech). V&nbsp;těchto oknech se dále nachází kontejnery a
widgety. V&nbsp;mnoha grafických uživatelských rozhraních přitom mohou být
vybrané widgety (zdaleka ne však všechny) současně i kontejnery. Kontejnery
kromě jiného řeší i rozmístění widgetů na své ploše.</p>

<img src="https://i.iinfo.cz/images/323/pygubu2-5.png" class="image-445772" alt="&#160;" width="280" height="49" />
<p><i>Obrázek 9: Základní sada kontejnerů knihovny Tk.</i></p>

<p>Způsobů pro rozmisťování widgetů do kontejnerů existuje více. Základní
dělení je na kontejnery, kde jsou widgety umisťovány absolutně (do této
kategorie patří WinAPI, MFC, OWL a VCL) a naopak kontejnery, které widgety
většinou umisťují podle své velikosti a vzájemných vztahů (zde se nachází
javovské AWT, Swing, GTK, Qt, námi používané Tk/Tkinter a mnoho dalších).
V&nbsp;toolkitu <strong>Tk</strong> a tím pádem i v&nbsp;Tkinteru se mohou
widgety umisťovat několika různými způsoby (<i>pack</i>, <i>place</i> a
<i>grid</i>).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Správce geometrie <strong>pack</strong></h2>

<p>Nejprve si ukážeme použití správce geometrie nazvaného
<strong>pack</strong>, který, jak již jeho jméno naznačuje, zarovnává
jednotlivé widgety vedle sebe, a to buď ve směru horizontálním, či vertikálním.
V&nbsp;prvních verzích knihovny Tk se jednalo o jediného dostupného správce,
ale od verze 4.x (a ta vyšla již v&nbsp;počítačovém dávnověku) se objevují i
další dva typy správců. Tento manažer umožňuje vkládat komponenty do kontejneru
(typicky do okna) tak, že se zadává jejich relativní umístění (horizontální či
vertikální zarovnání):</p>

<pre>
button1.pack()
button2.pack()
button3.pack()
button4.pack()
</pre>

<img src="https://i.iinfo.cz/images/208/tkinter2-13.png" class="image-298369" alt="&#160;" width="170" height="218" />
<p><i>Obrázek 10: Widgety jsou umístěny pod sebou, což je implicitní chování
manažeru geometrie &bdquo;pack&ldquo;.</i></p>

<p>Pro jednodušší dialogy může být tento správce použitelnější jednodušeji, než
správce &bdquo;grid&ldquo; (není nutné počítat řádky a sloupce).</p>

<img src="https://i.iinfo.cz/images/323/pygubu2-6.png" class="image-445773" alt="&#160;" width="274" height="332" />
<p><i>Obrázek 11: Nastavení parametrů souvisejících se správcem rozvržení
&bdquo;pack&ldquo; v&nbsp;Pygubu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Správce geometrie <strong>grid</strong></h2>

<p>Správce geometrie <strong>pack</strong> zmíněný <a
href="#k05">v&nbsp;předchozí kapitole</a> je sice velmi flexibilní (zejména při
hierarchickém vkládání jednotlivých manažerů na sebe), v&nbsp;některých
případech je však rozmisťování widgetů pomocí tohoto manažeru problematické
nebo přinejmenším zdlouhavé. Z&nbsp;tohoto důvodu byl později vytvořen další
správce geometrie, který je celkem trefně nazvaný <i>grid</i>. S&nbsp;využitím
tohoto správce se widgety umisťují do pomyslné mřížky, přičemž rozměr mřížky
se, spolu s&nbsp;počtem sloupců a řádků, flexibilně mění podle tvarových
charakteristik vkládaných widgetů. Navíc je možné specifikovat, ke kterým
okrajům jednotlivých buněk budou widgety &bdquo;přilepeny&ldquo; &ndash; pokud
jsou například přilepeny na západním i východním okraji, bude daný widget
reagovat na změnu velikost dialogu a tím i změnu rozměrů mřížky.</p>

<a href="https://www.root.cz/obrazek/297632/"><img src="https://i.iinfo.cz/images/238/tkinter1-8.png" class="image-297632" alt="&#160;" width="190" height="79" /></a>
<p><i>Obrázek 12: Nejprimitivnější způsob použití správce rozvržení
<strong>grid</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: jméno manažeru <i>grid</i> sice může
připomínat například <i>GridLayout</i> z&nbsp;Javy, ovšem Tkinterovská varianta
je mnohem jednodušeji použitelná a současně i více flexibilní.</div></p>

<img src="https://i.iinfo.cz/images/323/pygubu2-7.png" class="image-445774" alt="&#160;" width="288" height="686" />
<p><i>Obrázek 13: Nastavení parametrů souvisejících se správcem rozvržení
&bdquo;grid&ldquo; v&nbsp;Pygubu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Základní typy widgetů v&nbsp;knihovně Tk/Tkinter</h2>

<p>V&nbsp;průběhu mnoha let se množina widgetů používaných v&nbsp;různých
grafických uživatelských rozhraních postupně rozšiřovala, ostatně postačí se
podívat na obrázky z&nbsp;prvních grafických rozhraní navržených ve společnosti
Xerox a porovnat je s&nbsp;moderním desktopem. Současně však také docházelo ke
sjednocování vzhledu jednotlivých widgetů i jejich chování na různých
platformách. Vzhled samozřejmě není na všech platformách přesně stejný, to však
pro uživatele většinou nemusí představovat významnější praktický problém, na
rozdíl od odlišného chování celého prostředí i jednotlivých widgetů.</p>

<a href="https://i.iinfo.cz/images/460/squeak7b.png"><img src="https://i.iinfo.cz/images/460/squeak7b-prev.png" alt="xerox-gui" height="270" width="342"/></a>
<p><i>Obrázek 14: Ukázka grafického uživatelského rozhraní počítačového systému Xerox 8010 Star Information System.</i></p>

<p>V&nbsp;toolkitu <strong>Tk</strong> je k&nbsp;dispozici poměrně velké
množství widgetů, podobně jako v&nbsp;dalších moderních toolkitech. Navíc dnes
widgety existují ve dvou podobách &ndash; starší (původní) a novější
(<i>Ttk</i> neboli <i>&bdquo;themed Tk&ldquo;</i>), které lépe odpovídají
požadavkům uživatelů současných desktopových prostředí a jejichž vzhled a
chování se může od původních widgetů odlišovat. V&nbsp;následující tabulce je
uveden seznam základních typů widgetů. Pro mnoho aplikací je níže uvedená
skupina widgetů dostačující, avšak v&nbsp;případě, že aplikace potřebuje
vytvořit nový widget, je to samozřejmě možné, protože knihovna
<strong>Tk</strong> je navržena tak, že ji lze poměrně jednoduchým způsobem
rozšiřovat. V&nbsp;následující tabulce si také můžete všimnout toho, že některé
widgety jsou pojmenovány odlišným způsobem od dnes používané terminologie.
Vychází to z&nbsp;faktu, že <strong>Tcl/Tk</strong> je mnohem starší než
většina dnešních GUI toolkitů.</p>

<table>
<tr><th>Jméno widgetu</th><th>Význam a funkce</th></tr>
<tr><td><strong>label</strong></td><td>widget, který zobrazuje v&nbsp;okně či dialogu měnitelný text</td></tr>
<tr><td><strong>button</strong></td><td>graficky zobrazené tlačítko, které implicitně reaguje na levé tlačítko myši</td></tr>
<tr><td><strong>checkbutton</strong></td><td>dvoustavový přepínač, který implicitně reaguje na levé tlačítko myši</td></tr>
<tr><td><strong>radiobutton</strong></td><td>widget, jichž může být sdruženo větší množství, vždy pouze jeden je vybraný</td></tr>
<tr><td><strong>scale</strong></td><td>dnes nazýván pojmem <i>slider</i> atd., jedná se o widget s&nbsp;posuvnou částí a přidruženým textem, kde se zobrazuje hodnota v&nbsp;závislosti na poloze posuvné části</td></tr>
<tr><td><strong>entry</strong></td><td>widget, do kterého je možné zapisovat text, k&nbsp;tomu má přidruženo mnoho klávesových zkratek (jde o kombinaci staršího a novějšího standardu)</td></tr>
<tr><td><strong>spinbox</strong></td><td>widget určený pro zadávání číselných hodnot kombinací klávesnice a myši (i s&nbsp;kontrolou mezí)</td></tr>
<tr><td><strong>menu</strong></td><td>vertikální menu, které se skládá z&nbsp;více položek</td></tr>
<tr><td><strong>menubutton</strong></td><td>používá se spolu s&nbsp;<strong>menu</strong> pro vytváření jednotlivých položek</td></tr>
<tr><td><strong>listbox</strong></td><td>widget, jež nabízí na výběr libovolné množství řádků s&nbsp;textem</td></tr>
<tr><td><strong>scrollbar</strong></td><td>podobné widgetu <strong>scale</strong> s&nbsp;tím rozdílem, že zobrazuje posuvné šipky a naopak nezobrazuje přidruženou číselnou hodnotu</td></tr>
<tr><td><strong>frame</strong></td><td>jeden z&nbsp;několika nabízených kontejnerů; tento má tvar obdélníka (může být také neviditelný nebo může mít 3D rámeček)</td></tr>
<tr><td><strong>toplevel</strong></td><td>další z&nbsp;kontejnerů, tento se chová jako samostatné okno či dialog</td></tr>
<tr><td><strong>bitmap</strong></td><td>bitmapa, tj.&nbsp;rastrový obrázek</td></tr>
<tr><td><strong>photo/photoimage</strong></td><td>rastrový obrázek, jež může být načten z&nbsp;externího souboru v&nbsp;mnoha různých formátech</td></tr>
<tr><td><strong>canvas</strong></td><td>widget, na který lze programově vkládat další grafické komponenty (úsečky, oblouky, kružnice, polyčáry, text atd.)</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vlastnosti widgetů</h2>

<p>Ke každému widgetu je možné nastavit mnoho různých vlastností, které mění
buď jeho vizuální vzhled na obrazovce počítače nebo jeho chování,
tj.&nbsp;způsob reakce widgetu na akce uživatele. Mezi tyto akce počítáme
například kliknutí tlačítkem myši, použití klávesových zkratek (<i>hot
keys</i>), přesunutí widgetu atd. Některé vlastnosti jsou všem widgetům
společné, další vlastnosti jsou však jedinečné pro jeden či pouze několik typů
widgetů. Je to ostatně logické, některé widgety mají speciální chování.
Vlastnosti lze nastavovat již při vytváření widgetů, na druhou stranu je také
možné vlastnosti měnit až při běhu aplikace. Způsob nastavení vlastností si
ukážeme na demonstračních příkladech. V&nbsp;následující tabulce jsou uvedeny
vlastnosti, které jsou společné prakticky všem widgetům (kromě speciálních
widgetů typu &bdquo;položka menu&ldquo;, které mají vlastnosti omezeny, stejně
tak jako jejich reakce na uživatelovu činnost). Pozor! &ndash; při použití Ttk
se nastavování vizuálních vlastností musí provádět přes styly, což si
samozřejmě taktéž ukážeme:</p>

<table>
<tr><th>Jméno vlastnosti</th><th>Popis vlastnosti</th></tr>
<tr><td><strong>background</strong></td><td>barva pozadí widgetu v&nbsp;případě, že widget není aktivní (vybraný)</td></tr>
<tr><td><strong>foreground</strong></td><td>barva popředí widgetu (například zobrazeného textu) v&nbsp;případě, že widget není aktivní (vybraný)</td></tr>
<tr><td><strong>borderwidth</strong></td><td>šířka okraje widgetu, která je zadaná v&nbsp;pixelech</td></tr>
<tr><td><strong>activebackground</strong></td><td>barva pozadí widgetu v&nbsp;případě, že je widget vybrán (typicky kurzorem myši)</td></tr>
<tr><td><strong>activeforeground</strong></td><td>barva popředí widgetu v&nbsp;případě, že je widget vybrán</td></tr>
<tr><td><strong>disabledforeground</strong></td><td>barva popředí widgetu v&nbsp;případě, že je ovládání widgetu zakázáno</td></tr>
<tr><td><strong>relief</strong></td><td>způsob prostorového zobrazení widgetu</td></tr>
<tr><td><strong>compound</strong></td><td>způsob umístění bitmapy či obrázku na widgetu</td></tr>
<tr><td><strong>bitmap</strong></td><td>bitmapa, která má být ve widgetu zobrazena</td></tr>
<tr><td><strong>image</strong></td><td>obrázek, který má být ve widgetu zobrazen (více o bitmapách a obrázcích bude uvedeno v dalších dílech)</td></tr>
<tr><td><strong>font</strong></td><td>jméno fontu, který je použit pro text uvnitř widgetu (font lze specifikovat platformově nezávislým způsobem)</td></tr>
<tr><td><strong>text</strong></td><td>text, který má být ve widgetu (tlačítko, položka menu atd.) zobrazen</td></tr>
<tr><td><strong>cursor</strong></td><td>jméno kurzoru myši, který bude použit v&nbsp;případě, že se kurzor nachází nad widgetem</td></tr>
<tr><td><strong>textvariable</strong></td><td>jméno proměnné, která je nastavována podle uživatelových manipulací s&nbsp;widgetem (StringVar v&nbsp;Tkinteru)</td></tr>
<tr><td><strong>justify</strong></td><td>zarovnání textu ve widgetu v&nbsp;případě, že se zobrazuje více řádků</td></tr>
<tr><td><strong>anchor</strong></td><td>způsob umístění textu či obrázku ve widgetu</td></tr>
</table>

<p>Vlastnosti se nastavují dvěma způsoby &ndash; u původních widgetů přímo
nastavením vlastnosti (například <i>background="red"</i>) u &bdquo;themed
Tk&ldquo; pak změnou takzvaných <i>stylů</i>, což je sice nepatrně složitější,
ovšem mnohem flexibilnější způsob. V&nbsp;Pygubu se vlastnosti nastavují
v&nbsp;příslušném dialogu:</p>

<img src="https://i.iinfo.cz/images/323/pygubu2-8.png" class="image-445775" alt="&#160;" width="417" height="836" />
<p><i>Obrázek 15: Nastavení stylu widgetu přímo v&nbsp;prostředí Pygubu
designeru.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. &bdquo;Odtrhávací&ldquo; menu</h2>

<p>Jednou ze zajímavých vlastností menu poskytovaných knihovnou Tkinter je
schopnost vytvořit taková rozbalovací menu, která lze &bdquo;odtrhnout&ldquo;
od pruhu s&nbsp;menu a začít je používat jako samostatné panely. To je
potenciálně velmi užitečná vlastnost, protože uživateli dovoluje, aby byly
nejčastěji používané příkazy stále viditelné a přitom umístěné přesně na tom
místě, kde to uživateli vyhovuje (aplikace se tedy uživateli nesnaží vnutit
jedno konkrétní rozvržení ovládacích prvků &ndash; resp.&nbsp;ne do takové
míry, jak je to běžné jinde).</p>

<img src="https://i.iinfo.cz/images/323/pygubu2-9.png" class="image-445776" alt="&#160;" width="618" height="905" />
<p><i>Obrázek 16: &bdquo;Odtržená&ldquo; menu grafického editoru
mtPaint.</i></p>

<p><div class="rs-tip-major">Poznámka: podobný koncept ovšem nalezneme i u
některých aplikací postavených na knihovnou GTK. Příkladem může být
<i>gvim</i>, tj.&nbsp;varianta <a
href="https://www.root.cz/serialy/textovy-editor-vim-jako-ide/">textového
editoru Vim</a> upravená do podoby aplikace s&nbsp;grafickým uživatelským
rozhraním popř.&nbsp;grafický editor <a
href="http://mtpaint.sourceforge.net/">mtPaint</a>. Ovšem tyto aplikace jsou
založeny na Gtk, přičemž v&nbsp;Gtk+ 3.4 byla tato možnost zakázána (mám
vlastní teorii proč, ovšem ta se do dnešního článku nehodí).</div></p>

<p>Vytvoření &bdquo;odtrhávacích&ldquo; menu je ve skutečnosti velmi snadné,
protože se jedná o vlastnost menu, kterou je možné specifikovat přímo
v&nbsp;Pygubu:</p>

<a href="https://www.root.cz/obrazek/445777/"><img src="https://i.iinfo.cz/images/323/pygubu2-10-prev.png" class="image-445777" alt="&#160;" width="288" height="270" /></a>
<p><i>Obrázek 17: Nastavení vlastnosti &bdquo;tearoff&ldquo; je platné vždy pro
celé menu.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Realizace aplikace s&nbsp;&bdquo;odtrhávacím&ldquo; menu</h2>

<p>V&nbsp;praxi postačuje vlastnost <strong>tearoff</strong> nastavit na
pravdivostní hodnotu <strong>true</strong> (skutečně je psána s&nbsp;malým
počátečním písmenem) pouze u jediné položky hlavního menu, protože se jedná o
globálně sdílený atribut. V&nbsp;praxi může vygenerovaný soubor s&nbsp;návrhem
GUI aplikace vypadat následovně:</p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface&gt;
  &lt;object class="tk.Menu" id="MainMenu"&gt;
    &lt;child&gt;
      &lt;object class="tk.Menuitem.Submenu" id="FileMenu"&gt;
        &lt;property name="font"&gt;TkDefaultFont&lt;/property&gt;
        &lt;property name="label" translatable="yes"&gt;File&lt;/property&gt;
        &lt;property name="relief"&gt;raised&lt;/property&gt;
        &lt;property name="state"&gt;normal&lt;/property&gt;
        <strong>&lt;property name="tearoff"&gt;true&lt;/property&gt;</strong>
        &lt;property name="underline"&gt;0&lt;/property&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_New"&gt;
            &lt;property name="command_#e tento mana#er
umo##uje vkládat komponenty do kontejneru (typicky do okna) tak, #e se zadává
jejich relativní umíst#ní (horizontální #i vertikální zarovnání)id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;document-new.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;New&lt;/property&gt;
            &lt;property name="state"&gt;normal&lt;/property&gt;
            &lt;property name="underline"&gt;0&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Open"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;document-open.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Open&lt;/property&gt;
            &lt;property name="underline"&gt;0&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Separator" id="Separator_1" /&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Quit"&gt;
            &lt;property name="command"&gt;on_command_quit_selected&lt;/property&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;application-exit.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Quit&lt;/property&gt;
            &lt;property name="underline"&gt;0&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="tk.Menuitem.Submenu" id="EditMenu"&gt;
        &lt;property name="label" translatable="yes"&gt;Edit&lt;/property&gt;
        &lt;property name="underline"&gt;0&lt;/property&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Cut"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-cut.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Cut&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Copy"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-copy.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Copy&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Paste"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-paste.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Paste&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Separator" id="Separator_2" /&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="tk.Menuitem.Command" id="Command_Delete"&gt;
            &lt;property name="command_id_arg"&gt;false&lt;/property&gt;
            &lt;property name="compound"&gt;left&lt;/property&gt;
            &lt;property name="image"&gt;edit-delete.png&lt;/property&gt;
            &lt;property name="label" translatable="yes"&gt;Delete&lt;/property&gt;
            &lt;property name="state"&gt;disabled&lt;/property&gt;
          &lt;/object&gt;
        &lt;/child&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
  &lt;object class="ttk.Frame" id="MainWindow"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout&gt;
      &lt;property name="column"&gt;0&lt;/property&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="row"&gt;0&lt;/property&gt;
    &lt;/layout&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="Button_Hello"&gt;
        &lt;property name="command"&gt;on_button_clicked&lt;/property&gt;
        &lt;property name="compound"&gt;top&lt;/property&gt;
        &lt;property name="state"&gt;normal&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Quit&lt;/property&gt;
        &lt;property name="underline"&gt;0&lt;/property&gt;
        &lt;layout&gt;
          &lt;property name="column"&gt;0&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;0&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>

<p>Vlastní zdrojový kód aplikace se přitom nijak nezmění, až na přejmenování
třídy představující celou aplikaci:</p>

<pre>
<i>"""Pygubu and Tkinter: main menu in main window, callback functions, tearoff menu (working example)."""</i>
&nbsp;
<i># Example4.py</i>
&nbsp;
import tkinter as tk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example4App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui</strong>(self):
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example4.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Set main menu</i>
        self.mainmenu = menu = builder.get_object('MainMenu', self.master)
        self.set_menu(menu)
&nbsp;
        <i># step $5: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
    def <strong>on_button_clicked</strong>(self):
        <i>"""Define handler for Quit button."""</i>
        tk.messagebox.showinfo('Message', 'You clicked on Quit button')
        root.destroy()
&nbsp;
    def <strong>on_command_quit_selected</strong>(self):
        <i>"""Define handler for Quit command."""</i>
        tk.messagebox.showinfo('Message', 'You selected Quit command')
        root.destroy()
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    <i># run the application</i>
    app = Example4App(root)
    app.run()
</pre>

<img src="https://i.iinfo.cz/images/323/pygubu2-11.png" class="image-445778" alt="&#160;" width="251" height="155" />
<p><i>Obrázek 18: &bdquo;Odtržená&ldquo; menu v&nbsp;testovací
aplikaci.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Klávesové zkratky navázané na jednotlivé položky menu</h2>

<p>Poslední vlastnost menu, kterou si dnes popíšeme, je zobrazení a navázání
klávesových akcelerátorů (například <strong>Ctrl+C</strong>) k&nbsp;určité
položce menu.</p>

<p>Nastavení klávesových akcelerátorů (což je další typ horkých klíčů) se musí
provést ve dvou krocích. Nejprve je nutné akcelerátor specifikovat u každé
položky menu s&nbsp;využitím volby <strong>accelerator</strong>, například:</p>

<pre>
filemenu.add_command(label="Open", underline=0, <strong>accelerator="Ctrl+O"</strong>,
                     command=lambda: print("Open"))
</pre>

<p>Knihovna <i>Tkinter</i> nás nijak neomezuje v&nbsp;tom, jaký text je u volby
<strong>accelerator</strong> zapsán; samozřejmě je však vhodné, když popis
souvisí se skutečně nastaveným akcelerátorem. Příklad si můžeme nepatrně
upravit tak, že u každé položky (kde to má význam) uvedeme popis příslušné
klávesové zkratky:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
menubar = tkinter.Menu(root)
&nbsp;
filemenu = tkinter.Menu(menubar, tearoff=0)
filemenu.add_command(label="Open", underline=0, <strong>accelerator="Ctrl+O"</strong>,
                     command=lambda: print("Open"))
filemenu.add_command(label="Save", underline=0, <strong>accelerator="Ctrl+S"</strong>,
                     command=lambda: print("Save"))
filemenu.add_separator()
filemenu.add_command(label="Exit", underline=1, <strong>accelerator="Ctrl+Q"</strong>,
                     command=root.quit)
menubar.add_cascade(label="File", menu=filemenu, underline=0)
&nbsp;
editmenu = tkinter.Menu(menubar, tearoff=0)
editmenu.add_command(label="Undo", underline=0, <strong>accelerator="Ctrl+U"</strong>,
                     command=lambda: print("Undo"))
editmenu.add_separator()
editmenu.add_command(label="Cut", underline=2, <strong>accelerator="Ctrl+X</strong>",
                     command=lambda: print("Cut"))
editmenu.add_command(label="Copy", underline=0, <strong>accelerator="Ctrl+C"</strong>,
                     command=lambda: print("Copy"))
editmenu.add_command(label="Paste", underline=0, <strong>accelerator="Ctrl+V"</strong>,
                     command=lambda: print("Paste"))
editmenu.add_command(label="Delete", underline=2,
                     command=lambda: print("Delete"))
editmenu.add_separator()
editmenu.add_command(label="Select All", underline=7, <strong>accelerator="Ctrl+A"</strong>,
                     command=lambda: print("Select All"))
menubar.add_cascade(label="Edit", menu=editmenu, underline=0)
&nbsp;
helpmenu = tkinter.Menu(menubar, tearoff=0)
helpmenu.add_command(label="About", underline=0, <strong>accelerator="F1"</strong>,
                     command=lambda: print("About"))
menubar.add_cascade(label="Help", menu=helpmenu, underline=0)
&nbsp;
root.config(menu=menubar)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/134/tkinter5-3.png" class="image-300218" alt="&#160;" width="202" height="257" />
<p><i>Obrázek 19: Screenshot demonstračního příkladu s&nbsp;klávesovými
akcelerátory.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Realizace aplikace se specifikovanými klávesovými zkratkami</h2>

<pre>
<?xml version='1.0' encoding='utf-8'?>
<interface version="1.1">
  <object class="tk.Menu" id="MainMenu">
    <child>
      <object class="tk.Menuitem.Submenu" id="FileMenu">
        <property name="font">TkDefaultFont</property>
        <property name="label" translatable="yes">File</property>
        <property name="relief">raised</property>
        <property name="state">normal</property>
        <property name="tearoff">true</property>
        <property name="underline">0</property>
        <child>
          <object class="tk.Menuitem.Command" id="Command_New">
            <property name="accelerator">Ctrl+N</property>
            <property name="compound">left</property>
            <property name="image">document-new.png</property>
            <property name="label" translatable="yes">New</property>
            <property name="state">normal</property>
            <property name="underline">0</property>
          </object>
        </child>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Open">
            <property name="accelerator">Ctrl+O</property>
            <property name="compound">left</property>
            <property name="image">document-open.png</property>
            <property name="label" translatable="yes">Open</property>
            <property name="underline">0</property>
          </object>
        </child>
        <child>
          <object class="tk.Menuitem.Separator" id="Separator_1" />
        </child>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Quit">
            <property name="accelerator">Ctrl+Q</property>
            <property args="" cbtype="simple" name="command" type="command">on_command_quit_selected</property>
            <property name="compound">left</property>
            <property name="image">application-exit.png</property>
            <property name="label" translatable="yes">Quit</property>
            <property name="underline">0</property>
          </object>
        </child>
      </object>
    </child>
    <child>
      <object class="tk.Menuitem.Submenu" id="EditMenu">
        <property name="label" translatable="yes">Edit</property>
        <property name="underline">0</property>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Cut">
            <property name="accelerator">Ctrl+X</property>
            <property name="compound">left</property>
            <property name="image">edit-cut.png</property>
            <property name="label" translatable="yes">Cut</property>
          </object>
        </child>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Copy">
            <property name="accelerator">Ctrl+C</property>
            <property name="compound">left</property>
            <property name="image">edit-copy.png</property>
            <property name="label" translatable="yes">Copy</property>
          </object>
        </child>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Paste">
            <property name="accelerator">Ctrl+P</property>
            <property name="compound">left</property>
            <property name="image">edit-paste.png</property>
            <property name="label" translatable="yes">Paste</property>
          </object>
        </child>
        <child>
          <object class="tk.Menuitem.Separator" id="Separator_2" />
        </child>
        <child>
          <object class="tk.Menuitem.Command" id="Command_Delete">
            <property name="accelerator">Delete</property>
            <property name="compound">left</property>
            <property name="image">edit-delete.png</property>
            <property name="label" translatable="yes">Delete</property>
            <property name="state">disabled</property>
          </object>
        </child>
      </object>
    </child>
  </object>
  <object class="ttk.Frame" id="MainWindow">
    <property name="height">200</property>
    <property name="width">200</property>
    <layout manager="grid">
      <property name="column">0</property>
      <property name="propagate">True</property>
      <property name="row">0</property>
    </layout>
    <child>
      <object class="ttk.Button" id="Button_Hello">
        <property args="" cbtype="simple" name="command" type="command">on_button_clicked</property>
        <property name="compound">top</property>
        <property name="state">normal</property>
        <property name="text" translatable="yes">Quit</property>
        <property name="underline">0</property>
        <layout manager="grid">
          <property name="column">0</property>
          <property name="propagate">True</property>
          <property name="row">0</property>
        </layout>
      </object>
    </child>
  </object>
</interface>
</pre>

<pre>
"""Pygubu and Tkinter: main menu in main window, callback functions, tearoff menu (working example)."""

# Example5.py

import tkinter as tk
from tkinter import messagebox
import pygubu


class Example5App(pygubu.TkApplication):
    """Class representing a Tkinter based application."""

    def _create_ui(self):
        """Construct and initializes all UI-related data structures."""
        # step #1: Create a builder
        self.builder = builder = pygubu.Builder()

        # step #2: Load an ui file
        builder.add_from_file('example5.ui')

        # step #2B: Specify path to images and other resources
        builder.add_resource_path(".")

        # step #3: Create the mainwindow
        self.mainwindow = builder.get_object('MainWindow', self.master)

        # step #4: Set main menu
        self.mainmenu = menu = builder.get_object('MainMenu', self.master)
        self.set_menu(menu)

        # step $5: Configure callbacks
        builder.connect_callbacks(self)

    def on_button_clicked(self):
        """Define handler for Quit button."""
        tk.messagebox.showinfo('Message', 'You clicked on Quit button')
        root.destroy()

    def on_command_quit_selected(self):
        """Define handler for Quit command."""
        tk.messagebox.showinfo('Message', 'You selected Quit command')
        root.destroy()


if __name__ == '__main__':
    # needed to have a menu
    root = tk.Tk()

    # run the application
    app = Example5App(root)
    app.run()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Registrace handleru události po stisku klávesové zkratky</h2>

<p>Specifikace zkratky v&nbsp;návrhu menu však není dostačující, protože je
ještě nutné akcelerátor na položku menu (resp.&nbsp;přesněji řečeno na nějaký
příkaz) navázat. K&nbsp;tomu se používá nám již známý příkaz
<strong>bind</strong>. Pro označení modifikátorů kláves se používají prefixy
<strong>Control-</strong> a <strong>Meta-</strong>. Také si všimněte, že se
rozlišují velikosti písmen stlačených kláves, takže je rozdíl mezi zápisem
<strong>Control-x</strong> a <strong>Control-X</strong> (druhá možnost nemusí
na některých systémech vůbec fungovat a i kdyby fungovala, není příliš často
používaná):</p>

<pre>
root.bind('&lt;Control-o&gt;', lambda event: cmd_open())
root.bind('&lt;Control-s&gt;', lambda event: cmd_save())
root.bind('&lt;Control-u&gt;', lambda event: cmd_undo())
root.bind('&lt;F1&gt;', lambda event: cmd_help())
...
...
...
atd. i pro další položky menu
</pre>

<p>V&nbsp;našem konkrétním případě navážeme stisk klávesy Ctrl+Q s&nbsp;metodou
<strong>on_command_quit_selected</strong>:</p>

<pre>
<strong>root.bind('&lt;Control-q&gt;', lambda event: self.on_command_quit_selected())</strong>
</pre>

<p>Modifikovaný zdrojový kód příkladu bude vypadat následovně:</p>

<pre>
<i>"""Pygubu and Tkinter: main menu in main window, callback functions, tearoff menu (working example)."""</i>
&nbsp;
<i># Example5.py</i>
&nbsp;
import tkinter as tk
from tkinter import messagebox
import pygubu
&nbsp;
&nbsp;
class <strong>Example5App</strong>(pygubu.TkApplication):
    <i>"""Class representing a Tkinter based application."""</i>
&nbsp;
    def <strong>_create_ui</strong>(self):
        <i>"""Construct and initializes all UI-related data structures."""</i>
        <i># step #1: Create a builder</i>
        self.builder = builder = pygubu.Builder()
&nbsp;
        <i># step #2: Load an ui file</i>
        builder.add_from_file('example5.ui')
&nbsp;
        <i># step #2B: Specify path to images and other resources</i>
        builder.add_resource_path(".")
&nbsp;
        <i># step #3: Create the mainwindow</i>
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        <i># step #4: Set main menu</i>
        self.mainmenu = menu = builder.get_object('MainMenu', self.master)
        self.set_menu(menu)
&nbsp;
        <i># step $5: Configure callbacks</i>
        builder.connect_callbacks(self)
&nbsp;
        <strong>root.bind('&lt;Control-q&gt;', lambda event: self.on_command_quit_selected())</strong>
&nbsp;
    def <strong>on_button_clicked</strong>(self):
        <i>"""Define handler for Quit button."""</i>
        tk.messagebox.showinfo('Message', 'You clicked on Quit button')
        root.destroy()
&nbsp;
    def <strong>on_command_quit_selected</strong>(self):
        <i>"""Define handler for Quit command."""</i>
        tk.messagebox.showinfo('Message', 'You selected Quit command')
        root.destroy()
&nbsp;
&nbsp;
if __name__ == '__main__':
    <i># needed to have a menu</i>
    root = tk.Tk()
&nbsp;
    # run the application
    app = Example5App(root)
    app.run()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Změna tématu zobrazení za běhu aplikace</h2>

<p>Téma je možné vybrat i změnit prakticky kdykoli za běhu programu, což
skutečně funguje (například ve Swingu je to problematičtější). Podívejme se
však na to, co se stane, když si pomocí čtyř tlačítek necháme přepínat čtyři
základní témata &bdquo;clam&ldquo;, &bdquo;alt&ldquo;, &bdquo;default&ldquo; a
&bdquo;classic&ldquo; a současně bude nastaven styl
<strong>Red.TButton</strong>. Téma přepneme jednoduše zavoláním:</p>

<pre>
style.theme_use("jméno_tématu"))
</pre>

<p>kde <strong>style</strong> je objekt získaný konstruktorem:</p>

<pre>
style = ttk.Style()
</pre>

<p>Příklad změny tématu po stisku tlačítka:</p>

<pre>
button1 = ttk.Button(root, text="clam",
                     command=lambda: style.theme_use("clam"))
</pre>

<p>Úplný demonstrační příklad se změnou témat za běhu vypadá následovně
(příklad je založen na Tkinteru):</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
&nbsp;
def <strong>exit</strong>():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
&nbsp;
style.configure('Red.TButton', background='#ff8080')
&nbsp;
button1 = ttk.Button(root, text="clam",
                     command=lambda: style.theme_use("clam"))
button2 = ttk.Button(root, text="alt",
                     command=lambda: style.theme_use("alt"))
button3 = ttk.Button(root, text="default",
                     command=lambda: style.theme_use("default"))
button4 = ttk.Button(root, text="classic",
                     command=lambda: style.theme_use("classic"))
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
button1.grid(column=1, row=1, sticky="we")
button2.grid(column=2, row=1, sticky="we")
button3.grid(column=1, row=2, sticky="we")
button4.grid(column=2, row=2, sticky="we")
&nbsp;
quitButton.grid(column=2, row=5, sticky="we")
&nbsp;
label = tkinter.Label(root, text='Hello world')
entry = tkinter.Entry(root)
checkbutton = tkinter.Checkbutton(text='Do you like Tkinter?')
&nbsp;
checkbutton.grid(column=1, row=3, columnspan=2, sticky="w")
label.grid(column=1, row=4)
entry.grid(column=2, row=4)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/208/tkinter2-3.png" class="image-298359" alt="&#160;" width="251" height="147" />
<p><i>Obrázek XX: Demonstrační příklad po výběru tématu &bdquo;default&ldquo;.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Návrh aplikace s&nbsp;podobným chováním v&nbsp;nástroji Pygubu</h2>

<p></p>

<pre>
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;interface version="1.1"&gt;
  &lt;object class="ttk.Frame" id="MainWindow"&gt;
    &lt;property name="height"&gt;200&lt;/property&gt;
    &lt;property name="width"&gt;200&lt;/property&gt;
    &lt;layout manager="pack"&gt;
      &lt;property name="propagate"&gt;True&lt;/property&gt;
      &lt;property name="side"&gt;top&lt;/property&gt;
    &lt;/layout&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="clam"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_clam_click&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;clam&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;0&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;0&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="alt"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_alt_click&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;alt&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;1&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;0&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="default"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_default_click&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;default&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;0&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;1&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="classic"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_classic_click&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;classic&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;1&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;1&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Checkbutton" id="question"&gt;
        &lt;property name="text" translatable="yes"&gt;Do you like Tkinter?&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;0&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;2&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Label" id="hello_world_label"&gt;
        &lt;property name="text" translatable="yes"&gt;Hello world&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;0&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;3&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Entry" id="entry1"&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;1&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;3&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
    &lt;child&gt;
      &lt;object class="ttk.Button" id="exit"&gt;
        &lt;property cbtype="simple" name="command" type="command"&gt;on_button_exit_click&lt;/property&gt;
        &lt;property name="style"&gt;Red.TButton&lt;/property&gt;
        &lt;property name="text" translatable="yes"&gt;Exit&lt;/property&gt;
        &lt;layout manager="grid"&gt;
          &lt;property name="column"&gt;1&lt;/property&gt;
          &lt;property name="propagate"&gt;True&lt;/property&gt;
          &lt;property name="row"&gt;4&lt;/property&gt;
          &lt;property name="sticky"&gt;ew&lt;/property&gt;
        &lt;/layout&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Implementace handlerů zavolaných po stisku tlačítek na GUI</h2>

<pre>
"""Pygubu and Tkinter: changing style."""
&nbsp;
# Example6.py
&nbsp;
import tkinter as tk
from tkinter import ttk
import pygubu
&nbsp;
&nbsp;
class Example6App(pygubu.TkApplication):
    """Class representing a Tkinter based application."""
&nbsp;
    def _create_ui(self):
        """Construct and initializes all UI-related data structures."""
        # step #1: Create a builder
        self.builder = builder = pygubu.Builder()
&nbsp;
        # step #2: Load an ui file
        builder.add_from_file('example6.ui')
&nbsp;
        # step #2B: Specify path to images and other resources
        builder.add_resource_path(".")
&nbsp;
        # step #3: Create the mainwindow
        self.mainwindow = builder.get_object('MainWindow', self.master)
&nbsp;
        # step $4: Configure callbacks
        builder.connect_callbacks(self)
&nbsp;
        root.bind('<Control-q>', lambda event: self.on_button_exit_click())
&nbsp;
    def on_button_clam_click(self):
        style.theme_use("clam")
&nbsp;
    def on_button_alt_click(self):
        style.theme_use("alt")
&nbsp;
    def on_button_default_click(self):
        style.theme_use("default")
&nbsp;
    def on_button_classic_click(self):
        style.theme_use("classic")
&nbsp;
    def on_button_exit_click(self):
        root.destroy()
&nbsp;
&nbsp;
if __name__ == '__main__':
    # needed to have a menu
    root = tk.Tk()
&nbsp;
    # style
    style = ttk.Style()
&nbsp;
    # run the application
    app = Example6App(root)
    app.run()
</pre>

*** image ***
<p><i>Obrázek </i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech minule i dnes popsaných demonstračních příkladů určených
pro Python 3 a nejnovější stabilní verzi knihovny Pygubu (a pochopitelně i pro
Pygubu designer) byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td> 1</td><td>example1.ui</td><td>soubor s&nbsp;návrhem GUI prvního demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.ui</a></td></tr>
<tr><td> 2</td><td>example1.py</td><td>implementace prvního demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example1.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>example2.ui</td><td>soubor s&nbsp;návrhem GUI druhého demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2.ui</a></td></tr>
<tr><td> 4</td><td>example2A.py</td><td>implementace třetího demonstračního příkladu (bez menu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2A.py</a></td></tr>
<tr><td> 5</td><td>example2B.py</td><td>implementace třetího demonstračního příkladu (nespecifikován adresář s&nbsp;ikonami)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2B.py</a></td></tr>
<tr><td> 6</td><td>example2C.py</td><td>implementace třetího demonstračního příkladu (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2C.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example2C.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>example3.ui</td><td>soubor s&nbsp;návrhem GUI třetího demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.ui</a></td></tr>
<tr><td> 8</td><td>example3.py</td><td>implementace třetího demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>example4.ui</td><td>soubor s&nbsp;návrhem GUI třetího demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.ui">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example4.ui</a></td></tr>
<tr><td>10</td><td>example4.py</td><td>implementace třetího demonstračního příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/example4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>

<p>Ve druhém a třetím demonstračním příkladu jsou navíc použity i ikony
v&nbsp;menu. Tyto ikony jsou uloženy samostatně ve formátu PNG a měly by být
umístěny do stejného adresáře, ze kterého se spouští aplikace:</p>

<table>
<tr><th>#</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>application-exit.png</td><td>ikona pro položku menu sloužící k&nbsp;ukončení aplikace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/application-exit.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/application-exit.png</a></td></tr>
<tr><td>2</td><td>document-new.png</td><td>ikona pro položku menu File&rarr;New</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-new.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-new.png</a></td></tr>
<tr><td>3</td><td>document-open.png</td><td>ikona pro položku menu File&rarr;Open</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-open.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/document-open.png</a></td></tr>
<tr><td>4</td><td>edit-copy.png</td><td>ikona pro položku menu Edit&rarr;Copy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-copy.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-copy.png</a></td></tr>
<tr><td>5</td><td>edit-cut.png</td><td>ikona pro položku menu Edit&rarr;Cut</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-cut.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-cut.png</a></td></tr>
<tr><td>6</td><td>edit-paste.png</td><td>ikona pro položku menu Edit&rarr;Paste</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-paste.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-paste.png</a></td></tr>
<tr><td>7</td><td>edit-delete.png</td><td>ikona pro položku menu Edit&rarr;Delete</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-delete.png">https://github.com/tisnik/most-popular-python-libs/blob/master/pygubu/edit-delete.png</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Seriál Grafické uživatelské rozhraní v Pythonu<br />
<a href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/</a>
</li>

<li>Pygubu na PyPi<br />
<a href="https://pypi.org/project/pygubu/">https://pypi.org/project/pygubu/</a>
</li>

<li>Repositář projektu Pygubu<br />
<a href="https://github.com/alejandroautalan/pygubu">https://github.com/alejandroautalan/pygubu</a>
</li>

<li>pygubu-designer na PyPi<br />
<a href="https://pypi.org/project/pygubu-designer/">https://pypi.org/project/pygubu-designer/</a>
</li>

<li>Repositář projektu pygubu-designer<br />
<a href="https://github.com/alejandroautalan/pygubu-designer">https://github.com/alejandroautalan/pygubu-designer</a>
</li>

<li>Pygubu Wiki<br />
<a href="https://github.com/alejandroautalan/pygubu/wiki">https://github.com/alejandroautalan/pygubu/wiki</a>
</li>

<li>How to install Tkinter in Python?<br />
<a href="https://www.tutorialspoint.com/how-to-install-tkinter-in-python">https://www.tutorialspoint.com/how-to-install-tkinter-in-python</a>
</li>

<li>Stránky projektu Glade<br />
<a href="https://glade.gnome.org/">https://glade.gnome.org/</a>
</li>

<li>Hra Breakout napísaná v&nbsp;Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Brython aneb použití jazyka Python ve skriptech přímo v prohlížeči<br />
<a href="https://www.root.cz/clanky/brython-aneb-pouziti-jazyka-python-ve-skriptech-primo-v-prohlizeci/">https://www.root.cz/clanky/brython-aneb-pouziti-jazyka-python-ve-skriptech-primo-v-prohlizeci/</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>Rapid application development<br />
<a href="https://en.wikipedia.org/wiki/Rapid_application_development">https://en.wikipedia.org/wiki/Rapid_application_development</a>
</li>

<li>Non-functional requirement<br />
<a href="https://en.wikipedia.org/wiki/Non-functional_requirement">https://en.wikipedia.org/wiki/Non-functional_requirement</a>
</li>

<li>Graphical user interface builder<br />
<a href="https://en.wikipedia.org/wiki/Graphical_user_interface_builder">https://en.wikipedia.org/wiki/Graphical_user_interface_builder</a>
</li>

<li>User interface markup language<br />
<a href="https://en.wikipedia.org/wiki/User_interface_markup_language">https://en.wikipedia.org/wiki/User_interface_markup_language</a>
</li>

<li>Top 10 programming languages that developers hate the most<br />
<a href="https://www.techworm.net/2017/11/perl-hated-programming-language-developers-says-report.html">https://www.techworm.net/2017/11/perl-hated-programming-language-developers-says-report.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

