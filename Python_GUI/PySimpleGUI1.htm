<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba grafického uživatelského rozhraní v Pythonu s využitím knihovny PySimpleGUI</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba grafického uživatelského rozhraní v Pythonu s využitím knihovny PySimpleGUI</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Pro tvorbu aplikací s grafickým uživatelským rozhraním v Pythonu máme na výběr množství knihoven a GUI toolkitů. Souběžně s vývojem toolkitů určených pro desktopy i zařízení s dotykovou obrazovkou (Kivy) vznikají knihovny, které se zaměřují na snadnou a rychlou tvorbu GUI. Sem spadá i PySimpleGUI.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím knihovny PySimpleGUI</a></p>
<p><a href="#k02">2. Knihovna PySimpleGUI</a></p>
<p><a href="#k03">3. Instalace knihovny PySimpleGUI</a></p>
<p><a href="#k04">4. Zobrazení prázdného okna s&nbsp;nastavenou velikostí a titulkem</a></p>
<p><a href="#k05">5. Smyčka událostí</a></p>
<p><a href="#k06">6. Přidání prvku GUI do okna</a></p>
<p><a href="#k07">7. Automatické přizpůsobení velikosti okna ovládacím prvkům</a></p>
<p><a href="#k08">8. Uspořádání většího množství ovládacích prvků v&nbsp;okně</a></p>
<p><a href="#k09">9. Dialog s&nbsp;informačním textem a potvrzujícím tlačítkem</a></p>
<p><a href="#k10">10. Hodnoty vracené metodou <strong>window.read</strong></a></p>
<p><a href="#k11">11. Reakce na stisk konkrétního tlačítka</a></p>
<p><a href="#k12">12. Problematika pravidelného rozmístění GUI prvků v&nbsp;okně</a></p>
<p><a href="#k13">13. Specifikace rozměrů prvků</a></p>
<p><a href="#k14">14. Další standardní ovládací prvky</a></p>
<p><a href="#k15">15. Dialog s&nbsp;dalšími ovládacími prvky</a></p>
<p><a href="#k16">16. Změna (barvového) tématu</a></p>
<p><a href="#k17">17. Výpis všech dostupných barvových témat</a></p>
<p><a href="#k18">18. Obsah navazujícího článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím knihovny PySimpleGUI</h2>

<p>V&nbsp;předchozích čtyřiceti částech <a
href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">seriálu
o tvorbě aplikací s&nbsp;grafickým uživatelským rozhraním v&nbsp;Pythonu</a>
jsme si nejprve popsali knihovnu <i>Tkinter</i> (ta je v&nbsp;Pythonu
standardem pro tvorbu GUI) a následně pak i knihovnu nazvanou <i>appJar</i>,
která je na Tkinteru založena a umožňuje snadnou tvorbu aplikací
s&nbsp;jednodušším grafickým uživatelským rozhraním.</p>

<img src="https://i.iinfo.cz/images/104/appjar5-14.png" class="image-308906" alt="&#160;" width="411" height="354" />
<p><i>Obrázek 1: appJar podporuje i relativně složité ovládací prvky, jakými
jsou například stromy.</i></p>

<p>Zabývali jsme se i aplikacemi psanými v&nbsp;Pythonu, které pro GUI (ale i
pro další oblasti) používají vazbu na populární framework <a
href="https://www.qt.io/">Qt</a>.  Přitom existuje hned několik možností, jak
propojit Python a Qt. Základ tvoří knihovny <a
href="https://riverbankcomputing.com/software/pyqt/intro">PyQt</a>
(s&nbsp;duální licencí GNU GPL v3 a Riverbank Commercial License) a <a
href="https://wiki.qt.io/PySide">PySide</a> (s&nbsp;licencí LGPL) pro Qt &le;
4.8, další možností je <a href="https://wiki.qt.io/PySide2">PySide2</a> určená
pro Qt 5.x a <a href="https://pypi.org/project/PySide6/">PySide6</a> pro verzi
6.x (číslování je poněkud divné, ale od verze 6 alespoň logické).</p>

<a href="https://www.root.cz/obrazek/323271/"><img src="https://i.iinfo.cz/images/489/pyside16-7-prev.png" class="image-323271" alt="&#160;" height="270" width="346" /></a>
<p><i>Obrázek 2: Aplikace naprogramovaná v&nbsp;PySide s&nbsp;nastaveným stylem
<strong>Cleanlooks</strong>.</i></p>

<p>Ovšem vývoj knihoven určených pro tvorbu grafického uživatelského rozhraní
se v&nbsp;posledních několika letech posunul, a to v&nbsp;několika různých
směrech. Poměrně často se nyní můžeme setkat s&nbsp;frameworkem <i>Kivy</i>.
Jedná se vlastně o ucelenou platformu určenou především pro tvorbu aplikací pro
mobilní platformy, tedy pro Android a iOS. Ve skutečnosti je ale možné Kivy
použít i na běžných desktopech s&nbsp;operačními systémy Mac OS X, Microsoft
Windows a samozřejmě (a to v&nbsp;neposlední řadě) i s&nbsp;Linuxem.
V&nbsp;tomto případě však nebudou k&nbsp;dispozici všechny možnosti ovládání,
především rozhraní multitouch určené primárně pro dotykové obrazovky. Už
z&nbsp;této poznámky je asi zřejmé, že se Kivy bude v&nbsp;mnoha ohledech
odlišovat od všech výše uvedených knihoven a frameworků, které jsou určeny
především pro běžné desktopy ovládané kombinací klávesnice a myši. Kivy však
jde ještě dále, protože programátorům nabízí prakticky všechny technologie,
které jsou pro moderní GUI aplikace vyžadovány. A protože se jedná o knihovnu
určenou především pro mobilní zařízení, je podporována i OpenGL ES 2, takže
vykreslování ovládacích prvků je akcelerováno. Navíc je možné pro deklaraci GUI
použít speciální jazyk nazvaný Kv, který zde hraje podobnou roli jako například
QML (Qt Modeling Language).</p></p>

<a href="https://www.root.cz/obrazek/1113110/"><img src="https://i.iinfo.cz/images/432/kivy-prev.webp" class="image-1113110" width="331" height="270" data-prev-filename="https://i.iinfo.cz/images/432/kivy-prev.webp" data-prev-width="331" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/432/kivy-large.webp" data-large-width="643" data-large-height="525" alt="&#160;" title="Autor: &lt;a href=&quot;https://kivy.org/&quot;&gt;Kivy authors&lt;/a&gt;, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 3: Kivy se soustředí spíše na tvorbu GUI pro mobilní telefony a
tablety s&nbsp;multitouch ovládáním. Nicméně lze použít i pro tvorbu
desktopových aplikací.</i></p>

<p>Částečně podobným směrem se vydala i knihovna <a
href="https://github.com/hoffstadt/DearPyGui">DearPyGui</a>, k&nbsp;níž se
(stejně jako ke <i>Kivy</i>) ještě vrátíme.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Knihovna PySimpleGUI</h2>

<p>Ovšem souběžně s&nbsp;Kivy a DearPyGui vznikají i knihovny jdoucí poněkud
odlišným směrem. Konkrétně ke snadné tvorbě grafických uživatelských rozhraní,
a to i pro ty uživatele, kteří nejsou profesionálními vývojáři. Jeden příklad
takového přístupu už jsme ostatně viděli &ndash; je jím výše zmíněná knihovna
<i>appJar</i>. A druhou knihovnou, která je v&nbsp;současnosti známější a má i
lépe zapamatovatelné jméno (což je poměrně důležité), je knihovna nazvaná
<i>PySimpleGUI</i>.</p>

<p>Jedná se o knihovnu, která okna ani jednotlivé ovládací prvky nekreslí
s&nbsp;využitím vlastního programového kódu. Namísto toho využívá možností
poskytovaných jinými knihovnami: <i>tkinter</i> (základ), <i>Pyside2</i>,
<i>wxPython</i> či <i>Remi</i> (ta zajišťuje běh ve webovém prohlížeči &ndash;
k&nbsp;tomu se dostaneme příště). Toto řešení sice mezi programátora a GUI
přidává další vrstvu abstrakce, ale přináší to i několik výhod. Například je
možné PySimpleGUI provozovat pouze na počítači se standardní instalací Pythonu,
kde lze předpokládat existenci tkinteru. A ve chvíli, kdy je rozhodnuto, že se
má z&nbsp;desktopové aplikace stát aplikace běžící ve webovém prohlížeči, bude
tato konverze možná (i když prozatím s&nbsp;omezeními).</p>

<p>Se základními možnostmi poskytovanými touto knihovnou se seznámíme
v&nbsp;dnešním článku.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace knihovny PySimpleGUI</h2>

<p>Pokud se spokojíme s&nbsp;tím, že <i>PySimpleGUI</i> bude vykreslovat okna i
ovládací prvky s&nbsp;využitím standardní GUI knihovny <i>tkinter</i>, je její
instalace snadná a rychlá. Instalaci provedeme, ostatně jako již mnohokrát,
pouze pro přihlášeného uživatele:</p>

<pre>
$ <strong>pip3 install --user pysimplegui</strong>
&nbsp;
Collecting pysimplegui
  Downloading PySimpleGUI-4.60.5-py3-none-any.whl (512 kB)
     |████████████████████████████████| 512 kB 1.7 MB/s 
Installing collected packages: pysimplegui
Successfully installed pysimplegui-4.60.5
</pre>

<p>Po instalaci by se měl v&nbsp;adresáři s&nbsp;nainstalovanými balíčky
Pythonu objevit i podadresář <strong>PySimpleGUI</strong>:</p>

<pre>
$ <strong>ls -1h .local/lib/python3.8/site-packages/PySimpleGUI</strong>
&nbsp;
total 1,8M
total 1,8M
-rw-rw-r-- 1 ptisnovs ptisnovs   88 Dec 21 12:54 __init__.py
drwxrwxr-x 2 ptisnovs ptisnovs 4,0K Dec 21 12:54 __pycache__
-rw-rw-r-- 1 ptisnovs ptisnovs 1,8M Dec 21 12:54 PySimpleGUI.py
</pre>

<p>Zvláštní je, že celý zdrojový kód knihovny <i>PySimpleGUI</i> je uložen
v&nbsp;jediném souboru o velikosti 1,8 MB.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zobrazení prázdného okna s&nbsp;nastavenou velikostí a titulkem</h2>

<p>Popis většiny GUI knihoven pro Python jsme začínali demonstračním příkladem,
v&nbsp;němž se vykreslilo prázdné okno s&nbsp;titulkem. V&nbsp;případě knihovny
PySimpleGUI je to snadné. Postačují jen čtyři kroky. V&nbsp;prvním kroku musíme
vytvořit prázdný &bdquo;dvourozměrný&ldquo; seznam, do něhož budeme později
vkládat jednotlivé ovládací prvky:</p>

<pre>
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [[]]
</pre>

<p>Ve druhém kroku okno vytvoříme; současně dojde k&nbsp;jeho zobrazení.
Povšimněte si, že specifikujeme titulek okna, jeho komponenty (onen prázdný
seznam) a můžeme nastavit i jeho velikost:</p>

<pre>
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #1", layout, size=(320, 240))
</pre>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-1.webp" class="image-1113111" width="326" height="267" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 4: Výsledné okno zobrazené na desktopu.</i></p>

<p>Aby nebyl program ihned ukončen, musíme realizovat čekání na nějakou akci
uživatele (což bude pravděpodobně uzavření okna). Prozatím nebudeme
implementovat plnohodnotnou smyčku událostí, ale pouze čekání na jedinou
událost:</p>

<pre>
<i># čekání na událost</i>
window.read()
</pre>

<p>A nakonec je vhodné okno zavřít:</p>

<pre>
<i># po vzniku událostí aplikaci ukončíme</i>
window.close()
</pre>

<p>Celý program se tedy vlastně skládá z&nbsp;pouhých pěti řádků (včetně
importu balíčku PySimpleGUI):</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [[]]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #1", layout, size=(320, 240))
&nbsp;
<i># čekání na událost</i>
window.read()
&nbsp;
<i># po vzniku událostí aplikaci ukončíme</i>
window.close()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Smyčka událostí</h2>

<p>V&nbsp;některých aplikacích se s&nbsp;okny pracuje jako s&nbsp;jednoduchými
dialogy, v&nbsp;nichž se jen čeká na jedinou akci provedenou uživatelem (stisk
tlačítka <strong>Yes</strong> atd.). Ovšem například hlavní okno aplikace musí
umět reagovat na větší množství událostí. V&nbsp;takovém případě již musíme
implementovat smyčku s&nbsp;obsluhou událostí (<i>event loop</i>). Její
nejjednodušší varianta může vypadat následovně:</p>

<pre>
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event == sg.WIN_CLOSED:
        break
</pre>

<p>Jedná se tedy o &bdquo;nekonečnou&ldquo; smyčku, v&nbsp;níž čteme události
v&nbsp;pořadí, jak přichází a reagujeme na ně. Prozatím rozpoznáváme jen
jedinou událost a tou je uzavření okna (hodnotu <strong>values</strong>
prozatím ignorujeme).</p>

<p>Upravený příklad může vypadat následovně:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [[]]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #1", layout, size=(320, 240))
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event == sg.WIN_CLOSED:
        break
&nbsp;
<i># po výskuku ze smyčky událostí aplikaci ukončíme</i>
window.close()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Přidání prvku GUI do okna</h2>

<p>Nyní do okna přidáme nějaký GUI prvek (<i>widget</i>). Může se jednat o
jednoduché textové návěští (<i>label</i>). Jeho přidání do okna je snadné,
protože v&nbsp;parametru <strong>layout</strong> se předává dvourozměrný
seznam, v&nbsp;němž každý prvek seznamu odpovídá &bdquo;řádku&ldquo;
v&nbsp;okně. Prvkem takového seznamu je další seznam s&nbsp;jednotlivými
ovládacími prvky (<i>widgety</i>). Ty budou umístěny na řádku za sebou.</p>

<p>Vzhledem k&nbsp;tomu, že do okna přidáváme jen jediný ovládací prvek,
vložíme ho na první řádek a bude se jednat o jediný prvek na řádku. Výsledkem
tedy bude seznam obsahující další seznam s&nbsp;jediným prvkem, což můžeme
zapsat následovně:</p>

<pre>
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [[sg.Text("Hello, world!")]]
</pre>

<p>Popř.&nbsp;si můžeme tento seznam definovat na více programových řádcích
(což bude později vhodnější i přehlednější):</p>

<pre>
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [
        sg.Text("Hello, world!"),
    ],
]
</pre>

<p>Takto by mělo vypadat okno, do něhož bylo vloženo textové návěští:</p>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-2.webp" class="image-1113112" width="326" height="267" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 5: Okno s&nbsp;jediným GUI prvkem.</i></p>

<p>Pro jistotu si ještě ukažme úplný zdrojový kód takto rozšířeného
příkladu:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [[sg.Text("Hello, world!")]]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #2", layout, size=(320, 240))
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event == sg.WIN_CLOSED:
        break
&nbsp;
<i># po výskuku ze smyčky událostí aplikaci ukončíme</i>
window.close()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Automatické přizpůsobení velikosti okna ovládacím prvkům</h2>

<p>V&nbsp;předchozích demonstračních příkladech jsme vždy explicitně
specifikovali velikost okna. To není ve chvíli, kdy okno již obsahuje nějaké
ovládací prvky, nezbytně nutné. Velikost okna se totiž dokáže automaticky
přizpůsobit prvkům (jejich velikosti a rozmístění). Příkaz pro vytvoření okna
tedy můžeme zkrátit na:</p>

<pre>
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #3", layout)
</pre>

<p>Výsledek by mohl vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-3.webp" class="image-1113113" width="113" height="61" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 6: Automatické přizpůsobení velikosti okna prvkům.</i></p>

<p>Opět si pro úplnost ukažme celý zdrojový kód takto upraveného demonstračního
příkladu:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [[sg.Text("Hello, world!")]]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #3", layout)
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event == sg.WIN_CLOSED:
        break
&nbsp;
<i># po výskuku ze smyčky událostí aplikaci ukončíme</i>
window.close()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Uspořádání většího množství ovládacích prvků v&nbsp;okně</h2>

<p>Připomeňme si, že ovládací prvky (<i>widgety</i>) jsou v&nbsp;okně
uspořádány do pomyslných řádků, přičemž na každém řádku může být uvedeno větší
množství těchto prvků. A jednotlivé pomyslné řádky jsou na sobě nezávislé
&ndash; není zde tedy použit koncept mřížky (<i>grid</i>). To sice může na
první pohled vypadat jako poměrně primitivní způsob práce s&nbsp;rozmístěním
prvků na okně (<i>layout</i>), ale příště uvidíme, že to pro mnoho účelů může
být plně postačující.</p>

<p>Ukažme si nepatrně složitější GUI okno, v&nbsp;němž budou umístěny čtyři
ovládací prvky. Na prvním řádku bude textové návěští a tlačítko. Na druhém
řádku bude vstupní textové políčko a na řádku třetím pak dvě další tlačítka se
specifickým významem: odeslání dat a zrušení operace. Díky použití
&bdquo;seznamu seznamů&ldquo; je specifikace obsahu takového okna skutečně
jednoduchá:</p>

<pre>
layout = [
    [sg.Text("Hello, world!"), sg.Button("Button1")],
    [sg.InputText()],
    [sg.Submit(), sg.Cancel()],
]
</pre>

<p>Výsledek:</p>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-4.webp" class="image-1113114" width="355" height="129" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 7: Okno, do něhož jsou umístěny čtyři ovládací prvky.</i></p>

<p>Celý příklad se přitom rozšířil jen nepatrně, jak je to ostatně patrné
z&nbsp;celkového výpisu:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [sg.Text("Hello, world!"), sg.Button("Button1")],
    [sg.InputText()],
    [sg.Submit(), sg.Cancel()],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #4", layout)
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event == sg.WIN_CLOSED:
        break
&nbsp;
<i># po výskoku ze smyčky událostí aplikaci ukončíme</i>
window.close()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Dialog s&nbsp;informačním textem a potvrzujícím tlačítkem</h2>

<p>Již v&nbsp;předchozím textu jsme si řekli, že v&nbsp;aplikacích je mnohdy
zapotřebí zobrazovat různé dialogy a nikoli plnohodnotná interaktivní okna.
Dialog může být realizován snadno &ndash; vytvoříme okno s&nbsp;libovolnými GUI
prvky, ovšem nebudeme realizovat celou smyčku událostí. Namísto ní pouze
zavoláme metodu <strong>window.read()</strong> a popř.&nbsp;zpracujeme událost,
která vznikla (viz dále). Ukažme si tedy způsob vytvoření tohoto dialogu:</p>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-5.webp" class="image-1113115" width="113" height="95" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 8: Dialog s&nbsp;informačním textem a potvrzujícím tlačítkem.</i></p>

<p>Samotný skript, který tento dialog vytvoří, vypadá takto:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [sg.Text("Hello, world!")],
    [sg.Submit("okay")],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #5", layout)
&nbsp;
<i># čekání na uzavření okna</i>
window.read()
&nbsp;
<i># po přečtení události můžeme okno zavřít</i>
window.close()
</pre>

<p><div class="rs-tip-major">Poznámka: později si ještě ukážeme, jak u těchto
oken-dialogů specifikovat <i>modálnost</i>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Hodnoty vracené metodou <strong>window.read</strong></h2>

<p>Prozatím jsme v&nbsp;příkladech používali značně zjednodušenou formu smyčky
událostí, v&nbsp;níž jsme reagovali pouze na událost typu &bdquo;uzavření
okna&ldquo;:</p>

<pre>
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event == sg.WIN_CLOSED:
        break
</pre>

<p>Ovšem zajímavé bude zjistit, jaké další hodnoty se vrací a ukládají do
lokálních proměnných <strong>event</strong> a <strong>values</strong>. Proto si
tyto hodnoty budeme ve smyčce tisknout, a to pro smyčku vytvořenou pro okno se
čtyřmi ovládacími prvky:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [sg.Text("Hello, world!"), sg.Button("Button1")],
    [sg.InputText()],
    [sg.Submit(), sg.Cancel()],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #6", layout)
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
    print("Event: ", event, "    Values: ", values)
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    if event == sg.WIN_CLOSED:
        break
&nbsp;
<i># po výskoku ze smyčky událostí aplikaci ukončíme</i>
window.close()
</pre>

<p>Po stisku prvního tlačítka se vrátí:</p>

<pre>
Event:  Button1     Values:  {0: ''}
</pre>

<p>Po zápisu textu do textového pole nezískáme žádnou událost (!), ovšem
opětovné stlačení prvního tlačítka nyní vrátí:</p>

<pre>
Event:  Button1     Values:  {0: 'ahoj'}
</pre>

<p>To tedy znamená, že ve <strong>Values</strong> je uložen slovník
s&nbsp;hodnotami všech prvků, které mohou udržovat stav. A klíče, jak uvidíme
dále, lze specifikovat, takže nebude nutné zjišťovat, který prvek odpovídá
klíči 0.</p>

<p>Stisk dalších tlačítek mění <i>řetězec</i> uložený do proměnné
<strong>event</strong>:</p>

<pre>
Event:  Submit     Values:  {0: 'ahoj'}
Event:  Cancel     Values:  {0: 'ahoj'}
</pre>

<p>A konečně událost &bdquo;uzavření okna&ldquo; je odlišná, protože obě
vracené hodnoty budou <strong>None</strong>:</p>

<pre>
Event:  None     Values:  None
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Reakce na stisk konkrétního tlačítka</h2>

<p>Nyní již vlastně víme, jak můžeme ve smyčce událostí zareagovat na stisk
konkrétního tlačítka, protože se jeho označení vrátí přímo v&nbsp;první
návratové hodnotě metody <strong>window.read()</strong>. Přidejme si tedy do
okna tlačítko <strong>Exit</strong>:</p>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-6.webp" class="image-1113116" width="355" height="129" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 9: Další tlačítko přidané do okna.</i></p>

<p>V&nbsp;případě, že uživatel stiskne tlačítko <strong>Exit</strong>, ukončíme
smyčku událostí a zavřeme okno (viz zvýrazněný text):</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [sg.Text("Hello, world!"), sg.Button("Button1")],
    [sg.InputText()],
    [sg.Submit(), sg.Cancel(), sg.Exit()],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #7", layout)
&nbsp;
<i># obsluha smyčky událostí (event loop)</i>
while True:
    <i># přečtení události</i>
    event, values = window.read()
    print("Event: ", event, "    Values: ", values)
&nbsp;
    <i># reakce na událost "uzavření okna"</i>
    <strong>if event in {sg.WIN_CLOSED, "Exit"}:</strong>
        <strong>break</strong>
&nbsp;
<i># po výskoku ze smyčky událostí aplikaci ukončíme</i>
window.close()
</pre>

<p>Důležité je, že v&nbsp;tomto případě stále můžeme získat hodnotu zapsanou do
textového políčka:</p>

<pre>
Event:  Exit     Values:  {0: 'ahoj'}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Problematika pravidelného rozmístění GUI prvků v&nbsp;okně</h2>

<p>V&nbsp;předchozím textu jsme si řekli, že prvky v&nbsp;okně jsou rozmístěny
na pomyslných řádcích. Jednotlivé řádky jsou přitom na sobě nezávislé, což
znamená, že může být (na první pohled) poněkud problematické vertikální
zarovnání prvků. Ostatně si to můžeme ukázat na dialogu pro zadání jména a
příjmení (povšimněte si specifikace klíčů u obou vstupních textových polí):</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [sg.Text("Name"), sg.InputText(key="name")],
    [sg.Text("Surname"), sg.InputText(key="surname")],
    [sg.Submit()],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #8", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>

<p>Výsledkem bude okno, v&nbsp;němž nejsou prvky rozmístěny příliš elegantně
ani přehledně:</p>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-7.webp" class="image-1113117" width="421" height="119" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 10: Dialog pro zadání jména a příjmení.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Specifikace rozměrů prvků</h2>

<p>Výše uvedený problém lze řešit buď využitím <i>kontejnerů</i> pro prvky
(kontejner se přitom chová jako jediný prvek), nebo v&nbsp;jednodušších
případech tím, že u některých GUI prvků budeme specifikovat jejich velikost
(postačuje nastavit šířku a ponechat výšku nulovou). To nám pomůže zarovnat
textová návěští, přičemž vstupní textová pole mají shodnou velikost:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [sg.Text("Name", <strong>size=(8, 0)</strong>), sg.InputText(key="name")],
    [sg.Text("Surname", <strong>size=(8, 0)</strong>), sg.InputText(key="surname")],
    [sg.Submit()],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #9", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>

<p>Takto vypadá výsledek po zobrazení okna:</p>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-8.webp" class="image-1113118" width="425" height="119" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 11: Upravený dialog pro zadání jména a příjmení.</i></p>

<p>Za povšimnutí stojí i hodnoty vrácené z&nbsp;metody
<strong>window.read()</strong> po vyplnění obou políček a stisku tlačítka
<strong>Submit</strong>:</p>

<pre>
Event:  Submit     Values:  {'name': 'Pepek', 'surname': 'Vyskoč'}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Další standardní ovládací prvky</h2>

<p>V&nbsp;knihovně PySimpleGUI máme k&nbsp;dispozici i další ovládací prvky,
nejenom textová návěští, textová pole a tlačítka.</p>

<p>Důležitý je ovládací prvek pro zobrazení seznamu voleb. Seznam může být buď
neměnitelný (<strong>readonly=True</strong>) nebo do něj naopak uživatel může
zapsat novou hodnotu (takže jde vlastně o textové pole s&nbsp;nápovědou). U
tohoto prvku lze navíc zvolit, která z&nbsp;hodnot bude přednastavená při
prvním zobrazení okna (<strong>default_value=hodnota</strong>):</p>

<pre>
sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
</pre>

<p>Dalším prvkem je zatrhávací box, u něhož lze volit výchozí hodnotu a
případný popisek:</p>

<pre>
sg.Checkbox("", default=True, key="register e-mail")
</pre>

<p>A konečně z&nbsp;těch nejpoužívanějších prvků jmenujme sadu prvků, které
bývají spojeny do jediné skupiny tvořící &bdquo;radiová tlačítka&ldquo; (což
odkazuje na starodávná radia s&nbsp;pevně nastavenou předvolbou stanic pomocí
tlačítek &ndash; to se vlastně vrátilo zpět). Spojení těchto ovládacích prvků
do skupiny je realizováno specifikací této skupiny ve druhém povinném parametru
(v&nbsp;našem případě se jedná o skupiny <strong>THEME</strong>):</p>

<pre>
sg.Radio("Light", "THEME", default=False, key="light_theme"),
sg.Radio("Dark", "THEME", default=True, key="dark_theme"),
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Dialog s&nbsp;dalšími ovládacími prvky</h2>

<p>Nyní již máme k&nbsp;dispozici všechny znalosti potřebné pro realizaci
složitějšího dialogu obsahujícího další ovládací prvky. Prvky jsou opět
rozmístěny do řádků. Proto u prvních prvků na každém řádku specifikujeme jeho
šířku tak, aby byly prvky umístěné pod sebou vizuálně zarovnány:</p>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-9.webp" class="image-1113119" width="425" height="219" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 12: Dialog s&nbsp;dalšími ovládacími prvky.</i></p>

<p>A takto vypadá celý program. Stále by měl být poměrně dobře čitelný
(v&nbsp;porovnání s&nbsp;některými jinými GUI toolkity):</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [
        sg.Text("Name", size=(8, 0)),
        sg.InputText(key="name")
    ],
    [
        sg.Text("Surname", size=(8, 0)),
        sg.InputText(key="surname")
    ],
    [
        sg.Text("Role", size=(8, 0)),
        sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
    ],
    [
        sg.Text("Register e-mail", size=(8, 0)),
        sg.Checkbox("", default=True, key="register e-mail")
    ],
    [
        sg.Text("Color theme", size=(8, 0)),
        sg.Radio("Light", "THEME", default=False, key="light_theme"),
        sg.Radio("Dark", "THEME", default=True, key="dark_theme"),
    ],
    [
        sg.Submit()
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #9", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>

<p>Zajímavé bude zjistit, jaké hodnoty se vypíšou po stisku potvrzujícího
tlačítka:</p>

<pre>
Event:  Submit     Values:  {'name': 'Pepek', 'surname': 'Vyskoč', 'role': 'Administrator', 'register e-mail': True, 'light_theme': True, 'dark_theme': False}
</pre>

<p>Zpracování slovníku <strong>values</strong> by tedy mělo být pro každého
vývojáře již relativně snadným úkolem.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Změna (barvového) tématu</h2>

<p>Výchozí barvové téma, které je nastaveno při spuštění aplikace, je možné
snadno změnit, ovšem ještě <i>před zobrazením</i> okna. Provede se to zavoláním
funkce <strong>PySimpleGUI.theme</strong>, kterému se předá řetězec
s&nbsp;názvem požadovaného barvového schématu. Můžeme například zvolit barvové
schéma nazvané &bdquo;DarkAmber&ldquo;:</p>

<pre>
<i># nastavení odlišného tématu</i>
sg.theme('DarkAmber')
</pre>

<p>Nyní by měl celý dialog vypadat odlišně:</p>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-10.webp" class="image-1113120" width="425" height="219" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 13: Dialog s&nbsp;dalšími ovládacími prvky po změně barvového tématu.</i></p>

<p>Volání <strong>PySimpleGUI.theme()</strong> provedeme ještě před vytvořením
okna, jak je to patrné z&nbsp;výpisu celého zdrojového kódu demonstračního
příkladu:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
<i># nastavení odlišného tématu</i>
sg.theme('DarkAmber')
&nbsp;
<i># ovládací prvky, které se mají zobrazit v okně</i>
layout = [
    [
        sg.Text("Name", size=(8, 0)),
        sg.InputText(key="name")
    ],
    [
        sg.Text("Surname", size=(8, 0)),
        sg.InputText(key="surname")
    ],
    [
        sg.Text("Role", size=(8, 0)),
        sg.Combo(["Administrator", "Maintainer", "Guest"], default_value="Guest", readonly=True, key="role")
    ],
    [
        sg.Text("Register e-mail", size=(8, 0)),
        sg.Checkbox("", default=True, key="register e-mail")
    ],
    [
        sg.Text("Color theme", size=(8, 0)),
        sg.Radio("Light", "THEME", default=False, key="light_theme"),
        sg.Radio("Dark", "THEME", default=True, key="dark_theme"),
    ],
    [
        sg.Submit()
    ],
]
&nbsp;
<i># vytvoření okna s ovládacími prvky</i>
window = sg.Window("Window #9", layout)
&nbsp;
<i># přečtení jediné události</i>
event, values = window.read()
print("Event: ", event, "    Values: ", values)
&nbsp;
<i># po přečtení události okno zavřeme</i>
window.close()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Výpis všech dostupných barvových témat</h2>

<p>Jména všech dostupných barvových témat jsou uložena jako klíče slovníku
<strong>PySimpleGUI.LOOK_AND_FEEL_TABLE</strong> (hodnotami jsou pak jednotlivé
části GUI), takže seznam témat je možné získat takto:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
themes = sorted(sg.LOOK_AND_FEEL_TABLE.keys())
&nbsp;
print("\n".join(themes))
</pre>

<p>Alternativně lze zavolat funkci
<strong>PySimpleGUI.list_of_look_and_feel_values()</strong>, která vrátí seznam
všech dostupných témat:</p>

<pre>
import PySimpleGUI as sg
&nbsp;
themes = sorted(sg.list_of_look_and_feel_values())
&nbsp;
print("\n".join(themes))
</pre>

<p>Výsledkem bude v&nbsp;obou případech stejný seznam dostupných barvových
témat, která lze například nabídnout uživateli (což si ukážeme příště):</p>

<pre>
Black
BlueMono
BluePurple
BrightColors
BrownBlue
Dark
Dark2
DarkAmber
DarkBlack
DarkBlack1
DarkBlue
DarkBlue1
DarkBlue10
DarkBlue11
DarkBlue12
DarkBlue13
DarkBlue14
DarkBlue15
DarkBlue16
DarkBlue17
DarkBlue2
DarkBlue3
DarkBlue4
DarkBlue5
DarkBlue6
DarkBlue7
DarkBlue8
DarkBlue9
DarkBrown
DarkBrown1
DarkBrown2
DarkBrown3
DarkBrown4
DarkBrown5
DarkBrown6
DarkBrown7
DarkGreen
DarkGreen1
DarkGreen2
DarkGreen3
DarkGreen4
DarkGreen5
DarkGreen6
DarkGreen7
DarkGrey
DarkGrey1
DarkGrey10
DarkGrey11
DarkGrey12
DarkGrey13
DarkGrey14
DarkGrey15
DarkGrey2
DarkGrey3
DarkGrey4
DarkGrey5
DarkGrey6
DarkGrey7
DarkGrey8
DarkGrey9
DarkPurple
DarkPurple1
DarkPurple2
DarkPurple3
DarkPurple4
DarkPurple5
DarkPurple6
DarkPurple7
DarkRed
DarkRed1
DarkRed2
DarkTanBlue
DarkTeal
DarkTeal1
DarkTeal10
DarkTeal11
DarkTeal12
DarkTeal2
DarkTeal3
DarkTeal4
DarkTeal5
DarkTeal6
DarkTeal7
DarkTeal8
DarkTeal9
Default
Default1
DefaultNoMoreNagging
GrayGrayGray
Green
GreenMono
GreenTan
HotDogStand
Kayak
LightBlue
LightBlue1
LightBlue2
LightBlue3
LightBlue4
LightBlue5
LightBlue6
LightBlue7
LightBrown
LightBrown1
LightBrown10
LightBrown11
LightBrown12
LightBrown13
LightBrown2
LightBrown3
LightBrown4
LightBrown5
LightBrown6
LightBrown7
LightBrown8
LightBrown9
LightGray1
LightGreen
LightGreen1
LightGreen10
LightGreen2
LightGreen3
LightGreen4
LightGreen5
LightGreen6
LightGreen7
LightGreen8
LightGreen9
LightGrey
LightGrey1
LightGrey2
LightGrey3
LightGrey4
LightGrey5
LightGrey6
LightPurple
LightTeal
LightYellow
Material1
Material2
NeutralBlue
Purple
Python
PythonPlus
Reddit
Reds
SandyBeach
SystemDefault
SystemDefault1
SystemDefaultForReal
Tan
TanBlue
TealMono
Topanga
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah navazujícího článku</h2>

<p>Prozatím již víme, jak lze s&nbsp;využitím knihovny PySimpleGUI vytvořit
okno či dialog se základními prvky GUI. Ovšem pro tvorbu aplikací se
složitějšími dialogy je nutné umět lépe rozmisťovat jednotlivé ovládací prvky
na ploše oken a dialogů. K&nbsp;tomuto účelu slouží takzvané <i>kontejnery</i>,
které si popíšeme příště. Taktéž si ukážeme využití kreslicí plochy a
v&nbsp;neposlední řadě i způsob naprogramování reakce na události, které
vzniknou například ihned po výběru prvku ve výběrovém boxu (v&nbsp;takovém
případě totiž PySimpleGUI ve výchozím nastavení žádnou událost nevytváří).</p>

<img src="https://i.iinfo.cz/images/518/pysimplegui-1-11.webp" class="image-1113121" width="721" height="801" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 14: Nepatrně složitější aplikace s&nbsp;GUI, která je součástí
samotného balíčku PySimpleGUI.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si v&nbsp;dnešním článku ukázali,
naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady. Pro jejich spuštění je pochopitelně
nutné mít nainstalován balíček <i>PySimpleGUI</i>:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>01-empty-window.py</td><td>prázdné okno</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/01-empty-window.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/01-empty-window.py</a></td></tr>
<tr><td> 2</td><td>02-empty-window-event-loop.py</td><td>prázdné okno, implementace klasické smyčky událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/02-empty-window-event-loop.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/02-empty-window-event-loop.py</a></td></tr>
<tr><td> 3</td><td>03-window-with-text-label.py</td><td>okno se specifikovanou velikostí a s&nbsp;vloženým textovým prvkem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/03-window-with-text-label.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/03-window-with-text-label.py</a></td></tr>
<tr><td> 4</td><td>04-window-with-text-label.py</td><td>okno s&nbsp;automaticky vypočtenou velikostí a s&nbsp;vloženým textovým prvkem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/04-window-with-text-label.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/04-window-with-text-label.py</a></td></tr>
<tr><td> 5</td><td>05-more-controls.py</td><td>pětice ovládacích prvků přidaných do okna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/05-more-controls.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/05-more-controls.py</a></td></tr>
<tr><td> 6</td><td>06-info.py</td><td>informační okno (dialog) bez navázané smyčky událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/06-info.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/06-info.py</a></td></tr>
<tr><td> 7</td><td>07-events.py</td><td>tisk všech zaregistrovaných a přečtených událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/07-events.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/07-events.py</a></td></tr>
<tr><td> 8</td><td>08-events-cancel.py</td><td>tisk zaregistrovaných událostí, reakce na stisk tlačítka <strong>Cancel</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/08-events-cancel.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/08-events-cancel.py</a></td></tr>
<tr><td> 9</td><td>09-one-shot-window.py</td><td>dialog pro zadání údajů do textových políček, bez smyčky událostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/09-one-shot-window.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/09-one-shot-window.py</a></td></tr>
<tr><td>10</td><td>10-sizing.py</td><td>explicitní nastavení velikostí jednotlivých ovládacích prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/10-sizing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/10-sizing.py</a></td></tr>
<tr><td>11</td><td>11-even-more-controls.py</td><td>přidání dalších ovládacích prvků do okna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/11-even-more-controls.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/11-even-more-controls.py</a></td></tr>
<tr><td>12</td><td>12-different-theme.py</td><td>nastavení odlišného barvového tématu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/12-different-theme.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/12-different-theme.py</a></td></tr>
<tr><td>13</td><td>13-print-themes.py</td><td>tisk jmen všech dostupných témat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/13-print-themes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/13-print-themes.py</a></td></tr>
<tr><td>14</td><td>14-print-themes-2.py</td><td>tisk jmen všech dostupných témat, lepší varianta</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/14-print-themes-2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/14-print-themes-2.py</a></td></tr>
<tr><td>15</td><td>15-select-theme.py</td><td>interaktivní změna tématu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/15-select-theme.py">https://github.com/tisnik/most-popular-python-libs/blob/master/PySimpleGUI/15-select-theme.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PySimpleGUI<br />
<a href="https://www.pysimplegui.org/en/latest/">https://www.pysimplegui.org/en/latest/</a>
</li>

<li>Kivy na GitHubu<br />
<a href="https://github.com/kivy/kivy">https://github.com/kivy/kivy</a>
</li>

<li>DearPyGui na GitHubu<br />
<a href="https://github.com/hoffstadt/DearPyGui">https://github.com/hoffstadt/DearPyGui</a>
</li>

<li>Dokumentace ke knihovně DearPyGui<br />
<a href="https://dearpygui.readthedocs.io/en/latest/index.html#">https://dearpygui.readthedocs.io/en/latest/index.html#</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>Stránky projektu wxPython<br />
<a href="https://wxpython.org/">https://wxpython.org/</a>
</li>

<li>wxPython Project Phoenix (na GitHubu)<br />
<a href="https://github.com/wxWidgets/Phoenix/blob/wxPython-4.0.3/README.rst">https://github.com/wxWidgets/Phoenix/blob/wxPython-4.0.3/README.rst</a>
</li>

<li>wxPython API Documentation<br />
<a href="https://docs.wxpython.org/index.html">https://docs.wxpython.org/index.html</a>
</li>

<li>wxWidgets<br />
<a href="https://wxwidgets.org/">https://wxwidgets.org/</a>
</li>

<li>wxPython 4.0.3 na PyPi<br />
<a href="https://pypi.org/project/wxPython/4.0.3/">https://pypi.org/project/wxPython/4.0.3/</a>
</li>

<li>wxGlade - a GUI builder for wxWidgets<br />
<a href="http://wxglade.sourceforge.net/">http://wxglade.sourceforge.net/</a>
</li>

<li>Repositář projektu wxGlade<br />
<a href="https://github.com/wxGlade/wxGlade/">https://github.com/wxGlade/wxGlade/</a>
</li>

<li>wxGlade’s documentation<br />
<a href="http://wxglade.sourceforge.net/docs/index.html">http://wxglade.sourceforge.net/docs/index.html</a>
</li>

<li>Graphical User Interfaces (GUI)<br />
<a href="https://pythonspot.com/gui/">https://pythonspot.com/gui/</a>
</li>

<li>wxPyWiki<br />
<a href="https://wiki.wxpython.org/FrontPage">https://wiki.wxpython.org/FrontPage</a>
</li>

<li>Getting started with wxPython<br />
<a href="https://wiki.wxpython.org/Getting%20Started#A_First_Application:_.22Hello.2C_World.22">https://wiki.wxpython.org/Getting%20Started#A_First_Application:_.22Hello.2C_World.22</a>
</li>

<li>wxPython GUI tutorial<br />
<a href="https://pythonspot.com/wxpython-gui-tutorial/">https://pythonspot.com/wxpython-gui-tutorial/</a>
</li>

<li>wxPython tutorial<br />
<a href="http://zetcode.com/wxpython/">http://zetcode.com/wxpython/</a>
</li>

<li>Build wxPython On Raspberry Pi<br />
<a href="https://wiki.wxpython.org/BuildWxPythonOnRaspberryPi">https://wiki.wxpython.org/BuildWxPythonOnRaspberryPi</a>
</li>

<li>wxPython History<br />
<a href="https://wxpython.org/pages/history/index.html">https://wxpython.org/pages/history/index.html</a>
</li>

<li>Installing wxPython 4.0 (Project Phoenix) on Fedora 27<br />
<a href="https://blog.wizardsoftheweb.pro/installing-wxpython-on-fedora/">https://blog.wizardsoftheweb.pro/installing-wxpython-on-fedora/</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Hand Coded GUI Versus Qt Designer GUI<br />
<a href="https://stackoverflow.com/questions/387092/hand-coded-gui-versus-qt-designer-gui">https://stackoverflow.com/questions/387092/hand-coded-gui-versus-qt-designer-gui</a>
</li>

<li>Qt Creator Manual<br />
<a href="http://doc.qt.io/qtcreator/">http://doc.qt.io/qtcreator/</a>
</li>

<li>Qt Designer Manual<br />
<a href="http://doc.qt.io/qt-5/qtdesigner-manual.html">http://doc.qt.io/qt-5/qtdesigner-manual.html</a>
</li>

<li>Qt Creator (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Qt_Creator">https://en.wikipedia.org/wiki/Qt_Creator</a>
</li>

<li>QIODevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QIODevice.html#PySide.QtCore.QIODevice">https://pyside.github.io/docs/pyside/PySide/QtCore/QIODevice.html#PySide.QtCore.QIODevice</a>
</li>

<li>QFile<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QFile.html#PySide.QtCore.QFile">https://pyside.github.io/docs/pyside/PySide/QtCore/QFile.html#PySide.QtCore.QFile</a>
</li>

<li>QUiLoader<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtUiTools/QUiLoader.html#PySide.QtUiTools.PySide.QtUiTools.QUiLoader.load">https://pyside.github.io/docs/pyside/PySide/QtUiTools/QUiLoader.html#PySide.QtUiTools.PySide.QtUiTools.QUiLoader.load</a>
</li>

<li>QSvgWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html">https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html</a>
</li>

<li>QByteArray<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html">https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

